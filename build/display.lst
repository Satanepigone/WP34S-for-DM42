ARM GAS  /tmp/cc1e4Gjl.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/cc1e4Gjl.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/cc1e4Gjl.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/cc1e4Gjl.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/cc1e4Gjl.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/cc1e4Gjl.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 190:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
ARM GAS  /tmp/cc1e4Gjl.s 			page 7


 191:src/display.c ****       MSG2("Interrupted", "X"),
 192:src/display.c **** #endif
 193:src/display.c ****     };
 194:src/display.c **** #undef MSG1
 195:src/display.c **** #undef MSG2
 196:src/display.c **** #ifndef REALBUILD
 197:src/display.c ****   static const char *const error_table_text[] =
 198:src/display.c ****     {
 199:src/display.c ****       " P r o g r a m ",
 200:src/display.c ****       "",
 201:src/display.c ****       " o r   d a t e ",
 202:src/display.c ****       " O p - c o d e ",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " L a b e l ",
 206:src/display.c ****       " O p e r a t i o n ",
 207:src/display.c ****       "",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " F u l l ",
 211:src/display.c ****       " C l a s h ",
 212:src/display.c ****       "",
 213:src/display.c ****       " T o o   s m a l l ",
 214:src/display.c ****       " D a t a   p o i n t s ",
 215:src/display.c ****       " P a r a m e t e r ",
 216:src/display.c ****       "",
 217:src/display.c ****       " D a t a ",
 218:src/display.c ****       " P r o t e c t e d ",
 219:src/display.c ****       " F o u n d ",
 220:src/display.c ****       " M i s m a t c h ",
 221:src/display.c ****       "",
 222:src/display.c ****       " F u l l ",
 223:src/display.c ****       " I n s t a l l e d ",
 224:src/display.c **** #ifndef SHIFT_EXPONENT
 225:src/display.c ****       "",
 226:src/display.c ****       "",
 227:src/display.c **** #endif
 228:src/display.c ****       "",
 229:src/display.c ****     };
 230:src/display.c **** #endif
 231:src/display.c **** 
 232:src/display.c ****   if (e != ERR_NONE || Running) {
 233:src/display.c ****     const char *p = error_table[e];
 234:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 235:src/display.c ****     if (*q == '\0')
 236:src/display.c ****       q = S7_ERROR;
 237:src/display.c ****     if (*q == 'X') {
 238:src/display.c ****       DispMsg = p;
 239:src/display.c ****       frozen_display();
 240:src/display.c ****     }
 241:src/display.c ****     else {
 242:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 243:src/display.c ****       if (*q == '1')
 244:src/display.c **** 	q = CNULL;
 245:src/display.c **** #endif
 246:src/display.c ****       message(p, q);
 247:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
ARM GAS  /tmp/cc1e4Gjl.s 			page 8


 248:src/display.c **** #ifndef REALBUILD
 249:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 250:src/display.c **** #endif
 251:src/display.c ****     }
 252:src/display.c **** #ifdef INFRARED
 253:src/display.c ****     if (Tracing) {
 254:src/display.c ****       if (*q == 'X')
 255:src/display.c **** 	print_reg(regX_idx, p, 0);
 256:src/display.c ****       else {
 257:src/display.c **** 	print_tab(0);
 258:src/display.c **** 	print_line(p, 0);
 259:src/display.c **** 	print(' ');
 260:src/display.c **** 	while (*q != '\0') {
 261:src/display.c **** 	  int c = *q;
 262:src/display.c **** 	  if (c >= 'A')
 263:src/display.c **** 	    c |= 0x60; // ASCII lower case
 264:src/display.c **** 	  print(c);
 265:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 266:src/display.c **** 	    ++q;
 267:src/display.c **** 	  ++q;
 268:src/display.c **** 	}
 269:src/display.c **** 	print_advance( 0 );
 270:src/display.c ****       }
 271:src/display.c ****     }
 272:src/display.c **** #endif
 273:src/display.c ****   }
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** 
 277:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 278:src/display.c ****  * display.
 279:src/display.c ****  */
 280:src/display.c **** #define D_TOP 64
 281:src/display.c **** #define D_TL 32
 282:src/display.c **** #define D_TR 8
 283:src/display.c **** #define D_MIDDLE 16
 284:src/display.c **** #define D_BL 4
 285:src/display.c **** #define D_BR 1
 286:src/display.c **** #define D_BOTTOM 2
 287:src/display.c **** 
 288:src/display.c **** #include "charset7.h"
 289:src/display.c **** 
 290:src/display.c **** #ifndef REALBUILD
 291:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 292:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 293:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 294:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 295:src/display.c **** 
 296:src/display.c **** static void set_mant_sign_dot()
 297:src/display.c **** {
 298:src/display.c ****   LastDisplayedNumber[0]='-';
 299:src/display.c ****   set_dot(MANT_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]=' ';
ARM GAS  /tmp/cc1e4Gjl.s 			page 9


 305:src/display.c ****   clr_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void set_exp_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedExponent[0]='-';
 311:src/display.c ****   set_dot(EXP_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void clr_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]=' ';
 317:src/display.c ****   clr_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** #else
 321:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 322:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 325:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 326:src/display.c **** 
 327:src/display.c **** #endif
 328:src/display.c **** 
 329:src/display.c **** #ifndef REALBUILD
 330:src/display.c **** int getdig(int ch)
 331:src/display.c **** #else
 332:src/display.c ****   static int getdig(int ch)
 333:src/display.c **** #endif
 334:src/display.c **** {
 335:src/display.c ****   // perform index lookup
 336:src/display.c ****   return digtbl[ch&0xff];
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** void dot(int n, int on) {
 340:src/display.c ****   if (on)	set_dot(n);
 341:src/display.c ****   else	clr_dot(n);
 342:src/display.c **** }
 343:src/display.c **** 
 344:src/display.c **** 
 345:src/display.c **** /* Set the decimal point *after* the indicated digit
 346:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 347:src/display.c ****  * of decimal.
 348:src/display.c ****  */
 349:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 350:src/display.c ****   if (res) {
 351:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 352:src/display.c ****   } else {
 353:src/display.c ****     set_dot(posn+7);
 354:src/display.c ****     if (decimal != DECIMAL_DOT)
 355:src/display.c ****       set_dot(posn+8);
 356:src/display.c **** #ifndef REALBUILD
 357:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 358:src/display.c **** #endif
 359:src/display.c ****   }
 360:src/display.c ****   return res;
 361:src/display.c **** }
ARM GAS  /tmp/cc1e4Gjl.s 			page 10


 362:src/display.c **** 
 363:src/display.c **** /* Set the digit group separator *before* the specified digit.
 364:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 365:src/display.c ****  * sep argument.
 366:src/display.c ****  */
 367:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 368:src/display.c ****   if (sep == SEP_NONE)
 369:src/display.c ****     return res;
 370:src/display.c ****   if (res) {
 371:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 372:src/display.c ****     else *res++ = '.';
 373:src/display.c ****   } else {
 374:src/display.c ****     posn -= SEGS_PER_DIGIT;
 375:src/display.c ****     set_dot(posn+7);
 376:src/display.c ****     if (sep == SEP_COMMA)
 377:src/display.c ****       set_dot(posn+8);
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 380:src/display.c **** #endif
 381:src/display.c ****   }
 382:src/display.c ****   return res;
 383:src/display.c **** }
 384:src/display.c **** 
 385:src/display.c **** /* Set a digit in positions [base, base+6] */
 386:src/display.c **** static void set_dig(int base, int ch)
 387:src/display.c **** {
 136              		.loc 1 387 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 388:src/display.c ****   int i;
 140              		.loc 1 388 3 view .LVU36
 389:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 389 3 view .LVU37
 142              	.LBB144:
 143              	.LBI144:
 330:src/display.c **** #else
 144              		.loc 1 330 5 view .LVU38
 145              	.LBB145:
 336:src/display.c **** }
 146              		.loc 1 336 3 view .LVU39
 336:src/display.c **** }
 147              		.loc 1 336 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 336:src/display.c **** }
 149              		.loc 1 336 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE145:
 152              	.LBE144:
 390:src/display.c **** #ifndef REALBUILD
 391:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 391 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 387:src/display.c ****   int i;
 155              		.loc 1 387 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc1e4Gjl.s 			page 11


 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB147:
 163              	.LBB146:
 336:src/display.c **** }
 164              		.loc 1 336 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 336:src/display.c **** }
 167              		.loc 1 336 16 view .LVU45
 168              	.LBE146:
 169              	.LBE147:
 170              		.loc 1 391 3 is_stmt 1 view .LVU46
 171              		.loc 1 391 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 392:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 392 5 is_stmt 1 view .LVU48
 174              		.loc 1 392 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 392 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 392 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 392 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 392 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 393:src/display.c ****   else
 394:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 395:src/display.c **** #endif
 396:src/display.c ****   for (i=6; i>=0; i--)
 397:src/display.c ****     {
 398:src/display.c ****       //		dot(base, c & (1 << i));
 399:src/display.c ****       if (c & (1 << i))
 400:src/display.c **** 	set_dot(base);
 196              		.loc 1 400 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 401:src/display.c ****       else
 402:src/display.c **** 	clr_dot(base);
 403:src/display.c ****       base++;
 199              		.loc 1 403 7 is_stmt 1 view .LVU55
 396:src/display.c ****     {
ARM GAS  /tmp/cc1e4Gjl.s 			page 12


 200              		.loc 1 396 19 view .LVU56
 396:src/display.c ****     {
 201              		.loc 1 396 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 396:src/display.c ****     {
 204              		.loc 1 396 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 400:src/display.c ****       else
 208              		.loc 1 400 2 is_stmt 1 view .LVU59
 402:src/display.c ****       base++;
 209              		.loc 1 402 2 view .LVU60
 399:src/display.c **** 	set_dot(base);
 210              		.loc 1 399 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 399:src/display.c **** 	set_dot(base);
 212              		.loc 1 399 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 399:src/display.c **** 	set_dot(base);
 216              		.loc 1 399 7 is_stmt 1 view .LVU63
 399:src/display.c **** 	set_dot(base);
 217              		.loc 1 399 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 402:src/display.c ****       base++;
 219              		.loc 1 402 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 403 7 is_stmt 1 view .LVU66
 396:src/display.c ****     {
 223              		.loc 1 396 19 view .LVU67
 396:src/display.c ****     {
 224              		.loc 1 396 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 396:src/display.c ****     {
 227              		.loc 1 396 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 404:src/display.c ****     }
 405:src/display.c **** }
 231              		.loc 1 405 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 394:src/display.c **** #endif
 235              		.loc 1 394 5 is_stmt 1 view .LVU71
 394:src/display.c **** #endif
 236              		.loc 1 394 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 394:src/display.c **** #endif
 238              		.loc 1 394 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
ARM GAS  /tmp/cc1e4Gjl.s 			page 13


 394:src/display.c **** #endif
 240              		.loc 1 394 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 394:src/display.c **** #endif
 242              		.loc 1 394 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 394:src/display.c **** #endif
 246              		.loc 1 394 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 406:src/display.c **** 
 407:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 408:src/display.c ****   if (res) *res++ = ch;
 409:src/display.c ****   else	set_dig(base, ch);
 410:src/display.c ****   return res;
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** 
 414:src/display.c **** static void set_digits_string(const char *msg, int j) {
 415:src/display.c ****   for (; *msg != '\0'; msg++) {
 416:src/display.c ****     if (*msg == '.' || *msg == ',')
 417:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 418:src/display.c ****     else {
 419:src/display.c ****       set_dig_s(j, *msg, CNULL);
 420:src/display.c ****       j += SEGS_PER_DIGIT;
 421:src/display.c ****     }
 422:src/display.c ****   }
 423:src/display.c **** }
 424:src/display.c **** 
 425:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 426:src/display.c ****   int i;
 427:src/display.c ****   const int n = res == NULL ? 3 : 4;
 428:src/display.c **** 
 429:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
ARM GAS  /tmp/cc1e4Gjl.s 			page 14


 430:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** /* Force the exponent display
 434:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 435:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 436:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 437:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 438:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 439:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 440:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 441:src/display.c ****  */
 442:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 443:src/display.c ****   union {
 444:src/display.c ****     char buf[4];
 445:src/display.c ****     int i;
 446:src/display.c ****   } u;
 447:src/display.c ****   int negative;
 448:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 449:src/display.c ****   int thousands;
 450:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 451:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 452:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 453:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 454:src/display.c **** #  else
 455:src/display.c ****   const int show_large_exponent = 1;
 456:src/display.c **** #  endif
 457:src/display.c **** #else
 458:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 459:src/display.c ****   int thousands;
 460:src/display.c **** #  endif
 461:src/display.c ****   const int show_large_exponent = 0;
 462:src/display.c **** #endif
 463:src/display.c **** 
 464:src/display.c ****   negative = flags & 2;
 465:src/display.c ****   if (exp < 0) {
 466:src/display.c ****     negative = 1;
 467:src/display.c ****     exp = -exp;
 468:src/display.c ****   }
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****   thousands = exp / 1000;
 471:src/display.c **** #endif
 472:src/display.c ****   if (res) {
 473:src/display.c **** #ifdef INCLUDE_YREG_CODE
 474:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 475:src/display.c ****     if (thousands != 0) {
 476:src/display.c **** #else
 477:src/display.c ****       if (exp > 999) {
 478:src/display.c **** #endif
 479:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 480:src/display.c **** 	// No exponent separator for large -ve exponents
 481:src/display.c ****       }
 482:src/display.c ****       else *res++ = 'e'; // Normal separator
 483:src/display.c **** #else
 484:src/display.c ****       *res++ = 'e';
 485:src/display.c **** #endif
 486:src/display.c ****       if (negative) *res++ = '-';
ARM GAS  /tmp/cc1e4Gjl.s 			page 15


 487:src/display.c ****     }
 488:src/display.c ****     else {
 489:src/display.c ****       if (negative) SET_EXP_SIGN;
 490:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 491:src/display.c ****       if (thousands != 0) {
 492:src/display.c **** #else
 493:src/display.c **** 	if (exp > 999) {
 494:src/display.c **** #endif
 495:src/display.c **** 	  if (!show_large_exponent
 496:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 497:src/display.c **** 	      && (flags & 8) == 0
 498:src/display.c **** #endif
 499:src/display.c **** 	      ) {
 500:src/display.c **** #ifdef REALBUILD
 501:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 502:src/display.c **** #else
 503:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 504:src/display.c **** #endif
 505:src/display.c **** 	    goto no_number;
 506:src/display.c **** 	  }
 507:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 508:src/display.c **** 	  else {
 509:src/display.c **** 	    exp -= thousands * 1000;
 510:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 511:src/display.c **** 	    if (flags & 16) {
 512:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 513:src/display.c **** 	      int i;
 514:src/display.c **** 
 515:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 516:src/display.c **** 		// Clear digits and separators
 517:src/display.c **** 		clr_dot(i);
 518:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 519:src/display.c **** 	    }
 520:src/display.c **** #  endif
 521:src/display.c **** 	    if (negative) {
 522:src/display.c **** 	      CLR_EXP_SIGN;
 523:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 524:src/display.c **** 	    }
 525:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 526:src/display.c **** 	    flags = 1;
 527:src/display.c **** 	  }
 528:src/display.c **** #endif
 529:src/display.c **** 	}
 530:src/display.c ****       }
 531:src/display.c **** #ifdef REALBUILD
 532:src/display.c ****       u.i = 0; // Smaller ARM code
 533:src/display.c **** #else
 534:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 535:src/display.c **** #endif
 536:src/display.c ****       if (flags & 5) {
 537:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 538:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 539:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 540:src/display.c **** 	  int i;
 541:src/display.c **** 
 542:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 543:src/display.c **** 	    if (u.buf[i] == '0')
ARM GAS  /tmp/cc1e4Gjl.s 			page 16


 544:src/display.c **** 	      u.buf[i] = ' ';
 545:src/display.c **** 	    else
 546:src/display.c **** 	      break;
 547:src/display.c **** 	  }
 548:src/display.c **** 	  if (i != 0 && negative) {
 549:src/display.c **** 	    // Move minus sign to right in front of exponent
 550:src/display.c **** 	    CLR_EXP_SIGN;
 551:src/display.c **** 	    u.buf[i - 1] = '-';
 552:src/display.c **** 	  }
 553:src/display.c **** 	}
 554:src/display.c **** #endif
 555:src/display.c ****       }
 556:src/display.c ****       else
 557:src/display.c **** 	num_arg(u.buf, exp);
 558:src/display.c ****     no_number:
 559:src/display.c ****       set_exp_digits_string(u.buf, res);
 560:src/display.c ****     }
 561:src/display.c **** 
 562:src/display.c ****     static void carry_overflow(void) {
 563:src/display.c ****       const int base = SEGS_EXP_BASE;
 564:src/display.c ****       int c;
 565:src/display.c ****       unsigned int b;
 566:src/display.c **** 
 567:src/display.c ****       // Figure out the base
 568:src/display.c ****       switch (State2.smode) {
 569:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 570:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 571:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 572:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 573:src/display.c ****       default:	b = UState.int_base+1;	break;
 574:src/display.c ****       }
 575:src/display.c **** 
 576:src/display.c ****       // Display the base as the first exponent digit
 577:src/display.c ****       if (b > 10 && b < 16)
 578:src/display.c **** 	SET_EXP_SIGN;
 579:src/display.c ****       c = "B34567o9D12345h"[b-2];
 580:src/display.c ****       set_dig(base, c);
 581:src/display.c **** 
 582:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 583:src/display.c ****       if (get_carry())
 584:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 585:src/display.c ****       if (get_overflow())
 586:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 587:src/display.c ****     }
 588:src/display.c **** 
 589:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 590:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 591:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 592:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 593:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 594:src/display.c **** #endif
 595:src/display.c **** 
 596:src/display.c ****     /* Display the annunicator text line.
 597:src/display.c ****      * Care needs to be taken to keep things aligned.
 598:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 599:src/display.c ****      */
 600:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/cc1e4Gjl.s 			page 17


 601:src/display.c ****     static void annunciators(void) {
 602:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 603:src/display.c ****       char buf[42], *p = buf, *q="";
 604:src/display.c ****       char buf2[42], *p2 = buf2;
 605:src/display.c ****       int n;
 606:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 607:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 608:src/display.c ****       // Constant variables and code branches depending on a constant variable
 609:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 610:src/display.c ****       // feature run-time configurable if needed.
 611:src/display.c **** #ifdef INCLUDE_YREG_CODE
 612:src/display.c **** #  ifdef YREG_ALWAYS_ON
 613:src/display.c ****       const int yreg_enabled = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_enabled = UState.show_y;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 618:src/display.c ****       const int yreg_hms = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_hms = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 623:src/display.c ****       const int yreg_fract = 1;
 624:src/display.c **** #  else
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #  endif
 627:src/display.c **** #else
 628:src/display.c ****       const int yreg_enabled = 0;
 629:src/display.c ****       const int yreg_hms = 0;
 630:src/display.c ****       const int yreg_fract = 0;
 631:src/display.c **** #endif
 632:src/display.c **** #ifdef RP_PREFIX
 633:src/display.c ****       const int rp_prefix = 1;
 634:src/display.c **** #else
 635:src/display.c ****       const int rp_prefix = 0;
 636:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 637:src/display.c **** #endif
 638:src/display.c ****       // Indicates whether font escape code is compiled in.
 639:src/display.c ****       // This variable will always be set at compile time.
 640:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 641:src/display.c ****       const int has_FONT_ESCAPE = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int has_FONT_ESCAPE = 0;
 644:src/display.c **** #endif
 645:src/display.c **** 
 646:src/display.c ****       xset(buf, '\0', sizeof(buf));
 647:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 648:src/display.c ****       
 649:src/display.c ****       if (is_intmode()) {
 650:src/display.c **** #ifdef SHOW_STACK_SIZE
 651:src/display.c **** 	if (shift_char == ' ') {
 652:src/display.c **** 	  *p2++ = '\007';
 653:src/display.c **** 	  *p2++ = '\346';
 654:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 655:src/display.c **** 	}
 656:src/display.c **** 	else
 657:src/display.c **** #endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 18


 658:src/display.c **** 	  {
 659:src/display.c **** 	    *p2++ = shift_char;
 660:src/display.c **** 	    *p2++ = '\006';
 661:src/display.c **** 	  }
 662:src/display.c **** 
 663:src/display.c **** 	switch(int_mode()) {
 664:src/display.c **** 	default:
 665:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 666:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 667:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 668:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 669:src/display.c **** 	}
 670:src/display.c **** 	q = scopy(p2, q);
 671:src/display.c **** 	*q++ = '\006';
 672:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 673:src/display.c **** 
 674:src/display.c **** 	if (IntMaxWindow > 0) {
 675:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 676:src/display.c **** 	  if (*q == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  if (q[1] == '1')
 679:src/display.c **** 	    n += 2;
 680:src/display.c **** 	  while (n-- > 0)
 681:src/display.c **** 	    *p2++ = '\006';
 682:src/display.c **** 
 683:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 684:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 685:src/display.c **** 	}
 686:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 687:src/display.c ****       }
 688:src/display.c ****       else if (!yreg_enabled
 689:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 690:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 691:src/display.c **** #endif
 692:src/display.c **** 	       ) {
 693:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 694:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 695:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 696:src/display.c **** 	if (shift_char == ' ') {
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\342';
 699:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 700:src/display.c **** 	  *p2++ = '\007';
 701:src/display.c **** 	  *p2++ = '\344';
 702:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 703:src/display.c **** 	}
 704:src/display.c **** 	else
 705:src/display.c **** #endif
 706:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 707:src/display.c **** 	    *p2++ = shift_char;
 708:src/display.c **** 	    *p2++ = '\006';
 709:src/display.c **** 	  }
 710:src/display.c **** 	  else {
 711:src/display.c **** 	    *p2++ = 'D';
 712:src/display.c **** 	  }
 713:src/display.c **** 
 714:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\024';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 	if (State2.arrow) {
 720:src/display.c **** 	  *p2++ = ' ';
 721:src/display.c **** 	  *p2 = '\015';
 722:src/display.c **** 	  goto skip;
 723:src/display.c **** 	}
 724:src/display.c **** 
 725:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 726:src/display.c **** 	  if (State2.wascomplex) {
 727:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 728:src/display.c **** 	  }
 729:src/display.c **** 	  else if (rp_prefix) {
 730:src/display.c **** 	    if (RectPolConv == 1) {
 731:src/display.c **** 	      q = "\007\306<";
 732:src/display.c **** 	    }
 733:src/display.c **** 	    else {
 734:src/display.c **** 	      q = "\007\306y";
 735:src/display.c **** 	    }
 736:src/display.c **** 	  }
 737:src/display.c **** 	  p = scopy(buf, q);
 738:src/display.c **** 
 739:src/display.c **** 	  goto display_yreg;
 740:src/display.c **** 	}
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	p2 = scopy(p2, q);
 757:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 758:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 759:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 760:src/display.c **** 	}
 761:src/display.c **** #else
 762:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 763:src/display.c **** 	*p2++ = '\007';
 764:src/display.c **** 	*p2++ = '\342';
 765:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 766:src/display.c **** #endif
 767:src/display.c ****       }
 768:src/display.c ****       else { // yreg_enabled
 769:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 770:src/display.c **** 	if (State2.cmplx) {
 771:src/display.c **** 	  *p2++ = '\007';
ARM GAS  /tmp/cc1e4Gjl.s 			page 20


 772:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 773:src/display.c **** 	  *p2++ = shift_char;
 774:src/display.c **** 	  //	  q = "\024";
 775:src/display.c **** 	  *p2++ = '\024';
 776:src/display.c **** 	}
 777:src/display.c **** 	else {// if (shift_char != ' ') {
 778:src/display.c **** 	  *p2++ = '\007';
 779:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 780:src/display.c **** 	  *p2++ = shift_char;
 781:src/display.c **** 	  //	  goto no_copy;
 782:src/display.c **** 	}
 783:src/display.c **** 	//	else
 784:src/display.c **** #endif
 785:src/display.c **** 	  if (State2.wascomplex) {
 786:src/display.c **** 	    q = "\007\207i";
 787:src/display.c **** 	    p = scopy(p, q);
 788:src/display.c **** 	    //	    goto no_copy;
 789:src/display.c **** 	  }
 790:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 791:src/display.c **** 	    q = "\007\307<";
 792:src/display.c **** 	    p = scopy(p, q);
 793:src/display.c **** 	    //	    goto no_copy;
 794:src/display.c **** 	  }
 795:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 796:src/display.c **** 	    q = "\007\307y";
 797:src/display.c **** 	    p = scopy(p, q);
 798:src/display.c **** 	    //	    goto no_copy;
 799:src/display.c **** 	  }
 800:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 801:src/display.c **** 	  //	  else
 802:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 803:src/display.c **** 	    //	    q = "\007\207\007";
 804:src/display.c **** 	      *p2++ = '\007';
 805:src/display.c **** 	      *p2++ = '\207';
 806:src/display.c **** 	      *p2++ = '\007';	    
 807:src/display.c **** 	    }
 808:src/display.c **** 	    else {
 809:src/display.c **** 	      *p2++ = '\007';
 810:src/display.c **** 	      *p2++ = '\207';
 811:src/display.c **** 	      *p2++ = ' ';
 812:src/display.c **** 	    }
 813:src/display.c **** #endif
 814:src/display.c **** 	    //	else { 
 815:src/display.c **** #ifndef SHOW_STACK_SIZE
 816:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 817:src/display.c **** 	  p2 = scopy(p2, q);
 818:src/display.c **** #else
 819:src/display.c **** 	  if (is_dblmode()) {
 820:src/display.c **** 	    *p2++ = '\007';
 821:src/display.c **** 	    *p2++ = '\342';
 822:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 823:src/display.c **** 	    //	    q = "\007\345D";
 824:src/display.c **** 	    *p2++ = '\007';
 825:src/display.c **** 	    *p2++ = '\345';
 826:src/display.c **** 	    *p2++ = 'D';
 827:src/display.c **** 	  }
 828:src/display.c **** 	  else {
ARM GAS  /tmp/cc1e4Gjl.s 			page 21


 829:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 830:src/display.c **** 	    p2 = scopy(p2, q);
 831:src/display.c **** 	  }
 832:src/display.c **** #endif
 833:src/display.c **** 	  //	}
 834:src/display.c **** 	//	p2 = scopy(p2, q);
 835:src/display.c **** 
 836:src/display.c **** 	switch (UState.date_mode) {
 837:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 838:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 839:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 842:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 845:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 846:src/display.c **** #endif
 847:src/display.c **** #endif
 848:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 849:src/display.c **** 	}
 850:src/display.c **** 	  
 851:src/display.c **** 	//      no_copy:
 852:src/display.c **** 	// display either arrow or datemode
 853:src/display.c **** 	if (State2.arrow) {
 854:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 855:src/display.c **** 	} // no need to skip y display with arrow here
 856:src/display.c **** 	else {
 857:src/display.c **** 	  p2 = scopy(p2, q);
 858:src/display.c **** 	}
 859:src/display.c **** 	if (State2.runmode) {
 860:src/display.c **** 	  decNumber y;
 861:src/display.c **** 	display_yreg:
 862:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 863:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 864:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 865:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 866:src/display.c **** 	   */
 867:src/display.c **** 	  if (is_intmode()) {
 868:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 869:src/display.c **** 	    goto skip;
 870:src/display.c **** 	  }
 871:src/display.c **** 		      
 872:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 873:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 874:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 875:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 876:src/display.c **** 	    if (yreg_hms && State2.hms) {
 877:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 878:src/display.c **** 
 879:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 880:src/display.c **** 	      UState.nothousands = 1;
 881:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 882:src/display.c **** 	      UState.nothousands = saved_nothousands;
 883:src/display.c **** 	      // First replace the '@' character with the degree symbol
 884:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 885:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
ARM GAS  /tmp/cc1e4Gjl.s 			page 22


 886:src/display.c **** 	      // then remove the fractional part of the seconds.
 887:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 888:src/display.c **** 	      while (*p) {
 889:src/display.c **** 		replace_char(buf, p[0], p[1]);
 890:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 891:src/display.c **** 		  goto skip;
 892:src/display.c **** 		}
 893:src/display.c **** 		p += 2;
 894:src/display.c **** 	      }
 895:src/display.c **** 	      goto skip;
 896:src/display.c **** 	    }
 897:src/display.c **** 	    if (yreg_fract && UState.fract
 898:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 899:src/display.c **** 		&& !State2.cmplx
 900:src/display.c **** #endif
 901:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 902:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 903:src/display.c **** #endif
 904:src/display.c **** 		&& set_x_fract(&y, p)) {
 905:src/display.c **** 	      char ltgteq;
 906:src/display.c **** 
 907:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 908:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 909:src/display.c **** 	      ltgteq = *q;
 910:src/display.c **** 	      switch (ltgteq) {
 911:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 912:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 913:src/display.c **** 	      }
 914:src/display.c **** 	      scopy(q, "\007\344?");
 915:src/display.c **** 	      q[2] = ltgteq;
 916:src/display.c **** 
 917:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 918:src/display.c **** 		goto skip;
 919:src/display.c **** 	      }
 920:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 921:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 922:src/display.c **** 		goto skip;
 923:src/display.c **** 	      }
 924:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 925:src/display.c **** 	    }
 926:src/display.c **** 	  }
 927:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 928:src/display.c **** 	    int extra_pixels;
 929:src/display.c **** 
 930:src/display.c **** 	    set_x_dn(&y, p, &n);
 931:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 932:src/display.c **** 	    if (extra_pixels <= 0)
 933:src/display.c **** 	      break;
 934:src/display.c **** 
 935:src/display.c **** 	    xset(p, '\0', n+10);
 936:src/display.c **** 
 937:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 938:src/display.c **** 	  }
 939:src/display.c **** 	}
 940:src/display.c ****       }
 941:src/display.c ****       
 942:src/display.c ****     skip:
ARM GAS  /tmp/cc1e4Gjl.s 			page 23


 943:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 944:src/display.c ****       set_status_top_always(buf2);
 945:src/display.c ****       
 946:src/display.c ****     }
 947:src/display.c **** #else
 948:src/display.c ****     static void annunciators(void) {
 949:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 950:src/display.c ****       char buf[42], *p = buf, *q="";
 951:src/display.c ****       int n;
 952:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 953:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 954:src/display.c ****       // Constant variables and code branches depending on a constant variable
 955:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 956:src/display.c ****       // feature run-time configurable if needed.
 957:src/display.c **** #ifdef INCLUDE_YREG_CODE
 958:src/display.c **** #  ifdef YREG_ALWAYS_ON
 959:src/display.c ****       const int yreg_enabled = 1;
 960:src/display.c **** #  else
 961:src/display.c ****       const int yreg_enabled = UState.show_y;
 962:src/display.c **** #  endif
 963:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 964:src/display.c ****       const int yreg_hms = 1;
 965:src/display.c **** #  else
 966:src/display.c ****       const int yreg_hms = 0;
 967:src/display.c **** #  endif
 968:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 969:src/display.c ****       const int yreg_fract = 1;
 970:src/display.c **** #  else
 971:src/display.c ****       const int yreg_fract = 0;
 972:src/display.c **** #  endif
 973:src/display.c **** #else
 974:src/display.c ****       const int yreg_enabled = 0;
 975:src/display.c ****       const int yreg_hms = 0;
 976:src/display.c ****       const int yreg_fract = 0;
 977:src/display.c **** #endif
 978:src/display.c **** #ifdef RP_PREFIX
 979:src/display.c ****       const int rp_prefix = 1;
 980:src/display.c **** #else
 981:src/display.c ****       const int rp_prefix = 0;
 982:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 983:src/display.c **** #endif
 984:src/display.c ****       // Indicates whether font escape code is compiled in.
 985:src/display.c ****       // This variable will always be set at compile time.
 986:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 987:src/display.c ****       const int has_FONT_ESCAPE = 1;
 988:src/display.c **** #else
 989:src/display.c ****       const int has_FONT_ESCAPE = 0;
 990:src/display.c **** #endif
 991:src/display.c **** 
 992:src/display.c ****       xset(buf, '\0', sizeof(buf));
 993:src/display.c ****       
 994:src/display.c ****       if (is_intmode()) {
 995:src/display.c **** #ifdef SHOW_STACK_SIZE
 996:src/display.c **** 	if (shift_char == ' ') {
 997:src/display.c **** 	  *p++ = '\007';
 998:src/display.c **** 	  *p++ = '\346';
 999:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
ARM GAS  /tmp/cc1e4Gjl.s 			page 24


1000:src/display.c **** 	}
1001:src/display.c **** 	else
1002:src/display.c **** #endif
1003:src/display.c **** 	  {
1004:src/display.c **** 	    *p++ = shift_char;
1005:src/display.c **** 	    *p++ = '\006';
1006:src/display.c **** 	  }
1007:src/display.c **** 
1008:src/display.c **** 	switch(int_mode()) {
1009:src/display.c **** 	default:
1010:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1011:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1012:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1013:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1014:src/display.c **** 	}
1015:src/display.c **** 	q = scopy(p, q);
1016:src/display.c **** 	*q++ = '\006';
1017:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1018:src/display.c **** 
1019:src/display.c **** 	if (IntMaxWindow > 0) {
1020:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1021:src/display.c **** 	  if (*q == '1')
1022:src/display.c **** 	    n += 2;
1023:src/display.c **** 	  if (q[1] == '1')
1024:src/display.c **** 	    n += 2;
1025:src/display.c **** 	  while (n-- > 0)
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 
1028:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1029:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1030:src/display.c **** 	}
1031:src/display.c ****       }
1032:src/display.c ****       else if (!yreg_enabled
1033:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1034:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1035:src/display.c **** #endif
1036:src/display.c **** 	       ) {
1037:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1038:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1039:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\342';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	  *p++ = '\007';
1045:src/display.c **** 	  *p++ = '\344';
1046:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1047:src/display.c **** 	}
1048:src/display.c **** 	else
1049:src/display.c **** #endif
1050:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1051:src/display.c **** 	    *p++ = shift_char;
1052:src/display.c **** 	    *p++ = '\006';
1053:src/display.c **** 	  }
1054:src/display.c **** 	  else {
1055:src/display.c **** 	    *p++ = 'D';
1056:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 25


1057:src/display.c **** 
1058:src/display.c **** 	if (State2.cmplx) {
1059:src/display.c **** 	  *p++ = ' ';
1060:src/display.c **** 	  *p = '\024';
1061:src/display.c **** 	  goto skip;
1062:src/display.c **** 	}
1063:src/display.c **** 	if (State2.arrow) {
1064:src/display.c **** 	  *p++ = ' ';
1065:src/display.c **** 	  *p = '\015';
1066:src/display.c **** 	  goto skip;
1067:src/display.c **** 	}
1068:src/display.c **** 
1069:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1070:src/display.c **** 	  if (State2.wascomplex) {
1071:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1072:src/display.c **** 	  }
1073:src/display.c **** 	  else if (rp_prefix) {
1074:src/display.c **** 	    if (RectPolConv == 1) {
1075:src/display.c **** 	      q = "\007\306<";
1076:src/display.c **** 	    }
1077:src/display.c **** 	    else {
1078:src/display.c **** 	      q = "\007\306y";
1079:src/display.c **** 	    }
1080:src/display.c **** 	  }
1081:src/display.c **** 	  p = scopy(buf, q);
1082:src/display.c **** 
1083:src/display.c **** 	  goto display_yreg;
1084:src/display.c **** 	}
1085:src/display.c **** 
1086:src/display.c **** 	switch (UState.date_mode) {
1087:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1088:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1089:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1090:src/display.c **** #endif
1091:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1092:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1093:src/display.c **** #endif
1094:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1095:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1096:src/display.c **** #endif
1097:src/display.c **** #endif
1098:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1099:src/display.c **** 	}
1100:src/display.c **** 	p = scopy(p, q);
1101:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1102:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1103:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1104:src/display.c **** 	}
1105:src/display.c **** #else
1106:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1107:src/display.c **** 	*p++ = '\007';
1108:src/display.c **** 	*p++ = '\342';
1109:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1110:src/display.c **** #endif
1111:src/display.c ****       }
1112:src/display.c ****       else { // yreg_enabled
1113:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/cc1e4Gjl.s 			page 26


1114:src/display.c **** 	if (State2.cmplx) {
1115:src/display.c **** 	  *p++ = '\007';
1116:src/display.c **** 	  *p++ = '\344';
1117:src/display.c **** 	  *p++ = shift_char;
1118:src/display.c **** 	  q = "\024";
1119:src/display.c **** 	}
1120:src/display.c **** 	else if (shift_char != ' ') {
1121:src/display.c **** 	  *p++ = '\007';
1122:src/display.c **** 	  *p++ = '\307';
1123:src/display.c **** 	  *p++ = shift_char;
1124:src/display.c **** 	  goto no_copy;
1125:src/display.c **** 	}
1126:src/display.c **** 	else
1127:src/display.c **** #endif
1128:src/display.c **** 	  if (State2.wascomplex) {
1129:src/display.c **** 	    q = "\007\207i";
1130:src/display.c **** 	  }
1131:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1132:src/display.c **** 	    q = "\007\307<";
1133:src/display.c **** 	  }
1134:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1135:src/display.c **** 	    q = "\007\307y";
1136:src/display.c **** 	  }
1137:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1138:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1139:src/display.c **** 	    q = "\007\207\007";
1140:src/display.c **** 	  }
1141:src/display.c **** #endif
1142:src/display.c **** 	  else {
1143:src/display.c **** #ifndef SHOW_STACK_SIZE
1144:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1145:src/display.c **** #else
1146:src/display.c **** 	    if (is_dblmode()) {
1147:src/display.c **** 	      *p++ = '\007';
1148:src/display.c **** 	      *p++ = '\342';
1149:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1150:src/display.c **** 	      q = "\007\345D";
1151:src/display.c **** 	    }
1152:src/display.c **** 	    else {
1153:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1154:src/display.c **** 	    }
1155:src/display.c **** #endif
1156:src/display.c **** 	  }
1157:src/display.c **** 	p = scopy(p, q);
1158:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1159:src/display.c ****       no_copy:
1160:src/display.c **** #endif
1161:src/display.c **** 
1162:src/display.c **** 	if (State2.arrow) {
1163:src/display.c **** 	  scopy(p, "\007\204\006\015");
1164:src/display.c **** 	} else if (State2.runmode) {
1165:src/display.c **** 	  decNumber y;
1166:src/display.c **** 	display_yreg:
1167:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1168:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1169:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1170:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
ARM GAS  /tmp/cc1e4Gjl.s 			page 27


1171:src/display.c **** 	   */
1172:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1173:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1174:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1175:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1176:src/display.c **** 	    if (yreg_hms && State2.hms) {
1177:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1178:src/display.c **** 
1179:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1180:src/display.c **** 	      UState.nothousands = 1;
1181:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1182:src/display.c **** 	      UState.nothousands = saved_nothousands;
1183:src/display.c **** 	      // First replace the '@' character with the degree symbol
1184:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1185:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1186:src/display.c **** 	      // then remove the fractional part of the seconds.
1187:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1188:src/display.c **** 	      while (*p) {
1189:src/display.c **** 		replace_char(buf, p[0], p[1]);
1190:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1191:src/display.c **** 		  goto skip;
1192:src/display.c **** 		}
1193:src/display.c **** 		p += 2;
1194:src/display.c **** 	      }
1195:src/display.c **** 	      goto skip;
1196:src/display.c **** 	    }
1197:src/display.c **** 	    if (yreg_fract && UState.fract
1198:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1199:src/display.c **** 		&& !State2.cmplx
1200:src/display.c **** #endif
1201:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1202:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1203:src/display.c **** #endif
1204:src/display.c **** 		&& set_x_fract(&y, p)) {
1205:src/display.c **** 	      char ltgteq;
1206:src/display.c **** 
1207:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1208:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1209:src/display.c **** 	      ltgteq = *q;
1210:src/display.c **** 	      switch (ltgteq) {
1211:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1212:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1213:src/display.c **** 	      }
1214:src/display.c **** 	      scopy(q, "\007\344?");
1215:src/display.c **** 	      q[2] = ltgteq;
1216:src/display.c **** 
1217:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1218:src/display.c **** 		goto skip;
1219:src/display.c **** 	      }
1220:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1221:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1222:src/display.c **** 		goto skip;
1223:src/display.c **** 	      }
1224:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1225:src/display.c **** 	    }
1226:src/display.c **** 	  }
1227:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 28


1228:src/display.c **** 	    int extra_pixels;
1229:src/display.c **** 
1230:src/display.c **** 	    set_x_dn(&y, p, &n);
1231:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1232:src/display.c **** 	    if (extra_pixels <= 0)
1233:src/display.c **** 	      break;
1234:src/display.c **** 
1235:src/display.c **** 	    xset(p, '\0', n+10);
1236:src/display.c **** 
1237:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1238:src/display.c **** 	  }
1239:src/display.c **** 	}
1240:src/display.c ****       }
1241:src/display.c ****       
1242:src/display.c ****     skip:	set_status_top(buf);
1243:src/display.c ****     }
1244:src/display.c **** #endif //top_row
1245:src/display.c ****     static void disp_x(const char *p) {
1246:src/display.c ****       int i;
1247:src/display.c ****       int gotdot = -1;
1248:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1249:src/display.c ****       const
1250:src/display.c **** #endif
1251:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1252:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1253:src/display.c ****       int overflow_to_left = 0;
1254:src/display.c **** #endif
1255:src/display.c **** 
1256:src/display.c ****       if (*p == '-') {
1257:src/display.c **** 	SET_MANT_SIGN;
1258:src/display.c **** 	p++;
1259:src/display.c ****       }
1260:src/display.c **** 
1261:src/display.c ****       if (is_intmode()) {
1262:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1263:src/display.c **** 	  set_dig(i, *p);
1264:src/display.c **** 	  i += SEGS_PER_DIGIT;
1265:src/display.c **** 	}
1266:src/display.c **** 	carry_overflow();
1267:src/display.c ****       } else {
1268:src/display.c **** 	set_separator_decimal_modes();
1269:src/display.c **** 
1270:src/display.c **** 	i = 0;
1271:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1272:src/display.c **** 	if ( CmdLineDot > 1 ) {
1273:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1274:src/display.c **** 	  const
1275:src/display.c **** #  endif
1276:src/display.c **** 	    int double_dot = 0;
1277:src/display.c **** 	  int j;
1278:src/display.c **** 
1279:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1280:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1281:src/display.c **** 	      gotdot = j;
1282:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	      double_dot = (p[j+1] == '.');
1284:src/display.c **** #  endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 29


1285:src/display.c **** 	    }
1286:src/display.c **** 	  }
1287:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1288:src/display.c **** 	  if (j > 0) {
1289:src/display.c **** 	    p += j + 1;
1290:src/display.c **** 	    i = SEGS_PER_DIGIT;
1291:src/display.c **** 	    if (gotdot <= j) {
1292:src/display.c **** 	      gotdot = 0;
1293:src/display.c **** 	      if (double_dot)
1294:src/display.c **** 		p++;
1295:src/display.c **** 	    }
1296:src/display.c **** 	    else if (*p == '.') {
1297:src/display.c **** 	      gotdot = 0;
1298:src/display.c **** 	      p++;
1299:src/display.c **** 	      if (!double_dot)
1300:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1301:src/display.c **** 	    }
1302:src/display.c **** 	    else gotdot = -1;
1303:src/display.c **** 	    set_dig(0, '<');
1304:src/display.c **** 	    overflow_to_left = 1;
1305:src/display.c **** 	  }
1306:src/display.c **** 	  else gotdot = -1;
1307:src/display.c **** 	}
1308:src/display.c **** #endif
1309:src/display.c **** 
1310:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1311:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1312:src/display.c **** 	       && *p != 'D'
1313:src/display.c **** #endif
1314:src/display.c **** 	       ; p++) {
1315:src/display.c **** 	  if (*p == '.') {
1316:src/display.c **** 	    if (gotdot < 0)
1317:src/display.c **** 	      gotdot = i;
1318:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1319:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1320:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1321:src/display.c **** 	      if ( *(p+1) == '.' ) {
1322:src/display.c **** 		p++;
1323:src/display.c **** 	      }
1324:src/display.c **** #  else
1325:src/display.c **** 	      if ( i != gotdot ) {
1326:src/display.c **** #  endif
1327:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1328:src/display.c **** 		i += segs_per_digit;
1329:src/display.c **** 	      }
1330:src/display.c **** 	      else {
1331:src/display.c **** 		if ( CmdLineDot > 1 ) {
1332:src/display.c **** 		  i += segs_per_digit;
1333:src/display.c **** 		}
1334:src/display.c **** 		else {
1335:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1336:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1337:src/display.c **** 		}
1338:src/display.c **** 	      }
1339:src/display.c **** #else
1340:src/display.c **** 	      if (i > 0)
1341:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
ARM GAS  /tmp/cc1e4Gjl.s 			page 30


1342:src/display.c **** 	      else {
1343:src/display.c **** 		set_dig(i, '0');
1344:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1345:src/display.c **** 		i += segs_per_digit;
1346:src/display.c **** 	      }
1347:src/display.c **** #endif
1348:src/display.c **** 	    } else {
1349:src/display.c **** 	      set_dig(i, *p);
1350:src/display.c **** 	      i += segs_per_digit;
1351:src/display.c **** 	    }
1352:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1353:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1354:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1355:src/display.c **** #endif
1356:src/display.c **** 	  }
1357:src/display.c **** 
1358:src/display.c **** 	  /* Implement a floating comma */
1359:src/display.c **** 	  if (gotdot < 0)
1360:src/display.c **** 	    gotdot = i;
1361:src/display.c **** 	  for (;;) {
1362:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1363:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1364:src/display.c **** 	      break;
1365:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1366:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1367:src/display.c **** 	      break;
1368:src/display.c **** #endif
1369:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1370:src/display.c **** 	  }
1371:src/display.c **** 
1372:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1373:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1374:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1375:src/display.c **** 	    int flags = 8;
1376:src/display.c **** #  else
1377:src/display.c **** 	    int flags = 12;
1378:src/display.c **** #  endif
1379:src/display.c **** 
1380:src/display.c **** 	    if (*p == 'D')
1381:src/display.c **** 	      flags |= 2;
1382:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1383:src/display.c **** 	      flags |= 16;
1384:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1385:src/display.c **** 	  }
1386:src/display.c **** #else
1387:src/display.c **** 	  if (*p == 'E') {
1388:src/display.c **** 	    p++;
1389:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1390:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1391:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1392:src/display.c **** #  else
1393:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  endif
1395:src/display.c **** 	  } 
1396:src/display.c **** #endif
1397:src/display.c **** 	}
1398:src/display.c ****       }
ARM GAS  /tmp/cc1e4Gjl.s 			page 31


1399:src/display.c **** 
1400:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1401:src/display.c **** 
1402:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1403:src/display.c **** 	const int ws = word_size();
1404:src/display.c **** 	unsigned int b;
1405:src/display.c **** 	long long int vs = value;
1406:src/display.c **** 	unsigned long long int v;
1407:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1408:src/display.c **** 	int i, j, k;
1409:src/display.c **** 	int sign = 0;
1410:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1411:src/display.c **** 
1412:src/display.c **** 	switch (State2.smode) {
1413:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1414:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1415:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1416:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1417:src/display.c **** 	default:	b = int_base();	break;
1418:src/display.c **** 	}
1419:src/display.c **** 
1420:src/display.c **** 	if (!res) {
1421:src/display.c **** 	  IntMaxWindow = 0;
1422:src/display.c **** 	  carry_overflow();
1423:src/display.c **** 	}
1424:src/display.c **** 
1425:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1426:src/display.c **** 	  v = extract_value(value, &sign);
1427:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1428:src/display.c **** 	    v = value;
1429:src/display.c **** 	  if (v == 0) {
1430:src/display.c **** 	    if (sign)
1431:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1432:src/display.c **** 	    set_dig_s(dig, '0', res);
1433:src/display.c **** 	    return;
1434:src/display.c **** 	  } else
1435:src/display.c **** 	    for (i=0; v != 0; i++) {
1436:src/display.c **** 	      const int r = v % b;
1437:src/display.c **** 	      v /= b;
1438:src/display.c **** 	      buf[i] = DIGITS[r];
1439:src/display.c **** 	    }
1440:src/display.c **** 	} else {
1441:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1442:src/display.c **** 	  if (ws < 64) {
1443:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1444:src/display.c **** 	    vs &= mask;
1445:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1446:src/display.c **** 	      vs |= ~mask;
1447:src/display.c **** 	  }
1448:src/display.c **** 
1449:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1450:src/display.c **** 	    set_dig_s(dig, '0', res);
1451:src/display.c **** 	    return;
1452:src/display.c **** 	  } else if (!UState.leadzero) {
1453:src/display.c **** 	    v = (unsigned long long int)vs;
1454:src/display.c **** 	    for (i=0; v != 0; i++) {
1455:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/cc1e4Gjl.s 			page 32


1456:src/display.c **** 	      v /= b;
1457:src/display.c **** 	      buf[i] = DIGITS[r];
1458:src/display.c **** 	    }
1459:src/display.c **** 	  } else {
1460:src/display.c **** 	    int n;
1461:src/display.c **** 	    const unsigned int b1 = b >> 1;
1462:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1463:src/display.c **** 	    v = (unsigned long long int)vs;
1464:src/display.c **** 
1465:src/display.c **** 	    n = (ws + fac) / (fac+1);
1466:src/display.c **** 	    for (i=0; i<n; i++) {
1467:src/display.c **** 	      const int r = v % b;
1468:src/display.c **** 	      v /= b;
1469:src/display.c **** 	      buf[i] = DIGITS[r];
1470:src/display.c **** 	    }
1471:src/display.c **** 	  }
1472:src/display.c **** 	}
1473:src/display.c **** #ifdef BIGGER_DISPLAY
1474:src/display.c **** #define MAX_INT_Y_DIG 13
1475:src/display.c **** #else
1476:src/display.c **** #define MAX_INT_Y_DIG 7
1477:src/display.c **** #endif
1478:src/display.c **** 	/* At this point i is the number of digits in the output */
1479:src/display.c **** 	int nd = i;
1480:src/display.c **** 	if (res) {
1481:src/display.c **** 	  if (sign) *res++ = '-';
1482:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1483:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1484:src/display.c **** 	      *res++ = buf[i];
1485:src/display.c **** 	    *res++ = '.';
1486:src/display.c **** 	    *res++ = '.';
1487:src/display.c **** 	  }
1488:src/display.c **** 	  else {
1489:src/display.c **** 	    while (--i >= 0)
1490:src/display.c **** 	      *res++ = buf[i];
1491:src/display.c **** 	  }
1492:src/display.c **** 	} else {
1493:src/display.c **** #if 0
1494:src/display.c **** 	  set_separator_decimal_modes();
1495:src/display.c **** 
1496:src/display.c **** 	  // Allows configuration of digit grouping per base
1497:src/display.c **** 	  static const char grouping[] = 
1498:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1499:src/display.c **** 		    //	   2     3     4     5     6     7     8
1500:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1501:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1502:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1503:src/display.c **** 	    : grouping[b - 2] >> 4;
1504:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1505:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1506:src/display.c **** #else
1507:src/display.c **** 	  // Less flexible but shorter
1508:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1509:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1510:src/display.c **** 	    : b == 16 ? 2 : 3;
1511:src/display.c **** 	  set_separator_decimal_modes();
1512:src/display.c **** #endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 33


1513:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1514:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1515:src/display.c **** 	    State2.window = 0;
1516:src/display.c **** 	  buf[i] = '\0';
1517:src/display.c **** 
1518:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1519:src/display.c **** 	  for (k = 0; k < 12; k++)
1520:src/display.c **** 	    if (buf[j + k] == '\0')
1521:src/display.c **** 	      break;
1522:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1523:src/display.c **** 	    int ch = buf[j++];
1524:src/display.c **** 	    if (i >= shift)
1525:src/display.c **** 	      ch -= 030;
1526:src/display.c **** 	    set_dig(dig, ch);
1527:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1528:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1529:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1530:src/display.c **** 	  }
1531:src/display.c **** 	  if (sign) {
1532:src/display.c **** 	    if (dig >= 0)
1533:src/display.c **** 	      set_dig(dig, '-');
1534:src/display.c **** 	    else	SET_MANT_SIGN;
1535:src/display.c **** 	  }
1536:src/display.c **** 	}
1537:src/display.c ****       }
1538:src/display.c **** 
1539:src/display.c ****       /* Handle special cases.
1540:src/display.c ****        * return non-zero if the number is special.
1541:src/display.c ****        */
1542:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1543:src/display.c **** 	if (decNumberIsSpecial(x)) {
1544:src/display.c **** 	  if (decNumberIsNaN(x)) {
1545:src/display.c **** 	    if (res) {
1546:src/display.c **** 	      scopy(res, "NaN");
1547:src/display.c **** 	    } else {
1548:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1549:src/display.c **** #ifndef REALBUILD
1550:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1551:src/display.c **** 	      forceDispPlot=0;
1552:src/display.c **** #endif
1553:src/display.c **** 	    }
1554:src/display.c **** 	    return 1;
1555:src/display.c **** 	  } else {
1556:src/display.c **** 	    if (decNumberIsNegative(x)) {
1557:src/display.c **** 	      if (res) *res++ = '-';
1558:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1559:src/display.c **** 	    }
1560:src/display.c **** 	    if (res)
1561:src/display.c **** 	      *res++ = '\237';
1562:src/display.c **** 	    else {
1563:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1564:src/display.c **** #ifndef REALBUILD
1565:src/display.c **** 	      if (decNumberIsNegative(x)) {
1566:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1567:src/display.c **** 	      }
1568:src/display.c **** 	      else {
1569:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
ARM GAS  /tmp/cc1e4Gjl.s 			page 34


1570:src/display.c **** 	      }
1571:src/display.c **** 	      forceDispPlot=0;
1572:src/display.c **** #endif
1573:src/display.c **** 	    }
1574:src/display.c **** 	    return 1;
1575:src/display.c **** 	  }
1576:src/display.c **** 	}
1577:src/display.c **** 	return 0;
1578:src/display.c ****       }
1579:src/display.c **** 
1580:src/display.c **** 
1581:src/display.c ****       /* Extract the two lowest integral digits from the number
1582:src/display.c ****        */
1583:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1584:src/display.c **** 	decNumber n;
1585:src/display.c **** 
1586:src/display.c **** 	decNumberMod(&n, x, &const_100);
1587:src/display.c **** 	*v = dn_to_int(&n);
1588:src/display.c **** 	dn_mulpow10(&n, x, -2);
1589:src/display.c **** 	decNumberTrunc(res, &n);
1590:src/display.c ****       }
1591:src/display.c **** 
1592:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1592 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1593:src/display.c **** 	char b[32];
 276              		.loc 1 1593 2 view .LVU78
1594:src/display.c **** 	int i, j;
 277              		.loc 1 1594 2 view .LVU79
1595:src/display.c **** 
1596:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1596 2 view .LVU80
 279              		.loc 1 1596 12 view .LVU81
1592:src/display.c **** 	char b[32];
 280              		.loc 1 1592 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1597:src/display.c **** 	  if (v == 0)
1598:src/display.c **** 	    b[i] = spaces?' ':'0';
1599:src/display.c **** 	  else {
1600:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1600 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1592:src/display.c **** 	char b[32];
 292              		.loc 1 1592 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1592:src/display.c **** 	char b[32];
ARM GAS  /tmp/cc1e4Gjl.s 			page 35


 295              		.loc 1 1592 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1596:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1596 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1597:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1597 4 is_stmt 1 view .LVU87
 303              		.loc 1 1600 6 view .LVU88
 304              		.loc 1 1600 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1601:src/display.c **** 	    v /= 10;
 311              		.loc 1 1601 6 is_stmt 1 view .LVU90
1602:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1602 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1596:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1596 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1597 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1596:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1596 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1602 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1601:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1601 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1602 6 is_stmt 1 view .LVU97
1596:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1596 17 view .LVU98
1596:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1596 12 view .LVU99
1596:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1596 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1596:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1596 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
ARM GAS  /tmp/cc1e4Gjl.s 			page 36


 340              	.LVL18:
1596:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1596 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1597 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1598:src/display.c **** 	  else {
 349              		.loc 1 1598 6 is_stmt 1 view .LVU104
1596:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1596 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1596:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1596 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1598:src/display.c **** 	  else {
 355              		.loc 1 1598 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1596:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1596 17 is_stmt 1 view .LVU108
1596:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1596 12 view .LVU109
1596:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1596 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1596:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1596 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1603:src/display.c **** 	  }
1604:src/display.c **** 	}
1605:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1605 2 is_stmt 1 view .LVU112
 371              		.loc 1 1605 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1606:src/display.c **** 	  b[0] = '0';
1607:src/display.c **** 
1608:src/display.c **** 	/* Copy across and appropriately leading space things
1609:src/display.c **** 	 */
1610:src/display.c **** 	j = *jin;
 374              		.loc 1 1610 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1605:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1605 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
ARM GAS  /tmp/cc1e4Gjl.s 			page 37


1606:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1606 4 is_stmt 1 view .LVU116
1606:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1606 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1610 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1611:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1611 2 view .LVU119
 386              		.loc 1 1611 8 view .LVU120
1610:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1610 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1611 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1612:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1612 4 is_stmt 1 view .LVU123
 395              	.LBB148:
 396              	.LBB149:
 408:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 408 12 view .LVU124
 398              	.LBE149:
 399              	.LBE148:
 400              		.loc 1 1612 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB153:
 403              	.LBB150:
 408:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 408 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 408:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 408 16 view .LVU127
 408              	.LBE150:
 409              	.LBI148:
 407:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 407 14 is_stmt 1 view .LVU128
 411              	.LBB151:
 408:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 408 3 view .LVU129
 408:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 408 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 408:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 408 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 408:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 408 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
ARM GAS  /tmp/cc1e4Gjl.s 			page 38


 422              	.L37:
 410:src/display.c **** }
 423              		.loc 1 410 3 is_stmt 1 view .LVU133
 410:src/display.c **** }
 424              		.loc 1 410 3 is_stmt 0 view .LVU134
 425              	.LBE151:
 426              	.LBE153:
1613:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1613 4 is_stmt 1 view .LVU135
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1611 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1613 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1611 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1614:src/display.c **** 	}
1615:src/display.c **** 	*jin = j;
 436              		.loc 1 1615 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1615 2 is_stmt 1 view .LVU140
 440              		.loc 1 1615 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1616:src/display.c **** 	return str;
1617:src/display.c ****       }
 443              		.loc 1 1617 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1615:src/display.c **** 	return str;
 445              		.loc 1 1615 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1616:src/display.c **** 	return str;
 447              		.loc 1 1616 2 is_stmt 1 view .LVU144
 448              		.loc 1 1617 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB154:
 458              	.LBB152:
 409:src/display.c ****   return res;
 459              		.loc 1 409 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 409:src/display.c ****   return res;
 463              		.loc 1 409 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
ARM GAS  /tmp/cc1e4Gjl.s 			page 39


 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE152:
 470              	.LBE154:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 425:src/display.c ****   int i;
 485              		.loc 1 425 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 426:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 426 3 view .LVU149
 427:src/display.c **** 
 490              		.loc 1 427 3 view .LVU150
 425:src/display.c ****   int i;
 491              		.loc 1 425 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 427:src/display.c **** 
 500              		.loc 1 427 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 429 3 is_stmt 1 view .LVU153
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 429 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB155:
 513              	.LBB156:
 409:src/display.c ****   return res;
 514              		.loc 1 409 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
ARM GAS  /tmp/cc1e4Gjl.s 			page 40


 517              	.LVL39:
 518              	.L57:
 408:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 408 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 408:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 408 19 view .LVU157
 523              	.LBE156:
 524              	.LBE155:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 429 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB162:
 528              	.LBB157:
 408:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 408 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 410:src/display.c **** }
 532              		.loc 1 410 3 is_stmt 1 view .LVU160
 410:src/display.c **** }
 533              		.loc 1 410 3 is_stmt 0 view .LVU161
 534              	.LBE157:
 535              	.LBE162:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 429 36 is_stmt 1 view .LVU162
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 429 13 view .LVU163
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 429 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 430:src/display.c **** }
 542              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB163:
 544              	.LBB158:
 408:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 408 12 discriminator 3 view .LVU166
 408:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 408 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE158:
 548              	.LBE163:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 429 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB164:
 553              	.LBB159:
 408:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 408 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 408:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 408 16 discriminator 3 view .LVU170
 558              	.LBE159:
ARM GAS  /tmp/cc1e4Gjl.s 			page 41


 559              	.LBI155:
 407:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 407 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB160:
 408:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 408 3 discriminator 3 view .LVU172
 563              	.LBE160:
 564              	.LBE164:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 429 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB165:
 569              	.LBB161:
 408:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 408 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 409:src/display.c ****   return res;
 573              		.loc 1 409 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 410:src/display.c **** }
 578              		.loc 1 410 3 view .LVU176
 410:src/display.c **** }
 579              		.loc 1 410 3 is_stmt 0 view .LVU177
 580              	.LBE161:
 581              	.LBE165:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 429 36 is_stmt 1 view .LVU178
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 429 13 view .LVU179
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 429 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 431:src/display.c **** 
 589              		.loc 1 431 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 431:src/display.c **** 
 591              		.loc 1 431 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
ARM GAS  /tmp/cc1e4Gjl.s 			page 42


1583:src/display.c **** 	decNumber n;
 606              		.loc 1 1583 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1584:src/display.c **** 
 610              		.loc 1 1584 2 view .LVU184
1586:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1586 2 view .LVU185
1583:src/display.c **** 	decNumber n;
 612              		.loc 1 1583 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1583:src/display.c **** 	decNumber n;
 621              		.loc 1 1583 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1586:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1586 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1586:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1586 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1583:src/display.c **** 	decNumber n;
 630              		.loc 1 1583 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1586:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1586 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1587 2 is_stmt 1 view .LVU192
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1587 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1588:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1588 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1587 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1588:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1588 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
ARM GAS  /tmp/cc1e4Gjl.s 			page 43


1589:src/display.c ****       }
 649              		.loc 1 1589 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1590:src/display.c **** 
 654              		.loc 1 1590 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1590:src/display.c **** 
 661              		.loc 1 1590 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 669              		.align	2
 670              	.LC0:
 671 0000 48494700 		.ascii	"HIG\000"
 672              		.section	.text.set_exp,"ax",%progbits
 673              		.align	1
 674              		.p2align 2,,3
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	set_exp:
 681              	.LVL56:
 682              	.LFB14:
 442:src/display.c ****   union {
 683              		.loc 1 442 52 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/display.c ****     char buf[4];
 687              		.loc 1 443 3 view .LVU201
 447:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 688              		.loc 1 447 3 view .LVU202
 461:src/display.c **** #endif
 689              		.loc 1 461 3 view .LVU203
 464:src/display.c ****   if (exp < 0) {
 690              		.loc 1 464 3 view .LVU204
 442:src/display.c ****   union {
 691              		.loc 1 442 52 is_stmt 0 view .LVU205
 692 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 693              		.cfi_def_cfa_offset 20
 694              		.cfi_offset 4, -20
 695              		.cfi_offset 5, -16
 696              		.cfi_offset 6, -12
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
ARM GAS  /tmp/cc1e4Gjl.s 			page 44


 465:src/display.c ****     negative = 1;
 699              		.loc 1 465 6 view .LVU206
 700 0002 051E     		subs	r5, r0, #0
 442:src/display.c ****   union {
 701              		.loc 1 442 52 view .LVU207
 702 0004 83B0     		sub	sp, sp, #12
 703              		.cfi_def_cfa_offset 32
 442:src/display.c ****   union {
 704              		.loc 1 442 52 view .LVU208
 705 0006 0F46     		mov	r7, r1
 706              	.LVL57:
 465:src/display.c ****     negative = 1;
 707              		.loc 1 465 3 is_stmt 1 view .LVU209
 442:src/display.c ****   union {
 708              		.loc 1 442 52 is_stmt 0 view .LVU210
 709 0008 1446     		mov	r4, r2
 465:src/display.c ****     negative = 1;
 710              		.loc 1 465 6 view .LVU211
 711 000a 0ADB     		blt	.L86
 464:src/display.c ****   if (exp < 0) {
 712              		.loc 1 464 12 view .LVU212
 713 000c 01F00203 		and	r3, r1, #2
 714              	.LVL58:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 715              		.loc 1 472 3 is_stmt 1 view .LVU213
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 716              		.loc 1 472 6 is_stmt 0 view .LVU214
 717 0010 A2B3     		cbz	r2, .L67
 477:src/display.c **** #endif
 718              		.loc 1 477 7 is_stmt 1 view .LVU215
 477:src/display.c **** #endif
 719              		.loc 1 477 10 is_stmt 0 view .LVU216
 720 0012 B5F57A7F 		cmp	r5, #1000
 721 0016 2ADB     		blt	.L68
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 722              		.loc 1 479 2 is_stmt 1 view .LVU217
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 723              		.loc 1 479 5 is_stmt 0 view .LVU218
 724 0018 73BB     		cbnz	r3, .L73
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 725              		.loc 1 479 17 is_stmt 1 discriminator 1 view .LVU219
 726              	.LVL59:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 727              		.loc 1 479 24 is_stmt 0 discriminator 1 view .LVU220
 728 001a 3A23     		movs	r3, #58
 729              	.LVL60:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 730              		.loc 1 479 24 discriminator 1 view .LVU221
 731 001c 04F8013B 		strb	r3, [r4], #1
 732              	.LVL61:
 486:src/display.c ****     }
 733              		.loc 1 486 7 is_stmt 1 discriminator 1 view .LVU222
 734 0020 08E0     		b	.L69
 735              	.LVL62:
 736              	.L86:
 466:src/display.c ****     exp = -exp;
 737              		.loc 1 466 5 view .LVU223
ARM GAS  /tmp/cc1e4Gjl.s 			page 45


 467:src/display.c ****   }
 738              		.loc 1 467 5 view .LVU224
 467:src/display.c ****   }
 739              		.loc 1 467 9 is_stmt 0 view .LVU225
 740 0022 6E42     		rsbs	r6, r5, #0
 741              	.LVL63:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 742              		.loc 1 472 3 is_stmt 1 view .LVU226
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 743              		.loc 1 472 6 is_stmt 0 view .LVU227
 744 0024 AAB3     		cbz	r2, .L64
 477:src/display.c **** #endif
 745              		.loc 1 477 7 is_stmt 1 view .LVU228
 477:src/display.c **** #endif
 746              		.loc 1 477 10 is_stmt 0 view .LVU229
 747 0026 15F57A7F 		cmn	r5, #1000
 748 002a 2DDC     		bgt	.L87
 749              	.LVL64:
 750              	.L65:
 486:src/display.c ****     }
 751              		.loc 1 486 21 is_stmt 1 discriminator 1 view .LVU230
 486:src/display.c ****     }
 752              		.loc 1 486 28 is_stmt 0 discriminator 1 view .LVU231
 753 002c 2D23     		movs	r3, #45
 754 002e 04F8013B 		strb	r3, [r4], #1
 755              	.LVL65:
 486:src/display.c ****     }
 756              		.loc 1 486 28 discriminator 1 view .LVU232
 757 0032 3546     		mov	r5, r6
 758              	.LVL66:
 759              	.L69:
 534:src/display.c **** #endif
 760              		.loc 1 534 7 is_stmt 1 view .LVU233
 761 0034 01AE     		add	r6, sp, #4
 762 0036 0021     		movs	r1, #0
 763 0038 3046     		mov	r0, r6
 764 003a 0422     		movs	r2, #4
 765 003c FFF7FEFF 		bl	xset
 766              	.LVL67:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 767              		.loc 1 536 7 view .LVU234
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 768              		.loc 1 536 10 is_stmt 0 view .LVU235
 769 0040 17F0050F 		tst	r7, #5
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 770              		.loc 1 537 2 view .LVU236
 771 0044 2946     		mov	r1, r5
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 772              		.loc 1 536 10 view .LVU237
 773 0046 09D0     		beq	.L72
 774              	.LVL68:
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 775              		.loc 1 537 2 is_stmt 1 view .LVU238
 776 0048 0322     		movs	r2, #3
 777 004a 3046     		mov	r0, r6
 778 004c FFF7FEFF 		bl	num_arg_0
 779              	.LVL69:
ARM GAS  /tmp/cc1e4Gjl.s 			page 46


 780              	.L71:
 559:src/display.c ****     }
 781              		.loc 1 559 7 view .LVU239
 782 0050 2146     		mov	r1, r4
 783 0052 3046     		mov	r0, r6
 784 0054 FFF7FEFF 		bl	set_exp_digits_string
 785              	.LVL70:
 560:src/display.c **** 
 786              		.loc 1 560 5 is_stmt 0 view .LVU240
 787 0058 03B0     		add	sp, sp, #12
 788              		.cfi_remember_state
 789              		.cfi_def_cfa_offset 20
 790              		@ sp needed
 791 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 792              	.LVL71:
 793              	.L72:
 794              		.cfi_restore_state
 557:src/display.c ****     no_number:
 795              		.loc 1 557 2 is_stmt 1 view .LVU241
 796 005c 3046     		mov	r0, r6
 797 005e FFF7FEFF 		bl	num_arg
 798              	.LVL72:
 559:src/display.c ****     }
 799              		.loc 1 559 7 view .LVU242
 800 0062 2146     		mov	r1, r4
 801 0064 3046     		mov	r0, r6
 802 0066 FFF7FEFF 		bl	set_exp_digits_string
 803              	.LVL73:
 560:src/display.c **** 
 804              		.loc 1 560 5 is_stmt 0 view .LVU243
 805 006a 03B0     		add	sp, sp, #12
 806              		.cfi_remember_state
 807              		.cfi_def_cfa_offset 20
 808              		@ sp needed
 809 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 810              	.LVL74:
 811              	.L68:
 812              		.cfi_restore_state
 482:src/display.c **** #else
 813              		.loc 1 482 12 is_stmt 1 view .LVU244
 482:src/display.c **** #else
 814              		.loc 1 482 19 is_stmt 0 view .LVU245
 815 006e 6522     		movs	r2, #101
 816              	.LVL75:
 482:src/display.c **** #else
 817              		.loc 1 482 19 view .LVU246
 818 0070 04F8012B 		strb	r2, [r4], #1
 819              	.LVL76:
 486:src/display.c ****     }
 820              		.loc 1 486 7 is_stmt 1 view .LVU247
 486:src/display.c ****     }
 821              		.loc 1 486 10 is_stmt 0 view .LVU248
 822 0074 002B     		cmp	r3, #0
 823 0076 DDD0     		beq	.L69
 824              	.L73:
 486:src/display.c ****     }
 825              		.loc 1 486 10 view .LVU249
ARM GAS  /tmp/cc1e4Gjl.s 			page 47


 826 0078 2E46     		mov	r6, r5
 827 007a D7E7     		b	.L65
 828              	.LVL77:
 829              	.L67:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 830              		.loc 1 489 7 is_stmt 1 view .LVU250
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 831              		.loc 1 489 10 is_stmt 0 view .LVU251
 832 007c 43B9     		cbnz	r3, .L88
 833              	.LVL78:
 834              	.L70:
 493:src/display.c **** #endif
 835              		.loc 1 493 2 is_stmt 1 view .LVU252
 493:src/display.c **** #endif
 836              		.loc 1 493 5 is_stmt 0 view .LVU253
 837 007e B5F57A7F 		cmp	r5, #1000
 838 0082 0EDA     		bge	.L89
 493:src/display.c **** #endif
 839              		.loc 1 493 5 view .LVU254
 840 0084 0024     		movs	r4, #0
 841              	.LVL79:
 493:src/display.c **** #endif
 842              		.loc 1 493 5 view .LVU255
 843 0086 D5E7     		b	.L69
 844              	.LVL80:
 845              	.L87:
 482:src/display.c **** #else
 846              		.loc 1 482 12 is_stmt 1 view .LVU256
 482:src/display.c **** #else
 847              		.loc 1 482 19 is_stmt 0 view .LVU257
 848 0088 6523     		movs	r3, #101
 849 008a 04F8013B 		strb	r3, [r4], #1
 850              	.LVL81:
 486:src/display.c ****     }
 851              		.loc 1 486 7 is_stmt 1 view .LVU258
 852 008e CDE7     		b	.L65
 853              	.LVL82:
 854              	.L88:
 486:src/display.c ****     }
 855              		.loc 1 486 7 is_stmt 0 view .LVU259
 856 0090 2E46     		mov	r6, r5
 857              	.LVL83:
 858              	.L64:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 859              		.loc 1 489 21 is_stmt 1 view .LVU260
 860              	.LBB166:
 861              	.LBI166:
 308:src/display.c **** {
 862              		.loc 1 308 13 view .LVU261
 863              	.LBB167:
 310:src/display.c ****   set_dot(EXP_SIGN);
 864              		.loc 1 310 3 view .LVU262
 310:src/display.c ****   set_dot(EXP_SIGN);
 865              		.loc 1 310 27 is_stmt 0 view .LVU263
 866 0092 074B     		ldr	r3, .L90
 867 0094 2D22     		movs	r2, #45
 868              	.LVL84:
ARM GAS  /tmp/cc1e4Gjl.s 			page 48


 311:src/display.c **** }
 869              		.loc 1 311 3 view .LVU264
 870 0096 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 871              		.loc 1 310 27 view .LVU265
 872 0098 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 873              		.loc 1 311 3 is_stmt 1 view .LVU266
 312:src/display.c **** 
 874              		.loc 1 312 1 is_stmt 0 view .LVU267
 875 009a 3546     		mov	r5, r6
 311:src/display.c **** }
 876              		.loc 1 311 3 view .LVU268
 877 009c FFF7FEFF 		bl	set_dot
 878              	.LVL85:
 312:src/display.c **** 
 879              		.loc 1 312 1 view .LVU269
 880 00a0 EDE7     		b	.L70
 881              	.LVL86:
 882              	.L89:
 312:src/display.c **** 
 883              		.loc 1 312 1 view .LVU270
 884              	.LBE167:
 885              	.LBE166:
 495:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 886              		.loc 1 495 4 is_stmt 1 view .LVU271
 503:src/display.c **** #endif
 887              		.loc 1 503 6 view .LVU272
 888 00a2 01AE     		add	r6, sp, #4
 889 00a4 0349     		ldr	r1, .L90+4
 890 00a6 3046     		mov	r0, r6
 891 00a8 FFF7FEFF 		bl	scopy
 892              	.LVL87:
 505:src/display.c **** 	  }
 893              		.loc 1 505 6 view .LVU273
 894 00ac 0024     		movs	r4, #0
 895              	.LVL88:
 505:src/display.c **** 	  }
 896              		.loc 1 505 6 is_stmt 0 view .LVU274
 897 00ae CFE7     		b	.L71
 898              	.L91:
 899              		.align	2
 900              	.L90:
 901 00b0 00000000 		.word	LastDisplayedExponent
 902 00b4 00000000 		.word	.LC0
 903              		.cfi_endproc
 904              	.LFE14:
 906              		.section	.text.set_separator.part.0,"ax",%progbits
 907              		.align	1
 908              		.p2align 2,,3
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu fpv4-sp-d16
 914              	set_separator.part.0:
 915              	.LVL89:
 916              	.LFB47:
ARM GAS  /tmp/cc1e4Gjl.s 			page 49


 367:src/display.c ****   if (sep == SEP_NONE)
 917              		.loc 1 367 14 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 374:src/display.c ****     set_dot(posn+7);
 921              		.loc 1 374 5 view .LVU276
 367:src/display.c ****   if (sep == SEP_NONE)
 922              		.loc 1 367 14 is_stmt 0 view .LVU277
 923 0000 70B5     		push	{r4, r5, r6, lr}
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 4, -16
 926              		.cfi_offset 5, -12
 927              		.cfi_offset 6, -8
 928              		.cfi_offset 14, -4
 367:src/display.c ****   if (sep == SEP_NONE)
 929              		.loc 1 367 14 view .LVU278
 930 0002 0546     		mov	r5, r0
 931 0004 0E46     		mov	r6, r1
 375:src/display.c ****     if (sep == SEP_COMMA)
 932              		.loc 1 375 5 view .LVU279
 933 0006 0238     		subs	r0, r0, #2
 934              	.LVL90:
 375:src/display.c ****     if (sep == SEP_COMMA)
 935              		.loc 1 375 5 view .LVU280
 936 0008 FFF7FEFF 		bl	set_dot
 937              	.LVL91:
 376:src/display.c ****       set_dot(posn+8);
 938              		.loc 1 376 8 view .LVU281
 939 000c 012E     		cmp	r6, #1
 374:src/display.c ****     set_dot(posn+7);
 940              		.loc 1 374 10 view .LVU282
 941 000e A5F10904 		sub	r4, r5, #9
 942              	.LVL92:
 375:src/display.c ****     if (sep == SEP_COMMA)
 943              		.loc 1 375 5 is_stmt 1 view .LVU283
 376:src/display.c ****       set_dot(posn+8);
 944              		.loc 1 376 5 view .LVU284
 376:src/display.c ****       set_dot(posn+8);
 945              		.loc 1 376 8 is_stmt 0 view .LVU285
 946 0012 0CD0     		beq	.L96
 379:src/display.c **** #endif
 947              		.loc 1 379 39 view .LVU286
 948 0014 2E21     		movs	r1, #46
 949              	.L93:
 379:src/display.c **** #endif
 950              		.loc 1 379 30 view .LVU287
 951 0016 084B     		ldr	r3, .L97
 379:src/display.c **** #endif
 952              		.loc 1 379 39 view .LVU288
 953 0018 084A     		ldr	r2, .L97+4
 379:src/display.c **** #endif
 954              		.loc 1 379 30 view .LVU289
 955 001a 83FB0403 		smull	r0, r3, r3, r4
 956 001e E417     		asrs	r4, r4, #31
 957              	.LVL93:
 379:src/display.c **** #endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 50


 958              		.loc 1 379 30 view .LVU290
 959 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 379:src/display.c **** #endif
 960              		.loc 1 379 35 view .LVU291
 961 0024 0134     		adds	r4, r4, #1
 383:src/display.c **** 
 962              		.loc 1 383 1 view .LVU292
 963 0026 0020     		movs	r0, #0
 379:src/display.c **** #endif
 964              		.loc 1 379 39 view .LVU293
 965 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 966              	.LVL94:
 383:src/display.c **** 
 967              		.loc 1 383 1 view .LVU294
 968 002c 70BD     		pop	{r4, r5, r6, pc}
 969              	.LVL95:
 970              	.L96:
 377:src/display.c **** #ifndef REALBUILD
 971              		.loc 1 377 7 is_stmt 1 view .LVU295
 972 002e 681E     		subs	r0, r5, #1
 973 0030 FFF7FEFF 		bl	set_dot
 974              	.LVL96:
 379:src/display.c **** #endif
 975              		.loc 1 379 5 view .LVU296
 379:src/display.c **** #endif
 976              		.loc 1 379 39 is_stmt 0 view .LVU297
 977 0034 2C21     		movs	r1, #44
 978 0036 EEE7     		b	.L93
 979              	.L98:
 980              		.align	2
 981              	.L97:
 982 0038 398EE338 		.word	954437177
 983 003c 00000000 		.word	LastDisplayedNumber
 984              		.cfi_endproc
 985              	.LFE47:
 987              		.section	.text.set_decimal,"ax",%progbits
 988              		.align	1
 989              		.p2align 2,,3
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu fpv4-sp-d16
 995              	set_decimal:
 996              	.LVL97:
 997              	.LFB8:
 349:src/display.c ****   if (res) {
 998              		.loc 1 349 87 is_stmt 1 view -0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1002              		.loc 1 350 3 view .LVU299
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1003              		.loc 1 350 6 is_stmt 0 view .LVU300
 1004 0000 3AB1     		cbz	r2, .L100
 351:src/display.c ****   } else {
 1005              		.loc 1 351 5 is_stmt 1 view .LVU301
ARM GAS  /tmp/cc1e4Gjl.s 			page 51


 351:src/display.c ****   } else {
 1006              		.loc 1 351 12 is_stmt 0 view .LVU302
 1007 0002 0029     		cmp	r1, #0
 351:src/display.c ****   } else {
 1008              		.loc 1 351 9 view .LVU303
 1009 0004 1046     		mov	r0, r2
 1010              	.LVL98:
 351:src/display.c ****   } else {
 1011              		.loc 1 351 12 view .LVU304
 1012 0006 0CBF     		ite	eq
 1013 0008 2E23     		moveq	r3, #46
 1014 000a 2C23     		movne	r3, #44
 1015 000c 00F8013B 		strb	r3, [r0], #1
 1016              	.LVL99:
 361:src/display.c **** 
 1017              		.loc 1 361 1 view .LVU305
 1018 0010 7047     		bx	lr
 1019              	.LVL100:
 1020              	.L100:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1021              		.loc 1 353 5 is_stmt 1 view .LVU306
 349:src/display.c ****   if (res) {
 1022              		.loc 1 349 87 is_stmt 0 view .LVU307
 1023 0012 10B5     		push	{r4, lr}
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 4, -8
 1026              		.cfi_offset 14, -4
 1027 0014 82B0     		sub	sp, sp, #8
 1028              		.cfi_def_cfa_offset 16
 1029 0016 0446     		mov	r4, r0
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1030              		.loc 1 353 5 view .LVU308
 1031 0018 0730     		adds	r0, r0, #7
 1032              	.LVL101:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1033              		.loc 1 353 5 view .LVU309
 1034 001a 0191     		str	r1, [sp, #4]
 1035 001c FFF7FEFF 		bl	set_dot
 1036              	.LVL102:
 354:src/display.c ****       set_dot(posn+8);
 1037              		.loc 1 354 5 is_stmt 1 view .LVU310
 354:src/display.c ****       set_dot(posn+8);
 1038              		.loc 1 354 8 is_stmt 0 view .LVU311
 1039 0020 0199     		ldr	r1, [sp, #4]
 1040 0022 69B9     		cbnz	r1, .L109
 1041              	.LBB170:
 1042              	.LBB171:
 357:src/display.c **** #endif
 1043              		.loc 1 357 38 view .LVU312
 1044 0024 2E22     		movs	r2, #46
 1045              	.L103:
 357:src/display.c **** #endif
 1046              		.loc 1 357 30 view .LVU313
 1047 0026 0948     		ldr	r0, .L110
 357:src/display.c **** #endif
 1048              		.loc 1 357 38 view .LVU314
 1049 0028 094B     		ldr	r3, .L110+4
ARM GAS  /tmp/cc1e4Gjl.s 			page 52


 357:src/display.c **** #endif
 1050              		.loc 1 357 30 view .LVU315
 1051 002a 80FB0410 		smull	r1, r0, r0, r4
 1052 002e E417     		asrs	r4, r4, #31
 1053              	.LVL103:
 357:src/display.c **** #endif
 1054              		.loc 1 357 30 view .LVU316
 1055 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 357:src/display.c **** #endif
 1056              		.loc 1 357 35 view .LVU317
 1057 0034 0134     		adds	r4, r4, #1
 357:src/display.c **** #endif
 1058              		.loc 1 357 38 view .LVU318
 1059 0036 0020     		movs	r0, #0
 1060 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1061              	.LVL104:
 360:src/display.c **** }
 1062              		.loc 1 360 3 is_stmt 1 view .LVU319
 360:src/display.c **** }
 1063              		.loc 1 360 3 is_stmt 0 view .LVU320
 1064              	.LBE171:
 1065              	.LBE170:
 360:src/display.c **** }
 1066              		.loc 1 360 3 is_stmt 1 view .LVU321
 361:src/display.c **** 
 1067              		.loc 1 361 1 is_stmt 0 view .LVU322
 1068 003c 02B0     		add	sp, sp, #8
 1069              		.cfi_remember_state
 1070              		.cfi_def_cfa_offset 8
 1071              		@ sp needed
 1072 003e 10BD     		pop	{r4, pc}
 1073              	.LVL105:
 1074              	.L109:
 1075              		.cfi_restore_state
 355:src/display.c **** #ifndef REALBUILD
 1076              		.loc 1 355 7 is_stmt 1 view .LVU323
 1077 0040 04F10800 		add	r0, r4, #8
 1078 0044 FFF7FEFF 		bl	set_dot
 1079              	.LVL106:
 1080              	.LBB173:
 1081              	.LBI170:
 349:src/display.c ****   if (res) {
 1082              		.loc 1 349 14 view .LVU324
 1083              	.LBB172:
 357:src/display.c **** #endif
 1084              		.loc 1 357 5 view .LVU325
 357:src/display.c **** #endif
 1085              		.loc 1 357 38 is_stmt 0 view .LVU326
 1086 0048 2C22     		movs	r2, #44
 1087 004a ECE7     		b	.L103
 1088              	.L111:
 1089              		.align	2
 1090              	.L110:
 1091 004c 398EE338 		.word	954437177
 1092 0050 00000000 		.word	LastDisplayedNumber
 1093              	.LBE172:
 1094              	.LBE173:
ARM GAS  /tmp/cc1e4Gjl.s 			page 53


 1095              		.cfi_endproc
 1096              	.LFE8:
 1098              		.section	.text.set_digits_string,"ax",%progbits
 1099              		.align	1
 1100              		.p2align 2,,3
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu fpv4-sp-d16
 1106              	set_digits_string:
 1107              	.LVL107:
 1108              	.LFB12:
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1109              		.loc 1 414 55 is_stmt 1 view -0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1113              		.loc 1 415 3 view .LVU328
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1114              		.loc 1 414 55 is_stmt 0 view .LVU329
 1115 0000 38B5     		push	{r3, r4, r5, lr}
 1116              		.cfi_def_cfa_offset 16
 1117              		.cfi_offset 3, -16
 1118              		.cfi_offset 4, -12
 1119              		.cfi_offset 5, -8
 1120              		.cfi_offset 14, -4
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1121              		.loc 1 415 10 view .LVU330
 1122 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1123              		.loc 1 415 10 is_stmt 1 view .LVU331
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1124              		.loc 1 415 3 is_stmt 0 view .LVU332
 1125 0004 E3B1     		cbz	r3, .L112
 1126 0006 0546     		mov	r5, r0
 1127 0008 0C46     		mov	r4, r1
 1128 000a 06E0     		b	.L116
 1129              	.LVL108:
 1130              	.L114:
 1131              	.LBB174:
 1132              	.LBB175:
 409:src/display.c ****   return res;
 1133              		.loc 1 409 8 view .LVU333
 1134 000c 2046     		mov	r0, r4
 1135 000e FFF7FEFF 		bl	set_dig
 1136              	.LVL109:
 410:src/display.c **** }
 1137              		.loc 1 410 3 is_stmt 1 view .LVU334
 410:src/display.c **** }
 1138              		.loc 1 410 3 is_stmt 0 view .LVU335
 1139              	.LBE175:
 1140              	.LBE174:
 420:src/display.c ****     }
 1141              		.loc 1 420 7 is_stmt 1 view .LVU336
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1142              		.loc 1 415 10 is_stmt 0 view .LVU337
ARM GAS  /tmp/cc1e4Gjl.s 			page 54


 1143 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1144              	.LVL110:
 420:src/display.c ****     }
 1145              		.loc 1 420 9 view .LVU338
 1146 0016 0934     		adds	r4, r4, #9
 1147              	.LVL111:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1148              		.loc 1 415 24 is_stmt 1 view .LVU339
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1149              		.loc 1 415 10 view .LVU340
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1150              		.loc 1 415 3 is_stmt 0 view .LVU341
 1151 0018 93B1     		cbz	r3, .L112
 1152              	.LVL112:
 1153              	.L116:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1154              		.loc 1 416 5 is_stmt 1 view .LVU342
 417:src/display.c ****     else {
 1155              		.loc 1 417 7 view .LVU343
 419:src/display.c ****       j += SEGS_PER_DIGIT;
 1156              		.loc 1 419 7 view .LVU344
 1157              	.LBB178:
 1158              	.LBI174:
 407:src/display.c ****   if (res) *res++ = ch;
 1159              		.loc 1 407 14 view .LVU345
 1160              	.LBB176:
 408:src/display.c ****   else	set_dig(base, ch);
 1161              		.loc 1 408 3 view .LVU346
 409:src/display.c ****   return res;
 1162              		.loc 1 409 8 view .LVU347
 1163              	.LBE176:
 1164              	.LBE178:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1165              		.loc 1 416 21 is_stmt 0 view .LVU348
 1166 001a 03F0FD02 		and	r2, r3, #253
 1167 001e 2C2A     		cmp	r2, #44
 417:src/display.c ****     else {
 1168              		.loc 1 417 7 view .LVU349
 1169 0020 A4F10900 		sub	r0, r4, #9
 1170 0024 4FF00002 		mov	r2, #0
 1171              	.LBB179:
 1172              	.LBB177:
 409:src/display.c ****   return res;
 1173              		.loc 1 409 8 view .LVU350
 1174 0028 1946     		mov	r1, r3
 1175              	.LBE177:
 1176              	.LBE179:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1177              		.loc 1 416 21 view .LVU351
 1178 002a EFD1     		bne	.L114
 417:src/display.c ****     else {
 1179              		.loc 1 417 7 view .LVU352
 1180 002c B3F12E01 		subs	r1, r3, #46
 1181 0030 18BF     		it	ne
 1182 0032 0121     		movne	r1, #1
 1183 0034 FFF7FEFF 		bl	set_decimal
 1184              	.LVL113:
ARM GAS  /tmp/cc1e4Gjl.s 			page 55


 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1185              		.loc 1 415 24 is_stmt 1 view .LVU353
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1186              		.loc 1 415 10 view .LVU354
 1187 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1188              	.LVL114:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1189              		.loc 1 415 3 is_stmt 0 view .LVU355
 1190 003c 002B     		cmp	r3, #0
 1191 003e ECD1     		bne	.L116
 1192              	.LVL115:
 1193              	.L112:
 423:src/display.c **** 
 1194              		.loc 1 423 1 view .LVU356
 1195 0040 38BD     		pop	{r3, r4, r5, pc}
 1196              		.cfi_endproc
 1197              	.LFE12:
 1199 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1200              		.align	2
 1201              	.LC1:
 1202 0000 4E614E00 		.ascii	"NaN\000"
 1203              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1204              		.align	1
 1205              		.p2align 2,,3
 1206              		.syntax unified
 1207              		.thumb
 1208              		.thumb_func
 1209              		.fpu fpv4-sp-d16
 1211              	check_special_dn.isra.0:
 1212              	.LVL116:
 1213              	.LFB49:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1214              		.loc 1 1542 18 is_stmt 1 view -0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1218              		.loc 1 1543 2 view .LVU358
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1219              		.loc 1 1542 18 is_stmt 0 view .LVU359
 1220 0000 38B5     		push	{r3, r4, r5, lr}
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 3, -16
 1223              		.cfi_offset 4, -12
 1224              		.cfi_offset 5, -8
 1225              		.cfi_offset 14, -4
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1226              		.loc 1 1543 6 view .LVU360
 1227 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1228              		.loc 1 1542 18 view .LVU361
 1229 0004 0546     		mov	r5, r0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1230              		.loc 1 1543 5 view .LVU362
 1231 0006 13F07000 		ands	r0, r3, #112
 1232 000a 09D0     		beq	.L122
1544:src/display.c **** 	    if (res) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 56


 1233              		.loc 1 1544 4 is_stmt 1 view .LVU363
1544:src/display.c **** 	    if (res) {
 1234              		.loc 1 1544 7 is_stmt 0 view .LVU364
 1235 000c 13F0300F 		tst	r3, #48
 1236 0010 0C46     		mov	r4, r1
 1237 0012 06D0     		beq	.L124
 1238              	.LVL117:
 1239              	.LBB182:
 1240              	.LBI182:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1241              		.loc 1 1542 18 is_stmt 1 view .LVU365
 1242              	.LBB183:
1545:src/display.c **** 	      scopy(res, "NaN");
 1243              		.loc 1 1545 6 view .LVU366
1545:src/display.c **** 	      scopy(res, "NaN");
 1244              		.loc 1 1545 9 is_stmt 0 view .LVU367
 1245 0014 89B1     		cbz	r1, .L125
1546:src/display.c **** 	    } else {
 1246              		.loc 1 1546 8 is_stmt 1 view .LVU368
 1247 0016 0846     		mov	r0, r1
 1248 0018 1849     		ldr	r1, .L138
 1249              	.LVL118:
1546:src/display.c **** 	    } else {
 1250              		.loc 1 1546 8 is_stmt 0 view .LVU369
 1251 001a FFF7FEFF 		bl	scopy
 1252              	.LVL119:
1546:src/display.c **** 	    } else {
 1253              		.loc 1 1546 8 view .LVU370
 1254 001e 0120     		movs	r0, #1
 1255              	.LVL120:
 1256              	.L122:
1546:src/display.c **** 	    } else {
 1257              		.loc 1 1546 8 view .LVU371
 1258              	.LBE183:
 1259              	.LBE182:
1578:src/display.c **** 
 1260              		.loc 1 1578 7 view .LVU372
 1261 0020 38BD     		pop	{r3, r4, r5, pc}
 1262              	.LVL121:
 1263              	.L124:
1556:src/display.c **** 	      if (res) *res++ = '-';
 1264              		.loc 1 1556 6 is_stmt 1 view .LVU373
1556:src/display.c **** 	      if (res) *res++ = '-';
 1265              		.loc 1 1556 9 is_stmt 0 view .LVU374
 1266 0022 1B06     		lsls	r3, r3, #24
 1267 0024 04D4     		bmi	.L137
1560:src/display.c **** 	      *res++ = '\237';
 1268              		.loc 1 1560 6 is_stmt 1 view .LVU375
1560:src/display.c **** 	      *res++ = '\237';
 1269              		.loc 1 1560 9 is_stmt 0 view .LVU376
 1270 0026 B9B1     		cbz	r1, .L129
 1271              	.LVL122:
 1272              	.L128:
1561:src/display.c **** 	    else {
 1273              		.loc 1 1561 8 is_stmt 1 view .LVU377
1561:src/display.c **** 	    else {
 1274              		.loc 1 1561 15 is_stmt 0 view .LVU378
ARM GAS  /tmp/cc1e4Gjl.s 			page 57


 1275 0028 9F23     		movs	r3, #159
 1276 002a 2370     		strb	r3, [r4]
1574:src/display.c **** 	  }
 1277              		.loc 1 1574 13 view .LVU379
 1278 002c 0120     		movs	r0, #1
1578:src/display.c **** 
 1279              		.loc 1 1578 7 view .LVU380
 1280 002e 38BD     		pop	{r3, r4, r5, pc}
 1281              	.LVL123:
 1282              	.L137:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1283              		.loc 1 1557 8 is_stmt 1 view .LVU381
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1284              		.loc 1 1557 11 is_stmt 0 view .LVU382
 1285 0030 71B1     		cbz	r1, .L127
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1286              		.loc 1 1557 17 is_stmt 1 view .LVU383
 1287              	.LVL124:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1288              		.loc 1 1557 24 is_stmt 0 view .LVU384
 1289 0032 2D23     		movs	r3, #45
 1290 0034 04F8013B 		strb	r3, [r4], #1
 1291              	.LVL125:
1560:src/display.c **** 	      *res++ = '\237';
 1292              		.loc 1 1560 6 is_stmt 1 view .LVU385
 1293 0038 F6E7     		b	.L128
 1294              	.LVL126:
 1295              	.L125:
 1296              	.LBB185:
 1297              	.LBB184:
1548:src/display.c **** #ifndef REALBUILD
 1298              		.loc 1 1548 8 view .LVU386
 1299 003a 1148     		ldr	r0, .L138+4
 1300 003c FFF7FEFF 		bl	set_digits_string
 1301              	.LVL127:
1550:src/display.c **** 	      forceDispPlot=0;
 1302              		.loc 1 1550 8 view .LVU387
 1303 0040 1049     		ldr	r1, .L138+8
 1304 0042 1148     		ldr	r0, .L138+12
 1305 0044 FFF7FEFF 		bl	scopy
 1306              	.LVL128:
1551:src/display.c **** #endif
 1307              		.loc 1 1551 8 view .LVU388
1551:src/display.c **** #endif
 1308              		.loc 1 1551 21 is_stmt 0 view .LVU389
 1309 0048 104B     		ldr	r3, .L138+16
 1310 004a 1C70     		strb	r4, [r3]
 1311 004c 0120     		movs	r0, #1
 1312              	.LBE184:
 1313              	.LBE185:
1578:src/display.c **** 
 1314              		.loc 1 1578 7 view .LVU390
 1315 004e 38BD     		pop	{r3, r4, r5, pc}
 1316              	.LVL129:
 1317              	.L127:
1558:src/display.c **** 	    }
 1318              		.loc 1 1558 13 is_stmt 1 view .LVU391
ARM GAS  /tmp/cc1e4Gjl.s 			page 58


 1319 0050 2D21     		movs	r1, #45
 1320              	.LVL130:
1558:src/display.c **** 	    }
 1321              		.loc 1 1558 13 is_stmt 0 view .LVU392
 1322 0052 0920     		movs	r0, #9
 1323 0054 FFF7FEFF 		bl	set_dig
 1324              	.LVL131:
1560:src/display.c **** 	      *res++ = '\237';
 1325              		.loc 1 1560 6 is_stmt 1 view .LVU393
 1326              	.L129:
1563:src/display.c **** #ifndef REALBUILD
 1327              		.loc 1 1563 8 view .LVU394
 1328 0058 1221     		movs	r1, #18
 1329 005a 0D48     		ldr	r0, .L138+20
 1330 005c FFF7FEFF 		bl	set_digits_string
 1331              	.LVL132:
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1332              		.loc 1 1565 8 view .LVU395
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1333              		.loc 1 1565 11 is_stmt 0 view .LVU396
 1334 0060 95F90030 		ldrsb	r3, [r5]
1569:src/display.c **** 	      }
 1335              		.loc 1 1569 3 view .LVU397
 1336 0064 0848     		ldr	r0, .L138+12
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1337              		.loc 1 1565 11 view .LVU398
 1338 0066 002B     		cmp	r3, #0
1566:src/display.c **** 	      }
 1339              		.loc 1 1566 3 is_stmt 1 view .LVU399
 1340 0068 B4BF     		ite	lt
 1341 006a 0A49     		ldrlt	r1, .L138+24
1569:src/display.c **** 	      }
 1342              		.loc 1 1569 3 view .LVU400
 1343 006c 0A49     		ldrge	r1, .L138+28
 1344 006e FFF7FEFF 		bl	scopy
 1345              	.LVL133:
1571:src/display.c **** #endif
 1346              		.loc 1 1571 8 view .LVU401
1571:src/display.c **** #endif
 1347              		.loc 1 1571 21 is_stmt 0 view .LVU402
 1348 0072 064B     		ldr	r3, .L138+16
 1349 0074 0022     		movs	r2, #0
 1350 0076 1A70     		strb	r2, [r3]
1574:src/display.c **** 	  }
 1351              		.loc 1 1574 13 view .LVU403
 1352 0078 0120     		movs	r0, #1
1578:src/display.c **** 
 1353              		.loc 1 1578 7 view .LVU404
 1354 007a 38BD     		pop	{r3, r4, r5, pc}
 1355              	.L139:
 1356              		.align	2
 1357              	.L138:
 1358 007c 00000000 		.word	.LC1
 1359 0080 00000000 		.word	.LANCHOR3
 1360 0084 00000000 		.word	.LANCHOR4
 1361 0088 00000000 		.word	LastDisplayedNumber
 1362 008c 00000000 		.word	forceDispPlot
ARM GAS  /tmp/cc1e4Gjl.s 			page 59


 1363 0090 00000000 		.word	.LANCHOR5
 1364 0094 00000000 		.word	.LANCHOR6
 1365 0098 00000000 		.word	.LANCHOR7
 1366              		.cfi_endproc
 1367              	.LFE49:
 1369              		.section	.text.set_x_hms,"ax",%progbits
 1370              		.align	1
 1371              		.p2align 2,,3
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1375              		.fpu fpv4-sp-d16
 1377              	set_x_hms:
 1378              	.LVL134:
 1379              	.LFB22:
1618:src/display.c **** 
1619:src/display.c **** 
1620:src/display.c ****       /* Display the number in H.MS mode.
1621:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1622:src/display.c ****        */
1623:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
 1380              		.loc 1 1623 62 is_stmt 1 view -0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 200
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
1624:src/display.c **** 	decNumber x, y, a, t, u;
 1384              		.loc 1 1624 2 view .LVU406
1625:src/display.c **** 	int j=0;
 1385              		.loc 1 1625 2 view .LVU407
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1386              		.loc 1 1623 62 is_stmt 0 view .LVU408
 1387 0000 30B5     		push	{r4, r5, lr}
 1388              		.cfi_def_cfa_offset 12
 1389              		.cfi_offset 4, -12
 1390              		.cfi_offset 5, -8
 1391              		.cfi_offset 14, -4
 1392 0002 B5B0     		sub	sp, sp, #212
 1393              		.cfi_def_cfa_offset 224
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1394              		.loc 1 1623 62 view .LVU409
 1395 0004 0446     		mov	r4, r0
 1396              		.loc 1 1625 6 view .LVU410
 1397 0006 0023     		movs	r3, #0
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1627:src/display.c **** 	unsigned int hr, min, sec, fs;
1628:src/display.c **** 
1629:src/display.c **** 	if (check_special_dn(rgx, res)) {
 1398              		.loc 1 1629 6 view .LVU411
 1399 0008 0830     		adds	r0, r0, #8
 1400              	.LVL135:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1401              		.loc 1 1623 62 view .LVU412
 1402 000a 0D46     		mov	r5, r1
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1403              		.loc 1 1625 6 view .LVU413
 1404 000c 0393     		str	r3, [sp, #12]
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/cc1e4Gjl.s 			page 60


 1405              		.loc 1 1626 2 is_stmt 1 view .LVU414
 1406              	.LVL136:
1627:src/display.c **** 
 1407              		.loc 1 1627 2 view .LVU415
 1408              		.loc 1 1629 2 view .LVU416
 1409              		.loc 1 1629 6 is_stmt 0 view .LVU417
 1410 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1411              	.LVL137:
 1412              		.loc 1 1629 5 view .LVU418
 1413 0012 48B1     		cbz	r0, .L141
1630:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1414              		.loc 1 1630 4 is_stmt 1 view .LVU419
 1415              		.loc 1 1630 7 is_stmt 0 view .LVU420
 1416 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1417 0016 5B06     		lsls	r3, r3, #25
 1418 0018 04D5     		bpl	.L140
1631:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1419              		.loc 1 1631 6 is_stmt 1 view .LVU421
 1420              	.LVL138:
 1421              	.LBB186:
 1422              	.LBI186:
 407:src/display.c ****   if (res) *res++ = ch;
 1423              		.loc 1 407 14 view .LVU422
 1424              	.LBB187:
 408:src/display.c ****   else	set_dig(base, ch);
 1425              		.loc 1 408 3 view .LVU423
 408:src/display.c ****   else	set_dig(base, ch);
 1426              		.loc 1 408 6 is_stmt 0 view .LVU424
 1427 001a 002D     		cmp	r5, #0
 1428 001c 00F0B580 		beq	.L144
 408:src/display.c ****   else	set_dig(base, ch);
 1429              		.loc 1 408 12 is_stmt 1 view .LVU425
 1430              	.LVL139:
 408:src/display.c ****   else	set_dig(base, ch);
 1431              		.loc 1 408 19 is_stmt 0 view .LVU426
 1432 0020 6F23     		movs	r3, #111
 1433 0022 2B70     		strb	r3, [r5]
 1434              	.LVL140:
 1435              	.L140:
 408:src/display.c ****   else	set_dig(base, ch);
 1436              		.loc 1 408 19 view .LVU427
 1437              	.LBE187:
 1438              	.LBE186:
1632:src/display.c **** 	  return;
1633:src/display.c **** 	}
1634:src/display.c **** 
1635:src/display.c **** 	set_separator_decimal_modes();
1636:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1637:src/display.c **** 	dn_abs(&a, rgx);
1638:src/display.c **** 	if (decNumberIsNegative(&x)) {
1639:src/display.c **** 	  if (res != NULL)
1640:src/display.c **** 	    *res++ += '-';
1641:src/display.c **** 	  else
1642:src/display.c **** 	    SET_MANT_SIGN;
1643:src/display.c **** 	  dn_minus(&x, &x);
1644:src/display.c **** 	}
1645:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 61


1646:src/display.c **** 	decNumberHR2HMS(&y, &x);
1647:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1648:src/display.c **** 	decNumberRound(&u, &t);
1649:src/display.c **** 
1650:src/display.c **** 	hms_step(&t, &u, &fs);
1651:src/display.c **** 	hms_step(&u, &t, &sec);
1652:src/display.c **** 	hms_step(&t, &u, &min);
1653:src/display.c **** 	hr = dn_to_int(&t);
1654:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1655:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1656:src/display.c **** 
1657:src/display.c **** 	// degrees
1658:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1659:src/display.c **** 	res = set_dig_s(j, '@', res);
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
1661:src/display.c **** 
1662:src/display.c **** 	// minutes
1663:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1664:src/display.c **** 	res = set_dig_s(j, '\'', res);
1665:src/display.c **** 	j += SEGS_PER_DIGIT;
1666:src/display.c **** 
1667:src/display.c **** 	// seconds
1668:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1669:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1670:src/display.c **** 
1671:src/display.c **** 	// Fractional seconds
1672:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1673:src/display.c **** 
1674:src/display.c **** 	// We're now pointing at the exponent's first digit...
1675:src/display.c **** 	res = set_dig_s(j, '"', res);
1676:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1677:src/display.c **** 
1678:src/display.c **** 	// Check for values too big or small
1679:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1680:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1681:src/display.c **** 	} else if (! dn_eq0(&a)) {
1682:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1683:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1684:src/display.c **** 	  }
1685:src/display.c **** 	}
1686:src/display.c ****       }
 1439              		.loc 1 1686 7 view .LVU428
 1440 0024 35B0     		add	sp, sp, #212
 1441              		.cfi_remember_state
 1442              		.cfi_def_cfa_offset 12
 1443              		@ sp needed
 1444 0026 30BD     		pop	{r4, r5, pc}
 1445              	.LVL141:
 1446              	.L141:
 1447              		.cfi_restore_state
1635:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1448              		.loc 1 1635 2 is_stmt 1 view .LVU429
 1449 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1450              	.LVL142:
1636:src/display.c **** 	dn_abs(&a, rgx);
 1451              		.loc 1 1636 2 view .LVU430
 1452 002c 624A     		ldr	r2, .L171
ARM GAS  /tmp/cc1e4Gjl.s 			page 62


 1453 002e 2146     		mov	r1, r4
 1454 0030 07A8     		add	r0, sp, #28
 1455 0032 FFF7FEFF 		bl	decNumberMod
 1456              	.LVL143:
1637:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1457              		.loc 1 1637 2 view .LVU431
 1458 0036 2146     		mov	r1, r4
 1459 0038 19A8     		add	r0, sp, #100
 1460 003a FFF7FEFF 		bl	dn_abs
 1461              	.LVL144:
1638:src/display.c **** 	  if (res != NULL)
 1462              		.loc 1 1638 2 view .LVU432
1638:src/display.c **** 	  if (res != NULL)
 1463              		.loc 1 1638 5 is_stmt 0 view .LVU433
 1464 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1465 0042 002B     		cmp	r3, #0
 1466 0044 72DB     		blt	.L169
 1467              	.L145:
1646:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1468              		.loc 1 1646 2 is_stmt 1 view .LVU434
 1469 0046 07A9     		add	r1, sp, #28
 1470 0048 10A8     		add	r0, sp, #64
 1471 004a FFF7FEFF 		bl	decNumberHR2HMS
 1472              	.LVL145:
1647:src/display.c **** 	decNumberRound(&u, &t);
 1473              		.loc 1 1647 2 view .LVU435
 1474 004e 0622     		movs	r2, #6
 1475 0050 10A9     		add	r1, sp, #64
 1476 0052 22A8     		add	r0, sp, #136
 1477 0054 FFF7FEFF 		bl	dn_mulpow10
 1478              	.LVL146:
1648:src/display.c **** 
 1479              		.loc 1 1648 2 view .LVU436
 1480 0058 22A9     		add	r1, sp, #136
 1481 005a 2BA8     		add	r0, sp, #172
 1482 005c FFF7FEFF 		bl	decNumberRound
 1483              	.LVL147:
1650:src/display.c **** 	hms_step(&u, &t, &sec);
 1484              		.loc 1 1650 2 view .LVU437
 1485 0060 2BA9     		add	r1, sp, #172
 1486 0062 22A8     		add	r0, sp, #136
 1487 0064 06AA     		add	r2, sp, #24
 1488 0066 FFF7FEFF 		bl	hms_step
 1489              	.LVL148:
1651:src/display.c **** 	hms_step(&t, &u, &min);
 1490              		.loc 1 1651 2 view .LVU438
 1491 006a 22A9     		add	r1, sp, #136
 1492 006c 2BA8     		add	r0, sp, #172
 1493 006e 05AA     		add	r2, sp, #20
 1494 0070 FFF7FEFF 		bl	hms_step
 1495              	.LVL149:
1652:src/display.c **** 	hr = dn_to_int(&t);
 1496              		.loc 1 1652 2 view .LVU439
 1497 0074 04AA     		add	r2, sp, #16
 1498 0076 2BA9     		add	r1, sp, #172
 1499 0078 22A8     		add	r0, sp, #136
 1500 007a FFF7FEFF 		bl	hms_step
ARM GAS  /tmp/cc1e4Gjl.s 			page 63


 1501              	.LVL150:
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1502              		.loc 1 1653 2 view .LVU440
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1503              		.loc 1 1653 7 is_stmt 0 view .LVU441
 1504 007e 22A8     		add	r0, sp, #136
 1505 0080 FFF7FEFF 		bl	dn_to_int
 1506              	.LVL151:
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1507              		.loc 1 1654 33 view .LVU442
 1508 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1509              		.loc 1 1654 5 view .LVU443
 1510 0088 3B2A     		cmp	r2, #59
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1511              		.loc 1 1654 19 is_stmt 1 view .LVU444
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1512              		.loc 1 1654 23 is_stmt 0 view .LVU445
 1513 008a 82BF     		ittt	hi
 1514 008c 3C3A     		subhi	r2, r2, #60
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1515              		.loc 1 1654 33 view .LVU446
 1516 008e 0133     		addhi	r3, r3, #1
 1517 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1655:src/display.c **** 
 1518              		.loc 1 1655 2 is_stmt 1 view .LVU447
1655:src/display.c **** 
 1519              		.loc 1 1655 5 is_stmt 0 view .LVU448
 1520 0094 3B2B     		cmp	r3, #59
 1521 0096 02D9     		bls	.L150
1655:src/display.c **** 
 1522              		.loc 1 1655 19 is_stmt 1 discriminator 1 view .LVU449
1655:src/display.c **** 
 1523              		.loc 1 1655 23 is_stmt 0 discriminator 1 view .LVU450
 1524 0098 3C3B     		subs	r3, r3, #60
 1525 009a 0493     		str	r3, [sp, #16]
1655:src/display.c **** 
 1526              		.loc 1 1655 30 is_stmt 1 discriminator 1 view .LVU451
1655:src/display.c **** 
 1527              		.loc 1 1655 32 is_stmt 0 discriminator 1 view .LVU452
 1528 009c 0130     		adds	r0, r0, #1
 1529              	.LVL152:
 1530              	.L150:
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 1531              		.loc 1 1658 2 is_stmt 1 view .LVU453
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 1532              		.loc 1 1658 8 is_stmt 0 view .LVU454
 1533 009e 0123     		movs	r3, #1
 1534 00a0 0093     		str	r3, [sp]
 1535 00a2 2946     		mov	r1, r5
 1536 00a4 03AA     		add	r2, sp, #12
 1537 00a6 0423     		movs	r3, #4
 1538 00a8 FFF7FEFF 		bl	hms_render
 1539              	.LVL153:
1659:src/display.c **** 	j += SEGS_PER_DIGIT;
 1540              		.loc 1 1659 2 is_stmt 1 view .LVU455
 1541              	.LBB189:
ARM GAS  /tmp/cc1e4Gjl.s 			page 64


 1542              	.LBI189:
 407:src/display.c ****   if (res) *res++ = ch;
 1543              		.loc 1 407 14 view .LVU456
 1544              	.LBB190:
 408:src/display.c ****   else	set_dig(base, ch);
 1545              		.loc 1 408 3 view .LVU457
 408:src/display.c ****   else	set_dig(base, ch);
 1546              		.loc 1 408 6 is_stmt 0 view .LVU458
 1547 00ac 0446     		mov	r4, r0
 1548              	.LVL154:
 408:src/display.c ****   else	set_dig(base, ch);
 1549              		.loc 1 408 6 view .LVU459
 1550 00ae 0028     		cmp	r0, #0
 1551 00b0 76D0     		beq	.L151
 408:src/display.c ****   else	set_dig(base, ch);
 1552              		.loc 1 408 12 is_stmt 1 view .LVU460
 408:src/display.c ****   else	set_dig(base, ch);
 1553              		.loc 1 408 16 is_stmt 0 view .LVU461
 1554 00b2 0146     		mov	r1, r0
 1555              	.LVL155:
 408:src/display.c ****   else	set_dig(base, ch);
 1556              		.loc 1 408 19 view .LVU462
 1557 00b4 4023     		movs	r3, #64
 1558 00b6 01F8013B 		strb	r3, [r1], #1
 1559              	.LVL156:
 1560              	.L152:
 410:src/display.c **** }
 1561              		.loc 1 410 3 is_stmt 1 view .LVU463
 410:src/display.c **** }
 1562              		.loc 1 410 3 is_stmt 0 view .LVU464
 1563              	.LBE190:
 1564              	.LBE189:
1660:src/display.c **** 
 1565              		.loc 1 1660 2 is_stmt 1 view .LVU465
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1566              		.loc 1 1663 8 is_stmt 0 view .LVU466
 1567 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1568 00be 0122     		movs	r2, #1
1660:src/display.c **** 
 1569              		.loc 1 1660 4 view .LVU467
 1570 00c0 03F10904 		add	r4, r3, #9
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1571              		.loc 1 1663 8 view .LVU468
 1572 00c4 0092     		str	r2, [sp]
 1573 00c6 0223     		movs	r3, #2
 1574 00c8 03AA     		add	r2, sp, #12
1660:src/display.c **** 
 1575              		.loc 1 1660 4 view .LVU469
 1576 00ca 0394     		str	r4, [sp, #12]
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1577              		.loc 1 1663 2 is_stmt 1 view .LVU470
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1578              		.loc 1 1663 8 is_stmt 0 view .LVU471
 1579 00cc FFF7FEFF 		bl	hms_render
 1580              	.LVL157:
1664:src/display.c **** 	j += SEGS_PER_DIGIT;
 1581              		.loc 1 1664 2 is_stmt 1 view .LVU472
ARM GAS  /tmp/cc1e4Gjl.s 			page 65


 1582              	.LBB192:
 1583              	.LBI192:
 407:src/display.c ****   if (res) *res++ = ch;
 1584              		.loc 1 407 14 view .LVU473
 1585              	.LBB193:
 408:src/display.c ****   else	set_dig(base, ch);
 1586              		.loc 1 408 3 view .LVU474
 408:src/display.c ****   else	set_dig(base, ch);
 1587              		.loc 1 408 6 is_stmt 0 view .LVU475
 1588 00d0 0446     		mov	r4, r0
 1589 00d2 0028     		cmp	r0, #0
 1590 00d4 5ED0     		beq	.L153
 408:src/display.c ****   else	set_dig(base, ch);
 1591              		.loc 1 408 12 is_stmt 1 view .LVU476
 408:src/display.c ****   else	set_dig(base, ch);
 1592              		.loc 1 408 16 is_stmt 0 view .LVU477
 1593 00d6 0146     		mov	r1, r0
 1594              	.LVL158:
 408:src/display.c ****   else	set_dig(base, ch);
 1595              		.loc 1 408 19 view .LVU478
 1596 00d8 2723     		movs	r3, #39
 1597 00da 01F8013B 		strb	r3, [r1], #1
 1598              	.LVL159:
 1599              	.L154:
 410:src/display.c **** }
 1600              		.loc 1 410 3 is_stmt 1 view .LVU479
 410:src/display.c **** }
 1601              		.loc 1 410 3 is_stmt 0 view .LVU480
 1602              	.LBE193:
 1603              	.LBE192:
1665:src/display.c **** 
 1604              		.loc 1 1665 2 is_stmt 1 view .LVU481
1665:src/display.c **** 
 1605              		.loc 1 1665 4 is_stmt 0 view .LVU482
 1606 00de 039B     		ldr	r3, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1607              		.loc 1 1668 8 view .LVU483
 1608 00e0 0598     		ldr	r0, [sp, #20]
 1609 00e2 0122     		movs	r2, #1
1665:src/display.c **** 
 1610              		.loc 1 1665 4 view .LVU484
 1611 00e4 03F10904 		add	r4, r3, #9
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1612              		.loc 1 1668 8 view .LVU485
 1613 00e8 0092     		str	r2, [sp]
 1614 00ea 0223     		movs	r3, #2
 1615 00ec 03AA     		add	r2, sp, #12
1665:src/display.c **** 
 1616              		.loc 1 1665 4 view .LVU486
 1617 00ee 0394     		str	r4, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1618              		.loc 1 1668 2 is_stmt 1 view .LVU487
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1619              		.loc 1 1668 8 is_stmt 0 view .LVU488
 1620 00f0 FFF7FEFF 		bl	hms_render
 1621              	.LVL160:
1669:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 66


 1622              		.loc 1 1669 8 view .LVU489
 1623 00f4 3149     		ldr	r1, .L171+4
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1624              		.loc 1 1668 8 view .LVU490
 1625 00f6 0246     		mov	r2, r0
 1626              	.LVL161:
1669:src/display.c **** 
 1627              		.loc 1 1669 2 is_stmt 1 view .LVU491
1669:src/display.c **** 
 1628              		.loc 1 1669 8 is_stmt 0 view .LVU492
 1629 00f8 0398     		ldr	r0, [sp, #12]
 1630              	.LVL162:
1669:src/display.c **** 
 1631              		.loc 1 1669 8 view .LVU493
 1632 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1633 00fc 0938     		subs	r0, r0, #9
 1634 00fe FFF7FEFF 		bl	set_decimal
 1635              	.LVL163:
1672:src/display.c **** 
 1636              		.loc 1 1672 8 view .LVU494
 1637 0102 0023     		movs	r3, #0
1669:src/display.c **** 
 1638              		.loc 1 1669 8 view .LVU495
 1639 0104 0146     		mov	r1, r0
 1640              	.LVL164:
1672:src/display.c **** 
 1641              		.loc 1 1672 2 is_stmt 1 view .LVU496
1672:src/display.c **** 
 1642              		.loc 1 1672 8 is_stmt 0 view .LVU497
 1643 0106 0093     		str	r3, [sp]
 1644 0108 0698     		ldr	r0, [sp, #24]
 1645              	.LVL165:
1672:src/display.c **** 
 1646              		.loc 1 1672 8 view .LVU498
 1647 010a 03AA     		add	r2, sp, #12
 1648 010c 0223     		movs	r3, #2
 1649 010e FFF7FEFF 		bl	hms_render
 1650              	.LVL166:
1675:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 1651              		.loc 1 1675 2 is_stmt 1 view .LVU499
 1652              	.LBB195:
 1653              	.LBI195:
 407:src/display.c ****   if (res) *res++ = ch;
 1654              		.loc 1 407 14 view .LVU500
 1655              	.LBB196:
 408:src/display.c ****   else	set_dig(base, ch);
 1656              		.loc 1 408 3 view .LVU501
 408:src/display.c ****   else	set_dig(base, ch);
 1657              		.loc 1 408 6 is_stmt 0 view .LVU502
 1658 0112 0446     		mov	r4, r0
 1659 0114 78B3     		cbz	r0, .L155
 408:src/display.c ****   else	set_dig(base, ch);
 1660              		.loc 1 408 12 is_stmt 1 view .LVU503
 1661              	.LVL167:
 408:src/display.c ****   else	set_dig(base, ch);
 1662              		.loc 1 408 19 is_stmt 0 view .LVU504
 1663 0116 2223     		movs	r3, #34
ARM GAS  /tmp/cc1e4Gjl.s 			page 67


 1664 0118 0370     		strb	r3, [r0]
 1665              	.LVL168:
 410:src/display.c **** }
 1666              		.loc 1 410 3 is_stmt 1 view .LVU505
 410:src/display.c **** }
 1667              		.loc 1 410 3 is_stmt 0 view .LVU506
 1668              	.LBE196:
 1669              	.LBE195:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1670              		.loc 1 1679 2 is_stmt 1 view .LVU507
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1671              		.loc 1 1679 6 is_stmt 0 view .LVU508
 1672 011a 2749     		ldr	r1, .L171
 1673 011c 19A8     		add	r0, sp, #100
 1674              	.LVL169:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1675              		.loc 1 1679 6 view .LVU509
 1676 011e FFF7FEFF 		bl	dn_lt
 1677              	.LVL170:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1678              		.loc 1 1679 5 view .LVU510
 1679 0122 78B9     		cbnz	r0, .L170
1680:src/display.c **** 	} else if (! dn_eq0(&a)) {
 1680              		.loc 1 1680 4 is_stmt 1 view .LVU511
 1681              	.LVL171:
 1682              	.LBB199:
 1683              	.LBI199:
 407:src/display.c ****   if (res) *res++ = ch;
 1684              		.loc 1 407 14 view .LVU512
 1685              	.LBB200:
 408:src/display.c ****   else	set_dig(base, ch);
 1686              		.loc 1 408 3 view .LVU513
 408:src/display.c ****   else	set_dig(base, ch);
 1687              		.loc 1 408 12 view .LVU514
 408:src/display.c ****   else	set_dig(base, ch);
 1688              		.loc 1 408 19 is_stmt 0 view .LVU515
 1689 0124 6F23     		movs	r3, #111
 1690 0126 6370     		strb	r3, [r4, #1]
 1691              	.LBE200:
 1692              	.LBE199:
 1693              		.loc 1 1686 7 view .LVU516
 1694 0128 35B0     		add	sp, sp, #212
 1695              		.cfi_remember_state
 1696              		.cfi_def_cfa_offset 12
 1697              		@ sp needed
 1698 012a 30BD     		pop	{r4, r5, pc}
 1699              	.LVL172:
 1700              	.L169:
 1701              		.cfi_restore_state
1639:src/display.c **** 	    *res++ += '-';
 1702              		.loc 1 1639 4 is_stmt 1 view .LVU517
1639:src/display.c **** 	    *res++ += '-';
 1703              		.loc 1 1639 7 is_stmt 0 view .LVU518
 1704 012c E5B1     		cbz	r5, .L146
1640:src/display.c **** 	  else
 1705              		.loc 1 1640 6 is_stmt 1 view .LVU519
1640:src/display.c **** 	  else
ARM GAS  /tmp/cc1e4Gjl.s 			page 68


 1706              		.loc 1 1640 10 is_stmt 0 view .LVU520
 1707 012e 2B46     		mov	r3, r5
 1708              	.LVL173:
1640:src/display.c **** 	  else
 1709              		.loc 1 1640 13 view .LVU521
 1710 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1711              	.LVL174:
1640:src/display.c **** 	  else
 1712              		.loc 1 1640 13 view .LVU522
 1713 0134 2D32     		adds	r2, r2, #45
 1714 0136 2A70     		strb	r2, [r5]
1640:src/display.c **** 	  else
 1715              		.loc 1 1640 10 view .LVU523
 1716 0138 1D46     		mov	r5, r3
 1717              	.LVL175:
 1718              	.L147:
1643:src/display.c **** 	}
 1719              		.loc 1 1643 4 is_stmt 1 view .LVU524
 1720 013a 07A9     		add	r1, sp, #28
 1721 013c 0846     		mov	r0, r1
 1722 013e FFF7FEFF 		bl	dn_minus
 1723              	.LVL176:
 1724 0142 80E7     		b	.L145
 1725              	.LVL177:
 1726              	.L170:
 1727              	.LBB201:
 1728              	.LBB197:
 408:src/display.c ****   else	set_dig(base, ch);
 1729              		.loc 1 408 16 is_stmt 0 view .LVU525
 1730 0144 0134     		adds	r4, r4, #1
 1731              	.LVL178:
 1732              	.L158:
 408:src/display.c ****   else	set_dig(base, ch);
 1733              		.loc 1 408 16 view .LVU526
 1734              	.LBE197:
 1735              	.LBE201:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1736              		.loc 1 1681 9 is_stmt 1 view .LVU527
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1737              		.loc 1 1681 15 is_stmt 0 view .LVU528
 1738 0146 19A8     		add	r0, sp, #100
 1739 0148 FFF7FEFF 		bl	dn_eq0
 1740              	.LVL179:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1741              		.loc 1 1681 12 view .LVU529
 1742 014c 0028     		cmp	r0, #0
 1743 014e 7FF469AF 		bne	.L140
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1744              		.loc 1 1682 4 is_stmt 1 view .LVU530
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1745              		.loc 1 1682 8 is_stmt 0 view .LVU531
 1746 0152 1B48     		ldr	r0, .L171+8
 1747 0154 19A9     		add	r1, sp, #100
 1748 0156 FFF7FEFF 		bl	dn_lt
 1749              	.LVL180:
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1750              		.loc 1 1682 7 view .LVU532
ARM GAS  /tmp/cc1e4Gjl.s 			page 69


 1751 015a 0028     		cmp	r0, #0
 1752 015c 7FF462AF 		bne	.L140
1683:src/display.c **** 	  }
 1753              		.loc 1 1683 6 is_stmt 1 view .LVU533
 1754              	.LVL181:
 1755              	.LBB202:
 1756              	.LBI202:
 407:src/display.c ****   if (res) *res++ = ch;
 1757              		.loc 1 407 14 view .LVU534
 1758              	.LBB203:
 408:src/display.c ****   else	set_dig(base, ch);
 1759              		.loc 1 408 3 view .LVU535
 408:src/display.c ****   else	set_dig(base, ch);
 1760              		.loc 1 408 6 is_stmt 0 view .LVU536
 1761 0160 24B3     		cbz	r4, .L160
 408:src/display.c ****   else	set_dig(base, ch);
 1762              		.loc 1 408 12 is_stmt 1 view .LVU537
 1763              	.LVL182:
 408:src/display.c ****   else	set_dig(base, ch);
 1764              		.loc 1 408 19 is_stmt 0 view .LVU538
 1765 0162 7523     		movs	r3, #117
 1766 0164 2370     		strb	r3, [r4]
 1767 0166 5DE7     		b	.L140
 1768              	.LVL183:
 1769              	.L146:
 408:src/display.c ****   else	set_dig(base, ch);
 1770              		.loc 1 408 19 view .LVU539
 1771              	.LBE203:
 1772              	.LBE202:
1642:src/display.c **** 	  dn_minus(&x, &x);
 1773              		.loc 1 1642 6 is_stmt 1 view .LVU540
 1774              	.LBB205:
 1775              	.LBI205:
 296:src/display.c **** {
 1776              		.loc 1 296 13 view .LVU541
 1777              	.LBB206:
 298:src/display.c ****   set_dot(MANT_SIGN);
 1778              		.loc 1 298 3 view .LVU542
 298:src/display.c ****   set_dot(MANT_SIGN);
 1779              		.loc 1 298 25 is_stmt 0 view .LVU543
 1780 0168 164B     		ldr	r3, .L171+12
 1781 016a 2D22     		movs	r2, #45
 299:src/display.c **** }
 1782              		.loc 1 299 3 view .LVU544
 1783 016c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 1784              		.loc 1 298 25 view .LVU545
 1785 016e 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 1786              		.loc 1 299 3 is_stmt 1 view .LVU546
 1787 0170 FFF7FEFF 		bl	set_dot
 1788              	.LVL184:
 300:src/display.c **** 
 1789              		.loc 1 300 1 is_stmt 0 view .LVU547
 1790 0174 E1E7     		b	.L147
 1791              	.LVL185:
 1792              	.L155:
ARM GAS  /tmp/cc1e4Gjl.s 			page 70


 300:src/display.c **** 
 1793              		.loc 1 300 1 view .LVU548
 1794              	.LBE206:
 1795              	.LBE205:
 1796              	.LBB207:
 1797              	.LBB198:
 409:src/display.c ****   return res;
 1798              		.loc 1 409 8 is_stmt 1 view .LVU549
 1799 0176 0398     		ldr	r0, [sp, #12]
 1800              	.LVL186:
 409:src/display.c ****   return res;
 1801              		.loc 1 409 8 is_stmt 0 view .LVU550
 1802 0178 2221     		movs	r1, #34
 1803 017a FFF7FEFF 		bl	set_dig
 1804              	.LVL187:
 410:src/display.c **** }
 1805              		.loc 1 410 3 is_stmt 1 view .LVU551
 410:src/display.c **** }
 1806              		.loc 1 410 3 is_stmt 0 view .LVU552
 1807              	.LBE198:
 1808              	.LBE207:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1809              		.loc 1 1679 2 is_stmt 1 view .LVU553
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1810              		.loc 1 1679 6 is_stmt 0 view .LVU554
 1811 017e 0E49     		ldr	r1, .L171
 1812 0180 19A8     		add	r0, sp, #100
 1813 0182 FFF7FEFF 		bl	dn_lt
 1814              	.LVL188:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1815              		.loc 1 1679 5 view .LVU555
 1816 0186 0028     		cmp	r0, #0
 1817 0188 DDD1     		bne	.L158
 1818              	.LVL189:
 1819              	.L144:
 1820              	.LBB208:
 1821              	.LBB188:
 409:src/display.c ****   return res;
 1822              		.loc 1 409 8 is_stmt 1 view .LVU556
 1823 018a 6F21     		movs	r1, #111
 1824 018c 7A20     		movs	r0, #122
 1825 018e FFF7FEFF 		bl	set_dig
 1826              	.LVL190:
 1827              	.LBE188:
 1828              	.LBE208:
1632:src/display.c **** 	}
 1829              		.loc 1 1632 4 view .LVU557
 1830 0192 47E7     		b	.L140
 1831              	.LVL191:
 1832              	.L153:
 1833              	.LBB209:
 1834              	.LBB194:
 409:src/display.c ****   return res;
 1835              		.loc 1 409 8 view .LVU558
 1836 0194 2721     		movs	r1, #39
 1837 0196 0398     		ldr	r0, [sp, #12]
 1838              	.LVL192:
ARM GAS  /tmp/cc1e4Gjl.s 			page 71


 409:src/display.c ****   return res;
 1839              		.loc 1 409 8 is_stmt 0 view .LVU559
 1840 0198 FFF7FEFF 		bl	set_dig
 1841              	.LVL193:
 409:src/display.c ****   return res;
 1842              		.loc 1 409 8 view .LVU560
 1843 019c 2146     		mov	r1, r4
 1844 019e 9EE7     		b	.L154
 1845              	.LVL194:
 1846              	.L151:
 409:src/display.c ****   return res;
 1847              		.loc 1 409 8 view .LVU561
 1848              	.LBE194:
 1849              	.LBE209:
 1850              	.LBB210:
 1851              	.LBB191:
 409:src/display.c ****   return res;
 1852              		.loc 1 409 8 is_stmt 1 view .LVU562
 1853 01a0 4021     		movs	r1, #64
 1854 01a2 0398     		ldr	r0, [sp, #12]
 1855              	.LVL195:
 409:src/display.c ****   return res;
 1856              		.loc 1 409 8 is_stmt 0 view .LVU563
 1857 01a4 FFF7FEFF 		bl	set_dig
 1858              	.LVL196:
 409:src/display.c ****   return res;
 1859              		.loc 1 409 8 view .LVU564
 1860 01a8 2146     		mov	r1, r4
 1861 01aa 86E7     		b	.L152
 1862              	.LVL197:
 1863              	.L160:
 409:src/display.c ****   return res;
 1864              		.loc 1 409 8 view .LVU565
 1865              	.LBE191:
 1866              	.LBE210:
 1867              	.LBB211:
 1868              	.LBB204:
 409:src/display.c ****   return res;
 1869              		.loc 1 409 8 is_stmt 1 view .LVU566
 1870 01ac 7521     		movs	r1, #117
 1871 01ae 7A20     		movs	r0, #122
 1872 01b0 FFF7FEFF 		bl	set_dig
 1873              	.LVL198:
 1874 01b4 36E7     		b	.L140
 1875              	.L172:
 1876 01b6 00BF     		.align	2
 1877              	.L171:
 1878 01b8 00000000 		.word	const_9000
 1879 01bc 00000000 		.word	.LANCHOR1
 1880 01c0 00000000 		.word	const_hms_threshold
 1881 01c4 00000000 		.word	LastDisplayedNumber
 1882              	.LBE204:
 1883              	.LBE211:
 1884              		.cfi_endproc
 1885              	.LFE22:
 1887              		.section	.text.set_x_fract,"ax",%progbits
 1888              		.align	1
ARM GAS  /tmp/cc1e4Gjl.s 			page 72


 1889              		.p2align 2,,3
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	set_x_fract:
 1896              	.LVL199:
 1897              	.LFB23:
1687:src/display.c **** 
1688:src/display.c **** 
1689:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
 1898              		.loc 1 1689 63 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 216
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
1690:src/display.c **** 	decNumber x, w, n, d, t;
 1902              		.loc 1 1690 2 view .LVU568
1691:src/display.c **** 	char buf[32], *p = buf;
 1903              		.loc 1 1691 2 view .LVU569
1692:src/display.c **** 	int j;
 1904              		.loc 1 1692 2 view .LVU570
1693:src/display.c **** 
1694:src/display.c **** 	if (check_special_dn(rgx, res))
 1905              		.loc 1 1694 2 view .LVU571
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1906              		.loc 1 1689 63 is_stmt 0 view .LVU572
 1907 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1908              		.cfi_def_cfa_offset 20
 1909              		.cfi_offset 4, -20
 1910              		.cfi_offset 5, -16
 1911              		.cfi_offset 6, -12
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 0646     		mov	r6, r0
 1915 0004 B7B0     		sub	sp, sp, #220
 1916              		.cfi_def_cfa_offset 240
 1917              		.loc 1 1694 6 view .LVU573
 1918 0006 0830     		adds	r0, r0, #8
 1919              	.LVL200:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1920              		.loc 1 1689 63 view .LVU574
 1921 0008 0C46     		mov	r4, r1
 1922              		.loc 1 1694 6 view .LVU575
 1923 000a FFF7FEFF 		bl	check_special_dn.isra.0
 1924              	.LVL201:
 1925              		.loc 1 1694 5 view .LVU576
 1926 000e 18B1     		cbz	r0, .L204
 1927              	.LVL202:
 1928              	.L193:
1695:src/display.c **** 	  return 1;
 1929              		.loc 1 1695 11 view .LVU577
 1930 0010 0125     		movs	r5, #1
 1931              	.L173:
1696:src/display.c **** 	dn_abs(&x, rgx);
1697:src/display.c **** 	if (dn_ge(&x, &const_100000))
1698:src/display.c **** 	  return 0;
1699:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
ARM GAS  /tmp/cc1e4Gjl.s 			page 73


1700:src/display.c **** 	  return 0;
1701:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1702:src/display.c **** 	  if (res != NULL)
1703:src/display.c **** 	    *res++ += '-';
1704:src/display.c **** 	  else
1705:src/display.c **** 	    SET_MANT_SIGN;
1706:src/display.c **** 	}
1707:src/display.c **** 	decNumberFrac(&w, &x);
1708:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1709:src/display.c **** 
1710:src/display.c **** 	dn_divide(&t, &n, &d);
1711:src/display.c **** 	dn_compare(&t, &t, &w);
1712:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1713:src/display.c **** 
1714:src/display.c **** 	if (dn_eq(&n, &d)) {
1715:src/display.c **** 	  dn_inc(&w);
1716:src/display.c **** 	  decNumberZero(&n);
1717:src/display.c **** 	}
1718:src/display.c **** 
1719:src/display.c **** 	if (!UState.improperfrac) {
1720:src/display.c **** 	  if (!dn_eq0(&w)) {
1721:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1722:src/display.c **** 	    *p++ = ' ';
1723:src/display.c **** 	  }
1724:src/display.c **** 	} else {
1725:src/display.c **** 	  dn_multiply(&x, &w, &d);
1726:src/display.c **** 	  dn_add(&n, &n, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1729:src/display.c **** 	*p++ = '/';
1730:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1731:src/display.c **** 	*p = '\0';
1732:src/display.c **** 	if ((p - 12) > buf) {
1733:src/display.c **** 	  p -= 12;
1734:src/display.c **** 	  *p = '<';
1735:src/display.c **** 	} else	p = buf;
1736:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1737:src/display.c **** 	  res = set_dig_s(j, *p, res);
1738:src/display.c **** 	  j += SEGS_PER_DIGIT;
1739:src/display.c **** 	}
1740:src/display.c **** 
1741:src/display.c **** 	if (dn_eq0(&t))
1742:src/display.c **** 	  p = (char *)S7_fract_EQ;
1743:src/display.c **** 	else if (decNumberIsNegative(&t))
1744:src/display.c **** 	  p = (char *)S7_fract_LT;
1745:src/display.c **** 	else
1746:src/display.c **** 	  p = (char *)S7_fract_GT;
1747:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1748:src/display.c **** 	  res = set_dig_s(j, *p, res);
1749:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1750:src/display.c **** 	}
1751:src/display.c **** 	return 1;
1752:src/display.c ****       }
 1932              		.loc 1 1752 7 view .LVU578
 1933 0012 2846     		mov	r0, r5
 1934 0014 37B0     		add	sp, sp, #220
 1935              		.cfi_remember_state
ARM GAS  /tmp/cc1e4Gjl.s 			page 74


 1936              		.cfi_def_cfa_offset 20
 1937              		@ sp needed
 1938 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 1939              	.LVL203:
 1940              	.L204:
 1941              		.cfi_restore_state
 1942              	.LBB220:
 1943              	.LBI220:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 1944              		.loc 1 1689 18 is_stmt 1 view .LVU579
 1945              	.LBB221:
1696:src/display.c **** 	dn_abs(&x, rgx);
 1946              		.loc 1 1696 2 view .LVU580
 1947 0018 3146     		mov	r1, r6
 1948 001a 0546     		mov	r5, r0
 1949 001c 09A8     		add	r0, sp, #36
 1950 001e FFF7FEFF 		bl	dn_abs
 1951              	.LVL204:
1697:src/display.c **** 	  return 0;
 1952              		.loc 1 1697 2 view .LVU581
1697:src/display.c **** 	  return 0;
 1953              		.loc 1 1697 6 is_stmt 0 view .LVU582
 1954 0022 5D49     		ldr	r1, .L209
 1955 0024 09A8     		add	r0, sp, #36
 1956 0026 FFF7FEFF 		bl	dn_lt
 1957              	.LVL205:
1697:src/display.c **** 	  return 0;
 1958              		.loc 1 1697 5 view .LVU583
 1959 002a 0028     		cmp	r0, #0
 1960 002c F1D0     		beq	.L173
1699:src/display.c **** 	  return 0;
 1961              		.loc 1 1699 2 is_stmt 1 view .LVU584
1699:src/display.c **** 	  return 0;
 1962              		.loc 1 1699 6 is_stmt 0 view .LVU585
 1963 002e 5B49     		ldr	r1, .L209+4
 1964 0030 09A8     		add	r0, sp, #36
 1965 0032 FFF7FEFF 		bl	dn_lt
 1966              	.LVL206:
1699:src/display.c **** 	  return 0;
 1967              		.loc 1 1699 5 view .LVU586
 1968 0036 0746     		mov	r7, r0
 1969 0038 0028     		cmp	r0, #0
 1970 003a EAD1     		bne	.L173
1701:src/display.c **** 	  if (res != NULL)
 1971              		.loc 1 1701 2 is_stmt 1 view .LVU587
1701:src/display.c **** 	  if (res != NULL)
 1972              		.loc 1 1701 5 is_stmt 0 view .LVU588
 1973 003c 96F90830 		ldrsb	r3, [r6, #8]
 1974 0040 002B     		cmp	r3, #0
 1975 0042 C0F28680 		blt	.L205
 1976              	.LVL207:
 1977              	.L178:
1707:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 1978              		.loc 1 1707 2 is_stmt 1 view .LVU589
 1979 0046 09A9     		add	r1, sp, #36
 1980 0048 12A8     		add	r0, sp, #72
 1981 004a FFF7FEFF 		bl	decNumberFrac
ARM GAS  /tmp/cc1e4Gjl.s 			page 75


 1982              	.LVL208:
1708:src/display.c **** 
 1983              		.loc 1 1708 2 view .LVU590
 1984 004e 12AA     		add	r2, sp, #72
 1985 0050 24A9     		add	r1, sp, #144
 1986 0052 1BA8     		add	r0, sp, #108
 1987 0054 FFF7FEFF 		bl	decNumber2Fraction
 1988              	.LVL209:
1710:src/display.c **** 	dn_compare(&t, &t, &w);
 1989              		.loc 1 1710 2 view .LVU591
 1990 0058 24AA     		add	r2, sp, #144
 1991 005a 1BA9     		add	r1, sp, #108
 1992 005c 2DA8     		add	r0, sp, #180
 1993 005e FFF7FEFF 		bl	dn_divide
 1994              	.LVL210:
1711:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 1995              		.loc 1 1711 2 view .LVU592
 1996 0062 2DA9     		add	r1, sp, #180
 1997 0064 12AA     		add	r2, sp, #72
 1998 0066 0846     		mov	r0, r1
 1999 0068 FFF7FEFF 		bl	dn_compare
 2000              	.LVL211:
1712:src/display.c **** 
 2001              		.loc 1 1712 2 view .LVU593
 2002 006c 09A9     		add	r1, sp, #36
 2003 006e 12A8     		add	r0, sp, #72
 2004 0070 FFF7FEFF 		bl	decNumberTrunc
 2005              	.LVL212:
1714:src/display.c **** 	  dn_inc(&w);
 2006              		.loc 1 1714 2 view .LVU594
1714:src/display.c **** 	  dn_inc(&w);
 2007              		.loc 1 1714 6 is_stmt 0 view .LVU595
 2008 0074 24A9     		add	r1, sp, #144
 2009 0076 1BA8     		add	r0, sp, #108
 2010 0078 FFF7FEFF 		bl	dn_eq
 2011              	.LVL213:
1714:src/display.c **** 	  dn_inc(&w);
 2012              		.loc 1 1714 5 view .LVU596
 2013 007c 0028     		cmp	r0, #0
 2014 007e 70D1     		bne	.L206
 2015              	.L180:
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2016              		.loc 1 1719 2 is_stmt 1 view .LVU597
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2017              		.loc 1 1719 6 is_stmt 0 view .LVU598
 2018 0080 474B     		ldr	r3, .L209+8
 2019 0082 1B68     		ldr	r3, [r3]
 2020 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2021              		.loc 1 1719 5 view .LVU599
 2022 0088 DB06     		lsls	r3, r3, #27
 2023 008a 55D4     		bmi	.L181
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2024              		.loc 1 1720 4 is_stmt 1 view .LVU600
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2025              		.loc 1 1720 9 is_stmt 0 view .LVU601
 2026 008c 12A8     		add	r0, sp, #72
ARM GAS  /tmp/cc1e4Gjl.s 			page 76


 2027 008e FFF7FEFF 		bl	dn_eq0
 2028              	.LVL214:
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2029              		.loc 1 1720 7 view .LVU602
 2030 0092 0028     		cmp	r0, #0
 2031 0094 6CD0     		beq	.L207
1691:src/display.c **** 	int j;
 2032              		.loc 1 1691 17 view .LVU603
 2033 0096 01AE     		add	r6, sp, #4
 2034              	.LVL215:
1691:src/display.c **** 	int j;
 2035              		.loc 1 1691 17 view .LVU604
 2036 0098 3546     		mov	r5, r6
 2037              	.L182:
 2038              	.LVL216:
1728:src/display.c **** 	*p++ = '/';
 2039              		.loc 1 1728 2 is_stmt 1 view .LVU605
1728:src/display.c **** 	*p++ = '/';
 2040              		.loc 1 1728 17 is_stmt 0 view .LVU606
 2041 009a 1BA8     		add	r0, sp, #108
 2042 009c FFF7FEFF 		bl	dn_to_int
 2043              	.LVL217:
 2044 00a0 0146     		mov	r1, r0
1728:src/display.c **** 	*p++ = '/';
 2045              		.loc 1 1728 6 view .LVU607
 2046 00a2 2846     		mov	r0, r5
 2047 00a4 FFF7FEFF 		bl	num_arg
 2048              	.LVL218:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2049              		.loc 1 1729 2 is_stmt 1 view .LVU608
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2050              		.loc 1 1729 4 is_stmt 0 view .LVU609
 2051 00a8 0546     		mov	r5, r0
 2052              	.LVL219:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2053              		.loc 1 1729 7 view .LVU610
 2054 00aa 2F23     		movs	r3, #47
 2055 00ac 05F8013B 		strb	r3, [r5], #1
 2056              	.LVL220:
1730:src/display.c **** 	*p = '\0';
 2057              		.loc 1 1730 2 is_stmt 1 view .LVU611
1730:src/display.c **** 	*p = '\0';
 2058              		.loc 1 1730 17 is_stmt 0 view .LVU612
 2059 00b0 24A8     		add	r0, sp, #144
 2060 00b2 FFF7FEFF 		bl	dn_to_int
 2061              	.LVL221:
 2062 00b6 0146     		mov	r1, r0
1730:src/display.c **** 	*p = '\0';
 2063              		.loc 1 1730 6 view .LVU613
 2064 00b8 2846     		mov	r0, r5
 2065 00ba FFF7FEFF 		bl	num_arg
 2066              	.LVL222:
1731:src/display.c **** 	if ((p - 12) > buf) {
 2067              		.loc 1 1731 2 is_stmt 1 view .LVU614
1731:src/display.c **** 	if ((p - 12) > buf) {
 2068              		.loc 1 1731 5 is_stmt 0 view .LVU615
 2069 00be 0546     		mov	r5, r0
ARM GAS  /tmp/cc1e4Gjl.s 			page 77


 2070 00c0 0023     		movs	r3, #0
 2071 00c2 05F80C39 		strb	r3, [r5], #-12
1732:src/display.c **** 	  p -= 12;
 2072              		.loc 1 1732 2 is_stmt 1 view .LVU616
1732:src/display.c **** 	  p -= 12;
 2073              		.loc 1 1732 5 is_stmt 0 view .LVU617
 2074 00c6 B542     		cmp	r5, r6
 2075 00c8 32D8     		bhi	.L183
 2076 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2077              	.LVL223:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2078              		.loc 1 1736 12 is_stmt 1 view .LVU618
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2079              		.loc 1 1736 2 is_stmt 0 view .LVU619
 2080 00ce 51B1     		cbz	r1, .L185
1735:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2081              		.loc 1 1735 11 view .LVU620
 2082 00d0 3546     		mov	r5, r6
 2083              	.LVL224:
 2084              	.L188:
1737:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2085              		.loc 1 1737 4 is_stmt 1 view .LVU621
 2086              	.LBB222:
 2087              	.LBI222:
 407:src/display.c ****   if (res) *res++ = ch;
 2088              		.loc 1 407 14 view .LVU622
 2089              	.LBB223:
 408:src/display.c ****   else	set_dig(base, ch);
 2090              		.loc 1 408 3 view .LVU623
 408:src/display.c ****   else	set_dig(base, ch);
 2091              		.loc 1 408 12 view .LVU624
 408:src/display.c ****   else	set_dig(base, ch);
 2092              		.loc 1 408 16 is_stmt 0 view .LVU625
 2093 00d2 2346     		mov	r3, r4
 2094              	.LVL225:
 408:src/display.c ****   else	set_dig(base, ch);
 2095              		.loc 1 408 6 view .LVU626
 2096 00d4 34B3     		cbz	r4, .L186
 2097              	.LVL226:
 408:src/display.c ****   else	set_dig(base, ch);
 2098              		.loc 1 408 19 view .LVU627
 2099 00d6 03F8011B 		strb	r1, [r3], #1
 2100              	.LVL227:
 408:src/display.c ****   else	set_dig(base, ch);
 2101              		.loc 1 408 16 view .LVU628
 2102 00da 1C46     		mov	r4, r3
 2103              	.LVL228:
 2104              	.L187:
 410:src/display.c **** }
 2105              		.loc 1 410 3 is_stmt 1 view .LVU629
 410:src/display.c **** }
 2106              		.loc 1 410 3 is_stmt 0 view .LVU630
 2107              	.LBE223:
 2108              	.LBE222:
1738:src/display.c **** 	}
 2109              		.loc 1 1738 4 is_stmt 1 view .LVU631
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
ARM GAS  /tmp/cc1e4Gjl.s 			page 78


 2110              		.loc 1 1736 12 is_stmt 0 view .LVU632
 2111 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2112              	.LVL229:
1738:src/display.c **** 	}
 2113              		.loc 1 1738 6 view .LVU633
 2114 00e0 0937     		adds	r7, r7, #9
 2115              	.LVL230:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2116              		.loc 1 1736 24 is_stmt 1 view .LVU634
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2117              		.loc 1 1736 12 view .LVU635
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2118              		.loc 1 1736 2 is_stmt 0 view .LVU636
 2119 00e2 0029     		cmp	r1, #0
 2120 00e4 F5D1     		bne	.L188
 2121              	.LVL231:
 2122              	.L185:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2123              		.loc 1 1741 2 is_stmt 1 view .LVU637
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2124              		.loc 1 1741 6 is_stmt 0 view .LVU638
 2125 00e6 2DA8     		add	r0, sp, #180
 2126 00e8 FFF7FEFF 		bl	dn_eq0
 2127              	.LVL232:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2128              		.loc 1 1741 5 view .LVU639
 2129 00ec F0B9     		cbnz	r0, .L196
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2130              		.loc 1 1743 7 is_stmt 1 view .LVU640
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2131              		.loc 1 1743 10 is_stmt 0 view .LVU641
 2132 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1746:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2133              		.loc 1 1746 6 view .LVU642
 2134 00f2 2C4D     		ldr	r5, .L209+12
 2135 00f4 2C4B     		ldr	r3, .L209+16
 2136 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2137 00fa 38BF     		it	cc
 2138 00fc 1D46     		movcc	r5, r3
 2139              	.L189:
 2140              	.LVL233:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2141              		.loc 1 1747 26 is_stmt 1 view .LVU643
 2142              	.LBB226:
 2143              	.LBB224:
 408:src/display.c ****   else	set_dig(base, ch);
 2144              		.loc 1 408 16 is_stmt 0 view .LVU644
 2145 00fe 6C26     		movs	r6, #108
 2146 0100 2021     		movs	r1, #32
 2147 0102 08E0     		b	.L192
 2148              	.LVL234:
 2149              	.L208:
 408:src/display.c ****   else	set_dig(base, ch);
 2150              		.loc 1 408 16 view .LVU645
 2151              	.LBE224:
 2152              	.LBE226:
 2153              	.LBB227:
ARM GAS  /tmp/cc1e4Gjl.s 			page 79


 2154              	.LBB228:
 408:src/display.c ****   else	set_dig(base, ch);
 2155              		.loc 1 408 19 view .LVU646
 2156 0104 03F8011B 		strb	r1, [r3], #1
 2157              	.LVL235:
 408:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 408 16 view .LVU647
 2159 0108 1C46     		mov	r4, r3
 2160              	.LVL236:
 2161              	.L191:
 410:src/display.c **** }
 2162              		.loc 1 410 3 is_stmt 1 view .LVU648
 410:src/display.c **** }
 2163              		.loc 1 410 3 is_stmt 0 view .LVU649
 2164              	.LBE228:
 2165              	.LBE227:
1749:src/display.c **** 	}
 2166              		.loc 1 1749 4 is_stmt 1 view .LVU650
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2167              		.loc 1 1747 26 is_stmt 0 view .LVU651
 2168 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2169              	.LVL237:
1749:src/display.c **** 	}
 2170              		.loc 1 1749 6 view .LVU652
 2171 010e 0736     		adds	r6, r6, #7
 2172              	.LVL238:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2173              		.loc 1 1747 38 is_stmt 1 view .LVU653
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2174              		.loc 1 1747 26 view .LVU654
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2175              		.loc 1 1747 2 is_stmt 0 view .LVU655
 2176 0110 0029     		cmp	r1, #0
 2177 0112 3FF47DAF 		beq	.L193
 2178              	.LVL239:
 2179              	.L192:
1748:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2180              		.loc 1 1748 4 is_stmt 1 view .LVU656
 2181              	.LBB230:
 2182              	.LBI227:
 407:src/display.c ****   if (res) *res++ = ch;
 2183              		.loc 1 407 14 view .LVU657
 2184              	.LBB229:
 408:src/display.c ****   else	set_dig(base, ch);
 2185              		.loc 1 408 3 view .LVU658
 408:src/display.c ****   else	set_dig(base, ch);
 2186              		.loc 1 408 12 view .LVU659
 408:src/display.c ****   else	set_dig(base, ch);
 2187              		.loc 1 408 16 is_stmt 0 view .LVU660
 2188 0116 2346     		mov	r3, r4
 2189              	.LVL240:
 408:src/display.c ****   else	set_dig(base, ch);
 2190              		.loc 1 408 6 view .LVU661
 2191 0118 002C     		cmp	r4, #0
 2192 011a F3D1     		bne	.L208
 2193              	.LVL241:
 409:src/display.c ****   return res;
ARM GAS  /tmp/cc1e4Gjl.s 			page 80


 2194              		.loc 1 409 8 is_stmt 1 view .LVU662
 2195 011c 3046     		mov	r0, r6
 2196 011e FFF7FEFF 		bl	set_dig
 2197              	.LVL242:
 409:src/display.c ****   return res;
 2198              		.loc 1 409 8 is_stmt 0 view .LVU663
 2199 0122 F2E7     		b	.L191
 2200              	.LVL243:
 2201              	.L186:
 409:src/display.c ****   return res;
 2202              		.loc 1 409 8 view .LVU664
 2203              	.LBE229:
 2204              	.LBE230:
 2205              	.LBB231:
 2206              	.LBB225:
 409:src/display.c ****   return res;
 2207              		.loc 1 409 8 is_stmt 1 view .LVU665
 2208 0124 3846     		mov	r0, r7
 2209 0126 FFF7FEFF 		bl	set_dig
 2210              	.LVL244:
 409:src/display.c ****   return res;
 2211              		.loc 1 409 8 is_stmt 0 view .LVU666
 2212 012a D7E7     		b	.L187
 2213              	.LVL245:
 2214              	.L196:
 409:src/display.c ****   return res;
 2215              		.loc 1 409 8 view .LVU667
 2216              	.LBE225:
 2217              	.LBE231:
1742:src/display.c **** 	else if (decNumberIsNegative(&t))
 2218              		.loc 1 1742 6 view .LVU668
 2219 012c 1F4D     		ldr	r5, .L209+20
 2220 012e E6E7     		b	.L189
 2221              	.LVL246:
 2222              	.L183:
1733:src/display.c **** 	  *p = '<';
 2223              		.loc 1 1733 4 is_stmt 1 view .LVU669
1734:src/display.c **** 	} else	p = buf;
 2224              		.loc 1 1734 4 view .LVU670
1734:src/display.c **** 	} else	p = buf;
 2225              		.loc 1 1734 7 is_stmt 0 view .LVU671
 2226 0130 3C21     		movs	r1, #60
 2227 0132 00F80C1C 		strb	r1, [r0, #-12]
 2228              	.LVL247:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2229              		.loc 1 1736 12 is_stmt 1 view .LVU672
 2230 0136 CCE7     		b	.L188
 2231              	.LVL248:
 2232              	.L181:
1725:src/display.c **** 	  dn_add(&n, &n, &x);
 2233              		.loc 1 1725 4 view .LVU673
 2234 0138 12A9     		add	r1, sp, #72
 2235 013a 24AA     		add	r2, sp, #144
 2236 013c 09A8     		add	r0, sp, #36
 2237 013e FFF7FEFF 		bl	dn_multiply
 2238              	.LVL249:
1726:src/display.c **** 	}
ARM GAS  /tmp/cc1e4Gjl.s 			page 81


 2239              		.loc 1 1726 4 view .LVU674
 2240 0142 1BA9     		add	r1, sp, #108
 2241 0144 09AA     		add	r2, sp, #36
 2242 0146 0846     		mov	r0, r1
1691:src/display.c **** 	int j;
 2243              		.loc 1 1691 17 is_stmt 0 view .LVU675
 2244 0148 01AE     		add	r6, sp, #4
 2245              	.LVL250:
1726:src/display.c **** 	}
 2246              		.loc 1 1726 4 view .LVU676
 2247 014a FFF7FEFF 		bl	dn_add
 2248              	.LVL251:
1691:src/display.c **** 	int j;
 2249              		.loc 1 1691 17 view .LVU677
 2250 014e 3546     		mov	r5, r6
 2251 0150 A3E7     		b	.L182
 2252              	.LVL252:
 2253              	.L205:
1702:src/display.c **** 	    *res++ += '-';
 2254              		.loc 1 1702 4 is_stmt 1 view .LVU678
1702:src/display.c **** 	    *res++ += '-';
 2255              		.loc 1 1702 7 is_stmt 0 view .LVU679
 2256 0152 D4B1     		cbz	r4, .L179
1703:src/display.c **** 	  else
 2257              		.loc 1 1703 6 is_stmt 1 view .LVU680
1703:src/display.c **** 	  else
 2258              		.loc 1 1703 10 is_stmt 0 view .LVU681
 2259 0154 2346     		mov	r3, r4
 2260              	.LVL253:
1703:src/display.c **** 	  else
 2261              		.loc 1 1703 13 view .LVU682
 2262 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2263              	.LVL254:
1703:src/display.c **** 	  else
 2264              		.loc 1 1703 13 view .LVU683
 2265 015a 2D32     		adds	r2, r2, #45
 2266 015c 2270     		strb	r2, [r4]
1703:src/display.c **** 	  else
 2267              		.loc 1 1703 10 view .LVU684
 2268 015e 1C46     		mov	r4, r3
 2269              	.LVL255:
1703:src/display.c **** 	  else
 2270              		.loc 1 1703 10 view .LVU685
 2271 0160 71E7     		b	.L178
 2272              	.LVL256:
 2273              	.L206:
1715:src/display.c **** 	  decNumberZero(&n);
 2274              		.loc 1 1715 4 is_stmt 1 view .LVU686
 2275 0162 12A8     		add	r0, sp, #72
 2276 0164 FFF7FEFF 		bl	dn_inc
 2277              	.LVL257:
1716:src/display.c **** 	}
 2278              		.loc 1 1716 4 view .LVU687
 2279 0168 1BA8     		add	r0, sp, #108
 2280 016a FFF7FEFF 		bl	decNumberZero
 2281              	.LVL258:
 2282 016e 87E7     		b	.L180
ARM GAS  /tmp/cc1e4Gjl.s 			page 82


 2283              	.L207:
1721:src/display.c **** 	    *p++ = ' ';
 2284              		.loc 1 1721 6 view .LVU688
1721:src/display.c **** 	    *p++ = ' ';
 2285              		.loc 1 1721 21 is_stmt 0 view .LVU689
 2286 0170 12A8     		add	r0, sp, #72
 2287 0172 FFF7FEFF 		bl	dn_to_int
 2288              	.LVL259:
1721:src/display.c **** 	    *p++ = ' ';
 2289              		.loc 1 1721 10 view .LVU690
 2290 0176 01AE     		add	r6, sp, #4
 2291              	.LVL260:
1721:src/display.c **** 	    *p++ = ' ';
 2292              		.loc 1 1721 21 view .LVU691
 2293 0178 0146     		mov	r1, r0
1721:src/display.c **** 	    *p++ = ' ';
 2294              		.loc 1 1721 10 view .LVU692
 2295 017a 3046     		mov	r0, r6
 2296 017c FFF7FEFF 		bl	num_arg
 2297              	.LVL261:
1722:src/display.c **** 	  }
 2298              		.loc 1 1722 6 is_stmt 1 view .LVU693
1722:src/display.c **** 	  }
 2299              		.loc 1 1722 8 is_stmt 0 view .LVU694
 2300 0180 0546     		mov	r5, r0
 2301              	.LVL262:
1722:src/display.c **** 	  }
 2302              		.loc 1 1722 11 view .LVU695
 2303 0182 2023     		movs	r3, #32
 2304 0184 05F8013B 		strb	r3, [r5], #1
 2305              	.LVL263:
1722:src/display.c **** 	  }
 2306              		.loc 1 1722 11 view .LVU696
 2307 0188 87E7     		b	.L182
 2308              	.LVL264:
 2309              	.L179:
1705:src/display.c **** 	}
 2310              		.loc 1 1705 6 is_stmt 1 view .LVU697
 2311              	.LBB232:
 2312              	.LBI232:
 296:src/display.c **** {
 2313              		.loc 1 296 13 view .LVU698
 2314              	.LBB233:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2315              		.loc 1 298 3 view .LVU699
 298:src/display.c ****   set_dot(MANT_SIGN);
 2316              		.loc 1 298 25 is_stmt 0 view .LVU700
 2317 018a 094B     		ldr	r3, .L209+24
 2318 018c 2D22     		movs	r2, #45
 299:src/display.c **** }
 2319              		.loc 1 299 3 view .LVU701
 2320 018e 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2321              		.loc 1 298 25 view .LVU702
 2322 0190 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2323              		.loc 1 299 3 is_stmt 1 view .LVU703
ARM GAS  /tmp/cc1e4Gjl.s 			page 83


 2324 0192 FFF7FEFF 		bl	set_dot
 2325              	.LVL265:
 300:src/display.c **** 
 2326              		.loc 1 300 1 is_stmt 0 view .LVU704
 2327 0196 56E7     		b	.L178
 2328              	.L210:
 2329              		.align	2
 2330              	.L209:
 2331 0198 00000000 		.word	const_100000
 2332 019c 00000000 		.word	const_0_0001
 2333 01a0 00000000 		.word	main_ram
 2334 01a4 00000000 		.word	.LANCHOR8
 2335 01a8 00000000 		.word	.LANCHOR10
 2336 01ac 00000000 		.word	.LANCHOR9
 2337 01b0 00000000 		.word	LastDisplayedNumber
 2338              	.LBE233:
 2339              	.LBE232:
 2340              	.LBE221:
 2341              	.LBE220:
 2342              		.cfi_endproc
 2343              	.LFE23:
 2345              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2346              		.align	2
 2347              	.LC2:
 2348 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2348      36376F39 
 2348      44313233 
 2348      34356800 
 2349              		.section	.text.carry_overflow,"ax",%progbits
 2350              		.align	1
 2351              		.p2align 2,,3
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	carry_overflow:
 2358              	.LFB15:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2359              		.loc 1 562 38 is_stmt 1 view -0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/display.c ****       int c;
 2363              		.loc 1 563 7 view .LVU706
 2364              	.LVL266:
 564:src/display.c ****       unsigned int b;
 2365              		.loc 1 564 7 view .LVU707
 565:src/display.c **** 
 2366              		.loc 1 565 7 view .LVU708
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2367              		.loc 1 568 7 view .LVU709
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2368              		.loc 1 562 38 is_stmt 0 view .LVU710
 2369 0000 10B5     		push	{r4, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 4, -8
 2372              		.cfi_offset 14, -4
ARM GAS  /tmp/cc1e4Gjl.s 			page 84


 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2373              		.loc 1 568 21 view .LVU711
 2374 0002 1B4B     		ldr	r3, .L224
 2375 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2376 0006 023B     		subs	r3, r3, #2
 2377 0008 DBB2     		uxtb	r3, r3
 2378 000a 032B     		cmp	r3, #3
 2379 000c 14D8     		bhi	.L212
 2380 000e 194A     		ldr	r2, .L224+4
 2381 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2382              	.LVL267:
 577:src/display.c **** 	SET_EXP_SIGN;
 2383              		.loc 1 577 7 is_stmt 1 view .LVU712
 577:src/display.c **** 	SET_EXP_SIGN;
 2384              		.loc 1 577 18 is_stmt 0 view .LVU713
 2385 0014 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2386              		.loc 1 577 10 view .LVU714
 2387 0018 042B     		cmp	r3, #4
 2388 001a 17D9     		bls	.L221
 2389              	.L214:
 579:src/display.c ****       set_dig(base, c);
 2390              		.loc 1 579 7 is_stmt 1 view .LVU715
 2391              	.LVL268:
 580:src/display.c **** 
 2392              		.loc 1 580 7 view .LVU716
 579:src/display.c ****       set_dig(base, c);
 2393              		.loc 1 579 28 is_stmt 0 view .LVU717
 2394 001c 164B     		ldr	r3, .L224+8
 2395 001e 1C44     		add	r4, r4, r3
 2396              	.LVL269:
 580:src/display.c **** 
 2397              		.loc 1 580 7 view .LVU718
 2398 0020 6C20     		movs	r0, #108
 2399 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2400 0026 FFF7FEFF 		bl	set_dig
 2401              	.LVL270:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2402              		.loc 1 583 7 is_stmt 1 view .LVU719
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2403              		.loc 1 583 11 is_stmt 0 view .LVU720
 2404 002a FFF7FEFF 		bl	get_carry
 2405              	.LVL271:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2406              		.loc 1 583 10 view .LVU721
 2407 002e D0B9     		cbnz	r0, .L222
 2408              	.L215:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2409              		.loc 1 585 7 is_stmt 1 view .LVU722
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2410              		.loc 1 585 11 is_stmt 0 view .LVU723
 2411 0030 FFF7FEFF 		bl	get_overflow
 2412              	.LVL272:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2413              		.loc 1 585 10 view .LVU724
 2414 0034 88B9     		cbnz	r0, .L223
 587:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 85


 2415              		.loc 1 587 5 view .LVU725
 2416 0036 10BD     		pop	{r4, pc}
 2417              	.LVL273:
 2418              	.L212:
 573:src/display.c ****       }
 2419              		.loc 1 573 16 is_stmt 1 view .LVU726
 573:src/display.c ****       }
 2420              		.loc 1 573 26 is_stmt 0 view .LVU727
 2421 0038 104B     		ldr	r3, .L224+12
 2422 003a 1B68     		ldr	r3, [r3]
 2423 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2424 0040 2409     		lsrs	r4, r4, #4
 573:src/display.c ****       }
 2425              		.loc 1 573 35 view .LVU728
 2426 0042 0134     		adds	r4, r4, #1
 2427              	.LVL274:
 573:src/display.c ****       }
 2428              		.loc 1 573 39 is_stmt 1 view .LVU729
 577:src/display.c **** 	SET_EXP_SIGN;
 2429              		.loc 1 577 7 view .LVU730
 577:src/display.c **** 	SET_EXP_SIGN;
 2430              		.loc 1 577 18 is_stmt 0 view .LVU731
 2431 0044 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2432              		.loc 1 577 10 view .LVU732
 2433 0048 042B     		cmp	r3, #4
 2434 004a E7D8     		bhi	.L214
 2435              	.L221:
 578:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2436              		.loc 1 578 2 is_stmt 1 view .LVU733
 2437              	.LBB240:
 2438              	.LBI240:
 308:src/display.c **** {
 2439              		.loc 1 308 13 view .LVU734
 2440              	.LBB241:
 310:src/display.c ****   set_dot(EXP_SIGN);
 2441              		.loc 1 310 3 view .LVU735
 310:src/display.c ****   set_dot(EXP_SIGN);
 2442              		.loc 1 310 27 is_stmt 0 view .LVU736
 2443 004c 0C4B     		ldr	r3, .L224+16
 2444 004e 2D22     		movs	r2, #45
 311:src/display.c **** }
 2445              		.loc 1 311 3 view .LVU737
 2446 0050 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 2447              		.loc 1 310 27 view .LVU738
 2448 0052 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 2449              		.loc 1 311 3 is_stmt 1 view .LVU739
 2450 0054 FFF7FEFF 		bl	set_dot
 2451              	.LVL275:
 312:src/display.c **** 
 2452              		.loc 1 312 1 is_stmt 0 view .LVU740
 2453 0058 E0E7     		b	.L214
 2454              	.LVL276:
 2455              	.L223:
 312:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 86


 2456              		.loc 1 312 1 view .LVU741
 2457              	.LBE241:
 2458              	.LBE240:
 2459              	.LBB242:
 2460              	.LBI242:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2461              		.loc 1 562 17 is_stmt 1 view .LVU742
 2462              	.LBB243:
 586:src/display.c ****     }
 2463              		.loc 1 586 2 view .LVU743
 2464              	.LBE243:
 2465              	.LBE242:
 587:src/display.c **** 
 2466              		.loc 1 587 5 is_stmt 0 view .LVU744
 2467 005a BDE81040 		pop	{r4, lr}
 2468              		.cfi_remember_state
 2469              		.cfi_restore 14
 2470              		.cfi_restore 4
 2471              		.cfi_def_cfa_offset 0
 2472              	.LVL277:
 2473              	.LBB245:
 2474              	.LBB244:
 586:src/display.c ****     }
 2475              		.loc 1 586 2 view .LVU745
 2476 005e 6F21     		movs	r1, #111
 2477 0060 7A20     		movs	r0, #122
 2478 0062 FFF7FEBF 		b	set_dig
 2479              	.LVL278:
 2480              	.L222:
 2481              		.cfi_restore_state
 586:src/display.c ****     }
 2482              		.loc 1 586 2 view .LVU746
 2483              	.LBE244:
 2484              	.LBE245:
 584:src/display.c ****       if (get_overflow())
 2485              		.loc 1 584 2 is_stmt 1 view .LVU747
 2486 0066 6321     		movs	r1, #99
 2487 0068 7320     		movs	r0, #115
 2488 006a FFF7FEFF 		bl	set_dig
 2489              	.LVL279:
 2490 006e DFE7     		b	.L215
 2491              	.L225:
 2492              		.align	2
 2493              	.L224:
 2494 0070 00000000 		.word	StateWhileOn
 2495 0074 00000000 		.word	.LANCHOR11
 2496 0078 00000000 		.word	.LC2
 2497 007c 00000000 		.word	main_ram
 2498 0080 00000000 		.word	LastDisplayedExponent
 2499              		.cfi_endproc
 2500              	.LFE15:
 2502              		.global	__aeabi_uldivmod
 2503              		.section	.text.set_int_x,"ax",%progbits
 2504              		.align	1
 2505              		.p2align 2,,3
 2506              		.syntax unified
 2507              		.thumb
ARM GAS  /tmp/cc1e4Gjl.s 			page 87


 2508              		.thumb_func
 2509              		.fpu fpv4-sp-d16
 2511              	set_int_x:
 2512              	.LVL280:
 2513              	.LFB18:
1402:src/display.c **** 	const int ws = word_size();
 2514              		.loc 1 1402 67 view -0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 80
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
1402:src/display.c **** 	const int ws = word_size();
 2518              		.loc 1 1402 67 is_stmt 0 view .LVU749
 2519 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2520              		.cfi_def_cfa_offset 36
 2521              		.cfi_offset 4, -36
 2522              		.cfi_offset 5, -32
 2523              		.cfi_offset 6, -28
 2524              		.cfi_offset 7, -24
 2525              		.cfi_offset 8, -20
 2526              		.cfi_offset 9, -16
 2527              		.cfi_offset 10, -12
 2528              		.cfi_offset 11, -8
 2529              		.cfi_offset 14, -4
 2530 0004 95B0     		sub	sp, sp, #84
 2531              		.cfi_def_cfa_offset 120
1402:src/display.c **** 	const int ws = word_size();
 2532              		.loc 1 1402 67 view .LVU750
 2533 0006 0646     		mov	r6, r0
 2534 0008 0092     		str	r2, [sp]
 2535 000a 0F46     		mov	r7, r1
1403:src/display.c **** 	unsigned int b;
 2536              		.loc 1 1403 2 is_stmt 1 view .LVU751
1403:src/display.c **** 	unsigned int b;
 2537              		.loc 1 1403 17 is_stmt 0 view .LVU752
 2538 000c FFF7FEFF 		bl	word_size
 2539              	.LVL281:
1403:src/display.c **** 	unsigned int b;
 2540              		.loc 1 1403 17 view .LVU753
 2541 0010 B94B     		ldr	r3, .L318
 2542 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2543 0014 023B     		subs	r3, r3, #2
 2544 0016 DBB2     		uxtb	r3, r3
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2545              		.loc 1 1409 6 view .LVU754
 2546 0018 0022     		movs	r2, #0
 2547 001a 032B     		cmp	r3, #3
1403:src/display.c **** 	unsigned int b;
 2548              		.loc 1 1403 17 view .LVU755
 2549 001c 8346     		mov	fp, r0
 2550              	.LVL282:
1404:src/display.c **** 	long long int vs = value;
 2551              		.loc 1 1404 2 is_stmt 1 view .LVU756
1405:src/display.c **** 	unsigned long long int v;
 2552              		.loc 1 1405 2 view .LVU757
1406:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2553              		.loc 1 1406 2 view .LVU758
1407:src/display.c **** 	int i, j, k;
ARM GAS  /tmp/cc1e4Gjl.s 			page 88


 2554              		.loc 1 1407 2 view .LVU759
1408:src/display.c **** 	int sign = 0;
 2555              		.loc 1 1408 2 view .LVU760
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2556              		.loc 1 1409 2 view .LVU761
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2557              		.loc 1 1409 6 is_stmt 0 view .LVU762
 2558 001e 0292     		str	r2, [sp, #8]
1410:src/display.c **** 
 2559              		.loc 1 1410 2 is_stmt 1 view .LVU763
 2560              	.LVL283:
1412:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2561              		.loc 1 1412 2 view .LVU764
 2562 0020 00F24281 		bhi	.L227
 2563 0024 B54A     		ldr	r2, .L318+4
 2564 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 2565              	.LVL284:
1420:src/display.c **** 	  IntMaxWindow = 0;
 2566              		.loc 1 1420 2 view .LVU765
1420:src/display.c **** 	  IntMaxWindow = 0;
 2567              		.loc 1 1420 5 is_stmt 0 view .LVU766
 2568 002a 009B     		ldr	r3, [sp]
 2569 002c 002B     		cmp	r3, #0
 2570 002e 00F04281 		beq	.L309
 2571              	.LVL285:
 2572              	.L229:
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2573              		.loc 1 1425 2 is_stmt 1 view .LVU767
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2574              		.loc 1 1425 24 is_stmt 0 view .LVU768
 2575 0032 6B1E     		subs	r3, r5, #1
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2576              		.loc 1 1425 30 view .LVU769
 2577 0034 47F67574 		movw	r4, #32629
 2578 0038 1C41     		asrs	r4, r4, r3
1425:src/display.c **** 	  v = extract_value(value, &sign);
 2579              		.loc 1 1425 5 view .LVU770
 2580 003a 14F00104 		ands	r4, r4, #1
 2581 003e 40F0F280 		bne	.L310
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2582              		.loc 1 1442 4 is_stmt 1 view .LVU771
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2583              		.loc 1 1442 7 is_stmt 0 view .LVU772
 2584 0042 BBF13F0F 		cmp	fp, #63
 2585 0046 16DC     		bgt	.L240
 2586              	.LBB246:
1443:src/display.c **** 	    vs &= mask;
 2587              		.loc 1 1443 6 is_stmt 1 view .LVU773
1443:src/display.c **** 	    vs &= mask;
 2588              		.loc 1 1443 38 is_stmt 0 view .LVU774
 2589 0048 0121     		movs	r1, #1
 2590 004a ABF1200C 		sub	ip, fp, #32
 2591 004e CBF12000 		rsb	r0, fp, #32
 2592 0052 21FA00F0 		lsr	r0, r1, r0
 2593 0056 01FA0CF3 		lsl	r3, r1, ip
 2594 005a 01FA0BF2 		lsl	r2, r1, fp
 2595 005e 0343     		orrs	r3, r3, r0
ARM GAS  /tmp/cc1e4Gjl.s 			page 89


 2596              	.LVL286:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2597              		.loc 1 1444 6 is_stmt 1 view .LVU775
1443:src/display.c **** 	    vs &= mask;
 2598              		.loc 1 1443 26 is_stmt 0 view .LVU776
 2599 0060 12F1FF30 		adds	r0, r2, #-1
 2600 0064 43F1FF31 		adc	r1, r3, #-1
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2601              		.loc 1 1444 9 view .LVU777
 2602 0068 3040     		ands	r0, r0, r6
 2603 006a 3940     		ands	r1, r1, r7
 2604              	.LVL287:
1445:src/display.c **** 	      vs |= ~mask;
 2605              		.loc 1 1445 9 view .LVU778
 2606 006c 0A2D     		cmp	r5, #10
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2607              		.loc 1 1444 9 view .LVU779
 2608 006e 0646     		mov	r6, r0
 2609              	.LVL288:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2610              		.loc 1 1444 9 view .LVU780
 2611 0070 0F46     		mov	r7, r1
1445:src/display.c **** 	      vs |= ~mask;
 2612              		.loc 1 1445 6 is_stmt 1 view .LVU781
1445:src/display.c **** 	      vs |= ~mask;
 2613              		.loc 1 1445 9 is_stmt 0 view .LVU782
 2614 0072 00F04D81 		beq	.L311
 2615              	.LVL289:
 2616              	.L240:
1445:src/display.c **** 	      vs |= ~mask;
 2617              		.loc 1 1445 9 view .LVU783
 2618              	.LBE246:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2619              		.loc 1 1449 4 is_stmt 1 view .LVU784
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2620              		.loc 1 1449 8 is_stmt 0 view .LVU785
 2621 0076 A24B     		ldr	r3, .L318+8
 2622 0078 1B68     		ldr	r3, [r3]
 2623 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2624              		.loc 1 1449 7 view .LVU786
 2625 007e 9807     		lsls	r0, r3, #30
 2626 0080 46D5     		bpl	.L271
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 2627              		.loc 1 1452 11 is_stmt 1 view .LVU787
 2628              	.LBB247:
1460:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2629              		.loc 1 1460 6 view .LVU788
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2630              		.loc 1 1461 6 view .LVU789
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2631              		.loc 1 1461 25 is_stmt 0 view .LVU790
 2632 0082 6A08     		lsrs	r2, r5, #1
 2633              	.LVL290:
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 2634              		.loc 1 1462 6 is_stmt 1 view .LVU791
1462:src/display.c **** 	    v = (unsigned long long int)vs;
ARM GAS  /tmp/cc1e4Gjl.s 			page 90


 2635              		.loc 1 1462 43 is_stmt 0 view .LVU792
 2636 0084 12F00A0F 		tst	r2, #10
 2637 0088 14BF     		ite	ne
 2638 008a 0123     		movne	r3, #1
 2639 008c 0023     		moveq	r3, #0
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 2640              		.loc 1 1462 70 view .LVU793
 2641 008e 12F00C0F 		tst	r2, #12
 2642 0092 18BF     		it	ne
 2643 0094 43F00203 		orrne	r3, r3, #2
 2644              	.LVL291:
 2645              	.L246:
1463:src/display.c **** 
 2646              		.loc 1 1463 6 is_stmt 1 discriminator 4 view .LVU794
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2647              		.loc 1 1465 14 is_stmt 0 discriminator 4 view .LVU795
 2648 0098 0BEB0308 		add	r8, fp, r3
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2649              		.loc 1 1465 27 discriminator 4 view .LVU796
 2650 009c 0133     		adds	r3, r3, #1
 2651              	.LVL292:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2652              		.loc 1 1465 21 discriminator 4 view .LVU797
 2653 009e B8FBF3F8 		udiv	r8, r8, r3
1466:src/display.c **** 	      const int r = v % b;
 2654              		.loc 1 1466 6 discriminator 4 view .LVU798
 2655 00a2 B8F1000F 		cmp	r8, #0
1463:src/display.c **** 
 2656              		.loc 1 1463 8 discriminator 4 view .LVU799
 2657 00a6 3046     		mov	r0, r6
 2658 00a8 3946     		mov	r1, r7
 2659              	.LVL293:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 2660              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU800
1466:src/display.c **** 	      const int r = v % b;
 2661              		.loc 1 1466 6 discriminator 4 view .LVU801
1466:src/display.c **** 	      const int r = v % b;
 2662              		.loc 1 1466 16 discriminator 4 view .LVU802
1466:src/display.c **** 	      const int r = v % b;
 2663              		.loc 1 1466 6 is_stmt 0 discriminator 4 view .LVU803
 2664 00aa 40F38A81 		ble	.L272
 2665 00ae 03AC     		add	r4, sp, #12
 2666 00b0 DFF858B2 		ldr	fp, .L318+20
 2667              	.LVL294:
1466:src/display.c **** 	      const int r = v % b;
 2668              		.loc 1 1466 6 discriminator 4 view .LVU804
 2669 00b4 08EB0406 		add	r6, r8, r4
 2670              	.LVL295:
 2671              	.L247:
 2672              	.LBB248:
1467:src/display.c **** 	      v /= b;
 2673              		.loc 1 1467 8 is_stmt 1 discriminator 3 view .LVU805
 2674 00b8 2A46     		mov	r2, r5
 2675 00ba 0023     		movs	r3, #0
 2676 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 2677              	.LVL296:
1468:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/cc1e4Gjl.s 			page 91


 2678              		.loc 1 1468 8 discriminator 3 view .LVU806
1469:src/display.c **** 	    }
 2679              		.loc 1 1469 15 is_stmt 0 discriminator 3 view .LVU807
 2680 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 2681 00c4 04F8013B 		strb	r3, [r4], #1
 2682              	.LVL297:
1469:src/display.c **** 	    }
 2683              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU808
 2684              	.LBE248:
1466:src/display.c **** 	      const int r = v % b;
 2685              		.loc 1 1466 21 discriminator 3 view .LVU809
1466:src/display.c **** 	      const int r = v % b;
 2686              		.loc 1 1466 16 discriminator 3 view .LVU810
1466:src/display.c **** 	      const int r = v % b;
 2687              		.loc 1 1466 6 is_stmt 0 discriminator 3 view .LVU811
 2688 00c8 B442     		cmp	r4, r6
 2689 00ca F5D1     		bne	.L247
 2690 00cc 08F1FF33 		add	r3, r8, #-1
1466:src/display.c **** 	      const int r = v % b;
 2691              		.loc 1 1466 6 view .LVU812
 2692 00d0 4446     		mov	r4, r8
 2693              	.LVL298:
 2694              	.L239:
1466:src/display.c **** 	      const int r = v % b;
 2695              		.loc 1 1466 6 view .LVU813
 2696              	.LBE247:
1479:src/display.c **** 	if (res) {
 2697              		.loc 1 1479 2 is_stmt 1 view .LVU814
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2698              		.loc 1 1480 2 view .LVU815
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2699              		.loc 1 1480 5 is_stmt 0 view .LVU816
 2700 00d2 0099     		ldr	r1, [sp]
 2701 00d4 0029     		cmp	r1, #0
 2702 00d6 41D0     		beq	.L248
 2703              	.L312:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2704              		.loc 1 1481 4 is_stmt 1 view .LVU817
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2705              		.loc 1 1481 7 is_stmt 0 view .LVU818
 2706 00d8 029A     		ldr	r2, [sp, #8]
 2707 00da 2AB1     		cbz	r2, .L249
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2708              		.loc 1 1481 14 is_stmt 1 discriminator 1 view .LVU819
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2709              		.loc 1 1481 18 is_stmt 0 discriminator 1 view .LVU820
 2710 00dc 8A46     		mov	r10, r1
 2711              	.LVL299:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2712              		.loc 1 1481 21 discriminator 1 view .LVU821
 2713 00de 2D22     		movs	r2, #45
 2714 00e0 0AF8012B 		strb	r2, [r10], #1
 2715              	.LVL300:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2716              		.loc 1 1481 18 discriminator 1 view .LVU822
 2717 00e4 CDF800A0 		str	r10, [sp]
 2718              	.LVL301:
ARM GAS  /tmp/cc1e4Gjl.s 			page 92


 2719              	.L249:
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2720              		.loc 1 1482 4 is_stmt 1 view .LVU823
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2721              		.loc 1 1482 7 is_stmt 0 view .LVU824
 2722 00e8 072C     		cmp	r4, #7
 2723 00ea 00F3EA80 		bgt	.L250
1489:src/display.c **** 	      *res++ = buf[i];
 2724              		.loc 1 1489 12 is_stmt 1 view .LVU825
 2725              	.LVL302:
1489:src/display.c **** 	      *res++ = buf[i];
 2726              		.loc 1 1489 12 is_stmt 0 view .LVU826
 2727 00ee 591C     		adds	r1, r3, #1
 2728 00f0 0BD0     		beq	.L226
 2729 00f2 0099     		ldr	r1, [sp]
 2730 00f4 03AA     		add	r2, sp, #12
 2731 00f6 1A44     		add	r2, r2, r3
 2732 00f8 01F1FF3A 		add	r10, r1, #-1
 2733 00fc 0B44     		add	r3, r3, r1
 2734              	.LVL303:
 2735              	.L253:
1490:src/display.c **** 	  }
 2736              		.loc 1 1490 8 is_stmt 1 view .LVU827
1490:src/display.c **** 	  }
 2737              		.loc 1 1490 20 is_stmt 0 view .LVU828
 2738 00fe 12F80119 		ldrb	r1, [r2], #-1	@ zero_extendqisi2
 2739              	.LVL304:
1490:src/display.c **** 	  }
 2740              		.loc 1 1490 15 view .LVU829
 2741 0102 0AF8011F 		strb	r1, [r10, #1]!
 2742              	.LVL305:
1489:src/display.c **** 	      *res++ = buf[i];
 2743              		.loc 1 1489 12 is_stmt 1 view .LVU830
1489:src/display.c **** 	      *res++ = buf[i];
 2744              		.loc 1 1489 12 is_stmt 0 view .LVU831
 2745 0106 9A45     		cmp	r10, r3
 2746 0108 F9D1     		bne	.L253
 2747              	.LVL306:
 2748              	.L226:
1537:src/display.c **** 
 2749              		.loc 1 1537 7 view .LVU832
 2750 010a 15B0     		add	sp, sp, #84
 2751              		.cfi_remember_state
 2752              		.cfi_def_cfa_offset 36
 2753              		@ sp needed
 2754 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2755              	.LVL307:
 2756              	.L271:
 2757              		.cfi_restore_state
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 2758              		.loc 1 1449 25 discriminator 1 view .LVU833
 2759 0110 56EA0703 		orrs	r3, r6, r7
 2760 0114 00F0BE80 		beq	.L234
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 2761              		.loc 1 1452 11 is_stmt 1 view .LVU834
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 2762              		.loc 1 1453 6 view .LVU835
ARM GAS  /tmp/cc1e4Gjl.s 			page 93


 2763 0118 DFF8F0B1 		ldr	fp, .L318+20
 2764              	.LVL308:
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 2765              		.loc 1 1453 8 is_stmt 0 view .LVU836
 2766 011c B046     		mov	r8, r6
 2767 011e A946     		mov	r9, r5
 2768 0120 3E46     		mov	r6, r7
1454:src/display.c **** 	      const int r = v % b;
 2769              		.loc 1 1454 6 is_stmt 1 view .LVU837
 2770              	.LVL309:
1454:src/display.c **** 	      const int r = v % b;
 2771              		.loc 1 1454 16 view .LVU838
 2772 0122 4FF0000A 		mov	r10, #0
 2773 0126 03AF     		add	r7, sp, #12
 2774              	.LVL310:
 2775              	.L245:
 2776              	.LBB249:
1455:src/display.c **** 	      v /= b;
 2777              		.loc 1 1455 8 discriminator 3 view .LVU839
 2778 0128 4046     		mov	r0, r8
 2779 012a 3146     		mov	r1, r6
 2780 012c 4A46     		mov	r2, r9
 2781 012e 5346     		mov	r3, r10
 2782 0130 FFF7FEFF 		bl	__aeabi_uldivmod
 2783              	.LVL311:
 2784 0134 3346     		mov	r3, r6
 2785 0136 9446     		mov	ip, r2
 2786              	.LVL312:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2787              		.loc 1 1456 8 discriminator 3 view .LVU840
 2788              	.LBE249:
1454:src/display.c **** 	      const int r = v % b;
 2789              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU841
 2790 0138 5345     		cmp	r3, r10
 2791 013a 4246     		mov	r2, r8
 2792              	.LVL313:
 2793              	.LBB250:
1457:src/display.c **** 	    }
 2794              		.loc 1 1457 15 discriminator 3 view .LVU842
 2795 013c 1BF80CC0 		ldrb	ip, [fp, ip]	@ zero_extendqisi2
 2796              	.LVL314:
1457:src/display.c **** 	    }
 2797              		.loc 1 1457 15 discriminator 3 view .LVU843
 2798 0140 07F801CB 		strb	ip, [r7], #1
 2799              	.LBE250:
1454:src/display.c **** 	      const int r = v % b;
 2800              		.loc 1 1454 6 discriminator 3 view .LVU844
 2801 0144 08BF     		it	eq
 2802 0146 4A45     		cmpeq	r2, r9
 2803              	.LBB251:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2804              		.loc 1 1456 10 discriminator 3 view .LVU845
 2805 0148 0E46     		mov	r6, r1
 2806              	.LVL315:
1457:src/display.c **** 	    }
 2807              		.loc 1 1457 8 is_stmt 1 discriminator 3 view .LVU846
 2808              	.LBE251:
ARM GAS  /tmp/cc1e4Gjl.s 			page 94


1454:src/display.c **** 	      const int r = v % b;
 2809              		.loc 1 1454 24 discriminator 3 view .LVU847
 2810              	.LBB252:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2811              		.loc 1 1456 10 is_stmt 0 discriminator 3 view .LVU848
 2812 014a 8046     		mov	r8, r0
 2813 014c 2146     		mov	r1, r4
 2814              	.LVL316:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 2815              		.loc 1 1456 10 discriminator 3 view .LVU849
 2816              	.LBE252:
1454:src/display.c **** 	      const int r = v % b;
 2817              		.loc 1 1454 25 discriminator 3 view .LVU850
 2818 014e 04F10104 		add	r4, r4, #1
 2819              	.LVL317:
1454:src/display.c **** 	      const int r = v % b;
 2820              		.loc 1 1454 16 is_stmt 1 discriminator 3 view .LVU851
1454:src/display.c **** 	      const int r = v % b;
 2821              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU852
 2822 0152 E9D2     		bcs	.L245
 2823 0154 0B46     		mov	r3, r1
1479:src/display.c **** 	if (res) {
 2824              		.loc 1 1479 2 is_stmt 1 view .LVU853
 2825              	.LVL318:
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2826              		.loc 1 1480 2 view .LVU854
1480:src/display.c **** 	  if (sign) *res++ = '-';
 2827              		.loc 1 1480 5 is_stmt 0 view .LVU855
 2828 0156 0099     		ldr	r1, [sp]
 2829 0158 0029     		cmp	r1, #0
 2830 015a BDD1     		bne	.L312
 2831              	.LVL319:
 2832              	.L248:
 2833              	.LBB253:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2834              		.loc 1 1508 4 is_stmt 1 view .LVU856
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2835              		.loc 1 1508 33 is_stmt 0 view .LVU857
 2836 015c 022D     		cmp	r5, #2
 2837 015e 00F0FE80 		beq	.L313
 2838              	.LVL320:
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 2839              		.loc 1 1509 4 is_stmt 1 view .LVU858
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 2840              		.loc 1 1509 30 is_stmt 0 view .LVU859
 2841 0162 042D     		cmp	r5, #4
 2842 0164 00F02481 		beq	.L314
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2843              		.loc 1 1508 33 view .LVU860
 2844 0168 102D     		cmp	r5, #16
 2845 016a 0CBF     		ite	eq
 2846 016c 0225     		moveq	r5, #2
 2847 016e 0325     		movne	r5, #3
 2848 0170 0C27     		movs	r7, #12
 2849              	.LVL321:
 2850              	.L255:
1511:src/display.c **** #endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 95


 2851              		.loc 1 1511 4 is_stmt 1 view .LVU861
 2852 0172 0093     		str	r3, [sp]
 2853              	.LVL322:
1511:src/display.c **** #endif
 2854              		.loc 1 1511 4 is_stmt 0 view .LVU862
 2855 0174 FFF7FEFF 		bl	set_separator_decimal_modes
 2856              	.LVL323:
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2857              		.loc 1 1513 4 is_stmt 1 view .LVU863
1514:src/display.c **** 	    State2.window = 0;
 2858              		.loc 1 1514 26 is_stmt 0 view .LVU864
 2859 0178 5F4A     		ldr	r2, .L318
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2860              		.loc 1 1513 17 view .LVU865
 2861 017a 6249     		ldr	r1, .L318+12
1514:src/display.c **** 	    State2.window = 0;
 2862              		.loc 1 1514 26 view .LVU866
 2863 017c 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2864              		.loc 1 1513 27 view .LVU867
 2865 017e 009B     		ldr	r3, [sp]
 2866 0180 93FBF7F3 		sdiv	r3, r3, r7
1514:src/display.c **** 	    State2.window = 0;
 2867              		.loc 1 1514 8 view .LVU868
 2868 0184 C2F3C208 		ubfx	r8, r2, #3, #3
1514:src/display.c **** 	    State2.window = 0;
 2869              		.loc 1 1514 7 view .LVU869
 2870 0188 4345     		cmp	r3, r8
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2871              		.loc 1 1513 17 view .LVU870
 2872 018a 0B60     		str	r3, [r1]
1514:src/display.c **** 	    State2.window = 0;
 2873              		.loc 1 1514 4 is_stmt 1 view .LVU871
1514:src/display.c **** 	    State2.window = 0;
 2874              		.loc 1 1514 7 is_stmt 0 view .LVU872
 2875 018c C0F2EA80 		blt	.L257
 2876 0190 07FB08F8 		mul	r8, r7, r8
 2877              	.L258:
1516:src/display.c **** 
 2878              		.loc 1 1516 4 is_stmt 1 view .LVU873
1516:src/display.c **** 
 2879              		.loc 1 1516 11 is_stmt 0 view .LVU874
 2880 0194 14AB     		add	r3, sp, #80
 2881 0196 14AA     		add	r2, sp, #80
 2882 0198 1C44     		add	r4, r4, r3
 2883              	.LVL324:
1516:src/display.c **** 
 2884              		.loc 1 1516 11 view .LVU875
 2885 019a 02EB0806 		add	r6, r2, r8
 2886 019e 0023     		movs	r3, #0
 2887 01a0 453E     		subs	r6, r6, #69
 2888 01a2 04F8443C 		strb	r3, [r4, #-68]
1518:src/display.c **** 	  for (k = 0; k < 12; k++)
 2889              		.loc 1 1518 4 is_stmt 1 view .LVU876
 2890              	.LVL325:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2891              		.loc 1 1519 4 view .LVU877
ARM GAS  /tmp/cc1e4Gjl.s 			page 96


1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2892              		.loc 1 1519 16 view .LVU878
1516:src/display.c **** 
 2893              		.loc 1 1516 11 is_stmt 0 view .LVU879
 2894 01a6 3246     		mov	r2, r6
 2895              	.LVL326:
 2896              	.L260:
1520:src/display.c **** 	      break;
 2897              		.loc 1 1520 6 is_stmt 1 view .LVU880
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2898              		.loc 1 1519 24 view .LVU881
1520:src/display.c **** 	      break;
 2899              		.loc 1 1520 9 is_stmt 0 view .LVU882
 2900 01a8 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 2901 01ac 0029     		cmp	r1, #0
 2902 01ae 00F0E080 		beq	.L259
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2903              		.loc 1 1519 25 discriminator 2 view .LVU883
 2904 01b2 0133     		adds	r3, r3, #1
 2905              	.LVL327:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2906              		.loc 1 1519 16 is_stmt 1 discriminator 2 view .LVU884
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 2907              		.loc 1 1519 4 is_stmt 0 discriminator 2 view .LVU885
 2908 01b4 0C2B     		cmp	r3, #12
 2909 01b6 F7D1     		bne	.L260
1522:src/display.c **** 	    int ch = buf[j++];
 2910              		.loc 1 1522 4 view .LVU886
 2911 01b8 4FF00B09 		mov	r9, #11
 2912              	.LVL328:
 2913              	.L261:
1522:src/display.c **** 	    int ch = buf[j++];
 2914              		.loc 1 1522 4 view .LVU887
 2915 01bc 08F10108 		add	r8, r8, #1
 2916 01c0 C844     		add	r8, r8, r9
 2917 01c2 4C46     		mov	r4, r9
 2918 01c4 4FF0630B 		mov	fp, #99
 2919 01c8 09E0     		b	.L266
 2920              	.LVL329:
 2921              	.L315:
 2922              	.LBB254:
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2923              		.loc 1 1528 8 view .LVU888
 2924 01ca 4F4B     		ldr	r3, .L318+16
 2925 01cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2926              	.LVL330:
 2927              	.LBB255:
 2928              	.LBI255:
 367:src/display.c ****   if (sep == SEP_NONE)
 2929              		.loc 1 367 14 is_stmt 1 view .LVU889
 2930              	.LBB256:
 368:src/display.c ****     return res;
 2931              		.loc 1 368 3 view .LVU890
 368:src/display.c ****     return res;
 2932              		.loc 1 368 6 is_stmt 0 view .LVU891
 2933 01ce 09B1     		cbz	r1, .L264
 368:src/display.c ****     return res;
ARM GAS  /tmp/cc1e4Gjl.s 			page 97


 2934              		.loc 1 368 6 view .LVU892
 2935 01d0 FFF7FEFF 		bl	set_separator.part.0
 2936              	.LVL331:
 2937              	.L264:
 368:src/display.c ****     return res;
 2938              		.loc 1 368 6 view .LVU893
 2939              	.LBE256:
 2940              	.LBE255:
1529:src/display.c **** 	  }
 2941              		.loc 1 1529 6 is_stmt 1 discriminator 2 view .LVU894
 2942              	.LBE254:
1522:src/display.c **** 	    int ch = buf[j++];
 2943              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU895
 2944 01d4 013C     		subs	r4, r4, #1
1522:src/display.c **** 	    int ch = buf[j++];
 2945              		.loc 1 1522 4 discriminator 2 view .LVU896
 2946 01d6 621C     		adds	r2, r4, #1
 2947              	.LBB259:
1529:src/display.c **** 	  }
 2948              		.loc 1 1529 10 discriminator 2 view .LVU897
 2949 01d8 ABF1090B 		sub	fp, fp, #9
 2950              	.LVL332:
1529:src/display.c **** 	  }
 2951              		.loc 1 1529 10 discriminator 2 view .LVU898
 2952              	.LBE259:
1522:src/display.c **** 	    int ch = buf[j++];
 2953              		.loc 1 1522 24 is_stmt 1 discriminator 2 view .LVU899
1522:src/display.c **** 	    int ch = buf[j++];
 2954              		.loc 1 1522 14 discriminator 2 view .LVU900
1522:src/display.c **** 	    int ch = buf[j++];
 2955              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU901
 2956 01dc 16D0     		beq	.L270
 2957              	.LVL333:
 2958              	.L266:
 2959              	.LBB260:
1523:src/display.c **** 	    if (i >= shift)
 2960              		.loc 1 1523 6 is_stmt 1 view .LVU902
1525:src/display.c **** 	    set_dig(dig, ch);
 2961              		.loc 1 1525 8 view .LVU903
1523:src/display.c **** 	    if (i >= shift)
 2962              		.loc 1 1523 10 is_stmt 0 view .LVU904
 2963 01de 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1524:src/display.c **** 	      ch -= 030;
 2964              		.loc 1 1524 9 view .LVU905
 2965 01e2 A9EB0402 		sub	r2, r9, r4
 2966 01e6 BA42     		cmp	r2, r7
 2967 01e8 A8EB040A 		sub	r10, r8, r4
 2968              	.LVL334:
1524:src/display.c **** 	      ch -= 030;
 2969              		.loc 1 1524 6 is_stmt 1 view .LVU906
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2970              		.loc 1 1526 6 is_stmt 0 view .LVU907
 2971 01ec 5846     		mov	r0, fp
1525:src/display.c **** 	    set_dig(dig, ch);
 2972              		.loc 1 1525 11 view .LVU908
 2973 01ee A8BF     		it	ge
 2974 01f0 1839     		subge	r1, r1, #24
ARM GAS  /tmp/cc1e4Gjl.s 			page 98


 2975              	.LVL335:
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2976              		.loc 1 1526 6 is_stmt 1 view .LVU909
 2977 01f2 FFF7FEFF 		bl	set_dig
 2978              	.LVL336:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2979              		.loc 1 1527 6 view .LVU910
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2980              		.loc 1 1527 13 is_stmt 0 view .LVU911
 2981 01f6 9AFBF5F3 		sdiv	r3, r10, r5
 2982 01fa 05FB13A3 		mls	r3, r5, r3, r10
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2983              		.loc 1 1527 9 view .LVU912
 2984 01fe 002B     		cmp	r3, #0
 2985 0200 E8D1     		bne	.L264
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2986              		.loc 1 1528 8 is_stmt 1 discriminator 1 view .LVU913
 2987              	.LBB258:
 2988              	.LBB257:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 2989              		.loc 1 370 3 discriminator 1 view .LVU914
 2990 0202 5846     		mov	r0, fp
 2991              	.LBE257:
 2992              	.LBE258:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2993              		.loc 1 1527 27 is_stmt 0 discriminator 1 view .LVU915
 2994 0204 002C     		cmp	r4, #0
 2995 0206 E0D1     		bne	.L315
1529:src/display.c **** 	  }
 2996              		.loc 1 1529 6 is_stmt 1 view .LVU916
1529:src/display.c **** 	  }
 2997              		.loc 1 1529 10 is_stmt 0 view .LVU917
 2998 0208 ABF1090B 		sub	fp, fp, #9
 2999              	.LVL337:
1529:src/display.c **** 	  }
 3000              		.loc 1 1529 10 view .LVU918
 3001              	.LBE260:
1522:src/display.c **** 	    int ch = buf[j++];
 3002              		.loc 1 1522 24 is_stmt 1 view .LVU919
1522:src/display.c **** 	    int ch = buf[j++];
 3003              		.loc 1 1522 14 view .LVU920
 3004              	.L270:
1531:src/display.c **** 	    if (dig >= 0)
 3005              		.loc 1 1531 4 view .LVU921
1531:src/display.c **** 	    if (dig >= 0)
 3006              		.loc 1 1531 7 is_stmt 0 view .LVU922
 3007 020c 029B     		ldr	r3, [sp, #8]
 3008 020e 002B     		cmp	r3, #0
 3009 0210 3FF47BAF 		beq	.L226
1532:src/display.c **** 	      set_dig(dig, '-');
 3010              		.loc 1 1532 6 is_stmt 1 view .LVU923
1532:src/display.c **** 	      set_dig(dig, '-');
 3011              		.loc 1 1532 9 is_stmt 0 view .LVU924
 3012 0214 BBF1000F 		cmp	fp, #0
 3013 0218 C0F2CC80 		blt	.L316
 3014              	.LVL338:
 3015              	.L269:
ARM GAS  /tmp/cc1e4Gjl.s 			page 99


1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3016              		.loc 1 1533 8 is_stmt 1 view .LVU925
 3017 021c 5846     		mov	r0, fp
 3018 021e 2D21     		movs	r1, #45
 3019 0220 FFF7FEFF 		bl	set_dig
 3020              	.LVL339:
 3021 0224 71E7     		b	.L226
 3022              	.LVL340:
 3023              	.L310:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3024              		.loc 1 1533 8 is_stmt 0 view .LVU926
 3025              	.LBE253:
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3026              		.loc 1 1426 4 is_stmt 1 view .LVU927
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3027              		.loc 1 1426 8 is_stmt 0 view .LVU928
 3028 0226 02AA     		add	r2, sp, #8
 3029 0228 3046     		mov	r0, r6
 3030 022a 3946     		mov	r1, r7
 3031 022c FFF7FEFF 		bl	extract_value
 3032              	.LVL341:
 3033 0230 8046     		mov	r8, r0
 3034 0232 8946     		mov	r9, r1
 3035              	.LVL342:
1427:src/display.c **** 	    v = value;
 3036              		.loc 1 1427 4 is_stmt 1 view .LVU929
1427:src/display.c **** 	    v = value;
 3037              		.loc 1 1427 8 is_stmt 0 view .LVU930
 3038 0234 FFF7FEFF 		bl	int_mode
 3039              	.LVL343:
1427:src/display.c **** 	    v = value;
 3040              		.loc 1 1427 7 view .LVU931
 3041 0238 28BB     		cbnz	r0, .L231
1427:src/display.c **** 	    v = value;
 3042              		.loc 1 1427 33 discriminator 1 view .LVU932
 3043 023a 029B     		ldr	r3, [sp, #8]
 3044 023c 012B     		cmp	r3, #1
 3045 023e 22D1     		bne	.L231
1427:src/display.c **** 	    v = value;
 3046              		.loc 1 1427 46 discriminator 2 view .LVU933
 3047 0240 58EA0903 		orrs	r3, r8, r9
 3048 0244 00F0A180 		beq	.L317
 3049              	.LVL344:
 3050              	.L232:
1427:src/display.c **** 	    v = value;
 3051              		.loc 1 1427 46 discriminator 2 view .LVU934
 3052 0248 DFF8C0B0 		ldr	fp, .L318+20
 3053              	.LVL345:
1402:src/display.c **** 	const int ws = word_size();
 3054              		.loc 1 1402 67 discriminator 3 view .LVU935
 3055 024c 0195     		str	r5, [sp, #4]
 3056 024e 2E46     		mov	r6, r5
 3057 0250 0027     		movs	r7, #0
 3058 0252 0DF10C0A 		add	r10, sp, #12
 3059 0256 0024     		movs	r4, #0
 3060 0258 5D46     		mov	r5, fp
 3061              	.LVL346:
ARM GAS  /tmp/cc1e4Gjl.s 			page 100


 3062              	.L238:
 3063              	.LBB263:
1436:src/display.c **** 	      v /= b;
 3064              		.loc 1 1436 8 is_stmt 1 discriminator 3 view .LVU936
 3065 025a 4046     		mov	r0, r8
 3066 025c 4946     		mov	r1, r9
 3067 025e 3246     		mov	r2, r6
 3068 0260 3B46     		mov	r3, r7
 3069 0262 FFF7FEFF 		bl	__aeabi_uldivmod
 3070              	.LVL347:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3071              		.loc 1 1437 8 discriminator 3 view .LVU937
 3072 0266 CC46     		mov	ip, r9
 3073 0268 C346     		mov	fp, r8
 3074              	.LBE263:
1435:src/display.c **** 	      const int r = v % b;
 3075              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU938
 3076 026a BC45     		cmp	ip, r7
 3077              	.LBB264:
1438:src/display.c **** 	    }
 3078              		.loc 1 1438 15 discriminator 3 view .LVU939
 3079 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3080 026e 0AF8013B 		strb	r3, [r10], #1
 3081              	.LBE264:
1435:src/display.c **** 	      const int r = v % b;
 3082              		.loc 1 1435 6 discriminator 3 view .LVU940
 3083 0272 08BF     		it	eq
 3084 0274 B345     		cmpeq	fp, r6
 3085 0276 2346     		mov	r3, r4
 3086              	.LBB265:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3087              		.loc 1 1437 10 discriminator 3 view .LVU941
 3088 0278 8046     		mov	r8, r0
 3089              	.LVL348:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3090              		.loc 1 1437 10 discriminator 3 view .LVU942
 3091 027a 8946     		mov	r9, r1
 3092              	.LVL349:
1438:src/display.c **** 	    }
 3093              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU943
 3094              	.LBE265:
1435:src/display.c **** 	      const int r = v % b;
 3095              		.loc 1 1435 24 discriminator 3 view .LVU944
1435:src/display.c **** 	      const int r = v % b;
 3096              		.loc 1 1435 25 is_stmt 0 discriminator 3 view .LVU945
 3097 027c 04F10104 		add	r4, r4, #1
 3098              	.LVL350:
1435:src/display.c **** 	      const int r = v % b;
 3099              		.loc 1 1435 16 is_stmt 1 discriminator 3 view .LVU946
1435:src/display.c **** 	      const int r = v % b;
 3100              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU947
 3101 0280 EBD2     		bcs	.L238
 3102 0282 019D     		ldr	r5, [sp, #4]
 3103 0284 25E7     		b	.L239
 3104              	.LVL351:
 3105              	.L231:
1429:src/display.c **** 	    if (sign)
ARM GAS  /tmp/cc1e4Gjl.s 			page 101


 3106              		.loc 1 1429 4 is_stmt 1 view .LVU948
1429:src/display.c **** 	    if (sign)
 3107              		.loc 1 1429 7 is_stmt 0 view .LVU949
 3108 0286 58EA0903 		orrs	r3, r8, r9
 3109 028a DDD1     		bne	.L232
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3110              		.loc 1 1430 6 is_stmt 1 view .LVU950
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3111              		.loc 1 1430 9 is_stmt 0 view .LVU951
 3112 028c 029B     		ldr	r3, [sp, #8]
 3113 028e 002B     		cmp	r3, #0
 3114 0290 40F08180 		bne	.L233
 3115              	.LVL352:
 3116              	.L234:
1432:src/display.c **** 	    return;
 3117              		.loc 1 1432 6 is_stmt 1 view .LVU952
 3118              	.LBB266:
 3119              	.LBI266:
 407:src/display.c ****   if (res) *res++ = ch;
 3120              		.loc 1 407 14 view .LVU953
 3121              	.LBB267:
 408:src/display.c ****   else	set_dig(base, ch);
 3122              		.loc 1 408 3 view .LVU954
 408:src/display.c ****   else	set_dig(base, ch);
 3123              		.loc 1 408 6 is_stmt 0 view .LVU955
 3124 0294 009B     		ldr	r3, [sp]
 3125 0296 002B     		cmp	r3, #0
 3126 0298 00F08580 		beq	.L236
 3127              	.LVL353:
 3128              	.L235:
 408:src/display.c ****   else	set_dig(base, ch);
 3129              		.loc 1 408 12 is_stmt 1 view .LVU956
 408:src/display.c ****   else	set_dig(base, ch);
 3130              		.loc 1 408 19 is_stmt 0 view .LVU957
 3131 029c 009A     		ldr	r2, [sp]
 3132 029e 3023     		movs	r3, #48
 3133 02a0 1370     		strb	r3, [r2]
 3134              	.LBE267:
 3135              	.LBE266:
1537:src/display.c **** 
 3136              		.loc 1 1537 7 view .LVU958
 3137 02a2 15B0     		add	sp, sp, #84
 3138              		.cfi_remember_state
 3139              		.cfi_def_cfa_offset 36
 3140              	.LVL354:
1537:src/display.c **** 
 3141              		.loc 1 1537 7 view .LVU959
 3142              		@ sp needed
 3143 02a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3144              	.LVL355:
 3145              	.L227:
 3146              		.cfi_restore_state
1417:src/display.c **** 	}
 3147              		.loc 1 1417 11 is_stmt 1 view .LVU960
1417:src/display.c **** 	}
 3148              		.loc 1 1417 15 is_stmt 0 view .LVU961
 3149 02a8 FFF7FEFF 		bl	int_base
ARM GAS  /tmp/cc1e4Gjl.s 			page 102


 3150              	.LVL356:
1420:src/display.c **** 	  IntMaxWindow = 0;
 3151              		.loc 1 1420 5 view .LVU962
 3152 02ac 009B     		ldr	r3, [sp]
1417:src/display.c **** 	}
 3153              		.loc 1 1417 15 view .LVU963
 3154 02ae 0546     		mov	r5, r0
 3155              	.LVL357:
1417:src/display.c **** 	}
 3156              		.loc 1 1417 27 is_stmt 1 view .LVU964
1420:src/display.c **** 	  IntMaxWindow = 0;
 3157              		.loc 1 1420 2 view .LVU965
1420:src/display.c **** 	  IntMaxWindow = 0;
 3158              		.loc 1 1420 5 is_stmt 0 view .LVU966
 3159 02b0 002B     		cmp	r3, #0
 3160 02b2 7FF4BEAE 		bne	.L229
 3161              	.LVL358:
 3162              	.L309:
1421:src/display.c **** 	  carry_overflow();
 3163              		.loc 1 1421 4 is_stmt 1 view .LVU967
1421:src/display.c **** 	  carry_overflow();
 3164              		.loc 1 1421 17 is_stmt 0 view .LVU968
 3165 02b6 134B     		ldr	r3, .L318+12
 3166 02b8 009A     		ldr	r2, [sp]
 3167 02ba 1A60     		str	r2, [r3]
1422:src/display.c **** 	}
 3168              		.loc 1 1422 4 is_stmt 1 view .LVU969
 3169 02bc FFF7FEFF 		bl	carry_overflow
 3170              	.LVL359:
 3171 02c0 B7E6     		b	.L229
 3172              	.LVL360:
 3173              	.L250:
1483:src/display.c **** 	      *res++ = buf[i];
 3174              		.loc 1 1483 12 view .LVU970
1483:src/display.c **** 	      *res++ = buf[i];
 3175              		.loc 1 1483 24 is_stmt 0 view .LVU971
 3176 02c2 0098     		ldr	r0, [sp]
 3177 02c4 03AA     		add	r2, sp, #12
 3178 02c6 D118     		adds	r1, r2, r3
 3179 02c8 E51F     		subs	r5, r4, #7
 3180 02ca 0246     		mov	r2, r0
 3181 02cc C618     		adds	r6, r0, r3
 3182              	.LVL361:
 3183              	.L252:
1484:src/display.c **** 	    *res++ = '.';
 3184              		.loc 1 1484 8 is_stmt 1 view .LVU972
1484:src/display.c **** 	    *res++ = '.';
 3185              		.loc 1 1484 20 is_stmt 0 view .LVU973
 3186 02ce 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
 3187              	.LVL362:
1484:src/display.c **** 	    *res++ = '.';
 3188              		.loc 1 1484 15 view .LVU974
 3189 02d2 02F8010B 		strb	r0, [r2], #1
 3190              	.LVL363:
1483:src/display.c **** 	      *res++ = buf[i];
 3191              		.loc 1 1483 12 is_stmt 1 view .LVU975
1483:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/cc1e4Gjl.s 			page 103


 3192              		.loc 1 1483 12 is_stmt 0 view .LVU976
 3193 02d6 B01A     		subs	r0, r6, r2
 3194 02d8 8542     		cmp	r5, r0
 3195 02da F8DD     		ble	.L252
 3196 02dc 03F10802 		add	r2, r3, #8
 3197              	.LVL364:
1483:src/display.c **** 	      *res++ = buf[i];
 3198              		.loc 1 1483 12 view .LVU977
 3199 02e0 0099     		ldr	r1, [sp]
 3200              	.LVL365:
1483:src/display.c **** 	      *res++ = buf[i];
 3201              		.loc 1 1483 12 view .LVU978
 3202 02e2 141B     		subs	r4, r2, r4
 3203              	.LVL366:
1483:src/display.c **** 	      *res++ = buf[i];
 3204              		.loc 1 1483 12 view .LVU979
 3205 02e4 9D42     		cmp	r5, r3
 3206 02e6 C8BF     		it	gt
 3207 02e8 0124     		movgt	r4, #1
 3208 02ea 0A19     		adds	r2, r1, r4
1485:src/display.c **** 	    *res++ = '.';
 3209              		.loc 1 1485 6 is_stmt 1 view .LVU980
 3210              	.LVL367:
1485:src/display.c **** 	    *res++ = '.';
 3211              		.loc 1 1485 13 is_stmt 0 view .LVU981
 3212 02ec 2E23     		movs	r3, #46
 3213 02ee 0B55     		strb	r3, [r1, r4]
1486:src/display.c **** 	  }
 3214              		.loc 1 1486 6 is_stmt 1 view .LVU982
 3215              	.LVL368:
1486:src/display.c **** 	  }
 3216              		.loc 1 1486 13 is_stmt 0 view .LVU983
 3217 02f0 5370     		strb	r3, [r2, #1]
1537:src/display.c **** 
 3218              		.loc 1 1537 7 view .LVU984
 3219 02f2 15B0     		add	sp, sp, #84
 3220              		.cfi_remember_state
 3221              		.cfi_def_cfa_offset 36
 3222              		@ sp needed
 3223 02f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3224              	.LVL369:
 3225              	.L319:
1537:src/display.c **** 
 3226              		.loc 1 1537 7 view .LVU985
 3227              		.align	2
 3228              	.L318:
 3229 02f8 00000000 		.word	StateWhileOn
 3230 02fc 00000000 		.word	CSWTCH.330
 3231 0300 00000000 		.word	main_ram
 3232 0304 00000000 		.word	IntMaxWindow
 3233 0308 00000000 		.word	.LANCHOR0
 3234 030c 00000000 		.word	.LANCHOR12
 3235              	.LVL370:
 3236              	.L311:
 3237              		.cfi_restore_state
 3238              	.LBB269:
1445:src/display.c **** 	      vs |= ~mask;
ARM GAS  /tmp/cc1e4Gjl.s 			page 104


 3239              		.loc 1 1445 38 discriminator 1 view .LVU986
 3240 0310 0BF1FF31 		add	r1, fp, #-1
1445:src/display.c **** 	      vs |= ~mask;
 3241              		.loc 1 1445 18 discriminator 1 view .LVU987
 3242 0314 CBF1210C 		rsb	ip, fp, #33
 3243 0318 C840     		lsrs	r0, r0, r1
 3244 031a 07FA0CFC 		lsl	ip, r7, ip
 3245 031e 2039     		subs	r1, r1, #32
 3246 0320 40EA0C00 		orr	r0, r0, ip
 3247 0324 5CBF     		itt	pl
 3248 0326 47FA01F1 		asrpl	r1, r7, r1
 3249 032a 0843     		orrpl	r0, r0, r1
 3250 032c 00F00108 		and	r8, r0, #1
 3251 0330 4FF00009 		mov	r9, #0
 3252 0334 58EA0901 		orrs	r1, r8, r9
 3253 0338 08D0     		beq	.L241
1446:src/display.c **** 	  }
 3254              		.loc 1 1446 8 is_stmt 1 view .LVU988
1446:src/display.c **** 	  }
 3255              		.loc 1 1446 11 is_stmt 0 view .LVU989
 3256 033a 5042     		rsbs	r0, r2, #0
 3257 033c 63EB4301 		sbc	r1, r3, r3, lsl #1
 3258 0340 40EA0602 		orr	r2, r0, r6
 3259              	.LVL371:
1446:src/display.c **** 	  }
 3260              		.loc 1 1446 11 view .LVU990
 3261 0344 41EA0703 		orr	r3, r1, r7
 3262              	.LVL372:
1446:src/display.c **** 	  }
 3263              		.loc 1 1446 11 view .LVU991
 3264 0348 1646     		mov	r6, r2
 3265              	.LVL373:
1446:src/display.c **** 	  }
 3266              		.loc 1 1446 11 view .LVU992
 3267 034a 1F46     		mov	r7, r3
 3268              	.L241:
1446:src/display.c **** 	  }
 3269              		.loc 1 1446 11 view .LVU993
 3270              	.LBE269:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3271              		.loc 1 1449 4 is_stmt 1 view .LVU994
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3272              		.loc 1 1449 8 is_stmt 0 view .LVU995
 3273 034c 1E4B     		ldr	r3, .L320
 3274 034e 1B68     		ldr	r3, [r3]
 3275 0350 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3276              		.loc 1 1449 7 view .LVU996
 3277 0354 9B07     		lsls	r3, r3, #30
 3278 0356 7FF5DBAE 		bpl	.L271
 3279 035a 0223     		movs	r3, #2
 3280 035c 9CE6     		b	.L246
 3281              	.LVL374:
 3282              	.L313:
 3283              	.LBB270:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3284              		.loc 1 1508 33 view .LVU997
ARM GAS  /tmp/cc1e4Gjl.s 			page 105


 3285 035e 0827     		movs	r7, #8
1510:src/display.c **** 	  set_separator_decimal_modes();
 3286              		.loc 1 1510 6 view .LVU998
 3287 0360 0425     		movs	r5, #4
 3288 0362 06E7     		b	.L255
 3289              	.LVL375:
 3290              	.L257:
1515:src/display.c **** 	  buf[i] = '\0';
 3291              		.loc 1 1515 6 is_stmt 1 view .LVU999
1515:src/display.c **** 	  buf[i] = '\0';
 3292              		.loc 1 1515 20 is_stmt 0 view .LVU1000
 3293 0364 194B     		ldr	r3, .L320+4
 3294 0366 6FF3C502 		bfc	r2, #3, #3
 3295 036a 1A75     		strb	r2, [r3, #20]
 3296 036c 4FF00008 		mov	r8, #0
 3297 0370 10E7     		b	.L258
 3298              	.LVL376:
 3299              	.L259:
1522:src/display.c **** 	    int ch = buf[j++];
 3300              		.loc 1 1522 14 is_stmt 1 discriminator 1 view .LVU1001
1522:src/display.c **** 	    int ch = buf[j++];
 3301              		.loc 1 1522 4 is_stmt 0 discriminator 1 view .LVU1002
 3302 0372 03F1FF39 		add	r9, r3, #-1
 3303              	.LVL377:
1522:src/display.c **** 	    int ch = buf[j++];
 3304              		.loc 1 1522 4 discriminator 1 view .LVU1003
 3305 0376 002B     		cmp	r3, #0
 3306 0378 7FF420AF 		bne	.L261
1531:src/display.c **** 	    if (dig >= 0)
 3307              		.loc 1 1531 4 is_stmt 1 view .LVU1004
1531:src/display.c **** 	    if (dig >= 0)
 3308              		.loc 1 1531 7 is_stmt 0 view .LVU1005
 3309 037c 029B     		ldr	r3, [sp, #8]
 3310 037e 002B     		cmp	r3, #0
 3311 0380 3FF4C3AE 		beq	.L226
 3312 0384 4FF0630B 		mov	fp, #99
 3313 0388 48E7     		b	.L269
 3314              	.LVL378:
 3315              	.L317:
1531:src/display.c **** 	    if (dig >= 0)
 3316              		.loc 1 1531 7 view .LVU1006
 3317              	.LBE270:
1428:src/display.c **** 	  if (v == 0) {
 3318              		.loc 1 1428 6 is_stmt 1 view .LVU1007
1428:src/display.c **** 	  if (v == 0) {
 3319              		.loc 1 1428 8 is_stmt 0 view .LVU1008
 3320 038a B046     		mov	r8, r6
 3321              	.LVL379:
1428:src/display.c **** 	  if (v == 0) {
 3322              		.loc 1 1428 8 view .LVU1009
 3323 038c B946     		mov	r9, r7
 3324              	.LVL380:
1429:src/display.c **** 	    if (sign)
 3325              		.loc 1 1429 4 is_stmt 1 view .LVU1010
1429:src/display.c **** 	    if (sign)
 3326              		.loc 1 1429 7 is_stmt 0 view .LVU1011
 3327 038e 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/cc1e4Gjl.s 			page 106


 3328 0392 7FF459AF 		bne	.L232
 3329              	.LVL381:
 3330              	.L233:
1431:src/display.c **** 	    set_dig_s(dig, '0', res);
 3331              		.loc 1 1431 8 is_stmt 1 view .LVU1012
 3332              	.LBB271:
 3333              	.LBI271:
 407:src/display.c ****   if (res) *res++ = ch;
 3334              		.loc 1 407 14 view .LVU1013
 3335              	.LBB272:
 408:src/display.c ****   else	set_dig(base, ch);
 3336              		.loc 1 408 3 view .LVU1014
 408:src/display.c ****   else	set_dig(base, ch);
 3337              		.loc 1 408 6 is_stmt 0 view .LVU1015
 3338 0396 009B     		ldr	r3, [sp]
 3339 0398 002B     		cmp	r3, #0
 3340 039a 7FF47FAF 		bne	.L235
 409:src/display.c ****   return res;
 3341              		.loc 1 409 8 is_stmt 1 view .LVU1016
 3342 039e 2D21     		movs	r1, #45
 3343 03a0 5A20     		movs	r0, #90
 3344 03a2 FFF7FEFF 		bl	set_dig
 3345              	.LVL382:
 409:src/display.c ****   return res;
 3346              		.loc 1 409 8 is_stmt 0 view .LVU1017
 3347              	.LBE272:
 3348              	.LBE271:
1432:src/display.c **** 	    return;
 3349              		.loc 1 1432 6 is_stmt 1 view .LVU1018
 3350              	.LBB273:
 407:src/display.c ****   if (res) *res++ = ch;
 3351              		.loc 1 407 14 view .LVU1019
 3352              	.LBB268:
 408:src/display.c ****   else	set_dig(base, ch);
 3353              		.loc 1 408 3 view .LVU1020
 3354              	.L236:
 409:src/display.c ****   return res;
 3355              		.loc 1 409 8 view .LVU1021
 3356 03a6 3021     		movs	r1, #48
 3357 03a8 6320     		movs	r0, #99
 3358 03aa FFF7FEFF 		bl	set_dig
 3359              	.LVL383:
 3360 03ae ACE6     		b	.L226
 3361              	.LVL384:
 3362              	.L314:
 409:src/display.c ****   return res;
 3363              		.loc 1 409 8 is_stmt 0 view .LVU1022
 3364              	.LBE268:
 3365              	.LBE273:
 3366              	.LBB274:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3367              		.loc 1 1508 33 view .LVU1023
 3368 03b0 0C27     		movs	r7, #12
 3369 03b2 DEE6     		b	.L255
 3370              	.LVL385:
 3371              	.L316:
1534:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 107


 3372              		.loc 1 1534 11 is_stmt 1 view .LVU1024
 3373              	.LBB261:
 3374              	.LBI261:
 296:src/display.c **** {
 3375              		.loc 1 296 13 view .LVU1025
 3376              	.LBB262:
 298:src/display.c ****   set_dot(MANT_SIGN);
 3377              		.loc 1 298 3 view .LVU1026
 298:src/display.c ****   set_dot(MANT_SIGN);
 3378              		.loc 1 298 25 is_stmt 0 view .LVU1027
 3379 03b4 064B     		ldr	r3, .L320+8
 3380 03b6 2D22     		movs	r2, #45
 299:src/display.c **** }
 3381              		.loc 1 299 3 view .LVU1028
 3382 03b8 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 3383              		.loc 1 298 25 view .LVU1029
 3384 03ba 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 3385              		.loc 1 299 3 is_stmt 1 view .LVU1030
 3386 03bc FFF7FEFF 		bl	set_dot
 3387              	.LVL386:
 300:src/display.c **** 
 3388              		.loc 1 300 1 is_stmt 0 view .LVU1031
 3389 03c0 A3E6     		b	.L226
 3390              	.LVL387:
 3391              	.L272:
 300:src/display.c **** 
 3392              		.loc 1 300 1 view .LVU1032
 3393              	.LBE262:
 3394              	.LBE261:
 3395              	.LBE274:
 3396              	.LBB275:
1466:src/display.c **** 	      const int r = v % b;
 3397              		.loc 1 1466 6 view .LVU1033
 3398 03c2 4FF0FF33 		mov	r3, #-1
 3399              	.LVL388:
1466:src/display.c **** 	      const int r = v % b;
 3400              		.loc 1 1466 6 view .LVU1034
 3401 03c6 84E6     		b	.L239
 3402              	.L321:
 3403              		.align	2
 3404              	.L320:
 3405 03c8 00000000 		.word	main_ram
 3406 03cc 00000000 		.word	StateWhileOn
 3407 03d0 00000000 		.word	LastDisplayedNumber
 3408              	.LBE275:
 3409              		.cfi_endproc
 3410              	.LFE18:
 3412              		.section	.text.set_annunciators,"ax",%progbits
 3413              		.align	1
 3414              		.p2align 2,,3
 3415              		.syntax unified
 3416              		.thumb
 3417              		.thumb_func
 3418              		.fpu fpv4-sp-d16
 3420              	set_annunciators:
ARM GAS  /tmp/cc1e4Gjl.s 			page 108


 3421              	.LFB32:
1753:src/display.c **** 
1754:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1755:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1756:src/display.c **** 	decNumber c;
1757:src/display.c **** 	int true_exp, x=0;
1758:src/display.c **** 	int min_pos_exp, max_neg_exp;
1759:src/display.c **** 
1760:src/display.c **** 	if ( mode != MODE_STD ) {
1761:src/display.c **** 	  min_pos_exp = 9;
1762:src/display.c **** 	  max_neg_exp = -5;
1763:src/display.c **** 	}
1764:src/display.c **** 	else {
1765:src/display.c **** 	  min_pos_exp = 12;
1766:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1767:src/display.c **** 	}
1768:src/display.c **** 
1769:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1770:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1771:src/display.c **** 
1772:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1773:src/display.c **** 	  x = *dd;
1774:src/display.c **** 	}
1775:src/display.c **** 
1776:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1777:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1778:src/display.c **** 	  *dd += -true_exp;
1779:src/display.c **** 	  return MODE_FIX;
1780:src/display.c **** 	}
1781:src/display.c **** 
1782:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1783:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1784:src/display.c **** 	}
1785:src/display.c **** 	else {
1786:src/display.c **** 	  return MODE_STD;
1787:src/display.c **** 	}
1788:src/display.c ****       }
1789:src/display.c **** #else
1790:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1791:src/display.c **** 	decNumber b, c;
1792:src/display.c **** 
1793:src/display.c **** 	dn_1(&b);
1794:src/display.c **** 	b.exponent -= UState.dispdigs;
1795:src/display.c **** 	dn_abs(&c, z);
1796:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1797:src/display.c **** 	  return MODE_FIX;
1798:src/display.c **** 	return MODE_STD;
1799:src/display.c ****       }
1800:src/display.c **** #endif
1801:src/display.c **** 
1802:src/display.c ****       /* SHOW display mode
1803:src/display.c ****        * in double precision show left or right part
1804:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1805:src/display.c ****        */
1806:src/display.c ****       static void show_x(char *x, int exp) {
1807:src/display.c **** 	const int dbl = is_dblmode();
1808:src/display.c **** 	char *p;
ARM GAS  /tmp/cc1e4Gjl.s 			page 109


1809:src/display.c **** 	int i, j;
1810:src/display.c **** 	char *upper_str;
1811:src/display.c **** 	enum separator_modes separator_mode;
1812:src/display.c **** 	char decimal_mark;
1813:src/display.c **** 	char thousands_sep;
1814:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1815:src/display.c **** 	const int grouping = 0;
1816:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1817:src/display.c **** 	const int grouping = !UState.nothousands;
1818:src/display.c **** #else
1819:src/display.c **** 	const int grouping = 1;
1820:src/display.c **** #endif
1821:src/display.c **** 	int negative;
1822:src/display.c **** 
1823:src/display.c **** 	if (x[0] == '-') {
1824:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1825:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1826:src/display.c **** 
1827:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1828:src/display.c **** 	  xcopy(x, small_minus, 4);
1829:src/display.c **** 	  x += 4;
1830:src/display.c **** 	  negative = 4;
1831:src/display.c **** #else
1832:src/display.c **** 	  ++x;
1833:src/display.c **** 	  negative = 1;
1834:src/display.c **** #endif
1835:src/display.c **** 	}
1836:src/display.c **** 	else negative = 0;
1837:src/display.c **** 
1838:src/display.c **** 	p = find_char(x, '\0');
1839:src/display.c **** 	xset(p, '0', 34 - (p - x));
1840:src/display.c **** 
1841:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1842:src/display.c **** 	  separator_mode = SEP_COMMA;
1843:src/display.c **** 	  decimal_mark = '.';
1844:src/display.c **** 	  thousands_sep = ',';
1845:src/display.c **** 	}
1846:src/display.c **** 	else {
1847:src/display.c **** 	  separator_mode = SEP_DOT;
1848:src/display.c **** 	  decimal_mark = ',';
1849:src/display.c **** 	  thousands_sep = '.';
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	if (State2.window) { // right half in double precision mode
1853:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1854:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1855:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1856:src/display.c **** 
1857:src/display.c **** 	  upper_str = x + 3;
1858:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1859:src/display.c **** 	  if (grouping) {
1860:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1861:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1862:src/display.c **** 	    x += 3 + 13 + 7;
1863:src/display.c **** 	  }
1864:src/display.c **** 	  else x += 3 + 13 + 6;
1865:src/display.c **** #else
ARM GAS  /tmp/cc1e4Gjl.s 			page 110


1866:src/display.c **** 	  upper_str = x + 13;
1867:src/display.c **** 	  xset(upper_str, '.', 3);
1868:src/display.c **** 	  if (grouping) {
1869:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1870:src/display.c **** 	    upper_str[6] = thousands_sep;
1871:src/display.c **** 	    x += 13 + 3 + 7;
1872:src/display.c **** 	  }
1873:src/display.c **** 	  else x += 13 + 3 + 6;
1874:src/display.c **** #endif
1875:src/display.c **** 	  negative = 0;
1876:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1877:src/display.c **** 	}
1878:src/display.c **** 	else {
1879:src/display.c **** 	  upper_str = x;
1880:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1881:src/display.c **** 	  x[1] = decimal_mark;
1882:src/display.c **** 	  if (grouping) {
1883:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1884:src/display.c **** 	    x[5] = thousands_sep;
1885:src/display.c **** 	    x += 9;
1886:src/display.c **** 	  }
1887:src/display.c **** 	  else x += 8;
1888:src/display.c **** 	  if (dbl) {
1889:src/display.c **** 	    if (exp < 0) {
1890:src/display.c **** 	      x[9] = '-';
1891:src/display.c **** 	      exp = -exp;
1892:src/display.c **** 	    }
1893:src/display.c **** 	    else
1894:src/display.c **** 	      x[9] = ' ';
1895:src/display.c **** 	    j = exp / 1000;
1896:src/display.c **** 	    x[10] = '0' + j;
1897:src/display.c **** 	    exp -= 1000 * j;
1898:src/display.c **** 	  }
1899:src/display.c **** 	  else {
1900:src/display.c **** 	    x[9] = '\0';
1901:src/display.c **** 	    x[10] = '\0';
1902:src/display.c **** 	  }
1903:src/display.c **** 	  xcopy(x + 1, x, 11);
1904:src/display.c **** 	  *x = 0;
1905:src/display.c **** 	  set_exp(exp, 1, CNULL);
1906:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1907:src/display.c **** 	}
1908:src/display.c **** 	if (grouping) {
1909:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1910:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1911:src/display.c **** 	  }
1912:src/display.c **** 	}
1913:src/display.c **** 
1914:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1915:src/display.c **** 	  set_dig(j, x[i]);
1916:src/display.c **** 
1917:src/display.c **** 	*x = '\0';
1918:src/display.c **** 	set_status(upper_str - negative);
1919:src/display.c ****       }
1920:src/display.c **** 
1921:src/display.c **** 
1922:src/display.c ****       /* Display the X register in the numeric portion of the display.
ARM GAS  /tmp/cc1e4Gjl.s 			page 111


1923:src/display.c ****        * We have to account for the various display modes and numbers of
1924:src/display.c ****        * digits.
1925:src/display.c ****        */
1926:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1927:src/display.c **** 	decNumber z;
1928:src/display.c **** 	int digits = DISPLAY_DIGITS;
1929:src/display.c **** 
1930:src/display.c **** 	if (dbl)
1931:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1932:src/display.c **** 	else
1933:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1934:src/display.c **** 	set_x_dn(&z, res, &digits);
1935:src/display.c ****       }
1936:src/display.c **** 
1937:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1938:src/display.c **** 	char x[50], *obp = x;
1939:src/display.c **** 	int odig = 0;
1940:src/display.c **** 	int show_exp = 0;
1941:src/display.c **** 	int j;
1942:src/display.c **** 	char mantissa[64];
1943:src/display.c **** 	int exp = 0;
1944:src/display.c **** 	char *p = mantissa;
1945:src/display.c **** 	char *r;
1946:src/display.c **** 	const char *q;
1947:src/display.c **** 	int count, i;
1948:src/display.c **** 	int extra_digits = 0;
1949:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1950:src/display.c **** 	int dd;
1951:src/display.c **** 	int dispdigs;
1952:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1953:src/display.c **** #else
1954:src/display.c **** 	int dd = UState.dispdigs;
1955:src/display.c **** 	int mode = UState.dispmode;
1956:src/display.c **** #endif
1957:src/display.c **** 	int c;
1958:src/display.c **** 	int negative = 0;
1959:src/display.c **** 	int trimzeros = 0;
1960:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1961:src/display.c **** 	const int show_large_exponent = 0;
1962:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1963:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1964:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1965:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1966:src/display.c **** #else
1967:src/display.c **** 	const int show_large_exponent = 1;
1968:src/display.c **** #endif
1969:src/display.c **** 
1970:src/display.c **** 	set_separator_decimal_modes();
1971:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1972:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1973:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1974:src/display.c **** 	    if (State2.hms) {
1975:src/display.c **** 	      set_x_hms(z, res);
1976:src/display.c **** 	      return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else if (UState.fract) {
1979:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/cc1e4Gjl.s 			page 112


1980:src/display.c **** 		return;
1981:src/display.c **** 	    }
1982:src/display.c **** 	  }
1983:src/display.c **** 	}		
1984:src/display.c **** #else
1985:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1986:src/display.c **** 	  if (State2.hms) {
1987:src/display.c **** 	    set_x_hms(z, res);
1988:src/display.c **** 	    State2.hms = 0;
1989:src/display.c **** 	    return;
1990:src/display.c **** 	  } else if (UState.fract) {
1991:src/display.c **** 	    if (set_x_fract(z, res))
1992:src/display.c **** 	      return;
1993:src/display.c **** 	  }
1994:src/display.c **** 	}
1995:src/display.c **** #endif
1996:src/display.c **** 
1997:src/display.c **** 	if (check_special_dn(z, res))
1998:src/display.c **** 	  return;
1999:src/display.c **** 
2000:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2001:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2002:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2003:src/display.c **** 	  z->exponent = 0;
2004:src/display.c **** 	}
2005:src/display.c **** 
2006:src/display.c **** 	xset(x, '\0', sizeof(x));
2007:src/display.c **** 
2008:src/display.c **** 	if (dn_eq0(z)) {
2009:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2010:src/display.c **** 	    x[0] = '-';
2011:src/display.c **** 	    x[1] = '0';
2012:src/display.c **** 	  } else
2013:src/display.c **** 	    x[0] = '0';
2014:src/display.c **** 	} else
2015:src/display.c **** 	  decNumberToString(z, x);
2016:src/display.c **** 
2017:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2018:src/display.c **** 	  show_x(x, exp);
2019:src/display.c **** 	  return;
2020:src/display.c **** 	}
2021:src/display.c **** 
2022:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2023:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2024:src/display.c **** 	  //  ALL mode: fill the display
2025:src/display.c **** 	  dd = *display_digits - 1;
2026:src/display.c **** 	else
2027:src/display.c **** 	  dd = dispdigs;
2028:src/display.c **** 
2029:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2030:src/display.c **** 	  int orig_mode = mode;
2031:src/display.c **** 
2032:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2033:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2034:src/display.c **** 	    // allow zeros to be trimmed
2035:src/display.c **** 	    trimzeros = 1;
2036:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/cc1e4Gjl.s 			page 113


2037:src/display.c **** 	    dd = *display_digits - 1;
2038:src/display.c ****  	}
2039:src/display.c **** #else
2040:src/display.c **** 	if (mode == MODE_STD) {
2041:src/display.c **** 	  mode = std_round_fix(z);
2042:src/display.c **** 	  trimzeros = 1;
2043:src/display.c **** 	  dd = *display_digits - 1;
2044:src/display.c **** 	} else if (dd >= *display_digits)
2045:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2046:src/display.c **** 	  dd = *display_digits - 1;
2047:src/display.c **** #endif
2048:src/display.c **** 
2049:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2050:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2051:src/display.c **** 
2052:src/display.c **** 	q = find_char(x, 'E');
2053:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2054:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2055:src/display.c **** 	if (q == NULL) exp = 0;
2056:src/display.c **** 	else {
2057:src/display.c **** 	  exp = s_to_i(q+1);
2058:src/display.c **** 	  if (*q == 'D') exp = -exp;
2059:src/display.c **** 	}
2060:src/display.c **** #else
2061:src/display.c **** 	if (q == NULL) exp = 0;
2062:src/display.c **** 	else exp = s_to_i(q+1);
2063:src/display.c **** #endif
2064:src/display.c **** 
2065:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2066:src/display.c **** 	for (q=x; *q == ' '; q++);
2067:src/display.c **** 	if (!res) {
2068:src/display.c **** 	  CLR_EXP_SIGN;
2069:src/display.c **** 	  CLR_MANT_SIGN;
2070:src/display.c **** 	}
2071:src/display.c **** 	if (*q == '-') {
2072:src/display.c **** 	  negative = 1;
2073:src/display.c **** 	  q++;
2074:src/display.c **** 	} else if (*q == '+')
2075:src/display.c **** 	  q++;
2076:src/display.c **** 	for (; *q == '0'; q++);
2077:src/display.c **** 	if (*q == '.') {
2078:src/display.c **** 	  do
2079:src/display.c **** 	    exp--;
2080:src/display.c **** 	  while (*++q == '0');
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2082:src/display.c **** 	    *p++ = *q++;
2083:src/display.c **** 	} else {
2084:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2085:src/display.c **** 	    *p++ = *q++;
2086:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2087:src/display.c **** 	    *p++ = *q++;
2088:src/display.c **** 	    exp++;
2089:src/display.c **** 	  }
2090:src/display.c **** 	  if (*q == '.') {
2091:src/display.c **** 	    q++;
2092:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2093:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 114


2094:src/display.c **** 	  }
2095:src/display.c **** 	}
2096:src/display.c **** 
2097:src/display.c **** 	if (mode == MODE_FIX) {
2098:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2099:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2100:src/display.c **** 	  else {
2101:src/display.c **** 	    extra_digits = exp;
2102:src/display.c **** 	    /* We might have push the fixed decimals off the
2103:src/display.c **** 	     * screen so adjust if so.
2104:src/display.c **** 	     */
2105:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2106:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2107:src/display.c **** 	  }
2108:src/display.c **** 	}
2109:src/display.c **** 
2110:src/display.c **** 	// Round the mantissa to the number of digits desired
2111:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2112:src/display.c **** 	if (*p >= '5') {	// Round up
2113:src/display.c **** 	  *p = '0';
2114:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2115:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2116:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2117:src/display.c **** 	    mantissa[0] = '1';
2118:src/display.c **** 	    exp++;
2119:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2120:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2121:src/display.c **** 	      extra_digits = 0;
2122:src/display.c **** 	    }
2123:src/display.c **** 	  } else {
2124:src/display.c **** 	    while (*--p == '9')
2125:src/display.c **** 	      *p = '0';
2126:src/display.c **** 	    (*p)++;
2127:src/display.c **** 	  }
2128:src/display.c **** 	}
2129:src/display.c **** 
2130:src/display.c **** 	// Zap what is left
2131:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2132:src/display.c **** 
2133:src/display.c **** 	p = mantissa;
2134:src/display.c **** 	switch (mode) {
2135:src/display.c **** 	default:
2136:src/display.c **** 	case MODE_STD:   
2137:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2138:src/display.c **** 	  if (count != *display_digits)
2139:src/display.c **** 	    count++;
2140:src/display.c **** 	  // Too big or too small to fit on display
2141:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2142:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2143:src/display.c **** 	    case -1:
2144:src/display.c **** 	    case 2:
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	      dd--;
2148:src/display.c **** 	      exp--;
2149:src/display.c **** 	    case -2:
2150:src/display.c **** 	    case 1:
ARM GAS  /tmp/cc1e4Gjl.s 			page 115


2151:src/display.c **** 	      *obp++ = *p++;
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	      dd--;
2154:src/display.c **** 	      exp--;
2155:src/display.c **** 	    case 0:
2156:src/display.c **** 	      ;
2157:src/display.c **** 	    };
2158:src/display.c **** 	    *obp++ = *p++;
2159:src/display.c **** 	    odig++;
2160:src/display.c **** 	    *obp++ = '.';
2161:src/display.c **** 	    for (i=1; i<count; i++) {
2162:src/display.c **** 	      *obp++ = *p++;
2163:src/display.c **** 	      odig++;
2164:src/display.c **** 	    }
2165:src/display.c **** 	    show_exp = 1;
2166:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2167:src/display.c **** 	    for(i=0; i<=exp; i++) {
2168:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2169:src/display.c **** 		*obp++ = ',';
2170:src/display.c **** 	      *obp++ = *p++;
2171:src/display.c **** 	      odig++;
2172:src/display.c **** 	    }
2173:src/display.c **** 	    *obp++ = '.';
2174:src/display.c **** 	    if (count > (exp + 1)) {
2175:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2176:src/display.c **** 		*obp++ = *p++;
2177:src/display.c **** 		odig++;
2178:src/display.c **** 	      }
2179:src/display.c **** 	    }
2180:src/display.c **** 	  } else {		// All digits to right of decimal point
2181:src/display.c **** 	    *obp++ = '0';
2182:src/display.c **** 	    odig++;
2183:src/display.c **** 	    *obp++ = '.';
2184:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2185:src/display.c **** 	      *obp++ = '0';
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	    for (i=0; i<count; i++) {
2189:src/display.c **** 	      *obp++ = *p++;
2190:src/display.c **** 	      odig++;
2191:src/display.c **** 	    }
2192:src/display.c **** 	  }
2193:src/display.c **** 	  break;
2194:src/display.c **** 
2195:src/display.c **** 	case MODE_FIX:
2196:src/display.c **** 	  j = 0;
2197:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2198:src/display.c **** 	    for (i=0; i<=exp; i++) {
2199:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2200:src/display.c **** 		*obp++ = ',';
2201:src/display.c **** 	      *obp++ = *p++;
2202:src/display.c **** 	      odig++;
2203:src/display.c **** 	    }
2204:src/display.c **** 	    *obp++ = '.';
2205:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2206:src/display.c **** 	      *obp++ = *p++;
2207:src/display.c **** 	      odig++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 116


2208:src/display.c **** 	    }
2209:src/display.c **** 	  } else {		// All digits to right of decimal point
2210:src/display.c **** 	    *obp++ = '0';
2211:src/display.c **** 	    odig++;
2212:src/display.c **** 	    *obp++ = '.';
2213:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2214:src/display.c **** 	      *obp++ = '0';
2215:src/display.c **** 	      odig++;
2216:src/display.c **** 	      dd--;
2217:src/display.c **** 	    }
2218:src/display.c **** 	    while (dd-- > 0) {
2219:src/display.c **** 	      *obp++ = *p++;
2220:src/display.c **** 	      odig++;
2221:src/display.c **** 	    }
2222:src/display.c **** 	  }
2223:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2224:src/display.c **** 	  if (trimzeros)
2225:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2226:src/display.c **** 	      obp--;
2227:src/display.c **** 	      odig--;
2228:src/display.c **** 	    }
2229:src/display.c **** #endif			
2230:src/display.c **** 	  break;
2231:src/display.c **** 
2232:src/display.c **** 	case MODE_ENG:
2233:src/display.c **** 	  switch (exp % 3) {
2234:src/display.c **** 	  case -1:
2235:src/display.c **** 	  case 2:
2236:src/display.c **** 	    *obp++ = *p++;
2237:src/display.c **** 	    odig++;
2238:src/display.c **** 	    dd--;
2239:src/display.c **** 	    exp--;
2240:src/display.c **** 	  case -2:
2241:src/display.c **** 	  case 1:
2242:src/display.c **** 	    *obp++ = *p++;
2243:src/display.c **** 	    odig++;
2244:src/display.c **** 	    dd--;
2245:src/display.c **** 	    exp--;
2246:src/display.c **** 	  case 0:
2247:src/display.c **** 	    ;
2248:src/display.c **** 	  };
2249:src/display.c **** 	  // Falling through
2250:src/display.c **** 
2251:src/display.c **** 	case MODE_SCI:
2252:src/display.c **** 	  *obp++ = *p++;
2253:src/display.c **** 	  odig++;
2254:src/display.c **** 	  *obp++ = '.';
2255:src/display.c **** 	  dd--;
2256:src/display.c **** 	  while (dd-- >= 0) {
2257:src/display.c **** 	    *obp++ = *p++;
2258:src/display.c **** 	    odig++;
2259:src/display.c **** 	  }
2260:src/display.c **** 	  show_exp = 1;
2261:src/display.c **** 	}
2262:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2263:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2264:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
ARM GAS  /tmp/cc1e4Gjl.s 			page 117


2265:src/display.c **** 	    obp--;
2266:src/display.c **** 	    odig--;
2267:src/display.c **** 	  }
2268:src/display.c **** #endif	
2269:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2270:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2271:src/display.c **** 	  set_x_dn(z, res, display_digits);
2272:src/display.c **** 	  return;
2273:src/display.c **** 	}
2274:src/display.c **** 	/* Finally, send the output to the display */
2275:src/display.c **** 	*obp = '\0';
2276:src/display.c **** 	if (odig > *display_digits)
2277:src/display.c **** 	  odig = *display_digits;
2278:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2279:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2280:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2281:src/display.c **** 	if (negative) {
2282:src/display.c **** 	  if (res) *res++ = '-';
2283:src/display.c **** 	  else {
2284:src/display.c **** 	    if (j == 0)
2285:src/display.c **** 	      SET_MANT_SIGN;
2286:src/display.c **** 	    else
2287:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2288:src/display.c **** 	  }
2289:src/display.c **** 	}
2290:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	  if (c == '.') {
2292:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2293:src/display.c **** 	  } else if (c == ',') {
2294:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2295:src/display.c **** 	  } else {
2296:src/display.c **** 	    res = set_dig_s(j, c, res);
2297:src/display.c **** 	    j += SEGS_PER_DIGIT;
2298:src/display.c **** 	  }
2299:src/display.c **** 	}
2300:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2301:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2302:src/display.c **** 	  if ( !res ) {
2303:src/display.c **** 	    set_exp(exp, 4, res);
2304:src/display.c **** 	  }
2305:src/display.c **** 	  else {
2306:src/display.c **** 	    set_exp(exp, 0, res);
2307:src/display.c **** 	  }
2308:src/display.c **** 	}
2309:src/display.c **** #else
2310:src/display.c **** 	if (show_exp)
2311:src/display.c **** 	  set_exp(exp, 0, res);
2312:src/display.c **** #endif
2313:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2314:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2315:src/display.c **** 	*display_digits = odig;
2316:src/display.c ****       }
2317:src/display.c **** 
2318:src/display.c **** #if defined(QTGUI) || defined(IOS)
2319:src/display.c ****       void format_display(char *buf) {
2320:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2321:src/display.c **** 	  {
ARM GAS  /tmp/cc1e4Gjl.s 			page 118


2322:src/display.c **** 	    const char *p = get_cmdline();
2323:src/display.c **** 	    if (p == NULL) {
2324:src/display.c **** 	      format_reg(regX_idx, buf);
2325:src/display.c **** 	    } else {
2326:src/display.c **** 	      scopy(buf, p);
2327:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2328:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2329:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2330:src/display.c **** 		buf[CmdLineEex] = 'E';
2331:src/display.c **** 		buf[CmdLineEex+1] = '-';
2332:src/display.c **** 	      }
2333:src/display.c **** #  endif
2334:src/display.c **** 	    }
2335:src/display.c **** 	  }
2336:src/display.c **** 	else {
2337:src/display.c **** 	  buf[0]=0;
2338:src/display.c **** 	}
2339:src/display.c ****       }
2340:src/display.c **** #endif
2341:src/display.c **** 
2342:src/display.c ****       void format_reg(int index, char *buf) {
2343:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2344:src/display.c **** 
2345:src/display.c **** 	if (is_intmode())
2346:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2347:src/display.c **** #ifndef HP16C_MODE_CHANGE
2348:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2349:src/display.c **** 	  decNumber x;
2350:src/display.c **** 	  int s;
2351:src/display.c **** 	  unsigned long long int v;
2352:src/display.c **** 
2353:src/display.c **** 	  getRegister(&x, index);
2354:src/display.c **** 	  v = dn_to_ull(&x, &s);
2355:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2356:src/display.c **** 	}
2357:src/display.c **** #endif
2358:src/display.c **** 	else
2359:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2360:src/display.c ****       }
2361:src/display.c **** 
2362:src/display.c ****       /* Display the status screen */
2363:src/display.c ****       static void show_status(void) {
2364:src/display.c **** 	int i, n;
2365:src/display.c **** 	int j = SEGS_EXP_BASE;
2366:src/display.c **** 	const int status = State2.status - 3;
2367:src/display.c **** 	char buf[16], *p = buf;
2368:src/display.c **** 	unsigned int pc;
2369:src/display.c **** 
2370:src/display.c **** 	if (status == -2) {
2371:src/display.c **** 	  set_status("Free:");
2372:src/display.c **** 	  p = num_arg(buf, free_mem());
2373:src/display.c **** 	  p = scopy(p, " , FL. ");
2374:src/display.c **** 	  p = num_arg(p, free_flash());
2375:src/display.c **** 	  *p = '\0';
2376:src/display.c **** 	  set_digits_string(buf, 0);
2377:src/display.c **** 	}
2378:src/display.c **** 	else if (status == -1) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 119


2379:src/display.c **** 	  /* Top line */
2380:src/display.c **** 	  p = scopy(buf, "Regs:");
2381:src/display.c **** 	  if (SizeStatRegs)
2382:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2383:src/display.c **** 	  *p = '\0';
2384:src/display.c **** 	  set_status(buf);
2385:src/display.c **** 
2386:src/display.c **** 	  /* Bottom line */
2387:src/display.c **** 	  p = num_arg(buf, global_regs());
2388:src/display.c **** 	  if (LocalRegs < 0) {
2389:src/display.c **** 	    p = scopy(p, " , Loc. ");
2390:src/display.c **** 	    p = num_arg(p, local_regs());
2391:src/display.c **** 	  }
2392:src/display.c **** 	  *p = '\0';
2393:src/display.c **** 	  set_digits_string(buf, 0);
2394:src/display.c **** 	} else {
2395:src/display.c **** 	  int base;
2396:src/display.c **** 	  int end;
2397:src/display.c **** 	  int group = 10;
2398:src/display.c **** 	  int start = 0;
2399:src/display.c **** 		
2400:src/display.c **** 	  if (status <= 9) {
2401:src/display.c **** 	    base = 10 * status;
2402:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2403:src/display.c **** 	    p = scopy(buf, "FL ");
2404:src/display.c **** 	    p = num_arg_0(p, base, 2);
2405:src/display.c **** 	    *p++ = '-';
2406:src/display.c **** 	    p = num_arg_0(p, end, 2);
2407:src/display.c **** 	    *p = '\0';
2408:src/display.c **** 	    set_status(buf);
2409:src/display.c **** 	  }
2410:src/display.c **** 	  else if (status == 10) {
2411:src/display.c **** 	    base = regX_idx;
2412:src/display.c **** 	    end = regK_idx;
2413:src/display.c **** 	    start = 3;
2414:src/display.c **** 	    group = 4;
2415:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2416:src/display.c **** 	  }
2417:src/display.c **** 	  else { // status == 11
2418:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2419:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2420:src/display.c **** 	    set_status("FL.00-.15");
2421:src/display.c **** 	  }
2422:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2423:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2424:src/display.c **** 	  j += SEGS_PER_DIGIT;
2425:src/display.c **** 	  for (i = start; i < group + start; i++) {
2426:src/display.c **** 	    int k = i + base - start;
2427:src/display.c **** 	    int l = get_user_flag(k);
2428:src/display.c **** 	    k += group;
2429:src/display.c **** 	    if (end >= k) {
2430:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2431:src/display.c **** 	      k += group;
2432:src/display.c **** 	      if (end >= k)
2433:src/display.c **** 		l |= (get_user_flag(k) << 2);
2434:src/display.c **** 	    }
2435:src/display.c **** 	    set_dig(j, l);
ARM GAS  /tmp/cc1e4Gjl.s 			page 120


2436:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	    j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    if (i == 4) {
2439:src/display.c **** 	      set_dig(j, 8);
2440:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2441:src/display.c **** 	      j += SEGS_PER_DIGIT;
2442:src/display.c **** 	    }
2443:src/display.c **** 	  }
2444:src/display.c **** 	}
2445:src/display.c **** 
2446:src/display.c **** 	j = SEGS_EXP_BASE;
2447:src/display.c **** 	pc = state_pc();
2448:src/display.c **** 	if (isXROM(pc))
2449:src/display.c **** 	  pc = 1;
2450:src/display.c **** 	for (n=i=0; i<4; i++) {
2451:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2452:src/display.c **** 	    if (++n == 4) {
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2455:src/display.c **** 	    } else {
2456:src/display.c **** 	      set_dig(j, 'A'+i);
2457:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2458:src/display.c **** 	    }
2459:src/display.c **** 	  }
2460:src/display.c **** 	}
2461:src/display.c ****       }
2462:src/display.c **** 
2463:src/display.c **** 
2464:src/display.c ****       /* Display the list of alpha labels */
2465:src/display.c ****       static void show_label(void) {
2466:src/display.c **** 	char buf[16];
2467:src/display.c **** 	unsigned short int pc = State2.digval;
2468:src/display.c **** 	unsigned int op = getprog(pc);
2469:src/display.c **** 	int n = nLIB(pc);
2470:src/display.c **** 	unsigned short int lblpc;
2471:src/display.c **** 
2472:src/display.c **** 	set_status(prt((opcode)op, buf));
2473:src/display.c **** 	set_digits_string(libname[n], 0);
2474:src/display.c **** #ifndef REALBUILD
2475:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2476:src/display.c **** #endif
2477:src/display.c **** 
2478:src/display.c **** 	if (op & OP_DBL) {
2479:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2480:src/display.c **** 	  if (lblpc != pc) {
2481:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2482:src/display.c **** 	    n = nLIB(lblpc);
2483:src/display.c **** 	    if (n == REGION_RAM)
2484:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2485:src/display.c **** 	    else {
2486:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2487:src/display.c **** #ifndef REALBUILD
2488:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2489:src/display.c **** #endif
2490:src/display.c **** 	    }
2491:src/display.c **** 	  }
2492:src/display.c **** 	}
ARM GAS  /tmp/cc1e4Gjl.s 			page 121


2493:src/display.c ****       }
2494:src/display.c **** 
2495:src/display.c ****       /* Display a list of register contents */
2496:src/display.c ****       static void show_registers(void) {
2497:src/display.c **** 	char buf[16], *bp;
2498:src/display.c **** 	int n = State2.digval;
2499:src/display.c **** 	
2500:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2501:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2502:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2503:src/display.c **** 	  n;
2504:src/display.c **** #else
2505:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2506:src/display.c **** 	  n;
2507:src/display.c **** #endif
2508:src/display.c **** 
2509:src/display.c **** 	if (State2.disp_as_alpha) {
2510:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2511:src/display.c **** 	}
2512:src/display.c **** 	else {
2513:src/display.c **** 	  xset(buf, '\0', 16);
2514:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2515:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2516:src/display.c **** #else
2517:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2518:src/display.c **** #endif
2519:src/display.c **** 	  if (State2.local) {
2520:src/display.c **** 	    *bp++ = '.';
2521:src/display.c **** 	    if (n >= 100) {
2522:src/display.c **** 	      *bp++ = '1';
2523:src/display.c **** 	      n -= 100;
2524:src/display.c **** 	    }
2525:src/display.c **** 	  }
2526:src/display.c **** 	  if (n < 100)
2527:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2528:src/display.c **** 	  else
2529:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2530:src/display.c **** 	  set_status(buf);
2531:src/display.c **** 	}
2532:src/display.c **** 	format_reg(reg, CNULL);
2533:src/display.c ****       }
2534:src/display.c **** 
2535:src/display.c **** 
2536:src/display.c ****       static void set_annunciators(void)
2537:src/display.c ****       {
 3422              		.loc 1 2537 7 is_stmt 1 view -0
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 0
 3425              		@ frame_needed = 0, uses_anonymous_args = 0
2538:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3426              		.loc 1 2538 2 view .LVU1036
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3427              		.loc 1 2537 7 is_stmt 0 view .LVU1037
 3428 0000 70B5     		push	{r4, r5, r6, lr}
 3429              		.cfi_def_cfa_offset 16
 3430              		.cfi_offset 4, -16
 3431              		.cfi_offset 5, -12
ARM GAS  /tmp/cc1e4Gjl.s 			page 122


 3432              		.cfi_offset 6, -8
 3433              		.cfi_offset 14, -4
2539:src/display.c **** 
2540:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2541:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2542:src/display.c **** 	 * browsing constants.
2543:src/display.c **** 	 */
2544:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2545:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2546:src/display.c **** #else
2547:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
 3434              		.loc 1 2547 11 view .LVU1038
 3435 0002 344E     		ldr	r6, .L348
2538:src/display.c **** 
 3436              		.loc 1 2538 29 view .LVU1039
 3437 0004 FFF7FEFF 		bl	get_trig_mode
 3438              	.LVL389:
 3439              		.loc 1 2547 11 view .LVU1040
 3440 0008 3368     		ldr	r3, [r6]
 3441              		.loc 1 2547 2 view .LVU1041
 3442 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3443 000e 012B     		cmp	r3, #1
2538:src/display.c **** 
 3444              		.loc 1 2538 29 view .LVU1042
 3445 0010 0446     		mov	r4, r0
 3446              	.LVL390:
 3447              		.loc 1 2547 2 is_stmt 1 view .LVU1043
 3448              	.LBB294:
 3449              	.LBB295:
 340:src/display.c ****   else	clr_dot(n);
 3450              		.loc 1 340 11 is_stmt 0 view .LVU1044
 3451 0012 4FF08800 		mov	r0, #136
 3452              	.LBE295:
 3453              	.LBE294:
 3454              		.loc 1 2547 2 view .LVU1045
 3455 0016 03D8     		bhi	.L323
 3456              		.loc 1 2547 30 discriminator 1 view .LVU1046
 3457 0018 2F4B     		ldr	r3, .L348+4
 3458              		.loc 1 2547 2 discriminator 1 view .LVU1047
 3459 001a 1B68     		ldr	r3, [r3]
 3460 001c 002B     		cmp	r3, #0
 3461 001e 56D0     		beq	.L344
 3462              	.L323:
 3463              	.LVL391:
 3464              	.LBB298:
 3465              	.LBI294:
 339:src/display.c ****   if (on)	set_dot(n);
 3466              		.loc 1 339 6 is_stmt 1 view .LVU1048
 3467              	.LBB296:
 340:src/display.c ****   else	clr_dot(n);
 3468              		.loc 1 340 3 view .LVU1049
 341:src/display.c **** }
 3469              		.loc 1 341 8 view .LVU1050
 3470 0020 FFF7FEFF 		bl	clr_dot
 3471              	.LVL392:
 3472              	.L324:
 341:src/display.c **** }
ARM GAS  /tmp/cc1e4Gjl.s 			page 123


 3473              		.loc 1 341 8 is_stmt 0 view .LVU1051
 3474              	.LBE296:
 3475              	.LBE298:
2548:src/display.c **** #endif
2549:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
 3476              		.loc 1 2549 2 is_stmt 1 view .LVU1052
 3477              		.loc 1 2549 19 is_stmt 0 view .LVU1053
 3478 0024 2D4D     		ldr	r5, .L348+8
 3479              		.loc 1 2549 2 view .LVU1054
 3480 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3481              	.LBB299:
 3482              	.LBB300:
 340:src/display.c ****   else	clr_dot(n);
 3483              		.loc 1 340 11 view .LVU1055
 3484 0028 8620     		movs	r0, #134
 3485              	.LBE300:
 3486              	.LBE299:
 3487              		.loc 1 2549 2 view .LVU1056
 3488 002a 23B9     		cbnz	r3, .L325
 3489              		.loc 1 2549 47 discriminator 2 view .LVU1057
 3490 002c 6A69     		ldr	r2, [r5, #20]
 3491 002e 2C4B     		ldr	r3, .L348+12
 3492 0030 1340     		ands	r3, r3, r2
 3493              		.loc 1 2549 2 discriminator 2 view .LVU1058
 3494 0032 002B     		cmp	r3, #0
 3495 0034 48D0     		beq	.L345
 3496              	.L325:
 3497              	.LBB303:
 3498              	.LBB301:
 340:src/display.c ****   else	clr_dot(n);
 3499              		.loc 1 340 11 is_stmt 1 view .LVU1059
 3500 0036 FFF7FEFF 		bl	set_dot
 3501              	.LVL393:
 3502              	.L326:
 3503              	.LBE301:
 3504              	.LBE303:
2550:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3505              		.loc 1 2550 2 view .LVU1060
 3506              		.loc 1 2550 31 is_stmt 0 view .LVU1061
 3507 003a 2A4A     		ldr	r2, .L348+16
 3508 003c 6B69     		ldr	r3, [r5, #20]
 3509              		.loc 1 2550 2 view .LVU1062
 3510 003e 1A42     		tst	r2, r3
 3511              	.LBB304:
 3512              	.LBB305:
 340:src/display.c ****   else	clr_dot(n);
 3513              		.loc 1 340 11 view .LVU1063
 3514 0040 4FF08500 		mov	r0, #133
 3515              	.LBE305:
 3516              	.LBE304:
 3517              		.loc 1 2550 2 view .LVU1064
 3518 0044 02D0     		beq	.L327
 3519              		.loc 1 2550 48 discriminator 1 view .LVU1065
 3520 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 3521              		.loc 1 2550 2 discriminator 1 view .LVU1066
 3522 0048 DA06     		lsls	r2, r3, #27
 3523 004a 3AD4     		bmi	.L328
ARM GAS  /tmp/cc1e4Gjl.s 			page 124


 3524              	.L327:
 3525              	.LVL394:
 3526              	.LBB308:
 3527              	.LBI304:
 339:src/display.c ****   if (on)	set_dot(n);
 3528              		.loc 1 339 6 is_stmt 1 view .LVU1067
 3529              	.LBB306:
 340:src/display.c ****   else	clr_dot(n);
 3530              		.loc 1 340 3 view .LVU1068
 341:src/display.c **** }
 3531              		.loc 1 341 8 view .LVU1069
 3532 004c FFF7FEFF 		bl	clr_dot
 3533              	.LVL395:
 3534              	.L329:
 341:src/display.c **** }
 3535              		.loc 1 341 8 is_stmt 0 view .LVU1070
 3536              	.LBE306:
 3537              	.LBE308:
2551:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3538              		.loc 1 2551 2 is_stmt 1 view .LVU1071
 3539 0050 6820     		movs	r0, #104
 3540 0052 FFF7FEFF 		bl	get_user_flag
 3541              	.LVL396:
 3542              	.LBB309:
 3543              	.LBI309:
 339:src/display.c ****   if (on)	set_dot(n);
 3544              		.loc 1 339 6 view .LVU1072
 3545              	.LBB310:
 340:src/display.c ****   else	clr_dot(n);
 3546              		.loc 1 340 3 view .LVU1073
 340:src/display.c ****   else	clr_dot(n);
 3547              		.loc 1 340 6 is_stmt 0 view .LVU1074
 3548 0056 28B3     		cbz	r0, .L330
 340:src/display.c ****   else	clr_dot(n);
 3549              		.loc 1 340 11 is_stmt 1 view .LVU1075
 3550              	.LBE310:
 3551              	.LBE309:
 3552              	.LBB314:
 3553              	.LBB315:
2552:src/display.c **** 	set_IO_annunciator();
2553:src/display.c **** 
2554:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2555:src/display.c **** 	 */
2556:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2557:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2558:src/display.c ****       }
2559:src/display.c **** 
2560:src/display.c **** 
2561:src/display.c ****       /*
2562:src/display.c ****        *  Toggle the little "=" sign
2563:src/display.c ****        */
2564:src/display.c ****       void set_IO_annunciator(void) {
2565:src/display.c **** #ifndef DM42
2566:src/display.c **** 	int on = SerialOn
2567:src/display.c **** #endif
2568:src/display.c **** #ifdef DM42
2569:src/display.c **** 	  int on = 0
ARM GAS  /tmp/cc1e4Gjl.s 			page 125


2570:src/display.c **** #endif
2571:src/display.c **** #ifdef REALBUILD
2572:src/display.c **** 	  || DebugFlag
2573:src/display.c **** #endif
2574:src/display.c **** #ifdef INFRARED
2575:src/display.c **** 	  || PrinterColumn != 0
2576:src/display.c **** #endif
2577:src/display.c **** 	  ;
2578:src/display.c **** 
2579:src/display.c **** 	if (on != IoAnnunciator) {
 3554              		.loc 1 2579 9 is_stmt 0 view .LVU1076
 3555 0058 234D     		ldr	r5, .L348+20
 3556              	.LBE315:
 3557              	.LBE314:
 3558              	.LBB323:
 3559              	.LBB311:
 340:src/display.c ****   else	clr_dot(n);
 3560              		.loc 1 340 11 view .LVU1077
 3561 005a 8320     		movs	r0, #131
 3562              	.LVL397:
 340:src/display.c ****   else	clr_dot(n);
 3563              		.loc 1 340 11 view .LVU1078
 3564 005c FFF7FEFF 		bl	set_dot
 3565              	.LVL398:
 340:src/display.c ****   else	clr_dot(n);
 3566              		.loc 1 340 11 view .LVU1079
 3567              	.LBE311:
 3568              	.LBE323:
2552:src/display.c **** 	set_IO_annunciator();
 3569              		.loc 1 2552 2 is_stmt 1 view .LVU1080
 3570              	.LBB324:
 3571              	.LBI314:
2564:src/display.c **** #ifndef DM42
 3572              		.loc 1 2564 12 view .LVU1081
 3573              	.LBB320:
2569:src/display.c **** #endif
 3574              		.loc 1 2569 4 view .LVU1082
 3575              		.loc 1 2579 2 view .LVU1083
 3576              		.loc 1 2579 5 is_stmt 0 view .LVU1084
 3577 0060 2B68     		ldr	r3, [r5]
 3578 0062 33BB     		cbnz	r3, .L346
 3579              	.L332:
 3580              	.LBE320:
 3581              	.LBE324:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3582              		.loc 1 2556 2 is_stmt 1 view .LVU1085
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3583              		.loc 1 2556 11 is_stmt 0 view .LVU1086
 3584 0064 3368     		ldr	r3, [r6]
 3585 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3586 006a 03F00103 		and	r3, r3, #1
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3587              		.loc 1 2556 2 view .LVU1087
 3588 006e 2343     		orrs	r3, r3, r4
 3589 0070 13F0FF0F 		tst	r3, #255
 3590              	.LBB325:
 3591              	.LBB326:
ARM GAS  /tmp/cc1e4Gjl.s 			page 126


 340:src/display.c ****   else	clr_dot(n);
 3592              		.loc 1 340 11 view .LVU1088
 3593 0074 4FF08C00 		mov	r0, #140
 3594              	.LBE326:
 3595              	.LBE325:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3596              		.loc 1 2556 2 view .LVU1089
 3597 0078 06D1     		bne	.L347
 3598              	.LVL399:
 3599              	.LBB329:
 3600              	.LBI325:
 339:src/display.c ****   if (on)	set_dot(n);
 3601              		.loc 1 339 6 is_stmt 1 view .LVU1090
 3602              	.LBB327:
 340:src/display.c ****   else	clr_dot(n);
 3603              		.loc 1 340 3 view .LVU1091
 340:src/display.c ****   else	clr_dot(n);
 3604              		.loc 1 340 11 view .LVU1092
 3605 007a FFF7FEFF 		bl	set_dot
 3606              	.LVL400:
 340:src/display.c ****   else	clr_dot(n);
 3607              		.loc 1 340 11 is_stmt 0 view .LVU1093
 3608              	.LBE327:
 3609              	.LBE329:
2557:src/display.c ****       }
 3610              		.loc 1 2557 2 is_stmt 1 view .LVU1094
 3611              	.L335:
 3612              	.LBB330:
 3613              	.LBI330:
 339:src/display.c ****   if (on)	set_dot(n);
 3614              		.loc 1 339 6 view .LVU1095
 3615              	.LBB331:
 340:src/display.c ****   else	clr_dot(n);
 3616              		.loc 1 340 3 view .LVU1096
 341:src/display.c **** }
 3617              		.loc 1 341 8 view .LVU1097
 3618              	.LBE331:
 3619              	.LBE330:
2558:src/display.c **** 
 3620              		.loc 1 2558 7 is_stmt 0 view .LVU1098
 3621 007e BDE87040 		pop	{r4, r5, r6, lr}
 3622              		.cfi_remember_state
 3623              		.cfi_restore 14
 3624              		.cfi_restore 6
 3625              		.cfi_restore 5
 3626              		.cfi_restore 4
 3627              		.cfi_def_cfa_offset 0
 3628              	.LVL401:
 3629              	.LBB335:
 3630              	.LBB332:
 341:src/display.c **** }
 3631              		.loc 1 341 8 view .LVU1099
 3632 0082 8B20     		movs	r0, #139
 3633 0084 FFF7FEBF 		b	clr_dot
 3634              	.LVL402:
 3635              	.L347:
 3636              		.cfi_restore_state
ARM GAS  /tmp/cc1e4Gjl.s 			page 127


 341:src/display.c **** }
 3637              		.loc 1 341 8 view .LVU1100
 3638              	.LBE332:
 3639              	.LBE335:
 3640              	.LBB336:
 339:src/display.c ****   if (on)	set_dot(n);
 3641              		.loc 1 339 6 is_stmt 1 view .LVU1101
 3642              	.LBB328:
 340:src/display.c ****   else	clr_dot(n);
 3643              		.loc 1 340 3 view .LVU1102
 341:src/display.c **** }
 3644              		.loc 1 341 8 view .LVU1103
 3645 0088 FFF7FEFF 		bl	clr_dot
 3646              	.LVL403:
 341:src/display.c **** }
 3647              		.loc 1 341 8 is_stmt 0 view .LVU1104
 3648              	.LBE328:
 3649              	.LBE336:
2557:src/display.c ****       }
 3650              		.loc 1 2557 2 is_stmt 1 view .LVU1105
2557:src/display.c ****       }
 3651              		.loc 1 2557 11 is_stmt 0 view .LVU1106
 3652 008c 3368     		ldr	r3, [r6]
 3653 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2557:src/display.c ****       }
 3654              		.loc 1 2557 2 view .LVU1107
 3655 0092 DB07     		lsls	r3, r3, #31
 3656 0094 F3D4     		bmi	.L335
2557:src/display.c ****       }
 3657              		.loc 1 2557 2 discriminator 1 view .LVU1108
 3658 0096 012C     		cmp	r4, #1
 3659 0098 F1D1     		bne	.L335
 3660              	.LVL404:
 3661              	.LBB337:
 339:src/display.c ****   if (on)	set_dot(n);
 3662              		.loc 1 339 6 is_stmt 1 view .LVU1109
 3663              	.LBB333:
 340:src/display.c ****   else	clr_dot(n);
 3664              		.loc 1 340 3 view .LVU1110
 340:src/display.c ****   else	clr_dot(n);
 3665              		.loc 1 340 11 view .LVU1111
 3666              	.LBE333:
 3667              	.LBE337:
2558:src/display.c **** 
 3668              		.loc 1 2558 7 is_stmt 0 view .LVU1112
 3669 009a BDE87040 		pop	{r4, r5, r6, lr}
 3670              		.cfi_remember_state
 3671              		.cfi_restore 14
 3672              		.cfi_restore 6
 3673              		.cfi_restore 5
 3674              		.cfi_restore 4
 3675              		.cfi_def_cfa_offset 0
 3676              	.LVL405:
 3677              	.LBB338:
 3678              	.LBB334:
 340:src/display.c ****   else	clr_dot(n);
 3679              		.loc 1 340 11 view .LVU1113
ARM GAS  /tmp/cc1e4Gjl.s 			page 128


 3680 009e 8B20     		movs	r0, #139
 3681 00a0 FFF7FEBF 		b	set_dot
 3682              	.LVL406:
 3683              	.L330:
 3684              		.cfi_restore_state
 340:src/display.c ****   else	clr_dot(n);
 3685              		.loc 1 340 11 view .LVU1114
 3686              	.LBE334:
 3687              	.LBE338:
 3688              	.LBB339:
 3689              	.LBB312:
 341:src/display.c **** }
 3690              		.loc 1 341 8 is_stmt 1 view .LVU1115
 3691              	.LBE312:
 3692              	.LBE339:
 3693              	.LBB340:
 3694              	.LBB321:
 3695              		.loc 1 2579 9 is_stmt 0 view .LVU1116
 3696 00a4 104D     		ldr	r5, .L348+20
 3697              	.LBE321:
 3698              	.LBE340:
 3699              	.LBB341:
 3700              	.LBB313:
 341:src/display.c **** }
 3701              		.loc 1 341 8 view .LVU1117
 3702 00a6 8320     		movs	r0, #131
 3703              	.LVL407:
 341:src/display.c **** }
 3704              		.loc 1 341 8 view .LVU1118
 3705 00a8 FFF7FEFF 		bl	clr_dot
 3706              	.LVL408:
 341:src/display.c **** }
 3707              		.loc 1 341 8 view .LVU1119
 3708              	.LBE313:
 3709              	.LBE341:
2552:src/display.c **** 
 3710              		.loc 1 2552 2 is_stmt 1 view .LVU1120
 3711              	.LBB342:
2564:src/display.c **** #ifndef DM42
 3712              		.loc 1 2564 12 view .LVU1121
 3713              	.LBB322:
2569:src/display.c **** #endif
 3714              		.loc 1 2569 4 view .LVU1122
 3715              		.loc 1 2579 2 view .LVU1123
 3716              		.loc 1 2579 5 is_stmt 0 view .LVU1124
 3717 00ac 2B68     		ldr	r3, [r5]
 3718 00ae 002B     		cmp	r3, #0
 3719 00b0 D8D0     		beq	.L332
 3720              	.L346:
 3721              	.LBB316:
 3722              	.LBI316:
2564:src/display.c **** #ifndef DM42
 3723              		.loc 1 2564 12 is_stmt 1 view .LVU1125
 3724              	.LBB317:
2580:src/display.c **** 	  dot(LIT_EQ, on);
 3725              		.loc 1 2580 4 view .LVU1126
 3726              	.LVL409:
ARM GAS  /tmp/cc1e4Gjl.s 			page 129


 3727              	.LBB318:
 3728              	.LBI318:
 339:src/display.c ****   if (on)	set_dot(n);
 3729              		.loc 1 339 6 view .LVU1127
 3730              	.LBB319:
 340:src/display.c ****   else	clr_dot(n);
 3731              		.loc 1 340 3 view .LVU1128
 341:src/display.c **** }
 3732              		.loc 1 341 8 view .LVU1129
 3733 00b2 8420     		movs	r0, #132
 3734 00b4 FFF7FEFF 		bl	clr_dot
 3735              	.LVL410:
 341:src/display.c **** }
 3736              		.loc 1 341 8 is_stmt 0 view .LVU1130
 3737              	.LBE319:
 3738              	.LBE318:
2581:src/display.c **** 	  IoAnnunciator = on;
 3739              		.loc 1 2581 4 is_stmt 1 view .LVU1131
 3740              		.loc 1 2581 18 is_stmt 0 view .LVU1132
 3741 00b8 0023     		movs	r3, #0
 3742 00ba 2B60     		str	r3, [r5]
2582:src/display.c **** 	  finish_display(); //LIT_EQ
 3743              		.loc 1 2582 4 is_stmt 1 view .LVU1133
 3744 00bc FFF7FEFF 		bl	finish_display
 3745              	.LVL411:
2583:src/display.c **** 	}
2584:src/display.c ****       }
 3746              		.loc 1 2584 7 is_stmt 0 view .LVU1134
 3747 00c0 D0E7     		b	.L332
 3748              	.LVL412:
 3749              	.L328:
 3750              		.loc 1 2584 7 view .LVU1135
 3751              	.LBE317:
 3752              	.LBE316:
 3753              	.LBE322:
 3754              	.LBE342:
 3755              	.LBB343:
 339:src/display.c ****   if (on)	set_dot(n);
 3756              		.loc 1 339 6 is_stmt 1 view .LVU1136
 3757              	.LBB307:
 340:src/display.c ****   else	clr_dot(n);
 3758              		.loc 1 340 3 view .LVU1137
 340:src/display.c ****   else	clr_dot(n);
 3759              		.loc 1 340 11 view .LVU1138
 3760 00c2 FFF7FEFF 		bl	set_dot
 3761              	.LVL413:
 3762 00c6 C3E7     		b	.L329
 3763              	.LVL414:
 3764              	.L345:
 340:src/display.c ****   else	clr_dot(n);
 3765              		.loc 1 340 11 is_stmt 0 view .LVU1139
 3766              	.LBE307:
 3767              	.LBE343:
 3768              	.LBB344:
 3769              	.LBI299:
 339:src/display.c ****   if (on)	set_dot(n);
 3770              		.loc 1 339 6 is_stmt 1 view .LVU1140
ARM GAS  /tmp/cc1e4Gjl.s 			page 130


 3771              	.LBB302:
 340:src/display.c ****   else	clr_dot(n);
 3772              		.loc 1 340 3 view .LVU1141
 341:src/display.c **** }
 3773              		.loc 1 341 8 view .LVU1142
 3774 00c8 FFF7FEFF 		bl	clr_dot
 3775              	.LVL415:
 3776 00cc B5E7     		b	.L326
 3777              	.LVL416:
 3778              	.L344:
 341:src/display.c **** }
 3779              		.loc 1 341 8 is_stmt 0 view .LVU1143
 3780              	.LBE302:
 3781              	.LBE344:
 3782              	.LBB345:
 339:src/display.c ****   if (on)	set_dot(n);
 3783              		.loc 1 339 6 is_stmt 1 view .LVU1144
 3784              	.LBB297:
 340:src/display.c ****   else	clr_dot(n);
 3785              		.loc 1 340 3 view .LVU1145
 340:src/display.c ****   else	clr_dot(n);
 3786              		.loc 1 340 11 view .LVU1146
 3787 00ce FFF7FEFF 		bl	set_dot
 3788              	.LVL417:
 3789 00d2 A7E7     		b	.L324
 3790              	.L349:
 3791              		.align	2
 3792              	.L348:
 3793 00d4 00000000 		.word	main_ram
 3794 00d8 00000000 		.word	Running
 3795 00dc 00000000 		.word	StateWhileOn
 3796 00e0 07000800 		.word	524295
 3797 00e4 00080800 		.word	526336
 3798 00e8 00000000 		.word	IoAnnunciator
 3799              	.LBE297:
 3800              	.LBE345:
 3801              		.cfi_endproc
 3802              	.LFE32:
 3804              		.section	.text.s_s_sized.constprop.0,"ax",%progbits
 3805              		.align	1
 3806              		.p2align 2,,3
 3807              		.syntax unified
 3808              		.thumb
 3809              		.thumb_func
 3810              		.fpu fpv4-sp-d16
 3812              	s_s_sized.constprop.0:
 3813              	.LVL418:
 3814              	.LFB56:
2585:src/display.c **** 
2586:src/display.c **** #ifdef TOP_ROW
2587:src/display.c ****       /*
2588:src/display.c ****        *  Update the display
2589:src/display.c ****        */
2590:src/display.c ****       void display(void) {
2591:src/display.c **** 	int i, j;
2592:src/display.c **** 	char buf[40], *bp = buf;
2593:src/display.c **** 	const char *p;
ARM GAS  /tmp/cc1e4Gjl.s 			page 131


2594:src/display.c **** 	int annuc = 0;
2595:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2596:src/display.c **** 	int skip = 0;
2597:src/display.c **** 	int x_disp = 0;
2598:src/display.c **** 	const int shift = cur_shift();
2599:src/display.c **** 
2600:src/display.c **** 	no_status_top = 0;
2601:src/display.c **** 	if (State2.disp_freeze) {
2602:src/display.c **** 	  State2.disp_freeze = 0;
2603:src/display.c **** 	  State2.disp_temp = 1;
2604:src/display.c **** #ifdef CONSOLE
2605:src/display.c **** 	  JustDisplayed = 1;
2606:src/display.c **** #endif
2607:src/display.c **** 	  ShowRPN = 0;
2608:src/display.c **** 	  return;
2609:src/display.c **** 	}
2610:src/display.c **** 
2611:src/display.c **** 	if (WasDataEntry) {
2612:src/display.c **** #if defined(QTGUI) || defined(IOS)
2613:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2614:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2615:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2616:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2617:src/display.c **** #endif
2618:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2619:src/display.c **** 
2620:src/display.c **** 	  // Erase 7-segment display
2621:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2622:src/display.c **** 	    clr_dot(i);
2623:src/display.c **** 	  }
2624:src/display.c **** 	  goto only_update_x;
2625:src/display.c **** 	}
2626:src/display.c **** #ifdef INCLUDE_YREG_CODE
2627:src/display.c **** #  ifdef YREG_ALWAYS_ON
2628:src/display.c **** 	const int yreg_enabled = 1;
2629:src/display.c **** #  else
2630:src/display.c **** 	const int yreg_enabled = UState.show_y;
2631:src/display.c **** #  endif
2632:src/display.c **** #else
2633:src/display.c **** 	const int yreg_enabled = 0;
2634:src/display.c **** #endif
2635:src/display.c **** 	// Clear display
2636:src/display.c **** 	reset_disp();
2637:src/display.c **** 
2638:src/display.c **** 	
2639:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2640:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2641:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2642:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2643:src/display.c **** 	/*   set_status(buf); */
2644:src/display.c **** 	/* } */
2645:src/display.c **** 	if (State2.version) {
2646:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2647:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2648:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2649:src/display.c **** #ifndef REALBUILD
2650:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
ARM GAS  /tmp/cc1e4Gjl.s 			page 132


2651:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2652:src/display.c **** #endif
2653:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2654:src/display.c **** 	  set_status(vers);
2655:src/display.c **** 	  skip = 1;
2656:src/display.c **** 	  goto nostk;
2657:src/display.c **** 	} else if (State2.confirm) {
2658:src/display.c **** 	  if (yreg_enabled) {
2659:src/display.c **** 	    set_status_top(S_SURE);
2660:src/display.c **** 	    no_status_top = 1;
2661:src/display.c **** 	    annuc = 1;
2662:src/display.c **** 	  }
2663:src/display.c **** 	  else {
2664:src/display.c **** 	    set_status(S_SURE);
2665:src/display.c **** 	  }
2666:src/display.c **** 	} else if (State2.hyp) {
2667:src/display.c **** 	  bp = scopy(bp, "HYP");
2668:src/display.c **** 	  if (! State2.dot)
2669:src/display.c **** 	    *bp++ = '\235';
2670:src/display.c **** 	  if (yreg_enabled) {
2671:src/display.c **** 	    set_status_top(buf);
2672:src/display.c **** 	    no_status_top = 1;
2673:src/display.c **** 	    annuc = 1;
2674:src/display.c **** 	  }
2675:src/display.c **** 	  else {
2676:src/display.c **** 	    set_status(buf);
2677:src/display.c **** 	  }
2678:src/display.c **** 	} else if (State2.gtodot) {
2679:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2680:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2681:src/display.c **** 	  if (State2.numdigit > 0)
2682:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2683:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2684:src/display.c **** 	  *bp++ = '_';
2685:src/display.c **** 	  if (yreg_enabled) {
2686:src/display.c **** 	    set_status_top(buf);
2687:src/display.c **** 	    no_status_top = 1;
2688:src/display.c **** 	    annuc = 1;
2689:src/display.c **** 	  }
2690:src/display.c **** 	  else {
2691:src/display.c **** 	    set_status(buf);
2692:src/display.c **** 	  }
2693:src/display.c **** 	} else if (State2.rarg) {
2694:src/display.c **** 	  /* Commands with arguments */
2695:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2696:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2697:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2698:src/display.c **** #endif
2699:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2700:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2701:src/display.c **** 	  if (State2.dot) {
2702:src/display.c **** 	    *bp++ = 's';
2703:src/display.c **** 	    *bp++ = '_';
2704:src/display.c **** 	  } else if (shift == SHIFT_F) {
2705:src/display.c **** 	    *bp++ = '\021';
2706:src/display.c **** 	    *bp++ = '_';
2707:src/display.c **** 	  } else {
ARM GAS  /tmp/cc1e4Gjl.s 			page 133


2708:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2709:src/display.c **** 	       : State2.ind ? 2 
2710:src/display.c **** 	       : num_arg_digits(CmdBase); */
2711:src/display.c **** 	    if (State2.local)
2712:src/display.c **** 	      *bp++ = '.';
2713:src/display.c **** 	    if (State2.numdigit > 0) {
2714:src/display.c **** 	      if (State2.shuffle)
2715:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2716:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2717:src/display.c **** 	      else
2718:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2719:src/display.c **** 	    }
2720:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2721:src/display.c **** 	    *bp++ = '_';
2722:src/display.c **** 	  }
2723:src/display.c **** 	  if (yreg_enabled) {
2724:src/display.c **** 	    set_status_top(buf);
2725:src/display.c **** 	    no_status_top = 1;
2726:src/display.c **** 	    annuc = 1;
2727:src/display.c **** 	  }
2728:src/display.c **** 	  else {
2729:src/display.c **** 	    set_status(buf);
2730:src/display.c **** 	  }
2731:src/display.c **** 	} else if (State2.test != TST_NONE) {
2732:src/display.c **** 	  *bp++ = 'x';
2733:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2734:src/display.c **** 	  *bp++ = '_';
2735:src/display.c **** 	  *bp++ = '?';
2736:src/display.c **** 	  if (yreg_enabled) {
2737:src/display.c **** 	    set_status_top(buf);
2738:src/display.c **** 	    no_status_top = 1;
2739:src/display.c **** 	    annuc = 1;
2740:src/display.c **** 	  }
2741:src/display.c **** 	  else {
2742:src/display.c **** 	    set_status(buf);
2743:src/display.c **** 	  }
2744:src/display.c **** 	} else if (cata) {
2745:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2746:src/display.c **** 	  char b2[16];
2747:src/display.c **** 	  const char *p;
2748:src/display.c **** 
2749:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2750:src/display.c **** 	  p = catcmd(op, b2);
2751:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2752:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2753:src/display.c **** 	  bp = scopy(bp, p);
2754:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2755:src/display.c **** 	    // State2.disp_small = 1;
2756:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2757:src/display.c **** 	      set_digits_string("0 to 255", 0);
2758:src/display.c **** 	    else
2759:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2760:src/display.c **** 	    skip = 1;
2761:src/display.c **** 	  } else if (State2.runmode) {
2762:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2763:src/display.c **** 	      decNumber x, r;
2764:src/display.c **** 	      decimal64 z;
ARM GAS  /tmp/cc1e4Gjl.s 			page 134


2765:src/display.c **** 
2766:src/display.c **** 	      getX(&x);
2767:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2768:src/display.c **** 		const unsigned int f = argKIND(op);
2769:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2770:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2771:src/display.c **** 		  update_speed(0);
2772:src/display.c **** 		  fp(&r, &x);
2773:src/display.c **** 		}
2774:src/display.c **** 		else
2775:src/display.c **** 		  set_NaN(&r);
2776:src/display.c **** 	      } else
2777:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2778:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2779:src/display.c **** 	      packed_from_number(&z, &r);
2780:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2781:src/display.c **** 	      skip = 1;
2782:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2783:src/display.c **** 	      REGISTER z, *const x = StackBase;
2784:src/display.c **** 	      copyreg(&z, x);
2785:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2786:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2787:src/display.c **** 	      copyreg(x, &z);
2788:src/display.c **** 	      skip = 1;
2789:src/display.c **** 	    }
2790:src/display.c **** 	  }
2791:src/display.c **** 	  if (yreg_enabled) {
2792:src/display.c **** 	    set_status_top(buf);
2793:src/display.c **** 	    no_status_top = 1;
2794:src/display.c **** 	    annuc = 1;
2795:src/display.c **** 	  }
2796:src/display.c **** 	  else {
2797:src/display.c **** 	    set_status(buf);
2798:src/display.c **** 	  }
2799:src/display.c **** 	} else if (State2.multi) {
2800:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2801:src/display.c **** 	  if (State2.numdigit > 0) {
2802:src/display.c **** 	    *bp++ = (char) State2.digval;
2803:src/display.c **** 	    if (State2.numdigit > 1)
2804:src/display.c **** 	      *bp++ = State2.digval2;
2805:src/display.c **** 	  }
2806:src/display.c **** 	  if (yreg_enabled) {
2807:src/display.c **** 	    set_status_top(buf);
2808:src/display.c **** 	    no_status_top = 1;
2809:src/display.c **** 	    annuc = 1;
2810:src/display.c **** 	  }
2811:src/display.c **** 	  else {
2812:src/display.c **** 	    set_status(buf);
2813:src/display.c **** 	  }
2814:src/display.c **** 	} else if (State2.status) {
2815:src/display.c **** 	  show_status();
2816:src/display.c **** 	  skip = 1;
2817:src/display.c **** 	} else if (State2.labellist) {
2818:src/display.c **** 	  show_label();
2819:src/display.c **** 	  skip = 1;
2820:src/display.c **** 	} else if (State2.registerlist) {
2821:src/display.c **** 	  show_registers();
ARM GAS  /tmp/cc1e4Gjl.s 			page 135


2822:src/display.c **** 	  skip = 1;
2823:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2824:src/display.c **** 	    annunciators();
2825:src/display.c **** 	  }
2826:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2827:src/display.c **** 	} else if (State2.disp_as_alpha) {
2828:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2829:src/display.c **** #endif
2830:src/display.c **** 	} else if (State2.runmode) {
2831:src/display.c **** 	  if (DispMsg) { 
2832:src/display.c **** 	    set_status(DispMsg);
2833:src/display.c **** 	  } else if (DispPlot) {
2834:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2835:src/display.c **** 	  } else if (State2.alphas) {
2836:src/display.c **** 	    bp = scopy(buf, Alpha);
2837:src/display.c **** 	    j = State2.alpha_pos;
2838:src/display.c **** 	    if (j != 0) {
2839:src/display.c **** 	      i = slen(buf);
2840:src/display.c **** 	      j *= 6;
2841:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2842:src/display.c **** 		{
2843:src/display.c **** 		  buf[ (i - j) ] = '\0';
2844:src/display.c **** 		  set_status_right(buf);
2845:src/display.c **** 		}
2846:src/display.c **** 	      else {
2847:src/display.c **** 		set_status(buf);
2848:src/display.c **** 	      }
2849:src/display.c **** 	    }
2850:src/display.c **** 	    else {
2851:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2852:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2853:src/display.c **** 		*bp++ = '\0';
2854:src/display.c **** 	      }
2855:src/display.c **** 	      set_status_right(buf);
2856:src/display.c **** 	    }
2857:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2858:src/display.c **** 	      bp = buf;
2859:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2860:src/display.c **** 	      *bp++ = '\0';
2861:src/display.c **** 	      set_status_top(buf);
2862:src/display.c **** 	      no_status_top = 1;
2863:src/display.c **** 	      //annuc = 1;
2864:src/display.c **** 	    }
2865:src/display.c **** 	  }
2866:src/display.c **** 	  else {
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  }
2869:src/display.c **** 	}
2870:src/display.c **** 	else {
2871:src/display.c **** #ifndef DM42
2872:src/display.c **** 	  show_progtrace(buf);
2873:src/display.c **** #endif
2874:src/display.c **** 	  i = state_pc();
2875:src/display.c **** 	  if (i > 0)
2876:src/display.c **** 	    set_status(prt(getprog(i), buf));
2877:src/display.c **** 	  else
2878:src/display.c **** 	    set_status("");
ARM GAS  /tmp/cc1e4Gjl.s 			page 136


2879:src/display.c **** 	  set_dot(STO_annun);
2880:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  goto nostk;
2883:src/display.c **** 	}
2884:src/display.c **** 	show_stack();
2885:src/display.c ****       nostk:
2886:src/display.c **** 	show_flags();
2887:src/display.c **** 	if (!skip) {
2888:src/display.c **** 	  if (State2.runmode) {
2889:src/display.c **** 	  only_update_x:
2890:src/display.c **** 	    p = get_cmdline();
2891:src/display.c **** 	    if (p == NULL || cata) {
2892:src/display.c **** 	      if (ShowRegister != -1) {
2893:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2894:src/display.c **** 		format_reg(ShowRegister, CNULL);
2895:src/display.c **** 	      }
2896:src/display.c **** 	      else
2897:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2898:src/display.c **** 	    } else {
2899:src/display.c **** 	      disp_x(p);
2900:src/display.c **** 	      x_disp = 1;
2901:src/display.c **** 	    }
2902:src/display.c **** 	    if (WasDataEntry) {
2903:src/display.c **** 	      goto finish;
2904:src/display.c **** 	    }
2905:src/display.c **** 	  } else {
2906:src/display.c **** 	    unsigned int pc = state_pc();
2907:src/display.c **** 	    unsigned int upc = user_pc(pc);
2908:src/display.c **** 	    const int n = nLIB(pc);
2909:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2910:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2911:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2912:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2913:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** 	  }
2931:src/display.c **** 	}
2932:src/display.c **** 	set_annunciators();
2933:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2934:src/display.c **** 	  ShowRPN = 0;
2935:src/display.c **** 	  dot(RPN, 0);
ARM GAS  /tmp/cc1e4Gjl.s 			page 137


2936:src/display.c **** 	}
2937:src/display.c **** 	// disp_temp disables the <- key
2938:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2939:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2940:src/display.c **** 
2941:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2942:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2943:src/display.c **** 	  annunciators();
2944:src/display.c ****  	State2.hms = 0;
2945:src/display.c **** #else
2946:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2947:src/display.c **** 	  annunciators();
2948:src/display.c **** #endif
2949:src/display.c **** 
2950:src/display.c ****       finish:
2951:src/display.c **** 	State2.version = 0;
2952:src/display.c **** 	State2.disp_as_alpha = 0;
2953:src/display.c **** 	State2.smode = SDISP_NORMAL;
2954:src/display.c **** 	State2.invalid_disp = 0;
2955:src/display.c **** 	ShowRegister = regX_idx;
2956:src/display.c **** 	DispMsg = CNULL;
2957:src/display.c **** 	DispPlot = 0;
2958:src/display.c **** 	State2.disp_small = 0;
2959:src/display.c **** 	finish_display();
2960:src/display.c **** 	no_status_top = 0;
2961:src/display.c **** #ifdef CONSOLE
2962:src/display.c **** 	JustDisplayed = 1;
2963:src/display.c **** #endif
2964:src/display.c ****       }
2965:src/display.c **** #else
2966:src/display.c ****       /*
2967:src/display.c ****        *  Update the display
2968:src/display.c ****        */
2969:src/display.c ****       void display(void) {
2970:src/display.c **** 	int i, j;
2971:src/display.c **** 	char buf[40], *bp = buf;
2972:src/display.c **** 	const char *p;
2973:src/display.c **** 	int annuc = 0;
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2975:src/display.c **** 	int skip = 0;
2976:src/display.c **** 	int x_disp = 0;
2977:src/display.c **** 	const int shift = cur_shift();
2978:src/display.c **** 
2979:src/display.c **** 
2980:src/display.c **** 
2981:src/display.c **** 	if (State2.disp_freeze) {
2982:src/display.c **** 	  State2.disp_freeze = 0;
2983:src/display.c **** 	  State2.disp_temp = 1;
2984:src/display.c **** #ifdef CONSOLE
2985:src/display.c **** 	  JustDisplayed = 1;
2986:src/display.c **** #endif
2987:src/display.c **** 	  ShowRPN = 0;
2988:src/display.c **** 	  return;
2989:src/display.c **** 	}
2990:src/display.c **** 
2991:src/display.c **** 	if (WasDataEntry) {
2992:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/cc1e4Gjl.s 			page 138


2993:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2994:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2995:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2996:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2997:src/display.c **** #endif
2998:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2999:src/display.c **** 
3000:src/display.c **** 	  // Erase 7-segment display
3001:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3002:src/display.c **** 	    clr_dot(i);
3003:src/display.c **** 	  }
3004:src/display.c **** 	  goto only_update_x;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	// Clear display
3008:src/display.c **** 	reset_disp();
3009:src/display.c **** 
3010:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3011:src/display.c **** 	if (State2.cmplx  && !cata) {
3012:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3013:src/display.c **** 	  set_status(buf);
3014:src/display.c **** 	}
3015:src/display.c **** 	if (State2.version) {
3016:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3017:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3018:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3019:src/display.c **** #ifndef REALBUILD
3020:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3021:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3022:src/display.c **** #endif
3023:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3024:src/display.c **** 	  set_status(vers);
3025:src/display.c **** 	  skip = 1;
3026:src/display.c **** 	  goto nostk;
3027:src/display.c **** 	} else if (State2.confirm) {
3028:src/display.c **** 	  set_status(S_SURE);
3029:src/display.c **** 	} else if (State2.hyp) {
3030:src/display.c **** 	  bp = scopy(bp, "HYP");
3031:src/display.c **** 	  if (! State2.dot)
3032:src/display.c **** 	    *bp++ = '\235';
3033:src/display.c **** 	  set_status(buf);
3034:src/display.c **** 	} else if (State2.gtodot) {
3035:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3036:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3037:src/display.c **** 	  if (State2.numdigit > 0)
3038:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3039:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3040:src/display.c **** 	  *bp++ = '_';
3041:src/display.c **** 	  set_status(buf);
3042:src/display.c **** 	} else if (State2.rarg) {
3043:src/display.c **** 	  /* Commands with arguments */
3044:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3045:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3046:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3047:src/display.c **** #endif
3048:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3049:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
ARM GAS  /tmp/cc1e4Gjl.s 			page 139


3050:src/display.c **** 	  if (State2.dot) {
3051:src/display.c **** 	    *bp++ = 's';
3052:src/display.c **** 	    *bp++ = '_';
3053:src/display.c **** 	  } else if (shift == SHIFT_F) {
3054:src/display.c **** 	    *bp++ = '\021';
3055:src/display.c **** 	    *bp++ = '_';
3056:src/display.c **** 	  } else {
3057:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3058:src/display.c **** 	       : State2.ind ? 2 
3059:src/display.c **** 	       : num_arg_digits(CmdBase); */
3060:src/display.c **** 	    if (State2.local)
3061:src/display.c **** 	      *bp++ = '.';
3062:src/display.c **** 	    if (State2.numdigit > 0) {
3063:src/display.c **** 	      if (State2.shuffle)
3064:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3065:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3066:src/display.c **** 	      else
3067:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3068:src/display.c **** 	    }
3069:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3070:src/display.c **** 	    *bp++ = '_';
3071:src/display.c **** 	  }
3072:src/display.c **** 	  set_status(buf);
3073:src/display.c **** 	} else if (State2.test != TST_NONE) {
3074:src/display.c **** 	  *bp++ = 'x';
3075:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3076:src/display.c **** 	  *bp++ = '_';
3077:src/display.c **** 	  *bp++ = '?';
3078:src/display.c **** 	  set_status(buf);
3079:src/display.c **** 	} else if (cata) {
3080:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3081:src/display.c **** 	  char b2[16];
3082:src/display.c **** 	  const char *p;
3083:src/display.c **** 
3084:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3085:src/display.c **** 	  p = catcmd(op, b2);
3086:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3087:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3088:src/display.c **** 	  bp = scopy(bp, p);
3089:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3090:src/display.c **** 	    // State2.disp_small = 1;
3091:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3092:src/display.c **** 	      set_digits_string("0 to 255", 0);
3093:src/display.c **** 	    else
3094:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3095:src/display.c **** 	    skip = 1;
3096:src/display.c **** 	  } else if (State2.runmode) {
3097:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3098:src/display.c **** 	      decNumber x, r;
3099:src/display.c **** 	      decimal64 z;
3100:src/display.c **** 
3101:src/display.c **** 	      getX(&x);
3102:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3103:src/display.c **** 		const unsigned int f = argKIND(op);
3104:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3105:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3106:src/display.c **** 		  update_speed(0);
ARM GAS  /tmp/cc1e4Gjl.s 			page 140


3107:src/display.c **** 		  fp(&r, &x);
3108:src/display.c **** 		}
3109:src/display.c **** 		else
3110:src/display.c **** 		  set_NaN(&r);
3111:src/display.c **** 	      } else
3112:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3113:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3114:src/display.c **** 	      packed_from_number(&z, &r);
3115:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3116:src/display.c **** 	      skip = 1;
3117:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3118:src/display.c **** 	      REGISTER z, *const x = StackBase;
3119:src/display.c **** 	      copyreg(&z, x);
3120:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3121:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3122:src/display.c **** 	      copyreg(x, &z);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    }
3125:src/display.c **** 	  }
3126:src/display.c **** 	  set_status(buf);
3127:src/display.c **** 	} else if (State2.multi) {
3128:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3129:src/display.c **** 	  if (State2.numdigit > 0) {
3130:src/display.c **** 	    *bp++ = (char) State2.digval;
3131:src/display.c **** 	    if (State2.numdigit > 1)
3132:src/display.c **** 	      *bp++ = State2.digval2;
3133:src/display.c **** 	  }
3134:src/display.c **** 	  set_status(buf);
3135:src/display.c **** 	} else if (State2.status) {
3136:src/display.c **** 	  show_status();
3137:src/display.c **** 	  skip = 1;
3138:src/display.c **** 	} else if (State2.labellist) {
3139:src/display.c **** 	  show_label();
3140:src/display.c **** 	  skip = 1;
3141:src/display.c **** 	} else if (State2.registerlist) {
3142:src/display.c **** 	  show_registers();
3143:src/display.c **** 	  skip = 1;
3144:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3145:src/display.c **** 	    annunciators();
3146:src/display.c **** 	  }
3147:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3148:src/display.c **** 	} else if (State2.disp_as_alpha) {
3149:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3150:src/display.c **** #endif
3151:src/display.c **** 	} else if (State2.runmode) {
3152:src/display.c **** 	  if (DispMsg) { 
3153:src/display.c **** 	    set_status(DispMsg);
3154:src/display.c **** 	  } else if (DispPlot) {
3155:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3156:src/display.c **** 	  } else if (State2.alphas) {
3157:src/display.c **** #if 0
3158:src/display.c **** 	    set_digits_string("AlpHA", 0);
3159:src/display.c **** #endif
3160:src/display.c **** 	    bp = scopy(buf, Alpha);
3161:src/display.c **** 	    j = State2.alpha_pos;
3162:src/display.c **** 	    if (j != 0) {
3163:src/display.c **** 	      i = slen(buf);
ARM GAS  /tmp/cc1e4Gjl.s 			page 141


3164:src/display.c **** 	      //				
3165:src/display.c **** 	      j *= 6;
3166:src/display.c **** #ifdef BIGGER_DISPLAY
3167:src/display.c **** 	      if ( i - j >= 20 )
3168:src/display.c **** #else
3169:src/display.c **** 	      if ( i - j >= 12 )
3170:src/display.c **** #endif
3171:src/display.c **** 		{
3172:src/display.c **** 		buf[ (i - j) ] = '\0';
3173:src/display.c **** 		set_status_right(buf);
3174:src/display.c **** 		}
3175:src/display.c **** 	      else {
3176:src/display.c **** 		set_status(buf);
3177:src/display.c **** 	      }
3178:src/display.c **** 	    } else {
3179:src/display.c **** 	      if (shift != SHIFT_N) {
3180:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3181:src/display.c **** 		*bp++ = '\0';
3182:src/display.c **** 	      }
3183:src/display.c **** 	      set_status_right(buf);
3184:src/display.c **** 	    }
3185:src/display.c **** 	  } else {
3186:src/display.c **** 	    annuc = 1;
3187:src/display.c **** 	  }
3188:src/display.c **** 	} else {
3189:src/display.c **** #ifndef DM42
3190:src/display.c **** 	  show_progtrace(buf);
3191:src/display.c **** #endif
3192:src/display.c **** 	  i = state_pc();
3193:src/display.c **** 	  if (i > 0)
3194:src/display.c **** 	    set_status(prt(getprog(i), buf));
3195:src/display.c **** 	  else
3196:src/display.c **** 	    set_status("");
3197:src/display.c **** 	  set_dot(STO_annun);
3198:src/display.c **** #if 0
3199:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3200:src/display.c **** 	    unsigned short int crc;
3201:src/display.c **** 	    crc = checksum_program();
3202:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3203:src/display.c **** 	    for (i=0; i<4; i++) {
3204:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3205:src/display.c **** 	      crc >>= 4;
3206:src/display.c **** 	      j += SEGS_PER_DIGIT;
3207:src/display.c **** 	    }
3208:src/display.c **** 	    skip = 1;
3209:src/display.c **** 	  }
3210:src/display.c **** 	  else
3211:src/display.c **** #endif
3212:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3213:src/display.c **** 	      annuc = 1;
3214:src/display.c **** 	  goto nostk;
3215:src/display.c **** 	}
3216:src/display.c **** 	show_stack();
3217:src/display.c ****       nostk:	show_flags();
3218:src/display.c **** 	if (!skip) {
3219:src/display.c **** 	  if (State2.runmode) {
3220:src/display.c **** 	  only_update_x:
ARM GAS  /tmp/cc1e4Gjl.s 			page 142


3221:src/display.c **** 	    p = get_cmdline();
3222:src/display.c **** 	    if (p == NULL || cata) {
3223:src/display.c **** 	      if (ShowRegister != -1) {
3224:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3225:src/display.c **** 		format_reg(ShowRegister, CNULL);
3226:src/display.c **** 	      }
3227:src/display.c **** 	      else
3228:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3229:src/display.c **** 	    } else {
3230:src/display.c **** 	      disp_x(p);
3231:src/display.c **** 	      x_disp = 1;
3232:src/display.c **** 	    }
3233:src/display.c **** 	    if (WasDataEntry) {
3234:src/display.c **** 	      goto finish;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  } else {
3237:src/display.c **** 	    unsigned int pc = state_pc();
3238:src/display.c **** 	    unsigned int upc = user_pc(pc);
3239:src/display.c **** 	    const int n = nLIB(pc);
3240:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3241:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3242:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3243:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3244:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3245:src/display.c **** #ifndef REALBUILD
3246:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3247:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3248:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3249:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3250:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3251:src/display.c **** 	      char *b=buf;
3252:src/display.c **** 	      char *l=LastDisplayedNumber;
3253:src/display.c **** 	      *l++=' ';
3254:src/display.c **** 	      while(*b) {
3255:src/display.c **** 		*l++=*b++;
3256:src/display.c **** 		*l++=' ';
3257:src/display.c **** 	      }
3258:src/display.c **** 	      *l=0;
3259:src/display.c **** 	    }
3260:src/display.c **** #endif
3261:src/display.c **** 	  }
3262:src/display.c **** 	}
3263:src/display.c **** 	set_annunciators();
3264:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3265:src/display.c **** 	  ShowRPN = 0;
3266:src/display.c **** 	  dot(RPN, 0);
3267:src/display.c **** 	}
3268:src/display.c **** 	// disp_temp disables the <- key
3269:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3270:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3271:src/display.c **** 
3272:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3273:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3274:src/display.c **** 	  annunciators();
3275:src/display.c ****  	State2.hms = 0;
3276:src/display.c **** #else
3277:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 143


3278:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3279:src/display.c **** 	  annunciators();
3280:src/display.c **** 	
3281:src/display.c **** 
3282:src/display.c **** 
3283:src/display.c **** #endif
3284:src/display.c **** 
3285:src/display.c ****       finish:
3286:src/display.c **** 	State2.version = 0;
3287:src/display.c **** 	State2.disp_as_alpha = 0;
3288:src/display.c **** 	State2.smode = SDISP_NORMAL;
3289:src/display.c **** 	State2.invalid_disp = 0;
3290:src/display.c **** 	ShowRegister = regX_idx;
3291:src/display.c **** 	DispMsg = CNULL;
3292:src/display.c **** 	DispPlot = 0;
3293:src/display.c **** 	State2.disp_small = 0;
3294:src/display.c **** 	finish_display();
3295:src/display.c **** #ifdef CONSOLE
3296:src/display.c **** 	JustDisplayed = 1;
3297:src/display.c **** #endif
3298:src/display.c ****       }
3299:src/display.c **** #endif
3300:src/display.c ****       /*
3301:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3302:src/display.c ****        */
3303:src/display.c ****       void frozen_display()
3304:src/display.c ****       {
3305:src/display.c **** 	State2.disp_freeze = 0;
3306:src/display.c **** 	display();
3307:src/display.c **** 	State2.disp_freeze = 1;
3308:src/display.c ****       }
3309:src/display.c **** 
3310:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3311:src/display.c **** 	int glen = *graphic++;
3312:src/display.c **** 	int i, j;
3313:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3314:src/display.c **** 	unsigned long long int mat[6];
3315:src/display.c **** 
3316:src/display.c **** 	xset(mat, 0, sizeof(mat));
3317:src/display.c **** #endif
3318:src/display.c **** #ifndef REALBUILD
3319:src/display.c **** 	forceDispPlot=1;
3320:src/display.c **** #endif
3321:src/display.c **** 	if (glen <= 0)			return;
3322:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3323:src/display.c **** 
3324:src/display.c **** 	for (i=0; i<6; i++)
3325:src/display.c **** 	  for (j=1; j<=glen; j++) {
3326:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3327:src/display.c **** 	    if (graphic[j] & (1 << i))
3328:src/display.c **** 	      mat[i] |= 1LL << j;
3329:src/display.c **** #else
3330:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3331:src/display.c **** #endif
3332:src/display.c **** 	  }
3333:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3334:src/display.c **** 	set_status_grob(mat);
ARM GAS  /tmp/cc1e4Gjl.s 			page 144


3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** 
3338:src/display.c **** 
3339:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3340:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3341:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3342:src/display.c ****        * column is almost always blank.
3343:src/display.c ****        */
3344:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3345:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3346:src/display.c ****       }
3347:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3348:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3349:src/display.c ****       }
3350:src/display.c **** 
3351:src/display.c ****       
3352:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 3815              		.loc 1 3352 19 view -0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 544
 3818              		@ frame_needed = 0, uses_anonymous_args = 0
3353:src/display.c **** 	unsigned short int posns[257];
 3819              		.loc 1 3353 2 view .LVU1148
3354:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3355:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3356:src/display.c **** 	int posns_state = 255;
 3820              		.loc 1 3356 2 view .LVU1149
3357:src/display.c **** #endif
3358:src/display.c **** 	unsigned int x = 0;
 3821              		.loc 1 3358 2 view .LVU1150
3359:src/display.c **** 	int i, j;
 3822              		.loc 1 3359 2 view .LVU1151
3360:src/display.c **** 	const int offset = smallp ? 256 : 0;
 3823              		.loc 1 3360 2 view .LVU1152
3352:src/display.c **** 	unsigned short int posns[257];
 3824              		.loc 1 3352 19 is_stmt 0 view .LVU1153
 3825 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3826              		.cfi_def_cfa_offset 36
 3827              		.cfi_offset 4, -36
 3828              		.cfi_offset 5, -32
 3829              		.cfi_offset 6, -28
 3830              		.cfi_offset 7, -24
 3831              		.cfi_offset 8, -20
 3832              		.cfi_offset 9, -16
 3833              		.cfi_offset 10, -12
 3834              		.cfi_offset 11, -8
 3835              		.cfi_offset 14, -4
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	unsigned long long int mat[6];
3363:src/display.c **** 
3364:src/display.c **** 	xset(mat, 0, sizeof(mat));
3365:src/display.c **** #endif
3366:src/display.c **** #ifndef REALBUILD
3367:src/display.c **** 	scopy(LastDisplayedText, str);
 3836              		.loc 1 3367 2 view .LVU1154
 3837 0004 624C     		ldr	r4, .L401
ARM GAS  /tmp/cc1e4Gjl.s 			page 145


3352:src/display.c **** 	unsigned short int posns[257];
 3838              		.loc 1 3352 19 view .LVU1155
 3839 0006 ADF5097D 		sub	sp, sp, #548
 3840              		.cfi_def_cfa_offset 584
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3841              		.loc 1 3360 34 view .LVU1156
 3842 000a 0B1E     		subs	r3, r1, #0
 3843 000c 0293     		str	r3, [sp, #8]
3352:src/display.c **** 	unsigned short int posns[257];
 3844              		.loc 1 3352 19 view .LVU1157
 3845 000e 0090     		str	r0, [sp]
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3846              		.loc 1 3360 34 view .LVU1158
 3847 0010 14BF     		ite	ne
 3848 0012 4FF48073 		movne	r3, #256
 3849 0016 0023     		moveq	r3, #0
 3850              		.loc 1 3367 2 view .LVU1159
 3851 0018 0146     		mov	r1, r0
 3852              	.LVL419:
 3853              		.loc 1 3367 2 view .LVU1160
 3854 001a 2046     		mov	r0, r4
 3855              	.LVL420:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3856              		.loc 1 3360 34 view .LVU1161
 3857 001c 0393     		str	r3, [sp, #12]
 3858              	.LVL421:
 3859              		.loc 1 3367 2 is_stmt 1 view .LVU1162
 3860 001e FFF7FEFF 		bl	scopy
 3861              	.LVL422:
3368:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3369:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 3862              		.loc 1 3369 2 view .LVU1163
 3863              		.loc 1 3369 14 view .LVU1164
 3864              		.loc 1 3369 31 is_stmt 0 view .LVU1165
 3865 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3866              		.loc 1 3369 2 view .LVU1166
 3867 0024 13B9     		cbnz	r3, .L358
 3868 0026 07E0     		b	.L356
 3869              	.LVL423:
 3870              	.L357:
 3871              		.loc 1 3369 14 is_stmt 1 view .LVU1167
 3872 0028 0134     		adds	r4, r4, #1
 3873              		.loc 1 3369 2 is_stmt 0 view .LVU1168
 3874 002a 2BB1     		cbz	r3, .L356
 3875              	.L358:
 3876              	.LVL424:
3370:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 3877              		.loc 1 3370 4 is_stmt 1 view .LVU1169
 3878              		.loc 1 3370 7 is_stmt 0 view .LVU1170
 3879 002c 072B     		cmp	r3, #7
 3880              		.loc 1 3370 39 view .LVU1171
 3881 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 3882              		.loc 1 3370 7 view .LVU1172
 3883 0030 FAD1     		bne	.L357
 3884              		.loc 1 3370 39 view .LVU1173
 3885 0032 002B     		cmp	r3, #0
 3886 0034 40F09E80 		bne	.L397
ARM GAS  /tmp/cc1e4Gjl.s 			page 146


 3887              	.LVL425:
 3888              	.L356:
3371:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3372:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3373:src/display.c **** 	      ++i;
3374:src/display.c **** 	  }
3375:src/display.c **** 	  else {
3376:src/display.c **** 	    ++i;
3377:src/display.c **** 	  }
3378:src/display.c **** 	}
3379:src/display.c **** #endif
3380:src/display.c **** 	forceDispPlot=0;
 3889              		.loc 1 3380 2 is_stmt 1 view .LVU1174
3381:src/display.c **** #endif
3382:src/display.c **** #ifdef RP_PREFIX
3383:src/display.c **** 	RectPolConv = 0;
 3890              		.loc 1 3383 14 is_stmt 0 view .LVU1175
 3891 0038 564B     		ldr	r3, .L401+4
3380:src/display.c **** #endif
 3892              		.loc 1 3380 15 view .LVU1176
 3893 003a 574A     		ldr	r2, .L401+8
 3894 003c 0027     		movs	r7, #0
 3895              		.loc 1 3383 14 view .LVU1177
 3896 003e 1F60     		str	r7, [r3]
3384:src/display.c **** #endif
3385:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3386:src/display.c **** 	findlengths(posns, smallp);
3387:src/display.c **** #endif
3388:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 3897              		.loc 1 3388 9 view .LVU1178
 3898 0040 009B     		ldr	r3, [sp]
3380:src/display.c **** #endif
 3899              		.loc 1 3380 15 view .LVU1179
 3900 0042 1770     		strb	r7, [r2]
3383:src/display.c **** #endif
 3901              		.loc 1 3383 2 is_stmt 1 view .LVU1180
 3902              		.loc 1 3388 2 view .LVU1181
 3903              	.LVL426:
 3904              		.loc 1 3388 8 view .LVU1182
 3905              		.loc 1 3388 9 is_stmt 0 view .LVU1183
 3906 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
3389:src/display.c **** 	  int c;
3390:src/display.c **** 	  int width;
3391:src/display.c **** 	  unsigned char cmap[6];
3392:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3393:src/display.c **** 	  int real_width;
3394:src/display.c **** 	  int current_smallp;
3395:src/display.c **** 
3396:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3397:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3398:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3399:src/display.c **** 	  //           01 -> (not used)
3400:src/display.c **** 	  //           10 -> use big font
3401:src/display.c **** 	  //           11 -> use small font
3402:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3403:src/display.c **** 	  if (str[0] == '\007') {
3404:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/cc1e4Gjl.s 			page 147


3405:src/display.c **** 	    switch (str[1] & 0x60) {
3406:src/display.c **** 	    default:
3407:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x40:	current_smallp = 0;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x60:	current_smallp = 1;
3412:src/display.c **** 	      break;
3413:src/display.c **** 	    }
3414:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
3415:src/display.c **** 	    str += 3;
3416:src/display.c **** 
3417:src/display.c **** 	    real_width = charlengths(c);
3418:src/display.c **** 	  } else {
3419:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3420:src/display.c **** 	    real_width = width = charlengths(c);
3421:src/display.c **** 	    current_smallp = smallp;
3422:src/display.c **** 	  }
3423:src/display.c **** 
3424:src/display.c **** 	  if (x + real_width > b_w + 1)
3425:src/display.c **** 	    break;
3426:src/display.c **** 
3427:src/display.c **** 	  if (posns_state != current_smallp) {
3428:src/display.c **** 	    findlengths(posns, current_smallp);
3429:src/display.c **** 	    posns_state = current_smallp;
3430:src/display.c **** 	  }
3431:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
3432:src/display.c **** #else
3433:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3434:src/display.c **** 
3435:src/display.c **** 	  //cmap = &charset[c][0];
3436:src/display.c **** 	  width = charlengths(c);
3437:src/display.c **** 
3438:src/display.c **** 	  if (x + width > b_w+1)
3439:src/display.c **** 	    break;
3440:src/display.c **** 
3441:src/display.c **** 	  /* Decode the packed character bytes */
3442:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3443:src/display.c **** #endif
3444:src/display.c **** 
3445:src/display.c **** 	  for (i=0; i<6; i++)
3446:src/display.c **** 	    for (j=0; j<width; j++) {
3447:src/display.c **** 	      if (x+j >= b_w)
3448:src/display.c **** 		break;
3449:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3450:src/display.c **** 	      if (cmap[i] & (1 << j))
3451:src/display.c **** 		mat[i] |= 1LL << (x+j);
3452:src/display.c **** #else
3453:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
3454:src/display.c **** #endif
3455:src/display.c **** 	    }
3456:src/display.c **** 	  x += width;
3457:src/display.c **** 	}
3458:src/display.c **** 
3459:src/display.c **** 
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	set_status_grob(mat);
ARM GAS  /tmp/cc1e4Gjl.s 			page 148


3462:src/display.c **** #else
3463:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 3907              		.loc 1 3463 8 view .LVU1184
 3908 0046 8E24     		movs	r4, #142
3388:src/display.c **** 	  int c;
 3909              		.loc 1 3388 8 view .LVU1185
 3910 0048 002D     		cmp	r5, #0
 3911 004a 7CD0     		beq	.L376
 3912              	.LBB346:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3913              		.loc 1 3403 7 view .LVU1186
 3914 004c 072D     		cmp	r5, #7
 3915              	.LBE346:
3356:src/display.c **** #endif
 3916              		.loc 1 3356 6 view .LVU1187
 3917 004e 4FF0FF04 		mov	r4, #255
 3918              	.LVL427:
 3919              	.LBB355:
3389:src/display.c **** 	  int width;
 3920              		.loc 1 3389 4 is_stmt 1 view .LVU1188
3390:src/display.c **** 	  unsigned char cmap[6];
 3921              		.loc 1 3390 4 view .LVU1189
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3922              		.loc 1 3391 4 view .LVU1190
3393:src/display.c **** 	  int current_smallp;
 3923              		.loc 1 3393 4 view .LVU1191
3394:src/display.c **** 
 3924              		.loc 1 3394 4 view .LVU1192
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3925              		.loc 1 3403 4 view .LVU1193
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3926              		.loc 1 3403 7 is_stmt 0 view .LVU1194
 3927 0052 63D1     		bne	.L359
 3928              	.L399:
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3929              		.loc 1 3404 6 is_stmt 1 view .LVU1195
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3930              		.loc 1 3404 17 is_stmt 0 view .LVU1196
 3931 0054 009B     		ldr	r3, [sp]
 3932              	.LVL428:
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3933              		.loc 1 3404 17 view .LVU1197
 3934 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 3935 0058 06F06003 		and	r3, r6, #96
3405:src/display.c **** 	    default:
 3936              		.loc 1 3405 6 view .LVU1198
 3937 005c 402B     		cmp	r3, #64
3404:src/display.c **** 	    switch (str[1] & 0x60) {
 3938              		.loc 1 3404 12 view .LVU1199
 3939 005e 06F01F06 		and	r6, r6, #31
 3940              	.LVL429:
3405:src/display.c **** 	    default:
 3941              		.loc 1 3405 6 is_stmt 1 view .LVU1200
 3942 0062 7BD0     		beq	.L360
 3943 0064 602B     		cmp	r3, #96
 3944 0066 7ED0     		beq	.L361
 3945              	.LVL430:
ARM GAS  /tmp/cc1e4Gjl.s 			page 149


3414:src/display.c **** 	    str += 3;
 3946              		.loc 1 3414 6 view .LVU1201
3414:src/display.c **** 	    str += 3;
 3947              		.loc 1 3414 10 is_stmt 0 view .LVU1202
 3948 0068 009B     		ldr	r3, [sp]
 3949 006a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
3414:src/display.c **** 	    str += 3;
 3950              		.loc 1 3414 57 view .LVU1203
 3951 006c 029B     		ldr	r3, [sp, #8]
 3952 006e 002B     		cmp	r3, #0
 3953 0070 00F08A80 		beq	.L380
 3954 0074 05F58075 		add	r5, r5, #256
 3955 0078 9A46     		mov	r10, r3
 3956              	.LVL431:
 3957              	.L363:
3415:src/display.c **** 
 3958              		.loc 1 3415 6 is_stmt 1 view .LVU1204
3417:src/display.c **** 	  } else {
 3959              		.loc 1 3417 19 is_stmt 0 view .LVU1205
 3960 007a 2846     		mov	r0, r5
 3961 007c FFF7FEFF 		bl	charlengths
 3962              	.LVL432:
3415:src/display.c **** 
 3963              		.loc 1 3415 10 view .LVU1206
 3964 0080 009B     		ldr	r3, [sp]
3424:src/display.c **** 	    break;
 3965              		.loc 1 3424 10 view .LVU1207
 3966 0082 3844     		add	r0, r0, r7
3415:src/display.c **** 
 3967              		.loc 1 3415 10 view .LVU1208
 3968 0084 0333     		adds	r3, r3, #3
3424:src/display.c **** 	    break;
 3969              		.loc 1 3424 7 view .LVU1209
 3970 0086 2C28     		cmp	r0, #44
3415:src/display.c **** 
 3971              		.loc 1 3415 10 view .LVU1210
 3972 0088 0093     		str	r3, [sp]
 3973              	.LVL433:
3417:src/display.c **** 	  } else {
 3974              		.loc 1 3417 6 is_stmt 1 view .LVU1211
3424:src/display.c **** 	    break;
 3975              		.loc 1 3424 4 view .LVU1212
3424:src/display.c **** 	    break;
 3976              		.loc 1 3424 7 is_stmt 0 view .LVU1213
 3977 008a 55D8     		bhi	.L375
 3978              	.L400:
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3979              		.loc 1 3427 4 is_stmt 1 view .LVU1214
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3980              		.loc 1 3427 7 is_stmt 0 view .LVU1215
 3981 008c A245     		cmp	r10, r4
3428:src/display.c **** 	    posns_state = current_smallp;
 3982              		.loc 1 3428 6 view .LVU1216
 3983 008e 07AB     		add	r3, sp, #28
 3984              	.LVL434:
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3985              		.loc 1 3427 7 view .LVU1217
ARM GAS  /tmp/cc1e4Gjl.s 			page 150


 3986 0090 05D0     		beq	.L366
3428:src/display.c **** 	    posns_state = current_smallp;
 3987              		.loc 1 3428 6 is_stmt 1 view .LVU1218
 3988 0092 1846     		mov	r0, r3
 3989 0094 5146     		mov	r1, r10
 3990 0096 0193     		str	r3, [sp, #4]
 3991 0098 FFF7FEFF 		bl	findlengths
 3992              	.LVL435:
 3993 009c 019B     		ldr	r3, [sp, #4]
3429:src/display.c **** 	  }
 3994              		.loc 1 3429 6 view .LVU1219
 3995              	.LVL436:
 3996              	.L366:
3431:src/display.c **** #else
 3997              		.loc 1 3431 4 view .LVU1220
 3998 009e 2846     		mov	r0, r5
 3999 00a0 05A9     		add	r1, sp, #20
 4000 00a2 5246     		mov	r2, r10
 4001 00a4 07EB4708 		add	r8, r7, r7, lsl #1
 4002 00a8 FFF7FEFF 		bl	unpackchar
 4003              	.LVL437:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4004              		.loc 1 3445 4 view .LVU1221
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4005              		.loc 1 3445 14 view .LVU1222
 4006 00ac 4FEA4808 		lsl	r8, r8, #1
 4007 00b0 05AD     		add	r5, sp, #20
 4008              	.LVL438:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4009              		.loc 1 3445 14 is_stmt 0 view .LVU1223
 4010 00b2 A8F58178 		sub	r8, r8, #258
3431:src/display.c **** #else
 4011              		.loc 1 3431 4 view .LVU1224
 4012 00b6 4FF4C874 		mov	r4, #400
 4013              	.LVL439:
 4014              	.L367:
3446:src/display.c **** 	      if (x+j >= b_w)
 4015              		.loc 1 3446 16 is_stmt 1 view .LVU1225
3446:src/display.c **** 	      if (x+j >= b_w)
 4016              		.loc 1 3446 6 is_stmt 0 view .LVU1226
 4017 00ba 002E     		cmp	r6, #0
 4018 00bc 1FDD     		ble	.L373
3447:src/display.c **** 		break;
 4019              		.loc 1 3447 8 is_stmt 1 view .LVU1227
3447:src/display.c **** 		break;
 4020              		.loc 1 3447 11 is_stmt 0 view .LVU1228
 4021 00be 2A2F     		cmp	r7, #42
 4022 00c0 1DD8     		bhi	.L373
 4023 00c2 08EB0409 		add	r9, r8, r4
3446:src/display.c **** 	      if (x+j >= b_w)
 4024              		.loc 1 3446 12 view .LVU1229
 4025 00c6 4FF0000B 		mov	fp, #0
 4026 00ca 09E0     		b	.L368
 4027              	.LVL440:
 4028              	.L398:
3446:src/display.c **** 	      if (x+j >= b_w)
 4029              		.loc 1 3446 26 view .LVU1230
ARM GAS  /tmp/cc1e4Gjl.s 			page 151


 4030 00cc 0BF1010B 		add	fp, fp, #1
 4031              	.LVL441:
 4032              	.LBB347:
 4033              	.LBB348:
 340:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 340 11 view .LVU1231
 4035 00d0 FFF7FEFF 		bl	set_dot
 4036              	.LVL442:
 340:src/display.c ****   else	clr_dot(n);
 4037              		.loc 1 340 11 view .LVU1232
 4038              	.LBE348:
 4039              	.LBE347:
3447:src/display.c **** 		break;
 4040              		.loc 1 3447 8 is_stmt 1 view .LVU1233
3446:src/display.c **** 	      if (x+j >= b_w)
 4041              		.loc 1 3446 25 view .LVU1234
3446:src/display.c **** 	      if (x+j >= b_w)
 4042              		.loc 1 3446 16 view .LVU1235
3446:src/display.c **** 	      if (x+j >= b_w)
 4043              		.loc 1 3446 6 is_stmt 0 view .LVU1236
 4044 00d4 B345     		cmp	fp, r6
 4045 00d6 09F10609 		add	r9, r9, #6
 4046 00da 10D0     		beq	.L373
 4047              	.L372:
3447:src/display.c **** 		break;
 4048              		.loc 1 3447 11 view .LVU1237
 4049 00dc 4C45     		cmp	r4, r9
 4050 00de 0ED0     		beq	.L373
 4051              	.LVL443:
 4052              	.L368:
3453:src/display.c **** #endif
 4053              		.loc 1 3453 8 is_stmt 1 view .LVU1238
 4054              	.LBB352:
 4055              	.LBI347:
 339:src/display.c ****   if (on)	set_dot(n);
 4056              		.loc 1 339 6 view .LVU1239
 4057              	.LBB349:
 340:src/display.c ****   else	clr_dot(n);
 4058              		.loc 1 340 3 view .LVU1240
 340:src/display.c ****   else	clr_dot(n);
 4059              		.loc 1 340 11 view .LVU1241
 341:src/display.c **** }
 4060              		.loc 1 341 8 view .LVU1242
 4061              	.LBE349:
 4062              	.LBE352:
3453:src/display.c **** #endif
 4063              		.loc 1 3453 32 is_stmt 0 view .LVU1243
 4064 00e0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3453:src/display.c **** #endif
 4065              		.loc 1 3453 47 view .LVU1244
 4066 00e2 41FA0BF1 		asr	r1, r1, fp
 4067              	.LBB353:
 4068              	.LBB350:
 340:src/display.c ****   else	clr_dot(n);
 4069              		.loc 1 340 6 view .LVU1245
 4070 00e6 11F0010F 		tst	r1, #1
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/cc1e4Gjl.s 			page 152


 4071              		.loc 1 340 11 view .LVU1246
 4072 00ea 4846     		mov	r0, r9
 340:src/display.c ****   else	clr_dot(n);
 4073              		.loc 1 340 6 view .LVU1247
 4074 00ec EED1     		bne	.L398
 4075              	.LBE350:
 4076              	.LBE353:
3446:src/display.c **** 	      if (x+j >= b_w)
 4077              		.loc 1 3446 26 view .LVU1248
 4078 00ee 0BF1010B 		add	fp, fp, #1
 4079              	.LVL444:
 4080              	.LBB354:
 4081              	.LBB351:
 341:src/display.c **** }
 4082              		.loc 1 341 8 view .LVU1249
 4083 00f2 FFF7FEFF 		bl	clr_dot
 4084              	.LVL445:
 341:src/display.c **** }
 4085              		.loc 1 341 8 view .LVU1250
 4086              	.LBE351:
 4087              	.LBE354:
3447:src/display.c **** 		break;
 4088              		.loc 1 3447 8 is_stmt 1 view .LVU1251
3446:src/display.c **** 	      if (x+j >= b_w)
 4089              		.loc 1 3446 25 view .LVU1252
3446:src/display.c **** 	      if (x+j >= b_w)
 4090              		.loc 1 3446 16 view .LVU1253
3446:src/display.c **** 	      if (x+j >= b_w)
 4091              		.loc 1 3446 6 is_stmt 0 view .LVU1254
 4092 00f6 B345     		cmp	fp, r6
 4093 00f8 09F10609 		add	r9, r9, #6
 4094 00fc EED1     		bne	.L372
 4095              	.LVL446:
 4096              	.L373:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4097              		.loc 1 3445 19 is_stmt 1 view .LVU1255
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4098              		.loc 1 3445 14 view .LVU1256
 4099 00fe 0134     		adds	r4, r4, #1
 4100              	.LVL447:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 4101              		.loc 1 3445 4 is_stmt 0 view .LVU1257
 4102 0100 B4F5CB7F 		cmp	r4, #406
 4103 0104 05F10105 		add	r5, r5, #1
 4104 0108 D7D1     		bne	.L367
3456:src/display.c **** 	}
 4105              		.loc 1 3456 4 is_stmt 1 view .LVU1258
 4106              	.LBE355:
3388:src/display.c **** 	  int c;
 4107              		.loc 1 3388 9 is_stmt 0 view .LVU1259
 4108 010a 009B     		ldr	r3, [sp]
 4109 010c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4110              	.LBB356:
3456:src/display.c **** 	}
 4111              		.loc 1 3456 6 view .LVU1260
 4112 010e 3744     		add	r7, r7, r6
 4113              	.LVL448:
ARM GAS  /tmp/cc1e4Gjl.s 			page 153


3456:src/display.c **** 	}
 4114              		.loc 1 3456 6 view .LVU1261
 4115              	.LBE356:
3388:src/display.c **** 	  int c;
 4116              		.loc 1 3388 8 is_stmt 1 view .LVU1262
 4117 0110 95B1     		cbz	r5, .L375
3388:src/display.c **** 	  int c;
 4118              		.loc 1 3388 22 is_stmt 0 view .LVU1263
 4119 0112 2C2F     		cmp	r7, #44
 4120 0114 10D8     		bhi	.L375
 4121              	.LBB357:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4122              		.loc 1 3403 7 view .LVU1264
 4123 0116 072D     		cmp	r5, #7
 4124              	.LBE357:
 4125 0118 5446     		mov	r4, r10
 4126              	.LVL449:
 4127              	.LBB358:
3389:src/display.c **** 	  int width;
 4128              		.loc 1 3389 4 is_stmt 1 view .LVU1265
3390:src/display.c **** 	  unsigned char cmap[6];
 4129              		.loc 1 3390 4 view .LVU1266
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4130              		.loc 1 3391 4 view .LVU1267
3393:src/display.c **** 	  int current_smallp;
 4131              		.loc 1 3393 4 view .LVU1268
3394:src/display.c **** 
 4132              		.loc 1 3394 4 view .LVU1269
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4133              		.loc 1 3403 4 view .LVU1270
3403:src/display.c **** 	    width = str[1] & 0x1F;
 4134              		.loc 1 3403 7 is_stmt 0 view .LVU1271
 4135 011a 9BD0     		beq	.L399
 4136              	.LVL450:
 4137              	.L359:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4138              		.loc 1 3419 6 is_stmt 1 view .LVU1272
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4139              		.loc 1 3419 8 is_stmt 0 view .LVU1273
 4140 011c 039B     		ldr	r3, [sp, #12]
 4141              	.LVL451:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4142              		.loc 1 3419 8 view .LVU1274
 4143 011e 1D44     		add	r5, r5, r3
3420:src/display.c **** 	    current_smallp = smallp;
 4144              		.loc 1 3420 27 view .LVU1275
 4145 0120 2846     		mov	r0, r5
 4146 0122 FFF7FEFF 		bl	charlengths
 4147              	.LVL452:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4148              		.loc 1 3419 30 view .LVU1276
 4149 0126 009B     		ldr	r3, [sp]
3420:src/display.c **** 	    current_smallp = smallp;
 4150              		.loc 1 3420 25 view .LVU1277
 4151 0128 DDF808A0 		ldr	r10, [sp, #8]
 4152 012c 0646     		mov	r6, r0
3424:src/display.c **** 	    break;
ARM GAS  /tmp/cc1e4Gjl.s 			page 154


 4153              		.loc 1 3424 10 view .LVU1278
 4154 012e 3844     		add	r0, r0, r7
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4155              		.loc 1 3419 30 view .LVU1279
 4156 0130 0133     		adds	r3, r3, #1
3424:src/display.c **** 	    break;
 4157              		.loc 1 3424 7 view .LVU1280
 4158 0132 2C28     		cmp	r0, #44
3419:src/display.c **** 	    real_width = width = charlengths(c);
 4159              		.loc 1 3419 30 view .LVU1281
 4160 0134 0093     		str	r3, [sp]
 4161              	.LVL453:
3420:src/display.c **** 	    current_smallp = smallp;
 4162              		.loc 1 3420 6 is_stmt 1 view .LVU1282
3421:src/display.c **** 	  }
 4163              		.loc 1 3421 6 view .LVU1283
3424:src/display.c **** 	    break;
 4164              		.loc 1 3424 4 view .LVU1284
3424:src/display.c **** 	    break;
 4165              		.loc 1 3424 7 is_stmt 0 view .LVU1285
 4166 0136 A9D9     		bls	.L400
 4167              	.LVL454:
 4168              	.L375:
3424:src/display.c **** 	    break;
 4169              		.loc 1 3424 7 view .LVU1286
 4170              	.LBE358:
 4171              		.loc 1 3463 2 is_stmt 1 view .LVU1287
 4172              		.loc 1 3463 16 is_stmt 0 view .LVU1288
 4173 0138 07EB4704 		add	r4, r7, r7, lsl #1
 4174 013c 6400     		lsls	r4, r4, #1
 4175              		.loc 1 3463 13 view .LVU1289
 4176 013e 8E34     		adds	r4, r4, #142
 4177              	.LVL455:
 4178              		.loc 1 3463 20 is_stmt 1 view .LVU1290
 4179              		.loc 1 3463 2 is_stmt 0 view .LVU1291
 4180 0140 B4F5C87F 		cmp	r4, #400
 4181 0144 06DA     		bge	.L350
 4182              	.LVL456:
 4183              	.L376:
3464:src/display.c **** 	  clr_dot(i);
 4184              		.loc 1 3464 4 is_stmt 1 view .LVU1292
 4185 0146 2046     		mov	r0, r4
3463:src/display.c **** 	  clr_dot(i);
 4186              		.loc 1 3463 28 is_stmt 0 view .LVU1293
 4187 0148 0134     		adds	r4, r4, #1
 4188              	.LVL457:
 4189              		.loc 1 3464 4 view .LVU1294
 4190 014a FFF7FEFF 		bl	clr_dot
 4191              	.LVL458:
3463:src/display.c **** 	  clr_dot(i);
 4192              		.loc 1 3463 27 is_stmt 1 view .LVU1295
3463:src/display.c **** 	  clr_dot(i);
 4193              		.loc 1 3463 20 view .LVU1296
3463:src/display.c **** 	  clr_dot(i);
 4194              		.loc 1 3463 2 is_stmt 0 view .LVU1297
 4195 014e B4F5C87F 		cmp	r4, #400
 4196 0152 F8D1     		bne	.L376
ARM GAS  /tmp/cc1e4Gjl.s 			page 155


 4197              	.L350:
3465:src/display.c **** #endif
3466:src/display.c ****       }
 4198              		.loc 1 3466 7 view .LVU1298
 4199 0154 0DF5097D 		add	sp, sp, #548
 4200              		.cfi_remember_state
 4201              		.cfi_def_cfa_offset 36
 4202              	.LVL459:
 4203              		.loc 1 3466 7 view .LVU1299
 4204              		@ sp needed
 4205 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4206              	.LVL460:
 4207              	.L360:
 4208              		.cfi_restore_state
 4209              	.LBB359:
3409:src/display.c **** 	      break;
 4210              		.loc 1 3409 17 is_stmt 1 view .LVU1300
3410:src/display.c **** 	    case 0x60:	current_smallp = 1;
 4211              		.loc 1 3410 8 view .LVU1301
3414:src/display.c **** 	    str += 3;
 4212              		.loc 1 3414 6 view .LVU1302
3414:src/display.c **** 	    str += 3;
 4213              		.loc 1 3414 10 is_stmt 0 view .LVU1303
 4214 015c 009B     		ldr	r3, [sp]
3409:src/display.c **** 	      break;
 4215              		.loc 1 3409 32 view .LVU1304
 4216 015e 4FF0000A 		mov	r10, #0
3414:src/display.c **** 	    str += 3;
 4217              		.loc 1 3414 10 view .LVU1305
 4218 0162 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 4219 0164 89E7     		b	.L363
 4220              	.LVL461:
 4221              	.L361:
3411:src/display.c **** 	      break;
 4222              		.loc 1 3411 17 is_stmt 1 view .LVU1306
3412:src/display.c **** 	    }
 4223              		.loc 1 3412 8 view .LVU1307
3414:src/display.c **** 	    str += 3;
 4224              		.loc 1 3414 6 view .LVU1308
3414:src/display.c **** 	    str += 3;
 4225              		.loc 1 3414 10 is_stmt 0 view .LVU1309
 4226 0166 009B     		ldr	r3, [sp]
 4227 0168 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 4228              		.loc 1 3411 32 view .LVU1310
 4229 016a 4FF0010A 		mov	r10, #1
 4230 016e 00F58075 		add	r5, r0, #256
 4231 0172 82E7     		b	.L363
 4232              	.LVL462:
 4233              	.L397:
3411:src/display.c **** 	      break;
 4234              		.loc 1 3411 32 view .LVU1311
 4235              	.LBE359:
3371:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 4236              		.loc 1 3371 6 is_stmt 1 view .LVU1312
 4237 0174 A11C     		adds	r1, r4, #2
 4238 0176 2046     		mov	r0, r4
ARM GAS  /tmp/cc1e4Gjl.s 			page 156


 4239 0178 FFF7FEFF 		bl	scopy
 4240              	.LVL463:
3372:src/display.c **** 	      ++i;
 4241              		.loc 1 3372 6 view .LVU1313
3372:src/display.c **** 	      ++i;
 4242              		.loc 1 3372 9 is_stmt 0 view .LVU1314
 4243 017c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 4244 017e 002B     		cmp	r3, #0
 4245 0180 3FF45AAF 		beq	.L356
 4246 0184 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 4247 0186 4FE7     		b	.L357
 4248              	.LVL464:
 4249              	.L380:
 4250              	.LBB360:
3372:src/display.c **** 	      ++i;
 4251              		.loc 1 3372 9 view .LVU1315
 4252 0188 DDF808A0 		ldr	r10, [sp, #8]
 4253 018c 75E7     		b	.L363
 4254              	.L402:
 4255 018e 00BF     		.align	2
 4256              	.L401:
 4257 0190 00000000 		.word	LastDisplayedText
 4258 0194 00000000 		.word	RectPolConv
 4259 0198 00000000 		.word	forceDispPlot
 4260              	.LBE360:
 4261              		.cfi_endproc
 4262              	.LFE56:
 4264              		.section	.text.getdig,"ax",%progbits
 4265              		.align	1
 4266              		.p2align 2,,3
 4267              		.global	getdig
 4268              		.syntax unified
 4269              		.thumb
 4270              		.thumb_func
 4271              		.fpu fpv4-sp-d16
 4273              	getdig:
 4274              	.LVL465:
 4275              	.LFB6:
 334:src/display.c ****   // perform index lookup
 4276              		.loc 1 334 1 is_stmt 1 view -0
 4277              		.cfi_startproc
 4278              		@ args = 0, pretend = 0, frame = 0
 4279              		@ frame_needed = 0, uses_anonymous_args = 0
 4280              		@ link register save eliminated.
 336:src/display.c **** }
 4281              		.loc 1 336 3 view .LVU1317
 336:src/display.c **** }
 4282              		.loc 1 336 16 is_stmt 0 view .LVU1318
 4283 0000 014B     		ldr	r3, .L404
 336:src/display.c **** }
 4284              		.loc 1 336 19 view .LVU1319
 4285 0002 C0B2     		uxtb	r0, r0
 4286              	.LVL466:
 337:src/display.c **** 
 4287              		.loc 1 337 1 view .LVU1320
 4288 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4289 0006 7047     		bx	lr
ARM GAS  /tmp/cc1e4Gjl.s 			page 157


 4290              	.L405:
 4291              		.align	2
 4292              	.L404:
 4293 0008 00000000 		.word	.LANCHOR2
 4294              		.cfi_endproc
 4295              	.LFE6:
 4297              		.section	.text.dot,"ax",%progbits
 4298              		.align	1
 4299              		.p2align 2,,3
 4300              		.global	dot
 4301              		.syntax unified
 4302              		.thumb
 4303              		.thumb_func
 4304              		.fpu fpv4-sp-d16
 4306              	dot:
 4307              	.LVL467:
 4308              	.LFB7:
 339:src/display.c ****   if (on)	set_dot(n);
 4309              		.loc 1 339 25 is_stmt 1 view -0
 4310              		.cfi_startproc
 4311              		@ args = 0, pretend = 0, frame = 0
 4312              		@ frame_needed = 0, uses_anonymous_args = 0
 4313              		@ link register save eliminated.
 340:src/display.c ****   else	clr_dot(n);
 4314              		.loc 1 340 3 view .LVU1322
 340:src/display.c ****   else	clr_dot(n);
 4315              		.loc 1 340 6 is_stmt 0 view .LVU1323
 4316 0000 09B1     		cbz	r1, .L407
 340:src/display.c ****   else	clr_dot(n);
 4317              		.loc 1 340 11 is_stmt 1 discriminator 1 view .LVU1324
 4318 0002 FFF7FEBF 		b	set_dot
 4319              	.LVL468:
 4320              	.L407:
 341:src/display.c **** }
 4321              		.loc 1 341 8 view .LVU1325
 4322 0006 FFF7FEBF 		b	clr_dot
 4323              	.LVL469:
 341:src/display.c **** }
 4324              		.loc 1 341 8 is_stmt 0 view .LVU1326
 4325              		.cfi_endproc
 4326              	.LFE7:
 4328 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4329              		.align	1
 4330              		.p2align 2,,3
 4331              		.global	std_round_fix
 4332              		.syntax unified
 4333              		.thumb
 4334              		.thumb_func
 4335              		.fpu fpv4-sp-d16
 4337              	std_round_fix:
 4338              	.LVL470:
 4339              	.LFB24:
1755:src/display.c **** 	decNumber c;
 4340              		.loc 1 1755 93 is_stmt 1 view -0
 4341              		.cfi_startproc
 4342              		@ args = 0, pretend = 0, frame = 40
 4343              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1e4Gjl.s 			page 158


1755:src/display.c **** 	decNumber c;
 4344              		.loc 1 1755 93 is_stmt 0 view .LVU1328
 4345 0000 70B5     		push	{r4, r5, r6, lr}
 4346              		.cfi_def_cfa_offset 16
 4347              		.cfi_offset 4, -16
 4348              		.cfi_offset 5, -12
 4349              		.cfi_offset 6, -8
 4350              		.cfi_offset 14, -4
 4351 0002 0E46     		mov	r6, r1
1756:src/display.c **** 	int true_exp, x=0;
 4352              		.loc 1 1756 2 is_stmt 1 view .LVU1329
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4353              		.loc 1 1757 2 view .LVU1330
 4354              	.LVL471:
1758:src/display.c **** 
 4355              		.loc 1 1758 2 view .LVU1331
1760:src/display.c **** 	  min_pos_exp = 9;
 4356              		.loc 1 1760 2 view .LVU1332
1755:src/display.c **** 	decNumber c;
 4357              		.loc 1 1755 93 is_stmt 0 view .LVU1333
 4358 0004 8AB0     		sub	sp, sp, #40
 4359              		.cfi_def_cfa_offset 56
1760:src/display.c **** 	  min_pos_exp = 9;
 4360              		.loc 1 1760 5 view .LVU1334
 4361 0006 92B9     		cbnz	r2, .L409
1765:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4362              		.loc 1 1765 4 is_stmt 1 view .LVU1335
 4363              	.LVL472:
1766:src/display.c **** 	}
 4364              		.loc 1 1766 4 view .LVU1336
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4365              		.loc 1 1769 2 view .LVU1337
 4366 0008 0146     		mov	r1, r0
 4367              	.LVL473:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4368              		.loc 1 1769 2 is_stmt 0 view .LVU1338
 4369 000a 01A8     		add	r0, sp, #4
 4370              	.LVL474:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4371              		.loc 1 1769 2 view .LVU1339
 4372 000c 1D46     		mov	r5, r3
 4373 000e FFF7FEFF 		bl	dn_abs
 4374              	.LVL475:
1770:src/display.c **** 
 4375              		.loc 1 1770 2 is_stmt 1 view .LVU1340
1770:src/display.c **** 
 4376              		.loc 1 1770 24 is_stmt 0 view .LVU1341
 4377 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4378 0016 1844     		add	r0, r0, r3
 4379              	.LVL476:
1772:src/display.c **** 	  x = *dd;
 4380              		.loc 1 1772 2 is_stmt 1 view .LVU1342
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4381              		.loc 1 1776 2 view .LVU1343
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4382              		.loc 1 1776 5 is_stmt 0 view .LVU1344
 4383 0018 0138     		subs	r0, r0, #1
ARM GAS  /tmp/cc1e4Gjl.s 			page 159


 4384 001a 1AD5     		bpl	.L413
1766:src/display.c **** 	}
 4385              		.loc 1 1766 16 view .LVU1345
 4386 001c EB43     		mvns	r3, r5
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4387              		.loc 1 1776 21 view .LVU1346
 4388 001e 8342     		cmp	r3, r0
 4389 0020 17DA     		bge	.L413
 4390              	.LVL477:
 4391              	.L415:
1778:src/display.c **** 	  return MODE_FIX;
 4392              		.loc 1 1778 4 is_stmt 1 view .LVU1347
1778:src/display.c **** 	  return MODE_FIX;
 4393              		.loc 1 1778 8 is_stmt 0 view .LVU1348
 4394 0022 3368     		ldr	r3, [r6]
 4395 0024 181A     		subs	r0, r3, r0
 4396 0026 3060     		str	r0, [r6]
1779:src/display.c **** 	}
 4397              		.loc 1 1779 4 is_stmt 1 view .LVU1349
1779:src/display.c **** 	}
 4398              		.loc 1 1779 11 is_stmt 0 view .LVU1350
 4399 0028 0120     		movs	r0, #1
1788:src/display.c **** #else
 4400              		.loc 1 1788 7 view .LVU1351
 4401 002a 0AB0     		add	sp, sp, #40
 4402              		.cfi_remember_state
 4403              		.cfi_def_cfa_offset 16
 4404              		@ sp needed
 4405 002c 70BD     		pop	{r4, r5, r6, pc}
 4406              	.LVL478:
 4407              	.L409:
 4408              		.cfi_restore_state
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4409              		.loc 1 1769 2 is_stmt 1 view .LVU1352
 4410 002e 0146     		mov	r1, r0
 4411              	.LVL479:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4412              		.loc 1 1769 2 is_stmt 0 view .LVU1353
 4413 0030 01A8     		add	r0, sp, #4
 4414              	.LVL480:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4415              		.loc 1 1769 2 view .LVU1354
 4416 0032 1446     		mov	r4, r2
 4417 0034 FFF7FEFF 		bl	dn_abs
 4418              	.LVL481:
1770:src/display.c **** 
 4419              		.loc 1 1770 2 is_stmt 1 view .LVU1355
1770:src/display.c **** 
 4420              		.loc 1 1770 24 is_stmt 0 view .LVU1356
 4421 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1772:src/display.c **** 	  x = *dd;
 4422              		.loc 1 1772 5 view .LVU1357
 4423 003c 052C     		cmp	r4, #5
1770:src/display.c **** 
 4424              		.loc 1 1770 24 view .LVU1358
 4425 003e 1344     		add	r3, r3, r2
1770:src/display.c **** 
ARM GAS  /tmp/cc1e4Gjl.s 			page 160


 4426              		.loc 1 1770 11 view .LVU1359
 4427 0040 03F1FF30 		add	r0, r3, #-1
 4428              	.LVL482:
1772:src/display.c **** 	  x = *dd;
 4429              		.loc 1 1772 2 is_stmt 1 view .LVU1360
1772:src/display.c **** 	  x = *dd;
 4430              		.loc 1 1772 5 is_stmt 0 view .LVU1361
 4431 0044 15D1     		bne	.L417
1773:src/display.c **** 	}
 4432              		.loc 1 1773 4 is_stmt 1 view .LVU1362
1773:src/display.c **** 	}
 4433              		.loc 1 1773 6 is_stmt 0 view .LVU1363
 4434 0046 3268     		ldr	r2, [r6]
 4435              	.LVL483:
 4436              	.L412:
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4437              		.loc 1 1776 2 is_stmt 1 view .LVU1364
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4438              		.loc 1 1776 5 is_stmt 0 view .LVU1365
 4439 0048 8242     		cmp	r2, r0
 4440 004a 05DC     		bgt	.L421
1782:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4441              		.loc 1 1782 53 discriminator 2 view .LVU1366
 4442 004c 0333     		adds	r3, r3, #3
 4443 004e 0C2B     		cmp	r3, #12
 4444 0050 04D8     		bhi	.L416
 4445              	.LVL484:
 4446              	.L413:
1786:src/display.c **** 	}
 4447              		.loc 1 1786 11 view .LVU1367
 4448 0052 0020     		movs	r0, #0
1788:src/display.c **** #else
 4449              		.loc 1 1788 7 view .LVU1368
 4450 0054 0AB0     		add	sp, sp, #40
 4451              		.cfi_remember_state
 4452              		.cfi_def_cfa_offset 16
 4453              		@ sp needed
 4454 0056 70BD     		pop	{r4, r5, r6, pc}
 4455              	.LVL485:
 4456              	.L421:
 4457              		.cfi_restore_state
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4458              		.loc 1 1776 21 view .LVU1369
 4459 0058 031D     		adds	r3, r0, #4
 4460 005a E2DA     		bge	.L415
 4461              	.L416:
 4462              	.LBB363:
 4463              	.LBI363:
1755:src/display.c **** 	decNumber c;
 4464              		.loc 1 1755 26 is_stmt 1 view .LVU1370
 4465              	.LVL486:
 4466              	.LBB364:
1783:src/display.c **** 	}
 4467              		.loc 1 1783 4 view .LVU1371
1783:src/display.c **** 	}
 4468              		.loc 1 1783 24 is_stmt 0 view .LVU1372
 4469 005c 064B     		ldr	r3, .L422
ARM GAS  /tmp/cc1e4Gjl.s 			page 161


 4470 005e 1B68     		ldr	r3, [r3]
 4471 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1783:src/display.c **** 	}
 4472              		.loc 1 1783 33 view .LVU1373
 4473 0064 13F0100F 		tst	r3, #16
 4474 0068 14BF     		ite	ne
 4475 006a 0320     		movne	r0, #3
 4476 006c 0220     		moveq	r0, #2
 4477              	.LBE364:
 4478              	.LBE363:
1788:src/display.c **** #else
 4479              		.loc 1 1788 7 view .LVU1374
 4480 006e 0AB0     		add	sp, sp, #40
 4481              		.cfi_remember_state
 4482              		.cfi_def_cfa_offset 16
 4483              		@ sp needed
 4484 0070 70BD     		pop	{r4, r5, r6, pc}
 4485              	.LVL487:
 4486              	.L417:
 4487              		.cfi_restore_state
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4488              		.loc 1 1757 16 view .LVU1375
 4489 0072 0022     		movs	r2, #0
 4490 0074 E8E7     		b	.L412
 4491              	.L423:
 4492 0076 00BF     		.align	2
 4493              	.L422:
 4494 0078 00000000 		.word	main_ram
 4495              		.cfi_endproc
 4496              	.LFE24:
 4498              		.section	.text.set_IO_annunciator,"ax",%progbits
 4499              		.align	1
 4500              		.p2align 2,,3
 4501              		.global	set_IO_annunciator
 4502              		.syntax unified
 4503              		.thumb
 4504              		.thumb_func
 4505              		.fpu fpv4-sp-d16
 4507              	set_IO_annunciator:
 4508              	.LFB33:
2564:src/display.c **** #ifndef DM42
 4509              		.loc 1 2564 37 is_stmt 1 view -0
 4510              		.cfi_startproc
 4511              		@ args = 0, pretend = 0, frame = 0
 4512              		@ frame_needed = 0, uses_anonymous_args = 0
2569:src/display.c **** #endif
 4513              		.loc 1 2569 4 view .LVU1377
 4514              	.LVL488:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4515              		.loc 1 2579 2 view .LVU1378
2564:src/display.c **** #ifndef DM42
 4516              		.loc 1 2564 37 is_stmt 0 view .LVU1379
 4517 0000 10B5     		push	{r4, lr}
 4518              		.cfi_def_cfa_offset 8
 4519              		.cfi_offset 4, -8
 4520              		.cfi_offset 14, -4
2579:src/display.c **** 	  dot(LIT_EQ, on);
ARM GAS  /tmp/cc1e4Gjl.s 			page 162


 4521              		.loc 1 2579 9 view .LVU1380
 4522 0002 064C     		ldr	r4, .L428
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4523              		.loc 1 2579 5 view .LVU1381
 4524 0004 2368     		ldr	r3, [r4]
 4525 0006 03B9     		cbnz	r3, .L427
2584:src/display.c **** 
 4526              		.loc 1 2584 7 view .LVU1382
 4527 0008 10BD     		pop	{r4, pc}
 4528              	.L427:
 4529              	.LBB369:
 4530              	.LBI369:
2564:src/display.c **** #ifndef DM42
 4531              		.loc 1 2564 12 is_stmt 1 view .LVU1383
 4532              	.LBB370:
2580:src/display.c **** 	  IoAnnunciator = on;
 4533              		.loc 1 2580 4 view .LVU1384
 4534              	.LVL489:
 4535              	.LBB371:
 4536              	.LBI371:
 339:src/display.c ****   if (on)	set_dot(n);
 4537              		.loc 1 339 6 view .LVU1385
 4538              	.LBB372:
 340:src/display.c ****   else	clr_dot(n);
 4539              		.loc 1 340 3 view .LVU1386
 341:src/display.c **** }
 4540              		.loc 1 341 8 view .LVU1387
 4541 000a 8420     		movs	r0, #132
 4542 000c FFF7FEFF 		bl	clr_dot
 4543              	.LVL490:
 341:src/display.c **** }
 4544              		.loc 1 341 8 is_stmt 0 view .LVU1388
 4545              	.LBE372:
 4546              	.LBE371:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4547              		.loc 1 2581 4 is_stmt 1 view .LVU1389
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4548              		.loc 1 2581 18 is_stmt 0 view .LVU1390
 4549 0010 0023     		movs	r3, #0
 4550 0012 2360     		str	r3, [r4]
2582:src/display.c **** 	}
 4551              		.loc 1 2582 4 is_stmt 1 view .LVU1391
 4552              	.LBE370:
 4553              	.LBE369:
2584:src/display.c **** 
 4554              		.loc 1 2584 7 is_stmt 0 view .LVU1392
 4555 0014 BDE81040 		pop	{r4, lr}
 4556              		.cfi_restore 14
 4557              		.cfi_restore 4
 4558              		.cfi_def_cfa_offset 0
 4559              	.LBB374:
 4560              	.LBB373:
2582:src/display.c **** 	}
 4561              		.loc 1 2582 4 view .LVU1393
 4562 0018 FFF7FEBF 		b	finish_display
 4563              	.LVL491:
 4564              	.L429:
ARM GAS  /tmp/cc1e4Gjl.s 			page 163


 4565              		.align	2
 4566              	.L428:
 4567 001c 00000000 		.word	IoAnnunciator
 4568              	.LBE373:
 4569              	.LBE374:
 4570              		.cfi_endproc
 4571              	.LFE33:
 4573              		.section	.text.pixel_length,"ax",%progbits
 4574              		.align	1
 4575              		.p2align 2,,3
 4576              		.global	pixel_length
 4577              		.syntax unified
 4578              		.thumb
 4579              		.thumb_func
 4580              		.fpu fpv4-sp-d16
 4582              	pixel_length:
 4583              	.LVL492:
 4584              	.LFB40:
3467:src/display.c **** 
3468:src/display.c **** 
3469:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3470:src/display.c ****        */
3471:src/display.c ****       int pixel_length(const char *s, int smallp)
3472:src/display.c ****       {
 4585              		.loc 1 3472 7 is_stmt 1 view -0
 4586              		.cfi_startproc
 4587              		@ args = 0, pretend = 0, frame = 0
 4588              		@ frame_needed = 0, uses_anonymous_args = 0
3473:src/display.c **** 	int len = 0;
 4589              		.loc 1 3473 2 view .LVU1395
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4590              		.loc 1 3474 2 view .LVU1396
3472:src/display.c **** 	int len = 0;
 4591              		.loc 1 3472 7 is_stmt 0 view .LVU1397
 4592 0000 70B5     		push	{r4, r5, r6, lr}
 4593              		.cfi_def_cfa_offset 16
 4594              		.cfi_offset 4, -16
 4595              		.cfi_offset 5, -12
 4596              		.cfi_offset 6, -8
 4597              		.cfi_offset 14, -4
3472:src/display.c **** 	int len = 0;
 4598              		.loc 1 3472 7 view .LVU1398
 4599 0002 0446     		mov	r4, r0
3475:src/display.c **** 	while (*s != '\0') {
 4600              		.loc 1 3475 9 view .LVU1399
 4601 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4602              	.LVL493:
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4603              		.loc 1 3474 34 view .LVU1400
 4604 0006 0E1E     		subs	r6, r1, #0
 4605 0008 18BF     		it	ne
 4606 000a 4FF48076 		movne	r6, #256
 4607              	.LVL494:
 4608              		.loc 1 3475 2 is_stmt 1 view .LVU1401
 4609              		.loc 1 3475 8 view .LVU1402
 4610 000e A0B1     		cbz	r0, .L437
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
ARM GAS  /tmp/cc1e4Gjl.s 			page 164


 4611              		.loc 1 3473 6 is_stmt 0 view .LVU1403
 4612 0010 0025     		movs	r5, #0
 4613 0012 06E0     		b	.L435
 4614              	.LVL495:
 4615              	.L433:
3476:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3477:src/display.c **** 	  if (s[0] == '\007') {
3478:src/display.c **** 	    len += s[1] & 0x1F;
3479:src/display.c **** 	    s += 3;
3480:src/display.c **** 	    continue;
3481:src/display.c **** 	  }
3482:src/display.c **** #endif
3483:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4616              		.loc 1 3483 11 view .LVU1404
 4617 0014 3044     		add	r0, r0, r6
 4618 0016 FFF7FEFF 		bl	charlengths
 4619              	.LVL496:
 4620              		.loc 1 3483 42 view .LVU1405
 4621 001a 0134     		adds	r4, r4, #1
 4622              	.LVL497:
 4623              		.loc 1 3483 8 view .LVU1406
 4624 001c 0544     		add	r5, r5, r0
 4625              	.LVL498:
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4626              		.loc 1 3475 8 is_stmt 1 view .LVU1407
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4627              		.loc 1 3475 9 is_stmt 0 view .LVU1408
 4628 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4629              		.loc 1 3475 8 view .LVU1409
 4630 0020 48B1     		cbz	r0, .L430
 4631              	.LVL499:
 4632              	.L435:
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4633              		.loc 1 3477 4 is_stmt 1 view .LVU1410
 4634              		.loc 1 3483 4 view .LVU1411
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4635              		.loc 1 3477 7 is_stmt 0 view .LVU1412
 4636 0022 0728     		cmp	r0, #7
 4637 0024 F6D1     		bne	.L433
3478:src/display.c **** 	    s += 3;
 4638              		.loc 1 3478 6 is_stmt 1 view .LVU1413
3478:src/display.c **** 	    s += 3;
 4639              		.loc 1 3478 18 is_stmt 0 view .LVU1414
 4640 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4641              		.loc 1 3475 9 view .LVU1415
 4642 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3478:src/display.c **** 	    s += 3;
 4643              		.loc 1 3478 18 view .LVU1416
 4644 002a 03F01F03 		and	r3, r3, #31
3479:src/display.c **** 	    continue;
 4645              		.loc 1 3479 8 view .LVU1417
 4646 002e 0334     		adds	r4, r4, #3
 4647              	.LVL500:
3478:src/display.c **** 	    s += 3;
 4648              		.loc 1 3478 10 view .LVU1418
ARM GAS  /tmp/cc1e4Gjl.s 			page 165


 4649 0030 1D44     		add	r5, r5, r3
 4650              	.LVL501:
3479:src/display.c **** 	    continue;
 4651              		.loc 1 3479 6 is_stmt 1 view .LVU1419
3480:src/display.c **** 	  }
 4652              		.loc 1 3480 6 view .LVU1420
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4653              		.loc 1 3475 8 view .LVU1421
 4654 0032 0028     		cmp	r0, #0
 4655 0034 F5D1     		bne	.L435
 4656              	.L430:
3484:src/display.c **** 	}
3485:src/display.c **** 	return len;
3486:src/display.c ****       }
 4657              		.loc 1 3486 7 is_stmt 0 view .LVU1422
 4658 0036 2846     		mov	r0, r5
 4659 0038 70BD     		pop	{r4, r5, r6, pc}
 4660              	.LVL502:
 4661              	.L437:
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4662              		.loc 1 3473 6 view .LVU1423
 4663 003a 0546     		mov	r5, r0
3485:src/display.c ****       }
 4664              		.loc 1 3485 2 is_stmt 1 view .LVU1424
 4665              		.loc 1 3486 7 is_stmt 0 view .LVU1425
 4666 003c 2846     		mov	r0, r5
 4667 003e 70BD     		pop	{r4, r5, r6, pc}
 4668              		.loc 1 3486 7 view .LVU1426
 4669              		.cfi_endproc
 4670              	.LFE40:
 4672              		.section	.text.set_status,"ax",%progbits
 4673              		.align	1
 4674              		.p2align 2,,3
 4675              		.syntax unified
 4676              		.thumb
 4677              		.thumb_func
 4678              		.fpu fpv4-sp-d16
 4680              	set_status:
 4681              	.LVL503:
 4682              	.LFB43:
3487:src/display.c **** 
3488:src/display.c **** 
3489:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3490:src/display.c ****        * If this is larger than the display, return true.
3491:src/display.c ****        */
3492:src/display.c ****       static int string_too_large(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3494:src/display.c ****       }
3495:src/display.c ****       static int string_too_large_top(const char *s) {
3496:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3497:src/display.c ****       }
3498:src/display.c **** 
3499:src/display.c **** 
3500:src/display.c ****       /* Display the given string on the screen.
3501:src/display.c ****        */
3502:src/display.c ****       static void set_status(const char *str) {
 4683              		.loc 1 3502 47 is_stmt 1 view -0
ARM GAS  /tmp/cc1e4Gjl.s 			page 166


 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 0
 4686              		@ frame_needed = 0, uses_anonymous_args = 0
3503:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4687              		.loc 1 3503 2 view .LVU1428
 4688              		.loc 1 3503 24 is_stmt 0 view .LVU1429
 4689 0000 0C4B     		ldr	r3, .L445
 4690              		.loc 1 3503 2 view .LVU1430
 4691 0002 93F91630 		ldrsb	r3, [r3, #22]
 4692 0006 002B     		cmp	r3, #0
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4693              		.loc 1 3502 47 view .LVU1431
 4694 0008 10B5     		push	{r4, lr}
 4695              		.cfi_def_cfa_offset 8
 4696              		.cfi_offset 4, -8
 4697              		.cfi_offset 14, -4
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4698              		.loc 1 3502 47 view .LVU1432
 4699 000a 0446     		mov	r4, r0
 4700              		.loc 1 3503 2 view .LVU1433
 4701 000c 05DA     		bge	.L444
 4702              	.LBB375:
 4703              	.LBB376:
3345:src/display.c ****       }
 4704              		.loc 1 3345 2 view .LVU1434
 4705 000e 2046     		mov	r0, r4
3345:src/display.c ****       }
 4706              		.loc 1 3345 2 view .LVU1435
 4707              	.LBE376:
 4708              	.LBE375:
 4709              		.loc 1 3503 2 view .LVU1436
 4710 0010 0121     		movs	r1, #1
 4711              	.LVL504:
 4712              	.LBB382:
 4713              	.LBI375:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4714              		.loc 1 3344 19 is_stmt 1 view .LVU1437
 4715              	.LBB377:
3345:src/display.c ****       }
 4716              		.loc 1 3345 2 view .LVU1438
 4717              	.LBE377:
 4718              	.LBE382:
3504:src/display.c ****       }
 4719              		.loc 1 3504 7 is_stmt 0 view .LVU1439
 4720 0012 BDE81040 		pop	{r4, lr}
 4721              		.cfi_remember_state
 4722              		.cfi_restore 14
 4723              		.cfi_restore 4
 4724              		.cfi_def_cfa_offset 0
 4725              	.LBB383:
 4726              	.LBB378:
3345:src/display.c ****       }
 4727              		.loc 1 3345 2 view .LVU1440
 4728 0016 FFF7FEBF 		b	s_s_sized.constprop.0
 4729              	.LVL505:
 4730              	.L444:
 4731              		.cfi_restore_state
ARM GAS  /tmp/cc1e4Gjl.s 			page 167


3345:src/display.c ****       }
 4732              		.loc 1 3345 2 view .LVU1441
 4733              	.LBE378:
 4734              	.LBE383:
 4735              	.LBB384:
 4736              	.LBI384:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4737              		.loc 1 3492 18 is_stmt 1 view .LVU1442
 4738              	.LBB385:
3493:src/display.c ****       }
 4739              		.loc 1 3493 2 view .LVU1443
3493:src/display.c ****       }
 4740              		.loc 1 3493 9 is_stmt 0 view .LVU1444
 4741 001a 0021     		movs	r1, #0
 4742 001c FFF7FEFF 		bl	pixel_length
 4743              	.LVL506:
3493:src/display.c ****       }
 4744              		.loc 1 3493 9 view .LVU1445
 4745              	.LBE385:
 4746              	.LBE384:
3503:src/display.c ****       }
 4747              		.loc 1 3503 2 view .LVU1446
 4748 0020 2C28     		cmp	r0, #44
 4749 0022 D8BF     		it	le
 4750 0024 0021     		movle	r1, #0
 4751              	.LBB386:
 4752              	.LBB379:
3345:src/display.c ****       }
 4753              		.loc 1 3345 2 view .LVU1447
 4754 0026 2046     		mov	r0, r4
 4755              	.LBE379:
 4756              	.LBE386:
3503:src/display.c ****       }
 4757              		.loc 1 3503 2 view .LVU1448
 4758 0028 C8BF     		it	gt
 4759 002a 0121     		movgt	r1, #1
 4760              	.LVL507:
 4761              	.LBB387:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4762              		.loc 1 3344 19 is_stmt 1 view .LVU1449
 4763              	.LBB380:
3345:src/display.c ****       }
 4764              		.loc 1 3345 2 view .LVU1450
 4765              	.LBE380:
 4766              	.LBE387:
 4767              		.loc 1 3504 7 is_stmt 0 view .LVU1451
 4768 002c BDE81040 		pop	{r4, lr}
 4769              		.cfi_restore 14
 4770              		.cfi_restore 4
 4771              		.cfi_def_cfa_offset 0
 4772              	.LVL508:
 4773              	.LBB388:
 4774              	.LBB381:
3345:src/display.c ****       }
 4775              		.loc 1 3345 2 view .LVU1452
 4776 0030 FFF7FEBF 		b	s_s_sized.constprop.0
 4777              	.LVL509:
ARM GAS  /tmp/cc1e4Gjl.s 			page 168


 4778              	.L446:
3345:src/display.c ****       }
 4779              		.loc 1 3345 2 view .LVU1453
 4780              		.align	2
 4781              	.L445:
 4782 0034 00000000 		.word	StateWhileOn
 4783              	.LBE381:
 4784              	.LBE388:
 4785              		.cfi_endproc
 4786              	.LFE43:
 4788              		.section	.text.set_x_dn,"ax",%progbits
 4789              		.align	1
 4790              		.p2align 2,,3
 4791              		.global	set_x_dn
 4792              		.syntax unified
 4793              		.thumb
 4794              		.thumb_func
 4795              		.fpu fpv4-sp-d16
 4797              	set_x_dn:
 4798              	.LVL510:
 4799              	.LFB27:
1937:src/display.c **** 	char x[50], *obp = x;
 4800              		.loc 1 1937 67 is_stmt 1 view -0
 4801              		.cfi_startproc
 4802              		@ args = 0, pretend = 0, frame = 152
 4803              		@ frame_needed = 0, uses_anonymous_args = 0
1938:src/display.c **** 	int odig = 0;
 4804              		.loc 1 1938 2 view .LVU1455
1937:src/display.c **** 	char x[50], *obp = x;
 4805              		.loc 1 1937 67 is_stmt 0 view .LVU1456
 4806 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4807              		.cfi_def_cfa_offset 36
 4808              		.cfi_offset 4, -36
 4809              		.cfi_offset 5, -32
 4810              		.cfi_offset 6, -28
 4811              		.cfi_offset 7, -24
 4812              		.cfi_offset 8, -20
 4813              		.cfi_offset 9, -16
 4814              		.cfi_offset 10, -12
 4815              		.cfi_offset 11, -8
 4816              		.cfi_offset 14, -4
 4817 0004 A7B0     		sub	sp, sp, #156
 4818              		.cfi_def_cfa_offset 192
 4819              	.LVL511:
1939:src/display.c **** 	int show_exp = 0;
 4820              		.loc 1 1939 2 is_stmt 1 view .LVU1457
1940:src/display.c **** 	int j;
 4821              		.loc 1 1940 2 view .LVU1458
1941:src/display.c **** 	char mantissa[64];
 4822              		.loc 1 1941 2 view .LVU1459
1942:src/display.c **** 	int exp = 0;
 4823              		.loc 1 1942 2 view .LVU1460
1943:src/display.c **** 	char *p = mantissa;
 4824              		.loc 1 1943 2 view .LVU1461
1944:src/display.c **** 	char *r;
 4825              		.loc 1 1944 2 view .LVU1462
1945:src/display.c **** 	const char *q;
ARM GAS  /tmp/cc1e4Gjl.s 			page 169


 4826              		.loc 1 1945 2 view .LVU1463
1946:src/display.c **** 	int count, i;
 4827              		.loc 1 1946 2 view .LVU1464
1947:src/display.c **** 	int extra_digits = 0;
 4828              		.loc 1 1947 2 view .LVU1465
1948:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4829              		.loc 1 1948 2 view .LVU1466
1950:src/display.c **** 	int dispdigs;
 4830              		.loc 1 1950 2 view .LVU1467
1951:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4831              		.loc 1 1951 2 view .LVU1468
1952:src/display.c **** #else
 4832              		.loc 1 1952 2 view .LVU1469
1937:src/display.c **** 	char x[50], *obp = x;
 4833              		.loc 1 1937 67 is_stmt 0 view .LVU1470
 4834 0006 0546     		mov	r5, r0
1952:src/display.c **** #else
 4835              		.loc 1 1952 13 view .LVU1471
 4836 0008 08A8     		add	r0, sp, #32
 4837              	.LVL512:
1937:src/display.c **** 	char x[50], *obp = x;
 4838              		.loc 1 1937 67 view .LVU1472
 4839 000a 0C46     		mov	r4, r1
 4840 000c 0192     		str	r2, [sp, #4]
1952:src/display.c **** #else
 4841              		.loc 1 1952 13 view .LVU1473
 4842 000e FFF7FEFF 		bl	get_dispmode_digs
 4843              	.LVL513:
1952:src/display.c **** #else
 4844              		.loc 1 1952 13 view .LVU1474
 4845 0012 0646     		mov	r6, r0
 4846              	.LVL514:
1957:src/display.c **** 	int negative = 0;
 4847              		.loc 1 1957 2 is_stmt 1 view .LVU1475
1958:src/display.c **** 	int trimzeros = 0;
 4848              		.loc 1 1958 2 view .LVU1476
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4849              		.loc 1 1959 2 view .LVU1477
1961:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4850              		.loc 1 1961 2 view .LVU1478
1970:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4851              		.loc 1 1970 2 view .LVU1479
 4852 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4853              	.LVL515:
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4854              		.loc 1 1972 2 view .LVU1480
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4855              		.loc 1 1972 5 is_stmt 0 view .LVU1481
 4856 0018 002C     		cmp	r4, #0
 4857 001a 00F07981 		beq	.L448
 4858              	.L451:
1997:src/display.c **** 	  return;
 4859              		.loc 1 1997 2 is_stmt 1 view .LVU1482
1997:src/display.c **** 	  return;
 4860              		.loc 1 1997 6 is_stmt 0 view .LVU1483
 4861 001e 2146     		mov	r1, r4
 4862 0020 05F10800 		add	r0, r5, #8
ARM GAS  /tmp/cc1e4Gjl.s 			page 170


 4863 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4864              	.LVL516:
1997:src/display.c **** 	  return;
 4865              		.loc 1 1997 5 view .LVU1484
 4866 0028 8346     		mov	fp, r0
 4867 002a 0028     		cmp	r0, #0
 4868 002c 40F06881 		bne	.L447
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4869              		.loc 1 2000 2 is_stmt 1 view .LVU1485
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4870              		.loc 1 2000 12 is_stmt 0 view .LVU1486
 4871 0030 DFF8F885 		ldr	r8, .L691
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4872              		.loc 1 2000 5 view .LVU1487
 4873 0034 98F81130 		ldrb	r3, [r8, #17]	@ zero_extendqisi2
 4874 0038 012B     		cmp	r3, #1
 4875 003a 00F0D082 		beq	.L670
1943:src/display.c **** 	char *p = mantissa;
 4876              		.loc 1 1943 6 view .LVU1488
 4877 003e 8146     		mov	r9, r0
 4878              	.LVL517:
 4879              	.L454:
2006:src/display.c **** 
 4880              		.loc 1 2006 2 is_stmt 1 view .LVU1489
 4881 0040 09AF     		add	r7, sp, #36
 4882              	.LVL518:
2006:src/display.c **** 
 4883              		.loc 1 2006 2 is_stmt 0 view .LVU1490
 4884 0042 3846     		mov	r0, r7
 4885 0044 3222     		movs	r2, #50
 4886 0046 0021     		movs	r1, #0
 4887 0048 FFF7FEFF 		bl	xset
 4888              	.LVL519:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4889              		.loc 1 2008 2 is_stmt 1 view .LVU1491
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4890              		.loc 1 2008 6 is_stmt 0 view .LVU1492
 4891 004c 2846     		mov	r0, r5
 4892 004e FFF7FEFF 		bl	dn_eq0
 4893              	.LVL520:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4894              		.loc 1 2008 5 view .LVU1493
 4895 0052 0028     		cmp	r0, #0
 4896 0054 00F05781 		beq	.L455
2009:src/display.c **** 	    x[0] = '-';
 4897              		.loc 1 2009 4 is_stmt 1 view .LVU1494
2009:src/display.c **** 	    x[0] = '-';
 4898              		.loc 1 2009 7 is_stmt 0 view .LVU1495
 4899 0058 95F90830 		ldrsb	r3, [r5, #8]
 4900 005c 002B     		cmp	r3, #0
 4901 005e C0F2F182 		blt	.L671
 4902              	.L456:
2013:src/display.c **** 	} else
 4903              		.loc 1 2013 6 is_stmt 1 view .LVU1496
2013:src/display.c **** 	} else
 4904              		.loc 1 2013 11 is_stmt 0 view .LVU1497
 4905 0062 3023     		movs	r3, #48
ARM GAS  /tmp/cc1e4Gjl.s 			page 171


 4906 0064 8DF82430 		strb	r3, [sp, #36]
 4907              	.L457:
2017:src/display.c **** 	  show_x(x, exp);
 4908              		.loc 1 2017 2 is_stmt 1 view .LVU1498
2017:src/display.c **** 	  show_x(x, exp);
 4909              		.loc 1 2017 12 is_stmt 0 view .LVU1499
 4910 0068 98F811A0 		ldrb	r10, [r8, #17]	@ zero_extendqisi2
2017:src/display.c **** 	  show_x(x, exp);
 4911              		.loc 1 2017 5 view .LVU1500
 4912 006c BAF1010F 		cmp	r10, #1
 4913 0070 00F01B83 		beq	.L672
2023:src/display.c **** 	  //  ALL mode: fill the display
 4914              		.loc 1 2023 2 is_stmt 1 view .LVU1501
2025:src/display.c **** 	else
 4915              		.loc 1 2025 25 is_stmt 0 view .LVU1502
 4916 0074 019B     		ldr	r3, [sp, #4]
2023:src/display.c **** 	  //  ALL mode: fill the display
 4917              		.loc 1 2023 5 view .LVU1503
 4918 0076 002E     		cmp	r6, #0
 4919 0078 40F06581 		bne	.L673
2025:src/display.c **** 	else
 4920              		.loc 1 2025 4 is_stmt 1 view .LVU1504
2025:src/display.c **** 	else
 4921              		.loc 1 2025 25 is_stmt 0 view .LVU1505
 4922 007c 1968     		ldr	r1, [r3]
 4923              	.LBB406:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4924              		.loc 1 2032 11 view .LVU1506
 4925 007e 089B     		ldr	r3, [sp, #32]
 4926 0080 3246     		mov	r2, r6
 4927 0082 2846     		mov	r0, r5
 4928              	.LBE406:
2025:src/display.c **** 	else
 4929              		.loc 1 2025 25 view .LVU1507
 4930 0084 4D1E     		subs	r5, r1, #1
 4931              	.LVL521:
 4932              	.LBB407:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4933              		.loc 1 2032 11 view .LVU1508
 4934 0086 07A9     		add	r1, sp, #28
 4935              	.LBE407:
2025:src/display.c **** 	else
 4936              		.loc 1 2025 7 view .LVU1509
 4937 0088 0795     		str	r5, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 4938              		.loc 1 2029 2 is_stmt 1 view .LVU1510
 4939              	.LBB408:
2030:src/display.c **** 
 4940              		.loc 1 2030 4 view .LVU1511
 4941              	.LVL522:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4942              		.loc 1 2032 4 view .LVU1512
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4943              		.loc 1 2032 11 is_stmt 0 view .LVU1513
 4944 008a FFF7FEFF 		bl	std_round_fix
 4945              	.LVL523:
2037:src/display.c ****  	}
ARM GAS  /tmp/cc1e4Gjl.s 			page 172


 4946              		.loc 1 2037 27 view .LVU1514
 4947 008e 019B     		ldr	r3, [sp, #4]
 4948 0090 1B68     		ldr	r3, [r3]
 4949 0092 013B     		subs	r3, r3, #1
2037:src/display.c ****  	}
 4950              		.loc 1 2037 9 view .LVU1515
 4951 0094 0793     		str	r3, [sp, #28]
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4952              		.loc 1 2035 16 view .LVU1516
 4953 0096 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4954              		.loc 1 2032 11 view .LVU1517
 4955 0098 0646     		mov	r6, r0
 4956              	.LVL524:
2033:src/display.c **** 	    // allow zeros to be trimmed
 4957              		.loc 1 2033 4 is_stmt 1 view .LVU1518
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4958              		.loc 1 2035 6 view .LVU1519
2036:src/display.c **** 	    dd = *display_digits - 1;
 4959              		.loc 1 2036 4 view .LVU1520
2037:src/display.c ****  	}
 4960              		.loc 1 2037 6 view .LVU1521
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4961              		.loc 1 2035 16 is_stmt 0 view .LVU1522
 4962 009a 0393     		str	r3, [sp, #12]
 4963              	.LVL525:
 4964              	.L573:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4965              		.loc 1 2035 16 view .LVU1523
 4966              	.LBE408:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4967              		.loc 1 2049 2 is_stmt 1 view .LVU1524
 4968 009c 0DF15809 		add	r9, sp, #88
 4969              	.LVL526:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4970              		.loc 1 2049 2 is_stmt 0 view .LVU1525
 4971 00a0 3021     		movs	r1, #48
 4972 00a2 4846     		mov	r0, r9
 4973 00a4 3F22     		movs	r2, #63
 4974 00a6 FFF7FEFF 		bl	xset
 4975              	.LVL527:
2050:src/display.c **** 
 4976              		.loc 1 2050 2 is_stmt 1 view .LVU1526
2050:src/display.c **** 
 4977              		.loc 1 2050 31 is_stmt 0 view .LVU1527
 4978 00aa 0023     		movs	r3, #0
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4979              		.loc 1 2052 6 view .LVU1528
 4980 00ac 4521     		movs	r1, #69
 4981 00ae 3846     		mov	r0, r7
2050:src/display.c **** 
 4982              		.loc 1 2050 31 view .LVU1529
 4983 00b0 8DF89730 		strb	r3, [sp, #151]
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4984              		.loc 1 2052 2 is_stmt 1 view .LVU1530
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4985              		.loc 1 2052 6 is_stmt 0 view .LVU1531
ARM GAS  /tmp/cc1e4Gjl.s 			page 173


 4986 00b4 FFF7FEFF 		bl	find_char
 4987              	.LVL528:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4988              		.loc 1 2061 2 is_stmt 1 view .LVU1532
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4989              		.loc 1 2061 5 is_stmt 0 view .LVU1533
 4990 00b8 0028     		cmp	r0, #0
 4991 00ba 00F05181 		beq	.L580
2062:src/display.c **** #endif
 4992              		.loc 1 2062 7 is_stmt 1 view .LVU1534
2062:src/display.c **** #endif
 4993              		.loc 1 2062 13 is_stmt 0 view .LVU1535
 4994 00be 0130     		adds	r0, r0, #1
 4995              	.LVL529:
2062:src/display.c **** #endif
 4996              		.loc 1 2062 13 view .LVU1536
 4997 00c0 FFF7FEFF 		bl	s_to_i
 4998              	.LVL530:
2062:src/display.c **** #endif
 4999              		.loc 1 2062 13 view .LVU1537
 5000 00c4 0546     		mov	r5, r0
 5001              	.LVL531:
 5002              	.L473:
2066:src/display.c **** 	if (!res) {
 5003              		.loc 1 2066 2 is_stmt 1 view .LVU1538
2066:src/display.c **** 	if (!res) {
 5004              		.loc 1 2066 12 view .LVU1539
2066:src/display.c **** 	if (!res) {
 5005              		.loc 1 2066 2 is_stmt 0 view .LVU1540
 5006 00c6 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5007 00ca 202B     		cmp	r3, #32
2066:src/display.c **** 	if (!res) {
 5008              		.loc 1 2066 8 view .LVU1541
 5009 00cc B846     		mov	r8, r7
2066:src/display.c **** 	if (!res) {
 5010              		.loc 1 2066 2 view .LVU1542
 5011 00ce 03D1     		bne	.L474
 5012              	.LVL532:
 5013              	.L475:
2066:src/display.c **** 	if (!res) {
 5014              		.loc 1 2066 27 is_stmt 1 discriminator 3 view .LVU1543
2066:src/display.c **** 	if (!res) {
 5015              		.loc 1 2066 23 discriminator 3 view .LVU1544
2066:src/display.c **** 	if (!res) {
 5016              		.loc 1 2066 12 discriminator 3 view .LVU1545
2066:src/display.c **** 	if (!res) {
 5017              		.loc 1 2066 2 is_stmt 0 discriminator 3 view .LVU1546
 5018 00d0 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5019              	.LVL533:
2066:src/display.c **** 	if (!res) {
 5020              		.loc 1 2066 2 discriminator 3 view .LVU1547
 5021 00d4 202B     		cmp	r3, #32
 5022 00d6 FBD0     		beq	.L475
 5023              	.LVL534:
 5024              	.L474:
2067:src/display.c **** 	  CLR_EXP_SIGN;
 5025              		.loc 1 2067 2 is_stmt 1 view .LVU1548
ARM GAS  /tmp/cc1e4Gjl.s 			page 174


2067:src/display.c **** 	  CLR_EXP_SIGN;
 5026              		.loc 1 2067 5 is_stmt 0 view .LVU1549
 5027 00d8 002C     		cmp	r4, #0
 5028 00da 00F0BE82 		beq	.L674
 5029              	.L476:
2071:src/display.c **** 	  negative = 1;
 5030              		.loc 1 2071 2 is_stmt 1 view .LVU1550
2071:src/display.c **** 	  negative = 1;
 5031              		.loc 1 2071 6 is_stmt 0 view .LVU1551
 5032 00de 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2071:src/display.c **** 	  negative = 1;
 5033              		.loc 1 2071 5 view .LVU1552
 5034 00e2 2D2B     		cmp	r3, #45
 5035 00e4 00F0C481 		beq	.L675
2074:src/display.c **** 	  q++;
 5036              		.loc 1 2074 9 is_stmt 1 view .LVU1553
2074:src/display.c **** 	  q++;
 5037              		.loc 1 2074 12 is_stmt 0 view .LVU1554
 5038 00e8 2B2B     		cmp	r3, #43
 5039 00ea 00F09882 		beq	.L676
1958:src/display.c **** 	int trimzeros = 0;
 5040              		.loc 1 1958 6 view .LVU1555
 5041 00ee 0022     		movs	r2, #0
 5042 00f0 0292     		str	r2, [sp, #8]
 5043              	.LVL535:
 5044              	.L478:
2076:src/display.c **** 	if (*q == '.') {
 5045              		.loc 1 2076 9 is_stmt 1 discriminator 1 view .LVU1556
2076:src/display.c **** 	if (*q == '.') {
 5046              		.loc 1 2076 2 is_stmt 0 discriminator 1 view .LVU1557
 5047 00f2 302B     		cmp	r3, #48
 5048 00f4 03D1     		bne	.L480
 5049              	.LVL536:
 5050              	.L479:
2076:src/display.c **** 	if (*q == '.') {
 5051              		.loc 1 2076 24 is_stmt 1 discriminator 2 view .LVU1558
2076:src/display.c **** 	if (*q == '.') {
 5052              		.loc 1 2076 20 discriminator 2 view .LVU1559
2076:src/display.c **** 	if (*q == '.') {
 5053              		.loc 1 2076 9 discriminator 2 view .LVU1560
 5054 00f6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5055              	.LVL537:
2076:src/display.c **** 	if (*q == '.') {
 5056              		.loc 1 2076 2 is_stmt 0 discriminator 2 view .LVU1561
 5057 00fa 302B     		cmp	r3, #48
 5058 00fc FBD0     		beq	.L479
 5059              	.LVL538:
 5060              	.L480:
2077:src/display.c **** 	  do
 5061              		.loc 1 2077 2 is_stmt 1 view .LVU1562
2077:src/display.c **** 	  do
 5062              		.loc 1 2077 5 is_stmt 0 view .LVU1563
 5063 00fe 2E2B     		cmp	r3, #46
 5064 0100 00F09E81 		beq	.L677
2084:src/display.c **** 	    *p++ = *q++;
 5065              		.loc 1 2084 4 is_stmt 1 view .LVU1564
2084:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 175


 5066              		.loc 1 2084 7 is_stmt 0 view .LVU1565
 5067 0104 A3F13002 		sub	r2, r3, #48
 5068 0108 092A     		cmp	r2, #9
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5069              		.loc 1 2085 6 is_stmt 1 view .LVU1566
 5070              	.LVL539:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5071              		.loc 1 2085 15 is_stmt 0 view .LVU1567
 5072 010a 9CBF     		itt	ls
 5073 010c 08F10108 		addls	r8, r8, #1
 5074              	.LVL540:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5075              		.loc 1 2085 11 view .LVU1568
 5076 0110 8DF85830 		strbls	r3, [sp, #88]
2086:src/display.c **** 	    *p++ = *q++;
 5077              		.loc 1 2086 11 view .LVU1569
 5078 0114 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2086:src/display.c **** 	    *p++ = *q++;
 5079              		.loc 1 2086 10 view .LVU1570
 5080 0118 A2F13003 		sub	r3, r2, #48
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5081              		.loc 1 2085 8 view .LVU1571
 5082 011c 94BF     		ite	ls
 5083 011e 0DF15901 		addls	r1, sp, #89
1944:src/display.c **** 	char *r;
 5084              		.loc 1 1944 8 view .LVU1572
 5085 0122 4946     		movhi	r1, r9
 5086              	.LVL541:
2086:src/display.c **** 	    *p++ = *q++;
 5087              		.loc 1 2086 10 is_stmt 1 view .LVU1573
 5088 0124 092B     		cmp	r3, #9
 5089 0126 0ED8     		bhi	.L486
 5090 0128 A5EB0800 		sub	r0, r5, r8
 5091 012c 08F10103 		add	r3, r8, #1
 5092              	.L487:
 5093              	.LVL542:
2087:src/display.c **** 	    exp++;
 5094              		.loc 1 2087 6 view .LVU1574
2087:src/display.c **** 	    exp++;
 5095              		.loc 1 2087 11 is_stmt 0 view .LVU1575
 5096 0130 01F8012B 		strb	r2, [r1], #1
 5097              	.LVL543:
2087:src/display.c **** 	    exp++;
 5098              		.loc 1 2087 15 view .LVU1576
 5099 0134 9846     		mov	r8, r3
 5100              	.LVL544:
2088:src/display.c **** 	  }
 5101              		.loc 1 2088 6 is_stmt 1 view .LVU1577
 5102 0136 C518     		adds	r5, r0, r3
 5103              	.LVL545:
2086:src/display.c **** 	    *p++ = *q++;
 5104              		.loc 1 2086 10 view .LVU1578
2086:src/display.c **** 	    *p++ = *q++;
 5105              		.loc 1 2086 11 is_stmt 0 view .LVU1579
 5106 0138 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5107              	.LVL546:
2086:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 176


 5108              		.loc 1 2086 10 view .LVU1580
 5109 013c A2F1300C 		sub	ip, r2, #48
 5110 0140 BCF1090F 		cmp	ip, #9
 5111 0144 F4D9     		bls	.L487
 5112              	.LVL547:
 5113              	.L486:
2090:src/display.c **** 	    q++;
 5114              		.loc 1 2090 4 is_stmt 1 view .LVU1581
2090:src/display.c **** 	    q++;
 5115              		.loc 1 2090 7 is_stmt 0 view .LVU1582
 5116 0146 2E2A     		cmp	r2, #46
 5117 0148 00F05782 		beq	.L678
 5118              	.LVL548:
 5119              	.L483:
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5120              		.loc 1 2097 2 is_stmt 1 view .LVU1583
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5121              		.loc 1 2098 12 is_stmt 0 view .LVU1584
 5122 014c 019B     		ldr	r3, [sp, #4]
 5123 014e 079A     		ldr	r2, [sp, #28]
 5124 0150 D3F800A0 		ldr	r10, [r3]
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5125              		.loc 1 2097 5 view .LVU1585
 5126 0154 012E     		cmp	r6, #1
 5127 0156 00F06381 		beq	.L489
 5128              	.LVL549:
 5129              	.L669:
2099:src/display.c **** 	  else {
 5130              		.loc 1 2099 35 view .LVU1586
 5131 015a 0021     		movs	r1, #0
 5132              	.LVL550:
 5133              	.L490:
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5134              		.loc 1 2111 2 is_stmt 1 view .LVU1587
 5135 015c 02F1010E 		add	lr, r2, #1
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5136              		.loc 1 2111 35 is_stmt 0 view .LVU1588
 5137 0160 7144     		add	r1, r1, lr
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5138              		.loc 1 2111 4 view .LVU1589
 5139 0162 09EB0103 		add	r3, r9, r1
 5140              	.LVL551:
2112:src/display.c **** 	  *p = '0';
 5141              		.loc 1 2112 2 is_stmt 1 view .LVU1590
2112:src/display.c **** 	  *p = '0';
 5142              		.loc 1 2112 6 is_stmt 0 view .LVU1591
 5143 0166 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2112:src/display.c **** 	  *p = '0';
 5144              		.loc 1 2112 5 view .LVU1592
 5145 016a 3428     		cmp	r0, #52
 5146 016c 26D9     		bls	.L495
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5147              		.loc 1 2113 4 is_stmt 1 view .LVU1593
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5148              		.loc 1 2113 7 is_stmt 0 view .LVU1594
 5149 016e 3020     		movs	r0, #48
 5150 0170 09F80100 		strb	r0, [r9, r1]
ARM GAS  /tmp/cc1e4Gjl.s 			page 177


2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5151              		.loc 1 2114 4 is_stmt 1 view .LVU1595
 5152              	.LVL552:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5153              		.loc 1 2114 23 view .LVU1596
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5154              		.loc 1 2114 4 is_stmt 0 view .LVU1597
 5155 0174 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5156 0178 3928     		cmp	r0, #57
 5157 017a 40F0AC83 		bne	.L496
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5158              		.loc 1 2114 11 view .LVU1598
 5159 017e 4846     		mov	r0, r9
 5160              	.LVL553:
 5161              	.L497:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5162              		.loc 1 2114 38 is_stmt 1 discriminator 3 view .LVU1599
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5163              		.loc 1 2114 34 discriminator 3 view .LVU1600
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5164              		.loc 1 2114 23 discriminator 3 view .LVU1601
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5165              		.loc 1 2114 4 is_stmt 0 discriminator 3 view .LVU1602
 5166 0180 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5167              	.LVL554:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5168              		.loc 1 2114 4 discriminator 3 view .LVU1603
 5169 0184 BCF1390F 		cmp	ip, #57
 5170 0188 FAD0     		beq	.L497
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5171              		.loc 1 2115 4 is_stmt 1 view .LVU1604
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5172              		.loc 1 2115 7 is_stmt 0 view .LVU1605
 5173 018a 8342     		cmp	r3, r0
 5174 018c 00F0F780 		beq	.L679
 5175              	.LVL555:
 5176              	.L571:
2124:src/display.c **** 	      *p = '0';
 5177              		.loc 1 2124 12 is_stmt 1 view .LVU1606
2124:src/display.c **** 	      *p = '0';
 5178              		.loc 1 2124 13 is_stmt 0 view .LVU1607
 5179 0190 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2124:src/display.c **** 	      *p = '0';
 5180              		.loc 1 2124 12 view .LVU1608
 5181 0194 BCF1390F 		cmp	ip, #57
 5182 0198 03F1FF30 		add	r0, r3, #-1
 5183              	.LVL556:
2124:src/display.c **** 	      *p = '0';
 5184              		.loc 1 2124 12 view .LVU1609
 5185 019c 08D1     		bne	.L500
2125:src/display.c **** 	    (*p)++;
 5186              		.loc 1 2125 11 view .LVU1610
 5187 019e 4FF0300E 		mov	lr, #48
 5188              	.L499:
2125:src/display.c **** 	    (*p)++;
 5189              		.loc 1 2125 8 is_stmt 1 view .LVU1611
2125:src/display.c **** 	    (*p)++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 178


 5190              		.loc 1 2125 11 is_stmt 0 view .LVU1612
 5191 01a2 80F800E0 		strb	lr, [r0]
2124:src/display.c **** 	      *p = '0';
 5192              		.loc 1 2124 12 is_stmt 1 view .LVU1613
 5193              	.LVL557:
2124:src/display.c **** 	      *p = '0';
 5194              		.loc 1 2124 13 is_stmt 0 view .LVU1614
 5195 01a6 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5196              	.LVL558:
2124:src/display.c **** 	      *p = '0';
 5197              		.loc 1 2124 12 view .LVU1615
 5198 01aa BCF1390F 		cmp	ip, #57
 5199 01ae F8D0     		beq	.L499
 5200              	.L500:
2126:src/display.c **** 	  }
 5201              		.loc 1 2126 6 is_stmt 1 view .LVU1616
2126:src/display.c **** 	  }
 5202              		.loc 1 2126 10 is_stmt 0 view .LVU1617
 5203 01b0 0CF1010C 		add	ip, ip, #1
 5204 01b4 80F800C0 		strb	ip, [r0]
 5205              	.LVL559:
 5206              	.L668:
2126:src/display.c **** 	  }
 5207              		.loc 1 2126 10 view .LVU1618
 5208 01b8 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5209              	.L495:
2131:src/display.c **** 
 5210              		.loc 1 2131 2 is_stmt 1 view .LVU1619
 5211              	.LVL560:
2131:src/display.c **** 
 5212              		.loc 1 2131 45 view .LVU1620
2131:src/display.c **** 
 5213              		.loc 1 2131 2 is_stmt 0 view .LVU1621
 5214 01bc 28B1     		cbz	r0, .L506
 5215              	.LVL561:
 5216              	.L570:
2131:src/display.c **** 
 5217              		.loc 1 2131 62 view .LVU1622
 5218 01be 3020     		movs	r0, #48
 5219              	.L507:
2131:src/display.c **** 
 5220              		.loc 1 2131 68 is_stmt 1 discriminator 3 view .LVU1623
2131:src/display.c **** 
 5221              		.loc 1 2131 57 discriminator 3 view .LVU1624
 5222              	.LVL562:
2131:src/display.c **** 
 5223              		.loc 1 2131 62 is_stmt 0 discriminator 3 view .LVU1625
 5224 01c0 03F8010B 		strb	r0, [r3], #1
 5225              	.LVL563:
2131:src/display.c **** 
 5226              		.loc 1 2131 45 is_stmt 1 discriminator 3 view .LVU1626
2131:src/display.c **** 
 5227              		.loc 1 2131 2 is_stmt 0 discriminator 3 view .LVU1627
 5228 01c4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5229 01c6 0029     		cmp	r1, #0
 5230 01c8 FAD1     		bne	.L507
 5231              	.L506:
ARM GAS  /tmp/cc1e4Gjl.s 			page 179


2133:src/display.c **** 	switch (mode) {
 5232              		.loc 1 2133 2 is_stmt 1 view .LVU1628
 5233              	.LVL564:
2134:src/display.c **** 	default:
 5234              		.loc 1 2134 2 view .LVU1629
 5235 01ca 022E     		cmp	r6, #2
 5236 01cc 00F05681 		beq	.L544
 5237 01d0 032E     		cmp	r6, #3
 5238 01d2 00F0F880 		beq	.L509
 5239 01d6 012E     		cmp	r6, #1
 5240 01d8 00F0C981 		beq	.L510
2137:src/display.c **** 	  if (count != *display_digits)
 5241              		.loc 1 2137 4 view .LVU1630
 5242              	.LVL565:
2137:src/display.c **** 	  if (count != *display_digits)
 5243              		.loc 1 2137 34 view .LVU1631
2137:src/display.c **** 	  if (count != *display_digits)
 5244              		.loc 1 2137 42 is_stmt 0 view .LVU1632
 5245 01dc 26AB     		add	r3, sp, #152
 5246 01de 5344     		add	r3, r3, r10
2137:src/display.c **** 	  if (count != *display_digits)
 5247              		.loc 1 2137 4 view .LVU1633
 5248 01e0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5249 01e4 302B     		cmp	r3, #48
 5250 01e6 40F06983 		bne	.L586
 5251 01ea 0AF1FF31 		add	r1, r10, #-1
 5252 01ee 4944     		add	r1, r1, r9
 5253 01f0 5046     		mov	r0, r10
 5254              	.LVL566:
 5255              	.L514:
2137:src/display.c **** 	  if (count != *display_digits)
 5256              		.loc 1 2137 66 is_stmt 1 discriminator 3 view .LVU1634
2137:src/display.c **** 	  if (count != *display_digits)
 5257              		.loc 1 2137 58 discriminator 3 view .LVU1635
2137:src/display.c **** 	  if (count != *display_digits)
 5258              		.loc 1 2137 42 is_stmt 0 discriminator 3 view .LVU1636
 5259 01f2 11F80169 		ldrb	r6, [r1], #-1	@ zero_extendqisi2
2137:src/display.c **** 	  if (count != *display_digits)
 5260              		.loc 1 2137 4 discriminator 3 view .LVU1637
 5261 01f6 302E     		cmp	r6, #48
 5262 01f8 0346     		mov	r3, r0
2137:src/display.c **** 	  if (count != *display_digits)
 5263              		.loc 1 2137 63 discriminator 3 view .LVU1638
 5264 01fa 00F1FF30 		add	r0, r0, #-1
 5265              	.LVL567:
2137:src/display.c **** 	  if (count != *display_digits)
 5266              		.loc 1 2137 34 is_stmt 1 discriminator 3 view .LVU1639
2137:src/display.c **** 	  if (count != *display_digits)
 5267              		.loc 1 2137 4 is_stmt 0 discriminator 3 view .LVU1640
 5268 01fe F8D0     		beq	.L514
2138:src/display.c **** 	    count++;
 5269              		.loc 1 2138 4 is_stmt 1 view .LVU1641
2138:src/display.c **** 	    count++;
 5270              		.loc 1 2138 7 is_stmt 0 view .LVU1642
 5271 0200 5045     		cmp	r0, r10
 5272 0202 08BF     		it	eq
 5273 0204 5346     		moveq	r3, r10
ARM GAS  /tmp/cc1e4Gjl.s 			page 180


 5274              	.LVL568:
 5275              	.L513:
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5276              		.loc 1 2141 4 is_stmt 1 view .LVU1643
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5277              		.loc 1 2141 7 is_stmt 0 view .LVU1644
 5278 0206 5545     		cmp	r5, r10
 5279 0208 80F2EF80 		bge	.L515
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5280              		.loc 1 2141 47 discriminator 1 view .LVU1645
 5281 020c A3EB0A01 		sub	r1, r3, r10
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5282              		.loc 1 2141 31 discriminator 1 view .LVU1646
 5283 0210 A942     		cmp	r1, r5
 5284 0212 00F3EA80 		bgt	.L515
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5285              		.loc 1 2166 11 is_stmt 1 view .LVU1647
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5286              		.loc 1 2166 14 is_stmt 0 view .LVU1648
 5287 0216 002D     		cmp	r5, #0
 5288 0218 C0F27183 		blt	.L524
 5289 021c 6A1C     		adds	r2, r5, #1
2168:src/display.c **** 		*obp++ = ',';
 5290              		.loc 1 2168 31 view .LVU1649
 5291 021e DFF814E4 		ldr	lr, .L691+8
 5292 0222 0492     		str	r2, [sp, #16]
 5293 0224 09EB0200 		add	r0, r9, r2
2133:src/display.c **** 	switch (mode) {
 5294              		.loc 1 2133 4 view .LVU1650
 5295 0228 CC46     		mov	ip, r9
1938:src/display.c **** 	int odig = 0;
 5296              		.loc 1 1938 15 view .LVU1651
 5297 022a 3946     		mov	r1, r7
2169:src/display.c **** 	      *obp++ = *p++;
 5298              		.loc 1 2169 10 view .LVU1652
 5299 022c 4FF02C08 		mov	r8, #44
 5300 0230 0593     		str	r3, [sp, #20]
 5301 0232 05E0     		b	.L525
 5302              	.LVL569:
 5303              	.L528:
2169:src/display.c **** 	      *obp++ = *p++;
 5304              		.loc 1 2169 3 is_stmt 1 view .LVU1653
2168:src/display.c **** 		*obp++ = ',';
 5305              		.loc 1 2168 18 is_stmt 0 view .LVU1654
 5306 0234 022E     		cmp	r6, #2
2169:src/display.c **** 	      *obp++ = *p++;
 5307              		.loc 1 2169 10 view .LVU1655
 5308 0236 0ABF     		itet	eq
 5309 0238 81F80180 		strbeq	r8, [r1, #1]
2170:src/display.c **** 	      odig++;
 5310              		.loc 1 2170 12 view .LVU1656
 5311 023c 0131     		addne	r1, r1, #1
 5312              	.LVL570:
2169:src/display.c **** 	      *obp++ = *p++;
 5313              		.loc 1 2169 7 view .LVU1657
 5314 023e 0231     		addeq	r1, r1, #2
 5315              	.LVL571:
ARM GAS  /tmp/cc1e4Gjl.s 			page 181


 5316              	.L525:
2170:src/display.c **** 	      odig++;
 5317              		.loc 1 2170 8 is_stmt 1 discriminator 2 view .LVU1658
2170:src/display.c **** 	      odig++;
 5318              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1659
 5319 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5320              	.LVL572:
2168:src/display.c **** 		*obp++ = ',';
 5321              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1660
2170:src/display.c **** 	      odig++;
 5322              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1661
 5323 0244 0A70     		strb	r2, [r1]
2171:src/display.c **** 	    }
 5324              		.loc 1 2171 8 is_stmt 1 discriminator 2 view .LVU1662
 5325              	.LVL573:
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5326              		.loc 1 2167 23 discriminator 2 view .LVU1663
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5327              		.loc 1 2167 15 discriminator 2 view .LVU1664
2168:src/display.c **** 		*obp++ = ',';
 5328              		.loc 1 2168 31 is_stmt 0 discriminator 2 view .LVU1665
 5329 0246 A9EB0C02 		sub	r2, r9, ip
 5330 024a 2A44     		add	r2, r2, r5
 5331 024c 8EFB0236 		smull	r3, r6, lr, r2
 5332 0250 A6EBE276 		sub	r6, r6, r2, asr #31
 5333 0254 06EB4606 		add	r6, r6, r6, lsl #1
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5334              		.loc 1 2167 6 discriminator 2 view .LVU1666
 5335 0258 8445     		cmp	ip, r0
2168:src/display.c **** 		*obp++ = ',';
 5336              		.loc 1 2168 31 discriminator 2 view .LVU1667
 5337 025a A2EB0606 		sub	r6, r2, r6
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5338              		.loc 1 2167 6 discriminator 2 view .LVU1668
 5339 025e E9D1     		bne	.L528
 5340 0260 059B     		ldr	r3, [sp, #20]
 5341 0262 049E     		ldr	r6, [sp, #16]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5342              		.loc 1 2173 6 is_stmt 1 view .LVU1669
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5343              		.loc 1 2173 13 is_stmt 0 view .LVU1670
 5344 0264 2E22     		movs	r2, #46
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5345              		.loc 1 2174 9 view .LVU1671
 5346 0266 B342     		cmp	r3, r6
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5347              		.loc 1 2173 13 view .LVU1672
 5348 0268 4A70     		strb	r2, [r1, #1]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5349              		.loc 1 2173 10 view .LVU1673
 5350 026a 01F10208 		add	r8, r1, #2
 5351              	.LVL574:
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5352              		.loc 1 2174 6 is_stmt 1 view .LVU1674
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5353              		.loc 1 2174 9 is_stmt 0 view .LVU1675
 5354 026e 40F32781 		ble	.L522
ARM GAS  /tmp/cc1e4Gjl.s 			page 182


 5355 0272 5A1B     		subs	r2, r3, r5
 5356 0274 0A44     		add	r2, r2, r1
 5357 0276 0131     		adds	r1, r1, #1
 5358              	.LVL575:
 5359              	.L529:
2176:src/display.c **** 		odig++;
 5360              		.loc 1 2176 3 is_stmt 1 discriminator 3 view .LVU1676
2176:src/display.c **** 		odig++;
 5361              		.loc 1 2176 10 is_stmt 0 discriminator 3 view .LVU1677
 5362 0278 10F8016B 		ldrb	r6, [r0], #1	@ zero_extendqisi2
 5363              	.LVL576:
2176:src/display.c **** 		odig++;
 5364              		.loc 1 2176 10 discriminator 3 view .LVU1678
 5365 027c 01F8016F 		strb	r6, [r1, #1]!
2177:src/display.c **** 	      }
 5366              		.loc 1 2177 3 is_stmt 1 discriminator 3 view .LVU1679
2175:src/display.c **** 		*obp++ = *p++;
 5367              		.loc 1 2175 31 discriminator 3 view .LVU1680
2175:src/display.c **** 		*obp++ = *p++;
 5368              		.loc 1 2175 22 discriminator 3 view .LVU1681
2175:src/display.c **** 		*obp++ = *p++;
 5369              		.loc 1 2175 8 is_stmt 0 discriminator 3 view .LVU1682
 5370 0280 8A42     		cmp	r2, r1
 5371 0282 F9D1     		bne	.L529
 5372 0284 EA43     		mvns	r2, r5
 5373 0286 1A44     		add	r2, r2, r3
 5374 0288 9044     		add	r8, r8, r2
 5375              	.LVL577:
2177:src/display.c **** 	      }
 5376              		.loc 1 2177 7 view .LVU1683
 5377 028a 1E46     		mov	r6, r3
 5378 028c 18E1     		b	.L522
 5379              	.LVL578:
 5380              	.L590:
2177:src/display.c **** 	      }
 5381              		.loc 1 2177 7 view .LVU1684
 5382 028e B846     		mov	r8, r7
 5383              	.LVL579:
 5384              	.L551:
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5385              		.loc 1 2269 2 is_stmt 1 view .LVU1685
2275:src/display.c **** 	if (odig > *display_digits)
 5386              		.loc 1 2275 2 view .LVU1686
 5387 0290 5645     		cmp	r6, r10
 5388 0292 A8BF     		it	ge
 5389 0294 5646     		movge	r6, r10
 5390              	.LVL580:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5391              		.loc 1 2278 23 is_stmt 0 view .LVU1687
 5392 0296 AAEB0603 		sub	r3, r10, r6
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5393              		.loc 1 2278 4 view .LVU1688
 5394 029a 03EBC30A 		add	r10, r3, r3, lsl #3
2281:src/display.c **** 	  if (res) *res++ = '-';
 5395              		.loc 1 2281 5 view .LVU1689
 5396 029e 029B     		ldr	r3, [sp, #8]
2275:src/display.c **** 	if (odig > *display_digits)
ARM GAS  /tmp/cc1e4Gjl.s 			page 183


 5397              		.loc 1 2275 7 view .LVU1690
 5398 02a0 0022     		movs	r2, #0
 5399 02a2 88F80020 		strb	r2, [r8]
2276:src/display.c **** 	  odig = *display_digits;
 5400              		.loc 1 2276 2 is_stmt 1 view .LVU1691
 5401              	.LVL581:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5402              		.loc 1 2278 2 view .LVU1692
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5403              		.loc 1 2279 2 view .LVU1693
2281:src/display.c **** 	  if (res) *res++ = '-';
 5404              		.loc 1 2281 2 view .LVU1694
2281:src/display.c **** 	  if (res) *res++ = '-';
 5405              		.loc 1 2281 5 is_stmt 0 view .LVU1695
 5406 02a6 2BB1     		cbz	r3, .L554
2282:src/display.c **** 	  else {
 5407              		.loc 1 2282 4 is_stmt 1 view .LVU1696
2282:src/display.c **** 	  else {
 5408              		.loc 1 2282 7 is_stmt 0 view .LVU1697
 5409 02a8 002C     		cmp	r4, #0
 5410 02aa 00F0EE81 		beq	.L555
2282:src/display.c **** 	  else {
 5411              		.loc 1 2282 13 is_stmt 1 discriminator 1 view .LVU1698
 5412              	.LVL582:
2282:src/display.c **** 	  else {
 5413              		.loc 1 2282 20 is_stmt 0 discriminator 1 view .LVU1699
 5414 02ae 2D22     		movs	r2, #45
 5415 02b0 04F8012B 		strb	r2, [r4], #1
 5416              	.LVL583:
 5417              	.L554:
2290:src/display.c **** 	  if (c == '.') {
 5418              		.loc 1 2290 12 is_stmt 1 discriminator 1 view .LVU1700
2290:src/display.c **** 	  if (c == '.') {
 5419              		.loc 1 2290 18 is_stmt 0 discriminator 1 view .LVU1701
 5420 02b4 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5421              	.LVL584:
2290:src/display.c **** 	  if (c == '.') {
 5422              		.loc 1 2290 2 discriminator 1 view .LVU1702
 5423 02b8 BAB1     		cbz	r2, .L556
2290:src/display.c **** 	  if (c == '.') {
 5424              		.loc 1 2290 31 view .LVU1703
 5425 02ba BAF16B0F 		cmp	r10, #107
 5426 02be 14DC     		bgt	.L556
 5427              	.LVL585:
 5428              	.L557:
2292:src/display.c **** 	  } else if (c == ',') {
 5429              		.loc 1 2292 12 view .LVU1704
 5430 02c0 DFF87493 		ldr	r9, .L691+12
 5431              	.LVL586:
 5432              	.L566:
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5433              		.loc 1 2291 4 is_stmt 1 view .LVU1705
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5434              		.loc 1 2291 7 is_stmt 0 view .LVU1706
 5435 02c4 2E2A     		cmp	r2, #46
 5436 02c6 00F01081 		beq	.L680
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
ARM GAS  /tmp/cc1e4Gjl.s 			page 184


 5437              		.loc 1 2293 11 is_stmt 1 view .LVU1707
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5438              		.loc 1 2293 14 is_stmt 0 view .LVU1708
 5439 02ca 2C2A     		cmp	r2, #44
 5440 02cc 00F03681 		beq	.L681
2296:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5441              		.loc 1 2296 6 is_stmt 1 view .LVU1709
 5442              	.LVL587:
 5443              	.LBB409:
 5444              	.LBI409:
 407:src/display.c ****   if (res) *res++ = ch;
 5445              		.loc 1 407 14 view .LVU1710
 5446              	.LBB410:
 408:src/display.c ****   else	set_dig(base, ch);
 5447              		.loc 1 408 3 view .LVU1711
 408:src/display.c ****   else	set_dig(base, ch);
 5448              		.loc 1 408 6 is_stmt 0 view .LVU1712
 5449 02d0 002C     		cmp	r4, #0
 5450 02d2 00F04281 		beq	.L564
 408:src/display.c ****   else	set_dig(base, ch);
 5451              		.loc 1 408 12 is_stmt 1 view .LVU1713
 5452              	.LVL588:
 408:src/display.c ****   else	set_dig(base, ch);
 5453              		.loc 1 408 19 is_stmt 0 view .LVU1714
 5454 02d6 04F8012B 		strb	r2, [r4], #1
 5455              	.LVL589:
 5456              	.L565:
 410:src/display.c **** }
 5457              		.loc 1 410 3 is_stmt 1 view .LVU1715
 410:src/display.c **** }
 5458              		.loc 1 410 3 is_stmt 0 view .LVU1716
 5459              	.LBE410:
 5460              	.LBE409:
2297:src/display.c **** 	  }
 5461              		.loc 1 2297 6 is_stmt 1 view .LVU1717
2290:src/display.c **** 	  if (c == '.') {
 5462              		.loc 1 2290 18 is_stmt 0 view .LVU1718
 5463 02da 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
 5464              	.LVL590:
2297:src/display.c **** 	  }
 5465              		.loc 1 2297 8 view .LVU1719
 5466 02de 0AF1090A 		add	r10, r10, #9
 5467              	.LVL591:
2290:src/display.c **** 	  if (c == '.') {
 5468              		.loc 1 2290 53 is_stmt 1 view .LVU1720
2290:src/display.c **** 	  if (c == '.') {
 5469              		.loc 1 2290 12 view .LVU1721
2290:src/display.c **** 	  if (c == '.') {
 5470              		.loc 1 2290 2 is_stmt 0 view .LVU1722
 5471 02e2 12B1     		cbz	r2, .L556
2290:src/display.c **** 	  if (c == '.') {
 5472              		.loc 1 2290 31 discriminator 3 view .LVU1723
 5473 02e4 BAF16B0F 		cmp	r10, #107
 5474 02e8 ECDD     		ble	.L566
 5475              	.LVL592:
 5476              	.L556:
2310:src/display.c **** 	  set_exp(exp, 0, res);
ARM GAS  /tmp/cc1e4Gjl.s 			page 185


 5477              		.loc 1 2310 2 is_stmt 1 view .LVU1724
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5478              		.loc 1 2310 5 is_stmt 0 view .LVU1725
 5479 02ea BBF1000F 		cmp	fp, #0
 5480 02ee 40F00D81 		bne	.L682
 5481              	.L567:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5482              		.loc 1 2313 2 is_stmt 1 view .LVU1726
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5483              		.loc 1 2313 5 is_stmt 0 view .LVU1727
 5484 02f2 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5485 02f6 2E2B     		cmp	r3, #46
 5486 02f8 00F01281 		beq	.L683
 5487              	.LVL593:
 5488              	.L568:
2315:src/display.c ****       }
 5489              		.loc 1 2315 2 is_stmt 1 view .LVU1728
2315:src/display.c ****       }
 5490              		.loc 1 2315 18 is_stmt 0 view .LVU1729
 5491 02fc 019B     		ldr	r3, [sp, #4]
 5492 02fe 1E60     		str	r6, [r3]
 5493              	.LVL594:
 5494              	.L447:
2316:src/display.c **** 
 5495              		.loc 1 2316 7 view .LVU1730
 5496 0300 27B0     		add	sp, sp, #156
 5497              		.cfi_remember_state
 5498              		.cfi_def_cfa_offset 36
 5499              		@ sp needed
 5500 0302 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5501              	.LVL595:
 5502              	.L455:
 5503              		.cfi_restore_state
2015:src/display.c **** 
 5504              		.loc 1 2015 4 is_stmt 1 view .LVU1731
 5505 0306 3946     		mov	r1, r7
 5506 0308 2846     		mov	r0, r5
 5507 030a FFF7FEFF 		bl	decNumberToString
 5508              	.LVL596:
 5509 030e ABE6     		b	.L457
 5510              	.LVL597:
 5511              	.L448:
1973:src/display.c **** 	    if (State2.hms) {
 5512              		.loc 1 1973 4 view .LVU1732
1973:src/display.c **** 	    if (State2.hms) {
 5513              		.loc 1 1973 25 is_stmt 0 view .LVU1733
 5514 0310 C64B     		ldr	r3, .L691
 5515 0312 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5516              		.loc 1 1973 22 view .LVU1734
 5517 0314 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5518              		.loc 1 1973 25 view .LVU1735
 5519 0316 01F00201 		and	r1, r1, #2
1973:src/display.c **** 	    if (State2.hms) {
 5520              		.loc 1 1973 22 view .LVU1736
 5521 031a 1143     		orrs	r1, r1, r2
ARM GAS  /tmp/cc1e4Gjl.s 			page 186


 5522 031c 7FF47FAE 		bne	.L451
1974:src/display.c **** 	      set_x_hms(z, res);
 5523              		.loc 1 1974 6 is_stmt 1 view .LVU1737
1974:src/display.c **** 	      set_x_hms(z, res);
 5524              		.loc 1 1974 10 is_stmt 0 view .LVU1738
 5525 0320 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1974:src/display.c **** 	      set_x_hms(z, res);
 5526              		.loc 1 1974 9 view .LVU1739
 5527 0322 DF07     		lsls	r7, r3, #31
 5528 0324 00F1C682 		bmi	.L684
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5529              		.loc 1 1978 11 is_stmt 1 view .LVU1740
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5530              		.loc 1 1978 15 is_stmt 0 view .LVU1741
 5531 0328 C14B     		ldr	r3, .L691+4
 5532 032a 1B68     		ldr	r3, [r3]
 5533 032c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5534              		.loc 1 1978 14 view .LVU1742
 5535 0330 9806     		lsls	r0, r3, #26
 5536 0332 7FF574AE 		bpl	.L451
1979:src/display.c **** 		return;
 5537              		.loc 1 1979 8 is_stmt 1 view .LVU1743
1979:src/display.c **** 		return;
 5538              		.loc 1 1979 12 is_stmt 0 view .LVU1744
 5539 0336 2146     		mov	r1, r4
 5540 0338 2846     		mov	r0, r5
 5541 033a FFF7FEFF 		bl	set_x_fract
 5542              	.LVL598:
1979:src/display.c **** 		return;
 5543              		.loc 1 1979 11 view .LVU1745
 5544 033e 0028     		cmp	r0, #0
 5545 0340 3FF46DAE 		beq	.L451
 5546 0344 DCE7     		b	.L447
 5547              	.LVL599:
 5548              	.L673:
2023:src/display.c **** 	  //  ALL mode: fill the display
 5549              		.loc 1 2023 38 discriminator 1 view .LVU1746
 5550 0346 1A68     		ldr	r2, [r3]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5551              		.loc 1 2023 35 discriminator 1 view .LVU1747
 5552 0348 089B     		ldr	r3, [sp, #32]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5553              		.loc 1 2023 23 discriminator 1 view .LVU1748
 5554 034a 9A42     		cmp	r2, r3
 5555 034c 0ADD     		ble	.L470
2027:src/display.c **** 
 5556              		.loc 1 2027 4 is_stmt 1 view .LVU1749
2029:src/display.c **** 	  int orig_mode = mode;
 5557              		.loc 1 2029 23 is_stmt 0 view .LVU1750
 5558 034e 042E     		cmp	r6, #4
2027:src/display.c **** 
 5559              		.loc 1 2027 7 view .LVU1751
 5560 0350 0793     		str	r3, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5561              		.loc 1 2029 2 is_stmt 1 view .LVU1752
2029:src/display.c **** 	  int orig_mode = mode;
ARM GAS  /tmp/cc1e4Gjl.s 			page 187


 5562              		.loc 1 2029 23 is_stmt 0 view .LVU1753
 5563 0352 0BD0     		beq	.L471
 5564              	.L685:
2029:src/display.c **** 	  int orig_mode = mode;
 5565              		.loc 1 2029 43 discriminator 2 view .LVU1754
 5566 0354 052E     		cmp	r6, #5
 5567 0356 00F08F81 		beq	.L472
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5568              		.loc 1 1959 6 view .LVU1755
 5569 035a 0023     		movs	r3, #0
 5570 035c 0393     		str	r3, [sp, #12]
 5571 035e 9DE6     		b	.L573
 5572              	.LVL600:
 5573              	.L580:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 5574              		.loc 1 2061 21 view .LVU1756
 5575 0360 0546     		mov	r5, r0
 5576 0362 B0E6     		b	.L473
 5577              	.LVL601:
 5578              	.L470:
2025:src/display.c **** 	else
 5579              		.loc 1 2025 4 is_stmt 1 view .LVU1757
2025:src/display.c **** 	else
 5580              		.loc 1 2025 25 is_stmt 0 view .LVU1758
 5581 0364 013A     		subs	r2, r2, #1
2029:src/display.c **** 	  int orig_mode = mode;
 5582              		.loc 1 2029 23 view .LVU1759
 5583 0366 042E     		cmp	r6, #4
2025:src/display.c **** 	else
 5584              		.loc 1 2025 7 view .LVU1760
 5585 0368 0792     		str	r2, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5586              		.loc 1 2029 2 is_stmt 1 view .LVU1761
2029:src/display.c **** 	  int orig_mode = mode;
 5587              		.loc 1 2029 23 is_stmt 0 view .LVU1762
 5588 036a F3D1     		bne	.L685
 5589              	.L471:
 5590              	.LBB412:
2030:src/display.c **** 
 5591              		.loc 1 2030 4 is_stmt 1 view .LVU1763
 5592              	.LVL602:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5593              		.loc 1 2032 4 view .LVU1764
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5594              		.loc 1 2032 11 is_stmt 0 view .LVU1765
 5595 036c 3246     		mov	r2, r6
 5596 036e 2846     		mov	r0, r5
 5597 0370 07A9     		add	r1, sp, #28
 5598 0372 FFF7FEFF 		bl	std_round_fix
 5599              	.LVL603:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5600              		.loc 1 2035 16 view .LVU1766
 5601 0376 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5602              		.loc 1 2032 11 view .LVU1767
 5603 0378 0646     		mov	r6, r0
 5604              	.LVL604:
ARM GAS  /tmp/cc1e4Gjl.s 			page 188


2033:src/display.c **** 	    // allow zeros to be trimmed
 5605              		.loc 1 2033 4 is_stmt 1 view .LVU1768
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5606              		.loc 1 2035 6 view .LVU1769
2036:src/display.c **** 	    dd = *display_digits - 1;
 5607              		.loc 1 2036 4 view .LVU1770
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5608              		.loc 1 2035 16 is_stmt 0 view .LVU1771
 5609 037a 0393     		str	r3, [sp, #12]
 5610 037c 8EE6     		b	.L573
 5611              	.LVL605:
 5612              	.L679:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5613              		.loc 1 2035 16 view .LVU1772
 5614              	.LBE412:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5615              		.loc 1 2115 7 view .LVU1773
 5616 037e 4846     		mov	r0, r9
 5617              	.LVL606:
2116:src/display.c **** 	    mantissa[0] = '1';
 5618              		.loc 1 2116 41 view .LVU1774
 5619 0380 4FF03008 		mov	r8, #48
 5620              	.L501:
 5621              	.LVL607:
2116:src/display.c **** 	    mantissa[0] = '1';
 5622              		.loc 1 2116 47 is_stmt 1 discriminator 3 view .LVU1775
2116:src/display.c **** 	    mantissa[0] = '1';
 5623              		.loc 1 2116 36 discriminator 3 view .LVU1776
2116:src/display.c **** 	    mantissa[0] = '1';
 5624              		.loc 1 2116 41 is_stmt 0 discriminator 3 view .LVU1777
 5625 0384 00F8018B 		strb	r8, [r0], #1
 5626              	.LVL608:
2116:src/display.c **** 	    mantissa[0] = '1';
 5627              		.loc 1 2116 25 is_stmt 1 discriminator 3 view .LVU1778
2116:src/display.c **** 	    mantissa[0] = '1';
 5628              		.loc 1 2116 6 is_stmt 0 discriminator 3 view .LVU1779
 5629 0388 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5630 038c BCF1390F 		cmp	ip, #57
 5631 0390 F8D0     		beq	.L501
 5632              	.LVL609:
 5633              	.L572:
2117:src/display.c **** 	    exp++;
 5634              		.loc 1 2117 6 is_stmt 1 view .LVU1780
2117:src/display.c **** 	    exp++;
 5635              		.loc 1 2117 18 is_stmt 0 view .LVU1781
 5636 0392 3120     		movs	r0, #49
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5637              		.loc 1 2119 9 view .LVU1782
 5638 0394 012E     		cmp	r6, #1
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5639              		.loc 1 2118 9 view .LVU1783
 5640 0396 05F10105 		add	r5, r5, #1
 5641              	.LVL610:
2117:src/display.c **** 	    exp++;
 5642              		.loc 1 2117 18 view .LVU1784
 5643 039a 8DF85800 		strb	r0, [sp, #88]
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 189


 5644              		.loc 1 2118 6 is_stmt 1 view .LVU1785
 5645              	.LVL611:
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5646              		.loc 1 2119 6 view .LVU1786
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5647              		.loc 1 2119 9 is_stmt 0 view .LVU1787
 5648 039e 7FF40BAF 		bne	.L668
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5649              		.loc 1 2119 27 discriminator 1 view .LVU1788
 5650 03a2 5545     		cmp	r5, r10
 5651 03a4 C0F2DE80 		blt	.L503
2120:src/display.c **** 	      extra_digits = 0;
 5652              		.loc 1 2120 8 is_stmt 1 view .LVU1789
2120:src/display.c **** 	      extra_digits = 0;
 5653              		.loc 1 2120 28 is_stmt 0 view .LVU1790
 5654 03a8 A14B     		ldr	r3, .L691+4
 5655              	.LVL612:
2120:src/display.c **** 	      extra_digits = 0;
 5656              		.loc 1 2120 28 view .LVU1791
 5657 03aa 1B68     		ldr	r3, [r3]
 5658 03ac 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2120:src/display.c **** 	      extra_digits = 0;
 5659              		.loc 1 2120 37 view .LVU1792
 5660 03b0 D906     		lsls	r1, r3, #27
 5661              	.LVL613:
2120:src/display.c **** 	      extra_digits = 0;
 5662              		.loc 1 2120 37 view .LVU1793
 5663 03b2 40F1C982 		bpl	.L686
 5664              	.LVL614:
2131:src/display.c **** 
 5665              		.loc 1 2131 2 is_stmt 1 view .LVU1794
 5666 03b6 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 5667              		.loc 1 2131 9 is_stmt 0 view .LVU1795
 5668 03ba 09EB0E03 		add	r3, r9, lr
 5669              	.LVL615:
2131:src/display.c **** 
 5670              		.loc 1 2131 45 is_stmt 1 view .LVU1796
2120:src/display.c **** 	      extra_digits = 0;
 5671              		.loc 1 2120 37 is_stmt 0 view .LVU1797
 5672 03be 0326     		movs	r6, #3
2131:src/display.c **** 
 5673              		.loc 1 2131 2 view .LVU1798
 5674 03c0 0029     		cmp	r1, #0
 5675 03c2 7FF4FCAE 		bne	.L570
 5676              	.LVL616:
 5677              	.L509:
2233:src/display.c **** 	  case -1:
 5678              		.loc 1 2233 4 is_stmt 1 view .LVU1799
2233:src/display.c **** 	  case -1:
 5679              		.loc 1 2233 16 is_stmt 0 view .LVU1800
 5680 03c6 9B4B     		ldr	r3, .L691+8
 5681 03c8 83FB0513 		smull	r1, r3, r3, r5
 5682 03cc A3EBE573 		sub	r3, r3, r5, asr #31
 5683 03d0 03EB4303 		add	r3, r3, r3, lsl #1
 5684 03d4 EB1A     		subs	r3, r5, r3
 5685 03d6 0233     		adds	r3, r3, #2
ARM GAS  /tmp/cc1e4Gjl.s 			page 190


 5686 03d8 042B     		cmp	r3, #4
 5687 03da 4FD8     		bhi	.L544
 5688 03dc DFE813F0 		tbh	[pc, r3, lsl #1]
 5689              	.L546:
 5690 03e0 FF01     		.2byte	(.L547-.L546)/2
 5691 03e2 ED01     		.2byte	(.L545-.L546)/2
 5692 03e4 4E00     		.2byte	(.L544-.L546)/2
 5693 03e6 FF01     		.2byte	(.L547-.L546)/2
 5694 03e8 ED01     		.2byte	(.L545-.L546)/2
 5695              	.LVL617:
 5696              		.p2align 1
 5697              	.L515:
2142:src/display.c **** 	    case -1:
 5698              		.loc 1 2142 6 is_stmt 1 view .LVU1801
2142:src/display.c **** 	    case -1:
 5699              		.loc 1 2142 32 is_stmt 0 view .LVU1802
 5700 03ea 9148     		ldr	r0, .L691+4
2142:src/display.c **** 	    case -1:
 5701              		.loc 1 2142 19 view .LVU1803
 5702 03ec 9149     		ldr	r1, .L691+8
2142:src/display.c **** 	    case -1:
 5703              		.loc 1 2142 32 view .LVU1804
 5704 03ee 0068     		ldr	r0, [r0]
2142:src/display.c **** 	    case -1:
 5705              		.loc 1 2142 19 view .LVU1805
 5706 03f0 81FB0561 		smull	r6, r1, r1, r5
2142:src/display.c **** 	    case -1:
 5707              		.loc 1 2142 32 view .LVU1806
 5708 03f4 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2142:src/display.c **** 	    case -1:
 5709              		.loc 1 2142 19 view .LVU1807
 5710 03f8 A1EBE571 		sub	r1, r1, r5, asr #31
 5711 03fc 01EB4101 		add	r1, r1, r1, lsl #1
 5712 0400 691A     		subs	r1, r5, r1
2142:src/display.c **** 	    case -1:
 5713              		.loc 1 2142 32 view .LVU1808
 5714 0402 C0F30010 		ubfx	r0, r0, #4, #1
2142:src/display.c **** 	    case -1:
 5715              		.loc 1 2142 24 view .LVU1809
 5716 0406 01FB00F1 		mul	r1, r1, r0
 5717 040a 0231     		adds	r1, r1, #2
 5718 040c 0429     		cmp	r1, #4
 5719 040e 00F25782 		bhi	.L587
 5720 0412 DFE811F0 		tbh	[pc, r1, lsl #1]
 5721              	.L519:
 5722 0416 1C02     		.2byte	(.L520-.L519)/2
 5723 0418 F101     		.2byte	(.L518-.L519)/2
 5724 041a 5502     		.2byte	(.L587-.L519)/2
 5725 041c 1C02     		.2byte	(.L520-.L519)/2
 5726 041e F101     		.2byte	(.L518-.L519)/2
 5727              	.LVL618:
 5728              		.p2align 1
 5729              	.L489:
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5730              		.loc 1 2098 4 is_stmt 1 view .LVU1810
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5731              		.loc 1 2098 7 is_stmt 0 view .LVU1811
ARM GAS  /tmp/cc1e4Gjl.s 			page 191


 5732 0420 AA45     		cmp	r10, r5
 5733 0422 03DD     		ble	.L492
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5734              		.loc 1 2098 45 discriminator 1 view .LVU1812
 5735 0424 5342     		rsbs	r3, r2, #0
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5736              		.loc 1 2098 36 discriminator 1 view .LVU1813
 5737 0426 AB42     		cmp	r3, r5
 5738 0428 40F3DD81 		ble	.L493
 5739              	.L492:
2099:src/display.c **** 	  else {
 5740              		.loc 1 2099 6 is_stmt 1 view .LVU1814
2099:src/display.c **** 	  else {
 5741              		.loc 1 2099 26 is_stmt 0 view .LVU1815
 5742 042c 804B     		ldr	r3, .L691+4
 5743 042e 1B68     		ldr	r3, [r3]
 5744 0430 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2099:src/display.c **** 	  else {
 5745              		.loc 1 2099 35 view .LVU1816
 5746 0434 13F0100F 		tst	r3, #16
 5747 0438 14BF     		ite	ne
 5748 043a 0326     		movne	r6, #3
 5749              	.LVL619:
2099:src/display.c **** 	  else {
 5750              		.loc 1 2099 35 view .LVU1817
 5751 043c 0226     		moveq	r6, #2
 5752 043e 8CE6     		b	.L669
 5753              	.LVL620:
 5754              	.L677:
2099:src/display.c **** 	  else {
 5755              		.loc 1 2099 35 view .LVU1818
 5756 0440 013D     		subs	r5, r5, #1
 5757 0442 08EB0502 		add	r2, r8, r5
 5758              	.L482:
2078:src/display.c **** 	    exp--;
 5759              		.loc 1 2078 4 is_stmt 1 discriminator 1 view .LVU1819
2079:src/display.c **** 	  while (*++q == '0');
 5760              		.loc 1 2079 6 discriminator 1 view .LVU1820
 5761 0446 A2EB0805 		sub	r5, r2, r8
 5762              	.LVL621:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5763              		.loc 1 2080 10 discriminator 1 view .LVU1821
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5764              		.loc 1 2080 11 is_stmt 0 discriminator 1 view .LVU1822
 5765 044a 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5766              	.LVL622:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5767              		.loc 1 2080 4 discriminator 1 view .LVU1823
 5768 044e 302B     		cmp	r3, #48
 5769 0450 F9D0     		beq	.L482
2081:src/display.c **** 	    *p++ = *q++;
 5770              		.loc 1 2081 10 is_stmt 1 view .LVU1824
 5771 0452 A3F13002 		sub	r2, r3, #48
 5772 0456 092A     		cmp	r2, #9
 5773 0458 3FF678AE 		bhi	.L483
1944:src/display.c **** 	char *r;
 5774              		.loc 1 1944 8 is_stmt 0 view .LVU1825
ARM GAS  /tmp/cc1e4Gjl.s 			page 192


 5775 045c 4A46     		mov	r2, r9
 5776              	.LVL623:
 5777              	.L484:
2082:src/display.c **** 	} else {
 5778              		.loc 1 2082 6 is_stmt 1 view .LVU1826
2082:src/display.c **** 	} else {
 5779              		.loc 1 2082 11 is_stmt 0 view .LVU1827
 5780 045e 02F8013B 		strb	r3, [r2], #1
 5781              	.LVL624:
2081:src/display.c **** 	    *p++ = *q++;
 5782              		.loc 1 2081 10 is_stmt 1 view .LVU1828
2081:src/display.c **** 	    *p++ = *q++;
 5783              		.loc 1 2081 11 is_stmt 0 view .LVU1829
 5784 0462 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2081:src/display.c **** 	    *p++ = *q++;
 5785              		.loc 1 2081 10 view .LVU1830
 5786 0466 A3F13001 		sub	r1, r3, #48
 5787 046a 0929     		cmp	r1, #9
 5788 046c F7D9     		bls	.L484
 5789 046e 6DE6     		b	.L483
 5790              	.LVL625:
 5791              	.L675:
2072:src/display.c **** 	  q++;
 5792              		.loc 1 2072 4 is_stmt 1 view .LVU1831
2073:src/display.c **** 	} else if (*q == '+')
 5793              		.loc 1 2073 4 view .LVU1832
2072:src/display.c **** 	  q++;
 5794              		.loc 1 2072 13 is_stmt 0 view .LVU1833
 5795 0470 0122     		movs	r2, #1
 5796 0472 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5797 0476 0292     		str	r2, [sp, #8]
2073:src/display.c **** 	} else if (*q == '+')
 5798              		.loc 1 2073 5 view .LVU1834
 5799 0478 9044     		add	r8, r8, r2
 5800              	.LVL626:
2073:src/display.c **** 	} else if (*q == '+')
 5801              		.loc 1 2073 5 view .LVU1835
 5802 047a 3AE6     		b	.L478
 5803              	.LVL627:
 5804              	.L544:
2073:src/display.c **** 	} else if (*q == '+')
 5805              		.loc 1 2073 5 view .LVU1836
 5806 047c 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 5807              		.loc 1 2233 16 view .LVU1837
 5808 047e 0126     		movs	r6, #1
1938:src/display.c **** 	int odig = 0;
 5809              		.loc 1 1938 15 view .LVU1838
 5810 0480 3946     		mov	r1, r7
 5811              	.LVL628:
 5812              	.L512:
2247:src/display.c **** 	  };
 5813              		.loc 1 2247 6 is_stmt 1 view .LVU1839
2248:src/display.c **** 	  // Falling through
 5814              		.loc 1 2248 5 view .LVU1840
2252:src/display.c **** 	  odig++;
 5815              		.loc 1 2252 4 view .LVU1841
ARM GAS  /tmp/cc1e4Gjl.s 			page 193


2252:src/display.c **** 	  odig++;
 5816              		.loc 1 2252 15 is_stmt 0 view .LVU1842
 5817 0482 4B46     		mov	r3, r9
 5818              	.LVL629:
2252:src/display.c **** 	  odig++;
 5819              		.loc 1 2252 11 view .LVU1843
 5820 0484 8846     		mov	r8, r1
 5821 0486 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5822              	.LVL630:
2252:src/display.c **** 	  odig++;
 5823              		.loc 1 2252 11 view .LVU1844
 5824 048a 08F8020B 		strb	r0, [r8], #2
2253:src/display.c **** 	  *obp++ = '.';
 5825              		.loc 1 2253 4 is_stmt 1 view .LVU1845
2254:src/display.c **** 	  dd--;
 5826              		.loc 1 2254 4 view .LVU1846
 5827              	.LVL631:
2254:src/display.c **** 	  dd--;
 5828              		.loc 1 2254 11 is_stmt 0 view .LVU1847
 5829 048e 4FF02E0C 		mov	ip, #46
2256:src/display.c **** 	    *obp++ = *p++;
 5830              		.loc 1 2256 13 view .LVU1848
 5831 0492 901E     		subs	r0, r2, #2
2256:src/display.c **** 	    *obp++ = *p++;
 5832              		.loc 1 2256 10 view .LVU1849
 5833 0494 002A     		cmp	r2, #0
2254:src/display.c **** 	  dd--;
 5834              		.loc 1 2254 11 view .LVU1850
 5835 0496 81F801C0 		strb	ip, [r1, #1]
2255:src/display.c **** 	  while (dd-- >= 0) {
 5836              		.loc 1 2255 4 is_stmt 1 view .LVU1851
2256:src/display.c **** 	    *obp++ = *p++;
 5837              		.loc 1 2256 4 view .LVU1852
2256:src/display.c **** 	    *obp++ = *p++;
 5838              		.loc 1 2256 10 view .LVU1853
2256:src/display.c **** 	    *obp++ = *p++;
 5839              		.loc 1 2256 13 is_stmt 0 view .LVU1854
 5840 049a 0790     		str	r0, [sp, #28]
2256:src/display.c **** 	    *obp++ = *p++;
 5841              		.loc 1 2256 10 view .LVU1855
 5842 049c 40F31382 		ble	.L588
2256:src/display.c **** 	    *obp++ = *p++;
 5843              		.loc 1 2256 10 view .LVU1856
 5844 04a0 501C     		adds	r0, r2, #1
 5845 04a2 0131     		adds	r1, r1, #1
 5846 04a4 8144     		add	r9, r9, r0
 5847              	.LVL632:
 5848              	.L550:
2257:src/display.c **** 	    odig++;
 5849              		.loc 1 2257 6 is_stmt 1 view .LVU1857
2257:src/display.c **** 	    odig++;
 5850              		.loc 1 2257 13 is_stmt 0 view .LVU1858
 5851 04a6 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5852              	.LVL633:
2257:src/display.c **** 	    odig++;
 5853              		.loc 1 2257 13 view .LVU1859
 5854 04aa 01F8010F 		strb	r0, [r1, #1]!
ARM GAS  /tmp/cc1e4Gjl.s 			page 194


2258:src/display.c **** 	  }
 5855              		.loc 1 2258 6 is_stmt 1 view .LVU1860
2256:src/display.c **** 	    *obp++ = *p++;
 5856              		.loc 1 2256 10 view .LVU1861
 5857 04ae 4B45     		cmp	r3, r9
 5858 04b0 F9D1     		bne	.L550
 5859 04b2 6FF00103 		mvn	r3, #1
 5860              	.LVL634:
2256:src/display.c **** 	    *obp++ = *p++;
 5861              		.loc 1 2256 10 is_stmt 0 view .LVU1862
 5862 04b6 9044     		add	r8, r8, r2
 5863 04b8 1644     		add	r6, r6, r2
 5864 04ba 0793     		str	r3, [sp, #28]
2260:src/display.c **** 	}
 5865              		.loc 1 2260 13 view .LVU1863
 5866 04bc 4FF0010B 		mov	fp, #1
 5867              	.L522:
 5868              	.LVL635:
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5869              		.loc 1 2263 2 is_stmt 1 view .LVU1864
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5870              		.loc 1 2263 5 is_stmt 0 view .LVU1865
 5871 04c0 039B     		ldr	r3, [sp, #12]
 5872 04c2 002B     		cmp	r3, #0
 5873 04c4 3FF4E4AE 		beq	.L551
2264:src/display.c **** 	    obp--;
 5874              		.loc 1 2264 10 is_stmt 1 view .LVU1866
 5875 04c8 B845     		cmp	r8, r7
 5876 04ca 7FF6E1AE 		bls	.L551
 5877 04ce 4346     		mov	r3, r8
 5878 04d0 04E0     		b	.L552
 5879              	.LVL636:
 5880              	.L553:
2264:src/display.c **** 	    obp--;
 5881              		.loc 1 2264 10 is_stmt 0 view .LVU1867
 5882 04d2 9F42     		cmp	r7, r3
2266:src/display.c **** 	  }
 5883              		.loc 1 2266 10 view .LVU1868
 5884 04d4 06F1FF36 		add	r6, r6, #-1
 5885              	.LVL637:
2264:src/display.c **** 	    obp--;
 5886              		.loc 1 2264 10 is_stmt 1 view .LVU1869
 5887 04d8 3FF4D9AE 		beq	.L590
 5888              	.LVL638:
 5889              	.L552:
2265:src/display.c **** 	    odig--;
 5890              		.loc 1 2265 6 discriminator 1 view .LVU1870
 5891 04dc 9846     		mov	r8, r3
 5892              	.LVL639:
2265:src/display.c **** 	    odig--;
 5893              		.loc 1 2265 6 is_stmt 0 discriminator 1 view .LVU1871
 5894 04de 013B     		subs	r3, r3, #1
 5895              	.LVL640:
2266:src/display.c **** 	  }
 5896              		.loc 1 2266 6 is_stmt 1 discriminator 1 view .LVU1872
2264:src/display.c **** 	    obp--;
 5897              		.loc 1 2264 19 is_stmt 0 discriminator 1 view .LVU1873
ARM GAS  /tmp/cc1e4Gjl.s 			page 195


 5898 04e0 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5899 04e4 302A     		cmp	r2, #48
 5900 04e6 F4D0     		beq	.L553
2264:src/display.c **** 	    obp--;
 5901              		.loc 1 2264 19 discriminator 1 view .LVU1874
 5902 04e8 D2E6     		b	.L551
 5903              	.LVL641:
 5904              	.L680:
2292:src/display.c **** 	  } else if (c == ',') {
 5905              		.loc 1 2292 6 is_stmt 1 view .LVU1875
2292:src/display.c **** 	  } else if (c == ',') {
 5906              		.loc 1 2292 12 is_stmt 0 view .LVU1876
 5907 04ea 2246     		mov	r2, r4
 5908              	.LVL642:
2292:src/display.c **** 	  } else if (c == ',') {
 5909              		.loc 1 2292 12 view .LVU1877
 5910 04ec 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5911 04f0 AAF10900 		sub	r0, r10, #9
 5912 04f4 FFF7FEFF 		bl	set_decimal
 5913              	.LVL643:
 5914 04f8 0446     		mov	r4, r0
 5915              	.LVL644:
 5916              	.L560:
2290:src/display.c **** 	  if (c == '.') {
 5917              		.loc 1 2290 53 is_stmt 1 view .LVU1878
2290:src/display.c **** 	  if (c == '.') {
 5918              		.loc 1 2290 12 view .LVU1879
2290:src/display.c **** 	  if (c == '.') {
 5919              		.loc 1 2290 18 is_stmt 0 view .LVU1880
 5920 04fa 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
 5921              	.LVL645:
2290:src/display.c **** 	  if (c == '.') {
 5922              		.loc 1 2290 2 view .LVU1881
 5923 04fe 002A     		cmp	r2, #0
 5924 0500 7FF4E0AE 		bne	.L566
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5925              		.loc 1 2310 2 is_stmt 1 view .LVU1882
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5926              		.loc 1 2310 5 is_stmt 0 view .LVU1883
 5927 0504 BBF1000F 		cmp	fp, #0
 5928 0508 3FF4F3AE 		beq	.L567
 5929              	.LVL646:
 5930              	.L682:
2311:src/display.c **** #endif
 5931              		.loc 1 2311 4 is_stmt 1 view .LVU1884
 5932 050c 2846     		mov	r0, r5
 5933 050e 2246     		mov	r2, r4
 5934              	.LVL647:
2311:src/display.c **** #endif
 5935              		.loc 1 2311 4 is_stmt 0 view .LVU1885
 5936 0510 0021     		movs	r1, #0
 5937 0512 FFF7FEFF 		bl	set_exp
 5938              	.LVL648:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5939              		.loc 1 2313 2 is_stmt 1 view .LVU1886
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5940              		.loc 1 2313 5 is_stmt 0 view .LVU1887
ARM GAS  /tmp/cc1e4Gjl.s 			page 196


 5941 0516 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5942 051a 2E2B     		cmp	r3, #46
 5943 051c 7FF4EEAE 		bne	.L568
 5944              	.L683:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5945              		.loc 1 2313 21 discriminator 1 view .LVU1888
 5946 0520 002C     		cmp	r4, #0
 5947 0522 7FF4EBAE 		bne	.L568
2314:src/display.c **** 	*display_digits = odig;
 5948              		.loc 1 2314 4 is_stmt 1 view .LVU1889
2314:src/display.c **** 	*display_digits = odig;
 5949              		.loc 1 2314 33 is_stmt 0 view .LVU1890
 5950 0526 019B     		ldr	r3, [sp, #4]
 5951 0528 1868     		ldr	r0, [r3]
2314:src/display.c **** 	*display_digits = odig;
 5952              		.loc 1 2314 4 view .LVU1891
 5953 052a 434B     		ldr	r3, .L691+12
2314:src/display.c **** 	*display_digits = odig;
 5954              		.loc 1 2314 33 view .LVU1892
 5955 052c 0138     		subs	r0, r0, #1
2314:src/display.c **** 	*display_digits = odig;
 5956              		.loc 1 2314 4 view .LVU1893
 5957 052e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5958 0530 2246     		mov	r2, r4
 5959 0532 00EBC000 		add	r0, r0, r0, lsl #3
 5960 0536 FFF7FEFF 		bl	set_decimal
 5961              	.LVL649:
 5962 053a DFE6     		b	.L568
 5963              	.LVL650:
 5964              	.L681:
2294:src/display.c **** 	  } else {
 5965              		.loc 1 2294 6 is_stmt 1 view .LVU1894
2294:src/display.c **** 	  } else {
 5966              		.loc 1 2294 12 is_stmt 0 view .LVU1895
 5967 053c 3F4B     		ldr	r3, .L691+16
 5968 053e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5969              	.LVL651:
 5970              	.LBB413:
 5971              	.LBI413:
 367:src/display.c ****   if (sep == SEP_NONE)
 5972              		.loc 1 367 14 is_stmt 1 view .LVU1896
 5973              	.LBB414:
 368:src/display.c ****     return res;
 5974              		.loc 1 368 3 view .LVU1897
 368:src/display.c ****     return res;
 5975              		.loc 1 368 6 is_stmt 0 view .LVU1898
 5976 0540 0029     		cmp	r1, #0
 5977 0542 DAD0     		beq	.L560
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5978              		.loc 1 370 3 is_stmt 1 view .LVU1899
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5979              		.loc 1 370 6 is_stmt 0 view .LVU1900
 5980 0544 002C     		cmp	r4, #0
 5981 0546 00F0C181 		beq	.L562
 371:src/display.c ****     else *res++ = '.';
 5982              		.loc 1 371 5 is_stmt 1 view .LVU1901
 371:src/display.c ****     else *res++ = '.';
ARM GAS  /tmp/cc1e4Gjl.s 			page 197


 5983              		.loc 1 371 8 is_stmt 0 view .LVU1902
 5984 054a 0129     		cmp	r1, #1
 371:src/display.c ****     else *res++ = '.';
 5985              		.loc 1 371 27 is_stmt 1 view .LVU1903
 5986              	.LVL652:
 372:src/display.c ****   } else {
 5987              		.loc 1 372 17 is_stmt 0 view .LVU1904
 5988 054c 16BF     		itet	ne
 5989 054e 2E23     		movne	r3, #46
 371:src/display.c ****     else *res++ = '.';
 5990              		.loc 1 371 34 view .LVU1905
 5991 0550 04F8012B 		strbeq	r2, [r4], #1
 5992              	.LVL653:
 372:src/display.c ****   } else {
 5993              		.loc 1 372 10 is_stmt 1 view .LVU1906
 372:src/display.c ****   } else {
 5994              		.loc 1 372 17 is_stmt 0 view .LVU1907
 5995 0554 04F8013B 		strbne	r3, [r4], #1
 5996              	.LVL654:
 372:src/display.c ****   } else {
 5997              		.loc 1 372 17 view .LVU1908
 5998 0558 CFE7     		b	.L560
 5999              	.LVL655:
 6000              	.L564:
 372:src/display.c ****   } else {
 6001              		.loc 1 372 17 view .LVU1909
 6002              	.LBE414:
 6003              	.LBE413:
 6004              	.LBB416:
 6005              	.LBB411:
 409:src/display.c ****   return res;
 6006              		.loc 1 409 8 is_stmt 1 view .LVU1910
 6007 055a 1146     		mov	r1, r2
 6008 055c 5046     		mov	r0, r10
 6009 055e FFF7FEFF 		bl	set_dig
 6010              	.LVL656:
 409:src/display.c ****   return res;
 6011              		.loc 1 409 8 is_stmt 0 view .LVU1911
 6012 0562 BAE6     		b	.L565
 6013              	.LVL657:
 6014              	.L503:
 409:src/display.c ****   return res;
 6015              		.loc 1 409 8 view .LVU1912
 6016              	.LBE411:
 6017              	.LBE416:
2131:src/display.c **** 
 6018              		.loc 1 2131 2 is_stmt 1 view .LVU1913
2131:src/display.c **** 
 6019              		.loc 1 2131 45 view .LVU1914
2131:src/display.c **** 
 6020              		.loc 1 2131 2 is_stmt 0 view .LVU1915
 6021 0564 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6022 0568 0029     		cmp	r1, #0
 6023 056a 7FF428AE 		bne	.L570
 6024              	.LVL658:
 6025              	.L510:
2196:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
ARM GAS  /tmp/cc1e4Gjl.s 			page 198


 6026              		.loc 1 2196 4 is_stmt 1 view .LVU1916
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6027              		.loc 1 2197 4 view .LVU1917
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6028              		.loc 1 2197 7 is_stmt 0 view .LVU1918
 6029 056e 002D     		cmp	r5, #0
 6030 0570 C0F2F480 		blt	.L533
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6031              		.loc 1 2197 7 view .LVU1919
 6032 0574 6B1C     		adds	r3, r5, #1
2199:src/display.c **** 		*obp++ = ',';
 6033              		.loc 1 2199 31 view .LVU1920
 6034 0576 DFF8BCE0 		ldr	lr, .L691+8
 6035 057a 0493     		str	r3, [sp, #16]
 6036 057c 09EB030C 		add	ip, r9, r3
2133:src/display.c **** 	switch (mode) {
 6037              		.loc 1 2133 4 view .LVU1921
 6038 0580 4E46     		mov	r6, r9
1938:src/display.c **** 	int odig = 0;
 6039              		.loc 1 1938 15 view .LVU1922
 6040 0582 3846     		mov	r0, r7
 6041 0584 05E0     		b	.L534
 6042              	.LVL659:
 6043              	.L537:
2200:src/display.c **** 	      *obp++ = *p++;
 6044              		.loc 1 2200 3 is_stmt 1 view .LVU1923
2199:src/display.c **** 		*obp++ = ',';
 6045              		.loc 1 2199 18 is_stmt 0 view .LVU1924
 6046 0586 0229     		cmp	r1, #2
2200:src/display.c **** 	      *obp++ = *p++;
 6047              		.loc 1 2200 10 view .LVU1925
 6048 0588 05BF     		ittet	eq
 6049 058a 2C23     		moveq	r3, #44
 6050 058c 4370     		strbeq	r3, [r0, #1]
2201:src/display.c **** 	      odig++;
 6051              		.loc 1 2201 12 view .LVU1926
 6052 058e 0130     		addne	r0, r0, #1
 6053              	.LVL660:
2200:src/display.c **** 	      *obp++ = *p++;
 6054              		.loc 1 2200 7 view .LVU1927
 6055 0590 0230     		addeq	r0, r0, #2
 6056              	.LVL661:
 6057              	.L534:
2201:src/display.c **** 	      odig++;
 6058              		.loc 1 2201 8 is_stmt 1 discriminator 2 view .LVU1928
2201:src/display.c **** 	      odig++;
 6059              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1929
 6060 0592 16F8013B 		ldrb	r3, [r6], #1	@ zero_extendqisi2
 6061              	.LVL662:
2199:src/display.c **** 		*obp++ = ',';
 6062              		.loc 1 2199 8 is_stmt 1 discriminator 2 view .LVU1930
2201:src/display.c **** 	      odig++;
 6063              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1931
 6064 0596 0370     		strb	r3, [r0]
2202:src/display.c **** 	    }
 6065              		.loc 1 2202 8 is_stmt 1 discriminator 2 view .LVU1932
 6066              	.LVL663:
ARM GAS  /tmp/cc1e4Gjl.s 			page 199


2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6067              		.loc 1 2198 24 discriminator 2 view .LVU1933
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6068              		.loc 1 2198 16 discriminator 2 view .LVU1934
2199:src/display.c **** 		*obp++ = ',';
 6069              		.loc 1 2199 31 is_stmt 0 discriminator 2 view .LVU1935
 6070 0598 A9EB0603 		sub	r3, r9, r6
 6071 059c 2B44     		add	r3, r3, r5
 6072 059e 8EFB0381 		smull	r8, r1, lr, r3
 6073 05a2 A1EBE371 		sub	r1, r1, r3, asr #31
 6074 05a6 01EB4101 		add	r1, r1, r1, lsl #1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6075              		.loc 1 2198 6 discriminator 2 view .LVU1936
 6076 05aa B445     		cmp	ip, r6
2199:src/display.c **** 		*obp++ = ',';
 6077              		.loc 1 2199 31 discriminator 2 view .LVU1937
 6078 05ac A3EB0101 		sub	r1, r3, r1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6079              		.loc 1 2198 6 discriminator 2 view .LVU1938
 6080 05b0 E9D1     		bne	.L537
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6081              		.loc 1 2204 13 view .LVU1939
 6082 05b2 2E23     		movs	r3, #46
2205:src/display.c **** 	      *obp++ = *p++;
 6083              		.loc 1 2205 6 view .LVU1940
 6084 05b4 002A     		cmp	r2, #0
 6085 05b6 049E     		ldr	r6, [sp, #16]
 6086              	.LVL664:
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6087              		.loc 1 2204 6 is_stmt 1 view .LVU1941
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6088              		.loc 1 2204 13 is_stmt 0 view .LVU1942
 6089 05b8 4370     		strb	r3, [r0, #1]
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6090              		.loc 1 2204 10 view .LVU1943
 6091 05ba 00F10208 		add	r8, r0, #2
 6092              	.LVL665:
2205:src/display.c **** 	      *obp++ = *p++;
 6093              		.loc 1 2205 6 is_stmt 1 view .LVU1944
2205:src/display.c **** 	      *obp++ = *p++;
 6094              		.loc 1 2205 16 view .LVU1945
2205:src/display.c **** 	      *obp++ = *p++;
 6095              		.loc 1 2205 6 is_stmt 0 view .LVU1946
 6096 05be 7FF77FAF 		ble	.L522
 6097 05c2 0130     		adds	r0, r0, #1
 6098 05c4 0CEB0201 		add	r1, ip, r2
 6099              	.LVL666:
 6100              	.L538:
2206:src/display.c **** 	      odig++;
 6101              		.loc 1 2206 8 is_stmt 1 discriminator 4 view .LVU1947
2206:src/display.c **** 	      odig++;
 6102              		.loc 1 2206 15 is_stmt 0 discriminator 4 view .LVU1948
 6103 05c8 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6104              	.LVL667:
2206:src/display.c **** 	      odig++;
 6105              		.loc 1 2206 15 discriminator 4 view .LVU1949
 6106 05cc 00F8013F 		strb	r3, [r0, #1]!
ARM GAS  /tmp/cc1e4Gjl.s 			page 200


2207:src/display.c **** 	    }
 6107              		.loc 1 2207 8 is_stmt 1 discriminator 4 view .LVU1950
2205:src/display.c **** 	      *obp++ = *p++;
 6108              		.loc 1 2205 43 discriminator 4 view .LVU1951
2205:src/display.c **** 	      *obp++ = *p++;
 6109              		.loc 1 2205 16 discriminator 4 view .LVU1952
2205:src/display.c **** 	      *obp++ = *p++;
 6110              		.loc 1 2205 6 is_stmt 0 discriminator 4 view .LVU1953
 6111 05d0 6145     		cmp	r1, ip
 6112 05d2 F9D1     		bne	.L538
 6113 05d4 049B     		ldr	r3, [sp, #16]
 6114 05d6 1344     		add	r3, r3, r2
 6115 05d8 9044     		add	r8, r8, r2
 6116              	.LVL668:
2205:src/display.c **** 	      *obp++ = *p++;
 6117              		.loc 1 2205 6 discriminator 4 view .LVU1954
 6118 05da 1E46     		mov	r6, r3
 6119 05dc 70E7     		b	.L522
 6120              	.LVL669:
 6121              	.L670:
2001:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6122              		.loc 1 2001 4 is_stmt 1 view .LVU1955
 6123 05de 184A     		ldr	r2, .L691+20
 6124 05e0 2946     		mov	r1, r5
 6125 05e2 2846     		mov	r0, r5
 6126 05e4 FFF7FEFF 		bl	decNumberNormalize
 6127              	.LVL670:
2002:src/display.c **** 	  z->exponent = 0;
 6128              		.loc 1 2002 4 view .LVU1956
2002:src/display.c **** 	  z->exponent = 0;
 6129              		.loc 1 2002 22 is_stmt 0 view .LVU1957
 6130 05e8 D5E90023 		ldrd	r2, r3, [r5]
 6131 05ec 03EB0209 		add	r9, r3, r2
2003:src/display.c **** 	}
 6132              		.loc 1 2003 16 view .LVU1958
 6133 05f0 C5F804B0 		str	fp, [r5, #4]
2002:src/display.c **** 	  z->exponent = 0;
 6134              		.loc 1 2002 8 view .LVU1959
 6135 05f4 09F1FF39 		add	r9, r9, #-1
 6136              	.LVL671:
2003:src/display.c **** 	}
 6137              		.loc 1 2003 4 is_stmt 1 view .LVU1960
 6138 05f8 22E5     		b	.L454
 6139              	.LVL672:
 6140              	.L678:
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6141              		.loc 1 2091 6 view .LVU1961
2092:src/display.c **** 	      *p++ = *q++;
 6142              		.loc 1 2092 13 is_stmt 0 view .LVU1962
 6143 05fa 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6144              		.loc 1 2092 12 view .LVU1963
 6145 05fe A3F13002 		sub	r2, r3, #48
 6146 0602 092A     		cmp	r2, #9
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6147              		.loc 1 2091 7 view .LVU1964
 6148 0604 08F10108 		add	r8, r8, #1
ARM GAS  /tmp/cc1e4Gjl.s 			page 201


 6149              	.LVL673:
2092:src/display.c **** 	      *p++ = *q++;
 6150              		.loc 1 2092 6 is_stmt 1 view .LVU1965
2092:src/display.c **** 	      *p++ = *q++;
 6151              		.loc 1 2092 12 view .LVU1966
 6152 0608 3FF6A0AD 		bhi	.L483
 6153              	.LVL674:
 6154              	.L488:
2093:src/display.c **** 	  }
 6155              		.loc 1 2093 8 view .LVU1967
2093:src/display.c **** 	  }
 6156              		.loc 1 2093 13 is_stmt 0 view .LVU1968
 6157 060c 01F8013B 		strb	r3, [r1], #1
 6158              	.LVL675:
2092:src/display.c **** 	      *p++ = *q++;
 6159              		.loc 1 2092 12 is_stmt 1 view .LVU1969
2092:src/display.c **** 	      *p++ = *q++;
 6160              		.loc 1 2092 13 is_stmt 0 view .LVU1970
 6161 0610 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6162              		.loc 1 2092 12 view .LVU1971
 6163 0614 A3F13002 		sub	r2, r3, #48
 6164 0618 092A     		cmp	r2, #9
 6165 061a F7D9     		bls	.L488
 6166 061c 96E5     		b	.L483
 6167              	.LVL676:
 6168              	.L676:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6169              		.loc 1 2075 4 is_stmt 1 view .LVU1972
1958:src/display.c **** 	int trimzeros = 0;
 6170              		.loc 1 1958 6 is_stmt 0 view .LVU1973
 6171 061e 0022     		movs	r2, #0
 6172 0620 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6173 0624 0292     		str	r2, [sp, #8]
2075:src/display.c **** 	for (; *q == '0'; q++);
 6174              		.loc 1 2075 5 view .LVU1974
 6175 0626 08F10108 		add	r8, r8, #1
 6176              	.LVL677:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6177              		.loc 1 2075 5 view .LVU1975
 6178 062a 62E5     		b	.L478
 6179              	.L692:
 6180              		.align	2
 6181              	.L691:
 6182 062c 00000000 		.word	StateWhileOn
 6183 0630 00000000 		.word	main_ram
 6184 0634 56555555 		.word	1431655766
 6185 0638 00000000 		.word	.LANCHOR1
 6186 063c 00000000 		.word	.LANCHOR0
 6187 0640 00000000 		.word	Ctx
 6188              	.LVL678:
 6189              	.L671:
2009:src/display.c **** 	    x[0] = '-';
 6190              		.loc 1 2009 34 discriminator 1 view .LVU1976
 6191 0644 6B20     		movs	r0, #107
 6192 0646 FFF7FEFF 		bl	get_user_flag
 6193              	.LVL679:
ARM GAS  /tmp/cc1e4Gjl.s 			page 202


2009:src/display.c **** 	    x[0] = '-';
 6194              		.loc 1 2009 31 discriminator 1 view .LVU1977
 6195 064a 0028     		cmp	r0, #0
 6196 064c 3FF409AD 		beq	.L456
2010:src/display.c **** 	    x[1] = '0';
 6197              		.loc 1 2010 6 is_stmt 1 view .LVU1978
2011:src/display.c **** 	  } else
 6198              		.loc 1 2011 6 view .LVU1979
2010:src/display.c **** 	    x[1] = '0';
 6199              		.loc 1 2010 11 is_stmt 0 view .LVU1980
 6200 0650 43F22D03 		movw	r3, #12333
 6201 0654 ADF82430 		strh	r3, [sp, #36]	@ movhi
2011:src/display.c **** 	  } else
 6202              		.loc 1 2011 11 view .LVU1981
 6203 0658 06E5     		b	.L457
 6204              	.LVL680:
 6205              	.L674:
2068:src/display.c **** 	  CLR_MANT_SIGN;
 6206              		.loc 1 2068 4 is_stmt 1 view .LVU1982
 6207              	.LBB417:
 6208              	.LBI417:
 314:src/display.c **** {
 6209              		.loc 1 314 13 view .LVU1983
 6210              	.LBB418:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6211              		.loc 1 316 3 view .LVU1984
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6212              		.loc 1 316 27 is_stmt 0 view .LVU1985
 6213 065a C44B     		ldr	r3, .L693
 6214 065c 4FF0200A 		mov	r10, #32
 317:src/display.c **** }
 6215              		.loc 1 317 3 view .LVU1986
 6216 0660 8220     		movs	r0, #130
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6217              		.loc 1 316 27 view .LVU1987
 6218 0662 83F800A0 		strb	r10, [r3]
 317:src/display.c **** }
 6219              		.loc 1 317 3 is_stmt 1 view .LVU1988
 6220 0666 FFF7FEFF 		bl	clr_dot
 6221              	.LVL681:
 6222              	.LBE418:
 6223              	.LBE417:
2069:src/display.c **** 	}
 6224              		.loc 1 2069 4 view .LVU1989
 6225              	.LBB419:
 6226              	.LBI419:
 302:src/display.c **** {
 6227              		.loc 1 302 13 view .LVU1990
 6228              	.LBB420:
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6229              		.loc 1 304 3 view .LVU1991
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6230              		.loc 1 304 25 is_stmt 0 view .LVU1992
 6231 066a C14B     		ldr	r3, .L693+4
 305:src/display.c **** }
 6232              		.loc 1 305 3 view .LVU1993
 6233 066c 8120     		movs	r0, #129
ARM GAS  /tmp/cc1e4Gjl.s 			page 203


 304:src/display.c ****   clr_dot(MANT_SIGN);
 6234              		.loc 1 304 25 view .LVU1994
 6235 066e 83F800A0 		strb	r10, [r3]
 305:src/display.c **** }
 6236              		.loc 1 305 3 is_stmt 1 view .LVU1995
 6237 0672 FFF7FEFF 		bl	clr_dot
 6238              	.LVL682:
 306:src/display.c **** 
 6239              		.loc 1 306 1 is_stmt 0 view .LVU1996
 6240 0676 32E5     		b	.L476
 6241              	.LVL683:
 6242              	.L472:
 306:src/display.c **** 
 6243              		.loc 1 306 1 view .LVU1997
 6244              	.LBE420:
 6245              	.LBE419:
 6246              	.LBB421:
2030:src/display.c **** 
 6247              		.loc 1 2030 4 is_stmt 1 view .LVU1998
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6248              		.loc 1 2032 4 view .LVU1999
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6249              		.loc 1 2032 11 is_stmt 0 view .LVU2000
 6250 0678 3246     		mov	r2, r6
 6251 067a 2846     		mov	r0, r5
 6252 067c 07A9     		add	r1, sp, #28
 6253 067e FFF7FEFF 		bl	std_round_fix
 6254              	.LVL684:
 6255              	.LBE421:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6256              		.loc 1 1959 6 view .LVU2001
 6257 0682 0023     		movs	r3, #0
 6258              	.LBB422:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6259              		.loc 1 2032 11 view .LVU2002
 6260 0684 0646     		mov	r6, r0
 6261              	.LVL685:
2033:src/display.c **** 	    // allow zeros to be trimmed
 6262              		.loc 1 2033 4 is_stmt 1 view .LVU2003
 6263              	.LBE422:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6264              		.loc 1 1959 6 is_stmt 0 view .LVU2004
 6265 0686 0393     		str	r3, [sp, #12]
 6266 0688 08E5     		b	.L573
 6267              	.LVL686:
 6268              	.L555:
2284:src/display.c **** 	      SET_MANT_SIGN;
 6269              		.loc 1 2284 6 is_stmt 1 view .LVU2005
2284:src/display.c **** 	      SET_MANT_SIGN;
 6270              		.loc 1 2284 9 is_stmt 0 view .LVU2006
 6271 068a BAF1000F 		cmp	r10, #0
 6272 068e 40F0E280 		bne	.L558
2285:src/display.c **** 	    else
 6273              		.loc 1 2285 8 is_stmt 1 view .LVU2007
 6274              	.LBB423:
 6275              	.LBI423:
 296:src/display.c **** {
ARM GAS  /tmp/cc1e4Gjl.s 			page 204


 6276              		.loc 1 296 13 view .LVU2008
 6277              	.LBB424:
 298:src/display.c ****   set_dot(MANT_SIGN);
 6278              		.loc 1 298 3 view .LVU2009
 298:src/display.c ****   set_dot(MANT_SIGN);
 6279              		.loc 1 298 25 is_stmt 0 view .LVU2010
 6280 0692 B74A     		ldr	r2, .L693+4
 6281 0694 2D21     		movs	r1, #45
 299:src/display.c **** }
 6282              		.loc 1 299 3 view .LVU2011
 6283 0696 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 6284              		.loc 1 298 25 view .LVU2012
 6285 0698 1170     		strb	r1, [r2]
 299:src/display.c **** }
 6286              		.loc 1 299 3 is_stmt 1 view .LVU2013
 6287 069a FFF7FEFF 		bl	set_dot
 6288              	.LVL687:
 299:src/display.c **** }
 6289              		.loc 1 299 3 is_stmt 0 view .LVU2014
 6290              	.LBE424:
 6291              	.LBE423:
2290:src/display.c **** 	  if (c == '.') {
 6292              		.loc 1 2290 12 is_stmt 1 view .LVU2015
2290:src/display.c **** 	  if (c == '.') {
 6293              		.loc 1 2290 18 is_stmt 0 view .LVU2016
 6294 069e 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6295              	.LVL688:
2290:src/display.c **** 	  if (c == '.') {
 6296              		.loc 1 2290 2 view .LVU2017
 6297 06a2 002A     		cmp	r2, #0
 6298 06a4 7FF40CAE 		bne	.L557
 6299 06a8 1FE6     		b	.L556
 6300              	.LVL689:
 6301              	.L672:
2018:src/display.c **** 	  return;
 6302              		.loc 1 2018 4 is_stmt 1 view .LVU2018
 6303              	.LBB425:
 6304              	.LBI425:
1806:src/display.c **** 	const int dbl = is_dblmode();
 6305              		.loc 1 1806 19 view .LVU2019
 6306              	.LBB426:
1807:src/display.c **** 	char *p;
 6307              		.loc 1 1807 2 view .LVU2020
1807:src/display.c **** 	char *p;
 6308              		.loc 1 1807 18 is_stmt 0 view .LVU2021
 6309 06aa FFF7FEFF 		bl	is_dblmode
 6310              	.LVL690:
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6311              		.loc 1 1823 5 view .LVU2022
 6312 06ae 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6313 06b2 2D2B     		cmp	r3, #45
1807:src/display.c **** 	char *p;
 6314              		.loc 1 1807 18 view .LVU2023
 6315 06b4 0446     		mov	r4, r0
 6316              	.LVL691:
1808:src/display.c **** 	int i, j;
ARM GAS  /tmp/cc1e4Gjl.s 			page 205


 6317              		.loc 1 1808 2 is_stmt 1 view .LVU2024
1809:src/display.c **** 	char *upper_str;
 6318              		.loc 1 1809 2 view .LVU2025
1810:src/display.c **** 	enum separator_modes separator_mode;
 6319              		.loc 1 1810 2 view .LVU2026
1811:src/display.c **** 	char decimal_mark;
 6320              		.loc 1 1811 2 view .LVU2027
1812:src/display.c **** 	char thousands_sep;
 6321              		.loc 1 1812 2 view .LVU2028
1813:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6322              		.loc 1 1813 2 view .LVU2029
1819:src/display.c **** #endif
 6323              		.loc 1 1819 2 view .LVU2030
1821:src/display.c **** 
 6324              		.loc 1 1821 2 view .LVU2031
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6325              		.loc 1 1823 2 view .LVU2032
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6326              		.loc 1 1823 5 is_stmt 0 view .LVU2033
 6327 06b6 00F01481 		beq	.L687
1836:src/display.c **** 
 6328              		.loc 1 1836 16 view .LVU2034
 6329 06ba 0026     		movs	r6, #0
 6330              	.LVL692:
 6331              	.L459:
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6332              		.loc 1 1838 2 is_stmt 1 view .LVU2035
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6333              		.loc 1 1838 6 is_stmt 0 view .LVU2036
 6334 06bc 0021     		movs	r1, #0
 6335 06be 3846     		mov	r0, r7
 6336 06c0 FFF7FEFF 		bl	find_char
 6337              	.LVL693:
1839:src/display.c **** 
 6338              		.loc 1 1839 2 is_stmt 1 view .LVU2037
1839:src/display.c **** 
 6339              		.loc 1 1839 23 is_stmt 0 view .LVU2038
 6340 06c4 C21B     		subs	r2, r0, r7
1839:src/display.c **** 
 6341              		.loc 1 1839 2 view .LVU2039
 6342 06c6 C2F12202 		rsb	r2, r2, #34
 6343 06ca 3021     		movs	r1, #48
 6344 06cc FFF7FEFF 		bl	xset
 6345              	.LVL694:
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6346              		.loc 1 1841 2 is_stmt 1 view .LVU2040
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6347              		.loc 1 1841 18 is_stmt 0 view .LVU2041
 6348 06d0 A84A     		ldr	r2, .L693+8
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6349              		.loc 1 1852 6 view .LVU2042
 6350 06d2 98F81430 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6351              		.loc 1 1841 5 view .LVU2043
 6352 06d6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1849:src/display.c **** 	}
 6353              		.loc 1 1849 18 view .LVU2044
ARM GAS  /tmp/cc1e4Gjl.s 			page 206


 6354 06d8 002A     		cmp	r2, #0
 6355 06da 15BF     		itete	ne
 6356 06dc 4FF0020A 		movne	r10, #2
 6357 06e0 4FF02C08 		moveq	r8, #44
 6358 06e4 4FF02E08 		movne	r8, #46
 6359              	.LVL695:
1849:src/display.c **** 	}
 6360              		.loc 1 1849 18 view .LVU2045
 6361 06e8 2E25     		moveq	r5, #46
 6362              	.LVL696:
1849:src/display.c **** 	}
 6363              		.loc 1 1849 18 view .LVU2046
 6364 06ea 18BF     		it	ne
 6365 06ec 2C25     		movne	r5, #44
 6366              	.LVL697:
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6367              		.loc 1 1852 2 is_stmt 1 view .LVU2047
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6368              		.loc 1 1852 5 is_stmt 0 view .LVU2048
 6369 06ee 13F0380F 		tst	r3, #56
 6370 06f2 40F0B680 		bne	.L688
1879:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6371              		.loc 1 1879 4 is_stmt 1 view .LVU2049
 6372              	.LVL698:
1880:src/display.c **** 	  x[1] = decimal_mark;
 6373              		.loc 1 1880 4 view .LVU2050
 6374 06f6 1022     		movs	r2, #16
 6375 06f8 791C     		adds	r1, r7, #1
 6376 06fa B81C     		adds	r0, r7, #2
 6377 06fc FFF7FEFF 		bl	xcopy
 6378              	.LVL699:
1881:src/display.c **** 	  if (grouping) {
 6379              		.loc 1 1881 4 view .LVU2051
1883:src/display.c **** 	    x[5] = thousands_sep;
 6380              		.loc 1 1883 6 is_stmt 0 view .LVU2052
 6381 0700 0D22     		movs	r2, #13
 6382 0702 791D     		adds	r1, r7, #5
 6383 0704 B81D     		adds	r0, r7, #6
1881:src/display.c **** 	  if (grouping) {
 6384              		.loc 1 1881 9 view .LVU2053
 6385 0706 7D70     		strb	r5, [r7, #1]
1882:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6386              		.loc 1 1882 4 is_stmt 1 view .LVU2054
1883:src/display.c **** 	    x[5] = thousands_sep;
 6387              		.loc 1 1883 6 view .LVU2055
 6388 0708 FFF7FEFF 		bl	xcopy
 6389              	.LVL700:
1884:src/display.c **** 	    x += 9;
 6390              		.loc 1 1884 6 view .LVU2056
1885:src/display.c **** 	  }
 6391              		.loc 1 1885 8 is_stmt 0 view .LVU2057
 6392 070c 07F10905 		add	r5, r7, #9
 6393              	.LVL701:
1884:src/display.c **** 	    x += 9;
 6394              		.loc 1 1884 11 view .LVU2058
 6395 0710 87F80580 		strb	r8, [r7, #5]
1885:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 207


 6396              		.loc 1 1885 6 is_stmt 1 view .LVU2059
 6397              	.LVL702:
1888:src/display.c **** 	    if (exp < 0) {
 6398              		.loc 1 1888 4 view .LVU2060
1888:src/display.c **** 	    if (exp < 0) {
 6399              		.loc 1 1888 7 is_stmt 0 view .LVU2061
 6400 0714 002C     		cmp	r4, #0
 6401 0716 00F0E280 		beq	.L463
1889:src/display.c **** 	      x[9] = '-';
 6402              		.loc 1 1889 6 is_stmt 1 view .LVU2062
1889:src/display.c **** 	      x[9] = '-';
 6403              		.loc 1 1889 9 is_stmt 0 view .LVU2063
 6404 071a B9F1000F 		cmp	r9, #0
1890:src/display.c **** 	      exp = -exp;
 6405              		.loc 1 1890 8 is_stmt 1 view .LVU2064
1891:src/display.c **** 	    }
 6406              		.loc 1 1891 8 view .LVU2065
1895:src/display.c **** 	    x[10] = '0' + j;
 6407              		.loc 1 1895 8 is_stmt 0 view .LVU2066
 6408 071e 964B     		ldr	r3, .L693+12
1897:src/display.c **** 	  }
 6409              		.loc 1 1897 18 view .LVU2067
 6410 0720 9649     		ldr	r1, .L693+16
1890:src/display.c **** 	      exp = -exp;
 6411              		.loc 1 1890 13 view .LVU2068
 6412 0722 B6BF     		itet	lt
 6413 0724 2D22     		movlt	r2, #45
1894:src/display.c **** 	    j = exp / 1000;
 6414              		.loc 1 1894 13 view .LVU2069
 6415 0726 2022     		movge	r2, #32
1891:src/display.c **** 	    }
 6416              		.loc 1 1891 12 view .LVU2070
 6417 0728 C9F10009 		rsblt	r9, r9, #0
 6418              	.LVL703:
1891:src/display.c **** 	    }
 6419              		.loc 1 1891 12 view .LVU2071
 6420 072c BA74     		strb	r2, [r7, #18]
1895:src/display.c **** 	    x[10] = '0' + j;
 6421              		.loc 1 1895 6 is_stmt 1 view .LVU2072
1895:src/display.c **** 	    x[10] = '0' + j;
 6422              		.loc 1 1895 8 is_stmt 0 view .LVU2073
 6423 072e A3FB0923 		umull	r2, r3, r3, r9
 6424 0732 9B09     		lsrs	r3, r3, #6
 6425              	.LVL704:
1896:src/display.c **** 	    exp -= 1000 * j;
 6426              		.loc 1 1896 6 is_stmt 1 view .LVU2074
1896:src/display.c **** 	    exp -= 1000 * j;
 6427              		.loc 1 1896 18 is_stmt 0 view .LVU2075
 6428 0734 03F13002 		add	r2, r3, #48
1897:src/display.c **** 	  }
 6429              		.loc 1 1897 10 view .LVU2076
 6430 0738 01FB0399 		mla	r9, r1, r3, r9
 6431              	.LVL705:
1896:src/display.c **** 	    exp -= 1000 * j;
 6432              		.loc 1 1896 12 view .LVU2077
 6433 073c FA74     		strb	r2, [r7, #19]
1897:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 208


 6434              		.loc 1 1897 6 is_stmt 1 view .LVU2078
 6435              	.LVL706:
 6436              	.L465:
1903:src/display.c **** 	  *x = 0;
 6437              		.loc 1 1903 4 view .LVU2079
 6438 073e 0B22     		movs	r2, #11
 6439 0740 2946     		mov	r1, r5
 6440 0742 07F10A00 		add	r0, r7, #10
 6441 0746 FFF7FEFF 		bl	xcopy
 6442              	.LVL707:
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6443              		.loc 1 1904 4 view .LVU2080
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6444              		.loc 1 1904 7 is_stmt 0 view .LVU2081
 6445 074a 0022     		movs	r2, #0
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6446              		.loc 1 1905 4 view .LVU2082
 6447 074c 4846     		mov	r0, r9
 6448 074e 0121     		movs	r1, #1
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6449              		.loc 1 1904 7 view .LVU2083
 6450 0750 7A72     		strb	r2, [r7, #9]
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6451              		.loc 1 1905 4 is_stmt 1 view .LVU2084
 6452 0752 BE1B     		subs	r6, r7, r6
 6453              	.LVL708:
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6454              		.loc 1 1905 4 is_stmt 0 view .LVU2085
 6455 0754 FFF7FEFF 		bl	set_exp
 6456              	.LVL709:
1906:src/display.c **** 	}
 6457              		.loc 1 1906 4 is_stmt 1 view .LVU2086
1906:src/display.c **** 	}
 6458              		.loc 1 1906 6 is_stmt 0 view .LVU2087
 6459 0758 0924     		movs	r4, #9
 6460              	.LVL710:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6461              		.loc 1 1909 11 is_stmt 1 view .LVU2088
 6462 075a 93E0     		b	.L466
 6463              	.LVL711:
 6464              	.L533:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6465              		.loc 1 1909 11 is_stmt 0 view .LVU2089
 6466              	.LBE426:
 6467              	.LBE425:
2210:src/display.c **** 	    odig++;
 6468              		.loc 1 2210 6 is_stmt 1 view .LVU2090
2211:src/display.c **** 	    *obp++ = '.';
 6469              		.loc 1 2211 6 view .LVU2091
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6470              		.loc 1 2212 6 view .LVU2092
2210:src/display.c **** 	    odig++;
 6471              		.loc 1 2210 13 is_stmt 0 view .LVU2093
 6472 075c 42F63063 		movw	r3, #11824
 6473 0760 ADF82430 		strh	r3, [sp, #36]	@ movhi
2213:src/display.c **** 	      *obp++ = '0';
 6474              		.loc 1 2213 6 is_stmt 1 view .LVU2094
ARM GAS  /tmp/cc1e4Gjl.s 			page 209


 6475              	.LVL712:
2213:src/display.c **** 	      *obp++ = '0';
 6476              		.loc 1 2213 20 view .LVU2095
2213:src/display.c **** 	      *obp++ = '0';
 6477              		.loc 1 2213 6 is_stmt 0 view .LVU2096
 6478 0764 6B1C     		adds	r3, r5, #1
 6479              	.LVL713:
2213:src/display.c **** 	      *obp++ = '0';
 6480              		.loc 1 2213 6 view .LVU2097
 6481 0766 00F0F680 		beq	.L689
 6482 076a C5F10102 		rsb	r2, r5, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6483              		.loc 1 2212 10 view .LVU2098
 6484 076e 0DF12601 		add	r1, sp, #38
 6485              	.LVL714:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6486              		.loc 1 2212 10 view .LVU2099
 6487 0772 0798     		ldr	r0, [sp, #28]
 6488 0774 3A44     		add	r2, r2, r7
 6489 0776 0B46     		mov	r3, r1
 6490              	.LVL715:
2214:src/display.c **** 	      odig++;
 6491              		.loc 1 2214 15 view .LVU2100
 6492 0778 3026     		movs	r6, #48
 6493              	.LVL716:
 6494              	.L541:
2214:src/display.c **** 	      odig++;
 6495              		.loc 1 2214 8 is_stmt 1 discriminator 3 view .LVU2101
2214:src/display.c **** 	      odig++;
 6496              		.loc 1 2214 15 is_stmt 0 discriminator 3 view .LVU2102
 6497 077a 03F8016B 		strb	r6, [r3], #1
 6498              	.LVL717:
2215:src/display.c **** 	      dd--;
 6499              		.loc 1 2215 8 is_stmt 1 discriminator 3 view .LVU2103
2216:src/display.c **** 	    }
 6500              		.loc 1 2216 8 discriminator 3 view .LVU2104
2213:src/display.c **** 	      *obp++ = '0';
 6501              		.loc 1 2213 25 discriminator 3 view .LVU2105
2213:src/display.c **** 	      *obp++ = '0';
 6502              		.loc 1 2213 20 discriminator 3 view .LVU2106
2213:src/display.c **** 	      *obp++ = '0';
 6503              		.loc 1 2213 6 is_stmt 0 discriminator 3 view .LVU2107
 6504 077e 9342     		cmp	r3, r2
 6505 0780 FBD1     		bne	.L541
 6506 0782 4319     		adds	r3, r0, r5
 6507              	.LVL718:
2213:src/display.c **** 	      *obp++ = '0';
 6508              		.loc 1 2213 6 discriminator 3 view .LVU2108
 6509 0784 6FEA0508 		mvn	r8, r5
 6510 0788 0133     		adds	r3, r3, #1
 6511 078a 8844     		add	r8, r8, r1
 6512 078c 6E42     		rsbs	r6, r5, #0
 6513              	.L540:
 6514              	.LVL719:
2218:src/display.c **** 	      *obp++ = *p++;
 6515              		.loc 1 2218 12 is_stmt 1 view .LVU2109
2218:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 210


 6516              		.loc 1 2218 15 is_stmt 0 view .LVU2110
 6517 078e 5A1E     		subs	r2, r3, #1
2218:src/display.c **** 	      *obp++ = *p++;
 6518              		.loc 1 2218 12 view .LVU2111
 6519 0790 002B     		cmp	r3, #0
2218:src/display.c **** 	      *obp++ = *p++;
 6520              		.loc 1 2218 15 view .LVU2112
 6521 0792 0792     		str	r2, [sp, #28]
2218:src/display.c **** 	      *obp++ = *p++;
 6522              		.loc 1 2218 12 view .LVU2113
 6523 0794 7FF794AE 		ble	.L522
 6524 0798 4344     		add	r3, r3, r8
 6525 079a 581E     		subs	r0, r3, #1
 6526 079c 08F1FF38 		add	r8, r8, #-1
 6527              	.LVL720:
 6528              	.L542:
2219:src/display.c **** 	      odig++;
 6529              		.loc 1 2219 8 is_stmt 1 view .LVU2114
2219:src/display.c **** 	      odig++;
 6530              		.loc 1 2219 15 is_stmt 0 view .LVU2115
 6531 07a0 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6532              	.LVL721:
2219:src/display.c **** 	      odig++;
 6533              		.loc 1 2219 15 view .LVU2116
 6534 07a4 08F8011F 		strb	r1, [r8, #1]!
2220:src/display.c **** 	    }
 6535              		.loc 1 2220 8 is_stmt 1 view .LVU2117
2218:src/display.c **** 	      *obp++ = *p++;
 6536              		.loc 1 2218 12 view .LVU2118
 6537 07a8 4045     		cmp	r0, r8
 6538 07aa F9D1     		bne	.L542
 6539              	.LVL722:
2218:src/display.c **** 	      *obp++ = *p++;
 6540              		.loc 1 2218 12 is_stmt 0 view .LVU2119
 6541 07ac 0136     		adds	r6, r6, #1
 6542 07ae 4FF0FF31 		mov	r1, #-1
 6543 07b2 1644     		add	r6, r6, r2
 6544 07b4 9846     		mov	r8, r3
 6545 07b6 0791     		str	r1, [sp, #28]
 6546 07b8 82E6     		b	.L522
 6547              	.LVL723:
 6548              	.L545:
2236:src/display.c **** 	    odig++;
 6549              		.loc 1 2236 6 is_stmt 1 view .LVU2120
2236:src/display.c **** 	    odig++;
 6550              		.loc 1 2236 13 is_stmt 0 view .LVU2121
 6551 07ba 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6552 07be 8DF82430 		strb	r3, [sp, #36]
2237:src/display.c **** 	    dd--;
 6553              		.loc 1 2237 6 is_stmt 1 view .LVU2122
 6554              	.LVL724:
2238:src/display.c **** 	    exp--;
 6555              		.loc 1 2238 6 view .LVU2123
2238:src/display.c **** 	    exp--;
 6556              		.loc 1 2238 8 is_stmt 0 view .LVU2124
 6557 07c2 013A     		subs	r2, r2, #1
2239:src/display.c **** 	  case -2:
ARM GAS  /tmp/cc1e4Gjl.s 			page 211


 6558              		.loc 1 2239 6 is_stmt 1 view .LVU2125
2239:src/display.c **** 	  case -2:
 6559              		.loc 1 2239 9 is_stmt 0 view .LVU2126
 6560 07c4 013D     		subs	r5, r5, #1
 6561              	.LVL725:
2239:src/display.c **** 	  case -2:
 6562              		.loc 1 2239 9 view .LVU2127
 6563 07c6 0326     		movs	r6, #3
2236:src/display.c **** 	    odig++;
 6564              		.loc 1 2236 17 view .LVU2128
 6565 07c8 0DF15909 		add	r9, sp, #89
 6566              	.LVL726:
2236:src/display.c **** 	    odig++;
 6567              		.loc 1 2236 10 view .LVU2129
 6568 07cc 0DF12501 		add	r1, sp, #37
 6569              	.LVL727:
 6570              	.L548:
2242:src/display.c **** 	    odig++;
 6571              		.loc 1 2242 6 is_stmt 1 view .LVU2130
2242:src/display.c **** 	    odig++;
 6572              		.loc 1 2242 13 is_stmt 0 view .LVU2131
 6573 07d0 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6574              	.LVL728:
2242:src/display.c **** 	    odig++;
 6575              		.loc 1 2242 13 view .LVU2132
 6576 07d4 01F8013B 		strb	r3, [r1], #1
 6577              	.LVL729:
2243:src/display.c **** 	    dd--;
 6578              		.loc 1 2243 6 is_stmt 1 view .LVU2133
2244:src/display.c **** 	    exp--;
 6579              		.loc 1 2244 6 view .LVU2134
2244:src/display.c **** 	    exp--;
 6580              		.loc 1 2244 8 is_stmt 0 view .LVU2135
 6581 07d8 013A     		subs	r2, r2, #1
2245:src/display.c **** 	  case 0:
 6582              		.loc 1 2245 6 is_stmt 1 view .LVU2136
2245:src/display.c **** 	  case 0:
 6583              		.loc 1 2245 9 is_stmt 0 view .LVU2137
 6584 07da 013D     		subs	r5, r5, #1
 6585              	.LVL730:
2245:src/display.c **** 	  case 0:
 6586              		.loc 1 2245 9 view .LVU2138
 6587 07dc 51E6     		b	.L512
 6588              	.LVL731:
 6589              	.L547:
2245:src/display.c **** 	  case 0:
 6590              		.loc 1 2245 9 view .LVU2139
 6591 07de 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 6592              		.loc 1 2233 16 view .LVU2140
 6593 07e0 0226     		movs	r6, #2
1938:src/display.c **** 	int odig = 0;
 6594              		.loc 1 1938 15 view .LVU2141
 6595 07e2 3946     		mov	r1, r7
 6596 07e4 F4E7     		b	.L548
 6597              	.LVL732:
 6598              	.L493:
ARM GAS  /tmp/cc1e4Gjl.s 			page 212


2101:src/display.c **** 	    /* We might have push the fixed decimals off the
 6599              		.loc 1 2101 6 is_stmt 1 view .LVU2142
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6600              		.loc 1 2105 6 view .LVU2143
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6601              		.loc 1 2105 23 is_stmt 0 view .LVU2144
 6602 07e6 5319     		adds	r3, r2, r5
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6603              		.loc 1 2105 9 view .LVU2145
 6604 07e8 9A45     		cmp	r10, r3
2106:src/display.c **** 	  }
 6605              		.loc 1 2106 8 is_stmt 1 view .LVU2146
2106:src/display.c **** 	  }
 6606              		.loc 1 2106 30 is_stmt 0 view .LVU2147
 6607 07ea DEBF     		ittt	le
 6608 07ec 0AF1FF32 		addle	r2, r10, #-1
2106:src/display.c **** 	  }
 6609              		.loc 1 2106 35 view .LVU2148
 6610 07f0 521B     		suble	r2, r2, r5
2106:src/display.c **** 	  }
 6611              		.loc 1 2106 11 view .LVU2149
 6612 07f2 0792     		strle	r2, [sp, #28]
 6613 07f4 2946     		mov	r1, r5
 6614 07f6 B1E4     		b	.L490
 6615              	.LVL733:
 6616              	.L518:
2145:src/display.c **** 	      odig++;
 6617              		.loc 1 2145 8 is_stmt 1 view .LVU2150
2145:src/display.c **** 	      odig++;
 6618              		.loc 1 2145 15 is_stmt 0 view .LVU2151
 6619 07f8 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6620 07fc 8DF82410 		strb	r1, [sp, #36]
2146:src/display.c **** 	      dd--;
 6621              		.loc 1 2146 8 is_stmt 1 view .LVU2152
 6622              	.LVL734:
2147:src/display.c **** 	      exp--;
 6623              		.loc 1 2147 8 view .LVU2153
2147:src/display.c **** 	      exp--;
 6624              		.loc 1 2147 10 is_stmt 0 view .LVU2154
 6625 0800 013A     		subs	r2, r2, #1
2148:src/display.c **** 	    case -2:
 6626              		.loc 1 2148 8 is_stmt 1 view .LVU2155
2148:src/display.c **** 	    case -2:
 6627              		.loc 1 2148 11 is_stmt 0 view .LVU2156
 6628 0802 013D     		subs	r5, r5, #1
 6629              	.LVL735:
2148:src/display.c **** 	    case -2:
 6630              		.loc 1 2148 11 view .LVU2157
 6631 0804 0326     		movs	r6, #3
2145:src/display.c **** 	      odig++;
 6632              		.loc 1 2145 19 view .LVU2158
 6633 0806 0DF15909 		add	r9, sp, #89
 6634              	.LVL736:
2145:src/display.c **** 	      odig++;
 6635              		.loc 1 2145 12 view .LVU2159
 6636 080a 0DF12501 		add	r1, sp, #37
 6637              	.LVL737:
ARM GAS  /tmp/cc1e4Gjl.s 			page 213


 6638              	.L521:
2151:src/display.c **** 	      odig++;
 6639              		.loc 1 2151 8 is_stmt 1 view .LVU2160
2151:src/display.c **** 	      odig++;
 6640              		.loc 1 2151 15 is_stmt 0 view .LVU2161
 6641 080e 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6642              	.LVL738:
2151:src/display.c **** 	      odig++;
 6643              		.loc 1 2151 15 view .LVU2162
 6644 0812 01F8010B 		strb	r0, [r1], #1
 6645              	.LVL739:
2152:src/display.c **** 	      dd--;
 6646              		.loc 1 2152 8 is_stmt 1 view .LVU2163
2153:src/display.c **** 	      exp--;
 6647              		.loc 1 2153 8 view .LVU2164
2154:src/display.c **** 	    case 0:
 6648              		.loc 1 2154 8 view .LVU2165
2153:src/display.c **** 	      exp--;
 6649              		.loc 1 2153 10 is_stmt 0 view .LVU2166
 6650 0816 013A     		subs	r2, r2, #1
 6651 0818 0792     		str	r2, [sp, #28]
2154:src/display.c **** 	    case 0:
 6652              		.loc 1 2154 11 view .LVU2167
 6653 081a 013D     		subs	r5, r5, #1
 6654              	.LVL740:
 6655              	.L517:
2156:src/display.c **** 	    };
 6656              		.loc 1 2156 8 is_stmt 1 view .LVU2168
2157:src/display.c **** 	    *obp++ = *p++;
 6657              		.loc 1 2157 7 view .LVU2169
2158:src/display.c **** 	    odig++;
 6658              		.loc 1 2158 6 view .LVU2170
2158:src/display.c **** 	    odig++;
 6659              		.loc 1 2158 17 is_stmt 0 view .LVU2171
 6660 081c 4A46     		mov	r2, r9
 6661              	.LVL741:
2158:src/display.c **** 	    odig++;
 6662              		.loc 1 2158 13 view .LVU2172
 6663 081e 8846     		mov	r8, r1
 6664 0820 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6665              	.LVL742:
2158:src/display.c **** 	    odig++;
 6666              		.loc 1 2158 13 view .LVU2173
 6667 0824 08F8020B 		strb	r0, [r8], #2
2159:src/display.c **** 	    *obp++ = '.';
 6668              		.loc 1 2159 6 is_stmt 1 view .LVU2174
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6669              		.loc 1 2160 6 view .LVU2175
 6670              	.LVL743:
2161:src/display.c **** 	      *obp++ = *p++;
 6671              		.loc 1 2161 6 is_stmt 0 view .LVU2176
 6672 0828 012B     		cmp	r3, #1
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6673              		.loc 1 2160 13 view .LVU2177
 6674 082a 4FF02E00 		mov	r0, #46
 6675 082e 4870     		strb	r0, [r1, #1]
2161:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/cc1e4Gjl.s 			page 214


 6676              		.loc 1 2161 6 is_stmt 1 view .LVU2178
 6677              	.LVL744:
2161:src/display.c **** 	      *obp++ = *p++;
 6678              		.loc 1 2161 16 view .LVU2179
2161:src/display.c **** 	      *obp++ = *p++;
 6679              		.loc 1 2161 6 is_stmt 0 view .LVU2180
 6680 0830 49DD     		ble	.L588
2161:src/display.c **** 	      *obp++ = *p++;
 6681              		.loc 1 2161 6 view .LVU2181
 6682 0832 0131     		adds	r1, r1, #1
 6683 0834 9944     		add	r9, r9, r3
 6684              	.LVL745:
 6685              	.L523:
2162:src/display.c **** 	      odig++;
 6686              		.loc 1 2162 8 is_stmt 1 discriminator 3 view .LVU2182
2162:src/display.c **** 	      odig++;
 6687              		.loc 1 2162 15 is_stmt 0 discriminator 3 view .LVU2183
 6688 0836 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6689              	.LVL746:
2162:src/display.c **** 	      odig++;
 6690              		.loc 1 2162 15 discriminator 3 view .LVU2184
 6691 083a 01F8010F 		strb	r0, [r1, #1]!
2163:src/display.c **** 	    }
 6692              		.loc 1 2163 8 is_stmt 1 discriminator 3 view .LVU2185
2161:src/display.c **** 	      *obp++ = *p++;
 6693              		.loc 1 2161 25 discriminator 3 view .LVU2186
2161:src/display.c **** 	      *obp++ = *p++;
 6694              		.loc 1 2161 16 discriminator 3 view .LVU2187
2161:src/display.c **** 	      *obp++ = *p++;
 6695              		.loc 1 2161 6 is_stmt 0 discriminator 3 view .LVU2188
 6696 083e 4A45     		cmp	r2, r9
 6697 0840 F9D1     		bne	.L523
 6698 0842 013B     		subs	r3, r3, #1
 6699              	.LVL747:
2161:src/display.c **** 	      *obp++ = *p++;
 6700              		.loc 1 2161 6 discriminator 3 view .LVU2189
 6701 0844 9844     		add	r8, r8, r3
 6702 0846 1E44     		add	r6, r6, r3
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6703              		.loc 1 2165 15 view .LVU2190
 6704 0848 4FF0010B 		mov	fp, #1
 6705 084c 38E6     		b	.L522
 6706              	.LVL748:
 6707              	.L520:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6708              		.loc 1 2165 15 view .LVU2191
 6709 084e 079A     		ldr	r2, [sp, #28]
2142:src/display.c **** 	    case -1:
 6710              		.loc 1 2142 24 view .LVU2192
 6711 0850 0226     		movs	r6, #2
1938:src/display.c **** 	int odig = 0;
 6712              		.loc 1 1938 15 view .LVU2193
 6713 0852 3946     		mov	r1, r7
 6714 0854 DBE7     		b	.L521
 6715              	.LVL749:
 6716              	.L558:
2287:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 215


 6717              		.loc 1 2287 8 is_stmt 1 view .LVU2194
 6718 0856 2D21     		movs	r1, #45
 6719 0858 AAF10900 		sub	r0, r10, #9
 6720 085c FFF7FEFF 		bl	set_dig
 6721              	.LVL750:
 6722 0860 28E5     		b	.L554
 6723              	.LVL751:
 6724              	.L688:
 6725              	.LBB435:
 6726              	.LBB433:
 6727              	.LBB427:
1854:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6728              		.loc 1 1854 4 view .LVU2195
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6729              		.loc 1 1857 4 view .LVU2196
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6730              		.loc 1 1857 14 is_stmt 0 view .LVU2197
 6731 0862 FE1C     		adds	r6, r7, #3
 6732              	.LVL752:
1858:src/display.c **** 	  if (grouping) {
 6733              		.loc 1 1858 4 is_stmt 1 view .LVU2198
 6734 0864 4649     		ldr	r1, .L693+20
 6735 0866 0D22     		movs	r2, #13
 6736 0868 3046     		mov	r0, r6
 6737 086a FFF7FEFF 		bl	xcopy
 6738              	.LVL753:
1859:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6739              		.loc 1 1859 4 view .LVU2199
1860:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6740              		.loc 1 1860 6 view .LVU2200
 6741 086e 1322     		movs	r2, #19
 6742 0870 B918     		adds	r1, r7, r2
 6743 0872 07F11400 		add	r0, r7, #20
 6744 0876 FFF7FEFF 		bl	xcopy
 6745              	.LVL754:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6746              		.loc 1 1861 6 view .LVU2201
1862:src/display.c **** 	  }
 6747              		.loc 1 1862 8 is_stmt 0 view .LVU2202
 6748 087a 07F11705 		add	r5, r7, #23
 6749              	.LVL755:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6750              		.loc 1 1861 24 view .LVU2203
 6751 087e 87F81380 		strb	r8, [r7, #19]
1862:src/display.c **** 	  }
 6752              		.loc 1 1862 6 is_stmt 1 view .LVU2204
 6753              	.LVL756:
1875:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6754              		.loc 1 1875 4 view .LVU2205
1876:src/display.c **** 	}
 6755              		.loc 1 1876 4 view .LVU2206
1876:src/display.c **** 	}
 6756              		.loc 1 1876 6 is_stmt 0 view .LVU2207
 6757 0882 1B24     		movs	r4, #27
 6758              	.LVL757:
 6759              	.L466:
1876:src/display.c **** 	}
ARM GAS  /tmp/cc1e4Gjl.s 			page 216


 6760              		.loc 1 1876 6 view .LVU2208
 6761              	.LBE427:
1910:src/display.c **** 	  }
 6762              		.loc 1 1910 6 is_stmt 1 view .LVU2209
 6763              	.LBB428:
 6764              	.LBI428:
 367:src/display.c ****   if (sep == SEP_NONE)
 6765              		.loc 1 367 14 view .LVU2210
 6766              	.LBB429:
 368:src/display.c ****     return res;
 6767              		.loc 1 368 3 view .LVU2211
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6768              		.loc 1 370 3 view .LVU2212
 6769 0884 2046     		mov	r0, r4
 6770 0886 5146     		mov	r1, r10
 6771              	.LBE429:
 6772              	.LBE428:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6773              		.loc 1 1909 38 is_stmt 0 view .LVU2213
 6774 0888 1B34     		adds	r4, r4, #27
 6775              	.LVL758:
 6776              	.LBB431:
 6777              	.LBB430:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6778              		.loc 1 1909 38 view .LVU2214
 6779 088a FFF7FEFF 		bl	set_separator.part.0
 6780              	.LVL759:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6781              		.loc 1 1909 38 view .LVU2215
 6782              	.LBE430:
 6783              	.LBE431:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6784              		.loc 1 1909 36 is_stmt 1 view .LVU2216
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6785              		.loc 1 1909 11 view .LVU2217
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6786              		.loc 1 1909 4 is_stmt 0 view .LVU2218
 6787 088e 512C     		cmp	r4, #81
 6788 0890 F8DD     		ble	.L466
 6789 0892 6C1E     		subs	r4, r5, #1
 6790              	.LVL760:
 6791              	.L468:
1915:src/display.c **** 
 6792              		.loc 1 1915 4 is_stmt 1 view .LVU2219
 6793 0894 5846     		mov	r0, fp
 6794 0896 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1914:src/display.c **** 	  set_dig(j, x[i]);
 6795              		.loc 1 1914 33 is_stmt 0 view .LVU2220
 6796 089a 0BF1090B 		add	fp, fp, #9
 6797              	.LVL761:
1915:src/display.c **** 
 6798              		.loc 1 1915 4 view .LVU2221
 6799 089e FFF7FEFF 		bl	set_dig
 6800              	.LVL762:
1914:src/display.c **** 	  set_dig(j, x[i]);
 6801              		.loc 1 1914 26 is_stmt 1 view .LVU2222
1914:src/display.c **** 	  set_dig(j, x[i]);
ARM GAS  /tmp/cc1e4Gjl.s 			page 217


 6802              		.loc 1 1914 18 view .LVU2223
1914:src/display.c **** 	  set_dig(j, x[i]);
 6803              		.loc 1 1914 2 is_stmt 0 view .LVU2224
 6804 08a2 BBF16C0F 		cmp	fp, #108
 6805 08a6 F5D1     		bne	.L468
1917:src/display.c **** 	set_status(upper_str - negative);
 6806              		.loc 1 1917 2 is_stmt 1 view .LVU2225
1917:src/display.c **** 	set_status(upper_str - negative);
 6807              		.loc 1 1917 5 is_stmt 0 view .LVU2226
 6808 08a8 0023     		movs	r3, #0
1918:src/display.c ****       }
 6809              		.loc 1 1918 2 view .LVU2227
 6810 08aa 3046     		mov	r0, r6
1917:src/display.c **** 	set_status(upper_str - negative);
 6811              		.loc 1 1917 5 view .LVU2228
 6812 08ac 2B70     		strb	r3, [r5]
1918:src/display.c ****       }
 6813              		.loc 1 1918 2 is_stmt 1 view .LVU2229
 6814 08ae FFF7FEFF 		bl	set_status
 6815              	.LVL763:
1919:src/display.c **** 
 6816              		.loc 1 1919 7 is_stmt 0 view .LVU2230
 6817 08b2 25E5     		b	.L447
 6818              	.LVL764:
 6819              	.L684:
1919:src/display.c **** 
 6820              		.loc 1 1919 7 view .LVU2231
 6821              	.LBE433:
 6822              	.LBE435:
1975:src/display.c **** 	      return;
 6823              		.loc 1 1975 8 is_stmt 1 view .LVU2232
 6824 08b4 2846     		mov	r0, r5
 6825 08b6 FFF7FEFF 		bl	set_x_hms
 6826              	.LVL765:
1976:src/display.c **** 	    }
 6827              		.loc 1 1976 8 view .LVU2233
 6828 08ba 21E5     		b	.L447
 6829              	.LVL766:
 6830              	.L586:
2137:src/display.c **** 	  if (count != *display_digits)
 6831              		.loc 1 2137 4 is_stmt 0 view .LVU2234
 6832 08bc 5346     		mov	r3, r10
 6833 08be A2E4     		b	.L513
 6834              	.LVL767:
 6835              	.L587:
2142:src/display.c **** 	    case -1:
 6836              		.loc 1 2142 24 view .LVU2235
 6837 08c0 0126     		movs	r6, #1
 6838 08c2 3946     		mov	r1, r7
 6839 08c4 AAE7     		b	.L517
 6840              	.LVL768:
 6841              	.L588:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6842              		.loc 1 2165 15 view .LVU2236
 6843 08c6 4FF0010B 		mov	fp, #1
 6844 08ca F9E5     		b	.L522
 6845              	.LVL769:
ARM GAS  /tmp/cc1e4Gjl.s 			page 218


 6846              	.L562:
 6847              	.LBB436:
 6848              	.LBB415:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6849              		.loc 1 2165 15 view .LVU2237
 6850 08cc 5046     		mov	r0, r10
 6851 08ce FFF7FEFF 		bl	set_separator.part.0
 6852              	.LVL770:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6853              		.loc 1 2165 15 view .LVU2238
 6854 08d2 0446     		mov	r4, r0
 6855              	.LVL771:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6856              		.loc 1 2165 15 view .LVU2239
 6857 08d4 11E6     		b	.L560
 6858              	.LVL772:
 6859              	.L496:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6860              		.loc 1 2165 15 view .LVU2240
 6861              	.LBE415:
 6862              	.LBE436:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6863              		.loc 1 2115 4 is_stmt 1 view .LVU2241
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6864              		.loc 1 2115 7 is_stmt 0 view .LVU2242
 6865 08d6 4B45     		cmp	r3, r9
 6866 08d8 7FF45AAC 		bne	.L571
 6867 08dc 59E5     		b	.L572
 6868              	.LVL773:
 6869              	.L463:
 6870              	.LBB437:
 6871              	.LBB434:
1900:src/display.c **** 	    x[10] = '\0';
 6872              		.loc 1 1900 6 is_stmt 1 view .LVU2243
1901:src/display.c **** 	  }
 6873              		.loc 1 1901 6 view .LVU2244
1900:src/display.c **** 	    x[10] = '\0';
 6874              		.loc 1 1900 11 is_stmt 0 view .LVU2245
 6875 08de 7C82     		strh	r4, [r7, #18]	@ movhi
 6876 08e0 2DE7     		b	.L465
 6877              	.LVL774:
 6878              	.L687:
 6879              	.LBB432:
1825:src/display.c **** 
 6880              		.loc 1 1825 4 is_stmt 1 view .LVU2246
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6881              		.loc 1 1827 4 view .LVU2247
 6882 08e2 2222     		movs	r2, #34
 6883 08e4 0DF12501 		add	r1, sp, #37
 6884 08e8 0AA8     		add	r0, sp, #40
 6885              	.LVL775:
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6886              		.loc 1 1827 4 is_stmt 0 view .LVU2248
 6887 08ea FFF7FEFF 		bl	xcopy
 6888              	.LVL776:
1828:src/display.c **** 	  x += 4;
 6889              		.loc 1 1828 4 is_stmt 1 view .LVU2249
ARM GAS  /tmp/cc1e4Gjl.s 			page 219


 6890 08ee 3846     		mov	r0, r7
 6891 08f0 2449     		ldr	r1, .L693+24
 6892 08f2 0422     		movs	r2, #4
 6893 08f4 FFF7FEFF 		bl	xcopy
 6894              	.LVL777:
1829:src/display.c **** 	  negative = 4;
 6895              		.loc 1 1829 4 view .LVU2250
1830:src/display.c **** #else
 6896              		.loc 1 1830 4 view .LVU2251
1829:src/display.c **** 	  negative = 4;
 6897              		.loc 1 1829 6 is_stmt 0 view .LVU2252
 6898 08f8 0AAF     		add	r7, sp, #40
 6899              	.LVL778:
1830:src/display.c **** #else
 6900              		.loc 1 1830 13 view .LVU2253
 6901 08fa 0426     		movs	r6, #4
 6902              	.LVL779:
1830:src/display.c **** #else
 6903              		.loc 1 1830 13 view .LVU2254
 6904              	.LBE432:
 6905 08fc DEE6     		b	.L459
 6906              	.LVL780:
 6907              	.L524:
1830:src/display.c **** #else
 6908              		.loc 1 1830 13 view .LVU2255
 6909              	.LBE434:
 6910              	.LBE437:
2181:src/display.c **** 	    odig++;
 6911              		.loc 1 2181 6 is_stmt 1 view .LVU2256
2182:src/display.c **** 	    *obp++ = '.';
 6912              		.loc 1 2182 6 view .LVU2257
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6913              		.loc 1 2183 6 view .LVU2258
2181:src/display.c **** 	    odig++;
 6914              		.loc 1 2181 13 is_stmt 0 view .LVU2259
 6915 08fe 42F63062 		movw	r2, #11824
 6916 0902 ADF82420 		strh	r2, [sp, #36]	@ movhi
2184:src/display.c **** 	      *obp++ = '0';
 6917              		.loc 1 2184 6 is_stmt 1 view .LVU2260
 6918              	.LVL781:
2184:src/display.c **** 	      *obp++ = '0';
 6919              		.loc 1 2184 20 view .LVU2261
2184:src/display.c **** 	      *obp++ = '0';
 6920              		.loc 1 2184 6 is_stmt 0 view .LVU2262
 6921 0906 6A1C     		adds	r2, r5, #1
 6922              	.LVL782:
2184:src/display.c **** 	      *obp++ = '0';
 6923              		.loc 1 2184 6 view .LVU2263
 6924 0908 2AD0     		beq	.L589
 6925 090a C5F10100 		rsb	r0, r5, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6926              		.loc 1 2183 10 view .LVU2264
 6927 090e 0DF12601 		add	r1, sp, #38
 6928              	.LVL783:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6929              		.loc 1 2183 10 view .LVU2265
 6930 0912 3844     		add	r0, r0, r7
ARM GAS  /tmp/cc1e4Gjl.s 			page 220


 6931 0914 0A46     		mov	r2, r1
 6932              	.LVL784:
2185:src/display.c **** 	      odig++;
 6933              		.loc 1 2185 15 view .LVU2266
 6934 0916 3026     		movs	r6, #48
 6935              	.LVL785:
 6936              	.L531:
2185:src/display.c **** 	      odig++;
 6937              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2267
2185:src/display.c **** 	      odig++;
 6938              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2268
 6939 0918 02F8016B 		strb	r6, [r2], #1
 6940              	.LVL786:
2186:src/display.c **** 	    }
 6941              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2269
2184:src/display.c **** 	      *obp++ = '0';
 6942              		.loc 1 2184 25 discriminator 3 view .LVU2270
2184:src/display.c **** 	      *obp++ = '0';
 6943              		.loc 1 2184 20 discriminator 3 view .LVU2271
2184:src/display.c **** 	      *obp++ = '0';
 6944              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2272
 6945 091c 9042     		cmp	r0, r2
 6946 091e FBD1     		bne	.L531
 6947 0920 6FEA0508 		mvn	r8, r5
 6948 0924 8844     		add	r8, r8, r1
 6949 0926 6E42     		rsbs	r6, r5, #0
 6950              	.LVL787:
 6951              	.L530:
2188:src/display.c **** 	      *obp++ = *p++;
 6952              		.loc 1 2188 16 is_stmt 1 view .LVU2273
2188:src/display.c **** 	      *obp++ = *p++;
 6953              		.loc 1 2188 6 is_stmt 0 view .LVU2274
 6954 0928 002B     		cmp	r3, #0
 6955 092a 7FF7C9AD 		ble	.L522
 6956 092e 581E     		subs	r0, r3, #1
 6957 0930 4044     		add	r0, r0, r8
 6958 0932 08F1FF32 		add	r2, r8, #-1
 6959              	.LVL788:
 6960              	.L532:
2189:src/display.c **** 	      odig++;
 6961              		.loc 1 2189 8 is_stmt 1 discriminator 3 view .LVU2275
2189:src/display.c **** 	      odig++;
 6962              		.loc 1 2189 15 is_stmt 0 discriminator 3 view .LVU2276
 6963 0936 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6964              	.LVL789:
2189:src/display.c **** 	      odig++;
 6965              		.loc 1 2189 15 discriminator 3 view .LVU2277
 6966 093a 02F8011F 		strb	r1, [r2, #1]!
2190:src/display.c **** 	    }
 6967              		.loc 1 2190 8 is_stmt 1 discriminator 3 view .LVU2278
2188:src/display.c **** 	      *obp++ = *p++;
 6968              		.loc 1 2188 25 discriminator 3 view .LVU2279
 6969              	.LVL790:
2188:src/display.c **** 	      *obp++ = *p++;
 6970              		.loc 1 2188 16 discriminator 3 view .LVU2280
2188:src/display.c **** 	      *obp++ = *p++;
 6971              		.loc 1 2188 6 is_stmt 0 discriminator 3 view .LVU2281
ARM GAS  /tmp/cc1e4Gjl.s 			page 221


 6972 093e 8242     		cmp	r2, r0
 6973 0940 F9D1     		bne	.L532
 6974              	.LVL791:
2188:src/display.c **** 	      *obp++ = *p++;
 6975              		.loc 1 2188 6 discriminator 3 view .LVU2282
 6976 0942 9844     		add	r8, r8, r3
 6977              	.LVL792:
2188:src/display.c **** 	      *obp++ = *p++;
 6978              		.loc 1 2188 6 discriminator 3 view .LVU2283
 6979 0944 1E44     		add	r6, r6, r3
 6980 0946 BBE5     		b	.L522
 6981              	.LVL793:
 6982              	.L686:
2131:src/display.c **** 
 6983              		.loc 1 2131 2 is_stmt 1 view .LVU2284
 6984 0948 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 6985              		.loc 1 2131 9 is_stmt 0 view .LVU2285
 6986 094c 09EB0E03 		add	r3, r9, lr
 6987              	.LVL794:
2131:src/display.c **** 
 6988              		.loc 1 2131 45 is_stmt 1 view .LVU2286
2131:src/display.c **** 
 6989              		.loc 1 2131 2 is_stmt 0 view .LVU2287
 6990 0950 51B1     		cbz	r1, .L690
2120:src/display.c **** 	      extra_digits = 0;
 6991              		.loc 1 2120 37 view .LVU2288
 6992 0952 0226     		movs	r6, #2
 6993 0954 33E4     		b	.L570
 6994              	.LVL795:
 6995              	.L689:
2120:src/display.c **** 	      extra_digits = 0;
 6996              		.loc 1 2120 37 view .LVU2289
 6997 0956 079B     		ldr	r3, [sp, #28]
 6998              	.LVL796:
2211:src/display.c **** 	    *obp++ = '.';
 6999              		.loc 1 2211 10 view .LVU2290
 7000 0958 0126     		movs	r6, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7001              		.loc 1 2212 10 view .LVU2291
 7002 095a 0DF12608 		add	r8, sp, #38
 7003              	.LVL797:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7004              		.loc 1 2212 10 view .LVU2292
 7005 095e 16E7     		b	.L540
 7006              	.LVL798:
 7007              	.L589:
2182:src/display.c **** 	    *obp++ = '.';
 7008              		.loc 1 2182 10 view .LVU2293
 7009 0960 0126     		movs	r6, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7010              		.loc 1 2183 10 view .LVU2294
 7011 0962 0DF12608 		add	r8, sp, #38
 7012              	.LVL799:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7013              		.loc 1 2183 10 view .LVU2295
 7014 0966 DFE7     		b	.L530
ARM GAS  /tmp/cc1e4Gjl.s 			page 222


 7015              	.LVL800:
 7016              	.L690:
1938:src/display.c **** 	int odig = 0;
 7017              		.loc 1 1938 15 view .LVU2296
 7018 0968 3946     		mov	r1, r7
 7019 096a 8AE5     		b	.L512
 7020              	.L694:
 7021              		.align	2
 7022              	.L693:
 7023 096c 00000000 		.word	LastDisplayedExponent
 7024 0970 00000000 		.word	LastDisplayedNumber
 7025 0974 00000000 		.word	.LANCHOR1
 7026 0978 D34D6210 		.word	274877907
 7027 097c 18FCFFFF 		.word	-1000
 7028 0980 00000000 		.word	.LANCHOR14
 7029 0984 00000000 		.word	.LANCHOR13
 7030              		.cfi_endproc
 7031              	.LFE27:
 7033              		.section	.text.set_x,"ax",%progbits
 7034              		.align	1
 7035              		.p2align 2,,3
 7036              		.syntax unified
 7037              		.thumb
 7038              		.thumb_func
 7039              		.fpu fpv4-sp-d16
 7041              	set_x:
 7042              	.LVL801:
 7043              	.LFB26:
1926:src/display.c **** 	decNumber z;
 7044              		.loc 1 1926 66 is_stmt 1 view -0
 7045              		.cfi_startproc
 7046              		@ args = 0, pretend = 0, frame = 40
 7047              		@ frame_needed = 0, uses_anonymous_args = 0
1927:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7048              		.loc 1 1927 2 view .LVU2298
1928:src/display.c **** 
 7049              		.loc 1 1928 2 view .LVU2299
1926:src/display.c **** 	decNumber z;
 7050              		.loc 1 1926 66 is_stmt 0 view .LVU2300
 7051 0000 30B5     		push	{r4, r5, lr}
 7052              		.cfi_def_cfa_offset 12
 7053              		.cfi_offset 4, -12
 7054              		.cfi_offset 5, -8
 7055              		.cfi_offset 14, -4
 7056 0002 8BB0     		sub	sp, sp, #44
 7057              		.cfi_def_cfa_offset 56
1928:src/display.c **** 
 7058              		.loc 1 1928 6 view .LVU2301
 7059 0004 0C23     		movs	r3, #12
1931:src/display.c **** 	else
 7060              		.loc 1 1931 4 view .LVU2302
 7061 0006 01AD     		add	r5, sp, #4
1926:src/display.c **** 	decNumber z;
 7062              		.loc 1 1926 66 view .LVU2303
 7063 0008 0C46     		mov	r4, r1
1928:src/display.c **** 
 7064              		.loc 1 1928 6 view .LVU2304
ARM GAS  /tmp/cc1e4Gjl.s 			page 223


 7065 000a 0093     		str	r3, [sp]
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7066              		.loc 1 1930 2 is_stmt 1 view .LVU2305
1931:src/display.c **** 	else
 7067              		.loc 1 1931 4 is_stmt 0 view .LVU2306
 7068 000c 2946     		mov	r1, r5
 7069              	.LVL802:
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7070              		.loc 1 1930 5 view .LVU2307
 7071 000e 42B1     		cbz	r2, .L696
1931:src/display.c **** 	else
 7072              		.loc 1 1931 4 is_stmt 1 view .LVU2308
 7073 0010 FFF7FEFF 		bl	decimal128ToNumber
 7074              	.LVL803:
1934:src/display.c ****       }
 7075              		.loc 1 1934 2 view .LVU2309
 7076 0014 2146     		mov	r1, r4
 7077 0016 2846     		mov	r0, r5
 7078 0018 6A46     		mov	r2, sp
 7079 001a FFF7FEFF 		bl	set_x_dn
 7080              	.LVL804:
1935:src/display.c **** 
 7081              		.loc 1 1935 7 is_stmt 0 view .LVU2310
 7082 001e 0BB0     		add	sp, sp, #44
 7083              		.cfi_remember_state
 7084              		.cfi_def_cfa_offset 12
 7085              		@ sp needed
 7086 0020 30BD     		pop	{r4, r5, pc}
 7087              	.LVL805:
 7088              	.L696:
 7089              		.cfi_restore_state
1933:src/display.c **** 	set_x_dn(&z, res, &digits);
 7090              		.loc 1 1933 4 is_stmt 1 view .LVU2311
 7091 0022 FFF7FEFF 		bl	decimal64ToNumber
 7092              	.LVL806:
1934:src/display.c ****       }
 7093              		.loc 1 1934 2 view .LVU2312
 7094 0026 2146     		mov	r1, r4
 7095 0028 2846     		mov	r0, r5
 7096 002a 6A46     		mov	r2, sp
 7097 002c FFF7FEFF 		bl	set_x_dn
 7098              	.LVL807:
1935:src/display.c **** 
 7099              		.loc 1 1935 7 is_stmt 0 view .LVU2313
 7100 0030 0BB0     		add	sp, sp, #44
 7101              		.cfi_def_cfa_offset 12
 7102              		@ sp needed
 7103 0032 30BD     		pop	{r4, r5, pc}
1935:src/display.c **** 
 7104              		.loc 1 1935 7 view .LVU2314
 7105              		.cfi_endproc
 7106              	.LFE26:
 7108              		.section	.text.format_reg,"ax",%progbits
 7109              		.align	1
 7110              		.p2align 2,,3
 7111              		.global	format_reg
 7112              		.syntax unified
ARM GAS  /tmp/cc1e4Gjl.s 			page 224


 7113              		.thumb
 7114              		.thumb_func
 7115              		.fpu fpv4-sp-d16
 7117              	format_reg:
 7118              	.LVL808:
 7119              	.LFB28:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7120              		.loc 1 2342 45 is_stmt 1 view -0
 7121              		.cfi_startproc
 7122              		@ args = 0, pretend = 0, frame = 40
 7123              		@ frame_needed = 0, uses_anonymous_args = 0
2343:src/display.c **** 
 7124              		.loc 1 2343 2 view .LVU2316
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7125              		.loc 1 2342 45 is_stmt 0 view .LVU2317
 7126 0000 30B5     		push	{r4, r5, lr}
 7127              		.cfi_def_cfa_offset 12
 7128              		.cfi_offset 4, -12
 7129              		.cfi_offset 5, -8
 7130              		.cfi_offset 14, -4
 7131 0002 8BB0     		sub	sp, sp, #44
 7132              		.cfi_def_cfa_offset 56
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7133              		.loc 1 2342 45 view .LVU2318
 7134 0004 0C46     		mov	r4, r1
 7135 0006 0546     		mov	r5, r0
2343:src/display.c **** 
 7136              		.loc 1 2343 28 view .LVU2319
 7137 0008 FFF7FEFF 		bl	get_reg_n
 7138              	.LVL809:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7139              		.loc 1 2345 6 view .LVU2320
 7140 000c 154B     		ldr	r3, .L706
 7141 000e 1B68     		ldr	r3, [r3]
 7142 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7143              	.LVL810:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7144              		.loc 1 2345 2 is_stmt 1 view .LVU2321
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7145              		.loc 1 2345 5 is_stmt 0 view .LVU2322
 7146 0014 D207     		lsls	r2, r2, #31
 7147 0016 1DD4     		bmi	.L704
2348:src/display.c **** 	  decNumber x;
 7148              		.loc 1 2348 7 is_stmt 1 view .LVU2323
2348:src/display.c **** 	  decNumber x;
 7149              		.loc 1 2348 10 is_stmt 0 view .LVU2324
 7150 0018 44B1     		cbz	r4, .L705
 7151              	.L702:
2359:src/display.c ****       }
 7152              		.loc 1 2359 4 is_stmt 1 view .LVU2325
2359:src/display.c ****       }
 7153              		.loc 1 2359 24 is_stmt 0 view .LVU2326
 7154 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2359:src/display.c ****       }
 7155              		.loc 1 2359 4 view .LVU2327
 7156 001e 2146     		mov	r1, r4
 7157 0020 C2F38012 		ubfx	r2, r2, #6, #1
ARM GAS  /tmp/cc1e4Gjl.s 			page 225


 7158 0024 FFF7FEFF 		bl	set_x
 7159              	.LVL811:
2360:src/display.c **** 
 7160              		.loc 1 2360 7 view .LVU2328
 7161 0028 0BB0     		add	sp, sp, #44
 7162              		.cfi_remember_state
 7163              		.cfi_def_cfa_offset 12
 7164              		@ sp needed
 7165 002a 30BD     		pop	{r4, r5, pc}
 7166              	.LVL812:
 7167              	.L705:
 7168              		.cfi_restore_state
2348:src/display.c **** 	  decNumber x;
 7169              		.loc 1 2348 32 discriminator 1 view .LVU2329
 7170 002c 0E4A     		ldr	r2, .L706+4
2348:src/display.c **** 	  decNumber x;
 7171              		.loc 1 2348 23 discriminator 1 view .LVU2330
 7172 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7173 0030 012A     		cmp	r2, #1
 7174 0032 F2D9     		bls	.L702
 7175              	.LVL813:
 7176              	.LBB441:
 7177              	.LBI441:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7178              		.loc 1 2342 12 is_stmt 1 view .LVU2331
 7179              	.LBB442:
 7180              	.LBB443:
2349:src/display.c **** 	  int s;
 7181              		.loc 1 2349 4 view .LVU2332
2350:src/display.c **** 	  unsigned long long int v;
 7182              		.loc 1 2350 4 view .LVU2333
2351:src/display.c **** 
 7183              		.loc 1 2351 4 view .LVU2334
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7184              		.loc 1 2353 4 view .LVU2335
 7185 0034 2946     		mov	r1, r5
 7186 0036 01A8     		add	r0, sp, #4
 7187              	.LVL814:
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7188              		.loc 1 2353 4 is_stmt 0 view .LVU2336
 7189 0038 FFF7FEFF 		bl	getRegister
 7190              	.LVL815:
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7191              		.loc 1 2354 4 is_stmt 1 view .LVU2337
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7192              		.loc 1 2354 8 is_stmt 0 view .LVU2338
 7193 003c 01A8     		add	r0, sp, #4
 7194 003e 6946     		mov	r1, sp
 7195 0040 FFF7FEFF 		bl	dn_to_ull
 7196              	.LVL816:
2355:src/display.c **** 	}
 7197              		.loc 1 2355 4 is_stmt 1 view .LVU2339
 7198 0044 009A     		ldr	r2, [sp]
 7199 0046 FFF7FEFF 		bl	build_value
 7200              	.LVL817:
2355:src/display.c **** 	}
 7201              		.loc 1 2355 4 is_stmt 0 view .LVU2340
ARM GAS  /tmp/cc1e4Gjl.s 			page 226


 7202 004a 2246     		mov	r2, r4
 7203 004c FFF7FEFF 		bl	set_int_x
 7204              	.LVL818:
 7205              	.LBE443:
 7206              	.LBE442:
 7207              	.LBE441:
2360:src/display.c **** 
 7208              		.loc 1 2360 7 view .LVU2341
 7209 0050 0BB0     		add	sp, sp, #44
 7210              		.cfi_remember_state
 7211              		.cfi_def_cfa_offset 12
 7212              		@ sp needed
 7213 0052 30BD     		pop	{r4, r5, pc}
 7214              	.LVL819:
 7215              	.L704:
 7216              		.cfi_restore_state
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7217              		.loc 1 2346 4 is_stmt 1 view .LVU2342
 7218 0054 2846     		mov	r0, r5
 7219              	.LVL820:
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7220              		.loc 1 2346 4 is_stmt 0 view .LVU2343
 7221 0056 FFF7FEFF 		bl	get_reg_n_int
 7222              	.LVL821:
 7223 005a 2246     		mov	r2, r4
 7224 005c FFF7FEFF 		bl	set_int_x
 7225              	.LVL822:
2360:src/display.c **** 
 7226              		.loc 1 2360 7 view .LVU2344
 7227 0060 0BB0     		add	sp, sp, #44
 7228              		.cfi_def_cfa_offset 12
 7229              		@ sp needed
 7230 0062 30BD     		pop	{r4, r5, pc}
 7231              	.LVL823:
 7232              	.L707:
2360:src/display.c **** 
 7233              		.loc 1 2360 7 view .LVU2345
 7234              		.align	2
 7235              	.L706:
 7236 0064 00000000 		.word	main_ram
 7237 0068 00000000 		.word	StateWhileOn
 7238              		.cfi_endproc
 7239              	.LFE28:
 7241              		.section	.text.set_status_right,"ax",%progbits
 7242              		.align	1
 7243              		.p2align 2,,3
 7244              		.syntax unified
 7245              		.thumb
 7246              		.thumb_func
 7247              		.fpu fpv4-sp-d16
 7249              	set_status_right:
 7250              	.LVL824:
 7251              	.LFB46:
3505:src/display.c ****       static void set_status_top(const char *str) {
3506:src/display.c **** 	if (no_status_top) return;
3507:src/display.c **** 	if (State2.runmode) {
3508:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/cc1e4Gjl.s 			page 227


3509:src/display.c **** 	}
3510:src/display.c **** 	else {
3511:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3512:src/display.c **** 	}
3513:src/display.c ****       }
3514:src/display.c **** #ifdef TOP_ROW
3515:src/display.c ****       static void set_status_top_always(const char *str) {
3516:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3517:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3518:src/display.c ****       }
3519:src/display.c **** #endif
3520:src/display.c **** 
3521:src/display.c ****       /*
3522:src/display.c ****        *  Display messages (global function)
3523:src/display.c ****        */
3524:src/display.c ****       extern void message(const char *str1, const char *str2)
3525:src/display.c ****       {
3526:src/display.c **** 	State2.disp_freeze = 0;
3527:src/display.c **** 	State2.disp_small = 0;
3528:src/display.c **** 	WasDataEntry = 0;
3529:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3530:src/display.c **** 	  // Complete redraw necessary
3531:src/display.c **** 	  DispMsg = str1;
3532:src/display.c **** 	  display();
3533:src/display.c **** 	}
3534:src/display.c **** 	else {
3535:src/display.c **** 	  if ( str2 != NULL ) {
3536:src/display.c **** 	    reset_disp();
3537:src/display.c **** 	    ShowRPN = 0;
3538:src/display.c **** 	    set_annunciators();
3539:src/display.c **** 	    set_digits_string( str2, 0 );
3540:src/display.c **** 	  }
3541:src/display.c **** 	  set_status( str1 );
3542:src/display.c **** 	  finish_display();// message
3543:src/display.c **** 	}
3544:src/display.c ****       }
3545:src/display.c **** 
3546:src/display.c **** #ifdef INCLUDE_STOPWATCH
3547:src/display.c **** 
3548:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3549:src/display.c **** 	int j = SEGS_EXP_BASE;
3550:src/display.c **** 	for (; *exponent!=0; exponent++) {
3551:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3552:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3553:src/display.c **** 	}
3554:src/display.c ****       }
3555:src/display.c **** 
3556:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3557:src/display.c ****       {
3558:src/display.c **** #ifndef REALBUILD
3559:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3560:src/display.c **** #endif
3561:src/display.c **** 	reset_disp();
3562:src/display.c **** 	set_dot(DEG);
3563:src/display.c **** 	set_digits_string( str2, 0 );
3564:src/display.c **** 	State2.disp_small = force_small;
3565:src/display.c **** 	if( exponent!=NULL ) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 228


3566:src/display.c **** 	  stopwatch_exponent(exponent);
3567:src/display.c **** 	}
3568:src/display.c **** 	set_status( str1 );
3569:src/display.c **** 	finish_display();
3570:src/display.c ****       }
3571:src/display.c **** 
3572:src/display.c **** 
3573:src/display.c **** #endif // INCLUDE_STOPWATCH
3574:src/display.c **** 
3575:src/display.c ****       /* Display the right hand characters from the given string.
3576:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3577:src/display.c ****        * and reduce font size if required.
3578:src/display.c ****        */
3579:src/display.c ****       static void set_status_right(const char *str) {
 7252              		.loc 1 3579 53 is_stmt 1 view -0
 7253              		.cfi_startproc
 7254              		@ args = 0, pretend = 0, frame = 0
 7255              		@ frame_needed = 0, uses_anonymous_args = 0
3580:src/display.c **** 	unsigned int x = 0;
 7256              		.loc 1 3580 2 view .LVU2347
3581:src/display.c **** 	const char *p;
 7257              		.loc 1 3581 2 view .LVU2348
3582:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7258              		.loc 1 3582 2 view .LVU2349
3579:src/display.c **** 	unsigned int x = 0;
 7259              		.loc 1 3579 53 is_stmt 0 view .LVU2350
 7260 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7261              		.cfi_def_cfa_offset 32
 7262              		.cfi_offset 3, -32
 7263              		.cfi_offset 4, -28
 7264              		.cfi_offset 5, -24
 7265              		.cfi_offset 6, -20
 7266              		.cfi_offset 7, -16
 7267              		.cfi_offset 8, -12
 7268              		.cfi_offset 9, -8
 7269              		.cfi_offset 14, -4
 7270              		.loc 1 3582 23 view .LVU2351
 7271 0004 164B     		ldr	r3, .L722
 7272              		.loc 1 3582 41 view .LVU2352
 7273 0006 93F91630 		ldrsb	r3, [r3, #22]
 7274 000a 002B     		cmp	r3, #0
3579:src/display.c **** 	unsigned int x = 0;
 7275              		.loc 1 3579 53 view .LVU2353
 7276 000c 0646     		mov	r6, r0
 7277              		.loc 1 3582 41 view .LVU2354
 7278 000e 1DDA     		bge	.L721
 7279              	.LVL825:
 7280              	.L709:
 7281              		.loc 1 3582 12 view .LVU2355
 7282 0010 4FF00108 		mov	r8, #1
3583:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7283              		.loc 1 3583 36 view .LVU2356
 7284 0014 4FF48077 		mov	r7, #256
 7285              	.L710:
 7286              	.LVL826:
3584:src/display.c **** 
3585:src/display.c **** 	for (p=str; *p != '\0'; p++);
ARM GAS  /tmp/cc1e4Gjl.s 			page 229


 7287              		.loc 1 3585 2 is_stmt 1 discriminator 4 view .LVU2357
 7288              		.loc 1 3585 14 discriminator 4 view .LVU2358
 7289              		.loc 1 3585 2 is_stmt 0 discriminator 4 view .LVU2359
 7290 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7291 001a 3446     		mov	r4, r6
 7292 001c 1BB1     		cbz	r3, .L711
 7293              	.LVL827:
 7294              	.L712:
 7295              		.loc 1 3585 30 is_stmt 1 discriminator 3 view .LVU2360
 7296              		.loc 1 3585 26 discriminator 3 view .LVU2361
 7297              		.loc 1 3585 14 discriminator 3 view .LVU2362
 7298              		.loc 1 3585 2 is_stmt 0 discriminator 3 view .LVU2363
 7299 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7300              	.LVL828:
 7301              		.loc 1 3585 2 discriminator 3 view .LVU2364
 7302 0022 002B     		cmp	r3, #0
 7303 0024 FBD1     		bne	.L712
 7304              	.L711:
3580:src/display.c **** 	const char *p;
 7305              		.loc 1 3580 15 view .LVU2365
 7306 0026 0025     		movs	r5, #0
 7307 0028 06E0     		b	.L713
 7308              	.LVL829:
 7309              	.L714:
 7310              	.LBB444:
3586:src/display.c **** 	while (--p >= str) {
3587:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7311              		.loc 1 3587 27 view .LVU2366
 7312 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3588:src/display.c **** 
3589:src/display.c **** 	  x += charlengths(c);
 7313              		.loc 1 3589 9 view .LVU2367
 7314 002c 3844     		add	r0, r0, r7
 7315 002e FFF7FEFF 		bl	charlengths
 7316              	.LVL830:
 7317              		.loc 1 3589 6 view .LVU2368
 7318 0032 0544     		add	r5, r5, r0
 7319              	.LVL831:
3590:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7320              		.loc 1 3590 4 is_stmt 1 view .LVU2369
 7321              		.loc 1 3590 7 is_stmt 0 view .LVU2370
 7322 0034 2C2D     		cmp	r5, #44
 7323 0036 03D8     		bhi	.L715
 7324              	.LVL832:
 7325              	.L713:
3587:src/display.c **** 
 7326              		.loc 1 3587 4 is_stmt 1 view .LVU2371
3587:src/display.c **** 
 7327              		.loc 1 3587 4 is_stmt 0 view .LVU2372
 7328              	.LBE444:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7329              		.loc 1 3586 8 is_stmt 1 view .LVU2373
 7330 0038 A146     		mov	r9, r4
 7331 003a 013C     		subs	r4, r4, #1
 7332              	.LVL833:
 7333              	.LBB445:
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
ARM GAS  /tmp/cc1e4Gjl.s 			page 230


 7334              		.loc 1 3589 4 view .LVU2374
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7335              		.loc 1 3589 4 is_stmt 0 view .LVU2375
 7336              	.LBE445:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7337              		.loc 1 3586 8 view .LVU2376
 7338 003c A642     		cmp	r6, r4
 7339 003e F4D9     		bls	.L714
 7340              	.LVL834:
 7341              	.L715:
3591:src/display.c **** 	    break;
3592:src/display.c **** 	}
3593:src/display.c **** 	set_status_sized(p+1, toolarge);
 7342              		.loc 1 3593 2 is_stmt 1 view .LVU2377
 7343              	.LBB446:
 7344              	.LBI446:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7345              		.loc 1 3344 19 view .LVU2378
 7346              	.LBB447:
3345:src/display.c ****       }
 7347              		.loc 1 3345 2 view .LVU2379
 7348 0040 4146     		mov	r1, r8
 7349 0042 4846     		mov	r0, r9
 7350              	.LBE447:
 7351              	.LBE446:
3594:src/display.c ****       }
 7352              		.loc 1 3594 7 is_stmt 0 view .LVU2380
 7353 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7354              		.cfi_remember_state
 7355              		.cfi_restore 14
 7356              		.cfi_restore 9
 7357              		.cfi_restore 8
 7358              		.cfi_restore 7
 7359              		.cfi_restore 6
 7360              		.cfi_restore 5
 7361              		.cfi_restore 4
 7362              		.cfi_restore 3
 7363              		.cfi_def_cfa_offset 0
 7364              	.LVL835:
 7365              	.LBB449:
 7366              	.LBB448:
3345:src/display.c ****       }
 7367              		.loc 1 3345 2 view .LVU2381
 7368 0048 FFF7FEBF 		b	s_s_sized.constprop.0
 7369              	.LVL836:
 7370              	.L721:
 7371              		.cfi_restore_state
3345:src/display.c ****       }
 7372              		.loc 1 3345 2 view .LVU2382
 7373              	.LBE448:
 7374              	.LBE449:
 7375              	.LBB450:
 7376              	.LBI450:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7377              		.loc 1 3492 18 is_stmt 1 view .LVU2383
 7378              	.LBB451:
3493:src/display.c ****       }
ARM GAS  /tmp/cc1e4Gjl.s 			page 231


 7379              		.loc 1 3493 2 view .LVU2384
3493:src/display.c ****       }
 7380              		.loc 1 3493 9 is_stmt 0 view .LVU2385
 7381 004c 0021     		movs	r1, #0
 7382 004e FFF7FEFF 		bl	pixel_length
 7383              	.LVL837:
3493:src/display.c ****       }
 7384              		.loc 1 3493 9 view .LVU2386
 7385              	.LBE451:
 7386              	.LBE450:
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7387              		.loc 1 3582 41 view .LVU2387
 7388 0052 2C28     		cmp	r0, #44
 7389 0054 DCDC     		bgt	.L709
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7390              		.loc 1 3582 12 view .LVU2388
 7391 0056 4FF00008 		mov	r8, #0
3583:src/display.c **** 
 7392              		.loc 1 3583 36 view .LVU2389
 7393 005a 4746     		mov	r7, r8
 7394 005c DCE7     		b	.L710
 7395              	.L723:
 7396 005e 00BF     		.align	2
 7397              	.L722:
 7398 0060 00000000 		.word	StateWhileOn
 7399              		.cfi_endproc
 7400              	.LFE46:
 7402              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7403              		.align	2
 7404              	.LC3:
 7405 0000 32630600 		.ascii	"2c\006\000"
 7406              		.align	2
 7407              	.LC4:
 7408 0004 07C63C00 		.ascii	"\007\306<\000"
 7409              		.align	2
 7410              	.LC5:
 7411 0008 07876900 		.ascii	"\007\207i\000"
 7412              		.align	2
 7413              	.LC6:
 7414 000c 07C67900 		.ascii	"\007\306y\000"
 7415              		.align	2
 7416              	.LC7:
 7417 0010 07950600 		.ascii	"\007\225\006\000"
 7418              		.align	2
 7419              	.LC8:
 7420 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7420      060600
 7421 001b 00       		.align	2
 7422              	.LC9:
 7423 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7423      060600
 7424 0023 00       		.align	2
 7425              	.LC10:
 7426 0024 1400     		.ascii	"\024\000"
 7427 0026 0000     		.align	2
 7428              	.LC11:
 7429 0028 07C77900 		.ascii	"\007\307y\000"
ARM GAS  /tmp/cc1e4Gjl.s 			page 232


 7430              		.align	2
 7431              	.LC12:
 7432 002c 07870700 		.ascii	"\007\207\007\000"
 7433              		.align	2
 7434              	.LC13:
 7435 0030 07C74400 		.ascii	"\007\307D\000"
 7436              		.align	2
 7437              	.LC14:
 7438 0034 07C73C00 		.ascii	"\007\307<\000"
 7439              		.align	2
 7440              	.LC15:
 7441 0038 07872000 		.ascii	"\007\207 \000"
 7442              		.align	2
 7443              	.LC16:
 7444 003c 06060788 		.ascii	"\006\006\007\210\007\000"
 7444      0700
 7445 0042 0000     		.align	2
 7446              	.LC17:
 7447 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7447      00
 7448 0049 000000   		.align	2
 7449              	.LC19:
 7450 004c 07E43F00 		.ascii	"\007\344?\000"
 7451              		.section	.text.annunciators,"ax",%progbits
 7452              		.align	1
 7453              		.p2align 2,,3
 7454              		.syntax unified
 7455              		.thumb
 7456              		.thumb_func
 7457              		.fpu fpv4-sp-d16
 7459              	annunciators:
 7460              	.LFB16:
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7461              		.loc 1 948 36 is_stmt 1 view -0
 7462              		.cfi_startproc
 7463              		@ args = 0, pretend = 0, frame = 88
 7464              		@ frame_needed = 0, uses_anonymous_args = 0
 950:src/display.c ****       int n;
 7465              		.loc 1 950 7 view .LVU2391
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7466              		.loc 1 948 36 is_stmt 0 view .LVU2392
 7467 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7468              		.cfi_def_cfa_offset 28
 7469              		.cfi_offset 4, -28
 7470              		.cfi_offset 5, -24
 7471              		.cfi_offset 6, -20
 7472              		.cfi_offset 7, -16
 7473              		.cfi_offset 8, -12
 7474              		.cfi_offset 9, -8
 7475              		.cfi_offset 14, -4
 961:src/display.c **** #  endif
 7476              		.loc 1 961 38 view .LVU2393
 7477 0004 DFF81C83 		ldr	r8, .L835+56
 948:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7478              		.loc 1 948 36 view .LVU2394
 7479 0008 97B0     		sub	sp, sp, #92
 7480              		.cfi_def_cfa_offset 120
ARM GAS  /tmp/cc1e4Gjl.s 			page 233


 7481              	.LVL838:
 951:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7482              		.loc 1 951 7 is_stmt 1 view .LVU2395
 952:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7483              		.loc 1 952 7 view .LVU2396
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7484              		.loc 1 953 7 view .LVU2397
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7485              		.loc 1 953 43 is_stmt 0 view .LVU2398
 7486 000a FFF7FEFF 		bl	cur_shift
 7487              	.LVL839:
 961:src/display.c **** #  endif
 7488              		.loc 1 961 38 view .LVU2399
 7489 000e D8F80020 		ldr	r2, [r8]
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7490              		.loc 1 953 18 view .LVU2400
 7491 0012 B64B     		ldr	r3, .L835
 961:src/display.c **** #  endif
 7492              		.loc 1 961 38 view .LVU2401
 7493 0014 92F8EA67 		ldrb	r6, [r2, #2026]	@ zero_extendqisi2
 953:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7494              		.loc 1 953 18 view .LVU2402
 7495 0018 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 7496              	.LVL840:
 961:src/display.c **** #  endif
 7497              		.loc 1 961 7 is_stmt 1 view .LVU2403
 992:src/display.c ****       
 7498              		.loc 1 992 7 is_stmt 0 view .LVU2404
 7499 001a 0BAD     		add	r5, sp, #44
 7500              	.LVL841:
 992:src/display.c ****       
 7501              		.loc 1 992 7 view .LVU2405
 7502 001c 0021     		movs	r1, #0
 7503 001e 2846     		mov	r0, r5
 7504 0020 2A22     		movs	r2, #42
 7505 0022 FFF7FEFF 		bl	xset
 7506              	.LVL842:
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7507              		.loc 1 994 11 view .LVU2406
 7508 0026 D8F80030 		ldr	r3, [r8]
 7509 002a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7510              		.loc 1 994 10 view .LVU2407
 7511 002e D907     		lsls	r1, r3, #31
 961:src/display.c **** #  endif
 7512              		.loc 1 961 38 view .LVU2408
 7513 0030 C6F38006 		ubfx	r6, r6, #2, #1
 7514              	.LVL843:
 964:src/display.c **** #  else
 7515              		.loc 1 964 7 is_stmt 1 view .LVU2409
 969:src/display.c **** #  else
 7516              		.loc 1 969 7 view .LVU2410
 979:src/display.c **** #else
 7517              		.loc 1 979 7 view .LVU2411
 987:src/display.c **** #else
 7518              		.loc 1 987 7 view .LVU2412
 992:src/display.c ****       
ARM GAS  /tmp/cc1e4Gjl.s 			page 234


 7519              		.loc 1 992 7 view .LVU2413
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7520              		.loc 1 994 7 view .LVU2414
 994:src/display.c **** #ifdef SHOW_STACK_SIZE
 7521              		.loc 1 994 10 is_stmt 0 view .LVU2415
 7522 0034 62D4     		bmi	.L824
1032:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7523              		.loc 1 1032 12 is_stmt 1 view .LVU2416
1032:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7524              		.loc 1 1032 15 is_stmt 0 view .LVU2417
 7525 0036 002E     		cmp	r6, #0
 7526 0038 3BD1     		bne	.L737
1050:src/display.c **** 	    *p++ = shift_char;
 7527              		.loc 1 1050 4 is_stmt 1 view .LVU2418
1050:src/display.c **** 	    *p++ = shift_char;
 7528              		.loc 1 1050 7 is_stmt 0 view .LVU2419
 7529 003a 202F     		cmp	r7, #32
 7530 003c 00F08D81 		beq	.L738
 7531              	.L740:
1051:src/display.c **** 	    *p++ = '\006';
 7532              		.loc 1 1051 6 is_stmt 1 view .LVU2420
 7533              	.LVL844:
1052:src/display.c **** 	  }
 7534              		.loc 1 1052 11 is_stmt 0 view .LVU2421
 7535 0040 0623     		movs	r3, #6
1051:src/display.c **** 	    *p++ = '\006';
 7536              		.loc 1 1051 11 view .LVU2422
 7537 0042 8DF82C70 		strb	r7, [sp, #44]
1052:src/display.c **** 	  }
 7538              		.loc 1 1052 6 is_stmt 1 view .LVU2423
 7539              	.LVL845:
1052:src/display.c **** 	  }
 7540              		.loc 1 1052 11 is_stmt 0 view .LVU2424
 7541 0046 8DF82D30 		strb	r3, [sp, #45]
1052:src/display.c **** 	  }
 7542              		.loc 1 1052 8 view .LVU2425
 7543 004a 0DF12E00 		add	r0, sp, #46
 7544              	.LVL846:
 7545              	.L739:
1058:src/display.c **** 	  *p++ = ' ';
 7546              		.loc 1 1058 2 is_stmt 1 view .LVU2426
1058:src/display.c **** 	  *p++ = ' ';
 7547              		.loc 1 1058 6 is_stmt 0 view .LVU2427
 7548 004e A84C     		ldr	r4, .L835+4
 7549 0050 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1058:src/display.c **** 	  *p++ = ' ';
 7550              		.loc 1 1058 5 view .LVU2428
 7551 0052 9A07     		lsls	r2, r3, #30
 7552 0054 00F14481 		bmi	.L825
1063:src/display.c **** 	  *p++ = ' ';
 7553              		.loc 1 1063 2 is_stmt 1 view .LVU2429
1063:src/display.c **** 	  *p++ = ' ';
 7554              		.loc 1 1063 5 is_stmt 0 view .LVU2430
 7555 0058 5B07     		lsls	r3, r3, #29
 7556 005a 00F1B480 		bmi	.L826
1069:src/display.c **** 	  if (State2.wascomplex) {
 7557              		.loc 1 1069 2 is_stmt 1 view .LVU2431
ARM GAS  /tmp/cc1e4Gjl.s 			page 235


1069:src/display.c **** 	  if (State2.wascomplex) {
 7558              		.loc 1 1069 5 is_stmt 0 view .LVU2432
 7559 005e 202F     		cmp	r7, #32
 7560 0060 00F0B680 		beq	.L827
 7561              	.L743:
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7562              		.loc 1 1086 2 is_stmt 1 view .LVU2433
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7563              		.loc 1 1086 16 is_stmt 0 view .LVU2434
 7564 0064 D8F80030 		ldr	r3, [r8]
 7565 0068 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7566 006c C3F30113 		ubfx	r3, r3, #4, #2
1086:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7567              		.loc 1 1086 2 view .LVU2435
 7568 0070 012B     		cmp	r3, #1
 7569 0072 00F0C781 		beq	.L778
 7570 0076 9F49     		ldr	r1, .L835+8
 7571 0078 9F4A     		ldr	r2, .L835+12
 7572 007a 022B     		cmp	r3, #2
 7573 007c 08BF     		it	eq
 7574 007e 1146     		moveq	r1, r2
 7575              	.L746:
 7576              	.LVL847:
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7577              		.loc 1 1100 2 is_stmt 1 view .LVU2436
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7578              		.loc 1 1100 6 is_stmt 0 view .LVU2437
 7579 0080 FFF7FEFF 		bl	scopy
 7580              	.LVL848:
1100:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7581              		.loc 1 1100 6 view .LVU2438
 7582 0084 0446     		mov	r4, r0
 7583              	.LVL849:
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7584              		.loc 1 1102 2 is_stmt 1 view .LVU2439
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7585              		.loc 1 1102 6 is_stmt 0 view .LVU2440
 7586 0086 FFF7FEFF 		bl	get_trig_mode
 7587              	.LVL850:
1102:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7588              		.loc 1 1102 5 view .LVU2441
 7589 008a 0228     		cmp	r0, #2
 7590 008c 00F07381 		beq	.L828
 7591              	.LVL851:
 7592              	.L728:
1242:src/display.c ****     }
 7593              		.loc 1 1242 11 is_stmt 1 view .LVU2442
 7594              	.LBB466:
 7595              	.LBI466:
3505:src/display.c **** 	if (no_status_top) return;
 7596              		.loc 1 3505 19 view .LVU2443
 7597              	.LBB467:
3506:src/display.c **** 	if (State2.runmode) {
 7598              		.loc 1 3506 2 view .LVU2444
3506:src/display.c **** 	if (State2.runmode) {
 7599              		.loc 1 3506 6 is_stmt 0 view .LVU2445
 7600 0090 9A4B     		ldr	r3, .L835+16
ARM GAS  /tmp/cc1e4Gjl.s 			page 236


3506:src/display.c **** 	if (State2.runmode) {
 7601              		.loc 1 3506 5 view .LVU2446
 7602 0092 B3F90010 		ldrsh	r1, [r3]
 7603 0096 49B9     		cbnz	r1, .L724
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7604              		.loc 1 3507 2 is_stmt 1 view .LVU2447
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7605              		.loc 1 3507 6 is_stmt 0 view .LVU2448
 7606 0098 954B     		ldr	r3, .L835+4
 7607 009a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7608              		.loc 1 3507 5 view .LVU2449
 7609 009c 5806     		lsls	r0, r3, #25
 7610 009e 22D5     		bpl	.L769
3508:src/display.c **** 	}
 7611              		.loc 1 3508 4 is_stmt 1 view .LVU2450
 7612 00a0 1A06     		lsls	r2, r3, #24
 7613 00a2 23D5     		bpl	.L823
 7614              	.L788:
3511:src/display.c **** 	}
 7615              		.loc 1 3511 4 is_stmt 0 view .LVU2451
 7616 00a4 0121     		movs	r1, #1
 7617              	.L771:
 7618              	.LVL852:
 7619              	.LBB468:
 7620              	.LBI468:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7621              		.loc 1 3344 19 is_stmt 1 view .LVU2452
 7622              	.LBB469:
3345:src/display.c ****       }
 7623              		.loc 1 3345 2 view .LVU2453
 7624 00a6 2846     		mov	r0, r5
 7625 00a8 FFF7FEFF 		bl	s_s_sized.constprop.0
 7626              	.LVL853:
 7627              	.L724:
3345:src/display.c ****       }
 7628              		.loc 1 3345 2 is_stmt 0 view .LVU2454
 7629              	.LBE469:
 7630              	.LBE468:
 7631              	.LBE467:
 7632              	.LBE466:
1243:src/display.c **** #endif //top_row
 7633              		.loc 1 1243 5 view .LVU2455
 7634 00ac 17B0     		add	sp, sp, #92
 7635              		.cfi_remember_state
 7636              		.cfi_def_cfa_offset 28
 7637              		@ sp needed
 7638 00ae BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7639              	.LVL854:
 7640              	.L737:
 7641              		.cfi_restore_state
1114:src/display.c **** 	  *p++ = '\007';
 7642              		.loc 1 1114 2 is_stmt 1 view .LVU2456
1114:src/display.c **** 	  *p++ = '\007';
 7643              		.loc 1 1114 6 is_stmt 0 view .LVU2457
 7644 00b2 8F4C     		ldr	r4, .L835+4
 7645 00b4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
ARM GAS  /tmp/cc1e4Gjl.s 			page 237


1114:src/display.c **** 	  *p++ = '\007';
 7646              		.loc 1 1114 5 view .LVU2458
 7647 00b6 9807     		lsls	r0, r3, #30
 7648 00b8 71D4     		bmi	.L829
1120:src/display.c **** 	  *p++ = '\007';
 7649              		.loc 1 1120 7 is_stmt 1 view .LVU2459
1120:src/display.c **** 	  *p++ = '\007';
 7650              		.loc 1 1120 10 is_stmt 0 view .LVU2460
 7651 00ba 202F     		cmp	r7, #32
 7652 00bc 00F03681 		beq	.L749
 7653              	.L750:
1121:src/display.c **** 	  *p++ = '\307';
 7654              		.loc 1 1121 4 is_stmt 1 view .LVU2461
 7655              	.LVL855:
1122:src/display.c **** 	  *p++ = shift_char;
 7656              		.loc 1 1122 4 view .LVU2462
1121:src/display.c **** 	  *p++ = '\307';
 7657              		.loc 1 1121 9 is_stmt 0 view .LVU2463
 7658 00c0 4CF20772 		movw	r2, #50951
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7659              		.loc 1 1162 5 view .LVU2464
 7660 00c4 5907     		lsls	r1, r3, #29
1123:src/display.c **** 	  goto no_copy;
 7661              		.loc 1 1123 9 view .LVU2465
 7662 00c6 8DF82E70 		strb	r7, [sp, #46]
1121:src/display.c **** 	  *p++ = '\307';
 7663              		.loc 1 1121 9 view .LVU2466
 7664 00ca ADF82C20 		strh	r2, [sp, #44]	@ movhi
1123:src/display.c **** 	  goto no_copy;
 7665              		.loc 1 1123 4 is_stmt 1 view .LVU2467
 7666              	.LVL856:
1124:src/display.c **** 	}
 7667              		.loc 1 1124 4 view .LVU2468
1123:src/display.c **** 	  goto no_copy;
 7668              		.loc 1 1123 6 is_stmt 0 view .LVU2469
 7669 00ce 0DF12F07 		add	r7, sp, #47
 7670              	.LVL857:
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7671              		.loc 1 1162 2 is_stmt 1 view .LVU2470
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7672              		.loc 1 1162 5 is_stmt 0 view .LVU2471
 7673 00d2 73D4     		bmi	.L830
 7674              	.LVL858:
 7675              	.L751:
1164:src/display.c **** 	  decNumber y;
 7676              		.loc 1 1164 9 is_stmt 1 view .LVU2472
1164:src/display.c **** 	  decNumber y;
 7677              		.loc 1 1164 13 is_stmt 0 view .LVU2473
 7678 00d4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
1164:src/display.c **** 	  decNumber y;
 7679              		.loc 1 1164 12 view .LVU2474
 7680 00d6 5A06     		lsls	r2, r3, #25
 7681 00d8 00F18D80 		bmi	.L745
1242:src/display.c ****     }
 7682              		.loc 1 1242 11 is_stmt 1 view .LVU2475
 7683              	.LVL859:
 7684              	.LBB473:
ARM GAS  /tmp/cc1e4Gjl.s 			page 238


3505:src/display.c **** 	if (no_status_top) return;
 7685              		.loc 1 3505 19 view .LVU2476
 7686              	.LBB472:
3506:src/display.c **** 	if (State2.runmode) {
 7687              		.loc 1 3506 2 view .LVU2477
3506:src/display.c **** 	if (State2.runmode) {
 7688              		.loc 1 3506 6 is_stmt 0 view .LVU2478
 7689 00dc 874A     		ldr	r2, .L835+16
3506:src/display.c **** 	if (State2.runmode) {
 7690              		.loc 1 3506 5 view .LVU2479
 7691 00de B2F90020 		ldrsh	r2, [r2]
 7692 00e2 002A     		cmp	r2, #0
 7693 00e4 E2D1     		bne	.L724
 7694              	.LVL860:
 7695              	.L769:
3511:src/display.c **** 	}
 7696              		.loc 1 3511 4 is_stmt 1 view .LVU2480
 7697 00e6 1B06     		lsls	r3, r3, #24
 7698 00e8 DCD4     		bmi	.L788
 7699              	.LVL861:
 7700              	.LBB470:
 7701              	.LBI470:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7702              		.loc 1 3492 18 view .LVU2481
 7703              	.LBB471:
3493:src/display.c ****       }
 7704              		.loc 1 3493 2 view .LVU2482
3493:src/display.c ****       }
 7705              		.loc 1 3493 9 is_stmt 0 view .LVU2483
 7706 00ea 0021     		movs	r1, #0
 7707              	.LVL862:
 7708              	.L823:
3493:src/display.c ****       }
 7709              		.loc 1 3493 9 view .LVU2484
 7710 00ec 2846     		mov	r0, r5
 7711 00ee FFF7FEFF 		bl	pixel_length
 7712              	.LVL863:
 7713              	.LBE471:
 7714              	.LBE470:
3511:src/display.c **** 	}
 7715              		.loc 1 3511 4 view .LVU2485
 7716 00f2 2C28     		cmp	r0, #44
 7717 00f4 D4BF     		ite	le
 7718 00f6 0021     		movle	r1, #0
 7719 00f8 0121     		movgt	r1, #1
 7720 00fa D4E7     		b	.L771
 7721              	.LVL864:
 7722              	.L824:
3511:src/display.c **** 	}
 7723              		.loc 1 3511 4 view .LVU2486
 7724              	.LBE472:
 7725              	.LBE473:
1004:src/display.c **** 	    *p++ = '\006';
 7726              		.loc 1 1004 6 is_stmt 1 view .LVU2487
1005:src/display.c **** 	  }
 7727              		.loc 1 1005 11 is_stmt 0 view .LVU2488
 7728 00fc 0623     		movs	r3, #6
ARM GAS  /tmp/cc1e4Gjl.s 			page 239


 7729 00fe 8DF82D30 		strb	r3, [sp, #45]
1004:src/display.c **** 	    *p++ = '\006';
 7730              		.loc 1 1004 11 view .LVU2489
 7731 0102 8DF82C70 		strb	r7, [sp, #44]
1005:src/display.c **** 	  }
 7732              		.loc 1 1005 6 is_stmt 1 view .LVU2490
 7733              	.LVL865:
1008:src/display.c **** 	default:
 7734              		.loc 1 1008 2 view .LVU2491
1008:src/display.c **** 	default:
 7735              		.loc 1 1008 9 is_stmt 0 view .LVU2492
 7736 0106 FFF7FEFF 		bl	int_mode
 7737              	.LVL866:
 7738 010a 0138     		subs	r0, r0, #1
 7739 010c C0B2     		uxtb	r0, r0
 7740 010e 0228     		cmp	r0, #2
 7741 0110 96BF     		itet	ls
 7742 0112 7B4B     		ldrls	r3, .L835+20
 7743 0114 7B49     		ldrhi	r1, .L835+24
 7744 0116 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7745              	.LVL867:
1015:src/display.c **** 	*q++ = '\006';
 7746              		.loc 1 1015 2 is_stmt 1 view .LVU2493
1015:src/display.c **** 	*q++ = '\006';
 7747              		.loc 1 1015 6 is_stmt 0 view .LVU2494
 7748 011a 0DF12E00 		add	r0, sp, #46
 7749              	.LVL868:
1015:src/display.c **** 	*q++ = '\006';
 7750              		.loc 1 1015 6 view .LVU2495
 7751 011e FFF7FEFF 		bl	scopy
 7752              	.LVL869:
1016:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7753              		.loc 1 1016 7 view .LVU2496
 7754 0122 0646     		mov	r6, r0
 7755 0124 0623     		movs	r3, #6
 7756 0126 06F8013B 		strb	r3, [r6], #1
1015:src/display.c **** 	*q++ = '\006';
 7757              		.loc 1 1015 6 view .LVU2497
 7758 012a 0446     		mov	r4, r0
 7759              	.LVL870:
1016:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7760              		.loc 1 1016 2 is_stmt 1 view .LVU2498
1017:src/display.c **** 
 7761              		.loc 1 1017 2 view .LVU2499
1017:src/display.c **** 
 7762              		.loc 1 1017 6 is_stmt 0 view .LVU2500
 7763 012c FFF7FEFF 		bl	word_size
 7764              	.LVL871:
 7765 0130 0146     		mov	r1, r0
 7766 0132 3046     		mov	r0, r6
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7767              		.loc 1 1019 19 view .LVU2501
 7768 0134 744E     		ldr	r6, .L835+28
 7769              	.LVL872:
1017:src/display.c **** 
 7770              		.loc 1 1017 6 view .LVU2502
 7771 0136 0222     		movs	r2, #2
ARM GAS  /tmp/cc1e4Gjl.s 			page 240


 7772 0138 FFF7FEFF 		bl	num_arg_0
 7773              	.LVL873:
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7774              		.loc 1 1019 19 view .LVU2503
 7775 013c 3368     		ldr	r3, [r6]
 7776              	.LVL874:
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7777              		.loc 1 1019 2 is_stmt 1 view .LVU2504
1019:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7778              		.loc 1 1019 5 is_stmt 0 view .LVU2505
 7779 013e 002B     		cmp	r3, #0
 7780 0140 A6DD     		ble	.L728
1020:src/display.c **** 	  if (*q == '1')
 7781              		.loc 1 1020 4 is_stmt 1 view .LVU2506
1020:src/display.c **** 	  if (*q == '1')
 7782              		.loc 1 1020 10 is_stmt 0 view .LVU2507
 7783 0142 C3F10702 		rsb	r2, r3, #7
 7784 0146 5200     		lsls	r2, r2, #1
1020:src/display.c **** 	  if (*q == '1')
 7785              		.loc 1 1020 6 view .LVU2508
 7786 0148 0192     		str	r2, [sp, #4]
1021:src/display.c **** 	    n += 2;
 7787              		.loc 1 1021 4 is_stmt 1 view .LVU2509
1021:src/display.c **** 	    n += 2;
 7788              		.loc 1 1021 7 is_stmt 0 view .LVU2510
 7789 014a 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7790 014c 3129     		cmp	r1, #49
1022:src/display.c **** 	  if (q[1] == '1')
 7791              		.loc 1 1022 6 is_stmt 1 view .LVU2511
1022:src/display.c **** 	  if (q[1] == '1')
 7792              		.loc 1 1022 8 is_stmt 0 view .LVU2512
 7793 014e 04BF     		itt	eq
 7794 0150 0232     		addeq	r2, r2, #2
 7795 0152 0192     		streq	r2, [sp, #4]
1023:src/display.c **** 	    n += 2;
 7796              		.loc 1 1023 4 is_stmt 1 view .LVU2513
1023:src/display.c **** 	    n += 2;
 7797              		.loc 1 1023 7 is_stmt 0 view .LVU2514
 7798 0154 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7799 0156 3129     		cmp	r1, #49
 7800 0158 00D1     		bne	.L730
1024:src/display.c **** 	  while (n-- > 0)
 7801              		.loc 1 1024 6 is_stmt 1 view .LVU2515
1024:src/display.c **** 	  while (n-- > 0)
 7802              		.loc 1 1024 8 is_stmt 0 view .LVU2516
 7803 015a 0232     		adds	r2, r2, #2
 7804              	.L730:
1025:src/display.c **** 	    *p++ = '\006';
 7805              		.loc 1 1025 10 is_stmt 1 view .LVU2517
1025:src/display.c **** 	    *p++ = '\006';
 7806              		.loc 1 1025 12 is_stmt 0 view .LVU2518
 7807 015c 511E     		subs	r1, r2, #1
1025:src/display.c **** 	    *p++ = '\006';
 7808              		.loc 1 1025 10 view .LVU2519
 7809 015e 002A     		cmp	r2, #0
1025:src/display.c **** 	    *p++ = '\006';
 7810              		.loc 1 1025 12 view .LVU2520
ARM GAS  /tmp/cc1e4Gjl.s 			page 241


 7811 0160 0191     		str	r1, [sp, #4]
1025:src/display.c **** 	    *p++ = '\006';
 7812              		.loc 1 1025 10 view .LVU2521
 7813 0162 40F35181 		ble	.L821
1026:src/display.c **** 
 7814              		.loc 1 1026 11 view .LVU2522
 7815 0166 0621     		movs	r1, #6
 7816              	.L731:
1026:src/display.c **** 
 7817              		.loc 1 1026 6 is_stmt 1 view .LVU2523
 7818              	.LVL875:
1026:src/display.c **** 
 7819              		.loc 1 1026 11 is_stmt 0 view .LVU2524
 7820 0168 00F8011B 		strb	r1, [r0], #1
 7821              	.LVL876:
1025:src/display.c **** 	    *p++ = '\006';
 7822              		.loc 1 1025 10 is_stmt 1 view .LVU2525
1025:src/display.c **** 	    *p++ = '\006';
 7823              		.loc 1 1025 12 is_stmt 0 view .LVU2526
 7824 016c 019B     		ldr	r3, [sp, #4]
 7825 016e 5A1E     		subs	r2, r3, #1
1025:src/display.c **** 	    *p++ = '\006';
 7826              		.loc 1 1025 10 view .LVU2527
 7827 0170 002B     		cmp	r3, #0
1025:src/display.c **** 	    *p++ = '\006';
 7828              		.loc 1 1025 12 view .LVU2528
 7829 0172 0192     		str	r2, [sp, #4]
1025:src/display.c **** 	    *p++ = '\006';
 7830              		.loc 1 1025 10 view .LVU2529
 7831 0174 F8DC     		bgt	.L731
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7832              		.loc 1 1028 4 is_stmt 1 view .LVU2530
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7833              		.loc 1 1028 11 is_stmt 0 view .LVU2531
 7834 0176 3368     		ldr	r3, [r6]
 7835 0178 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7836              		.loc 1 1028 27 is_stmt 1 view .LVU2532
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7837              		.loc 1 1028 4 is_stmt 0 view .LVU2533
 7838 017a 002B     		cmp	r3, #0
 7839 017c 88DB     		blt	.L728
 7840              	.L773:
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7841              		.loc 1 1028 4 view .LVU2534
 7842 017e 5C4C     		ldr	r4, .L835+4
 7843              	.LVL877:
 7844              	.L736:
1029:src/display.c **** 	}
 7845              		.loc 1 1029 6 is_stmt 1 view .LVU2535
1029:src/display.c **** 	}
 7846              		.loc 1 1029 19 is_stmt 0 view .LVU2536
 7847 0180 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7848 0182 C2F3C202 		ubfx	r2, r2, #3, #3
1029:src/display.c **** 	}
 7849              		.loc 1 1029 11 view .LVU2537
 7850 0186 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc1e4Gjl.s 			page 242


 7851 0188 0CBF     		ite	eq
 7852 018a 7C23     		moveq	r3, #124
 7853 018c 2723     		movne	r3, #39
 7854              	.LVL878:
1029:src/display.c **** 	}
 7855              		.loc 1 1029 11 view .LVU2538
 7856 018e 00F8013B 		strb	r3, [r0], #1
 7857              	.LVL879:
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7858              		.loc 1 1028 35 is_stmt 1 view .LVU2539
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7859              		.loc 1 1028 36 is_stmt 0 view .LVU2540
 7860 0192 019B     		ldr	r3, [sp, #4]
 7861 0194 013B     		subs	r3, r3, #1
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7862              		.loc 1 1028 4 view .LVU2541
 7863 0196 002B     		cmp	r3, #0
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7864              		.loc 1 1028 36 view .LVU2542
 7865 0198 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7866              		.loc 1 1028 27 is_stmt 1 view .LVU2543
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7867              		.loc 1 1028 4 is_stmt 0 view .LVU2544
 7868 019a F1DA     		bge	.L736
 7869 019c 78E7     		b	.L728
 7870              	.LVL880:
 7871              	.L829:
1115:src/display.c **** 	  *p++ = '\344';
 7872              		.loc 1 1115 4 is_stmt 1 view .LVU2545
1116:src/display.c **** 	  *p++ = shift_char;
 7873              		.loc 1 1116 4 view .LVU2546
1115:src/display.c **** 	  *p++ = '\344';
 7874              		.loc 1 1115 9 is_stmt 0 view .LVU2547
 7875 019e 4EF20743 		movw	r3, #58375
1118:src/display.c **** 	}
 7876              		.loc 1 1118 6 view .LVU2548
 7877 01a2 5A49     		ldr	r1, .L835+32
1117:src/display.c **** 	  q = "\024";
 7878              		.loc 1 1117 9 view .LVU2549
 7879 01a4 8DF82E70 		strb	r7, [sp, #46]
1115:src/display.c **** 	  *p++ = '\344';
 7880              		.loc 1 1115 9 view .LVU2550
 7881 01a8 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1117:src/display.c **** 	  q = "\024";
 7882              		.loc 1 1117 4 is_stmt 1 view .LVU2551
 7883              	.LVL881:
1118:src/display.c **** 	}
 7884              		.loc 1 1118 4 view .LVU2552
1117:src/display.c **** 	  q = "\024";
 7885              		.loc 1 1117 6 is_stmt 0 view .LVU2553
 7886 01ac 0DF12F00 		add	r0, sp, #47
 7887              	.LVL882:
 7888              	.L748:
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7889              		.loc 1 1157 2 is_stmt 1 view .LVU2554
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/cc1e4Gjl.s 			page 243


 7890              		.loc 1 1157 6 is_stmt 0 view .LVU2555
 7891 01b0 FFF7FEFF 		bl	scopy
 7892              	.LVL883:
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7893              		.loc 1 1157 6 view .LVU2556
 7894 01b4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7895              		.loc 1 1162 5 view .LVU2557
 7896 01b6 5907     		lsls	r1, r3, #29
1157:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7897              		.loc 1 1157 6 view .LVU2558
 7898 01b8 0746     		mov	r7, r0
 7899              	.LVL884:
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7900              		.loc 1 1162 2 is_stmt 1 view .LVU2559
1162:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7901              		.loc 1 1162 5 is_stmt 0 view .LVU2560
 7902 01ba 8BD5     		bpl	.L751
 7903              	.LVL885:
 7904              	.L830:
1163:src/display.c **** 	} else if (State2.runmode) {
 7905              		.loc 1 1163 4 is_stmt 1 view .LVU2561
 7906 01bc 5449     		ldr	r1, .L835+36
 7907 01be 3846     		mov	r0, r7
 7908 01c0 FFF7FEFF 		bl	scopy
 7909              	.LVL886:
 7910 01c4 64E7     		b	.L728
 7911              	.LVL887:
 7912              	.L826:
1064:src/display.c **** 	  *p = '\015';
 7913              		.loc 1 1064 4 view .LVU2562
1064:src/display.c **** 	  *p = '\015';
 7914              		.loc 1 1064 9 is_stmt 0 view .LVU2563
 7915 01c6 2022     		movs	r2, #32
1065:src/display.c **** 	  goto skip;
 7916              		.loc 1 1065 7 view .LVU2564
 7917 01c8 0D23     		movs	r3, #13
1064:src/display.c **** 	  *p = '\015';
 7918              		.loc 1 1064 9 view .LVU2565
 7919 01ca 0270     		strb	r2, [r0]
1065:src/display.c **** 	  goto skip;
 7920              		.loc 1 1065 4 is_stmt 1 view .LVU2566
1065:src/display.c **** 	  goto skip;
 7921              		.loc 1 1065 7 is_stmt 0 view .LVU2567
 7922 01cc 4370     		strb	r3, [r0, #1]
1066:src/display.c **** 	}
 7923              		.loc 1 1066 4 is_stmt 1 view .LVU2568
 7924 01ce 5FE7     		b	.L728
 7925              	.LVL888:
 7926              	.L827:
1069:src/display.c **** 	  if (State2.wascomplex) {
 7927              		.loc 1 1069 28 is_stmt 0 discriminator 1 view .LVU2569
 7928 01d0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1069:src/display.c **** 	  if (State2.wascomplex) {
 7929              		.loc 1 1069 24 discriminator 1 view .LVU2570
 7930 01d2 13F0C00F 		tst	r3, #192
 7931 01d6 40F01981 		bne	.L776
ARM GAS  /tmp/cc1e4Gjl.s 			page 244


1069:src/display.c **** 	  if (State2.wascomplex) {
 7932              		.loc 1 1069 60 discriminator 2 view .LVU2571
 7933 01da 4E4B     		ldr	r3, .L835+40
 7934 01dc 1B68     		ldr	r3, [r3]
1069:src/display.c **** 	  if (State2.wascomplex) {
 7935              		.loc 1 1069 46 discriminator 2 view .LVU2572
 7936 01de 002B     		cmp	r3, #0
 7937 01e0 3FF440AF 		beq	.L743
1070:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 7938              		.loc 1 1070 4 is_stmt 1 view .LVU2573
1073:src/display.c **** 	    if (RectPolConv == 1) {
 7939              		.loc 1 1073 9 view .LVU2574
1074:src/display.c **** 	      q = "\007\306<";
 7940              		.loc 1 1074 6 view .LVU2575
1078:src/display.c **** 	    }
 7941              		.loc 1 1078 10 is_stmt 0 view .LVU2576
 7942 01e4 4C49     		ldr	r1, .L835+44
 7943 01e6 4D4A     		ldr	r2, .L835+48
 7944 01e8 012B     		cmp	r3, #1
 7945 01ea 18BF     		it	ne
 7946 01ec 1146     		movne	r1, r2
 7947              	.L744:
 7948              	.LVL889:
1081:src/display.c **** 
 7949              		.loc 1 1081 4 is_stmt 1 view .LVU2577
1081:src/display.c **** 
 7950              		.loc 1 1081 8 is_stmt 0 view .LVU2578
 7951 01ee 2846     		mov	r0, r5
 7952              	.LVL890:
1081:src/display.c **** 
 7953              		.loc 1 1081 8 view .LVU2579
 7954 01f0 FFF7FEFF 		bl	scopy
 7955              	.LVL891:
1081:src/display.c **** 
 7956              		.loc 1 1081 8 view .LVU2580
 7957 01f4 0746     		mov	r7, r0
 7958              	.LVL892:
1083:src/display.c **** 	}
 7959              		.loc 1 1083 4 is_stmt 1 view .LVU2581
 7960              	.L745:
 7961              	.LBB474:
1165:src/display.c **** 	display_yreg:
 7962              		.loc 1 1165 4 view .LVU2582
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7963              		.loc 1 1172 4 view .LVU2583
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7964              		.loc 1 1172 34 is_stmt 0 view .LVU2584
 7965 01f6 DFF83091 		ldr	r9, .L835+60
 7966 01fa D9F80010 		ldr	r1, [r9]
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7967              		.loc 1 1172 4 view .LVU2585
 7968 01fe 6329     		cmp	r1, #99
 7969 0200 00F3EE80 		bgt	.L831
 7970              	.L753:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7971              		.loc 1 1172 4 discriminator 5 view .LVU2586
 7972 0204 0131     		adds	r1, r1, #1
ARM GAS  /tmp/cc1e4Gjl.s 			page 245


 7973              	.L757:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7974              		.loc 1 1172 4 discriminator 6 view .LVU2587
 7975 0206 02A8     		add	r0, sp, #8
 7976 0208 FFF7FEFF 		bl	getRegister
 7977              	.LVL893:
1175:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7978              		.loc 1 1175 4 is_stmt 1 discriminator 6 view .LVU2588
1175:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7979              		.loc 1 1175 7 is_stmt 0 discriminator 6 view .LVU2589
 7980 020c 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7981 0210 11F07001 		ands	r1, r1, #112
 7982 0214 41D1     		bne	.L759
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7983              		.loc 1 1176 6 is_stmt 1 view .LVU2590
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7984              		.loc 1 1176 19 is_stmt 0 view .LVU2591
 7985 0216 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7986              		.loc 1 1176 9 view .LVU2592
 7987 0218 13F0010F 		tst	r3, #1
 7988              	.LBB475:
1177:src/display.c **** 
 7989              		.loc 1 1177 44 view .LVU2593
 7990 021c D8F80030 		ldr	r3, [r8]
 7991              	.LBE475:
1176:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7992              		.loc 1 1176 9 view .LVU2594
 7993 0220 40F0AE80 		bne	.L832
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7994              		.loc 1 1197 6 is_stmt 1 view .LVU2595
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7995              		.loc 1 1197 21 is_stmt 0 view .LVU2596
 7996 0224 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1197:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7997              		.loc 1 1197 9 view .LVU2597
 7998 0228 9E06     		lsls	r6, r3, #26
 7999 022a 36D5     		bpl	.L759
1199:src/display.c **** #endif
 8000              		.loc 1 1199 6 view .LVU2598
 8001 022c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1199:src/display.c **** #endif
 8002              		.loc 1 1199 3 view .LVU2599
 8003 022e 13F00204 		ands	r4, r3, #2
 8004 0232 32D1     		bne	.L759
1202:src/display.c **** #endif
 8005              		.loc 1 1202 6 view .LVU2600
 8006 0234 374B     		ldr	r3, .L835+40
1202:src/display.c **** #endif
 8007              		.loc 1 1202 3 view .LVU2601
 8008 0236 1B68     		ldr	r3, [r3]
 8009 0238 012B     		cmp	r3, #1
 8010 023a 2ED0     		beq	.L759
1204:src/display.c **** 	      char ltgteq;
 8011              		.loc 1 1204 6 view .LVU2602
 8012 023c 3946     		mov	r1, r7
 8013 023e 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc1e4Gjl.s 			page 246


 8014 0240 FFF7FEFF 		bl	set_x_fract
 8015              	.LVL894:
1204:src/display.c **** 	      char ltgteq;
 8016              		.loc 1 1204 3 view .LVU2603
 8017 0244 48B3     		cbz	r0, .L759
 8018              	.LBB476:
1205:src/display.c **** 
 8019              		.loc 1 1205 8 is_stmt 1 view .LVU2604
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8020              		.loc 1 1207 8 view .LVU2605
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8021              		.loc 1 1207 12 is_stmt 0 view .LVU2606
 8022 0246 2146     		mov	r1, r4
 8023 0248 2846     		mov	r0, r5
 8024 024a FFF7FEFF 		bl	find_char
 8025              	.LVL895:
 8026 024e 0446     		mov	r4, r0
1207:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8027              		.loc 1 1207 10 view .LVU2607
 8028 0250 0238     		subs	r0, r0, #2
 8029              	.LVL896:
1209:src/display.c **** 	      switch (ltgteq) {
 8030              		.loc 1 1209 8 is_stmt 1 view .LVU2608
1209:src/display.c **** 	      switch (ltgteq) {
 8031              		.loc 1 1209 15 is_stmt 0 view .LVU2609
 8032 0252 14F8026C 		ldrb	r6, [r4, #-2]	@ zero_extendqisi2
 8033              	.LVL897:
1210:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8034              		.loc 1 1210 8 is_stmt 1 view .LVU2610
 8035 0256 472E     		cmp	r6, #71
 8036 0258 00F0E680 		beq	.L785
1212:src/display.c **** 	      }
 8037              		.loc 1 1212 25 is_stmt 0 view .LVU2611
 8038 025c 4C2E     		cmp	r6, #76
 8039 025e 08BF     		it	eq
 8040 0260 3C26     		moveq	r6, #60
 8041              	.LVL898:
 8042              	.L764:
1214:src/display.c **** 	      q[2] = ltgteq;
 8043              		.loc 1 1214 8 is_stmt 1 view .LVU2612
 8044 0262 2F49     		ldr	r1, .L835+52
 8045 0264 FFF7FEFF 		bl	scopy
 8046              	.LVL899:
1215:src/display.c **** 
 8047              		.loc 1 1215 8 view .LVU2613
1215:src/display.c **** 
 8048              		.loc 1 1215 13 is_stmt 0 view .LVU2614
 8049 0268 2670     		strb	r6, [r4]
1217:src/display.c **** 		goto skip;
 8050              		.loc 1 1217 8 is_stmt 1 view .LVU2615
1217:src/display.c **** 		goto skip;
 8051              		.loc 1 1217 12 is_stmt 0 view .LVU2616
 8052 026a 0121     		movs	r1, #1
 8053 026c 2846     		mov	r0, r5
 8054 026e FFF7FEFF 		bl	pixel_length
 8055              	.LVL900:
1217:src/display.c **** 		goto skip;
ARM GAS  /tmp/cc1e4Gjl.s 			page 247


 8056              		.loc 1 1217 11 view .LVU2617
 8057 0272 2C28     		cmp	r0, #44
 8058 0274 7FF70CAF 		ble	.L728
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8059              		.loc 1 1220 8 is_stmt 1 view .LVU2618
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8060              		.loc 1 1220 14 is_stmt 0 view .LVU2619
 8061 0278 0026     		movs	r6, #0
 8062              	.LVL901:
1220:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8063              		.loc 1 1220 14 view .LVU2620
 8064 027a 04F8036C 		strb	r6, [r4, #-3]
1221:src/display.c **** 		goto skip;
 8065              		.loc 1 1221 8 is_stmt 1 view .LVU2621
1221:src/display.c **** 		goto skip;
 8066              		.loc 1 1221 12 is_stmt 0 view .LVU2622
 8067 027e 0121     		movs	r1, #1
 8068 0280 2846     		mov	r0, r5
 8069 0282 FFF7FEFF 		bl	pixel_length
 8070              	.LVL902:
1221:src/display.c **** 		goto skip;
 8071              		.loc 1 1221 11 view .LVU2623
 8072 0286 2C28     		cmp	r0, #44
 8073 0288 7FF702AF 		ble	.L728
1224:src/display.c **** 	    }
 8074              		.loc 1 1224 8 is_stmt 1 view .LVU2624
1224:src/display.c **** 	    }
 8075              		.loc 1 1224 39 is_stmt 0 view .LVU2625
 8076 028c 7A1B     		subs	r2, r7, r5
1224:src/display.c **** 	    }
 8077              		.loc 1 1224 8 view .LVU2626
 8078 028e 3146     		mov	r1, r6
 8079 0290 C2F12A02 		rsb	r2, r2, #42
 8080 0294 3846     		mov	r0, r7
 8081 0296 FFF7FEFF 		bl	xset
 8082              	.LVL903:
 8083              	.L759:
1224:src/display.c **** 	    }
 8084              		.loc 1 1224 8 view .LVU2627
 8085              	.LBE476:
1227:src/display.c **** 	    int extra_pixels;
 8086              		.loc 1 1227 4 is_stmt 1 view .LVU2628
1227:src/display.c **** 	    int extra_pixels;
 8087              		.loc 1 1227 10 is_stmt 0 view .LVU2629
 8088 029a 0C23     		movs	r3, #12
 8089 029c 0193     		str	r3, [sp, #4]
1227:src/display.c **** 	    int extra_pixels;
 8090              		.loc 1 1227 27 is_stmt 1 view .LVU2630
 8091 029e 0FE0     		b	.L766
 8092              	.LVL904:
 8093              	.L833:
 8094              	.LBB477:
1235:src/display.c **** 
 8095              		.loc 1 1235 6 is_stmt 0 view .LVU2631
 8096 02a0 019A     		ldr	r2, [sp, #4]
 8097 02a2 0A32     		adds	r2, r2, #10
 8098 02a4 FFF7FEFF 		bl	xset
ARM GAS  /tmp/cc1e4Gjl.s 			page 248


 8099              	.LVL905:
1237:src/display.c **** 	  }
 8100              		.loc 1 1237 6 is_stmt 1 view .LVU2632
1237:src/display.c **** 	  }
 8101              		.loc 1 1237 30 is_stmt 0 view .LVU2633
 8102 02a8 B4F12902 		subs	r2, r4, #41
1237:src/display.c **** 	  }
 8103              		.loc 1 1237 8 view .LVU2634
 8104 02ac 019B     		ldr	r3, [sp, #4]
1237:src/display.c **** 	  }
 8105              		.loc 1 1237 30 view .LVU2635
 8106 02ae 48BF     		it	mi
 8107 02b0 A4F12602 		submi	r2, r4, #38
1237:src/display.c **** 	  }
 8108              		.loc 1 1237 8 view .LVU2636
 8109 02b4 A3EBA203 		sub	r3, r3, r2, asr #2
 8110              	.LBE477:
1227:src/display.c **** 	    int extra_pixels;
 8111              		.loc 1 1227 4 view .LVU2637
 8112 02b8 012B     		cmp	r3, #1
 8113              	.LBB478:
1237:src/display.c **** 	  }
 8114              		.loc 1 1237 8 view .LVU2638
 8115 02ba 0193     		str	r3, [sp, #4]
 8116              	.LBE478:
1227:src/display.c **** 	    int extra_pixels;
 8117              		.loc 1 1227 27 is_stmt 1 view .LVU2639
1227:src/display.c **** 	    int extra_pixels;
 8118              		.loc 1 1227 4 is_stmt 0 view .LVU2640
 8119 02bc 7FF7E8AE 		ble	.L728
 8120              	.LVL906:
 8121              	.L766:
 8122              	.LBB479:
1228:src/display.c **** 
 8123              		.loc 1 1228 6 is_stmt 1 view .LVU2641
1230:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
 8124              		.loc 1 1230 6 view .LVU2642
 8125 02c0 01AA     		add	r2, sp, #4
 8126 02c2 3946     		mov	r1, r7
 8127 02c4 02A8     		add	r0, sp, #8
 8128 02c6 FFF7FEFF 		bl	set_x_dn
 8129              	.LVL907:
1231:src/display.c **** 	    if (extra_pixels <= 0)
 8130              		.loc 1 1231 6 view .LVU2643
1231:src/display.c **** 	    if (extra_pixels <= 0)
 8131              		.loc 1 1231 21 is_stmt 0 view .LVU2644
 8132 02ca 0121     		movs	r1, #1
 8133 02cc 2846     		mov	r0, r5
 8134 02ce FFF7FEFF 		bl	pixel_length
 8135              	.LVL908:
1235:src/display.c **** 
 8136              		.loc 1 1235 6 is_stmt 1 view .LVU2645
1231:src/display.c **** 	    if (extra_pixels <= 0)
 8137              		.loc 1 1231 21 is_stmt 0 view .LVU2646
 8138 02d2 0446     		mov	r4, r0
 8139              	.LVL909:
1232:src/display.c **** 	      break;
ARM GAS  /tmp/cc1e4Gjl.s 			page 249


 8140              		.loc 1 1232 6 is_stmt 1 view .LVU2647
1232:src/display.c **** 	      break;
 8141              		.loc 1 1232 9 is_stmt 0 view .LVU2648
 8142 02d4 2C2C     		cmp	r4, #44
1235:src/display.c **** 
 8143              		.loc 1 1235 6 view .LVU2649
 8144 02d6 4FF00001 		mov	r1, #0
 8145 02da 3846     		mov	r0, r7
 8146              	.LVL910:
1232:src/display.c **** 	      break;
 8147              		.loc 1 1232 9 view .LVU2650
 8148 02dc E0DC     		bgt	.L833
 8149              	.LVL911:
1232:src/display.c **** 	      break;
 8150              		.loc 1 1232 9 view .LVU2651
 8151              	.LBE479:
 8152 02de D7E6     		b	.L728
 8153              	.LVL912:
 8154              	.L825:
1232:src/display.c **** 	      break;
 8155              		.loc 1 1232 9 view .LVU2652
 8156              	.LBE474:
1059:src/display.c **** 	  *p = '\024';
 8157              		.loc 1 1059 4 is_stmt 1 view .LVU2653
1059:src/display.c **** 	  *p = '\024';
 8158              		.loc 1 1059 9 is_stmt 0 view .LVU2654
 8159 02e0 2022     		movs	r2, #32
1060:src/display.c **** 	  goto skip;
 8160              		.loc 1 1060 7 view .LVU2655
 8161 02e2 1423     		movs	r3, #20
1059:src/display.c **** 	  *p = '\024';
 8162              		.loc 1 1059 9 view .LVU2656
 8163 02e4 0270     		strb	r2, [r0]
1060:src/display.c **** 	  goto skip;
 8164              		.loc 1 1060 4 is_stmt 1 view .LVU2657
1060:src/display.c **** 	  goto skip;
 8165              		.loc 1 1060 7 is_stmt 0 view .LVU2658
 8166 02e6 4370     		strb	r3, [r0, #1]
1061:src/display.c **** 	}
 8167              		.loc 1 1061 4 is_stmt 1 view .LVU2659
 8168 02e8 D2E6     		b	.L728
 8169              	.L836:
 8170 02ea 00BF     		.align	2
 8171              	.L835:
 8172 02ec 00000000 		.word	.LANCHOR15
 8173 02f0 00000000 		.word	StateWhileOn
 8174 02f4 10000000 		.word	.LC7
 8175 02f8 1C000000 		.word	.LC9
 8176 02fc 00000000 		.word	.LANCHOR18
 8177 0300 00000000 		.word	.LANCHOR16
 8178 0304 00000000 		.word	.LC3
 8179 0308 00000000 		.word	IntMaxWindow
 8180 030c 24000000 		.word	.LC10
 8181 0310 44000000 		.word	.LC17
 8182 0314 00000000 		.word	RectPolConv
 8183 0318 04000000 		.word	.LC4
 8184 031c 0C000000 		.word	.LC6
ARM GAS  /tmp/cc1e4Gjl.s 			page 250


 8185 0320 4C000000 		.word	.LC19
 8186 0324 00000000 		.word	main_ram
 8187 0328 00000000 		.word	ShowRegister
 8188              	.LVL913:
 8189              	.L749:
1128:src/display.c **** 	    q = "\007\207i";
 8190              		.loc 1 1128 4 view .LVU2660
1128:src/display.c **** 	    q = "\007\207i";
 8191              		.loc 1 1128 8 is_stmt 0 view .LVU2661
 8192 032c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1128:src/display.c **** 	    q = "\007\207i";
 8193              		.loc 1 1128 7 view .LVU2662
 8194 032e 13F0C00F 		tst	r3, #192
 8195 0332 1DD1     		bne	.L780
1131:src/display.c **** 	    q = "\007\307<";
 8196              		.loc 1 1131 9 is_stmt 1 view .LVU2663
1131:src/display.c **** 	    q = "\007\307<";
 8197              		.loc 1 1131 23 is_stmt 0 view .LVU2664
 8198 0334 3D4B     		ldr	r3, .L837
 8199 0336 1B68     		ldr	r3, [r3]
1131:src/display.c **** 	    q = "\007\307<";
 8200              		.loc 1 1131 12 view .LVU2665
 8201 0338 012B     		cmp	r3, #1
 8202 033a 6CD0     		beq	.L781
1134:src/display.c **** 	    q = "\007\307y";
 8203              		.loc 1 1134 9 is_stmt 1 view .LVU2666
1134:src/display.c **** 	    q = "\007\307y";
 8204              		.loc 1 1134 12 is_stmt 0 view .LVU2667
 8205 033c 022B     		cmp	r3, #2
 8206 033e 67D0     		beq	.L782
1138:src/display.c **** 	    q = "\007\207\007";
 8207              		.loc 1 1138 9 is_stmt 1 view .LVU2668
1138:src/display.c **** 	    q = "\007\207\007";
 8208              		.loc 1 1138 13 is_stmt 0 view .LVU2669
 8209 0340 FFF7FEFF 		bl	get_trig_mode
 8210              	.LVL914:
1138:src/display.c **** 	    q = "\007\207\007";
 8211              		.loc 1 1138 12 view .LVU2670
 8212 0344 0228     		cmp	r0, #2
 8213 0346 6CD0     		beq	.L783
1144:src/display.c **** #else
 8214              		.loc 1 1144 6 is_stmt 1 view .LVU2671
1144:src/display.c **** #else
 8215              		.loc 1 1144 11 is_stmt 0 view .LVU2672
 8216 0348 FFF7FEFF 		bl	is_dblmode
 8217              	.LVL915:
1144:src/display.c **** #else
 8218              		.loc 1 1144 38 view .LVU2673
 8219 034c 384B     		ldr	r3, .L837+4
 8220 034e 3949     		ldr	r1, .L837+8
 8221 0350 0028     		cmp	r0, #0
 8222 0352 18BF     		it	ne
 8223 0354 1946     		movne	r1, r3
 8224 0356 2846     		mov	r0, r5
 8225 0358 2AE7     		b	.L748
 8226              	.L738:
1050:src/display.c **** 	    *p++ = shift_char;
ARM GAS  /tmp/cc1e4Gjl.s 			page 251


 8227              		.loc 1 1050 30 discriminator 1 view .LVU2674
 8228 035a FFF7FEFF 		bl	is_dblmode
 8229              	.LVL916:
1050:src/display.c **** 	    *p++ = shift_char;
 8230              		.loc 1 1050 26 discriminator 1 view .LVU2675
 8231 035e 0028     		cmp	r0, #0
 8232 0360 3FF46EAE 		beq	.L740
1055:src/display.c **** 	  }
 8233              		.loc 1 1055 6 is_stmt 1 view .LVU2676
 8234              	.LVL917:
1055:src/display.c **** 	  }
 8235              		.loc 1 1055 11 is_stmt 0 view .LVU2677
 8236 0364 4423     		movs	r3, #68
 8237 0366 8DF82C30 		strb	r3, [sp, #44]
1055:src/display.c **** 	  }
 8238              		.loc 1 1055 8 view .LVU2678
 8239 036a 0DF12D00 		add	r0, sp, #45
 8240              	.LVL918:
1055:src/display.c **** 	  }
 8241              		.loc 1 1055 8 view .LVU2679
 8242 036e 6EE6     		b	.L739
 8243              	.LVL919:
 8244              	.L780:
1129:src/display.c **** 	  }
 8245              		.loc 1 1129 8 view .LVU2680
 8246 0370 3149     		ldr	r1, .L837+12
 950:src/display.c ****       int n;
 8247              		.loc 1 950 22 view .LVU2681
 8248 0372 2846     		mov	r0, r5
 8249 0374 1CE7     		b	.L748
 8250              	.LVL920:
 8251              	.L828:
1103:src/display.c **** 	}
 8252              		.loc 1 1103 4 is_stmt 1 view .LVU2682
 8253 0376 3149     		ldr	r1, .L837+16
 8254 0378 2046     		mov	r0, r4
 8255 037a FFF7FEFF 		bl	scopy
 8256              	.LVL921:
 8257 037e 87E6     		b	.L728
 8258              	.LVL922:
 8259              	.L832:
 8260              	.LBB482:
 8261              	.LBB480:
1177:src/display.c **** 
 8262              		.loc 1 1177 8 view .LVU2683
1179:src/display.c **** 	      UState.nothousands = 1;
 8263              		.loc 1 1179 8 is_stmt 0 view .LVU2684
 8264 0380 2A22     		movs	r2, #42
 8265 0382 2846     		mov	r0, r5
1177:src/display.c **** 
 8266              		.loc 1 1177 44 view .LVU2685
 8267 0384 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 8268 0388 2D4C     		ldr	r4, .L837+20
1179:src/display.c **** 	      UState.nothousands = 1;
 8269              		.loc 1 1179 8 view .LVU2686
 8270 038a FFF7FEFF 		bl	xset
 8271              	.LVL923:
ARM GAS  /tmp/cc1e4Gjl.s 			page 252


1180:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8272              		.loc 1 1180 27 view .LVU2687
 8273 038e D8F80020 		ldr	r2, [r8]
 8274 0392 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8275 0396 43F04003 		orr	r3, r3, #64
 8276 039a 82F8E737 		strb	r3, [r2, #2023]
1181:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8277              		.loc 1 1181 8 view .LVU2688
 8278 039e 2946     		mov	r1, r5
 8279 03a0 02A8     		add	r0, sp, #8
 8280 03a2 FFF7FEFF 		bl	set_x_hms
 8281              	.LVL924:
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8282              		.loc 1 1182 27 view .LVU2689
 8283 03a6 D8F80030 		ldr	r3, [r8]
 8284 03aa 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
1177:src/display.c **** 
 8285              		.loc 1 1177 44 view .LVU2690
 8286 03ae C6F38016 		ubfx	r6, r6, #6, #1
 8287              	.LVL925:
1179:src/display.c **** 	      UState.nothousands = 1;
 8288              		.loc 1 1179 8 is_stmt 1 view .LVU2691
1180:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8289              		.loc 1 1180 8 view .LVU2692
1181:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8290              		.loc 1 1181 8 view .LVU2693
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8291              		.loc 1 1182 8 view .LVU2694
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8292              		.loc 1 1182 27 is_stmt 0 view .LVU2695
 8293 03b2 66F38612 		bfi	r2, r6, #6, #1
 8294 03b6 83F8E727 		strb	r2, [r3, #2023]
1187:src/display.c **** 	      while (*p) {
 8295              		.loc 1 1187 8 is_stmt 1 view .LVU2696
 8296              	.LVL926:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8297              		.loc 1 1188 8 view .LVU2697
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8298              		.loc 1 1188 14 view .LVU2698
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8299              		.loc 1 1188 15 is_stmt 0 view .LVU2699
 8300 03ba 4021     		movs	r1, #64
1182:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8301              		.loc 1 1182 27 view .LVU2700
 8302 03bc 0522     		movs	r2, #5
 8303 03be 05E0     		b	.L762
 8304              	.LVL927:
 8305              	.L834:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8306              		.loc 1 1188 15 view .LVU2701
 8307 03c0 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8308              	.LVL928:
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8309              		.loc 1 1188 14 view .LVU2702
 8310 03c4 0029     		cmp	r1, #0
 8311 03c6 3FF463AE 		beq	.L728
 8312 03ca 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cc1e4Gjl.s 			page 253


 8313              	.LVL929:
 8314              	.L762:
1189:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8315              		.loc 1 1189 3 is_stmt 1 view .LVU2703
 8316 03cc 2846     		mov	r0, r5
 8317 03ce FFF7FEFF 		bl	replace_char
 8318              	.LVL930:
1190:src/display.c **** 		  goto skip;
 8319              		.loc 1 1190 3 view .LVU2704
1190:src/display.c **** 		  goto skip;
 8320              		.loc 1 1190 7 is_stmt 0 view .LVU2705
 8321 03d2 0121     		movs	r1, #1
 8322 03d4 2846     		mov	r0, r5
 8323 03d6 FFF7FEFF 		bl	pixel_length
 8324              	.LVL931:
1193:src/display.c **** 	      }
 8325              		.loc 1 1193 3 is_stmt 1 view .LVU2706
1188:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8326              		.loc 1 1188 14 view .LVU2707
1190:src/display.c **** 		  goto skip;
 8327              		.loc 1 1190 6 is_stmt 0 view .LVU2708
 8328 03da 2C28     		cmp	r0, #44
 8329 03dc F0DC     		bgt	.L834
 8330 03de 57E6     		b	.L728
 8331              	.LVL932:
 8332              	.L831:
1190:src/display.c **** 		  goto skip;
 8333              		.loc 1 1190 6 view .LVU2709
 8334              	.LBE480:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8335              		.loc 1 1172 75 discriminator 2 view .LVU2710
 8336 03e0 FFF7FEFF 		bl	stack_size
 8337              	.LVL933:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8338              		.loc 1 1172 62 discriminator 2 view .LVU2711
 8339 03e4 D9F80010 		ldr	r1, [r9]
 8340 03e8 6330     		adds	r0, r0, #99
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8341              		.loc 1 1172 46 discriminator 2 view .LVU2712
 8342 03ea 8842     		cmp	r0, r1
 8343 03ec FFF60AAF 		blt	.L753
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8344              		.loc 1 1172 91 discriminator 4 view .LVU2713
 8345 03f0 FFF7FEFF 		bl	get_cmdline
 8346              	.LVL934:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8347              		.loc 1 1172 88 discriminator 4 view .LVU2714
 8348 03f4 18B1     		cbz	r0, .L756
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8349              		.loc 1 1173 7 view .LVU2715
 8350 03f6 8EB1     		cbz	r6, .L755
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8351              		.loc 1 1173 28 discriminator 1 view .LVU2716
 8352 03f8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8353              		.loc 1 1173 10 discriminator 1 view .LVU2717
 8354 03fa 5B06     		lsls	r3, r3, #25
ARM GAS  /tmp/cc1e4Gjl.s 			page 254


 8355 03fc 0ED4     		bmi	.L755
 8356              	.L756:
 8357 03fe D9F80010 		ldr	r1, [r9]
 8358 0402 FFE6     		b	.L753
 8359              	.LVL935:
 8360              	.L778:
1173:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8361              		.loc 1 1173 10 discriminator 1 view .LVU2718
 8362              	.LBE482:
1092:src/display.c **** #endif
 8363              		.loc 1 1092 19 view .LVU2719
 8364 0404 0F49     		ldr	r1, .L837+24
 8365 0406 3BE6     		b	.L746
 8366              	.LVL936:
 8367              	.L821:
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8368              		.loc 1 1028 4 is_stmt 1 view .LVU2720
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8369              		.loc 1 1028 11 is_stmt 0 view .LVU2721
 8370 0408 0193     		str	r3, [sp, #4]
1028:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8371              		.loc 1 1028 27 is_stmt 1 view .LVU2722
 8372 040a B8E6     		b	.L773
 8373              	.LVL937:
 8374              	.L776:
1071:src/display.c **** 	  }
 8375              		.loc 1 1071 8 is_stmt 0 view .LVU2723
 8376 040c 0A49     		ldr	r1, .L837+12
 8377 040e EEE6     		b	.L744
 8378              	.LVL938:
 8379              	.L782:
1135:src/display.c **** 	  }
 8380              		.loc 1 1135 8 view .LVU2724
 8381 0410 0D49     		ldr	r1, .L837+28
 950:src/display.c ****       int n;
 8382              		.loc 1 950 22 view .LVU2725
 8383 0412 2846     		mov	r0, r5
 8384 0414 CCE6     		b	.L748
 8385              	.L781:
1132:src/display.c **** 	  }
 8386              		.loc 1 1132 8 view .LVU2726
 8387 0416 0D49     		ldr	r1, .L837+32
 950:src/display.c ****       int n;
 8388              		.loc 1 950 22 view .LVU2727
 8389 0418 2846     		mov	r0, r5
 8390 041a C9E6     		b	.L748
 8391              	.LVL939:
 8392              	.L755:
 8393              	.LBB483:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8394              		.loc 1 1172 4 discriminator 7 view .LVU2728
 8395 041c D9F80010 		ldr	r1, [r9]
 8396 0420 F1E6     		b	.L757
 8397              	.LVL940:
 8398              	.L783:
1172:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8399              		.loc 1 1172 4 discriminator 7 view .LVU2729
ARM GAS  /tmp/cc1e4Gjl.s 			page 255


 8400              	.LBE483:
1139:src/display.c **** 	  }
 8401              		.loc 1 1139 8 view .LVU2730
 8402 0422 0B49     		ldr	r1, .L837+36
 950:src/display.c ****       int n;
 8403              		.loc 1 950 22 view .LVU2731
 8404 0424 2846     		mov	r0, r5
 8405 0426 C3E6     		b	.L748
 8406              	.LVL941:
 8407              	.L785:
 8408              	.LBB484:
 8409              	.LBB481:
1211:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8410              		.loc 1 1211 25 view .LVU2732
 8411 0428 3E26     		movs	r6, #62
 8412              	.LVL942:
1211:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8413              		.loc 1 1211 25 view .LVU2733
 8414 042a 1AE7     		b	.L764
 8415              	.L838:
 8416              		.align	2
 8417              	.L837:
 8418 042c 00000000 		.word	RectPolConv
 8419 0430 30000000 		.word	.LC13
 8420 0434 38000000 		.word	.LC15
 8421 0438 08000000 		.word	.LC5
 8422 043c 3C000000 		.word	.LC16
 8423 0440 00000000 		.word	.LANCHOR17
 8424 0444 14000000 		.word	.LC8
 8425 0448 28000000 		.word	.LC11
 8426 044c 34000000 		.word	.LC14
 8427 0450 2C000000 		.word	.LC12
 8428              	.LBE481:
 8429              	.LBE484:
 8430              		.cfi_endproc
 8431              	.LFE16:
 8433              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8434              		.align	2
 8435              	.LC20:
 8436 0000 0D00     		.ascii	"\015\000"
 8437 0002 0000     		.align	2
 8438              	.LC21:
 8439 0004 060600   		.ascii	"\006\006\000"
 8440 0007 00       		.align	2
 8441              	.LC23:
 8442 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8442      492C2057 
 8442      77414C74 
 8442      4500
 8443 0016 0000     		.align	2
 8444              	.LC24:
 8445 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8445      2055204C 
 8445      20492C20 
 8445      20572041 
 8445      204C2054 
 8446 0032 0000     		.align	2
ARM GAS  /tmp/cc1e4Gjl.s 			page 256


 8447              	.LC25:
 8448 0034 2000     		.ascii	" \000"
 8449 0036 0000     		.align	2
 8450              	.LC26:
 8451 0038 48595000 		.ascii	"HYP\000"
 8452              		.align	2
 8453              	.LC27:
 8454 003c 7F060600 		.ascii	"\177\006\006\000"
 8455              		.align	2
 8456              	.LC30:
 8457 0040 3020746F 		.ascii	"0 to 255\000"
 8457      20323535 
 8457      00
 8458 0049 000000   		.align	2
 8459              	.LC31:
 8460 004c 46726565 		.ascii	"Free:\000"
 8460      3A00
 8461 0052 0000     		.align	2
 8462              	.LC32:
 8463 0054 202C2046 		.ascii	" , FL. \000"
 8463      4C2E2000 
 8464              		.align	2
 8465              	.LC33:
 8466 005c 52656773 		.ascii	"Regs:\000"
 8466      3A00
 8467 0062 0000     		.align	2
 8468              	.LC34:
 8469 0064 20910606 		.ascii	" \221\006\006+\000"
 8469      2B00
 8470 006a 0000     		.align	2
 8471              	.LC35:
 8472 006c 202C204C 		.ascii	" , Loc. \000"
 8472      6F632E20 
 8472      00
 8473 0075 000000   		.align	2
 8474              	.LC36:
 8475 0078 464C2000 		.ascii	"FL \000"
 8476              		.align	2
 8477              	.LC37:
 8478 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8478      06413A44 
 8478      064C494A 
 8478      4B00
 8479 008a 0000     		.align	2
 8480              	.LC38:
 8481 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8481      302D2E31 
 8481      3500
 8482 0096 0000     		.align	2
 8483              	.LC39:
 8484 0098 43414C4C 		.ascii	"CALLS\000"
 8484      5300
 8485 009e 0000     		.align	2
 8486              	.LC40:
 8487 00a0 52656720 		.ascii	"Reg \000"
 8487      00
 8488 00a5 000000   		.align	2
ARM GAS  /tmp/cc1e4Gjl.s 			page 257


 8489              	.LC41:
 8490 00a8 00       		.ascii	"\000"
 8491 00a9 000000   		.align	2
 8492              	.LC42:
 8493 00ac 202D2D2D 		.ascii	" ---\000"
 8493      00
 8494 00b1 000000   		.align	2
 8495              	.LC29:
 8496 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8496      093E0A00 
 8497              		.align	2
 8498              	.LC28:
 8499 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8499      41424344 
 8499      4C494A4B 
 8499      00
 8500              		.section	.text.display,"ax",%progbits
 8501              		.align	1
 8502              		.p2align 2,,3
 8503              		.global	display
 8504              		.syntax unified
 8505              		.thumb
 8506              		.thumb_func
 8507              		.fpu fpv4-sp-d16
 8509              	display:
 8510              	.LFB34:
2969:src/display.c **** 	int i, j;
 8511              		.loc 1 2969 26 is_stmt 1 view -0
 8512              		.cfi_startproc
 8513              		@ args = 0, pretend = 0, frame = 160
 8514              		@ frame_needed = 0, uses_anonymous_args = 0
2970:src/display.c **** 	char buf[40], *bp = buf;
 8515              		.loc 1 2970 2 view .LVU2735
2971:src/display.c **** 	const char *p;
 8516              		.loc 1 2971 2 view .LVU2736
2969:src/display.c **** 	int i, j;
 8517              		.loc 1 2969 26 is_stmt 0 view .LVU2737
 8518 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8519              		.cfi_def_cfa_offset 36
 8520              		.cfi_offset 4, -36
 8521              		.cfi_offset 5, -32
 8522              		.cfi_offset 6, -28
 8523              		.cfi_offset 7, -24
 8524              		.cfi_offset 8, -20
 8525              		.cfi_offset 9, -16
 8526              		.cfi_offset 10, -12
 8527              		.cfi_offset 11, -8
 8528              		.cfi_offset 14, -4
2974:src/display.c **** 	int skip = 0;
 8529              		.loc 1 2974 24 view .LVU2738
 8530 0004 BE4C     		ldr	r4, .L1135
2969:src/display.c **** 	int i, j;
 8531              		.loc 1 2969 26 view .LVU2739
 8532 0006 A9B0     		sub	sp, sp, #164
 8533              		.cfi_def_cfa_offset 200
 8534              	.LVL943:
2972:src/display.c **** 	int annuc = 0;
ARM GAS  /tmp/cc1e4Gjl.s 			page 258


 8535              		.loc 1 2972 2 is_stmt 1 view .LVU2740
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8536              		.loc 1 2973 2 view .LVU2741
2974:src/display.c **** 	int skip = 0;
 8537              		.loc 1 2974 2 view .LVU2742
2974:src/display.c **** 	int skip = 0;
 8538              		.loc 1 2974 24 is_stmt 0 view .LVU2743
 8539 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8540              	.LVL944:
2975:src/display.c **** 	int x_disp = 0;
 8541              		.loc 1 2975 2 is_stmt 1 view .LVU2744
2976:src/display.c **** 	const int shift = cur_shift();
 8542              		.loc 1 2976 2 view .LVU2745
2977:src/display.c **** 
 8543              		.loc 1 2977 2 view .LVU2746
2977:src/display.c **** 
 8544              		.loc 1 2977 20 is_stmt 0 view .LVU2747
 8545 000c FFF7FEFF 		bl	cur_shift
 8546              	.LVL945:
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8547              		.loc 1 2981 6 view .LVU2748
 8548 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8549              	.LVL946:
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8550              		.loc 1 2981 2 is_stmt 1 view .LVU2749
2981:src/display.c **** 	  State2.disp_freeze = 0;
 8551              		.loc 1 2981 5 is_stmt 0 view .LVU2750
 8552 0012 13F01006 		ands	r6, r3, #16
 8553 0016 40F08C80 		bne	.L1095
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8554              		.loc 1 2991 2 is_stmt 1 view .LVU2751
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8555              		.loc 1 2991 6 is_stmt 0 view .LVU2752
 8556 001a BA4F     		ldr	r7, .L1135+4
 8557 001c 3D68     		ldr	r5, [r7]
2991:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8558              		.loc 1 2991 5 view .LVU2753
 8559 001e 002D     		cmp	r5, #0
 8560 0020 50D1     		bne	.L1096
3008:src/display.c **** 
 8561              		.loc 1 3008 2 is_stmt 1 view .LVU2754
 8562 0022 8246     		mov	r10, r0
 8563 0024 FFF7FEFF 		bl	reset_disp
 8564              	.LVL947:
3010:src/display.c **** 	if (State2.cmplx  && !cata) {
 8565              		.loc 1 3010 2 view .LVU2755
 8566 0028 1EA8     		add	r0, sp, #120
 8567              	.LVL948:
3010:src/display.c **** 	if (State2.cmplx  && !cata) {
 8568              		.loc 1 3010 2 is_stmt 0 view .LVU2756
 8569 002a 2822     		movs	r2, #40
 8570 002c 2946     		mov	r1, r5
 8571 002e FFF7FEFF 		bl	xset
 8572              	.LVL949:
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8573              		.loc 1 3011 2 is_stmt 1 view .LVU2757
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
ARM GAS  /tmp/cc1e4Gjl.s 			page 259


 8574              		.loc 1 3011 6 is_stmt 0 view .LVU2758
 8575 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8576              		.loc 1 3011 5 view .LVU2759
 8577 0034 9E07     		lsls	r6, r3, #30
 8578 0036 03D5     		bpl	.L976
3011:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8579              		.loc 1 3011 20 discriminator 1 view .LVU2760
 8580 0038 B9F1000F 		cmp	r9, #0
 8581 003c 00F0EB80 		beq	.L1097
 8582              	.L976:
2971:src/display.c **** 	const char *p;
 8583              		.loc 1 2971 17 view .LVU2761
 8584 0040 0DF17808 		add	r8, sp, #120
 8585              	.LVL950:
 8586              	.L845:
3015:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8587              		.loc 1 3015 2 is_stmt 1 view .LVU2762
3015:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8588              		.loc 1 3015 5 is_stmt 0 view .LVU2763
 8589 0044 D806     		lsls	r0, r3, #27
 8590 0046 00F17B81 		bmi	.L1098
3027:src/display.c **** 	  set_status(S_SURE);
 8591              		.loc 1 3027 9 is_stmt 1 view .LVU2764
3027:src/display.c **** 	  set_status(S_SURE);
 8592              		.loc 1 3027 13 is_stmt 0 view .LVU2765
 8593 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
3027:src/display.c **** 	  set_status(S_SURE);
 8594              		.loc 1 3027 12 view .LVU2766
 8595 004c 5107     		lsls	r1, r2, #29
 8596 004e 40F0F380 		bne	.L1099
3029:src/display.c **** 	  bp = scopy(bp, "HYP");
 8597              		.loc 1 3029 9 is_stmt 1 view .LVU2767
3029:src/display.c **** 	  bp = scopy(bp, "HYP");
 8598              		.loc 1 3029 12 is_stmt 0 view .LVU2768
 8599 0052 9A06     		lsls	r2, r3, #26
 8600 0054 00F1C680 		bmi	.L1100
3034:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8601              		.loc 1 3034 9 is_stmt 1 view .LVU2769
3034:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8602              		.loc 1 3034 12 is_stmt 0 view .LVU2770
 8603 0058 DE07     		lsls	r6, r3, #31
 8604 005a 00F1DC81 		bmi	.L1101
3042:src/display.c **** 	  /* Commands with arguments */
 8605              		.loc 1 3042 9 is_stmt 1 view .LVU2771
3042:src/display.c **** 	  /* Commands with arguments */
 8606              		.loc 1 3042 13 is_stmt 0 view .LVU2772
 8607 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
3042:src/display.c **** 	  /* Commands with arguments */
 8608              		.loc 1 3042 12 view .LVU2773
 8609 0060 8806     		lsls	r0, r1, #26
 8610 0062 40F1B081 		bpl	.L855
3045:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8611              		.loc 1 3045 4 is_stmt 1 view .LVU2774
3045:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8612              		.loc 1 3045 8 is_stmt 0 view .LVU2775
 8613 0066 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
ARM GAS  /tmp/cc1e4Gjl.s 			page 260


3045:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8614              		.loc 1 3045 7 view .LVU2776
 8615 0068 4D2A     		cmp	r2, #77
 8616 006a 00F04082 		beq	.L856
3045:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8617              		.loc 1 3045 28 discriminator 1 view .LVU2777
 8618 006e 02F17303 		add	r3, r2, #115
 8619 0072 DBB2     		uxtb	r3, r3
 8620 0074 012B     		cmp	r3, #1
 8621 0076 40F23A82 		bls	.L856
 8622              	.L857:
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8623              		.loc 1 3048 4 is_stmt 1 view .LVU2778
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8624              		.loc 1 3048 35 is_stmt 0 view .LVU2779
 8625 007a A349     		ldr	r1, .L1135+8
 8626 007c 0623     		movs	r3, #6
 8627 007e 03EB0213 		add	r3, r3, r2, lsl #4
3048:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8628              		.loc 1 3048 9 view .LVU2780
 8629 0082 1944     		add	r1, r1, r3
 8630 0084 4046     		mov	r0, r8
 8631 0086 FFF7FEFF 		bl	scopy
 8632              	.LVL951:
3049:src/display.c **** 	  if (State2.dot) {
 8633              		.loc 1 3049 4 is_stmt 1 view .LVU2781
3049:src/display.c **** 	  if (State2.dot) {
 8634              		.loc 1 3049 9 is_stmt 0 view .LVU2782
 8635 008a A04A     		ldr	r2, .L1135+12
 8636 008c A04B     		ldr	r3, .L1135+16
 8637 008e 94F91510 		ldrsb	r1, [r4, #21]
 8638 0092 12EA2101 		ands	r1, r2, r1, asr #32
 8639 0096 38BF     		it	cc
 8640 0098 1946     		movcc	r1, r3
 8641 009a FFF7FEFF 		bl	scopy
 8642              	.LVL952:
3050:src/display.c **** 	    *bp++ = 's';
 8643              		.loc 1 3050 8 view .LVU2783
 8644 009e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8645              	.LVL953:
3050:src/display.c **** 	    *bp++ = 's';
 8646              		.loc 1 3050 4 is_stmt 1 view .LVU2784
3050:src/display.c **** 	    *bp++ = 's';
 8647              		.loc 1 3050 7 is_stmt 0 view .LVU2785
 8648 00a0 5A06     		lsls	r2, r3, #25
 8649 00a2 40F1DD82 		bpl	.L859
3051:src/display.c **** 	    *bp++ = '_';
 8650              		.loc 1 3051 6 is_stmt 1 view .LVU2786
 8651              	.LVL954:
3051:src/display.c **** 	    *bp++ = '_';
 8652              		.loc 1 3051 12 is_stmt 0 view .LVU2787
 8653 00a6 7322     		movs	r2, #115
 8654              	.LVL955:
 8655              	.L1086:
3055:src/display.c **** 	  } else {
 8656              		.loc 1 3055 12 view .LVU2788
 8657 00a8 5F23     		movs	r3, #95
ARM GAS  /tmp/cc1e4Gjl.s 			page 261


 8658 00aa 9A4E     		ldr	r6, .L1135+20
 8659 00ac DFF88482 		ldr	r8, .L1135+52
3054:src/display.c **** 	    *bp++ = '_';
 8660              		.loc 1 3054 12 view .LVU2789
 8661 00b0 0270     		strb	r2, [r0]
3055:src/display.c **** 	  } else {
 8662              		.loc 1 3055 6 is_stmt 1 view .LVU2790
3055:src/display.c **** 	  } else {
 8663              		.loc 1 3055 12 is_stmt 0 view .LVU2791
 8664 00b2 4370     		strb	r3, [r0, #1]
 8665              	.L852:
3033:src/display.c **** 	} else if (State2.gtodot) {
 8666              		.loc 1 3033 4 is_stmt 1 view .LVU2792
 8667 00b4 1EA8     		add	r0, sp, #120
 8668 00b6 FFF7FEFF 		bl	set_status
 8669              	.LVL956:
3216:src/display.c ****       nostk:	show_flags();
 8670              		.loc 1 3216 2 view .LVU2793
 8671 00ba FFF7FEFF 		bl	show_stack
 8672              	.LVL957:
3217:src/display.c **** 	if (!skip) {
 8673              		.loc 1 3217 14 view .LVU2794
 8674 00be FFF7FEFF 		bl	show_flags
 8675              	.LVL958:
3218:src/display.c **** 	  if (State2.runmode) {
 8676              		.loc 1 3218 2 view .LVU2795
 8677 00c2 C3E0     		b	.L849
 8678              	.LVL959:
 8679              	.L1096:
2998:src/display.c **** 
 8680              		.loc 1 2998 4 view .LVU2796
 8681 00c4 FFF7FEFF 		bl	wait_for_display
 8682              	.LVL960:
3001:src/display.c **** 	    clr_dot(i);
 8683              		.loc 1 3001 4 view .LVU2797
3001:src/display.c **** 	    clr_dot(i);
 8684              		.loc 1 3001 16 view .LVU2798
 8685              	.L843:
3002:src/display.c **** 	  }
 8686              		.loc 1 3002 6 discriminator 3 view .LVU2799
 8687 00c8 3046     		mov	r0, r6
3001:src/display.c **** 	    clr_dot(i);
 8688              		.loc 1 3001 31 is_stmt 0 discriminator 3 view .LVU2800
 8689 00ca 0136     		adds	r6, r6, #1
 8690              	.LVL961:
3002:src/display.c **** 	  }
 8691              		.loc 1 3002 6 discriminator 3 view .LVU2801
 8692 00cc FFF7FEFF 		bl	clr_dot
 8693              	.LVL962:
3001:src/display.c **** 	    clr_dot(i);
 8694              		.loc 1 3001 31 is_stmt 1 discriminator 3 view .LVU2802
3001:src/display.c **** 	    clr_dot(i);
 8695              		.loc 1 3001 16 discriminator 3 view .LVU2803
3001:src/display.c **** 	    clr_dot(i);
 8696              		.loc 1 3001 4 is_stmt 0 discriminator 3 view .LVU2804
 8697 00d0 832E     		cmp	r6, #131
 8698 00d2 F9D1     		bne	.L843
ARM GAS  /tmp/cc1e4Gjl.s 			page 262


 8699 00d4 8F4E     		ldr	r6, .L1135+20
 8700              	.LVL963:
3001:src/display.c **** 	    clr_dot(i);
 8701              		.loc 1 3001 4 discriminator 3 view .LVU2805
 8702 00d6 DFF85C82 		ldr	r8, .L1135+52
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8703              		.loc 1 2973 6 view .LVU2806
 8704 00da 0025     		movs	r5, #0
 8705              	.LVL964:
 8706              	.L844:
3221:src/display.c **** 	    if (p == NULL || cata) {
 8707              		.loc 1 3221 6 is_stmt 1 view .LVU2807
3221:src/display.c **** 	    if (p == NULL || cata) {
 8708              		.loc 1 3221 10 is_stmt 0 view .LVU2808
 8709 00dc FFF7FEFF 		bl	get_cmdline
 8710              	.LVL965:
3222:src/display.c **** 	      if (ShowRegister != -1) {
 8711              		.loc 1 3222 6 is_stmt 1 view .LVU2809
3222:src/display.c **** 	      if (ShowRegister != -1) {
 8712              		.loc 1 3222 9 is_stmt 0 view .LVU2810
 8713 00e0 8246     		mov	r10, r0
 8714 00e2 10B1     		cbz	r0, .L927
3222:src/display.c **** 	      if (ShowRegister != -1) {
 8715              		.loc 1 3222 20 discriminator 1 view .LVU2811
 8716 00e4 B9F1000F 		cmp	r9, #0
 8717 00e8 2ED0     		beq	.L928
 8718              	.L927:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8719              		.loc 1 3223 8 is_stmt 1 view .LVU2812
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8720              		.loc 1 3223 25 is_stmt 0 view .LVU2813
 8721 00ea DFF84C92 		ldr	r9, .L1135+56
 8722              	.LVL966:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8723              		.loc 1 3223 25 view .LVU2814
 8724 00ee D9F80000 		ldr	r0, [r9]
 8725              	.LVL967:
3223:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8726              		.loc 1 3223 11 view .LVU2815
 8727 00f2 421C     		adds	r2, r0, #1
 8728 00f4 00F05181 		beq	.L929
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8729              		.loc 1 3224 3 is_stmt 1 view .LVU2816
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8730              		.loc 1 3224 39 is_stmt 0 view .LVU2817
 8731 00f8 6428     		cmp	r0, #100
 8732 00fa 00F08180 		beq	.L1102
 8733              	.L930:
3225:src/display.c **** 	      }
 8734              		.loc 1 3225 3 is_stmt 1 view .LVU2818
 8735 00fe 0021     		movs	r1, #0
 8736 0100 FFF7FEFF 		bl	format_reg
 8737              	.LVL968:
3233:src/display.c **** 	      goto finish;
 8738              		.loc 1 3233 6 view .LVU2819
3233:src/display.c **** 	      goto finish;
 8739              		.loc 1 3233 9 is_stmt 0 view .LVU2820
ARM GAS  /tmp/cc1e4Gjl.s 			page 263


 8740 0104 3B68     		ldr	r3, [r7]
 8741 0106 002B     		cmp	r3, #0
 8742 0108 00F0F680 		beq	.L1092
 8743              	.LVL969:
 8744              	.L933:
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8745              		.loc 1 3286 2 is_stmt 1 view .LVU2821
3287:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8746              		.loc 1 3287 2 view .LVU2822
3288:src/display.c **** 	State2.invalid_disp = 0;
 8747              		.loc 1 3288 2 view .LVU2823
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8748              		.loc 1 3286 17 is_stmt 0 view .LVU2824
 8749 010c 6369     		ldr	r3, [r4, #20]
 8750 010e 23F02173 		bic	r3, r3, #42205184
 8751 0112 23F48053 		bic	r3, r3, #4096
3288:src/display.c **** 	State2.invalid_disp = 0;
 8752              		.loc 1 3288 15 view .LVU2825
 8753 0116 0022     		movs	r2, #0
3286:src/display.c **** 	State2.disp_as_alpha = 0;
 8754              		.loc 1 3286 17 view .LVU2826
 8755 0118 6361     		str	r3, [r4, #20]
3290:src/display.c **** 	DispMsg = CNULL;
 8756              		.loc 1 3290 15 view .LVU2827
 8757 011a 6423     		movs	r3, #100
3288:src/display.c **** 	State2.invalid_disp = 0;
 8758              		.loc 1 3288 15 view .LVU2828
 8759 011c 6274     		strb	r2, [r4, #17]
3289:src/display.c **** 	ShowRegister = regX_idx;
 8760              		.loc 1 3289 2 is_stmt 1 view .LVU2829
3290:src/display.c **** 	DispMsg = CNULL;
 8761              		.loc 1 3290 2 view .LVU2830
3291:src/display.c **** 	DispPlot = 0;
 8762              		.loc 1 3291 10 is_stmt 0 view .LVU2831
 8763 011e 3260     		str	r2, [r6]
3292:src/display.c **** 	State2.disp_small = 0;
 8764              		.loc 1 3292 11 view .LVU2832
 8765 0120 A8F80020 		strh	r2, [r8]	@ movhi
3290:src/display.c **** 	DispMsg = CNULL;
 8766              		.loc 1 3290 15 view .LVU2833
 8767 0124 C9F80030 		str	r3, [r9]
3291:src/display.c **** 	DispPlot = 0;
 8768              		.loc 1 3291 2 is_stmt 1 view .LVU2834
3292:src/display.c **** 	State2.disp_small = 0;
 8769              		.loc 1 3292 2 view .LVU2835
3293:src/display.c **** 	finish_display();
 8770              		.loc 1 3293 2 view .LVU2836
3294:src/display.c **** #ifdef CONSOLE
 8771              		.loc 1 3294 2 view .LVU2837
 8772 0128 FFF7FEFF 		bl	finish_display
 8773              	.LVL970:
3298:src/display.c **** #endif
 8774              		.loc 1 3298 7 is_stmt 0 view .LVU2838
 8775 012c 29B0     		add	sp, sp, #164
 8776              		.cfi_remember_state
 8777              		.cfi_def_cfa_offset 36
 8778              		@ sp needed
ARM GAS  /tmp/cc1e4Gjl.s 			page 264


 8779 012e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8780              	.LVL971:
 8781              	.L1095:
 8782              		.cfi_restore_state
2982:src/display.c **** 	  State2.disp_temp = 1;
 8783              		.loc 1 2982 4 is_stmt 1 view .LVU2839
2983:src/display.c **** #ifdef CONSOLE
 8784              		.loc 1 2983 4 view .LVU2840
2987:src/display.c **** 	  return;
 8785              		.loc 1 2987 12 is_stmt 0 view .LVU2841
 8786 0132 794A     		ldr	r2, .L1135+24
2982:src/display.c **** 	  State2.disp_temp = 1;
 8787              		.loc 1 2982 23 view .LVU2842
 8788 0134 23F03003 		bic	r3, r3, #48
 8789 0138 43F02003 		orr	r3, r3, #32
2987:src/display.c **** 	  return;
 8790              		.loc 1 2987 12 view .LVU2843
 8791 013c 0021     		movs	r1, #0
2982:src/display.c **** 	  State2.disp_temp = 1;
 8792              		.loc 1 2982 23 view .LVU2844
 8793 013e E375     		strb	r3, [r4, #23]
2987:src/display.c **** 	  return;
 8794              		.loc 1 2987 4 is_stmt 1 view .LVU2845
2987:src/display.c **** 	  return;
 8795              		.loc 1 2987 12 is_stmt 0 view .LVU2846
 8796 0140 1160     		str	r1, [r2]
2988:src/display.c **** 	}
 8797              		.loc 1 2988 4 is_stmt 1 view .LVU2847
3298:src/display.c **** #endif
 8798              		.loc 1 3298 7 is_stmt 0 view .LVU2848
 8799 0142 29B0     		add	sp, sp, #164
 8800              		.cfi_remember_state
 8801              		.cfi_def_cfa_offset 36
 8802              		@ sp needed
 8803 0144 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8804              	.LVL972:
 8805              	.L928:
 8806              		.cfi_restore_state
3230:src/display.c **** 	      x_disp = 1;
 8807              		.loc 1 3230 8 is_stmt 1 view .LVU2849
 8808              	.LBB528:
 8809              	.LBI528:
1245:src/display.c ****       int i;
 8810              		.loc 1 1245 17 view .LVU2850
 8811              	.LBB529:
1246:src/display.c ****       int gotdot = -1;
 8812              		.loc 1 1246 7 view .LVU2851
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8813              		.loc 1 1247 7 view .LVU2852
1249:src/display.c **** #endif
 8814              		.loc 1 1249 7 view .LVU2853
1253:src/display.c **** #endif
 8815              		.loc 1 1253 7 view .LVU2854
1256:src/display.c **** 	SET_MANT_SIGN;
 8816              		.loc 1 1256 7 view .LVU2855
1256:src/display.c **** 	SET_MANT_SIGN;
 8817              		.loc 1 1256 10 is_stmt 0 view .LVU2856
ARM GAS  /tmp/cc1e4Gjl.s 			page 265


 8818 0148 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8819 014a 2D2B     		cmp	r3, #45
 8820 014c 00F0AB82 		beq	.L1103
 8821              	.LVL973:
 8822              	.L934:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8823              		.loc 1 1261 7 is_stmt 1 view .LVU2857
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8824              		.loc 1 1261 11 is_stmt 0 view .LVU2858
 8825 0150 724B     		ldr	r3, .L1135+28
 8826 0152 1B68     		ldr	r3, [r3]
 8827 0154 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8828              		.loc 1 1261 10 view .LVU2859
 8829 0158 13F00109 		ands	r9, r3, #1
 8830              	.LVL974:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8831              		.loc 1 1261 10 view .LVU2860
 8832 015c 00F0CE81 		beq	.L935
 8833              	.LVL975:
1262:src/display.c **** 	  set_dig(i, *p);
 8834              		.loc 1 1262 12 is_stmt 1 view .LVU2861
 8835 0160 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1262:src/display.c **** 	  set_dig(i, *p);
 8836              		.loc 1 1262 8 is_stmt 0 view .LVU2862
 8837 0164 4FF00009 		mov	r9, #0
1262:src/display.c **** 	  set_dig(i, *p);
 8838              		.loc 1 1262 2 view .LVU2863
 8839 0168 41B1     		cbz	r1, .L939
 8840              	.LVL976:
 8841              	.L936:
1263:src/display.c **** 	  i += SEGS_PER_DIGIT;
 8842              		.loc 1 1263 4 is_stmt 1 view .LVU2864
 8843 016a 4846     		mov	r0, r9
 8844 016c FFF7FEFF 		bl	set_dig
 8845              	.LVL977:
1264:src/display.c **** 	}
 8846              		.loc 1 1264 4 view .LVU2865
1262:src/display.c **** 	  set_dig(i, *p);
 8847              		.loc 1 1262 12 is_stmt 0 view .LVU2866
 8848 0170 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8849              	.LVL978:
1264:src/display.c **** 	}
 8850              		.loc 1 1264 6 view .LVU2867
 8851 0174 09F10909 		add	r9, r9, #9
 8852              	.LVL979:
1262:src/display.c **** 	  set_dig(i, *p);
 8853              		.loc 1 1262 24 is_stmt 1 view .LVU2868
1262:src/display.c **** 	  set_dig(i, *p);
 8854              		.loc 1 1262 12 view .LVU2869
1262:src/display.c **** 	  set_dig(i, *p);
 8855              		.loc 1 1262 2 is_stmt 0 view .LVU2870
 8856 0178 0029     		cmp	r1, #0
 8857 017a F6D1     		bne	.L936
 8858              	.LVL980:
 8859              	.L939:
1266:src/display.c ****       } else {
ARM GAS  /tmp/cc1e4Gjl.s 			page 266


 8860              		.loc 1 1266 2 is_stmt 1 view .LVU2871
 8861 017c FFF7FEFF 		bl	carry_overflow
 8862              	.LVL981:
1266:src/display.c ****       } else {
 8863              		.loc 1 1266 2 is_stmt 0 view .LVU2872
 8864              	.LBE529:
 8865              	.LBE528:
3233:src/display.c **** 	      goto finish;
 8866              		.loc 1 3233 6 is_stmt 1 view .LVU2873
3233:src/display.c **** 	      goto finish;
 8867              		.loc 1 3233 9 is_stmt 0 view .LVU2874
 8868 0180 3B68     		ldr	r3, [r7]
 8869 0182 DFF8B491 		ldr	r9, .L1135+56
 8870 0186 002B     		cmp	r3, #0
 8871 0188 C0D1     		bne	.L933
 8872              	.LVL982:
 8873              	.L938:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8874              		.loc 1 3263 2 is_stmt 1 view .LVU2875
 8875 018a FFF7FEFF 		bl	set_annunciators
 8876              	.LVL983:
3264:src/display.c **** 	  ShowRPN = 0;
 8877              		.loc 1 3264 2 view .LVU2876
3264:src/display.c **** 	  ShowRPN = 0;
 8878              		.loc 1 3264 50 is_stmt 0 view .LVU2877
 8879 018e 3368     		ldr	r3, [r6]
 8880 0190 002B     		cmp	r3, #0
 8881 0192 00F00A81 		beq	.L1104
 8882              	.LVL984:
 8883              	.L847:
3265:src/display.c **** 	  dot(RPN, 0);
 8884              		.loc 1 3265 4 is_stmt 1 view .LVU2878
3265:src/display.c **** 	  dot(RPN, 0);
 8885              		.loc 1 3265 12 is_stmt 0 view .LVU2879
 8886 0196 604F     		ldr	r7, .L1135+24
 8887 0198 0023     		movs	r3, #0
 8888              	.LBB550:
 8889              	.LBB551:
 341:src/display.c **** }
 8890              		.loc 1 341 8 view .LVU2880
 8891 019a 8D20     		movs	r0, #141
 8892              	.LBE551:
 8893              	.LBE550:
3265:src/display.c **** 	  dot(RPN, 0);
 8894              		.loc 1 3265 12 view .LVU2881
 8895 019c 3B60     		str	r3, [r7]
3266:src/display.c **** 	}
 8896              		.loc 1 3266 4 is_stmt 1 view .LVU2882
 8897              	.LVL985:
 8898              	.LBB553:
 8899              	.LBI550:
 339:src/display.c ****   if (on)	set_dot(n);
 8900              		.loc 1 339 6 view .LVU2883
 8901              	.LBB552:
 340:src/display.c ****   else	clr_dot(n);
 8902              		.loc 1 340 3 view .LVU2884
 341:src/display.c **** }
ARM GAS  /tmp/cc1e4Gjl.s 			page 267


 8903              		.loc 1 341 8 view .LVU2885
 8904 019e FFF7FEFF 		bl	clr_dot
 8905              	.LVL986:
 8906              	.L966:
 341:src/display.c **** }
 8907              		.loc 1 341 8 is_stmt 0 view .LVU2886
 8908              	.LBE552:
 8909              	.LBE553:
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8910              		.loc 1 3269 2 is_stmt 1 view .LVU2887
3270:src/display.c **** 
 8911              		.loc 1 3270 4 is_stmt 0 view .LVU2888
 8912 01a2 3B68     		ldr	r3, [r7]
 8913 01a4 002B     		cmp	r3, #0
 8914 01a6 45D1     		bne	.L984
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8915              		.loc 1 3269 31 view .LVU2889
 8916 01a8 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8917 01aa 12F04003 		ands	r3, r2, #64
 8918 01ae 08D0     		beq	.L967
3270:src/display.c **** 
 8919              		.loc 1 3270 8 view .LVU2890
 8920 01b0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3270:src/display.c **** 
 8921              		.loc 1 3270 4 view .LVU2891
 8922 01b2 1B07     		lsls	r3, r3, #28
 8923 01b4 40F1EF80 		bpl	.L986
3270:src/display.c **** 
 8924              		.loc 1 3270 30 discriminator 3 view .LVU2892
 8925 01b8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8926 01ba 012B     		cmp	r3, #1
 8927 01bc 01D0     		beq	.L967
3270:src/display.c **** 
 8928              		.loc 1 3270 60 discriminator 5 view .LVU2893
 8929 01be C2F38003 		ubfx	r3, r2, #2, #1
 8930              	.L967:
3269:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8931              		.loc 1 3269 19 discriminator 9 view .LVU2894
 8932 01c2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8933 01c4 63F34512 		bfi	r2, r3, #5, #1
 8934 01c8 E275     		strb	r2, [r4, #23]
3273:src/display.c **** 	  annunciators();
 8935              		.loc 1 3273 2 is_stmt 1 discriminator 9 view .LVU2895
3273:src/display.c **** 	  annunciators();
 8936              		.loc 1 3273 5 is_stmt 0 discriminator 9 view .LVU2896
 8937 01ca 75B3     		cbz	r5, .L968
3273:src/display.c **** 	  annunciators();
 8938              		.loc 1 3273 36 discriminator 1 view .LVU2897
 8939 01cc D3B2     		uxtb	r3, r2
3273:src/display.c **** 	  annunciators();
 8940              		.loc 1 3273 13 discriminator 1 view .LVU2898
 8941 01ce 03F02103 		and	r3, r3, #33
 8942 01d2 202B     		cmp	r3, #32
 8943 01d4 29D0     		beq	.L968
 8944              	.L969:
3274:src/display.c ****  	State2.hms = 0;
 8945              		.loc 1 3274 4 is_stmt 1 view .LVU2899
ARM GAS  /tmp/cc1e4Gjl.s 			page 268


 8946 01d6 FFF7FEFF 		bl	annunciators
 8947              	.LVL987:
 8948              	.L970:
3275:src/display.c **** #else
 8949              		.loc 1 3275 3 view .LVU2900
3275:src/display.c **** #else
 8950              		.loc 1 3275 14 is_stmt 0 view .LVU2901
 8951 01da E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8952 01dc 6FF30003 		bfc	r3, #0, #1
 8953 01e0 E375     		strb	r3, [r4, #23]
 8954 01e2 93E7     		b	.L933
 8955              	.LVL988:
 8956              	.L1100:
3030:src/display.c **** 	  if (! State2.dot)
 8957              		.loc 1 3030 4 is_stmt 1 view .LVU2902
3030:src/display.c **** 	  if (! State2.dot)
 8958              		.loc 1 3030 9 is_stmt 0 view .LVU2903
 8959 01e4 4E49     		ldr	r1, .L1135+32
 8960 01e6 4046     		mov	r0, r8
 8961 01e8 FFF7FEFF 		bl	scopy
 8962              	.LVL989:
3031:src/display.c **** 	    *bp++ = '\235';
 8963              		.loc 1 3031 8 view .LVU2904
 8964 01ec 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8965              	.LVL990:
3031:src/display.c **** 	    *bp++ = '\235';
 8966              		.loc 1 3031 4 is_stmt 1 view .LVU2905
3031:src/display.c **** 	    *bp++ = '\235';
 8967              		.loc 1 3031 7 is_stmt 0 view .LVU2906
 8968 01ee 5B06     		lsls	r3, r3, #25
 8969 01f0 00F13A81 		bmi	.L1087
3032:src/display.c **** 	  set_status(buf);
 8970              		.loc 1 3032 6 is_stmt 1 view .LVU2907
 8971              	.LVL991:
3032:src/display.c **** 	  set_status(buf);
 8972              		.loc 1 3032 12 is_stmt 0 view .LVU2908
 8973 01f4 9D23     		movs	r3, #157
 8974 01f6 474E     		ldr	r6, .L1135+20
 8975 01f8 DFF83881 		ldr	r8, .L1135+52
 8976 01fc 0370     		strb	r3, [r0]
 8977 01fe 59E7     		b	.L852
 8978              	.LVL992:
 8979              	.L1102:
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8980              		.loc 1 3224 42 discriminator 1 view .LVU2909
 8981 0200 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3224:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8982              		.loc 1 3224 39 discriminator 1 view .LVU2910
 8983 0202 13F00101 		ands	r1, r3, #1
 8984 0206 7FF47AAF 		bne	.L930
 8985              	.LVL993:
3225:src/display.c **** 	      }
 8986              		.loc 1 3225 3 is_stmt 1 view .LVU2911
 8987 020a FFF7FEFF 		bl	format_reg
 8988              	.LVL994:
3233:src/display.c **** 	      goto finish;
 8989              		.loc 1 3233 6 view .LVU2912
ARM GAS  /tmp/cc1e4Gjl.s 			page 269


3233:src/display.c **** 	      goto finish;
 8990              		.loc 1 3233 9 is_stmt 0 view .LVU2913
 8991 020e 3B68     		ldr	r3, [r7]
 8992 0210 002B     		cmp	r3, #0
 8993 0212 BAD0     		beq	.L938
 8994 0214 7AE7     		b	.L933
 8995              	.LVL995:
 8996              	.L1097:
3012:src/display.c **** 	  set_status(buf);
 8997              		.loc 1 3012 4 is_stmt 1 view .LVU2914
3012:src/display.c **** 	  set_status(buf);
 8998              		.loc 1 3012 10 is_stmt 0 view .LVU2915
 8999 0216 1423     		movs	r3, #20
3013:src/display.c **** 	}
 9000              		.loc 1 3013 4 view .LVU2916
 9001 0218 1EA8     		add	r0, sp, #120
3012:src/display.c **** 	  set_status(buf);
 9002              		.loc 1 3012 10 view .LVU2917
 9003 021a 8DF87830 		strb	r3, [sp, #120]
3013:src/display.c **** 	}
 9004              		.loc 1 3013 4 is_stmt 1 view .LVU2918
3012:src/display.c **** 	  set_status(buf);
 9005              		.loc 1 3012 7 is_stmt 0 view .LVU2919
 9006 021e 0DF17908 		add	r8, sp, #121
 9007              	.LVL996:
3013:src/display.c **** 	}
 9008              		.loc 1 3013 4 view .LVU2920
 9009 0222 FFF7FEFF 		bl	set_status
 9010              	.LVL997:
 9011 0226 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9012 0228 0CE7     		b	.L845
 9013              	.LVL998:
 9014              	.L968:
3273:src/display.c **** 	  annunciators();
 9015              		.loc 1 3273 52 discriminator 3 view .LVU2921
 9016 022a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9017 022c 13F0C00F 		tst	r3, #192
 9018 0230 D3D0     		beq	.L970
 9019 0232 D0E7     		b	.L969
 9020              	.L984:
 9021 0234 0023     		movs	r3, #0
 9022 0236 C4E7     		b	.L967
 9023              	.LVL999:
 9024              	.L1099:
3028:src/display.c **** 	} else if (State2.hyp) {
 9025              		.loc 1 3028 4 is_stmt 1 view .LVU2922
 9026 0238 3A48     		ldr	r0, .L1135+36
 9027 023a 364E     		ldr	r6, .L1135+20
 9028 023c DFF8F480 		ldr	r8, .L1135+52
 9029              	.LVL1000:
3028:src/display.c **** 	} else if (State2.hyp) {
 9030              		.loc 1 3028 4 is_stmt 0 view .LVU2923
 9031 0240 FFF7FEFF 		bl	set_status
 9032              	.LVL1001:
3216:src/display.c ****       nostk:	show_flags();
 9033              		.loc 1 3216 2 is_stmt 1 view .LVU2924
 9034 0244 FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/cc1e4Gjl.s 			page 270


 9035              	.LVL1002:
3217:src/display.c **** 	if (!skip) {
 9036              		.loc 1 3217 14 view .LVU2925
 9037 0248 FFF7FEFF 		bl	show_flags
 9038              	.LVL1003:
3218:src/display.c **** 	  if (State2.runmode) {
 9039              		.loc 1 3218 2 view .LVU2926
 9040              	.L849:
3219:src/display.c **** 	  only_update_x:
 9041              		.loc 1 3219 4 view .LVU2927
3219:src/display.c **** 	  only_update_x:
 9042              		.loc 1 3219 8 is_stmt 0 view .LVU2928
 9043 024c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3219:src/display.c **** 	  only_update_x:
 9044              		.loc 1 3219 7 view .LVU2929
 9045 024e 13F0400A 		ands	r10, r3, #64
 9046 0252 7FF443AF 		bne	.L844
 9047              	.LBB554:
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9048              		.loc 1 3237 6 is_stmt 1 view .LVU2930
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9049              		.loc 1 3237 24 is_stmt 0 view .LVU2931
 9050 0256 314B     		ldr	r3, .L1135+28
3241:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9051              		.loc 1 3241 6 view .LVU2932
 9052 0258 DFF8E090 		ldr	r9, .L1135+60
 9053              	.LVL1004:
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9054              		.loc 1 3237 24 view .LVU2933
 9055 025c 1B68     		ldr	r3, [r3]
3237:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9056              		.loc 1 3237 19 view .LVU2934
 9057 025e B3F8E077 		ldrh	r7, [r3, #2016]
 9058              	.LVL1005:
3238:src/display.c **** 	    const int n = nLIB(pc);
 9059              		.loc 1 3238 6 is_stmt 1 view .LVU2935
3238:src/display.c **** 	    const int n = nLIB(pc);
 9060              		.loc 1 3238 25 is_stmt 0 view .LVU2936
 9061 0262 3846     		mov	r0, r7
 9062 0264 FFF7FEFF 		bl	user_pc
 9063              	.LVL1006:
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9064              		.loc 1 3240 6 view .LVU2937
 9065 0268 2822     		movs	r2, #40
 9066 026a 5146     		mov	r1, r10
3238:src/display.c **** 	    const int n = nLIB(pc);
 9067              		.loc 1 3238 25 view .LVU2938
 9068 026c 8346     		mov	fp, r0
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9069              		.loc 1 3240 6 view .LVU2939
 9070 026e 1EA8     		add	r0, sp, #120
 9071 0270 FFF7FEFF 		bl	xset
 9072              	.LVL1007:
3239:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9073              		.loc 1 3239 20 view .LVU2940
 9074 0274 BF0B     		lsrs	r7, r7, #14
 9075              	.LVL1008:
ARM GAS  /tmp/cc1e4Gjl.s 			page 271


3239:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9076              		.loc 1 3239 6 is_stmt 1 view .LVU2941
3240:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9077              		.loc 1 3240 6 view .LVU2942
3241:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9078              		.loc 1 3241 6 view .LVU2943
 9079 0276 D9F80000 		ldr	r0, [r9]
 9080 027a 5246     		mov	r2, r10
 9081 027c 0121     		movs	r1, #1
 9082 027e FFF7FEFF 		bl	set_exp
 9083              	.LVL1009:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9084              		.loc 1 3242 6 view .LVU2944
 9085 0282 002F     		cmp	r7, #0
 9086 0284 40F0F480 		bne	.L1105
 9087 0288 2749     		ldr	r1, .L1135+40
 9088 028a 1EA8     		add	r0, sp, #120
 9089 028c FFF7FEFF 		bl	scopy_spc
 9090              	.LVL1010:
 9091 0290 0322     		movs	r2, #3
 9092 0292 5946     		mov	r1, fp
 9093 0294 FFF7FEFF 		bl	num_arg_0
 9094              	.LVL1011:
3244:src/display.c **** #ifndef REALBUILD
 9095              		.loc 1 3244 6 view .LVU2945
 9096 0298 0921     		movs	r1, #9
 9097 029a 1EA8     		add	r0, sp, #120
 9098 029c FFF7FEFF 		bl	set_digits_string
 9099              	.LVL1012:
3246:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9100              		.loc 1 3246 6 view .LVU2946
 9101 02a0 3946     		mov	r1, r7
 9102 02a2 2822     		movs	r2, #40
 9103 02a4 1EA8     		add	r0, sp, #120
 9104 02a6 FFF7FEFF 		bl	xset
 9105              	.LVL1013:
3247:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9106              		.loc 1 3247 6 view .LVU2947
 9107 02aa 3A46     		mov	r2, r7
 9108 02ac 0121     		movs	r1, #1
 9109 02ae D9F80000 		ldr	r0, [r9]
 9110 02b2 FFF7FEFF 		bl	set_exp
 9111              	.LVL1014:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9112              		.loc 1 3248 6 view .LVU2948
 9113 02b6 1D49     		ldr	r1, .L1135+44
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9114              		.loc 1 3242 6 is_stmt 0 view .LVU2949
 9115 02b8 0327     		movs	r7, #3
 9116              	.LVL1015:
 9117              	.L972:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9118              		.loc 1 3248 6 discriminator 4 view .LVU2950
 9119 02ba 1EA8     		add	r0, sp, #120
 9120 02bc FFF7FEFF 		bl	scopy_spc
 9121              	.LVL1016:
 9122 02c0 3A46     		mov	r2, r7
ARM GAS  /tmp/cc1e4Gjl.s 			page 272


 9123 02c2 5946     		mov	r1, fp
 9124 02c4 FFF7FEFF 		bl	num_arg_0
 9125              	.LVL1017:
 9126              	.LBB555:
3251:src/display.c **** 	      char *l=LastDisplayedNumber;
 9127              		.loc 1 3251 8 is_stmt 1 discriminator 4 view .LVU2951
3252:src/display.c **** 	      *l++=' ';
 9128              		.loc 1 3252 8 discriminator 4 view .LVU2952
3253:src/display.c **** 	      while(*b) {
 9129              		.loc 1 3253 8 discriminator 4 view .LVU2953
3253:src/display.c **** 	      while(*b) {
 9130              		.loc 1 3253 12 is_stmt 0 discriminator 4 view .LVU2954
 9131 02c8 194B     		ldr	r3, .L1135+48
3254:src/display.c **** 		*l++=*b++;
 9132              		.loc 1 3254 14 discriminator 4 view .LVU2955
 9133 02ca 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3253:src/display.c **** 	      while(*b) {
 9134              		.loc 1 3253 12 discriminator 4 view .LVU2956
 9135 02ce 2027     		movs	r7, #32
 9136 02d0 1F70     		strb	r7, [r3]
3254:src/display.c **** 		*l++=*b++;
 9137              		.loc 1 3254 8 is_stmt 1 discriminator 4 view .LVU2957
3254:src/display.c **** 		*l++=*b++;
 9138              		.loc 1 3254 13 discriminator 4 view .LVU2958
 9139 02d2 0029     		cmp	r1, #0
 9140 02d4 00F00182 		beq	.L983
 9141 02d8 0333     		adds	r3, r3, #3
 9142 02da 1EA8     		add	r0, sp, #120
 9143              	.LVL1018:
 9144              	.L965:
3255:src/display.c **** 		*l++=' ';
 9145              		.loc 1 3255 3 view .LVU2959
3255:src/display.c **** 		*l++=' ';
 9146              		.loc 1 3255 7 is_stmt 0 view .LVU2960
 9147 02dc 03F8021C 		strb	r1, [r3, #-2]
3256:src/display.c **** 	      }
 9148              		.loc 1 3256 3 is_stmt 1 view .LVU2961
 9149              	.LVL1019:
3254:src/display.c **** 		*l++=*b++;
 9150              		.loc 1 3254 14 is_stmt 0 view .LVU2962
 9151 02e0 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9152              	.LVL1020:
3256:src/display.c **** 	      }
 9153              		.loc 1 3256 7 view .LVU2963
 9154 02e4 03F8017C 		strb	r7, [r3, #-1]
3254:src/display.c **** 		*l++=*b++;
 9155              		.loc 1 3254 13 is_stmt 1 view .LVU2964
 9156 02e8 1A46     		mov	r2, r3
 9157 02ea 0233     		adds	r3, r3, #2
 9158              	.LVL1021:
3254:src/display.c **** 		*l++=*b++;
 9159              		.loc 1 3254 13 is_stmt 0 view .LVU2965
 9160 02ec 0029     		cmp	r1, #0
 9161 02ee F5D1     		bne	.L965
 9162              	.LVL1022:
 9163              	.L964:
3258:src/display.c **** 	    }
ARM GAS  /tmp/cc1e4Gjl.s 			page 273


 9164              		.loc 1 3258 8 is_stmt 1 view .LVU2966
3258:src/display.c **** 	    }
 9165              		.loc 1 3258 10 is_stmt 0 view .LVU2967
 9166 02f0 0023     		movs	r3, #0
 9167 02f2 DFF84490 		ldr	r9, .L1135+56
 9168 02f6 1370     		strb	r3, [r2]
 9169              	.LVL1023:
3258:src/display.c **** 	    }
 9170              		.loc 1 3258 10 view .LVU2968
 9171              	.LBE555:
 9172              	.LBE554:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9173              		.loc 1 3263 2 is_stmt 1 view .LVU2969
 9174              	.L1092:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9175              		.loc 1 3263 2 is_stmt 0 view .LVU2970
 9176 02f8 FFF7FEFF 		bl	set_annunciators
 9177              	.LVL1024:
3264:src/display.c **** 	  ShowRPN = 0;
 9178              		.loc 1 3264 2 is_stmt 1 view .LVU2971
 9179 02fc 4BE7     		b	.L847
 9180              	.L1136:
 9181 02fe 00BF     		.align	2
 9182              	.L1135:
 9183 0300 00000000 		.word	StateWhileOn
 9184 0304 00000000 		.word	WasDataEntry
 9185 0308 00000000 		.word	argcmds
 9186 030c 00000000 		.word	.LC20
 9187 0310 04000000 		.word	.LC21
 9188 0314 00000000 		.word	DispMsg
 9189 0318 00000000 		.word	ShowRPN
 9190 031c 00000000 		.word	main_ram
 9191 0320 38000000 		.word	.LC26
 9192 0324 00000000 		.word	.LANCHOR21
 9193 0328 00000000 		.word	.LANCHOR25
 9194 032c 00000000 		.word	.LANCHOR19
 9195 0330 00000000 		.word	LastDisplayedNumber
 9196 0334 00000000 		.word	DispPlot
 9197 0338 00000000 		.word	ShowRegister
 9198 033c 00000000 		.word	ProgFree
 9199              	.LVL1025:
 9200              	.L1098:
 9201              	.LBB557:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9202              		.loc 1 3016 4 view .LVU2972
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9203              		.loc 1 3016 9 is_stmt 0 view .LVU2973
 9204 0340 B44B     		ldr	r3, .L1137
 9205 0342 B54E     		ldr	r6, .L1137+4
 9206 0344 DFF81083 		ldr	r8, .L1137+68
 9207              	.LVL1026:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9208              		.loc 1 3016 9 view .LVU2974
 9209 0348 DFF81093 		ldr	r9, .L1137+72
 9210              	.LVL1027:
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9211              		.loc 1 3016 9 view .LVU2975
ARM GAS  /tmp/cc1e4Gjl.s 			page 274


 9212 034c 93E80700 		ldm	r3, {r0, r1, r2}
 9213 0350 15AB     		add	r3, sp, #84
 9214 0352 03C3     		stmia	r3!, {r0, r1}
 9215 0354 0021     		movs	r1, #0
3017:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9216              		.loc 1 3017 4 view .LVU2976
 9217 0356 B148     		ldr	r0, .L1137+8
3016:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9218              		.loc 1 3016 9 view .LVU2977
 9219 0358 1A80     		strh	r2, [r3]	@ movhi
 9220 035a CDF85E10 		str	r1, [sp, #94]	@ unaligned
3017:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9221              		.loc 1 3017 4 is_stmt 1 view .LVU2978
 9222 035e FFF7FEFF 		bl	set_digits_string
 9223              	.LVL1028:
3018:src/display.c **** #ifndef REALBUILD
 9224              		.loc 1 3018 4 view .LVU2979
 9225              	.LBB558:
 9226              	.LBI558:
 407:src/display.c ****   if (res) *res++ = ch;
 9227              		.loc 1 407 14 view .LVU2980
 9228              	.LBB559:
 408:src/display.c ****   else	set_dig(base, ch);
 9229              		.loc 1 408 3 view .LVU2981
 409:src/display.c ****   return res;
 9230              		.loc 1 409 8 view .LVU2982
 9231 0362 7221     		movs	r1, #114
 9232 0364 6C20     		movs	r0, #108
 9233 0366 FFF7FEFF 		bl	set_dig
 9234              	.LVL1029:
 410:src/display.c **** }
 9235              		.loc 1 410 3 view .LVU2983
 410:src/display.c **** }
 9236              		.loc 1 410 3 is_stmt 0 view .LVU2984
 9237              	.LBE559:
 9238              	.LBE558:
3020:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9239              		.loc 1 3020 4 is_stmt 1 view .LVU2985
 9240 036a AD49     		ldr	r1, .L1137+12
 9241 036c AD48     		ldr	r0, .L1137+16
 9242 036e FFF7FEFF 		bl	scopy
 9243              	.LVL1030:
3021:src/display.c **** #endif
 9244              		.loc 1 3021 4 view .LVU2986
 9245 0372 AD49     		ldr	r1, .L1137+20
 9246 0374 AD48     		ldr	r0, .L1137+24
 9247 0376 FFF7FEFF 		bl	scopy
 9248              	.LVL1031:
3023:src/display.c **** 	  set_status(vers);
 9249              		.loc 1 3023 4 view .LVU2987
 9250 037a AD49     		ldr	r1, .L1137+28
 9251 037c 0422     		movs	r2, #4
 9252 037e 0DF15D00 		add	r0, sp, #93
 9253 0382 FFF7FEFF 		bl	xcopy
 9254              	.LVL1032:
3024:src/display.c **** 	  skip = 1;
 9255              		.loc 1 3024 4 view .LVU2988
ARM GAS  /tmp/cc1e4Gjl.s 			page 275


 9256 0386 15A8     		add	r0, sp, #84
 9257 0388 FFF7FEFF 		bl	set_status
 9258              	.LVL1033:
3025:src/display.c **** 	  goto nostk;
 9259              		.loc 1 3025 4 view .LVU2989
3026:src/display.c **** 	} else if (State2.confirm) {
 9260              		.loc 1 3026 4 view .LVU2990
3026:src/display.c **** 	} else if (State2.confirm) {
 9261              		.loc 1 3026 4 is_stmt 0 view .LVU2991
 9262              	.LBE557:
3217:src/display.c **** 	if (!skip) {
 9263              		.loc 1 3217 14 is_stmt 1 view .LVU2992
 9264 038c FFF7FEFF 		bl	show_flags
 9265              	.LVL1034:
3218:src/display.c **** 	  if (State2.runmode) {
 9266              		.loc 1 3218 2 view .LVU2993
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9267              		.loc 1 3263 2 view .LVU2994
 9268 0390 FFF7FEFF 		bl	set_annunciators
 9269              	.LVL1035:
3264:src/display.c **** 	  ShowRPN = 0;
 9270              		.loc 1 3264 2 view .LVU2995
 9271 0394 FFE6     		b	.L847
 9272              	.LVL1036:
 9273              	.L986:
3264:src/display.c **** 	  ShowRPN = 0;
 9274              		.loc 1 3264 2 is_stmt 0 view .LVU2996
 9275 0396 0123     		movs	r3, #1
 9276 0398 13E7     		b	.L967
 9277              	.LVL1037:
 9278              	.L929:
3228:src/display.c **** 	    } else {
 9279              		.loc 1 3228 3 is_stmt 1 view .LVU2997
 9280 039a A648     		ldr	r0, .L1137+32
 9281 039c 2421     		movs	r1, #36
 9282 039e FFF7FEFF 		bl	set_digits_string
 9283              	.LVL1038:
3233:src/display.c **** 	      goto finish;
 9284              		.loc 1 3233 6 view .LVU2998
3233:src/display.c **** 	      goto finish;
 9285              		.loc 1 3233 9 is_stmt 0 view .LVU2999
 9286 03a2 3B68     		ldr	r3, [r7]
 9287 03a4 002B     		cmp	r3, #0
 9288 03a6 A7D0     		beq	.L1092
 9289 03a8 B0E6     		b	.L933
 9290              	.LVL1039:
 9291              	.L1104:
3264:src/display.c **** 	  ShowRPN = 0;
 9292              		.loc 1 3264 69 discriminator 3 view .LVU3000
 9293 03aa B8F90030 		ldrsh	r3, [r8]
 9294 03ae 002B     		cmp	r3, #0
 9295 03b0 7FF4F1AE 		bne	.L847
3264:src/display.c **** 	  ShowRPN = 0;
 9296              		.loc 1 3264 81 discriminator 4 view .LVU3001
 9297 03b4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9298 03b6 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9299 03b8 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/cc1e4Gjl.s 			page 276


 9300 03bc 1343     		orrs	r3, r3, r2
 9301 03be 7FF4EAAE 		bne	.L847
 9302 03c2 9D4F     		ldr	r7, .L1137+36
 9303 03c4 EDE6     		b	.L966
 9304              	.LVL1040:
 9305              	.L855:
3073:src/display.c **** 	  *bp++ = 'x';
 9306              		.loc 1 3073 9 is_stmt 1 view .LVU3002
3073:src/display.c **** 	  *bp++ = 'x';
 9307              		.loc 1 3073 19 is_stmt 0 view .LVU3003
 9308 03c6 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
3073:src/display.c **** 	  *bp++ = 'x';
 9309              		.loc 1 3073 12 view .LVU3004
 9310 03c8 072A     		cmp	r2, #7
 9311 03ca 73D1     		bne	.L1106
3079:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9312              		.loc 1 3079 9 is_stmt 1 view .LVU3005
3079:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9313              		.loc 1 3079 12 is_stmt 0 view .LVU3006
 9314 03cc B9F1000F 		cmp	r9, #0
 9315 03d0 40F08581 		bne	.L1107
3127:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9316              		.loc 1 3127 9 is_stmt 1 view .LVU3007
3127:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9317              		.loc 1 3127 12 is_stmt 0 view .LVU3008
 9318 03d4 1A07     		lsls	r2, r3, #28
 9319 03d6 34D4     		bmi	.L1108
3135:src/display.c **** 	  show_status();
 9320              		.loc 1 3135 9 is_stmt 1 view .LVU3009
3135:src/display.c **** 	  show_status();
 9321              		.loc 1 3135 19 is_stmt 0 view .LVU3010
 9322 03d8 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
3135:src/display.c **** 	  show_status();
 9323              		.loc 1 3135 12 view .LVU3011
 9324 03da 002B     		cmp	r3, #0
 9325 03dc 40F0FA81 		bne	.L1109
3138:src/display.c **** 	  show_label();
 9326              		.loc 1 3138 9 is_stmt 1 view .LVU3012
3138:src/display.c **** 	  show_label();
 9327              		.loc 1 3138 13 is_stmt 0 view .LVU3013
 9328 03e0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3138:src/display.c **** 	  show_label();
 9329              		.loc 1 3138 12 view .LVU3014
 9330 03e2 5E07     		lsls	r6, r3, #29
 9331 03e4 00F11483 		bmi	.L1110
3141:src/display.c **** 	  show_registers();
 9332              		.loc 1 3141 9 is_stmt 1 view .LVU3015
3141:src/display.c **** 	  show_registers();
 9333              		.loc 1 3141 12 is_stmt 0 view .LVU3016
 9334 03e8 1807     		lsls	r0, r3, #28
 9335 03ea 00F1EB82 		bmi	.L1111
3151:src/display.c **** 	  if (DispMsg) { 
 9336              		.loc 1 3151 9 is_stmt 1 view .LVU3017
3151:src/display.c **** 	  if (DispMsg) { 
 9337              		.loc 1 3151 12 is_stmt 0 view .LVU3018
 9338 03ee 4806     		lsls	r0, r1, #25
 9339 03f0 40F1B082 		bpl	.L912
ARM GAS  /tmp/cc1e4Gjl.s 			page 277


3152:src/display.c **** 	    set_status(DispMsg);
 9340              		.loc 1 3152 4 is_stmt 1 view .LVU3019
3152:src/display.c **** 	    set_status(DispMsg);
 9341              		.loc 1 3152 8 is_stmt 0 view .LVU3020
 9342 03f4 884E     		ldr	r6, .L1137+4
 9343 03f6 D6F800B0 		ldr	fp, [r6]
3152:src/display.c **** 	    set_status(DispMsg);
 9344              		.loc 1 3152 7 view .LVU3021
 9345 03fa BBF1000F 		cmp	fp, #0
 9346 03fe 00F04F83 		beq	.L913
3153:src/display.c **** 	  } else if (DispPlot) {
 9347              		.loc 1 3153 6 is_stmt 1 view .LVU3022
 9348 0402 5846     		mov	r0, fp
 9349 0404 FFF7FEFF 		bl	set_status
 9350              	.LVL1041:
3216:src/display.c ****       nostk:	show_flags();
 9351              		.loc 1 3216 2 view .LVU3023
 9352 0408 DFF84C82 		ldr	r8, .L1137+68
 9353              	.LVL1042:
3216:src/display.c ****       nostk:	show_flags();
 9354              		.loc 1 3216 2 is_stmt 0 view .LVU3024
 9355 040c FFF7FEFF 		bl	show_stack
 9356              	.LVL1043:
3217:src/display.c **** 	if (!skip) {
 9357              		.loc 1 3217 14 is_stmt 1 view .LVU3025
 9358 0410 FFF7FEFF 		bl	show_flags
 9359              	.LVL1044:
3218:src/display.c **** 	  if (State2.runmode) {
 9360              		.loc 1 3218 2 view .LVU3026
 9361 0414 1AE7     		b	.L849
 9362              	.LVL1045:
 9363              	.L1101:
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9364              		.loc 1 3036 4 view .LVU3027
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9365              		.loc 1 3036 9 is_stmt 0 view .LVU3028
 9366 0416 2E22     		movs	r2, #46
 9367 0418 8849     		ldr	r1, .L1137+40
 9368 041a 4046     		mov	r0, r8
 9369 041c FFF7FEFF 		bl	scopy_char
 9370              	.LVL1046:
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9371              		.loc 1 3037 14 view .LVU3029
 9372 0420 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3036:src/display.c **** 	  if (State2.numdigit > 0)
 9373              		.loc 1 3036 9 view .LVU3030
 9374 0422 0346     		mov	r3, r0
 9375              	.LVL1047:
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9376              		.loc 1 3037 4 is_stmt 1 view .LVU3031
3037:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9377              		.loc 1 3037 7 is_stmt 0 view .LVU3032
 9378 0424 002A     		cmp	r2, #0
 9379 0426 5DD1     		bne	.L1112
 9380              	.L854:
3040:src/display.c **** 	  set_status(buf);
 9381              		.loc 1 3040 4 is_stmt 1 view .LVU3033
ARM GAS  /tmp/cc1e4Gjl.s 			page 278


 9382              	.LVL1048:
3040:src/display.c **** 	  set_status(buf);
 9383              		.loc 1 3040 10 is_stmt 0 view .LVU3034
 9384 0428 5F22     		movs	r2, #95
 9385 042a 1A70     		strb	r2, [r3]
3041:src/display.c **** 	} else if (State2.rarg) {
 9386              		.loc 1 3041 4 is_stmt 1 view .LVU3035
 9387              	.LVL1049:
 9388              	.L872:
 9389              	.LBB560:
3126:src/display.c **** 	} else if (State2.multi) {
 9390              		.loc 1 3126 4 view .LVU3036
 9391 042c 1EA8     		add	r0, sp, #120
 9392 042e FFF7FEFF 		bl	set_status
 9393              	.LVL1050:
3126:src/display.c **** 	} else if (State2.multi) {
 9394              		.loc 1 3126 4 is_stmt 0 view .LVU3037
 9395              	.LBE560:
3216:src/display.c ****       nostk:	show_flags();
 9396              		.loc 1 3216 2 is_stmt 1 view .LVU3038
 9397 0432 794E     		ldr	r6, .L1137+4
 9398 0434 DFF82082 		ldr	r8, .L1137+68
 9399 0438 FFF7FEFF 		bl	show_stack
 9400              	.LVL1051:
3217:src/display.c **** 	if (!skip) {
 9401              		.loc 1 3217 14 view .LVU3039
 9402 043c FFF7FEFF 		bl	show_flags
 9403              	.LVL1052:
3218:src/display.c **** 	  if (State2.runmode) {
 9404              		.loc 1 3218 2 view .LVU3040
 9405 0440 04E7     		b	.L849
 9406              	.LVL1053:
 9407              	.L1108:
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9408              		.loc 1 3128 4 view .LVU3041
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9409              		.loc 1 3128 42 is_stmt 0 view .LVU3042
 9410 0442 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9411 0444 7E49     		ldr	r1, .L1137+44
 9412 0446 0423     		movs	r3, #4
 9413 0448 03EB0213 		add	r3, r3, r2, lsl #4
3128:src/display.c **** 	  if (State2.numdigit > 0) {
 9414              		.loc 1 3128 9 view .LVU3043
 9415 044c 1944     		add	r1, r1, r3
 9416 044e 4046     		mov	r0, r8
 9417 0450 2722     		movs	r2, #39
 9418 0452 FFF7FEFF 		bl	scopy_char
 9419              	.LVL1054:
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
 9420              		.loc 1 3129 7 view .LVU3044
 9421 0456 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9422              	.LVL1055:
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
 9423              		.loc 1 3129 4 is_stmt 1 view .LVU3045
3129:src/display.c **** 	    *bp++ = (char) State2.digval;
 9424              		.loc 1 3129 7 is_stmt 0 view .LVU3046
 9425 0458 33B1     		cbz	r3, .L1087
ARM GAS  /tmp/cc1e4Gjl.s 			page 279


3130:src/display.c **** 	    if (State2.numdigit > 1)
 9426              		.loc 1 3130 6 is_stmt 1 view .LVU3047
 9427              	.LVL1056:
3130:src/display.c **** 	    if (State2.numdigit > 1)
 9428              		.loc 1 3130 14 is_stmt 0 view .LVU3048
 9429 045a 2389     		ldrh	r3, [r4, #8]
 9430 045c 0370     		strb	r3, [r0]
3131:src/display.c **** 	      *bp++ = State2.digval2;
 9431              		.loc 1 3131 6 is_stmt 1 view .LVU3049
3131:src/display.c **** 	      *bp++ = State2.digval2;
 9432              		.loc 1 3131 9 is_stmt 0 view .LVU3050
 9433 045e E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9434 0460 012B     		cmp	r3, #1
3132:src/display.c **** 	  }
 9435              		.loc 1 3132 8 is_stmt 1 view .LVU3051
 9436              	.LVL1057:
3132:src/display.c **** 	  }
 9437              		.loc 1 3132 22 is_stmt 0 view .LVU3052
 9438 0462 84BF     		itt	hi
 9439 0464 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
3132:src/display.c **** 	  }
 9440              		.loc 1 3132 14 view .LVU3053
 9441 0466 4370     		strbhi	r3, [r0, #1]
 9442              	.LVL1058:
 9443              	.L1087:
3132:src/display.c **** 	  }
 9444              		.loc 1 3132 14 view .LVU3054
 9445 0468 6B4E     		ldr	r6, .L1137+4
 9446 046a DFF8EC81 		ldr	r8, .L1137+68
 9447 046e 21E6     		b	.L852
 9448              	.LVL1059:
 9449              	.L1105:
 9450              	.LBB569:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9451              		.loc 1 3242 6 discriminator 1 view .LVU3055
 9452 0470 7449     		ldr	r1, .L1137+48
 9453 0472 07EB8703 		add	r3, r7, r7, lsl #2
3243:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9454              		.loc 1 3243 21 discriminator 1 view .LVU3056
 9455 0476 07F00107 		and	r7, r7, #1
 9456              	.LVL1060:
3242:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9457              		.loc 1 3242 6 discriminator 1 view .LVU3057
 9458 047a 1944     		add	r1, r1, r3
 9459 047c 1EA8     		add	r0, sp, #120
 9460 047e 0337     		adds	r7, r7, #3
 9461 0480 0193     		str	r3, [sp, #4]
 9462 0482 FFF7FEFF 		bl	scopy_spc
 9463              	.LVL1061:
 9464 0486 3A46     		mov	r2, r7
 9465 0488 5946     		mov	r1, fp
 9466 048a FFF7FEFF 		bl	num_arg_0
 9467              	.LVL1062:
3244:src/display.c **** #ifndef REALBUILD
 9468              		.loc 1 3244 6 is_stmt 1 discriminator 1 view .LVU3058
 9469 048e 0921     		movs	r1, #9
 9470 0490 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/cc1e4Gjl.s 			page 280


 9471 0492 FFF7FEFF 		bl	set_digits_string
 9472              	.LVL1063:
3246:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9473              		.loc 1 3246 6 discriminator 1 view .LVU3059
 9474 0496 2822     		movs	r2, #40
 9475 0498 5146     		mov	r1, r10
 9476 049a 1EA8     		add	r0, sp, #120
 9477 049c FFF7FEFF 		bl	xset
 9478              	.LVL1064:
3247:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9479              		.loc 1 3247 6 discriminator 1 view .LVU3060
 9480 04a0 0121     		movs	r1, #1
 9481 04a2 D9F80000 		ldr	r0, [r9]
 9482 04a6 5246     		mov	r2, r10
 9483 04a8 FFF7FEFF 		bl	set_exp
 9484              	.LVL1065:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9485              		.loc 1 3248 6 discriminator 1 view .LVU3061
 9486 04ac 6649     		ldr	r1, .L1137+52
 9487 04ae 019B     		ldr	r3, [sp, #4]
 9488 04b0 1944     		add	r1, r1, r3
 9489 04b2 02E7     		b	.L972
 9490              	.LVL1066:
 9491              	.L1106:
3248:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9492              		.loc 1 3248 6 is_stmt 0 discriminator 1 view .LVU3062
 9493              	.LBE569:
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9494              		.loc 1 3074 4 is_stmt 1 view .LVU3063
3075:src/display.c **** 	  *bp++ = '_';
 9495              		.loc 1 3075 33 is_stmt 0 view .LVU3064
 9496 04b4 654B     		ldr	r3, .L1137+56
 9497 04b6 584E     		ldr	r6, .L1137+4
3075:src/display.c **** 	  *bp++ = '_';
 9498              		.loc 1 3075 10 view .LVU3065
 9499 04b8 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9500 04ba 88F80130 		strb	r3, [r8, #1]
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9501              		.loc 1 3074 10 view .LVU3066
 9502 04be 7823     		movs	r3, #120
3076:src/display.c **** 	  *bp++ = '?';
 9503              		.loc 1 3076 10 view .LVU3067
 9504 04c0 5F22     		movs	r2, #95
3074:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9505              		.loc 1 3074 10 view .LVU3068
 9506 04c2 88F80030 		strb	r3, [r8]
3075:src/display.c **** 	  *bp++ = '_';
 9507              		.loc 1 3075 4 is_stmt 1 view .LVU3069
 9508              	.LVL1067:
3076:src/display.c **** 	  *bp++ = '?';
 9509              		.loc 1 3076 4 view .LVU3070
3077:src/display.c **** 	  set_status(buf);
 9510              		.loc 1 3077 10 is_stmt 0 view .LVU3071
 9511 04c6 3F23     		movs	r3, #63
3076:src/display.c **** 	  *bp++ = '?';
 9512              		.loc 1 3076 10 view .LVU3072
 9513 04c8 88F80220 		strb	r2, [r8, #2]
ARM GAS  /tmp/cc1e4Gjl.s 			page 281


3077:src/display.c **** 	  set_status(buf);
 9514              		.loc 1 3077 4 is_stmt 1 view .LVU3073
 9515              	.LVL1068:
3077:src/display.c **** 	  set_status(buf);
 9516              		.loc 1 3077 10 is_stmt 0 view .LVU3074
 9517 04cc 88F80330 		strb	r3, [r8, #3]
3078:src/display.c **** 	} else if (cata) {
 9518              		.loc 1 3078 4 is_stmt 1 view .LVU3075
 9519 04d0 1EA8     		add	r0, sp, #120
 9520 04d2 FFF7FEFF 		bl	set_status
 9521              	.LVL1069:
3216:src/display.c ****       nostk:	show_flags();
 9522              		.loc 1 3216 2 view .LVU3076
 9523 04d6 DFF88081 		ldr	r8, .L1137+68
 9524              	.LVL1070:
3216:src/display.c ****       nostk:	show_flags();
 9525              		.loc 1 3216 2 is_stmt 0 view .LVU3077
 9526 04da FFF7FEFF 		bl	show_stack
 9527              	.LVL1071:
3217:src/display.c **** 	if (!skip) {
 9528              		.loc 1 3217 14 is_stmt 1 view .LVU3078
 9529 04de FFF7FEFF 		bl	show_flags
 9530              	.LVL1072:
3218:src/display.c **** 	  if (State2.runmode) {
 9531              		.loc 1 3218 2 view .LVU3079
 9532 04e2 B3E6     		b	.L849
 9533              	.LVL1073:
 9534              	.L1112:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9535              		.loc 1 3038 6 view .LVU3080
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9536              		.loc 1 3038 11 is_stmt 0 view .LVU3081
 9537 04e4 2189     		ldrh	r1, [r4, #8]
 9538 04e6 FFF7FEFF 		bl	num_arg_0
 9539              	.LVL1074:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9540              		.loc 1 3038 11 view .LVU3082
 9541 04ea 0346     		mov	r3, r0
 9542              	.LVL1075:
3038:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9543              		.loc 1 3038 11 view .LVU3083
 9544 04ec 9CE7     		b	.L854
 9545              	.LVL1076:
 9546              	.L856:
3046:src/display.c **** #endif
 9547              		.loc 1 3046 6 is_stmt 1 view .LVU3084
3046:src/display.c **** #endif
 9548              		.loc 1 3046 11 is_stmt 0 view .LVU3085
 9549 04ee 4046     		mov	r0, r8
 9550 04f0 5749     		ldr	r1, .L1137+60
 9551 04f2 FFF7FEFF 		bl	scopy
 9552              	.LVL1077:
 9553 04f6 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9554 04f8 8046     		mov	r8, r0
 9555              	.LVL1078:
3046:src/display.c **** #endif
 9556              		.loc 1 3046 11 view .LVU3086
ARM GAS  /tmp/cc1e4Gjl.s 			page 282


 9557 04fa BEE5     		b	.L857
 9558              	.LVL1079:
 9559              	.L935:
 9560              	.LBB570:
 9561              	.LBB545:
1268:src/display.c **** 
 9562              		.loc 1 1268 2 is_stmt 1 view .LVU3087
 9563 04fc FFF7FEFF 		bl	set_separator_decimal_modes
 9564              	.LVL1080:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9565              		.loc 1 1270 2 view .LVU3088
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9566              		.loc 1 1272 2 view .LVU3089
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9567              		.loc 1 1272 5 is_stmt 0 view .LVU3090
 9568 0500 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9569              	.LBB530:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9570              		.loc 1 1279 15 view .LVU3091
 9571 0502 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9572              	.LBE530:
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9573              		.loc 1 1272 5 view .LVU3092
 9574 0506 012B     		cmp	r3, #1
 9575 0508 40F2DE80 		bls	.L940
 9576              	.LVL1081:
 9577              	.LBB531:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9578              		.loc 1 1279 14 is_stmt 1 view .LVU3093
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9579              		.loc 1 1279 4 is_stmt 0 view .LVU3094
 9580 050c BCF1000F 		cmp	ip, #0
 9581 0510 73D0     		beq	.L941
 9582 0512 0AF10103 		add	r3, r10, #1
 9583 0516 6046     		mov	r0, ip
 9584              	.LBE531:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9585              		.loc 1 1247 11 view .LVU3095
 9586 0518 4FF0FF31 		mov	r1, #-1
 9587 051c 6FEA0A0E 		mvn	lr, r10
 9588              	.LVL1082:
 9589              	.L943:
 9590              	.LBB532:
1280:src/display.c **** 	      gotdot = j;
 9591              		.loc 1 1280 9 view .LVU3096
 9592 0520 2E28     		cmp	r0, #46
 9593 0522 0EEB0302 		add	r2, lr, r3
 9594              	.LVL1083:
1280:src/display.c **** 	      gotdot = j;
 9595              		.loc 1 1280 6 is_stmt 1 view .LVU3097
1280:src/display.c **** 	      gotdot = j;
 9596              		.loc 1 1280 9 is_stmt 0 view .LVU3098
 9597 0526 03D1     		bne	.L942
1280:src/display.c **** 	      gotdot = j;
 9598              		.loc 1 1280 22 view .LVU3099
 9599 0528 B1F1FF3F 		cmp	r1, #-1
 9600 052c 08BF     		it	eq
ARM GAS  /tmp/cc1e4Gjl.s 			page 283


 9601 052e 1146     		moveq	r1, r2
 9602              	.LVL1084:
 9603              	.L942:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9604              		.loc 1 1279 28 is_stmt 1 view .LVU3100
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9605              		.loc 1 1279 14 view .LVU3101
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9606              		.loc 1 1279 15 is_stmt 0 view .LVU3102
 9607 0530 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9608              		.loc 1 1279 4 view .LVU3103
 9609 0534 0028     		cmp	r0, #0
 9610 0536 F3D1     		bne	.L943
1287:src/display.c **** 	  if (j > 0) {
 9611              		.loc 1 1287 4 is_stmt 1 view .LVU3104
1287:src/display.c **** 	  if (j > 0) {
 9612              		.loc 1 1287 6 is_stmt 0 view .LVU3105
 9613 0538 A2F10B03 		sub	r3, r2, #11
 9614              	.LVL1085:
1288:src/display.c **** 	    p += j + 1;
 9615              		.loc 1 1288 4 is_stmt 1 view .LVU3106
1288:src/display.c **** 	    p += j + 1;
 9616              		.loc 1 1288 7 is_stmt 0 view .LVU3107
 9617 053c 002B     		cmp	r3, #0
 9618 053e 40F3F781 		ble	.L1113
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9619              		.loc 1 1289 6 is_stmt 1 view .LVU3108
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9620              		.loc 1 1289 8 is_stmt 0 view .LVU3109
 9621 0542 0A3A     		subs	r2, r2, #10
1291:src/display.c **** 	      gotdot = 0;
 9622              		.loc 1 1291 9 view .LVU3110
 9623 0544 8B42     		cmp	r3, r1
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9624              		.loc 1 1289 8 view .LVU3111
 9625 0546 9244     		add	r10, r10, r2
 9626              	.LVL1086:
1290:src/display.c **** 	    if (gotdot <= j) {
 9627              		.loc 1 1290 6 is_stmt 1 view .LVU3112
1291:src/display.c **** 	      gotdot = 0;
 9628              		.loc 1 1291 6 view .LVU3113
1291:src/display.c **** 	      gotdot = 0;
 9629              		.loc 1 1291 9 is_stmt 0 view .LVU3114
 9630 0548 80F2E481 		bge	.L980
1296:src/display.c **** 	      gotdot = 0;
 9631              		.loc 1 1296 11 is_stmt 1 view .LVU3115
1296:src/display.c **** 	      gotdot = 0;
 9632              		.loc 1 1296 14 is_stmt 0 view .LVU3116
 9633 054c 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9634              	.LVL1087:
1296:src/display.c **** 	      gotdot = 0;
 9635              		.loc 1 1296 14 view .LVU3117
 9636 0550 2E2B     		cmp	r3, #46
 9637 0552 00F0A082 		beq	.L1114
 9638              	.LVL1088:
1303:src/display.c **** 	    overflow_to_left = 1;
ARM GAS  /tmp/cc1e4Gjl.s 			page 284


 9639              		.loc 1 1303 6 is_stmt 1 view .LVU3118
 9640 0556 3C21     		movs	r1, #60
 9641 0558 FFF7FEFF 		bl	set_dig
 9642              	.LVL1089:
1304:src/display.c **** 	  }
 9643              		.loc 1 1304 6 view .LVU3119
1304:src/display.c **** 	  }
 9644              		.loc 1 1304 6 is_stmt 0 view .LVU3120
 9645 055c 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 9646              		.loc 1 1304 6 view .LVU3121
 9647              	.LBE532:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9648              		.loc 1 1310 9 is_stmt 1 view .LVU3122
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9649              		.loc 1 1310 2 is_stmt 0 view .LVU3123
 9650 0560 BCF1000F 		cmp	ip, #0
 9651 0564 49D0     		beq	.L941
 9652              	.LBB533:
1302:src/display.c **** 	    set_dig(0, '<');
 9653              		.loc 1 1302 18 view .LVU3124
 9654 0566 4FF0FF33 		mov	r3, #-1
1290:src/display.c **** 	    if (gotdot <= j) {
 9655              		.loc 1 1290 8 view .LVU3125
 9656 056a 4FF0090B 		mov	fp, #9
 9657              	.LVL1090:
 9658              	.L974:
1304:src/display.c **** 	  }
 9659              		.loc 1 1304 23 view .LVU3126
 9660 056e 4FF00109 		mov	r9, #1
 9661              	.LVL1091:
 9662              	.L953:
1304:src/display.c **** 	  }
 9663              		.loc 1 1304 23 view .LVU3127
 9664              	.LBE533:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9665              		.loc 1 1335 5 view .LVU3128
 9666 0572 0195     		str	r5, [sp, #4]
 9667 0574 1D46     		mov	r5, r3
 9668              	.LVL1092:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9669              		.loc 1 1335 5 view .LVU3129
 9670 0576 3346     		mov	r3, r6
 9671 0578 6246     		mov	r2, ip
 9672 057a 5646     		mov	r6, r10
 9673 057c 9A46     		mov	r10, r3
 9674 057e 08E0     		b	.L951
 9675              	.LVL1093:
 9676              	.L1115:
1325:src/display.c **** #  endif
 9677              		.loc 1 1325 11 view .LVU3130
 9678 0580 5D45     		cmp	r5, fp
 9679 0582 11D0     		beq	.L948
 9680              	.LVL1094:
 9681              	.L947:
1349:src/display.c **** 	      i += segs_per_digit;
 9682              		.loc 1 1349 8 view .LVU3131
ARM GAS  /tmp/cc1e4Gjl.s 			page 285


 9683 0584 FFF7FEFF 		bl	set_dig
 9684              	.LVL1095:
1350:src/display.c **** 	    }
 9685              		.loc 1 1350 8 is_stmt 1 view .LVU3132
1350:src/display.c **** 	    }
 9686              		.loc 1 1350 10 is_stmt 0 view .LVU3133
 9687 0588 0BF1090B 		add	fp, fp, #9
 9688              	.LVL1096:
 9689              	.L949:
1314:src/display.c **** 	  if (*p == '.') {
 9690              		.loc 1 1314 11 is_stmt 1 view .LVU3134
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9691              		.loc 1 1310 9 view .LVU3135
 9692 058c 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9693              	.LVL1097:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9694              		.loc 1 1310 2 is_stmt 0 view .LVU3136
 9695 0590 92B1     		cbz	r2, .L1088
 9696              	.LVL1098:
 9697              	.L951:
1315:src/display.c **** 	    if (gotdot < 0)
 9698              		.loc 1 1315 4 is_stmt 1 view .LVU3137
1316:src/display.c **** 	      gotdot = i;
 9699              		.loc 1 1316 6 view .LVU3138
1349:src/display.c **** 	      i += segs_per_digit;
 9700              		.loc 1 1349 8 view .LVU3139
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9701              		.loc 1 1310 20 is_stmt 0 view .LVU3140
 9702 0592 452A     		cmp	r2, #69
1349:src/display.c **** 	      i += segs_per_digit;
 9703              		.loc 1 1349 8 view .LVU3141
 9704 0594 1146     		mov	r1, r2
 9705 0596 5846     		mov	r0, fp
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9706              		.loc 1 1310 20 view .LVU3142
 9707 0598 0ED0     		beq	.L1088
1315:src/display.c **** 	    if (gotdot < 0)
 9708              		.loc 1 1315 7 view .LVU3143
 9709 059a 2E2A     		cmp	r2, #46
 9710 059c F2D1     		bne	.L947
1325:src/display.c **** #  endif
 9711              		.loc 1 1325 8 is_stmt 1 view .LVU3144
1327:src/display.c **** 		i += segs_per_digit;
 9712              		.loc 1 1327 3 view .LVU3145
 9713              	.LVL1099:
1331:src/display.c **** 		  i += segs_per_digit;
 9714              		.loc 1 1331 3 view .LVU3146
1316:src/display.c **** 	      gotdot = i;
 9715              		.loc 1 1316 9 is_stmt 0 view .LVU3147
 9716 059e 002D     		cmp	r5, #0
1327:src/display.c **** 		i += segs_per_digit;
 9717              		.loc 1 1327 3 view .LVU3148
 9718 05a0 5846     		mov	r0, fp
 9719 05a2 4FF02F01 		mov	r1, #47
1316:src/display.c **** 	      gotdot = i;
 9720              		.loc 1 1316 9 view .LVU3149
 9721 05a6 EBDA     		bge	.L1115
ARM GAS  /tmp/cc1e4Gjl.s 			page 286


 9722              	.L948:
1332:src/display.c **** 		}
 9723              		.loc 1 1332 5 is_stmt 1 view .LVU3150
 9724              	.LVL1100:
1331:src/display.c **** 		  i += segs_per_digit;
 9725              		.loc 1 1331 6 is_stmt 0 view .LVU3151
 9726 05a8 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9727 05aa 012A     		cmp	r2, #1
 9728 05ac 40F28380 		bls	.L950
 9729 05b0 5D46     		mov	r5, fp
1332:src/display.c **** 		}
 9730              		.loc 1 1332 7 view .LVU3152
 9731 05b2 0BF1090B 		add	fp, fp, #9
 9732              	.LVL1101:
1332:src/display.c **** 		}
 9733              		.loc 1 1332 7 view .LVU3153
 9734 05b6 E9E7     		b	.L949
 9735              	.LVL1102:
 9736              	.L1088:
1359:src/display.c **** 	    gotdot = i;
 9737              		.loc 1 1359 4 is_stmt 1 view .LVU3154
 9738 05b8 2B46     		mov	r3, r5
1359:src/display.c **** 	    gotdot = i;
 9739              		.loc 1 1359 7 is_stmt 0 view .LVU3155
 9740 05ba 33EA2303 		bics	r3, r3, r3, asr #32
 9741 05be 28BF     		it	cs
 9742 05c0 5B46     		movcs	r3, fp
 9743              	.LVL1103:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9744              		.loc 1 1361 4 is_stmt 1 view .LVU3156
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9745              		.loc 1 1362 6 view .LVU3157
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9746              		.loc 1 1362 13 is_stmt 0 view .LVU3158
 9747 05c2 A3F11B0B 		sub	fp, r3, #27
 9748              	.LVL1104:
1363:src/display.c **** 	      break;
 9749              		.loc 1 1363 6 is_stmt 1 view .LVU3159
 9750 05c6 5246     		mov	r2, r10
1363:src/display.c **** 	      break;
 9751              		.loc 1 1363 9 is_stmt 0 view .LVU3160
 9752 05c8 BBF1000F 		cmp	fp, #0
 9753 05cc B246     		mov	r10, r6
 9754 05ce 019D     		ldr	r5, [sp, #4]
 9755 05d0 1646     		mov	r6, r2
 9756              	.LVL1105:
1363:src/display.c **** 	      break;
 9757              		.loc 1 1363 9 view .LVU3161
 9758 05d2 12DD     		ble	.L941
 9759 05d4 4B46     		mov	r3, r9
 9760 05d6 A946     		mov	r9, r5
 9761 05d8 1D46     		mov	r5, r3
 9762              	.L957:
1366:src/display.c **** 	      break;
 9763              		.loc 1 1366 6 is_stmt 1 view .LVU3162
1369:src/display.c **** 	  }
 9764              		.loc 1 1369 6 view .LVU3163
ARM GAS  /tmp/cc1e4Gjl.s 			page 287


 9765              	.LBB534:
 9766              	.LBB535:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9767              		.loc 1 370 3 view .LVU3164
 9768 05da 5846     		mov	r0, fp
 9769              	.LBE535:
 9770              	.LBE534:
1366:src/display.c **** 	      break;
 9771              		.loc 1 1366 9 is_stmt 0 view .LVU3165
 9772 05dc 15B1     		cbz	r5, .L958
 9773              	.LVL1106:
1366:src/display.c **** 	      break;
 9774              		.loc 1 1366 27 view .LVU3166
 9775 05de BBF1090F 		cmp	fp, #9
 9776 05e2 09D0     		beq	.L1083
 9777              	.L958:
1369:src/display.c **** 	  }
 9778              		.loc 1 1369 6 view .LVU3167
 9779 05e4 1B4B     		ldr	r3, .L1137+64
 9780 05e6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9781              	.LVL1107:
 9782              	.LBB537:
 9783              	.LBI534:
 367:src/display.c ****   if (sep == SEP_NONE)
 9784              		.loc 1 367 14 is_stmt 1 view .LVU3168
 9785              	.LBB536:
 368:src/display.c ****     return res;
 9786              		.loc 1 368 3 view .LVU3169
 368:src/display.c ****     return res;
 9787              		.loc 1 368 6 is_stmt 0 view .LVU3170
 9788 05e8 09B1     		cbz	r1, .L959
 9789 05ea FFF7FEFF 		bl	set_separator.part.0
 9790              	.LVL1108:
 9791              	.L959:
 368:src/display.c ****     return res;
 9792              		.loc 1 368 6 view .LVU3171
 9793              	.LBE536:
 9794              	.LBE537:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9795              		.loc 1 1361 4 is_stmt 1 view .LVU3172
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9796              		.loc 1 1362 6 view .LVU3173
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9797              		.loc 1 1362 13 is_stmt 0 view .LVU3174
 9798 05ee ABF11B0B 		sub	fp, fp, #27
 9799              	.LVL1109:
1363:src/display.c **** 	      break;
 9800              		.loc 1 1363 6 is_stmt 1 view .LVU3175
1363:src/display.c **** 	      break;
 9801              		.loc 1 1363 9 is_stmt 0 view .LVU3176
 9802 05f2 BBF1000F 		cmp	fp, #0
 9803 05f6 F0DC     		bgt	.L957
 9804              	.L1083:
1363:src/display.c **** 	      break;
 9805              		.loc 1 1363 9 view .LVU3177
 9806 05f8 4D46     		mov	r5, r9
 9807              	.LVL1110:
ARM GAS  /tmp/cc1e4Gjl.s 			page 288


 9808              	.L941:
1387:src/display.c **** 	    p++;
 9809              		.loc 1 1387 4 is_stmt 1 view .LVU3178
1387:src/display.c **** 	    p++;
 9810              		.loc 1 1387 7 is_stmt 0 view .LVU3179
 9811 05fa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9812 05fe 452B     		cmp	r3, #69
 9813 0600 00F0C180 		beq	.L1116
 9814              	.L1094:
 9815              	.LVL1111:
1387:src/display.c **** 	    p++;
 9816              		.loc 1 1387 7 view .LVU3180
 9817              	.LBE545:
 9818              	.LBE570:
3233:src/display.c **** 	      goto finish;
 9819              		.loc 1 3233 6 is_stmt 1 view .LVU3181
3233:src/display.c **** 	      goto finish;
 9820              		.loc 1 3233 9 is_stmt 0 view .LVU3182
 9821 0604 3B68     		ldr	r3, [r7]
 9822 0606 DFF85490 		ldr	r9, .L1137+72
 9823 060a 002B     		cmp	r3, #0
 9824 060c 3FF4BDAD 		beq	.L938
 9825 0610 7CE5     		b	.L933
 9826              	.L1138:
 9827 0612 00BF     		.align	2
 9828              	.L1137:
 9829 0614 0C000000 		.word	.LANCHOR17+12
 9830 0618 00000000 		.word	DispMsg
 9831 061c 08000000 		.word	.LC23
 9832 0620 18000000 		.word	.LC24
 9833 0624 00000000 		.word	LastDisplayedNumber
 9834 0628 34000000 		.word	.LC25
 9835 062c 00000000 		.word	LastDisplayedExponent
 9836 0630 00000000 		.word	.LANCHOR20
 9837 0634 AC000000 		.word	.LC42
 9838 0638 00000000 		.word	ShowRPN
 9839 063c 56040000 		.word	argcmds+1110
 9840 0640 00000000 		.word	multicmds
 9841 0644 00000000 		.word	.LANCHOR22
 9842 0648 00000000 		.word	.LANCHOR24
 9843 064c B4000000 		.word	.LC29
 9844 0650 3C000000 		.word	.LC27
 9845 0654 00000000 		.word	.LANCHOR0
 9846 0658 00000000 		.word	DispPlot
 9847 065c 00000000 		.word	ShowRegister
 9848              	.LVL1112:
 9849              	.L859:
3053:src/display.c **** 	    *bp++ = '\021';
 9850              		.loc 1 3053 11 is_stmt 1 view .LVU3183
3053:src/display.c **** 	    *bp++ = '\021';
 9851              		.loc 1 3053 14 is_stmt 0 view .LVU3184
 9852 0660 BAF1010F 		cmp	r10, #1
 9853 0664 37D0     		beq	.L1117
3060:src/display.c **** 	      *bp++ = '.';
 9854              		.loc 1 3060 6 is_stmt 1 view .LVU3185
3060:src/display.c **** 	      *bp++ = '.';
 9855              		.loc 1 3060 10 is_stmt 0 view .LVU3186
ARM GAS  /tmp/cc1e4Gjl.s 			page 289


 9856 0666 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3060:src/display.c **** 	      *bp++ = '.';
 9857              		.loc 1 3060 9 view .LVU3187
 9858 0668 DB07     		lsls	r3, r3, #31
3061:src/display.c **** 	    if (State2.numdigit > 0) {
 9859              		.loc 1 3061 8 is_stmt 1 view .LVU3188
 9860              	.LVL1113:
3061:src/display.c **** 	    if (State2.numdigit > 0) {
 9861              		.loc 1 3061 14 is_stmt 0 view .LVU3189
 9862 066a 44BF     		itt	mi
 9863 066c 2E23     		movmi	r3, #46
 9864 066e 00F8013B 		strbmi	r3, [r0], #1
 9865              	.LVL1114:
3062:src/display.c **** 	      if (State2.shuffle)
 9866              		.loc 1 3062 6 is_stmt 1 view .LVU3190
3062:src/display.c **** 	      if (State2.shuffle)
 9867              		.loc 1 3062 16 is_stmt 0 view .LVU3191
 9868 0672 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3062:src/display.c **** 	      if (State2.shuffle)
 9869              		.loc 1 3062 9 view .LVU3192
 9870 0674 8AB1     		cbz	r2, .L862
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9871              		.loc 1 3063 8 is_stmt 1 view .LVU3193
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9872              		.loc 1 3063 12 is_stmt 0 view .LVU3194
 9873 0676 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3063:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9874              		.loc 1 3063 11 view .LVU3195
 9875 0678 9E07     		lsls	r6, r3, #30
 9876 067a 40F15E81 		bpl	.L863
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9877              		.loc 1 3064 3 is_stmt 1 view .LVU3196
 9878              	.LVL1115:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9879              		.loc 1 3064 17 is_stmt 0 view .LVU3197
 9880 067e 2289     		ldrh	r2, [r4, #8]
 9881              	.LVL1116:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9882              		.loc 1 3064 34 is_stmt 1 view .LVU3198
 9883 0680 C54E     		ldr	r6, .L1139
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9884              		.loc 1 3064 10 is_stmt 0 view .LVU3199
 9885 0682 0023     		movs	r3, #0
 9886              	.LVL1117:
 9887              	.L864:
3065:src/display.c **** 	      else
 9888              		.loc 1 3065 5 is_stmt 1 discriminator 3 view .LVU3200
3065:src/display.c **** 	      else
 9889              		.loc 1 3065 24 is_stmt 0 discriminator 3 view .LVU3201
 9890 0684 02F00301 		and	r1, r2, #3
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9891              		.loc 1 3064 54 discriminator 3 view .LVU3202
 9892 0688 0133     		adds	r3, r3, #1
 9893              	.LVL1118:
3065:src/display.c **** 	      else
 9894              		.loc 1 3065 11 discriminator 3 view .LVU3203
 9895 068a 715C     		ldrb	r1, [r6, r1]	@ zero_extendqisi2
ARM GAS  /tmp/cc1e4Gjl.s 			page 290


 9896 068c 00F8011B 		strb	r1, [r0], #1
 9897              	.LVL1119:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9898              		.loc 1 3064 53 is_stmt 1 discriminator 3 view .LVU3204
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9899              		.loc 1 3064 42 is_stmt 0 discriminator 3 view .LVU3205
 9900 0690 E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9901              		.loc 1 3064 3 discriminator 3 view .LVU3206
 9902 0692 9942     		cmp	r1, r3
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9903              		.loc 1 3064 60 discriminator 3 view .LVU3207
 9904 0694 4FEAA202 		asr	r2, r2, #2
 9905              	.LVL1120:
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9906              		.loc 1 3064 34 is_stmt 1 discriminator 3 view .LVU3208
3064:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9907              		.loc 1 3064 3 is_stmt 0 discriminator 3 view .LVU3209
 9908 0698 F4DC     		bgt	.L864
 9909              	.LVL1121:
 9910              	.L862:
3070:src/display.c **** 	  }
 9911              		.loc 1 3070 6 is_stmt 1 view .LVU3210
3070:src/display.c **** 	  }
 9912              		.loc 1 3070 12 is_stmt 0 view .LVU3211
 9913 069a 5F23     		movs	r3, #95
 9914 069c BF4E     		ldr	r6, .L1139+4
 9915 069e DFF81C83 		ldr	r8, .L1139+36
 9916 06a2 0370     		strb	r3, [r0]
 9917 06a4 06E5     		b	.L852
 9918              	.LVL1122:
 9919              	.L1103:
 9920              	.LBB571:
 9921              	.LBB546:
1257:src/display.c **** 	p++;
 9922              		.loc 1 1257 2 is_stmt 1 view .LVU3212
 9923              	.LBB538:
 9924              	.LBI538:
 296:src/display.c **** {
 9925              		.loc 1 296 13 view .LVU3213
 9926              	.LBB539:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9927              		.loc 1 298 3 view .LVU3214
 298:src/display.c ****   set_dot(MANT_SIGN);
 9928              		.loc 1 298 25 is_stmt 0 view .LVU3215
 9929 06a6 BE4A     		ldr	r2, .L1139+8
 299:src/display.c **** }
 9930              		.loc 1 299 3 view .LVU3216
 9931 06a8 8120     		movs	r0, #129
 9932              	.LVL1123:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9933              		.loc 1 298 25 view .LVU3217
 9934 06aa 1370     		strb	r3, [r2]
 299:src/display.c **** }
 9935              		.loc 1 299 3 is_stmt 1 view .LVU3218
 9936              	.LBE539:
 9937              	.LBE538:
ARM GAS  /tmp/cc1e4Gjl.s 			page 291


1258:src/display.c ****       }
 9938              		.loc 1 1258 3 is_stmt 0 view .LVU3219
 9939 06ac 0AF1010A 		add	r10, r10, #1
 9940              	.LVL1124:
 9941              	.LBB541:
 9942              	.LBB540:
 299:src/display.c **** }
 9943              		.loc 1 299 3 view .LVU3220
 9944 06b0 FFF7FEFF 		bl	set_dot
 9945              	.LVL1125:
 9946              	.LBE540:
 9947              	.LBE541:
1258:src/display.c ****       }
 9948              		.loc 1 1258 2 is_stmt 1 view .LVU3221
1258:src/display.c ****       }
 9949              		.loc 1 1258 2 is_stmt 0 view .LVU3222
 9950 06b4 4CE5     		b	.L934
 9951              	.LVL1126:
 9952              	.L950:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9953              		.loc 1 1335 5 is_stmt 1 view .LVU3223
 9954 06b6 BB4B     		ldr	r3, .L1139+12
 9955 06b8 0022     		movs	r2, #0
 9956 06ba 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9957 06bc ABF10900 		sub	r0, fp, #9
 9958              	.LVL1127:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9959              		.loc 1 1335 5 is_stmt 0 view .LVU3224
 9960 06c0 FFF7FEFF 		bl	set_decimal
 9961              	.LVL1128:
 9962 06c4 5D46     		mov	r5, fp
 9963 06c6 61E7     		b	.L949
 9964              	.LVL1129:
 9965              	.L940:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9966              		.loc 1 1310 9 is_stmt 1 view .LVU3225
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9967              		.loc 1 1310 2 is_stmt 0 view .LVU3226
 9968 06c8 BCF1000F 		cmp	ip, #0
 9969 06cc 95D0     		beq	.L941
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9970              		.loc 1 1270 4 view .LVU3227
 9971 06ce CB46     		mov	fp, r9
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9972              		.loc 1 1247 11 view .LVU3228
 9973 06d0 4FF0FF33 		mov	r3, #-1
 9974 06d4 4DE7     		b	.L953
 9975              	.LVL1130:
 9976              	.L1117:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9977              		.loc 1 1247 11 view .LVU3229
 9978              	.LBE546:
 9979              	.LBE571:
3054:src/display.c **** 	    *bp++ = '_';
 9980              		.loc 1 3054 6 is_stmt 1 view .LVU3230
3054:src/display.c **** 	    *bp++ = '_';
 9981              		.loc 1 3054 12 is_stmt 0 view .LVU3231
ARM GAS  /tmp/cc1e4Gjl.s 			page 292


 9982 06d6 1122     		movs	r2, #17
 9983 06d8 E6E4     		b	.L1086
 9984              	.LVL1131:
 9985              	.L983:
 9986              	.LBB572:
 9987              	.LBB556:
3253:src/display.c **** 	      while(*b) {
 9988              		.loc 1 3253 10 view .LVU3232
 9989 06da 5A1C     		adds	r2, r3, #1
 9990 06dc 08E6     		b	.L964
 9991              	.LVL1132:
 9992              	.L1107:
3253:src/display.c **** 	      while(*b) {
 9993              		.loc 1 3253 10 view .LVU3233
 9994              	.LBE556:
 9995              	.LBE572:
 9996              	.LBB573:
3080:src/display.c **** 	  char b2[16];
 9997              		.loc 1 3080 4 is_stmt 1 view .LVU3234
3080:src/display.c **** 	  char b2[16];
 9998              		.loc 1 3080 45 is_stmt 0 view .LVU3235
 9999 06de B24B     		ldr	r3, .L1139+16
 10000 06e0 1B68     		ldr	r3, [r3]
 10001 06e2 B3F8DC07 		ldrh	r0, [r3, #2012]
3080:src/display.c **** 	  char b2[16];
 10002              		.loc 1 3080 22 view .LVU3236
 10003 06e6 C0F34610 		ubfx	r0, r0, #5, #7
 10004 06ea FFF7FEFF 		bl	current_catalogue
 10005              	.LVL1133:
3084:src/display.c **** 	  p = catcmd(op, b2);
 10006              		.loc 1 3084 9 view .LVU3237
 10007 06ee AF49     		ldr	r1, .L1139+20
3080:src/display.c **** 	  char b2[16];
 10008              		.loc 1 3080 22 view .LVU3238
 10009 06f0 8246     		mov	r10, r0
 10010              	.LVL1134:
3081:src/display.c **** 	  const char *p;
 10011              		.loc 1 3081 4 is_stmt 1 view .LVU3239
3082:src/display.c **** 
 10012              		.loc 1 3082 4 view .LVU3240
3084:src/display.c **** 	  p = catcmd(op, b2);
 10013              		.loc 1 3084 4 view .LVU3241
3084:src/display.c **** 	  p = catcmd(op, b2);
 10014              		.loc 1 3084 9 is_stmt 0 view .LVU3242
 10015 06f2 4046     		mov	r0, r8
 10016              	.LVL1135:
3084:src/display.c **** 	  p = catcmd(op, b2);
 10017              		.loc 1 3084 9 view .LVU3243
 10018 06f4 FFF7FEFF 		bl	scopy
 10019              	.LVL1136:
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10020              		.loc 1 3085 8 view .LVU3244
 10021 06f8 08A9     		add	r1, sp, #32
3084:src/display.c **** 	  p = catcmd(op, b2);
 10022              		.loc 1 3084 9 view .LVU3245
 10023 06fa 0646     		mov	r6, r0
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/cc1e4Gjl.s 			page 293


 10024              		.loc 1 3085 8 view .LVU3246
 10025 06fc 5046     		mov	r0, r10
 10026              	.LVL1137:
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10027              		.loc 1 3085 4 is_stmt 1 view .LVU3247
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10028              		.loc 1 3085 8 is_stmt 0 view .LVU3248
 10029 06fe FFF7FEFF 		bl	catcmd
 10030              	.LVL1138:
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10031              		.loc 1 3086 7 view .LVU3249
 10032 0702 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10033 0704 142B     		cmp	r3, #20
3085:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10034              		.loc 1 3085 8 view .LVU3250
 10035 0706 0146     		mov	r1, r0
 10036              	.LVL1139:
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10037              		.loc 1 3086 4 is_stmt 1 view .LVU3251
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10038              		.loc 1 3086 7 is_stmt 0 view .LVU3252
 10039 0708 05D0     		beq	.L867
3086:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10040              		.loc 1 3086 29 discriminator 1 view .LVU3253
 10041 070a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10042 070c 9807     		lsls	r0, r3, #30
 10043              	.LVL1140:
3087:src/display.c **** 	  bp = scopy(bp, p);
 10044              		.loc 1 3087 6 is_stmt 1 discriminator 1 view .LVU3254
3087:src/display.c **** 	  bp = scopy(bp, p);
 10045              		.loc 1 3087 12 is_stmt 0 discriminator 1 view .LVU3255
 10046 070e 44BF     		itt	mi
 10047 0710 1423     		movmi	r3, #20
 10048 0712 06F8013B 		strbmi	r3, [r6], #1
 10049              	.LVL1141:
 10050              	.L867:
3088:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10051              		.loc 1 3088 4 is_stmt 1 view .LVU3256
3088:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10052              		.loc 1 3088 9 is_stmt 0 view .LVU3257
 10053 0716 3046     		mov	r0, r6
 10054 0718 FFF7FEFF 		bl	scopy
 10055              	.LVL1142:
3089:src/display.c **** 	    // State2.disp_small = 1;
 10056              		.loc 1 3089 4 is_stmt 1 view .LVU3258
3089:src/display.c **** 	    // State2.disp_small = 1;
 10057              		.loc 1 3089 7 is_stmt 0 view .LVU3259
 10058 071c A9F11003 		sub	r3, r9, #16
 10059 0720 012B     		cmp	r3, #1
 10060 0722 3ED9     		bls	.L1118
3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10061              		.loc 1 3096 11 is_stmt 1 view .LVU3260
3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10062              		.loc 1 3096 15 is_stmt 0 view .LVU3261
 10063 0724 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3096:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10064              		.loc 1 3096 14 view .LVU3262
ARM GAS  /tmp/cc1e4Gjl.s 			page 294


 10065 0726 5906     		lsls	r1, r3, #25
 10066 0728 7FF580AE 		bpl	.L872
3097:src/display.c **** 	      decNumber x, r;
 10067              		.loc 1 3097 6 is_stmt 1 view .LVU3263
3097:src/display.c **** 	      decNumber x, r;
 10068              		.loc 1 3097 9 is_stmt 0 view .LVU3264
 10069 072c B9F1120F 		cmp	r9, #18
 10070 0730 00F0C581 		beq	.L1119
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10071              		.loc 1 3117 13 is_stmt 1 view .LVU3265
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10072              		.loc 1 3117 46 is_stmt 0 view .LVU3266
 10073 0734 AAF58873 		sub	r3, r10, #272
3117:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10074              		.loc 1 3117 16 view .LVU3267
 10075 0738 0D2B     		cmp	r3, #13
 10076 073a 3FF677AE 		bhi	.L872
 10077              	.LBB561:
3118:src/display.c **** 	      copyreg(&z, x);
 10078              		.loc 1 3118 8 is_stmt 1 discriminator 3 view .LVU3268
3118:src/display.c **** 	      copyreg(&z, x);
 10079              		.loc 1 3118 27 is_stmt 0 discriminator 3 view .LVU3269
 10080 073e 9C4B     		ldr	r3, .L1139+24
 10081 0740 1E68     		ldr	r6, [r3]
 10082              	.LVL1143:
3119:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 10083              		.loc 1 3119 8 is_stmt 1 discriminator 3 view .LVU3270
 10084 0742 15A8     		add	r0, sp, #84
 10085 0744 3146     		mov	r1, r6
 10086 0746 FFF7FEFF 		bl	copyreg
 10087              	.LVL1144:
3120:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 10088              		.loc 1 3120 8 discriminator 3 view .LVU3271
 10089 074a 5FFA8AF0 		uxtb	r0, r10
 10090 074e FFF7FEFF 		bl	sigma_val
 10091              	.LVL1145:
3121:src/display.c **** 	      copyreg(x, &z);
 10092              		.loc 1 3121 8 discriminator 3 view .LVU3272
 10093 0752 FFF7FEFF 		bl	is_dblmode
 10094              	.LVL1146:
 10095 0756 0021     		movs	r1, #0
 10096 0758 0246     		mov	r2, r0
 10097 075a 3046     		mov	r0, r6
 10098 075c FFF7FEFF 		bl	set_x
 10099              	.LVL1147:
3122:src/display.c **** 	      skip = 1;
 10100              		.loc 1 3122 8 discriminator 3 view .LVU3273
 10101 0760 15A9     		add	r1, sp, #84
 10102 0762 3046     		mov	r0, r6
 10103 0764 FFF7FEFF 		bl	copyreg
 10104              	.LVL1148:
3123:src/display.c **** 	    }
 10105              		.loc 1 3123 8 discriminator 3 view .LVU3274
3123:src/display.c **** 	    }
 10106              		.loc 1 3123 8 is_stmt 0 discriminator 3 view .LVU3275
 10107              	.LBE561:
3126:src/display.c **** 	} else if (State2.multi) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 295


 10108              		.loc 1 3126 4 is_stmt 1 discriminator 3 view .LVU3276
 10109 0768 1EA8     		add	r0, sp, #120
 10110 076a FFF7FEFF 		bl	set_status
 10111              	.LVL1149:
3126:src/display.c **** 	} else if (State2.multi) {
 10112              		.loc 1 3126 4 is_stmt 0 discriminator 3 view .LVU3277
 10113              	.LBE573:
3216:src/display.c ****       nostk:	show_flags();
 10114              		.loc 1 3216 2 is_stmt 1 discriminator 3 view .LVU3278
 10115 076e FFF7FEFF 		bl	show_stack
 10116              	.LVL1150:
3217:src/display.c **** 	if (!skip) {
 10117              		.loc 1 3217 14 discriminator 3 view .LVU3279
 10118 0772 FFF7FEFF 		bl	show_flags
 10119              	.LVL1151:
3218:src/display.c **** 	  if (State2.runmode) {
 10120              		.loc 1 3218 2 discriminator 3 view .LVU3280
 10121              	.L871:
3263:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10122              		.loc 1 3263 2 view .LVU3281
 10123 0776 FFF7FEFF 		bl	set_annunciators
 10124              	.LVL1152:
3264:src/display.c **** 	  ShowRPN = 0;
 10125              		.loc 1 3264 2 view .LVU3282
 10126 077a 884E     		ldr	r6, .L1139+4
 10127 077c DFF83C82 		ldr	r8, .L1139+36
 10128 0780 DFF83C92 		ldr	r9, .L1139+40
 10129 0784 07E5     		b	.L847
 10130              	.LVL1153:
 10131              	.L1116:
 10132              	.LBB574:
 10133              	.LBB547:
1388:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10134              		.loc 1 1388 6 view .LVU3283
1393:src/display.c **** #  endif
 10135              		.loc 1 1393 6 view .LVU3284
 10136 0786 0AF10100 		add	r0, r10, #1
 10137              	.LVL1154:
1393:src/display.c **** #  endif
 10138              		.loc 1 1393 6 is_stmt 0 view .LVU3285
 10139 078a FFF7FEFF 		bl	s_to_i
 10140              	.LVL1155:
1393:src/display.c **** #  endif
 10141              		.loc 1 1393 6 view .LVU3286
 10142 078e 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 10143 0792 2D2B     		cmp	r3, #45
 10144 0794 0CBF     		ite	eq
 10145 0796 0621     		moveq	r1, #6
 10146 0798 0421     		movne	r1, #4
 10147 079a 0022     		movs	r2, #0
 10148 079c FFF7FEFF 		bl	set_exp
 10149              	.LVL1156:
 10150 07a0 30E7     		b	.L1094
 10151              	.LVL1157:
 10152              	.L1118:
1393:src/display.c **** #  endif
 10153              		.loc 1 1393 6 view .LVU3287
ARM GAS  /tmp/cc1e4Gjl.s 			page 296


 10154              	.LBE547:
 10155              	.LBE574:
 10156              	.LBB575:
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10157              		.loc 1 3091 6 is_stmt 1 view .LVU3288
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10158              		.loc 1 3091 9 is_stmt 0 view .LVU3289
 10159 07a2 BAF5274F 		cmp	r10, #42752
 10160 07a6 00F06A81 		beq	.L869
3091:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10161              		.loc 1 3091 41 discriminator 1 view .LVU3290
 10162 07aa BAF5284F 		cmp	r10, #43008
 10163 07ae 00F06681 		beq	.L869
3094:src/display.c **** 	    skip = 1;
 10164              		.loc 1 3094 8 is_stmt 1 view .LVU3291
3094:src/display.c **** 	    skip = 1;
 10165              		.loc 1 3094 14 is_stmt 0 view .LVU3292
 10166 07b2 0AF07F00 		and	r0, r10, #127
 10167 07b6 0021     		movs	r1, #0
 10168 07b8 FFF7FEFF 		bl	get_const
 10169              	.LVL1158:
3094:src/display.c **** 	    skip = 1;
 10170              		.loc 1 3094 8 view .LVU3293
 10171 07bc 0022     		movs	r2, #0
 10172              	.LVL1159:
 10173              	.L1090:
 10174              	.LBB562:
3115:src/display.c **** 	      skip = 1;
 10175              		.loc 1 3115 8 discriminator 1 view .LVU3294
 10176 07be 1146     		mov	r1, r2
 10177 07c0 FFF7FEFF 		bl	set_x
 10178              	.LVL1160:
3116:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10179              		.loc 1 3116 8 is_stmt 1 discriminator 1 view .LVU3295
3116:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10180              		.loc 1 3116 8 is_stmt 0 discriminator 1 view .LVU3296
 10181              	.LBE562:
3126:src/display.c **** 	} else if (State2.multi) {
 10182              		.loc 1 3126 4 is_stmt 1 discriminator 1 view .LVU3297
 10183 07c4 1EA8     		add	r0, sp, #120
 10184 07c6 FFF7FEFF 		bl	set_status
 10185              	.LVL1161:
 10186              	.L1091:
3126:src/display.c **** 	} else if (State2.multi) {
 10187              		.loc 1 3126 4 is_stmt 0 discriminator 1 view .LVU3298
 10188              	.LBE575:
3216:src/display.c ****       nostk:	show_flags();
 10189              		.loc 1 3216 2 is_stmt 1 discriminator 1 view .LVU3299
 10190 07ca FFF7FEFF 		bl	show_stack
 10191              	.LVL1162:
3217:src/display.c **** 	if (!skip) {
 10192              		.loc 1 3217 14 discriminator 1 view .LVU3300
 10193 07ce FFF7FEFF 		bl	show_flags
 10194              	.LVL1163:
3218:src/display.c **** 	  if (State2.runmode) {
 10195              		.loc 1 3218 2 discriminator 1 view .LVU3301
 10196 07d2 D0E7     		b	.L871
ARM GAS  /tmp/cc1e4Gjl.s 			page 297


 10197              	.LVL1164:
 10198              	.L1109:
3136:src/display.c **** 	  skip = 1;
 10199              		.loc 1 3136 4 view .LVU3302
 10200              	.LBB576:
 10201              	.LBI576:
2363:src/display.c **** 	int i, n;
 10202              		.loc 1 2363 19 view .LVU3303
 10203              	.LBB577:
2364:src/display.c **** 	int j = SEGS_EXP_BASE;
 10204              		.loc 1 2364 2 view .LVU3304
2365:src/display.c **** 	const int status = State2.status - 3;
 10205              		.loc 1 2365 2 view .LVU3305
2366:src/display.c **** 	char buf[16], *p = buf;
 10206              		.loc 1 2366 2 view .LVU3306
2370:src/display.c **** 	  set_status("Free:");
 10207              		.loc 1 2370 5 is_stmt 0 view .LVU3307
 10208 07d4 012B     		cmp	r3, #1
2366:src/display.c **** 	char buf[16], *p = buf;
 10209              		.loc 1 2366 12 view .LVU3308
 10210 07d6 A3F10307 		sub	r7, r3, #3
 10211              	.LVL1165:
2367:src/display.c **** 	unsigned int pc;
 10212              		.loc 1 2367 2 is_stmt 1 view .LVU3309
2368:src/display.c **** 
 10213              		.loc 1 2368 2 view .LVU3310
2370:src/display.c **** 	  set_status("Free:");
 10214              		.loc 1 2370 2 view .LVU3311
2370:src/display.c **** 	  set_status("Free:");
 10215              		.loc 1 2370 5 is_stmt 0 view .LVU3312
 10216 07da 00F01C82 		beq	.L1120
2378:src/display.c **** 	  /* Top line */
 10217              		.loc 1 2378 7 is_stmt 1 view .LVU3313
2378:src/display.c **** 	  /* Top line */
 10218              		.loc 1 2378 10 is_stmt 0 view .LVU3314
 10219 07de 7B1C     		adds	r3, r7, #1
 10220 07e0 00F0C482 		beq	.L1121
 10221              	.LBB578:
2395:src/display.c **** 	  int end;
 10222              		.loc 1 2395 4 is_stmt 1 view .LVU3315
2396:src/display.c **** 	  int group = 10;
 10223              		.loc 1 2396 4 view .LVU3316
2397:src/display.c **** 	  int start = 0;
 10224              		.loc 1 2397 4 view .LVU3317
 10225              	.LVL1166:
2398:src/display.c **** 		
 10226              		.loc 1 2398 4 view .LVU3318
2400:src/display.c **** 	    base = 10 * status;
 10227              		.loc 1 2400 4 view .LVU3319
2400:src/display.c **** 	    base = 10 * status;
 10228              		.loc 1 2400 7 is_stmt 0 view .LVU3320
 10229 07e4 092F     		cmp	r7, #9
 10230 07e6 40F37582 		ble	.L1122
2410:src/display.c **** 	    base = regX_idx;
 10231              		.loc 1 2410 9 is_stmt 1 view .LVU3321
2410:src/display.c **** 	    base = regX_idx;
 10232              		.loc 1 2410 12 is_stmt 0 view .LVU3322
ARM GAS  /tmp/cc1e4Gjl.s 			page 298


 10233 07ea 0A2F     		cmp	r7, #10
 10234 07ec 00F05482 		beq	.L1123
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10235              		.loc 1 2418 6 is_stmt 1 view .LVU3323
 10236              	.LVL1167:
2419:src/display.c **** 	    set_status("FL.00-.15");
 10237              		.loc 1 2419 6 view .LVU3324
2420:src/display.c **** 	  }
 10238              		.loc 1 2420 6 view .LVU3325
 10239 07f0 7048     		ldr	r0, .L1139+28
 10240 07f2 4FF00A09 		mov	r9, #10
 10241              	.LVL1168:
2420:src/display.c **** 	  }
 10242              		.loc 1 2420 6 is_stmt 0 view .LVU3326
 10243 07f6 FFF7FEFF 		bl	set_status
 10244              	.LVL1169:
2397:src/display.c **** 	  int start = 0;
 10245              		.loc 1 2397 8 view .LVU3327
 10246 07fa 4E46     		mov	r6, r9
2398:src/display.c **** 		
 10247              		.loc 1 2398 8 view .LVU3328
 10248 07fc 4FF0000B 		mov	fp, #0
2420:src/display.c **** 	  }
 10249              		.loc 1 2420 6 view .LVU3329
 10250 0800 0222     		movs	r2, #2
 10251 0802 4FF00908 		mov	r8, #9
 10252              	.LVL1170:
2420:src/display.c **** 	  }
 10253              		.loc 1 2420 6 view .LVU3330
 10254 0806 0720     		movs	r0, #7
2419:src/display.c **** 	    set_status("FL.00-.15");
 10255              		.loc 1 2419 10 view .LVU3331
 10256 0808 4FF07F0A 		mov	r10, #127
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10257              		.loc 1 2418 11 view .LVU3332
 10258 080c 7027     		movs	r7, #112
 10259              	.LVL1171:
 10260              	.L886:
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10261              		.loc 1 2422 4 is_stmt 1 view .LVU3333
2423:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10262              		.loc 1 2423 4 view .LVU3334
 10263              	.LBB579:
 10264              	.LBI579:
 349:src/display.c ****   if (res) {
 10265              		.loc 1 349 14 view .LVU3335
 10266              	.LBB580:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10267              		.loc 1 350 3 view .LVU3336
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10268              		.loc 1 353 5 view .LVU3337
 10269 080e 0192     		str	r2, [sp, #4]
 10270 0810 FFF7FEFF 		bl	set_dot
 10271              	.LVL1172:
 354:src/display.c ****       set_dot(posn+8);
 10272              		.loc 1 354 5 view .LVU3338
 10273              	.LBB581:
ARM GAS  /tmp/cc1e4Gjl.s 			page 299


 10274              	.LBI581:
 349:src/display.c ****   if (res) {
 10275              		.loc 1 349 14 view .LVU3339
 10276              	.LBB582:
 357:src/display.c **** #endif
 10277              		.loc 1 357 5 view .LVU3340
 357:src/display.c **** #endif
 10278              		.loc 1 357 38 is_stmt 0 view .LVU3341
 10279 0814 019A     		ldr	r2, [sp, #4]
 10280 0816 624B     		ldr	r3, .L1139+8
 10281 0818 2E21     		movs	r1, #46
 10282 081a 9954     		strb	r1, [r3, r2]
 360:src/display.c **** }
 10283              		.loc 1 360 3 is_stmt 1 view .LVU3342
 10284              	.LVL1173:
 360:src/display.c **** }
 10285              		.loc 1 360 3 is_stmt 0 view .LVU3343
 10286              	.LBE582:
 10287              	.LBE581:
 360:src/display.c **** }
 10288              		.loc 1 360 3 is_stmt 1 view .LVU3344
 360:src/display.c **** }
 10289              		.loc 1 360 3 is_stmt 0 view .LVU3345
 10290              	.LBE580:
 10291              	.LBE579:
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10292              		.loc 1 2424 4 is_stmt 1 view .LVU3346
2425:src/display.c **** 	    int k = i + base - start;
 10293              		.loc 1 2425 4 view .LVU3347
2425:src/display.c **** 	    int k = i + base - start;
 10294              		.loc 1 2425 20 view .LVU3348
 10295 081c CBEB4602 		rsb	r2, fp, r6, lsl #1
 10296 0820 D319     		adds	r3, r2, r7
 10297 0822 0293     		str	r3, [sp, #8]
 10298 0824 A7EB0B03 		sub	r3, r7, fp
 10299 0828 CDE90335 		strd	r3, r5, [sp, #12]
 10300              	.LBB583:
 10301              	.LBB584:
 10302              	.LBB585:
 10303              	.LBB586:
 10304              	.LBB587:
 357:src/display.c **** #endif
 10305              		.loc 1 357 38 is_stmt 0 view .LVU3349
 10306 082c 0191     		str	r1, [sp, #4]
 10307 082e 3E44     		add	r6, r6, r7
 10308              	.LVL1174:
 10309              	.L891:
 357:src/display.c **** #endif
 10310              		.loc 1 357 38 view .LVU3350
 10311              	.LBE587:
 10312              	.LBE586:
 10313              	.LBE585:
 10314              	.LBE584:
2426:src/display.c **** 	    int l = get_user_flag(k);
 10315              		.loc 1 2426 6 is_stmt 1 view .LVU3351
2427:src/display.c **** 	    k += group;
 10316              		.loc 1 2427 6 view .LVU3352
ARM GAS  /tmp/cc1e4Gjl.s 			page 300


2427:src/display.c **** 	    k += group;
 10317              		.loc 1 2427 14 is_stmt 0 view .LVU3353
 10318 0830 039B     		ldr	r3, [sp, #12]
 10319 0832 03EB0B00 		add	r0, r3, fp
 10320 0836 FFF7FEFF 		bl	get_user_flag
 10321              	.LVL1175:
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10322              		.loc 1 2429 9 view .LVU3354
 10323 083a 5645     		cmp	r6, r10
2427:src/display.c **** 	    k += group;
 10324              		.loc 1 2427 14 view .LVU3355
 10325 083c 0546     		mov	r5, r0
 10326              	.LVL1176:
2428:src/display.c **** 	    if (end >= k) {
 10327              		.loc 1 2428 6 is_stmt 1 view .LVU3356
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10328              		.loc 1 2429 6 view .LVU3357
2437:src/display.c **** 	    if (i == 4) {
 10329              		.loc 1 2437 8 is_stmt 0 view .LVU3358
 10330 083e 08F10907 		add	r7, r8, #9
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10331              		.loc 1 2429 9 view .LVU3359
 10332 0842 3FDD     		ble	.L1124
 10333              	.LVL1177:
 10334              	.L888:
2435:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10335              		.loc 1 2435 6 is_stmt 1 view .LVU3360
 10336 0844 2946     		mov	r1, r5
 10337 0846 4046     		mov	r0, r8
 10338 0848 FFF7FEFF 		bl	set_dig
 10339              	.LVL1178:
2436:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10340              		.loc 1 2436 6 view .LVU3361
 10341              	.LBB597:
 10342              	.LBI584:
 349:src/display.c ****   if (res) {
 10343              		.loc 1 349 14 view .LVU3362
 10344              	.LBB594:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10345              		.loc 1 350 3 view .LVU3363
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10346              		.loc 1 353 5 view .LVU3364
 10347 084c 08F10700 		add	r0, r8, #7
 10348 0850 FFF7FEFF 		bl	set_dot
 10349              	.LVL1179:
 354:src/display.c ****       set_dot(posn+8);
 10350              		.loc 1 354 5 view .LVU3365
 10351              	.LBB591:
 10352              	.LBI586:
 349:src/display.c ****   if (res) {
 10353              		.loc 1 349 14 view .LVU3366
 10354              	.LBB588:
 357:src/display.c **** #endif
 10355              		.loc 1 357 5 view .LVU3367
 357:src/display.c **** #endif
 10356              		.loc 1 357 5 is_stmt 0 view .LVU3368
 10357              	.LBE588:
ARM GAS  /tmp/cc1e4Gjl.s 			page 301


 10358              	.LBE591:
 10359              	.LBE594:
 10360              	.LBE597:
 10361              	.LBE583:
2425:src/display.c **** 	    int k = i + base - start;
 10362              		.loc 1 2425 39 is_stmt 1 view .LVU3369
 10363              	.LBB608:
 10364              	.LBB598:
 10365              	.LBB595:
 10366              	.LBB592:
 10367              	.LBB589:
 357:src/display.c **** #endif
 10368              		.loc 1 357 30 is_stmt 0 view .LVU3370
 10369 0854 584B     		ldr	r3, .L1139+32
 357:src/display.c **** #endif
 10370              		.loc 1 357 38 view .LVU3371
 10371 0856 0199     		ldr	r1, [sp, #4]
 357:src/display.c **** #endif
 10372              		.loc 1 357 30 view .LVU3372
 10373 0858 A3FB0832 		umull	r3, r2, r3, r8
 10374 085c 5208     		lsrs	r2, r2, #1
 357:src/display.c **** #endif
 10375              		.loc 1 357 38 view .LVU3373
 10376 085e 504B     		ldr	r3, .L1139+8
 357:src/display.c **** #endif
 10377              		.loc 1 357 35 view .LVU3374
 10378 0860 0132     		adds	r2, r2, #1
 10379              	.LBE589:
 10380              	.LBE592:
 10381              	.LBE595:
 10382              	.LBE598:
2438:src/display.c **** 	      set_dig(j, 8);
 10383              		.loc 1 2438 9 view .LVU3375
 10384 0862 BBF1040F 		cmp	fp, #4
 10385              	.LBB599:
 10386              	.LBB596:
 10387              	.LBB593:
 10388              	.LBB590:
 357:src/display.c **** #endif
 10389              		.loc 1 357 38 view .LVU3376
 10390 0866 03F81210 		strb	r1, [r3, r2, lsl #1]
 360:src/display.c **** }
 10391              		.loc 1 360 3 is_stmt 1 view .LVU3377
 10392              	.LVL1180:
 360:src/display.c **** }
 10393              		.loc 1 360 3 is_stmt 0 view .LVU3378
 10394              	.LBE590:
 10395              	.LBE593:
 360:src/display.c **** }
 10396              		.loc 1 360 3 is_stmt 1 view .LVU3379
 360:src/display.c **** }
 10397              		.loc 1 360 3 is_stmt 0 view .LVU3380
 10398              	.LBE596:
 10399              	.LBE599:
2437:src/display.c **** 	    if (i == 4) {
 10400              		.loc 1 2437 6 is_stmt 1 view .LVU3381
2438:src/display.c **** 	      set_dig(j, 8);
ARM GAS  /tmp/cc1e4Gjl.s 			page 302


 10401              		.loc 1 2438 6 view .LVU3382
 10402              	.LBE608:
2425:src/display.c **** 	    int k = i + base - start;
 10403              		.loc 1 2425 40 is_stmt 0 view .LVU3383
 10404 086a 0BF1010B 		add	fp, fp, #1
 10405              	.LVL1181:
2425:src/display.c **** 	    int k = i + base - start;
 10406              		.loc 1 2425 20 is_stmt 1 view .LVU3384
 10407              	.LBB609:
2438:src/display.c **** 	      set_dig(j, 8);
 10408              		.loc 1 2438 9 is_stmt 0 view .LVU3385
 10409 086e 39D0     		beq	.L1125
2438:src/display.c **** 	      set_dig(j, 8);
 10410              		.loc 1 2438 9 view .LVU3386
 10411              	.LBE609:
2425:src/display.c **** 	    int k = i + base - start;
 10412              		.loc 1 2425 4 view .LVU3387
 10413 0870 CB45     		cmp	fp, r9
 10414 0872 06F10106 		add	r6, r6, #1
 10415 0876 01D0     		beq	.L1126
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10416              		.loc 1 2418 11 view .LVU3388
 10417 0878 B846     		mov	r8, r7
 10418 087a D9E7     		b	.L891
 10419              	.L1126:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10420              		.loc 1 2418 11 view .LVU3389
 10421 087c 049D     		ldr	r5, [sp, #16]
 10422              	.LVL1182:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10423              		.loc 1 2418 11 view .LVU3390
 10424 087e 4A4F     		ldr	r7, .L1139+16
 10425              	.LVL1183:
 10426              	.L881:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10427              		.loc 1 2418 11 view .LVU3391
 10428              	.LBE578:
2446:src/display.c **** 	pc = state_pc();
 10429              		.loc 1 2446 2 is_stmt 1 view .LVU3392
2447:src/display.c **** 	if (isXROM(pc))
 10430              		.loc 1 2447 2 view .LVU3393
2447:src/display.c **** 	if (isXROM(pc))
 10431              		.loc 1 2447 7 is_stmt 0 view .LVU3394
 10432 0880 3B68     		ldr	r3, [r7]
2447:src/display.c **** 	if (isXROM(pc))
 10433              		.loc 1 2447 5 view .LVU3395
 10434 0882 B3F8E077 		ldrh	r7, [r3, #2016]
 10435              	.LVL1184:
2448:src/display.c **** 	  pc = 1;
 10436              		.loc 1 2448 2 is_stmt 1 view .LVU3396
2448:src/display.c **** 	  pc = 1;
 10437              		.loc 1 2448 6 is_stmt 0 view .LVU3397
 10438 0886 BB0B     		lsrs	r3, r7, #14
2449:src/display.c **** 	for (n=i=0; i<4; i++) {
 10439              		.loc 1 2449 7 view .LVU3398
 10440 0888 032B     		cmp	r3, #3
 10441 088a 08BF     		it	eq
ARM GAS  /tmp/cc1e4Gjl.s 			page 303


 10442 088c 0127     		moveq	r7, #1
 10443              	.LVL1185:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10444              		.loc 1 2450 2 is_stmt 1 view .LVU3399
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10445              		.loc 1 2450 14 view .LVU3400
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10446              		.loc 1 2450 8 is_stmt 0 view .LVU3401
 10447 088e 4FF00009 		mov	r9, #0
 10448 0892 6426     		movs	r6, #100
2446:src/display.c **** 	pc = state_pc();
 10449              		.loc 1 2446 4 view .LVU3402
 10450 0894 4FF06C08 		mov	r8, #108
 10451              	.LVL1186:
 10452              	.L895:
2451:src/display.c **** 	    if (++n == 4) {
 10453              		.loc 1 2451 4 is_stmt 1 view .LVU3403
2451:src/display.c **** 	    if (++n == 4) {
 10454              		.loc 1 2451 8 is_stmt 0 view .LVU3404
 10455 0898 0222     		movs	r2, #2
 10456 089a 3146     		mov	r1, r6
 10457 089c 3846     		mov	r0, r7
 10458 089e FFF7FEFF 		bl	find_label_from
 10459              	.LVL1187:
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10460              		.loc 1 2452 6 is_stmt 1 view .LVU3405
2451:src/display.c **** 	    if (++n == 4) {
 10461              		.loc 1 2451 7 is_stmt 0 view .LVU3406
 10462 08a2 58B1     		cbz	r0, .L893
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10463              		.loc 1 2452 9 view .LVU3407
 10464 08a4 09F10109 		add	r9, r9, #1
 10465              	.LVL1188:
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10466              		.loc 1 2456 8 is_stmt 1 view .LVU3408
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10467              		.loc 1 2452 9 is_stmt 0 view .LVU3409
 10468 08a8 B9F1040F 		cmp	r9, #4
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10469              		.loc 1 2456 8 view .LVU3410
 10470 08ac A6F12301 		sub	r1, r6, #35
 10471 08b0 4046     		mov	r0, r8
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10472              		.loc 1 2452 9 view .LVU3411
 10473 08b2 46D0     		beq	.L1127
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10474              		.loc 1 2456 8 view .LVU3412
 10475 08b4 FFF7FEFF 		bl	set_dig
 10476              	.LVL1189:
2457:src/display.c **** 	    }
 10477              		.loc 1 2457 8 is_stmt 1 view .LVU3413
2457:src/display.c **** 	    }
 10478              		.loc 1 2457 10 is_stmt 0 view .LVU3414
 10479 08b8 08F10708 		add	r8, r8, #7
 10480              	.LVL1190:
 10481              	.L893:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 304


 10482              		.loc 1 2450 19 is_stmt 1 view .LVU3415
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10483              		.loc 1 2450 14 view .LVU3416
 10484 08bc 0136     		adds	r6, r6, #1
 10485              	.LVL1191:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10486              		.loc 1 2450 2 is_stmt 0 view .LVU3417
 10487 08be 682E     		cmp	r6, #104
 10488 08c0 EAD1     		bne	.L895
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10489              		.loc 1 2450 2 view .LVU3418
 10490 08c2 82E7     		b	.L1091
 10491              	.LVL1192:
 10492              	.L1124:
 10493              	.LBB611:
 10494              	.LBB610:
2430:src/display.c **** 	      k += group;
 10495              		.loc 1 2430 8 is_stmt 1 view .LVU3419
2430:src/display.c **** 	      k += group;
 10496              		.loc 1 2430 14 is_stmt 0 view .LVU3420
 10497 08c4 3046     		mov	r0, r6
 10498              	.LVL1193:
2430:src/display.c **** 	      k += group;
 10499              		.loc 1 2430 14 view .LVU3421
 10500 08c6 FFF7FEFF 		bl	get_user_flag
 10501              	.LVL1194:
 10502 08ca 029B     		ldr	r3, [sp, #8]
 10503 08cc 03EB0B02 		add	r2, r3, fp
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10504              		.loc 1 2432 11 view .LVU3422
 10505 08d0 9245     		cmp	r10, r2
2430:src/display.c **** 	      k += group;
 10506              		.loc 1 2430 10 view .LVU3423
 10507 08d2 45EA4005 		orr	r5, r5, r0, lsl #1
 10508              	.LVL1195:
2431:src/display.c **** 	      if (end >= k)
 10509              		.loc 1 2431 8 is_stmt 1 view .LVU3424
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10510              		.loc 1 2432 8 view .LVU3425
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10511              		.loc 1 2432 11 is_stmt 0 view .LVU3426
 10512 08d6 B5DB     		blt	.L888
2433:src/display.c **** 	    }
 10513              		.loc 1 2433 3 is_stmt 1 view .LVU3427
2433:src/display.c **** 	    }
 10514              		.loc 1 2433 9 is_stmt 0 view .LVU3428
 10515 08d8 1046     		mov	r0, r2
 10516 08da FFF7FEFF 		bl	get_user_flag
 10517              	.LVL1196:
2433:src/display.c **** 	    }
 10518              		.loc 1 2433 5 view .LVU3429
 10519 08de 45EA8005 		orr	r5, r5, r0, lsl #2
 10520              	.LVL1197:
2433:src/display.c **** 	    }
 10521              		.loc 1 2433 5 view .LVU3430
 10522 08e2 AFE7     		b	.L888
 10523              	.LVL1198:
ARM GAS  /tmp/cc1e4Gjl.s 			page 305


 10524              	.L1125:
2439:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10525              		.loc 1 2439 8 is_stmt 1 view .LVU3431
 10526 08e4 0821     		movs	r1, #8
 10527 08e6 3846     		mov	r0, r7
 10528 08e8 FFF7FEFF 		bl	set_dig
 10529              	.LVL1199:
2440:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10530              		.loc 1 2440 8 view .LVU3432
 10531              	.LBB600:
 10532              	.LBI600:
 349:src/display.c ****   if (res) {
 10533              		.loc 1 349 14 view .LVU3433
 10534              	.LBB601:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10535              		.loc 1 350 3 view .LVU3434
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10536              		.loc 1 353 5 view .LVU3435
 10537 08ec 08F11000 		add	r0, r8, #16
 10538 08f0 FFF7FEFF 		bl	set_dot
 10539              	.LVL1200:
 354:src/display.c ****       set_dot(posn+8);
 10540              		.loc 1 354 5 view .LVU3436
 10541              	.LBB602:
 10542              	.LBI602:
 349:src/display.c ****   if (res) {
 10543              		.loc 1 349 14 view .LVU3437
 10544              	.LBB603:
 357:src/display.c **** #endif
 10545              		.loc 1 357 5 view .LVU3438
 357:src/display.c **** #endif
 10546              		.loc 1 357 30 is_stmt 0 view .LVU3439
 10547 08f4 304B     		ldr	r3, .L1139+32
 357:src/display.c **** #endif
 10548              		.loc 1 357 38 view .LVU3440
 10549 08f6 0199     		ldr	r1, [sp, #4]
 357:src/display.c **** #endif
 10550              		.loc 1 357 30 view .LVU3441
 10551 08f8 A3FB0723 		umull	r2, r3, r3, r7
 10552 08fc 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10553              		.loc 1 357 38 view .LVU3442
 10554 08fe 284A     		ldr	r2, .L1139+8
 357:src/display.c **** #endif
 10555              		.loc 1 357 35 view .LVU3443
 10556 0900 0133     		adds	r3, r3, #1
 10557              	.LBE603:
 10558              	.LBE602:
 10559              	.LBE601:
 10560              	.LBE600:
2441:src/display.c **** 	    }
 10561              		.loc 1 2441 10 view .LVU3444
 10562 0902 08F11207 		add	r7, r8, #18
 10563              	.LVL1201:
 10564              	.LBB607:
 10565              	.LBB606:
 10566              	.LBB605:
ARM GAS  /tmp/cc1e4Gjl.s 			page 306


 10567              	.LBB604:
 357:src/display.c **** #endif
 10568              		.loc 1 357 38 view .LVU3445
 10569 0906 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 10570              		.loc 1 360 3 is_stmt 1 view .LVU3446
 10571              	.LVL1202:
 360:src/display.c **** }
 10572              		.loc 1 360 3 is_stmt 0 view .LVU3447
 10573              	.LBE604:
 10574              	.LBE605:
 360:src/display.c **** }
 10575              		.loc 1 360 3 is_stmt 1 view .LVU3448
 360:src/display.c **** }
 10576              		.loc 1 360 3 is_stmt 0 view .LVU3449
 10577              	.LBE606:
 10578              	.LBE607:
2441:src/display.c **** 	    }
 10579              		.loc 1 2441 8 is_stmt 1 view .LVU3450
2441:src/display.c **** 	    }
 10580              		.loc 1 2441 8 is_stmt 0 view .LVU3451
 10581              	.LBE610:
2425:src/display.c **** 	    int k = i + base - start;
 10582              		.loc 1 2425 39 is_stmt 1 view .LVU3452
2425:src/display.c **** 	    int k = i + base - start;
 10583              		.loc 1 2425 20 view .LVU3453
 10584 090a 0136     		adds	r6, r6, #1
2425:src/display.c **** 	    int k = i + base - start;
 10585              		.loc 1 2425 40 is_stmt 0 view .LVU3454
 10586 090c 4FF0050B 		mov	fp, #5
 10587              	.LVL1203:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10588              		.loc 1 2418 11 view .LVU3455
 10589 0910 B846     		mov	r8, r7
 10590 0912 8DE7     		b	.L891
 10591              	.LVL1204:
 10592              	.L980:
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10593              		.loc 1 2418 11 view .LVU3456
 10594              	.LBE611:
 10595              	.LBE577:
 10596              	.LBE576:
 10597              	.LBB618:
 10598              	.LBB548:
 10599              	.LBB542:
1290:src/display.c **** 	    if (gotdot <= j) {
 10600              		.loc 1 1290 8 view .LVU3457
 10601 0914 4FF0090B 		mov	fp, #9
 10602              	.LVL1205:
 10603              	.L945:
1303:src/display.c **** 	    overflow_to_left = 1;
 10604              		.loc 1 1303 6 is_stmt 1 view .LVU3458
 10605 0918 3C21     		movs	r1, #60
 10606 091a 0020     		movs	r0, #0
 10607 091c FFF7FEFF 		bl	set_dig
 10608              	.LVL1206:
1304:src/display.c **** 	  }
ARM GAS  /tmp/cc1e4Gjl.s 			page 307


 10609              		.loc 1 1304 6 view .LVU3459
1304:src/display.c **** 	  }
 10610              		.loc 1 1304 6 is_stmt 0 view .LVU3460
 10611 0920 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 10612              		.loc 1 1304 6 view .LVU3461
 10613              	.LBE542:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10614              		.loc 1 1310 9 is_stmt 1 view .LVU3462
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10615              		.loc 1 1310 2 is_stmt 0 view .LVU3463
 10616 0924 0023     		movs	r3, #0
 10617 0926 BCF1000F 		cmp	ip, #0
 10618 092a 7FF420AE 		bne	.L974
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10619              		.loc 1 1310 2 view .LVU3464
 10620 092e 69E6     		b	.L1094
 10621              	.LVL1207:
 10622              	.L1113:
1253:src/display.c **** #endif
 10623              		.loc 1 1253 11 view .LVU3465
 10624 0930 8146     		mov	r9, r0
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10625              		.loc 1 1270 4 view .LVU3466
 10626 0932 8346     		mov	fp, r0
 10627              	.LBB543:
1306:src/display.c **** 	}
 10628              		.loc 1 1306 16 view .LVU3467
 10629 0934 4FF0FF33 		mov	r3, #-1
 10630              	.LVL1208:
1306:src/display.c **** 	}
 10631              		.loc 1 1306 16 view .LVU3468
 10632 0938 1BE6     		b	.L953
 10633              	.LVL1209:
 10634              	.L863:
1306:src/display.c **** 	}
 10635              		.loc 1 1306 16 view .LVU3469
 10636              	.LBE543:
 10637              	.LBE548:
 10638              	.LBE618:
3067:src/display.c **** 	    }
 10639              		.loc 1 3067 3 is_stmt 1 view .LVU3470
3067:src/display.c **** 	    }
 10640              		.loc 1 3067 8 is_stmt 0 view .LVU3471
 10641 093a 2189     		ldrh	r1, [r4, #8]
 10642 093c FFF7FEFF 		bl	num_arg_0
 10643              	.LVL1210:
3067:src/display.c **** 	    }
 10644              		.loc 1 3067 8 view .LVU3472
 10645 0940 ABE6     		b	.L862
 10646              	.LVL1211:
 10647              	.L1127:
 10648              	.LBB619:
 10649              	.LBB614:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10650              		.loc 1 2453 8 is_stmt 1 view .LVU3473
 10651 0942 4C21     		movs	r1, #76
ARM GAS  /tmp/cc1e4Gjl.s 			page 308


 10652 0944 7320     		movs	r0, #115
 10653              	.LVL1212:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10654              		.loc 1 2453 8 is_stmt 0 view .LVU3474
 10655 0946 FFF7FEFF 		bl	set_dig
 10656              	.LVL1213:
2454:src/display.c **** 	    } else {
 10657              		.loc 1 2454 8 is_stmt 1 view .LVU3475
 10658 094a 4C21     		movs	r1, #76
 10659 094c 7A20     		movs	r0, #122
 10660 094e FFF7FEFF 		bl	set_dig
 10661              	.LVL1214:
 10662 0952 B3E7     		b	.L893
 10663              	.LVL1215:
 10664              	.L912:
2454:src/display.c **** 	    } else {
 10665              		.loc 1 2454 8 is_stmt 0 view .LVU3476
 10666              	.LBE614:
 10667              	.LBE619:
3192:src/display.c **** 	  if (i > 0)
 10668              		.loc 1 3192 4 is_stmt 1 view .LVU3477
3192:src/display.c **** 	  if (i > 0)
 10669              		.loc 1 3192 8 is_stmt 0 view .LVU3478
 10670 0954 144B     		ldr	r3, .L1139+16
 10671 0956 1B68     		ldr	r3, [r3]
 10672 0958 B3F8E007 		ldrh	r0, [r3, #2016]
 10673              	.LVL1216:
3193:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10674              		.loc 1 3193 4 is_stmt 1 view .LVU3479
3193:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10675              		.loc 1 3193 7 is_stmt 0 view .LVU3480
 10676 095c 0028     		cmp	r0, #0
 10677 095e 00F07D81 		beq	.L923
3194:src/display.c **** 	  else
 10678              		.loc 1 3194 6 is_stmt 1 view .LVU3481
 10679 0962 FFF7FEFF 		bl	getprog
 10680              	.LVL1217:
3194:src/display.c **** 	  else
 10681              		.loc 1 3194 6 is_stmt 0 view .LVU3482
 10682 0966 1EA9     		add	r1, sp, #120
 10683 0968 FFF7FEFF 		bl	prt
 10684              	.LVL1218:
 10685 096c FFF7FEFF 		bl	set_status
 10686              	.LVL1219:
 10687              	.L924:
3197:src/display.c **** #if 0
 10688              		.loc 1 3197 4 is_stmt 1 view .LVU3483
 10689 0970 8920     		movs	r0, #137
 10690 0972 FFF7FEFF 		bl	set_dot
 10691              	.LVL1220:
3212:src/display.c **** 	      annuc = 1;
 10692              		.loc 1 3212 6 view .LVU3484
3212:src/display.c **** 	      annuc = 1;
 10693              		.loc 1 3212 10 is_stmt 0 view .LVU3485
 10694 0976 FFF7FEFF 		bl	cur_shift
 10695              	.LVL1221:
3212:src/display.c **** 	      annuc = 1;
ARM GAS  /tmp/cc1e4Gjl.s 			page 309


 10696              		.loc 1 3212 49 view .LVU3486
 10697 097a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10698 097c 03F00603 		and	r3, r3, #6
 10699 0980 1843     		orrs	r0, r0, r3
 10700 0982 10F0FF0F 		tst	r0, #255
 10701 0986 40F06181 		bne	.L925
3217:src/display.c **** 	if (!skip) {
 10702              		.loc 1 3217 14 is_stmt 1 view .LVU3487
 10703 098a FFF7FEFF 		bl	show_flags
 10704              	.LVL1222:
3218:src/display.c **** 	  if (State2.runmode) {
 10705              		.loc 1 3218 2 view .LVU3488
 10706 098e 034E     		ldr	r6, .L1139+4
 10707 0990 DFF82880 		ldr	r8, .L1139+36
 10708              	.LVL1223:
3218:src/display.c **** 	  if (State2.runmode) {
 10709              		.loc 1 3218 2 is_stmt 0 view .LVU3489
 10710 0994 5AE4     		b	.L849
 10711              	.L1140:
 10712 0996 00BF     		.align	2
 10713              	.L1139:
 10714 0998 BC000000 		.word	.LC28
 10715 099c 00000000 		.word	DispMsg
 10716 09a0 00000000 		.word	LastDisplayedNumber
 10717 09a4 00000000 		.word	.LANCHOR1
 10718 09a8 00000000 		.word	main_ram
 10719 09ac 3C000000 		.word	.LC27
 10720 09b0 00000000 		.word	StackBase
 10721 09b4 8C000000 		.word	.LC38
 10722 09b8 398EE338 		.word	954437177
 10723 09bc 00000000 		.word	DispPlot
 10724 09c0 00000000 		.word	ShowRegister
 10725              	.LVL1224:
 10726              	.L1111:
3142:src/display.c **** 	  skip = 1;
 10727              		.loc 1 3142 4 is_stmt 1 view .LVU3490
 10728              	.LBB620:
 10729              	.LBI620:
2496:src/display.c **** 	char buf[16], *bp;
 10730              		.loc 1 2496 19 view .LVU3491
 10731              	.LBB621:
2497:src/display.c **** 	int n = State2.digval;
 10732              		.loc 1 2497 2 view .LVU3492
2498:src/display.c **** 	
 10733              		.loc 1 2498 2 view .LVU3493
2498:src/display.c **** 	
 10734              		.loc 1 2498 6 is_stmt 0 view .LVU3494
 10735 09c4 B4F80880 		ldrh	r8, [r4, #8]
 10736              	.LVL1225:
2505:src/display.c **** 	  n;
 10737              		.loc 1 2505 2 is_stmt 1 view .LVU3495
2505:src/display.c **** 	  n;
 10738              		.loc 1 2505 54 is_stmt 0 view .LVU3496
 10739 09c8 CA07     		lsls	r2, r1, #31
 10740 09ca 4CBF     		ite	mi
 10741 09cc 08F17007 		addmi	r7, r8, #112
2498:src/display.c **** 	
ARM GAS  /tmp/cc1e4Gjl.s 			page 310


 10742              		.loc 1 2498 6 view .LVU3497
 10743 09d0 4746     		movpl	r7, r8
 10744              	.LVL1226:
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10745              		.loc 1 2509 2 is_stmt 1 view .LVU3498
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10746              		.loc 1 2509 5 is_stmt 0 view .LVU3499
 10747 09d2 11F00401 		ands	r1, r1, #4
 10748 09d6 00F04581 		beq	.L903
2510:src/display.c **** 	}
 10749              		.loc 1 2510 4 is_stmt 1 view .LVU3500
2510:src/display.c **** 	}
 10750              		.loc 1 2510 15 is_stmt 0 view .LVU3501
 10751 09da 15A9     		add	r1, sp, #84
 10752 09dc 3846     		mov	r0, r7
 10753 09de FFF7FEFF 		bl	alpha_rcl_s
 10754              	.LVL1227:
2510:src/display.c **** 	}
 10755              		.loc 1 2510 4 view .LVU3502
 10756 09e2 FFF7FEFF 		bl	set_status
 10757              	.LVL1228:
 10758              	.L904:
2532:src/display.c ****       }
 10759              		.loc 1 2532 2 is_stmt 1 view .LVU3503
 10760 09e6 3846     		mov	r0, r7
 10761 09e8 0021     		movs	r1, #0
 10762 09ea FFF7FEFF 		bl	format_reg
 10763              	.LVL1229:
 10764              	.LBE621:
 10765              	.LBE620:
3143:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10766              		.loc 1 3143 4 view .LVU3504
3144:src/display.c **** 	    annunciators();
 10767              		.loc 1 3144 4 view .LVU3505
3144:src/display.c **** 	    annunciators();
 10768              		.loc 1 3144 7 is_stmt 0 view .LVU3506
 10769 09ee BAF1000F 		cmp	r10, #0
 10770 09f2 0AD1     		bne	.L910
3144:src/display.c **** 	    annunciators();
 10771              		.loc 1 3144 25 discriminator 1 view .LVU3507
 10772 09f4 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10773 09f6 012B     		cmp	r3, #1
 10774 09f8 7FF4E7AE 		bne	.L1091
3144:src/display.c **** 	    annunciators();
 10775              		.loc 1 3144 56 discriminator 2 view .LVU3508
 10776 09fc C94B     		ldr	r3, .L1141
 10777 09fe 1B68     		ldr	r3, [r3]
 10778 0a00 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10779 0a04 DE07     		lsls	r6, r3, #31
 10780 0a06 7FF5E0AE 		bpl	.L1091
 10781              	.L910:
3145:src/display.c **** 	  }
 10782              		.loc 1 3145 6 is_stmt 1 view .LVU3509
 10783 0a0a FFF7FEFF 		bl	annunciators
 10784              	.LVL1230:
3216:src/display.c ****       nostk:	show_flags();
 10785              		.loc 1 3216 2 view .LVU3510
ARM GAS  /tmp/cc1e4Gjl.s 			page 311


 10786 0a0e DCE6     		b	.L1091
 10787              	.LVL1231:
 10788              	.L1110:
3139:src/display.c **** 	  skip = 1;
 10789              		.loc 1 3139 4 view .LVU3511
 10790              	.LBB624:
 10791              	.LBI624:
2465:src/display.c **** 	char buf[16];
 10792              		.loc 1 2465 19 view .LVU3512
 10793              	.LBB625:
2466:src/display.c **** 	unsigned short int pc = State2.digval;
 10794              		.loc 1 2466 2 view .LVU3513
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10795              		.loc 1 2467 2 view .LVU3514
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10796              		.loc 1 2467 21 is_stmt 0 view .LVU3515
 10797 0a10 B4F80890 		ldrh	r9, [r4, #8]
 10798              	.LVL1232:
2468:src/display.c **** 	int n = nLIB(pc);
 10799              		.loc 1 2468 2 is_stmt 1 view .LVU3516
2473:src/display.c **** #ifndef REALBUILD
 10800              		.loc 1 2473 27 is_stmt 0 view .LVU3517
 10801 0a14 DFF84C83 		ldr	r8, .L1141+64
 10802              	.LVL1233:
2475:src/display.c **** #endif
 10803              		.loc 1 2475 41 view .LVU3518
 10804 0a18 C34F     		ldr	r7, .L1141+4
2468:src/display.c **** 	int n = nLIB(pc);
 10805              		.loc 1 2468 20 view .LVU3519
 10806 0a1a 4846     		mov	r0, r9
 10807 0a1c FFF7FEFF 		bl	getprog
 10808              	.LVL1234:
 10809 0a20 4FEA9936 		lsr	r6, r9, #14
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10810              		.loc 1 2472 2 view .LVU3520
 10811 0a24 15A9     		add	r1, sp, #84
2468:src/display.c **** 	int n = nLIB(pc);
 10812              		.loc 1 2468 20 view .LVU3521
 10813 0a26 8246     		mov	r10, r0
 10814              	.LVL1235:
2469:src/display.c **** 	unsigned short int lblpc;
 10815              		.loc 1 2469 2 is_stmt 1 view .LVU3522
2470:src/display.c **** 
 10816              		.loc 1 2470 2 view .LVU3523
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10817              		.loc 1 2472 2 view .LVU3524
2473:src/display.c **** #ifndef REALBUILD
 10818              		.loc 1 2473 27 is_stmt 0 view .LVU3525
 10819 0a28 06EB8606 		add	r6, r6, r6, lsl #2
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10820              		.loc 1 2472 2 view .LVU3526
 10821 0a2c FFF7FEFF 		bl	prt
 10822              	.LVL1236:
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10823              		.loc 1 2472 2 view .LVU3527
 10824 0a30 FFF7FEFF 		bl	set_status
 10825              	.LVL1237:
ARM GAS  /tmp/cc1e4Gjl.s 			page 312


2473:src/display.c **** #ifndef REALBUILD
 10826              		.loc 1 2473 2 is_stmt 1 view .LVU3528
 10827 0a34 08EB0600 		add	r0, r8, r6
 10828 0a38 0021     		movs	r1, #0
 10829 0a3a FFF7FEFF 		bl	set_digits_string
 10830              	.LVL1238:
2475:src/display.c **** #endif
 10831              		.loc 1 2475 2 view .LVU3529
 10832 0a3e BB48     		ldr	r0, .L1141+8
 10833 0a40 07EB4601 		add	r1, r7, r6, lsl #1
 10834 0a44 FFF7FEFF 		bl	scopy
 10835              	.LVL1239:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10836              		.loc 1 2478 2 view .LVU3530
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10837              		.loc 1 2478 5 is_stmt 0 view .LVU3531
 10838 0a48 1AF4704F 		tst	r10, #61440
 10839 0a4c 3FF4BDAE 		beq	.L1091
2479:src/display.c **** 	  if (lblpc != pc) {
 10840              		.loc 1 2479 4 is_stmt 1 view .LVU3532
2479:src/display.c **** 	  if (lblpc != pc) {
 10841              		.loc 1 2479 12 is_stmt 0 view .LVU3533
 10842 0a50 5046     		mov	r0, r10
 10843 0a52 0021     		movs	r1, #0
 10844 0a54 FFF7FEFF 		bl	findmultilbl
 10845              	.LVL1240:
2479:src/display.c **** 	  if (lblpc != pc) {
 10846              		.loc 1 2479 10 view .LVU3534
 10847 0a58 86B2     		uxth	r6, r0
 10848              	.LVL1241:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10849              		.loc 1 2480 4 is_stmt 1 view .LVU3535
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10850              		.loc 1 2480 7 is_stmt 0 view .LVU3536
 10851 0a5a B145     		cmp	r9, r6
2479:src/display.c **** 	  if (lblpc != pc) {
 10852              		.loc 1 2479 12 view .LVU3537
 10853 0a5c 8246     		mov	r10, r0
 10854              	.LVL1242:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10855              		.loc 1 2480 7 view .LVU3538
 10856 0a5e 3FF4B4AE 		beq	.L1091
2481:src/display.c **** 	    n = nLIB(lblpc);
 10857              		.loc 1 2481 6 is_stmt 1 view .LVU3539
 10858 0a62 B348     		ldr	r0, .L1141+12
 10859 0a64 3F21     		movs	r1, #63
 10860 0a66 FFF7FEFF 		bl	set_digits_string
 10861              	.LVL1243:
2482:src/display.c **** 	    if (n == REGION_RAM)
 10862              		.loc 1 2482 6 view .LVU3540
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10863              		.loc 1 2483 6 view .LVU3541
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10864              		.loc 1 2483 9 is_stmt 0 view .LVU3542
 10865 0a6a B60B     		lsrs	r6, r6, #14
 10866              	.LVL1244:
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
ARM GAS  /tmp/cc1e4Gjl.s 			page 313


 10867              		.loc 1 2483 9 view .LVU3543
 10868 0a6c 40F0C680 		bne	.L900
2484:src/display.c **** 	    else {
 10869              		.loc 1 2484 8 is_stmt 1 view .LVU3544
 10870 0a70 3246     		mov	r2, r6
 10871 0a72 1FFA8AF0 		uxth	r0, r10
 10872 0a76 0121     		movs	r1, #1
 10873 0a78 FFF7FEFF 		bl	set_exp
 10874              	.LVL1245:
 10875 0a7c A5E6     		b	.L1091
 10876              	.LVL1246:
 10877              	.L869:
2484:src/display.c **** 	    else {
 10878              		.loc 1 2484 8 is_stmt 0 view .LVU3545
 10879              	.LBE625:
 10880              	.LBE624:
 10881              	.LBB627:
3092:src/display.c **** 	    else
 10882              		.loc 1 3092 8 is_stmt 1 view .LVU3546
 10883 0a7e 0021     		movs	r1, #0
 10884 0a80 AC48     		ldr	r0, .L1141+16
 10885 0a82 FFF7FEFF 		bl	set_digits_string
 10886              	.LVL1247:
3126:src/display.c **** 	} else if (State2.multi) {
 10887              		.loc 1 3126 4 view .LVU3547
 10888 0a86 1EA8     		add	r0, sp, #120
 10889 0a88 FFF7FEFF 		bl	set_status
 10890              	.LVL1248:
3126:src/display.c **** 	} else if (State2.multi) {
 10891              		.loc 1 3126 4 is_stmt 0 view .LVU3548
 10892              	.LBE627:
3216:src/display.c ****       nostk:	show_flags();
 10893              		.loc 1 3216 2 is_stmt 1 view .LVU3549
 10894 0a8c FFF7FEFF 		bl	show_stack
 10895              	.LVL1249:
3217:src/display.c **** 	if (!skip) {
 10896              		.loc 1 3217 14 view .LVU3550
 10897 0a90 FFF7FEFF 		bl	show_flags
 10898              	.LVL1250:
3218:src/display.c **** 	  if (State2.runmode) {
 10899              		.loc 1 3218 2 view .LVU3551
 10900 0a94 6FE6     		b	.L871
 10901              	.LVL1251:
 10902              	.L1114:
 10903              	.LBB628:
 10904              	.LBB549:
 10905              	.LBB544:
1297:src/display.c **** 	      p++;
 10906              		.loc 1 1297 8 view .LVU3552
1298:src/display.c **** 	      if (!double_dot)
 10907              		.loc 1 1298 8 view .LVU3553
1298:src/display.c **** 	      if (!double_dot)
 10908              		.loc 1 1298 9 is_stmt 0 view .LVU3554
 10909 0a96 0AF1010A 		add	r10, r10, #1
 10910              	.LVL1252:
1299:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10911              		.loc 1 1299 8 is_stmt 1 view .LVU3555
ARM GAS  /tmp/cc1e4Gjl.s 			page 314


1300:src/display.c **** 	    }
 10912              		.loc 1 1300 3 view .LVU3556
1300:src/display.c **** 	    }
 10913              		.loc 1 1300 5 is_stmt 0 view .LVU3557
 10914 0a9a 4FF0120B 		mov	fp, #18
 10915 0a9e 3BE7     		b	.L945
 10916              	.LVL1253:
 10917              	.L913:
1300:src/display.c **** 	    }
 10918              		.loc 1 1300 5 view .LVU3558
 10919              	.LBE544:
 10920              	.LBE549:
 10921              	.LBE628:
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10922              		.loc 1 3154 11 is_stmt 1 view .LVU3559
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10923              		.loc 1 3154 15 is_stmt 0 view .LVU3560
 10924 0aa0 DFF8C482 		ldr	r8, .L1141+68
 10925              	.LVL1254:
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10926              		.loc 1 3154 15 view .LVU3561
 10927 0aa4 B8F90030 		ldrsh	r3, [r8]
3154:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10928              		.loc 1 3154 14 view .LVU3562
 10929 0aa8 002B     		cmp	r3, #0
 10930 0aaa 65D1     		bne	.L1128
3156:src/display.c **** #if 0
 10931              		.loc 1 3156 11 is_stmt 1 view .LVU3563
3156:src/display.c **** #if 0
 10932              		.loc 1 3156 14 is_stmt 0 view .LVU3564
 10933 0aac 0907     		lsls	r1, r1, #28
 10934 0aae 2BD4     		bmi	.L1129
 10935              	.LVL1255:
3216:src/display.c ****       nostk:	show_flags();
 10936              		.loc 1 3216 2 is_stmt 1 view .LVU3565
 10937 0ab0 FFF7FEFF 		bl	show_stack
 10938              	.LVL1256:
3217:src/display.c **** 	if (!skip) {
 10939              		.loc 1 3217 14 view .LVU3566
3186:src/display.c **** 	  }
 10940              		.loc 1 3186 12 is_stmt 0 view .LVU3567
 10941 0ab4 0125     		movs	r5, #1
3217:src/display.c **** 	if (!skip) {
 10942              		.loc 1 3217 14 view .LVU3568
 10943 0ab6 FFF7FEFF 		bl	show_flags
 10944              	.LVL1257:
3218:src/display.c **** 	  if (State2.runmode) {
 10945              		.loc 1 3218 2 is_stmt 1 view .LVU3569
 10946 0aba FFF7C7BB 		b	.L849
 10947              	.LVL1258:
 10948              	.L1119:
 10949              	.LBB629:
 10950              	.LBB567:
3098:src/display.c **** 	      decimal64 z;
 10951              		.loc 1 3098 8 view .LVU3570
3099:src/display.c **** 
 10952              		.loc 1 3099 8 view .LVU3571
ARM GAS  /tmp/cc1e4Gjl.s 			page 315


3101:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 10953              		.loc 1 3101 8 view .LVU3572
 10954 0abe 0CA8     		add	r0, sp, #48
 10955 0ac0 FFF7FEFF 		bl	getX
 10956              	.LVL1259:
3102:src/display.c **** 		const unsigned int f = argKIND(op);
 10957              		.loc 1 3102 8 view .LVU3573
3102:src/display.c **** 		const unsigned int f = argKIND(op);
 10958              		.loc 1 3102 11 is_stmt 0 view .LVU3574
 10959 0ac4 CAF30723 		ubfx	r3, r10, #8, #8
 10960 0ac8 022B     		cmp	r3, #2
 10961 0aca 40F08F80 		bne	.L874
 10962              	.LBB563:
3103:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10963              		.loc 1 3103 3 is_stmt 1 view .LVU3575
3103:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10964              		.loc 1 3103 22 is_stmt 0 view .LVU3576
 10965 0ace 5FFA8AFA 		uxtb	r10, r10
 10966              	.LVL1260:
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10967              		.loc 1 3104 3 is_stmt 1 view .LVU3577
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10968              		.loc 1 3104 6 is_stmt 0 view .LVU3578
 10969 0ad2 BAF1980F 		cmp	r10, #152
 10970              	.LBB564:
3107:src/display.c **** 		}
 10971              		.loc 1 3107 5 view .LVU3579
 10972 0ad6 15AE     		add	r6, sp, #84
 10973              	.LBE564:
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10974              		.loc 1 3104 6 view .LVU3580
 10975 0ad8 00F28480 		bhi	.L875
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10976              		.loc 1 3104 28 discriminator 1 view .LVU3581
 10977 0adc 1823     		movs	r3, #24
 10978 0ade 964A     		ldr	r2, .L1141+20
 10979 0ae0 03FB0AF3 		mul	r3, r3, r10
 10980 0ae4 D358     		ldr	r3, [r2, r3]
3104:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10981              		.loc 1 3104 23 discriminator 1 view .LVU3582
 10982 0ae6 002B     		cmp	r3, #0
 10983 0ae8 7CD0     		beq	.L875
 10984              	.LBB565:
3105:src/display.c **** 		  update_speed(0);
 10985              		.loc 1 3105 5 is_stmt 1 view .LVU3583
 10986              	.LVL1261:
3106:src/display.c **** 		  fp(&r, &x);
 10987              		.loc 1 3106 20 view .LVU3584
3107:src/display.c **** 		}
 10988              		.loc 1 3107 5 view .LVU3585
 10989 0aea 0CA9     		add	r1, sp, #48
 10990 0aec 3046     		mov	r0, r6
 10991 0aee 9847     		blx	r3
 10992              	.LVL1262:
 10993              	.L876:
3107:src/display.c **** 		}
 10994              		.loc 1 3107 5 is_stmt 0 view .LVU3586
ARM GAS  /tmp/cc1e4Gjl.s 			page 316


 10995              	.LBE565:
 10996              	.LBE563:
3113:src/display.c **** 	      packed_from_number(&z, &r);
 10997              		.loc 1 3113 8 is_stmt 1 discriminator 1 view .LVU3587
 10998 0af0 924A     		ldr	r2, .L1141+24
 10999 0af2 3146     		mov	r1, r6
 11000 0af4 3046     		mov	r0, r6
 11001 0af6 FFF7FEFF 		bl	decNumberNormalize
 11002              	.LVL1263:
3114:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11003              		.loc 1 3114 8 discriminator 1 view .LVU3588
 11004 0afa 06A8     		add	r0, sp, #24
 11005 0afc 3146     		mov	r1, r6
 11006 0afe FFF7FEFF 		bl	packed_from_number
 11007              	.LVL1264:
3115:src/display.c **** 	      skip = 1;
 11008              		.loc 1 3115 8 discriminator 1 view .LVU3589
 11009 0b02 0022     		movs	r2, #0
 11010 0b04 06A8     		add	r0, sp, #24
 11011 0b06 5AE6     		b	.L1090
 11012              	.L1129:
3115:src/display.c **** 	      skip = 1;
 11013              		.loc 1 3115 8 is_stmt 0 discriminator 1 view .LVU3590
 11014              	.LBE567:
 11015              	.LBE629:
3160:src/display.c **** 	    j = State2.alpha_pos;
 11016              		.loc 1 3160 6 is_stmt 1 view .LVU3591
3160:src/display.c **** 	    j = State2.alpha_pos;
 11017              		.loc 1 3160 22 is_stmt 0 view .LVU3592
 11018 0b08 864A     		ldr	r2, .L1141
 11019 0b0a 0193     		str	r3, [sp, #4]
 11020 0b0c 1168     		ldr	r1, [r2]
3160:src/display.c **** 	    j = State2.alpha_pos;
 11021              		.loc 1 3160 11 view .LVU3593
 11022 0b0e 1EA8     		add	r0, sp, #120
 11023 0b10 01F5F661 		add	r1, r1, #1968
 11024 0b14 FFF7FEFF 		bl	scopy
 11025              	.LVL1265:
3161:src/display.c **** 	    if (j != 0) {
 11026              		.loc 1 3161 16 view .LVU3594
 11027 0b18 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 11028              	.LVL1266:
3161:src/display.c **** 	    if (j != 0) {
 11029              		.loc 1 3161 6 is_stmt 1 view .LVU3595
3162:src/display.c **** 	      i = slen(buf);
 11030              		.loc 1 3162 6 view .LVU3596
3162:src/display.c **** 	      i = slen(buf);
 11031              		.loc 1 3162 9 is_stmt 0 view .LVU3597
 11032 0b1c BBF1000F 		cmp	fp, #0
 11033 0b20 12D1     		bne	.L1130
3179:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11034              		.loc 1 3179 8 is_stmt 1 view .LVU3598
3179:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11035              		.loc 1 3179 11 is_stmt 0 view .LVU3599
 11036 0b22 BAF1000F 		cmp	r10, #0
 11037 0b26 05D0     		beq	.L922
3180:src/display.c **** 		*bp++ = '\0';
ARM GAS  /tmp/cc1e4Gjl.s 			page 317


 11038              		.loc 1 3180 3 is_stmt 1 view .LVU3600
 11039              	.LVL1267:
3180:src/display.c **** 		*bp++ = '\0';
 11040              		.loc 1 3180 23 is_stmt 0 view .LVU3601
 11041 0b28 0AF1100A 		add	r10, r10, #16
3180:src/display.c **** 		*bp++ = '\0';
 11042              		.loc 1 3180 9 view .LVU3602
 11043 0b2c 80F800A0 		strb	r10, [r0]
3181:src/display.c **** 	      }
 11044              		.loc 1 3181 3 is_stmt 1 view .LVU3603
 11045              	.LVL1268:
3181:src/display.c **** 	      }
 11046              		.loc 1 3181 9 is_stmt 0 view .LVU3604
 11047 0b30 80F801B0 		strb	fp, [r0, #1]
 11048              	.LVL1269:
 11049              	.L922:
3183:src/display.c **** 	    }
 11050              		.loc 1 3183 8 is_stmt 1 view .LVU3605
 11051 0b34 1EA8     		add	r0, sp, #120
 11052 0b36 FFF7FEFF 		bl	set_status_right
 11053              	.LVL1270:
3216:src/display.c ****       nostk:	show_flags();
 11054              		.loc 1 3216 2 view .LVU3606
2973:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11055              		.loc 1 2973 6 is_stmt 0 view .LVU3607
 11056 0b3a 0025     		movs	r5, #0
3216:src/display.c ****       nostk:	show_flags();
 11057              		.loc 1 3216 2 view .LVU3608
 11058 0b3c FFF7FEFF 		bl	show_stack
 11059              	.LVL1271:
3217:src/display.c **** 	if (!skip) {
 11060              		.loc 1 3217 14 is_stmt 1 view .LVU3609
 11061 0b40 FFF7FEFF 		bl	show_flags
 11062              	.LVL1272:
3218:src/display.c **** 	  if (State2.runmode) {
 11063              		.loc 1 3218 2 view .LVU3610
 11064 0b44 FFF782BB 		b	.L849
 11065              	.LVL1273:
 11066              	.L1130:
3163:src/display.c **** 	      //				
 11067              		.loc 1 3163 8 view .LVU3611
3163:src/display.c **** 	      //				
 11068              		.loc 1 3163 12 is_stmt 0 view .LVU3612
 11069 0b48 1EA8     		add	r0, sp, #120
 11070              	.LVL1274:
3163:src/display.c **** 	      //				
 11071              		.loc 1 3163 12 view .LVU3613
 11072 0b4a FFF7FEFF 		bl	slen
 11073              	.LVL1275:
3165:src/display.c **** #ifdef BIGGER_DISPLAY
 11074              		.loc 1 3165 8 is_stmt 1 view .LVU3614
3169:src/display.c **** #endif
 11075              		.loc 1 3169 8 view .LVU3615
3165:src/display.c **** #ifdef BIGGER_DISPLAY
 11076              		.loc 1 3165 10 is_stmt 0 view .LVU3616
 11077 0b4e 0BEB4B0B 		add	fp, fp, fp, lsl #1
 11078              	.LVL1276:
ARM GAS  /tmp/cc1e4Gjl.s 			page 318


3169:src/display.c **** #endif
 11079              		.loc 1 3169 15 view .LVU3617
 11080 0b52 A0EB4B00 		sub	r0, r0, fp, lsl #1
 11081              	.LVL1277:
3169:src/display.c **** #endif
 11082              		.loc 1 3169 11 view .LVU3618
 11083 0b56 0B28     		cmp	r0, #11
 11084 0b58 7FF7ACAA 		ble	.L852
3172:src/display.c **** 		set_status_right(buf);
 11085              		.loc 1 3172 3 is_stmt 1 view .LVU3619
3172:src/display.c **** 		set_status_right(buf);
 11086              		.loc 1 3172 18 is_stmt 0 view .LVU3620
 11087 0b5c 28AB     		add	r3, sp, #160
 11088 0b5e 1A18     		adds	r2, r3, r0
 11089 0b60 019B     		ldr	r3, [sp, #4]
 11090 0b62 02F8283C 		strb	r3, [r2, #-40]
3173:src/display.c **** 		}
 11091              		.loc 1 3173 3 is_stmt 1 view .LVU3621
 11092 0b66 1EA8     		add	r0, sp, #120
 11093 0b68 FFF7FEFF 		bl	set_status_right
 11094              	.LVL1278:
3216:src/display.c ****       nostk:	show_flags();
 11095              		.loc 1 3216 2 view .LVU3622
 11096 0b6c FFF7FEFF 		bl	show_stack
 11097              	.LVL1279:
3217:src/display.c **** 	if (!skip) {
 11098              		.loc 1 3217 14 view .LVU3623
 11099 0b70 FFF7FEFF 		bl	show_flags
 11100              	.LVL1280:
3218:src/display.c **** 	  if (State2.runmode) {
 11101              		.loc 1 3218 2 view .LVU3624
 11102 0b74 FFF76ABB 		b	.L849
 11103              	.L1128:
3155:src/display.c **** 	  } else if (State2.alphas) {
 11104              		.loc 1 3155 6 view .LVU3625
3155:src/display.c **** 	  } else if (State2.alphas) {
 11105              		.loc 1 3155 48 is_stmt 0 view .LVU3626
 11106 0b78 581E     		subs	r0, r3, #1
 11107 0b7a FFF7FEFF 		bl	get_reg_n
 11108              	.LVL1281:
 11109              	.LBB630:
 11110              	.LBI630:
3310:src/display.c **** 	int glen = *graphic++;
 11111              		.loc 1 3310 19 is_stmt 1 view .LVU3627
 11112              	.LBB631:
3311:src/display.c **** 	int i, j;
 11113              		.loc 1 3311 2 view .LVU3628
3319:src/display.c **** #endif
 11114              		.loc 1 3319 15 is_stmt 0 view .LVU3629
 11115 0b7e 7049     		ldr	r1, .L1141+28
3311:src/display.c **** 	int i, j;
 11116              		.loc 1 3311 6 view .LVU3630
 11117 0b80 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 11118              	.LVL1282:
3312:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11119              		.loc 1 3312 2 is_stmt 1 view .LVU3631
3319:src/display.c **** #endif
ARM GAS  /tmp/cc1e4Gjl.s 			page 319


 11120              		.loc 1 3319 2 view .LVU3632
3319:src/display.c **** #endif
 11121              		.loc 1 3319 15 is_stmt 0 view .LVU3633
 11122 0b82 0123     		movs	r3, #1
 11123 0b84 0B70     		strb	r3, [r1]
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11124              		.loc 1 3321 2 is_stmt 1 view .LVU3634
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11125              		.loc 1 3321 5 is_stmt 0 view .LVU3635
 11126 0b86 3AB3     		cbz	r2, .L915
3322:src/display.c **** 
 11127              		.loc 1 3322 2 is_stmt 1 view .LVU3636
 11128              	.LVL1283:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11129              		.loc 1 3324 2 view .LVU3637
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11130              		.loc 1 3324 12 view .LVU3638
 11131 0b88 C118     		adds	r1, r0, r3
 11132 0b8a 0391     		str	r1, [sp, #12]
 11133 0b8c 2B2A     		cmp	r2, #43
 11134 0b8e D4BF     		ite	le
 11135 0b90 8918     		addle	r1, r1, r2
 11136 0b92 2B31     		addgt	r1, r1, #43
 11137 0b94 CDE90113 		strd	r1, r3, [sp, #4]
 11138 0b98 CDE90456 		strd	r5, r6, [sp, #16]
 11139              	.LVL1284:
 11140              	.L916:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11141              		.loc 1 3325 14 view .LVU3639
 11142 0b9c 029B     		ldr	r3, [sp, #8]
 11143 0b9e 039E     		ldr	r6, [sp, #12]
 11144 0ba0 03FA0BFA 		lsl	r10, r3, fp
 11145 0ba4 0BF19405 		add	r5, fp, #148
 11146 0ba8 06E0     		b	.L919
 11147              	.LVL1285:
 11148              	.L1132:
 11149              	.LBB632:
 11150              	.LBB633:
 340:src/display.c ****   else	clr_dot(n);
 11151              		.loc 1 340 11 is_stmt 0 view .LVU3640
 11152 0baa FFF7FEFF 		bl	set_dot
 11153              	.LVL1286:
 11154              	.L918:
 340:src/display.c ****   else	clr_dot(n);
 11155              		.loc 1 340 11 view .LVU3641
 11156              	.LBE633:
 11157              	.LBE632:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11158              		.loc 1 3325 23 is_stmt 1 view .LVU3642
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11159              		.loc 1 3325 14 view .LVU3643
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11160              		.loc 1 3325 4 is_stmt 0 view .LVU3644
 11161 0bae 019B     		ldr	r3, [sp, #4]
 11162 0bb0 B342     		cmp	r3, r6
 11163 0bb2 05F10605 		add	r5, r5, #6
 11164 0bb6 08D0     		beq	.L1131
ARM GAS  /tmp/cc1e4Gjl.s 			page 320


 11165              	.LVL1287:
 11166              	.L919:
3330:src/display.c **** #endif
 11167              		.loc 1 3330 6 is_stmt 1 view .LVU3645
 11168              	.LBB636:
 11169              	.LBI632:
 339:src/display.c ****   if (on)	set_dot(n);
 11170              		.loc 1 339 6 view .LVU3646
 11171              	.LBB634:
 340:src/display.c ****   else	clr_dot(n);
 11172              		.loc 1 340 3 view .LVU3647
 340:src/display.c ****   else	clr_dot(n);
 11173              		.loc 1 340 11 view .LVU3648
 341:src/display.c **** }
 11174              		.loc 1 341 8 view .LVU3649
 11175              	.LBE634:
 11176              	.LBE636:
3330:src/display.c **** #endif
 11177              		.loc 1 3330 37 is_stmt 0 view .LVU3650
 11178 0bb8 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11179              	.LVL1288:
 11180              	.LBB637:
 11181              	.LBB635:
 340:src/display.c ****   else	clr_dot(n);
 11182              		.loc 1 340 6 view .LVU3651
 11183 0bbc 13EA0A0F 		tst	r3, r10
 340:src/display.c ****   else	clr_dot(n);
 11184              		.loc 1 340 11 view .LVU3652
 11185 0bc0 2846     		mov	r0, r5
 340:src/display.c ****   else	clr_dot(n);
 11186              		.loc 1 340 6 view .LVU3653
 11187 0bc2 F2D1     		bne	.L1132
 341:src/display.c **** }
 11188              		.loc 1 341 8 view .LVU3654
 11189 0bc4 FFF7FEFF 		bl	clr_dot
 11190              	.LVL1289:
 11191 0bc8 F1E7     		b	.L918
 11192              	.LVL1290:
 11193              	.L1131:
 341:src/display.c **** }
 11194              		.loc 1 341 8 view .LVU3655
 11195              	.LBE635:
 11196              	.LBE637:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11197              		.loc 1 3324 17 is_stmt 1 view .LVU3656
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11198              		.loc 1 3324 18 is_stmt 0 view .LVU3657
 11199 0bca 0BF1010B 		add	fp, fp, #1
 11200              	.LVL1291:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11201              		.loc 1 3324 12 is_stmt 1 view .LVU3658
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11202              		.loc 1 3324 2 is_stmt 0 view .LVU3659
 11203 0bce BBF1060F 		cmp	fp, #6
 11204 0bd2 E3D1     		bne	.L916
 11205 0bd4 DDE90456 		ldrd	r5, r6, [sp, #16]
 11206              	.LVL1292:
ARM GAS  /tmp/cc1e4Gjl.s 			page 321


 11207              	.L915:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11208              		.loc 1 3324 2 view .LVU3660
 11209              	.LBE631:
 11210              	.LBE630:
3216:src/display.c ****       nostk:	show_flags();
 11211              		.loc 1 3216 2 is_stmt 1 view .LVU3661
 11212 0bd8 FFF7FEFF 		bl	show_stack
 11213              	.LVL1293:
3217:src/display.c **** 	if (!skip) {
 11214              		.loc 1 3217 14 view .LVU3662
 11215 0bdc FFF7FEFF 		bl	show_flags
 11216              	.LVL1294:
3218:src/display.c **** 	  if (State2.runmode) {
 11217              		.loc 1 3218 2 view .LVU3663
 11218 0be0 FFF734BB 		b	.L849
 11219              	.LVL1295:
 11220              	.L875:
 11221              	.LBB638:
 11222              	.LBB568:
 11223              	.LBB566:
3110:src/display.c **** 	      } else
 11224              		.loc 1 3110 5 view .LVU3664
 11225 0be4 3046     		mov	r0, r6
 11226 0be6 FFF7FEFF 		bl	set_NaN
 11227              	.LVL1296:
 11228 0bea 81E7     		b	.L876
 11229              	.LVL1297:
 11230              	.L874:
3110:src/display.c **** 	      } else
 11231              		.loc 1 3110 5 is_stmt 0 view .LVU3665
 11232              	.LBE566:
3112:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11233              		.loc 1 3112 3 is_stmt 1 view .LVU3666
 11234 0bec 15AE     		add	r6, sp, #84
 11235 0bee 0CAA     		add	r2, sp, #48
 11236 0bf0 0AF07F01 		and	r1, r10, #127
 11237 0bf4 3046     		mov	r0, r6
 11238 0bf6 FFF7FEFF 		bl	do_conv
 11239              	.LVL1298:
 11240 0bfa 79E7     		b	.L876
 11241              	.LVL1299:
 11242              	.L900:
3112:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11243              		.loc 1 3112 3 is_stmt 0 view .LVU3667
 11244              	.LBE568:
 11245              	.LBE638:
 11246              	.LBB639:
 11247              	.LBB626:
2486:src/display.c **** #ifndef REALBUILD
 11248              		.loc 1 2486 8 is_stmt 1 view .LVU3668
2486:src/display.c **** #ifndef REALBUILD
 11249              		.loc 1 2486 37 is_stmt 0 view .LVU3669
 11250 0bfc 06EB8600 		add	r0, r6, r6, lsl #2
2486:src/display.c **** #ifndef REALBUILD
 11251              		.loc 1 2486 8 view .LVU3670
 11252 0c00 4044     		add	r0, r0, r8
ARM GAS  /tmp/cc1e4Gjl.s 			page 322


 11253 0c02 0021     		movs	r1, #0
 11254 0c04 FFF7FEFF 		bl	set_exp_digits_string
 11255              	.LVL1300:
2488:src/display.c **** #endif
 11256              		.loc 1 2488 8 is_stmt 1 view .LVU3671
2488:src/display.c **** #endif
 11257              		.loc 1 2488 47 is_stmt 0 view .LVU3672
 11258 0c08 0A21     		movs	r1, #10
2488:src/display.c **** #endif
 11259              		.loc 1 2488 8 view .LVU3673
 11260 0c0a 01FB0671 		mla	r1, r1, r6, r7
 11261 0c0e 4748     		ldr	r0, .L1141+8
 11262 0c10 FFF7FEFF 		bl	scopy
 11263              	.LVL1301:
2488:src/display.c **** #endif
 11264              		.loc 1 2488 8 view .LVU3674
 11265              	.LBE626:
 11266              	.LBE639:
3216:src/display.c ****       nostk:	show_flags();
 11267              		.loc 1 3216 2 is_stmt 1 view .LVU3675
 11268 0c14 D9E5     		b	.L1091
 11269              	.LVL1302:
 11270              	.L1120:
 11271              	.LBB640:
 11272              	.LBB615:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11273              		.loc 1 2371 4 view .LVU3676
 11274 0c16 4B48     		ldr	r0, .L1141+32
 11275 0c18 424F     		ldr	r7, .L1141
 11276              	.LVL1303:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11277              		.loc 1 2371 4 is_stmt 0 view .LVU3677
 11278 0c1a FFF7FEFF 		bl	set_status
 11279              	.LVL1304:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11280              		.loc 1 2372 4 is_stmt 1 view .LVU3678
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11281              		.loc 1 2372 21 is_stmt 0 view .LVU3679
 11282 0c1e FFF7FEFF 		bl	free_mem
 11283              	.LVL1305:
 11284 0c22 0146     		mov	r1, r0
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11285              		.loc 1 2372 8 view .LVU3680
 11286 0c24 15A8     		add	r0, sp, #84
 11287              	.LVL1306:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11288              		.loc 1 2372 8 view .LVU3681
 11289 0c26 FFF7FEFF 		bl	num_arg
 11290              	.LVL1307:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11291              		.loc 1 2373 4 is_stmt 1 view .LVU3682
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11292              		.loc 1 2373 8 is_stmt 0 view .LVU3683
 11293 0c2a 4749     		ldr	r1, .L1141+36
 11294 0c2c FFF7FEFF 		bl	scopy
 11295              	.LVL1308:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
ARM GAS  /tmp/cc1e4Gjl.s 			page 323


 11296              		.loc 1 2373 8 view .LVU3684
 11297 0c30 0646     		mov	r6, r0
 11298              	.LVL1309:
2374:src/display.c **** 	  *p = '\0';
 11299              		.loc 1 2374 4 is_stmt 1 view .LVU3685
2374:src/display.c **** 	  *p = '\0';
 11300              		.loc 1 2374 19 is_stmt 0 view .LVU3686
 11301 0c32 FFF7FEFF 		bl	free_flash
 11302              	.LVL1310:
2374:src/display.c **** 	  *p = '\0';
 11303              		.loc 1 2374 19 view .LVU3687
 11304 0c36 0146     		mov	r1, r0
2374:src/display.c **** 	  *p = '\0';
 11305              		.loc 1 2374 8 view .LVU3688
 11306 0c38 3046     		mov	r0, r6
 11307 0c3a FFF7FEFF 		bl	num_arg
 11308              	.LVL1311:
 11309 0c3e 0346     		mov	r3, r0
 11310              	.LVL1312:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11311              		.loc 1 2375 4 is_stmt 1 view .LVU3689
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11312              		.loc 1 2375 7 is_stmt 0 view .LVU3690
 11313 0c40 0021     		movs	r1, #0
2376:src/display.c **** 	}
 11314              		.loc 1 2376 4 view .LVU3691
 11315 0c42 15A8     		add	r0, sp, #84
 11316              	.LVL1313:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11317              		.loc 1 2375 7 view .LVU3692
 11318 0c44 1970     		strb	r1, [r3]
2376:src/display.c **** 	}
 11319              		.loc 1 2376 4 is_stmt 1 view .LVU3693
 11320 0c46 FFF7FEFF 		bl	set_digits_string
 11321              	.LVL1314:
2376:src/display.c **** 	}
 11322              		.loc 1 2376 4 is_stmt 0 view .LVU3694
 11323 0c4a 19E6     		b	.L881
 11324              	.LVL1315:
 11325              	.L925:
2376:src/display.c **** 	}
 11326              		.loc 1 2376 4 view .LVU3695
 11327              	.LBE615:
 11328              	.LBE640:
3213:src/display.c **** 	  goto nostk;
 11329              		.loc 1 3213 8 is_stmt 1 view .LVU3696
3217:src/display.c **** 	if (!skip) {
 11330              		.loc 1 3217 14 view .LVU3697
 11331 0c4c FFF7FEFF 		bl	show_flags
 11332              	.LVL1316:
3218:src/display.c **** 	  if (State2.runmode) {
 11333              		.loc 1 3218 2 view .LVU3698
 11334 0c50 3E4E     		ldr	r6, .L1141+40
 11335 0c52 DFF81481 		ldr	r8, .L1141+68
 11336              	.LVL1317:
3213:src/display.c **** 	  goto nostk;
 11337              		.loc 1 3213 14 is_stmt 0 view .LVU3699
ARM GAS  /tmp/cc1e4Gjl.s 			page 324


 11338 0c56 0125     		movs	r5, #1
 11339 0c58 FFF7F8BA 		b	.L849
 11340              	.LVL1318:
 11341              	.L923:
3196:src/display.c **** 	  set_dot(STO_annun);
 11342              		.loc 1 3196 6 is_stmt 1 view .LVU3700
 11343 0c5c 3C48     		ldr	r0, .L1141+44
 11344              	.LVL1319:
3196:src/display.c **** 	  set_dot(STO_annun);
 11345              		.loc 1 3196 6 is_stmt 0 view .LVU3701
 11346 0c5e FFF7FEFF 		bl	set_status
 11347              	.LVL1320:
3196:src/display.c **** 	  set_dot(STO_annun);
 11348              		.loc 1 3196 6 view .LVU3702
 11349 0c62 85E6     		b	.L924
 11350              	.LVL1321:
 11351              	.L903:
 11352              	.LBB641:
 11353              	.LBB622:
2513:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11354              		.loc 1 2513 4 is_stmt 1 view .LVU3703
 11355 0c64 15AE     		add	r6, sp, #84
 11356 0c66 1022     		movs	r2, #16
 11357 0c68 3046     		mov	r0, r6
 11358 0c6a FFF7FEFF 		bl	xset
 11359              	.LVL1322:
2517:src/display.c **** #endif
 11360              		.loc 1 2517 4 view .LVU3704
2517:src/display.c **** #endif
 11361              		.loc 1 2517 9 is_stmt 0 view .LVU3705
 11362 0c6e 3949     		ldr	r1, .L1141+48
 11363 0c70 3046     		mov	r0, r6
 11364 0c72 FFF7FEFF 		bl	scopy_spc
 11365              	.LVL1323:
2519:src/display.c **** 	    *bp++ = '.';
 11366              		.loc 1 2519 8 view .LVU3706
 11367 0c76 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11368              	.LVL1324:
2519:src/display.c **** 	    *bp++ = '.';
 11369              		.loc 1 2519 4 is_stmt 1 view .LVU3707
2519:src/display.c **** 	    *bp++ = '.';
 11370              		.loc 1 2519 7 is_stmt 0 view .LVU3708
 11371 0c78 DB07     		lsls	r3, r3, #31
 11372 0c7a 22D5     		bpl	.L905
2520:src/display.c **** 	    if (n >= 100) {
 11373              		.loc 1 2520 6 is_stmt 1 view .LVU3709
 11374              	.LVL1325:
2520:src/display.c **** 	    if (n >= 100) {
 11375              		.loc 1 2520 12 is_stmt 0 view .LVU3710
 11376 0c7c 2E23     		movs	r3, #46
2521:src/display.c **** 	      *bp++ = '1';
 11377              		.loc 1 2521 9 view .LVU3711
 11378 0c7e B8F1630F 		cmp	r8, #99
2520:src/display.c **** 	    if (n >= 100) {
 11379              		.loc 1 2520 12 view .LVU3712
 11380 0c82 0370     		strb	r3, [r0]
2521:src/display.c **** 	      *bp++ = '1';
ARM GAS  /tmp/cc1e4Gjl.s 			page 325


 11381              		.loc 1 2521 6 is_stmt 1 view .LVU3713
2521:src/display.c **** 	      *bp++ = '1';
 11382              		.loc 1 2521 9 is_stmt 0 view .LVU3714
 11383 0c84 18DC     		bgt	.L906
2520:src/display.c **** 	    if (n >= 100) {
 11384              		.loc 1 2520 9 view .LVU3715
 11385 0c86 0130     		adds	r0, r0, #1
 11386              	.LVL1326:
 11387              	.L907:
2527:src/display.c **** 	  else
 11388              		.loc 1 2527 6 is_stmt 1 view .LVU3716
2527:src/display.c **** 	  else
 11389              		.loc 1 2527 11 is_stmt 0 view .LVU3717
 11390 0c88 4146     		mov	r1, r8
 11391 0c8a 0222     		movs	r2, #2
 11392 0c8c FFF7FEFF 		bl	num_arg_0
 11393              	.LVL1327:
 11394              	.L909:
2530:src/display.c **** 	}
 11395              		.loc 1 2530 4 is_stmt 1 view .LVU3718
 11396 0c90 3046     		mov	r0, r6
 11397 0c92 FFF7FEFF 		bl	set_status
 11398              	.LVL1328:
 11399 0c96 A6E6     		b	.L904
 11400              	.LVL1329:
 11401              	.L1123:
2530:src/display.c **** 	}
 11402              		.loc 1 2530 4 is_stmt 0 view .LVU3719
 11403              	.LBE622:
 11404              	.LBE641:
 11405              	.LBB642:
 11406              	.LBB616:
 11407              	.LBB612:
2411:src/display.c **** 	    end = regK_idx;
 11408              		.loc 1 2411 6 is_stmt 1 view .LVU3720
2412:src/display.c **** 	    start = 3;
 11409              		.loc 1 2412 6 view .LVU3721
2413:src/display.c **** 	    group = 4;
 11410              		.loc 1 2413 6 view .LVU3722
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11411              		.loc 1 2414 6 view .LVU3723
2415:src/display.c **** 	  }
 11412              		.loc 1 2415 6 view .LVU3724
 11413 0c98 2F48     		ldr	r0, .L1141+52
 11414 0c9a FFF7FEFF 		bl	set_status
 11415              	.LVL1330:
 11416 0c9e 4FF00709 		mov	r9, #7
 11417              	.LVL1331:
2415:src/display.c **** 	  }
 11418              		.loc 1 2415 6 is_stmt 0 view .LVU3725
 11419 0ca2 0822     		movs	r2, #8
 11420 0ca4 4FF02408 		mov	r8, #36
 11421              	.LVL1332:
2415:src/display.c **** 	  }
 11422              		.loc 1 2415 6 view .LVU3726
 11423 0ca8 2220     		movs	r0, #34
2413:src/display.c **** 	    group = 4;
ARM GAS  /tmp/cc1e4Gjl.s 			page 326


 11424              		.loc 1 2413 12 view .LVU3727
 11425 0caa 4FF0030B 		mov	fp, #3
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11426              		.loc 1 2414 12 view .LVU3728
 11427 0cae 0426     		movs	r6, #4
2412:src/display.c **** 	    start = 3;
 11428              		.loc 1 2412 10 view .LVU3729
 11429 0cb0 4FF06F0A 		mov	r10, #111
2411:src/display.c **** 	    end = regK_idx;
 11430              		.loc 1 2411 11 view .LVU3730
 11431 0cb4 6427     		movs	r7, #100
 11432              	.LVL1333:
2411:src/display.c **** 	    end = regK_idx;
 11433              		.loc 1 2411 11 view .LVU3731
 11434 0cb6 AAE5     		b	.L886
 11435              	.LVL1334:
 11436              	.L906:
2411:src/display.c **** 	    end = regK_idx;
 11437              		.loc 1 2411 11 view .LVU3732
 11438              	.LBE612:
 11439              	.LBE616:
 11440              	.LBE642:
 11441              	.LBB643:
 11442              	.LBB623:
2522:src/display.c **** 	      n -= 100;
 11443              		.loc 1 2522 8 is_stmt 1 view .LVU3733
2522:src/display.c **** 	      n -= 100;
 11444              		.loc 1 2522 14 is_stmt 0 view .LVU3734
 11445 0cb8 3123     		movs	r3, #49
 11446 0cba 4370     		strb	r3, [r0, #1]
2523:src/display.c **** 	    }
 11447              		.loc 1 2523 8 is_stmt 1 view .LVU3735
2523:src/display.c **** 	    }
 11448              		.loc 1 2523 10 is_stmt 0 view .LVU3736
 11449 0cbc A8F16408 		sub	r8, r8, #100
 11450              	.LVL1335:
2522:src/display.c **** 	      n -= 100;
 11451              		.loc 1 2522 11 view .LVU3737
 11452 0cc0 0230     		adds	r0, r0, #2
 11453              	.LVL1336:
 11454              	.L905:
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11455              		.loc 1 2526 4 is_stmt 1 view .LVU3738
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11456              		.loc 1 2526 7 is_stmt 0 view .LVU3739
 11457 0cc2 B8F1630F 		cmp	r8, #99
 11458 0cc6 DFDD     		ble	.L907
2529:src/display.c **** 	  set_status(buf);
 11459              		.loc 1 2529 6 is_stmt 1 view .LVU3740
 11460              	.LVL1337:
2529:src/display.c **** 	  set_status(buf);
 11461              		.loc 1 2529 22 is_stmt 0 view .LVU3741
 11462 0cc8 244B     		ldr	r3, .L1141+56
 11463 0cca 9844     		add	r8, r8, r3
 11464              	.LVL1338:
2529:src/display.c **** 	  set_status(buf);
 11465              		.loc 1 2529 12 view .LVU3742
ARM GAS  /tmp/cc1e4Gjl.s 			page 327


 11466 0ccc 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11467 0cd0 0370     		strb	r3, [r0]
 11468 0cd2 DDE7     		b	.L909
 11469              	.LVL1339:
 11470              	.L1122:
2529:src/display.c **** 	  set_status(buf);
 11471              		.loc 1 2529 12 view .LVU3743
 11472              	.LBE623:
 11473              	.LBE643:
 11474              	.LBB644:
 11475              	.LBB617:
 11476              	.LBB613:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11477              		.loc 1 2401 6 is_stmt 1 view .LVU3744
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11478              		.loc 1 2401 11 is_stmt 0 view .LVU3745
 11479 0cd4 4FF00A09 		mov	r9, #10
 11480              	.LVL1340:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11481              		.loc 1 2401 11 view .LVU3746
 11482 0cd8 09FB07F7 		mul	r7, r9, r7
 11483              	.LVL1341:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11484              		.loc 1 2402 6 is_stmt 1 view .LVU3747
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11485              		.loc 1 2402 28 is_stmt 0 view .LVU3748
 11486 0cdc 462F     		cmp	r7, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11487              		.loc 1 2403 10 view .LVU3749
 11488 0cde 2049     		ldr	r1, .L1141+60
 11489 0ce0 15A8     		add	r0, sp, #84
 11490              	.LVL1342:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11491              		.loc 1 2402 28 view .LVU3750
 11492 0ce2 BA46     		mov	r10, r7
 11493 0ce4 A8BF     		it	ge
 11494 0ce6 4FF0460A 		movge	r10, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11495              		.loc 1 2403 10 view .LVU3751
 11496 0cea FFF7FEFF 		bl	scopy
 11497              	.LVL1343:
2404:src/display.c **** 	    *p++ = '-';
 11498              		.loc 1 2404 10 view .LVU3752
 11499 0cee 3946     		mov	r1, r7
 11500 0cf0 0222     		movs	r2, #2
 11501 0cf2 FFF7FEFF 		bl	num_arg_0
 11502              	.LVL1344:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11503              		.loc 1 2402 10 view .LVU3753
 11504 0cf6 0AF11D0A 		add	r10, r10, #29
 11505              	.LVL1345:
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11506              		.loc 1 2403 6 is_stmt 1 view .LVU3754
2404:src/display.c **** 	    *p++ = '-';
 11507              		.loc 1 2404 6 view .LVU3755
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11508              		.loc 1 2405 6 view .LVU3756
ARM GAS  /tmp/cc1e4Gjl.s 			page 328


2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11509              		.loc 1 2405 11 is_stmt 0 view .LVU3757
 11510 0cfa 2D23     		movs	r3, #45
 11511 0cfc 00F8013B 		strb	r3, [r0], #1
 11512              	.LVL1346:
2406:src/display.c **** 	    *p = '\0';
 11513              		.loc 1 2406 6 is_stmt 1 view .LVU3758
2406:src/display.c **** 	    *p = '\0';
 11514              		.loc 1 2406 10 is_stmt 0 view .LVU3759
 11515 0d00 5146     		mov	r1, r10
 11516 0d02 0222     		movs	r2, #2
 11517 0d04 FFF7FEFF 		bl	num_arg_0
 11518              	.LVL1347:
2406:src/display.c **** 	    *p = '\0';
 11519              		.loc 1 2406 10 view .LVU3760
 11520 0d08 0246     		mov	r2, r0
 11521              	.LVL1348:
2407:src/display.c **** 	    set_status(buf);
 11522              		.loc 1 2407 6 is_stmt 1 view .LVU3761
2407:src/display.c **** 	    set_status(buf);
 11523              		.loc 1 2407 9 is_stmt 0 view .LVU3762
 11524 0d0a 4FF0000B 		mov	fp, #0
2408:src/display.c **** 	  }
 11525              		.loc 1 2408 6 view .LVU3763
 11526 0d0e 15A8     		add	r0, sp, #84
 11527              	.LVL1349:
2407:src/display.c **** 	    set_status(buf);
 11528              		.loc 1 2407 9 view .LVU3764
 11529 0d10 82F800B0 		strb	fp, [r2]
2408:src/display.c **** 	  }
 11530              		.loc 1 2408 6 is_stmt 1 view .LVU3765
 11531 0d14 FFF7FEFF 		bl	set_status
 11532              	.LVL1350:
2397:src/display.c **** 	  int start = 0;
 11533              		.loc 1 2397 8 is_stmt 0 view .LVU3766
 11534 0d18 4E46     		mov	r6, r9
 11535 0d1a 0222     		movs	r2, #2
 11536 0d1c 4FF00908 		mov	r8, #9
 11537              	.LVL1351:
2397:src/display.c **** 	  int start = 0;
 11538              		.loc 1 2397 8 view .LVU3767
 11539 0d20 0720     		movs	r0, #7
 11540 0d22 74E5     		b	.L886
 11541              	.L1142:
 11542              		.align	2
 11543              	.L1141:
 11544 0d24 00000000 		.word	main_ram
 11545 0d28 00000000 		.word	.LANCHOR23
 11546 0d2c 00000000 		.word	LastDisplayedNumber
 11547 0d30 98000000 		.word	.LC39
 11548 0d34 40000000 		.word	.LC30
 11549 0d38 00000000 		.word	monfuncs
 11550 0d3c 00000000 		.word	Ctx
 11551 0d40 00000000 		.word	forceDispPlot
 11552 0d44 4C000000 		.word	.LC31
 11553 0d48 54000000 		.word	.LC32
 11554 0d4c 00000000 		.word	DispMsg
ARM GAS  /tmp/cc1e4Gjl.s 			page 329


 11555 0d50 A8000000 		.word	.LC41
 11556 0d54 A0000000 		.word	.LC40
 11557 0d58 7C000000 		.word	.LC37
 11558 0d5c BC000000 		.word	.LC28
 11559 0d60 78000000 		.word	.LC36
 11560 0d64 00000000 		.word	.LANCHOR22
 11561 0d68 00000000 		.word	DispPlot
 11562              	.LVL1352:
 11563              	.L1121:
2397:src/display.c **** 	  int start = 0;
 11564              		.loc 1 2397 8 view .LVU3768
 11565              	.LBE613:
2380:src/display.c **** 	  if (SizeStatRegs)
 11566              		.loc 1 2380 4 is_stmt 1 view .LVU3769
2380:src/display.c **** 	  if (SizeStatRegs)
 11567              		.loc 1 2380 8 is_stmt 0 view .LVU3770
 11568 0d6c 15AE     		add	r6, sp, #84
 11569              	.LVL1353:
2380:src/display.c **** 	  if (SizeStatRegs)
 11570              		.loc 1 2380 8 view .LVU3771
 11571 0d6e 1849     		ldr	r1, .L1143
 11572 0d70 3046     		mov	r0, r6
 11573 0d72 FFF7FEFF 		bl	scopy
 11574              	.LVL1354:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11575              		.loc 1 2381 8 view .LVU3772
 11576 0d76 174A     		ldr	r2, .L1143+4
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11577              		.loc 1 2381 7 view .LVU3773
 11578 0d78 1268     		ldr	r2, [r2]
2380:src/display.c **** 	  if (SizeStatRegs)
 11579              		.loc 1 2380 8 view .LVU3774
 11580 0d7a 0346     		mov	r3, r0
 11581              	.LVL1355:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11582              		.loc 1 2381 4 is_stmt 1 view .LVU3775
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11583              		.loc 1 2381 7 is_stmt 0 view .LVU3776
 11584 0d7c BAB9     		cbnz	r2, .L1133
 11585              	.L883:
2383:src/display.c **** 	  set_status(buf);
 11586              		.loc 1 2383 4 is_stmt 1 view .LVU3777
2383:src/display.c **** 	  set_status(buf);
 11587              		.loc 1 2383 7 is_stmt 0 view .LVU3778
 11588 0d7e 0022     		movs	r2, #0
 11589 0d80 1A70     		strb	r2, [r3]
2384:src/display.c **** 
 11590              		.loc 1 2384 4 is_stmt 1 view .LVU3779
 11591 0d82 3046     		mov	r0, r6
 11592              	.LVL1356:
2384:src/display.c **** 
 11593              		.loc 1 2384 4 is_stmt 0 view .LVU3780
 11594 0d84 FFF7FEFF 		bl	set_status
 11595              	.LVL1357:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11596              		.loc 1 2387 4 is_stmt 1 view .LVU3781
2387:src/display.c **** 	  if (LocalRegs < 0) {
ARM GAS  /tmp/cc1e4Gjl.s 			page 330


 11597              		.loc 1 2387 8 is_stmt 0 view .LVU3782
 11598 0d88 FFF7FEFF 		bl	global_regs
 11599              	.LVL1358:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11600              		.loc 1 2388 8 view .LVU3783
 11601 0d8c 124F     		ldr	r7, .L1143+8
 11602              	.LVL1359:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11603              		.loc 1 2387 8 view .LVU3784
 11604 0d8e 0146     		mov	r1, r0
 11605 0d90 3046     		mov	r0, r6
 11606 0d92 FFF7FEFF 		bl	num_arg
 11607              	.LVL1360:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11608              		.loc 1 2388 8 view .LVU3785
 11609 0d96 3A68     		ldr	r2, [r7]
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11610              		.loc 1 2388 7 view .LVU3786
 11611 0d98 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11612 0d9c 002A     		cmp	r2, #0
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11613              		.loc 1 2387 8 view .LVU3787
 11614 0d9e 0346     		mov	r3, r0
 11615              	.LVL1361:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11616              		.loc 1 2388 4 is_stmt 1 view .LVU3788
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11617              		.loc 1 2388 7 is_stmt 0 view .LVU3789
 11618 0da0 0ADB     		blt	.L1134
 11619              	.LVL1362:
 11620              	.L884:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11621              		.loc 1 2392 4 is_stmt 1 view .LVU3790
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11622              		.loc 1 2392 7 is_stmt 0 view .LVU3791
 11623 0da2 0021     		movs	r1, #0
2393:src/display.c **** 	} else {
 11624              		.loc 1 2393 4 view .LVU3792
 11625 0da4 3046     		mov	r0, r6
 11626              	.LVL1363:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11627              		.loc 1 2392 7 view .LVU3793
 11628 0da6 1970     		strb	r1, [r3]
2393:src/display.c **** 	} else {
 11629              		.loc 1 2393 4 is_stmt 1 view .LVU3794
 11630 0da8 FFF7FEFF 		bl	set_digits_string
 11631              	.LVL1364:
2393:src/display.c **** 	} else {
 11632              		.loc 1 2393 4 is_stmt 0 view .LVU3795
 11633 0dac 68E5     		b	.L881
 11634              	.LVL1365:
 11635              	.L1133:
2382:src/display.c **** 	  *p = '\0';
 11636              		.loc 1 2382 6 is_stmt 1 view .LVU3796
2382:src/display.c **** 	  *p = '\0';
 11637              		.loc 1 2382 10 is_stmt 0 view .LVU3797
 11638 0dae 0B49     		ldr	r1, .L1143+12
ARM GAS  /tmp/cc1e4Gjl.s 			page 331


 11639 0db0 FFF7FEFF 		bl	scopy
 11640              	.LVL1366:
2382:src/display.c **** 	  *p = '\0';
 11641              		.loc 1 2382 10 view .LVU3798
 11642 0db4 0346     		mov	r3, r0
 11643              	.LVL1367:
2382:src/display.c **** 	  *p = '\0';
 11644              		.loc 1 2382 10 view .LVU3799
 11645 0db6 E2E7     		b	.L883
 11646              	.LVL1368:
 11647              	.L1134:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11648              		.loc 1 2389 6 is_stmt 1 view .LVU3800
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11649              		.loc 1 2389 10 is_stmt 0 view .LVU3801
 11650 0db8 0949     		ldr	r1, .L1143+16
 11651 0dba FFF7FEFF 		bl	scopy
 11652              	.LVL1369:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 11653              		.loc 1 2389 10 view .LVU3802
 11654 0dbe 8046     		mov	r8, r0
 11655              	.LVL1370:
2390:src/display.c **** 	  }
 11656              		.loc 1 2390 6 is_stmt 1 view .LVU3803
2390:src/display.c **** 	  }
 11657              		.loc 1 2390 21 is_stmt 0 view .LVU3804
 11658 0dc0 FFF7FEFF 		bl	local_regs
 11659              	.LVL1371:
2390:src/display.c **** 	  }
 11660              		.loc 1 2390 21 view .LVU3805
 11661 0dc4 0146     		mov	r1, r0
2390:src/display.c **** 	  }
 11662              		.loc 1 2390 10 view .LVU3806
 11663 0dc6 4046     		mov	r0, r8
 11664 0dc8 FFF7FEFF 		bl	num_arg
 11665              	.LVL1372:
 11666 0dcc 0346     		mov	r3, r0
 11667              	.LVL1373:
2390:src/display.c **** 	  }
 11668              		.loc 1 2390 10 view .LVU3807
 11669 0dce E8E7     		b	.L884
 11670              	.L1144:
 11671              		.align	2
 11672              	.L1143:
 11673 0dd0 5C000000 		.word	.LC33
 11674 0dd4 00000000 		.word	SizeStatRegs
 11675 0dd8 00000000 		.word	main_ram
 11676 0ddc 64000000 		.word	.LC34
 11677 0de0 6C000000 		.word	.LC35
 11678              	.LBE617:
 11679              	.LBE644:
 11680              		.cfi_endproc
 11681              	.LFE34:
 11683              		.section	.text.frozen_display,"ax",%progbits
 11684              		.align	1
 11685              		.p2align 2,,3
 11686              		.global	frozen_display
ARM GAS  /tmp/cc1e4Gjl.s 			page 332


 11687              		.syntax unified
 11688              		.thumb
 11689              		.thumb_func
 11690              		.fpu fpv4-sp-d16
 11692              	frozen_display:
 11693              	.LFB35:
3304:src/display.c **** 	State2.disp_freeze = 0;
 11694              		.loc 1 3304 7 is_stmt 1 view -0
 11695              		.cfi_startproc
 11696              		@ args = 0, pretend = 0, frame = 0
 11697              		@ frame_needed = 0, uses_anonymous_args = 0
3305:src/display.c **** 	display();
 11698              		.loc 1 3305 2 view .LVU3809
3304:src/display.c **** 	State2.disp_freeze = 0;
 11699              		.loc 1 3304 7 is_stmt 0 view .LVU3810
 11700 0000 10B5     		push	{r4, lr}
 11701              		.cfi_def_cfa_offset 8
 11702              		.cfi_offset 4, -8
 11703              		.cfi_offset 14, -4
3305:src/display.c **** 	display();
 11704              		.loc 1 3305 21 view .LVU3811
 11705 0002 064C     		ldr	r4, .L1147
 11706 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11707 0006 6FF30413 		bfc	r3, #4, #1
 11708 000a E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 11709              		.loc 1 3306 2 is_stmt 1 view .LVU3812
 11710 000c FFF7FEFF 		bl	display
 11711              	.LVL1374:
3307:src/display.c ****       }
 11712              		.loc 1 3307 2 view .LVU3813
3307:src/display.c ****       }
 11713              		.loc 1 3307 21 is_stmt 0 view .LVU3814
 11714 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11715 0012 43F01003 		orr	r3, r3, #16
 11716 0016 E375     		strb	r3, [r4, #23]
3308:src/display.c **** 
 11717              		.loc 1 3308 7 view .LVU3815
 11718 0018 10BD     		pop	{r4, pc}
 11719              	.L1148:
 11720 001a 00BF     		.align	2
 11721              	.L1147:
 11722 001c 00000000 		.word	StateWhileOn
 11723              		.cfi_endproc
 11724              	.LFE35:
 11726              		.section	.text.message,"ax",%progbits
 11727              		.align	1
 11728              		.p2align 2,,3
 11729              		.global	message
 11730              		.syntax unified
 11731              		.thumb
 11732              		.thumb_func
 11733              		.fpu fpv4-sp-d16
 11735              	message:
 11736              	.LVL1375:
 11737              	.LFB45:
3525:src/display.c **** 	State2.disp_freeze = 0;
ARM GAS  /tmp/cc1e4Gjl.s 			page 333


 11738              		.loc 1 3525 7 is_stmt 1 view -0
 11739              		.cfi_startproc
 11740              		@ args = 0, pretend = 0, frame = 0
 11741              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	State2.disp_small = 0;
 11742              		.loc 1 3526 2 view .LVU3817
3527:src/display.c **** 	WasDataEntry = 0;
 11743              		.loc 1 3527 2 view .LVU3818
3527:src/display.c **** 	WasDataEntry = 0;
 11744              		.loc 1 3527 20 is_stmt 0 view .LVU3819
 11745 0000 174A     		ldr	r2, .L1159
3525:src/display.c **** 	State2.disp_freeze = 0;
 11746              		.loc 1 3525 7 view .LVU3820
 11747 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11748              		.cfi_def_cfa_offset 24
 11749              		.cfi_offset 3, -24
 11750              		.cfi_offset 4, -20
 11751              		.cfi_offset 5, -16
 11752              		.cfi_offset 6, -12
 11753              		.cfi_offset 7, -8
 11754              		.cfi_offset 14, -4
3527:src/display.c **** 	WasDataEntry = 0;
 11755              		.loc 1 3527 20 view .LVU3821
 11756 0004 D38A     		ldrh	r3, [r2, #22]
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11757              		.loc 1 3528 15 view .LVU3822
 11758 0006 174E     		ldr	r6, .L1159+4
3527:src/display.c **** 	WasDataEntry = 0;
 11759              		.loc 1 3527 20 view .LVU3823
 11760 0008 23F48453 		bic	r3, r3, #4224
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11761              		.loc 1 3528 15 view .LVU3824
 11762 000c 0027     		movs	r7, #0
3527:src/display.c **** 	WasDataEntry = 0;
 11763              		.loc 1 3527 20 view .LVU3825
 11764 000e D382     		strh	r3, [r2, #22]	@ movhi
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11765              		.loc 1 3528 2 is_stmt 1 view .LVU3826
3529:src/display.c **** 	  // Complete redraw necessary
 11766              		.loc 1 3529 5 is_stmt 0 view .LVU3827
 11767 0010 9B05     		lsls	r3, r3, #22
3525:src/display.c **** 	State2.disp_freeze = 0;
 11768              		.loc 1 3525 7 view .LVU3828
 11769 0012 0546     		mov	r5, r0
 11770 0014 0C46     		mov	r4, r1
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11771              		.loc 1 3528 15 view .LVU3829
 11772 0016 3760     		str	r7, [r6]
3529:src/display.c **** 	  // Complete redraw necessary
 11773              		.loc 1 3529 2 is_stmt 1 view .LVU3830
3529:src/display.c **** 	  // Complete redraw necessary
 11774              		.loc 1 3529 5 is_stmt 0 view .LVU3831
 11775 0018 12D5     		bpl	.L1150
3529:src/display.c **** 	  // Complete redraw necessary
 11776              		.loc 1 3529 27 discriminator 1 view .LVU3832
 11777 001a D1B1     		cbz	r1, .L1158
 11778              	.L1151:
ARM GAS  /tmp/cc1e4Gjl.s 			page 334


3536:src/display.c **** 	    ShowRPN = 0;
 11779              		.loc 1 3536 6 is_stmt 1 view .LVU3833
 11780 001c FFF7FEFF 		bl	reset_disp
 11781              	.LVL1376:
3537:src/display.c **** 	    set_annunciators();
 11782              		.loc 1 3537 6 view .LVU3834
3537:src/display.c **** 	    set_annunciators();
 11783              		.loc 1 3537 14 is_stmt 0 view .LVU3835
 11784 0020 114B     		ldr	r3, .L1159+8
 11785 0022 0026     		movs	r6, #0
 11786 0024 1E60     		str	r6, [r3]
3538:src/display.c **** 	    set_digits_string( str2, 0 );
 11787              		.loc 1 3538 6 is_stmt 1 view .LVU3836
 11788 0026 FFF7FEFF 		bl	set_annunciators
 11789              	.LVL1377:
3539:src/display.c **** 	  }
 11790              		.loc 1 3539 6 view .LVU3837
 11791 002a 3146     		mov	r1, r6
 11792 002c 2046     		mov	r0, r4
 11793 002e FFF7FEFF 		bl	set_digits_string
 11794              	.LVL1378:
3541:src/display.c **** 	  finish_display();// message
 11795              		.loc 1 3541 4 view .LVU3838
 11796 0032 2846     		mov	r0, r5
 11797 0034 FFF7FEFF 		bl	set_status
 11798              	.LVL1379:
3542:src/display.c **** 	}
 11799              		.loc 1 3542 4 view .LVU3839
3544:src/display.c **** 
 11800              		.loc 1 3544 7 is_stmt 0 view .LVU3840
 11801 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11802              		.cfi_remember_state
 11803              		.cfi_restore 14
 11804              		.cfi_restore 7
 11805              		.cfi_restore 6
 11806              		.cfi_restore 5
 11807              		.cfi_restore 4
 11808              		.cfi_restore 3
 11809              		.cfi_def_cfa_offset 0
 11810              	.LVL1380:
3542:src/display.c **** 	}
 11811              		.loc 1 3542 4 view .LVU3841
 11812 003c FFF7FEBF 		b	finish_display
 11813              	.LVL1381:
 11814              	.L1150:
 11815              		.cfi_restore_state
3535:src/display.c **** 	    reset_disp();
 11816              		.loc 1 3535 4 is_stmt 1 view .LVU3842
3535:src/display.c **** 	    reset_disp();
 11817              		.loc 1 3535 7 is_stmt 0 view .LVU3843
 11818 0040 0029     		cmp	r1, #0
 11819 0042 EBD1     		bne	.L1151
3541:src/display.c **** 	  finish_display();// message
 11820              		.loc 1 3541 4 is_stmt 1 view .LVU3844
 11821 0044 2846     		mov	r0, r5
 11822              	.LVL1382:
3541:src/display.c **** 	  finish_display();// message
ARM GAS  /tmp/cc1e4Gjl.s 			page 335


 11823              		.loc 1 3541 4 is_stmt 0 view .LVU3845
 11824 0046 FFF7FEFF 		bl	set_status
 11825              	.LVL1383:
3542:src/display.c **** 	}
 11826              		.loc 1 3542 4 is_stmt 1 view .LVU3846
3544:src/display.c **** 
 11827              		.loc 1 3544 7 is_stmt 0 view .LVU3847
 11828 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11829              		.cfi_remember_state
 11830              		.cfi_restore 14
 11831              		.cfi_restore 7
 11832              		.cfi_restore 6
 11833              		.cfi_restore 5
 11834              		.cfi_restore 4
 11835              		.cfi_restore 3
 11836              		.cfi_def_cfa_offset 0
 11837              	.LVL1384:
3542:src/display.c **** 	}
 11838              		.loc 1 3542 4 view .LVU3848
 11839 004e FFF7FEBF 		b	finish_display
 11840              	.LVL1385:
 11841              	.L1158:
 11842              		.cfi_restore_state
3531:src/display.c **** 	  display();
 11843              		.loc 1 3531 4 is_stmt 1 view .LVU3849
3531:src/display.c **** 	  display();
 11844              		.loc 1 3531 12 is_stmt 0 view .LVU3850
 11845 0052 064B     		ldr	r3, .L1159+12
 11846 0054 1860     		str	r0, [r3]
3532:src/display.c **** 	}
 11847              		.loc 1 3532 4 is_stmt 1 view .LVU3851
3544:src/display.c **** 
 11848              		.loc 1 3544 7 is_stmt 0 view .LVU3852
 11849 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11850              		.cfi_restore 14
 11851              		.cfi_restore 7
 11852              		.cfi_restore 6
 11853              		.cfi_restore 5
 11854              		.cfi_restore 4
 11855              		.cfi_restore 3
 11856              		.cfi_def_cfa_offset 0
3532:src/display.c **** 	}
 11857              		.loc 1 3532 4 view .LVU3853
 11858 005a FFF7FEBF 		b	display
 11859              	.LVL1386:
 11860              	.L1160:
3532:src/display.c **** 	}
 11861              		.loc 1 3532 4 view .LVU3854
 11862 005e 00BF     		.align	2
 11863              	.L1159:
 11864 0060 00000000 		.word	StateWhileOn
 11865 0064 00000000 		.word	WasDataEntry
 11866 0068 00000000 		.word	ShowRPN
 11867 006c 00000000 		.word	DispMsg
 11868              		.cfi_endproc
 11869              	.LFE45:
 11871              		.section	.text.error_message,"ax",%progbits
ARM GAS  /tmp/cc1e4Gjl.s 			page 336


 11872              		.align	1
 11873              		.p2align 2,,3
 11874              		.global	error_message
 11875              		.syntax unified
 11876              		.thumb
 11877              		.thumb_func
 11878              		.fpu fpv4-sp-d16
 11880              	error_message:
 11881              	.LVL1387:
 11882              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 11883              		.loc 1 134 1 is_stmt 1 view -0
 11884              		.cfi_startproc
 11885              		@ args = 0, pretend = 0, frame = 0
 11886              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 11887              		.loc 1 139 3 view .LVU3856
 197:src/display.c ****     {
 11888              		.loc 1 197 3 view .LVU3857
 232:src/display.c ****     const char *p = error_table[e];
 11889              		.loc 1 232 3 view .LVU3858
 134:src/display.c **** #define MSG1(top) top "\0"
 11890              		.loc 1 134 1 is_stmt 0 view .LVU3859
 11891 0000 38B5     		push	{r3, r4, r5, lr}
 11892              		.cfi_def_cfa_offset 16
 11893              		.cfi_offset 3, -16
 11894              		.cfi_offset 4, -12
 11895              		.cfi_offset 5, -8
 11896              		.cfi_offset 14, -4
 232:src/display.c ****     const char *p = error_table[e];
 11897              		.loc 1 232 21 view .LVU3860
 11898 0002 1A4B     		ldr	r3, .L1172
 11899 0004 1B68     		ldr	r3, [r3]
 11900 0006 0343     		orrs	r3, r0, r3
 11901 0008 2CD0     		beq	.L1161
 11902              	.LBB645:
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11903              		.loc 1 233 5 is_stmt 1 view .LVU3861
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11904              		.loc 1 233 17 is_stmt 0 view .LVU3862
 11905 000a 194B     		ldr	r3, .L1172+4
 11906 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11907              	.LVL1388:
 234:src/display.c ****     if (*q == '\0')
 11908              		.loc 1 234 5 is_stmt 1 view .LVU3863
 11909 0010 0446     		mov	r4, r0
 234:src/display.c ****     if (*q == '\0')
 11910              		.loc 1 234 21 is_stmt 0 view .LVU3864
 11911 0012 0021     		movs	r1, #0
 11912 0014 2846     		mov	r0, r5
 11913              	.LVL1389:
 234:src/display.c ****     if (*q == '\0')
 11914              		.loc 1 234 21 view .LVU3865
 11915 0016 FFF7FEFF 		bl	find_char
 11916              	.LVL1390:
 235:src/display.c ****       q = S7_ERROR;
 11917              		.loc 1 235 5 is_stmt 1 view .LVU3866
ARM GAS  /tmp/cc1e4Gjl.s 			page 337


 235:src/display.c ****       q = S7_ERROR;
 11918              		.loc 1 235 9 is_stmt 0 view .LVU3867
 11919 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 235:src/display.c ****       q = S7_ERROR;
 11920              		.loc 1 235 8 view .LVU3868
 11921 001c 9BB9     		cbnz	r3, .L1170
 236:src/display.c ****     if (*q == 'X') {
 11922              		.loc 1 236 9 view .LVU3869
 11923 001e 1549     		ldr	r1, .L1172+8
 11924              	.L1163:
 11925              	.LVL1391:
 246:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 11926              		.loc 1 246 7 is_stmt 1 view .LVU3870
 11927 0020 2846     		mov	r0, r5
 11928 0022 FFF7FEFF 		bl	message
 11929              	.LVL1392:
 247:src/display.c **** #ifndef REALBUILD
 11930              		.loc 1 247 7 view .LVU3871
 247:src/display.c **** #ifndef REALBUILD
 11931              		.loc 1 247 26 is_stmt 0 view .LVU3872
 11932 0026 144B     		ldr	r3, .L1172+12
 249:src/display.c **** #endif
 11933              		.loc 1 249 7 view .LVU3873
 11934 0028 1449     		ldr	r1, .L1172+16
 247:src/display.c **** #ifndef REALBUILD
 11935              		.loc 1 247 26 view .LVU3874
 11936 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 249:src/display.c **** #endif
 11937              		.loc 1 249 7 view .LVU3875
 11938 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11939 0030 1348     		ldr	r0, .L1172+20
 247:src/display.c **** #ifndef REALBUILD
 11940              		.loc 1 247 31 view .LVU3876
 11941 0032 003C     		subs	r4, r4, #0
 247:src/display.c **** #ifndef REALBUILD
 11942              		.loc 1 247 31 view .LVU3877
 11943 0034 18BF     		it	ne
 11944 0036 0124     		movne	r4, #1
 11945              	.LVL1393:
 247:src/display.c **** #ifndef REALBUILD
 11946              		.loc 1 247 26 view .LVU3878
 11947 0038 64F30412 		bfi	r2, r4, #4, #1
 11948 003c DA75     		strb	r2, [r3, #23]
 249:src/display.c **** #endif
 11949              		.loc 1 249 7 is_stmt 1 view .LVU3879
 11950              	.LBE645:
 274:src/display.c **** 
 11951              		.loc 1 274 1 is_stmt 0 view .LVU3880
 11952 003e BDE83840 		pop	{r3, r4, r5, lr}
 11953              		.cfi_remember_state
 11954              		.cfi_restore 14
 11955              		.cfi_restore 5
 11956              		.cfi_restore 4
 11957              		.cfi_restore 3
 11958              		.cfi_def_cfa_offset 0
 11959              	.LVL1394:
 11960              	.LBB652:
ARM GAS  /tmp/cc1e4Gjl.s 			page 338


 249:src/display.c **** #endif
 11961              		.loc 1 249 7 view .LVU3881
 11962 0042 FFF7FEBF 		b	scopy
 11963              	.LVL1395:
 11964              	.L1170:
 11965              		.cfi_restore_state
 237:src/display.c ****       DispMsg = p;
 11966              		.loc 1 237 5 is_stmt 1 view .LVU3882
 237:src/display.c ****       DispMsg = p;
 11967              		.loc 1 237 8 is_stmt 0 view .LVU3883
 11968 0046 582B     		cmp	r3, #88
 11969 0048 0DD1     		bne	.L1171
 238:src/display.c ****       frozen_display();
 11970              		.loc 1 238 7 is_stmt 1 view .LVU3884
 11971              	.LBB646:
 11972              	.LBB647:
3305:src/display.c **** 	display();
 11973              		.loc 1 3305 21 is_stmt 0 view .LVU3885
 11974 004a 0B4C     		ldr	r4, .L1172+12
 11975              	.LVL1396:
3305:src/display.c **** 	display();
 11976              		.loc 1 3305 21 view .LVU3886
 11977              	.LBE647:
 11978              	.LBE646:
 238:src/display.c ****       frozen_display();
 11979              		.loc 1 238 15 view .LVU3887
 11980 004c 0D4A     		ldr	r2, .L1172+24
 11981              	.LBB650:
 11982              	.LBB648:
3305:src/display.c **** 	display();
 11983              		.loc 1 3305 21 view .LVU3888
 11984 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11985              	.LBE648:
 11986              	.LBE650:
 238:src/display.c ****       frozen_display();
 11987              		.loc 1 238 15 view .LVU3889
 11988 0050 1560     		str	r5, [r2]
 239:src/display.c ****     }
 11989              		.loc 1 239 7 is_stmt 1 view .LVU3890
 11990              	.LBB651:
 11991              	.LBI646:
3303:src/display.c ****       {
 11992              		.loc 1 3303 12 view .LVU3891
 11993              	.LBB649:
3305:src/display.c **** 	display();
 11994              		.loc 1 3305 2 view .LVU3892
3305:src/display.c **** 	display();
 11995              		.loc 1 3305 21 is_stmt 0 view .LVU3893
 11996 0052 6FF30413 		bfc	r3, #4, #1
 11997 0056 E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 11998              		.loc 1 3306 2 is_stmt 1 view .LVU3894
 11999 0058 FFF7FEFF 		bl	display
 12000              	.LVL1397:
3307:src/display.c ****       }
 12001              		.loc 1 3307 2 view .LVU3895
3307:src/display.c ****       }
ARM GAS  /tmp/cc1e4Gjl.s 			page 339


 12002              		.loc 1 3307 21 is_stmt 0 view .LVU3896
 12003 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12004 005e 43F01003 		orr	r3, r3, #16
 12005 0062 E375     		strb	r3, [r4, #23]
 12006              	.LVL1398:
 12007              	.L1161:
3307:src/display.c ****       }
 12008              		.loc 1 3307 21 view .LVU3897
 12009              	.LBE649:
 12010              	.LBE651:
 12011              	.LBE652:
 274:src/display.c **** 
 12012              		.loc 1 274 1 view .LVU3898
 12013 0064 38BD     		pop	{r3, r4, r5, pc}
 12014              	.LVL1399:
 12015              	.L1171:
 12016              	.LBB653:
 234:src/display.c ****     if (*q == '\0')
 12017              		.loc 1 234 17 view .LVU3899
 12018 0066 411C     		adds	r1, r0, #1
 12019 0068 DAE7     		b	.L1163
 12020              	.L1173:
 12021 006a 00BF     		.align	2
 12022              	.L1172:
 12023 006c 00000000 		.word	Running
 12024 0070 00000000 		.word	.LANCHOR27
 12025 0074 00000000 		.word	.LANCHOR26
 12026 0078 00000000 		.word	StateWhileOn
 12027 007c 00000000 		.word	.LANCHOR28
 12028 0080 00000000 		.word	LastDisplayedNumber
 12029 0084 00000000 		.word	DispMsg
 12030              	.LBE653:
 12031              		.cfi_endproc
 12032              	.LFE1:
 12034              		.section	.rodata.str1.4,"aMS",%progbits,1
 12035              		.align	2
 12036              	.LC43:
 12037 0000 06316306 		.ascii	"\0061c\006\006\000"
 12037      0600
 12038 0006 0000     		.align	2
 12039              	.LC44:
 12040 0008 756E0600 		.ascii	"un\006\000"
 12041              		.align	2
 12042              	.LC45:
 12043 000c 736D00   		.ascii	"sm\000"
 12044              		.set	CSWTCH.330,CSWTCH.328
 12045 000f 00       		.align	2
 12046              	.LC46:
 12047 0010 20502072 		.ascii	" P r o g r a m \000"
 12047      206F2067 
 12047      20722061 
 12047      206D2000 
 12048              		.align	2
 12049              	.LC47:
 12050 0020 206F2072 		.ascii	" o r   d a t e \000"
 12050      20202064 
 12050      20612074 
ARM GAS  /tmp/cc1e4Gjl.s 			page 340


 12050      20652000 
 12051              		.align	2
 12052              	.LC48:
 12053 0030 204F2070 		.ascii	" O p - c o d e \000"
 12053      202D2063 
 12053      206F2064 
 12053      20652000 
 12054              		.align	2
 12055              	.LC49:
 12056 0040 204C2061 		.ascii	" L a b e l \000"
 12056      20622065 
 12056      206C2000 
 12057              		.align	2
 12058              	.LC50:
 12059 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12059      20652072 
 12059      20612074 
 12059      2069206F 
 12059      206E2000 
 12060              		.align	2
 12061              	.LC51:
 12062 0060 20462075 		.ascii	" F u l l \000"
 12062      206C206C 
 12062      2000
 12063 006a 0000     		.align	2
 12064              	.LC52:
 12065 006c 2043206C 		.ascii	" C l a s h \000"
 12065      20612073 
 12065      20682000 
 12066              		.align	2
 12067              	.LC53:
 12068 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12068      206F2020 
 12068      2073206D 
 12068      2061206C 
 12068      206C2000 
 12069              		.align	2
 12070              	.LC54:
 12071 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12071      20742061 
 12071      20202070 
 12071      206F2069 
 12071      206E2074 
 12072              		.align	2
 12073              	.LC55:
 12074 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12074      20722061 
 12074      206D2065 
 12074      20742065 
 12074      20722000 
 12075              		.align	2
 12076              	.LC56:
 12077 00b8 20442061 		.ascii	" D a t a \000"
 12077      20742061 
 12077      2000
 12078 00c2 0000     		.align	2
 12079              	.LC57:
ARM GAS  /tmp/cc1e4Gjl.s 			page 341


 12080 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12080      206F2074 
 12080      20652063 
 12080      20742065 
 12080      20642000 
 12081              		.align	2
 12082              	.LC58:
 12083 00d8 2046206F 		.ascii	" F o u n d \000"
 12083      2075206E 
 12083      20642000 
 12084              		.align	2
 12085              	.LC59:
 12086 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12086      2073206D 
 12086      20612074 
 12086      20632068 
 12086      2000
 12087 00f6 0000     		.align	2
 12088              	.LC60:
 12089 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12089      20732074 
 12089      2061206C 
 12089      206C2065 
 12089      20642000 
 12090              		.global	DIGITS
 12091              		.comm	IoAnnunciator,4,4
 12092              		.comm	IntMaxWindow,4,4
 12093              		.comm	JustDisplayed,4,4
 12094              		.comm	ShowRPN,4,4
 12095              		.comm	forceDispPlot,1,1
 12096              		.comm	LastDisplayedExponent,5,4
 12097              		.comm	LastDisplayedNumber,26,4
 12098              		.comm	LastDisplayedText,31,4
 12099              		.global	no_status_top
 12100              		.comm	DispPlot,2,2
 12101              		.comm	DispMsg,4,4
 12102              		.global	SvnRevision
 12103              		.section	.rodata
 12104              		.align	2
 12105              		.set	.LANCHOR17,. + 0
 12106              	.LC18:
 12107 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12107      22002E00 
 12107      00
 12108 0009 000000   		.space	3
 12109              	.LC22:
 12110 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12110      332E3306 
 12110      0600
 12111 0016 00000000 		.space	4
 12112 001a 0000     		.space	2
 12113              	.LC61:
 12114 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12114      696E6700 
 12114      50726F47 
 12114      72614D6D 
 12114      00
ARM GAS  /tmp/cc1e4Gjl.s 			page 342


 12115 002d 000000   		.space	3
 12116              	.LC62:
 12117 0030 446F6D61 		.ascii	"Domain\000\000"
 12117      696E0000 
 12118              	.LC63:
 12119 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12119      74696D65 
 12119      006F7220 
 12119      64417445 
 12119      00
 12120 0049 000000   		.space	3
 12121              	.LC64:
 12122 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12122      66696E65 
 12122      64004F70 
 12122      2D434F64 
 12122      4500
 12123 005e 0000     		.space	2
 12124              	.LC65:
 12125 0060 2B9F0000 		.ascii	"+\237\000\000"
 12126              	.LC66:
 12127 0064 2D9F0000 		.ascii	"-\237\000\000"
 12128              	.LC67:
 12129 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12129      75636800 
 12129      4C416245 
 12129      4C00
 12130 0076 0000     		.space	2
 12131              	.LC68:
 12132 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12132      67616C00 
 12132      4F504572 
 12132      4174696F 
 12132      6E00
 12133 008a 0000     		.space	2
 12134              	.LC69:
 12135 008c 4F757420 		.ascii	"Out of range\000\000"
 12135      6F662072 
 12135      616E6765 
 12135      0000
 12136 009a 0000     		.space	2
 12137              	.LC70:
 12138 009c 42616420 		.ascii	"Bad digit\000\000"
 12138      64696769 
 12138      740000
 12139 00a7 00       		.space	1
 12140              	.LC71:
 12141 00a8 546F6F20 		.ascii	"Too long\000\000"
 12141      6C6F6E67 
 12141      0000
 12142 00b2 0000     		.space	2
 12143              	.LC72:
 12144 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12144      69730046 
 12144      754C4C00 
 12145              	.LC73:
 12146 00c0 53746163 		.ascii	"Stack\000CLASH\000"
ARM GAS  /tmp/cc1e4Gjl.s 			page 343


 12146      6B00434C 
 12146      41534800 
 12147              	.LC74:
 12148 00cc 42616420 		.ascii	"Bad mode\000\000"
 12148      6D6F6465 
 12148      0000
 12149 00d6 0000     		.space	2
 12150              	.LC75:
 12151 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12151      06060673 
 12151      697A6500 
 12151      746F6F20 
 12151      534D6D41 
 12152 00ef 00       		.space	1
 12153              	.LC76:
 12154 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12154      66657700 
 12154      64417441 
 12154      20506F69 
 12154      6E745300 
 12155              	.LC77:
 12156 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12156      6C696400 
 12156      50617261 
 12156      4D6D4574 
 12156      457200
 12157 0117 00       		.space	1
 12158              	.LC78:
 12159 0118 492F4F00 		.ascii	"I/O\000\000"
 12159      00
 12160 011d 000000   		.space	3
 12161              	.LC79:
 12162 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12162      6C696400 
 12162      64417441 
 12162      00
 12163 012d 000000   		.space	3
 12164              	.LC80:
 12165 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12165      65005072 
 12165      6F744563 
 12165      74456400 
 12166              	.LC81:
 12167 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12167      6F6F7400 
 12167      466F756E 
 12167      6400
 12168 014e 0000     		.space	2
 12169              	.LC82:
 12170 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12170      6978004D 
 12170      6D49534D 
 12170      6D417443 
 12170      4800
 12171 0162 0000     		.space	2
 12172              	.LC83:
 12173 0164 53696E67 		.ascii	"Singular\000\000"
ARM GAS  /tmp/cc1e4Gjl.s 			page 344


 12173      756C6172 
 12173      0000
 12174 016e 0000     		.space	2
 12175              	.LC84:
 12176 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12176      68206973 
 12176      0046754C 
 12176      4C00
 12177 017e 0000     		.space	2
 12178              	.LC85:
 12179 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12179      72797374 
 12179      616C0049 
 12179      6E537461 
 12179      4C4C4564 
 12180 0195 000000   		.space	3
 12181              	.LC86:
 12182 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12182      5800
 12183              		.section	.bss.DecimalMode,"aw",%nobits
 12184              		.set	.LANCHOR1,. + 0
 12187              	DecimalMode:
 12188 0000 00       		.space	1
 12189              		.section	.bss.SeparatorMode,"aw",%nobits
 12190              		.set	.LANCHOR0,. + 0
 12193              	SeparatorMode:
 12194 0000 00       		.space	1
 12195              		.section	.bss.no_status_top,"aw",%nobits
 12196              		.align	1
 12197              		.set	.LANCHOR18,. + 0
 12200              	no_status_top:
 12201 0000 0000     		.space	2
 12202              		.section	.rodata.CSWTCH.328,"a"
 12203              		.align	2
 12204              		.set	.LANCHOR11,. + 0
 12207              	CSWTCH.328:
 12208 0000 02000000 		.word	2
 12209 0004 08000000 		.word	8
 12210 0008 0A000000 		.word	10
 12211 000c 10000000 		.word	16
 12212              		.section	.rodata.CSWTCH.354,"a"
 12213              		.align	2
 12214              		.set	.LANCHOR16,. + 0
 12217              	CSWTCH.354:
 12218 0000 00000000 		.word	.LC43
 12219 0004 08000000 		.word	.LC44
 12220 0008 0C000000 		.word	.LC45
 12221              		.section	.rodata.DIGITS,"a"
 12222              		.align	2
 12223              		.set	.LANCHOR12,. + 0
 12226              	DIGITS:
 12227 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12227      34353637 
 12227      38394142 
 12227      43444546 
 12227      00
 12228              		.section	.rodata.S7_ERROR,"a"
ARM GAS  /tmp/cc1e4Gjl.s 			page 345


 12229              		.align	2
 12230              		.set	.LANCHOR26,. + 0
 12233              	S7_ERROR:
 12234 0000 4572726F 		.ascii	"Error\000"
 12234      7200
 12235              		.section	.rodata.S7_INF,"a"
 12236              		.align	2
 12237              		.set	.LANCHOR5,. + 0
 12240              	S7_INF:
 12241 0000 496E6669 		.ascii	"Infinity\000"
 12241      6E697479 
 12241      00
 12242              		.section	.rodata.S7_INF_Text,"a"
 12243              		.align	2
 12244              		.set	.LANCHOR7,. + 0
 12247              	S7_INF_Text:
 12248 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12248      20662069 
 12248      206E2069 
 12248      20742079 
 12248      2000
 12249              		.section	.rodata.S7_NEG_INF_Text,"a"
 12250              		.align	2
 12251              		.set	.LANCHOR6,. + 0
 12254              	S7_NEG_INF_Text:
 12255 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12255      20662069 
 12255      206E2069 
 12255      20742079 
 12255      2000
 12256              		.section	.rodata.S7_NaN,"a"
 12257              		.align	2
 12258              		.set	.LANCHOR3,. + 0
 12261              	S7_NaN:
 12262 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12262      6E754D6D 
 12262      45726963 
 12262      00
 12263              		.section	.rodata.S7_NaN_Text,"a"
 12264              		.align	2
 12265              		.set	.LANCHOR4,. + 0
 12268              	S7_NaN_Text:
 12269 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12269      20742020 
 12269      206E2075 
 12269      206D2065 
 12269      20722069 
 12270              		.section	.rodata.S7_STEP,"a"
 12271              		.align	2
 12272              		.set	.LANCHOR25,. + 0
 12275              	S7_STEP:
 12276 0000 53744550 		.ascii	"StEP \000"
 12276      2000
 12277              		.section	.rodata.S7_STEP_ShortText,"a"
 12278              		.align	2
 12279              		.set	.LANCHOR19,. + 0
 12282              	S7_STEP_ShortText:
ARM GAS  /tmp/cc1e4Gjl.s 			page 346


 12283 0000 53544550 		.ascii	"STEP\000"
 12283      00
 12284              		.section	.rodata.S7_fract_EQ,"a"
 12285              		.align	2
 12286              		.set	.LANCHOR9,. + 0
 12289              	S7_fract_EQ:
 12290 0000 203D2000 		.ascii	" = \000"
 12291              		.section	.rodata.S7_fract_GT,"a"
 12292              		.align	2
 12293              		.set	.LANCHOR10,. + 0
 12296              	S7_fract_GT:
 12297 0000 20477400 		.ascii	" Gt\000"
 12298              		.section	.rodata.S7_fract_LT,"a"
 12299              		.align	2
 12300              		.set	.LANCHOR8,. + 0
 12303              	S7_fract_LT:
 12304 0000 204C7400 		.ascii	" Lt\000"
 12305              		.section	.rodata.S_SURE,"a"
 12306              		.align	2
 12307              		.set	.LANCHOR21,. + 0
 12310              	S_SURE:
 12311 0000 53757265 		.ascii	"Sure?\000"
 12311      3F00
 12312              		.section	.rodata.SvnRevision,"a"
 12313              		.align	2
 12314              		.set	.LANCHOR20,. + 0
 12317              	SvnRevision:
 12318 0000 30202020 		.ascii	"0   "
 12319              		.section	.rodata.digtbl,"a"
 12320              		.align	2
 12321              		.set	.LANCHOR2,. + 0
 12324              	digtbl:
 12325 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12325      02421252 
 12325      2D000000 
 12325      00000000 
 12325      00
 12326 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12326      00000017 
 12326      01000000 
 12326      00
 12327 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12327      28000000 
 12327      0020664B 
 12327      00000010 
 12328 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12328      5E5B3973 
 12328      77497F7B 
 12328      00000612 
 12328      0300787D 
 12329 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12329      673D240F 
 12329      75266C6D 
 12329      6F7C7914 
 12329      73362F00 
 12330 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12330      161F7674 
ARM GAS  /tmp/cc1e4Gjl.s 			page 347


 12330      6735040F 
 12330      75266915 
 12330      177C7914 
 12331 0076 000F003B 		.ascii	"\000\017\000;"
 12332              		.section	.rodata.error_table.8505,"a"
 12333              		.align	2
 12334              		.set	.LANCHOR27,. + 0
 12337              	error_table.8505:
 12338 0000 1C000000 		.word	.LC61
 12339 0004 30000000 		.word	.LC62
 12340 0008 38000000 		.word	.LC63
 12341 000c 4C000000 		.word	.LC64
 12342 0010 60000000 		.word	.LC65
 12343 0014 64000000 		.word	.LC66
 12344 0018 68000000 		.word	.LC67
 12345 001c 78000000 		.word	.LC68
 12346 0020 8C000000 		.word	.LC69
 12347 0024 9C000000 		.word	.LC70
 12348 0028 A8000000 		.word	.LC71
 12349 002c B4000000 		.word	.LC72
 12350 0030 C0000000 		.word	.LC73
 12351 0034 CC000000 		.word	.LC74
 12352 0038 D8000000 		.word	.LC75
 12353 003c F0000000 		.word	.LC76
 12354 0040 04010000 		.word	.LC77
 12355 0044 18010000 		.word	.LC78
 12356 0048 20010000 		.word	.LC79
 12357 004c 30010000 		.word	.LC80
 12358 0050 40010000 		.word	.LC81
 12359 0054 50010000 		.word	.LC82
 12360 0058 64010000 		.word	.LC83
 12361 005c 70010000 		.word	.LC84
 12362 0060 80010000 		.word	.LC85
 12363 0064 98010000 		.word	.LC86
 12364              		.section	.rodata.error_table_text.8506,"a"
 12365              		.align	2
 12366              		.set	.LANCHOR28,. + 0
 12369              	error_table_text.8506:
 12370 0000 10000000 		.word	.LC46
 12371 0004 A8000000 		.word	.LC41
 12372 0008 20000000 		.word	.LC47
 12373 000c 30000000 		.word	.LC48
 12374 0010 A8000000 		.word	.LC41
 12375 0014 A8000000 		.word	.LC41
 12376 0018 40000000 		.word	.LC49
 12377 001c 4C000000 		.word	.LC50
 12378 0020 A8000000 		.word	.LC41
 12379 0024 A8000000 		.word	.LC41
 12380 0028 A8000000 		.word	.LC41
 12381 002c 60000000 		.word	.LC51
 12382 0030 6C000000 		.word	.LC52
 12383 0034 A8000000 		.word	.LC41
 12384 0038 78000000 		.word	.LC53
 12385 003c 8C000000 		.word	.LC54
 12386 0040 A4000000 		.word	.LC55
 12387 0044 A8000000 		.word	.LC41
 12388 0048 B8000000 		.word	.LC56
ARM GAS  /tmp/cc1e4Gjl.s 			page 348


 12389 004c C4000000 		.word	.LC57
 12390 0050 D8000000 		.word	.LC58
 12391 0054 E4000000 		.word	.LC59
 12392 0058 A8000000 		.word	.LC41
 12393 005c 60000000 		.word	.LC51
 12394 0060 F8000000 		.word	.LC60
 12395 0064 A8000000 		.word	.LC41
 12396              		.section	.rodata.libname,"a"
 12397              		.align	2
 12398              		.set	.LANCHOR22,. + 0
 12401              	libname:
 12402 0000 72414D6D 		.ascii	"rAMm\000"
 12402      00
 12403 0005 4C696220 		.ascii	"Lib \000"
 12403      00
 12404 000a 42757020 		.ascii	"Bup \000"
 12404      00
 12405 000f 726F4D6D 		.ascii	"roMm\000"
 12405      00
 12406              		.section	.rodata.libname_shorttext,"a"
 12407              		.align	2
 12408              		.set	.LANCHOR24,. + 0
 12411              	libname_shorttext:
 12412 0000 52616D00 		.ascii	"Ram\000"
 12413 0004 00       		.space	1
 12414 0005 4C696200 		.ascii	"Lib\000"
 12415 0009 00       		.space	1
 12416 000a 42757000 		.ascii	"Bup\000"
 12417 000e 00       		.space	1
 12418 000f 526F6D00 		.ascii	"Rom\000"
 12419 0013 00       		.space	1
 12420              		.section	.rodata.libname_text,"a"
 12421              		.align	2
 12422              		.set	.LANCHOR23,. + 0
 12425              	libname_text:
 12426 0000 20522061 		.ascii	" R a m \000"
 12426      206D2000 
 12427 0008 0000     		.space	2
 12428 000a 204C2069 		.ascii	" L i b \000"
 12428      20622000 
 12429 0012 0000     		.space	2
 12430 0014 20422075 		.ascii	" B u p \000"
 12430      20702000 
 12431 001c 0000     		.space	2
 12432 001e 2052206F 		.ascii	" R o m \000"
 12432      206D2000 
 12433 0026 0000     		.space	2
 12434              		.section	.rodata.shift_chars.8602,"a"
 12435              		.align	2
 12436              		.set	.LANCHOR15,. + 0
 12439              	shift_chars.8602:
 12440 0000 20111213 		.ascii	" \021\022\023"
 12441              		.section	.rodata.small_dots.8799,"a"
 12442              		.align	2
 12443              		.set	.LANCHOR14,. + 0
 12446              	small_dots.8799:
 12447 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
ARM GAS  /tmp/cc1e4Gjl.s 			page 349


 12447      07E12C06 
 12447      07E12C06 
 12447      06
 12448              		.section	.rodata.small_minus.8798,"a"
 12449              		.align	2
 12450              		.set	.LANCHOR13,. + 0
 12453              	small_minus.8798:
 12454 0000 07C22D06 		.ascii	"\007\302-\006"
 12455              		.text
 12456              	.Letext0:
 12457              		.file 2 "src/decNumber/decContext.h"
 12458              		.file 3 "src/decNumber/decNumber.h"
 12459              		.file 4 "src/decNumber/decimal64.h"
 12460              		.file 5 "src/decNumber/decimal128.h"
 12461              		.file 6 "src/xeq.h"
 12462              		.file 7 "src/data.h"
 12463              		.file 8 "src/storage.h"
 12464              		.file 9 "src/display.h"
 12465              		.file 10 "src/consts.h"
 12466              		.file 11 "src/stats.h"
 12467              		.file 12 "src/revision.h"
 12468              		.file 13 "src/charset7.h"
 12469              		.file 14 "src/lcd.h"
 12470              		.file 15 "src/decn.h"
 12471              		.file 16 "src/alpha.h"
 12472              		.file 17 "src/int.h"
ARM GAS  /tmp/cc1e4Gjl.s 			page 350


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/cc1e4Gjl.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/cc1e4Gjl.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/cc1e4Gjl.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/cc1e4Gjl.s:126    .text.set_dig:0000000000000000 $t
     /tmp/cc1e4Gjl.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/cc1e4Gjl.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/cc1e4Gjl.s:262    .text.hms_render:0000000000000000 $t
     /tmp/cc1e4Gjl.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/cc1e4Gjl.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/cc1e4Gjl.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/cc1e4Gjl.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/cc1e4Gjl.s:596    .text.hms_step:0000000000000000 $t
     /tmp/cc1e4Gjl.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/cc1e4Gjl.s:664    .text.hms_step:0000000000000034 $d
     /tmp/cc1e4Gjl.s:669    .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:673    .text.set_exp:0000000000000000 $t
     /tmp/cc1e4Gjl.s:680    .text.set_exp:0000000000000000 set_exp
     /tmp/cc1e4Gjl.s:901    .text.set_exp:00000000000000b0 $d
     /tmp/cc1e4Gjl.s:907    .text.set_separator.part.0:0000000000000000 $t
     /tmp/cc1e4Gjl.s:914    .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/cc1e4Gjl.s:982    .text.set_separator.part.0:0000000000000038 $d
     /tmp/cc1e4Gjl.s:988    .text.set_decimal:0000000000000000 $t
     /tmp/cc1e4Gjl.s:995    .text.set_decimal:0000000000000000 set_decimal
     /tmp/cc1e4Gjl.s:1091   .text.set_decimal:000000000000004c $d
     /tmp/cc1e4Gjl.s:1099   .text.set_digits_string:0000000000000000 $t
     /tmp/cc1e4Gjl.s:1106   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/cc1e4Gjl.s:1200   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:1204   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/cc1e4Gjl.s:1211   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/cc1e4Gjl.s:1358   .text.check_special_dn.isra.0:000000000000007c $d
                            *COM*:0000000000000001 forceDispPlot
     /tmp/cc1e4Gjl.s:1370   .text.set_x_hms:0000000000000000 $t
     /tmp/cc1e4Gjl.s:1377   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/cc1e4Gjl.s:1878   .text.set_x_hms:00000000000001b8 $d
     /tmp/cc1e4Gjl.s:1888   .text.set_x_fract:0000000000000000 $t
     /tmp/cc1e4Gjl.s:1895   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/cc1e4Gjl.s:2331   .text.set_x_fract:0000000000000198 $d
     /tmp/cc1e4Gjl.s:2346   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:2347   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/cc1e4Gjl.s:2350   .text.carry_overflow:0000000000000000 $t
     /tmp/cc1e4Gjl.s:2357   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/cc1e4Gjl.s:2494   .text.carry_overflow:0000000000000070 $d
     /tmp/cc1e4Gjl.s:2504   .text.set_int_x:0000000000000000 $t
     /tmp/cc1e4Gjl.s:2511   .text.set_int_x:0000000000000000 set_int_x
     /tmp/cc1e4Gjl.s:3229   .text.set_int_x:00000000000002f8 $d
               .rodata.CSWTCH.328:0000000000000000 CSWTCH.330
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/cc1e4Gjl.s:3240   .text.set_int_x:0000000000000310 $t
     /tmp/cc1e4Gjl.s:3405   .text.set_int_x:00000000000003c8 $d
     /tmp/cc1e4Gjl.s:3413   .text.set_annunciators:0000000000000000 $t
     /tmp/cc1e4Gjl.s:3420   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/cc1e4Gjl.s:3793   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
ARM GAS  /tmp/cc1e4Gjl.s 			page 351


     /tmp/cc1e4Gjl.s:3805   .text.s_s_sized.constprop.0:0000000000000000 $t
     /tmp/cc1e4Gjl.s:3812   .text.s_s_sized.constprop.0:0000000000000000 s_s_sized.constprop.0
     /tmp/cc1e4Gjl.s:4257   .text.s_s_sized.constprop.0:0000000000000190 $d
                            *COM*:000000000000001f LastDisplayedText
     /tmp/cc1e4Gjl.s:4265   .text.getdig:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4273   .text.getdig:0000000000000000 getdig
     /tmp/cc1e4Gjl.s:4293   .text.getdig:0000000000000008 $d
     /tmp/cc1e4Gjl.s:4298   .text.dot:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4306   .text.dot:0000000000000000 dot
     /tmp/cc1e4Gjl.s:4329   .text.std_round_fix:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4337   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/cc1e4Gjl.s:4494   .text.std_round_fix:0000000000000078 $d
     /tmp/cc1e4Gjl.s:4499   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4507   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/cc1e4Gjl.s:4567   .text.set_IO_annunciator:000000000000001c $d
     /tmp/cc1e4Gjl.s:4574   .text.pixel_length:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4582   .text.pixel_length:0000000000000000 pixel_length
     /tmp/cc1e4Gjl.s:4673   .text.set_status:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4680   .text.set_status:0000000000000000 set_status
     /tmp/cc1e4Gjl.s:4782   .text.set_status:0000000000000034 $d
     /tmp/cc1e4Gjl.s:4789   .text.set_x_dn:0000000000000000 $t
     /tmp/cc1e4Gjl.s:4797   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/cc1e4Gjl.s:5690   .text.set_x_dn:00000000000003e0 $d
     /tmp/cc1e4Gjl.s:5696   .text.set_x_dn:00000000000003ea $t
     /tmp/cc1e4Gjl.s:5722   .text.set_x_dn:0000000000000416 $d
     /tmp/cc1e4Gjl.s:5728   .text.set_x_dn:0000000000000420 $t
     /tmp/cc1e4Gjl.s:6182   .text.set_x_dn:000000000000062c $d
     /tmp/cc1e4Gjl.s:6191   .text.set_x_dn:0000000000000644 $t
     /tmp/cc1e4Gjl.s:7023   .text.set_x_dn:000000000000096c $d
     /tmp/cc1e4Gjl.s:7034   .text.set_x:0000000000000000 $t
     /tmp/cc1e4Gjl.s:7041   .text.set_x:0000000000000000 set_x
     /tmp/cc1e4Gjl.s:7109   .text.format_reg:0000000000000000 $t
     /tmp/cc1e4Gjl.s:7117   .text.format_reg:0000000000000000 format_reg
     /tmp/cc1e4Gjl.s:7236   .text.format_reg:0000000000000064 $d
     /tmp/cc1e4Gjl.s:7242   .text.set_status_right:0000000000000000 $t
     /tmp/cc1e4Gjl.s:7249   .text.set_status_right:0000000000000000 set_status_right
     /tmp/cc1e4Gjl.s:7398   .text.set_status_right:0000000000000060 $d
     /tmp/cc1e4Gjl.s:7403   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:7452   .text.annunciators:0000000000000000 $t
     /tmp/cc1e4Gjl.s:7459   .text.annunciators:0000000000000000 annunciators
     /tmp/cc1e4Gjl.s:8172   .text.annunciators:00000000000002ec $d
     /tmp/cc1e4Gjl.s:8192   .text.annunciators:000000000000032c $t
     /tmp/cc1e4Gjl.s:8418   .text.annunciators:000000000000042c $d
     /tmp/cc1e4Gjl.s:8434   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:8501   .text.display:0000000000000000 $t
     /tmp/cc1e4Gjl.s:8509   .text.display:0000000000000000 display
     /tmp/cc1e4Gjl.s:9183   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/cc1e4Gjl.s:9204   .text.display:0000000000000340 $t
     /tmp/cc1e4Gjl.s:9829   .text.display:0000000000000614 $d
     /tmp/cc1e4Gjl.s:9852   .text.display:0000000000000660 $t
     /tmp/cc1e4Gjl.s:10714  .text.display:0000000000000998 $d
     /tmp/cc1e4Gjl.s:10735  .text.display:00000000000009c4 $t
     /tmp/cc1e4Gjl.s:11544  .text.display:0000000000000d24 $d
     /tmp/cc1e4Gjl.s:11568  .text.display:0000000000000d6c $t
ARM GAS  /tmp/cc1e4Gjl.s 			page 352


     /tmp/cc1e4Gjl.s:11673  .text.display:0000000000000dd0 $d
     /tmp/cc1e4Gjl.s:11684  .text.frozen_display:0000000000000000 $t
     /tmp/cc1e4Gjl.s:11692  .text.frozen_display:0000000000000000 frozen_display
     /tmp/cc1e4Gjl.s:11722  .text.frozen_display:000000000000001c $d
     /tmp/cc1e4Gjl.s:11727  .text.message:0000000000000000 $t
     /tmp/cc1e4Gjl.s:11735  .text.message:0000000000000000 message
     /tmp/cc1e4Gjl.s:11864  .text.message:0000000000000060 $d
     /tmp/cc1e4Gjl.s:11872  .text.error_message:0000000000000000 $t
     /tmp/cc1e4Gjl.s:11880  .text.error_message:0000000000000000 error_message
     /tmp/cc1e4Gjl.s:12023  .text.error_message:000000000000006c $d
     /tmp/cc1e4Gjl.s:12035  .rodata.str1.4:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12207  .rodata.CSWTCH.328:0000000000000000 CSWTCH.328
     /tmp/cc1e4Gjl.s:12226  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/cc1e4Gjl.s:12200  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/cc1e4Gjl.s:12317  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/cc1e4Gjl.s:12104  .rodata:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12187  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/cc1e4Gjl.s:12188  .bss.DecimalMode:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12193  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/cc1e4Gjl.s:12194  .bss.SeparatorMode:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12196  .bss.no_status_top:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12203  .rodata.CSWTCH.328:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12213  .rodata.CSWTCH.354:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12217  .rodata.CSWTCH.354:0000000000000000 CSWTCH.354
     /tmp/cc1e4Gjl.s:12222  .rodata.DIGITS:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12229  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12233  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/cc1e4Gjl.s:12236  .rodata.S7_INF:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12240  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/cc1e4Gjl.s:12243  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12247  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/cc1e4Gjl.s:12250  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12254  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/cc1e4Gjl.s:12257  .rodata.S7_NaN:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12261  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/cc1e4Gjl.s:12264  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12268  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/cc1e4Gjl.s:12271  .rodata.S7_STEP:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12275  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/cc1e4Gjl.s:12278  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12282  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/cc1e4Gjl.s:12285  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12289  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/cc1e4Gjl.s:12292  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12296  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/cc1e4Gjl.s:12299  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12303  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/cc1e4Gjl.s:12306  .rodata.S_SURE:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12310  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/cc1e4Gjl.s:12313  .rodata.SvnRevision:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12320  .rodata.digtbl:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12324  .rodata.digtbl:0000000000000000 digtbl
     /tmp/cc1e4Gjl.s:12333  .rodata.error_table.8505:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12337  .rodata.error_table.8505:0000000000000000 error_table.8505
     /tmp/cc1e4Gjl.s:12365  .rodata.error_table_text.8506:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12369  .rodata.error_table_text.8506:0000000000000000 error_table_text.8506
ARM GAS  /tmp/cc1e4Gjl.s 			page 353


     /tmp/cc1e4Gjl.s:12397  .rodata.libname:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12401  .rodata.libname:0000000000000000 libname
     /tmp/cc1e4Gjl.s:12407  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12411  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/cc1e4Gjl.s:12421  .rodata.libname_text:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12425  .rodata.libname_text:0000000000000000 libname_text
     /tmp/cc1e4Gjl.s:12435  .rodata.shift_chars.8602:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12439  .rodata.shift_chars.8602:0000000000000000 shift_chars.8602
     /tmp/cc1e4Gjl.s:12442  .rodata.small_dots.8799:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12446  .rodata.small_dots.8799:0000000000000000 small_dots.8799
     /tmp/cc1e4Gjl.s:12449  .rodata.small_minus.8798:0000000000000000 $d
     /tmp/cc1e4Gjl.s:12453  .rodata.small_minus.8798:0000000000000000 small_minus.8798

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
xset
num_arg_0
num_arg
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
ARM GAS  /tmp/cc1e4Gjl.s 			page 354


charlengths
findlengths
unpackchar
RectPolConv
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
argcmds
ProgFree
scopy_char
multicmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
find_label_from
getprog
prt
StackBase
alpha_rcl_s
findmultilbl
getX
packed_from_number
slen
set_NaN
do_conv
free_mem
free_flash
monfuncs
global_regs
local_regs
SizeStatRegs
ARM GAS  /tmp/cc1e4Gjl.s 			page 355



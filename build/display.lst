ARM GAS  /tmp/cc4E4VUn.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/cc4E4VUn.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/cc4E4VUn.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/cc4E4VUn.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/cc4E4VUn.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/cc4E4VUn.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 190:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
ARM GAS  /tmp/cc4E4VUn.s 			page 7


 191:src/display.c ****       MSG2("Interrupted", "X"),
 192:src/display.c **** #endif
 193:src/display.c ****     };
 194:src/display.c **** #undef MSG1
 195:src/display.c **** #undef MSG2
 196:src/display.c **** #ifndef REALBUILD
 197:src/display.c ****   static const char *const error_table_text[] =
 198:src/display.c ****     {
 199:src/display.c ****       " P r o g r a m ",
 200:src/display.c ****       "",
 201:src/display.c ****       " o r   d a t e ",
 202:src/display.c ****       " O p - c o d e ",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " L a b e l ",
 206:src/display.c ****       " O p e r a t i o n ",
 207:src/display.c ****       "",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " F u l l ",
 211:src/display.c ****       " C l a s h ",
 212:src/display.c ****       "",
 213:src/display.c ****       " T o o   s m a l l ",
 214:src/display.c ****       " D a t a   p o i n t s ",
 215:src/display.c ****       " P a r a m e t e r ",
 216:src/display.c ****       "",
 217:src/display.c ****       " D a t a ",
 218:src/display.c ****       " P r o t e c t e d ",
 219:src/display.c ****       " F o u n d ",
 220:src/display.c ****       " M i s m a t c h ",
 221:src/display.c ****       "",
 222:src/display.c ****       " F u l l ",
 223:src/display.c ****       " I n s t a l l e d ",
 224:src/display.c **** #ifndef SHIFT_EXPONENT
 225:src/display.c ****       "",
 226:src/display.c ****       "",
 227:src/display.c **** #endif
 228:src/display.c ****       "",
 229:src/display.c ****     };
 230:src/display.c **** #endif
 231:src/display.c **** 
 232:src/display.c ****   if (e != ERR_NONE || Running) {
 233:src/display.c ****     const char *p = error_table[e];
 234:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 235:src/display.c ****     if (*q == '\0')
 236:src/display.c ****       q = S7_ERROR;
 237:src/display.c ****     if (*q == 'X') {
 238:src/display.c ****       DispMsg = p;
 239:src/display.c ****       frozen_display();
 240:src/display.c ****     }
 241:src/display.c ****     else {
 242:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 243:src/display.c ****       if (*q == '1')
 244:src/display.c **** 	q = CNULL;
 245:src/display.c **** #endif
 246:src/display.c ****       message(p, q);
 247:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
ARM GAS  /tmp/cc4E4VUn.s 			page 8


 248:src/display.c **** #ifndef REALBUILD
 249:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 250:src/display.c **** #endif
 251:src/display.c ****     }
 252:src/display.c **** #ifdef INFRARED
 253:src/display.c ****     if (Tracing) {
 254:src/display.c ****       if (*q == 'X')
 255:src/display.c **** 	print_reg(regX_idx, p, 0);
 256:src/display.c ****       else {
 257:src/display.c **** 	print_tab(0);
 258:src/display.c **** 	print_line(p, 0);
 259:src/display.c **** 	print(' ');
 260:src/display.c **** 	while (*q != '\0') {
 261:src/display.c **** 	  int c = *q;
 262:src/display.c **** 	  if (c >= 'A')
 263:src/display.c **** 	    c |= 0x60; // ASCII lower case
 264:src/display.c **** 	  print(c);
 265:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 266:src/display.c **** 	    ++q;
 267:src/display.c **** 	  ++q;
 268:src/display.c **** 	}
 269:src/display.c **** 	print_advance( 0 );
 270:src/display.c ****       }
 271:src/display.c ****     }
 272:src/display.c **** #endif
 273:src/display.c ****   }
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** 
 277:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 278:src/display.c ****  * display.
 279:src/display.c ****  */
 280:src/display.c **** #define D_TOP 64
 281:src/display.c **** #define D_TL 32
 282:src/display.c **** #define D_TR 8
 283:src/display.c **** #define D_MIDDLE 16
 284:src/display.c **** #define D_BL 4
 285:src/display.c **** #define D_BR 1
 286:src/display.c **** #define D_BOTTOM 2
 287:src/display.c **** 
 288:src/display.c **** #include "charset7.h"
 289:src/display.c **** 
 290:src/display.c **** #ifndef REALBUILD
 291:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 292:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 293:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 294:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 295:src/display.c **** 
 296:src/display.c **** static void set_mant_sign_dot()
 297:src/display.c **** {
 298:src/display.c ****   LastDisplayedNumber[0]='-';
 299:src/display.c ****   set_dot(MANT_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]=' ';
ARM GAS  /tmp/cc4E4VUn.s 			page 9


 305:src/display.c ****   clr_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void set_exp_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedExponent[0]='-';
 311:src/display.c ****   set_dot(EXP_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void clr_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]=' ';
 317:src/display.c ****   clr_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** #else
 321:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 322:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 325:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 326:src/display.c **** 
 327:src/display.c **** #endif
 328:src/display.c **** 
 329:src/display.c **** #ifndef REALBUILD
 330:src/display.c **** int getdig(int ch)
 331:src/display.c **** #else
 332:src/display.c ****   static int getdig(int ch)
 333:src/display.c **** #endif
 334:src/display.c **** {
 335:src/display.c ****   // perform index lookup
 336:src/display.c ****   return digtbl[ch&0xff];
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** void dot(int n, int on) {
 340:src/display.c ****   if (on)	set_dot(n);
 341:src/display.c ****   else	clr_dot(n);
 342:src/display.c **** }
 343:src/display.c **** 
 344:src/display.c **** 
 345:src/display.c **** /* Set the decimal point *after* the indicated digit
 346:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 347:src/display.c ****  * of decimal.
 348:src/display.c ****  */
 349:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 350:src/display.c ****   if (res) {
 351:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 352:src/display.c ****   } else {
 353:src/display.c ****     set_dot(posn+7);
 354:src/display.c ****     if (decimal != DECIMAL_DOT)
 355:src/display.c ****       set_dot(posn+8);
 356:src/display.c **** #ifndef REALBUILD
 357:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 358:src/display.c **** #endif
 359:src/display.c ****   }
 360:src/display.c ****   return res;
 361:src/display.c **** }
ARM GAS  /tmp/cc4E4VUn.s 			page 10


 362:src/display.c **** 
 363:src/display.c **** /* Set the digit group separator *before* the specified digit.
 364:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 365:src/display.c ****  * sep argument.
 366:src/display.c ****  */
 367:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 368:src/display.c ****   if (sep == SEP_NONE)
 369:src/display.c ****     return res;
 370:src/display.c ****   if (res) {
 371:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 372:src/display.c ****     else *res++ = '.';
 373:src/display.c ****   } else {
 374:src/display.c ****     posn -= SEGS_PER_DIGIT;
 375:src/display.c ****     set_dot(posn+7);
 376:src/display.c ****     if (sep == SEP_COMMA)
 377:src/display.c ****       set_dot(posn+8);
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 380:src/display.c **** #endif
 381:src/display.c ****   }
 382:src/display.c ****   return res;
 383:src/display.c **** }
 384:src/display.c **** 
 385:src/display.c **** /* Set a digit in positions [base, base+6] */
 386:src/display.c **** static void set_dig(int base, int ch)
 387:src/display.c **** {
 136              		.loc 1 387 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 388:src/display.c ****   int i;
 140              		.loc 1 388 3 view .LVU36
 389:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 389 3 view .LVU37
 142              	.LBB168:
 143              	.LBI168:
 330:src/display.c **** #else
 144              		.loc 1 330 5 view .LVU38
 145              	.LBB169:
 336:src/display.c **** }
 146              		.loc 1 336 3 view .LVU39
 336:src/display.c **** }
 147              		.loc 1 336 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 336:src/display.c **** }
 149              		.loc 1 336 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE169:
 152              	.LBE168:
 390:src/display.c **** #ifndef REALBUILD
 391:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 391 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 387:src/display.c ****   int i;
 155              		.loc 1 387 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc4E4VUn.s 			page 11


 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB171:
 163              	.LBB170:
 336:src/display.c **** }
 164              		.loc 1 336 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 336:src/display.c **** }
 167              		.loc 1 336 16 view .LVU45
 168              	.LBE170:
 169              	.LBE171:
 170              		.loc 1 391 3 is_stmt 1 view .LVU46
 171              		.loc 1 391 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 392:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 392 5 is_stmt 1 view .LVU48
 174              		.loc 1 392 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 392 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 392 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 392 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 392 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 393:src/display.c ****   else
 394:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 395:src/display.c **** #endif
 396:src/display.c ****   for (i=6; i>=0; i--)
 397:src/display.c ****     {
 398:src/display.c ****       //		dot(base, c & (1 << i));
 399:src/display.c ****       if (c & (1 << i))
 400:src/display.c **** 	set_dot(base);
 196              		.loc 1 400 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 401:src/display.c ****       else
 402:src/display.c **** 	clr_dot(base);
 403:src/display.c ****       base++;
 199              		.loc 1 403 7 is_stmt 1 view .LVU55
 396:src/display.c ****     {
ARM GAS  /tmp/cc4E4VUn.s 			page 12


 200              		.loc 1 396 19 view .LVU56
 396:src/display.c ****     {
 201              		.loc 1 396 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 396:src/display.c ****     {
 204              		.loc 1 396 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 400:src/display.c ****       else
 208              		.loc 1 400 2 is_stmt 1 view .LVU59
 402:src/display.c ****       base++;
 209              		.loc 1 402 2 view .LVU60
 399:src/display.c **** 	set_dot(base);
 210              		.loc 1 399 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 399:src/display.c **** 	set_dot(base);
 212              		.loc 1 399 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 399:src/display.c **** 	set_dot(base);
 216              		.loc 1 399 7 is_stmt 1 view .LVU63
 399:src/display.c **** 	set_dot(base);
 217              		.loc 1 399 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 402:src/display.c ****       base++;
 219              		.loc 1 402 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 403 7 is_stmt 1 view .LVU66
 396:src/display.c ****     {
 223              		.loc 1 396 19 view .LVU67
 396:src/display.c ****     {
 224              		.loc 1 396 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 396:src/display.c ****     {
 227              		.loc 1 396 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 404:src/display.c ****     }
 405:src/display.c **** }
 231              		.loc 1 405 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 394:src/display.c **** #endif
 235              		.loc 1 394 5 is_stmt 1 view .LVU71
 394:src/display.c **** #endif
 236              		.loc 1 394 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 394:src/display.c **** #endif
 238              		.loc 1 394 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
ARM GAS  /tmp/cc4E4VUn.s 			page 13


 394:src/display.c **** #endif
 240              		.loc 1 394 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 394:src/display.c **** #endif
 242              		.loc 1 394 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 394:src/display.c **** #endif
 246              		.loc 1 394 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 406:src/display.c **** 
 407:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 408:src/display.c ****   if (res) *res++ = ch;
 409:src/display.c ****   else	set_dig(base, ch);
 410:src/display.c ****   return res;
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** 
 414:src/display.c **** static void set_digits_string(const char *msg, int j) {
 415:src/display.c ****   for (; *msg != '\0'; msg++) {
 416:src/display.c ****     if (*msg == '.' || *msg == ',')
 417:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 418:src/display.c ****     else {
 419:src/display.c ****       set_dig_s(j, *msg, CNULL);
 420:src/display.c ****       j += SEGS_PER_DIGIT;
 421:src/display.c ****     }
 422:src/display.c ****   }
 423:src/display.c **** }
 424:src/display.c **** 
 425:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 426:src/display.c ****   int i;
 427:src/display.c ****   const int n = res == NULL ? 3 : 4;
 428:src/display.c **** 
 429:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
ARM GAS  /tmp/cc4E4VUn.s 			page 14


 430:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** /* Force the exponent display
 434:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 435:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 436:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 437:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 438:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 439:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 440:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 441:src/display.c ****  */
 442:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 443:src/display.c ****   union {
 444:src/display.c ****     char buf[4];
 445:src/display.c ****     int i;
 446:src/display.c ****   } u;
 447:src/display.c ****   int negative;
 448:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 449:src/display.c ****   int thousands;
 450:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 451:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 452:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 453:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 454:src/display.c **** #  else
 455:src/display.c ****   const int show_large_exponent = 1;
 456:src/display.c **** #  endif
 457:src/display.c **** #else
 458:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 459:src/display.c ****   int thousands;
 460:src/display.c **** #  endif
 461:src/display.c ****   const int show_large_exponent = 0;
 462:src/display.c **** #endif
 463:src/display.c **** 
 464:src/display.c ****   negative = flags & 2;
 465:src/display.c ****   if (exp < 0) {
 466:src/display.c ****     negative = 1;
 467:src/display.c ****     exp = -exp;
 468:src/display.c ****   }
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****   thousands = exp / 1000;
 471:src/display.c **** #endif
 472:src/display.c ****   if (res) {
 473:src/display.c **** #ifdef INCLUDE_YREG_CODE
 474:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 475:src/display.c ****     if (thousands != 0) {
 476:src/display.c **** #else
 477:src/display.c ****       if (exp > 999) {
 478:src/display.c **** #endif
 479:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 480:src/display.c **** 	// No exponent separator for large -ve exponents
 481:src/display.c ****       }
 482:src/display.c ****       else *res++ = 'e'; // Normal separator
 483:src/display.c **** #else
 484:src/display.c ****       *res++ = 'e';
 485:src/display.c **** #endif
 486:src/display.c ****       if (negative) *res++ = '-';
ARM GAS  /tmp/cc4E4VUn.s 			page 15


 487:src/display.c ****     }
 488:src/display.c ****     else {
 489:src/display.c ****       if (negative) SET_EXP_SIGN;
 490:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 491:src/display.c ****       if (thousands != 0) {
 492:src/display.c **** #else
 493:src/display.c **** 	if (exp > 999) {
 494:src/display.c **** #endif
 495:src/display.c **** 	  if (!show_large_exponent
 496:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 497:src/display.c **** 	      && (flags & 8) == 0
 498:src/display.c **** #endif
 499:src/display.c **** 	      ) {
 500:src/display.c **** #ifdef REALBUILD
 501:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 502:src/display.c **** #else
 503:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 504:src/display.c **** #endif
 505:src/display.c **** 	    goto no_number;
 506:src/display.c **** 	  }
 507:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 508:src/display.c **** 	  else {
 509:src/display.c **** 	    exp -= thousands * 1000;
 510:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 511:src/display.c **** 	    if (flags & 16) {
 512:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 513:src/display.c **** 	      int i;
 514:src/display.c **** 
 515:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 516:src/display.c **** 		// Clear digits and separators
 517:src/display.c **** 		clr_dot(i);
 518:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 519:src/display.c **** 	    }
 520:src/display.c **** #  endif
 521:src/display.c **** 	    if (negative) {
 522:src/display.c **** 	      CLR_EXP_SIGN;
 523:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 524:src/display.c **** 	    }
 525:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 526:src/display.c **** 	    flags = 1;
 527:src/display.c **** 	  }
 528:src/display.c **** #endif
 529:src/display.c **** 	}
 530:src/display.c ****       }
 531:src/display.c **** #ifdef REALBUILD
 532:src/display.c ****       u.i = 0; // Smaller ARM code
 533:src/display.c **** #else
 534:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 535:src/display.c **** #endif
 536:src/display.c ****       if (flags & 5) {
 537:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 538:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 539:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 540:src/display.c **** 	  int i;
 541:src/display.c **** 
 542:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 543:src/display.c **** 	    if (u.buf[i] == '0')
ARM GAS  /tmp/cc4E4VUn.s 			page 16


 544:src/display.c **** 	      u.buf[i] = ' ';
 545:src/display.c **** 	    else
 546:src/display.c **** 	      break;
 547:src/display.c **** 	  }
 548:src/display.c **** 	  if (i != 0 && negative) {
 549:src/display.c **** 	    // Move minus sign to right in front of exponent
 550:src/display.c **** 	    CLR_EXP_SIGN;
 551:src/display.c **** 	    u.buf[i - 1] = '-';
 552:src/display.c **** 	  }
 553:src/display.c **** 	}
 554:src/display.c **** #endif
 555:src/display.c ****       }
 556:src/display.c ****       else
 557:src/display.c **** 	num_arg(u.buf, exp);
 558:src/display.c ****     no_number:
 559:src/display.c ****       set_exp_digits_string(u.buf, res);
 560:src/display.c ****     }
 561:src/display.c **** 
 562:src/display.c ****     static void carry_overflow(void) {
 563:src/display.c ****       const int base = SEGS_EXP_BASE;
 564:src/display.c ****       int c;
 565:src/display.c ****       unsigned int b;
 566:src/display.c **** 
 567:src/display.c ****       // Figure out the base
 568:src/display.c ****       switch (State2.smode) {
 569:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 570:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 571:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 572:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 573:src/display.c ****       default:	b = UState.int_base+1;	break;
 574:src/display.c ****       }
 575:src/display.c **** 
 576:src/display.c ****       // Display the base as the first exponent digit
 577:src/display.c ****       if (b > 10 && b < 16)
 578:src/display.c **** 	SET_EXP_SIGN;
 579:src/display.c ****       c = "B34567o9D12345h"[b-2];
 580:src/display.c ****       set_dig(base, c);
 581:src/display.c **** 
 582:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 583:src/display.c ****       if (get_carry())
 584:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 585:src/display.c ****       if (get_overflow())
 586:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 587:src/display.c ****     }
 588:src/display.c **** 
 589:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 590:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 591:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 592:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 593:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 594:src/display.c **** #endif
 595:src/display.c **** 
 596:src/display.c ****     /* Display the annunicator text line.
 597:src/display.c ****      * Care needs to be taken to keep things aligned.
 598:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 599:src/display.c ****      */
 600:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/cc4E4VUn.s 			page 17


 601:src/display.c ****     static void annunciators(void) {
 602:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 603:src/display.c ****       char buf[42], *p = buf, *q="";
 604:src/display.c ****       char buf2[42], *p2 = buf2;
 605:src/display.c ****       int n;
 606:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 607:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 608:src/display.c ****       // Constant variables and code branches depending on a constant variable
 609:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 610:src/display.c ****       // feature run-time configurable if needed.
 611:src/display.c **** #ifdef INCLUDE_YREG_CODE
 612:src/display.c **** #  ifdef YREG_ALWAYS_ON
 613:src/display.c ****       const int yreg_enabled = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_enabled = UState.show_y;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 618:src/display.c ****       const int yreg_hms = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_hms = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 623:src/display.c ****       const int yreg_fract = 1;
 624:src/display.c **** #  else
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #  endif
 627:src/display.c **** #else
 628:src/display.c ****       const int yreg_enabled = 0;
 629:src/display.c ****       const int yreg_hms = 0;
 630:src/display.c ****       const int yreg_fract = 0;
 631:src/display.c **** #endif
 632:src/display.c **** #ifdef RP_PREFIX
 633:src/display.c ****       const int rp_prefix = 1;
 634:src/display.c **** #else
 635:src/display.c ****       const int rp_prefix = 0;
 636:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 637:src/display.c **** #endif
 638:src/display.c ****       // Indicates whether font escape code is compiled in.
 639:src/display.c ****       // This variable will always be set at compile time.
 640:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 641:src/display.c ****       const int has_FONT_ESCAPE = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int has_FONT_ESCAPE = 0;
 644:src/display.c **** #endif
 645:src/display.c **** 
 646:src/display.c ****       xset(buf, '\0', sizeof(buf));
 647:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 648:src/display.c ****       
 649:src/display.c ****       if (is_intmode()) {
 650:src/display.c **** #ifdef SHOW_STACK_SIZE
 651:src/display.c **** 	if (shift_char == ' ') {
 652:src/display.c **** 	  *p2++ = '\007';
 653:src/display.c **** 	  *p2++ = '\346';
 654:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 655:src/display.c **** 	}
 656:src/display.c **** 	else
 657:src/display.c **** #endif
ARM GAS  /tmp/cc4E4VUn.s 			page 18


 658:src/display.c **** 	  {
 659:src/display.c **** 	    *p2++ = shift_char;
 660:src/display.c **** 	    *p2++ = '\006';
 661:src/display.c **** 	  }
 662:src/display.c **** 
 663:src/display.c **** 	switch(int_mode()) {
 664:src/display.c **** 	default:
 665:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 666:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 667:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 668:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 669:src/display.c **** 	}
 670:src/display.c **** 	q = scopy(p2, q);
 671:src/display.c **** 	*q++ = '\006';
 672:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 673:src/display.c **** 
 674:src/display.c **** 	if (IntMaxWindow > 0) {
 675:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 676:src/display.c **** 	  if (*q == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  if (q[1] == '1')
 679:src/display.c **** 	    n += 2;
 680:src/display.c **** 	  while (n-- > 0)
 681:src/display.c **** 	    *p2++ = '\006';
 682:src/display.c **** 
 683:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 684:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 685:src/display.c **** 	}
 686:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 687:src/display.c ****       }
 688:src/display.c ****       else if (!yreg_enabled
 689:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 690:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 691:src/display.c **** #endif
 692:src/display.c **** 	       ) {
 693:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 694:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 695:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 696:src/display.c **** 	if (shift_char == ' ') {
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\342';
 699:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 700:src/display.c **** 	  *p2++ = '\007';
 701:src/display.c **** 	  *p2++ = '\344';
 702:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 703:src/display.c **** 	}
 704:src/display.c **** 	else
 705:src/display.c **** #endif
 706:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 707:src/display.c **** 	    *p2++ = shift_char;
 708:src/display.c **** 	    *p2++ = '\006';
 709:src/display.c **** 	  }
 710:src/display.c **** 	  else {
 711:src/display.c **** 	    *p2++ = 'D';
 712:src/display.c **** 	  }
 713:src/display.c **** 
 714:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/cc4E4VUn.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\024';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 	if (State2.arrow) {
 720:src/display.c **** 	  *p2++ = ' ';
 721:src/display.c **** 	  *p2 = '\015';
 722:src/display.c **** 	  goto skip;
 723:src/display.c **** 	}
 724:src/display.c **** 
 725:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 726:src/display.c **** 	  if (State2.wascomplex) {
 727:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 728:src/display.c **** 	  }
 729:src/display.c **** 	  else if (rp_prefix) {
 730:src/display.c **** 	    if (RectPolConv == 1) {
 731:src/display.c **** 	      q = "\007\306<";
 732:src/display.c **** 	    }
 733:src/display.c **** 	    else {
 734:src/display.c **** 	      q = "\007\306y";
 735:src/display.c **** 	    }
 736:src/display.c **** 	  }
 737:src/display.c **** 	  p = scopy(buf, q);
 738:src/display.c **** 
 739:src/display.c **** 	  goto display_yreg;
 740:src/display.c **** 	}
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	p2 = scopy(p2, q);
 757:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 758:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 759:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 760:src/display.c **** 	}
 761:src/display.c **** #else
 762:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 763:src/display.c **** 	*p2++ = '\007';
 764:src/display.c **** 	*p2++ = '\342';
 765:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 766:src/display.c **** #endif
 767:src/display.c ****       }
 768:src/display.c ****       else { // yreg_enabled
 769:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 770:src/display.c **** 	if (State2.cmplx) {
 771:src/display.c **** 	  *p2++ = '\007';
ARM GAS  /tmp/cc4E4VUn.s 			page 20


 772:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 773:src/display.c **** 	  *p2++ = shift_char;
 774:src/display.c **** 	  //	  q = "\024";
 775:src/display.c **** 	  *p2++ = '\024';
 776:src/display.c **** 	}
 777:src/display.c **** 	else {// if (shift_char != ' ') {
 778:src/display.c **** 	  *p2++ = '\007';
 779:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 780:src/display.c **** 	  *p2++ = shift_char;
 781:src/display.c **** 	  //	  goto no_copy;
 782:src/display.c **** 	}
 783:src/display.c **** 	//	else
 784:src/display.c **** #endif
 785:src/display.c **** 	  if (State2.wascomplex) {
 786:src/display.c **** 	    q = "\007\207i";
 787:src/display.c **** 	    p = scopy(p, q);
 788:src/display.c **** 	    //	    goto no_copy;
 789:src/display.c **** 	  }
 790:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 791:src/display.c **** 	    q = "\007\307<";
 792:src/display.c **** 	    p = scopy(p, q);
 793:src/display.c **** 	    //	    goto no_copy;
 794:src/display.c **** 	  }
 795:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 796:src/display.c **** 	    q = "\007\307y";
 797:src/display.c **** 	    p = scopy(p, q);
 798:src/display.c **** 	    //	    goto no_copy;
 799:src/display.c **** 	  }
 800:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 801:src/display.c **** 	  //	  else
 802:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 803:src/display.c **** 	    //	    q = "\007\207\007";
 804:src/display.c **** 	      *p2++ = '\007';
 805:src/display.c **** 	      *p2++ = '\207';
 806:src/display.c **** 	      *p2++ = '\007';	    
 807:src/display.c **** 	    }
 808:src/display.c **** 	    else {
 809:src/display.c **** 	      *p2++ = '\007';
 810:src/display.c **** 	      *p2++ = '\207';
 811:src/display.c **** 	      *p2++ = ' ';
 812:src/display.c **** 	    }
 813:src/display.c **** #endif
 814:src/display.c **** 	    //	else { 
 815:src/display.c **** #ifndef SHOW_STACK_SIZE
 816:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 817:src/display.c **** 	  p2 = scopy(p2, q);
 818:src/display.c **** #else
 819:src/display.c **** 	  if (is_dblmode()) {
 820:src/display.c **** 	    *p2++ = '\007';
 821:src/display.c **** 	    *p2++ = '\342';
 822:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 823:src/display.c **** 	    //	    q = "\007\345D";
 824:src/display.c **** 	    *p2++ = '\007';
 825:src/display.c **** 	    *p2++ = '\345';
 826:src/display.c **** 	    *p2++ = 'D';
 827:src/display.c **** 	  }
 828:src/display.c **** 	  else {
ARM GAS  /tmp/cc4E4VUn.s 			page 21


 829:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 830:src/display.c **** 	    p2 = scopy(p2, q);
 831:src/display.c **** 	  }
 832:src/display.c **** #endif
 833:src/display.c **** 	  //	}
 834:src/display.c **** 	//	p2 = scopy(p2, q);
 835:src/display.c **** 
 836:src/display.c **** 	switch (UState.date_mode) {
 837:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 838:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 839:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 842:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 845:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 846:src/display.c **** #endif
 847:src/display.c **** #endif
 848:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 849:src/display.c **** 	}
 850:src/display.c **** 	  
 851:src/display.c **** 	//      no_copy:
 852:src/display.c **** 	// display either arrow or datemode
 853:src/display.c **** 	if (State2.arrow) {
 854:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 855:src/display.c **** 	} // no need to skip y display with arrow here
 856:src/display.c **** 	else {
 857:src/display.c **** 	  p2 = scopy(p2, q);
 858:src/display.c **** 	}
 859:src/display.c **** 	if (State2.runmode) {
 860:src/display.c **** 	  decNumber y;
 861:src/display.c **** 	display_yreg:
 862:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 863:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 864:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 865:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 866:src/display.c **** 	   */
 867:src/display.c **** 	  if (is_intmode()) {
 868:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 869:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 870:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 871:src/display.c **** 	    goto skip;
 872:src/display.c **** 	  }
 873:src/display.c **** 		      
 874:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 875:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 876:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 877:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 878:src/display.c **** 	    if (yreg_hms && State2.hms) {
 879:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 880:src/display.c **** 
 881:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 882:src/display.c **** 	      UState.nothousands = 1;
 883:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 884:src/display.c **** 	      UState.nothousands = saved_nothousands;
 885:src/display.c **** 	      // First replace the '@' character with the degree symbol
ARM GAS  /tmp/cc4E4VUn.s 			page 22


 886:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 887:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 888:src/display.c **** 	      // then remove the fractional part of the seconds.
 889:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 890:src/display.c **** 	      while (*p) {
 891:src/display.c **** 		replace_char(buf, p[0], p[1]);
 892:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 893:src/display.c **** 		  goto skip;
 894:src/display.c **** 		}
 895:src/display.c **** 		p += 2;
 896:src/display.c **** 	      }
 897:src/display.c **** 	      goto skip;
 898:src/display.c **** 	    }
 899:src/display.c **** 	    if (yreg_fract && UState.fract
 900:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 901:src/display.c **** 		&& !State2.cmplx
 902:src/display.c **** #endif
 903:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 904:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 905:src/display.c **** #endif
 906:src/display.c **** 		&& set_x_fract(&y, p)) {
 907:src/display.c **** 	      char ltgteq;
 908:src/display.c **** 
 909:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 910:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 911:src/display.c **** 	      ltgteq = *q;
 912:src/display.c **** 	      switch (ltgteq) {
 913:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 914:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 915:src/display.c **** 	      }
 916:src/display.c **** 	      scopy(q, "\007\344?");
 917:src/display.c **** 	      q[2] = ltgteq;
 918:src/display.c **** 
 919:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 920:src/display.c **** 		goto skip;
 921:src/display.c **** 	      }
 922:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 923:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 924:src/display.c **** 		goto skip;
 925:src/display.c **** 	      }
 926:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 927:src/display.c **** 	    }
 928:src/display.c **** 	  }
 929:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 930:src/display.c **** 	    int extra_pixels;
 931:src/display.c **** 
 932:src/display.c **** 	    set_x_dn(&y, p, &n);
 933:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 934:src/display.c **** 	    if (extra_pixels <= 0)
 935:src/display.c **** 	      break;
 936:src/display.c **** 
 937:src/display.c **** 	    xset(p, '\0', n+10);
 938:src/display.c **** 
 939:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 940:src/display.c **** 	  }
 941:src/display.c **** 	}
 942:src/display.c ****       }
ARM GAS  /tmp/cc4E4VUn.s 			page 23


 943:src/display.c ****       
 944:src/display.c ****     skip:
 945:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 946:src/display.c ****       set_status_top_always(buf2);
 947:src/display.c ****       
 948:src/display.c ****     }
 949:src/display.c **** #else
 950:src/display.c ****     static void annunciators(void) {
 951:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 952:src/display.c ****       char buf[42], *p = buf, *q="";
 953:src/display.c ****       int n;
 954:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 955:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 956:src/display.c ****       // Constant variables and code branches depending on a constant variable
 957:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 958:src/display.c ****       // feature run-time configurable if needed.
 959:src/display.c **** #ifdef INCLUDE_YREG_CODE
 960:src/display.c **** #  ifdef YREG_ALWAYS_ON
 961:src/display.c ****       const int yreg_enabled = 1;
 962:src/display.c **** #  else
 963:src/display.c ****       const int yreg_enabled = UState.show_y;
 964:src/display.c **** #  endif
 965:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 966:src/display.c ****       const int yreg_hms = 1;
 967:src/display.c **** #  else
 968:src/display.c ****       const int yreg_hms = 0;
 969:src/display.c **** #  endif
 970:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 971:src/display.c ****       const int yreg_fract = 1;
 972:src/display.c **** #  else
 973:src/display.c ****       const int yreg_fract = 0;
 974:src/display.c **** #  endif
 975:src/display.c **** #else
 976:src/display.c ****       const int yreg_enabled = 0;
 977:src/display.c ****       const int yreg_hms = 0;
 978:src/display.c ****       const int yreg_fract = 0;
 979:src/display.c **** #endif
 980:src/display.c **** #ifdef RP_PREFIX
 981:src/display.c ****       const int rp_prefix = 1;
 982:src/display.c **** #else
 983:src/display.c ****       const int rp_prefix = 0;
 984:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 985:src/display.c **** #endif
 986:src/display.c ****       // Indicates whether font escape code is compiled in.
 987:src/display.c ****       // This variable will always be set at compile time.
 988:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 989:src/display.c ****       const int has_FONT_ESCAPE = 1;
 990:src/display.c **** #else
 991:src/display.c ****       const int has_FONT_ESCAPE = 0;
 992:src/display.c **** #endif
 993:src/display.c **** 
 994:src/display.c ****       xset(buf, '\0', sizeof(buf));
 995:src/display.c ****       
 996:src/display.c ****       if (is_intmode()) {
 997:src/display.c **** #ifdef SHOW_STACK_SIZE
 998:src/display.c **** 	if (shift_char == ' ') {
 999:src/display.c **** 	  *p++ = '\007';
ARM GAS  /tmp/cc4E4VUn.s 			page 24


1000:src/display.c **** 	  *p++ = '\346';
1001:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1002:src/display.c **** 	}
1003:src/display.c **** 	else
1004:src/display.c **** #endif
1005:src/display.c **** 	  {
1006:src/display.c **** 	    *p++ = shift_char;
1007:src/display.c **** 	    *p++ = '\006';
1008:src/display.c **** 	  }
1009:src/display.c **** 
1010:src/display.c **** 	switch(int_mode()) {
1011:src/display.c **** 	default:
1012:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1013:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1014:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1015:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1016:src/display.c **** 	}
1017:src/display.c **** 	q = scopy(p, q);
1018:src/display.c **** 	*q++ = '\006';
1019:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1020:src/display.c **** 
1021:src/display.c **** 	if (IntMaxWindow > 0) {
1022:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1023:src/display.c **** 	  if (*q == '1')
1024:src/display.c **** 	    n += 2;
1025:src/display.c **** 	  if (q[1] == '1')
1026:src/display.c **** 	    n += 2;
1027:src/display.c **** 	  while (n-- > 0)
1028:src/display.c **** 	    *p++ = '\006';
1029:src/display.c **** 
1030:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1031:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1032:src/display.c **** 	}
1033:src/display.c ****       }
1034:src/display.c ****       else if (!yreg_enabled
1035:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1036:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1037:src/display.c **** #endif
1038:src/display.c **** 	       ) {
1039:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1040:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1041:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1042:src/display.c **** 	if (shift_char == ' ') {
1043:src/display.c **** 	  *p++ = '\007';
1044:src/display.c **** 	  *p++ = '\342';
1045:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1046:src/display.c **** 	  *p++ = '\007';
1047:src/display.c **** 	  *p++ = '\344';
1048:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1049:src/display.c **** 	}
1050:src/display.c **** 	else
1051:src/display.c **** #endif
1052:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1053:src/display.c **** 	    *p++ = shift_char;
1054:src/display.c **** 	    *p++ = '\006';
1055:src/display.c **** 	  }
1056:src/display.c **** 	  else {
ARM GAS  /tmp/cc4E4VUn.s 			page 25


1057:src/display.c **** 	    *p++ = 'D';
1058:src/display.c **** 	  }
1059:src/display.c **** 
1060:src/display.c **** 	if (State2.cmplx) {
1061:src/display.c **** 	  *p++ = ' ';
1062:src/display.c **** 	  *p = '\024';
1063:src/display.c **** 	  goto skip;
1064:src/display.c **** 	}
1065:src/display.c **** 	if (State2.arrow) {
1066:src/display.c **** 	  *p++ = ' ';
1067:src/display.c **** 	  *p = '\015';
1068:src/display.c **** 	  goto skip;
1069:src/display.c **** 	}
1070:src/display.c **** 
1071:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1072:src/display.c **** 	  if (State2.wascomplex) {
1073:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1074:src/display.c **** 	  }
1075:src/display.c **** 	  else if (rp_prefix) {
1076:src/display.c **** 	    if (RectPolConv == 1) {
1077:src/display.c **** 	      q = "\007\306<";
1078:src/display.c **** 	    }
1079:src/display.c **** 	    else {
1080:src/display.c **** 	      q = "\007\306y";
1081:src/display.c **** 	    }
1082:src/display.c **** 	  }
1083:src/display.c **** 	  p = scopy(buf, q);
1084:src/display.c **** 
1085:src/display.c **** 	  goto display_yreg;
1086:src/display.c **** 	}
1087:src/display.c **** 
1088:src/display.c **** 	switch (UState.date_mode) {
1089:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1090:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1091:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1092:src/display.c **** #endif
1093:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1094:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1095:src/display.c **** #endif
1096:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1097:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1098:src/display.c **** #endif
1099:src/display.c **** #endif
1100:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1101:src/display.c **** 	}
1102:src/display.c **** 	p = scopy(p, q);
1103:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1104:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1105:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1106:src/display.c **** 	}
1107:src/display.c **** #else
1108:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1109:src/display.c **** 	*p++ = '\007';
1110:src/display.c **** 	*p++ = '\342';
1111:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1112:src/display.c **** #endif
1113:src/display.c ****       }
ARM GAS  /tmp/cc4E4VUn.s 			page 26


1114:src/display.c ****       else { // yreg_enabled
1115:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1116:src/display.c **** 	if (State2.cmplx) {
1117:src/display.c **** 	  *p++ = '\007';
1118:src/display.c **** 	  *p++ = '\344';
1119:src/display.c **** 	  *p++ = shift_char;
1120:src/display.c **** 	  q = "\024";
1121:src/display.c **** 	}
1122:src/display.c **** 	else if (shift_char != ' ') {
1123:src/display.c **** 	  *p++ = '\007';
1124:src/display.c **** 	  *p++ = '\307';
1125:src/display.c **** 	  *p++ = shift_char;
1126:src/display.c **** 	  goto no_copy;
1127:src/display.c **** 	}
1128:src/display.c **** 	else
1129:src/display.c **** #endif
1130:src/display.c **** 	  if (State2.wascomplex) {
1131:src/display.c **** 	    q = "\007\207i";
1132:src/display.c **** 	  }
1133:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1134:src/display.c **** 	    q = "\007\307<";
1135:src/display.c **** 	  }
1136:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1137:src/display.c **** 	    q = "\007\307y";
1138:src/display.c **** 	  }
1139:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1140:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1141:src/display.c **** 	    q = "\007\207\007";
1142:src/display.c **** 	  }
1143:src/display.c **** #endif
1144:src/display.c **** 	  else {
1145:src/display.c **** #ifndef SHOW_STACK_SIZE
1146:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1147:src/display.c **** #else
1148:src/display.c **** 	    if (is_dblmode()) {
1149:src/display.c **** 	      *p++ = '\007';
1150:src/display.c **** 	      *p++ = '\342';
1151:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1152:src/display.c **** 	      q = "\007\345D";
1153:src/display.c **** 	    }
1154:src/display.c **** 	    else {
1155:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1156:src/display.c **** 	    }
1157:src/display.c **** #endif
1158:src/display.c **** 	  }
1159:src/display.c **** 	p = scopy(p, q);
1160:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1161:src/display.c ****       no_copy:
1162:src/display.c **** #endif
1163:src/display.c **** 
1164:src/display.c **** 	if (State2.arrow) {
1165:src/display.c **** 	  scopy(p, "\007\204\006\015");
1166:src/display.c **** 	} else if (State2.runmode) {
1167:src/display.c **** 	  decNumber y;
1168:src/display.c **** 	display_yreg:
1169:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1170:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
ARM GAS  /tmp/cc4E4VUn.s 			page 27


1171:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1172:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1173:src/display.c **** 	   */
1174:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1175:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1176:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1177:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1178:src/display.c **** 	    if (yreg_hms && State2.hms) {
1179:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1180:src/display.c **** 
1181:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1182:src/display.c **** 	      UState.nothousands = 1;
1183:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1184:src/display.c **** 	      UState.nothousands = saved_nothousands;
1185:src/display.c **** 	      // First replace the '@' character with the degree symbol
1186:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1187:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1188:src/display.c **** 	      // then remove the fractional part of the seconds.
1189:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1190:src/display.c **** 	      while (*p) {
1191:src/display.c **** 		replace_char(buf, p[0], p[1]);
1192:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1193:src/display.c **** 		  goto skip;
1194:src/display.c **** 		}
1195:src/display.c **** 		p += 2;
1196:src/display.c **** 	      }
1197:src/display.c **** 	      goto skip;
1198:src/display.c **** 	    }
1199:src/display.c **** 	    if (yreg_fract && UState.fract
1200:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1201:src/display.c **** 		&& !State2.cmplx
1202:src/display.c **** #endif
1203:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1204:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1205:src/display.c **** #endif
1206:src/display.c **** 		&& set_x_fract(&y, p)) {
1207:src/display.c **** 	      char ltgteq;
1208:src/display.c **** 
1209:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1210:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1211:src/display.c **** 	      ltgteq = *q;
1212:src/display.c **** 	      switch (ltgteq) {
1213:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1214:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1215:src/display.c **** 	      }
1216:src/display.c **** 	      scopy(q, "\007\344?");
1217:src/display.c **** 	      q[2] = ltgteq;
1218:src/display.c **** 
1219:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1220:src/display.c **** 		goto skip;
1221:src/display.c **** 	      }
1222:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1223:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1224:src/display.c **** 		goto skip;
1225:src/display.c **** 	      }
1226:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1227:src/display.c **** 	    }
ARM GAS  /tmp/cc4E4VUn.s 			page 28


1228:src/display.c **** 	  }
1229:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1230:src/display.c **** 	    int extra_pixels;
1231:src/display.c **** 
1232:src/display.c **** 	    set_x_dn(&y, p, &n);
1233:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1234:src/display.c **** 	    if (extra_pixels <= 0)
1235:src/display.c **** 	      break;
1236:src/display.c **** 
1237:src/display.c **** 	    xset(p, '\0', n+10);
1238:src/display.c **** 
1239:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1240:src/display.c **** 	  }
1241:src/display.c **** 	}
1242:src/display.c ****       }
1243:src/display.c ****       
1244:src/display.c ****     skip:	set_status_top(buf);
1245:src/display.c ****     }
1246:src/display.c **** #endif //top_row
1247:src/display.c ****     static void disp_x(const char *p) {
1248:src/display.c ****       int i;
1249:src/display.c ****       int gotdot = -1;
1250:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1251:src/display.c ****       const
1252:src/display.c **** #endif
1253:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1254:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1255:src/display.c ****       int overflow_to_left = 0;
1256:src/display.c **** #endif
1257:src/display.c **** 
1258:src/display.c ****       if (*p == '-') {
1259:src/display.c **** 	SET_MANT_SIGN;
1260:src/display.c **** 	p++;
1261:src/display.c ****       }
1262:src/display.c **** 
1263:src/display.c ****       if (is_intmode()) {
1264:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1265:src/display.c **** 	  set_dig(i, *p);
1266:src/display.c **** 	  i += SEGS_PER_DIGIT;
1267:src/display.c **** 	}
1268:src/display.c **** 	carry_overflow();
1269:src/display.c ****       } else {
1270:src/display.c **** 	set_separator_decimal_modes();
1271:src/display.c **** 
1272:src/display.c **** 	i = 0;
1273:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1274:src/display.c **** 	if ( CmdLineDot > 1 ) {
1275:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1276:src/display.c **** 	  const
1277:src/display.c **** #  endif
1278:src/display.c **** 	    int double_dot = 0;
1279:src/display.c **** 	  int j;
1280:src/display.c **** 
1281:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1282:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1283:src/display.c **** 	      gotdot = j;
1284:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/cc4E4VUn.s 			page 29


1285:src/display.c **** 	      double_dot = (p[j+1] == '.');
1286:src/display.c **** #  endif
1287:src/display.c **** 	    }
1288:src/display.c **** 	  }
1289:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1290:src/display.c **** 	  if (j > 0) {
1291:src/display.c **** 	    p += j + 1;
1292:src/display.c **** 	    i = SEGS_PER_DIGIT;
1293:src/display.c **** 	    if (gotdot <= j) {
1294:src/display.c **** 	      gotdot = 0;
1295:src/display.c **** 	      if (double_dot)
1296:src/display.c **** 		p++;
1297:src/display.c **** 	    }
1298:src/display.c **** 	    else if (*p == '.') {
1299:src/display.c **** 	      gotdot = 0;
1300:src/display.c **** 	      p++;
1301:src/display.c **** 	      if (!double_dot)
1302:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1303:src/display.c **** 	    }
1304:src/display.c **** 	    else gotdot = -1;
1305:src/display.c **** 	    set_dig(0, '<');
1306:src/display.c **** 	    overflow_to_left = 1;
1307:src/display.c **** 	  }
1308:src/display.c **** 	  else gotdot = -1;
1309:src/display.c **** 	}
1310:src/display.c **** #endif
1311:src/display.c **** 
1312:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1313:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1314:src/display.c **** 	       && *p != 'D'
1315:src/display.c **** #endif
1316:src/display.c **** 	       ; p++) {
1317:src/display.c **** 	  if (*p == '.') {
1318:src/display.c **** 	    if (gotdot < 0)
1319:src/display.c **** 	      gotdot = i;
1320:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1321:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1322:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1323:src/display.c **** 	      if ( *(p+1) == '.' ) {
1324:src/display.c **** 		p++;
1325:src/display.c **** 	      }
1326:src/display.c **** #  else
1327:src/display.c **** 	      if ( i != gotdot ) {
1328:src/display.c **** #  endif
1329:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1330:src/display.c **** 		i += segs_per_digit;
1331:src/display.c **** 	      }
1332:src/display.c **** 	      else {
1333:src/display.c **** 		if ( CmdLineDot > 1 ) {
1334:src/display.c **** 		  i += segs_per_digit;
1335:src/display.c **** 		}
1336:src/display.c **** 		else {
1337:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1338:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1339:src/display.c **** 		}
1340:src/display.c **** 	      }
1341:src/display.c **** #else
ARM GAS  /tmp/cc4E4VUn.s 			page 30


1342:src/display.c **** 	      if (i > 0)
1343:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1344:src/display.c **** 	      else {
1345:src/display.c **** 		set_dig(i, '0');
1346:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1347:src/display.c **** 		i += segs_per_digit;
1348:src/display.c **** 	      }
1349:src/display.c **** #endif
1350:src/display.c **** 	    } else {
1351:src/display.c **** 	      set_dig(i, *p);
1352:src/display.c **** 	      i += segs_per_digit;
1353:src/display.c **** 	    }
1354:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1355:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1356:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1357:src/display.c **** #endif
1358:src/display.c **** 	  }
1359:src/display.c **** 
1360:src/display.c **** 	  /* Implement a floating comma */
1361:src/display.c **** 	  if (gotdot < 0)
1362:src/display.c **** 	    gotdot = i;
1363:src/display.c **** 	  for (;;) {
1364:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1365:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1366:src/display.c **** 	      break;
1367:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1368:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1369:src/display.c **** 	      break;
1370:src/display.c **** #endif
1371:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1372:src/display.c **** 	  }
1373:src/display.c **** 
1374:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1375:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1376:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1377:src/display.c **** 	    int flags = 8;
1378:src/display.c **** #  else
1379:src/display.c **** 	    int flags = 12;
1380:src/display.c **** #  endif
1381:src/display.c **** 
1382:src/display.c **** 	    if (*p == 'D')
1383:src/display.c **** 	      flags |= 2;
1384:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1385:src/display.c **** 	      flags |= 16;
1386:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1387:src/display.c **** 	  }
1388:src/display.c **** #else
1389:src/display.c **** 	  if (*p == 'E') {
1390:src/display.c **** 	    p++;
1391:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1392:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1393:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  else
1395:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1396:src/display.c **** #  endif
1397:src/display.c **** 	  } 
1398:src/display.c **** #endif
ARM GAS  /tmp/cc4E4VUn.s 			page 31


1399:src/display.c **** 	}
1400:src/display.c ****       }
1401:src/display.c **** 
1402:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1403:src/display.c **** 
1404:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1405:src/display.c **** 	const int ws = word_size();
1406:src/display.c **** 	unsigned int b;
1407:src/display.c **** 	long long int vs = value;
1408:src/display.c **** 	unsigned long long int v;
1409:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1410:src/display.c **** 	int i, j, k;
1411:src/display.c **** 	int sign = 0;
1412:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1413:src/display.c **** 
1414:src/display.c **** 	switch (State2.smode) {
1415:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1416:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1417:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1418:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1419:src/display.c **** 	default:	b = int_base();	break;
1420:src/display.c **** 	}
1421:src/display.c **** 
1422:src/display.c **** 	if (!res) {
1423:src/display.c **** 	  IntMaxWindow = 0;
1424:src/display.c **** 	  carry_overflow();
1425:src/display.c **** 	}
1426:src/display.c **** 
1427:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1428:src/display.c **** 	  v = extract_value(value, &sign);
1429:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1430:src/display.c **** 	    v = value;
1431:src/display.c **** 	  if (v == 0) {
1432:src/display.c **** 	    if (sign)
1433:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1434:src/display.c **** 	    set_dig_s(dig, '0', res);
1435:src/display.c **** 	    return;
1436:src/display.c **** 	  } else
1437:src/display.c **** 	    for (i=0; v != 0; i++) {
1438:src/display.c **** 	      const int r = v % b;
1439:src/display.c **** 	      v /= b;
1440:src/display.c **** 	      buf[i] = DIGITS[r];
1441:src/display.c **** 	    }
1442:src/display.c **** 	} else {
1443:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1444:src/display.c **** 	  if (ws < 64) {
1445:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1446:src/display.c **** 	    vs &= mask;
1447:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1448:src/display.c **** 	      vs |= ~mask;
1449:src/display.c **** 	  }
1450:src/display.c **** 
1451:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1452:src/display.c **** 	    set_dig_s(dig, '0', res);
1453:src/display.c **** 	    return;
1454:src/display.c **** 	  } else if (!UState.leadzero) {
1455:src/display.c **** 	    v = (unsigned long long int)vs;
ARM GAS  /tmp/cc4E4VUn.s 			page 32


1456:src/display.c **** 	    for (i=0; v != 0; i++) {
1457:src/display.c **** 	      const int r = v % b;
1458:src/display.c **** 	      v /= b;
1459:src/display.c **** 	      buf[i] = DIGITS[r];
1460:src/display.c **** 	    }
1461:src/display.c **** 	  } else {
1462:src/display.c **** 	    int n;
1463:src/display.c **** 	    const unsigned int b1 = b >> 1;
1464:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1465:src/display.c **** 	    v = (unsigned long long int)vs;
1466:src/display.c **** 
1467:src/display.c **** 	    n = (ws + fac) / (fac+1);
1468:src/display.c **** 	    for (i=0; i<n; i++) {
1469:src/display.c **** 	      const int r = v % b;
1470:src/display.c **** 	      v /= b;
1471:src/display.c **** 	      buf[i] = DIGITS[r];
1472:src/display.c **** 	    }
1473:src/display.c **** 	  }
1474:src/display.c **** 	}
1475:src/display.c **** #ifdef BIGGER_DISPLAY
1476:src/display.c **** #define MAX_INT_Y_DIG 13
1477:src/display.c **** #else
1478:src/display.c **** #define MAX_INT_Y_DIG 7
1479:src/display.c **** #endif
1480:src/display.c **** 	/* At this point i is the number of digits in the output */
1481:src/display.c **** 	int nd = i;
1482:src/display.c **** 	if (res) {
1483:src/display.c **** 	  if (sign) *res++ = '-';
1484:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1485:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1486:src/display.c **** 	      *res++ = buf[i];
1487:src/display.c **** 	    *res++ = '.';
1488:src/display.c **** 	    *res++ = '.';
1489:src/display.c **** 	  }
1490:src/display.c **** 	  else {
1491:src/display.c **** 	    while (--i >= 0)
1492:src/display.c **** 	      *res++ = buf[i];
1493:src/display.c **** 	  }
1494:src/display.c **** 	} else {
1495:src/display.c **** #if 0
1496:src/display.c **** 	  set_separator_decimal_modes();
1497:src/display.c **** 
1498:src/display.c **** 	  // Allows configuration of digit grouping per base
1499:src/display.c **** 	  static const char grouping[] = 
1500:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1501:src/display.c **** 		    //	   2     3     4     5     6     7     8
1502:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1503:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1504:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1505:src/display.c **** 	    : grouping[b - 2] >> 4;
1506:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1507:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1508:src/display.c **** #else
1509:src/display.c **** 	  // Less flexible but shorter
1510:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1511:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1512:src/display.c **** 	    : b == 16 ? 2 : 3;
ARM GAS  /tmp/cc4E4VUn.s 			page 33


1513:src/display.c **** 	  set_separator_decimal_modes();
1514:src/display.c **** #endif
1515:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1516:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1517:src/display.c **** 	    State2.window = 0;
1518:src/display.c **** 	  buf[i] = '\0';
1519:src/display.c **** 
1520:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1521:src/display.c **** 	  for (k = 0; k < 12; k++)
1522:src/display.c **** 	    if (buf[j + k] == '\0')
1523:src/display.c **** 	      break;
1524:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1525:src/display.c **** 	    int ch = buf[j++];
1526:src/display.c **** 	    if (i >= shift)
1527:src/display.c **** 	      ch -= 030;
1528:src/display.c **** 	    set_dig(dig, ch);
1529:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1530:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1531:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1532:src/display.c **** 	  }
1533:src/display.c **** 	  if (sign) {
1534:src/display.c **** 	    if (dig >= 0)
1535:src/display.c **** 	      set_dig(dig, '-');
1536:src/display.c **** 	    else	SET_MANT_SIGN;
1537:src/display.c **** 	  }
1538:src/display.c **** 	}
1539:src/display.c ****       }
1540:src/display.c **** 
1541:src/display.c ****       /* Handle special cases.
1542:src/display.c ****        * return non-zero if the number is special.
1543:src/display.c ****        */
1544:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1545:src/display.c **** 	if (decNumberIsSpecial(x)) {
1546:src/display.c **** 	  if (decNumberIsNaN(x)) {
1547:src/display.c **** 	    if (res) {
1548:src/display.c **** 	      scopy(res, "NaN");
1549:src/display.c **** 	    } else {
1550:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1551:src/display.c **** #ifndef REALBUILD
1552:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1553:src/display.c **** 	      forceDispPlot=0;
1554:src/display.c **** #endif
1555:src/display.c **** 	    }
1556:src/display.c **** 	    return 1;
1557:src/display.c **** 	  } else {
1558:src/display.c **** 	    if (decNumberIsNegative(x)) {
1559:src/display.c **** 	      if (res) *res++ = '-';
1560:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1561:src/display.c **** 	    }
1562:src/display.c **** 	    if (res)
1563:src/display.c **** 	      *res++ = '\237';
1564:src/display.c **** 	    else {
1565:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1566:src/display.c **** #ifndef REALBUILD
1567:src/display.c **** 	      if (decNumberIsNegative(x)) {
1568:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1569:src/display.c **** 	      }
ARM GAS  /tmp/cc4E4VUn.s 			page 34


1570:src/display.c **** 	      else {
1571:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1572:src/display.c **** 	      }
1573:src/display.c **** 	      forceDispPlot=0;
1574:src/display.c **** #endif
1575:src/display.c **** 	    }
1576:src/display.c **** 	    return 1;
1577:src/display.c **** 	  }
1578:src/display.c **** 	}
1579:src/display.c **** 	return 0;
1580:src/display.c ****       }
1581:src/display.c **** 
1582:src/display.c **** 
1583:src/display.c ****       /* Extract the two lowest integral digits from the number
1584:src/display.c ****        */
1585:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1586:src/display.c **** 	decNumber n;
1587:src/display.c **** 
1588:src/display.c **** 	decNumberMod(&n, x, &const_100);
1589:src/display.c **** 	*v = dn_to_int(&n);
1590:src/display.c **** 	dn_mulpow10(&n, x, -2);
1591:src/display.c **** 	decNumberTrunc(res, &n);
1592:src/display.c ****       }
1593:src/display.c **** 
1594:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1594 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1595:src/display.c **** 	char b[32];
 276              		.loc 1 1595 2 view .LVU78
1596:src/display.c **** 	int i, j;
 277              		.loc 1 1596 2 view .LVU79
1597:src/display.c **** 
1598:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1598 2 view .LVU80
 279              		.loc 1 1598 12 view .LVU81
1594:src/display.c **** 	char b[32];
 280              		.loc 1 1594 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1599:src/display.c **** 	  if (v == 0)
1600:src/display.c **** 	    b[i] = spaces?' ':'0';
1601:src/display.c **** 	  else {
1602:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1602 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1594:src/display.c **** 	char b[32];
 292              		.loc 1 1594 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
ARM GAS  /tmp/cc4E4VUn.s 			page 35


 294              		.cfi_def_cfa_offset 64
1594:src/display.c **** 	char b[32];
 295              		.loc 1 1594 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1598:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1598 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1599:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1599 4 is_stmt 1 view .LVU87
 303              		.loc 1 1602 6 view .LVU88
 304              		.loc 1 1602 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1603:src/display.c **** 	    v /= 10;
 311              		.loc 1 1603 6 is_stmt 1 view .LVU90
1604:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1604 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1598:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1598 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1599:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1599 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1598:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1598 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1604 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1603:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1603 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1604 6 is_stmt 1 view .LVU97
1598:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1598 17 view .LVU98
1598:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1598 12 view .LVU99
1598:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1598 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1598:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1598 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 36


 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1598:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1598 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1599:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1599 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1600:src/display.c **** 	  else {
 349              		.loc 1 1600 6 is_stmt 1 view .LVU104
1598:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1598 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1598:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1598 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1600:src/display.c **** 	  else {
 355              		.loc 1 1600 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1598:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1598 17 is_stmt 1 view .LVU108
1598:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1598 12 view .LVU109
1598:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1598 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1598:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1598 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1605:src/display.c **** 	  }
1606:src/display.c **** 	}
1607:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1607 2 is_stmt 1 view .LVU112
 371              		.loc 1 1607 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1608:src/display.c **** 	  b[0] = '0';
1609:src/display.c **** 
1610:src/display.c **** 	/* Copy across and appropriately leading space things
1611:src/display.c **** 	 */
1612:src/display.c **** 	j = *jin;
 374              		.loc 1 1612 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1607:src/display.c **** 	  b[0] = '0';
ARM GAS  /tmp/cc4E4VUn.s 			page 37


 376              		.loc 1 1607 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1608:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1608 4 is_stmt 1 view .LVU116
1608:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1608 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1612 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1613:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1613 2 view .LVU119
 386              		.loc 1 1613 8 view .LVU120
1612:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1612 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1613 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1614:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1614 4 is_stmt 1 view .LVU123
 395              	.LBB172:
 396              	.LBB173:
 408:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 408 12 view .LVU124
 398              	.LBE173:
 399              	.LBE172:
 400              		.loc 1 1614 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB177:
 403              	.LBB174:
 408:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 408 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 408:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 408 16 view .LVU127
 408              	.LBE174:
 409              	.LBI172:
 407:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 407 14 is_stmt 1 view .LVU128
 411              	.LBB175:
 408:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 408 3 view .LVU129
 408:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 408 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 408:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 408 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 408:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 408 16 view .LVU132
ARM GAS  /tmp/cc4E4VUn.s 			page 38


 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 410:src/display.c **** }
 423              		.loc 1 410 3 is_stmt 1 view .LVU133
 410:src/display.c **** }
 424              		.loc 1 410 3 is_stmt 0 view .LVU134
 425              	.LBE175:
 426              	.LBE177:
1615:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1615 4 is_stmt 1 view .LVU135
1613:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1613 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1615 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1613:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1613 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1616:src/display.c **** 	}
1617:src/display.c **** 	*jin = j;
 436              		.loc 1 1617 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1617 2 is_stmt 1 view .LVU140
 440              		.loc 1 1617 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1618:src/display.c **** 	return str;
1619:src/display.c ****       }
 443              		.loc 1 1619 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1617:src/display.c **** 	return str;
 445              		.loc 1 1617 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1618:src/display.c **** 	return str;
 447              		.loc 1 1618 2 is_stmt 1 view .LVU144
 448              		.loc 1 1619 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB178:
 458              	.LBB176:
 409:src/display.c ****   return res;
 459              		.loc 1 409 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 409:src/display.c ****   return res;
 463              		.loc 1 409 8 is_stmt 0 view .LVU147
ARM GAS  /tmp/cc4E4VUn.s 			page 39


 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE176:
 470              	.LBE178:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 425:src/display.c ****   int i;
 485              		.loc 1 425 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 426:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 426 3 view .LVU149
 427:src/display.c **** 
 490              		.loc 1 427 3 view .LVU150
 425:src/display.c ****   int i;
 491              		.loc 1 425 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 427:src/display.c **** 
 500              		.loc 1 427 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 429 3 is_stmt 1 view .LVU153
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 429 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB179:
 513              	.LBB180:
 409:src/display.c ****   return res;
 514              		.loc 1 409 8 is_stmt 0 view .LVU155
ARM GAS  /tmp/cc4E4VUn.s 			page 40


 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 408:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 408 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 408:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 408 19 view .LVU157
 523              	.LBE180:
 524              	.LBE179:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 429 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB186:
 528              	.LBB181:
 408:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 408 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 410:src/display.c **** }
 532              		.loc 1 410 3 is_stmt 1 view .LVU160
 410:src/display.c **** }
 533              		.loc 1 410 3 is_stmt 0 view .LVU161
 534              	.LBE181:
 535              	.LBE186:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 429 36 is_stmt 1 view .LVU162
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 429 13 view .LVU163
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 429 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 430:src/display.c **** }
 542              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB187:
 544              	.LBB182:
 408:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 408 12 discriminator 3 view .LVU166
 408:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 408 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE182:
 548              	.LBE187:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 429 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB188:
 553              	.LBB183:
 408:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 408 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 408:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cc4E4VUn.s 			page 41


 557              		.loc 1 408 16 discriminator 3 view .LVU170
 558              	.LBE183:
 559              	.LBI179:
 407:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 407 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB184:
 408:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 408 3 discriminator 3 view .LVU172
 563              	.LBE184:
 564              	.LBE188:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 429 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB189:
 569              	.LBB185:
 408:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 408 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 409:src/display.c ****   return res;
 573              		.loc 1 409 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 410:src/display.c **** }
 578              		.loc 1 410 3 view .LVU176
 410:src/display.c **** }
 579              		.loc 1 410 3 is_stmt 0 view .LVU177
 580              	.LBE185:
 581              	.LBE189:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 429 36 is_stmt 1 view .LVU178
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 429 13 view .LVU179
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 429 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 431:src/display.c **** 
 589              		.loc 1 431 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 431:src/display.c **** 
 591              		.loc 1 431 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
ARM GAS  /tmp/cc4E4VUn.s 			page 42


 604              	.LVL48:
 605              	.LFB20:
1585:src/display.c **** 	decNumber n;
 606              		.loc 1 1585 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1586:src/display.c **** 
 610              		.loc 1 1586 2 view .LVU184
1588:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1588 2 view .LVU185
1585:src/display.c **** 	decNumber n;
 612              		.loc 1 1585 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1585:src/display.c **** 	decNumber n;
 621              		.loc 1 1585 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1588:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1588 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1588:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1588 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1585:src/display.c **** 	decNumber n;
 630              		.loc 1 1585 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1588:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1588 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1589:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1589 2 is_stmt 1 view .LVU192
1589:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1589 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1590:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1590 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1589:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1589 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1590:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1590 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
ARM GAS  /tmp/cc4E4VUn.s 			page 43


 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1591:src/display.c ****       }
 649              		.loc 1 1591 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1592:src/display.c **** 
 654              		.loc 1 1592 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1592:src/display.c **** 
 661              		.loc 1 1592 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1620:src/display.c **** 
1621:src/display.c **** 
1622:src/display.c ****       /* Display the number in H.MS mode.
1623:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1624:src/display.c ****        */
1625:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1626:src/display.c **** 	decNumber x, y, a, t, u;
1627:src/display.c **** 	int j=0;
1628:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1629:src/display.c **** 	unsigned int hr, min, sec, fs;
1630:src/display.c **** 
1631:src/display.c **** 	if (check_special_dn(rgx, res)) {
1632:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1633:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1634:src/display.c **** 	  return;
1635:src/display.c **** 	}
1636:src/display.c **** 
1637:src/display.c **** 	set_separator_decimal_modes();
1638:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1639:src/display.c **** 	dn_abs(&a, rgx);
1640:src/display.c **** 	if (decNumberIsNegative(&x)) {
1641:src/display.c **** 	  if (res != NULL)
1642:src/display.c **** 	    *res++ += '-';
1643:src/display.c **** 	  else
ARM GAS  /tmp/cc4E4VUn.s 			page 44


1644:src/display.c **** 	    SET_MANT_SIGN;
1645:src/display.c **** 	  dn_minus(&x, &x);
1646:src/display.c **** 	}
1647:src/display.c **** 
1648:src/display.c **** 	decNumberHR2HMS(&y, &x);
1649:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1650:src/display.c **** 	decNumberRound(&u, &t);
1651:src/display.c **** 
1652:src/display.c **** 	hms_step(&t, &u, &fs);
1653:src/display.c **** 	hms_step(&u, &t, &sec);
1654:src/display.c **** 	hms_step(&t, &u, &min);
1655:src/display.c **** 	hr = dn_to_int(&t);
1656:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1657:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1658:src/display.c **** 
1659:src/display.c **** 	// degrees
1660:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1661:src/display.c **** 	res = set_dig_s(j, '@', res);
1662:src/display.c **** 	j += SEGS_PER_DIGIT;
1663:src/display.c **** 
1664:src/display.c **** 	// minutes
1665:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1666:src/display.c **** 	res = set_dig_s(j, '\'', res);
1667:src/display.c **** 	j += SEGS_PER_DIGIT;
1668:src/display.c **** 
1669:src/display.c **** 	// seconds
1670:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1671:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1672:src/display.c **** 
1673:src/display.c **** 	// Fractional seconds
1674:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1675:src/display.c **** 
1676:src/display.c **** 	// We're now pointing at the exponent's first digit...
1677:src/display.c **** 	res = set_dig_s(j, '"', res);
1678:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1679:src/display.c **** 
1680:src/display.c **** 	// Check for values too big or small
1681:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1682:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1683:src/display.c **** 	} else if (! dn_eq0(&a)) {
1684:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1685:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1686:src/display.c **** 	  }
1687:src/display.c **** 	}
1688:src/display.c ****       }
1689:src/display.c **** 
1690:src/display.c **** 
1691:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1692:src/display.c **** 	decNumber x, w, n, d, t;
1693:src/display.c **** 	char buf[32], *p = buf;
1694:src/display.c **** 	int j;
1695:src/display.c **** 
1696:src/display.c **** 	if (check_special_dn(rgx, res))
1697:src/display.c **** 	  return 1;
1698:src/display.c **** 	dn_abs(&x, rgx);
1699:src/display.c **** 	if (dn_ge(&x, &const_100000))
1700:src/display.c **** 	  return 0;
ARM GAS  /tmp/cc4E4VUn.s 			page 45


1701:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1702:src/display.c **** 	  return 0;
1703:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1704:src/display.c **** 	  if (res != NULL)
1705:src/display.c **** 	    *res++ += '-';
1706:src/display.c **** 	  else
1707:src/display.c **** 	    SET_MANT_SIGN;
1708:src/display.c **** 	}
1709:src/display.c **** 	decNumberFrac(&w, &x);
1710:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1711:src/display.c **** 
1712:src/display.c **** 	dn_divide(&t, &n, &d);
1713:src/display.c **** 	dn_compare(&t, &t, &w);
1714:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1715:src/display.c **** 
1716:src/display.c **** 	if (dn_eq(&n, &d)) {
1717:src/display.c **** 	  dn_inc(&w);
1718:src/display.c **** 	  decNumberZero(&n);
1719:src/display.c **** 	}
1720:src/display.c **** 
1721:src/display.c **** 	if (!UState.improperfrac) {
1722:src/display.c **** 	  if (!dn_eq0(&w)) {
1723:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1724:src/display.c **** 	    *p++ = ' ';
1725:src/display.c **** 	  }
1726:src/display.c **** 	} else {
1727:src/display.c **** 	  dn_multiply(&x, &w, &d);
1728:src/display.c **** 	  dn_add(&n, &n, &x);
1729:src/display.c **** 	}
1730:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1731:src/display.c **** 	*p++ = '/';
1732:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1733:src/display.c **** 	*p = '\0';
1734:src/display.c **** 	if ((p - 12) > buf) {
1735:src/display.c **** 	  p -= 12;
1736:src/display.c **** 	  *p = '<';
1737:src/display.c **** 	} else	p = buf;
1738:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1739:src/display.c **** 	  res = set_dig_s(j, *p, res);
1740:src/display.c **** 	  j += SEGS_PER_DIGIT;
1741:src/display.c **** 	}
1742:src/display.c **** 
1743:src/display.c **** 	if (dn_eq0(&t))
1744:src/display.c **** 	  p = (char *)S7_fract_EQ;
1745:src/display.c **** 	else if (decNumberIsNegative(&t))
1746:src/display.c **** 	  p = (char *)S7_fract_LT;
1747:src/display.c **** 	else
1748:src/display.c **** 	  p = (char *)S7_fract_GT;
1749:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1750:src/display.c **** 	  res = set_dig_s(j, *p, res);
1751:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1752:src/display.c **** 	}
1753:src/display.c **** 	return 1;
1754:src/display.c ****       }
1755:src/display.c **** 
1756:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1757:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
ARM GAS  /tmp/cc4E4VUn.s 			page 46


1758:src/display.c **** 	decNumber c;
1759:src/display.c **** 	int true_exp, x=0;
1760:src/display.c **** 	int min_pos_exp, max_neg_exp;
1761:src/display.c **** 
1762:src/display.c **** 	if ( mode != MODE_STD ) {
1763:src/display.c **** 	  min_pos_exp = 9;
1764:src/display.c **** 	  max_neg_exp = -5;
1765:src/display.c **** 	}
1766:src/display.c **** 	else {
1767:src/display.c **** 	  min_pos_exp = 12;
1768:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1769:src/display.c **** 	}
1770:src/display.c **** 
1771:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1772:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1773:src/display.c **** 
1774:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1775:src/display.c **** 	  x = *dd;
1776:src/display.c **** 	}
1777:src/display.c **** 
1778:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1779:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1780:src/display.c **** 	  *dd += -true_exp;
1781:src/display.c **** 	  return MODE_FIX;
1782:src/display.c **** 	}
1783:src/display.c **** 
1784:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1785:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1786:src/display.c **** 	}
1787:src/display.c **** 	else {
1788:src/display.c **** 	  return MODE_STD;
1789:src/display.c **** 	}
1790:src/display.c ****       }
1791:src/display.c **** #else
1792:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1793:src/display.c **** 	decNumber b, c;
1794:src/display.c **** 
1795:src/display.c **** 	dn_1(&b);
1796:src/display.c **** 	b.exponent -= UState.dispdigs;
1797:src/display.c **** 	dn_abs(&c, z);
1798:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1799:src/display.c **** 	  return MODE_FIX;
1800:src/display.c **** 	return MODE_STD;
1801:src/display.c ****       }
1802:src/display.c **** #endif
1803:src/display.c **** 
1804:src/display.c ****       /* SHOW display mode
1805:src/display.c ****        * in double precision show left or right part
1806:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1807:src/display.c ****        */
1808:src/display.c ****       static void show_x(char *x, int exp) {
1809:src/display.c **** 	const int dbl = is_dblmode();
1810:src/display.c **** 	char *p;
1811:src/display.c **** 	int i, j;
1812:src/display.c **** 	char *upper_str;
1813:src/display.c **** 	enum separator_modes separator_mode;
1814:src/display.c **** 	char decimal_mark;
ARM GAS  /tmp/cc4E4VUn.s 			page 47


1815:src/display.c **** 	char thousands_sep;
1816:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1817:src/display.c **** 	const int grouping = 0;
1818:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1819:src/display.c **** 	const int grouping = !UState.nothousands;
1820:src/display.c **** #else
1821:src/display.c **** 	const int grouping = 1;
1822:src/display.c **** #endif
1823:src/display.c **** 	int negative;
1824:src/display.c **** 
1825:src/display.c **** 	if (x[0] == '-') {
1826:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1827:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1828:src/display.c **** 
1829:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1830:src/display.c **** 	  xcopy(x, small_minus, 4);
1831:src/display.c **** 	  x += 4;
1832:src/display.c **** 	  negative = 4;
1833:src/display.c **** #else
1834:src/display.c **** 	  ++x;
1835:src/display.c **** 	  negative = 1;
1836:src/display.c **** #endif
1837:src/display.c **** 	}
1838:src/display.c **** 	else negative = 0;
1839:src/display.c **** 
1840:src/display.c **** 	p = find_char(x, '\0');
1841:src/display.c **** 	xset(p, '0', 34 - (p - x));
1842:src/display.c **** 
1843:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1844:src/display.c **** 	  separator_mode = SEP_COMMA;
1845:src/display.c **** 	  decimal_mark = '.';
1846:src/display.c **** 	  thousands_sep = ',';
1847:src/display.c **** 	}
1848:src/display.c **** 	else {
1849:src/display.c **** 	  separator_mode = SEP_DOT;
1850:src/display.c **** 	  decimal_mark = ',';
1851:src/display.c **** 	  thousands_sep = '.';
1852:src/display.c **** 	}
1853:src/display.c **** 
1854:src/display.c **** 	if (State2.window) { // right half in double precision mode
1855:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1856:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1857:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1858:src/display.c **** 
1859:src/display.c **** 	  upper_str = x + 3;
1860:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1861:src/display.c **** 	  if (grouping) {
1862:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1863:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1864:src/display.c **** 	    x += 3 + 13 + 7;
1865:src/display.c **** 	  }
1866:src/display.c **** 	  else x += 3 + 13 + 6;
1867:src/display.c **** #else
1868:src/display.c **** 	  upper_str = x + 13;
1869:src/display.c **** 	  xset(upper_str, '.', 3);
1870:src/display.c **** 	  if (grouping) {
1871:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
ARM GAS  /tmp/cc4E4VUn.s 			page 48


1872:src/display.c **** 	    upper_str[6] = thousands_sep;
1873:src/display.c **** 	    x += 13 + 3 + 7;
1874:src/display.c **** 	  }
1875:src/display.c **** 	  else x += 13 + 3 + 6;
1876:src/display.c **** #endif
1877:src/display.c **** 	  negative = 0;
1878:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1879:src/display.c **** 	}
1880:src/display.c **** 	else {
1881:src/display.c **** 	  upper_str = x;
1882:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1883:src/display.c **** 	  x[1] = decimal_mark;
1884:src/display.c **** 	  if (grouping) {
1885:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1886:src/display.c **** 	    x[5] = thousands_sep;
1887:src/display.c **** 	    x += 9;
1888:src/display.c **** 	  }
1889:src/display.c **** 	  else x += 8;
1890:src/display.c **** 	  if (dbl) {
1891:src/display.c **** 	    if (exp < 0) {
1892:src/display.c **** 	      x[9] = '-';
1893:src/display.c **** 	      exp = -exp;
1894:src/display.c **** 	    }
1895:src/display.c **** 	    else
1896:src/display.c **** 	      x[9] = ' ';
1897:src/display.c **** 	    j = exp / 1000;
1898:src/display.c **** 	    x[10] = '0' + j;
1899:src/display.c **** 	    exp -= 1000 * j;
1900:src/display.c **** 	  }
1901:src/display.c **** 	  else {
1902:src/display.c **** 	    x[9] = '\0';
1903:src/display.c **** 	    x[10] = '\0';
1904:src/display.c **** 	  }
1905:src/display.c **** 	  xcopy(x + 1, x, 11);
1906:src/display.c **** 	  *x = 0;
1907:src/display.c **** 	  set_exp(exp, 1, CNULL);
1908:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1909:src/display.c **** 	}
1910:src/display.c **** 	if (grouping) {
1911:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1912:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1913:src/display.c **** 	  }
1914:src/display.c **** 	}
1915:src/display.c **** 
1916:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1917:src/display.c **** 	  set_dig(j, x[i]);
1918:src/display.c **** 
1919:src/display.c **** 	*x = '\0';
1920:src/display.c **** 	set_status(upper_str - negative);
1921:src/display.c ****       }
1922:src/display.c **** 
1923:src/display.c **** 
1924:src/display.c ****       /* Display the X register in the numeric portion of the display.
1925:src/display.c ****        * We have to account for the various display modes and numbers of
1926:src/display.c ****        * digits.
1927:src/display.c ****        */
1928:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
ARM GAS  /tmp/cc4E4VUn.s 			page 49


1929:src/display.c **** 	decNumber z;
1930:src/display.c **** 	int digits = DISPLAY_DIGITS;
1931:src/display.c **** 
1932:src/display.c **** 	if (dbl)
1933:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1934:src/display.c **** 	else
1935:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1936:src/display.c **** 	set_x_dn(&z, res, &digits);
1937:src/display.c ****       }
1938:src/display.c **** 
1939:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1940:src/display.c **** 	char x[50], *obp = x;
1941:src/display.c **** 	int odig = 0;
1942:src/display.c **** 	int show_exp = 0;
1943:src/display.c **** 	int j;
1944:src/display.c **** 	char mantissa[64];
1945:src/display.c **** 	int exp = 0;
1946:src/display.c **** 	char *p = mantissa;
1947:src/display.c **** 	char *r;
1948:src/display.c **** 	const char *q;
1949:src/display.c **** 	int count, i;
1950:src/display.c **** 	int extra_digits = 0;
1951:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1952:src/display.c **** 	int dd;
1953:src/display.c **** 	int dispdigs;
1954:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1955:src/display.c **** #else
1956:src/display.c **** 	int dd = UState.dispdigs;
1957:src/display.c **** 	int mode = UState.dispmode;
1958:src/display.c **** #endif
1959:src/display.c **** 	int c;
1960:src/display.c **** 	int negative = 0;
1961:src/display.c **** 	int trimzeros = 0;
1962:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1963:src/display.c **** 	const int show_large_exponent = 0;
1964:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1965:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1966:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1967:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1968:src/display.c **** #else
1969:src/display.c **** 	const int show_large_exponent = 1;
1970:src/display.c **** #endif
1971:src/display.c **** 
1972:src/display.c **** 	set_separator_decimal_modes();
1973:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1974:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1975:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1976:src/display.c **** 	    if (State2.hms) {
1977:src/display.c **** 	      set_x_hms(z, res);
1978:src/display.c **** 	      return;
1979:src/display.c **** 	    }
1980:src/display.c **** 	    else if (UState.fract) {
1981:src/display.c **** 	      if (set_x_fract(z, res))
1982:src/display.c **** 		return;
1983:src/display.c **** 	    }
1984:src/display.c **** 	  }
1985:src/display.c **** 	}		
ARM GAS  /tmp/cc4E4VUn.s 			page 50


1986:src/display.c **** #else
1987:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1988:src/display.c **** 	  if (State2.hms) {
1989:src/display.c **** 	    set_x_hms(z, res);
1990:src/display.c **** 	    State2.hms = 0;
1991:src/display.c **** 	    return;
1992:src/display.c **** 	  } else if (UState.fract) {
1993:src/display.c **** 	    if (set_x_fract(z, res))
1994:src/display.c **** 	      return;
1995:src/display.c **** 	  }
1996:src/display.c **** 	}
1997:src/display.c **** #endif
1998:src/display.c **** 
1999:src/display.c **** 	if (check_special_dn(z, res))
2000:src/display.c **** 	  return;
2001:src/display.c **** 
2002:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2003:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2004:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2005:src/display.c **** 	  z->exponent = 0;
2006:src/display.c **** 	}
2007:src/display.c **** 
2008:src/display.c **** 	xset(x, '\0', sizeof(x));
2009:src/display.c **** 
2010:src/display.c **** 	if (dn_eq0(z)) {
2011:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2012:src/display.c **** 	    x[0] = '-';
2013:src/display.c **** 	    x[1] = '0';
2014:src/display.c **** 	  } else
2015:src/display.c **** 	    x[0] = '0';
2016:src/display.c **** 	} else
2017:src/display.c **** 	  decNumberToString(z, x);
2018:src/display.c **** 
2019:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2020:src/display.c **** 	  show_x(x, exp);
2021:src/display.c **** 	  return;
2022:src/display.c **** 	}
2023:src/display.c **** 
2024:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2025:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2026:src/display.c **** 	  //  ALL mode: fill the display
2027:src/display.c **** 	  dd = *display_digits - 1;
2028:src/display.c **** 	else
2029:src/display.c **** 	  dd = dispdigs;
2030:src/display.c **** 
2031:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
2032:src/display.c **** 	  int orig_mode = mode;
2033:src/display.c **** 
2034:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2035:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2036:src/display.c **** 	    // allow zeros to be trimmed
2037:src/display.c **** 	    trimzeros = 1;
2038:src/display.c **** 	  if (orig_mode == MODE_STD)
2039:src/display.c **** 	    dd = *display_digits - 1;
2040:src/display.c ****  	}
2041:src/display.c **** #else
2042:src/display.c **** 	if (mode == MODE_STD) {
ARM GAS  /tmp/cc4E4VUn.s 			page 51


2043:src/display.c **** 	  mode = std_round_fix(z);
2044:src/display.c **** 	  trimzeros = 1;
2045:src/display.c **** 	  dd = *display_digits - 1;
2046:src/display.c **** 	} else if (dd >= *display_digits)
2047:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2048:src/display.c **** 	  dd = *display_digits - 1;
2049:src/display.c **** #endif
2050:src/display.c **** 
2051:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2052:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2053:src/display.c **** 
2054:src/display.c **** 	q = find_char(x, 'E');
2055:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2056:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2057:src/display.c **** 	if (q == NULL) exp = 0;
2058:src/display.c **** 	else {
2059:src/display.c **** 	  exp = s_to_i(q+1);
2060:src/display.c **** 	  if (*q == 'D') exp = -exp;
2061:src/display.c **** 	}
2062:src/display.c **** #else
2063:src/display.c **** 	if (q == NULL) exp = 0;
2064:src/display.c **** 	else exp = s_to_i(q+1);
2065:src/display.c **** #endif
2066:src/display.c **** 
2067:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2068:src/display.c **** 	for (q=x; *q == ' '; q++);
2069:src/display.c **** 	if (!res) {
2070:src/display.c **** 	  CLR_EXP_SIGN;
2071:src/display.c **** 	  CLR_MANT_SIGN;
2072:src/display.c **** 	}
2073:src/display.c **** 	if (*q == '-') {
2074:src/display.c **** 	  negative = 1;
2075:src/display.c **** 	  q++;
2076:src/display.c **** 	} else if (*q == '+')
2077:src/display.c **** 	  q++;
2078:src/display.c **** 	for (; *q == '0'; q++);
2079:src/display.c **** 	if (*q == '.') {
2080:src/display.c **** 	  do
2081:src/display.c **** 	    exp--;
2082:src/display.c **** 	  while (*++q == '0');
2083:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2084:src/display.c **** 	    *p++ = *q++;
2085:src/display.c **** 	} else {
2086:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2087:src/display.c **** 	    *p++ = *q++;
2088:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2089:src/display.c **** 	    *p++ = *q++;
2090:src/display.c **** 	    exp++;
2091:src/display.c **** 	  }
2092:src/display.c **** 	  if (*q == '.') {
2093:src/display.c **** 	    q++;
2094:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2095:src/display.c **** 	      *p++ = *q++;
2096:src/display.c **** 	  }
2097:src/display.c **** 	}
2098:src/display.c **** 
2099:src/display.c **** 	if (mode == MODE_FIX) {
ARM GAS  /tmp/cc4E4VUn.s 			page 52


2100:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2101:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2102:src/display.c **** 	  else {
2103:src/display.c **** 	    extra_digits = exp;
2104:src/display.c **** 	    /* We might have push the fixed decimals off the
2105:src/display.c **** 	     * screen so adjust if so.
2106:src/display.c **** 	     */
2107:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2108:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2109:src/display.c **** 	  }
2110:src/display.c **** 	}
2111:src/display.c **** 
2112:src/display.c **** 	// Round the mantissa to the number of digits desired
2113:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2114:src/display.c **** 	if (*p >= '5') {	// Round up
2115:src/display.c **** 	  *p = '0';
2116:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2117:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2118:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2119:src/display.c **** 	    mantissa[0] = '1';
2120:src/display.c **** 	    exp++;
2121:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2122:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2123:src/display.c **** 	      extra_digits = 0;
2124:src/display.c **** 	    }
2125:src/display.c **** 	  } else {
2126:src/display.c **** 	    while (*--p == '9')
2127:src/display.c **** 	      *p = '0';
2128:src/display.c **** 	    (*p)++;
2129:src/display.c **** 	  }
2130:src/display.c **** 	}
2131:src/display.c **** 
2132:src/display.c **** 	// Zap what is left
2133:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2134:src/display.c **** 
2135:src/display.c **** 	p = mantissa;
2136:src/display.c **** 	switch (mode) {
2137:src/display.c **** 	default:
2138:src/display.c **** 	case MODE_STD:   
2139:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2140:src/display.c **** 	  if (count != *display_digits)
2141:src/display.c **** 	    count++;
2142:src/display.c **** 	  // Too big or too small to fit on display
2143:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2144:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2145:src/display.c **** 	    case -1:
2146:src/display.c **** 	    case 2:
2147:src/display.c **** 	      *obp++ = *p++;
2148:src/display.c **** 	      odig++;
2149:src/display.c **** 	      dd--;
2150:src/display.c **** 	      exp--;
2151:src/display.c **** 	    case -2:
2152:src/display.c **** 	    case 1:
2153:src/display.c **** 	      *obp++ = *p++;
2154:src/display.c **** 	      odig++;
2155:src/display.c **** 	      dd--;
2156:src/display.c **** 	      exp--;
ARM GAS  /tmp/cc4E4VUn.s 			page 53


2157:src/display.c **** 	    case 0:
2158:src/display.c **** 	      ;
2159:src/display.c **** 	    };
2160:src/display.c **** 	    *obp++ = *p++;
2161:src/display.c **** 	    odig++;
2162:src/display.c **** 	    *obp++ = '.';
2163:src/display.c **** 	    for (i=1; i<count; i++) {
2164:src/display.c **** 	      *obp++ = *p++;
2165:src/display.c **** 	      odig++;
2166:src/display.c **** 	    }
2167:src/display.c **** 	    show_exp = 1;
2168:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2169:src/display.c **** 	    for(i=0; i<=exp; i++) {
2170:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2171:src/display.c **** 		*obp++ = ',';
2172:src/display.c **** 	      *obp++ = *p++;
2173:src/display.c **** 	      odig++;
2174:src/display.c **** 	    }
2175:src/display.c **** 	    *obp++ = '.';
2176:src/display.c **** 	    if (count > (exp + 1)) {
2177:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2178:src/display.c **** 		*obp++ = *p++;
2179:src/display.c **** 		odig++;
2180:src/display.c **** 	      }
2181:src/display.c **** 	    }
2182:src/display.c **** 	  } else {		// All digits to right of decimal point
2183:src/display.c **** 	    *obp++ = '0';
2184:src/display.c **** 	    odig++;
2185:src/display.c **** 	    *obp++ = '.';
2186:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2187:src/display.c **** 	      *obp++ = '0';
2188:src/display.c **** 	      odig++;
2189:src/display.c **** 	    }
2190:src/display.c **** 	    for (i=0; i<count; i++) {
2191:src/display.c **** 	      *obp++ = *p++;
2192:src/display.c **** 	      odig++;
2193:src/display.c **** 	    }
2194:src/display.c **** 	  }
2195:src/display.c **** 	  break;
2196:src/display.c **** 
2197:src/display.c **** 	case MODE_FIX:
2198:src/display.c **** 	  j = 0;
2199:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2200:src/display.c **** 	    for (i=0; i<=exp; i++) {
2201:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2202:src/display.c **** 		*obp++ = ',';
2203:src/display.c **** 	      *obp++ = *p++;
2204:src/display.c **** 	      odig++;
2205:src/display.c **** 	    }
2206:src/display.c **** 	    *obp++ = '.';
2207:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2208:src/display.c **** 	      *obp++ = *p++;
2209:src/display.c **** 	      odig++;
2210:src/display.c **** 	    }
2211:src/display.c **** 	  } else {		// All digits to right of decimal point
2212:src/display.c **** 	    *obp++ = '0';
2213:src/display.c **** 	    odig++;
ARM GAS  /tmp/cc4E4VUn.s 			page 54


2214:src/display.c **** 	    *obp++ = '.';
2215:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2216:src/display.c **** 	      *obp++ = '0';
2217:src/display.c **** 	      odig++;
2218:src/display.c **** 	      dd--;
2219:src/display.c **** 	    }
2220:src/display.c **** 	    while (dd-- > 0) {
2221:src/display.c **** 	      *obp++ = *p++;
2222:src/display.c **** 	      odig++;
2223:src/display.c **** 	    }
2224:src/display.c **** 	  }
2225:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2226:src/display.c **** 	  if (trimzeros)
2227:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2228:src/display.c **** 	      obp--;
2229:src/display.c **** 	      odig--;
2230:src/display.c **** 	    }
2231:src/display.c **** #endif			
2232:src/display.c **** 	  break;
2233:src/display.c **** 
2234:src/display.c **** 	case MODE_ENG:
2235:src/display.c **** 	  switch (exp % 3) {
2236:src/display.c **** 	  case -1:
2237:src/display.c **** 	  case 2:
2238:src/display.c **** 	    *obp++ = *p++;
2239:src/display.c **** 	    odig++;
2240:src/display.c **** 	    dd--;
2241:src/display.c **** 	    exp--;
2242:src/display.c **** 	  case -2:
2243:src/display.c **** 	  case 1:
2244:src/display.c **** 	    *obp++ = *p++;
2245:src/display.c **** 	    odig++;
2246:src/display.c **** 	    dd--;
2247:src/display.c **** 	    exp--;
2248:src/display.c **** 	  case 0:
2249:src/display.c **** 	    ;
2250:src/display.c **** 	  };
2251:src/display.c **** 	  // Falling through
2252:src/display.c **** 
2253:src/display.c **** 	case MODE_SCI:
2254:src/display.c **** 	  *obp++ = *p++;
2255:src/display.c **** 	  odig++;
2256:src/display.c **** 	  *obp++ = '.';
2257:src/display.c **** 	  dd--;
2258:src/display.c **** 	  while (dd-- >= 0) {
2259:src/display.c **** 	    *obp++ = *p++;
2260:src/display.c **** 	    odig++;
2261:src/display.c **** 	  }
2262:src/display.c **** 	  show_exp = 1;
2263:src/display.c **** 	}
2264:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2265:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2266:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2267:src/display.c **** 	    obp--;
2268:src/display.c **** 	    odig--;
2269:src/display.c **** 	  }
2270:src/display.c **** #endif	
ARM GAS  /tmp/cc4E4VUn.s 			page 55


2271:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2272:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2273:src/display.c **** 	  set_x_dn(z, res, display_digits);
2274:src/display.c **** 	  return;
2275:src/display.c **** 	}
2276:src/display.c **** 	/* Finally, send the output to the display */
2277:src/display.c **** 	*obp = '\0';
2278:src/display.c **** 	if (odig > *display_digits)
2279:src/display.c **** 	  odig = *display_digits;
2280:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2281:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2282:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2283:src/display.c **** 	if (negative) {
2284:src/display.c **** 	  if (res) *res++ = '-';
2285:src/display.c **** 	  else {
2286:src/display.c **** 	    if (j == 0)
2287:src/display.c **** 	      SET_MANT_SIGN;
2288:src/display.c **** 	    else
2289:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2290:src/display.c **** 	  }
2291:src/display.c **** 	}
2292:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2293:src/display.c **** 	  if (c == '.') {
2294:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2295:src/display.c **** 	  } else if (c == ',') {
2296:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2297:src/display.c **** 	  } else {
2298:src/display.c **** 	    res = set_dig_s(j, c, res);
2299:src/display.c **** 	    j += SEGS_PER_DIGIT;
2300:src/display.c **** 	  }
2301:src/display.c **** 	}
2302:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2303:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2304:src/display.c **** 	  if ( !res ) {
2305:src/display.c **** 	    set_exp(exp, 4, res);
2306:src/display.c **** 	  }
2307:src/display.c **** 	  else {
2308:src/display.c **** 	    set_exp(exp, 0, res);
2309:src/display.c **** 	  }
2310:src/display.c **** 	}
2311:src/display.c **** #else
2312:src/display.c **** 	if (show_exp)
2313:src/display.c **** 	  set_exp(exp, 0, res);
2314:src/display.c **** #endif
2315:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2316:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2317:src/display.c **** 	*display_digits = odig;
2318:src/display.c ****       }
2319:src/display.c **** 
2320:src/display.c **** #if defined(QTGUI) || defined(IOS)
2321:src/display.c ****       void format_display(char *buf) {
2322:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2323:src/display.c **** 	  {
2324:src/display.c **** 	    const char *p = get_cmdline();
2325:src/display.c **** 	    if (p == NULL) {
2326:src/display.c **** 	      format_reg(regX_idx, buf);
2327:src/display.c **** 	    } else {
ARM GAS  /tmp/cc4E4VUn.s 			page 56


2328:src/display.c **** 	      scopy(buf, p);
2329:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2330:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2331:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2332:src/display.c **** 		buf[CmdLineEex] = 'E';
2333:src/display.c **** 		buf[CmdLineEex+1] = '-';
2334:src/display.c **** 	      }
2335:src/display.c **** #  endif
2336:src/display.c **** 	    }
2337:src/display.c **** 	  }
2338:src/display.c **** 	else {
2339:src/display.c **** 	  buf[0]=0;
2340:src/display.c **** 	}
2341:src/display.c ****       }
2342:src/display.c **** #endif
2343:src/display.c **** 
2344:src/display.c ****       void format_reg(int index, char *buf) {
2345:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2346:src/display.c **** 
2347:src/display.c **** 	if (is_intmode())
2348:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2349:src/display.c **** #ifndef HP16C_MODE_CHANGE
2350:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2351:src/display.c **** 	  decNumber x;
2352:src/display.c **** 	  int s;
2353:src/display.c **** 	  unsigned long long int v;
2354:src/display.c **** 
2355:src/display.c **** 	  getRegister(&x, index);
2356:src/display.c **** 	  v = dn_to_ull(&x, &s);
2357:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2358:src/display.c **** 	}
2359:src/display.c **** #endif
2360:src/display.c **** 	else
2361:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2362:src/display.c ****       }
2363:src/display.c **** 
2364:src/display.c ****       /* Display the status screen */
2365:src/display.c ****       static void show_status(void) {
2366:src/display.c **** 	int i, n;
2367:src/display.c **** 	int j = SEGS_EXP_BASE;
2368:src/display.c **** 	const int status = State2.status - 3;
2369:src/display.c **** 	char buf[16], *p = buf;
2370:src/display.c **** 	unsigned int pc;
2371:src/display.c **** 
2372:src/display.c **** 	if (status == -2) {
2373:src/display.c **** 	  set_status("Free:");
2374:src/display.c **** 	  p = num_arg(buf, free_mem());
2375:src/display.c **** 	  p = scopy(p, " , FL. ");
2376:src/display.c **** 	  p = num_arg(p, free_flash());
2377:src/display.c **** 	  *p = '\0';
2378:src/display.c **** 	  set_digits_string(buf, 0);
2379:src/display.c **** 	}
2380:src/display.c **** 	else if (status == -1) {
2381:src/display.c **** 	  /* Top line */
2382:src/display.c **** 	  p = scopy(buf, "Regs:");
2383:src/display.c **** 	  if (SizeStatRegs)
2384:src/display.c **** 	    p = scopy(p, " \221\006\006+");
ARM GAS  /tmp/cc4E4VUn.s 			page 57


2385:src/display.c **** 	  *p = '\0';
2386:src/display.c **** 	  set_status(buf);
2387:src/display.c **** 
2388:src/display.c **** 	  /* Bottom line */
2389:src/display.c **** 	  p = num_arg(buf, global_regs());
2390:src/display.c **** 	  if (LocalRegs < 0) {
2391:src/display.c **** 	    p = scopy(p, " , Loc. ");
2392:src/display.c **** 	    p = num_arg(p, local_regs());
2393:src/display.c **** 	  }
2394:src/display.c **** 	  *p = '\0';
2395:src/display.c **** 	  set_digits_string(buf, 0);
2396:src/display.c **** 	} else {
2397:src/display.c **** 	  int base;
2398:src/display.c **** 	  int end;
2399:src/display.c **** 	  int group = 10;
2400:src/display.c **** 	  int start = 0;
2401:src/display.c **** 		
2402:src/display.c **** 	  if (status <= 9) {
2403:src/display.c **** 	    base = 10 * status;
2404:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2405:src/display.c **** 	    p = scopy(buf, "FL ");
2406:src/display.c **** 	    p = num_arg_0(p, base, 2);
2407:src/display.c **** 	    *p++ = '-';
2408:src/display.c **** 	    p = num_arg_0(p, end, 2);
2409:src/display.c **** 	    *p = '\0';
2410:src/display.c **** 	    set_status(buf);
2411:src/display.c **** 	  }
2412:src/display.c **** 	  else if (status == 10) {
2413:src/display.c **** 	    base = regX_idx;
2414:src/display.c **** 	    end = regK_idx;
2415:src/display.c **** 	    start = 3;
2416:src/display.c **** 	    group = 4;
2417:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2418:src/display.c **** 	  }
2419:src/display.c **** 	  else { // status == 11
2420:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2421:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2422:src/display.c **** 	    set_status("FL.00-.15");
2423:src/display.c **** 	  }
2424:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2425:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2426:src/display.c **** 	  j += SEGS_PER_DIGIT;
2427:src/display.c **** 	  for (i = start; i < group + start; i++) {
2428:src/display.c **** 	    int k = i + base - start;
2429:src/display.c **** 	    int l = get_user_flag(k);
2430:src/display.c **** 	    k += group;
2431:src/display.c **** 	    if (end >= k) {
2432:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2433:src/display.c **** 	      k += group;
2434:src/display.c **** 	      if (end >= k)
2435:src/display.c **** 		l |= (get_user_flag(k) << 2);
2436:src/display.c **** 	    }
2437:src/display.c **** 	    set_dig(j, l);
2438:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2439:src/display.c **** 	    j += SEGS_PER_DIGIT;
2440:src/display.c **** 	    if (i == 4) {
2441:src/display.c **** 	      set_dig(j, 8);
ARM GAS  /tmp/cc4E4VUn.s 			page 58


2442:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2443:src/display.c **** 	      j += SEGS_PER_DIGIT;
2444:src/display.c **** 	    }
2445:src/display.c **** 	  }
2446:src/display.c **** 	}
2447:src/display.c **** 
2448:src/display.c **** 	j = SEGS_EXP_BASE;
2449:src/display.c **** 	pc = state_pc();
2450:src/display.c **** 	if (isXROM(pc))
2451:src/display.c **** 	  pc = 1;
2452:src/display.c **** 	for (n=i=0; i<4; i++) {
2453:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2454:src/display.c **** 	    if (++n == 4) {
2455:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2456:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2457:src/display.c **** 	    } else {
2458:src/display.c **** 	      set_dig(j, 'A'+i);
2459:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2460:src/display.c **** 	    }
2461:src/display.c **** 	  }
2462:src/display.c **** 	}
2463:src/display.c ****       }
2464:src/display.c **** 
2465:src/display.c **** 
2466:src/display.c ****       /* Display the list of alpha labels */
2467:src/display.c ****       static void show_label(void) {
2468:src/display.c **** 	char buf[16];
2469:src/display.c **** 	unsigned short int pc = State2.digval;
2470:src/display.c **** 	unsigned int op = getprog(pc);
2471:src/display.c **** 	int n = nLIB(pc);
2472:src/display.c **** 	unsigned short int lblpc;
2473:src/display.c **** 
2474:src/display.c **** 	set_status(prt((opcode)op, buf));
2475:src/display.c **** 	set_digits_string(libname[n], 0);
2476:src/display.c **** #ifndef REALBUILD
2477:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2478:src/display.c **** #endif
2479:src/display.c **** 
2480:src/display.c **** 	if (op & OP_DBL) {
2481:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2482:src/display.c **** 	  if (lblpc != pc) {
2483:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2484:src/display.c **** 	    n = nLIB(lblpc);
2485:src/display.c **** 	    if (n == REGION_RAM)
2486:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2487:src/display.c **** 	    else {
2488:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2489:src/display.c **** #ifndef REALBUILD
2490:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2491:src/display.c **** #endif
2492:src/display.c **** 	    }
2493:src/display.c **** 	  }
2494:src/display.c **** 	}
2495:src/display.c ****       }
2496:src/display.c **** 
2497:src/display.c ****       /* Display a list of register contents */
2498:src/display.c ****       static void show_registers(void) {
ARM GAS  /tmp/cc4E4VUn.s 			page 59


2499:src/display.c **** 	char buf[16], *bp;
2500:src/display.c **** 	int n = State2.digval;
2501:src/display.c **** 	
2502:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2503:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2504:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2505:src/display.c **** 	  n;
2506:src/display.c **** #else
2507:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2508:src/display.c **** 	  n;
2509:src/display.c **** #endif
2510:src/display.c **** 
2511:src/display.c **** 	if (State2.disp_as_alpha) {
2512:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2513:src/display.c **** 	}
2514:src/display.c **** 	else {
2515:src/display.c **** 	  xset(buf, '\0', 16);
2516:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2517:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2518:src/display.c **** #else
2519:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2520:src/display.c **** #endif
2521:src/display.c **** 	  if (State2.local) {
2522:src/display.c **** 	    *bp++ = '.';
2523:src/display.c **** 	    if (n >= 100) {
2524:src/display.c **** 	      *bp++ = '1';
2525:src/display.c **** 	      n -= 100;
2526:src/display.c **** 	    }
2527:src/display.c **** 	  }
2528:src/display.c **** 	  if (n < 100)
2529:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2530:src/display.c **** 	  else
2531:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2532:src/display.c **** 	  set_status(buf);
2533:src/display.c **** 	}
2534:src/display.c **** 	format_reg(reg, CNULL);
2535:src/display.c ****       }
2536:src/display.c **** 
2537:src/display.c **** 
2538:src/display.c ****       static void set_annunciators(void)
2539:src/display.c ****       {
2540:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2541:src/display.c **** 
2542:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2543:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2544:src/display.c **** 	 * browsing constants.
2545:src/display.c **** 	 */
2546:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2547:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2548:src/display.c **** #else
2549:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2550:src/display.c **** #endif
2551:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2552:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2553:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2554:src/display.c **** 	set_IO_annunciator();
2555:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 60


2556:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2557:src/display.c **** 	 */
2558:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2559:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2560:src/display.c ****       }
2561:src/display.c **** 
2562:src/display.c **** 
2563:src/display.c ****       /*
2564:src/display.c ****        *  Toggle the little "=" sign
2565:src/display.c ****        */
2566:src/display.c ****       void set_IO_annunciator(void) {
2567:src/display.c **** #ifndef DM42
2568:src/display.c **** 	int on = SerialOn
2569:src/display.c **** #endif
2570:src/display.c **** #ifdef DM42
2571:src/display.c **** 	  int on = 0
2572:src/display.c **** #endif
2573:src/display.c **** #ifdef REALBUILD
2574:src/display.c **** 	  || DebugFlag
2575:src/display.c **** #endif
2576:src/display.c **** #ifdef INFRARED
2577:src/display.c **** 	  || PrinterColumn != 0
2578:src/display.c **** #endif
2579:src/display.c **** 	  ;
2580:src/display.c **** 
2581:src/display.c **** 	if (on != IoAnnunciator) {
2582:src/display.c **** 	  dot(LIT_EQ, on);
2583:src/display.c **** 	  IoAnnunciator = on;
2584:src/display.c **** 	  finish_display(); //LIT_EQ
2585:src/display.c **** 	}
2586:src/display.c ****       }
2587:src/display.c **** 
2588:src/display.c **** #ifdef TOP_ROW
2589:src/display.c ****       /*
2590:src/display.c ****        *  Update the display
2591:src/display.c ****        */
2592:src/display.c ****       void display(void) {
2593:src/display.c **** 	int i, j;
2594:src/display.c **** 	char buf[40], *bp = buf;
2595:src/display.c **** 	const char *p;
2596:src/display.c **** 	int annuc = 0;
2597:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2598:src/display.c **** 	int skip = 0;
2599:src/display.c **** 	int x_disp = 0;
2600:src/display.c **** 	const int shift = cur_shift();
2601:src/display.c **** 
2602:src/display.c **** 	no_status_top = 0;
2603:src/display.c **** 	if (State2.disp_freeze) {
2604:src/display.c **** 	  State2.disp_freeze = 0;
2605:src/display.c **** 	  State2.disp_temp = 1;
2606:src/display.c **** #ifdef CONSOLE
2607:src/display.c **** 	  JustDisplayed = 1;
2608:src/display.c **** #endif
2609:src/display.c **** 	  ShowRPN = 0;
2610:src/display.c **** 	  return;
2611:src/display.c **** 	}
2612:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 61


2613:src/display.c **** 	if (WasDataEntry) {
2614:src/display.c **** #if defined(QTGUI) || defined(IOS)
2615:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2616:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2617:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2618:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2619:src/display.c **** #endif
2620:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2621:src/display.c **** 
2622:src/display.c **** 	  // Erase 7-segment display
2623:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2624:src/display.c **** 	    clr_dot(i);
2625:src/display.c **** 	  }
2626:src/display.c **** 	  goto only_update_x;
2627:src/display.c **** 	}
2628:src/display.c **** #ifdef INCLUDE_YREG_CODE
2629:src/display.c **** #  ifdef YREG_ALWAYS_ON
2630:src/display.c **** 	const int yreg_enabled = 1;
2631:src/display.c **** #  else
2632:src/display.c **** 	const int yreg_enabled = UState.show_y;
2633:src/display.c **** #  endif
2634:src/display.c **** #else
2635:src/display.c **** 	const int yreg_enabled = 0;
2636:src/display.c **** #endif
2637:src/display.c **** 	// Clear display
2638:src/display.c **** 	reset_disp();
2639:src/display.c **** 
2640:src/display.c **** 	
2641:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2642:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2643:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2644:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2645:src/display.c **** 	/*   set_status(buf); */
2646:src/display.c **** 	/* } */
2647:src/display.c **** 	if (State2.version) {
2648:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2649:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2650:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2651:src/display.c **** #ifndef REALBUILD
2652:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2653:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2654:src/display.c **** #endif
2655:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2656:src/display.c **** 	  set_status(vers);
2657:src/display.c **** 	  skip = 1;
2658:src/display.c **** 	  goto nostk;
2659:src/display.c **** 	} else if (State2.confirm) {
2660:src/display.c **** 	  if (yreg_enabled) {
2661:src/display.c **** 	    set_status_top(S_SURE);
2662:src/display.c **** 	    no_status_top = 1;
2663:src/display.c **** 	    annuc = 1;
2664:src/display.c **** 	  }
2665:src/display.c **** 	  else {
2666:src/display.c **** 	    set_status(S_SURE);
2667:src/display.c **** 	  }
2668:src/display.c **** 	} else if (State2.hyp) {
2669:src/display.c **** 	  bp = scopy(bp, "HYP");
ARM GAS  /tmp/cc4E4VUn.s 			page 62


2670:src/display.c **** 	  if (! State2.dot)
2671:src/display.c **** 	    *bp++ = '\235';
2672:src/display.c **** 	  if (yreg_enabled) {
2673:src/display.c **** 	    set_status_top(buf);
2674:src/display.c **** 	    no_status_top = 1;
2675:src/display.c **** 	    annuc = 1;
2676:src/display.c **** 	  }
2677:src/display.c **** 	  else {
2678:src/display.c **** 	    set_status(buf);
2679:src/display.c **** 	  }
2680:src/display.c **** 	} else if (State2.gtodot) {
2681:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2682:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2683:src/display.c **** 	  if (State2.numdigit > 0)
2684:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2685:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2686:src/display.c **** 	  *bp++ = '_';
2687:src/display.c **** 	  if (yreg_enabled) {
2688:src/display.c **** 	    set_status_top(buf);
2689:src/display.c **** 	    no_status_top = 1;
2690:src/display.c **** 	    annuc = 1;
2691:src/display.c **** 	  }
2692:src/display.c **** 	  else {
2693:src/display.c **** 	    set_status(buf);
2694:src/display.c **** 	  }
2695:src/display.c **** 	} else if (State2.rarg) {
2696:src/display.c **** 	  /* Commands with arguments */
2697:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2698:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2699:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2700:src/display.c **** #endif
2701:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2702:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2703:src/display.c **** 	  if (State2.dot) {
2704:src/display.c **** 	    *bp++ = 's';
2705:src/display.c **** 	    *bp++ = '_';
2706:src/display.c **** 	  } else if (shift == SHIFT_F) {
2707:src/display.c **** 	    *bp++ = '\021';
2708:src/display.c **** 	    *bp++ = '_';
2709:src/display.c **** 	  } else {
2710:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2711:src/display.c **** 	       : State2.ind ? 2 
2712:src/display.c **** 	       : num_arg_digits(CmdBase); */
2713:src/display.c **** 	    if (State2.local)
2714:src/display.c **** 	      *bp++ = '.';
2715:src/display.c **** 	    if (State2.numdigit > 0) {
2716:src/display.c **** 	      if (State2.shuffle)
2717:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2718:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2719:src/display.c **** 	      else
2720:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2721:src/display.c **** 	    }
2722:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2723:src/display.c **** 	    *bp++ = '_';
2724:src/display.c **** 	  }
2725:src/display.c **** 	  if (yreg_enabled) {
2726:src/display.c **** 	    set_status_top(buf);
ARM GAS  /tmp/cc4E4VUn.s 			page 63


2727:src/display.c **** 	    no_status_top = 1;
2728:src/display.c **** 	    annuc = 1;
2729:src/display.c **** 	  }
2730:src/display.c **** 	  else {
2731:src/display.c **** 	    set_status(buf);
2732:src/display.c **** 	  }
2733:src/display.c **** 	} else if (State2.test != TST_NONE) {
2734:src/display.c **** 	  *bp++ = 'x';
2735:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2736:src/display.c **** 	  *bp++ = '_';
2737:src/display.c **** 	  *bp++ = '?';
2738:src/display.c **** 	  if (yreg_enabled) {
2739:src/display.c **** 	    set_status_top(buf);
2740:src/display.c **** 	    no_status_top = 1;
2741:src/display.c **** 	    annuc = 1;
2742:src/display.c **** 	  }
2743:src/display.c **** 	  else {
2744:src/display.c **** 	    set_status(buf);
2745:src/display.c **** 	  }
2746:src/display.c **** 	} else if (cata) {
2747:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2748:src/display.c **** 	  char b2[16];
2749:src/display.c **** 	  const char *p;
2750:src/display.c **** 
2751:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2752:src/display.c **** 	  p = catcmd(op, b2);
2753:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2754:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2755:src/display.c **** 	  bp = scopy(bp, p);
2756:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2757:src/display.c **** 	    // State2.disp_small = 1;
2758:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2759:src/display.c **** 	      set_digits_string("0 to 255", 0);
2760:src/display.c **** 	    else
2761:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2762:src/display.c **** 	    skip = 1;
2763:src/display.c **** 	  } else if (State2.runmode) {
2764:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2765:src/display.c **** 	      decNumber x, r;
2766:src/display.c **** 	      decimal64 z;
2767:src/display.c **** 
2768:src/display.c **** 	      getX(&x);
2769:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2770:src/display.c **** 		const unsigned int f = argKIND(op);
2771:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2772:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2773:src/display.c **** 		  update_speed(0);
2774:src/display.c **** 		  fp(&r, &x);
2775:src/display.c **** 		}
2776:src/display.c **** 		else
2777:src/display.c **** 		  set_NaN(&r);
2778:src/display.c **** 	      } else
2779:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2780:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2781:src/display.c **** 	      packed_from_number(&z, &r);
2782:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2783:src/display.c **** 	      skip = 1;
ARM GAS  /tmp/cc4E4VUn.s 			page 64


2784:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2785:src/display.c **** 	      REGISTER z, *const x = StackBase;
2786:src/display.c **** 	      copyreg(&z, x);
2787:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2788:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2789:src/display.c **** 	      copyreg(x, &z);
2790:src/display.c **** 	      skip = 1;
2791:src/display.c **** 	    }
2792:src/display.c **** 	  }
2793:src/display.c **** 	  if (yreg_enabled) {
2794:src/display.c **** 	    set_status_top(buf);
2795:src/display.c **** 	    no_status_top = 1;
2796:src/display.c **** 	    annuc = 1;
2797:src/display.c **** 	  }
2798:src/display.c **** 	  else {
2799:src/display.c **** 	    set_status(buf);
2800:src/display.c **** 	  }
2801:src/display.c **** 	} else if (State2.multi) {
2802:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2803:src/display.c **** 	  if (State2.numdigit > 0) {
2804:src/display.c **** 	    *bp++ = (char) State2.digval;
2805:src/display.c **** 	    if (State2.numdigit > 1)
2806:src/display.c **** 	      *bp++ = State2.digval2;
2807:src/display.c **** 	  }
2808:src/display.c **** 	  if (yreg_enabled) {
2809:src/display.c **** 	    set_status_top(buf);
2810:src/display.c **** 	    no_status_top = 1;
2811:src/display.c **** 	    annuc = 1;
2812:src/display.c **** 	  }
2813:src/display.c **** 	  else {
2814:src/display.c **** 	    set_status(buf);
2815:src/display.c **** 	  }
2816:src/display.c **** 	} else if (State2.status) {
2817:src/display.c **** 	  show_status();
2818:src/display.c **** 	  skip = 1;
2819:src/display.c **** 	} else if (State2.labellist) {
2820:src/display.c **** 	  show_label();
2821:src/display.c **** 	  skip = 1;
2822:src/display.c **** 	} else if (State2.registerlist) {
2823:src/display.c **** 	  show_registers();
2824:src/display.c **** 	  skip = 1;
2825:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2826:src/display.c **** 	    annunciators();
2827:src/display.c **** 	  }
2828:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2829:src/display.c **** 	} else if (State2.disp_as_alpha) {
2830:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2831:src/display.c **** #endif
2832:src/display.c **** 	} else if (State2.runmode) {
2833:src/display.c **** 	  if (DispMsg) { 
2834:src/display.c **** 	    set_status(DispMsg);
2835:src/display.c **** 	  } else if (DispPlot) {
2836:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2837:src/display.c **** 	  } else if (State2.alphas) {
2838:src/display.c **** 	    bp = scopy(buf, Alpha);
2839:src/display.c **** 	    j = State2.alpha_pos;
2840:src/display.c **** 	    if (j != 0) {
ARM GAS  /tmp/cc4E4VUn.s 			page 65


2841:src/display.c **** 	      i = slen(buf);
2842:src/display.c **** 	      j *= 6;
2843:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2844:src/display.c **** 		{
2845:src/display.c **** 		  buf[ (i - j) ] = '\0';
2846:src/display.c **** 		  set_status_right(buf);
2847:src/display.c **** 		}
2848:src/display.c **** 	      else {
2849:src/display.c **** 		set_status(buf);
2850:src/display.c **** 	      }
2851:src/display.c **** 	    }
2852:src/display.c **** 	    else {
2853:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2854:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2855:src/display.c **** 		*bp++ = '\0';
2856:src/display.c **** 	      }
2857:src/display.c **** 	      set_status_right(buf);
2858:src/display.c **** 	    }
2859:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2860:src/display.c **** 	      bp = buf;
2861:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2862:src/display.c **** 	      *bp++ = '\0';
2863:src/display.c **** 	      set_status_top(buf);
2864:src/display.c **** 	      no_status_top = 1;
2865:src/display.c **** 	      //annuc = 1;
2866:src/display.c **** 	    }
2867:src/display.c **** 	  }
2868:src/display.c **** 	  else {
2869:src/display.c **** 	    annuc = 1;
2870:src/display.c **** 	  }
2871:src/display.c **** 	}
2872:src/display.c **** 	else {
2873:src/display.c **** #ifndef DM42
2874:src/display.c **** 	  show_progtrace(buf);
2875:src/display.c **** #endif
2876:src/display.c **** 	  i = state_pc();
2877:src/display.c **** 	  if (i > 0)
2878:src/display.c **** 	    set_status(prt(getprog(i), buf));
2879:src/display.c **** 	  else
2880:src/display.c **** 	    set_status("");
2881:src/display.c **** 	  set_dot(STO_annun);
2882:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2883:src/display.c **** 	    annuc = 1;
2884:src/display.c **** 	  goto nostk;
2885:src/display.c **** 	}
2886:src/display.c **** 	show_stack();
2887:src/display.c ****       nostk:
2888:src/display.c **** 	show_flags();
2889:src/display.c **** 	if (!skip) {
2890:src/display.c **** 	  if (State2.runmode) {
2891:src/display.c **** 	  only_update_x:
2892:src/display.c **** 	    p = get_cmdline();
2893:src/display.c **** 	    if (p == NULL || cata) {
2894:src/display.c **** 	      if (ShowRegister != -1) {
2895:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2896:src/display.c **** 		format_reg(ShowRegister, CNULL);
2897:src/display.c **** 	      }
ARM GAS  /tmp/cc4E4VUn.s 			page 66


2898:src/display.c **** 	      else
2899:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2900:src/display.c **** 	    } else {
2901:src/display.c **** 	      disp_x(p);
2902:src/display.c **** 	      x_disp = 1;
2903:src/display.c **** 	    }
2904:src/display.c **** 	    if (WasDataEntry) {
2905:src/display.c **** 	      goto finish;
2906:src/display.c **** 	    }
2907:src/display.c **** 	  } else {
2908:src/display.c **** 	    unsigned int pc = state_pc();
2909:src/display.c **** 	    unsigned int upc = user_pc(pc);
2910:src/display.c **** 	    const int n = nLIB(pc);
2911:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2912:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2913:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2914:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2915:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2916:src/display.c **** #ifndef REALBUILD
2917:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2918:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2919:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2920:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2921:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2922:src/display.c **** 	      char *b=buf;
2923:src/display.c **** 	      char *l=LastDisplayedNumber;
2924:src/display.c **** 	      *l++=' ';
2925:src/display.c **** 	      while(*b) {
2926:src/display.c **** 		*l++=*b++;
2927:src/display.c **** 		*l++=' ';
2928:src/display.c **** 	      }
2929:src/display.c **** 	      *l=0;
2930:src/display.c **** 	    }
2931:src/display.c **** #endif
2932:src/display.c **** 	  }
2933:src/display.c **** 	}
2934:src/display.c **** 	set_annunciators();
2935:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2936:src/display.c **** 	  ShowRPN = 0;
2937:src/display.c **** 	  dot(RPN, 0);
2938:src/display.c **** 	}
2939:src/display.c **** 	// disp_temp disables the <- key
2940:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2941:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2942:src/display.c **** 
2943:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2944:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2945:src/display.c **** 	  annunciators();
2946:src/display.c ****  	State2.hms = 0;
2947:src/display.c **** #else
2948:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2949:src/display.c **** 	  annunciators();
2950:src/display.c **** #endif
2951:src/display.c **** 
2952:src/display.c ****       finish:
2953:src/display.c **** 	State2.version = 0;
2954:src/display.c **** 	State2.disp_as_alpha = 0;
ARM GAS  /tmp/cc4E4VUn.s 			page 67


2955:src/display.c **** 	State2.smode = SDISP_NORMAL;
2956:src/display.c **** 	State2.invalid_disp = 0;
2957:src/display.c **** 	ShowRegister = regX_idx;
2958:src/display.c **** 	DispMsg = CNULL;
2959:src/display.c **** 	DispPlot = 0;
2960:src/display.c **** 	State2.disp_small = 0;
2961:src/display.c **** 	finish_display();
2962:src/display.c **** 	no_status_top = 0;
2963:src/display.c **** #ifdef CONSOLE
2964:src/display.c **** 	JustDisplayed = 1;
2965:src/display.c **** #endif
2966:src/display.c ****       }
2967:src/display.c **** #else
2968:src/display.c ****       /*
2969:src/display.c ****        *  Update the display
2970:src/display.c ****        */
2971:src/display.c ****       void display(void) {
2972:src/display.c **** 	int i, j;
2973:src/display.c **** 	char buf[40], *bp = buf;
2974:src/display.c **** 	const char *p;
2975:src/display.c **** 	int annuc = 0;
2976:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2977:src/display.c **** 	int skip = 0;
2978:src/display.c **** 	int x_disp = 0;
2979:src/display.c **** 	const int shift = cur_shift();
2980:src/display.c **** 
2981:src/display.c **** 
2982:src/display.c **** 
2983:src/display.c **** 	if (State2.disp_freeze) {
2984:src/display.c **** 	  State2.disp_freeze = 0;
2985:src/display.c **** 	  State2.disp_temp = 1;
2986:src/display.c **** #ifdef CONSOLE
2987:src/display.c **** 	  JustDisplayed = 1;
2988:src/display.c **** #endif
2989:src/display.c **** 	  ShowRPN = 0;
2990:src/display.c **** 	  return;
2991:src/display.c **** 	}
2992:src/display.c **** 
2993:src/display.c **** 	if (WasDataEntry) {
2994:src/display.c **** #if defined(QTGUI) || defined(IOS)
2995:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2996:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2997:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2998:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2999:src/display.c **** #endif
3000:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3001:src/display.c **** 
3002:src/display.c **** 	  // Erase 7-segment display
3003:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3004:src/display.c **** 	    clr_dot(i);
3005:src/display.c **** 	  }
3006:src/display.c **** 	  goto only_update_x;
3007:src/display.c **** 	}
3008:src/display.c **** 
3009:src/display.c **** 	// Clear display
3010:src/display.c **** 	reset_disp();
3011:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 68


3012:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3013:src/display.c **** 	if (State2.cmplx  && !cata) {
3014:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3015:src/display.c **** 	  set_status(buf);
3016:src/display.c **** 	}
3017:src/display.c **** 	if (State2.version) {
3018:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3019:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3020:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3021:src/display.c **** #ifndef REALBUILD
3022:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3023:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3024:src/display.c **** #endif
3025:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3026:src/display.c **** 	  set_status(vers);
3027:src/display.c **** 	  skip = 1;
3028:src/display.c **** 	  goto nostk;
3029:src/display.c **** 	} else if (State2.confirm) {
3030:src/display.c **** 	  set_status(S_SURE);
3031:src/display.c **** 	} else if (State2.hyp) {
3032:src/display.c **** 	  bp = scopy(bp, "HYP");
3033:src/display.c **** 	  if (! State2.dot)
3034:src/display.c **** 	    *bp++ = '\235';
3035:src/display.c **** 	  set_status(buf);
3036:src/display.c **** 	} else if (State2.gtodot) {
3037:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3038:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3039:src/display.c **** 	  if (State2.numdigit > 0)
3040:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3041:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3042:src/display.c **** 	  *bp++ = '_';
3043:src/display.c **** 	  set_status(buf);
3044:src/display.c **** 	} else if (State2.rarg) {
3045:src/display.c **** 	  /* Commands with arguments */
3046:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3047:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
3048:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3049:src/display.c **** #endif
3050:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3051:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3052:src/display.c **** 	  if (State2.dot) {
3053:src/display.c **** 	    *bp++ = 's';
3054:src/display.c **** 	    *bp++ = '_';
3055:src/display.c **** 	  } else if (shift == SHIFT_F) {
3056:src/display.c **** 	    *bp++ = '\021';
3057:src/display.c **** 	    *bp++ = '_';
3058:src/display.c **** 	  } else {
3059:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3060:src/display.c **** 	       : State2.ind ? 2 
3061:src/display.c **** 	       : num_arg_digits(CmdBase); */
3062:src/display.c **** 	    if (State2.local)
3063:src/display.c **** 	      *bp++ = '.';
3064:src/display.c **** 	    if (State2.numdigit > 0) {
3065:src/display.c **** 	      if (State2.shuffle)
3066:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3067:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3068:src/display.c **** 	      else
ARM GAS  /tmp/cc4E4VUn.s 			page 69


3069:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3070:src/display.c **** 	    }
3071:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3072:src/display.c **** 	    *bp++ = '_';
3073:src/display.c **** 	  }
3074:src/display.c **** 	  set_status(buf);
3075:src/display.c **** 	} else if (State2.test != TST_NONE) {
3076:src/display.c **** 	  *bp++ = 'x';
3077:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3078:src/display.c **** 	  *bp++ = '_';
3079:src/display.c **** 	  *bp++ = '?';
3080:src/display.c **** 	  set_status(buf);
3081:src/display.c **** 	} else if (cata) {
3082:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3083:src/display.c **** 	  char b2[16];
3084:src/display.c **** 	  const char *p;
3085:src/display.c **** 
3086:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3087:src/display.c **** 	  p = catcmd(op, b2);
3088:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3089:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3090:src/display.c **** 	  bp = scopy(bp, p);
3091:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3092:src/display.c **** 	    // State2.disp_small = 1;
3093:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3094:src/display.c **** 	      set_digits_string("0 to 255", 0);
3095:src/display.c **** 	    else
3096:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3097:src/display.c **** 	    skip = 1;
3098:src/display.c **** 	  } else if (State2.runmode) {
3099:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3100:src/display.c **** 	      decNumber x, r;
3101:src/display.c **** 	      decimal64 z;
3102:src/display.c **** 
3103:src/display.c **** 	      getX(&x);
3104:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3105:src/display.c **** 		const unsigned int f = argKIND(op);
3106:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3107:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3108:src/display.c **** 		  update_speed(0);
3109:src/display.c **** 		  fp(&r, &x);
3110:src/display.c **** 		}
3111:src/display.c **** 		else
3112:src/display.c **** 		  set_NaN(&r);
3113:src/display.c **** 	      } else
3114:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3115:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3116:src/display.c **** 	      packed_from_number(&z, &r);
3117:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3118:src/display.c **** 	      skip = 1;
3119:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3120:src/display.c **** 	      REGISTER z, *const x = StackBase;
3121:src/display.c **** 	      copyreg(&z, x);
3122:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3123:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3124:src/display.c **** 	      copyreg(x, &z);
3125:src/display.c **** 	      skip = 1;
ARM GAS  /tmp/cc4E4VUn.s 			page 70


3126:src/display.c **** 	    }
3127:src/display.c **** 	  }
3128:src/display.c **** 	  set_status(buf);
3129:src/display.c **** 	} else if (State2.multi) {
3130:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3131:src/display.c **** 	  if (State2.numdigit > 0) {
3132:src/display.c **** 	    *bp++ = (char) State2.digval;
3133:src/display.c **** 	    if (State2.numdigit > 1)
3134:src/display.c **** 	      *bp++ = State2.digval2;
3135:src/display.c **** 	  }
3136:src/display.c **** 	  set_status(buf);
3137:src/display.c **** 	} else if (State2.status) {
3138:src/display.c **** 	  show_status();
3139:src/display.c **** 	  skip = 1;
3140:src/display.c **** 	} else if (State2.labellist) {
3141:src/display.c **** 	  show_label();
3142:src/display.c **** 	  skip = 1;
3143:src/display.c **** 	} else if (State2.registerlist) {
3144:src/display.c **** 	  show_registers();
3145:src/display.c **** 	  skip = 1;
3146:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3147:src/display.c **** 	    annunciators();
3148:src/display.c **** 	  }
3149:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3150:src/display.c **** 	} else if (State2.disp_as_alpha) {
3151:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3152:src/display.c **** #endif
3153:src/display.c **** 	} else if (State2.runmode) {
3154:src/display.c **** 	  if (DispMsg) { 
3155:src/display.c **** 	    set_status(DispMsg);
3156:src/display.c **** 	  } else if (DispPlot) {
3157:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3158:src/display.c **** 	  } else if (State2.alphas) {
3159:src/display.c **** #if 0
3160:src/display.c **** 	    set_digits_string("AlpHA", 0);
3161:src/display.c **** #endif
3162:src/display.c **** 	    bp = scopy(buf, Alpha);
3163:src/display.c **** 	    j = State2.alpha_pos;
3164:src/display.c **** 	    if (j != 0) {
3165:src/display.c **** 	      i = slen(buf);
3166:src/display.c **** 	      //				
3167:src/display.c **** 	      j *= 6;
3168:src/display.c **** #ifdef BIGGER_DISPLAY
3169:src/display.c **** 	      if ( i - j >= 20 )
3170:src/display.c **** #else
3171:src/display.c **** 	      if ( i - j >= 12 )
3172:src/display.c **** #endif
3173:src/display.c **** 		{
3174:src/display.c **** 		buf[ (i - j) ] = '\0';
3175:src/display.c **** 		set_status_right(buf);
3176:src/display.c **** 		}
3177:src/display.c **** 	      else {
3178:src/display.c **** 		set_status(buf);
3179:src/display.c **** 	      }
3180:src/display.c **** 	    } else {
3181:src/display.c **** 	      if (shift != SHIFT_N) {
3182:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
ARM GAS  /tmp/cc4E4VUn.s 			page 71


3183:src/display.c **** 		*bp++ = '\0';
3184:src/display.c **** 	      }
3185:src/display.c **** 	      set_status_right(buf);
3186:src/display.c **** 	    }
3187:src/display.c **** 	  } else {
3188:src/display.c **** 	    annuc = 1;
3189:src/display.c **** 	  }
3190:src/display.c **** 	} else {
3191:src/display.c **** #ifndef DM42
3192:src/display.c **** 	  show_progtrace(buf);
3193:src/display.c **** #endif
3194:src/display.c **** 	  i = state_pc();
3195:src/display.c **** 	  if (i > 0)
3196:src/display.c **** 	    set_status(prt(getprog(i), buf));
3197:src/display.c **** 	  else
3198:src/display.c **** 	    set_status("");
3199:src/display.c **** 	  set_dot(STO_annun);
3200:src/display.c **** #if 0
3201:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3202:src/display.c **** 	    unsigned short int crc;
3203:src/display.c **** 	    crc = checksum_program();
3204:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3205:src/display.c **** 	    for (i=0; i<4; i++) {
3206:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3207:src/display.c **** 	      crc >>= 4;
3208:src/display.c **** 	      j += SEGS_PER_DIGIT;
3209:src/display.c **** 	    }
3210:src/display.c **** 	    skip = 1;
3211:src/display.c **** 	  }
3212:src/display.c **** 	  else
3213:src/display.c **** #endif
3214:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3215:src/display.c **** 	      annuc = 1;
3216:src/display.c **** 	  goto nostk;
3217:src/display.c **** 	}
3218:src/display.c **** 	show_stack();
3219:src/display.c ****       nostk:	show_flags();
3220:src/display.c **** 	if (!skip) {
3221:src/display.c **** 	  if (State2.runmode) {
3222:src/display.c **** 	  only_update_x:
3223:src/display.c **** 	    p = get_cmdline();
3224:src/display.c **** 	    if (p == NULL || cata) {
3225:src/display.c **** 	      if (ShowRegister != -1) {
3226:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3227:src/display.c **** 		format_reg(ShowRegister, CNULL);
3228:src/display.c **** 	      }
3229:src/display.c **** 	      else
3230:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3231:src/display.c **** 	    } else {
3232:src/display.c **** 	      disp_x(p);
3233:src/display.c **** 	      x_disp = 1;
3234:src/display.c **** 	    }
3235:src/display.c **** 	    if (WasDataEntry) {
3236:src/display.c **** 	      goto finish;
3237:src/display.c **** 	    }
3238:src/display.c **** 	  } else {
3239:src/display.c **** 	    unsigned int pc = state_pc();
ARM GAS  /tmp/cc4E4VUn.s 			page 72


3240:src/display.c **** 	    unsigned int upc = user_pc(pc);
3241:src/display.c **** 	    const int n = nLIB(pc);
3242:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3243:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3244:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3245:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3246:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3247:src/display.c **** #ifndef REALBUILD
3248:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3249:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3250:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3251:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3252:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3253:src/display.c **** 	      char *b=buf;
3254:src/display.c **** 	      char *l=LastDisplayedNumber;
3255:src/display.c **** 	      *l++=' ';
3256:src/display.c **** 	      while(*b) {
3257:src/display.c **** 		*l++=*b++;
3258:src/display.c **** 		*l++=' ';
3259:src/display.c **** 	      }
3260:src/display.c **** 	      *l=0;
3261:src/display.c **** 	    }
3262:src/display.c **** #endif
3263:src/display.c **** 	  }
3264:src/display.c **** 	}
3265:src/display.c **** 	set_annunciators();
3266:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3267:src/display.c **** 	  ShowRPN = 0;
3268:src/display.c **** 	  dot(RPN, 0);
3269:src/display.c **** 	}
3270:src/display.c **** 	// disp_temp disables the <- key
3271:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3272:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3273:src/display.c **** 
3274:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3275:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3276:src/display.c **** 	  annunciators();
3277:src/display.c ****  	State2.hms = 0;
3278:src/display.c **** #else
3279:src/display.c **** 
3280:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3281:src/display.c **** 	  annunciators();
3282:src/display.c **** 	
3283:src/display.c **** 
3284:src/display.c **** 
3285:src/display.c **** #endif
3286:src/display.c **** 
3287:src/display.c ****       finish:
3288:src/display.c **** 	State2.version = 0;
3289:src/display.c **** 	State2.disp_as_alpha = 0;
3290:src/display.c **** 	State2.smode = SDISP_NORMAL;
3291:src/display.c **** 	State2.invalid_disp = 0;
3292:src/display.c **** 	ShowRegister = regX_idx;
3293:src/display.c **** 	DispMsg = CNULL;
3294:src/display.c **** 	DispPlot = 0;
3295:src/display.c **** 	State2.disp_small = 0;
3296:src/display.c **** 	finish_display();
ARM GAS  /tmp/cc4E4VUn.s 			page 73


3297:src/display.c **** #ifdef CONSOLE
3298:src/display.c **** 	JustDisplayed = 1;
3299:src/display.c **** #endif
3300:src/display.c ****       }
3301:src/display.c **** #endif
3302:src/display.c ****       /*
3303:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3304:src/display.c ****        */
3305:src/display.c ****       void frozen_display()
3306:src/display.c ****       {
3307:src/display.c **** 	State2.disp_freeze = 0;
3308:src/display.c **** 	display();
3309:src/display.c **** 	State2.disp_freeze = 1;
3310:src/display.c ****       }
3311:src/display.c **** 
3312:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3313:src/display.c **** 	int glen = *graphic++;
3314:src/display.c **** 	int i, j;
3315:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3316:src/display.c **** 	unsigned long long int mat[6];
3317:src/display.c **** 
3318:src/display.c **** 	xset(mat, 0, sizeof(mat));
3319:src/display.c **** #endif
3320:src/display.c **** #ifndef REALBUILD
3321:src/display.c **** 	forceDispPlot=1;
3322:src/display.c **** #endif
3323:src/display.c **** 	if (glen <= 0)			return;
3324:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3325:src/display.c **** 
3326:src/display.c **** 	for (i=0; i<6; i++)
3327:src/display.c **** 	  for (j=1; j<=glen; j++) {
3328:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3329:src/display.c **** 	    if (graphic[j] & (1 << i))
3330:src/display.c **** 	      mat[i] |= 1LL << j;
3331:src/display.c **** #else
3332:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3333:src/display.c **** #endif
3334:src/display.c **** 	  }
3335:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3336:src/display.c **** 	set_status_grob(mat);
3337:src/display.c **** #endif
3338:src/display.c ****       }
3339:src/display.c **** 
3340:src/display.c **** 
3341:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3342:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3343:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3344:src/display.c ****        * column is almost always blank.
3345:src/display.c ****        */
3346:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3347:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3348:src/display.c ****       }
3349:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3350:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3351:src/display.c ****       }
3352:src/display.c **** 
3353:src/display.c ****       
ARM GAS  /tmp/cc4E4VUn.s 			page 74


3354:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3354 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3355:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3355 2 view .LVU201
3356:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3357:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3358:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3358 2 view .LVU202
3359:src/display.c **** #endif
3360:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3360 2 view .LVU203
3361:src/display.c **** 	int i, j;
 686              		.loc 1 3361 2 view .LVU204
3362:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3362 2 view .LVU205
3354:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3354 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3363:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3364:src/display.c **** 	unsigned long long int mat[6];
3365:src/display.c **** 
3366:src/display.c **** 	xset(mat, 0, sizeof(mat));
3367:src/display.c **** #endif
3368:src/display.c **** #ifndef REALBUILD
3369:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3369 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3354:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3354 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3362:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3362 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3354:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3354 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3362:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3362 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3362:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/cc4E4VUn.s 			page 75


 714              		.loc 1 3362 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3369 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3369 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3362:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3362 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3369 2 is_stmt 1 view .LVU216
3362:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3362 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3354:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3354 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3369 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3370:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3371:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3371 2 is_stmt 1 view .LVU220
 734              		.loc 1 3371 14 view .LVU221
 735              		.loc 1 3371 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3371 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3371 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3371 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3372:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3372 4 is_stmt 1 view .LVU226
 749              		.loc 1 3372 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3372 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3372 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3372 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3373:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3374:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3375:src/display.c **** 	      ++i;
3376:src/display.c **** 	  }
3377:src/display.c **** 	  else {
ARM GAS  /tmp/cc4E4VUn.s 			page 76


3378:src/display.c **** 	    ++i;
3379:src/display.c **** 	  }
3380:src/display.c **** 	}
3381:src/display.c **** #endif
3382:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3382 2 is_stmt 1 view .LVU231
3383:src/display.c **** #endif
3384:src/display.c **** #ifdef RP_PREFIX
3385:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3385 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3382:src/display.c **** #endif
 763              		.loc 1 3382 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3385 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3386:src/display.c **** #endif
3387:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3388:src/display.c **** 	findlengths(posns, smallp);
3389:src/display.c **** #endif
3390:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3390 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3382:src/display.c **** #endif
 770              		.loc 1 3382 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3385:src/display.c **** #endif
 772              		.loc 1 3385 2 is_stmt 1 view .LVU237
 773              		.loc 1 3390 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3390 8 view .LVU239
 776              		.loc 1 3390 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3390 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3360:src/display.c **** 	int i, j;
 781              		.loc 1 3360 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB190:
3391:src/display.c **** 	  int c;
3392:src/display.c **** 	  int width;
3393:src/display.c **** 	  unsigned char cmap[6];
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3395:src/display.c **** 	  int real_width;
3396:src/display.c **** 	  int current_smallp;
3397:src/display.c **** 
3398:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3399:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3400:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3401:src/display.c **** 	  //           01 -> (not used)
3402:src/display.c **** 	  //           10 -> use big font
3403:src/display.c **** 	  //           11 -> use small font
3404:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3405:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3405 7 view .LVU243
ARM GAS  /tmp/cc4E4VUn.s 			page 77


 785 0052 072E     		cmp	r6, #7
 786              	.LBE190:
3390:src/display.c **** 	  int c;
 787              		.loc 1 3390 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3358:src/display.c **** #endif
 790              		.loc 1 3358 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB199:
3391:src/display.c **** 	  int c;
 794              		.loc 1 3391 4 is_stmt 1 view .LVU246
3392:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3392 4 view .LVU247
3393:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3393 4 view .LVU248
3395:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3395 4 view .LVU249
3396:src/display.c **** 
 798              		.loc 1 3396 4 view .LVU250
 799              		.loc 1 3405 4 view .LVU251
 800              		.loc 1 3405 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3406:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3406 6 is_stmt 1 view .LVU253
 805              		.loc 1 3406 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3407:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3407 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3406:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3406 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3407 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3408:src/display.c **** 	    default:
3409:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x40:	current_smallp = 0;
3412:src/display.c **** 	      break;
3413:src/display.c **** 	    case 0x60:	current_smallp = 1;
3414:src/display.c **** 	      break;
3415:src/display.c **** 	    }
3416:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3416 6 view .LVU258
 820              		.loc 1 3416 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/cc4E4VUn.s 			page 78


 823              		.loc 1 3416 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3417:src/display.c **** 	    str += 3;
 831              		.loc 1 3417 6 is_stmt 1 discriminator 4 view .LVU261
3418:src/display.c **** 
3419:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3419 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3417:src/display.c **** 	    str += 3;
 836              		.loc 1 3417 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3419 6 is_stmt 1 discriminator 4 view .LVU264
3420:src/display.c **** 	  } else {
3421:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3422:src/display.c **** 	    real_width = width = charlengths(c);
3423:src/display.c **** 	    current_smallp = smallp;
3424:src/display.c **** 	  }
3425:src/display.c **** 
3426:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3426 4 discriminator 4 view .LVU265
 843              		.loc 1 3426 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3426 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3426 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3427:src/display.c **** 	    break;
3428:src/display.c **** 
3429:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3429 4 is_stmt 1 view .LVU269
 853              		.loc 1 3429 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3430:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3430 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3429:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3429 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3430 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc4E4VUn.s 			page 79


 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3431:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3431 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3432:src/display.c **** 	  }
3433:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3433 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3434:src/display.c **** #else
3435:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3436:src/display.c **** 
3437:src/display.c **** 	  //cmap = &charset[c][0];
3438:src/display.c **** 	  width = charlengths(c);
3439:src/display.c **** 
3440:src/display.c **** 	  if (x + width > b_w+1)
3441:src/display.c **** 	    break;
3442:src/display.c **** 
3443:src/display.c **** 	  /* Decode the packed character bytes */
3444:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3445:src/display.c **** #endif
3446:src/display.c **** 
3447:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3447 4 view .LVU276
 877              		.loc 1 3447 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3447 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3448 16 is_stmt 1 view .LVU279
 889              		.loc 1 3448 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3449:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3449 8 is_stmt 1 view .LVU281
 893              		.loc 1 3449 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3448 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
ARM GAS  /tmp/cc4E4VUn.s 			page 80


 901              	.LVL78:
 902              	.L116:
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3448 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB191:
 907              	.LBB192:
 340:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 340 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 340:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 340 11 view .LVU286
 912              	.LBE192:
 913              	.LBE191:
 914              		.loc 1 3449 8 is_stmt 1 view .LVU287
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3448 25 view .LVU288
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3448 16 view .LVU289
3448:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3448 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3449 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3450:src/display.c **** 		break;
3451:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3452:src/display.c **** 	      if (cmap[i] & (1 << j))
3453:src/display.c **** 		mat[i] |= 1LL << (x+j);
3454:src/display.c **** #else
3455:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3455 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB196:
 929              	.LBI191:
 339:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 339 6 discriminator 2 view .LVU293
 931              	.LBB193:
 340:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 340 3 discriminator 2 view .LVU294
 340:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 340 11 discriminator 2 view .LVU295
 341:src/display.c **** }
 934              		.loc 1 341 8 discriminator 2 view .LVU296
 935              	.LBE193:
 936              	.LBE196:
 937              		.loc 1 3455 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3455 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB197:
ARM GAS  /tmp/cc4E4VUn.s 			page 81


 942              	.LBB194:
 340:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 340 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 340:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 340 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 340:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 340 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE194:
 950              	.LBE197:
3448:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3448 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB198:
 955              	.LBB195:
 341:src/display.c **** }
 956              		.loc 1 341 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 341:src/display.c **** }
 959              		.loc 1 341 8 view .LVU304
 960              	.LBE195:
 961              	.LBE198:
3449:src/display.c **** 		break;
 962              		.loc 1 3449 8 is_stmt 1 view .LVU305
3448:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3448 25 view .LVU306
3448:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3448 16 view .LVU307
3448:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3448 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3447:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3447 19 is_stmt 1 view .LVU309
3447:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3447 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3447:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3447 14 is_stmt 1 view .LVU311
3447:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3447 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3456:src/display.c **** #endif
3457:src/display.c **** 	    }
3458:src/display.c **** 	  x += width;
 980              		.loc 1 3458 4 is_stmt 1 view .LVU313
 981              	.LBE199:
ARM GAS  /tmp/cc4E4VUn.s 			page 82


3390:src/display.c **** 	  int c;
 982              		.loc 1 3390 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB200:
 986              		.loc 1 3458 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3458 6 view .LVU316
 990              	.LBE200:
3390:src/display.c **** 	  int c;
 991              		.loc 1 3390 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3390:src/display.c **** 	  int c;
 993              		.loc 1 3390 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3390:src/display.c **** 	  int c;
 996              		.loc 1 3390 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB201:
3405:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3405 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE201:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB202:
3391:src/display.c **** 	  int width;
 1005              		.loc 1 3391 4 is_stmt 1 view .LVU321
3392:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3392 4 view .LVU322
3393:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3393 4 view .LVU323
3395:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3395 4 view .LVU324
3396:src/display.c **** 
 1009              		.loc 1 3396 4 view .LVU325
3405:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3405 4 view .LVU326
3405:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3405 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3421:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3421 6 is_stmt 1 view .LVU328
3421:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3421 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3422:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3422 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3421:src/display.c **** 	    real_width = width = charlengths(c);
ARM GAS  /tmp/cc4E4VUn.s 			page 83


 1023              		.loc 1 3421 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3422:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3422 6 is_stmt 1 view .LVU332
3422:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3422 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3422:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3422 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3426:src/display.c **** 	    break;
 1034              		.loc 1 3426 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3422:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3422 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3423:src/display.c **** 	  }
 1039              		.loc 1 3423 6 is_stmt 1 view .LVU337
3426:src/display.c **** 	    break;
 1040              		.loc 1 3426 4 view .LVU338
3426:src/display.c **** 	    break;
 1041              		.loc 1 3426 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3426:src/display.c **** 	    break;
 1044              		.loc 1 3426 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3426:src/display.c **** 	    break;
 1049              		.loc 1 3426 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3426:src/display.c **** 	    break;
 1053              		.loc 1 3426 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3426:src/display.c **** 	    break;
 1057              		.loc 1 3426 7 view .LVU343
 1058              	.LBE202:
3459:src/display.c **** 	}
3460:src/display.c **** 
3461:src/display.c **** 
3462:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3463:src/display.c **** 	set_status_grob(mat);
3464:src/display.c **** #else
3465:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3465 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3465 20 view .LVU345
ARM GAS  /tmp/cc4E4VUn.s 			page 84


 1061              		.loc 1 3465 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3466:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3466 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3465:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3465 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3466 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3465:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3465 27 is_stmt 1 discriminator 3 view .LVU350
3465:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3465 20 discriminator 3 view .LVU351
3465:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3465 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3467:src/display.c **** #endif
3468:src/display.c ****       }
 1081              		.loc 1 3468 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB203:
3413:src/display.c **** 	      break;
 1091              		.loc 1 3413 17 is_stmt 1 view .LVU354
3414:src/display.c **** 	    }
 1092              		.loc 1 3414 8 view .LVU355
3416:src/display.c **** 	    str += 3;
 1093              		.loc 1 3416 6 view .LVU356
3416:src/display.c **** 	    str += 3;
 1094              		.loc 1 3416 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3413:src/display.c **** 	      break;
 1097              		.loc 1 3413 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3411:src/display.c **** 	      break;
 1104              		.loc 1 3411 17 is_stmt 1 view .LVU359
ARM GAS  /tmp/cc4E4VUn.s 			page 85


3412:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3412 8 view .LVU360
3416:src/display.c **** 	    str += 3;
 1106              		.loc 1 3416 6 view .LVU361
3416:src/display.c **** 	    str += 3;
 1107              		.loc 1 3416 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 1110              		.loc 1 3411 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3411:src/display.c **** 	      break;
 1116              		.loc 1 3411 32 view .LVU364
 1117              	.LBE203:
3373:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3373 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3374:src/display.c **** 	      ++i;
 1123              		.loc 1 3374 6 view .LVU366
3374:src/display.c **** 	      ++i;
 1124              		.loc 1 3374 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB204:
3374:src/display.c **** 	      ++i;
 1133              		.loc 1 3374 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3374:src/display.c **** 	      ++i;
 1136              		.loc 1 3374 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3374:src/display.c **** 	      ++i;
 1141              		.loc 1 3374 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE204:
ARM GAS  /tmp/cc4E4VUn.s 			page 86


 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 442:src/display.c ****   union {
 1169              		.loc 1 442 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/display.c ****     char buf[4];
 1173              		.loc 1 443 3 view .LVU372
 447:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 447 3 view .LVU373
 461:src/display.c **** #endif
 1175              		.loc 1 461 3 view .LVU374
 464:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 464 3 view .LVU375
 442:src/display.c ****   union {
 1177              		.loc 1 442 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 465:src/display.c ****     negative = 1;
 1185              		.loc 1 465 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 442:src/display.c ****   union {
 1187              		.loc 1 442 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 442:src/display.c ****   union {
 1190              		.loc 1 442 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 465:src/display.c ****     negative = 1;
 1193              		.loc 1 465 3 is_stmt 1 view .LVU380
 442:src/display.c ****   union {
 1194              		.loc 1 442 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 465:src/display.c ****     negative = 1;
 1196              		.loc 1 465 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
ARM GAS  /tmp/cc4E4VUn.s 			page 87


 464:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 464 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 472 3 is_stmt 1 view .LVU384
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 472 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 477:src/display.c **** #endif
 1204              		.loc 1 477 7 is_stmt 1 view .LVU386
 477:src/display.c **** #endif
 1205              		.loc 1 477 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 479 2 is_stmt 1 view .LVU388
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 479 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 479 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 479 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 479 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 486:src/display.c ****     }
 1219              		.loc 1 486 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 466:src/display.c ****     exp = -exp;
 1223              		.loc 1 466 5 view .LVU394
 467:src/display.c ****   }
 1224              		.loc 1 467 5 view .LVU395
 467:src/display.c ****   }
 1225              		.loc 1 467 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 472 3 is_stmt 1 view .LVU397
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 472 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 477:src/display.c **** #endif
 1231              		.loc 1 477 7 is_stmt 1 view .LVU399
 477:src/display.c **** #endif
 1232              		.loc 1 477 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
ARM GAS  /tmp/cc4E4VUn.s 			page 88


 486:src/display.c ****     }
 1237              		.loc 1 486 21 is_stmt 1 discriminator 1 view .LVU401
 486:src/display.c ****     }
 1238              		.loc 1 486 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 486:src/display.c ****     }
 1242              		.loc 1 486 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 534:src/display.c **** #endif
 1246              		.loc 1 534 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 536 7 view .LVU405
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 536 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 537 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 536 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 537 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 559:src/display.c ****     }
 1267              		.loc 1 559 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 560:src/display.c **** 
 1272              		.loc 1 560 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 557:src/display.c ****     no_number:
 1281              		.loc 1 557 2 is_stmt 1 view .LVU412
ARM GAS  /tmp/cc4E4VUn.s 			page 89


 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 559:src/display.c ****     }
 1285              		.loc 1 559 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 560:src/display.c **** 
 1290              		.loc 1 560 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 482:src/display.c **** #else
 1299              		.loc 1 482 12 is_stmt 1 view .LVU415
 482:src/display.c **** #else
 1300              		.loc 1 482 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 482:src/display.c **** #else
 1303              		.loc 1 482 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 486:src/display.c ****     }
 1306              		.loc 1 486 7 is_stmt 1 view .LVU418
 486:src/display.c ****     }
 1307              		.loc 1 486 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 486:src/display.c ****     }
 1311              		.loc 1 486 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 489 7 is_stmt 1 view .LVU421
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 489 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 493:src/display.c **** #endif
 1321              		.loc 1 493 2 is_stmt 1 view .LVU423
 493:src/display.c **** #endif
 1322              		.loc 1 493 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 493:src/display.c **** #endif
 1325              		.loc 1 493 5 view .LVU425
ARM GAS  /tmp/cc4E4VUn.s 			page 90


 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 493:src/display.c **** #endif
 1328              		.loc 1 493 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 482:src/display.c **** #else
 1332              		.loc 1 482 12 is_stmt 1 view .LVU427
 482:src/display.c **** #else
 1333              		.loc 1 482 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 486:src/display.c ****     }
 1337              		.loc 1 486 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 486:src/display.c ****     }
 1341              		.loc 1 486 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 489 21 is_stmt 1 view .LVU431
 1346              	.LBB205:
 1347              	.LBI205:
 308:src/display.c **** {
 1348              		.loc 1 308 13 view .LVU432
 1349              	.LBB206:
 310:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 310 3 view .LVU433
 310:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 310 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 311:src/display.c **** }
 1355              		.loc 1 311 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 310 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 1359              		.loc 1 311 3 is_stmt 1 view .LVU437
 312:src/display.c **** 
 1360              		.loc 1 312 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 311:src/display.c **** }
 1362              		.loc 1 311 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 312:src/display.c **** 
 1365              		.loc 1 312 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
ARM GAS  /tmp/cc4E4VUn.s 			page 91


 1368              	.L148:
 312:src/display.c **** 
 1369              		.loc 1 312 1 view .LVU441
 1370              	.LBE206:
 1371              	.LBE205:
 495:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 495 4 is_stmt 1 view .LVU442
 503:src/display.c **** #endif
 1373              		.loc 1 503 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 505:src/display.c **** 	  }
 1379              		.loc 1 505 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 505:src/display.c **** 	  }
 1382              		.loc 1 505 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB48:
 367:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 367 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 374:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 374 5 view .LVU447
 367:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 367 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 367:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 367 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
ARM GAS  /tmp/cc4E4VUn.s 			page 92


 375:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 375 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 375:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 375 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 376:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 376 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 374:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 374 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 375:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 375 5 is_stmt 1 view .LVU454
 376:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 376 5 view .LVU455
 376:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 376 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 379:src/display.c **** #endif
 1433              		.loc 1 379 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 379:src/display.c **** #endif
 1436              		.loc 1 379 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 379:src/display.c **** #endif
 1438              		.loc 1 379 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 379:src/display.c **** #endif
 1440              		.loc 1 379 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 379:src/display.c **** #endif
 1444              		.loc 1 379 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 379:src/display.c **** #endif
 1446              		.loc 1 379 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 383:src/display.c **** 
 1448              		.loc 1 383 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 379:src/display.c **** #endif
 1450              		.loc 1 379 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 383:src/display.c **** 
 1453              		.loc 1 383 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 377:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 377 7 is_stmt 1 view .LVU466
ARM GAS  /tmp/cc4E4VUn.s 			page 93


 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 379:src/display.c **** #endif
 1461              		.loc 1 379 5 view .LVU467
 379:src/display.c **** #endif
 1462              		.loc 1 379 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE48:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 349:src/display.c ****   if (res) {
 1484              		.loc 1 349 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 350 3 view .LVU470
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 350 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 351:src/display.c ****   } else {
 1491              		.loc 1 351 5 is_stmt 1 view .LVU472
 351:src/display.c ****   } else {
 1492              		.loc 1 351 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 351:src/display.c ****   } else {
 1494              		.loc 1 351 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 351:src/display.c ****   } else {
 1497              		.loc 1 351 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 361:src/display.c **** 
 1503              		.loc 1 361 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
ARM GAS  /tmp/cc4E4VUn.s 			page 94


 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 353 5 is_stmt 1 view .LVU477
 349:src/display.c ****   if (res) {
 1508              		.loc 1 349 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 353 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 353 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 354:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 354 5 is_stmt 1 view .LVU481
 354:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 354 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB209:
 1528              	.LBB210:
 357:src/display.c **** #endif
 1529              		.loc 1 357 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 357:src/display.c **** #endif
 1532              		.loc 1 357 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 357:src/display.c **** #endif
 1534              		.loc 1 357 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 357:src/display.c **** #endif
 1536              		.loc 1 357 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 357:src/display.c **** #endif
 1540              		.loc 1 357 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 357:src/display.c **** #endif
 1542              		.loc 1 357 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 357:src/display.c **** #endif
 1544              		.loc 1 357 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 360:src/display.c **** }
 1548              		.loc 1 360 3 is_stmt 1 view .LVU490
 360:src/display.c **** }
ARM GAS  /tmp/cc4E4VUn.s 			page 95


 1549              		.loc 1 360 3 is_stmt 0 view .LVU491
 1550              	.LBE210:
 1551              	.LBE209:
 360:src/display.c **** }
 1552              		.loc 1 360 3 is_stmt 1 view .LVU492
 361:src/display.c **** 
 1553              		.loc 1 361 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 355:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 355 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB212:
 1567              	.LBI209:
 349:src/display.c ****   if (res) {
 1568              		.loc 1 349 14 view .LVU495
 1569              	.LBB211:
 357:src/display.c **** #endif
 1570              		.loc 1 357 5 view .LVU496
 357:src/display.c **** #endif
 1571              		.loc 1 357 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE211:
 1580              	.LBE212:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 414 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 415 3 view .LVU499
ARM GAS  /tmp/cc4E4VUn.s 			page 96


 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 414 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 415 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 415 10 is_stmt 1 view .LVU502
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 415 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB213:
 1618              	.LBB214:
 409:src/display.c ****   return res;
 1619              		.loc 1 409 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 410:src/display.c **** }
 1623              		.loc 1 410 3 is_stmt 1 view .LVU505
 410:src/display.c **** }
 1624              		.loc 1 410 3 is_stmt 0 view .LVU506
 1625              	.LBE214:
 1626              	.LBE213:
 420:src/display.c ****     }
 1627              		.loc 1 420 7 is_stmt 1 view .LVU507
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 415 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 420:src/display.c ****     }
 1631              		.loc 1 420 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 415 24 is_stmt 1 view .LVU510
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 415 10 view .LVU511
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 415 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 416 5 is_stmt 1 view .LVU513
 417:src/display.c ****     else {
 1641              		.loc 1 417 7 view .LVU514
ARM GAS  /tmp/cc4E4VUn.s 			page 97


 419:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 419 7 view .LVU515
 1643              	.LBB217:
 1644              	.LBI213:
 407:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 407 14 view .LVU516
 1646              	.LBB215:
 408:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 408 3 view .LVU517
 409:src/display.c ****   return res;
 1648              		.loc 1 409 8 view .LVU518
 1649              	.LBE215:
 1650              	.LBE217:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 416 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 417:src/display.c ****     else {
 1654              		.loc 1 417 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB218:
 1658              	.LBB216:
 409:src/display.c ****   return res;
 1659              		.loc 1 409 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE216:
 1662              	.LBE218:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 416 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 417:src/display.c ****     else {
 1665              		.loc 1 417 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 415 24 is_stmt 1 view .LVU524
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 415 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 415 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 423:src/display.c **** 
 1680              		.loc 1 423 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 98


 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB50:
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1544 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1545:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1545 2 view .LVU529
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1544 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1545:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1545 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1544 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1545:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1545 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1546:src/display.c **** 	    if (res) {
 1719              		.loc 1 1546 4 is_stmt 1 view .LVU534
1546:src/display.c **** 	    if (res) {
 1720              		.loc 1 1546 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB221:
 1726              	.LBI221:
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1544 18 is_stmt 1 view .LVU536
 1728              	.LBB222:
1547:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1547 6 view .LVU537
1547:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1547 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1548:src/display.c **** 	    } else {
 1732              		.loc 1 1548 8 is_stmt 1 view .LVU539
ARM GAS  /tmp/cc4E4VUn.s 			page 99


 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1548:src/display.c **** 	    } else {
 1736              		.loc 1 1548 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1548:src/display.c **** 	    } else {
 1739              		.loc 1 1548 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1548:src/display.c **** 	    } else {
 1743              		.loc 1 1548 8 view .LVU542
 1744              	.LBE222:
 1745              	.LBE221:
1580:src/display.c **** 
 1746              		.loc 1 1580 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1558:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1558 6 is_stmt 1 view .LVU544
1558:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1558 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1562:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1562 6 is_stmt 1 view .LVU546
1562:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1562 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1563:src/display.c **** 	    else {
 1759              		.loc 1 1563 8 is_stmt 1 view .LVU548
1563:src/display.c **** 	    else {
 1760              		.loc 1 1563 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1576:src/display.c **** 	  }
 1763              		.loc 1 1576 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1580:src/display.c **** 
 1765              		.loc 1 1580 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1559:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1559 8 is_stmt 1 view .LVU552
1559:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1559 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1559:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1559 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1559:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
ARM GAS  /tmp/cc4E4VUn.s 			page 100


 1774              		.loc 1 1559 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1562:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1562 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB224:
 1783              	.LBB223:
1550:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1550 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1552:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1552 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1553:src/display.c **** #endif
 1793              		.loc 1 1553 8 view .LVU559
1553:src/display.c **** #endif
 1794              		.loc 1 1553 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE223:
 1799              	.LBE224:
1580:src/display.c **** 
 1800              		.loc 1 1580 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1560:src/display.c **** 	    }
 1804              		.loc 1 1560 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1560:src/display.c **** 	    }
 1807              		.loc 1 1560 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1562:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1562 6 is_stmt 1 view .LVU564
 1812              	.L188:
1565:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1565 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1567:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1567 8 view .LVU566
1567:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
ARM GAS  /tmp/cc4E4VUn.s 			page 101


 1819              		.loc 1 1567 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1571:src/display.c **** 	      }
 1821              		.loc 1 1571 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1567:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1567 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1568:src/display.c **** 	      }
 1825              		.loc 1 1568 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1571:src/display.c **** 	      }
 1828              		.loc 1 1571 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1573:src/display.c **** #endif
 1832              		.loc 1 1573 8 view .LVU572
1573:src/display.c **** #endif
 1833              		.loc 1 1573 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1576:src/display.c **** 	  }
 1837              		.loc 1 1576 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1580:src/display.c **** 
 1839              		.loc 1 1580 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE50:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1625:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1625 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
ARM GAS  /tmp/cc4E4VUn.s 			page 102


 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1626:src/display.c **** 	int j=0;
 1870              		.loc 1 1626 2 view .LVU577
1627:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1627 2 view .LVU578
1625:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1625 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1625:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1625 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1627:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1627 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1631:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1631 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1625:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1625 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1627:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1627 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1628:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1628 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1629:src/display.c **** 
 1893              		.loc 1 1629 2 view .LVU586
1631:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1631 2 view .LVU587
1631:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1631 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1631:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1631 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1632:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1632 4 is_stmt 1 view .LVU590
1632:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1632 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1633:src/display.c **** 	  return;
 1905              		.loc 1 1633 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB225:
 1908              	.LBI225:
 407:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/cc4E4VUn.s 			page 103


 1909              		.loc 1 407 14 view .LVU593
 1910              	.LBB226:
 408:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 408 3 view .LVU594
 408:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 408 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 408:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 408 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 408:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 408 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 408:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 408 19 view .LVU598
 1923              	.LBE226:
 1924              	.LBE225:
1688:src/display.c **** 
 1925              		.loc 1 1688 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1637:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1637 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1638:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1638 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1639:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1639 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1640:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1640 2 view .LVU603
1640:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1640 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1648:src/display.c **** 	dn_mulpow10(&t, &y, 6);
ARM GAS  /tmp/cc4E4VUn.s 			page 104


 1954              		.loc 1 1648 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1649:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1649 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1650:src/display.c **** 
 1965              		.loc 1 1650 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1652:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1652 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1653:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1653 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1654:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1654 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1655:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1655 2 view .LVU611
1655:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1655 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1656:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1656 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1656:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1656 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1656:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1656 19 is_stmt 1 view .LVU615
1656:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1656 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
ARM GAS  /tmp/cc4E4VUn.s 			page 105


 2000 008c 3C3A     		subhi	r2, r2, #60
1656:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1656 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1657:src/display.c **** 
 2004              		.loc 1 1657 2 is_stmt 1 view .LVU618
1657:src/display.c **** 
 2005              		.loc 1 1657 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1657:src/display.c **** 
 2008              		.loc 1 1657 19 is_stmt 1 discriminator 1 view .LVU620
1657:src/display.c **** 
 2009              		.loc 1 1657 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1657:src/display.c **** 
 2012              		.loc 1 1657 30 is_stmt 1 discriminator 1 view .LVU622
1657:src/display.c **** 
 2013              		.loc 1 1657 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1660:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1660 2 is_stmt 1 view .LVU624
1660:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1660 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1661:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1661 2 is_stmt 1 view .LVU626
 2027              	.LBB228:
 2028              	.LBI228:
 407:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 407 14 view .LVU627
 2030              	.LBB229:
 408:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 408 3 view .LVU628
 408:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 408 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 408:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 408 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 408:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 408 12 is_stmt 1 view .LVU631
 408:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 408 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
ARM GAS  /tmp/cc4E4VUn.s 			page 106


 2041              	.LVL205:
 408:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 408 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 410:src/display.c **** }
 2047              		.loc 1 410 3 is_stmt 1 view .LVU634
 410:src/display.c **** }
 2048              		.loc 1 410 3 is_stmt 0 view .LVU635
 2049              	.LBE229:
 2050              	.LBE228:
1662:src/display.c **** 
 2051              		.loc 1 1662 2 is_stmt 1 view .LVU636
1665:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1665 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1662:src/display.c **** 
 2055              		.loc 1 1662 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1665:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1665 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1662:src/display.c **** 
 2061              		.loc 1 1662 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1665:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1665 2 is_stmt 1 view .LVU641
1665:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1665 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1666:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1666 2 is_stmt 1 view .LVU643
 2068              	.LBB231:
 2069              	.LBI231:
 407:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 407 14 view .LVU644
 2071              	.LBB232:
 408:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 408 3 view .LVU645
 408:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 408 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 408:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 408 12 is_stmt 1 view .LVU647
 408:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 408 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 408:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cc4E4VUn.s 			page 107


 2081              		.loc 1 408 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 410:src/display.c **** }
 2086              		.loc 1 410 3 is_stmt 1 view .LVU650
 410:src/display.c **** }
 2087              		.loc 1 410 3 is_stmt 0 view .LVU651
 2088              	.LBE232:
 2089              	.LBE231:
1667:src/display.c **** 
 2090              		.loc 1 1667 2 is_stmt 1 view .LVU652
1667:src/display.c **** 
 2091              		.loc 1 1667 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1670:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1670 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1667:src/display.c **** 
 2096              		.loc 1 1667 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1670:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1670 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1667:src/display.c **** 
 2102              		.loc 1 1667 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1670:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1670 2 is_stmt 1 view .LVU658
1670:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1670 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1671:src/display.c **** 
 2108              		.loc 1 1671 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1670:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1670 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1671:src/display.c **** 
 2113              		.loc 1 1671 2 is_stmt 1 view .LVU662
1671:src/display.c **** 
 2114              		.loc 1 1671 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1671:src/display.c **** 
 2117              		.loc 1 1671 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1674:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 108


 2122              		.loc 1 1674 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1671:src/display.c **** 
 2124              		.loc 1 1671 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1674:src/display.c **** 
 2127              		.loc 1 1674 2 is_stmt 1 view .LVU667
1674:src/display.c **** 
 2128              		.loc 1 1674 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1674:src/display.c **** 
 2132              		.loc 1 1674 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1677:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1677 2 is_stmt 1 view .LVU670
 2138              	.LBB234:
 2139              	.LBI234:
 407:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 407 14 view .LVU671
 2141              	.LBB235:
 408:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 408 3 view .LVU672
 408:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 408 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 408:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 408 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 408:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 408 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 410:src/display.c **** }
 2152              		.loc 1 410 3 is_stmt 1 view .LVU676
 410:src/display.c **** }
 2153              		.loc 1 410 3 is_stmt 0 view .LVU677
 2154              	.LBE235:
 2155              	.LBE234:
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1681 2 is_stmt 1 view .LVU678
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1681 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1681 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
ARM GAS  /tmp/cc4E4VUn.s 			page 109


1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1681 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1682:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1682 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB238:
 2169              	.LBI238:
 407:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 407 14 view .LVU683
 2171              	.LBB239:
 408:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 408 3 view .LVU684
 408:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 408 12 view .LVU685
 408:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 408 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE239:
 2178              	.LBE238:
1688:src/display.c **** 
 2179              		.loc 1 1688 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1641:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1641 4 is_stmt 1 view .LVU688
1641:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1641 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1642:src/display.c **** 	  else
 2191              		.loc 1 1642 6 is_stmt 1 view .LVU690
1642:src/display.c **** 	  else
 2192              		.loc 1 1642 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1642:src/display.c **** 	  else
 2195              		.loc 1 1642 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1642:src/display.c **** 	  else
 2198              		.loc 1 1642 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1642:src/display.c **** 	  else
 2201              		.loc 1 1642 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1645:src/display.c **** 	}
 2205              		.loc 1 1645 4 is_stmt 1 view .LVU695
ARM GAS  /tmp/cc4E4VUn.s 			page 110


 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB240:
 2214              	.LBB236:
 408:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 408 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 408:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 408 16 view .LVU697
 2220              	.LBE236:
 2221              	.LBE240:
1683:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1683 9 is_stmt 1 view .LVU698
1683:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1683 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1683:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1683 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1684:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1684 4 is_stmt 1 view .LVU701
1684:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1684 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1684:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1684 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1685:src/display.c **** 	  }
 2239              		.loc 1 1685 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB241:
 2242              	.LBI241:
 407:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 407 14 view .LVU705
 2244              	.LBB242:
 408:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 408 3 view .LVU706
 408:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 408 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 408:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 408 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
ARM GAS  /tmp/cc4E4VUn.s 			page 111


 408:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 408 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 408:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 408 19 view .LVU710
 2257              	.LBE242:
 2258              	.LBE241:
1644:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1644 6 is_stmt 1 view .LVU711
 2260              	.LBB244:
 2261              	.LBI244:
 296:src/display.c **** {
 2262              		.loc 1 296 13 view .LVU712
 2263              	.LBB245:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 298 3 view .LVU713
 298:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 298 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 299:src/display.c **** }
 2268              		.loc 1 299 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 298 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2272              		.loc 1 299 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 300:src/display.c **** 
 2275              		.loc 1 300 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 300:src/display.c **** 
 2279              		.loc 1 300 1 view .LVU719
 2280              	.LBE245:
 2281              	.LBE244:
 2282              	.LBB246:
 2283              	.LBB237:
 409:src/display.c ****   return res;
 2284              		.loc 1 409 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 409:src/display.c ****   return res;
 2287              		.loc 1 409 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 410:src/display.c **** }
 2291              		.loc 1 410 3 is_stmt 1 view .LVU722
 410:src/display.c **** }
ARM GAS  /tmp/cc4E4VUn.s 			page 112


 2292              		.loc 1 410 3 is_stmt 0 view .LVU723
 2293              	.LBE237:
 2294              	.LBE246:
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1681 2 is_stmt 1 view .LVU724
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1681 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1681:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1681 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB247:
 2307              	.LBB227:
 409:src/display.c ****   return res;
 2308              		.loc 1 409 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE227:
 2314              	.LBE247:
1634:src/display.c **** 	}
 2315              		.loc 1 1634 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB248:
 2320              	.LBB233:
 409:src/display.c ****   return res;
 2321              		.loc 1 409 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 409:src/display.c ****   return res;
 2325              		.loc 1 409 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 409:src/display.c ****   return res;
 2328              		.loc 1 409 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 409:src/display.c ****   return res;
 2333              		.loc 1 409 8 view .LVU732
 2334              	.LBE233:
 2335              	.LBE248:
 2336              	.LBB249:
 2337              	.LBB230:
 409:src/display.c ****   return res;
 2338              		.loc 1 409 8 is_stmt 1 view .LVU733
ARM GAS  /tmp/cc4E4VUn.s 			page 113


 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 409:src/display.c ****   return res;
 2342              		.loc 1 409 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 409:src/display.c ****   return res;
 2345              		.loc 1 409 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 409:src/display.c ****   return res;
 2350              		.loc 1 409 8 view .LVU736
 2351              	.LBE230:
 2352              	.LBE249:
 2353              	.LBB250:
 2354              	.LBB243:
 409:src/display.c ****   return res;
 2355              		.loc 1 409 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE243:
 2369              	.LBE250:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1691:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1691 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1692:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1692 2 view .LVU739
1693:src/display.c **** 	int j;
 2389              		.loc 1 1693 2 view .LVU740
1694:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 114


 2390              		.loc 1 1694 2 view .LVU741
1696:src/display.c **** 	  return 1;
 2391              		.loc 1 1696 2 view .LVU742
1691:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1691 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1696:src/display.c **** 	  return 1;
 2403              		.loc 1 1696 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1691:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1691 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1696:src/display.c **** 	  return 1;
 2408              		.loc 1 1696 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1696:src/display.c **** 	  return 1;
 2411              		.loc 1 1696 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1697:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1697 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1754:src/display.c **** 
 2418              		.loc 1 1754 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB259:
 2429              	.LBI259:
1691:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1691 18 is_stmt 1 view .LVU750
 2431              	.LBB260:
1698:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1698 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
ARM GAS  /tmp/cc4E4VUn.s 			page 115


 2437              	.LVL254:
1699:src/display.c **** 	  return 0;
 2438              		.loc 1 1699 2 view .LVU752
1699:src/display.c **** 	  return 0;
 2439              		.loc 1 1699 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1699:src/display.c **** 	  return 0;
 2444              		.loc 1 1699 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1701:src/display.c **** 	  return 0;
 2447              		.loc 1 1701 2 is_stmt 1 view .LVU755
1701:src/display.c **** 	  return 0;
 2448              		.loc 1 1701 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1701:src/display.c **** 	  return 0;
 2453              		.loc 1 1701 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1703:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1703 2 is_stmt 1 view .LVU758
1703:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1703 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1709:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1709 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1710:src/display.c **** 
 2469              		.loc 1 1710 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1712:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1712 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1713:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1713 2 view .LVU763
ARM GAS  /tmp/cc4E4VUn.s 			page 116


 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1714:src/display.c **** 
 2487              		.loc 1 1714 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1716:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1716 2 view .LVU765
1716:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1716 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1716:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1716 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1721:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1721 2 is_stmt 1 view .LVU768
1721:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1721 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1721:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1721 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1722:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1722 4 is_stmt 1 view .LVU771
1722:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1722 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1722:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1722 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1693:src/display.c **** 	int j;
 2518              		.loc 1 1693 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1693:src/display.c **** 	int j;
 2521              		.loc 1 1693 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1730:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1730 2 is_stmt 1 view .LVU776
ARM GAS  /tmp/cc4E4VUn.s 			page 117


1730:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1730 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1730:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1730 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1731:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1731 2 is_stmt 1 view .LVU779
1731:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1731 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1731:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1731 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1732:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1732 2 is_stmt 1 view .LVU782
1732:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1732 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1732:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1732 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1733:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1733 2 is_stmt 1 view .LVU785
1733:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1733 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1734:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1734 2 is_stmt 1 view .LVU787
1734:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1734 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1738 12 is_stmt 1 view .LVU789
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1738 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1737:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1737 11 view .LVU791
ARM GAS  /tmp/cc4E4VUn.s 			page 118


 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1739:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1739 4 is_stmt 1 view .LVU792
 2572              	.LBB261:
 2573              	.LBI261:
 407:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 407 14 view .LVU793
 2575              	.LBB262:
 408:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 408 3 view .LVU794
 408:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 408 12 view .LVU795
 408:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 408 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 408:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 408 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 408:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 408 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 408:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 408 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 410:src/display.c **** }
 2591              		.loc 1 410 3 is_stmt 1 view .LVU800
 410:src/display.c **** }
 2592              		.loc 1 410 3 is_stmt 0 view .LVU801
 2593              	.LBE262:
 2594              	.LBE261:
1740:src/display.c **** 	}
 2595              		.loc 1 1740 4 is_stmt 1 view .LVU802
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1738 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1740:src/display.c **** 	}
 2599              		.loc 1 1740 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1738 24 is_stmt 1 view .LVU805
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1738 12 view .LVU806
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1738 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
ARM GAS  /tmp/cc4E4VUn.s 			page 119


1743:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1743 2 is_stmt 1 view .LVU808
1743:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1743 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1743:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1743 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1745:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1745 7 is_stmt 1 view .LVU811
1745:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1745 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1748:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1748 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1749:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1749 26 is_stmt 1 view .LVU814
 2628              	.LBB265:
 2629              	.LBB263:
 408:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 408 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 408:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 408 16 view .LVU816
 2637              	.LBE263:
 2638              	.LBE265:
 2639              	.LBB266:
 2640              	.LBB267:
 408:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 408 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 408:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 408 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 410:src/display.c **** }
 2648              		.loc 1 410 3 is_stmt 1 view .LVU819
 410:src/display.c **** }
 2649              		.loc 1 410 3 is_stmt 0 view .LVU820
 2650              	.LBE267:
 2651              	.LBE266:
1751:src/display.c **** 	}
ARM GAS  /tmp/cc4E4VUn.s 			page 120


 2652              		.loc 1 1751 4 is_stmt 1 view .LVU821
1749:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1749 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1751:src/display.c **** 	}
 2656              		.loc 1 1751 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1749:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1749 38 is_stmt 1 view .LVU824
1749:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1749 26 view .LVU825
1749:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1749 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1750:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1750 4 is_stmt 1 view .LVU827
 2667              	.LBB269:
 2668              	.LBI266:
 407:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 407 14 view .LVU828
 2670              	.LBB268:
 408:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 408 3 view .LVU829
 408:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 408 12 view .LVU830
 408:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 408 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 408:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 408 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 409:src/display.c ****   return res;
 2680              		.loc 1 409 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 409:src/display.c ****   return res;
 2684              		.loc 1 409 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 409:src/display.c ****   return res;
 2688              		.loc 1 409 8 view .LVU835
 2689              	.LBE268:
 2690              	.LBE269:
 2691              	.LBB270:
 2692              	.LBB264:
 409:src/display.c ****   return res;
 2693              		.loc 1 409 8 is_stmt 1 view .LVU836
ARM GAS  /tmp/cc4E4VUn.s 			page 121


 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 409:src/display.c ****   return res;
 2697              		.loc 1 409 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 409:src/display.c ****   return res;
 2701              		.loc 1 409 8 view .LVU838
 2702              	.LBE264:
 2703              	.LBE270:
1744:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1744 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1735:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1735 4 is_stmt 1 view .LVU840
1736:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1736 4 view .LVU841
1736:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1736 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1738:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1738 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1727:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1727 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1728:src/display.c **** 	}
 2725              		.loc 1 1728 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1693:src/display.c **** 	int j;
 2729              		.loc 1 1693 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1728:src/display.c **** 	}
 2732              		.loc 1 1728 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1693:src/display.c **** 	int j;
 2735              		.loc 1 1693 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
ARM GAS  /tmp/cc4E4VUn.s 			page 122


 2739              	.L264:
1704:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1704 4 is_stmt 1 view .LVU849
1704:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1704 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1705:src/display.c **** 	  else
 2743              		.loc 1 1705 6 is_stmt 1 view .LVU851
1705:src/display.c **** 	  else
 2744              		.loc 1 1705 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1705:src/display.c **** 	  else
 2747              		.loc 1 1705 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1705:src/display.c **** 	  else
 2750              		.loc 1 1705 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1705:src/display.c **** 	  else
 2753              		.loc 1 1705 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1705:src/display.c **** 	  else
 2756              		.loc 1 1705 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1717:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1717 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1718:src/display.c **** 	}
 2764              		.loc 1 1718 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1723:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1723 6 view .LVU859
1723:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1723 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1723:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1723 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1723:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1723 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1723:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1723 10 view .LVU863
ARM GAS  /tmp/cc4E4VUn.s 			page 123


 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1724:src/display.c **** 	  }
 2784              		.loc 1 1724 6 is_stmt 1 view .LVU864
1724:src/display.c **** 	  }
 2785              		.loc 1 1724 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1724:src/display.c **** 	  }
 2788              		.loc 1 1724 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1724:src/display.c **** 	  }
 2792              		.loc 1 1724 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1707:src/display.c **** 	}
 2796              		.loc 1 1707 6 is_stmt 1 view .LVU868
 2797              	.LBB271:
 2798              	.LBI271:
 296:src/display.c **** {
 2799              		.loc 1 296 13 view .LVU869
 2800              	.LBB272:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 298 3 view .LVU870
 298:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 298 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 299:src/display.c **** }
 2805              		.loc 1 299 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 298 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2809              		.loc 1 299 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 300:src/display.c **** 
 2812              		.loc 1 300 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE272:
 2825              	.LBE271:
ARM GAS  /tmp/cc4E4VUn.s 			page 124


 2826              	.LBE260:
 2827              	.LBE259:
 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 562 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/display.c ****       int c;
 2849              		.loc 1 563 7 view .LVU877
 2850              	.LVL316:
 564:src/display.c ****       unsigned int b;
 2851              		.loc 1 564 7 view .LVU878
 565:src/display.c **** 
 2852              		.loc 1 565 7 view .LVU879
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 568 7 view .LVU880
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 562 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 568 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 577:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 577 7 is_stmt 1 view .LVU883
 577:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 577 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
ARM GAS  /tmp/cc4E4VUn.s 			page 125


 2872              		.loc 1 577 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 579:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 579 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 580:src/display.c **** 
 2878              		.loc 1 580 7 view .LVU887
 579:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 579 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 580:src/display.c **** 
 2883              		.loc 1 580 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 583 7 is_stmt 1 view .LVU890
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 583 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 583 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 585 7 is_stmt 1 view .LVU893
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 585 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 585 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 587:src/display.c **** 
 2901              		.loc 1 587 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 573:src/display.c ****       }
 2905              		.loc 1 573 16 is_stmt 1 view .LVU897
 573:src/display.c ****       }
 2906              		.loc 1 573 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 573:src/display.c ****       }
 2911              		.loc 1 573 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 573:src/display.c ****       }
ARM GAS  /tmp/cc4E4VUn.s 			page 126


 2914              		.loc 1 573 39 is_stmt 1 view .LVU900
 577:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 577 7 view .LVU901
 577:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 577 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 577 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 578:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 578 2 is_stmt 1 view .LVU904
 2923              	.LBB279:
 2924              	.LBI279:
 308:src/display.c **** {
 2925              		.loc 1 308 13 view .LVU905
 2926              	.LBB280:
 310:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 310 3 view .LVU906
 310:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 310 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 311:src/display.c **** }
 2931              		.loc 1 311 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 310 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 2935              		.loc 1 311 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 312:src/display.c **** 
 2938              		.loc 1 312 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 312:src/display.c **** 
 2942              		.loc 1 312 1 view .LVU912
 2943              	.LBE280:
 2944              	.LBE279:
 2945              	.LBB281:
 2946              	.LBI281:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 562 17 is_stmt 1 view .LVU913
 2948              	.LBB282:
 586:src/display.c ****     }
 2949              		.loc 1 586 2 view .LVU914
 2950              	.LBE282:
 2951              	.LBE281:
 587:src/display.c **** 
 2952              		.loc 1 587 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
ARM GAS  /tmp/cc4E4VUn.s 			page 127


 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB284:
 2960              	.LBB283:
 586:src/display.c ****     }
 2961              		.loc 1 586 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 586:src/display.c ****     }
 2968              		.loc 1 586 2 view .LVU917
 2969              	.LBE283:
 2970              	.LBE284:
 584:src/display.c ****       if (get_overflow())
 2971              		.loc 1 584 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1404:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1404 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1404:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1404 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
ARM GAS  /tmp/cc4E4VUn.s 			page 128


 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1404:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1404 67 view .LVU921
 3019 0006 1546     		mov	r5, r2
 3020 0008 0646     		mov	r6, r0
 3021 000a 0F46     		mov	r7, r1
1405:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1405 2 is_stmt 1 view .LVU922
1405:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1405 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1405:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1405 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L377
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1411 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1405:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1405 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1406:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1406 2 is_stmt 1 view .LVU927
1407:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1407 2 view .LVU928
1408:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1408 2 view .LVU929
1409:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1409 2 view .LVU930
1410:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1410 2 view .LVU931
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1411 2 view .LVU932
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1411 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1412:src/display.c **** 
 3045              		.loc 1 1412 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1414:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1414 2 view .LVU935
 3048 0020 00F24181 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L377+4
 3050 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3051              	.LVL334:
ARM GAS  /tmp/cc4E4VUn.s 			page 129


1422:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1422 2 view .LVU936
1422:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1422 5 is_stmt 0 view .LVU937
 3054 002a 002D     		cmp	r5, #0
 3055 002c 00F04181 		beq	.L368
 3056              	.LVL335:
 3057              	.L288:
1427:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1427 2 is_stmt 1 view .LVU938
1427:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1427 24 is_stmt 0 view .LVU939
 3060 0030 0AF1FF33 		add	r3, r10, #-1
1427:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1427 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1427:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1427 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F380 		bne	.L369
1444:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1444 4 is_stmt 1 view .LVU942
1444:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1444 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 17DC     		bgt	.L299
 3071              	.LBB285:
1445:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1445 6 is_stmt 1 view .LVU944
1445:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1445 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF1200C 		sub	ip, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA0CF3 		lsl	r3, r1, ip
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1446 6 is_stmt 1 view .LVU946
1445:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1445 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1446 9 view .LVU948
 3087 0068 3040     		ands	r0, r0, r6
 3088 006a 3940     		ands	r1, r1, r7
 3089              	.LVL337:
1447:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1447 9 view .LVU949
 3091 006c BAF10A0F 		cmp	r10, #10
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1446 9 view .LVU950
 3093 0070 0646     		mov	r6, r0
ARM GAS  /tmp/cc4E4VUn.s 			page 130


 3094              	.LVL338:
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1446 9 view .LVU951
 3096 0072 0F46     		mov	r7, r1
1447:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1447 6 is_stmt 1 view .LVU952
1447:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1447 9 is_stmt 0 view .LVU953
 3099 0074 00F03D81 		beq	.L370
 3100              	.LVL339:
 3101              	.L299:
1447:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1447 9 view .LVU954
 3103              	.LBE285:
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1451 4 is_stmt 1 view .LVU955
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1451 8 is_stmt 0 view .LVU956
 3106 0078 B54B     		ldr	r3, .L377+8
 3107 007a 1B68     		ldr	r3, [r3]
 3108 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1451 7 view .LVU957
 3110 0080 9A07     		lsls	r2, r3, #30
 3111 0082 41D5     		bpl	.L330
1454:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1454 11 is_stmt 1 view .LVU958
 3113              	.LBB286:
1462:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1462 6 view .LVU959
1463:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1463 6 view .LVU960
1463:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1463 25 is_stmt 0 view .LVU961
 3117 0084 4FEA5A02 		lsr	r2, r10, #1
 3118              	.LVL340:
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1464 6 is_stmt 1 view .LVU962
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1464 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1464 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1465:src/display.c **** 
 3131              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU965
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1467 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0308 		add	r8, fp, r3
1467:src/display.c **** 	    for (i=0; i<n; i++) {
ARM GAS  /tmp/cc4E4VUn.s 			page 131


 3134              		.loc 1 1467 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1467 21 discriminator 4 view .LVU968
 3138 00a2 B8FBF3F8 		udiv	r8, r8, r3
1468:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1468 6 discriminator 4 view .LVU969
 3140 00a6 B8F1000F 		cmp	r8, #0
1465:src/display.c **** 
 3141              		.loc 1 1465 8 discriminator 4 view .LVU970
 3142 00aa 3046     		mov	r0, r6
 3143 00ac 3946     		mov	r1, r7
 3144              	.LVL343:
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1467 6 is_stmt 1 discriminator 4 view .LVU971
1468:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1468 6 discriminator 4 view .LVU972
1468:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1468 16 discriminator 4 view .LVU973
1468:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1468 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ae 40F38381 		ble	.L331
 3150 00b2 05AC     		add	r4, sp, #20
 3151 00b4 DFF8A4B2 		ldr	fp, .L377+20
 3152              	.LVL344:
1468:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1468 6 discriminator 4 view .LVU975
 3154 00b8 08EB0406 		add	r6, r8, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB287:
1469:src/display.c **** 	      v /= b;
 3158              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00bc 5246     		mov	r2, r10
 3160 00be 0023     		movs	r3, #0
 3161 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1470:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1470 8 discriminator 3 view .LVU977
1471:src/display.c **** 	    }
 3164              		.loc 1 1471 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c8 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1471:src/display.c **** 	    }
 3168              		.loc 1 1471 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE287:
1468:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1468 21 discriminator 3 view .LVU980
1468:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1468 16 discriminator 3 view .LVU981
1468:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1468 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00cc B442     		cmp	r4, r6
 3174 00ce F5D1     		bne	.L306
 3175 00d0 08F1FF31 		add	r1, r8, #-1
ARM GAS  /tmp/cc4E4VUn.s 			page 132


 3176              	.LVL348:
1468:src/display.c **** 	      const int r = v % b;
 3177              		.loc 1 1468 6 view .LVU983
 3178 00d4 4446     		mov	r4, r8
 3179              	.LVL349:
 3180              	.L298:
1468:src/display.c **** 	      const int r = v % b;
 3181              		.loc 1 1468 6 view .LVU984
 3182              	.LBE286:
1481:src/display.c **** 	if (res) {
 3183              		.loc 1 1481 2 is_stmt 1 view .LVU985
1482:src/display.c **** 	  if (sign) *res++ = '-';
 3184              		.loc 1 1482 2 view .LVU986
1482:src/display.c **** 	  if (sign) *res++ = '-';
 3185              		.loc 1 1482 5 is_stmt 0 view .LVU987
 3186 00d6 002D     		cmp	r5, #0
 3187 00d8 3ED0     		beq	.L307
 3188              	.LVL350:
 3189              	.L371:
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3190              		.loc 1 1483 4 is_stmt 1 view .LVU988
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3191              		.loc 1 1483 7 is_stmt 0 view .LVU989
 3192 00da 049B     		ldr	r3, [sp, #16]
 3193 00dc 13B1     		cbz	r3, .L308
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3194              		.loc 1 1483 14 is_stmt 1 discriminator 1 view .LVU990
 3195              	.LVL351:
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3196              		.loc 1 1483 21 is_stmt 0 discriminator 1 view .LVU991
 3197 00de 2D23     		movs	r3, #45
 3198 00e0 05F8013B 		strb	r3, [r5], #1
 3199              	.LVL352:
 3200              	.L308:
1484:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3201              		.loc 1 1484 4 is_stmt 1 view .LVU992
1484:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3202              		.loc 1 1484 7 is_stmt 0 view .LVU993
 3203 00e4 0D2C     		cmp	r4, #13
 3204 00e6 00F3E980 		bgt	.L309
1491:src/display.c **** 	      *res++ = buf[i];
 3205              		.loc 1 1491 12 is_stmt 1 view .LVU994
 3206              	.LVL353:
1491:src/display.c **** 	      *res++ = buf[i];
 3207              		.loc 1 1491 12 is_stmt 0 view .LVU995
 3208 00ea 481C     		adds	r0, r1, #1
 3209 00ec 09D0     		beq	.L285
 3210 00ee 0131     		adds	r1, r1, #1
 3211 00f0 05AA     		add	r2, sp, #20
 3212 00f2 013D     		subs	r5, r5, #1
 3213 00f4 1144     		add	r1, r1, r2
 3214              	.LVL354:
 3215              	.L312:
1492:src/display.c **** 	  }
 3216              		.loc 1 1492 8 is_stmt 1 view .LVU996
1492:src/display.c **** 	  }
 3217              		.loc 1 1492 15 is_stmt 0 view .LVU997
ARM GAS  /tmp/cc4E4VUn.s 			page 133


 3218 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3219              	.LVL355:
1492:src/display.c **** 	  }
 3220              		.loc 1 1492 15 view .LVU998
 3221 00fa 05F8013F 		strb	r3, [r5, #1]!
 3222              	.LVL356:
1491:src/display.c **** 	      *res++ = buf[i];
 3223              		.loc 1 1491 12 is_stmt 1 view .LVU999
1491:src/display.c **** 	      *res++ = buf[i];
 3224              		.loc 1 1491 12 is_stmt 0 view .LVU1000
 3225 00fe 9142     		cmp	r1, r2
 3226 0100 F9D1     		bne	.L312
 3227              	.LVL357:
 3228              	.L285:
1539:src/display.c **** 
 3229              		.loc 1 1539 7 view .LVU1001
 3230 0102 17B0     		add	sp, sp, #92
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed
 3234 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3235              	.LVL358:
 3236              	.L330:
 3237              		.cfi_restore_state
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3238              		.loc 1 1451 25 discriminator 1 view .LVU1002
 3239 0108 56EA0703 		orrs	r3, r6, r7
 3240 010c 00F0C480 		beq	.L293
1454:src/display.c **** 	    v = (unsigned long long int)vs;
 3241              		.loc 1 1454 11 is_stmt 1 view .LVU1003
1455:src/display.c **** 	    for (i=0; v != 0; i++) {
 3242              		.loc 1 1455 6 view .LVU1004
 3243 0110 DFF848B2 		ldr	fp, .L377+20
 3244              	.LVL359:
1455:src/display.c **** 	    for (i=0; v != 0; i++) {
 3245              		.loc 1 1455 6 is_stmt 0 view .LVU1005
 3246 0114 CDF800A0 		str	r10, [sp]
 3247 0118 0023     		movs	r3, #0
1455:src/display.c **** 	    for (i=0; v != 0; i++) {
 3248              		.loc 1 1455 8 view .LVU1006
 3249 011a B046     		mov	r8, r6
 3250 011c D946     		mov	r9, fp
 3251 011e 3E46     		mov	r6, r7
1456:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1456 6 is_stmt 1 view .LVU1007
 3253              	.LVL360:
1456:src/display.c **** 	      const int r = v % b;
 3254              		.loc 1 1456 16 view .LVU1008
 3255 0120 9B46     		mov	fp, r3
 3256 0122 05AF     		add	r7, sp, #20
 3257              	.LVL361:
 3258              	.L304:
 3259              	.LBB288:
1457:src/display.c **** 	      v /= b;
 3260              		.loc 1 1457 8 discriminator 3 view .LVU1009
 3261 0124 4046     		mov	r0, r8
 3262 0126 3146     		mov	r1, r6
ARM GAS  /tmp/cc4E4VUn.s 			page 134


 3263 0128 5246     		mov	r2, r10
 3264 012a 5B46     		mov	r3, fp
 3265 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3266              	.LVL362:
 3267 0130 3346     		mov	r3, r6
 3268 0132 9446     		mov	ip, r2
 3269              	.LVL363:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 3270              		.loc 1 1458 8 discriminator 3 view .LVU1010
 3271              	.LBE288:
1456:src/display.c **** 	      const int r = v % b;
 3272              		.loc 1 1456 6 is_stmt 0 discriminator 3 view .LVU1011
 3273 0134 5B45     		cmp	r3, fp
 3274 0136 4246     		mov	r2, r8
 3275              	.LVL364:
 3276              	.LBB289:
1459:src/display.c **** 	    }
 3277              		.loc 1 1459 15 discriminator 3 view .LVU1012
 3278 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3279              	.LVL365:
1459:src/display.c **** 	    }
 3280              		.loc 1 1459 15 discriminator 3 view .LVU1013
 3281 013c 07F801CB 		strb	ip, [r7], #1
 3282              	.LBE289:
1456:src/display.c **** 	      const int r = v % b;
 3283              		.loc 1 1456 6 discriminator 3 view .LVU1014
 3284 0140 08BF     		it	eq
 3285 0142 5245     		cmpeq	r2, r10
 3286              	.LBB290:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 3287              		.loc 1 1458 10 discriminator 3 view .LVU1015
 3288 0144 0E46     		mov	r6, r1
 3289              	.LVL366:
1459:src/display.c **** 	    }
 3290              		.loc 1 1459 8 is_stmt 1 discriminator 3 view .LVU1016
 3291              	.LBE290:
1456:src/display.c **** 	      const int r = v % b;
 3292              		.loc 1 1456 24 discriminator 3 view .LVU1017
 3293              	.LBB291:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 3294              		.loc 1 1458 10 is_stmt 0 discriminator 3 view .LVU1018
 3295 0146 8046     		mov	r8, r0
 3296 0148 2146     		mov	r1, r4
 3297              	.LVL367:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 3298              		.loc 1 1458 10 discriminator 3 view .LVU1019
 3299              	.LBE291:
1456:src/display.c **** 	      const int r = v % b;
 3300              		.loc 1 1456 25 discriminator 3 view .LVU1020
 3301 014a 04F10104 		add	r4, r4, #1
 3302              	.LVL368:
1456:src/display.c **** 	      const int r = v % b;
 3303              		.loc 1 1456 16 is_stmt 1 discriminator 3 view .LVU1021
1456:src/display.c **** 	      const int r = v % b;
 3304              		.loc 1 1456 6 is_stmt 0 discriminator 3 view .LVU1022
 3305 014e E9D2     		bcs	.L304
 3306 0150 DDF800A0 		ldr	r10, [sp]
ARM GAS  /tmp/cc4E4VUn.s 			page 135


 3307              	.LVL369:
1481:src/display.c **** 	if (res) {
 3308              		.loc 1 1481 2 is_stmt 1 view .LVU1023
1482:src/display.c **** 	  if (sign) *res++ = '-';
 3309              		.loc 1 1482 2 view .LVU1024
1482:src/display.c **** 	  if (sign) *res++ = '-';
 3310              		.loc 1 1482 5 is_stmt 0 view .LVU1025
 3311 0154 002D     		cmp	r5, #0
 3312 0156 C0D1     		bne	.L371
 3313              	.LVL370:
 3314              	.L307:
 3315              	.LBB292:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3316              		.loc 1 1510 4 is_stmt 1 view .LVU1026
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3317              		.loc 1 1510 33 is_stmt 0 view .LVU1027
 3318 0158 BAF1020F 		cmp	r10, #2
 3319 015c 00F0F080 		beq	.L372
 3320              	.LVL371:
1511:src/display.c **** 	    : b == 16 ? 2 : 3;
 3321              		.loc 1 1511 4 is_stmt 1 view .LVU1028
1511:src/display.c **** 	    : b == 16 ? 2 : 3;
 3322              		.loc 1 1511 30 is_stmt 0 view .LVU1029
 3323 0160 BAF1040F 		cmp	r10, #4
 3324 0164 00F01F81 		beq	.L373
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3325              		.loc 1 1510 33 view .LVU1030
 3326 0168 BAF1100F 		cmp	r10, #16
 3327 016c 0CBF     		ite	eq
 3328 016e 4FF0020A 		moveq	r10, #2
 3329 0172 4FF0030A 		movne	r10, #3
 3330 0176 0C26     		movs	r6, #12
 3331              	.LVL372:
 3332              	.L314:
1513:src/display.c **** #endif
 3333              		.loc 1 1513 4 is_stmt 1 view .LVU1031
 3334 0178 0091     		str	r1, [sp]
 3335 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3336              	.LVL373:
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3337              		.loc 1 1515 4 view .LVU1032
1516:src/display.c **** 	    State2.window = 0;
 3338              		.loc 1 1516 26 is_stmt 0 view .LVU1033
 3339 017e 724B     		ldr	r3, .L377
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3340              		.loc 1 1515 17 view .LVU1034
 3341 0180 744A     		ldr	r2, .L377+12
1516:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1516 26 view .LVU1035
 3343 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3344              		.loc 1 1515 27 view .LVU1036
 3345 0184 0099     		ldr	r1, [sp]
 3346 0186 91FBF6F1 		sdiv	r1, r1, r6
1516:src/display.c **** 	    State2.window = 0;
 3347              		.loc 1 1516 8 view .LVU1037
 3348 018a C3F3C207 		ubfx	r7, r3, #3, #3
ARM GAS  /tmp/cc4E4VUn.s 			page 136


1516:src/display.c **** 	    State2.window = 0;
 3349              		.loc 1 1516 7 view .LVU1038
 3350 018e B942     		cmp	r1, r7
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3351              		.loc 1 1515 17 view .LVU1039
 3352 0190 1160     		str	r1, [r2]
1516:src/display.c **** 	    State2.window = 0;
 3353              		.loc 1 1516 4 is_stmt 1 view .LVU1040
1516:src/display.c **** 	    State2.window = 0;
 3354              		.loc 1 1516 7 is_stmt 0 view .LVU1041
 3355 0192 C0F2F680 		blt	.L316
 3356 0196 06FB07F7 		mul	r7, r6, r7
 3357              	.L317:
1518:src/display.c **** 
 3358              		.loc 1 1518 4 is_stmt 1 view .LVU1042
1518:src/display.c **** 
 3359              		.loc 1 1518 11 is_stmt 0 view .LVU1043
 3360 019a 16AB     		add	r3, sp, #88
 3361 019c 16AA     		add	r2, sp, #88
 3362 019e 1C44     		add	r4, r4, r3
 3363              	.LVL374:
1518:src/display.c **** 
 3364              		.loc 1 1518 11 view .LVU1044
 3365 01a0 D519     		adds	r5, r2, r7
 3366 01a2 0023     		movs	r3, #0
 3367 01a4 453D     		subs	r5, r5, #69
 3368 01a6 04F8443C 		strb	r3, [r4, #-68]
1520:src/display.c **** 	  for (k = 0; k < 12; k++)
 3369              		.loc 1 1520 4 is_stmt 1 view .LVU1045
 3370              	.LVL375:
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3371              		.loc 1 1521 4 view .LVU1046
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3372              		.loc 1 1521 16 view .LVU1047
1518:src/display.c **** 
 3373              		.loc 1 1518 11 is_stmt 0 view .LVU1048
 3374 01aa 2A46     		mov	r2, r5
 3375              	.LVL376:
 3376              	.L319:
1522:src/display.c **** 	      break;
 3377              		.loc 1 1522 6 is_stmt 1 view .LVU1049
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1521 24 view .LVU1050
1522:src/display.c **** 	      break;
 3379              		.loc 1 1522 9 is_stmt 0 view .LVU1051
 3380 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3381 01b0 0029     		cmp	r1, #0
 3382 01b2 00F0EC80 		beq	.L318
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3383              		.loc 1 1521 25 discriminator 2 view .LVU1052
 3384 01b6 0133     		adds	r3, r3, #1
 3385              	.LVL377:
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3386              		.loc 1 1521 16 is_stmt 1 discriminator 2 view .LVU1053
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 3387              		.loc 1 1521 4 is_stmt 0 discriminator 2 view .LVU1054
 3388 01b8 0C2B     		cmp	r3, #12
ARM GAS  /tmp/cc4E4VUn.s 			page 137


 3389 01ba F7D1     		bne	.L319
1524:src/display.c **** 	    int ch = buf[j++];
 3390              		.loc 1 1524 4 view .LVU1055
 3391 01bc 4FF00B08 		mov	r8, #11
 3392              	.LVL378:
 3393              	.L320:
1524:src/display.c **** 	    int ch = buf[j++];
 3394              		.loc 1 1524 4 view .LVU1056
 3395 01c0 0137     		adds	r7, r7, #1
 3396 01c2 4744     		add	r7, r7, r8
 3397 01c4 4446     		mov	r4, r8
 3398 01c6 4FF0630B 		mov	fp, #99
 3399 01ca 09E0     		b	.L325
 3400              	.LVL379:
 3401              	.L374:
 3402              	.LBB293:
1530:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3403              		.loc 1 1530 8 view .LVU1057
 3404 01cc 624B     		ldr	r3, .L377+16
 3405 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3406              	.LVL380:
 3407              	.LBB294:
 3408              	.LBI294:
 367:src/display.c ****   if (sep == SEP_NONE)
 3409              		.loc 1 367 14 is_stmt 1 view .LVU1058
 3410              	.LBB295:
 368:src/display.c ****     return res;
 3411              		.loc 1 368 3 view .LVU1059
 368:src/display.c ****     return res;
 3412              		.loc 1 368 6 is_stmt 0 view .LVU1060
 3413 01d0 09B1     		cbz	r1, .L323
 368:src/display.c ****     return res;
 3414              		.loc 1 368 6 view .LVU1061
 3415 01d2 FFF7FEFF 		bl	set_separator.part.0
 3416              	.LVL381:
 3417              	.L323:
 368:src/display.c ****     return res;
 3418              		.loc 1 368 6 view .LVU1062
 3419              	.LBE295:
 3420              	.LBE294:
1531:src/display.c **** 	  }
 3421              		.loc 1 1531 6 is_stmt 1 discriminator 2 view .LVU1063
 3422              	.LBE293:
1524:src/display.c **** 	    int ch = buf[j++];
 3423              		.loc 1 1524 4 is_stmt 0 discriminator 2 view .LVU1064
 3424 01d6 013C     		subs	r4, r4, #1
1524:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1524 4 discriminator 2 view .LVU1065
 3426 01d8 621C     		adds	r2, r4, #1
 3427              	.LBB298:
1531:src/display.c **** 	  }
 3428              		.loc 1 1531 10 discriminator 2 view .LVU1066
 3429 01da ABF1090B 		sub	fp, fp, #9
 3430              	.LVL382:
1531:src/display.c **** 	  }
 3431              		.loc 1 1531 10 discriminator 2 view .LVU1067
 3432              	.LBE298:
ARM GAS  /tmp/cc4E4VUn.s 			page 138


1524:src/display.c **** 	    int ch = buf[j++];
 3433              		.loc 1 1524 24 is_stmt 1 discriminator 2 view .LVU1068
1524:src/display.c **** 	    int ch = buf[j++];
 3434              		.loc 1 1524 14 discriminator 2 view .LVU1069
1524:src/display.c **** 	    int ch = buf[j++];
 3435              		.loc 1 1524 4 is_stmt 0 discriminator 2 view .LVU1070
 3436 01de 16D0     		beq	.L329
 3437              	.LVL383:
 3438              	.L325:
 3439              	.LBB299:
1525:src/display.c **** 	    if (i >= shift)
 3440              		.loc 1 1525 6 is_stmt 1 view .LVU1071
1527:src/display.c **** 	    set_dig(dig, ch);
 3441              		.loc 1 1527 8 view .LVU1072
1525:src/display.c **** 	    if (i >= shift)
 3442              		.loc 1 1525 10 is_stmt 0 view .LVU1073
 3443 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1526:src/display.c **** 	      ch -= 030;
 3444              		.loc 1 1526 9 view .LVU1074
 3445 01e4 A8EB0402 		sub	r2, r8, r4
 3446 01e8 B242     		cmp	r2, r6
 3447 01ea A7EB0409 		sub	r9, r7, r4
 3448              	.LVL384:
1526:src/display.c **** 	      ch -= 030;
 3449              		.loc 1 1526 6 is_stmt 1 view .LVU1075
1528:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3450              		.loc 1 1528 6 is_stmt 0 view .LVU1076
 3451 01ee 5846     		mov	r0, fp
1527:src/display.c **** 	    set_dig(dig, ch);
 3452              		.loc 1 1527 11 view .LVU1077
 3453 01f0 A8BF     		it	ge
 3454 01f2 1839     		subge	r1, r1, #24
 3455              	.LVL385:
1528:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3456              		.loc 1 1528 6 is_stmt 1 view .LVU1078
 3457 01f4 FFF7FEFF 		bl	set_dig
 3458              	.LVL386:
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3459              		.loc 1 1529 6 view .LVU1079
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3460              		.loc 1 1529 13 is_stmt 0 view .LVU1080
 3461 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3462 01fc 0AFB1393 		mls	r3, r10, r3, r9
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3463              		.loc 1 1529 9 view .LVU1081
 3464 0200 002B     		cmp	r3, #0
 3465 0202 E8D1     		bne	.L323
1530:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3466              		.loc 1 1530 8 is_stmt 1 discriminator 1 view .LVU1082
 3467              	.LBB297:
 3468              	.LBB296:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3469              		.loc 1 370 3 discriminator 1 view .LVU1083
 3470 0204 5846     		mov	r0, fp
 3471              	.LBE296:
 3472              	.LBE297:
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
ARM GAS  /tmp/cc4E4VUn.s 			page 139


 3473              		.loc 1 1529 27 is_stmt 0 discriminator 1 view .LVU1084
 3474 0206 002C     		cmp	r4, #0
 3475 0208 E0D1     		bne	.L374
1531:src/display.c **** 	  }
 3476              		.loc 1 1531 6 is_stmt 1 view .LVU1085
1531:src/display.c **** 	  }
 3477              		.loc 1 1531 10 is_stmt 0 view .LVU1086
 3478 020a ABF1090B 		sub	fp, fp, #9
 3479              	.LVL387:
1531:src/display.c **** 	  }
 3480              		.loc 1 1531 10 view .LVU1087
 3481              	.LBE299:
1524:src/display.c **** 	    int ch = buf[j++];
 3482              		.loc 1 1524 24 is_stmt 1 view .LVU1088
1524:src/display.c **** 	    int ch = buf[j++];
 3483              		.loc 1 1524 14 view .LVU1089
 3484              	.L329:
1533:src/display.c **** 	    if (dig >= 0)
 3485              		.loc 1 1533 4 view .LVU1090
1533:src/display.c **** 	    if (dig >= 0)
 3486              		.loc 1 1533 7 is_stmt 0 view .LVU1091
 3487 020e 049B     		ldr	r3, [sp, #16]
 3488 0210 002B     		cmp	r3, #0
 3489 0212 3FF476AF 		beq	.L285
1534:src/display.c **** 	      set_dig(dig, '-');
 3490              		.loc 1 1534 6 is_stmt 1 view .LVU1092
1534:src/display.c **** 	      set_dig(dig, '-');
 3491              		.loc 1 1534 9 is_stmt 0 view .LVU1093
 3492 0216 BBF1000F 		cmp	fp, #0
 3493 021a C0F2C680 		blt	.L375
 3494              	.LVL388:
 3495              	.L328:
1535:src/display.c **** 	    else	SET_MANT_SIGN;
 3496              		.loc 1 1535 8 is_stmt 1 view .LVU1094
 3497 021e 5846     		mov	r0, fp
 3498 0220 2D21     		movs	r1, #45
 3499 0222 FFF7FEFF 		bl	set_dig
 3500              	.LVL389:
 3501 0226 6CE7     		b	.L285
 3502              	.LVL390:
 3503              	.L369:
1535:src/display.c **** 	    else	SET_MANT_SIGN;
 3504              		.loc 1 1535 8 is_stmt 0 view .LVU1095
 3505              	.LBE292:
1428:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3506              		.loc 1 1428 4 is_stmt 1 view .LVU1096
1428:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3507              		.loc 1 1428 8 is_stmt 0 view .LVU1097
 3508 0228 04AA     		add	r2, sp, #16
 3509 022a 3046     		mov	r0, r6
 3510 022c 3946     		mov	r1, r7
 3511 022e FFF7FEFF 		bl	extract_value
 3512              	.LVL391:
 3513 0232 8046     		mov	r8, r0
 3514 0234 8946     		mov	r9, r1
 3515              	.LVL392:
1429:src/display.c **** 	    v = value;
ARM GAS  /tmp/cc4E4VUn.s 			page 140


 3516              		.loc 1 1429 4 is_stmt 1 view .LVU1098
1429:src/display.c **** 	    v = value;
 3517              		.loc 1 1429 8 is_stmt 0 view .LVU1099
 3518 0236 FFF7FEFF 		bl	int_mode
 3519              	.LVL393:
1429:src/display.c **** 	    v = value;
 3520              		.loc 1 1429 7 view .LVU1100
 3521 023a 38BB     		cbnz	r0, .L290
1429:src/display.c **** 	    v = value;
 3522              		.loc 1 1429 33 discriminator 1 view .LVU1101
 3523 023c 049B     		ldr	r3, [sp, #16]
 3524 023e 012B     		cmp	r3, #1
 3525 0240 24D1     		bne	.L290
1429:src/display.c **** 	    v = value;
 3526              		.loc 1 1429 46 discriminator 2 view .LVU1102
 3527 0242 58EA0903 		orrs	r3, r8, r9
 3528 0246 00F08B80 		beq	.L376
 3529              	.LVL394:
 3530              	.L291:
1429:src/display.c **** 	    v = value;
 3531              		.loc 1 1429 46 discriminator 2 view .LVU1103
 3532 024a DFF810B1 		ldr	fp, .L377+20
 3533              	.LVL395:
1404:src/display.c **** 	const int ws = word_size();
 3534              		.loc 1 1404 67 discriminator 3 view .LVU1104
 3535 024e 0395     		str	r5, [sp, #12]
 3536 0250 05AB     		add	r3, sp, #20
 3537 0252 5D46     		mov	r5, fp
 3538              	.LVL396:
1404:src/display.c **** 	const int ws = word_size();
 3539              		.loc 1 1404 67 discriminator 3 view .LVU1105
 3540 0254 5646     		mov	r6, r10
 3541 0256 0027     		movs	r7, #0
 3542 0258 0024     		movs	r4, #0
 3543 025a 9B46     		mov	fp, r3
 3544              	.LVL397:
 3545              	.L297:
 3546              	.LBB302:
1438:src/display.c **** 	      v /= b;
 3547              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU1106
 3548 025c 4046     		mov	r0, r8
 3549 025e 4946     		mov	r1, r9
 3550 0260 3246     		mov	r2, r6
 3551 0262 3B46     		mov	r3, r7
 3552 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3553              	.LVL398:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3554              		.loc 1 1439 8 discriminator 3 view .LVU1107
 3555 0268 CDE90089 		strd	r8, [sp]
1440:src/display.c **** 	    }
 3556              		.loc 1 1440 15 is_stmt 0 discriminator 3 view .LVU1108
 3557 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3558 026e 0BF8013B 		strb	r3, [fp], #1
 3559              	.LBE302:
1437:src/display.c **** 	      const int r = v % b;
 3560              		.loc 1 1437 6 discriminator 3 view .LVU1109
 3561 0272 DDE90023 		ldrd	r2, [sp]
ARM GAS  /tmp/cc4E4VUn.s 			page 141


 3562              	.LVL399:
1437:src/display.c **** 	      const int r = v % b;
 3563              		.loc 1 1437 6 discriminator 3 view .LVU1110
 3564 0276 BB42     		cmp	r3, r7
 3565 0278 08BF     		it	eq
 3566 027a B242     		cmpeq	r2, r6
 3567              	.LBB303:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3568              		.loc 1 1439 10 discriminator 3 view .LVU1111
 3569 027c 8946     		mov	r9, r1
 3570              	.LVL400:
1440:src/display.c **** 	    }
 3571              		.loc 1 1440 8 is_stmt 1 discriminator 3 view .LVU1112
 3572              	.LBE303:
1437:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1437 24 discriminator 3 view .LVU1113
 3574              	.LBB304:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3575              		.loc 1 1439 10 is_stmt 0 discriminator 3 view .LVU1114
 3576 027e 8046     		mov	r8, r0
 3577 0280 2146     		mov	r1, r4
 3578              	.LVL401:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3579              		.loc 1 1439 10 discriminator 3 view .LVU1115
 3580              	.LBE304:
1437:src/display.c **** 	      const int r = v % b;
 3581              		.loc 1 1437 25 discriminator 3 view .LVU1116
 3582 0282 04F10104 		add	r4, r4, #1
 3583              	.LVL402:
1437:src/display.c **** 	      const int r = v % b;
 3584              		.loc 1 1437 16 is_stmt 1 discriminator 3 view .LVU1117
1437:src/display.c **** 	      const int r = v % b;
 3585              		.loc 1 1437 6 is_stmt 0 discriminator 3 view .LVU1118
 3586 0286 E9D2     		bcs	.L297
 3587 0288 039D     		ldr	r5, [sp, #12]
 3588 028a 24E7     		b	.L298
 3589              	.LVL403:
 3590              	.L290:
1431:src/display.c **** 	    if (sign)
 3591              		.loc 1 1431 4 is_stmt 1 view .LVU1119
1431:src/display.c **** 	    if (sign)
 3592              		.loc 1 1431 7 is_stmt 0 view .LVU1120
 3593 028c 58EA0903 		orrs	r3, r8, r9
 3594 0290 DBD1     		bne	.L291
1432:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3595              		.loc 1 1432 6 is_stmt 1 view .LVU1121
1432:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3596              		.loc 1 1432 9 is_stmt 0 view .LVU1122
 3597 0292 049B     		ldr	r3, [sp, #16]
 3598 0294 002B     		cmp	r3, #0
 3599 0296 69D1     		bne	.L292
 3600              	.LVL404:
 3601              	.L293:
1434:src/display.c **** 	    return;
 3602              		.loc 1 1434 6 is_stmt 1 view .LVU1123
 3603              	.LBB305:
 3604              	.LBI305:
ARM GAS  /tmp/cc4E4VUn.s 			page 142


 407:src/display.c ****   if (res) *res++ = ch;
 3605              		.loc 1 407 14 view .LVU1124
 3606              	.LBB306:
 408:src/display.c ****   else	set_dig(base, ch);
 3607              		.loc 1 408 3 view .LVU1125
 408:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 408 6 is_stmt 0 view .LVU1126
 3609 0298 002D     		cmp	r5, #0
 3610 029a 6DD0     		beq	.L295
 3611              	.LVL405:
 3612              	.L294:
 408:src/display.c ****   else	set_dig(base, ch);
 3613              		.loc 1 408 12 is_stmt 1 view .LVU1127
 408:src/display.c ****   else	set_dig(base, ch);
 3614              		.loc 1 408 19 is_stmt 0 view .LVU1128
 3615 029c 3023     		movs	r3, #48
 3616 029e 2B70     		strb	r3, [r5]
 3617              	.LBE306:
 3618              	.LBE305:
1539:src/display.c **** 
 3619              		.loc 1 1539 7 view .LVU1129
 3620 02a0 17B0     		add	sp, sp, #92
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 36
 3623              		@ sp needed
 3624 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3625              	.LVL406:
 3626              	.L286:
 3627              		.cfi_restore_state
1419:src/display.c **** 	}
 3628              		.loc 1 1419 11 is_stmt 1 view .LVU1130
1419:src/display.c **** 	}
 3629              		.loc 1 1419 15 is_stmt 0 view .LVU1131
 3630 02a6 FFF7FEFF 		bl	int_base
 3631              	.LVL407:
1419:src/display.c **** 	}
 3632              		.loc 1 1419 15 view .LVU1132
 3633 02aa 8246     		mov	r10, r0
 3634              	.LVL408:
1419:src/display.c **** 	}
 3635              		.loc 1 1419 27 is_stmt 1 view .LVU1133
1422:src/display.c **** 	  IntMaxWindow = 0;
 3636              		.loc 1 1422 2 view .LVU1134
1422:src/display.c **** 	  IntMaxWindow = 0;
 3637              		.loc 1 1422 5 is_stmt 0 view .LVU1135
 3638 02ac 002D     		cmp	r5, #0
 3639 02ae 7FF4BFAE 		bne	.L288
 3640              	.LVL409:
 3641              	.L368:
1423:src/display.c **** 	  carry_overflow();
 3642              		.loc 1 1423 4 is_stmt 1 view .LVU1136
1423:src/display.c **** 	  carry_overflow();
 3643              		.loc 1 1423 17 is_stmt 0 view .LVU1137
 3644 02b2 284B     		ldr	r3, .L377+12
 3645 02b4 1D60     		str	r5, [r3]
1424:src/display.c **** 	}
 3646              		.loc 1 1424 4 is_stmt 1 view .LVU1138
ARM GAS  /tmp/cc4E4VUn.s 			page 143


 3647 02b6 FFF7FEFF 		bl	carry_overflow
 3648              	.LVL410:
 3649 02ba B9E6     		b	.L288
 3650              	.LVL411:
 3651              	.L309:
1485:src/display.c **** 	      *res++ = buf[i];
 3652              		.loc 1 1485 12 view .LVU1139
1485:src/display.c **** 	      *res++ = buf[i];
 3653              		.loc 1 1485 12 is_stmt 0 view .LVU1140
 3654 02bc 05AB     		add	r3, sp, #20
 3655 02be 5818     		adds	r0, r3, r1
1485:src/display.c **** 	      *res++ = buf[i];
 3656              		.loc 1 1485 24 view .LVU1141
 3657 02c0 A4F10D06 		sub	r6, r4, #13
 3658 02c4 6A1E     		subs	r2, r5, #1
 3659              	.LVL412:
 3660              	.L311:
1486:src/display.c **** 	    *res++ = '.';
 3661              		.loc 1 1486 8 is_stmt 1 view .LVU1142
1486:src/display.c **** 	    *res++ = '.';
 3662              		.loc 1 1486 20 is_stmt 0 view .LVU1143
 3663 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3664              	.LVL413:
1486:src/display.c **** 	    *res++ = '.';
 3665              		.loc 1 1486 15 view .LVU1144
 3666 02ca 02F8013F 		strb	r3, [r2, #1]!
 3667              	.LVL414:
1485:src/display.c **** 	      *res++ = buf[i];
 3668              		.loc 1 1485 12 is_stmt 1 view .LVU1145
1485:src/display.c **** 	      *res++ = buf[i];
 3669              		.loc 1 1485 12 is_stmt 0 view .LVU1146
 3670 02ce D343     		mvns	r3, r2
 3671 02d0 0B44     		add	r3, r3, r1
 3672 02d2 2B44     		add	r3, r3, r5
 3673 02d4 9E42     		cmp	r6, r3
 3674 02d6 F6DD     		ble	.L311
 3675 02d8 01F10E03 		add	r3, r1, #14
 3676 02dc 1C1B     		subs	r4, r3, r4
 3677              	.LVL415:
1485:src/display.c **** 	      *res++ = buf[i];
 3678              		.loc 1 1485 12 view .LVU1147
 3679 02de 8E42     		cmp	r6, r1
 3680 02e0 C8BF     		it	gt
 3681 02e2 0124     		movgt	r4, #1
 3682 02e4 2A19     		adds	r2, r5, r4
 3683              	.LVL416:
1487:src/display.c **** 	    *res++ = '.';
 3684              		.loc 1 1487 6 is_stmt 1 view .LVU1148
1487:src/display.c **** 	    *res++ = '.';
 3685              		.loc 1 1487 13 is_stmt 0 view .LVU1149
 3686 02e6 2E23     		movs	r3, #46
 3687 02e8 2B55     		strb	r3, [r5, r4]
1488:src/display.c **** 	  }
 3688              		.loc 1 1488 6 is_stmt 1 view .LVU1150
 3689              	.LVL417:
1488:src/display.c **** 	  }
 3690              		.loc 1 1488 13 is_stmt 0 view .LVU1151
ARM GAS  /tmp/cc4E4VUn.s 			page 144


 3691 02ea 5370     		strb	r3, [r2, #1]
1539:src/display.c **** 
 3692              		.loc 1 1539 7 view .LVU1152
 3693 02ec 17B0     		add	sp, sp, #92
 3694              		.cfi_remember_state
 3695              		.cfi_def_cfa_offset 36
 3696              		@ sp needed
 3697 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3698              	.LVL418:
 3699              	.L370:
 3700              		.cfi_restore_state
 3701              	.LBB308:
1447:src/display.c **** 	      vs |= ~mask;
 3702              		.loc 1 1447 38 discriminator 1 view .LVU1153
 3703 02f2 0BF1FF31 		add	r1, fp, #-1
1447:src/display.c **** 	      vs |= ~mask;
 3704              		.loc 1 1447 18 discriminator 1 view .LVU1154
 3705 02f6 CBF1210C 		rsb	ip, fp, #33
 3706 02fa C840     		lsrs	r0, r0, r1
 3707 02fc 07FA0CFC 		lsl	ip, r7, ip
 3708 0300 2039     		subs	r1, r1, #32
 3709 0302 40EA0C00 		orr	r0, r0, ip
 3710 0306 5CBF     		itt	pl
 3711 0308 47FA01F1 		asrpl	r1, r7, r1
 3712 030c 0843     		orrpl	r0, r0, r1
 3713 030e 00F00108 		and	r8, r0, #1
 3714 0312 4FF00009 		mov	r9, #0
 3715 0316 58EA0901 		orrs	r1, r8, r9
 3716 031a 08D0     		beq	.L300
1448:src/display.c **** 	  }
 3717              		.loc 1 1448 8 is_stmt 1 view .LVU1155
1448:src/display.c **** 	  }
 3718              		.loc 1 1448 11 is_stmt 0 view .LVU1156
 3719 031c 5042     		rsbs	r0, r2, #0
 3720 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3721 0322 40EA0602 		orr	r2, r0, r6
 3722              	.LVL419:
1448:src/display.c **** 	  }
 3723              		.loc 1 1448 11 view .LVU1157
 3724 0326 41EA0703 		orr	r3, r1, r7
 3725              	.LVL420:
1448:src/display.c **** 	  }
 3726              		.loc 1 1448 11 view .LVU1158
 3727 032a 1646     		mov	r6, r2
 3728              	.LVL421:
1448:src/display.c **** 	  }
 3729              		.loc 1 1448 11 view .LVU1159
 3730 032c 1F46     		mov	r7, r3
 3731              	.L300:
1448:src/display.c **** 	  }
 3732              		.loc 1 1448 11 view .LVU1160
 3733              	.LBE308:
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3734              		.loc 1 1451 4 is_stmt 1 view .LVU1161
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3735              		.loc 1 1451 8 is_stmt 0 view .LVU1162
 3736 032e 084B     		ldr	r3, .L377+8
ARM GAS  /tmp/cc4E4VUn.s 			page 145


 3737 0330 1B68     		ldr	r3, [r3]
 3738 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3739              		.loc 1 1451 7 view .LVU1163
 3740 0336 9B07     		lsls	r3, r3, #30
 3741 0338 7FF5E6AE 		bpl	.L330
 3742 033c 0223     		movs	r3, #2
 3743 033e ADE6     		b	.L305
 3744              	.LVL422:
 3745              	.L372:
 3746              	.LBB309:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1510 33 view .LVU1164
 3748 0340 0826     		movs	r6, #8
1512:src/display.c **** 	  set_separator_decimal_modes();
 3749              		.loc 1 1512 6 view .LVU1165
 3750 0342 4FF0040A 		mov	r10, #4
 3751 0346 17E7     		b	.L314
 3752              	.L378:
 3753              		.align	2
 3754              	.L377:
 3755 0348 00000000 		.word	StateWhileOn
 3756 034c 00000000 		.word	CSWTCH.332
 3757 0350 00000000 		.word	main_ram
 3758 0354 00000000 		.word	IntMaxWindow
 3759 0358 00000000 		.word	.LANCHOR0
 3760 035c 00000000 		.word	.LANCHOR12
 3761              	.LVL423:
 3762              	.L376:
1512:src/display.c **** 	  set_separator_decimal_modes();
 3763              		.loc 1 1512 6 view .LVU1166
 3764              	.LBE309:
1430:src/display.c **** 	  if (v == 0) {
 3765              		.loc 1 1430 6 is_stmt 1 view .LVU1167
1430:src/display.c **** 	  if (v == 0) {
 3766              		.loc 1 1430 8 is_stmt 0 view .LVU1168
 3767 0360 B046     		mov	r8, r6
 3768              	.LVL424:
1430:src/display.c **** 	  if (v == 0) {
 3769              		.loc 1 1430 8 view .LVU1169
 3770 0362 B946     		mov	r9, r7
 3771              	.LVL425:
1431:src/display.c **** 	    if (sign)
 3772              		.loc 1 1431 4 is_stmt 1 view .LVU1170
1431:src/display.c **** 	    if (sign)
 3773              		.loc 1 1431 7 is_stmt 0 view .LVU1171
 3774 0364 58EA0903 		orrs	r3, r8, r9
 3775 0368 7FF46FAF 		bne	.L291
 3776              	.LVL426:
 3777              	.L292:
1433:src/display.c **** 	    set_dig_s(dig, '0', res);
 3778              		.loc 1 1433 8 is_stmt 1 view .LVU1172
 3779              	.LBB310:
 3780              	.LBI310:
 407:src/display.c ****   if (res) *res++ = ch;
 3781              		.loc 1 407 14 view .LVU1173
 3782              	.LBB311:
ARM GAS  /tmp/cc4E4VUn.s 			page 146


 408:src/display.c ****   else	set_dig(base, ch);
 3783              		.loc 1 408 3 view .LVU1174
 408:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 408 6 is_stmt 0 view .LVU1175
 3785 036c 002D     		cmp	r5, #0
 3786 036e 95D1     		bne	.L294
 409:src/display.c ****   return res;
 3787              		.loc 1 409 8 is_stmt 1 view .LVU1176
 3788 0370 2D21     		movs	r1, #45
 3789 0372 5A20     		movs	r0, #90
 3790 0374 FFF7FEFF 		bl	set_dig
 3791              	.LVL427:
 409:src/display.c ****   return res;
 3792              		.loc 1 409 8 is_stmt 0 view .LVU1177
 3793              	.LBE311:
 3794              	.LBE310:
1434:src/display.c **** 	    return;
 3795              		.loc 1 1434 6 is_stmt 1 view .LVU1178
 3796              	.LBB312:
 407:src/display.c ****   if (res) *res++ = ch;
 3797              		.loc 1 407 14 view .LVU1179
 3798              	.LBB307:
 408:src/display.c ****   else	set_dig(base, ch);
 3799              		.loc 1 408 3 view .LVU1180
 3800              	.L295:
 409:src/display.c ****   return res;
 3801              		.loc 1 409 8 view .LVU1181
 3802 0378 3021     		movs	r1, #48
 3803 037a 6320     		movs	r0, #99
 3804 037c FFF7FEFF 		bl	set_dig
 3805              	.LVL428:
 3806 0380 BFE6     		b	.L285
 3807              	.LVL429:
 3808              	.L316:
 409:src/display.c ****   return res;
 3809              		.loc 1 409 8 is_stmt 0 view .LVU1182
 3810              	.LBE307:
 3811              	.LBE312:
 3812              	.LBB313:
1517:src/display.c **** 	  buf[i] = '\0';
 3813              		.loc 1 1517 6 is_stmt 1 view .LVU1183
1517:src/display.c **** 	  buf[i] = '\0';
 3814              		.loc 1 1517 20 is_stmt 0 view .LVU1184
 3815 0382 0F4A     		ldr	r2, .L379
 3816 0384 6FF3C503 		bfc	r3, #3, #3
 3817 0388 1375     		strb	r3, [r2, #20]
 3818 038a 0027     		movs	r7, #0
 3819 038c 05E7     		b	.L317
 3820              	.LVL430:
 3821              	.L318:
1524:src/display.c **** 	    int ch = buf[j++];
 3822              		.loc 1 1524 14 is_stmt 1 discriminator 1 view .LVU1185
1524:src/display.c **** 	    int ch = buf[j++];
 3823              		.loc 1 1524 4 is_stmt 0 discriminator 1 view .LVU1186
 3824 038e 03F1FF38 		add	r8, r3, #-1
 3825              	.LVL431:
1524:src/display.c **** 	    int ch = buf[j++];
ARM GAS  /tmp/cc4E4VUn.s 			page 147


 3826              		.loc 1 1524 4 discriminator 1 view .LVU1187
 3827 0392 002B     		cmp	r3, #0
 3828 0394 7FF414AF 		bne	.L320
1533:src/display.c **** 	    if (dig >= 0)
 3829              		.loc 1 1533 4 is_stmt 1 view .LVU1188
1533:src/display.c **** 	    if (dig >= 0)
 3830              		.loc 1 1533 7 is_stmt 0 view .LVU1189
 3831 0398 049B     		ldr	r3, [sp, #16]
 3832 039a 002B     		cmp	r3, #0
 3833 039c 3FF4B1AE 		beq	.L285
 3834 03a0 4FF0630B 		mov	fp, #99
 3835 03a4 3BE7     		b	.L328
 3836              	.LVL432:
 3837              	.L373:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3838              		.loc 1 1510 33 view .LVU1190
 3839 03a6 0C26     		movs	r6, #12
 3840 03a8 E6E6     		b	.L314
 3841              	.LVL433:
 3842              	.L375:
1536:src/display.c **** 	  }
 3843              		.loc 1 1536 11 is_stmt 1 view .LVU1191
 3844              	.LBB300:
 3845              	.LBI300:
 296:src/display.c **** {
 3846              		.loc 1 296 13 view .LVU1192
 3847              	.LBB301:
 298:src/display.c ****   set_dot(MANT_SIGN);
 3848              		.loc 1 298 3 view .LVU1193
 298:src/display.c ****   set_dot(MANT_SIGN);
 3849              		.loc 1 298 25 is_stmt 0 view .LVU1194
 3850 03aa 064B     		ldr	r3, .L379+4
 3851 03ac 2D22     		movs	r2, #45
 299:src/display.c **** }
 3852              		.loc 1 299 3 view .LVU1195
 3853 03ae 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 3854              		.loc 1 298 25 view .LVU1196
 3855 03b0 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 3856              		.loc 1 299 3 is_stmt 1 view .LVU1197
 3857 03b2 FFF7FEFF 		bl	set_dot
 3858              	.LVL434:
 300:src/display.c **** 
 3859              		.loc 1 300 1 is_stmt 0 view .LVU1198
 3860 03b6 A4E6     		b	.L285
 3861              	.LVL435:
 3862              	.L331:
 300:src/display.c **** 
 3863              		.loc 1 300 1 view .LVU1199
 3864              	.LBE301:
 3865              	.LBE300:
 3866              	.LBE313:
 3867              	.LBB314:
1468:src/display.c **** 	      const int r = v % b;
 3868              		.loc 1 1468 6 view .LVU1200
 3869 03b8 4FF0FF31 		mov	r1, #-1
ARM GAS  /tmp/cc4E4VUn.s 			page 148


 3870 03bc 8BE6     		b	.L298
 3871              	.L380:
 3872 03be 00BF     		.align	2
 3873              	.L379:
 3874 03c0 00000000 		.word	StateWhileOn
 3875 03c4 00000000 		.word	LastDisplayedNumber
 3876              	.LBE314:
 3877              		.cfi_endproc
 3878              	.LFE18:
 3880              		.section	.text.set_annunciators,"ax",%progbits
 3881              		.align	1
 3882              		.p2align 2,,3
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	set_annunciators:
 3889              	.LFB32:
2539:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3890              		.loc 1 2539 7 is_stmt 1 view -0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
2540:src/display.c **** 
 3894              		.loc 1 2540 2 view .LVU1202
2539:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3895              		.loc 1 2539 7 is_stmt 0 view .LVU1203
 3896 0000 70B5     		push	{r4, r5, r6, lr}
 3897              		.cfi_def_cfa_offset 16
 3898              		.cfi_offset 4, -16
 3899              		.cfi_offset 5, -12
 3900              		.cfi_offset 6, -8
 3901              		.cfi_offset 14, -4
2549:src/display.c **** #endif
 3902              		.loc 1 2549 11 view .LVU1204
 3903 0002 344E     		ldr	r6, .L407
2540:src/display.c **** 
 3904              		.loc 1 2540 29 view .LVU1205
 3905 0004 FFF7FEFF 		bl	get_trig_mode
 3906              	.LVL436:
2549:src/display.c **** #endif
 3907              		.loc 1 2549 11 view .LVU1206
 3908 0008 3368     		ldr	r3, [r6]
2549:src/display.c **** #endif
 3909              		.loc 1 2549 2 view .LVU1207
 3910 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3911 000e 012B     		cmp	r3, #1
2540:src/display.c **** 
 3912              		.loc 1 2540 29 view .LVU1208
 3913 0010 0446     		mov	r4, r0
 3914              	.LVL437:
2549:src/display.c **** #endif
 3915              		.loc 1 2549 2 is_stmt 1 view .LVU1209
 3916              	.LBB333:
 3917              	.LBB334:
 340:src/display.c ****   else	clr_dot(n);
 3918              		.loc 1 340 11 is_stmt 0 view .LVU1210
ARM GAS  /tmp/cc4E4VUn.s 			page 149


 3919 0012 4FF08800 		mov	r0, #136
 3920              	.LBE334:
 3921              	.LBE333:
2549:src/display.c **** #endif
 3922              		.loc 1 2549 2 view .LVU1211
 3923 0016 03D8     		bhi	.L382
2549:src/display.c **** #endif
 3924              		.loc 1 2549 30 discriminator 1 view .LVU1212
 3925 0018 2F4B     		ldr	r3, .L407+4
2549:src/display.c **** #endif
 3926              		.loc 1 2549 2 discriminator 1 view .LVU1213
 3927 001a 1B68     		ldr	r3, [r3]
 3928 001c 002B     		cmp	r3, #0
 3929 001e 56D0     		beq	.L403
 3930              	.L382:
 3931              	.LVL438:
 3932              	.LBB337:
 3933              	.LBI333:
 339:src/display.c ****   if (on)	set_dot(n);
 3934              		.loc 1 339 6 is_stmt 1 view .LVU1214
 3935              	.LBB335:
 340:src/display.c ****   else	clr_dot(n);
 3936              		.loc 1 340 3 view .LVU1215
 341:src/display.c **** }
 3937              		.loc 1 341 8 view .LVU1216
 3938 0020 FFF7FEFF 		bl	clr_dot
 3939              	.LVL439:
 3940              	.L383:
 341:src/display.c **** }
 3941              		.loc 1 341 8 is_stmt 0 view .LVU1217
 3942              	.LBE335:
 3943              	.LBE337:
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3944              		.loc 1 2551 2 is_stmt 1 view .LVU1218
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3945              		.loc 1 2551 19 is_stmt 0 view .LVU1219
 3946 0024 2D4D     		ldr	r5, .L407+8
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3947              		.loc 1 2551 2 view .LVU1220
 3948 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3949              	.LBB338:
 3950              	.LBB339:
 340:src/display.c ****   else	clr_dot(n);
 3951              		.loc 1 340 11 view .LVU1221
 3952 0028 8620     		movs	r0, #134
 3953              	.LBE339:
 3954              	.LBE338:
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3955              		.loc 1 2551 2 view .LVU1222
 3956 002a 23B9     		cbnz	r3, .L384
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3957              		.loc 1 2551 47 discriminator 2 view .LVU1223
 3958 002c 6A69     		ldr	r2, [r5, #20]
 3959 002e 2C4B     		ldr	r3, .L407+12
 3960 0030 1340     		ands	r3, r3, r2
2551:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3961              		.loc 1 2551 2 discriminator 2 view .LVU1224
ARM GAS  /tmp/cc4E4VUn.s 			page 150


 3962 0032 002B     		cmp	r3, #0
 3963 0034 48D0     		beq	.L404
 3964              	.L384:
 3965              	.LBB342:
 3966              	.LBB340:
 340:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 340 11 is_stmt 1 view .LVU1225
 3968 0036 FFF7FEFF 		bl	set_dot
 3969              	.LVL440:
 3970              	.L385:
 3971              	.LBE340:
 3972              	.LBE342:
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3973              		.loc 1 2552 2 view .LVU1226
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3974              		.loc 1 2552 31 is_stmt 0 view .LVU1227
 3975 003a 2A4A     		ldr	r2, .L407+16
 3976 003c 6B69     		ldr	r3, [r5, #20]
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3977              		.loc 1 2552 2 view .LVU1228
 3978 003e 1A42     		tst	r2, r3
 3979              	.LBB343:
 3980              	.LBB344:
 340:src/display.c ****   else	clr_dot(n);
 3981              		.loc 1 340 11 view .LVU1229
 3982 0040 4FF08500 		mov	r0, #133
 3983              	.LBE344:
 3984              	.LBE343:
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3985              		.loc 1 2552 2 view .LVU1230
 3986 0044 02D0     		beq	.L386
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3987              		.loc 1 2552 48 discriminator 1 view .LVU1231
 3988 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2552:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3989              		.loc 1 2552 2 discriminator 1 view .LVU1232
 3990 0048 DA06     		lsls	r2, r3, #27
 3991 004a 3AD4     		bmi	.L387
 3992              	.L386:
 3993              	.LVL441:
 3994              	.LBB347:
 3995              	.LBI343:
 339:src/display.c ****   if (on)	set_dot(n);
 3996              		.loc 1 339 6 is_stmt 1 view .LVU1233
 3997              	.LBB345:
 340:src/display.c ****   else	clr_dot(n);
 3998              		.loc 1 340 3 view .LVU1234
 341:src/display.c **** }
 3999              		.loc 1 341 8 view .LVU1235
 4000 004c FFF7FEFF 		bl	clr_dot
 4001              	.LVL442:
 4002              	.L388:
 341:src/display.c **** }
 4003              		.loc 1 341 8 is_stmt 0 view .LVU1236
 4004              	.LBE345:
 4005              	.LBE347:
2553:src/display.c **** 	set_IO_annunciator();
ARM GAS  /tmp/cc4E4VUn.s 			page 151


 4006              		.loc 1 2553 2 is_stmt 1 view .LVU1237
 4007 0050 6820     		movs	r0, #104
 4008 0052 FFF7FEFF 		bl	get_user_flag
 4009              	.LVL443:
 4010              	.LBB348:
 4011              	.LBI348:
 339:src/display.c ****   if (on)	set_dot(n);
 4012              		.loc 1 339 6 view .LVU1238
 4013              	.LBB349:
 340:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 340 3 view .LVU1239
 340:src/display.c ****   else	clr_dot(n);
 4015              		.loc 1 340 6 is_stmt 0 view .LVU1240
 4016 0056 28B3     		cbz	r0, .L389
 340:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 340 11 is_stmt 1 view .LVU1241
 4018              	.LBE349:
 4019              	.LBE348:
 4020              	.LBB353:
 4021              	.LBB354:
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4022              		.loc 1 2581 9 is_stmt 0 view .LVU1242
 4023 0058 234D     		ldr	r5, .L407+20
 4024              	.LBE354:
 4025              	.LBE353:
 4026              	.LBB362:
 4027              	.LBB350:
 340:src/display.c ****   else	clr_dot(n);
 4028              		.loc 1 340 11 view .LVU1243
 4029 005a 8320     		movs	r0, #131
 4030              	.LVL444:
 340:src/display.c ****   else	clr_dot(n);
 4031              		.loc 1 340 11 view .LVU1244
 4032 005c FFF7FEFF 		bl	set_dot
 4033              	.LVL445:
 340:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 340 11 view .LVU1245
 4035              	.LBE350:
 4036              	.LBE362:
2554:src/display.c **** 
 4037              		.loc 1 2554 2 is_stmt 1 view .LVU1246
 4038              	.LBB363:
 4039              	.LBI353:
2566:src/display.c **** #ifndef DM42
 4040              		.loc 1 2566 12 view .LVU1247
 4041              	.LBB359:
2571:src/display.c **** #endif
 4042              		.loc 1 2571 4 view .LVU1248
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4043              		.loc 1 2581 2 view .LVU1249
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4044              		.loc 1 2581 5 is_stmt 0 view .LVU1250
 4045 0060 2B68     		ldr	r3, [r5]
 4046 0062 33BB     		cbnz	r3, .L405
 4047              	.L391:
 4048              	.LBE359:
 4049              	.LBE363:
ARM GAS  /tmp/cc4E4VUn.s 			page 152


2558:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4050              		.loc 1 2558 2 is_stmt 1 view .LVU1251
2558:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4051              		.loc 1 2558 11 is_stmt 0 view .LVU1252
 4052 0064 3368     		ldr	r3, [r6]
 4053 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4054 006a 03F00103 		and	r3, r3, #1
2558:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4055              		.loc 1 2558 2 view .LVU1253
 4056 006e 2343     		orrs	r3, r3, r4
 4057 0070 13F0FF0F 		tst	r3, #255
 4058              	.LBB364:
 4059              	.LBB365:
 340:src/display.c ****   else	clr_dot(n);
 4060              		.loc 1 340 11 view .LVU1254
 4061 0074 4FF08C00 		mov	r0, #140
 4062              	.LBE365:
 4063              	.LBE364:
2558:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4064              		.loc 1 2558 2 view .LVU1255
 4065 0078 06D1     		bne	.L406
 4066              	.LVL446:
 4067              	.LBB368:
 4068              	.LBI364:
 339:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 339 6 is_stmt 1 view .LVU1256
 4070              	.LBB366:
 340:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 340 3 view .LVU1257
 340:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 340 11 view .LVU1258
 4073 007a FFF7FEFF 		bl	set_dot
 4074              	.LVL447:
 340:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 340 11 is_stmt 0 view .LVU1259
 4076              	.LBE366:
 4077              	.LBE368:
2559:src/display.c ****       }
 4078              		.loc 1 2559 2 is_stmt 1 view .LVU1260
 4079              	.L394:
 4080              	.LBB369:
 4081              	.LBI369:
 339:src/display.c ****   if (on)	set_dot(n);
 4082              		.loc 1 339 6 view .LVU1261
 4083              	.LBB370:
 340:src/display.c ****   else	clr_dot(n);
 4084              		.loc 1 340 3 view .LVU1262
 341:src/display.c **** }
 4085              		.loc 1 341 8 view .LVU1263
 4086              	.LBE370:
 4087              	.LBE369:
2560:src/display.c **** 
 4088              		.loc 1 2560 7 is_stmt 0 view .LVU1264
 4089 007e BDE87040 		pop	{r4, r5, r6, lr}
 4090              		.cfi_remember_state
 4091              		.cfi_restore 14
 4092              		.cfi_restore 6
ARM GAS  /tmp/cc4E4VUn.s 			page 153


 4093              		.cfi_restore 5
 4094              		.cfi_restore 4
 4095              		.cfi_def_cfa_offset 0
 4096              	.LVL448:
 4097              	.LBB374:
 4098              	.LBB371:
 341:src/display.c **** }
 4099              		.loc 1 341 8 view .LVU1265
 4100 0082 8B20     		movs	r0, #139
 4101 0084 FFF7FEBF 		b	clr_dot
 4102              	.LVL449:
 4103              	.L406:
 4104              		.cfi_restore_state
 341:src/display.c **** }
 4105              		.loc 1 341 8 view .LVU1266
 4106              	.LBE371:
 4107              	.LBE374:
 4108              	.LBB375:
 339:src/display.c ****   if (on)	set_dot(n);
 4109              		.loc 1 339 6 is_stmt 1 view .LVU1267
 4110              	.LBB367:
 340:src/display.c ****   else	clr_dot(n);
 4111              		.loc 1 340 3 view .LVU1268
 341:src/display.c **** }
 4112              		.loc 1 341 8 view .LVU1269
 4113 0088 FFF7FEFF 		bl	clr_dot
 4114              	.LVL450:
 341:src/display.c **** }
 4115              		.loc 1 341 8 is_stmt 0 view .LVU1270
 4116              	.LBE367:
 4117              	.LBE375:
2559:src/display.c ****       }
 4118              		.loc 1 2559 2 is_stmt 1 view .LVU1271
2559:src/display.c ****       }
 4119              		.loc 1 2559 11 is_stmt 0 view .LVU1272
 4120 008c 3368     		ldr	r3, [r6]
 4121 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2559:src/display.c ****       }
 4122              		.loc 1 2559 2 view .LVU1273
 4123 0092 DB07     		lsls	r3, r3, #31
 4124 0094 F3D4     		bmi	.L394
2559:src/display.c ****       }
 4125              		.loc 1 2559 2 discriminator 1 view .LVU1274
 4126 0096 012C     		cmp	r4, #1
 4127 0098 F1D1     		bne	.L394
 4128              	.LVL451:
 4129              	.LBB376:
 339:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 339 6 is_stmt 1 view .LVU1275
 4131              	.LBB372:
 340:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 340 3 view .LVU1276
 340:src/display.c ****   else	clr_dot(n);
 4133              		.loc 1 340 11 view .LVU1277
 4134              	.LBE372:
 4135              	.LBE376:
2560:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 154


 4136              		.loc 1 2560 7 is_stmt 0 view .LVU1278
 4137 009a BDE87040 		pop	{r4, r5, r6, lr}
 4138              		.cfi_remember_state
 4139              		.cfi_restore 14
 4140              		.cfi_restore 6
 4141              		.cfi_restore 5
 4142              		.cfi_restore 4
 4143              		.cfi_def_cfa_offset 0
 4144              	.LVL452:
 4145              	.LBB377:
 4146              	.LBB373:
 340:src/display.c ****   else	clr_dot(n);
 4147              		.loc 1 340 11 view .LVU1279
 4148 009e 8B20     		movs	r0, #139
 4149 00a0 FFF7FEBF 		b	set_dot
 4150              	.LVL453:
 4151              	.L389:
 4152              		.cfi_restore_state
 340:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 340 11 view .LVU1280
 4154              	.LBE373:
 4155              	.LBE377:
 4156              	.LBB378:
 4157              	.LBB351:
 341:src/display.c **** }
 4158              		.loc 1 341 8 is_stmt 1 view .LVU1281
 4159              	.LBE351:
 4160              	.LBE378:
 4161              	.LBB379:
 4162              	.LBB360:
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4163              		.loc 1 2581 9 is_stmt 0 view .LVU1282
 4164 00a4 104D     		ldr	r5, .L407+20
 4165              	.LBE360:
 4166              	.LBE379:
 4167              	.LBB380:
 4168              	.LBB352:
 341:src/display.c **** }
 4169              		.loc 1 341 8 view .LVU1283
 4170 00a6 8320     		movs	r0, #131
 4171              	.LVL454:
 341:src/display.c **** }
 4172              		.loc 1 341 8 view .LVU1284
 4173 00a8 FFF7FEFF 		bl	clr_dot
 4174              	.LVL455:
 341:src/display.c **** }
 4175              		.loc 1 341 8 view .LVU1285
 4176              	.LBE352:
 4177              	.LBE380:
2554:src/display.c **** 
 4178              		.loc 1 2554 2 is_stmt 1 view .LVU1286
 4179              	.LBB381:
2566:src/display.c **** #ifndef DM42
 4180              		.loc 1 2566 12 view .LVU1287
 4181              	.LBB361:
2571:src/display.c **** #endif
 4182              		.loc 1 2571 4 view .LVU1288
ARM GAS  /tmp/cc4E4VUn.s 			page 155


2581:src/display.c **** 	  dot(LIT_EQ, on);
 4183              		.loc 1 2581 2 view .LVU1289
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4184              		.loc 1 2581 5 is_stmt 0 view .LVU1290
 4185 00ac 2B68     		ldr	r3, [r5]
 4186 00ae 002B     		cmp	r3, #0
 4187 00b0 D8D0     		beq	.L391
 4188              	.L405:
 4189              	.LBB355:
 4190              	.LBI355:
2566:src/display.c **** #ifndef DM42
 4191              		.loc 1 2566 12 is_stmt 1 view .LVU1291
 4192              	.LBB356:
2582:src/display.c **** 	  IoAnnunciator = on;
 4193              		.loc 1 2582 4 view .LVU1292
 4194              	.LVL456:
 4195              	.LBB357:
 4196              	.LBI357:
 339:src/display.c ****   if (on)	set_dot(n);
 4197              		.loc 1 339 6 view .LVU1293
 4198              	.LBB358:
 340:src/display.c ****   else	clr_dot(n);
 4199              		.loc 1 340 3 view .LVU1294
 341:src/display.c **** }
 4200              		.loc 1 341 8 view .LVU1295
 4201 00b2 8420     		movs	r0, #132
 4202 00b4 FFF7FEFF 		bl	clr_dot
 4203              	.LVL457:
 341:src/display.c **** }
 4204              		.loc 1 341 8 is_stmt 0 view .LVU1296
 4205              	.LBE358:
 4206              	.LBE357:
2583:src/display.c **** 	  finish_display(); //LIT_EQ
 4207              		.loc 1 2583 4 is_stmt 1 view .LVU1297
2583:src/display.c **** 	  finish_display(); //LIT_EQ
 4208              		.loc 1 2583 18 is_stmt 0 view .LVU1298
 4209 00b8 0023     		movs	r3, #0
 4210 00ba 2B60     		str	r3, [r5]
2584:src/display.c **** 	}
 4211              		.loc 1 2584 4 is_stmt 1 view .LVU1299
 4212 00bc FFF7FEFF 		bl	finish_display
 4213              	.LVL458:
2586:src/display.c **** 
 4214              		.loc 1 2586 7 is_stmt 0 view .LVU1300
 4215 00c0 D0E7     		b	.L391
 4216              	.LVL459:
 4217              	.L387:
2586:src/display.c **** 
 4218              		.loc 1 2586 7 view .LVU1301
 4219              	.LBE356:
 4220              	.LBE355:
 4221              	.LBE361:
 4222              	.LBE381:
 4223              	.LBB382:
 339:src/display.c ****   if (on)	set_dot(n);
 4224              		.loc 1 339 6 is_stmt 1 view .LVU1302
 4225              	.LBB346:
ARM GAS  /tmp/cc4E4VUn.s 			page 156


 340:src/display.c ****   else	clr_dot(n);
 4226              		.loc 1 340 3 view .LVU1303
 340:src/display.c ****   else	clr_dot(n);
 4227              		.loc 1 340 11 view .LVU1304
 4228 00c2 FFF7FEFF 		bl	set_dot
 4229              	.LVL460:
 4230 00c6 C3E7     		b	.L388
 4231              	.LVL461:
 4232              	.L404:
 340:src/display.c ****   else	clr_dot(n);
 4233              		.loc 1 340 11 is_stmt 0 view .LVU1305
 4234              	.LBE346:
 4235              	.LBE382:
 4236              	.LBB383:
 4237              	.LBI338:
 339:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 339 6 is_stmt 1 view .LVU1306
 4239              	.LBB341:
 340:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 340 3 view .LVU1307
 341:src/display.c **** }
 4241              		.loc 1 341 8 view .LVU1308
 4242 00c8 FFF7FEFF 		bl	clr_dot
 4243              	.LVL462:
 4244 00cc B5E7     		b	.L385
 4245              	.LVL463:
 4246              	.L403:
 341:src/display.c **** }
 4247              		.loc 1 341 8 is_stmt 0 view .LVU1309
 4248              	.LBE341:
 4249              	.LBE383:
 4250              	.LBB384:
 339:src/display.c ****   if (on)	set_dot(n);
 4251              		.loc 1 339 6 is_stmt 1 view .LVU1310
 4252              	.LBB336:
 340:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 340 3 view .LVU1311
 340:src/display.c ****   else	clr_dot(n);
 4254              		.loc 1 340 11 view .LVU1312
 4255 00ce FFF7FEFF 		bl	set_dot
 4256              	.LVL464:
 4257 00d2 A7E7     		b	.L383
 4258              	.L408:
 4259              		.align	2
 4260              	.L407:
 4261 00d4 00000000 		.word	main_ram
 4262 00d8 00000000 		.word	Running
 4263 00dc 00000000 		.word	StateWhileOn
 4264 00e0 07000800 		.word	524295
 4265 00e4 00080800 		.word	526336
 4266 00e8 00000000 		.word	IoAnnunciator
 4267              	.LBE336:
 4268              	.LBE384:
 4269              		.cfi_endproc
 4270              	.LFE32:
 4272              		.section	.text.getdig,"ax",%progbits
 4273              		.align	1
ARM GAS  /tmp/cc4E4VUn.s 			page 157


 4274              		.p2align 2,,3
 4275              		.global	getdig
 4276              		.syntax unified
 4277              		.thumb
 4278              		.thumb_func
 4279              		.fpu fpv4-sp-d16
 4281              	getdig:
 4282              	.LVL465:
 4283              	.LFB6:
 334:src/display.c ****   // perform index lookup
 4284              		.loc 1 334 1 view -0
 4285              		.cfi_startproc
 4286              		@ args = 0, pretend = 0, frame = 0
 4287              		@ frame_needed = 0, uses_anonymous_args = 0
 4288              		@ link register save eliminated.
 336:src/display.c **** }
 4289              		.loc 1 336 3 view .LVU1314
 336:src/display.c **** }
 4290              		.loc 1 336 16 is_stmt 0 view .LVU1315
 4291 0000 014B     		ldr	r3, .L410
 336:src/display.c **** }
 4292              		.loc 1 336 19 view .LVU1316
 4293 0002 C0B2     		uxtb	r0, r0
 4294              	.LVL466:
 337:src/display.c **** 
 4295              		.loc 1 337 1 view .LVU1317
 4296 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4297 0006 7047     		bx	lr
 4298              	.L411:
 4299              		.align	2
 4300              	.L410:
 4301 0008 00000000 		.word	.LANCHOR2
 4302              		.cfi_endproc
 4303              	.LFE6:
 4305              		.section	.text.dot,"ax",%progbits
 4306              		.align	1
 4307              		.p2align 2,,3
 4308              		.global	dot
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv4-sp-d16
 4314              	dot:
 4315              	.LVL467:
 4316              	.LFB7:
 339:src/display.c ****   if (on)	set_dot(n);
 4317              		.loc 1 339 25 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 340:src/display.c ****   else	clr_dot(n);
 4322              		.loc 1 340 3 view .LVU1319
 340:src/display.c ****   else	clr_dot(n);
 4323              		.loc 1 340 6 is_stmt 0 view .LVU1320
 4324 0000 09B1     		cbz	r1, .L413
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/cc4E4VUn.s 			page 158


 4325              		.loc 1 340 11 is_stmt 1 discriminator 1 view .LVU1321
 4326 0002 FFF7FEBF 		b	set_dot
 4327              	.LVL468:
 4328              	.L413:
 341:src/display.c **** }
 4329              		.loc 1 341 8 view .LVU1322
 4330 0006 FFF7FEBF 		b	clr_dot
 4331              	.LVL469:
 341:src/display.c **** }
 4332              		.loc 1 341 8 is_stmt 0 view .LVU1323
 4333              		.cfi_endproc
 4334              	.LFE7:
 4336 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4337              		.align	1
 4338              		.p2align 2,,3
 4339              		.global	std_round_fix
 4340              		.syntax unified
 4341              		.thumb
 4342              		.thumb_func
 4343              		.fpu fpv4-sp-d16
 4345              	std_round_fix:
 4346              	.LVL470:
 4347              	.LFB24:
1792:src/display.c **** 	decNumber b, c;
 4348              		.loc 1 1792 60 is_stmt 1 view -0
 4349              		.cfi_startproc
 4350              		@ args = 0, pretend = 0, frame = 80
 4351              		@ frame_needed = 0, uses_anonymous_args = 0
1793:src/display.c **** 
 4352              		.loc 1 1793 2 view .LVU1325
1795:src/display.c **** 	b.exponent -= UState.dispdigs;
 4353              		.loc 1 1795 2 view .LVU1326
1792:src/display.c **** 	decNumber b, c;
 4354              		.loc 1 1792 60 is_stmt 0 view .LVU1327
 4355 0000 00B5     		push	{lr}
 4356              		.cfi_def_cfa_offset 4
 4357              		.cfi_offset 14, -4
 4358 0002 95B0     		sub	sp, sp, #84
 4359              		.cfi_def_cfa_offset 88
1792:src/display.c **** 	decNumber b, c;
 4360              		.loc 1 1792 60 view .LVU1328
 4361 0004 0146     		mov	r1, r0
1795:src/display.c **** 	b.exponent -= UState.dispdigs;
 4362              		.loc 1 1795 2 view .LVU1329
 4363 0006 02A8     		add	r0, sp, #8
 4364              	.LVL471:
1792:src/display.c **** 	decNumber b, c;
 4365              		.loc 1 1792 60 view .LVU1330
 4366 0008 0191     		str	r1, [sp, #4]
1795:src/display.c **** 	b.exponent -= UState.dispdigs;
 4367              		.loc 1 1795 2 view .LVU1331
 4368 000a FFF7FEFF 		bl	dn_1
 4369              	.LVL472:
1796:src/display.c **** 	dn_abs(&c, z);
 4370              		.loc 1 1796 2 is_stmt 1 view .LVU1332
1796:src/display.c **** 	dn_abs(&c, z);
 4371              		.loc 1 1796 22 is_stmt 0 view .LVU1333
ARM GAS  /tmp/cc4E4VUn.s 			page 159


 4372 000e 0F4A     		ldr	r2, .L419
1796:src/display.c **** 	dn_abs(&c, z);
 4373              		.loc 1 1796 13 view .LVU1334
 4374 0010 039B     		ldr	r3, [sp, #12]
1796:src/display.c **** 	dn_abs(&c, z);
 4375              		.loc 1 1796 22 view .LVU1335
 4376 0012 1268     		ldr	r2, [r2]
1797:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4377              		.loc 1 1797 2 view .LVU1336
 4378 0014 0199     		ldr	r1, [sp, #4]
1796:src/display.c **** 	dn_abs(&c, z);
 4379              		.loc 1 1796 22 view .LVU1337
 4380 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4381 001a 02F00F02 		and	r2, r2, #15
1796:src/display.c **** 	dn_abs(&c, z);
 4382              		.loc 1 1796 13 view .LVU1338
 4383 001e 9B1A     		subs	r3, r3, r2
1797:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4384              		.loc 1 1797 2 view .LVU1339
 4385 0020 0BA8     		add	r0, sp, #44
1796:src/display.c **** 	dn_abs(&c, z);
 4386              		.loc 1 1796 13 view .LVU1340
 4387 0022 0393     		str	r3, [sp, #12]
1797:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4388              		.loc 1 1797 2 is_stmt 1 view .LVU1341
 4389 0024 FFF7FEFF 		bl	dn_abs
 4390              	.LVL473:
1798:src/display.c **** 	  return MODE_FIX;
 4391              		.loc 1 1798 2 view .LVU1342
1798:src/display.c **** 	  return MODE_FIX;
 4392              		.loc 1 1798 6 is_stmt 0 view .LVU1343
 4393 0028 0BA9     		add	r1, sp, #44
 4394 002a 02A8     		add	r0, sp, #8
 4395 002c FFF7FEFF 		bl	dn_lt
 4396              	.LVL474:
1798:src/display.c **** 	  return MODE_FIX;
 4397              		.loc 1 1798 5 view .LVU1344
 4398 0030 10B9     		cbnz	r0, .L418
1801:src/display.c **** #endif
 4399              		.loc 1 1801 7 view .LVU1345
 4400 0032 15B0     		add	sp, sp, #84
 4401              		.cfi_remember_state
 4402              		.cfi_def_cfa_offset 4
 4403              		@ sp needed
 4404 0034 5DF804FB 		ldr	pc, [sp], #4
 4405              	.LVL475:
 4406              	.L418:
 4407              		.cfi_restore_state
1798:src/display.c **** 	  return MODE_FIX;
 4408              		.loc 1 1798 23 discriminator 1 view .LVU1346
 4409 0038 0549     		ldr	r1, .L419+4
 4410 003a 0BA8     		add	r0, sp, #44
 4411 003c FFF7FEFF 		bl	dn_lt
 4412              	.LVL476:
1799:src/display.c **** 	return MODE_STD;
 4413              		.loc 1 1799 11 discriminator 1 view .LVU1347
 4414 0040 0038     		subs	r0, r0, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 160


 4415 0042 18BF     		it	ne
 4416 0044 0120     		movne	r0, #1
1801:src/display.c **** #endif
 4417              		.loc 1 1801 7 discriminator 1 view .LVU1348
 4418 0046 15B0     		add	sp, sp, #84
 4419              		.cfi_def_cfa_offset 4
 4420              		@ sp needed
 4421 0048 5DF804FB 		ldr	pc, [sp], #4
 4422              	.LVL477:
 4423              	.L420:
1801:src/display.c **** #endif
 4424              		.loc 1 1801 7 discriminator 1 view .LVU1349
 4425              		.align	2
 4426              	.L419:
 4427 004c 00000000 		.word	main_ram
 4428 0050 00000000 		.word	const_1
 4429              		.cfi_endproc
 4430              	.LFE24:
 4432              		.section	.text.set_IO_annunciator,"ax",%progbits
 4433              		.align	1
 4434              		.p2align 2,,3
 4435              		.global	set_IO_annunciator
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4439              		.fpu fpv4-sp-d16
 4441              	set_IO_annunciator:
 4442              	.LFB33:
2566:src/display.c **** #ifndef DM42
 4443              		.loc 1 2566 37 is_stmt 1 view -0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 0
 4446              		@ frame_needed = 0, uses_anonymous_args = 0
2571:src/display.c **** #endif
 4447              		.loc 1 2571 4 view .LVU1351
 4448              	.LVL478:
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4449              		.loc 1 2581 2 view .LVU1352
2566:src/display.c **** #ifndef DM42
 4450              		.loc 1 2566 37 is_stmt 0 view .LVU1353
 4451 0000 10B5     		push	{r4, lr}
 4452              		.cfi_def_cfa_offset 8
 4453              		.cfi_offset 4, -8
 4454              		.cfi_offset 14, -4
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4455              		.loc 1 2581 9 view .LVU1354
 4456 0002 064C     		ldr	r4, .L425
2581:src/display.c **** 	  dot(LIT_EQ, on);
 4457              		.loc 1 2581 5 view .LVU1355
 4458 0004 2368     		ldr	r3, [r4]
 4459 0006 03B9     		cbnz	r3, .L424
2586:src/display.c **** 
 4460              		.loc 1 2586 7 view .LVU1356
 4461 0008 10BD     		pop	{r4, pc}
 4462              	.L424:
 4463              	.LBB389:
 4464              	.LBI389:
ARM GAS  /tmp/cc4E4VUn.s 			page 161


2566:src/display.c **** #ifndef DM42
 4465              		.loc 1 2566 12 is_stmt 1 view .LVU1357
 4466              	.LBB390:
2582:src/display.c **** 	  IoAnnunciator = on;
 4467              		.loc 1 2582 4 view .LVU1358
 4468              	.LVL479:
 4469              	.LBB391:
 4470              	.LBI391:
 339:src/display.c ****   if (on)	set_dot(n);
 4471              		.loc 1 339 6 view .LVU1359
 4472              	.LBB392:
 340:src/display.c ****   else	clr_dot(n);
 4473              		.loc 1 340 3 view .LVU1360
 341:src/display.c **** }
 4474              		.loc 1 341 8 view .LVU1361
 4475 000a 8420     		movs	r0, #132
 4476 000c FFF7FEFF 		bl	clr_dot
 4477              	.LVL480:
 341:src/display.c **** }
 4478              		.loc 1 341 8 is_stmt 0 view .LVU1362
 4479              	.LBE392:
 4480              	.LBE391:
2583:src/display.c **** 	  finish_display(); //LIT_EQ
 4481              		.loc 1 2583 4 is_stmt 1 view .LVU1363
2583:src/display.c **** 	  finish_display(); //LIT_EQ
 4482              		.loc 1 2583 18 is_stmt 0 view .LVU1364
 4483 0010 0023     		movs	r3, #0
 4484 0012 2360     		str	r3, [r4]
2584:src/display.c **** 	}
 4485              		.loc 1 2584 4 is_stmt 1 view .LVU1365
 4486              	.LBE390:
 4487              	.LBE389:
2586:src/display.c **** 
 4488              		.loc 1 2586 7 is_stmt 0 view .LVU1366
 4489 0014 BDE81040 		pop	{r4, lr}
 4490              		.cfi_restore 14
 4491              		.cfi_restore 4
 4492              		.cfi_def_cfa_offset 0
 4493              	.LBB394:
 4494              	.LBB393:
2584:src/display.c **** 	}
 4495              		.loc 1 2584 4 view .LVU1367
 4496 0018 FFF7FEBF 		b	finish_display
 4497              	.LVL481:
 4498              	.L426:
 4499              		.align	2
 4500              	.L425:
 4501 001c 00000000 		.word	IoAnnunciator
 4502              	.LBE393:
 4503              	.LBE394:
 4504              		.cfi_endproc
 4505              	.LFE33:
 4507              		.section	.text.pixel_length,"ax",%progbits
 4508              		.align	1
 4509              		.p2align 2,,3
 4510              		.global	pixel_length
 4511              		.syntax unified
ARM GAS  /tmp/cc4E4VUn.s 			page 162


 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv4-sp-d16
 4516              	pixel_length:
 4517              	.LVL482:
 4518              	.LFB40:
3469:src/display.c **** 
3470:src/display.c **** 
3471:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3472:src/display.c ****        */
3473:src/display.c ****       int pixel_length(const char *s, int smallp)
3474:src/display.c ****       {
 4519              		.loc 1 3474 7 is_stmt 1 view -0
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 0
 4522              		@ frame_needed = 0, uses_anonymous_args = 0
3475:src/display.c **** 	int len = 0;
 4523              		.loc 1 3475 2 view .LVU1369
3476:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4524              		.loc 1 3476 2 view .LVU1370
3474:src/display.c **** 	int len = 0;
 4525              		.loc 1 3474 7 is_stmt 0 view .LVU1371
 4526 0000 70B5     		push	{r4, r5, r6, lr}
 4527              		.cfi_def_cfa_offset 16
 4528              		.cfi_offset 4, -16
 4529              		.cfi_offset 5, -12
 4530              		.cfi_offset 6, -8
 4531              		.cfi_offset 14, -4
3474:src/display.c **** 	int len = 0;
 4532              		.loc 1 3474 7 view .LVU1372
 4533 0002 0446     		mov	r4, r0
3477:src/display.c **** 	while (*s != '\0') {
 4534              		.loc 1 3477 9 view .LVU1373
 4535 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4536              	.LVL483:
3476:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4537              		.loc 1 3476 34 view .LVU1374
 4538 0006 0E1E     		subs	r6, r1, #0
 4539 0008 18BF     		it	ne
 4540 000a 4FF48076 		movne	r6, #256
 4541              	.LVL484:
 4542              		.loc 1 3477 2 is_stmt 1 view .LVU1375
 4543              		.loc 1 3477 8 view .LVU1376
 4544 000e A0B1     		cbz	r0, .L434
3475:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4545              		.loc 1 3475 6 is_stmt 0 view .LVU1377
 4546 0010 0025     		movs	r5, #0
 4547 0012 06E0     		b	.L432
 4548              	.LVL485:
 4549              	.L430:
3478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3479:src/display.c **** 	  if (s[0] == '\007') {
3480:src/display.c **** 	    len += s[1] & 0x1F;
3481:src/display.c **** 	    s += 3;
3482:src/display.c **** 	    continue;
3483:src/display.c **** 	  }
3484:src/display.c **** #endif
ARM GAS  /tmp/cc4E4VUn.s 			page 163


3485:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4550              		.loc 1 3485 11 view .LVU1378
 4551 0014 3044     		add	r0, r0, r6
 4552 0016 FFF7FEFF 		bl	charlengths
 4553              	.LVL486:
 4554              		.loc 1 3485 42 view .LVU1379
 4555 001a 0134     		adds	r4, r4, #1
 4556              	.LVL487:
 4557              		.loc 1 3485 8 view .LVU1380
 4558 001c 0544     		add	r5, r5, r0
 4559              	.LVL488:
3477:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4560              		.loc 1 3477 8 is_stmt 1 view .LVU1381
3477:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4561              		.loc 1 3477 9 is_stmt 0 view .LVU1382
 4562 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3477:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4563              		.loc 1 3477 8 view .LVU1383
 4564 0020 48B1     		cbz	r0, .L427
 4565              	.LVL489:
 4566              	.L432:
3479:src/display.c **** 	    len += s[1] & 0x1F;
 4567              		.loc 1 3479 4 is_stmt 1 view .LVU1384
 4568              		.loc 1 3485 4 view .LVU1385
3479:src/display.c **** 	    len += s[1] & 0x1F;
 4569              		.loc 1 3479 7 is_stmt 0 view .LVU1386
 4570 0022 0728     		cmp	r0, #7
 4571 0024 F6D1     		bne	.L430
3480:src/display.c **** 	    s += 3;
 4572              		.loc 1 3480 6 is_stmt 1 view .LVU1387
3480:src/display.c **** 	    s += 3;
 4573              		.loc 1 3480 18 is_stmt 0 view .LVU1388
 4574 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3477:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4575              		.loc 1 3477 9 view .LVU1389
 4576 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3480:src/display.c **** 	    s += 3;
 4577              		.loc 1 3480 18 view .LVU1390
 4578 002a 03F01F03 		and	r3, r3, #31
3481:src/display.c **** 	    continue;
 4579              		.loc 1 3481 8 view .LVU1391
 4580 002e 0334     		adds	r4, r4, #3
 4581              	.LVL490:
3480:src/display.c **** 	    s += 3;
 4582              		.loc 1 3480 10 view .LVU1392
 4583 0030 1D44     		add	r5, r5, r3
 4584              	.LVL491:
3481:src/display.c **** 	    continue;
 4585              		.loc 1 3481 6 is_stmt 1 view .LVU1393
3482:src/display.c **** 	  }
 4586              		.loc 1 3482 6 view .LVU1394
3477:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4587              		.loc 1 3477 8 view .LVU1395
 4588 0032 0028     		cmp	r0, #0
 4589 0034 F5D1     		bne	.L432
 4590              	.L427:
3486:src/display.c **** 	}
ARM GAS  /tmp/cc4E4VUn.s 			page 164


3487:src/display.c **** 	return len;
3488:src/display.c ****       }
 4591              		.loc 1 3488 7 is_stmt 0 view .LVU1396
 4592 0036 2846     		mov	r0, r5
 4593 0038 70BD     		pop	{r4, r5, r6, pc}
 4594              	.LVL492:
 4595              	.L434:
3475:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4596              		.loc 1 3475 6 view .LVU1397
 4597 003a 0546     		mov	r5, r0
3487:src/display.c ****       }
 4598              		.loc 1 3487 2 is_stmt 1 view .LVU1398
 4599              		.loc 1 3488 7 is_stmt 0 view .LVU1399
 4600 003c 2846     		mov	r0, r5
 4601 003e 70BD     		pop	{r4, r5, r6, pc}
 4602              		.loc 1 3488 7 view .LVU1400
 4603              		.cfi_endproc
 4604              	.LFE40:
 4606              		.section	.text.set_status,"ax",%progbits
 4607              		.align	1
 4608              		.p2align 2,,3
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu fpv4-sp-d16
 4614              	set_status:
 4615              	.LVL493:
 4616              	.LFB43:
3489:src/display.c **** 
3490:src/display.c **** 
3491:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3492:src/display.c ****        * If this is larger than the display, return true.
3493:src/display.c ****        */
3494:src/display.c ****       static int string_too_large(const char *s) {
3495:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3496:src/display.c ****       }
3497:src/display.c ****       static int string_too_large_top(const char *s) {
3498:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3499:src/display.c ****       }
3500:src/display.c **** 
3501:src/display.c **** 
3502:src/display.c ****       /* Display the given string on the screen.
3503:src/display.c ****        */
3504:src/display.c ****       static void set_status(const char *str) {
 4617              		.loc 1 3504 47 is_stmt 1 view -0
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 0
 4620              		@ frame_needed = 0, uses_anonymous_args = 0
3505:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4621              		.loc 1 3505 2 view .LVU1402
3504:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4622              		.loc 1 3504 47 is_stmt 0 view .LVU1403
 4623 0000 10B5     		push	{r4, lr}
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 4, -8
 4626              		.cfi_offset 14, -4
 4627              		.loc 1 3505 24 view .LVU1404
ARM GAS  /tmp/cc4E4VUn.s 			page 165


 4628 0002 0D4B     		ldr	r3, .L442
 4629              		.loc 1 3505 2 view .LVU1405
 4630 0004 93F91630 		ldrsb	r3, [r3, #22]
 4631 0008 002B     		cmp	r3, #0
3504:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4632              		.loc 1 3504 47 view .LVU1406
 4633 000a 82B0     		sub	sp, sp, #8
 4634              		.cfi_def_cfa_offset 16
3504:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4635              		.loc 1 3504 47 view .LVU1407
 4636 000c 0446     		mov	r4, r0
 4637              		.loc 1 3505 2 view .LVU1408
 4638 000e 0ADA     		bge	.L441
 4639 0010 0121     		movs	r1, #1
 4640              	.LVL494:
 4641              	.L438:
 4642              	.LBB395:
 4643              	.LBI395:
3346:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4644              		.loc 1 3346 19 is_stmt 1 discriminator 6 view .LVU1409
 4645              	.LBB396:
3347:src/display.c ****       }
 4646              		.loc 1 3347 2 discriminator 6 view .LVU1410
 4647 0012 40F24A23 		movw	r3, #586
 4648 0016 0093     		str	r3, [sp]
 4649 0018 2046     		mov	r0, r4
 4650 001a 8E23     		movs	r3, #142
 4651 001c 4A22     		movs	r2, #74
 4652 001e FFF7FEFF 		bl	s_s_sized
 4653              	.LVL495:
3347:src/display.c ****       }
 4654              		.loc 1 3347 2 is_stmt 0 discriminator 6 view .LVU1411
 4655              	.LBE396:
 4656              	.LBE395:
3506:src/display.c ****       }
 4657              		.loc 1 3506 7 discriminator 6 view .LVU1412
 4658 0022 02B0     		add	sp, sp, #8
 4659              		.cfi_remember_state
 4660              		.cfi_def_cfa_offset 8
 4661              		@ sp needed
 4662 0024 10BD     		pop	{r4, pc}
 4663              	.LVL496:
 4664              	.L441:
 4665              		.cfi_restore_state
 4666              	.LBB397:
 4667              	.LBI397:
3494:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4668              		.loc 1 3494 18 is_stmt 1 view .LVU1413
 4669              	.LBB398:
3495:src/display.c ****       }
 4670              		.loc 1 3495 2 view .LVU1414
3495:src/display.c ****       }
 4671              		.loc 1 3495 9 is_stmt 0 view .LVU1415
 4672 0026 0021     		movs	r1, #0
 4673 0028 FFF7FEFF 		bl	pixel_length
 4674              	.LVL497:
3495:src/display.c ****       }
ARM GAS  /tmp/cc4E4VUn.s 			page 166


 4675              		.loc 1 3495 9 view .LVU1416
 4676              	.LBE398:
 4677              	.LBE397:
3505:src/display.c ****       }
 4678              		.loc 1 3505 2 view .LVU1417
 4679 002c 4B28     		cmp	r0, #75
 4680 002e D4BF     		ite	le
 4681 0030 0021     		movle	r1, #0
 4682 0032 0121     		movgt	r1, #1
 4683 0034 EDE7     		b	.L438
 4684              	.L443:
 4685 0036 00BF     		.align	2
 4686              	.L442:
 4687 0038 00000000 		.word	StateWhileOn
 4688              		.cfi_endproc
 4689              	.LFE43:
 4691              		.section	.text.set_x_dn,"ax",%progbits
 4692              		.align	1
 4693              		.p2align 2,,3
 4694              		.global	set_x_dn
 4695              		.syntax unified
 4696              		.thumb
 4697              		.thumb_func
 4698              		.fpu fpv4-sp-d16
 4700              	set_x_dn:
 4701              	.LVL498:
 4702              	.LFB27:
1939:src/display.c **** 	char x[50], *obp = x;
 4703              		.loc 1 1939 67 is_stmt 1 view -0
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 136
 4706              		@ frame_needed = 0, uses_anonymous_args = 0
1940:src/display.c **** 	int odig = 0;
 4707              		.loc 1 1940 2 view .LVU1419
1939:src/display.c **** 	char x[50], *obp = x;
 4708              		.loc 1 1939 67 is_stmt 0 view .LVU1420
 4709 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4710              		.cfi_def_cfa_offset 36
 4711              		.cfi_offset 4, -36
 4712              		.cfi_offset 5, -32
 4713              		.cfi_offset 6, -28
 4714              		.cfi_offset 7, -24
 4715              		.cfi_offset 8, -20
 4716              		.cfi_offset 9, -16
 4717              		.cfi_offset 10, -12
 4718              		.cfi_offset 11, -8
 4719              		.cfi_offset 14, -4
1956:src/display.c **** 	int mode = UState.dispmode;
 4720              		.loc 1 1956 11 view .LVU1421
 4721 0004 C84B     		ldr	r3, .L679
 4722 0006 1B68     		ldr	r3, [r3]
1939:src/display.c **** 	char x[50], *obp = x;
 4723              		.loc 1 1939 67 view .LVU1422
 4724 0008 A3B0     		sub	sp, sp, #140
 4725              		.cfi_def_cfa_offset 176
 4726              	.LVL499:
1941:src/display.c **** 	int show_exp = 0;
ARM GAS  /tmp/cc4E4VUn.s 			page 167


 4727              		.loc 1 1941 2 is_stmt 1 view .LVU1423
1942:src/display.c **** 	int j;
 4728              		.loc 1 1942 2 view .LVU1424
1943:src/display.c **** 	char mantissa[64];
 4729              		.loc 1 1943 2 view .LVU1425
1944:src/display.c **** 	int exp = 0;
 4730              		.loc 1 1944 2 view .LVU1426
1945:src/display.c **** 	char *p = mantissa;
 4731              		.loc 1 1945 2 view .LVU1427
1946:src/display.c **** 	char *r;
 4732              		.loc 1 1946 2 view .LVU1428
1947:src/display.c **** 	const char *q;
 4733              		.loc 1 1947 2 view .LVU1429
1948:src/display.c **** 	int count, i;
 4734              		.loc 1 1948 2 view .LVU1430
1949:src/display.c **** 	int extra_digits = 0;
 4735              		.loc 1 1949 2 view .LVU1431
1950:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4736              		.loc 1 1950 2 view .LVU1432
1956:src/display.c **** 	int mode = UState.dispmode;
 4737              		.loc 1 1956 2 view .LVU1433
1956:src/display.c **** 	int mode = UState.dispmode;
 4738              		.loc 1 1956 17 is_stmt 0 view .LVU1434
 4739 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1957:src/display.c **** #endif
 4740              		.loc 1 1957 19 view .LVU1435
 4741 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1939:src/display.c **** 	char x[50], *obp = x;
 4742              		.loc 1 1939 67 view .LVU1436
 4743 0012 0092     		str	r2, [sp]
 4744 0014 0C46     		mov	r4, r1
 4745 0016 0646     		mov	r6, r0
1956:src/display.c **** 	int mode = UState.dispmode;
 4746              		.loc 1 1956 17 view .LVU1437
 4747 0018 05F00F05 		and	r5, r5, #15
 4748              	.LVL500:
1957:src/display.c **** #endif
 4749              		.loc 1 1957 2 is_stmt 1 view .LVU1438
1957:src/display.c **** #endif
 4750              		.loc 1 1957 19 is_stmt 0 view .LVU1439
 4751 001c BF09     		lsrs	r7, r7, #6
 4752              	.LVL501:
1959:src/display.c **** 	int negative = 0;
 4753              		.loc 1 1959 2 is_stmt 1 view .LVU1440
1960:src/display.c **** 	int trimzeros = 0;
 4754              		.loc 1 1960 2 view .LVU1441
1961:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4755              		.loc 1 1961 2 view .LVU1442
1963:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4756              		.loc 1 1963 2 view .LVU1443
1972:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4757              		.loc 1 1972 2 view .LVU1444
 4758 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4759              	.LVL502:
1974:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4760              		.loc 1 1974 2 view .LVU1445
1974:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
ARM GAS  /tmp/cc4E4VUn.s 			page 168


 4761              		.loc 1 1974 5 is_stmt 0 view .LVU1446
 4762 0022 002C     		cmp	r4, #0
 4763 0024 00F08A81 		beq	.L445
 4764              	.L448:
1999:src/display.c **** 	  return;
 4765              		.loc 1 1999 2 is_stmt 1 view .LVU1447
1999:src/display.c **** 	  return;
 4766              		.loc 1 1999 6 is_stmt 0 view .LVU1448
 4767 0028 2146     		mov	r1, r4
 4768 002a 06F10800 		add	r0, r6, #8
 4769 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4770              	.LVL503:
1999:src/display.c **** 	  return;
 4771              		.loc 1 1999 5 view .LVU1449
 4772 0032 8346     		mov	fp, r0
 4773 0034 0028     		cmp	r0, #0
 4774 0036 40F06F81 		bne	.L444
2002:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4775              		.loc 1 2002 2 is_stmt 1 view .LVU1450
2002:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4776              		.loc 1 2002 12 is_stmt 0 view .LVU1451
 4777 003a DFF8F092 		ldr	r9, .L679+4
2002:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4778              		.loc 1 2002 5 view .LVU1452
 4779 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4780 0042 012B     		cmp	r3, #1
 4781 0044 00F0AF82 		beq	.L660
1945:src/display.c **** 	char *p = mantissa;
 4782              		.loc 1 1945 6 view .LVU1453
 4783 0048 0190     		str	r0, [sp, #4]
 4784              	.LVL504:
 4785              	.L451:
2008:src/display.c **** 
 4786              		.loc 1 2008 2 is_stmt 1 view .LVU1454
 4787 004a 0DF11408 		add	r8, sp, #20
 4788              	.LVL505:
2008:src/display.c **** 
 4789              		.loc 1 2008 2 is_stmt 0 view .LVU1455
 4790 004e 4046     		mov	r0, r8
 4791 0050 3222     		movs	r2, #50
 4792 0052 0021     		movs	r1, #0
 4793 0054 FFF7FEFF 		bl	xset
 4794              	.LVL506:
2010:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4795              		.loc 1 2010 2 is_stmt 1 view .LVU1456
2010:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4796              		.loc 1 2010 6 is_stmt 0 view .LVU1457
 4797 0058 3046     		mov	r0, r6
 4798 005a FFF7FEFF 		bl	dn_eq0
 4799              	.LVL507:
2010:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4800              		.loc 1 2010 5 view .LVU1458
 4801 005e 0028     		cmp	r0, #0
 4802 0060 00F05D81 		beq	.L452
2011:src/display.c **** 	    x[0] = '-';
 4803              		.loc 1 2011 4 is_stmt 1 view .LVU1459
2011:src/display.c **** 	    x[0] = '-';
ARM GAS  /tmp/cc4E4VUn.s 			page 169


 4804              		.loc 1 2011 7 is_stmt 0 view .LVU1460
 4805 0064 96F90830 		ldrsb	r3, [r6, #8]
 4806 0068 002B     		cmp	r3, #0
 4807 006a C0F2C182 		blt	.L661
 4808              	.L453:
2015:src/display.c **** 	} else
 4809              		.loc 1 2015 6 is_stmt 1 view .LVU1461
2015:src/display.c **** 	} else
 4810              		.loc 1 2015 11 is_stmt 0 view .LVU1462
 4811 006e 3023     		movs	r3, #48
 4812 0070 8DF81430 		strb	r3, [sp, #20]
 4813              	.L454:
2019:src/display.c **** 	  show_x(x, exp);
 4814              		.loc 1 2019 2 is_stmt 1 view .LVU1463
2019:src/display.c **** 	  show_x(x, exp);
 4815              		.loc 1 2019 12 is_stmt 0 view .LVU1464
 4816 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
2019:src/display.c **** 	  show_x(x, exp);
 4817              		.loc 1 2019 5 view .LVU1465
 4818 0078 BAF1010F 		cmp	r10, #1
 4819 007c 00F0F082 		beq	.L662
2042:src/display.c **** 	  mode = std_round_fix(z);
 4820              		.loc 1 2042 2 is_stmt 1 view .LVU1466
2042:src/display.c **** 	  mode = std_round_fix(z);
 4821              		.loc 1 2042 5 is_stmt 0 view .LVU1467
 4822 0080 002F     		cmp	r7, #0
 4823 0082 00F0FD81 		beq	.L663
2046:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4824              		.loc 1 2046 19 view .LVU1468
 4825 0086 009B     		ldr	r3, [sp]
 4826 0088 1B68     		ldr	r3, [r3]
2046:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4827              		.loc 1 2046 12 view .LVU1469
 4828 008a AB42     		cmp	r3, r5
1956:src/display.c **** 	int mode = UState.dispmode;
 4829              		.loc 1 1956 6 view .LVU1470
 4830 008c AA46     		mov	r10, r5
2046:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4831              		.loc 1 2046 9 is_stmt 1 view .LVU1471
2048:src/display.c **** #endif
 4832              		.loc 1 2048 4 view .LVU1472
2048:src/display.c **** #endif
 4833              		.loc 1 2048 7 is_stmt 0 view .LVU1473
 4834 008e D8BF     		it	le
 4835 0090 03F1FF3A 		addle	r10, r3, #-1
1961:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4836              		.loc 1 1961 6 view .LVU1474
 4837 0094 0023     		movs	r3, #0
 4838 0096 0193     		str	r3, [sp, #4]
 4839              	.LVL508:
 4840              	.L467:
2051:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4841              		.loc 1 2051 2 is_stmt 1 view .LVU1475
 4842 0098 0DF14809 		add	r9, sp, #72
 4843              	.LVL509:
2051:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4844              		.loc 1 2051 2 is_stmt 0 view .LVU1476
ARM GAS  /tmp/cc4E4VUn.s 			page 170


 4845 009c 3021     		movs	r1, #48
 4846 009e 4846     		mov	r0, r9
 4847 00a0 3F22     		movs	r2, #63
 4848 00a2 FFF7FEFF 		bl	xset
 4849              	.LVL510:
2052:src/display.c **** 
 4850              		.loc 1 2052 2 is_stmt 1 view .LVU1477
2052:src/display.c **** 
 4851              		.loc 1 2052 31 is_stmt 0 view .LVU1478
 4852 00a6 0023     		movs	r3, #0
2054:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4853              		.loc 1 2054 6 view .LVU1479
 4854 00a8 4521     		movs	r1, #69
 4855 00aa 4046     		mov	r0, r8
2052:src/display.c **** 
 4856              		.loc 1 2052 31 view .LVU1480
 4857 00ac 8DF88730 		strb	r3, [sp, #135]
2054:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4858              		.loc 1 2054 2 is_stmt 1 view .LVU1481
2054:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4859              		.loc 1 2054 6 is_stmt 0 view .LVU1482
 4860 00b0 FFF7FEFF 		bl	find_char
 4861              	.LVL511:
2063:src/display.c **** 	else exp = s_to_i(q+1);
 4862              		.loc 1 2063 2 is_stmt 1 view .LVU1483
2063:src/display.c **** 	else exp = s_to_i(q+1);
 4863              		.loc 1 2063 5 is_stmt 0 view .LVU1484
 4864 00b4 0028     		cmp	r0, #0
 4865 00b6 00F05C81 		beq	.L568
2064:src/display.c **** #endif
 4866              		.loc 1 2064 7 is_stmt 1 view .LVU1485
2064:src/display.c **** #endif
 4867              		.loc 1 2064 13 is_stmt 0 view .LVU1486
 4868 00ba 0130     		adds	r0, r0, #1
 4869              	.LVL512:
2064:src/display.c **** #endif
 4870              		.loc 1 2064 13 view .LVU1487
 4871 00bc FFF7FEFF 		bl	s_to_i
 4872              	.LVL513:
2064:src/display.c **** #endif
 4873              		.loc 1 2064 13 view .LVU1488
 4874 00c0 0546     		mov	r5, r0
 4875              	.LVL514:
 4876              	.L468:
2068:src/display.c **** 	if (!res) {
 4877              		.loc 1 2068 2 is_stmt 1 view .LVU1489
2068:src/display.c **** 	if (!res) {
 4878              		.loc 1 2068 12 view .LVU1490
2068:src/display.c **** 	if (!res) {
 4879              		.loc 1 2068 2 is_stmt 0 view .LVU1491
 4880 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4881 00c6 202B     		cmp	r3, #32
2068:src/display.c **** 	if (!res) {
 4882              		.loc 1 2068 8 view .LVU1492
 4883 00c8 4646     		mov	r6, r8
 4884              	.LVL515:
2068:src/display.c **** 	if (!res) {
ARM GAS  /tmp/cc4E4VUn.s 			page 171


 4885              		.loc 1 2068 2 view .LVU1493
 4886 00ca 03D1     		bne	.L469
 4887              	.LVL516:
 4888              	.L470:
2068:src/display.c **** 	if (!res) {
 4889              		.loc 1 2068 27 is_stmt 1 discriminator 3 view .LVU1494
2068:src/display.c **** 	if (!res) {
 4890              		.loc 1 2068 23 discriminator 3 view .LVU1495
2068:src/display.c **** 	if (!res) {
 4891              		.loc 1 2068 12 discriminator 3 view .LVU1496
2068:src/display.c **** 	if (!res) {
 4892              		.loc 1 2068 2 is_stmt 0 discriminator 3 view .LVU1497
 4893 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4894              	.LVL517:
2068:src/display.c **** 	if (!res) {
 4895              		.loc 1 2068 2 discriminator 3 view .LVU1498
 4896 00d0 202B     		cmp	r3, #32
 4897 00d2 FBD0     		beq	.L470
 4898              	.LVL518:
 4899              	.L469:
2069:src/display.c **** 	  CLR_EXP_SIGN;
 4900              		.loc 1 2069 2 is_stmt 1 view .LVU1499
2069:src/display.c **** 	  CLR_EXP_SIGN;
 4901              		.loc 1 2069 5 is_stmt 0 view .LVU1500
 4902 00d4 002C     		cmp	r4, #0
 4903 00d6 00F09682 		beq	.L664
 4904              	.L471:
2073:src/display.c **** 	  negative = 1;
 4905              		.loc 1 2073 2 is_stmt 1 view .LVU1501
2073:src/display.c **** 	  negative = 1;
 4906              		.loc 1 2073 6 is_stmt 0 view .LVU1502
 4907 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2073:src/display.c **** 	  negative = 1;
 4908              		.loc 1 2073 5 view .LVU1503
 4909 00dc 2D2B     		cmp	r3, #45
 4910 00de 00F0CA81 		beq	.L665
2076:src/display.c **** 	  q++;
 4911              		.loc 1 2076 9 is_stmt 1 view .LVU1504
2076:src/display.c **** 	  q++;
 4912              		.loc 1 2076 12 is_stmt 0 view .LVU1505
 4913 00e2 2B2B     		cmp	r3, #43
 4914 00e4 00F06E82 		beq	.L666
1960:src/display.c **** 	int trimzeros = 0;
 4915              		.loc 1 1960 6 view .LVU1506
 4916 00e8 4FF0000E 		mov	lr, #0
 4917              	.LVL519:
 4918              	.L473:
2078:src/display.c **** 	if (*q == '.') {
 4919              		.loc 1 2078 9 is_stmt 1 discriminator 1 view .LVU1507
2078:src/display.c **** 	if (*q == '.') {
 4920              		.loc 1 2078 2 is_stmt 0 discriminator 1 view .LVU1508
 4921 00ec 302B     		cmp	r3, #48
 4922 00ee 03D1     		bne	.L475
 4923              	.LVL520:
 4924              	.L474:
2078:src/display.c **** 	if (*q == '.') {
 4925              		.loc 1 2078 24 is_stmt 1 discriminator 2 view .LVU1509
ARM GAS  /tmp/cc4E4VUn.s 			page 172


2078:src/display.c **** 	if (*q == '.') {
 4926              		.loc 1 2078 20 discriminator 2 view .LVU1510
2078:src/display.c **** 	if (*q == '.') {
 4927              		.loc 1 2078 9 discriminator 2 view .LVU1511
 4928 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4929              	.LVL521:
2078:src/display.c **** 	if (*q == '.') {
 4930              		.loc 1 2078 2 is_stmt 0 discriminator 2 view .LVU1512
 4931 00f4 302B     		cmp	r3, #48
 4932 00f6 FBD0     		beq	.L474
 4933              	.LVL522:
 4934              	.L475:
2079:src/display.c **** 	  do
 4935              		.loc 1 2079 2 is_stmt 1 view .LVU1513
2079:src/display.c **** 	  do
 4936              		.loc 1 2079 5 is_stmt 0 view .LVU1514
 4937 00f8 2E2B     		cmp	r3, #46
 4938 00fa 00F0A681 		beq	.L667
2086:src/display.c **** 	    *p++ = *q++;
 4939              		.loc 1 2086 4 is_stmt 1 view .LVU1515
2086:src/display.c **** 	    *p++ = *q++;
 4940              		.loc 1 2086 7 is_stmt 0 view .LVU1516
 4941 00fe A3F13002 		sub	r2, r3, #48
 4942 0102 092A     		cmp	r2, #9
2087:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4943              		.loc 1 2087 6 is_stmt 1 view .LVU1517
 4944              	.LVL523:
2087:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4945              		.loc 1 2087 15 is_stmt 0 view .LVU1518
 4946 0104 9CBF     		itt	ls
 4947 0106 0136     		addls	r6, r6, #1
 4948              	.LVL524:
2087:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4949              		.loc 1 2087 11 view .LVU1519
 4950 0108 8DF84830 		strbls	r3, [sp, #72]
2088:src/display.c **** 	    *p++ = *q++;
 4951              		.loc 1 2088 11 view .LVU1520
 4952 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2088:src/display.c **** 	    *p++ = *q++;
 4953              		.loc 1 2088 10 view .LVU1521
 4954 010e A2F13003 		sub	r3, r2, #48
2087:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4955              		.loc 1 2087 8 view .LVU1522
 4956 0112 94BF     		ite	ls
 4957 0114 0DF14901 		addls	r1, sp, #73
1946:src/display.c **** 	char *r;
 4958              		.loc 1 1946 8 view .LVU1523
 4959 0118 4946     		movhi	r1, r9
 4960              	.LVL525:
2088:src/display.c **** 	    *p++ = *q++;
 4961              		.loc 1 2088 10 is_stmt 1 view .LVU1524
 4962 011a 092B     		cmp	r3, #9
 4963 011c 0CD8     		bhi	.L481
 4964 011e A81B     		subs	r0, r5, r6
 4965 0120 731C     		adds	r3, r6, #1
 4966              	.L482:
 4967              	.LVL526:
ARM GAS  /tmp/cc4E4VUn.s 			page 173


2089:src/display.c **** 	    exp++;
 4968              		.loc 1 2089 6 view .LVU1525
2089:src/display.c **** 	    exp++;
 4969              		.loc 1 2089 11 is_stmt 0 view .LVU1526
 4970 0122 01F8012B 		strb	r2, [r1], #1
 4971              	.LVL527:
2089:src/display.c **** 	    exp++;
 4972              		.loc 1 2089 15 view .LVU1527
 4973 0126 1E46     		mov	r6, r3
 4974              	.LVL528:
2090:src/display.c **** 	  }
 4975              		.loc 1 2090 6 is_stmt 1 view .LVU1528
 4976 0128 C518     		adds	r5, r0, r3
 4977              	.LVL529:
2088:src/display.c **** 	    *p++ = *q++;
 4978              		.loc 1 2088 10 view .LVU1529
2088:src/display.c **** 	    *p++ = *q++;
 4979              		.loc 1 2088 11 is_stmt 0 view .LVU1530
 4980 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4981              	.LVL530:
2088:src/display.c **** 	    *p++ = *q++;
 4982              		.loc 1 2088 10 view .LVU1531
 4983 012e A2F1300C 		sub	ip, r2, #48
 4984 0132 BCF1090F 		cmp	ip, #9
 4985 0136 F4D9     		bls	.L482
 4986              	.LVL531:
 4987              	.L481:
2092:src/display.c **** 	    q++;
 4988              		.loc 1 2092 4 is_stmt 1 view .LVU1532
2092:src/display.c **** 	    q++;
 4989              		.loc 1 2092 7 is_stmt 0 view .LVU1533
 4990 0138 2E2A     		cmp	r2, #46
 4991 013a 00F04882 		beq	.L668
 4992              	.LVL532:
 4993              	.L478:
2099:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4994              		.loc 1 2099 2 is_stmt 1 view .LVU1534
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4995              		.loc 1 2100 12 is_stmt 0 view .LVU1535
 4996 013e 009B     		ldr	r3, [sp]
2099:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4997              		.loc 1 2099 5 view .LVU1536
 4998 0140 012F     		cmp	r7, #1
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4999              		.loc 1 2100 12 view .LVU1537
 5000 0142 1E68     		ldr	r6, [r3]
2099:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5001              		.loc 1 2099 5 view .LVU1538
 5002 0144 00F06F81 		beq	.L669
 5003 0148 0022     		movs	r2, #0
 5004              	.LVL533:
 5005              	.L484:
2113:src/display.c **** 	if (*p >= '5') {	// Round up
 5006              		.loc 1 2113 2 is_stmt 1 view .LVU1539
2113:src/display.c **** 	if (*p >= '5') {	// Round up
 5007              		.loc 1 2113 20 is_stmt 0 view .LVU1540
 5008 014a 5244     		add	r2, r2, r10
ARM GAS  /tmp/cc4E4VUn.s 			page 174


2113:src/display.c **** 	if (*p >= '5') {	// Round up
 5009              		.loc 1 2113 35 view .LVU1541
 5010 014c 501C     		adds	r0, r2, #1
2113:src/display.c **** 	if (*p >= '5') {	// Round up
 5011              		.loc 1 2113 4 view .LVU1542
 5012 014e 09EB0003 		add	r3, r9, r0
 5013              	.LVL534:
2114:src/display.c **** 	  *p = '0';
 5014              		.loc 1 2114 2 is_stmt 1 view .LVU1543
2114:src/display.c **** 	  *p = '0';
 5015              		.loc 1 2114 6 is_stmt 0 view .LVU1544
 5016 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2114:src/display.c **** 	  *p = '0';
 5017              		.loc 1 2114 5 view .LVU1545
 5018 0156 3429     		cmp	r1, #52
 5019 0158 21D9     		bls	.L488
2115:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5020              		.loc 1 2115 4 is_stmt 1 view .LVU1546
2115:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5021              		.loc 1 2115 7 is_stmt 0 view .LVU1547
 5022 015a 3021     		movs	r1, #48
 5023 015c 09F80010 		strb	r1, [r9, r0]
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5024              		.loc 1 2116 4 is_stmt 1 view .LVU1548
 5025              	.LVL535:
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5026              		.loc 1 2116 23 view .LVU1549
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2116 4 is_stmt 0 view .LVU1550
 5028 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 5029 0164 3929     		cmp	r1, #57
 5030 0166 40F0A683 		bne	.L489
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5031              		.loc 1 2116 11 view .LVU1551
 5032 016a 4946     		mov	r1, r9
 5033              	.LVL536:
 5034              	.L490:
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5035              		.loc 1 2116 38 is_stmt 1 discriminator 3 view .LVU1552
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5036              		.loc 1 2116 34 discriminator 3 view .LVU1553
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5037              		.loc 1 2116 23 discriminator 3 view .LVU1554
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5038              		.loc 1 2116 4 is_stmt 0 discriminator 3 view .LVU1555
 5039 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 5040              	.LVL537:
2116:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5041              		.loc 1 2116 4 discriminator 3 view .LVU1556
 5042 0170 BCF1390F 		cmp	ip, #57
 5043 0174 FAD0     		beq	.L490
2117:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5044              		.loc 1 2117 4 is_stmt 1 view .LVU1557
2117:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5045              		.loc 1 2117 7 is_stmt 0 view .LVU1558
 5046 0176 8B42     		cmp	r3, r1
 5047 0178 00F0FD80 		beq	.L670
ARM GAS  /tmp/cc4E4VUn.s 			page 175


 5048              	.LVL538:
 5049              	.L560:
2126:src/display.c **** 	      *p = '0';
 5050              		.loc 1 2126 12 is_stmt 1 view .LVU1559
2126:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2126 13 is_stmt 0 view .LVU1560
 5052 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2126:src/display.c **** 	      *p = '0';
 5053              		.loc 1 2126 12 view .LVU1561
 5054 0180 3929     		cmp	r1, #57
 5055 0182 4A44     		add	r2, r2, r9
 5056              	.LVL539:
2126:src/display.c **** 	      *p = '0';
 5057              		.loc 1 2126 12 view .LVU1562
 5058 0184 07D1     		bne	.L493
2127:src/display.c **** 	    (*p)++;
 5059              		.loc 1 2127 11 view .LVU1563
 5060 0186 4FF0300C 		mov	ip, #48
 5061              	.L492:
2127:src/display.c **** 	    (*p)++;
 5062              		.loc 1 2127 8 is_stmt 1 view .LVU1564
2127:src/display.c **** 	    (*p)++;
 5063              		.loc 1 2127 11 is_stmt 0 view .LVU1565
 5064 018a 82F800C0 		strb	ip, [r2]
2126:src/display.c **** 	      *p = '0';
 5065              		.loc 1 2126 12 is_stmt 1 view .LVU1566
 5066              	.LVL540:
2126:src/display.c **** 	      *p = '0';
 5067              		.loc 1 2126 13 is_stmt 0 view .LVU1567
 5068 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5069              	.LVL541:
2126:src/display.c **** 	      *p = '0';
 5070              		.loc 1 2126 12 view .LVU1568
 5071 0192 3929     		cmp	r1, #57
 5072 0194 F9D0     		beq	.L492
 5073              	.L493:
2128:src/display.c **** 	  }
 5074              		.loc 1 2128 6 is_stmt 1 view .LVU1569
2128:src/display.c **** 	  }
 5075              		.loc 1 2128 10 is_stmt 0 view .LVU1570
 5076 0196 0131     		adds	r1, r1, #1
 5077 0198 1170     		strb	r1, [r2]
 5078              	.LVL542:
 5079              	.L657:
2128:src/display.c **** 	  }
 5080              		.loc 1 2128 10 view .LVU1571
 5081 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5082              	.L488:
2133:src/display.c **** 
 5083              		.loc 1 2133 2 is_stmt 1 view .LVU1572
 5084              	.LVL543:
2133:src/display.c **** 
 5085              		.loc 1 2133 45 view .LVU1573
2133:src/display.c **** 
 5086              		.loc 1 2133 2 is_stmt 0 view .LVU1574
 5087 019e 29B1     		cbz	r1, .L499
 5088              	.LVL544:
ARM GAS  /tmp/cc4E4VUn.s 			page 176


 5089              	.L559:
2133:src/display.c **** 
 5090              		.loc 1 2133 62 view .LVU1575
 5091 01a0 3021     		movs	r1, #48
 5092              	.L500:
2133:src/display.c **** 
 5093              		.loc 1 2133 68 is_stmt 1 discriminator 3 view .LVU1576
2133:src/display.c **** 
 5094              		.loc 1 2133 57 discriminator 3 view .LVU1577
 5095              	.LVL545:
2133:src/display.c **** 
 5096              		.loc 1 2133 62 is_stmt 0 discriminator 3 view .LVU1578
 5097 01a2 03F8011B 		strb	r1, [r3], #1
 5098              	.LVL546:
2133:src/display.c **** 
 5099              		.loc 1 2133 45 is_stmt 1 discriminator 3 view .LVU1579
2133:src/display.c **** 
 5100              		.loc 1 2133 2 is_stmt 0 discriminator 3 view .LVU1580
 5101 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5102 01a8 002A     		cmp	r2, #0
 5103 01aa FAD1     		bne	.L500
 5104              	.L499:
2135:src/display.c **** 	switch (mode) {
 5105              		.loc 1 2135 2 is_stmt 1 view .LVU1581
 5106              	.LVL547:
2136:src/display.c **** 	default:
 5107              		.loc 1 2136 2 view .LVU1582
 5108 01ac 022F     		cmp	r7, #2
 5109 01ae 5AD0     		beq	.L582
 5110 01b0 032F     		cmp	r7, #3
 5111 01b2 00F00481 		beq	.L502
 5112 01b6 012F     		cmp	r7, #1
 5113 01b8 00F0B681 		beq	.L503
2139:src/display.c **** 	  if (count != *display_digits)
 5114              		.loc 1 2139 4 view .LVU1583
 5115              	.LVL548:
2139:src/display.c **** 	  if (count != *display_digits)
 5116              		.loc 1 2139 34 view .LVU1584
2139:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2139 42 is_stmt 0 view .LVU1585
 5118 01bc 22AB     		add	r3, sp, #136
 5119 01be 3344     		add	r3, r3, r6
2139:src/display.c **** 	  if (count != *display_digits)
 5120              		.loc 1 2139 4 view .LVU1586
 5121 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5122 01c4 302B     		cmp	r3, #48
 5123 01c6 40F06783 		bne	.L576
 5124 01ca 711E     		subs	r1, r6, #1
 5125 01cc 4944     		add	r1, r1, r9
2139:src/display.c **** 	  if (count != *display_digits)
 5126              		.loc 1 2139 15 view .LVU1587
 5127 01ce 3346     		mov	r3, r6
 5128              	.LVL549:
 5129              	.L505:
2139:src/display.c **** 	  if (count != *display_digits)
 5130              		.loc 1 2139 66 is_stmt 1 discriminator 3 view .LVU1588
2139:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/cc4E4VUn.s 			page 177


 5131              		.loc 1 2139 58 discriminator 3 view .LVU1589
2139:src/display.c **** 	  if (count != *display_digits)
 5132              		.loc 1 2139 42 is_stmt 0 discriminator 3 view .LVU1590
 5133 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2139:src/display.c **** 	  if (count != *display_digits)
 5134              		.loc 1 2139 4 discriminator 3 view .LVU1591
 5135 01d4 3028     		cmp	r0, #48
 5136 01d6 1A46     		mov	r2, r3
2139:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2139 63 discriminator 3 view .LVU1592
 5138 01d8 03F1FF33 		add	r3, r3, #-1
 5139              	.LVL550:
2139:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2139 34 is_stmt 1 discriminator 3 view .LVU1593
2139:src/display.c **** 	  if (count != *display_digits)
 5141              		.loc 1 2139 4 is_stmt 0 discriminator 3 view .LVU1594
 5142 01dc F8D0     		beq	.L505
2140:src/display.c **** 	    count++;
 5143              		.loc 1 2140 4 is_stmt 1 view .LVU1595
2140:src/display.c **** 	    count++;
 5144              		.loc 1 2140 7 is_stmt 0 view .LVU1596
 5145 01de 9E42     		cmp	r6, r3
 5146 01e0 08BF     		it	eq
 5147 01e2 1A46     		moveq	r2, r3
 5148              	.LVL551:
 5149              	.L504:
2143:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5150              		.loc 1 2143 4 is_stmt 1 view .LVU1597
2143:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5151              		.loc 1 2143 7 is_stmt 0 view .LVU1598
 5152 01e4 B542     		cmp	r5, r6
 5153 01e6 80F20381 		bge	.L506
2143:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5154              		.loc 1 2143 47 discriminator 1 view .LVU1599
 5155 01ea 931B     		subs	r3, r2, r6
2143:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5156              		.loc 1 2143 31 discriminator 1 view .LVU1600
 5157 01ec AB42     		cmp	r3, r5
 5158 01ee 00F3FF80 		bgt	.L506
2168:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5159              		.loc 1 2168 11 is_stmt 1 view .LVU1601
2168:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5160              		.loc 1 2168 14 is_stmt 0 view .LVU1602
 5161 01f2 002D     		cmp	r5, #0
 5162 01f4 C0F27583 		blt	.L514
 5163 01f8 6B1C     		adds	r3, r5, #1
2170:src/display.c **** 		*obp++ = ',';
 5164              		.loc 1 2170 31 view .LVU1603
 5165 01fa DFF834A1 		ldr	r10, .L679+8
 5166 01fe 0293     		str	r3, [sp, #8]
 5167 0200 09EB0300 		add	r0, r9, r3
2135:src/display.c **** 	switch (mode) {
 5168              		.loc 1 2135 4 view .LVU1604
 5169 0204 CC46     		mov	ip, r9
1940:src/display.c **** 	int odig = 0;
 5170              		.loc 1 1940 15 view .LVU1605
 5171 0206 4146     		mov	r1, r8
ARM GAS  /tmp/cc4E4VUn.s 			page 178


 5172 0208 0192     		str	r2, [sp, #4]
 5173              	.LVL552:
1940:src/display.c **** 	int odig = 0;
 5174              		.loc 1 1940 15 view .LVU1606
 5175 020a 05E0     		b	.L515
 5176              	.LVL553:
 5177              	.L518:
2171:src/display.c **** 	      *obp++ = *p++;
 5178              		.loc 1 2171 3 is_stmt 1 view .LVU1607
2170:src/display.c **** 		*obp++ = ',';
 5179              		.loc 1 2170 18 is_stmt 0 view .LVU1608
 5180 020c 022F     		cmp	r7, #2
2171:src/display.c **** 	      *obp++ = *p++;
 5181              		.loc 1 2171 10 view .LVU1609
 5182 020e 05BF     		ittet	eq
 5183 0210 2C23     		moveq	r3, #44
 5184 0212 4B70     		strbeq	r3, [r1, #1]
2172:src/display.c **** 	      odig++;
 5185              		.loc 1 2172 12 view .LVU1610
 5186 0214 0131     		addne	r1, r1, #1
 5187              	.LVL554:
2171:src/display.c **** 	      *obp++ = *p++;
 5188              		.loc 1 2171 7 view .LVU1611
 5189 0216 0231     		addeq	r1, r1, #2
 5190              	.LVL555:
 5191              	.L515:
2172:src/display.c **** 	      odig++;
 5192              		.loc 1 2172 8 is_stmt 1 discriminator 2 view .LVU1612
2172:src/display.c **** 	      odig++;
 5193              		.loc 1 2172 15 is_stmt 0 discriminator 2 view .LVU1613
 5194 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5195              	.LVL556:
2170:src/display.c **** 		*obp++ = ',';
 5196              		.loc 1 2170 8 is_stmt 1 discriminator 2 view .LVU1614
2172:src/display.c **** 	      odig++;
 5197              		.loc 1 2172 15 is_stmt 0 discriminator 2 view .LVU1615
 5198 021c 0B70     		strb	r3, [r1]
2173:src/display.c **** 	    }
 5199              		.loc 1 2173 8 is_stmt 1 discriminator 2 view .LVU1616
 5200              	.LVL557:
2169:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5201              		.loc 1 2169 23 discriminator 2 view .LVU1617
2169:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5202              		.loc 1 2169 15 discriminator 2 view .LVU1618
2170:src/display.c **** 		*obp++ = ',';
 5203              		.loc 1 2170 31 is_stmt 0 discriminator 2 view .LVU1619
 5204 021e A9EB0C03 		sub	r3, r9, ip
 5205 0222 2B44     		add	r3, r3, r5
 5206 0224 8AFB0327 		smull	r2, r7, r10, r3
 5207 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5208 022c 07EB4707 		add	r7, r7, r7, lsl #1
2169:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5209              		.loc 1 2169 6 discriminator 2 view .LVU1620
 5210 0230 6045     		cmp	r0, ip
2170:src/display.c **** 		*obp++ = ',';
 5211              		.loc 1 2170 31 discriminator 2 view .LVU1621
 5212 0232 A3EB0707 		sub	r7, r3, r7
ARM GAS  /tmp/cc4E4VUn.s 			page 179


2169:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5213              		.loc 1 2169 6 discriminator 2 view .LVU1622
 5214 0236 E9D1     		bne	.L518
 5215 0238 019A     		ldr	r2, [sp, #4]
 5216 023a 029F     		ldr	r7, [sp, #8]
2175:src/display.c **** 	    if (count > (exp + 1)) {
 5217              		.loc 1 2175 6 is_stmt 1 view .LVU1623
2175:src/display.c **** 	    if (count > (exp + 1)) {
 5218              		.loc 1 2175 13 is_stmt 0 view .LVU1624
 5219 023c 2E23     		movs	r3, #46
2176:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5220              		.loc 1 2176 9 view .LVU1625
 5221 023e BA42     		cmp	r2, r7
2175:src/display.c **** 	    if (count > (exp + 1)) {
 5222              		.loc 1 2175 13 view .LVU1626
 5223 0240 4B70     		strb	r3, [r1, #1]
2175:src/display.c **** 	    if (count > (exp + 1)) {
 5224              		.loc 1 2175 10 view .LVU1627
 5225 0242 01F10203 		add	r3, r1, #2
 5226              	.LVL558:
2176:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5227              		.loc 1 2176 6 is_stmt 1 view .LVU1628
2176:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5228              		.loc 1 2176 9 is_stmt 0 view .LVU1629
 5229 0246 2BDD     		ble	.L512
 5230 0248 A2EB050C 		sub	ip, r2, r5
 5231              	.LVL559:
2176:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5232              		.loc 1 2176 9 view .LVU1630
 5233 024c 8C44     		add	ip, ip, r1
 5234 024e 0131     		adds	r1, r1, #1
 5235              	.LVL560:
 5236              	.L519:
2178:src/display.c **** 		odig++;
 5237              		.loc 1 2178 3 is_stmt 1 discriminator 3 view .LVU1631
2178:src/display.c **** 		odig++;
 5238              		.loc 1 2178 10 is_stmt 0 discriminator 3 view .LVU1632
 5239 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5240              	.LVL561:
2178:src/display.c **** 		odig++;
 5241              		.loc 1 2178 10 discriminator 3 view .LVU1633
 5242 0254 01F8017F 		strb	r7, [r1, #1]!
2179:src/display.c **** 	      }
 5243              		.loc 1 2179 3 is_stmt 1 discriminator 3 view .LVU1634
2177:src/display.c **** 		*obp++ = *p++;
 5244              		.loc 1 2177 31 discriminator 3 view .LVU1635
2177:src/display.c **** 		*obp++ = *p++;
 5245              		.loc 1 2177 22 discriminator 3 view .LVU1636
2177:src/display.c **** 		*obp++ = *p++;
 5246              		.loc 1 2177 8 is_stmt 0 discriminator 3 view .LVU1637
 5247 0258 8C45     		cmp	ip, r1
 5248 025a F9D1     		bne	.L519
 5249 025c E943     		mvns	r1, r5
 5250 025e 1144     		add	r1, r1, r2
 5251 0260 0B44     		add	r3, r3, r1
 5252              	.LVL562:
2179:src/display.c **** 	      }
ARM GAS  /tmp/cc4E4VUn.s 			page 180


 5253              		.loc 1 2179 7 view .LVU1638
 5254 0262 1746     		mov	r7, r2
 5255 0264 1CE0     		b	.L512
 5256              	.LVL563:
 5257              	.L582:
2235:src/display.c **** 	  case -1:
 5258              		.loc 1 2235 16 view .LVU1639
 5259 0266 0127     		movs	r7, #1
 5260              	.LVL564:
 5261              	.L658:
2235:src/display.c **** 	  case -1:
 5262              		.loc 1 2235 16 view .LVU1640
 5263 0268 4146     		mov	r1, r8
 5264              	.LVL565:
 5265              	.L501:
2249:src/display.c **** 	  };
 5266              		.loc 1 2249 6 is_stmt 1 view .LVU1641
2250:src/display.c **** 	  // Falling through
 5267              		.loc 1 2250 5 view .LVU1642
2254:src/display.c **** 	  odig++;
 5268              		.loc 1 2254 4 view .LVU1643
2254:src/display.c **** 	  odig++;
 5269              		.loc 1 2254 15 is_stmt 0 view .LVU1644
 5270 026a 4A46     		mov	r2, r9
 5271              	.LVL566:
2254:src/display.c **** 	  odig++;
 5272              		.loc 1 2254 11 view .LVU1645
 5273 026c 0B46     		mov	r3, r1
 5274 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5275              	.LVL567:
2254:src/display.c **** 	  odig++;
 5276              		.loc 1 2254 11 view .LVU1646
 5277 0272 03F8020B 		strb	r0, [r3], #2
2255:src/display.c **** 	  *obp++ = '.';
 5278              		.loc 1 2255 4 is_stmt 1 view .LVU1647
2256:src/display.c **** 	  dd--;
 5279              		.loc 1 2256 4 view .LVU1648
 5280              	.LVL568:
2258:src/display.c **** 	    *obp++ = *p++;
 5281              		.loc 1 2258 10 is_stmt 0 view .LVU1649
 5282 0276 BAF1000F 		cmp	r10, #0
2256:src/display.c **** 	  dd--;
 5283              		.loc 1 2256 11 view .LVU1650
 5284 027a 4FF02E00 		mov	r0, #46
 5285 027e 4870     		strb	r0, [r1, #1]
2257:src/display.c **** 	  while (dd-- >= 0) {
 5286              		.loc 1 2257 4 is_stmt 1 view .LVU1651
2258:src/display.c **** 	    *obp++ = *p++;
 5287              		.loc 1 2258 4 view .LVU1652
2258:src/display.c **** 	    *obp++ = *p++;
 5288              		.loc 1 2258 10 view .LVU1653
2258:src/display.c **** 	    *obp++ = *p++;
 5289              		.loc 1 2258 10 is_stmt 0 view .LVU1654
 5290 0280 40F30F83 		ble	.L579
2258:src/display.c **** 	    *obp++ = *p++;
 5291              		.loc 1 2258 10 view .LVU1655
 5292 0284 0AF10100 		add	r0, r10, #1
ARM GAS  /tmp/cc4E4VUn.s 			page 181


 5293 0288 0131     		adds	r1, r1, #1
 5294 028a 8144     		add	r9, r9, r0
 5295              	.LVL569:
 5296              	.L542:
2259:src/display.c **** 	    odig++;
 5297              		.loc 1 2259 6 is_stmt 1 view .LVU1656
2259:src/display.c **** 	    odig++;
 5298              		.loc 1 2259 13 is_stmt 0 view .LVU1657
 5299 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5300              	.LVL570:
2259:src/display.c **** 	    odig++;
 5301              		.loc 1 2259 13 view .LVU1658
 5302 0290 01F8010F 		strb	r0, [r1, #1]!
2260:src/display.c **** 	  }
 5303              		.loc 1 2260 6 is_stmt 1 view .LVU1659
2258:src/display.c **** 	    *obp++ = *p++;
 5304              		.loc 1 2258 10 view .LVU1660
2258:src/display.c **** 	    *obp++ = *p++;
 5305              		.loc 1 2258 10 is_stmt 0 view .LVU1661
 5306 0294 4A45     		cmp	r2, r9
 5307 0296 F9D1     		bne	.L542
 5308 0298 5344     		add	r3, r3, r10
 5309 029a 5744     		add	r7, r7, r10
2262:src/display.c **** 	}
 5310              		.loc 1 2262 13 view .LVU1662
 5311 029c 4FF0010B 		mov	fp, #1
 5312              	.LVL571:
 5313              	.L512:
2271:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5314              		.loc 1 2271 2 is_stmt 1 view .LVU1663
2277:src/display.c **** 	if (odig > *display_digits)
 5315              		.loc 1 2277 2 view .LVU1664
 5316 02a0 B742     		cmp	r7, r6
 5317 02a2 A8BF     		it	ge
 5318 02a4 3746     		movge	r7, r6
 5319              	.LVL572:
2280:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5320              		.loc 1 2280 23 is_stmt 0 view .LVU1665
 5321 02a6 F61B     		subs	r6, r6, r7
2277:src/display.c **** 	if (odig > *display_digits)
 5322              		.loc 1 2277 7 view .LVU1666
 5323 02a8 0022     		movs	r2, #0
2280:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5324              		.loc 1 2280 4 view .LVU1667
 5325 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2277:src/display.c **** 	if (odig > *display_digits)
 5326              		.loc 1 2277 7 view .LVU1668
 5327 02ae 1A70     		strb	r2, [r3]
2278:src/display.c **** 	  odig = *display_digits;
 5328              		.loc 1 2278 2 is_stmt 1 view .LVU1669
 5329              	.LVL573:
2280:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5330              		.loc 1 2280 2 view .LVU1670
2281:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5331              		.loc 1 2281 2 view .LVU1671
2283:src/display.c **** 	  if (res) *res++ = '-';
 5332              		.loc 1 2283 2 view .LVU1672
ARM GAS  /tmp/cc4E4VUn.s 			page 182


2283:src/display.c **** 	  if (res) *res++ = '-';
 5333              		.loc 1 2283 5 is_stmt 0 view .LVU1673
 5334 02b0 BEF1000F 		cmp	lr, #0
 5335 02b4 05D0     		beq	.L543
2284:src/display.c **** 	  else {
 5336              		.loc 1 2284 4 is_stmt 1 view .LVU1674
2284:src/display.c **** 	  else {
 5337              		.loc 1 2284 7 is_stmt 0 view .LVU1675
 5338 02b6 002C     		cmp	r4, #0
 5339 02b8 00F0B281 		beq	.L544
2284:src/display.c **** 	  else {
 5340              		.loc 1 2284 13 is_stmt 1 discriminator 1 view .LVU1676
 5341              	.LVL574:
2284:src/display.c **** 	  else {
 5342              		.loc 1 2284 20 is_stmt 0 discriminator 1 view .LVU1677
 5343 02bc 2D22     		movs	r2, #45
 5344 02be 04F8012B 		strb	r2, [r4], #1
 5345              	.LVL575:
 5346              	.L543:
2292:src/display.c **** 	  if (c == '.') {
 5347              		.loc 1 2292 12 is_stmt 1 discriminator 1 view .LVU1678
2292:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2292 18 is_stmt 0 discriminator 1 view .LVU1679
 5349 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5350              	.LVL576:
2292:src/display.c **** 	  if (c == '.') {
 5351              		.loc 1 2292 2 discriminator 1 view .LVU1680
 5352 02c6 E2B1     		cbz	r2, .L545
2292:src/display.c **** 	  if (c == '.') {
 5353              		.loc 1 2292 31 view .LVU1681
 5354 02c8 6B2E     		cmp	r6, #107
 5355 02ca 1ADC     		bgt	.L545
 5356              	.LVL577:
 5357              	.L546:
 5358              	.LBB415:
 5359              	.LBB416:
 372:src/display.c ****   } else {
 5360              		.loc 1 372 17 view .LVU1682
 5361 02cc 3946     		mov	r1, r7
 5362              	.LBE416:
 5363              	.LBE415:
2296:src/display.c **** 	  } else {
 5364              		.loc 1 2296 12 view .LVU1683
 5365 02ce DFF864A0 		ldr	r10, .L679+12
2294:src/display.c **** 	  } else if (c == ',') {
 5366              		.loc 1 2294 12 view .LVU1684
 5367 02d2 DFF86490 		ldr	r9, .L679+16
 5368              	.LBB420:
 5369              	.LBB417:
 372:src/display.c ****   } else {
 5370              		.loc 1 372 17 view .LVU1685
 5371 02d6 1F46     		mov	r7, r3
 5372              	.LVL578:
 372:src/display.c ****   } else {
 5373              		.loc 1 372 17 view .LVU1686
 5374 02d8 0B46     		mov	r3, r1
 5375              	.LVL579:
ARM GAS  /tmp/cc4E4VUn.s 			page 183


 5376              	.L555:
 372:src/display.c ****   } else {
 5377              		.loc 1 372 17 view .LVU1687
 5378              	.LBE417:
 5379              	.LBE420:
2293:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5380              		.loc 1 2293 4 is_stmt 1 view .LVU1688
2293:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5381              		.loc 1 2293 7 is_stmt 0 view .LVU1689
 5382 02da 2E2A     		cmp	r2, #46
 5383 02dc 00F0DB80 		beq	.L671
2295:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5384              		.loc 1 2295 11 is_stmt 1 view .LVU1690
2295:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5385              		.loc 1 2295 14 is_stmt 0 view .LVU1691
 5386 02e0 2C2A     		cmp	r2, #44
 5387 02e2 00F0E880 		beq	.L672
2298:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5388              		.loc 1 2298 6 is_stmt 1 view .LVU1692
 5389              	.LVL580:
 5390              	.LBB421:
 5391              	.LBI421:
 407:src/display.c ****   if (res) *res++ = ch;
 5392              		.loc 1 407 14 view .LVU1693
 5393              	.LBB422:
 408:src/display.c ****   else	set_dig(base, ch);
 5394              		.loc 1 408 3 view .LVU1694
 408:src/display.c ****   else	set_dig(base, ch);
 5395              		.loc 1 408 6 is_stmt 0 view .LVU1695
 5396 02e6 002C     		cmp	r4, #0
 5397 02e8 00F0F280 		beq	.L553
 408:src/display.c ****   else	set_dig(base, ch);
 5398              		.loc 1 408 12 is_stmt 1 view .LVU1696
 5399              	.LVL581:
 408:src/display.c ****   else	set_dig(base, ch);
 5400              		.loc 1 408 19 is_stmt 0 view .LVU1697
 5401 02ec 04F8012B 		strb	r2, [r4], #1
 5402              	.LVL582:
 5403              	.L554:
 410:src/display.c **** }
 5404              		.loc 1 410 3 is_stmt 1 view .LVU1698
 410:src/display.c **** }
 5405              		.loc 1 410 3 is_stmt 0 view .LVU1699
 5406              	.LBE422:
 5407              	.LBE421:
2299:src/display.c **** 	  }
 5408              		.loc 1 2299 6 is_stmt 1 view .LVU1700
2292:src/display.c **** 	  if (c == '.') {
 5409              		.loc 1 2292 18 is_stmt 0 view .LVU1701
 5410 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5411              	.LVL583:
2299:src/display.c **** 	  }
 5412              		.loc 1 2299 8 view .LVU1702
 5413 02f4 0936     		adds	r6, r6, #9
 5414              	.LVL584:
2292:src/display.c **** 	  if (c == '.') {
 5415              		.loc 1 2292 53 is_stmt 1 view .LVU1703
ARM GAS  /tmp/cc4E4VUn.s 			page 184


2292:src/display.c **** 	  if (c == '.') {
 5416              		.loc 1 2292 12 view .LVU1704
2292:src/display.c **** 	  if (c == '.') {
 5417              		.loc 1 2292 2 is_stmt 0 view .LVU1705
 5418 02f6 0AB1     		cbz	r2, .L654
2292:src/display.c **** 	  if (c == '.') {
 5419              		.loc 1 2292 31 discriminator 3 view .LVU1706
 5420 02f8 6B2E     		cmp	r6, #107
 5421 02fa EEDD     		ble	.L555
 5422              	.L654:
2292:src/display.c **** 	  if (c == '.') {
 5423              		.loc 1 2292 31 discriminator 3 view .LVU1707
 5424 02fc 1A46     		mov	r2, r3
 5425              	.LVL585:
2292:src/display.c **** 	  if (c == '.') {
 5426              		.loc 1 2292 31 discriminator 3 view .LVU1708
 5427 02fe 3B46     		mov	r3, r7
 5428 0300 1746     		mov	r7, r2
 5429              	.LVL586:
 5430              	.L545:
2312:src/display.c **** 	  set_exp(exp, 0, res);
 5431              		.loc 1 2312 2 is_stmt 1 view .LVU1709
2312:src/display.c **** 	  set_exp(exp, 0, res);
 5432              		.loc 1 2312 5 is_stmt 0 view .LVU1710
 5433 0302 BBF1000F 		cmp	fp, #0
 5434 0306 40F0F880 		bne	.L673
 5435              	.L556:
2315:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5436              		.loc 1 2315 2 is_stmt 1 view .LVU1711
2315:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5437              		.loc 1 2315 5 is_stmt 0 view .LVU1712
 5438 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5439 030e 2E2B     		cmp	r3, #46
 5440 0310 00F0E580 		beq	.L674
 5441              	.L557:
2317:src/display.c ****       }
 5442              		.loc 1 2317 2 is_stmt 1 view .LVU1713
2317:src/display.c ****       }
 5443              		.loc 1 2317 18 is_stmt 0 view .LVU1714
 5444 0314 009B     		ldr	r3, [sp]
 5445 0316 1F60     		str	r7, [r3]
 5446              	.LVL587:
 5447              	.L444:
2318:src/display.c **** 
 5448              		.loc 1 2318 7 view .LVU1715
 5449 0318 23B0     		add	sp, sp, #140
 5450              		.cfi_remember_state
 5451              		.cfi_def_cfa_offset 36
 5452              	.LVL588:
2318:src/display.c **** 
 5453              		.loc 1 2318 7 view .LVU1716
 5454              		@ sp needed
 5455 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5456              	.LVL589:
 5457              	.L452:
 5458              		.cfi_restore_state
2017:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 185


 5459              		.loc 1 2017 4 is_stmt 1 view .LVU1717
 5460 031e 4146     		mov	r1, r8
 5461 0320 3046     		mov	r0, r6
 5462 0322 FFF7FEFF 		bl	decNumberToString
 5463              	.LVL590:
 5464 0326 A5E6     		b	.L454
 5465              	.L680:
 5466              		.align	2
 5467              	.L679:
 5468 0328 00000000 		.word	main_ram
 5469 032c 00000000 		.word	StateWhileOn
 5470 0330 56555555 		.word	1431655766
 5471 0334 00000000 		.word	.LANCHOR0
 5472 0338 00000000 		.word	.LANCHOR1
 5473              	.LVL591:
 5474              	.L445:
1975:src/display.c **** 	    if (State2.hms) {
 5475              		.loc 1 1975 4 view .LVU1718
1975:src/display.c **** 	    if (State2.hms) {
 5476              		.loc 1 1975 25 is_stmt 0 view .LVU1719
 5477 033c C14B     		ldr	r3, .L681
 5478 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1975:src/display.c **** 	    if (State2.hms) {
 5479              		.loc 1 1975 22 view .LVU1720
 5480 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1975:src/display.c **** 	    if (State2.hms) {
 5481              		.loc 1 1975 25 view .LVU1721
 5482 0342 01F00201 		and	r1, r1, #2
1975:src/display.c **** 	    if (State2.hms) {
 5483              		.loc 1 1975 22 view .LVU1722
 5484 0346 1143     		orrs	r1, r1, r2
 5485 0348 7FF46EAE 		bne	.L448
1976:src/display.c **** 	      set_x_hms(z, res);
 5486              		.loc 1 1976 6 is_stmt 1 view .LVU1723
1976:src/display.c **** 	      set_x_hms(z, res);
 5487              		.loc 1 1976 10 is_stmt 0 view .LVU1724
 5488 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1976:src/display.c **** 	      set_x_hms(z, res);
 5489              		.loc 1 1976 9 view .LVU1725
 5490 034e DA07     		lsls	r2, r3, #31
 5491 0350 00F19E82 		bmi	.L675
1980:src/display.c **** 	      if (set_x_fract(z, res))
 5492              		.loc 1 1980 11 is_stmt 1 view .LVU1726
1980:src/display.c **** 	      if (set_x_fract(z, res))
 5493              		.loc 1 1980 15 is_stmt 0 view .LVU1727
 5494 0354 BC4B     		ldr	r3, .L681+4
 5495 0356 1B68     		ldr	r3, [r3]
 5496 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1980:src/display.c **** 	      if (set_x_fract(z, res))
 5497              		.loc 1 1980 14 view .LVU1728
 5498 035c 9B06     		lsls	r3, r3, #26
 5499 035e 7FF563AE 		bpl	.L448
1981:src/display.c **** 		return;
 5500              		.loc 1 1981 8 is_stmt 1 view .LVU1729
1981:src/display.c **** 		return;
 5501              		.loc 1 1981 12 is_stmt 0 view .LVU1730
 5502 0362 2146     		mov	r1, r4
ARM GAS  /tmp/cc4E4VUn.s 			page 186


 5503 0364 3046     		mov	r0, r6
 5504 0366 FFF7FEFF 		bl	set_x_fract
 5505              	.LVL592:
1981:src/display.c **** 		return;
 5506              		.loc 1 1981 11 view .LVU1731
 5507 036a 0028     		cmp	r0, #0
 5508 036c 3FF45CAE 		beq	.L448
 5509 0370 D2E7     		b	.L444
 5510              	.LVL593:
 5511              	.L568:
2063:src/display.c **** 	else exp = s_to_i(q+1);
 5512              		.loc 1 2063 21 view .LVU1732
 5513 0372 0546     		mov	r5, r0
 5514 0374 A5E6     		b	.L468
 5515              	.LVL594:
 5516              	.L670:
2117:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5517              		.loc 1 2117 7 view .LVU1733
 5518 0376 4A46     		mov	r2, r9
2118:src/display.c **** 	    mantissa[0] = '1';
 5519              		.loc 1 2118 41 view .LVU1734
 5520 0378 4FF0300C 		mov	ip, #48
 5521              	.LVL595:
 5522              	.L494:
2118:src/display.c **** 	    mantissa[0] = '1';
 5523              		.loc 1 2118 47 is_stmt 1 discriminator 3 view .LVU1735
2118:src/display.c **** 	    mantissa[0] = '1';
 5524              		.loc 1 2118 36 discriminator 3 view .LVU1736
2118:src/display.c **** 	    mantissa[0] = '1';
 5525              		.loc 1 2118 41 is_stmt 0 discriminator 3 view .LVU1737
 5526 037c 02F801CB 		strb	ip, [r2], #1
 5527              	.LVL596:
2118:src/display.c **** 	    mantissa[0] = '1';
 5528              		.loc 1 2118 25 is_stmt 1 discriminator 3 view .LVU1738
2118:src/display.c **** 	    mantissa[0] = '1';
 5529              		.loc 1 2118 6 is_stmt 0 discriminator 3 view .LVU1739
 5530 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5531 0382 3929     		cmp	r1, #57
 5532 0384 FAD0     		beq	.L494
 5533              	.LVL597:
 5534              	.L561:
2119:src/display.c **** 	    exp++;
 5535              		.loc 1 2119 6 is_stmt 1 view .LVU1740
2119:src/display.c **** 	    exp++;
 5536              		.loc 1 2119 18 is_stmt 0 view .LVU1741
 5537 0386 3122     		movs	r2, #49
2121:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5538              		.loc 1 2121 9 view .LVU1742
 5539 0388 012F     		cmp	r7, #1
2120:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5540              		.loc 1 2120 9 view .LVU1743
 5541 038a 05F10105 		add	r5, r5, #1
 5542              	.LVL598:
2119:src/display.c **** 	    exp++;
 5543              		.loc 1 2119 18 view .LVU1744
 5544 038e 8DF84820 		strb	r2, [sp, #72]
2120:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
ARM GAS  /tmp/cc4E4VUn.s 			page 187


 5545              		.loc 1 2120 6 is_stmt 1 view .LVU1745
 5546              	.LVL599:
2121:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5547              		.loc 1 2121 6 view .LVU1746
2121:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5548              		.loc 1 2121 9 is_stmt 0 view .LVU1747
 5549 0392 7FF402AF 		bne	.L657
2121:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5550              		.loc 1 2121 27 discriminator 1 view .LVU1748
 5551 0396 AE42     		cmp	r6, r5
 5552 0398 00F3C180 		bgt	.L496
2122:src/display.c **** 	      extra_digits = 0;
 5553              		.loc 1 2122 8 is_stmt 1 view .LVU1749
2122:src/display.c **** 	      extra_digits = 0;
 5554              		.loc 1 2122 28 is_stmt 0 view .LVU1750
 5555 039c AA4B     		ldr	r3, .L681+4
 5556              	.LVL600:
2122:src/display.c **** 	      extra_digits = 0;
 5557              		.loc 1 2122 28 view .LVU1751
 5558 039e 1B68     		ldr	r3, [r3]
 5559 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2122:src/display.c **** 	      extra_digits = 0;
 5560              		.loc 1 2122 37 view .LVU1752
 5561 03a4 D806     		lsls	r0, r3, #27
 5562              	.LVL601:
2122:src/display.c **** 	      extra_digits = 0;
 5563              		.loc 1 2122 37 view .LVU1753
 5564 03a6 40F1C082 		bpl	.L676
 5565              	.LVL602:
2133:src/display.c **** 
 5566              		.loc 1 2133 2 is_stmt 1 view .LVU1754
2133:src/display.c **** 
 5567              		.loc 1 2133 40 is_stmt 0 view .LVU1755
 5568 03aa 0AF10102 		add	r2, r10, #1
2133:src/display.c **** 
 5569              		.loc 1 2133 9 view .LVU1756
 5570 03ae 09EB0203 		add	r3, r9, r2
 5571              	.LVL603:
2133:src/display.c **** 
 5572              		.loc 1 2133 45 is_stmt 1 view .LVU1757
2133:src/display.c **** 
 5573              		.loc 1 2133 2 is_stmt 0 view .LVU1758
 5574 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2122:src/display.c **** 	      extra_digits = 0;
 5575              		.loc 1 2122 37 view .LVU1759
 5576 03b6 0327     		movs	r7, #3
2133:src/display.c **** 
 5577              		.loc 1 2133 2 view .LVU1760
 5578 03b8 002A     		cmp	r2, #0
 5579 03ba 7FF4F1AE 		bne	.L559
 5580              	.LVL604:
 5581              	.L502:
2235:src/display.c **** 	  case -1:
 5582              		.loc 1 2235 4 is_stmt 1 view .LVU1761
2235:src/display.c **** 	  case -1:
 5583              		.loc 1 2235 16 is_stmt 0 view .LVU1762
 5584 03be A34B     		ldr	r3, .L681+8
ARM GAS  /tmp/cc4E4VUn.s 			page 188


 5585 03c0 83FB0523 		smull	r2, r3, r3, r5
 5586 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5587 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5588 03cc EB1A     		subs	r3, r5, r3
 5589 03ce 0233     		adds	r3, r3, #2
 5590 03d0 042B     		cmp	r3, #4
 5591 03d2 3FF648AF 		bhi	.L582
 5592 03d6 01A2     		adr	r2, .L539
 5593 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5594              		.p2align 2
 5595              	.L539:
 5596 03dc 0B050000 		.word	.L583+1
 5597 03e0 A7070000 		.word	.L538+1
 5598 03e4 67020000 		.word	.L582+1
 5599 03e8 0B050000 		.word	.L583+1
 5600 03ec A7070000 		.word	.L538+1
 5601              	.LVL605:
 5602              		.p2align 1
 5603              	.L506:
2144:src/display.c **** 	    case -1:
 5604              		.loc 1 2144 6 is_stmt 1 view .LVU1763
2144:src/display.c **** 	    case -1:
 5605              		.loc 1 2144 32 is_stmt 0 view .LVU1764
 5606 03f0 9549     		ldr	r1, .L681+4
2144:src/display.c **** 	    case -1:
 5607              		.loc 1 2144 19 view .LVU1765
 5608 03f2 964B     		ldr	r3, .L681+8
2144:src/display.c **** 	    case -1:
 5609              		.loc 1 2144 32 view .LVU1766
 5610 03f4 0968     		ldr	r1, [r1]
2144:src/display.c **** 	    case -1:
 5611              		.loc 1 2144 19 view .LVU1767
 5612 03f6 83FB0503 		smull	r0, r3, r3, r5
2144:src/display.c **** 	    case -1:
 5613              		.loc 1 2144 32 view .LVU1768
 5614 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2144:src/display.c **** 	    case -1:
 5615              		.loc 1 2144 19 view .LVU1769
 5616 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5617 0402 03EB4303 		add	r3, r3, r3, lsl #1
2144:src/display.c **** 	    case -1:
 5618              		.loc 1 2144 32 view .LVU1770
 5619 0406 C1F30011 		ubfx	r1, r1, #4, #1
2144:src/display.c **** 	    case -1:
 5620              		.loc 1 2144 19 view .LVU1771
 5621 040a EB1A     		subs	r3, r5, r3
2144:src/display.c **** 	    case -1:
 5622              		.loc 1 2144 24 view .LVU1772
 5623 040c 03FB01F3 		mul	r3, r3, r1
 5624 0410 0233     		adds	r3, r3, #2
 5625 0412 042B     		cmp	r3, #4
 5626 0414 00F24282 		bhi	.L577
 5627 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5628              	.L510:
 5629 041c DC01     		.2byte	(.L578-.L510)/2
 5630 041e FD01     		.2byte	(.L509-.L510)/2
 5631 0420 4002     		.2byte	(.L577-.L510)/2
ARM GAS  /tmp/cc4E4VUn.s 			page 189


 5632 0422 DC01     		.2byte	(.L578-.L510)/2
 5633 0424 FD01     		.2byte	(.L509-.L510)/2
 5634              	.LVL606:
 5635              		.p2align 1
 5636              	.L669:
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5637              		.loc 1 2100 4 is_stmt 1 view .LVU1773
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5638              		.loc 1 2100 7 is_stmt 0 view .LVU1774
 5639 0426 AE42     		cmp	r6, r5
 5640 0428 04DD     		ble	.L485
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5641              		.loc 1 2100 45 discriminator 1 view .LVU1775
 5642 042a CAF10003 		rsb	r3, r10, #0
2100:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5643              		.loc 1 2100 36 discriminator 1 view .LVU1776
 5644 042e AB42     		cmp	r3, r5
 5645 0430 40F3C681 		ble	.L486
 5646              	.L485:
2101:src/display.c **** 	  else {
 5647              		.loc 1 2101 6 is_stmt 1 view .LVU1777
2101:src/display.c **** 	  else {
 5648              		.loc 1 2101 26 is_stmt 0 view .LVU1778
 5649 0434 844B     		ldr	r3, .L681+4
 5650 0436 1B68     		ldr	r3, [r3]
 5651 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2101:src/display.c **** 	  else {
 5652              		.loc 1 2101 35 view .LVU1779
 5653 043c 13F0100F 		tst	r3, #16
 5654 0440 14BF     		ite	ne
 5655 0442 0327     		movne	r7, #3
 5656              	.LVL607:
2101:src/display.c **** 	  else {
 5657              		.loc 1 2101 35 view .LVU1780
 5658 0444 0227     		moveq	r7, #2
 5659 0446 0022     		movs	r2, #0
 5660 0448 7FE6     		b	.L484
 5661              	.LVL608:
 5662              	.L667:
2101:src/display.c **** 	  else {
 5663              		.loc 1 2101 35 view .LVU1781
 5664 044a 013D     		subs	r5, r5, #1
 5665 044c 7219     		adds	r2, r6, r5
 5666              	.L477:
2080:src/display.c **** 	    exp--;
 5667              		.loc 1 2080 4 is_stmt 1 discriminator 1 view .LVU1782
2081:src/display.c **** 	  while (*++q == '0');
 5668              		.loc 1 2081 6 discriminator 1 view .LVU1783
 5669 044e 951B     		subs	r5, r2, r6
 5670              	.LVL609:
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5671              		.loc 1 2082 10 discriminator 1 view .LVU1784
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5672              		.loc 1 2082 11 is_stmt 0 discriminator 1 view .LVU1785
 5673 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5674              	.LVL610:
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9')
ARM GAS  /tmp/cc4E4VUn.s 			page 190


 5675              		.loc 1 2082 4 discriminator 1 view .LVU1786
 5676 0454 302B     		cmp	r3, #48
 5677 0456 FAD0     		beq	.L477
2083:src/display.c **** 	    *p++ = *q++;
 5678              		.loc 1 2083 10 is_stmt 1 view .LVU1787
 5679 0458 A3F13002 		sub	r2, r3, #48
 5680 045c 092A     		cmp	r2, #9
 5681 045e 3FF66EAE 		bhi	.L478
1946:src/display.c **** 	char *r;
 5682              		.loc 1 1946 8 is_stmt 0 view .LVU1788
 5683 0462 4A46     		mov	r2, r9
 5684              	.LVL611:
 5685              	.L479:
2084:src/display.c **** 	} else {
 5686              		.loc 1 2084 6 is_stmt 1 view .LVU1789
2084:src/display.c **** 	} else {
 5687              		.loc 1 2084 11 is_stmt 0 view .LVU1790
 5688 0464 02F8013B 		strb	r3, [r2], #1
 5689              	.LVL612:
2083:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2083 10 is_stmt 1 view .LVU1791
2083:src/display.c **** 	    *p++ = *q++;
 5691              		.loc 1 2083 11 is_stmt 0 view .LVU1792
 5692 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2083:src/display.c **** 	    *p++ = *q++;
 5693              		.loc 1 2083 10 view .LVU1793
 5694 046c A3F13001 		sub	r1, r3, #48
 5695 0470 0929     		cmp	r1, #9
 5696 0472 F7D9     		bls	.L479
 5697 0474 63E6     		b	.L478
 5698              	.LVL613:
 5699              	.L665:
2074:src/display.c **** 	  q++;
 5700              		.loc 1 2074 4 is_stmt 1 view .LVU1794
2075:src/display.c **** 	} else if (*q == '+')
 5701              		.loc 1 2075 4 view .LVU1795
2074:src/display.c **** 	  q++;
 5702              		.loc 1 2074 13 is_stmt 0 view .LVU1796
 5703 0476 4FF0010E 		mov	lr, #1
 5704 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2075:src/display.c **** 	} else if (*q == '+')
 5705              		.loc 1 2075 5 view .LVU1797
 5706 047c 7644     		add	r6, r6, lr
 5707              	.LVL614:
2075:src/display.c **** 	} else if (*q == '+')
 5708              		.loc 1 2075 5 view .LVU1798
 5709 047e 35E6     		b	.L473
 5710              	.LVL615:
 5711              	.L663:
2043:src/display.c **** 	  trimzeros = 1;
 5712              		.loc 1 2043 4 is_stmt 1 view .LVU1799
2043:src/display.c **** 	  trimzeros = 1;
 5713              		.loc 1 2043 11 is_stmt 0 view .LVU1800
 5714 0480 3046     		mov	r0, r6
 5715 0482 FFF7FEFF 		bl	std_round_fix
 5716              	.LVL616:
2045:src/display.c **** 	} else if (dd >= *display_digits)
ARM GAS  /tmp/cc4E4VUn.s 			page 191


 5717              		.loc 1 2045 7 view .LVU1801
 5718 0486 009B     		ldr	r3, [sp]
 5719 0488 1D68     		ldr	r5, [r3]
2044:src/display.c **** 	  dd = *display_digits - 1;
 5720              		.loc 1 2044 14 view .LVU1802
 5721 048a 0123     		movs	r3, #1
2043:src/display.c **** 	  trimzeros = 1;
 5722              		.loc 1 2043 11 view .LVU1803
 5723 048c 0746     		mov	r7, r0
 5724              	.LVL617:
2044:src/display.c **** 	  dd = *display_digits - 1;
 5725              		.loc 1 2044 4 is_stmt 1 view .LVU1804
2045:src/display.c **** 	} else if (dd >= *display_digits)
 5726              		.loc 1 2045 4 view .LVU1805
2045:src/display.c **** 	} else if (dd >= *display_digits)
 5727              		.loc 1 2045 7 is_stmt 0 view .LVU1806
 5728 048e 05F1FF3A 		add	r10, r5, #-1
 5729              	.LVL618:
2044:src/display.c **** 	  dd = *display_digits - 1;
 5730              		.loc 1 2044 14 view .LVU1807
 5731 0492 0193     		str	r3, [sp, #4]
 5732              	.LVL619:
2044:src/display.c **** 	  dd = *display_digits - 1;
 5733              		.loc 1 2044 14 view .LVU1808
 5734 0494 00E6     		b	.L467
 5735              	.LVL620:
 5736              	.L671:
2294:src/display.c **** 	  } else if (c == ',') {
 5737              		.loc 1 2294 6 is_stmt 1 view .LVU1809
2294:src/display.c **** 	  } else if (c == ',') {
 5738              		.loc 1 2294 12 is_stmt 0 view .LVU1810
 5739 0496 2246     		mov	r2, r4
 5740              	.LVL621:
2294:src/display.c **** 	  } else if (c == ',') {
 5741              		.loc 1 2294 12 view .LVU1811
 5742 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5743 049c 0193     		str	r3, [sp, #4]
 5744 049e A6F10900 		sub	r0, r6, #9
 5745 04a2 FFF7FEFF 		bl	set_decimal
 5746              	.LVL622:
 5747 04a6 019B     		ldr	r3, [sp, #4]
 5748 04a8 0446     		mov	r4, r0
 5749              	.LVL623:
 5750              	.L549:
2292:src/display.c **** 	  if (c == '.') {
 5751              		.loc 1 2292 53 is_stmt 1 view .LVU1812
2292:src/display.c **** 	  if (c == '.') {
 5752              		.loc 1 2292 12 view .LVU1813
2292:src/display.c **** 	  if (c == '.') {
 5753              		.loc 1 2292 18 is_stmt 0 view .LVU1814
 5754 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5755              	.LVL624:
2292:src/display.c **** 	  if (c == '.') {
 5756              		.loc 1 2292 2 view .LVU1815
 5757 04ae 002A     		cmp	r2, #0
 5758 04b0 7FF413AF 		bne	.L555
 5759 04b4 22E7     		b	.L654
ARM GAS  /tmp/cc4E4VUn.s 			page 192


 5760              	.L672:
2296:src/display.c **** 	  } else {
 5761              		.loc 1 2296 6 is_stmt 1 view .LVU1816
2296:src/display.c **** 	  } else {
 5762              		.loc 1 2296 12 is_stmt 0 view .LVU1817
 5763 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5764              	.LVL625:
 5765              	.LBB424:
 5766              	.LBI415:
 367:src/display.c ****   if (sep == SEP_NONE)
 5767              		.loc 1 367 14 is_stmt 1 view .LVU1818
 5768              	.LBB418:
 368:src/display.c ****     return res;
 5769              		.loc 1 368 3 view .LVU1819
 368:src/display.c ****     return res;
 5770              		.loc 1 368 6 is_stmt 0 view .LVU1820
 5771 04ba 0029     		cmp	r1, #0
 5772 04bc F5D0     		beq	.L549
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5773              		.loc 1 370 3 is_stmt 1 view .LVU1821
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5774              		.loc 1 370 6 is_stmt 0 view .LVU1822
 5775 04be 002C     		cmp	r4, #0
 5776 04c0 00F0F281 		beq	.L551
 371:src/display.c ****     else *res++ = '.';
 5777              		.loc 1 371 5 is_stmt 1 view .LVU1823
 371:src/display.c ****     else *res++ = '.';
 5778              		.loc 1 371 8 is_stmt 0 view .LVU1824
 5779 04c4 0129     		cmp	r1, #1
 371:src/display.c ****     else *res++ = '.';
 5780              		.loc 1 371 27 is_stmt 1 view .LVU1825
 5781              	.LVL626:
 372:src/display.c ****   } else {
 5782              		.loc 1 372 10 view .LVU1826
 372:src/display.c ****   } else {
 5783              		.loc 1 372 17 is_stmt 0 view .LVU1827
 5784 04c6 18BF     		it	ne
 5785 04c8 2E22     		movne	r2, #46
 5786              	.LVL627:
 372:src/display.c ****   } else {
 5787              		.loc 1 372 17 view .LVU1828
 5788 04ca 04F8012B 		strb	r2, [r4], #1
 5789              	.LVL628:
 372:src/display.c ****   } else {
 5790              		.loc 1 372 17 view .LVU1829
 5791 04ce ECE7     		b	.L549
 5792              	.LVL629:
 5793              	.L553:
 372:src/display.c ****   } else {
 5794              		.loc 1 372 17 view .LVU1830
 5795              	.LBE418:
 5796              	.LBE424:
 5797              	.LBB425:
 5798              	.LBB423:
 409:src/display.c ****   return res;
 5799              		.loc 1 409 8 view .LVU1831
 5800 04d0 1146     		mov	r1, r2
ARM GAS  /tmp/cc4E4VUn.s 			page 193


 5801 04d2 3046     		mov	r0, r6
 5802 04d4 0193     		str	r3, [sp, #4]
 409:src/display.c ****   return res;
 5803              		.loc 1 409 8 is_stmt 1 view .LVU1832
 5804 04d6 FFF7FEFF 		bl	set_dig
 5805              	.LVL630:
 409:src/display.c ****   return res;
 5806              		.loc 1 409 8 is_stmt 0 view .LVU1833
 5807 04da 019B     		ldr	r3, [sp, #4]
 5808 04dc 08E7     		b	.L554
 5809              	.LVL631:
 5810              	.L674:
 409:src/display.c ****   return res;
 5811              		.loc 1 409 8 view .LVU1834
 5812              	.LBE423:
 5813              	.LBE425:
2315:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5814              		.loc 1 2315 21 discriminator 1 view .LVU1835
 5815 04de 002C     		cmp	r4, #0
 5816 04e0 7FF418AF 		bne	.L557
2316:src/display.c **** 	*display_digits = odig;
 5817              		.loc 1 2316 4 is_stmt 1 view .LVU1836
2316:src/display.c **** 	*display_digits = odig;
 5818              		.loc 1 2316 33 is_stmt 0 view .LVU1837
 5819 04e4 009B     		ldr	r3, [sp]
 5820 04e6 1868     		ldr	r0, [r3]
2316:src/display.c **** 	*display_digits = odig;
 5821              		.loc 1 2316 4 view .LVU1838
 5822 04e8 594B     		ldr	r3, .L681+12
2316:src/display.c **** 	*display_digits = odig;
 5823              		.loc 1 2316 33 view .LVU1839
 5824 04ea 0138     		subs	r0, r0, #1
2316:src/display.c **** 	*display_digits = odig;
 5825              		.loc 1 2316 4 view .LVU1840
 5826 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5827 04ee 2246     		mov	r2, r4
 5828 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5829 04f4 FFF7FEFF 		bl	set_decimal
 5830              	.LVL632:
 5831 04f8 0CE7     		b	.L557
 5832              	.L673:
2313:src/display.c **** #endif
 5833              		.loc 1 2313 4 view .LVU1841
 5834 04fa 2846     		mov	r0, r5
 5835 04fc 2246     		mov	r2, r4
 5836 04fe 0021     		movs	r1, #0
 5837 0500 0193     		str	r3, [sp, #4]
2313:src/display.c **** #endif
 5838              		.loc 1 2313 4 is_stmt 1 view .LVU1842
 5839 0502 FFF7FEFF 		bl	set_exp
 5840              	.LVL633:
 5841 0506 019B     		ldr	r3, [sp, #4]
 5842 0508 FFE6     		b	.L556
 5843              	.LVL634:
 5844              	.L583:
2235:src/display.c **** 	  case -1:
 5845              		.loc 1 2235 16 is_stmt 0 view .LVU1843
ARM GAS  /tmp/cc4E4VUn.s 			page 194


 5846 050a 0227     		movs	r7, #2
 5847 050c 4146     		mov	r1, r8
 5848              	.LVL635:
 5849              	.L540:
2244:src/display.c **** 	    odig++;
 5850              		.loc 1 2244 6 is_stmt 1 view .LVU1844
2244:src/display.c **** 	    odig++;
 5851              		.loc 1 2244 13 is_stmt 0 view .LVU1845
 5852 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5853              	.LVL636:
2244:src/display.c **** 	    odig++;
 5854              		.loc 1 2244 13 view .LVU1846
 5855 0512 01F8013B 		strb	r3, [r1], #1
 5856              	.LVL637:
2245:src/display.c **** 	    dd--;
 5857              		.loc 1 2245 6 is_stmt 1 view .LVU1847
2246:src/display.c **** 	    exp--;
 5858              		.loc 1 2246 6 view .LVU1848
2246:src/display.c **** 	    exp--;
 5859              		.loc 1 2246 8 is_stmt 0 view .LVU1849
 5860 0516 0AF1FF3A 		add	r10, r10, #-1
 5861              	.LVL638:
2247:src/display.c **** 	  case 0:
 5862              		.loc 1 2247 6 is_stmt 1 view .LVU1850
2247:src/display.c **** 	  case 0:
 5863              		.loc 1 2247 9 is_stmt 0 view .LVU1851
 5864 051a 013D     		subs	r5, r5, #1
 5865              	.LVL639:
2247:src/display.c **** 	  case 0:
 5866              		.loc 1 2247 9 view .LVU1852
 5867 051c A5E6     		b	.L501
 5868              	.LVL640:
 5869              	.L496:
2133:src/display.c **** 
 5870              		.loc 1 2133 2 is_stmt 1 view .LVU1853
2133:src/display.c **** 
 5871              		.loc 1 2133 45 view .LVU1854
2133:src/display.c **** 
 5872              		.loc 1 2133 2 is_stmt 0 view .LVU1855
 5873 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5874 0522 002A     		cmp	r2, #0
 5875 0524 7FF43CAE 		bne	.L559
 5876              	.LVL641:
 5877              	.L503:
2198:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5878              		.loc 1 2198 4 is_stmt 1 view .LVU1856
2199:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5879              		.loc 1 2199 4 view .LVU1857
2199:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5880              		.loc 1 2199 7 is_stmt 0 view .LVU1858
 5881 0528 002D     		cmp	r5, #0
 5882 052a C0F21081 		blt	.L523
2199:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5883              		.loc 1 2199 7 view .LVU1859
 5884 052e 6B1C     		adds	r3, r5, #1
2201:src/display.c **** 		*obp++ = ',';
 5885              		.loc 1 2201 31 view .LVU1860
ARM GAS  /tmp/cc4E4VUn.s 			page 195


 5886 0530 DFF818C1 		ldr	ip, .L681+8
 5887 0534 0293     		str	r3, [sp, #8]
 5888 0536 09EB0300 		add	r0, r9, r3
2135:src/display.c **** 	switch (mode) {
 5889              		.loc 1 2135 4 view .LVU1861
 5890 053a 4F46     		mov	r7, r9
1940:src/display.c **** 	int odig = 0;
 5891              		.loc 1 1940 15 view .LVU1862
 5892 053c 4146     		mov	r1, r8
 5893 053e 0394     		str	r4, [sp, #12]
 5894 0540 05E0     		b	.L524
 5895              	.LVL642:
 5896              	.L527:
2202:src/display.c **** 	      *obp++ = *p++;
 5897              		.loc 1 2202 3 is_stmt 1 view .LVU1863
2201:src/display.c **** 		*obp++ = ',';
 5898              		.loc 1 2201 18 is_stmt 0 view .LVU1864
 5899 0542 022A     		cmp	r2, #2
2202:src/display.c **** 	      *obp++ = *p++;
 5900              		.loc 1 2202 10 view .LVU1865
 5901 0544 05BF     		ittet	eq
 5902 0546 2C23     		moveq	r3, #44
 5903 0548 4B70     		strbeq	r3, [r1, #1]
2203:src/display.c **** 	      odig++;
 5904              		.loc 1 2203 12 view .LVU1866
 5905 054a 0131     		addne	r1, r1, #1
 5906              	.LVL643:
2202:src/display.c **** 	      *obp++ = *p++;
 5907              		.loc 1 2202 7 view .LVU1867
 5908 054c 0231     		addeq	r1, r1, #2
 5909              	.LVL644:
 5910              	.L524:
2203:src/display.c **** 	      odig++;
 5911              		.loc 1 2203 8 is_stmt 1 discriminator 2 view .LVU1868
2203:src/display.c **** 	      odig++;
 5912              		.loc 1 2203 15 is_stmt 0 discriminator 2 view .LVU1869
 5913 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5914              	.LVL645:
2201:src/display.c **** 		*obp++ = ',';
 5915              		.loc 1 2201 8 is_stmt 1 discriminator 2 view .LVU1870
2203:src/display.c **** 	      odig++;
 5916              		.loc 1 2203 15 is_stmt 0 discriminator 2 view .LVU1871
 5917 0552 0B70     		strb	r3, [r1]
2204:src/display.c **** 	    }
 5918              		.loc 1 2204 8 is_stmt 1 discriminator 2 view .LVU1872
 5919              	.LVL646:
2200:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5920              		.loc 1 2200 24 discriminator 2 view .LVU1873
2200:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5921              		.loc 1 2200 16 discriminator 2 view .LVU1874
2201:src/display.c **** 		*obp++ = ',';
 5922              		.loc 1 2201 31 is_stmt 0 discriminator 2 view .LVU1875
 5923 0554 A9EB0703 		sub	r3, r9, r7
 5924 0558 2B44     		add	r3, r3, r5
 5925 055a 8CFB0342 		smull	r4, r2, ip, r3
 5926 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5927 0562 02EB4202 		add	r2, r2, r2, lsl #1
ARM GAS  /tmp/cc4E4VUn.s 			page 196


2200:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5928              		.loc 1 2200 6 discriminator 2 view .LVU1876
 5929 0566 B842     		cmp	r0, r7
2201:src/display.c **** 		*obp++ = ',';
 5930              		.loc 1 2201 31 discriminator 2 view .LVU1877
 5931 0568 A3EB0202 		sub	r2, r3, r2
2200:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5932              		.loc 1 2200 6 discriminator 2 view .LVU1878
 5933 056c E9D1     		bne	.L527
2206:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5934              		.loc 1 2206 13 view .LVU1879
 5935 056e 2E23     		movs	r3, #46
2207:src/display.c **** 	      *obp++ = *p++;
 5936              		.loc 1 2207 6 view .LVU1880
 5937 0570 BAF1000F 		cmp	r10, #0
2206:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5938              		.loc 1 2206 13 view .LVU1881
 5939 0574 4B70     		strb	r3, [r1, #1]
 5940 0576 039C     		ldr	r4, [sp, #12]
 5941 0578 029F     		ldr	r7, [sp, #8]
 5942              	.LVL647:
2206:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5943              		.loc 1 2206 6 is_stmt 1 view .LVU1882
2206:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5944              		.loc 1 2206 10 is_stmt 0 view .LVU1883
 5945 057a 01F10203 		add	r3, r1, #2
 5946              	.LVL648:
2207:src/display.c **** 	      *obp++ = *p++;
 5947              		.loc 1 2207 6 is_stmt 1 view .LVU1884
2207:src/display.c **** 	      *obp++ = *p++;
 5948              		.loc 1 2207 16 view .LVU1885
2207:src/display.c **** 	      *obp++ = *p++;
 5949              		.loc 1 2207 6 is_stmt 0 view .LVU1886
 5950 057e 0CDD     		ble	.L528
 5951 0580 0131     		adds	r1, r1, #1
 5952 0582 00EB0A07 		add	r7, r0, r10
 5953              	.LVL649:
 5954              	.L529:
2208:src/display.c **** 	      odig++;
 5955              		.loc 1 2208 8 is_stmt 1 discriminator 4 view .LVU1887
2208:src/display.c **** 	      odig++;
 5956              		.loc 1 2208 15 is_stmt 0 discriminator 4 view .LVU1888
 5957 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5958              	.LVL650:
2208:src/display.c **** 	      odig++;
 5959              		.loc 1 2208 15 discriminator 4 view .LVU1889
 5960 058a 01F8012F 		strb	r2, [r1, #1]!
2209:src/display.c **** 	    }
 5961              		.loc 1 2209 8 is_stmt 1 discriminator 4 view .LVU1890
2207:src/display.c **** 	      *obp++ = *p++;
 5962              		.loc 1 2207 43 discriminator 4 view .LVU1891
2207:src/display.c **** 	      *obp++ = *p++;
 5963              		.loc 1 2207 16 discriminator 4 view .LVU1892
2207:src/display.c **** 	      *obp++ = *p++;
 5964              		.loc 1 2207 6 is_stmt 0 discriminator 4 view .LVU1893
 5965 058e 8742     		cmp	r7, r0
 5966 0590 F9D1     		bne	.L529
ARM GAS  /tmp/cc4E4VUn.s 			page 197


 5967 0592 029A     		ldr	r2, [sp, #8]
 5968 0594 5244     		add	r2, r2, r10
 5969 0596 5344     		add	r3, r3, r10
 5970              	.LVL651:
2207:src/display.c **** 	      *obp++ = *p++;
 5971              		.loc 1 2207 6 discriminator 4 view .LVU1894
 5972 0598 1746     		mov	r7, r2
 5973              	.LVL652:
 5974              	.L528:
2226:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5975              		.loc 1 2226 4 is_stmt 1 view .LVU1895
2226:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5976              		.loc 1 2226 7 is_stmt 0 view .LVU1896
 5977 059a 019A     		ldr	r2, [sp, #4]
 5978 059c 002A     		cmp	r2, #0
 5979 059e 40F0C480 		bne	.L534
1942:src/display.c **** 	int j;
 5980              		.loc 1 1942 6 view .LVU1897
 5981 05a2 9346     		mov	fp, r2
 5982 05a4 7CE6     		b	.L512
 5983              	.LVL653:
 5984              	.L660:
2003:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5985              		.loc 1 2003 4 is_stmt 1 view .LVU1898
 5986 05a6 2B4A     		ldr	r2, .L681+16
 5987 05a8 3146     		mov	r1, r6
 5988 05aa 3046     		mov	r0, r6
 5989 05ac FFF7FEFF 		bl	decNumberNormalize
 5990              	.LVL654:
2004:src/display.c **** 	  z->exponent = 0;
 5991              		.loc 1 2004 4 view .LVU1899
2004:src/display.c **** 	  z->exponent = 0;
 5992              		.loc 1 2004 22 is_stmt 0 view .LVU1900
 5993 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5994 05b4 03EB020A 		add	r10, r3, r2
2004:src/display.c **** 	  z->exponent = 0;
 5995              		.loc 1 2004 8 view .LVU1901
 5996 05b8 0AF1FF33 		add	r3, r10, #-1
2005:src/display.c **** 	}
 5997              		.loc 1 2005 16 view .LVU1902
 5998 05bc C6F804B0 		str	fp, [r6, #4]
2004:src/display.c **** 	  z->exponent = 0;
 5999              		.loc 1 2004 8 view .LVU1903
 6000 05c0 0193     		str	r3, [sp, #4]
 6001              	.LVL655:
2005:src/display.c **** 	}
 6002              		.loc 1 2005 4 is_stmt 1 view .LVU1904
 6003 05c2 42E5     		b	.L451
 6004              	.LVL656:
 6005              	.L666:
2077:src/display.c **** 	for (; *q == '0'; q++);
 6006              		.loc 1 2077 4 view .LVU1905
2077:src/display.c **** 	for (; *q == '0'; q++);
 6007              		.loc 1 2077 4 is_stmt 0 view .LVU1906
 6008 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1960:src/display.c **** 	int trimzeros = 0;
 6009              		.loc 1 1960 6 view .LVU1907
ARM GAS  /tmp/cc4E4VUn.s 			page 198


 6010 05c6 4FF0000E 		mov	lr, #0
2077:src/display.c **** 	for (; *q == '0'; q++);
 6011              		.loc 1 2077 5 view .LVU1908
 6012 05ca 0136     		adds	r6, r6, #1
 6013              	.LVL657:
2077:src/display.c **** 	for (; *q == '0'; q++);
 6014              		.loc 1 2077 5 view .LVU1909
 6015 05cc 8EE5     		b	.L473
 6016              	.LVL658:
 6017              	.L668:
2093:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6018              		.loc 1 2093 6 is_stmt 1 view .LVU1910
2094:src/display.c **** 	      *p++ = *q++;
 6019              		.loc 1 2094 13 is_stmt 0 view .LVU1911
 6020 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2094:src/display.c **** 	      *p++ = *q++;
 6021              		.loc 1 2094 12 view .LVU1912
 6022 05d0 A3F13002 		sub	r2, r3, #48
 6023 05d4 092A     		cmp	r2, #9
2093:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6024              		.loc 1 2093 7 view .LVU1913
 6025 05d6 06F10106 		add	r6, r6, #1
 6026              	.LVL659:
2094:src/display.c **** 	      *p++ = *q++;
 6027              		.loc 1 2094 6 is_stmt 1 view .LVU1914
2094:src/display.c **** 	      *p++ = *q++;
 6028              		.loc 1 2094 12 view .LVU1915
 6029 05da 3FF6B0AD 		bhi	.L478
 6030              	.LVL660:
 6031              	.L483:
2095:src/display.c **** 	  }
 6032              		.loc 1 2095 8 view .LVU1916
2095:src/display.c **** 	  }
 6033              		.loc 1 2095 13 is_stmt 0 view .LVU1917
 6034 05de 01F8013B 		strb	r3, [r1], #1
 6035              	.LVL661:
2094:src/display.c **** 	      *p++ = *q++;
 6036              		.loc 1 2094 12 is_stmt 1 view .LVU1918
2094:src/display.c **** 	      *p++ = *q++;
 6037              		.loc 1 2094 13 is_stmt 0 view .LVU1919
 6038 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2094:src/display.c **** 	      *p++ = *q++;
 6039              		.loc 1 2094 12 view .LVU1920
 6040 05e6 A3F13002 		sub	r2, r3, #48
 6041 05ea 092A     		cmp	r2, #9
 6042 05ec F7D9     		bls	.L483
 6043 05ee A6E5     		b	.L478
 6044              	.LVL662:
 6045              	.L661:
2011:src/display.c **** 	    x[0] = '-';
 6046              		.loc 1 2011 34 discriminator 1 view .LVU1921
 6047 05f0 6B20     		movs	r0, #107
 6048 05f2 FFF7FEFF 		bl	get_user_flag
 6049              	.LVL663:
2011:src/display.c **** 	    x[0] = '-';
 6050              		.loc 1 2011 31 discriminator 1 view .LVU1922
 6051 05f6 0028     		cmp	r0, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 199


 6052 05f8 3FF439AD 		beq	.L453
2012:src/display.c **** 	    x[1] = '0';
 6053              		.loc 1 2012 6 is_stmt 1 view .LVU1923
2013:src/display.c **** 	  } else
 6054              		.loc 1 2013 6 view .LVU1924
2012:src/display.c **** 	    x[1] = '0';
 6055              		.loc 1 2012 11 is_stmt 0 view .LVU1925
 6056 05fc 43F22D03 		movw	r3, #12333
 6057 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
2013:src/display.c **** 	  } else
 6058              		.loc 1 2013 11 view .LVU1926
 6059 0604 36E5     		b	.L454
 6060              	.LVL664:
 6061              	.L664:
2070:src/display.c **** 	  CLR_MANT_SIGN;
 6062              		.loc 1 2070 4 is_stmt 1 view .LVU1927
 6063              	.LBB426:
 6064              	.LBI426:
 314:src/display.c **** {
 6065              		.loc 1 314 13 view .LVU1928
 6066              	.LBB427:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6067              		.loc 1 316 3 view .LVU1929
 317:src/display.c **** }
 6068              		.loc 1 317 3 view .LVU1930
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6069              		.loc 1 316 27 is_stmt 0 view .LVU1931
 6070 0606 144B     		ldr	r3, .L681+20
 6071 0608 2022     		movs	r2, #32
 317:src/display.c **** }
 6072              		.loc 1 317 3 view .LVU1932
 6073 060a 8220     		movs	r0, #130
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6074              		.loc 1 316 27 view .LVU1933
 6075 060c 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 6076              		.loc 1 317 3 view .LVU1934
 6077 060e FFF7FEFF 		bl	clr_dot
 6078              	.LVL665:
 6079              	.LBE427:
 6080              	.LBE426:
2071:src/display.c **** 	}
 6081              		.loc 1 2071 4 is_stmt 1 view .LVU1935
 6082              	.LBB428:
 6083              	.LBI428:
 302:src/display.c **** {
 6084              		.loc 1 302 13 view .LVU1936
 6085              	.LBB429:
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6086              		.loc 1 304 3 view .LVU1937
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6087              		.loc 1 304 25 is_stmt 0 view .LVU1938
 6088 0612 124B     		ldr	r3, .L681+24
 6089 0614 2022     		movs	r2, #32
 305:src/display.c **** }
 6090              		.loc 1 305 3 view .LVU1939
 6091 0616 8120     		movs	r0, #129
ARM GAS  /tmp/cc4E4VUn.s 			page 200


 304:src/display.c ****   clr_dot(MANT_SIGN);
 6092              		.loc 1 304 25 view .LVU1940
 6093 0618 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 6094              		.loc 1 305 3 is_stmt 1 view .LVU1941
 6095 061a FFF7FEFF 		bl	clr_dot
 6096              	.LVL666:
 306:src/display.c **** 
 6097              		.loc 1 306 1 is_stmt 0 view .LVU1942
 6098 061e 5CE5     		b	.L471
 6099              	.LVL667:
 6100              	.L544:
 306:src/display.c **** 
 6101              		.loc 1 306 1 view .LVU1943
 6102              	.LBE429:
 6103              	.LBE428:
2286:src/display.c **** 	      SET_MANT_SIGN;
 6104              		.loc 1 2286 6 is_stmt 1 view .LVU1944
 6105 0620 0193     		str	r3, [sp, #4]
2286:src/display.c **** 	      SET_MANT_SIGN;
 6106              		.loc 1 2286 9 is_stmt 0 view .LVU1945
 6107 0622 002E     		cmp	r6, #0
 6108 0624 40F00281 		bne	.L547
2287:src/display.c **** 	    else
 6109              		.loc 1 2287 8 is_stmt 1 view .LVU1946
 6110              	.LBB430:
 6111              	.LBI430:
 296:src/display.c **** {
 6112              		.loc 1 296 13 view .LVU1947
 6113              	.LBB431:
 298:src/display.c ****   set_dot(MANT_SIGN);
 6114              		.loc 1 298 3 view .LVU1948
 298:src/display.c ****   set_dot(MANT_SIGN);
 6115              		.loc 1 298 25 is_stmt 0 view .LVU1949
 6116 0628 0C4A     		ldr	r2, .L681+24
 6117 062a 2D21     		movs	r1, #45
 299:src/display.c **** }
 6118              		.loc 1 299 3 view .LVU1950
 6119 062c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 6120              		.loc 1 298 25 view .LVU1951
 6121 062e 1170     		strb	r1, [r2]
 299:src/display.c **** }
 6122              		.loc 1 299 3 is_stmt 1 view .LVU1952
 6123 0630 FFF7FEFF 		bl	set_dot
 6124              	.LVL668:
 299:src/display.c **** }
 6125              		.loc 1 299 3 is_stmt 0 view .LVU1953
 6126              	.LBE431:
 6127              	.LBE430:
2292:src/display.c **** 	  if (c == '.') {
 6128              		.loc 1 2292 12 is_stmt 1 view .LVU1954
2292:src/display.c **** 	  if (c == '.') {
 6129              		.loc 1 2292 18 is_stmt 0 view .LVU1955
 6130 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6131              	.LVL669:
2292:src/display.c **** 	  if (c == '.') {
ARM GAS  /tmp/cc4E4VUn.s 			page 201


 6132              		.loc 1 2292 2 view .LVU1956
 6133 0638 019B     		ldr	r3, [sp, #4]
 6134 063a 002A     		cmp	r2, #0
 6135 063c 7FF446AE 		bne	.L546
 6136 0640 5FE6     		b	.L545
 6137              	.L682:
 6138 0642 00BF     		.align	2
 6139              	.L681:
 6140 0644 00000000 		.word	StateWhileOn
 6141 0648 00000000 		.word	main_ram
 6142 064c 56555555 		.word	1431655766
 6143 0650 00000000 		.word	.LANCHOR1
 6144 0654 00000000 		.word	Ctx
 6145 0658 00000000 		.word	LastDisplayedExponent
 6146 065c 00000000 		.word	LastDisplayedNumber
 6147              	.LVL670:
 6148              	.L662:
2020:src/display.c **** 	  return;
 6149              		.loc 1 2020 4 is_stmt 1 view .LVU1957
 6150              	.LBB432:
 6151              	.LBI432:
1808:src/display.c **** 	const int dbl = is_dblmode();
 6152              		.loc 1 1808 19 view .LVU1958
 6153              	.LBB433:
1809:src/display.c **** 	char *p;
 6154              		.loc 1 1809 2 view .LVU1959
1809:src/display.c **** 	char *p;
 6155              		.loc 1 1809 18 is_stmt 0 view .LVU1960
 6156 0660 FFF7FEFF 		bl	is_dblmode
 6157              	.LVL671:
1825:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6158              		.loc 1 1825 5 view .LVU1961
 6159 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6160 0668 2D2B     		cmp	r3, #45
1809:src/display.c **** 	char *p;
 6161              		.loc 1 1809 18 view .LVU1962
 6162 066a 0446     		mov	r4, r0
 6163              	.LVL672:
1810:src/display.c **** 	int i, j;
 6164              		.loc 1 1810 2 is_stmt 1 view .LVU1963
1811:src/display.c **** 	char *upper_str;
 6165              		.loc 1 1811 2 view .LVU1964
1812:src/display.c **** 	enum separator_modes separator_mode;
 6166              		.loc 1 1812 2 view .LVU1965
1813:src/display.c **** 	char decimal_mark;
 6167              		.loc 1 1813 2 view .LVU1966
1814:src/display.c **** 	char thousands_sep;
 6168              		.loc 1 1814 2 view .LVU1967
1815:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6169              		.loc 1 1815 2 view .LVU1968
1821:src/display.c **** #endif
 6170              		.loc 1 1821 2 view .LVU1969
1823:src/display.c **** 
 6171              		.loc 1 1823 2 view .LVU1970
1825:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6172              		.loc 1 1825 2 view .LVU1971
1825:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
ARM GAS  /tmp/cc4E4VUn.s 			page 202


 6173              		.loc 1 1825 5 is_stmt 0 view .LVU1972
 6174 066c 00F02A81 		beq	.L677
1838:src/display.c **** 
 6175              		.loc 1 1838 16 view .LVU1973
 6176 0670 0026     		movs	r6, #0
 6177              	.LVL673:
 6178              	.L456:
1840:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6179              		.loc 1 1840 2 is_stmt 1 view .LVU1974
1840:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6180              		.loc 1 1840 6 is_stmt 0 view .LVU1975
 6181 0672 0021     		movs	r1, #0
 6182 0674 4046     		mov	r0, r8
 6183 0676 FFF7FEFF 		bl	find_char
 6184              	.LVL674:
1841:src/display.c **** 
 6185              		.loc 1 1841 2 is_stmt 1 view .LVU1976
1841:src/display.c **** 
 6186              		.loc 1 1841 23 is_stmt 0 view .LVU1977
 6187 067a A0EB0802 		sub	r2, r0, r8
1841:src/display.c **** 
 6188              		.loc 1 1841 2 view .LVU1978
 6189 067e C2F12202 		rsb	r2, r2, #34
 6190 0682 3021     		movs	r1, #48
 6191 0684 FFF7FEFF 		bl	xset
 6192              	.LVL675:
1843:src/display.c **** 	  separator_mode = SEP_COMMA;
 6193              		.loc 1 1843 2 is_stmt 1 view .LVU1979
1843:src/display.c **** 	  separator_mode = SEP_COMMA;
 6194              		.loc 1 1843 18 is_stmt 0 view .LVU1980
 6195 0688 B14A     		ldr	r2, .L683
1854:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6196              		.loc 1 1854 6 view .LVU1981
 6197 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1843:src/display.c **** 	  separator_mode = SEP_COMMA;
 6198              		.loc 1 1843 5 view .LVU1982
 6199 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1851:src/display.c **** 	}
 6200              		.loc 1 1851 18 view .LVU1983
 6201 0690 002A     		cmp	r2, #0
 6202 0692 15BF     		itete	ne
 6203 0694 4FF0020A 		movne	r10, #2
 6204 0698 2C27     		moveq	r7, #44
 6205 069a 2E27     		movne	r7, #46
 6206              	.LVL676:
1851:src/display.c **** 	}
 6207              		.loc 1 1851 18 view .LVU1984
 6208 069c 2E25     		moveq	r5, #46
 6209 069e 18BF     		it	ne
 6210 06a0 2C25     		movne	r5, #44
 6211              	.LVL677:
1854:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6212              		.loc 1 1854 2 is_stmt 1 view .LVU1985
1854:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6213              		.loc 1 1854 5 is_stmt 0 view .LVU1986
 6214 06a2 13F0380F 		tst	r3, #56
 6215 06a6 40F0C880 		bne	.L678
ARM GAS  /tmp/cc4E4VUn.s 			page 203


1881:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6216              		.loc 1 1881 4 is_stmt 1 view .LVU1987
 6217              	.LVL678:
1882:src/display.c **** 	  x[1] = decimal_mark;
 6218              		.loc 1 1882 4 view .LVU1988
 6219 06aa 1022     		movs	r2, #16
 6220 06ac 08F10101 		add	r1, r8, #1
 6221 06b0 08F10200 		add	r0, r8, #2
 6222 06b4 FFF7FEFF 		bl	xcopy
 6223              	.LVL679:
1883:src/display.c **** 	  if (grouping) {
 6224              		.loc 1 1883 4 view .LVU1989
1885:src/display.c **** 	    x[5] = thousands_sep;
 6225              		.loc 1 1885 6 is_stmt 0 view .LVU1990
 6226 06b8 0D22     		movs	r2, #13
 6227 06ba 08F10501 		add	r1, r8, #5
 6228 06be 08F10600 		add	r0, r8, #6
1883:src/display.c **** 	  if (grouping) {
 6229              		.loc 1 1883 9 view .LVU1991
 6230 06c2 88F80150 		strb	r5, [r8, #1]
1884:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6231              		.loc 1 1884 4 is_stmt 1 view .LVU1992
1885:src/display.c **** 	    x[5] = thousands_sep;
 6232              		.loc 1 1885 6 view .LVU1993
 6233 06c6 FFF7FEFF 		bl	xcopy
 6234              	.LVL680:
1886:src/display.c **** 	    x += 9;
 6235              		.loc 1 1886 6 view .LVU1994
1887:src/display.c **** 	  }
 6236              		.loc 1 1887 8 is_stmt 0 view .LVU1995
 6237 06ca 08F10905 		add	r5, r8, #9
 6238              	.LVL681:
1886:src/display.c **** 	    x += 9;
 6239              		.loc 1 1886 11 view .LVU1996
 6240 06ce 88F80570 		strb	r7, [r8, #5]
1887:src/display.c **** 	  }
 6241              		.loc 1 1887 6 is_stmt 1 view .LVU1997
 6242              	.LVL682:
1890:src/display.c **** 	    if (exp < 0) {
 6243              		.loc 1 1890 4 view .LVU1998
1890:src/display.c **** 	    if (exp < 0) {
 6244              		.loc 1 1890 7 is_stmt 0 view .LVU1999
 6245 06d2 002C     		cmp	r4, #0
 6246 06d4 00F0F380 		beq	.L460
1891:src/display.c **** 	      x[9] = '-';
 6247              		.loc 1 1891 6 is_stmt 1 view .LVU2000
1891:src/display.c **** 	      x[9] = '-';
 6248              		.loc 1 1891 9 is_stmt 0 view .LVU2001
 6249 06d8 019B     		ldr	r3, [sp, #4]
1899:src/display.c **** 	  }
 6250              		.loc 1 1899 18 view .LVU2002
 6251 06da 9E49     		ldr	r1, .L683+4
1891:src/display.c **** 	      x[9] = '-';
 6252              		.loc 1 1891 9 view .LVU2003
 6253 06dc 002B     		cmp	r3, #0
1892:src/display.c **** 	      exp = -exp;
 6254              		.loc 1 1892 8 is_stmt 1 view .LVU2004
ARM GAS  /tmp/cc4E4VUn.s 			page 204


1893:src/display.c **** 	    }
 6255              		.loc 1 1893 8 view .LVU2005
1893:src/display.c **** 	    }
 6256              		.loc 1 1893 12 is_stmt 0 view .LVU2006
 6257 06de BCBF     		itt	lt
 6258 06e0 5B42     		rsblt	r3, r3, #0
 6259 06e2 0193     		strlt	r3, [sp, #4]
 6260              	.LVL683:
1897:src/display.c **** 	    x[10] = '0' + j;
 6261              		.loc 1 1897 8 view .LVU2007
 6262 06e4 0198     		ldr	r0, [sp, #4]
 6263 06e6 9C4B     		ldr	r3, .L683+8
1892:src/display.c **** 	      exp = -exp;
 6264              		.loc 1 1892 13 view .LVU2008
 6265 06e8 B4BF     		ite	lt
 6266 06ea 2D22     		movlt	r2, #45
1896:src/display.c **** 	    j = exp / 1000;
 6267              		.loc 1 1896 13 view .LVU2009
 6268 06ec 2022     		movge	r2, #32
 6269 06ee 88F81220 		strb	r2, [r8, #18]
1897:src/display.c **** 	    x[10] = '0' + j;
 6270              		.loc 1 1897 6 is_stmt 1 view .LVU2010
1897:src/display.c **** 	    x[10] = '0' + j;
 6271              		.loc 1 1897 8 is_stmt 0 view .LVU2011
 6272 06f2 0246     		mov	r2, r0
 6273 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6274 06f8 9B09     		lsrs	r3, r3, #6
 6275              	.LVL684:
1898:src/display.c **** 	    exp -= 1000 * j;
 6276              		.loc 1 1898 6 is_stmt 1 view .LVU2012
1898:src/display.c **** 	    exp -= 1000 * j;
 6277              		.loc 1 1898 18 is_stmt 0 view .LVU2013
 6278 06fa 03F13002 		add	r2, r3, #48
1899:src/display.c **** 	  }
 6279              		.loc 1 1899 10 view .LVU2014
 6280 06fe 01FB0303 		mla	r3, r1, r3, r0
 6281              	.LVL685:
1899:src/display.c **** 	  }
 6282              		.loc 1 1899 10 view .LVU2015
 6283 0702 0193     		str	r3, [sp, #4]
 6284              	.LVL686:
1898:src/display.c **** 	    exp -= 1000 * j;
 6285              		.loc 1 1898 12 view .LVU2016
 6286 0704 88F81320 		strb	r2, [r8, #19]
1899:src/display.c **** 	  }
 6287              		.loc 1 1899 6 is_stmt 1 view .LVU2017
 6288              	.LVL687:
 6289              	.L462:
1905:src/display.c **** 	  *x = 0;
 6290              		.loc 1 1905 4 view .LVU2018
 6291 0708 0B22     		movs	r2, #11
 6292 070a 2946     		mov	r1, r5
 6293 070c 08F10A00 		add	r0, r8, #10
 6294 0710 FFF7FEFF 		bl	xcopy
 6295              	.LVL688:
1906:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6296              		.loc 1 1906 4 view .LVU2019
ARM GAS  /tmp/cc4E4VUn.s 			page 205


1906:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6297              		.loc 1 1906 7 is_stmt 0 view .LVU2020
 6298 0714 0022     		movs	r2, #0
1907:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6299              		.loc 1 1907 4 view .LVU2021
 6300 0716 0198     		ldr	r0, [sp, #4]
1906:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6301              		.loc 1 1906 7 view .LVU2022
 6302 0718 88F80920 		strb	r2, [r8, #9]
1907:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6303              		.loc 1 1907 4 is_stmt 1 view .LVU2023
 6304 071c 0121     		movs	r1, #1
 6305 071e FFF7FEFF 		bl	set_exp
 6306              	.LVL689:
1908:src/display.c **** 	}
 6307              		.loc 1 1908 4 view .LVU2024
1908:src/display.c **** 	}
 6308              		.loc 1 1908 4 is_stmt 0 view .LVU2025
 6309 0722 A8EB0606 		sub	r6, r8, r6
 6310              	.LVL690:
1908:src/display.c **** 	}
 6311              		.loc 1 1908 6 view .LVU2026
 6312 0726 0924     		movs	r4, #9
 6313              	.LVL691:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6314              		.loc 1 1911 11 is_stmt 1 view .LVU2027
 6315 0728 9AE0     		b	.L463
 6316              	.LVL692:
 6317              	.L534:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6318              		.loc 1 1911 11 is_stmt 0 view .LVU2028
 6319              	.LBE433:
 6320              	.LBE432:
2227:src/display.c **** 	      obp--;
 6321              		.loc 1 2227 12 is_stmt 1 view .LVU2029
 6322 072a 4345     		cmp	r3, r8
 6323 072c 88BF     		it	hi
 6324 072e 1A46     		movhi	r2, r3
 6325 0730 7FF6B6AD 		bls	.L512
 6326              	.L536:
2228:src/display.c **** 	      odig--;
 6327              		.loc 1 2228 8 discriminator 1 view .LVU2030
 6328 0734 1346     		mov	r3, r2
 6329              	.LVL693:
2228:src/display.c **** 	      odig--;
 6330              		.loc 1 2228 8 is_stmt 0 discriminator 1 view .LVU2031
 6331 0736 013A     		subs	r2, r2, #1
 6332              	.LVL694:
2229:src/display.c **** 	    }
 6333              		.loc 1 2229 8 is_stmt 1 discriminator 1 view .LVU2032
2227:src/display.c **** 	      obp--;
 6334              		.loc 1 2227 21 is_stmt 0 discriminator 1 view .LVU2033
 6335 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6336 073c 3029     		cmp	r1, #48
 6337 073e 7FF4AFAD 		bne	.L512
2227:src/display.c **** 	      obp--;
 6338              		.loc 1 2227 12 view .LVU2034
ARM GAS  /tmp/cc4E4VUn.s 			page 206


 6339 0742 9045     		cmp	r8, r2
2229:src/display.c **** 	    }
 6340              		.loc 1 2229 12 view .LVU2035
 6341 0744 07F1FF37 		add	r7, r7, #-1
 6342              	.LVL695:
2227:src/display.c **** 	      obp--;
 6343              		.loc 1 2227 12 is_stmt 1 view .LVU2036
 6344 0748 F4D1     		bne	.L536
 6345 074a 4346     		mov	r3, r8
 6346 074c A8E5     		b	.L512
 6347              	.LVL696:
 6348              	.L523:
2212:src/display.c **** 	    odig++;
 6349              		.loc 1 2212 6 view .LVU2037
2213:src/display.c **** 	    *obp++ = '.';
 6350              		.loc 1 2213 6 view .LVU2038
2214:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6351              		.loc 1 2214 6 view .LVU2039
2212:src/display.c **** 	    odig++;
 6352              		.loc 1 2212 13 is_stmt 0 view .LVU2040
 6353 074e 42F63063 		movw	r3, #11824
 6354 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2215:src/display.c **** 	      *obp++ = '0';
 6355              		.loc 1 2215 6 is_stmt 1 view .LVU2041
 6356              	.LVL697:
2215:src/display.c **** 	      *obp++ = '0';
 6357              		.loc 1 2215 20 view .LVU2042
2215:src/display.c **** 	      *obp++ = '0';
 6358              		.loc 1 2215 6 is_stmt 0 view .LVU2043
 6359 0756 6B1C     		adds	r3, r5, #1
 6360              	.LVL698:
2215:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2215 6 view .LVU2044
 6362 0758 00F0F280 		beq	.L581
 6363 075c C5F10101 		rsb	r1, r5, #1
2214:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6364              		.loc 1 2214 10 view .LVU2045
 6365 0760 0DF11603 		add	r3, sp, #22
 6366              	.LVL699:
2214:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6367              		.loc 1 2214 10 view .LVU2046
 6368 0764 4144     		add	r1, r1, r8
 6369 0766 1A46     		mov	r2, r3
2216:src/display.c **** 	      odig++;
 6370              		.loc 1 2216 15 view .LVU2047
 6371 0768 3020     		movs	r0, #48
 6372              	.LVL700:
 6373              	.L532:
2216:src/display.c **** 	      odig++;
 6374              		.loc 1 2216 8 is_stmt 1 discriminator 3 view .LVU2048
2216:src/display.c **** 	      odig++;
 6375              		.loc 1 2216 15 is_stmt 0 discriminator 3 view .LVU2049
 6376 076a 02F8010B 		strb	r0, [r2], #1
 6377              	.LVL701:
2217:src/display.c **** 	      dd--;
 6378              		.loc 1 2217 8 is_stmt 1 discriminator 3 view .LVU2050
2218:src/display.c **** 	    }
ARM GAS  /tmp/cc4E4VUn.s 			page 207


 6379              		.loc 1 2218 8 discriminator 3 view .LVU2051
2215:src/display.c **** 	      *obp++ = '0';
 6380              		.loc 1 2215 25 discriminator 3 view .LVU2052
2215:src/display.c **** 	      *obp++ = '0';
 6381              		.loc 1 2215 20 discriminator 3 view .LVU2053
2215:src/display.c **** 	      *obp++ = '0';
 6382              		.loc 1 2215 6 is_stmt 0 discriminator 3 view .LVU2054
 6383 076e 8A42     		cmp	r2, r1
 6384 0770 FBD1     		bne	.L532
 6385 0772 AA44     		add	r10, r10, r5
 6386 0774 EA43     		mvns	r2, r5
 6387              	.LVL702:
2215:src/display.c **** 	      *obp++ = '0';
 6388              		.loc 1 2215 6 discriminator 3 view .LVU2055
 6389 0776 0AF1010A 		add	r10, r10, #1
 6390 077a 1344     		add	r3, r3, r2
 6391 077c 6F42     		rsbs	r7, r5, #0
 6392              	.L531:
 6393              	.LVL703:
2220:src/display.c **** 	      *obp++ = *p++;
 6394              		.loc 1 2220 12 is_stmt 1 view .LVU2056
 6395 077e BAF1000F 		cmp	r10, #0
2220:src/display.c **** 	      *obp++ = *p++;
 6396              		.loc 1 2220 15 is_stmt 0 view .LVU2057
 6397 0782 0AF1FF32 		add	r2, r10, #-1
 6398              	.LVL704:
2220:src/display.c **** 	      *obp++ = *p++;
 6399              		.loc 1 2220 12 view .LVU2058
 6400 0786 7FF708AF 		ble	.L528
 6401 078a 9A44     		add	r10, r10, r3
 6402 078c 0AF1FF30 		add	r0, r10, #-1
 6403 0790 013B     		subs	r3, r3, #1
 6404              	.LVL705:
 6405              	.L533:
2221:src/display.c **** 	      odig++;
 6406              		.loc 1 2221 8 is_stmt 1 view .LVU2059
2221:src/display.c **** 	      odig++;
 6407              		.loc 1 2221 15 is_stmt 0 view .LVU2060
 6408 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6409              	.LVL706:
2221:src/display.c **** 	      odig++;
 6410              		.loc 1 2221 15 view .LVU2061
 6411 0796 03F8011F 		strb	r1, [r3, #1]!
2222:src/display.c **** 	    }
 6412              		.loc 1 2222 8 is_stmt 1 view .LVU2062
2220:src/display.c **** 	      *obp++ = *p++;
 6413              		.loc 1 2220 12 view .LVU2063
2220:src/display.c **** 	      *obp++ = *p++;
 6414              		.loc 1 2220 12 is_stmt 0 view .LVU2064
 6415 079a 8342     		cmp	r3, r0
 6416 079c F9D1     		bne	.L533
 6417              	.LVL707:
2220:src/display.c **** 	      *obp++ = *p++;
 6418              		.loc 1 2220 12 view .LVU2065
 6419 079e 0137     		adds	r7, r7, #1
 6420 07a0 1744     		add	r7, r7, r2
 6421 07a2 5346     		mov	r3, r10
ARM GAS  /tmp/cc4E4VUn.s 			page 208


 6422 07a4 F9E6     		b	.L528
 6423              	.LVL708:
 6424              	.L538:
2238:src/display.c **** 	    odig++;
 6425              		.loc 1 2238 6 is_stmt 1 view .LVU2066
2238:src/display.c **** 	    odig++;
 6426              		.loc 1 2238 13 is_stmt 0 view .LVU2067
 6427 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6428 07aa 8DF81430 		strb	r3, [sp, #20]
2239:src/display.c **** 	    dd--;
 6429              		.loc 1 2239 6 is_stmt 1 view .LVU2068
 6430              	.LVL709:
2240:src/display.c **** 	    exp--;
 6431              		.loc 1 2240 6 view .LVU2069
2240:src/display.c **** 	    exp--;
 6432              		.loc 1 2240 8 is_stmt 0 view .LVU2070
 6433 07ae 0AF1FF3A 		add	r10, r10, #-1
 6434              	.LVL710:
2241:src/display.c **** 	  case -2:
 6435              		.loc 1 2241 6 is_stmt 1 view .LVU2071
2241:src/display.c **** 	  case -2:
 6436              		.loc 1 2241 9 is_stmt 0 view .LVU2072
 6437 07b2 013D     		subs	r5, r5, #1
 6438              	.LVL711:
2241:src/display.c **** 	  case -2:
 6439              		.loc 1 2241 9 view .LVU2073
 6440 07b4 0327     		movs	r7, #3
2238:src/display.c **** 	    odig++;
 6441              		.loc 1 2238 17 view .LVU2074
 6442 07b6 0DF14909 		add	r9, sp, #73
 6443              	.LVL712:
2238:src/display.c **** 	    odig++;
 6444              		.loc 1 2238 10 view .LVU2075
 6445 07ba 0DF11501 		add	r1, sp, #21
 6446              	.LVL713:
2238:src/display.c **** 	    odig++;
 6447              		.loc 1 2238 10 view .LVU2076
 6448 07be A6E6     		b	.L540
 6449              	.LVL714:
 6450              	.L486:
2103:src/display.c **** 	    /* We might have push the fixed decimals off the
 6451              		.loc 1 2103 6 is_stmt 1 view .LVU2077
2107:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6452              		.loc 1 2107 6 view .LVU2078
2107:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6453              		.loc 1 2107 23 is_stmt 0 view .LVU2079
 6454 07c0 05EB0A03 		add	r3, r5, r10
2107:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6455              		.loc 1 2107 9 view .LVU2080
 6456 07c4 9E42     		cmp	r6, r3
2108:src/display.c **** 	  }
 6457              		.loc 1 2108 8 is_stmt 1 view .LVU2081
2108:src/display.c **** 	  }
 6458              		.loc 1 2108 30 is_stmt 0 view .LVU2082
 6459 07c6 DCBF     		itt	le
 6460 07c8 06F1FF3A 		addle	r10, r6, #-1
 6461              	.LVL715:
ARM GAS  /tmp/cc4E4VUn.s 			page 209


2108:src/display.c **** 	  }
 6462              		.loc 1 2108 11 view .LVU2083
 6463 07cc AAEB050A 		suble	r10, r10, r5
 6464              	.LVL716:
2108:src/display.c **** 	  }
 6465              		.loc 1 2108 11 view .LVU2084
 6466 07d0 2A46     		mov	r2, r5
 6467 07d2 BAE4     		b	.L484
 6468              	.LVL717:
 6469              	.L578:
2144:src/display.c **** 	    case -1:
 6470              		.loc 1 2144 24 view .LVU2085
 6471 07d4 0227     		movs	r7, #2
 6472 07d6 4046     		mov	r0, r8
 6473              	.LVL718:
 6474              	.L511:
2153:src/display.c **** 	      odig++;
 6475              		.loc 1 2153 8 is_stmt 1 view .LVU2086
2153:src/display.c **** 	      odig++;
 6476              		.loc 1 2153 15 is_stmt 0 view .LVU2087
 6477 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6478              	.LVL719:
2153:src/display.c **** 	      odig++;
 6479              		.loc 1 2153 15 view .LVU2088
 6480 07dc 00F8013B 		strb	r3, [r0], #1
 6481              	.LVL720:
2154:src/display.c **** 	      dd--;
 6482              		.loc 1 2154 8 is_stmt 1 view .LVU2089
2155:src/display.c **** 	      exp--;
 6483              		.loc 1 2155 8 view .LVU2090
2156:src/display.c **** 	    case 0:
 6484              		.loc 1 2156 8 view .LVU2091
2156:src/display.c **** 	    case 0:
 6485              		.loc 1 2156 11 is_stmt 0 view .LVU2092
 6486 07e0 013D     		subs	r5, r5, #1
 6487              	.LVL721:
 6488              	.L508:
2158:src/display.c **** 	    };
 6489              		.loc 1 2158 8 is_stmt 1 view .LVU2093
2159:src/display.c **** 	    *obp++ = *p++;
 6490              		.loc 1 2159 7 view .LVU2094
2160:src/display.c **** 	    odig++;
 6491              		.loc 1 2160 6 view .LVU2095
2160:src/display.c **** 	    odig++;
 6492              		.loc 1 2160 17 is_stmt 0 view .LVU2096
 6493 07e2 4946     		mov	r1, r9
 6494              	.LVL722:
2160:src/display.c **** 	    odig++;
 6495              		.loc 1 2160 13 view .LVU2097
 6496 07e4 0346     		mov	r3, r0
 6497 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6498              	.LVL723:
2160:src/display.c **** 	    odig++;
 6499              		.loc 1 2160 13 view .LVU2098
 6500 07ea 03F802CB 		strb	ip, [r3], #2
2161:src/display.c **** 	    *obp++ = '.';
 6501              		.loc 1 2161 6 is_stmt 1 view .LVU2099
ARM GAS  /tmp/cc4E4VUn.s 			page 210


2162:src/display.c **** 	    for (i=1; i<count; i++) {
 6502              		.loc 1 2162 6 view .LVU2100
 6503              	.LVL724:
2163:src/display.c **** 	      *obp++ = *p++;
 6504              		.loc 1 2163 6 is_stmt 0 view .LVU2101
 6505 07ee 012A     		cmp	r2, #1
2162:src/display.c **** 	    for (i=1; i<count; i++) {
 6506              		.loc 1 2162 13 view .LVU2102
 6507 07f0 4FF02E0C 		mov	ip, #46
 6508 07f4 80F801C0 		strb	ip, [r0, #1]
2163:src/display.c **** 	      *obp++ = *p++;
 6509              		.loc 1 2163 6 is_stmt 1 view .LVU2103
 6510              	.LVL725:
2163:src/display.c **** 	      *obp++ = *p++;
 6511              		.loc 1 2163 16 view .LVU2104
2163:src/display.c **** 	      *obp++ = *p++;
 6512              		.loc 1 2163 6 is_stmt 0 view .LVU2105
 6513 07f8 53DD     		ble	.L579
2163:src/display.c **** 	      *obp++ = *p++;
 6514              		.loc 1 2163 6 view .LVU2106
 6515 07fa 0130     		adds	r0, r0, #1
 6516 07fc 9144     		add	r9, r9, r2
 6517              	.LVL726:
 6518              	.L513:
2164:src/display.c **** 	      odig++;
 6519              		.loc 1 2164 8 is_stmt 1 discriminator 3 view .LVU2107
2164:src/display.c **** 	      odig++;
 6520              		.loc 1 2164 15 is_stmt 0 discriminator 3 view .LVU2108
 6521 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6522              	.LVL727:
2164:src/display.c **** 	      odig++;
 6523              		.loc 1 2164 15 discriminator 3 view .LVU2109
 6524 0802 00F801CF 		strb	ip, [r0, #1]!
2165:src/display.c **** 	    }
 6525              		.loc 1 2165 8 is_stmt 1 discriminator 3 view .LVU2110
2163:src/display.c **** 	      *obp++ = *p++;
 6526              		.loc 1 2163 25 discriminator 3 view .LVU2111
2163:src/display.c **** 	      *obp++ = *p++;
 6527              		.loc 1 2163 16 discriminator 3 view .LVU2112
2163:src/display.c **** 	      *obp++ = *p++;
 6528              		.loc 1 2163 6 is_stmt 0 discriminator 3 view .LVU2113
 6529 0806 4945     		cmp	r1, r9
 6530 0808 F9D1     		bne	.L513
 6531 080a 013A     		subs	r2, r2, #1
 6532              	.LVL728:
2163:src/display.c **** 	      *obp++ = *p++;
 6533              		.loc 1 2163 6 discriminator 3 view .LVU2114
 6534 080c 1344     		add	r3, r3, r2
 6535 080e 1744     		add	r7, r7, r2
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6536              		.loc 1 2167 15 view .LVU2115
 6537 0810 4FF0010B 		mov	fp, #1
 6538 0814 44E5     		b	.L512
 6539              	.LVL729:
 6540              	.L509:
2147:src/display.c **** 	      odig++;
 6541              		.loc 1 2147 8 is_stmt 1 view .LVU2116
ARM GAS  /tmp/cc4E4VUn.s 			page 211


2147:src/display.c **** 	      odig++;
 6542              		.loc 1 2147 15 is_stmt 0 view .LVU2117
 6543 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6544 081a 8DF81430 		strb	r3, [sp, #20]
2148:src/display.c **** 	      dd--;
 6545              		.loc 1 2148 8 is_stmt 1 view .LVU2118
 6546              	.LVL730:
2149:src/display.c **** 	      exp--;
 6547              		.loc 1 2149 8 view .LVU2119
2150:src/display.c **** 	    case -2:
 6548              		.loc 1 2150 8 view .LVU2120
2150:src/display.c **** 	    case -2:
 6549              		.loc 1 2150 11 is_stmt 0 view .LVU2121
 6550 081e 013D     		subs	r5, r5, #1
 6551              	.LVL731:
2150:src/display.c **** 	    case -2:
 6552              		.loc 1 2150 11 view .LVU2122
 6553 0820 0327     		movs	r7, #3
2147:src/display.c **** 	      odig++;
 6554              		.loc 1 2147 19 view .LVU2123
 6555 0822 0DF14909 		add	r9, sp, #73
 6556              	.LVL732:
2147:src/display.c **** 	      odig++;
 6557              		.loc 1 2147 12 view .LVU2124
 6558 0826 0DF11500 		add	r0, sp, #21
 6559              	.LVL733:
2147:src/display.c **** 	      odig++;
 6560              		.loc 1 2147 12 view .LVU2125
 6561 082a D5E7     		b	.L511
 6562              	.LVL734:
 6563              	.L547:
2289:src/display.c **** 	  }
 6564              		.loc 1 2289 8 is_stmt 1 view .LVU2126
 6565 082c 2D21     		movs	r1, #45
 6566 082e A6F10900 		sub	r0, r6, #9
 6567 0832 FFF7FEFF 		bl	set_dig
 6568              	.LVL735:
 6569 0836 019B     		ldr	r3, [sp, #4]
 6570 0838 43E5     		b	.L543
 6571              	.LVL736:
 6572              	.L678:
 6573              	.LBB442:
 6574              	.LBB440:
 6575              	.LBB434:
1856:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6576              		.loc 1 1856 4 view .LVU2127
1859:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6577              		.loc 1 1859 4 view .LVU2128
1859:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6578              		.loc 1 1859 14 is_stmt 0 view .LVU2129
 6579 083a 08F10306 		add	r6, r8, #3
 6580              	.LVL737:
1860:src/display.c **** 	  if (grouping) {
 6581              		.loc 1 1860 4 is_stmt 1 view .LVU2130
 6582 083e 4749     		ldr	r1, .L683+12
 6583 0840 0D22     		movs	r2, #13
 6584 0842 3046     		mov	r0, r6
ARM GAS  /tmp/cc4E4VUn.s 			page 212


 6585 0844 FFF7FEFF 		bl	xcopy
 6586              	.LVL738:
1861:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6587              		.loc 1 1861 4 view .LVU2131
1862:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6588              		.loc 1 1862 6 view .LVU2132
 6589 0848 1322     		movs	r2, #19
 6590 084a 08EB0201 		add	r1, r8, r2
 6591 084e 08F11400 		add	r0, r8, #20
 6592 0852 FFF7FEFF 		bl	xcopy
 6593              	.LVL739:
1863:src/display.c **** 	    x += 3 + 13 + 7;
 6594              		.loc 1 1863 6 view .LVU2133
1864:src/display.c **** 	  }
 6595              		.loc 1 1864 8 is_stmt 0 view .LVU2134
 6596 0856 08F11705 		add	r5, r8, #23
 6597              	.LVL740:
1863:src/display.c **** 	    x += 3 + 13 + 7;
 6598              		.loc 1 1863 24 view .LVU2135
 6599 085a 88F81370 		strb	r7, [r8, #19]
1864:src/display.c **** 	  }
 6600              		.loc 1 1864 6 is_stmt 1 view .LVU2136
 6601              	.LVL741:
1877:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6602              		.loc 1 1877 4 view .LVU2137
1878:src/display.c **** 	}
 6603              		.loc 1 1878 4 view .LVU2138
1878:src/display.c **** 	}
 6604              		.loc 1 1878 6 is_stmt 0 view .LVU2139
 6605 085e 1B24     		movs	r4, #27
 6606              	.LVL742:
 6607              	.L463:
1878:src/display.c **** 	}
 6608              		.loc 1 1878 6 view .LVU2140
 6609              	.LBE434:
1912:src/display.c **** 	  }
 6610              		.loc 1 1912 6 is_stmt 1 view .LVU2141
 6611              	.LBB435:
 6612              	.LBI435:
 367:src/display.c ****   if (sep == SEP_NONE)
 6613              		.loc 1 367 14 view .LVU2142
 6614              	.LBB436:
 368:src/display.c ****     return res;
 6615              		.loc 1 368 3 view .LVU2143
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6616              		.loc 1 370 3 view .LVU2144
 6617 0860 2046     		mov	r0, r4
 6618 0862 5146     		mov	r1, r10
 6619              	.LBE436:
 6620              	.LBE435:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6621              		.loc 1 1911 38 is_stmt 0 view .LVU2145
 6622 0864 1B34     		adds	r4, r4, #27
 6623              	.LVL743:
 6624              	.LBB438:
 6625              	.LBB437:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
ARM GAS  /tmp/cc4E4VUn.s 			page 213


 6626              		.loc 1 1911 38 view .LVU2146
 6627 0866 FFF7FEFF 		bl	set_separator.part.0
 6628              	.LVL744:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6629              		.loc 1 1911 38 view .LVU2147
 6630              	.LBE437:
 6631              	.LBE438:
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6632              		.loc 1 1911 36 is_stmt 1 view .LVU2148
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1911 11 view .LVU2149
1911:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1911 4 is_stmt 0 view .LVU2150
 6635 086a 512C     		cmp	r4, #81
 6636 086c F8DD     		ble	.L463
 6637 086e 6C1E     		subs	r4, r5, #1
 6638              	.LVL745:
 6639              	.L465:
1917:src/display.c **** 
 6640              		.loc 1 1917 4 is_stmt 1 view .LVU2151
 6641 0870 5846     		mov	r0, fp
 6642 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1916:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1916 33 is_stmt 0 view .LVU2152
 6644 0876 0BF1090B 		add	fp, fp, #9
 6645              	.LVL746:
1917:src/display.c **** 
 6646              		.loc 1 1917 4 view .LVU2153
 6647 087a FFF7FEFF 		bl	set_dig
 6648              	.LVL747:
1916:src/display.c **** 	  set_dig(j, x[i]);
 6649              		.loc 1 1916 26 is_stmt 1 view .LVU2154
1916:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1916 18 view .LVU2155
1916:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1916 2 is_stmt 0 view .LVU2156
 6652 087e BBF16C0F 		cmp	fp, #108
 6653 0882 F5D1     		bne	.L465
1919:src/display.c **** 	set_status(upper_str - negative);
 6654              		.loc 1 1919 2 is_stmt 1 view .LVU2157
1919:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 1919 5 is_stmt 0 view .LVU2158
 6656 0884 0023     		movs	r3, #0
1920:src/display.c ****       }
 6657              		.loc 1 1920 2 view .LVU2159
 6658 0886 3046     		mov	r0, r6
1919:src/display.c **** 	set_status(upper_str - negative);
 6659              		.loc 1 1919 5 view .LVU2160
 6660 0888 2B70     		strb	r3, [r5]
1920:src/display.c ****       }
 6661              		.loc 1 1920 2 is_stmt 1 view .LVU2161
 6662 088a FFF7FEFF 		bl	set_status
 6663              	.LVL748:
1921:src/display.c **** 
 6664              		.loc 1 1921 7 is_stmt 0 view .LVU2162
 6665 088e 43E5     		b	.L444
 6666              	.LVL749:
ARM GAS  /tmp/cc4E4VUn.s 			page 214


 6667              	.L675:
1921:src/display.c **** 
 6668              		.loc 1 1921 7 view .LVU2163
 6669              	.LBE440:
 6670              	.LBE442:
1977:src/display.c **** 	      return;
 6671              		.loc 1 1977 8 is_stmt 1 view .LVU2164
 6672 0890 3046     		mov	r0, r6
 6673 0892 FFF7FEFF 		bl	set_x_hms
 6674              	.LVL750:
1978:src/display.c **** 	    }
 6675              		.loc 1 1978 8 view .LVU2165
 6676 0896 3FE5     		b	.L444
 6677              	.LVL751:
 6678              	.L576:
2139:src/display.c **** 	  if (count != *display_digits)
 6679              		.loc 1 2139 15 is_stmt 0 view .LVU2166
 6680 0898 3246     		mov	r2, r6
 6681 089a A3E4     		b	.L504
 6682              	.LVL752:
 6683              	.L577:
2144:src/display.c **** 	    case -1:
 6684              		.loc 1 2144 24 view .LVU2167
 6685 089c 0127     		movs	r7, #1
 6686 089e 4046     		mov	r0, r8
 6687 08a0 9FE7     		b	.L508
 6688              	.LVL753:
 6689              	.L579:
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6690              		.loc 1 2167 15 view .LVU2168
 6691 08a2 4FF0010B 		mov	fp, #1
 6692 08a6 FBE4     		b	.L512
 6693              	.LVL754:
 6694              	.L551:
 6695              	.LBB443:
 6696              	.LBB419:
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6697              		.loc 1 2167 15 view .LVU2169
 6698 08a8 3046     		mov	r0, r6
 6699 08aa 0193     		str	r3, [sp, #4]
 6700 08ac FFF7FEFF 		bl	set_separator.part.0
 6701              	.LVL755:
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6702              		.loc 1 2167 15 view .LVU2170
 6703 08b0 019B     		ldr	r3, [sp, #4]
 6704 08b2 0446     		mov	r4, r0
 6705              	.LVL756:
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6706              		.loc 1 2167 15 view .LVU2171
 6707 08b4 F9E5     		b	.L549
 6708              	.LVL757:
 6709              	.L489:
2167:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6710              		.loc 1 2167 15 view .LVU2172
 6711              	.LBE419:
 6712              	.LBE443:
2117:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
ARM GAS  /tmp/cc4E4VUn.s 			page 215


 6713              		.loc 1 2117 4 is_stmt 1 view .LVU2173
2117:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6714              		.loc 1 2117 7 is_stmt 0 view .LVU2174
 6715 08b6 4B45     		cmp	r3, r9
 6716 08b8 7FF460AC 		bne	.L560
 6717 08bc 63E5     		b	.L561
 6718              	.LVL758:
 6719              	.L460:
 6720              	.LBB444:
 6721              	.LBB441:
1902:src/display.c **** 	    x[10] = '\0';
 6722              		.loc 1 1902 6 is_stmt 1 view .LVU2175
1903:src/display.c **** 	  }
 6723              		.loc 1 1903 6 view .LVU2176
1902:src/display.c **** 	    x[10] = '\0';
 6724              		.loc 1 1902 11 is_stmt 0 view .LVU2177
 6725 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6726 08c2 21E7     		b	.L462
 6727              	.LVL759:
 6728              	.L677:
 6729              	.LBB439:
1827:src/display.c **** 
 6730              		.loc 1 1827 4 is_stmt 1 view .LVU2178
1829:src/display.c **** 	  xcopy(x, small_minus, 4);
 6731              		.loc 1 1829 4 view .LVU2179
 6732 08c4 2222     		movs	r2, #34
 6733 08c6 0DF11501 		add	r1, sp, #21
 6734 08ca 06A8     		add	r0, sp, #24
 6735              	.LVL760:
1829:src/display.c **** 	  xcopy(x, small_minus, 4);
 6736              		.loc 1 1829 4 is_stmt 0 view .LVU2180
 6737 08cc FFF7FEFF 		bl	xcopy
 6738              	.LVL761:
1830:src/display.c **** 	  x += 4;
 6739              		.loc 1 1830 4 is_stmt 1 view .LVU2181
 6740 08d0 4046     		mov	r0, r8
 6741 08d2 2349     		ldr	r1, .L683+16
 6742 08d4 0422     		movs	r2, #4
 6743 08d6 FFF7FEFF 		bl	xcopy
 6744              	.LVL762:
1831:src/display.c **** 	  negative = 4;
 6745              		.loc 1 1831 4 view .LVU2182
1832:src/display.c **** #else
 6746              		.loc 1 1832 4 view .LVU2183
1831:src/display.c **** 	  negative = 4;
 6747              		.loc 1 1831 6 is_stmt 0 view .LVU2184
 6748 08da 0DF11808 		add	r8, sp, #24
 6749              	.LVL763:
1832:src/display.c **** #else
 6750              		.loc 1 1832 13 view .LVU2185
 6751 08de 0426     		movs	r6, #4
 6752              	.LVL764:
1832:src/display.c **** #else
 6753              		.loc 1 1832 13 view .LVU2186
 6754              	.LBE439:
 6755 08e0 C7E6     		b	.L456
 6756              	.LVL765:
ARM GAS  /tmp/cc4E4VUn.s 			page 216


 6757              	.L514:
1832:src/display.c **** #else
 6758              		.loc 1 1832 13 view .LVU2187
 6759              	.LBE441:
 6760              	.LBE444:
2183:src/display.c **** 	    odig++;
 6761              		.loc 1 2183 6 is_stmt 1 view .LVU2188
2184:src/display.c **** 	    *obp++ = '.';
 6762              		.loc 1 2184 6 view .LVU2189
2185:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6763              		.loc 1 2185 6 view .LVU2190
2183:src/display.c **** 	    odig++;
 6764              		.loc 1 2183 13 is_stmt 0 view .LVU2191
 6765 08e2 42F63063 		movw	r3, #11824
2186:src/display.c **** 	      *obp++ = '0';
 6766              		.loc 1 2186 6 view .LVU2192
 6767 08e6 691C     		adds	r1, r5, #1
2183:src/display.c **** 	    odig++;
 6768              		.loc 1 2183 13 view .LVU2193
 6769 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2186:src/display.c **** 	      *obp++ = '0';
 6770              		.loc 1 2186 6 is_stmt 1 view .LVU2194
 6771              	.LVL766:
2186:src/display.c **** 	      *obp++ = '0';
 6772              		.loc 1 2186 20 view .LVU2195
2186:src/display.c **** 	      *obp++ = '0';
 6773              		.loc 1 2186 6 is_stmt 0 view .LVU2196
 6774 08ec 2CD0     		beq	.L580
 6775 08ee C5F10100 		rsb	r0, r5, #1
2185:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6776              		.loc 1 2185 10 view .LVU2197
 6777 08f2 0DF11603 		add	r3, sp, #22
 6778              	.LVL767:
2185:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6779              		.loc 1 2185 10 view .LVU2198
 6780 08f6 4044     		add	r0, r0, r8
 6781 08f8 1946     		mov	r1, r3
 6782              	.LVL768:
2187:src/display.c **** 	      odig++;
 6783              		.loc 1 2187 15 view .LVU2199
 6784 08fa 3027     		movs	r7, #48
 6785              	.LVL769:
 6786              	.L521:
2187:src/display.c **** 	      odig++;
 6787              		.loc 1 2187 8 is_stmt 1 discriminator 3 view .LVU2200
2187:src/display.c **** 	      odig++;
 6788              		.loc 1 2187 15 is_stmt 0 discriminator 3 view .LVU2201
 6789 08fc 01F8017B 		strb	r7, [r1], #1
 6790              	.LVL770:
2188:src/display.c **** 	    }
 6791              		.loc 1 2188 8 is_stmt 1 discriminator 3 view .LVU2202
2186:src/display.c **** 	      *obp++ = '0';
 6792              		.loc 1 2186 25 discriminator 3 view .LVU2203
2186:src/display.c **** 	      *obp++ = '0';
 6793              		.loc 1 2186 20 discriminator 3 view .LVU2204
2186:src/display.c **** 	      *obp++ = '0';
 6794              		.loc 1 2186 6 is_stmt 0 discriminator 3 view .LVU2205
ARM GAS  /tmp/cc4E4VUn.s 			page 217


 6795 0900 8142     		cmp	r1, r0
 6796 0902 FBD1     		bne	.L521
 6797 0904 E943     		mvns	r1, r5
 6798              	.LVL771:
2186:src/display.c **** 	      *obp++ = '0';
 6799              		.loc 1 2186 6 discriminator 3 view .LVU2206
 6800 0906 0B44     		add	r3, r3, r1
 6801 0908 6F42     		rsbs	r7, r5, #0
 6802              	.L520:
 6803              	.LVL772:
2190:src/display.c **** 	      *obp++ = *p++;
 6804              		.loc 1 2190 16 is_stmt 1 view .LVU2207
2190:src/display.c **** 	      *obp++ = *p++;
 6805              		.loc 1 2190 6 is_stmt 0 view .LVU2208
 6806 090a 002A     		cmp	r2, #0
 6807 090c 7FF7C8AC 		ble	.L512
 6808 0910 02F1FF3C 		add	ip, r2, #-1
 6809 0914 9C44     		add	ip, ip, r3
 6810 0916 591E     		subs	r1, r3, #1
 6811              	.LVL773:
 6812              	.L522:
2191:src/display.c **** 	      odig++;
 6813              		.loc 1 2191 8 is_stmt 1 discriminator 3 view .LVU2209
2191:src/display.c **** 	      odig++;
 6814              		.loc 1 2191 15 is_stmt 0 discriminator 3 view .LVU2210
 6815 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6816              	.LVL774:
2191:src/display.c **** 	      odig++;
 6817              		.loc 1 2191 15 discriminator 3 view .LVU2211
 6818 091c 01F8010F 		strb	r0, [r1, #1]!
2192:src/display.c **** 	    }
 6819              		.loc 1 2192 8 is_stmt 1 discriminator 3 view .LVU2212
2190:src/display.c **** 	      *obp++ = *p++;
 6820              		.loc 1 2190 25 discriminator 3 view .LVU2213
 6821              	.LVL775:
2190:src/display.c **** 	      *obp++ = *p++;
 6822              		.loc 1 2190 16 discriminator 3 view .LVU2214
2190:src/display.c **** 	      *obp++ = *p++;
 6823              		.loc 1 2190 6 is_stmt 0 discriminator 3 view .LVU2215
 6824 0920 8C45     		cmp	ip, r1
 6825 0922 F9D1     		bne	.L522
 6826              	.LVL776:
2190:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2190 6 discriminator 3 view .LVU2216
 6828 0924 1344     		add	r3, r3, r2
 6829              	.LVL777:
2190:src/display.c **** 	      *obp++ = *p++;
 6830              		.loc 1 2190 6 discriminator 3 view .LVU2217
 6831 0926 1744     		add	r7, r7, r2
 6832 0928 BAE4     		b	.L512
 6833              	.LVL778:
 6834              	.L676:
2133:src/display.c **** 
 6835              		.loc 1 2133 2 is_stmt 1 view .LVU2218
2133:src/display.c **** 
 6836              		.loc 1 2133 40 is_stmt 0 view .LVU2219
 6837 092a 0AF10102 		add	r2, r10, #1
ARM GAS  /tmp/cc4E4VUn.s 			page 218


2133:src/display.c **** 
 6838              		.loc 1 2133 9 view .LVU2220
 6839 092e 09EB0203 		add	r3, r9, r2
 6840              	.LVL779:
2133:src/display.c **** 
 6841              		.loc 1 2133 45 is_stmt 1 view .LVU2221
2133:src/display.c **** 
 6842              		.loc 1 2133 2 is_stmt 0 view .LVU2222
 6843 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6844 0936 002A     		cmp	r2, #0
 6845 0938 3FF496AC 		beq	.L658
2122:src/display.c **** 	      extra_digits = 0;
 6846              		.loc 1 2122 37 view .LVU2223
 6847 093c 0227     		movs	r7, #2
 6848 093e 2FE4     		b	.L559
 6849              	.LVL780:
 6850              	.L581:
2213:src/display.c **** 	    *obp++ = '.';
 6851              		.loc 1 2213 10 view .LVU2224
 6852 0940 0127     		movs	r7, #1
2214:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6853              		.loc 1 2214 10 view .LVU2225
 6854 0942 0DF11603 		add	r3, sp, #22
 6855              	.LVL781:
2214:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6856              		.loc 1 2214 10 view .LVU2226
 6857 0946 1AE7     		b	.L531
 6858              	.LVL782:
 6859              	.L580:
2184:src/display.c **** 	    *obp++ = '.';
 6860              		.loc 1 2184 10 view .LVU2227
 6861 0948 0127     		movs	r7, #1
2185:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6862              		.loc 1 2185 10 view .LVU2228
 6863 094a 0DF11603 		add	r3, sp, #22
 6864              	.LVL783:
2185:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6865              		.loc 1 2185 10 view .LVU2229
 6866 094e DCE7     		b	.L520
 6867              	.L684:
 6868              		.align	2
 6869              	.L683:
 6870 0950 00000000 		.word	.LANCHOR1
 6871 0954 18FCFFFF 		.word	-1000
 6872 0958 D34D6210 		.word	274877907
 6873 095c 00000000 		.word	.LANCHOR14
 6874 0960 00000000 		.word	.LANCHOR13
 6875              		.cfi_endproc
 6876              	.LFE27:
 6878              		.section	.text.set_x,"ax",%progbits
 6879              		.align	1
 6880              		.p2align 2,,3
 6881              		.syntax unified
 6882              		.thumb
 6883              		.thumb_func
 6884              		.fpu fpv4-sp-d16
 6886              	set_x:
ARM GAS  /tmp/cc4E4VUn.s 			page 219


 6887              	.LVL784:
 6888              	.LFB26:
1928:src/display.c **** 	decNumber z;
 6889              		.loc 1 1928 66 is_stmt 1 view -0
 6890              		.cfi_startproc
 6891              		@ args = 0, pretend = 0, frame = 40
 6892              		@ frame_needed = 0, uses_anonymous_args = 0
1929:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6893              		.loc 1 1929 2 view .LVU2231
1930:src/display.c **** 
 6894              		.loc 1 1930 2 view .LVU2232
1928:src/display.c **** 	decNumber z;
 6895              		.loc 1 1928 66 is_stmt 0 view .LVU2233
 6896 0000 30B5     		push	{r4, r5, lr}
 6897              		.cfi_def_cfa_offset 12
 6898              		.cfi_offset 4, -12
 6899              		.cfi_offset 5, -8
 6900              		.cfi_offset 14, -4
 6901 0002 8BB0     		sub	sp, sp, #44
 6902              		.cfi_def_cfa_offset 56
1930:src/display.c **** 
 6903              		.loc 1 1930 6 view .LVU2234
 6904 0004 0C23     		movs	r3, #12
1933:src/display.c **** 	else
 6905              		.loc 1 1933 4 view .LVU2235
 6906 0006 01AD     		add	r5, sp, #4
1928:src/display.c **** 	decNumber z;
 6907              		.loc 1 1928 66 view .LVU2236
 6908 0008 0C46     		mov	r4, r1
1930:src/display.c **** 
 6909              		.loc 1 1930 6 view .LVU2237
 6910 000a 0093     		str	r3, [sp]
1932:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6911              		.loc 1 1932 2 is_stmt 1 view .LVU2238
1933:src/display.c **** 	else
 6912              		.loc 1 1933 4 is_stmt 0 view .LVU2239
 6913 000c 2946     		mov	r1, r5
 6914              	.LVL785:
1932:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6915              		.loc 1 1932 5 view .LVU2240
 6916 000e 42B1     		cbz	r2, .L686
1933:src/display.c **** 	else
 6917              		.loc 1 1933 4 is_stmt 1 view .LVU2241
 6918 0010 FFF7FEFF 		bl	decimal128ToNumber
 6919              	.LVL786:
1936:src/display.c ****       }
 6920              		.loc 1 1936 2 view .LVU2242
 6921 0014 2146     		mov	r1, r4
 6922 0016 2846     		mov	r0, r5
 6923 0018 6A46     		mov	r2, sp
 6924 001a FFF7FEFF 		bl	set_x_dn
 6925              	.LVL787:
1937:src/display.c **** 
 6926              		.loc 1 1937 7 is_stmt 0 view .LVU2243
 6927 001e 0BB0     		add	sp, sp, #44
 6928              		.cfi_remember_state
 6929              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc4E4VUn.s 			page 220


 6930              		@ sp needed
 6931 0020 30BD     		pop	{r4, r5, pc}
 6932              	.LVL788:
 6933              	.L686:
 6934              		.cfi_restore_state
1935:src/display.c **** 	set_x_dn(&z, res, &digits);
 6935              		.loc 1 1935 4 is_stmt 1 view .LVU2244
 6936 0022 FFF7FEFF 		bl	decimal64ToNumber
 6937              	.LVL789:
1936:src/display.c ****       }
 6938              		.loc 1 1936 2 view .LVU2245
 6939 0026 2146     		mov	r1, r4
 6940 0028 2846     		mov	r0, r5
 6941 002a 6A46     		mov	r2, sp
 6942 002c FFF7FEFF 		bl	set_x_dn
 6943              	.LVL790:
1937:src/display.c **** 
 6944              		.loc 1 1937 7 is_stmt 0 view .LVU2246
 6945 0030 0BB0     		add	sp, sp, #44
 6946              		.cfi_def_cfa_offset 12
 6947              		@ sp needed
 6948 0032 30BD     		pop	{r4, r5, pc}
1937:src/display.c **** 
 6949              		.loc 1 1937 7 view .LVU2247
 6950              		.cfi_endproc
 6951              	.LFE26:
 6953              		.section	.text.format_reg,"ax",%progbits
 6954              		.align	1
 6955              		.p2align 2,,3
 6956              		.global	format_reg
 6957              		.syntax unified
 6958              		.thumb
 6959              		.thumb_func
 6960              		.fpu fpv4-sp-d16
 6962              	format_reg:
 6963              	.LVL791:
 6964              	.LFB28:
2344:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6965              		.loc 1 2344 45 is_stmt 1 view -0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 40
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
2345:src/display.c **** 
 6969              		.loc 1 2345 2 view .LVU2249
2344:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6970              		.loc 1 2344 45 is_stmt 0 view .LVU2250
 6971 0000 30B5     		push	{r4, r5, lr}
 6972              		.cfi_def_cfa_offset 12
 6973              		.cfi_offset 4, -12
 6974              		.cfi_offset 5, -8
 6975              		.cfi_offset 14, -4
 6976 0002 8BB0     		sub	sp, sp, #44
 6977              		.cfi_def_cfa_offset 56
2344:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6978              		.loc 1 2344 45 view .LVU2251
 6979 0004 0C46     		mov	r4, r1
 6980 0006 0546     		mov	r5, r0
ARM GAS  /tmp/cc4E4VUn.s 			page 221


2345:src/display.c **** 
 6981              		.loc 1 2345 28 view .LVU2252
 6982 0008 FFF7FEFF 		bl	get_reg_n
 6983              	.LVL792:
2347:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6984              		.loc 1 2347 6 view .LVU2253
 6985 000c 154B     		ldr	r3, .L696
 6986 000e 1B68     		ldr	r3, [r3]
 6987 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6988              	.LVL793:
2347:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6989              		.loc 1 2347 2 is_stmt 1 view .LVU2254
2347:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6990              		.loc 1 2347 5 is_stmt 0 view .LVU2255
 6991 0014 D207     		lsls	r2, r2, #31
 6992 0016 1DD4     		bmi	.L694
2350:src/display.c **** 	  decNumber x;
 6993              		.loc 1 2350 7 is_stmt 1 view .LVU2256
2350:src/display.c **** 	  decNumber x;
 6994              		.loc 1 2350 10 is_stmt 0 view .LVU2257
 6995 0018 44B1     		cbz	r4, .L695
 6996              	.L692:
2361:src/display.c ****       }
 6997              		.loc 1 2361 4 is_stmt 1 view .LVU2258
2361:src/display.c ****       }
 6998              		.loc 1 2361 24 is_stmt 0 view .LVU2259
 6999 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2361:src/display.c ****       }
 7000              		.loc 1 2361 4 view .LVU2260
 7001 001e 2146     		mov	r1, r4
 7002 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7003 0024 FFF7FEFF 		bl	set_x
 7004              	.LVL794:
2362:src/display.c **** 
 7005              		.loc 1 2362 7 view .LVU2261
 7006 0028 0BB0     		add	sp, sp, #44
 7007              		.cfi_remember_state
 7008              		.cfi_def_cfa_offset 12
 7009              		@ sp needed
 7010 002a 30BD     		pop	{r4, r5, pc}
 7011              	.LVL795:
 7012              	.L695:
 7013              		.cfi_restore_state
2350:src/display.c **** 	  decNumber x;
 7014              		.loc 1 2350 32 discriminator 1 view .LVU2262
 7015 002c 0E4A     		ldr	r2, .L696+4
2350:src/display.c **** 	  decNumber x;
 7016              		.loc 1 2350 23 discriminator 1 view .LVU2263
 7017 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7018 0030 012A     		cmp	r2, #1
 7019 0032 F2D9     		bls	.L692
 7020              	.LVL796:
 7021              	.LBB448:
 7022              	.LBI448:
2344:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7023              		.loc 1 2344 12 is_stmt 1 view .LVU2264
 7024              	.LBB449:
ARM GAS  /tmp/cc4E4VUn.s 			page 222


 7025              	.LBB450:
2351:src/display.c **** 	  int s;
 7026              		.loc 1 2351 4 view .LVU2265
2352:src/display.c **** 	  unsigned long long int v;
 7027              		.loc 1 2352 4 view .LVU2266
2353:src/display.c **** 
 7028              		.loc 1 2353 4 view .LVU2267
2355:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7029              		.loc 1 2355 4 view .LVU2268
 7030 0034 2946     		mov	r1, r5
 7031 0036 01A8     		add	r0, sp, #4
 7032              	.LVL797:
2355:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7033              		.loc 1 2355 4 is_stmt 0 view .LVU2269
 7034 0038 FFF7FEFF 		bl	getRegister
 7035              	.LVL798:
2356:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7036              		.loc 1 2356 4 is_stmt 1 view .LVU2270
2356:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7037              		.loc 1 2356 8 is_stmt 0 view .LVU2271
 7038 003c 01A8     		add	r0, sp, #4
 7039 003e 6946     		mov	r1, sp
 7040 0040 FFF7FEFF 		bl	dn_to_ull
 7041              	.LVL799:
2357:src/display.c **** 	}
 7042              		.loc 1 2357 4 is_stmt 1 view .LVU2272
 7043 0044 009A     		ldr	r2, [sp]
 7044 0046 FFF7FEFF 		bl	build_value
 7045              	.LVL800:
2357:src/display.c **** 	}
 7046              		.loc 1 2357 4 is_stmt 0 view .LVU2273
 7047 004a 2246     		mov	r2, r4
 7048 004c FFF7FEFF 		bl	set_int_x
 7049              	.LVL801:
 7050              	.LBE450:
 7051              	.LBE449:
 7052              	.LBE448:
2362:src/display.c **** 
 7053              		.loc 1 2362 7 view .LVU2274
 7054 0050 0BB0     		add	sp, sp, #44
 7055              		.cfi_remember_state
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0052 30BD     		pop	{r4, r5, pc}
 7059              	.LVL802:
 7060              	.L694:
 7061              		.cfi_restore_state
2348:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7062              		.loc 1 2348 4 is_stmt 1 view .LVU2275
 7063 0054 2846     		mov	r0, r5
 7064              	.LVL803:
2348:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7065              		.loc 1 2348 4 is_stmt 0 view .LVU2276
 7066 0056 FFF7FEFF 		bl	get_reg_n_int
 7067              	.LVL804:
 7068 005a 2246     		mov	r2, r4
 7069 005c FFF7FEFF 		bl	set_int_x
ARM GAS  /tmp/cc4E4VUn.s 			page 223


 7070              	.LVL805:
2362:src/display.c **** 
 7071              		.loc 1 2362 7 view .LVU2277
 7072 0060 0BB0     		add	sp, sp, #44
 7073              		.cfi_def_cfa_offset 12
 7074              		@ sp needed
 7075 0062 30BD     		pop	{r4, r5, pc}
 7076              	.LVL806:
 7077              	.L697:
2362:src/display.c **** 
 7078              		.loc 1 2362 7 view .LVU2278
 7079              		.align	2
 7080              	.L696:
 7081 0064 00000000 		.word	main_ram
 7082 0068 00000000 		.word	StateWhileOn
 7083              		.cfi_endproc
 7084              	.LFE28:
 7086              		.section	.text.set_status_right,"ax",%progbits
 7087              		.align	1
 7088              		.p2align 2,,3
 7089              		.syntax unified
 7090              		.thumb
 7091              		.thumb_func
 7092              		.fpu fpv4-sp-d16
 7094              	set_status_right:
 7095              	.LVL807:
 7096              	.LFB47:
3507:src/display.c ****       static void set_status_top(const char *str) {
3508:src/display.c **** 	if (no_status_top) return;
3509:src/display.c **** 	if (State2.runmode) {
3510:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3511:src/display.c **** 	}
3512:src/display.c **** 	else {
3513:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3514:src/display.c **** 	}
3515:src/display.c ****       }
3516:src/display.c **** #ifdef TOP_ROW
3517:src/display.c ****       static void set_status_top_always(const char *str) {
3518:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3519:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3520:src/display.c ****       }
3521:src/display.c **** #endif
3522:src/display.c **** 
3523:src/display.c ****       /*
3524:src/display.c ****        *  Display messages (global function)
3525:src/display.c ****        */
3526:src/display.c ****       extern void message(const char *str1, const char *str2)
3527:src/display.c ****       {
3528:src/display.c **** 	State2.disp_freeze = 0;
3529:src/display.c **** 	State2.disp_small = 0;
3530:src/display.c **** 	WasDataEntry = 0;
3531:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3532:src/display.c **** 	  // Complete redraw necessary
3533:src/display.c **** 	  DispMsg = str1;
3534:src/display.c **** 	  display();
3535:src/display.c **** 	}
3536:src/display.c **** 	else {
ARM GAS  /tmp/cc4E4VUn.s 			page 224


3537:src/display.c **** 	  if ( str2 != NULL ) {
3538:src/display.c **** 	    reset_disp();
3539:src/display.c **** 	    ShowRPN = 0;
3540:src/display.c **** 	    set_annunciators();
3541:src/display.c **** 	    set_digits_string( str2, 0 );
3542:src/display.c **** 	  }
3543:src/display.c **** 	  set_status( str1 );
3544:src/display.c **** 	  finish_display();// message
3545:src/display.c **** 	}
3546:src/display.c ****       }
3547:src/display.c **** 
3548:src/display.c **** #ifdef INCLUDE_STOPWATCH
3549:src/display.c **** 
3550:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3551:src/display.c **** 	int j = SEGS_EXP_BASE;
3552:src/display.c **** 	for (; *exponent!=0; exponent++) {
3553:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3554:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3555:src/display.c **** 	}
3556:src/display.c ****       }
3557:src/display.c **** 
3558:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3559:src/display.c ****       {
3560:src/display.c **** #ifndef REALBUILD
3561:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3562:src/display.c **** #endif
3563:src/display.c **** 	reset_disp();
3564:src/display.c **** 	set_dot(DEG);
3565:src/display.c **** 	set_digits_string( str2, 0 );
3566:src/display.c **** 	State2.disp_small = force_small;
3567:src/display.c **** 	if( exponent!=NULL ) {
3568:src/display.c **** 	  stopwatch_exponent(exponent);
3569:src/display.c **** 	}
3570:src/display.c **** 	set_status( str1 );
3571:src/display.c **** 	finish_display();
3572:src/display.c ****       }
3573:src/display.c **** 
3574:src/display.c **** 
3575:src/display.c **** #endif // INCLUDE_STOPWATCH
3576:src/display.c **** 
3577:src/display.c ****       /* Display the right hand characters from the given string.
3578:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3579:src/display.c ****        * and reduce font size if required.
3580:src/display.c ****        */
3581:src/display.c ****       static void set_status_right(const char *str) {
 7097              		.loc 1 3581 53 is_stmt 1 view -0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 0
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
3582:src/display.c **** 	unsigned int x = 0;
 7101              		.loc 1 3582 2 view .LVU2280
3583:src/display.c **** 	const char *p;
 7102              		.loc 1 3583 2 view .LVU2281
3584:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7103              		.loc 1 3584 2 view .LVU2282
3581:src/display.c **** 	unsigned int x = 0;
 7104              		.loc 1 3581 53 is_stmt 0 view .LVU2283
ARM GAS  /tmp/cc4E4VUn.s 			page 225


 7105 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7106              		.cfi_def_cfa_offset 28
 7107              		.cfi_offset 4, -28
 7108              		.cfi_offset 5, -24
 7109              		.cfi_offset 6, -20
 7110              		.cfi_offset 7, -16
 7111              		.cfi_offset 8, -12
 7112              		.cfi_offset 9, -8
 7113              		.cfi_offset 14, -4
 7114              		.loc 1 3584 23 view .LVU2284
 7115 0004 194B     		ldr	r3, .L713
 7116              		.loc 1 3584 41 view .LVU2285
 7117 0006 93F91630 		ldrsb	r3, [r3, #22]
 7118 000a 002B     		cmp	r3, #0
3581:src/display.c **** 	unsigned int x = 0;
 7119              		.loc 1 3581 53 view .LVU2286
 7120 000c 83B0     		sub	sp, sp, #12
 7121              		.cfi_def_cfa_offset 40
3581:src/display.c **** 	unsigned int x = 0;
 7122              		.loc 1 3581 53 view .LVU2287
 7123 000e 0646     		mov	r6, r0
 7124              		.loc 1 3584 41 view .LVU2288
 7125 0010 23DA     		bge	.L712
 7126              	.LVL808:
 7127              	.L699:
 7128              		.loc 1 3584 12 view .LVU2289
 7129 0012 4FF00108 		mov	r8, #1
3585:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7130              		.loc 1 3585 36 view .LVU2290
 7131 0016 4FF48077 		mov	r7, #256
 7132              	.L700:
 7133              	.LVL809:
3586:src/display.c **** 
3587:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7134              		.loc 1 3587 2 is_stmt 1 discriminator 4 view .LVU2291
 7135              		.loc 1 3587 14 discriminator 4 view .LVU2292
 7136              		.loc 1 3587 2 is_stmt 0 discriminator 4 view .LVU2293
 7137 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7138 001c 3446     		mov	r4, r6
 7139 001e 1BB1     		cbz	r3, .L701
 7140              	.LVL810:
 7141              	.L702:
 7142              		.loc 1 3587 30 is_stmt 1 discriminator 3 view .LVU2294
 7143              		.loc 1 3587 26 discriminator 3 view .LVU2295
 7144              		.loc 1 3587 14 discriminator 3 view .LVU2296
 7145              		.loc 1 3587 2 is_stmt 0 discriminator 3 view .LVU2297
 7146 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7147              	.LVL811:
 7148              		.loc 1 3587 2 discriminator 3 view .LVU2298
 7149 0024 002B     		cmp	r3, #0
 7150 0026 FBD1     		bne	.L702
 7151              	.L701:
3582:src/display.c **** 	const char *p;
 7152              		.loc 1 3582 15 view .LVU2299
 7153 0028 0025     		movs	r5, #0
 7154 002a 06E0     		b	.L703
 7155              	.LVL812:
ARM GAS  /tmp/cc4E4VUn.s 			page 226


 7156              	.L704:
 7157              	.LBB451:
3588:src/display.c **** 	while (--p >= str) {
3589:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7158              		.loc 1 3589 27 view .LVU2300
 7159 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3590:src/display.c **** 
3591:src/display.c **** 	  x += charlengths(c);
 7160              		.loc 1 3591 9 view .LVU2301
 7161 002e 3844     		add	r0, r0, r7
 7162 0030 FFF7FEFF 		bl	charlengths
 7163              	.LVL813:
 7164              		.loc 1 3591 6 view .LVU2302
 7165 0034 0544     		add	r5, r5, r0
 7166              	.LVL814:
3592:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7167              		.loc 1 3592 4 is_stmt 1 view .LVU2303
 7168              		.loc 1 3592 7 is_stmt 0 view .LVU2304
 7169 0036 4B2D     		cmp	r5, #75
 7170 0038 03D8     		bhi	.L705
 7171              	.LVL815:
 7172              	.L703:
3589:src/display.c **** 
 7173              		.loc 1 3589 4 is_stmt 1 view .LVU2305
3589:src/display.c **** 
 7174              		.loc 1 3589 4 is_stmt 0 view .LVU2306
 7175              	.LBE451:
3588:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7176              		.loc 1 3588 8 is_stmt 1 view .LVU2307
 7177 003a A146     		mov	r9, r4
 7178 003c 013C     		subs	r4, r4, #1
 7179              	.LVL816:
 7180              	.LBB452:
3591:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7181              		.loc 1 3591 4 view .LVU2308
3591:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7182              		.loc 1 3591 4 is_stmt 0 view .LVU2309
 7183              	.LBE452:
3588:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7184              		.loc 1 3588 8 view .LVU2310
 7185 003e A642     		cmp	r6, r4
 7186 0040 F4D9     		bls	.L704
 7187              	.LVL817:
 7188              	.L705:
3593:src/display.c **** 	    break;
3594:src/display.c **** 	}
3595:src/display.c **** 	set_status_sized(p+1, toolarge);
 7189              		.loc 1 3595 2 is_stmt 1 view .LVU2311
 7190              	.LBB453:
 7191              	.LBI453:
3346:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7192              		.loc 1 3346 19 view .LVU2312
 7193              	.LBB454:
3347:src/display.c ****       }
 7194              		.loc 1 3347 2 view .LVU2313
 7195 0042 40F24A23 		movw	r3, #586
 7196 0046 0093     		str	r3, [sp]
ARM GAS  /tmp/cc4E4VUn.s 			page 227


 7197 0048 4146     		mov	r1, r8
 7198 004a 4846     		mov	r0, r9
 7199 004c 8E23     		movs	r3, #142
 7200 004e 4A22     		movs	r2, #74
 7201 0050 FFF7FEFF 		bl	s_s_sized
 7202              	.LVL818:
3347:src/display.c ****       }
 7203              		.loc 1 3347 2 is_stmt 0 view .LVU2314
 7204              	.LBE454:
 7205              	.LBE453:
3596:src/display.c ****       }
 7206              		.loc 1 3596 7 view .LVU2315
 7207 0054 03B0     		add	sp, sp, #12
 7208              		.cfi_remember_state
 7209              		.cfi_def_cfa_offset 28
 7210              		@ sp needed
 7211 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7212              	.LVL819:
 7213              	.L712:
 7214              		.cfi_restore_state
 7215              	.LBB455:
 7216              	.LBI455:
3494:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7217              		.loc 1 3494 18 is_stmt 1 view .LVU2316
 7218              	.LBB456:
3495:src/display.c ****       }
 7219              		.loc 1 3495 2 view .LVU2317
3495:src/display.c ****       }
 7220              		.loc 1 3495 9 is_stmt 0 view .LVU2318
 7221 005a 0021     		movs	r1, #0
 7222 005c FFF7FEFF 		bl	pixel_length
 7223              	.LVL820:
3495:src/display.c ****       }
 7224              		.loc 1 3495 9 view .LVU2319
 7225              	.LBE456:
 7226              	.LBE455:
3584:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7227              		.loc 1 3584 41 view .LVU2320
 7228 0060 4B28     		cmp	r0, #75
 7229 0062 D6DC     		bgt	.L699
3584:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7230              		.loc 1 3584 12 view .LVU2321
 7231 0064 4FF00008 		mov	r8, #0
3585:src/display.c **** 
 7232              		.loc 1 3585 36 view .LVU2322
 7233 0068 4746     		mov	r7, r8
 7234 006a D6E7     		b	.L700
 7235              	.L714:
 7236              		.align	2
 7237              	.L713:
 7238 006c 00000000 		.word	StateWhileOn
 7239              		.cfi_endproc
 7240              	.LFE47:
 7242              		.section	.text.set_status_top.part.0,"ax",%progbits
 7243              		.align	1
 7244              		.p2align 2,,3
 7245              		.syntax unified
ARM GAS  /tmp/cc4E4VUn.s 			page 228


 7246              		.thumb
 7247              		.thumb_func
 7248              		.fpu fpv4-sp-d16
 7250              	set_status_top.part.0:
 7251              	.LVL821:
 7252              	.LFB56:
3507:src/display.c **** 	if (no_status_top) return;
 7253              		.loc 1 3507 19 is_stmt 1 view -0
 7254              		.cfi_startproc
 7255              		@ args = 0, pretend = 0, frame = 0
 7256              		@ frame_needed = 0, uses_anonymous_args = 0
3509:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7257              		.loc 1 3509 2 view .LVU2324
3507:src/display.c **** 	if (no_status_top) return;
 7258              		.loc 1 3507 19 is_stmt 0 view .LVU2325
 7259 0000 10B5     		push	{r4, lr}
 7260              		.cfi_def_cfa_offset 8
 7261              		.cfi_offset 4, -8
 7262              		.cfi_offset 14, -4
3509:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7263              		.loc 1 3509 6 view .LVU2326
 7264 0002 184B     		ldr	r3, .L725
 7265 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3509:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7266              		.loc 1 3509 5 view .LVU2327
 7267 0006 13F04001 		ands	r1, r3, #64
3507:src/display.c **** 	if (no_status_top) return;
 7268              		.loc 1 3507 19 view .LVU2328
 7269 000a 82B0     		sub	sp, sp, #8
 7270              		.cfi_def_cfa_offset 16
3507:src/display.c **** 	if (no_status_top) return;
 7271              		.loc 1 3507 19 view .LVU2329
 7272 000c 0446     		mov	r4, r0
3509:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7273              		.loc 1 3509 5 view .LVU2330
 7274 000e 0DD0     		beq	.L716
3510:src/display.c **** 	}
 7275              		.loc 1 3510 4 is_stmt 1 view .LVU2331
 7276 0010 1A06     		lsls	r2, r3, #24
 7277 0012 18D5     		bpl	.L723
 7278 0014 0121     		movs	r1, #1
 7279              	.LVL822:
 7280              	.L717:
 7281              	.LBB457:
 7282              	.LBI457:
3349:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7283              		.loc 1 3349 19 view .LVU2332
 7284              	.LBB458:
3350:src/display.c ****       }
 7285              		.loc 1 3350 2 view .LVU2333
 7286 0016 4FF45373 		mov	r3, #844
 7287 001a 0093     		str	r3, [sp]
 7288 001c 2046     		mov	r0, r4
 7289 001e 40F24A23 		movw	r3, #586
 7290 0022 2B22     		movs	r2, #43
 7291 0024 FFF7FEFF 		bl	s_s_sized
 7292              	.LVL823:
ARM GAS  /tmp/cc4E4VUn.s 			page 229


3350:src/display.c ****       }
 7293              		.loc 1 3350 2 is_stmt 0 view .LVU2334
 7294              	.LBE458:
 7295              	.LBE457:
3515:src/display.c **** #ifdef TOP_ROW
 7296              		.loc 1 3515 7 view .LVU2335
 7297 0028 02B0     		add	sp, sp, #8
 7298              		.cfi_remember_state
 7299              		.cfi_def_cfa_offset 8
 7300              		@ sp needed
 7301 002a 10BD     		pop	{r4, pc}
 7302              	.LVL824:
 7303              	.L716:
 7304              		.cfi_restore_state
3513:src/display.c **** 	}
 7305              		.loc 1 3513 4 is_stmt 1 view .LVU2336
 7306 002c 1B06     		lsls	r3, r3, #24
 7307 002e 12D5     		bpl	.L724
 7308 0030 0121     		movs	r1, #1
 7309              	.LVL825:
 7310              	.L719:
 7311              	.LBB459:
 7312              	.LBI459:
3346:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7313              		.loc 1 3346 19 view .LVU2337
 7314              	.LBB460:
3347:src/display.c ****       }
 7315              		.loc 1 3347 2 view .LVU2338
 7316 0032 40F24A23 		movw	r3, #586
 7317 0036 0093     		str	r3, [sp]
 7318 0038 2046     		mov	r0, r4
 7319 003a 8E23     		movs	r3, #142
 7320 003c 4A22     		movs	r2, #74
 7321 003e FFF7FEFF 		bl	s_s_sized
 7322              	.LVL826:
3347:src/display.c ****       }
 7323              		.loc 1 3347 2 is_stmt 0 view .LVU2339
 7324              	.LBE460:
 7325              	.LBE459:
3515:src/display.c **** #ifdef TOP_ROW
 7326              		.loc 1 3515 7 view .LVU2340
 7327 0042 02B0     		add	sp, sp, #8
 7328              		.cfi_remember_state
 7329              		.cfi_def_cfa_offset 8
 7330              		@ sp needed
 7331 0044 10BD     		pop	{r4, pc}
 7332              	.LVL827:
 7333              	.L723:
 7334              		.cfi_restore_state
 7335              	.LBB461:
 7336              	.LBI461:
3497:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7337              		.loc 1 3497 18 is_stmt 1 view .LVU2341
 7338              	.LBB462:
3498:src/display.c ****       }
 7339              		.loc 1 3498 2 view .LVU2342
3498:src/display.c ****       }
ARM GAS  /tmp/cc4E4VUn.s 			page 230


 7340              		.loc 1 3498 9 is_stmt 0 view .LVU2343
 7341 0046 0021     		movs	r1, #0
 7342 0048 FFF7FEFF 		bl	pixel_length
 7343              	.LVL828:
3498:src/display.c ****       }
 7344              		.loc 1 3498 9 view .LVU2344
 7345              	.LBE462:
 7346              	.LBE461:
3510:src/display.c **** 	}
 7347              		.loc 1 3510 4 view .LVU2345
 7348 004c 2C28     		cmp	r0, #44
 7349 004e D4BF     		ite	le
 7350 0050 0021     		movle	r1, #0
 7351 0052 0121     		movgt	r1, #1
 7352 0054 DFE7     		b	.L717
 7353              	.LVL829:
 7354              	.L724:
 7355              	.LBB463:
 7356              	.LBI463:
3494:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7357              		.loc 1 3494 18 is_stmt 1 view .LVU2346
 7358              	.LBB464:
3495:src/display.c ****       }
 7359              		.loc 1 3495 2 view .LVU2347
3495:src/display.c ****       }
 7360              		.loc 1 3495 9 is_stmt 0 view .LVU2348
 7361 0056 FFF7FEFF 		bl	pixel_length
 7362              	.LVL830:
3495:src/display.c ****       }
 7363              		.loc 1 3495 9 view .LVU2349
 7364              	.LBE464:
 7365              	.LBE463:
3513:src/display.c **** 	}
 7366              		.loc 1 3513 4 view .LVU2350
 7367 005a 4B28     		cmp	r0, #75
 7368 005c D4BF     		ite	le
 7369 005e 0021     		movle	r1, #0
 7370 0060 0121     		movgt	r1, #1
 7371 0062 E6E7     		b	.L719
 7372              	.L726:
 7373              		.align	2
 7374              	.L725:
 7375 0064 00000000 		.word	StateWhileOn
 7376              		.cfi_endproc
 7377              	.LFE56:
 7379              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7380              		.align	2
 7381              	.LC3:
 7382 0000 32630600 		.ascii	"2c\006\000"
 7383              		.align	2
 7384              	.LC4:
 7385 0004 07C63C00 		.ascii	"\007\306<\000"
 7386              		.align	2
 7387              	.LC5:
 7388 0008 07876900 		.ascii	"\007\207i\000"
 7389              		.align	2
 7390              	.LC6:
ARM GAS  /tmp/cc4E4VUn.s 			page 231


 7391 000c 07C67900 		.ascii	"\007\306y\000"
 7392              		.align	2
 7393              	.LC7:
 7394 0010 07950600 		.ascii	"\007\225\006\000"
 7395              		.align	2
 7396              	.LC8:
 7397 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7397      060600
 7398 001b 00       		.align	2
 7399              	.LC9:
 7400 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7400      060600
 7401 0023 00       		.align	2
 7402              	.LC10:
 7403 0024 07C74400 		.ascii	"\007\307D\000"
 7404              		.align	2
 7405              	.LC11:
 7406 0028 07872000 		.ascii	"\007\207 \000"
 7407              		.align	2
 7408              	.LC12:
 7409 002c 06060788 		.ascii	"\006\006\007\210\007\000"
 7409      0700
 7410 0032 0000     		.align	2
 7411              	.LC13:
 7412 0034 07C73C00 		.ascii	"\007\307<\000"
 7413              		.align	2
 7414              	.LC14:
 7415 0038 07C77900 		.ascii	"\007\307y\000"
 7416              		.align	2
 7417              	.LC15:
 7418 003c 0784060D 		.ascii	"\007\204\006\015\000"
 7418      00
 7419 0041 000000   		.align	2
 7420              	.LC17:
 7421 0044 07E43F00 		.ascii	"\007\344?\000"
 7422              		.section	.text.annunciators,"ax",%progbits
 7423              		.align	1
 7424              		.p2align 2,,3
 7425              		.syntax unified
 7426              		.thumb
 7427              		.thumb_func
 7428              		.fpu fpv4-sp-d16
 7430              	annunciators:
 7431              	.LFB16:
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7432              		.loc 1 601 36 is_stmt 1 view -0
 7433              		.cfi_startproc
 7434              		@ args = 0, pretend = 0, frame = 128
 7435              		@ frame_needed = 0, uses_anonymous_args = 0
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7436              		.loc 1 603 7 view .LVU2352
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7437              		.loc 1 601 36 is_stmt 0 view .LVU2353
 7438 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7439              		.cfi_def_cfa_offset 28
 7440              		.cfi_offset 4, -28
 7441              		.cfi_offset 5, -24
ARM GAS  /tmp/cc4E4VUn.s 			page 232


 7442              		.cfi_offset 6, -20
 7443              		.cfi_offset 7, -16
 7444              		.cfi_offset 8, -12
 7445              		.cfi_offset 9, -8
 7446              		.cfi_offset 14, -4
 615:src/display.c **** #  endif
 7447              		.loc 1 615 38 view .LVU2354
 7448 0004 BF4F     		ldr	r7, .L867
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7449              		.loc 1 601 36 view .LVU2355
 7450 0006 A3B0     		sub	sp, sp, #140
 7451              		.cfi_def_cfa_offset 168
 7452              	.LVL831:
 604:src/display.c ****       int n;
 7453              		.loc 1 604 7 is_stmt 1 view .LVU2356
 605:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7454              		.loc 1 605 7 view .LVU2357
 606:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7455              		.loc 1 606 7 view .LVU2358
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7456              		.loc 1 607 7 view .LVU2359
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7457              		.loc 1 607 43 is_stmt 0 view .LVU2360
 7458 0008 FFF7FEFF 		bl	cur_shift
 7459              	.LVL832:
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7460              		.loc 1 607 18 view .LVU2361
 7461 000c BE4B     		ldr	r3, .L867+4
 615:src/display.c **** #  endif
 7462              		.loc 1 615 38 view .LVU2362
 7463 000e 3A68     		ldr	r2, [r7]
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7464              		.loc 1 607 18 view .LVU2363
 7465 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7466              	.LVL833:
 615:src/display.c **** #  endif
 7467              		.loc 1 615 7 is_stmt 1 view .LVU2364
 615:src/display.c **** #  endif
 7468              		.loc 1 615 38 is_stmt 0 view .LVU2365
 7469 0014 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7470              		.loc 1 646 7 view .LVU2366
 7471 0018 0CAE     		add	r6, sp, #48
 7472              	.LVL834:
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7473              		.loc 1 646 7 view .LVU2367
 7474 001a 2A22     		movs	r2, #42
 7475 001c 0021     		movs	r1, #0
 7476 001e 3046     		mov	r0, r6
 7477 0020 FFF7FEFF 		bl	xset
 7478              	.LVL835:
 647:src/display.c ****       
 7479              		.loc 1 647 7 view .LVU2368
 7480 0024 0021     		movs	r1, #0
 7481 0026 17A8     		add	r0, sp, #92
 7482              	.LVL836:
 647:src/display.c ****       
ARM GAS  /tmp/cc4E4VUn.s 			page 233


 7483              		.loc 1 647 7 view .LVU2369
 7484 0028 2A22     		movs	r2, #42
 7485 002a FFF7FEFF 		bl	xset
 7486              	.LVL837:
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7487              		.loc 1 649 11 view .LVU2370
 7488 002e 3B68     		ldr	r3, [r7]
 7489 0030 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7490              		.loc 1 649 10 view .LVU2371
 7491 0034 D907     		lsls	r1, r3, #31
 615:src/display.c **** #  endif
 7492              		.loc 1 615 17 view .LVU2372
 7493 0036 C4F38004 		ubfx	r4, r4, #2, #1
 7494              	.LVL838:
 618:src/display.c **** #  else
 7495              		.loc 1 618 7 is_stmt 1 view .LVU2373
 623:src/display.c **** #  else
 7496              		.loc 1 623 7 view .LVU2374
 633:src/display.c **** #else
 7497              		.loc 1 633 7 view .LVU2375
 641:src/display.c **** #else
 7498              		.loc 1 641 7 view .LVU2376
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7499              		.loc 1 646 7 view .LVU2377
 647:src/display.c ****       
 7500              		.loc 1 647 7 view .LVU2378
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7501              		.loc 1 649 7 view .LVU2379
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7502              		.loc 1 649 10 is_stmt 0 view .LVU2380
 7503 003a 00F1FB80 		bmi	.L849
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7504              		.loc 1 688 12 is_stmt 1 view .LVU2381
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7505              		.loc 1 688 15 is_stmt 0 view .LVU2382
 7506 003e 84BB     		cbnz	r4, .L742
 706:src/display.c **** 	    *p2++ = shift_char;
 7507              		.loc 1 706 4 is_stmt 1 view .LVU2383
 706:src/display.c **** 	    *p2++ = shift_char;
 7508              		.loc 1 706 7 is_stmt 0 view .LVU2384
 7509 0040 B8F1200F 		cmp	r8, #32
 7510 0044 00F0CD81 		beq	.L743
 7511              	.L745:
 707:src/display.c **** 	    *p2++ = '\006';
 7512              		.loc 1 707 6 is_stmt 1 view .LVU2385
 7513              	.LVL839:
 708:src/display.c **** 	  }
 7514              		.loc 1 708 12 is_stmt 0 view .LVU2386
 7515 0048 0623     		movs	r3, #6
 707:src/display.c **** 	    *p2++ = '\006';
 7516              		.loc 1 707 12 view .LVU2387
 7517 004a 8DF85C80 		strb	r8, [sp, #92]
 708:src/display.c **** 	  }
 7518              		.loc 1 708 6 is_stmt 1 view .LVU2388
 7519              	.LVL840:
 708:src/display.c **** 	  }
ARM GAS  /tmp/cc4E4VUn.s 			page 234


 7520              		.loc 1 708 12 is_stmt 0 view .LVU2389
 7521 004e 8DF85D30 		strb	r3, [sp, #93]
 708:src/display.c **** 	  }
 7522              		.loc 1 708 9 view .LVU2390
 7523 0052 0DF15E00 		add	r0, sp, #94
 7524              	.LVL841:
 7525              	.L744:
 714:src/display.c **** 	  *p2++ = ' ';
 7526              		.loc 1 714 2 is_stmt 1 view .LVU2391
 714:src/display.c **** 	  *p2++ = ' ';
 7527              		.loc 1 714 6 is_stmt 0 view .LVU2392
 7528 0056 AD4D     		ldr	r5, .L867+8
 7529 0058 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 714:src/display.c **** 	  *p2++ = ' ';
 7530              		.loc 1 714 5 view .LVU2393
 7531 005a 9A07     		lsls	r2, r3, #30
 7532 005c 00F1A881 		bmi	.L850
 719:src/display.c **** 	  *p2++ = ' ';
 7533              		.loc 1 719 2 is_stmt 1 view .LVU2394
 719:src/display.c **** 	  *p2++ = ' ';
 7534              		.loc 1 719 5 is_stmt 0 view .LVU2395
 7535 0060 5907     		lsls	r1, r3, #29
 7536 0062 00F18881 		bmi	.L851
 725:src/display.c **** 	  if (State2.wascomplex) {
 7537              		.loc 1 725 2 is_stmt 1 view .LVU2396
 725:src/display.c **** 	  if (State2.wascomplex) {
 7538              		.loc 1 725 5 is_stmt 0 view .LVU2397
 7539 0066 B8F1200F 		cmp	r8, #32
 7540 006a 00F0D881 		beq	.L852
 7541              	.L748:
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7542              		.loc 1 742 2 is_stmt 1 view .LVU2398
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7543              		.loc 1 742 16 is_stmt 0 view .LVU2399
 7544 006e 3B68     		ldr	r3, [r7]
 7545 0070 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7546 0074 C3F30113 		ubfx	r3, r3, #4, #2
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7547              		.loc 1 742 2 view .LVU2400
 7548 0078 012B     		cmp	r3, #1
 7549 007a 00F0E981 		beq	.L794
 7550 007e A449     		ldr	r1, .L867+12
 7551 0080 A44A     		ldr	r2, .L867+16
 7552 0082 022B     		cmp	r3, #2
 7553 0084 08BF     		it	eq
 7554 0086 1146     		moveq	r1, r2
 7555              	.L750:
 7556              	.LVL842:
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7557              		.loc 1 756 2 is_stmt 1 view .LVU2401
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7558              		.loc 1 756 7 is_stmt 0 view .LVU2402
 7559 0088 FFF7FEFF 		bl	scopy
 7560              	.LVL843:
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7561              		.loc 1 756 7 view .LVU2403
 7562 008c 0446     		mov	r4, r0
ARM GAS  /tmp/cc4E4VUn.s 			page 235


 7563              	.LVL844:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7564              		.loc 1 758 2 is_stmt 1 view .LVU2404
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7565              		.loc 1 758 6 is_stmt 0 view .LVU2405
 7566 008e FFF7FEFF 		bl	get_trig_mode
 7567              	.LVL845:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7568              		.loc 1 758 5 view .LVU2406
 7569 0092 0228     		cmp	r0, #2
 7570 0094 40F02381 		bne	.L741
 759:src/display.c **** 	}
 7571              		.loc 1 759 4 is_stmt 1 view .LVU2407
 7572 0098 9F49     		ldr	r1, .L867+20
 7573 009a 2046     		mov	r0, r4
 7574 009c FFF7FEFF 		bl	scopy
 7575              	.LVL846:
 7576 00a0 1DE1     		b	.L741
 7577              	.LVL847:
 7578              	.L742:
 770:src/display.c **** 	  *p2++ = '\007';
 7579              		.loc 1 770 2 view .LVU2408
 770:src/display.c **** 	  *p2++ = '\007';
 7580              		.loc 1 770 6 is_stmt 0 view .LVU2409
 7581 00a2 9A4D     		ldr	r5, .L867+8
 7582 00a4 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 770:src/display.c **** 	  *p2++ = '\007';
 7583              		.loc 1 770 5 view .LVU2410
 7584 00a6 9A07     		lsls	r2, r3, #30
 7585 00a8 00F14A81 		bmi	.L853
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7586              		.loc 1 778 4 is_stmt 1 view .LVU2411
 7587              	.LVL848:
 779:src/display.c **** 	  *p2++ = shift_char;
 7588              		.loc 1 779 4 view .LVU2412
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7589              		.loc 1 778 10 is_stmt 0 view .LVU2413
 7590 00ac 4CF20773 		movw	r3, #50951
 7591 00b0 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 780:src/display.c **** 	  //	  goto no_copy;
 7592              		.loc 1 780 4 is_stmt 1 view .LVU2414
 7593              	.LVL849:
 785:src/display.c **** 	    q = "\007\207i";
 7594              		.loc 1 785 8 is_stmt 0 view .LVU2415
 7595 00b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 780:src/display.c **** 	  //	  goto no_copy;
 7596              		.loc 1 780 10 view .LVU2416
 7597 00b6 8DF85E80 		strb	r8, [sp, #94]
 785:src/display.c **** 	    q = "\007\207i";
 7598              		.loc 1 785 7 view .LVU2417
 7599 00ba 13F0C00F 		tst	r3, #192
 780:src/display.c **** 	  //	  goto no_copy;
 7600              		.loc 1 780 7 view .LVU2418
 7601 00be 0DF15F09 		add	r9, sp, #95
 7602              	.LVL850:
 785:src/display.c **** 	    q = "\007\207i";
 7603              		.loc 1 785 4 is_stmt 1 view .LVU2419
ARM GAS  /tmp/cc4E4VUn.s 			page 236


 785:src/display.c **** 	    q = "\007\207i";
 7604              		.loc 1 785 7 is_stmt 0 view .LVU2420
 7605 00c2 40F04D81 		bne	.L854
 7606              	.L753:
 790:src/display.c **** 	    q = "\007\307<";
 7607              		.loc 1 790 9 is_stmt 1 view .LVU2421
 790:src/display.c **** 	    q = "\007\307<";
 7608              		.loc 1 790 23 is_stmt 0 view .LVU2422
 7609 00c6 954B     		ldr	r3, .L867+24
 7610 00c8 1B68     		ldr	r3, [r3]
 790:src/display.c **** 	    q = "\007\307<";
 7611              		.loc 1 790 12 view .LVU2423
 7612 00ca 012B     		cmp	r3, #1
 7613 00cc 00F0BA81 		beq	.L855
 795:src/display.c **** 	    q = "\007\307y";
 7614              		.loc 1 795 9 is_stmt 1 view .LVU2424
 795:src/display.c **** 	    q = "\007\307y";
 7615              		.loc 1 795 12 is_stmt 0 view .LVU2425
 7616 00d0 022B     		cmp	r3, #2
 7617 00d2 00F0BF81 		beq	.L856
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7618              		.loc 1 603 22 view .LVU2426
 7619 00d6 B046     		mov	r8, r6
 7620              	.LVL851:
 7621              	.L754:
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7622              		.loc 1 802 6 is_stmt 1 view .LVU2427
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7623              		.loc 1 802 10 is_stmt 0 view .LVU2428
 7624 00d8 FFF7FEFF 		bl	get_trig_mode
 7625              	.LVL852:
 804:src/display.c **** 	      *p2++ = '\207';
 7626              		.loc 1 804 14 view .LVU2429
 7627 00dc 0723     		movs	r3, #7
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7628              		.loc 1 802 9 view .LVU2430
 7629 00de 0228     		cmp	r0, #2
 805:src/display.c **** 	      *p2++ = '\007';	    
 7630              		.loc 1 805 14 view .LVU2431
 7631 00e0 4FF08702 		mov	r2, #135
 804:src/display.c **** 	      *p2++ = '\207';
 7632              		.loc 1 804 14 view .LVU2432
 7633 00e4 89F80030 		strb	r3, [r9]
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7634              		.loc 1 802 9 view .LVU2433
 7635 00e8 00F06781 		beq	.L857
 809:src/display.c **** 	      *p2++ = '\207';
 7636              		.loc 1 809 8 is_stmt 1 view .LVU2434
 7637              	.LVL853:
 810:src/display.c **** 	      *p2++ = ' ';
 7638              		.loc 1 810 8 view .LVU2435
 811:src/display.c **** 	    }
 7639              		.loc 1 811 14 is_stmt 0 view .LVU2436
 7640 00ec 2023     		movs	r3, #32
 810:src/display.c **** 	      *p2++ = ' ';
 7641              		.loc 1 810 14 view .LVU2437
 7642 00ee 89F80120 		strb	r2, [r9, #1]
ARM GAS  /tmp/cc4E4VUn.s 			page 237


 811:src/display.c **** 	    }
 7643              		.loc 1 811 8 is_stmt 1 view .LVU2438
 811:src/display.c **** 	    }
 7644              		.loc 1 811 14 is_stmt 0 view .LVU2439
 7645 00f2 89F80230 		strb	r3, [r9, #2]
 811:src/display.c **** 	    }
 7646              		.loc 1 811 11 view .LVU2440
 7647 00f6 09F10309 		add	r9, r9, #3
 7648              	.LVL854:
 7649              	.L757:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7650              		.loc 1 816 4 is_stmt 1 view .LVU2441
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7651              		.loc 1 816 9 is_stmt 0 view .LVU2442
 7652 00fa FFF7FEFF 		bl	is_dblmode
 7653              	.LVL855:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7654              		.loc 1 816 36 view .LVU2443
 7655 00fe 884B     		ldr	r3, .L867+28
 7656 0100 884A     		ldr	r2, .L867+32
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7657              		.loc 1 816 9 view .LVU2444
 7658 0102 0146     		mov	r1, r0
 7659              	.LVL856:
 817:src/display.c **** #else
 7660              		.loc 1 817 4 is_stmt 1 view .LVU2445
 817:src/display.c **** #else
 7661              		.loc 1 817 9 is_stmt 0 view .LVU2446
 7662 0104 0029     		cmp	r1, #0
 7663 0106 14BF     		ite	ne
 7664 0108 1146     		movne	r1, r2
 7665 010a 1946     		moveq	r1, r3
 7666              	.LVL857:
 817:src/display.c **** #else
 7667              		.loc 1 817 9 view .LVU2447
 7668 010c 4846     		mov	r0, r9
 7669 010e FFF7FEFF 		bl	scopy
 7670              	.LVL858:
 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7671              		.loc 1 836 16 view .LVU2448
 7672 0112 3B68     		ldr	r3, [r7]
 7673 0114 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7674 0118 C1F30111 		ubfx	r1, r1, #4, #2
 7675              	.LVL859:
 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7676              		.loc 1 836 2 is_stmt 1 view .LVU2449
 7677 011c 0129     		cmp	r1, #1
 7678 011e 00F05381 		beq	.L798
 7679 0122 7B4B     		ldr	r3, .L867+12
 7680 0124 7B4A     		ldr	r2, .L867+16
 7681 0126 0229     		cmp	r1, #2
 7682 0128 14BF     		ite	ne
 7683 012a 1946     		movne	r1, r3
 7684 012c 1146     		moveq	r1, r2
 7685              	.L759:
 7686              	.LVL860:
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
ARM GAS  /tmp/cc4E4VUn.s 			page 238


 7687              		.loc 1 853 2 view .LVU2450
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7688              		.loc 1 853 6 is_stmt 0 view .LVU2451
 7689 012e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7690              		.loc 1 853 5 view .LVU2452
 7691 0130 5B07     		lsls	r3, r3, #29
 854:src/display.c **** 	} // no need to skip y display with arrow here
 7692              		.loc 1 854 4 is_stmt 1 view .LVU2453
 7693 0132 48BF     		it	mi
 7694 0134 7C49     		ldrmi	r1, .L867+36
 7695              	.LVL861:
 857:src/display.c **** 	}
 7696              		.loc 1 857 4 view .LVU2454
 857:src/display.c **** 	}
 7697              		.loc 1 857 9 is_stmt 0 view .LVU2455
 7698 0136 FFF7FEFF 		bl	scopy
 7699              	.LVL862:
 859:src/display.c **** 	  decNumber y;
 7700              		.loc 1 859 2 is_stmt 1 view .LVU2456
 859:src/display.c **** 	  decNumber y;
 7701              		.loc 1 859 6 is_stmt 0 view .LVU2457
 7702 013a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 859:src/display.c **** 	  decNumber y;
 7703              		.loc 1 859 5 view .LVU2458
 7704 013c 5A06     		lsls	r2, r3, #25
 7705 013e 40F1D180 		bpl	.L785
 7706              	.L731:
 7707              	.LBB475:
 860:src/display.c **** 	display_yreg:
 7708              		.loc 1 860 4 is_stmt 1 view .LVU2459
 867:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7709              		.loc 1 867 4 view .LVU2460
 867:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7710              		.loc 1 867 8 is_stmt 0 view .LVU2461
 7711 0142 3B68     		ldr	r3, [r7]
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7712              		.loc 1 868 44 view .LVU2462
 7713 0144 DFF8F091 		ldr	r9, .L867+52
 867:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7714              		.loc 1 867 8 view .LVU2463
 7715 0148 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 867:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7716              		.loc 1 867 7 view .LVU2464
 7717 014c DB07     		lsls	r3, r3, #31
 7718 014e 00F13D81 		bmi	.L858
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7719              		.loc 1 874 4 is_stmt 1 view .LVU2465
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7720              		.loc 1 874 34 is_stmt 0 view .LVU2466
 7721 0152 D9F80010 		ldr	r1, [r9]
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7722              		.loc 1 874 4 view .LVU2467
 7723 0156 6329     		cmp	r1, #99
 7724 0158 00F34E81 		bgt	.L859
 7725              	.LVL863:
 7726              	.L770:
ARM GAS  /tmp/cc4E4VUn.s 			page 239


 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7727              		.loc 1 874 4 discriminator 5 view .LVU2468
 7728 015c 0131     		adds	r1, r1, #1
 7729              	.L774:
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7730              		.loc 1 874 4 discriminator 6 view .LVU2469
 7731 015e 03A8     		add	r0, sp, #12
 7732 0160 FFF7FEFF 		bl	getRegister
 7733              	.LVL864:
 877:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7734              		.loc 1 877 4 is_stmt 1 discriminator 6 view .LVU2470
 877:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7735              		.loc 1 877 7 is_stmt 0 discriminator 6 view .LVU2471
 7736 0164 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 7737 0168 11F07001 		ands	r1, r1, #112
 7738 016c 40D1     		bne	.L776
 878:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7739              		.loc 1 878 6 is_stmt 1 view .LVU2472
 878:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7740              		.loc 1 878 19 is_stmt 0 view .LVU2473
 7741 016e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 878:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7742              		.loc 1 878 9 view .LVU2474
 7743 0170 13F0010F 		tst	r3, #1
 7744              	.LBB476:
 879:src/display.c **** 
 7745              		.loc 1 879 44 view .LVU2475
 7746 0174 3B68     		ldr	r3, [r7]
 7747              	.LBE476:
 878:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7748              		.loc 1 878 9 view .LVU2476
 7749 0176 40F08581 		bne	.L860
 899:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7750              		.loc 1 899 6 is_stmt 1 view .LVU2477
 899:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7751              		.loc 1 899 21 is_stmt 0 view .LVU2478
 7752 017a 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 899:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7753              		.loc 1 899 9 view .LVU2479
 7754 017e 9806     		lsls	r0, r3, #26
 7755 0180 36D5     		bpl	.L776
 901:src/display.c **** #endif
 7756              		.loc 1 901 6 view .LVU2480
 7757 0182 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 901:src/display.c **** #endif
 7758              		.loc 1 901 3 view .LVU2481
 7759 0184 13F00204 		ands	r4, r3, #2
 7760 0188 32D1     		bne	.L776
 904:src/display.c **** #endif
 7761              		.loc 1 904 6 view .LVU2482
 7762 018a 644B     		ldr	r3, .L867+24
 904:src/display.c **** #endif
 7763              		.loc 1 904 3 view .LVU2483
 7764 018c 1B68     		ldr	r3, [r3]
 7765 018e 012B     		cmp	r3, #1
 7766 0190 2ED0     		beq	.L776
 906:src/display.c **** 	      char ltgteq;
ARM GAS  /tmp/cc4E4VUn.s 			page 240


 7767              		.loc 1 906 6 view .LVU2484
 7768 0192 4146     		mov	r1, r8
 7769 0194 03A8     		add	r0, sp, #12
 7770 0196 FFF7FEFF 		bl	set_x_fract
 7771              	.LVL865:
 906:src/display.c **** 	      char ltgteq;
 7772              		.loc 1 906 3 view .LVU2485
 7773 019a 48B3     		cbz	r0, .L776
 7774              	.LBB477:
 907:src/display.c **** 
 7775              		.loc 1 907 8 is_stmt 1 view .LVU2486
 909:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7776              		.loc 1 909 8 view .LVU2487
 909:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7777              		.loc 1 909 12 is_stmt 0 view .LVU2488
 7778 019c 2146     		mov	r1, r4
 7779 019e 3046     		mov	r0, r6
 7780 01a0 FFF7FEFF 		bl	find_char
 7781              	.LVL866:
 7782 01a4 0446     		mov	r4, r0
 909:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7783              		.loc 1 909 10 view .LVU2489
 7784 01a6 0238     		subs	r0, r0, #2
 7785              	.LVL867:
 911:src/display.c **** 	      switch (ltgteq) {
 7786              		.loc 1 911 8 is_stmt 1 view .LVU2490
 911:src/display.c **** 	      switch (ltgteq) {
 7787              		.loc 1 911 15 is_stmt 0 view .LVU2491
 7788 01a8 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7789              	.LVL868:
 912:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7790              		.loc 1 912 8 is_stmt 1 view .LVU2492
 7791 01ac 472F     		cmp	r7, #71
 7792 01ae 00F0A181 		beq	.L800
 914:src/display.c **** 	      }
 7793              		.loc 1 914 25 is_stmt 0 view .LVU2493
 7794 01b2 4C2F     		cmp	r7, #76
 7795 01b4 08BF     		it	eq
 7796 01b6 3C27     		moveq	r7, #60
 7797              	.LVL869:
 7798              	.L781:
 916:src/display.c **** 	      q[2] = ltgteq;
 7799              		.loc 1 916 8 is_stmt 1 view .LVU2494
 7800 01b8 5C49     		ldr	r1, .L867+40
 7801 01ba FFF7FEFF 		bl	scopy
 7802              	.LVL870:
 917:src/display.c **** 
 7803              		.loc 1 917 8 view .LVU2495
 917:src/display.c **** 
 7804              		.loc 1 917 13 is_stmt 0 view .LVU2496
 7805 01be 2770     		strb	r7, [r4]
 919:src/display.c **** 		goto skip;
 7806              		.loc 1 919 8 is_stmt 1 view .LVU2497
 919:src/display.c **** 		goto skip;
 7807              		.loc 1 919 12 is_stmt 0 view .LVU2498
 7808 01c0 0121     		movs	r1, #1
 7809 01c2 3046     		mov	r0, r6
ARM GAS  /tmp/cc4E4VUn.s 			page 241


 7810 01c4 FFF7FEFF 		bl	pixel_length
 7811              	.LVL871:
 919:src/display.c **** 		goto skip;
 7812              		.loc 1 919 11 view .LVU2499
 7813 01c8 2C28     		cmp	r0, #44
 7814 01ca 40F38880 		ble	.L741
 922:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7815              		.loc 1 922 8 is_stmt 1 view .LVU2500
 922:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7816              		.loc 1 922 14 is_stmt 0 view .LVU2501
 7817 01ce 0027     		movs	r7, #0
 7818              	.LVL872:
 922:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7819              		.loc 1 922 14 view .LVU2502
 7820 01d0 04F8037C 		strb	r7, [r4, #-3]
 923:src/display.c **** 		goto skip;
 7821              		.loc 1 923 8 is_stmt 1 view .LVU2503
 923:src/display.c **** 		goto skip;
 7822              		.loc 1 923 12 is_stmt 0 view .LVU2504
 7823 01d4 0121     		movs	r1, #1
 7824 01d6 3046     		mov	r0, r6
 7825 01d8 FFF7FEFF 		bl	pixel_length
 7826              	.LVL873:
 923:src/display.c **** 		goto skip;
 7827              		.loc 1 923 11 view .LVU2505
 7828 01dc 2C28     		cmp	r0, #44
 7829 01de 7EDD     		ble	.L741
 926:src/display.c **** 	    }
 7830              		.loc 1 926 8 is_stmt 1 view .LVU2506
 926:src/display.c **** 	    }
 7831              		.loc 1 926 39 is_stmt 0 view .LVU2507
 7832 01e0 A8EB0602 		sub	r2, r8, r6
 926:src/display.c **** 	    }
 7833              		.loc 1 926 8 view .LVU2508
 7834 01e4 3946     		mov	r1, r7
 7835 01e6 C2F12A02 		rsb	r2, r2, #42
 7836 01ea 4046     		mov	r0, r8
 7837 01ec FFF7FEFF 		bl	xset
 7838              	.LVL874:
 7839              	.L776:
 926:src/display.c **** 	    }
 7840              		.loc 1 926 8 view .LVU2509
 7841              	.LBE477:
 929:src/display.c **** 	    int extra_pixels;
 7842              		.loc 1 929 4 is_stmt 1 view .LVU2510
 929:src/display.c **** 	    int extra_pixels;
 7843              		.loc 1 929 10 is_stmt 0 view .LVU2511
 7844 01f0 0C23     		movs	r3, #12
 7845 01f2 0293     		str	r3, [sp, #8]
 929:src/display.c **** 	    int extra_pixels;
 7846              		.loc 1 929 27 is_stmt 1 view .LVU2512
 7847 01f4 0EE0     		b	.L783
 7848              	.LVL875:
 7849              	.L861:
 7850              	.LBB478:
 937:src/display.c **** 
 7851              		.loc 1 937 6 is_stmt 0 view .LVU2513
ARM GAS  /tmp/cc4E4VUn.s 			page 242


 7852 01f6 029A     		ldr	r2, [sp, #8]
 7853 01f8 0A32     		adds	r2, r2, #10
 7854 01fa FFF7FEFF 		bl	xset
 7855              	.LVL876:
 939:src/display.c **** 	  }
 7856              		.loc 1 939 6 is_stmt 1 view .LVU2514
 939:src/display.c **** 	  }
 7857              		.loc 1 939 30 is_stmt 0 view .LVU2515
 7858 01fe B4F14802 		subs	r2, r4, #72
 939:src/display.c **** 	  }
 7859              		.loc 1 939 8 view .LVU2516
 7860 0202 029B     		ldr	r3, [sp, #8]
 939:src/display.c **** 	  }
 7861              		.loc 1 939 30 view .LVU2517
 7862 0204 48BF     		it	mi
 7863 0206 A4F14502 		submi	r2, r4, #69
 939:src/display.c **** 	  }
 7864              		.loc 1 939 8 view .LVU2518
 7865 020a A3EBA203 		sub	r3, r3, r2, asr #2
 7866              	.LBE478:
 929:src/display.c **** 	    int extra_pixels;
 7867              		.loc 1 929 4 view .LVU2519
 7868 020e 012B     		cmp	r3, #1
 7869              	.LBB479:
 939:src/display.c **** 	  }
 7870              		.loc 1 939 8 view .LVU2520
 7871 0210 0293     		str	r3, [sp, #8]
 7872              	.LBE479:
 929:src/display.c **** 	    int extra_pixels;
 7873              		.loc 1 929 27 is_stmt 1 view .LVU2521
 929:src/display.c **** 	    int extra_pixels;
 7874              		.loc 1 929 4 is_stmt 0 view .LVU2522
 7875 0212 64DD     		ble	.L741
 7876              	.LVL877:
 7877              	.L783:
 7878              	.LBB480:
 930:src/display.c **** 
 7879              		.loc 1 930 6 is_stmt 1 view .LVU2523
 932:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7880              		.loc 1 932 6 view .LVU2524
 7881 0214 02AA     		add	r2, sp, #8
 7882 0216 4146     		mov	r1, r8
 7883 0218 03A8     		add	r0, sp, #12
 7884 021a FFF7FEFF 		bl	set_x_dn
 7885              	.LVL878:
 933:src/display.c **** 	    if (extra_pixels <= 0)
 7886              		.loc 1 933 6 view .LVU2525
 933:src/display.c **** 	    if (extra_pixels <= 0)
 7887              		.loc 1 933 21 is_stmt 0 view .LVU2526
 7888 021e 0121     		movs	r1, #1
 7889 0220 3046     		mov	r0, r6
 7890 0222 FFF7FEFF 		bl	pixel_length
 7891              	.LVL879:
 937:src/display.c **** 
 7892              		.loc 1 937 6 is_stmt 1 view .LVU2527
 933:src/display.c **** 	    if (extra_pixels <= 0)
 7893              		.loc 1 933 21 is_stmt 0 view .LVU2528
ARM GAS  /tmp/cc4E4VUn.s 			page 243


 7894 0226 0446     		mov	r4, r0
 7895              	.LVL880:
 934:src/display.c **** 	      break;
 7896              		.loc 1 934 6 is_stmt 1 view .LVU2529
 934:src/display.c **** 	      break;
 7897              		.loc 1 934 9 is_stmt 0 view .LVU2530
 7898 0228 4B2C     		cmp	r4, #75
 937:src/display.c **** 
 7899              		.loc 1 937 6 view .LVU2531
 7900 022a 4FF00001 		mov	r1, #0
 7901 022e 4046     		mov	r0, r8
 7902              	.LVL881:
 934:src/display.c **** 	      break;
 7903              		.loc 1 934 9 view .LVU2532
 7904 0230 E1DC     		bgt	.L861
 7905              	.LVL882:
 934:src/display.c **** 	      break;
 7906              		.loc 1 934 9 view .LVU2533
 7907              	.LBE480:
 7908 0232 54E0     		b	.L741
 7909              	.LVL883:
 7910              	.L849:
 934:src/display.c **** 	      break;
 7911              		.loc 1 934 9 view .LVU2534
 7912              	.LBE475:
 659:src/display.c **** 	    *p2++ = '\006';
 7913              		.loc 1 659 6 is_stmt 1 view .LVU2535
 660:src/display.c **** 	  }
 7914              		.loc 1 660 12 is_stmt 0 view .LVU2536
 7915 0234 0623     		movs	r3, #6
 7916 0236 8DF85D30 		strb	r3, [sp, #93]
 659:src/display.c **** 	    *p2++ = '\006';
 7917              		.loc 1 659 12 view .LVU2537
 7918 023a 8DF85C80 		strb	r8, [sp, #92]
 660:src/display.c **** 	  }
 7919              		.loc 1 660 6 is_stmt 1 view .LVU2538
 7920              	.LVL884:
 663:src/display.c **** 	default:
 7921              		.loc 1 663 2 view .LVU2539
 663:src/display.c **** 	default:
 7922              		.loc 1 663 9 is_stmt 0 view .LVU2540
 7923 023e FFF7FEFF 		bl	int_mode
 7924              	.LVL885:
 7925 0242 0138     		subs	r0, r0, #1
 7926 0244 C0B2     		uxtb	r0, r0
 7927 0246 0228     		cmp	r0, #2
 7928 0248 96BF     		itet	ls
 7929 024a 394B     		ldrls	r3, .L867+44
 7930 024c 3949     		ldrhi	r1, .L867+48
 7931 024e 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7932              	.LVL886:
 670:src/display.c **** 	*q++ = '\006';
 7933              		.loc 1 670 2 is_stmt 1 view .LVU2541
 670:src/display.c **** 	*q++ = '\006';
 7934              		.loc 1 670 6 is_stmt 0 view .LVU2542
 7935 0252 0DF15E00 		add	r0, sp, #94
 7936              	.LVL887:
ARM GAS  /tmp/cc4E4VUn.s 			page 244


 670:src/display.c **** 	*q++ = '\006';
 7937              		.loc 1 670 6 view .LVU2543
 7938 0256 FFF7FEFF 		bl	scopy
 7939              	.LVL888:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7940              		.loc 1 671 7 view .LVU2544
 7941 025a 8046     		mov	r8, r0
 7942              	.LVL889:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7943              		.loc 1 671 7 view .LVU2545
 7944 025c 0623     		movs	r3, #6
 7945 025e 08F8013B 		strb	r3, [r8], #1
 670:src/display.c **** 	*q++ = '\006';
 7946              		.loc 1 670 6 view .LVU2546
 7947 0262 0546     		mov	r5, r0
 7948              	.LVL890:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7949              		.loc 1 671 2 is_stmt 1 view .LVU2547
 672:src/display.c **** 
 7950              		.loc 1 672 2 view .LVU2548
 672:src/display.c **** 
 7951              		.loc 1 672 7 is_stmt 0 view .LVU2549
 7952 0264 FFF7FEFF 		bl	word_size
 7953              	.LVL891:
 7954 0268 0222     		movs	r2, #2
 7955 026a 0146     		mov	r1, r0
 7956 026c 4046     		mov	r0, r8
 7957 026e FFF7FEFF 		bl	num_arg_0
 7958              	.LVL892:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7959              		.loc 1 674 19 view .LVU2550
 7960 0272 DFF8C8C0 		ldr	ip, .L867+56
 7961 0276 DCF80030 		ldr	r3, [ip]
 7962              	.LVL893:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7963              		.loc 1 674 2 is_stmt 1 view .LVU2551
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7964              		.loc 1 674 5 is_stmt 0 view .LVU2552
 7965 027a 002B     		cmp	r3, #0
 7966 027c 76DD     		ble	.L847
 675:src/display.c **** 	  if (*q == '1')
 7967              		.loc 1 675 4 is_stmt 1 view .LVU2553
 675:src/display.c **** 	  if (*q == '1')
 7968              		.loc 1 675 10 is_stmt 0 view .LVU2554
 7969 027e C3F10702 		rsb	r2, r3, #7
 7970 0282 5200     		lsls	r2, r2, #1
 675:src/display.c **** 	  if (*q == '1')
 7971              		.loc 1 675 6 view .LVU2555
 7972 0284 0292     		str	r2, [sp, #8]
 676:src/display.c **** 	    n += 2;
 7973              		.loc 1 676 4 is_stmt 1 view .LVU2556
 676:src/display.c **** 	    n += 2;
 7974              		.loc 1 676 7 is_stmt 0 view .LVU2557
 7975 0286 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 7976 0288 3129     		cmp	r1, #49
 677:src/display.c **** 	  if (q[1] == '1')
 7977              		.loc 1 677 6 is_stmt 1 view .LVU2558
ARM GAS  /tmp/cc4E4VUn.s 			page 245


 677:src/display.c **** 	  if (q[1] == '1')
 7978              		.loc 1 677 8 is_stmt 0 view .LVU2559
 7979 028a 04BF     		itt	eq
 7980 028c 0232     		addeq	r2, r2, #2
 7981 028e 0292     		streq	r2, [sp, #8]
 678:src/display.c **** 	    n += 2;
 7982              		.loc 1 678 4 is_stmt 1 view .LVU2560
 678:src/display.c **** 	    n += 2;
 7983              		.loc 1 678 7 is_stmt 0 view .LVU2561
 7984 0290 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 7985 0292 3129     		cmp	r1, #49
 7986 0294 00D1     		bne	.L734
 679:src/display.c **** 	  while (n-- > 0)
 7987              		.loc 1 679 6 is_stmt 1 view .LVU2562
 679:src/display.c **** 	  while (n-- > 0)
 7988              		.loc 1 679 8 is_stmt 0 view .LVU2563
 7989 0296 0232     		adds	r2, r2, #2
 7990              	.L734:
 680:src/display.c **** 	    *p2++ = '\006';
 7991              		.loc 1 680 10 is_stmt 1 view .LVU2564
 680:src/display.c **** 	    *p2++ = '\006';
 7992              		.loc 1 680 12 is_stmt 0 view .LVU2565
 7993 0298 511E     		subs	r1, r2, #1
 680:src/display.c **** 	    *p2++ = '\006';
 7994              		.loc 1 680 10 view .LVU2566
 7995 029a 002A     		cmp	r2, #0
 680:src/display.c **** 	    *p2++ = '\006';
 7996              		.loc 1 680 12 view .LVU2567
 7997 029c 0291     		str	r1, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 7998              		.loc 1 680 10 view .LVU2568
 7999 029e 40F31F81 		ble	.L845
 681:src/display.c **** 
 8000              		.loc 1 681 12 view .LVU2569
 8001 02a2 0621     		movs	r1, #6
 8002              	.L735:
 681:src/display.c **** 
 8003              		.loc 1 681 6 is_stmt 1 view .LVU2570
 8004              	.LVL894:
 681:src/display.c **** 
 8005              		.loc 1 681 12 is_stmt 0 view .LVU2571
 8006 02a4 00F8011B 		strb	r1, [r0], #1
 8007              	.LVL895:
 680:src/display.c **** 	    *p2++ = '\006';
 8008              		.loc 1 680 10 is_stmt 1 view .LVU2572
 680:src/display.c **** 	    *p2++ = '\006';
 8009              		.loc 1 680 12 is_stmt 0 view .LVU2573
 8010 02a8 029B     		ldr	r3, [sp, #8]
 8011 02aa 5A1E     		subs	r2, r3, #1
 680:src/display.c **** 	    *p2++ = '\006';
 8012              		.loc 1 680 10 view .LVU2574
 8013 02ac 002B     		cmp	r3, #0
 680:src/display.c **** 	    *p2++ = '\006';
 8014              		.loc 1 680 12 view .LVU2575
 8015 02ae 0292     		str	r2, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 8016              		.loc 1 680 10 view .LVU2576
ARM GAS  /tmp/cc4E4VUn.s 			page 246


 8017 02b0 F8DC     		bgt	.L735
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8018              		.loc 1 683 4 is_stmt 1 view .LVU2577
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8019              		.loc 1 683 11 is_stmt 0 view .LVU2578
 8020 02b2 DCF80030 		ldr	r3, [ip]
 8021 02b6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8022              		.loc 1 683 27 is_stmt 1 view .LVU2579
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8023              		.loc 1 683 4 is_stmt 0 view .LVU2580
 8024 02b8 002B     		cmp	r3, #0
 8025 02ba 57DB     		blt	.L847
 8026              	.L788:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8027              		.loc 1 683 4 view .LVU2581
 8028 02bc 134D     		ldr	r5, .L867+8
 8029              	.L740:
 684:src/display.c **** 	}
 8030              		.loc 1 684 6 is_stmt 1 view .LVU2582
 684:src/display.c **** 	}
 8031              		.loc 1 684 20 is_stmt 0 view .LVU2583
 8032 02be 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8033 02c0 C2F3C202 		ubfx	r2, r2, #3, #3
 684:src/display.c **** 	}
 8034              		.loc 1 684 12 view .LVU2584
 8035 02c4 9A42     		cmp	r2, r3
 8036 02c6 0CBF     		ite	eq
 8037 02c8 7C23     		moveq	r3, #124
 8038 02ca 2723     		movne	r3, #39
 8039              	.LVL896:
 684:src/display.c **** 	}
 8040              		.loc 1 684 12 view .LVU2585
 8041 02cc 00F8013B 		strb	r3, [r0], #1
 8042              	.LVL897:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8043              		.loc 1 683 35 is_stmt 1 view .LVU2586
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8044              		.loc 1 683 36 is_stmt 0 view .LVU2587
 8045 02d0 029B     		ldr	r3, [sp, #8]
 8046 02d2 013B     		subs	r3, r3, #1
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8047              		.loc 1 683 4 view .LVU2588
 8048 02d4 002B     		cmp	r3, #0
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8049              		.loc 1 683 36 view .LVU2589
 8050 02d6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8051              		.loc 1 683 27 is_stmt 1 view .LVU2590
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8052              		.loc 1 683 4 is_stmt 0 view .LVU2591
 8053 02d8 F1DA     		bge	.L740
 686:src/display.c ****       }
 8054              		.loc 1 686 2 is_stmt 1 view .LVU2592
 686:src/display.c ****       }
 8055              		.loc 1 686 5 is_stmt 0 view .LVU2593
 8056 02da 002C     		cmp	r4, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 247


 8057 02dc 49D1     		bne	.L862
 8058              	.LVL898:
 8059              	.L741:
 945:src/display.c ****       set_status_top_always(buf2);
 8060              		.loc 1 945 7 is_stmt 1 view .LVU2594
 945:src/display.c ****       set_status_top_always(buf2);
 8061              		.loc 1 945 11 is_stmt 0 view .LVU2595
 8062 02de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 945:src/display.c ****       set_status_top_always(buf2);
 8063              		.loc 1 945 10 view .LVU2596
 8064 02e0 5906     		lsls	r1, r3, #25
 8065 02e2 56D4     		bmi	.L863
 8066              	.L785:
 8067              	.LBB483:
 8068              	.LBB484:
3519:src/display.c ****       }
 8069              		.loc 1 3519 2 is_stmt 1 view .LVU2597
 8070 02e4 1B06     		lsls	r3, r3, #24
 8071 02e6 4BD5     		bpl	.L864
 8072 02e8 0121     		movs	r1, #1
 8073              	.L787:
 8074              	.LVL899:
 8075              	.LBB485:
 8076              	.LBI485:
3349:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8077              		.loc 1 3349 19 view .LVU2598
 8078              	.LBB486:
3350:src/display.c ****       }
 8079              		.loc 1 3350 2 view .LVU2599
 8080 02ea 4FF45373 		mov	r3, #844
 8081 02ee 0093     		str	r3, [sp]
 8082 02f0 17A8     		add	r0, sp, #92
 8083              	.LVL900:
3350:src/display.c ****       }
 8084              		.loc 1 3350 2 is_stmt 0 view .LVU2600
 8085 02f2 40F24A23 		movw	r3, #586
 8086 02f6 2B22     		movs	r2, #43
 8087 02f8 FFF7FEFF 		bl	s_s_sized
 8088              	.LVL901:
3350:src/display.c ****       }
 8089              		.loc 1 3350 2 view .LVU2601
 8090              	.LBE486:
 8091              	.LBE485:
 8092              	.LBE484:
 8093              	.LBE483:
 948:src/display.c **** #else
 8094              		.loc 1 948 5 view .LVU2602
 8095 02fc 23B0     		add	sp, sp, #140
 8096              		.cfi_remember_state
 8097              		.cfi_def_cfa_offset 28
 8098              		@ sp needed
 8099 02fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8100              	.L868:
 8101 0302 00BF     		.align	2
 8102              	.L867:
 8103 0304 00000000 		.word	main_ram
 8104 0308 00000000 		.word	.LANCHOR15
ARM GAS  /tmp/cc4E4VUn.s 			page 248


 8105 030c 00000000 		.word	StateWhileOn
 8106 0310 10000000 		.word	.LC7
 8107 0314 1C000000 		.word	.LC9
 8108 0318 2C000000 		.word	.LC12
 8109 031c 00000000 		.word	RectPolConv
 8110 0320 28000000 		.word	.LC11
 8111 0324 24000000 		.word	.LC10
 8112 0328 3C000000 		.word	.LC15
 8113 032c 44000000 		.word	.LC17
 8114 0330 00000000 		.word	.LANCHOR16
 8115 0334 00000000 		.word	.LC3
 8116 0338 00000000 		.word	ShowRegister
 8117 033c 00000000 		.word	IntMaxWindow
 8118              	.LVL902:
 8119              	.L853:
 8120              		.cfi_restore_state
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8121              		.loc 1 771 4 is_stmt 1 view .LVU2603
 772:src/display.c **** 	  *p2++ = shift_char;
 8122              		.loc 1 772 4 view .LVU2604
 775:src/display.c **** 	}
 8123              		.loc 1 775 10 is_stmt 0 view .LVU2605
 8124 0340 1423     		movs	r3, #20
 8125 0342 8DF85F30 		strb	r3, [sp, #95]
 785:src/display.c **** 	    q = "\007\207i";
 8126              		.loc 1 785 8 view .LVU2606
 8127 0346 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 773:src/display.c **** 	  //	  q = "\024";
 8128              		.loc 1 773 10 view .LVU2607
 8129 0348 8DF85E80 		strb	r8, [sp, #94]
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8130              		.loc 1 771 10 view .LVU2608
 8131 034c 4EF20742 		movw	r2, #58375
 785:src/display.c **** 	    q = "\007\207i";
 8132              		.loc 1 785 7 view .LVU2609
 8133 0350 13F0C00F 		tst	r3, #192
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8134              		.loc 1 771 10 view .LVU2610
 8135 0354 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 773:src/display.c **** 	  //	  q = "\024";
 8136              		.loc 1 773 4 is_stmt 1 view .LVU2611
 8137              	.LVL903:
 775:src/display.c **** 	}
 8138              		.loc 1 775 4 view .LVU2612
 775:src/display.c **** 	}
 8139              		.loc 1 775 7 is_stmt 0 view .LVU2613
 8140 0358 0DF16009 		add	r9, sp, #96
 8141              	.LVL904:
 785:src/display.c **** 	    q = "\007\207i";
 8142              		.loc 1 785 4 is_stmt 1 view .LVU2614
 785:src/display.c **** 	    q = "\007\207i";
 8143              		.loc 1 785 7 is_stmt 0 view .LVU2615
 8144 035c 3FF4B3AE 		beq	.L753
 8145              	.L854:
 786:src/display.c **** 	    p = scopy(p, q);
 8146              		.loc 1 786 6 is_stmt 1 view .LVU2616
 8147              	.LVL905:
ARM GAS  /tmp/cc4E4VUn.s 			page 249


 787:src/display.c **** 	    //	    goto no_copy;
 8148              		.loc 1 787 6 view .LVU2617
 787:src/display.c **** 	    //	    goto no_copy;
 8149              		.loc 1 787 10 is_stmt 0 view .LVU2618
 8150 0360 6549     		ldr	r1, .L869
 8151 0362 3046     		mov	r0, r6
 8152 0364 FFF7FEFF 		bl	scopy
 8153              	.LVL906:
 8154 0368 8046     		mov	r8, r0
 8155              	.LVL907:
 787:src/display.c **** 	    //	    goto no_copy;
 8156              		.loc 1 787 10 view .LVU2619
 8157 036a B5E6     		b	.L754
 8158              	.LVL908:
 8159              	.L847:
 787:src/display.c **** 	    //	    goto no_copy;
 8160              		.loc 1 787 10 view .LVU2620
 8161 036c 634D     		ldr	r5, .L869+4
 686:src/display.c ****       }
 8162              		.loc 1 686 2 is_stmt 1 view .LVU2621
 686:src/display.c ****       }
 8163              		.loc 1 686 5 is_stmt 0 view .LVU2622
 8164 036e 002C     		cmp	r4, #0
 8165 0370 B5D0     		beq	.L741
 8166              	.L862:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8167              		.loc 1 603 22 view .LVU2623
 8168 0372 B046     		mov	r8, r6
 8169              	.LVL909:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8170              		.loc 1 603 22 view .LVU2624
 8171 0374 E5E6     		b	.L731
 8172              	.LVL910:
 8173              	.L851:
 720:src/display.c **** 	  *p2 = '\015';
 8174              		.loc 1 720 4 is_stmt 1 view .LVU2625
 720:src/display.c **** 	  *p2 = '\015';
 8175              		.loc 1 720 10 is_stmt 0 view .LVU2626
 8176 0376 2022     		movs	r2, #32
 721:src/display.c **** 	  goto skip;
 8177              		.loc 1 721 8 view .LVU2627
 8178 0378 0D23     		movs	r3, #13
 720:src/display.c **** 	  *p2 = '\015';
 8179              		.loc 1 720 10 view .LVU2628
 8180 037a 0270     		strb	r2, [r0]
 721:src/display.c **** 	  goto skip;
 8181              		.loc 1 721 4 is_stmt 1 view .LVU2629
 721:src/display.c **** 	  goto skip;
 8182              		.loc 1 721 8 is_stmt 0 view .LVU2630
 8183 037c 4370     		strb	r3, [r0, #1]
 722:src/display.c **** 	}
 8184              		.loc 1 722 4 is_stmt 1 view .LVU2631
 8185 037e AEE7     		b	.L741
 8186              	.LVL911:
 8187              	.L864:
 8188              	.LBB491:
 8189              	.LBB489:
ARM GAS  /tmp/cc4E4VUn.s 			page 250


 8190              	.LBB487:
 8191              	.LBI487:
3497:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8192              		.loc 1 3497 18 view .LVU2632
 8193              	.LBB488:
3498:src/display.c ****       }
 8194              		.loc 1 3498 2 view .LVU2633
3498:src/display.c ****       }
 8195              		.loc 1 3498 9 is_stmt 0 view .LVU2634
 8196 0380 0021     		movs	r1, #0
 8197 0382 17A8     		add	r0, sp, #92
 8198              	.LVL912:
3498:src/display.c ****       }
 8199              		.loc 1 3498 9 view .LVU2635
 8200 0384 FFF7FEFF 		bl	pixel_length
 8201              	.LVL913:
3498:src/display.c ****       }
 8202              		.loc 1 3498 9 view .LVU2636
 8203              	.LBE488:
 8204              	.LBE487:
3519:src/display.c ****       }
 8205              		.loc 1 3519 2 view .LVU2637
 8206 0388 2C28     		cmp	r0, #44
 8207 038a D4BF     		ite	le
 8208 038c 0021     		movle	r1, #0
 8209 038e 0121     		movgt	r1, #1
 8210 0390 ABE7     		b	.L787
 8211              	.L863:
 8212              	.LBE489:
 8213              	.LBE491:
 945:src/display.c ****       set_status_top_always(buf2);
 8214              		.loc 1 945 27 is_stmt 1 discriminator 1 view .LVU2638
 8215 0392 3046     		mov	r0, r6
 8216 0394 FFF7FEFF 		bl	set_status
 8217              	.LVL914:
 946:src/display.c ****       
 8218              		.loc 1 946 7 discriminator 1 view .LVU2639
 8219              	.LBB492:
 8220              	.LBI483:
3517:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8221              		.loc 1 3517 19 discriminator 1 view .LVU2640
 8222              	.LBB490:
3518:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8223              		.loc 1 3518 2 discriminator 1 view .LVU2641
3518:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8224              		.loc 1 3518 6 is_stmt 0 discriminator 1 view .LVU2642
 8225 0398 594B     		ldr	r3, .L869+8
3518:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8226              		.loc 1 3518 5 discriminator 1 view .LVU2643
 8227 039a B3F90030 		ldrsh	r3, [r3]
 8228 039e 0BB9     		cbnz	r3, .L784
 8229 03a0 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8230 03a2 9FE7     		b	.L785
 8231              	.L784:
3518:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8232              		.loc 1 3518 22 view .LVU2644
 8233 03a4 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
ARM GAS  /tmp/cc4E4VUn.s 			page 251


 8234 03a6 5A06     		lsls	r2, r3, #25
 8235 03a8 9CD5     		bpl	.L785
 8236              	.LBE490:
 8237              	.LBE492:
 948:src/display.c **** #else
 8238              		.loc 1 948 5 view .LVU2645
 8239 03aa 23B0     		add	sp, sp, #140
 8240              		.cfi_remember_state
 8241              		.cfi_def_cfa_offset 28
 8242              		@ sp needed
 8243 03ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8244              	.LVL915:
 8245              	.L850:
 8246              		.cfi_restore_state
 715:src/display.c **** 	  *p2 = '\024';
 8247              		.loc 1 715 4 is_stmt 1 view .LVU2646
 715:src/display.c **** 	  *p2 = '\024';
 8248              		.loc 1 715 10 is_stmt 0 view .LVU2647
 8249 03b0 2022     		movs	r2, #32
 716:src/display.c **** 	  goto skip;
 8250              		.loc 1 716 8 view .LVU2648
 8251 03b2 1423     		movs	r3, #20
 715:src/display.c **** 	  *p2 = '\024';
 8252              		.loc 1 715 10 view .LVU2649
 8253 03b4 0270     		strb	r2, [r0]
 716:src/display.c **** 	  goto skip;
 8254              		.loc 1 716 4 is_stmt 1 view .LVU2650
 716:src/display.c **** 	  goto skip;
 8255              		.loc 1 716 8 is_stmt 0 view .LVU2651
 8256 03b6 4370     		strb	r3, [r0, #1]
 717:src/display.c **** 	}
 8257              		.loc 1 717 4 is_stmt 1 view .LVU2652
 8258 03b8 91E7     		b	.L741
 8259              	.LVL916:
 8260              	.L857:
 804:src/display.c **** 	      *p2++ = '\207';
 8261              		.loc 1 804 8 view .LVU2653
 805:src/display.c **** 	      *p2++ = '\007';	    
 8262              		.loc 1 805 8 view .LVU2654
 806:src/display.c **** 	    }
 8263              		.loc 1 806 14 is_stmt 0 view .LVU2655
 8264 03ba 89F80230 		strb	r3, [r9, #2]
 805:src/display.c **** 	      *p2++ = '\007';	    
 8265              		.loc 1 805 14 view .LVU2656
 8266 03be 89F80120 		strb	r2, [r9, #1]
 806:src/display.c **** 	    }
 8267              		.loc 1 806 8 is_stmt 1 view .LVU2657
 806:src/display.c **** 	    }
 8268              		.loc 1 806 11 is_stmt 0 view .LVU2658
 8269 03c2 09F10309 		add	r9, r9, #3
 8270              	.LVL917:
 806:src/display.c **** 	    }
 8271              		.loc 1 806 11 view .LVU2659
 8272 03c6 98E6     		b	.L757
 8273              	.LVL918:
 8274              	.L798:
 842:src/display.c **** #endif
ARM GAS  /tmp/cc4E4VUn.s 			page 252


 8275              		.loc 1 842 19 view .LVU2660
 8276 03c8 4E49     		ldr	r1, .L869+12
 8277 03ca B0E6     		b	.L759
 8278              	.LVL919:
 8279              	.L858:
 8280              	.LBB493:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8281              		.loc 1 868 6 is_stmt 1 view .LVU2661
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8282              		.loc 1 868 44 is_stmt 0 view .LVU2662
 8283 03cc D9F80030 		ldr	r3, [r9]
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8284              		.loc 1 868 6 view .LVU2663
 8285 03d0 632B     		cmp	r3, #99
 8286 03d2 45DC     		bgt	.L865
 8287              	.L764:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8288              		.loc 1 868 6 discriminator 5 view .LVU2664
 8289 03d4 581C     		adds	r0, r3, #1
 8290              	.L768:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8291              		.loc 1 868 6 discriminator 6 view .LVU2665
 8292 03d6 FFF7FEFF 		bl	get_reg_n_int
 8293              	.LVL920:
 8294 03da 4246     		mov	r2, r8
 8295 03dc FFF7FEFF 		bl	set_int_x
 8296              	.LVL921:
 871:src/display.c **** 	  }
 8297              		.loc 1 871 6 is_stmt 1 discriminator 6 view .LVU2666
 8298 03e0 7DE7     		b	.L741
 8299              	.LVL922:
 8300              	.L743:
 871:src/display.c **** 	  }
 8301              		.loc 1 871 6 is_stmt 0 discriminator 6 view .LVU2667
 8302              	.LBE493:
 706:src/display.c **** 	    *p2++ = shift_char;
 8303              		.loc 1 706 30 discriminator 1 view .LVU2668
 8304 03e2 FFF7FEFF 		bl	is_dblmode
 8305              	.LVL923:
 706:src/display.c **** 	    *p2++ = shift_char;
 8306              		.loc 1 706 26 discriminator 1 view .LVU2669
 8307 03e6 0028     		cmp	r0, #0
 8308 03e8 3FF42EAE 		beq	.L745
 711:src/display.c **** 	  }
 8309              		.loc 1 711 6 is_stmt 1 view .LVU2670
 8310              	.LVL924:
 711:src/display.c **** 	  }
 8311              		.loc 1 711 12 is_stmt 0 view .LVU2671
 8312 03ec 4423     		movs	r3, #68
 8313 03ee 8DF85C30 		strb	r3, [sp, #92]
 711:src/display.c **** 	  }
 8314              		.loc 1 711 9 view .LVU2672
 8315 03f2 0DF15D00 		add	r0, sp, #93
 8316              	.LVL925:
 711:src/display.c **** 	  }
 8317              		.loc 1 711 9 view .LVU2673
 8318 03f6 2EE6     		b	.L744
ARM GAS  /tmp/cc4E4VUn.s 			page 253


 8319              	.LVL926:
 8320              	.L859:
 8321              	.LBB494:
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8322              		.loc 1 874 75 discriminator 2 view .LVU2674
 8323 03f8 FFF7FEFF 		bl	stack_size
 8324              	.LVL927:
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8325              		.loc 1 874 62 discriminator 2 view .LVU2675
 8326 03fc D9F80010 		ldr	r1, [r9]
 8327 0400 6330     		adds	r0, r0, #99
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8328              		.loc 1 874 46 discriminator 2 view .LVU2676
 8329 0402 8842     		cmp	r0, r1
 8330 0404 FFF6AAAE 		blt	.L770
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8331              		.loc 1 874 91 discriminator 4 view .LVU2677
 8332 0408 FFF7FEFF 		bl	get_cmdline
 8333              	.LVL928:
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8334              		.loc 1 874 88 discriminator 4 view .LVU2678
 8335 040c 20B1     		cbz	r0, .L773
 875:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8336              		.loc 1 875 7 view .LVU2679
 8337 040e 002C     		cmp	r4, #0
 8338 0410 6AD0     		beq	.L772
 875:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8339              		.loc 1 875 28 discriminator 1 view .LVU2680
 8340 0412 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 875:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8341              		.loc 1 875 10 discriminator 1 view .LVU2681
 8342 0414 5C06     		lsls	r4, r3, #25
 8343              	.LVL929:
 875:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8344              		.loc 1 875 10 discriminator 1 view .LVU2682
 8345 0416 67D4     		bmi	.L772
 8346              	.L773:
 8347 0418 D9F80010 		ldr	r1, [r9]
 8348 041c 9EE6     		b	.L770
 8349              	.LVL930:
 8350              	.L852:
 875:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8351              		.loc 1 875 10 discriminator 1 view .LVU2683
 8352              	.LBE494:
 725:src/display.c **** 	  if (State2.wascomplex) {
 8353              		.loc 1 725 28 discriminator 1 view .LVU2684
 8354 041e 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 725:src/display.c **** 	  if (State2.wascomplex) {
 8355              		.loc 1 725 24 discriminator 1 view .LVU2685
 8356 0420 13F0C00F 		tst	r3, #192
 8357 0424 5ED1     		bne	.L792
 725:src/display.c **** 	  if (State2.wascomplex) {
 8358              		.loc 1 725 60 discriminator 2 view .LVU2686
 8359 0426 384B     		ldr	r3, .L869+16
 8360 0428 1B68     		ldr	r3, [r3]
 725:src/display.c **** 	  if (State2.wascomplex) {
 8361              		.loc 1 725 46 discriminator 2 view .LVU2687
ARM GAS  /tmp/cc4E4VUn.s 			page 254


 8362 042a 002B     		cmp	r3, #0
 8363 042c 3FF41FAE 		beq	.L748
 726:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8364              		.loc 1 726 4 is_stmt 1 view .LVU2688
 729:src/display.c **** 	    if (RectPolConv == 1) {
 8365              		.loc 1 729 9 view .LVU2689
 730:src/display.c **** 	      q = "\007\306<";
 8366              		.loc 1 730 6 view .LVU2690
 734:src/display.c **** 	    }
 8367              		.loc 1 734 10 is_stmt 0 view .LVU2691
 8368 0430 3649     		ldr	r1, .L869+20
 8369 0432 374A     		ldr	r2, .L869+24
 8370 0434 012B     		cmp	r3, #1
 8371 0436 18BF     		it	ne
 8372 0438 1146     		movne	r1, r2
 8373              	.L749:
 8374              	.LVL931:
 737:src/display.c **** 
 8375              		.loc 1 737 4 is_stmt 1 view .LVU2692
 737:src/display.c **** 
 8376              		.loc 1 737 8 is_stmt 0 view .LVU2693
 8377 043a 3046     		mov	r0, r6
 8378              	.LVL932:
 737:src/display.c **** 
 8379              		.loc 1 737 8 view .LVU2694
 8380 043c FFF7FEFF 		bl	scopy
 8381              	.LVL933:
 737:src/display.c **** 
 8382              		.loc 1 737 8 view .LVU2695
 8383 0440 8046     		mov	r8, r0
 8384              	.LVL934:
 739:src/display.c **** 	}
 8385              		.loc 1 739 4 is_stmt 1 view .LVU2696
 8386 0442 7EE6     		b	.L731
 8387              	.LVL935:
 8388              	.L855:
 791:src/display.c **** 	    p = scopy(p, q);
 8389              		.loc 1 791 6 view .LVU2697
 792:src/display.c **** 	    //	    goto no_copy;
 8390              		.loc 1 792 6 view .LVU2698
 792:src/display.c **** 	    //	    goto no_copy;
 8391              		.loc 1 792 10 is_stmt 0 view .LVU2699
 8392 0444 3349     		ldr	r1, .L869+28
 8393 0446 3046     		mov	r0, r6
 8394 0448 FFF7FEFF 		bl	scopy
 8395              	.LVL936:
 8396 044c 8046     		mov	r8, r0
 8397              	.LVL937:
 792:src/display.c **** 	    //	    goto no_copy;
 8398              		.loc 1 792 10 view .LVU2700
 8399 044e 43E6     		b	.L754
 8400              	.LVL938:
 8401              	.L794:
 748:src/display.c **** #endif
 8402              		.loc 1 748 19 view .LVU2701
 8403 0450 2C49     		ldr	r1, .L869+12
 8404 0452 19E6     		b	.L750
ARM GAS  /tmp/cc4E4VUn.s 			page 255


 8405              	.LVL939:
 8406              	.L856:
 796:src/display.c **** 	    p = scopy(p, q);
 8407              		.loc 1 796 6 is_stmt 1 view .LVU2702
 797:src/display.c **** 	    //	    goto no_copy;
 8408              		.loc 1 797 6 view .LVU2703
 797:src/display.c **** 	    //	    goto no_copy;
 8409              		.loc 1 797 10 is_stmt 0 view .LVU2704
 8410 0454 3049     		ldr	r1, .L869+32
 8411 0456 3046     		mov	r0, r6
 8412 0458 FFF7FEFF 		bl	scopy
 8413              	.LVL940:
 8414 045c 8046     		mov	r8, r0
 8415              	.LVL941:
 797:src/display.c **** 	    //	    goto no_copy;
 8416              		.loc 1 797 10 view .LVU2705
 8417 045e 3BE6     		b	.L754
 8418              	.LVL942:
 8419              	.L865:
 8420              	.LBB495:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8421              		.loc 1 868 85 discriminator 2 view .LVU2706
 8422 0460 FFF7FEFF 		bl	stack_size
 8423              	.LVL943:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8424              		.loc 1 868 72 discriminator 2 view .LVU2707
 8425 0464 D9F80030 		ldr	r3, [r9]
 8426 0468 6330     		adds	r0, r0, #99
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8427              		.loc 1 868 56 discriminator 2 view .LVU2708
 8428 046a 9842     		cmp	r0, r3
 8429 046c B2DB     		blt	.L764
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8430              		.loc 1 868 101 discriminator 4 view .LVU2709
 8431 046e FFF7FEFF 		bl	get_cmdline
 8432              	.LVL944:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8433              		.loc 1 868 98 discriminator 4 view .LVU2710
 8434 0472 20B1     		cbz	r0, .L767
 869:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8435              		.loc 1 869 7 view .LVU2711
 8436 0474 002C     		cmp	r4, #0
 8437 0476 3AD0     		beq	.L766
 869:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8438              		.loc 1 869 28 discriminator 1 view .LVU2712
 8439 0478 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 869:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8440              		.loc 1 869 10 discriminator 1 view .LVU2713
 8441 047a 5F06     		lsls	r7, r3, #25
 8442 047c 37D4     		bmi	.L766
 8443              	.L767:
 8444 047e D9F80030 		ldr	r3, [r9]
 8445 0482 A7E7     		b	.L764
 8446              	.LVL945:
 8447              	.L860:
 8448              	.LBB481:
 879:src/display.c **** 
ARM GAS  /tmp/cc4E4VUn.s 			page 256


 8449              		.loc 1 879 8 is_stmt 1 view .LVU2714
 881:src/display.c **** 	      UState.nothousands = 1;
 8450              		.loc 1 881 8 is_stmt 0 view .LVU2715
 8451 0484 2A22     		movs	r2, #42
 8452 0486 3046     		mov	r0, r6
 879:src/display.c **** 
 8453              		.loc 1 879 44 view .LVU2716
 8454 0488 93F8E787 		ldrb	r8, [r3, #2023]	@ zero_extendqisi2
 8455              	.LVL946:
 879:src/display.c **** 
 8456              		.loc 1 879 44 view .LVU2717
 8457 048c 234C     		ldr	r4, .L869+36
 881:src/display.c **** 	      UState.nothousands = 1;
 8458              		.loc 1 881 8 view .LVU2718
 8459 048e FFF7FEFF 		bl	xset
 8460              	.LVL947:
 882:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8461              		.loc 1 882 27 view .LVU2719
 8462 0492 3A68     		ldr	r2, [r7]
 8463 0494 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8464 0498 43F04003 		orr	r3, r3, #64
 8465 049c 82F8E737 		strb	r3, [r2, #2023]
 883:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8466              		.loc 1 883 8 view .LVU2720
 8467 04a0 3146     		mov	r1, r6
 8468 04a2 03A8     		add	r0, sp, #12
 8469 04a4 FFF7FEFF 		bl	set_x_hms
 8470              	.LVL948:
 884:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8471              		.loc 1 884 27 view .LVU2721
 8472 04a8 3B68     		ldr	r3, [r7]
 8473 04aa 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 879:src/display.c **** 
 8474              		.loc 1 879 44 view .LVU2722
 8475 04ae C8F38018 		ubfx	r8, r8, #6, #1
 8476              	.LVL949:
 881:src/display.c **** 	      UState.nothousands = 1;
 8477              		.loc 1 881 8 is_stmt 1 view .LVU2723
 882:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8478              		.loc 1 882 8 view .LVU2724
 883:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8479              		.loc 1 883 8 view .LVU2725
 884:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8480              		.loc 1 884 8 view .LVU2726
 884:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8481              		.loc 1 884 27 is_stmt 0 view .LVU2727
 8482 04b2 68F38612 		bfi	r2, r8, #6, #1
 8483 04b6 83F8E727 		strb	r2, [r3, #2023]
 889:src/display.c **** 	      while (*p) {
 8484              		.loc 1 889 8 is_stmt 1 view .LVU2728
 8485              	.LVL950:
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8486              		.loc 1 890 8 view .LVU2729
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8487              		.loc 1 890 14 view .LVU2730
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8488              		.loc 1 890 15 is_stmt 0 view .LVU2731
ARM GAS  /tmp/cc4E4VUn.s 			page 257


 8489 04ba 4021     		movs	r1, #64
 884:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8490              		.loc 1 884 27 view .LVU2732
 8491 04bc 0522     		movs	r2, #5
 8492 04be 05E0     		b	.L779
 8493              	.LVL951:
 8494              	.L866:
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8495              		.loc 1 890 15 view .LVU2733
 8496 04c0 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8497              	.LVL952:
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8498              		.loc 1 890 14 view .LVU2734
 8499 04c4 0029     		cmp	r1, #0
 8500 04c6 3FF40AAF 		beq	.L741
 8501 04ca 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8502              	.LVL953:
 8503              	.L779:
 891:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8504              		.loc 1 891 3 is_stmt 1 view .LVU2735
 8505 04cc 3046     		mov	r0, r6
 8506 04ce FFF7FEFF 		bl	replace_char
 8507              	.LVL954:
 892:src/display.c **** 		  goto skip;
 8508              		.loc 1 892 3 view .LVU2736
 892:src/display.c **** 		  goto skip;
 8509              		.loc 1 892 7 is_stmt 0 view .LVU2737
 8510 04d2 0121     		movs	r1, #1
 8511 04d4 3046     		mov	r0, r6
 8512 04d6 FFF7FEFF 		bl	pixel_length
 8513              	.LVL955:
 895:src/display.c **** 	      }
 8514              		.loc 1 895 3 is_stmt 1 view .LVU2738
 890:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8515              		.loc 1 890 14 view .LVU2739
 892:src/display.c **** 		  goto skip;
 8516              		.loc 1 892 6 is_stmt 0 view .LVU2740
 8517 04da 2C28     		cmp	r0, #44
 8518 04dc F0DC     		bgt	.L866
 8519 04de FEE6     		b	.L741
 8520              	.LVL956:
 8521              	.L845:
 892:src/display.c **** 		  goto skip;
 8522              		.loc 1 892 6 view .LVU2741
 8523              	.LBE481:
 8524              	.LBE495:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8525              		.loc 1 683 4 is_stmt 1 view .LVU2742
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8526              		.loc 1 683 11 is_stmt 0 view .LVU2743
 8527 04e0 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8528              		.loc 1 683 27 is_stmt 1 view .LVU2744
 8529 04e2 EBE6     		b	.L788
 8530              	.LVL957:
 8531              	.L792:
 727:src/display.c **** 	  }
ARM GAS  /tmp/cc4E4VUn.s 			page 258


 8532              		.loc 1 727 8 is_stmt 0 view .LVU2745
 8533 04e4 0449     		ldr	r1, .L869
 8534 04e6 A8E7     		b	.L749
 8535              	.LVL958:
 8536              	.L772:
 8537              	.LBB496:
 874:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8538              		.loc 1 874 4 discriminator 7 view .LVU2746
 8539 04e8 D9F80010 		ldr	r1, [r9]
 8540 04ec 37E6     		b	.L774
 8541              	.LVL959:
 8542              	.L766:
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8543              		.loc 1 868 6 discriminator 7 view .LVU2747
 8544 04ee D9F80000 		ldr	r0, [r9]
 8545 04f2 70E7     		b	.L768
 8546              	.LVL960:
 8547              	.L800:
 8548              	.LBB482:
 913:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8549              		.loc 1 913 25 view .LVU2748
 8550 04f4 3E27     		movs	r7, #62
 8551              	.LVL961:
 913:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8552              		.loc 1 913 25 view .LVU2749
 8553 04f6 5FE6     		b	.L781
 8554              	.L870:
 8555              		.align	2
 8556              	.L869:
 8557 04f8 08000000 		.word	.LC5
 8558 04fc 00000000 		.word	StateWhileOn
 8559 0500 00000000 		.word	.LANCHOR18
 8560 0504 14000000 		.word	.LC8
 8561 0508 00000000 		.word	RectPolConv
 8562 050c 04000000 		.word	.LC4
 8563 0510 0C000000 		.word	.LC6
 8564 0514 34000000 		.word	.LC13
 8565 0518 38000000 		.word	.LC14
 8566 051c 00000000 		.word	.LANCHOR17
 8567              	.LBE482:
 8568              	.LBE496:
 8569              		.cfi_endproc
 8570              	.LFE16:
 8572              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8573              		.align	2
 8574              	.LC18:
 8575 0000 0D00     		.ascii	"\015\000"
 8576 0002 0000     		.align	2
 8577              	.LC19:
 8578 0004 060600   		.ascii	"\006\006\000"
 8579 0007 00       		.align	2
 8580              	.LC21:
 8581 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8581      492C2057 
 8581      77414C74 
 8581      4500
 8582 0016 0000     		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 259


 8583              	.LC22:
 8584 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8584      2055204C 
 8584      20492C20 
 8584      20572041 
 8584      204C2054 
 8585 0032 0000     		.align	2
 8586              	.LC23:
 8587 0034 2000     		.ascii	" \000"
 8588 0036 0000     		.align	2
 8589              	.LC24:
 8590 0038 48595000 		.ascii	"HYP\000"
 8591              		.align	2
 8592              	.LC27:
 8593 003c 7F060600 		.ascii	"\177\006\006\000"
 8594              		.align	2
 8595              	.LC28:
 8596 0040 3020746F 		.ascii	"0 to 255\000"
 8596      20323535 
 8596      00
 8597 0049 000000   		.align	2
 8598              	.LC29:
 8599 004c 46726565 		.ascii	"Free:\000"
 8599      3A00
 8600 0052 0000     		.align	2
 8601              	.LC30:
 8602 0054 202C2046 		.ascii	" , FL. \000"
 8602      4C2E2000 
 8603              		.align	2
 8604              	.LC31:
 8605 005c 52656773 		.ascii	"Regs:\000"
 8605      3A00
 8606 0062 0000     		.align	2
 8607              	.LC32:
 8608 0064 20910606 		.ascii	" \221\006\006+\000"
 8608      2B00
 8609 006a 0000     		.align	2
 8610              	.LC33:
 8611 006c 202C204C 		.ascii	" , Loc. \000"
 8611      6F632E20 
 8611      00
 8612 0075 000000   		.align	2
 8613              	.LC34:
 8614 0078 464C2000 		.ascii	"FL \000"
 8615              		.align	2
 8616              	.LC35:
 8617 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8617      06413A44 
 8617      064C494A 
 8617      4B00
 8618 008a 0000     		.align	2
 8619              	.LC36:
 8620 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8620      302D2E31 
 8620      3500
 8621 0096 0000     		.align	2
 8622              	.LC37:
ARM GAS  /tmp/cc4E4VUn.s 			page 260


 8623 0098 43414C4C 		.ascii	"CALLS\000"
 8623      5300
 8624 009e 0000     		.align	2
 8625              	.LC38:
 8626 00a0 52656720 		.ascii	"Reg \000"
 8626      00
 8627 00a5 000000   		.align	2
 8628              	.LC39:
 8629 00a8 00       		.ascii	"\000"
 8630 00a9 000000   		.align	2
 8631              	.LC40:
 8632 00ac 202D2D2D 		.ascii	" ---\000"
 8632      00
 8633 00b1 000000   		.align	2
 8634              	.LC26:
 8635 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8635      093E0A00 
 8636              		.align	2
 8637              	.LC25:
 8638 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8638      41424344 
 8638      4C494A4B 
 8638      00
 8639              		.section	.text.display,"ax",%progbits
 8640              		.align	1
 8641              		.p2align 2,,3
 8642              		.global	display
 8643              		.syntax unified
 8644              		.thumb
 8645              		.thumb_func
 8646              		.fpu fpv4-sp-d16
 8648              	display:
 8649              	.LFB34:
2592:src/display.c **** 	int i, j;
 8650              		.loc 1 2592 26 is_stmt 1 view -0
 8651              		.cfi_startproc
 8652              		@ args = 0, pretend = 0, frame = 168
 8653              		@ frame_needed = 0, uses_anonymous_args = 0
2593:src/display.c **** 	char buf[40], *bp = buf;
 8654              		.loc 1 2593 2 view .LVU2751
2594:src/display.c **** 	const char *p;
 8655              		.loc 1 2594 2 view .LVU2752
2592:src/display.c **** 	int i, j;
 8656              		.loc 1 2592 26 is_stmt 0 view .LVU2753
 8657 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8658              		.cfi_def_cfa_offset 36
 8659              		.cfi_offset 4, -36
 8660              		.cfi_offset 5, -32
 8661              		.cfi_offset 6, -28
 8662              		.cfi_offset 7, -24
 8663              		.cfi_offset 8, -20
 8664              		.cfi_offset 9, -16
 8665              		.cfi_offset 10, -12
 8666              		.cfi_offset 11, -8
 8667              		.cfi_offset 14, -4
2597:src/display.c **** 	int skip = 0;
 8668              		.loc 1 2597 24 view .LVU2754
ARM GAS  /tmp/cc4E4VUn.s 			page 261


 8669 0004 BC4C     		ldr	r4, .L1192
2602:src/display.c **** 	if (State2.disp_freeze) {
 8670              		.loc 1 2602 16 view .LVU2755
 8671 0006 DFF820A3 		ldr	r10, .L1192+48
2597:src/display.c **** 	int skip = 0;
 8672              		.loc 1 2597 24 view .LVU2756
 8673 000a 94F80EB0 		ldrb	fp, [r4, #14]	@ zero_extendqisi2
2592:src/display.c **** 	int i, j;
 8674              		.loc 1 2592 26 view .LVU2757
 8675 000e ABB0     		sub	sp, sp, #172
 8676              		.cfi_def_cfa_offset 208
 8677              	.LVL962:
2595:src/display.c **** 	int annuc = 0;
 8678              		.loc 1 2595 2 is_stmt 1 view .LVU2758
2596:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8679              		.loc 1 2596 2 view .LVU2759
2597:src/display.c **** 	int skip = 0;
 8680              		.loc 1 2597 2 view .LVU2760
2598:src/display.c **** 	int x_disp = 0;
 8681              		.loc 1 2598 2 view .LVU2761
2599:src/display.c **** 	const int shift = cur_shift();
 8682              		.loc 1 2599 2 view .LVU2762
2600:src/display.c **** 
 8683              		.loc 1 2600 2 view .LVU2763
2600:src/display.c **** 
 8684              		.loc 1 2600 20 is_stmt 0 view .LVU2764
 8685 0010 FFF7FEFF 		bl	cur_shift
 8686              	.LVL963:
2603:src/display.c **** 	  State2.disp_freeze = 0;
 8687              		.loc 1 2603 6 view .LVU2765
 8688 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2602:src/display.c **** 	if (State2.disp_freeze) {
 8689              		.loc 1 2602 16 view .LVU2766
 8690 0016 0022     		movs	r2, #0
 8691              	.LVL964:
2602:src/display.c **** 	if (State2.disp_freeze) {
 8692              		.loc 1 2602 2 is_stmt 1 view .LVU2767
2603:src/display.c **** 	  State2.disp_freeze = 0;
 8693              		.loc 1 2603 5 is_stmt 0 view .LVU2768
 8694 0018 13F01007 		ands	r7, r3, #16
2602:src/display.c **** 	if (State2.disp_freeze) {
 8695              		.loc 1 2602 16 view .LVU2769
 8696 001c AAF80020 		strh	r2, [r10]	@ movhi
2603:src/display.c **** 	  State2.disp_freeze = 0;
 8697              		.loc 1 2603 2 is_stmt 1 view .LVU2770
2603:src/display.c **** 	  State2.disp_freeze = 0;
 8698              		.loc 1 2603 5 is_stmt 0 view .LVU2771
 8699 0020 40F0EE80 		bne	.L1153
2613:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8700              		.loc 1 2613 2 is_stmt 1 view .LVU2772
2613:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8701              		.loc 1 2613 6 is_stmt 0 view .LVU2773
 8702 0024 B54B     		ldr	r3, .L1192+4
 8703 0026 1D68     		ldr	r5, [r3]
2613:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8704              		.loc 1 2613 5 view .LVU2774
 8705 0028 002D     		cmp	r5, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 262


 8706 002a 40F08480 		bne	.L1154
2632:src/display.c **** #  endif
 8707              		.loc 1 2632 2 is_stmt 1 view .LVU2775
2632:src/display.c **** #  endif
 8708              		.loc 1 2632 33 is_stmt 0 view .LVU2776
 8709 002e DFF8F492 		ldr	r9, .L1192+44
 8710 0032 D9F80030 		ldr	r3, [r9]
 8711 0036 0646     		mov	r6, r0
 8712 0038 93F8EA87 		ldrb	r8, [r3, #2026]	@ zero_extendqisi2
2638:src/display.c **** 
 8713              		.loc 1 2638 2 view .LVU2777
 8714 003c FFF7FEFF 		bl	reset_disp
 8715              	.LVL965:
2641:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8716              		.loc 1 2641 2 view .LVU2778
 8717 0040 20A8     		add	r0, sp, #128
 8718              	.LVL966:
2641:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8719              		.loc 1 2641 2 view .LVU2779
 8720 0042 2822     		movs	r2, #40
 8721 0044 2946     		mov	r1, r5
 8722 0046 FFF7FEFF 		bl	xset
 8723              	.LVL967:
2647:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8724              		.loc 1 2647 6 view .LVU2780
 8725 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2647:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8726              		.loc 1 2647 5 view .LVU2781
 8727 004c D806     		lsls	r0, r3, #27
2632:src/display.c **** #  endif
 8728              		.loc 1 2632 12 view .LVU2782
 8729 004e C8F38008 		ubfx	r8, r8, #2, #1
 8730              	.LVL968:
2638:src/display.c **** 
 8731              		.loc 1 2638 2 is_stmt 1 view .LVU2783
2641:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8732              		.loc 1 2641 2 view .LVU2784
2647:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8733              		.loc 1 2647 2 view .LVU2785
2647:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8734              		.loc 1 2647 5 is_stmt 0 view .LVU2786
 8735 0052 00F16D81 		bmi	.L1155
2659:src/display.c **** 	  if (yreg_enabled) {
 8736              		.loc 1 2659 9 is_stmt 1 view .LVU2787
2659:src/display.c **** 	  if (yreg_enabled) {
 8737              		.loc 1 2659 13 is_stmt 0 view .LVU2788
 8738 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2659:src/display.c **** 	  if (yreg_enabled) {
 8739              		.loc 1 2659 12 view .LVU2789
 8740 0058 5107     		lsls	r1, r2, #29
 8741 005a 00F0DB80 		beq	.L879
2660:src/display.c **** 	    set_status_top(S_SURE);
 8742              		.loc 1 2660 4 is_stmt 1 view .LVU2790
2660:src/display.c **** 	    set_status_top(S_SURE);
 8743              		.loc 1 2660 7 is_stmt 0 view .LVU2791
 8744 005e B8F1000F 		cmp	r8, #0
 8745 0062 00F0AF81 		beq	.L880
ARM GAS  /tmp/cc4E4VUn.s 			page 263


2661:src/display.c **** 	    no_status_top = 1;
 8746              		.loc 1 2661 6 is_stmt 1 view .LVU2792
 8747              	.LVL969:
 8748              	.LBB556:
 8749              	.LBI556:
3507:src/display.c **** 	if (no_status_top) return;
 8750              		.loc 1 3507 19 view .LVU2793
 8751              	.LBB557:
3508:src/display.c **** 	if (State2.runmode) {
 8752              		.loc 1 3508 2 view .LVU2794
3508:src/display.c **** 	if (State2.runmode) {
 8753              		.loc 1 3508 5 is_stmt 0 view .LVU2795
 8754 0066 BAF90030 		ldrsh	r3, [r10]
 8755 006a 13B9     		cbnz	r3, .L882
 8756 006c A448     		ldr	r0, .L1192+8
 8757 006e FFF7FEFF 		bl	set_status_top.part.0
 8758              	.LVL970:
 8759              	.L882:
3508:src/display.c **** 	if (State2.runmode) {
 8760              		.loc 1 3508 5 view .LVU2796
 8761              	.LBE557:
 8762              	.LBE556:
2662:src/display.c **** 	    annuc = 1;
 8763              		.loc 1 2662 6 is_stmt 1 view .LVU2797
2662:src/display.c **** 	    annuc = 1;
 8764              		.loc 1 2662 20 is_stmt 0 view .LVU2798
 8765 0072 0125     		movs	r5, #1
 8766 0074 AAF80050 		strh	r5, [r10]	@ movhi
2663:src/display.c **** 	  }
 8767              		.loc 1 2663 6 is_stmt 1 view .LVU2799
 8768              	.LVL971:
2886:src/display.c ****       nostk:
 8769              		.loc 1 2886 2 view .LVU2800
 8770 0078 FFF7FEFF 		bl	show_stack
 8771              	.LVL972:
2888:src/display.c **** 	if (!skip) {
 8772              		.loc 1 2888 2 view .LVU2801
 8773 007c A14B     		ldr	r3, .L1192+12
 8774 007e A24F     		ldr	r7, .L1192+16
 8775 0080 0193     		str	r3, [sp, #4]
 8776 0082 FFF7FEFF 		bl	show_flags
 8777              	.LVL973:
2889:src/display.c **** 	  if (State2.runmode) {
 8778              		.loc 1 2889 2 view .LVU2802
 8779              	.L883:
2890:src/display.c **** 	  only_update_x:
 8780              		.loc 1 2890 4 view .LVU2803
2890:src/display.c **** 	  only_update_x:
 8781              		.loc 1 2890 8 is_stmt 0 view .LVU2804
 8782 0086 A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
2890:src/display.c **** 	  only_update_x:
 8783              		.loc 1 2890 7 view .LVU2805
 8784 0088 16F04006 		ands	r6, r6, #64
 8785 008c 5FD1     		bne	.L876
 8786              	.LBB558:
2908:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8787              		.loc 1 2908 6 is_stmt 1 view .LVU2806
ARM GAS  /tmp/cc4E4VUn.s 			page 264


2908:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8788              		.loc 1 2908 24 is_stmt 0 view .LVU2807
 8789 008e D9F80030 		ldr	r3, [r9]
2912:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8790              		.loc 1 2912 6 view .LVU2808
 8791 0092 DFF89892 		ldr	r9, .L1192+52
2908:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8792              		.loc 1 2908 19 view .LVU2809
 8793 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 8794              	.LVL974:
2909:src/display.c **** 	    const int n = nLIB(pc);
 8795              		.loc 1 2909 6 is_stmt 1 view .LVU2810
2909:src/display.c **** 	    const int n = nLIB(pc);
 8796              		.loc 1 2909 25 is_stmt 0 view .LVU2811
 8797 009a 5846     		mov	r0, fp
 8798 009c FFF7FEFF 		bl	user_pc
 8799              	.LVL975:
2911:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8800              		.loc 1 2911 6 view .LVU2812
 8801 00a0 2822     		movs	r2, #40
 8802 00a2 3146     		mov	r1, r6
2909:src/display.c **** 	    const int n = nLIB(pc);
 8803              		.loc 1 2909 25 view .LVU2813
 8804 00a4 8046     		mov	r8, r0
2911:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8805              		.loc 1 2911 6 view .LVU2814
 8806 00a6 20A8     		add	r0, sp, #128
 8807              	.LVL976:
2910:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8808              		.loc 1 2910 6 is_stmt 1 view .LVU2815
2911:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8809              		.loc 1 2911 6 is_stmt 0 view .LVU2816
 8810 00a8 FFF7FEFF 		bl	xset
 8811              	.LVL977:
2910:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8812              		.loc 1 2910 20 view .LVU2817
 8813 00ac 4FEA9B3B 		lsr	fp, fp, #14
 8814              	.LVL978:
2911:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8815              		.loc 1 2911 6 is_stmt 1 view .LVU2818
2912:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8816              		.loc 1 2912 6 view .LVU2819
 8817 00b0 D9F80000 		ldr	r0, [r9]
 8818 00b4 3246     		mov	r2, r6
 8819 00b6 0121     		movs	r1, #1
 8820 00b8 FFF7FEFF 		bl	set_exp
 8821              	.LVL979:
2913:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8822              		.loc 1 2913 6 view .LVU2820
 8823 00bc BBF1000F 		cmp	fp, #0
 8824 00c0 40F08B81 		bne	.L1156
 8825 00c4 9149     		ldr	r1, .L1192+20
 8826 00c6 20A8     		add	r0, sp, #128
 8827 00c8 FFF7FEFF 		bl	scopy_spc
 8828              	.LVL980:
 8829 00cc 0322     		movs	r2, #3
 8830 00ce 4146     		mov	r1, r8
ARM GAS  /tmp/cc4E4VUn.s 			page 265


 8831 00d0 FFF7FEFF 		bl	num_arg_0
 8832              	.LVL981:
2915:src/display.c **** #ifndef REALBUILD
 8833              		.loc 1 2915 6 view .LVU2821
 8834 00d4 0921     		movs	r1, #9
 8835 00d6 20A8     		add	r0, sp, #128
 8836 00d8 FFF7FEFF 		bl	set_digits_string
 8837              	.LVL982:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8838              		.loc 1 2917 6 view .LVU2822
 8839 00dc 5946     		mov	r1, fp
 8840 00de 2822     		movs	r2, #40
 8841 00e0 20A8     		add	r0, sp, #128
 8842 00e2 FFF7FEFF 		bl	xset
 8843              	.LVL983:
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8844              		.loc 1 2918 6 view .LVU2823
 8845 00e6 5A46     		mov	r2, fp
 8846 00e8 0121     		movs	r1, #1
 8847 00ea D9F80000 		ldr	r0, [r9]
 8848 00ee FFF7FEFF 		bl	set_exp
 8849              	.LVL984:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8850              		.loc 1 2919 6 view .LVU2824
 8851 00f2 8749     		ldr	r1, .L1192+24
2913:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8852              		.loc 1 2913 6 is_stmt 0 view .LVU2825
 8853 00f4 4FF0030B 		mov	fp, #3
 8854              	.LVL985:
 8855              	.L1011:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8856              		.loc 1 2919 6 discriminator 4 view .LVU2826
 8857 00f8 20A8     		add	r0, sp, #128
 8858 00fa FFF7FEFF 		bl	scopy_spc
 8859              	.LVL986:
 8860 00fe 4146     		mov	r1, r8
 8861 0100 5A46     		mov	r2, fp
 8862 0102 FFF7FEFF 		bl	num_arg_0
 8863              	.LVL987:
 8864              	.LBB559:
2922:src/display.c **** 	      char *l=LastDisplayedNumber;
 8865              		.loc 1 2922 8 is_stmt 1 discriminator 4 view .LVU2827
2923:src/display.c **** 	      *l++=' ';
 8866              		.loc 1 2923 8 discriminator 4 view .LVU2828
2924:src/display.c **** 	      while(*b) {
 8867              		.loc 1 2924 8 discriminator 4 view .LVU2829
2924:src/display.c **** 	      while(*b) {
 8868              		.loc 1 2924 12 is_stmt 0 discriminator 4 view .LVU2830
 8869 0106 834B     		ldr	r3, .L1192+28
2925:src/display.c **** 		*l++=*b++;
 8870              		.loc 1 2925 14 discriminator 4 view .LVU2831
 8871 0108 9DF88010 		ldrb	r1, [sp, #128]	@ zero_extendqisi2
2924:src/display.c **** 	      while(*b) {
 8872              		.loc 1 2924 12 discriminator 4 view .LVU2832
 8873 010c 2026     		movs	r6, #32
 8874 010e 1E70     		strb	r6, [r3]
2925:src/display.c **** 		*l++=*b++;
ARM GAS  /tmp/cc4E4VUn.s 			page 266


 8875              		.loc 1 2925 8 is_stmt 1 discriminator 4 view .LVU2833
2925:src/display.c **** 		*l++=*b++;
 8876              		.loc 1 2925 13 discriminator 4 view .LVU2834
 8877 0110 0029     		cmp	r1, #0
 8878 0112 00F0C382 		beq	.L1023
 8879 0116 0333     		adds	r3, r3, #3
 8880 0118 20A8     		add	r0, sp, #128
 8881              	.LVL988:
 8882              	.L1005:
2926:src/display.c **** 		*l++=' ';
 8883              		.loc 1 2926 3 view .LVU2835
2926:src/display.c **** 		*l++=' ';
 8884              		.loc 1 2926 7 is_stmt 0 view .LVU2836
 8885 011a 03F8021C 		strb	r1, [r3, #-2]
2927:src/display.c **** 	      }
 8886              		.loc 1 2927 3 is_stmt 1 view .LVU2837
 8887              	.LVL989:
2925:src/display.c **** 		*l++=*b++;
 8888              		.loc 1 2925 14 is_stmt 0 view .LVU2838
 8889 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8890              	.LVL990:
2927:src/display.c **** 	      }
 8891              		.loc 1 2927 7 view .LVU2839
 8892 0122 03F8016C 		strb	r6, [r3, #-1]
2925:src/display.c **** 		*l++=*b++;
 8893              		.loc 1 2925 13 is_stmt 1 view .LVU2840
 8894 0126 1A46     		mov	r2, r3
 8895 0128 0233     		adds	r3, r3, #2
 8896              	.LVL991:
2925:src/display.c **** 		*l++=*b++;
 8897              		.loc 1 2925 13 is_stmt 0 view .LVU2841
 8898 012a 0029     		cmp	r1, #0
 8899 012c F5D1     		bne	.L1005
 8900              	.LVL992:
 8901              	.L1004:
2929:src/display.c **** 	    }
 8902              		.loc 1 2929 8 is_stmt 1 view .LVU2842
2929:src/display.c **** 	    }
 8903              		.loc 1 2929 10 is_stmt 0 view .LVU2843
 8904 012e 0023     		movs	r3, #0
 8905 0130 794E     		ldr	r6, .L1192+32
 8906 0132 1370     		strb	r3, [r2]
 8907              	.LVL993:
2929:src/display.c **** 	    }
 8908              		.loc 1 2929 10 view .LVU2844
 8909              	.LBE559:
 8910              	.LBE558:
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8911              		.loc 1 2934 2 is_stmt 1 view .LVU2845
 8912 0134 21E0     		b	.L1152
 8913              	.LVL994:
 8914              	.L1154:
2620:src/display.c **** 
 8915              		.loc 1 2620 4 view .LVU2846
 8916 0136 FFF7FEFF 		bl	wait_for_display
 8917              	.LVL995:
2623:src/display.c **** 	    clr_dot(i);
ARM GAS  /tmp/cc4E4VUn.s 			page 267


 8918              		.loc 1 2623 4 view .LVU2847
2623:src/display.c **** 	    clr_dot(i);
 8919              		.loc 1 2623 16 view .LVU2848
 8920              	.L875:
2624:src/display.c **** 	  }
 8921              		.loc 1 2624 6 discriminator 3 view .LVU2849
 8922 013a 3846     		mov	r0, r7
2623:src/display.c **** 	    clr_dot(i);
 8923              		.loc 1 2623 31 is_stmt 0 discriminator 3 view .LVU2850
 8924 013c 0137     		adds	r7, r7, #1
 8925              	.LVL996:
2624:src/display.c **** 	  }
 8926              		.loc 1 2624 6 discriminator 3 view .LVU2851
 8927 013e FFF7FEFF 		bl	clr_dot
 8928              	.LVL997:
2623:src/display.c **** 	    clr_dot(i);
 8929              		.loc 1 2623 31 is_stmt 1 discriminator 3 view .LVU2852
2623:src/display.c **** 	    clr_dot(i);
 8930              		.loc 1 2623 16 discriminator 3 view .LVU2853
2623:src/display.c **** 	    clr_dot(i);
 8931              		.loc 1 2623 4 is_stmt 0 discriminator 3 view .LVU2854
 8932 0142 832F     		cmp	r7, #131
 8933 0144 F9D1     		bne	.L875
 8934 0146 6F4B     		ldr	r3, .L1192+12
 8935 0148 6F4F     		ldr	r7, .L1192+16
 8936              	.LVL998:
2623:src/display.c **** 	    clr_dot(i);
 8937              		.loc 1 2623 4 discriminator 3 view .LVU2855
 8938 014a 0193     		str	r3, [sp, #4]
2596:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8939              		.loc 1 2596 6 view .LVU2856
 8940 014c 0025     		movs	r5, #0
 8941              	.LVL999:
 8942              	.L876:
2892:src/display.c **** 	    if (p == NULL || cata) {
 8943              		.loc 1 2892 6 is_stmt 1 view .LVU2857
2892:src/display.c **** 	    if (p == NULL || cata) {
 8944              		.loc 1 2892 10 is_stmt 0 view .LVU2858
 8945 014e FFF7FEFF 		bl	get_cmdline
 8946              	.LVL1000:
2893:src/display.c **** 	      if (ShowRegister != -1) {
 8947              		.loc 1 2893 6 is_stmt 1 view .LVU2859
2893:src/display.c **** 	      if (ShowRegister != -1) {
 8948              		.loc 1 2893 9 is_stmt 0 view .LVU2860
 8949 0152 8146     		mov	r9, r0
 8950 0154 18B1     		cbz	r0, .L968
2893:src/display.c **** 	      if (ShowRegister != -1) {
 8951              		.loc 1 2893 20 discriminator 1 view .LVU2861
 8952 0156 BBF1000F 		cmp	fp, #0
 8953 015a 00F08380 		beq	.L969
 8954              	.L968:
2894:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8955              		.loc 1 2894 8 is_stmt 1 view .LVU2862
2894:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8956              		.loc 1 2894 25 is_stmt 0 view .LVU2863
 8957 015e 6E4E     		ldr	r6, .L1192+32
 8958 0160 3068     		ldr	r0, [r6]
ARM GAS  /tmp/cc4E4VUn.s 			page 268


 8959              	.LVL1001:
2894:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8960              		.loc 1 2894 11 view .LVU2864
 8961 0162 421C     		adds	r2, r0, #1
 8962 0164 00F02481 		beq	.L970
2895:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8963              		.loc 1 2895 3 is_stmt 1 view .LVU2865
2895:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8964              		.loc 1 2895 39 is_stmt 0 view .LVU2866
 8965 0168 6428     		cmp	r0, #100
 8966 016a 00F0B180 		beq	.L1157
 8967              	.L971:
2896:src/display.c **** 	      }
 8968              		.loc 1 2896 3 is_stmt 1 view .LVU2867
 8969 016e 0021     		movs	r1, #0
 8970 0170 FFF7FEFF 		bl	format_reg
 8971              	.LVL1002:
2904:src/display.c **** 	      goto finish;
 8972              		.loc 1 2904 6 view .LVU2868
2904:src/display.c **** 	      goto finish;
 8973              		.loc 1 2904 9 is_stmt 0 view .LVU2869
 8974 0174 614B     		ldr	r3, .L1192+4
 8975 0176 1B68     		ldr	r3, [r3]
 8976 0178 73BB     		cbnz	r3, .L973
 8977              	.LVL1003:
 8978              	.L1152:
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8979              		.loc 1 2934 2 view .LVU2870
 8980 017a FFF7FEFF 		bl	set_annunciators
 8981              	.LVL1004:
2935:src/display.c **** 	  ShowRPN = 0;
 8982              		.loc 1 2935 2 is_stmt 1 view .LVU2871
 8983              	.L878:
2936:src/display.c **** 	  dot(RPN, 0);
 8984              		.loc 1 2936 4 view .LVU2872
2936:src/display.c **** 	  dot(RPN, 0);
 8985              		.loc 1 2936 12 is_stmt 0 view .LVU2873
 8986 017e DFF89C81 		ldr	r8, .L1192+36
 8987 0182 0023     		movs	r3, #0
 8988              	.LBB561:
 8989              	.LBB562:
 341:src/display.c **** }
 8990              		.loc 1 341 8 view .LVU2874
 8991 0184 8D20     		movs	r0, #141
 8992              	.LBE562:
 8993              	.LBE561:
2936:src/display.c **** 	  dot(RPN, 0);
 8994              		.loc 1 2936 12 view .LVU2875
 8995 0186 C8F80030 		str	r3, [r8]
2937:src/display.c **** 	}
 8996              		.loc 1 2937 4 is_stmt 1 view .LVU2876
 8997              	.LVL1005:
 8998              	.LBB564:
 8999              	.LBI561:
 339:src/display.c ****   if (on)	set_dot(n);
 9000              		.loc 1 339 6 view .LVU2877
 9001              	.LBB563:
ARM GAS  /tmp/cc4E4VUn.s 			page 269


 340:src/display.c ****   else	clr_dot(n);
 9002              		.loc 1 340 3 view .LVU2878
 341:src/display.c **** }
 9003              		.loc 1 341 8 view .LVU2879
 9004 018a FFF7FEFF 		bl	clr_dot
 9005              	.LVL1006:
 9006              	.L1006:
 341:src/display.c **** }
 9007              		.loc 1 341 8 is_stmt 0 view .LVU2880
 9008              	.LBE563:
 9009              	.LBE564:
2940:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9010              		.loc 1 2940 2 is_stmt 1 view .LVU2881
2941:src/display.c **** 
 9011              		.loc 1 2941 4 is_stmt 0 view .LVU2882
 9012 018e D8F80030 		ldr	r3, [r8]
 9013 0192 002B     		cmp	r3, #0
 9014 0194 40F0AE80 		bne	.L1024
2940:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9015              		.loc 1 2940 31 view .LVU2883
 9016 0198 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9017 019a 12F04003 		ands	r3, r2, #64
 9018 019e 08D0     		beq	.L1007
2941:src/display.c **** 
 9019              		.loc 1 2941 8 view .LVU2884
 9020 01a0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2941:src/display.c **** 
 9021              		.loc 1 2941 4 view .LVU2885
 9022 01a2 1B07     		lsls	r3, r3, #28
 9023 01a4 40F1EE80 		bpl	.L1026
2941:src/display.c **** 
 9024              		.loc 1 2941 30 discriminator 3 view .LVU2886
 9025 01a8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9026 01aa 012B     		cmp	r3, #1
 9027 01ac 01D0     		beq	.L1007
2941:src/display.c **** 
 9028              		.loc 1 2941 60 discriminator 5 view .LVU2887
 9029 01ae C2F38003 		ubfx	r3, r2, #2, #1
 9030              	.L1007:
2940:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9031              		.loc 1 2940 19 discriminator 9 view .LVU2888
 9032 01b2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9033 01b4 63F34512 		bfi	r2, r3, #5, #1
 9034 01b8 E275     		strb	r2, [r4, #23]
2944:src/display.c **** 	  annunciators();
 9035              		.loc 1 2944 2 is_stmt 1 discriminator 9 view .LVU2889
2944:src/display.c **** 	  annunciators();
 9036              		.loc 1 2944 5 is_stmt 0 discriminator 9 view .LVU2890
 9037 01ba 002D     		cmp	r5, #0
 9038 01bc 00F09480 		beq	.L1008
2944:src/display.c **** 	  annunciators();
 9039              		.loc 1 2944 36 discriminator 1 view .LVU2891
 9040 01c0 D3B2     		uxtb	r3, r2
2944:src/display.c **** 	  annunciators();
 9041              		.loc 1 2944 13 discriminator 1 view .LVU2892
 9042 01c2 03F02103 		and	r3, r3, #33
 9043 01c6 202B     		cmp	r3, #32
ARM GAS  /tmp/cc4E4VUn.s 			page 270


 9044 01c8 00F08E80 		beq	.L1008
 9045              	.L1009:
2945:src/display.c ****  	State2.hms = 0;
 9046              		.loc 1 2945 4 is_stmt 1 view .LVU2893
 9047 01cc FFF7FEFF 		bl	annunciators
 9048              	.LVL1007:
 9049              	.L1010:
2946:src/display.c **** #else
 9050              		.loc 1 2946 3 view .LVU2894
2946:src/display.c **** #else
 9051              		.loc 1 2946 14 is_stmt 0 view .LVU2895
 9052 01d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9053 01d2 6FF30003 		bfc	r3, #0, #1
 9054 01d6 E375     		strb	r3, [r4, #23]
 9055              	.L973:
2953:src/display.c **** 	State2.disp_as_alpha = 0;
 9056              		.loc 1 2953 2 is_stmt 1 view .LVU2896
2954:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9057              		.loc 1 2954 2 view .LVU2897
2955:src/display.c **** 	State2.invalid_disp = 0;
 9058              		.loc 1 2955 2 view .LVU2898
2953:src/display.c **** 	State2.disp_as_alpha = 0;
 9059              		.loc 1 2953 17 is_stmt 0 view .LVU2899
 9060 01d8 6369     		ldr	r3, [r4, #20]
2959:src/display.c **** 	State2.disp_small = 0;
 9061              		.loc 1 2959 11 view .LVU2900
 9062 01da 019A     		ldr	r2, [sp, #4]
2953:src/display.c **** 	State2.disp_as_alpha = 0;
 9063              		.loc 1 2953 17 view .LVU2901
 9064 01dc 23F02173 		bic	r3, r3, #42205184
 9065 01e0 23F48053 		bic	r3, r3, #4096
2955:src/display.c **** 	State2.invalid_disp = 0;
 9066              		.loc 1 2955 15 view .LVU2902
 9067 01e4 0025     		movs	r5, #0
2953:src/display.c **** 	State2.disp_as_alpha = 0;
 9068              		.loc 1 2953 17 view .LVU2903
 9069 01e6 6361     		str	r3, [r4, #20]
2957:src/display.c **** 	DispMsg = CNULL;
 9070              		.loc 1 2957 15 view .LVU2904
 9071 01e8 6423     		movs	r3, #100
2955:src/display.c **** 	State2.invalid_disp = 0;
 9072              		.loc 1 2955 15 view .LVU2905
 9073 01ea 6574     		strb	r5, [r4, #17]
2956:src/display.c **** 	ShowRegister = regX_idx;
 9074              		.loc 1 2956 2 is_stmt 1 view .LVU2906
2957:src/display.c **** 	DispMsg = CNULL;
 9075              		.loc 1 2957 2 view .LVU2907
2958:src/display.c **** 	DispPlot = 0;
 9076              		.loc 1 2958 10 is_stmt 0 view .LVU2908
 9077 01ec 3D60     		str	r5, [r7]
2959:src/display.c **** 	State2.disp_small = 0;
 9078              		.loc 1 2959 11 view .LVU2909
 9079 01ee 1580     		strh	r5, [r2]	@ movhi
2957:src/display.c **** 	DispMsg = CNULL;
 9080              		.loc 1 2957 15 view .LVU2910
 9081 01f0 3360     		str	r3, [r6]
2958:src/display.c **** 	DispPlot = 0;
ARM GAS  /tmp/cc4E4VUn.s 			page 271


 9082              		.loc 1 2958 2 is_stmt 1 view .LVU2911
2959:src/display.c **** 	State2.disp_small = 0;
 9083              		.loc 1 2959 2 view .LVU2912
2960:src/display.c **** 	finish_display();
 9084              		.loc 1 2960 2 view .LVU2913
2961:src/display.c **** 	no_status_top = 0;
 9085              		.loc 1 2961 2 view .LVU2914
 9086 01f2 FFF7FEFF 		bl	finish_display
 9087              	.LVL1008:
2962:src/display.c **** #ifdef CONSOLE
 9088              		.loc 1 2962 2 view .LVU2915
2962:src/display.c **** #ifdef CONSOLE
 9089              		.loc 1 2962 16 is_stmt 0 view .LVU2916
 9090 01f6 AAF80050 		strh	r5, [r10]	@ movhi
2966:src/display.c **** #else
 9091              		.loc 1 2966 7 view .LVU2917
 9092 01fa 2BB0     		add	sp, sp, #172
 9093              		.cfi_remember_state
 9094              		.cfi_def_cfa_offset 36
 9095              		@ sp needed
 9096 01fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9097              	.LVL1009:
 9098              	.L1153:
 9099              		.cfi_restore_state
2604:src/display.c **** 	  State2.disp_temp = 1;
 9100              		.loc 1 2604 4 is_stmt 1 view .LVU2918
2605:src/display.c **** #ifdef CONSOLE
 9101              		.loc 1 2605 4 view .LVU2919
2609:src/display.c **** 	  return;
 9102              		.loc 1 2609 12 is_stmt 0 view .LVU2920
 9103 0200 4649     		ldr	r1, .L1192+36
2604:src/display.c **** 	  State2.disp_temp = 1;
 9104              		.loc 1 2604 23 view .LVU2921
 9105 0202 23F03003 		bic	r3, r3, #48
 9106 0206 43F02003 		orr	r3, r3, #32
 9107 020a E375     		strb	r3, [r4, #23]
2609:src/display.c **** 	  return;
 9108              		.loc 1 2609 4 is_stmt 1 view .LVU2922
2609:src/display.c **** 	  return;
 9109              		.loc 1 2609 12 is_stmt 0 view .LVU2923
 9110 020c 0A60     		str	r2, [r1]
2610:src/display.c **** 	}
 9111              		.loc 1 2610 4 is_stmt 1 view .LVU2924
2966:src/display.c **** #else
 9112              		.loc 1 2966 7 is_stmt 0 view .LVU2925
 9113 020e 2BB0     		add	sp, sp, #172
 9114              		.cfi_remember_state
 9115              		.cfi_def_cfa_offset 36
 9116              		@ sp needed
 9117 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9118              	.LVL1010:
 9119              	.L879:
 9120              		.cfi_restore_state
2668:src/display.c **** 	  bp = scopy(bp, "HYP");
 9121              		.loc 1 2668 9 is_stmt 1 view .LVU2926
2668:src/display.c **** 	  bp = scopy(bp, "HYP");
 9122              		.loc 1 2668 12 is_stmt 0 view .LVU2927
ARM GAS  /tmp/cc4E4VUn.s 			page 272


 9123 0214 9A06     		lsls	r2, r3, #26
 9124 0216 00F1B780 		bmi	.L1158
2680:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9125              		.loc 1 2680 9 is_stmt 1 view .LVU2928
2680:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9126              		.loc 1 2680 12 is_stmt 0 view .LVU2929
 9127 021a DF07     		lsls	r7, r3, #31
 9128 021c 00F14D81 		bmi	.L1159
2695:src/display.c **** 	  /* Commands with arguments */
 9129              		.loc 1 2695 9 is_stmt 1 view .LVU2930
2695:src/display.c **** 	  /* Commands with arguments */
 9130              		.loc 1 2695 13 is_stmt 0 view .LVU2931
 9131 0220 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2695:src/display.c **** 	  /* Commands with arguments */
 9132              		.loc 1 2695 12 view .LVU2932
 9133 0222 8806     		lsls	r0, r1, #26
 9134 0224 00F1B581 		bmi	.L1160
2733:src/display.c **** 	  *bp++ = 'x';
 9135              		.loc 1 2733 9 is_stmt 1 view .LVU2933
2733:src/display.c **** 	  *bp++ = 'x';
 9136              		.loc 1 2733 19 is_stmt 0 view .LVU2934
 9137 0228 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2733:src/display.c **** 	  *bp++ = 'x';
 9138              		.loc 1 2733 12 view .LVU2935
 9139 022a 072A     		cmp	r2, #7
 9140 022c 00F02181 		beq	.L900
2734:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9141              		.loc 1 2734 4 is_stmt 1 view .LVU2936
 9142              	.LVL1011:
2735:src/display.c **** 	  *bp++ = '_';
 9143              		.loc 1 2735 33 is_stmt 0 view .LVU2937
 9144 0230 3B4B     		ldr	r3, .L1192+40
2735:src/display.c **** 	  *bp++ = '_';
 9145              		.loc 1 2735 10 view .LVU2938
 9146 0232 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9147 0234 8DF88130 		strb	r3, [sp, #129]
2734:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9148              		.loc 1 2734 10 view .LVU2939
 9149 0238 7822     		movs	r2, #120
2736:src/display.c **** 	  *bp++ = '?';
 9150              		.loc 1 2736 10 view .LVU2940
 9151 023a 43F65F73 		movw	r3, #16223
2734:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9152              		.loc 1 2734 10 view .LVU2941
 9153 023e 8DF88020 		strb	r2, [sp, #128]
2735:src/display.c **** 	  *bp++ = '_';
 9154              		.loc 1 2735 4 is_stmt 1 view .LVU2942
 9155              	.LVL1012:
2736:src/display.c **** 	  *bp++ = '?';
 9156              		.loc 1 2736 4 view .LVU2943
2737:src/display.c **** 	  if (yreg_enabled) {
 9157              		.loc 1 2737 4 view .LVU2944
2736:src/display.c **** 	  *bp++ = '?';
 9158              		.loc 1 2736 10 is_stmt 0 view .LVU2945
 9159 0242 ADF88230 		strh	r3, [sp, #130]	@ movhi
2738:src/display.c **** 	    set_status_top(buf);
 9160              		.loc 1 2738 4 is_stmt 1 view .LVU2946
ARM GAS  /tmp/cc4E4VUn.s 			page 273


2738:src/display.c **** 	    set_status_top(buf);
 9161              		.loc 1 2738 7 is_stmt 0 view .LVU2947
 9162 0246 B8F1000F 		cmp	r8, #0
 9163 024a 40F0A880 		bne	.L1142
 9164              	.LVL1013:
 9165              	.L886:
2678:src/display.c **** 	  }
 9166              		.loc 1 2678 6 is_stmt 1 view .LVU2948
 9167 024e 20A8     		add	r0, sp, #128
 9168 0250 FFF7FEFF 		bl	set_status
 9169              	.LVL1014:
2886:src/display.c ****       nostk:
 9170              		.loc 1 2886 2 view .LVU2949
 9171 0254 2B4B     		ldr	r3, .L1192+12
 9172 0256 0193     		str	r3, [sp, #4]
 9173 0258 2B4F     		ldr	r7, .L1192+16
 9174 025a FFF7FEFF 		bl	show_stack
 9175              	.LVL1015:
2888:src/display.c **** 	if (!skip) {
 9176              		.loc 1 2888 2 view .LVU2950
 9177 025e FFF7FEFF 		bl	show_flags
 9178              	.LVL1016:
2889:src/display.c **** 	  if (State2.runmode) {
 9179              		.loc 1 2889 2 view .LVU2951
 9180 0262 10E7     		b	.L883
 9181              	.LVL1017:
 9182              	.L969:
2901:src/display.c **** 	      x_disp = 1;
 9183              		.loc 1 2901 8 view .LVU2952
 9184              	.LBB565:
 9185              	.LBI565:
1247:src/display.c ****       int i;
 9186              		.loc 1 1247 17 view .LVU2953
 9187              	.LBB566:
1248:src/display.c ****       int gotdot = -1;
 9188              		.loc 1 1248 7 view .LVU2954
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9189              		.loc 1 1249 7 view .LVU2955
1251:src/display.c **** #endif
 9190              		.loc 1 1251 7 view .LVU2956
1255:src/display.c **** #endif
 9191              		.loc 1 1255 7 view .LVU2957
1258:src/display.c **** 	SET_MANT_SIGN;
 9192              		.loc 1 1258 7 view .LVU2958
1258:src/display.c **** 	SET_MANT_SIGN;
 9193              		.loc 1 1258 10 is_stmt 0 view .LVU2959
 9194 0264 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 9195 0266 2D2A     		cmp	r2, #45
 9196 0268 00F0AE81 		beq	.L1161
 9197              	.LVL1018:
 9198              	.L977:
1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9199              		.loc 1 1263 7 is_stmt 1 view .LVU2960
1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9200              		.loc 1 1263 11 is_stmt 0 view .LVU2961
 9201 026c 2D4A     		ldr	r2, .L1192+44
 9202 026e 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cc4E4VUn.s 			page 274


 9203 0270 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9204              		.loc 1 1263 10 view .LVU2962
 9205 0274 12F00106 		ands	r6, r2, #1
 9206 0278 00F03081 		beq	.L978
 9207              	.LVL1019:
1264:src/display.c **** 	  set_dig(i, *p);
 9208              		.loc 1 1264 12 is_stmt 1 view .LVU2963
 9209 027c 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
1264:src/display.c **** 	  set_dig(i, *p);
 9210              		.loc 1 1264 8 is_stmt 0 view .LVU2964
 9211 0280 0026     		movs	r6, #0
1264:src/display.c **** 	  set_dig(i, *p);
 9212              		.loc 1 1264 2 view .LVU2965
 9213 0282 39B1     		cbz	r1, .L980
 9214              	.LVL1020:
 9215              	.L979:
1265:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9216              		.loc 1 1265 4 is_stmt 1 view .LVU2966
 9217 0284 3046     		mov	r0, r6
 9218 0286 FFF7FEFF 		bl	set_dig
 9219              	.LVL1021:
1266:src/display.c **** 	}
 9220              		.loc 1 1266 4 view .LVU2967
1264:src/display.c **** 	  set_dig(i, *p);
 9221              		.loc 1 1264 12 is_stmt 0 view .LVU2968
 9222 028a 19F8011F 		ldrb	r1, [r9, #1]!	@ zero_extendqisi2
 9223              	.LVL1022:
1266:src/display.c **** 	}
 9224              		.loc 1 1266 6 view .LVU2969
 9225 028e 0936     		adds	r6, r6, #9
 9226              	.LVL1023:
1264:src/display.c **** 	  set_dig(i, *p);
 9227              		.loc 1 1264 24 is_stmt 1 view .LVU2970
1264:src/display.c **** 	  set_dig(i, *p);
 9228              		.loc 1 1264 12 view .LVU2971
1264:src/display.c **** 	  set_dig(i, *p);
 9229              		.loc 1 1264 2 is_stmt 0 view .LVU2972
 9230 0290 0029     		cmp	r1, #0
 9231 0292 F7D1     		bne	.L979
 9232              	.LVL1024:
 9233              	.L980:
1268:src/display.c ****       } else {
 9234              		.loc 1 1268 2 is_stmt 1 view .LVU2973
 9235 0294 FFF7FEFF 		bl	carry_overflow
 9236              	.LVL1025:
1268:src/display.c ****       } else {
 9237              		.loc 1 1268 2 is_stmt 0 view .LVU2974
 9238              	.LBE566:
 9239              	.LBE565:
2904:src/display.c **** 	      goto finish;
 9240              		.loc 1 2904 6 is_stmt 1 view .LVU2975
2904:src/display.c **** 	      goto finish;
 9241              		.loc 1 2904 9 is_stmt 0 view .LVU2976
 9242 0298 184B     		ldr	r3, .L1192+4
 9243 029a 1B68     		ldr	r3, [r3]
 9244 029c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 275


 9245 029e 40F0E680 		bne	.L1065
 9246              	.LVL1026:
 9247              	.L1150:
2904:src/display.c **** 	      goto finish;
 9248              		.loc 1 2904 9 view .LVU2977
 9249 02a2 1D4E     		ldr	r6, .L1192+32
 9250              	.LVL1027:
 9251              	.L972:
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9252              		.loc 1 2934 2 is_stmt 1 view .LVU2978
 9253 02a4 FFF7FEFF 		bl	set_annunciators
 9254              	.LVL1028:
2935:src/display.c **** 	  ShowRPN = 0;
 9255              		.loc 1 2935 2 view .LVU2979
2935:src/display.c **** 	  ShowRPN = 0;
 9256              		.loc 1 2935 50 is_stmt 0 view .LVU2980
 9257 02a8 3B68     		ldr	r3, [r7]
 9258 02aa 002B     		cmp	r3, #0
 9259 02ac 7FF467AF 		bne	.L878
2935:src/display.c **** 	  ShowRPN = 0;
 9260              		.loc 1 2935 69 discriminator 3 view .LVU2981
 9261 02b0 019B     		ldr	r3, [sp, #4]
 9262 02b2 B3F90030 		ldrsh	r3, [r3]
 9263 02b6 002B     		cmp	r3, #0
 9264 02b8 7FF461AF 		bne	.L878
2935:src/display.c **** 	  ShowRPN = 0;
 9265              		.loc 1 2935 81 discriminator 4 view .LVU2982
 9266 02bc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9267 02be 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9268 02c0 03F00403 		and	r3, r3, #4
 9269 02c4 1343     		orrs	r3, r3, r2
 9270 02c6 7FF45AAF 		bne	.L878
 9271 02ca DFF85080 		ldr	r8, .L1192+36
 9272 02ce 5EE7     		b	.L1006
 9273              	.LVL1029:
 9274              	.L1157:
2895:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9275              		.loc 1 2895 42 discriminator 1 view .LVU2983
 9276 02d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2895:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9277              		.loc 1 2895 39 discriminator 1 view .LVU2984
 9278 02d2 13F00101 		ands	r1, r3, #1
 9279 02d6 7FF44AAF 		bne	.L971
 9280              	.LVL1030:
2896:src/display.c **** 	      }
 9281              		.loc 1 2896 3 is_stmt 1 view .LVU2985
 9282 02da FFF7FEFF 		bl	format_reg
 9283              	.LVL1031:
2904:src/display.c **** 	      goto finish;
 9284              		.loc 1 2904 6 view .LVU2986
2904:src/display.c **** 	      goto finish;
 9285              		.loc 1 2904 9 is_stmt 0 view .LVU2987
 9286 02de 074B     		ldr	r3, .L1192+4
 9287 02e0 1B68     		ldr	r3, [r3]
 9288 02e2 002B     		cmp	r3, #0
 9289 02e4 DED0     		beq	.L972
 9290 02e6 77E7     		b	.L973
ARM GAS  /tmp/cc4E4VUn.s 			page 276


 9291              	.LVL1032:
 9292              	.L1008:
2944:src/display.c **** 	  annunciators();
 9293              		.loc 1 2944 52 discriminator 3 view .LVU2988
 9294 02e8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9295 02ea 13F0C00F 		tst	r3, #192
 9296 02ee 3FF46FAF 		beq	.L1010
 9297 02f2 6BE7     		b	.L1009
 9298              	.L1024:
 9299 02f4 0023     		movs	r3, #0
 9300 02f6 5CE7     		b	.L1007
 9301              	.L1193:
 9302              		.align	2
 9303              	.L1192:
 9304 02f8 00000000 		.word	StateWhileOn
 9305 02fc 00000000 		.word	WasDataEntry
 9306 0300 00000000 		.word	.LANCHOR21
 9307 0304 00000000 		.word	DispPlot
 9308 0308 00000000 		.word	DispMsg
 9309 030c 00000000 		.word	.LANCHOR25
 9310 0310 00000000 		.word	.LANCHOR19
 9311 0314 00000000 		.word	LastDisplayedNumber
 9312 0318 00000000 		.word	ShowRegister
 9313 031c 00000000 		.word	ShowRPN
 9314 0320 B4000000 		.word	.LC26
 9315 0324 00000000 		.word	main_ram
 9316 0328 00000000 		.word	.LANCHOR18
 9317 032c 00000000 		.word	ProgFree
 9318              	.LVL1033:
 9319              	.L1155:
 9320              	.LBB588:
2648:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9321              		.loc 1 2648 4 is_stmt 1 view .LVU2989
2648:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9322              		.loc 1 2648 9 is_stmt 0 view .LVU2990
 9323 0330 B04B     		ldr	r3, .L1194
 9324 0332 CDF86650 		str	r5, [sp, #102]	@ unaligned
2649:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9325              		.loc 1 2649 4 is_stmt 1 view .LVU2991
2648:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9326              		.loc 1 2648 9 is_stmt 0 view .LVU2992
 9327 0336 93E80700 		ldm	r3, {r0, r1, r2}
 9328 033a 17AB     		add	r3, sp, #92
 9329 033c 03C3     		stmia	r3!, {r0, r1}
2649:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9330              		.loc 1 2649 4 view .LVU2993
 9331 033e 2946     		mov	r1, r5
 9332 0340 AD48     		ldr	r0, .L1194+4
2648:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9333              		.loc 1 2648 9 view .LVU2994
 9334 0342 1A80     		strh	r2, [r3]	@ movhi
2649:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9335              		.loc 1 2649 4 view .LVU2995
 9336 0344 FFF7FEFF 		bl	set_digits_string
 9337              	.LVL1034:
2650:src/display.c **** #ifndef REALBUILD
 9338              		.loc 1 2650 4 is_stmt 1 view .LVU2996
ARM GAS  /tmp/cc4E4VUn.s 			page 277


 9339              	.LBB589:
 9340              	.LBI589:
 407:src/display.c ****   if (res) *res++ = ch;
 9341              		.loc 1 407 14 view .LVU2997
 9342              	.LBB590:
 408:src/display.c ****   else	set_dig(base, ch);
 9343              		.loc 1 408 3 view .LVU2998
 409:src/display.c ****   return res;
 9344              		.loc 1 409 8 view .LVU2999
 9345 0348 7221     		movs	r1, #114
 9346 034a 6C20     		movs	r0, #108
 9347 034c FFF7FEFF 		bl	set_dig
 9348              	.LVL1035:
 410:src/display.c **** }
 9349              		.loc 1 410 3 view .LVU3000
 410:src/display.c **** }
 9350              		.loc 1 410 3 is_stmt 0 view .LVU3001
 9351              	.LBE590:
 9352              	.LBE589:
2652:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9353              		.loc 1 2652 4 is_stmt 1 view .LVU3002
 9354 0350 AA49     		ldr	r1, .L1194+8
 9355 0352 AB48     		ldr	r0, .L1194+12
 9356 0354 AB4F     		ldr	r7, .L1194+16
 9357 0356 AC4E     		ldr	r6, .L1194+20
 9358 0358 FFF7FEFF 		bl	scopy
 9359              	.LVL1036:
2653:src/display.c **** #endif
 9360              		.loc 1 2653 4 view .LVU3003
 9361 035c AB49     		ldr	r1, .L1194+24
 9362 035e AC48     		ldr	r0, .L1194+28
 9363 0360 FFF7FEFF 		bl	scopy
 9364              	.LVL1037:
2655:src/display.c **** 	  set_status(vers);
 9365              		.loc 1 2655 4 view .LVU3004
 9366 0364 AB49     		ldr	r1, .L1194+32
 9367 0366 0422     		movs	r2, #4
 9368 0368 0DF16500 		add	r0, sp, #101
 9369 036c FFF7FEFF 		bl	xcopy
 9370              	.LVL1038:
2656:src/display.c **** 	  skip = 1;
 9371              		.loc 1 2656 4 view .LVU3005
 9372 0370 17A8     		add	r0, sp, #92
 9373 0372 FFF7FEFF 		bl	set_status
 9374              	.LVL1039:
2657:src/display.c **** 	  goto nostk;
 9375              		.loc 1 2657 4 view .LVU3006
2658:src/display.c **** 	} else if (State2.confirm) {
 9376              		.loc 1 2658 4 view .LVU3007
2658:src/display.c **** 	} else if (State2.confirm) {
 9377              		.loc 1 2658 4 is_stmt 0 view .LVU3008
 9378              	.LBE588:
2888:src/display.c **** 	if (!skip) {
 9379              		.loc 1 2888 2 is_stmt 1 view .LVU3009
 9380 0376 A84B     		ldr	r3, .L1194+36
 9381 0378 0193     		str	r3, [sp, #4]
 9382 037a FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/cc4E4VUn.s 			page 278


 9383              	.LVL1040:
2889:src/display.c **** 	  if (State2.runmode) {
 9384              		.loc 1 2889 2 view .LVU3010
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9385              		.loc 1 2934 2 view .LVU3011
 9386 037e FFF7FEFF 		bl	set_annunciators
 9387              	.LVL1041:
2935:src/display.c **** 	  ShowRPN = 0;
 9388              		.loc 1 2935 2 view .LVU3012
 9389 0382 FCE6     		b	.L878
 9390              	.LVL1042:
 9391              	.L1026:
2935:src/display.c **** 	  ShowRPN = 0;
 9392              		.loc 1 2935 2 is_stmt 0 view .LVU3013
 9393 0384 0123     		movs	r3, #1
 9394 0386 14E7     		b	.L1007
 9395              	.LVL1043:
 9396              	.L1158:
2669:src/display.c **** 	  if (! State2.dot)
 9397              		.loc 1 2669 4 is_stmt 1 view .LVU3014
2669:src/display.c **** 	  if (! State2.dot)
 9398              		.loc 1 2669 9 is_stmt 0 view .LVU3015
 9399 0388 A449     		ldr	r1, .L1194+40
 9400 038a 20A8     		add	r0, sp, #128
 9401              	.LVL1044:
2669:src/display.c **** 	  if (! State2.dot)
 9402              		.loc 1 2669 9 view .LVU3016
 9403 038c FFF7FEFF 		bl	scopy
 9404              	.LVL1045:
2670:src/display.c **** 	    *bp++ = '\235';
 9405              		.loc 1 2670 8 view .LVU3017
 9406 0390 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9407              	.LVL1046:
2670:src/display.c **** 	    *bp++ = '\235';
 9408              		.loc 1 2670 4 is_stmt 1 view .LVU3018
2670:src/display.c **** 	    *bp++ = '\235';
 9409              		.loc 1 2670 7 is_stmt 0 view .LVU3019
 9410 0392 5B06     		lsls	r3, r3, #25
 9411 0394 44D5     		bpl	.L1162
 9412              	.LVL1047:
 9413              	.L917:
2808:src/display.c **** 	    set_status_top(buf);
 9414              		.loc 1 2808 4 is_stmt 1 view .LVU3020
2808:src/display.c **** 	    set_status_top(buf);
 9415              		.loc 1 2808 7 is_stmt 0 view .LVU3021
 9416 0396 B8F1000F 		cmp	r8, #0
 9417 039a 3FF458AF 		beq	.L886
 9418              	.L1142:
2809:src/display.c **** 	    no_status_top = 1;
 9419              		.loc 1 2809 6 is_stmt 1 view .LVU3022
 9420              	.LVL1048:
 9421              	.LBB591:
 9422              	.LBI591:
3507:src/display.c **** 	if (no_status_top) return;
 9423              		.loc 1 3507 19 view .LVU3023
 9424              	.LBB592:
3508:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/cc4E4VUn.s 			page 279


 9425              		.loc 1 3508 2 view .LVU3024
3508:src/display.c **** 	if (State2.runmode) {
 9426              		.loc 1 3508 5 is_stmt 0 view .LVU3025
 9427 039e BAF90030 		ldrsh	r3, [r10]
 9428 03a2 002B     		cmp	r3, #0
 9429 03a4 7FF465AE 		bne	.L882
 9430              	.LBE592:
 9431              	.LBE591:
 9432              	.LBB593:
 9433              	.LBB594:
 9434 03a8 20A8     		add	r0, sp, #128
 9435              	.LVL1049:
3508:src/display.c **** 	if (State2.runmode) {
 9436              		.loc 1 3508 5 view .LVU3026
 9437 03aa FFF7FEFF 		bl	set_status_top.part.0
 9438              	.LVL1050:
3508:src/display.c **** 	if (State2.runmode) {
 9439              		.loc 1 3508 5 view .LVU3027
 9440 03ae 60E6     		b	.L882
 9441              	.LVL1051:
 9442              	.L970:
3508:src/display.c **** 	if (State2.runmode) {
 9443              		.loc 1 3508 5 view .LVU3028
 9444              	.LBE594:
 9445              	.LBE593:
2899:src/display.c **** 	    } else {
 9446              		.loc 1 2899 3 is_stmt 1 view .LVU3029
 9447 03b0 9B48     		ldr	r0, .L1194+44
 9448 03b2 2421     		movs	r1, #36
 9449 03b4 FFF7FEFF 		bl	set_digits_string
 9450              	.LVL1052:
2904:src/display.c **** 	      goto finish;
 9451              		.loc 1 2904 6 view .LVU3030
2904:src/display.c **** 	      goto finish;
 9452              		.loc 1 2904 9 is_stmt 0 view .LVU3031
 9453 03b8 9A4B     		ldr	r3, .L1194+48
 9454 03ba 1B68     		ldr	r3, [r3]
 9455 03bc 002B     		cmp	r3, #0
 9456 03be 3FF4DCAE 		beq	.L1152
 9457 03c2 09E7     		b	.L973
 9458              	.LVL1053:
 9459              	.L880:
2666:src/display.c **** 	  }
 9460              		.loc 1 2666 6 is_stmt 1 view .LVU3032
 9461 03c4 944B     		ldr	r3, .L1194+36
 9462 03c6 9848     		ldr	r0, .L1194+52
 9463 03c8 0193     		str	r3, [sp, #4]
 9464 03ca 8E4F     		ldr	r7, .L1194+16
 9465 03cc FFF7FEFF 		bl	set_status
 9466              	.LVL1054:
2886:src/display.c ****       nostk:
 9467              		.loc 1 2886 2 view .LVU3033
 9468 03d0 FFF7FEFF 		bl	show_stack
 9469              	.LVL1055:
2888:src/display.c **** 	if (!skip) {
 9470              		.loc 1 2888 2 view .LVU3034
 9471 03d4 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/cc4E4VUn.s 			page 280


 9472              	.LVL1056:
2889:src/display.c **** 	  if (State2.runmode) {
 9473              		.loc 1 2889 2 view .LVU3035
 9474 03d8 55E6     		b	.L883
 9475              	.LVL1057:
 9476              	.L1156:
 9477              	.LBB595:
2913:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9478              		.loc 1 2913 6 is_stmt 0 discriminator 1 view .LVU3036
 9479 03da 9449     		ldr	r1, .L1194+56
 9480 03dc 0BEB8B03 		add	r3, fp, fp, lsl #2
2914:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9481              		.loc 1 2914 21 discriminator 1 view .LVU3037
 9482 03e0 0BF0010B 		and	fp, fp, #1
 9483              	.LVL1058:
2913:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9484              		.loc 1 2913 6 discriminator 1 view .LVU3038
 9485 03e4 1944     		add	r1, r1, r3
 9486 03e6 20A8     		add	r0, sp, #128
 9487 03e8 0BF1030B 		add	fp, fp, #3
 9488 03ec 0293     		str	r3, [sp, #8]
 9489 03ee FFF7FEFF 		bl	scopy_spc
 9490              	.LVL1059:
 9491 03f2 5A46     		mov	r2, fp
 9492 03f4 4146     		mov	r1, r8
 9493 03f6 FFF7FEFF 		bl	num_arg_0
 9494              	.LVL1060:
2915:src/display.c **** #ifndef REALBUILD
 9495              		.loc 1 2915 6 is_stmt 1 discriminator 1 view .LVU3039
 9496 03fa 0921     		movs	r1, #9
 9497 03fc 20A8     		add	r0, sp, #128
 9498 03fe FFF7FEFF 		bl	set_digits_string
 9499              	.LVL1061:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9500              		.loc 1 2917 6 discriminator 1 view .LVU3040
 9501 0402 2822     		movs	r2, #40
 9502 0404 3146     		mov	r1, r6
 9503 0406 20A8     		add	r0, sp, #128
 9504 0408 FFF7FEFF 		bl	xset
 9505              	.LVL1062:
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9506              		.loc 1 2918 6 discriminator 1 view .LVU3041
 9507 040c 0121     		movs	r1, #1
 9508 040e D9F80000 		ldr	r0, [r9]
 9509 0412 3246     		mov	r2, r6
 9510 0414 FFF7FEFF 		bl	set_exp
 9511              	.LVL1063:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9512              		.loc 1 2919 6 discriminator 1 view .LVU3042
 9513 0418 8549     		ldr	r1, .L1194+60
 9514 041a 029B     		ldr	r3, [sp, #8]
 9515 041c 1944     		add	r1, r1, r3
 9516 041e 6BE6     		b	.L1011
 9517              	.LVL1064:
 9518              	.L1162:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9519              		.loc 1 2919 6 is_stmt 0 discriminator 1 view .LVU3043
ARM GAS  /tmp/cc4E4VUn.s 			page 281


 9520              	.LBE595:
2671:src/display.c **** 	  if (yreg_enabled) {
 9521              		.loc 1 2671 6 is_stmt 1 view .LVU3044
2671:src/display.c **** 	  if (yreg_enabled) {
 9522              		.loc 1 2671 12 is_stmt 0 view .LVU3045
 9523 0420 9D23     		movs	r3, #157
 9524 0422 0370     		strb	r3, [r0]
 9525 0424 B7E7     		b	.L917
 9526              	.LVL1065:
 9527              	.L993:
 9528              	.LBB596:
 9529              	.LBB581:
1361:src/display.c **** 	    gotdot = i;
 9530              		.loc 1 1361 4 is_stmt 1 view .LVU3046
1361:src/display.c **** 	    gotdot = i;
 9531              		.loc 1 1361 7 is_stmt 0 view .LVU3047
 9532 0426 3BEA2B0B 		bics	fp, fp, fp, asr #32
 9533 042a 28BF     		it	cs
 9534 042c C346     		movcs	fp, r8
 9535              	.LVL1066:
1363:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9536              		.loc 1 1363 4 is_stmt 1 view .LVU3048
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9537              		.loc 1 1364 6 view .LVU3049
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9538              		.loc 1 1364 13 is_stmt 0 view .LVU3050
 9539 042e ABF11B0B 		sub	fp, fp, #27
 9540              	.LVL1067:
1365:src/display.c **** 	      break;
 9541              		.loc 1 1365 6 is_stmt 1 view .LVU3051
1365:src/display.c **** 	      break;
 9542              		.loc 1 1365 9 is_stmt 0 view .LVU3052
 9543 0432 BBF1000F 		cmp	fp, #0
 9544 0436 10DD     		ble	.L982
1371:src/display.c **** 	  }
 9545              		.loc 1 1371 6 view .LVU3053
 9546 0438 DFF80C82 		ldr	r8, .L1194+84
 9547              	.LVL1068:
 9548              	.L998:
1368:src/display.c **** 	      break;
 9549              		.loc 1 1368 6 is_stmt 1 view .LVU3054
1371:src/display.c **** 	  }
 9550              		.loc 1 1371 6 view .LVU3055
 9551              	.LBB567:
 9552              	.LBB568:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9553              		.loc 1 370 3 view .LVU3056
 9554 043c 5846     		mov	r0, fp
 9555              	.LBE568:
 9556              	.LBE567:
1368:src/display.c **** 	      break;
 9557              		.loc 1 1368 9 is_stmt 0 view .LVU3057
 9558 043e 16B1     		cbz	r6, .L999
 9559              	.LVL1069:
1368:src/display.c **** 	      break;
 9560              		.loc 1 1368 27 view .LVU3058
 9561 0440 BBF1090F 		cmp	fp, #9
ARM GAS  /tmp/cc4E4VUn.s 			page 282


 9562 0444 09D0     		beq	.L982
 9563              	.L999:
1371:src/display.c **** 	  }
 9564              		.loc 1 1371 6 view .LVU3059
 9565 0446 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 9566              	.LVL1070:
 9567              	.LBB570:
 9568              	.LBI567:
 367:src/display.c ****   if (sep == SEP_NONE)
 9569              		.loc 1 367 14 is_stmt 1 view .LVU3060
 9570              	.LBB569:
 368:src/display.c ****     return res;
 9571              		.loc 1 368 3 view .LVU3061
 368:src/display.c ****     return res;
 9572              		.loc 1 368 6 is_stmt 0 view .LVU3062
 9573 044a 09B1     		cbz	r1, .L1000
 9574 044c FFF7FEFF 		bl	set_separator.part.0
 9575              	.LVL1071:
 9576              	.L1000:
 368:src/display.c ****     return res;
 9577              		.loc 1 368 6 view .LVU3063
 9578              	.LBE569:
 9579              	.LBE570:
1363:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9580              		.loc 1 1363 4 is_stmt 1 view .LVU3064
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9581              		.loc 1 1364 6 view .LVU3065
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9582              		.loc 1 1364 13 is_stmt 0 view .LVU3066
 9583 0450 ABF11B0B 		sub	fp, fp, #27
 9584              	.LVL1072:
1365:src/display.c **** 	      break;
 9585              		.loc 1 1365 6 is_stmt 1 view .LVU3067
1365:src/display.c **** 	      break;
 9586              		.loc 1 1365 9 is_stmt 0 view .LVU3068
 9587 0454 BBF1000F 		cmp	fp, #0
 9588 0458 F0DC     		bgt	.L998
 9589              	.LVL1073:
 9590              	.L982:
1389:src/display.c **** 	    p++;
 9591              		.loc 1 1389 4 is_stmt 1 view .LVU3069
1389:src/display.c **** 	    p++;
 9592              		.loc 1 1389 7 is_stmt 0 view .LVU3070
 9593 045a 99F80020 		ldrb	r2, [r9]	@ zero_extendqisi2
 9594 045e 452A     		cmp	r2, #69
 9595 0460 00F06C81 		beq	.L1163
 9596              	.L1001:
 9597              	.LVL1074:
1389:src/display.c **** 	    p++;
 9598              		.loc 1 1389 7 view .LVU3071
 9599              	.LBE581:
 9600              	.LBE596:
2904:src/display.c **** 	      goto finish;
 9601              		.loc 1 2904 6 is_stmt 1 view .LVU3072
2904:src/display.c **** 	      goto finish;
 9602              		.loc 1 2904 9 is_stmt 0 view .LVU3073
 9603 0464 6F4B     		ldr	r3, .L1194+48
ARM GAS  /tmp/cc4E4VUn.s 			page 283


 9604 0466 1B68     		ldr	r3, [r3]
 9605 0468 002B     		cmp	r3, #0
 9606 046a 3FF41AAF 		beq	.L1150
 9607              	.L1065:
 9608 046e 664E     		ldr	r6, .L1194+20
 9609 0470 B2E6     		b	.L973
 9610              	.LVL1075:
 9611              	.L900:
2746:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9612              		.loc 1 2746 9 is_stmt 1 view .LVU3074
2746:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9613              		.loc 1 2746 12 is_stmt 0 view .LVU3075
 9614 0472 BBF1000F 		cmp	fp, #0
 9615 0476 40F01381 		bne	.L1164
2801:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9616              		.loc 1 2801 9 is_stmt 1 view .LVU3076
2801:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9617              		.loc 1 2801 12 is_stmt 0 view .LVU3077
 9618 047a 1807     		lsls	r0, r3, #28
 9619 047c 00F18A81 		bmi	.L1165
2816:src/display.c **** 	  show_status();
 9620              		.loc 1 2816 9 is_stmt 1 view .LVU3078
2816:src/display.c **** 	  show_status();
 9621              		.loc 1 2816 19 is_stmt 0 view .LVU3079
 9622 0480 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2816:src/display.c **** 	  show_status();
 9623              		.loc 1 2816 12 view .LVU3080
 9624 0482 002F     		cmp	r7, #0
 9625 0484 40F00782 		bne	.L1166
2819:src/display.c **** 	  show_label();
 9626              		.loc 1 2819 9 is_stmt 1 view .LVU3081
2819:src/display.c **** 	  show_label();
 9627              		.loc 1 2819 13 is_stmt 0 view .LVU3082
 9628 0488 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2819:src/display.c **** 	  show_label();
 9629              		.loc 1 2819 12 view .LVU3083
 9630 048a 5A07     		lsls	r2, r3, #29
 9631 048c 00F1D481 		bmi	.L1167
2822:src/display.c **** 	  show_registers();
 9632              		.loc 1 2822 9 is_stmt 1 view .LVU3084
2822:src/display.c **** 	  show_registers();
 9633              		.loc 1 2822 12 is_stmt 0 view .LVU3085
 9634 0490 1807     		lsls	r0, r3, #28
 9635 0492 00F1AF81 		bmi	.L1168
2832:src/display.c **** 	  if (DispMsg) { 
 9636              		.loc 1 2832 9 is_stmt 1 view .LVU3086
2832:src/display.c **** 	  if (DispMsg) { 
 9637              		.loc 1 2832 12 is_stmt 0 view .LVU3087
 9638 0496 4806     		lsls	r0, r1, #25
 9639 0498 40F17383 		bpl	.L951
2833:src/display.c **** 	    set_status(DispMsg);
 9640              		.loc 1 2833 4 is_stmt 1 view .LVU3088
2833:src/display.c **** 	    set_status(DispMsg);
 9641              		.loc 1 2833 8 is_stmt 0 view .LVU3089
 9642 049c 594F     		ldr	r7, .L1194+16
 9643 049e 3B68     		ldr	r3, [r7]
2833:src/display.c **** 	    set_status(DispMsg);
ARM GAS  /tmp/cc4E4VUn.s 			page 284


 9644              		.loc 1 2833 7 view .LVU3090
 9645 04a0 002B     		cmp	r3, #0
 9646 04a2 00F0B583 		beq	.L952
2834:src/display.c **** 	  } else if (DispPlot) {
 9647              		.loc 1 2834 6 is_stmt 1 view .LVU3091
 9648 04a6 1846     		mov	r0, r3
 9649 04a8 FFF7FEFF 		bl	set_status
 9650              	.LVL1076:
2886:src/display.c ****       nostk:
 9651              		.loc 1 2886 2 view .LVU3092
 9652 04ac 5A4B     		ldr	r3, .L1194+36
 9653 04ae 0193     		str	r3, [sp, #4]
 9654 04b0 FFF7FEFF 		bl	show_stack
 9655              	.LVL1077:
2888:src/display.c **** 	if (!skip) {
 9656              		.loc 1 2888 2 view .LVU3093
 9657 04b4 FFF7FEFF 		bl	show_flags
 9658              	.LVL1078:
2889:src/display.c **** 	  if (State2.runmode) {
 9659              		.loc 1 2889 2 view .LVU3094
 9660 04b8 E5E5     		b	.L883
 9661              	.L1159:
2682:src/display.c **** 	  if (State2.numdigit > 0)
 9662              		.loc 1 2682 4 view .LVU3095
2682:src/display.c **** 	  if (State2.numdigit > 0)
 9663              		.loc 1 2682 9 is_stmt 0 view .LVU3096
 9664 04ba 2E22     		movs	r2, #46
 9665 04bc 5D49     		ldr	r1, .L1194+64
 9666 04be 20A8     		add	r0, sp, #128
 9667              	.LVL1079:
2682:src/display.c **** 	  if (State2.numdigit > 0)
 9668              		.loc 1 2682 9 view .LVU3097
 9669 04c0 FFF7FEFF 		bl	scopy_char
 9670              	.LVL1080:
2683:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9671              		.loc 1 2683 14 view .LVU3098
 9672 04c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2682:src/display.c **** 	  if (State2.numdigit > 0)
 9673              		.loc 1 2682 9 view .LVU3099
 9674 04c6 0346     		mov	r3, r0
 9675              	.LVL1081:
2683:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9676              		.loc 1 2683 4 is_stmt 1 view .LVU3100
2683:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9677              		.loc 1 2683 7 is_stmt 0 view .LVU3101
 9678 04c8 002A     		cmp	r2, #0
 9679 04ca 40F08E80 		bne	.L1169
 9680              	.L889:
2686:src/display.c **** 	  if (yreg_enabled) {
 9681              		.loc 1 2686 4 is_stmt 1 view .LVU3102
 9682              	.LVL1082:
2686:src/display.c **** 	  if (yreg_enabled) {
 9683              		.loc 1 2686 10 is_stmt 0 view .LVU3103
 9684 04ce 5F22     		movs	r2, #95
 9685 04d0 1A70     		strb	r2, [r3]
2687:src/display.c **** 	    set_status_top(buf);
 9686              		.loc 1 2687 4 is_stmt 1 view .LVU3104
ARM GAS  /tmp/cc4E4VUn.s 			page 285


2687:src/display.c **** 	    set_status_top(buf);
 9687              		.loc 1 2687 7 is_stmt 0 view .LVU3105
 9688 04d2 B8F1000F 		cmp	r8, #0
 9689 04d6 7FF462AF 		bne	.L1142
2687:src/display.c **** 	    set_status_top(buf);
 9690              		.loc 1 2687 7 view .LVU3106
 9691 04da B8E6     		b	.L886
 9692              	.LVL1083:
 9693              	.L978:
 9694              	.LBB597:
 9695              	.LBB582:
1270:src/display.c **** 
 9696              		.loc 1 1270 2 is_stmt 1 view .LVU3107
 9697 04dc FFF7FEFF 		bl	set_separator_decimal_modes
 9698              	.LVL1084:
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9699              		.loc 1 1272 2 view .LVU3108
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9700              		.loc 1 1274 2 view .LVU3109
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9701              		.loc 1 1274 5 is_stmt 0 view .LVU3110
 9702 04e0 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9703              	.LBB571:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9704              		.loc 1 1281 15 view .LVU3111
 9705 04e2 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
 9706              	.LBE571:
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9707              		.loc 1 1274 5 view .LVU3112
 9708 04e6 012A     		cmp	r2, #1
 9709 04e8 40F2D080 		bls	.L981
 9710              	.LVL1085:
 9711              	.LBB572:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9712              		.loc 1 1281 14 is_stmt 1 view .LVU3113
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9713              		.loc 1 1281 4 is_stmt 0 view .LVU3114
 9714 04ec BCF1000F 		cmp	ip, #0
 9715 04f0 B3D0     		beq	.L982
 9716 04f2 09F10102 		add	r2, r9, #1
 9717 04f6 6046     		mov	r0, ip
 9718              	.LBE572:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9719              		.loc 1 1249 11 view .LVU3115
 9720 04f8 4FF0FF3E 		mov	lr, #-1
 9721 04fc 6FEA0906 		mvn	r6, r9
 9722              	.LVL1086:
 9723              	.L984:
 9724              	.LBB573:
1282:src/display.c **** 	      gotdot = j;
 9725              		.loc 1 1282 9 view .LVU3116
 9726 0500 2E28     		cmp	r0, #46
 9727 0502 06EB0201 		add	r1, r6, r2
 9728              	.LVL1087:
1282:src/display.c **** 	      gotdot = j;
 9729              		.loc 1 1282 6 is_stmt 1 view .LVU3117
1282:src/display.c **** 	      gotdot = j;
ARM GAS  /tmp/cc4E4VUn.s 			page 286


 9730              		.loc 1 1282 9 is_stmt 0 view .LVU3118
 9731 0506 03D1     		bne	.L983
1282:src/display.c **** 	      gotdot = j;
 9732              		.loc 1 1282 22 view .LVU3119
 9733 0508 BEF1FF3F 		cmp	lr, #-1
 9734 050c 08BF     		it	eq
 9735 050e 8E46     		moveq	lr, r1
 9736              	.LVL1088:
 9737              	.L983:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9738              		.loc 1 1281 28 is_stmt 1 view .LVU3120
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9739              		.loc 1 1281 14 view .LVU3121
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9740              		.loc 1 1281 15 is_stmt 0 view .LVU3122
 9741 0510 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9742              		.loc 1 1281 4 view .LVU3123
 9743 0514 0028     		cmp	r0, #0
 9744 0516 F3D1     		bne	.L984
1289:src/display.c **** 	  if (j > 0) {
 9745              		.loc 1 1289 4 is_stmt 1 view .LVU3124
1289:src/display.c **** 	  if (j > 0) {
 9746              		.loc 1 1289 6 is_stmt 0 view .LVU3125
 9747 0518 A1F10B02 		sub	r2, r1, #11
 9748              	.LVL1089:
1290:src/display.c **** 	    p += j + 1;
 9749              		.loc 1 1290 4 is_stmt 1 view .LVU3126
1290:src/display.c **** 	    p += j + 1;
 9750              		.loc 1 1290 7 is_stmt 0 view .LVU3127
 9751 051c 002A     		cmp	r2, #0
 9752 051e 40F32081 		ble	.L1170
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9753              		.loc 1 1291 6 is_stmt 1 view .LVU3128
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9754              		.loc 1 1291 8 is_stmt 0 view .LVU3129
 9755 0522 0A39     		subs	r1, r1, #10
1293:src/display.c **** 	      gotdot = 0;
 9756              		.loc 1 1293 9 view .LVU3130
 9757 0524 7245     		cmp	r2, lr
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9758              		.loc 1 1291 8 view .LVU3131
 9759 0526 8944     		add	r9, r9, r1
 9760              	.LVL1090:
1292:src/display.c **** 	    if (gotdot <= j) {
 9761              		.loc 1 1292 6 is_stmt 1 view .LVU3132
1293:src/display.c **** 	      gotdot = 0;
 9762              		.loc 1 1293 6 view .LVU3133
1293:src/display.c **** 	      gotdot = 0;
 9763              		.loc 1 1293 9 is_stmt 0 view .LVU3134
 9764 0528 80F22081 		bge	.L1020
1298:src/display.c **** 	      gotdot = 0;
 9765              		.loc 1 1298 11 is_stmt 1 view .LVU3135
1298:src/display.c **** 	      gotdot = 0;
 9766              		.loc 1 1298 14 is_stmt 0 view .LVU3136
 9767 052c 99F80020 		ldrb	r2, [r9]	@ zero_extendqisi2
 9768              	.LVL1091:
ARM GAS  /tmp/cc4E4VUn.s 			page 287


1298:src/display.c **** 	      gotdot = 0;
 9769              		.loc 1 1298 14 view .LVU3137
 9770 0530 2E2A     		cmp	r2, #46
 9771 0532 00F0A581 		beq	.L1171
 9772              	.LVL1092:
1305:src/display.c **** 	    overflow_to_left = 1;
 9773              		.loc 1 1305 6 is_stmt 1 view .LVU3138
 9774 0536 3C21     		movs	r1, #60
 9775              	.LVL1093:
1305:src/display.c **** 	    overflow_to_left = 1;
 9776              		.loc 1 1305 6 is_stmt 0 view .LVU3139
 9777 0538 FFF7FEFF 		bl	set_dig
 9778              	.LVL1094:
1306:src/display.c **** 	  }
 9779              		.loc 1 1306 6 is_stmt 1 view .LVU3140
1306:src/display.c **** 	  }
 9780              		.loc 1 1306 6 is_stmt 0 view .LVU3141
 9781 053c 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
1306:src/display.c **** 	  }
 9782              		.loc 1 1306 6 view .LVU3142
 9783              	.LBE573:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9784              		.loc 1 1312 9 is_stmt 1 view .LVU3143
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9785              		.loc 1 1312 2 is_stmt 0 view .LVU3144
 9786 0540 BCF1000F 		cmp	ip, #0
 9787 0544 89D0     		beq	.L982
 9788              	.LBB574:
1304:src/display.c **** 	    set_dig(0, '<');
 9789              		.loc 1 1304 18 view .LVU3145
 9790 0546 4FF0FF3B 		mov	fp, #-1
 9791              	.LVL1095:
1292:src/display.c **** 	    if (gotdot <= j) {
 9792              		.loc 1 1292 8 view .LVU3146
 9793 054a 4FF00908 		mov	r8, #9
 9794              	.LVL1096:
 9795              	.L1013:
1306:src/display.c **** 	  }
 9796              		.loc 1 1306 23 view .LVU3147
 9797 054e 0126     		movs	r6, #1
 9798              	.LVL1097:
 9799              	.L994:
1306:src/display.c **** 	  }
 9800              		.loc 1 1306 23 view .LVU3148
 9801              	.LBE574:
1337:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9802              		.loc 1 1337 5 view .LVU3149
 9803 0550 6346     		mov	r3, ip
 9804 0552 0AE0     		b	.L992
 9805              	.LVL1098:
 9806              	.L1172:
1327:src/display.c **** #  endif
 9807              		.loc 1 1327 11 view .LVU3150
 9808 0554 D845     		cmp	r8, fp
 9809 0556 15D0     		beq	.L989
 9810              	.LVL1099:
 9811              	.L988:
ARM GAS  /tmp/cc4E4VUn.s 			page 288


1351:src/display.c **** 	      i += segs_per_digit;
 9812              		.loc 1 1351 8 view .LVU3151
 9813 0558 FFF7FEFF 		bl	set_dig
 9814              	.LVL1100:
1352:src/display.c **** 	    }
 9815              		.loc 1 1352 8 is_stmt 1 view .LVU3152
1352:src/display.c **** 	    }
 9816              		.loc 1 1352 10 is_stmt 0 view .LVU3153
 9817 055c 08F10908 		add	r8, r8, #9
 9818              	.LVL1101:
 9819              	.L990:
1316:src/display.c **** 	  if (*p == '.') {
 9820              		.loc 1 1316 11 is_stmt 1 view .LVU3154
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9821              		.loc 1 1312 9 view .LVU3155
 9822 0560 19F8013F 		ldrb	r3, [r9, #1]!	@ zero_extendqisi2
 9823              	.LVL1102:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9824              		.loc 1 1312 2 is_stmt 0 view .LVU3156
 9825 0564 002B     		cmp	r3, #0
 9826 0566 3FF45EAF 		beq	.L993
 9827              	.LVL1103:
 9828              	.L992:
1317:src/display.c **** 	    if (gotdot < 0)
 9829              		.loc 1 1317 4 is_stmt 1 view .LVU3157
1318:src/display.c **** 	      gotdot = i;
 9830              		.loc 1 1318 6 view .LVU3158
1351:src/display.c **** 	      i += segs_per_digit;
 9831              		.loc 1 1351 8 view .LVU3159
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9832              		.loc 1 1312 20 is_stmt 0 view .LVU3160
 9833 056a 452B     		cmp	r3, #69
1351:src/display.c **** 	      i += segs_per_digit;
 9834              		.loc 1 1351 8 view .LVU3161
 9835 056c 1946     		mov	r1, r3
 9836 056e 4046     		mov	r0, r8
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9837              		.loc 1 1312 20 view .LVU3162
 9838 0570 3FF459AF 		beq	.L993
1317:src/display.c **** 	    if (gotdot < 0)
 9839              		.loc 1 1317 7 view .LVU3163
 9840 0574 2E2B     		cmp	r3, #46
 9841 0576 EFD1     		bne	.L988
1327:src/display.c **** #  endif
 9842              		.loc 1 1327 8 is_stmt 1 view .LVU3164
1329:src/display.c **** 		i += segs_per_digit;
 9843              		.loc 1 1329 3 view .LVU3165
 9844              	.LVL1104:
1333:src/display.c **** 		  i += segs_per_digit;
 9845              		.loc 1 1333 3 view .LVU3166
1318:src/display.c **** 	      gotdot = i;
 9846              		.loc 1 1318 9 is_stmt 0 view .LVU3167
 9847 0578 BBF1000F 		cmp	fp, #0
1329:src/display.c **** 		i += segs_per_digit;
 9848              		.loc 1 1329 3 view .LVU3168
 9849 057c 4046     		mov	r0, r8
 9850 057e 4FF02F01 		mov	r1, #47
ARM GAS  /tmp/cc4E4VUn.s 			page 289


1318:src/display.c **** 	      gotdot = i;
 9851              		.loc 1 1318 9 view .LVU3169
 9852 0582 E7DA     		bge	.L1172
 9853              	.L989:
1334:src/display.c **** 		}
 9854              		.loc 1 1334 5 is_stmt 1 view .LVU3170
 9855              	.LVL1105:
1333:src/display.c **** 		  i += segs_per_digit;
 9856              		.loc 1 1333 6 is_stmt 0 view .LVU3171
 9857 0584 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9858 0586 012B     		cmp	r3, #1
 9859 0588 26D9     		bls	.L991
 9860 058a C346     		mov	fp, r8
1334:src/display.c **** 		}
 9861              		.loc 1 1334 7 view .LVU3172
 9862 058c 08F10908 		add	r8, r8, #9
 9863              	.LVL1106:
1334:src/display.c **** 		}
 9864              		.loc 1 1334 7 view .LVU3173
 9865 0590 E6E7     		b	.L990
 9866              	.LVL1107:
 9867              	.L1160:
1334:src/display.c **** 		}
 9868              		.loc 1 1334 7 view .LVU3174
 9869              	.LBE582:
 9870              	.LBE597:
2701:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9871              		.loc 1 2701 4 is_stmt 1 view .LVU3175
2701:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9872              		.loc 1 2701 35 is_stmt 0 view .LVU3176
 9873 0592 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9874 0594 2849     		ldr	r1, .L1194+68
 9875 0596 0623     		movs	r3, #6
 9876 0598 03EB0213 		add	r3, r3, r2, lsl #4
2701:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9877              		.loc 1 2701 9 view .LVU3177
 9878 059c 1944     		add	r1, r1, r3
 9879 059e 20A8     		add	r0, sp, #128
 9880              	.LVL1108:
2701:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9881              		.loc 1 2701 9 view .LVU3178
 9882 05a0 FFF7FEFF 		bl	scopy
 9883              	.LVL1109:
2702:src/display.c **** 	  if (State2.dot) {
 9884              		.loc 1 2702 4 is_stmt 1 view .LVU3179
2702:src/display.c **** 	  if (State2.dot) {
 9885              		.loc 1 2702 9 is_stmt 0 view .LVU3180
 9886 05a4 254B     		ldr	r3, .L1194+72
 9887 05a6 94F91510 		ldrsb	r1, [r4, #21]
 9888 05aa 254A     		ldr	r2, .L1194+76
 9889 05ac 12EA2101 		ands	r1, r2, r1, asr #32
 9890 05b0 38BF     		it	cc
 9891 05b2 1946     		movcc	r1, r3
 9892 05b4 FFF7FEFF 		bl	scopy
 9893              	.LVL1110:
2703:src/display.c **** 	    *bp++ = 's';
 9894              		.loc 1 2703 8 view .LVU3181
ARM GAS  /tmp/cc4E4VUn.s 			page 290


 9895 05b8 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9896              	.LVL1111:
2703:src/display.c **** 	    *bp++ = 's';
 9897              		.loc 1 2703 4 is_stmt 1 view .LVU3182
2703:src/display.c **** 	    *bp++ = 's';
 9898              		.loc 1 2703 7 is_stmt 0 view .LVU3183
 9899 05ba 5906     		lsls	r1, r3, #25
 9900 05bc 46D5     		bpl	.L893
2704:src/display.c **** 	    *bp++ = '_';
 9901              		.loc 1 2704 6 is_stmt 1 view .LVU3184
 9902              	.LVL1112:
2704:src/display.c **** 	    *bp++ = '_';
 9903              		.loc 1 2704 12 is_stmt 0 view .LVU3185
 9904 05be 7322     		movs	r2, #115
2705:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9905              		.loc 1 2705 12 view .LVU3186
 9906 05c0 5F23     		movs	r3, #95
2704:src/display.c **** 	    *bp++ = '_';
 9907              		.loc 1 2704 12 view .LVU3187
 9908 05c2 0270     		strb	r2, [r0]
2705:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9909              		.loc 1 2705 6 is_stmt 1 view .LVU3188
 9910              	.LVL1113:
2705:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9911              		.loc 1 2705 12 is_stmt 0 view .LVU3189
 9912 05c4 4370     		strb	r3, [r0, #1]
 9913 05c6 E6E6     		b	.L917
 9914              	.LVL1114:
 9915              	.L1161:
 9916              	.LBB598:
 9917              	.LBB583:
1259:src/display.c **** 	p++;
 9918              		.loc 1 1259 2 is_stmt 1 view .LVU3190
 9919              	.LBB575:
 9920              	.LBI575:
 296:src/display.c **** {
 9921              		.loc 1 296 13 view .LVU3191
 9922              	.LBB576:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9923              		.loc 1 298 3 view .LVU3192
 298:src/display.c ****   set_dot(MANT_SIGN);
 9924              		.loc 1 298 25 is_stmt 0 view .LVU3193
 9925 05c8 0D49     		ldr	r1, .L1194+12
 299:src/display.c **** }
 9926              		.loc 1 299 3 view .LVU3194
 9927 05ca 8120     		movs	r0, #129
 9928              	.LVL1115:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9929              		.loc 1 298 25 view .LVU3195
 9930 05cc 0A70     		strb	r2, [r1]
 299:src/display.c **** }
 9931              		.loc 1 299 3 is_stmt 1 view .LVU3196
 9932              	.LBE576:
 9933              	.LBE575:
1260:src/display.c ****       }
 9934              		.loc 1 1260 3 is_stmt 0 view .LVU3197
 9935 05ce 09F10109 		add	r9, r9, #1
ARM GAS  /tmp/cc4E4VUn.s 			page 291


 9936              	.LVL1116:
 9937              	.LBB578:
 9938              	.LBB577:
 299:src/display.c **** }
 9939              		.loc 1 299 3 view .LVU3198
 9940 05d2 FFF7FEFF 		bl	set_dot
 9941              	.LVL1117:
 9942              	.LBE577:
 9943              	.LBE578:
1260:src/display.c ****       }
 9944              		.loc 1 1260 2 is_stmt 1 view .LVU3199
1260:src/display.c ****       }
 9945              		.loc 1 1260 2 is_stmt 0 view .LVU3200
 9946 05d6 49E6     		b	.L977
 9947              	.LVL1118:
 9948              	.L991:
1337:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9949              		.loc 1 1337 5 is_stmt 1 view .LVU3201
 9950 05d8 1A4B     		ldr	r3, .L1194+80
 9951 05da 0022     		movs	r2, #0
 9952 05dc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9953 05de A8F10900 		sub	r0, r8, #9
 9954              	.LVL1119:
1337:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9955              		.loc 1 1337 5 is_stmt 0 view .LVU3202
 9956 05e2 FFF7FEFF 		bl	set_decimal
 9957              	.LVL1120:
 9958 05e6 C346     		mov	fp, r8
 9959 05e8 BAE7     		b	.L990
 9960              	.LVL1121:
 9961              	.L1169:
1337:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9962              		.loc 1 1337 5 view .LVU3203
 9963              	.LBE583:
 9964              	.LBE598:
2684:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9965              		.loc 1 2684 6 is_stmt 1 view .LVU3204
2684:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9966              		.loc 1 2684 11 is_stmt 0 view .LVU3205
 9967 05ea 2189     		ldrh	r1, [r4, #8]
 9968 05ec FFF7FEFF 		bl	num_arg_0
 9969              	.LVL1122:
2684:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9970              		.loc 1 2684 11 view .LVU3206
 9971 05f0 0346     		mov	r3, r0
 9972              	.LVL1123:
2684:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9973              		.loc 1 2684 11 view .LVU3207
 9974 05f2 6CE7     		b	.L889
 9975              	.L1195:
 9976              		.align	2
 9977              	.L1194:
 9978 05f4 0C000000 		.word	.LANCHOR17+12
 9979 05f8 08000000 		.word	.LC21
 9980 05fc 18000000 		.word	.LC22
 9981 0600 00000000 		.word	LastDisplayedNumber
 9982 0604 00000000 		.word	DispMsg
ARM GAS  /tmp/cc4E4VUn.s 			page 292


 9983 0608 00000000 		.word	ShowRegister
 9984 060c 34000000 		.word	.LC23
 9985 0610 00000000 		.word	LastDisplayedExponent
 9986 0614 00000000 		.word	.LANCHOR20
 9987 0618 00000000 		.word	DispPlot
 9988 061c 38000000 		.word	.LC24
 9989 0620 AC000000 		.word	.LC40
 9990 0624 00000000 		.word	WasDataEntry
 9991 0628 00000000 		.word	.LANCHOR21
 9992 062c 00000000 		.word	.LANCHOR22
 9993 0630 00000000 		.word	.LANCHOR24
 9994 0634 56040000 		.word	argcmds+1110
 9995 0638 00000000 		.word	argcmds
 9996 063c 04000000 		.word	.LC19
 9997 0640 00000000 		.word	.LC18
 9998 0644 00000000 		.word	.LANCHOR1
 9999 0648 00000000 		.word	.LANCHOR0
 10000              	.L893:
2706:src/display.c **** 	    *bp++ = '\021';
 10001              		.loc 1 2706 11 is_stmt 1 view .LVU3208
2706:src/display.c **** 	    *bp++ = '\021';
 10002              		.loc 1 2706 14 is_stmt 0 view .LVU3209
 10003 064c 012E     		cmp	r6, #1
 10004 064e 00F09C80 		beq	.L1173
2713:src/display.c **** 	      *bp++ = '.';
 10005              		.loc 1 2713 6 is_stmt 1 view .LVU3210
2713:src/display.c **** 	      *bp++ = '.';
 10006              		.loc 1 2713 10 is_stmt 0 view .LVU3211
 10007 0652 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2713:src/display.c **** 	      *bp++ = '.';
 10008              		.loc 1 2713 9 view .LVU3212
 10009 0654 DA07     		lsls	r2, r3, #31
2714:src/display.c **** 	    if (State2.numdigit > 0) {
 10010              		.loc 1 2714 8 is_stmt 1 view .LVU3213
 10011              	.LVL1124:
2714:src/display.c **** 	    if (State2.numdigit > 0) {
 10012              		.loc 1 2714 14 is_stmt 0 view .LVU3214
 10013 0656 44BF     		itt	mi
 10014 0658 2E23     		movmi	r3, #46
 10015 065a 00F8013B 		strbmi	r3, [r0], #1
 10016              	.LVL1125:
2715:src/display.c **** 	      if (State2.shuffle)
 10017              		.loc 1 2715 6 is_stmt 1 view .LVU3215
2715:src/display.c **** 	      if (State2.shuffle)
 10018              		.loc 1 2715 16 is_stmt 0 view .LVU3216
 10019 065e E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2715:src/display.c **** 	      if (State2.shuffle)
 10020              		.loc 1 2715 9 view .LVU3217
 10021 0660 8AB1     		cbz	r2, .L897
2716:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10022              		.loc 1 2716 8 is_stmt 1 view .LVU3218
2716:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10023              		.loc 1 2716 12 is_stmt 0 view .LVU3219
 10024 0662 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2716:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10025              		.loc 1 2716 11 view .LVU3220
 10026 0664 9B07     		lsls	r3, r3, #30
ARM GAS  /tmp/cc4E4VUn.s 			page 293


 10027 0666 40F1C180 		bpl	.L898
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10028              		.loc 1 2717 3 is_stmt 1 view .LVU3221
 10029              	.LVL1126:
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10030              		.loc 1 2717 17 is_stmt 0 view .LVU3222
 10031 066a 2289     		ldrh	r2, [r4, #8]
 10032              	.LVL1127:
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10033              		.loc 1 2717 34 is_stmt 1 view .LVU3223
 10034 066c C149     		ldr	r1, .L1196
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10035              		.loc 1 2717 10 is_stmt 0 view .LVU3224
 10036 066e 0023     		movs	r3, #0
 10037              	.LVL1128:
 10038              	.L899:
2718:src/display.c **** 	      else
 10039              		.loc 1 2718 5 is_stmt 1 discriminator 3 view .LVU3225
2718:src/display.c **** 	      else
 10040              		.loc 1 2718 24 is_stmt 0 discriminator 3 view .LVU3226
 10041 0670 02F00306 		and	r6, r2, #3
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10042              		.loc 1 2717 54 discriminator 3 view .LVU3227
 10043 0674 0133     		adds	r3, r3, #1
 10044              	.LVL1129:
2718:src/display.c **** 	      else
 10045              		.loc 1 2718 11 discriminator 3 view .LVU3228
 10046 0676 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 10047 0678 00F8016B 		strb	r6, [r0], #1
 10048              	.LVL1130:
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10049              		.loc 1 2717 53 is_stmt 1 discriminator 3 view .LVU3229
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10050              		.loc 1 2717 42 is_stmt 0 discriminator 3 view .LVU3230
 10051 067c E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10052              		.loc 1 2717 3 discriminator 3 view .LVU3231
 10053 067e 9E42     		cmp	r6, r3
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10054              		.loc 1 2717 60 discriminator 3 view .LVU3232
 10055 0680 4FEAA202 		asr	r2, r2, #2
 10056              	.LVL1131:
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10057              		.loc 1 2717 34 is_stmt 1 discriminator 3 view .LVU3233
2717:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10058              		.loc 1 2717 3 is_stmt 0 discriminator 3 view .LVU3234
 10059 0684 F4DC     		bgt	.L899
 10060              	.LVL1132:
 10061              	.L897:
2723:src/display.c **** 	  }
 10062              		.loc 1 2723 6 is_stmt 1 view .LVU3235
2723:src/display.c **** 	  }
 10063              		.loc 1 2723 12 is_stmt 0 view .LVU3236
 10064 0686 5F23     		movs	r3, #95
 10065 0688 0370     		strb	r3, [r0]
 10066 068a 84E6     		b	.L917
 10067              	.LVL1133:
ARM GAS  /tmp/cc4E4VUn.s 			page 294


 10068              	.L981:
 10069              	.LBB599:
 10070              	.LBB584:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10071              		.loc 1 1312 9 is_stmt 1 view .LVU3237
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10072              		.loc 1 1312 2 is_stmt 0 view .LVU3238
 10073 068c BCF1000F 		cmp	ip, #0
 10074 0690 3FF4E3AE 		beq	.L982
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10075              		.loc 1 1272 4 view .LVU3239
 10076 0694 B046     		mov	r8, r6
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10077              		.loc 1 1249 11 view .LVU3240
 10078 0696 4FF0FF3B 		mov	fp, #-1
 10079              	.LVL1134:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10080              		.loc 1 1249 11 view .LVU3241
 10081 069a 59E7     		b	.L994
 10082              	.LVL1135:
 10083              	.L1023:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10084              		.loc 1 1249 11 view .LVU3242
 10085              	.LBE584:
 10086              	.LBE599:
 10087              	.LBB600:
 10088              	.LBB560:
2924:src/display.c **** 	      while(*b) {
 10089              		.loc 1 2924 10 view .LVU3243
 10090 069c 5A1C     		adds	r2, r3, #1
 10091 069e 46E5     		b	.L1004
 10092              	.LVL1136:
 10093              	.L1164:
2924:src/display.c **** 	      while(*b) {
 10094              		.loc 1 2924 10 view .LVU3244
 10095              	.LBE560:
 10096              	.LBE600:
 10097              	.LBB601:
2747:src/display.c **** 	  char b2[16];
 10098              		.loc 1 2747 4 is_stmt 1 view .LVU3245
2747:src/display.c **** 	  char b2[16];
 10099              		.loc 1 2747 45 is_stmt 0 view .LVU3246
 10100 06a0 D9F80030 		ldr	r3, [r9]
 10101 06a4 B3F8DC07 		ldrh	r0, [r3, #2012]
2747:src/display.c **** 	  char b2[16];
 10102              		.loc 1 2747 22 view .LVU3247
 10103 06a8 C0F34610 		ubfx	r0, r0, #5, #7
 10104 06ac FFF7FEFF 		bl	current_catalogue
 10105              	.LVL1137:
2751:src/display.c **** 	  p = catcmd(op, b2);
 10106              		.loc 1 2751 9 view .LVU3248
 10107 06b0 B149     		ldr	r1, .L1196+4
2747:src/display.c **** 	  char b2[16];
 10108              		.loc 1 2747 22 view .LVU3249
 10109 06b2 0546     		mov	r5, r0
 10110              	.LVL1138:
2748:src/display.c **** 	  const char *p;
ARM GAS  /tmp/cc4E4VUn.s 			page 295


 10111              		.loc 1 2748 4 is_stmt 1 view .LVU3250
2749:src/display.c **** 
 10112              		.loc 1 2749 4 view .LVU3251
2751:src/display.c **** 	  p = catcmd(op, b2);
 10113              		.loc 1 2751 4 view .LVU3252
2751:src/display.c **** 	  p = catcmd(op, b2);
 10114              		.loc 1 2751 9 is_stmt 0 view .LVU3253
 10115 06b4 20A8     		add	r0, sp, #128
 10116              	.LVL1139:
2751:src/display.c **** 	  p = catcmd(op, b2);
 10117              		.loc 1 2751 9 view .LVU3254
 10118 06b6 FFF7FEFF 		bl	scopy
 10119              	.LVL1140:
2752:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10120              		.loc 1 2752 8 view .LVU3255
 10121 06ba 0AA9     		add	r1, sp, #40
2751:src/display.c **** 	  p = catcmd(op, b2);
 10122              		.loc 1 2751 9 view .LVU3256
 10123 06bc 0646     		mov	r6, r0
2752:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10124              		.loc 1 2752 8 view .LVU3257
 10125 06be 2846     		mov	r0, r5
 10126              	.LVL1141:
2752:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10127              		.loc 1 2752 4 is_stmt 1 view .LVU3258
2752:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10128              		.loc 1 2752 8 is_stmt 0 view .LVU3259
 10129 06c0 FFF7FEFF 		bl	catcmd
 10130              	.LVL1142:
2753:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10131              		.loc 1 2753 7 view .LVU3260
 10132 06c4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10133 06c6 142B     		cmp	r3, #20
2752:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10134              		.loc 1 2752 8 view .LVU3261
 10135 06c8 0146     		mov	r1, r0
 10136              	.LVL1143:
2753:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10137              		.loc 1 2753 4 is_stmt 1 view .LVU3262
2753:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10138              		.loc 1 2753 7 is_stmt 0 view .LVU3263
 10139 06ca 07D0     		beq	.L902
2753:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10140              		.loc 1 2753 29 discriminator 1 view .LVU3264
 10141 06cc 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10142 06ce 9F07     		lsls	r7, r3, #30
 10143 06d0 04D5     		bpl	.L902
2754:src/display.c **** 	  bp = scopy(bp, p);
 10144              		.loc 1 2754 6 is_stmt 1 view .LVU3265
2754:src/display.c **** 	  bp = scopy(bp, p);
 10145              		.loc 1 2754 9 is_stmt 0 view .LVU3266
 10146 06d2 3346     		mov	r3, r6
 10147              	.LVL1144:
2754:src/display.c **** 	  bp = scopy(bp, p);
 10148              		.loc 1 2754 12 view .LVU3267
 10149 06d4 1422     		movs	r2, #20
 10150 06d6 03F8012B 		strb	r2, [r3], #1
ARM GAS  /tmp/cc4E4VUn.s 			page 296


 10151              	.LVL1145:
2754:src/display.c **** 	  bp = scopy(bp, p);
 10152              		.loc 1 2754 9 view .LVU3268
 10153 06da 1E46     		mov	r6, r3
 10154              	.LVL1146:
 10155              	.L902:
2755:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10156              		.loc 1 2755 4 is_stmt 1 view .LVU3269
2755:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10157              		.loc 1 2755 9 is_stmt 0 view .LVU3270
 10158 06dc 3046     		mov	r0, r6
 10159              	.LVL1147:
2755:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10160              		.loc 1 2755 9 view .LVU3271
 10161 06de FFF7FEFF 		bl	scopy
 10162              	.LVL1148:
2756:src/display.c **** 	    // State2.disp_small = 1;
 10163              		.loc 1 2756 4 is_stmt 1 view .LVU3272
2756:src/display.c **** 	    // State2.disp_small = 1;
 10164              		.loc 1 2756 7 is_stmt 0 view .LVU3273
 10165 06e2 ABF11003 		sub	r3, fp, #16
 10166 06e6 012B     		cmp	r3, #1
 10167 06e8 6FD9     		bls	.L1174
2763:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10168              		.loc 1 2763 11 is_stmt 1 view .LVU3274
2763:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10169              		.loc 1 2763 15 is_stmt 0 view .LVU3275
 10170 06ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2763:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10171              		.loc 1 2763 14 view .LVU3276
 10172 06ec 13F04003 		ands	r3, r3, #64
 10173 06f0 08D0     		beq	.L1016
2764:src/display.c **** 	      decNumber x, r;
 10174              		.loc 1 2764 6 is_stmt 1 view .LVU3277
2764:src/display.c **** 	      decNumber x, r;
 10175              		.loc 1 2764 9 is_stmt 0 view .LVU3278
 10176 06f2 BBF1120F 		cmp	fp, #18
 10177 06f6 00F09B82 		beq	.L1175
2784:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10178              		.loc 1 2784 13 is_stmt 1 view .LVU3279
2784:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10179              		.loc 1 2784 46 is_stmt 0 view .LVU3280
 10180 06fa A5F58873 		sub	r3, r5, #272
2784:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10181              		.loc 1 2784 16 view .LVU3281
 10182 06fe 0D2B     		cmp	r3, #13
 10183 0700 40F27082 		bls	.L1176
 10184              	.L1016:
2784:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10185              		.loc 1 2784 16 view .LVU3282
 10186              	.LBE601:
2598:src/display.c **** 	int x_disp = 0;
 10187              		.loc 1 2598 6 view .LVU3283
 10188 0704 0026     		movs	r6, #0
 10189              	.LVL1149:
 10190              	.L906:
 10191              	.LBB611:
ARM GAS  /tmp/cc4E4VUn.s 			page 297


2793:src/display.c **** 	    set_status_top(buf);
 10192              		.loc 1 2793 4 is_stmt 1 view .LVU3284
2793:src/display.c **** 	    set_status_top(buf);
 10193              		.loc 1 2793 7 is_stmt 0 view .LVU3285
 10194 0706 B8F1000F 		cmp	r8, #0
 10195 070a 59D0     		beq	.L911
2794:src/display.c **** 	    no_status_top = 1;
 10196              		.loc 1 2794 6 is_stmt 1 view .LVU3286
 10197              	.LVL1150:
 10198              	.LBB602:
 10199              	.LBI602:
3507:src/display.c **** 	if (no_status_top) return;
 10200              		.loc 1 3507 19 view .LVU3287
 10201              	.LBB603:
3508:src/display.c **** 	if (State2.runmode) {
 10202              		.loc 1 3508 2 view .LVU3288
3508:src/display.c **** 	if (State2.runmode) {
 10203              		.loc 1 3508 5 is_stmt 0 view .LVU3289
 10204 070c BAF90030 		ldrsh	r3, [r10]
 10205 0710 13B9     		cbnz	r3, .L912
 10206 0712 20A8     		add	r0, sp, #128
 10207              	.LVL1151:
3508:src/display.c **** 	if (State2.runmode) {
 10208              		.loc 1 3508 5 view .LVU3290
 10209 0714 FFF7FEFF 		bl	set_status_top.part.0
 10210              	.LVL1152:
 10211              	.L912:
3508:src/display.c **** 	if (State2.runmode) {
 10212              		.loc 1 3508 5 view .LVU3291
 10213              	.LBE603:
 10214              	.LBE602:
2795:src/display.c **** 	    annuc = 1;
 10215              		.loc 1 2795 6 is_stmt 1 view .LVU3292
2795:src/display.c **** 	    annuc = 1;
 10216              		.loc 1 2795 20 is_stmt 0 view .LVU3293
 10217 0718 0123     		movs	r3, #1
2796:src/display.c **** 	  }
 10218              		.loc 1 2796 12 view .LVU3294
 10219 071a 4546     		mov	r5, r8
2795:src/display.c **** 	    annuc = 1;
 10220              		.loc 1 2795 20 view .LVU3295
 10221 071c AAF80030 		strh	r3, [r10]	@ movhi
2796:src/display.c **** 	  }
 10222              		.loc 1 2796 6 is_stmt 1 view .LVU3296
 10223              	.LVL1153:
 10224              	.L913:
2796:src/display.c **** 	  }
 10225              		.loc 1 2796 6 is_stmt 0 view .LVU3297
 10226              	.LBE611:
2886:src/display.c ****       nostk:
 10227              		.loc 1 2886 2 is_stmt 1 view .LVU3298
 10228 0720 FFF7FEFF 		bl	show_stack
 10229              	.LVL1154:
 10230              	.LDL1:
2888:src/display.c **** 	if (!skip) {
 10231              		.loc 1 2888 2 view .LVU3299
 10232 0724 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/cc4E4VUn.s 			page 298


 10233              	.LVL1155:
2889:src/display.c **** 	  if (State2.runmode) {
 10234              		.loc 1 2889 2 view .LVU3300
2889:src/display.c **** 	  if (State2.runmode) {
 10235              		.loc 1 2889 5 is_stmt 0 view .LVU3301
 10236 0728 002E     		cmp	r6, #0
 10237 072a 00F03C82 		beq	.L1148
 10238              	.LVL1156:
 10239              	.L914:
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10240              		.loc 1 2934 2 is_stmt 1 view .LVU3302
 10241 072e FFF7FEFF 		bl	set_annunciators
 10242              	.LVL1157:
2935:src/display.c **** 	  ShowRPN = 0;
 10243              		.loc 1 2935 2 view .LVU3303
 10244 0732 924B     		ldr	r3, .L1196+8
 10245 0734 924F     		ldr	r7, .L1196+12
 10246 0736 934E     		ldr	r6, .L1196+16
 10247 0738 0193     		str	r3, [sp, #4]
 10248 073a 20E5     		b	.L878
 10249              	.LVL1158:
 10250              	.L1163:
 10251              	.LBB612:
 10252              	.LBB585:
1390:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10253              		.loc 1 1390 6 view .LVU3304
1395:src/display.c **** #  endif
 10254              		.loc 1 1395 6 view .LVU3305
 10255 073c 09F10100 		add	r0, r9, #1
 10256              	.LVL1159:
1395:src/display.c **** #  endif
 10257              		.loc 1 1395 6 is_stmt 0 view .LVU3306
 10258 0740 FFF7FEFF 		bl	s_to_i
 10259              	.LVL1160:
1395:src/display.c **** #  endif
 10260              		.loc 1 1395 6 view .LVU3307
 10261 0744 99F80130 		ldrb	r3, [r9, #1]	@ zero_extendqisi2
 10262 0748 2D2B     		cmp	r3, #45
 10263 074a 0CBF     		ite	eq
 10264 074c 0621     		moveq	r1, #6
 10265 074e 0421     		movne	r1, #4
 10266 0750 0022     		movs	r2, #0
 10267 0752 FFF7FEFF 		bl	set_exp
 10268              	.LVL1161:
1395:src/display.c **** #  endif
 10269              		.loc 1 1395 6 view .LVU3308
 10270              	.LBE585:
 10271              	.LBE612:
2904:src/display.c **** 	      goto finish;
 10272              		.loc 1 2904 6 is_stmt 1 view .LVU3309
2904:src/display.c **** 	      goto finish;
 10273              		.loc 1 2904 9 is_stmt 0 view .LVU3310
 10274 0756 8C4B     		ldr	r3, .L1196+20
 10275 0758 1B68     		ldr	r3, [r3]
 10276 075a 002B     		cmp	r3, #0
 10277 075c 3FF4A1AD 		beq	.L1150
 10278 0760 85E6     		b	.L1065
ARM GAS  /tmp/cc4E4VUn.s 			page 299


 10279              	.LVL1162:
 10280              	.L1170:
 10281              	.LBB613:
 10282              	.LBB586:
1255:src/display.c **** #endif
 10283              		.loc 1 1255 11 view .LVU3311
 10284 0762 0646     		mov	r6, r0
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10285              		.loc 1 1272 4 view .LVU3312
 10286 0764 8046     		mov	r8, r0
 10287              	.LBB579:
1308:src/display.c **** 	}
 10288              		.loc 1 1308 16 view .LVU3313
 10289 0766 4FF0FF3B 		mov	fp, #-1
 10290              	.LVL1163:
1308:src/display.c **** 	}
 10291              		.loc 1 1308 16 view .LVU3314
 10292 076a F1E6     		b	.L994
 10293              	.LVL1164:
 10294              	.L1020:
1292:src/display.c **** 	    if (gotdot <= j) {
 10295              		.loc 1 1292 8 view .LVU3315
 10296 076c 4FF00908 		mov	r8, #9
 10297              	.LVL1165:
 10298              	.L986:
1305:src/display.c **** 	    overflow_to_left = 1;
 10299              		.loc 1 1305 6 is_stmt 1 view .LVU3316
 10300 0770 3C21     		movs	r1, #60
 10301              	.LVL1166:
1305:src/display.c **** 	    overflow_to_left = 1;
 10302              		.loc 1 1305 6 is_stmt 0 view .LVU3317
 10303 0772 0020     		movs	r0, #0
 10304 0774 FFF7FEFF 		bl	set_dig
 10305              	.LVL1167:
1306:src/display.c **** 	  }
 10306              		.loc 1 1306 6 is_stmt 1 view .LVU3318
1306:src/display.c **** 	  }
 10307              		.loc 1 1306 6 is_stmt 0 view .LVU3319
 10308 0778 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
1306:src/display.c **** 	  }
 10309              		.loc 1 1306 6 view .LVU3320
 10310              	.LBE579:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10311              		.loc 1 1312 9 is_stmt 1 view .LVU3321
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10312              		.loc 1 1312 2 is_stmt 0 view .LVU3322
 10313 077c 4FF0000B 		mov	fp, #0
 10314              	.LVL1168:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10315              		.loc 1 1312 2 view .LVU3323
 10316 0780 BCF1000F 		cmp	ip, #0
 10317 0784 7FF4E3AE 		bne	.L1013
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10318              		.loc 1 1312 2 view .LVU3324
 10319 0788 6CE6     		b	.L1001
 10320              	.LVL1169:
 10321              	.L1173:
ARM GAS  /tmp/cc4E4VUn.s 			page 300


1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10322              		.loc 1 1312 2 view .LVU3325
 10323              	.LBE586:
 10324              	.LBE613:
2707:src/display.c **** 	    *bp++ = '_';
 10325              		.loc 1 2707 6 is_stmt 1 view .LVU3326
2707:src/display.c **** 	    *bp++ = '_';
 10326              		.loc 1 2707 12 is_stmt 0 view .LVU3327
 10327 078a 1122     		movs	r2, #17
2708:src/display.c **** 	  } else {
 10328              		.loc 1 2708 12 view .LVU3328
 10329 078c 5F23     		movs	r3, #95
2707:src/display.c **** 	    *bp++ = '_';
 10330              		.loc 1 2707 12 view .LVU3329
 10331 078e 0270     		strb	r2, [r0]
2708:src/display.c **** 	  } else {
 10332              		.loc 1 2708 6 is_stmt 1 view .LVU3330
 10333              	.LVL1170:
2708:src/display.c **** 	  } else {
 10334              		.loc 1 2708 12 is_stmt 0 view .LVU3331
 10335 0790 4370     		strb	r3, [r0, #1]
 10336 0792 00E6     		b	.L917
 10337              	.LVL1171:
 10338              	.L1165:
2802:src/display.c **** 	  if (State2.numdigit > 0) {
 10339              		.loc 1 2802 4 is_stmt 1 view .LVU3332
2802:src/display.c **** 	  if (State2.numdigit > 0) {
 10340              		.loc 1 2802 42 is_stmt 0 view .LVU3333
 10341 0794 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10342 0796 7D49     		ldr	r1, .L1196+24
 10343 0798 0423     		movs	r3, #4
 10344 079a 03EB0213 		add	r3, r3, r2, lsl #4
2802:src/display.c **** 	  if (State2.numdigit > 0) {
 10345              		.loc 1 2802 9 view .LVU3334
 10346 079e 1944     		add	r1, r1, r3
 10347 07a0 2722     		movs	r2, #39
 10348 07a2 20A8     		add	r0, sp, #128
 10349              	.LVL1172:
2802:src/display.c **** 	  if (State2.numdigit > 0) {
 10350              		.loc 1 2802 9 view .LVU3335
 10351 07a4 FFF7FEFF 		bl	scopy_char
 10352              	.LVL1173:
2803:src/display.c **** 	    *bp++ = (char) State2.digval;
 10353              		.loc 1 2803 7 view .LVU3336
 10354 07a8 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10355              	.LVL1174:
2803:src/display.c **** 	    *bp++ = (char) State2.digval;
 10356              		.loc 1 2803 4 is_stmt 1 view .LVU3337
2803:src/display.c **** 	    *bp++ = (char) State2.digval;
 10357              		.loc 1 2803 7 is_stmt 0 view .LVU3338
 10358 07aa 002B     		cmp	r3, #0
 10359 07ac 3FF4F3AD 		beq	.L917
2804:src/display.c **** 	    if (State2.numdigit > 1)
 10360              		.loc 1 2804 6 is_stmt 1 view .LVU3339
 10361              	.LVL1175:
2804:src/display.c **** 	    if (State2.numdigit > 1)
 10362              		.loc 1 2804 14 is_stmt 0 view .LVU3340
ARM GAS  /tmp/cc4E4VUn.s 			page 301


 10363 07b0 2389     		ldrh	r3, [r4, #8]
 10364 07b2 0370     		strb	r3, [r0]
2805:src/display.c **** 	      *bp++ = State2.digval2;
 10365              		.loc 1 2805 6 is_stmt 1 view .LVU3341
2805:src/display.c **** 	      *bp++ = State2.digval2;
 10366              		.loc 1 2805 9 is_stmt 0 view .LVU3342
 10367 07b4 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10368 07b6 012B     		cmp	r3, #1
2806:src/display.c **** 	  }
 10369              		.loc 1 2806 8 is_stmt 1 view .LVU3343
 10370              	.LVL1176:
2806:src/display.c **** 	  }
 10371              		.loc 1 2806 22 is_stmt 0 view .LVU3344
 10372 07b8 84BF     		itt	hi
 10373 07ba A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2806:src/display.c **** 	  }
 10374              		.loc 1 2806 14 view .LVU3345
 10375 07bc 4370     		strbhi	r3, [r0, #1]
 10376 07be EAE5     		b	.L917
 10377              	.LVL1177:
 10378              	.L911:
 10379              	.LBB614:
2799:src/display.c **** 	  }
 10380              		.loc 1 2799 6 is_stmt 1 view .LVU3346
 10381 07c0 20A8     		add	r0, sp, #128
 10382 07c2 FFF7FEFF 		bl	set_status
 10383              	.LVL1178:
 10384              	.LBE614:
2596:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10385              		.loc 1 2596 6 is_stmt 0 view .LVU3347
 10386 07c6 4546     		mov	r5, r8
 10387 07c8 AAE7     		b	.L913
 10388              	.LVL1179:
 10389              	.L1174:
 10390              	.LBB615:
2758:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10391              		.loc 1 2758 6 is_stmt 1 view .LVU3348
2758:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10392              		.loc 1 2758 9 is_stmt 0 view .LVU3349
 10393 07ca B5F5274F 		cmp	r5, #42752
 10394 07ce 5CD0     		beq	.L904
2758:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10395              		.loc 1 2758 41 discriminator 1 view .LVU3350
 10396 07d0 B5F5284F 		cmp	r5, #43008
 10397 07d4 59D0     		beq	.L904
2761:src/display.c **** 	    skip = 1;
 10398              		.loc 1 2761 8 is_stmt 1 view .LVU3351
2761:src/display.c **** 	    skip = 1;
 10399              		.loc 1 2761 14 is_stmt 0 view .LVU3352
 10400 07d6 0021     		movs	r1, #0
 10401 07d8 05F07F00 		and	r0, r5, #127
 10402 07dc FFF7FEFF 		bl	get_const
 10403              	.LVL1180:
2761:src/display.c **** 	    skip = 1;
 10404              		.loc 1 2761 8 view .LVU3353
 10405 07e0 0022     		movs	r2, #0
 10406 07e2 1146     		mov	r1, r2
ARM GAS  /tmp/cc4E4VUn.s 			page 302


 10407 07e4 FFF7FEFF 		bl	set_x
 10408              	.LVL1181:
2762:src/display.c **** 	  } else if (State2.runmode) {
 10409              		.loc 1 2762 11 view .LVU3354
 10410 07e8 0126     		movs	r6, #1
 10411 07ea 8CE7     		b	.L906
 10412              	.LVL1182:
 10413              	.L898:
2762:src/display.c **** 	  } else if (State2.runmode) {
 10414              		.loc 1 2762 11 view .LVU3355
 10415              	.LBE615:
2720:src/display.c **** 	    }
 10416              		.loc 1 2720 3 is_stmt 1 view .LVU3356
2720:src/display.c **** 	    }
 10417              		.loc 1 2720 8 is_stmt 0 view .LVU3357
 10418 07ec 2189     		ldrh	r1, [r4, #8]
 10419 07ee FFF7FEFF 		bl	num_arg_0
 10420              	.LVL1183:
2720:src/display.c **** 	    }
 10421              		.loc 1 2720 8 view .LVU3358
 10422 07f2 48E7     		b	.L897
 10423              	.LVL1184:
 10424              	.L1168:
2823:src/display.c **** 	  skip = 1;
 10425              		.loc 1 2823 4 is_stmt 1 view .LVU3359
 10426              	.LBB616:
 10427              	.LBI616:
2498:src/display.c **** 	char buf[16], *bp;
 10428              		.loc 1 2498 19 view .LVU3360
 10429              	.LBB617:
2499:src/display.c **** 	int n = State2.digval;
 10430              		.loc 1 2499 2 view .LVU3361
2500:src/display.c **** 	
 10431              		.loc 1 2500 2 view .LVU3362
2500:src/display.c **** 	
 10432              		.loc 1 2500 6 is_stmt 0 view .LVU3363
 10433 07f4 B4F808B0 		ldrh	fp, [r4, #8]
 10434              	.LVL1185:
2507:src/display.c **** 	  n;
 10435              		.loc 1 2507 2 is_stmt 1 view .LVU3364
2507:src/display.c **** 	  n;
 10436              		.loc 1 2507 54 is_stmt 0 view .LVU3365
 10437 07f8 CA07     		lsls	r2, r1, #31
 10438 07fa 4CBF     		ite	mi
 10439 07fc 0BF17008 		addmi	r8, fp, #112
2500:src/display.c **** 	
 10440              		.loc 1 2500 6 view .LVU3366
 10441 0800 D846     		movpl	r8, fp
 10442              	.LVL1186:
2511:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10443              		.loc 1 2511 2 is_stmt 1 view .LVU3367
2511:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10444              		.loc 1 2511 5 is_stmt 0 view .LVU3368
 10445 0802 11F00401 		ands	r1, r1, #4
 10446 0806 00F08381 		beq	.L942
2512:src/display.c **** 	}
 10447              		.loc 1 2512 4 is_stmt 1 view .LVU3369
ARM GAS  /tmp/cc4E4VUn.s 			page 303


2512:src/display.c **** 	}
 10448              		.loc 1 2512 15 is_stmt 0 view .LVU3370
 10449 080a 17A9     		add	r1, sp, #92
 10450 080c 4046     		mov	r0, r8
 10451 080e FFF7FEFF 		bl	alpha_rcl_s
 10452              	.LVL1187:
2512:src/display.c **** 	}
 10453              		.loc 1 2512 4 view .LVU3371
 10454 0812 FFF7FEFF 		bl	set_status
 10455              	.LVL1188:
 10456              	.L943:
2534:src/display.c ****       }
 10457              		.loc 1 2534 2 is_stmt 1 view .LVU3372
 10458 0816 4046     		mov	r0, r8
 10459 0818 0021     		movs	r1, #0
 10460 081a FFF7FEFF 		bl	format_reg
 10461              	.LVL1189:
2534:src/display.c ****       }
 10462              		.loc 1 2534 2 is_stmt 0 view .LVU3373
 10463              	.LBE617:
 10464              	.LBE616:
2824:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10465              		.loc 1 2824 4 is_stmt 1 view .LVU3374
2825:src/display.c **** 	    annunciators();
 10466              		.loc 1 2825 4 view .LVU3375
2825:src/display.c **** 	    annunciators();
 10467              		.loc 1 2825 7 is_stmt 0 view .LVU3376
 10468 081e 002E     		cmp	r6, #0
 10469 0820 40F07381 		bne	.L949
2825:src/display.c **** 	    annunciators();
 10470              		.loc 1 2825 25 discriminator 1 view .LVU3377
 10471 0824 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10472 0826 012B     		cmp	r3, #1
 10473 0828 00F06881 		beq	.L1177
 10474              	.L950:
2886:src/display.c ****       nostk:
 10475              		.loc 1 2886 2 is_stmt 1 view .LVU3378
 10476 082c FFF7FEFF 		bl	show_stack
 10477              	.LVL1190:
2888:src/display.c **** 	if (!skip) {
 10478              		.loc 1 2888 2 view .LVU3379
2596:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10479              		.loc 1 2596 6 is_stmt 0 view .LVU3380
 10480 0830 0025     		movs	r5, #0
2888:src/display.c **** 	if (!skip) {
 10481              		.loc 1 2888 2 view .LVU3381
 10482 0832 FFF7FEFF 		bl	show_flags
 10483              	.LVL1191:
2889:src/display.c **** 	  if (State2.runmode) {
 10484              		.loc 1 2889 2 is_stmt 1 view .LVU3382
 10485 0836 7AE7     		b	.L914
 10486              	.LVL1192:
 10487              	.L1167:
2820:src/display.c **** 	  skip = 1;
 10488              		.loc 1 2820 4 view .LVU3383
 10489              	.LBB620:
 10490              	.LBI620:
ARM GAS  /tmp/cc4E4VUn.s 			page 304


2467:src/display.c **** 	char buf[16];
 10491              		.loc 1 2467 19 view .LVU3384
 10492              	.LBB621:
2468:src/display.c **** 	unsigned short int pc = State2.digval;
 10493              		.loc 1 2468 2 view .LVU3385
2469:src/display.c **** 	unsigned int op = getprog(pc);
 10494              		.loc 1 2469 2 view .LVU3386
2469:src/display.c **** 	unsigned int op = getprog(pc);
 10495              		.loc 1 2469 21 is_stmt 0 view .LVU3387
 10496 0838 B4F808B0 		ldrh	fp, [r4, #8]
 10497              	.LVL1193:
2470:src/display.c **** 	int n = nLIB(pc);
 10498              		.loc 1 2470 2 is_stmt 1 view .LVU3388
2477:src/display.c **** #endif
 10499              		.loc 1 2477 41 is_stmt 0 view .LVU3389
 10500 083c DFF86491 		ldr	r9, .L1196+48
2470:src/display.c **** 	int n = nLIB(pc);
 10501              		.loc 1 2470 20 view .LVU3390
 10502 0840 5846     		mov	r0, fp
 10503 0842 FFF7FEFF 		bl	getprog
 10504              	.LVL1194:
2474:src/display.c **** 	set_digits_string(libname[n], 0);
 10505              		.loc 1 2474 2 view .LVU3391
 10506 0846 17A9     		add	r1, sp, #92
2470:src/display.c **** 	int n = nLIB(pc);
 10507              		.loc 1 2470 20 view .LVU3392
 10508 0848 8046     		mov	r8, r0
 10509              	.LVL1195:
2471:src/display.c **** 	unsigned short int lblpc;
 10510              		.loc 1 2471 2 is_stmt 1 view .LVU3393
2472:src/display.c **** 
 10511              		.loc 1 2472 2 view .LVU3394
2474:src/display.c **** 	set_digits_string(libname[n], 0);
 10512              		.loc 1 2474 2 view .LVU3395
 10513 084a FFF7FEFF 		bl	prt
 10514              	.LVL1196:
2474:src/display.c **** 	set_digits_string(libname[n], 0);
 10515              		.loc 1 2474 2 is_stmt 0 view .LVU3396
 10516 084e FFF7FEFF 		bl	set_status
 10517              	.LVL1197:
2475:src/display.c **** #ifndef REALBUILD
 10518              		.loc 1 2475 2 is_stmt 1 view .LVU3397
 10519 0852 4FEA9B36 		lsr	r6, fp, #14
 10520 0856 4E4B     		ldr	r3, .L1196+28
2475:src/display.c **** #ifndef REALBUILD
 10521              		.loc 1 2475 27 is_stmt 0 view .LVU3398
 10522 0858 06EB8606 		add	r6, r6, r6, lsl #2
2475:src/display.c **** #ifndef REALBUILD
 10523              		.loc 1 2475 2 view .LVU3399
 10524 085c 9819     		adds	r0, r3, r6
 10525 085e 3946     		mov	r1, r7
 10526 0860 FFF7FEFF 		bl	set_digits_string
 10527              	.LVL1198:
2477:src/display.c **** #endif
 10528              		.loc 1 2477 2 is_stmt 1 view .LVU3400
 10529 0864 4B48     		ldr	r0, .L1196+32
 10530 0866 09EB4601 		add	r1, r9, r6, lsl #1
ARM GAS  /tmp/cc4E4VUn.s 			page 305


 10531 086a FFF7FEFF 		bl	scopy
 10532              	.LVL1199:
2480:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10533              		.loc 1 2480 2 view .LVU3401
2480:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10534              		.loc 1 2480 5 is_stmt 0 view .LVU3402
 10535 086e 18F4704F 		tst	r8, #61440
 10536 0872 40F0A181 		bne	.L1178
 10537              	.LVL1200:
 10538              	.L1151:
2480:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10539              		.loc 1 2480 5 view .LVU3403
 10540              	.LBE621:
 10541              	.LBE620:
2886:src/display.c ****       nostk:
 10542              		.loc 1 2886 2 is_stmt 1 view .LVU3404
 10543 0876 FFF7FEFF 		bl	show_stack
 10544              	.LVL1201:
2888:src/display.c **** 	if (!skip) {
 10545              		.loc 1 2888 2 view .LVU3405
 10546 087a FFF7FEFF 		bl	show_flags
 10547              	.LVL1202:
2889:src/display.c **** 	  if (State2.runmode) {
 10548              		.loc 1 2889 2 view .LVU3406
 10549 087e 56E7     		b	.L914
 10550              	.LVL1203:
 10551              	.L1171:
 10552              	.LBB624:
 10553              	.LBB587:
 10554              	.LBB580:
1299:src/display.c **** 	      p++;
 10555              		.loc 1 1299 8 view .LVU3407
1300:src/display.c **** 	      if (!double_dot)
 10556              		.loc 1 1300 8 view .LVU3408
1300:src/display.c **** 	      if (!double_dot)
 10557              		.loc 1 1300 9 is_stmt 0 view .LVU3409
 10558 0880 09F10109 		add	r9, r9, #1
 10559              	.LVL1204:
1301:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10560              		.loc 1 1301 8 is_stmt 1 view .LVU3410
1302:src/display.c **** 	    }
 10561              		.loc 1 1302 3 view .LVU3411
1302:src/display.c **** 	    }
 10562              		.loc 1 1302 5 is_stmt 0 view .LVU3412
 10563 0884 4FF01208 		mov	r8, #18
 10564 0888 72E7     		b	.L986
 10565              	.LVL1205:
 10566              	.L904:
1302:src/display.c **** 	    }
 10567              		.loc 1 1302 5 view .LVU3413
 10568              	.LBE580:
 10569              	.LBE587:
 10570              	.LBE624:
 10571              	.LBB625:
2759:src/display.c **** 	    else
 10572              		.loc 1 2759 8 is_stmt 1 view .LVU3414
 10573 088a 4348     		ldr	r0, .L1196+36
ARM GAS  /tmp/cc4E4VUn.s 			page 306


 10574 088c 0021     		movs	r1, #0
 10575 088e FFF7FEFF 		bl	set_digits_string
 10576              	.LVL1206:
2762:src/display.c **** 	  } else if (State2.runmode) {
 10577              		.loc 1 2762 11 is_stmt 0 view .LVU3415
 10578 0892 0126     		movs	r6, #1
2759:src/display.c **** 	    else
 10579              		.loc 1 2759 8 view .LVU3416
 10580 0894 37E7     		b	.L906
 10581              	.LVL1207:
 10582              	.L1166:
2759:src/display.c **** 	    else
 10583              		.loc 1 2759 8 view .LVU3417
 10584              	.LBE625:
2817:src/display.c **** 	  skip = 1;
 10585              		.loc 1 2817 4 is_stmt 1 view .LVU3418
 10586              	.LBB626:
 10587              	.LBI626:
2365:src/display.c **** 	int i, n;
 10588              		.loc 1 2365 19 view .LVU3419
 10589              	.LBB627:
2366:src/display.c **** 	int j = SEGS_EXP_BASE;
 10590              		.loc 1 2366 2 view .LVU3420
2367:src/display.c **** 	const int status = State2.status - 3;
 10591              		.loc 1 2367 2 view .LVU3421
2368:src/display.c **** 	char buf[16], *p = buf;
 10592              		.loc 1 2368 2 view .LVU3422
2372:src/display.c **** 	  set_status("Free:");
 10593              		.loc 1 2372 5 is_stmt 0 view .LVU3423
 10594 0896 012F     		cmp	r7, #1
2368:src/display.c **** 	char buf[16], *p = buf;
 10595              		.loc 1 2368 12 view .LVU3424
 10596 0898 A7F10303 		sub	r3, r7, #3
 10597              	.LVL1208:
2369:src/display.c **** 	unsigned int pc;
 10598              		.loc 1 2369 2 is_stmt 1 view .LVU3425
2370:src/display.c **** 
 10599              		.loc 1 2370 2 view .LVU3426
2372:src/display.c **** 	  set_status("Free:");
 10600              		.loc 1 2372 2 view .LVU3427
2372:src/display.c **** 	  set_status("Free:");
 10601              		.loc 1 2372 5 is_stmt 0 view .LVU3428
 10602 089c 00F01481 		beq	.L1179
2380:src/display.c **** 	  /* Top line */
 10603              		.loc 1 2380 7 is_stmt 1 view .LVU3429
2380:src/display.c **** 	  /* Top line */
 10604              		.loc 1 2380 10 is_stmt 0 view .LVU3430
 10605 08a0 591C     		adds	r1, r3, #1
 10606 08a2 00F0EF80 		beq	.L1180
 10607              	.LBB628:
2397:src/display.c **** 	  int end;
 10608              		.loc 1 2397 4 is_stmt 1 view .LVU3431
2398:src/display.c **** 	  int group = 10;
 10609              		.loc 1 2398 4 view .LVU3432
2399:src/display.c **** 	  int start = 0;
 10610              		.loc 1 2399 4 view .LVU3433
 10611              	.LVL1209:
ARM GAS  /tmp/cc4E4VUn.s 			page 307


2400:src/display.c **** 		
 10612              		.loc 1 2400 4 view .LVU3434
2402:src/display.c **** 	    base = 10 * status;
 10613              		.loc 1 2402 4 view .LVU3435
2402:src/display.c **** 	    base = 10 * status;
 10614              		.loc 1 2402 7 is_stmt 0 view .LVU3436
 10615 08a6 092B     		cmp	r3, #9
 10616 08a8 40F3C880 		ble	.L1181
2412:src/display.c **** 	    base = regX_idx;
 10617              		.loc 1 2412 9 is_stmt 1 view .LVU3437
2412:src/display.c **** 	    base = regX_idx;
 10618              		.loc 1 2412 12 is_stmt 0 view .LVU3438
 10619 08ac 0A2B     		cmp	r3, #10
 10620 08ae 00F0BB80 		beq	.L1182
2420:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10621              		.loc 1 2420 6 is_stmt 1 view .LVU3439
 10622              	.LVL1210:
2421:src/display.c **** 	    set_status("FL.00-.15");
 10623              		.loc 1 2421 6 view .LVU3440
2422:src/display.c **** 	  }
 10624              		.loc 1 2422 6 view .LVU3441
 10625 08b2 3A48     		ldr	r0, .L1196+40
 10626 08b4 FFF7FEFF 		bl	set_status
 10627              	.LVL1211:
2400:src/display.c **** 		
 10628              		.loc 1 2400 8 is_stmt 0 view .LVU3442
 10629 08b8 4FF0000B 		mov	fp, #0
 10630              	.LVL1212:
2399:src/display.c **** 	  int start = 0;
 10631              		.loc 1 2399 8 view .LVU3443
 10632 08bc 0A23     		movs	r3, #10
2421:src/display.c **** 	    set_status("FL.00-.15");
 10633              		.loc 1 2421 10 view .LVU3444
 10634 08be 4FF07F08 		mov	r8, #127
2420:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10635              		.loc 1 2420 11 view .LVU3445
 10636 08c2 7027     		movs	r7, #112
 10637              	.LVL1213:
 10638              	.L926:
2424:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10639              		.loc 1 2424 4 is_stmt 1 view .LVU3446
2424:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10640              		.loc 1 2424 6 is_stmt 0 view .LVU3447
 10641 08c4 0BEBCB06 		add	r6, fp, fp, lsl #3
 10642              	.LVL1214:
2425:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10643              		.loc 1 2425 4 is_stmt 1 view .LVU3448
 10644              	.LBB629:
 10645              	.LBI629:
 349:src/display.c ****   if (res) {
 10646              		.loc 1 349 14 view .LVU3449
 10647              	.LBB630:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10648              		.loc 1 350 3 view .LVU3450
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10649              		.loc 1 353 5 view .LVU3451
 10650 08c8 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc4E4VUn.s 			page 308


 10651              	.LVL1215:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10652              		.loc 1 353 5 is_stmt 0 view .LVU3452
 10653 08ca F01D     		adds	r0, r6, #7
 10654              	.LBB631:
 10655              	.LBB632:
 357:src/display.c **** #endif
 10656              		.loc 1 357 35 view .LVU3453
 10657 08cc 0BF10103 		add	r3, fp, #1
 10658 08d0 0293     		str	r3, [sp, #8]
 10659              	.LBE632:
 10660              	.LBE631:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10661              		.loc 1 353 5 view .LVU3454
 10662 08d2 FFF7FEFF 		bl	set_dot
 10663              	.LVL1216:
 354:src/display.c ****       set_dot(posn+8);
 10664              		.loc 1 354 5 is_stmt 1 view .LVU3455
 10665              	.LBB634:
 10666              	.LBI631:
 349:src/display.c ****   if (res) {
 10667              		.loc 1 349 14 view .LVU3456
 10668              	.LBB633:
 357:src/display.c **** #endif
 10669              		.loc 1 357 5 view .LVU3457
 357:src/display.c **** #endif
 10670              		.loc 1 357 38 is_stmt 0 view .LVU3458
 10671 08d6 2F49     		ldr	r1, .L1196+32
 10672 08d8 029B     		ldr	r3, [sp, #8]
 10673 08da 2E22     		movs	r2, #46
 10674 08dc 01F81320 		strb	r2, [r1, r3, lsl #1]
 360:src/display.c **** }
 10675              		.loc 1 360 3 is_stmt 1 view .LVU3459
 10676              	.LVL1217:
 360:src/display.c **** }
 10677              		.loc 1 360 3 is_stmt 0 view .LVU3460
 10678              	.LBE633:
 10679              	.LBE634:
 360:src/display.c **** }
 10680              		.loc 1 360 3 is_stmt 1 view .LVU3461
 360:src/display.c **** }
 10681              		.loc 1 360 3 is_stmt 0 view .LVU3462
 10682              	.LBE630:
 10683              	.LBE629:
2426:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10684              		.loc 1 2426 4 is_stmt 1 view .LVU3463
 10685 08e0 019B     		ldr	r3, [sp, #4]
 10686              	.LBB635:
 10687              	.LBB636:
 10688              	.LBB637:
 10689              	.LBB638:
 10690              	.LBB639:
 357:src/display.c **** #endif
 10691              		.loc 1 357 38 is_stmt 0 view .LVU3464
 10692 08e2 0392     		str	r2, [sp, #12]
 10693 08e4 CBEB4301 		rsb	r1, fp, r3, lsl #1
 10694 08e8 CA19     		adds	r2, r1, r7
ARM GAS  /tmp/cc4E4VUn.s 			page 309


 10695 08ea 0592     		str	r2, [sp, #20]
 10696              	.LBE639:
 10697              	.LBE638:
 10698              	.LBE637:
 10699              	.LBE636:
 10700              	.LBE635:
2427:src/display.c **** 	    int k = i + base - start;
 10701              		.loc 1 2427 30 view .LVU3465
 10702 08ec 0BEB0302 		add	r2, fp, r3
 10703 08f0 FB18     		adds	r3, r7, r3
 10704 08f2 0193     		str	r3, [sp, #4]
 10705 08f4 A7EB0B03 		sub	r3, r7, fp
 10706 08f8 CDE90635 		strd	r3, r5, [sp, #24]
2426:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10707              		.loc 1 2426 6 view .LVU3466
 10708 08fc 0936     		adds	r6, r6, #9
 10709              	.LVL1218:
2427:src/display.c **** 	    int k = i + base - start;
 10710              		.loc 1 2427 4 is_stmt 1 view .LVU3467
2427:src/display.c **** 	    int k = i + base - start;
 10711              		.loc 1 2427 20 view .LVU3468
2427:src/display.c **** 	    int k = i + base - start;
 10712              		.loc 1 2427 30 is_stmt 0 view .LVU3469
 10713 08fe 0492     		str	r2, [sp, #16]
 10714 0900 1DE0     		b	.L930
 10715              	.LVL1219:
 10716              	.L928:
 10717              	.LBB656:
2437:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10718              		.loc 1 2437 6 is_stmt 1 view .LVU3470
 10719 0902 2946     		mov	r1, r5
 10720 0904 3046     		mov	r0, r6
 10721 0906 FFF7FEFF 		bl	set_dig
 10722              	.LVL1220:
2438:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10723              		.loc 1 2438 6 view .LVU3471
 10724              	.LBB646:
 10725              	.LBI636:
 349:src/display.c ****   if (res) {
 10726              		.loc 1 349 14 view .LVU3472
 10727              	.LBB644:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10728              		.loc 1 350 3 view .LVU3473
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10729              		.loc 1 353 5 view .LVU3474
 10730 090a F01D     		adds	r0, r6, #7
 10731 090c FFF7FEFF 		bl	set_dot
 10732              	.LVL1221:
 354:src/display.c ****       set_dot(posn+8);
 10733              		.loc 1 354 5 view .LVU3475
 10734              	.LBB642:
 10735              	.LBI638:
 349:src/display.c ****   if (res) {
 10736              		.loc 1 349 14 view .LVU3476
 10737              	.LBB640:
 357:src/display.c **** #endif
 10738              		.loc 1 357 5 view .LVU3477
ARM GAS  /tmp/cc4E4VUn.s 			page 310


 357:src/display.c **** #endif
 10739              		.loc 1 357 30 is_stmt 0 view .LVU3478
 10740 0910 234B     		ldr	r3, .L1196+44
 357:src/display.c **** #endif
 10741              		.loc 1 357 38 view .LVU3479
 10742 0912 0399     		ldr	r1, [sp, #12]
 357:src/display.c **** #endif
 10743              		.loc 1 357 30 view .LVU3480
 10744 0914 A3FB0623 		umull	r2, r3, r3, r6
 10745 0918 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10746              		.loc 1 357 38 view .LVU3481
 10747 091a 1E4A     		ldr	r2, .L1196+32
 357:src/display.c **** #endif
 10748              		.loc 1 357 35 view .LVU3482
 10749 091c 0133     		adds	r3, r3, #1
 10750              	.LBE640:
 10751              	.LBE642:
 10752              	.LBE644:
 10753              	.LBE646:
2440:src/display.c **** 	      set_dig(j, 8);
 10754              		.loc 1 2440 9 view .LVU3483
 10755 091e BBF1040F 		cmp	fp, #4
 10756              	.LBB647:
 10757              	.LBB645:
 10758              	.LBB643:
 10759              	.LBB641:
 357:src/display.c **** #endif
 10760              		.loc 1 357 38 view .LVU3484
 10761 0922 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 10762              		.loc 1 360 3 is_stmt 1 view .LVU3485
 10763              	.LVL1222:
 360:src/display.c **** }
 10764              		.loc 1 360 3 is_stmt 0 view .LVU3486
 10765              	.LBE641:
 10766              	.LBE643:
 360:src/display.c **** }
 10767              		.loc 1 360 3 is_stmt 1 view .LVU3487
 360:src/display.c **** }
 10768              		.loc 1 360 3 is_stmt 0 view .LVU3488
 10769              	.LBE645:
 10770              	.LBE647:
2439:src/display.c **** 	    if (i == 4) {
 10771              		.loc 1 2439 6 is_stmt 1 view .LVU3489
2440:src/display.c **** 	      set_dig(j, 8);
 10772              		.loc 1 2440 6 view .LVU3490
2440:src/display.c **** 	      set_dig(j, 8);
 10773              		.loc 1 2440 9 is_stmt 0 view .LVU3491
 10774 0926 6CD0     		beq	.L1183
2439:src/display.c **** 	    if (i == 4) {
 10775              		.loc 1 2439 8 view .LVU3492
 10776 0928 3E46     		mov	r6, r7
 10777              	.LVL1223:
 10778              	.L929:
2439:src/display.c **** 	    if (i == 4) {
 10779              		.loc 1 2439 8 view .LVU3493
ARM GAS  /tmp/cc4E4VUn.s 			page 311


 10780              	.LBE656:
2427:src/display.c **** 	    int k = i + base - start;
 10781              		.loc 1 2427 39 is_stmt 1 view .LVU3494
 10782 092a 019B     		ldr	r3, [sp, #4]
2427:src/display.c **** 	    int k = i + base - start;
 10783              		.loc 1 2427 4 is_stmt 0 view .LVU3495
 10784 092c 0499     		ldr	r1, [sp, #16]
 10785 092e 0133     		adds	r3, r3, #1
 10786 0930 0193     		str	r3, [sp, #4]
2427:src/display.c **** 	    int k = i + base - start;
 10787              		.loc 1 2427 40 view .LVU3496
 10788 0932 029B     		ldr	r3, [sp, #8]
2427:src/display.c **** 	    int k = i + base - start;
 10789              		.loc 1 2427 4 view .LVU3497
 10790 0934 8B42     		cmp	r3, r1
2427:src/display.c **** 	    int k = i + base - start;
 10791              		.loc 1 2427 40 view .LVU3498
 10792 0936 9B46     		mov	fp, r3
 10793              	.LVL1224:
2427:src/display.c **** 	    int k = i + base - start;
 10794              		.loc 1 2427 20 is_stmt 1 view .LVU3499
2427:src/display.c **** 	    int k = i + base - start;
 10795              		.loc 1 2427 4 is_stmt 0 view .LVU3500
 10796 0938 36D0     		beq	.L1136
2427:src/display.c **** 	    int k = i + base - start;
 10797              		.loc 1 2427 4 view .LVU3501
 10798 093a 0133     		adds	r3, r3, #1
 10799              	.LVL1225:
2427:src/display.c **** 	    int k = i + base - start;
 10800              		.loc 1 2427 4 view .LVU3502
 10801 093c 0293     		str	r3, [sp, #8]
 10802              	.LVL1226:
 10803              	.L930:
 10804              	.LBB657:
2428:src/display.c **** 	    int l = get_user_flag(k);
 10805              		.loc 1 2428 6 is_stmt 1 view .LVU3503
2429:src/display.c **** 	    k += group;
 10806              		.loc 1 2429 6 view .LVU3504
2429:src/display.c **** 	    k += group;
 10807              		.loc 1 2429 14 is_stmt 0 view .LVU3505
 10808 093e 069B     		ldr	r3, [sp, #24]
 10809 0940 03EB0B00 		add	r0, r3, fp
 10810 0944 FFF7FEFF 		bl	get_user_flag
 10811              	.LVL1227:
2431:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10812              		.loc 1 2431 9 view .LVU3506
 10813 0948 019B     		ldr	r3, [sp, #4]
 10814 094a 4345     		cmp	r3, r8
2429:src/display.c **** 	    k += group;
 10815              		.loc 1 2429 14 view .LVU3507
 10816 094c 0546     		mov	r5, r0
 10817              	.LVL1228:
2430:src/display.c **** 	    if (end >= k) {
 10818              		.loc 1 2430 6 is_stmt 1 view .LVU3508
2431:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10819              		.loc 1 2431 6 view .LVU3509
2439:src/display.c **** 	    if (i == 4) {
ARM GAS  /tmp/cc4E4VUn.s 			page 312


 10820              		.loc 1 2439 8 is_stmt 0 view .LVU3510
 10821 094e 06F10907 		add	r7, r6, #9
2431:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10822              		.loc 1 2431 9 view .LVU3511
 10823 0952 D6DC     		bgt	.L928
2432:src/display.c **** 	      k += group;
 10824              		.loc 1 2432 8 is_stmt 1 view .LVU3512
2432:src/display.c **** 	      k += group;
 10825              		.loc 1 2432 14 is_stmt 0 view .LVU3513
 10826 0954 1846     		mov	r0, r3
 10827              	.LVL1229:
2432:src/display.c **** 	      k += group;
 10828              		.loc 1 2432 14 view .LVU3514
 10829 0956 FFF7FEFF 		bl	get_user_flag
 10830              	.LVL1230:
2432:src/display.c **** 	      k += group;
 10831              		.loc 1 2432 14 view .LVU3515
 10832 095a 059B     		ldr	r3, [sp, #20]
 10833 095c 5B44     		add	r3, r3, fp
2434:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10834              		.loc 1 2434 11 view .LVU3516
 10835 095e 9845     		cmp	r8, r3
2432:src/display.c **** 	      k += group;
 10836              		.loc 1 2432 10 view .LVU3517
 10837 0960 45EA4005 		orr	r5, r5, r0, lsl #1
 10838              	.LVL1231:
2433:src/display.c **** 	      if (end >= k)
 10839              		.loc 1 2433 8 is_stmt 1 view .LVU3518
2434:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10840              		.loc 1 2434 8 view .LVU3519
2434:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10841              		.loc 1 2434 11 is_stmt 0 view .LVU3520
 10842 0964 CDDB     		blt	.L928
2435:src/display.c **** 	    }
 10843              		.loc 1 2435 3 is_stmt 1 view .LVU3521
2435:src/display.c **** 	    }
 10844              		.loc 1 2435 9 is_stmt 0 view .LVU3522
 10845 0966 1846     		mov	r0, r3
 10846 0968 FFF7FEFF 		bl	get_user_flag
 10847              	.LVL1232:
2435:src/display.c **** 	    }
 10848              		.loc 1 2435 5 view .LVU3523
 10849 096c 45EA8005 		orr	r5, r5, r0, lsl #2
 10850              	.LVL1233:
2435:src/display.c **** 	    }
 10851              		.loc 1 2435 5 view .LVU3524
 10852 0970 C7E7     		b	.L928
 10853              	.L1197:
 10854 0972 00BF     		.align	2
 10855              	.L1196:
 10856 0974 BC000000 		.word	.LC25
 10857 0978 3C000000 		.word	.LC27
 10858 097c 00000000 		.word	DispPlot
 10859 0980 00000000 		.word	DispMsg
 10860 0984 00000000 		.word	ShowRegister
 10861 0988 00000000 		.word	WasDataEntry
 10862 098c 00000000 		.word	multicmds
ARM GAS  /tmp/cc4E4VUn.s 			page 313


 10863 0990 00000000 		.word	.LANCHOR22
 10864 0994 00000000 		.word	LastDisplayedNumber
 10865 0998 40000000 		.word	.LC28
 10866 099c 8C000000 		.word	.LC36
 10867 09a0 398EE338 		.word	954437177
 10868 09a4 00000000 		.word	.LANCHOR23
 10869              	.LVL1234:
 10870              	.L1136:
2435:src/display.c **** 	    }
 10871              		.loc 1 2435 5 view .LVU3525
 10872 09a8 079D     		ldr	r5, [sp, #28]
 10873              	.LVL1235:
 10874              	.L921:
2435:src/display.c **** 	    }
 10875              		.loc 1 2435 5 view .LVU3526
 10876              	.LBE657:
 10877              	.LBE628:
2448:src/display.c **** 	pc = state_pc();
 10878              		.loc 1 2448 2 is_stmt 1 view .LVU3527
2449:src/display.c **** 	if (isXROM(pc))
 10879              		.loc 1 2449 2 view .LVU3528
2449:src/display.c **** 	if (isXROM(pc))
 10880              		.loc 1 2449 7 is_stmt 0 view .LVU3529
 10881 09aa D9F80030 		ldr	r3, [r9]
2449:src/display.c **** 	if (isXROM(pc))
 10882              		.loc 1 2449 5 view .LVU3530
 10883 09ae B3F8E077 		ldrh	r7, [r3, #2016]
 10884              	.LVL1236:
2450:src/display.c **** 	  pc = 1;
 10885              		.loc 1 2450 2 is_stmt 1 view .LVU3531
2450:src/display.c **** 	  pc = 1;
 10886              		.loc 1 2450 6 is_stmt 0 view .LVU3532
 10887 09b2 BB0B     		lsrs	r3, r7, #14
2451:src/display.c **** 	for (n=i=0; i<4; i++) {
 10888              		.loc 1 2451 7 view .LVU3533
 10889 09b4 032B     		cmp	r3, #3
 10890 09b6 08BF     		it	eq
 10891 09b8 0127     		moveq	r7, #1
 10892              	.LVL1237:
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10893              		.loc 1 2452 2 is_stmt 1 view .LVU3534
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10894              		.loc 1 2452 14 view .LVU3535
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10895              		.loc 1 2452 8 is_stmt 0 view .LVU3536
 10896 09ba 4FF00009 		mov	r9, #0
 10897 09be 6426     		movs	r6, #100
2448:src/display.c **** 	pc = state_pc();
 10898              		.loc 1 2448 4 view .LVU3537
 10899 09c0 4FF06C08 		mov	r8, #108
 10900              	.LVL1238:
 10901              	.L934:
2453:src/display.c **** 	    if (++n == 4) {
 10902              		.loc 1 2453 4 is_stmt 1 view .LVU3538
2453:src/display.c **** 	    if (++n == 4) {
 10903              		.loc 1 2453 8 is_stmt 0 view .LVU3539
 10904 09c4 0222     		movs	r2, #2
ARM GAS  /tmp/cc4E4VUn.s 			page 314


 10905 09c6 3146     		mov	r1, r6
 10906 09c8 3846     		mov	r0, r7
 10907 09ca FFF7FEFF 		bl	find_label_from
 10908              	.LVL1239:
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10909              		.loc 1 2454 6 is_stmt 1 view .LVU3540
2453:src/display.c **** 	    if (++n == 4) {
 10910              		.loc 1 2453 7 is_stmt 0 view .LVU3541
 10911 09ce 58B1     		cbz	r0, .L932
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10912              		.loc 1 2454 9 view .LVU3542
 10913 09d0 09F10109 		add	r9, r9, #1
 10914              	.LVL1240:
2458:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10915              		.loc 1 2458 8 is_stmt 1 view .LVU3543
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10916              		.loc 1 2454 9 is_stmt 0 view .LVU3544
 10917 09d4 B9F1040F 		cmp	r9, #4
2458:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10918              		.loc 1 2458 8 view .LVU3545
 10919 09d8 A6F12301 		sub	r1, r6, #35
 10920 09dc 4046     		mov	r0, r8
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10921              		.loc 1 2454 9 view .LVU3546
 10922 09de 07D0     		beq	.L1184
2458:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10923              		.loc 1 2458 8 view .LVU3547
 10924 09e0 FFF7FEFF 		bl	set_dig
 10925              	.LVL1241:
2459:src/display.c **** 	    }
 10926              		.loc 1 2459 8 is_stmt 1 view .LVU3548
2459:src/display.c **** 	    }
 10927              		.loc 1 2459 10 is_stmt 0 view .LVU3549
 10928 09e4 08F10708 		add	r8, r8, #7
 10929              	.LVL1242:
 10930              	.L932:
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10931              		.loc 1 2452 19 is_stmt 1 view .LVU3550
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10932              		.loc 1 2452 14 view .LVU3551
 10933 09e8 0136     		adds	r6, r6, #1
 10934              	.LVL1243:
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10935              		.loc 1 2452 2 is_stmt 0 view .LVU3552
 10936 09ea 682E     		cmp	r6, #104
 10937 09ec EAD1     		bne	.L934
2452:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10938              		.loc 1 2452 2 view .LVU3553
 10939 09ee 42E7     		b	.L1151
 10940              	.LVL1244:
 10941              	.L1184:
2455:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10942              		.loc 1 2455 8 is_stmt 1 view .LVU3554
 10943 09f0 4C21     		movs	r1, #76
 10944 09f2 7320     		movs	r0, #115
 10945              	.LVL1245:
2455:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
ARM GAS  /tmp/cc4E4VUn.s 			page 315


 10946              		.loc 1 2455 8 is_stmt 0 view .LVU3555
 10947 09f4 FFF7FEFF 		bl	set_dig
 10948              	.LVL1246:
2456:src/display.c **** 	    } else {
 10949              		.loc 1 2456 8 is_stmt 1 view .LVU3556
 10950 09f8 4C21     		movs	r1, #76
 10951 09fa 7A20     		movs	r0, #122
 10952 09fc FFF7FEFF 		bl	set_dig
 10953              	.LVL1247:
 10954 0a00 F2E7     		b	.L932
 10955              	.LVL1248:
 10956              	.L1183:
 10957              	.LBB659:
 10958              	.LBB658:
2441:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10959              		.loc 1 2441 8 view .LVU3557
 10960 0a02 0821     		movs	r1, #8
 10961 0a04 3846     		mov	r0, r7
 10962 0a06 FFF7FEFF 		bl	set_dig
 10963              	.LVL1249:
2442:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10964              		.loc 1 2442 8 view .LVU3558
 10965              	.LBB648:
 10966              	.LBI648:
 349:src/display.c ****   if (res) {
 10967              		.loc 1 349 14 view .LVU3559
 10968              	.LBB649:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10969              		.loc 1 350 3 view .LVU3560
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10970              		.loc 1 353 5 view .LVU3561
 10971 0a0a 06F11000 		add	r0, r6, #16
 10972 0a0e FFF7FEFF 		bl	set_dot
 10973              	.LVL1250:
 354:src/display.c ****       set_dot(posn+8);
 10974              		.loc 1 354 5 view .LVU3562
 10975              	.LBB650:
 10976              	.LBI650:
 349:src/display.c ****   if (res) {
 10977              		.loc 1 349 14 view .LVU3563
 10978              	.LBB651:
 357:src/display.c **** #endif
 10979              		.loc 1 357 5 view .LVU3564
 357:src/display.c **** #endif
 10980              		.loc 1 357 30 is_stmt 0 view .LVU3565
 10981 0a12 C04B     		ldr	r3, .L1198
 357:src/display.c **** #endif
 10982              		.loc 1 357 38 view .LVU3566
 10983 0a14 0399     		ldr	r1, [sp, #12]
 357:src/display.c **** #endif
 10984              		.loc 1 357 30 view .LVU3567
 10985 0a16 A3FB0723 		umull	r2, r3, r3, r7
 10986 0a1a 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10987              		.loc 1 357 38 view .LVU3568
 10988 0a1c BE4A     		ldr	r2, .L1198+4
 357:src/display.c **** #endif
ARM GAS  /tmp/cc4E4VUn.s 			page 316


 10989              		.loc 1 357 35 view .LVU3569
 10990 0a1e 0133     		adds	r3, r3, #1
 10991              	.LBE651:
 10992              	.LBE650:
 10993              	.LBE649:
 10994              	.LBE648:
2443:src/display.c **** 	    }
 10995              		.loc 1 2443 10 view .LVU3570
 10996 0a20 1236     		adds	r6, r6, #18
 10997              	.LBB655:
 10998              	.LBB654:
 10999              	.LBB653:
 11000              	.LBB652:
 357:src/display.c **** #endif
 11001              		.loc 1 357 38 view .LVU3571
 11002 0a22 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 11003              		.loc 1 360 3 is_stmt 1 view .LVU3572
 11004              	.LVL1251:
 360:src/display.c **** }
 11005              		.loc 1 360 3 is_stmt 0 view .LVU3573
 11006              	.LBE652:
 11007              	.LBE653:
 360:src/display.c **** }
 11008              		.loc 1 360 3 is_stmt 1 view .LVU3574
 360:src/display.c **** }
 11009              		.loc 1 360 3 is_stmt 0 view .LVU3575
 11010              	.LBE654:
 11011              	.LBE655:
2443:src/display.c **** 	    }
 11012              		.loc 1 2443 8 is_stmt 1 view .LVU3576
2443:src/display.c **** 	    }
 11013              		.loc 1 2443 8 is_stmt 0 view .LVU3577
 11014 0a26 80E7     		b	.L929
 11015              	.LVL1252:
 11016              	.L1182:
2443:src/display.c **** 	    }
 11017              		.loc 1 2443 8 view .LVU3578
 11018              	.LBE658:
2413:src/display.c **** 	    end = regK_idx;
 11019              		.loc 1 2413 6 is_stmt 1 view .LVU3579
2414:src/display.c **** 	    start = 3;
 11020              		.loc 1 2414 6 view .LVU3580
2415:src/display.c **** 	    group = 4;
 11021              		.loc 1 2415 6 view .LVU3581
2416:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11022              		.loc 1 2416 6 view .LVU3582
2417:src/display.c **** 	  }
 11023              		.loc 1 2417 6 view .LVU3583
 11024 0a28 BC48     		ldr	r0, .L1198+8
 11025 0a2a FFF7FEFF 		bl	set_status
 11026              	.LVL1253:
2415:src/display.c **** 	    group = 4;
 11027              		.loc 1 2415 12 is_stmt 0 view .LVU3584
 11028 0a2e 4FF0030B 		mov	fp, #3
 11029              	.LVL1254:
2416:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
ARM GAS  /tmp/cc4E4VUn.s 			page 317


 11030              		.loc 1 2416 12 view .LVU3585
 11031 0a32 0423     		movs	r3, #4
2414:src/display.c **** 	    start = 3;
 11032              		.loc 1 2414 10 view .LVU3586
 11033 0a34 4FF06F08 		mov	r8, #111
2413:src/display.c **** 	    end = regK_idx;
 11034              		.loc 1 2413 11 view .LVU3587
 11035 0a38 6427     		movs	r7, #100
 11036              	.LVL1255:
2413:src/display.c **** 	    end = regK_idx;
 11037              		.loc 1 2413 11 view .LVU3588
 11038 0a3a 43E7     		b	.L926
 11039              	.LVL1256:
 11040              	.L1181:
2403:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11041              		.loc 1 2403 6 is_stmt 1 view .LVU3589
2403:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11042              		.loc 1 2403 11 is_stmt 0 view .LVU3590
 11043 0a3c 0A26     		movs	r6, #10
 11044 0a3e 06FB03F7 		mul	r7, r6, r3
 11045              	.LVL1257:
2404:src/display.c **** 	    p = scopy(buf, "FL ");
 11046              		.loc 1 2404 6 is_stmt 1 view .LVU3591
2404:src/display.c **** 	    p = scopy(buf, "FL ");
 11047              		.loc 1 2404 28 is_stmt 0 view .LVU3592
 11048 0a42 462F     		cmp	r7, #70
2405:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11049              		.loc 1 2405 10 view .LVU3593
 11050 0a44 B649     		ldr	r1, .L1198+12
 11051 0a46 17A8     		add	r0, sp, #92
 11052              	.LVL1258:
2404:src/display.c **** 	    p = scopy(buf, "FL ");
 11053              		.loc 1 2404 28 view .LVU3594
 11054 0a48 B846     		mov	r8, r7
 11055 0a4a A8BF     		it	ge
 11056 0a4c 4FF04608 		movge	r8, #70
2405:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11057              		.loc 1 2405 10 view .LVU3595
 11058 0a50 FFF7FEFF 		bl	scopy
 11059              	.LVL1259:
2406:src/display.c **** 	    *p++ = '-';
 11060              		.loc 1 2406 10 view .LVU3596
 11061 0a54 3946     		mov	r1, r7
 11062 0a56 0222     		movs	r2, #2
 11063 0a58 FFF7FEFF 		bl	num_arg_0
 11064              	.LVL1260:
2404:src/display.c **** 	    p = scopy(buf, "FL ");
 11065              		.loc 1 2404 10 view .LVU3597
 11066 0a5c 08F11D08 		add	r8, r8, #29
 11067              	.LVL1261:
2405:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11068              		.loc 1 2405 6 is_stmt 1 view .LVU3598
2406:src/display.c **** 	    *p++ = '-';
 11069              		.loc 1 2406 6 view .LVU3599
2407:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11070              		.loc 1 2407 6 view .LVU3600
2407:src/display.c **** 	    p = num_arg_0(p, end, 2);
ARM GAS  /tmp/cc4E4VUn.s 			page 318


 11071              		.loc 1 2407 11 is_stmt 0 view .LVU3601
 11072 0a60 2D23     		movs	r3, #45
 11073 0a62 00F8013B 		strb	r3, [r0], #1
 11074              	.LVL1262:
2408:src/display.c **** 	    *p = '\0';
 11075              		.loc 1 2408 6 is_stmt 1 view .LVU3602
2408:src/display.c **** 	    *p = '\0';
 11076              		.loc 1 2408 10 is_stmt 0 view .LVU3603
 11077 0a66 4146     		mov	r1, r8
 11078 0a68 0222     		movs	r2, #2
 11079 0a6a FFF7FEFF 		bl	num_arg_0
 11080              	.LVL1263:
2408:src/display.c **** 	    *p = '\0';
 11081              		.loc 1 2408 10 view .LVU3604
 11082 0a6e 0246     		mov	r2, r0
 11083              	.LVL1264:
2409:src/display.c **** 	    set_status(buf);
 11084              		.loc 1 2409 6 is_stmt 1 view .LVU3605
2409:src/display.c **** 	    set_status(buf);
 11085              		.loc 1 2409 9 is_stmt 0 view .LVU3606
 11086 0a70 4FF0000B 		mov	fp, #0
 11087              	.LVL1265:
2410:src/display.c **** 	  }
 11088              		.loc 1 2410 6 view .LVU3607
 11089 0a74 17A8     		add	r0, sp, #92
 11090              	.LVL1266:
2409:src/display.c **** 	    set_status(buf);
 11091              		.loc 1 2409 9 view .LVU3608
 11092 0a76 82F800B0 		strb	fp, [r2]
2410:src/display.c **** 	  }
 11093              		.loc 1 2410 6 is_stmt 1 view .LVU3609
2399:src/display.c **** 	  int start = 0;
 11094              		.loc 1 2399 8 is_stmt 0 view .LVU3610
 11095 0a7a 0196     		str	r6, [sp, #4]
2410:src/display.c **** 	  }
 11096              		.loc 1 2410 6 view .LVU3611
 11097 0a7c FFF7FEFF 		bl	set_status
 11098              	.LVL1267:
2410:src/display.c **** 	  }
 11099              		.loc 1 2410 6 view .LVU3612
 11100 0a80 019B     		ldr	r3, [sp, #4]
 11101 0a82 1FE7     		b	.L926
 11102              	.LVL1268:
 11103              	.L1180:
2410:src/display.c **** 	  }
 11104              		.loc 1 2410 6 view .LVU3613
 11105              	.LBE659:
2382:src/display.c **** 	  if (SizeStatRegs)
 11106              		.loc 1 2382 4 is_stmt 1 view .LVU3614
2382:src/display.c **** 	  if (SizeStatRegs)
 11107              		.loc 1 2382 8 is_stmt 0 view .LVU3615
 11108 0a84 17AF     		add	r7, sp, #92
 11109              	.LVL1269:
2382:src/display.c **** 	  if (SizeStatRegs)
 11110              		.loc 1 2382 8 view .LVU3616
 11111 0a86 A749     		ldr	r1, .L1198+16
 11112 0a88 3846     		mov	r0, r7
ARM GAS  /tmp/cc4E4VUn.s 			page 319


 11113 0a8a FFF7FEFF 		bl	scopy
 11114              	.LVL1270:
2383:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11115              		.loc 1 2383 8 view .LVU3617
 11116 0a8e A64A     		ldr	r2, .L1198+20
2383:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11117              		.loc 1 2383 7 view .LVU3618
 11118 0a90 1268     		ldr	r2, [r2]
2382:src/display.c **** 	  if (SizeStatRegs)
 11119              		.loc 1 2382 8 view .LVU3619
 11120 0a92 0346     		mov	r3, r0
 11121              	.LVL1271:
2383:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11122              		.loc 1 2383 4 is_stmt 1 view .LVU3620
2383:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11123              		.loc 1 2383 7 is_stmt 0 view .LVU3621
 11124 0a94 002A     		cmp	r2, #0
 11125 0a96 61D1     		bne	.L1185
 11126              	.L923:
2385:src/display.c **** 	  set_status(buf);
 11127              		.loc 1 2385 4 is_stmt 1 view .LVU3622
2385:src/display.c **** 	  set_status(buf);
 11128              		.loc 1 2385 7 is_stmt 0 view .LVU3623
 11129 0a98 0022     		movs	r2, #0
 11130 0a9a 1A70     		strb	r2, [r3]
2386:src/display.c **** 
 11131              		.loc 1 2386 4 is_stmt 1 view .LVU3624
 11132 0a9c 3846     		mov	r0, r7
 11133              	.LVL1272:
2386:src/display.c **** 
 11134              		.loc 1 2386 4 is_stmt 0 view .LVU3625
 11135 0a9e FFF7FEFF 		bl	set_status
 11136              	.LVL1273:
2389:src/display.c **** 	  if (LocalRegs < 0) {
 11137              		.loc 1 2389 4 is_stmt 1 view .LVU3626
2389:src/display.c **** 	  if (LocalRegs < 0) {
 11138              		.loc 1 2389 8 is_stmt 0 view .LVU3627
 11139 0aa2 FFF7FEFF 		bl	global_regs
 11140              	.LVL1274:
 11141 0aa6 0146     		mov	r1, r0
 11142 0aa8 3846     		mov	r0, r7
 11143 0aaa FFF7FEFF 		bl	num_arg
 11144              	.LVL1275:
2390:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11145              		.loc 1 2390 8 view .LVU3628
 11146 0aae D9F80020 		ldr	r2, [r9]
2390:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11147              		.loc 1 2390 7 view .LVU3629
 11148 0ab2 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11149 0ab6 002A     		cmp	r2, #0
2389:src/display.c **** 	  if (LocalRegs < 0) {
 11150              		.loc 1 2389 8 view .LVU3630
 11151 0ab8 0346     		mov	r3, r0
 11152              	.LVL1276:
2390:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11153              		.loc 1 2390 4 is_stmt 1 view .LVU3631
2390:src/display.c **** 	    p = scopy(p, " , Loc. ");
ARM GAS  /tmp/cc4E4VUn.s 			page 320


 11154              		.loc 1 2390 7 is_stmt 0 view .LVU3632
 11155 0aba 43DB     		blt	.L1186
 11156              	.L924:
2394:src/display.c **** 	  set_digits_string(buf, 0);
 11157              		.loc 1 2394 4 is_stmt 1 view .LVU3633
2394:src/display.c **** 	  set_digits_string(buf, 0);
 11158              		.loc 1 2394 7 is_stmt 0 view .LVU3634
 11159 0abc 0021     		movs	r1, #0
2395:src/display.c **** 	} else {
 11160              		.loc 1 2395 4 view .LVU3635
 11161 0abe 3846     		mov	r0, r7
 11162              	.LVL1277:
2394:src/display.c **** 	  set_digits_string(buf, 0);
 11163              		.loc 1 2394 7 view .LVU3636
 11164 0ac0 1970     		strb	r1, [r3]
2395:src/display.c **** 	} else {
 11165              		.loc 1 2395 4 is_stmt 1 view .LVU3637
 11166 0ac2 FFF7FEFF 		bl	set_digits_string
 11167              	.LVL1278:
2395:src/display.c **** 	} else {
 11168              		.loc 1 2395 4 is_stmt 0 view .LVU3638
 11169 0ac6 70E7     		b	.L921
 11170              	.LVL1279:
 11171              	.L1179:
2373:src/display.c **** 	  p = num_arg(buf, free_mem());
 11172              		.loc 1 2373 4 is_stmt 1 view .LVU3639
 11173 0ac8 9848     		ldr	r0, .L1198+24
 11174 0aca FFF7FEFF 		bl	set_status
 11175              	.LVL1280:
2374:src/display.c **** 	  p = scopy(p, " , FL. ");
 11176              		.loc 1 2374 4 view .LVU3640
2374:src/display.c **** 	  p = scopy(p, " , FL. ");
 11177              		.loc 1 2374 21 is_stmt 0 view .LVU3641
 11178 0ace FFF7FEFF 		bl	free_mem
 11179              	.LVL1281:
 11180 0ad2 0146     		mov	r1, r0
2374:src/display.c **** 	  p = scopy(p, " , FL. ");
 11181              		.loc 1 2374 8 view .LVU3642
 11182 0ad4 17A8     		add	r0, sp, #92
 11183              	.LVL1282:
2374:src/display.c **** 	  p = scopy(p, " , FL. ");
 11184              		.loc 1 2374 8 view .LVU3643
 11185 0ad6 FFF7FEFF 		bl	num_arg
 11186              	.LVL1283:
2375:src/display.c **** 	  p = num_arg(p, free_flash());
 11187              		.loc 1 2375 4 is_stmt 1 view .LVU3644
2375:src/display.c **** 	  p = num_arg(p, free_flash());
 11188              		.loc 1 2375 8 is_stmt 0 view .LVU3645
 11189 0ada 9549     		ldr	r1, .L1198+28
 11190 0adc FFF7FEFF 		bl	scopy
 11191              	.LVL1284:
2375:src/display.c **** 	  p = num_arg(p, free_flash());
 11192              		.loc 1 2375 8 view .LVU3646
 11193 0ae0 0646     		mov	r6, r0
 11194              	.LVL1285:
2376:src/display.c **** 	  *p = '\0';
 11195              		.loc 1 2376 4 is_stmt 1 view .LVU3647
ARM GAS  /tmp/cc4E4VUn.s 			page 321


2376:src/display.c **** 	  *p = '\0';
 11196              		.loc 1 2376 19 is_stmt 0 view .LVU3648
 11197 0ae2 FFF7FEFF 		bl	free_flash
 11198              	.LVL1286:
2376:src/display.c **** 	  *p = '\0';
 11199              		.loc 1 2376 19 view .LVU3649
 11200 0ae6 0146     		mov	r1, r0
2376:src/display.c **** 	  *p = '\0';
 11201              		.loc 1 2376 8 view .LVU3650
 11202 0ae8 3046     		mov	r0, r6
 11203 0aea FFF7FEFF 		bl	num_arg
 11204              	.LVL1287:
 11205 0aee 0346     		mov	r3, r0
 11206              	.LVL1288:
2377:src/display.c **** 	  set_digits_string(buf, 0);
 11207              		.loc 1 2377 4 is_stmt 1 view .LVU3651
2377:src/display.c **** 	  set_digits_string(buf, 0);
 11208              		.loc 1 2377 7 is_stmt 0 view .LVU3652
 11209 0af0 0021     		movs	r1, #0
2378:src/display.c **** 	}
 11210              		.loc 1 2378 4 view .LVU3653
 11211 0af2 17A8     		add	r0, sp, #92
 11212              	.LVL1289:
2377:src/display.c **** 	  set_digits_string(buf, 0);
 11213              		.loc 1 2377 7 view .LVU3654
 11214 0af4 1970     		strb	r1, [r3]
2378:src/display.c **** 	}
 11215              		.loc 1 2378 4 is_stmt 1 view .LVU3655
 11216 0af6 FFF7FEFF 		bl	set_digits_string
 11217              	.LVL1290:
2378:src/display.c **** 	}
 11218              		.loc 1 2378 4 is_stmt 0 view .LVU3656
 11219 0afa 56E7     		b	.L921
 11220              	.LVL1291:
 11221              	.L1177:
2378:src/display.c **** 	}
 11222              		.loc 1 2378 4 view .LVU3657
 11223              	.LBE627:
 11224              	.LBE626:
2825:src/display.c **** 	    annunciators();
 11225              		.loc 1 2825 56 discriminator 2 view .LVU3658
 11226 0afc D9F80030 		ldr	r3, [r9]
 11227 0b00 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11228 0b04 DE07     		lsls	r6, r3, #31
 11229 0b06 7FF591AE 		bpl	.L950
 11230              	.L949:
2826:src/display.c **** 	  }
 11231              		.loc 1 2826 6 is_stmt 1 view .LVU3659
 11232 0b0a FFF7FEFF 		bl	annunciators
 11233              	.LVL1292:
 11234 0b0e B2E6     		b	.L1151
 11235              	.LVL1293:
 11236              	.L942:
 11237              	.LBB661:
 11238              	.LBB618:
2515:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11239              		.loc 1 2515 4 view .LVU3660
ARM GAS  /tmp/cc4E4VUn.s 			page 322


 11240 0b10 17AF     		add	r7, sp, #92
 11241 0b12 1022     		movs	r2, #16
 11242 0b14 3846     		mov	r0, r7
 11243 0b16 FFF7FEFF 		bl	xset
 11244              	.LVL1294:
2519:src/display.c **** #endif
 11245              		.loc 1 2519 4 view .LVU3661
2519:src/display.c **** #endif
 11246              		.loc 1 2519 9 is_stmt 0 view .LVU3662
 11247 0b1a 8649     		ldr	r1, .L1198+32
 11248 0b1c 3846     		mov	r0, r7
 11249 0b1e FFF7FEFF 		bl	scopy_spc
 11250              	.LVL1295:
2521:src/display.c **** 	    *bp++ = '.';
 11251              		.loc 1 2521 8 view .LVU3663
 11252 0b22 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11253              	.LVL1296:
2521:src/display.c **** 	    *bp++ = '.';
 11254              		.loc 1 2521 4 is_stmt 1 view .LVU3664
2521:src/display.c **** 	    *bp++ = '.';
 11255              		.loc 1 2521 7 is_stmt 0 view .LVU3665
 11256 0b24 DB07     		lsls	r3, r3, #31
 11257 0b26 23D5     		bpl	.L944
2522:src/display.c **** 	    if (n >= 100) {
 11258              		.loc 1 2522 6 is_stmt 1 view .LVU3666
 11259              	.LVL1297:
2522:src/display.c **** 	    if (n >= 100) {
 11260              		.loc 1 2522 12 is_stmt 0 view .LVU3667
 11261 0b28 2E23     		movs	r3, #46
2523:src/display.c **** 	      *bp++ = '1';
 11262              		.loc 1 2523 9 view .LVU3668
 11263 0b2a BBF1630F 		cmp	fp, #99
2522:src/display.c **** 	    if (n >= 100) {
 11264              		.loc 1 2522 12 view .LVU3669
 11265 0b2e 0370     		strb	r3, [r0]
2523:src/display.c **** 	      *bp++ = '1';
 11266              		.loc 1 2523 6 is_stmt 1 view .LVU3670
2523:src/display.c **** 	      *bp++ = '1';
 11267              		.loc 1 2523 9 is_stmt 0 view .LVU3671
 11268 0b30 19DC     		bgt	.L945
2522:src/display.c **** 	    if (n >= 100) {
 11269              		.loc 1 2522 9 view .LVU3672
 11270 0b32 0130     		adds	r0, r0, #1
 11271              	.LVL1298:
 11272              	.L946:
2529:src/display.c **** 	  else
 11273              		.loc 1 2529 6 is_stmt 1 view .LVU3673
2529:src/display.c **** 	  else
 11274              		.loc 1 2529 11 is_stmt 0 view .LVU3674
 11275 0b34 5946     		mov	r1, fp
 11276 0b36 0222     		movs	r2, #2
 11277 0b38 FFF7FEFF 		bl	num_arg_0
 11278              	.LVL1299:
 11279              	.L948:
2532:src/display.c **** 	}
 11280              		.loc 1 2532 4 is_stmt 1 view .LVU3675
 11281 0b3c 3846     		mov	r0, r7
ARM GAS  /tmp/cc4E4VUn.s 			page 323


 11282 0b3e FFF7FEFF 		bl	set_status
 11283              	.LVL1300:
 11284 0b42 68E6     		b	.L943
 11285              	.LVL1301:
 11286              	.L1186:
2532:src/display.c **** 	}
 11287              		.loc 1 2532 4 is_stmt 0 view .LVU3676
 11288              	.LBE618:
 11289              	.LBE661:
 11290              	.LBB662:
 11291              	.LBB660:
2391:src/display.c **** 	    p = num_arg(p, local_regs());
 11292              		.loc 1 2391 6 is_stmt 1 view .LVU3677
2391:src/display.c **** 	    p = num_arg(p, local_regs());
 11293              		.loc 1 2391 10 is_stmt 0 view .LVU3678
 11294 0b44 7C49     		ldr	r1, .L1198+36
 11295 0b46 FFF7FEFF 		bl	scopy
 11296              	.LVL1302:
2391:src/display.c **** 	    p = num_arg(p, local_regs());
 11297              		.loc 1 2391 10 view .LVU3679
 11298 0b4a 0646     		mov	r6, r0
 11299              	.LVL1303:
2392:src/display.c **** 	  }
 11300              		.loc 1 2392 6 is_stmt 1 view .LVU3680
2392:src/display.c **** 	  }
 11301              		.loc 1 2392 21 is_stmt 0 view .LVU3681
 11302 0b4c FFF7FEFF 		bl	local_regs
 11303              	.LVL1304:
2392:src/display.c **** 	  }
 11304              		.loc 1 2392 21 view .LVU3682
 11305 0b50 0146     		mov	r1, r0
2392:src/display.c **** 	  }
 11306              		.loc 1 2392 10 view .LVU3683
 11307 0b52 3046     		mov	r0, r6
 11308 0b54 FFF7FEFF 		bl	num_arg
 11309              	.LVL1305:
 11310 0b58 0346     		mov	r3, r0
 11311              	.LVL1306:
2392:src/display.c **** 	  }
 11312              		.loc 1 2392 10 view .LVU3684
 11313 0b5a AFE7     		b	.L924
 11314              	.L1185:
2384:src/display.c **** 	  *p = '\0';
 11315              		.loc 1 2384 6 is_stmt 1 view .LVU3685
2384:src/display.c **** 	  *p = '\0';
 11316              		.loc 1 2384 10 is_stmt 0 view .LVU3686
 11317 0b5c 7749     		ldr	r1, .L1198+40
 11318 0b5e FFF7FEFF 		bl	scopy
 11319              	.LVL1307:
2384:src/display.c **** 	  *p = '\0';
 11320              		.loc 1 2384 10 view .LVU3687
 11321 0b62 0346     		mov	r3, r0
 11322              	.LVL1308:
2384:src/display.c **** 	  *p = '\0';
 11323              		.loc 1 2384 10 view .LVU3688
 11324 0b64 98E7     		b	.L923
 11325              	.LVL1309:
ARM GAS  /tmp/cc4E4VUn.s 			page 324


 11326              	.L945:
2384:src/display.c **** 	  *p = '\0';
 11327              		.loc 1 2384 10 view .LVU3689
 11328              	.LBE660:
 11329              	.LBE662:
 11330              	.LBB663:
 11331              	.LBB619:
2524:src/display.c **** 	      n -= 100;
 11332              		.loc 1 2524 8 is_stmt 1 view .LVU3690
2524:src/display.c **** 	      n -= 100;
 11333              		.loc 1 2524 14 is_stmt 0 view .LVU3691
 11334 0b66 3123     		movs	r3, #49
 11335 0b68 4370     		strb	r3, [r0, #1]
2525:src/display.c **** 	    }
 11336              		.loc 1 2525 8 is_stmt 1 view .LVU3692
2525:src/display.c **** 	    }
 11337              		.loc 1 2525 10 is_stmt 0 view .LVU3693
 11338 0b6a ABF1640B 		sub	fp, fp, #100
 11339              	.LVL1310:
2524:src/display.c **** 	      n -= 100;
 11340              		.loc 1 2524 11 view .LVU3694
 11341 0b6e 0230     		adds	r0, r0, #2
 11342              	.LVL1311:
 11343              	.L944:
2528:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11344              		.loc 1 2528 4 is_stmt 1 view .LVU3695
2528:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11345              		.loc 1 2528 7 is_stmt 0 view .LVU3696
 11346 0b70 BBF1630F 		cmp	fp, #99
 11347 0b74 DEDD     		ble	.L946
2531:src/display.c **** 	  set_status(buf);
 11348              		.loc 1 2531 6 is_stmt 1 view .LVU3697
 11349              	.LVL1312:
2531:src/display.c **** 	  set_status(buf);
 11350              		.loc 1 2531 22 is_stmt 0 view .LVU3698
 11351 0b76 724B     		ldr	r3, .L1198+44
 11352 0b78 5B44     		add	r3, r3, fp
2531:src/display.c **** 	  set_status(buf);
 11353              		.loc 1 2531 12 view .LVU3699
 11354 0b7a 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 11355 0b7e 0370     		strb	r3, [r0]
 11356 0b80 DCE7     		b	.L948
 11357              	.LVL1313:
 11358              	.L951:
2531:src/display.c **** 	  set_status(buf);
 11359              		.loc 1 2531 12 view .LVU3700
 11360              	.LBE619:
 11361              	.LBE663:
2876:src/display.c **** 	  if (i > 0)
 11362              		.loc 1 2876 4 is_stmt 1 view .LVU3701
2876:src/display.c **** 	  if (i > 0)
 11363              		.loc 1 2876 8 is_stmt 0 view .LVU3702
 11364 0b82 D9F80030 		ldr	r3, [r9]
 11365 0b86 B3F8E007 		ldrh	r0, [r3, #2016]
 11366              	.LVL1314:
2877:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11367              		.loc 1 2877 4 is_stmt 1 view .LVU3703
ARM GAS  /tmp/cc4E4VUn.s 			page 325


2877:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11368              		.loc 1 2877 7 is_stmt 0 view .LVU3704
 11369 0b8a 88B1     		cbz	r0, .L965
2878:src/display.c **** 	  else
 11370              		.loc 1 2878 6 is_stmt 1 view .LVU3705
 11371 0b8c FFF7FEFF 		bl	getprog
 11372              	.LVL1315:
2878:src/display.c **** 	  else
 11373              		.loc 1 2878 6 is_stmt 0 view .LVU3706
 11374 0b90 20A9     		add	r1, sp, #128
 11375              	.LVL1316:
2878:src/display.c **** 	  else
 11376              		.loc 1 2878 6 view .LVU3707
 11377 0b92 FFF7FEFF 		bl	prt
 11378              	.LVL1317:
2878:src/display.c **** 	  else
 11379              		.loc 1 2878 6 view .LVU3708
 11380 0b96 FFF7FEFF 		bl	set_status
 11381              	.LVL1318:
 11382              	.L966:
2881:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11383              		.loc 1 2881 4 is_stmt 1 view .LVU3709
 11384 0b9a 8920     		movs	r0, #137
 11385 0b9c FFF7FEFF 		bl	set_dot
 11386              	.LVL1319:
2883:src/display.c **** 	  goto nostk;
 11387              		.loc 1 2883 6 view .LVU3710
2884:src/display.c **** 	}
 11388              		.loc 1 2884 4 view .LVU3711
2888:src/display.c **** 	if (!skip) {
 11389              		.loc 1 2888 2 view .LVU3712
2883:src/display.c **** 	  goto nostk;
 11390              		.loc 1 2883 12 is_stmt 0 view .LVU3713
 11391 0ba0 0125     		movs	r5, #1
2888:src/display.c **** 	if (!skip) {
 11392              		.loc 1 2888 2 view .LVU3714
 11393 0ba2 FFF7FEFF 		bl	show_flags
 11394              	.LVL1320:
 11395              	.L1148:
2889:src/display.c **** 	  if (State2.runmode) {
 11396              		.loc 1 2889 2 is_stmt 1 view .LVU3715
 11397 0ba6 674B     		ldr	r3, .L1198+48
 11398 0ba8 674F     		ldr	r7, .L1198+52
 11399 0baa 0193     		str	r3, [sp, #4]
 11400 0bac FFF76BBA 		b	.L883
 11401              	.LVL1321:
 11402              	.L965:
2880:src/display.c **** 	  set_dot(STO_annun);
 11403              		.loc 1 2880 6 view .LVU3716
 11404 0bb0 6648     		ldr	r0, .L1198+56
 11405              	.LVL1322:
2880:src/display.c **** 	  set_dot(STO_annun);
 11406              		.loc 1 2880 6 is_stmt 0 view .LVU3717
 11407 0bb2 FFF7FEFF 		bl	set_status
 11408              	.LVL1323:
2880:src/display.c **** 	  set_dot(STO_annun);
 11409              		.loc 1 2880 6 view .LVU3718
ARM GAS  /tmp/cc4E4VUn.s 			page 326


 11410 0bb6 F0E7     		b	.L966
 11411              	.LVL1324:
 11412              	.L1178:
 11413              	.LBB664:
 11414              	.LBB622:
2481:src/display.c **** 	  if (lblpc != pc) {
 11415              		.loc 1 2481 4 is_stmt 1 view .LVU3719
2481:src/display.c **** 	  if (lblpc != pc) {
 11416              		.loc 1 2481 12 is_stmt 0 view .LVU3720
 11417 0bb8 4046     		mov	r0, r8
 11418 0bba 3946     		mov	r1, r7
 11419 0bbc FFF7FEFF 		bl	findmultilbl
 11420              	.LVL1325:
2481:src/display.c **** 	  if (lblpc != pc) {
 11421              		.loc 1 2481 10 view .LVU3721
 11422 0bc0 86B2     		uxth	r6, r0
 11423              	.LVL1326:
2482:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11424              		.loc 1 2482 4 is_stmt 1 view .LVU3722
2482:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11425              		.loc 1 2482 7 is_stmt 0 view .LVU3723
 11426 0bc2 B345     		cmp	fp, r6
2481:src/display.c **** 	  if (lblpc != pc) {
 11427              		.loc 1 2481 12 view .LVU3724
 11428 0bc4 8046     		mov	r8, r0
 11429              	.LVL1327:
2482:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11430              		.loc 1 2482 7 view .LVU3725
 11431 0bc6 3FF456AE 		beq	.L1151
2483:src/display.c **** 	    n = nLIB(lblpc);
 11432              		.loc 1 2483 6 is_stmt 1 view .LVU3726
 11433 0bca 6148     		ldr	r0, .L1198+60
 11434 0bcc 3F21     		movs	r1, #63
 11435 0bce FFF7FEFF 		bl	set_digits_string
 11436              	.LVL1328:
2484:src/display.c **** 	    if (n == REGION_RAM)
 11437              		.loc 1 2484 6 view .LVU3727
2485:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11438              		.loc 1 2485 6 view .LVU3728
2485:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11439              		.loc 1 2485 9 is_stmt 0 view .LVU3729
 11440 0bd2 B60B     		lsrs	r6, r6, #14
 11441              	.LVL1329:
2485:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11442              		.loc 1 2485 9 view .LVU3730
 11443 0bd4 50D1     		bne	.L939
2486:src/display.c **** 	    else {
 11444              		.loc 1 2486 8 is_stmt 1 view .LVU3731
 11445 0bd6 3246     		mov	r2, r6
 11446 0bd8 1FFA88F0 		uxth	r0, r8
 11447 0bdc 0121     		movs	r1, #1
 11448 0bde FFF7FEFF 		bl	set_exp
 11449              	.LVL1330:
 11450 0be2 48E6     		b	.L1151
 11451              	.LVL1331:
 11452              	.L1176:
2486:src/display.c **** 	    else {
ARM GAS  /tmp/cc4E4VUn.s 			page 327


 11453              		.loc 1 2486 8 is_stmt 0 view .LVU3732
 11454              	.LBE622:
 11455              	.LBE664:
 11456              	.LBB665:
 11457              	.LBB604:
2785:src/display.c **** 	      copyreg(&z, x);
 11458              		.loc 1 2785 8 is_stmt 1 view .LVU3733
2785:src/display.c **** 	      copyreg(&z, x);
 11459              		.loc 1 2785 27 is_stmt 0 view .LVU3734
 11460 0be4 5B4B     		ldr	r3, .L1198+64
 11461 0be6 1E68     		ldr	r6, [r3]
 11462              	.LVL1332:
2786:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11463              		.loc 1 2786 8 is_stmt 1 view .LVU3735
 11464 0be8 17A8     		add	r0, sp, #92
 11465 0bea 3146     		mov	r1, r6
 11466 0bec FFF7FEFF 		bl	copyreg
 11467              	.LVL1333:
2787:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11468              		.loc 1 2787 8 view .LVU3736
 11469 0bf0 E8B2     		uxtb	r0, r5
 11470 0bf2 FFF7FEFF 		bl	sigma_val
 11471              	.LVL1334:
2788:src/display.c **** 	      copyreg(x, &z);
 11472              		.loc 1 2788 8 view .LVU3737
 11473 0bf6 FFF7FEFF 		bl	is_dblmode
 11474              	.LVL1335:
 11475 0bfa 0021     		movs	r1, #0
 11476 0bfc 0246     		mov	r2, r0
 11477 0bfe 3046     		mov	r0, r6
 11478 0c00 FFF7FEFF 		bl	set_x
 11479              	.LVL1336:
2789:src/display.c **** 	      skip = 1;
 11480              		.loc 1 2789 8 view .LVU3738
 11481 0c04 3046     		mov	r0, r6
 11482 0c06 17A9     		add	r1, sp, #92
 11483 0c08 FFF7FEFF 		bl	copyreg
 11484              	.LVL1337:
2790:src/display.c **** 	    }
 11485              		.loc 1 2790 8 view .LVU3739
2790:src/display.c **** 	    }
 11486              		.loc 1 2790 13 is_stmt 0 view .LVU3740
 11487 0c0c 0126     		movs	r6, #1
 11488              	.LVL1338:
2790:src/display.c **** 	    }
 11489              		.loc 1 2790 13 view .LVU3741
 11490 0c0e 7AE5     		b	.L906
 11491              	.LVL1339:
 11492              	.L952:
2790:src/display.c **** 	    }
 11493              		.loc 1 2790 13 view .LVU3742
 11494              	.LBE604:
 11495              	.LBE665:
2835:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11496              		.loc 1 2835 11 is_stmt 1 view .LVU3743
2835:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11497              		.loc 1 2835 15 is_stmt 0 view .LVU3744
ARM GAS  /tmp/cc4E4VUn.s 			page 328


 11498 0c10 4C4A     		ldr	r2, .L1198+48
 11499 0c12 0192     		str	r2, [sp, #4]
 11500 0c14 B2F90020 		ldrsh	r2, [r2]
2835:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11501              		.loc 1 2835 14 view .LVU3745
 11502 0c18 002A     		cmp	r2, #0
 11503 0c1a 40F0B780 		bne	.L1187
2837:src/display.c **** 	    bp = scopy(buf, Alpha);
 11504              		.loc 1 2837 11 is_stmt 1 view .LVU3746
2837:src/display.c **** 	    bp = scopy(buf, Alpha);
 11505              		.loc 1 2837 14 is_stmt 0 view .LVU3747
 11506 0c1e 0907     		lsls	r1, r1, #28
 11507 0c20 44D4     		bmi	.L1188
 11508              	.LVL1340:
2886:src/display.c ****       nostk:
 11509              		.loc 1 2886 2 is_stmt 1 view .LVU3748
 11510 0c22 FFF7FEFF 		bl	show_stack
 11511              	.LVL1341:
2888:src/display.c **** 	if (!skip) {
 11512              		.loc 1 2888 2 view .LVU3749
2869:src/display.c **** 	  }
 11513              		.loc 1 2869 12 is_stmt 0 view .LVU3750
 11514 0c26 0125     		movs	r5, #1
2888:src/display.c **** 	if (!skip) {
 11515              		.loc 1 2888 2 view .LVU3751
 11516 0c28 FFF7FEFF 		bl	show_flags
 11517              	.LVL1342:
2889:src/display.c **** 	  if (State2.runmode) {
 11518              		.loc 1 2889 2 is_stmt 1 view .LVU3752
 11519 0c2c FFF72BBA 		b	.L883
 11520              	.LVL1343:
 11521              	.L1175:
 11522              	.LBB666:
 11523              	.LBB605:
2765:src/display.c **** 	      decimal64 z;
 11524              		.loc 1 2765 8 view .LVU3753
2766:src/display.c **** 
 11525              		.loc 1 2766 8 view .LVU3754
2768:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11526              		.loc 1 2768 8 view .LVU3755
 11527 0c30 0EA8     		add	r0, sp, #56
 11528 0c32 FFF7FEFF 		bl	getX
 11529              	.LVL1344:
2769:src/display.c **** 		const unsigned int f = argKIND(op);
 11530              		.loc 1 2769 8 view .LVU3756
2769:src/display.c **** 		const unsigned int f = argKIND(op);
 11531              		.loc 1 2769 11 is_stmt 0 view .LVU3757
 11532 0c36 C5F30723 		ubfx	r3, r5, #8, #8
 11533 0c3a 022B     		cmp	r3, #2
 11534 0c3c 2ED1     		bne	.L908
 11535              	.LBB606:
2770:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11536              		.loc 1 2770 3 is_stmt 1 view .LVU3758
2770:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11537              		.loc 1 2770 22 is_stmt 0 view .LVU3759
 11538 0c3e EDB2     		uxtb	r5, r5
 11539              	.LVL1345:
ARM GAS  /tmp/cc4E4VUn.s 			page 329


2771:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11540              		.loc 1 2771 3 is_stmt 1 view .LVU3760
2771:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11541              		.loc 1 2771 6 is_stmt 0 view .LVU3761
 11542 0c40 982D     		cmp	r5, #152
 11543              	.LBB607:
2774:src/display.c **** 		}
 11544              		.loc 1 2774 5 view .LVU3762
 11545 0c42 17AF     		add	r7, sp, #92
 11546              	.LBE607:
2771:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11547              		.loc 1 2771 6 view .LVU3763
 11548 0c44 26D8     		bhi	.L909
2771:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11549              		.loc 1 2771 28 discriminator 1 view .LVU3764
 11550 0c46 1823     		movs	r3, #24
 11551 0c48 434A     		ldr	r2, .L1198+68
 11552 0c4a 03FB05F3 		mul	r3, r3, r5
 11553 0c4e D358     		ldr	r3, [r2, r3]
2771:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11554              		.loc 1 2771 23 discriminator 1 view .LVU3765
 11555 0c50 03B3     		cbz	r3, .L909
 11556              	.LBB608:
2772:src/display.c **** 		  update_speed(0);
 11557              		.loc 1 2772 5 is_stmt 1 view .LVU3766
 11558              	.LVL1346:
2773:src/display.c **** 		  fp(&r, &x);
 11559              		.loc 1 2773 20 view .LVU3767
2774:src/display.c **** 		}
 11560              		.loc 1 2774 5 view .LVU3768
 11561 0c52 0EA9     		add	r1, sp, #56
 11562 0c54 3846     		mov	r0, r7
 11563 0c56 9847     		blx	r3
 11564              	.LVL1347:
 11565              	.L910:
2774:src/display.c **** 		}
 11566              		.loc 1 2774 5 is_stmt 0 view .LVU3769
 11567              	.LBE608:
 11568              	.LBE606:
2780:src/display.c **** 	      packed_from_number(&z, &r);
 11569              		.loc 1 2780 8 is_stmt 1 discriminator 1 view .LVU3770
 11570 0c58 404A     		ldr	r2, .L1198+72
 11571 0c5a 3946     		mov	r1, r7
 11572 0c5c 3846     		mov	r0, r7
 11573 0c5e FFF7FEFF 		bl	decNumberNormalize
 11574              	.LVL1348:
2781:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11575              		.loc 1 2781 8 discriminator 1 view .LVU3771
 11576 0c62 3946     		mov	r1, r7
 11577 0c64 08A8     		add	r0, sp, #32
 11578 0c66 FFF7FEFF 		bl	packed_from_number
 11579              	.LVL1349:
2782:src/display.c **** 	      skip = 1;
 11580              		.loc 1 2782 8 discriminator 1 view .LVU3772
 11581 0c6a 0022     		movs	r2, #0
 11582 0c6c 08A8     		add	r0, sp, #32
 11583 0c6e 1146     		mov	r1, r2
ARM GAS  /tmp/cc4E4VUn.s 			page 330


 11584 0c70 FFF7FEFF 		bl	set_x
 11585              	.LVL1350:
2783:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11586              		.loc 1 2783 8 discriminator 1 view .LVU3773
2783:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11587              		.loc 1 2783 13 is_stmt 0 discriminator 1 view .LVU3774
 11588 0c74 0126     		movs	r6, #1
 11589              	.LBE605:
 11590 0c76 46E5     		b	.L906
 11591              	.LVL1351:
 11592              	.L939:
2783:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11593              		.loc 1 2783 13 discriminator 1 view .LVU3775
 11594              	.LBE666:
 11595              	.LBB667:
 11596              	.LBB623:
2488:src/display.c **** #ifndef REALBUILD
 11597              		.loc 1 2488 8 is_stmt 1 view .LVU3776
 11598 0c78 394B     		ldr	r3, .L1198+76
2488:src/display.c **** #ifndef REALBUILD
 11599              		.loc 1 2488 37 is_stmt 0 view .LVU3777
 11600 0c7a 06EB8600 		add	r0, r6, r6, lsl #2
2488:src/display.c **** #ifndef REALBUILD
 11601              		.loc 1 2488 8 view .LVU3778
 11602 0c7e 3946     		mov	r1, r7
 11603 0c80 1844     		add	r0, r0, r3
 11604 0c82 FFF7FEFF 		bl	set_exp_digits_string
 11605              	.LVL1352:
2490:src/display.c **** #endif
 11606              		.loc 1 2490 8 is_stmt 1 view .LVU3779
2490:src/display.c **** #endif
 11607              		.loc 1 2490 47 is_stmt 0 view .LVU3780
 11608 0c86 0A21     		movs	r1, #10
2490:src/display.c **** #endif
 11609              		.loc 1 2490 8 view .LVU3781
 11610 0c88 01FB0691 		mla	r1, r1, r6, r9
 11611 0c8c 2248     		ldr	r0, .L1198+4
 11612 0c8e FFF7FEFF 		bl	scopy
 11613              	.LVL1353:
2490:src/display.c **** #endif
 11614              		.loc 1 2490 8 view .LVU3782
 11615              	.LBE623:
 11616              	.LBE667:
2886:src/display.c ****       nostk:
 11617              		.loc 1 2886 2 is_stmt 1 view .LVU3783
 11618 0c92 F0E5     		b	.L1151
 11619              	.LVL1354:
 11620              	.L909:
 11621              	.LBB668:
 11622              	.LBB610:
 11623              	.LBB609:
2777:src/display.c **** 	      } else
 11624              		.loc 1 2777 5 view .LVU3784
 11625 0c94 3846     		mov	r0, r7
 11626 0c96 FFF7FEFF 		bl	set_NaN
 11627              	.LVL1355:
 11628 0c9a DDE7     		b	.L910
ARM GAS  /tmp/cc4E4VUn.s 			page 331


 11629              	.LVL1356:
 11630              	.L908:
2777:src/display.c **** 	      } else
 11631              		.loc 1 2777 5 is_stmt 0 view .LVU3785
 11632              	.LBE609:
2779:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11633              		.loc 1 2779 3 is_stmt 1 view .LVU3786
 11634 0c9c 17AF     		add	r7, sp, #92
 11635 0c9e 0EAA     		add	r2, sp, #56
 11636 0ca0 05F07F01 		and	r1, r5, #127
 11637 0ca4 3846     		mov	r0, r7
 11638 0ca6 FFF7FEFF 		bl	do_conv
 11639              	.LVL1357:
 11640 0caa D5E7     		b	.L910
 11641              	.LVL1358:
 11642              	.L1188:
2779:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11643              		.loc 1 2779 3 is_stmt 0 view .LVU3787
 11644              	.LBE610:
 11645              	.LBE668:
2838:src/display.c **** 	    j = State2.alpha_pos;
 11646              		.loc 1 2838 6 is_stmt 1 view .LVU3788
2838:src/display.c **** 	    j = State2.alpha_pos;
 11647              		.loc 1 2838 22 is_stmt 0 view .LVU3789
 11648 0cac D9F80010 		ldr	r1, [r9]
 11649 0cb0 0292     		str	r2, [sp, #8]
2838:src/display.c **** 	    j = State2.alpha_pos;
 11650              		.loc 1 2838 11 view .LVU3790
 11651 0cb2 20A8     		add	r0, sp, #128
 11652              	.LVL1359:
2838:src/display.c **** 	    j = State2.alpha_pos;
 11653              		.loc 1 2838 11 view .LVU3791
 11654 0cb4 01F5F661 		add	r1, r1, #1968
 11655 0cb8 FFF7FEFF 		bl	scopy
 11656              	.LVL1360:
2839:src/display.c **** 	    if (j != 0) {
 11657              		.loc 1 2839 16 view .LVU3792
 11658 0cbc 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11659              	.LVL1361:
2839:src/display.c **** 	    if (j != 0) {
 11660              		.loc 1 2839 6 is_stmt 1 view .LVU3793
2840:src/display.c **** 	      i = slen(buf);
 11661              		.loc 1 2840 6 view .LVU3794
2840:src/display.c **** 	      i = slen(buf);
 11662              		.loc 1 2840 9 is_stmt 0 view .LVU3795
 11663 0cbe 002B     		cmp	r3, #0
 11664 0cc0 50D1     		bne	.L1189
2853:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11665              		.loc 1 2853 8 is_stmt 1 view .LVU3796
2853:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11666              		.loc 1 2853 11 is_stmt 0 view .LVU3797
 11667 0cc2 3EB1     		cbz	r6, .L963
2853:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11668              		.loc 1 2853 31 discriminator 1 view .LVU3798
 11669 0cc4 B8F1000F 		cmp	r8, #0
 11670 0cc8 04D1     		bne	.L963
2854:src/display.c **** 		*bp++ = '\0';
ARM GAS  /tmp/cc4E4VUn.s 			page 332


 11671              		.loc 1 2854 3 is_stmt 1 view .LVU3799
 11672              	.LVL1362:
2854:src/display.c **** 		*bp++ = '\0';
 11673              		.loc 1 2854 23 is_stmt 0 view .LVU3800
 11674 0cca 06F11003 		add	r3, r6, #16
 11675              	.LVL1363:
2855:src/display.c **** 	      }
 11676              		.loc 1 2855 9 view .LVU3801
 11677 0cce 0022     		movs	r2, #0
2854:src/display.c **** 		*bp++ = '\0';
 11678              		.loc 1 2854 9 view .LVU3802
 11679 0cd0 0370     		strb	r3, [r0]
 11680              	.LVL1364:
2855:src/display.c **** 	      }
 11681              		.loc 1 2855 3 is_stmt 1 view .LVU3803
2855:src/display.c **** 	      }
 11682              		.loc 1 2855 9 is_stmt 0 view .LVU3804
 11683 0cd2 4270     		strb	r2, [r0, #1]
 11684              	.LVL1365:
 11685              	.L963:
2857:src/display.c **** 	    }
 11686              		.loc 1 2857 8 is_stmt 1 view .LVU3805
 11687 0cd4 20A8     		add	r0, sp, #128
 11688 0cd6 FFF7FEFF 		bl	set_status_right
 11689              	.LVL1366:
 11690              	.L962:
2859:src/display.c **** 	      bp = buf;
 11691              		.loc 1 2859 6 view .LVU3806
2859:src/display.c **** 	      bp = buf;
 11692              		.loc 1 2859 9 is_stmt 0 view .LVU3807
 11693 0cda 002E     		cmp	r6, #0
 11694 0cdc 00F08780 		beq	.L954
2859:src/display.c **** 	      bp = buf;
 11695              		.loc 1 2859 27 discriminator 1 view .LVU3808
 11696 0ce0 B8F1000F 		cmp	r8, #0
 11697 0ce4 00F08380 		beq	.L954
2860:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11698              		.loc 1 2860 8 is_stmt 1 view .LVU3809
 11699              	.LVL1367:
2861:src/display.c **** 	      *bp++ = '\0';
 11700              		.loc 1 2861 8 view .LVU3810
 11701              	.LBB669:
 11702              	.LBB670:
3508:src/display.c **** 	if (State2.runmode) {
 11703              		.loc 1 3508 5 is_stmt 0 view .LVU3811
 11704 0ce8 BAF90030 		ldrsh	r3, [r10]
 11705              	.LBE670:
 11706              	.LBE669:
2861:src/display.c **** 	      *bp++ = '\0';
 11707              		.loc 1 2861 28 view .LVU3812
 11708 0cec 1036     		adds	r6, r6, #16
2862:src/display.c **** 	      set_status_top(buf);
 11709              		.loc 1 2862 14 view .LVU3813
 11710 0cee 0022     		movs	r2, #0
2861:src/display.c **** 	      *bp++ = '\0';
 11711              		.loc 1 2861 14 view .LVU3814
 11712 0cf0 8DF88060 		strb	r6, [sp, #128]
ARM GAS  /tmp/cc4E4VUn.s 			page 333


2862:src/display.c **** 	      set_status_top(buf);
 11713              		.loc 1 2862 8 is_stmt 1 view .LVU3815
 11714              	.LVL1368:
2862:src/display.c **** 	      set_status_top(buf);
 11715              		.loc 1 2862 14 is_stmt 0 view .LVU3816
 11716 0cf4 8DF88120 		strb	r2, [sp, #129]
2863:src/display.c **** 	      no_status_top = 1;
 11717              		.loc 1 2863 8 is_stmt 1 view .LVU3817
 11718              	.LVL1369:
 11719              	.LBB672:
 11720              	.LBI669:
3507:src/display.c **** 	if (no_status_top) return;
 11721              		.loc 1 3507 19 view .LVU3818
 11722              	.LBB671:
3508:src/display.c **** 	if (State2.runmode) {
 11723              		.loc 1 3508 2 view .LVU3819
3508:src/display.c **** 	if (State2.runmode) {
 11724              		.loc 1 3508 5 is_stmt 0 view .LVU3820
 11725 0cf8 13B9     		cbnz	r3, .L964
 11726 0cfa 20A8     		add	r0, sp, #128
 11727              	.LVL1370:
3508:src/display.c **** 	if (State2.runmode) {
 11728              		.loc 1 3508 5 view .LVU3821
 11729 0cfc FFF7FEFF 		bl	set_status_top.part.0
 11730              	.LVL1371:
 11731              	.L964:
3508:src/display.c **** 	if (State2.runmode) {
 11732              		.loc 1 3508 5 view .LVU3822
 11733              	.LBE671:
 11734              	.LBE672:
2864:src/display.c **** 	      //annuc = 1;
 11735              		.loc 1 2864 8 is_stmt 1 view .LVU3823
2864:src/display.c **** 	      //annuc = 1;
 11736              		.loc 1 2864 22 is_stmt 0 view .LVU3824
 11737 0d00 0123     		movs	r3, #1
 11738 0d02 AAF80030 		strh	r3, [r10]	@ movhi
2886:src/display.c ****       nostk:
 11739              		.loc 1 2886 2 is_stmt 1 view .LVU3825
 11740 0d06 FFF7FEFF 		bl	show_stack
 11741              	.LVL1372:
2888:src/display.c **** 	if (!skip) {
 11742              		.loc 1 2888 2 view .LVU3826
 11743 0d0a FFF7FEFF 		bl	show_flags
 11744              	.LVL1373:
2889:src/display.c **** 	  if (State2.runmode) {
 11745              		.loc 1 2889 2 view .LVU3827
 11746 0d0e FFF7BAB9 		b	.L883
 11747              	.L1199:
 11748 0d12 00BF     		.align	2
 11749              	.L1198:
 11750 0d14 398EE338 		.word	954437177
 11751 0d18 00000000 		.word	LastDisplayedNumber
 11752 0d1c 7C000000 		.word	.LC35
 11753 0d20 78000000 		.word	.LC34
 11754 0d24 5C000000 		.word	.LC31
 11755 0d28 00000000 		.word	SizeStatRegs
 11756 0d2c 4C000000 		.word	.LC29
ARM GAS  /tmp/cc4E4VUn.s 			page 334


 11757 0d30 54000000 		.word	.LC30
 11758 0d34 A0000000 		.word	.LC38
 11759 0d38 6C000000 		.word	.LC33
 11760 0d3c 64000000 		.word	.LC32
 11761 0d40 BC000000 		.word	.LC25
 11762 0d44 00000000 		.word	DispPlot
 11763 0d48 00000000 		.word	DispMsg
 11764 0d4c A8000000 		.word	.LC39
 11765 0d50 98000000 		.word	.LC37
 11766 0d54 00000000 		.word	StackBase
 11767 0d58 00000000 		.word	monfuncs
 11768 0d5c 00000000 		.word	Ctx
 11769 0d60 00000000 		.word	.LANCHOR22
 11770              	.LVL1374:
 11771              	.L1189:
2841:src/display.c **** 	      j *= 6;
 11772              		.loc 1 2841 8 view .LVU3828
2841:src/display.c **** 	      j *= 6;
 11773              		.loc 1 2841 12 is_stmt 0 view .LVU3829
 11774 0d64 20A8     		add	r0, sp, #128
 11775              	.LVL1375:
2841:src/display.c **** 	      j *= 6;
 11776              		.loc 1 2841 12 view .LVU3830
 11777 0d66 0393     		str	r3, [sp, #12]
 11778 0d68 FFF7FEFF 		bl	slen
 11779              	.LVL1376:
2842:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11780              		.loc 1 2842 8 is_stmt 1 view .LVU3831
2843:src/display.c **** 		{
 11781              		.loc 1 2843 8 view .LVU3832
2842:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11782              		.loc 1 2842 10 is_stmt 0 view .LVU3833
 11783 0d6c 039B     		ldr	r3, [sp, #12]
 11784 0d6e 03EB4303 		add	r3, r3, r3, lsl #1
2843:src/display.c **** 		{
 11785              		.loc 1 2843 15 view .LVU3834
 11786 0d72 A0EB4300 		sub	r0, r0, r3, lsl #1
 11787              	.LVL1377:
2843:src/display.c **** 		{
 11788              		.loc 1 2843 11 view .LVU3835
 11789 0d76 1328     		cmp	r0, #19
 11790 0d78 3FDD     		ble	.L961
2845:src/display.c **** 		  set_status_right(buf);
 11791              		.loc 1 2845 5 is_stmt 1 view .LVU3836
2845:src/display.c **** 		  set_status_right(buf);
 11792              		.loc 1 2845 20 is_stmt 0 view .LVU3837
 11793 0d7a 2AAB     		add	r3, sp, #168
 11794 0d7c 0344     		add	r3, r3, r0
 11795 0d7e 029A     		ldr	r2, [sp, #8]
 11796 0d80 03F8282C 		strb	r2, [r3, #-40]
2846:src/display.c **** 		}
 11797              		.loc 1 2846 5 is_stmt 1 view .LVU3838
 11798 0d84 20A8     		add	r0, sp, #128
 11799 0d86 FFF7FEFF 		bl	set_status_right
 11800              	.LVL1378:
 11801 0d8a A6E7     		b	.L962
 11802              	.LVL1379:
ARM GAS  /tmp/cc4E4VUn.s 			page 335


 11803              	.L1187:
2836:src/display.c **** 	  } else if (State2.alphas) {
 11804              		.loc 1 2836 6 view .LVU3839
2836:src/display.c **** 	  } else if (State2.alphas) {
 11805              		.loc 1 2836 48 is_stmt 0 view .LVU3840
 11806 0d8c 501E     		subs	r0, r2, #1
 11807 0d8e 0393     		str	r3, [sp, #12]
 11808 0d90 FFF7FEFF 		bl	get_reg_n
 11809              	.LVL1380:
 11810              	.LBB673:
 11811              	.LBI673:
3312:src/display.c **** 	int glen = *graphic++;
 11812              		.loc 1 3312 19 is_stmt 1 view .LVU3841
 11813              	.LBB674:
3313:src/display.c **** 	int i, j;
 11814              		.loc 1 3313 2 view .LVU3842
3321:src/display.c **** #endif
 11815              		.loc 1 3321 15 is_stmt 0 view .LVU3843
 11816 0d94 1B4E     		ldr	r6, .L1200
3313:src/display.c **** 	int i, j;
 11817              		.loc 1 3313 6 view .LVU3844
 11818 0d96 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11819              	.LVL1381:
3314:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11820              		.loc 1 3314 2 is_stmt 1 view .LVU3845
3321:src/display.c **** #endif
 11821              		.loc 1 3321 2 view .LVU3846
3321:src/display.c **** #endif
 11822              		.loc 1 3321 15 is_stmt 0 view .LVU3847
 11823 0d98 0122     		movs	r2, #1
 11824 0d9a 3270     		strb	r2, [r6]
3323:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11825              		.loc 1 3323 2 is_stmt 1 view .LVU3848
3323:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11826              		.loc 1 3323 5 is_stmt 0 view .LVU3849
 11827 0d9c 39B3     		cbz	r1, .L954
3324:src/display.c **** 
 11828              		.loc 1 3324 2 is_stmt 1 view .LVU3850
 11829              	.LVL1382:
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11830              		.loc 1 3326 2 view .LVU3851
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11831              		.loc 1 3326 12 view .LVU3852
 11832 0d9e 8318     		adds	r3, r0, r2
 11833 0da0 0493     		str	r3, [sp, #16]
 11834 0da2 4A29     		cmp	r1, #74
 11835 0da4 D4BF     		ite	le
 11836 0da6 5B18     		addle	r3, r3, r1
 11837 0da8 4A33     		addgt	r3, r3, #74
 11838 0daa 0293     		str	r3, [sp, #8]
 11839 0dac CDE90557 		strd	r5, r7, [sp, #20]
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11840              		.loc 1 3326 8 is_stmt 0 view .LVU3853
 11841 0db0 039B     		ldr	r3, [sp, #12]
 11842 0db2 0392     		str	r2, [sp, #12]
 11843 0db4 1E46     		mov	r6, r3
 11844              	.LVL1383:
ARM GAS  /tmp/cc4E4VUn.s 			page 336


 11845              	.L955:
3327:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11846              		.loc 1 3327 14 is_stmt 1 view .LVU3854
 11847 0db6 039B     		ldr	r3, [sp, #12]
 11848 0db8 049F     		ldr	r7, [sp, #16]
 11849 0dba 03FA06F8 		lsl	r8, r3, r6
 11850 0dbe 06F19405 		add	r5, r6, #148
 11851 0dc2 06E0     		b	.L958
 11852              	.LVL1384:
 11853              	.L1191:
 11854              	.LBB675:
 11855              	.LBB676:
 340:src/display.c ****   else	clr_dot(n);
 11856              		.loc 1 340 11 is_stmt 0 view .LVU3855
 11857 0dc4 FFF7FEFF 		bl	set_dot
 11858              	.LVL1385:
 11859              	.L957:
 340:src/display.c ****   else	clr_dot(n);
 11860              		.loc 1 340 11 view .LVU3856
 11861              	.LBE676:
 11862              	.LBE675:
3327:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11863              		.loc 1 3327 23 is_stmt 1 view .LVU3857
3327:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11864              		.loc 1 3327 14 view .LVU3858
3327:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11865              		.loc 1 3327 4 is_stmt 0 view .LVU3859
 11866 0dc8 029B     		ldr	r3, [sp, #8]
 11867 0dca BB42     		cmp	r3, r7
 11868 0dcc 05F10605 		add	r5, r5, #6
 11869 0dd0 08D0     		beq	.L1190
 11870              	.LVL1386:
 11871              	.L958:
3332:src/display.c **** #endif
 11872              		.loc 1 3332 6 is_stmt 1 view .LVU3860
 11873              	.LBB679:
 11874              	.LBI675:
 339:src/display.c ****   if (on)	set_dot(n);
 11875              		.loc 1 339 6 view .LVU3861
 11876              	.LBB677:
 340:src/display.c ****   else	clr_dot(n);
 11877              		.loc 1 340 3 view .LVU3862
 340:src/display.c ****   else	clr_dot(n);
 11878              		.loc 1 340 11 view .LVU3863
 341:src/display.c **** }
 11879              		.loc 1 341 8 view .LVU3864
 11880              	.LBE677:
 11881              	.LBE679:
3332:src/display.c **** #endif
 11882              		.loc 1 3332 37 is_stmt 0 view .LVU3865
 11883 0dd2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11884              	.LVL1387:
 11885              	.LBB680:
 11886              	.LBB678:
 340:src/display.c ****   else	clr_dot(n);
 11887              		.loc 1 340 6 view .LVU3866
 11888 0dd6 13EA080F 		tst	r3, r8
ARM GAS  /tmp/cc4E4VUn.s 			page 337


 340:src/display.c ****   else	clr_dot(n);
 11889              		.loc 1 340 11 view .LVU3867
 11890 0dda 2846     		mov	r0, r5
 340:src/display.c ****   else	clr_dot(n);
 11891              		.loc 1 340 6 view .LVU3868
 11892 0ddc F2D1     		bne	.L1191
 341:src/display.c **** }
 11893              		.loc 1 341 8 view .LVU3869
 11894 0dde FFF7FEFF 		bl	clr_dot
 11895              	.LVL1388:
 11896 0de2 F1E7     		b	.L957
 11897              	.LVL1389:
 11898              	.L1190:
 341:src/display.c **** }
 11899              		.loc 1 341 8 view .LVU3870
 11900              	.LBE678:
 11901              	.LBE680:
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11902              		.loc 1 3326 17 is_stmt 1 view .LVU3871
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11903              		.loc 1 3326 18 is_stmt 0 view .LVU3872
 11904 0de4 0136     		adds	r6, r6, #1
 11905              	.LVL1390:
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11906              		.loc 1 3326 12 is_stmt 1 view .LVU3873
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11907              		.loc 1 3326 2 is_stmt 0 view .LVU3874
 11908 0de6 062E     		cmp	r6, #6
 11909 0de8 E5D1     		bne	.L955
 11910 0dea DDE90557 		ldrd	r5, r7, [sp, #20]
 11911              	.LVL1391:
 11912              	.L954:
3326:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11913              		.loc 1 3326 2 view .LVU3875
 11914              	.LBE674:
 11915              	.LBE673:
2886:src/display.c ****       nostk:
 11916              		.loc 1 2886 2 is_stmt 1 view .LVU3876
 11917 0dee FFF7FEFF 		bl	show_stack
 11918              	.LVL1392:
2888:src/display.c **** 	if (!skip) {
 11919              		.loc 1 2888 2 view .LVU3877
 11920 0df2 FFF7FEFF 		bl	show_flags
 11921              	.LVL1393:
2889:src/display.c **** 	  if (State2.runmode) {
 11922              		.loc 1 2889 2 view .LVU3878
 11923 0df6 FFF746B9 		b	.L883
 11924              	.LVL1394:
 11925              	.L961:
2849:src/display.c **** 	      }
 11926              		.loc 1 2849 3 view .LVU3879
 11927 0dfa 20A8     		add	r0, sp, #128
 11928 0dfc FFF7FEFF 		bl	set_status
 11929              	.LVL1395:
 11930 0e00 6BE7     		b	.L962
 11931              	.L1201:
 11932 0e02 00BF     		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 338


 11933              	.L1200:
 11934 0e04 00000000 		.word	forceDispPlot
 11935              		.cfi_endproc
 11936              	.LFE34:
 11938              		.section	.text.frozen_display,"ax",%progbits
 11939              		.align	1
 11940              		.p2align 2,,3
 11941              		.global	frozen_display
 11942              		.syntax unified
 11943              		.thumb
 11944              		.thumb_func
 11945              		.fpu fpv4-sp-d16
 11947              	frozen_display:
 11948              	.LFB35:
3306:src/display.c **** 	State2.disp_freeze = 0;
 11949              		.loc 1 3306 7 view -0
 11950              		.cfi_startproc
 11951              		@ args = 0, pretend = 0, frame = 0
 11952              		@ frame_needed = 0, uses_anonymous_args = 0
3307:src/display.c **** 	display();
 11953              		.loc 1 3307 2 view .LVU3881
3306:src/display.c **** 	State2.disp_freeze = 0;
 11954              		.loc 1 3306 7 is_stmt 0 view .LVU3882
 11955 0000 10B5     		push	{r4, lr}
 11956              		.cfi_def_cfa_offset 8
 11957              		.cfi_offset 4, -8
 11958              		.cfi_offset 14, -4
3307:src/display.c **** 	display();
 11959              		.loc 1 3307 21 view .LVU3883
 11960 0002 064C     		ldr	r4, .L1204
 11961 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11962 0006 6FF30413 		bfc	r3, #4, #1
 11963 000a E375     		strb	r3, [r4, #23]
3308:src/display.c **** 	State2.disp_freeze = 1;
 11964              		.loc 1 3308 2 is_stmt 1 view .LVU3884
 11965 000c FFF7FEFF 		bl	display
 11966              	.LVL1396:
3309:src/display.c ****       }
 11967              		.loc 1 3309 2 view .LVU3885
3309:src/display.c ****       }
 11968              		.loc 1 3309 21 is_stmt 0 view .LVU3886
 11969 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11970 0012 43F01003 		orr	r3, r3, #16
 11971 0016 E375     		strb	r3, [r4, #23]
3310:src/display.c **** 
 11972              		.loc 1 3310 7 view .LVU3887
 11973 0018 10BD     		pop	{r4, pc}
 11974              	.L1205:
 11975 001a 00BF     		.align	2
 11976              	.L1204:
 11977 001c 00000000 		.word	StateWhileOn
 11978              		.cfi_endproc
 11979              	.LFE35:
 11981              		.section	.text.message,"ax",%progbits
 11982              		.align	1
 11983              		.p2align 2,,3
 11984              		.global	message
ARM GAS  /tmp/cc4E4VUn.s 			page 339


 11985              		.syntax unified
 11986              		.thumb
 11987              		.thumb_func
 11988              		.fpu fpv4-sp-d16
 11990              	message:
 11991              	.LVL1397:
 11992              	.LFB46:
3527:src/display.c **** 	State2.disp_freeze = 0;
 11993              		.loc 1 3527 7 is_stmt 1 view -0
 11994              		.cfi_startproc
 11995              		@ args = 0, pretend = 0, frame = 0
 11996              		@ frame_needed = 0, uses_anonymous_args = 0
3528:src/display.c **** 	State2.disp_small = 0;
 11997              		.loc 1 3528 2 view .LVU3889
3529:src/display.c **** 	WasDataEntry = 0;
 11998              		.loc 1 3529 2 view .LVU3890
3529:src/display.c **** 	WasDataEntry = 0;
 11999              		.loc 1 3529 20 is_stmt 0 view .LVU3891
 12000 0000 174A     		ldr	r2, .L1216
3527:src/display.c **** 	State2.disp_freeze = 0;
 12001              		.loc 1 3527 7 view .LVU3892
 12002 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12003              		.cfi_def_cfa_offset 24
 12004              		.cfi_offset 3, -24
 12005              		.cfi_offset 4, -20
 12006              		.cfi_offset 5, -16
 12007              		.cfi_offset 6, -12
 12008              		.cfi_offset 7, -8
 12009              		.cfi_offset 14, -4
3529:src/display.c **** 	WasDataEntry = 0;
 12010              		.loc 1 3529 20 view .LVU3893
 12011 0004 D38A     		ldrh	r3, [r2, #22]
3530:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12012              		.loc 1 3530 15 view .LVU3894
 12013 0006 174E     		ldr	r6, .L1216+4
3529:src/display.c **** 	WasDataEntry = 0;
 12014              		.loc 1 3529 20 view .LVU3895
 12015 0008 23F48453 		bic	r3, r3, #4224
3530:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12016              		.loc 1 3530 15 view .LVU3896
 12017 000c 0027     		movs	r7, #0
3529:src/display.c **** 	WasDataEntry = 0;
 12018              		.loc 1 3529 20 view .LVU3897
 12019 000e D382     		strh	r3, [r2, #22]	@ movhi
3530:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12020              		.loc 1 3530 2 is_stmt 1 view .LVU3898
3531:src/display.c **** 	  // Complete redraw necessary
 12021              		.loc 1 3531 5 is_stmt 0 view .LVU3899
 12022 0010 9B05     		lsls	r3, r3, #22
3527:src/display.c **** 	State2.disp_freeze = 0;
 12023              		.loc 1 3527 7 view .LVU3900
 12024 0012 0546     		mov	r5, r0
 12025 0014 0C46     		mov	r4, r1
3530:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12026              		.loc 1 3530 15 view .LVU3901
 12027 0016 3760     		str	r7, [r6]
3531:src/display.c **** 	  // Complete redraw necessary
ARM GAS  /tmp/cc4E4VUn.s 			page 340


 12028              		.loc 1 3531 2 is_stmt 1 view .LVU3902
3531:src/display.c **** 	  // Complete redraw necessary
 12029              		.loc 1 3531 5 is_stmt 0 view .LVU3903
 12030 0018 12D5     		bpl	.L1207
3531:src/display.c **** 	  // Complete redraw necessary
 12031              		.loc 1 3531 27 discriminator 1 view .LVU3904
 12032 001a D1B1     		cbz	r1, .L1215
 12033              	.L1208:
3538:src/display.c **** 	    ShowRPN = 0;
 12034              		.loc 1 3538 6 is_stmt 1 view .LVU3905
 12035 001c FFF7FEFF 		bl	reset_disp
 12036              	.LVL1398:
3539:src/display.c **** 	    set_annunciators();
 12037              		.loc 1 3539 6 view .LVU3906
3539:src/display.c **** 	    set_annunciators();
 12038              		.loc 1 3539 14 is_stmt 0 view .LVU3907
 12039 0020 114B     		ldr	r3, .L1216+8
 12040 0022 0026     		movs	r6, #0
 12041 0024 1E60     		str	r6, [r3]
3540:src/display.c **** 	    set_digits_string( str2, 0 );
 12042              		.loc 1 3540 6 is_stmt 1 view .LVU3908
 12043 0026 FFF7FEFF 		bl	set_annunciators
 12044              	.LVL1399:
3541:src/display.c **** 	  }
 12045              		.loc 1 3541 6 view .LVU3909
 12046 002a 3146     		mov	r1, r6
 12047 002c 2046     		mov	r0, r4
 12048 002e FFF7FEFF 		bl	set_digits_string
 12049              	.LVL1400:
3543:src/display.c **** 	  finish_display();// message
 12050              		.loc 1 3543 4 view .LVU3910
 12051 0032 2846     		mov	r0, r5
 12052 0034 FFF7FEFF 		bl	set_status
 12053              	.LVL1401:
3544:src/display.c **** 	}
 12054              		.loc 1 3544 4 view .LVU3911
3546:src/display.c **** 
 12055              		.loc 1 3546 7 is_stmt 0 view .LVU3912
 12056 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12057              		.cfi_remember_state
 12058              		.cfi_restore 14
 12059              		.cfi_restore 7
 12060              		.cfi_restore 6
 12061              		.cfi_restore 5
 12062              		.cfi_restore 4
 12063              		.cfi_restore 3
 12064              		.cfi_def_cfa_offset 0
 12065              	.LVL1402:
3544:src/display.c **** 	}
 12066              		.loc 1 3544 4 view .LVU3913
 12067 003c FFF7FEBF 		b	finish_display
 12068              	.LVL1403:
 12069              	.L1207:
 12070              		.cfi_restore_state
3537:src/display.c **** 	    reset_disp();
 12071              		.loc 1 3537 4 is_stmt 1 view .LVU3914
3537:src/display.c **** 	    reset_disp();
ARM GAS  /tmp/cc4E4VUn.s 			page 341


 12072              		.loc 1 3537 7 is_stmt 0 view .LVU3915
 12073 0040 0029     		cmp	r1, #0
 12074 0042 EBD1     		bne	.L1208
3543:src/display.c **** 	  finish_display();// message
 12075              		.loc 1 3543 4 is_stmt 1 view .LVU3916
 12076 0044 2846     		mov	r0, r5
 12077              	.LVL1404:
3543:src/display.c **** 	  finish_display();// message
 12078              		.loc 1 3543 4 is_stmt 0 view .LVU3917
 12079 0046 FFF7FEFF 		bl	set_status
 12080              	.LVL1405:
3544:src/display.c **** 	}
 12081              		.loc 1 3544 4 is_stmt 1 view .LVU3918
3546:src/display.c **** 
 12082              		.loc 1 3546 7 is_stmt 0 view .LVU3919
 12083 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12084              		.cfi_remember_state
 12085              		.cfi_restore 14
 12086              		.cfi_restore 7
 12087              		.cfi_restore 6
 12088              		.cfi_restore 5
 12089              		.cfi_restore 4
 12090              		.cfi_restore 3
 12091              		.cfi_def_cfa_offset 0
 12092              	.LVL1406:
3544:src/display.c **** 	}
 12093              		.loc 1 3544 4 view .LVU3920
 12094 004e FFF7FEBF 		b	finish_display
 12095              	.LVL1407:
 12096              	.L1215:
 12097              		.cfi_restore_state
3533:src/display.c **** 	  display();
 12098              		.loc 1 3533 4 is_stmt 1 view .LVU3921
3533:src/display.c **** 	  display();
 12099              		.loc 1 3533 12 is_stmt 0 view .LVU3922
 12100 0052 064B     		ldr	r3, .L1216+12
 12101 0054 1860     		str	r0, [r3]
3534:src/display.c **** 	}
 12102              		.loc 1 3534 4 is_stmt 1 view .LVU3923
3546:src/display.c **** 
 12103              		.loc 1 3546 7 is_stmt 0 view .LVU3924
 12104 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12105              		.cfi_restore 14
 12106              		.cfi_restore 7
 12107              		.cfi_restore 6
 12108              		.cfi_restore 5
 12109              		.cfi_restore 4
 12110              		.cfi_restore 3
 12111              		.cfi_def_cfa_offset 0
3534:src/display.c **** 	}
 12112              		.loc 1 3534 4 view .LVU3925
 12113 005a FFF7FEBF 		b	display
 12114              	.LVL1408:
 12115              	.L1217:
3534:src/display.c **** 	}
 12116              		.loc 1 3534 4 view .LVU3926
 12117 005e 00BF     		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 342


 12118              	.L1216:
 12119 0060 00000000 		.word	StateWhileOn
 12120 0064 00000000 		.word	WasDataEntry
 12121 0068 00000000 		.word	ShowRPN
 12122 006c 00000000 		.word	DispMsg
 12123              		.cfi_endproc
 12124              	.LFE46:
 12126              		.section	.text.error_message,"ax",%progbits
 12127              		.align	1
 12128              		.p2align 2,,3
 12129              		.global	error_message
 12130              		.syntax unified
 12131              		.thumb
 12132              		.thumb_func
 12133              		.fpu fpv4-sp-d16
 12135              	error_message:
 12136              	.LVL1409:
 12137              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 12138              		.loc 1 134 1 is_stmt 1 view -0
 12139              		.cfi_startproc
 12140              		@ args = 0, pretend = 0, frame = 0
 12141              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 12142              		.loc 1 139 3 view .LVU3928
 197:src/display.c ****     {
 12143              		.loc 1 197 3 view .LVU3929
 232:src/display.c ****     const char *p = error_table[e];
 12144              		.loc 1 232 3 view .LVU3930
 134:src/display.c **** #define MSG1(top) top "\0"
 12145              		.loc 1 134 1 is_stmt 0 view .LVU3931
 12146 0000 38B5     		push	{r3, r4, r5, lr}
 12147              		.cfi_def_cfa_offset 16
 12148              		.cfi_offset 3, -16
 12149              		.cfi_offset 4, -12
 12150              		.cfi_offset 5, -8
 12151              		.cfi_offset 14, -4
 232:src/display.c ****     const char *p = error_table[e];
 12152              		.loc 1 232 21 view .LVU3932
 12153 0002 1A4B     		ldr	r3, .L1229
 12154 0004 1B68     		ldr	r3, [r3]
 12155 0006 0343     		orrs	r3, r0, r3
 12156 0008 2CD0     		beq	.L1218
 12157              	.LBB681:
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12158              		.loc 1 233 5 is_stmt 1 view .LVU3933
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12159              		.loc 1 233 17 is_stmt 0 view .LVU3934
 12160 000a 194B     		ldr	r3, .L1229+4
 12161 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12162              	.LVL1410:
 234:src/display.c ****     if (*q == '\0')
 12163              		.loc 1 234 5 is_stmt 1 view .LVU3935
 12164 0010 0446     		mov	r4, r0
 234:src/display.c ****     if (*q == '\0')
 12165              		.loc 1 234 21 is_stmt 0 view .LVU3936
 12166 0012 0021     		movs	r1, #0
ARM GAS  /tmp/cc4E4VUn.s 			page 343


 12167 0014 2846     		mov	r0, r5
 12168              	.LVL1411:
 234:src/display.c ****     if (*q == '\0')
 12169              		.loc 1 234 21 view .LVU3937
 12170 0016 FFF7FEFF 		bl	find_char
 12171              	.LVL1412:
 235:src/display.c ****       q = S7_ERROR;
 12172              		.loc 1 235 5 is_stmt 1 view .LVU3938
 235:src/display.c ****       q = S7_ERROR;
 12173              		.loc 1 235 9 is_stmt 0 view .LVU3939
 12174 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 235:src/display.c ****       q = S7_ERROR;
 12175              		.loc 1 235 8 view .LVU3940
 12176 001c 9BB9     		cbnz	r3, .L1227
 236:src/display.c ****     if (*q == 'X') {
 12177              		.loc 1 236 9 view .LVU3941
 12178 001e 1549     		ldr	r1, .L1229+8
 12179              	.L1220:
 12180              	.LVL1413:
 246:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12181              		.loc 1 246 7 is_stmt 1 view .LVU3942
 12182 0020 2846     		mov	r0, r5
 12183 0022 FFF7FEFF 		bl	message
 12184              	.LVL1414:
 247:src/display.c **** #ifndef REALBUILD
 12185              		.loc 1 247 7 view .LVU3943
 247:src/display.c **** #ifndef REALBUILD
 12186              		.loc 1 247 26 is_stmt 0 view .LVU3944
 12187 0026 144B     		ldr	r3, .L1229+12
 249:src/display.c **** #endif
 12188              		.loc 1 249 7 view .LVU3945
 12189 0028 1449     		ldr	r1, .L1229+16
 247:src/display.c **** #ifndef REALBUILD
 12190              		.loc 1 247 26 view .LVU3946
 12191 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 249:src/display.c **** #endif
 12192              		.loc 1 249 7 view .LVU3947
 12193 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12194 0030 1348     		ldr	r0, .L1229+20
 247:src/display.c **** #ifndef REALBUILD
 12195              		.loc 1 247 31 view .LVU3948
 12196 0032 003C     		subs	r4, r4, #0
 247:src/display.c **** #ifndef REALBUILD
 12197              		.loc 1 247 31 view .LVU3949
 12198 0034 18BF     		it	ne
 12199 0036 0124     		movne	r4, #1
 12200              	.LVL1415:
 247:src/display.c **** #ifndef REALBUILD
 12201              		.loc 1 247 26 view .LVU3950
 12202 0038 64F30412 		bfi	r2, r4, #4, #1
 12203 003c DA75     		strb	r2, [r3, #23]
 249:src/display.c **** #endif
 12204              		.loc 1 249 7 is_stmt 1 view .LVU3951
 12205              	.LBE681:
 274:src/display.c **** 
 12206              		.loc 1 274 1 is_stmt 0 view .LVU3952
 12207 003e BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/cc4E4VUn.s 			page 344


 12208              		.cfi_remember_state
 12209              		.cfi_restore 14
 12210              		.cfi_restore 5
 12211              		.cfi_restore 4
 12212              		.cfi_restore 3
 12213              		.cfi_def_cfa_offset 0
 12214              	.LVL1416:
 12215              	.LBB688:
 249:src/display.c **** #endif
 12216              		.loc 1 249 7 view .LVU3953
 12217 0042 FFF7FEBF 		b	scopy
 12218              	.LVL1417:
 12219              	.L1227:
 12220              		.cfi_restore_state
 237:src/display.c ****       DispMsg = p;
 12221              		.loc 1 237 5 is_stmt 1 view .LVU3954
 237:src/display.c ****       DispMsg = p;
 12222              		.loc 1 237 8 is_stmt 0 view .LVU3955
 12223 0046 582B     		cmp	r3, #88
 12224 0048 0DD1     		bne	.L1228
 238:src/display.c ****       frozen_display();
 12225              		.loc 1 238 7 is_stmt 1 view .LVU3956
 12226              	.LBB682:
 12227              	.LBB683:
3307:src/display.c **** 	display();
 12228              		.loc 1 3307 21 is_stmt 0 view .LVU3957
 12229 004a 0B4C     		ldr	r4, .L1229+12
 12230              	.LVL1418:
3307:src/display.c **** 	display();
 12231              		.loc 1 3307 21 view .LVU3958
 12232              	.LBE683:
 12233              	.LBE682:
 238:src/display.c ****       frozen_display();
 12234              		.loc 1 238 15 view .LVU3959
 12235 004c 0D4A     		ldr	r2, .L1229+24
 12236              	.LBB686:
 12237              	.LBB684:
3307:src/display.c **** 	display();
 12238              		.loc 1 3307 21 view .LVU3960
 12239 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12240              	.LBE684:
 12241              	.LBE686:
 238:src/display.c ****       frozen_display();
 12242              		.loc 1 238 15 view .LVU3961
 12243 0050 1560     		str	r5, [r2]
 239:src/display.c ****     }
 12244              		.loc 1 239 7 is_stmt 1 view .LVU3962
 12245              	.LBB687:
 12246              	.LBI682:
3305:src/display.c ****       {
 12247              		.loc 1 3305 12 view .LVU3963
 12248              	.LBB685:
3307:src/display.c **** 	display();
 12249              		.loc 1 3307 2 view .LVU3964
3307:src/display.c **** 	display();
 12250              		.loc 1 3307 21 is_stmt 0 view .LVU3965
 12251 0052 6FF30413 		bfc	r3, #4, #1
ARM GAS  /tmp/cc4E4VUn.s 			page 345


 12252 0056 E375     		strb	r3, [r4, #23]
3308:src/display.c **** 	State2.disp_freeze = 1;
 12253              		.loc 1 3308 2 is_stmt 1 view .LVU3966
 12254 0058 FFF7FEFF 		bl	display
 12255              	.LVL1419:
3309:src/display.c ****       }
 12256              		.loc 1 3309 2 view .LVU3967
3309:src/display.c ****       }
 12257              		.loc 1 3309 21 is_stmt 0 view .LVU3968
 12258 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12259 005e 43F01003 		orr	r3, r3, #16
 12260 0062 E375     		strb	r3, [r4, #23]
 12261              	.LVL1420:
 12262              	.L1218:
3309:src/display.c ****       }
 12263              		.loc 1 3309 21 view .LVU3969
 12264              	.LBE685:
 12265              	.LBE687:
 12266              	.LBE688:
 274:src/display.c **** 
 12267              		.loc 1 274 1 view .LVU3970
 12268 0064 38BD     		pop	{r3, r4, r5, pc}
 12269              	.LVL1421:
 12270              	.L1228:
 12271              	.LBB689:
 234:src/display.c ****     if (*q == '\0')
 12272              		.loc 1 234 17 view .LVU3971
 12273 0066 411C     		adds	r1, r0, #1
 12274 0068 DAE7     		b	.L1220
 12275              	.L1230:
 12276 006a 00BF     		.align	2
 12277              	.L1229:
 12278 006c 00000000 		.word	Running
 12279 0070 00000000 		.word	.LANCHOR27
 12280 0074 00000000 		.word	.LANCHOR26
 12281 0078 00000000 		.word	StateWhileOn
 12282 007c 00000000 		.word	.LANCHOR28
 12283 0080 00000000 		.word	LastDisplayedNumber
 12284 0084 00000000 		.word	DispMsg
 12285              	.LBE689:
 12286              		.cfi_endproc
 12287              	.LFE1:
 12289              		.section	.rodata.str1.4,"aMS",%progbits,1
 12290              		.align	2
 12291              	.LC41:
 12292 0000 06316306 		.ascii	"\0061c\006\006\000"
 12292      0600
 12293 0006 0000     		.align	2
 12294              	.LC42:
 12295 0008 756E0600 		.ascii	"un\006\000"
 12296              		.align	2
 12297              	.LC43:
 12298 000c 736D00   		.ascii	"sm\000"
 12299              		.set	CSWTCH.332,CSWTCH.330
 12300 000f 00       		.align	2
 12301              	.LC44:
 12302 0010 20502072 		.ascii	" P r o g r a m \000"
ARM GAS  /tmp/cc4E4VUn.s 			page 346


 12302      206F2067 
 12302      20722061 
 12302      206D2000 
 12303              		.align	2
 12304              	.LC45:
 12305 0020 206F2072 		.ascii	" o r   d a t e \000"
 12305      20202064 
 12305      20612074 
 12305      20652000 
 12306              		.align	2
 12307              	.LC46:
 12308 0030 204F2070 		.ascii	" O p - c o d e \000"
 12308      202D2063 
 12308      206F2064 
 12308      20652000 
 12309              		.align	2
 12310              	.LC47:
 12311 0040 204C2061 		.ascii	" L a b e l \000"
 12311      20622065 
 12311      206C2000 
 12312              		.align	2
 12313              	.LC48:
 12314 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12314      20652072 
 12314      20612074 
 12314      2069206F 
 12314      206E2000 
 12315              		.align	2
 12316              	.LC49:
 12317 0060 20462075 		.ascii	" F u l l \000"
 12317      206C206C 
 12317      2000
 12318 006a 0000     		.align	2
 12319              	.LC50:
 12320 006c 2043206C 		.ascii	" C l a s h \000"
 12320      20612073 
 12320      20682000 
 12321              		.align	2
 12322              	.LC51:
 12323 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12323      206F2020 
 12323      2073206D 
 12323      2061206C 
 12323      206C2000 
 12324              		.align	2
 12325              	.LC52:
 12326 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12326      20742061 
 12326      20202070 
 12326      206F2069 
 12326      206E2074 
 12327              		.align	2
 12328              	.LC53:
 12329 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12329      20722061 
 12329      206D2065 
 12329      20742065 
ARM GAS  /tmp/cc4E4VUn.s 			page 347


 12329      20722000 
 12330              		.align	2
 12331              	.LC54:
 12332 00b8 20442061 		.ascii	" D a t a \000"
 12332      20742061 
 12332      2000
 12333 00c2 0000     		.align	2
 12334              	.LC55:
 12335 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12335      206F2074 
 12335      20652063 
 12335      20742065 
 12335      20642000 
 12336              		.align	2
 12337              	.LC56:
 12338 00d8 2046206F 		.ascii	" F o u n d \000"
 12338      2075206E 
 12338      20642000 
 12339              		.align	2
 12340              	.LC57:
 12341 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12341      2073206D 
 12341      20612074 
 12341      20632068 
 12341      2000
 12342 00f6 0000     		.align	2
 12343              	.LC58:
 12344 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12344      20732074 
 12344      2061206C 
 12344      206C2065 
 12344      20642000 
 12345              		.global	DIGITS
 12346              		.comm	IoAnnunciator,4,4
 12347              		.comm	IntMaxWindow,4,4
 12348              		.comm	JustDisplayed,4,4
 12349              		.comm	ShowRPN,4,4
 12350              		.comm	forceDispPlot,1,1
 12351              		.comm	LastDisplayedExponent,5,4
 12352              		.comm	LastDisplayedNumber,26,4
 12353              		.comm	LastDisplayedText,31,4
 12354              		.global	no_status_top
 12355              		.comm	DispPlot,2,2
 12356              		.comm	DispMsg,4,4
 12357              		.global	SvnRevision
 12358              		.section	.rodata
 12359              		.align	2
 12360              		.set	.LANCHOR17,. + 0
 12361              	.LC16:
 12362 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12362      22002E00 
 12362      00
 12363 0009 000000   		.space	3
 12364              	.LC20:
 12365 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12365      332E3306 
 12365      0600
ARM GAS  /tmp/cc4E4VUn.s 			page 348


 12366 0016 00000000 		.space	4
 12367 001a 0000     		.space	2
 12368              	.LC59:
 12369 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12369      696E6700 
 12369      50726F47 
 12369      72614D6D 
 12369      00
 12370 002d 000000   		.space	3
 12371              	.LC60:
 12372 0030 446F6D61 		.ascii	"Domain\000\000"
 12372      696E0000 
 12373              	.LC61:
 12374 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12374      74696D65 
 12374      006F7220 
 12374      64417445 
 12374      00
 12375 0049 000000   		.space	3
 12376              	.LC62:
 12377 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12377      66696E65 
 12377      64004F70 
 12377      2D434F64 
 12377      4500
 12378 005e 0000     		.space	2
 12379              	.LC63:
 12380 0060 2B9F0000 		.ascii	"+\237\000\000"
 12381              	.LC64:
 12382 0064 2D9F0000 		.ascii	"-\237\000\000"
 12383              	.LC65:
 12384 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12384      75636800 
 12384      4C416245 
 12384      4C00
 12385 0076 0000     		.space	2
 12386              	.LC66:
 12387 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12387      67616C00 
 12387      4F504572 
 12387      4174696F 
 12387      6E00
 12388 008a 0000     		.space	2
 12389              	.LC67:
 12390 008c 4F757420 		.ascii	"Out of range\000\000"
 12390      6F662072 
 12390      616E6765 
 12390      0000
 12391 009a 0000     		.space	2
 12392              	.LC68:
 12393 009c 42616420 		.ascii	"Bad digit\000\000"
 12393      64696769 
 12393      740000
 12394 00a7 00       		.space	1
 12395              	.LC69:
 12396 00a8 546F6F20 		.ascii	"Too long\000\000"
 12396      6C6F6E67 
ARM GAS  /tmp/cc4E4VUn.s 			page 349


 12396      0000
 12397 00b2 0000     		.space	2
 12398              	.LC70:
 12399 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12399      69730046 
 12399      754C4C00 
 12400              	.LC71:
 12401 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12401      6B00434C 
 12401      41534800 
 12402              	.LC72:
 12403 00cc 42616420 		.ascii	"Bad mode\000\000"
 12403      6D6F6465 
 12403      0000
 12404 00d6 0000     		.space	2
 12405              	.LC73:
 12406 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12406      06060673 
 12406      697A6500 
 12406      746F6F20 
 12406      534D6D41 
 12407 00ef 00       		.space	1
 12408              	.LC74:
 12409 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12409      66657700 
 12409      64417441 
 12409      20506F69 
 12409      6E745300 
 12410              	.LC75:
 12411 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12411      6C696400 
 12411      50617261 
 12411      4D6D4574 
 12411      457200
 12412 0117 00       		.space	1
 12413              	.LC76:
 12414 0118 492F4F00 		.ascii	"I/O\000\000"
 12414      00
 12415 011d 000000   		.space	3
 12416              	.LC77:
 12417 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12417      6C696400 
 12417      64417441 
 12417      00
 12418 012d 000000   		.space	3
 12419              	.LC78:
 12420 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12420      65005072 
 12420      6F744563 
 12420      74456400 
 12421              	.LC79:
 12422 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12422      6F6F7400 
 12422      466F756E 
 12422      6400
 12423 014e 0000     		.space	2
 12424              	.LC80:
ARM GAS  /tmp/cc4E4VUn.s 			page 350


 12425 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12425      6978004D 
 12425      6D49534D 
 12425      6D417443 
 12425      4800
 12426 0162 0000     		.space	2
 12427              	.LC81:
 12428 0164 53696E67 		.ascii	"Singular\000\000"
 12428      756C6172 
 12428      0000
 12429 016e 0000     		.space	2
 12430              	.LC82:
 12431 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12431      68206973 
 12431      0046754C 
 12431      4C00
 12432 017e 0000     		.space	2
 12433              	.LC83:
 12434 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12434      72797374 
 12434      616C0049 
 12434      6E537461 
 12434      4C4C4564 
 12435 0195 000000   		.space	3
 12436              	.LC84:
 12437 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12437      5800
 12438              		.section	.bss.DecimalMode,"aw",%nobits
 12439              		.set	.LANCHOR1,. + 0
 12442              	DecimalMode:
 12443 0000 00       		.space	1
 12444              		.section	.bss.SeparatorMode,"aw",%nobits
 12445              		.set	.LANCHOR0,. + 0
 12448              	SeparatorMode:
 12449 0000 00       		.space	1
 12450              		.section	.bss.no_status_top,"aw",%nobits
 12451              		.align	1
 12452              		.set	.LANCHOR18,. + 0
 12455              	no_status_top:
 12456 0000 0000     		.space	2
 12457              		.section	.rodata.CSWTCH.330,"a"
 12458              		.align	2
 12459              		.set	.LANCHOR11,. + 0
 12462              	CSWTCH.330:
 12463 0000 02000000 		.word	2
 12464 0004 08000000 		.word	8
 12465 0008 0A000000 		.word	10
 12466 000c 10000000 		.word	16
 12467              		.section	.rodata.CSWTCH.357,"a"
 12468              		.align	2
 12469              		.set	.LANCHOR16,. + 0
 12472              	CSWTCH.357:
 12473 0000 00000000 		.word	.LC41
 12474 0004 08000000 		.word	.LC42
 12475 0008 0C000000 		.word	.LC43
 12476              		.section	.rodata.DIGITS,"a"
 12477              		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 351


 12478              		.set	.LANCHOR12,. + 0
 12481              	DIGITS:
 12482 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12482      34353637 
 12482      38394142 
 12482      43444546 
 12482      00
 12483              		.section	.rodata.S7_ERROR,"a"
 12484              		.align	2
 12485              		.set	.LANCHOR26,. + 0
 12488              	S7_ERROR:
 12489 0000 4572726F 		.ascii	"Error\000"
 12489      7200
 12490              		.section	.rodata.S7_INF,"a"
 12491              		.align	2
 12492              		.set	.LANCHOR5,. + 0
 12495              	S7_INF:
 12496 0000 496E6669 		.ascii	"Infinity\000"
 12496      6E697479 
 12496      00
 12497              		.section	.rodata.S7_INF_Text,"a"
 12498              		.align	2
 12499              		.set	.LANCHOR7,. + 0
 12502              	S7_INF_Text:
 12503 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12503      20662069 
 12503      206E2069 
 12503      20742079 
 12503      2000
 12504              		.section	.rodata.S7_NEG_INF_Text,"a"
 12505              		.align	2
 12506              		.set	.LANCHOR6,. + 0
 12509              	S7_NEG_INF_Text:
 12510 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12510      20662069 
 12510      206E2069 
 12510      20742079 
 12510      2000
 12511              		.section	.rodata.S7_NaN,"a"
 12512              		.align	2
 12513              		.set	.LANCHOR3,. + 0
 12516              	S7_NaN:
 12517 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12517      6E754D6D 
 12517      45726963 
 12517      00
 12518              		.section	.rodata.S7_NaN_Text,"a"
 12519              		.align	2
 12520              		.set	.LANCHOR4,. + 0
 12523              	S7_NaN_Text:
 12524 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12524      20742020 
 12524      206E2075 
 12524      206D2065 
 12524      20722069 
 12525              		.section	.rodata.S7_STEP,"a"
 12526              		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 352


 12527              		.set	.LANCHOR25,. + 0
 12530              	S7_STEP:
 12531 0000 53744550 		.ascii	"StEP \000"
 12531      2000
 12532              		.section	.rodata.S7_STEP_ShortText,"a"
 12533              		.align	2
 12534              		.set	.LANCHOR19,. + 0
 12537              	S7_STEP_ShortText:
 12538 0000 53544550 		.ascii	"STEP\000"
 12538      00
 12539              		.section	.rodata.S7_fract_EQ,"a"
 12540              		.align	2
 12541              		.set	.LANCHOR9,. + 0
 12544              	S7_fract_EQ:
 12545 0000 203D2000 		.ascii	" = \000"
 12546              		.section	.rodata.S7_fract_GT,"a"
 12547              		.align	2
 12548              		.set	.LANCHOR10,. + 0
 12551              	S7_fract_GT:
 12552 0000 20477400 		.ascii	" Gt\000"
 12553              		.section	.rodata.S7_fract_LT,"a"
 12554              		.align	2
 12555              		.set	.LANCHOR8,. + 0
 12558              	S7_fract_LT:
 12559 0000 204C7400 		.ascii	" Lt\000"
 12560              		.section	.rodata.S_SURE,"a"
 12561              		.align	2
 12562              		.set	.LANCHOR21,. + 0
 12565              	S_SURE:
 12566 0000 53757265 		.ascii	"Sure?\000"
 12566      3F00
 12567              		.section	.rodata.SvnRevision,"a"
 12568              		.align	2
 12569              		.set	.LANCHOR20,. + 0
 12572              	SvnRevision:
 12573 0000 30202020 		.ascii	"0   "
 12574              		.section	.rodata.digtbl,"a"
 12575              		.align	2
 12576              		.set	.LANCHOR2,. + 0
 12579              	digtbl:
 12580 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12580      02421252 
 12580      2D000000 
 12580      00000000 
 12580      00
 12581 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12581      00000017 
 12581      01000000 
 12581      00
 12582 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12582      28000000 
 12582      0020664B 
 12582      00000010 
 12583 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12583      5E5B3973 
 12583      77497F7B 
 12583      00000612 
ARM GAS  /tmp/cc4E4VUn.s 			page 353


 12583      0300787D 
 12584 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12584      673D240F 
 12584      75266C6D 
 12584      6F7C7914 
 12584      73362F00 
 12585 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12585      161F7674 
 12585      6735040F 
 12585      75266915 
 12585      177C7914 
 12586 0076 000F003B 		.ascii	"\000\017\000;"
 12587              		.section	.rodata.error_table.8495,"a"
 12588              		.align	2
 12589              		.set	.LANCHOR27,. + 0
 12592              	error_table.8495:
 12593 0000 1C000000 		.word	.LC59
 12594 0004 30000000 		.word	.LC60
 12595 0008 38000000 		.word	.LC61
 12596 000c 4C000000 		.word	.LC62
 12597 0010 60000000 		.word	.LC63
 12598 0014 64000000 		.word	.LC64
 12599 0018 68000000 		.word	.LC65
 12600 001c 78000000 		.word	.LC66
 12601 0020 8C000000 		.word	.LC67
 12602 0024 9C000000 		.word	.LC68
 12603 0028 A8000000 		.word	.LC69
 12604 002c B4000000 		.word	.LC70
 12605 0030 C0000000 		.word	.LC71
 12606 0034 CC000000 		.word	.LC72
 12607 0038 D8000000 		.word	.LC73
 12608 003c F0000000 		.word	.LC74
 12609 0040 04010000 		.word	.LC75
 12610 0044 18010000 		.word	.LC76
 12611 0048 20010000 		.word	.LC77
 12612 004c 30010000 		.word	.LC78
 12613 0050 40010000 		.word	.LC79
 12614 0054 50010000 		.word	.LC80
 12615 0058 64010000 		.word	.LC81
 12616 005c 70010000 		.word	.LC82
 12617 0060 80010000 		.word	.LC83
 12618 0064 98010000 		.word	.LC84
 12619              		.section	.rodata.error_table_text.8496,"a"
 12620              		.align	2
 12621              		.set	.LANCHOR28,. + 0
 12624              	error_table_text.8496:
 12625 0000 10000000 		.word	.LC44
 12626 0004 A8000000 		.word	.LC39
 12627 0008 20000000 		.word	.LC45
 12628 000c 30000000 		.word	.LC46
 12629 0010 A8000000 		.word	.LC39
 12630 0014 A8000000 		.word	.LC39
 12631 0018 40000000 		.word	.LC47
 12632 001c 4C000000 		.word	.LC48
 12633 0020 A8000000 		.word	.LC39
 12634 0024 A8000000 		.word	.LC39
 12635 0028 A8000000 		.word	.LC39
ARM GAS  /tmp/cc4E4VUn.s 			page 354


 12636 002c 60000000 		.word	.LC49
 12637 0030 6C000000 		.word	.LC50
 12638 0034 A8000000 		.word	.LC39
 12639 0038 78000000 		.word	.LC51
 12640 003c 8C000000 		.word	.LC52
 12641 0040 A4000000 		.word	.LC53
 12642 0044 A8000000 		.word	.LC39
 12643 0048 B8000000 		.word	.LC54
 12644 004c C4000000 		.word	.LC55
 12645 0050 D8000000 		.word	.LC56
 12646 0054 E4000000 		.word	.LC57
 12647 0058 A8000000 		.word	.LC39
 12648 005c 60000000 		.word	.LC49
 12649 0060 F8000000 		.word	.LC58
 12650 0064 A8000000 		.word	.LC39
 12651              		.section	.rodata.libname,"a"
 12652              		.align	2
 12653              		.set	.LANCHOR22,. + 0
 12656              	libname:
 12657 0000 72414D6D 		.ascii	"rAMm\000"
 12657      00
 12658 0005 4C696220 		.ascii	"Lib \000"
 12658      00
 12659 000a 42757020 		.ascii	"Bup \000"
 12659      00
 12660 000f 726F4D6D 		.ascii	"roMm\000"
 12660      00
 12661              		.section	.rodata.libname_shorttext,"a"
 12662              		.align	2
 12663              		.set	.LANCHOR24,. + 0
 12666              	libname_shorttext:
 12667 0000 52616D00 		.ascii	"Ram\000"
 12668 0004 00       		.space	1
 12669 0005 4C696200 		.ascii	"Lib\000"
 12670 0009 00       		.space	1
 12671 000a 42757000 		.ascii	"Bup\000"
 12672 000e 00       		.space	1
 12673 000f 526F6D00 		.ascii	"Rom\000"
 12674 0013 00       		.space	1
 12675              		.section	.rodata.libname_text,"a"
 12676              		.align	2
 12677              		.set	.LANCHOR23,. + 0
 12680              	libname_text:
 12681 0000 20522061 		.ascii	" R a m \000"
 12681      206D2000 
 12682 0008 0000     		.space	2
 12683 000a 204C2069 		.ascii	" L i b \000"
 12683      20622000 
 12684 0012 0000     		.space	2
 12685 0014 20422075 		.ascii	" B u p \000"
 12685      20702000 
 12686 001c 0000     		.space	2
 12687 001e 2052206F 		.ascii	" R o m \000"
 12687      206D2000 
 12688 0026 0000     		.space	2
 12689              		.section	.rodata.shift_chars.8594,"a"
 12690              		.align	2
ARM GAS  /tmp/cc4E4VUn.s 			page 355


 12691              		.set	.LANCHOR15,. + 0
 12694              	shift_chars.8594:
 12695 0000 20111213 		.ascii	" \021\022\023"
 12696              		.section	.rodata.small_dots.8788,"a"
 12697              		.align	2
 12698              		.set	.LANCHOR14,. + 0
 12701              	small_dots.8788:
 12702 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12702      07E12C06 
 12702      07E12C06 
 12702      06
 12703              		.section	.rodata.small_minus.8787,"a"
 12704              		.align	2
 12705              		.set	.LANCHOR13,. + 0
 12708              	small_minus.8787:
 12709 0000 07C22D06 		.ascii	"\007\302-\006"
 12710              		.text
 12711              	.Letext0:
 12712              		.file 2 "src/decNumber/decContext.h"
 12713              		.file 3 "src/decNumber/decNumber.h"
 12714              		.file 4 "src/decNumber/decimal64.h"
 12715              		.file 5 "src/decNumber/decimal128.h"
 12716              		.file 6 "src/xeq.h"
 12717              		.file 7 "src/data.h"
 12718              		.file 8 "src/storage.h"
 12719              		.file 9 "src/display.h"
 12720              		.file 10 "src/consts.h"
 12721              		.file 11 "src/stats.h"
 12722              		.file 12 "src/revision.h"
 12723              		.file 13 "src/charset7.h"
 12724              		.file 14 "src/lcd.h"
 12725              		.file 15 "src/decn.h"
 12726              		.file 16 "src/alpha.h"
 12727              		.file 17 "src/int.h"
ARM GAS  /tmp/cc4E4VUn.s 			page 356


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/cc4E4VUn.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/cc4E4VUn.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/cc4E4VUn.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/cc4E4VUn.s:126    .text.set_dig:0000000000000000 $t
     /tmp/cc4E4VUn.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/cc4E4VUn.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/cc4E4VUn.s:262    .text.hms_render:0000000000000000 $t
     /tmp/cc4E4VUn.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/cc4E4VUn.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/cc4E4VUn.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/cc4E4VUn.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/cc4E4VUn.s:596    .text.hms_step:0000000000000000 $t
     /tmp/cc4E4VUn.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/cc4E4VUn.s:664    .text.hms_step:0000000000000034 $d
     /tmp/cc4E4VUn.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/cc4E4VUn.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/cc4E4VUn.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/cc4E4VUn.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/cc4E4VUn.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/cc4E4VUn.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/cc4E4VUn.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/cc4E4VUn.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/cc4E4VUn.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/cc4E4VUn.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/cc4E4VUn.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/cc4E4VUn.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/cc4E4VUn.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/cc4E4VUn.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/cc4E4VUn.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/cc4E4VUn.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/cc4E4VUn.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/cc4E4VUn.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/cc4E4VUn.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/cc4E4VUn.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/cc4E4VUn.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/cc4E4VUn.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/cc4E4VUn.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/cc4E4VUn.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/cc4E4VUn.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/cc4E4VUn.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/cc4E4VUn.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/cc4E4VUn.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/cc4E4VUn.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/cc4E4VUn.s:3755   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.330:0000000000000000 CSWTCH.332
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/cc4E4VUn.s:3767   .text.set_int_x:0000000000000360 $t
     /tmp/cc4E4VUn.s:3874   .text.set_int_x:00000000000003c0 $d
ARM GAS  /tmp/cc4E4VUn.s 			page 357


     /tmp/cc4E4VUn.s:3881   .text.set_annunciators:0000000000000000 $t
     /tmp/cc4E4VUn.s:3888   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/cc4E4VUn.s:4261   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/cc4E4VUn.s:4273   .text.getdig:0000000000000000 $t
     /tmp/cc4E4VUn.s:4281   .text.getdig:0000000000000000 getdig
     /tmp/cc4E4VUn.s:4301   .text.getdig:0000000000000008 $d
     /tmp/cc4E4VUn.s:4306   .text.dot:0000000000000000 $t
     /tmp/cc4E4VUn.s:4314   .text.dot:0000000000000000 dot
     /tmp/cc4E4VUn.s:4337   .text.std_round_fix:0000000000000000 $t
     /tmp/cc4E4VUn.s:4345   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/cc4E4VUn.s:4427   .text.std_round_fix:000000000000004c $d
     /tmp/cc4E4VUn.s:4433   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/cc4E4VUn.s:4441   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/cc4E4VUn.s:4501   .text.set_IO_annunciator:000000000000001c $d
     /tmp/cc4E4VUn.s:4508   .text.pixel_length:0000000000000000 $t
     /tmp/cc4E4VUn.s:4516   .text.pixel_length:0000000000000000 pixel_length
     /tmp/cc4E4VUn.s:4607   .text.set_status:0000000000000000 $t
     /tmp/cc4E4VUn.s:4614   .text.set_status:0000000000000000 set_status
     /tmp/cc4E4VUn.s:4687   .text.set_status:0000000000000038 $d
     /tmp/cc4E4VUn.s:4692   .text.set_x_dn:0000000000000000 $t
     /tmp/cc4E4VUn.s:4700   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/cc4E4VUn.s:5468   .text.set_x_dn:0000000000000328 $d
     /tmp/cc4E4VUn.s:5477   .text.set_x_dn:000000000000033c $t
     /tmp/cc4E4VUn.s:5596   .text.set_x_dn:00000000000003dc $d
     /tmp/cc4E4VUn.s:5602   .text.set_x_dn:00000000000003f0 $t
     /tmp/cc4E4VUn.s:5629   .text.set_x_dn:000000000000041c $d
     /tmp/cc4E4VUn.s:5635   .text.set_x_dn:0000000000000426 $t
     /tmp/cc4E4VUn.s:6140   .text.set_x_dn:0000000000000644 $d
     /tmp/cc4E4VUn.s:6156   .text.set_x_dn:0000000000000660 $t
     /tmp/cc4E4VUn.s:6870   .text.set_x_dn:0000000000000950 $d
     /tmp/cc4E4VUn.s:6879   .text.set_x:0000000000000000 $t
     /tmp/cc4E4VUn.s:6886   .text.set_x:0000000000000000 set_x
     /tmp/cc4E4VUn.s:6954   .text.format_reg:0000000000000000 $t
     /tmp/cc4E4VUn.s:6962   .text.format_reg:0000000000000000 format_reg
     /tmp/cc4E4VUn.s:7081   .text.format_reg:0000000000000064 $d
     /tmp/cc4E4VUn.s:7087   .text.set_status_right:0000000000000000 $t
     /tmp/cc4E4VUn.s:7094   .text.set_status_right:0000000000000000 set_status_right
     /tmp/cc4E4VUn.s:7238   .text.set_status_right:000000000000006c $d
     /tmp/cc4E4VUn.s:7243   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/cc4E4VUn.s:7250   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/cc4E4VUn.s:7375   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/cc4E4VUn.s:7380   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:7423   .text.annunciators:0000000000000000 $t
     /tmp/cc4E4VUn.s:7430   .text.annunciators:0000000000000000 annunciators
     /tmp/cc4E4VUn.s:8103   .text.annunciators:0000000000000304 $d
     /tmp/cc4E4VUn.s:8124   .text.annunciators:0000000000000340 $t
     /tmp/cc4E4VUn.s:8557   .text.annunciators:00000000000004f8 $d
     /tmp/cc4E4VUn.s:8573   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:8640   .text.display:0000000000000000 $t
     /tmp/cc4E4VUn.s:8648   .text.display:0000000000000000 display
     /tmp/cc4E4VUn.s:9304   .text.display:00000000000002f8 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/cc4E4VUn.s:9323   .text.display:0000000000000330 $t
     /tmp/cc4E4VUn.s:9978   .text.display:00000000000005f4 $d
ARM GAS  /tmp/cc4E4VUn.s 			page 358


     /tmp/cc4E4VUn.s:10003  .text.display:000000000000064c $t
     /tmp/cc4E4VUn.s:10856  .text.display:0000000000000974 $d
     /tmp/cc4E4VUn.s:10872  .text.display:00000000000009a8 $t
     /tmp/cc4E4VUn.s:11750  .text.display:0000000000000d14 $d
     /tmp/cc4E4VUn.s:11774  .text.display:0000000000000d64 $t
     /tmp/cc4E4VUn.s:11934  .text.display:0000000000000e04 $d
     /tmp/cc4E4VUn.s:11939  .text.frozen_display:0000000000000000 $t
     /tmp/cc4E4VUn.s:11947  .text.frozen_display:0000000000000000 frozen_display
     /tmp/cc4E4VUn.s:11977  .text.frozen_display:000000000000001c $d
     /tmp/cc4E4VUn.s:11982  .text.message:0000000000000000 $t
     /tmp/cc4E4VUn.s:11990  .text.message:0000000000000000 message
     /tmp/cc4E4VUn.s:12119  .text.message:0000000000000060 $d
     /tmp/cc4E4VUn.s:12127  .text.error_message:0000000000000000 $t
     /tmp/cc4E4VUn.s:12135  .text.error_message:0000000000000000 error_message
     /tmp/cc4E4VUn.s:12278  .text.error_message:000000000000006c $d
     /tmp/cc4E4VUn.s:12290  .rodata.str1.4:0000000000000000 $d
     /tmp/cc4E4VUn.s:12462  .rodata.CSWTCH.330:0000000000000000 CSWTCH.330
     /tmp/cc4E4VUn.s:12481  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/cc4E4VUn.s:12455  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/cc4E4VUn.s:12572  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/cc4E4VUn.s:12359  .rodata:0000000000000000 $d
     /tmp/cc4E4VUn.s:12442  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/cc4E4VUn.s:12443  .bss.DecimalMode:0000000000000000 $d
     /tmp/cc4E4VUn.s:12448  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/cc4E4VUn.s:12449  .bss.SeparatorMode:0000000000000000 $d
     /tmp/cc4E4VUn.s:12451  .bss.no_status_top:0000000000000000 $d
     /tmp/cc4E4VUn.s:12458  .rodata.CSWTCH.330:0000000000000000 $d
     /tmp/cc4E4VUn.s:12468  .rodata.CSWTCH.357:0000000000000000 $d
     /tmp/cc4E4VUn.s:12472  .rodata.CSWTCH.357:0000000000000000 CSWTCH.357
     /tmp/cc4E4VUn.s:12477  .rodata.DIGITS:0000000000000000 $d
     /tmp/cc4E4VUn.s:12484  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/cc4E4VUn.s:12488  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/cc4E4VUn.s:12491  .rodata.S7_INF:0000000000000000 $d
     /tmp/cc4E4VUn.s:12495  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/cc4E4VUn.s:12498  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/cc4E4VUn.s:12502  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/cc4E4VUn.s:12505  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/cc4E4VUn.s:12509  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/cc4E4VUn.s:12512  .rodata.S7_NaN:0000000000000000 $d
     /tmp/cc4E4VUn.s:12516  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/cc4E4VUn.s:12519  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/cc4E4VUn.s:12523  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/cc4E4VUn.s:12526  .rodata.S7_STEP:0000000000000000 $d
     /tmp/cc4E4VUn.s:12530  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/cc4E4VUn.s:12533  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/cc4E4VUn.s:12537  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/cc4E4VUn.s:12540  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/cc4E4VUn.s:12544  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/cc4E4VUn.s:12547  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/cc4E4VUn.s:12551  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/cc4E4VUn.s:12554  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/cc4E4VUn.s:12558  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/cc4E4VUn.s:12561  .rodata.S_SURE:0000000000000000 $d
     /tmp/cc4E4VUn.s:12565  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/cc4E4VUn.s:12568  .rodata.SvnRevision:0000000000000000 $d
     /tmp/cc4E4VUn.s:12575  .rodata.digtbl:0000000000000000 $d
ARM GAS  /tmp/cc4E4VUn.s 			page 359


     /tmp/cc4E4VUn.s:12579  .rodata.digtbl:0000000000000000 digtbl
     /tmp/cc4E4VUn.s:12588  .rodata.error_table.8495:0000000000000000 $d
     /tmp/cc4E4VUn.s:12592  .rodata.error_table.8495:0000000000000000 error_table.8495
     /tmp/cc4E4VUn.s:12620  .rodata.error_table_text.8496:0000000000000000 $d
     /tmp/cc4E4VUn.s:12624  .rodata.error_table_text.8496:0000000000000000 error_table_text.8496
     /tmp/cc4E4VUn.s:12652  .rodata.libname:0000000000000000 $d
     /tmp/cc4E4VUn.s:12656  .rodata.libname:0000000000000000 libname
     /tmp/cc4E4VUn.s:12662  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/cc4E4VUn.s:12666  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/cc4E4VUn.s:12676  .rodata.libname_text:0000000000000000 $d
     /tmp/cc4E4VUn.s:12680  .rodata.libname_text:0000000000000000 libname_text
     /tmp/cc4E4VUn.s:12690  .rodata.shift_chars.8594:0000000000000000 $d
     /tmp/cc4E4VUn.s:12694  .rodata.shift_chars.8594:0000000000000000 shift_chars.8594
     /tmp/cc4E4VUn.s:12697  .rodata.small_dots.8788:0000000000000000 $d
     /tmp/cc4E4VUn.s:12701  .rodata.small_dots.8788:0000000000000000 small_dots.8788
     /tmp/cc4E4VUn.s:12704  .rodata.small_minus.8787:0000000000000000 $d
     /tmp/cc4E4VUn.s:12708  .rodata.small_minus.8787:0000000000000000 small_minus.8787

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
ARM GAS  /tmp/cc4E4VUn.s 			page 360


__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
get_const
alpha_rcl_s
getprog
prt
multicmds
find_label_from
global_regs
free_mem
free_flash
local_regs
findmultilbl
copyreg
sigma_val
getX
packed_from_number
ARM GAS  /tmp/cc4E4VUn.s 			page 361


set_NaN
do_conv
SizeStatRegs
StackBase
monfuncs
slen

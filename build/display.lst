ARM GAS  /tmp/ccxUm1xs.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** #ifndef REALBUILD
  59:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  60:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  61:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  62:src/display.c **** char forceDispPlot;
  63:src/display.c **** #endif
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** #ifndef REALBUILD
  79:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  80:src/display.c **** #endif
  81:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  82:src/display.c **** #ifndef REALBUILD
  83:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  84:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
ARM GAS  /tmp/ccxUm1xs.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  90:src/display.c **** #endif
  91:src/display.c **** 
  92:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  93:src/display.c **** static const char S7_fract_LT[] = " Lt";
  94:src/display.c **** static const char S7_fract_GT[] = " Gt";
  95:src/display.c **** 
  96:src/display.c **** static const char libname[][5] = {
  97:src/display.c ****   "rAMm", "Lib ", "Bup ",
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c ****   "roMm"
 100:src/display.c **** #endif
 101:src/display.c **** };
 102:src/display.c **** 
 103:src/display.c **** #ifndef REALBUILD
 104:src/display.c **** static const char libname_text[][10] = {
 105:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 106:src/display.c **** };
 107:src/display.c **** static const char libname_shorttext[][5] = {
 108:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 109:src/display.c **** };
 110:src/display.c **** #endif
 111:src/display.c **** 
 112:src/display.c **** 
 113:src/display.c **** /* Set the separator and decimal mode globals
 114:src/display.c ****  */
 115:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 115 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 116:src/display.c ****   // Separators used by various modes
 117:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 117 3 view .LVU1
  35              		.loc 1 117 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 118:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 118 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 117 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 117 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 115:src/display.c ****   // Separators used by various modes
  44              		.loc 1 115 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 117 6 view .LVU7
  50 0010 0ED0     		beq	.L2
ARM GAS  /tmp/ccxUm1xs.s 			page 4


  51              		.loc 1 118 5 is_stmt 1 view .LVU8
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 119 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 120:src/display.c ****   }
 121:src/display.c ****   else {
 122:src/display.c ****     SeparatorMode = SEP_COMMA;
 123:src/display.c ****     DecimalMode = DECIMAL_DOT;
 124:src/display.c ****   }
 125:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 125 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 119 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 118 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 119 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 125 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 118 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 119 5 is_stmt 1 view .LVU16
  67              		.loc 1 125 3 view .LVU17
  68              		.loc 1 125 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 125 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 126:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 126 5 is_stmt 1 view .LVU20
  76              		.loc 1 126 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 127:src/display.c **** }
  80              		.loc 1 127 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 122 5 is_stmt 1 view .LVU23
 123:src/display.c ****   }
  90              		.loc 1 123 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
ARM GAS  /tmp/ccxUm1xs.s 			page 5


 125:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 125 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 123:src/display.c ****   }
  94              		.loc 1 123 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 122 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 125:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 125 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 122 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 123:src/display.c ****   }
 102              		.loc 1 123 5 is_stmt 1 view .LVU30
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 125 3 view .LVU31
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 125 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 125 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 127 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 128:src/display.c **** 
 129:src/display.c **** 
 130:src/display.c **** /* Table of error messages.
 131:src/display.c ****  * These consist of a double string.  The first is displayed in the
 132:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 133:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
ARM GAS  /tmp/ccxUm1xs.s 			page 6


 134:src/display.c ****  */
 135:src/display.c **** void error_message(const unsigned int e) 
 136:src/display.c **** {
 137:src/display.c **** #define MSG1(top) top "\0"
 138:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 139:src/display.c **** 
 140:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 141:src/display.c ****   static const char *const error_table[] = 
 142:src/display.c ****     {
 143:src/display.c ****       // manually get the order correct!
 144:src/display.c ****       MSG2("Running", "ProGraMm"),
 145:src/display.c ****       MSG1("Domain"),
 146:src/display.c ****       MSG2("Bad time", "or dAtE"),
 147:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 148:src/display.c ****       MSG1("+\237"),
 149:src/display.c ****       MSG1("-\237"),
 150:src/display.c ****       MSG2("No such", "LAbEL"),
 151:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 152:src/display.c ****       MSG1("Out of range"),
 153:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 154:src/display.c ****       MSG2("Bad digit", "1"),
 155:src/display.c ****       MSG2("Too long", "1"),
 156:src/display.c **** #else
 157:src/display.c ****       MSG1("Bad digit"),
 158:src/display.c ****       MSG1("Too long"),
 159:src/display.c **** #endif
 160:src/display.c ****       MSG2("RAM is", "FuLL"),
 161:src/display.c ****       MSG2("Stack", "CLASH"),
 162:src/display.c ****       MSG1("Bad mode"),
 163:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 164:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 165:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 166:src/display.c ****       MSG1("I/O"),
 167:src/display.c ****       MSG2("Invalid", "dAtA"),
 168:src/display.c ****       MSG2("Write", "ProtEctEd"),
 169:src/display.c ****       MSG2("No root", "Found"),
 170:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 171:src/display.c ****       MSG1("Singular"),
 172:src/display.c ****       MSG2("Flash is", "FuLL"),
 173:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 174:src/display.c **** #ifndef SHIFT_EXPONENT
 175:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG2("Too\007\304 small", "1"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG2("Too small", "1"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG2("Too big", "1"),
 182:src/display.c **** #  else
 183:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 184:src/display.c ****       MSG1("Too\007\304 small"),
 185:src/display.c **** #     else
 186:src/display.c ****       MSG1("Too small"),
 187:src/display.c **** #     endif
 188:src/display.c ****       MSG1("Too big"),
 189:src/display.c **** #  endif
 190:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 7


 191:src/display.c **** #ifdef INCLUDE_C_LOCK
 192:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 193:src/display.c **** #endif
 194:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 195:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 196:src/display.c ****       MSG2("Interrupted", "X"),
 197:src/display.c **** #endif
 198:src/display.c ****     };
 199:src/display.c **** #undef MSG1
 200:src/display.c **** #undef MSG2
 201:src/display.c **** #ifndef REALBUILD
 202:src/display.c ****   static const char *const error_table_text[] =
 203:src/display.c ****     {
 204:src/display.c ****       " P r o g r a m ",
 205:src/display.c ****       "",
 206:src/display.c ****       " o r   d a t e ",
 207:src/display.c ****       " O p - c o d e ",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " L a b e l ",
 211:src/display.c ****       " O p e r a t i o n ",
 212:src/display.c ****       "",
 213:src/display.c ****       "",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " C l a s h ",
 217:src/display.c ****       "",
 218:src/display.c ****       " T o o   s m a l l ",
 219:src/display.c ****       " D a t a   p o i n t s ",
 220:src/display.c ****       " P a r a m e t e r ",
 221:src/display.c ****       "",
 222:src/display.c ****       " D a t a ",
 223:src/display.c ****       " P r o t e c t e d ",
 224:src/display.c ****       " F o u n d ",
 225:src/display.c ****       " M i s m a t c h ",
 226:src/display.c ****       "",
 227:src/display.c ****       " F u l l ",
 228:src/display.c ****       " I n s t a l l e d ",
 229:src/display.c **** #ifndef SHIFT_EXPONENT
 230:src/display.c ****       "",
 231:src/display.c ****       "",
 232:src/display.c **** #endif
 233:src/display.c **** #ifdef INCLUDE_C_LOCK
 234:src/display.c ****       "",
 235:src/display.c **** #endif
 236:src/display.c ****       "",
 237:src/display.c ****     };
 238:src/display.c **** #endif
 239:src/display.c **** 
 240:src/display.c ****   if (e != ERR_NONE || Running) {
 241:src/display.c ****     const char *p = error_table[e];
 242:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 243:src/display.c ****     if (*q == '\0')
 244:src/display.c ****       q = S7_ERROR;
 245:src/display.c ****     if (*q == 'X') {
 246:src/display.c ****       DispMsg = p;
 247:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccxUm1xs.s 			page 8


 248:src/display.c ****     }
 249:src/display.c ****     else {
 250:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 251:src/display.c ****       if (*q == '1')
 252:src/display.c **** 	q = CNULL;
 253:src/display.c **** #endif
 254:src/display.c ****       message(p, q);
 255:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 256:src/display.c **** #ifndef REALBUILD
 257:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 258:src/display.c **** #endif
 259:src/display.c ****     }
 260:src/display.c **** #ifdef INFRARED
 261:src/display.c ****     if (Tracing) {
 262:src/display.c ****       if (*q == 'X')
 263:src/display.c **** 	print_reg(regX_idx, p, 0);
 264:src/display.c ****       else {
 265:src/display.c **** 	print_tab(0);
 266:src/display.c **** 	print_line(p, 0);
 267:src/display.c **** 	print(' ');
 268:src/display.c **** 	while (*q != '\0') {
 269:src/display.c **** 	  int c = *q;
 270:src/display.c **** 	  if (c >= 'A')
 271:src/display.c **** 	    c |= 0x60; // ASCII lower case
 272:src/display.c **** 	  print(c);
 273:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 274:src/display.c **** 	    ++q;
 275:src/display.c **** 	  ++q;
 276:src/display.c **** 	}
 277:src/display.c **** 	print_advance( 0 );
 278:src/display.c ****       }
 279:src/display.c ****     }
 280:src/display.c **** #endif
 281:src/display.c ****   }
 282:src/display.c **** }
 283:src/display.c **** 
 284:src/display.c **** 
 285:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 286:src/display.c ****  * display.
 287:src/display.c ****  */
 288:src/display.c **** #define D_TOP 64
 289:src/display.c **** #define D_TL 32
 290:src/display.c **** #define D_TR 8
 291:src/display.c **** #define D_MIDDLE 16
 292:src/display.c **** #define D_BL 4
 293:src/display.c **** #define D_BR 1
 294:src/display.c **** #define D_BOTTOM 2
 295:src/display.c **** 
 296:src/display.c **** #include "charset7.h"
 297:src/display.c **** 
 298:src/display.c **** #ifndef REALBUILD
 299:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 300:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 301:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 302:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 303:src/display.c **** 
 304:src/display.c **** static void set_mant_sign_dot()
ARM GAS  /tmp/ccxUm1xs.s 			page 9


 305:src/display.c **** {
 306:src/display.c ****   LastDisplayedNumber[0]='-';
 307:src/display.c ****   set_dot(MANT_SIGN);
 308:src/display.c **** }
 309:src/display.c **** 
 310:src/display.c **** static void clr_mant_sign_dot()
 311:src/display.c **** {
 312:src/display.c ****   LastDisplayedNumber[0]=' ';
 313:src/display.c ****   clr_dot(MANT_SIGN);
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** static void set_exp_sign_dot()
 317:src/display.c **** {
 318:src/display.c ****   LastDisplayedExponent[0]='-';
 319:src/display.c ****   set_dot(EXP_SIGN);
 320:src/display.c **** }
 321:src/display.c **** 
 322:src/display.c **** static void clr_exp_sign_dot()
 323:src/display.c **** {
 324:src/display.c ****   LastDisplayedExponent[0]=' ';
 325:src/display.c ****   clr_dot(EXP_SIGN);
 326:src/display.c **** }
 327:src/display.c **** 
 328:src/display.c **** #else
 329:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 330:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 331:src/display.c **** 
 332:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 333:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 334:src/display.c **** 
 335:src/display.c **** #endif
 336:src/display.c **** 
 337:src/display.c **** #ifndef REALBUILD
 338:src/display.c **** int getdig(int ch)
 339:src/display.c **** #else
 340:src/display.c ****   static int getdig(int ch)
 341:src/display.c **** #endif
 342:src/display.c **** {
 343:src/display.c ****   // perform index lookup
 344:src/display.c ****   return digtbl[ch&0xff];
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** void dot(int n, int on) {
 348:src/display.c ****   if (on)	set_dot(n);
 349:src/display.c ****   else	clr_dot(n);
 350:src/display.c **** }
 351:src/display.c **** 
 352:src/display.c **** 
 353:src/display.c **** /* Set the decimal point *after* the indicated digit
 354:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 355:src/display.c ****  * of decimal.
 356:src/display.c ****  */
 357:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 358:src/display.c ****   if (res) {
 359:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 360:src/display.c ****   } else {
 361:src/display.c ****     set_dot(posn+7);
ARM GAS  /tmp/ccxUm1xs.s 			page 10


 362:src/display.c ****     if (decimal != DECIMAL_DOT)
 363:src/display.c ****       set_dot(posn+8);
 364:src/display.c **** #ifndef REALBUILD
 365:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 366:src/display.c **** #endif
 367:src/display.c ****   }
 368:src/display.c ****   return res;
 369:src/display.c **** }
 370:src/display.c **** 
 371:src/display.c **** /* Set the digit group separator *before* the specified digit.
 372:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 373:src/display.c ****  * sep argument.
 374:src/display.c ****  */
 375:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 376:src/display.c ****   if (sep == SEP_NONE)
 377:src/display.c ****     return res;
 378:src/display.c ****   if (res) {
 379:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 380:src/display.c ****     else *res++ = '.';
 381:src/display.c ****   } else {
 382:src/display.c ****     posn -= SEGS_PER_DIGIT;
 383:src/display.c ****     set_dot(posn+7);
 384:src/display.c ****     if (sep == SEP_COMMA)
 385:src/display.c ****       set_dot(posn+8);
 386:src/display.c **** #ifndef REALBUILD
 387:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 388:src/display.c **** #endif
 389:src/display.c ****   }
 390:src/display.c ****   return res;
 391:src/display.c **** }
 392:src/display.c **** 
 393:src/display.c **** /* Set a digit in positions [base, base+6] */
 394:src/display.c **** static void set_dig(int base, int ch)
 395:src/display.c **** {
 136              		.loc 1 395 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/display.c ****   int i;
 140              		.loc 1 396 3 view .LVU36
 397:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 397 3 view .LVU37
 142              	.LBB178:
 143              	.LBI178:
 338:src/display.c **** #else
 144              		.loc 1 338 5 view .LVU38
 145              	.LBB179:
 344:src/display.c **** }
 146              		.loc 1 344 3 view .LVU39
 344:src/display.c **** }
 147              		.loc 1 344 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 344:src/display.c **** }
 149              		.loc 1 344 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE179:
 152              	.LBE178:
ARM GAS  /tmp/ccxUm1xs.s 			page 11


 398:src/display.c **** #ifndef REALBUILD
 399:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 399 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 395:src/display.c ****   int i;
 155              		.loc 1 395 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB181:
 163              	.LBB180:
 344:src/display.c **** }
 164              		.loc 1 344 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 344:src/display.c **** }
 167              		.loc 1 344 16 view .LVU45
 168              	.LBE180:
 169              	.LBE181:
 170              		.loc 1 399 3 is_stmt 1 view .LVU46
 171              		.loc 1 399 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 400:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 400 5 is_stmt 1 view .LVU48
 174              		.loc 1 400 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 400 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 400 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 400 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 400 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 401:src/display.c ****   else
 402:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 403:src/display.c **** #endif
 404:src/display.c ****   for (i=6; i>=0; i--)
 405:src/display.c ****     {
 406:src/display.c ****       //		dot(base, c & (1 << i));
 407:src/display.c ****       if (c & (1 << i))
 408:src/display.c **** 	set_dot(base);
ARM GAS  /tmp/ccxUm1xs.s 			page 12


 196              		.loc 1 408 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 409:src/display.c ****       else
 410:src/display.c **** 	clr_dot(base);
 411:src/display.c ****       base++;
 199              		.loc 1 411 7 is_stmt 1 view .LVU55
 404:src/display.c ****     {
 200              		.loc 1 404 19 view .LVU56
 404:src/display.c ****     {
 201              		.loc 1 404 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 404:src/display.c ****     {
 204              		.loc 1 404 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 408:src/display.c ****       else
 208              		.loc 1 408 2 is_stmt 1 view .LVU59
 410:src/display.c ****       base++;
 209              		.loc 1 410 2 view .LVU60
 407:src/display.c **** 	set_dot(base);
 210              		.loc 1 407 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 407:src/display.c **** 	set_dot(base);
 212              		.loc 1 407 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 407:src/display.c **** 	set_dot(base);
 216              		.loc 1 407 7 is_stmt 1 view .LVU63
 407:src/display.c **** 	set_dot(base);
 217              		.loc 1 407 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 410:src/display.c ****       base++;
 219              		.loc 1 410 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 411 7 is_stmt 1 view .LVU66
 404:src/display.c ****     {
 223              		.loc 1 404 19 view .LVU67
 404:src/display.c ****     {
 224              		.loc 1 404 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 404:src/display.c ****     {
 227              		.loc 1 404 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 412:src/display.c ****     }
 413:src/display.c **** }
 231              		.loc 1 413 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
ARM GAS  /tmp/ccxUm1xs.s 			page 13


 402:src/display.c **** #endif
 235              		.loc 1 402 5 is_stmt 1 view .LVU71
 402:src/display.c **** #endif
 236              		.loc 1 402 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 402:src/display.c **** #endif
 238              		.loc 1 402 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 402:src/display.c **** #endif
 240              		.loc 1 402 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 402:src/display.c **** #endif
 242              		.loc 1 402 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 402:src/display.c **** #endif
 246              		.loc 1 402 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 414:src/display.c **** 
 415:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 416:src/display.c ****   if (res) *res++ = ch;
 417:src/display.c ****   else	set_dig(base, ch);
 418:src/display.c ****   return res;
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** 
 422:src/display.c **** static void set_digits_string(const char *msg, int j) {
 423:src/display.c ****   for (; *msg != '\0'; msg++) {
 424:src/display.c ****     if (*msg == '.' || *msg == ',')
 425:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 426:src/display.c ****     else {
 427:src/display.c ****       set_dig_s(j, *msg, CNULL);
 428:src/display.c ****       j += SEGS_PER_DIGIT;
 429:src/display.c ****     }
ARM GAS  /tmp/ccxUm1xs.s 			page 14


 430:src/display.c ****   }
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 434:src/display.c ****   int i;
 435:src/display.c ****   const int n = res == NULL ? 3 : 4;
 436:src/display.c **** 
 437:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 438:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 439:src/display.c **** }
 440:src/display.c **** 
 441:src/display.c **** /* Force the exponent display
 442:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 443:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 444:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 445:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 446:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 447:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 448:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 449:src/display.c ****  */
 450:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 451:src/display.c ****   union {
 452:src/display.c ****     char buf[4];
 453:src/display.c ****     int i;
 454:src/display.c ****   } u;
 455:src/display.c ****   int negative;
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 459:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 460:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 461:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 462:src/display.c **** #  else
 463:src/display.c ****   const int show_large_exponent = 1;
 464:src/display.c **** #  endif
 465:src/display.c **** #else
 466:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 467:src/display.c ****   int thousands;
 468:src/display.c **** #  endif
 469:src/display.c ****   const int show_large_exponent = 0;
 470:src/display.c **** #endif
 471:src/display.c **** 
 472:src/display.c ****   negative = flags & 2;
 473:src/display.c ****   if (exp < 0) {
 474:src/display.c ****     negative = 1;
 475:src/display.c ****     exp = -exp;
 476:src/display.c ****   }
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c ****   thousands = exp / 1000;
 479:src/display.c **** #endif
 480:src/display.c ****   if (res) {
 481:src/display.c **** #ifdef INCLUDE_YREG_CODE
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 483:src/display.c ****     if (thousands != 0) {
 484:src/display.c **** #else
 485:src/display.c ****       if (exp > 999) {
 486:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 15


 487:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 488:src/display.c **** 	// No exponent separator for large -ve exponents
 489:src/display.c ****       }
 490:src/display.c ****       else *res++ = 'e'; // Normal separator
 491:src/display.c **** #else
 492:src/display.c ****       *res++ = 'e';
 493:src/display.c **** #endif
 494:src/display.c ****       if (negative) *res++ = '-';
 495:src/display.c ****     }
 496:src/display.c ****     else {
 497:src/display.c ****       if (negative) SET_EXP_SIGN;
 498:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 499:src/display.c ****       if (thousands != 0) {
 500:src/display.c **** #else
 501:src/display.c **** 	if (exp > 999) {
 502:src/display.c **** #endif
 503:src/display.c **** 	  if (!show_large_exponent
 504:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 505:src/display.c **** 	      && (flags & 8) == 0
 506:src/display.c **** #endif
 507:src/display.c **** 	      ) {
 508:src/display.c **** #ifdef REALBUILD
 509:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 510:src/display.c **** #else
 511:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 512:src/display.c **** #endif
 513:src/display.c **** 	    goto no_number;
 514:src/display.c **** 	  }
 515:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 516:src/display.c **** 	  else {
 517:src/display.c **** 	    exp -= thousands * 1000;
 518:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 519:src/display.c **** 	    if (flags & 16) {
 520:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 521:src/display.c **** 	      int i;
 522:src/display.c **** 
 523:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 524:src/display.c **** 		// Clear digits and separators
 525:src/display.c **** 		clr_dot(i);
 526:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 527:src/display.c **** 	    }
 528:src/display.c **** #  endif
 529:src/display.c **** 	    if (negative) {
 530:src/display.c **** 	      CLR_EXP_SIGN;
 531:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 532:src/display.c **** 	    }
 533:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 534:src/display.c **** 	    flags = 1;
 535:src/display.c **** 	  }
 536:src/display.c **** #endif
 537:src/display.c **** 	}
 538:src/display.c ****       }
 539:src/display.c **** #ifdef REALBUILD
 540:src/display.c ****       u.i = 0; // Smaller ARM code
 541:src/display.c **** #else
 542:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 543:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 16


 544:src/display.c ****       if (flags & 5) {
 545:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 546:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 547:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 548:src/display.c **** 	  int i;
 549:src/display.c **** 
 550:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 551:src/display.c **** 	    if (u.buf[i] == '0')
 552:src/display.c **** 	      u.buf[i] = ' ';
 553:src/display.c **** 	    else
 554:src/display.c **** 	      break;
 555:src/display.c **** 	  }
 556:src/display.c **** 	  if (i != 0 && negative) {
 557:src/display.c **** 	    // Move minus sign to right in front of exponent
 558:src/display.c **** 	    CLR_EXP_SIGN;
 559:src/display.c **** 	    u.buf[i - 1] = '-';
 560:src/display.c **** 	  }
 561:src/display.c **** 	}
 562:src/display.c **** #endif
 563:src/display.c ****       }
 564:src/display.c ****       else
 565:src/display.c **** 	num_arg(u.buf, exp);
 566:src/display.c ****     no_number:
 567:src/display.c ****       set_exp_digits_string(u.buf, res);
 568:src/display.c ****     }
 569:src/display.c **** 
 570:src/display.c ****     static void carry_overflow(void) {
 571:src/display.c ****       const int base = SEGS_EXP_BASE;
 572:src/display.c ****       int c;
 573:src/display.c ****       unsigned int b;
 574:src/display.c **** 
 575:src/display.c ****       // Figure out the base
 576:src/display.c ****       switch (State2.smode) {
 577:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 578:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 579:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 580:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 581:src/display.c ****       default:	b = UState.int_base+1;	break;
 582:src/display.c ****       }
 583:src/display.c **** 
 584:src/display.c ****       // Display the base as the first exponent digit
 585:src/display.c ****       if (b > 10 && b < 16)
 586:src/display.c **** 	SET_EXP_SIGN;
 587:src/display.c ****       c = "B34567o9D12345h"[b-2];
 588:src/display.c ****       set_dig(base, c);
 589:src/display.c **** 
 590:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 591:src/display.c ****       if (get_carry())
 592:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 593:src/display.c ****       if (get_overflow())
 594:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 595:src/display.c ****     }
 596:src/display.c **** 
 597:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 598:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 599:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 600:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
ARM GAS  /tmp/ccxUm1xs.s 			page 17


 601:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 602:src/display.c **** #endif
 603:src/display.c **** 
 604:src/display.c ****     /* Display the annunicator text line.
 605:src/display.c ****      * Care needs to be taken to keep things aligned.
 606:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 607:src/display.c ****      */
 608:src/display.c **** #ifdef TOP_ROW
 609:src/display.c ****     static void annunciators(void) {
 610:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 611:src/display.c ****       char buf[42], *p = buf, *q="";
 612:src/display.c ****       char buf2[42], *p2 = buf2;
 613:src/display.c ****       int n;
 614:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 615:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 616:src/display.c ****       // Constant variables and code branches depending on a constant variable
 617:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 618:src/display.c ****       // feature run-time configurable if needed.
 619:src/display.c **** #ifdef INCLUDE_YREG_CODE
 620:src/display.c **** #  ifdef YREG_ALWAYS_ON
 621:src/display.c ****       const int yreg_enabled = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_enabled = UState.show_y;
 624:src/display.c **** #  endif
 625:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 626:src/display.c ****       const int yreg_hms = 1;
 627:src/display.c **** #  else
 628:src/display.c ****       const int yreg_hms = 0;
 629:src/display.c **** #  endif
 630:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 631:src/display.c ****       const int yreg_fract = 1;
 632:src/display.c **** #  else
 633:src/display.c ****       const int yreg_fract = 0;
 634:src/display.c **** #  endif
 635:src/display.c **** #else
 636:src/display.c ****       const int yreg_enabled = 0;
 637:src/display.c ****       const int yreg_hms = 0;
 638:src/display.c ****       const int yreg_fract = 0;
 639:src/display.c **** #endif
 640:src/display.c **** #ifdef RP_PREFIX
 641:src/display.c ****       const int rp_prefix = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int rp_prefix = 0;
 644:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 645:src/display.c **** #endif
 646:src/display.c ****       // Indicates whether font escape code is compiled in.
 647:src/display.c ****       // This variable will always be set at compile time.
 648:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 649:src/display.c ****       const int has_FONT_ESCAPE = 1;
 650:src/display.c **** #else
 651:src/display.c ****       const int has_FONT_ESCAPE = 0;
 652:src/display.c **** #endif
 653:src/display.c **** 
 654:src/display.c ****       xset(buf, '\0', sizeof(buf));
 655:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 656:src/display.c ****       
 657:src/display.c ****       if (is_intmode()) {
ARM GAS  /tmp/ccxUm1xs.s 			page 18


 658:src/display.c **** #ifdef SHOW_STACK_SIZE
 659:src/display.c **** 	if (shift_char == ' ') {
 660:src/display.c **** 	  *p2++ = '\007';
 661:src/display.c **** 	  *p2++ = '\346';
 662:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 663:src/display.c **** 	}
 664:src/display.c **** 	else
 665:src/display.c **** #endif
 666:src/display.c **** 	  {
 667:src/display.c **** 	    *p2++ = shift_char;
 668:src/display.c **** 	    *p2++ = '\006';
 669:src/display.c **** 	  }
 670:src/display.c **** 
 671:src/display.c **** 	switch(int_mode()) {
 672:src/display.c **** 	default:
 673:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 674:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 675:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 676:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 677:src/display.c **** 	}
 678:src/display.c **** 	q = scopy(p2, q);
 679:src/display.c **** 	*q++ = '\006';
 680:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 681:src/display.c **** 
 682:src/display.c **** 	if (IntMaxWindow > 0) {
 683:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 684:src/display.c **** 	  if (*q == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  if (q[1] == '1')
 687:src/display.c **** 	    n += 2;
 688:src/display.c **** 	  while (n-- > 0)
 689:src/display.c **** 	    *p2++ = '\006';
 690:src/display.c **** 
 691:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 692:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 693:src/display.c **** 	}
 694:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 695:src/display.c ****       }
 696:src/display.c **** #ifdef INCLUDE_C_LOCK
 697:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 698:src/display.c **** #else
 699:src/display.c ****       else if (!yreg_enabled
 700:src/display.c **** #endif
 701:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 702:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 703:src/display.c **** #endif
 704:src/display.c **** 	       ) {
 705:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 706:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 707:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 708:src/display.c **** 	if (shift_char == ' ') {
 709:src/display.c **** 	  *p2++ = '\007';
 710:src/display.c **** 	  *p2++ = '\342';
 711:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 712:src/display.c **** 	  *p2++ = '\007';
 713:src/display.c **** 	  *p2++ = '\344';
 714:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
ARM GAS  /tmp/ccxUm1xs.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	else
 717:src/display.c **** #endif
 718:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 719:src/display.c **** 	    *p2++ = shift_char;
 720:src/display.c **** 	    *p2++ = '\006';
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else {
 723:src/display.c **** 	    *p2++ = 'D';
 724:src/display.c **** 	  }
 725:src/display.c **** 
 726:src/display.c **** 	if (State2.cmplx) {
 727:src/display.c **** 	  *p2++ = ' ';
 728:src/display.c **** 	  *p2 = '\024';
 729:src/display.c **** 	  goto skip;
 730:src/display.c **** 	}
 731:src/display.c **** 	if (State2.arrow) {
 732:src/display.c **** 	  *p2++ = ' ';
 733:src/display.c **** 	  *p2 = '\015';
 734:src/display.c **** 	  goto skip;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 738:src/display.c **** 	  if (State2.wascomplex) {
 739:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 740:src/display.c **** 	  }
 741:src/display.c **** 	  else if (rp_prefix) {
 742:src/display.c **** 	    if (RectPolConv == 1) {
 743:src/display.c **** 	      q = "\007\306<";
 744:src/display.c **** 	    }
 745:src/display.c **** 	    else {
 746:src/display.c **** 	      q = "\007\306y";
 747:src/display.c **** 	    }
 748:src/display.c **** 	  }
 749:src/display.c **** 	  p = scopy(buf, q);
 750:src/display.c **** 
 751:src/display.c **** 	  goto display_yreg;
 752:src/display.c **** 	}
 753:src/display.c **** 
 754:src/display.c **** 	switch (UState.date_mode) {
 755:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 756:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 757:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 758:src/display.c **** #endif
 759:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 760:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 761:src/display.c **** #endif
 762:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 763:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 764:src/display.c **** #endif
 765:src/display.c **** #endif
 766:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 767:src/display.c **** 	}
 768:src/display.c **** 	p2 = scopy(p2, q);
 769:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 770:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 771:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
ARM GAS  /tmp/ccxUm1xs.s 			page 20


 772:src/display.c **** 	}
 773:src/display.c **** #else
 774:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 775:src/display.c **** 	*p2++ = '\007';
 776:src/display.c **** 	*p2++ = '\342';
 777:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 778:src/display.c **** #endif
 779:src/display.c ****       }
 780:src/display.c ****       else { // yreg_enabled
 781:src/display.c **** 	// do top-related things first
 782:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 783:src/display.c **** 	if (State2.cmplx) {
 784:src/display.c **** 	  *p2++ = '\007';
 785:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 786:src/display.c **** 	  *p2++ = shift_char;
 787:src/display.c **** 	  *p2++ = '\024';
 788:src/display.c **** 	}
 789:src/display.c **** 	else {// if (shift_char != ' ') {
 790:src/display.c **** 	  *p2++ = '\007';
 791:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 792:src/display.c **** 	  *p2++ = shift_char;
 793:src/display.c **** 	}
 794:src/display.c **** #endif
 795:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 796:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 797:src/display.c **** 	  *p2++ = '\007';
 798:src/display.c **** 	  *p2++ = '\207';
 799:src/display.c **** 	  *p2++ = '\007';	    
 800:src/display.c **** 	}
 801:src/display.c **** 	else {
 802:src/display.c **** 	  *p2++ = '\007';
 803:src/display.c **** 	  *p2++ = '\207';
 804:src/display.c **** 	  *p2++ = ' ';
 805:src/display.c **** 	}
 806:src/display.c **** #endif
 807:src/display.c **** #ifndef SHOW_STACK_SIZE
 808:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 809:src/display.c **** 	p2 = scopy(p2, q);
 810:src/display.c **** #else
 811:src/display.c **** 	if (is_dblmode()) {
 812:src/display.c **** 	  *p2++ = '\007';
 813:src/display.c **** 	  *p2++ = '\342';
 814:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 815:src/display.c **** 	  *p2++ = '\007';
 816:src/display.c **** 	  *p2++ = '\345';
 817:src/display.c **** 	  *p2++ = 'D';
 818:src/display.c **** 	}
 819:src/display.c **** 	else {
 820:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 821:src/display.c **** 	  p2 = scopy(p2, q);
 822:src/display.c **** 	}
 823:src/display.c **** #endif
 824:src/display.c **** 
 825:src/display.c **** 	switch (UState.date_mode) {
 826:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 827:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 828:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
ARM GAS  /tmp/ccxUm1xs.s 			page 21


 829:src/display.c **** #endif
 830:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 831:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 832:src/display.c **** #endif
 833:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 834:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 835:src/display.c **** #endif
 836:src/display.c **** #endif
 837:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 838:src/display.c **** 	}
 839:src/display.c **** 	  
 840:src/display.c **** 	//      no_copy:
 841:src/display.c **** 	// display either arrow or datemode
 842:src/display.c **** 	if (State2.arrow) {
 843:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 844:src/display.c **** 	} // no need to skip y display with arrow here
 845:src/display.c **** 	else {
 846:src/display.c **** 	  p2 = scopy(p2, q);
 847:src/display.c **** 	}
 848:src/display.c **** 	// now do the annotations, if any, for the middle row:
 849:src/display.c **** #ifdef INCLUDE_C_LOCK
 850:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 851:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 852:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 853:src/display.c **** 	  }
 854:src/display.c **** 	  else {
 855:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 856:src/display.c **** 	  }
 857:src/display.c **** 	  scopy(p, q);
 858:src/display.c **** 	  goto skip;
 859:src/display.c **** 	}
 860:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 861:src/display.c **** 	  q = "\007\307<";
 862:src/display.c **** 	  p = scopy(p, q);
 863:src/display.c **** 	}
 864:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 865:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 866:src/display.c **** 	  p = scopy(p, q);
 867:src/display.c **** 	}
 868:src/display.c **** #else
 869:src/display.c **** 	
 870:src/display.c **** 	if (State2.wascomplex) {
 871:src/display.c **** 	  q = "\007\207i";
 872:src/display.c **** 	  p = scopy(p, q);
 873:src/display.c **** 	  //	    goto no_copy;
 874:src/display.c **** 	}
 875:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 876:src/display.c **** 	  q = "\007\307<";
 877:src/display.c **** 	  p = scopy(p, q);
 878:src/display.c **** 	  //	    goto no_copy;
 879:src/display.c **** 	}
 880:src/display.c **** 	else
 881:src/display.c **** #endif
 882:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 883:src/display.c **** 	    q = "\007\307y";
 884:src/display.c **** 	    p = scopy(p, q);
 885:src/display.c **** 	    //	    goto no_copy;
ARM GAS  /tmp/ccxUm1xs.s 			page 22


 886:src/display.c **** 	  }
 887:src/display.c ****       
 888:src/display.c **** 	if (State2.runmode) {
 889:src/display.c **** 	  decNumber y;
 890:src/display.c **** 	display_yreg:
 891:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 892:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 893:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 894:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 895:src/display.c **** 	   */
 896:src/display.c **** 	  if (is_intmode()) {
 897:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 898:src/display.c **** 	    goto skip;
 899:src/display.c **** 	  }
 900:src/display.c **** #ifdef INCLUDE_C_LOCK
 901:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 902:src/display.c **** 	    getRegister(&y, regK_idx);
 903:src/display.c **** 	  }
 904:src/display.c **** 	  else {
 905:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 906:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 907:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 908:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 909:src/display.c **** 	  }
 910:src/display.c **** #else
 911:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 912:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 913:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 914:src/display.c **** #endif
 915:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 916:src/display.c **** #ifdef INCLUDE_C_LOCK
 917:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 918:src/display.c **** #else
 919:src/display.c **** 	    if (yreg_hms && State2.hms) {
 920:src/display.c **** #endif
 921:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 922:src/display.c **** 
 923:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 924:src/display.c **** 	      UState.nothousands = 1;
 925:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 926:src/display.c **** 	      UState.nothousands = saved_nothousands;
 927:src/display.c **** 	      // First replace the '@' character with the degree symbol
 928:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 929:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 930:src/display.c **** 	      // then remove the fractional part of the seconds.
 931:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 932:src/display.c **** 	      while (*p) {
 933:src/display.c **** 		replace_char(buf, p[0], p[1]);
 934:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 935:src/display.c **** 		  goto skip;
 936:src/display.c **** 		}
 937:src/display.c **** 		p += 2;
 938:src/display.c **** 	      }
 939:src/display.c **** 	      goto skip;
 940:src/display.c **** 	    }
 941:src/display.c **** 	    if (yreg_fract && UState.fract
 942:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccxUm1xs.s 			page 23


 943:src/display.c **** 		&& !State2.cmplx
 944:src/display.c **** #endif
 945:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 946:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 947:src/display.c **** #endif
 948:src/display.c **** 		&& set_x_fract(&y, p)) {
 949:src/display.c **** 	      char ltgteq;
 950:src/display.c **** 
 951:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 952:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 953:src/display.c **** 	      ltgteq = *q;
 954:src/display.c **** 	      switch (ltgteq) {
 955:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 956:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 957:src/display.c **** 	      }
 958:src/display.c **** 	      scopy(q, "\007\344?");
 959:src/display.c **** 	      q[2] = ltgteq;
 960:src/display.c **** 
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 962:src/display.c **** 		goto skip;
 963:src/display.c **** 	      }
 964:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 965:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 966:src/display.c **** 		goto skip;
 967:src/display.c **** 	      }
 968:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 969:src/display.c **** 	    }
 970:src/display.c **** 	  }
 971:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 972:src/display.c **** 	    int extra_pixels;
 973:src/display.c **** 
 974:src/display.c **** 	    set_x_dn(&y, p, &n);
 975:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 976:src/display.c **** 	    if (extra_pixels <= 0)
 977:src/display.c **** 	      break;
 978:src/display.c **** 
 979:src/display.c **** 	    xset(p, '\0', n+10);
 980:src/display.c **** 
 981:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 982:src/display.c **** 	  }
 983:src/display.c **** 	}
 984:src/display.c ****       }
 985:src/display.c ****       
 986:src/display.c ****     skip:
 987:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 988:src/display.c ****       set_status_top_always(buf2);
 989:src/display.c ****       
 990:src/display.c ****     }
 991:src/display.c **** #else
 992:src/display.c ****     static void annunciators(void) {
 993:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 994:src/display.c ****       char buf[42], *p = buf, *q="";
 995:src/display.c ****       int n;
 996:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 997:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 998:src/display.c ****       // Constant variables and code branches depending on a constant variable
 999:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
ARM GAS  /tmp/ccxUm1xs.s 			page 24


1000:src/display.c ****       // feature run-time configurable if needed.
1001:src/display.c **** #ifdef INCLUDE_YREG_CODE
1002:src/display.c **** #  ifdef YREG_ALWAYS_ON
1003:src/display.c ****       const int yreg_enabled = 1;
1004:src/display.c **** #  else
1005:src/display.c ****       const int yreg_enabled = UState.show_y;
1006:src/display.c **** #  endif
1007:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1008:src/display.c ****       const int yreg_hms = 1;
1009:src/display.c **** #  else
1010:src/display.c ****       const int yreg_hms = 0;
1011:src/display.c **** #  endif
1012:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1013:src/display.c ****       const int yreg_fract = 1;
1014:src/display.c **** #  else
1015:src/display.c ****       const int yreg_fract = 0;
1016:src/display.c **** #  endif
1017:src/display.c **** #else
1018:src/display.c ****       const int yreg_enabled = 0;
1019:src/display.c ****       const int yreg_hms = 0;
1020:src/display.c ****       const int yreg_fract = 0;
1021:src/display.c **** #endif
1022:src/display.c **** #ifdef RP_PREFIX
1023:src/display.c ****       const int rp_prefix = 1;
1024:src/display.c **** #else
1025:src/display.c ****       const int rp_prefix = 0;
1026:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1027:src/display.c **** #endif
1028:src/display.c ****       // Indicates whether font escape code is compiled in.
1029:src/display.c ****       // This variable will always be set at compile time.
1030:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1031:src/display.c ****       const int has_FONT_ESCAPE = 1;
1032:src/display.c **** #else
1033:src/display.c ****       const int has_FONT_ESCAPE = 0;
1034:src/display.c **** #endif
1035:src/display.c **** 
1036:src/display.c ****       xset(buf, '\0', sizeof(buf));
1037:src/display.c ****       
1038:src/display.c ****       if (is_intmode()) {
1039:src/display.c **** #ifdef SHOW_STACK_SIZE
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\346';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	}
1045:src/display.c **** 	else
1046:src/display.c **** #endif
1047:src/display.c **** 	  {
1048:src/display.c **** 	    *p++ = shift_char;
1049:src/display.c **** 	    *p++ = '\006';
1050:src/display.c **** 	  }
1051:src/display.c **** 
1052:src/display.c **** 	switch(int_mode()) {
1053:src/display.c **** 	default:
1054:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1055:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1056:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
ARM GAS  /tmp/ccxUm1xs.s 			page 25


1057:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1058:src/display.c **** 	}
1059:src/display.c **** 	q = scopy(p, q);
1060:src/display.c **** 	*q++ = '\006';
1061:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1062:src/display.c **** 
1063:src/display.c **** 	if (IntMaxWindow > 0) {
1064:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1065:src/display.c **** 	  if (*q == '1')
1066:src/display.c **** 	    n += 2;
1067:src/display.c **** 	  if (q[1] == '1')
1068:src/display.c **** 	    n += 2;
1069:src/display.c **** 	  while (n-- > 0)
1070:src/display.c **** 	    *p++ = '\006';
1071:src/display.c **** 
1072:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1073:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1074:src/display.c **** 	}
1075:src/display.c ****       }
1076:src/display.c **** #ifdef INCLUDE_C_LOCK
1077:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1078:src/display.c **** #else
1079:src/display.c ****       else if (!yreg_enabled
1080:src/display.c **** #endif
1081:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1082:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1083:src/display.c **** #endif
1084:src/display.c **** 	       ) {
1085:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1086:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1087:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1088:src/display.c **** 	if (shift_char == ' ') {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\342';
1091:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1092:src/display.c **** 	  *p++ = '\007';
1093:src/display.c **** 	  *p++ = '\344';
1094:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1095:src/display.c **** 	}
1096:src/display.c **** 	else
1097:src/display.c **** #endif
1098:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1099:src/display.c **** 	    *p++ = shift_char;
1100:src/display.c **** 	    *p++ = '\006';
1101:src/display.c **** 	  }
1102:src/display.c **** 	  else {
1103:src/display.c **** 	    *p++ = 'D';
1104:src/display.c **** 	  }
1105:src/display.c **** 
1106:src/display.c **** 	if (State2.cmplx) {
1107:src/display.c **** 	  *p++ = ' ';
1108:src/display.c **** 	  *p = '\024';
1109:src/display.c **** 	  goto skip;
1110:src/display.c **** 	}
1111:src/display.c **** 	if (State2.arrow) {
1112:src/display.c **** 	  *p++ = ' ';
1113:src/display.c **** 	  *p = '\015';
ARM GAS  /tmp/ccxUm1xs.s 			page 26


1114:src/display.c **** 	  goto skip;
1115:src/display.c **** 	}
1116:src/display.c **** 
1117:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1118:src/display.c **** 	  if (State2.wascomplex) {
1119:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1120:src/display.c **** 	  }
1121:src/display.c **** 	  else if (rp_prefix) {
1122:src/display.c **** 	    if (RectPolConv == 1) {
1123:src/display.c **** 	      q = "\007\306<";
1124:src/display.c **** 	    }
1125:src/display.c **** 	    else {
1126:src/display.c **** 	      q = "\007\306y";
1127:src/display.c **** 	    }
1128:src/display.c **** 	  }
1129:src/display.c **** 	  p = scopy(buf, q);
1130:src/display.c **** 
1131:src/display.c **** 	  goto display_yreg;
1132:src/display.c **** 	}
1133:src/display.c **** 
1134:src/display.c **** 	switch (UState.date_mode) {
1135:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1136:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1137:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1138:src/display.c **** #endif
1139:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1140:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1141:src/display.c **** #endif
1142:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1143:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1144:src/display.c **** #endif
1145:src/display.c **** #endif
1146:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1147:src/display.c **** 	}
1148:src/display.c **** 	p = scopy(p, q);
1149:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1150:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1151:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1152:src/display.c **** 	}
1153:src/display.c **** #else
1154:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1155:src/display.c **** 	*p++ = '\007';
1156:src/display.c **** 	*p++ = '\342';
1157:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1158:src/display.c **** #endif
1159:src/display.c ****       }
1160:src/display.c ****       else { // yreg_enabled
1161:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1162:src/display.c **** 	if (State2.cmplx) {
1163:src/display.c **** 	  *p++ = '\007';
1164:src/display.c **** 	  *p++ = '\344';
1165:src/display.c **** 	  *p++ = shift_char;
1166:src/display.c **** 	  q = "\024";
1167:src/display.c **** 	}
1168:src/display.c **** 	else if (shift_char != ' ') {
1169:src/display.c **** 	  *p++ = '\007';
1170:src/display.c **** 	  *p++ = '\307';
ARM GAS  /tmp/ccxUm1xs.s 			page 27


1171:src/display.c **** 	  *p++ = shift_char;
1172:src/display.c **** 	  goto no_copy;
1173:src/display.c **** 	}
1174:src/display.c **** 	else
1175:src/display.c **** #endif
1176:src/display.c **** #ifdef INCLUDE_C_LOCK
1177:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1178:src/display.c **** 			if ( POLAR_DISPLAY ) {
1179:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1180:src/display.c **** 			}
1181:src/display.c **** 			else {
1182:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1183:src/display.c **** 			}
1184:src/display.c **** 			scopy(p, q);
1185:src/display.c **** 			goto skip;
1186:src/display.c **** 		}
1187:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1188:src/display.c **** 			q = "\007\307<";
1189:src/display.c **** 		}
1190:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1191:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1192:src/display.c **** 		}
1193:src/display.c **** #else
1194:src/display.c **** 	  if (State2.wascomplex) {
1195:src/display.c **** 	    q = "\007\207i";
1196:src/display.c **** 	  }
1197:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1198:src/display.c **** 	    q = "\007\307<";
1199:src/display.c **** 	  }
1200:src/display.c **** #endif
1201:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1202:src/display.c **** 	    q = "\007\307y";
1203:src/display.c **** 	  }
1204:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1205:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1206:src/display.c **** 	    q = "\007\207\007";
1207:src/display.c **** 	  }
1208:src/display.c **** #endif
1209:src/display.c **** 	  else {
1210:src/display.c **** #ifndef SHOW_STACK_SIZE
1211:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1212:src/display.c **** #else
1213:src/display.c **** 	    if (is_dblmode()) {
1214:src/display.c **** 	      *p++ = '\007';
1215:src/display.c **** 	      *p++ = '\342';
1216:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1217:src/display.c **** 	      q = "\007\345D";
1218:src/display.c **** 	    }
1219:src/display.c **** 	    else {
1220:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1221:src/display.c **** 	    }
1222:src/display.c **** #endif
1223:src/display.c **** 	  }
1224:src/display.c **** 	p = scopy(p, q);
1225:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1226:src/display.c ****       no_copy:
1227:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 28


1228:src/display.c **** 
1229:src/display.c **** 	if (State2.arrow) {
1230:src/display.c **** 	  scopy(p, "\007\204\006\015");
1231:src/display.c **** 	} else if (State2.runmode) {
1232:src/display.c **** 	  decNumber y;
1233:src/display.c **** 	display_yreg:
1234:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1235:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1236:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1237:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1238:src/display.c **** 	   */
1239:src/display.c **** #ifdef INCLUDE_C_LOCK
1240:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1241:src/display.c **** 		    getRegister(&y, regK_idx);
1242:src/display.c **** 		  }
1243:src/display.c **** 		  else {
1244:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1245:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1246:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1247:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1248:src/display.c **** 		  }
1249:src/display.c **** #else
1250:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1251:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1252:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1253:src/display.c **** #endif
1254:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1255:src/display.c **** #ifdef INCLUDE_C_LOCK
1256:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1257:src/display.c **** #else
1258:src/display.c **** 	    if (yreg_hms && State2.hms) {
1259:src/display.c **** #endif
1260:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1261:src/display.c **** 
1262:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1263:src/display.c **** 	      UState.nothousands = 1;
1264:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1265:src/display.c **** 	      UState.nothousands = saved_nothousands;
1266:src/display.c **** 	      // First replace the '@' character with the degree symbol
1267:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1268:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1269:src/display.c **** 	      // then remove the fractional part of the seconds.
1270:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1271:src/display.c **** 	      while (*p) {
1272:src/display.c **** 		replace_char(buf, p[0], p[1]);
1273:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1274:src/display.c **** 		  goto skip;
1275:src/display.c **** 		}
1276:src/display.c **** 		p += 2;
1277:src/display.c **** 	      }
1278:src/display.c **** 	      goto skip;
1279:src/display.c **** 	    }
1280:src/display.c **** 	    if (yreg_fract && UState.fract
1281:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1282:src/display.c **** 		&& !State2.cmplx
1283:src/display.c **** #endif
1284:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
ARM GAS  /tmp/ccxUm1xs.s 			page 29


1285:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1286:src/display.c **** #endif
1287:src/display.c **** 		&& set_x_fract(&y, p)) {
1288:src/display.c **** 	      char ltgteq;
1289:src/display.c **** 
1290:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1291:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1292:src/display.c **** 	      ltgteq = *q;
1293:src/display.c **** 	      switch (ltgteq) {
1294:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1295:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1296:src/display.c **** 	      }
1297:src/display.c **** 	      scopy(q, "\007\344?");
1298:src/display.c **** 	      q[2] = ltgteq;
1299:src/display.c **** 
1300:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1301:src/display.c **** 		goto skip;
1302:src/display.c **** 	      }
1303:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1304:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1305:src/display.c **** 		goto skip;
1306:src/display.c **** 	      }
1307:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1308:src/display.c **** 	    }
1309:src/display.c **** 	  }
1310:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1311:src/display.c **** 	    int extra_pixels;
1312:src/display.c **** 
1313:src/display.c **** 	    set_x_dn(&y, p, &n);
1314:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1315:src/display.c **** 	    if (extra_pixels <= 0)
1316:src/display.c **** 	      break;
1317:src/display.c **** 
1318:src/display.c **** 	    xset(p, '\0', n+10);
1319:src/display.c **** 
1320:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1321:src/display.c **** 	  }
1322:src/display.c **** 	}
1323:src/display.c ****       }
1324:src/display.c ****       
1325:src/display.c ****     skip:	set_status_top(buf);
1326:src/display.c ****     }
1327:src/display.c **** #endif //top_row
1328:src/display.c ****     static void disp_x(const char *p) {
1329:src/display.c ****       int i;
1330:src/display.c ****       int gotdot = -1;
1331:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1332:src/display.c ****       const
1333:src/display.c **** #endif
1334:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1335:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1336:src/display.c ****       int overflow_to_left = 0;
1337:src/display.c **** #endif
1338:src/display.c **** 
1339:src/display.c ****       if (*p == '-') {
1340:src/display.c **** 	SET_MANT_SIGN;
1341:src/display.c **** 	p++;
ARM GAS  /tmp/ccxUm1xs.s 			page 30


1342:src/display.c ****       }
1343:src/display.c **** 
1344:src/display.c ****       if (is_intmode()) {
1345:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1346:src/display.c **** 	  set_dig(i, *p);
1347:src/display.c **** 	  i += SEGS_PER_DIGIT;
1348:src/display.c **** 	}
1349:src/display.c **** 	carry_overflow();
1350:src/display.c ****       } else {
1351:src/display.c **** 	set_separator_decimal_modes();
1352:src/display.c **** 
1353:src/display.c **** 	i = 0;
1354:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1355:src/display.c **** 	if ( CmdLineDot > 1 ) {
1356:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1357:src/display.c **** 	  const
1358:src/display.c **** #  endif
1359:src/display.c **** 	    int double_dot = 0;
1360:src/display.c **** 	  int j;
1361:src/display.c **** 
1362:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1363:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1364:src/display.c **** 	      gotdot = j;
1365:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1366:src/display.c **** 	      double_dot = (p[j+1] == '.');
1367:src/display.c **** #  endif
1368:src/display.c **** 	    }
1369:src/display.c **** 	  }
1370:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1371:src/display.c **** 	  if (j > 0) {
1372:src/display.c **** 	    p += j + 1;
1373:src/display.c **** 	    i = SEGS_PER_DIGIT;
1374:src/display.c **** 	    if (gotdot <= j) {
1375:src/display.c **** 	      gotdot = 0;
1376:src/display.c **** 	      if (double_dot)
1377:src/display.c **** 		p++;
1378:src/display.c **** 	    }
1379:src/display.c **** 	    else if (*p == '.') {
1380:src/display.c **** 	      gotdot = 0;
1381:src/display.c **** 	      p++;
1382:src/display.c **** 	      if (!double_dot)
1383:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1384:src/display.c **** 	    }
1385:src/display.c **** 	    else gotdot = -1;
1386:src/display.c **** 	    set_dig(0, '<');
1387:src/display.c **** 	    overflow_to_left = 1;
1388:src/display.c **** 	  }
1389:src/display.c **** 	  else gotdot = -1;
1390:src/display.c **** 	}
1391:src/display.c **** #endif
1392:src/display.c **** 
1393:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1394:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1395:src/display.c **** 	       && *p != 'D'
1396:src/display.c **** #endif
1397:src/display.c **** 	       ; p++) {
1398:src/display.c **** 	  if (*p == '.') {
ARM GAS  /tmp/ccxUm1xs.s 			page 31


1399:src/display.c **** 	    if (gotdot < 0)
1400:src/display.c **** 	      gotdot = i;
1401:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1402:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1403:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1404:src/display.c **** 	      if ( *(p+1) == '.' ) {
1405:src/display.c **** 		p++;
1406:src/display.c **** 	      }
1407:src/display.c **** #  else
1408:src/display.c **** 	      if ( i != gotdot ) {
1409:src/display.c **** #  endif
1410:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1411:src/display.c **** 		i += segs_per_digit;
1412:src/display.c **** 	      }
1413:src/display.c **** 	      else {
1414:src/display.c **** 		if ( CmdLineDot > 1 ) {
1415:src/display.c **** 		  i += segs_per_digit;
1416:src/display.c **** 		}
1417:src/display.c **** 		else {
1418:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1419:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1420:src/display.c **** 		}
1421:src/display.c **** 	      }
1422:src/display.c **** #else
1423:src/display.c **** 	      if (i > 0)
1424:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1425:src/display.c **** 	      else {
1426:src/display.c **** 		set_dig(i, '0');
1427:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1428:src/display.c **** 		i += segs_per_digit;
1429:src/display.c **** 	      }
1430:src/display.c **** #endif
1431:src/display.c **** 	    } else {
1432:src/display.c **** 	      set_dig(i, *p);
1433:src/display.c **** 	      i += segs_per_digit;
1434:src/display.c **** 	    }
1435:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1436:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1437:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1438:src/display.c **** #endif
1439:src/display.c **** 	  }
1440:src/display.c **** 
1441:src/display.c **** 	  /* Implement a floating comma */
1442:src/display.c **** 	  if (gotdot < 0)
1443:src/display.c **** 	    gotdot = i;
1444:src/display.c **** 	  for (;;) {
1445:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1446:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1447:src/display.c **** 	      break;
1448:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1449:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1450:src/display.c **** 	      break;
1451:src/display.c **** #endif
1452:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1453:src/display.c **** 	  }
1454:src/display.c **** 
1455:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccxUm1xs.s 			page 32


1456:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1457:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1458:src/display.c **** 	    int flags = 8;
1459:src/display.c **** #  else
1460:src/display.c **** 	    int flags = 12;
1461:src/display.c **** #  endif
1462:src/display.c **** 
1463:src/display.c **** 	    if (*p == 'D')
1464:src/display.c **** 	      flags |= 2;
1465:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1466:src/display.c **** 	      flags |= 16;
1467:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1468:src/display.c **** 	  }
1469:src/display.c **** #else
1470:src/display.c **** 	  if (*p == 'E') {
1471:src/display.c **** 	    p++;
1472:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1473:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1474:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1475:src/display.c **** #  else
1476:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1477:src/display.c **** #  endif
1478:src/display.c **** 	  } 
1479:src/display.c **** #endif
1480:src/display.c **** 	}
1481:src/display.c ****       }
1482:src/display.c **** 
1483:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1484:src/display.c **** 
1485:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1486:src/display.c **** 	const int ws = word_size();
1487:src/display.c **** 	unsigned int b;
1488:src/display.c **** 	long long int vs = value;
1489:src/display.c **** 	unsigned long long int v;
1490:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1491:src/display.c **** 	int i, j, k;
1492:src/display.c **** 	int sign = 0;
1493:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1494:src/display.c **** 
1495:src/display.c **** 	switch (State2.smode) {
1496:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1497:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1498:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1499:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1500:src/display.c **** 	default:	b = int_base();	break;
1501:src/display.c **** 	}
1502:src/display.c **** 
1503:src/display.c **** 	if (!res) {
1504:src/display.c **** 	  IntMaxWindow = 0;
1505:src/display.c **** 	  carry_overflow();
1506:src/display.c **** 	}
1507:src/display.c **** 
1508:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1509:src/display.c **** 	  v = extract_value(value, &sign);
1510:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1511:src/display.c **** 	    v = value;
1512:src/display.c **** 	  if (v == 0) {
ARM GAS  /tmp/ccxUm1xs.s 			page 33


1513:src/display.c **** 	    if (sign)
1514:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1515:src/display.c **** 	    set_dig_s(dig, '0', res);
1516:src/display.c **** 	    return;
1517:src/display.c **** 	  } else
1518:src/display.c **** 	    for (i=0; v != 0; i++) {
1519:src/display.c **** 	      const int r = v % b;
1520:src/display.c **** 	      v /= b;
1521:src/display.c **** 	      buf[i] = DIGITS[r];
1522:src/display.c **** 	    }
1523:src/display.c **** 	} else {
1524:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1525:src/display.c **** 	  if (ws < 64) {
1526:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1527:src/display.c **** 	    vs &= mask;
1528:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1529:src/display.c **** 	      vs |= ~mask;
1530:src/display.c **** 	  }
1531:src/display.c **** 
1532:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1533:src/display.c **** 	    set_dig_s(dig, '0', res);
1534:src/display.c **** 	    return;
1535:src/display.c **** 	  } else if (!UState.leadzero) {
1536:src/display.c **** 	    v = (unsigned long long int)vs;
1537:src/display.c **** 	    for (i=0; v != 0; i++) {
1538:src/display.c **** 	      const int r = v % b;
1539:src/display.c **** 	      v /= b;
1540:src/display.c **** 	      buf[i] = DIGITS[r];
1541:src/display.c **** 	    }
1542:src/display.c **** 	  } else {
1543:src/display.c **** 	    int n;
1544:src/display.c **** 	    const unsigned int b1 = b >> 1;
1545:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1546:src/display.c **** 	    v = (unsigned long long int)vs;
1547:src/display.c **** 
1548:src/display.c **** 	    n = (ws + fac) / (fac+1);
1549:src/display.c **** 	    for (i=0; i<n; i++) {
1550:src/display.c **** 	      const int r = v % b;
1551:src/display.c **** 	      v /= b;
1552:src/display.c **** 	      buf[i] = DIGITS[r];
1553:src/display.c **** 	    }
1554:src/display.c **** 	  }
1555:src/display.c **** 	}
1556:src/display.c **** #ifdef BIGGER_DISPLAY
1557:src/display.c **** #define MAX_INT_Y_DIG 13
1558:src/display.c **** #else
1559:src/display.c **** #define MAX_INT_Y_DIG 7
1560:src/display.c **** #endif
1561:src/display.c **** 	/* At this point i is the number of digits in the output */
1562:src/display.c **** 	int nd = i;
1563:src/display.c **** 	if (res) {
1564:src/display.c **** 	  if (sign) *res++ = '-';
1565:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1566:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1567:src/display.c **** 	      *res++ = buf[i];
1568:src/display.c **** 	    *res++ = '.';
1569:src/display.c **** 	    *res++ = '.';
ARM GAS  /tmp/ccxUm1xs.s 			page 34


1570:src/display.c **** 	  }
1571:src/display.c **** 	  else {
1572:src/display.c **** 	    while (--i >= 0)
1573:src/display.c **** 	      *res++ = buf[i];
1574:src/display.c **** 	  }
1575:src/display.c **** 	} else {
1576:src/display.c **** #if 0
1577:src/display.c **** 	  set_separator_decimal_modes();
1578:src/display.c **** 
1579:src/display.c **** 	  // Allows configuration of digit grouping per base
1580:src/display.c **** 	  static const char grouping[] = 
1581:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1582:src/display.c **** 		    //	   2     3     4     5     6     7     8
1583:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1584:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1585:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1586:src/display.c **** 	    : grouping[b - 2] >> 4;
1587:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1588:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1589:src/display.c **** #else
1590:src/display.c **** 	  // Less flexible but shorter
1591:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1592:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1593:src/display.c **** 	    : b == 16 ? 2 : 3;
1594:src/display.c **** 	  set_separator_decimal_modes();
1595:src/display.c **** #endif
1596:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1597:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1598:src/display.c **** 	    State2.window = 0;
1599:src/display.c **** 	  buf[i] = '\0';
1600:src/display.c **** 
1601:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1602:src/display.c **** 	  for (k = 0; k < 12; k++)
1603:src/display.c **** 	    if (buf[j + k] == '\0')
1604:src/display.c **** 	      break;
1605:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1606:src/display.c **** 	    int ch = buf[j++];
1607:src/display.c **** 	    if (i >= shift)
1608:src/display.c **** 	      ch -= 030;
1609:src/display.c **** 	    set_dig(dig, ch);
1610:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1611:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1612:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1613:src/display.c **** 	  }
1614:src/display.c **** 	  if (sign) {
1615:src/display.c **** 	    if (dig >= 0)
1616:src/display.c **** 	      set_dig(dig, '-');
1617:src/display.c **** 	    else	SET_MANT_SIGN;
1618:src/display.c **** 	  }
1619:src/display.c **** 	}
1620:src/display.c ****       }
1621:src/display.c **** 
1622:src/display.c ****       /* Handle special cases.
1623:src/display.c ****        * return non-zero if the number is special.
1624:src/display.c ****        */
1625:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1626:src/display.c **** 	if (decNumberIsSpecial(x)) {
ARM GAS  /tmp/ccxUm1xs.s 			page 35


1627:src/display.c **** 	  if (decNumberIsNaN(x)) {
1628:src/display.c **** 	    if (res) {
1629:src/display.c **** 	      scopy(res, "NaN");
1630:src/display.c **** 	    } else {
1631:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1632:src/display.c **** #ifndef REALBUILD
1633:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1634:src/display.c **** 	      forceDispPlot=0;
1635:src/display.c **** #endif
1636:src/display.c **** 	    }
1637:src/display.c **** 	    return 1;
1638:src/display.c **** 	  } else {
1639:src/display.c **** 	    if (decNumberIsNegative(x)) {
1640:src/display.c **** 	      if (res) *res++ = '-';
1641:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1642:src/display.c **** 	    }
1643:src/display.c **** 	    if (res)
1644:src/display.c **** 	      *res++ = '\237';
1645:src/display.c **** 	    else {
1646:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1647:src/display.c **** #ifndef REALBUILD
1648:src/display.c **** 	      if (decNumberIsNegative(x)) {
1649:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1650:src/display.c **** 	      }
1651:src/display.c **** 	      else {
1652:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1653:src/display.c **** 	      }
1654:src/display.c **** 	      forceDispPlot=0;
1655:src/display.c **** #endif
1656:src/display.c **** 	    }
1657:src/display.c **** 	    return 1;
1658:src/display.c **** 	  }
1659:src/display.c **** 	}
1660:src/display.c **** 	return 0;
1661:src/display.c ****       }
1662:src/display.c **** 
1663:src/display.c **** 
1664:src/display.c ****       /* Extract the two lowest integral digits from the number
1665:src/display.c ****        */
1666:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1667:src/display.c **** 	decNumber n;
1668:src/display.c **** 
1669:src/display.c **** 	decNumberMod(&n, x, &const_100);
1670:src/display.c **** 	*v = dn_to_int(&n);
1671:src/display.c **** 	dn_mulpow10(&n, x, -2);
1672:src/display.c **** 	decNumberTrunc(res, &n);
1673:src/display.c ****       }
1674:src/display.c **** 
1675:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1675 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1676:src/display.c **** 	char b[32];
 276              		.loc 1 1676 2 view .LVU78
1677:src/display.c **** 	int i, j;
 277              		.loc 1 1677 2 view .LVU79
ARM GAS  /tmp/ccxUm1xs.s 			page 36


1678:src/display.c **** 
1679:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1679 2 view .LVU80
 279              		.loc 1 1679 12 view .LVU81
1675:src/display.c **** 	char b[32];
 280              		.loc 1 1675 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1680:src/display.c **** 	  if (v == 0)
1681:src/display.c **** 	    b[i] = spaces?' ':'0';
1682:src/display.c **** 	  else {
1683:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1683 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1675:src/display.c **** 	char b[32];
 292              		.loc 1 1675 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1675:src/display.c **** 	char b[32];
 295              		.loc 1 1675 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1679:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1679 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1680:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1680 4 is_stmt 1 view .LVU87
 303              		.loc 1 1683 6 view .LVU88
 304              		.loc 1 1683 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1684:src/display.c **** 	    v /= 10;
 311              		.loc 1 1684 6 is_stmt 1 view .LVU90
1685:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1685 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1679:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1679 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1680 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1679:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/ccxUm1xs.s 			page 37


 319              		.loc 1 1679 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1685 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1684:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1684 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1685 6 is_stmt 1 view .LVU97
1679:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1679 17 view .LVU98
1679:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1679 12 view .LVU99
1679:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1679 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1679:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1679 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1679:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1679 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1680 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1681:src/display.c **** 	  else {
 349              		.loc 1 1681 6 is_stmt 1 view .LVU104
1679:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1679 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1679:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1679 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1681:src/display.c **** 	  else {
 355              		.loc 1 1681 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1679:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1679 17 is_stmt 1 view .LVU108
1679:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1679 12 view .LVU109
1679:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1679 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
ARM GAS  /tmp/ccxUm1xs.s 			page 38


 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1679:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1679 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1686:src/display.c **** 	  }
1687:src/display.c **** 	}
1688:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1688 2 is_stmt 1 view .LVU112
 371              		.loc 1 1688 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1689:src/display.c **** 	  b[0] = '0';
1690:src/display.c **** 
1691:src/display.c **** 	/* Copy across and appropriately leading space things
1692:src/display.c **** 	 */
1693:src/display.c **** 	j = *jin;
 374              		.loc 1 1693 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1688:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1688 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1689:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1689 4 is_stmt 1 view .LVU116
1689:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1689 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1693 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1694:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1694 2 view .LVU119
 386              		.loc 1 1694 8 view .LVU120
1693:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1693 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1694 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1695:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1695 4 is_stmt 1 view .LVU123
 395              	.LBB182:
 396              	.LBB183:
 416:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 416 12 view .LVU124
 398              	.LBE183:
 399              	.LBE182:
 400              		.loc 1 1695 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB187:
ARM GAS  /tmp/ccxUm1xs.s 			page 39


 403              	.LBB184:
 416:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 416 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 416:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 416 16 view .LVU127
 408              	.LBE184:
 409              	.LBI182:
 415:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 415 14 is_stmt 1 view .LVU128
 411              	.LBB185:
 416:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 416 3 view .LVU129
 416:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 416 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 416:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 416 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 416:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 416 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 418:src/display.c **** }
 423              		.loc 1 418 3 is_stmt 1 view .LVU133
 418:src/display.c **** }
 424              		.loc 1 418 3 is_stmt 0 view .LVU134
 425              	.LBE185:
 426              	.LBE187:
1696:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1696 4 is_stmt 1 view .LVU135
1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1694 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1696 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1694 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1697:src/display.c **** 	}
1698:src/display.c **** 	*jin = j;
 436              		.loc 1 1698 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1698 2 is_stmt 1 view .LVU140
 440              		.loc 1 1698 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1699:src/display.c **** 	return str;
1700:src/display.c ****       }
 443              		.loc 1 1700 7 view .LVU142
ARM GAS  /tmp/ccxUm1xs.s 			page 40


 444 0092 2846     		mov	r0, r5
1698:src/display.c **** 	return str;
 445              		.loc 1 1698 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1699:src/display.c **** 	return str;
 447              		.loc 1 1699 2 is_stmt 1 view .LVU144
 448              		.loc 1 1700 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB188:
 458              	.LBB186:
 417:src/display.c ****   return res;
 459              		.loc 1 417 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 417:src/display.c ****   return res;
 463              		.loc 1 417 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE186:
 470              	.LBE188:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 433:src/display.c ****   int i;
 485              		.loc 1 433 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 434:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 434 3 view .LVU149
 435:src/display.c **** 
 490              		.loc 1 435 3 view .LVU150
 433:src/display.c ****   int i;
 491              		.loc 1 433 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
ARM GAS  /tmp/ccxUm1xs.s 			page 41


 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 435:src/display.c **** 
 500              		.loc 1 435 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 437 3 is_stmt 1 view .LVU153
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 437 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB189:
 513              	.LBB190:
 417:src/display.c ****   return res;
 514              		.loc 1 417 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 416:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 416 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 416:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 416 19 view .LVU157
 523              	.LBE190:
 524              	.LBE189:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 437 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB196:
 528              	.LBB191:
 416:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 416 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 418:src/display.c **** }
 532              		.loc 1 418 3 is_stmt 1 view .LVU160
 418:src/display.c **** }
 533              		.loc 1 418 3 is_stmt 0 view .LVU161
 534              	.LBE191:
 535              	.LBE196:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 437 36 is_stmt 1 view .LVU162
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 437 13 view .LVU163
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 437 3 is_stmt 0 view .LVU164
ARM GAS  /tmp/ccxUm1xs.s 			page 42


 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 438:src/display.c **** }
 542              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB197:
 544              	.LBB192:
 416:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 416 12 discriminator 3 view .LVU166
 416:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 416 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE192:
 548              	.LBE197:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 437 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB198:
 553              	.LBB193:
 416:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 416 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 416:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 416 16 discriminator 3 view .LVU170
 558              	.LBE193:
 559              	.LBI189:
 415:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 415 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB194:
 416:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 416 3 discriminator 3 view .LVU172
 563              	.LBE194:
 564              	.LBE198:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 437 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB199:
 569              	.LBB195:
 416:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 416 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 417:src/display.c ****   return res;
 573              		.loc 1 417 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 418:src/display.c **** }
 578              		.loc 1 418 3 view .LVU176
 418:src/display.c **** }
 579              		.loc 1 418 3 is_stmt 0 view .LVU177
 580              	.LBE195:
 581              	.LBE199:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccxUm1xs.s 			page 43


 582              		.loc 1 437 36 is_stmt 1 view .LVU178
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 437 13 view .LVU179
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 437 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 439:src/display.c **** 
 589              		.loc 1 439 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439:src/display.c **** 
 591              		.loc 1 439 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1666:src/display.c **** 	decNumber n;
 606              		.loc 1 1666 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1667:src/display.c **** 
 610              		.loc 1 1667 2 view .LVU184
1669:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1669 2 view .LVU185
1666:src/display.c **** 	decNumber n;
 612              		.loc 1 1666 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1666:src/display.c **** 	decNumber n;
 621              		.loc 1 1666 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1669:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1669 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1669:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1669 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
ARM GAS  /tmp/ccxUm1xs.s 			page 44


1666:src/display.c **** 	decNumber n;
 630              		.loc 1 1666 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1669:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1669 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1670 2 is_stmt 1 view .LVU192
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1670 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1671:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1671 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1670 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1671:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1671 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1672:src/display.c ****       }
 649              		.loc 1 1672 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1673:src/display.c **** 
 654              		.loc 1 1673 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1673:src/display.c **** 
 661              		.loc 1 1673 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
ARM GAS  /tmp/ccxUm1xs.s 			page 45


1701:src/display.c **** 
1702:src/display.c **** 
1703:src/display.c ****       /* Display the number in H.MS mode.
1704:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1705:src/display.c ****        */
1706:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1707:src/display.c **** 	decNumber x, y, a, t, u;
1708:src/display.c **** 	int j=0;
1709:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1710:src/display.c **** 	unsigned int hr, min, sec, fs;
1711:src/display.c **** 
1712:src/display.c **** 	if (check_special_dn(rgx, res)) {
1713:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1714:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1715:src/display.c **** 	  return;
1716:src/display.c **** 	}
1717:src/display.c **** 
1718:src/display.c **** 	set_separator_decimal_modes();
1719:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1720:src/display.c **** 	dn_abs(&a, rgx);
1721:src/display.c **** 	if (decNumberIsNegative(&x)) {
1722:src/display.c **** 	  if (res != NULL)
1723:src/display.c **** 	    *res++ += '-';
1724:src/display.c **** 	  else
1725:src/display.c **** 	    SET_MANT_SIGN;
1726:src/display.c **** 	  dn_minus(&x, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 
1729:src/display.c **** 	decNumberHR2HMS(&y, &x);
1730:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1731:src/display.c **** 	decNumberRound(&u, &t);
1732:src/display.c **** 
1733:src/display.c **** 	hms_step(&t, &u, &fs);
1734:src/display.c **** 	hms_step(&u, &t, &sec);
1735:src/display.c **** 	hms_step(&t, &u, &min);
1736:src/display.c **** 	hr = dn_to_int(&t);
1737:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1738:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1739:src/display.c **** 
1740:src/display.c **** 	// degrees
1741:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1742:src/display.c **** 	res = set_dig_s(j, '@', res);
1743:src/display.c **** 	j += SEGS_PER_DIGIT;
1744:src/display.c **** 
1745:src/display.c **** 	// minutes
1746:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1747:src/display.c **** 	res = set_dig_s(j, '\'', res);
1748:src/display.c **** 	j += SEGS_PER_DIGIT;
1749:src/display.c **** 
1750:src/display.c **** 	// seconds
1751:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1752:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1753:src/display.c **** 
1754:src/display.c **** 	// Fractional seconds
1755:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1756:src/display.c **** 
1757:src/display.c **** 	// We're now pointing at the exponent's first digit...
ARM GAS  /tmp/ccxUm1xs.s 			page 46


1758:src/display.c **** 	res = set_dig_s(j, '"', res);
1759:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1760:src/display.c **** 
1761:src/display.c **** 	// Check for values too big or small
1762:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1763:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1764:src/display.c **** 	} else if (! dn_eq0(&a)) {
1765:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1766:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1767:src/display.c **** 	  }
1768:src/display.c **** 	}
1769:src/display.c ****       }
1770:src/display.c **** 
1771:src/display.c **** 
1772:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1773:src/display.c **** 	decNumber x, w, n, d, t;
1774:src/display.c **** 	char buf[32], *p = buf;
1775:src/display.c **** 	int j;
1776:src/display.c **** 
1777:src/display.c **** 	if (check_special_dn(rgx, res))
1778:src/display.c **** 	  return 1;
1779:src/display.c **** 	dn_abs(&x, rgx);
1780:src/display.c **** 	if (dn_ge(&x, &const_100000))
1781:src/display.c **** 	  return 0;
1782:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1783:src/display.c **** 	  return 0;
1784:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1785:src/display.c **** 	  if (res != NULL)
1786:src/display.c **** 	    *res++ += '-';
1787:src/display.c **** 	  else
1788:src/display.c **** 	    SET_MANT_SIGN;
1789:src/display.c **** 	}
1790:src/display.c **** 	decNumberFrac(&w, &x);
1791:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1792:src/display.c **** 
1793:src/display.c **** 	dn_divide(&t, &n, &d);
1794:src/display.c **** 	dn_compare(&t, &t, &w);
1795:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1796:src/display.c **** 
1797:src/display.c **** 	if (dn_eq(&n, &d)) {
1798:src/display.c **** 	  dn_inc(&w);
1799:src/display.c **** 	  decNumberZero(&n);
1800:src/display.c **** 	}
1801:src/display.c **** 
1802:src/display.c **** 	if (!UState.improperfrac) {
1803:src/display.c **** 	  if (!dn_eq0(&w)) {
1804:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1805:src/display.c **** 	    *p++ = ' ';
1806:src/display.c **** 	  }
1807:src/display.c **** 	} else {
1808:src/display.c **** 	  dn_multiply(&x, &w, &d);
1809:src/display.c **** 	  dn_add(&n, &n, &x);
1810:src/display.c **** 	}
1811:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1812:src/display.c **** 	*p++ = '/';
1813:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1814:src/display.c **** 	*p = '\0';
ARM GAS  /tmp/ccxUm1xs.s 			page 47


1815:src/display.c **** 	if ((p - 12) > buf) {
1816:src/display.c **** 	  p -= 12;
1817:src/display.c **** 	  *p = '<';
1818:src/display.c **** 	} else	p = buf;
1819:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1820:src/display.c **** 	  res = set_dig_s(j, *p, res);
1821:src/display.c **** 	  j += SEGS_PER_DIGIT;
1822:src/display.c **** 	}
1823:src/display.c **** 
1824:src/display.c **** 	if (dn_eq0(&t))
1825:src/display.c **** 	  p = (char *)S7_fract_EQ;
1826:src/display.c **** 	else if (decNumberIsNegative(&t))
1827:src/display.c **** 	  p = (char *)S7_fract_LT;
1828:src/display.c **** 	else
1829:src/display.c **** 	  p = (char *)S7_fract_GT;
1830:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1831:src/display.c **** 	  res = set_dig_s(j, *p, res);
1832:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1833:src/display.c **** 	}
1834:src/display.c **** 	return 1;
1835:src/display.c ****       }
1836:src/display.c **** 
1837:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1838:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1839:src/display.c **** 	decNumber c;
1840:src/display.c **** 	int true_exp, x=0;
1841:src/display.c **** 	int min_pos_exp, max_neg_exp;
1842:src/display.c **** 
1843:src/display.c **** 	if ( mode != MODE_STD ) {
1844:src/display.c **** 	  min_pos_exp = 9;
1845:src/display.c **** 	  max_neg_exp = -5;
1846:src/display.c **** 	}
1847:src/display.c **** 	else {
1848:src/display.c **** 	  min_pos_exp = 12;
1849:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1853:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1854:src/display.c **** 
1855:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1856:src/display.c **** 	  x = *dd;
1857:src/display.c **** 	}
1858:src/display.c **** 
1859:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1860:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1861:src/display.c **** 	  *dd += -true_exp;
1862:src/display.c **** 	  return MODE_FIX;
1863:src/display.c **** 	}
1864:src/display.c **** 
1865:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1866:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1867:src/display.c **** 	}
1868:src/display.c **** 	else {
1869:src/display.c **** 	  return MODE_STD;
1870:src/display.c **** 	}
1871:src/display.c ****       }
ARM GAS  /tmp/ccxUm1xs.s 			page 48


1872:src/display.c **** #else
1873:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1874:src/display.c **** 	decNumber b, c;
1875:src/display.c **** 
1876:src/display.c **** 	dn_1(&b);
1877:src/display.c **** 	b.exponent -= UState.dispdigs;
1878:src/display.c **** 	dn_abs(&c, z);
1879:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1880:src/display.c **** 	  return MODE_FIX;
1881:src/display.c **** 	return MODE_STD;
1882:src/display.c ****       }
1883:src/display.c **** #endif
1884:src/display.c **** 
1885:src/display.c ****       /* SHOW display mode
1886:src/display.c ****        * in double precision show left or right part
1887:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1888:src/display.c ****        */
1889:src/display.c ****       static void show_x(char *x, int exp) {
1890:src/display.c **** 	const int dbl = is_dblmode();
1891:src/display.c **** 	char *p;
1892:src/display.c **** 	int i, j;
1893:src/display.c **** 	char *upper_str;
1894:src/display.c **** 	enum separator_modes separator_mode;
1895:src/display.c **** 	char decimal_mark;
1896:src/display.c **** 	char thousands_sep;
1897:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1898:src/display.c **** 	const int grouping = 0;
1899:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1900:src/display.c **** 	const int grouping = !UState.nothousands;
1901:src/display.c **** #else
1902:src/display.c **** 	const int grouping = 1;
1903:src/display.c **** #endif
1904:src/display.c **** 	int negative;
1905:src/display.c **** 
1906:src/display.c **** 	if (x[0] == '-') {
1907:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1908:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1909:src/display.c **** 
1910:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1911:src/display.c **** 	  xcopy(x, small_minus, 4);
1912:src/display.c **** 	  x += 4;
1913:src/display.c **** 	  negative = 4;
1914:src/display.c **** #else
1915:src/display.c **** 	  ++x;
1916:src/display.c **** 	  negative = 1;
1917:src/display.c **** #endif
1918:src/display.c **** 	}
1919:src/display.c **** 	else negative = 0;
1920:src/display.c **** 
1921:src/display.c **** 	p = find_char(x, '\0');
1922:src/display.c **** 	xset(p, '0', 34 - (p - x));
1923:src/display.c **** 
1924:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1925:src/display.c **** 	  separator_mode = SEP_COMMA;
1926:src/display.c **** 	  decimal_mark = '.';
1927:src/display.c **** 	  thousands_sep = ',';
1928:src/display.c **** 	}
ARM GAS  /tmp/ccxUm1xs.s 			page 49


1929:src/display.c **** 	else {
1930:src/display.c **** 	  separator_mode = SEP_DOT;
1931:src/display.c **** 	  decimal_mark = ',';
1932:src/display.c **** 	  thousands_sep = '.';
1933:src/display.c **** 	}
1934:src/display.c **** 
1935:src/display.c **** 	if (State2.window) { // right half in double precision mode
1936:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1937:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1938:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1939:src/display.c **** 
1940:src/display.c **** 	  upper_str = x + 3;
1941:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1942:src/display.c **** 	  if (grouping) {
1943:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1944:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1945:src/display.c **** 	    x += 3 + 13 + 7;
1946:src/display.c **** 	  }
1947:src/display.c **** 	  else x += 3 + 13 + 6;
1948:src/display.c **** #else
1949:src/display.c **** 	  upper_str = x + 13;
1950:src/display.c **** 	  xset(upper_str, '.', 3);
1951:src/display.c **** 	  if (grouping) {
1952:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1953:src/display.c **** 	    upper_str[6] = thousands_sep;
1954:src/display.c **** 	    x += 13 + 3 + 7;
1955:src/display.c **** 	  }
1956:src/display.c **** 	  else x += 13 + 3 + 6;
1957:src/display.c **** #endif
1958:src/display.c **** 	  negative = 0;
1959:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1960:src/display.c **** 	}
1961:src/display.c **** 	else {
1962:src/display.c **** 	  upper_str = x;
1963:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1964:src/display.c **** 	  x[1] = decimal_mark;
1965:src/display.c **** 	  if (grouping) {
1966:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1967:src/display.c **** 	    x[5] = thousands_sep;
1968:src/display.c **** 	    x += 9;
1969:src/display.c **** 	  }
1970:src/display.c **** 	  else x += 8;
1971:src/display.c **** 	  if (dbl) {
1972:src/display.c **** 	    if (exp < 0) {
1973:src/display.c **** 	      x[9] = '-';
1974:src/display.c **** 	      exp = -exp;
1975:src/display.c **** 	    }
1976:src/display.c **** 	    else
1977:src/display.c **** 	      x[9] = ' ';
1978:src/display.c **** 	    j = exp / 1000;
1979:src/display.c **** 	    x[10] = '0' + j;
1980:src/display.c **** 	    exp -= 1000 * j;
1981:src/display.c **** 	  }
1982:src/display.c **** 	  else {
1983:src/display.c **** 	    x[9] = '\0';
1984:src/display.c **** 	    x[10] = '\0';
1985:src/display.c **** 	  }
ARM GAS  /tmp/ccxUm1xs.s 			page 50


1986:src/display.c **** 	  xcopy(x + 1, x, 11);
1987:src/display.c **** 	  *x = 0;
1988:src/display.c **** 	  set_exp(exp, 1, CNULL);
1989:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1990:src/display.c **** 	}
1991:src/display.c **** 	if (grouping) {
1992:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1993:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1994:src/display.c **** 	  }
1995:src/display.c **** 	}
1996:src/display.c **** 
1997:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1998:src/display.c **** 	  set_dig(j, x[i]);
1999:src/display.c **** 
2000:src/display.c **** 	*x = '\0';
2001:src/display.c **** 	set_status(upper_str - negative);
2002:src/display.c ****       }
2003:src/display.c **** 
2004:src/display.c **** 
2005:src/display.c ****       /* Display the X register in the numeric portion of the display.
2006:src/display.c ****        * We have to account for the various display modes and numbers of
2007:src/display.c ****        * digits.
2008:src/display.c ****        */
2009:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2010:src/display.c **** 	decNumber z;
2011:src/display.c **** 	int digits = DISPLAY_DIGITS;
2012:src/display.c **** 
2013:src/display.c **** 	if (dbl)
2014:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2015:src/display.c **** 	else
2016:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2017:src/display.c **** 	set_x_dn(&z, res, &digits);
2018:src/display.c ****       }
2019:src/display.c **** 
2020:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2021:src/display.c **** 	char x[50], *obp = x;
2022:src/display.c **** 	int odig = 0;
2023:src/display.c **** 	int show_exp = 0;
2024:src/display.c **** 	int j;
2025:src/display.c **** 	char mantissa[64];
2026:src/display.c **** 	int exp = 0;
2027:src/display.c **** 	char *p = mantissa;
2028:src/display.c **** 	char *r;
2029:src/display.c **** 	const char *q;
2030:src/display.c **** 	int count, i;
2031:src/display.c **** 	int extra_digits = 0;
2032:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2033:src/display.c **** 	int dd;
2034:src/display.c **** 	int dispdigs;
2035:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2036:src/display.c **** #else
2037:src/display.c **** 	int dd = UState.dispdigs;
2038:src/display.c **** 	int mode = UState.dispmode;
2039:src/display.c **** #endif
2040:src/display.c **** 	int c;
2041:src/display.c **** 	int negative = 0;
2042:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccxUm1xs.s 			page 51


2043:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2044:src/display.c **** 	const int show_large_exponent = 0;
2045:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2046:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
2047:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2048:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2049:src/display.c **** #else
2050:src/display.c **** 	const int show_large_exponent = 1;
2051:src/display.c **** #endif
2052:src/display.c **** 
2053:src/display.c **** 	set_separator_decimal_modes();
2054:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2055:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2056:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2057:src/display.c **** 	    if (State2.hms) {
2058:src/display.c **** 	      set_x_hms(z, res);
2059:src/display.c **** 	      return;
2060:src/display.c **** 	    }
2061:src/display.c **** 	    else if (UState.fract) {
2062:src/display.c **** 	      if (set_x_fract(z, res))
2063:src/display.c **** 		return;
2064:src/display.c **** 	    }
2065:src/display.c **** 	  }
2066:src/display.c **** 	}		
2067:src/display.c **** #else
2068:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2069:src/display.c **** 	  if (State2.hms) {
2070:src/display.c **** 	    set_x_hms(z, res);
2071:src/display.c **** 	    State2.hms = 0;
2072:src/display.c **** 	    return;
2073:src/display.c **** 	  } else if (UState.fract) {
2074:src/display.c **** 	    if (set_x_fract(z, res))
2075:src/display.c **** 	      return;
2076:src/display.c **** 	  }
2077:src/display.c **** 	}
2078:src/display.c **** #endif
2079:src/display.c **** 
2080:src/display.c **** 	if (check_special_dn(z, res))
2081:src/display.c **** 	  return;
2082:src/display.c **** 
2083:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2084:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2085:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2086:src/display.c **** 	  z->exponent = 0;
2087:src/display.c **** 	}
2088:src/display.c **** 
2089:src/display.c **** 	xset(x, '\0', sizeof(x));
2090:src/display.c **** 
2091:src/display.c **** 	if (dn_eq0(z)) {
2092:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2093:src/display.c **** 	    x[0] = '-';
2094:src/display.c **** 	    x[1] = '0';
2095:src/display.c **** 	  } else
2096:src/display.c **** 	    x[0] = '0';
2097:src/display.c **** 	} else
2098:src/display.c **** 	  decNumberToString(z, x);
2099:src/display.c **** 
ARM GAS  /tmp/ccxUm1xs.s 			page 52


2100:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2101:src/display.c **** 	  show_x(x, exp);
2102:src/display.c **** 	  return;
2103:src/display.c **** 	}
2104:src/display.c **** 
2105:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2106:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2107:src/display.c **** 	  //  ALL mode: fill the display
2108:src/display.c **** 	  dd = *display_digits - 1;
2109:src/display.c **** 	else
2110:src/display.c **** 	  dd = dispdigs;
2111:src/display.c **** 
2112:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2113:src/display.c **** 	  int orig_mode = mode;
2114:src/display.c **** 
2115:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2116:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2117:src/display.c **** 	    // allow zeros to be trimmed
2118:src/display.c **** 	    trimzeros = 1;
2119:src/display.c **** 	  if (orig_mode == MODE_STD)
2120:src/display.c **** 	    dd = *display_digits - 1;
2121:src/display.c ****  	}
2122:src/display.c **** #else
2123:src/display.c **** 	if (mode == MODE_STD) {
2124:src/display.c **** 	  mode = std_round_fix(z);
2125:src/display.c **** 	  trimzeros = 1;
2126:src/display.c **** 	  dd = *display_digits - 1;
2127:src/display.c **** 	} else if (dd >= *display_digits)
2128:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2129:src/display.c **** 	  dd = *display_digits - 1;
2130:src/display.c **** #endif
2131:src/display.c **** 
2132:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2133:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2134:src/display.c **** 
2135:src/display.c **** 	q = find_char(x, 'E');
2136:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2137:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2138:src/display.c **** 	if (q == NULL) exp = 0;
2139:src/display.c **** 	else {
2140:src/display.c **** 	  exp = s_to_i(q+1);
2141:src/display.c **** 	  if (*q == 'D') exp = -exp;
2142:src/display.c **** 	}
2143:src/display.c **** #else
2144:src/display.c **** 	if (q == NULL) exp = 0;
2145:src/display.c **** 	else exp = s_to_i(q+1);
2146:src/display.c **** #endif
2147:src/display.c **** 
2148:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2149:src/display.c **** 	for (q=x; *q == ' '; q++);
2150:src/display.c **** 	if (!res) {
2151:src/display.c **** 	  CLR_EXP_SIGN;
2152:src/display.c **** 	  CLR_MANT_SIGN;
2153:src/display.c **** 	}
2154:src/display.c **** 	if (*q == '-') {
2155:src/display.c **** 	  negative = 1;
2156:src/display.c **** 	  q++;
ARM GAS  /tmp/ccxUm1xs.s 			page 53


2157:src/display.c **** 	} else if (*q == '+')
2158:src/display.c **** 	  q++;
2159:src/display.c **** 	for (; *q == '0'; q++);
2160:src/display.c **** 	if (*q == '.') {
2161:src/display.c **** 	  do
2162:src/display.c **** 	    exp--;
2163:src/display.c **** 	  while (*++q == '0');
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2165:src/display.c **** 	    *p++ = *q++;
2166:src/display.c **** 	} else {
2167:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2168:src/display.c **** 	    *p++ = *q++;
2169:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2170:src/display.c **** 	    *p++ = *q++;
2171:src/display.c **** 	    exp++;
2172:src/display.c **** 	  }
2173:src/display.c **** 	  if (*q == '.') {
2174:src/display.c **** 	    q++;
2175:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2176:src/display.c **** 	      *p++ = *q++;
2177:src/display.c **** 	  }
2178:src/display.c **** 	}
2179:src/display.c **** 
2180:src/display.c **** 	if (mode == MODE_FIX) {
2181:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2182:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2183:src/display.c **** 	  else {
2184:src/display.c **** 	    extra_digits = exp;
2185:src/display.c **** 	    /* We might have push the fixed decimals off the
2186:src/display.c **** 	     * screen so adjust if so.
2187:src/display.c **** 	     */
2188:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2189:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2190:src/display.c **** 	  }
2191:src/display.c **** 	}
2192:src/display.c **** 
2193:src/display.c **** 	// Round the mantissa to the number of digits desired
2194:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2195:src/display.c **** 	if (*p >= '5') {	// Round up
2196:src/display.c **** 	  *p = '0';
2197:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2198:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2199:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2200:src/display.c **** 	    mantissa[0] = '1';
2201:src/display.c **** 	    exp++;
2202:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2203:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2204:src/display.c **** 	      extra_digits = 0;
2205:src/display.c **** 	    }
2206:src/display.c **** 	  } else {
2207:src/display.c **** 	    while (*--p == '9')
2208:src/display.c **** 	      *p = '0';
2209:src/display.c **** 	    (*p)++;
2210:src/display.c **** 	  }
2211:src/display.c **** 	}
2212:src/display.c **** 
2213:src/display.c **** 	// Zap what is left
ARM GAS  /tmp/ccxUm1xs.s 			page 54


2214:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2215:src/display.c **** 
2216:src/display.c **** 	p = mantissa;
2217:src/display.c **** 	switch (mode) {
2218:src/display.c **** 	default:
2219:src/display.c **** 	case MODE_STD:   
2220:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2221:src/display.c **** 	  if (count != *display_digits)
2222:src/display.c **** 	    count++;
2223:src/display.c **** 	  // Too big or too small to fit on display
2224:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2225:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2226:src/display.c **** 	    case -1:
2227:src/display.c **** 	    case 2:
2228:src/display.c **** 	      *obp++ = *p++;
2229:src/display.c **** 	      odig++;
2230:src/display.c **** 	      dd--;
2231:src/display.c **** 	      exp--;
2232:src/display.c **** 	    case -2:
2233:src/display.c **** 	    case 1:
2234:src/display.c **** 	      *obp++ = *p++;
2235:src/display.c **** 	      odig++;
2236:src/display.c **** 	      dd--;
2237:src/display.c **** 	      exp--;
2238:src/display.c **** 	    case 0:
2239:src/display.c **** 	      ;
2240:src/display.c **** 	    };
2241:src/display.c **** 	    *obp++ = *p++;
2242:src/display.c **** 	    odig++;
2243:src/display.c **** 	    *obp++ = '.';
2244:src/display.c **** 	    for (i=1; i<count; i++) {
2245:src/display.c **** 	      *obp++ = *p++;
2246:src/display.c **** 	      odig++;
2247:src/display.c **** 	    }
2248:src/display.c **** 	    show_exp = 1;
2249:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2250:src/display.c **** 	    for(i=0; i<=exp; i++) {
2251:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2252:src/display.c **** 		*obp++ = ',';
2253:src/display.c **** 	      *obp++ = *p++;
2254:src/display.c **** 	      odig++;
2255:src/display.c **** 	    }
2256:src/display.c **** 	    *obp++ = '.';
2257:src/display.c **** 	    if (count > (exp + 1)) {
2258:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2259:src/display.c **** 		*obp++ = *p++;
2260:src/display.c **** 		odig++;
2261:src/display.c **** 	      }
2262:src/display.c **** 	    }
2263:src/display.c **** 	  } else {		// All digits to right of decimal point
2264:src/display.c **** 	    *obp++ = '0';
2265:src/display.c **** 	    odig++;
2266:src/display.c **** 	    *obp++ = '.';
2267:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2268:src/display.c **** 	      *obp++ = '0';
2269:src/display.c **** 	      odig++;
2270:src/display.c **** 	    }
ARM GAS  /tmp/ccxUm1xs.s 			page 55


2271:src/display.c **** 	    for (i=0; i<count; i++) {
2272:src/display.c **** 	      *obp++ = *p++;
2273:src/display.c **** 	      odig++;
2274:src/display.c **** 	    }
2275:src/display.c **** 	  }
2276:src/display.c **** 	  break;
2277:src/display.c **** 
2278:src/display.c **** 	case MODE_FIX:
2279:src/display.c **** 	  j = 0;
2280:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2281:src/display.c **** 	    for (i=0; i<=exp; i++) {
2282:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2283:src/display.c **** 		*obp++ = ',';
2284:src/display.c **** 	      *obp++ = *p++;
2285:src/display.c **** 	      odig++;
2286:src/display.c **** 	    }
2287:src/display.c **** 	    *obp++ = '.';
2288:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2289:src/display.c **** 	      *obp++ = *p++;
2290:src/display.c **** 	      odig++;
2291:src/display.c **** 	    }
2292:src/display.c **** 	  } else {		// All digits to right of decimal point
2293:src/display.c **** 	    *obp++ = '0';
2294:src/display.c **** 	    odig++;
2295:src/display.c **** 	    *obp++ = '.';
2296:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2297:src/display.c **** 	      *obp++ = '0';
2298:src/display.c **** 	      odig++;
2299:src/display.c **** 	      dd--;
2300:src/display.c **** 	    }
2301:src/display.c **** 	    while (dd-- > 0) {
2302:src/display.c **** 	      *obp++ = *p++;
2303:src/display.c **** 	      odig++;
2304:src/display.c **** 	    }
2305:src/display.c **** 	  }
2306:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2307:src/display.c **** 	  if (trimzeros)
2308:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2309:src/display.c **** 	      obp--;
2310:src/display.c **** 	      odig--;
2311:src/display.c **** 	    }
2312:src/display.c **** #endif			
2313:src/display.c **** 	  break;
2314:src/display.c **** 
2315:src/display.c **** 	case MODE_ENG:
2316:src/display.c **** 	  switch (exp % 3) {
2317:src/display.c **** 	  case -1:
2318:src/display.c **** 	  case 2:
2319:src/display.c **** 	    *obp++ = *p++;
2320:src/display.c **** 	    odig++;
2321:src/display.c **** 	    dd--;
2322:src/display.c **** 	    exp--;
2323:src/display.c **** 	  case -2:
2324:src/display.c **** 	  case 1:
2325:src/display.c **** 	    *obp++ = *p++;
2326:src/display.c **** 	    odig++;
2327:src/display.c **** 	    dd--;
ARM GAS  /tmp/ccxUm1xs.s 			page 56


2328:src/display.c **** 	    exp--;
2329:src/display.c **** 	  case 0:
2330:src/display.c **** 	    ;
2331:src/display.c **** 	  };
2332:src/display.c **** 	  // Falling through
2333:src/display.c **** 
2334:src/display.c **** 	case MODE_SCI:
2335:src/display.c **** 	  *obp++ = *p++;
2336:src/display.c **** 	  odig++;
2337:src/display.c **** 	  *obp++ = '.';
2338:src/display.c **** 	  dd--;
2339:src/display.c **** 	  while (dd-- >= 0) {
2340:src/display.c **** 	    *obp++ = *p++;
2341:src/display.c **** 	    odig++;
2342:src/display.c **** 	  }
2343:src/display.c **** 	  show_exp = 1;
2344:src/display.c **** 	}
2345:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2346:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2347:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2348:src/display.c **** 	    obp--;
2349:src/display.c **** 	    odig--;
2350:src/display.c **** 	  }
2351:src/display.c **** #endif	
2352:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2353:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2354:src/display.c **** 	  set_x_dn(z, res, display_digits);
2355:src/display.c **** 	  return;
2356:src/display.c **** 	}
2357:src/display.c **** 	/* Finally, send the output to the display */
2358:src/display.c **** 	*obp = '\0';
2359:src/display.c **** 	if (odig > *display_digits)
2360:src/display.c **** 	  odig = *display_digits;
2361:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2362:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2363:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2364:src/display.c **** 	if (negative) {
2365:src/display.c **** 	  if (res) *res++ = '-';
2366:src/display.c **** 	  else {
2367:src/display.c **** 	    if (j == 0)
2368:src/display.c **** 	      SET_MANT_SIGN;
2369:src/display.c **** 	    else
2370:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2371:src/display.c **** 	  }
2372:src/display.c **** 	}
2373:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2374:src/display.c **** 	  if (c == '.') {
2375:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2376:src/display.c **** 	  } else if (c == ',') {
2377:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2378:src/display.c **** 	  } else {
2379:src/display.c **** 	    res = set_dig_s(j, c, res);
2380:src/display.c **** 	    j += SEGS_PER_DIGIT;
2381:src/display.c **** 	  }
2382:src/display.c **** 	}
2383:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2384:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
ARM GAS  /tmp/ccxUm1xs.s 			page 57


2385:src/display.c **** 	  if ( !res ) {
2386:src/display.c **** 	    set_exp(exp, 4, res);
2387:src/display.c **** 	  }
2388:src/display.c **** 	  else {
2389:src/display.c **** 	    set_exp(exp, 0, res);
2390:src/display.c **** 	  }
2391:src/display.c **** 	}
2392:src/display.c **** #else
2393:src/display.c **** 	if (show_exp)
2394:src/display.c **** 	  set_exp(exp, 0, res);
2395:src/display.c **** #endif
2396:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2397:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2398:src/display.c **** 	*display_digits = odig;
2399:src/display.c ****       }
2400:src/display.c **** 
2401:src/display.c **** #if defined(QTGUI) || defined(IOS)
2402:src/display.c ****       void format_display(char *buf) {
2403:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2404:src/display.c **** 	  {
2405:src/display.c **** 	    const char *p = get_cmdline();
2406:src/display.c **** 	    if (p == NULL) {
2407:src/display.c **** 	      format_reg(regX_idx, buf);
2408:src/display.c **** 	    } else {
2409:src/display.c **** 	      scopy(buf, p);
2410:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2411:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2412:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2413:src/display.c **** 		buf[CmdLineEex] = 'E';
2414:src/display.c **** 		buf[CmdLineEex+1] = '-';
2415:src/display.c **** 	      }
2416:src/display.c **** #  endif
2417:src/display.c **** 	    }
2418:src/display.c **** 	  }
2419:src/display.c **** 	else {
2420:src/display.c **** 	  buf[0]=0;
2421:src/display.c **** 	}
2422:src/display.c ****       }
2423:src/display.c **** #endif
2424:src/display.c **** 
2425:src/display.c ****       void format_reg(int index, char *buf) {
2426:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2427:src/display.c **** 
2428:src/display.c **** 	if (is_intmode())
2429:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2430:src/display.c **** #ifndef HP16C_MODE_CHANGE
2431:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2432:src/display.c **** 	  decNumber x;
2433:src/display.c **** 	  int s;
2434:src/display.c **** 	  unsigned long long int v;
2435:src/display.c **** 
2436:src/display.c **** 	  getRegister(&x, index);
2437:src/display.c **** 	  v = dn_to_ull(&x, &s);
2438:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2439:src/display.c **** 	}
2440:src/display.c **** #endif
2441:src/display.c **** 	else
ARM GAS  /tmp/ccxUm1xs.s 			page 58


2442:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2443:src/display.c ****       }
2444:src/display.c **** 
2445:src/display.c ****       /* Display the status screen */
2446:src/display.c ****       static void show_status(void) {
2447:src/display.c **** 	int i, n;
2448:src/display.c **** 	int j = SEGS_EXP_BASE;
2449:src/display.c **** 	const int status = State2.status - 3;
2450:src/display.c **** 	char buf[16], *p = buf;
2451:src/display.c **** 	unsigned int pc;
2452:src/display.c **** 
2453:src/display.c **** 	if (status == -2) {
2454:src/display.c **** 	  set_status("Free:");
2455:src/display.c **** 	  p = num_arg(buf, free_mem());
2456:src/display.c **** 	  p = scopy(p, " , FL. ");
2457:src/display.c **** 	  p = num_arg(p, free_flash());
2458:src/display.c **** 	  *p = '\0';
2459:src/display.c **** 	  set_digits_string(buf, 0);
2460:src/display.c **** 	}
2461:src/display.c **** 	else if (status == -1) {
2462:src/display.c **** 	  /* Top line */
2463:src/display.c **** 	  p = scopy(buf, "Regs:");
2464:src/display.c **** 	  if (SizeStatRegs)
2465:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2466:src/display.c **** 	  *p = '\0';
2467:src/display.c **** 	  set_status(buf);
2468:src/display.c **** 
2469:src/display.c **** 	  /* Bottom line */
2470:src/display.c **** 	  p = num_arg(buf, global_regs());
2471:src/display.c **** 	  if (LocalRegs < 0) {
2472:src/display.c **** 	    p = scopy(p, " , Loc. ");
2473:src/display.c **** 	    p = num_arg(p, local_regs());
2474:src/display.c **** 	  }
2475:src/display.c **** 	  *p = '\0';
2476:src/display.c **** 	  set_digits_string(buf, 0);
2477:src/display.c **** 	} else {
2478:src/display.c **** 	  int base;
2479:src/display.c **** 	  int end;
2480:src/display.c **** 	  int group = 10;
2481:src/display.c **** 	  int start = 0;
2482:src/display.c **** 		
2483:src/display.c **** 	  if (status <= 9) {
2484:src/display.c **** 	    base = 10 * status;
2485:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2486:src/display.c **** 	    p = scopy(buf, "FL ");
2487:src/display.c **** 	    p = num_arg_0(p, base, 2);
2488:src/display.c **** 	    *p++ = '-';
2489:src/display.c **** 	    p = num_arg_0(p, end, 2);
2490:src/display.c **** 	    *p = '\0';
2491:src/display.c **** 	    set_status(buf);
2492:src/display.c **** 	  }
2493:src/display.c **** 	  else if (status == 10) {
2494:src/display.c **** 	    base = regX_idx;
2495:src/display.c **** 	    end = regK_idx;
2496:src/display.c **** 	    start = 3;
2497:src/display.c **** 	    group = 4;
2498:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
ARM GAS  /tmp/ccxUm1xs.s 			page 59


2499:src/display.c **** 	  }
2500:src/display.c **** 	  else { // status == 11
2501:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2502:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2503:src/display.c **** 	    set_status("FL.00-.15");
2504:src/display.c **** 	  }
2505:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2506:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2507:src/display.c **** 	  j += SEGS_PER_DIGIT;
2508:src/display.c **** 	  for (i = start; i < group + start; i++) {
2509:src/display.c **** 	    int k = i + base - start;
2510:src/display.c **** 	    int l = get_user_flag(k);
2511:src/display.c **** 	    k += group;
2512:src/display.c **** 	    if (end >= k) {
2513:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2514:src/display.c **** 	      k += group;
2515:src/display.c **** 	      if (end >= k)
2516:src/display.c **** 		l |= (get_user_flag(k) << 2);
2517:src/display.c **** 	    }
2518:src/display.c **** 	    set_dig(j, l);
2519:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2520:src/display.c **** 	    j += SEGS_PER_DIGIT;
2521:src/display.c **** 	    if (i == 4) {
2522:src/display.c **** 	      set_dig(j, 8);
2523:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2524:src/display.c **** 	      j += SEGS_PER_DIGIT;
2525:src/display.c **** 	    }
2526:src/display.c **** 	  }
2527:src/display.c **** 	}
2528:src/display.c **** 
2529:src/display.c **** 	j = SEGS_EXP_BASE;
2530:src/display.c **** 	pc = state_pc();
2531:src/display.c **** 	if (isXROM(pc))
2532:src/display.c **** 	  pc = 1;
2533:src/display.c **** 	for (n=i=0; i<4; i++) {
2534:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2535:src/display.c **** 	    if (++n == 4) {
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2538:src/display.c **** 	    } else {
2539:src/display.c **** 	      set_dig(j, 'A'+i);
2540:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2541:src/display.c **** 	    }
2542:src/display.c **** 	  }
2543:src/display.c **** 	}
2544:src/display.c ****       }
2545:src/display.c **** 
2546:src/display.c **** 
2547:src/display.c ****       /* Display the list of alpha labels */
2548:src/display.c ****       static void show_label(void) {
2549:src/display.c **** 	char buf[16];
2550:src/display.c **** 	unsigned short int pc = State2.digval;
2551:src/display.c **** 	unsigned int op = getprog(pc);
2552:src/display.c **** 	int n = nLIB(pc);
2553:src/display.c **** 	unsigned short int lblpc;
2554:src/display.c **** 
2555:src/display.c **** 	set_status(prt((opcode)op, buf));
ARM GAS  /tmp/ccxUm1xs.s 			page 60


2556:src/display.c **** 	set_digits_string(libname[n], 0);
2557:src/display.c **** #ifndef REALBUILD
2558:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2559:src/display.c **** #endif
2560:src/display.c **** 
2561:src/display.c **** 	if (op & OP_DBL) {
2562:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2563:src/display.c **** 	  if (lblpc != pc) {
2564:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2565:src/display.c **** 	    n = nLIB(lblpc);
2566:src/display.c **** 	    if (n == REGION_RAM)
2567:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2568:src/display.c **** 	    else {
2569:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2570:src/display.c **** #ifndef REALBUILD
2571:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2572:src/display.c **** #endif
2573:src/display.c **** 	    }
2574:src/display.c **** 	  }
2575:src/display.c **** 	}
2576:src/display.c ****       }
2577:src/display.c **** 
2578:src/display.c ****       /* Display a list of register contents */
2579:src/display.c ****       static void show_registers(void) {
2580:src/display.c **** 	char buf[16], *bp;
2581:src/display.c **** 	int n = State2.digval;
2582:src/display.c **** 	
2583:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2584:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2585:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2586:src/display.c **** 	  n;
2587:src/display.c **** #else
2588:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2589:src/display.c **** 	  n;
2590:src/display.c **** #endif
2591:src/display.c **** 
2592:src/display.c **** 	if (State2.disp_as_alpha) {
2593:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2594:src/display.c **** 	}
2595:src/display.c **** 	else {
2596:src/display.c **** 	  xset(buf, '\0', 16);
2597:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2598:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2599:src/display.c **** #else
2600:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2601:src/display.c **** #endif
2602:src/display.c **** 	  if (State2.local) {
2603:src/display.c **** 	    *bp++ = '.';
2604:src/display.c **** 	    if (n >= 100) {
2605:src/display.c **** 	      *bp++ = '1';
2606:src/display.c **** 	      n -= 100;
2607:src/display.c **** 	    }
2608:src/display.c **** 	  }
2609:src/display.c **** 	  if (n < 100)
2610:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2611:src/display.c **** 	  else
2612:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
ARM GAS  /tmp/ccxUm1xs.s 			page 61


2613:src/display.c **** 	  set_status(buf);
2614:src/display.c **** 	}
2615:src/display.c **** 	format_reg(reg, CNULL);
2616:src/display.c ****       }
2617:src/display.c **** 
2618:src/display.c **** 
2619:src/display.c ****       static void set_annunciators(void)
2620:src/display.c ****       {
2621:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2622:src/display.c **** 
2623:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2624:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2625:src/display.c **** 	 * browsing constants.
2626:src/display.c **** 	 */
2627:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2628:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2629:src/display.c **** #else
2630:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2631:src/display.c **** #endif
2632:src/display.c **** #ifdef INCLUDE_C_LOCK
2633:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2634:src/display.c **** #endif
2635:src/display.c **** 
2636:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2637:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2638:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2639:src/display.c **** 	set_IO_annunciator();
2640:src/display.c **** 
2641:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2642:src/display.c **** 	 */
2643:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2644:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2645:src/display.c ****       }
2646:src/display.c **** 
2647:src/display.c **** 
2648:src/display.c ****       /*
2649:src/display.c ****        *  Toggle the little "=" sign
2650:src/display.c ****        */
2651:src/display.c ****       void set_IO_annunciator(void) {
2652:src/display.c **** #ifndef DM42
2653:src/display.c **** 	int on = SerialOn
2654:src/display.c **** #endif
2655:src/display.c **** #ifdef DM42
2656:src/display.c **** 	  int on = 0
2657:src/display.c **** #endif
2658:src/display.c **** #ifdef REALBUILD
2659:src/display.c **** 	  || DebugFlag
2660:src/display.c **** #endif
2661:src/display.c **** #ifdef INFRARED
2662:src/display.c **** 	  || PrinterColumn != 0
2663:src/display.c **** #endif
2664:src/display.c **** 	  ;
2665:src/display.c **** 
2666:src/display.c **** 	if (on != IoAnnunciator) {
2667:src/display.c **** 	  dot(LIT_EQ, on);
2668:src/display.c **** 	  IoAnnunciator = on;
2669:src/display.c **** 	  finish_display(); //LIT_EQ
ARM GAS  /tmp/ccxUm1xs.s 			page 62


2670:src/display.c **** 	}
2671:src/display.c ****       }
2672:src/display.c **** 
2673:src/display.c **** #ifdef TOP_ROW
2674:src/display.c ****       /*
2675:src/display.c ****        *  Update the display
2676:src/display.c ****        */
2677:src/display.c ****       void display(void) {
2678:src/display.c **** 	int i, j;
2679:src/display.c **** 	char buf[40], *bp = buf;
2680:src/display.c **** 	const char *p;
2681:src/display.c **** 	int annuc = 0;
2682:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2683:src/display.c **** 	int skip = 0;
2684:src/display.c **** 	int x_disp = 0;
2685:src/display.c **** 	const int shift = cur_shift();
2686:src/display.c **** 
2687:src/display.c **** 	no_status_top = 0;
2688:src/display.c **** 	if (State2.disp_freeze) {
2689:src/display.c **** 	  State2.disp_freeze = 0;
2690:src/display.c **** 	  State2.disp_temp = 1;
2691:src/display.c **** #ifdef CONSOLE
2692:src/display.c **** 	  JustDisplayed = 1;
2693:src/display.c **** #endif
2694:src/display.c **** 	  ShowRPN = 0;
2695:src/display.c **** 	  return;
2696:src/display.c **** 	}
2697:src/display.c **** 
2698:src/display.c **** 	if (WasDataEntry) {
2699:src/display.c **** #if defined(QTGUI) || defined(IOS)
2700:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2701:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2702:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2703:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2704:src/display.c **** #endif
2705:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2706:src/display.c **** 
2707:src/display.c **** 	  // Erase 7-segment display
2708:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2709:src/display.c **** 	    clr_dot(i);
2710:src/display.c **** 	  }
2711:src/display.c **** 	  goto only_update_x;
2712:src/display.c **** 	}
2713:src/display.c **** #ifdef INCLUDE_YREG_CODE
2714:src/display.c **** #  ifdef YREG_ALWAYS_ON
2715:src/display.c **** 	const int yreg_enabled = 1;
2716:src/display.c **** #  else
2717:src/display.c **** 	const int yreg_enabled = UState.show_y;
2718:src/display.c **** #  endif
2719:src/display.c **** #else
2720:src/display.c **** 	const int yreg_enabled = 0;
2721:src/display.c **** #endif
2722:src/display.c **** 	// Clear display
2723:src/display.c **** 	reset_disp();
2724:src/display.c **** 
2725:src/display.c **** 	
2726:src/display.c **** 	xset(buf, '\0', sizeof(buf));
ARM GAS  /tmp/ccxUm1xs.s 			page 63


2727:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2728:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2729:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2730:src/display.c **** 	/*   set_status(buf); */
2731:src/display.c **** 	/* } */
2732:src/display.c **** 	if (State2.version) {
2733:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2734:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2735:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2736:src/display.c **** #ifndef REALBUILD
2737:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2738:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2739:src/display.c **** #endif
2740:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2741:src/display.c **** 	  set_status(vers);
2742:src/display.c **** 	  skip = 1;
2743:src/display.c **** 	  goto nostk;
2744:src/display.c **** 	} else if (State2.confirm) {
2745:src/display.c **** 	  if (yreg_enabled) {
2746:src/display.c **** 	    set_status_top(S_SURE);
2747:src/display.c **** 	    no_status_top = 1;
2748:src/display.c **** 	    annuc = 1;
2749:src/display.c **** 	  }
2750:src/display.c **** 	  else {
2751:src/display.c **** 	    set_status(S_SURE);
2752:src/display.c **** 	  }
2753:src/display.c **** 	} else if (State2.hyp) {
2754:src/display.c **** 	  bp = scopy(bp, "HYP");
2755:src/display.c **** 	  if (! State2.dot)
2756:src/display.c **** 	    *bp++ = '\235';
2757:src/display.c **** 	  if (yreg_enabled) {
2758:src/display.c **** 	    set_status_top(buf);
2759:src/display.c **** 	    no_status_top = 1;
2760:src/display.c **** 	    annuc = 1;
2761:src/display.c **** 	  }
2762:src/display.c **** 	  else {
2763:src/display.c **** 	    set_status(buf);
2764:src/display.c **** 	  }
2765:src/display.c **** 	} else if (State2.gtodot) {
2766:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2767:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2768:src/display.c **** 	  if (State2.numdigit > 0)
2769:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2770:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2771:src/display.c **** 	  *bp++ = '_';
2772:src/display.c **** 	  if (yreg_enabled) {
2773:src/display.c **** 	    set_status_top(buf);
2774:src/display.c **** 	    no_status_top = 1;
2775:src/display.c **** 	    annuc = 1;
2776:src/display.c **** 	  }
2777:src/display.c **** 	  else {
2778:src/display.c **** 	    set_status(buf);
2779:src/display.c **** 	  }
2780:src/display.c **** 	} else if (State2.rarg) {
2781:src/display.c **** 	  /* Commands with arguments */
2782:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2783:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
ARM GAS  /tmp/ccxUm1xs.s 			page 64


2784:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2785:src/display.c **** #endif
2786:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2787:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2788:src/display.c **** 	  if (State2.dot) {
2789:src/display.c **** 	    *bp++ = 's';
2790:src/display.c **** 	    *bp++ = '_';
2791:src/display.c **** 	  } else if (shift == SHIFT_F) {
2792:src/display.c **** 	    *bp++ = '\021';
2793:src/display.c **** 	    *bp++ = '_';
2794:src/display.c **** 	  } else {
2795:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2796:src/display.c **** 	       : State2.ind ? 2 
2797:src/display.c **** 	       : num_arg_digits(CmdBase); */
2798:src/display.c **** 	    if (State2.local)
2799:src/display.c **** 	      *bp++ = '.';
2800:src/display.c **** 	    if (State2.numdigit > 0) {
2801:src/display.c **** 	      if (State2.shuffle)
2802:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2803:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2804:src/display.c **** 	      else
2805:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2806:src/display.c **** 	    }
2807:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2808:src/display.c **** 	    *bp++ = '_';
2809:src/display.c **** 	  }
2810:src/display.c **** 	  if (yreg_enabled) {
2811:src/display.c **** 	    set_status_top(buf);
2812:src/display.c **** 	    no_status_top = 1;
2813:src/display.c **** 	    annuc = 1;
2814:src/display.c **** 	  }
2815:src/display.c **** 	  else {
2816:src/display.c **** 	    set_status(buf);
2817:src/display.c **** 	  }
2818:src/display.c **** 	} else if (State2.test != TST_NONE) {
2819:src/display.c **** 	  *bp++ = 'x';
2820:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2821:src/display.c **** 	  *bp++ = '_';
2822:src/display.c **** 	  *bp++ = '?';
2823:src/display.c **** 	  if (yreg_enabled) {
2824:src/display.c **** 	    set_status_top(buf);
2825:src/display.c **** 	    no_status_top = 1;
2826:src/display.c **** 	    annuc = 1;
2827:src/display.c **** 	  }
2828:src/display.c **** 	  else {
2829:src/display.c **** 	    set_status(buf);
2830:src/display.c **** 	  }
2831:src/display.c **** 	} else if (cata) {
2832:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2833:src/display.c **** 	  char b2[16];
2834:src/display.c **** 	  const char *p;
2835:src/display.c **** 
2836:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2837:src/display.c **** 	  p = catcmd(op, b2);
2838:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2839:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2840:src/display.c **** 	  bp = scopy(bp, p);
ARM GAS  /tmp/ccxUm1xs.s 			page 65


2841:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2842:src/display.c **** 	    // State2.disp_small = 1;
2843:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2844:src/display.c **** 	      set_digits_string("0 to 255", 0);
2845:src/display.c **** 	    else
2846:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2847:src/display.c **** 	    skip = 1;
2848:src/display.c **** 	  } else if (State2.runmode) {
2849:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2850:src/display.c **** 	      decNumber x, r;
2851:src/display.c **** 	      decimal64 z;
2852:src/display.c **** 
2853:src/display.c **** 	      getX(&x);
2854:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2855:src/display.c **** 		const unsigned int f = argKIND(op);
2856:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2857:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2858:src/display.c **** 		  update_speed(0);
2859:src/display.c **** 		  fp(&r, &x);
2860:src/display.c **** 		}
2861:src/display.c **** 		else
2862:src/display.c **** 		  set_NaN(&r);
2863:src/display.c **** 	      } else
2864:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2865:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2866:src/display.c **** 	      packed_from_number(&z, &r);
2867:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2868:src/display.c **** 	      skip = 1;
2869:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2870:src/display.c **** 	      REGISTER z, *const x = StackBase;
2871:src/display.c **** 	      copyreg(&z, x);
2872:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2873:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2874:src/display.c **** 	      copyreg(x, &z);
2875:src/display.c **** 	      skip = 1;
2876:src/display.c **** 	    }
2877:src/display.c **** 	  }
2878:src/display.c **** 	  if (yreg_enabled) {
2879:src/display.c **** 	    set_status_top(buf);
2880:src/display.c **** 	    no_status_top = 1;
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  }
2883:src/display.c **** 	  else {
2884:src/display.c **** 	    set_status(buf);
2885:src/display.c **** 	  }
2886:src/display.c **** 	} else if (State2.multi) {
2887:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2888:src/display.c **** 	  if (State2.numdigit > 0) {
2889:src/display.c **** 	    *bp++ = (char) State2.digval;
2890:src/display.c **** 	    if (State2.numdigit > 1)
2891:src/display.c **** 	      *bp++ = State2.digval2;
2892:src/display.c **** 	  }
2893:src/display.c **** 	  if (yreg_enabled) {
2894:src/display.c **** 	    set_status_top(buf);
2895:src/display.c **** 	    no_status_top = 1;
2896:src/display.c **** 	    annuc = 1;
2897:src/display.c **** 	  }
ARM GAS  /tmp/ccxUm1xs.s 			page 66


2898:src/display.c **** 	  else {
2899:src/display.c **** 	    set_status(buf);
2900:src/display.c **** 	  }
2901:src/display.c **** 	} else if (State2.status) {
2902:src/display.c **** 	  show_status();
2903:src/display.c **** 	  skip = 1;
2904:src/display.c **** 	} else if (State2.labellist) {
2905:src/display.c **** 	  show_label();
2906:src/display.c **** 	  skip = 1;
2907:src/display.c **** 	} else if (State2.registerlist) {
2908:src/display.c **** 	  show_registers();
2909:src/display.c **** 	  skip = 1;
2910:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2911:src/display.c **** 	    annunciators();
2912:src/display.c **** 	  }
2913:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2914:src/display.c **** 	} else if (State2.disp_as_alpha) {
2915:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2916:src/display.c **** #endif
2917:src/display.c **** 	} else if (State2.runmode) {
2918:src/display.c **** 	  if (DispMsg) { 
2919:src/display.c **** 	    set_status(DispMsg);
2920:src/display.c **** 	  } else if (DispPlot) {
2921:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2922:src/display.c **** 	  } else if (State2.alphas) {
2923:src/display.c **** 	    bp = scopy(buf, Alpha);
2924:src/display.c **** 	    j = State2.alpha_pos;
2925:src/display.c **** 	    if (j != 0) {
2926:src/display.c **** 	      i = slen(buf);
2927:src/display.c **** 	      j *= 6;
2928:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2929:src/display.c **** 		{
2930:src/display.c **** 		  buf[ (i - j) ] = '\0';
2931:src/display.c **** 		  set_status_right(buf);
2932:src/display.c **** 		}
2933:src/display.c **** 	      else {
2934:src/display.c **** 		set_status(buf);
2935:src/display.c **** 	      }
2936:src/display.c **** 	    }
2937:src/display.c **** 	    else {
2938:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2939:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2940:src/display.c **** 		*bp++ = '\0';
2941:src/display.c **** 	      }
2942:src/display.c **** 	      set_status_right(buf);
2943:src/display.c **** 	    }
2944:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2945:src/display.c **** 	      bp = buf;
2946:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2947:src/display.c **** 	      *bp++ = '\0';
2948:src/display.c **** 	      set_status_top(buf);
2949:src/display.c **** 	      no_status_top = 1;
2950:src/display.c **** 	      //annuc = 1;
2951:src/display.c **** 	    }
2952:src/display.c **** 	  }
2953:src/display.c **** 	  else {
2954:src/display.c **** 	    annuc = 1;
ARM GAS  /tmp/ccxUm1xs.s 			page 67


2955:src/display.c **** 	  }
2956:src/display.c **** 	}
2957:src/display.c **** 	else {
2958:src/display.c **** #ifndef DM42
2959:src/display.c **** 	  show_progtrace(buf);
2960:src/display.c **** #endif
2961:src/display.c **** 	  i = state_pc();
2962:src/display.c **** 	  if (i > 0)
2963:src/display.c **** 	    set_status(prt(getprog(i), buf));
2964:src/display.c **** 	  else
2965:src/display.c **** 	    set_status("");
2966:src/display.c **** 	  set_dot(STO_annun);
2967:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2968:src/display.c **** 	    annuc = 1;
2969:src/display.c **** 	  goto nostk;
2970:src/display.c **** 	}
2971:src/display.c **** 	show_stack();
2972:src/display.c ****       nostk:
2973:src/display.c **** 	show_flags();
2974:src/display.c **** 	if (!skip) {
2975:src/display.c **** 	  if (State2.runmode) {
2976:src/display.c **** 	  only_update_x:
2977:src/display.c **** 	    p = get_cmdline();
2978:src/display.c **** 	    if (p == NULL || cata) {
2979:src/display.c **** 	      if (ShowRegister != -1) {
2980:src/display.c **** #ifdef INCLUDE_C_LOCK
2981:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2982:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2983:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2984:src/display.c **** 		    SET_POLAR_READY;
2985:src/display.c **** 		  }
2986:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2987:src/display.c **** 		    State2.hms = 0;
2988:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2989:src/display.c **** 		    State2.hms = 1;
2990:src/display.c **** 		  }
2991:src/display.c **** 		  else {
2992:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2993:src/display.c **** 		  }
2994:src/display.c **** 		  x_disp = 1;
2995:src/display.c **** 		}
2996:src/display.c **** 		else {
2997:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2998:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2999:src/display.c **** 		}
3000:src/display.c **** #else		
3001:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3002:src/display.c **** 		format_reg(ShowRegister, CNULL);
3003:src/display.c **** #endif
3004:src/display.c **** 	      }
3005:src/display.c **** 	      else
3006:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3007:src/display.c **** 	    } else {
3008:src/display.c **** 	      disp_x(p);
3009:src/display.c **** 	      x_disp = 1;
3010:src/display.c **** 	    }
3011:src/display.c **** 	    if (WasDataEntry) {
ARM GAS  /tmp/ccxUm1xs.s 			page 68


3012:src/display.c **** 	      goto finish;
3013:src/display.c **** 	    }
3014:src/display.c **** 	  } else {
3015:src/display.c **** 	    unsigned int pc = state_pc();
3016:src/display.c **** 	    unsigned int upc = user_pc(pc);
3017:src/display.c **** 	    const int n = nLIB(pc);
3018:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3019:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3020:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3021:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3022:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3023:src/display.c **** #ifndef REALBUILD
3024:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3025:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3026:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3027:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3028:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3029:src/display.c **** 	      char *b=buf;
3030:src/display.c **** 	      char *l=LastDisplayedNumber;
3031:src/display.c **** 	      *l++=' ';
3032:src/display.c **** 	      while(*b) {
3033:src/display.c **** 		*l++=*b++;
3034:src/display.c **** 		*l++=' ';
3035:src/display.c **** 	      }
3036:src/display.c **** 	      *l=0;
3037:src/display.c **** 	    }
3038:src/display.c **** #endif
3039:src/display.c **** 	  }
3040:src/display.c **** 	}
3041:src/display.c **** 	set_annunciators();
3042:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3043:src/display.c **** 	  ShowRPN = 0;
3044:src/display.c **** 	  dot(RPN, 0);
3045:src/display.c **** 	}
3046:src/display.c **** 	// disp_temp disables the <- key
3047:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3048:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3049:src/display.c **** 
3050:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3051:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3052:src/display.c **** 	  annunciators();
3053:src/display.c ****  	State2.hms = 0;
3054:src/display.c **** #else
3055:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3056:src/display.c **** 	  annunciators();
3057:src/display.c **** #endif
3058:src/display.c **** 
3059:src/display.c ****       finish:
3060:src/display.c **** 	State2.version = 0;
3061:src/display.c **** 	State2.disp_as_alpha = 0;
3062:src/display.c **** 	State2.smode = SDISP_NORMAL;
3063:src/display.c **** 	State2.invalid_disp = 0;
3064:src/display.c **** 	ShowRegister = regX_idx;
3065:src/display.c **** 	DispMsg = CNULL;
3066:src/display.c **** 	DispPlot = 0;
3067:src/display.c **** 	State2.disp_small = 0;
3068:src/display.c **** 	finish_display();
ARM GAS  /tmp/ccxUm1xs.s 			page 69


3069:src/display.c **** 	no_status_top = 0;
3070:src/display.c **** #ifdef CONSOLE
3071:src/display.c **** 	JustDisplayed = 1;
3072:src/display.c **** #endif
3073:src/display.c ****       }
3074:src/display.c **** #else
3075:src/display.c ****       /*
3076:src/display.c ****        *  Update the display
3077:src/display.c ****        */
3078:src/display.c ****       void display(void) {
3079:src/display.c **** 	int i, j;
3080:src/display.c **** 	char buf[40], *bp = buf;
3081:src/display.c **** 	const char *p;
3082:src/display.c **** 	int annuc = 0;
3083:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3084:src/display.c **** 	int skip = 0;
3085:src/display.c **** 	int x_disp = 0;
3086:src/display.c **** 	const int shift = cur_shift();
3087:src/display.c **** 
3088:src/display.c **** 
3089:src/display.c **** 
3090:src/display.c **** 	if (State2.disp_freeze) {
3091:src/display.c **** 	  State2.disp_freeze = 0;
3092:src/display.c **** 	  State2.disp_temp = 1;
3093:src/display.c **** #ifdef CONSOLE
3094:src/display.c **** 	  JustDisplayed = 1;
3095:src/display.c **** #endif
3096:src/display.c **** 	  ShowRPN = 0;
3097:src/display.c **** 	  return;
3098:src/display.c **** 	}
3099:src/display.c **** 
3100:src/display.c **** 	if (WasDataEntry) {
3101:src/display.c **** #if defined(QTGUI) || defined(IOS)
3102:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3103:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3104:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3105:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3106:src/display.c **** #endif
3107:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3108:src/display.c **** 
3109:src/display.c **** 	  // Erase 7-segment display
3110:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3111:src/display.c **** 	    clr_dot(i);
3112:src/display.c **** 	  }
3113:src/display.c **** 	  goto only_update_x;
3114:src/display.c **** 	}
3115:src/display.c **** 
3116:src/display.c **** 	// Clear display
3117:src/display.c **** 	reset_disp();
3118:src/display.c **** 
3119:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3120:src/display.c **** 	if (State2.cmplx  && !cata) {
3121:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3122:src/display.c **** 	  set_status(buf);
3123:src/display.c **** 	}
3124:src/display.c **** 	if (State2.version) {
3125:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
ARM GAS  /tmp/ccxUm1xs.s 			page 70


3126:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3127:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3128:src/display.c **** #ifndef REALBUILD
3129:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3130:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3131:src/display.c **** #endif
3132:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3133:src/display.c **** 	  set_status(vers);
3134:src/display.c **** 	  skip = 1;
3135:src/display.c **** 	  goto nostk;
3136:src/display.c **** 	} else if (State2.confirm) {
3137:src/display.c **** 	  set_status(S_SURE);
3138:src/display.c **** 	} else if (State2.hyp) {
3139:src/display.c **** 	  bp = scopy(bp, "HYP");
3140:src/display.c **** 	  if (! State2.dot)
3141:src/display.c **** 	    *bp++ = '\235';
3142:src/display.c **** 	  set_status(buf);
3143:src/display.c **** 	} else if (State2.gtodot) {
3144:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3145:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3146:src/display.c **** 	  if (State2.numdigit > 0)
3147:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3148:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3149:src/display.c **** 	  *bp++ = '_';
3150:src/display.c **** 	  set_status(buf);
3151:src/display.c **** 	} else if (State2.rarg) {
3152:src/display.c **** 	  /* Commands with arguments */
3153:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3154:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3155:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3156:src/display.c **** #endif
3157:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3158:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3159:src/display.c **** 	  if (State2.dot) {
3160:src/display.c **** 	    *bp++ = 's';
3161:src/display.c **** 	    *bp++ = '_';
3162:src/display.c **** 	  } else if (shift == SHIFT_F) {
3163:src/display.c **** 	    *bp++ = '\021';
3164:src/display.c **** 	    *bp++ = '_';
3165:src/display.c **** 	  } else {
3166:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3167:src/display.c **** 	       : State2.ind ? 2 
3168:src/display.c **** 	       : num_arg_digits(CmdBase); */
3169:src/display.c **** 	    if (State2.local)
3170:src/display.c **** 	      *bp++ = '.';
3171:src/display.c **** 	    if (State2.numdigit > 0) {
3172:src/display.c **** 	      if (State2.shuffle)
3173:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3174:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3175:src/display.c **** 	      else
3176:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3177:src/display.c **** 	    }
3178:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3179:src/display.c **** 	    *bp++ = '_';
3180:src/display.c **** 	  }
3181:src/display.c **** 	  set_status(buf);
3182:src/display.c **** 	} else if (State2.test != TST_NONE) {
ARM GAS  /tmp/ccxUm1xs.s 			page 71


3183:src/display.c **** 	  *bp++ = 'x';
3184:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3185:src/display.c **** 	  *bp++ = '_';
3186:src/display.c **** 	  *bp++ = '?';
3187:src/display.c **** 	  set_status(buf);
3188:src/display.c **** 	} else if (cata) {
3189:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3190:src/display.c **** 	  char b2[16];
3191:src/display.c **** 	  const char *p;
3192:src/display.c **** 
3193:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3194:src/display.c **** 	  p = catcmd(op, b2);
3195:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3196:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3197:src/display.c **** 	  bp = scopy(bp, p);
3198:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3199:src/display.c **** 	    // State2.disp_small = 1;
3200:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3201:src/display.c **** 	      set_digits_string("0 to 255", 0);
3202:src/display.c **** 	    else
3203:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3204:src/display.c **** 	    skip = 1;
3205:src/display.c **** 	  } else if (State2.runmode) {
3206:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3207:src/display.c **** 	      decNumber x, r;
3208:src/display.c **** 	      decimal64 z;
3209:src/display.c **** 
3210:src/display.c **** 	      getX(&x);
3211:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3212:src/display.c **** 		const unsigned int f = argKIND(op);
3213:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3214:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3215:src/display.c **** 		  update_speed(0);
3216:src/display.c **** 		  fp(&r, &x);
3217:src/display.c **** 		}
3218:src/display.c **** 		else
3219:src/display.c **** 		  set_NaN(&r);
3220:src/display.c **** 	      } else
3221:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3222:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3223:src/display.c **** 	      packed_from_number(&z, &r);
3224:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3225:src/display.c **** 	      skip = 1;
3226:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3227:src/display.c **** 	      REGISTER z, *const x = StackBase;
3228:src/display.c **** 	      copyreg(&z, x);
3229:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3230:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3231:src/display.c **** 	      copyreg(x, &z);
3232:src/display.c **** 	      skip = 1;
3233:src/display.c **** 	    }
3234:src/display.c **** 	  }
3235:src/display.c **** 	  set_status(buf);
3236:src/display.c **** 	} else if (State2.multi) {
3237:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3238:src/display.c **** 	  if (State2.numdigit > 0) {
3239:src/display.c **** 	    *bp++ = (char) State2.digval;
ARM GAS  /tmp/ccxUm1xs.s 			page 72


3240:src/display.c **** 	    if (State2.numdigit > 1)
3241:src/display.c **** 	      *bp++ = State2.digval2;
3242:src/display.c **** 	  }
3243:src/display.c **** 	  set_status(buf);
3244:src/display.c **** 	} else if (State2.status) {
3245:src/display.c **** 	  show_status();
3246:src/display.c **** 	  skip = 1;
3247:src/display.c **** 	} else if (State2.labellist) {
3248:src/display.c **** 	  show_label();
3249:src/display.c **** 	  skip = 1;
3250:src/display.c **** 	} else if (State2.registerlist) {
3251:src/display.c **** 	  show_registers();
3252:src/display.c **** 	  skip = 1;
3253:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3254:src/display.c **** 	    annunciators();
3255:src/display.c **** 	  }
3256:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3257:src/display.c **** 	} else if (State2.disp_as_alpha) {
3258:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3259:src/display.c **** #endif
3260:src/display.c **** 	} else if (State2.runmode) {
3261:src/display.c **** 	  if (DispMsg) { 
3262:src/display.c **** 	    set_status(DispMsg);
3263:src/display.c **** 	  } else if (DispPlot) {
3264:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3265:src/display.c **** 	  } else if (State2.alphas) {
3266:src/display.c **** #if 0
3267:src/display.c **** 	    set_digits_string("AlpHA", 0);
3268:src/display.c **** #endif
3269:src/display.c **** 	    bp = scopy(buf, Alpha);
3270:src/display.c **** 	    j = State2.alpha_pos;
3271:src/display.c **** 	    if (j != 0) {
3272:src/display.c **** 	      i = slen(buf);
3273:src/display.c **** 	      //				
3274:src/display.c **** 	      j *= 6;
3275:src/display.c **** #ifdef BIGGER_DISPLAY
3276:src/display.c **** 	      if ( i - j >= 20 )
3277:src/display.c **** #else
3278:src/display.c **** 	      if ( i - j >= 12 )
3279:src/display.c **** #endif
3280:src/display.c **** 		{
3281:src/display.c **** 		buf[ (i - j) ] = '\0';
3282:src/display.c **** 		set_status_right(buf);
3283:src/display.c **** 		}
3284:src/display.c **** 	      else {
3285:src/display.c **** 		set_status(buf);
3286:src/display.c **** 	      }
3287:src/display.c **** 	    } else {
3288:src/display.c **** 	      if (shift != SHIFT_N) {
3289:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3290:src/display.c **** 		*bp++ = '\0';
3291:src/display.c **** 	      }
3292:src/display.c **** 	      set_status_right(buf);
3293:src/display.c **** 	    }
3294:src/display.c **** 	  } else {
3295:src/display.c **** 	    annuc = 1;
3296:src/display.c **** 	  }
ARM GAS  /tmp/ccxUm1xs.s 			page 73


3297:src/display.c **** 	} else {
3298:src/display.c **** #ifndef DM42
3299:src/display.c **** 	  show_progtrace(buf);
3300:src/display.c **** #endif
3301:src/display.c **** 	  i = state_pc();
3302:src/display.c **** 	  if (i > 0)
3303:src/display.c **** 	    set_status(prt(getprog(i), buf));
3304:src/display.c **** 	  else
3305:src/display.c **** 	    set_status("");
3306:src/display.c **** 	  set_dot(STO_annun);
3307:src/display.c **** #if 0
3308:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3309:src/display.c **** 	    unsigned short int crc;
3310:src/display.c **** 	    crc = checksum_program();
3311:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3312:src/display.c **** 	    for (i=0; i<4; i++) {
3313:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3314:src/display.c **** 	      crc >>= 4;
3315:src/display.c **** 	      j += SEGS_PER_DIGIT;
3316:src/display.c **** 	    }
3317:src/display.c **** 	    skip = 1;
3318:src/display.c **** 	  }
3319:src/display.c **** 	  else
3320:src/display.c **** #endif
3321:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3322:src/display.c **** 	      annuc = 1;
3323:src/display.c **** 	  goto nostk;
3324:src/display.c **** 	}
3325:src/display.c **** 	show_stack();
3326:src/display.c ****       nostk:	show_flags();
3327:src/display.c **** 	if (!skip) {
3328:src/display.c **** 	  if (State2.runmode) {
3329:src/display.c **** 	  only_update_x:
3330:src/display.c **** 	    p = get_cmdline();
3331:src/display.c **** 	    if (p == NULL || cata) {
3332:src/display.c **** 	      if (ShowRegister != -1) {
3333:src/display.c **** #ifdef INCLUDE_C_LOCK
3334:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3335:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3336:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3337:src/display.c **** 		    SET_POLAR_READY;
3338:src/display.c **** 		  }
3339:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3340:src/display.c **** 		    State2.hms = 0;
3341:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3342:src/display.c **** 		    State2.hms = 1;
3343:src/display.c **** 		  }
3344:src/display.c **** 		  else {
3345:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3346:src/display.c **** 		  }
3347:src/display.c **** 		  x_disp = 1;
3348:src/display.c **** 		}
3349:src/display.c **** 		else {
3350:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3351:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3352:src/display.c **** 		}
3353:src/display.c **** #else
ARM GAS  /tmp/ccxUm1xs.s 			page 74


3354:src/display.c **** 
3355:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3356:src/display.c **** 		format_reg(ShowRegister, CNULL);
3357:src/display.c **** #endif
3358:src/display.c **** 	      }
3359:src/display.c **** 	      else
3360:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3361:src/display.c **** 	    } else {
3362:src/display.c **** 	      disp_x(p);
3363:src/display.c **** 	      x_disp = 1;
3364:src/display.c **** 	    }
3365:src/display.c **** 	    if (WasDataEntry) {
3366:src/display.c **** 	      goto finish;
3367:src/display.c **** 	    }
3368:src/display.c **** 	  } else {
3369:src/display.c **** 	    unsigned int pc = state_pc();
3370:src/display.c **** 	    unsigned int upc = user_pc(pc);
3371:src/display.c **** 	    const int n = nLIB(pc);
3372:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3373:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3374:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3375:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3376:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3377:src/display.c **** #ifndef REALBUILD
3378:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3379:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3380:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3381:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3382:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3383:src/display.c **** 	      char *b=buf;
3384:src/display.c **** 	      char *l=LastDisplayedNumber;
3385:src/display.c **** 	      *l++=' ';
3386:src/display.c **** 	      while(*b) {
3387:src/display.c **** 		*l++=*b++;
3388:src/display.c **** 		*l++=' ';
3389:src/display.c **** 	      }
3390:src/display.c **** 	      *l=0;
3391:src/display.c **** 	    }
3392:src/display.c **** #endif
3393:src/display.c **** 	  }
3394:src/display.c **** 	}
3395:src/display.c **** 	set_annunciators();
3396:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3397:src/display.c **** 	  ShowRPN = 0;
3398:src/display.c **** 	  dot(RPN, 0);
3399:src/display.c **** 	}
3400:src/display.c **** 	// disp_temp disables the <- key
3401:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3402:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3403:src/display.c **** 
3404:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3405:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3406:src/display.c **** 	  annunciators();
3407:src/display.c ****  	State2.hms = 0;
3408:src/display.c **** #else
3409:src/display.c **** 
3410:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
ARM GAS  /tmp/ccxUm1xs.s 			page 75


3411:src/display.c **** 	  annunciators();
3412:src/display.c **** 	
3413:src/display.c **** 
3414:src/display.c **** 
3415:src/display.c **** #endif
3416:src/display.c **** 
3417:src/display.c ****       finish:
3418:src/display.c **** 	State2.version = 0;
3419:src/display.c **** 	State2.disp_as_alpha = 0;
3420:src/display.c **** 	State2.smode = SDISP_NORMAL;
3421:src/display.c **** 	State2.invalid_disp = 0;
3422:src/display.c **** 	ShowRegister = regX_idx;
3423:src/display.c **** 	DispMsg = CNULL;
3424:src/display.c **** 	DispPlot = 0;
3425:src/display.c **** 	State2.disp_small = 0;
3426:src/display.c **** 	finish_display();
3427:src/display.c **** #ifdef CONSOLE
3428:src/display.c **** 	JustDisplayed = 1;
3429:src/display.c **** #endif
3430:src/display.c ****       }
3431:src/display.c **** #endif
3432:src/display.c ****       /*
3433:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3434:src/display.c ****        */
3435:src/display.c ****       void frozen_display()
3436:src/display.c ****       {
3437:src/display.c **** 	State2.disp_freeze = 0;
3438:src/display.c **** 	display();
3439:src/display.c **** 	State2.disp_freeze = 1;
3440:src/display.c ****       }
3441:src/display.c **** 
3442:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3443:src/display.c **** 	int glen = *graphic++;
3444:src/display.c **** 	int i, j;
3445:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3446:src/display.c **** 	unsigned long long int mat[6];
3447:src/display.c **** 
3448:src/display.c **** 	xset(mat, 0, sizeof(mat));
3449:src/display.c **** #endif
3450:src/display.c **** #ifndef REALBUILD
3451:src/display.c **** 	forceDispPlot=1;
3452:src/display.c **** #endif
3453:src/display.c **** 	if (glen <= 0)			return;
3454:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3455:src/display.c **** 
3456:src/display.c **** 	for (i=0; i<6; i++)
3457:src/display.c **** 	  for (j=1; j<=glen; j++) {
3458:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3459:src/display.c **** 	    if (graphic[j] & (1 << i))
3460:src/display.c **** 	      mat[i] |= 1LL << j;
3461:src/display.c **** #else
3462:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3463:src/display.c **** #endif
3464:src/display.c **** 	  }
3465:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3466:src/display.c **** 	set_status_grob(mat);
3467:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 76


3468:src/display.c ****       }
3469:src/display.c **** 
3470:src/display.c **** 
3471:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3472:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3473:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3474:src/display.c ****        * column is almost always blank.
3475:src/display.c ****        */
3476:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3477:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3478:src/display.c ****       }
3479:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3480:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3481:src/display.c ****       }
3482:src/display.c **** 
3483:src/display.c ****       
3484:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3484 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3485:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3485 2 view .LVU201
3486:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3487:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3488:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3488 2 view .LVU202
3489:src/display.c **** #endif
3490:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3490 2 view .LVU203
3491:src/display.c **** 	int i, j;
 686              		.loc 1 3491 2 view .LVU204
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3492 2 view .LVU205
3484:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3484 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3493:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3494:src/display.c **** 	unsigned long long int mat[6];
3495:src/display.c **** 
3496:src/display.c **** 	xset(mat, 0, sizeof(mat));
3497:src/display.c **** #endif
3498:src/display.c **** #ifndef REALBUILD
3499:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3499 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3484:src/display.c **** 	unsigned short int posns[257];
ARM GAS  /tmp/ccxUm1xs.s 			page 77


 702              		.loc 1 3484 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3492 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3484:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3484 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3492 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3492 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3499 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3499 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3492 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3499 2 is_stmt 1 view .LVU216
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3492 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3484:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3484 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3499 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3500:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3501:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3501 2 is_stmt 1 view .LVU220
 734              		.loc 1 3501 14 view .LVU221
 735              		.loc 1 3501 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3501 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3501 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3501 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3502:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3502 4 is_stmt 1 view .LVU226
ARM GAS  /tmp/ccxUm1xs.s 			page 78


 749              		.loc 1 3502 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3502 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3502 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3502 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3503:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3504:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3505:src/display.c **** 	      ++i;
3506:src/display.c **** 	  }
3507:src/display.c **** 	  else {
3508:src/display.c **** 	    ++i;
3509:src/display.c **** 	  }
3510:src/display.c **** 	}
3511:src/display.c **** #endif
3512:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3512 2 is_stmt 1 view .LVU231
3513:src/display.c **** #endif
3514:src/display.c **** #ifdef RP_PREFIX
3515:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3515 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3512:src/display.c **** #endif
 763              		.loc 1 3512 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3515 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3516:src/display.c **** #endif
3517:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3518:src/display.c **** 	findlengths(posns, smallp);
3519:src/display.c **** #endif
3520:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3520 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3512:src/display.c **** #endif
 770              		.loc 1 3512 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3515:src/display.c **** #endif
 772              		.loc 1 3515 2 is_stmt 1 view .LVU237
 773              		.loc 1 3520 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3520 8 view .LVU239
 776              		.loc 1 3520 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3520 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3490:src/display.c **** 	int i, j;
 781              		.loc 1 3490 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB200:
ARM GAS  /tmp/ccxUm1xs.s 			page 79


3521:src/display.c **** 	  int c;
3522:src/display.c **** 	  int width;
3523:src/display.c **** 	  unsigned char cmap[6];
3524:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3525:src/display.c **** 	  int real_width;
3526:src/display.c **** 	  int current_smallp;
3527:src/display.c **** 
3528:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3529:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3530:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3531:src/display.c **** 	  //           01 -> (not used)
3532:src/display.c **** 	  //           10 -> use big font
3533:src/display.c **** 	  //           11 -> use small font
3534:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3535:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3535 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE200:
3520:src/display.c **** 	  int c;
 787              		.loc 1 3520 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3488:src/display.c **** #endif
 790              		.loc 1 3488 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB209:
3521:src/display.c **** 	  int c;
 794              		.loc 1 3521 4 is_stmt 1 view .LVU246
3522:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3522 4 view .LVU247
3523:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3523 4 view .LVU248
3525:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3525 4 view .LVU249
3526:src/display.c **** 
 798              		.loc 1 3526 4 view .LVU250
 799              		.loc 1 3535 4 view .LVU251
 800              		.loc 1 3535 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3536:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3536 6 is_stmt 1 view .LVU253
 805              		.loc 1 3536 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3537:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3537 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3536:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3536 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3537 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
ARM GAS  /tmp/ccxUm1xs.s 			page 80


 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3538:src/display.c **** 	    default:
3539:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3540:src/display.c **** 	      break;
3541:src/display.c **** 	    case 0x40:	current_smallp = 0;
3542:src/display.c **** 	      break;
3543:src/display.c **** 	    case 0x60:	current_smallp = 1;
3544:src/display.c **** 	      break;
3545:src/display.c **** 	    }
3546:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3546 6 view .LVU258
 820              		.loc 1 3546 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3546 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3547:src/display.c **** 	    str += 3;
 831              		.loc 1 3547 6 is_stmt 1 discriminator 4 view .LVU261
3548:src/display.c **** 
3549:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3549 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3547:src/display.c **** 	    str += 3;
 836              		.loc 1 3547 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3549 6 is_stmt 1 discriminator 4 view .LVU264
3550:src/display.c **** 	  } else {
3551:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3552:src/display.c **** 	    real_width = width = charlengths(c);
3553:src/display.c **** 	    current_smallp = smallp;
3554:src/display.c **** 	  }
3555:src/display.c **** 
3556:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3556 4 discriminator 4 view .LVU265
 843              		.loc 1 3556 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3556 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3556 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3557:src/display.c **** 	    break;
ARM GAS  /tmp/ccxUm1xs.s 			page 81


3558:src/display.c **** 
3559:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3559 4 is_stmt 1 view .LVU269
 853              		.loc 1 3559 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3560:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3560 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3559:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3559 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3560 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3561:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3561 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3562:src/display.c **** 	  }
3563:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3563 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3564:src/display.c **** #else
3565:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3566:src/display.c **** 
3567:src/display.c **** 	  //cmap = &charset[c][0];
3568:src/display.c **** 	  width = charlengths(c);
3569:src/display.c **** 
3570:src/display.c **** 	  if (x + width > b_w+1)
3571:src/display.c **** 	    break;
3572:src/display.c **** 
3573:src/display.c **** 	  /* Decode the packed character bytes */
3574:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3575:src/display.c **** #endif
3576:src/display.c **** 
3577:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3577 4 view .LVU276
 877              		.loc 1 3577 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3577 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
ARM GAS  /tmp/ccxUm1xs.s 			page 82


3578:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3578 16 is_stmt 1 view .LVU279
 889              		.loc 1 3578 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3579:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3579 8 is_stmt 1 view .LVU281
 893              		.loc 1 3579 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3578 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3578 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB201:
 907              	.LBB202:
 348:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 348 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 348:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 348 11 view .LVU286
 912              	.LBE202:
 913              	.LBE201:
 914              		.loc 1 3579 8 is_stmt 1 view .LVU287
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3578 25 view .LVU288
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3578 16 view .LVU289
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3578 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3579 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3580:src/display.c **** 		break;
3581:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3582:src/display.c **** 	      if (cmap[i] & (1 << j))
3583:src/display.c **** 		mat[i] |= 1LL << (x+j);
3584:src/display.c **** #else
3585:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3585 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB206:
 929              	.LBI201:
ARM GAS  /tmp/ccxUm1xs.s 			page 83


 347:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 347 6 discriminator 2 view .LVU293
 931              	.LBB203:
 348:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 348 3 discriminator 2 view .LVU294
 348:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 348 11 discriminator 2 view .LVU295
 349:src/display.c **** }
 934              		.loc 1 349 8 discriminator 2 view .LVU296
 935              	.LBE203:
 936              	.LBE206:
 937              		.loc 1 3585 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3585 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB207:
 942              	.LBB204:
 348:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 348 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 348:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 348 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 348:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 348 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE204:
 950              	.LBE207:
3578:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3578 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB208:
 955              	.LBB205:
 349:src/display.c **** }
 956              		.loc 1 349 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 349:src/display.c **** }
 959              		.loc 1 349 8 view .LVU304
 960              	.LBE205:
 961              	.LBE208:
3579:src/display.c **** 		break;
 962              		.loc 1 3579 8 is_stmt 1 view .LVU305
3578:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3578 25 view .LVU306
3578:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3578 16 view .LVU307
3578:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3578 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3577 19 is_stmt 1 view .LVU309
ARM GAS  /tmp/ccxUm1xs.s 			page 84


3577:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3577 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3577 14 is_stmt 1 view .LVU311
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3577 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3586:src/display.c **** #endif
3587:src/display.c **** 	    }
3588:src/display.c **** 	  x += width;
 980              		.loc 1 3588 4 is_stmt 1 view .LVU313
 981              	.LBE209:
3520:src/display.c **** 	  int c;
 982              		.loc 1 3520 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB210:
 986              		.loc 1 3588 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3588 6 view .LVU316
 990              	.LBE210:
3520:src/display.c **** 	  int c;
 991              		.loc 1 3520 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3520:src/display.c **** 	  int c;
 993              		.loc 1 3520 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3520:src/display.c **** 	  int c;
 996              		.loc 1 3520 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB211:
3535:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3535 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE211:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB212:
3521:src/display.c **** 	  int width;
 1005              		.loc 1 3521 4 is_stmt 1 view .LVU321
3522:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3522 4 view .LVU322
3523:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3523 4 view .LVU323
3525:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3525 4 view .LVU324
3526:src/display.c **** 
 1009              		.loc 1 3526 4 view .LVU325
3535:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3535 4 view .LVU326
3535:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccxUm1xs.s 			page 85


 1011              		.loc 1 3535 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3551 6 is_stmt 1 view .LVU328
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3551 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3552:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3552 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3551 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3552:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3552 6 is_stmt 1 view .LVU332
3552:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3552 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3552:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3552 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3556:src/display.c **** 	    break;
 1034              		.loc 1 3556 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3552:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3552 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3553:src/display.c **** 	  }
 1039              		.loc 1 3553 6 is_stmt 1 view .LVU337
3556:src/display.c **** 	    break;
 1040              		.loc 1 3556 4 view .LVU338
3556:src/display.c **** 	    break;
 1041              		.loc 1 3556 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3556:src/display.c **** 	    break;
 1044              		.loc 1 3556 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3556:src/display.c **** 	    break;
 1049              		.loc 1 3556 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3556:src/display.c **** 	    break;
ARM GAS  /tmp/ccxUm1xs.s 			page 86


 1053              		.loc 1 3556 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3556:src/display.c **** 	    break;
 1057              		.loc 1 3556 7 view .LVU343
 1058              	.LBE212:
3589:src/display.c **** 	}
3590:src/display.c **** 
3591:src/display.c **** 
3592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3593:src/display.c **** 	set_status_grob(mat);
3594:src/display.c **** #else
3595:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3595 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3595 20 view .LVU345
 1061              		.loc 1 3595 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3596:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3596 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3595:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3595 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3596 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3595:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3595 27 is_stmt 1 discriminator 3 view .LVU350
3595:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3595 20 discriminator 3 view .LVU351
3595:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3595 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3597:src/display.c **** #endif
3598:src/display.c ****       }
 1081              		.loc 1 3598 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB213:
3543:src/display.c **** 	      break;
 1091              		.loc 1 3543 17 is_stmt 1 view .LVU354
3544:src/display.c **** 	    }
 1092              		.loc 1 3544 8 view .LVU355
ARM GAS  /tmp/ccxUm1xs.s 			page 87


3546:src/display.c **** 	    str += 3;
 1093              		.loc 1 3546 6 view .LVU356
3546:src/display.c **** 	    str += 3;
 1094              		.loc 1 3546 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3543:src/display.c **** 	      break;
 1097              		.loc 1 3543 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3541:src/display.c **** 	      break;
 1104              		.loc 1 3541 17 is_stmt 1 view .LVU359
3542:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3542 8 view .LVU360
3546:src/display.c **** 	    str += 3;
 1106              		.loc 1 3546 6 view .LVU361
3546:src/display.c **** 	    str += 3;
 1107              		.loc 1 3546 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3541:src/display.c **** 	      break;
 1110              		.loc 1 3541 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3541:src/display.c **** 	      break;
 1116              		.loc 1 3541 32 view .LVU364
 1117              	.LBE213:
3503:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3503 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3504:src/display.c **** 	      ++i;
 1123              		.loc 1 3504 6 view .LVU366
3504:src/display.c **** 	      ++i;
 1124              		.loc 1 3504 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB214:
3504:src/display.c **** 	      ++i;
 1133              		.loc 1 3504 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3504:src/display.c **** 	      ++i;
ARM GAS  /tmp/ccxUm1xs.s 			page 88


 1136              		.loc 1 3504 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3504:src/display.c **** 	      ++i;
 1141              		.loc 1 3504 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE214:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 450:src/display.c ****   union {
 1165              		.loc 1 450 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 451:src/display.c ****     char buf[4];
 1169              		.loc 1 451 3 view .LVU372
 455:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 455 3 view .LVU373
 457:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 457 3 view .LVU374
 463:src/display.c **** #  endif
 1172              		.loc 1 463 3 view .LVU375
 472:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 472 3 view .LVU376
 450:src/display.c ****   union {
 1174              		.loc 1 450 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 473:src/display.c ****     negative = 1;
 1183              		.loc 1 473 6 view .LVU378
 1184 0004 051E     		subs	r5, r0, #0
 450:src/display.c ****   union {
ARM GAS  /tmp/ccxUm1xs.s 			page 89


 1185              		.loc 1 450 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 450:src/display.c ****   union {
 1188              		.loc 1 450 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 473:src/display.c ****     negative = 1;
 1191              		.loc 1 473 3 is_stmt 1 view .LVU381
 473:src/display.c ****     negative = 1;
 1192              		.loc 1 473 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 478:src/display.c **** #endif
 1194              		.loc 1 478 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
 478:src/display.c **** #endif
 1199              		.loc 1 478 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 472:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 472 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 478:src/display.c **** #endif
 1204              		.loc 1 478 3 is_stmt 1 view .LVU386
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 480 3 view .LVU387
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 480 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 483:src/display.c **** #else
 1209              		.loc 1 483 5 is_stmt 1 view .LVU389
 483:src/display.c **** #else
 1210              		.loc 1 483 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 487 2 is_stmt 1 view .LVU391
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 487 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 487 17 is_stmt 1 discriminator 1 view .LVU393
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 487 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 487 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1223              		.loc 1 487 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
ARM GAS  /tmp/ccxUm1xs.s 			page 90


 1225              	.LVL112:
 494:src/display.c ****     }
 1226              		.loc 1 494 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
 1228              	.LVL113:
 1229              	.L127:
 490:src/display.c **** #else
 1230              		.loc 1 490 12 view .LVU398
 490:src/display.c **** #else
 1231              		.loc 1 490 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 490:src/display.c **** #else
 1234              		.loc 1 490 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 490:src/display.c **** #else
 1237              		.loc 1 490 19 view .LVU401
 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 494:src/display.c ****     }
 1240              		.loc 1 494 7 is_stmt 1 view .LVU402
 494:src/display.c ****     }
 1241              		.loc 1 494 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 490:src/display.c **** #else
 1244              		.loc 1 490 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 494:src/display.c ****     }
 1248              		.loc 1 494 21 is_stmt 1 discriminator 1 view .LVU405
 494:src/display.c ****     }
 1249              		.loc 1 494 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 494:src/display.c ****     }
 1252              		.loc 1 494 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 542:src/display.c **** #endif
 1257              		.loc 1 542 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 544 7 view .LVU409
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 544 10 is_stmt 0 view .LVU410
 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
ARM GAS  /tmp/ccxUm1xs.s 			page 91


 1268              	.L135:
 565:src/display.c ****     no_number:
 1269              		.loc 1 565 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 567:src/display.c ****     }
 1274              		.loc 1 567 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 568:src/display.c **** 
 1279              		.loc 1 568 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1288              		.loc 1 474 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 497 21 is_stmt 1 view .LVU415
 1293              	.LBB215:
 1294              	.LBI215:
 316:src/display.c **** {
 1295              		.loc 1 316 13 view .LVU416
 1296              	.LBB216:
 318:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 318 3 view .LVU417
 318:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 318 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 319:src/display.c **** }
 1302              		.loc 1 319 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 318 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 1306              		.loc 1 319 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 319:src/display.c **** }
 1310              		.loc 1 319 3 is_stmt 0 view .LVU422
 1311              	.LBE216:
 1312              	.LBE215:
ARM GAS  /tmp/ccxUm1xs.s 			page 92


 499:src/display.c **** #else
 1313              		.loc 1 499 7 is_stmt 1 view .LVU423
 499:src/display.c **** #else
 1314              		.loc 1 499 10 is_stmt 0 view .LVU424
 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 503:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 503 4 is_stmt 1 view .LVU425
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 517 6 view .LVU426
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 517 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 517 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1324              		.loc 1 519 6 is_stmt 1 view .LVU429
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 519 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB217:
 523:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 523 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 525 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 523:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 523 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 525 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 523:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 523 66 is_stmt 1 discriminator 3 view .LVU435
 523:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 523 41 discriminator 3 view .LVU436
 523:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 523 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 526:src/display.c **** 	    }
 1346              		.loc 1 526 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
 526:src/display.c **** 	    }
 1352              		.loc 1 526 8 is_stmt 0 view .LVU439
ARM GAS  /tmp/ccxUm1xs.s 			page 93


 1353              	.LBE217:
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 529 6 is_stmt 1 view .LVU440
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1355              		.loc 1 529 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 533:src/display.c **** 	    flags = 1;
 1359              		.loc 1 533 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 542:src/display.c **** #endif
 1362              		.loc 1 542 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 533:src/display.c **** 	    flags = 1;
 1364              		.loc 1 533 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
 1366              	.LVL132:
 534:src/display.c **** 	  }
 1367              		.loc 1 534 6 is_stmt 1 view .LVU445
 542:src/display.c **** #endif
 1368              		.loc 1 542 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 544 7 view .LVU447
 542:src/display.c **** #endif
 1375              		.loc 1 542 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 545:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 545 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 567:src/display.c ****     }
 1385              		.loc 1 567 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 568:src/display.c **** 
 1390              		.loc 1 568 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              	.LVL137:
 1397              	.L153:
ARM GAS  /tmp/ccxUm1xs.s 			page 94


 1398              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1399              		.loc 1 474 5 is_stmt 1 view .LVU452
 475:src/display.c ****   }
 1400              		.loc 1 475 5 view .LVU453
 478:src/display.c **** #endif
 1401              		.loc 1 478 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 475:src/display.c ****   }
 1403              		.loc 1 475 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 478:src/display.c **** #endif
 1406              		.loc 1 478 3 is_stmt 1 view .LVU456
 478:src/display.c **** #endif
 1407              		.loc 1 478 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
 1410              	.LVL139:
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 480 3 is_stmt 1 view .LVU458
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 480 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 483:src/display.c **** #else
 1415              		.loc 1 483 5 is_stmt 1 view .LVU460
 483:src/display.c **** #else
 1416              		.loc 1 483 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 490:src/display.c **** #else
 1419              		.loc 1 490 12 is_stmt 1 view .LVU462
 490:src/display.c **** #else
 1420              		.loc 1 490 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 490:src/display.c **** #else
 1423              		.loc 1 490 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 494:src/display.c ****     }
 1427              		.loc 1 494 7 is_stmt 1 view .LVU465
 490:src/display.c **** #else
 1428              		.loc 1 490 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 497 7 is_stmt 1 view .LVU467
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 497 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
ARM GAS  /tmp/ccxUm1xs.s 			page 95


 1438              	.LVL143:
 1439              	.L154:
 530:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 530 8 is_stmt 1 view .LVU469
 1441              	.LBB218:
 1442              	.LBI218:
 322:src/display.c **** {
 1443              		.loc 1 322 13 view .LVU470
 1444              	.LBB219:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 324 3 view .LVU471
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 324 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 325:src/display.c **** }
 1449              		.loc 1 325 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 324 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 1453              		.loc 1 325 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE219:
 1457              	.LBE218:
 531:src/display.c **** 	    }
 1458              		.loc 1 531 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB50:
 375:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 375 14 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccxUm1xs.s 			page 96


 382:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 382 5 view .LVU478
 375:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 375 14 is_stmt 0 view .LVU479
 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 375:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 375 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 383:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 383 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 383 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 384:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 384 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 382:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 382 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 383 5 is_stmt 1 view .LVU485
 384:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 384 5 view .LVU486
 384:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 384 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 387:src/display.c **** #endif
 1514              		.loc 1 387 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 387:src/display.c **** #endif
 1517              		.loc 1 387 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 387:src/display.c **** #endif
 1519              		.loc 1 387 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 387:src/display.c **** #endif
 1521              		.loc 1 387 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 387:src/display.c **** #endif
 1525              		.loc 1 387 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 387:src/display.c **** #endif
 1527              		.loc 1 387 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 97


 391:src/display.c **** 
 1529              		.loc 1 391 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 387:src/display.c **** #endif
 1531              		.loc 1 387 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 391:src/display.c **** 
 1534              		.loc 1 391 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 385:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 385 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 387:src/display.c **** #endif
 1542              		.loc 1 387 5 view .LVU498
 387:src/display.c **** #endif
 1543              		.loc 1 387 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE50:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 357:src/display.c ****   if (res) {
 1565              		.loc 1 357 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 358 3 view .LVU501
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 358 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 359:src/display.c ****   } else {
 1572              		.loc 1 359 5 is_stmt 1 view .LVU503
 359:src/display.c ****   } else {
 1573              		.loc 1 359 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
 359:src/display.c ****   } else {
 1575              		.loc 1 359 9 view .LVU505
ARM GAS  /tmp/ccxUm1xs.s 			page 98


 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 359:src/display.c ****   } else {
 1578              		.loc 1 359 12 view .LVU506
 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 369:src/display.c **** 
 1584              		.loc 1 369 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 361 5 is_stmt 1 view .LVU508
 357:src/display.c ****   if (res) {
 1589              		.loc 1 357 87 is_stmt 0 view .LVU509
 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 361 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 361 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 362:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 362 5 is_stmt 1 view .LVU512
 362:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 362 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB222:
 1609              	.LBB223:
 365:src/display.c **** #endif
 1610              		.loc 1 365 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 365:src/display.c **** #endif
 1613              		.loc 1 365 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 365:src/display.c **** #endif
 1615              		.loc 1 365 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 365:src/display.c **** #endif
 1617              		.loc 1 365 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
ARM GAS  /tmp/ccxUm1xs.s 			page 99


 365:src/display.c **** #endif
 1621              		.loc 1 365 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 365:src/display.c **** #endif
 1623              		.loc 1 365 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 365:src/display.c **** #endif
 1625              		.loc 1 365 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 368:src/display.c **** }
 1629              		.loc 1 368 3 is_stmt 1 view .LVU521
 368:src/display.c **** }
 1630              		.loc 1 368 3 is_stmt 0 view .LVU522
 1631              	.LBE223:
 1632              	.LBE222:
 368:src/display.c **** }
 1633              		.loc 1 368 3 is_stmt 1 view .LVU523
 369:src/display.c **** 
 1634              		.loc 1 369 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 363:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 363 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB225:
 1648              	.LBI222:
 357:src/display.c ****   if (res) {
 1649              		.loc 1 357 14 view .LVU526
 1650              	.LBB224:
 365:src/display.c **** #endif
 1651              		.loc 1 365 5 view .LVU527
 365:src/display.c **** #endif
 1652              		.loc 1 365 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE224:
 1661              	.LBE225:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
 1666              		.align	1
 1667              		.p2align 2,,3
ARM GAS  /tmp/ccxUm1xs.s 			page 100


 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 422 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 423 3 view .LVU530
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 422 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 423 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 423 10 is_stmt 1 view .LVU533
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 423 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB226:
 1699              	.LBB227:
 417:src/display.c ****   return res;
 1700              		.loc 1 417 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 418:src/display.c **** }
 1704              		.loc 1 418 3 is_stmt 1 view .LVU536
 418:src/display.c **** }
 1705              		.loc 1 418 3 is_stmt 0 view .LVU537
 1706              	.LBE227:
 1707              	.LBE226:
 428:src/display.c ****     }
 1708              		.loc 1 428 7 is_stmt 1 view .LVU538
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 423 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 428:src/display.c ****     }
 1712              		.loc 1 428 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
ARM GAS  /tmp/ccxUm1xs.s 			page 101


 1714              	.LVL168:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 423 24 is_stmt 1 view .LVU541
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1716              		.loc 1 423 10 view .LVU542
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 423 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 424 5 is_stmt 1 view .LVU544
 425:src/display.c ****     else {
 1722              		.loc 1 425 7 view .LVU545
 427:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 427 7 view .LVU546
 1724              	.LBB230:
 1725              	.LBI226:
 415:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 415 14 view .LVU547
 1727              	.LBB228:
 416:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 416 3 view .LVU548
 417:src/display.c ****   return res;
 1729              		.loc 1 417 8 view .LVU549
 1730              	.LBE228:
 1731              	.LBE230:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 424 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 425:src/display.c ****     else {
 1735              		.loc 1 425 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB231:
 1739              	.LBB229:
 417:src/display.c ****   return res;
 1740              		.loc 1 417 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE229:
 1743              	.LBE231:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 424 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 425:src/display.c ****     else {
 1746              		.loc 1 425 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 423 24 is_stmt 1 view .LVU555
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1753              		.loc 1 423 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccxUm1xs.s 			page 102


 1755              	.LVL171:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 423 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 431:src/display.c **** 
 1761              		.loc 1 431 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB52:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1625 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1626 2 view .LVU560
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1625 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1626 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1625 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1626 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1627:src/display.c **** 	    if (res) {
 1800              		.loc 1 1627 4 is_stmt 1 view .LVU565
1627:src/display.c **** 	    if (res) {
 1801              		.loc 1 1627 7 is_stmt 0 view .LVU566
 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
ARM GAS  /tmp/ccxUm1xs.s 			page 103


 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB234:
 1807              	.LBI234:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1625 18 is_stmt 1 view .LVU567
 1809              	.LBB235:
1628:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1628 6 view .LVU568
1628:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1628 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1629:src/display.c **** 	    } else {
 1813              		.loc 1 1629 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1629:src/display.c **** 	    } else {
 1817              		.loc 1 1629 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1629:src/display.c **** 	    } else {
 1820              		.loc 1 1629 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1629:src/display.c **** 	    } else {
 1824              		.loc 1 1629 8 view .LVU573
 1825              	.LBE235:
 1826              	.LBE234:
1661:src/display.c **** 
 1827              		.loc 1 1661 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1639:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1639 6 is_stmt 1 view .LVU575
1639:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1639 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1643:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1643 6 is_stmt 1 view .LVU577
1643:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1643 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1644:src/display.c **** 	    else {
 1840              		.loc 1 1644 8 is_stmt 1 view .LVU579
1644:src/display.c **** 	    else {
 1841              		.loc 1 1644 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1657:src/display.c **** 	  }
 1844              		.loc 1 1657 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 104


1661:src/display.c **** 
 1846              		.loc 1 1661 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
 1849              	.L202:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1640 8 is_stmt 1 view .LVU583
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1640 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1640 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1640 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
1643:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1643 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB237:
 1864              	.LBB236:
1631:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1631 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1633:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1633 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1634:src/display.c **** #endif
 1874              		.loc 1 1634 8 view .LVU590
1634:src/display.c **** #endif
 1875              		.loc 1 1634 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE236:
 1880              	.LBE237:
1661:src/display.c **** 
 1881              		.loc 1 1661 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1641:src/display.c **** 	    }
 1885              		.loc 1 1641 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1641:src/display.c **** 	    }
 1888              		.loc 1 1641 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
ARM GAS  /tmp/ccxUm1xs.s 			page 105


 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1643:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1643 6 is_stmt 1 view .LVU595
 1893              	.L194:
1646:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1646 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1648 8 view .LVU597
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1648 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1652:src/display.c **** 	      }
 1902              		.loc 1 1652 3 view .LVU599
 1903 0064 0848     		ldr	r0, .L203+12
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1648 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1649:src/display.c **** 	      }
 1906              		.loc 1 1649 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1652:src/display.c **** 	      }
 1909              		.loc 1 1652 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1654:src/display.c **** #endif
 1913              		.loc 1 1654 8 view .LVU603
1654:src/display.c **** #endif
 1914              		.loc 1 1654 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1657:src/display.c **** 	  }
 1918              		.loc 1 1657 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1661:src/display.c **** 
 1920              		.loc 1 1661 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
 1933              		.cfi_endproc
 1934              	.LFE52:
ARM GAS  /tmp/ccxUm1xs.s 			page 106


 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1706 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1707:src/display.c **** 	int j=0;
 1951              		.loc 1 1707 2 view .LVU608
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1952              		.loc 1 1708 2 view .LVU609
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1706 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1706 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1708 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1712 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1706 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1708 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1709:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1709 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1710:src/display.c **** 
 1974              		.loc 1 1710 2 view .LVU617
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1712 2 view .LVU618
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1712 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1712 5 view .LVU620
ARM GAS  /tmp/ccxUm1xs.s 			page 107


 1980 0012 48B1     		cbz	r0, .L206
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1713 4 is_stmt 1 view .LVU621
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1982              		.loc 1 1713 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1714:src/display.c **** 	  return;
 1986              		.loc 1 1714 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB238:
 1989              	.LBI238:
 415:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 415 14 view .LVU624
 1991              	.LBB239:
 416:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 416 3 view .LVU625
 416:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 416 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 416:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 416 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 416:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 416 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 416:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 416 19 view .LVU629
 2004              	.LBE239:
 2005              	.LBE238:
1769:src/display.c **** 
 2006              		.loc 1 1769 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1718:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1718 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1719:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1719 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
 2023              	.LVL200:
1720:src/display.c **** 	if (decNumberIsNegative(&x)) {
ARM GAS  /tmp/ccxUm1xs.s 			page 108


 2024              		.loc 1 1720 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
 2028              	.LVL201:
1721:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1721 2 view .LVU634
1721:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1721 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1729:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1729 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
 2039              	.LVL202:
1730:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1730 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1731:src/display.c **** 
 2046              		.loc 1 1731 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1733:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1733 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1734:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1734 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1735:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1735 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1736 2 view .LVU642
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1736 7 is_stmt 0 view .LVU643
ARM GAS  /tmp/ccxUm1xs.s 			page 109


 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2074              		.loc 1 1737 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1737 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1737 19 is_stmt 1 view .LVU646
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1737 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1737 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1738:src/display.c **** 
 2085              		.loc 1 1738 2 is_stmt 1 view .LVU649
1738:src/display.c **** 
 2086              		.loc 1 1738 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1738:src/display.c **** 
 2089              		.loc 1 1738 19 is_stmt 1 discriminator 1 view .LVU651
1738:src/display.c **** 
 2090              		.loc 1 1738 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1738:src/display.c **** 
 2093              		.loc 1 1738 30 is_stmt 1 discriminator 1 view .LVU653
1738:src/display.c **** 
 2094              		.loc 1 1738 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1741 2 is_stmt 1 view .LVU655
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1741 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1742:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1742 2 is_stmt 1 view .LVU657
 2108              	.LBB241:
 2109              	.LBI241:
 415:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 415 14 view .LVU658
 2111              	.LBB242:
 416:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccxUm1xs.s 			page 110


 2112              		.loc 1 416 3 view .LVU659
 416:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 416 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
 2115              	.LVL211:
 416:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 416 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 416:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 416 12 is_stmt 1 view .LVU662
 416:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 416 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 416:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 416 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 418:src/display.c **** }
 2128              		.loc 1 418 3 is_stmt 1 view .LVU665
 418:src/display.c **** }
 2129              		.loc 1 418 3 is_stmt 0 view .LVU666
 2130              	.LBE242:
 2131              	.LBE241:
1743:src/display.c **** 
 2132              		.loc 1 1743 2 is_stmt 1 view .LVU667
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1746 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1743:src/display.c **** 
 2136              		.loc 1 1743 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1746 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1743:src/display.c **** 
 2142              		.loc 1 1743 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1746 2 is_stmt 1 view .LVU672
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1746 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1747:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1747 2 is_stmt 1 view .LVU674
 2149              	.LBB244:
 2150              	.LBI244:
 415:src/display.c ****   if (res) *res++ = ch;
 2151              		.loc 1 415 14 view .LVU675
 2152              	.LBB245:
ARM GAS  /tmp/ccxUm1xs.s 			page 111


 416:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 416 3 view .LVU676
 416:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 416 6 is_stmt 0 view .LVU677
 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 416:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 416 12 is_stmt 1 view .LVU678
 416:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 416 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 416:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 416 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
 2166              	.L219:
 418:src/display.c **** }
 2167              		.loc 1 418 3 is_stmt 1 view .LVU681
 418:src/display.c **** }
 2168              		.loc 1 418 3 is_stmt 0 view .LVU682
 2169              	.LBE245:
 2170              	.LBE244:
1748:src/display.c **** 
 2171              		.loc 1 1748 2 is_stmt 1 view .LVU683
1748:src/display.c **** 
 2172              		.loc 1 1748 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1751 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1748:src/display.c **** 
 2177              		.loc 1 1748 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1751 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1748:src/display.c **** 
 2183              		.loc 1 1748 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1751 2 is_stmt 1 view .LVU689
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1751 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1752:src/display.c **** 
 2189              		.loc 1 1752 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2191              		.loc 1 1751 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
ARM GAS  /tmp/ccxUm1xs.s 			page 112


 2193              	.LVL218:
1752:src/display.c **** 
 2194              		.loc 1 1752 2 is_stmt 1 view .LVU693
1752:src/display.c **** 
 2195              		.loc 1 1752 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1752:src/display.c **** 
 2198              		.loc 1 1752 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1755:src/display.c **** 
 2203              		.loc 1 1755 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1752:src/display.c **** 
 2205              		.loc 1 1752 8 view .LVU697
 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1755:src/display.c **** 
 2208              		.loc 1 1755 2 is_stmt 1 view .LVU698
1755:src/display.c **** 
 2209              		.loc 1 1755 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1755:src/display.c **** 
 2213              		.loc 1 1755 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1758:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1758 2 is_stmt 1 view .LVU701
 2219              	.LBB247:
 2220              	.LBI247:
 415:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 415 14 view .LVU702
 2222              	.LBB248:
 416:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 416 3 view .LVU703
 416:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 416 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 416:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 416 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 416:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 416 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 418:src/display.c **** }
 2233              		.loc 1 418 3 is_stmt 1 view .LVU707
 418:src/display.c **** }
ARM GAS  /tmp/ccxUm1xs.s 			page 113


 2234              		.loc 1 418 3 is_stmt 0 view .LVU708
 2235              	.LBE248:
 2236              	.LBE247:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2237              		.loc 1 1762 2 is_stmt 1 view .LVU709
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1762 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1762 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1762 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1763:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2247              		.loc 1 1763 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB251:
 2250              	.LBI251:
 415:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 415 14 view .LVU714
 2252              	.LBB252:
 416:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 416 3 view .LVU715
 416:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 416 12 view .LVU716
 416:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 416 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE252:
 2259              	.LBE251:
1769:src/display.c **** 
 2260              		.loc 1 1769 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1722:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1722 4 is_stmt 1 view .LVU719
1722:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1722 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1723:src/display.c **** 	  else
 2272              		.loc 1 1723 6 is_stmt 1 view .LVU721
1723:src/display.c **** 	  else
 2273              		.loc 1 1723 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
 2275              	.LVL230:
1723:src/display.c **** 	  else
ARM GAS  /tmp/ccxUm1xs.s 			page 114


 2276              		.loc 1 1723 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1723:src/display.c **** 	  else
 2279              		.loc 1 1723 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1723:src/display.c **** 	  else
 2282              		.loc 1 1723 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1726:src/display.c **** 	}
 2286              		.loc 1 1726 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB253:
 2295              	.LBB249:
 416:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 416 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 416:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 416 16 view .LVU728
 2301              	.LBE249:
 2302              	.LBE253:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1764 9 is_stmt 1 view .LVU729
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1764 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1764 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1765 4 is_stmt 1 view .LVU732
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1765 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1765 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
1766:src/display.c **** 	  }
 2320              		.loc 1 1766 6 is_stmt 1 view .LVU735
ARM GAS  /tmp/ccxUm1xs.s 			page 115


 2321              	.LVL238:
 2322              	.LBB254:
 2323              	.LBI254:
 415:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 415 14 view .LVU736
 2325              	.LBB255:
 416:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 416 3 view .LVU737
 416:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 416 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 416:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 416 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 416:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 416 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 416:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 416 19 view .LVU741
 2338              	.LBE255:
 2339              	.LBE254:
1725:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1725 6 is_stmt 1 view .LVU742
 2341              	.LBB257:
 2342              	.LBI257:
 304:src/display.c **** {
 2343              		.loc 1 304 13 view .LVU743
 2344              	.LBB258:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 306 3 view .LVU744
 306:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 306 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 307:src/display.c **** }
 2349              		.loc 1 307 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 306 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2353              		.loc 1 307 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 308:src/display.c **** 
 2356              		.loc 1 308 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 308:src/display.c **** 
 2360              		.loc 1 308 1 view .LVU750
 2361              	.LBE258:
 2362              	.LBE257:
ARM GAS  /tmp/ccxUm1xs.s 			page 116


 2363              	.LBB259:
 2364              	.LBB250:
 417:src/display.c ****   return res;
 2365              		.loc 1 417 8 is_stmt 1 view .LVU751
 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 417:src/display.c ****   return res;
 2368              		.loc 1 417 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 418:src/display.c **** }
 2372              		.loc 1 418 3 is_stmt 1 view .LVU753
 418:src/display.c **** }
 2373              		.loc 1 418 3 is_stmt 0 view .LVU754
 2374              	.LBE250:
 2375              	.LBE259:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2376              		.loc 1 1762 2 is_stmt 1 view .LVU755
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1762 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1762 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB260:
 2388              	.LBB240:
 417:src/display.c ****   return res;
 2389              		.loc 1 417 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE240:
 2395              	.LBE260:
1715:src/display.c **** 	}
 2396              		.loc 1 1715 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB261:
 2401              	.LBB246:
 417:src/display.c ****   return res;
 2402              		.loc 1 417 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 417:src/display.c ****   return res;
 2406              		.loc 1 417 8 is_stmt 0 view .LVU761
 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
ARM GAS  /tmp/ccxUm1xs.s 			page 117


 417:src/display.c ****   return res;
 2409              		.loc 1 417 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
 2412              	.LVL251:
 2413              	.L216:
 417:src/display.c ****   return res;
 2414              		.loc 1 417 8 view .LVU763
 2415              	.LBE246:
 2416              	.LBE261:
 2417              	.LBB262:
 2418              	.LBB243:
 417:src/display.c ****   return res;
 2419              		.loc 1 417 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 417:src/display.c ****   return res;
 2423              		.loc 1 417 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 417:src/display.c ****   return res;
 2426              		.loc 1 417 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 417:src/display.c ****   return res;
 2431              		.loc 1 417 8 view .LVU767
 2432              	.LBE243:
 2433              	.LBE262:
 2434              	.LBB263:
 2435              	.LBB256:
 417:src/display.c ****   return res;
 2436              		.loc 1 417 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE256:
 2450              	.LBE263:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
ARM GAS  /tmp/ccxUm1xs.s 			page 118


 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1772 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1773:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1773 2 view .LVU770
1774:src/display.c **** 	int j;
 2470              		.loc 1 1774 2 view .LVU771
1775:src/display.c **** 
 2471              		.loc 1 1775 2 view .LVU772
1777:src/display.c **** 	  return 1;
 2472              		.loc 1 1777 2 view .LVU773
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2473              		.loc 1 1772 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1777:src/display.c **** 	  return 1;
 2484              		.loc 1 1777 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1772 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1777:src/display.c **** 	  return 1;
 2489              		.loc 1 1777 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1777:src/display.c **** 	  return 1;
 2492              		.loc 1 1777 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1778:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1778 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1835:src/display.c **** 
 2499              		.loc 1 1835 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccxUm1xs.s 			page 119


 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB272:
 2510              	.LBI272:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1772 18 is_stmt 1 view .LVU781
 2512              	.LBB273:
1779:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1779 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1780:src/display.c **** 	  return 0;
 2519              		.loc 1 1780 2 view .LVU783
1780:src/display.c **** 	  return 0;
 2520              		.loc 1 1780 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1780:src/display.c **** 	  return 0;
 2525              		.loc 1 1780 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1782:src/display.c **** 	  return 0;
 2528              		.loc 1 1782 2 is_stmt 1 view .LVU786
1782:src/display.c **** 	  return 0;
 2529              		.loc 1 1782 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1782:src/display.c **** 	  return 0;
 2534              		.loc 1 1782 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1784:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1784 2 is_stmt 1 view .LVU789
1784:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1784 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1790:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1790 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
1791:src/display.c **** 
 2550              		.loc 1 1791 2 view .LVU792
ARM GAS  /tmp/ccxUm1xs.s 			page 120


 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
 2555              	.LVL266:
1793:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1793 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1794:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1794 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
 2567              	.LVL268:
1795:src/display.c **** 
 2568              		.loc 1 1795 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1797:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1797 2 view .LVU796
1797:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1797 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1797:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1797 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1802 2 is_stmt 1 view .LVU799
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1802 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1802 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1803 4 is_stmt 1 view .LVU802
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1803 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
 2595              	.LVL271:
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
ARM GAS  /tmp/ccxUm1xs.s 			page 121


 2596              		.loc 1 1803 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1774:src/display.c **** 	int j;
 2599              		.loc 1 1774 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1774:src/display.c **** 	int j;
 2602              		.loc 1 1774 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1811:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1811 2 is_stmt 1 view .LVU807
1811:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1811 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1811:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1811 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1812 2 is_stmt 1 view .LVU810
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1812 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1812 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1813:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1813 2 is_stmt 1 view .LVU813
1813:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1813 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1813:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1813 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1814:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1814 2 is_stmt 1 view .LVU816
1814:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1814 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1815:src/display.c **** 	  p -= 12;
ARM GAS  /tmp/ccxUm1xs.s 			page 122


 2639              		.loc 1 1815 2 is_stmt 1 view .LVU818
1815:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1815 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1819 12 is_stmt 1 view .LVU820
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1819 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1818:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1818 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1820:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2652              		.loc 1 1820 4 is_stmt 1 view .LVU823
 2653              	.LBB274:
 2654              	.LBI274:
 415:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 415 14 view .LVU824
 2656              	.LBB275:
 416:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 416 3 view .LVU825
 416:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 416 12 view .LVU826
 416:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 416 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 416:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 416 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 416:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 416 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 416:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 416 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 418:src/display.c **** }
 2672              		.loc 1 418 3 is_stmt 1 view .LVU831
 418:src/display.c **** }
 2673              		.loc 1 418 3 is_stmt 0 view .LVU832
 2674              	.LBE275:
 2675              	.LBE274:
1821:src/display.c **** 	}
 2676              		.loc 1 1821 4 is_stmt 1 view .LVU833
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1819 12 is_stmt 0 view .LVU834
 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
ARM GAS  /tmp/ccxUm1xs.s 			page 123


1821:src/display.c **** 	}
 2680              		.loc 1 1821 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1819 24 is_stmt 1 view .LVU836
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1819 12 view .LVU837
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1819 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1824 2 is_stmt 1 view .LVU839
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1824 6 is_stmt 0 view .LVU840
 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1824 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1826 7 is_stmt 1 view .LVU842
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1826 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1829:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1829 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1830 26 is_stmt 1 view .LVU845
 2709              	.LBB278:
 2710              	.LBB276:
 416:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 416 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 416:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 416 16 view .LVU847
 2718              	.LBE276:
 2719              	.LBE278:
 2720              	.LBB279:
 2721              	.LBB280:
 416:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 416 19 view .LVU848
ARM GAS  /tmp/ccxUm1xs.s 			page 124


 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 416:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 416 16 view .LVU849
 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 418:src/display.c **** }
 2729              		.loc 1 418 3 is_stmt 1 view .LVU850
 418:src/display.c **** }
 2730              		.loc 1 418 3 is_stmt 0 view .LVU851
 2731              	.LBE280:
 2732              	.LBE279:
1832:src/display.c **** 	}
 2733              		.loc 1 1832 4 is_stmt 1 view .LVU852
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1830 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2736              	.LVL294:
1832:src/display.c **** 	}
 2737              		.loc 1 1832 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1830 38 is_stmt 1 view .LVU855
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1830 26 view .LVU856
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1830 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1831:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1831 4 is_stmt 1 view .LVU858
 2748              	.LBB282:
 2749              	.LBI279:
 415:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 415 14 view .LVU859
 2751              	.LBB281:
 416:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 416 3 view .LVU860
 416:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 416 12 view .LVU861
 416:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 416 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 416:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 416 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 417:src/display.c ****   return res;
 2761              		.loc 1 417 8 is_stmt 1 view .LVU864
 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccxUm1xs.s 			page 125


 2764              	.LVL299:
 417:src/display.c ****   return res;
 2765              		.loc 1 417 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
 2767              	.LVL300:
 2768              	.L251:
 417:src/display.c ****   return res;
 2769              		.loc 1 417 8 view .LVU866
 2770              	.LBE281:
 2771              	.LBE282:
 2772              	.LBB283:
 2773              	.LBB277:
 417:src/display.c ****   return res;
 2774              		.loc 1 417 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 417:src/display.c ****   return res;
 2778              		.loc 1 417 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 417:src/display.c ****   return res;
 2782              		.loc 1 417 8 view .LVU869
 2783              	.LBE277:
 2784              	.LBE283:
1825:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1825 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1816:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1816 4 is_stmt 1 view .LVU871
1817:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1817 4 view .LVU872
1817:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1817 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1819 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1808:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1808 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1809:src/display.c **** 	}
 2806              		.loc 1 1809 4 view .LVU876
 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
ARM GAS  /tmp/ccxUm1xs.s 			page 126


 2809 0146 0846     		mov	r0, r1
1774:src/display.c **** 	int j;
 2810              		.loc 1 1774 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
 2812              	.LVL307:
1809:src/display.c **** 	}
 2813              		.loc 1 1809 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1774:src/display.c **** 	int j;
 2816              		.loc 1 1774 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1785:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1785 4 is_stmt 1 view .LVU880
1785:src/display.c **** 	    *res++ += '-';
 2822              		.loc 1 1785 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1786:src/display.c **** 	  else
 2824              		.loc 1 1786 6 is_stmt 1 view .LVU882
1786:src/display.c **** 	  else
 2825              		.loc 1 1786 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1786:src/display.c **** 	  else
 2828              		.loc 1 1786 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1786:src/display.c **** 	  else
 2831              		.loc 1 1786 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1786:src/display.c **** 	  else
 2834              		.loc 1 1786 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1786:src/display.c **** 	  else
 2837              		.loc 1 1786 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1798:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1798 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1799:src/display.c **** 	}
 2845              		.loc 1 1799 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
1804:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1804 6 view .LVU890
ARM GAS  /tmp/ccxUm1xs.s 			page 127


1804:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1804 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
 2855              	.LVL316:
1804:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1804 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1804:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1804 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1804:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1804 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1805:src/display.c **** 	  }
 2865              		.loc 1 1805 6 is_stmt 1 view .LVU895
1805:src/display.c **** 	  }
 2866              		.loc 1 1805 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1805:src/display.c **** 	  }
 2869              		.loc 1 1805 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1805:src/display.c **** 	  }
 2873              		.loc 1 1805 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1788:src/display.c **** 	}
 2877              		.loc 1 1788 6 is_stmt 1 view .LVU899
 2878              	.LBB284:
 2879              	.LBI284:
 304:src/display.c **** {
 2880              		.loc 1 304 13 view .LVU900
 2881              	.LBB285:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 306 3 view .LVU901
 306:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 306 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 307:src/display.c **** }
 2886              		.loc 1 307 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 306 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2890              		.loc 1 307 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
 2892              	.LVL322:
 308:src/display.c **** 
ARM GAS  /tmp/ccxUm1xs.s 			page 128


 2893              		.loc 1 308 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE285:
 2906              	.LBE284:
 2907              	.LBE273:
 2908              	.LBE272:
 2909              		.cfi_endproc
 2910              	.LFE23:
 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 570 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 571:src/display.c ****       int c;
 2930              		.loc 1 571 7 view .LVU908
 2931              	.LVL323:
 572:src/display.c ****       unsigned int b;
 2932              		.loc 1 572 7 view .LVU909
 573:src/display.c **** 
 2933              		.loc 1 573 7 view .LVU910
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 576 7 view .LVU911
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 570 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2940              		.loc 1 576 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
ARM GAS  /tmp/ccxUm1xs.s 			page 129


 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 585:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 585 7 is_stmt 1 view .LVU914
 585:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 585 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 585 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
 587:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 587 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 588:src/display.c **** 
 2959              		.loc 1 588 7 view .LVU918
 587:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 587 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 588:src/display.c **** 
 2964              		.loc 1 588 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 591 7 is_stmt 1 view .LVU921
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 591 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 591 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 593 7 is_stmt 1 view .LVU924
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 593 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 593 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 595:src/display.c **** 
 2982              		.loc 1 595 5 view .LVU927
 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
ARM GAS  /tmp/ccxUm1xs.s 			page 130


 2985              	.L277:
 581:src/display.c ****       }
 2986              		.loc 1 581 16 is_stmt 1 view .LVU928
 581:src/display.c ****       }
 2987              		.loc 1 581 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 581:src/display.c ****       }
 2992              		.loc 1 581 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 581:src/display.c ****       }
 2995              		.loc 1 581 39 is_stmt 1 view .LVU931
 585:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 585 7 view .LVU932
 585:src/display.c **** 	SET_EXP_SIGN;
 2997              		.loc 1 585 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 585 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 586:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 586 2 is_stmt 1 view .LVU935
 3004              	.LBB292:
 3005              	.LBI292:
 316:src/display.c **** {
 3006              		.loc 1 316 13 view .LVU936
 3007              	.LBB293:
 318:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 318 3 view .LVU937
 318:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 318 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 319:src/display.c **** }
 3012              		.loc 1 319 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 318 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 3016              		.loc 1 319 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 320:src/display.c **** 
 3019              		.loc 1 320 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 320:src/display.c **** 
 3023              		.loc 1 320 1 view .LVU943
 3024              	.LBE293:
 3025              	.LBE292:
ARM GAS  /tmp/ccxUm1xs.s 			page 131


 3026              	.LBB294:
 3027              	.LBI294:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 570 17 is_stmt 1 view .LVU944
 3029              	.LBB295:
 594:src/display.c ****     }
 3030              		.loc 1 594 2 view .LVU945
 3031              	.LBE295:
 3032              	.LBE294:
 595:src/display.c **** 
 3033              		.loc 1 595 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB297:
 3041              	.LBB296:
 594:src/display.c ****     }
 3042              		.loc 1 594 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 594:src/display.c ****     }
 3049              		.loc 1 594 2 view .LVU948
 3050              	.LBE296:
 3051              	.LBE297:
 592:src/display.c ****       if (get_overflow())
 3052              		.loc 1 592 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
ARM GAS  /tmp/ccxUm1xs.s 			page 132


 3079              	.LVL337:
 3080              	.LFB18:
1485:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1485 67 view -0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1485:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1485 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1485:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1485 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1486:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1486 2 is_stmt 1 view .LVU953
1486:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1486 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1486:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1486 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1492 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1486:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1486 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1487:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1487 2 is_stmt 1 view .LVU958
1488:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1488 2 view .LVU959
1489:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1489 2 view .LVU960
1490:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1490 2 view .LVU961
1491:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1491 2 view .LVU962
ARM GAS  /tmp/ccxUm1xs.s 			page 133


1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1492 2 view .LVU963
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1492 6 is_stmt 0 view .LVU964
 3125 001e 0492     		str	r2, [sp, #16]
1493:src/display.c **** 
 3126              		.loc 1 1493 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1495:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1495 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1503:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1503 2 view .LVU967
1503:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1503 5 is_stmt 0 view .LVU968
 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1508 2 is_stmt 1 view .LVU969
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1508 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1508 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1508 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1525 4 is_stmt 1 view .LVU973
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1525 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB298:
1526:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1526 6 is_stmt 1 view .LVU975
1526:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1526 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3163              		.loc 1 1527 6 is_stmt 1 view .LVU977
1526:src/display.c **** 	    vs &= mask;
ARM GAS  /tmp/ccxUm1xs.s 			page 134


 3164              		.loc 1 1526 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3167              		.loc 1 1527 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1528:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1528 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1527 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1527 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
1528:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1528 6 is_stmt 1 view .LVU983
1528:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1528 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1528:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1528 9 view .LVU985
 3184              	.LBE298:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1532 4 is_stmt 1 view .LVU986
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1532 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1532 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1535 11 is_stmt 1 view .LVU989
 3194              	.LBB299:
1543:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1543 6 view .LVU990
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1544 6 view .LVU991
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1544 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1545 6 is_stmt 1 view .LVU993
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1545 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 135


 3205 0090 0023     		moveq	r3, #0
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1545 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1546:src/display.c **** 
 3212              		.loc 1 1546 6 is_stmt 1 discriminator 4 view .LVU996
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1548 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1548 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3218              		.loc 1 1548 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1549:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1549 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1546:src/display.c **** 
 3222              		.loc 1 1546 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1548 6 is_stmt 1 discriminator 4 view .LVU1002
1549:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1549 6 discriminator 4 view .LVU1003
1549:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1549 16 discriminator 4 view .LVU1004
1549:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1549 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1549:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1549 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB300:
1550:src/display.c **** 	      v /= b;
 3239              		.loc 1 1550 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1551:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1551 8 discriminator 3 view .LVU1008
1552:src/display.c **** 	    }
 3245              		.loc 1 1552 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccxUm1xs.s 			page 136


 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1552:src/display.c **** 	    }
 3249              		.loc 1 1552 8 is_stmt 1 discriminator 3 view .LVU1010
 3250              	.LBE300:
1549:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1549 21 discriminator 3 view .LVU1011
1549:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1549 16 discriminator 3 view .LVU1012
1549:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1549 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1549:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1549 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
 3260              	.LVL356:
 3261              	.L304:
1549:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1549 6 view .LVU1015
 3263              	.LBE299:
1562:src/display.c **** 	if (res) {
 3264              		.loc 1 1562 2 is_stmt 1 view .LVU1016
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1563 2 view .LVU1017
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1563 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1564 4 is_stmt 1 view .LVU1019
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1564 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1564 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1564 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1565 4 is_stmt 1 view .LVU1023
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1565 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1572:src/display.c **** 	      *res++ = buf[i];
 3286              		.loc 1 1572 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
ARM GAS  /tmp/ccxUm1xs.s 			page 137


1572:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1572 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1573:src/display.c **** 	  }
 3297              		.loc 1 1573 8 is_stmt 1 view .LVU1027
1573:src/display.c **** 	  }
 3298              		.loc 1 1573 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1573:src/display.c **** 	  }
 3301              		.loc 1 1573 15 view .LVU1029
 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1572:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1572 12 is_stmt 1 view .LVU1030
1572:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1572 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1620:src/display.c **** 
 3310              		.loc 1 1620 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1532 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1535 11 is_stmt 1 view .LVU1034
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1536 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1536 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1536 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
ARM GAS  /tmp/ccxUm1xs.s 			page 138


1537:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1537 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1537:src/display.c **** 	      const int r = v % b;
 3335              		.loc 1 1537 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB301:
1538:src/display.c **** 	      v /= b;
 3341              		.loc 1 1538 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1539 8 discriminator 3 view .LVU1041
 3352              	.LBE301:
1537:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB302:
1540:src/display.c **** 	    }
 3358              		.loc 1 1540 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1540:src/display.c **** 	    }
 3361              		.loc 1 1540 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE302:
1537:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1537 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB303:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1539 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1540:src/display.c **** 	    }
 3371              		.loc 1 1540 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE303:
1537:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1537 24 discriminator 3 view .LVU1048
 3374              	.LBB304:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1539 10 is_stmt 0 discriminator 3 view .LVU1049
 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
ARM GAS  /tmp/ccxUm1xs.s 			page 139


 3378              	.LVL374:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1539 10 discriminator 3 view .LVU1050
 3380              	.LBE304:
1537:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1537 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1537:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1537 16 is_stmt 1 discriminator 3 view .LVU1052
1537:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1562:src/display.c **** 	if (res) {
 3389              		.loc 1 1562 2 is_stmt 1 view .LVU1054
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3390              		.loc 1 1563 2 view .LVU1055
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1563 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB305:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1591 4 is_stmt 1 view .LVU1057
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1591 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1592 4 is_stmt 1 view .LVU1059
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1592 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1591 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1594:src/display.c **** #endif
 3414              		.loc 1 1594 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1596 4 view .LVU1063
1597:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1597 26 is_stmt 0 view .LVU1064
ARM GAS  /tmp/ccxUm1xs.s 			page 140


 3420 017e 724B     		ldr	r3, .L383
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1596 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
1597:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1597 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1596 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1597:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1597 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1597:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1597 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3432              		.loc 1 1596 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1597:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1597 4 is_stmt 1 view .LVU1071
1597:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1597 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1599:src/display.c **** 
 3439              		.loc 1 1599 4 is_stmt 1 view .LVU1073
1599:src/display.c **** 
 3440              		.loc 1 1599 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1599:src/display.c **** 
 3445              		.loc 1 1599 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1601:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1601 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1602 4 view .LVU1077
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1602 16 view .LVU1078
1599:src/display.c **** 
 3454              		.loc 1 1599 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1603:src/display.c **** 	      break;
 3458              		.loc 1 1603 6 is_stmt 1 view .LVU1080
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1602 24 view .LVU1081
ARM GAS  /tmp/ccxUm1xs.s 			page 141


1603:src/display.c **** 	      break;
 3460              		.loc 1 1603 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
 3463 01b2 00F0EC80 		beq	.L324
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1602 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1602 16 is_stmt 1 discriminator 2 view .LVU1084
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1602 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1605:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1605 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
 3473              	.LVL385:
 3474              	.L326:
1605:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1605 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB306:
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1611 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB307:
 3489              	.LBI307:
 375:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 375 14 is_stmt 1 view .LVU1089
 3491              	.LBB308:
 376:src/display.c ****     return res;
 3492              		.loc 1 376 3 view .LVU1090
 376:src/display.c ****     return res;
 3493              		.loc 1 376 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 376:src/display.c ****     return res;
 3495              		.loc 1 376 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 376:src/display.c ****     return res;
 3499              		.loc 1 376 6 view .LVU1093
 3500              	.LBE308:
 3501              	.LBE307:
1612:src/display.c **** 	  }
 3502              		.loc 1 1612 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE306:
ARM GAS  /tmp/ccxUm1xs.s 			page 142


1605:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1605:src/display.c **** 	    int ch = buf[j++];
 3506              		.loc 1 1605 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB311:
1612:src/display.c **** 	  }
 3509              		.loc 1 1612 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1612:src/display.c **** 	  }
 3512              		.loc 1 1612 10 discriminator 2 view .LVU1098
 3513              	.LBE311:
1605:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1605 24 is_stmt 1 discriminator 2 view .LVU1099
1605:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1605 14 discriminator 2 view .LVU1100
1605:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB312:
1606:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1606 6 is_stmt 1 view .LVU1102
1608:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1608 8 view .LVU1103
1606:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1606 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1607:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1607 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1607:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1607 6 is_stmt 1 view .LVU1106
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1609 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1608:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1608 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1609 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1610 6 view .LVU1110
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1610 13 is_stmt 0 view .LVU1111
 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
ARM GAS  /tmp/ccxUm1xs.s 			page 143


1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1610 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1611 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB310:
 3549              	.LBB309:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 378 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE309:
 3553              	.LBE310:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1610 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1612:src/display.c **** 	  }
 3557              		.loc 1 1612 6 is_stmt 1 view .LVU1116
1612:src/display.c **** 	  }
 3558              		.loc 1 1612 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1612:src/display.c **** 	  }
 3561              		.loc 1 1612 10 view .LVU1118
 3562              	.LBE312:
1605:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1605 24 is_stmt 1 view .LVU1119
1605:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1605 14 view .LVU1120
 3565              	.L335:
1614:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1614 4 view .LVU1121
1614:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1614 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1615:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1615 6 is_stmt 1 view .LVU1123
1615:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1615 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1616 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1616 8 is_stmt 0 view .LVU1126
ARM GAS  /tmp/ccxUm1xs.s 			page 144


 3586              	.LBE305:
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1509 4 is_stmt 1 view .LVU1127
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3588              		.loc 1 1509 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1510:src/display.c **** 	    v = value;
 3597              		.loc 1 1510 4 is_stmt 1 view .LVU1129
1510:src/display.c **** 	    v = value;
 3598              		.loc 1 1510 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
 3600              	.LVL400:
1510:src/display.c **** 	    v = value;
 3601              		.loc 1 1510 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1510:src/display.c **** 	    v = value;
 3603              		.loc 1 1510 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1510:src/display.c **** 	    v = value;
 3607              		.loc 1 1510 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1510:src/display.c **** 	    v = value;
 3612              		.loc 1 1510 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1485:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1485 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1485:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1485 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB315:
1519:src/display.c **** 	      v /= b;
 3628              		.loc 1 1519 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
ARM GAS  /tmp/ccxUm1xs.s 			page 145


 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3635              		.loc 1 1520 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1521:src/display.c **** 	    }
 3637              		.loc 1 1521 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE315:
1518:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1518 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1518:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1518 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB316:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1520 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1521:src/display.c **** 	    }
 3652              		.loc 1 1521 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE316:
1518:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1518 24 discriminator 3 view .LVU1144
 3655              	.LBB317:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1520 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1520 10 discriminator 3 view .LVU1146
 3661              	.LBE317:
1518:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1518 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1518:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1518 16 is_stmt 1 discriminator 3 view .LVU1148
1518:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1518 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1512:src/display.c **** 	    if (sign)
 3672              		.loc 1 1512 4 is_stmt 1 view .LVU1150
1512:src/display.c **** 	    if (sign)
 3673              		.loc 1 1512 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/ccxUm1xs.s 			page 146


 3675 0290 DBD1     		bne	.L297
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1513 6 is_stmt 1 view .LVU1152
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3677              		.loc 1 1513 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1515:src/display.c **** 	    return;
 3683              		.loc 1 1515 6 is_stmt 1 view .LVU1154
 3684              	.LBB318:
 3685              	.LBI318:
 415:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 415 14 view .LVU1155
 3687              	.LBB319:
 416:src/display.c ****   else	set_dig(base, ch);
 3688              		.loc 1 416 3 view .LVU1156
 416:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 416 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 416:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 416 12 is_stmt 1 view .LVU1158
 416:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 416 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE319:
 3699              	.LBE318:
1620:src/display.c **** 
 3700              		.loc 1 1620 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1500:src/display.c **** 	}
 3709              		.loc 1 1500 11 is_stmt 1 view .LVU1161
1500:src/display.c **** 	}
 3710              		.loc 1 1500 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1500:src/display.c **** 	}
 3713              		.loc 1 1500 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1500:src/display.c **** 	}
 3716              		.loc 1 1500 27 is_stmt 1 view .LVU1164
1503:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1503 2 view .LVU1165
ARM GAS  /tmp/ccxUm1xs.s 			page 147


1503:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1503 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
 3721              	.LVL416:
 3722              	.L374:
1504:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1504 4 is_stmt 1 view .LVU1167
1504:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1504 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1505:src/display.c **** 	}
 3727              		.loc 1 1505 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
 3732              	.L315:
1566:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1566 12 view .LVU1170
1566:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1566 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1566:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1566 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1567:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1567 8 is_stmt 1 view .LVU1173
1567:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1567 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1567:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1567 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1566:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1566 12 is_stmt 1 view .LVU1176
1566:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1566 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1566:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1566 12 view .LVU1178
 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
ARM GAS  /tmp/ccxUm1xs.s 			page 148


 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1568:src/display.c **** 	    *res++ = '.';
 3765              		.loc 1 1568 6 is_stmt 1 view .LVU1179
1568:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1568 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1569:src/display.c **** 	  }
 3769              		.loc 1 1569 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1569:src/display.c **** 	  }
 3771              		.loc 1 1569 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1620:src/display.c **** 
 3773              		.loc 1 1620 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB321:
1528:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1528 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1528:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1528 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1529:src/display.c **** 	  }
 3798              		.loc 1 1529 8 is_stmt 1 view .LVU1186
1529:src/display.c **** 	  }
 3799              		.loc 1 1529 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1529:src/display.c **** 	  }
 3804              		.loc 1 1529 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
1529:src/display.c **** 	  }
 3807              		.loc 1 1529 11 view .LVU1189
ARM GAS  /tmp/ccxUm1xs.s 			page 149


 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1529:src/display.c **** 	  }
 3810              		.loc 1 1529 11 view .LVU1190
 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1529:src/display.c **** 	  }
 3813              		.loc 1 1529 11 view .LVU1191
 3814              	.LBE321:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1532 4 is_stmt 1 view .LVU1192
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1532 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1532 7 view .LVU1194
 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB322:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1591 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1593:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1593 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.367
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1593:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1593 6 view .LVU1197
 3845              	.LBE322:
1511:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1511 6 is_stmt 1 view .LVU1198
1511:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1511 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1511:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1511 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
 3852              	.LVL432:
1512:src/display.c **** 	    if (sign)
ARM GAS  /tmp/ccxUm1xs.s 			page 150


 3853              		.loc 1 1512 4 is_stmt 1 view .LVU1201
1512:src/display.c **** 	    if (sign)
 3854              		.loc 1 1512 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1514:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1514 8 is_stmt 1 view .LVU1203
 3860              	.LBB323:
 3861              	.LBI323:
 415:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 415 14 view .LVU1204
 3863              	.LBB324:
 416:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 416 3 view .LVU1205
 416:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 416 6 is_stmt 0 view .LVU1206
 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 417:src/display.c ****   return res;
 3868              		.loc 1 417 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 417:src/display.c ****   return res;
 3873              		.loc 1 417 8 is_stmt 0 view .LVU1208
 3874              	.LBE324:
 3875              	.LBE323:
1515:src/display.c **** 	    return;
 3876              		.loc 1 1515 6 is_stmt 1 view .LVU1209
 3877              	.LBB325:
 415:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 415 14 view .LVU1210
 3879              	.LBB320:
 416:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 416 3 view .LVU1211
 3881              	.L301:
 417:src/display.c ****   return res;
 3882              		.loc 1 417 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 417:src/display.c ****   return res;
 3890              		.loc 1 417 8 is_stmt 0 view .LVU1213
 3891              	.LBE320:
 3892              	.LBE325:
 3893              	.LBB326:
1598:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1598 6 is_stmt 1 view .LVU1214
1598:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1598 20 is_stmt 0 view .LVU1215
ARM GAS  /tmp/ccxUm1xs.s 			page 151


 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1605:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1605 14 is_stmt 1 discriminator 1 view .LVU1216
1605:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1605 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1605:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1605 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1614:src/display.c **** 	    if (dig >= 0)
 3910              		.loc 1 1614 4 is_stmt 1 view .LVU1219
1614:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1614 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1591 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1617:src/display.c **** 	  }
 3924              		.loc 1 1617 11 is_stmt 1 view .LVU1222
 3925              	.LBB313:
 3926              	.LBI313:
 304:src/display.c **** {
 3927              		.loc 1 304 13 view .LVU1223
 3928              	.LBB314:
 306:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 306 3 view .LVU1224
 306:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 306 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 307:src/display.c **** }
 3933              		.loc 1 307 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 306 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 3937              		.loc 1 307 3 is_stmt 1 view .LVU1228
 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
ARM GAS  /tmp/ccxUm1xs.s 			page 152


 308:src/display.c **** 
 3940              		.loc 1 308 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
 3943              	.L337:
 308:src/display.c **** 
 3944              		.loc 1 308 1 view .LVU1230
 3945              	.LBE314:
 3946              	.LBE313:
 3947              	.LBE326:
 3948              	.LBB327:
1549:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1549 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE327:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.getdig,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.global	getdig
 3965              		.syntax unified
 3966              		.thumb
 3967              		.thumb_func
 3968              		.fpu fpv4-sp-d16
 3970              	getdig:
 3971              	.LVL443:
 3972              	.LFB6:
 342:src/display.c ****   // perform index lookup
 3973              		.loc 1 342 1 is_stmt 1 view -0
 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 0
 3976              		@ frame_needed = 0, uses_anonymous_args = 0
 3977              		@ link register save eliminated.
 344:src/display.c **** }
 3978              		.loc 1 344 3 view .LVU1233
 344:src/display.c **** }
 3979              		.loc 1 344 16 is_stmt 0 view .LVU1234
 3980 0000 014B     		ldr	r3, .L388
 344:src/display.c **** }
 3981              		.loc 1 344 19 view .LVU1235
 3982 0002 C0B2     		uxtb	r0, r0
 3983              	.LVL444:
 345:src/display.c **** 
 3984              		.loc 1 345 1 view .LVU1236
 3985 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3986 0006 7047     		bx	lr
 3987              	.L389:
 3988              		.align	2
 3989              	.L388:
 3990 0008 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccxUm1xs.s 			page 153


 3991              		.cfi_endproc
 3992              	.LFE6:
 3994              		.section	.text.dot,"ax",%progbits
 3995              		.align	1
 3996              		.p2align 2,,3
 3997              		.global	dot
 3998              		.syntax unified
 3999              		.thumb
 4000              		.thumb_func
 4001              		.fpu fpv4-sp-d16
 4003              	dot:
 4004              	.LVL445:
 4005              	.LFB7:
 347:src/display.c ****   if (on)	set_dot(n);
 4006              		.loc 1 347 25 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 4010              		@ link register save eliminated.
 348:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 348 3 view .LVU1238
 348:src/display.c ****   else	clr_dot(n);
 4012              		.loc 1 348 6 is_stmt 0 view .LVU1239
 4013 0000 09B1     		cbz	r1, .L391
 348:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 348 11 is_stmt 1 discriminator 1 view .LVU1240
 4015 0002 FFF7FEBF 		b	set_dot
 4016              	.LVL446:
 4017              	.L391:
 349:src/display.c **** }
 4018              		.loc 1 349 8 view .LVU1241
 4019 0006 FFF7FEBF 		b	clr_dot
 4020              	.LVL447:
 349:src/display.c **** }
 4021              		.loc 1 349 8 is_stmt 0 view .LVU1242
 4022              		.cfi_endproc
 4023              	.LFE7:
 4025 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4026              		.align	1
 4027              		.p2align 2,,3
 4028              		.global	std_round_fix
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4032              		.fpu fpv4-sp-d16
 4034              	std_round_fix:
 4035              	.LVL448:
 4036              	.LFB24:
1838:src/display.c **** 	decNumber c;
 4037              		.loc 1 1838 93 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 40
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
1838:src/display.c **** 	decNumber c;
 4041              		.loc 1 1838 93 is_stmt 0 view .LVU1244
 4042 0000 70B5     		push	{r4, r5, r6, lr}
 4043              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccxUm1xs.s 			page 154


 4044              		.cfi_offset 4, -16
 4045              		.cfi_offset 5, -12
 4046              		.cfi_offset 6, -8
 4047              		.cfi_offset 14, -4
 4048 0002 0E46     		mov	r6, r1
1839:src/display.c **** 	int true_exp, x=0;
 4049              		.loc 1 1839 2 is_stmt 1 view .LVU1245
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4050              		.loc 1 1840 2 view .LVU1246
 4051              	.LVL449:
1841:src/display.c **** 
 4052              		.loc 1 1841 2 view .LVU1247
1843:src/display.c **** 	  min_pos_exp = 9;
 4053              		.loc 1 1843 2 view .LVU1248
1838:src/display.c **** 	decNumber c;
 4054              		.loc 1 1838 93 is_stmt 0 view .LVU1249
 4055 0004 8AB0     		sub	sp, sp, #40
 4056              		.cfi_def_cfa_offset 56
1843:src/display.c **** 	  min_pos_exp = 9;
 4057              		.loc 1 1843 5 view .LVU1250
 4058 0006 92B9     		cbnz	r2, .L393
1848:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4059              		.loc 1 1848 4 is_stmt 1 view .LVU1251
 4060              	.LVL450:
1849:src/display.c **** 	}
 4061              		.loc 1 1849 4 view .LVU1252
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4062              		.loc 1 1852 2 view .LVU1253
 4063 0008 0146     		mov	r1, r0
 4064              	.LVL451:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4065              		.loc 1 1852 2 is_stmt 0 view .LVU1254
 4066 000a 01A8     		add	r0, sp, #4
 4067              	.LVL452:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4068              		.loc 1 1852 2 view .LVU1255
 4069 000c 1D46     		mov	r5, r3
 4070 000e FFF7FEFF 		bl	dn_abs
 4071              	.LVL453:
1853:src/display.c **** 
 4072              		.loc 1 1853 2 is_stmt 1 view .LVU1256
1853:src/display.c **** 
 4073              		.loc 1 1853 24 is_stmt 0 view .LVU1257
 4074 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4075 0016 1844     		add	r0, r0, r3
 4076              	.LVL454:
1855:src/display.c **** 	  x = *dd;
 4077              		.loc 1 1855 2 is_stmt 1 view .LVU1258
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4078              		.loc 1 1859 2 view .LVU1259
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4079              		.loc 1 1859 5 is_stmt 0 view .LVU1260
 4080 0018 0138     		subs	r0, r0, #1
 4081 001a 1AD5     		bpl	.L397
1849:src/display.c **** 	}
 4082              		.loc 1 1849 16 view .LVU1261
 4083 001c EB43     		mvns	r3, r5
ARM GAS  /tmp/ccxUm1xs.s 			page 155


1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4084              		.loc 1 1859 21 view .LVU1262
 4085 001e 8342     		cmp	r3, r0
 4086 0020 17DA     		bge	.L397
 4087              	.LVL455:
 4088              	.L399:
1861:src/display.c **** 	  return MODE_FIX;
 4089              		.loc 1 1861 4 is_stmt 1 view .LVU1263
1861:src/display.c **** 	  return MODE_FIX;
 4090              		.loc 1 1861 8 is_stmt 0 view .LVU1264
 4091 0022 3368     		ldr	r3, [r6]
 4092 0024 181A     		subs	r0, r3, r0
 4093 0026 3060     		str	r0, [r6]
1862:src/display.c **** 	}
 4094              		.loc 1 1862 4 is_stmt 1 view .LVU1265
1862:src/display.c **** 	}
 4095              		.loc 1 1862 11 is_stmt 0 view .LVU1266
 4096 0028 0120     		movs	r0, #1
1871:src/display.c **** #else
 4097              		.loc 1 1871 7 view .LVU1267
 4098 002a 0AB0     		add	sp, sp, #40
 4099              		.cfi_remember_state
 4100              		.cfi_def_cfa_offset 16
 4101              		@ sp needed
 4102 002c 70BD     		pop	{r4, r5, r6, pc}
 4103              	.LVL456:
 4104              	.L393:
 4105              		.cfi_restore_state
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4106              		.loc 1 1852 2 is_stmt 1 view .LVU1268
 4107 002e 0146     		mov	r1, r0
 4108              	.LVL457:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4109              		.loc 1 1852 2 is_stmt 0 view .LVU1269
 4110 0030 01A8     		add	r0, sp, #4
 4111              	.LVL458:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4112              		.loc 1 1852 2 view .LVU1270
 4113 0032 1446     		mov	r4, r2
 4114 0034 FFF7FEFF 		bl	dn_abs
 4115              	.LVL459:
1853:src/display.c **** 
 4116              		.loc 1 1853 2 is_stmt 1 view .LVU1271
1853:src/display.c **** 
 4117              		.loc 1 1853 24 is_stmt 0 view .LVU1272
 4118 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1855:src/display.c **** 	  x = *dd;
 4119              		.loc 1 1855 5 view .LVU1273
 4120 003c 052C     		cmp	r4, #5
1853:src/display.c **** 
 4121              		.loc 1 1853 24 view .LVU1274
 4122 003e 1344     		add	r3, r3, r2
1853:src/display.c **** 
 4123              		.loc 1 1853 11 view .LVU1275
 4124 0040 03F1FF30 		add	r0, r3, #-1
 4125              	.LVL460:
1855:src/display.c **** 	  x = *dd;
ARM GAS  /tmp/ccxUm1xs.s 			page 156


 4126              		.loc 1 1855 2 is_stmt 1 view .LVU1276
1855:src/display.c **** 	  x = *dd;
 4127              		.loc 1 1855 5 is_stmt 0 view .LVU1277
 4128 0044 15D1     		bne	.L401
1856:src/display.c **** 	}
 4129              		.loc 1 1856 4 is_stmt 1 view .LVU1278
1856:src/display.c **** 	}
 4130              		.loc 1 1856 6 is_stmt 0 view .LVU1279
 4131 0046 3268     		ldr	r2, [r6]
 4132              	.LVL461:
 4133              	.L396:
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4134              		.loc 1 1859 2 is_stmt 1 view .LVU1280
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4135              		.loc 1 1859 5 is_stmt 0 view .LVU1281
 4136 0048 8242     		cmp	r2, r0
 4137 004a 05DC     		bgt	.L405
1865:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4138              		.loc 1 1865 53 discriminator 2 view .LVU1282
 4139 004c 0333     		adds	r3, r3, #3
 4140 004e 0C2B     		cmp	r3, #12
 4141 0050 04D8     		bhi	.L400
 4142              	.LVL462:
 4143              	.L397:
1869:src/display.c **** 	}
 4144              		.loc 1 1869 11 view .LVU1283
 4145 0052 0020     		movs	r0, #0
1871:src/display.c **** #else
 4146              		.loc 1 1871 7 view .LVU1284
 4147 0054 0AB0     		add	sp, sp, #40
 4148              		.cfi_remember_state
 4149              		.cfi_def_cfa_offset 16
 4150              		@ sp needed
 4151 0056 70BD     		pop	{r4, r5, r6, pc}
 4152              	.LVL463:
 4153              	.L405:
 4154              		.cfi_restore_state
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4155              		.loc 1 1859 21 view .LVU1285
 4156 0058 031D     		adds	r3, r0, #4
 4157 005a E2DA     		bge	.L399
 4158              	.L400:
 4159              	.LBB330:
 4160              	.LBI330:
1838:src/display.c **** 	decNumber c;
 4161              		.loc 1 1838 26 is_stmt 1 view .LVU1286
 4162              	.LVL464:
 4163              	.LBB331:
1866:src/display.c **** 	}
 4164              		.loc 1 1866 4 view .LVU1287
1866:src/display.c **** 	}
 4165              		.loc 1 1866 24 is_stmt 0 view .LVU1288
 4166 005c 064B     		ldr	r3, .L406
 4167 005e 1B68     		ldr	r3, [r3]
 4168 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1866:src/display.c **** 	}
 4169              		.loc 1 1866 33 view .LVU1289
ARM GAS  /tmp/ccxUm1xs.s 			page 157


 4170 0064 13F0100F 		tst	r3, #16
 4171 0068 14BF     		ite	ne
 4172 006a 0320     		movne	r0, #3
 4173 006c 0220     		moveq	r0, #2
 4174              	.LBE331:
 4175              	.LBE330:
1871:src/display.c **** #else
 4176              		.loc 1 1871 7 view .LVU1290
 4177 006e 0AB0     		add	sp, sp, #40
 4178              		.cfi_remember_state
 4179              		.cfi_def_cfa_offset 16
 4180              		@ sp needed
 4181 0070 70BD     		pop	{r4, r5, r6, pc}
 4182              	.LVL465:
 4183              	.L401:
 4184              		.cfi_restore_state
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4185              		.loc 1 1840 16 view .LVU1291
 4186 0072 0022     		movs	r2, #0
 4187 0074 E8E7     		b	.L396
 4188              	.L407:
 4189 0076 00BF     		.align	2
 4190              	.L406:
 4191 0078 00000000 		.word	main_ram
 4192              		.cfi_endproc
 4193              	.LFE24:
 4195              		.section	.text.set_IO_annunciator,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	set_IO_annunciator
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	set_IO_annunciator:
 4205              	.LFB33:
2651:src/display.c **** #ifndef DM42
 4206              		.loc 1 2651 37 is_stmt 1 view -0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 0
 4209              		@ frame_needed = 0, uses_anonymous_args = 0
2656:src/display.c **** #endif
 4210              		.loc 1 2656 4 view .LVU1293
2651:src/display.c **** #ifndef DM42
 4211              		.loc 1 2651 37 is_stmt 0 view .LVU1294
 4212 0000 38B5     		push	{r3, r4, r5, lr}
 4213              		.cfi_def_cfa_offset 16
 4214              		.cfi_offset 3, -16
 4215              		.cfi_offset 4, -12
 4216              		.cfi_offset 5, -8
 4217              		.cfi_offset 14, -4
2662:src/display.c **** #endif
 4218              		.loc 1 2662 4 view .LVU1295
 4219 0002 0D4B     		ldr	r3, .L414
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4220              		.loc 1 2666 9 view .LVU1296
 4221 0004 0D4C     		ldr	r4, .L414+4
ARM GAS  /tmp/ccxUm1xs.s 			page 158


2662:src/display.c **** #endif
 4222              		.loc 1 2662 4 view .LVU1297
 4223 0006 1B68     		ldr	r3, [r3]
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4224              		.loc 1 2666 5 view .LVU1298
 4225 0008 2268     		ldr	r2, [r4]
2662:src/display.c **** #endif
 4226              		.loc 1 2662 4 view .LVU1299
 4227 000a 1D1E     		subs	r5, r3, #0
 4228 000c 18BF     		it	ne
 4229 000e 0125     		movne	r5, #1
 4230              	.LVL466:
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4231              		.loc 1 2666 2 is_stmt 1 view .LVU1300
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4232              		.loc 1 2666 5 is_stmt 0 view .LVU1301
 4233 0010 AA42     		cmp	r2, r5
 4234 0012 0FD0     		beq	.L408
2667:src/display.c **** 	  IoAnnunciator = on;
 4235              		.loc 1 2667 4 is_stmt 1 view .LVU1302
 4236              	.LVL467:
 4237              	.LBB332:
 4238              	.LBI332:
 347:src/display.c ****   if (on)	set_dot(n);
 4239              		.loc 1 347 6 view .LVU1303
 4240              	.LBB333:
 348:src/display.c ****   else	clr_dot(n);
 4241              		.loc 1 348 3 view .LVU1304
 348:src/display.c ****   else	clr_dot(n);
 4242              		.loc 1 348 11 is_stmt 0 view .LVU1305
 4243 0014 8420     		movs	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4244              		.loc 1 348 6 view .LVU1306
 4245 0016 33B9     		cbnz	r3, .L413
 349:src/display.c **** }
 4246              		.loc 1 349 8 is_stmt 1 view .LVU1307
 4247 0018 FFF7FEFF 		bl	clr_dot
 4248              	.LVL468:
 349:src/display.c **** }
 4249              		.loc 1 349 8 is_stmt 0 view .LVU1308
 4250              	.LBE333:
 4251              	.LBE332:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4252              		.loc 1 2668 4 is_stmt 1 view .LVU1309
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4253              		.loc 1 2668 18 is_stmt 0 view .LVU1310
 4254 001c 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 4255              		.loc 1 2669 4 is_stmt 1 view .LVU1311
2671:src/display.c **** 
 4256              		.loc 1 2671 7 is_stmt 0 view .LVU1312
 4257 001e BDE83840 		pop	{r3, r4, r5, lr}
 4258              		.cfi_remember_state
 4259              		.cfi_restore 14
 4260              		.cfi_restore 5
 4261              		.cfi_restore 4
 4262              		.cfi_restore 3
ARM GAS  /tmp/ccxUm1xs.s 			page 159


 4263              		.cfi_def_cfa_offset 0
 4264              	.LVL469:
2669:src/display.c **** 	}
 4265              		.loc 1 2669 4 view .LVU1313
 4266 0022 FFF7FEBF 		b	finish_display
 4267              	.LVL470:
 4268              	.L413:
 4269              		.cfi_restore_state
 4270              	.LBB335:
 4271              	.LBB334:
 348:src/display.c ****   else	clr_dot(n);
 4272              		.loc 1 348 11 is_stmt 1 view .LVU1314
 4273 0026 FFF7FEFF 		bl	set_dot
 4274              	.LVL471:
 348:src/display.c ****   else	clr_dot(n);
 4275              		.loc 1 348 11 is_stmt 0 view .LVU1315
 4276              	.LBE334:
 4277              	.LBE335:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4278              		.loc 1 2668 4 is_stmt 1 view .LVU1316
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4279              		.loc 1 2668 18 is_stmt 0 view .LVU1317
 4280 002a 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 4281              		.loc 1 2669 4 is_stmt 1 view .LVU1318
2671:src/display.c **** 
 4282              		.loc 1 2671 7 is_stmt 0 view .LVU1319
 4283 002c BDE83840 		pop	{r3, r4, r5, lr}
 4284              		.cfi_remember_state
 4285              		.cfi_restore 14
 4286              		.cfi_restore 5
 4287              		.cfi_restore 4
 4288              		.cfi_restore 3
 4289              		.cfi_def_cfa_offset 0
 4290              	.LVL472:
2669:src/display.c **** 	}
 4291              		.loc 1 2669 4 view .LVU1320
 4292 0030 FFF7FEBF 		b	finish_display
 4293              	.LVL473:
 4294              	.L408:
 4295              		.cfi_restore_state
2671:src/display.c **** 
 4296              		.loc 1 2671 7 view .LVU1321
 4297 0034 38BD     		pop	{r3, r4, r5, pc}
 4298              	.LVL474:
 4299              	.L415:
2671:src/display.c **** 
 4300              		.loc 1 2671 7 view .LVU1322
 4301 0036 00BF     		.align	2
 4302              	.L414:
 4303 0038 00000000 		.word	PrinterColumn
 4304 003c 00000000 		.word	IoAnnunciator
 4305              		.cfi_endproc
 4306              	.LFE33:
 4308              		.section	.text.set_annunciators,"ax",%progbits
 4309              		.align	1
 4310              		.p2align 2,,3
ARM GAS  /tmp/ccxUm1xs.s 			page 160


 4311              		.syntax unified
 4312              		.thumb
 4313              		.thumb_func
 4314              		.fpu fpv4-sp-d16
 4316              	set_annunciators:
 4317              	.LFB32:
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4318              		.loc 1 2620 7 is_stmt 1 view -0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/display.c **** 
 4322              		.loc 1 2621 2 view .LVU1324
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4323              		.loc 1 2620 7 is_stmt 0 view .LVU1325
 4324 0000 70B5     		push	{r4, r5, r6, lr}
 4325              		.cfi_def_cfa_offset 16
 4326              		.cfi_offset 4, -16
 4327              		.cfi_offset 5, -12
 4328              		.cfi_offset 6, -8
 4329              		.cfi_offset 14, -4
2628:src/display.c **** #else
 4330              		.loc 1 2628 11 view .LVU1326
 4331 0002 354C     		ldr	r4, .L442
2621:src/display.c **** 
 4332              		.loc 1 2621 29 view .LVU1327
 4333 0004 FFF7FEFF 		bl	get_trig_mode
 4334              	.LVL475:
2628:src/display.c **** #else
 4335              		.loc 1 2628 11 view .LVU1328
 4336 0008 2368     		ldr	r3, [r4]
 4337 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2628:src/display.c **** #else
 4338              		.loc 1 2628 2 view .LVU1329
 4339 000e 1907     		lsls	r1, r3, #28
2621:src/display.c **** 
 4340              		.loc 1 2621 29 view .LVU1330
 4341 0010 0546     		mov	r5, r0
 4342              	.LVL476:
2628:src/display.c **** #else
 4343              		.loc 1 2628 2 is_stmt 1 view .LVU1331
 4344              	.LBB336:
 4345              	.LBB337:
 348:src/display.c ****   else	clr_dot(n);
 4346              		.loc 1 348 11 is_stmt 0 view .LVU1332
 4347 0012 4FF08800 		mov	r0, #136
 4348              	.LBE337:
 4349              	.LBE336:
2628:src/display.c **** #else
 4350              		.loc 1 2628 2 view .LVU1333
 4351 0016 03D5     		bpl	.L417
2628:src/display.c **** #else
 4352              		.loc 1 2628 33 discriminator 1 view .LVU1334
 4353 0018 304B     		ldr	r3, .L442+4
2628:src/display.c **** #else
 4354              		.loc 1 2628 2 discriminator 1 view .LVU1335
 4355 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccxUm1xs.s 			page 161


 4356 001c 002B     		cmp	r3, #0
 4357 001e 58D0     		beq	.L439
 4358              	.L417:
 4359              	.LVL477:
 4360              	.LBB340:
 4361              	.LBI336:
 347:src/display.c ****   if (on)	set_dot(n);
 4362              		.loc 1 347 6 is_stmt 1 view .LVU1336
 4363              	.LBB338:
 348:src/display.c ****   else	clr_dot(n);
 4364              		.loc 1 348 3 view .LVU1337
 349:src/display.c **** }
 4365              		.loc 1 349 8 view .LVU1338
 4366 0020 FFF7FEFF 		bl	clr_dot
 4367              	.LVL478:
 4368              	.L418:
 349:src/display.c **** }
 4369              		.loc 1 349 8 is_stmt 0 view .LVU1339
 4370              	.LBE338:
 4371              	.LBE340:
2633:src/display.c **** #endif
 4372              		.loc 1 2633 2 is_stmt 1 view .LVU1340
 4373              	.LBB341:
 4374              	.LBI341:
 347:src/display.c ****   if (on)	set_dot(n);
 4375              		.loc 1 347 6 view .LVU1341
 4376              	.LBB342:
 348:src/display.c ****   else	clr_dot(n);
 4377              		.loc 1 348 3 view .LVU1342
 4378              	.LBE342:
 4379              	.LBE341:
2633:src/display.c **** #endif
 4380              		.loc 1 2633 14 is_stmt 0 view .LVU1343
 4381 0024 2368     		ldr	r3, [r4]
 4382 0026 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 4383              	.LBB345:
 4384              	.LBB343:
 348:src/display.c ****   else	clr_dot(n);
 4385              		.loc 1 348 6 view .LVU1344
 4386 002a 03F04103 		and	r3, r3, #65
 4387 002e 412B     		cmp	r3, #65
 348:src/display.c ****   else	clr_dot(n);
 4388              		.loc 1 348 11 view .LVU1345
 4389 0030 4FF08400 		mov	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4390              		.loc 1 348 6 view .LVU1346
 4391 0034 44D1     		bne	.L419
 348:src/display.c ****   else	clr_dot(n);
 4392              		.loc 1 348 11 is_stmt 1 view .LVU1347
 4393 0036 FFF7FEFF 		bl	set_dot
 4394              	.LVL479:
 4395              	.L420:
 348:src/display.c ****   else	clr_dot(n);
 4396              		.loc 1 348 11 is_stmt 0 view .LVU1348
 4397              	.LBE343:
 4398              	.LBE345:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
ARM GAS  /tmp/ccxUm1xs.s 			page 162


 4399              		.loc 1 2636 2 is_stmt 1 view .LVU1349
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4400              		.loc 1 2636 19 is_stmt 0 view .LVU1350
 4401 003a 294E     		ldr	r6, .L442+8
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4402              		.loc 1 2636 2 view .LVU1351
 4403 003c B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4404              	.LBB346:
 4405              	.LBB347:
 348:src/display.c ****   else	clr_dot(n);
 4406              		.loc 1 348 11 view .LVU1352
 4407 003e 8620     		movs	r0, #134
 4408              	.LBE347:
 4409              	.LBE346:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4410              		.loc 1 2636 2 view .LVU1353
 4411 0040 23B9     		cbnz	r3, .L421
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4412              		.loc 1 2636 47 discriminator 2 view .LVU1354
 4413 0042 7269     		ldr	r2, [r6, #20]
 4414 0044 274B     		ldr	r3, .L442+12
 4415 0046 1340     		ands	r3, r3, r2
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4416              		.loc 1 2636 2 discriminator 2 view .LVU1355
 4417 0048 002B     		cmp	r3, #0
 4418 004a 3FD0     		beq	.L440
 4419              	.L421:
 4420              	.LBB350:
 4421              	.LBB348:
 348:src/display.c ****   else	clr_dot(n);
 4422              		.loc 1 348 11 is_stmt 1 view .LVU1356
 4423 004c FFF7FEFF 		bl	set_dot
 4424              	.LVL480:
 4425              	.L422:
 4426              	.LBE348:
 4427              	.LBE350:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4428              		.loc 1 2637 2 view .LVU1357
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4429              		.loc 1 2637 31 is_stmt 0 view .LVU1358
 4430 0050 254A     		ldr	r2, .L442+16
 4431 0052 7369     		ldr	r3, [r6, #20]
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4432              		.loc 1 2637 2 view .LVU1359
 4433 0054 1A42     		tst	r2, r3
 4434              	.LBB351:
 4435              	.LBB352:
 348:src/display.c ****   else	clr_dot(n);
 4436              		.loc 1 348 11 view .LVU1360
 4437 0056 4FF08500 		mov	r0, #133
 4438              	.LBE352:
 4439              	.LBE351:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4440              		.loc 1 2637 2 view .LVU1361
 4441 005a 02D0     		beq	.L423
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4442              		.loc 1 2637 48 discriminator 1 view .LVU1362
ARM GAS  /tmp/ccxUm1xs.s 			page 163


 4443 005c B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4444              		.loc 1 2637 2 discriminator 1 view .LVU1363
 4445 005e DA06     		lsls	r2, r3, #27
 4446 0060 31D4     		bmi	.L424
 4447              	.L423:
 4448              	.LVL481:
 4449              	.LBB355:
 4450              	.LBI351:
 347:src/display.c ****   if (on)	set_dot(n);
 4451              		.loc 1 347 6 is_stmt 1 view .LVU1364
 4452              	.LBB353:
 348:src/display.c ****   else	clr_dot(n);
 4453              		.loc 1 348 3 view .LVU1365
 349:src/display.c **** }
 4454              		.loc 1 349 8 view .LVU1366
 4455 0062 FFF7FEFF 		bl	clr_dot
 4456              	.LVL482:
 4457              	.L425:
 349:src/display.c **** }
 4458              		.loc 1 349 8 is_stmt 0 view .LVU1367
 4459              	.LBE353:
 4460              	.LBE355:
2638:src/display.c **** 	set_IO_annunciator();
 4461              		.loc 1 2638 2 is_stmt 1 view .LVU1368
 4462 0066 6820     		movs	r0, #104
 4463 0068 FFF7FEFF 		bl	get_user_flag
 4464              	.LVL483:
 4465              	.LBB356:
 4466              	.LBI356:
 347:src/display.c ****   if (on)	set_dot(n);
 4467              		.loc 1 347 6 view .LVU1369
 4468              	.LBB357:
 348:src/display.c ****   else	clr_dot(n);
 4469              		.loc 1 348 3 view .LVU1370
 348:src/display.c ****   else	clr_dot(n);
 4470              		.loc 1 348 6 is_stmt 0 view .LVU1371
 4471 006c 20B3     		cbz	r0, .L426
 348:src/display.c ****   else	clr_dot(n);
 4472              		.loc 1 348 11 is_stmt 1 view .LVU1372
 4473 006e 8320     		movs	r0, #131
 4474              	.LVL484:
 348:src/display.c ****   else	clr_dot(n);
 4475              		.loc 1 348 11 is_stmt 0 view .LVU1373
 4476 0070 FFF7FEFF 		bl	set_dot
 4477              	.LVL485:
 4478              	.L427:
 348:src/display.c ****   else	clr_dot(n);
 4479              		.loc 1 348 11 view .LVU1374
 4480              	.LBE357:
 4481              	.LBE356:
2639:src/display.c **** 
 4482              		.loc 1 2639 2 is_stmt 1 view .LVU1375
 4483 0074 FFF7FEFF 		bl	set_IO_annunciator
 4484              	.LVL486:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4485              		.loc 1 2643 2 view .LVU1376
ARM GAS  /tmp/ccxUm1xs.s 			page 164


2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4486              		.loc 1 2643 11 is_stmt 0 view .LVU1377
 4487 0078 2368     		ldr	r3, [r4]
 4488 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4489 007e 03F00103 		and	r3, r3, #1
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4490              		.loc 1 2643 2 view .LVU1378
 4491 0082 2B43     		orrs	r3, r3, r5
 4492 0084 13F0FF0F 		tst	r3, #255
 4493              	.LBB359:
 4494              	.LBB360:
 348:src/display.c ****   else	clr_dot(n);
 4495              		.loc 1 348 11 view .LVU1379
 4496 0088 4FF08C00 		mov	r0, #140
 4497              	.LBE360:
 4498              	.LBE359:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4499              		.loc 1 2643 2 view .LVU1380
 4500 008c 06D1     		bne	.L441
 4501              	.LVL487:
 4502              	.LBB363:
 4503              	.LBI359:
 347:src/display.c ****   if (on)	set_dot(n);
 4504              		.loc 1 347 6 is_stmt 1 view .LVU1381
 4505              	.LBB361:
 348:src/display.c ****   else	clr_dot(n);
 4506              		.loc 1 348 3 view .LVU1382
 348:src/display.c ****   else	clr_dot(n);
 4507              		.loc 1 348 11 view .LVU1383
 4508 008e FFF7FEFF 		bl	set_dot
 4509              	.LVL488:
 348:src/display.c ****   else	clr_dot(n);
 4510              		.loc 1 348 11 is_stmt 0 view .LVU1384
 4511              	.LBE361:
 4512              	.LBE363:
2644:src/display.c ****       }
 4513              		.loc 1 2644 2 is_stmt 1 view .LVU1385
 4514              	.L430:
 4515              	.LBB364:
 4516              	.LBI364:
 347:src/display.c ****   if (on)	set_dot(n);
 4517              		.loc 1 347 6 view .LVU1386
 4518              	.LBB365:
 348:src/display.c ****   else	clr_dot(n);
 4519              		.loc 1 348 3 view .LVU1387
 349:src/display.c **** }
 4520              		.loc 1 349 8 view .LVU1388
 4521              	.LBE365:
 4522              	.LBE364:
2645:src/display.c **** 
 4523              		.loc 1 2645 7 is_stmt 0 view .LVU1389
 4524 0092 BDE87040 		pop	{r4, r5, r6, lr}
 4525              		.cfi_remember_state
 4526              		.cfi_restore 14
 4527              		.cfi_restore 6
 4528              		.cfi_restore 5
 4529              		.cfi_restore 4
ARM GAS  /tmp/ccxUm1xs.s 			page 165


 4530              		.cfi_def_cfa_offset 0
 4531              	.LVL489:
 4532              	.LBB369:
 4533              	.LBB366:
 349:src/display.c **** }
 4534              		.loc 1 349 8 view .LVU1390
 4535 0096 8B20     		movs	r0, #139
 4536 0098 FFF7FEBF 		b	clr_dot
 4537              	.LVL490:
 4538              	.L441:
 4539              		.cfi_restore_state
 349:src/display.c **** }
 4540              		.loc 1 349 8 view .LVU1391
 4541              	.LBE366:
 4542              	.LBE369:
 4543              	.LBB370:
 347:src/display.c ****   if (on)	set_dot(n);
 4544              		.loc 1 347 6 is_stmt 1 view .LVU1392
 4545              	.LBB362:
 348:src/display.c ****   else	clr_dot(n);
 4546              		.loc 1 348 3 view .LVU1393
 349:src/display.c **** }
 4547              		.loc 1 349 8 view .LVU1394
 4548 009c FFF7FEFF 		bl	clr_dot
 4549              	.LVL491:
 349:src/display.c **** }
 4550              		.loc 1 349 8 is_stmt 0 view .LVU1395
 4551              	.LBE362:
 4552              	.LBE370:
2644:src/display.c ****       }
 4553              		.loc 1 2644 2 is_stmt 1 view .LVU1396
2644:src/display.c ****       }
 4554              		.loc 1 2644 11 is_stmt 0 view .LVU1397
 4555 00a0 2368     		ldr	r3, [r4]
 4556 00a2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2644:src/display.c ****       }
 4557              		.loc 1 2644 2 view .LVU1398
 4558 00a6 DB07     		lsls	r3, r3, #31
 4559 00a8 F3D4     		bmi	.L430
2644:src/display.c ****       }
 4560              		.loc 1 2644 2 discriminator 1 view .LVU1399
 4561 00aa 012D     		cmp	r5, #1
 4562 00ac F1D1     		bne	.L430
 4563              	.LVL492:
 4564              	.LBB371:
 347:src/display.c ****   if (on)	set_dot(n);
 4565              		.loc 1 347 6 is_stmt 1 view .LVU1400
 4566              	.LBB367:
 348:src/display.c ****   else	clr_dot(n);
 4567              		.loc 1 348 3 view .LVU1401
 348:src/display.c ****   else	clr_dot(n);
 4568              		.loc 1 348 11 view .LVU1402
 4569              	.LBE367:
 4570              	.LBE371:
2645:src/display.c **** 
 4571              		.loc 1 2645 7 is_stmt 0 view .LVU1403
 4572 00ae BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccxUm1xs.s 			page 166


 4573              		.cfi_remember_state
 4574              		.cfi_restore 14
 4575              		.cfi_restore 6
 4576              		.cfi_restore 5
 4577              		.cfi_restore 4
 4578              		.cfi_def_cfa_offset 0
 4579              	.LVL493:
 4580              	.LBB372:
 4581              	.LBB368:
 348:src/display.c ****   else	clr_dot(n);
 4582              		.loc 1 348 11 view .LVU1404
 4583 00b2 8B20     		movs	r0, #139
 4584 00b4 FFF7FEBF 		b	set_dot
 4585              	.LVL494:
 4586              	.L426:
 4587              		.cfi_restore_state
 348:src/display.c ****   else	clr_dot(n);
 4588              		.loc 1 348 11 view .LVU1405
 4589              	.LBE368:
 4590              	.LBE372:
 4591              	.LBB373:
 4592              	.LBB358:
 349:src/display.c **** }
 4593              		.loc 1 349 8 is_stmt 1 view .LVU1406
 4594 00b8 8320     		movs	r0, #131
 4595              	.LVL495:
 349:src/display.c **** }
 4596              		.loc 1 349 8 is_stmt 0 view .LVU1407
 4597 00ba FFF7FEFF 		bl	clr_dot
 4598              	.LVL496:
 4599 00be D9E7     		b	.L427
 4600              	.LVL497:
 4601              	.L419:
 349:src/display.c **** }
 4602              		.loc 1 349 8 view .LVU1408
 4603              	.LBE358:
 4604              	.LBE373:
 4605              	.LBB374:
 4606              	.LBB344:
 349:src/display.c **** }
 4607              		.loc 1 349 8 is_stmt 1 view .LVU1409
 4608 00c0 FFF7FEFF 		bl	clr_dot
 4609              	.LVL498:
 349:src/display.c **** }
 4610              		.loc 1 349 8 is_stmt 0 view .LVU1410
 4611 00c4 B9E7     		b	.L420
 4612              	.LVL499:
 4613              	.L424:
 349:src/display.c **** }
 4614              		.loc 1 349 8 view .LVU1411
 4615              	.LBE344:
 4616              	.LBE374:
 4617              	.LBB375:
 347:src/display.c ****   if (on)	set_dot(n);
 4618              		.loc 1 347 6 is_stmt 1 view .LVU1412
 4619              	.LBB354:
 348:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccxUm1xs.s 			page 167


 4620              		.loc 1 348 3 view .LVU1413
 348:src/display.c ****   else	clr_dot(n);
 4621              		.loc 1 348 11 view .LVU1414
 4622 00c6 FFF7FEFF 		bl	set_dot
 4623              	.LVL500:
 4624 00ca CCE7     		b	.L425
 4625              	.LVL501:
 4626              	.L440:
 348:src/display.c ****   else	clr_dot(n);
 4627              		.loc 1 348 11 is_stmt 0 view .LVU1415
 4628              	.LBE354:
 4629              	.LBE375:
 4630              	.LBB376:
 4631              	.LBI346:
 347:src/display.c ****   if (on)	set_dot(n);
 4632              		.loc 1 347 6 is_stmt 1 view .LVU1416
 4633              	.LBB349:
 348:src/display.c ****   else	clr_dot(n);
 4634              		.loc 1 348 3 view .LVU1417
 349:src/display.c **** }
 4635              		.loc 1 349 8 view .LVU1418
 4636 00cc FFF7FEFF 		bl	clr_dot
 4637              	.LVL502:
 4638 00d0 BEE7     		b	.L422
 4639              	.LVL503:
 4640              	.L439:
 349:src/display.c **** }
 4641              		.loc 1 349 8 is_stmt 0 view .LVU1419
 4642              	.LBE349:
 4643              	.LBE376:
 4644              	.LBB377:
 347:src/display.c ****   if (on)	set_dot(n);
 4645              		.loc 1 347 6 is_stmt 1 view .LVU1420
 4646              	.LBB339:
 348:src/display.c ****   else	clr_dot(n);
 4647              		.loc 1 348 3 view .LVU1421
 348:src/display.c ****   else	clr_dot(n);
 4648              		.loc 1 348 11 view .LVU1422
 4649 00d2 FFF7FEFF 		bl	set_dot
 4650              	.LVL504:
 4651 00d6 A5E7     		b	.L418
 4652              	.L443:
 4653              		.align	2
 4654              	.L442:
 4655 00d8 00000000 		.word	main_ram
 4656 00dc 00000000 		.word	Running
 4657 00e0 00000000 		.word	StateWhileOn
 4658 00e4 07000800 		.word	524295
 4659 00e8 00080800 		.word	526336
 4660              	.LBE339:
 4661              	.LBE377:
 4662              		.cfi_endproc
 4663              	.LFE32:
 4665              		.section	.text.pixel_length,"ax",%progbits
 4666              		.align	1
 4667              		.p2align 2,,3
 4668              		.global	pixel_length
ARM GAS  /tmp/ccxUm1xs.s 			page 168


 4669              		.syntax unified
 4670              		.thumb
 4671              		.thumb_func
 4672              		.fpu fpv4-sp-d16
 4674              	pixel_length:
 4675              	.LVL505:
 4676              	.LFB40:
3599:src/display.c **** 
3600:src/display.c **** 
3601:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3602:src/display.c ****        */
3603:src/display.c ****       int pixel_length(const char *s, int smallp)
3604:src/display.c ****       {
 4677              		.loc 1 3604 7 view -0
 4678              		.cfi_startproc
 4679              		@ args = 0, pretend = 0, frame = 0
 4680              		@ frame_needed = 0, uses_anonymous_args = 0
3605:src/display.c **** 	int len = 0;
 4681              		.loc 1 3605 2 view .LVU1424
3606:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4682              		.loc 1 3606 2 view .LVU1425
3604:src/display.c **** 	int len = 0;
 4683              		.loc 1 3604 7 is_stmt 0 view .LVU1426
 4684 0000 70B5     		push	{r4, r5, r6, lr}
 4685              		.cfi_def_cfa_offset 16
 4686              		.cfi_offset 4, -16
 4687              		.cfi_offset 5, -12
 4688              		.cfi_offset 6, -8
 4689              		.cfi_offset 14, -4
3604:src/display.c **** 	int len = 0;
 4690              		.loc 1 3604 7 view .LVU1427
 4691 0002 0446     		mov	r4, r0
3607:src/display.c **** 	while (*s != '\0') {
 4692              		.loc 1 3607 9 view .LVU1428
 4693 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4694              	.LVL506:
3606:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4695              		.loc 1 3606 34 view .LVU1429
 4696 0006 0E1E     		subs	r6, r1, #0
 4697 0008 18BF     		it	ne
 4698 000a 4FF48076 		movne	r6, #256
 4699              	.LVL507:
 4700              		.loc 1 3607 2 is_stmt 1 view .LVU1430
 4701              		.loc 1 3607 8 view .LVU1431
 4702 000e A0B1     		cbz	r0, .L451
3605:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4703              		.loc 1 3605 6 is_stmt 0 view .LVU1432
 4704 0010 0025     		movs	r5, #0
 4705 0012 06E0     		b	.L449
 4706              	.LVL508:
 4707              	.L447:
3608:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3609:src/display.c **** 	  if (s[0] == '\007') {
3610:src/display.c **** 	    len += s[1] & 0x1F;
3611:src/display.c **** 	    s += 3;
3612:src/display.c **** 	    continue;
3613:src/display.c **** 	  }
ARM GAS  /tmp/ccxUm1xs.s 			page 169


3614:src/display.c **** #endif
3615:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4708              		.loc 1 3615 11 view .LVU1433
 4709 0014 3044     		add	r0, r0, r6
 4710 0016 FFF7FEFF 		bl	charlengths
 4711              	.LVL509:
 4712              		.loc 1 3615 42 view .LVU1434
 4713 001a 0134     		adds	r4, r4, #1
 4714              	.LVL510:
 4715              		.loc 1 3615 8 view .LVU1435
 4716 001c 0544     		add	r5, r5, r0
 4717              	.LVL511:
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4718              		.loc 1 3607 8 is_stmt 1 view .LVU1436
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4719              		.loc 1 3607 9 is_stmt 0 view .LVU1437
 4720 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4721              		.loc 1 3607 8 view .LVU1438
 4722 0020 48B1     		cbz	r0, .L444
 4723              	.LVL512:
 4724              	.L449:
3609:src/display.c **** 	    len += s[1] & 0x1F;
 4725              		.loc 1 3609 4 is_stmt 1 view .LVU1439
 4726              		.loc 1 3615 4 view .LVU1440
3609:src/display.c **** 	    len += s[1] & 0x1F;
 4727              		.loc 1 3609 7 is_stmt 0 view .LVU1441
 4728 0022 0728     		cmp	r0, #7
 4729 0024 F6D1     		bne	.L447
3610:src/display.c **** 	    s += 3;
 4730              		.loc 1 3610 6 is_stmt 1 view .LVU1442
3610:src/display.c **** 	    s += 3;
 4731              		.loc 1 3610 18 is_stmt 0 view .LVU1443
 4732 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4733              		.loc 1 3607 9 view .LVU1444
 4734 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3610:src/display.c **** 	    s += 3;
 4735              		.loc 1 3610 18 view .LVU1445
 4736 002a 03F01F03 		and	r3, r3, #31
3611:src/display.c **** 	    continue;
 4737              		.loc 1 3611 8 view .LVU1446
 4738 002e 0334     		adds	r4, r4, #3
 4739              	.LVL513:
3610:src/display.c **** 	    s += 3;
 4740              		.loc 1 3610 10 view .LVU1447
 4741 0030 1D44     		add	r5, r5, r3
 4742              	.LVL514:
3611:src/display.c **** 	    continue;
 4743              		.loc 1 3611 6 is_stmt 1 view .LVU1448
3612:src/display.c **** 	  }
 4744              		.loc 1 3612 6 view .LVU1449
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4745              		.loc 1 3607 8 view .LVU1450
 4746 0032 0028     		cmp	r0, #0
 4747 0034 F5D1     		bne	.L449
 4748              	.L444:
ARM GAS  /tmp/ccxUm1xs.s 			page 170


3616:src/display.c **** 	}
3617:src/display.c **** 	return len;
3618:src/display.c ****       }
 4749              		.loc 1 3618 7 is_stmt 0 view .LVU1451
 4750 0036 2846     		mov	r0, r5
 4751 0038 70BD     		pop	{r4, r5, r6, pc}
 4752              	.LVL515:
 4753              	.L451:
3605:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4754              		.loc 1 3605 6 view .LVU1452
 4755 003a 0546     		mov	r5, r0
3617:src/display.c ****       }
 4756              		.loc 1 3617 2 is_stmt 1 view .LVU1453
 4757              		.loc 1 3618 7 is_stmt 0 view .LVU1454
 4758 003c 2846     		mov	r0, r5
 4759 003e 70BD     		pop	{r4, r5, r6, pc}
 4760              		.loc 1 3618 7 view .LVU1455
 4761              		.cfi_endproc
 4762              	.LFE40:
 4764              		.section	.text.set_status,"ax",%progbits
 4765              		.align	1
 4766              		.p2align 2,,3
 4767              		.syntax unified
 4768              		.thumb
 4769              		.thumb_func
 4770              		.fpu fpv4-sp-d16
 4772              	set_status:
 4773              	.LVL516:
 4774              	.LFB43:
3619:src/display.c **** 
3620:src/display.c **** 
3621:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3622:src/display.c ****        * If this is larger than the display, return true.
3623:src/display.c ****        */
3624:src/display.c ****       static int string_too_large(const char *s) {
3625:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3626:src/display.c ****       }
3627:src/display.c ****       static int string_too_large_top(const char *s) {
3628:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3629:src/display.c ****       }
3630:src/display.c **** 
3631:src/display.c **** 
3632:src/display.c ****       /* Display the given string on the screen.
3633:src/display.c ****        */
3634:src/display.c ****       static void set_status(const char *str) {
 4775              		.loc 1 3634 47 is_stmt 1 view -0
 4776              		.cfi_startproc
 4777              		@ args = 0, pretend = 0, frame = 0
 4778              		@ frame_needed = 0, uses_anonymous_args = 0
3635:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4779              		.loc 1 3635 2 view .LVU1457
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4780              		.loc 1 3634 47 is_stmt 0 view .LVU1458
 4781 0000 10B5     		push	{r4, lr}
 4782              		.cfi_def_cfa_offset 8
 4783              		.cfi_offset 4, -8
 4784              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxUm1xs.s 			page 171


 4785              		.loc 1 3635 24 view .LVU1459
 4786 0002 0D4B     		ldr	r3, .L459
 4787              		.loc 1 3635 2 view .LVU1460
 4788 0004 93F91630 		ldrsb	r3, [r3, #22]
 4789 0008 002B     		cmp	r3, #0
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4790              		.loc 1 3634 47 view .LVU1461
 4791 000a 82B0     		sub	sp, sp, #8
 4792              		.cfi_def_cfa_offset 16
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4793              		.loc 1 3634 47 view .LVU1462
 4794 000c 0446     		mov	r4, r0
 4795              		.loc 1 3635 2 view .LVU1463
 4796 000e 0ADA     		bge	.L458
 4797 0010 0121     		movs	r1, #1
 4798              	.LVL517:
 4799              	.L455:
 4800              	.LBB378:
 4801              	.LBI378:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4802              		.loc 1 3476 19 is_stmt 1 discriminator 6 view .LVU1464
 4803              	.LBB379:
3477:src/display.c ****       }
 4804              		.loc 1 3477 2 discriminator 6 view .LVU1465
 4805 0012 40F24A23 		movw	r3, #586
 4806 0016 0093     		str	r3, [sp]
 4807 0018 2046     		mov	r0, r4
 4808 001a 8E23     		movs	r3, #142
 4809 001c 4A22     		movs	r2, #74
 4810 001e FFF7FEFF 		bl	s_s_sized
 4811              	.LVL518:
3477:src/display.c ****       }
 4812              		.loc 1 3477 2 is_stmt 0 discriminator 6 view .LVU1466
 4813              	.LBE379:
 4814              	.LBE378:
3636:src/display.c ****       }
 4815              		.loc 1 3636 7 discriminator 6 view .LVU1467
 4816 0022 02B0     		add	sp, sp, #8
 4817              		.cfi_remember_state
 4818              		.cfi_def_cfa_offset 8
 4819              		@ sp needed
 4820 0024 10BD     		pop	{r4, pc}
 4821              	.LVL519:
 4822              	.L458:
 4823              		.cfi_restore_state
 4824              	.LBB380:
 4825              	.LBI380:
3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4826              		.loc 1 3624 18 is_stmt 1 view .LVU1468
 4827              	.LBB381:
3625:src/display.c ****       }
 4828              		.loc 1 3625 2 view .LVU1469
3625:src/display.c ****       }
 4829              		.loc 1 3625 9 is_stmt 0 view .LVU1470
 4830 0026 0021     		movs	r1, #0
 4831 0028 FFF7FEFF 		bl	pixel_length
 4832              	.LVL520:
ARM GAS  /tmp/ccxUm1xs.s 			page 172


3625:src/display.c ****       }
 4833              		.loc 1 3625 9 view .LVU1471
 4834              	.LBE381:
 4835              	.LBE380:
3635:src/display.c ****       }
 4836              		.loc 1 3635 2 view .LVU1472
 4837 002c 4B28     		cmp	r0, #75
 4838 002e D4BF     		ite	le
 4839 0030 0021     		movle	r1, #0
 4840 0032 0121     		movgt	r1, #1
 4841 0034 EDE7     		b	.L455
 4842              	.L460:
 4843 0036 00BF     		.align	2
 4844              	.L459:
 4845 0038 00000000 		.word	StateWhileOn
 4846              		.cfi_endproc
 4847              	.LFE43:
 4849              		.section	.text.set_x_dn,"ax",%progbits
 4850              		.align	1
 4851              		.p2align 2,,3
 4852              		.global	set_x_dn
 4853              		.syntax unified
 4854              		.thumb
 4855              		.thumb_func
 4856              		.fpu fpv4-sp-d16
 4858              	set_x_dn:
 4859              	.LVL521:
 4860              	.LFB27:
2020:src/display.c **** 	char x[50], *obp = x;
 4861              		.loc 1 2020 67 is_stmt 1 view -0
 4862              		.cfi_startproc
 4863              		@ args = 0, pretend = 0, frame = 152
 4864              		@ frame_needed = 0, uses_anonymous_args = 0
2021:src/display.c **** 	int odig = 0;
 4865              		.loc 1 2021 2 view .LVU1474
2020:src/display.c **** 	char x[50], *obp = x;
 4866              		.loc 1 2020 67 is_stmt 0 view .LVU1475
 4867 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4868              		.cfi_def_cfa_offset 36
 4869              		.cfi_offset 4, -36
 4870              		.cfi_offset 5, -32
 4871              		.cfi_offset 6, -28
 4872              		.cfi_offset 7, -24
 4873              		.cfi_offset 8, -20
 4874              		.cfi_offset 9, -16
 4875              		.cfi_offset 10, -12
 4876              		.cfi_offset 11, -8
 4877              		.cfi_offset 14, -4
 4878 0004 A7B0     		sub	sp, sp, #156
 4879              		.cfi_def_cfa_offset 192
 4880              	.LVL522:
2022:src/display.c **** 	int show_exp = 0;
 4881              		.loc 1 2022 2 is_stmt 1 view .LVU1476
2023:src/display.c **** 	int j;
 4882              		.loc 1 2023 2 view .LVU1477
2024:src/display.c **** 	char mantissa[64];
 4883              		.loc 1 2024 2 view .LVU1478
ARM GAS  /tmp/ccxUm1xs.s 			page 173


2025:src/display.c **** 	int exp = 0;
 4884              		.loc 1 2025 2 view .LVU1479
2026:src/display.c **** 	char *p = mantissa;
 4885              		.loc 1 2026 2 view .LVU1480
2027:src/display.c **** 	char *r;
 4886              		.loc 1 2027 2 view .LVU1481
2028:src/display.c **** 	const char *q;
 4887              		.loc 1 2028 2 view .LVU1482
2029:src/display.c **** 	int count, i;
 4888              		.loc 1 2029 2 view .LVU1483
2030:src/display.c **** 	int extra_digits = 0;
 4889              		.loc 1 2030 2 view .LVU1484
2031:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4890              		.loc 1 2031 2 view .LVU1485
2033:src/display.c **** 	int dispdigs;
 4891              		.loc 1 2033 2 view .LVU1486
2034:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4892              		.loc 1 2034 2 view .LVU1487
2035:src/display.c **** #else
 4893              		.loc 1 2035 2 view .LVU1488
2020:src/display.c **** 	char x[50], *obp = x;
 4894              		.loc 1 2020 67 is_stmt 0 view .LVU1489
 4895 0006 0746     		mov	r7, r0
2035:src/display.c **** #else
 4896              		.loc 1 2035 13 view .LVU1490
 4897 0008 08A8     		add	r0, sp, #32
 4898              	.LVL523:
2020:src/display.c **** 	char x[50], *obp = x;
 4899              		.loc 1 2020 67 view .LVU1491
 4900 000a 0C46     		mov	r4, r1
 4901 000c 0192     		str	r2, [sp, #4]
2035:src/display.c **** #else
 4902              		.loc 1 2035 13 view .LVU1492
 4903 000e FFF7FEFF 		bl	get_dispmode_digs
 4904              	.LVL524:
2035:src/display.c **** #else
 4905              		.loc 1 2035 13 view .LVU1493
 4906 0012 0546     		mov	r5, r0
 4907              	.LVL525:
2040:src/display.c **** 	int negative = 0;
 4908              		.loc 1 2040 2 is_stmt 1 view .LVU1494
2041:src/display.c **** 	int trimzeros = 0;
 4909              		.loc 1 2041 2 view .LVU1495
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4910              		.loc 1 2042 2 view .LVU1496
2050:src/display.c **** #endif
 4911              		.loc 1 2050 2 view .LVU1497
2053:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4912              		.loc 1 2053 2 view .LVU1498
 4913 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4914              	.LVL526:
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4915              		.loc 1 2055 2 view .LVU1499
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4916              		.loc 1 2055 5 is_stmt 0 view .LVU1500
 4917 0018 002C     		cmp	r4, #0
 4918 001a 00F08181 		beq	.L462
ARM GAS  /tmp/ccxUm1xs.s 			page 174


 4919              	.L465:
2080:src/display.c **** 	  return;
 4920              		.loc 1 2080 2 is_stmt 1 view .LVU1501
2080:src/display.c **** 	  return;
 4921              		.loc 1 2080 6 is_stmt 0 view .LVU1502
 4922 001e 2146     		mov	r1, r4
 4923 0020 07F10800 		add	r0, r7, #8
 4924 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4925              	.LVL527:
2080:src/display.c **** 	  return;
 4926              		.loc 1 2080 5 view .LVU1503
 4927 0028 8246     		mov	r10, r0
 4928 002a 0028     		cmp	r0, #0
 4929 002c 40F07081 		bne	.L461
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4930              		.loc 1 2083 2 is_stmt 1 view .LVU1504
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4931              		.loc 1 2083 12 is_stmt 0 view .LVU1505
 4932 0030 C94E     		ldr	r6, .L710
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4933              		.loc 1 2083 5 view .LVU1506
 4934 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4935 0034 012B     		cmp	r3, #1
 4936 0036 00F0EC82 		beq	.L687
2026:src/display.c **** 	char *p = mantissa;
 4937              		.loc 1 2026 6 view .LVU1507
 4938 003a 8046     		mov	r8, r0
 4939              	.LVL528:
 4940              	.L468:
2089:src/display.c **** 
 4941              		.loc 1 2089 2 is_stmt 1 view .LVU1508
 4942 003c 0DF1240B 		add	fp, sp, #36
 4943              	.LVL529:
2089:src/display.c **** 
 4944              		.loc 1 2089 2 is_stmt 0 view .LVU1509
 4945 0040 5846     		mov	r0, fp
 4946 0042 3222     		movs	r2, #50
 4947 0044 0021     		movs	r1, #0
 4948 0046 FFF7FEFF 		bl	xset
 4949              	.LVL530:
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4950              		.loc 1 2091 2 is_stmt 1 view .LVU1510
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4951              		.loc 1 2091 6 is_stmt 0 view .LVU1511
 4952 004a 3846     		mov	r0, r7
 4953 004c FFF7FEFF 		bl	dn_eq0
 4954              	.LVL531:
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4955              		.loc 1 2091 5 view .LVU1512
 4956 0050 0028     		cmp	r0, #0
 4957 0052 00F06081 		beq	.L469
2092:src/display.c **** 	    x[0] = '-';
 4958              		.loc 1 2092 4 is_stmt 1 view .LVU1513
2092:src/display.c **** 	    x[0] = '-';
 4959              		.loc 1 2092 7 is_stmt 0 view .LVU1514
 4960 0056 97F90830 		ldrsb	r3, [r7, #8]
 4961 005a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccxUm1xs.s 			page 175


 4962 005c C0F20083 		blt	.L688
 4963              	.L470:
2096:src/display.c **** 	} else
 4964              		.loc 1 2096 6 is_stmt 1 view .LVU1515
2096:src/display.c **** 	} else
 4965              		.loc 1 2096 11 is_stmt 0 view .LVU1516
 4966 0060 3023     		movs	r3, #48
 4967 0062 8DF82430 		strb	r3, [sp, #36]
 4968              	.L471:
2100:src/display.c **** 	  show_x(x, exp);
 4969              		.loc 1 2100 2 is_stmt 1 view .LVU1517
2100:src/display.c **** 	  show_x(x, exp);
 4970              		.loc 1 2100 12 is_stmt 0 view .LVU1518
 4971 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
2100:src/display.c **** 	  show_x(x, exp);
 4972              		.loc 1 2100 5 view .LVU1519
 4973 006a B9F1010F 		cmp	r9, #1
 4974 006e 00F04583 		beq	.L689
2106:src/display.c **** 	  //  ALL mode: fill the display
 4975              		.loc 1 2106 2 is_stmt 1 view .LVU1520
2106:src/display.c **** 	  //  ALL mode: fill the display
 4976              		.loc 1 2106 5 is_stmt 0 view .LVU1521
 4977 0072 002D     		cmp	r5, #0
 4978 0074 40F07881 		bne	.L690
2108:src/display.c **** 	else
 4979              		.loc 1 2108 4 is_stmt 1 view .LVU1522
2108:src/display.c **** 	else
 4980              		.loc 1 2108 25 is_stmt 0 view .LVU1523
 4981 0078 019E     		ldr	r6, [sp, #4]
 4982              	.LBB399:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4983              		.loc 1 2115 11 view .LVU1524
 4984 007a 089B     		ldr	r3, [sp, #32]
 4985              	.LBE399:
2108:src/display.c **** 	else
 4986              		.loc 1 2108 25 view .LVU1525
 4987 007c 3168     		ldr	r1, [r6]
 4988              	.LBB400:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4989              		.loc 1 2115 11 view .LVU1526
 4990 007e 2A46     		mov	r2, r5
 4991 0080 3846     		mov	r0, r7
 4992              	.LBE400:
2108:src/display.c **** 	else
 4993              		.loc 1 2108 25 view .LVU1527
 4994 0082 4D1E     		subs	r5, r1, #1
 4995              	.LVL532:
 4996              	.LBB401:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4997              		.loc 1 2115 11 view .LVU1528
 4998 0084 07A9     		add	r1, sp, #28
 4999              	.LBE401:
2108:src/display.c **** 	else
 5000              		.loc 1 2108 7 view .LVU1529
 5001 0086 0795     		str	r5, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5002              		.loc 1 2112 2 is_stmt 1 view .LVU1530
ARM GAS  /tmp/ccxUm1xs.s 			page 176


 5003              	.LBB402:
2113:src/display.c **** 
 5004              		.loc 1 2113 4 view .LVU1531
 5005              	.LVL533:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5006              		.loc 1 2115 4 view .LVU1532
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5007              		.loc 1 2115 11 is_stmt 0 view .LVU1533
 5008 0088 FFF7FEFF 		bl	std_round_fix
 5009              	.LVL534:
2120:src/display.c ****  	}
 5010              		.loc 1 2120 27 view .LVU1534
 5011 008c 3368     		ldr	r3, [r6]
 5012 008e 013B     		subs	r3, r3, #1
2120:src/display.c ****  	}
 5013              		.loc 1 2120 9 view .LVU1535
 5014 0090 0793     		str	r3, [sp, #28]
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5015              		.loc 1 2118 16 view .LVU1536
 5016 0092 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5017              		.loc 1 2115 11 view .LVU1537
 5018 0094 0546     		mov	r5, r0
 5019              	.LVL535:
2116:src/display.c **** 	    // allow zeros to be trimmed
 5020              		.loc 1 2116 4 is_stmt 1 view .LVU1538
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5021              		.loc 1 2118 6 view .LVU1539
2119:src/display.c **** 	    dd = *display_digits - 1;
 5022              		.loc 1 2119 4 view .LVU1540
2120:src/display.c ****  	}
 5023              		.loc 1 2120 6 view .LVU1541
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5024              		.loc 1 2118 16 is_stmt 0 view .LVU1542
 5025 0096 0493     		str	r3, [sp, #16]
 5026              	.LVL536:
 5027              	.L590:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5028              		.loc 1 2118 16 view .LVU1543
 5029              	.LBE402:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5030              		.loc 1 2132 2 is_stmt 1 view .LVU1544
 5031 0098 0DF15809 		add	r9, sp, #88
 5032              	.LVL537:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5033              		.loc 1 2132 2 is_stmt 0 view .LVU1545
 5034 009c 3F22     		movs	r2, #63
 5035 009e 3021     		movs	r1, #48
 5036 00a0 4846     		mov	r0, r9
 5037 00a2 FFF7FEFF 		bl	xset
 5038              	.LVL538:
2133:src/display.c **** 
 5039              		.loc 1 2133 2 is_stmt 1 view .LVU1546
2133:src/display.c **** 
 5040              		.loc 1 2133 31 is_stmt 0 view .LVU1547
 5041 00a6 0023     		movs	r3, #0
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccxUm1xs.s 			page 177


 5042              		.loc 1 2135 6 view .LVU1548
 5043 00a8 4521     		movs	r1, #69
 5044 00aa 5846     		mov	r0, fp
2133:src/display.c **** 
 5045              		.loc 1 2133 31 view .LVU1549
 5046 00ac 8DF89730 		strb	r3, [sp, #151]
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5047              		.loc 1 2135 2 is_stmt 1 view .LVU1550
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5048              		.loc 1 2135 6 is_stmt 0 view .LVU1551
 5049 00b0 FFF7FEFF 		bl	find_char
 5050              	.LVL539:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5051              		.loc 1 2137 2 is_stmt 1 view .LVU1552
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5052              		.loc 1 2137 5 is_stmt 0 view .LVU1553
 5053 00b4 0646     		mov	r6, r0
 5054 00b6 0028     		cmp	r0, #0
 5055 00b8 00F06481 		beq	.L691
 5056              	.L487:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5057              		.loc 1 2140 4 is_stmt 1 view .LVU1554
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5058              		.loc 1 2140 10 is_stmt 0 view .LVU1555
 5059 00bc 701C     		adds	r0, r6, #1
 5060              	.LVL540:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5061              		.loc 1 2140 10 view .LVU1556
 5062 00be FFF7FEFF 		bl	s_to_i
 5063              	.LVL541:
2141:src/display.c **** 	}
 5064              		.loc 1 2141 7 view .LVU1557
 5065 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5066 00c4 442B     		cmp	r3, #68
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5067              		.loc 1 2140 10 view .LVU1558
 5068 00c6 0646     		mov	r6, r0
 5069              	.LVL542:
2141:src/display.c **** 	}
 5070              		.loc 1 2141 4 is_stmt 1 view .LVU1559
2141:src/display.c **** 	}
 5071              		.loc 1 2141 19 view .LVU1560
2141:src/display.c **** 	}
 5072              		.loc 1 2141 23 is_stmt 0 view .LVU1561
 5073 00c8 08BF     		it	eq
 5074 00ca 4642     		rsbeq	r6, r0, #0
 5075              	.LVL543:
 5076              	.L488:
2149:src/display.c **** 	if (!res) {
 5077              		.loc 1 2149 2 is_stmt 1 view .LVU1562
2149:src/display.c **** 	if (!res) {
 5078              		.loc 1 2149 12 view .LVU1563
2149:src/display.c **** 	if (!res) {
 5079              		.loc 1 2149 2 is_stmt 0 view .LVU1564
 5080 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5081 00d0 202B     		cmp	r3, #32
2149:src/display.c **** 	if (!res) {
ARM GAS  /tmp/ccxUm1xs.s 			page 178


 5082              		.loc 1 2149 8 view .LVU1565
 5083 00d2 D846     		mov	r8, fp
2149:src/display.c **** 	if (!res) {
 5084              		.loc 1 2149 2 view .LVU1566
 5085 00d4 03D1     		bne	.L489
 5086              	.LVL544:
 5087              	.L490:
2149:src/display.c **** 	if (!res) {
 5088              		.loc 1 2149 27 is_stmt 1 discriminator 3 view .LVU1567
2149:src/display.c **** 	if (!res) {
 5089              		.loc 1 2149 23 discriminator 3 view .LVU1568
2149:src/display.c **** 	if (!res) {
 5090              		.loc 1 2149 12 discriminator 3 view .LVU1569
2149:src/display.c **** 	if (!res) {
 5091              		.loc 1 2149 2 is_stmt 0 discriminator 3 view .LVU1570
 5092 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5093              	.LVL545:
2149:src/display.c **** 	if (!res) {
 5094              		.loc 1 2149 2 discriminator 3 view .LVU1571
 5095 00da 202B     		cmp	r3, #32
 5096 00dc FBD0     		beq	.L490
 5097              	.LVL546:
 5098              	.L489:
2150:src/display.c **** 	  CLR_EXP_SIGN;
 5099              		.loc 1 2150 2 is_stmt 1 view .LVU1572
2150:src/display.c **** 	  CLR_EXP_SIGN;
 5100              		.loc 1 2150 5 is_stmt 0 view .LVU1573
 5101 00de 002C     		cmp	r4, #0
 5102 00e0 00F0C982 		beq	.L692
 5103              	.L491:
2154:src/display.c **** 	  negative = 1;
 5104              		.loc 1 2154 2 is_stmt 1 view .LVU1574
2154:src/display.c **** 	  negative = 1;
 5105              		.loc 1 2154 6 is_stmt 0 view .LVU1575
 5106 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2154:src/display.c **** 	  negative = 1;
 5107              		.loc 1 2154 5 view .LVU1576
 5108 00e8 2D2B     		cmp	r3, #45
 5109 00ea 00F0DB81 		beq	.L693
2157:src/display.c **** 	  q++;
 5110              		.loc 1 2157 9 is_stmt 1 view .LVU1577
2157:src/display.c **** 	  q++;
 5111              		.loc 1 2157 12 is_stmt 0 view .LVU1578
 5112 00ee 2B2B     		cmp	r3, #43
 5113 00f0 00F0AF82 		beq	.L694
2041:src/display.c **** 	int trimzeros = 0;
 5114              		.loc 1 2041 6 view .LVU1579
 5115 00f4 0022     		movs	r2, #0
 5116 00f6 0392     		str	r2, [sp, #12]
 5117              	.LVL547:
 5118              	.L493:
2159:src/display.c **** 	if (*q == '.') {
 5119              		.loc 1 2159 9 is_stmt 1 discriminator 1 view .LVU1580
2159:src/display.c **** 	if (*q == '.') {
 5120              		.loc 1 2159 2 is_stmt 0 discriminator 1 view .LVU1581
 5121 00f8 302B     		cmp	r3, #48
 5122 00fa 03D1     		bne	.L495
ARM GAS  /tmp/ccxUm1xs.s 			page 179


 5123              	.LVL548:
 5124              	.L494:
2159:src/display.c **** 	if (*q == '.') {
 5125              		.loc 1 2159 24 is_stmt 1 discriminator 2 view .LVU1582
2159:src/display.c **** 	if (*q == '.') {
 5126              		.loc 1 2159 20 discriminator 2 view .LVU1583
2159:src/display.c **** 	if (*q == '.') {
 5127              		.loc 1 2159 9 discriminator 2 view .LVU1584
 5128 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5129              	.LVL549:
2159:src/display.c **** 	if (*q == '.') {
 5130              		.loc 1 2159 2 is_stmt 0 discriminator 2 view .LVU1585
 5131 0100 302B     		cmp	r3, #48
 5132 0102 FBD0     		beq	.L494
 5133              	.LVL550:
 5134              	.L495:
2160:src/display.c **** 	  do
 5135              		.loc 1 2160 2 is_stmt 1 view .LVU1586
2160:src/display.c **** 	  do
 5136              		.loc 1 2160 5 is_stmt 0 view .LVU1587
 5137 0104 2E2B     		cmp	r3, #46
 5138 0106 00F0B581 		beq	.L695
2167:src/display.c **** 	    *p++ = *q++;
 5139              		.loc 1 2167 4 is_stmt 1 view .LVU1588
2167:src/display.c **** 	    *p++ = *q++;
 5140              		.loc 1 2167 7 is_stmt 0 view .LVU1589
 5141 010a A3F13002 		sub	r2, r3, #48
 5142 010e 092A     		cmp	r2, #9
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5143              		.loc 1 2168 6 is_stmt 1 view .LVU1590
 5144              	.LVL551:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5145              		.loc 1 2168 15 is_stmt 0 view .LVU1591
 5146 0110 9CBF     		itt	ls
 5147 0112 08F10108 		addls	r8, r8, #1
 5148              	.LVL552:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5149              		.loc 1 2168 11 view .LVU1592
 5150 0116 8DF85830 		strbls	r3, [sp, #88]
2169:src/display.c **** 	    *p++ = *q++;
 5151              		.loc 1 2169 11 view .LVU1593
 5152 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2169:src/display.c **** 	    *p++ = *q++;
 5153              		.loc 1 2169 10 view .LVU1594
 5154 011e A2F13003 		sub	r3, r2, #48
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5155              		.loc 1 2168 8 view .LVU1595
 5156 0122 94BF     		ite	ls
 5157 0124 0DF15901 		addls	r1, sp, #89
2027:src/display.c **** 	char *r;
 5158              		.loc 1 2027 8 view .LVU1596
 5159 0128 4946     		movhi	r1, r9
 5160              	.LVL553:
2169:src/display.c **** 	    *p++ = *q++;
 5161              		.loc 1 2169 10 is_stmt 1 view .LVU1597
 5162 012a 092B     		cmp	r3, #9
 5163 012c 0ED8     		bhi	.L501
ARM GAS  /tmp/ccxUm1xs.s 			page 180


 5164 012e A6EB0800 		sub	r0, r6, r8
 5165 0132 08F10103 		add	r3, r8, #1
 5166              	.L502:
 5167              	.LVL554:
2170:src/display.c **** 	    exp++;
 5168              		.loc 1 2170 6 view .LVU1598
2170:src/display.c **** 	    exp++;
 5169              		.loc 1 2170 11 is_stmt 0 view .LVU1599
 5170 0136 01F8012B 		strb	r2, [r1], #1
 5171              	.LVL555:
2170:src/display.c **** 	    exp++;
 5172              		.loc 1 2170 15 view .LVU1600
 5173 013a 9846     		mov	r8, r3
 5174              	.LVL556:
2171:src/display.c **** 	  }
 5175              		.loc 1 2171 6 is_stmt 1 view .LVU1601
 5176 013c C618     		adds	r6, r0, r3
 5177              	.LVL557:
2169:src/display.c **** 	    *p++ = *q++;
 5178              		.loc 1 2169 10 view .LVU1602
2169:src/display.c **** 	    *p++ = *q++;
 5179              		.loc 1 2169 11 is_stmt 0 view .LVU1603
 5180 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5181              	.LVL558:
2169:src/display.c **** 	    *p++ = *q++;
 5182              		.loc 1 2169 10 view .LVU1604
 5183 0142 A2F1300C 		sub	ip, r2, #48
 5184 0146 BCF1090F 		cmp	ip, #9
 5185 014a F4D9     		bls	.L502
 5186              	.LVL559:
 5187              	.L501:
2173:src/display.c **** 	    q++;
 5188              		.loc 1 2173 4 is_stmt 1 view .LVU1605
2173:src/display.c **** 	    q++;
 5189              		.loc 1 2173 7 is_stmt 0 view .LVU1606
 5190 014c 2E2A     		cmp	r2, #46
 5191 014e 00F06E82 		beq	.L696
 5192              	.LVL560:
 5193              	.L498:
2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5194              		.loc 1 2180 2 is_stmt 1 view .LVU1607
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5195              		.loc 1 2181 12 is_stmt 0 view .LVU1608
 5196 0152 019B     		ldr	r3, [sp, #4]
 5197 0154 079A     		ldr	r2, [sp, #28]
 5198 0156 1B68     		ldr	r3, [r3]
 5199 0158 0293     		str	r3, [sp, #8]
2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5200              		.loc 1 2180 5 view .LVU1609
 5201 015a 012D     		cmp	r5, #1
 5202 015c 00F07A81 		beq	.L504
 5203              	.LVL561:
 5204              	.L686:
2182:src/display.c **** 	  else {
 5205              		.loc 1 2182 35 view .LVU1610
 5206 0160 0021     		movs	r1, #0
 5207              	.LVL562:
ARM GAS  /tmp/ccxUm1xs.s 			page 181


 5208              	.L505:
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5209              		.loc 1 2194 2 is_stmt 1 view .LVU1611
 5210 0162 02F1010E 		add	lr, r2, #1
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5211              		.loc 1 2194 35 is_stmt 0 view .LVU1612
 5212 0166 7144     		add	r1, r1, lr
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5213              		.loc 1 2194 4 view .LVU1613
 5214 0168 09EB0103 		add	r3, r9, r1
 5215              	.LVL563:
2195:src/display.c **** 	  *p = '0';
 5216              		.loc 1 2195 2 is_stmt 1 view .LVU1614
2195:src/display.c **** 	  *p = '0';
 5217              		.loc 1 2195 6 is_stmt 0 view .LVU1615
 5218 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2195:src/display.c **** 	  *p = '0';
 5219              		.loc 1 2195 5 view .LVU1616
 5220 0170 3428     		cmp	r0, #52
 5221 0172 26D9     		bls	.L510
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5222              		.loc 1 2196 4 is_stmt 1 view .LVU1617
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5223              		.loc 1 2196 7 is_stmt 0 view .LVU1618
 5224 0174 3020     		movs	r0, #48
 5225 0176 09F80100 		strb	r0, [r9, r1]
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5226              		.loc 1 2197 4 is_stmt 1 view .LVU1619
 5227              	.LVL564:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5228              		.loc 1 2197 23 view .LVU1620
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5229              		.loc 1 2197 4 is_stmt 0 view .LVU1621
 5230 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5231 017e 3928     		cmp	r0, #57
 5232 0180 40F0DD83 		bne	.L511
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5233              		.loc 1 2197 11 view .LVU1622
 5234 0184 4846     		mov	r0, r9
 5235              	.LVL565:
 5236              	.L512:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5237              		.loc 1 2197 38 is_stmt 1 discriminator 3 view .LVU1623
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5238              		.loc 1 2197 34 discriminator 3 view .LVU1624
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5239              		.loc 1 2197 23 discriminator 3 view .LVU1625
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5240              		.loc 1 2197 4 is_stmt 0 discriminator 3 view .LVU1626
 5241 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5242              	.LVL566:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5243              		.loc 1 2197 4 discriminator 3 view .LVU1627
 5244 018a BCF1390F 		cmp	ip, #57
 5245 018e FAD0     		beq	.L512
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5246              		.loc 1 2198 4 is_stmt 1 view .LVU1628
ARM GAS  /tmp/ccxUm1xs.s 			page 182


2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5247              		.loc 1 2198 7 is_stmt 0 view .LVU1629
 5248 0190 8342     		cmp	r3, r0
 5249 0192 00F00D81 		beq	.L697
 5250              	.LVL567:
 5251              	.L588:
2207:src/display.c **** 	      *p = '0';
 5252              		.loc 1 2207 12 is_stmt 1 view .LVU1630
2207:src/display.c **** 	      *p = '0';
 5253              		.loc 1 2207 13 is_stmt 0 view .LVU1631
 5254 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2207:src/display.c **** 	      *p = '0';
 5255              		.loc 1 2207 12 view .LVU1632
 5256 019a BCF1390F 		cmp	ip, #57
 5257 019e 03F1FF30 		add	r0, r3, #-1
 5258              	.LVL568:
2207:src/display.c **** 	      *p = '0';
 5259              		.loc 1 2207 12 view .LVU1633
 5260 01a2 08D1     		bne	.L515
2208:src/display.c **** 	    (*p)++;
 5261              		.loc 1 2208 11 view .LVU1634
 5262 01a4 4FF0300E 		mov	lr, #48
 5263              	.L514:
2208:src/display.c **** 	    (*p)++;
 5264              		.loc 1 2208 8 is_stmt 1 view .LVU1635
2208:src/display.c **** 	    (*p)++;
 5265              		.loc 1 2208 11 is_stmt 0 view .LVU1636
 5266 01a8 80F800E0 		strb	lr, [r0]
2207:src/display.c **** 	      *p = '0';
 5267              		.loc 1 2207 12 is_stmt 1 view .LVU1637
 5268              	.LVL569:
2207:src/display.c **** 	      *p = '0';
 5269              		.loc 1 2207 13 is_stmt 0 view .LVU1638
 5270 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5271              	.LVL570:
2207:src/display.c **** 	      *p = '0';
 5272              		.loc 1 2207 12 view .LVU1639
 5273 01b0 BCF1390F 		cmp	ip, #57
 5274 01b4 F8D0     		beq	.L514
 5275              	.L515:
2209:src/display.c **** 	  }
 5276              		.loc 1 2209 6 is_stmt 1 view .LVU1640
2209:src/display.c **** 	  }
 5277              		.loc 1 2209 10 is_stmt 0 view .LVU1641
 5278 01b6 0CF1010C 		add	ip, ip, #1
 5279 01ba 80F800C0 		strb	ip, [r0]
 5280              	.LVL571:
 5281              	.L685:
2209:src/display.c **** 	  }
 5282              		.loc 1 2209 10 view .LVU1642
 5283 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5284              	.L510:
2214:src/display.c **** 
 5285              		.loc 1 2214 2 is_stmt 1 view .LVU1643
 5286              	.LVL572:
2214:src/display.c **** 
 5287              		.loc 1 2214 45 view .LVU1644
ARM GAS  /tmp/ccxUm1xs.s 			page 183


2214:src/display.c **** 
 5288              		.loc 1 2214 2 is_stmt 0 view .LVU1645
 5289 01c2 28B1     		cbz	r0, .L521
 5290              	.LVL573:
 5291              	.L587:
2214:src/display.c **** 
 5292              		.loc 1 2214 62 view .LVU1646
 5293 01c4 3020     		movs	r0, #48
 5294              	.L522:
2214:src/display.c **** 
 5295              		.loc 1 2214 68 is_stmt 1 discriminator 3 view .LVU1647
2214:src/display.c **** 
 5296              		.loc 1 2214 57 discriminator 3 view .LVU1648
 5297              	.LVL574:
2214:src/display.c **** 
 5298              		.loc 1 2214 62 is_stmt 0 discriminator 3 view .LVU1649
 5299 01c6 03F8010B 		strb	r0, [r3], #1
 5300              	.LVL575:
2214:src/display.c **** 
 5301              		.loc 1 2214 45 is_stmt 1 discriminator 3 view .LVU1650
2214:src/display.c **** 
 5302              		.loc 1 2214 2 is_stmt 0 discriminator 3 view .LVU1651
 5303 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5304 01cc 0029     		cmp	r1, #0
 5305 01ce FAD1     		bne	.L522
 5306              	.L521:
2216:src/display.c **** 	switch (mode) {
 5307              		.loc 1 2216 2 is_stmt 1 view .LVU1652
 5308              	.LVL576:
2217:src/display.c **** 	default:
 5309              		.loc 1 2217 2 view .LVU1653
 5310 01d0 022D     		cmp	r5, #2
 5311 01d2 00F06D81 		beq	.L559
 5312 01d6 032D     		cmp	r5, #3
 5313 01d8 00F00F81 		beq	.L524
 5314 01dc 012D     		cmp	r5, #1
 5315 01de 00F0E081 		beq	.L525
2220:src/display.c **** 	  if (count != *display_digits)
 5316              		.loc 1 2220 4 view .LVU1654
 5317              	.LVL577:
2220:src/display.c **** 	  if (count != *display_digits)
 5318              		.loc 1 2220 34 view .LVU1655
2220:src/display.c **** 	  if (count != *display_digits)
 5319              		.loc 1 2220 42 is_stmt 0 view .LVU1656
 5320 01e2 0298     		ldr	r0, [sp, #8]
 5321 01e4 26AB     		add	r3, sp, #152
 5322 01e6 0344     		add	r3, r3, r0
2220:src/display.c **** 	  if (count != *display_digits)
 5323              		.loc 1 2220 4 view .LVU1657
 5324 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5325 01ec 302B     		cmp	r3, #48
 5326 01ee 40F09983 		bne	.L603
 5327 01f2 411E     		subs	r1, r0, #1
 5328 01f4 4944     		add	r1, r1, r9
 5329              	.LVL578:
 5330              	.L529:
2220:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/ccxUm1xs.s 			page 184


 5331              		.loc 1 2220 66 is_stmt 1 discriminator 3 view .LVU1658
2220:src/display.c **** 	  if (count != *display_digits)
 5332              		.loc 1 2220 58 discriminator 3 view .LVU1659
2220:src/display.c **** 	  if (count != *display_digits)
 5333              		.loc 1 2220 42 is_stmt 0 discriminator 3 view .LVU1660
 5334 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2220:src/display.c **** 	  if (count != *display_digits)
 5335              		.loc 1 2220 4 discriminator 3 view .LVU1661
 5336 01fa 302D     		cmp	r5, #48
 5337 01fc 0346     		mov	r3, r0
2220:src/display.c **** 	  if (count != *display_digits)
 5338              		.loc 1 2220 63 discriminator 3 view .LVU1662
 5339 01fe 00F1FF30 		add	r0, r0, #-1
 5340              	.LVL579:
2220:src/display.c **** 	  if (count != *display_digits)
 5341              		.loc 1 2220 34 is_stmt 1 discriminator 3 view .LVU1663
2220:src/display.c **** 	  if (count != *display_digits)
 5342              		.loc 1 2220 4 is_stmt 0 discriminator 3 view .LVU1664
 5343 0202 F8D0     		beq	.L529
2221:src/display.c **** 	    count++;
 5344              		.loc 1 2221 4 is_stmt 1 view .LVU1665
2221:src/display.c **** 	    count++;
 5345              		.loc 1 2221 7 is_stmt 0 view .LVU1666
 5346 0204 0299     		ldr	r1, [sp, #8]
 5347 0206 8842     		cmp	r0, r1
 5348 0208 08BF     		it	eq
 5349 020a 0B46     		moveq	r3, r1
 5350              	.LVL580:
 5351              	.L528:
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5352              		.loc 1 2224 4 is_stmt 1 view .LVU1667
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5353              		.loc 1 2224 7 is_stmt 0 view .LVU1668
 5354 020c 0299     		ldr	r1, [sp, #8]
 5355 020e 8E42     		cmp	r6, r1
 5356 0210 80F20581 		bge	.L530
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5357              		.loc 1 2224 47 discriminator 1 view .LVU1669
 5358 0214 591A     		subs	r1, r3, r1
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5359              		.loc 1 2224 31 discriminator 1 view .LVU1670
 5360 0216 B142     		cmp	r1, r6
 5361 0218 00F30181 		bgt	.L530
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5362              		.loc 1 2249 11 is_stmt 1 view .LVU1671
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5363              		.loc 1 2249 14 is_stmt 0 view .LVU1672
 5364 021c 002E     		cmp	r6, #0
 5365 021e C0F2A483 		blt	.L539
 5366 0222 721C     		adds	r2, r6, #1
2251:src/display.c **** 		*obp++ = ',';
 5367              		.loc 1 2251 31 view .LVU1673
 5368 0224 DFF838E1 		ldr	lr, .L710+8
 5369 0228 0592     		str	r2, [sp, #20]
 5370 022a 09EB0200 		add	r0, r9, r2
2216:src/display.c **** 	switch (mode) {
 5371              		.loc 1 2216 4 view .LVU1674
ARM GAS  /tmp/ccxUm1xs.s 			page 185


 5372 022e CC46     		mov	ip, r9
2021:src/display.c **** 	int odig = 0;
 5373              		.loc 1 2021 15 view .LVU1675
 5374 0230 5946     		mov	r1, fp
 5375 0232 05E0     		b	.L540
 5376              	.LVL581:
 5377              	.L543:
2252:src/display.c **** 	      *obp++ = *p++;
 5378              		.loc 1 2252 3 is_stmt 1 view .LVU1676
2251:src/display.c **** 		*obp++ = ',';
 5379              		.loc 1 2251 18 is_stmt 0 view .LVU1677
 5380 0234 022D     		cmp	r5, #2
2252:src/display.c **** 	      *obp++ = *p++;
 5381              		.loc 1 2252 10 view .LVU1678
 5382 0236 05BF     		ittet	eq
 5383 0238 2C22     		moveq	r2, #44
 5384 023a 4A70     		strbeq	r2, [r1, #1]
2253:src/display.c **** 	      odig++;
 5385              		.loc 1 2253 12 view .LVU1679
 5386 023c 0131     		addne	r1, r1, #1
 5387              	.LVL582:
2252:src/display.c **** 	      *obp++ = *p++;
 5388              		.loc 1 2252 7 view .LVU1680
 5389 023e 0231     		addeq	r1, r1, #2
 5390              	.LVL583:
 5391              	.L540:
2253:src/display.c **** 	      odig++;
 5392              		.loc 1 2253 8 is_stmt 1 discriminator 2 view .LVU1681
2253:src/display.c **** 	      odig++;
 5393              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1682
 5394 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5395              	.LVL584:
2251:src/display.c **** 		*obp++ = ',';
 5396              		.loc 1 2251 8 is_stmt 1 discriminator 2 view .LVU1683
2253:src/display.c **** 	      odig++;
 5397              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1684
 5398 0244 0A70     		strb	r2, [r1]
2254:src/display.c **** 	    }
 5399              		.loc 1 2254 8 is_stmt 1 discriminator 2 view .LVU1685
 5400              	.LVL585:
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5401              		.loc 1 2250 23 discriminator 2 view .LVU1686
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5402              		.loc 1 2250 15 discriminator 2 view .LVU1687
2251:src/display.c **** 		*obp++ = ',';
 5403              		.loc 1 2251 31 is_stmt 0 discriminator 2 view .LVU1688
 5404 0246 A9EB0C02 		sub	r2, r9, ip
 5405 024a 3244     		add	r2, r2, r6
 5406 024c 8EFB0285 		smull	r8, r5, lr, r2
 5407 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5408 0254 05EB4505 		add	r5, r5, r5, lsl #1
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5409              		.loc 1 2250 6 discriminator 2 view .LVU1689
 5410 0258 6045     		cmp	r0, ip
2251:src/display.c **** 		*obp++ = ',';
 5411              		.loc 1 2251 31 discriminator 2 view .LVU1690
 5412 025a A2EB0505 		sub	r5, r2, r5
ARM GAS  /tmp/ccxUm1xs.s 			page 186


2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5413              		.loc 1 2250 6 discriminator 2 view .LVU1691
 5414 025e E9D1     		bne	.L543
 5415 0260 059D     		ldr	r5, [sp, #20]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5416              		.loc 1 2256 6 is_stmt 1 view .LVU1692
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5417              		.loc 1 2256 13 is_stmt 0 view .LVU1693
 5418 0262 2E22     		movs	r2, #46
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5419              		.loc 1 2257 9 view .LVU1694
 5420 0264 AB42     		cmp	r3, r5
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5421              		.loc 1 2256 13 view .LVU1695
 5422 0266 4A70     		strb	r2, [r1, #1]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5423              		.loc 1 2256 10 view .LVU1696
 5424 0268 01F10208 		add	r8, r1, #2
 5425              	.LVL586:
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5426              		.loc 1 2257 6 is_stmt 1 view .LVU1697
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5427              		.loc 1 2257 9 is_stmt 0 view .LVU1698
 5428 026c 40F34281 		ble	.L537
 5429 0270 9A1B     		subs	r2, r3, r6
 5430 0272 0A44     		add	r2, r2, r1
 5431 0274 0131     		adds	r1, r1, #1
 5432              	.LVL587:
 5433              	.L544:
2259:src/display.c **** 		odig++;
 5434              		.loc 1 2259 3 is_stmt 1 discriminator 3 view .LVU1699
2259:src/display.c **** 		odig++;
 5435              		.loc 1 2259 10 is_stmt 0 discriminator 3 view .LVU1700
 5436 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5437              	.LVL588:
2259:src/display.c **** 		odig++;
 5438              		.loc 1 2259 10 discriminator 3 view .LVU1701
 5439 027a 01F8015F 		strb	r5, [r1, #1]!
2260:src/display.c **** 	      }
 5440              		.loc 1 2260 3 is_stmt 1 discriminator 3 view .LVU1702
2258:src/display.c **** 		*obp++ = *p++;
 5441              		.loc 1 2258 31 discriminator 3 view .LVU1703
2258:src/display.c **** 		*obp++ = *p++;
 5442              		.loc 1 2258 22 discriminator 3 view .LVU1704
2258:src/display.c **** 		*obp++ = *p++;
 5443              		.loc 1 2258 8 is_stmt 0 discriminator 3 view .LVU1705
 5444 027e 9142     		cmp	r1, r2
 5445 0280 F9D1     		bne	.L544
 5446 0282 F243     		mvns	r2, r6
 5447 0284 1A44     		add	r2, r2, r3
 5448 0286 9044     		add	r8, r8, r2
 5449              	.LVL589:
2260:src/display.c **** 	      }
 5450              		.loc 1 2260 7 view .LVU1706
 5451 0288 1D46     		mov	r5, r3
 5452 028a 33E1     		b	.L537
 5453              	.LVL590:
ARM GAS  /tmp/ccxUm1xs.s 			page 187


 5454              	.L607:
2260:src/display.c **** 	      }
 5455              		.loc 1 2260 7 view .LVU1707
 5456 028c D846     		mov	r8, fp
 5457              	.LVL591:
 5458              	.L566:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5459              		.loc 1 2352 2 is_stmt 1 view .LVU1708
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5460              		.loc 1 2352 5 is_stmt 0 view .LVU1709
 5461 028e 029B     		ldr	r3, [sp, #8]
 5462 0290 0A2B     		cmp	r3, #10
 5463 0292 02DD     		ble	.L569
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5464              		.loc 1 2352 50 discriminator 1 view .LVU1710
 5465 0294 002C     		cmp	r4, #0
 5466 0296 00F0FB81 		beq	.L698
 5467              	.L569:
2358:src/display.c **** 	if (odig > *display_digits)
 5468              		.loc 1 2358 2 is_stmt 1 view .LVU1711
 5469 029a 029B     		ldr	r3, [sp, #8]
 5470 029c 9D42     		cmp	r5, r3
 5471 029e A8BF     		it	ge
 5472 02a0 1D46     		movge	r5, r3
 5473              	.LVL592:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5474              		.loc 1 2361 23 is_stmt 0 view .LVU1712
 5475 02a2 5F1B     		subs	r7, r3, r5
 5476              	.LVL593:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5477              		.loc 1 2361 4 view .LVU1713
 5478 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2358:src/display.c **** 	if (odig > *display_digits)
 5479              		.loc 1 2358 7 view .LVU1714
 5480 02a8 0023     		movs	r3, #0
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5481              		.loc 1 2362 5 view .LVU1715
 5482 02aa 9F42     		cmp	r7, r3
2358:src/display.c **** 	if (odig > *display_digits)
 5483              		.loc 1 2358 7 view .LVU1716
 5484 02ac 88F80030 		strb	r3, [r8]
2359:src/display.c **** 	  odig = *display_digits;
 5485              		.loc 1 2359 2 is_stmt 1 view .LVU1717
 5486              	.LVL594:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5487              		.loc 1 2361 2 view .LVU1718
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5488              		.loc 1 2362 2 view .LVU1719
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5489              		.loc 1 2362 5 is_stmt 0 view .LVU1720
 5490 02b0 03DD     		ble	.L570
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5491              		.loc 1 2362 35 discriminator 1 view .LVU1721
 5492 02b2 16F57A7F 		cmn	r6, #1000
2363:src/display.c **** 	if (negative) {
 5493              		.loc 1 2363 4 is_stmt 1 discriminator 1 view .LVU1722
2363:src/display.c **** 	if (negative) {
ARM GAS  /tmp/ccxUm1xs.s 			page 188


 5494              		.loc 1 2363 6 is_stmt 0 discriminator 1 view .LVU1723
 5495 02b6 D8BF     		it	le
 5496 02b8 093F     		suble	r7, r7, #9
 5497              	.LVL595:
 5498              	.L570:
2364:src/display.c **** 	  if (res) *res++ = '-';
 5499              		.loc 1 2364 2 is_stmt 1 view .LVU1724
2364:src/display.c **** 	  if (res) *res++ = '-';
 5500              		.loc 1 2364 5 is_stmt 0 view .LVU1725
 5501 02ba 039B     		ldr	r3, [sp, #12]
 5502 02bc 2BB1     		cbz	r3, .L571
2365:src/display.c **** 	  else {
 5503              		.loc 1 2365 4 is_stmt 1 view .LVU1726
2365:src/display.c **** 	  else {
 5504              		.loc 1 2365 7 is_stmt 0 view .LVU1727
 5505 02be 002C     		cmp	r4, #0
 5506 02c0 00F0FE81 		beq	.L572
2365:src/display.c **** 	  else {
 5507              		.loc 1 2365 13 is_stmt 1 discriminator 1 view .LVU1728
 5508              	.LVL596:
2365:src/display.c **** 	  else {
 5509              		.loc 1 2365 20 is_stmt 0 discriminator 1 view .LVU1729
 5510 02c4 2D23     		movs	r3, #45
 5511 02c6 04F8013B 		strb	r3, [r4], #1
 5512              	.LVL597:
 5513              	.L571:
2373:src/display.c **** 	  if (c == '.') {
 5514              		.loc 1 2373 12 is_stmt 1 discriminator 1 view .LVU1730
2373:src/display.c **** 	  if (c == '.') {
 5515              		.loc 1 2373 18 is_stmt 0 discriminator 1 view .LVU1731
 5516 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5517              	.LVL598:
2373:src/display.c **** 	  if (c == '.') {
 5518              		.loc 1 2373 2 discriminator 1 view .LVU1732
 5519 02ce A2B1     		cbz	r2, .L573
2373:src/display.c **** 	  if (c == '.') {
 5520              		.loc 1 2373 31 view .LVU1733
 5521 02d0 6B2F     		cmp	r7, #107
 5522 02d2 12DC     		bgt	.L573
 5523              	.LVL599:
 5524              	.L574:
2375:src/display.c **** 	  } else if (c == ',') {
 5525              		.loc 1 2375 12 view .LVU1734
 5526 02d4 DFF88C90 		ldr	r9, .L710+12
 5527              	.LVL600:
 5528              	.L583:
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5529              		.loc 1 2374 4 is_stmt 1 view .LVU1735
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5530              		.loc 1 2374 7 is_stmt 0 view .LVU1736
 5531 02d8 2E2A     		cmp	r2, #46
 5532 02da 00F02081 		beq	.L699
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5533              		.loc 1 2376 11 is_stmt 1 view .LVU1737
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5534              		.loc 1 2376 14 is_stmt 0 view .LVU1738
 5535 02de 2C2A     		cmp	r2, #44
ARM GAS  /tmp/ccxUm1xs.s 			page 189


 5536 02e0 00F04681 		beq	.L700
2379:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5537              		.loc 1 2379 6 is_stmt 1 view .LVU1739
 5538              	.LVL601:
 5539              	.LBB403:
 5540              	.LBI403:
 415:src/display.c ****   if (res) *res++ = ch;
 5541              		.loc 1 415 14 view .LVU1740
 5542              	.LBB404:
 416:src/display.c ****   else	set_dig(base, ch);
 5543              		.loc 1 416 3 view .LVU1741
 416:src/display.c ****   else	set_dig(base, ch);
 5544              		.loc 1 416 6 is_stmt 0 view .LVU1742
 5545 02e4 002C     		cmp	r4, #0
 5546 02e6 00F05281 		beq	.L581
 416:src/display.c ****   else	set_dig(base, ch);
 5547              		.loc 1 416 12 is_stmt 1 view .LVU1743
 5548              	.LVL602:
 416:src/display.c ****   else	set_dig(base, ch);
 5549              		.loc 1 416 19 is_stmt 0 view .LVU1744
 5550 02ea 04F8012B 		strb	r2, [r4], #1
 5551              	.LVL603:
 5552              	.L582:
 418:src/display.c **** }
 5553              		.loc 1 418 3 is_stmt 1 view .LVU1745
 418:src/display.c **** }
 5554              		.loc 1 418 3 is_stmt 0 view .LVU1746
 5555              	.LBE404:
 5556              	.LBE403:
2380:src/display.c **** 	  }
 5557              		.loc 1 2380 6 is_stmt 1 view .LVU1747
2373:src/display.c **** 	  if (c == '.') {
 5558              		.loc 1 2373 18 is_stmt 0 view .LVU1748
 5559 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5560              	.LVL604:
2380:src/display.c **** 	  }
 5561              		.loc 1 2380 8 view .LVU1749
 5562 02f2 0937     		adds	r7, r7, #9
 5563              	.LVL605:
2373:src/display.c **** 	  if (c == '.') {
 5564              		.loc 1 2373 53 is_stmt 1 view .LVU1750
2373:src/display.c **** 	  if (c == '.') {
 5565              		.loc 1 2373 12 view .LVU1751
2373:src/display.c **** 	  if (c == '.') {
 5566              		.loc 1 2373 2 is_stmt 0 view .LVU1752
 5567 02f4 0AB1     		cbz	r2, .L573
2373:src/display.c **** 	  if (c == '.') {
 5568              		.loc 1 2373 31 discriminator 3 view .LVU1753
 5569 02f6 6B2F     		cmp	r7, #107
 5570 02f8 EEDD     		ble	.L583
 5571              	.LVL606:
 5572              	.L573:
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5573              		.loc 1 2393 2 is_stmt 1 view .LVU1754
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5574              		.loc 1 2393 5 is_stmt 0 view .LVU1755
 5575 02fa BAF1000F 		cmp	r10, #0
ARM GAS  /tmp/ccxUm1xs.s 			page 190


 5576 02fe 40F01F81 		bne	.L701
 5577              	.L584:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5578              		.loc 1 2396 2 is_stmt 1 view .LVU1756
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5579              		.loc 1 2396 5 is_stmt 0 view .LVU1757
 5580 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5581 0306 2E2B     		cmp	r3, #46
 5582 0308 00F02481 		beq	.L702
 5583              	.LVL607:
 5584              	.L585:
2398:src/display.c ****       }
 5585              		.loc 1 2398 2 is_stmt 1 view .LVU1758
2398:src/display.c ****       }
 5586              		.loc 1 2398 18 is_stmt 0 view .LVU1759
 5587 030c 019B     		ldr	r3, [sp, #4]
 5588 030e 1D60     		str	r5, [r3]
 5589              	.LVL608:
 5590              	.L461:
2399:src/display.c **** 
 5591              		.loc 1 2399 7 view .LVU1760
 5592 0310 27B0     		add	sp, sp, #156
 5593              		.cfi_remember_state
 5594              		.cfi_def_cfa_offset 36
 5595              		@ sp needed
 5596 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5597              	.LVL609:
 5598              	.L469:
 5599              		.cfi_restore_state
2098:src/display.c **** 
 5600              		.loc 1 2098 4 is_stmt 1 view .LVU1761
 5601 0316 5946     		mov	r1, fp
 5602 0318 3846     		mov	r0, r7
 5603 031a FFF7FEFF 		bl	decNumberToString
 5604              	.LVL610:
 5605 031e A2E6     		b	.L471
 5606              	.LVL611:
 5607              	.L462:
2056:src/display.c **** 	    if (State2.hms) {
 5608              		.loc 1 2056 4 view .LVU1762
2056:src/display.c **** 	    if (State2.hms) {
 5609              		.loc 1 2056 25 is_stmt 0 view .LVU1763
 5610 0320 0D4B     		ldr	r3, .L710
 5611 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2056:src/display.c **** 	    if (State2.hms) {
 5612              		.loc 1 2056 22 view .LVU1764
 5613 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
2056:src/display.c **** 	    if (State2.hms) {
 5614              		.loc 1 2056 25 view .LVU1765
 5615 0326 01F00201 		and	r1, r1, #2
2056:src/display.c **** 	    if (State2.hms) {
 5616              		.loc 1 2056 22 view .LVU1766
 5617 032a 1143     		orrs	r1, r1, r2
 5618 032c 7FF477AE 		bne	.L465
2057:src/display.c **** 	      set_x_hms(z, res);
 5619              		.loc 1 2057 6 is_stmt 1 view .LVU1767
2057:src/display.c **** 	      set_x_hms(z, res);
ARM GAS  /tmp/ccxUm1xs.s 			page 191


 5620              		.loc 1 2057 10 is_stmt 0 view .LVU1768
 5621 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2057:src/display.c **** 	      set_x_hms(z, res);
 5622              		.loc 1 2057 9 view .LVU1769
 5623 0332 DE07     		lsls	r6, r3, #31
 5624 0334 00F1F282 		bmi	.L703
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5625              		.loc 1 2061 11 is_stmt 1 view .LVU1770
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5626              		.loc 1 2061 15 is_stmt 0 view .LVU1771
 5627 0338 084B     		ldr	r3, .L710+4
 5628 033a 1B68     		ldr	r3, [r3]
 5629 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5630              		.loc 1 2061 14 view .LVU1772
 5631 0340 9806     		lsls	r0, r3, #26
 5632 0342 7FF56CAE 		bpl	.L465
2062:src/display.c **** 		return;
 5633              		.loc 1 2062 8 is_stmt 1 view .LVU1773
2062:src/display.c **** 		return;
 5634              		.loc 1 2062 12 is_stmt 0 view .LVU1774
 5635 0346 2146     		mov	r1, r4
 5636 0348 3846     		mov	r0, r7
 5637 034a FFF7FEFF 		bl	set_x_fract
 5638              	.LVL612:
2062:src/display.c **** 		return;
 5639              		.loc 1 2062 11 view .LVU1775
 5640 034e 0028     		cmp	r0, #0
 5641 0350 3FF465AE 		beq	.L465
 5642 0354 DCE7     		b	.L461
 5643              	.L711:
 5644 0356 00BF     		.align	2
 5645              	.L710:
 5646 0358 00000000 		.word	StateWhileOn
 5647 035c 00000000 		.word	main_ram
 5648 0360 56555555 		.word	1431655766
 5649 0364 00000000 		.word	.LANCHOR1
 5650              	.LVL613:
 5651              	.L690:
2106:src/display.c **** 	  //  ALL mode: fill the display
 5652              		.loc 1 2106 38 discriminator 1 view .LVU1776
 5653 0368 019B     		ldr	r3, [sp, #4]
 5654 036a 1A68     		ldr	r2, [r3]
2106:src/display.c **** 	  //  ALL mode: fill the display
 5655              		.loc 1 2106 35 discriminator 1 view .LVU1777
 5656 036c 089B     		ldr	r3, [sp, #32]
2106:src/display.c **** 	  //  ALL mode: fill the display
 5657              		.loc 1 2106 23 discriminator 1 view .LVU1778
 5658 036e 9A42     		cmp	r2, r3
 5659 0370 11DD     		ble	.L484
2110:src/display.c **** 
 5660              		.loc 1 2110 4 is_stmt 1 view .LVU1779
2112:src/display.c **** 	  int orig_mode = mode;
 5661              		.loc 1 2112 23 is_stmt 0 view .LVU1780
 5662 0372 042D     		cmp	r5, #4
2110:src/display.c **** 
 5663              		.loc 1 2110 7 view .LVU1781
ARM GAS  /tmp/ccxUm1xs.s 			page 192


 5664 0374 0793     		str	r3, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5665              		.loc 1 2112 2 is_stmt 1 view .LVU1782
2112:src/display.c **** 	  int orig_mode = mode;
 5666              		.loc 1 2112 23 is_stmt 0 view .LVU1783
 5667 0376 12D0     		beq	.L485
 5668              	.L704:
2112:src/display.c **** 	  int orig_mode = mode;
 5669              		.loc 1 2112 43 discriminator 2 view .LVU1784
 5670 0378 052D     		cmp	r5, #5
 5671 037a 00F09881 		beq	.L486
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5672              		.loc 1 2042 6 view .LVU1785
 5673 037e 0023     		movs	r3, #0
 5674 0380 0493     		str	r3, [sp, #16]
 5675 0382 89E6     		b	.L590
 5676              	.LVL614:
 5677              	.L691:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5678              		.loc 1 2137 17 is_stmt 1 discriminator 1 view .LVU1786
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5679              		.loc 1 2137 21 is_stmt 0 discriminator 1 view .LVU1787
 5680 0384 4421     		movs	r1, #68
 5681 0386 5846     		mov	r0, fp
 5682              	.LVL615:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5683              		.loc 1 2137 21 discriminator 1 view .LVU1788
 5684 0388 FFF7FEFF 		bl	find_char
 5685              	.LVL616:
2138:src/display.c **** 	else {
 5686              		.loc 1 2138 2 is_stmt 1 discriminator 1 view .LVU1789
2138:src/display.c **** 	else {
 5687              		.loc 1 2138 5 is_stmt 0 discriminator 1 view .LVU1790
 5688 038c 0646     		mov	r6, r0
 5689 038e 0028     		cmp	r0, #0
 5690 0390 3FF49CAE 		beq	.L488
 5691 0394 92E6     		b	.L487
 5692              	.LVL617:
 5693              	.L484:
2108:src/display.c **** 	else
 5694              		.loc 1 2108 4 is_stmt 1 view .LVU1791
2108:src/display.c **** 	else
 5695              		.loc 1 2108 25 is_stmt 0 view .LVU1792
 5696 0396 013A     		subs	r2, r2, #1
2112:src/display.c **** 	  int orig_mode = mode;
 5697              		.loc 1 2112 23 view .LVU1793
 5698 0398 042D     		cmp	r5, #4
2108:src/display.c **** 	else
 5699              		.loc 1 2108 7 view .LVU1794
 5700 039a 0792     		str	r2, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5701              		.loc 1 2112 2 is_stmt 1 view .LVU1795
2112:src/display.c **** 	  int orig_mode = mode;
 5702              		.loc 1 2112 23 is_stmt 0 view .LVU1796
 5703 039c ECD1     		bne	.L704
 5704              	.L485:
 5705              	.LBB406:
ARM GAS  /tmp/ccxUm1xs.s 			page 193


2113:src/display.c **** 
 5706              		.loc 1 2113 4 is_stmt 1 view .LVU1797
 5707              	.LVL618:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5708              		.loc 1 2115 4 view .LVU1798
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5709              		.loc 1 2115 11 is_stmt 0 view .LVU1799
 5710 039e 2A46     		mov	r2, r5
 5711 03a0 07A9     		add	r1, sp, #28
 5712 03a2 3846     		mov	r0, r7
 5713 03a4 FFF7FEFF 		bl	std_round_fix
 5714              	.LVL619:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5715              		.loc 1 2118 16 view .LVU1800
 5716 03a8 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5717              		.loc 1 2115 11 view .LVU1801
 5718 03aa 0546     		mov	r5, r0
 5719              	.LVL620:
2116:src/display.c **** 	    // allow zeros to be trimmed
 5720              		.loc 1 2116 4 is_stmt 1 view .LVU1802
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5721              		.loc 1 2118 6 view .LVU1803
2119:src/display.c **** 	    dd = *display_digits - 1;
 5722              		.loc 1 2119 4 view .LVU1804
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5723              		.loc 1 2118 16 is_stmt 0 view .LVU1805
 5724 03ac 0493     		str	r3, [sp, #16]
 5725 03ae 73E6     		b	.L590
 5726              	.LVL621:
 5727              	.L697:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5728              		.loc 1 2118 16 view .LVU1806
 5729              	.LBE406:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5730              		.loc 1 2198 7 view .LVU1807
 5731 03b0 4846     		mov	r0, r9
 5732              	.LVL622:
2199:src/display.c **** 	    mantissa[0] = '1';
 5733              		.loc 1 2199 41 view .LVU1808
 5734 03b2 4FF03008 		mov	r8, #48
 5735              	.L516:
 5736              	.LVL623:
2199:src/display.c **** 	    mantissa[0] = '1';
 5737              		.loc 1 2199 47 is_stmt 1 discriminator 3 view .LVU1809
2199:src/display.c **** 	    mantissa[0] = '1';
 5738              		.loc 1 2199 36 discriminator 3 view .LVU1810
2199:src/display.c **** 	    mantissa[0] = '1';
 5739              		.loc 1 2199 41 is_stmt 0 discriminator 3 view .LVU1811
 5740 03b6 00F8018B 		strb	r8, [r0], #1
 5741              	.LVL624:
2199:src/display.c **** 	    mantissa[0] = '1';
 5742              		.loc 1 2199 25 is_stmt 1 discriminator 3 view .LVU1812
2199:src/display.c **** 	    mantissa[0] = '1';
 5743              		.loc 1 2199 6 is_stmt 0 discriminator 3 view .LVU1813
 5744 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5745 03be BCF1390F 		cmp	ip, #57
ARM GAS  /tmp/ccxUm1xs.s 			page 194


 5746 03c2 F8D0     		beq	.L516
 5747              	.LVL625:
 5748              	.L589:
2200:src/display.c **** 	    exp++;
 5749              		.loc 1 2200 6 is_stmt 1 view .LVU1814
2200:src/display.c **** 	    exp++;
 5750              		.loc 1 2200 18 is_stmt 0 view .LVU1815
 5751 03c4 3120     		movs	r0, #49
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5752              		.loc 1 2202 9 view .LVU1816
 5753 03c6 012D     		cmp	r5, #1
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5754              		.loc 1 2201 9 view .LVU1817
 5755 03c8 06F10106 		add	r6, r6, #1
 5756              	.LVL626:
2200:src/display.c **** 	    exp++;
 5757              		.loc 1 2200 18 view .LVU1818
 5758 03cc 8DF85800 		strb	r0, [sp, #88]
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5759              		.loc 1 2201 6 is_stmt 1 view .LVU1819
 5760              	.LVL627:
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5761              		.loc 1 2202 6 view .LVU1820
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5762              		.loc 1 2202 9 is_stmt 0 view .LVU1821
 5763 03d0 7FF4F5AE 		bne	.L685
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5764              		.loc 1 2202 27 discriminator 1 view .LVU1822
 5765 03d4 0298     		ldr	r0, [sp, #8]
 5766 03d6 8642     		cmp	r6, r0
 5767 03d8 C0F2DE80 		blt	.L518
2203:src/display.c **** 	      extra_digits = 0;
 5768              		.loc 1 2203 8 is_stmt 1 view .LVU1823
2203:src/display.c **** 	      extra_digits = 0;
 5769              		.loc 1 2203 28 is_stmt 0 view .LVU1824
 5770 03dc C04B     		ldr	r3, .L712
 5771              	.LVL628:
2203:src/display.c **** 	      extra_digits = 0;
 5772              		.loc 1 2203 28 view .LVU1825
 5773 03de 1B68     		ldr	r3, [r3]
 5774 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2203:src/display.c **** 	      extra_digits = 0;
 5775              		.loc 1 2203 37 view .LVU1826
 5776 03e4 D906     		lsls	r1, r3, #27
 5777              	.LVL629:
2203:src/display.c **** 	      extra_digits = 0;
 5778              		.loc 1 2203 37 view .LVU1827
 5779 03e6 40F1E582 		bpl	.L705
 5780              	.LVL630:
2214:src/display.c **** 
 5781              		.loc 1 2214 2 is_stmt 1 view .LVU1828
 5782 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 5783              		.loc 1 2214 9 is_stmt 0 view .LVU1829
 5784 03ee 09EB0E03 		add	r3, r9, lr
 5785              	.LVL631:
2214:src/display.c **** 
ARM GAS  /tmp/ccxUm1xs.s 			page 195


 5786              		.loc 1 2214 45 is_stmt 1 view .LVU1830
2203:src/display.c **** 	      extra_digits = 0;
 5787              		.loc 1 2203 37 is_stmt 0 view .LVU1831
 5788 03f2 0325     		movs	r5, #3
2214:src/display.c **** 
 5789              		.loc 1 2214 2 view .LVU1832
 5790 03f4 0029     		cmp	r1, #0
 5791 03f6 7FF4E5AE 		bne	.L587
 5792              	.LVL632:
 5793              	.L524:
2316:src/display.c **** 	  case -1:
 5794              		.loc 1 2316 4 is_stmt 1 view .LVU1833
2316:src/display.c **** 	  case -1:
 5795              		.loc 1 2316 16 is_stmt 0 view .LVU1834
 5796 03fa BA4B     		ldr	r3, .L712+4
 5797 03fc 83FB0613 		smull	r1, r3, r3, r6
 5798 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5799 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5800 0408 F31A     		subs	r3, r6, r3
 5801 040a 0233     		adds	r3, r3, #2
 5802 040c 042B     		cmp	r3, #4
 5803 040e 4FD8     		bhi	.L559
 5804 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5805              	.L561:
 5806 0414 2C02     		.2byte	(.L562-.L561)/2
 5807 0416 1A02     		.2byte	(.L560-.L561)/2
 5808 0418 4E00     		.2byte	(.L559-.L561)/2
 5809 041a 2C02     		.2byte	(.L562-.L561)/2
 5810 041c 1A02     		.2byte	(.L560-.L561)/2
 5811              	.LVL633:
 5812              		.p2align 1
 5813              	.L530:
2225:src/display.c **** 	    case -1:
 5814              		.loc 1 2225 6 is_stmt 1 view .LVU1835
2225:src/display.c **** 	    case -1:
 5815              		.loc 1 2225 32 is_stmt 0 view .LVU1836
 5816 041e B048     		ldr	r0, .L712
2225:src/display.c **** 	    case -1:
 5817              		.loc 1 2225 19 view .LVU1837
 5818 0420 B049     		ldr	r1, .L712+4
2225:src/display.c **** 	    case -1:
 5819              		.loc 1 2225 32 view .LVU1838
 5820 0422 0068     		ldr	r0, [r0]
2225:src/display.c **** 	    case -1:
 5821              		.loc 1 2225 19 view .LVU1839
 5822 0424 81FB0651 		smull	r5, r1, r1, r6
2225:src/display.c **** 	    case -1:
 5823              		.loc 1 2225 32 view .LVU1840
 5824 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2225:src/display.c **** 	    case -1:
 5825              		.loc 1 2225 19 view .LVU1841
 5826 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5827 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5828 0434 711A     		subs	r1, r6, r1
2225:src/display.c **** 	    case -1:
 5829              		.loc 1 2225 32 view .LVU1842
 5830 0436 C0F30010 		ubfx	r0, r0, #4, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 196


2225:src/display.c **** 	    case -1:
 5831              		.loc 1 2225 24 view .LVU1843
 5832 043a 01FB00F1 		mul	r1, r1, r0
 5833 043e 0231     		adds	r1, r1, #2
 5834 0440 0429     		cmp	r1, #4
 5835 0442 00F27182 		bhi	.L604
 5836 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5837              	.L534:
 5838 044a 4B02     		.2byte	(.L535-.L534)/2
 5839 044c 2002     		.2byte	(.L533-.L534)/2
 5840 044e 6F02     		.2byte	(.L604-.L534)/2
 5841 0450 4B02     		.2byte	(.L535-.L534)/2
 5842 0452 2002     		.2byte	(.L533-.L534)/2
 5843              	.LVL634:
 5844              		.p2align 1
 5845              	.L504:
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5846              		.loc 1 2181 4 is_stmt 1 view .LVU1844
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5847              		.loc 1 2181 7 is_stmt 0 view .LVU1845
 5848 0454 B342     		cmp	r3, r6
 5849 0456 03DD     		ble	.L507
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5850              		.loc 1 2181 45 discriminator 1 view .LVU1846
 5851 0458 5342     		rsbs	r3, r2, #0
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5852              		.loc 1 2181 36 discriminator 1 view .LVU1847
 5853 045a B342     		cmp	r3, r6
 5854 045c 40F30A82 		ble	.L508
 5855              	.L507:
2182:src/display.c **** 	  else {
 5856              		.loc 1 2182 6 is_stmt 1 view .LVU1848
2182:src/display.c **** 	  else {
 5857              		.loc 1 2182 26 is_stmt 0 view .LVU1849
 5858 0460 9F4B     		ldr	r3, .L712
 5859 0462 1B68     		ldr	r3, [r3]
 5860 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2182:src/display.c **** 	  else {
 5861              		.loc 1 2182 35 view .LVU1850
 5862 0468 13F0100F 		tst	r3, #16
 5863 046c 14BF     		ite	ne
 5864 046e 0325     		movne	r5, #3
 5865              	.LVL635:
2182:src/display.c **** 	  else {
 5866              		.loc 1 2182 35 view .LVU1851
 5867 0470 0225     		moveq	r5, #2
 5868 0472 75E6     		b	.L686
 5869              	.LVL636:
 5870              	.L695:
2182:src/display.c **** 	  else {
 5871              		.loc 1 2182 35 view .LVU1852
 5872 0474 013E     		subs	r6, r6, #1
 5873 0476 08EB0602 		add	r2, r8, r6
 5874              	.L497:
2161:src/display.c **** 	    exp--;
 5875              		.loc 1 2161 4 is_stmt 1 discriminator 1 view .LVU1853
2162:src/display.c **** 	  while (*++q == '0');
ARM GAS  /tmp/ccxUm1xs.s 			page 197


 5876              		.loc 1 2162 6 discriminator 1 view .LVU1854
 5877 047a A2EB0806 		sub	r6, r2, r8
 5878              	.LVL637:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5879              		.loc 1 2163 10 discriminator 1 view .LVU1855
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5880              		.loc 1 2163 11 is_stmt 0 discriminator 1 view .LVU1856
 5881 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5882              	.LVL638:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5883              		.loc 1 2163 4 discriminator 1 view .LVU1857
 5884 0482 302B     		cmp	r3, #48
 5885 0484 F9D0     		beq	.L497
2164:src/display.c **** 	    *p++ = *q++;
 5886              		.loc 1 2164 10 is_stmt 1 view .LVU1858
 5887 0486 A3F13002 		sub	r2, r3, #48
 5888 048a 092A     		cmp	r2, #9
 5889 048c 3FF661AE 		bhi	.L498
2027:src/display.c **** 	char *r;
 5890              		.loc 1 2027 8 is_stmt 0 view .LVU1859
 5891 0490 4A46     		mov	r2, r9
 5892              	.LVL639:
 5893              	.L499:
2165:src/display.c **** 	} else {
 5894              		.loc 1 2165 6 is_stmt 1 view .LVU1860
2165:src/display.c **** 	} else {
 5895              		.loc 1 2165 11 is_stmt 0 view .LVU1861
 5896 0492 02F8013B 		strb	r3, [r2], #1
 5897              	.LVL640:
2164:src/display.c **** 	    *p++ = *q++;
 5898              		.loc 1 2164 10 is_stmt 1 view .LVU1862
2164:src/display.c **** 	    *p++ = *q++;
 5899              		.loc 1 2164 11 is_stmt 0 view .LVU1863
 5900 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2164:src/display.c **** 	    *p++ = *q++;
 5901              		.loc 1 2164 10 view .LVU1864
 5902 049a A3F13001 		sub	r1, r3, #48
 5903 049e 0929     		cmp	r1, #9
 5904 04a0 F7D9     		bls	.L499
 5905 04a2 56E6     		b	.L498
 5906              	.LVL641:
 5907              	.L693:
2155:src/display.c **** 	  q++;
 5908              		.loc 1 2155 4 is_stmt 1 view .LVU1865
2156:src/display.c **** 	} else if (*q == '+')
 5909              		.loc 1 2156 4 view .LVU1866
2155:src/display.c **** 	  q++;
 5910              		.loc 1 2155 13 is_stmt 0 view .LVU1867
 5911 04a4 0122     		movs	r2, #1
 5912 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5913 04aa 0392     		str	r2, [sp, #12]
2156:src/display.c **** 	} else if (*q == '+')
 5914              		.loc 1 2156 5 view .LVU1868
 5915 04ac 9044     		add	r8, r8, r2
 5916              	.LVL642:
2156:src/display.c **** 	} else if (*q == '+')
 5917              		.loc 1 2156 5 view .LVU1869
ARM GAS  /tmp/ccxUm1xs.s 			page 198


 5918 04ae 23E6     		b	.L493
 5919              	.LVL643:
 5920              	.L559:
2156:src/display.c **** 	} else if (*q == '+')
 5921              		.loc 1 2156 5 view .LVU1870
 5922 04b0 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 5923              		.loc 1 2316 16 view .LVU1871
 5924 04b2 0125     		movs	r5, #1
2021:src/display.c **** 	int odig = 0;
 5925              		.loc 1 2021 15 view .LVU1872
 5926 04b4 5946     		mov	r1, fp
 5927              	.LVL644:
 5928              	.L527:
2330:src/display.c **** 	  };
 5929              		.loc 1 2330 6 is_stmt 1 view .LVU1873
2331:src/display.c **** 	  // Falling through
 5930              		.loc 1 2331 5 view .LVU1874
2335:src/display.c **** 	  odig++;
 5931              		.loc 1 2335 4 view .LVU1875
2335:src/display.c **** 	  odig++;
 5932              		.loc 1 2335 15 is_stmt 0 view .LVU1876
 5933 04b6 4B46     		mov	r3, r9
 5934              	.LVL645:
2335:src/display.c **** 	  odig++;
 5935              		.loc 1 2335 11 view .LVU1877
 5936 04b8 8846     		mov	r8, r1
 5937 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5938              	.LVL646:
2335:src/display.c **** 	  odig++;
 5939              		.loc 1 2335 11 view .LVU1878
 5940 04be 08F8020B 		strb	r0, [r8], #2
2336:src/display.c **** 	  *obp++ = '.';
 5941              		.loc 1 2336 4 is_stmt 1 view .LVU1879
2337:src/display.c **** 	  dd--;
 5942              		.loc 1 2337 4 view .LVU1880
 5943              	.LVL647:
2337:src/display.c **** 	  dd--;
 5944              		.loc 1 2337 11 is_stmt 0 view .LVU1881
 5945 04c2 4FF02E0C 		mov	ip, #46
2339:src/display.c **** 	    *obp++ = *p++;
 5946              		.loc 1 2339 13 view .LVU1882
 5947 04c6 901E     		subs	r0, r2, #2
2339:src/display.c **** 	    *obp++ = *p++;
 5948              		.loc 1 2339 10 view .LVU1883
 5949 04c8 002A     		cmp	r2, #0
2337:src/display.c **** 	  dd--;
 5950              		.loc 1 2337 11 view .LVU1884
 5951 04ca 81F801C0 		strb	ip, [r1, #1]
2338:src/display.c **** 	  while (dd-- >= 0) {
 5952              		.loc 1 2338 4 is_stmt 1 view .LVU1885
2339:src/display.c **** 	    *obp++ = *p++;
 5953              		.loc 1 2339 4 view .LVU1886
2339:src/display.c **** 	    *obp++ = *p++;
 5954              		.loc 1 2339 10 view .LVU1887
2339:src/display.c **** 	    *obp++ = *p++;
 5955              		.loc 1 2339 13 is_stmt 0 view .LVU1888
ARM GAS  /tmp/ccxUm1xs.s 			page 199


 5956 04ce 0790     		str	r0, [sp, #28]
2339:src/display.c **** 	    *obp++ = *p++;
 5957              		.loc 1 2339 10 view .LVU1889
 5958 04d0 40F32D82 		ble	.L605
2339:src/display.c **** 	    *obp++ = *p++;
 5959              		.loc 1 2339 10 view .LVU1890
 5960 04d4 501C     		adds	r0, r2, #1
 5961 04d6 0131     		adds	r1, r1, #1
 5962 04d8 8144     		add	r9, r9, r0
 5963              	.LVL648:
 5964              	.L565:
2340:src/display.c **** 	    odig++;
 5965              		.loc 1 2340 6 is_stmt 1 view .LVU1891
2340:src/display.c **** 	    odig++;
 5966              		.loc 1 2340 13 is_stmt 0 view .LVU1892
 5967 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5968              	.LVL649:
2340:src/display.c **** 	    odig++;
 5969              		.loc 1 2340 13 view .LVU1893
 5970 04de 01F8010F 		strb	r0, [r1, #1]!
2341:src/display.c **** 	  }
 5971              		.loc 1 2341 6 is_stmt 1 view .LVU1894
2339:src/display.c **** 	    *obp++ = *p++;
 5972              		.loc 1 2339 10 view .LVU1895
 5973 04e2 4B45     		cmp	r3, r9
 5974 04e4 F9D1     		bne	.L565
 5975 04e6 6FF00103 		mvn	r3, #1
 5976              	.LVL650:
2339:src/display.c **** 	    *obp++ = *p++;
 5977              		.loc 1 2339 10 is_stmt 0 view .LVU1896
 5978 04ea 9044     		add	r8, r8, r2
 5979 04ec 1544     		add	r5, r5, r2
 5980 04ee 0793     		str	r3, [sp, #28]
2343:src/display.c **** 	}
 5981              		.loc 1 2343 13 view .LVU1897
 5982 04f0 4FF0010A 		mov	r10, #1
 5983              	.L537:
 5984              	.LVL651:
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5985              		.loc 1 2346 2 is_stmt 1 view .LVU1898
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5986              		.loc 1 2346 5 is_stmt 0 view .LVU1899
 5987 04f4 049B     		ldr	r3, [sp, #16]
 5988 04f6 002B     		cmp	r3, #0
 5989 04f8 3FF4C9AE 		beq	.L566
2347:src/display.c **** 	    obp--;
 5990              		.loc 1 2347 10 is_stmt 1 view .LVU1900
 5991 04fc D845     		cmp	r8, fp
 5992 04fe 7FF6C6AE 		bls	.L566
 5993 0502 4346     		mov	r3, r8
 5994 0504 04E0     		b	.L567
 5995              	.LVL652:
 5996              	.L568:
2347:src/display.c **** 	    obp--;
 5997              		.loc 1 2347 10 is_stmt 0 view .LVU1901
 5998 0506 9B45     		cmp	fp, r3
2349:src/display.c **** 	  }
ARM GAS  /tmp/ccxUm1xs.s 			page 200


 5999              		.loc 1 2349 10 view .LVU1902
 6000 0508 05F1FF35 		add	r5, r5, #-1
 6001              	.LVL653:
2347:src/display.c **** 	    obp--;
 6002              		.loc 1 2347 10 is_stmt 1 view .LVU1903
 6003 050c 3FF4BEAE 		beq	.L607
 6004              	.LVL654:
 6005              	.L567:
2348:src/display.c **** 	    odig--;
 6006              		.loc 1 2348 6 discriminator 1 view .LVU1904
 6007 0510 9846     		mov	r8, r3
 6008              	.LVL655:
2348:src/display.c **** 	    odig--;
 6009              		.loc 1 2348 6 is_stmt 0 discriminator 1 view .LVU1905
 6010 0512 013B     		subs	r3, r3, #1
 6011              	.LVL656:
2349:src/display.c **** 	  }
 6012              		.loc 1 2349 6 is_stmt 1 discriminator 1 view .LVU1906
2347:src/display.c **** 	    obp--;
 6013              		.loc 1 2347 19 is_stmt 0 discriminator 1 view .LVU1907
 6014 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6015 0518 302A     		cmp	r2, #48
 6016 051a F4D0     		beq	.L568
2347:src/display.c **** 	    obp--;
 6017              		.loc 1 2347 19 discriminator 1 view .LVU1908
 6018 051c B7E6     		b	.L566
 6019              	.LVL657:
 6020              	.L699:
2375:src/display.c **** 	  } else if (c == ',') {
 6021              		.loc 1 2375 6 is_stmt 1 view .LVU1909
2375:src/display.c **** 	  } else if (c == ',') {
 6022              		.loc 1 2375 12 is_stmt 0 view .LVU1910
 6023 051e 2246     		mov	r2, r4
 6024              	.LVL658:
2375:src/display.c **** 	  } else if (c == ',') {
 6025              		.loc 1 2375 12 view .LVU1911
 6026 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6027 0524 A7F10900 		sub	r0, r7, #9
 6028 0528 FFF7FEFF 		bl	set_decimal
 6029              	.LVL659:
 6030 052c 0446     		mov	r4, r0
 6031              	.LVL660:
 6032              	.L577:
2373:src/display.c **** 	  if (c == '.') {
 6033              		.loc 1 2373 53 is_stmt 1 view .LVU1912
2373:src/display.c **** 	  if (c == '.') {
 6034              		.loc 1 2373 12 view .LVU1913
2373:src/display.c **** 	  if (c == '.') {
 6035              		.loc 1 2373 18 is_stmt 0 view .LVU1914
 6036 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6037              	.LVL661:
2373:src/display.c **** 	  if (c == '.') {
 6038              		.loc 1 2373 2 view .LVU1915
 6039 0532 002A     		cmp	r2, #0
 6040 0534 7FF4D0AE 		bne	.L583
2393:src/display.c **** 	  set_exp(exp, 0, res);
 6041              		.loc 1 2393 2 is_stmt 1 view .LVU1916
ARM GAS  /tmp/ccxUm1xs.s 			page 201


2393:src/display.c **** 	  set_exp(exp, 0, res);
 6042              		.loc 1 2393 5 is_stmt 0 view .LVU1917
 6043 0538 BAF1000F 		cmp	r10, #0
 6044 053c 3FF4E1AE 		beq	.L584
 6045              	.LVL662:
 6046              	.L701:
2394:src/display.c **** #endif
 6047              		.loc 1 2394 4 is_stmt 1 view .LVU1918
 6048 0540 3046     		mov	r0, r6
 6049 0542 2246     		mov	r2, r4
 6050              	.LVL663:
2394:src/display.c **** #endif
 6051              		.loc 1 2394 4 is_stmt 0 view .LVU1919
 6052 0544 0021     		movs	r1, #0
 6053 0546 FFF7FEFF 		bl	set_exp
 6054              	.LVL664:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6055              		.loc 1 2396 2 is_stmt 1 view .LVU1920
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6056              		.loc 1 2396 5 is_stmt 0 view .LVU1921
 6057 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6058 054e 2E2B     		cmp	r3, #46
 6059 0550 7FF4DCAE 		bne	.L585
 6060              	.L702:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6061              		.loc 1 2396 21 discriminator 1 view .LVU1922
 6062 0554 002C     		cmp	r4, #0
 6063 0556 7FF4D9AE 		bne	.L585
2397:src/display.c **** 	*display_digits = odig;
 6064              		.loc 1 2397 4 is_stmt 1 view .LVU1923
2397:src/display.c **** 	*display_digits = odig;
 6065              		.loc 1 2397 33 is_stmt 0 view .LVU1924
 6066 055a 019B     		ldr	r3, [sp, #4]
 6067 055c 1868     		ldr	r0, [r3]
2397:src/display.c **** 	*display_digits = odig;
 6068              		.loc 1 2397 4 view .LVU1925
 6069 055e 624B     		ldr	r3, .L712+8
2397:src/display.c **** 	*display_digits = odig;
 6070              		.loc 1 2397 33 view .LVU1926
 6071 0560 0138     		subs	r0, r0, #1
2397:src/display.c **** 	*display_digits = odig;
 6072              		.loc 1 2397 4 view .LVU1927
 6073 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6074 0564 2246     		mov	r2, r4
 6075 0566 00EBC000 		add	r0, r0, r0, lsl #3
 6076 056a FFF7FEFF 		bl	set_decimal
 6077              	.LVL665:
 6078 056e CDE6     		b	.L585
 6079              	.LVL666:
 6080              	.L700:
2377:src/display.c **** 	  } else {
 6081              		.loc 1 2377 6 is_stmt 1 view .LVU1928
2377:src/display.c **** 	  } else {
 6082              		.loc 1 2377 12 is_stmt 0 view .LVU1929
 6083 0570 5E4B     		ldr	r3, .L712+12
 6084 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6085              	.LVL667:
ARM GAS  /tmp/ccxUm1xs.s 			page 202


 6086              	.LBB407:
 6087              	.LBI407:
 375:src/display.c ****   if (sep == SEP_NONE)
 6088              		.loc 1 375 14 is_stmt 1 view .LVU1930
 6089              	.LBB408:
 376:src/display.c ****     return res;
 6090              		.loc 1 376 3 view .LVU1931
 376:src/display.c ****     return res;
 6091              		.loc 1 376 6 is_stmt 0 view .LVU1932
 6092 0574 0029     		cmp	r1, #0
 6093 0576 DAD0     		beq	.L577
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6094              		.loc 1 378 3 is_stmt 1 view .LVU1933
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6095              		.loc 1 378 6 is_stmt 0 view .LVU1934
 6096 0578 002C     		cmp	r4, #0
 6097 057a 00F0DB81 		beq	.L579
 379:src/display.c ****     else *res++ = '.';
 6098              		.loc 1 379 5 is_stmt 1 view .LVU1935
 379:src/display.c ****     else *res++ = '.';
 6099              		.loc 1 379 8 is_stmt 0 view .LVU1936
 6100 057e 0129     		cmp	r1, #1
 379:src/display.c ****     else *res++ = '.';
 6101              		.loc 1 379 27 is_stmt 1 view .LVU1937
 6102              	.LVL668:
 380:src/display.c ****   } else {
 6103              		.loc 1 380 17 is_stmt 0 view .LVU1938
 6104 0580 16BF     		itet	ne
 6105 0582 2E23     		movne	r3, #46
 379:src/display.c ****     else *res++ = '.';
 6106              		.loc 1 379 34 view .LVU1939
 6107 0584 04F8012B 		strbeq	r2, [r4], #1
 6108              	.LVL669:
 380:src/display.c ****   } else {
 6109              		.loc 1 380 10 is_stmt 1 view .LVU1940
 380:src/display.c ****   } else {
 6110              		.loc 1 380 17 is_stmt 0 view .LVU1941
 6111 0588 04F8013B 		strbne	r3, [r4], #1
 6112              	.LVL670:
 380:src/display.c ****   } else {
 6113              		.loc 1 380 17 view .LVU1942
 6114 058c CFE7     		b	.L577
 6115              	.LVL671:
 6116              	.L581:
 380:src/display.c ****   } else {
 6117              		.loc 1 380 17 view .LVU1943
 6118              	.LBE408:
 6119              	.LBE407:
 6120              	.LBB410:
 6121              	.LBB405:
 417:src/display.c ****   return res;
 6122              		.loc 1 417 8 is_stmt 1 view .LVU1944
 6123 058e 1146     		mov	r1, r2
 6124 0590 3846     		mov	r0, r7
 6125 0592 FFF7FEFF 		bl	set_dig
 6126              	.LVL672:
 417:src/display.c ****   return res;
ARM GAS  /tmp/ccxUm1xs.s 			page 203


 6127              		.loc 1 417 8 is_stmt 0 view .LVU1945
 6128 0596 AAE6     		b	.L582
 6129              	.LVL673:
 6130              	.L518:
 417:src/display.c ****   return res;
 6131              		.loc 1 417 8 view .LVU1946
 6132              	.LBE405:
 6133              	.LBE410:
2214:src/display.c **** 
 6134              		.loc 1 2214 2 is_stmt 1 view .LVU1947
2214:src/display.c **** 
 6135              		.loc 1 2214 45 view .LVU1948
2214:src/display.c **** 
 6136              		.loc 1 2214 2 is_stmt 0 view .LVU1949
 6137 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6138 059c 0029     		cmp	r1, #0
 6139 059e 7FF411AE 		bne	.L587
 6140              	.LVL674:
 6141              	.L525:
2279:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6142              		.loc 1 2279 4 is_stmt 1 view .LVU1950
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6143              		.loc 1 2280 4 view .LVU1951
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6144              		.loc 1 2280 7 is_stmt 0 view .LVU1952
 6145 05a2 002E     		cmp	r6, #0
 6146 05a4 C0F22181 		blt	.L548
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6147              		.loc 1 2280 7 view .LVU1953
 6148 05a8 731C     		adds	r3, r6, #1
2282:src/display.c **** 		*obp++ = ',';
 6149              		.loc 1 2282 31 view .LVU1954
 6150 05aa DFF838E1 		ldr	lr, .L712+4
 6151 05ae 0593     		str	r3, [sp, #20]
 6152 05b0 09EB030C 		add	ip, r9, r3
2216:src/display.c **** 	switch (mode) {
 6153              		.loc 1 2216 4 view .LVU1955
 6154 05b4 4D46     		mov	r5, r9
2021:src/display.c **** 	int odig = 0;
 6155              		.loc 1 2021 15 view .LVU1956
 6156 05b6 5846     		mov	r0, fp
 6157 05b8 05E0     		b	.L549
 6158              	.LVL675:
 6159              	.L552:
2283:src/display.c **** 	      *obp++ = *p++;
 6160              		.loc 1 2283 3 is_stmt 1 view .LVU1957
2282:src/display.c **** 		*obp++ = ',';
 6161              		.loc 1 2282 18 is_stmt 0 view .LVU1958
 6162 05ba 0229     		cmp	r1, #2
2283:src/display.c **** 	      *obp++ = *p++;
 6163              		.loc 1 2283 10 view .LVU1959
 6164 05bc 05BF     		ittet	eq
 6165 05be 2C23     		moveq	r3, #44
 6166 05c0 4370     		strbeq	r3, [r0, #1]
2284:src/display.c **** 	      odig++;
 6167              		.loc 1 2284 12 view .LVU1960
 6168 05c2 0130     		addne	r0, r0, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 204


 6169              	.LVL676:
2283:src/display.c **** 	      *obp++ = *p++;
 6170              		.loc 1 2283 7 view .LVU1961
 6171 05c4 0230     		addeq	r0, r0, #2
 6172              	.LVL677:
 6173              	.L549:
2284:src/display.c **** 	      odig++;
 6174              		.loc 1 2284 8 is_stmt 1 discriminator 2 view .LVU1962
2284:src/display.c **** 	      odig++;
 6175              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1963
 6176 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6177              	.LVL678:
2282:src/display.c **** 		*obp++ = ',';
 6178              		.loc 1 2282 8 is_stmt 1 discriminator 2 view .LVU1964
2284:src/display.c **** 	      odig++;
 6179              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1965
 6180 05ca 0370     		strb	r3, [r0]
2285:src/display.c **** 	    }
 6181              		.loc 1 2285 8 is_stmt 1 discriminator 2 view .LVU1966
 6182              	.LVL679:
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6183              		.loc 1 2281 24 discriminator 2 view .LVU1967
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6184              		.loc 1 2281 16 discriminator 2 view .LVU1968
2282:src/display.c **** 		*obp++ = ',';
 6185              		.loc 1 2282 31 is_stmt 0 discriminator 2 view .LVU1969
 6186 05cc A9EB0503 		sub	r3, r9, r5
 6187 05d0 3344     		add	r3, r3, r6
 6188 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6189 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6190 05da 01EB4101 		add	r1, r1, r1, lsl #1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6191              		.loc 1 2281 6 discriminator 2 view .LVU1970
 6192 05de AC45     		cmp	ip, r5
2282:src/display.c **** 		*obp++ = ',';
 6193              		.loc 1 2282 31 discriminator 2 view .LVU1971
 6194 05e0 A3EB0101 		sub	r1, r3, r1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6195              		.loc 1 2281 6 discriminator 2 view .LVU1972
 6196 05e4 E9D1     		bne	.L552
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6197              		.loc 1 2287 13 view .LVU1973
 6198 05e6 2E23     		movs	r3, #46
2288:src/display.c **** 	      *obp++ = *p++;
 6199              		.loc 1 2288 6 view .LVU1974
 6200 05e8 002A     		cmp	r2, #0
 6201 05ea 059D     		ldr	r5, [sp, #20]
 6202              	.LVL680:
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6203              		.loc 1 2287 6 is_stmt 1 view .LVU1975
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6204              		.loc 1 2287 13 is_stmt 0 view .LVU1976
 6205 05ec 4370     		strb	r3, [r0, #1]
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6206              		.loc 1 2287 10 view .LVU1977
 6207 05ee 00F10208 		add	r8, r0, #2
 6208              	.LVL681:
ARM GAS  /tmp/ccxUm1xs.s 			page 205


2288:src/display.c **** 	      *obp++ = *p++;
 6209              		.loc 1 2288 6 is_stmt 1 view .LVU1978
2288:src/display.c **** 	      *obp++ = *p++;
 6210              		.loc 1 2288 16 view .LVU1979
2288:src/display.c **** 	      *obp++ = *p++;
 6211              		.loc 1 2288 6 is_stmt 0 view .LVU1980
 6212 05f2 7FF77FAF 		ble	.L537
 6213 05f6 0130     		adds	r0, r0, #1
 6214 05f8 0CEB0201 		add	r1, ip, r2
 6215              	.LVL682:
 6216              	.L553:
2289:src/display.c **** 	      odig++;
 6217              		.loc 1 2289 8 is_stmt 1 discriminator 4 view .LVU1981
2289:src/display.c **** 	      odig++;
 6218              		.loc 1 2289 15 is_stmt 0 discriminator 4 view .LVU1982
 6219 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6220              	.LVL683:
2289:src/display.c **** 	      odig++;
 6221              		.loc 1 2289 15 discriminator 4 view .LVU1983
 6222 0600 00F8013F 		strb	r3, [r0, #1]!
2290:src/display.c **** 	    }
 6223              		.loc 1 2290 8 is_stmt 1 discriminator 4 view .LVU1984
2288:src/display.c **** 	      *obp++ = *p++;
 6224              		.loc 1 2288 43 discriminator 4 view .LVU1985
2288:src/display.c **** 	      *obp++ = *p++;
 6225              		.loc 1 2288 16 discriminator 4 view .LVU1986
2288:src/display.c **** 	      *obp++ = *p++;
 6226              		.loc 1 2288 6 is_stmt 0 discriminator 4 view .LVU1987
 6227 0604 8C45     		cmp	ip, r1
 6228 0606 F9D1     		bne	.L553
 6229 0608 059B     		ldr	r3, [sp, #20]
 6230 060a 1344     		add	r3, r3, r2
 6231 060c 9044     		add	r8, r8, r2
 6232              	.LVL684:
2288:src/display.c **** 	      *obp++ = *p++;
 6233              		.loc 1 2288 6 discriminator 4 view .LVU1988
 6234 060e 1D46     		mov	r5, r3
 6235 0610 70E7     		b	.L537
 6236              	.LVL685:
 6237              	.L687:
2084:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6238              		.loc 1 2084 4 is_stmt 1 view .LVU1989
 6239 0612 374A     		ldr	r2, .L712+16
 6240 0614 3946     		mov	r1, r7
 6241 0616 3846     		mov	r0, r7
 6242 0618 FFF7FEFF 		bl	decNumberNormalize
 6243              	.LVL686:
2085:src/display.c **** 	  z->exponent = 0;
 6244              		.loc 1 2085 4 view .LVU1990
2085:src/display.c **** 	  z->exponent = 0;
 6245              		.loc 1 2085 22 is_stmt 0 view .LVU1991
 6246 061c D7E90023 		ldrd	r2, r3, [r7]
 6247 0620 03EB0208 		add	r8, r3, r2
2086:src/display.c **** 	}
 6248              		.loc 1 2086 16 view .LVU1992
 6249 0624 C7F804A0 		str	r10, [r7, #4]
2085:src/display.c **** 	  z->exponent = 0;
ARM GAS  /tmp/ccxUm1xs.s 			page 206


 6250              		.loc 1 2085 8 view .LVU1993
 6251 0628 08F1FF38 		add	r8, r8, #-1
 6252              	.LVL687:
2086:src/display.c **** 	}
 6253              		.loc 1 2086 4 is_stmt 1 view .LVU1994
 6254 062c 06E5     		b	.L468
 6255              	.LVL688:
 6256              	.L696:
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6257              		.loc 1 2174 6 view .LVU1995
2175:src/display.c **** 	      *p++ = *q++;
 6258              		.loc 1 2175 13 is_stmt 0 view .LVU1996
 6259 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6260              		.loc 1 2175 12 view .LVU1997
 6261 0632 A3F13002 		sub	r2, r3, #48
 6262 0636 092A     		cmp	r2, #9
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6263              		.loc 1 2174 7 view .LVU1998
 6264 0638 08F10108 		add	r8, r8, #1
 6265              	.LVL689:
2175:src/display.c **** 	      *p++ = *q++;
 6266              		.loc 1 2175 6 is_stmt 1 view .LVU1999
2175:src/display.c **** 	      *p++ = *q++;
 6267              		.loc 1 2175 12 view .LVU2000
 6268 063c 3FF689AD 		bhi	.L498
 6269              	.LVL690:
 6270              	.L503:
2176:src/display.c **** 	  }
 6271              		.loc 1 2176 8 view .LVU2001
2176:src/display.c **** 	  }
 6272              		.loc 1 2176 13 is_stmt 0 view .LVU2002
 6273 0640 01F8013B 		strb	r3, [r1], #1
 6274              	.LVL691:
2175:src/display.c **** 	      *p++ = *q++;
 6275              		.loc 1 2175 12 is_stmt 1 view .LVU2003
2175:src/display.c **** 	      *p++ = *q++;
 6276              		.loc 1 2175 13 is_stmt 0 view .LVU2004
 6277 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6278              		.loc 1 2175 12 view .LVU2005
 6279 0648 A3F13002 		sub	r2, r3, #48
 6280 064c 092A     		cmp	r2, #9
 6281 064e F7D9     		bls	.L503
 6282 0650 7FE5     		b	.L498
 6283              	.LVL692:
 6284              	.L694:
2158:src/display.c **** 	for (; *q == '0'; q++);
 6285              		.loc 1 2158 4 is_stmt 1 view .LVU2006
2041:src/display.c **** 	int trimzeros = 0;
 6286              		.loc 1 2041 6 is_stmt 0 view .LVU2007
 6287 0652 0022     		movs	r2, #0
 6288 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6289 0658 0392     		str	r2, [sp, #12]
2158:src/display.c **** 	for (; *q == '0'; q++);
 6290              		.loc 1 2158 5 view .LVU2008
 6291 065a 08F10108 		add	r8, r8, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 207


 6292              	.LVL693:
2158:src/display.c **** 	for (; *q == '0'; q++);
 6293              		.loc 1 2158 5 view .LVU2009
 6294 065e 4BE5     		b	.L493
 6295              	.LVL694:
 6296              	.L688:
2092:src/display.c **** 	    x[0] = '-';
 6297              		.loc 1 2092 34 discriminator 1 view .LVU2010
 6298 0660 6B20     		movs	r0, #107
 6299 0662 FFF7FEFF 		bl	get_user_flag
 6300              	.LVL695:
2092:src/display.c **** 	    x[0] = '-';
 6301              		.loc 1 2092 31 discriminator 1 view .LVU2011
 6302 0666 0028     		cmp	r0, #0
 6303 0668 3FF4FAAC 		beq	.L470
2093:src/display.c **** 	    x[1] = '0';
 6304              		.loc 1 2093 6 is_stmt 1 view .LVU2012
2094:src/display.c **** 	  } else
 6305              		.loc 1 2094 6 view .LVU2013
2093:src/display.c **** 	    x[1] = '0';
 6306              		.loc 1 2093 11 is_stmt 0 view .LVU2014
 6307 066c 43F22D03 		movw	r3, #12333
 6308 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2094:src/display.c **** 	  } else
 6309              		.loc 1 2094 11 view .LVU2015
 6310 0674 F7E4     		b	.L471
 6311              	.LVL696:
 6312              	.L692:
2151:src/display.c **** 	  CLR_MANT_SIGN;
 6313              		.loc 1 2151 4 is_stmt 1 view .LVU2016
 6314              	.LBB411:
 6315              	.LBI411:
 322:src/display.c **** {
 6316              		.loc 1 322 13 view .LVU2017
 6317              	.LBB412:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6318              		.loc 1 324 3 view .LVU2018
 325:src/display.c **** }
 6319              		.loc 1 325 3 view .LVU2019
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6320              		.loc 1 324 27 is_stmt 0 view .LVU2020
 6321 0676 1F4B     		ldr	r3, .L712+20
 6322 0678 2022     		movs	r2, #32
 325:src/display.c **** }
 6323              		.loc 1 325 3 view .LVU2021
 6324 067a 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6325              		.loc 1 324 27 view .LVU2022
 6326 067c 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 6327              		.loc 1 325 3 view .LVU2023
 6328 067e FFF7FEFF 		bl	clr_dot
 6329              	.LVL697:
 6330              	.LBE412:
 6331              	.LBE411:
2152:src/display.c **** 	}
 6332              		.loc 1 2152 4 is_stmt 1 view .LVU2024
ARM GAS  /tmp/ccxUm1xs.s 			page 208


 6333              	.LBB413:
 6334              	.LBI413:
 310:src/display.c **** {
 6335              		.loc 1 310 13 view .LVU2025
 6336              	.LBB414:
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6337              		.loc 1 312 3 view .LVU2026
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6338              		.loc 1 312 25 is_stmt 0 view .LVU2027
 6339 0682 1D4B     		ldr	r3, .L712+24
 6340 0684 2022     		movs	r2, #32
 313:src/display.c **** }
 6341              		.loc 1 313 3 view .LVU2028
 6342 0686 8120     		movs	r0, #129
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6343              		.loc 1 312 25 view .LVU2029
 6344 0688 1A70     		strb	r2, [r3]
 313:src/display.c **** }
 6345              		.loc 1 313 3 is_stmt 1 view .LVU2030
 6346 068a FFF7FEFF 		bl	clr_dot
 6347              	.LVL698:
 314:src/display.c **** 
 6348              		.loc 1 314 1 is_stmt 0 view .LVU2031
 6349 068e 29E5     		b	.L491
 6350              	.LVL699:
 6351              	.L698:
 314:src/display.c **** 
 6352              		.loc 1 314 1 view .LVU2032
 6353              	.LBE414:
 6354              	.LBE413:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6355              		.loc 1 2352 72 discriminator 2 view .LVU2033
 6356 0690 06F2E732 		addw	r2, r6, #999
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6357              		.loc 1 2352 58 discriminator 2 view .LVU2034
 6358 0694 40F2CE73 		movw	r3, #1998
 6359 0698 9A42     		cmp	r2, r3
 6360 069a 7FF6FEAD 		bls	.L569
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6361              		.loc 1 2353 4 is_stmt 1 view .LVU2035
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6362              		.loc 1 2353 20 is_stmt 0 view .LVU2036
 6363 069e 019A     		ldr	r2, [sp, #4]
 6364 06a0 0A23     		movs	r3, #10
2354:src/display.c **** 	  return;
 6365              		.loc 1 2354 4 view .LVU2037
 6366 06a2 2146     		mov	r1, r4
 6367 06a4 3846     		mov	r0, r7
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6368              		.loc 1 2353 20 view .LVU2038
 6369 06a6 1360     		str	r3, [r2]
2354:src/display.c **** 	  return;
 6370              		.loc 1 2354 4 is_stmt 1 view .LVU2039
 6371 06a8 FFF7FEFF 		bl	set_x_dn
 6372              	.LVL700:
2355:src/display.c **** 	}
 6373              		.loc 1 2355 4 view .LVU2040
ARM GAS  /tmp/ccxUm1xs.s 			page 209


 6374 06ac 30E6     		b	.L461
 6375              	.LVL701:
 6376              	.L486:
 6377              	.LBB415:
2113:src/display.c **** 
 6378              		.loc 1 2113 4 view .LVU2041
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6379              		.loc 1 2115 4 view .LVU2042
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6380              		.loc 1 2115 11 is_stmt 0 view .LVU2043
 6381 06ae 2A46     		mov	r2, r5
 6382 06b0 07A9     		add	r1, sp, #28
 6383 06b2 3846     		mov	r0, r7
 6384 06b4 FFF7FEFF 		bl	std_round_fix
 6385              	.LVL702:
 6386              	.LBE415:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6387              		.loc 1 2042 6 view .LVU2044
 6388 06b8 0023     		movs	r3, #0
 6389              	.LBB416:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6390              		.loc 1 2115 11 view .LVU2045
 6391 06ba 0546     		mov	r5, r0
 6392              	.LVL703:
2116:src/display.c **** 	    // allow zeros to be trimmed
 6393              		.loc 1 2116 4 is_stmt 1 view .LVU2046
 6394              	.LBE416:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6395              		.loc 1 2042 6 is_stmt 0 view .LVU2047
 6396 06bc 0493     		str	r3, [sp, #16]
 6397 06be EBE4     		b	.L590
 6398              	.LVL704:
 6399              	.L572:
2367:src/display.c **** 	      SET_MANT_SIGN;
 6400              		.loc 1 2367 6 is_stmt 1 view .LVU2048
2367:src/display.c **** 	      SET_MANT_SIGN;
 6401              		.loc 1 2367 9 is_stmt 0 view .LVU2049
 6402 06c0 002F     		cmp	r7, #0
 6403 06c2 40F01181 		bne	.L575
2368:src/display.c **** 	    else
 6404              		.loc 1 2368 8 is_stmt 1 view .LVU2050
 6405              	.LBB417:
 6406              	.LBI417:
 304:src/display.c **** {
 6407              		.loc 1 304 13 view .LVU2051
 6408              	.LBB418:
 306:src/display.c ****   set_dot(MANT_SIGN);
 6409              		.loc 1 306 3 view .LVU2052
 306:src/display.c ****   set_dot(MANT_SIGN);
 6410              		.loc 1 306 25 is_stmt 0 view .LVU2053
 6411 06c6 0C4B     		ldr	r3, .L712+24
 6412 06c8 2D22     		movs	r2, #45
 307:src/display.c **** }
 6413              		.loc 1 307 3 view .LVU2054
 6414 06ca 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 6415              		.loc 1 306 25 view .LVU2055
ARM GAS  /tmp/ccxUm1xs.s 			page 210


 6416 06cc 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 6417              		.loc 1 307 3 is_stmt 1 view .LVU2056
 6418 06ce FFF7FEFF 		bl	set_dot
 6419              	.LVL705:
 307:src/display.c **** }
 6420              		.loc 1 307 3 is_stmt 0 view .LVU2057
 6421              	.LBE418:
 6422              	.LBE417:
2373:src/display.c **** 	  if (c == '.') {
 6423              		.loc 1 2373 12 is_stmt 1 view .LVU2058
2373:src/display.c **** 	  if (c == '.') {
 6424              		.loc 1 2373 18 is_stmt 0 view .LVU2059
 6425 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6426              	.LVL706:
2373:src/display.c **** 	  if (c == '.') {
 6427              		.loc 1 2373 2 view .LVU2060
 6428 06d6 002A     		cmp	r2, #0
 6429 06d8 7FF4FCAD 		bne	.L574
 6430 06dc 0DE6     		b	.L573
 6431              	.L713:
 6432 06de 00BF     		.align	2
 6433              	.L712:
 6434 06e0 00000000 		.word	main_ram
 6435 06e4 56555555 		.word	1431655766
 6436 06e8 00000000 		.word	.LANCHOR1
 6437 06ec 00000000 		.word	.LANCHOR0
 6438 06f0 00000000 		.word	Ctx
 6439 06f4 00000000 		.word	LastDisplayedExponent
 6440 06f8 00000000 		.word	LastDisplayedNumber
 6441              	.LVL707:
 6442              	.L689:
2101:src/display.c **** 	  return;
 6443              		.loc 1 2101 4 is_stmt 1 view .LVU2061
 6444              	.LBB419:
 6445              	.LBI419:
1889:src/display.c **** 	const int dbl = is_dblmode();
 6446              		.loc 1 1889 19 view .LVU2062
 6447              	.LBB420:
1890:src/display.c **** 	char *p;
 6448              		.loc 1 1890 2 view .LVU2063
1890:src/display.c **** 	char *p;
 6449              		.loc 1 1890 18 is_stmt 0 view .LVU2064
 6450 06fc FFF7FEFF 		bl	is_dblmode
 6451              	.LVL708:
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6452              		.loc 1 1906 5 view .LVU2065
 6453 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6454 0704 2D2B     		cmp	r3, #45
1890:src/display.c **** 	char *p;
 6455              		.loc 1 1890 18 view .LVU2066
 6456 0706 0446     		mov	r4, r0
 6457              	.LVL709:
1891:src/display.c **** 	int i, j;
 6458              		.loc 1 1891 2 is_stmt 1 view .LVU2067
1892:src/display.c **** 	char *upper_str;
 6459              		.loc 1 1892 2 view .LVU2068
ARM GAS  /tmp/ccxUm1xs.s 			page 211


1893:src/display.c **** 	enum separator_modes separator_mode;
 6460              		.loc 1 1893 2 view .LVU2069
1894:src/display.c **** 	char decimal_mark;
 6461              		.loc 1 1894 2 view .LVU2070
1895:src/display.c **** 	char thousands_sep;
 6462              		.loc 1 1895 2 view .LVU2071
1896:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6463              		.loc 1 1896 2 view .LVU2072
1902:src/display.c **** #endif
 6464              		.loc 1 1902 2 view .LVU2073
1904:src/display.c **** 
 6465              		.loc 1 1904 2 view .LVU2074
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6466              		.loc 1 1906 2 view .LVU2075
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6467              		.loc 1 1906 5 is_stmt 0 view .LVU2076
 6468 0708 00F02081 		beq	.L706
1919:src/display.c **** 
 6469              		.loc 1 1919 16 view .LVU2077
 6470 070c 0027     		movs	r7, #0
 6471              	.LVL710:
 6472              	.L473:
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6473              		.loc 1 1921 2 is_stmt 1 view .LVU2078
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6474              		.loc 1 1921 6 is_stmt 0 view .LVU2079
 6475 070e 0021     		movs	r1, #0
 6476 0710 5846     		mov	r0, fp
 6477 0712 FFF7FEFF 		bl	find_char
 6478              	.LVL711:
1922:src/display.c **** 
 6479              		.loc 1 1922 2 is_stmt 1 view .LVU2080
1922:src/display.c **** 
 6480              		.loc 1 1922 23 is_stmt 0 view .LVU2081
 6481 0716 A0EB0B02 		sub	r2, r0, fp
1922:src/display.c **** 
 6482              		.loc 1 1922 2 view .LVU2082
 6483 071a C2F12202 		rsb	r2, r2, #34
 6484 071e 3021     		movs	r1, #48
 6485 0720 FFF7FEFF 		bl	xset
 6486              	.LVL712:
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6487              		.loc 1 1924 2 is_stmt 1 view .LVU2083
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6488              		.loc 1 1924 18 is_stmt 0 view .LVU2084
 6489 0724 AC4A     		ldr	r2, .L714
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6490              		.loc 1 1935 6 view .LVU2085
 6491 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6492              		.loc 1 1924 5 view .LVU2086
 6493 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1932:src/display.c **** 	}
 6494              		.loc 1 1932 18 view .LVU2087
 6495 072a 002A     		cmp	r2, #0
 6496 072c 15BF     		itete	ne
 6497 072e 4FF00209 		movne	r9, #2
ARM GAS  /tmp/ccxUm1xs.s 			page 212


 6498 0732 2C26     		moveq	r6, #44
 6499 0734 2E26     		movne	r6, #46
 6500              	.LVL713:
1932:src/display.c **** 	}
 6501              		.loc 1 1932 18 view .LVU2088
 6502 0736 2E25     		moveq	r5, #46
 6503              	.LVL714:
1932:src/display.c **** 	}
 6504              		.loc 1 1932 18 view .LVU2089
 6505 0738 18BF     		it	ne
 6506 073a 2C25     		movne	r5, #44
 6507              	.LVL715:
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6508              		.loc 1 1935 2 is_stmt 1 view .LVU2090
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6509              		.loc 1 1935 5 is_stmt 0 view .LVU2091
 6510 073c 13F0380F 		tst	r3, #56
 6511 0740 40F0D880 		bne	.L707
1962:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6512              		.loc 1 1962 4 is_stmt 1 view .LVU2092
 6513              	.LVL716:
1963:src/display.c **** 	  x[1] = decimal_mark;
 6514              		.loc 1 1963 4 view .LVU2093
 6515 0744 1022     		movs	r2, #16
 6516 0746 0BF10101 		add	r1, fp, #1
 6517 074a 0BF10200 		add	r0, fp, #2
 6518 074e FFF7FEFF 		bl	xcopy
 6519              	.LVL717:
1964:src/display.c **** 	  if (grouping) {
 6520              		.loc 1 1964 4 view .LVU2094
1966:src/display.c **** 	    x[5] = thousands_sep;
 6521              		.loc 1 1966 6 is_stmt 0 view .LVU2095
 6522 0752 0D22     		movs	r2, #13
 6523 0754 0BF10501 		add	r1, fp, #5
 6524 0758 0BF10600 		add	r0, fp, #6
1964:src/display.c **** 	  if (grouping) {
 6525              		.loc 1 1964 9 view .LVU2096
 6526 075c 8BF80150 		strb	r5, [fp, #1]
1965:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6527              		.loc 1 1965 4 is_stmt 1 view .LVU2097
1966:src/display.c **** 	    x[5] = thousands_sep;
 6528              		.loc 1 1966 6 view .LVU2098
 6529 0760 FFF7FEFF 		bl	xcopy
 6530              	.LVL718:
1967:src/display.c **** 	    x += 9;
 6531              		.loc 1 1967 6 view .LVU2099
1968:src/display.c **** 	  }
 6532              		.loc 1 1968 8 is_stmt 0 view .LVU2100
 6533 0764 0BF10905 		add	r5, fp, #9
 6534              	.LVL719:
1967:src/display.c **** 	    x += 9;
 6535              		.loc 1 1967 11 view .LVU2101
 6536 0768 8BF80560 		strb	r6, [fp, #5]
1968:src/display.c **** 	  }
 6537              		.loc 1 1968 6 is_stmt 1 view .LVU2102
 6538              	.LVL720:
1971:src/display.c **** 	    if (exp < 0) {
ARM GAS  /tmp/ccxUm1xs.s 			page 213


 6539              		.loc 1 1971 4 view .LVU2103
1971:src/display.c **** 	    if (exp < 0) {
 6540              		.loc 1 1971 7 is_stmt 0 view .LVU2104
 6541 076c 002C     		cmp	r4, #0
 6542 076e 00F0EA80 		beq	.L477
1972:src/display.c **** 	      x[9] = '-';
 6543              		.loc 1 1972 6 is_stmt 1 view .LVU2105
1972:src/display.c **** 	      x[9] = '-';
 6544              		.loc 1 1972 9 is_stmt 0 view .LVU2106
 6545 0772 B8F1000F 		cmp	r8, #0
1973:src/display.c **** 	      exp = -exp;
 6546              		.loc 1 1973 8 is_stmt 1 view .LVU2107
1974:src/display.c **** 	    }
 6547              		.loc 1 1974 8 view .LVU2108
1978:src/display.c **** 	    x[10] = '0' + j;
 6548              		.loc 1 1978 8 is_stmt 0 view .LVU2109
 6549 0776 994B     		ldr	r3, .L714+4
1980:src/display.c **** 	  }
 6550              		.loc 1 1980 18 view .LVU2110
 6551 0778 9949     		ldr	r1, .L714+8
1973:src/display.c **** 	      exp = -exp;
 6552              		.loc 1 1973 13 view .LVU2111
 6553 077a B6BF     		itet	lt
 6554 077c 2D22     		movlt	r2, #45
1977:src/display.c **** 	    j = exp / 1000;
 6555              		.loc 1 1977 13 view .LVU2112
 6556 077e 2022     		movge	r2, #32
1974:src/display.c **** 	    }
 6557              		.loc 1 1974 12 view .LVU2113
 6558 0780 C8F10008 		rsblt	r8, r8, #0
 6559              	.LVL721:
1974:src/display.c **** 	    }
 6560              		.loc 1 1974 12 view .LVU2114
 6561 0784 8BF81220 		strb	r2, [fp, #18]
1978:src/display.c **** 	    x[10] = '0' + j;
 6562              		.loc 1 1978 6 is_stmt 1 view .LVU2115
1978:src/display.c **** 	    x[10] = '0' + j;
 6563              		.loc 1 1978 8 is_stmt 0 view .LVU2116
 6564 0788 A3FB0823 		umull	r2, r3, r3, r8
 6565 078c 9B09     		lsrs	r3, r3, #6
 6566              	.LVL722:
1979:src/display.c **** 	    exp -= 1000 * j;
 6567              		.loc 1 1979 6 is_stmt 1 view .LVU2117
1979:src/display.c **** 	    exp -= 1000 * j;
 6568              		.loc 1 1979 18 is_stmt 0 view .LVU2118
 6569 078e 03F13002 		add	r2, r3, #48
1980:src/display.c **** 	  }
 6570              		.loc 1 1980 10 view .LVU2119
 6571 0792 01FB0388 		mla	r8, r1, r3, r8
 6572              	.LVL723:
1979:src/display.c **** 	    exp -= 1000 * j;
 6573              		.loc 1 1979 12 view .LVU2120
 6574 0796 8BF81320 		strb	r2, [fp, #19]
1980:src/display.c **** 	  }
 6575              		.loc 1 1980 6 is_stmt 1 view .LVU2121
 6576              	.LVL724:
 6577              	.L479:
ARM GAS  /tmp/ccxUm1xs.s 			page 214


1986:src/display.c **** 	  *x = 0;
 6578              		.loc 1 1986 4 view .LVU2122
 6579 079a 0B22     		movs	r2, #11
 6580 079c 2946     		mov	r1, r5
 6581 079e 0BF10A00 		add	r0, fp, #10
 6582 07a2 FFF7FEFF 		bl	xcopy
 6583              	.LVL725:
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6584              		.loc 1 1987 4 view .LVU2123
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6585              		.loc 1 1987 7 is_stmt 0 view .LVU2124
 6586 07a6 0022     		movs	r2, #0
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6587              		.loc 1 1988 4 view .LVU2125
 6588 07a8 4046     		mov	r0, r8
 6589 07aa 0121     		movs	r1, #1
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6590              		.loc 1 1987 7 view .LVU2126
 6591 07ac 8BF80920 		strb	r2, [fp, #9]
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6592              		.loc 1 1988 4 is_stmt 1 view .LVU2127
 6593 07b0 FFF7FEFF 		bl	set_exp
 6594              	.LVL726:
1989:src/display.c **** 	}
 6595              		.loc 1 1989 4 view .LVU2128
1989:src/display.c **** 	}
 6596              		.loc 1 1989 4 is_stmt 0 view .LVU2129
 6597 07b4 ABEB0707 		sub	r7, fp, r7
 6598              	.LVL727:
1989:src/display.c **** 	}
 6599              		.loc 1 1989 6 view .LVU2130
 6600 07b8 0924     		movs	r4, #9
 6601              	.LVL728:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6602              		.loc 1 1992 11 is_stmt 1 view .LVU2131
 6603              	.L480:
1993:src/display.c **** 	  }
 6604              		.loc 1 1993 6 view .LVU2132
 6605              	.LBB421:
 6606              	.LBI421:
 375:src/display.c ****   if (sep == SEP_NONE)
 6607              		.loc 1 375 14 view .LVU2133
 6608              	.LBB422:
 376:src/display.c ****     return res;
 6609              		.loc 1 376 3 view .LVU2134
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6610              		.loc 1 378 3 view .LVU2135
 6611 07ba 2046     		mov	r0, r4
 6612 07bc 4946     		mov	r1, r9
 6613              	.LBE422:
 6614              	.LBE421:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6615              		.loc 1 1992 38 is_stmt 0 view .LVU2136
 6616 07be 1B34     		adds	r4, r4, #27
 6617              	.LVL729:
 6618              	.LBB424:
 6619              	.LBB423:
ARM GAS  /tmp/ccxUm1xs.s 			page 215


1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6620              		.loc 1 1992 38 view .LVU2137
 6621 07c0 FFF7FEFF 		bl	set_separator.part.0
 6622              	.LVL730:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6623              		.loc 1 1992 38 view .LVU2138
 6624              	.LBE423:
 6625              	.LBE424:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6626              		.loc 1 1992 36 is_stmt 1 view .LVU2139
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6627              		.loc 1 1992 11 view .LVU2140
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6628              		.loc 1 1992 4 is_stmt 0 view .LVU2141
 6629 07c4 512C     		cmp	r4, #81
 6630 07c6 F8DD     		ble	.L480
 6631 07c8 6C1E     		subs	r4, r5, #1
 6632              	.LVL731:
 6633              	.L482:
1998:src/display.c **** 
 6634              		.loc 1 1998 4 is_stmt 1 view .LVU2142
 6635 07ca 5046     		mov	r0, r10
 6636 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1997:src/display.c **** 	  set_dig(j, x[i]);
 6637              		.loc 1 1997 33 is_stmt 0 view .LVU2143
 6638 07d0 0AF1090A 		add	r10, r10, #9
 6639              	.LVL732:
1998:src/display.c **** 
 6640              		.loc 1 1998 4 view .LVU2144
 6641 07d4 FFF7FEFF 		bl	set_dig
 6642              	.LVL733:
1997:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1997 26 is_stmt 1 view .LVU2145
1997:src/display.c **** 	  set_dig(j, x[i]);
 6644              		.loc 1 1997 18 view .LVU2146
1997:src/display.c **** 	  set_dig(j, x[i]);
 6645              		.loc 1 1997 2 is_stmt 0 view .LVU2147
 6646 07d8 BAF16C0F 		cmp	r10, #108
 6647 07dc F5D1     		bne	.L482
2000:src/display.c **** 	set_status(upper_str - negative);
 6648              		.loc 1 2000 2 is_stmt 1 view .LVU2148
2000:src/display.c **** 	set_status(upper_str - negative);
 6649              		.loc 1 2000 5 is_stmt 0 view .LVU2149
 6650 07de 0023     		movs	r3, #0
2001:src/display.c ****       }
 6651              		.loc 1 2001 2 view .LVU2150
 6652 07e0 3846     		mov	r0, r7
2000:src/display.c **** 	set_status(upper_str - negative);
 6653              		.loc 1 2000 5 view .LVU2151
 6654 07e2 2B70     		strb	r3, [r5]
2001:src/display.c ****       }
 6655              		.loc 1 2001 2 is_stmt 1 view .LVU2152
 6656 07e4 FFF7FEFF 		bl	set_status
 6657              	.LVL734:
2002:src/display.c **** 
 6658              		.loc 1 2002 7 is_stmt 0 view .LVU2153
 6659 07e8 92E5     		b	.L461
ARM GAS  /tmp/ccxUm1xs.s 			page 216


 6660              	.LVL735:
 6661              	.L548:
2002:src/display.c **** 
 6662              		.loc 1 2002 7 view .LVU2154
 6663              	.LBE420:
 6664              	.LBE419:
2293:src/display.c **** 	    odig++;
 6665              		.loc 1 2293 6 is_stmt 1 view .LVU2155
2294:src/display.c **** 	    *obp++ = '.';
 6666              		.loc 1 2294 6 view .LVU2156
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6667              		.loc 1 2295 6 view .LVU2157
2293:src/display.c **** 	    odig++;
 6668              		.loc 1 2293 13 is_stmt 0 view .LVU2158
 6669 07ea 42F63063 		movw	r3, #11824
 6670 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2296:src/display.c **** 	      *obp++ = '0';
 6671              		.loc 1 2296 6 is_stmt 1 view .LVU2159
 6672              	.LVL736:
2296:src/display.c **** 	      *obp++ = '0';
 6673              		.loc 1 2296 20 view .LVU2160
2296:src/display.c **** 	      *obp++ = '0';
 6674              		.loc 1 2296 6 is_stmt 0 view .LVU2161
 6675 07f2 731C     		adds	r3, r6, #1
 6676              	.LVL737:
2296:src/display.c **** 	      *obp++ = '0';
 6677              		.loc 1 2296 6 view .LVU2162
 6678 07f4 00F0E580 		beq	.L708
 6679 07f8 C6F10102 		rsb	r2, r6, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6680              		.loc 1 2295 10 view .LVU2163
 6681 07fc 0DF12600 		add	r0, sp, #38
 6682              	.LVL738:
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6683              		.loc 1 2295 10 view .LVU2164
 6684 0800 079D     		ldr	r5, [sp, #28]
 6685 0802 5A44     		add	r2, r2, fp
 6686 0804 0346     		mov	r3, r0
 6687              	.LVL739:
2297:src/display.c **** 	      odig++;
 6688              		.loc 1 2297 15 view .LVU2165
 6689 0806 3021     		movs	r1, #48
 6690              	.LVL740:
 6691              	.L556:
2297:src/display.c **** 	      odig++;
 6692              		.loc 1 2297 8 is_stmt 1 discriminator 3 view .LVU2166
2297:src/display.c **** 	      odig++;
 6693              		.loc 1 2297 15 is_stmt 0 discriminator 3 view .LVU2167
 6694 0808 03F8011B 		strb	r1, [r3], #1
 6695              	.LVL741:
2298:src/display.c **** 	      dd--;
 6696              		.loc 1 2298 8 is_stmt 1 discriminator 3 view .LVU2168
2299:src/display.c **** 	    }
 6697              		.loc 1 2299 8 discriminator 3 view .LVU2169
2296:src/display.c **** 	      *obp++ = '0';
 6698              		.loc 1 2296 25 discriminator 3 view .LVU2170
2296:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccxUm1xs.s 			page 217


 6699              		.loc 1 2296 20 discriminator 3 view .LVU2171
2296:src/display.c **** 	      *obp++ = '0';
 6700              		.loc 1 2296 6 is_stmt 0 discriminator 3 view .LVU2172
 6701 080c 9342     		cmp	r3, r2
 6702 080e FBD1     		bne	.L556
 6703 0810 AB19     		adds	r3, r5, r6
 6704              	.LVL742:
2296:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2296 6 discriminator 3 view .LVU2173
 6706 0812 6FEA0608 		mvn	r8, r6
 6707 0816 0133     		adds	r3, r3, #1
 6708 0818 8044     		add	r8, r8, r0
 6709 081a 7542     		rsbs	r5, r6, #0
 6710              	.L555:
 6711              	.LVL743:
2301:src/display.c **** 	      *obp++ = *p++;
 6712              		.loc 1 2301 12 is_stmt 1 view .LVU2174
2301:src/display.c **** 	      *obp++ = *p++;
 6713              		.loc 1 2301 15 is_stmt 0 view .LVU2175
 6714 081c 5A1E     		subs	r2, r3, #1
2301:src/display.c **** 	      *obp++ = *p++;
 6715              		.loc 1 2301 12 view .LVU2176
 6716 081e 002B     		cmp	r3, #0
2301:src/display.c **** 	      *obp++ = *p++;
 6717              		.loc 1 2301 15 view .LVU2177
 6718 0820 0792     		str	r2, [sp, #28]
2301:src/display.c **** 	      *obp++ = *p++;
 6719              		.loc 1 2301 12 view .LVU2178
 6720 0822 7FF767AE 		ble	.L537
 6721 0826 4344     		add	r3, r3, r8
 6722 0828 581E     		subs	r0, r3, #1
 6723 082a 08F1FF38 		add	r8, r8, #-1
 6724              	.LVL744:
 6725              	.L557:
2302:src/display.c **** 	      odig++;
 6726              		.loc 1 2302 8 is_stmt 1 view .LVU2179
2302:src/display.c **** 	      odig++;
 6727              		.loc 1 2302 15 is_stmt 0 view .LVU2180
 6728 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6729              	.LVL745:
2302:src/display.c **** 	      odig++;
 6730              		.loc 1 2302 15 view .LVU2181
 6731 0832 08F8011F 		strb	r1, [r8, #1]!
2303:src/display.c **** 	    }
 6732              		.loc 1 2303 8 is_stmt 1 view .LVU2182
2301:src/display.c **** 	      *obp++ = *p++;
 6733              		.loc 1 2301 12 view .LVU2183
 6734 0836 8045     		cmp	r8, r0
 6735 0838 F9D1     		bne	.L557
 6736              	.LVL746:
2301:src/display.c **** 	      *obp++ = *p++;
 6737              		.loc 1 2301 12 is_stmt 0 view .LVU2184
 6738 083a 0135     		adds	r5, r5, #1
 6739 083c 4FF0FF31 		mov	r1, #-1
 6740 0840 1544     		add	r5, r5, r2
 6741 0842 9846     		mov	r8, r3
 6742 0844 0791     		str	r1, [sp, #28]
ARM GAS  /tmp/ccxUm1xs.s 			page 218


 6743 0846 55E6     		b	.L537
 6744              	.LVL747:
 6745              	.L560:
2319:src/display.c **** 	    odig++;
 6746              		.loc 1 2319 6 is_stmt 1 view .LVU2185
2319:src/display.c **** 	    odig++;
 6747              		.loc 1 2319 13 is_stmt 0 view .LVU2186
 6748 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6749 084c 8DF82430 		strb	r3, [sp, #36]
2320:src/display.c **** 	    dd--;
 6750              		.loc 1 2320 6 is_stmt 1 view .LVU2187
 6751              	.LVL748:
2321:src/display.c **** 	    exp--;
 6752              		.loc 1 2321 6 view .LVU2188
2321:src/display.c **** 	    exp--;
 6753              		.loc 1 2321 8 is_stmt 0 view .LVU2189
 6754 0850 013A     		subs	r2, r2, #1
2322:src/display.c **** 	  case -2:
 6755              		.loc 1 2322 6 is_stmt 1 view .LVU2190
2322:src/display.c **** 	  case -2:
 6756              		.loc 1 2322 9 is_stmt 0 view .LVU2191
 6757 0852 013E     		subs	r6, r6, #1
 6758              	.LVL749:
2322:src/display.c **** 	  case -2:
 6759              		.loc 1 2322 9 view .LVU2192
 6760 0854 0325     		movs	r5, #3
2319:src/display.c **** 	    odig++;
 6761              		.loc 1 2319 17 view .LVU2193
 6762 0856 0DF15909 		add	r9, sp, #89
 6763              	.LVL750:
2319:src/display.c **** 	    odig++;
 6764              		.loc 1 2319 10 view .LVU2194
 6765 085a 0DF12501 		add	r1, sp, #37
 6766              	.LVL751:
 6767              	.L563:
2325:src/display.c **** 	    odig++;
 6768              		.loc 1 2325 6 is_stmt 1 view .LVU2195
2325:src/display.c **** 	    odig++;
 6769              		.loc 1 2325 13 is_stmt 0 view .LVU2196
 6770 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6771              	.LVL752:
2325:src/display.c **** 	    odig++;
 6772              		.loc 1 2325 13 view .LVU2197
 6773 0862 01F8013B 		strb	r3, [r1], #1
 6774              	.LVL753:
2326:src/display.c **** 	    dd--;
 6775              		.loc 1 2326 6 is_stmt 1 view .LVU2198
2327:src/display.c **** 	    exp--;
 6776              		.loc 1 2327 6 view .LVU2199
2327:src/display.c **** 	    exp--;
 6777              		.loc 1 2327 8 is_stmt 0 view .LVU2200
 6778 0866 013A     		subs	r2, r2, #1
2328:src/display.c **** 	  case 0:
 6779              		.loc 1 2328 6 is_stmt 1 view .LVU2201
2328:src/display.c **** 	  case 0:
 6780              		.loc 1 2328 9 is_stmt 0 view .LVU2202
 6781 0868 013E     		subs	r6, r6, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 219


 6782              	.LVL754:
2328:src/display.c **** 	  case 0:
 6783              		.loc 1 2328 9 view .LVU2203
 6784 086a 24E6     		b	.L527
 6785              	.LVL755:
 6786              	.L562:
2328:src/display.c **** 	  case 0:
 6787              		.loc 1 2328 9 view .LVU2204
 6788 086c 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 6789              		.loc 1 2316 16 view .LVU2205
 6790 086e 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6791              		.loc 1 2021 15 view .LVU2206
 6792 0870 5946     		mov	r1, fp
 6793 0872 F4E7     		b	.L563
 6794              	.LVL756:
 6795              	.L508:
2184:src/display.c **** 	    /* We might have push the fixed decimals off the
 6796              		.loc 1 2184 6 is_stmt 1 view .LVU2207
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6797              		.loc 1 2188 6 view .LVU2208
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6798              		.loc 1 2188 9 is_stmt 0 view .LVU2209
 6799 0874 0299     		ldr	r1, [sp, #8]
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6800              		.loc 1 2188 23 view .LVU2210
 6801 0876 9319     		adds	r3, r2, r6
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6802              		.loc 1 2188 9 view .LVU2211
 6803 0878 9942     		cmp	r1, r3
2189:src/display.c **** 	  }
 6804              		.loc 1 2189 8 is_stmt 1 view .LVU2212
2189:src/display.c **** 	  }
 6805              		.loc 1 2189 30 is_stmt 0 view .LVU2213
 6806 087a DFBF     		itttt	le
 6807 087c 029B     		ldrle	r3, [sp, #8]
 6808 087e 03F1FF32 		addle	r2, r3, #-1
2189:src/display.c **** 	  }
 6809              		.loc 1 2189 35 view .LVU2214
 6810 0882 921B     		suble	r2, r2, r6
2189:src/display.c **** 	  }
 6811              		.loc 1 2189 11 view .LVU2215
 6812 0884 0792     		strle	r2, [sp, #28]
 6813 0886 3146     		mov	r1, r6
 6814 0888 6BE4     		b	.L505
 6815              	.LVL757:
 6816              	.L533:
2228:src/display.c **** 	      odig++;
 6817              		.loc 1 2228 8 is_stmt 1 view .LVU2216
2228:src/display.c **** 	      odig++;
 6818              		.loc 1 2228 15 is_stmt 0 view .LVU2217
 6819 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6820 088e 8DF82410 		strb	r1, [sp, #36]
2229:src/display.c **** 	      dd--;
 6821              		.loc 1 2229 8 is_stmt 1 view .LVU2218
 6822              	.LVL758:
ARM GAS  /tmp/ccxUm1xs.s 			page 220


2230:src/display.c **** 	      exp--;
 6823              		.loc 1 2230 8 view .LVU2219
2230:src/display.c **** 	      exp--;
 6824              		.loc 1 2230 10 is_stmt 0 view .LVU2220
 6825 0892 013A     		subs	r2, r2, #1
2231:src/display.c **** 	    case -2:
 6826              		.loc 1 2231 8 is_stmt 1 view .LVU2221
2231:src/display.c **** 	    case -2:
 6827              		.loc 1 2231 11 is_stmt 0 view .LVU2222
 6828 0894 013E     		subs	r6, r6, #1
 6829              	.LVL759:
2231:src/display.c **** 	    case -2:
 6830              		.loc 1 2231 11 view .LVU2223
 6831 0896 0325     		movs	r5, #3
2228:src/display.c **** 	      odig++;
 6832              		.loc 1 2228 19 view .LVU2224
 6833 0898 0DF15909 		add	r9, sp, #89
 6834              	.LVL760:
2228:src/display.c **** 	      odig++;
 6835              		.loc 1 2228 12 view .LVU2225
 6836 089c 0DF12501 		add	r1, sp, #37
 6837              	.LVL761:
 6838              	.L536:
2234:src/display.c **** 	      odig++;
 6839              		.loc 1 2234 8 is_stmt 1 view .LVU2226
2234:src/display.c **** 	      odig++;
 6840              		.loc 1 2234 15 is_stmt 0 view .LVU2227
 6841 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6842              	.LVL762:
2234:src/display.c **** 	      odig++;
 6843              		.loc 1 2234 15 view .LVU2228
 6844 08a4 01F8010B 		strb	r0, [r1], #1
 6845              	.LVL763:
2235:src/display.c **** 	      dd--;
 6846              		.loc 1 2235 8 is_stmt 1 view .LVU2229
2236:src/display.c **** 	      exp--;
 6847              		.loc 1 2236 8 view .LVU2230
2237:src/display.c **** 	    case 0:
 6848              		.loc 1 2237 8 view .LVU2231
2236:src/display.c **** 	      exp--;
 6849              		.loc 1 2236 10 is_stmt 0 view .LVU2232
 6850 08a8 013A     		subs	r2, r2, #1
 6851 08aa 0792     		str	r2, [sp, #28]
2237:src/display.c **** 	    case 0:
 6852              		.loc 1 2237 11 view .LVU2233
 6853 08ac 013E     		subs	r6, r6, #1
 6854              	.LVL764:
 6855              	.L532:
2239:src/display.c **** 	    };
 6856              		.loc 1 2239 8 is_stmt 1 view .LVU2234
2240:src/display.c **** 	    *obp++ = *p++;
 6857              		.loc 1 2240 7 view .LVU2235
2241:src/display.c **** 	    odig++;
 6858              		.loc 1 2241 6 view .LVU2236
2241:src/display.c **** 	    odig++;
 6859              		.loc 1 2241 17 is_stmt 0 view .LVU2237
 6860 08ae 4A46     		mov	r2, r9
ARM GAS  /tmp/ccxUm1xs.s 			page 221


 6861              	.LVL765:
2241:src/display.c **** 	    odig++;
 6862              		.loc 1 2241 13 view .LVU2238
 6863 08b0 8846     		mov	r8, r1
 6864 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6865              	.LVL766:
2241:src/display.c **** 	    odig++;
 6866              		.loc 1 2241 13 view .LVU2239
 6867 08b6 08F8020B 		strb	r0, [r8], #2
2242:src/display.c **** 	    *obp++ = '.';
 6868              		.loc 1 2242 6 is_stmt 1 view .LVU2240
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6869              		.loc 1 2243 6 view .LVU2241
 6870              	.LVL767:
2244:src/display.c **** 	      *obp++ = *p++;
 6871              		.loc 1 2244 6 is_stmt 0 view .LVU2242
 6872 08ba 012B     		cmp	r3, #1
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6873              		.loc 1 2243 13 view .LVU2243
 6874 08bc 4FF02E00 		mov	r0, #46
 6875 08c0 4870     		strb	r0, [r1, #1]
2244:src/display.c **** 	      *obp++ = *p++;
 6876              		.loc 1 2244 6 is_stmt 1 view .LVU2244
 6877              	.LVL768:
2244:src/display.c **** 	      *obp++ = *p++;
 6878              		.loc 1 2244 16 view .LVU2245
2244:src/display.c **** 	      *obp++ = *p++;
 6879              		.loc 1 2244 6 is_stmt 0 view .LVU2246
 6880 08c2 34DD     		ble	.L605
2244:src/display.c **** 	      *obp++ = *p++;
 6881              		.loc 1 2244 6 view .LVU2247
 6882 08c4 0131     		adds	r1, r1, #1
 6883 08c6 9944     		add	r9, r9, r3
 6884              	.LVL769:
 6885              	.L538:
2245:src/display.c **** 	      odig++;
 6886              		.loc 1 2245 8 is_stmt 1 discriminator 3 view .LVU2248
2245:src/display.c **** 	      odig++;
 6887              		.loc 1 2245 15 is_stmt 0 discriminator 3 view .LVU2249
 6888 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6889              	.LVL770:
2245:src/display.c **** 	      odig++;
 6890              		.loc 1 2245 15 discriminator 3 view .LVU2250
 6891 08cc 01F8010F 		strb	r0, [r1, #1]!
2246:src/display.c **** 	    }
 6892              		.loc 1 2246 8 is_stmt 1 discriminator 3 view .LVU2251
2244:src/display.c **** 	      *obp++ = *p++;
 6893              		.loc 1 2244 25 discriminator 3 view .LVU2252
2244:src/display.c **** 	      *obp++ = *p++;
 6894              		.loc 1 2244 16 discriminator 3 view .LVU2253
2244:src/display.c **** 	      *obp++ = *p++;
 6895              		.loc 1 2244 6 is_stmt 0 discriminator 3 view .LVU2254
 6896 08d0 4A45     		cmp	r2, r9
 6897 08d2 F9D1     		bne	.L538
 6898 08d4 013B     		subs	r3, r3, #1
 6899              	.LVL771:
2244:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccxUm1xs.s 			page 222


 6900              		.loc 1 2244 6 discriminator 3 view .LVU2255
 6901 08d6 9844     		add	r8, r8, r3
 6902 08d8 1D44     		add	r5, r5, r3
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6903              		.loc 1 2248 15 view .LVU2256
 6904 08da 4FF0010A 		mov	r10, #1
 6905 08de 09E6     		b	.L537
 6906              	.LVL772:
 6907              	.L535:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6908              		.loc 1 2248 15 view .LVU2257
 6909 08e0 079A     		ldr	r2, [sp, #28]
2225:src/display.c **** 	    case -1:
 6910              		.loc 1 2225 24 view .LVU2258
 6911 08e2 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6912              		.loc 1 2021 15 view .LVU2259
 6913 08e4 5946     		mov	r1, fp
 6914 08e6 DBE7     		b	.L536
 6915              	.LVL773:
 6916              	.L575:
2370:src/display.c **** 	  }
 6917              		.loc 1 2370 8 is_stmt 1 view .LVU2260
 6918 08e8 2D21     		movs	r1, #45
 6919 08ea A7F10900 		sub	r0, r7, #9
 6920 08ee FFF7FEFF 		bl	set_dig
 6921              	.LVL774:
 6922 08f2 EAE4     		b	.L571
 6923              	.LVL775:
 6924              	.L707:
 6925              	.LBB429:
 6926              	.LBB427:
 6927              	.LBB425:
1937:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6928              		.loc 1 1937 4 view .LVU2261
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6929              		.loc 1 1940 4 view .LVU2262
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6930              		.loc 1 1940 14 is_stmt 0 view .LVU2263
 6931 08f4 0BF10307 		add	r7, fp, #3
 6932              	.LVL776:
1941:src/display.c **** 	  if (grouping) {
 6933              		.loc 1 1941 4 is_stmt 1 view .LVU2264
 6934 08f8 3A49     		ldr	r1, .L714+12
 6935 08fa 0D22     		movs	r2, #13
 6936 08fc 3846     		mov	r0, r7
 6937 08fe FFF7FEFF 		bl	xcopy
 6938              	.LVL777:
1942:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6939              		.loc 1 1942 4 view .LVU2265
1943:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6940              		.loc 1 1943 6 view .LVU2266
 6941 0902 1322     		movs	r2, #19
 6942 0904 0BEB0201 		add	r1, fp, r2
 6943 0908 0BF11400 		add	r0, fp, #20
 6944 090c FFF7FEFF 		bl	xcopy
 6945              	.LVL778:
ARM GAS  /tmp/ccxUm1xs.s 			page 223


1944:src/display.c **** 	    x += 3 + 13 + 7;
 6946              		.loc 1 1944 6 view .LVU2267
1945:src/display.c **** 	  }
 6947              		.loc 1 1945 8 is_stmt 0 view .LVU2268
 6948 0910 0BF11705 		add	r5, fp, #23
 6949              	.LVL779:
1944:src/display.c **** 	    x += 3 + 13 + 7;
 6950              		.loc 1 1944 24 view .LVU2269
 6951 0914 8BF81360 		strb	r6, [fp, #19]
1945:src/display.c **** 	  }
 6952              		.loc 1 1945 6 is_stmt 1 view .LVU2270
 6953              	.LVL780:
1958:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6954              		.loc 1 1958 4 view .LVU2271
1959:src/display.c **** 	}
 6955              		.loc 1 1959 4 view .LVU2272
1959:src/display.c **** 	}
 6956              		.loc 1 1959 6 is_stmt 0 view .LVU2273
 6957 0918 1B24     		movs	r4, #27
 6958              	.LVL781:
1959:src/display.c **** 	}
 6959              		.loc 1 1959 6 view .LVU2274
 6960              	.LBE425:
 6961 091a 4EE7     		b	.L480
 6962              	.LVL782:
 6963              	.L703:
1959:src/display.c **** 	}
 6964              		.loc 1 1959 6 view .LVU2275
 6965              	.LBE427:
 6966              	.LBE429:
2058:src/display.c **** 	      return;
 6967              		.loc 1 2058 8 is_stmt 1 view .LVU2276
 6968 091c 3846     		mov	r0, r7
 6969 091e FFF7FEFF 		bl	set_x_hms
 6970              	.LVL783:
2059:src/display.c **** 	    }
 6971              		.loc 1 2059 8 view .LVU2277
 6972 0922 F5E4     		b	.L461
 6973              	.LVL784:
 6974              	.L603:
2220:src/display.c **** 	  if (count != *display_digits)
 6975              		.loc 1 2220 4 is_stmt 0 view .LVU2278
 6976 0924 029B     		ldr	r3, [sp, #8]
 6977 0926 71E4     		b	.L528
 6978              	.LVL785:
 6979              	.L604:
2225:src/display.c **** 	    case -1:
 6980              		.loc 1 2225 24 view .LVU2279
 6981 0928 0125     		movs	r5, #1
 6982 092a 5946     		mov	r1, fp
 6983 092c BFE7     		b	.L532
 6984              	.LVL786:
 6985              	.L605:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6986              		.loc 1 2248 15 view .LVU2280
 6987 092e 4FF0010A 		mov	r10, #1
 6988 0932 DFE5     		b	.L537
ARM GAS  /tmp/ccxUm1xs.s 			page 224


 6989              	.LVL787:
 6990              	.L579:
 6991              	.LBB430:
 6992              	.LBB409:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6993              		.loc 1 2248 15 view .LVU2281
 6994 0934 3846     		mov	r0, r7
 6995 0936 FFF7FEFF 		bl	set_separator.part.0
 6996              	.LVL788:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6997              		.loc 1 2248 15 view .LVU2282
 6998 093a 0446     		mov	r4, r0
 6999              	.LVL789:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7000              		.loc 1 2248 15 view .LVU2283
 7001 093c F7E5     		b	.L577
 7002              	.LVL790:
 7003              	.L511:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7004              		.loc 1 2248 15 view .LVU2284
 7005              	.LBE409:
 7006              	.LBE430:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7007              		.loc 1 2198 4 is_stmt 1 view .LVU2285
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7008              		.loc 1 2198 7 is_stmt 0 view .LVU2286
 7009 093e 4B45     		cmp	r3, r9
 7010 0940 7FF429AC 		bne	.L588
 7011 0944 3EE5     		b	.L589
 7012              	.LVL791:
 7013              	.L477:
 7014              	.LBB431:
 7015              	.LBB428:
1983:src/display.c **** 	    x[10] = '\0';
 7016              		.loc 1 1983 6 is_stmt 1 view .LVU2287
1984:src/display.c **** 	  }
 7017              		.loc 1 1984 6 view .LVU2288
1983:src/display.c **** 	    x[10] = '\0';
 7018              		.loc 1 1983 11 is_stmt 0 view .LVU2289
 7019 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7020 094a 26E7     		b	.L479
 7021              	.LVL792:
 7022              	.L706:
 7023              	.LBB426:
1908:src/display.c **** 
 7024              		.loc 1 1908 4 is_stmt 1 view .LVU2290
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
 7025              		.loc 1 1910 4 view .LVU2291
 7026 094c 2222     		movs	r2, #34
 7027 094e 0DF12501 		add	r1, sp, #37
 7028 0952 0AA8     		add	r0, sp, #40
 7029              	.LVL793:
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
 7030              		.loc 1 1910 4 is_stmt 0 view .LVU2292
 7031 0954 FFF7FEFF 		bl	xcopy
 7032              	.LVL794:
1911:src/display.c **** 	  x += 4;
ARM GAS  /tmp/ccxUm1xs.s 			page 225


 7033              		.loc 1 1911 4 is_stmt 1 view .LVU2293
 7034 0958 5846     		mov	r0, fp
 7035 095a 2349     		ldr	r1, .L714+16
 7036 095c 0422     		movs	r2, #4
 7037 095e FFF7FEFF 		bl	xcopy
 7038              	.LVL795:
1912:src/display.c **** 	  negative = 4;
 7039              		.loc 1 1912 4 view .LVU2294
1913:src/display.c **** #else
 7040              		.loc 1 1913 4 view .LVU2295
1912:src/display.c **** 	  negative = 4;
 7041              		.loc 1 1912 6 is_stmt 0 view .LVU2296
 7042 0962 0DF1280B 		add	fp, sp, #40
 7043              	.LVL796:
1913:src/display.c **** #else
 7044              		.loc 1 1913 13 view .LVU2297
 7045 0966 0427     		movs	r7, #4
 7046              	.LVL797:
1913:src/display.c **** #else
 7047              		.loc 1 1913 13 view .LVU2298
 7048              	.LBE426:
 7049 0968 D1E6     		b	.L473
 7050              	.LVL798:
 7051              	.L539:
1913:src/display.c **** #else
 7052              		.loc 1 1913 13 view .LVU2299
 7053              	.LBE428:
 7054              	.LBE431:
2264:src/display.c **** 	    odig++;
 7055              		.loc 1 2264 6 is_stmt 1 view .LVU2300
2265:src/display.c **** 	    *obp++ = '.';
 7056              		.loc 1 2265 6 view .LVU2301
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7057              		.loc 1 2266 6 view .LVU2302
2264:src/display.c **** 	    odig++;
 7058              		.loc 1 2264 13 is_stmt 0 view .LVU2303
 7059 096a 42F63062 		movw	r2, #11824
 7060 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2267:src/display.c **** 	      *obp++ = '0';
 7061              		.loc 1 2267 6 is_stmt 1 view .LVU2304
 7062              	.LVL799:
2267:src/display.c **** 	      *obp++ = '0';
 7063              		.loc 1 2267 20 view .LVU2305
2267:src/display.c **** 	      *obp++ = '0';
 7064              		.loc 1 2267 6 is_stmt 0 view .LVU2306
 7065 0972 721C     		adds	r2, r6, #1
 7066              	.LVL800:
2267:src/display.c **** 	      *obp++ = '0';
 7067              		.loc 1 2267 6 view .LVU2307
 7068 0974 2AD0     		beq	.L606
 7069 0976 C6F10101 		rsb	r1, r6, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7070              		.loc 1 2266 10 view .LVU2308
 7071 097a 0DF12600 		add	r0, sp, #38
 7072              	.LVL801:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7073              		.loc 1 2266 10 view .LVU2309
ARM GAS  /tmp/ccxUm1xs.s 			page 226


 7074 097e 5944     		add	r1, r1, fp
 7075 0980 0246     		mov	r2, r0
 7076              	.LVL802:
2268:src/display.c **** 	      odig++;
 7077              		.loc 1 2268 15 view .LVU2310
 7078 0982 3025     		movs	r5, #48
 7079              	.LVL803:
 7080              	.L546:
2268:src/display.c **** 	      odig++;
 7081              		.loc 1 2268 8 is_stmt 1 discriminator 3 view .LVU2311
2268:src/display.c **** 	      odig++;
 7082              		.loc 1 2268 15 is_stmt 0 discriminator 3 view .LVU2312
 7083 0984 02F8015B 		strb	r5, [r2], #1
 7084              	.LVL804:
2269:src/display.c **** 	    }
 7085              		.loc 1 2269 8 is_stmt 1 discriminator 3 view .LVU2313
2267:src/display.c **** 	      *obp++ = '0';
 7086              		.loc 1 2267 25 discriminator 3 view .LVU2314
2267:src/display.c **** 	      *obp++ = '0';
 7087              		.loc 1 2267 20 discriminator 3 view .LVU2315
2267:src/display.c **** 	      *obp++ = '0';
 7088              		.loc 1 2267 6 is_stmt 0 discriminator 3 view .LVU2316
 7089 0988 8A42     		cmp	r2, r1
 7090 098a FBD1     		bne	.L546
 7091 098c 6FEA0608 		mvn	r8, r6
 7092 0990 8044     		add	r8, r8, r0
 7093 0992 7542     		rsbs	r5, r6, #0
 7094              	.LVL805:
 7095              	.L545:
2271:src/display.c **** 	      *obp++ = *p++;
 7096              		.loc 1 2271 16 is_stmt 1 view .LVU2317
2271:src/display.c **** 	      *obp++ = *p++;
 7097              		.loc 1 2271 6 is_stmt 0 view .LVU2318
 7098 0994 002B     		cmp	r3, #0
 7099 0996 7FF7ADAD 		ble	.L537
 7100 099a 581E     		subs	r0, r3, #1
 7101 099c 4044     		add	r0, r0, r8
 7102 099e 08F1FF32 		add	r2, r8, #-1
 7103              	.LVL806:
 7104              	.L547:
2272:src/display.c **** 	      odig++;
 7105              		.loc 1 2272 8 is_stmt 1 discriminator 3 view .LVU2319
2272:src/display.c **** 	      odig++;
 7106              		.loc 1 2272 15 is_stmt 0 discriminator 3 view .LVU2320
 7107 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 7108              	.LVL807:
2272:src/display.c **** 	      odig++;
 7109              		.loc 1 2272 15 discriminator 3 view .LVU2321
 7110 09a6 02F8011F 		strb	r1, [r2, #1]!
2273:src/display.c **** 	    }
 7111              		.loc 1 2273 8 is_stmt 1 discriminator 3 view .LVU2322
2271:src/display.c **** 	      *obp++ = *p++;
 7112              		.loc 1 2271 25 discriminator 3 view .LVU2323
 7113              	.LVL808:
2271:src/display.c **** 	      *obp++ = *p++;
 7114              		.loc 1 2271 16 discriminator 3 view .LVU2324
2271:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccxUm1xs.s 			page 227


 7115              		.loc 1 2271 6 is_stmt 0 discriminator 3 view .LVU2325
 7116 09aa 9042     		cmp	r0, r2
 7117 09ac F9D1     		bne	.L547
 7118              	.LVL809:
2271:src/display.c **** 	      *obp++ = *p++;
 7119              		.loc 1 2271 6 discriminator 3 view .LVU2326
 7120 09ae 9844     		add	r8, r8, r3
 7121              	.LVL810:
2271:src/display.c **** 	      *obp++ = *p++;
 7122              		.loc 1 2271 6 discriminator 3 view .LVU2327
 7123 09b0 1D44     		add	r5, r5, r3
 7124 09b2 9FE5     		b	.L537
 7125              	.LVL811:
 7126              	.L705:
2214:src/display.c **** 
 7127              		.loc 1 2214 2 is_stmt 1 view .LVU2328
 7128 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 7129              		.loc 1 2214 9 is_stmt 0 view .LVU2329
 7130 09b8 09EB0E03 		add	r3, r9, lr
 7131              	.LVL812:
2214:src/display.c **** 
 7132              		.loc 1 2214 45 is_stmt 1 view .LVU2330
2214:src/display.c **** 
 7133              		.loc 1 2214 2 is_stmt 0 view .LVU2331
 7134 09bc 51B1     		cbz	r1, .L709
2203:src/display.c **** 	      extra_digits = 0;
 7135              		.loc 1 2203 37 view .LVU2332
 7136 09be 0225     		movs	r5, #2
 7137 09c0 00E4     		b	.L587
 7138              	.LVL813:
 7139              	.L708:
2203:src/display.c **** 	      extra_digits = 0;
 7140              		.loc 1 2203 37 view .LVU2333
 7141 09c2 079B     		ldr	r3, [sp, #28]
 7142              	.LVL814:
2294:src/display.c **** 	    *obp++ = '.';
 7143              		.loc 1 2294 10 view .LVU2334
 7144 09c4 0125     		movs	r5, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7145              		.loc 1 2295 10 view .LVU2335
 7146 09c6 0DF12608 		add	r8, sp, #38
 7147              	.LVL815:
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7148              		.loc 1 2295 10 view .LVU2336
 7149 09ca 27E7     		b	.L555
 7150              	.LVL816:
 7151              	.L606:
2265:src/display.c **** 	    *obp++ = '.';
 7152              		.loc 1 2265 10 view .LVU2337
 7153 09cc 0125     		movs	r5, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7154              		.loc 1 2266 10 view .LVU2338
 7155 09ce 0DF12608 		add	r8, sp, #38
 7156              	.LVL817:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7157              		.loc 1 2266 10 view .LVU2339
ARM GAS  /tmp/ccxUm1xs.s 			page 228


 7158 09d2 DFE7     		b	.L545
 7159              	.LVL818:
 7160              	.L709:
2021:src/display.c **** 	int odig = 0;
 7161              		.loc 1 2021 15 view .LVU2340
 7162 09d4 5946     		mov	r1, fp
 7163 09d6 6EE5     		b	.L527
 7164              	.L715:
 7165              		.align	2
 7166              	.L714:
 7167 09d8 00000000 		.word	.LANCHOR1
 7168 09dc D34D6210 		.word	274877907
 7169 09e0 18FCFFFF 		.word	-1000
 7170 09e4 00000000 		.word	.LANCHOR14
 7171 09e8 00000000 		.word	.LANCHOR13
 7172              		.cfi_endproc
 7173              	.LFE27:
 7175              		.section	.text.set_x,"ax",%progbits
 7176              		.align	1
 7177              		.p2align 2,,3
 7178              		.syntax unified
 7179              		.thumb
 7180              		.thumb_func
 7181              		.fpu fpv4-sp-d16
 7183              	set_x:
 7184              	.LVL819:
 7185              	.LFB26:
2009:src/display.c **** 	decNumber z;
 7186              		.loc 1 2009 66 is_stmt 1 view -0
 7187              		.cfi_startproc
 7188              		@ args = 0, pretend = 0, frame = 40
 7189              		@ frame_needed = 0, uses_anonymous_args = 0
2010:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7190              		.loc 1 2010 2 view .LVU2342
2011:src/display.c **** 
 7191              		.loc 1 2011 2 view .LVU2343
2009:src/display.c **** 	decNumber z;
 7192              		.loc 1 2009 66 is_stmt 0 view .LVU2344
 7193 0000 30B5     		push	{r4, r5, lr}
 7194              		.cfi_def_cfa_offset 12
 7195              		.cfi_offset 4, -12
 7196              		.cfi_offset 5, -8
 7197              		.cfi_offset 14, -4
 7198 0002 8BB0     		sub	sp, sp, #44
 7199              		.cfi_def_cfa_offset 56
2011:src/display.c **** 
 7200              		.loc 1 2011 6 view .LVU2345
 7201 0004 0C23     		movs	r3, #12
2014:src/display.c **** 	else
 7202              		.loc 1 2014 4 view .LVU2346
 7203 0006 01AD     		add	r5, sp, #4
2009:src/display.c **** 	decNumber z;
 7204              		.loc 1 2009 66 view .LVU2347
 7205 0008 0C46     		mov	r4, r1
2011:src/display.c **** 
 7206              		.loc 1 2011 6 view .LVU2348
 7207 000a 0093     		str	r3, [sp]
ARM GAS  /tmp/ccxUm1xs.s 			page 229


2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7208              		.loc 1 2013 2 is_stmt 1 view .LVU2349
2014:src/display.c **** 	else
 7209              		.loc 1 2014 4 is_stmt 0 view .LVU2350
 7210 000c 2946     		mov	r1, r5
 7211              	.LVL820:
2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7212              		.loc 1 2013 5 view .LVU2351
 7213 000e 42B1     		cbz	r2, .L717
2014:src/display.c **** 	else
 7214              		.loc 1 2014 4 is_stmt 1 view .LVU2352
 7215 0010 FFF7FEFF 		bl	decimal128ToNumber
 7216              	.LVL821:
2017:src/display.c ****       }
 7217              		.loc 1 2017 2 view .LVU2353
 7218 0014 2146     		mov	r1, r4
 7219 0016 2846     		mov	r0, r5
 7220 0018 6A46     		mov	r2, sp
 7221 001a FFF7FEFF 		bl	set_x_dn
 7222              	.LVL822:
2018:src/display.c **** 
 7223              		.loc 1 2018 7 is_stmt 0 view .LVU2354
 7224 001e 0BB0     		add	sp, sp, #44
 7225              		.cfi_remember_state
 7226              		.cfi_def_cfa_offset 12
 7227              		@ sp needed
 7228 0020 30BD     		pop	{r4, r5, pc}
 7229              	.LVL823:
 7230              	.L717:
 7231              		.cfi_restore_state
2016:src/display.c **** 	set_x_dn(&z, res, &digits);
 7232              		.loc 1 2016 4 is_stmt 1 view .LVU2355
 7233 0022 FFF7FEFF 		bl	decimal64ToNumber
 7234              	.LVL824:
2017:src/display.c ****       }
 7235              		.loc 1 2017 2 view .LVU2356
 7236 0026 2146     		mov	r1, r4
 7237 0028 2846     		mov	r0, r5
 7238 002a 6A46     		mov	r2, sp
 7239 002c FFF7FEFF 		bl	set_x_dn
 7240              	.LVL825:
2018:src/display.c **** 
 7241              		.loc 1 2018 7 is_stmt 0 view .LVU2357
 7242 0030 0BB0     		add	sp, sp, #44
 7243              		.cfi_def_cfa_offset 12
 7244              		@ sp needed
 7245 0032 30BD     		pop	{r4, r5, pc}
2018:src/display.c **** 
 7246              		.loc 1 2018 7 view .LVU2358
 7247              		.cfi_endproc
 7248              	.LFE26:
 7250              		.section	.text.format_reg,"ax",%progbits
 7251              		.align	1
 7252              		.p2align 2,,3
 7253              		.global	format_reg
 7254              		.syntax unified
 7255              		.thumb
ARM GAS  /tmp/ccxUm1xs.s 			page 230


 7256              		.thumb_func
 7257              		.fpu fpv4-sp-d16
 7259              	format_reg:
 7260              	.LVL826:
 7261              	.LFB28:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7262              		.loc 1 2425 45 is_stmt 1 view -0
 7263              		.cfi_startproc
 7264              		@ args = 0, pretend = 0, frame = 40
 7265              		@ frame_needed = 0, uses_anonymous_args = 0
2426:src/display.c **** 
 7266              		.loc 1 2426 2 view .LVU2360
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7267              		.loc 1 2425 45 is_stmt 0 view .LVU2361
 7268 0000 30B5     		push	{r4, r5, lr}
 7269              		.cfi_def_cfa_offset 12
 7270              		.cfi_offset 4, -12
 7271              		.cfi_offset 5, -8
 7272              		.cfi_offset 14, -4
 7273 0002 8BB0     		sub	sp, sp, #44
 7274              		.cfi_def_cfa_offset 56
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7275              		.loc 1 2425 45 view .LVU2362
 7276 0004 0C46     		mov	r4, r1
 7277 0006 0546     		mov	r5, r0
2426:src/display.c **** 
 7278              		.loc 1 2426 28 view .LVU2363
 7279 0008 FFF7FEFF 		bl	get_reg_n
 7280              	.LVL827:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7281              		.loc 1 2428 6 view .LVU2364
 7282 000c 154B     		ldr	r3, .L727
 7283 000e 1B68     		ldr	r3, [r3]
 7284 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7285              	.LVL828:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7286              		.loc 1 2428 2 is_stmt 1 view .LVU2365
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7287              		.loc 1 2428 5 is_stmt 0 view .LVU2366
 7288 0014 D207     		lsls	r2, r2, #31
 7289 0016 1DD4     		bmi	.L725
2431:src/display.c **** 	  decNumber x;
 7290              		.loc 1 2431 7 is_stmt 1 view .LVU2367
2431:src/display.c **** 	  decNumber x;
 7291              		.loc 1 2431 10 is_stmt 0 view .LVU2368
 7292 0018 44B1     		cbz	r4, .L726
 7293              	.L723:
2442:src/display.c ****       }
 7294              		.loc 1 2442 4 is_stmt 1 view .LVU2369
2442:src/display.c ****       }
 7295              		.loc 1 2442 24 is_stmt 0 view .LVU2370
 7296 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2442:src/display.c ****       }
 7297              		.loc 1 2442 4 view .LVU2371
 7298 001e 2146     		mov	r1, r4
 7299 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7300 0024 FFF7FEFF 		bl	set_x
ARM GAS  /tmp/ccxUm1xs.s 			page 231


 7301              	.LVL829:
2443:src/display.c **** 
 7302              		.loc 1 2443 7 view .LVU2372
 7303 0028 0BB0     		add	sp, sp, #44
 7304              		.cfi_remember_state
 7305              		.cfi_def_cfa_offset 12
 7306              		@ sp needed
 7307 002a 30BD     		pop	{r4, r5, pc}
 7308              	.LVL830:
 7309              	.L726:
 7310              		.cfi_restore_state
2431:src/display.c **** 	  decNumber x;
 7311              		.loc 1 2431 32 discriminator 1 view .LVU2373
 7312 002c 0E4A     		ldr	r2, .L727+4
2431:src/display.c **** 	  decNumber x;
 7313              		.loc 1 2431 23 discriminator 1 view .LVU2374
 7314 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7315 0030 012A     		cmp	r2, #1
 7316 0032 F2D9     		bls	.L723
 7317              	.LVL831:
 7318              	.LBB435:
 7319              	.LBI435:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7320              		.loc 1 2425 12 is_stmt 1 view .LVU2375
 7321              	.LBB436:
 7322              	.LBB437:
2432:src/display.c **** 	  int s;
 7323              		.loc 1 2432 4 view .LVU2376
2433:src/display.c **** 	  unsigned long long int v;
 7324              		.loc 1 2433 4 view .LVU2377
2434:src/display.c **** 
 7325              		.loc 1 2434 4 view .LVU2378
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7326              		.loc 1 2436 4 view .LVU2379
 7327 0034 2946     		mov	r1, r5
 7328 0036 01A8     		add	r0, sp, #4
 7329              	.LVL832:
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7330              		.loc 1 2436 4 is_stmt 0 view .LVU2380
 7331 0038 FFF7FEFF 		bl	getRegister
 7332              	.LVL833:
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7333              		.loc 1 2437 4 is_stmt 1 view .LVU2381
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7334              		.loc 1 2437 8 is_stmt 0 view .LVU2382
 7335 003c 01A8     		add	r0, sp, #4
 7336 003e 6946     		mov	r1, sp
 7337 0040 FFF7FEFF 		bl	dn_to_ull
 7338              	.LVL834:
2438:src/display.c **** 	}
 7339              		.loc 1 2438 4 is_stmt 1 view .LVU2383
 7340 0044 009A     		ldr	r2, [sp]
 7341 0046 FFF7FEFF 		bl	build_value
 7342              	.LVL835:
2438:src/display.c **** 	}
 7343              		.loc 1 2438 4 is_stmt 0 view .LVU2384
 7344 004a 2246     		mov	r2, r4
ARM GAS  /tmp/ccxUm1xs.s 			page 232


 7345 004c FFF7FEFF 		bl	set_int_x
 7346              	.LVL836:
 7347              	.LBE437:
 7348              	.LBE436:
 7349              	.LBE435:
2443:src/display.c **** 
 7350              		.loc 1 2443 7 view .LVU2385
 7351 0050 0BB0     		add	sp, sp, #44
 7352              		.cfi_remember_state
 7353              		.cfi_def_cfa_offset 12
 7354              		@ sp needed
 7355 0052 30BD     		pop	{r4, r5, pc}
 7356              	.LVL837:
 7357              	.L725:
 7358              		.cfi_restore_state
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7359              		.loc 1 2429 4 is_stmt 1 view .LVU2386
 7360 0054 2846     		mov	r0, r5
 7361              	.LVL838:
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7362              		.loc 1 2429 4 is_stmt 0 view .LVU2387
 7363 0056 FFF7FEFF 		bl	get_reg_n_int
 7364              	.LVL839:
 7365 005a 2246     		mov	r2, r4
 7366 005c FFF7FEFF 		bl	set_int_x
 7367              	.LVL840:
2443:src/display.c **** 
 7368              		.loc 1 2443 7 view .LVU2388
 7369 0060 0BB0     		add	sp, sp, #44
 7370              		.cfi_def_cfa_offset 12
 7371              		@ sp needed
 7372 0062 30BD     		pop	{r4, r5, pc}
 7373              	.LVL841:
 7374              	.L728:
2443:src/display.c **** 
 7375              		.loc 1 2443 7 view .LVU2389
 7376              		.align	2
 7377              	.L727:
 7378 0064 00000000 		.word	main_ram
 7379 0068 00000000 		.word	StateWhileOn
 7380              		.cfi_endproc
 7381              	.LFE28:
 7383              		.section	.text.set_status_right,"ax",%progbits
 7384              		.align	1
 7385              		.p2align 2,,3
 7386              		.syntax unified
 7387              		.thumb
 7388              		.thumb_func
 7389              		.fpu fpv4-sp-d16
 7391              	set_status_right:
 7392              	.LVL842:
 7393              	.LFB49:
3637:src/display.c ****       static void set_status_top(const char *str) {
3638:src/display.c **** 	if (no_status_top) return;
3639:src/display.c **** 	if (State2.runmode) {
3640:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3641:src/display.c **** 	}
ARM GAS  /tmp/ccxUm1xs.s 			page 233


3642:src/display.c **** 	else {
3643:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3644:src/display.c **** 	}
3645:src/display.c ****       }
3646:src/display.c **** #ifdef TOP_ROW
3647:src/display.c ****       static void set_status_top_always(const char *str) {
3648:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3649:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3650:src/display.c ****       }
3651:src/display.c **** #endif
3652:src/display.c **** 
3653:src/display.c ****       /*
3654:src/display.c ****        *  Display messages (global function)
3655:src/display.c ****        */
3656:src/display.c ****       extern void message(const char *str1, const char *str2)
3657:src/display.c ****       {
3658:src/display.c **** 	State2.disp_freeze = 0;
3659:src/display.c **** 	State2.disp_small = 0;
3660:src/display.c **** 	WasDataEntry = 0;
3661:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3662:src/display.c **** 	  // Complete redraw necessary
3663:src/display.c **** 	  DispMsg = str1;
3664:src/display.c **** 	  display();
3665:src/display.c **** 	}
3666:src/display.c **** 	else {
3667:src/display.c **** 	  if ( str2 != NULL ) {
3668:src/display.c **** 	    reset_disp();
3669:src/display.c **** 	    ShowRPN = 0;
3670:src/display.c **** 	    set_annunciators();
3671:src/display.c **** 	    set_digits_string( str2, 0 );
3672:src/display.c **** 	  }
3673:src/display.c **** 	  set_status( str1 );
3674:src/display.c **** 	  finish_display();// message
3675:src/display.c **** 	}
3676:src/display.c ****       }
3677:src/display.c **** 
3678:src/display.c **** #ifdef INCLUDE_STOPWATCH
3679:src/display.c **** 
3680:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3681:src/display.c **** 	int j = SEGS_EXP_BASE;
3682:src/display.c **** 	for (; *exponent!=0; exponent++) {
3683:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3684:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3685:src/display.c **** 	}
3686:src/display.c ****       }
3687:src/display.c **** 
3688:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3689:src/display.c ****       {
3690:src/display.c **** #ifndef REALBUILD
3691:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3692:src/display.c **** #endif
3693:src/display.c **** 	reset_disp();
3694:src/display.c **** 	set_dot(DEG);
3695:src/display.c **** 	set_digits_string( str2, 0 );
3696:src/display.c **** 	State2.disp_small = force_small;
3697:src/display.c **** 	if( exponent!=NULL ) {
3698:src/display.c **** 	  stopwatch_exponent(exponent);
ARM GAS  /tmp/ccxUm1xs.s 			page 234


3699:src/display.c **** 	}
3700:src/display.c **** 	set_status( str1 );
3701:src/display.c **** 	finish_display();
3702:src/display.c ****       }
3703:src/display.c **** 
3704:src/display.c **** 
3705:src/display.c **** #endif // INCLUDE_STOPWATCH
3706:src/display.c **** 
3707:src/display.c ****       /* Display the right hand characters from the given string.
3708:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3709:src/display.c ****        * and reduce font size if required.
3710:src/display.c ****        */
3711:src/display.c ****       static void set_status_right(const char *str) {
 7394              		.loc 1 3711 53 is_stmt 1 view -0
 7395              		.cfi_startproc
 7396              		@ args = 0, pretend = 0, frame = 0
 7397              		@ frame_needed = 0, uses_anonymous_args = 0
3712:src/display.c **** 	unsigned int x = 0;
 7398              		.loc 1 3712 2 view .LVU2391
3713:src/display.c **** 	const char *p;
 7399              		.loc 1 3713 2 view .LVU2392
3714:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7400              		.loc 1 3714 2 view .LVU2393
3711:src/display.c **** 	unsigned int x = 0;
 7401              		.loc 1 3711 53 is_stmt 0 view .LVU2394
 7402 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7403              		.cfi_def_cfa_offset 28
 7404              		.cfi_offset 4, -28
 7405              		.cfi_offset 5, -24
 7406              		.cfi_offset 6, -20
 7407              		.cfi_offset 7, -16
 7408              		.cfi_offset 8, -12
 7409              		.cfi_offset 9, -8
 7410              		.cfi_offset 14, -4
 7411              		.loc 1 3714 23 view .LVU2395
 7412 0004 194B     		ldr	r3, .L744
 7413              		.loc 1 3714 41 view .LVU2396
 7414 0006 93F91630 		ldrsb	r3, [r3, #22]
 7415 000a 002B     		cmp	r3, #0
3711:src/display.c **** 	unsigned int x = 0;
 7416              		.loc 1 3711 53 view .LVU2397
 7417 000c 83B0     		sub	sp, sp, #12
 7418              		.cfi_def_cfa_offset 40
3711:src/display.c **** 	unsigned int x = 0;
 7419              		.loc 1 3711 53 view .LVU2398
 7420 000e 0646     		mov	r6, r0
 7421              		.loc 1 3714 41 view .LVU2399
 7422 0010 23DA     		bge	.L743
 7423              	.LVL843:
 7424              	.L730:
 7425              		.loc 1 3714 12 view .LVU2400
 7426 0012 4FF00108 		mov	r8, #1
3715:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7427              		.loc 1 3715 36 view .LVU2401
 7428 0016 4FF48077 		mov	r7, #256
 7429              	.L731:
 7430              	.LVL844:
ARM GAS  /tmp/ccxUm1xs.s 			page 235


3716:src/display.c **** 
3717:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7431              		.loc 1 3717 2 is_stmt 1 discriminator 4 view .LVU2402
 7432              		.loc 1 3717 14 discriminator 4 view .LVU2403
 7433              		.loc 1 3717 2 is_stmt 0 discriminator 4 view .LVU2404
 7434 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7435 001c 3446     		mov	r4, r6
 7436 001e 1BB1     		cbz	r3, .L732
 7437              	.LVL845:
 7438              	.L733:
 7439              		.loc 1 3717 30 is_stmt 1 discriminator 3 view .LVU2405
 7440              		.loc 1 3717 26 discriminator 3 view .LVU2406
 7441              		.loc 1 3717 14 discriminator 3 view .LVU2407
 7442              		.loc 1 3717 2 is_stmt 0 discriminator 3 view .LVU2408
 7443 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7444              	.LVL846:
 7445              		.loc 1 3717 2 discriminator 3 view .LVU2409
 7446 0024 002B     		cmp	r3, #0
 7447 0026 FBD1     		bne	.L733
 7448              	.L732:
3712:src/display.c **** 	const char *p;
 7449              		.loc 1 3712 15 view .LVU2410
 7450 0028 0025     		movs	r5, #0
 7451 002a 06E0     		b	.L734
 7452              	.LVL847:
 7453              	.L735:
 7454              	.LBB438:
3718:src/display.c **** 	while (--p >= str) {
3719:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7455              		.loc 1 3719 27 view .LVU2411
 7456 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3720:src/display.c **** 
3721:src/display.c **** 	  x += charlengths(c);
 7457              		.loc 1 3721 9 view .LVU2412
 7458 002e 3844     		add	r0, r0, r7
 7459 0030 FFF7FEFF 		bl	charlengths
 7460              	.LVL848:
 7461              		.loc 1 3721 6 view .LVU2413
 7462 0034 0544     		add	r5, r5, r0
 7463              	.LVL849:
3722:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7464              		.loc 1 3722 4 is_stmt 1 view .LVU2414
 7465              		.loc 1 3722 7 is_stmt 0 view .LVU2415
 7466 0036 4B2D     		cmp	r5, #75
 7467 0038 03D8     		bhi	.L736
 7468              	.LVL850:
 7469              	.L734:
3719:src/display.c **** 
 7470              		.loc 1 3719 4 is_stmt 1 view .LVU2416
3719:src/display.c **** 
 7471              		.loc 1 3719 4 is_stmt 0 view .LVU2417
 7472              	.LBE438:
3718:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7473              		.loc 1 3718 8 is_stmt 1 view .LVU2418
 7474 003a A146     		mov	r9, r4
 7475 003c 013C     		subs	r4, r4, #1
 7476              	.LVL851:
ARM GAS  /tmp/ccxUm1xs.s 			page 236


 7477              	.LBB439:
3721:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7478              		.loc 1 3721 4 view .LVU2419
3721:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7479              		.loc 1 3721 4 is_stmt 0 view .LVU2420
 7480              	.LBE439:
3718:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7481              		.loc 1 3718 8 view .LVU2421
 7482 003e A642     		cmp	r6, r4
 7483 0040 F4D9     		bls	.L735
 7484              	.LVL852:
 7485              	.L736:
3723:src/display.c **** 	    break;
3724:src/display.c **** 	}
3725:src/display.c **** 	set_status_sized(p+1, toolarge);
 7486              		.loc 1 3725 2 is_stmt 1 view .LVU2422
 7487              	.LBB440:
 7488              	.LBI440:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7489              		.loc 1 3476 19 view .LVU2423
 7490              	.LBB441:
3477:src/display.c ****       }
 7491              		.loc 1 3477 2 view .LVU2424
 7492 0042 40F24A23 		movw	r3, #586
 7493 0046 0093     		str	r3, [sp]
 7494 0048 4146     		mov	r1, r8
 7495 004a 4846     		mov	r0, r9
 7496 004c 8E23     		movs	r3, #142
 7497 004e 4A22     		movs	r2, #74
 7498 0050 FFF7FEFF 		bl	s_s_sized
 7499              	.LVL853:
3477:src/display.c ****       }
 7500              		.loc 1 3477 2 is_stmt 0 view .LVU2425
 7501              	.LBE441:
 7502              	.LBE440:
3726:src/display.c ****       }
 7503              		.loc 1 3726 7 view .LVU2426
 7504 0054 03B0     		add	sp, sp, #12
 7505              		.cfi_remember_state
 7506              		.cfi_def_cfa_offset 28
 7507              		@ sp needed
 7508 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7509              	.LVL854:
 7510              	.L743:
 7511              		.cfi_restore_state
 7512              	.LBB442:
 7513              	.LBI442:
3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7514              		.loc 1 3624 18 is_stmt 1 view .LVU2427
 7515              	.LBB443:
3625:src/display.c ****       }
 7516              		.loc 1 3625 2 view .LVU2428
3625:src/display.c ****       }
 7517              		.loc 1 3625 9 is_stmt 0 view .LVU2429
 7518 005a 0021     		movs	r1, #0
 7519 005c FFF7FEFF 		bl	pixel_length
 7520              	.LVL855:
ARM GAS  /tmp/ccxUm1xs.s 			page 237


3625:src/display.c ****       }
 7521              		.loc 1 3625 9 view .LVU2430
 7522              	.LBE443:
 7523              	.LBE442:
3714:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7524              		.loc 1 3714 41 view .LVU2431
 7525 0060 4B28     		cmp	r0, #75
 7526 0062 D6DC     		bgt	.L730
3714:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7527              		.loc 1 3714 12 view .LVU2432
 7528 0064 4FF00008 		mov	r8, #0
3715:src/display.c **** 
 7529              		.loc 1 3715 36 view .LVU2433
 7530 0068 4746     		mov	r7, r8
 7531 006a D6E7     		b	.L731
 7532              	.L745:
 7533              		.align	2
 7534              	.L744:
 7535 006c 00000000 		.word	StateWhileOn
 7536              		.cfi_endproc
 7537              	.LFE49:
 7539              		.section	.text.set_status_top.part.0,"ax",%progbits
 7540              		.align	1
 7541              		.p2align 2,,3
 7542              		.syntax unified
 7543              		.thumb
 7544              		.thumb_func
 7545              		.fpu fpv4-sp-d16
 7547              	set_status_top.part.0:
 7548              	.LVL856:
 7549              	.LFB58:
3637:src/display.c **** 	if (no_status_top) return;
 7550              		.loc 1 3637 19 is_stmt 1 view -0
 7551              		.cfi_startproc
 7552              		@ args = 0, pretend = 0, frame = 0
 7553              		@ frame_needed = 0, uses_anonymous_args = 0
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7554              		.loc 1 3639 2 view .LVU2435
3637:src/display.c **** 	if (no_status_top) return;
 7555              		.loc 1 3637 19 is_stmt 0 view .LVU2436
 7556 0000 10B5     		push	{r4, lr}
 7557              		.cfi_def_cfa_offset 8
 7558              		.cfi_offset 4, -8
 7559              		.cfi_offset 14, -4
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7560              		.loc 1 3639 6 view .LVU2437
 7561 0002 184B     		ldr	r3, .L756
 7562 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7563              		.loc 1 3639 5 view .LVU2438
 7564 0006 13F04001 		ands	r1, r3, #64
3637:src/display.c **** 	if (no_status_top) return;
 7565              		.loc 1 3637 19 view .LVU2439
 7566 000a 82B0     		sub	sp, sp, #8
 7567              		.cfi_def_cfa_offset 16
3637:src/display.c **** 	if (no_status_top) return;
 7568              		.loc 1 3637 19 view .LVU2440
ARM GAS  /tmp/ccxUm1xs.s 			page 238


 7569 000c 0446     		mov	r4, r0
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7570              		.loc 1 3639 5 view .LVU2441
 7571 000e 0DD0     		beq	.L747
3640:src/display.c **** 	}
 7572              		.loc 1 3640 4 is_stmt 1 view .LVU2442
 7573 0010 1A06     		lsls	r2, r3, #24
 7574 0012 18D5     		bpl	.L754
 7575 0014 0121     		movs	r1, #1
 7576              	.LVL857:
 7577              	.L748:
 7578              	.LBB444:
 7579              	.LBI444:
3479:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7580              		.loc 1 3479 19 view .LVU2443
 7581              	.LBB445:
3480:src/display.c ****       }
 7582              		.loc 1 3480 2 view .LVU2444
 7583 0016 4FF45373 		mov	r3, #844
 7584 001a 0093     		str	r3, [sp]
 7585 001c 2046     		mov	r0, r4
 7586 001e 40F24A23 		movw	r3, #586
 7587 0022 2B22     		movs	r2, #43
 7588 0024 FFF7FEFF 		bl	s_s_sized
 7589              	.LVL858:
3480:src/display.c ****       }
 7590              		.loc 1 3480 2 is_stmt 0 view .LVU2445
 7591              	.LBE445:
 7592              	.LBE444:
3645:src/display.c **** #ifdef TOP_ROW
 7593              		.loc 1 3645 7 view .LVU2446
 7594 0028 02B0     		add	sp, sp, #8
 7595              		.cfi_remember_state
 7596              		.cfi_def_cfa_offset 8
 7597              		@ sp needed
 7598 002a 10BD     		pop	{r4, pc}
 7599              	.LVL859:
 7600              	.L747:
 7601              		.cfi_restore_state
3643:src/display.c **** 	}
 7602              		.loc 1 3643 4 is_stmt 1 view .LVU2447
 7603 002c 1B06     		lsls	r3, r3, #24
 7604 002e 12D5     		bpl	.L755
 7605 0030 0121     		movs	r1, #1
 7606              	.LVL860:
 7607              	.L750:
 7608              	.LBB446:
 7609              	.LBI446:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7610              		.loc 1 3476 19 view .LVU2448
 7611              	.LBB447:
3477:src/display.c ****       }
 7612              		.loc 1 3477 2 view .LVU2449
 7613 0032 40F24A23 		movw	r3, #586
 7614 0036 0093     		str	r3, [sp]
 7615 0038 2046     		mov	r0, r4
 7616 003a 8E23     		movs	r3, #142
ARM GAS  /tmp/ccxUm1xs.s 			page 239


 7617 003c 4A22     		movs	r2, #74
 7618 003e FFF7FEFF 		bl	s_s_sized
 7619              	.LVL861:
3477:src/display.c ****       }
 7620              		.loc 1 3477 2 is_stmt 0 view .LVU2450
 7621              	.LBE447:
 7622              	.LBE446:
3645:src/display.c **** #ifdef TOP_ROW
 7623              		.loc 1 3645 7 view .LVU2451
 7624 0042 02B0     		add	sp, sp, #8
 7625              		.cfi_remember_state
 7626              		.cfi_def_cfa_offset 8
 7627              		@ sp needed
 7628 0044 10BD     		pop	{r4, pc}
 7629              	.LVL862:
 7630              	.L754:
 7631              		.cfi_restore_state
 7632              	.LBB448:
 7633              	.LBI448:
3627:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7634              		.loc 1 3627 18 is_stmt 1 view .LVU2452
 7635              	.LBB449:
3628:src/display.c ****       }
 7636              		.loc 1 3628 2 view .LVU2453
3628:src/display.c ****       }
 7637              		.loc 1 3628 9 is_stmt 0 view .LVU2454
 7638 0046 0021     		movs	r1, #0
 7639 0048 FFF7FEFF 		bl	pixel_length
 7640              	.LVL863:
3628:src/display.c ****       }
 7641              		.loc 1 3628 9 view .LVU2455
 7642              	.LBE449:
 7643              	.LBE448:
3640:src/display.c **** 	}
 7644              		.loc 1 3640 4 view .LVU2456
 7645 004c 2C28     		cmp	r0, #44
 7646 004e D4BF     		ite	le
 7647 0050 0021     		movle	r1, #0
 7648 0052 0121     		movgt	r1, #1
 7649 0054 DFE7     		b	.L748
 7650              	.LVL864:
 7651              	.L755:
 7652              	.LBB450:
 7653              	.LBI450:
3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7654              		.loc 1 3624 18 is_stmt 1 view .LVU2457
 7655              	.LBB451:
3625:src/display.c ****       }
 7656              		.loc 1 3625 2 view .LVU2458
3625:src/display.c ****       }
 7657              		.loc 1 3625 9 is_stmt 0 view .LVU2459
 7658 0056 FFF7FEFF 		bl	pixel_length
 7659              	.LVL865:
3625:src/display.c ****       }
 7660              		.loc 1 3625 9 view .LVU2460
 7661              	.LBE451:
 7662              	.LBE450:
ARM GAS  /tmp/ccxUm1xs.s 			page 240


3643:src/display.c **** 	}
 7663              		.loc 1 3643 4 view .LVU2461
 7664 005a 4B28     		cmp	r0, #75
 7665 005c D4BF     		ite	le
 7666 005e 0021     		movle	r1, #0
 7667 0060 0121     		movgt	r1, #1
 7668 0062 E6E7     		b	.L750
 7669              	.L757:
 7670              		.align	2
 7671              	.L756:
 7672 0064 00000000 		.word	StateWhileOn
 7673              		.cfi_endproc
 7674              	.LFE58:
 7676              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7677              		.align	2
 7678              	.LC2:
 7679 0000 32630600 		.ascii	"2c\006\000"
 7680              		.align	2
 7681              	.LC3:
 7682 0004 07C63C00 		.ascii	"\007\306<\000"
 7683              		.align	2
 7684              	.LC4:
 7685 0008 07876900 		.ascii	"\007\207i\000"
 7686              		.align	2
 7687              	.LC5:
 7688 000c 07C67900 		.ascii	"\007\306y\000"
 7689              		.align	2
 7690              	.LC6:
 7691 0010 07950600 		.ascii	"\007\225\006\000"
 7692              		.align	2
 7693              	.LC7:
 7694 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7694      060600
 7695 001b 00       		.align	2
 7696              	.LC8:
 7697 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7697      060600
 7698 0023 00       		.align	2
 7699              	.LC9:
 7700 0024 07C74400 		.ascii	"\007\307D\000"
 7701              		.align	2
 7702              	.LC10:
 7703 0028 07872000 		.ascii	"\007\207 \000"
 7704              		.align	2
 7705              	.LC11:
 7706 002c 4C656E67 		.ascii	"Length:\000"
 7706      74683A00 
 7707              		.align	2
 7708              	.LC12:
 7709 0034 5265616C 		.ascii	"Real:\000"
 7709      3A00
 7710 003a 0000     		.align	2
 7711              	.LC13:
 7712 003c 416E676C 		.ascii	"Angle:\000"
 7712      653A00
 7713 0043 00       		.align	2
 7714              	.LC14:
ARM GAS  /tmp/ccxUm1xs.s 			page 241


 7715 0044 496D6167 		.ascii	"Imag:\000"
 7715      3A00
 7716 004a 0000     		.align	2
 7717              	.LC15:
 7718 004c 07876A00 		.ascii	"\007\207j\000"
 7719              		.align	2
 7720              	.LC16:
 7721 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7721      0700
 7722 0056 0000     		.align	2
 7723              	.LC17:
 7724 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7724      00
 7725 005d 000000   		.align	2
 7726              	.LC18:
 7727 0060 07C73C00 		.ascii	"\007\307<\000"
 7728              		.align	2
 7729              	.LC19:
 7730 0064 07C77900 		.ascii	"\007\307y\000"
 7731              		.align	2
 7732              	.LC21:
 7733 0068 07E43F00 		.ascii	"\007\344?\000"
 7734              		.section	.text.annunciators,"ax",%progbits
 7735              		.align	1
 7736              		.p2align 2,,3
 7737              		.syntax unified
 7738              		.thumb
 7739              		.thumb_func
 7740              		.fpu fpv4-sp-d16
 7742              	annunciators:
 7743              	.LFB16:
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7744              		.loc 1 609 36 is_stmt 1 view -0
 7745              		.cfi_startproc
 7746              		@ args = 0, pretend = 0, frame = 128
 7747              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 7748              		.loc 1 611 7 view .LVU2463
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7749              		.loc 1 609 36 is_stmt 0 view .LVU2464
 7750 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7751              		.cfi_def_cfa_offset 28
 7752              		.cfi_offset 4, -28
 7753              		.cfi_offset 5, -24
 7754              		.cfi_offset 6, -20
 7755              		.cfi_offset 7, -16
 7756              		.cfi_offset 8, -12
 7757              		.cfi_offset 9, -8
 7758              		.cfi_offset 14, -4
 623:src/display.c **** #  endif
 7759              		.loc 1 623 38 view .LVU2465
 7760 0004 C44C     		ldr	r4, .L909
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7761              		.loc 1 609 36 view .LVU2466
 7762 0006 A3B0     		sub	sp, sp, #140
 7763              		.cfi_def_cfa_offset 168
 7764              	.LVL866:
ARM GAS  /tmp/ccxUm1xs.s 			page 242


 612:src/display.c ****       int n;
 7765              		.loc 1 612 7 is_stmt 1 view .LVU2467
 613:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7766              		.loc 1 613 7 view .LVU2468
 614:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7767              		.loc 1 614 7 view .LVU2469
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7768              		.loc 1 615 7 view .LVU2470
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7769              		.loc 1 615 43 is_stmt 0 view .LVU2471
 7770 0008 FFF7FEFF 		bl	cur_shift
 7771              	.LVL867:
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7772              		.loc 1 615 18 view .LVU2472
 7773 000c C34B     		ldr	r3, .L909+4
 623:src/display.c **** #  endif
 7774              		.loc 1 623 38 view .LVU2473
 7775 000e 2268     		ldr	r2, [r4]
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7776              		.loc 1 615 18 view .LVU2474
 7777 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7778              	.LVL868:
 623:src/display.c **** #  endif
 7779              		.loc 1 623 7 is_stmt 1 view .LVU2475
 623:src/display.c **** #  endif
 7780              		.loc 1 623 38 is_stmt 0 view .LVU2476
 7781 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7782              		.loc 1 654 7 view .LVU2477
 7783 0018 0CAE     		add	r6, sp, #48
 7784              	.LVL869:
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7785              		.loc 1 654 7 view .LVU2478
 7786 001a 2A22     		movs	r2, #42
 7787 001c 0021     		movs	r1, #0
 7788 001e 3046     		mov	r0, r6
 7789 0020 FFF7FEFF 		bl	xset
 7790              	.LVL870:
 655:src/display.c ****       
 7791              		.loc 1 655 7 view .LVU2479
 7792 0024 2A22     		movs	r2, #42
 7793 0026 0021     		movs	r1, #0
 7794 0028 17A8     		add	r0, sp, #92
 7795              	.LVL871:
 655:src/display.c ****       
 7796              		.loc 1 655 7 view .LVU2480
 7797 002a FFF7FEFF 		bl	xset
 7798              	.LVL872:
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7799              		.loc 1 657 11 view .LVU2481
 7800 002e 2368     		ldr	r3, [r4]
 7801 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7802              		.loc 1 657 10 view .LVU2482
 7803 0034 D107     		lsls	r1, r2, #31
 623:src/display.c **** #  endif
 7804              		.loc 1 623 17 view .LVU2483
ARM GAS  /tmp/ccxUm1xs.s 			page 243


 7805 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7806              	.LVL873:
 626:src/display.c **** #  else
 7807              		.loc 1 626 7 is_stmt 1 view .LVU2484
 631:src/display.c **** #  else
 7808              		.loc 1 631 7 view .LVU2485
 641:src/display.c **** #else
 7809              		.loc 1 641 7 view .LVU2486
 649:src/display.c **** #else
 7810              		.loc 1 649 7 view .LVU2487
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7811              		.loc 1 654 7 view .LVU2488
 655:src/display.c ****       
 7812              		.loc 1 655 7 view .LVU2489
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7813              		.loc 1 657 7 view .LVU2490
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7814              		.loc 1 657 10 is_stmt 0 view .LVU2491
 7815 003a 00F1C380 		bmi	.L892
 697:src/display.c **** #else
 7816              		.loc 1 697 12 is_stmt 1 view .LVU2492
 697:src/display.c **** #else
 7817              		.loc 1 697 15 is_stmt 0 view .LVU2493
 7818 003e 002F     		cmp	r7, #0
 7819 0040 79D0     		beq	.L893
 7820              	.L773:
 783:src/display.c **** 	  *p2++ = '\007';
 7821              		.loc 1 783 2 is_stmt 1 view .LVU2494
 783:src/display.c **** 	  *p2++ = '\007';
 7822              		.loc 1 783 6 is_stmt 0 view .LVU2495
 7823 0042 B74D     		ldr	r5, .L909+8
 7824 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 783:src/display.c **** 	  *p2++ = '\007';
 7825              		.loc 1 783 5 view .LVU2496
 7826 0046 9A07     		lsls	r2, r3, #30
 7827 0048 40F19781 		bpl	.L782
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7828              		.loc 1 784 4 is_stmt 1 view .LVU2497
 7829              	.LVL874:
 785:src/display.c **** 	  *p2++ = shift_char;
 7830              		.loc 1 785 4 view .LVU2498
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7831              		.loc 1 784 10 is_stmt 0 view .LVU2499
 7832 004c 4EF20742 		movw	r2, #58375
 787:src/display.c **** 	}
 7833              		.loc 1 787 10 view .LVU2500
 7834 0050 1423     		movs	r3, #20
 786:src/display.c **** 	  *p2++ = '\024';
 7835              		.loc 1 786 10 view .LVU2501
 7836 0052 8DF85E80 		strb	r8, [sp, #94]
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7837              		.loc 1 784 10 view .LVU2502
 7838 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 786:src/display.c **** 	  *p2++ = '\024';
 7839              		.loc 1 786 4 is_stmt 1 view .LVU2503
 7840              	.LVL875:
 787:src/display.c **** 	}
ARM GAS  /tmp/ccxUm1xs.s 			page 244


 7841              		.loc 1 787 4 view .LVU2504
 787:src/display.c **** 	}
 7842              		.loc 1 787 10 is_stmt 0 view .LVU2505
 7843 005a 8DF85F30 		strb	r3, [sp, #95]
 787:src/display.c **** 	}
 7844              		.loc 1 787 7 view .LVU2506
 7845 005e 0DF16008 		add	r8, sp, #96
 7846              	.LVL876:
 7847              	.L783:
 796:src/display.c **** 	  *p2++ = '\007';
 7848              		.loc 1 796 2 is_stmt 1 view .LVU2507
 796:src/display.c **** 	  *p2++ = '\007';
 7849              		.loc 1 796 6 is_stmt 0 view .LVU2508
 7850 0062 FFF7FEFF 		bl	get_trig_mode
 7851              	.LVL877:
 797:src/display.c **** 	  *p2++ = '\207';
 7852              		.loc 1 797 10 view .LVU2509
 7853 0066 0723     		movs	r3, #7
 796:src/display.c **** 	  *p2++ = '\007';
 7854              		.loc 1 796 5 view .LVU2510
 7855 0068 0228     		cmp	r0, #2
 798:src/display.c **** 	  *p2++ = '\007';	    
 7856              		.loc 1 798 10 view .LVU2511
 7857 006a 4FF08702 		mov	r2, #135
 797:src/display.c **** 	  *p2++ = '\207';
 7858              		.loc 1 797 10 view .LVU2512
 7859 006e 88F80030 		strb	r3, [r8]
 796:src/display.c **** 	  *p2++ = '\007';
 7860              		.loc 1 796 5 view .LVU2513
 7861 0072 00F01182 		beq	.L894
 802:src/display.c **** 	  *p2++ = '\207';
 7862              		.loc 1 802 4 is_stmt 1 view .LVU2514
 7863              	.LVL878:
 803:src/display.c **** 	  *p2++ = ' ';
 7864              		.loc 1 803 4 view .LVU2515
 804:src/display.c **** 	}
 7865              		.loc 1 804 10 is_stmt 0 view .LVU2516
 7866 0076 2023     		movs	r3, #32
 803:src/display.c **** 	  *p2++ = ' ';
 7867              		.loc 1 803 10 view .LVU2517
 7868 0078 88F80120 		strb	r2, [r8, #1]
 804:src/display.c **** 	}
 7869              		.loc 1 804 4 is_stmt 1 view .LVU2518
 804:src/display.c **** 	}
 7870              		.loc 1 804 10 is_stmt 0 view .LVU2519
 7871 007c 88F80230 		strb	r3, [r8, #2]
 804:src/display.c **** 	}
 7872              		.loc 1 804 7 view .LVU2520
 7873 0080 08F10308 		add	r8, r8, #3
 7874              	.LVL879:
 7875              	.L785:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7876              		.loc 1 808 2 is_stmt 1 view .LVU2521
 808:src/display.c **** 	p2 = scopy(p2, q);
 7877              		.loc 1 808 7 is_stmt 0 view .LVU2522
 7878 0084 FFF7FEFF 		bl	is_dblmode
 7879              	.LVL880:
ARM GAS  /tmp/ccxUm1xs.s 			page 245


 808:src/display.c **** 	p2 = scopy(p2, q);
 7880              		.loc 1 808 34 view .LVU2523
 7881 0088 A64B     		ldr	r3, .L909+12
 7882 008a A74A     		ldr	r2, .L909+16
 808:src/display.c **** 	p2 = scopy(p2, q);
 7883              		.loc 1 808 7 view .LVU2524
 7884 008c 0146     		mov	r1, r0
 7885              	.LVL881:
 809:src/display.c **** #else
 7886              		.loc 1 809 2 is_stmt 1 view .LVU2525
 809:src/display.c **** #else
 7887              		.loc 1 809 7 is_stmt 0 view .LVU2526
 7888 008e 0029     		cmp	r1, #0
 7889 0090 14BF     		ite	ne
 7890 0092 1146     		movne	r1, r2
 7891 0094 1946     		moveq	r1, r3
 7892              	.LVL882:
 809:src/display.c **** #else
 7893              		.loc 1 809 7 view .LVU2527
 7894 0096 4046     		mov	r0, r8
 7895 0098 FFF7FEFF 		bl	scopy
 7896              	.LVL883:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7897              		.loc 1 825 16 view .LVU2528
 7898 009c 2368     		ldr	r3, [r4]
 7899 009e 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7900 00a2 C3F30113 		ubfx	r3, r3, #4, #2
 7901              	.LVL884:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7902              		.loc 1 825 2 is_stmt 1 view .LVU2529
 7903 00a6 012B     		cmp	r3, #1
 7904 00a8 00F0FD81 		beq	.L833
 7905 00ac 9F49     		ldr	r1, .L909+20
 7906 00ae A04A     		ldr	r2, .L909+24
 7907 00b0 022B     		cmp	r3, #2
 7908 00b2 08BF     		it	eq
 7909 00b4 1146     		moveq	r1, r2
 7910              	.L787:
 7911              	.LVL885:
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7912              		.loc 1 842 2 view .LVU2530
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7913              		.loc 1 842 6 is_stmt 0 view .LVU2531
 7914 00b6 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7915              		.loc 1 842 5 view .LVU2532
 7916 00b8 5B07     		lsls	r3, r3, #29
 843:src/display.c **** 	} // no need to skip y display with arrow here
 7917              		.loc 1 843 4 is_stmt 1 view .LVU2533
 7918 00ba 48BF     		it	mi
 7919 00bc 9D49     		ldrmi	r1, .L909+28
 7920              	.LVL886:
 846:src/display.c **** 	}
 7921              		.loc 1 846 4 view .LVU2534
 846:src/display.c **** 	}
 7922              		.loc 1 846 9 is_stmt 0 view .LVU2535
 7923 00be FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccxUm1xs.s 			page 246


 7924              	.LVL887:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7925              		.loc 1 850 2 is_stmt 1 view .LVU2536
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7926              		.loc 1 850 18 is_stmt 0 view .LVU2537
 7927 00c2 2368     		ldr	r3, [r4]
 7928 00c4 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7929              		.loc 1 850 5 view .LVU2538
 7930 00c8 13F0060F 		tst	r3, #6
 7931 00cc 04D0     		beq	.L790
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7932              		.loc 1 850 32 discriminator 1 view .LVU2539
 7933 00ce 03F04102 		and	r2, r3, #65
 7934 00d2 412A     		cmp	r2, #65
 7935 00d4 00F01782 		beq	.L895
 7936              	.L790:
 860:src/display.c **** 	  q = "\007\307<";
 7937              		.loc 1 860 7 is_stmt 1 view .LVU2540
 860:src/display.c **** 	  q = "\007\307<";
 7938              		.loc 1 860 22 is_stmt 0 view .LVU2541
 7939 00d8 DFF86C92 		ldr	r9, .L909+48
 7940 00dc D9F80020 		ldr	r2, [r9]
 860:src/display.c **** 	  q = "\007\307<";
 7941              		.loc 1 860 10 view .LVU2542
 7942 00e0 012A     		cmp	r2, #1
 7943 00e2 00F0CA81 		beq	.L793
 860:src/display.c **** 	  q = "\007\307<";
 7944              		.loc 1 860 43 discriminator 1 view .LVU2543
 7945 00e6 03F0C101 		and	r1, r3, #193
 7946 00ea C129     		cmp	r1, #193
 7947 00ec 00F0C581 		beq	.L793
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7948              		.loc 1 864 7 is_stmt 1 view .LVU2544
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7949              		.loc 1 864 11 is_stmt 0 view .LVU2545
 7950 00f0 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7951              		.loc 1 864 10 view .LVU2546
 7952 00f2 11F0C00F 		tst	r1, #192
 7953 00f6 00F04B81 		beq	.L896
 7954              	.L796:
 865:src/display.c **** 	  p = scopy(p, q);
 7955              		.loc 1 865 4 is_stmt 1 view .LVU2547
 865:src/display.c **** 	  p = scopy(p, q);
 7956              		.loc 1 865 28 is_stmt 0 view .LVU2548
 7957 00fa 8F4A     		ldr	r2, .L909+32
 7958 00fc 8F49     		ldr	r1, .L909+36
 7959 00fe 13F0200F 		tst	r3, #32
 7960              	.LVL888:
 866:src/display.c **** 	}
 7961              		.loc 1 866 4 is_stmt 1 view .LVU2549
 866:src/display.c **** 	}
 7962              		.loc 1 866 8 is_stmt 0 view .LVU2550
 7963 0102 08BF     		it	eq
 7964 0104 1146     		moveq	r1, r2
 7965              	.LVL889:
ARM GAS  /tmp/ccxUm1xs.s 			page 247


 866:src/display.c **** 	}
 7966              		.loc 1 866 8 view .LVU2551
 7967 0106 3046     		mov	r0, r6
 7968 0108 FFF7FEFF 		bl	scopy
 7969              	.LVL890:
 866:src/display.c **** 	}
 7970              		.loc 1 866 8 view .LVU2552
 7971 010c D9F80020 		ldr	r2, [r9]
 7972 0110 8046     		mov	r8, r0
 7973              	.LVL891:
 7974              	.L795:
 882:src/display.c **** 	    q = "\007\307y";
 7975              		.loc 1 882 4 is_stmt 1 view .LVU2553
 882:src/display.c **** 	    q = "\007\307y";
 7976              		.loc 1 882 7 is_stmt 0 view .LVU2554
 7977 0112 022A     		cmp	r2, #2
 7978 0114 00F0C981 		beq	.L897
 7979              	.L798:
 888:src/display.c **** 	  decNumber y;
 7980              		.loc 1 888 2 is_stmt 1 view .LVU2555
 888:src/display.c **** 	  decNumber y;
 7981              		.loc 1 888 6 is_stmt 0 view .LVU2556
 7982 0118 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 888:src/display.c **** 	  decNumber y;
 7983              		.loc 1 888 5 view .LVU2557
 7984 011a 5A06     		lsls	r2, r3, #25
 7985 011c 00F1AA80 		bmi	.L762
 7986              	.LBB462:
 7987              	.LBB463:
3649:src/display.c ****       }
 7988              		.loc 1 3649 2 is_stmt 1 view .LVU2558
 7989 0120 1B06     		lsls	r3, r3, #24
 7990 0122 42D4     		bmi	.L841
 7991              	.LVL892:
 7992              	.L903:
 7993              	.LBB464:
 7994              	.LBI464:
3627:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7995              		.loc 1 3627 18 view .LVU2559
 7996              	.LBB465:
3628:src/display.c ****       }
 7997              		.loc 1 3628 2 view .LVU2560
3628:src/display.c ****       }
 7998              		.loc 1 3628 9 is_stmt 0 view .LVU2561
 7999 0124 0021     		movs	r1, #0
 8000 0126 17A8     		add	r0, sp, #92
 8001              	.LVL893:
3628:src/display.c ****       }
 8002              		.loc 1 3628 9 view .LVU2562
 8003 0128 FFF7FEFF 		bl	pixel_length
 8004              	.LVL894:
3628:src/display.c ****       }
 8005              		.loc 1 3628 9 view .LVU2563
 8006              	.LBE465:
 8007              	.LBE464:
3649:src/display.c ****       }
 8008              		.loc 1 3649 2 view .LVU2564
ARM GAS  /tmp/ccxUm1xs.s 			page 248


 8009 012c 2C28     		cmp	r0, #44
 8010 012e D4BF     		ite	le
 8011 0130 0021     		movle	r1, #0
 8012 0132 0121     		movgt	r1, #1
 8013 0134 3AE0     		b	.L823
 8014              	.LVL895:
 8015              	.L893:
3649:src/display.c ****       }
 8016              		.loc 1 3649 2 view .LVU2565
 8017              	.LBE463:
 8018              	.LBE462:
 697:src/display.c **** #else
 8019              		.loc 1 697 35 discriminator 1 view .LVU2566
 8020 0136 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 697:src/display.c **** #else
 8021              		.loc 1 697 32 discriminator 1 view .LVU2567
 8022 013a 03F04103 		and	r3, r3, #65
 8023 013e 412B     		cmp	r3, #65
 8024 0140 3FF47FAF 		beq	.L773
 718:src/display.c **** 	    *p2++ = shift_char;
 8025              		.loc 1 718 4 is_stmt 1 view .LVU2568
 718:src/display.c **** 	    *p2++ = shift_char;
 8026              		.loc 1 718 7 is_stmt 0 view .LVU2569
 8027 0144 B8F1200F 		cmp	r8, #32
 8028 0148 00F0EB81 		beq	.L774
 8029              	.L776:
 719:src/display.c **** 	    *p2++ = '\006';
 8030              		.loc 1 719 6 is_stmt 1 view .LVU2570
 8031              	.LVL896:
 720:src/display.c **** 	  }
 8032              		.loc 1 720 12 is_stmt 0 view .LVU2571
 8033 014c 0623     		movs	r3, #6
 719:src/display.c **** 	    *p2++ = '\006';
 8034              		.loc 1 719 12 view .LVU2572
 8035 014e 8DF85C80 		strb	r8, [sp, #92]
 720:src/display.c **** 	  }
 8036              		.loc 1 720 6 is_stmt 1 view .LVU2573
 8037              	.LVL897:
 720:src/display.c **** 	  }
 8038              		.loc 1 720 12 is_stmt 0 view .LVU2574
 8039 0152 8DF85D30 		strb	r3, [sp, #93]
 720:src/display.c **** 	  }
 8040              		.loc 1 720 9 view .LVU2575
 8041 0156 0DF15E00 		add	r0, sp, #94
 8042              	.LVL898:
 8043              	.L775:
 726:src/display.c **** 	  *p2++ = ' ';
 8044              		.loc 1 726 2 is_stmt 1 view .LVU2576
 726:src/display.c **** 	  *p2++ = ' ';
 8045              		.loc 1 726 6 is_stmt 0 view .LVU2577
 8046 015a 714D     		ldr	r5, .L909+8
 8047 015c 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 726:src/display.c **** 	  *p2++ = ' ';
 8048              		.loc 1 726 5 view .LVU2578
 8049 015e 9A07     		lsls	r2, r3, #30
 8050 0160 00F1A981 		bmi	.L898
 731:src/display.c **** 	  *p2++ = ' ';
ARM GAS  /tmp/ccxUm1xs.s 			page 249


 8051              		.loc 1 731 2 is_stmt 1 view .LVU2579
 731:src/display.c **** 	  *p2++ = ' ';
 8052              		.loc 1 731 5 is_stmt 0 view .LVU2580
 8053 0164 5907     		lsls	r1, r3, #29
 8054 0166 00F1E781 		bmi	.L899
 737:src/display.c **** 	  if (State2.wascomplex) {
 8055              		.loc 1 737 2 is_stmt 1 view .LVU2581
 737:src/display.c **** 	  if (State2.wascomplex) {
 8056              		.loc 1 737 5 is_stmt 0 view .LVU2582
 8057 016a B8F1200F 		cmp	r8, #32
 8058 016e 00F0E881 		beq	.L900
 8059              	.L779:
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8060              		.loc 1 754 2 is_stmt 1 view .LVU2583
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8061              		.loc 1 754 16 is_stmt 0 view .LVU2584
 8062 0172 2368     		ldr	r3, [r4]
 8063 0174 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 8064 0178 C1F30111 		ubfx	r1, r1, #4, #2
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8065              		.loc 1 754 2 view .LVU2585
 8066 017c 0129     		cmp	r1, #1
 8067 017e 00F0F381 		beq	.L830
 8068 0182 6A4B     		ldr	r3, .L909+20
 8069 0184 6A4A     		ldr	r2, .L909+24
 8070 0186 0229     		cmp	r1, #2
 8071 0188 14BF     		ite	ne
 8072 018a 1946     		movne	r1, r3
 8073 018c 1146     		moveq	r1, r2
 8074              	.L781:
 8075              	.LVL899:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8076              		.loc 1 768 2 is_stmt 1 view .LVU2586
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8077              		.loc 1 768 7 is_stmt 0 view .LVU2587
 8078 018e FFF7FEFF 		bl	scopy
 8079              	.LVL900:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8080              		.loc 1 768 7 view .LVU2588
 8081 0192 0446     		mov	r4, r0
 8082              	.LVL901:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8083              		.loc 1 770 2 is_stmt 1 view .LVU2589
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8084              		.loc 1 770 6 is_stmt 0 view .LVU2590
 8085 0194 FFF7FEFF 		bl	get_trig_mode
 8086              	.LVL902:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8087              		.loc 1 770 5 view .LVU2591
 8088 0198 0228     		cmp	r0, #2
 8089 019a 00F0EC81 		beq	.L901
 8090              	.LVL903:
 8091              	.L772:
 987:src/display.c ****       set_status_top_always(buf2);
 8092              		.loc 1 987 7 is_stmt 1 view .LVU2592
 987:src/display.c ****       set_status_top_always(buf2);
 8093              		.loc 1 987 11 is_stmt 0 view .LVU2593
ARM GAS  /tmp/ccxUm1xs.s 			page 250


 8094 019e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 987:src/display.c ****       set_status_top_always(buf2);
 8095              		.loc 1 987 10 view .LVU2594
 8096 01a0 5906     		lsls	r1, r3, #25
 8097 01a2 00F1FC80 		bmi	.L902
 8098              	.L821:
 8099              	.LBB471:
 8100              	.LBB468:
3649:src/display.c ****       }
 8101              		.loc 1 3649 2 is_stmt 1 view .LVU2595
 8102 01a6 1B06     		lsls	r3, r3, #24
 8103 01a8 BCD5     		bpl	.L903
 8104              	.L841:
 8105 01aa 0121     		movs	r1, #1
 8106              	.L823:
 8107              	.LVL904:
 8108              	.LBB466:
 8109              	.LBI466:
3479:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8110              		.loc 1 3479 19 view .LVU2596
 8111              	.LBB467:
3480:src/display.c ****       }
 8112              		.loc 1 3480 2 view .LVU2597
 8113 01ac 4FF45373 		mov	r3, #844
 8114 01b0 0093     		str	r3, [sp]
 8115 01b2 17A8     		add	r0, sp, #92
 8116              	.LVL905:
3480:src/display.c ****       }
 8117              		.loc 1 3480 2 is_stmt 0 view .LVU2598
 8118 01b4 40F24A23 		movw	r3, #586
 8119 01b8 2B22     		movs	r2, #43
 8120 01ba FFF7FEFF 		bl	s_s_sized
 8121              	.LVL906:
3480:src/display.c ****       }
 8122              		.loc 1 3480 2 view .LVU2599
 8123              	.LBE467:
 8124              	.LBE466:
 8125              	.LBE468:
 8126              	.LBE471:
 990:src/display.c **** #else
 8127              		.loc 1 990 5 view .LVU2600
 8128 01be 23B0     		add	sp, sp, #140
 8129              		.cfi_remember_state
 8130              		.cfi_def_cfa_offset 28
 8131              		@ sp needed
 8132 01c0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8133              	.LVL907:
 8134              	.L892:
 8135              		.cfi_restore_state
 667:src/display.c **** 	    *p2++ = '\006';
 8136              		.loc 1 667 6 is_stmt 1 view .LVU2601
 668:src/display.c **** 	  }
 8137              		.loc 1 668 12 is_stmt 0 view .LVU2602
 8138 01c4 0623     		movs	r3, #6
 8139 01c6 8DF85D30 		strb	r3, [sp, #93]
 667:src/display.c **** 	    *p2++ = '\006';
 8140              		.loc 1 667 12 view .LVU2603
ARM GAS  /tmp/ccxUm1xs.s 			page 251


 8141 01ca 8DF85C80 		strb	r8, [sp, #92]
 668:src/display.c **** 	  }
 8142              		.loc 1 668 6 is_stmt 1 view .LVU2604
 8143              	.LVL908:
 671:src/display.c **** 	default:
 8144              		.loc 1 671 2 view .LVU2605
 671:src/display.c **** 	default:
 8145              		.loc 1 671 9 is_stmt 0 view .LVU2606
 8146 01ce FFF7FEFF 		bl	int_mode
 8147              	.LVL909:
 8148 01d2 0138     		subs	r0, r0, #1
 8149 01d4 C0B2     		uxtb	r0, r0
 8150 01d6 0228     		cmp	r0, #2
 8151 01d8 96BF     		itet	ls
 8152 01da 594B     		ldrls	r3, .L909+40
 8153 01dc 5949     		ldrhi	r1, .L909+44
 8154 01de 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8155              	.LVL910:
 678:src/display.c **** 	*q++ = '\006';
 8156              		.loc 1 678 2 is_stmt 1 view .LVU2607
 678:src/display.c **** 	*q++ = '\006';
 8157              		.loc 1 678 6 is_stmt 0 view .LVU2608
 8158 01e2 0DF15E00 		add	r0, sp, #94
 8159              	.LVL911:
 678:src/display.c **** 	*q++ = '\006';
 8160              		.loc 1 678 6 view .LVU2609
 8161 01e6 FFF7FEFF 		bl	scopy
 8162              	.LVL912:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8163              		.loc 1 679 7 view .LVU2610
 8164 01ea 8046     		mov	r8, r0
 8165              	.LVL913:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8166              		.loc 1 679 7 view .LVU2611
 8167 01ec 0623     		movs	r3, #6
 8168 01ee 08F8013B 		strb	r3, [r8], #1
 678:src/display.c **** 	*q++ = '\006';
 8169              		.loc 1 678 6 view .LVU2612
 8170 01f2 0546     		mov	r5, r0
 8171              	.LVL914:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8172              		.loc 1 679 2 is_stmt 1 view .LVU2613
 680:src/display.c **** 
 8173              		.loc 1 680 2 view .LVU2614
 680:src/display.c **** 
 8174              		.loc 1 680 7 is_stmt 0 view .LVU2615
 8175 01f4 FFF7FEFF 		bl	word_size
 8176              	.LVL915:
 8177 01f8 0222     		movs	r2, #2
 8178 01fa 0146     		mov	r1, r0
 8179 01fc 4046     		mov	r0, r8
 8180 01fe FFF7FEFF 		bl	num_arg_0
 8181              	.LVL916:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8182              		.loc 1 682 19 view .LVU2616
 8183 0202 DFF848C1 		ldr	ip, .L909+52
 8184 0206 DCF80030 		ldr	r3, [ip]
ARM GAS  /tmp/ccxUm1xs.s 			page 252


 8185              	.LVL917:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8186              		.loc 1 682 2 is_stmt 1 view .LVU2617
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8187              		.loc 1 682 5 is_stmt 0 view .LVU2618
 8188 020a 002B     		cmp	r3, #0
 8189 020c 40F3BE80 		ble	.L889
 683:src/display.c **** 	  if (*q == '1')
 8190              		.loc 1 683 4 is_stmt 1 view .LVU2619
 683:src/display.c **** 	  if (*q == '1')
 8191              		.loc 1 683 10 is_stmt 0 view .LVU2620
 8192 0210 C3F10702 		rsb	r2, r3, #7
 8193 0214 5200     		lsls	r2, r2, #1
 683:src/display.c **** 	  if (*q == '1')
 8194              		.loc 1 683 6 view .LVU2621
 8195 0216 0292     		str	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 8196              		.loc 1 684 4 is_stmt 1 view .LVU2622
 684:src/display.c **** 	    n += 2;
 8197              		.loc 1 684 7 is_stmt 0 view .LVU2623
 8198 0218 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8199 021a 3129     		cmp	r1, #49
 685:src/display.c **** 	  if (q[1] == '1')
 8200              		.loc 1 685 6 is_stmt 1 view .LVU2624
 685:src/display.c **** 	  if (q[1] == '1')
 8201              		.loc 1 685 8 is_stmt 0 view .LVU2625
 8202 021c 04BF     		itt	eq
 8203 021e 0232     		addeq	r2, r2, #2
 8204 0220 0292     		streq	r2, [sp, #8]
 686:src/display.c **** 	    n += 2;
 8205              		.loc 1 686 4 is_stmt 1 view .LVU2626
 686:src/display.c **** 	    n += 2;
 8206              		.loc 1 686 7 is_stmt 0 view .LVU2627
 8207 0222 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8208 0224 3129     		cmp	r1, #49
 8209 0226 00D1     		bne	.L765
 687:src/display.c **** 	  while (n-- > 0)
 8210              		.loc 1 687 6 is_stmt 1 view .LVU2628
 687:src/display.c **** 	  while (n-- > 0)
 8211              		.loc 1 687 8 is_stmt 0 view .LVU2629
 8212 0228 0232     		adds	r2, r2, #2
 8213              	.L765:
 688:src/display.c **** 	    *p2++ = '\006';
 8214              		.loc 1 688 10 is_stmt 1 view .LVU2630
 688:src/display.c **** 	    *p2++ = '\006';
 8215              		.loc 1 688 12 is_stmt 0 view .LVU2631
 8216 022a 511E     		subs	r1, r2, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8217              		.loc 1 688 10 view .LVU2632
 8218 022c 002A     		cmp	r2, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8219              		.loc 1 688 12 view .LVU2633
 8220 022e 0291     		str	r1, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8221              		.loc 1 688 10 view .LVU2634
 8222 0230 40F39C81 		ble	.L887
 689:src/display.c **** 
ARM GAS  /tmp/ccxUm1xs.s 			page 253


 8223              		.loc 1 689 12 view .LVU2635
 8224 0234 0621     		movs	r1, #6
 8225              	.L766:
 689:src/display.c **** 
 8226              		.loc 1 689 6 is_stmt 1 view .LVU2636
 8227              	.LVL918:
 689:src/display.c **** 
 8228              		.loc 1 689 12 is_stmt 0 view .LVU2637
 8229 0236 00F8011B 		strb	r1, [r0], #1
 8230              	.LVL919:
 688:src/display.c **** 	    *p2++ = '\006';
 8231              		.loc 1 688 10 is_stmt 1 view .LVU2638
 688:src/display.c **** 	    *p2++ = '\006';
 8232              		.loc 1 688 12 is_stmt 0 view .LVU2639
 8233 023a 029B     		ldr	r3, [sp, #8]
 8234 023c 5A1E     		subs	r2, r3, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8235              		.loc 1 688 10 view .LVU2640
 8236 023e 002B     		cmp	r3, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8237              		.loc 1 688 12 view .LVU2641
 8238 0240 0292     		str	r2, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8239              		.loc 1 688 10 view .LVU2642
 8240 0242 F8DC     		bgt	.L766
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8241              		.loc 1 691 4 is_stmt 1 view .LVU2643
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8242              		.loc 1 691 11 is_stmt 0 view .LVU2644
 8243 0244 DCF80030 		ldr	r3, [ip]
 8244 0248 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8245              		.loc 1 691 27 is_stmt 1 view .LVU2645
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8246              		.loc 1 691 4 is_stmt 0 view .LVU2646
 8247 024a 002B     		cmp	r3, #0
 8248 024c C0F29E80 		blt	.L889
 8249              	.L824:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8250              		.loc 1 691 4 view .LVU2647
 8251 0250 334D     		ldr	r5, .L909+8
 8252              	.L771:
 692:src/display.c **** 	}
 8253              		.loc 1 692 6 is_stmt 1 view .LVU2648
 692:src/display.c **** 	}
 8254              		.loc 1 692 20 is_stmt 0 view .LVU2649
 8255 0252 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8256 0254 C2F3C202 		ubfx	r2, r2, #3, #3
 692:src/display.c **** 	}
 8257              		.loc 1 692 12 view .LVU2650
 8258 0258 9A42     		cmp	r2, r3
 8259 025a 0CBF     		ite	eq
 8260 025c 7C23     		moveq	r3, #124
 8261 025e 2723     		movne	r3, #39
 8262              	.LVL920:
 692:src/display.c **** 	}
 8263              		.loc 1 692 12 view .LVU2651
ARM GAS  /tmp/ccxUm1xs.s 			page 254


 8264 0260 00F8013B 		strb	r3, [r0], #1
 8265              	.LVL921:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8266              		.loc 1 691 35 is_stmt 1 view .LVU2652
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8267              		.loc 1 691 36 is_stmt 0 view .LVU2653
 8268 0264 029B     		ldr	r3, [sp, #8]
 8269 0266 013B     		subs	r3, r3, #1
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8270              		.loc 1 691 4 view .LVU2654
 8271 0268 002B     		cmp	r3, #0
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8272              		.loc 1 691 36 view .LVU2655
 8273 026a 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8274              		.loc 1 691 27 is_stmt 1 view .LVU2656
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8275              		.loc 1 691 4 is_stmt 0 view .LVU2657
 8276 026c F1DA     		bge	.L771
 8277              	.L769:
 694:src/display.c ****       }
 8278              		.loc 1 694 2 is_stmt 1 view .LVU2658
 694:src/display.c ****       }
 8279              		.loc 1 694 5 is_stmt 0 view .LVU2659
 8280 026e 002F     		cmp	r7, #0
 8281 0270 95D0     		beq	.L772
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8282              		.loc 1 611 22 view .LVU2660
 8283 0272 B046     		mov	r8, r6
 8284              	.LVL922:
 8285              	.L762:
 8286              	.LBB472:
 889:src/display.c **** 	display_yreg:
 8287              		.loc 1 889 4 is_stmt 1 view .LVU2661
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8288              		.loc 1 896 4 view .LVU2662
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8289              		.loc 1 896 8 is_stmt 0 view .LVU2663
 8290 0274 2368     		ldr	r3, [r4]
 8291 0276 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8292              		.loc 1 896 7 view .LVU2664
 8293 027a D007     		lsls	r0, r2, #31
 8294 027c 00F13681 		bmi	.L904
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8295              		.loc 1 901 4 is_stmt 1 view .LVU2665
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8296              		.loc 1 901 35 is_stmt 0 view .LVU2666
 8297 0280 B3F8AC27 		ldrh	r2, [r3, #1964]
 8298 0284 40F2C113 		movw	r3, #449
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8299              		.loc 1 901 7 view .LVU2667
 8300 0288 1340     		ands	r3, r3, r2
 8301 028a C12B     		cmp	r3, #193
 8302 028c 00F03581 		beq	.L905
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8303              		.loc 1 905 6 is_stmt 1 view .LVU2668
ARM GAS  /tmp/ccxUm1xs.s 			page 255


 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8304              		.loc 1 905 36 is_stmt 0 view .LVU2669
 8305 0290 DFF8BC90 		ldr	r9, .L909+56
 8306 0294 D9F80010 		ldr	r1, [r9]
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8307              		.loc 1 905 6 view .LVU2670
 8308 0298 6329     		cmp	r1, #99
 8309 029a 00F31181 		bgt	.L906
 8310              	.L804:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8311              		.loc 1 905 6 discriminator 3 view .LVU2671
 8312 029e 0131     		adds	r1, r1, #1
 8313              	.L808:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8314              		.loc 1 905 6 discriminator 4 view .LVU2672
 8315 02a0 03AF     		add	r7, sp, #12
 8316              	.LVL923:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8317              		.loc 1 905 6 discriminator 4 view .LVU2673
 8318 02a2 3846     		mov	r0, r7
 8319 02a4 FFF7FEFF 		bl	getRegister
 8320              	.LVL924:
 8321              	.L803:
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8322              		.loc 1 915 4 is_stmt 1 view .LVU2674
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8323              		.loc 1 915 7 is_stmt 0 view .LVU2675
 8324 02a8 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8325 02ac 13F0700F 		tst	r3, #112
 8326 02b0 40F0C080 		bne	.L810
 917:src/display.c **** #else
 8327              		.loc 1 917 6 is_stmt 1 view .LVU2676
 917:src/display.c **** #else
 8328              		.loc 1 917 19 is_stmt 0 view .LVU2677
 8329 02b4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 917:src/display.c **** #else
 8330              		.loc 1 917 9 view .LVU2678
 8331 02b6 13F0010F 		tst	r3, #1
 917:src/display.c **** #else
 8332              		.loc 1 917 39 view .LVU2679
 8333 02ba 2368     		ldr	r3, [r4]
 917:src/display.c **** #else
 8334              		.loc 1 917 9 view .LVU2680
 8335 02bc 79D0     		beq	.L813
 917:src/display.c **** #else
 8336              		.loc 1 917 38 discriminator 1 view .LVU2681
 8337 02be 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 917:src/display.c **** #else
 8338              		.loc 1 917 33 discriminator 1 view .LVU2682
 8339 02c2 02F04101 		and	r1, r2, #65
 8340 02c6 4129     		cmp	r1, #65
 8341 02c8 06D1     		bne	.L812
 917:src/display.c **** #else
 8342              		.loc 1 917 48 discriminator 2 view .LVU2683
 8343 02ca 1206     		lsls	r2, r2, #24
 8344 02cc 71D5     		bpl	.L813
 917:src/display.c **** #else
ARM GAS  /tmp/ccxUm1xs.s 			page 256


 8345              		.loc 1 917 119 discriminator 3 view .LVU2684
 8346 02ce 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 917:src/display.c **** #else
 8347              		.loc 1 917 80 discriminator 3 view .LVU2685
 8348 02d2 12F0C00F 		tst	r2, #192
 8349 02d6 6CD1     		bne	.L813
 8350              	.L812:
 8351              	.LBB473:
 921:src/display.c **** 
 8352              		.loc 1 921 8 is_stmt 1 view .LVU2686
 923:src/display.c **** 	      UState.nothousands = 1;
 8353              		.loc 1 923 8 is_stmt 0 view .LVU2687
 8354 02d8 2A22     		movs	r2, #42
 8355 02da 0021     		movs	r1, #0
 8356 02dc 3046     		mov	r0, r6
 921:src/display.c **** 
 8357              		.loc 1 921 44 view .LVU2688
 8358 02de 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8359 02e2 DFF87080 		ldr	r8, .L909+60
 8360              	.LVL925:
 923:src/display.c **** 	      UState.nothousands = 1;
 8361              		.loc 1 923 8 view .LVU2689
 8362 02e6 FFF7FEFF 		bl	xset
 8363              	.LVL926:
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8364              		.loc 1 924 27 view .LVU2690
 8365 02ea 2268     		ldr	r2, [r4]
 8366 02ec 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8367 02f0 43F04003 		orr	r3, r3, #64
 8368 02f4 82F8E737 		strb	r3, [r2, #2023]
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8369              		.loc 1 925 8 view .LVU2691
 8370 02f8 3146     		mov	r1, r6
 8371 02fa 3846     		mov	r0, r7
 8372 02fc FFF7FEFF 		bl	set_x_hms
 8373              	.LVL927:
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8374              		.loc 1 926 27 view .LVU2692
 8375 0300 2368     		ldr	r3, [r4]
 8376 0302 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 921:src/display.c **** 
 8377              		.loc 1 921 44 view .LVU2693
 8378 0306 C9F38019 		ubfx	r9, r9, #6, #1
 8379              	.LVL928:
 923:src/display.c **** 	      UState.nothousands = 1;
 8380              		.loc 1 923 8 is_stmt 1 view .LVU2694
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8381              		.loc 1 924 8 view .LVU2695
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8382              		.loc 1 925 8 view .LVU2696
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8383              		.loc 1 926 8 view .LVU2697
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8384              		.loc 1 926 27 is_stmt 0 view .LVU2698
 8385 030a 69F38612 		bfi	r2, r9, #6, #1
 8386 030e 83F8E727 		strb	r2, [r3, #2023]
 931:src/display.c **** 	      while (*p) {
ARM GAS  /tmp/ccxUm1xs.s 			page 257


 8387              		.loc 1 931 8 is_stmt 1 view .LVU2699
 8388              	.LVL929:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8389              		.loc 1 932 8 view .LVU2700
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8390              		.loc 1 932 14 view .LVU2701
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8391              		.loc 1 932 15 is_stmt 0 view .LVU2702
 8392 0312 4021     		movs	r1, #64
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8393              		.loc 1 926 27 view .LVU2703
 8394 0314 0522     		movs	r2, #5
 8395 0316 26E0     		b	.L815
 8396              	.L910:
 8397              		.align	2
 8398              	.L909:
 8399 0318 00000000 		.word	main_ram
 8400 031c 00000000 		.word	.LANCHOR15
 8401 0320 00000000 		.word	StateWhileOn
 8402 0324 28000000 		.word	.LC10
 8403 0328 24000000 		.word	.LC9
 8404 032c 10000000 		.word	.LC6
 8405 0330 1C000000 		.word	.LC8
 8406 0334 58000000 		.word	.LC17
 8407 0338 08000000 		.word	.LC4
 8408 033c 4C000000 		.word	.LC15
 8409 0340 00000000 		.word	.LANCHOR16
 8410 0344 00000000 		.word	.LC2
 8411 0348 00000000 		.word	RectPolConv
 8412 034c 00000000 		.word	IntMaxWindow
 8413 0350 00000000 		.word	ShowRegister
 8414 0354 00000000 		.word	.LANCHOR17
 8415              	.LVL930:
 8416              	.L907:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8417              		.loc 1 932 15 view .LVU2704
 8418 0358 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8419              	.LVL931:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8420              		.loc 1 932 14 view .LVU2705
 8421 035c 0029     		cmp	r1, #0
 8422 035e 3FF41EAF 		beq	.L772
 8423 0362 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8424              	.LVL932:
 8425              	.L815:
 933:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8426              		.loc 1 933 3 is_stmt 1 view .LVU2706
 8427 0366 3046     		mov	r0, r6
 8428 0368 FFF7FEFF 		bl	replace_char
 8429              	.LVL933:
 934:src/display.c **** 		  goto skip;
 8430              		.loc 1 934 3 view .LVU2707
 934:src/display.c **** 		  goto skip;
 8431              		.loc 1 934 7 is_stmt 0 view .LVU2708
 8432 036c 0121     		movs	r1, #1
 8433 036e 3046     		mov	r0, r6
 8434 0370 FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/ccxUm1xs.s 			page 258


 8435              	.LVL934:
 937:src/display.c **** 	      }
 8436              		.loc 1 937 3 is_stmt 1 view .LVU2709
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8437              		.loc 1 932 14 view .LVU2710
 934:src/display.c **** 		  goto skip;
 8438              		.loc 1 934 6 is_stmt 0 view .LVU2711
 8439 0374 2C28     		cmp	r0, #44
 8440 0376 EFDC     		bgt	.L907
 8441 0378 11E7     		b	.L772
 8442              	.LVL935:
 8443              	.L782:
 934:src/display.c **** 		  goto skip;
 8444              		.loc 1 934 6 view .LVU2712
 8445              	.LBE473:
 8446              	.LBE472:
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8447              		.loc 1 790 4 is_stmt 1 view .LVU2713
 791:src/display.c **** 	  *p2++ = shift_char;
 8448              		.loc 1 791 4 view .LVU2714
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8449              		.loc 1 790 10 is_stmt 0 view .LVU2715
 8450 037a 4CF20773 		movw	r3, #50951
 792:src/display.c **** 	}
 8451              		.loc 1 792 10 view .LVU2716
 8452 037e 8DF85E80 		strb	r8, [sp, #94]
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8453              		.loc 1 790 10 view .LVU2717
 8454 0382 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 792:src/display.c **** 	}
 8455              		.loc 1 792 4 is_stmt 1 view .LVU2718
 8456              	.LVL936:
 792:src/display.c **** 	}
 8457              		.loc 1 792 7 is_stmt 0 view .LVU2719
 8458 0386 0DF15F08 		add	r8, sp, #95
 8459              	.LVL937:
 792:src/display.c **** 	}
 8460              		.loc 1 792 7 view .LVU2720
 8461 038a 6AE6     		b	.L783
 8462              	.LVL938:
 8463              	.L889:
 792:src/display.c **** 	}
 8464              		.loc 1 792 7 view .LVU2721
 8465 038c 7F4D     		ldr	r5, .L911
 8466 038e 6EE7     		b	.L769
 8467              	.LVL939:
 8468              	.L896:
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8469              		.loc 1 864 29 discriminator 1 view .LVU2722
 8470 0390 03F04101 		and	r1, r3, #65
 8471 0394 4129     		cmp	r1, #65
 8472 0396 3FF4B0AE 		beq	.L796
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8473              		.loc 1 611 22 view .LVU2723
 8474 039a B046     		mov	r8, r6
 8475 039c B9E6     		b	.L795
 8476              	.LVL940:
ARM GAS  /tmp/ccxUm1xs.s 			page 259


 8477              	.L902:
 987:src/display.c ****       set_status_top_always(buf2);
 8478              		.loc 1 987 27 is_stmt 1 discriminator 1 view .LVU2724
 8479 039e 3046     		mov	r0, r6
 8480 03a0 FFF7FEFF 		bl	set_status
 8481              	.LVL941:
 988:src/display.c ****       
 8482              		.loc 1 988 7 discriminator 1 view .LVU2725
 8483              	.LBB479:
 8484              	.LBI462:
3647:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8485              		.loc 1 3647 19 discriminator 1 view .LVU2726
 8486              	.LBB469:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8487              		.loc 1 3648 2 discriminator 1 view .LVU2727
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8488              		.loc 1 3648 6 is_stmt 0 discriminator 1 view .LVU2728
 8489 03a4 7A4B     		ldr	r3, .L911+4
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8490              		.loc 1 3648 5 discriminator 1 view .LVU2729
 8491 03a6 B3F90030 		ldrsh	r3, [r3]
 8492 03aa 002B     		cmp	r3, #0
 8493 03ac 6DD1     		bne	.L820
 8494 03ae AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8495 03b0 F9E6     		b	.L821
 8496              	.LVL942:
 8497              	.L813:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8498              		.loc 1 3648 5 discriminator 1 view .LVU2730
 8499              	.LBE469:
 8500              	.LBE479:
 8501              	.LBB480:
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8502              		.loc 1 941 6 is_stmt 1 view .LVU2731
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8503              		.loc 1 941 21 is_stmt 0 view .LVU2732
 8504 03b2 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8505              		.loc 1 941 9 view .LVU2733
 8506 03b6 9806     		lsls	r0, r3, #26
 8507 03b8 3CD5     		bpl	.L810
 943:src/display.c **** #endif
 8508              		.loc 1 943 6 view .LVU2734
 8509 03ba 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 943:src/display.c **** #endif
 8510              		.loc 1 943 3 view .LVU2735
 8511 03bc 13F00204 		ands	r4, r3, #2
 8512 03c0 38D1     		bne	.L810
 946:src/display.c **** #endif
 8513              		.loc 1 946 6 view .LVU2736
 8514 03c2 744B     		ldr	r3, .L911+8
 946:src/display.c **** #endif
 8515              		.loc 1 946 3 view .LVU2737
 8516 03c4 1B68     		ldr	r3, [r3]
 8517 03c6 012B     		cmp	r3, #1
 8518 03c8 34D0     		beq	.L810
 948:src/display.c **** 	      char ltgteq;
ARM GAS  /tmp/ccxUm1xs.s 			page 260


 8519              		.loc 1 948 6 view .LVU2738
 8520 03ca 4146     		mov	r1, r8
 8521 03cc 3846     		mov	r0, r7
 8522 03ce FFF7FEFF 		bl	set_x_fract
 8523              	.LVL943:
 948:src/display.c **** 	      char ltgteq;
 8524              		.loc 1 948 3 view .LVU2739
 8525 03d2 78B3     		cbz	r0, .L810
 8526              	.LBB474:
 949:src/display.c **** 
 8527              		.loc 1 949 8 is_stmt 1 view .LVU2740
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8528              		.loc 1 951 8 view .LVU2741
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8529              		.loc 1 951 12 is_stmt 0 view .LVU2742
 8530 03d4 2146     		mov	r1, r4
 8531 03d6 3046     		mov	r0, r6
 8532 03d8 FFF7FEFF 		bl	find_char
 8533              	.LVL944:
 8534 03dc 0446     		mov	r4, r0
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8535              		.loc 1 951 10 view .LVU2743
 8536 03de 0238     		subs	r0, r0, #2
 8537              	.LVL945:
 953:src/display.c **** 	      switch (ltgteq) {
 8538              		.loc 1 953 8 is_stmt 1 view .LVU2744
 953:src/display.c **** 	      switch (ltgteq) {
 8539              		.loc 1 953 15 is_stmt 0 view .LVU2745
 8540 03e0 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8541              	.LVL946:
 954:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8542              		.loc 1 954 8 is_stmt 1 view .LVU2746
 8543 03e4 B9F1470F 		cmp	r9, #71
 8544 03e8 00F0CC80 		beq	.L839
 956:src/display.c **** 	      }
 8545              		.loc 1 956 25 is_stmt 0 view .LVU2747
 8546 03ec B9F14C0F 		cmp	r9, #76
 8547 03f0 08BF     		it	eq
 8548 03f2 4FF03C09 		moveq	r9, #60
 8549              	.LVL947:
 8550              	.L817:
 958:src/display.c **** 	      q[2] = ltgteq;
 8551              		.loc 1 958 8 is_stmt 1 view .LVU2748
 8552 03f6 6849     		ldr	r1, .L911+12
 8553 03f8 FFF7FEFF 		bl	scopy
 8554              	.LVL948:
 959:src/display.c **** 
 8555              		.loc 1 959 8 view .LVU2749
 959:src/display.c **** 
 8556              		.loc 1 959 13 is_stmt 0 view .LVU2750
 8557 03fc 84F80090 		strb	r9, [r4]
 961:src/display.c **** 		goto skip;
 8558              		.loc 1 961 8 is_stmt 1 view .LVU2751
 961:src/display.c **** 		goto skip;
 8559              		.loc 1 961 12 is_stmt 0 view .LVU2752
 8560 0400 0121     		movs	r1, #1
 8561 0402 3046     		mov	r0, r6
ARM GAS  /tmp/ccxUm1xs.s 			page 261


 8562 0404 FFF7FEFF 		bl	pixel_length
 8563              	.LVL949:
 961:src/display.c **** 		goto skip;
 8564              		.loc 1 961 11 view .LVU2753
 8565 0408 2C28     		cmp	r0, #44
 8566 040a 7FF7C8AE 		ble	.L772
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8567              		.loc 1 964 8 is_stmt 1 view .LVU2754
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8568              		.loc 1 964 14 is_stmt 0 view .LVU2755
 8569 040e 4FF00009 		mov	r9, #0
 8570              	.LVL950:
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8571              		.loc 1 964 14 view .LVU2756
 8572 0412 04F8039C 		strb	r9, [r4, #-3]
 965:src/display.c **** 		goto skip;
 8573              		.loc 1 965 8 is_stmt 1 view .LVU2757
 965:src/display.c **** 		goto skip;
 8574              		.loc 1 965 12 is_stmt 0 view .LVU2758
 8575 0416 0121     		movs	r1, #1
 8576 0418 3046     		mov	r0, r6
 8577 041a FFF7FEFF 		bl	pixel_length
 8578              	.LVL951:
 965:src/display.c **** 		goto skip;
 8579              		.loc 1 965 11 view .LVU2759
 8580 041e 2C28     		cmp	r0, #44
 8581 0420 7FF7BDAE 		ble	.L772
 968:src/display.c **** 	    }
 8582              		.loc 1 968 8 is_stmt 1 view .LVU2760
 968:src/display.c **** 	    }
 8583              		.loc 1 968 39 is_stmt 0 view .LVU2761
 8584 0424 A8EB0602 		sub	r2, r8, r6
 968:src/display.c **** 	    }
 8585              		.loc 1 968 8 view .LVU2762
 8586 0428 4946     		mov	r1, r9
 8587 042a C2F12A02 		rsb	r2, r2, #42
 8588 042e 4046     		mov	r0, r8
 8589 0430 FFF7FEFF 		bl	xset
 8590              	.LVL952:
 8591              	.L810:
 968:src/display.c **** 	    }
 8592              		.loc 1 968 8 view .LVU2763
 8593              	.LBE474:
 971:src/display.c **** 	    int extra_pixels;
 8594              		.loc 1 971 4 is_stmt 1 view .LVU2764
 971:src/display.c **** 	    int extra_pixels;
 8595              		.loc 1 971 10 is_stmt 0 view .LVU2765
 8596 0434 0C23     		movs	r3, #12
 8597 0436 0293     		str	r3, [sp, #8]
 971:src/display.c **** 	    int extra_pixels;
 8598              		.loc 1 971 27 is_stmt 1 view .LVU2766
 8599 0438 0FE0     		b	.L819
 8600              	.LVL953:
 8601              	.L908:
 8602              	.LBB475:
 979:src/display.c **** 
 8603              		.loc 1 979 6 is_stmt 0 view .LVU2767
ARM GAS  /tmp/ccxUm1xs.s 			page 262


 8604 043a 029A     		ldr	r2, [sp, #8]
 8605 043c 0A32     		adds	r2, r2, #10
 8606 043e FFF7FEFF 		bl	xset
 8607              	.LVL954:
 981:src/display.c **** 	  }
 8608              		.loc 1 981 6 is_stmt 1 view .LVU2768
 981:src/display.c **** 	  }
 8609              		.loc 1 981 30 is_stmt 0 view .LVU2769
 8610 0442 B4F14802 		subs	r2, r4, #72
 981:src/display.c **** 	  }
 8611              		.loc 1 981 8 view .LVU2770
 8612 0446 029B     		ldr	r3, [sp, #8]
 981:src/display.c **** 	  }
 8613              		.loc 1 981 30 view .LVU2771
 8614 0448 48BF     		it	mi
 8615 044a A4F14502 		submi	r2, r4, #69
 981:src/display.c **** 	  }
 8616              		.loc 1 981 8 view .LVU2772
 8617 044e A3EBA203 		sub	r3, r3, r2, asr #2
 8618              	.LBE475:
 971:src/display.c **** 	    int extra_pixels;
 8619              		.loc 1 971 4 view .LVU2773
 8620 0452 012B     		cmp	r3, #1
 8621              	.LBB476:
 981:src/display.c **** 	  }
 8622              		.loc 1 981 8 view .LVU2774
 8623 0454 0293     		str	r3, [sp, #8]
 8624              	.LBE476:
 971:src/display.c **** 	    int extra_pixels;
 8625              		.loc 1 971 27 is_stmt 1 view .LVU2775
 971:src/display.c **** 	    int extra_pixels;
 8626              		.loc 1 971 4 is_stmt 0 view .LVU2776
 8627 0456 7FF7A2AE 		ble	.L772
 8628              	.LVL955:
 8629              	.L819:
 8630              	.LBB477:
 972:src/display.c **** 
 8631              		.loc 1 972 6 is_stmt 1 view .LVU2777
 974:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8632              		.loc 1 974 6 view .LVU2778
 8633 045a 02AA     		add	r2, sp, #8
 8634 045c 4146     		mov	r1, r8
 8635 045e 3846     		mov	r0, r7
 8636 0460 FFF7FEFF 		bl	set_x_dn
 8637              	.LVL956:
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8638              		.loc 1 975 6 view .LVU2779
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8639              		.loc 1 975 21 is_stmt 0 view .LVU2780
 8640 0464 0121     		movs	r1, #1
 8641 0466 3046     		mov	r0, r6
 8642 0468 FFF7FEFF 		bl	pixel_length
 8643              	.LVL957:
 979:src/display.c **** 
 8644              		.loc 1 979 6 is_stmt 1 view .LVU2781
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8645              		.loc 1 975 21 is_stmt 0 view .LVU2782
ARM GAS  /tmp/ccxUm1xs.s 			page 263


 8646 046c 0446     		mov	r4, r0
 8647              	.LVL958:
 976:src/display.c **** 	      break;
 8648              		.loc 1 976 6 is_stmt 1 view .LVU2783
 976:src/display.c **** 	      break;
 8649              		.loc 1 976 9 is_stmt 0 view .LVU2784
 8650 046e 4B2C     		cmp	r4, #75
 979:src/display.c **** 
 8651              		.loc 1 979 6 view .LVU2785
 8652 0470 4FF00001 		mov	r1, #0
 8653 0474 4046     		mov	r0, r8
 8654              	.LVL959:
 976:src/display.c **** 	      break;
 8655              		.loc 1 976 9 view .LVU2786
 8656 0476 E0DC     		bgt	.L908
 8657              	.LVL960:
 976:src/display.c **** 	      break;
 8658              		.loc 1 976 9 view .LVU2787
 8659              	.LBE477:
 8660 0478 91E6     		b	.L772
 8661              	.LVL961:
 8662              	.L793:
 976:src/display.c **** 	      break;
 8663              		.loc 1 976 9 view .LVU2788
 8664              	.LBE480:
 861:src/display.c **** 	  p = scopy(p, q);
 8665              		.loc 1 861 4 is_stmt 1 view .LVU2789
 862:src/display.c **** 	}
 8666              		.loc 1 862 4 view .LVU2790
 862:src/display.c **** 	}
 8667              		.loc 1 862 8 is_stmt 0 view .LVU2791
 8668 047a 4849     		ldr	r1, .L911+16
 8669 047c 3046     		mov	r0, r6
 8670 047e FFF7FEFF 		bl	scopy
 8671              	.LVL962:
 8672 0482 D9F80020 		ldr	r2, [r9]
 8673 0486 8046     		mov	r8, r0
 8674              	.LVL963:
 862:src/display.c **** 	}
 8675              		.loc 1 862 6 view .LVU2792
 8676 0488 43E6     		b	.L795
 8677              	.LVL964:
 8678              	.L820:
 8679              	.LBB481:
 8680              	.LBB470:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8681              		.loc 1 3648 22 view .LVU2793
 8682 048a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8683 048c 5A06     		lsls	r2, r3, #25
 8684 048e 7FF58AAE 		bpl	.L821
 8685              	.LBE470:
 8686              	.LBE481:
 990:src/display.c **** #else
 8687              		.loc 1 990 5 view .LVU2794
 8688 0492 23B0     		add	sp, sp, #140
 8689              		.cfi_remember_state
 8690              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccxUm1xs.s 			page 264


 8691              		@ sp needed
 8692 0494 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8693              	.LVL965:
 8694              	.L894:
 8695              		.cfi_restore_state
 797:src/display.c **** 	  *p2++ = '\207';
 8696              		.loc 1 797 4 is_stmt 1 view .LVU2795
 798:src/display.c **** 	  *p2++ = '\007';	    
 8697              		.loc 1 798 4 view .LVU2796
 799:src/display.c **** 	}
 8698              		.loc 1 799 10 is_stmt 0 view .LVU2797
 8699 0498 88F80230 		strb	r3, [r8, #2]
 798:src/display.c **** 	  *p2++ = '\007';	    
 8700              		.loc 1 798 10 view .LVU2798
 8701 049c 88F80120 		strb	r2, [r8, #1]
 799:src/display.c **** 	}
 8702              		.loc 1 799 4 is_stmt 1 view .LVU2799
 799:src/display.c **** 	}
 8703              		.loc 1 799 7 is_stmt 0 view .LVU2800
 8704 04a0 08F10308 		add	r8, r8, #3
 8705              	.LVL966:
 799:src/display.c **** 	}
 8706              		.loc 1 799 7 view .LVU2801
 8707 04a4 EEE5     		b	.L785
 8708              	.LVL967:
 8709              	.L833:
 831:src/display.c **** #endif
 8710              		.loc 1 831 19 view .LVU2802
 8711 04a6 3E49     		ldr	r1, .L911+20
 8712 04a8 05E6     		b	.L787
 8713              	.LVL968:
 8714              	.L897:
 883:src/display.c **** 	    p = scopy(p, q);
 8715              		.loc 1 883 6 is_stmt 1 view .LVU2803
 884:src/display.c **** 	    //	    goto no_copy;
 8716              		.loc 1 884 6 view .LVU2804
 884:src/display.c **** 	    //	    goto no_copy;
 8717              		.loc 1 884 10 is_stmt 0 view .LVU2805
 8718 04aa 4046     		mov	r0, r8
 8719 04ac 3D49     		ldr	r1, .L911+24
 8720 04ae FFF7FEFF 		bl	scopy
 8721              	.LVL969:
 8722 04b2 8046     		mov	r8, r0
 8723              	.LVL970:
 884:src/display.c **** 	    //	    goto no_copy;
 8724              		.loc 1 884 10 view .LVU2806
 8725 04b4 30E6     		b	.L798
 8726              	.LVL971:
 8727              	.L898:
 727:src/display.c **** 	  *p2 = '\024';
 8728              		.loc 1 727 4 is_stmt 1 view .LVU2807
 727:src/display.c **** 	  *p2 = '\024';
 8729              		.loc 1 727 10 is_stmt 0 view .LVU2808
 8730 04b6 2022     		movs	r2, #32
 728:src/display.c **** 	  goto skip;
 8731              		.loc 1 728 8 view .LVU2809
 8732 04b8 1423     		movs	r3, #20
ARM GAS  /tmp/ccxUm1xs.s 			page 265


 727:src/display.c **** 	  *p2 = '\024';
 8733              		.loc 1 727 10 view .LVU2810
 8734 04ba 0270     		strb	r2, [r0]
 728:src/display.c **** 	  goto skip;
 8735              		.loc 1 728 4 is_stmt 1 view .LVU2811
 728:src/display.c **** 	  goto skip;
 8736              		.loc 1 728 8 is_stmt 0 view .LVU2812
 8737 04bc 4370     		strb	r3, [r0, #1]
 729:src/display.c **** 	}
 8738              		.loc 1 729 4 is_stmt 1 view .LVU2813
 8739 04be 6EE6     		b	.L772
 8740              	.LVL972:
 8741              	.L906:
 8742              	.LBB482:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8743              		.loc 1 905 77 is_stmt 0 discriminator 2 view .LVU2814
 8744 04c0 FFF7FEFF 		bl	stack_size
 8745              	.LVL973:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8746              		.loc 1 905 64 discriminator 2 view .LVU2815
 8747 04c4 D9F80010 		ldr	r1, [r9]
 8748 04c8 6330     		adds	r0, r0, #99
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8749              		.loc 1 905 48 discriminator 2 view .LVU2816
 8750 04ca 8842     		cmp	r0, r1
 8751 04cc FFF6E7AE 		blt	.L804
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8752              		.loc 1 906 13 view .LVU2817
 8753 04d0 FFF7FEFF 		bl	get_cmdline
 8754              	.LVL974:
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8755              		.loc 1 906 9 view .LVU2818
 8756 04d4 0028     		cmp	r0, #0
 8757 04d6 4BD0     		beq	.L806
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8758              		.loc 1 906 27 discriminator 1 view .LVU2819
 8759 04d8 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8760 04da 002B     		cmp	r3, #0
 8761 04dc 48D1     		bne	.L806
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8762              		.loc 1 907 9 view .LVU2820
 8763 04de 17B1     		cbz	r7, .L807
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8764              		.loc 1 907 30 discriminator 1 view .LVU2821
 8765 04e0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8766              		.loc 1 907 12 discriminator 1 view .LVU2822
 8767 04e2 5906     		lsls	r1, r3, #25
 8768 04e4 44D5     		bpl	.L806
 8769              	.L807:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8770              		.loc 1 905 6 discriminator 5 view .LVU2823
 8771 04e6 D9F80010 		ldr	r1, [r9]
 8772 04ea D9E6     		b	.L808
 8773              	.L904:
 897:src/display.c **** 	    goto skip;
 8774              		.loc 1 897 6 is_stmt 1 view .LVU2824
ARM GAS  /tmp/ccxUm1xs.s 			page 266


 8775 04ec 6520     		movs	r0, #101
 8776 04ee FFF7FEFF 		bl	get_reg_n_int
 8777              	.LVL975:
 8778 04f2 4246     		mov	r2, r8
 8779 04f4 FFF7FEFF 		bl	set_int_x
 8780              	.LVL976:
 898:src/display.c **** 	  }
 8781              		.loc 1 898 6 view .LVU2825
 8782 04f8 51E6     		b	.L772
 8783              	.L905:
 902:src/display.c **** 	  }
 8784              		.loc 1 902 6 view .LVU2826
 8785 04fa 03AF     		add	r7, sp, #12
 8786              	.LVL977:
 902:src/display.c **** 	  }
 8787              		.loc 1 902 6 is_stmt 0 view .LVU2827
 8788 04fc 3846     		mov	r0, r7
 8789 04fe 6F21     		movs	r1, #111
 8790 0500 FFF7FEFF 		bl	getRegister
 8791              	.LVL978:
 8792 0504 D0E6     		b	.L803
 8793              	.LVL979:
 8794              	.L895:
 902:src/display.c **** 	  }
 8795              		.loc 1 902 6 view .LVU2828
 8796              	.LBE482:
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8797              		.loc 1 851 4 is_stmt 1 view .LVU2829
 852:src/display.c **** 	  }
 8798              		.loc 1 852 6 view .LVU2830
 855:src/display.c **** 	  }
 8799              		.loc 1 855 6 view .LVU2831
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8800              		.loc 1 851 7 is_stmt 0 view .LVU2832
 8801 0506 1906     		lsls	r1, r3, #24
 852:src/display.c **** 	  }
 8802              		.loc 1 852 33 view .LVU2833
 8803 0508 4BBF     		itete	mi
 8804 050a 274A     		ldrmi	r2, .L911+28
 855:src/display.c **** 	  }
 8805              		.loc 1 855 31 view .LVU2834
 8806 050c 274A     		ldrpl	r2, .L911+32
 852:src/display.c **** 	  }
 8807              		.loc 1 852 33 view .LVU2835
 8808 050e 2849     		ldrmi	r1, .L911+36
 855:src/display.c **** 	  }
 8809              		.loc 1 855 31 view .LVU2836
 8810 0510 2849     		ldrpl	r1, .L911+40
 8811 0512 13F0020F 		tst	r3, #2
 8812 0516 08BF     		it	eq
 8813 0518 1146     		moveq	r1, r2
 8814              	.LVL980:
 857:src/display.c **** 	  goto skip;
 8815              		.loc 1 857 4 is_stmt 1 view .LVU2837
 8816 051a 3046     		mov	r0, r6
 8817 051c FFF7FEFF 		bl	scopy
 8818              	.LVL981:
ARM GAS  /tmp/ccxUm1xs.s 			page 267


 858:src/display.c **** 	}
 8819              		.loc 1 858 4 view .LVU2838
 8820 0520 3DE6     		b	.L772
 8821              	.LVL982:
 8822              	.L774:
 718:src/display.c **** 	    *p2++ = shift_char;
 8823              		.loc 1 718 30 is_stmt 0 discriminator 1 view .LVU2839
 8824 0522 FFF7FEFF 		bl	is_dblmode
 8825              	.LVL983:
 718:src/display.c **** 	    *p2++ = shift_char;
 8826              		.loc 1 718 26 discriminator 1 view .LVU2840
 8827 0526 0028     		cmp	r0, #0
 8828 0528 3FF410AE 		beq	.L776
 723:src/display.c **** 	  }
 8829              		.loc 1 723 6 is_stmt 1 view .LVU2841
 8830              	.LVL984:
 723:src/display.c **** 	  }
 8831              		.loc 1 723 12 is_stmt 0 view .LVU2842
 8832 052c 4423     		movs	r3, #68
 8833 052e 8DF85C30 		strb	r3, [sp, #92]
 723:src/display.c **** 	  }
 8834              		.loc 1 723 9 view .LVU2843
 8835 0532 0DF15D00 		add	r0, sp, #93
 8836              	.LVL985:
 723:src/display.c **** 	  }
 8837              		.loc 1 723 9 view .LVU2844
 8838 0536 10E6     		b	.L775
 8839              	.L899:
 732:src/display.c **** 	  *p2 = '\015';
 8840              		.loc 1 732 4 is_stmt 1 view .LVU2845
 8841              	.LVL986:
 732:src/display.c **** 	  *p2 = '\015';
 8842              		.loc 1 732 10 is_stmt 0 view .LVU2846
 8843 0538 2022     		movs	r2, #32
 733:src/display.c **** 	  goto skip;
 8844              		.loc 1 733 8 view .LVU2847
 8845 053a 0D23     		movs	r3, #13
 732:src/display.c **** 	  *p2 = '\015';
 8846              		.loc 1 732 10 view .LVU2848
 8847 053c 0270     		strb	r2, [r0]
 733:src/display.c **** 	  goto skip;
 8848              		.loc 1 733 4 is_stmt 1 view .LVU2849
 733:src/display.c **** 	  goto skip;
 8849              		.loc 1 733 8 is_stmt 0 view .LVU2850
 8850 053e 4370     		strb	r3, [r0, #1]
 734:src/display.c **** 	}
 8851              		.loc 1 734 4 is_stmt 1 view .LVU2851
 8852 0540 2DE6     		b	.L772
 8853              	.LVL987:
 8854              	.L900:
 737:src/display.c **** 	  if (State2.wascomplex) {
 8855              		.loc 1 737 28 is_stmt 0 discriminator 1 view .LVU2852
 8856 0542 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 737:src/display.c **** 	  if (State2.wascomplex) {
 8857              		.loc 1 737 24 discriminator 1 view .LVU2853
 8858 0544 13F0C00F 		tst	r3, #192
 8859 0548 1AD1     		bne	.L828
ARM GAS  /tmp/ccxUm1xs.s 			page 268


 737:src/display.c **** 	  if (State2.wascomplex) {
 8860              		.loc 1 737 60 discriminator 2 view .LVU2854
 8861 054a 124B     		ldr	r3, .L911+8
 8862 054c 1B68     		ldr	r3, [r3]
 737:src/display.c **** 	  if (State2.wascomplex) {
 8863              		.loc 1 737 46 discriminator 2 view .LVU2855
 8864 054e 002B     		cmp	r3, #0
 8865 0550 3FF40FAE 		beq	.L779
 738:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8866              		.loc 1 738 4 is_stmt 1 view .LVU2856
 741:src/display.c **** 	    if (RectPolConv == 1) {
 8867              		.loc 1 741 9 view .LVU2857
 742:src/display.c **** 	      q = "\007\306<";
 8868              		.loc 1 742 6 view .LVU2858
 746:src/display.c **** 	    }
 8869              		.loc 1 746 10 is_stmt 0 view .LVU2859
 8870 0554 1849     		ldr	r1, .L911+44
 8871 0556 194A     		ldr	r2, .L911+48
 8872 0558 012B     		cmp	r3, #1
 8873 055a 18BF     		it	ne
 8874 055c 1146     		movne	r1, r2
 8875              	.L780:
 8876              	.LVL988:
 749:src/display.c **** 
 8877              		.loc 1 749 4 is_stmt 1 view .LVU2860
 749:src/display.c **** 
 8878              		.loc 1 749 8 is_stmt 0 view .LVU2861
 8879 055e 3046     		mov	r0, r6
 8880              	.LVL989:
 749:src/display.c **** 
 8881              		.loc 1 749 8 view .LVU2862
 8882 0560 FFF7FEFF 		bl	scopy
 8883              	.LVL990:
 749:src/display.c **** 
 8884              		.loc 1 749 8 view .LVU2863
 8885 0564 8046     		mov	r8, r0
 8886              	.LVL991:
 751:src/display.c **** 	}
 8887              		.loc 1 751 4 is_stmt 1 view .LVU2864
 8888 0566 85E6     		b	.L762
 8889              	.LVL992:
 8890              	.L830:
 760:src/display.c **** #endif
 8891              		.loc 1 760 19 is_stmt 0 view .LVU2865
 8892 0568 0D49     		ldr	r1, .L911+20
 8893 056a 10E6     		b	.L781
 8894              	.LVL993:
 8895              	.L887:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8896              		.loc 1 691 4 is_stmt 1 view .LVU2866
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8897              		.loc 1 691 11 is_stmt 0 view .LVU2867
 8898 056c 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8899              		.loc 1 691 27 is_stmt 1 view .LVU2868
 8900 056e 6FE6     		b	.L824
 8901              	.LVL994:
ARM GAS  /tmp/ccxUm1xs.s 			page 269


 8902              	.L806:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8903              		.loc 1 691 27 is_stmt 0 view .LVU2869
 8904 0570 D9F80010 		ldr	r1, [r9]
 8905 0574 93E6     		b	.L804
 8906              	.LVL995:
 8907              	.L901:
 771:src/display.c **** 	}
 8908              		.loc 1 771 4 is_stmt 1 view .LVU2870
 8909 0576 1249     		ldr	r1, .L911+52
 8910 0578 2046     		mov	r0, r4
 8911 057a FFF7FEFF 		bl	scopy
 8912              	.LVL996:
 8913 057e 0EE6     		b	.L772
 8914              	.LVL997:
 8915              	.L828:
 739:src/display.c **** 	  }
 8916              		.loc 1 739 8 is_stmt 0 view .LVU2871
 8917 0580 1049     		ldr	r1, .L911+56
 8918 0582 ECE7     		b	.L780
 8919              	.LVL998:
 8920              	.L839:
 8921              	.LBB483:
 8922              	.LBB478:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8923              		.loc 1 955 25 view .LVU2872
 8924 0584 4FF03E09 		mov	r9, #62
 8925              	.LVL999:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8926              		.loc 1 955 25 view .LVU2873
 8927 0588 35E7     		b	.L817
 8928              	.L912:
 8929 058a 00BF     		.align	2
 8930              	.L911:
 8931 058c 00000000 		.word	StateWhileOn
 8932 0590 00000000 		.word	.LANCHOR18
 8933 0594 00000000 		.word	RectPolConv
 8934 0598 68000000 		.word	.LC21
 8935 059c 60000000 		.word	.LC18
 8936 05a0 14000000 		.word	.LC7
 8937 05a4 64000000 		.word	.LC19
 8938 05a8 3C000000 		.word	.LC13
 8939 05ac 44000000 		.word	.LC14
 8940 05b0 2C000000 		.word	.LC11
 8941 05b4 34000000 		.word	.LC12
 8942 05b8 04000000 		.word	.LC3
 8943 05bc 0C000000 		.word	.LC5
 8944 05c0 50000000 		.word	.LC16
 8945 05c4 08000000 		.word	.LC4
 8946              	.LBE478:
 8947              	.LBE483:
 8948              		.cfi_endproc
 8949              	.LFE16:
 8951              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8952              		.align	2
 8953              	.LC22:
 8954 0000 0D00     		.ascii	"\015\000"
ARM GAS  /tmp/ccxUm1xs.s 			page 270


 8955 0002 0000     		.align	2
 8956              	.LC23:
 8957 0004 060600   		.ascii	"\006\006\000"
 8958 0007 00       		.align	2
 8959              	.LC25:
 8960 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8960      492C2057 
 8960      77414C74 
 8960      4500
 8961 0016 0000     		.align	2
 8962              	.LC26:
 8963 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8963      2055204C 
 8963      20492C20 
 8963      20572041 
 8963      204C2054 
 8964 0032 0000     		.align	2
 8965              	.LC27:
 8966 0034 2000     		.ascii	" \000"
 8967 0036 0000     		.align	2
 8968              	.LC28:
 8969 0038 48595000 		.ascii	"HYP\000"
 8970              		.align	2
 8971              	.LC29:
 8972 003c 7F060600 		.ascii	"\177\006\006\000"
 8973              		.align	2
 8974              	.LC32:
 8975 0040 3020746F 		.ascii	"0 to 255\000"
 8975      20323535 
 8975      00
 8976 0049 000000   		.align	2
 8977              	.LC33:
 8978 004c 46726565 		.ascii	"Free:\000"
 8978      3A00
 8979 0052 0000     		.align	2
 8980              	.LC34:
 8981 0054 202C2046 		.ascii	" , FL. \000"
 8981      4C2E2000 
 8982              		.align	2
 8983              	.LC35:
 8984 005c 52656773 		.ascii	"Regs:\000"
 8984      3A00
 8985 0062 0000     		.align	2
 8986              	.LC36:
 8987 0064 20910606 		.ascii	" \221\006\006+\000"
 8987      2B00
 8988 006a 0000     		.align	2
 8989              	.LC37:
 8990 006c 202C204C 		.ascii	" , Loc. \000"
 8990      6F632E20 
 8990      00
 8991 0075 000000   		.align	2
 8992              	.LC38:
 8993 0078 464C2000 		.ascii	"FL \000"
 8994              		.align	2
 8995              	.LC39:
 8996 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
ARM GAS  /tmp/ccxUm1xs.s 			page 271


 8996      06413A44 
 8996      064C494A 
 8996      4B00
 8997 008a 0000     		.align	2
 8998              	.LC40:
 8999 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8999      302D2E31 
 8999      3500
 9000 0096 0000     		.align	2
 9001              	.LC41:
 9002 0098 43414C4C 		.ascii	"CALLS\000"
 9002      5300
 9003 009e 0000     		.align	2
 9004              	.LC42:
 9005 00a0 52656720 		.ascii	"Reg \000"
 9005      00
 9006 00a5 000000   		.align	2
 9007              	.LC43:
 9008 00a8 00       		.ascii	"\000"
 9009 00a9 000000   		.align	2
 9010              	.LC44:
 9011 00ac 202D2D2D 		.ascii	" ---\000"
 9011      00
 9012 00b1 000000   		.align	2
 9013              	.LC31:
 9014 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 9014      093E0A00 
 9015              		.align	2
 9016              	.LC30:
 9017 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 9017      41424344 
 9017      4C494A4B 
 9017      00
 9018              		.section	.text.display,"ax",%progbits
 9019              		.align	1
 9020              		.p2align 2,,3
 9021              		.global	display
 9022              		.syntax unified
 9023              		.thumb
 9024              		.thumb_func
 9025              		.fpu fpv4-sp-d16
 9027              	display:
 9028              	.LFB34:
2677:src/display.c **** 	int i, j;
 9029              		.loc 1 2677 26 is_stmt 1 view -0
 9030              		.cfi_startproc
 9031              		@ args = 0, pretend = 0, frame = 160
 9032              		@ frame_needed = 0, uses_anonymous_args = 0
2678:src/display.c **** 	char buf[40], *bp = buf;
 9033              		.loc 1 2678 2 view .LVU2875
2679:src/display.c **** 	const char *p;
 9034              		.loc 1 2679 2 view .LVU2876
2677:src/display.c **** 	int i, j;
 9035              		.loc 1 2677 26 is_stmt 0 view .LVU2877
 9036 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9037              		.cfi_def_cfa_offset 36
 9038              		.cfi_offset 4, -36
ARM GAS  /tmp/ccxUm1xs.s 			page 272


 9039              		.cfi_offset 5, -32
 9040              		.cfi_offset 6, -28
 9041              		.cfi_offset 7, -24
 9042              		.cfi_offset 8, -20
 9043              		.cfi_offset 9, -16
 9044              		.cfi_offset 10, -12
 9045              		.cfi_offset 11, -8
 9046              		.cfi_offset 14, -4
2682:src/display.c **** 	int skip = 0;
 9047              		.loc 1 2682 24 view .LVU2878
 9048 0004 C14C     		ldr	r4, .L1251
2687:src/display.c **** 	if (State2.disp_freeze) {
 9049              		.loc 1 2687 16 view .LVU2879
 9050 0006 DFF83893 		ldr	r9, .L1251+52
2682:src/display.c **** 	int skip = 0;
 9051              		.loc 1 2682 24 view .LVU2880
 9052 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
2677:src/display.c **** 	int i, j;
 9053              		.loc 1 2677 26 view .LVU2881
 9054 000e A9B0     		sub	sp, sp, #164
 9055              		.cfi_def_cfa_offset 200
 9056              	.LVL1000:
2680:src/display.c **** 	int annuc = 0;
 9057              		.loc 1 2680 2 is_stmt 1 view .LVU2882
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9058              		.loc 1 2681 2 view .LVU2883
2682:src/display.c **** 	int skip = 0;
 9059              		.loc 1 2682 2 view .LVU2884
2683:src/display.c **** 	int x_disp = 0;
 9060              		.loc 1 2683 2 view .LVU2885
2684:src/display.c **** 	const int shift = cur_shift();
 9061              		.loc 1 2684 2 view .LVU2886
2685:src/display.c **** 
 9062              		.loc 1 2685 2 view .LVU2887
2685:src/display.c **** 
 9063              		.loc 1 2685 20 is_stmt 0 view .LVU2888
 9064 0010 FFF7FEFF 		bl	cur_shift
 9065              	.LVL1001:
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9066              		.loc 1 2688 6 view .LVU2889
 9067 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2687:src/display.c **** 	if (State2.disp_freeze) {
 9068              		.loc 1 2687 16 view .LVU2890
 9069 0016 0022     		movs	r2, #0
 9070              	.LVL1002:
2687:src/display.c **** 	if (State2.disp_freeze) {
 9071              		.loc 1 2687 2 is_stmt 1 view .LVU2891
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9072              		.loc 1 2688 5 is_stmt 0 view .LVU2892
 9073 0018 13F01007 		ands	r7, r3, #16
2687:src/display.c **** 	if (State2.disp_freeze) {
 9074              		.loc 1 2687 16 view .LVU2893
 9075 001c A9F80020 		strh	r2, [r9]	@ movhi
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9076              		.loc 1 2688 2 is_stmt 1 view .LVU2894
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9077              		.loc 1 2688 5 is_stmt 0 view .LVU2895
ARM GAS  /tmp/ccxUm1xs.s 			page 273


 9078 0020 40F0F780 		bne	.L1211
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9079              		.loc 1 2698 2 is_stmt 1 view .LVU2896
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9080              		.loc 1 2698 6 is_stmt 0 view .LVU2897
 9081 0024 DFF81C83 		ldr	r8, .L1251+56
 9082 0028 D8F80060 		ldr	r6, [r8]
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9083              		.loc 1 2698 5 view .LVU2898
 9084 002c 002E     		cmp	r6, #0
 9085 002e 40F08280 		bne	.L1212
2717:src/display.c **** #  endif
 9086              		.loc 1 2717 2 is_stmt 1 view .LVU2899
2717:src/display.c **** #  endif
 9087              		.loc 1 2717 33 is_stmt 0 view .LVU2900
 9088 0032 B74B     		ldr	r3, .L1251+4
 9089 0034 1B68     		ldr	r3, [r3]
 9090 0036 0546     		mov	r5, r0
 9091 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2723:src/display.c **** 
 9092              		.loc 1 2723 2 view .LVU2901
 9093 003c FFF7FEFF 		bl	reset_disp
 9094              	.LVL1003:
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9095              		.loc 1 2726 2 view .LVU2902
 9096 0040 3146     		mov	r1, r6
 9097 0042 1EA8     		add	r0, sp, #120
 9098              	.LVL1004:
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9099              		.loc 1 2726 2 view .LVU2903
 9100 0044 2822     		movs	r2, #40
 9101 0046 FFF7FEFF 		bl	xset
 9102              	.LVL1005:
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9103              		.loc 1 2732 6 view .LVU2904
 9104 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9105              		.loc 1 2732 5 view .LVU2905
 9106 004c D906     		lsls	r1, r3, #27
2717:src/display.c **** #  endif
 9107              		.loc 1 2717 12 view .LVU2906
 9108 004e CBF3800B 		ubfx	fp, fp, #2, #1
 9109              	.LVL1006:
2723:src/display.c **** 
 9110              		.loc 1 2723 2 is_stmt 1 view .LVU2907
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9111              		.loc 1 2726 2 view .LVU2908
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9112              		.loc 1 2732 2 view .LVU2909
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9113              		.loc 1 2732 5 is_stmt 0 view .LVU2910
 9114 0052 00F19D81 		bmi	.L1213
2744:src/display.c **** 	  if (yreg_enabled) {
 9115              		.loc 1 2744 9 is_stmt 1 view .LVU2911
2744:src/display.c **** 	  if (yreg_enabled) {
 9116              		.loc 1 2744 13 is_stmt 0 view .LVU2912
 9117 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccxUm1xs.s 			page 274


2744:src/display.c **** 	  if (yreg_enabled) {
 9118              		.loc 1 2744 12 view .LVU2913
 9119 0058 5207     		lsls	r2, r2, #29
 9120 005a 00F0E480 		beq	.L921
2745:src/display.c **** 	    set_status_top(S_SURE);
 9121              		.loc 1 2745 4 is_stmt 1 view .LVU2914
2745:src/display.c **** 	    set_status_top(S_SURE);
 9122              		.loc 1 2745 7 is_stmt 0 view .LVU2915
 9123 005e BBF1000F 		cmp	fp, #0
 9124 0062 00F0D581 		beq	.L922
2746:src/display.c **** 	    no_status_top = 1;
 9125              		.loc 1 2746 6 is_stmt 1 view .LVU2916
 9126              	.LVL1007:
 9127              	.LBB544:
 9128              	.LBI544:
3637:src/display.c **** 	if (no_status_top) return;
 9129              		.loc 1 3637 19 view .LVU2917
 9130              	.LBB545:
3638:src/display.c **** 	if (State2.runmode) {
 9131              		.loc 1 3638 2 view .LVU2918
3638:src/display.c **** 	if (State2.runmode) {
 9132              		.loc 1 3638 5 is_stmt 0 view .LVU2919
 9133 0066 B9F90030 		ldrsh	r3, [r9]
 9134 006a 13B9     		cbnz	r3, .L924
 9135 006c A948     		ldr	r0, .L1251+8
 9136 006e FFF7FEFF 		bl	set_status_top.part.0
 9137              	.LVL1008:
 9138              	.L924:
3638:src/display.c **** 	if (State2.runmode) {
 9139              		.loc 1 3638 5 view .LVU2920
 9140              	.LBE545:
 9141              	.LBE544:
2747:src/display.c **** 	    annuc = 1;
 9142              		.loc 1 2747 6 is_stmt 1 view .LVU2921
2747:src/display.c **** 	    annuc = 1;
 9143              		.loc 1 2747 20 is_stmt 0 view .LVU2922
 9144 0072 0126     		movs	r6, #1
 9145 0074 A9F80060 		strh	r6, [r9]	@ movhi
2748:src/display.c **** 	  }
 9146              		.loc 1 2748 6 is_stmt 1 view .LVU2923
 9147              	.LVL1009:
2971:src/display.c ****       nostk:
 9148              		.loc 1 2971 2 view .LVU2924
 9149 0078 FFF7FEFF 		bl	show_stack
 9150              	.LVL1010:
2973:src/display.c **** 	if (!skip) {
 9151              		.loc 1 2973 2 view .LVU2925
 9152 007c A64B     		ldr	r3, .L1251+12
 9153 007e A74F     		ldr	r7, .L1251+16
 9154 0080 0093     		str	r3, [sp]
 9155 0082 FFF7FEFF 		bl	show_flags
 9156              	.LVL1011:
2974:src/display.c **** 	  if (State2.runmode) {
 9157              		.loc 1 2974 2 view .LVU2926
 9158              	.L925:
2975:src/display.c **** 	  only_update_x:
 9159              		.loc 1 2975 4 view .LVU2927
ARM GAS  /tmp/ccxUm1xs.s 			page 275


2975:src/display.c **** 	  only_update_x:
 9160              		.loc 1 2975 8 is_stmt 0 view .LVU2928
 9161 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2975:src/display.c **** 	  only_update_x:
 9162              		.loc 1 2975 7 view .LVU2929
 9163 0088 15F04005 		ands	r5, r5, #64
 9164 008c 5FD1     		bne	.L918
 9165              	.LBB546:
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9166              		.loc 1 3015 6 is_stmt 1 view .LVU2930
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9167              		.loc 1 3015 24 is_stmt 0 view .LVU2931
 9168 008e A04B     		ldr	r3, .L1251+4
3019:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9169              		.loc 1 3019 6 view .LVU2932
 9170 0090 DFF8B4A2 		ldr	r10, .L1251+60
 9171              	.LVL1012:
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9172              		.loc 1 3015 24 view .LVU2933
 9173 0094 1B68     		ldr	r3, [r3]
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9174              		.loc 1 3015 19 view .LVU2934
 9175 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9176              	.LVL1013:
3016:src/display.c **** 	    const int n = nLIB(pc);
 9177              		.loc 1 3016 6 is_stmt 1 view .LVU2935
3016:src/display.c **** 	    const int n = nLIB(pc);
 9178              		.loc 1 3016 25 is_stmt 0 view .LVU2936
 9179 009a 5846     		mov	r0, fp
 9180 009c FFF7FEFF 		bl	user_pc
 9181              	.LVL1014:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9182              		.loc 1 3018 6 view .LVU2937
 9183 00a0 2822     		movs	r2, #40
 9184 00a2 2946     		mov	r1, r5
3016:src/display.c **** 	    const int n = nLIB(pc);
 9185              		.loc 1 3016 25 view .LVU2938
 9186 00a4 8046     		mov	r8, r0
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9187              		.loc 1 3018 6 view .LVU2939
 9188 00a6 1EA8     		add	r0, sp, #120
 9189              	.LVL1015:
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9190              		.loc 1 3017 6 is_stmt 1 view .LVU2940
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9191              		.loc 1 3018 6 is_stmt 0 view .LVU2941
 9192 00a8 FFF7FEFF 		bl	xset
 9193              	.LVL1016:
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9194              		.loc 1 3017 20 view .LVU2942
 9195 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9196              	.LVL1017:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9197              		.loc 1 3018 6 is_stmt 1 view .LVU2943
3019:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9198              		.loc 1 3019 6 view .LVU2944
 9199 00b0 DAF80000 		ldr	r0, [r10]
ARM GAS  /tmp/ccxUm1xs.s 			page 276


 9200 00b4 2A46     		mov	r2, r5
 9201 00b6 0121     		movs	r1, #1
 9202 00b8 FFF7FEFF 		bl	set_exp
 9203              	.LVL1018:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9204              		.loc 1 3020 6 view .LVU2945
 9205 00bc BBF1000F 		cmp	fp, #0
 9206 00c0 40F0E581 		bne	.L1214
 9207 00c4 9649     		ldr	r1, .L1251+20
 9208 00c6 1EA8     		add	r0, sp, #120
 9209 00c8 FFF7FEFF 		bl	scopy_spc
 9210              	.LVL1019:
 9211 00cc 0322     		movs	r2, #3
 9212 00ce 4146     		mov	r1, r8
 9213 00d0 FFF7FEFF 		bl	num_arg_0
 9214              	.LVL1020:
3022:src/display.c **** #ifndef REALBUILD
 9215              		.loc 1 3022 6 view .LVU2946
 9216 00d4 0921     		movs	r1, #9
 9217 00d6 1EA8     		add	r0, sp, #120
 9218 00d8 FFF7FEFF 		bl	set_digits_string
 9219              	.LVL1021:
3024:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9220              		.loc 1 3024 6 view .LVU2947
 9221 00dc 5946     		mov	r1, fp
 9222 00de 2822     		movs	r2, #40
 9223 00e0 1EA8     		add	r0, sp, #120
 9224 00e2 FFF7FEFF 		bl	xset
 9225              	.LVL1022:
3025:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9226              		.loc 1 3025 6 view .LVU2948
 9227 00e6 5A46     		mov	r2, fp
 9228 00e8 0121     		movs	r1, #1
 9229 00ea DAF80000 		ldr	r0, [r10]
 9230 00ee FFF7FEFF 		bl	set_exp
 9231              	.LVL1023:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9232              		.loc 1 3026 6 view .LVU2949
 9233 00f2 8C49     		ldr	r1, .L1251+24
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9234              		.loc 1 3020 6 is_stmt 0 view .LVU2950
 9235 00f4 4FF0030B 		mov	fp, #3
 9236              	.LVL1024:
 9237              	.L1063:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9238              		.loc 1 3026 6 discriminator 4 view .LVU2951
 9239 00f8 1EA8     		add	r0, sp, #120
 9240 00fa FFF7FEFF 		bl	scopy_spc
 9241              	.LVL1025:
 9242 00fe 4146     		mov	r1, r8
 9243 0100 5A46     		mov	r2, fp
 9244 0102 FFF7FEFF 		bl	num_arg_0
 9245              	.LVL1026:
 9246              	.LBB547:
3029:src/display.c **** 	      char *l=LastDisplayedNumber;
 9247              		.loc 1 3029 8 is_stmt 1 discriminator 4 view .LVU2952
3030:src/display.c **** 	      *l++=' ';
ARM GAS  /tmp/ccxUm1xs.s 			page 277


 9248              		.loc 1 3030 8 discriminator 4 view .LVU2953
3031:src/display.c **** 	      while(*b) {
 9249              		.loc 1 3031 8 discriminator 4 view .LVU2954
3031:src/display.c **** 	      while(*b) {
 9250              		.loc 1 3031 12 is_stmt 0 discriminator 4 view .LVU2955
 9251 0106 884B     		ldr	r3, .L1251+28
3032:src/display.c **** 		*l++=*b++;
 9252              		.loc 1 3032 14 discriminator 4 view .LVU2956
 9253 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3031:src/display.c **** 	      while(*b) {
 9254              		.loc 1 3031 12 discriminator 4 view .LVU2957
 9255 010c 2025     		movs	r5, #32
 9256 010e 1D70     		strb	r5, [r3]
3032:src/display.c **** 		*l++=*b++;
 9257              		.loc 1 3032 8 is_stmt 1 discriminator 4 view .LVU2958
3032:src/display.c **** 		*l++=*b++;
 9258              		.loc 1 3032 13 discriminator 4 view .LVU2959
 9259 0110 0029     		cmp	r1, #0
 9260 0112 00F03883 		beq	.L1078
 9261 0116 0333     		adds	r3, r3, #3
 9262 0118 1EA8     		add	r0, sp, #120
 9263              	.LVL1027:
 9264              	.L1056:
3033:src/display.c **** 		*l++=' ';
 9265              		.loc 1 3033 3 view .LVU2960
3033:src/display.c **** 		*l++=' ';
 9266              		.loc 1 3033 7 is_stmt 0 view .LVU2961
 9267 011a 03F8021C 		strb	r1, [r3, #-2]
3034:src/display.c **** 	      }
 9268              		.loc 1 3034 3 is_stmt 1 view .LVU2962
 9269              	.LVL1028:
3032:src/display.c **** 		*l++=*b++;
 9270              		.loc 1 3032 14 is_stmt 0 view .LVU2963
 9271 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9272              	.LVL1029:
3034:src/display.c **** 	      }
 9273              		.loc 1 3034 7 view .LVU2964
 9274 0122 03F8015C 		strb	r5, [r3, #-1]
3032:src/display.c **** 		*l++=*b++;
 9275              		.loc 1 3032 13 is_stmt 1 view .LVU2965
 9276 0126 1A46     		mov	r2, r3
 9277 0128 0233     		adds	r3, r3, #2
 9278              	.LVL1030:
3032:src/display.c **** 		*l++=*b++;
 9279              		.loc 1 3032 13 is_stmt 0 view .LVU2966
 9280 012a 0029     		cmp	r1, #0
 9281 012c F5D1     		bne	.L1056
 9282              	.LVL1031:
 9283              	.L1055:
3036:src/display.c **** 	    }
 9284              		.loc 1 3036 8 is_stmt 1 view .LVU2967
3036:src/display.c **** 	    }
 9285              		.loc 1 3036 10 is_stmt 0 view .LVU2968
 9286 012e 0023     		movs	r3, #0
 9287 0130 7E4D     		ldr	r5, .L1251+32
 9288 0132 1370     		strb	r3, [r2]
 9289              	.LVL1032:
ARM GAS  /tmp/ccxUm1xs.s 			page 278


3036:src/display.c **** 	    }
 9290              		.loc 1 3036 10 view .LVU2969
 9291              	.LBE547:
 9292              	.LBE546:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9293              		.loc 1 3041 2 is_stmt 1 view .LVU2970
 9294 0134 2AE0     		b	.L1210
 9295              	.LVL1033:
 9296              	.L1212:
2705:src/display.c **** 
 9297              		.loc 1 2705 4 view .LVU2971
 9298 0136 FFF7FEFF 		bl	wait_for_display
 9299              	.LVL1034:
2708:src/display.c **** 	    clr_dot(i);
 9300              		.loc 1 2708 4 view .LVU2972
2708:src/display.c **** 	    clr_dot(i);
 9301              		.loc 1 2708 16 view .LVU2973
 9302              	.L917:
2709:src/display.c **** 	  }
 9303              		.loc 1 2709 6 discriminator 3 view .LVU2974
 9304 013a 3846     		mov	r0, r7
2708:src/display.c **** 	    clr_dot(i);
 9305              		.loc 1 2708 31 is_stmt 0 discriminator 3 view .LVU2975
 9306 013c 0137     		adds	r7, r7, #1
 9307              	.LVL1035:
2709:src/display.c **** 	  }
 9308              		.loc 1 2709 6 discriminator 3 view .LVU2976
 9309 013e FFF7FEFF 		bl	clr_dot
 9310              	.LVL1036:
2708:src/display.c **** 	    clr_dot(i);
 9311              		.loc 1 2708 31 is_stmt 1 discriminator 3 view .LVU2977
2708:src/display.c **** 	    clr_dot(i);
 9312              		.loc 1 2708 16 discriminator 3 view .LVU2978
2708:src/display.c **** 	    clr_dot(i);
 9313              		.loc 1 2708 4 is_stmt 0 discriminator 3 view .LVU2979
 9314 0142 832F     		cmp	r7, #131
 9315 0144 F9D1     		bne	.L917
 9316 0146 744B     		ldr	r3, .L1251+12
 9317 0148 744F     		ldr	r7, .L1251+16
 9318              	.LVL1037:
2708:src/display.c **** 	    clr_dot(i);
 9319              		.loc 1 2708 4 discriminator 3 view .LVU2980
 9320 014a 0093     		str	r3, [sp]
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9321              		.loc 1 2681 6 view .LVU2981
 9322 014c 0026     		movs	r6, #0
 9323              	.LVL1038:
 9324              	.L918:
2977:src/display.c **** 	    if (p == NULL || cata) {
 9325              		.loc 1 2977 6 is_stmt 1 view .LVU2982
2977:src/display.c **** 	    if (p == NULL || cata) {
 9326              		.loc 1 2977 10 is_stmt 0 view .LVU2983
 9327 014e FFF7FEFF 		bl	get_cmdline
 9328              	.LVL1039:
2978:src/display.c **** 	      if (ShowRegister != -1) {
 9329              		.loc 1 2978 6 is_stmt 1 view .LVU2984
2978:src/display.c **** 	      if (ShowRegister != -1) {
ARM GAS  /tmp/ccxUm1xs.s 			page 279


 9330              		.loc 1 2978 9 is_stmt 0 view .LVU2985
 9331 0152 0546     		mov	r5, r0
 9332 0154 18B1     		cbz	r0, .L1012
2978:src/display.c **** 	      if (ShowRegister != -1) {
 9333              		.loc 1 2978 20 discriminator 1 view .LVU2986
 9334 0156 BAF1000F 		cmp	r10, #0
 9335 015a 00F09F80 		beq	.L1013
 9336              	.L1012:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9337              		.loc 1 2979 8 is_stmt 1 view .LVU2987
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9338              		.loc 1 2979 25 is_stmt 0 view .LVU2988
 9339 015e 734D     		ldr	r5, .L1251+32
 9340 0160 2868     		ldr	r0, [r5]
 9341              	.LVL1040:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9342              		.loc 1 2979 11 view .LVU2989
 9343 0162 411C     		adds	r1, r0, #1
 9344 0164 00F04A81 		beq	.L1014
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9345              		.loc 1 2981 3 is_stmt 1 view .LVU2990
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9346              		.loc 1 2981 8 is_stmt 0 view .LVU2991
 9347 0168 694A     		ldr	r2, .L1251+4
 9348 016a 1168     		ldr	r1, [r2]
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9349              		.loc 1 2981 34 view .LVU2992
 9350 016c 91F8AC37 		ldrb	r3, [r1, #1964]	@ zero_extendqisi2
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9351              		.loc 1 2981 6 view .LVU2993
 9352 0170 03F0C703 		and	r3, r3, #199
 9353 0174 C12B     		cmp	r3, #193
 9354 0176 00F0E980 		beq	.L1215
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9355              		.loc 1 2997 5 is_stmt 1 view .LVU2994
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9356              		.loc 1 2997 41 is_stmt 0 view .LVU2995
 9357 017a 6428     		cmp	r0, #100
 9358 017c 00F07181 		beq	.L1216
 9359              	.L1021:
2998:src/display.c **** 		}
 9360              		.loc 1 2998 5 is_stmt 1 view .LVU2996
 9361 0180 0021     		movs	r1, #0
 9362 0182 FFF7FEFF 		bl	format_reg
 9363              	.LVL1041:
3011:src/display.c **** 	      goto finish;
 9364              		.loc 1 3011 6 view .LVU2997
3011:src/display.c **** 	      goto finish;
 9365              		.loc 1 3011 9 is_stmt 0 view .LVU2998
 9366 0186 D8F80030 		ldr	r3, [r8]
 9367 018a 73BB     		cbnz	r3, .L1019
 9368              	.LVL1042:
 9369              	.L1210:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9370              		.loc 1 3041 2 view .LVU2999
 9371 018c FFF7FEFF 		bl	set_annunciators
 9372              	.LVL1043:
ARM GAS  /tmp/ccxUm1xs.s 			page 280


3042:src/display.c **** 	  ShowRPN = 0;
 9373              		.loc 1 3042 2 is_stmt 1 view .LVU3000
 9374              	.L920:
3043:src/display.c **** 	  dot(RPN, 0);
 9375              		.loc 1 3043 4 view .LVU3001
3043:src/display.c **** 	  dot(RPN, 0);
 9376              		.loc 1 3043 12 is_stmt 0 view .LVU3002
 9377 0190 DFF89C81 		ldr	r8, .L1251+36
 9378 0194 0023     		movs	r3, #0
 9379              	.LBB549:
 9380              	.LBB550:
 349:src/display.c **** }
 9381              		.loc 1 349 8 view .LVU3003
 9382 0196 8D20     		movs	r0, #141
 9383              	.LBE550:
 9384              	.LBE549:
3043:src/display.c **** 	  dot(RPN, 0);
 9385              		.loc 1 3043 12 view .LVU3004
 9386 0198 C8F80030 		str	r3, [r8]
3044:src/display.c **** 	}
 9387              		.loc 1 3044 4 is_stmt 1 view .LVU3005
 9388              	.LVL1044:
 9389              	.LBB552:
 9390              	.LBI549:
 347:src/display.c ****   if (on)	set_dot(n);
 9391              		.loc 1 347 6 view .LVU3006
 9392              	.LBB551:
 348:src/display.c ****   else	clr_dot(n);
 9393              		.loc 1 348 3 view .LVU3007
 349:src/display.c **** }
 9394              		.loc 1 349 8 view .LVU3008
 9395 019c FFF7FEFF 		bl	clr_dot
 9396              	.LVL1045:
 9397              	.L1057:
 349:src/display.c **** }
 9398              		.loc 1 349 8 is_stmt 0 view .LVU3009
 9399              	.LBE551:
 9400              	.LBE552:
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9401              		.loc 1 3047 2 is_stmt 1 view .LVU3010
3048:src/display.c **** 
 9402              		.loc 1 3048 4 is_stmt 0 view .LVU3011
 9403 01a0 D8F80030 		ldr	r3, [r8]
 9404 01a4 002B     		cmp	r3, #0
 9405 01a6 40F0F180 		bne	.L1079
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9406              		.loc 1 3047 31 view .LVU3012
 9407 01aa A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9408 01ac 12F04003 		ands	r3, r2, #64
 9409 01b0 08D0     		beq	.L1058
3048:src/display.c **** 
 9410              		.loc 1 3048 8 view .LVU3013
 9411 01b2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3048:src/display.c **** 
 9412              		.loc 1 3048 4 view .LVU3014
 9413 01b4 1B07     		lsls	r3, r3, #28
 9414 01b6 40F11481 		bpl	.L1081
ARM GAS  /tmp/ccxUm1xs.s 			page 281


3048:src/display.c **** 
 9415              		.loc 1 3048 30 discriminator 3 view .LVU3015
 9416 01ba 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9417 01bc 012B     		cmp	r3, #1
 9418 01be 01D0     		beq	.L1058
3048:src/display.c **** 
 9419              		.loc 1 3048 60 discriminator 5 view .LVU3016
 9420 01c0 C2F38003 		ubfx	r3, r2, #2, #1
 9421              	.L1058:
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9422              		.loc 1 3047 19 discriminator 9 view .LVU3017
 9423 01c4 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9424 01c6 63F34512 		bfi	r2, r3, #5, #1
 9425 01ca E275     		strb	r2, [r4, #23]
3051:src/display.c **** 	  annunciators();
 9426              		.loc 1 3051 2 is_stmt 1 discriminator 9 view .LVU3018
3051:src/display.c **** 	  annunciators();
 9427              		.loc 1 3051 5 is_stmt 0 discriminator 9 view .LVU3019
 9428 01cc 002E     		cmp	r6, #0
 9429 01ce 00F0D780 		beq	.L1059
3051:src/display.c **** 	  annunciators();
 9430              		.loc 1 3051 36 discriminator 1 view .LVU3020
 9431 01d2 D3B2     		uxtb	r3, r2
3051:src/display.c **** 	  annunciators();
 9432              		.loc 1 3051 13 discriminator 1 view .LVU3021
 9433 01d4 03F02103 		and	r3, r3, #33
 9434 01d8 202B     		cmp	r3, #32
 9435 01da 00F0D180 		beq	.L1059
 9436              	.L1060:
3052:src/display.c ****  	State2.hms = 0;
 9437              		.loc 1 3052 4 is_stmt 1 view .LVU3022
 9438 01de FFF7FEFF 		bl	annunciators
 9439              	.LVL1046:
 9440              	.L1061:
3053:src/display.c **** #else
 9441              		.loc 1 3053 3 view .LVU3023
3053:src/display.c **** #else
 9442              		.loc 1 3053 14 is_stmt 0 view .LVU3024
 9443 01e2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9444 01e4 6FF30003 		bfc	r3, #0, #1
 9445 01e8 E375     		strb	r3, [r4, #23]
 9446              	.L1019:
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9447              		.loc 1 3060 2 is_stmt 1 view .LVU3025
3061:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9448              		.loc 1 3061 2 view .LVU3026
3062:src/display.c **** 	State2.invalid_disp = 0;
 9449              		.loc 1 3062 2 view .LVU3027
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9450              		.loc 1 3060 17 is_stmt 0 view .LVU3028
 9451 01ea 6369     		ldr	r3, [r4, #20]
3066:src/display.c **** 	State2.disp_small = 0;
 9452              		.loc 1 3066 11 view .LVU3029
 9453 01ec 009A     		ldr	r2, [sp]
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9454              		.loc 1 3060 17 view .LVU3030
 9455 01ee 23F02173 		bic	r3, r3, #42205184
ARM GAS  /tmp/ccxUm1xs.s 			page 282


 9456 01f2 23F48053 		bic	r3, r3, #4096
3062:src/display.c **** 	State2.invalid_disp = 0;
 9457              		.loc 1 3062 15 view .LVU3031
 9458 01f6 0026     		movs	r6, #0
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9459              		.loc 1 3060 17 view .LVU3032
 9460 01f8 6361     		str	r3, [r4, #20]
3064:src/display.c **** 	DispMsg = CNULL;
 9461              		.loc 1 3064 15 view .LVU3033
 9462 01fa 6423     		movs	r3, #100
3062:src/display.c **** 	State2.invalid_disp = 0;
 9463              		.loc 1 3062 15 view .LVU3034
 9464 01fc 6674     		strb	r6, [r4, #17]
3063:src/display.c **** 	ShowRegister = regX_idx;
 9465              		.loc 1 3063 2 is_stmt 1 view .LVU3035
3064:src/display.c **** 	DispMsg = CNULL;
 9466              		.loc 1 3064 2 view .LVU3036
3065:src/display.c **** 	DispPlot = 0;
 9467              		.loc 1 3065 10 is_stmt 0 view .LVU3037
 9468 01fe 3E60     		str	r6, [r7]
3066:src/display.c **** 	State2.disp_small = 0;
 9469              		.loc 1 3066 11 view .LVU3038
 9470 0200 1680     		strh	r6, [r2]	@ movhi
3064:src/display.c **** 	DispMsg = CNULL;
 9471              		.loc 1 3064 15 view .LVU3039
 9472 0202 2B60     		str	r3, [r5]
3065:src/display.c **** 	DispPlot = 0;
 9473              		.loc 1 3065 2 is_stmt 1 view .LVU3040
3066:src/display.c **** 	State2.disp_small = 0;
 9474              		.loc 1 3066 2 view .LVU3041
3067:src/display.c **** 	finish_display();
 9475              		.loc 1 3067 2 view .LVU3042
3068:src/display.c **** 	no_status_top = 0;
 9476              		.loc 1 3068 2 view .LVU3043
 9477 0204 FFF7FEFF 		bl	finish_display
 9478              	.LVL1047:
3069:src/display.c **** #ifdef CONSOLE
 9479              		.loc 1 3069 2 view .LVU3044
3069:src/display.c **** #ifdef CONSOLE
 9480              		.loc 1 3069 16 is_stmt 0 view .LVU3045
 9481 0208 A9F80060 		strh	r6, [r9]	@ movhi
3073:src/display.c **** #else
 9482              		.loc 1 3073 7 view .LVU3046
 9483 020c 29B0     		add	sp, sp, #164
 9484              		.cfi_remember_state
 9485              		.cfi_def_cfa_offset 36
 9486              		@ sp needed
 9487 020e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9488              	.LVL1048:
 9489              	.L1211:
 9490              		.cfi_restore_state
2689:src/display.c **** 	  State2.disp_temp = 1;
 9491              		.loc 1 2689 4 is_stmt 1 view .LVU3047
2690:src/display.c **** #ifdef CONSOLE
 9492              		.loc 1 2690 4 view .LVU3048
2694:src/display.c **** 	  return;
 9493              		.loc 1 2694 12 is_stmt 0 view .LVU3049
ARM GAS  /tmp/ccxUm1xs.s 			page 283


 9494 0212 4749     		ldr	r1, .L1251+36
2689:src/display.c **** 	  State2.disp_temp = 1;
 9495              		.loc 1 2689 23 view .LVU3050
 9496 0214 23F03003 		bic	r3, r3, #48
 9497 0218 43F02003 		orr	r3, r3, #32
 9498 021c E375     		strb	r3, [r4, #23]
2694:src/display.c **** 	  return;
 9499              		.loc 1 2694 4 is_stmt 1 view .LVU3051
2694:src/display.c **** 	  return;
 9500              		.loc 1 2694 12 is_stmt 0 view .LVU3052
 9501 021e 0A60     		str	r2, [r1]
2695:src/display.c **** 	}
 9502              		.loc 1 2695 4 is_stmt 1 view .LVU3053
3073:src/display.c **** #else
 9503              		.loc 1 3073 7 is_stmt 0 view .LVU3054
 9504 0220 29B0     		add	sp, sp, #164
 9505              		.cfi_remember_state
 9506              		.cfi_def_cfa_offset 36
 9507              		@ sp needed
 9508 0222 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9509              	.LVL1049:
 9510              	.L921:
 9511              		.cfi_restore_state
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
 9512              		.loc 1 2753 9 is_stmt 1 view .LVU3055
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
 9513              		.loc 1 2753 12 is_stmt 0 view .LVU3056
 9514 0226 9F06     		lsls	r7, r3, #26
 9515 0228 00F1DD80 		bmi	.L1217
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9516              		.loc 1 2765 9 is_stmt 1 view .LVU3057
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9517              		.loc 1 2765 12 is_stmt 0 view .LVU3058
 9518 022c D907     		lsls	r1, r3, #31
 9519 022e 00F17B81 		bmi	.L1218
2780:src/display.c **** 	  /* Commands with arguments */
 9520              		.loc 1 2780 9 is_stmt 1 view .LVU3059
2780:src/display.c **** 	  /* Commands with arguments */
 9521              		.loc 1 2780 13 is_stmt 0 view .LVU3060
 9522 0232 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2780:src/display.c **** 	  /* Commands with arguments */
 9523              		.loc 1 2780 12 view .LVU3061
 9524 0234 8A06     		lsls	r2, r1, #26
 9525 0236 40F1F680 		bpl	.L933
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9526              		.loc 1 2783 4 is_stmt 1 view .LVU3062
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9527              		.loc 1 2783 8 is_stmt 0 view .LVU3063
 9528 023a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9529              		.loc 1 2783 7 view .LVU3064
 9530 023c 4D2B     		cmp	r3, #77
 9531 023e 00F0A881 		beq	.L934
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9532              		.loc 1 2783 28 discriminator 1 view .LVU3065
 9533 0242 03F16C02 		add	r2, r3, #108
 9534 0246 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccxUm1xs.s 			page 284


 9535 0248 012A     		cmp	r2, #1
 9536 024a 40F2A281 		bls	.L934
2679:src/display.c **** 	const char *p;
 9537              		.loc 1 2679 17 view .LVU3066
 9538 024e 1EA8     		add	r0, sp, #120
 9539              	.LVL1050:
 9540              	.L935:
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9541              		.loc 1 2786 4 is_stmt 1 view .LVU3067
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9542              		.loc 1 2786 35 is_stmt 0 view .LVU3068
 9543 0250 0622     		movs	r2, #6
 9544 0252 3849     		ldr	r1, .L1251+40
 9545 0254 02EB0313 		add	r3, r2, r3, lsl #4
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9546              		.loc 1 2786 9 view .LVU3069
 9547 0258 1944     		add	r1, r1, r3
 9548 025a FFF7FEFF 		bl	scopy
 9549              	.LVL1051:
2787:src/display.c **** 	  if (State2.dot) {
 9550              		.loc 1 2787 4 is_stmt 1 view .LVU3070
2787:src/display.c **** 	  if (State2.dot) {
 9551              		.loc 1 2787 9 is_stmt 0 view .LVU3071
 9552 025e 364B     		ldr	r3, .L1251+44
 9553 0260 94F91510 		ldrsb	r1, [r4, #21]
 9554 0264 354A     		ldr	r2, .L1251+48
 9555 0266 12EA2101 		ands	r1, r2, r1, asr #32
 9556 026a 38BF     		it	cc
 9557 026c 1946     		movcc	r1, r3
 9558 026e FFF7FEFF 		bl	scopy
 9559              	.LVL1052:
2788:src/display.c **** 	    *bp++ = 's';
 9560              		.loc 1 2788 8 view .LVU3072
 9561 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9562              	.LVL1053:
2788:src/display.c **** 	    *bp++ = 's';
 9563              		.loc 1 2788 4 is_stmt 1 view .LVU3073
2788:src/display.c **** 	    *bp++ = 's';
 9564              		.loc 1 2788 7 is_stmt 0 view .LVU3074
 9565 0274 5F06     		lsls	r7, r3, #25
 9566 0276 40F19E81 		bpl	.L937
2789:src/display.c **** 	    *bp++ = '_';
 9567              		.loc 1 2789 6 is_stmt 1 view .LVU3075
 9568              	.LVL1054:
2789:src/display.c **** 	    *bp++ = '_';
 9569              		.loc 1 2789 12 is_stmt 0 view .LVU3076
 9570 027a 7322     		movs	r2, #115
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9571              		.loc 1 2790 12 view .LVU3077
 9572 027c 5F23     		movs	r3, #95
2789:src/display.c **** 	    *bp++ = '_';
 9573              		.loc 1 2789 12 view .LVU3078
 9574 027e 0270     		strb	r2, [r0]
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9575              		.loc 1 2790 6 is_stmt 1 view .LVU3079
 9576              	.LVL1055:
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
ARM GAS  /tmp/ccxUm1xs.s 			page 285


 9577              		.loc 1 2790 12 is_stmt 0 view .LVU3080
 9578 0280 4370     		strb	r3, [r0, #1]
 9579              	.LVL1056:
 9580              	.L961:
2893:src/display.c **** 	    set_status_top(buf);
 9581              		.loc 1 2893 4 is_stmt 1 view .LVU3081
2893:src/display.c **** 	    set_status_top(buf);
 9582              		.loc 1 2893 7 is_stmt 0 view .LVU3082
 9583 0282 BBF1000F 		cmp	fp, #0
 9584 0286 00F0E180 		beq	.L928
 9585              	.L1200:
2894:src/display.c **** 	    no_status_top = 1;
 9586              		.loc 1 2894 6 is_stmt 1 view .LVU3083
 9587              	.LVL1057:
 9588              	.LBB553:
 9589              	.LBI553:
3637:src/display.c **** 	if (no_status_top) return;
 9590              		.loc 1 3637 19 view .LVU3084
 9591              	.LBB554:
3638:src/display.c **** 	if (State2.runmode) {
 9592              		.loc 1 3638 2 view .LVU3085
3638:src/display.c **** 	if (State2.runmode) {
 9593              		.loc 1 3638 5 is_stmt 0 view .LVU3086
 9594 028a B9F90030 		ldrsh	r3, [r9]
 9595 028e 002B     		cmp	r3, #0
 9596 0290 7FF4EFAE 		bne	.L924
 9597              	.LBE554:
 9598              	.LBE553:
 9599              	.LBB555:
 9600              	.LBB556:
 9601 0294 1EA8     		add	r0, sp, #120
 9602              	.LVL1058:
3638:src/display.c **** 	if (State2.runmode) {
 9603              		.loc 1 3638 5 view .LVU3087
 9604 0296 FFF7FEFF 		bl	set_status_top.part.0
 9605              	.LVL1059:
3638:src/display.c **** 	if (State2.runmode) {
 9606              		.loc 1 3638 5 view .LVU3088
 9607 029a EAE6     		b	.L924
 9608              	.LVL1060:
 9609              	.L1013:
3638:src/display.c **** 	if (State2.runmode) {
 9610              		.loc 1 3638 5 view .LVU3089
 9611              	.LBE556:
 9612              	.LBE555:
3008:src/display.c **** 	      x_disp = 1;
 9613              		.loc 1 3008 8 is_stmt 1 view .LVU3090
 9614              	.LBB557:
 9615              	.LBI557:
1328:src/display.c ****       int i;
 9616              		.loc 1 1328 17 view .LVU3091
 9617              	.LBB558:
1329:src/display.c ****       int gotdot = -1;
 9618              		.loc 1 1329 7 view .LVU3092
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9619              		.loc 1 1330 7 view .LVU3093
1332:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 286


 9620              		.loc 1 1332 7 view .LVU3094
1336:src/display.c **** #endif
 9621              		.loc 1 1336 7 view .LVU3095
1339:src/display.c **** 	SET_MANT_SIGN;
 9622              		.loc 1 1339 7 view .LVU3096
1339:src/display.c **** 	SET_MANT_SIGN;
 9623              		.loc 1 1339 10 is_stmt 0 view .LVU3097
 9624 029c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9625 029e 2D2B     		cmp	r3, #45
 9626 02a0 00F0A981 		beq	.L1219
 9627              	.LVL1061:
 9628              	.L1024:
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9629              		.loc 1 1344 7 is_stmt 1 view .LVU3098
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9630              		.loc 1 1344 11 is_stmt 0 view .LVU3099
 9631 02a4 1A4B     		ldr	r3, .L1251+4
 9632 02a6 1B68     		ldr	r3, [r3]
 9633 02a8 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9634              		.loc 1 1344 10 view .LVU3100
 9635 02ac 13F0010B 		ands	fp, r3, #1
 9636 02b0 00F04B81 		beq	.L1025
 9637              	.LVL1062:
1345:src/display.c **** 	  set_dig(i, *p);
 9638              		.loc 1 1345 12 is_stmt 1 view .LVU3101
 9639 02b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1345:src/display.c **** 	  set_dig(i, *p);
 9640              		.loc 1 1345 8 is_stmt 0 view .LVU3102
 9641 02b6 4FF0000A 		mov	r10, #0
 9642              	.LVL1063:
1345:src/display.c **** 	  set_dig(i, *p);
 9643              		.loc 1 1345 2 view .LVU3103
 9644 02ba 41B1     		cbz	r1, .L1027
 9645              	.LVL1064:
 9646              	.L1026:
1346:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9647              		.loc 1 1346 4 is_stmt 1 view .LVU3104
 9648 02bc 5046     		mov	r0, r10
 9649 02be FFF7FEFF 		bl	set_dig
 9650              	.LVL1065:
1347:src/display.c **** 	}
 9651              		.loc 1 1347 4 view .LVU3105
1345:src/display.c **** 	  set_dig(i, *p);
 9652              		.loc 1 1345 12 is_stmt 0 view .LVU3106
 9653 02c2 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9654              	.LVL1066:
1347:src/display.c **** 	}
 9655              		.loc 1 1347 6 view .LVU3107
 9656 02c6 0AF1090A 		add	r10, r10, #9
 9657              	.LVL1067:
1345:src/display.c **** 	  set_dig(i, *p);
 9658              		.loc 1 1345 24 is_stmt 1 view .LVU3108
1345:src/display.c **** 	  set_dig(i, *p);
 9659              		.loc 1 1345 12 view .LVU3109
1345:src/display.c **** 	  set_dig(i, *p);
 9660              		.loc 1 1345 2 is_stmt 0 view .LVU3110
ARM GAS  /tmp/ccxUm1xs.s 			page 287


 9661 02ca 0029     		cmp	r1, #0
 9662 02cc F6D1     		bne	.L1026
 9663              	.LVL1068:
 9664              	.L1027:
1349:src/display.c ****       } else {
 9665              		.loc 1 1349 2 is_stmt 1 view .LVU3111
 9666 02ce FFF7FEFF 		bl	carry_overflow
 9667              	.LVL1069:
1349:src/display.c ****       } else {
 9668              		.loc 1 1349 2 is_stmt 0 view .LVU3112
 9669              	.LBE558:
 9670              	.LBE557:
3011:src/display.c **** 	      goto finish;
 9671              		.loc 1 3011 6 is_stmt 1 view .LVU3113
3011:src/display.c **** 	      goto finish;
 9672              		.loc 1 3011 9 is_stmt 0 view .LVU3114
 9673 02d2 D8F80030 		ldr	r3, [r8]
 9674 02d6 002B     		cmp	r3, #0
 9675 02d8 40F02481 		bne	.L1122
 9676              	.LVL1070:
 9677              	.L1208:
3011:src/display.c **** 	      goto finish;
 9678              		.loc 1 3011 9 view .LVU3115
 9679 02dc 134D     		ldr	r5, .L1251+32
 9680              	.LVL1071:
 9681              	.L1018:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9682              		.loc 1 3041 2 is_stmt 1 view .LVU3116
 9683 02de FFF7FEFF 		bl	set_annunciators
 9684              	.LVL1072:
3042:src/display.c **** 	  ShowRPN = 0;
 9685              		.loc 1 3042 2 view .LVU3117
3042:src/display.c **** 	  ShowRPN = 0;
 9686              		.loc 1 3042 50 is_stmt 0 view .LVU3118
 9687 02e2 3B68     		ldr	r3, [r7]
 9688 02e4 002B     		cmp	r3, #0
 9689 02e6 7FF453AF 		bne	.L920
3042:src/display.c **** 	  ShowRPN = 0;
 9690              		.loc 1 3042 69 discriminator 3 view .LVU3119
 9691 02ea 009B     		ldr	r3, [sp]
 9692 02ec B3F90030 		ldrsh	r3, [r3]
 9693 02f0 002B     		cmp	r3, #0
 9694 02f2 7FF44DAF 		bne	.L920
3042:src/display.c **** 	  ShowRPN = 0;
 9695              		.loc 1 3042 81 discriminator 4 view .LVU3120
 9696 02f6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9697 02f8 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9698 02fa 03F00403 		and	r3, r3, #4
 9699 02fe 1343     		orrs	r3, r3, r2
 9700 0300 7FF446AF 		bne	.L920
 9701 0304 DFF82880 		ldr	r8, .L1251+36
 9702 0308 4AE7     		b	.L1057
 9703              	.L1252:
 9704 030a 00BF     		.align	2
 9705              	.L1251:
 9706 030c 00000000 		.word	StateWhileOn
 9707 0310 00000000 		.word	main_ram
ARM GAS  /tmp/ccxUm1xs.s 			page 288


 9708 0314 00000000 		.word	.LANCHOR21
 9709 0318 00000000 		.word	DispPlot
 9710 031c 00000000 		.word	DispMsg
 9711 0320 00000000 		.word	.LANCHOR25
 9712 0324 00000000 		.word	.LANCHOR19
 9713 0328 00000000 		.word	LastDisplayedNumber
 9714 032c 00000000 		.word	ShowRegister
 9715 0330 00000000 		.word	ShowRPN
 9716 0334 00000000 		.word	argcmds
 9717 0338 04000000 		.word	.LC23
 9718 033c 00000000 		.word	.LC22
 9719 0340 00000000 		.word	.LANCHOR18
 9720 0344 00000000 		.word	WasDataEntry
 9721 0348 00000000 		.word	ProgFree
 9722              	.LVL1073:
 9723              	.L1215:
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9724              		.loc 1 2982 5 is_stmt 1 view .LVU3121
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9725              		.loc 1 2982 10 is_stmt 0 view .LVU3122
 9726 034c 91F8AD37 		ldrb	r3, [r1, #1965]	@ zero_extendqisi2
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9727              		.loc 1 2982 8 view .LVU3123
 9728 0350 DA07     		lsls	r2, r3, #31
 9729 0352 00F12481 		bmi	.L1220
 9730              	.L1016:
2986:src/display.c **** 		    State2.hms = 0;
 9731              		.loc 1 2986 5 is_stmt 1 view .LVU3124
2986:src/display.c **** 		    State2.hms = 0;
 9732              		.loc 1 2986 9 is_stmt 0 view .LVU3125
 9733 0356 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2986:src/display.c **** 		    State2.hms = 0;
 9734              		.loc 1 2986 8 view .LVU3126
 9735 0358 13F00101 		ands	r1, r3, #1
 9736 035c 00F08E80 		beq	.L1017
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9737              		.loc 1 2987 7 is_stmt 1 view .LVU3127
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9738              		.loc 1 2987 18 is_stmt 0 view .LVU3128
 9739 0360 6FF30003 		bfc	r3, #0, #1
2988:src/display.c **** 		    State2.hms = 1;
 9740              		.loc 1 2988 7 view .LVU3129
 9741 0364 0021     		movs	r1, #0
 9742 0366 6E20     		movs	r0, #110
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9743              		.loc 1 2987 18 view .LVU3130
 9744 0368 E375     		strb	r3, [r4, #23]
2988:src/display.c **** 		    State2.hms = 1;
 9745              		.loc 1 2988 7 is_stmt 1 view .LVU3131
 9746 036a FFF7FEFF 		bl	format_reg
 9747              	.LVL1074:
2989:src/display.c **** 		  }
 9748              		.loc 1 2989 7 view .LVU3132
2989:src/display.c **** 		  }
 9749              		.loc 1 2989 18 is_stmt 0 view .LVU3133
 9750 036e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3011:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccxUm1xs.s 			page 289


 9751              		.loc 1 3011 9 view .LVU3134
 9752 0370 D8F80020 		ldr	r2, [r8]
2989:src/display.c **** 		  }
 9753              		.loc 1 2989 18 view .LVU3135
 9754 0374 43F00103 		orr	r3, r3, #1
 9755 0378 E375     		strb	r3, [r4, #23]
 9756              	.LVL1075:
3011:src/display.c **** 	      goto finish;
 9757              		.loc 1 3011 6 is_stmt 1 view .LVU3136
3011:src/display.c **** 	      goto finish;
 9758              		.loc 1 3011 9 is_stmt 0 view .LVU3137
 9759 037a 002A     		cmp	r2, #0
 9760 037c AFD0     		beq	.L1018
 9761 037e 34E7     		b	.L1019
 9762              	.LVL1076:
 9763              	.L1059:
3051:src/display.c **** 	  annunciators();
 9764              		.loc 1 3051 52 discriminator 3 view .LVU3138
 9765 0380 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9766 0382 13F0C00F 		tst	r3, #192
 9767 0386 3FF42CAF 		beq	.L1061
 9768 038a 28E7     		b	.L1060
 9769              	.L1079:
 9770 038c 0023     		movs	r3, #0
 9771 038e 19E7     		b	.L1058
 9772              	.LVL1077:
 9773              	.L1213:
 9774              	.LBB589:
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9775              		.loc 1 2733 4 is_stmt 1 view .LVU3139
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9776              		.loc 1 2733 9 is_stmt 0 view .LVU3140
 9777 0390 BD4B     		ldr	r3, .L1253
 9778 0392 CDF85D60 		str	r6, [sp, #93]	@ unaligned
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9779              		.loc 1 2734 4 is_stmt 1 view .LVU3141
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9780              		.loc 1 2733 9 is_stmt 0 view .LVU3142
 9781 0396 93E80700 		ldm	r3, {r0, r1, r2}
 9782 039a 15AB     		add	r3, sp, #84
 9783 039c 03C3     		stmia	r3!, {r0, r1}
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9784              		.loc 1 2734 4 view .LVU3143
 9785 039e 3146     		mov	r1, r6
 9786 03a0 BA48     		ldr	r0, .L1253+4
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9787              		.loc 1 2733 9 view .LVU3144
 9788 03a2 1A70     		strb	r2, [r3]
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9789              		.loc 1 2734 4 view .LVU3145
 9790 03a4 FFF7FEFF 		bl	set_digits_string
 9791              	.LVL1078:
2735:src/display.c **** #ifndef REALBUILD
 9792              		.loc 1 2735 4 is_stmt 1 view .LVU3146
 9793              	.LBB590:
 9794              	.LBI590:
 415:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccxUm1xs.s 			page 290


 9795              		.loc 1 415 14 view .LVU3147
 9796              	.LBB591:
 416:src/display.c ****   else	set_dig(base, ch);
 9797              		.loc 1 416 3 view .LVU3148
 417:src/display.c ****   return res;
 9798              		.loc 1 417 8 view .LVU3149
 9799 03a8 7221     		movs	r1, #114
 9800 03aa 6C20     		movs	r0, #108
 9801 03ac FFF7FEFF 		bl	set_dig
 9802              	.LVL1079:
 418:src/display.c **** }
 9803              		.loc 1 418 3 view .LVU3150
 418:src/display.c **** }
 9804              		.loc 1 418 3 is_stmt 0 view .LVU3151
 9805              	.LBE591:
 9806              	.LBE590:
2737:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9807              		.loc 1 2737 4 is_stmt 1 view .LVU3152
 9808 03b0 B749     		ldr	r1, .L1253+8
 9809 03b2 B848     		ldr	r0, .L1253+12
 9810 03b4 B84F     		ldr	r7, .L1253+16
 9811 03b6 B94D     		ldr	r5, .L1253+20
 9812 03b8 FFF7FEFF 		bl	scopy
 9813              	.LVL1080:
2738:src/display.c **** #endif
 9814              		.loc 1 2738 4 view .LVU3153
 9815 03bc B849     		ldr	r1, .L1253+24
 9816 03be B948     		ldr	r0, .L1253+28
 9817 03c0 FFF7FEFF 		bl	scopy
 9818              	.LVL1081:
2740:src/display.c **** 	  set_status(vers);
 9819              		.loc 1 2740 4 view .LVU3154
 9820 03c4 B849     		ldr	r1, .L1253+32
 9821 03c6 0422     		movs	r2, #4
 9822 03c8 17A8     		add	r0, sp, #92
 9823 03ca FFF7FEFF 		bl	xcopy
 9824              	.LVL1082:
2741:src/display.c **** 	  skip = 1;
 9825              		.loc 1 2741 4 view .LVU3155
 9826 03ce 15A8     		add	r0, sp, #84
 9827 03d0 FFF7FEFF 		bl	set_status
 9828              	.LVL1083:
2742:src/display.c **** 	  goto nostk;
 9829              		.loc 1 2742 4 view .LVU3156
2743:src/display.c **** 	} else if (State2.confirm) {
 9830              		.loc 1 2743 4 view .LVU3157
2743:src/display.c **** 	} else if (State2.confirm) {
 9831              		.loc 1 2743 4 is_stmt 0 view .LVU3158
 9832              	.LBE589:
2973:src/display.c **** 	if (!skip) {
 9833              		.loc 1 2973 2 is_stmt 1 view .LVU3159
 9834 03d4 B54B     		ldr	r3, .L1253+36
 9835 03d6 0093     		str	r3, [sp]
 9836 03d8 FFF7FEFF 		bl	show_flags
 9837              	.LVL1084:
2974:src/display.c **** 	  if (State2.runmode) {
 9838              		.loc 1 2974 2 view .LVU3160
ARM GAS  /tmp/ccxUm1xs.s 			page 291


3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9839              		.loc 1 3041 2 view .LVU3161
 9840 03dc FFF7FEFF 		bl	set_annunciators
 9841              	.LVL1085:
3042:src/display.c **** 	  ShowRPN = 0;
 9842              		.loc 1 3042 2 view .LVU3162
 9843 03e0 D6E6     		b	.L920
 9844              	.LVL1086:
 9845              	.L1081:
3042:src/display.c **** 	  ShowRPN = 0;
 9846              		.loc 1 3042 2 is_stmt 0 view .LVU3163
 9847 03e2 0123     		movs	r3, #1
 9848 03e4 EEE6     		b	.L1058
 9849              	.LVL1087:
 9850              	.L1217:
2754:src/display.c **** 	  if (! State2.dot)
 9851              		.loc 1 2754 4 is_stmt 1 view .LVU3164
2754:src/display.c **** 	  if (! State2.dot)
 9852              		.loc 1 2754 9 is_stmt 0 view .LVU3165
 9853 03e6 B249     		ldr	r1, .L1253+40
 9854 03e8 1EA8     		add	r0, sp, #120
 9855              	.LVL1088:
2754:src/display.c **** 	  if (! State2.dot)
 9856              		.loc 1 2754 9 view .LVU3166
 9857 03ea FFF7FEFF 		bl	scopy
 9858              	.LVL1089:
2755:src/display.c **** 	    *bp++ = '\235';
 9859              		.loc 1 2755 8 view .LVU3167
 9860 03ee 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9861              	.LVL1090:
2755:src/display.c **** 	    *bp++ = '\235';
 9862              		.loc 1 2755 4 is_stmt 1 view .LVU3168
2755:src/display.c **** 	    *bp++ = '\235';
 9863              		.loc 1 2755 7 is_stmt 0 view .LVU3169
 9864 03f0 5D06     		lsls	r5, r3, #25
 9865 03f2 3FF546AF 		bmi	.L961
2756:src/display.c **** 	  if (yreg_enabled) {
 9866              		.loc 1 2756 6 is_stmt 1 view .LVU3170
 9867              	.LVL1091:
2756:src/display.c **** 	  if (yreg_enabled) {
 9868              		.loc 1 2756 12 is_stmt 0 view .LVU3171
 9869 03f6 9D23     		movs	r3, #157
 9870 03f8 0370     		strb	r3, [r0]
 9871 03fa 42E7     		b	.L961
 9872              	.LVL1092:
 9873              	.L1014:
3006:src/display.c **** 	    } else {
 9874              		.loc 1 3006 3 is_stmt 1 view .LVU3172
 9875 03fc AD48     		ldr	r0, .L1253+44
 9876 03fe 2421     		movs	r1, #36
 9877 0400 FFF7FEFF 		bl	set_digits_string
 9878              	.LVL1093:
3011:src/display.c **** 	      goto finish;
 9879              		.loc 1 3011 6 view .LVU3173
3011:src/display.c **** 	      goto finish;
 9880              		.loc 1 3011 9 is_stmt 0 view .LVU3174
 9881 0404 D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccxUm1xs.s 			page 292


 9882 0408 002B     		cmp	r3, #0
 9883 040a 3FF4BFAE 		beq	.L1210
 9884 040e ECE6     		b	.L1019
 9885              	.LVL1094:
 9886              	.L922:
2751:src/display.c **** 	  }
 9887              		.loc 1 2751 6 is_stmt 1 view .LVU3175
 9888 0410 A64B     		ldr	r3, .L1253+36
 9889 0412 A948     		ldr	r0, .L1253+48
 9890 0414 0093     		str	r3, [sp]
 9891 0416 A04F     		ldr	r7, .L1253+16
 9892 0418 FFF7FEFF 		bl	set_status
 9893              	.LVL1095:
2971:src/display.c ****       nostk:
 9894              		.loc 1 2971 2 view .LVU3176
 9895 041c FFF7FEFF 		bl	show_stack
 9896              	.LVL1096:
2973:src/display.c **** 	if (!skip) {
 9897              		.loc 1 2973 2 view .LVU3177
 9898 0420 FFF7FEFF 		bl	show_flags
 9899              	.LVL1097:
2974:src/display.c **** 	  if (State2.runmode) {
 9900              		.loc 1 2974 2 view .LVU3178
 9901 0424 2FE6     		b	.L925
 9902              	.L933:
2818:src/display.c **** 	  *bp++ = 'x';
 9903              		.loc 1 2818 9 view .LVU3179
2818:src/display.c **** 	  *bp++ = 'x';
 9904              		.loc 1 2818 19 is_stmt 0 view .LVU3180
 9905 0426 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2818:src/display.c **** 	  *bp++ = 'x';
 9906              		.loc 1 2818 12 view .LVU3181
 9907 0428 072A     		cmp	r2, #7
 9908 042a 00F06481 		beq	.L944
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9909              		.loc 1 2819 4 is_stmt 1 view .LVU3182
 9910              	.LVL1098:
2820:src/display.c **** 	  *bp++ = '_';
 9911              		.loc 1 2820 33 is_stmt 0 view .LVU3183
 9912 042e A34B     		ldr	r3, .L1253+52
2820:src/display.c **** 	  *bp++ = '_';
 9913              		.loc 1 2820 10 view .LVU3184
 9914 0430 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9915 0432 8DF87930 		strb	r3, [sp, #121]
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9916              		.loc 1 2819 10 view .LVU3185
 9917 0436 7822     		movs	r2, #120
2821:src/display.c **** 	  *bp++ = '?';
 9918              		.loc 1 2821 10 view .LVU3186
 9919 0438 43F65F73 		movw	r3, #16223
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9920              		.loc 1 2819 10 view .LVU3187
 9921 043c 8DF87820 		strb	r2, [sp, #120]
2820:src/display.c **** 	  *bp++ = '_';
 9922              		.loc 1 2820 4 is_stmt 1 view .LVU3188
 9923              	.LVL1099:
2821:src/display.c **** 	  *bp++ = '?';
ARM GAS  /tmp/ccxUm1xs.s 			page 293


 9924              		.loc 1 2821 4 view .LVU3189
2822:src/display.c **** 	  if (yreg_enabled) {
 9925              		.loc 1 2822 4 view .LVU3190
2821:src/display.c **** 	  *bp++ = '?';
 9926              		.loc 1 2821 10 is_stmt 0 view .LVU3191
 9927 0440 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2823:src/display.c **** 	    set_status_top(buf);
 9928              		.loc 1 2823 4 is_stmt 1 view .LVU3192
2823:src/display.c **** 	    set_status_top(buf);
 9929              		.loc 1 2823 7 is_stmt 0 view .LVU3193
 9930 0444 BBF1000F 		cmp	fp, #0
 9931 0448 7FF41FAF 		bne	.L1200
 9932              	.LVL1100:
 9933              	.L928:
2763:src/display.c **** 	  }
 9934              		.loc 1 2763 6 is_stmt 1 view .LVU3194
 9935 044c 1EA8     		add	r0, sp, #120
 9936 044e FFF7FEFF 		bl	set_status
 9937              	.LVL1101:
2971:src/display.c ****       nostk:
 9938              		.loc 1 2971 2 view .LVU3195
 9939 0452 964B     		ldr	r3, .L1253+36
 9940 0454 0093     		str	r3, [sp]
 9941 0456 904F     		ldr	r7, .L1253+16
 9942 0458 FFF7FEFF 		bl	show_stack
 9943              	.LVL1102:
2973:src/display.c **** 	if (!skip) {
 9944              		.loc 1 2973 2 view .LVU3196
 9945 045c FFF7FEFF 		bl	show_flags
 9946              	.LVL1103:
2974:src/display.c **** 	  if (State2.runmode) {
 9947              		.loc 1 2974 2 view .LVU3197
 9948 0460 11E6     		b	.L925
 9949              	.LVL1104:
 9950              	.L1216:
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9951              		.loc 1 2997 44 is_stmt 0 discriminator 1 view .LVU3198
 9952 0462 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9953              		.loc 1 2997 41 discriminator 1 view .LVU3199
 9954 0464 13F00101 		ands	r1, r3, #1
 9955 0468 7FF48AAE 		bne	.L1021
 9956              	.LVL1105:
2998:src/display.c **** 		}
 9957              		.loc 1 2998 5 is_stmt 1 view .LVU3200
 9958 046c FFF7FEFF 		bl	format_reg
 9959              	.LVL1106:
3011:src/display.c **** 	      goto finish;
 9960              		.loc 1 3011 6 view .LVU3201
3011:src/display.c **** 	      goto finish;
 9961              		.loc 1 3011 9 is_stmt 0 view .LVU3202
 9962 0470 D8F80030 		ldr	r3, [r8]
 9963 0474 002B     		cmp	r3, #0
 9964 0476 3FF432AF 		beq	.L1018
 9965 047a B6E6     		b	.L1019
 9966              	.LVL1107:
 9967              	.L1017:
ARM GAS  /tmp/ccxUm1xs.s 			page 294


2992:src/display.c **** 		  }
 9968              		.loc 1 2992 7 is_stmt 1 view .LVU3203
 9969 047c 6E20     		movs	r0, #110
 9970 047e FFF7FEFF 		bl	format_reg
 9971              	.LVL1108:
3011:src/display.c **** 	      goto finish;
 9972              		.loc 1 3011 6 view .LVU3204
3011:src/display.c **** 	      goto finish;
 9973              		.loc 1 3011 9 is_stmt 0 view .LVU3205
 9974 0482 D8F80030 		ldr	r3, [r8]
 9975 0486 002B     		cmp	r3, #0
 9976 0488 3FF429AF 		beq	.L1018
 9977 048c ADE6     		b	.L1019
 9978              	.LVL1109:
 9979              	.L1214:
 9980              	.LBB592:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9981              		.loc 1 3020 6 discriminator 1 view .LVU3206
 9982 048e 8C49     		ldr	r1, .L1253+56
 9983 0490 0BEB8B03 		add	r3, fp, fp, lsl #2
3021:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9984              		.loc 1 3021 21 discriminator 1 view .LVU3207
 9985 0494 0BF0010B 		and	fp, fp, #1
 9986              	.LVL1110:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9987              		.loc 1 3020 6 discriminator 1 view .LVU3208
 9988 0498 1944     		add	r1, r1, r3
 9989 049a 1EA8     		add	r0, sp, #120
 9990 049c 0BF1030B 		add	fp, fp, #3
 9991 04a0 0193     		str	r3, [sp, #4]
 9992 04a2 FFF7FEFF 		bl	scopy_spc
 9993              	.LVL1111:
 9994 04a6 5A46     		mov	r2, fp
 9995 04a8 4146     		mov	r1, r8
 9996 04aa FFF7FEFF 		bl	num_arg_0
 9997              	.LVL1112:
3022:src/display.c **** #ifndef REALBUILD
 9998              		.loc 1 3022 6 is_stmt 1 discriminator 1 view .LVU3209
 9999 04ae 0921     		movs	r1, #9
 10000 04b0 1EA8     		add	r0, sp, #120
 10001 04b2 FFF7FEFF 		bl	set_digits_string
 10002              	.LVL1113:
3024:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 10003              		.loc 1 3024 6 discriminator 1 view .LVU3210
 10004 04b6 2822     		movs	r2, #40
 10005 04b8 2946     		mov	r1, r5
 10006 04ba 1EA8     		add	r0, sp, #120
 10007 04bc FFF7FEFF 		bl	xset
 10008              	.LVL1114:
3025:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 10009              		.loc 1 3025 6 discriminator 1 view .LVU3211
 10010 04c0 0121     		movs	r1, #1
 10011 04c2 DAF80000 		ldr	r0, [r10]
 10012 04c6 2A46     		mov	r2, r5
 10013 04c8 FFF7FEFF 		bl	set_exp
 10014              	.LVL1115:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
ARM GAS  /tmp/ccxUm1xs.s 			page 295


 10015              		.loc 1 3026 6 discriminator 1 view .LVU3212
 10016 04cc 7D49     		ldr	r1, .L1253+60
 10017 04ce 019B     		ldr	r3, [sp, #4]
 10018 04d0 1944     		add	r1, r1, r3
 10019 04d2 11E6     		b	.L1063
 10020              	.LVL1116:
 10021              	.L1044:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10022              		.loc 1 3026 6 is_stmt 0 discriminator 1 view .LVU3213
 10023              	.LBE592:
 10024              	.LBB593:
 10025              	.LBB579:
1442:src/display.c **** 	    gotdot = i;
 10026              		.loc 1 1442 4 is_stmt 1 view .LVU3214
1442:src/display.c **** 	    gotdot = i;
 10027              		.loc 1 1442 7 is_stmt 0 view .LVU3215
 10028 04d4 BAF1FF3F 		cmp	r10, #-1
 10029 04d8 08BF     		it	eq
 10030 04da DA46     		moveq	r10, fp
 10031              	.LVL1117:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10032              		.loc 1 1444 4 is_stmt 1 view .LVU3216
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10033              		.loc 1 1445 6 view .LVU3217
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10034              		.loc 1 1445 13 is_stmt 0 view .LVU3218
 10035 04dc AAF11B0A 		sub	r10, r10, #27
 10036              	.LVL1118:
1446:src/display.c **** 	      break;
 10037              		.loc 1 1446 6 is_stmt 1 view .LVU3219
1446:src/display.c **** 	      break;
 10038              		.loc 1 1446 9 is_stmt 0 view .LVU3220
 10039 04e0 BAF1000F 		cmp	r10, #0
 10040 04e4 13DD     		ble	.L1029
1446:src/display.c **** 	      break;
 10041              		.loc 1 1446 9 view .LVU3221
 10042 04e6 0296     		str	r6, [sp, #8]
 10043 04e8 5646     		mov	r6, r10
 10044              	.LVL1119:
1446:src/display.c **** 	      break;
 10045              		.loc 1 1446 9 view .LVU3222
 10046 04ea BA46     		mov	r10, r7
 10047              	.LVL1120:
1446:src/display.c **** 	      break;
 10048              		.loc 1 1446 9 view .LVU3223
 10049 04ec 2F46     		mov	r7, r5
 10050 04ee 019D     		ldr	r5, [sp, #4]
 10051              	.LVL1121:
 10052              	.L1048:
1449:src/display.c **** 	      break;
 10053              		.loc 1 1449 6 is_stmt 1 view .LVU3224
1452:src/display.c **** 	  }
 10054              		.loc 1 1452 6 view .LVU3225
 10055              	.LBB559:
 10056              	.LBB560:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10057              		.loc 1 378 3 view .LVU3226
ARM GAS  /tmp/ccxUm1xs.s 			page 296


 10058 04f0 3046     		mov	r0, r6
 10059              	.LBE560:
 10060              	.LBE559:
1449:src/display.c **** 	      break;
 10061              		.loc 1 1449 9 is_stmt 0 view .LVU3227
 10062 04f2 0DB1     		cbz	r5, .L1049
 10063              	.LVL1122:
1449:src/display.c **** 	      break;
 10064              		.loc 1 1449 27 view .LVU3228
 10065 04f4 092E     		cmp	r6, #9
 10066 04f6 07D0     		beq	.L1197
 10067              	.L1049:
1452:src/display.c **** 	  }
 10068              		.loc 1 1452 6 view .LVU3229
 10069 04f8 734B     		ldr	r3, .L1253+64
 10070 04fa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10071              	.LVL1123:
 10072              	.LBB562:
 10073              	.LBI559:
 375:src/display.c ****   if (sep == SEP_NONE)
 10074              		.loc 1 375 14 is_stmt 1 view .LVU3230
 10075              	.LBB561:
 376:src/display.c ****     return res;
 10076              		.loc 1 376 3 view .LVU3231
 376:src/display.c ****     return res;
 10077              		.loc 1 376 6 is_stmt 0 view .LVU3232
 10078 04fc 09B1     		cbz	r1, .L1050
 10079 04fe FFF7FEFF 		bl	set_separator.part.0
 10080              	.LVL1124:
 10081              	.L1050:
 376:src/display.c ****     return res;
 10082              		.loc 1 376 6 view .LVU3233
 10083              	.LBE561:
 10084              	.LBE562:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10085              		.loc 1 1444 4 is_stmt 1 view .LVU3234
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10086              		.loc 1 1445 6 view .LVU3235
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10087              		.loc 1 1445 13 is_stmt 0 view .LVU3236
 10088 0502 1B3E     		subs	r6, r6, #27
 10089              	.LVL1125:
1446:src/display.c **** 	      break;
 10090              		.loc 1 1446 6 is_stmt 1 view .LVU3237
1446:src/display.c **** 	      break;
 10091              		.loc 1 1446 9 is_stmt 0 view .LVU3238
 10092 0504 002E     		cmp	r6, #0
 10093 0506 F3DC     		bgt	.L1048
 10094              	.L1197:
1446:src/display.c **** 	      break;
 10095              		.loc 1 1446 9 view .LVU3239
 10096 0508 029E     		ldr	r6, [sp, #8]
 10097              	.LVL1126:
1446:src/display.c **** 	      break;
 10098              		.loc 1 1446 9 view .LVU3240
 10099 050a 3D46     		mov	r5, r7
 10100 050c 5746     		mov	r7, r10
ARM GAS  /tmp/ccxUm1xs.s 			page 297


 10101              	.LVL1127:
 10102              	.L1029:
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10103              		.loc 1 1456 4 is_stmt 1 view .LVU3241
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10104              		.loc 1 1456 8 is_stmt 0 view .LVU3242
 10105 050e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10106              		.loc 1 1456 7 view .LVU3243
 10107 0510 A2F14401 		sub	r1, r2, #68
 10108 0514 0129     		cmp	r1, #1
 10109 0516 40F21681 		bls	.L1221
 10110              	.L1051:
 10111              	.LVL1128:
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10112              		.loc 1 1456 7 view .LVU3244
 10113              	.LBE579:
 10114              	.LBE593:
3011:src/display.c **** 	      goto finish;
 10115              		.loc 1 3011 6 is_stmt 1 view .LVU3245
3011:src/display.c **** 	      goto finish;
 10116              		.loc 1 3011 9 is_stmt 0 view .LVU3246
 10117 051a D8F80030 		ldr	r3, [r8]
 10118 051e 002B     		cmp	r3, #0
 10119 0520 3FF4DCAE 		beq	.L1208
 10120              	.L1122:
 10121 0524 5D4D     		ldr	r5, .L1253+20
 10122 0526 60E6     		b	.L1019
 10123              	.LVL1129:
 10124              	.L1218:
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10125              		.loc 1 2767 4 is_stmt 1 view .LVU3247
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10126              		.loc 1 2767 9 is_stmt 0 view .LVU3248
 10127 0528 2E22     		movs	r2, #46
 10128 052a 6849     		ldr	r1, .L1253+68
 10129 052c 1EA8     		add	r0, sp, #120
 10130              	.LVL1130:
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10131              		.loc 1 2767 9 view .LVU3249
 10132 052e FFF7FEFF 		bl	scopy_char
 10133              	.LVL1131:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10134              		.loc 1 2768 14 view .LVU3250
 10135 0532 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10136              		.loc 1 2767 9 view .LVU3251
 10137 0534 0346     		mov	r3, r0
 10138              	.LVL1132:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10139              		.loc 1 2768 4 is_stmt 1 view .LVU3252
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10140              		.loc 1 2768 7 is_stmt 0 view .LVU3253
 10141 0536 002A     		cmp	r2, #0
 10142 0538 40F00081 		bne	.L1222
 10143              	.L931:
2771:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccxUm1xs.s 			page 298


 10144              		.loc 1 2771 4 is_stmt 1 view .LVU3254
 10145              	.LVL1133:
2771:src/display.c **** 	  if (yreg_enabled) {
 10146              		.loc 1 2771 10 is_stmt 0 view .LVU3255
 10147 053c 5F22     		movs	r2, #95
 10148 053e 1A70     		strb	r2, [r3]
2772:src/display.c **** 	    set_status_top(buf);
 10149              		.loc 1 2772 4 is_stmt 1 view .LVU3256
2772:src/display.c **** 	    set_status_top(buf);
 10150              		.loc 1 2772 7 is_stmt 0 view .LVU3257
 10151 0540 BBF1000F 		cmp	fp, #0
 10152 0544 7FF4A1AE 		bne	.L1200
2772:src/display.c **** 	    set_status_top(buf);
 10153              		.loc 1 2772 7 view .LVU3258
 10154 0548 80E7     		b	.L928
 10155              	.LVL1134:
 10156              	.L1025:
 10157              	.LBB594:
 10158              	.LBB580:
1351:src/display.c **** 
 10159              		.loc 1 1351 2 is_stmt 1 view .LVU3259
 10160 054a FFF7FEFF 		bl	set_separator_decimal_modes
 10161              	.LVL1135:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10162              		.loc 1 1353 2 view .LVU3260
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10163              		.loc 1 1355 2 view .LVU3261
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10164              		.loc 1 1355 5 is_stmt 0 view .LVU3262
 10165 054e A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10166              	.LBB563:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10167              		.loc 1 1362 15 view .LVU3263
 10168 0550 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 10169              	.LBE563:
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10170              		.loc 1 1355 5 view .LVU3264
 10171 0552 012B     		cmp	r3, #1
 10172 0554 40F20F81 		bls	.L1028
 10173              	.LVL1136:
 10174              	.LBB564:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10175              		.loc 1 1362 14 is_stmt 1 view .LVU3265
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10176              		.loc 1 1362 4 is_stmt 0 view .LVU3266
 10177 0558 0029     		cmp	r1, #0
 10178 055a 00F0A181 		beq	.L1072
1359:src/display.c **** 	  int j;
 10179              		.loc 1 1359 10 view .LVU3267
 10180 055e 5B46     		mov	r3, fp
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10181              		.loc 1 1362 10 view .LVU3268
 10182 0560 5A46     		mov	r2, fp
 10183 0562 AC46     		mov	ip, r5
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10184              		.loc 1 1362 4 view .LVU3269
 10185 0564 0846     		mov	r0, r1
ARM GAS  /tmp/ccxUm1xs.s 			page 299


 10186              	.LBE564:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10187              		.loc 1 1330 11 view .LVU3270
 10188 0566 4FF0FF3E 		mov	lr, #-1
 10189 056a 04E0     		b	.L1031
 10190              	.LVL1137:
 10191              	.L1030:
 10192              	.LBB565:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10193              		.loc 1 1362 28 is_stmt 1 view .LVU3271
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10194              		.loc 1 1362 15 is_stmt 0 view .LVU3272
 10195 056c 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10196              		.loc 1 1362 29 view .LVU3273
 10197 0570 0132     		adds	r2, r2, #1
 10198              	.LVL1138:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10199              		.loc 1 1362 14 is_stmt 1 view .LVU3274
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10200              		.loc 1 1362 4 is_stmt 0 view .LVU3275
 10201 0572 0028     		cmp	r0, #0
 10202 0574 46D0     		beq	.L1223
 10203              	.LVL1139:
 10204              	.L1031:
1363:src/display.c **** 	      gotdot = j;
 10205              		.loc 1 1363 6 is_stmt 1 view .LVU3276
1363:src/display.c **** 	      gotdot = j;
 10206              		.loc 1 1363 9 is_stmt 0 view .LVU3277
 10207 0576 2E28     		cmp	r0, #46
 10208 0578 F8D1     		bne	.L1030
1364:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10209              		.loc 1 1364 8 is_stmt 1 view .LVU3278
 10210              	.LVL1140:
1366:src/display.c **** #  endif
 10211              		.loc 1 1366 8 view .LVU3279
1363:src/display.c **** 	      gotdot = j;
 10212              		.loc 1 1363 22 is_stmt 0 view .LVU3280
 10213 057a BEF1FF3F 		cmp	lr, #-1
 10214 057e F5D1     		bne	.L1030
1366:src/display.c **** #  endif
 10215              		.loc 1 1366 29 view .LVU3281
 10216 0580 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10217 0584 A3F12E03 		sub	r3, #46
 10218 0588 B3FA83F3 		clz	r3, r3
1366:src/display.c **** #  endif
 10219              		.loc 1 1366 19 view .LVU3282
 10220 058c 9646     		mov	lr, r2
1366:src/display.c **** #  endif
 10221              		.loc 1 1366 29 view .LVU3283
 10222 058e 5B09     		lsrs	r3, r3, #5
 10223              	.LVL1141:
1366:src/display.c **** #  endif
 10224              		.loc 1 1366 29 view .LVU3284
 10225 0590 ECE7     		b	.L1030
 10226              	.LVL1142:
 10227              	.L934:
ARM GAS  /tmp/ccxUm1xs.s 			page 300


1366:src/display.c **** #  endif
 10228              		.loc 1 1366 29 view .LVU3285
 10229              	.LBE565:
 10230              	.LBE580:
 10231              	.LBE594:
2784:src/display.c **** #endif
 10232              		.loc 1 2784 6 is_stmt 1 view .LVU3286
2784:src/display.c **** #endif
 10233              		.loc 1 2784 11 is_stmt 0 view .LVU3287
 10234 0592 4F49     		ldr	r1, .L1253+72
 10235 0594 1EA8     		add	r0, sp, #120
 10236              	.LVL1143:
2784:src/display.c **** #endif
 10237              		.loc 1 2784 11 view .LVU3288
 10238 0596 FFF7FEFF 		bl	scopy
 10239              	.LVL1144:
2784:src/display.c **** #endif
 10240              		.loc 1 2784 11 view .LVU3289
 10241 059a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10242 059c 58E6     		b	.L935
 10243              	.LVL1145:
 10244              	.L1220:
2983:src/display.c **** 		    SET_POLAR_READY;
 10245              		.loc 1 2983 7 is_stmt 1 view .LVU3290
 10246 059e 0020     		movs	r0, #0
 10247 05a0 FFF7FEFF 		bl	op_r2p
 10248              	.LVL1146:
2984:src/display.c **** 		  }
 10249              		.loc 1 2984 7 view .LVU3291
 10250 05a4 4B4A     		ldr	r2, .L1253+76
 10251 05a6 1368     		ldr	r3, [r2]
 10252 05a8 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 10253 05ac 6FF30002 		bfc	r2, #0, #1
 10254 05b0 83F8AD27 		strb	r2, [r3, #1965]
 10255 05b4 CFE6     		b	.L1016
 10256              	.LVL1147:
 10257              	.L937:
2791:src/display.c **** 	    *bp++ = '\021';
 10258              		.loc 1 2791 11 view .LVU3292
2791:src/display.c **** 	    *bp++ = '\021';
 10259              		.loc 1 2791 14 is_stmt 0 view .LVU3293
 10260 05b6 012D     		cmp	r5, #1
 10261 05b8 00F0F180 		beq	.L1224
2798:src/display.c **** 	      *bp++ = '.';
 10262              		.loc 1 2798 6 is_stmt 1 view .LVU3294
2798:src/display.c **** 	      *bp++ = '.';
 10263              		.loc 1 2798 10 is_stmt 0 view .LVU3295
 10264 05bc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2798:src/display.c **** 	      *bp++ = '.';
 10265              		.loc 1 2798 9 view .LVU3296
 10266 05be DD07     		lsls	r5, r3, #31
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 10267              		.loc 1 2799 8 is_stmt 1 view .LVU3297
 10268              	.LVL1148:
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 10269              		.loc 1 2799 14 is_stmt 0 view .LVU3298
 10270 05c0 44BF     		itt	mi
ARM GAS  /tmp/ccxUm1xs.s 			page 301


 10271 05c2 2E23     		movmi	r3, #46
 10272 05c4 00F8013B 		strbmi	r3, [r0], #1
 10273              	.LVL1149:
2800:src/display.c **** 	      if (State2.shuffle)
 10274              		.loc 1 2800 6 is_stmt 1 view .LVU3299
2800:src/display.c **** 	      if (State2.shuffle)
 10275              		.loc 1 2800 16 is_stmt 0 view .LVU3300
 10276 05c8 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2800:src/display.c **** 	      if (State2.shuffle)
 10277              		.loc 1 2800 9 view .LVU3301
 10278 05ca 8AB1     		cbz	r2, .L941
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10279              		.loc 1 2801 8 is_stmt 1 view .LVU3302
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10280              		.loc 1 2801 12 is_stmt 0 view .LVU3303
 10281 05cc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10282              		.loc 1 2801 11 view .LVU3304
 10283 05ce 9907     		lsls	r1, r3, #30
 10284 05d0 40F16881 		bpl	.L942
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10285              		.loc 1 2802 3 is_stmt 1 view .LVU3305
 10286              	.LVL1150:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10287              		.loc 1 2802 17 is_stmt 0 view .LVU3306
 10288 05d4 2289     		ldrh	r2, [r4, #8]
 10289              	.LVL1151:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10290              		.loc 1 2802 34 is_stmt 1 view .LVU3307
 10291 05d6 4049     		ldr	r1, .L1253+80
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10292              		.loc 1 2802 10 is_stmt 0 view .LVU3308
 10293 05d8 0023     		movs	r3, #0
 10294              	.LVL1152:
 10295              	.L943:
2803:src/display.c **** 	      else
 10296              		.loc 1 2803 5 is_stmt 1 discriminator 3 view .LVU3309
2803:src/display.c **** 	      else
 10297              		.loc 1 2803 24 is_stmt 0 discriminator 3 view .LVU3310
 10298 05da 02F00305 		and	r5, r2, #3
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10299              		.loc 1 2802 54 discriminator 3 view .LVU3311
 10300 05de 0133     		adds	r3, r3, #1
 10301              	.LVL1153:
2803:src/display.c **** 	      else
 10302              		.loc 1 2803 11 discriminator 3 view .LVU3312
 10303 05e0 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10304 05e2 00F8015B 		strb	r5, [r0], #1
 10305              	.LVL1154:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10306              		.loc 1 2802 53 is_stmt 1 discriminator 3 view .LVU3313
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10307              		.loc 1 2802 42 is_stmt 0 discriminator 3 view .LVU3314
 10308 05e6 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10309              		.loc 1 2802 3 discriminator 3 view .LVU3315
 10310 05e8 9D42     		cmp	r5, r3
ARM GAS  /tmp/ccxUm1xs.s 			page 302


2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10311              		.loc 1 2802 60 discriminator 3 view .LVU3316
 10312 05ea 4FEAA202 		asr	r2, r2, #2
 10313              	.LVL1155:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10314              		.loc 1 2802 34 is_stmt 1 discriminator 3 view .LVU3317
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10315              		.loc 1 2802 3 is_stmt 0 discriminator 3 view .LVU3318
 10316 05ee F4DC     		bgt	.L943
 10317              	.LVL1156:
 10318              	.L941:
2808:src/display.c **** 	  }
 10319              		.loc 1 2808 6 is_stmt 1 view .LVU3319
2808:src/display.c **** 	  }
 10320              		.loc 1 2808 12 is_stmt 0 view .LVU3320
 10321 05f0 5F23     		movs	r3, #95
 10322 05f2 0370     		strb	r3, [r0]
 10323 05f4 45E6     		b	.L961
 10324              	.LVL1157:
 10325              	.L1219:
 10326              	.LBB595:
 10327              	.LBB581:
1340:src/display.c **** 	p++;
 10328              		.loc 1 1340 2 is_stmt 1 view .LVU3321
 10329              	.LBB566:
 10330              	.LBI566:
 304:src/display.c **** {
 10331              		.loc 1 304 13 view .LVU3322
 10332              	.LBB567:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10333              		.loc 1 306 3 view .LVU3323
 306:src/display.c ****   set_dot(MANT_SIGN);
 10334              		.loc 1 306 25 is_stmt 0 view .LVU3324
 10335 05f6 274A     		ldr	r2, .L1253+12
 307:src/display.c **** }
 10336              		.loc 1 307 3 view .LVU3325
 10337 05f8 8120     		movs	r0, #129
 10338              	.LVL1158:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10339              		.loc 1 306 25 view .LVU3326
 10340 05fa 1370     		strb	r3, [r2]
 307:src/display.c **** }
 10341              		.loc 1 307 3 is_stmt 1 view .LVU3327
 10342              	.LBE567:
 10343              	.LBE566:
1341:src/display.c ****       }
 10344              		.loc 1 1341 3 is_stmt 0 view .LVU3328
 10345 05fc 0135     		adds	r5, r5, #1
 10346              	.LVL1159:
 10347              	.LBB569:
 10348              	.LBB568:
 307:src/display.c **** }
 10349              		.loc 1 307 3 view .LVU3329
 10350 05fe FFF7FEFF 		bl	set_dot
 10351              	.LVL1160:
 10352              	.LBE568:
 10353              	.LBE569:
ARM GAS  /tmp/ccxUm1xs.s 			page 303


1341:src/display.c ****       }
 10354              		.loc 1 1341 2 is_stmt 1 view .LVU3330
1341:src/display.c ****       }
 10355              		.loc 1 1341 2 is_stmt 0 view .LVU3331
 10356 0602 4FE6     		b	.L1024
 10357              	.LVL1161:
 10358              	.L1223:
 10359              	.LBB570:
1370:src/display.c **** 	  if (j > 0) {
 10360              		.loc 1 1370 4 is_stmt 1 view .LVU3332
1370:src/display.c **** 	  if (j > 0) {
 10361              		.loc 1 1370 24 is_stmt 0 view .LVU3333
 10362 0604 03F10C0C 		add	ip, r3, #12
1370:src/display.c **** 	  if (j > 0) {
 10363              		.loc 1 1370 6 view .LVU3334
 10364 0608 A2EB0C02 		sub	r2, r2, ip
 10365              	.LVL1162:
1371:src/display.c **** 	    p += j + 1;
 10366              		.loc 1 1371 4 is_stmt 1 view .LVU3335
1371:src/display.c **** 	    p += j + 1;
 10367              		.loc 1 1371 7 is_stmt 0 view .LVU3336
 10368 060c 002A     		cmp	r2, #0
 10369 060e 40F3DC80 		ble	.L1073
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10370              		.loc 1 1372 6 is_stmt 1 view .LVU3337
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10371              		.loc 1 1372 8 is_stmt 0 view .LVU3338
 10372 0612 511C     		adds	r1, r2, #1
1374:src/display.c **** 	      gotdot = 0;
 10373              		.loc 1 1374 9 view .LVU3339
 10374 0614 7245     		cmp	r2, lr
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10375              		.loc 1 1372 8 view .LVU3340
 10376 0616 0D44     		add	r5, r5, r1
 10377              	.LVL1163:
1373:src/display.c **** 	    if (gotdot <= j) {
 10378              		.loc 1 1373 6 is_stmt 1 view .LVU3341
1374:src/display.c **** 	      gotdot = 0;
 10379              		.loc 1 1374 6 view .LVU3342
1374:src/display.c **** 	      gotdot = 0;
 10380              		.loc 1 1374 9 is_stmt 0 view .LVU3343
 10381 0618 C0F2C680 		blt	.L1033
1375:src/display.c **** 	      if (double_dot)
 10382              		.loc 1 1375 8 is_stmt 1 view .LVU3344
 10383              	.LVL1164:
1376:src/display.c **** 		p++;
 10384              		.loc 1 1376 8 view .LVU3345
1376:src/display.c **** 		p++;
 10385              		.loc 1 1376 11 is_stmt 0 view .LVU3346
 10386 061c 002B     		cmp	r3, #0
 10387 061e 00F00682 		beq	.L1074
1377:src/display.c **** 	    }
 10388              		.loc 1 1377 3 is_stmt 1 view .LVU3347
1377:src/display.c **** 	    }
 10389              		.loc 1 1377 4 is_stmt 0 view .LVU3348
 10390 0622 0135     		adds	r5, r5, #1
 10391              	.LVL1165:
ARM GAS  /tmp/ccxUm1xs.s 			page 304


1373:src/display.c **** 	    if (gotdot <= j) {
 10392              		.loc 1 1373 8 view .LVU3349
 10393 0624 4FF0090B 		mov	fp, #9
 10394              	.LVL1166:
 10395              	.L1034:
1386:src/display.c **** 	    overflow_to_left = 1;
 10396              		.loc 1 1386 6 is_stmt 1 view .LVU3350
 10397 0628 3C21     		movs	r1, #60
 10398              	.LVL1167:
1386:src/display.c **** 	    overflow_to_left = 1;
 10399              		.loc 1 1386 6 is_stmt 0 view .LVU3351
 10400 062a 0020     		movs	r0, #0
 10401 062c FFF7FEFF 		bl	set_dig
 10402              	.LVL1168:
1387:src/display.c **** 	  }
 10403              		.loc 1 1387 6 is_stmt 1 view .LVU3352
1387:src/display.c **** 	  }
 10404              		.loc 1 1387 6 is_stmt 0 view .LVU3353
 10405 0630 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10406              		.loc 1 1387 6 view .LVU3354
 10407              	.LBE570:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10408              		.loc 1 1393 9 is_stmt 1 view .LVU3355
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10409              		.loc 1 1393 2 is_stmt 0 view .LVU3356
 10410 0632 4FF0000A 		mov	r10, #0
 10411              	.LVL1169:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10412              		.loc 1 1393 2 view .LVU3357
 10413 0636 0029     		cmp	r1, #0
 10414 0638 3FF46FAF 		beq	.L1051
 10415              	.LVL1170:
 10416              	.L1064:
 10417              	.LBB571:
1387:src/display.c **** 	  }
 10418              		.loc 1 1387 23 view .LVU3358
 10419 063c 0123     		movs	r3, #1
 10420 063e 0193     		str	r3, [sp, #4]
 10421 0640 13E0     		b	.L1043
 10422              	.LVL1171:
 10423              	.L1225:
1387:src/display.c **** 	  }
 10424              		.loc 1 1387 23 view .LVU3359
 10425              	.LBE571:
1399:src/display.c **** 	      gotdot = i;
 10426              		.loc 1 1399 6 is_stmt 1 view .LVU3360
1399:src/display.c **** 	      gotdot = i;
 10427              		.loc 1 1399 9 is_stmt 0 view .LVU3361
 10428 0642 BAF1FF3F 		cmp	r10, #-1
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10429              		.loc 1 1403 9 view .LVU3362
 10430 0646 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1399:src/display.c **** 	      gotdot = i;
 10431              		.loc 1 1399 9 view .LVU3363
 10432 0648 48D0     		beq	.L1037
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
ARM GAS  /tmp/ccxUm1xs.s 			page 305


 10433              		.loc 1 1403 6 is_stmt 1 view .LVU3364
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10434              		.loc 1 1403 9 is_stmt 0 view .LVU3365
 10435 064a 2E2B     		cmp	r3, #46
 10436 064c 51D0     		beq	.L1062
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10437              		.loc 1 1403 25 view .LVU3366
 10438 064e D345     		cmp	fp, r10
 10439 0650 46D0     		beq	.L1040
 10440              	.L1039:
1410:src/display.c **** 		i += segs_per_digit;
 10441              		.loc 1 1410 3 is_stmt 1 view .LVU3367
 10442 0652 5846     		mov	r0, fp
 10443 0654 2F21     		movs	r1, #47
 10444 0656 FFF7FEFF 		bl	set_dig
 10445              	.LVL1172:
1411:src/display.c **** 	      }
 10446              		.loc 1 1411 3 view .LVU3368
1411:src/display.c **** 	      }
 10447              		.loc 1 1411 5 is_stmt 0 view .LVU3369
 10448 065a 0BF1090B 		add	fp, fp, #9
 10449              	.LVL1173:
1411:src/display.c **** 	      }
 10450              		.loc 1 1411 5 view .LVU3370
 10451 065e 2B46     		mov	r3, r5
 10452              	.LVL1174:
 10453              	.L1041:
1397:src/display.c **** 	  if (*p == '.') {
 10454              		.loc 1 1397 11 is_stmt 1 view .LVU3371
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10455              		.loc 1 1393 9 is_stmt 0 view .LVU3372
 10456 0660 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1397:src/display.c **** 	  if (*p == '.') {
 10457              		.loc 1 1397 12 view .LVU3373
 10458 0662 0135     		adds	r5, r5, #1
 10459              	.LVL1175:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10460              		.loc 1 1393 9 is_stmt 1 view .LVU3374
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10461              		.loc 1 1393 2 is_stmt 0 view .LVU3375
 10462 0664 0029     		cmp	r1, #0
 10463 0666 3FF435AF 		beq	.L1044
 10464              	.LVL1176:
 10465              	.L1043:
1395:src/display.c **** #endif
 10466              		.loc 1 1395 9 view .LVU3376
 10467 066a A1F14403 		sub	r3, r1, #68
 10468 066e 012B     		cmp	r3, #1
 10469 0670 7FF630AF 		bls	.L1044
1398:src/display.c **** 	    if (gotdot < 0)
 10470              		.loc 1 1398 4 is_stmt 1 view .LVU3377
1398:src/display.c **** 	    if (gotdot < 0)
 10471              		.loc 1 1398 7 is_stmt 0 view .LVU3378
 10472 0674 2E29     		cmp	r1, #46
 10473 0676 E4D0     		beq	.L1225
1432:src/display.c **** 	      i += segs_per_digit;
 10474              		.loc 1 1432 8 is_stmt 1 view .LVU3379
ARM GAS  /tmp/ccxUm1xs.s 			page 306


 10475 0678 5846     		mov	r0, fp
 10476 067a FFF7FEFF 		bl	set_dig
 10477              	.LVL1177:
1433:src/display.c **** 	    }
 10478              		.loc 1 1433 8 view .LVU3380
1433:src/display.c **** 	    }
 10479              		.loc 1 1433 10 is_stmt 0 view .LVU3381
 10480 067e 0BF1090B 		add	fp, fp, #9
 10481              	.LVL1178:
1433:src/display.c **** 	    }
 10482              		.loc 1 1433 10 view .LVU3382
 10483 0682 2B46     		mov	r3, r5
 10484 0684 ECE7     		b	.L1041
 10485              	.L1254:
 10486 0686 00BF     		.align	2
 10487              	.L1253:
 10488 0688 0C000000 		.word	.LANCHOR17+12
 10489 068c 08000000 		.word	.LC25
 10490 0690 18000000 		.word	.LC26
 10491 0694 00000000 		.word	LastDisplayedNumber
 10492 0698 00000000 		.word	DispMsg
 10493 069c 00000000 		.word	ShowRegister
 10494 06a0 34000000 		.word	.LC27
 10495 06a4 00000000 		.word	LastDisplayedExponent
 10496 06a8 00000000 		.word	.LANCHOR20
 10497 06ac 00000000 		.word	DispPlot
 10498 06b0 38000000 		.word	.LC28
 10499 06b4 AC000000 		.word	.LC44
 10500 06b8 00000000 		.word	.LANCHOR21
 10501 06bc B4000000 		.word	.LC31
 10502 06c0 00000000 		.word	.LANCHOR22
 10503 06c4 00000000 		.word	.LANCHOR24
 10504 06c8 00000000 		.word	.LANCHOR0
 10505 06cc 56040000 		.word	argcmds+1110
 10506 06d0 3C000000 		.word	.LC29
 10507 06d4 00000000 		.word	main_ram
 10508 06d8 BC000000 		.word	.LC30
 10509              	.L1037:
1400:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10510              		.loc 1 1400 8 is_stmt 1 view .LVU3383
 10511              	.LVL1179:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10512              		.loc 1 1403 6 view .LVU3384
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10513              		.loc 1 1403 9 is_stmt 0 view .LVU3385
 10514 06dc 2E2B     		cmp	r3, #46
 10515 06de 07D0     		beq	.L1226
 10516              	.LVL1180:
 10517              	.L1040:
1414:src/display.c **** 		  i += segs_per_digit;
 10518              		.loc 1 1414 3 is_stmt 1 view .LVU3386
1414:src/display.c **** 		  i += segs_per_digit;
 10519              		.loc 1 1414 6 is_stmt 0 view .LVU3387
 10520 06e0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10521 06e2 012B     		cmp	r3, #1
 10522 06e4 51D9     		bls	.L1042
1415:src/display.c **** 		}
ARM GAS  /tmp/ccxUm1xs.s 			page 307


 10523              		.loc 1 1415 5 is_stmt 1 view .LVU3388
 10524              	.LVL1181:
1415:src/display.c **** 		}
 10525              		.loc 1 1415 5 is_stmt 0 view .LVU3389
 10526 06e6 DA46     		mov	r10, fp
 10527 06e8 2B46     		mov	r3, r5
1415:src/display.c **** 		}
 10528              		.loc 1 1415 7 view .LVU3390
 10529 06ea 0BF1090B 		add	fp, fp, #9
 10530              	.LVL1182:
1415:src/display.c **** 		}
 10531              		.loc 1 1415 7 view .LVU3391
 10532 06ee B7E7     		b	.L1041
 10533              	.LVL1183:
 10534              	.L1226:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10535              		.loc 1 1403 9 view .LVU3392
 10536 06f0 DA46     		mov	r10, fp
 10537              	.LVL1184:
 10538              	.L1062:
1404:src/display.c **** 		p++;
 10539              		.loc 1 1404 8 is_stmt 1 view .LVU3393
1405:src/display.c **** 	      }
 10540              		.loc 1 1405 3 view .LVU3394
1405:src/display.c **** 	      }
 10541              		.loc 1 1405 4 is_stmt 0 view .LVU3395
 10542 06f2 0135     		adds	r5, r5, #1
 10543              	.LVL1185:
1405:src/display.c **** 	      }
 10544              		.loc 1 1405 4 view .LVU3396
 10545 06f4 ADE7     		b	.L1039
 10546              	.LVL1186:
 10547              	.L944:
1405:src/display.c **** 	      }
 10548              		.loc 1 1405 4 view .LVU3397
 10549              	.LBE581:
 10550              	.LBE595:
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10551              		.loc 1 2831 9 is_stmt 1 view .LVU3398
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10552              		.loc 1 2831 12 is_stmt 0 view .LVU3399
 10553 06f6 BAF1000F 		cmp	r10, #0
 10554 06fa 6BD1     		bne	.L1227
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10555              		.loc 1 2886 9 is_stmt 1 view .LVU3400
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10556              		.loc 1 2886 12 is_stmt 0 view .LVU3401
 10557 06fc 1F07     		lsls	r7, r3, #28
 10558 06fe 00F1DE80 		bmi	.L1228
2901:src/display.c **** 	  show_status();
 10559              		.loc 1 2901 9 is_stmt 1 view .LVU3402
2901:src/display.c **** 	  show_status();
 10560              		.loc 1 2901 19 is_stmt 0 view .LVU3403
 10561 0702 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2901:src/display.c **** 	  show_status();
 10562              		.loc 1 2901 12 view .LVU3404
 10563 0704 002F     		cmp	r7, #0
ARM GAS  /tmp/ccxUm1xs.s 			page 308


 10564 0706 40F01581 		bne	.L1229
2904:src/display.c **** 	  show_label();
 10565              		.loc 1 2904 9 is_stmt 1 view .LVU3405
2904:src/display.c **** 	  show_label();
 10566              		.loc 1 2904 13 is_stmt 0 view .LVU3406
 10567 070a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2904:src/display.c **** 	  show_label();
 10568              		.loc 1 2904 12 view .LVU3407
 10569 070c 5A07     		lsls	r2, r3, #29
 10570 070e 00F1EC80 		bmi	.L1230
2907:src/display.c **** 	  show_registers();
 10571              		.loc 1 2907 9 is_stmt 1 view .LVU3408
2907:src/display.c **** 	  show_registers();
 10572              		.loc 1 2907 12 is_stmt 0 view .LVU3409
 10573 0712 1F07     		lsls	r7, r3, #28
 10574 0714 00F10A83 		bmi	.L1231
2917:src/display.c **** 	  if (DispMsg) { 
 10575              		.loc 1 2917 9 is_stmt 1 view .LVU3410
2917:src/display.c **** 	  if (DispMsg) { 
 10576              		.loc 1 2917 12 is_stmt 0 view .LVU3411
 10577 0718 4F06     		lsls	r7, r1, #25
 10578 071a 40F1EE82 		bpl	.L995
2918:src/display.c **** 	    set_status(DispMsg);
 10579              		.loc 1 2918 4 is_stmt 1 view .LVU3412
2918:src/display.c **** 	    set_status(DispMsg);
 10580              		.loc 1 2918 8 is_stmt 0 view .LVU3413
 10581 071e C54F     		ldr	r7, .L1255
 10582 0720 3B68     		ldr	r3, [r7]
2918:src/display.c **** 	    set_status(DispMsg);
 10583              		.loc 1 2918 7 view .LVU3414
 10584 0722 002B     		cmp	r3, #0
 10585 0724 00F09E81 		beq	.L996
2919:src/display.c **** 	  } else if (DispPlot) {
 10586              		.loc 1 2919 6 is_stmt 1 view .LVU3415
 10587 0728 1846     		mov	r0, r3
 10588 072a FFF7FEFF 		bl	set_status
 10589              	.LVL1187:
2971:src/display.c ****       nostk:
 10590              		.loc 1 2971 2 view .LVU3416
 10591 072e C24B     		ldr	r3, .L1255+4
 10592 0730 0093     		str	r3, [sp]
 10593 0732 FFF7FEFF 		bl	show_stack
 10594              	.LVL1188:
2973:src/display.c **** 	if (!skip) {
 10595              		.loc 1 2973 2 view .LVU3417
 10596 0736 FFF7FEFF 		bl	show_flags
 10597              	.LVL1189:
2974:src/display.c **** 	  if (State2.runmode) {
 10598              		.loc 1 2974 2 view .LVU3418
 10599 073a A4E4     		b	.L925
 10600              	.LVL1190:
 10601              	.L1222:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10602              		.loc 1 2769 6 view .LVU3419
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10603              		.loc 1 2769 11 is_stmt 0 view .LVU3420
 10604 073c 2189     		ldrh	r1, [r4, #8]
ARM GAS  /tmp/ccxUm1xs.s 			page 309


 10605 073e FFF7FEFF 		bl	num_arg_0
 10606              	.LVL1191:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10607              		.loc 1 2769 11 view .LVU3421
 10608 0742 0346     		mov	r3, r0
 10609              	.LVL1192:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10610              		.loc 1 2769 11 view .LVU3422
 10611 0744 FAE6     		b	.L931
 10612              	.LVL1193:
 10613              	.L1221:
 10614              	.LBB596:
 10615              	.LBB582:
 10616              	.LBB572:
1460:src/display.c **** #  endif
 10617              		.loc 1 1460 6 is_stmt 1 view .LVU3423
1463:src/display.c **** 	      flags |= 2;
 10618              		.loc 1 1463 6 view .LVU3424
1464:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10619              		.loc 1 1464 14 is_stmt 0 view .LVU3425
 10620 0746 442A     		cmp	r2, #68
 10621 0748 14BF     		ite	ne
 10622 074a 4FF00C0A 		movne	r10, #12
 10623 074e 4FF00E0A 		moveq	r10, #14
 10624              	.LVL1194:
1465:src/display.c **** 	      flags |= 16;
 10625              		.loc 1 1465 6 is_stmt 1 view .LVU3426
1465:src/display.c **** 	      flags |= 16;
 10626              		.loc 1 1465 9 is_stmt 0 view .LVU3427
 10627 0752 BBF15A0F 		cmp	fp, #90
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10628              		.loc 1 1466 8 is_stmt 1 view .LVU3428
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10629              		.loc 1 1466 14 is_stmt 0 view .LVU3429
 10630 0756 C8BF     		it	gt
 10631 0758 4AF0100A 		orrgt	r10, r10, #16
 10632              	.LVL1195:
1467:src/display.c **** 	  }
 10633              		.loc 1 1467 6 is_stmt 1 view .LVU3430
 10634 075c 681C     		adds	r0, r5, #1
 10635 075e FFF7FEFF 		bl	s_to_i
 10636              	.LVL1196:
 10637 0762 5146     		mov	r1, r10
 10638 0764 0022     		movs	r2, #0
 10639 0766 FFF7FEFF 		bl	set_exp
 10640              	.LVL1197:
1467:src/display.c **** 	  }
 10641              		.loc 1 1467 6 is_stmt 0 view .LVU3431
 10642              	.LBE572:
 10643              	.LBE582:
 10644              	.LBE596:
3011:src/display.c **** 	      goto finish;
 10645              		.loc 1 3011 6 is_stmt 1 view .LVU3432
3011:src/display.c **** 	      goto finish;
 10646              		.loc 1 3011 9 is_stmt 0 view .LVU3433
 10647 076a D8F80030 		ldr	r3, [r8]
 10648 076e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccxUm1xs.s 			page 310


 10649 0770 3FF4B4AD 		beq	.L1208
 10650 0774 D6E6     		b	.L1122
 10651              	.LVL1198:
 10652              	.L1028:
 10653              	.LBB597:
 10654              	.LBB583:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10655              		.loc 1 1393 9 is_stmt 1 view .LVU3434
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10656              		.loc 1 1393 2 is_stmt 0 view .LVU3435
 10657 0776 0029     		cmp	r1, #0
 10658 0778 00F09280 		beq	.L1072
1336:src/display.c **** #endif
 10659              		.loc 1 1336 11 view .LVU3436
 10660 077c CDF804B0 		str	fp, [sp, #4]
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10661              		.loc 1 1330 11 view .LVU3437
 10662 0780 4FF0FF3A 		mov	r10, #-1
 10663              	.LVL1199:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10664              		.loc 1 1330 11 view .LVU3438
 10665 0784 71E7     		b	.L1043
 10666              	.LVL1200:
 10667              	.L1078:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10668              		.loc 1 1330 11 view .LVU3439
 10669              	.LBE583:
 10670              	.LBE597:
 10671              	.LBB598:
 10672              	.LBB548:
3031:src/display.c **** 	      while(*b) {
 10673              		.loc 1 3031 10 view .LVU3440
 10674 0786 5A1C     		adds	r2, r3, #1
 10675 0788 D1E4     		b	.L1055
 10676              	.LVL1201:
 10677              	.L1042:
3031:src/display.c **** 	      while(*b) {
 10678              		.loc 1 3031 10 view .LVU3441
 10679              	.LBE548:
 10680              	.LBE598:
 10681              	.LBB599:
 10682              	.LBB584:
1418:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10683              		.loc 1 1418 5 is_stmt 1 view .LVU3442
 10684 078a AC4B     		ldr	r3, .L1255+8
 10685 078c 0022     		movs	r2, #0
 10686 078e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10687 0790 ABF10900 		sub	r0, fp, #9
 10688 0794 FFF7FEFF 		bl	set_decimal
 10689              	.LVL1202:
 10690 0798 DA46     		mov	r10, fp
 10691 079a 2B46     		mov	r3, r5
 10692 079c 60E7     		b	.L1041
 10693              	.LVL1203:
 10694              	.L1224:
1418:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10695              		.loc 1 1418 5 is_stmt 0 view .LVU3443
ARM GAS  /tmp/ccxUm1xs.s 			page 311


 10696              	.LBE584:
 10697              	.LBE599:
2792:src/display.c **** 	    *bp++ = '_';
 10698              		.loc 1 2792 6 is_stmt 1 view .LVU3444
2792:src/display.c **** 	    *bp++ = '_';
 10699              		.loc 1 2792 12 is_stmt 0 view .LVU3445
 10700 079e 1122     		movs	r2, #17
2793:src/display.c **** 	  } else {
 10701              		.loc 1 2793 12 view .LVU3446
 10702 07a0 5F23     		movs	r3, #95
2792:src/display.c **** 	    *bp++ = '_';
 10703              		.loc 1 2792 12 view .LVU3447
 10704 07a2 0270     		strb	r2, [r0]
2793:src/display.c **** 	  } else {
 10705              		.loc 1 2793 6 is_stmt 1 view .LVU3448
 10706              	.LVL1204:
2793:src/display.c **** 	  } else {
 10707              		.loc 1 2793 12 is_stmt 0 view .LVU3449
 10708 07a4 4370     		strb	r3, [r0, #1]
 10709 07a6 6CE5     		b	.L961
 10710              	.LVL1205:
 10711              	.L1033:
 10712              	.LBB600:
 10713              	.LBB585:
 10714              	.LBB573:
1379:src/display.c **** 	      gotdot = 0;
 10715              		.loc 1 1379 11 is_stmt 1 view .LVU3450
1379:src/display.c **** 	      gotdot = 0;
 10716              		.loc 1 1379 14 is_stmt 0 view .LVU3451
 10717 07a8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10718              	.LVL1206:
1379:src/display.c **** 	      gotdot = 0;
 10719              		.loc 1 1379 14 view .LVU3452
 10720 07aa 2E2A     		cmp	r2, #46
 10721 07ac 7ED0     		beq	.L1232
 10722              	.LVL1207:
1386:src/display.c **** 	    overflow_to_left = 1;
 10723              		.loc 1 1386 6 is_stmt 1 view .LVU3453
 10724 07ae 3C21     		movs	r1, #60
 10725              	.LVL1208:
1386:src/display.c **** 	    overflow_to_left = 1;
 10726              		.loc 1 1386 6 is_stmt 0 view .LVU3454
 10727 07b0 FFF7FEFF 		bl	set_dig
 10728              	.LVL1209:
1387:src/display.c **** 	  }
 10729              		.loc 1 1387 6 is_stmt 1 view .LVU3455
1387:src/display.c **** 	  }
 10730              		.loc 1 1387 6 is_stmt 0 view .LVU3456
 10731 07b4 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10732              		.loc 1 1387 6 view .LVU3457
 10733              	.LBE573:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10734              		.loc 1 1393 9 is_stmt 1 view .LVU3458
 10735              	.LBB574:
1373:src/display.c **** 	    if (gotdot <= j) {
 10736              		.loc 1 1373 8 is_stmt 0 view .LVU3459
ARM GAS  /tmp/ccxUm1xs.s 			page 312


 10737 07b6 4FF0090B 		mov	fp, #9
 10738              	.LBE574:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10739              		.loc 1 1393 2 view .LVU3460
 10740 07ba 0029     		cmp	r1, #0
 10741 07bc 3FF4A7AE 		beq	.L1029
 10742              	.LBB575:
1385:src/display.c **** 	    set_dig(0, '<');
 10743              		.loc 1 1385 18 view .LVU3461
 10744 07c0 4FF0FF3A 		mov	r10, #-1
 10745              	.LVL1210:
1373:src/display.c **** 	    if (gotdot <= j) {
 10746              		.loc 1 1373 8 view .LVU3462
 10747 07c4 4FF0090B 		mov	fp, #9
 10748 07c8 38E7     		b	.L1064
 10749              	.LVL1211:
 10750              	.L1073:
1373:src/display.c **** 	    if (gotdot <= j) {
 10751              		.loc 1 1373 8 view .LVU3463
 10752              	.LBE575:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10753              		.loc 1 1353 4 view .LVU3464
 10754 07ca 8346     		mov	fp, r0
1336:src/display.c **** #endif
 10755              		.loc 1 1336 11 view .LVU3465
 10756 07cc 0190     		str	r0, [sp, #4]
 10757              	.LBB576:
1389:src/display.c **** 	}
 10758              		.loc 1 1389 16 view .LVU3466
 10759 07ce 4FF0FF3A 		mov	r10, #-1
 10760              	.LVL1212:
1389:src/display.c **** 	}
 10761              		.loc 1 1389 16 view .LVU3467
 10762 07d2 4AE7     		b	.L1043
 10763              	.LVL1213:
 10764              	.L1227:
1389:src/display.c **** 	}
 10765              		.loc 1 1389 16 view .LVU3468
 10766              	.LBE576:
 10767              	.LBE585:
 10768              	.LBE600:
 10769              	.LBB601:
2832:src/display.c **** 	  char b2[16];
 10770              		.loc 1 2832 4 is_stmt 1 view .LVU3469
2832:src/display.c **** 	  char b2[16];
 10771              		.loc 1 2832 45 is_stmt 0 view .LVU3470
 10772 07d4 9A4B     		ldr	r3, .L1255+12
 10773 07d6 1B68     		ldr	r3, [r3]
 10774 07d8 B3F8DC07 		ldrh	r0, [r3, #2012]
2832:src/display.c **** 	  char b2[16];
 10775              		.loc 1 2832 22 view .LVU3471
 10776 07dc C0F34610 		ubfx	r0, r0, #5, #7
 10777 07e0 FFF7FEFF 		bl	current_catalogue
 10778              	.LVL1214:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10779              		.loc 1 2836 9 view .LVU3472
 10780 07e4 9749     		ldr	r1, .L1255+16
ARM GAS  /tmp/ccxUm1xs.s 			page 313


2832:src/display.c **** 	  char b2[16];
 10781              		.loc 1 2832 22 view .LVU3473
 10782 07e6 0546     		mov	r5, r0
 10783              	.LVL1215:
2833:src/display.c **** 	  const char *p;
 10784              		.loc 1 2833 4 is_stmt 1 view .LVU3474
2834:src/display.c **** 
 10785              		.loc 1 2834 4 view .LVU3475
2836:src/display.c **** 	  p = catcmd(op, b2);
 10786              		.loc 1 2836 4 view .LVU3476
2836:src/display.c **** 	  p = catcmd(op, b2);
 10787              		.loc 1 2836 9 is_stmt 0 view .LVU3477
 10788 07e8 1EA8     		add	r0, sp, #120
 10789              	.LVL1216:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10790              		.loc 1 2836 9 view .LVU3478
 10791 07ea FFF7FEFF 		bl	scopy
 10792              	.LVL1217:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10793              		.loc 1 2837 8 view .LVU3479
 10794 07ee 08A9     		add	r1, sp, #32
2836:src/display.c **** 	  p = catcmd(op, b2);
 10795              		.loc 1 2836 9 view .LVU3480
 10796 07f0 0646     		mov	r6, r0
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10797              		.loc 1 2837 8 view .LVU3481
 10798 07f2 2846     		mov	r0, r5
 10799              	.LVL1218:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10800              		.loc 1 2837 4 is_stmt 1 view .LVU3482
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10801              		.loc 1 2837 8 is_stmt 0 view .LVU3483
 10802 07f4 FFF7FEFF 		bl	catcmd
 10803              	.LVL1219:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10804              		.loc 1 2838 7 view .LVU3484
 10805 07f8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10806 07fa 142B     		cmp	r3, #20
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10807              		.loc 1 2837 8 view .LVU3485
 10808 07fc 0146     		mov	r1, r0
 10809              	.LVL1220:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10810              		.loc 1 2838 4 is_stmt 1 view .LVU3486
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10811              		.loc 1 2838 7 is_stmt 0 view .LVU3487
 10812 07fe 07D0     		beq	.L946
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10813              		.loc 1 2838 29 discriminator 1 view .LVU3488
 10814 0800 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10815 0802 9B07     		lsls	r3, r3, #30
 10816 0804 04D5     		bpl	.L946
2839:src/display.c **** 	  bp = scopy(bp, p);
 10817              		.loc 1 2839 6 is_stmt 1 view .LVU3489
2839:src/display.c **** 	  bp = scopy(bp, p);
 10818              		.loc 1 2839 9 is_stmt 0 view .LVU3490
 10819 0806 3346     		mov	r3, r6
ARM GAS  /tmp/ccxUm1xs.s 			page 314


 10820              	.LVL1221:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10821              		.loc 1 2839 12 view .LVU3491
 10822 0808 1422     		movs	r2, #20
 10823 080a 03F8012B 		strb	r2, [r3], #1
 10824              	.LVL1222:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10825              		.loc 1 2839 9 view .LVU3492
 10826 080e 1E46     		mov	r6, r3
 10827              	.LVL1223:
 10828              	.L946:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10829              		.loc 1 2840 4 is_stmt 1 view .LVU3493
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10830              		.loc 1 2840 9 is_stmt 0 view .LVU3494
 10831 0810 3046     		mov	r0, r6
 10832              	.LVL1224:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10833              		.loc 1 2840 9 view .LVU3495
 10834 0812 FFF7FEFF 		bl	scopy
 10835              	.LVL1225:
2841:src/display.c **** 	    // State2.disp_small = 1;
 10836              		.loc 1 2841 4 is_stmt 1 view .LVU3496
2841:src/display.c **** 	    // State2.disp_small = 1;
 10837              		.loc 1 2841 7 is_stmt 0 view .LVU3497
 10838 0816 AAF11003 		sub	r3, r10, #16
 10839 081a 012B     		cmp	r3, #1
 10840 081c 2DD9     		bls	.L1233
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10841              		.loc 1 2848 11 is_stmt 1 view .LVU3498
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10842              		.loc 1 2848 15 is_stmt 0 view .LVU3499
 10843 081e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10844              		.loc 1 2848 14 view .LVU3500
 10845 0820 13F04003 		ands	r3, r3, #64
 10846 0824 08D0     		beq	.L1068
2849:src/display.c **** 	      decNumber x, r;
 10847              		.loc 1 2849 6 is_stmt 1 view .LVU3501
2849:src/display.c **** 	      decNumber x, r;
 10848              		.loc 1 2849 9 is_stmt 0 view .LVU3502
 10849 0826 BAF1120F 		cmp	r10, #18
 10850 082a 00F00383 		beq	.L1234
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10851              		.loc 1 2869 13 is_stmt 1 view .LVU3503
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10852              		.loc 1 2869 46 is_stmt 0 view .LVU3504
 10853 082e A5F58873 		sub	r3, r5, #272
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10854              		.loc 1 2869 16 view .LVU3505
 10855 0832 0D2B     		cmp	r3, #13
 10856 0834 40F2E882 		bls	.L1235
 10857              	.L1068:
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10858              		.loc 1 2869 16 view .LVU3506
 10859              	.LBE601:
2683:src/display.c **** 	int x_disp = 0;
ARM GAS  /tmp/ccxUm1xs.s 			page 315


 10860              		.loc 1 2683 6 view .LVU3507
 10861 0838 0025     		movs	r5, #0
 10862              	.LVL1226:
 10863              	.L950:
 10864              	.LBB611:
2878:src/display.c **** 	    set_status_top(buf);
 10865              		.loc 1 2878 4 is_stmt 1 view .LVU3508
2878:src/display.c **** 	    set_status_top(buf);
 10866              		.loc 1 2878 7 is_stmt 0 view .LVU3509
 10867 083a BBF1000F 		cmp	fp, #0
 10868 083e 17D0     		beq	.L955
2879:src/display.c **** 	    no_status_top = 1;
 10869              		.loc 1 2879 6 is_stmt 1 view .LVU3510
 10870              	.LVL1227:
 10871              	.LBB602:
 10872              	.LBI602:
3637:src/display.c **** 	if (no_status_top) return;
 10873              		.loc 1 3637 19 view .LVU3511
 10874              	.LBB603:
3638:src/display.c **** 	if (State2.runmode) {
 10875              		.loc 1 3638 2 view .LVU3512
3638:src/display.c **** 	if (State2.runmode) {
 10876              		.loc 1 3638 5 is_stmt 0 view .LVU3513
 10877 0840 B9F90030 		ldrsh	r3, [r9]
 10878 0844 13B9     		cbnz	r3, .L956
 10879 0846 1EA8     		add	r0, sp, #120
 10880              	.LVL1228:
3638:src/display.c **** 	if (State2.runmode) {
 10881              		.loc 1 3638 5 view .LVU3514
 10882 0848 FFF7FEFF 		bl	set_status_top.part.0
 10883              	.LVL1229:
 10884              	.L956:
3638:src/display.c **** 	if (State2.runmode) {
 10885              		.loc 1 3638 5 view .LVU3515
 10886              	.LBE603:
 10887              	.LBE602:
2880:src/display.c **** 	    annuc = 1;
 10888              		.loc 1 2880 6 is_stmt 1 view .LVU3516
2880:src/display.c **** 	    annuc = 1;
 10889              		.loc 1 2880 20 is_stmt 0 view .LVU3517
 10890 084c 0123     		movs	r3, #1
2881:src/display.c **** 	  }
 10891              		.loc 1 2881 12 view .LVU3518
 10892 084e 5E46     		mov	r6, fp
2880:src/display.c **** 	    annuc = 1;
 10893              		.loc 1 2880 20 view .LVU3519
 10894 0850 A9F80030 		strh	r3, [r9]	@ movhi
2881:src/display.c **** 	  }
 10895              		.loc 1 2881 6 is_stmt 1 view .LVU3520
 10896              	.LVL1230:
 10897              	.L957:
2881:src/display.c **** 	  }
 10898              		.loc 1 2881 6 is_stmt 0 view .LVU3521
 10899              	.LBE611:
2971:src/display.c ****       nostk:
 10900              		.loc 1 2971 2 is_stmt 1 view .LVU3522
 10901 0854 FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccxUm1xs.s 			page 316


 10902              	.LVL1231:
 10903              	.LDL1:
2973:src/display.c **** 	if (!skip) {
 10904              		.loc 1 2973 2 view .LVU3523
 10905 0858 FFF7FEFF 		bl	show_flags
 10906              	.LVL1232:
2974:src/display.c **** 	  if (State2.runmode) {
 10907              		.loc 1 2974 2 view .LVU3524
2974:src/display.c **** 	  if (State2.runmode) {
 10908              		.loc 1 2974 5 is_stmt 0 view .LVU3525
 10909 085c 002D     		cmp	r5, #0
 10910 085e 00F06082 		beq	.L1206
 10911              	.LVL1233:
 10912              	.L958:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10913              		.loc 1 3041 2 is_stmt 1 view .LVU3526
 10914 0862 FFF7FEFF 		bl	set_annunciators
 10915              	.LVL1234:
3042:src/display.c **** 	  ShowRPN = 0;
 10916              		.loc 1 3042 2 view .LVU3527
 10917 0866 744B     		ldr	r3, .L1255+4
 10918 0868 724F     		ldr	r7, .L1255
 10919 086a 774D     		ldr	r5, .L1255+20
 10920 086c 0093     		str	r3, [sp]
 10921 086e 8FE4     		b	.L920
 10922              	.LVL1235:
 10923              	.L955:
 10924              	.LBB612:
2884:src/display.c **** 	  }
 10925              		.loc 1 2884 6 view .LVU3528
 10926 0870 1EA8     		add	r0, sp, #120
 10927 0872 FFF7FEFF 		bl	set_status
 10928              	.LVL1236:
 10929              	.LBE612:
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10930              		.loc 1 2681 6 is_stmt 0 view .LVU3529
 10931 0876 5E46     		mov	r6, fp
 10932 0878 ECE7     		b	.L957
 10933              	.LVL1237:
 10934              	.L1233:
 10935              	.LBB613:
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10936              		.loc 1 2843 6 is_stmt 1 view .LVU3530
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10937              		.loc 1 2843 9 is_stmt 0 view .LVU3531
 10938 087a B5F5274F 		cmp	r5, #42752
 10939 087e 00F0FD82 		beq	.L948
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10940              		.loc 1 2843 41 discriminator 1 view .LVU3532
 10941 0882 B5F5284F 		cmp	r5, #43008
 10942 0886 00F0F982 		beq	.L948
2846:src/display.c **** 	    skip = 1;
 10943              		.loc 1 2846 8 is_stmt 1 view .LVU3533
2846:src/display.c **** 	    skip = 1;
 10944              		.loc 1 2846 14 is_stmt 0 view .LVU3534
 10945 088a 05F07F00 		and	r0, r5, #127
 10946 088e 0021     		movs	r1, #0
ARM GAS  /tmp/ccxUm1xs.s 			page 317


 10947 0890 FFF7FEFF 		bl	get_const
 10948              	.LVL1238:
2846:src/display.c **** 	    skip = 1;
 10949              		.loc 1 2846 8 view .LVU3535
 10950 0894 0022     		movs	r2, #0
 10951 0896 1146     		mov	r1, r2
 10952 0898 FFF7FEFF 		bl	set_x
 10953              	.LVL1239:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10954              		.loc 1 2847 11 view .LVU3536
 10955 089c 0125     		movs	r5, #1
 10956              	.LVL1240:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10957              		.loc 1 2847 11 view .LVU3537
 10958 089e CCE7     		b	.L950
 10959              	.LVL1241:
 10960              	.L1072:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10961              		.loc 1 2847 11 view .LVU3538
 10962              	.LBE613:
 10963              	.LBB614:
 10964              	.LBB586:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10965              		.loc 1 1353 4 view .LVU3539
 10966 08a0 8B46     		mov	fp, r1
 10967 08a2 34E6     		b	.L1029
 10968              	.LVL1242:
 10969              	.L942:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10970              		.loc 1 1353 4 view .LVU3540
 10971              	.LBE586:
 10972              	.LBE614:
2805:src/display.c **** 	    }
 10973              		.loc 1 2805 3 is_stmt 1 view .LVU3541
2805:src/display.c **** 	    }
 10974              		.loc 1 2805 8 is_stmt 0 view .LVU3542
 10975 08a4 2189     		ldrh	r1, [r4, #8]
 10976 08a6 FFF7FEFF 		bl	num_arg_0
 10977              	.LVL1243:
2805:src/display.c **** 	    }
 10978              		.loc 1 2805 8 view .LVU3543
 10979 08aa A1E6     		b	.L941
 10980              	.LVL1244:
 10981              	.L1232:
 10982              	.LBB615:
 10983              	.LBB587:
 10984              	.LBB577:
1380:src/display.c **** 	      p++;
 10985              		.loc 1 1380 8 is_stmt 1 view .LVU3544
1381:src/display.c **** 	      if (!double_dot)
 10986              		.loc 1 1381 8 view .LVU3545
1383:src/display.c **** 	    }
 10987              		.loc 1 1383 5 is_stmt 0 view .LVU3546
 10988 08ac 002B     		cmp	r3, #0
1381:src/display.c **** 	      if (!double_dot)
 10989              		.loc 1 1381 9 view .LVU3547
 10990 08ae 05F10105 		add	r5, r5, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 318


 10991              	.LVL1245:
1382:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10992              		.loc 1 1382 8 is_stmt 1 view .LVU3548
1383:src/display.c **** 	    }
 10993              		.loc 1 1383 5 is_stmt 0 view .LVU3549
 10994 08b2 14BF     		ite	ne
 10995 08b4 4FF0090B 		movne	fp, #9
 10996 08b8 4FF0120B 		moveq	fp, #18
 10997 08bc B4E6     		b	.L1034
 10998              	.LVL1246:
 10999              	.L1228:
1383:src/display.c **** 	    }
 11000              		.loc 1 1383 5 view .LVU3550
 11001              	.LBE577:
 11002              	.LBE587:
 11003              	.LBE615:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11004              		.loc 1 2887 4 is_stmt 1 view .LVU3551
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11005              		.loc 1 2887 42 is_stmt 0 view .LVU3552
 11006 08be E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 11007 08c0 6249     		ldr	r1, .L1255+24
 11008 08c2 0423     		movs	r3, #4
 11009 08c4 03EB0213 		add	r3, r3, r2, lsl #4
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11010              		.loc 1 2887 9 view .LVU3553
 11011 08c8 1944     		add	r1, r1, r3
 11012 08ca 2722     		movs	r2, #39
 11013 08cc 1EA8     		add	r0, sp, #120
 11014              	.LVL1247:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11015              		.loc 1 2887 9 view .LVU3554
 11016 08ce FFF7FEFF 		bl	scopy_char
 11017              	.LVL1248:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11018              		.loc 1 2888 7 view .LVU3555
 11019 08d2 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11020              	.LVL1249:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11021              		.loc 1 2888 4 is_stmt 1 view .LVU3556
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11022              		.loc 1 2888 7 is_stmt 0 view .LVU3557
 11023 08d4 002B     		cmp	r3, #0
 11024 08d6 3FF4D4AC 		beq	.L961
2889:src/display.c **** 	    if (State2.numdigit > 1)
 11025              		.loc 1 2889 6 is_stmt 1 view .LVU3558
 11026              	.LVL1250:
2889:src/display.c **** 	    if (State2.numdigit > 1)
 11027              		.loc 1 2889 14 is_stmt 0 view .LVU3559
 11028 08da 2389     		ldrh	r3, [r4, #8]
 11029 08dc 0370     		strb	r3, [r0]
2890:src/display.c **** 	      *bp++ = State2.digval2;
 11030              		.loc 1 2890 6 is_stmt 1 view .LVU3560
2890:src/display.c **** 	      *bp++ = State2.digval2;
 11031              		.loc 1 2890 9 is_stmt 0 view .LVU3561
 11032 08de E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11033 08e0 012B     		cmp	r3, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 319


2891:src/display.c **** 	  }
 11034              		.loc 1 2891 8 is_stmt 1 view .LVU3562
 11035              	.LVL1251:
2891:src/display.c **** 	  }
 11036              		.loc 1 2891 22 is_stmt 0 view .LVU3563
 11037 08e2 84BF     		itt	hi
 11038 08e4 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2891:src/display.c **** 	  }
 11039              		.loc 1 2891 14 view .LVU3564
 11040 08e6 4370     		strbhi	r3, [r0, #1]
 11041 08e8 CBE4     		b	.L961
 11042              	.LVL1252:
 11043              	.L1230:
2905:src/display.c **** 	  skip = 1;
 11044              		.loc 1 2905 4 is_stmt 1 view .LVU3565
 11045              	.LBB616:
 11046              	.LBI616:
2548:src/display.c **** 	char buf[16];
 11047              		.loc 1 2548 19 view .LVU3566
 11048              	.LBB617:
2549:src/display.c **** 	unsigned short int pc = State2.digval;
 11049              		.loc 1 2549 2 view .LVU3567
2550:src/display.c **** 	unsigned int op = getprog(pc);
 11050              		.loc 1 2550 2 view .LVU3568
2550:src/display.c **** 	unsigned int op = getprog(pc);
 11051              		.loc 1 2550 21 is_stmt 0 view .LVU3569
 11052 08ea B4F808B0 		ldrh	fp, [r4, #8]
 11053              	.LVL1253:
2551:src/display.c **** 	int n = nLIB(pc);
 11054              		.loc 1 2551 2 is_stmt 1 view .LVU3570
2556:src/display.c **** #ifndef REALBUILD
 11055              		.loc 1 2556 27 is_stmt 0 view .LVU3571
 11056 08ee DFF870A1 		ldr	r10, .L1255+44
 11057              	.LVL1254:
2551:src/display.c **** 	int n = nLIB(pc);
 11058              		.loc 1 2551 20 view .LVU3572
 11059 08f2 5846     		mov	r0, fp
 11060 08f4 FFF7FEFF 		bl	getprog
 11061              	.LVL1255:
 11062 08f8 4FEA9B35 		lsr	r5, fp, #14
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11063              		.loc 1 2555 2 view .LVU3573
 11064 08fc 15A9     		add	r1, sp, #84
2551:src/display.c **** 	int n = nLIB(pc);
 11065              		.loc 1 2551 20 view .LVU3574
 11066 08fe 8046     		mov	r8, r0
 11067              	.LVL1256:
2552:src/display.c **** 	unsigned short int lblpc;
 11068              		.loc 1 2552 2 is_stmt 1 view .LVU3575
2553:src/display.c **** 
 11069              		.loc 1 2553 2 view .LVU3576
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11070              		.loc 1 2555 2 view .LVU3577
2556:src/display.c **** #ifndef REALBUILD
 11071              		.loc 1 2556 27 is_stmt 0 view .LVU3578
 11072 0900 05EB8505 		add	r5, r5, r5, lsl #2
2555:src/display.c **** 	set_digits_string(libname[n], 0);
ARM GAS  /tmp/ccxUm1xs.s 			page 320


 11073              		.loc 1 2555 2 view .LVU3579
 11074 0904 FFF7FEFF 		bl	prt
 11075              	.LVL1257:
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11076              		.loc 1 2555 2 view .LVU3580
 11077 0908 FFF7FEFF 		bl	set_status
 11078              	.LVL1258:
2556:src/display.c **** #ifndef REALBUILD
 11079              		.loc 1 2556 2 is_stmt 1 view .LVU3581
 11080 090c 0AEB0500 		add	r0, r10, r5
 11081 0910 3946     		mov	r1, r7
 11082 0912 FFF7FEFF 		bl	set_digits_string
 11083              	.LVL1259:
2558:src/display.c **** #endif
 11084              		.loc 1 2558 2 view .LVU3582
 11085 0916 4E4B     		ldr	r3, .L1255+28
 11086 0918 4E48     		ldr	r0, .L1255+32
 11087 091a 03EB4501 		add	r1, r3, r5, lsl #1
 11088 091e FFF7FEFF 		bl	scopy
 11089              	.LVL1260:
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11090              		.loc 1 2561 2 view .LVU3583
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11091              		.loc 1 2561 5 is_stmt 0 view .LVU3584
 11092 0922 18F4704F 		tst	r8, #61440
 11093 0926 40F0FF80 		bne	.L1236
 11094              	.LVL1261:
 11095              	.L1209:
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11096              		.loc 1 2561 5 view .LVU3585
 11097              	.LBE617:
 11098              	.LBE616:
2971:src/display.c ****       nostk:
 11099              		.loc 1 2971 2 is_stmt 1 view .LVU3586
 11100 092a FFF7FEFF 		bl	show_stack
 11101              	.LVL1262:
2973:src/display.c **** 	if (!skip) {
 11102              		.loc 1 2973 2 view .LVU3587
 11103 092e FFF7FEFF 		bl	show_flags
 11104              	.LVL1263:
2974:src/display.c **** 	  if (State2.runmode) {
 11105              		.loc 1 2974 2 view .LVU3588
 11106 0932 96E7     		b	.L958
 11107              	.LVL1264:
 11108              	.L1229:
2902:src/display.c **** 	  skip = 1;
 11109              		.loc 1 2902 4 view .LVU3589
 11110              	.LBB620:
 11111              	.LBI620:
2446:src/display.c **** 	int i, n;
 11112              		.loc 1 2446 19 view .LVU3590
 11113              	.LBB621:
2447:src/display.c **** 	int j = SEGS_EXP_BASE;
 11114              		.loc 1 2447 2 view .LVU3591
2448:src/display.c **** 	const int status = State2.status - 3;
 11115              		.loc 1 2448 2 view .LVU3592
2449:src/display.c **** 	char buf[16], *p = buf;
ARM GAS  /tmp/ccxUm1xs.s 			page 321


 11116              		.loc 1 2449 2 view .LVU3593
2453:src/display.c **** 	  set_status("Free:");
 11117              		.loc 1 2453 5 is_stmt 0 view .LVU3594
 11118 0934 012F     		cmp	r7, #1
2449:src/display.c **** 	char buf[16], *p = buf;
 11119              		.loc 1 2449 12 view .LVU3595
 11120 0936 A7F10303 		sub	r3, r7, #3
 11121              	.LVL1265:
2450:src/display.c **** 	unsigned int pc;
 11122              		.loc 1 2450 2 is_stmt 1 view .LVU3596
2451:src/display.c **** 
 11123              		.loc 1 2451 2 view .LVU3597
2453:src/display.c **** 	  set_status("Free:");
 11124              		.loc 1 2453 2 view .LVU3598
2453:src/display.c **** 	  set_status("Free:");
 11125              		.loc 1 2453 5 is_stmt 0 view .LVU3599
 11126 093a 00F0DB80 		beq	.L1237
2461:src/display.c **** 	  /* Top line */
 11127              		.loc 1 2461 7 is_stmt 1 view .LVU3600
2461:src/display.c **** 	  /* Top line */
 11128              		.loc 1 2461 10 is_stmt 0 view .LVU3601
 11129 093e 581C     		adds	r0, r3, #1
 11130 0940 00F0B981 		beq	.L1238
 11131              	.LBB622:
2478:src/display.c **** 	  int end;
 11132              		.loc 1 2478 4 is_stmt 1 view .LVU3602
2479:src/display.c **** 	  int group = 10;
 11133              		.loc 1 2479 4 view .LVU3603
2480:src/display.c **** 	  int start = 0;
 11134              		.loc 1 2480 4 view .LVU3604
 11135              	.LVL1266:
2481:src/display.c **** 		
 11136              		.loc 1 2481 4 view .LVU3605
2483:src/display.c **** 	    base = 10 * status;
 11137              		.loc 1 2483 4 view .LVU3606
2483:src/display.c **** 	    base = 10 * status;
 11138              		.loc 1 2483 7 is_stmt 0 view .LVU3607
 11139 0944 092B     		cmp	r3, #9
 11140 0946 40F39381 		ble	.L1239
2493:src/display.c **** 	    base = regX_idx;
 11141              		.loc 1 2493 9 is_stmt 1 view .LVU3608
2493:src/display.c **** 	    base = regX_idx;
 11142              		.loc 1 2493 12 is_stmt 0 view .LVU3609
 11143 094a 0A2B     		cmp	r3, #10
 11144 094c 00F09A80 		beq	.L1240
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11145              		.loc 1 2501 6 is_stmt 1 view .LVU3610
 11146              	.LVL1267:
2502:src/display.c **** 	    set_status("FL.00-.15");
 11147              		.loc 1 2502 6 view .LVU3611
2503:src/display.c **** 	  }
 11148              		.loc 1 2503 6 view .LVU3612
 11149 0950 4148     		ldr	r0, .L1255+36
 11150 0952 FFF7FEFF 		bl	set_status
 11151              	.LVL1268:
2481:src/display.c **** 		
 11152              		.loc 1 2481 8 is_stmt 0 view .LVU3613
ARM GAS  /tmp/ccxUm1xs.s 			page 322


 11153 0956 4FF0000B 		mov	fp, #0
2480:src/display.c **** 	  int start = 0;
 11154              		.loc 1 2480 8 view .LVU3614
 11155 095a 4FF00A0A 		mov	r10, #10
 11156              	.LVL1269:
2502:src/display.c **** 	    set_status("FL.00-.15");
 11157              		.loc 1 2502 10 view .LVU3615
 11158 095e 4FF07F08 		mov	r8, #127
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11159              		.loc 1 2501 11 view .LVU3616
 11160 0962 7027     		movs	r7, #112
 11161              	.LVL1270:
 11162              	.L970:
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11163              		.loc 1 2505 4 is_stmt 1 view .LVU3617
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11164              		.loc 1 2505 6 is_stmt 0 view .LVU3618
 11165 0964 0BEBCB05 		add	r5, fp, fp, lsl #3
 11166              	.LVL1271:
2506:src/display.c **** 	  j += SEGS_PER_DIGIT;
 11167              		.loc 1 2506 4 is_stmt 1 view .LVU3619
 11168              	.LBB623:
 11169              	.LBI623:
 357:src/display.c ****   if (res) {
 11170              		.loc 1 357 14 view .LVU3620
 11171              	.LBB624:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11172              		.loc 1 358 3 view .LVU3621
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11173              		.loc 1 361 5 view .LVU3622
 11174              	.LBB625:
 11175              	.LBB626:
 365:src/display.c **** #endif
 11176              		.loc 1 365 35 is_stmt 0 view .LVU3623
 11177 0968 0BF10103 		add	r3, fp, #1
 11178              	.LBE626:
 11179              	.LBE625:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11180              		.loc 1 361 5 view .LVU3624
 11181 096c E81D     		adds	r0, r5, #7
 11182              	.LBB629:
 11183              	.LBB627:
 365:src/display.c **** #endif
 11184              		.loc 1 365 35 view .LVU3625
 11185 096e 0093     		str	r3, [sp]
 11186              	.LBE627:
 11187              	.LBE629:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11188              		.loc 1 361 5 view .LVU3626
 11189 0970 FFF7FEFF 		bl	set_dot
 11190              	.LVL1272:
 362:src/display.c ****       set_dot(posn+8);
 11191              		.loc 1 362 5 is_stmt 1 view .LVU3627
 11192              	.LBB630:
 11193              	.LBI625:
 357:src/display.c ****   if (res) {
 11194              		.loc 1 357 14 view .LVU3628
ARM GAS  /tmp/ccxUm1xs.s 			page 323


 11195              	.LBB628:
 365:src/display.c **** #endif
 11196              		.loc 1 365 5 view .LVU3629
 365:src/display.c **** #endif
 11197              		.loc 1 365 38 is_stmt 0 view .LVU3630
 11198 0974 3749     		ldr	r1, .L1255+32
 11199 0976 009B     		ldr	r3, [sp]
 11200 0978 2E22     		movs	r2, #46
 11201 097a 01F81320 		strb	r2, [r1, r3, lsl #1]
 368:src/display.c **** }
 11202              		.loc 1 368 3 is_stmt 1 view .LVU3631
 11203              	.LVL1273:
 368:src/display.c **** }
 11204              		.loc 1 368 3 is_stmt 0 view .LVU3632
 11205              	.LBE628:
 11206              	.LBE630:
 368:src/display.c **** }
 11207              		.loc 1 368 3 is_stmt 1 view .LVU3633
 368:src/display.c **** }
 11208              		.loc 1 368 3 is_stmt 0 view .LVU3634
 11209              	.LBE624:
 11210              	.LBE623:
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11211              		.loc 1 2507 4 is_stmt 1 view .LVU3635
 11212 097e CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11213 0982 CB19     		adds	r3, r1, r7
 11214 0984 0393     		str	r3, [sp, #12]
2508:src/display.c **** 	    int k = i + base - start;
 11215              		.loc 1 2508 30 is_stmt 0 view .LVU3636
 11216 0986 0BEB0A03 		add	r3, fp, r10
 11217 098a 0293     		str	r3, [sp, #8]
 11218 098c A7EB0B03 		sub	r3, r7, fp
 11219 0990 CDE90436 		strd	r3, r6, [sp, #16]
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11220              		.loc 1 2507 6 view .LVU3637
 11221 0994 0935     		adds	r5, r5, #9
 11222              	.LVL1274:
2508:src/display.c **** 	    int k = i + base - start;
 11223              		.loc 1 2508 4 is_stmt 1 view .LVU3638
2508:src/display.c **** 	    int k = i + base - start;
 11224              		.loc 1 2508 20 view .LVU3639
 11225              	.LBB631:
 11226              	.LBB632:
 11227              	.LBB633:
 11228              	.LBB634:
 11229              	.LBB635:
 365:src/display.c **** #endif
 11230              		.loc 1 365 38 is_stmt 0 view .LVU3640
 11231 0996 0192     		str	r2, [sp, #4]
 11232 0998 BA44     		add	r10, r10, r7
 11233              	.LVL1275:
 365:src/display.c **** #endif
 11234              		.loc 1 365 38 view .LVU3641
 11235 099a 1CE0     		b	.L974
 11236              	.LVL1276:
 11237              	.L972:
 365:src/display.c **** #endif
ARM GAS  /tmp/ccxUm1xs.s 			page 324


 11238              		.loc 1 365 38 view .LVU3642
 11239              	.LBE635:
 11240              	.LBE634:
 11241              	.LBE633:
 11242              	.LBE632:
2518:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11243              		.loc 1 2518 6 is_stmt 1 view .LVU3643
 11244 099c 3146     		mov	r1, r6
 11245 099e 2846     		mov	r0, r5
 11246 09a0 FFF7FEFF 		bl	set_dig
 11247              	.LVL1277:
2519:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11248              		.loc 1 2519 6 view .LVU3644
 11249              	.LBB642:
 11250              	.LBI632:
 357:src/display.c ****   if (res) {
 11251              		.loc 1 357 14 view .LVU3645
 11252              	.LBB640:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11253              		.loc 1 358 3 view .LVU3646
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11254              		.loc 1 361 5 view .LVU3647
 11255 09a4 E81D     		adds	r0, r5, #7
 11256 09a6 FFF7FEFF 		bl	set_dot
 11257              	.LVL1278:
 362:src/display.c ****       set_dot(posn+8);
 11258              		.loc 1 362 5 view .LVU3648
 11259              	.LBB638:
 11260              	.LBI634:
 357:src/display.c ****   if (res) {
 11261              		.loc 1 357 14 view .LVU3649
 11262              	.LBB636:
 365:src/display.c **** #endif
 11263              		.loc 1 365 5 view .LVU3650
 365:src/display.c **** #endif
 11264              		.loc 1 365 30 is_stmt 0 view .LVU3651
 11265 09aa 2C4B     		ldr	r3, .L1255+40
 365:src/display.c **** #endif
 11266              		.loc 1 365 38 view .LVU3652
 11267 09ac 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11268              		.loc 1 365 30 view .LVU3653
 11269 09ae A3FB0523 		umull	r2, r3, r3, r5
 11270 09b2 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11271              		.loc 1 365 38 view .LVU3654
 11272 09b4 274A     		ldr	r2, .L1255+32
 365:src/display.c **** #endif
 11273              		.loc 1 365 35 view .LVU3655
 11274 09b6 0133     		adds	r3, r3, #1
 11275              	.LBE636:
 11276              	.LBE638:
 11277              	.LBE640:
 11278              	.LBE642:
2521:src/display.c **** 	      set_dig(j, 8);
 11279              		.loc 1 2521 9 view .LVU3656
 11280 09b8 BBF1040F 		cmp	fp, #4
ARM GAS  /tmp/ccxUm1xs.s 			page 325


 11281              	.LBB643:
 11282              	.LBB641:
 11283              	.LBB639:
 11284              	.LBB637:
 365:src/display.c **** #endif
 11285              		.loc 1 365 38 view .LVU3657
 11286 09bc 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11287              		.loc 1 368 3 is_stmt 1 view .LVU3658
 11288              	.LVL1279:
 368:src/display.c **** }
 11289              		.loc 1 368 3 is_stmt 0 view .LVU3659
 11290              	.LBE637:
 11291              	.LBE639:
 368:src/display.c **** }
 11292              		.loc 1 368 3 is_stmt 1 view .LVU3660
 368:src/display.c **** }
 11293              		.loc 1 368 3 is_stmt 0 view .LVU3661
 11294              	.LBE641:
 11295              	.LBE643:
2520:src/display.c **** 	    if (i == 4) {
 11296              		.loc 1 2520 6 is_stmt 1 view .LVU3662
2521:src/display.c **** 	      set_dig(j, 8);
 11297              		.loc 1 2521 6 view .LVU3663
2521:src/display.c **** 	      set_dig(j, 8);
 11298              		.loc 1 2521 9 is_stmt 0 view .LVU3664
 11299 09c0 22D0     		beq	.L1241
2520:src/display.c **** 	    if (i == 4) {
 11300              		.loc 1 2520 8 view .LVU3665
 11301 09c2 3D46     		mov	r5, r7
 11302              	.LVL1280:
 11303              	.L973:
2520:src/display.c **** 	    if (i == 4) {
 11304              		.loc 1 2520 8 view .LVU3666
 11305              	.LBE631:
2508:src/display.c **** 	    int k = i + base - start;
 11306              		.loc 1 2508 39 is_stmt 1 view .LVU3667
2508:src/display.c **** 	    int k = i + base - start;
 11307              		.loc 1 2508 40 is_stmt 0 view .LVU3668
 11308 09c4 009B     		ldr	r3, [sp]
2508:src/display.c **** 	    int k = i + base - start;
 11309              		.loc 1 2508 4 view .LVU3669
 11310 09c6 0299     		ldr	r1, [sp, #8]
 11311 09c8 8B42     		cmp	r3, r1
 11312 09ca 0AF1010A 		add	r10, r10, #1
2508:src/display.c **** 	    int k = i + base - start;
 11313              		.loc 1 2508 40 view .LVU3670
 11314 09ce 9B46     		mov	fp, r3
 11315              	.LVL1281:
2508:src/display.c **** 	    int k = i + base - start;
 11316              		.loc 1 2508 20 is_stmt 1 view .LVU3671
2508:src/display.c **** 	    int k = i + base - start;
 11317              		.loc 1 2508 4 is_stmt 0 view .LVU3672
 11318 09d0 63D0     		beq	.L1194
2508:src/display.c **** 	    int k = i + base - start;
 11319              		.loc 1 2508 4 view .LVU3673
 11320 09d2 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 326


 11321              	.LVL1282:
2508:src/display.c **** 	    int k = i + base - start;
 11322              		.loc 1 2508 4 view .LVU3674
 11323 09d4 0093     		str	r3, [sp]
 11324              	.LVL1283:
 11325              	.L974:
 11326              	.LBB652:
2509:src/display.c **** 	    int l = get_user_flag(k);
 11327              		.loc 1 2509 6 is_stmt 1 view .LVU3675
2510:src/display.c **** 	    k += group;
 11328              		.loc 1 2510 6 view .LVU3676
2510:src/display.c **** 	    k += group;
 11329              		.loc 1 2510 14 is_stmt 0 view .LVU3677
 11330 09d6 049B     		ldr	r3, [sp, #16]
 11331 09d8 03EB0B00 		add	r0, r3, fp
 11332 09dc FFF7FEFF 		bl	get_user_flag
 11333              	.LVL1284:
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11334              		.loc 1 2512 9 view .LVU3678
 11335 09e0 C245     		cmp	r10, r8
2510:src/display.c **** 	    k += group;
 11336              		.loc 1 2510 14 view .LVU3679
 11337 09e2 0646     		mov	r6, r0
 11338              	.LVL1285:
2511:src/display.c **** 	    if (end >= k) {
 11339              		.loc 1 2511 6 is_stmt 1 view .LVU3680
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11340              		.loc 1 2512 6 view .LVU3681
2520:src/display.c **** 	    if (i == 4) {
 11341              		.loc 1 2520 8 is_stmt 0 view .LVU3682
 11342 09e4 05F10907 		add	r7, r5, #9
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11343              		.loc 1 2512 9 view .LVU3683
 11344 09e8 D8DC     		bgt	.L972
2513:src/display.c **** 	      k += group;
 11345              		.loc 1 2513 8 is_stmt 1 view .LVU3684
2513:src/display.c **** 	      k += group;
 11346              		.loc 1 2513 14 is_stmt 0 view .LVU3685
 11347 09ea 5046     		mov	r0, r10
 11348              	.LVL1286:
2513:src/display.c **** 	      k += group;
 11349              		.loc 1 2513 14 view .LVU3686
 11350 09ec FFF7FEFF 		bl	get_user_flag
 11351              	.LVL1287:
 11352 09f0 039B     		ldr	r3, [sp, #12]
 11353 09f2 5B44     		add	r3, r3, fp
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11354              		.loc 1 2515 11 view .LVU3687
 11355 09f4 9845     		cmp	r8, r3
2513:src/display.c **** 	      k += group;
 11356              		.loc 1 2513 10 view .LVU3688
 11357 09f6 46EA4006 		orr	r6, r6, r0, lsl #1
 11358              	.LVL1288:
2514:src/display.c **** 	      if (end >= k)
 11359              		.loc 1 2514 8 is_stmt 1 view .LVU3689
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11360              		.loc 1 2515 8 view .LVU3690
ARM GAS  /tmp/ccxUm1xs.s 			page 327


2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11361              		.loc 1 2515 11 is_stmt 0 view .LVU3691
 11362 09fa CFDB     		blt	.L972
2516:src/display.c **** 	    }
 11363              		.loc 1 2516 3 is_stmt 1 view .LVU3692
2516:src/display.c **** 	    }
 11364              		.loc 1 2516 9 is_stmt 0 view .LVU3693
 11365 09fc 1846     		mov	r0, r3
 11366 09fe FFF7FEFF 		bl	get_user_flag
 11367              	.LVL1289:
2516:src/display.c **** 	    }
 11368              		.loc 1 2516 5 view .LVU3694
 11369 0a02 46EA8006 		orr	r6, r6, r0, lsl #2
 11370              	.LVL1290:
2516:src/display.c **** 	    }
 11371              		.loc 1 2516 5 view .LVU3695
 11372 0a06 C9E7     		b	.L972
 11373              	.LVL1291:
 11374              	.L1241:
2522:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11375              		.loc 1 2522 8 is_stmt 1 view .LVU3696
 11376 0a08 0821     		movs	r1, #8
 11377 0a0a 3846     		mov	r0, r7
 11378 0a0c FFF7FEFF 		bl	set_dig
 11379              	.LVL1292:
2523:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11380              		.loc 1 2523 8 view .LVU3697
 11381              	.LBB644:
 11382              	.LBI644:
 357:src/display.c ****   if (res) {
 11383              		.loc 1 357 14 view .LVU3698
 11384              	.LBB645:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11385              		.loc 1 358 3 view .LVU3699
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11386              		.loc 1 361 5 view .LVU3700
 11387 0a10 05F11000 		add	r0, r5, #16
 11388 0a14 FFF7FEFF 		bl	set_dot
 11389              	.LVL1293:
 362:src/display.c ****       set_dot(posn+8);
 11390              		.loc 1 362 5 view .LVU3701
 11391              	.LBB646:
 11392              	.LBI646:
 357:src/display.c ****   if (res) {
 11393              		.loc 1 357 14 view .LVU3702
 11394              	.LBB647:
 365:src/display.c **** #endif
 11395              		.loc 1 365 5 view .LVU3703
 365:src/display.c **** #endif
 11396              		.loc 1 365 30 is_stmt 0 view .LVU3704
 11397 0a18 104B     		ldr	r3, .L1255+40
 365:src/display.c **** #endif
 11398              		.loc 1 365 38 view .LVU3705
 11399 0a1a 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11400              		.loc 1 365 30 view .LVU3706
 11401 0a1c A3FB0723 		umull	r2, r3, r3, r7
ARM GAS  /tmp/ccxUm1xs.s 			page 328


 11402 0a20 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11403              		.loc 1 365 38 view .LVU3707
 11404 0a22 0C4A     		ldr	r2, .L1255+32
 365:src/display.c **** #endif
 11405              		.loc 1 365 35 view .LVU3708
 11406 0a24 0133     		adds	r3, r3, #1
 11407              	.LBE647:
 11408              	.LBE646:
 11409              	.LBE645:
 11410              	.LBE644:
2524:src/display.c **** 	    }
 11411              		.loc 1 2524 10 view .LVU3709
 11412 0a26 1235     		adds	r5, r5, #18
 11413              	.LBB651:
 11414              	.LBB650:
 11415              	.LBB649:
 11416              	.LBB648:
 365:src/display.c **** #endif
 11417              		.loc 1 365 38 view .LVU3710
 11418 0a28 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11419              		.loc 1 368 3 is_stmt 1 view .LVU3711
 11420              	.LVL1294:
 368:src/display.c **** }
 11421              		.loc 1 368 3 is_stmt 0 view .LVU3712
 11422              	.LBE648:
 11423              	.LBE649:
 368:src/display.c **** }
 11424              		.loc 1 368 3 is_stmt 1 view .LVU3713
 368:src/display.c **** }
 11425              		.loc 1 368 3 is_stmt 0 view .LVU3714
 11426              	.LBE650:
 11427              	.LBE651:
2524:src/display.c **** 	    }
 11428              		.loc 1 2524 8 is_stmt 1 view .LVU3715
2524:src/display.c **** 	    }
 11429              		.loc 1 2524 8 is_stmt 0 view .LVU3716
 11430 0a2c CAE7     		b	.L973
 11431              	.LVL1295:
 11432              	.L1074:
2524:src/display.c **** 	    }
 11433              		.loc 1 2524 8 view .LVU3717
 11434              	.LBE652:
 11435              	.LBE622:
 11436              	.LBE621:
 11437              	.LBE620:
 11438              	.LBB658:
 11439              	.LBB588:
 11440              	.LBB578:
1373:src/display.c **** 	    if (gotdot <= j) {
 11441              		.loc 1 1373 8 view .LVU3718
 11442 0a2e 4FF0090B 		mov	fp, #9
 11443 0a32 F9E5     		b	.L1034
 11444              	.L1256:
 11445              		.align	2
 11446              	.L1255:
ARM GAS  /tmp/ccxUm1xs.s 			page 329


 11447 0a34 00000000 		.word	DispMsg
 11448 0a38 00000000 		.word	DispPlot
 11449 0a3c 00000000 		.word	.LANCHOR1
 11450 0a40 00000000 		.word	main_ram
 11451 0a44 3C000000 		.word	.LC29
 11452 0a48 00000000 		.word	ShowRegister
 11453 0a4c 00000000 		.word	multicmds
 11454 0a50 00000000 		.word	.LANCHOR23
 11455 0a54 00000000 		.word	LastDisplayedNumber
 11456 0a58 8C000000 		.word	.LC40
 11457 0a5c 398EE338 		.word	954437177
 11458 0a60 00000000 		.word	.LANCHOR22
 11459              	.LVL1296:
 11460              	.L996:
1373:src/display.c **** 	    if (gotdot <= j) {
 11461              		.loc 1 1373 8 view .LVU3719
 11462              	.LBE578:
 11463              	.LBE588:
 11464              	.LBE658:
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11465              		.loc 1 2920 11 is_stmt 1 view .LVU3720
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11466              		.loc 1 2920 15 is_stmt 0 view .LVU3721
 11467 0a64 C14A     		ldr	r2, .L1257
 11468 0a66 0092     		str	r2, [sp]
 11469 0a68 B2F90020 		ldrsh	r2, [r2]
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11470              		.loc 1 2920 14 view .LVU3722
 11471 0a6c 002A     		cmp	r2, #0
 11472 0a6e 40F0C480 		bne	.L1242
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11473              		.loc 1 2922 11 is_stmt 1 view .LVU3723
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11474              		.loc 1 2922 14 is_stmt 0 view .LVU3724
 11475 0a72 0807     		lsls	r0, r1, #28
 11476 0a74 6FD4     		bmi	.L1243
 11477              	.LVL1297:
2971:src/display.c ****       nostk:
 11478              		.loc 1 2971 2 is_stmt 1 view .LVU3725
 11479 0a76 FFF7FEFF 		bl	show_stack
 11480              	.LVL1298:
2973:src/display.c **** 	if (!skip) {
 11481              		.loc 1 2973 2 view .LVU3726
2954:src/display.c **** 	  }
 11482              		.loc 1 2954 12 is_stmt 0 view .LVU3727
 11483 0a7a 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 11484              		.loc 1 2973 2 view .LVU3728
 11485 0a7c FFF7FEFF 		bl	show_flags
 11486              	.LVL1299:
2974:src/display.c **** 	  if (State2.runmode) {
 11487              		.loc 1 2974 2 is_stmt 1 view .LVU3729
 11488 0a80 FFF701BB 		b	.L925
 11489              	.LVL1300:
 11490              	.L1240:
 11491              	.LBB659:
 11492              	.LBB655:
ARM GAS  /tmp/ccxUm1xs.s 			page 330


 11493              	.LBB653:
2494:src/display.c **** 	    end = regK_idx;
 11494              		.loc 1 2494 6 view .LVU3730
2495:src/display.c **** 	    start = 3;
 11495              		.loc 1 2495 6 view .LVU3731
2496:src/display.c **** 	    group = 4;
 11496              		.loc 1 2496 6 view .LVU3732
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11497              		.loc 1 2497 6 view .LVU3733
2498:src/display.c **** 	  }
 11498              		.loc 1 2498 6 view .LVU3734
 11499 0a84 BA48     		ldr	r0, .L1257+4
 11500 0a86 FFF7FEFF 		bl	set_status
 11501              	.LVL1301:
2496:src/display.c **** 	    group = 4;
 11502              		.loc 1 2496 12 is_stmt 0 view .LVU3735
 11503 0a8a 4FF0030B 		mov	fp, #3
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11504              		.loc 1 2497 12 view .LVU3736
 11505 0a8e 4FF0040A 		mov	r10, #4
 11506              	.LVL1302:
2495:src/display.c **** 	    start = 3;
 11507              		.loc 1 2495 10 view .LVU3737
 11508 0a92 4FF06F08 		mov	r8, #111
2494:src/display.c **** 	    end = regK_idx;
 11509              		.loc 1 2494 11 view .LVU3738
 11510 0a96 6427     		movs	r7, #100
 11511              	.LVL1303:
2494:src/display.c **** 	    end = regK_idx;
 11512              		.loc 1 2494 11 view .LVU3739
 11513 0a98 64E7     		b	.L970
 11514              	.LVL1304:
 11515              	.L1194:
2494:src/display.c **** 	    end = regK_idx;
 11516              		.loc 1 2494 11 view .LVU3740
 11517 0a9a 059E     		ldr	r6, [sp, #20]
 11518              	.LVL1305:
 11519              	.L965:
2494:src/display.c **** 	    end = regK_idx;
 11520              		.loc 1 2494 11 view .LVU3741
 11521              	.LBE653:
2529:src/display.c **** 	pc = state_pc();
 11522              		.loc 1 2529 2 is_stmt 1 view .LVU3742
2530:src/display.c **** 	if (isXROM(pc))
 11523              		.loc 1 2530 2 view .LVU3743
2530:src/display.c **** 	if (isXROM(pc))
 11524              		.loc 1 2530 7 is_stmt 0 view .LVU3744
 11525 0a9c B54B     		ldr	r3, .L1257+8
 11526 0a9e 1B68     		ldr	r3, [r3]
2530:src/display.c **** 	if (isXROM(pc))
 11527              		.loc 1 2530 5 view .LVU3745
 11528 0aa0 B3F8E077 		ldrh	r7, [r3, #2016]
 11529              	.LVL1306:
2531:src/display.c **** 	  pc = 1;
 11530              		.loc 1 2531 2 is_stmt 1 view .LVU3746
2531:src/display.c **** 	  pc = 1;
 11531              		.loc 1 2531 6 is_stmt 0 view .LVU3747
ARM GAS  /tmp/ccxUm1xs.s 			page 331


 11532 0aa4 BB0B     		lsrs	r3, r7, #14
2532:src/display.c **** 	for (n=i=0; i<4; i++) {
 11533              		.loc 1 2532 7 view .LVU3748
 11534 0aa6 032B     		cmp	r3, #3
 11535 0aa8 08BF     		it	eq
 11536 0aaa 0127     		moveq	r7, #1
 11537              	.LVL1307:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11538              		.loc 1 2533 2 is_stmt 1 view .LVU3749
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11539              		.loc 1 2533 14 view .LVU3750
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11540              		.loc 1 2533 8 is_stmt 0 view .LVU3751
 11541 0aac 4FF0000A 		mov	r10, #0
 11542 0ab0 6425     		movs	r5, #100
2529:src/display.c **** 	pc = state_pc();
 11543              		.loc 1 2529 4 view .LVU3752
 11544 0ab2 4FF06C08 		mov	r8, #108
 11545              	.LVL1308:
 11546              	.L978:
2534:src/display.c **** 	    if (++n == 4) {
 11547              		.loc 1 2534 4 is_stmt 1 view .LVU3753
2534:src/display.c **** 	    if (++n == 4) {
 11548              		.loc 1 2534 8 is_stmt 0 view .LVU3754
 11549 0ab6 0222     		movs	r2, #2
 11550 0ab8 2946     		mov	r1, r5
 11551 0aba 3846     		mov	r0, r7
 11552 0abc FFF7FEFF 		bl	find_label_from
 11553              	.LVL1309:
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11554              		.loc 1 2535 6 is_stmt 1 view .LVU3755
2534:src/display.c **** 	    if (++n == 4) {
 11555              		.loc 1 2534 7 is_stmt 0 view .LVU3756
 11556 0ac0 58B1     		cbz	r0, .L976
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11557              		.loc 1 2535 9 view .LVU3757
 11558 0ac2 0AF1010A 		add	r10, r10, #1
 11559              	.LVL1310:
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11560              		.loc 1 2539 8 is_stmt 1 view .LVU3758
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11561              		.loc 1 2535 9 is_stmt 0 view .LVU3759
 11562 0ac6 BAF1040F 		cmp	r10, #4
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11563              		.loc 1 2539 8 view .LVU3760
 11564 0aca A5F12301 		sub	r1, r5, #35
 11565 0ace 4046     		mov	r0, r8
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11566              		.loc 1 2535 9 view .LVU3761
 11567 0ad0 07D0     		beq	.L1244
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11568              		.loc 1 2539 8 view .LVU3762
 11569 0ad2 FFF7FEFF 		bl	set_dig
 11570              	.LVL1311:
2540:src/display.c **** 	    }
 11571              		.loc 1 2540 8 is_stmt 1 view .LVU3763
2540:src/display.c **** 	    }
ARM GAS  /tmp/ccxUm1xs.s 			page 332


 11572              		.loc 1 2540 10 is_stmt 0 view .LVU3764
 11573 0ad6 08F10708 		add	r8, r8, #7
 11574              	.LVL1312:
 11575              	.L976:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11576              		.loc 1 2533 19 is_stmt 1 view .LVU3765
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11577              		.loc 1 2533 14 view .LVU3766
 11578 0ada 0135     		adds	r5, r5, #1
 11579              	.LVL1313:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11580              		.loc 1 2533 2 is_stmt 0 view .LVU3767
 11581 0adc 682D     		cmp	r5, #104
 11582 0ade EAD1     		bne	.L978
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11583              		.loc 1 2533 2 view .LVU3768
 11584 0ae0 23E7     		b	.L1209
 11585              	.LVL1314:
 11586              	.L1244:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11587              		.loc 1 2536 8 is_stmt 1 view .LVU3769
 11588 0ae2 4C21     		movs	r1, #76
 11589 0ae4 7320     		movs	r0, #115
 11590              	.LVL1315:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11591              		.loc 1 2536 8 is_stmt 0 view .LVU3770
 11592 0ae6 FFF7FEFF 		bl	set_dig
 11593              	.LVL1316:
2537:src/display.c **** 	    } else {
 11594              		.loc 1 2537 8 is_stmt 1 view .LVU3771
 11595 0aea 4C21     		movs	r1, #76
 11596 0aec 7A20     		movs	r0, #122
 11597 0aee FFF7FEFF 		bl	set_dig
 11598              	.LVL1317:
 11599 0af2 F2E7     		b	.L976
 11600              	.LVL1318:
 11601              	.L1237:
2454:src/display.c **** 	  p = num_arg(buf, free_mem());
 11602              		.loc 1 2454 4 view .LVU3772
 11603 0af4 A048     		ldr	r0, .L1257+12
 11604 0af6 FFF7FEFF 		bl	set_status
 11605              	.LVL1319:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11606              		.loc 1 2455 4 view .LVU3773
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11607              		.loc 1 2455 21 is_stmt 0 view .LVU3774
 11608 0afa FFF7FEFF 		bl	free_mem
 11609              	.LVL1320:
 11610 0afe 0146     		mov	r1, r0
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11611              		.loc 1 2455 8 view .LVU3775
 11612 0b00 15A8     		add	r0, sp, #84
 11613              	.LVL1321:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11614              		.loc 1 2455 8 view .LVU3776
 11615 0b02 FFF7FEFF 		bl	num_arg
 11616              	.LVL1322:
ARM GAS  /tmp/ccxUm1xs.s 			page 333


2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11617              		.loc 1 2456 4 is_stmt 1 view .LVU3777
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11618              		.loc 1 2456 8 is_stmt 0 view .LVU3778
 11619 0b06 9D49     		ldr	r1, .L1257+16
 11620 0b08 FFF7FEFF 		bl	scopy
 11621              	.LVL1323:
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11622              		.loc 1 2456 8 view .LVU3779
 11623 0b0c 0546     		mov	r5, r0
 11624              	.LVL1324:
2457:src/display.c **** 	  *p = '\0';
 11625              		.loc 1 2457 4 is_stmt 1 view .LVU3780
2457:src/display.c **** 	  *p = '\0';
 11626              		.loc 1 2457 19 is_stmt 0 view .LVU3781
 11627 0b0e FFF7FEFF 		bl	free_flash
 11628              	.LVL1325:
2457:src/display.c **** 	  *p = '\0';
 11629              		.loc 1 2457 19 view .LVU3782
 11630 0b12 0146     		mov	r1, r0
2457:src/display.c **** 	  *p = '\0';
 11631              		.loc 1 2457 8 view .LVU3783
 11632 0b14 2846     		mov	r0, r5
 11633 0b16 FFF7FEFF 		bl	num_arg
 11634              	.LVL1326:
 11635 0b1a 0346     		mov	r3, r0
 11636              	.LVL1327:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11637              		.loc 1 2458 4 is_stmt 1 view .LVU3784
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11638              		.loc 1 2458 7 is_stmt 0 view .LVU3785
 11639 0b1c 0021     		movs	r1, #0
2459:src/display.c **** 	}
 11640              		.loc 1 2459 4 view .LVU3786
 11641 0b1e 15A8     		add	r0, sp, #84
 11642              	.LVL1328:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11643              		.loc 1 2458 7 view .LVU3787
 11644 0b20 1970     		strb	r1, [r3]
2459:src/display.c **** 	}
 11645              		.loc 1 2459 4 is_stmt 1 view .LVU3788
 11646 0b22 FFF7FEFF 		bl	set_digits_string
 11647              	.LVL1329:
2459:src/display.c **** 	}
 11648              		.loc 1 2459 4 is_stmt 0 view .LVU3789
 11649 0b26 B9E7     		b	.L965
 11650              	.LVL1330:
 11651              	.L1236:
2459:src/display.c **** 	}
 11652              		.loc 1 2459 4 view .LVU3790
 11653              	.LBE655:
 11654              	.LBE659:
 11655              	.LBB660:
 11656              	.LBB618:
2562:src/display.c **** 	  if (lblpc != pc) {
 11657              		.loc 1 2562 4 is_stmt 1 view .LVU3791
2562:src/display.c **** 	  if (lblpc != pc) {
ARM GAS  /tmp/ccxUm1xs.s 			page 334


 11658              		.loc 1 2562 12 is_stmt 0 view .LVU3792
 11659 0b28 4046     		mov	r0, r8
 11660 0b2a 3946     		mov	r1, r7
 11661 0b2c FFF7FEFF 		bl	findmultilbl
 11662              	.LVL1331:
2562:src/display.c **** 	  if (lblpc != pc) {
 11663              		.loc 1 2562 10 view .LVU3793
 11664 0b30 85B2     		uxth	r5, r0
 11665              	.LVL1332:
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11666              		.loc 1 2563 4 is_stmt 1 view .LVU3794
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11667              		.loc 1 2563 7 is_stmt 0 view .LVU3795
 11668 0b32 AB45     		cmp	fp, r5
2562:src/display.c **** 	  if (lblpc != pc) {
 11669              		.loc 1 2562 12 view .LVU3796
 11670 0b34 8046     		mov	r8, r0
 11671              	.LVL1333:
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11672              		.loc 1 2563 7 view .LVU3797
 11673 0b36 3FF4F8AE 		beq	.L1209
2564:src/display.c **** 	    n = nLIB(lblpc);
 11674              		.loc 1 2564 6 is_stmt 1 view .LVU3798
 11675 0b3a 9148     		ldr	r0, .L1257+20
 11676 0b3c 3F21     		movs	r1, #63
 11677 0b3e FFF7FEFF 		bl	set_digits_string
 11678              	.LVL1334:
2565:src/display.c **** 	    if (n == REGION_RAM)
 11679              		.loc 1 2565 6 view .LVU3799
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11680              		.loc 1 2566 6 view .LVU3800
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11681              		.loc 1 2566 9 is_stmt 0 view .LVU3801
 11682 0b42 AD0B     		lsrs	r5, r5, #14
 11683              	.LVL1335:
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11684              		.loc 1 2566 9 view .LVU3802
 11685 0b44 40F08680 		bne	.L983
2567:src/display.c **** 	    else {
 11686              		.loc 1 2567 8 is_stmt 1 view .LVU3803
 11687 0b48 2A46     		mov	r2, r5
 11688 0b4a 1FFA88F0 		uxth	r0, r8
 11689 0b4e 0121     		movs	r1, #1
 11690 0b50 FFF7FEFF 		bl	set_exp
 11691              	.LVL1336:
 11692 0b54 E9E6     		b	.L1209
 11693              	.LVL1337:
 11694              	.L1243:
2567:src/display.c **** 	    else {
 11695              		.loc 1 2567 8 is_stmt 0 view .LVU3804
 11696              	.LBE618:
 11697              	.LBE660:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11698              		.loc 1 2923 6 is_stmt 1 view .LVU3805
2923:src/display.c **** 	    j = State2.alpha_pos;
 11699              		.loc 1 2923 22 is_stmt 0 view .LVU3806
 11700 0b56 874B     		ldr	r3, .L1257+8
ARM GAS  /tmp/ccxUm1xs.s 			page 335


 11701 0b58 0192     		str	r2, [sp, #4]
 11702 0b5a 1968     		ldr	r1, [r3]
2923:src/display.c **** 	    j = State2.alpha_pos;
 11703              		.loc 1 2923 11 view .LVU3807
 11704 0b5c 1EA8     		add	r0, sp, #120
 11705              	.LVL1338:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11706              		.loc 1 2923 11 view .LVU3808
 11707 0b5e 01F5F661 		add	r1, r1, #1968
 11708 0b62 FFF7FEFF 		bl	scopy
 11709              	.LVL1339:
2924:src/display.c **** 	    if (j != 0) {
 11710              		.loc 1 2924 16 view .LVU3809
 11711 0b66 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11712              	.LVL1340:
2924:src/display.c **** 	    if (j != 0) {
 11713              		.loc 1 2924 6 is_stmt 1 view .LVU3810
2925:src/display.c **** 	      i = slen(buf);
 11714              		.loc 1 2925 6 view .LVU3811
2925:src/display.c **** 	      i = slen(buf);
 11715              		.loc 1 2925 9 is_stmt 0 view .LVU3812
 11716 0b68 23BB     		cbnz	r3, .L1245
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11717              		.loc 1 2938 8 is_stmt 1 view .LVU3813
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11718              		.loc 1 2938 11 is_stmt 0 view .LVU3814
 11719 0b6a 3DB1     		cbz	r5, .L1007
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11720              		.loc 1 2938 31 discriminator 1 view .LVU3815
 11721 0b6c BBF1000F 		cmp	fp, #0
 11722 0b70 04D1     		bne	.L1007
2939:src/display.c **** 		*bp++ = '\0';
 11723              		.loc 1 2939 3 is_stmt 1 view .LVU3816
 11724              	.LVL1341:
2939:src/display.c **** 		*bp++ = '\0';
 11725              		.loc 1 2939 23 is_stmt 0 view .LVU3817
 11726 0b72 05F11003 		add	r3, r5, #16
 11727              	.LVL1342:
2940:src/display.c **** 	      }
 11728              		.loc 1 2940 9 view .LVU3818
 11729 0b76 0022     		movs	r2, #0
2939:src/display.c **** 		*bp++ = '\0';
 11730              		.loc 1 2939 9 view .LVU3819
 11731 0b78 0370     		strb	r3, [r0]
 11732              	.LVL1343:
2940:src/display.c **** 	      }
 11733              		.loc 1 2940 3 is_stmt 1 view .LVU3820
2940:src/display.c **** 	      }
 11734              		.loc 1 2940 9 is_stmt 0 view .LVU3821
 11735 0b7a 4270     		strb	r2, [r0, #1]
 11736              	.LVL1344:
 11737              	.L1007:
2942:src/display.c **** 	    }
 11738              		.loc 1 2942 8 is_stmt 1 view .LVU3822
 11739 0b7c 1EA8     		add	r0, sp, #120
 11740 0b7e FFF7FEFF 		bl	set_status_right
 11741              	.LVL1345:
ARM GAS  /tmp/ccxUm1xs.s 			page 336


 11742              	.L1006:
2944:src/display.c **** 	      bp = buf;
 11743              		.loc 1 2944 6 view .LVU3823
2944:src/display.c **** 	      bp = buf;
 11744              		.loc 1 2944 9 is_stmt 0 view .LVU3824
 11745 0b82 85B3     		cbz	r5, .L998
2944:src/display.c **** 	      bp = buf;
 11746              		.loc 1 2944 27 discriminator 1 view .LVU3825
 11747 0b84 BBF1000F 		cmp	fp, #0
 11748 0b88 2DD0     		beq	.L998
2945:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11749              		.loc 1 2945 8 is_stmt 1 view .LVU3826
 11750              	.LVL1346:
2946:src/display.c **** 	      *bp++ = '\0';
 11751              		.loc 1 2946 8 view .LVU3827
 11752              	.LBB661:
 11753              	.LBB662:
3638:src/display.c **** 	if (State2.runmode) {
 11754              		.loc 1 3638 5 is_stmt 0 view .LVU3828
 11755 0b8a B9F90030 		ldrsh	r3, [r9]
 11756              	.LBE662:
 11757              	.LBE661:
2946:src/display.c **** 	      *bp++ = '\0';
 11758              		.loc 1 2946 28 view .LVU3829
 11759 0b8e 1035     		adds	r5, r5, #16
2947:src/display.c **** 	      set_status_top(buf);
 11760              		.loc 1 2947 14 view .LVU3830
 11761 0b90 0022     		movs	r2, #0
2946:src/display.c **** 	      *bp++ = '\0';
 11762              		.loc 1 2946 14 view .LVU3831
 11763 0b92 8DF87850 		strb	r5, [sp, #120]
2947:src/display.c **** 	      set_status_top(buf);
 11764              		.loc 1 2947 8 is_stmt 1 view .LVU3832
 11765              	.LVL1347:
2947:src/display.c **** 	      set_status_top(buf);
 11766              		.loc 1 2947 14 is_stmt 0 view .LVU3833
 11767 0b96 8DF87920 		strb	r2, [sp, #121]
2948:src/display.c **** 	      no_status_top = 1;
 11768              		.loc 1 2948 8 is_stmt 1 view .LVU3834
 11769              	.LVL1348:
 11770              	.LBB664:
 11771              	.LBI661:
3637:src/display.c **** 	if (no_status_top) return;
 11772              		.loc 1 3637 19 view .LVU3835
 11773              	.LBB663:
3638:src/display.c **** 	if (State2.runmode) {
 11774              		.loc 1 3638 2 view .LVU3836
3638:src/display.c **** 	if (State2.runmode) {
 11775              		.loc 1 3638 5 is_stmt 0 view .LVU3837
 11776 0b9a 13B9     		cbnz	r3, .L1008
 11777 0b9c 1EA8     		add	r0, sp, #120
 11778              	.LVL1349:
3638:src/display.c **** 	if (State2.runmode) {
 11779              		.loc 1 3638 5 view .LVU3838
 11780 0b9e FFF7FEFF 		bl	set_status_top.part.0
 11781              	.LVL1350:
 11782              	.L1008:
ARM GAS  /tmp/ccxUm1xs.s 			page 337


3638:src/display.c **** 	if (State2.runmode) {
 11783              		.loc 1 3638 5 view .LVU3839
 11784              	.LBE663:
 11785              	.LBE664:
2949:src/display.c **** 	      //annuc = 1;
 11786              		.loc 1 2949 8 is_stmt 1 view .LVU3840
2949:src/display.c **** 	      //annuc = 1;
 11787              		.loc 1 2949 22 is_stmt 0 view .LVU3841
 11788 0ba2 0123     		movs	r3, #1
 11789 0ba4 A9F80030 		strh	r3, [r9]	@ movhi
2971:src/display.c ****       nostk:
 11790              		.loc 1 2971 2 is_stmt 1 view .LVU3842
 11791 0ba8 FFF7FEFF 		bl	show_stack
 11792              	.LVL1351:
2973:src/display.c **** 	if (!skip) {
 11793              		.loc 1 2973 2 view .LVU3843
 11794 0bac FFF7FEFF 		bl	show_flags
 11795              	.LVL1352:
2974:src/display.c **** 	  if (State2.runmode) {
 11796              		.loc 1 2974 2 view .LVU3844
 11797 0bb0 FFF769BA 		b	.L925
 11798              	.LVL1353:
 11799              	.L1245:
2926:src/display.c **** 	      j *= 6;
 11800              		.loc 1 2926 8 view .LVU3845
2926:src/display.c **** 	      j *= 6;
 11801              		.loc 1 2926 12 is_stmt 0 view .LVU3846
 11802 0bb4 1EA8     		add	r0, sp, #120
 11803              	.LVL1354:
2926:src/display.c **** 	      j *= 6;
 11804              		.loc 1 2926 12 view .LVU3847
 11805 0bb6 0293     		str	r3, [sp, #8]
 11806 0bb8 FFF7FEFF 		bl	slen
 11807              	.LVL1355:
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11808              		.loc 1 2927 8 is_stmt 1 view .LVU3848
2928:src/display.c **** 		{
 11809              		.loc 1 2928 8 view .LVU3849
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11810              		.loc 1 2927 10 is_stmt 0 view .LVU3850
 11811 0bbc 029B     		ldr	r3, [sp, #8]
 11812 0bbe 03EB4303 		add	r3, r3, r3, lsl #1
2928:src/display.c **** 		{
 11813              		.loc 1 2928 15 view .LVU3851
 11814 0bc2 A0EB4300 		sub	r0, r0, r3, lsl #1
 11815              	.LVL1356:
2928:src/display.c **** 		{
 11816              		.loc 1 2928 11 view .LVU3852
 11817 0bc6 1328     		cmp	r0, #19
 11818 0bc8 13DD     		ble	.L1005
2930:src/display.c **** 		  set_status_right(buf);
 11819              		.loc 1 2930 5 is_stmt 1 view .LVU3853
2930:src/display.c **** 		  set_status_right(buf);
 11820              		.loc 1 2930 20 is_stmt 0 view .LVU3854
 11821 0bca 28AB     		add	r3, sp, #160
 11822 0bcc 0344     		add	r3, r3, r0
 11823 0bce 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccxUm1xs.s 			page 338


 11824 0bd0 03F8282C 		strb	r2, [r3, #-40]
2931:src/display.c **** 		}
 11825              		.loc 1 2931 5 is_stmt 1 view .LVU3855
 11826 0bd4 1EA8     		add	r0, sp, #120
 11827 0bd6 FFF7FEFF 		bl	set_status_right
 11828              	.LVL1357:
 11829 0bda D2E7     		b	.L1006
 11830              	.LVL1358:
 11831              	.L1246:
 11832              	.LBB665:
 11833              	.LBB666:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11834              		.loc 1 3456 17 view .LVU3856
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11835              		.loc 1 3456 18 is_stmt 0 view .LVU3857
 11836 0bdc 0135     		adds	r5, r5, #1
 11837              	.LVL1359:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11838              		.loc 1 3456 12 is_stmt 1 view .LVU3858
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11839              		.loc 1 3456 2 is_stmt 0 view .LVU3859
 11840 0bde 062D     		cmp	r5, #6
 11841 0be0 21D1     		bne	.L999
 11842 0be2 DDE90467 		ldrd	r6, r7, [sp, #16]
 11843              	.LVL1360:
 11844              	.L998:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11845              		.loc 1 3456 2 view .LVU3860
 11846              	.LBE666:
 11847              	.LBE665:
2971:src/display.c ****       nostk:
 11848              		.loc 1 2971 2 is_stmt 1 view .LVU3861
 11849 0be6 FFF7FEFF 		bl	show_stack
 11850              	.LVL1361:
2973:src/display.c **** 	if (!skip) {
 11851              		.loc 1 2973 2 view .LVU3862
 11852 0bea FFF7FEFF 		bl	show_flags
 11853              	.LVL1362:
2974:src/display.c **** 	  if (State2.runmode) {
 11854              		.loc 1 2974 2 view .LVU3863
 11855 0bee FFF74ABA 		b	.L925
 11856              	.LVL1363:
 11857              	.L1005:
2934:src/display.c **** 	      }
 11858              		.loc 1 2934 3 view .LVU3864
 11859 0bf2 1EA8     		add	r0, sp, #120
 11860 0bf4 FFF7FEFF 		bl	set_status
 11861              	.LVL1364:
 11862 0bf8 C3E7     		b	.L1006
 11863              	.LVL1365:
 11864              	.L1242:
2921:src/display.c **** 	  } else if (State2.alphas) {
 11865              		.loc 1 2921 6 view .LVU3865
2921:src/display.c **** 	  } else if (State2.alphas) {
 11866              		.loc 1 2921 48 is_stmt 0 view .LVU3866
 11867 0bfa 501E     		subs	r0, r2, #1
 11868 0bfc 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccxUm1xs.s 			page 339


 11869 0bfe FFF7FEFF 		bl	get_reg_n
 11870              	.LVL1366:
 11871              	.LBB674:
 11872              	.LBI665:
3442:src/display.c **** 	int glen = *graphic++;
 11873              		.loc 1 3442 19 is_stmt 1 view .LVU3867
 11874              	.LBB673:
3443:src/display.c **** 	int i, j;
 11875              		.loc 1 3443 2 view .LVU3868
3451:src/display.c **** #endif
 11876              		.loc 1 3451 15 is_stmt 0 view .LVU3869
 11877 0c02 604D     		ldr	r5, .L1257+24
3443:src/display.c **** 	int i, j;
 11878              		.loc 1 3443 6 view .LVU3870
 11879 0c04 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11880              	.LVL1367:
3444:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11881              		.loc 1 3444 2 is_stmt 1 view .LVU3871
3451:src/display.c **** #endif
 11882              		.loc 1 3451 2 view .LVU3872
3451:src/display.c **** #endif
 11883              		.loc 1 3451 15 is_stmt 0 view .LVU3873
 11884 0c06 0122     		movs	r2, #1
 11885 0c08 2A70     		strb	r2, [r5]
3453:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11886              		.loc 1 3453 2 is_stmt 1 view .LVU3874
3453:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11887              		.loc 1 3453 5 is_stmt 0 view .LVU3875
 11888 0c0a 0029     		cmp	r1, #0
 11889 0c0c EBD0     		beq	.L998
3454:src/display.c **** 
 11890              		.loc 1 3454 2 is_stmt 1 view .LVU3876
 11891              	.LVL1368:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11892              		.loc 1 3456 2 view .LVU3877
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11893              		.loc 1 3456 12 view .LVU3878
 11894 0c0e 8318     		adds	r3, r0, r2
 11895 0c10 0393     		str	r3, [sp, #12]
 11896 0c12 4A29     		cmp	r1, #74
 11897 0c14 D4BF     		ite	le
 11898 0c16 5B18     		addle	r3, r3, r1
 11899 0c18 4A33     		addgt	r3, r3, #74
 11900 0c1a 0193     		str	r3, [sp, #4]
 11901 0c1c CDE90467 		strd	r6, r7, [sp, #16]
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11902              		.loc 1 3456 8 is_stmt 0 view .LVU3879
 11903 0c20 029B     		ldr	r3, [sp, #8]
 11904 0c22 0292     		str	r2, [sp, #8]
 11905 0c24 1D46     		mov	r5, r3
 11906              	.LVL1369:
 11907              	.L999:
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11908              		.loc 1 3457 14 is_stmt 1 view .LVU3880
 11909 0c26 029B     		ldr	r3, [sp, #8]
 11910 0c28 039F     		ldr	r7, [sp, #12]
 11911 0c2a 03FA05FB 		lsl	fp, r3, r5
ARM GAS  /tmp/ccxUm1xs.s 			page 340


 11912 0c2e 05F19406 		add	r6, r5, #148
 11913 0c32 06E0     		b	.L1002
 11914              	.LVL1370:
 11915              	.L1247:
 11916              	.LBB667:
 11917              	.LBB668:
 348:src/display.c ****   else	clr_dot(n);
 11918              		.loc 1 348 11 is_stmt 0 view .LVU3881
 11919 0c34 FFF7FEFF 		bl	set_dot
 11920              	.LVL1371:
 11921              	.L1001:
 348:src/display.c ****   else	clr_dot(n);
 11922              		.loc 1 348 11 view .LVU3882
 11923              	.LBE668:
 11924              	.LBE667:
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11925              		.loc 1 3457 23 is_stmt 1 view .LVU3883
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11926              		.loc 1 3457 14 view .LVU3884
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11927              		.loc 1 3457 4 is_stmt 0 view .LVU3885
 11928 0c38 019B     		ldr	r3, [sp, #4]
 11929 0c3a BB42     		cmp	r3, r7
 11930 0c3c 06F10606 		add	r6, r6, #6
 11931 0c40 CCD0     		beq	.L1246
 11932              	.LVL1372:
 11933              	.L1002:
3462:src/display.c **** #endif
 11934              		.loc 1 3462 6 is_stmt 1 view .LVU3886
 11935              	.LBB671:
 11936              	.LBI667:
 347:src/display.c ****   if (on)	set_dot(n);
 11937              		.loc 1 347 6 view .LVU3887
 11938              	.LBB669:
 348:src/display.c ****   else	clr_dot(n);
 11939              		.loc 1 348 3 view .LVU3888
 348:src/display.c ****   else	clr_dot(n);
 11940              		.loc 1 348 11 view .LVU3889
 349:src/display.c **** }
 11941              		.loc 1 349 8 view .LVU3890
 11942              	.LBE669:
 11943              	.LBE671:
3462:src/display.c **** #endif
 11944              		.loc 1 3462 37 is_stmt 0 view .LVU3891
 11945 0c42 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11946              	.LVL1373:
 11947              	.LBB672:
 11948              	.LBB670:
 348:src/display.c ****   else	clr_dot(n);
 11949              		.loc 1 348 6 view .LVU3892
 11950 0c46 13EA0B0F 		tst	r3, fp
 348:src/display.c ****   else	clr_dot(n);
 11951              		.loc 1 348 11 view .LVU3893
 11952 0c4a 3046     		mov	r0, r6
 348:src/display.c ****   else	clr_dot(n);
 11953              		.loc 1 348 6 view .LVU3894
 11954 0c4c F2D1     		bne	.L1247
ARM GAS  /tmp/ccxUm1xs.s 			page 341


 349:src/display.c **** }
 11955              		.loc 1 349 8 view .LVU3895
 11956 0c4e FFF7FEFF 		bl	clr_dot
 11957              	.LVL1374:
 11958 0c52 F1E7     		b	.L1001
 11959              	.LVL1375:
 11960              	.L983:
 349:src/display.c **** }
 11961              		.loc 1 349 8 view .LVU3896
 11962              	.LBE670:
 11963              	.LBE672:
 11964              	.LBE673:
 11965              	.LBE674:
 11966              	.LBB675:
 11967              	.LBB619:
2569:src/display.c **** #ifndef REALBUILD
 11968              		.loc 1 2569 8 is_stmt 1 view .LVU3897
2569:src/display.c **** #ifndef REALBUILD
 11969              		.loc 1 2569 37 is_stmt 0 view .LVU3898
 11970 0c54 05EB8500 		add	r0, r5, r5, lsl #2
2569:src/display.c **** #ifndef REALBUILD
 11971              		.loc 1 2569 8 view .LVU3899
 11972 0c58 3946     		mov	r1, r7
 11973 0c5a 5044     		add	r0, r0, r10
 11974 0c5c FFF7FEFF 		bl	set_exp_digits_string
 11975              	.LVL1376:
2571:src/display.c **** #endif
 11976              		.loc 1 2571 8 is_stmt 1 view .LVU3900
 11977 0c60 494B     		ldr	r3, .L1257+28
 11978 0c62 4A48     		ldr	r0, .L1257+32
2571:src/display.c **** #endif
 11979              		.loc 1 2571 47 is_stmt 0 view .LVU3901
 11980 0c64 0A21     		movs	r1, #10
2571:src/display.c **** #endif
 11981              		.loc 1 2571 8 view .LVU3902
 11982 0c66 01FB0531 		mla	r1, r1, r5, r3
 11983 0c6a FFF7FEFF 		bl	scopy
 11984              	.LVL1377:
2571:src/display.c **** #endif
 11985              		.loc 1 2571 8 view .LVU3903
 11986              	.LBE619:
 11987              	.LBE675:
2971:src/display.c ****       nostk:
 11988              		.loc 1 2971 2 is_stmt 1 view .LVU3904
 11989 0c6e 5CE6     		b	.L1209
 11990              	.LVL1378:
 11991              	.L1239:
 11992              	.LBB676:
 11993              	.LBB656:
 11994              	.LBB654:
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11995              		.loc 1 2484 6 view .LVU3905
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11996              		.loc 1 2484 11 is_stmt 0 view .LVU3906
 11997 0c70 4FF00A0A 		mov	r10, #10
 11998              	.LVL1379:
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
ARM GAS  /tmp/ccxUm1xs.s 			page 342


 11999              		.loc 1 2484 11 view .LVU3907
 12000 0c74 0AFB03F7 		mul	r7, r10, r3
 12001              	.LVL1380:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 12002              		.loc 1 2485 6 is_stmt 1 view .LVU3908
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 12003              		.loc 1 2485 28 is_stmt 0 view .LVU3909
 12004 0c78 462F     		cmp	r7, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12005              		.loc 1 2486 10 view .LVU3910
 12006 0c7a 4549     		ldr	r1, .L1257+36
 12007 0c7c 15A8     		add	r0, sp, #84
 12008              	.LVL1381:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 12009              		.loc 1 2485 28 view .LVU3911
 12010 0c7e B846     		mov	r8, r7
 12011 0c80 A8BF     		it	ge
 12012 0c82 4FF04608 		movge	r8, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12013              		.loc 1 2486 10 view .LVU3912
 12014 0c86 FFF7FEFF 		bl	scopy
 12015              	.LVL1382:
2487:src/display.c **** 	    *p++ = '-';
 12016              		.loc 1 2487 10 view .LVU3913
 12017 0c8a 3946     		mov	r1, r7
 12018 0c8c 0222     		movs	r2, #2
 12019 0c8e FFF7FEFF 		bl	num_arg_0
 12020              	.LVL1383:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 12021              		.loc 1 2485 10 view .LVU3914
 12022 0c92 08F11D08 		add	r8, r8, #29
 12023              	.LVL1384:
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 12024              		.loc 1 2486 6 is_stmt 1 view .LVU3915
2487:src/display.c **** 	    *p++ = '-';
 12025              		.loc 1 2487 6 view .LVU3916
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12026              		.loc 1 2488 6 view .LVU3917
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 12027              		.loc 1 2488 11 is_stmt 0 view .LVU3918
 12028 0c96 2D23     		movs	r3, #45
 12029 0c98 00F8013B 		strb	r3, [r0], #1
 12030              	.LVL1385:
2489:src/display.c **** 	    *p = '\0';
 12031              		.loc 1 2489 6 is_stmt 1 view .LVU3919
2489:src/display.c **** 	    *p = '\0';
 12032              		.loc 1 2489 10 is_stmt 0 view .LVU3920
 12033 0c9c 4146     		mov	r1, r8
 12034 0c9e 0222     		movs	r2, #2
 12035 0ca0 FFF7FEFF 		bl	num_arg_0
 12036              	.LVL1386:
2489:src/display.c **** 	    *p = '\0';
 12037              		.loc 1 2489 10 view .LVU3921
 12038 0ca4 0246     		mov	r2, r0
 12039              	.LVL1387:
2490:src/display.c **** 	    set_status(buf);
 12040              		.loc 1 2490 6 is_stmt 1 view .LVU3922
ARM GAS  /tmp/ccxUm1xs.s 			page 343


2490:src/display.c **** 	    set_status(buf);
 12041              		.loc 1 2490 9 is_stmt 0 view .LVU3923
 12042 0ca6 4FF0000B 		mov	fp, #0
2491:src/display.c **** 	  }
 12043              		.loc 1 2491 6 view .LVU3924
 12044 0caa 15A8     		add	r0, sp, #84
 12045              	.LVL1388:
2490:src/display.c **** 	    set_status(buf);
 12046              		.loc 1 2490 9 view .LVU3925
 12047 0cac 82F800B0 		strb	fp, [r2]
2491:src/display.c **** 	  }
 12048              		.loc 1 2491 6 is_stmt 1 view .LVU3926
 12049 0cb0 FFF7FEFF 		bl	set_status
 12050              	.LVL1389:
2491:src/display.c **** 	  }
 12051              		.loc 1 2491 6 is_stmt 0 view .LVU3927
 12052 0cb4 56E6     		b	.L970
 12053              	.LVL1390:
 12054              	.L1238:
2491:src/display.c **** 	  }
 12055              		.loc 1 2491 6 view .LVU3928
 12056              	.LBE654:
2463:src/display.c **** 	  if (SizeStatRegs)
 12057              		.loc 1 2463 4 is_stmt 1 view .LVU3929
2463:src/display.c **** 	  if (SizeStatRegs)
 12058              		.loc 1 2463 8 is_stmt 0 view .LVU3930
 12059 0cb6 15AF     		add	r7, sp, #84
 12060              	.LVL1391:
2463:src/display.c **** 	  if (SizeStatRegs)
 12061              		.loc 1 2463 8 view .LVU3931
 12062 0cb8 3649     		ldr	r1, .L1257+40
 12063 0cba 3846     		mov	r0, r7
 12064 0cbc FFF7FEFF 		bl	scopy
 12065              	.LVL1392:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12066              		.loc 1 2464 8 view .LVU3932
 12067 0cc0 354A     		ldr	r2, .L1257+44
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12068              		.loc 1 2464 7 view .LVU3933
 12069 0cc2 1268     		ldr	r2, [r2]
2463:src/display.c **** 	  if (SizeStatRegs)
 12070              		.loc 1 2463 8 view .LVU3934
 12071 0cc4 0346     		mov	r3, r0
 12072              	.LVL1393:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12073              		.loc 1 2464 4 is_stmt 1 view .LVU3935
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 12074              		.loc 1 2464 7 is_stmt 0 view .LVU3936
 12075 0cc6 002A     		cmp	r2, #0
 12076 0cc8 76D1     		bne	.L1248
 12077              	.L967:
2466:src/display.c **** 	  set_status(buf);
 12078              		.loc 1 2466 4 is_stmt 1 view .LVU3937
2466:src/display.c **** 	  set_status(buf);
 12079              		.loc 1 2466 7 is_stmt 0 view .LVU3938
 12080 0cca 0022     		movs	r2, #0
 12081 0ccc 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccxUm1xs.s 			page 344


2467:src/display.c **** 
 12082              		.loc 1 2467 4 is_stmt 1 view .LVU3939
 12083 0cce 3846     		mov	r0, r7
 12084              	.LVL1394:
2467:src/display.c **** 
 12085              		.loc 1 2467 4 is_stmt 0 view .LVU3940
 12086 0cd0 FFF7FEFF 		bl	set_status
 12087              	.LVL1395:
2470:src/display.c **** 	  if (LocalRegs < 0) {
 12088              		.loc 1 2470 4 is_stmt 1 view .LVU3941
2470:src/display.c **** 	  if (LocalRegs < 0) {
 12089              		.loc 1 2470 8 is_stmt 0 view .LVU3942
 12090 0cd4 FFF7FEFF 		bl	global_regs
 12091              	.LVL1396:
 12092 0cd8 0146     		mov	r1, r0
 12093 0cda 3846     		mov	r0, r7
 12094 0cdc FFF7FEFF 		bl	num_arg
 12095              	.LVL1397:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12096              		.loc 1 2471 8 view .LVU3943
 12097 0ce0 244B     		ldr	r3, .L1257+8
 12098 0ce2 1A68     		ldr	r2, [r3]
 12099 0ce4 B2F8DE27 		ldrh	r2, [r2, #2014]
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12100              		.loc 1 2471 7 view .LVU3944
 12101 0ce8 1104     		lsls	r1, r2, #16
2470:src/display.c **** 	  if (LocalRegs < 0) {
 12102              		.loc 1 2470 8 view .LVU3945
 12103 0cea 0346     		mov	r3, r0
 12104              	.LVL1398:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12105              		.loc 1 2471 4 is_stmt 1 view .LVU3946
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 12106              		.loc 1 2471 7 is_stmt 0 view .LVU3947
 12107 0cec 58D4     		bmi	.L1249
 12108              	.L968:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 12109              		.loc 1 2475 4 is_stmt 1 view .LVU3948
2475:src/display.c **** 	  set_digits_string(buf, 0);
 12110              		.loc 1 2475 7 is_stmt 0 view .LVU3949
 12111 0cee 0021     		movs	r1, #0
2476:src/display.c **** 	} else {
 12112              		.loc 1 2476 4 view .LVU3950
 12113 0cf0 3846     		mov	r0, r7
 12114              	.LVL1399:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 12115              		.loc 1 2475 7 view .LVU3951
 12116 0cf2 1970     		strb	r1, [r3]
2476:src/display.c **** 	} else {
 12117              		.loc 1 2476 4 is_stmt 1 view .LVU3952
 12118 0cf4 FFF7FEFF 		bl	set_digits_string
 12119              	.LVL1400:
2476:src/display.c **** 	} else {
 12120              		.loc 1 2476 4 is_stmt 0 view .LVU3953
 12121 0cf8 D0E6     		b	.L965
 12122              	.LVL1401:
 12123              	.L995:
ARM GAS  /tmp/ccxUm1xs.s 			page 345


2476:src/display.c **** 	} else {
 12124              		.loc 1 2476 4 view .LVU3954
 12125              	.LBE656:
 12126              	.LBE676:
2961:src/display.c **** 	  if (i > 0)
 12127              		.loc 1 2961 4 is_stmt 1 view .LVU3955
2961:src/display.c **** 	  if (i > 0)
 12128              		.loc 1 2961 8 is_stmt 0 view .LVU3956
 12129 0cfa 1E4B     		ldr	r3, .L1257+8
 12130 0cfc 1B68     		ldr	r3, [r3]
 12131 0cfe B3F8E007 		ldrh	r0, [r3, #2016]
 12132              	.LVL1402:
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12133              		.loc 1 2962 4 is_stmt 1 view .LVU3957
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 12134              		.loc 1 2962 7 is_stmt 0 view .LVU3958
 12135 0d02 0028     		cmp	r0, #0
 12136 0d04 00F0C080 		beq	.L1009
2963:src/display.c **** 	  else
 12137              		.loc 1 2963 6 is_stmt 1 view .LVU3959
 12138 0d08 FFF7FEFF 		bl	getprog
 12139              	.LVL1403:
2963:src/display.c **** 	  else
 12140              		.loc 1 2963 6 is_stmt 0 view .LVU3960
 12141 0d0c 1EA9     		add	r1, sp, #120
 12142              	.LVL1404:
2963:src/display.c **** 	  else
 12143              		.loc 1 2963 6 view .LVU3961
 12144 0d0e FFF7FEFF 		bl	prt
 12145              	.LVL1405:
2963:src/display.c **** 	  else
 12146              		.loc 1 2963 6 view .LVU3962
 12147 0d12 FFF7FEFF 		bl	set_status
 12148              	.LVL1406:
 12149              	.L1010:
2966:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 12150              		.loc 1 2966 4 is_stmt 1 view .LVU3963
 12151 0d16 8920     		movs	r0, #137
 12152 0d18 FFF7FEFF 		bl	set_dot
 12153              	.LVL1407:
2968:src/display.c **** 	  goto nostk;
 12154              		.loc 1 2968 6 view .LVU3964
2969:src/display.c **** 	}
 12155              		.loc 1 2969 4 view .LVU3965
2973:src/display.c **** 	if (!skip) {
 12156              		.loc 1 2973 2 view .LVU3966
2968:src/display.c **** 	  goto nostk;
 12157              		.loc 1 2968 12 is_stmt 0 view .LVU3967
 12158 0d1c 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 12159              		.loc 1 2973 2 view .LVU3968
 12160 0d1e FFF7FEFF 		bl	show_flags
 12161              	.LVL1408:
 12162              	.L1206:
2974:src/display.c **** 	  if (State2.runmode) {
 12163              		.loc 1 2974 2 is_stmt 1 view .LVU3969
 12164 0d22 124B     		ldr	r3, .L1257
ARM GAS  /tmp/ccxUm1xs.s 			page 346


 12165 0d24 1D4F     		ldr	r7, .L1257+48
 12166 0d26 0093     		str	r3, [sp]
 12167 0d28 FFF7ADB9 		b	.L925
 12168              	.LVL1409:
 12169              	.L1231:
2908:src/display.c **** 	  skip = 1;
 12170              		.loc 1 2908 4 view .LVU3970
 12171              	.LBB677:
 12172              	.LBI677:
2579:src/display.c **** 	char buf[16], *bp;
 12173              		.loc 1 2579 19 view .LVU3971
 12174              	.LBB678:
2580:src/display.c **** 	int n = State2.digval;
 12175              		.loc 1 2580 2 view .LVU3972
2581:src/display.c **** 	
 12176              		.loc 1 2581 2 view .LVU3973
2581:src/display.c **** 	
 12177              		.loc 1 2581 6 is_stmt 0 view .LVU3974
 12178 0d2c B4F808A0 		ldrh	r10, [r4, #8]
 12179              	.LVL1410:
2588:src/display.c **** 	  n;
 12180              		.loc 1 2588 2 is_stmt 1 view .LVU3975
2588:src/display.c **** 	  n;
 12181              		.loc 1 2588 54 is_stmt 0 view .LVU3976
 12182 0d30 C807     		lsls	r0, r1, #31
 12183 0d32 4CBF     		ite	mi
 12184 0d34 0AF17008 		addmi	r8, r10, #112
2581:src/display.c **** 	
 12185              		.loc 1 2581 6 view .LVU3977
 12186 0d38 D046     		movpl	r8, r10
 12187              	.LVL1411:
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12188              		.loc 1 2592 2 is_stmt 1 view .LVU3978
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12189              		.loc 1 2592 5 is_stmt 0 view .LVU3979
 12190 0d3a 11F00401 		ands	r1, r1, #4
 12191 0d3e 49D0     		beq	.L986
2593:src/display.c **** 	}
 12192              		.loc 1 2593 4 is_stmt 1 view .LVU3980
2593:src/display.c **** 	}
 12193              		.loc 1 2593 15 is_stmt 0 view .LVU3981
 12194 0d40 15A9     		add	r1, sp, #84
 12195 0d42 4046     		mov	r0, r8
 12196 0d44 FFF7FEFF 		bl	alpha_rcl_s
 12197              	.LVL1412:
2593:src/display.c **** 	}
 12198              		.loc 1 2593 4 view .LVU3982
 12199 0d48 FFF7FEFF 		bl	set_status
 12200              	.LVL1413:
 12201              	.L987:
2615:src/display.c ****       }
 12202              		.loc 1 2615 2 is_stmt 1 view .LVU3983
 12203 0d4c 4046     		mov	r0, r8
 12204 0d4e 0021     		movs	r1, #0
 12205 0d50 FFF7FEFF 		bl	format_reg
 12206              	.LVL1414:
2615:src/display.c ****       }
ARM GAS  /tmp/ccxUm1xs.s 			page 347


 12207              		.loc 1 2615 2 is_stmt 0 view .LVU3984
 12208              	.LBE678:
 12209              	.LBE677:
2909:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12210              		.loc 1 2909 4 is_stmt 1 view .LVU3985
2910:src/display.c **** 	    annunciators();
 12211              		.loc 1 2910 4 view .LVU3986
2910:src/display.c **** 	    annunciators();
 12212              		.loc 1 2910 7 is_stmt 0 view .LVU3987
 12213 0d54 002D     		cmp	r5, #0
 12214 0d56 3AD1     		bne	.L993
2910:src/display.c **** 	    annunciators();
 12215              		.loc 1 2910 25 discriminator 1 view .LVU3988
 12216 0d58 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12217 0d5a 012B     		cmp	r3, #1
 12218 0d5c 31D0     		beq	.L1250
 12219              	.L994:
2971:src/display.c ****       nostk:
 12220              		.loc 1 2971 2 is_stmt 1 view .LVU3989
 12221 0d5e FFF7FEFF 		bl	show_stack
 12222              	.LVL1415:
2973:src/display.c **** 	if (!skip) {
 12223              		.loc 1 2973 2 view .LVU3990
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12224              		.loc 1 2681 6 is_stmt 0 view .LVU3991
 12225 0d62 0026     		movs	r6, #0
2973:src/display.c **** 	if (!skip) {
 12226              		.loc 1 2973 2 view .LVU3992
 12227 0d64 FFF7FEFF 		bl	show_flags
 12228              	.LVL1416:
2974:src/display.c **** 	  if (State2.runmode) {
 12229              		.loc 1 2974 2 is_stmt 1 view .LVU3993
 12230 0d68 7BE5     		b	.L958
 12231              	.L1258:
 12232 0d6a 00BF     		.align	2
 12233              	.L1257:
 12234 0d6c 00000000 		.word	DispPlot
 12235 0d70 7C000000 		.word	.LC39
 12236 0d74 00000000 		.word	main_ram
 12237 0d78 4C000000 		.word	.LC33
 12238 0d7c 54000000 		.word	.LC34
 12239 0d80 98000000 		.word	.LC41
 12240 0d84 00000000 		.word	forceDispPlot
 12241 0d88 00000000 		.word	.LANCHOR23
 12242 0d8c 00000000 		.word	LastDisplayedNumber
 12243 0d90 78000000 		.word	.LC38
 12244 0d94 5C000000 		.word	.LC35
 12245 0d98 00000000 		.word	SizeStatRegs
 12246 0d9c 00000000 		.word	DispMsg
 12247              	.LVL1417:
 12248              	.L1249:
 12249              	.LBB681:
 12250              	.LBB657:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 12251              		.loc 1 2472 6 view .LVU3994
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 12252              		.loc 1 2472 10 is_stmt 0 view .LVU3995
ARM GAS  /tmp/ccxUm1xs.s 			page 348


 12253 0da0 4849     		ldr	r1, .L1259
 12254 0da2 FFF7FEFF 		bl	scopy
 12255              	.LVL1418:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 12256              		.loc 1 2472 10 view .LVU3996
 12257 0da6 0546     		mov	r5, r0
 12258              	.LVL1419:
2473:src/display.c **** 	  }
 12259              		.loc 1 2473 6 is_stmt 1 view .LVU3997
2473:src/display.c **** 	  }
 12260              		.loc 1 2473 21 is_stmt 0 view .LVU3998
 12261 0da8 FFF7FEFF 		bl	local_regs
 12262              	.LVL1420:
2473:src/display.c **** 	  }
 12263              		.loc 1 2473 21 view .LVU3999
 12264 0dac 0146     		mov	r1, r0
2473:src/display.c **** 	  }
 12265              		.loc 1 2473 10 view .LVU4000
 12266 0dae 2846     		mov	r0, r5
 12267 0db0 FFF7FEFF 		bl	num_arg
 12268              	.LVL1421:
 12269 0db4 0346     		mov	r3, r0
 12270              	.LVL1422:
2473:src/display.c **** 	  }
 12271              		.loc 1 2473 10 view .LVU4001
 12272 0db6 9AE7     		b	.L968
 12273              	.L1248:
2465:src/display.c **** 	  *p = '\0';
 12274              		.loc 1 2465 6 is_stmt 1 view .LVU4002
2465:src/display.c **** 	  *p = '\0';
 12275              		.loc 1 2465 10 is_stmt 0 view .LVU4003
 12276 0db8 4349     		ldr	r1, .L1259+4
 12277 0dba FFF7FEFF 		bl	scopy
 12278              	.LVL1423:
2465:src/display.c **** 	  *p = '\0';
 12279              		.loc 1 2465 10 view .LVU4004
 12280 0dbe 0346     		mov	r3, r0
 12281              	.LVL1424:
2465:src/display.c **** 	  *p = '\0';
 12282              		.loc 1 2465 10 view .LVU4005
 12283 0dc0 83E7     		b	.L967
 12284              	.LVL1425:
 12285              	.L1250:
2465:src/display.c **** 	  *p = '\0';
 12286              		.loc 1 2465 10 view .LVU4006
 12287              	.LBE657:
 12288              	.LBE681:
2910:src/display.c **** 	    annunciators();
 12289              		.loc 1 2910 56 discriminator 2 view .LVU4007
 12290 0dc2 424B     		ldr	r3, .L1259+8
 12291 0dc4 1B68     		ldr	r3, [r3]
 12292 0dc6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12293 0dca DB07     		lsls	r3, r3, #31
 12294 0dcc C7D5     		bpl	.L994
 12295              	.L993:
2911:src/display.c **** 	  }
 12296              		.loc 1 2911 6 is_stmt 1 view .LVU4008
ARM GAS  /tmp/ccxUm1xs.s 			page 349


 12297 0dce FFF7FEFF 		bl	annunciators
 12298              	.LVL1426:
 12299 0dd2 AAE5     		b	.L1209
 12300              	.LVL1427:
 12301              	.L986:
 12302              	.LBB682:
 12303              	.LBB679:
2596:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12304              		.loc 1 2596 4 view .LVU4009
 12305 0dd4 15AF     		add	r7, sp, #84
 12306 0dd6 1022     		movs	r2, #16
 12307 0dd8 3846     		mov	r0, r7
 12308 0dda FFF7FEFF 		bl	xset
 12309              	.LVL1428:
2600:src/display.c **** #endif
 12310              		.loc 1 2600 4 view .LVU4010
2600:src/display.c **** #endif
 12311              		.loc 1 2600 9 is_stmt 0 view .LVU4011
 12312 0dde 3C49     		ldr	r1, .L1259+12
 12313 0de0 3846     		mov	r0, r7
 12314 0de2 FFF7FEFF 		bl	scopy_spc
 12315              	.LVL1429:
2602:src/display.c **** 	    *bp++ = '.';
 12316              		.loc 1 2602 8 view .LVU4012
 12317 0de6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12318              	.LVL1430:
2602:src/display.c **** 	    *bp++ = '.';
 12319              		.loc 1 2602 4 is_stmt 1 view .LVU4013
2602:src/display.c **** 	    *bp++ = '.';
 12320              		.loc 1 2602 7 is_stmt 0 view .LVU4014
 12321 0de8 DA07     		lsls	r2, r3, #31
 12322 0dea 56D5     		bpl	.L988
2603:src/display.c **** 	    if (n >= 100) {
 12323              		.loc 1 2603 6 is_stmt 1 view .LVU4015
 12324              	.LVL1431:
2603:src/display.c **** 	    if (n >= 100) {
 12325              		.loc 1 2603 12 is_stmt 0 view .LVU4016
 12326 0dec 2E23     		movs	r3, #46
2604:src/display.c **** 	      *bp++ = '1';
 12327              		.loc 1 2604 9 view .LVU4017
 12328 0dee BAF1630F 		cmp	r10, #99
2603:src/display.c **** 	    if (n >= 100) {
 12329              		.loc 1 2603 12 view .LVU4018
 12330 0df2 0370     		strb	r3, [r0]
2604:src/display.c **** 	      *bp++ = '1';
 12331              		.loc 1 2604 6 is_stmt 1 view .LVU4019
2604:src/display.c **** 	      *bp++ = '1';
 12332              		.loc 1 2604 9 is_stmt 0 view .LVU4020
 12333 0df4 4CDC     		bgt	.L989
2603:src/display.c **** 	    if (n >= 100) {
 12334              		.loc 1 2603 9 view .LVU4021
 12335 0df6 0130     		adds	r0, r0, #1
 12336              	.LVL1432:
 12337              	.L990:
2610:src/display.c **** 	  else
 12338              		.loc 1 2610 6 is_stmt 1 view .LVU4022
2610:src/display.c **** 	  else
ARM GAS  /tmp/ccxUm1xs.s 			page 350


 12339              		.loc 1 2610 11 is_stmt 0 view .LVU4023
 12340 0df8 5146     		mov	r1, r10
 12341 0dfa 0222     		movs	r2, #2
 12342 0dfc FFF7FEFF 		bl	num_arg_0
 12343              	.LVL1433:
 12344              	.L992:
2613:src/display.c **** 	}
 12345              		.loc 1 2613 4 is_stmt 1 view .LVU4024
 12346 0e00 3846     		mov	r0, r7
 12347 0e02 FFF7FEFF 		bl	set_status
 12348              	.LVL1434:
 12349 0e06 A1E7     		b	.L987
 12350              	.LVL1435:
 12351              	.L1235:
2613:src/display.c **** 	}
 12352              		.loc 1 2613 4 is_stmt 0 view .LVU4025
 12353              	.LBE679:
 12354              	.LBE682:
 12355              	.LBB683:
 12356              	.LBB604:
2870:src/display.c **** 	      copyreg(&z, x);
 12357              		.loc 1 2870 8 is_stmt 1 view .LVU4026
2870:src/display.c **** 	      copyreg(&z, x);
 12358              		.loc 1 2870 27 is_stmt 0 view .LVU4027
 12359 0e08 324B     		ldr	r3, .L1259+16
 12360 0e0a 1E68     		ldr	r6, [r3]
 12361              	.LVL1436:
2871:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 12362              		.loc 1 2871 8 is_stmt 1 view .LVU4028
 12363 0e0c 15A8     		add	r0, sp, #84
 12364 0e0e 3146     		mov	r1, r6
 12365 0e10 FFF7FEFF 		bl	copyreg
 12366              	.LVL1437:
2872:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12367              		.loc 1 2872 8 view .LVU4029
 12368 0e14 E8B2     		uxtb	r0, r5
 12369 0e16 FFF7FEFF 		bl	sigma_val
 12370              	.LVL1438:
2873:src/display.c **** 	      copyreg(x, &z);
 12371              		.loc 1 2873 8 view .LVU4030
 12372 0e1a FFF7FEFF 		bl	is_dblmode
 12373              	.LVL1439:
 12374 0e1e 0021     		movs	r1, #0
 12375 0e20 0246     		mov	r2, r0
 12376 0e22 3046     		mov	r0, r6
 12377 0e24 FFF7FEFF 		bl	set_x
 12378              	.LVL1440:
2874:src/display.c **** 	      skip = 1;
 12379              		.loc 1 2874 8 view .LVU4031
 12380 0e28 15A9     		add	r1, sp, #84
 12381 0e2a 3046     		mov	r0, r6
 12382 0e2c FFF7FEFF 		bl	copyreg
 12383              	.LVL1441:
2875:src/display.c **** 	    }
 12384              		.loc 1 2875 8 view .LVU4032
2875:src/display.c **** 	    }
 12385              		.loc 1 2875 13 is_stmt 0 view .LVU4033
ARM GAS  /tmp/ccxUm1xs.s 			page 351


 12386 0e30 0125     		movs	r5, #1
 12387              	.LVL1442:
2875:src/display.c **** 	    }
 12388              		.loc 1 2875 13 view .LVU4034
 12389 0e32 02E5     		b	.L950
 12390              	.LVL1443:
 12391              	.L1234:
2875:src/display.c **** 	    }
 12392              		.loc 1 2875 13 view .LVU4035
 12393              	.LBE604:
 12394              	.LBB605:
2850:src/display.c **** 	      decimal64 z;
 12395              		.loc 1 2850 8 is_stmt 1 view .LVU4036
2851:src/display.c **** 
 12396              		.loc 1 2851 8 view .LVU4037
2853:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12397              		.loc 1 2853 8 view .LVU4038
 12398 0e34 0CA8     		add	r0, sp, #48
 12399 0e36 FFF7FEFF 		bl	getX
 12400              	.LVL1444:
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 12401              		.loc 1 2854 8 view .LVU4039
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 12402              		.loc 1 2854 11 is_stmt 0 view .LVU4040
 12403 0e3a C5F30723 		ubfx	r3, r5, #8, #8
 12404 0e3e 022B     		cmp	r3, #2
 12405 0e40 38D1     		bne	.L952
 12406              	.LBB606:
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12407              		.loc 1 2855 3 is_stmt 1 view .LVU4041
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12408              		.loc 1 2855 22 is_stmt 0 view .LVU4042
 12409 0e42 EDB2     		uxtb	r5, r5
 12410              	.LVL1445:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12411              		.loc 1 2856 3 is_stmt 1 view .LVU4043
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12412              		.loc 1 2856 6 is_stmt 0 view .LVU4044
 12413 0e44 9B2D     		cmp	r5, #155
 12414              	.LBB607:
2859:src/display.c **** 		}
 12415              		.loc 1 2859 5 view .LVU4045
 12416 0e46 15AF     		add	r7, sp, #84
 12417              	.LBE607:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12418              		.loc 1 2856 6 view .LVU4046
 12419 0e48 30D8     		bhi	.L953
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12420              		.loc 1 2856 28 discriminator 1 view .LVU4047
 12421 0e4a 1823     		movs	r3, #24
 12422 0e4c 224A     		ldr	r2, .L1259+20
 12423 0e4e 03FB05F3 		mul	r3, r3, r5
 12424 0e52 D358     		ldr	r3, [r2, r3]
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12425              		.loc 1 2856 23 discriminator 1 view .LVU4048
 12426 0e54 53B3     		cbz	r3, .L953
 12427              	.LBB608:
ARM GAS  /tmp/ccxUm1xs.s 			page 352


2857:src/display.c **** 		  update_speed(0);
 12428              		.loc 1 2857 5 is_stmt 1 view .LVU4049
 12429              	.LVL1446:
2858:src/display.c **** 		  fp(&r, &x);
 12430              		.loc 1 2858 20 view .LVU4050
2859:src/display.c **** 		}
 12431              		.loc 1 2859 5 view .LVU4051
 12432 0e56 0CA9     		add	r1, sp, #48
 12433 0e58 3846     		mov	r0, r7
 12434 0e5a 9847     		blx	r3
 12435              	.LVL1447:
 12436              	.L954:
2859:src/display.c **** 		}
 12437              		.loc 1 2859 5 is_stmt 0 view .LVU4052
 12438              	.LBE608:
 12439              	.LBE606:
2865:src/display.c **** 	      packed_from_number(&z, &r);
 12440              		.loc 1 2865 8 is_stmt 1 discriminator 1 view .LVU4053
 12441 0e5c 1F4A     		ldr	r2, .L1259+24
 12442 0e5e 3946     		mov	r1, r7
 12443 0e60 3846     		mov	r0, r7
 12444 0e62 FFF7FEFF 		bl	decNumberNormalize
 12445              	.LVL1448:
2866:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12446              		.loc 1 2866 8 discriminator 1 view .LVU4054
 12447 0e66 3946     		mov	r1, r7
 12448 0e68 06A8     		add	r0, sp, #24
 12449 0e6a FFF7FEFF 		bl	packed_from_number
 12450              	.LVL1449:
2867:src/display.c **** 	      skip = 1;
 12451              		.loc 1 2867 8 discriminator 1 view .LVU4055
 12452 0e6e 0022     		movs	r2, #0
 12453 0e70 06A8     		add	r0, sp, #24
 12454 0e72 1146     		mov	r1, r2
 12455 0e74 FFF7FEFF 		bl	set_x
 12456              	.LVL1450:
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12457              		.loc 1 2868 8 discriminator 1 view .LVU4056
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12458              		.loc 1 2868 13 is_stmt 0 discriminator 1 view .LVU4057
 12459 0e78 0125     		movs	r5, #1
 12460              	.LBE605:
 12461 0e7a DEE4     		b	.L950
 12462              	.LVL1451:
 12463              	.L948:
2844:src/display.c **** 	    else
 12464              		.loc 1 2844 8 is_stmt 1 view .LVU4058
 12465 0e7c 1848     		ldr	r0, .L1259+28
 12466 0e7e 0021     		movs	r1, #0
 12467 0e80 FFF7FEFF 		bl	set_digits_string
 12468              	.LVL1452:
2847:src/display.c **** 	  } else if (State2.runmode) {
 12469              		.loc 1 2847 11 is_stmt 0 view .LVU4059
 12470 0e84 0125     		movs	r5, #1
 12471              	.LVL1453:
2844:src/display.c **** 	    else
 12472              		.loc 1 2844 8 view .LVU4060
ARM GAS  /tmp/ccxUm1xs.s 			page 353


 12473 0e86 D8E4     		b	.L950
 12474              	.LVL1454:
 12475              	.L1009:
2844:src/display.c **** 	    else
 12476              		.loc 1 2844 8 view .LVU4061
 12477              	.LBE683:
2965:src/display.c **** 	  set_dot(STO_annun);
 12478              		.loc 1 2965 6 is_stmt 1 view .LVU4062
 12479 0e88 1648     		ldr	r0, .L1259+32
 12480              	.LVL1455:
2965:src/display.c **** 	  set_dot(STO_annun);
 12481              		.loc 1 2965 6 is_stmt 0 view .LVU4063
 12482 0e8a FFF7FEFF 		bl	set_status
 12483              	.LVL1456:
2965:src/display.c **** 	  set_dot(STO_annun);
 12484              		.loc 1 2965 6 view .LVU4064
 12485 0e8e 42E7     		b	.L1010
 12486              	.LVL1457:
 12487              	.L989:
 12488              	.LBB684:
 12489              	.LBB680:
2605:src/display.c **** 	      n -= 100;
 12490              		.loc 1 2605 8 is_stmt 1 view .LVU4065
2605:src/display.c **** 	      n -= 100;
 12491              		.loc 1 2605 14 is_stmt 0 view .LVU4066
 12492 0e90 3123     		movs	r3, #49
 12493 0e92 4370     		strb	r3, [r0, #1]
2606:src/display.c **** 	    }
 12494              		.loc 1 2606 8 is_stmt 1 view .LVU4067
2606:src/display.c **** 	    }
 12495              		.loc 1 2606 10 is_stmt 0 view .LVU4068
 12496 0e94 AAF1640A 		sub	r10, r10, #100
 12497              	.LVL1458:
2605:src/display.c **** 	      n -= 100;
 12498              		.loc 1 2605 11 view .LVU4069
 12499 0e98 0230     		adds	r0, r0, #2
 12500              	.LVL1459:
 12501              	.L988:
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12502              		.loc 1 2609 4 is_stmt 1 view .LVU4070
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12503              		.loc 1 2609 7 is_stmt 0 view .LVU4071
 12504 0e9a BAF1630F 		cmp	r10, #99
 12505 0e9e ABDD     		ble	.L990
2612:src/display.c **** 	  set_status(buf);
 12506              		.loc 1 2612 6 is_stmt 1 view .LVU4072
 12507              	.LVL1460:
2612:src/display.c **** 	  set_status(buf);
 12508              		.loc 1 2612 22 is_stmt 0 view .LVU4073
 12509 0ea0 114B     		ldr	r3, .L1259+36
 12510 0ea2 5344     		add	r3, r3, r10
2612:src/display.c **** 	  set_status(buf);
 12511              		.loc 1 2612 12 view .LVU4074
 12512 0ea4 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12513 0ea8 0370     		strb	r3, [r0]
 12514 0eaa A9E7     		b	.L992
 12515              	.LVL1461:
ARM GAS  /tmp/ccxUm1xs.s 			page 354


 12516              	.L953:
2612:src/display.c **** 	  set_status(buf);
 12517              		.loc 1 2612 12 view .LVU4075
 12518              	.LBE680:
 12519              	.LBE684:
 12520              	.LBB685:
 12521              	.LBB610:
 12522              	.LBB609:
2862:src/display.c **** 	      } else
 12523              		.loc 1 2862 5 is_stmt 1 view .LVU4076
 12524 0eac 3846     		mov	r0, r7
 12525 0eae FFF7FEFF 		bl	set_NaN
 12526              	.LVL1462:
 12527 0eb2 D3E7     		b	.L954
 12528              	.LVL1463:
 12529              	.L952:
2862:src/display.c **** 	      } else
 12530              		.loc 1 2862 5 is_stmt 0 view .LVU4077
 12531              	.LBE609:
2864:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12532              		.loc 1 2864 3 is_stmt 1 view .LVU4078
 12533 0eb4 15AF     		add	r7, sp, #84
 12534 0eb6 0CAA     		add	r2, sp, #48
 12535 0eb8 05F07F01 		and	r1, r5, #127
 12536 0ebc 3846     		mov	r0, r7
 12537 0ebe FFF7FEFF 		bl	do_conv
 12538              	.LVL1464:
 12539 0ec2 CBE7     		b	.L954
 12540              	.L1260:
 12541              		.align	2
 12542              	.L1259:
 12543 0ec4 6C000000 		.word	.LC37
 12544 0ec8 64000000 		.word	.LC36
 12545 0ecc 00000000 		.word	main_ram
 12546 0ed0 A0000000 		.word	.LC42
 12547 0ed4 00000000 		.word	StackBase
 12548 0ed8 00000000 		.word	monfuncs
 12549 0edc 00000000 		.word	Ctx
 12550 0ee0 40000000 		.word	.LC32
 12551 0ee4 A8000000 		.word	.LC43
 12552 0ee8 BC000000 		.word	.LC30
 12553              	.LBE610:
 12554              	.LBE685:
 12555              		.cfi_endproc
 12556              	.LFE34:
 12558              		.section	.text.frozen_display,"ax",%progbits
 12559              		.align	1
 12560              		.p2align 2,,3
 12561              		.global	frozen_display
 12562              		.syntax unified
 12563              		.thumb
 12564              		.thumb_func
 12565              		.fpu fpv4-sp-d16
 12567              	frozen_display:
 12568              	.LFB35:
3436:src/display.c **** 	State2.disp_freeze = 0;
 12569              		.loc 1 3436 7 view -0
ARM GAS  /tmp/ccxUm1xs.s 			page 355


 12570              		.cfi_startproc
 12571              		@ args = 0, pretend = 0, frame = 0
 12572              		@ frame_needed = 0, uses_anonymous_args = 0
3437:src/display.c **** 	display();
 12573              		.loc 1 3437 2 view .LVU4080
3436:src/display.c **** 	State2.disp_freeze = 0;
 12574              		.loc 1 3436 7 is_stmt 0 view .LVU4081
 12575 0000 10B5     		push	{r4, lr}
 12576              		.cfi_def_cfa_offset 8
 12577              		.cfi_offset 4, -8
 12578              		.cfi_offset 14, -4
3437:src/display.c **** 	display();
 12579              		.loc 1 3437 21 view .LVU4082
 12580 0002 064C     		ldr	r4, .L1263
 12581 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12582 0006 6FF30413 		bfc	r3, #4, #1
 12583 000a E375     		strb	r3, [r4, #23]
3438:src/display.c **** 	State2.disp_freeze = 1;
 12584              		.loc 1 3438 2 is_stmt 1 view .LVU4083
 12585 000c FFF7FEFF 		bl	display
 12586              	.LVL1465:
3439:src/display.c ****       }
 12587              		.loc 1 3439 2 view .LVU4084
3439:src/display.c ****       }
 12588              		.loc 1 3439 21 is_stmt 0 view .LVU4085
 12589 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12590 0012 43F01003 		orr	r3, r3, #16
 12591 0016 E375     		strb	r3, [r4, #23]
3440:src/display.c **** 
 12592              		.loc 1 3440 7 view .LVU4086
 12593 0018 10BD     		pop	{r4, pc}
 12594              	.L1264:
 12595 001a 00BF     		.align	2
 12596              	.L1263:
 12597 001c 00000000 		.word	StateWhileOn
 12598              		.cfi_endproc
 12599              	.LFE35:
 12601              		.section	.text.message,"ax",%progbits
 12602              		.align	1
 12603              		.p2align 2,,3
 12604              		.global	message
 12605              		.syntax unified
 12606              		.thumb
 12607              		.thumb_func
 12608              		.fpu fpv4-sp-d16
 12610              	message:
 12611              	.LVL1466:
 12612              	.LFB46:
3657:src/display.c **** 	State2.disp_freeze = 0;
 12613              		.loc 1 3657 7 is_stmt 1 view -0
 12614              		.cfi_startproc
 12615              		@ args = 0, pretend = 0, frame = 0
 12616              		@ frame_needed = 0, uses_anonymous_args = 0
3658:src/display.c **** 	State2.disp_small = 0;
 12617              		.loc 1 3658 2 view .LVU4088
3659:src/display.c **** 	WasDataEntry = 0;
 12618              		.loc 1 3659 2 view .LVU4089
ARM GAS  /tmp/ccxUm1xs.s 			page 356


3659:src/display.c **** 	WasDataEntry = 0;
 12619              		.loc 1 3659 20 is_stmt 0 view .LVU4090
 12620 0000 174A     		ldr	r2, .L1275
3657:src/display.c **** 	State2.disp_freeze = 0;
 12621              		.loc 1 3657 7 view .LVU4091
 12622 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12623              		.cfi_def_cfa_offset 24
 12624              		.cfi_offset 3, -24
 12625              		.cfi_offset 4, -20
 12626              		.cfi_offset 5, -16
 12627              		.cfi_offset 6, -12
 12628              		.cfi_offset 7, -8
 12629              		.cfi_offset 14, -4
3659:src/display.c **** 	WasDataEntry = 0;
 12630              		.loc 1 3659 20 view .LVU4092
 12631 0004 D38A     		ldrh	r3, [r2, #22]
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12632              		.loc 1 3660 15 view .LVU4093
 12633 0006 174E     		ldr	r6, .L1275+4
3659:src/display.c **** 	WasDataEntry = 0;
 12634              		.loc 1 3659 20 view .LVU4094
 12635 0008 23F48453 		bic	r3, r3, #4224
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12636              		.loc 1 3660 15 view .LVU4095
 12637 000c 0027     		movs	r7, #0
3659:src/display.c **** 	WasDataEntry = 0;
 12638              		.loc 1 3659 20 view .LVU4096
 12639 000e D382     		strh	r3, [r2, #22]	@ movhi
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12640              		.loc 1 3660 2 is_stmt 1 view .LVU4097
3661:src/display.c **** 	  // Complete redraw necessary
 12641              		.loc 1 3661 5 is_stmt 0 view .LVU4098
 12642 0010 9B05     		lsls	r3, r3, #22
3657:src/display.c **** 	State2.disp_freeze = 0;
 12643              		.loc 1 3657 7 view .LVU4099
 12644 0012 0546     		mov	r5, r0
 12645 0014 0C46     		mov	r4, r1
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12646              		.loc 1 3660 15 view .LVU4100
 12647 0016 3760     		str	r7, [r6]
3661:src/display.c **** 	  // Complete redraw necessary
 12648              		.loc 1 3661 2 is_stmt 1 view .LVU4101
3661:src/display.c **** 	  // Complete redraw necessary
 12649              		.loc 1 3661 5 is_stmt 0 view .LVU4102
 12650 0018 12D5     		bpl	.L1266
3661:src/display.c **** 	  // Complete redraw necessary
 12651              		.loc 1 3661 27 discriminator 1 view .LVU4103
 12652 001a D1B1     		cbz	r1, .L1274
 12653              	.L1267:
3668:src/display.c **** 	    ShowRPN = 0;
 12654              		.loc 1 3668 6 is_stmt 1 view .LVU4104
 12655 001c FFF7FEFF 		bl	reset_disp
 12656              	.LVL1467:
3669:src/display.c **** 	    set_annunciators();
 12657              		.loc 1 3669 6 view .LVU4105
3669:src/display.c **** 	    set_annunciators();
 12658              		.loc 1 3669 14 is_stmt 0 view .LVU4106
ARM GAS  /tmp/ccxUm1xs.s 			page 357


 12659 0020 114B     		ldr	r3, .L1275+8
 12660 0022 0026     		movs	r6, #0
 12661 0024 1E60     		str	r6, [r3]
3670:src/display.c **** 	    set_digits_string( str2, 0 );
 12662              		.loc 1 3670 6 is_stmt 1 view .LVU4107
 12663 0026 FFF7FEFF 		bl	set_annunciators
 12664              	.LVL1468:
3671:src/display.c **** 	  }
 12665              		.loc 1 3671 6 view .LVU4108
 12666 002a 3146     		mov	r1, r6
 12667 002c 2046     		mov	r0, r4
 12668 002e FFF7FEFF 		bl	set_digits_string
 12669              	.LVL1469:
3673:src/display.c **** 	  finish_display();// message
 12670              		.loc 1 3673 4 view .LVU4109
 12671 0032 2846     		mov	r0, r5
 12672 0034 FFF7FEFF 		bl	set_status
 12673              	.LVL1470:
3674:src/display.c **** 	}
 12674              		.loc 1 3674 4 view .LVU4110
3676:src/display.c **** 
 12675              		.loc 1 3676 7 is_stmt 0 view .LVU4111
 12676 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12677              		.cfi_remember_state
 12678              		.cfi_restore 14
 12679              		.cfi_restore 7
 12680              		.cfi_restore 6
 12681              		.cfi_restore 5
 12682              		.cfi_restore 4
 12683              		.cfi_restore 3
 12684              		.cfi_def_cfa_offset 0
 12685              	.LVL1471:
3674:src/display.c **** 	}
 12686              		.loc 1 3674 4 view .LVU4112
 12687 003c FFF7FEBF 		b	finish_display
 12688              	.LVL1472:
 12689              	.L1266:
 12690              		.cfi_restore_state
3667:src/display.c **** 	    reset_disp();
 12691              		.loc 1 3667 4 is_stmt 1 view .LVU4113
3667:src/display.c **** 	    reset_disp();
 12692              		.loc 1 3667 7 is_stmt 0 view .LVU4114
 12693 0040 0029     		cmp	r1, #0
 12694 0042 EBD1     		bne	.L1267
3673:src/display.c **** 	  finish_display();// message
 12695              		.loc 1 3673 4 is_stmt 1 view .LVU4115
 12696 0044 2846     		mov	r0, r5
 12697              	.LVL1473:
3673:src/display.c **** 	  finish_display();// message
 12698              		.loc 1 3673 4 is_stmt 0 view .LVU4116
 12699 0046 FFF7FEFF 		bl	set_status
 12700              	.LVL1474:
3674:src/display.c **** 	}
 12701              		.loc 1 3674 4 is_stmt 1 view .LVU4117
3676:src/display.c **** 
 12702              		.loc 1 3676 7 is_stmt 0 view .LVU4118
 12703 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccxUm1xs.s 			page 358


 12704              		.cfi_remember_state
 12705              		.cfi_restore 14
 12706              		.cfi_restore 7
 12707              		.cfi_restore 6
 12708              		.cfi_restore 5
 12709              		.cfi_restore 4
 12710              		.cfi_restore 3
 12711              		.cfi_def_cfa_offset 0
 12712              	.LVL1475:
3674:src/display.c **** 	}
 12713              		.loc 1 3674 4 view .LVU4119
 12714 004e FFF7FEBF 		b	finish_display
 12715              	.LVL1476:
 12716              	.L1274:
 12717              		.cfi_restore_state
3663:src/display.c **** 	  display();
 12718              		.loc 1 3663 4 is_stmt 1 view .LVU4120
3663:src/display.c **** 	  display();
 12719              		.loc 1 3663 12 is_stmt 0 view .LVU4121
 12720 0052 064B     		ldr	r3, .L1275+12
 12721 0054 1860     		str	r0, [r3]
3664:src/display.c **** 	}
 12722              		.loc 1 3664 4 is_stmt 1 view .LVU4122
3676:src/display.c **** 
 12723              		.loc 1 3676 7 is_stmt 0 view .LVU4123
 12724 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12725              		.cfi_restore 14
 12726              		.cfi_restore 7
 12727              		.cfi_restore 6
 12728              		.cfi_restore 5
 12729              		.cfi_restore 4
 12730              		.cfi_restore 3
 12731              		.cfi_def_cfa_offset 0
3664:src/display.c **** 	}
 12732              		.loc 1 3664 4 view .LVU4124
 12733 005a FFF7FEBF 		b	display
 12734              	.LVL1477:
 12735              	.L1276:
3664:src/display.c **** 	}
 12736              		.loc 1 3664 4 view .LVU4125
 12737 005e 00BF     		.align	2
 12738              	.L1275:
 12739 0060 00000000 		.word	StateWhileOn
 12740 0064 00000000 		.word	WasDataEntry
 12741 0068 00000000 		.word	ShowRPN
 12742 006c 00000000 		.word	DispMsg
 12743              		.cfi_endproc
 12744              	.LFE46:
 12746              		.section	.text.error_message,"ax",%progbits
 12747              		.align	1
 12748              		.p2align 2,,3
 12749              		.global	error_message
 12750              		.syntax unified
 12751              		.thumb
 12752              		.thumb_func
 12753              		.fpu fpv4-sp-d16
 12755              	error_message:
ARM GAS  /tmp/ccxUm1xs.s 			page 359


 12756              	.LVL1478:
 12757              	.LFB1:
 136:src/display.c **** #define MSG1(top) top "\0"
 12758              		.loc 1 136 1 is_stmt 1 view -0
 12759              		.cfi_startproc
 12760              		@ args = 0, pretend = 0, frame = 0
 12761              		@ frame_needed = 0, uses_anonymous_args = 0
 141:src/display.c ****     {
 12762              		.loc 1 141 3 view .LVU4127
 202:src/display.c ****     {
 12763              		.loc 1 202 3 view .LVU4128
 240:src/display.c ****     const char *p = error_table[e];
 12764              		.loc 1 240 3 view .LVU4129
 240:src/display.c ****     const char *p = error_table[e];
 12765              		.loc 1 240 21 is_stmt 0 view .LVU4130
 12766 0000 364B     		ldr	r3, .L1303
 12767 0002 1B68     		ldr	r3, [r3]
 12768 0004 0343     		orrs	r3, r0, r3
 12769 0006 00D1     		bne	.L1299
 12770 0008 7047     		bx	lr
 12771              	.L1299:
 12772              	.LBB686:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12773              		.loc 1 241 5 is_stmt 1 view .LVU4131
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12774              		.loc 1 241 17 is_stmt 0 view .LVU4132
 12775 000a 354B     		ldr	r3, .L1303+4
 12776              	.LBE686:
 136:src/display.c **** #define MSG1(top) top "\0"
 12777              		.loc 1 136 1 view .LVU4133
 12778 000c 70B5     		push	{r4, r5, r6, lr}
 12779              		.cfi_def_cfa_offset 16
 12780              		.cfi_offset 4, -16
 12781              		.cfi_offset 5, -12
 12782              		.cfi_offset 6, -8
 12783              		.cfi_offset 14, -4
 12784              	.LBB698:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12785              		.loc 1 241 17 view .LVU4134
 12786 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12787              	.LVL1479:
 242:src/display.c ****     if (*q == '\0')
 12788              		.loc 1 242 5 is_stmt 1 view .LVU4135
 12789 0012 0446     		mov	r4, r0
 242:src/display.c ****     if (*q == '\0')
 12790              		.loc 1 242 21 is_stmt 0 view .LVU4136
 12791 0014 0021     		movs	r1, #0
 12792 0016 3046     		mov	r0, r6
 12793              	.LVL1480:
 242:src/display.c ****     if (*q == '\0')
 12794              		.loc 1 242 21 view .LVU4137
 12795 0018 FFF7FEFF 		bl	find_char
 12796              	.LVL1481:
 243:src/display.c ****       q = S7_ERROR;
 12797              		.loc 1 243 5 is_stmt 1 view .LVU4138
 243:src/display.c ****       q = S7_ERROR;
 12798              		.loc 1 243 9 is_stmt 0 view .LVU4139
ARM GAS  /tmp/ccxUm1xs.s 			page 360


 12799 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 243:src/display.c ****       q = S7_ERROR;
 12800              		.loc 1 243 8 view .LVU4140
 12801 001e 002B     		cmp	r3, #0
 12802 0020 3CD0     		beq	.L1288
 245:src/display.c ****       DispMsg = p;
 12803              		.loc 1 245 8 view .LVU4141
 12804 0022 582B     		cmp	r3, #88
 242:src/display.c ****     if (*q == '\0')
 12805              		.loc 1 242 17 view .LVU4142
 12806 0024 00F10105 		add	r5, r0, #1
 12807              	.LVL1482:
 245:src/display.c ****       DispMsg = p;
 12808              		.loc 1 245 5 is_stmt 1 view .LVU4143
 245:src/display.c ****       DispMsg = p;
 12809              		.loc 1 245 8 is_stmt 0 view .LVU4144
 12810 0028 39D1     		bne	.L1280
 246:src/display.c ****       frozen_display();
 12811              		.loc 1 246 7 is_stmt 1 view .LVU4145
 12812              	.LBB687:
 12813              	.LBB688:
3437:src/display.c **** 	display();
 12814              		.loc 1 3437 21 is_stmt 0 view .LVU4146
 12815 002a 2E4C     		ldr	r4, .L1303+8
 12816              	.LVL1483:
3437:src/display.c **** 	display();
 12817              		.loc 1 3437 21 view .LVU4147
 12818              	.LBE688:
 12819              	.LBE687:
 246:src/display.c ****       frozen_display();
 12820              		.loc 1 246 15 view .LVU4148
 12821 002c 2E4A     		ldr	r2, .L1303+12
 12822              	.LBB692:
 12823              	.LBB689:
3437:src/display.c **** 	display();
 12824              		.loc 1 3437 21 view .LVU4149
 12825 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12826              	.LBE689:
 12827              	.LBE692:
 246:src/display.c ****       frozen_display();
 12828              		.loc 1 246 15 view .LVU4150
 12829 0030 1660     		str	r6, [r2]
 247:src/display.c ****     }
 12830              		.loc 1 247 7 is_stmt 1 view .LVU4151
 12831              	.LBB693:
 12832              	.LBI687:
3435:src/display.c ****       {
 12833              		.loc 1 3435 12 view .LVU4152
 12834              	.LBB690:
3437:src/display.c **** 	display();
 12835              		.loc 1 3437 2 view .LVU4153
3437:src/display.c **** 	display();
 12836              		.loc 1 3437 21 is_stmt 0 view .LVU4154
 12837 0032 6FF30413 		bfc	r3, #4, #1
 12838 0036 E375     		strb	r3, [r4, #23]
3438:src/display.c **** 	State2.disp_freeze = 1;
 12839              		.loc 1 3438 2 is_stmt 1 view .LVU4155
ARM GAS  /tmp/ccxUm1xs.s 			page 361


 12840 0038 FFF7FEFF 		bl	display
 12841              	.LVL1484:
3439:src/display.c ****       }
 12842              		.loc 1 3439 2 view .LVU4156
 12843              	.LBE690:
 12844              	.LBE693:
 261:src/display.c ****       if (*q == 'X')
 12845              		.loc 1 261 5 view .LVU4157
 12846              	.LBB694:
 12847              	.LBB691:
3439:src/display.c ****       }
 12848              		.loc 1 3439 21 is_stmt 0 view .LVU4158
 12849 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12850 003e 43F01003 		orr	r3, r3, #16
 12851 0042 E375     		strb	r3, [r4, #23]
 12852              	.LBE691:
 12853              	.LBE694:
 261:src/display.c ****       if (*q == 'X')
 12854              		.loc 1 261 9 view .LVU4159
 12855 0044 294B     		ldr	r3, .L1303+16
 261:src/display.c ****       if (*q == 'X')
 12856              		.loc 1 261 8 view .LVU4160
 12857 0046 1B68     		ldr	r3, [r3]
 12858 0048 002B     		cmp	r3, #0
 12859 004a 3ED0     		beq	.L1277
 12860              	.LVL1485:
 12861              	.L1302:
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12862              		.loc 1 262 7 is_stmt 1 view .LVU4161
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12863              		.loc 1 262 10 is_stmt 0 view .LVU4162
 12864 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12865 004e 582B     		cmp	r3, #88
 12866 0050 3CD0     		beq	.L1300
 265:src/display.c **** 	print_line(p, 0);
 12867              		.loc 1 265 2 is_stmt 1 view .LVU4163
 12868 0052 0020     		movs	r0, #0
 12869 0054 FFF7FEFF 		bl	print_tab
 12870              	.LVL1486:
 266:src/display.c **** 	print(' ');
 12871              		.loc 1 266 2 view .LVU4164
 12872 0058 3046     		mov	r0, r6
 12873 005a 0021     		movs	r1, #0
 12874 005c FFF7FEFF 		bl	print_line
 12875              	.LVL1487:
 267:src/display.c **** 	while (*q != '\0') {
 12876              		.loc 1 267 2 view .LVU4165
 12877 0060 2020     		movs	r0, #32
 12878 0062 FFF7FEFF 		bl	print
 12879              	.LVL1488:
 268:src/display.c **** 	  int c = *q;
 12880              		.loc 1 268 2 view .LVU4166
 268:src/display.c **** 	  int c = *q;
 12881              		.loc 1 268 8 view .LVU4167
 268:src/display.c **** 	  int c = *q;
 12882              		.loc 1 268 9 is_stmt 0 view .LVU4168
 12883 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
ARM GAS  /tmp/ccxUm1xs.s 			page 362


 268:src/display.c **** 	  int c = *q;
 12884              		.loc 1 268 8 view .LVU4169
 12885 0068 73B9     		cbnz	r3, .L1284
 12886              	.L1287:
 277:src/display.c ****       }
 12887              		.loc 1 277 2 is_stmt 1 view .LVU4170
 12888              	.LBE698:
 282:src/display.c **** 
 12889              		.loc 1 282 1 is_stmt 0 view .LVU4171
 12890 006a BDE87040 		pop	{r4, r5, r6, lr}
 12891              		.cfi_remember_state
 12892              		.cfi_restore 14
 12893              		.cfi_restore 6
 12894              		.cfi_restore 5
 12895              		.cfi_restore 4
 12896              		.cfi_def_cfa_offset 0
 12897              	.LVL1489:
 12898              	.LBB699:
 277:src/display.c ****       }
 12899              		.loc 1 277 2 view .LVU4172
 12900 006e 0020     		movs	r0, #0
 12901 0070 FFF7FEBF 		b	print_advance
 12902              	.LVL1490:
 12903              	.L1301:
 12904              		.cfi_restore_state
 12905              	.LBB695:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12906              		.loc 1 272 4 view .LVU4173
 12907 0074 FFF7FEFF 		bl	print
 12908              	.LVL1491:
 273:src/display.c **** 	    ++q;
 12909              		.loc 1 273 4 is_stmt 1 view .LVU4174
 274:src/display.c **** 	  ++q;
 12910              		.loc 1 274 6 view .LVU4175
 273:src/display.c **** 	    ++q;
 12911              		.loc 1 273 7 is_stmt 0 view .LVU4176
 12912 0078 6D2C     		cmp	r4, #109
 274:src/display.c **** 	  ++q;
 12913              		.loc 1 274 6 view .LVU4177
 12914 007a 0CBF     		ite	eq
 12915 007c 691C     		addeq	r1, r5, #1
 12916              	.LVL1492:
 274:src/display.c **** 	  ++q;
 12917              		.loc 1 274 6 view .LVU4178
 12918 007e 2946     		movne	r1, r5
 12919              	.LVL1493:
 12920              	.L1286:
 275:src/display.c **** 	}
 12921              		.loc 1 275 4 is_stmt 1 view .LVU4179
 12922              	.LBE695:
 268:src/display.c **** 	  int c = *q;
 12923              		.loc 1 268 9 is_stmt 0 view .LVU4180
 12924 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12925              	.LBB696:
 275:src/display.c **** 	}
 12926              		.loc 1 275 4 view .LVU4181
 12927 0082 4D1C     		adds	r5, r1, #1
ARM GAS  /tmp/ccxUm1xs.s 			page 363


 12928              	.LVL1494:
 275:src/display.c **** 	}
 12929              		.loc 1 275 4 view .LVU4182
 12930              	.LBE696:
 268:src/display.c **** 	  int c = *q;
 12931              		.loc 1 268 8 is_stmt 1 view .LVU4183
 12932 0084 002B     		cmp	r3, #0
 12933 0086 F0D0     		beq	.L1287
 12934              	.LVL1495:
 12935              	.L1284:
 12936              	.LBB697:
 269:src/display.c **** 	  if (c >= 'A')
 12937              		.loc 1 269 4 view .LVU4184
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12938              		.loc 1 270 4 view .LVU4185
 271:src/display.c **** 	  print(c);
 12939              		.loc 1 271 6 view .LVU4186
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12940              		.loc 1 272 4 view .LVU4187
 12941 0088 43F06004 		orr	r4, r3, #96
 12942              	.LVL1496:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12943              		.loc 1 272 4 view .LVU4188
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12944              		.loc 1 270 7 is_stmt 0 view .LVU4189
 12945 008c 402B     		cmp	r3, #64
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12946              		.loc 1 272 4 view .LVU4190
 12947 008e 2046     		mov	r0, r4
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12948              		.loc 1 270 7 view .LVU4191
 12949 0090 F0DC     		bgt	.L1301
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12950              		.loc 1 272 4 view .LVU4192
 12951 0092 1846     		mov	r0, r3
 12952 0094 FFF7FEFF 		bl	print
 12953              	.LVL1497:
 273:src/display.c **** 	    ++q;
 12954              		.loc 1 273 4 is_stmt 1 view .LVU4193
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12955              		.loc 1 272 4 is_stmt 0 view .LVU4194
 12956 0098 2946     		mov	r1, r5
 12957 009a F1E7     		b	.L1286
 12958              	.LVL1498:
 12959              	.L1288:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12960              		.loc 1 272 4 view .LVU4195
 12961              	.LBE697:
 244:src/display.c ****     if (*q == 'X') {
 12962              		.loc 1 244 9 view .LVU4196
 12963 009c 144D     		ldr	r5, .L1303+20
 12964              	.L1280:
 12965              	.LVL1499:
 254:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12966              		.loc 1 254 7 is_stmt 1 view .LVU4197
 12967 009e 2946     		mov	r1, r5
 12968 00a0 3046     		mov	r0, r6
ARM GAS  /tmp/ccxUm1xs.s 			page 364


 12969 00a2 FFF7FEFF 		bl	message
 12970              	.LVL1500:
 255:src/display.c **** #ifndef REALBUILD
 12971              		.loc 1 255 7 view .LVU4198
 255:src/display.c **** #ifndef REALBUILD
 12972              		.loc 1 255 26 is_stmt 0 view .LVU4199
 12973 00a6 0F4B     		ldr	r3, .L1303+8
 257:src/display.c **** #endif
 12974              		.loc 1 257 7 view .LVU4200
 12975 00a8 1249     		ldr	r1, .L1303+24
 255:src/display.c **** #ifndef REALBUILD
 12976              		.loc 1 255 26 view .LVU4201
 12977 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 257:src/display.c **** #endif
 12978              		.loc 1 257 7 view .LVU4202
 12979 00ac 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12980 00b0 1148     		ldr	r0, .L1303+28
 255:src/display.c **** #ifndef REALBUILD
 12981              		.loc 1 255 31 view .LVU4203
 12982 00b2 003C     		subs	r4, r4, #0
 255:src/display.c **** #ifndef REALBUILD
 12983              		.loc 1 255 31 view .LVU4204
 12984 00b4 18BF     		it	ne
 12985 00b6 0124     		movne	r4, #1
 12986              	.LVL1501:
 255:src/display.c **** #ifndef REALBUILD
 12987              		.loc 1 255 26 view .LVU4205
 12988 00b8 64F30412 		bfi	r2, r4, #4, #1
 12989 00bc DA75     		strb	r2, [r3, #23]
 257:src/display.c **** #endif
 12990              		.loc 1 257 7 is_stmt 1 view .LVU4206
 12991 00be FFF7FEFF 		bl	scopy
 12992              	.LVL1502:
 261:src/display.c ****       if (*q == 'X')
 12993              		.loc 1 261 5 view .LVU4207
 261:src/display.c ****       if (*q == 'X')
 12994              		.loc 1 261 9 is_stmt 0 view .LVU4208
 12995 00c2 0A4B     		ldr	r3, .L1303+16
 261:src/display.c ****       if (*q == 'X')
 12996              		.loc 1 261 8 view .LVU4209
 12997 00c4 1B68     		ldr	r3, [r3]
 12998 00c6 002B     		cmp	r3, #0
 12999 00c8 C0D1     		bne	.L1302
 13000              	.LVL1503:
 13001              	.L1277:
 261:src/display.c ****       if (*q == 'X')
 13002              		.loc 1 261 8 view .LVU4210
 13003              	.LBE699:
 282:src/display.c **** 
 13004              		.loc 1 282 1 view .LVU4211
 13005 00ca 70BD     		pop	{r4, r5, r6, pc}
 13006              	.LVL1504:
 13007              	.L1300:
 13008              	.LBB700:
 263:src/display.c ****       else {
 13009              		.loc 1 263 2 is_stmt 1 view .LVU4212
 13010 00cc 3146     		mov	r1, r6
ARM GAS  /tmp/ccxUm1xs.s 			page 365


 13011 00ce 0022     		movs	r2, #0
 13012              	.LBE700:
 282:src/display.c **** 
 13013              		.loc 1 282 1 is_stmt 0 view .LVU4213
 13014 00d0 BDE87040 		pop	{r4, r5, r6, lr}
 13015              		.cfi_restore 14
 13016              		.cfi_restore 6
 13017              		.cfi_restore 5
 13018              		.cfi_restore 4
 13019              		.cfi_def_cfa_offset 0
 13020              	.LVL1505:
 13021              	.LBB701:
 263:src/display.c ****       else {
 13022              		.loc 1 263 2 view .LVU4214
 13023 00d4 6420     		movs	r0, #100
 13024 00d6 FFF7FEBF 		b	print_reg
 13025              	.LVL1506:
 13026              	.L1304:
 263:src/display.c ****       else {
 13027              		.loc 1 263 2 view .LVU4215
 13028 00da 00BF     		.align	2
 13029              	.L1303:
 13030 00dc 00000000 		.word	Running
 13031 00e0 00000000 		.word	.LANCHOR27
 13032 00e4 00000000 		.word	StateWhileOn
 13033 00e8 00000000 		.word	DispMsg
 13034 00ec 00000000 		.word	Tracing
 13035 00f0 00000000 		.word	.LANCHOR26
 13036 00f4 00000000 		.word	.LANCHOR28
 13037 00f8 00000000 		.word	LastDisplayedNumber
 13038              	.LBE701:
 13039              		.cfi_endproc
 13040              	.LFE1:
 13042              		.section	.text.stopwatch_message,"ax",%progbits
 13043              		.align	1
 13044              		.p2align 2,,3
 13045              		.global	stopwatch_message
 13046              		.syntax unified
 13047              		.thumb
 13048              		.thumb_func
 13049              		.fpu fpv4-sp-d16
 13051              	stopwatch_message:
 13052              	.LVL1507:
 13053              	.LFB48:
3689:src/display.c **** #ifndef REALBUILD
 13054              		.loc 1 3689 7 is_stmt 1 view -0
 13055              		.cfi_startproc
 13056              		@ args = 0, pretend = 0, frame = 0
 13057              		@ frame_needed = 0, uses_anonymous_args = 0
3691:src/display.c **** #endif
 13058              		.loc 1 3691 2 view .LVU4217
3689:src/display.c **** #ifndef REALBUILD
 13059              		.loc 1 3689 7 is_stmt 0 view .LVU4218
 13060 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 13061              		.cfi_def_cfa_offset 24
 13062              		.cfi_offset 3, -24
 13063              		.cfi_offset 4, -20
ARM GAS  /tmp/ccxUm1xs.s 			page 366


 13064              		.cfi_offset 5, -16
 13065              		.cfi_offset 6, -12
 13066              		.cfi_offset 7, -8
 13067              		.cfi_offset 14, -4
3689:src/display.c **** #ifndef REALBUILD
 13068              		.loc 1 3689 7 view .LVU4219
 13069 0002 0F46     		mov	r7, r1
 13070 0004 1446     		mov	r4, r2
3691:src/display.c **** #endif
 13071              		.loc 1 3691 2 view .LVU4220
 13072 0006 2021     		movs	r1, #32
 13073              	.LVL1508:
3691:src/display.c **** #endif
 13074              		.loc 1 3691 2 view .LVU4221
 13075 0008 1922     		movs	r2, #25
 13076              	.LVL1509:
3689:src/display.c **** #ifndef REALBUILD
 13077              		.loc 1 3689 7 view .LVU4222
 13078 000a 0646     		mov	r6, r0
3691:src/display.c **** #endif
 13079              		.loc 1 3691 2 view .LVU4223
 13080 000c 1248     		ldr	r0, .L1316
 13081              	.LVL1510:
3689:src/display.c **** #ifndef REALBUILD
 13082              		.loc 1 3689 7 view .LVU4224
 13083 000e 1D46     		mov	r5, r3
3691:src/display.c **** #endif
 13084              		.loc 1 3691 2 view .LVU4225
 13085 0010 FFF7FEFF 		bl	xset
 13086              	.LVL1511:
3693:src/display.c **** 	set_dot(DEG);
 13087              		.loc 1 3693 2 is_stmt 1 view .LVU4226
 13088 0014 FFF7FEFF 		bl	reset_disp
 13089              	.LVL1512:
3694:src/display.c **** 	set_digits_string( str2, 0 );
 13090              		.loc 1 3694 2 view .LVU4227
 13091 0018 8C20     		movs	r0, #140
 13092 001a FFF7FEFF 		bl	set_dot
 13093              	.LVL1513:
3695:src/display.c **** 	State2.disp_small = force_small;
 13094              		.loc 1 3695 2 view .LVU4228
 13095 001e 3846     		mov	r0, r7
 13096 0020 0021     		movs	r1, #0
 13097 0022 FFF7FEFF 		bl	set_digits_string
 13098              	.LVL1514:
3696:src/display.c **** 	if( exponent!=NULL ) {
 13099              		.loc 1 3696 2 view .LVU4229
3696:src/display.c **** 	if( exponent!=NULL ) {
 13100              		.loc 1 3696 20 is_stmt 0 view .LVU4230
 13101 0026 0D4B     		ldr	r3, .L1316+4
 13102 0028 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 13103 002a 64F3C712 		bfi	r2, r4, #7, #1
 13104              	.LVL1515:
3696:src/display.c **** 	if( exponent!=NULL ) {
 13105              		.loc 1 3696 20 view .LVU4231
 13106 002e 9A75     		strb	r2, [r3, #22]
3697:src/display.c **** 	  stopwatch_exponent(exponent);
ARM GAS  /tmp/ccxUm1xs.s 			page 367


 13107              		.loc 1 3697 2 is_stmt 1 view .LVU4232
3697:src/display.c **** 	  stopwatch_exponent(exponent);
 13108              		.loc 1 3697 4 is_stmt 0 view .LVU4233
 13109 0030 55B1     		cbz	r5, .L1306
 13110              	.LVL1516:
 13111              	.LBB702:
 13112              	.LBB703:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13113              		.loc 1 3682 9 is_stmt 1 view .LVU4234
 13114 0032 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13115              		.loc 1 3682 2 is_stmt 0 view .LVU4235
 13116 0034 41B1     		cbz	r1, .L1306
3681:src/display.c **** 	for (; *exponent!=0; exponent++) {
 13117              		.loc 1 3681 6 view .LVU4236
 13118 0036 6C24     		movs	r4, #108
 13119              	.LVL1517:
 13120              	.L1307:
3683:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 13121              		.loc 1 3683 4 is_stmt 1 view .LVU4237
 13122              	.LBB704:
 13123              	.LBI704:
 415:src/display.c ****   if (res) *res++ = ch;
 13124              		.loc 1 415 14 view .LVU4238
 13125              	.LBB705:
 416:src/display.c ****   else	set_dig(base, ch);
 13126              		.loc 1 416 3 view .LVU4239
 417:src/display.c ****   return res;
 13127              		.loc 1 417 8 view .LVU4240
 13128 0038 2046     		mov	r0, r4
 13129 003a FFF7FEFF 		bl	set_dig
 13130              	.LVL1518:
 418:src/display.c **** }
 13131              		.loc 1 418 3 view .LVU4241
 418:src/display.c **** }
 13132              		.loc 1 418 3 is_stmt 0 view .LVU4242
 13133              	.LBE705:
 13134              	.LBE704:
3684:src/display.c **** 	}
 13135              		.loc 1 3684 4 is_stmt 1 view .LVU4243
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13136              		.loc 1 3682 9 is_stmt 0 view .LVU4244
 13137 003e 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 13138              	.LVL1519:
3684:src/display.c **** 	}
 13139              		.loc 1 3684 6 view .LVU4245
 13140 0042 0734     		adds	r4, r4, #7
 13141              	.LVL1520:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13142              		.loc 1 3682 23 is_stmt 1 view .LVU4246
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13143              		.loc 1 3682 9 view .LVU4247
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13144              		.loc 1 3682 2 is_stmt 0 view .LVU4248
 13145 0044 0029     		cmp	r1, #0
 13146 0046 F7D1     		bne	.L1307
 13147              	.LVL1521:
ARM GAS  /tmp/ccxUm1xs.s 			page 368


 13148              	.L1306:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13149              		.loc 1 3682 2 view .LVU4249
 13150              	.LBE703:
 13151              	.LBE702:
3700:src/display.c **** 	finish_display();
 13152              		.loc 1 3700 2 is_stmt 1 view .LVU4250
 13153 0048 3046     		mov	r0, r6
 13154 004a FFF7FEFF 		bl	set_status
 13155              	.LVL1522:
3701:src/display.c ****       }
 13156              		.loc 1 3701 2 view .LVU4251
3702:src/display.c **** 
 13157              		.loc 1 3702 7 is_stmt 0 view .LVU4252
 13158 004e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 13159              		.cfi_restore 14
 13160              		.cfi_restore 7
 13161              		.cfi_restore 6
 13162              		.cfi_restore 5
 13163              		.cfi_restore 4
 13164              		.cfi_restore 3
 13165              		.cfi_def_cfa_offset 0
 13166              	.LVL1523:
3701:src/display.c ****       }
 13167              		.loc 1 3701 2 view .LVU4253
 13168 0052 FFF7FEBF 		b	finish_display
 13169              	.LVL1524:
 13170              	.L1317:
 13171 0056 00BF     		.align	2
 13172              	.L1316:
 13173 0058 00000000 		.word	LastDisplayedNumber
 13174 005c 00000000 		.word	StateWhileOn
 13175              		.cfi_endproc
 13176              	.LFE48:
 13178              		.section	.rodata.str1.4,"aMS",%progbits,1
 13179              		.align	2
 13180              	.LC45:
 13181 0000 06316306 		.ascii	"\0061c\006\006\000"
 13181      0600
 13182 0006 0000     		.align	2
 13183              	.LC46:
 13184 0008 756E0600 		.ascii	"un\006\000"
 13185              		.align	2
 13186              	.LC47:
 13187 000c 736D00   		.ascii	"sm\000"
 13188              		.set	CSWTCH.367,CSWTCH.365
 13189 000f 00       		.align	2
 13190              	.LC48:
 13191 0010 20502072 		.ascii	" P r o g r a m \000"
 13191      206F2067 
 13191      20722061 
 13191      206D2000 
 13192              		.align	2
 13193              	.LC49:
 13194 0020 206F2072 		.ascii	" o r   d a t e \000"
 13194      20202064 
 13194      20612074 
ARM GAS  /tmp/ccxUm1xs.s 			page 369


 13194      20652000 
 13195              		.align	2
 13196              	.LC50:
 13197 0030 204F2070 		.ascii	" O p - c o d e \000"
 13197      202D2063 
 13197      206F2064 
 13197      20652000 
 13198              		.align	2
 13199              	.LC51:
 13200 0040 204C2061 		.ascii	" L a b e l \000"
 13200      20622065 
 13200      206C2000 
 13201              		.align	2
 13202              	.LC52:
 13203 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 13203      20652072 
 13203      20612074 
 13203      2069206F 
 13203      206E2000 
 13204              		.align	2
 13205              	.LC53:
 13206 0060 20462075 		.ascii	" F u l l \000"
 13206      206C206C 
 13206      2000
 13207 006a 0000     		.align	2
 13208              	.LC54:
 13209 006c 2043206C 		.ascii	" C l a s h \000"
 13209      20612073 
 13209      20682000 
 13210              		.align	2
 13211              	.LC55:
 13212 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 13212      206F2020 
 13212      2073206D 
 13212      2061206C 
 13212      206C2000 
 13213              		.align	2
 13214              	.LC56:
 13215 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 13215      20742061 
 13215      20202070 
 13215      206F2069 
 13215      206E2074 
 13216              		.align	2
 13217              	.LC57:
 13218 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 13218      20722061 
 13218      206D2065 
 13218      20742065 
 13218      20722000 
 13219              		.align	2
 13220              	.LC58:
 13221 00b8 20442061 		.ascii	" D a t a \000"
 13221      20742061 
 13221      2000
 13222 00c2 0000     		.align	2
 13223              	.LC59:
ARM GAS  /tmp/ccxUm1xs.s 			page 370


 13224 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 13224      206F2074 
 13224      20652063 
 13224      20742065 
 13224      20642000 
 13225              		.align	2
 13226              	.LC60:
 13227 00d8 2046206F 		.ascii	" F o u n d \000"
 13227      2075206E 
 13227      20642000 
 13228              		.align	2
 13229              	.LC61:
 13230 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 13230      2073206D 
 13230      20612074 
 13230      20632068 
 13230      2000
 13231 00f6 0000     		.align	2
 13232              	.LC62:
 13233 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 13233      20732074 
 13233      2061206C 
 13233      206C2065 
 13233      20642000 
 13234              		.global	DIGITS
 13235              		.comm	IoAnnunciator,4,4
 13236              		.comm	IntMaxWindow,4,4
 13237              		.comm	JustDisplayed,4,4
 13238              		.comm	ShowRPN,4,4
 13239              		.comm	forceDispPlot,1,1
 13240              		.comm	LastDisplayedExponent,5,4
 13241              		.comm	LastDisplayedNumber,26,4
 13242              		.comm	LastDisplayedText,31,4
 13243              		.global	no_status_top
 13244              		.comm	DispPlot,2,2
 13245              		.comm	DispMsg,4,4
 13246              		.global	SvnRevision
 13247              		.section	.rodata
 13248              		.align	2
 13249              		.set	.LANCHOR17,. + 0
 13250              	.LC20:
 13251 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 13251      22002E00 
 13251      00
 13252 0009 000000   		.space	3
 13253              	.LC24:
 13254 000c 33344306 		.ascii	"34C\0063.3\222\000"
 13254      332E3392 
 13254      00
 13255 0015 00000000 		.space	4
 13256 0019 000000   		.space	3
 13257              	.LC63:
 13258 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 13258      696E6700 
 13258      50726F47 
 13258      72614D6D 
 13258      00
ARM GAS  /tmp/ccxUm1xs.s 			page 371


 13259 002d 000000   		.space	3
 13260              	.LC64:
 13261 0030 446F6D61 		.ascii	"Domain\000\000"
 13261      696E0000 
 13262              	.LC65:
 13263 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 13263      74696D65 
 13263      006F7220 
 13263      64417445 
 13263      00
 13264 0049 000000   		.space	3
 13265              	.LC66:
 13266 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 13266      66696E65 
 13266      64004F70 
 13266      2D434F64 
 13266      4500
 13267 005e 0000     		.space	2
 13268              	.LC67:
 13269 0060 2B9F0000 		.ascii	"+\237\000\000"
 13270              	.LC68:
 13271 0064 2D9F0000 		.ascii	"-\237\000\000"
 13272              	.LC69:
 13273 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 13273      75636800 
 13273      4C416245 
 13273      4C00
 13274 0076 0000     		.space	2
 13275              	.LC70:
 13276 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 13276      67616C00 
 13276      4F504572 
 13276      4174696F 
 13276      6E00
 13277 008a 0000     		.space	2
 13278              	.LC71:
 13279 008c 4F757420 		.ascii	"Out of range\000\000"
 13279      6F662072 
 13279      616E6765 
 13279      0000
 13280 009a 0000     		.space	2
 13281              	.LC72:
 13282 009c 42616420 		.ascii	"Bad digit\000\000"
 13282      64696769 
 13282      740000
 13283 00a7 00       		.space	1
 13284              	.LC73:
 13285 00a8 546F6F20 		.ascii	"Too long\000\000"
 13285      6C6F6E67 
 13285      0000
 13286 00b2 0000     		.space	2
 13287              	.LC74:
 13288 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 13288      69730046 
 13288      754C4C00 
 13289              	.LC75:
 13290 00c0 53746163 		.ascii	"Stack\000CLASH\000"
ARM GAS  /tmp/ccxUm1xs.s 			page 372


 13290      6B00434C 
 13290      41534800 
 13291              	.LC76:
 13292 00cc 42616420 		.ascii	"Bad mode\000\000"
 13292      6D6F6465 
 13292      0000
 13293 00d6 0000     		.space	2
 13294              	.LC77:
 13295 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 13295      06060673 
 13295      697A6500 
 13295      746F6F20 
 13295      534D6D41 
 13296 00ef 00       		.space	1
 13297              	.LC78:
 13298 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 13298      66657700 
 13298      64417441 
 13298      20506F69 
 13298      6E745300 
 13299              	.LC79:
 13300 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 13300      6C696400 
 13300      50617261 
 13300      4D6D4574 
 13300      457200
 13301 0117 00       		.space	1
 13302              	.LC80:
 13303 0118 492F4F00 		.ascii	"I/O\000\000"
 13303      00
 13304 011d 000000   		.space	3
 13305              	.LC81:
 13306 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 13306      6C696400 
 13306      64417441 
 13306      00
 13307 012d 000000   		.space	3
 13308              	.LC82:
 13309 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 13309      65005072 
 13309      6F744563 
 13309      74456400 
 13310              	.LC83:
 13311 0140 4E6F2072 		.ascii	"No root\000Found\000"
 13311      6F6F7400 
 13311      466F756E 
 13311      6400
 13312 014e 0000     		.space	2
 13313              	.LC84:
 13314 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 13314      6978004D 
 13314      6D49534D 
 13314      6D417443 
 13314      4800
 13315 0162 0000     		.space	2
 13316              	.LC85:
 13317 0164 53696E67 		.ascii	"Singular\000\000"
ARM GAS  /tmp/ccxUm1xs.s 			page 373


 13317      756C6172 
 13317      0000
 13318 016e 0000     		.space	2
 13319              	.LC86:
 13320 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 13320      68206973 
 13320      0046754C 
 13320      4C00
 13321 017e 0000     		.space	2
 13322              	.LC87:
 13323 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 13323      72797374 
 13323      616C0049 
 13323      6E537461 
 13323      4C4C4564 
 13324 0195 000000   		.space	3
 13325              	.LC88:
 13326 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 13326      6576656E 
 13326      20726567 
 13326      00666F72 
 13326      20436F4D 
 13327 01b2 0000     		.space	2
 13328              	.LC89:
 13329 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 13329      5800
 13330              		.section	.bss.DecimalMode,"aw",%nobits
 13331              		.set	.LANCHOR1,. + 0
 13334              	DecimalMode:
 13335 0000 00       		.space	1
 13336              		.section	.bss.SeparatorMode,"aw",%nobits
 13337              		.set	.LANCHOR0,. + 0
 13340              	SeparatorMode:
 13341 0000 00       		.space	1
 13342              		.section	.bss.no_status_top,"aw",%nobits
 13343              		.align	1
 13344              		.set	.LANCHOR18,. + 0
 13347              	no_status_top:
 13348 0000 0000     		.space	2
 13349              		.section	.rodata.CSWTCH.365,"a"
 13350              		.align	2
 13351              		.set	.LANCHOR11,. + 0
 13354              	CSWTCH.365:
 13355 0000 02000000 		.word	2
 13356 0004 08000000 		.word	8
 13357 0008 0A000000 		.word	10
 13358 000c 10000000 		.word	16
 13359              		.section	.rodata.CSWTCH.392,"a"
 13360              		.align	2
 13361              		.set	.LANCHOR16,. + 0
 13364              	CSWTCH.392:
 13365 0000 00000000 		.word	.LC45
 13366 0004 08000000 		.word	.LC46
 13367 0008 0C000000 		.word	.LC47
 13368              		.section	.rodata.DIGITS,"a"
 13369              		.align	2
 13370              		.set	.LANCHOR12,. + 0
ARM GAS  /tmp/ccxUm1xs.s 			page 374


 13373              	DIGITS:
 13374 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13374      34353637 
 13374      38394142 
 13374      43444546 
 13374      00
 13375              		.section	.rodata.S7_ERROR,"a"
 13376              		.align	2
 13377              		.set	.LANCHOR26,. + 0
 13380              	S7_ERROR:
 13381 0000 4572726F 		.ascii	"Error\000"
 13381      7200
 13382              		.section	.rodata.S7_INF,"a"
 13383              		.align	2
 13384              		.set	.LANCHOR5,. + 0
 13387              	S7_INF:
 13388 0000 496E6669 		.ascii	"Infinity\000"
 13388      6E697479 
 13388      00
 13389              		.section	.rodata.S7_INF_Text,"a"
 13390              		.align	2
 13391              		.set	.LANCHOR7,. + 0
 13394              	S7_INF_Text:
 13395 0000 2049206E 		.ascii	" I n f i n i t y \000"
 13395      20662069 
 13395      206E2069 
 13395      20742079 
 13395      2000
 13396              		.section	.rodata.S7_NEG_INF_Text,"a"
 13397              		.align	2
 13398              		.set	.LANCHOR6,. + 0
 13401              	S7_NEG_INF_Text:
 13402 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 13402      20662069 
 13402      206E2069 
 13402      20742079 
 13402      2000
 13403              		.section	.rodata.S7_NaN,"a"
 13404              		.align	2
 13405              		.set	.LANCHOR3,. + 0
 13408              	S7_NaN:
 13409 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13409      6E754D6D 
 13409      45726963 
 13409      00
 13410              		.section	.rodata.S7_NaN_Text,"a"
 13411              		.align	2
 13412              		.set	.LANCHOR4,. + 0
 13415              	S7_NaN_Text:
 13416 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 13416      20742020 
 13416      206E2075 
 13416      206D2065 
 13416      20722069 
 13417              		.section	.rodata.S7_STEP,"a"
 13418              		.align	2
 13419              		.set	.LANCHOR25,. + 0
ARM GAS  /tmp/ccxUm1xs.s 			page 375


 13422              	S7_STEP:
 13423 0000 53744550 		.ascii	"StEP \000"
 13423      2000
 13424              		.section	.rodata.S7_STEP_ShortText,"a"
 13425              		.align	2
 13426              		.set	.LANCHOR19,. + 0
 13429              	S7_STEP_ShortText:
 13430 0000 53544550 		.ascii	"STEP\000"
 13430      00
 13431              		.section	.rodata.S7_fract_EQ,"a"
 13432              		.align	2
 13433              		.set	.LANCHOR9,. + 0
 13436              	S7_fract_EQ:
 13437 0000 203D2000 		.ascii	" = \000"
 13438              		.section	.rodata.S7_fract_GT,"a"
 13439              		.align	2
 13440              		.set	.LANCHOR10,. + 0
 13443              	S7_fract_GT:
 13444 0000 20477400 		.ascii	" Gt\000"
 13445              		.section	.rodata.S7_fract_LT,"a"
 13446              		.align	2
 13447              		.set	.LANCHOR8,. + 0
 13450              	S7_fract_LT:
 13451 0000 204C7400 		.ascii	" Lt\000"
 13452              		.section	.rodata.S_SURE,"a"
 13453              		.align	2
 13454              		.set	.LANCHOR21,. + 0
 13457              	S_SURE:
 13458 0000 53757265 		.ascii	"Sure?\000"
 13458      3F00
 13459              		.section	.rodata.SvnRevision,"a"
 13460              		.align	2
 13461              		.set	.LANCHOR20,. + 0
 13464              	SvnRevision:
 13465 0000 30202020 		.ascii	"0   "
 13466              		.section	.rodata.digtbl,"a"
 13467              		.align	2
 13468              		.set	.LANCHOR2,. + 0
 13471              	digtbl:
 13472 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13472      02421252 
 13472      2D000000 
 13472      00000000 
 13472      00
 13473 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13473      00000017 
 13473      01000000 
 13473      00
 13474 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13474      28000000 
 13474      0020664B 
 13474      00000010 
 13475 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13475      5E5B3973 
 13475      77497F7B 
 13475      00000612 
 13475      0300787D 
ARM GAS  /tmp/ccxUm1xs.s 			page 376


 13476 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13476      673D240F 
 13476      75266C6D 
 13476      6F7C7914 
 13476      73362F00 
 13477 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13477      161F7674 
 13477      6735040F 
 13477      75266915 
 13477      177C7914 
 13478 0076 000F003B 		.ascii	"\000\017\000;"
 13479              		.section	.rodata.error_table.8676,"a"
 13480              		.align	2
 13481              		.set	.LANCHOR27,. + 0
 13484              	error_table.8676:
 13485 0000 1C000000 		.word	.LC63
 13486 0004 30000000 		.word	.LC64
 13487 0008 38000000 		.word	.LC65
 13488 000c 4C000000 		.word	.LC66
 13489 0010 60000000 		.word	.LC67
 13490 0014 64000000 		.word	.LC68
 13491 0018 68000000 		.word	.LC69
 13492 001c 78000000 		.word	.LC70
 13493 0020 8C000000 		.word	.LC71
 13494 0024 9C000000 		.word	.LC72
 13495 0028 A8000000 		.word	.LC73
 13496 002c B4000000 		.word	.LC74
 13497 0030 C0000000 		.word	.LC75
 13498 0034 CC000000 		.word	.LC76
 13499 0038 D8000000 		.word	.LC77
 13500 003c F0000000 		.word	.LC78
 13501 0040 04010000 		.word	.LC79
 13502 0044 18010000 		.word	.LC80
 13503 0048 20010000 		.word	.LC81
 13504 004c 30010000 		.word	.LC82
 13505 0050 40010000 		.word	.LC83
 13506 0054 50010000 		.word	.LC84
 13507 0058 64010000 		.word	.LC85
 13508 005c 70010000 		.word	.LC86
 13509 0060 80010000 		.word	.LC87
 13510 0064 98010000 		.word	.LC88
 13511 0068 B4010000 		.word	.LC89
 13512              		.section	.rodata.error_table_text.8677,"a"
 13513              		.align	2
 13514              		.set	.LANCHOR28,. + 0
 13517              	error_table_text.8677:
 13518 0000 10000000 		.word	.LC48
 13519 0004 A8000000 		.word	.LC43
 13520 0008 20000000 		.word	.LC49
 13521 000c 30000000 		.word	.LC50
 13522 0010 A8000000 		.word	.LC43
 13523 0014 A8000000 		.word	.LC43
 13524 0018 40000000 		.word	.LC51
 13525 001c 4C000000 		.word	.LC52
 13526 0020 A8000000 		.word	.LC43
 13527 0024 A8000000 		.word	.LC43
 13528 0028 A8000000 		.word	.LC43
ARM GAS  /tmp/ccxUm1xs.s 			page 377


 13529 002c 60000000 		.word	.LC53
 13530 0030 6C000000 		.word	.LC54
 13531 0034 A8000000 		.word	.LC43
 13532 0038 78000000 		.word	.LC55
 13533 003c 8C000000 		.word	.LC56
 13534 0040 A4000000 		.word	.LC57
 13535 0044 A8000000 		.word	.LC43
 13536 0048 B8000000 		.word	.LC58
 13537 004c C4000000 		.word	.LC59
 13538 0050 D8000000 		.word	.LC60
 13539 0054 E4000000 		.word	.LC61
 13540 0058 A8000000 		.word	.LC43
 13541 005c 60000000 		.word	.LC53
 13542 0060 F8000000 		.word	.LC62
 13543 0064 A8000000 		.word	.LC43
 13544 0068 A8000000 		.word	.LC43
 13545              		.section	.rodata.libname,"a"
 13546              		.align	2
 13547              		.set	.LANCHOR22,. + 0
 13550              	libname:
 13551 0000 72414D6D 		.ascii	"rAMm\000"
 13551      00
 13552 0005 4C696220 		.ascii	"Lib \000"
 13552      00
 13553 000a 42757020 		.ascii	"Bup \000"
 13553      00
 13554 000f 726F4D6D 		.ascii	"roMm\000"
 13554      00
 13555              		.section	.rodata.libname_shorttext,"a"
 13556              		.align	2
 13557              		.set	.LANCHOR24,. + 0
 13560              	libname_shorttext:
 13561 0000 52616D00 		.ascii	"Ram\000"
 13562 0004 00       		.space	1
 13563 0005 4C696200 		.ascii	"Lib\000"
 13564 0009 00       		.space	1
 13565 000a 42757000 		.ascii	"Bup\000"
 13566 000e 00       		.space	1
 13567 000f 526F6D00 		.ascii	"Rom\000"
 13568 0013 00       		.space	1
 13569              		.section	.rodata.libname_text,"a"
 13570              		.align	2
 13571              		.set	.LANCHOR23,. + 0
 13574              	libname_text:
 13575 0000 20522061 		.ascii	" R a m \000"
 13575      206D2000 
 13576 0008 0000     		.space	2
 13577 000a 204C2069 		.ascii	" L i b \000"
 13577      20622000 
 13578 0012 0000     		.space	2
 13579 0014 20422075 		.ascii	" B u p \000"
 13579      20702000 
 13580 001c 0000     		.space	2
 13581 001e 2052206F 		.ascii	" R o m \000"
 13581      206D2000 
 13582 0026 0000     		.space	2
 13583              		.section	.rodata.shift_chars.8784,"a"
ARM GAS  /tmp/ccxUm1xs.s 			page 378


 13584              		.align	2
 13585              		.set	.LANCHOR15,. + 0
 13588              	shift_chars.8784:
 13589 0000 20111213 		.ascii	" \021\022\023"
 13590              		.section	.rodata.small_dots.8985,"a"
 13591              		.align	2
 13592              		.set	.LANCHOR14,. + 0
 13595              	small_dots.8985:
 13596 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13596      07E12C06 
 13596      07E12C06 
 13596      06
 13597              		.section	.rodata.small_minus.8984,"a"
 13598              		.align	2
 13599              		.set	.LANCHOR13,. + 0
 13602              	small_minus.8984:
 13603 0000 07C22D06 		.ascii	"\007\302-\006"
 13604              		.text
 13605              	.Letext0:
 13606              		.file 2 "src/decNumber/decContext.h"
 13607              		.file 3 "src/decNumber/decNumber.h"
 13608              		.file 4 "src/decNumber/decimal64.h"
 13609              		.file 5 "src/decNumber/decimal128.h"
 13610              		.file 6 "src/xeq.h"
 13611              		.file 7 "src/data.h"
 13612              		.file 8 "src/storage.h"
 13613              		.file 9 "src/display.h"
 13614              		.file 10 "src/consts.h"
 13615              		.file 11 "src/stats.h"
 13616              		.file 12 "src/revision.h"
 13617              		.file 13 "src/printer.h"
 13618              		.file 14 "src/charset7.h"
 13619              		.file 15 "src/lcd.h"
 13620              		.file 16 "src/decn.h"
 13621              		.file 17 "src/alpha.h"
 13622              		.file 18 "src/int.h"
ARM GAS  /tmp/ccxUm1xs.s 			page 379


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccxUm1xs.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccxUm1xs.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccxUm1xs.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccxUm1xs.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccxUm1xs.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccxUm1xs.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccxUm1xs.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccxUm1xs.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccxUm1xs.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccxUm1xs.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccxUm1xs.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccxUm1xs.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccxUm1xs.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccxUm1xs.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccxUm1xs.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccxUm1xs.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccxUm1xs.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccxUm1xs.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/ccxUm1xs.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/ccxUm1xs.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/ccxUm1xs.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccxUm1xs.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccxUm1xs.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccxUm1xs.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/ccxUm1xs.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccxUm1xs.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/ccxUm1xs.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/ccxUm1xs.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccxUm1xs.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccxUm1xs.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccxUm1xs.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccxUm1xs.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccxUm1xs.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/ccxUm1xs.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccxUm1xs.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccxUm1xs.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/ccxUm1xs.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccxUm1xs.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/ccxUm1xs.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccxUm1xs.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccxUm1xs.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/ccxUm1xs.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccxUm1xs.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/ccxUm1xs.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/ccxUm1xs.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccxUm1xs.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.365:0000000000000000 CSWTCH.367
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccxUm1xs.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/ccxUm1xs.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/ccxUm1xs.s:3962   .text.getdig:0000000000000000 $t
ARM GAS  /tmp/ccxUm1xs.s 			page 380


     /tmp/ccxUm1xs.s:3970   .text.getdig:0000000000000000 getdig
     /tmp/ccxUm1xs.s:3990   .text.getdig:0000000000000008 $d
     /tmp/ccxUm1xs.s:3995   .text.dot:0000000000000000 $t
     /tmp/ccxUm1xs.s:4003   .text.dot:0000000000000000 dot
     /tmp/ccxUm1xs.s:4026   .text.std_round_fix:0000000000000000 $t
     /tmp/ccxUm1xs.s:4034   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccxUm1xs.s:4191   .text.std_round_fix:0000000000000078 $d
     /tmp/ccxUm1xs.s:4196   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccxUm1xs.s:4204   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccxUm1xs.s:4303   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccxUm1xs.s:4309   .text.set_annunciators:0000000000000000 $t
     /tmp/ccxUm1xs.s:4316   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccxUm1xs.s:4655   .text.set_annunciators:00000000000000d8 $d
     /tmp/ccxUm1xs.s:4666   .text.pixel_length:0000000000000000 $t
     /tmp/ccxUm1xs.s:4674   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccxUm1xs.s:4765   .text.set_status:0000000000000000 $t
     /tmp/ccxUm1xs.s:4772   .text.set_status:0000000000000000 set_status
     /tmp/ccxUm1xs.s:4845   .text.set_status:0000000000000038 $d
     /tmp/ccxUm1xs.s:4850   .text.set_x_dn:0000000000000000 $t
     /tmp/ccxUm1xs.s:4858   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccxUm1xs.s:5646   .text.set_x_dn:0000000000000358 $d
     /tmp/ccxUm1xs.s:5653   .text.set_x_dn:0000000000000368 $t
     /tmp/ccxUm1xs.s:5806   .text.set_x_dn:0000000000000414 $d
     /tmp/ccxUm1xs.s:5812   .text.set_x_dn:000000000000041e $t
     /tmp/ccxUm1xs.s:5838   .text.set_x_dn:000000000000044a $d
     /tmp/ccxUm1xs.s:5844   .text.set_x_dn:0000000000000454 $t
     /tmp/ccxUm1xs.s:6434   .text.set_x_dn:00000000000006e0 $d
     /tmp/ccxUm1xs.s:6450   .text.set_x_dn:00000000000006fc $t
     /tmp/ccxUm1xs.s:7167   .text.set_x_dn:00000000000009d8 $d
     /tmp/ccxUm1xs.s:7176   .text.set_x:0000000000000000 $t
     /tmp/ccxUm1xs.s:7183   .text.set_x:0000000000000000 set_x
     /tmp/ccxUm1xs.s:7251   .text.format_reg:0000000000000000 $t
     /tmp/ccxUm1xs.s:7259   .text.format_reg:0000000000000000 format_reg
     /tmp/ccxUm1xs.s:7378   .text.format_reg:0000000000000064 $d
     /tmp/ccxUm1xs.s:7384   .text.set_status_right:0000000000000000 $t
     /tmp/ccxUm1xs.s:7391   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccxUm1xs.s:7535   .text.set_status_right:000000000000006c $d
     /tmp/ccxUm1xs.s:7540   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccxUm1xs.s:7547   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccxUm1xs.s:7672   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccxUm1xs.s:7677   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccxUm1xs.s:7735   .text.annunciators:0000000000000000 $t
     /tmp/ccxUm1xs.s:7742   .text.annunciators:0000000000000000 annunciators
     /tmp/ccxUm1xs.s:8399   .text.annunciators:0000000000000318 $d
     /tmp/ccxUm1xs.s:8418   .text.annunciators:0000000000000358 $t
     /tmp/ccxUm1xs.s:8931   .text.annunciators:000000000000058c $d
     /tmp/ccxUm1xs.s:8952   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccxUm1xs.s:9019   .text.display:0000000000000000 $t
     /tmp/ccxUm1xs.s:9027   .text.display:0000000000000000 display
     /tmp/ccxUm1xs.s:9706   .text.display:000000000000030c $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccxUm1xs.s:9726   .text.display:000000000000034c $t
     /tmp/ccxUm1xs.s:10488  .text.display:0000000000000688 $d
     /tmp/ccxUm1xs.s:10514  .text.display:00000000000006dc $t
ARM GAS  /tmp/ccxUm1xs.s 			page 381


     /tmp/ccxUm1xs.s:11447  .text.display:0000000000000a34 $d
     /tmp/ccxUm1xs.s:11467  .text.display:0000000000000a64 $t
     /tmp/ccxUm1xs.s:12234  .text.display:0000000000000d6c $d
     /tmp/ccxUm1xs.s:12253  .text.display:0000000000000da0 $t
     /tmp/ccxUm1xs.s:12543  .text.display:0000000000000ec4 $d
     /tmp/ccxUm1xs.s:12559  .text.frozen_display:0000000000000000 $t
     /tmp/ccxUm1xs.s:12567  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccxUm1xs.s:12597  .text.frozen_display:000000000000001c $d
     /tmp/ccxUm1xs.s:12602  .text.message:0000000000000000 $t
     /tmp/ccxUm1xs.s:12610  .text.message:0000000000000000 message
     /tmp/ccxUm1xs.s:12739  .text.message:0000000000000060 $d
     /tmp/ccxUm1xs.s:12747  .text.error_message:0000000000000000 $t
     /tmp/ccxUm1xs.s:12755  .text.error_message:0000000000000000 error_message
     /tmp/ccxUm1xs.s:13030  .text.error_message:00000000000000dc $d
     /tmp/ccxUm1xs.s:13043  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccxUm1xs.s:13051  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccxUm1xs.s:13173  .text.stopwatch_message:0000000000000058 $d
     /tmp/ccxUm1xs.s:13179  .rodata.str1.4:0000000000000000 $d
     /tmp/ccxUm1xs.s:13354  .rodata.CSWTCH.365:0000000000000000 CSWTCH.365
     /tmp/ccxUm1xs.s:13373  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccxUm1xs.s:13347  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccxUm1xs.s:13464  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccxUm1xs.s:13248  .rodata:0000000000000000 $d
     /tmp/ccxUm1xs.s:13334  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccxUm1xs.s:13335  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccxUm1xs.s:13340  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccxUm1xs.s:13341  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccxUm1xs.s:13343  .bss.no_status_top:0000000000000000 $d
     /tmp/ccxUm1xs.s:13350  .rodata.CSWTCH.365:0000000000000000 $d
     /tmp/ccxUm1xs.s:13360  .rodata.CSWTCH.392:0000000000000000 $d
     /tmp/ccxUm1xs.s:13364  .rodata.CSWTCH.392:0000000000000000 CSWTCH.392
     /tmp/ccxUm1xs.s:13369  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccxUm1xs.s:13376  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccxUm1xs.s:13380  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccxUm1xs.s:13383  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccxUm1xs.s:13387  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccxUm1xs.s:13390  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccxUm1xs.s:13394  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccxUm1xs.s:13397  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccxUm1xs.s:13401  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccxUm1xs.s:13404  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccxUm1xs.s:13408  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccxUm1xs.s:13411  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccxUm1xs.s:13415  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccxUm1xs.s:13418  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccxUm1xs.s:13422  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccxUm1xs.s:13425  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccxUm1xs.s:13429  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccxUm1xs.s:13432  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccxUm1xs.s:13436  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccxUm1xs.s:13439  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccxUm1xs.s:13443  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccxUm1xs.s:13446  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccxUm1xs.s:13450  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccxUm1xs.s:13453  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccxUm1xs.s:13457  .rodata.S_SURE:0000000000000000 S_SURE
ARM GAS  /tmp/ccxUm1xs.s 			page 382


     /tmp/ccxUm1xs.s:13460  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccxUm1xs.s:13467  .rodata.digtbl:0000000000000000 $d
     /tmp/ccxUm1xs.s:13471  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccxUm1xs.s:13480  .rodata.error_table.8676:0000000000000000 $d
     /tmp/ccxUm1xs.s:13484  .rodata.error_table.8676:0000000000000000 error_table.8676
     /tmp/ccxUm1xs.s:13513  .rodata.error_table_text.8677:0000000000000000 $d
     /tmp/ccxUm1xs.s:13517  .rodata.error_table_text.8677:0000000000000000 error_table_text.8677
     /tmp/ccxUm1xs.s:13546  .rodata.libname:0000000000000000 $d
     /tmp/ccxUm1xs.s:13550  .rodata.libname:0000000000000000 libname
     /tmp/ccxUm1xs.s:13556  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccxUm1xs.s:13560  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccxUm1xs.s:13570  .rodata.libname_text:0000000000000000 $d
     /tmp/ccxUm1xs.s:13574  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccxUm1xs.s:13584  .rodata.shift_chars.8784:0000000000000000 $d
     /tmp/ccxUm1xs.s:13588  .rodata.shift_chars.8784:0000000000000000 shift_chars.8784
     /tmp/ccxUm1xs.s:13591  .rodata.small_dots.8985:0000000000000000 $d
     /tmp/ccxUm1xs.s:13595  .rodata.small_dots.8985:0000000000000000 small_dots.8985
     /tmp/ccxUm1xs.s:13598  .rodata.small_minus.8984:0000000000000000 $d
     /tmp/ccxUm1xs.s:13602  .rodata.small_minus.8984:0000000000000000 small_minus.8984

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
ARM GAS  /tmp/ccxUm1xs.s 			page 383


get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
op_r2p
current_catalogue
catcmd
get_const
getprog
prt
multicmds
find_label_from
free_mem
free_flash
findmultilbl
slen
global_regs
alpha_rcl_s
SizeStatRegs
ARM GAS  /tmp/ccxUm1xs.s 			page 384


local_regs
copyreg
sigma_val
getX
packed_from_number
set_NaN
do_conv
StackBase
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

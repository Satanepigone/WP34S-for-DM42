ARM GAS  /tmp/ccpF0v4D.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccpF0v4D.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/ccpF0v4D.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccpF0v4D.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/ccpF0v4D.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/ccpF0v4D.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 190:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
ARM GAS  /tmp/ccpF0v4D.s 			page 7


 191:src/display.c ****       MSG2("Interrupted", "X"),
 192:src/display.c **** #endif
 193:src/display.c ****     };
 194:src/display.c **** #undef MSG1
 195:src/display.c **** #undef MSG2
 196:src/display.c **** #ifndef REALBUILD
 197:src/display.c ****   static const char *const error_table_text[] =
 198:src/display.c ****     {
 199:src/display.c ****       " P r o g r a m ",
 200:src/display.c ****       "",
 201:src/display.c ****       " o r   d a t e ",
 202:src/display.c ****       " O p - c o d e ",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " L a b e l ",
 206:src/display.c ****       " O p e r a t i o n ",
 207:src/display.c ****       "",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " F u l l ",
 211:src/display.c ****       " C l a s h ",
 212:src/display.c ****       "",
 213:src/display.c ****       " T o o   s m a l l ",
 214:src/display.c ****       " D a t a   p o i n t s ",
 215:src/display.c ****       " P a r a m e t e r ",
 216:src/display.c ****       "",
 217:src/display.c ****       " D a t a ",
 218:src/display.c ****       " P r o t e c t e d ",
 219:src/display.c ****       " F o u n d ",
 220:src/display.c ****       " M i s m a t c h ",
 221:src/display.c ****       "",
 222:src/display.c ****       " F u l l ",
 223:src/display.c ****       " I n s t a l l e d ",
 224:src/display.c **** #ifndef SHIFT_EXPONENT
 225:src/display.c ****       "",
 226:src/display.c ****       "",
 227:src/display.c **** #endif
 228:src/display.c ****       "",
 229:src/display.c ****     };
 230:src/display.c **** #endif
 231:src/display.c **** 
 232:src/display.c ****   if (e != ERR_NONE || Running) {
 233:src/display.c ****     const char *p = error_table[e];
 234:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 235:src/display.c ****     if (*q == '\0')
 236:src/display.c ****       q = S7_ERROR;
 237:src/display.c ****     if (*q == 'X') {
 238:src/display.c ****       DispMsg = p;
 239:src/display.c ****       frozen_display();
 240:src/display.c ****     }
 241:src/display.c ****     else {
 242:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 243:src/display.c ****       if (*q == '1')
 244:src/display.c **** 	q = CNULL;
 245:src/display.c **** #endif
 246:src/display.c ****       message(p, q);
 247:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
ARM GAS  /tmp/ccpF0v4D.s 			page 8


 248:src/display.c **** #ifndef REALBUILD
 249:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 250:src/display.c **** #endif
 251:src/display.c ****     }
 252:src/display.c **** #ifdef INFRARED
 253:src/display.c ****     if (Tracing) {
 254:src/display.c ****       if (*q == 'X')
 255:src/display.c **** 	print_reg(regX_idx, p, 0);
 256:src/display.c ****       else {
 257:src/display.c **** 	print_tab(0);
 258:src/display.c **** 	print_line(p, 0);
 259:src/display.c **** 	print(' ');
 260:src/display.c **** 	while (*q != '\0') {
 261:src/display.c **** 	  int c = *q;
 262:src/display.c **** 	  if (c >= 'A')
 263:src/display.c **** 	    c |= 0x60; // ASCII lower case
 264:src/display.c **** 	  print(c);
 265:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 266:src/display.c **** 	    ++q;
 267:src/display.c **** 	  ++q;
 268:src/display.c **** 	}
 269:src/display.c **** 	print_advance( 0 );
 270:src/display.c ****       }
 271:src/display.c ****     }
 272:src/display.c **** #endif
 273:src/display.c ****   }
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** 
 277:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 278:src/display.c ****  * display.
 279:src/display.c ****  */
 280:src/display.c **** #define D_TOP 64
 281:src/display.c **** #define D_TL 32
 282:src/display.c **** #define D_TR 8
 283:src/display.c **** #define D_MIDDLE 16
 284:src/display.c **** #define D_BL 4
 285:src/display.c **** #define D_BR 1
 286:src/display.c **** #define D_BOTTOM 2
 287:src/display.c **** 
 288:src/display.c **** #include "charset7.h"
 289:src/display.c **** 
 290:src/display.c **** #ifndef REALBUILD
 291:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 292:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 293:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 294:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 295:src/display.c **** 
 296:src/display.c **** static void set_mant_sign_dot()
 297:src/display.c **** {
 298:src/display.c ****   LastDisplayedNumber[0]='-';
 299:src/display.c ****   set_dot(MANT_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]=' ';
ARM GAS  /tmp/ccpF0v4D.s 			page 9


 305:src/display.c ****   clr_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void set_exp_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedExponent[0]='-';
 311:src/display.c ****   set_dot(EXP_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void clr_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]=' ';
 317:src/display.c ****   clr_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** #else
 321:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 322:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 325:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 326:src/display.c **** 
 327:src/display.c **** #endif
 328:src/display.c **** 
 329:src/display.c **** #ifndef REALBUILD
 330:src/display.c **** int getdig(int ch)
 331:src/display.c **** #else
 332:src/display.c ****   static int getdig(int ch)
 333:src/display.c **** #endif
 334:src/display.c **** {
 335:src/display.c ****   // perform index lookup
 336:src/display.c ****   return digtbl[ch&0xff];
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** void dot(int n, int on) {
 340:src/display.c ****   if (on)	set_dot(n);
 341:src/display.c ****   else	clr_dot(n);
 342:src/display.c **** }
 343:src/display.c **** 
 344:src/display.c **** 
 345:src/display.c **** /* Set the decimal point *after* the indicated digit
 346:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 347:src/display.c ****  * of decimal.
 348:src/display.c ****  */
 349:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 350:src/display.c ****   if (res) {
 351:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 352:src/display.c ****   } else {
 353:src/display.c ****     set_dot(posn+7);
 354:src/display.c ****     if (decimal != DECIMAL_DOT)
 355:src/display.c ****       set_dot(posn+8);
 356:src/display.c **** #ifndef REALBUILD
 357:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 358:src/display.c **** #endif
 359:src/display.c ****   }
 360:src/display.c ****   return res;
 361:src/display.c **** }
ARM GAS  /tmp/ccpF0v4D.s 			page 10


 362:src/display.c **** 
 363:src/display.c **** /* Set the digit group separator *before* the specified digit.
 364:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 365:src/display.c ****  * sep argument.
 366:src/display.c ****  */
 367:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 368:src/display.c ****   if (sep == SEP_NONE)
 369:src/display.c ****     return res;
 370:src/display.c ****   if (res) {
 371:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 372:src/display.c ****     else *res++ = '.';
 373:src/display.c ****   } else {
 374:src/display.c ****     posn -= SEGS_PER_DIGIT;
 375:src/display.c ****     set_dot(posn+7);
 376:src/display.c ****     if (sep == SEP_COMMA)
 377:src/display.c ****       set_dot(posn+8);
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 380:src/display.c **** #endif
 381:src/display.c ****   }
 382:src/display.c ****   return res;
 383:src/display.c **** }
 384:src/display.c **** 
 385:src/display.c **** /* Set a digit in positions [base, base+6] */
 386:src/display.c **** static void set_dig(int base, int ch)
 387:src/display.c **** {
 136              		.loc 1 387 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 388:src/display.c ****   int i;
 140              		.loc 1 388 3 view .LVU36
 389:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 389 3 view .LVU37
 142              	.LBB169:
 143              	.LBI169:
 330:src/display.c **** #else
 144              		.loc 1 330 5 view .LVU38
 145              	.LBB170:
 336:src/display.c **** }
 146              		.loc 1 336 3 view .LVU39
 336:src/display.c **** }
 147              		.loc 1 336 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 336:src/display.c **** }
 149              		.loc 1 336 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE170:
 152              	.LBE169:
 390:src/display.c **** #ifndef REALBUILD
 391:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 391 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 387:src/display.c ****   int i;
 155              		.loc 1 387 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccpF0v4D.s 			page 11


 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB172:
 163              	.LBB171:
 336:src/display.c **** }
 164              		.loc 1 336 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 336:src/display.c **** }
 167              		.loc 1 336 16 view .LVU45
 168              	.LBE171:
 169              	.LBE172:
 170              		.loc 1 391 3 is_stmt 1 view .LVU46
 171              		.loc 1 391 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 392:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 392 5 is_stmt 1 view .LVU48
 174              		.loc 1 392 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 392 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 392 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 392 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 392 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 393:src/display.c ****   else
 394:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 395:src/display.c **** #endif
 396:src/display.c ****   for (i=6; i>=0; i--)
 397:src/display.c ****     {
 398:src/display.c ****       //		dot(base, c & (1 << i));
 399:src/display.c ****       if (c & (1 << i))
 400:src/display.c **** 	set_dot(base);
 196              		.loc 1 400 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 401:src/display.c ****       else
 402:src/display.c **** 	clr_dot(base);
 403:src/display.c ****       base++;
 199              		.loc 1 403 7 is_stmt 1 view .LVU55
 396:src/display.c ****     {
ARM GAS  /tmp/ccpF0v4D.s 			page 12


 200              		.loc 1 396 19 view .LVU56
 396:src/display.c ****     {
 201              		.loc 1 396 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 396:src/display.c ****     {
 204              		.loc 1 396 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 400:src/display.c ****       else
 208              		.loc 1 400 2 is_stmt 1 view .LVU59
 402:src/display.c ****       base++;
 209              		.loc 1 402 2 view .LVU60
 399:src/display.c **** 	set_dot(base);
 210              		.loc 1 399 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 399:src/display.c **** 	set_dot(base);
 212              		.loc 1 399 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 399:src/display.c **** 	set_dot(base);
 216              		.loc 1 399 7 is_stmt 1 view .LVU63
 399:src/display.c **** 	set_dot(base);
 217              		.loc 1 399 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 402:src/display.c ****       base++;
 219              		.loc 1 402 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 403 7 is_stmt 1 view .LVU66
 396:src/display.c ****     {
 223              		.loc 1 396 19 view .LVU67
 396:src/display.c ****     {
 224              		.loc 1 396 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 396:src/display.c ****     {
 227              		.loc 1 396 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 404:src/display.c ****     }
 405:src/display.c **** }
 231              		.loc 1 405 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 394:src/display.c **** #endif
 235              		.loc 1 394 5 is_stmt 1 view .LVU71
 394:src/display.c **** #endif
 236              		.loc 1 394 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 394:src/display.c **** #endif
 238              		.loc 1 394 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
ARM GAS  /tmp/ccpF0v4D.s 			page 13


 394:src/display.c **** #endif
 240              		.loc 1 394 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 394:src/display.c **** #endif
 242              		.loc 1 394 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 394:src/display.c **** #endif
 246              		.loc 1 394 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 406:src/display.c **** 
 407:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 408:src/display.c ****   if (res) *res++ = ch;
 409:src/display.c ****   else	set_dig(base, ch);
 410:src/display.c ****   return res;
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** 
 414:src/display.c **** static void set_digits_string(const char *msg, int j) {
 415:src/display.c ****   for (; *msg != '\0'; msg++) {
 416:src/display.c ****     if (*msg == '.' || *msg == ',')
 417:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 418:src/display.c ****     else {
 419:src/display.c ****       set_dig_s(j, *msg, CNULL);
 420:src/display.c ****       j += SEGS_PER_DIGIT;
 421:src/display.c ****     }
 422:src/display.c ****   }
 423:src/display.c **** }
 424:src/display.c **** 
 425:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 426:src/display.c ****   int i;
 427:src/display.c ****   const int n = res == NULL ? 3 : 4;
 428:src/display.c **** 
 429:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
ARM GAS  /tmp/ccpF0v4D.s 			page 14


 430:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** /* Force the exponent display
 434:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 435:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 436:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 437:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 438:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 439:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 440:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 441:src/display.c ****  */
 442:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 443:src/display.c ****   union {
 444:src/display.c ****     char buf[4];
 445:src/display.c ****     int i;
 446:src/display.c ****   } u;
 447:src/display.c ****   int negative;
 448:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 449:src/display.c ****   int thousands;
 450:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 451:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 452:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 453:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 454:src/display.c **** #  else
 455:src/display.c ****   const int show_large_exponent = 1;
 456:src/display.c **** #  endif
 457:src/display.c **** #else
 458:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 459:src/display.c ****   int thousands;
 460:src/display.c **** #  endif
 461:src/display.c ****   const int show_large_exponent = 0;
 462:src/display.c **** #endif
 463:src/display.c **** 
 464:src/display.c ****   negative = flags & 2;
 465:src/display.c ****   if (exp < 0) {
 466:src/display.c ****     negative = 1;
 467:src/display.c ****     exp = -exp;
 468:src/display.c ****   }
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****   thousands = exp / 1000;
 471:src/display.c **** #endif
 472:src/display.c ****   if (res) {
 473:src/display.c **** #ifdef INCLUDE_YREG_CODE
 474:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 475:src/display.c ****     if (thousands != 0) {
 476:src/display.c **** #else
 477:src/display.c ****       if (exp > 999) {
 478:src/display.c **** #endif
 479:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 480:src/display.c **** 	// No exponent separator for large -ve exponents
 481:src/display.c ****       }
 482:src/display.c ****       else *res++ = 'e'; // Normal separator
 483:src/display.c **** #else
 484:src/display.c ****       *res++ = 'e';
 485:src/display.c **** #endif
 486:src/display.c ****       if (negative) *res++ = '-';
ARM GAS  /tmp/ccpF0v4D.s 			page 15


 487:src/display.c ****     }
 488:src/display.c ****     else {
 489:src/display.c ****       if (negative) SET_EXP_SIGN;
 490:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 491:src/display.c ****       if (thousands != 0) {
 492:src/display.c **** #else
 493:src/display.c **** 	if (exp > 999) {
 494:src/display.c **** #endif
 495:src/display.c **** 	  if (!show_large_exponent
 496:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 497:src/display.c **** 	      && (flags & 8) == 0
 498:src/display.c **** #endif
 499:src/display.c **** 	      ) {
 500:src/display.c **** #ifdef REALBUILD
 501:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 502:src/display.c **** #else
 503:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 504:src/display.c **** #endif
 505:src/display.c **** 	    goto no_number;
 506:src/display.c **** 	  }
 507:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 508:src/display.c **** 	  else {
 509:src/display.c **** 	    exp -= thousands * 1000;
 510:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 511:src/display.c **** 	    if (flags & 16) {
 512:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 513:src/display.c **** 	      int i;
 514:src/display.c **** 
 515:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 516:src/display.c **** 		// Clear digits and separators
 517:src/display.c **** 		clr_dot(i);
 518:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 519:src/display.c **** 	    }
 520:src/display.c **** #  endif
 521:src/display.c **** 	    if (negative) {
 522:src/display.c **** 	      CLR_EXP_SIGN;
 523:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 524:src/display.c **** 	    }
 525:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 526:src/display.c **** 	    flags = 1;
 527:src/display.c **** 	  }
 528:src/display.c **** #endif
 529:src/display.c **** 	}
 530:src/display.c ****       }
 531:src/display.c **** #ifdef REALBUILD
 532:src/display.c ****       u.i = 0; // Smaller ARM code
 533:src/display.c **** #else
 534:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 535:src/display.c **** #endif
 536:src/display.c ****       if (flags & 5) {
 537:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 538:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 539:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 540:src/display.c **** 	  int i;
 541:src/display.c **** 
 542:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 543:src/display.c **** 	    if (u.buf[i] == '0')
ARM GAS  /tmp/ccpF0v4D.s 			page 16


 544:src/display.c **** 	      u.buf[i] = ' ';
 545:src/display.c **** 	    else
 546:src/display.c **** 	      break;
 547:src/display.c **** 	  }
 548:src/display.c **** 	  if (i != 0 && negative) {
 549:src/display.c **** 	    // Move minus sign to right in front of exponent
 550:src/display.c **** 	    CLR_EXP_SIGN;
 551:src/display.c **** 	    u.buf[i - 1] = '-';
 552:src/display.c **** 	  }
 553:src/display.c **** 	}
 554:src/display.c **** #endif
 555:src/display.c ****       }
 556:src/display.c ****       else
 557:src/display.c **** 	num_arg(u.buf, exp);
 558:src/display.c ****     no_number:
 559:src/display.c ****       set_exp_digits_string(u.buf, res);
 560:src/display.c ****     }
 561:src/display.c **** 
 562:src/display.c ****     static void carry_overflow(void) {
 563:src/display.c ****       const int base = SEGS_EXP_BASE;
 564:src/display.c ****       int c;
 565:src/display.c ****       unsigned int b;
 566:src/display.c **** 
 567:src/display.c ****       // Figure out the base
 568:src/display.c ****       switch (State2.smode) {
 569:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 570:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 571:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 572:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 573:src/display.c ****       default:	b = UState.int_base+1;	break;
 574:src/display.c ****       }
 575:src/display.c **** 
 576:src/display.c ****       // Display the base as the first exponent digit
 577:src/display.c ****       if (b > 10 && b < 16)
 578:src/display.c **** 	SET_EXP_SIGN;
 579:src/display.c ****       c = "B34567o9D12345h"[b-2];
 580:src/display.c ****       set_dig(base, c);
 581:src/display.c **** 
 582:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 583:src/display.c ****       if (get_carry())
 584:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 585:src/display.c ****       if (get_overflow())
 586:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 587:src/display.c ****     }
 588:src/display.c **** 
 589:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 590:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 591:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 592:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 593:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 594:src/display.c **** #endif
 595:src/display.c **** 
 596:src/display.c ****     /* Display the annunicator text line.
 597:src/display.c ****      * Care needs to be taken to keep things aligned.
 598:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 599:src/display.c ****      */
 600:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/ccpF0v4D.s 			page 17


 601:src/display.c ****     static void annunciators(void) {
 602:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 603:src/display.c ****       char buf[42], *p = buf, *q="";
 604:src/display.c ****       char buf2[42], *p2 = buf2;
 605:src/display.c ****       int n;
 606:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 607:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 608:src/display.c ****       // Constant variables and code branches depending on a constant variable
 609:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 610:src/display.c ****       // feature run-time configurable if needed.
 611:src/display.c **** #ifdef INCLUDE_YREG_CODE
 612:src/display.c **** #  ifdef YREG_ALWAYS_ON
 613:src/display.c ****       const int yreg_enabled = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_enabled = UState.show_y;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 618:src/display.c ****       const int yreg_hms = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_hms = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 623:src/display.c ****       const int yreg_fract = 1;
 624:src/display.c **** #  else
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #  endif
 627:src/display.c **** #else
 628:src/display.c ****       const int yreg_enabled = 0;
 629:src/display.c ****       const int yreg_hms = 0;
 630:src/display.c ****       const int yreg_fract = 0;
 631:src/display.c **** #endif
 632:src/display.c **** #ifdef RP_PREFIX
 633:src/display.c ****       const int rp_prefix = 1;
 634:src/display.c **** #else
 635:src/display.c ****       const int rp_prefix = 0;
 636:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 637:src/display.c **** #endif
 638:src/display.c ****       // Indicates whether font escape code is compiled in.
 639:src/display.c ****       // This variable will always be set at compile time.
 640:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 641:src/display.c ****       const int has_FONT_ESCAPE = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int has_FONT_ESCAPE = 0;
 644:src/display.c **** #endif
 645:src/display.c **** 
 646:src/display.c ****       xset(buf, '\0', sizeof(buf));
 647:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 648:src/display.c ****       
 649:src/display.c ****       if (is_intmode()) {
 650:src/display.c **** #ifdef SHOW_STACK_SIZE
 651:src/display.c **** 	if (shift_char == ' ') {
 652:src/display.c **** 	  *p2++ = '\007';
 653:src/display.c **** 	  *p2++ = '\346';
 654:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 655:src/display.c **** 	}
 656:src/display.c **** 	else
 657:src/display.c **** #endif
ARM GAS  /tmp/ccpF0v4D.s 			page 18


 658:src/display.c **** 	  {
 659:src/display.c **** 	    *p2++ = shift_char;
 660:src/display.c **** 	    *p2++ = '\006';
 661:src/display.c **** 	  }
 662:src/display.c **** 
 663:src/display.c **** 	switch(int_mode()) {
 664:src/display.c **** 	default:
 665:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 666:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 667:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 668:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 669:src/display.c **** 	}
 670:src/display.c **** 	q = scopy(p2, q);
 671:src/display.c **** 	*q++ = '\006';
 672:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 673:src/display.c **** 
 674:src/display.c **** 	if (IntMaxWindow > 0) {
 675:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 676:src/display.c **** 	  if (*q == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  if (q[1] == '1')
 679:src/display.c **** 	    n += 2;
 680:src/display.c **** 	  while (n-- > 0)
 681:src/display.c **** 	    *p2++ = '\006';
 682:src/display.c **** 
 683:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 684:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 685:src/display.c **** 	}
 686:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 687:src/display.c ****       }
 688:src/display.c ****       else if (!yreg_enabled
 689:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 690:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 691:src/display.c **** #endif
 692:src/display.c **** 	       ) {
 693:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 694:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 695:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 696:src/display.c **** 	if (shift_char == ' ') {
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\342';
 699:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 700:src/display.c **** 	  *p2++ = '\007';
 701:src/display.c **** 	  *p2++ = '\344';
 702:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 703:src/display.c **** 	}
 704:src/display.c **** 	else
 705:src/display.c **** #endif
 706:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 707:src/display.c **** 	    *p2++ = shift_char;
 708:src/display.c **** 	    *p2++ = '\006';
 709:src/display.c **** 	  }
 710:src/display.c **** 	  else {
 711:src/display.c **** 	    *p2++ = 'D';
 712:src/display.c **** 	  }
 713:src/display.c **** 
 714:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/ccpF0v4D.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\024';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 	if (State2.arrow) {
 720:src/display.c **** 	  *p2++ = ' ';
 721:src/display.c **** 	  *p2 = '\015';
 722:src/display.c **** 	  goto skip;
 723:src/display.c **** 	}
 724:src/display.c **** 
 725:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 726:src/display.c **** 	  if (State2.wascomplex) {
 727:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 728:src/display.c **** 	  }
 729:src/display.c **** 	  else if (rp_prefix) {
 730:src/display.c **** 	    if (RectPolConv == 1) {
 731:src/display.c **** 	      q = "\007\306<";
 732:src/display.c **** 	    }
 733:src/display.c **** 	    else {
 734:src/display.c **** 	      q = "\007\306y";
 735:src/display.c **** 	    }
 736:src/display.c **** 	  }
 737:src/display.c **** 	  p = scopy(buf, q);
 738:src/display.c **** 
 739:src/display.c **** 	  goto display_yreg;
 740:src/display.c **** 	}
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	p2 = scopy(p2, q);
 757:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 758:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 759:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 760:src/display.c **** 	}
 761:src/display.c **** #else
 762:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 763:src/display.c **** 	*p2++ = '\007';
 764:src/display.c **** 	*p2++ = '\342';
 765:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 766:src/display.c **** #endif
 767:src/display.c ****       }
 768:src/display.c ****       else { // yreg_enabled
 769:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 770:src/display.c **** 	if (State2.cmplx) {
 771:src/display.c **** 	  *p2++ = '\007';
ARM GAS  /tmp/ccpF0v4D.s 			page 20


 772:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 773:src/display.c **** 	  *p2++ = shift_char;
 774:src/display.c **** 	  //	  q = "\024";
 775:src/display.c **** 	  *p2++ = '\024';
 776:src/display.c **** 	}
 777:src/display.c **** 	else {// if (shift_char != ' ') {
 778:src/display.c **** 	  *p2++ = '\007';
 779:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 780:src/display.c **** 	  *p2++ = shift_char;
 781:src/display.c **** 	  //	  goto no_copy;
 782:src/display.c **** 	}
 783:src/display.c **** 	//	else
 784:src/display.c **** #endif
 785:src/display.c **** 	  if (State2.wascomplex) {
 786:src/display.c **** 	    q = "\007\207i";
 787:src/display.c **** 	    p = scopy(p, q);
 788:src/display.c **** 	    //	    goto no_copy;
 789:src/display.c **** 	  }
 790:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 791:src/display.c **** 	    q = "\007\307<";
 792:src/display.c **** 	    p = scopy(p, q);
 793:src/display.c **** 	    //	    goto no_copy;
 794:src/display.c **** 	  }
 795:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 796:src/display.c **** 	    q = "\007\307y";
 797:src/display.c **** 	    p = scopy(p, q);
 798:src/display.c **** 	    //	    goto no_copy;
 799:src/display.c **** 	  }
 800:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 801:src/display.c **** 	  //	  else
 802:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 803:src/display.c **** 	    //	    q = "\007\207\007";
 804:src/display.c **** 	      *p2++ = '\007';
 805:src/display.c **** 	      *p2++ = '\207';
 806:src/display.c **** 	      *p2++ = '\007';	    
 807:src/display.c **** 	    }
 808:src/display.c **** 	    else {
 809:src/display.c **** 	      *p2++ = '\007';
 810:src/display.c **** 	      *p2++ = '\207';
 811:src/display.c **** 	      *p2++ = ' ';
 812:src/display.c **** 	    }
 813:src/display.c **** #endif
 814:src/display.c **** 	    //	else { 
 815:src/display.c **** #ifndef SHOW_STACK_SIZE
 816:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 817:src/display.c **** 	  p2 = scopy(p2, q);
 818:src/display.c **** #else
 819:src/display.c **** 	  if (is_dblmode()) {
 820:src/display.c **** 	    *p2++ = '\007';
 821:src/display.c **** 	    *p2++ = '\342';
 822:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 823:src/display.c **** 	    //	    q = "\007\345D";
 824:src/display.c **** 	    *p2++ = '\007';
 825:src/display.c **** 	    *p2++ = '\345';
 826:src/display.c **** 	    *p2++ = 'D';
 827:src/display.c **** 	  }
 828:src/display.c **** 	  else {
ARM GAS  /tmp/ccpF0v4D.s 			page 21


 829:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 830:src/display.c **** 	    p2 = scopy(p2, q);
 831:src/display.c **** 	  }
 832:src/display.c **** #endif
 833:src/display.c **** 	  //	}
 834:src/display.c **** 	//	p2 = scopy(p2, q);
 835:src/display.c **** 
 836:src/display.c **** 	switch (UState.date_mode) {
 837:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 838:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 839:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 842:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 845:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 846:src/display.c **** #endif
 847:src/display.c **** #endif
 848:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 849:src/display.c **** 	}
 850:src/display.c **** 	  
 851:src/display.c **** 	//      no_copy:
 852:src/display.c **** 	// display either arrow or datemode
 853:src/display.c **** 	if (State2.arrow) {
 854:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 855:src/display.c **** 	} // no need to skip y display with arrow here
 856:src/display.c **** 	else {
 857:src/display.c **** 	  p2 = scopy(p2, q);
 858:src/display.c **** 	}
 859:src/display.c **** 	if (State2.runmode) {
 860:src/display.c **** 	  decNumber y;
 861:src/display.c **** 	display_yreg:
 862:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 863:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 864:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 865:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 866:src/display.c **** 	   */
 867:src/display.c **** 	  if (is_intmode()) {
 868:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 869:src/display.c **** 	    goto skip;
 870:src/display.c **** 	  }
 871:src/display.c **** 		      
 872:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 873:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 874:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 875:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 876:src/display.c **** 	    if (yreg_hms && State2.hms) {
 877:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 878:src/display.c **** 
 879:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 880:src/display.c **** 	      UState.nothousands = 1;
 881:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 882:src/display.c **** 	      UState.nothousands = saved_nothousands;
 883:src/display.c **** 	      // First replace the '@' character with the degree symbol
 884:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 885:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
ARM GAS  /tmp/ccpF0v4D.s 			page 22


 886:src/display.c **** 	      // then remove the fractional part of the seconds.
 887:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 888:src/display.c **** 	      while (*p) {
 889:src/display.c **** 		replace_char(buf, p[0], p[1]);
 890:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 891:src/display.c **** 		  goto skip;
 892:src/display.c **** 		}
 893:src/display.c **** 		p += 2;
 894:src/display.c **** 	      }
 895:src/display.c **** 	      goto skip;
 896:src/display.c **** 	    }
 897:src/display.c **** 	    if (yreg_fract && UState.fract
 898:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 899:src/display.c **** 		&& !State2.cmplx
 900:src/display.c **** #endif
 901:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 902:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 903:src/display.c **** #endif
 904:src/display.c **** 		&& set_x_fract(&y, p)) {
 905:src/display.c **** 	      char ltgteq;
 906:src/display.c **** 
 907:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 908:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 909:src/display.c **** 	      ltgteq = *q;
 910:src/display.c **** 	      switch (ltgteq) {
 911:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 912:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 913:src/display.c **** 	      }
 914:src/display.c **** 	      scopy(q, "\007\344?");
 915:src/display.c **** 	      q[2] = ltgteq;
 916:src/display.c **** 
 917:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 918:src/display.c **** 		goto skip;
 919:src/display.c **** 	      }
 920:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 921:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 922:src/display.c **** 		goto skip;
 923:src/display.c **** 	      }
 924:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 925:src/display.c **** 	    }
 926:src/display.c **** 	  }
 927:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 928:src/display.c **** 	    int extra_pixels;
 929:src/display.c **** 
 930:src/display.c **** 	    set_x_dn(&y, p, &n);
 931:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 932:src/display.c **** 	    if (extra_pixels <= 0)
 933:src/display.c **** 	      break;
 934:src/display.c **** 
 935:src/display.c **** 	    xset(p, '\0', n+10);
 936:src/display.c **** 
 937:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 938:src/display.c **** 	  }
 939:src/display.c **** 	}
 940:src/display.c ****       }
 941:src/display.c ****       
 942:src/display.c ****     skip:
ARM GAS  /tmp/ccpF0v4D.s 			page 23


 943:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 944:src/display.c ****       set_status_top_always(buf2);
 945:src/display.c ****       
 946:src/display.c ****     }
 947:src/display.c **** #else
 948:src/display.c ****     static void annunciators(void) {
 949:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 950:src/display.c ****       char buf[42], *p = buf, *q="";
 951:src/display.c ****       int n;
 952:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 953:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 954:src/display.c ****       // Constant variables and code branches depending on a constant variable
 955:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 956:src/display.c ****       // feature run-time configurable if needed.
 957:src/display.c **** #ifdef INCLUDE_YREG_CODE
 958:src/display.c **** #  ifdef YREG_ALWAYS_ON
 959:src/display.c ****       const int yreg_enabled = 1;
 960:src/display.c **** #  else
 961:src/display.c ****       const int yreg_enabled = UState.show_y;
 962:src/display.c **** #  endif
 963:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 964:src/display.c ****       const int yreg_hms = 1;
 965:src/display.c **** #  else
 966:src/display.c ****       const int yreg_hms = 0;
 967:src/display.c **** #  endif
 968:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 969:src/display.c ****       const int yreg_fract = 1;
 970:src/display.c **** #  else
 971:src/display.c ****       const int yreg_fract = 0;
 972:src/display.c **** #  endif
 973:src/display.c **** #else
 974:src/display.c ****       const int yreg_enabled = 0;
 975:src/display.c ****       const int yreg_hms = 0;
 976:src/display.c ****       const int yreg_fract = 0;
 977:src/display.c **** #endif
 978:src/display.c **** #ifdef RP_PREFIX
 979:src/display.c ****       const int rp_prefix = 1;
 980:src/display.c **** #else
 981:src/display.c ****       const int rp_prefix = 0;
 982:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 983:src/display.c **** #endif
 984:src/display.c ****       // Indicates whether font escape code is compiled in.
 985:src/display.c ****       // This variable will always be set at compile time.
 986:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 987:src/display.c ****       const int has_FONT_ESCAPE = 1;
 988:src/display.c **** #else
 989:src/display.c ****       const int has_FONT_ESCAPE = 0;
 990:src/display.c **** #endif
 991:src/display.c **** 
 992:src/display.c ****       xset(buf, '\0', sizeof(buf));
 993:src/display.c ****       
 994:src/display.c ****       if (is_intmode()) {
 995:src/display.c **** #ifdef SHOW_STACK_SIZE
 996:src/display.c **** 	if (shift_char == ' ') {
 997:src/display.c **** 	  *p++ = '\007';
 998:src/display.c **** 	  *p++ = '\346';
 999:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
ARM GAS  /tmp/ccpF0v4D.s 			page 24


1000:src/display.c **** 	}
1001:src/display.c **** 	else
1002:src/display.c **** #endif
1003:src/display.c **** 	  {
1004:src/display.c **** 	    *p++ = shift_char;
1005:src/display.c **** 	    *p++ = '\006';
1006:src/display.c **** 	  }
1007:src/display.c **** 
1008:src/display.c **** 	switch(int_mode()) {
1009:src/display.c **** 	default:
1010:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1011:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1012:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1013:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1014:src/display.c **** 	}
1015:src/display.c **** 	q = scopy(p, q);
1016:src/display.c **** 	*q++ = '\006';
1017:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1018:src/display.c **** 
1019:src/display.c **** 	if (IntMaxWindow > 0) {
1020:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1021:src/display.c **** 	  if (*q == '1')
1022:src/display.c **** 	    n += 2;
1023:src/display.c **** 	  if (q[1] == '1')
1024:src/display.c **** 	    n += 2;
1025:src/display.c **** 	  while (n-- > 0)
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 
1028:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1029:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1030:src/display.c **** 	}
1031:src/display.c ****       }
1032:src/display.c ****       else if (!yreg_enabled
1033:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1034:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1035:src/display.c **** #endif
1036:src/display.c **** 	       ) {
1037:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1038:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1039:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\342';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	  *p++ = '\007';
1045:src/display.c **** 	  *p++ = '\344';
1046:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1047:src/display.c **** 	}
1048:src/display.c **** 	else
1049:src/display.c **** #endif
1050:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1051:src/display.c **** 	    *p++ = shift_char;
1052:src/display.c **** 	    *p++ = '\006';
1053:src/display.c **** 	  }
1054:src/display.c **** 	  else {
1055:src/display.c **** 	    *p++ = 'D';
1056:src/display.c **** 	  }
ARM GAS  /tmp/ccpF0v4D.s 			page 25


1057:src/display.c **** 
1058:src/display.c **** 	if (State2.cmplx) {
1059:src/display.c **** 	  *p++ = ' ';
1060:src/display.c **** 	  *p = '\024';
1061:src/display.c **** 	  goto skip;
1062:src/display.c **** 	}
1063:src/display.c **** 	if (State2.arrow) {
1064:src/display.c **** 	  *p++ = ' ';
1065:src/display.c **** 	  *p = '\015';
1066:src/display.c **** 	  goto skip;
1067:src/display.c **** 	}
1068:src/display.c **** 
1069:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1070:src/display.c **** 	  if (State2.wascomplex) {
1071:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1072:src/display.c **** 	  }
1073:src/display.c **** 	  else if (rp_prefix) {
1074:src/display.c **** 	    if (RectPolConv == 1) {
1075:src/display.c **** 	      q = "\007\306<";
1076:src/display.c **** 	    }
1077:src/display.c **** 	    else {
1078:src/display.c **** 	      q = "\007\306y";
1079:src/display.c **** 	    }
1080:src/display.c **** 	  }
1081:src/display.c **** 	  p = scopy(buf, q);
1082:src/display.c **** 
1083:src/display.c **** 	  goto display_yreg;
1084:src/display.c **** 	}
1085:src/display.c **** 
1086:src/display.c **** 	switch (UState.date_mode) {
1087:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1088:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1089:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1090:src/display.c **** #endif
1091:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1092:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1093:src/display.c **** #endif
1094:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1095:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1096:src/display.c **** #endif
1097:src/display.c **** #endif
1098:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1099:src/display.c **** 	}
1100:src/display.c **** 	p = scopy(p, q);
1101:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1102:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1103:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1104:src/display.c **** 	}
1105:src/display.c **** #else
1106:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1107:src/display.c **** 	*p++ = '\007';
1108:src/display.c **** 	*p++ = '\342';
1109:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1110:src/display.c **** #endif
1111:src/display.c ****       }
1112:src/display.c ****       else { // yreg_enabled
1113:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccpF0v4D.s 			page 26


1114:src/display.c **** 	if (State2.cmplx) {
1115:src/display.c **** 	  *p++ = '\007';
1116:src/display.c **** 	  *p++ = '\344';
1117:src/display.c **** 	  *p++ = shift_char;
1118:src/display.c **** 	  q = "\024";
1119:src/display.c **** 	}
1120:src/display.c **** 	else if (shift_char != ' ') {
1121:src/display.c **** 	  *p++ = '\007';
1122:src/display.c **** 	  *p++ = '\307';
1123:src/display.c **** 	  *p++ = shift_char;
1124:src/display.c **** 	  goto no_copy;
1125:src/display.c **** 	}
1126:src/display.c **** 	else
1127:src/display.c **** #endif
1128:src/display.c **** 	  if (State2.wascomplex) {
1129:src/display.c **** 	    q = "\007\207i";
1130:src/display.c **** 	  }
1131:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1132:src/display.c **** 	    q = "\007\307<";
1133:src/display.c **** 	  }
1134:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1135:src/display.c **** 	    q = "\007\307y";
1136:src/display.c **** 	  }
1137:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1138:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1139:src/display.c **** 	    q = "\007\207\007";
1140:src/display.c **** 	  }
1141:src/display.c **** #endif
1142:src/display.c **** 	  else {
1143:src/display.c **** #ifndef SHOW_STACK_SIZE
1144:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1145:src/display.c **** #else
1146:src/display.c **** 	    if (is_dblmode()) {
1147:src/display.c **** 	      *p++ = '\007';
1148:src/display.c **** 	      *p++ = '\342';
1149:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1150:src/display.c **** 	      q = "\007\345D";
1151:src/display.c **** 	    }
1152:src/display.c **** 	    else {
1153:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1154:src/display.c **** 	    }
1155:src/display.c **** #endif
1156:src/display.c **** 	  }
1157:src/display.c **** 	p = scopy(p, q);
1158:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1159:src/display.c ****       no_copy:
1160:src/display.c **** #endif
1161:src/display.c **** 
1162:src/display.c **** 	if (State2.arrow) {
1163:src/display.c **** 	  scopy(p, "\007\204\006\015");
1164:src/display.c **** 	} else if (State2.runmode) {
1165:src/display.c **** 	  decNumber y;
1166:src/display.c **** 	display_yreg:
1167:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1168:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1169:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1170:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
ARM GAS  /tmp/ccpF0v4D.s 			page 27


1171:src/display.c **** 	   */
1172:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1173:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1174:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1175:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1176:src/display.c **** 	    if (yreg_hms && State2.hms) {
1177:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1178:src/display.c **** 
1179:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1180:src/display.c **** 	      UState.nothousands = 1;
1181:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1182:src/display.c **** 	      UState.nothousands = saved_nothousands;
1183:src/display.c **** 	      // First replace the '@' character with the degree symbol
1184:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1185:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1186:src/display.c **** 	      // then remove the fractional part of the seconds.
1187:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1188:src/display.c **** 	      while (*p) {
1189:src/display.c **** 		replace_char(buf, p[0], p[1]);
1190:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1191:src/display.c **** 		  goto skip;
1192:src/display.c **** 		}
1193:src/display.c **** 		p += 2;
1194:src/display.c **** 	      }
1195:src/display.c **** 	      goto skip;
1196:src/display.c **** 	    }
1197:src/display.c **** 	    if (yreg_fract && UState.fract
1198:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1199:src/display.c **** 		&& !State2.cmplx
1200:src/display.c **** #endif
1201:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1202:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1203:src/display.c **** #endif
1204:src/display.c **** 		&& set_x_fract(&y, p)) {
1205:src/display.c **** 	      char ltgteq;
1206:src/display.c **** 
1207:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1208:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1209:src/display.c **** 	      ltgteq = *q;
1210:src/display.c **** 	      switch (ltgteq) {
1211:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1212:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1213:src/display.c **** 	      }
1214:src/display.c **** 	      scopy(q, "\007\344?");
1215:src/display.c **** 	      q[2] = ltgteq;
1216:src/display.c **** 
1217:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1218:src/display.c **** 		goto skip;
1219:src/display.c **** 	      }
1220:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1221:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1222:src/display.c **** 		goto skip;
1223:src/display.c **** 	      }
1224:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1225:src/display.c **** 	    }
1226:src/display.c **** 	  }
1227:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
ARM GAS  /tmp/ccpF0v4D.s 			page 28


1228:src/display.c **** 	    int extra_pixels;
1229:src/display.c **** 
1230:src/display.c **** 	    set_x_dn(&y, p, &n);
1231:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1232:src/display.c **** 	    if (extra_pixels <= 0)
1233:src/display.c **** 	      break;
1234:src/display.c **** 
1235:src/display.c **** 	    xset(p, '\0', n+10);
1236:src/display.c **** 
1237:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1238:src/display.c **** 	  }
1239:src/display.c **** 	}
1240:src/display.c ****       }
1241:src/display.c ****       
1242:src/display.c ****     skip:	set_status_top(buf);
1243:src/display.c ****     }
1244:src/display.c **** #endif //top_row
1245:src/display.c ****     static void disp_x(const char *p) {
1246:src/display.c ****       int i;
1247:src/display.c ****       int gotdot = -1;
1248:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1249:src/display.c ****       const
1250:src/display.c **** #endif
1251:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1252:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1253:src/display.c ****       int overflow_to_left = 0;
1254:src/display.c **** #endif
1255:src/display.c **** 
1256:src/display.c ****       if (*p == '-') {
1257:src/display.c **** 	SET_MANT_SIGN;
1258:src/display.c **** 	p++;
1259:src/display.c ****       }
1260:src/display.c **** 
1261:src/display.c ****       if (is_intmode()) {
1262:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1263:src/display.c **** 	  set_dig(i, *p);
1264:src/display.c **** 	  i += SEGS_PER_DIGIT;
1265:src/display.c **** 	}
1266:src/display.c **** 	carry_overflow();
1267:src/display.c ****       } else {
1268:src/display.c **** 	set_separator_decimal_modes();
1269:src/display.c **** 
1270:src/display.c **** 	i = 0;
1271:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1272:src/display.c **** 	if ( CmdLineDot > 1 ) {
1273:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1274:src/display.c **** 	  const
1275:src/display.c **** #  endif
1276:src/display.c **** 	    int double_dot = 0;
1277:src/display.c **** 	  int j;
1278:src/display.c **** 
1279:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1280:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1281:src/display.c **** 	      gotdot = j;
1282:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	      double_dot = (p[j+1] == '.');
1284:src/display.c **** #  endif
ARM GAS  /tmp/ccpF0v4D.s 			page 29


1285:src/display.c **** 	    }
1286:src/display.c **** 	  }
1287:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1288:src/display.c **** 	  if (j > 0) {
1289:src/display.c **** 	    p += j + 1;
1290:src/display.c **** 	    i = SEGS_PER_DIGIT;
1291:src/display.c **** 	    if (gotdot <= j) {
1292:src/display.c **** 	      gotdot = 0;
1293:src/display.c **** 	      if (double_dot)
1294:src/display.c **** 		p++;
1295:src/display.c **** 	    }
1296:src/display.c **** 	    else if (*p == '.') {
1297:src/display.c **** 	      gotdot = 0;
1298:src/display.c **** 	      p++;
1299:src/display.c **** 	      if (!double_dot)
1300:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1301:src/display.c **** 	    }
1302:src/display.c **** 	    else gotdot = -1;
1303:src/display.c **** 	    set_dig(0, '<');
1304:src/display.c **** 	    overflow_to_left = 1;
1305:src/display.c **** 	  }
1306:src/display.c **** 	  else gotdot = -1;
1307:src/display.c **** 	}
1308:src/display.c **** #endif
1309:src/display.c **** 
1310:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1311:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1312:src/display.c **** 	       && *p != 'D'
1313:src/display.c **** #endif
1314:src/display.c **** 	       ; p++) {
1315:src/display.c **** 	  if (*p == '.') {
1316:src/display.c **** 	    if (gotdot < 0)
1317:src/display.c **** 	      gotdot = i;
1318:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1319:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1320:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1321:src/display.c **** 	      if ( *(p+1) == '.' ) {
1322:src/display.c **** 		p++;
1323:src/display.c **** 	      }
1324:src/display.c **** #  else
1325:src/display.c **** 	      if ( i != gotdot ) {
1326:src/display.c **** #  endif
1327:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1328:src/display.c **** 		i += segs_per_digit;
1329:src/display.c **** 	      }
1330:src/display.c **** 	      else {
1331:src/display.c **** 		if ( CmdLineDot > 1 ) {
1332:src/display.c **** 		  i += segs_per_digit;
1333:src/display.c **** 		}
1334:src/display.c **** 		else {
1335:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1336:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1337:src/display.c **** 		}
1338:src/display.c **** 	      }
1339:src/display.c **** #else
1340:src/display.c **** 	      if (i > 0)
1341:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
ARM GAS  /tmp/ccpF0v4D.s 			page 30


1342:src/display.c **** 	      else {
1343:src/display.c **** 		set_dig(i, '0');
1344:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1345:src/display.c **** 		i += segs_per_digit;
1346:src/display.c **** 	      }
1347:src/display.c **** #endif
1348:src/display.c **** 	    } else {
1349:src/display.c **** 	      set_dig(i, *p);
1350:src/display.c **** 	      i += segs_per_digit;
1351:src/display.c **** 	    }
1352:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1353:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1354:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1355:src/display.c **** #endif
1356:src/display.c **** 	  }
1357:src/display.c **** 
1358:src/display.c **** 	  /* Implement a floating comma */
1359:src/display.c **** 	  if (gotdot < 0)
1360:src/display.c **** 	    gotdot = i;
1361:src/display.c **** 	  for (;;) {
1362:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1363:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1364:src/display.c **** 	      break;
1365:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1366:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1367:src/display.c **** 	      break;
1368:src/display.c **** #endif
1369:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1370:src/display.c **** 	  }
1371:src/display.c **** 
1372:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1373:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1374:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1375:src/display.c **** 	    int flags = 8;
1376:src/display.c **** #  else
1377:src/display.c **** 	    int flags = 12;
1378:src/display.c **** #  endif
1379:src/display.c **** 
1380:src/display.c **** 	    if (*p == 'D')
1381:src/display.c **** 	      flags |= 2;
1382:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1383:src/display.c **** 	      flags |= 16;
1384:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1385:src/display.c **** 	  }
1386:src/display.c **** #else
1387:src/display.c **** 	  if (*p == 'E') {
1388:src/display.c **** 	    p++;
1389:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1390:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1391:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1392:src/display.c **** #  else
1393:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  endif
1395:src/display.c **** 	  } 
1396:src/display.c **** #endif
1397:src/display.c **** 	}
1398:src/display.c ****       }
ARM GAS  /tmp/ccpF0v4D.s 			page 31


1399:src/display.c **** 
1400:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1401:src/display.c **** 
1402:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1403:src/display.c **** 	const int ws = word_size();
1404:src/display.c **** 	unsigned int b;
1405:src/display.c **** 	long long int vs = value;
1406:src/display.c **** 	unsigned long long int v;
1407:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1408:src/display.c **** 	int i, j, k;
1409:src/display.c **** 	int sign = 0;
1410:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1411:src/display.c **** 
1412:src/display.c **** 	switch (State2.smode) {
1413:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1414:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1415:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1416:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1417:src/display.c **** 	default:	b = int_base();	break;
1418:src/display.c **** 	}
1419:src/display.c **** 
1420:src/display.c **** 	if (!res) {
1421:src/display.c **** 	  IntMaxWindow = 0;
1422:src/display.c **** 	  carry_overflow();
1423:src/display.c **** 	}
1424:src/display.c **** 
1425:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1426:src/display.c **** 	  v = extract_value(value, &sign);
1427:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1428:src/display.c **** 	    v = value;
1429:src/display.c **** 	  if (v == 0) {
1430:src/display.c **** 	    if (sign)
1431:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1432:src/display.c **** 	    set_dig_s(dig, '0', res);
1433:src/display.c **** 	    return;
1434:src/display.c **** 	  } else
1435:src/display.c **** 	    for (i=0; v != 0; i++) {
1436:src/display.c **** 	      const int r = v % b;
1437:src/display.c **** 	      v /= b;
1438:src/display.c **** 	      buf[i] = DIGITS[r];
1439:src/display.c **** 	    }
1440:src/display.c **** 	} else {
1441:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1442:src/display.c **** 	  if (ws < 64) {
1443:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1444:src/display.c **** 	    vs &= mask;
1445:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1446:src/display.c **** 	      vs |= ~mask;
1447:src/display.c **** 	  }
1448:src/display.c **** 
1449:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1450:src/display.c **** 	    set_dig_s(dig, '0', res);
1451:src/display.c **** 	    return;
1452:src/display.c **** 	  } else if (!UState.leadzero) {
1453:src/display.c **** 	    v = (unsigned long long int)vs;
1454:src/display.c **** 	    for (i=0; v != 0; i++) {
1455:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccpF0v4D.s 			page 32


1456:src/display.c **** 	      v /= b;
1457:src/display.c **** 	      buf[i] = DIGITS[r];
1458:src/display.c **** 	    }
1459:src/display.c **** 	  } else {
1460:src/display.c **** 	    int n;
1461:src/display.c **** 	    const unsigned int b1 = b >> 1;
1462:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1463:src/display.c **** 	    v = (unsigned long long int)vs;
1464:src/display.c **** 
1465:src/display.c **** 	    n = (ws + fac) / (fac+1);
1466:src/display.c **** 	    for (i=0; i<n; i++) {
1467:src/display.c **** 	      const int r = v % b;
1468:src/display.c **** 	      v /= b;
1469:src/display.c **** 	      buf[i] = DIGITS[r];
1470:src/display.c **** 	    }
1471:src/display.c **** 	  }
1472:src/display.c **** 	}
1473:src/display.c **** #ifdef BIGGER_DISPLAY
1474:src/display.c **** #define MAX_INT_Y_DIG 13
1475:src/display.c **** #else
1476:src/display.c **** #define MAX_INT_Y_DIG 7
1477:src/display.c **** #endif
1478:src/display.c **** 	/* At this point i is the number of digits in the output */
1479:src/display.c **** 	int nd = i;
1480:src/display.c **** 	if (res) {
1481:src/display.c **** 	  if (sign) *res++ = '-';
1482:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1483:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1484:src/display.c **** 	      *res++ = buf[i];
1485:src/display.c **** 	    *res++ = '.';
1486:src/display.c **** 	    *res++ = '.';
1487:src/display.c **** 	  }
1488:src/display.c **** 	  else {
1489:src/display.c **** 	    while (--i >= 0)
1490:src/display.c **** 	      *res++ = buf[i];
1491:src/display.c **** 	  }
1492:src/display.c **** 	} else {
1493:src/display.c **** #if 0
1494:src/display.c **** 	  set_separator_decimal_modes();
1495:src/display.c **** 
1496:src/display.c **** 	  // Allows configuration of digit grouping per base
1497:src/display.c **** 	  static const char grouping[] = 
1498:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1499:src/display.c **** 		    //	   2     3     4     5     6     7     8
1500:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1501:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1502:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1503:src/display.c **** 	    : grouping[b - 2] >> 4;
1504:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1505:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1506:src/display.c **** #else
1507:src/display.c **** 	  // Less flexible but shorter
1508:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1509:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1510:src/display.c **** 	    : b == 16 ? 2 : 3;
1511:src/display.c **** 	  set_separator_decimal_modes();
1512:src/display.c **** #endif
ARM GAS  /tmp/ccpF0v4D.s 			page 33


1513:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1514:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1515:src/display.c **** 	    State2.window = 0;
1516:src/display.c **** 	  buf[i] = '\0';
1517:src/display.c **** 
1518:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1519:src/display.c **** 	  for (k = 0; k < 12; k++)
1520:src/display.c **** 	    if (buf[j + k] == '\0')
1521:src/display.c **** 	      break;
1522:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1523:src/display.c **** 	    int ch = buf[j++];
1524:src/display.c **** 	    if (i >= shift)
1525:src/display.c **** 	      ch -= 030;
1526:src/display.c **** 	    set_dig(dig, ch);
1527:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1528:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1529:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1530:src/display.c **** 	  }
1531:src/display.c **** 	  if (sign) {
1532:src/display.c **** 	    if (dig >= 0)
1533:src/display.c **** 	      set_dig(dig, '-');
1534:src/display.c **** 	    else	SET_MANT_SIGN;
1535:src/display.c **** 	  }
1536:src/display.c **** 	}
1537:src/display.c ****       }
1538:src/display.c **** 
1539:src/display.c ****       /* Handle special cases.
1540:src/display.c ****        * return non-zero if the number is special.
1541:src/display.c ****        */
1542:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1543:src/display.c **** 	if (decNumberIsSpecial(x)) {
1544:src/display.c **** 	  if (decNumberIsNaN(x)) {
1545:src/display.c **** 	    if (res) {
1546:src/display.c **** 	      scopy(res, "NaN");
1547:src/display.c **** 	    } else {
1548:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1549:src/display.c **** #ifndef REALBUILD
1550:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1551:src/display.c **** 	      forceDispPlot=0;
1552:src/display.c **** #endif
1553:src/display.c **** 	    }
1554:src/display.c **** 	    return 1;
1555:src/display.c **** 	  } else {
1556:src/display.c **** 	    if (decNumberIsNegative(x)) {
1557:src/display.c **** 	      if (res) *res++ = '-';
1558:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1559:src/display.c **** 	    }
1560:src/display.c **** 	    if (res)
1561:src/display.c **** 	      *res++ = '\237';
1562:src/display.c **** 	    else {
1563:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1564:src/display.c **** #ifndef REALBUILD
1565:src/display.c **** 	      if (decNumberIsNegative(x)) {
1566:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1567:src/display.c **** 	      }
1568:src/display.c **** 	      else {
1569:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
ARM GAS  /tmp/ccpF0v4D.s 			page 34


1570:src/display.c **** 	      }
1571:src/display.c **** 	      forceDispPlot=0;
1572:src/display.c **** #endif
1573:src/display.c **** 	    }
1574:src/display.c **** 	    return 1;
1575:src/display.c **** 	  }
1576:src/display.c **** 	}
1577:src/display.c **** 	return 0;
1578:src/display.c ****       }
1579:src/display.c **** 
1580:src/display.c **** 
1581:src/display.c ****       /* Extract the two lowest integral digits from the number
1582:src/display.c ****        */
1583:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1584:src/display.c **** 	decNumber n;
1585:src/display.c **** 
1586:src/display.c **** 	decNumberMod(&n, x, &const_100);
1587:src/display.c **** 	*v = dn_to_int(&n);
1588:src/display.c **** 	dn_mulpow10(&n, x, -2);
1589:src/display.c **** 	decNumberTrunc(res, &n);
1590:src/display.c ****       }
1591:src/display.c **** 
1592:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1592 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1593:src/display.c **** 	char b[32];
 276              		.loc 1 1593 2 view .LVU78
1594:src/display.c **** 	int i, j;
 277              		.loc 1 1594 2 view .LVU79
1595:src/display.c **** 
1596:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1596 2 view .LVU80
 279              		.loc 1 1596 12 view .LVU81
1592:src/display.c **** 	char b[32];
 280              		.loc 1 1592 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1597:src/display.c **** 	  if (v == 0)
1598:src/display.c **** 	    b[i] = spaces?' ':'0';
1599:src/display.c **** 	  else {
1600:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1600 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1592:src/display.c **** 	char b[32];
 292              		.loc 1 1592 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1592:src/display.c **** 	char b[32];
ARM GAS  /tmp/ccpF0v4D.s 			page 35


 295              		.loc 1 1592 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1596:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1596 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1597:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1597 4 is_stmt 1 view .LVU87
 303              		.loc 1 1600 6 view .LVU88
 304              		.loc 1 1600 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1601:src/display.c **** 	    v /= 10;
 311              		.loc 1 1601 6 is_stmt 1 view .LVU90
1602:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1602 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1596:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1596 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1597 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1596:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1596 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1602 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1601:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1601 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1602 6 is_stmt 1 view .LVU97
1596:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1596 17 view .LVU98
1596:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1596 12 view .LVU99
1596:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1596 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1596:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1596 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
ARM GAS  /tmp/ccpF0v4D.s 			page 36


 340              	.LVL18:
1596:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1596 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1597 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1598:src/display.c **** 	  else {
 349              		.loc 1 1598 6 is_stmt 1 view .LVU104
1596:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1596 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1596:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1596 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1598:src/display.c **** 	  else {
 355              		.loc 1 1598 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1596:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1596 17 is_stmt 1 view .LVU108
1596:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1596 12 view .LVU109
1596:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1596 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1596:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1596 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1603:src/display.c **** 	  }
1604:src/display.c **** 	}
1605:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1605 2 is_stmt 1 view .LVU112
 371              		.loc 1 1605 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1606:src/display.c **** 	  b[0] = '0';
1607:src/display.c **** 
1608:src/display.c **** 	/* Copy across and appropriately leading space things
1609:src/display.c **** 	 */
1610:src/display.c **** 	j = *jin;
 374              		.loc 1 1610 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1605:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1605 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
ARM GAS  /tmp/ccpF0v4D.s 			page 37


1606:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1606 4 is_stmt 1 view .LVU116
1606:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1606 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1610 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1611:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1611 2 view .LVU119
 386              		.loc 1 1611 8 view .LVU120
1610:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1610 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1611 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1612:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1612 4 is_stmt 1 view .LVU123
 395              	.LBB173:
 396              	.LBB174:
 408:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 408 12 view .LVU124
 398              	.LBE174:
 399              	.LBE173:
 400              		.loc 1 1612 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB178:
 403              	.LBB175:
 408:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 408 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 408:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 408 16 view .LVU127
 408              	.LBE175:
 409              	.LBI173:
 407:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 407 14 is_stmt 1 view .LVU128
 411              	.LBB176:
 408:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 408 3 view .LVU129
 408:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 408 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 408:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 408 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 408:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 408 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
ARM GAS  /tmp/ccpF0v4D.s 			page 38


 422              	.L37:
 410:src/display.c **** }
 423              		.loc 1 410 3 is_stmt 1 view .LVU133
 410:src/display.c **** }
 424              		.loc 1 410 3 is_stmt 0 view .LVU134
 425              	.LBE176:
 426              	.LBE178:
1613:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1613 4 is_stmt 1 view .LVU135
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1611 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1613 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1611 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1614:src/display.c **** 	}
1615:src/display.c **** 	*jin = j;
 436              		.loc 1 1615 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1615 2 is_stmt 1 view .LVU140
 440              		.loc 1 1615 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1616:src/display.c **** 	return str;
1617:src/display.c ****       }
 443              		.loc 1 1617 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1615:src/display.c **** 	return str;
 445              		.loc 1 1615 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1616:src/display.c **** 	return str;
 447              		.loc 1 1616 2 is_stmt 1 view .LVU144
 448              		.loc 1 1617 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB179:
 458              	.LBB177:
 409:src/display.c ****   return res;
 459              		.loc 1 409 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 409:src/display.c ****   return res;
 463              		.loc 1 409 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
ARM GAS  /tmp/ccpF0v4D.s 			page 39


 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE177:
 470              	.LBE179:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 425:src/display.c ****   int i;
 485              		.loc 1 425 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 426:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 426 3 view .LVU149
 427:src/display.c **** 
 490              		.loc 1 427 3 view .LVU150
 425:src/display.c ****   int i;
 491              		.loc 1 425 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 427:src/display.c **** 
 500              		.loc 1 427 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 429 3 is_stmt 1 view .LVU153
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 429 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB180:
 513              	.LBB181:
 409:src/display.c ****   return res;
 514              		.loc 1 409 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
ARM GAS  /tmp/ccpF0v4D.s 			page 40


 517              	.LVL39:
 518              	.L57:
 408:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 408 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 408:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 408 19 view .LVU157
 523              	.LBE181:
 524              	.LBE180:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 429 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB187:
 528              	.LBB182:
 408:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 408 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 410:src/display.c **** }
 532              		.loc 1 410 3 is_stmt 1 view .LVU160
 410:src/display.c **** }
 533              		.loc 1 410 3 is_stmt 0 view .LVU161
 534              	.LBE182:
 535              	.LBE187:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 429 36 is_stmt 1 view .LVU162
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 429 13 view .LVU163
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 429 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 430:src/display.c **** }
 542              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB188:
 544              	.LBB183:
 408:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 408 12 discriminator 3 view .LVU166
 408:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 408 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE183:
 548              	.LBE188:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 429 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB189:
 553              	.LBB184:
 408:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 408 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 408:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 408 16 discriminator 3 view .LVU170
 558              	.LBE184:
ARM GAS  /tmp/ccpF0v4D.s 			page 41


 559              	.LBI180:
 407:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 407 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB185:
 408:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 408 3 discriminator 3 view .LVU172
 563              	.LBE185:
 564              	.LBE189:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 429 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB190:
 569              	.LBB186:
 408:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 408 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 409:src/display.c ****   return res;
 573              		.loc 1 409 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 410:src/display.c **** }
 578              		.loc 1 410 3 view .LVU176
 410:src/display.c **** }
 579              		.loc 1 410 3 is_stmt 0 view .LVU177
 580              	.LBE186:
 581              	.LBE190:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 429 36 is_stmt 1 view .LVU178
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 429 13 view .LVU179
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 429 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 431:src/display.c **** 
 589              		.loc 1 431 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 431:src/display.c **** 
 591              		.loc 1 431 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
ARM GAS  /tmp/ccpF0v4D.s 			page 42


1583:src/display.c **** 	decNumber n;
 606              		.loc 1 1583 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1584:src/display.c **** 
 610              		.loc 1 1584 2 view .LVU184
1586:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1586 2 view .LVU185
1583:src/display.c **** 	decNumber n;
 612              		.loc 1 1583 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1583:src/display.c **** 	decNumber n;
 621              		.loc 1 1583 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1586:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1586 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1586:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1586 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1583:src/display.c **** 	decNumber n;
 630              		.loc 1 1583 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1586:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1586 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1587 2 is_stmt 1 view .LVU192
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1587 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1588:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1588 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1587 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1588:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1588 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
ARM GAS  /tmp/ccpF0v4D.s 			page 43


1589:src/display.c ****       }
 649              		.loc 1 1589 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1590:src/display.c **** 
 654              		.loc 1 1590 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1590:src/display.c **** 
 661              		.loc 1 1590 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1618:src/display.c **** 
1619:src/display.c **** 
1620:src/display.c ****       /* Display the number in H.MS mode.
1621:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1622:src/display.c ****        */
1623:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1624:src/display.c **** 	decNumber x, y, a, t, u;
1625:src/display.c **** 	int j=0;
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1627:src/display.c **** 	unsigned int hr, min, sec, fs;
1628:src/display.c **** 
1629:src/display.c **** 	if (check_special_dn(rgx, res)) {
1630:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1631:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1632:src/display.c **** 	  return;
1633:src/display.c **** 	}
1634:src/display.c **** 
1635:src/display.c **** 	set_separator_decimal_modes();
1636:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1637:src/display.c **** 	dn_abs(&a, rgx);
1638:src/display.c **** 	if (decNumberIsNegative(&x)) {
1639:src/display.c **** 	  if (res != NULL)
1640:src/display.c **** 	    *res++ += '-';
1641:src/display.c **** 	  else
1642:src/display.c **** 	    SET_MANT_SIGN;
1643:src/display.c **** 	  dn_minus(&x, &x);
ARM GAS  /tmp/ccpF0v4D.s 			page 44


1644:src/display.c **** 	}
1645:src/display.c **** 
1646:src/display.c **** 	decNumberHR2HMS(&y, &x);
1647:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1648:src/display.c **** 	decNumberRound(&u, &t);
1649:src/display.c **** 
1650:src/display.c **** 	hms_step(&t, &u, &fs);
1651:src/display.c **** 	hms_step(&u, &t, &sec);
1652:src/display.c **** 	hms_step(&t, &u, &min);
1653:src/display.c **** 	hr = dn_to_int(&t);
1654:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1655:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1656:src/display.c **** 
1657:src/display.c **** 	// degrees
1658:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1659:src/display.c **** 	res = set_dig_s(j, '@', res);
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
1661:src/display.c **** 
1662:src/display.c **** 	// minutes
1663:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1664:src/display.c **** 	res = set_dig_s(j, '\'', res);
1665:src/display.c **** 	j += SEGS_PER_DIGIT;
1666:src/display.c **** 
1667:src/display.c **** 	// seconds
1668:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1669:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1670:src/display.c **** 
1671:src/display.c **** 	// Fractional seconds
1672:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1673:src/display.c **** 
1674:src/display.c **** 	// We're now pointing at the exponent's first digit...
1675:src/display.c **** 	res = set_dig_s(j, '"', res);
1676:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1677:src/display.c **** 
1678:src/display.c **** 	// Check for values too big or small
1679:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1680:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1681:src/display.c **** 	} else if (! dn_eq0(&a)) {
1682:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1683:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1684:src/display.c **** 	  }
1685:src/display.c **** 	}
1686:src/display.c ****       }
1687:src/display.c **** 
1688:src/display.c **** 
1689:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1690:src/display.c **** 	decNumber x, w, n, d, t;
1691:src/display.c **** 	char buf[32], *p = buf;
1692:src/display.c **** 	int j;
1693:src/display.c **** 
1694:src/display.c **** 	if (check_special_dn(rgx, res))
1695:src/display.c **** 	  return 1;
1696:src/display.c **** 	dn_abs(&x, rgx);
1697:src/display.c **** 	if (dn_ge(&x, &const_100000))
1698:src/display.c **** 	  return 0;
1699:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1700:src/display.c **** 	  return 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 45


1701:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1702:src/display.c **** 	  if (res != NULL)
1703:src/display.c **** 	    *res++ += '-';
1704:src/display.c **** 	  else
1705:src/display.c **** 	    SET_MANT_SIGN;
1706:src/display.c **** 	}
1707:src/display.c **** 	decNumberFrac(&w, &x);
1708:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1709:src/display.c **** 
1710:src/display.c **** 	dn_divide(&t, &n, &d);
1711:src/display.c **** 	dn_compare(&t, &t, &w);
1712:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1713:src/display.c **** 
1714:src/display.c **** 	if (dn_eq(&n, &d)) {
1715:src/display.c **** 	  dn_inc(&w);
1716:src/display.c **** 	  decNumberZero(&n);
1717:src/display.c **** 	}
1718:src/display.c **** 
1719:src/display.c **** 	if (!UState.improperfrac) {
1720:src/display.c **** 	  if (!dn_eq0(&w)) {
1721:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1722:src/display.c **** 	    *p++ = ' ';
1723:src/display.c **** 	  }
1724:src/display.c **** 	} else {
1725:src/display.c **** 	  dn_multiply(&x, &w, &d);
1726:src/display.c **** 	  dn_add(&n, &n, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1729:src/display.c **** 	*p++ = '/';
1730:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1731:src/display.c **** 	*p = '\0';
1732:src/display.c **** 	if ((p - 12) > buf) {
1733:src/display.c **** 	  p -= 12;
1734:src/display.c **** 	  *p = '<';
1735:src/display.c **** 	} else	p = buf;
1736:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1737:src/display.c **** 	  res = set_dig_s(j, *p, res);
1738:src/display.c **** 	  j += SEGS_PER_DIGIT;
1739:src/display.c **** 	}
1740:src/display.c **** 
1741:src/display.c **** 	if (dn_eq0(&t))
1742:src/display.c **** 	  p = (char *)S7_fract_EQ;
1743:src/display.c **** 	else if (decNumberIsNegative(&t))
1744:src/display.c **** 	  p = (char *)S7_fract_LT;
1745:src/display.c **** 	else
1746:src/display.c **** 	  p = (char *)S7_fract_GT;
1747:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1748:src/display.c **** 	  res = set_dig_s(j, *p, res);
1749:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1750:src/display.c **** 	}
1751:src/display.c **** 	return 1;
1752:src/display.c ****       }
1753:src/display.c **** 
1754:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1755:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1756:src/display.c **** 	decNumber c;
1757:src/display.c **** 	int true_exp, x=0;
ARM GAS  /tmp/ccpF0v4D.s 			page 46


1758:src/display.c **** 	int min_pos_exp, max_neg_exp;
1759:src/display.c **** 
1760:src/display.c **** 	if ( mode != MODE_STD ) {
1761:src/display.c **** 	  min_pos_exp = 9;
1762:src/display.c **** 	  max_neg_exp = -5;
1763:src/display.c **** 	}
1764:src/display.c **** 	else {
1765:src/display.c **** 	  min_pos_exp = 12;
1766:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1767:src/display.c **** 	}
1768:src/display.c **** 
1769:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1770:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1771:src/display.c **** 
1772:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1773:src/display.c **** 	  x = *dd;
1774:src/display.c **** 	}
1775:src/display.c **** 
1776:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1777:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1778:src/display.c **** 	  *dd += -true_exp;
1779:src/display.c **** 	  return MODE_FIX;
1780:src/display.c **** 	}
1781:src/display.c **** 
1782:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1783:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1784:src/display.c **** 	}
1785:src/display.c **** 	else {
1786:src/display.c **** 	  return MODE_STD;
1787:src/display.c **** 	}
1788:src/display.c ****       }
1789:src/display.c **** #else
1790:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1791:src/display.c **** 	decNumber b, c;
1792:src/display.c **** 
1793:src/display.c **** 	dn_1(&b);
1794:src/display.c **** 	b.exponent -= UState.dispdigs;
1795:src/display.c **** 	dn_abs(&c, z);
1796:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1797:src/display.c **** 	  return MODE_FIX;
1798:src/display.c **** 	return MODE_STD;
1799:src/display.c ****       }
1800:src/display.c **** #endif
1801:src/display.c **** 
1802:src/display.c ****       /* SHOW display mode
1803:src/display.c ****        * in double precision show left or right part
1804:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1805:src/display.c ****        */
1806:src/display.c ****       static void show_x(char *x, int exp) {
1807:src/display.c **** 	const int dbl = is_dblmode();
1808:src/display.c **** 	char *p;
1809:src/display.c **** 	int i, j;
1810:src/display.c **** 	char *upper_str;
1811:src/display.c **** 	enum separator_modes separator_mode;
1812:src/display.c **** 	char decimal_mark;
1813:src/display.c **** 	char thousands_sep;
1814:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
ARM GAS  /tmp/ccpF0v4D.s 			page 47


1815:src/display.c **** 	const int grouping = 0;
1816:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1817:src/display.c **** 	const int grouping = !UState.nothousands;
1818:src/display.c **** #else
1819:src/display.c **** 	const int grouping = 1;
1820:src/display.c **** #endif
1821:src/display.c **** 	int negative;
1822:src/display.c **** 
1823:src/display.c **** 	if (x[0] == '-') {
1824:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1825:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1826:src/display.c **** 
1827:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1828:src/display.c **** 	  xcopy(x, small_minus, 4);
1829:src/display.c **** 	  x += 4;
1830:src/display.c **** 	  negative = 4;
1831:src/display.c **** #else
1832:src/display.c **** 	  ++x;
1833:src/display.c **** 	  negative = 1;
1834:src/display.c **** #endif
1835:src/display.c **** 	}
1836:src/display.c **** 	else negative = 0;
1837:src/display.c **** 
1838:src/display.c **** 	p = find_char(x, '\0');
1839:src/display.c **** 	xset(p, '0', 34 - (p - x));
1840:src/display.c **** 
1841:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1842:src/display.c **** 	  separator_mode = SEP_COMMA;
1843:src/display.c **** 	  decimal_mark = '.';
1844:src/display.c **** 	  thousands_sep = ',';
1845:src/display.c **** 	}
1846:src/display.c **** 	else {
1847:src/display.c **** 	  separator_mode = SEP_DOT;
1848:src/display.c **** 	  decimal_mark = ',';
1849:src/display.c **** 	  thousands_sep = '.';
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	if (State2.window) { // right half in double precision mode
1853:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1854:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1855:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1856:src/display.c **** 
1857:src/display.c **** 	  upper_str = x + 3;
1858:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1859:src/display.c **** 	  if (grouping) {
1860:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1861:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1862:src/display.c **** 	    x += 3 + 13 + 7;
1863:src/display.c **** 	  }
1864:src/display.c **** 	  else x += 3 + 13 + 6;
1865:src/display.c **** #else
1866:src/display.c **** 	  upper_str = x + 13;
1867:src/display.c **** 	  xset(upper_str, '.', 3);
1868:src/display.c **** 	  if (grouping) {
1869:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1870:src/display.c **** 	    upper_str[6] = thousands_sep;
1871:src/display.c **** 	    x += 13 + 3 + 7;
ARM GAS  /tmp/ccpF0v4D.s 			page 48


1872:src/display.c **** 	  }
1873:src/display.c **** 	  else x += 13 + 3 + 6;
1874:src/display.c **** #endif
1875:src/display.c **** 	  negative = 0;
1876:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1877:src/display.c **** 	}
1878:src/display.c **** 	else {
1879:src/display.c **** 	  upper_str = x;
1880:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1881:src/display.c **** 	  x[1] = decimal_mark;
1882:src/display.c **** 	  if (grouping) {
1883:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1884:src/display.c **** 	    x[5] = thousands_sep;
1885:src/display.c **** 	    x += 9;
1886:src/display.c **** 	  }
1887:src/display.c **** 	  else x += 8;
1888:src/display.c **** 	  if (dbl) {
1889:src/display.c **** 	    if (exp < 0) {
1890:src/display.c **** 	      x[9] = '-';
1891:src/display.c **** 	      exp = -exp;
1892:src/display.c **** 	    }
1893:src/display.c **** 	    else
1894:src/display.c **** 	      x[9] = ' ';
1895:src/display.c **** 	    j = exp / 1000;
1896:src/display.c **** 	    x[10] = '0' + j;
1897:src/display.c **** 	    exp -= 1000 * j;
1898:src/display.c **** 	  }
1899:src/display.c **** 	  else {
1900:src/display.c **** 	    x[9] = '\0';
1901:src/display.c **** 	    x[10] = '\0';
1902:src/display.c **** 	  }
1903:src/display.c **** 	  xcopy(x + 1, x, 11);
1904:src/display.c **** 	  *x = 0;
1905:src/display.c **** 	  set_exp(exp, 1, CNULL);
1906:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1907:src/display.c **** 	}
1908:src/display.c **** 	if (grouping) {
1909:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1910:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1911:src/display.c **** 	  }
1912:src/display.c **** 	}
1913:src/display.c **** 
1914:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1915:src/display.c **** 	  set_dig(j, x[i]);
1916:src/display.c **** 
1917:src/display.c **** 	*x = '\0';
1918:src/display.c **** 	set_status(upper_str - negative);
1919:src/display.c ****       }
1920:src/display.c **** 
1921:src/display.c **** 
1922:src/display.c ****       /* Display the X register in the numeric portion of the display.
1923:src/display.c ****        * We have to account for the various display modes and numbers of
1924:src/display.c ****        * digits.
1925:src/display.c ****        */
1926:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1927:src/display.c **** 	decNumber z;
1928:src/display.c **** 	int digits = DISPLAY_DIGITS;
ARM GAS  /tmp/ccpF0v4D.s 			page 49


1929:src/display.c **** 
1930:src/display.c **** 	if (dbl)
1931:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1932:src/display.c **** 	else
1933:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1934:src/display.c **** 	set_x_dn(&z, res, &digits);
1935:src/display.c ****       }
1936:src/display.c **** 
1937:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1938:src/display.c **** 	char x[50], *obp = x;
1939:src/display.c **** 	int odig = 0;
1940:src/display.c **** 	int show_exp = 0;
1941:src/display.c **** 	int j;
1942:src/display.c **** 	char mantissa[64];
1943:src/display.c **** 	int exp = 0;
1944:src/display.c **** 	char *p = mantissa;
1945:src/display.c **** 	char *r;
1946:src/display.c **** 	const char *q;
1947:src/display.c **** 	int count, i;
1948:src/display.c **** 	int extra_digits = 0;
1949:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1950:src/display.c **** 	int dd;
1951:src/display.c **** 	int dispdigs;
1952:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1953:src/display.c **** #else
1954:src/display.c **** 	int dd = UState.dispdigs;
1955:src/display.c **** 	int mode = UState.dispmode;
1956:src/display.c **** #endif
1957:src/display.c **** 	int c;
1958:src/display.c **** 	int negative = 0;
1959:src/display.c **** 	int trimzeros = 0;
1960:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1961:src/display.c **** 	const int show_large_exponent = 0;
1962:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1963:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1964:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1965:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1966:src/display.c **** #else
1967:src/display.c **** 	const int show_large_exponent = 1;
1968:src/display.c **** #endif
1969:src/display.c **** 
1970:src/display.c **** 	set_separator_decimal_modes();
1971:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1972:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1973:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1974:src/display.c **** 	    if (State2.hms) {
1975:src/display.c **** 	      set_x_hms(z, res);
1976:src/display.c **** 	      return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else if (UState.fract) {
1979:src/display.c **** 	      if (set_x_fract(z, res))
1980:src/display.c **** 		return;
1981:src/display.c **** 	    }
1982:src/display.c **** 	  }
1983:src/display.c **** 	}		
1984:src/display.c **** #else
1985:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
ARM GAS  /tmp/ccpF0v4D.s 			page 50


1986:src/display.c **** 	  if (State2.hms) {
1987:src/display.c **** 	    set_x_hms(z, res);
1988:src/display.c **** 	    State2.hms = 0;
1989:src/display.c **** 	    return;
1990:src/display.c **** 	  } else if (UState.fract) {
1991:src/display.c **** 	    if (set_x_fract(z, res))
1992:src/display.c **** 	      return;
1993:src/display.c **** 	  }
1994:src/display.c **** 	}
1995:src/display.c **** #endif
1996:src/display.c **** 
1997:src/display.c **** 	if (check_special_dn(z, res))
1998:src/display.c **** 	  return;
1999:src/display.c **** 
2000:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2001:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2002:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2003:src/display.c **** 	  z->exponent = 0;
2004:src/display.c **** 	}
2005:src/display.c **** 
2006:src/display.c **** 	xset(x, '\0', sizeof(x));
2007:src/display.c **** 
2008:src/display.c **** 	if (dn_eq0(z)) {
2009:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2010:src/display.c **** 	    x[0] = '-';
2011:src/display.c **** 	    x[1] = '0';
2012:src/display.c **** 	  } else
2013:src/display.c **** 	    x[0] = '0';
2014:src/display.c **** 	} else
2015:src/display.c **** 	  decNumberToString(z, x);
2016:src/display.c **** 
2017:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2018:src/display.c **** 	  show_x(x, exp);
2019:src/display.c **** 	  return;
2020:src/display.c **** 	}
2021:src/display.c **** 
2022:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2023:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2024:src/display.c **** 	  //  ALL mode: fill the display
2025:src/display.c **** 	  dd = *display_digits - 1;
2026:src/display.c **** 	else
2027:src/display.c **** 	  dd = dispdigs;
2028:src/display.c **** 
2029:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2030:src/display.c **** 	  int orig_mode = mode;
2031:src/display.c **** 
2032:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2033:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2034:src/display.c **** 	    // allow zeros to be trimmed
2035:src/display.c **** 	    trimzeros = 1;
2036:src/display.c **** 	  if (orig_mode == MODE_STD)
2037:src/display.c **** 	    dd = *display_digits - 1;
2038:src/display.c ****  	}
2039:src/display.c **** #else
2040:src/display.c **** 	if (mode == MODE_STD) {
2041:src/display.c **** 	  mode = std_round_fix(z);
2042:src/display.c **** 	  trimzeros = 1;
ARM GAS  /tmp/ccpF0v4D.s 			page 51


2043:src/display.c **** 	  dd = *display_digits - 1;
2044:src/display.c **** 	} else if (dd >= *display_digits)
2045:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2046:src/display.c **** 	  dd = *display_digits - 1;
2047:src/display.c **** #endif
2048:src/display.c **** 
2049:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2050:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2051:src/display.c **** 
2052:src/display.c **** 	q = find_char(x, 'E');
2053:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2054:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2055:src/display.c **** 	if (q == NULL) exp = 0;
2056:src/display.c **** 	else {
2057:src/display.c **** 	  exp = s_to_i(q+1);
2058:src/display.c **** 	  if (*q == 'D') exp = -exp;
2059:src/display.c **** 	}
2060:src/display.c **** #else
2061:src/display.c **** 	if (q == NULL) exp = 0;
2062:src/display.c **** 	else exp = s_to_i(q+1);
2063:src/display.c **** #endif
2064:src/display.c **** 
2065:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2066:src/display.c **** 	for (q=x; *q == ' '; q++);
2067:src/display.c **** 	if (!res) {
2068:src/display.c **** 	  CLR_EXP_SIGN;
2069:src/display.c **** 	  CLR_MANT_SIGN;
2070:src/display.c **** 	}
2071:src/display.c **** 	if (*q == '-') {
2072:src/display.c **** 	  negative = 1;
2073:src/display.c **** 	  q++;
2074:src/display.c **** 	} else if (*q == '+')
2075:src/display.c **** 	  q++;
2076:src/display.c **** 	for (; *q == '0'; q++);
2077:src/display.c **** 	if (*q == '.') {
2078:src/display.c **** 	  do
2079:src/display.c **** 	    exp--;
2080:src/display.c **** 	  while (*++q == '0');
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2082:src/display.c **** 	    *p++ = *q++;
2083:src/display.c **** 	} else {
2084:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2085:src/display.c **** 	    *p++ = *q++;
2086:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2087:src/display.c **** 	    *p++ = *q++;
2088:src/display.c **** 	    exp++;
2089:src/display.c **** 	  }
2090:src/display.c **** 	  if (*q == '.') {
2091:src/display.c **** 	    q++;
2092:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2093:src/display.c **** 	      *p++ = *q++;
2094:src/display.c **** 	  }
2095:src/display.c **** 	}
2096:src/display.c **** 
2097:src/display.c **** 	if (mode == MODE_FIX) {
2098:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2099:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccpF0v4D.s 			page 52


2100:src/display.c **** 	  else {
2101:src/display.c **** 	    extra_digits = exp;
2102:src/display.c **** 	    /* We might have push the fixed decimals off the
2103:src/display.c **** 	     * screen so adjust if so.
2104:src/display.c **** 	     */
2105:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2106:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2107:src/display.c **** 	  }
2108:src/display.c **** 	}
2109:src/display.c **** 
2110:src/display.c **** 	// Round the mantissa to the number of digits desired
2111:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2112:src/display.c **** 	if (*p >= '5') {	// Round up
2113:src/display.c **** 	  *p = '0';
2114:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2115:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2116:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2117:src/display.c **** 	    mantissa[0] = '1';
2118:src/display.c **** 	    exp++;
2119:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2120:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2121:src/display.c **** 	      extra_digits = 0;
2122:src/display.c **** 	    }
2123:src/display.c **** 	  } else {
2124:src/display.c **** 	    while (*--p == '9')
2125:src/display.c **** 	      *p = '0';
2126:src/display.c **** 	    (*p)++;
2127:src/display.c **** 	  }
2128:src/display.c **** 	}
2129:src/display.c **** 
2130:src/display.c **** 	// Zap what is left
2131:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2132:src/display.c **** 
2133:src/display.c **** 	p = mantissa;
2134:src/display.c **** 	switch (mode) {
2135:src/display.c **** 	default:
2136:src/display.c **** 	case MODE_STD:   
2137:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2138:src/display.c **** 	  if (count != *display_digits)
2139:src/display.c **** 	    count++;
2140:src/display.c **** 	  // Too big or too small to fit on display
2141:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2142:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2143:src/display.c **** 	    case -1:
2144:src/display.c **** 	    case 2:
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	      dd--;
2148:src/display.c **** 	      exp--;
2149:src/display.c **** 	    case -2:
2150:src/display.c **** 	    case 1:
2151:src/display.c **** 	      *obp++ = *p++;
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	      dd--;
2154:src/display.c **** 	      exp--;
2155:src/display.c **** 	    case 0:
2156:src/display.c **** 	      ;
ARM GAS  /tmp/ccpF0v4D.s 			page 53


2157:src/display.c **** 	    };
2158:src/display.c **** 	    *obp++ = *p++;
2159:src/display.c **** 	    odig++;
2160:src/display.c **** 	    *obp++ = '.';
2161:src/display.c **** 	    for (i=1; i<count; i++) {
2162:src/display.c **** 	      *obp++ = *p++;
2163:src/display.c **** 	      odig++;
2164:src/display.c **** 	    }
2165:src/display.c **** 	    show_exp = 1;
2166:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2167:src/display.c **** 	    for(i=0; i<=exp; i++) {
2168:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2169:src/display.c **** 		*obp++ = ',';
2170:src/display.c **** 	      *obp++ = *p++;
2171:src/display.c **** 	      odig++;
2172:src/display.c **** 	    }
2173:src/display.c **** 	    *obp++ = '.';
2174:src/display.c **** 	    if (count > (exp + 1)) {
2175:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2176:src/display.c **** 		*obp++ = *p++;
2177:src/display.c **** 		odig++;
2178:src/display.c **** 	      }
2179:src/display.c **** 	    }
2180:src/display.c **** 	  } else {		// All digits to right of decimal point
2181:src/display.c **** 	    *obp++ = '0';
2182:src/display.c **** 	    odig++;
2183:src/display.c **** 	    *obp++ = '.';
2184:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2185:src/display.c **** 	      *obp++ = '0';
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	    for (i=0; i<count; i++) {
2189:src/display.c **** 	      *obp++ = *p++;
2190:src/display.c **** 	      odig++;
2191:src/display.c **** 	    }
2192:src/display.c **** 	  }
2193:src/display.c **** 	  break;
2194:src/display.c **** 
2195:src/display.c **** 	case MODE_FIX:
2196:src/display.c **** 	  j = 0;
2197:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2198:src/display.c **** 	    for (i=0; i<=exp; i++) {
2199:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2200:src/display.c **** 		*obp++ = ',';
2201:src/display.c **** 	      *obp++ = *p++;
2202:src/display.c **** 	      odig++;
2203:src/display.c **** 	    }
2204:src/display.c **** 	    *obp++ = '.';
2205:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2206:src/display.c **** 	      *obp++ = *p++;
2207:src/display.c **** 	      odig++;
2208:src/display.c **** 	    }
2209:src/display.c **** 	  } else {		// All digits to right of decimal point
2210:src/display.c **** 	    *obp++ = '0';
2211:src/display.c **** 	    odig++;
2212:src/display.c **** 	    *obp++ = '.';
2213:src/display.c **** 	    for (i=exp+1; i<0; i++) {
ARM GAS  /tmp/ccpF0v4D.s 			page 54


2214:src/display.c **** 	      *obp++ = '0';
2215:src/display.c **** 	      odig++;
2216:src/display.c **** 	      dd--;
2217:src/display.c **** 	    }
2218:src/display.c **** 	    while (dd-- > 0) {
2219:src/display.c **** 	      *obp++ = *p++;
2220:src/display.c **** 	      odig++;
2221:src/display.c **** 	    }
2222:src/display.c **** 	  }
2223:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2224:src/display.c **** 	  if (trimzeros)
2225:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2226:src/display.c **** 	      obp--;
2227:src/display.c **** 	      odig--;
2228:src/display.c **** 	    }
2229:src/display.c **** #endif			
2230:src/display.c **** 	  break;
2231:src/display.c **** 
2232:src/display.c **** 	case MODE_ENG:
2233:src/display.c **** 	  switch (exp % 3) {
2234:src/display.c **** 	  case -1:
2235:src/display.c **** 	  case 2:
2236:src/display.c **** 	    *obp++ = *p++;
2237:src/display.c **** 	    odig++;
2238:src/display.c **** 	    dd--;
2239:src/display.c **** 	    exp--;
2240:src/display.c **** 	  case -2:
2241:src/display.c **** 	  case 1:
2242:src/display.c **** 	    *obp++ = *p++;
2243:src/display.c **** 	    odig++;
2244:src/display.c **** 	    dd--;
2245:src/display.c **** 	    exp--;
2246:src/display.c **** 	  case 0:
2247:src/display.c **** 	    ;
2248:src/display.c **** 	  };
2249:src/display.c **** 	  // Falling through
2250:src/display.c **** 
2251:src/display.c **** 	case MODE_SCI:
2252:src/display.c **** 	  *obp++ = *p++;
2253:src/display.c **** 	  odig++;
2254:src/display.c **** 	  *obp++ = '.';
2255:src/display.c **** 	  dd--;
2256:src/display.c **** 	  while (dd-- >= 0) {
2257:src/display.c **** 	    *obp++ = *p++;
2258:src/display.c **** 	    odig++;
2259:src/display.c **** 	  }
2260:src/display.c **** 	  show_exp = 1;
2261:src/display.c **** 	}
2262:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2263:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2264:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2265:src/display.c **** 	    obp--;
2266:src/display.c **** 	    odig--;
2267:src/display.c **** 	  }
2268:src/display.c **** #endif	
2269:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2270:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
ARM GAS  /tmp/ccpF0v4D.s 			page 55


2271:src/display.c **** 	  set_x_dn(z, res, display_digits);
2272:src/display.c **** 	  return;
2273:src/display.c **** 	}
2274:src/display.c **** 	/* Finally, send the output to the display */
2275:src/display.c **** 	*obp = '\0';
2276:src/display.c **** 	if (odig > *display_digits)
2277:src/display.c **** 	  odig = *display_digits;
2278:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2279:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2280:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2281:src/display.c **** 	if (negative) {
2282:src/display.c **** 	  if (res) *res++ = '-';
2283:src/display.c **** 	  else {
2284:src/display.c **** 	    if (j == 0)
2285:src/display.c **** 	      SET_MANT_SIGN;
2286:src/display.c **** 	    else
2287:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2288:src/display.c **** 	  }
2289:src/display.c **** 	}
2290:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	  if (c == '.') {
2292:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2293:src/display.c **** 	  } else if (c == ',') {
2294:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2295:src/display.c **** 	  } else {
2296:src/display.c **** 	    res = set_dig_s(j, c, res);
2297:src/display.c **** 	    j += SEGS_PER_DIGIT;
2298:src/display.c **** 	  }
2299:src/display.c **** 	}
2300:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2301:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2302:src/display.c **** 	  if ( !res ) {
2303:src/display.c **** 	    set_exp(exp, 4, res);
2304:src/display.c **** 	  }
2305:src/display.c **** 	  else {
2306:src/display.c **** 	    set_exp(exp, 0, res);
2307:src/display.c **** 	  }
2308:src/display.c **** 	}
2309:src/display.c **** #else
2310:src/display.c **** 	if (show_exp)
2311:src/display.c **** 	  set_exp(exp, 0, res);
2312:src/display.c **** #endif
2313:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2314:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2315:src/display.c **** 	*display_digits = odig;
2316:src/display.c ****       }
2317:src/display.c **** 
2318:src/display.c **** #if defined(QTGUI) || defined(IOS)
2319:src/display.c ****       void format_display(char *buf) {
2320:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2321:src/display.c **** 	  {
2322:src/display.c **** 	    const char *p = get_cmdline();
2323:src/display.c **** 	    if (p == NULL) {
2324:src/display.c **** 	      format_reg(regX_idx, buf);
2325:src/display.c **** 	    } else {
2326:src/display.c **** 	      scopy(buf, p);
2327:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccpF0v4D.s 			page 56


2328:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2329:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2330:src/display.c **** 		buf[CmdLineEex] = 'E';
2331:src/display.c **** 		buf[CmdLineEex+1] = '-';
2332:src/display.c **** 	      }
2333:src/display.c **** #  endif
2334:src/display.c **** 	    }
2335:src/display.c **** 	  }
2336:src/display.c **** 	else {
2337:src/display.c **** 	  buf[0]=0;
2338:src/display.c **** 	}
2339:src/display.c ****       }
2340:src/display.c **** #endif
2341:src/display.c **** 
2342:src/display.c ****       void format_reg(int index, char *buf) {
2343:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2344:src/display.c **** 
2345:src/display.c **** 	if (is_intmode())
2346:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2347:src/display.c **** #ifndef HP16C_MODE_CHANGE
2348:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2349:src/display.c **** 	  decNumber x;
2350:src/display.c **** 	  int s;
2351:src/display.c **** 	  unsigned long long int v;
2352:src/display.c **** 
2353:src/display.c **** 	  getRegister(&x, index);
2354:src/display.c **** 	  v = dn_to_ull(&x, &s);
2355:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2356:src/display.c **** 	}
2357:src/display.c **** #endif
2358:src/display.c **** 	else
2359:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2360:src/display.c ****       }
2361:src/display.c **** 
2362:src/display.c ****       /* Display the status screen */
2363:src/display.c ****       static void show_status(void) {
2364:src/display.c **** 	int i, n;
2365:src/display.c **** 	int j = SEGS_EXP_BASE;
2366:src/display.c **** 	const int status = State2.status - 3;
2367:src/display.c **** 	char buf[16], *p = buf;
2368:src/display.c **** 	unsigned int pc;
2369:src/display.c **** 
2370:src/display.c **** 	if (status == -2) {
2371:src/display.c **** 	  set_status("Free:");
2372:src/display.c **** 	  p = num_arg(buf, free_mem());
2373:src/display.c **** 	  p = scopy(p, " , FL. ");
2374:src/display.c **** 	  p = num_arg(p, free_flash());
2375:src/display.c **** 	  *p = '\0';
2376:src/display.c **** 	  set_digits_string(buf, 0);
2377:src/display.c **** 	}
2378:src/display.c **** 	else if (status == -1) {
2379:src/display.c **** 	  /* Top line */
2380:src/display.c **** 	  p = scopy(buf, "Regs:");
2381:src/display.c **** 	  if (SizeStatRegs)
2382:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2383:src/display.c **** 	  *p = '\0';
2384:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccpF0v4D.s 			page 57


2385:src/display.c **** 
2386:src/display.c **** 	  /* Bottom line */
2387:src/display.c **** 	  p = num_arg(buf, global_regs());
2388:src/display.c **** 	  if (LocalRegs < 0) {
2389:src/display.c **** 	    p = scopy(p, " , Loc. ");
2390:src/display.c **** 	    p = num_arg(p, local_regs());
2391:src/display.c **** 	  }
2392:src/display.c **** 	  *p = '\0';
2393:src/display.c **** 	  set_digits_string(buf, 0);
2394:src/display.c **** 	} else {
2395:src/display.c **** 	  int base;
2396:src/display.c **** 	  int end;
2397:src/display.c **** 	  int group = 10;
2398:src/display.c **** 	  int start = 0;
2399:src/display.c **** 		
2400:src/display.c **** 	  if (status <= 9) {
2401:src/display.c **** 	    base = 10 * status;
2402:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2403:src/display.c **** 	    p = scopy(buf, "FL ");
2404:src/display.c **** 	    p = num_arg_0(p, base, 2);
2405:src/display.c **** 	    *p++ = '-';
2406:src/display.c **** 	    p = num_arg_0(p, end, 2);
2407:src/display.c **** 	    *p = '\0';
2408:src/display.c **** 	    set_status(buf);
2409:src/display.c **** 	  }
2410:src/display.c **** 	  else if (status == 10) {
2411:src/display.c **** 	    base = regX_idx;
2412:src/display.c **** 	    end = regK_idx;
2413:src/display.c **** 	    start = 3;
2414:src/display.c **** 	    group = 4;
2415:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2416:src/display.c **** 	  }
2417:src/display.c **** 	  else { // status == 11
2418:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2419:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2420:src/display.c **** 	    set_status("FL.00-.15");
2421:src/display.c **** 	  }
2422:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2423:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2424:src/display.c **** 	  j += SEGS_PER_DIGIT;
2425:src/display.c **** 	  for (i = start; i < group + start; i++) {
2426:src/display.c **** 	    int k = i + base - start;
2427:src/display.c **** 	    int l = get_user_flag(k);
2428:src/display.c **** 	    k += group;
2429:src/display.c **** 	    if (end >= k) {
2430:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2431:src/display.c **** 	      k += group;
2432:src/display.c **** 	      if (end >= k)
2433:src/display.c **** 		l |= (get_user_flag(k) << 2);
2434:src/display.c **** 	    }
2435:src/display.c **** 	    set_dig(j, l);
2436:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	    j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    if (i == 4) {
2439:src/display.c **** 	      set_dig(j, 8);
2440:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2441:src/display.c **** 	      j += SEGS_PER_DIGIT;
ARM GAS  /tmp/ccpF0v4D.s 			page 58


2442:src/display.c **** 	    }
2443:src/display.c **** 	  }
2444:src/display.c **** 	}
2445:src/display.c **** 
2446:src/display.c **** 	j = SEGS_EXP_BASE;
2447:src/display.c **** 	pc = state_pc();
2448:src/display.c **** 	if (isXROM(pc))
2449:src/display.c **** 	  pc = 1;
2450:src/display.c **** 	for (n=i=0; i<4; i++) {
2451:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2452:src/display.c **** 	    if (++n == 4) {
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2455:src/display.c **** 	    } else {
2456:src/display.c **** 	      set_dig(j, 'A'+i);
2457:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2458:src/display.c **** 	    }
2459:src/display.c **** 	  }
2460:src/display.c **** 	}
2461:src/display.c ****       }
2462:src/display.c **** 
2463:src/display.c **** 
2464:src/display.c ****       /* Display the list of alpha labels */
2465:src/display.c ****       static void show_label(void) {
2466:src/display.c **** 	char buf[16];
2467:src/display.c **** 	unsigned short int pc = State2.digval;
2468:src/display.c **** 	unsigned int op = getprog(pc);
2469:src/display.c **** 	int n = nLIB(pc);
2470:src/display.c **** 	unsigned short int lblpc;
2471:src/display.c **** 
2472:src/display.c **** 	set_status(prt((opcode)op, buf));
2473:src/display.c **** 	set_digits_string(libname[n], 0);
2474:src/display.c **** #ifndef REALBUILD
2475:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2476:src/display.c **** #endif
2477:src/display.c **** 
2478:src/display.c **** 	if (op & OP_DBL) {
2479:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2480:src/display.c **** 	  if (lblpc != pc) {
2481:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2482:src/display.c **** 	    n = nLIB(lblpc);
2483:src/display.c **** 	    if (n == REGION_RAM)
2484:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2485:src/display.c **** 	    else {
2486:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2487:src/display.c **** #ifndef REALBUILD
2488:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2489:src/display.c **** #endif
2490:src/display.c **** 	    }
2491:src/display.c **** 	  }
2492:src/display.c **** 	}
2493:src/display.c ****       }
2494:src/display.c **** 
2495:src/display.c ****       /* Display a list of register contents */
2496:src/display.c ****       static void show_registers(void) {
2497:src/display.c **** 	char buf[16], *bp;
2498:src/display.c **** 	int n = State2.digval;
ARM GAS  /tmp/ccpF0v4D.s 			page 59


2499:src/display.c **** 	
2500:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2501:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2502:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2503:src/display.c **** 	  n;
2504:src/display.c **** #else
2505:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2506:src/display.c **** 	  n;
2507:src/display.c **** #endif
2508:src/display.c **** 
2509:src/display.c **** 	if (State2.disp_as_alpha) {
2510:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2511:src/display.c **** 	}
2512:src/display.c **** 	else {
2513:src/display.c **** 	  xset(buf, '\0', 16);
2514:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2515:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2516:src/display.c **** #else
2517:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2518:src/display.c **** #endif
2519:src/display.c **** 	  if (State2.local) {
2520:src/display.c **** 	    *bp++ = '.';
2521:src/display.c **** 	    if (n >= 100) {
2522:src/display.c **** 	      *bp++ = '1';
2523:src/display.c **** 	      n -= 100;
2524:src/display.c **** 	    }
2525:src/display.c **** 	  }
2526:src/display.c **** 	  if (n < 100)
2527:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2528:src/display.c **** 	  else
2529:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2530:src/display.c **** 	  set_status(buf);
2531:src/display.c **** 	}
2532:src/display.c **** 	format_reg(reg, CNULL);
2533:src/display.c ****       }
2534:src/display.c **** 
2535:src/display.c **** 
2536:src/display.c ****       static void set_annunciators(void)
2537:src/display.c ****       {
2538:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2539:src/display.c **** 
2540:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2541:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2542:src/display.c **** 	 * browsing constants.
2543:src/display.c **** 	 */
2544:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2545:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2546:src/display.c **** #else
2547:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2548:src/display.c **** #endif
2549:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2550:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2551:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2552:src/display.c **** 	set_IO_annunciator();
2553:src/display.c **** 
2554:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2555:src/display.c **** 	 */
ARM GAS  /tmp/ccpF0v4D.s 			page 60


2556:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2557:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2558:src/display.c ****       }
2559:src/display.c **** 
2560:src/display.c **** 
2561:src/display.c ****       /*
2562:src/display.c ****        *  Toggle the little "=" sign
2563:src/display.c ****        */
2564:src/display.c ****       void set_IO_annunciator(void) {
2565:src/display.c **** #ifndef DM42
2566:src/display.c **** 	int on = SerialOn
2567:src/display.c **** #endif
2568:src/display.c **** #ifdef DM42
2569:src/display.c **** 	  int on = 0
2570:src/display.c **** #endif
2571:src/display.c **** #ifdef REALBUILD
2572:src/display.c **** 	  || DebugFlag
2573:src/display.c **** #endif
2574:src/display.c **** #ifdef INFRARED
2575:src/display.c **** 	  || PrinterColumn != 0
2576:src/display.c **** #endif
2577:src/display.c **** 	  ;
2578:src/display.c **** 
2579:src/display.c **** 	if (on != IoAnnunciator) {
2580:src/display.c **** 	  dot(LIT_EQ, on);
2581:src/display.c **** 	  IoAnnunciator = on;
2582:src/display.c **** 	  finish_display(); //LIT_EQ
2583:src/display.c **** 	}
2584:src/display.c ****       }
2585:src/display.c **** 
2586:src/display.c **** #ifdef TOP_ROW
2587:src/display.c ****       /*
2588:src/display.c ****        *  Update the display
2589:src/display.c ****        */
2590:src/display.c ****       void display(void) {
2591:src/display.c **** 	int i, j;
2592:src/display.c **** 	char buf[40], *bp = buf;
2593:src/display.c **** 	const char *p;
2594:src/display.c **** 	int annuc = 0;
2595:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2596:src/display.c **** 	int skip = 0;
2597:src/display.c **** 	int x_disp = 0;
2598:src/display.c **** 	const int shift = cur_shift();
2599:src/display.c **** 
2600:src/display.c **** 	no_status_top = 0;
2601:src/display.c **** 	if (State2.disp_freeze) {
2602:src/display.c **** 	  State2.disp_freeze = 0;
2603:src/display.c **** 	  State2.disp_temp = 1;
2604:src/display.c **** #ifdef CONSOLE
2605:src/display.c **** 	  JustDisplayed = 1;
2606:src/display.c **** #endif
2607:src/display.c **** 	  ShowRPN = 0;
2608:src/display.c **** 	  return;
2609:src/display.c **** 	}
2610:src/display.c **** 
2611:src/display.c **** 	if (WasDataEntry) {
2612:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/ccpF0v4D.s 			page 61


2613:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2614:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2615:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2616:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2617:src/display.c **** #endif
2618:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2619:src/display.c **** 
2620:src/display.c **** 	  // Erase 7-segment display
2621:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2622:src/display.c **** 	    clr_dot(i);
2623:src/display.c **** 	  }
2624:src/display.c **** 	  goto only_update_x;
2625:src/display.c **** 	}
2626:src/display.c **** #ifdef INCLUDE_YREG_CODE
2627:src/display.c **** #  ifdef YREG_ALWAYS_ON
2628:src/display.c **** 	const int yreg_enabled = 1;
2629:src/display.c **** #  else
2630:src/display.c **** 	const int yreg_enabled = UState.show_y;
2631:src/display.c **** #  endif
2632:src/display.c **** #else
2633:src/display.c **** 	const int yreg_enabled = 0;
2634:src/display.c **** #endif
2635:src/display.c **** 	// Clear display
2636:src/display.c **** 	reset_disp();
2637:src/display.c **** 
2638:src/display.c **** 	
2639:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2640:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2641:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2642:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2643:src/display.c **** 	/*   set_status(buf); */
2644:src/display.c **** 	/* } */
2645:src/display.c **** 	if (State2.version) {
2646:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2647:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2648:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2649:src/display.c **** #ifndef REALBUILD
2650:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2651:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2652:src/display.c **** #endif
2653:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2654:src/display.c **** 	  set_status(vers);
2655:src/display.c **** 	  skip = 1;
2656:src/display.c **** 	  goto nostk;
2657:src/display.c **** 	} else if (State2.confirm) {
2658:src/display.c **** 	  if (yreg_enabled) {
2659:src/display.c **** 	    set_status_top(S_SURE);
2660:src/display.c **** 	    no_status_top = 1;
2661:src/display.c **** 	    annuc = 1;
2662:src/display.c **** 	  }
2663:src/display.c **** 	  else {
2664:src/display.c **** 	    set_status(S_SURE);
2665:src/display.c **** 	  }
2666:src/display.c **** 	} else if (State2.hyp) {
2667:src/display.c **** 	  bp = scopy(bp, "HYP");
2668:src/display.c **** 	  if (! State2.dot)
2669:src/display.c **** 	    *bp++ = '\235';
ARM GAS  /tmp/ccpF0v4D.s 			page 62


2670:src/display.c **** 	  if (yreg_enabled) {
2671:src/display.c **** 	    set_status_top(buf);
2672:src/display.c **** 	    no_status_top = 1;
2673:src/display.c **** 	    annuc = 1;
2674:src/display.c **** 	  }
2675:src/display.c **** 	  else {
2676:src/display.c **** 	    set_status(buf);
2677:src/display.c **** 	  }
2678:src/display.c **** 	} else if (State2.gtodot) {
2679:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2680:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2681:src/display.c **** 	  if (State2.numdigit > 0)
2682:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2683:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2684:src/display.c **** 	  *bp++ = '_';
2685:src/display.c **** 	  if (yreg_enabled) {
2686:src/display.c **** 	    set_status_top(buf);
2687:src/display.c **** 	    no_status_top = 1;
2688:src/display.c **** 	    annuc = 1;
2689:src/display.c **** 	  }
2690:src/display.c **** 	  else {
2691:src/display.c **** 	    set_status(buf);
2692:src/display.c **** 	  }
2693:src/display.c **** 	} else if (State2.rarg) {
2694:src/display.c **** 	  /* Commands with arguments */
2695:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2696:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2697:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2698:src/display.c **** #endif
2699:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2700:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2701:src/display.c **** 	  if (State2.dot) {
2702:src/display.c **** 	    *bp++ = 's';
2703:src/display.c **** 	    *bp++ = '_';
2704:src/display.c **** 	  } else if (shift == SHIFT_F) {
2705:src/display.c **** 	    *bp++ = '\021';
2706:src/display.c **** 	    *bp++ = '_';
2707:src/display.c **** 	  } else {
2708:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2709:src/display.c **** 	       : State2.ind ? 2 
2710:src/display.c **** 	       : num_arg_digits(CmdBase); */
2711:src/display.c **** 	    if (State2.local)
2712:src/display.c **** 	      *bp++ = '.';
2713:src/display.c **** 	    if (State2.numdigit > 0) {
2714:src/display.c **** 	      if (State2.shuffle)
2715:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2716:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2717:src/display.c **** 	      else
2718:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2719:src/display.c **** 	    }
2720:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2721:src/display.c **** 	    *bp++ = '_';
2722:src/display.c **** 	  }
2723:src/display.c **** 	  if (yreg_enabled) {
2724:src/display.c **** 	    set_status_top(buf);
2725:src/display.c **** 	    no_status_top = 1;
2726:src/display.c **** 	    annuc = 1;
ARM GAS  /tmp/ccpF0v4D.s 			page 63


2727:src/display.c **** 	  }
2728:src/display.c **** 	  else {
2729:src/display.c **** 	    set_status(buf);
2730:src/display.c **** 	  }
2731:src/display.c **** 	} else if (State2.test != TST_NONE) {
2732:src/display.c **** 	  *bp++ = 'x';
2733:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2734:src/display.c **** 	  *bp++ = '_';
2735:src/display.c **** 	  *bp++ = '?';
2736:src/display.c **** 	  if (yreg_enabled) {
2737:src/display.c **** 	    set_status_top(buf);
2738:src/display.c **** 	    no_status_top = 1;
2739:src/display.c **** 	    annuc = 1;
2740:src/display.c **** 	  }
2741:src/display.c **** 	  else {
2742:src/display.c **** 	    set_status(buf);
2743:src/display.c **** 	  }
2744:src/display.c **** 	} else if (cata) {
2745:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2746:src/display.c **** 	  char b2[16];
2747:src/display.c **** 	  const char *p;
2748:src/display.c **** 
2749:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2750:src/display.c **** 	  p = catcmd(op, b2);
2751:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2752:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2753:src/display.c **** 	  bp = scopy(bp, p);
2754:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2755:src/display.c **** 	    // State2.disp_small = 1;
2756:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2757:src/display.c **** 	      set_digits_string("0 to 255", 0);
2758:src/display.c **** 	    else
2759:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2760:src/display.c **** 	    skip = 1;
2761:src/display.c **** 	  } else if (State2.runmode) {
2762:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2763:src/display.c **** 	      decNumber x, r;
2764:src/display.c **** 	      decimal64 z;
2765:src/display.c **** 
2766:src/display.c **** 	      getX(&x);
2767:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2768:src/display.c **** 		const unsigned int f = argKIND(op);
2769:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2770:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2771:src/display.c **** 		  update_speed(0);
2772:src/display.c **** 		  fp(&r, &x);
2773:src/display.c **** 		}
2774:src/display.c **** 		else
2775:src/display.c **** 		  set_NaN(&r);
2776:src/display.c **** 	      } else
2777:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2778:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2779:src/display.c **** 	      packed_from_number(&z, &r);
2780:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2781:src/display.c **** 	      skip = 1;
2782:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2783:src/display.c **** 	      REGISTER z, *const x = StackBase;
ARM GAS  /tmp/ccpF0v4D.s 			page 64


2784:src/display.c **** 	      copyreg(&z, x);
2785:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2786:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2787:src/display.c **** 	      copyreg(x, &z);
2788:src/display.c **** 	      skip = 1;
2789:src/display.c **** 	    }
2790:src/display.c **** 	  }
2791:src/display.c **** 	  if (yreg_enabled) {
2792:src/display.c **** 	    set_status_top(buf);
2793:src/display.c **** 	    no_status_top = 1;
2794:src/display.c **** 	    annuc = 1;
2795:src/display.c **** 	  }
2796:src/display.c **** 	  else {
2797:src/display.c **** 	    set_status(buf);
2798:src/display.c **** 	  }
2799:src/display.c **** 	} else if (State2.multi) {
2800:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2801:src/display.c **** 	  if (State2.numdigit > 0) {
2802:src/display.c **** 	    *bp++ = (char) State2.digval;
2803:src/display.c **** 	    if (State2.numdigit > 1)
2804:src/display.c **** 	      *bp++ = State2.digval2;
2805:src/display.c **** 	  }
2806:src/display.c **** 	  if (yreg_enabled) {
2807:src/display.c **** 	    set_status_top(buf);
2808:src/display.c **** 	    no_status_top = 1;
2809:src/display.c **** 	    annuc = 1;
2810:src/display.c **** 	  }
2811:src/display.c **** 	  else {
2812:src/display.c **** 	    set_status(buf);
2813:src/display.c **** 	  }
2814:src/display.c **** 	} else if (State2.status) {
2815:src/display.c **** 	  show_status();
2816:src/display.c **** 	  skip = 1;
2817:src/display.c **** 	} else if (State2.labellist) {
2818:src/display.c **** 	  show_label();
2819:src/display.c **** 	  skip = 1;
2820:src/display.c **** 	} else if (State2.registerlist) {
2821:src/display.c **** 	  show_registers();
2822:src/display.c **** 	  skip = 1;
2823:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2824:src/display.c **** 	    annunciators();
2825:src/display.c **** 	  }
2826:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2827:src/display.c **** 	} else if (State2.disp_as_alpha) {
2828:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2829:src/display.c **** #endif
2830:src/display.c **** 	} else if (State2.runmode) {
2831:src/display.c **** 	  if (DispMsg) { 
2832:src/display.c **** 	    set_status(DispMsg);
2833:src/display.c **** 	  } else if (DispPlot) {
2834:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2835:src/display.c **** 	  } else if (State2.alphas) {
2836:src/display.c **** 	    bp = scopy(buf, Alpha);
2837:src/display.c **** 	    j = State2.alpha_pos;
2838:src/display.c **** 	    if (j != 0) {
2839:src/display.c **** 	      i = slen(buf);
2840:src/display.c **** 	      j *= 6;
ARM GAS  /tmp/ccpF0v4D.s 			page 65


2841:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2842:src/display.c **** 		{
2843:src/display.c **** 		  buf[ (i - j) ] = '\0';
2844:src/display.c **** 		  set_status_right(buf);
2845:src/display.c **** 		}
2846:src/display.c **** 	      else {
2847:src/display.c **** 		set_status(buf);
2848:src/display.c **** 	      }
2849:src/display.c **** 	    }
2850:src/display.c **** 	    else {
2851:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2852:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2853:src/display.c **** 		*bp++ = '\0';
2854:src/display.c **** 	      }
2855:src/display.c **** 	      set_status_right(buf);
2856:src/display.c **** 	    }
2857:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2858:src/display.c **** 	      bp = buf;
2859:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2860:src/display.c **** 	      *bp++ = '\0';
2861:src/display.c **** 	      set_status_top(buf);
2862:src/display.c **** 	      no_status_top = 1;
2863:src/display.c **** 	      //annuc = 1;
2864:src/display.c **** 	    }
2865:src/display.c **** 	  }
2866:src/display.c **** 	  else {
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  }
2869:src/display.c **** 	}
2870:src/display.c **** 	else {
2871:src/display.c **** #ifndef DM42
2872:src/display.c **** 	  show_progtrace(buf);
2873:src/display.c **** #endif
2874:src/display.c **** 	  i = state_pc();
2875:src/display.c **** 	  if (i > 0)
2876:src/display.c **** 	    set_status(prt(getprog(i), buf));
2877:src/display.c **** 	  else
2878:src/display.c **** 	    set_status("");
2879:src/display.c **** 	  set_dot(STO_annun);
2880:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  goto nostk;
2883:src/display.c **** 	}
2884:src/display.c **** 	show_stack();
2885:src/display.c ****       nostk:
2886:src/display.c **** 	show_flags();
2887:src/display.c **** 	if (!skip) {
2888:src/display.c **** 	  if (State2.runmode) {
2889:src/display.c **** 	  only_update_x:
2890:src/display.c **** 	    p = get_cmdline();
2891:src/display.c **** 	    if (p == NULL || cata) {
2892:src/display.c **** 	      if (ShowRegister != -1) {
2893:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2894:src/display.c **** 		format_reg(ShowRegister, CNULL);
2895:src/display.c **** 	      }
2896:src/display.c **** 	      else
2897:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
ARM GAS  /tmp/ccpF0v4D.s 			page 66


2898:src/display.c **** 	    } else {
2899:src/display.c **** 	      disp_x(p);
2900:src/display.c **** 	      x_disp = 1;
2901:src/display.c **** 	    }
2902:src/display.c **** 	    if (WasDataEntry) {
2903:src/display.c **** 	      goto finish;
2904:src/display.c **** 	    }
2905:src/display.c **** 	  } else {
2906:src/display.c **** 	    unsigned int pc = state_pc();
2907:src/display.c **** 	    unsigned int upc = user_pc(pc);
2908:src/display.c **** 	    const int n = nLIB(pc);
2909:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2910:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2911:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2912:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2913:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** 	  }
2931:src/display.c **** 	}
2932:src/display.c **** 	set_annunciators();
2933:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2934:src/display.c **** 	  ShowRPN = 0;
2935:src/display.c **** 	  dot(RPN, 0);
2936:src/display.c **** 	}
2937:src/display.c **** 	// disp_temp disables the <- key
2938:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2939:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2940:src/display.c **** 
2941:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2942:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2943:src/display.c **** 	  annunciators();
2944:src/display.c ****  	State2.hms = 0;
2945:src/display.c **** #else
2946:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2947:src/display.c **** 	  annunciators();
2948:src/display.c **** #endif
2949:src/display.c **** 
2950:src/display.c ****       finish:
2951:src/display.c **** 	State2.version = 0;
2952:src/display.c **** 	State2.disp_as_alpha = 0;
2953:src/display.c **** 	State2.smode = SDISP_NORMAL;
2954:src/display.c **** 	State2.invalid_disp = 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 67


2955:src/display.c **** 	ShowRegister = regX_idx;
2956:src/display.c **** 	DispMsg = CNULL;
2957:src/display.c **** 	DispPlot = 0;
2958:src/display.c **** 	State2.disp_small = 0;
2959:src/display.c **** 	finish_display();
2960:src/display.c **** 	no_status_top = 0;
2961:src/display.c **** #ifdef CONSOLE
2962:src/display.c **** 	JustDisplayed = 1;
2963:src/display.c **** #endif
2964:src/display.c ****       }
2965:src/display.c **** #else
2966:src/display.c ****       /*
2967:src/display.c ****        *  Update the display
2968:src/display.c ****        */
2969:src/display.c ****       void display(void) {
2970:src/display.c **** 	int i, j;
2971:src/display.c **** 	char buf[40], *bp = buf;
2972:src/display.c **** 	const char *p;
2973:src/display.c **** 	int annuc = 0;
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2975:src/display.c **** 	int skip = 0;
2976:src/display.c **** 	int x_disp = 0;
2977:src/display.c **** 	const int shift = cur_shift();
2978:src/display.c **** 
2979:src/display.c **** 
2980:src/display.c **** 
2981:src/display.c **** 	if (State2.disp_freeze) {
2982:src/display.c **** 	  State2.disp_freeze = 0;
2983:src/display.c **** 	  State2.disp_temp = 1;
2984:src/display.c **** #ifdef CONSOLE
2985:src/display.c **** 	  JustDisplayed = 1;
2986:src/display.c **** #endif
2987:src/display.c **** 	  ShowRPN = 0;
2988:src/display.c **** 	  return;
2989:src/display.c **** 	}
2990:src/display.c **** 
2991:src/display.c **** 	if (WasDataEntry) {
2992:src/display.c **** #if defined(QTGUI) || defined(IOS)
2993:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2994:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2995:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2996:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2997:src/display.c **** #endif
2998:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2999:src/display.c **** 
3000:src/display.c **** 	  // Erase 7-segment display
3001:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3002:src/display.c **** 	    clr_dot(i);
3003:src/display.c **** 	  }
3004:src/display.c **** 	  goto only_update_x;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	// Clear display
3008:src/display.c **** 	reset_disp();
3009:src/display.c **** 
3010:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3011:src/display.c **** 	if (State2.cmplx  && !cata) {
ARM GAS  /tmp/ccpF0v4D.s 			page 68


3012:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3013:src/display.c **** 	  set_status(buf);
3014:src/display.c **** 	}
3015:src/display.c **** 	if (State2.version) {
3016:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3017:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3018:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3019:src/display.c **** #ifndef REALBUILD
3020:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3021:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3022:src/display.c **** #endif
3023:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3024:src/display.c **** 	  set_status(vers);
3025:src/display.c **** 	  skip = 1;
3026:src/display.c **** 	  goto nostk;
3027:src/display.c **** 	} else if (State2.confirm) {
3028:src/display.c **** 	  set_status(S_SURE);
3029:src/display.c **** 	} else if (State2.hyp) {
3030:src/display.c **** 	  bp = scopy(bp, "HYP");
3031:src/display.c **** 	  if (! State2.dot)
3032:src/display.c **** 	    *bp++ = '\235';
3033:src/display.c **** 	  set_status(buf);
3034:src/display.c **** 	} else if (State2.gtodot) {
3035:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3036:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3037:src/display.c **** 	  if (State2.numdigit > 0)
3038:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3039:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3040:src/display.c **** 	  *bp++ = '_';
3041:src/display.c **** 	  set_status(buf);
3042:src/display.c **** 	} else if (State2.rarg) {
3043:src/display.c **** 	  /* Commands with arguments */
3044:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3045:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3046:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3047:src/display.c **** #endif
3048:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3049:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3050:src/display.c **** 	  if (State2.dot) {
3051:src/display.c **** 	    *bp++ = 's';
3052:src/display.c **** 	    *bp++ = '_';
3053:src/display.c **** 	  } else if (shift == SHIFT_F) {
3054:src/display.c **** 	    *bp++ = '\021';
3055:src/display.c **** 	    *bp++ = '_';
3056:src/display.c **** 	  } else {
3057:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3058:src/display.c **** 	       : State2.ind ? 2 
3059:src/display.c **** 	       : num_arg_digits(CmdBase); */
3060:src/display.c **** 	    if (State2.local)
3061:src/display.c **** 	      *bp++ = '.';
3062:src/display.c **** 	    if (State2.numdigit > 0) {
3063:src/display.c **** 	      if (State2.shuffle)
3064:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3065:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3066:src/display.c **** 	      else
3067:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3068:src/display.c **** 	    }
ARM GAS  /tmp/ccpF0v4D.s 			page 69


3069:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3070:src/display.c **** 	    *bp++ = '_';
3071:src/display.c **** 	  }
3072:src/display.c **** 	  set_status(buf);
3073:src/display.c **** 	} else if (State2.test != TST_NONE) {
3074:src/display.c **** 	  *bp++ = 'x';
3075:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3076:src/display.c **** 	  *bp++ = '_';
3077:src/display.c **** 	  *bp++ = '?';
3078:src/display.c **** 	  set_status(buf);
3079:src/display.c **** 	} else if (cata) {
3080:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3081:src/display.c **** 	  char b2[16];
3082:src/display.c **** 	  const char *p;
3083:src/display.c **** 
3084:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3085:src/display.c **** 	  p = catcmd(op, b2);
3086:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3087:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3088:src/display.c **** 	  bp = scopy(bp, p);
3089:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3090:src/display.c **** 	    // State2.disp_small = 1;
3091:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3092:src/display.c **** 	      set_digits_string("0 to 255", 0);
3093:src/display.c **** 	    else
3094:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3095:src/display.c **** 	    skip = 1;
3096:src/display.c **** 	  } else if (State2.runmode) {
3097:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3098:src/display.c **** 	      decNumber x, r;
3099:src/display.c **** 	      decimal64 z;
3100:src/display.c **** 
3101:src/display.c **** 	      getX(&x);
3102:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3103:src/display.c **** 		const unsigned int f = argKIND(op);
3104:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3105:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3106:src/display.c **** 		  update_speed(0);
3107:src/display.c **** 		  fp(&r, &x);
3108:src/display.c **** 		}
3109:src/display.c **** 		else
3110:src/display.c **** 		  set_NaN(&r);
3111:src/display.c **** 	      } else
3112:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3113:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3114:src/display.c **** 	      packed_from_number(&z, &r);
3115:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3116:src/display.c **** 	      skip = 1;
3117:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3118:src/display.c **** 	      REGISTER z, *const x = StackBase;
3119:src/display.c **** 	      copyreg(&z, x);
3120:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3121:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3122:src/display.c **** 	      copyreg(x, &z);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    }
3125:src/display.c **** 	  }
ARM GAS  /tmp/ccpF0v4D.s 			page 70


3126:src/display.c **** 	  set_status(buf);
3127:src/display.c **** 	} else if (State2.multi) {
3128:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3129:src/display.c **** 	  if (State2.numdigit > 0) {
3130:src/display.c **** 	    *bp++ = (char) State2.digval;
3131:src/display.c **** 	    if (State2.numdigit > 1)
3132:src/display.c **** 	      *bp++ = State2.digval2;
3133:src/display.c **** 	  }
3134:src/display.c **** 	  set_status(buf);
3135:src/display.c **** 	} else if (State2.status) {
3136:src/display.c **** 	  show_status();
3137:src/display.c **** 	  skip = 1;
3138:src/display.c **** 	} else if (State2.labellist) {
3139:src/display.c **** 	  show_label();
3140:src/display.c **** 	  skip = 1;
3141:src/display.c **** 	} else if (State2.registerlist) {
3142:src/display.c **** 	  show_registers();
3143:src/display.c **** 	  skip = 1;
3144:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3145:src/display.c **** 	    annunciators();
3146:src/display.c **** 	  }
3147:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3148:src/display.c **** 	} else if (State2.disp_as_alpha) {
3149:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3150:src/display.c **** #endif
3151:src/display.c **** 	} else if (State2.runmode) {
3152:src/display.c **** 	  if (DispMsg) { 
3153:src/display.c **** 	    set_status(DispMsg);
3154:src/display.c **** 	  } else if (DispPlot) {
3155:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3156:src/display.c **** 	  } else if (State2.alphas) {
3157:src/display.c **** #if 0
3158:src/display.c **** 	    set_digits_string("AlpHA", 0);
3159:src/display.c **** #endif
3160:src/display.c **** 	    bp = scopy(buf, Alpha);
3161:src/display.c **** 	    j = State2.alpha_pos;
3162:src/display.c **** 	    if (j != 0) {
3163:src/display.c **** 	      i = slen(buf);
3164:src/display.c **** 	      //				
3165:src/display.c **** 	      j *= 6;
3166:src/display.c **** #ifdef BIGGER_DISPLAY
3167:src/display.c **** 	      if ( i - j >= 20 )
3168:src/display.c **** #else
3169:src/display.c **** 	      if ( i - j >= 12 )
3170:src/display.c **** #endif
3171:src/display.c **** 		{
3172:src/display.c **** 		buf[ (i - j) ] = '\0';
3173:src/display.c **** 		set_status_right(buf);
3174:src/display.c **** 		}
3175:src/display.c **** 	      else {
3176:src/display.c **** 		set_status(buf);
3177:src/display.c **** 	      }
3178:src/display.c **** 	    } else {
3179:src/display.c **** 	      if (shift != SHIFT_N) {
3180:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3181:src/display.c **** 		*bp++ = '\0';
3182:src/display.c **** 	      }
ARM GAS  /tmp/ccpF0v4D.s 			page 71


3183:src/display.c **** 	      set_status_right(buf);
3184:src/display.c **** 	    }
3185:src/display.c **** 	  } else {
3186:src/display.c **** 	    annuc = 1;
3187:src/display.c **** 	  }
3188:src/display.c **** 	} else {
3189:src/display.c **** #ifndef DM42
3190:src/display.c **** 	  show_progtrace(buf);
3191:src/display.c **** #endif
3192:src/display.c **** 	  i = state_pc();
3193:src/display.c **** 	  if (i > 0)
3194:src/display.c **** 	    set_status(prt(getprog(i), buf));
3195:src/display.c **** 	  else
3196:src/display.c **** 	    set_status("");
3197:src/display.c **** 	  set_dot(STO_annun);
3198:src/display.c **** #if 0
3199:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3200:src/display.c **** 	    unsigned short int crc;
3201:src/display.c **** 	    crc = checksum_program();
3202:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3203:src/display.c **** 	    for (i=0; i<4; i++) {
3204:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3205:src/display.c **** 	      crc >>= 4;
3206:src/display.c **** 	      j += SEGS_PER_DIGIT;
3207:src/display.c **** 	    }
3208:src/display.c **** 	    skip = 1;
3209:src/display.c **** 	  }
3210:src/display.c **** 	  else
3211:src/display.c **** #endif
3212:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3213:src/display.c **** 	      annuc = 1;
3214:src/display.c **** 	  goto nostk;
3215:src/display.c **** 	}
3216:src/display.c **** 	show_stack();
3217:src/display.c ****       nostk:	show_flags();
3218:src/display.c **** 	if (!skip) {
3219:src/display.c **** 	  if (State2.runmode) {
3220:src/display.c **** 	  only_update_x:
3221:src/display.c **** 	    p = get_cmdline();
3222:src/display.c **** 	    if (p == NULL || cata) {
3223:src/display.c **** 	      if (ShowRegister != -1) {
3224:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3225:src/display.c **** 		format_reg(ShowRegister, CNULL);
3226:src/display.c **** 	      }
3227:src/display.c **** 	      else
3228:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3229:src/display.c **** 	    } else {
3230:src/display.c **** 	      disp_x(p);
3231:src/display.c **** 	      x_disp = 1;
3232:src/display.c **** 	    }
3233:src/display.c **** 	    if (WasDataEntry) {
3234:src/display.c **** 	      goto finish;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  } else {
3237:src/display.c **** 	    unsigned int pc = state_pc();
3238:src/display.c **** 	    unsigned int upc = user_pc(pc);
3239:src/display.c **** 	    const int n = nLIB(pc);
ARM GAS  /tmp/ccpF0v4D.s 			page 72


3240:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3241:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3242:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3243:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3244:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3245:src/display.c **** #ifndef REALBUILD
3246:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3247:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3248:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3249:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3250:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3251:src/display.c **** 	      char *b=buf;
3252:src/display.c **** 	      char *l=LastDisplayedNumber;
3253:src/display.c **** 	      *l++=' ';
3254:src/display.c **** 	      while(*b) {
3255:src/display.c **** 		*l++=*b++;
3256:src/display.c **** 		*l++=' ';
3257:src/display.c **** 	      }
3258:src/display.c **** 	      *l=0;
3259:src/display.c **** 	    }
3260:src/display.c **** #endif
3261:src/display.c **** 	  }
3262:src/display.c **** 	}
3263:src/display.c **** 	set_annunciators();
3264:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3265:src/display.c **** 	  ShowRPN = 0;
3266:src/display.c **** 	  dot(RPN, 0);
3267:src/display.c **** 	}
3268:src/display.c **** 	// disp_temp disables the <- key
3269:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3270:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3271:src/display.c **** 
3272:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3273:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3274:src/display.c **** 	  annunciators();
3275:src/display.c ****  	State2.hms = 0;
3276:src/display.c **** #else
3277:src/display.c **** 
3278:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3279:src/display.c **** 	  annunciators();
3280:src/display.c **** 	
3281:src/display.c **** 
3282:src/display.c **** 
3283:src/display.c **** #endif
3284:src/display.c **** 
3285:src/display.c ****       finish:
3286:src/display.c **** 	State2.version = 0;
3287:src/display.c **** 	State2.disp_as_alpha = 0;
3288:src/display.c **** 	State2.smode = SDISP_NORMAL;
3289:src/display.c **** 	State2.invalid_disp = 0;
3290:src/display.c **** 	ShowRegister = regX_idx;
3291:src/display.c **** 	DispMsg = CNULL;
3292:src/display.c **** 	DispPlot = 0;
3293:src/display.c **** 	State2.disp_small = 0;
3294:src/display.c **** 	finish_display();
3295:src/display.c **** #ifdef CONSOLE
3296:src/display.c **** 	JustDisplayed = 1;
ARM GAS  /tmp/ccpF0v4D.s 			page 73


3297:src/display.c **** #endif
3298:src/display.c ****       }
3299:src/display.c **** #endif
3300:src/display.c ****       /*
3301:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3302:src/display.c ****        */
3303:src/display.c ****       void frozen_display()
3304:src/display.c ****       {
3305:src/display.c **** 	State2.disp_freeze = 0;
3306:src/display.c **** 	display();
3307:src/display.c **** 	State2.disp_freeze = 1;
3308:src/display.c ****       }
3309:src/display.c **** 
3310:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3311:src/display.c **** 	int glen = *graphic++;
3312:src/display.c **** 	int i, j;
3313:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3314:src/display.c **** 	unsigned long long int mat[6];
3315:src/display.c **** 
3316:src/display.c **** 	xset(mat, 0, sizeof(mat));
3317:src/display.c **** #endif
3318:src/display.c **** #ifndef REALBUILD
3319:src/display.c **** 	forceDispPlot=1;
3320:src/display.c **** #endif
3321:src/display.c **** 	if (glen <= 0)			return;
3322:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3323:src/display.c **** 
3324:src/display.c **** 	for (i=0; i<6; i++)
3325:src/display.c **** 	  for (j=1; j<=glen; j++) {
3326:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3327:src/display.c **** 	    if (graphic[j] & (1 << i))
3328:src/display.c **** 	      mat[i] |= 1LL << j;
3329:src/display.c **** #else
3330:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3331:src/display.c **** #endif
3332:src/display.c **** 	  }
3333:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3334:src/display.c **** 	set_status_grob(mat);
3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** 
3338:src/display.c **** 
3339:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3340:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3341:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3342:src/display.c ****        * column is almost always blank.
3343:src/display.c ****        */
3344:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3345:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3346:src/display.c ****       }
3347:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3348:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3349:src/display.c ****       }
3350:src/display.c **** 
3351:src/display.c ****       
3352:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3352 85 is_stmt 1 view -0
ARM GAS  /tmp/ccpF0v4D.s 			page 74


 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3353:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3353 2 view .LVU201
3354:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3355:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3356:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3356 2 view .LVU202
3357:src/display.c **** #endif
3358:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3358 2 view .LVU203
3359:src/display.c **** 	int i, j;
 686              		.loc 1 3359 2 view .LVU204
3360:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3360 2 view .LVU205
3352:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3352 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	unsigned long long int mat[6];
3363:src/display.c **** 
3364:src/display.c **** 	xset(mat, 0, sizeof(mat));
3365:src/display.c **** #endif
3366:src/display.c **** #ifndef REALBUILD
3367:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3367 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3352:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3352 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3360 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3352:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3352 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3360 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3360 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 75


 716              		.loc 1 3367 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3367 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3360 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3367 2 is_stmt 1 view .LVU216
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3360 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3352:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3352 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3367 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3368:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3369:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3369 2 is_stmt 1 view .LVU220
 734              		.loc 1 3369 14 view .LVU221
 735              		.loc 1 3369 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3369 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3369 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3369 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3370:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3370 4 is_stmt 1 view .LVU226
 749              		.loc 1 3370 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3370 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3370 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3370 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3371:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3372:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3373:src/display.c **** 	      ++i;
3374:src/display.c **** 	  }
3375:src/display.c **** 	  else {
3376:src/display.c **** 	    ++i;
3377:src/display.c **** 	  }
ARM GAS  /tmp/ccpF0v4D.s 			page 76


3378:src/display.c **** 	}
3379:src/display.c **** #endif
3380:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3380 2 is_stmt 1 view .LVU231
3381:src/display.c **** #endif
3382:src/display.c **** #ifdef RP_PREFIX
3383:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3383 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3380:src/display.c **** #endif
 763              		.loc 1 3380 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3383 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3384:src/display.c **** #endif
3385:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3386:src/display.c **** 	findlengths(posns, smallp);
3387:src/display.c **** #endif
3388:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3388 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3380:src/display.c **** #endif
 770              		.loc 1 3380 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3383:src/display.c **** #endif
 772              		.loc 1 3383 2 is_stmt 1 view .LVU237
 773              		.loc 1 3388 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3388 8 view .LVU239
 776              		.loc 1 3388 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3388 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3358:src/display.c **** 	int i, j;
 781              		.loc 1 3358 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB191:
3389:src/display.c **** 	  int c;
3390:src/display.c **** 	  int width;
3391:src/display.c **** 	  unsigned char cmap[6];
3392:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3393:src/display.c **** 	  int real_width;
3394:src/display.c **** 	  int current_smallp;
3395:src/display.c **** 
3396:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3397:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3398:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3399:src/display.c **** 	  //           01 -> (not used)
3400:src/display.c **** 	  //           10 -> use big font
3401:src/display.c **** 	  //           11 -> use small font
3402:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3403:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3403 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE191:
ARM GAS  /tmp/ccpF0v4D.s 			page 77


3388:src/display.c **** 	  int c;
 787              		.loc 1 3388 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3356:src/display.c **** #endif
 790              		.loc 1 3356 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB200:
3389:src/display.c **** 	  int c;
 794              		.loc 1 3389 4 is_stmt 1 view .LVU246
3390:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3390 4 view .LVU247
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3391 4 view .LVU248
3393:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3393 4 view .LVU249
3394:src/display.c **** 
 798              		.loc 1 3394 4 view .LVU250
 799              		.loc 1 3403 4 view .LVU251
 800              		.loc 1 3403 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3404:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3404 6 is_stmt 1 view .LVU253
 805              		.loc 1 3404 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3405:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3405 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3404:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3404 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3405 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3406:src/display.c **** 	    default:
3407:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x40:	current_smallp = 0;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x60:	current_smallp = 1;
3412:src/display.c **** 	      break;
3413:src/display.c **** 	    }
3414:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3414 6 view .LVU258
 820              		.loc 1 3414 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3414 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
ARM GAS  /tmp/ccpF0v4D.s 			page 78


 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3415:src/display.c **** 	    str += 3;
 831              		.loc 1 3415 6 is_stmt 1 discriminator 4 view .LVU261
3416:src/display.c **** 
3417:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3417 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3415:src/display.c **** 	    str += 3;
 836              		.loc 1 3415 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3417 6 is_stmt 1 discriminator 4 view .LVU264
3418:src/display.c **** 	  } else {
3419:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3420:src/display.c **** 	    real_width = width = charlengths(c);
3421:src/display.c **** 	    current_smallp = smallp;
3422:src/display.c **** 	  }
3423:src/display.c **** 
3424:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3424 4 discriminator 4 view .LVU265
 843              		.loc 1 3424 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3424 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3424 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3425:src/display.c **** 	    break;
3426:src/display.c **** 
3427:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3427 4 is_stmt 1 view .LVU269
 853              		.loc 1 3427 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3428:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3428 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3427 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3428 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
ARM GAS  /tmp/ccpF0v4D.s 			page 79


 866 00b0 019B     		ldr	r3, [sp, #4]
3429:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3429 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3430:src/display.c **** 	  }
3431:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3431 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3432:src/display.c **** #else
3433:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3434:src/display.c **** 
3435:src/display.c **** 	  //cmap = &charset[c][0];
3436:src/display.c **** 	  width = charlengths(c);
3437:src/display.c **** 
3438:src/display.c **** 	  if (x + width > b_w+1)
3439:src/display.c **** 	    break;
3440:src/display.c **** 
3441:src/display.c **** 	  /* Decode the packed character bytes */
3442:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3443:src/display.c **** #endif
3444:src/display.c **** 
3445:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3445 4 view .LVU276
 877              		.loc 1 3445 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3445 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3446 16 is_stmt 1 view .LVU279
 889              		.loc 1 3446 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3447:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3447 8 is_stmt 1 view .LVU281
 893              		.loc 1 3447 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3446 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
ARM GAS  /tmp/ccpF0v4D.s 			page 80


3446:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3446 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB192:
 907              	.LBB193:
 340:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 340 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 340:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 340 11 view .LVU286
 912              	.LBE193:
 913              	.LBE192:
 914              		.loc 1 3447 8 is_stmt 1 view .LVU287
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3446 25 view .LVU288
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3446 16 view .LVU289
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3446 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3447 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3448:src/display.c **** 		break;
3449:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3450:src/display.c **** 	      if (cmap[i] & (1 << j))
3451:src/display.c **** 		mat[i] |= 1LL << (x+j);
3452:src/display.c **** #else
3453:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3453 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB197:
 929              	.LBI192:
 339:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 339 6 discriminator 2 view .LVU293
 931              	.LBB194:
 340:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 340 3 discriminator 2 view .LVU294
 340:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 340 11 discriminator 2 view .LVU295
 341:src/display.c **** }
 934              		.loc 1 341 8 discriminator 2 view .LVU296
 935              	.LBE194:
 936              	.LBE197:
 937              		.loc 1 3453 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3453 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB198:
 942              	.LBB195:
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccpF0v4D.s 			page 81


 943              		.loc 1 340 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 340:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 340 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 340:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 340 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE195:
 950              	.LBE198:
3446:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3446 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB199:
 955              	.LBB196:
 341:src/display.c **** }
 956              		.loc 1 341 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 341:src/display.c **** }
 959              		.loc 1 341 8 view .LVU304
 960              	.LBE196:
 961              	.LBE199:
3447:src/display.c **** 		break;
 962              		.loc 1 3447 8 is_stmt 1 view .LVU305
3446:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3446 25 view .LVU306
3446:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3446 16 view .LVU307
3446:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3446 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3445 19 is_stmt 1 view .LVU309
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3445 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3445 14 is_stmt 1 view .LVU311
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3445 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3454:src/display.c **** #endif
3455:src/display.c **** 	    }
3456:src/display.c **** 	  x += width;
 980              		.loc 1 3456 4 is_stmt 1 view .LVU313
 981              	.LBE200:
3388:src/display.c **** 	  int c;
 982              		.loc 1 3388 9 is_stmt 0 view .LVU314
ARM GAS  /tmp/ccpF0v4D.s 			page 82


 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB201:
 986              		.loc 1 3456 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3456 6 view .LVU316
 990              	.LBE201:
3388:src/display.c **** 	  int c;
 991              		.loc 1 3388 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3388:src/display.c **** 	  int c;
 993              		.loc 1 3388 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3388:src/display.c **** 	  int c;
 996              		.loc 1 3388 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB202:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3403 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE202:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB203:
3389:src/display.c **** 	  int width;
 1005              		.loc 1 3389 4 is_stmt 1 view .LVU321
3390:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3390 4 view .LVU322
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3391 4 view .LVU323
3393:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3393 4 view .LVU324
3394:src/display.c **** 
 1009              		.loc 1 3394 4 view .LVU325
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3403 4 view .LVU326
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3403 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3419 6 is_stmt 1 view .LVU328
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3419 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3420:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3420 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3419 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccpF0v4D.s 			page 83


 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3420:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3420 6 is_stmt 1 view .LVU332
3420:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3420 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3420:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3420 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3424:src/display.c **** 	    break;
 1034              		.loc 1 3424 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3420:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3420 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3421:src/display.c **** 	  }
 1039              		.loc 1 3421 6 is_stmt 1 view .LVU337
3424:src/display.c **** 	    break;
 1040              		.loc 1 3424 4 view .LVU338
3424:src/display.c **** 	    break;
 1041              		.loc 1 3424 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3424:src/display.c **** 	    break;
 1044              		.loc 1 3424 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3424:src/display.c **** 	    break;
 1049              		.loc 1 3424 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3424:src/display.c **** 	    break;
 1053              		.loc 1 3424 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3424:src/display.c **** 	    break;
 1057              		.loc 1 3424 7 view .LVU343
 1058              	.LBE203:
3457:src/display.c **** 	}
3458:src/display.c **** 
3459:src/display.c **** 
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	set_status_grob(mat);
3462:src/display.c **** #else
3463:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3463 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3463 20 view .LVU345
 1061              		.loc 1 3463 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
ARM GAS  /tmp/ccpF0v4D.s 			page 84


 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3464:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3464 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3463:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3463 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3464 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3463:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3463 27 is_stmt 1 discriminator 3 view .LVU350
3463:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3463 20 discriminator 3 view .LVU351
3463:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3463 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3465:src/display.c **** #endif
3466:src/display.c ****       }
 1081              		.loc 1 3466 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB204:
3411:src/display.c **** 	      break;
 1091              		.loc 1 3411 17 is_stmt 1 view .LVU354
3412:src/display.c **** 	    }
 1092              		.loc 1 3412 8 view .LVU355
3414:src/display.c **** 	    str += 3;
 1093              		.loc 1 3414 6 view .LVU356
3414:src/display.c **** 	    str += 3;
 1094              		.loc 1 3414 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 1097              		.loc 1 3411 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3409:src/display.c **** 	      break;
 1104              		.loc 1 3409 17 is_stmt 1 view .LVU359
3410:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3410 8 view .LVU360
ARM GAS  /tmp/ccpF0v4D.s 			page 85


3414:src/display.c **** 	    str += 3;
 1106              		.loc 1 3414 6 view .LVU361
3414:src/display.c **** 	    str += 3;
 1107              		.loc 1 3414 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3409:src/display.c **** 	      break;
 1110              		.loc 1 3409 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3409:src/display.c **** 	      break;
 1116              		.loc 1 3409 32 view .LVU364
 1117              	.LBE204:
3371:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3371 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3372:src/display.c **** 	      ++i;
 1123              		.loc 1 3372 6 view .LVU366
3372:src/display.c **** 	      ++i;
 1124              		.loc 1 3372 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB205:
3372:src/display.c **** 	      ++i;
 1133              		.loc 1 3372 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3372:src/display.c **** 	      ++i;
 1136              		.loc 1 3372 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3372:src/display.c **** 	      ++i;
 1141              		.loc 1 3372 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE205:
 1151              		.cfi_endproc
 1152              	.LFE39:
ARM GAS  /tmp/ccpF0v4D.s 			page 86


 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 442:src/display.c ****   union {
 1169              		.loc 1 442 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/display.c ****     char buf[4];
 1173              		.loc 1 443 3 view .LVU372
 447:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 447 3 view .LVU373
 461:src/display.c **** #endif
 1175              		.loc 1 461 3 view .LVU374
 464:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 464 3 view .LVU375
 442:src/display.c ****   union {
 1177              		.loc 1 442 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 465:src/display.c ****     negative = 1;
 1185              		.loc 1 465 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 442:src/display.c ****   union {
 1187              		.loc 1 442 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 442:src/display.c ****   union {
 1190              		.loc 1 442 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 465:src/display.c ****     negative = 1;
 1193              		.loc 1 465 3 is_stmt 1 view .LVU380
 442:src/display.c ****   union {
 1194              		.loc 1 442 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 465:src/display.c ****     negative = 1;
 1196              		.loc 1 465 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 464:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 464 12 view .LVU383
ARM GAS  /tmp/ccpF0v4D.s 			page 87


 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 472 3 is_stmt 1 view .LVU384
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 472 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 477:src/display.c **** #endif
 1204              		.loc 1 477 7 is_stmt 1 view .LVU386
 477:src/display.c **** #endif
 1205              		.loc 1 477 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 479 2 is_stmt 1 view .LVU388
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 479 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 479 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 479 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 479 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 486:src/display.c ****     }
 1219              		.loc 1 486 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 466:src/display.c ****     exp = -exp;
 1223              		.loc 1 466 5 view .LVU394
 467:src/display.c ****   }
 1224              		.loc 1 467 5 view .LVU395
 467:src/display.c ****   }
 1225              		.loc 1 467 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 472 3 is_stmt 1 view .LVU397
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 472 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 477:src/display.c **** #endif
 1231              		.loc 1 477 7 is_stmt 1 view .LVU399
 477:src/display.c **** #endif
 1232              		.loc 1 477 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 486:src/display.c ****     }
 1237              		.loc 1 486 21 is_stmt 1 discriminator 1 view .LVU401
ARM GAS  /tmp/ccpF0v4D.s 			page 88


 486:src/display.c ****     }
 1238              		.loc 1 486 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 486:src/display.c ****     }
 1242              		.loc 1 486 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 534:src/display.c **** #endif
 1246              		.loc 1 534 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 536 7 view .LVU405
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 536 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 537 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 536 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 537 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 559:src/display.c ****     }
 1267              		.loc 1 559 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 560:src/display.c **** 
 1272              		.loc 1 560 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 557:src/display.c ****     no_number:
 1281              		.loc 1 557 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/ccpF0v4D.s 			page 89


 1284              	.LVL122:
 559:src/display.c ****     }
 1285              		.loc 1 559 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 560:src/display.c **** 
 1290              		.loc 1 560 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 482:src/display.c **** #else
 1299              		.loc 1 482 12 is_stmt 1 view .LVU415
 482:src/display.c **** #else
 1300              		.loc 1 482 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 482:src/display.c **** #else
 1303              		.loc 1 482 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 486:src/display.c ****     }
 1306              		.loc 1 486 7 is_stmt 1 view .LVU418
 486:src/display.c ****     }
 1307              		.loc 1 486 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 486:src/display.c ****     }
 1311              		.loc 1 486 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 489 7 is_stmt 1 view .LVU421
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 489 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 493:src/display.c **** #endif
 1321              		.loc 1 493 2 is_stmt 1 view .LVU423
 493:src/display.c **** #endif
 1322              		.loc 1 493 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 493:src/display.c **** #endif
 1325              		.loc 1 493 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
ARM GAS  /tmp/ccpF0v4D.s 			page 90


 493:src/display.c **** #endif
 1328              		.loc 1 493 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 482:src/display.c **** #else
 1332              		.loc 1 482 12 is_stmt 1 view .LVU427
 482:src/display.c **** #else
 1333              		.loc 1 482 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 486:src/display.c ****     }
 1337              		.loc 1 486 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 486:src/display.c ****     }
 1341              		.loc 1 486 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 489 21 is_stmt 1 view .LVU431
 1346              	.LBB206:
 1347              	.LBI206:
 308:src/display.c **** {
 1348              		.loc 1 308 13 view .LVU432
 1349              	.LBB207:
 310:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 310 3 view .LVU433
 310:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 310 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 311:src/display.c **** }
 1355              		.loc 1 311 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 310 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 1359              		.loc 1 311 3 is_stmt 1 view .LVU437
 312:src/display.c **** 
 1360              		.loc 1 312 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 311:src/display.c **** }
 1362              		.loc 1 311 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 312:src/display.c **** 
 1365              		.loc 1 312 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 312:src/display.c **** 
ARM GAS  /tmp/ccpF0v4D.s 			page 91


 1369              		.loc 1 312 1 view .LVU441
 1370              	.LBE207:
 1371              	.LBE206:
 495:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 495 4 is_stmt 1 view .LVU442
 503:src/display.c **** #endif
 1373              		.loc 1 503 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 505:src/display.c **** 	  }
 1379              		.loc 1 505 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 505:src/display.c **** 	  }
 1382              		.loc 1 505 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB48:
 367:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 367 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 374:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 374 5 view .LVU447
 367:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 367 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 367:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 367 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 375:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 375 5 view .LVU450
ARM GAS  /tmp/ccpF0v4D.s 			page 92


 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 375:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 375 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 376:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 376 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 374:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 374 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 375:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 375 5 is_stmt 1 view .LVU454
 376:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 376 5 view .LVU455
 376:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 376 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 379:src/display.c **** #endif
 1433              		.loc 1 379 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 379:src/display.c **** #endif
 1436              		.loc 1 379 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 379:src/display.c **** #endif
 1438              		.loc 1 379 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 379:src/display.c **** #endif
 1440              		.loc 1 379 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 379:src/display.c **** #endif
 1444              		.loc 1 379 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 379:src/display.c **** #endif
 1446              		.loc 1 379 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 383:src/display.c **** 
 1448              		.loc 1 383 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 379:src/display.c **** #endif
 1450              		.loc 1 379 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 383:src/display.c **** 
 1453              		.loc 1 383 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 377:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 377 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccpF0v4D.s 			page 93


 1460              	.LVL146:
 379:src/display.c **** #endif
 1461              		.loc 1 379 5 view .LVU467
 379:src/display.c **** #endif
 1462              		.loc 1 379 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE48:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 349:src/display.c ****   if (res) {
 1484              		.loc 1 349 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 350 3 view .LVU470
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 350 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 351:src/display.c ****   } else {
 1491              		.loc 1 351 5 is_stmt 1 view .LVU472
 351:src/display.c ****   } else {
 1492              		.loc 1 351 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 351:src/display.c ****   } else {
 1494              		.loc 1 351 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 351:src/display.c ****   } else {
 1497              		.loc 1 351 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 361:src/display.c **** 
 1503              		.loc 1 361 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 353 5 is_stmt 1 view .LVU477
ARM GAS  /tmp/ccpF0v4D.s 			page 94


 349:src/display.c ****   if (res) {
 1508              		.loc 1 349 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 353 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 353 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 354:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 354 5 is_stmt 1 view .LVU481
 354:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 354 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB210:
 1528              	.LBB211:
 357:src/display.c **** #endif
 1529              		.loc 1 357 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 357:src/display.c **** #endif
 1532              		.loc 1 357 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 357:src/display.c **** #endif
 1534              		.loc 1 357 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 357:src/display.c **** #endif
 1536              		.loc 1 357 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 357:src/display.c **** #endif
 1540              		.loc 1 357 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 357:src/display.c **** #endif
 1542              		.loc 1 357 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 357:src/display.c **** #endif
 1544              		.loc 1 357 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 360:src/display.c **** }
 1548              		.loc 1 360 3 is_stmt 1 view .LVU490
 360:src/display.c **** }
 1549              		.loc 1 360 3 is_stmt 0 view .LVU491
 1550              	.LBE211:
ARM GAS  /tmp/ccpF0v4D.s 			page 95


 1551              	.LBE210:
 360:src/display.c **** }
 1552              		.loc 1 360 3 is_stmt 1 view .LVU492
 361:src/display.c **** 
 1553              		.loc 1 361 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 355:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 355 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB213:
 1567              	.LBI210:
 349:src/display.c ****   if (res) {
 1568              		.loc 1 349 14 view .LVU495
 1569              	.LBB212:
 357:src/display.c **** #endif
 1570              		.loc 1 357 5 view .LVU496
 357:src/display.c **** #endif
 1571              		.loc 1 357 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE212:
 1580              	.LBE213:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 414 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 415 3 view .LVU499
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 414 55 is_stmt 0 view .LVU500
ARM GAS  /tmp/ccpF0v4D.s 			page 96


 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 415 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 415 10 is_stmt 1 view .LVU502
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 415 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB214:
 1618              	.LBB215:
 409:src/display.c ****   return res;
 1619              		.loc 1 409 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 410:src/display.c **** }
 1623              		.loc 1 410 3 is_stmt 1 view .LVU505
 410:src/display.c **** }
 1624              		.loc 1 410 3 is_stmt 0 view .LVU506
 1625              	.LBE215:
 1626              	.LBE214:
 420:src/display.c ****     }
 1627              		.loc 1 420 7 is_stmt 1 view .LVU507
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 415 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 420:src/display.c ****     }
 1631              		.loc 1 420 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 415 24 is_stmt 1 view .LVU510
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 415 10 view .LVU511
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 415 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 416 5 is_stmt 1 view .LVU513
 417:src/display.c ****     else {
 1641              		.loc 1 417 7 view .LVU514
 419:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 419 7 view .LVU515
ARM GAS  /tmp/ccpF0v4D.s 			page 97


 1643              	.LBB218:
 1644              	.LBI214:
 407:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 407 14 view .LVU516
 1646              	.LBB216:
 408:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 408 3 view .LVU517
 409:src/display.c ****   return res;
 1648              		.loc 1 409 8 view .LVU518
 1649              	.LBE216:
 1650              	.LBE218:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 416 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 417:src/display.c ****     else {
 1654              		.loc 1 417 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB219:
 1658              	.LBB217:
 409:src/display.c ****   return res;
 1659              		.loc 1 409 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE217:
 1662              	.LBE219:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 416 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 417:src/display.c ****     else {
 1665              		.loc 1 417 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 415 24 is_stmt 1 view .LVU524
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 415 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 415 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 423:src/display.c **** 
 1680              		.loc 1 423 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
ARM GAS  /tmp/ccpF0v4D.s 			page 98


 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB50:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1542 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1543 2 view .LVU529
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1542 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1543 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1542 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1543 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1544:src/display.c **** 	    if (res) {
 1719              		.loc 1 1544 4 is_stmt 1 view .LVU534
1544:src/display.c **** 	    if (res) {
 1720              		.loc 1 1544 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB222:
 1726              	.LBI222:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1542 18 is_stmt 1 view .LVU536
 1728              	.LBB223:
1545:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1545 6 view .LVU537
1545:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1545 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1546:src/display.c **** 	    } else {
 1732              		.loc 1 1546 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
ARM GAS  /tmp/ccpF0v4D.s 			page 99


 1735              	.LVL168:
1546:src/display.c **** 	    } else {
 1736              		.loc 1 1546 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1546:src/display.c **** 	    } else {
 1739              		.loc 1 1546 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1546:src/display.c **** 	    } else {
 1743              		.loc 1 1546 8 view .LVU542
 1744              	.LBE223:
 1745              	.LBE222:
1578:src/display.c **** 
 1746              		.loc 1 1578 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1556:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1556 6 is_stmt 1 view .LVU544
1556:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1556 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1560:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1560 6 is_stmt 1 view .LVU546
1560:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1560 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1561:src/display.c **** 	    else {
 1759              		.loc 1 1561 8 is_stmt 1 view .LVU548
1561:src/display.c **** 	    else {
 1760              		.loc 1 1561 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1574:src/display.c **** 	  }
 1763              		.loc 1 1574 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1578:src/display.c **** 
 1765              		.loc 1 1578 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1557 8 is_stmt 1 view .LVU552
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1557 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1557 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1557 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
ARM GAS  /tmp/ccpF0v4D.s 			page 100


 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1560:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1560 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB225:
 1783              	.LBB224:
1548:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1548 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1550:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1550 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1551:src/display.c **** #endif
 1793              		.loc 1 1551 8 view .LVU559
1551:src/display.c **** #endif
 1794              		.loc 1 1551 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE224:
 1799              	.LBE225:
1578:src/display.c **** 
 1800              		.loc 1 1578 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1558:src/display.c **** 	    }
 1804              		.loc 1 1558 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1558:src/display.c **** 	    }
 1807              		.loc 1 1558 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1560:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1560 6 is_stmt 1 view .LVU564
 1812              	.L188:
1563:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1563 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1565 8 view .LVU566
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1565 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
ARM GAS  /tmp/ccpF0v4D.s 			page 101


1569:src/display.c **** 	      }
 1821              		.loc 1 1569 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1565 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1566:src/display.c **** 	      }
 1825              		.loc 1 1566 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1569:src/display.c **** 	      }
 1828              		.loc 1 1569 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1571:src/display.c **** #endif
 1832              		.loc 1 1571 8 view .LVU572
1571:src/display.c **** #endif
 1833              		.loc 1 1571 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1574:src/display.c **** 	  }
 1837              		.loc 1 1574 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1578:src/display.c **** 
 1839              		.loc 1 1578 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE50:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1623 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1624:src/display.c **** 	int j=0;
ARM GAS  /tmp/ccpF0v4D.s 			page 102


 1870              		.loc 1 1624 2 view .LVU577
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1625 2 view .LVU578
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1623 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1623 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1625 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1629 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1623 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1625 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1626:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1626 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1627:src/display.c **** 
 1893              		.loc 1 1627 2 view .LVU586
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1629 2 view .LVU587
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1629 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1629 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1630:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1630 4 is_stmt 1 view .LVU590
1630:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1630 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1631:src/display.c **** 	  return;
 1905              		.loc 1 1631 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB226:
 1908              	.LBI226:
 407:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 407 14 view .LVU593
 1910              	.LBB227:
ARM GAS  /tmp/ccpF0v4D.s 			page 103


 408:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 408 3 view .LVU594
 408:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 408 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 408:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 408 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 408:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 408 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 408:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 408 19 view .LVU598
 1923              	.LBE227:
 1924              	.LBE226:
1686:src/display.c **** 
 1925              		.loc 1 1686 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1635:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1635 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1636:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1636 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1637:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1637 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1638:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1638 2 view .LVU603
1638:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1638 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1646:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1646 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
ARM GAS  /tmp/ccpF0v4D.s 			page 104


 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1647:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1647 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1648:src/display.c **** 
 1965              		.loc 1 1648 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1650:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1650 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1651:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1651 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1652:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1652 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1653 2 view .LVU611
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1653 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1654 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1654 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1654 19 is_stmt 1 view .LVU615
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1654 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
ARM GAS  /tmp/ccpF0v4D.s 			page 105


 2001              		.loc 1 1654 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1655:src/display.c **** 
 2004              		.loc 1 1655 2 is_stmt 1 view .LVU618
1655:src/display.c **** 
 2005              		.loc 1 1655 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1655:src/display.c **** 
 2008              		.loc 1 1655 19 is_stmt 1 discriminator 1 view .LVU620
1655:src/display.c **** 
 2009              		.loc 1 1655 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1655:src/display.c **** 
 2012              		.loc 1 1655 30 is_stmt 1 discriminator 1 view .LVU622
1655:src/display.c **** 
 2013              		.loc 1 1655 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1658 2 is_stmt 1 view .LVU624
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1658 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1659:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1659 2 is_stmt 1 view .LVU626
 2027              	.LBB229:
 2028              	.LBI229:
 407:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 407 14 view .LVU627
 2030              	.LBB230:
 408:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 408 3 view .LVU628
 408:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 408 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 408:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 408 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 408:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 408 12 is_stmt 1 view .LVU631
 408:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 408 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 408:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccpF0v4D.s 			page 106


 2042              		.loc 1 408 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 410:src/display.c **** }
 2047              		.loc 1 410 3 is_stmt 1 view .LVU634
 410:src/display.c **** }
 2048              		.loc 1 410 3 is_stmt 0 view .LVU635
 2049              	.LBE230:
 2050              	.LBE229:
1660:src/display.c **** 
 2051              		.loc 1 1660 2 is_stmt 1 view .LVU636
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1663 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1660:src/display.c **** 
 2055              		.loc 1 1660 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1663 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1660:src/display.c **** 
 2061              		.loc 1 1660 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1663 2 is_stmt 1 view .LVU641
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1663 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1664:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1664 2 is_stmt 1 view .LVU643
 2068              	.LBB232:
 2069              	.LBI232:
 407:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 407 14 view .LVU644
 2071              	.LBB233:
 408:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 408 3 view .LVU645
 408:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 408 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 408:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 408 12 is_stmt 1 view .LVU647
 408:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 408 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 408:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 408 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
ARM GAS  /tmp/ccpF0v4D.s 			page 107


 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 410:src/display.c **** }
 2086              		.loc 1 410 3 is_stmt 1 view .LVU650
 410:src/display.c **** }
 2087              		.loc 1 410 3 is_stmt 0 view .LVU651
 2088              	.LBE233:
 2089              	.LBE232:
1665:src/display.c **** 
 2090              		.loc 1 1665 2 is_stmt 1 view .LVU652
1665:src/display.c **** 
 2091              		.loc 1 1665 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1668 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1665:src/display.c **** 
 2096              		.loc 1 1665 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1668 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1665:src/display.c **** 
 2102              		.loc 1 1665 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1668 2 is_stmt 1 view .LVU658
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1668 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1669:src/display.c **** 
 2108              		.loc 1 1669 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1668 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1669:src/display.c **** 
 2113              		.loc 1 1669 2 is_stmt 1 view .LVU662
1669:src/display.c **** 
 2114              		.loc 1 1669 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1669:src/display.c **** 
 2117              		.loc 1 1669 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1672:src/display.c **** 
 2122              		.loc 1 1672 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 108


1669:src/display.c **** 
 2124              		.loc 1 1669 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1672:src/display.c **** 
 2127              		.loc 1 1672 2 is_stmt 1 view .LVU667
1672:src/display.c **** 
 2128              		.loc 1 1672 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1672:src/display.c **** 
 2132              		.loc 1 1672 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1675:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1675 2 is_stmt 1 view .LVU670
 2138              	.LBB235:
 2139              	.LBI235:
 407:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 407 14 view .LVU671
 2141              	.LBB236:
 408:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 408 3 view .LVU672
 408:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 408 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 408:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 408 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 408:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 408 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 410:src/display.c **** }
 2152              		.loc 1 410 3 is_stmt 1 view .LVU676
 410:src/display.c **** }
 2153              		.loc 1 410 3 is_stmt 0 view .LVU677
 2154              	.LBE236:
 2155              	.LBE235:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1679 2 is_stmt 1 view .LVU678
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1679 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1679 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1679 5 view .LVU681
ARM GAS  /tmp/ccpF0v4D.s 			page 109


 2165 0122 78B9     		cbnz	r0, .L229
1680:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1680 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB239:
 2169              	.LBI239:
 407:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 407 14 view .LVU683
 2171              	.LBB240:
 408:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 408 3 view .LVU684
 408:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 408 12 view .LVU685
 408:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 408 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE240:
 2178              	.LBE239:
1686:src/display.c **** 
 2179              		.loc 1 1686 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1639:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1639 4 is_stmt 1 view .LVU688
1639:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1639 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1640:src/display.c **** 	  else
 2191              		.loc 1 1640 6 is_stmt 1 view .LVU690
1640:src/display.c **** 	  else
 2192              		.loc 1 1640 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1640:src/display.c **** 	  else
 2195              		.loc 1 1640 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1640:src/display.c **** 	  else
 2198              		.loc 1 1640 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1640:src/display.c **** 	  else
 2201              		.loc 1 1640 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1643:src/display.c **** 	}
 2205              		.loc 1 1643 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
ARM GAS  /tmp/ccpF0v4D.s 			page 110


 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB241:
 2214              	.LBB237:
 408:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 408 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 408:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 408 16 view .LVU697
 2220              	.LBE237:
 2221              	.LBE241:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1681 9 is_stmt 1 view .LVU698
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1681 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1681 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1682 4 is_stmt 1 view .LVU701
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1682 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1682 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1683:src/display.c **** 	  }
 2239              		.loc 1 1683 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB242:
 2242              	.LBI242:
 407:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 407 14 view .LVU705
 2244              	.LBB243:
 408:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 408 3 view .LVU706
 408:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 408 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 408:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 408 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 408:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 408 19 is_stmt 0 view .LVU709
ARM GAS  /tmp/ccpF0v4D.s 			page 111


 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 408:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 408 19 view .LVU710
 2257              	.LBE243:
 2258              	.LBE242:
1642:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1642 6 is_stmt 1 view .LVU711
 2260              	.LBB245:
 2261              	.LBI245:
 296:src/display.c **** {
 2262              		.loc 1 296 13 view .LVU712
 2263              	.LBB246:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 298 3 view .LVU713
 298:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 298 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 299:src/display.c **** }
 2268              		.loc 1 299 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 298 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2272              		.loc 1 299 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 300:src/display.c **** 
 2275              		.loc 1 300 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 300:src/display.c **** 
 2279              		.loc 1 300 1 view .LVU719
 2280              	.LBE246:
 2281              	.LBE245:
 2282              	.LBB247:
 2283              	.LBB238:
 409:src/display.c ****   return res;
 2284              		.loc 1 409 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 409:src/display.c ****   return res;
 2287              		.loc 1 409 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 410:src/display.c **** }
 2291              		.loc 1 410 3 is_stmt 1 view .LVU722
 410:src/display.c **** }
 2292              		.loc 1 410 3 is_stmt 0 view .LVU723
 2293              	.LBE238:
ARM GAS  /tmp/ccpF0v4D.s 			page 112


 2294              	.LBE247:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1679 2 is_stmt 1 view .LVU724
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1679 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1679 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB248:
 2307              	.LBB228:
 409:src/display.c ****   return res;
 2308              		.loc 1 409 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE228:
 2314              	.LBE248:
1632:src/display.c **** 	}
 2315              		.loc 1 1632 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB249:
 2320              	.LBB234:
 409:src/display.c ****   return res;
 2321              		.loc 1 409 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 409:src/display.c ****   return res;
 2325              		.loc 1 409 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 409:src/display.c ****   return res;
 2328              		.loc 1 409 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 409:src/display.c ****   return res;
 2333              		.loc 1 409 8 view .LVU732
 2334              	.LBE234:
 2335              	.LBE249:
 2336              	.LBB250:
 2337              	.LBB231:
 409:src/display.c ****   return res;
 2338              		.loc 1 409 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
ARM GAS  /tmp/ccpF0v4D.s 			page 113


 2341              	.LVL245:
 409:src/display.c ****   return res;
 2342              		.loc 1 409 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 409:src/display.c ****   return res;
 2345              		.loc 1 409 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 409:src/display.c ****   return res;
 2350              		.loc 1 409 8 view .LVU736
 2351              	.LBE231:
 2352              	.LBE250:
 2353              	.LBB251:
 2354              	.LBB244:
 409:src/display.c ****   return res;
 2355              		.loc 1 409 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE244:
 2369              	.LBE251:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1689 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1690:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1690 2 view .LVU739
1691:src/display.c **** 	int j;
 2389              		.loc 1 1691 2 view .LVU740
1692:src/display.c **** 
 2390              		.loc 1 1692 2 view .LVU741
1694:src/display.c **** 	  return 1;
ARM GAS  /tmp/ccpF0v4D.s 			page 114


 2391              		.loc 1 1694 2 view .LVU742
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1689 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1694:src/display.c **** 	  return 1;
 2403              		.loc 1 1694 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1689 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1694:src/display.c **** 	  return 1;
 2408              		.loc 1 1694 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1694:src/display.c **** 	  return 1;
 2411              		.loc 1 1694 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1695:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1695 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1752:src/display.c **** 
 2418              		.loc 1 1752 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB260:
 2429              	.LBI260:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1689 18 is_stmt 1 view .LVU750
 2431              	.LBB261:
1696:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1696 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1697:src/display.c **** 	  return 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 115


 2438              		.loc 1 1697 2 view .LVU752
1697:src/display.c **** 	  return 0;
 2439              		.loc 1 1697 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1697:src/display.c **** 	  return 0;
 2444              		.loc 1 1697 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1699:src/display.c **** 	  return 0;
 2447              		.loc 1 1699 2 is_stmt 1 view .LVU755
1699:src/display.c **** 	  return 0;
 2448              		.loc 1 1699 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1699:src/display.c **** 	  return 0;
 2453              		.loc 1 1699 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1701:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1701 2 is_stmt 1 view .LVU758
1701:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1701 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1707:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1707 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1708:src/display.c **** 
 2469              		.loc 1 1708 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1710:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1710 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1711:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1711 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
ARM GAS  /tmp/ccpF0v4D.s 			page 116


 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1712:src/display.c **** 
 2487              		.loc 1 1712 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1714:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1714 2 view .LVU765
1714:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1714 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1714:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1714 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1719 2 is_stmt 1 view .LVU768
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1719 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1719 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1720 4 is_stmt 1 view .LVU771
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1720 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1720 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1691:src/display.c **** 	int j;
 2518              		.loc 1 1691 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1691:src/display.c **** 	int j;
 2521              		.loc 1 1691 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1728:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1728 2 is_stmt 1 view .LVU776
1728:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1728 17 is_stmt 0 view .LVU777
ARM GAS  /tmp/ccpF0v4D.s 			page 117


 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1728:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1728 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1729 2 is_stmt 1 view .LVU779
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1729 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1729 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1730:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1730 2 is_stmt 1 view .LVU782
1730:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1730 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1730:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1730 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1731:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1731 2 is_stmt 1 view .LVU785
1731:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1731 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1732:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1732 2 is_stmt 1 view .LVU787
1732:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1732 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1736 12 is_stmt 1 view .LVU789
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1736 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1735:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1735 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
ARM GAS  /tmp/ccpF0v4D.s 			page 118


 2570              	.L247:
1737:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1737 4 is_stmt 1 view .LVU792
 2572              	.LBB262:
 2573              	.LBI262:
 407:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 407 14 view .LVU793
 2575              	.LBB263:
 408:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 408 3 view .LVU794
 408:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 408 12 view .LVU795
 408:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 408 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 408:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 408 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 408:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 408 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 408:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 408 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 410:src/display.c **** }
 2591              		.loc 1 410 3 is_stmt 1 view .LVU800
 410:src/display.c **** }
 2592              		.loc 1 410 3 is_stmt 0 view .LVU801
 2593              	.LBE263:
 2594              	.LBE262:
1738:src/display.c **** 	}
 2595              		.loc 1 1738 4 is_stmt 1 view .LVU802
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1736 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1738:src/display.c **** 	}
 2599              		.loc 1 1738 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1736 24 is_stmt 1 view .LVU805
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1736 12 view .LVU806
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1736 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1741 2 is_stmt 1 view .LVU808
ARM GAS  /tmp/ccpF0v4D.s 			page 119


1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1741 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1741 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1743 7 is_stmt 1 view .LVU811
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1743 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1746:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1746 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1747 26 is_stmt 1 view .LVU814
 2628              	.LBB266:
 2629              	.LBB264:
 408:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 408 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 408:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 408 16 view .LVU816
 2637              	.LBE264:
 2638              	.LBE266:
 2639              	.LBB267:
 2640              	.LBB268:
 408:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 408 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 408:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 408 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 410:src/display.c **** }
 2648              		.loc 1 410 3 is_stmt 1 view .LVU819
 410:src/display.c **** }
 2649              		.loc 1 410 3 is_stmt 0 view .LVU820
 2650              	.LBE268:
 2651              	.LBE267:
1749:src/display.c **** 	}
 2652              		.loc 1 1749 4 is_stmt 1 view .LVU821
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
ARM GAS  /tmp/ccpF0v4D.s 			page 120


 2653              		.loc 1 1747 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1749:src/display.c **** 	}
 2656              		.loc 1 1749 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1747 38 is_stmt 1 view .LVU824
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1747 26 view .LVU825
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1747 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1748:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1748 4 is_stmt 1 view .LVU827
 2667              	.LBB270:
 2668              	.LBI267:
 407:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 407 14 view .LVU828
 2670              	.LBB269:
 408:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 408 3 view .LVU829
 408:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 408 12 view .LVU830
 408:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 408 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 408:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 408 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 409:src/display.c ****   return res;
 2680              		.loc 1 409 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 409:src/display.c ****   return res;
 2684              		.loc 1 409 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 409:src/display.c ****   return res;
 2688              		.loc 1 409 8 view .LVU835
 2689              	.LBE269:
 2690              	.LBE270:
 2691              	.LBB271:
 2692              	.LBB265:
 409:src/display.c ****   return res;
 2693              		.loc 1 409 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccpF0v4D.s 			page 121


 2696              	.LVL294:
 409:src/display.c ****   return res;
 2697              		.loc 1 409 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 409:src/display.c ****   return res;
 2701              		.loc 1 409 8 view .LVU838
 2702              	.LBE265:
 2703              	.LBE271:
1742:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1742 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1733:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1733 4 is_stmt 1 view .LVU840
1734:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1734 4 view .LVU841
1734:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1734 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1736 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1725:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1725 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1726:src/display.c **** 	}
 2725              		.loc 1 1726 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1691:src/display.c **** 	int j;
 2729              		.loc 1 1691 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1726:src/display.c **** 	}
 2732              		.loc 1 1726 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1691:src/display.c **** 	int j;
 2735              		.loc 1 1691 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1702:src/display.c **** 	    *res++ += '-';
ARM GAS  /tmp/ccpF0v4D.s 			page 122


 2740              		.loc 1 1702 4 is_stmt 1 view .LVU849
1702:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1702 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1703:src/display.c **** 	  else
 2743              		.loc 1 1703 6 is_stmt 1 view .LVU851
1703:src/display.c **** 	  else
 2744              		.loc 1 1703 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1703:src/display.c **** 	  else
 2747              		.loc 1 1703 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1703:src/display.c **** 	  else
 2750              		.loc 1 1703 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1703:src/display.c **** 	  else
 2753              		.loc 1 1703 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1703:src/display.c **** 	  else
 2756              		.loc 1 1703 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1715:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1715 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1716:src/display.c **** 	}
 2764              		.loc 1 1716 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1721:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1721 6 view .LVU859
1721:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1721 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1721:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1721 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1721:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1721 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1721:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1721 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/ccpF0v4D.s 			page 123


 2783              	.LVL311:
1722:src/display.c **** 	  }
 2784              		.loc 1 1722 6 is_stmt 1 view .LVU864
1722:src/display.c **** 	  }
 2785              		.loc 1 1722 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1722:src/display.c **** 	  }
 2788              		.loc 1 1722 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1722:src/display.c **** 	  }
 2792              		.loc 1 1722 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1705:src/display.c **** 	}
 2796              		.loc 1 1705 6 is_stmt 1 view .LVU868
 2797              	.LBB272:
 2798              	.LBI272:
 296:src/display.c **** {
 2799              		.loc 1 296 13 view .LVU869
 2800              	.LBB273:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 298 3 view .LVU870
 298:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 298 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 299:src/display.c **** }
 2805              		.loc 1 299 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 298 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2809              		.loc 1 299 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 300:src/display.c **** 
 2812              		.loc 1 300 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE273:
 2825              	.LBE272:
 2826              	.LBE261:
 2827              	.LBE260:
ARM GAS  /tmp/ccpF0v4D.s 			page 124


 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 562 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/display.c ****       int c;
 2849              		.loc 1 563 7 view .LVU877
 2850              	.LVL316:
 564:src/display.c ****       unsigned int b;
 2851              		.loc 1 564 7 view .LVU878
 565:src/display.c **** 
 2852              		.loc 1 565 7 view .LVU879
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 568 7 view .LVU880
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 562 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 568 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 577:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 577 7 is_stmt 1 view .LVU883
 577:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 577 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 577 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
ARM GAS  /tmp/ccpF0v4D.s 			page 125


 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 579:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 579 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 580:src/display.c **** 
 2878              		.loc 1 580 7 view .LVU887
 579:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 579 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 580:src/display.c **** 
 2883              		.loc 1 580 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 583 7 is_stmt 1 view .LVU890
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 583 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 583 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 585 7 is_stmt 1 view .LVU893
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 585 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 585 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 587:src/display.c **** 
 2901              		.loc 1 587 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 573:src/display.c ****       }
 2905              		.loc 1 573 16 is_stmt 1 view .LVU897
 573:src/display.c ****       }
 2906              		.loc 1 573 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 573:src/display.c ****       }
 2911              		.loc 1 573 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 573:src/display.c ****       }
 2914              		.loc 1 573 39 is_stmt 1 view .LVU900
 577:src/display.c **** 	SET_EXP_SIGN;
ARM GAS  /tmp/ccpF0v4D.s 			page 126


 2915              		.loc 1 577 7 view .LVU901
 577:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 577 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 577 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 578:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 578 2 is_stmt 1 view .LVU904
 2923              	.LBB280:
 2924              	.LBI280:
 308:src/display.c **** {
 2925              		.loc 1 308 13 view .LVU905
 2926              	.LBB281:
 310:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 310 3 view .LVU906
 310:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 310 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 311:src/display.c **** }
 2931              		.loc 1 311 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 310 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 2935              		.loc 1 311 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 312:src/display.c **** 
 2938              		.loc 1 312 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 312:src/display.c **** 
 2942              		.loc 1 312 1 view .LVU912
 2943              	.LBE281:
 2944              	.LBE280:
 2945              	.LBB282:
 2946              	.LBI282:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 562 17 is_stmt 1 view .LVU913
 2948              	.LBB283:
 586:src/display.c ****     }
 2949              		.loc 1 586 2 view .LVU914
 2950              	.LBE283:
 2951              	.LBE282:
 587:src/display.c **** 
 2952              		.loc 1 587 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccpF0v4D.s 			page 127


 2958              	.LVL327:
 2959              	.LBB285:
 2960              	.LBB284:
 586:src/display.c ****     }
 2961              		.loc 1 586 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 586:src/display.c ****     }
 2968              		.loc 1 586 2 view .LVU917
 2969              	.LBE284:
 2970              	.LBE285:
 584:src/display.c ****       if (get_overflow())
 2971              		.loc 1 584 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1402:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1402 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1402:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1402 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
ARM GAS  /tmp/ccpF0v4D.s 			page 128


 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1402:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1402 67 view .LVU921
 3019 0006 1546     		mov	r5, r2
 3020 0008 0646     		mov	r6, r0
 3021 000a 0F46     		mov	r7, r1
1403:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1403 2 is_stmt 1 view .LVU922
1403:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1403 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1403:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1403 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L377
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1409 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1403:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1403 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1404:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1404 2 is_stmt 1 view .LVU927
1405:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1405 2 view .LVU928
1406:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1406 2 view .LVU929
1407:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1407 2 view .LVU930
1408:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1408 2 view .LVU931
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1409 2 view .LVU932
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1409 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1410:src/display.c **** 
 3045              		.loc 1 1410 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1412:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1412 2 view .LVU935
 3048 0020 00F24181 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L377+4
 3050 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3051              	.LVL334:
1420:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1420 2 view .LVU936
ARM GAS  /tmp/ccpF0v4D.s 			page 129


1420:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1420 5 is_stmt 0 view .LVU937
 3054 002a 002D     		cmp	r5, #0
 3055 002c 00F04181 		beq	.L368
 3056              	.LVL335:
 3057              	.L288:
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1425 2 is_stmt 1 view .LVU938
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1425 24 is_stmt 0 view .LVU939
 3060 0030 0AF1FF33 		add	r3, r10, #-1
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1425 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1425 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F380 		bne	.L369
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1442 4 is_stmt 1 view .LVU942
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1442 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 17DC     		bgt	.L299
 3071              	.LBB286:
1443:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1443 6 is_stmt 1 view .LVU944
1443:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1443 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF1200C 		sub	ip, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA0CF3 		lsl	r3, r1, ip
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1444 6 is_stmt 1 view .LVU946
1443:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1443 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1444 9 view .LVU948
 3087 0068 3040     		ands	r0, r0, r6
 3088 006a 3940     		ands	r1, r1, r7
 3089              	.LVL337:
1445:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1445 9 view .LVU949
 3091 006c BAF10A0F 		cmp	r10, #10
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1444 9 view .LVU950
 3093 0070 0646     		mov	r6, r0
 3094              	.LVL338:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
ARM GAS  /tmp/ccpF0v4D.s 			page 130


 3095              		.loc 1 1444 9 view .LVU951
 3096 0072 0F46     		mov	r7, r1
1445:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1445 6 is_stmt 1 view .LVU952
1445:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1445 9 is_stmt 0 view .LVU953
 3099 0074 00F03D81 		beq	.L370
 3100              	.LVL339:
 3101              	.L299:
1445:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1445 9 view .LVU954
 3103              	.LBE286:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1449 4 is_stmt 1 view .LVU955
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1449 8 is_stmt 0 view .LVU956
 3106 0078 B54B     		ldr	r3, .L377+8
 3107 007a 1B68     		ldr	r3, [r3]
 3108 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1449 7 view .LVU957
 3110 0080 9A07     		lsls	r2, r3, #30
 3111 0082 41D5     		bpl	.L330
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1452 11 is_stmt 1 view .LVU958
 3113              	.LBB287:
1460:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1460 6 view .LVU959
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1461 6 view .LVU960
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1461 25 is_stmt 0 view .LVU961
 3117 0084 4FEA5A02 		lsr	r2, r10, #1
 3118              	.LVL340:
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1462 6 is_stmt 1 view .LVU962
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1462 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1462 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1463:src/display.c **** 
 3131              		.loc 1 1463 6 is_stmt 1 discriminator 4 view .LVU965
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1465 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0308 		add	r8, fp, r3
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1465 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccpF0v4D.s 			page 131


 3136              	.LVL342:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1465 21 discriminator 4 view .LVU968
 3138 00a2 B8FBF3F8 		udiv	r8, r8, r3
1466:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1466 6 discriminator 4 view .LVU969
 3140 00a6 B8F1000F 		cmp	r8, #0
1463:src/display.c **** 
 3141              		.loc 1 1463 8 discriminator 4 view .LVU970
 3142 00aa 3046     		mov	r0, r6
 3143 00ac 3946     		mov	r1, r7
 3144              	.LVL343:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU971
1466:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1466 6 discriminator 4 view .LVU972
1466:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1466 16 discriminator 4 view .LVU973
1466:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1466 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ae 40F38381 		ble	.L331
 3150 00b2 05AC     		add	r4, sp, #20
 3151 00b4 DFF8A4B2 		ldr	fp, .L377+20
 3152              	.LVL344:
1466:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1466 6 discriminator 4 view .LVU975
 3154 00b8 08EB0406 		add	r6, r8, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB288:
1467:src/display.c **** 	      v /= b;
 3158              		.loc 1 1467 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00bc 5246     		mov	r2, r10
 3160 00be 0023     		movs	r3, #0
 3161 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1468:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1468 8 discriminator 3 view .LVU977
1469:src/display.c **** 	    }
 3164              		.loc 1 1469 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c8 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1469:src/display.c **** 	    }
 3168              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE288:
1466:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1466 21 discriminator 3 view .LVU980
1466:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1466 16 discriminator 3 view .LVU981
1466:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1466 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00cc B442     		cmp	r4, r6
 3174 00ce F5D1     		bne	.L306
 3175 00d0 08F1FF31 		add	r1, r8, #-1
 3176              	.LVL348:
1466:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccpF0v4D.s 			page 132


 3177              		.loc 1 1466 6 view .LVU983
 3178 00d4 4446     		mov	r4, r8
 3179              	.LVL349:
 3180              	.L298:
1466:src/display.c **** 	      const int r = v % b;
 3181              		.loc 1 1466 6 view .LVU984
 3182              	.LBE287:
1479:src/display.c **** 	if (res) {
 3183              		.loc 1 1479 2 is_stmt 1 view .LVU985
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3184              		.loc 1 1480 2 view .LVU986
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3185              		.loc 1 1480 5 is_stmt 0 view .LVU987
 3186 00d6 002D     		cmp	r5, #0
 3187 00d8 3ED0     		beq	.L307
 3188              	.LVL350:
 3189              	.L371:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3190              		.loc 1 1481 4 is_stmt 1 view .LVU988
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3191              		.loc 1 1481 7 is_stmt 0 view .LVU989
 3192 00da 049B     		ldr	r3, [sp, #16]
 3193 00dc 13B1     		cbz	r3, .L308
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3194              		.loc 1 1481 14 is_stmt 1 discriminator 1 view .LVU990
 3195              	.LVL351:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3196              		.loc 1 1481 21 is_stmt 0 discriminator 1 view .LVU991
 3197 00de 2D23     		movs	r3, #45
 3198 00e0 05F8013B 		strb	r3, [r5], #1
 3199              	.LVL352:
 3200              	.L308:
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3201              		.loc 1 1482 4 is_stmt 1 view .LVU992
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3202              		.loc 1 1482 7 is_stmt 0 view .LVU993
 3203 00e4 0D2C     		cmp	r4, #13
 3204 00e6 00F3E980 		bgt	.L309
1489:src/display.c **** 	      *res++ = buf[i];
 3205              		.loc 1 1489 12 is_stmt 1 view .LVU994
 3206              	.LVL353:
1489:src/display.c **** 	      *res++ = buf[i];
 3207              		.loc 1 1489 12 is_stmt 0 view .LVU995
 3208 00ea 481C     		adds	r0, r1, #1
 3209 00ec 09D0     		beq	.L285
 3210 00ee 0131     		adds	r1, r1, #1
 3211 00f0 05AA     		add	r2, sp, #20
 3212 00f2 013D     		subs	r5, r5, #1
 3213 00f4 1144     		add	r1, r1, r2
 3214              	.LVL354:
 3215              	.L312:
1490:src/display.c **** 	  }
 3216              		.loc 1 1490 8 is_stmt 1 view .LVU996
1490:src/display.c **** 	  }
 3217              		.loc 1 1490 15 is_stmt 0 view .LVU997
 3218 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3219              	.LVL355:
ARM GAS  /tmp/ccpF0v4D.s 			page 133


1490:src/display.c **** 	  }
 3220              		.loc 1 1490 15 view .LVU998
 3221 00fa 05F8013F 		strb	r3, [r5, #1]!
 3222              	.LVL356:
1489:src/display.c **** 	      *res++ = buf[i];
 3223              		.loc 1 1489 12 is_stmt 1 view .LVU999
1489:src/display.c **** 	      *res++ = buf[i];
 3224              		.loc 1 1489 12 is_stmt 0 view .LVU1000
 3225 00fe 9142     		cmp	r1, r2
 3226 0100 F9D1     		bne	.L312
 3227              	.LVL357:
 3228              	.L285:
1537:src/display.c **** 
 3229              		.loc 1 1537 7 view .LVU1001
 3230 0102 17B0     		add	sp, sp, #92
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed
 3234 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3235              	.LVL358:
 3236              	.L330:
 3237              		.cfi_restore_state
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3238              		.loc 1 1449 25 discriminator 1 view .LVU1002
 3239 0108 56EA0703 		orrs	r3, r6, r7
 3240 010c 00F0C480 		beq	.L293
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 3241              		.loc 1 1452 11 is_stmt 1 view .LVU1003
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3242              		.loc 1 1453 6 view .LVU1004
 3243 0110 DFF848B2 		ldr	fp, .L377+20
 3244              	.LVL359:
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3245              		.loc 1 1453 6 is_stmt 0 view .LVU1005
 3246 0114 CDF800A0 		str	r10, [sp]
 3247 0118 0023     		movs	r3, #0
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3248              		.loc 1 1453 8 view .LVU1006
 3249 011a B046     		mov	r8, r6
 3250 011c D946     		mov	r9, fp
 3251 011e 3E46     		mov	r6, r7
1454:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1454 6 is_stmt 1 view .LVU1007
 3253              	.LVL360:
1454:src/display.c **** 	      const int r = v % b;
 3254              		.loc 1 1454 16 view .LVU1008
 3255 0120 9B46     		mov	fp, r3
 3256 0122 05AF     		add	r7, sp, #20
 3257              	.LVL361:
 3258              	.L304:
 3259              	.LBB289:
1455:src/display.c **** 	      v /= b;
 3260              		.loc 1 1455 8 discriminator 3 view .LVU1009
 3261 0124 4046     		mov	r0, r8
 3262 0126 3146     		mov	r1, r6
 3263 0128 5246     		mov	r2, r10
 3264 012a 5B46     		mov	r3, fp
ARM GAS  /tmp/ccpF0v4D.s 			page 134


 3265 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3266              	.LVL362:
 3267 0130 3346     		mov	r3, r6
 3268 0132 9446     		mov	ip, r2
 3269              	.LVL363:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3270              		.loc 1 1456 8 discriminator 3 view .LVU1010
 3271              	.LBE289:
1454:src/display.c **** 	      const int r = v % b;
 3272              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU1011
 3273 0134 5B45     		cmp	r3, fp
 3274 0136 4246     		mov	r2, r8
 3275              	.LVL364:
 3276              	.LBB290:
1457:src/display.c **** 	    }
 3277              		.loc 1 1457 15 discriminator 3 view .LVU1012
 3278 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3279              	.LVL365:
1457:src/display.c **** 	    }
 3280              		.loc 1 1457 15 discriminator 3 view .LVU1013
 3281 013c 07F801CB 		strb	ip, [r7], #1
 3282              	.LBE290:
1454:src/display.c **** 	      const int r = v % b;
 3283              		.loc 1 1454 6 discriminator 3 view .LVU1014
 3284 0140 08BF     		it	eq
 3285 0142 5245     		cmpeq	r2, r10
 3286              	.LBB291:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3287              		.loc 1 1456 10 discriminator 3 view .LVU1015
 3288 0144 0E46     		mov	r6, r1
 3289              	.LVL366:
1457:src/display.c **** 	    }
 3290              		.loc 1 1457 8 is_stmt 1 discriminator 3 view .LVU1016
 3291              	.LBE291:
1454:src/display.c **** 	      const int r = v % b;
 3292              		.loc 1 1454 24 discriminator 3 view .LVU1017
 3293              	.LBB292:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3294              		.loc 1 1456 10 is_stmt 0 discriminator 3 view .LVU1018
 3295 0146 8046     		mov	r8, r0
 3296 0148 2146     		mov	r1, r4
 3297              	.LVL367:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3298              		.loc 1 1456 10 discriminator 3 view .LVU1019
 3299              	.LBE292:
1454:src/display.c **** 	      const int r = v % b;
 3300              		.loc 1 1454 25 discriminator 3 view .LVU1020
 3301 014a 04F10104 		add	r4, r4, #1
 3302              	.LVL368:
1454:src/display.c **** 	      const int r = v % b;
 3303              		.loc 1 1454 16 is_stmt 1 discriminator 3 view .LVU1021
1454:src/display.c **** 	      const int r = v % b;
 3304              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU1022
 3305 014e E9D2     		bcs	.L304
 3306 0150 DDF800A0 		ldr	r10, [sp]
 3307              	.LVL369:
1479:src/display.c **** 	if (res) {
ARM GAS  /tmp/ccpF0v4D.s 			page 135


 3308              		.loc 1 1479 2 is_stmt 1 view .LVU1023
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3309              		.loc 1 1480 2 view .LVU1024
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3310              		.loc 1 1480 5 is_stmt 0 view .LVU1025
 3311 0154 002D     		cmp	r5, #0
 3312 0156 C0D1     		bne	.L371
 3313              	.LVL370:
 3314              	.L307:
 3315              	.LBB293:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3316              		.loc 1 1508 4 is_stmt 1 view .LVU1026
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3317              		.loc 1 1508 33 is_stmt 0 view .LVU1027
 3318 0158 BAF1020F 		cmp	r10, #2
 3319 015c 00F0F080 		beq	.L372
 3320              	.LVL371:
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 3321              		.loc 1 1509 4 is_stmt 1 view .LVU1028
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 3322              		.loc 1 1509 30 is_stmt 0 view .LVU1029
 3323 0160 BAF1040F 		cmp	r10, #4
 3324 0164 00F01F81 		beq	.L373
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3325              		.loc 1 1508 33 view .LVU1030
 3326 0168 BAF1100F 		cmp	r10, #16
 3327 016c 0CBF     		ite	eq
 3328 016e 4FF0020A 		moveq	r10, #2
 3329 0172 4FF0030A 		movne	r10, #3
 3330 0176 0C26     		movs	r6, #12
 3331              	.LVL372:
 3332              	.L314:
1511:src/display.c **** #endif
 3333              		.loc 1 1511 4 is_stmt 1 view .LVU1031
 3334 0178 0091     		str	r1, [sp]
 3335 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3336              	.LVL373:
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3337              		.loc 1 1513 4 view .LVU1032
1514:src/display.c **** 	    State2.window = 0;
 3338              		.loc 1 1514 26 is_stmt 0 view .LVU1033
 3339 017e 724B     		ldr	r3, .L377
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3340              		.loc 1 1513 17 view .LVU1034
 3341 0180 744A     		ldr	r2, .L377+12
1514:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1514 26 view .LVU1035
 3343 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3344              		.loc 1 1513 27 view .LVU1036
 3345 0184 0099     		ldr	r1, [sp]
 3346 0186 91FBF6F1 		sdiv	r1, r1, r6
1514:src/display.c **** 	    State2.window = 0;
 3347              		.loc 1 1514 8 view .LVU1037
 3348 018a C3F3C207 		ubfx	r7, r3, #3, #3
1514:src/display.c **** 	    State2.window = 0;
 3349              		.loc 1 1514 7 view .LVU1038
ARM GAS  /tmp/ccpF0v4D.s 			page 136


 3350 018e B942     		cmp	r1, r7
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3351              		.loc 1 1513 17 view .LVU1039
 3352 0190 1160     		str	r1, [r2]
1514:src/display.c **** 	    State2.window = 0;
 3353              		.loc 1 1514 4 is_stmt 1 view .LVU1040
1514:src/display.c **** 	    State2.window = 0;
 3354              		.loc 1 1514 7 is_stmt 0 view .LVU1041
 3355 0192 C0F2F680 		blt	.L316
 3356 0196 06FB07F7 		mul	r7, r6, r7
 3357              	.L317:
1516:src/display.c **** 
 3358              		.loc 1 1516 4 is_stmt 1 view .LVU1042
1516:src/display.c **** 
 3359              		.loc 1 1516 11 is_stmt 0 view .LVU1043
 3360 019a 16AB     		add	r3, sp, #88
 3361 019c 16AA     		add	r2, sp, #88
 3362 019e 1C44     		add	r4, r4, r3
 3363              	.LVL374:
1516:src/display.c **** 
 3364              		.loc 1 1516 11 view .LVU1044
 3365 01a0 D519     		adds	r5, r2, r7
 3366 01a2 0023     		movs	r3, #0
 3367 01a4 453D     		subs	r5, r5, #69
 3368 01a6 04F8443C 		strb	r3, [r4, #-68]
1518:src/display.c **** 	  for (k = 0; k < 12; k++)
 3369              		.loc 1 1518 4 is_stmt 1 view .LVU1045
 3370              	.LVL375:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3371              		.loc 1 1519 4 view .LVU1046
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3372              		.loc 1 1519 16 view .LVU1047
1516:src/display.c **** 
 3373              		.loc 1 1516 11 is_stmt 0 view .LVU1048
 3374 01aa 2A46     		mov	r2, r5
 3375              	.LVL376:
 3376              	.L319:
1520:src/display.c **** 	      break;
 3377              		.loc 1 1520 6 is_stmt 1 view .LVU1049
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1519 24 view .LVU1050
1520:src/display.c **** 	      break;
 3379              		.loc 1 1520 9 is_stmt 0 view .LVU1051
 3380 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3381 01b0 0029     		cmp	r1, #0
 3382 01b2 00F0EC80 		beq	.L318
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3383              		.loc 1 1519 25 discriminator 2 view .LVU1052
 3384 01b6 0133     		adds	r3, r3, #1
 3385              	.LVL377:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3386              		.loc 1 1519 16 is_stmt 1 discriminator 2 view .LVU1053
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3387              		.loc 1 1519 4 is_stmt 0 discriminator 2 view .LVU1054
 3388 01b8 0C2B     		cmp	r3, #12
 3389 01ba F7D1     		bne	.L319
1522:src/display.c **** 	    int ch = buf[j++];
ARM GAS  /tmp/ccpF0v4D.s 			page 137


 3390              		.loc 1 1522 4 view .LVU1055
 3391 01bc 4FF00B08 		mov	r8, #11
 3392              	.LVL378:
 3393              	.L320:
1522:src/display.c **** 	    int ch = buf[j++];
 3394              		.loc 1 1522 4 view .LVU1056
 3395 01c0 0137     		adds	r7, r7, #1
 3396 01c2 4744     		add	r7, r7, r8
 3397 01c4 4446     		mov	r4, r8
 3398 01c6 4FF0630B 		mov	fp, #99
 3399 01ca 09E0     		b	.L325
 3400              	.LVL379:
 3401              	.L374:
 3402              	.LBB294:
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3403              		.loc 1 1528 8 view .LVU1057
 3404 01cc 624B     		ldr	r3, .L377+16
 3405 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3406              	.LVL380:
 3407              	.LBB295:
 3408              	.LBI295:
 367:src/display.c ****   if (sep == SEP_NONE)
 3409              		.loc 1 367 14 is_stmt 1 view .LVU1058
 3410              	.LBB296:
 368:src/display.c ****     return res;
 3411              		.loc 1 368 3 view .LVU1059
 368:src/display.c ****     return res;
 3412              		.loc 1 368 6 is_stmt 0 view .LVU1060
 3413 01d0 09B1     		cbz	r1, .L323
 368:src/display.c ****     return res;
 3414              		.loc 1 368 6 view .LVU1061
 3415 01d2 FFF7FEFF 		bl	set_separator.part.0
 3416              	.LVL381:
 3417              	.L323:
 368:src/display.c ****     return res;
 3418              		.loc 1 368 6 view .LVU1062
 3419              	.LBE296:
 3420              	.LBE295:
1529:src/display.c **** 	  }
 3421              		.loc 1 1529 6 is_stmt 1 discriminator 2 view .LVU1063
 3422              	.LBE294:
1522:src/display.c **** 	    int ch = buf[j++];
 3423              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU1064
 3424 01d6 013C     		subs	r4, r4, #1
1522:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1522 4 discriminator 2 view .LVU1065
 3426 01d8 621C     		adds	r2, r4, #1
 3427              	.LBB299:
1529:src/display.c **** 	  }
 3428              		.loc 1 1529 10 discriminator 2 view .LVU1066
 3429 01da ABF1090B 		sub	fp, fp, #9
 3430              	.LVL382:
1529:src/display.c **** 	  }
 3431              		.loc 1 1529 10 discriminator 2 view .LVU1067
 3432              	.LBE299:
1522:src/display.c **** 	    int ch = buf[j++];
 3433              		.loc 1 1522 24 is_stmt 1 discriminator 2 view .LVU1068
ARM GAS  /tmp/ccpF0v4D.s 			page 138


1522:src/display.c **** 	    int ch = buf[j++];
 3434              		.loc 1 1522 14 discriminator 2 view .LVU1069
1522:src/display.c **** 	    int ch = buf[j++];
 3435              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU1070
 3436 01de 16D0     		beq	.L329
 3437              	.LVL383:
 3438              	.L325:
 3439              	.LBB300:
1523:src/display.c **** 	    if (i >= shift)
 3440              		.loc 1 1523 6 is_stmt 1 view .LVU1071
1525:src/display.c **** 	    set_dig(dig, ch);
 3441              		.loc 1 1525 8 view .LVU1072
1523:src/display.c **** 	    if (i >= shift)
 3442              		.loc 1 1523 10 is_stmt 0 view .LVU1073
 3443 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1524:src/display.c **** 	      ch -= 030;
 3444              		.loc 1 1524 9 view .LVU1074
 3445 01e4 A8EB0402 		sub	r2, r8, r4
 3446 01e8 B242     		cmp	r2, r6
 3447 01ea A7EB0409 		sub	r9, r7, r4
 3448              	.LVL384:
1524:src/display.c **** 	      ch -= 030;
 3449              		.loc 1 1524 6 is_stmt 1 view .LVU1075
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3450              		.loc 1 1526 6 is_stmt 0 view .LVU1076
 3451 01ee 5846     		mov	r0, fp
1525:src/display.c **** 	    set_dig(dig, ch);
 3452              		.loc 1 1525 11 view .LVU1077
 3453 01f0 A8BF     		it	ge
 3454 01f2 1839     		subge	r1, r1, #24
 3455              	.LVL385:
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3456              		.loc 1 1526 6 is_stmt 1 view .LVU1078
 3457 01f4 FFF7FEFF 		bl	set_dig
 3458              	.LVL386:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3459              		.loc 1 1527 6 view .LVU1079
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3460              		.loc 1 1527 13 is_stmt 0 view .LVU1080
 3461 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3462 01fc 0AFB1393 		mls	r3, r10, r3, r9
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3463              		.loc 1 1527 9 view .LVU1081
 3464 0200 002B     		cmp	r3, #0
 3465 0202 E8D1     		bne	.L323
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3466              		.loc 1 1528 8 is_stmt 1 discriminator 1 view .LVU1082
 3467              	.LBB298:
 3468              	.LBB297:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3469              		.loc 1 370 3 discriminator 1 view .LVU1083
 3470 0204 5846     		mov	r0, fp
 3471              	.LBE297:
 3472              	.LBE298:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3473              		.loc 1 1527 27 is_stmt 0 discriminator 1 view .LVU1084
 3474 0206 002C     		cmp	r4, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 139


 3475 0208 E0D1     		bne	.L374
1529:src/display.c **** 	  }
 3476              		.loc 1 1529 6 is_stmt 1 view .LVU1085
1529:src/display.c **** 	  }
 3477              		.loc 1 1529 10 is_stmt 0 view .LVU1086
 3478 020a ABF1090B 		sub	fp, fp, #9
 3479              	.LVL387:
1529:src/display.c **** 	  }
 3480              		.loc 1 1529 10 view .LVU1087
 3481              	.LBE300:
1522:src/display.c **** 	    int ch = buf[j++];
 3482              		.loc 1 1522 24 is_stmt 1 view .LVU1088
1522:src/display.c **** 	    int ch = buf[j++];
 3483              		.loc 1 1522 14 view .LVU1089
 3484              	.L329:
1531:src/display.c **** 	    if (dig >= 0)
 3485              		.loc 1 1531 4 view .LVU1090
1531:src/display.c **** 	    if (dig >= 0)
 3486              		.loc 1 1531 7 is_stmt 0 view .LVU1091
 3487 020e 049B     		ldr	r3, [sp, #16]
 3488 0210 002B     		cmp	r3, #0
 3489 0212 3FF476AF 		beq	.L285
1532:src/display.c **** 	      set_dig(dig, '-');
 3490              		.loc 1 1532 6 is_stmt 1 view .LVU1092
1532:src/display.c **** 	      set_dig(dig, '-');
 3491              		.loc 1 1532 9 is_stmt 0 view .LVU1093
 3492 0216 BBF1000F 		cmp	fp, #0
 3493 021a C0F2C680 		blt	.L375
 3494              	.LVL388:
 3495              	.L328:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3496              		.loc 1 1533 8 is_stmt 1 view .LVU1094
 3497 021e 5846     		mov	r0, fp
 3498 0220 2D21     		movs	r1, #45
 3499 0222 FFF7FEFF 		bl	set_dig
 3500              	.LVL389:
 3501 0226 6CE7     		b	.L285
 3502              	.LVL390:
 3503              	.L369:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3504              		.loc 1 1533 8 is_stmt 0 view .LVU1095
 3505              	.LBE293:
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3506              		.loc 1 1426 4 is_stmt 1 view .LVU1096
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3507              		.loc 1 1426 8 is_stmt 0 view .LVU1097
 3508 0228 04AA     		add	r2, sp, #16
 3509 022a 3046     		mov	r0, r6
 3510 022c 3946     		mov	r1, r7
 3511 022e FFF7FEFF 		bl	extract_value
 3512              	.LVL391:
 3513 0232 8046     		mov	r8, r0
 3514 0234 8946     		mov	r9, r1
 3515              	.LVL392:
1427:src/display.c **** 	    v = value;
 3516              		.loc 1 1427 4 is_stmt 1 view .LVU1098
1427:src/display.c **** 	    v = value;
ARM GAS  /tmp/ccpF0v4D.s 			page 140


 3517              		.loc 1 1427 8 is_stmt 0 view .LVU1099
 3518 0236 FFF7FEFF 		bl	int_mode
 3519              	.LVL393:
1427:src/display.c **** 	    v = value;
 3520              		.loc 1 1427 7 view .LVU1100
 3521 023a 38BB     		cbnz	r0, .L290
1427:src/display.c **** 	    v = value;
 3522              		.loc 1 1427 33 discriminator 1 view .LVU1101
 3523 023c 049B     		ldr	r3, [sp, #16]
 3524 023e 012B     		cmp	r3, #1
 3525 0240 24D1     		bne	.L290
1427:src/display.c **** 	    v = value;
 3526              		.loc 1 1427 46 discriminator 2 view .LVU1102
 3527 0242 58EA0903 		orrs	r3, r8, r9
 3528 0246 00F08B80 		beq	.L376
 3529              	.LVL394:
 3530              	.L291:
1427:src/display.c **** 	    v = value;
 3531              		.loc 1 1427 46 discriminator 2 view .LVU1103
 3532 024a DFF810B1 		ldr	fp, .L377+20
 3533              	.LVL395:
1402:src/display.c **** 	const int ws = word_size();
 3534              		.loc 1 1402 67 discriminator 3 view .LVU1104
 3535 024e 0395     		str	r5, [sp, #12]
 3536 0250 05AB     		add	r3, sp, #20
 3537 0252 5D46     		mov	r5, fp
 3538              	.LVL396:
1402:src/display.c **** 	const int ws = word_size();
 3539              		.loc 1 1402 67 discriminator 3 view .LVU1105
 3540 0254 5646     		mov	r6, r10
 3541 0256 0027     		movs	r7, #0
 3542 0258 0024     		movs	r4, #0
 3543 025a 9B46     		mov	fp, r3
 3544              	.LVL397:
 3545              	.L297:
 3546              	.LBB303:
1436:src/display.c **** 	      v /= b;
 3547              		.loc 1 1436 8 is_stmt 1 discriminator 3 view .LVU1106
 3548 025c 4046     		mov	r0, r8
 3549 025e 4946     		mov	r1, r9
 3550 0260 3246     		mov	r2, r6
 3551 0262 3B46     		mov	r3, r7
 3552 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3553              	.LVL398:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3554              		.loc 1 1437 8 discriminator 3 view .LVU1107
 3555 0268 CDE90089 		strd	r8, [sp]
1438:src/display.c **** 	    }
 3556              		.loc 1 1438 15 is_stmt 0 discriminator 3 view .LVU1108
 3557 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3558 026e 0BF8013B 		strb	r3, [fp], #1
 3559              	.LBE303:
1435:src/display.c **** 	      const int r = v % b;
 3560              		.loc 1 1435 6 discriminator 3 view .LVU1109
 3561 0272 DDE90023 		ldrd	r2, [sp]
 3562              	.LVL399:
1435:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccpF0v4D.s 			page 141


 3563              		.loc 1 1435 6 discriminator 3 view .LVU1110
 3564 0276 BB42     		cmp	r3, r7
 3565 0278 08BF     		it	eq
 3566 027a B242     		cmpeq	r2, r6
 3567              	.LBB304:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3568              		.loc 1 1437 10 discriminator 3 view .LVU1111
 3569 027c 8946     		mov	r9, r1
 3570              	.LVL400:
1438:src/display.c **** 	    }
 3571              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU1112
 3572              	.LBE304:
1435:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1435 24 discriminator 3 view .LVU1113
 3574              	.LBB305:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3575              		.loc 1 1437 10 is_stmt 0 discriminator 3 view .LVU1114
 3576 027e 8046     		mov	r8, r0
 3577 0280 2146     		mov	r1, r4
 3578              	.LVL401:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3579              		.loc 1 1437 10 discriminator 3 view .LVU1115
 3580              	.LBE305:
1435:src/display.c **** 	      const int r = v % b;
 3581              		.loc 1 1435 25 discriminator 3 view .LVU1116
 3582 0282 04F10104 		add	r4, r4, #1
 3583              	.LVL402:
1435:src/display.c **** 	      const int r = v % b;
 3584              		.loc 1 1435 16 is_stmt 1 discriminator 3 view .LVU1117
1435:src/display.c **** 	      const int r = v % b;
 3585              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU1118
 3586 0286 E9D2     		bcs	.L297
 3587 0288 039D     		ldr	r5, [sp, #12]
 3588 028a 24E7     		b	.L298
 3589              	.LVL403:
 3590              	.L290:
1429:src/display.c **** 	    if (sign)
 3591              		.loc 1 1429 4 is_stmt 1 view .LVU1119
1429:src/display.c **** 	    if (sign)
 3592              		.loc 1 1429 7 is_stmt 0 view .LVU1120
 3593 028c 58EA0903 		orrs	r3, r8, r9
 3594 0290 DBD1     		bne	.L291
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3595              		.loc 1 1430 6 is_stmt 1 view .LVU1121
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3596              		.loc 1 1430 9 is_stmt 0 view .LVU1122
 3597 0292 049B     		ldr	r3, [sp, #16]
 3598 0294 002B     		cmp	r3, #0
 3599 0296 69D1     		bne	.L292
 3600              	.LVL404:
 3601              	.L293:
1432:src/display.c **** 	    return;
 3602              		.loc 1 1432 6 is_stmt 1 view .LVU1123
 3603              	.LBB306:
 3604              	.LBI306:
 407:src/display.c ****   if (res) *res++ = ch;
 3605              		.loc 1 407 14 view .LVU1124
ARM GAS  /tmp/ccpF0v4D.s 			page 142


 3606              	.LBB307:
 408:src/display.c ****   else	set_dig(base, ch);
 3607              		.loc 1 408 3 view .LVU1125
 408:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 408 6 is_stmt 0 view .LVU1126
 3609 0298 002D     		cmp	r5, #0
 3610 029a 6DD0     		beq	.L295
 3611              	.LVL405:
 3612              	.L294:
 408:src/display.c ****   else	set_dig(base, ch);
 3613              		.loc 1 408 12 is_stmt 1 view .LVU1127
 408:src/display.c ****   else	set_dig(base, ch);
 3614              		.loc 1 408 19 is_stmt 0 view .LVU1128
 3615 029c 3023     		movs	r3, #48
 3616 029e 2B70     		strb	r3, [r5]
 3617              	.LBE307:
 3618              	.LBE306:
1537:src/display.c **** 
 3619              		.loc 1 1537 7 view .LVU1129
 3620 02a0 17B0     		add	sp, sp, #92
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 36
 3623              		@ sp needed
 3624 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3625              	.LVL406:
 3626              	.L286:
 3627              		.cfi_restore_state
1417:src/display.c **** 	}
 3628              		.loc 1 1417 11 is_stmt 1 view .LVU1130
1417:src/display.c **** 	}
 3629              		.loc 1 1417 15 is_stmt 0 view .LVU1131
 3630 02a6 FFF7FEFF 		bl	int_base
 3631              	.LVL407:
1417:src/display.c **** 	}
 3632              		.loc 1 1417 15 view .LVU1132
 3633 02aa 8246     		mov	r10, r0
 3634              	.LVL408:
1417:src/display.c **** 	}
 3635              		.loc 1 1417 27 is_stmt 1 view .LVU1133
1420:src/display.c **** 	  IntMaxWindow = 0;
 3636              		.loc 1 1420 2 view .LVU1134
1420:src/display.c **** 	  IntMaxWindow = 0;
 3637              		.loc 1 1420 5 is_stmt 0 view .LVU1135
 3638 02ac 002D     		cmp	r5, #0
 3639 02ae 7FF4BFAE 		bne	.L288
 3640              	.LVL409:
 3641              	.L368:
1421:src/display.c **** 	  carry_overflow();
 3642              		.loc 1 1421 4 is_stmt 1 view .LVU1136
1421:src/display.c **** 	  carry_overflow();
 3643              		.loc 1 1421 17 is_stmt 0 view .LVU1137
 3644 02b2 284B     		ldr	r3, .L377+12
 3645 02b4 1D60     		str	r5, [r3]
1422:src/display.c **** 	}
 3646              		.loc 1 1422 4 is_stmt 1 view .LVU1138
 3647 02b6 FFF7FEFF 		bl	carry_overflow
 3648              	.LVL410:
ARM GAS  /tmp/ccpF0v4D.s 			page 143


 3649 02ba B9E6     		b	.L288
 3650              	.LVL411:
 3651              	.L309:
1483:src/display.c **** 	      *res++ = buf[i];
 3652              		.loc 1 1483 12 view .LVU1139
1483:src/display.c **** 	      *res++ = buf[i];
 3653              		.loc 1 1483 12 is_stmt 0 view .LVU1140
 3654 02bc 05AB     		add	r3, sp, #20
 3655 02be 5818     		adds	r0, r3, r1
1483:src/display.c **** 	      *res++ = buf[i];
 3656              		.loc 1 1483 24 view .LVU1141
 3657 02c0 A4F10D06 		sub	r6, r4, #13
 3658 02c4 6A1E     		subs	r2, r5, #1
 3659              	.LVL412:
 3660              	.L311:
1484:src/display.c **** 	    *res++ = '.';
 3661              		.loc 1 1484 8 is_stmt 1 view .LVU1142
1484:src/display.c **** 	    *res++ = '.';
 3662              		.loc 1 1484 20 is_stmt 0 view .LVU1143
 3663 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3664              	.LVL413:
1484:src/display.c **** 	    *res++ = '.';
 3665              		.loc 1 1484 15 view .LVU1144
 3666 02ca 02F8013F 		strb	r3, [r2, #1]!
 3667              	.LVL414:
1483:src/display.c **** 	      *res++ = buf[i];
 3668              		.loc 1 1483 12 is_stmt 1 view .LVU1145
1483:src/display.c **** 	      *res++ = buf[i];
 3669              		.loc 1 1483 12 is_stmt 0 view .LVU1146
 3670 02ce D343     		mvns	r3, r2
 3671 02d0 0B44     		add	r3, r3, r1
 3672 02d2 2B44     		add	r3, r3, r5
 3673 02d4 9E42     		cmp	r6, r3
 3674 02d6 F6DD     		ble	.L311
 3675 02d8 01F10E03 		add	r3, r1, #14
 3676 02dc 1C1B     		subs	r4, r3, r4
 3677              	.LVL415:
1483:src/display.c **** 	      *res++ = buf[i];
 3678              		.loc 1 1483 12 view .LVU1147
 3679 02de 8E42     		cmp	r6, r1
 3680 02e0 C8BF     		it	gt
 3681 02e2 0124     		movgt	r4, #1
 3682 02e4 2A19     		adds	r2, r5, r4
 3683              	.LVL416:
1485:src/display.c **** 	    *res++ = '.';
 3684              		.loc 1 1485 6 is_stmt 1 view .LVU1148
1485:src/display.c **** 	    *res++ = '.';
 3685              		.loc 1 1485 13 is_stmt 0 view .LVU1149
 3686 02e6 2E23     		movs	r3, #46
 3687 02e8 2B55     		strb	r3, [r5, r4]
1486:src/display.c **** 	  }
 3688              		.loc 1 1486 6 is_stmt 1 view .LVU1150
 3689              	.LVL417:
1486:src/display.c **** 	  }
 3690              		.loc 1 1486 13 is_stmt 0 view .LVU1151
 3691 02ea 5370     		strb	r3, [r2, #1]
1537:src/display.c **** 
ARM GAS  /tmp/ccpF0v4D.s 			page 144


 3692              		.loc 1 1537 7 view .LVU1152
 3693 02ec 17B0     		add	sp, sp, #92
 3694              		.cfi_remember_state
 3695              		.cfi_def_cfa_offset 36
 3696              		@ sp needed
 3697 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3698              	.LVL418:
 3699              	.L370:
 3700              		.cfi_restore_state
 3701              	.LBB309:
1445:src/display.c **** 	      vs |= ~mask;
 3702              		.loc 1 1445 38 discriminator 1 view .LVU1153
 3703 02f2 0BF1FF31 		add	r1, fp, #-1
1445:src/display.c **** 	      vs |= ~mask;
 3704              		.loc 1 1445 18 discriminator 1 view .LVU1154
 3705 02f6 CBF1210C 		rsb	ip, fp, #33
 3706 02fa C840     		lsrs	r0, r0, r1
 3707 02fc 07FA0CFC 		lsl	ip, r7, ip
 3708 0300 2039     		subs	r1, r1, #32
 3709 0302 40EA0C00 		orr	r0, r0, ip
 3710 0306 5CBF     		itt	pl
 3711 0308 47FA01F1 		asrpl	r1, r7, r1
 3712 030c 0843     		orrpl	r0, r0, r1
 3713 030e 00F00108 		and	r8, r0, #1
 3714 0312 4FF00009 		mov	r9, #0
 3715 0316 58EA0901 		orrs	r1, r8, r9
 3716 031a 08D0     		beq	.L300
1446:src/display.c **** 	  }
 3717              		.loc 1 1446 8 is_stmt 1 view .LVU1155
1446:src/display.c **** 	  }
 3718              		.loc 1 1446 11 is_stmt 0 view .LVU1156
 3719 031c 5042     		rsbs	r0, r2, #0
 3720 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3721 0322 40EA0602 		orr	r2, r0, r6
 3722              	.LVL419:
1446:src/display.c **** 	  }
 3723              		.loc 1 1446 11 view .LVU1157
 3724 0326 41EA0703 		orr	r3, r1, r7
 3725              	.LVL420:
1446:src/display.c **** 	  }
 3726              		.loc 1 1446 11 view .LVU1158
 3727 032a 1646     		mov	r6, r2
 3728              	.LVL421:
1446:src/display.c **** 	  }
 3729              		.loc 1 1446 11 view .LVU1159
 3730 032c 1F46     		mov	r7, r3
 3731              	.L300:
1446:src/display.c **** 	  }
 3732              		.loc 1 1446 11 view .LVU1160
 3733              	.LBE309:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3734              		.loc 1 1449 4 is_stmt 1 view .LVU1161
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3735              		.loc 1 1449 8 is_stmt 0 view .LVU1162
 3736 032e 084B     		ldr	r3, .L377+8
 3737 0330 1B68     		ldr	r3, [r3]
 3738 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccpF0v4D.s 			page 145


1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3739              		.loc 1 1449 7 view .LVU1163
 3740 0336 9B07     		lsls	r3, r3, #30
 3741 0338 7FF5E6AE 		bpl	.L330
 3742 033c 0223     		movs	r3, #2
 3743 033e ADE6     		b	.L305
 3744              	.LVL422:
 3745              	.L372:
 3746              	.LBB310:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1508 33 view .LVU1164
 3748 0340 0826     		movs	r6, #8
1510:src/display.c **** 	  set_separator_decimal_modes();
 3749              		.loc 1 1510 6 view .LVU1165
 3750 0342 4FF0040A 		mov	r10, #4
 3751 0346 17E7     		b	.L314
 3752              	.L378:
 3753              		.align	2
 3754              	.L377:
 3755 0348 00000000 		.word	StateWhileOn
 3756 034c 00000000 		.word	CSWTCH.344
 3757 0350 00000000 		.word	main_ram
 3758 0354 00000000 		.word	IntMaxWindow
 3759 0358 00000000 		.word	.LANCHOR0
 3760 035c 00000000 		.word	.LANCHOR12
 3761              	.LVL423:
 3762              	.L376:
1510:src/display.c **** 	  set_separator_decimal_modes();
 3763              		.loc 1 1510 6 view .LVU1166
 3764              	.LBE310:
1428:src/display.c **** 	  if (v == 0) {
 3765              		.loc 1 1428 6 is_stmt 1 view .LVU1167
1428:src/display.c **** 	  if (v == 0) {
 3766              		.loc 1 1428 8 is_stmt 0 view .LVU1168
 3767 0360 B046     		mov	r8, r6
 3768              	.LVL424:
1428:src/display.c **** 	  if (v == 0) {
 3769              		.loc 1 1428 8 view .LVU1169
 3770 0362 B946     		mov	r9, r7
 3771              	.LVL425:
1429:src/display.c **** 	    if (sign)
 3772              		.loc 1 1429 4 is_stmt 1 view .LVU1170
1429:src/display.c **** 	    if (sign)
 3773              		.loc 1 1429 7 is_stmt 0 view .LVU1171
 3774 0364 58EA0903 		orrs	r3, r8, r9
 3775 0368 7FF46FAF 		bne	.L291
 3776              	.LVL426:
 3777              	.L292:
1431:src/display.c **** 	    set_dig_s(dig, '0', res);
 3778              		.loc 1 1431 8 is_stmt 1 view .LVU1172
 3779              	.LBB311:
 3780              	.LBI311:
 407:src/display.c ****   if (res) *res++ = ch;
 3781              		.loc 1 407 14 view .LVU1173
 3782              	.LBB312:
 408:src/display.c ****   else	set_dig(base, ch);
 3783              		.loc 1 408 3 view .LVU1174
ARM GAS  /tmp/ccpF0v4D.s 			page 146


 408:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 408 6 is_stmt 0 view .LVU1175
 3785 036c 002D     		cmp	r5, #0
 3786 036e 95D1     		bne	.L294
 409:src/display.c ****   return res;
 3787              		.loc 1 409 8 is_stmt 1 view .LVU1176
 3788 0370 2D21     		movs	r1, #45
 3789 0372 5A20     		movs	r0, #90
 3790 0374 FFF7FEFF 		bl	set_dig
 3791              	.LVL427:
 409:src/display.c ****   return res;
 3792              		.loc 1 409 8 is_stmt 0 view .LVU1177
 3793              	.LBE312:
 3794              	.LBE311:
1432:src/display.c **** 	    return;
 3795              		.loc 1 1432 6 is_stmt 1 view .LVU1178
 3796              	.LBB313:
 407:src/display.c ****   if (res) *res++ = ch;
 3797              		.loc 1 407 14 view .LVU1179
 3798              	.LBB308:
 408:src/display.c ****   else	set_dig(base, ch);
 3799              		.loc 1 408 3 view .LVU1180
 3800              	.L295:
 409:src/display.c ****   return res;
 3801              		.loc 1 409 8 view .LVU1181
 3802 0378 3021     		movs	r1, #48
 3803 037a 6320     		movs	r0, #99
 3804 037c FFF7FEFF 		bl	set_dig
 3805              	.LVL428:
 3806 0380 BFE6     		b	.L285
 3807              	.LVL429:
 3808              	.L316:
 409:src/display.c ****   return res;
 3809              		.loc 1 409 8 is_stmt 0 view .LVU1182
 3810              	.LBE308:
 3811              	.LBE313:
 3812              	.LBB314:
1515:src/display.c **** 	  buf[i] = '\0';
 3813              		.loc 1 1515 6 is_stmt 1 view .LVU1183
1515:src/display.c **** 	  buf[i] = '\0';
 3814              		.loc 1 1515 20 is_stmt 0 view .LVU1184
 3815 0382 0F4A     		ldr	r2, .L379
 3816 0384 6FF3C503 		bfc	r3, #3, #3
 3817 0388 1375     		strb	r3, [r2, #20]
 3818 038a 0027     		movs	r7, #0
 3819 038c 05E7     		b	.L317
 3820              	.LVL430:
 3821              	.L318:
1522:src/display.c **** 	    int ch = buf[j++];
 3822              		.loc 1 1522 14 is_stmt 1 discriminator 1 view .LVU1185
1522:src/display.c **** 	    int ch = buf[j++];
 3823              		.loc 1 1522 4 is_stmt 0 discriminator 1 view .LVU1186
 3824 038e 03F1FF38 		add	r8, r3, #-1
 3825              	.LVL431:
1522:src/display.c **** 	    int ch = buf[j++];
 3826              		.loc 1 1522 4 discriminator 1 view .LVU1187
 3827 0392 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 147


 3828 0394 7FF414AF 		bne	.L320
1531:src/display.c **** 	    if (dig >= 0)
 3829              		.loc 1 1531 4 is_stmt 1 view .LVU1188
1531:src/display.c **** 	    if (dig >= 0)
 3830              		.loc 1 1531 7 is_stmt 0 view .LVU1189
 3831 0398 049B     		ldr	r3, [sp, #16]
 3832 039a 002B     		cmp	r3, #0
 3833 039c 3FF4B1AE 		beq	.L285
 3834 03a0 4FF0630B 		mov	fp, #99
 3835 03a4 3BE7     		b	.L328
 3836              	.LVL432:
 3837              	.L373:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3838              		.loc 1 1508 33 view .LVU1190
 3839 03a6 0C26     		movs	r6, #12
 3840 03a8 E6E6     		b	.L314
 3841              	.LVL433:
 3842              	.L375:
1534:src/display.c **** 	  }
 3843              		.loc 1 1534 11 is_stmt 1 view .LVU1191
 3844              	.LBB301:
 3845              	.LBI301:
 296:src/display.c **** {
 3846              		.loc 1 296 13 view .LVU1192
 3847              	.LBB302:
 298:src/display.c ****   set_dot(MANT_SIGN);
 3848              		.loc 1 298 3 view .LVU1193
 298:src/display.c ****   set_dot(MANT_SIGN);
 3849              		.loc 1 298 25 is_stmt 0 view .LVU1194
 3850 03aa 064B     		ldr	r3, .L379+4
 3851 03ac 2D22     		movs	r2, #45
 299:src/display.c **** }
 3852              		.loc 1 299 3 view .LVU1195
 3853 03ae 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 3854              		.loc 1 298 25 view .LVU1196
 3855 03b0 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 3856              		.loc 1 299 3 is_stmt 1 view .LVU1197
 3857 03b2 FFF7FEFF 		bl	set_dot
 3858              	.LVL434:
 300:src/display.c **** 
 3859              		.loc 1 300 1 is_stmt 0 view .LVU1198
 3860 03b6 A4E6     		b	.L285
 3861              	.LVL435:
 3862              	.L331:
 300:src/display.c **** 
 3863              		.loc 1 300 1 view .LVU1199
 3864              	.LBE302:
 3865              	.LBE301:
 3866              	.LBE314:
 3867              	.LBB315:
1466:src/display.c **** 	      const int r = v % b;
 3868              		.loc 1 1466 6 view .LVU1200
 3869 03b8 4FF0FF31 		mov	r1, #-1
 3870 03bc 8BE6     		b	.L298
 3871              	.L380:
ARM GAS  /tmp/ccpF0v4D.s 			page 148


 3872 03be 00BF     		.align	2
 3873              	.L379:
 3874 03c0 00000000 		.word	StateWhileOn
 3875 03c4 00000000 		.word	LastDisplayedNumber
 3876              	.LBE315:
 3877              		.cfi_endproc
 3878              	.LFE18:
 3880              		.section	.text.set_annunciators,"ax",%progbits
 3881              		.align	1
 3882              		.p2align 2,,3
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	set_annunciators:
 3889              	.LFB32:
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3890              		.loc 1 2537 7 is_stmt 1 view -0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
2538:src/display.c **** 
 3894              		.loc 1 2538 2 view .LVU1202
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3895              		.loc 1 2537 7 is_stmt 0 view .LVU1203
 3896 0000 70B5     		push	{r4, r5, r6, lr}
 3897              		.cfi_def_cfa_offset 16
 3898              		.cfi_offset 4, -16
 3899              		.cfi_offset 5, -12
 3900              		.cfi_offset 6, -8
 3901              		.cfi_offset 14, -4
2547:src/display.c **** #endif
 3902              		.loc 1 2547 11 view .LVU1204
 3903 0002 344E     		ldr	r6, .L407
2538:src/display.c **** 
 3904              		.loc 1 2538 29 view .LVU1205
 3905 0004 FFF7FEFF 		bl	get_trig_mode
 3906              	.LVL436:
2547:src/display.c **** #endif
 3907              		.loc 1 2547 11 view .LVU1206
 3908 0008 3368     		ldr	r3, [r6]
2547:src/display.c **** #endif
 3909              		.loc 1 2547 2 view .LVU1207
 3910 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3911 000e 012B     		cmp	r3, #1
2538:src/display.c **** 
 3912              		.loc 1 2538 29 view .LVU1208
 3913 0010 0446     		mov	r4, r0
 3914              	.LVL437:
2547:src/display.c **** #endif
 3915              		.loc 1 2547 2 is_stmt 1 view .LVU1209
 3916              	.LBB334:
 3917              	.LBB335:
 340:src/display.c ****   else	clr_dot(n);
 3918              		.loc 1 340 11 is_stmt 0 view .LVU1210
 3919 0012 4FF08800 		mov	r0, #136
 3920              	.LBE335:
ARM GAS  /tmp/ccpF0v4D.s 			page 149


 3921              	.LBE334:
2547:src/display.c **** #endif
 3922              		.loc 1 2547 2 view .LVU1211
 3923 0016 03D8     		bhi	.L382
2547:src/display.c **** #endif
 3924              		.loc 1 2547 30 discriminator 1 view .LVU1212
 3925 0018 2F4B     		ldr	r3, .L407+4
2547:src/display.c **** #endif
 3926              		.loc 1 2547 2 discriminator 1 view .LVU1213
 3927 001a 1B68     		ldr	r3, [r3]
 3928 001c 002B     		cmp	r3, #0
 3929 001e 56D0     		beq	.L403
 3930              	.L382:
 3931              	.LVL438:
 3932              	.LBB338:
 3933              	.LBI334:
 339:src/display.c ****   if (on)	set_dot(n);
 3934              		.loc 1 339 6 is_stmt 1 view .LVU1214
 3935              	.LBB336:
 340:src/display.c ****   else	clr_dot(n);
 3936              		.loc 1 340 3 view .LVU1215
 341:src/display.c **** }
 3937              		.loc 1 341 8 view .LVU1216
 3938 0020 FFF7FEFF 		bl	clr_dot
 3939              	.LVL439:
 3940              	.L383:
 341:src/display.c **** }
 3941              		.loc 1 341 8 is_stmt 0 view .LVU1217
 3942              	.LBE336:
 3943              	.LBE338:
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3944              		.loc 1 2549 2 is_stmt 1 view .LVU1218
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3945              		.loc 1 2549 19 is_stmt 0 view .LVU1219
 3946 0024 2D4D     		ldr	r5, .L407+8
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3947              		.loc 1 2549 2 view .LVU1220
 3948 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3949              	.LBB339:
 3950              	.LBB340:
 340:src/display.c ****   else	clr_dot(n);
 3951              		.loc 1 340 11 view .LVU1221
 3952 0028 8620     		movs	r0, #134
 3953              	.LBE340:
 3954              	.LBE339:
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3955              		.loc 1 2549 2 view .LVU1222
 3956 002a 23B9     		cbnz	r3, .L384
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3957              		.loc 1 2549 47 discriminator 2 view .LVU1223
 3958 002c 6A69     		ldr	r2, [r5, #20]
 3959 002e 2C4B     		ldr	r3, .L407+12
 3960 0030 1340     		ands	r3, r3, r2
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3961              		.loc 1 2549 2 discriminator 2 view .LVU1224
 3962 0032 002B     		cmp	r3, #0
 3963 0034 48D0     		beq	.L404
ARM GAS  /tmp/ccpF0v4D.s 			page 150


 3964              	.L384:
 3965              	.LBB343:
 3966              	.LBB341:
 340:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 340 11 is_stmt 1 view .LVU1225
 3968 0036 FFF7FEFF 		bl	set_dot
 3969              	.LVL440:
 3970              	.L385:
 3971              	.LBE341:
 3972              	.LBE343:
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3973              		.loc 1 2550 2 view .LVU1226
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3974              		.loc 1 2550 31 is_stmt 0 view .LVU1227
 3975 003a 2A4A     		ldr	r2, .L407+16
 3976 003c 6B69     		ldr	r3, [r5, #20]
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3977              		.loc 1 2550 2 view .LVU1228
 3978 003e 1A42     		tst	r2, r3
 3979              	.LBB344:
 3980              	.LBB345:
 340:src/display.c ****   else	clr_dot(n);
 3981              		.loc 1 340 11 view .LVU1229
 3982 0040 4FF08500 		mov	r0, #133
 3983              	.LBE345:
 3984              	.LBE344:
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3985              		.loc 1 2550 2 view .LVU1230
 3986 0044 02D0     		beq	.L386
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3987              		.loc 1 2550 48 discriminator 1 view .LVU1231
 3988 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3989              		.loc 1 2550 2 discriminator 1 view .LVU1232
 3990 0048 DA06     		lsls	r2, r3, #27
 3991 004a 3AD4     		bmi	.L387
 3992              	.L386:
 3993              	.LVL441:
 3994              	.LBB348:
 3995              	.LBI344:
 339:src/display.c ****   if (on)	set_dot(n);
 3996              		.loc 1 339 6 is_stmt 1 view .LVU1233
 3997              	.LBB346:
 340:src/display.c ****   else	clr_dot(n);
 3998              		.loc 1 340 3 view .LVU1234
 341:src/display.c **** }
 3999              		.loc 1 341 8 view .LVU1235
 4000 004c FFF7FEFF 		bl	clr_dot
 4001              	.LVL442:
 4002              	.L388:
 341:src/display.c **** }
 4003              		.loc 1 341 8 is_stmt 0 view .LVU1236
 4004              	.LBE346:
 4005              	.LBE348:
2551:src/display.c **** 	set_IO_annunciator();
 4006              		.loc 1 2551 2 is_stmt 1 view .LVU1237
 4007 0050 6820     		movs	r0, #104
ARM GAS  /tmp/ccpF0v4D.s 			page 151


 4008 0052 FFF7FEFF 		bl	get_user_flag
 4009              	.LVL443:
 4010              	.LBB349:
 4011              	.LBI349:
 339:src/display.c ****   if (on)	set_dot(n);
 4012              		.loc 1 339 6 view .LVU1238
 4013              	.LBB350:
 340:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 340 3 view .LVU1239
 340:src/display.c ****   else	clr_dot(n);
 4015              		.loc 1 340 6 is_stmt 0 view .LVU1240
 4016 0056 28B3     		cbz	r0, .L389
 340:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 340 11 is_stmt 1 view .LVU1241
 4018              	.LBE350:
 4019              	.LBE349:
 4020              	.LBB354:
 4021              	.LBB355:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4022              		.loc 1 2579 9 is_stmt 0 view .LVU1242
 4023 0058 234D     		ldr	r5, .L407+20
 4024              	.LBE355:
 4025              	.LBE354:
 4026              	.LBB363:
 4027              	.LBB351:
 340:src/display.c ****   else	clr_dot(n);
 4028              		.loc 1 340 11 view .LVU1243
 4029 005a 8320     		movs	r0, #131
 4030              	.LVL444:
 340:src/display.c ****   else	clr_dot(n);
 4031              		.loc 1 340 11 view .LVU1244
 4032 005c FFF7FEFF 		bl	set_dot
 4033              	.LVL445:
 340:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 340 11 view .LVU1245
 4035              	.LBE351:
 4036              	.LBE363:
2552:src/display.c **** 
 4037              		.loc 1 2552 2 is_stmt 1 view .LVU1246
 4038              	.LBB364:
 4039              	.LBI354:
2564:src/display.c **** #ifndef DM42
 4040              		.loc 1 2564 12 view .LVU1247
 4041              	.LBB360:
2569:src/display.c **** #endif
 4042              		.loc 1 2569 4 view .LVU1248
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4043              		.loc 1 2579 2 view .LVU1249
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4044              		.loc 1 2579 5 is_stmt 0 view .LVU1250
 4045 0060 2B68     		ldr	r3, [r5]
 4046 0062 33BB     		cbnz	r3, .L405
 4047              	.L391:
 4048              	.LBE360:
 4049              	.LBE364:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4050              		.loc 1 2556 2 is_stmt 1 view .LVU1251
ARM GAS  /tmp/ccpF0v4D.s 			page 152


2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4051              		.loc 1 2556 11 is_stmt 0 view .LVU1252
 4052 0064 3368     		ldr	r3, [r6]
 4053 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4054 006a 03F00103 		and	r3, r3, #1
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4055              		.loc 1 2556 2 view .LVU1253
 4056 006e 2343     		orrs	r3, r3, r4
 4057 0070 13F0FF0F 		tst	r3, #255
 4058              	.LBB365:
 4059              	.LBB366:
 340:src/display.c ****   else	clr_dot(n);
 4060              		.loc 1 340 11 view .LVU1254
 4061 0074 4FF08C00 		mov	r0, #140
 4062              	.LBE366:
 4063              	.LBE365:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4064              		.loc 1 2556 2 view .LVU1255
 4065 0078 06D1     		bne	.L406
 4066              	.LVL446:
 4067              	.LBB369:
 4068              	.LBI365:
 339:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 339 6 is_stmt 1 view .LVU1256
 4070              	.LBB367:
 340:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 340 3 view .LVU1257
 340:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 340 11 view .LVU1258
 4073 007a FFF7FEFF 		bl	set_dot
 4074              	.LVL447:
 340:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 340 11 is_stmt 0 view .LVU1259
 4076              	.LBE367:
 4077              	.LBE369:
2557:src/display.c ****       }
 4078              		.loc 1 2557 2 is_stmt 1 view .LVU1260
 4079              	.L394:
 4080              	.LBB370:
 4081              	.LBI370:
 339:src/display.c ****   if (on)	set_dot(n);
 4082              		.loc 1 339 6 view .LVU1261
 4083              	.LBB371:
 340:src/display.c ****   else	clr_dot(n);
 4084              		.loc 1 340 3 view .LVU1262
 341:src/display.c **** }
 4085              		.loc 1 341 8 view .LVU1263
 4086              	.LBE371:
 4087              	.LBE370:
2558:src/display.c **** 
 4088              		.loc 1 2558 7 is_stmt 0 view .LVU1264
 4089 007e BDE87040 		pop	{r4, r5, r6, lr}
 4090              		.cfi_remember_state
 4091              		.cfi_restore 14
 4092              		.cfi_restore 6
 4093              		.cfi_restore 5
 4094              		.cfi_restore 4
ARM GAS  /tmp/ccpF0v4D.s 			page 153


 4095              		.cfi_def_cfa_offset 0
 4096              	.LVL448:
 4097              	.LBB375:
 4098              	.LBB372:
 341:src/display.c **** }
 4099              		.loc 1 341 8 view .LVU1265
 4100 0082 8B20     		movs	r0, #139
 4101 0084 FFF7FEBF 		b	clr_dot
 4102              	.LVL449:
 4103              	.L406:
 4104              		.cfi_restore_state
 341:src/display.c **** }
 4105              		.loc 1 341 8 view .LVU1266
 4106              	.LBE372:
 4107              	.LBE375:
 4108              	.LBB376:
 339:src/display.c ****   if (on)	set_dot(n);
 4109              		.loc 1 339 6 is_stmt 1 view .LVU1267
 4110              	.LBB368:
 340:src/display.c ****   else	clr_dot(n);
 4111              		.loc 1 340 3 view .LVU1268
 341:src/display.c **** }
 4112              		.loc 1 341 8 view .LVU1269
 4113 0088 FFF7FEFF 		bl	clr_dot
 4114              	.LVL450:
 341:src/display.c **** }
 4115              		.loc 1 341 8 is_stmt 0 view .LVU1270
 4116              	.LBE368:
 4117              	.LBE376:
2557:src/display.c ****       }
 4118              		.loc 1 2557 2 is_stmt 1 view .LVU1271
2557:src/display.c ****       }
 4119              		.loc 1 2557 11 is_stmt 0 view .LVU1272
 4120 008c 3368     		ldr	r3, [r6]
 4121 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2557:src/display.c ****       }
 4122              		.loc 1 2557 2 view .LVU1273
 4123 0092 DB07     		lsls	r3, r3, #31
 4124 0094 F3D4     		bmi	.L394
2557:src/display.c ****       }
 4125              		.loc 1 2557 2 discriminator 1 view .LVU1274
 4126 0096 012C     		cmp	r4, #1
 4127 0098 F1D1     		bne	.L394
 4128              	.LVL451:
 4129              	.LBB377:
 339:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 339 6 is_stmt 1 view .LVU1275
 4131              	.LBB373:
 340:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 340 3 view .LVU1276
 340:src/display.c ****   else	clr_dot(n);
 4133              		.loc 1 340 11 view .LVU1277
 4134              	.LBE373:
 4135              	.LBE377:
2558:src/display.c **** 
 4136              		.loc 1 2558 7 is_stmt 0 view .LVU1278
 4137 009a BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccpF0v4D.s 			page 154


 4138              		.cfi_remember_state
 4139              		.cfi_restore 14
 4140              		.cfi_restore 6
 4141              		.cfi_restore 5
 4142              		.cfi_restore 4
 4143              		.cfi_def_cfa_offset 0
 4144              	.LVL452:
 4145              	.LBB378:
 4146              	.LBB374:
 340:src/display.c ****   else	clr_dot(n);
 4147              		.loc 1 340 11 view .LVU1279
 4148 009e 8B20     		movs	r0, #139
 4149 00a0 FFF7FEBF 		b	set_dot
 4150              	.LVL453:
 4151              	.L389:
 4152              		.cfi_restore_state
 340:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 340 11 view .LVU1280
 4154              	.LBE374:
 4155              	.LBE378:
 4156              	.LBB379:
 4157              	.LBB352:
 341:src/display.c **** }
 4158              		.loc 1 341 8 is_stmt 1 view .LVU1281
 4159              	.LBE352:
 4160              	.LBE379:
 4161              	.LBB380:
 4162              	.LBB361:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4163              		.loc 1 2579 9 is_stmt 0 view .LVU1282
 4164 00a4 104D     		ldr	r5, .L407+20
 4165              	.LBE361:
 4166              	.LBE380:
 4167              	.LBB381:
 4168              	.LBB353:
 341:src/display.c **** }
 4169              		.loc 1 341 8 view .LVU1283
 4170 00a6 8320     		movs	r0, #131
 4171              	.LVL454:
 341:src/display.c **** }
 4172              		.loc 1 341 8 view .LVU1284
 4173 00a8 FFF7FEFF 		bl	clr_dot
 4174              	.LVL455:
 341:src/display.c **** }
 4175              		.loc 1 341 8 view .LVU1285
 4176              	.LBE353:
 4177              	.LBE381:
2552:src/display.c **** 
 4178              		.loc 1 2552 2 is_stmt 1 view .LVU1286
 4179              	.LBB382:
2564:src/display.c **** #ifndef DM42
 4180              		.loc 1 2564 12 view .LVU1287
 4181              	.LBB362:
2569:src/display.c **** #endif
 4182              		.loc 1 2569 4 view .LVU1288
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4183              		.loc 1 2579 2 view .LVU1289
ARM GAS  /tmp/ccpF0v4D.s 			page 155


2579:src/display.c **** 	  dot(LIT_EQ, on);
 4184              		.loc 1 2579 5 is_stmt 0 view .LVU1290
 4185 00ac 2B68     		ldr	r3, [r5]
 4186 00ae 002B     		cmp	r3, #0
 4187 00b0 D8D0     		beq	.L391
 4188              	.L405:
 4189              	.LBB356:
 4190              	.LBI356:
2564:src/display.c **** #ifndef DM42
 4191              		.loc 1 2564 12 is_stmt 1 view .LVU1291
 4192              	.LBB357:
2580:src/display.c **** 	  IoAnnunciator = on;
 4193              		.loc 1 2580 4 view .LVU1292
 4194              	.LVL456:
 4195              	.LBB358:
 4196              	.LBI358:
 339:src/display.c ****   if (on)	set_dot(n);
 4197              		.loc 1 339 6 view .LVU1293
 4198              	.LBB359:
 340:src/display.c ****   else	clr_dot(n);
 4199              		.loc 1 340 3 view .LVU1294
 341:src/display.c **** }
 4200              		.loc 1 341 8 view .LVU1295
 4201 00b2 8420     		movs	r0, #132
 4202 00b4 FFF7FEFF 		bl	clr_dot
 4203              	.LVL457:
 341:src/display.c **** }
 4204              		.loc 1 341 8 is_stmt 0 view .LVU1296
 4205              	.LBE359:
 4206              	.LBE358:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4207              		.loc 1 2581 4 is_stmt 1 view .LVU1297
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4208              		.loc 1 2581 18 is_stmt 0 view .LVU1298
 4209 00b8 0023     		movs	r3, #0
 4210 00ba 2B60     		str	r3, [r5]
2582:src/display.c **** 	}
 4211              		.loc 1 2582 4 is_stmt 1 view .LVU1299
 4212 00bc FFF7FEFF 		bl	finish_display
 4213              	.LVL458:
2584:src/display.c **** 
 4214              		.loc 1 2584 7 is_stmt 0 view .LVU1300
 4215 00c0 D0E7     		b	.L391
 4216              	.LVL459:
 4217              	.L387:
2584:src/display.c **** 
 4218              		.loc 1 2584 7 view .LVU1301
 4219              	.LBE357:
 4220              	.LBE356:
 4221              	.LBE362:
 4222              	.LBE382:
 4223              	.LBB383:
 339:src/display.c ****   if (on)	set_dot(n);
 4224              		.loc 1 339 6 is_stmt 1 view .LVU1302
 4225              	.LBB347:
 340:src/display.c ****   else	clr_dot(n);
 4226              		.loc 1 340 3 view .LVU1303
ARM GAS  /tmp/ccpF0v4D.s 			page 156


 340:src/display.c ****   else	clr_dot(n);
 4227              		.loc 1 340 11 view .LVU1304
 4228 00c2 FFF7FEFF 		bl	set_dot
 4229              	.LVL460:
 4230 00c6 C3E7     		b	.L388
 4231              	.LVL461:
 4232              	.L404:
 340:src/display.c ****   else	clr_dot(n);
 4233              		.loc 1 340 11 is_stmt 0 view .LVU1305
 4234              	.LBE347:
 4235              	.LBE383:
 4236              	.LBB384:
 4237              	.LBI339:
 339:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 339 6 is_stmt 1 view .LVU1306
 4239              	.LBB342:
 340:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 340 3 view .LVU1307
 341:src/display.c **** }
 4241              		.loc 1 341 8 view .LVU1308
 4242 00c8 FFF7FEFF 		bl	clr_dot
 4243              	.LVL462:
 4244 00cc B5E7     		b	.L385
 4245              	.LVL463:
 4246              	.L403:
 341:src/display.c **** }
 4247              		.loc 1 341 8 is_stmt 0 view .LVU1309
 4248              	.LBE342:
 4249              	.LBE384:
 4250              	.LBB385:
 339:src/display.c ****   if (on)	set_dot(n);
 4251              		.loc 1 339 6 is_stmt 1 view .LVU1310
 4252              	.LBB337:
 340:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 340 3 view .LVU1311
 340:src/display.c ****   else	clr_dot(n);
 4254              		.loc 1 340 11 view .LVU1312
 4255 00ce FFF7FEFF 		bl	set_dot
 4256              	.LVL464:
 4257 00d2 A7E7     		b	.L383
 4258              	.L408:
 4259              		.align	2
 4260              	.L407:
 4261 00d4 00000000 		.word	main_ram
 4262 00d8 00000000 		.word	Running
 4263 00dc 00000000 		.word	StateWhileOn
 4264 00e0 07000800 		.word	524295
 4265 00e4 00080800 		.word	526336
 4266 00e8 00000000 		.word	IoAnnunciator
 4267              	.LBE337:
 4268              	.LBE385:
 4269              		.cfi_endproc
 4270              	.LFE32:
 4272              		.section	.text.getdig,"ax",%progbits
 4273              		.align	1
 4274              		.p2align 2,,3
 4275              		.global	getdig
ARM GAS  /tmp/ccpF0v4D.s 			page 157


 4276              		.syntax unified
 4277              		.thumb
 4278              		.thumb_func
 4279              		.fpu fpv4-sp-d16
 4281              	getdig:
 4282              	.LVL465:
 4283              	.LFB6:
 334:src/display.c ****   // perform index lookup
 4284              		.loc 1 334 1 view -0
 4285              		.cfi_startproc
 4286              		@ args = 0, pretend = 0, frame = 0
 4287              		@ frame_needed = 0, uses_anonymous_args = 0
 4288              		@ link register save eliminated.
 336:src/display.c **** }
 4289              		.loc 1 336 3 view .LVU1314
 336:src/display.c **** }
 4290              		.loc 1 336 16 is_stmt 0 view .LVU1315
 4291 0000 014B     		ldr	r3, .L410
 336:src/display.c **** }
 4292              		.loc 1 336 19 view .LVU1316
 4293 0002 C0B2     		uxtb	r0, r0
 4294              	.LVL466:
 337:src/display.c **** 
 4295              		.loc 1 337 1 view .LVU1317
 4296 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4297 0006 7047     		bx	lr
 4298              	.L411:
 4299              		.align	2
 4300              	.L410:
 4301 0008 00000000 		.word	.LANCHOR2
 4302              		.cfi_endproc
 4303              	.LFE6:
 4305              		.section	.text.dot,"ax",%progbits
 4306              		.align	1
 4307              		.p2align 2,,3
 4308              		.global	dot
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv4-sp-d16
 4314              	dot:
 4315              	.LVL467:
 4316              	.LFB7:
 339:src/display.c ****   if (on)	set_dot(n);
 4317              		.loc 1 339 25 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 340:src/display.c ****   else	clr_dot(n);
 4322              		.loc 1 340 3 view .LVU1319
 340:src/display.c ****   else	clr_dot(n);
 4323              		.loc 1 340 6 is_stmt 0 view .LVU1320
 4324 0000 09B1     		cbz	r1, .L413
 340:src/display.c ****   else	clr_dot(n);
 4325              		.loc 1 340 11 is_stmt 1 discriminator 1 view .LVU1321
 4326 0002 FFF7FEBF 		b	set_dot
ARM GAS  /tmp/ccpF0v4D.s 			page 158


 4327              	.LVL468:
 4328              	.L413:
 341:src/display.c **** }
 4329              		.loc 1 341 8 view .LVU1322
 4330 0006 FFF7FEBF 		b	clr_dot
 4331              	.LVL469:
 341:src/display.c **** }
 4332              		.loc 1 341 8 is_stmt 0 view .LVU1323
 4333              		.cfi_endproc
 4334              	.LFE7:
 4336 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4337              		.align	1
 4338              		.p2align 2,,3
 4339              		.global	std_round_fix
 4340              		.syntax unified
 4341              		.thumb
 4342              		.thumb_func
 4343              		.fpu fpv4-sp-d16
 4345              	std_round_fix:
 4346              	.LVL470:
 4347              	.LFB24:
1755:src/display.c **** 	decNumber c;
 4348              		.loc 1 1755 93 is_stmt 1 view -0
 4349              		.cfi_startproc
 4350              		@ args = 0, pretend = 0, frame = 40
 4351              		@ frame_needed = 0, uses_anonymous_args = 0
1755:src/display.c **** 	decNumber c;
 4352              		.loc 1 1755 93 is_stmt 0 view .LVU1325
 4353 0000 70B5     		push	{r4, r5, r6, lr}
 4354              		.cfi_def_cfa_offset 16
 4355              		.cfi_offset 4, -16
 4356              		.cfi_offset 5, -12
 4357              		.cfi_offset 6, -8
 4358              		.cfi_offset 14, -4
 4359 0002 0E46     		mov	r6, r1
1756:src/display.c **** 	int true_exp, x=0;
 4360              		.loc 1 1756 2 is_stmt 1 view .LVU1326
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4361              		.loc 1 1757 2 view .LVU1327
 4362              	.LVL471:
1758:src/display.c **** 
 4363              		.loc 1 1758 2 view .LVU1328
1760:src/display.c **** 	  min_pos_exp = 9;
 4364              		.loc 1 1760 2 view .LVU1329
1755:src/display.c **** 	decNumber c;
 4365              		.loc 1 1755 93 is_stmt 0 view .LVU1330
 4366 0004 8AB0     		sub	sp, sp, #40
 4367              		.cfi_def_cfa_offset 56
1760:src/display.c **** 	  min_pos_exp = 9;
 4368              		.loc 1 1760 5 view .LVU1331
 4369 0006 92B9     		cbnz	r2, .L415
1765:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4370              		.loc 1 1765 4 is_stmt 1 view .LVU1332
 4371              	.LVL472:
1766:src/display.c **** 	}
 4372              		.loc 1 1766 4 view .LVU1333
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
ARM GAS  /tmp/ccpF0v4D.s 			page 159


 4373              		.loc 1 1769 2 view .LVU1334
 4374 0008 0146     		mov	r1, r0
 4375              	.LVL473:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4376              		.loc 1 1769 2 is_stmt 0 view .LVU1335
 4377 000a 01A8     		add	r0, sp, #4
 4378              	.LVL474:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4379              		.loc 1 1769 2 view .LVU1336
 4380 000c 1D46     		mov	r5, r3
 4381 000e FFF7FEFF 		bl	dn_abs
 4382              	.LVL475:
1770:src/display.c **** 
 4383              		.loc 1 1770 2 is_stmt 1 view .LVU1337
1770:src/display.c **** 
 4384              		.loc 1 1770 24 is_stmt 0 view .LVU1338
 4385 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4386 0016 1844     		add	r0, r0, r3
 4387              	.LVL476:
1772:src/display.c **** 	  x = *dd;
 4388              		.loc 1 1772 2 is_stmt 1 view .LVU1339
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4389              		.loc 1 1776 2 view .LVU1340
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4390              		.loc 1 1776 5 is_stmt 0 view .LVU1341
 4391 0018 0138     		subs	r0, r0, #1
 4392 001a 1AD5     		bpl	.L419
1766:src/display.c **** 	}
 4393              		.loc 1 1766 16 view .LVU1342
 4394 001c EB43     		mvns	r3, r5
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4395              		.loc 1 1776 21 view .LVU1343
 4396 001e 8342     		cmp	r3, r0
 4397 0020 17DA     		bge	.L419
 4398              	.LVL477:
 4399              	.L421:
1778:src/display.c **** 	  return MODE_FIX;
 4400              		.loc 1 1778 4 is_stmt 1 view .LVU1344
1778:src/display.c **** 	  return MODE_FIX;
 4401              		.loc 1 1778 8 is_stmt 0 view .LVU1345
 4402 0022 3368     		ldr	r3, [r6]
 4403 0024 181A     		subs	r0, r3, r0
 4404 0026 3060     		str	r0, [r6]
1779:src/display.c **** 	}
 4405              		.loc 1 1779 4 is_stmt 1 view .LVU1346
1779:src/display.c **** 	}
 4406              		.loc 1 1779 11 is_stmt 0 view .LVU1347
 4407 0028 0120     		movs	r0, #1
1788:src/display.c **** #else
 4408              		.loc 1 1788 7 view .LVU1348
 4409 002a 0AB0     		add	sp, sp, #40
 4410              		.cfi_remember_state
 4411              		.cfi_def_cfa_offset 16
 4412              		@ sp needed
 4413 002c 70BD     		pop	{r4, r5, r6, pc}
 4414              	.LVL478:
 4415              	.L415:
ARM GAS  /tmp/ccpF0v4D.s 			page 160


 4416              		.cfi_restore_state
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4417              		.loc 1 1769 2 is_stmt 1 view .LVU1349
 4418 002e 0146     		mov	r1, r0
 4419              	.LVL479:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4420              		.loc 1 1769 2 is_stmt 0 view .LVU1350
 4421 0030 01A8     		add	r0, sp, #4
 4422              	.LVL480:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4423              		.loc 1 1769 2 view .LVU1351
 4424 0032 1446     		mov	r4, r2
 4425 0034 FFF7FEFF 		bl	dn_abs
 4426              	.LVL481:
1770:src/display.c **** 
 4427              		.loc 1 1770 2 is_stmt 1 view .LVU1352
1770:src/display.c **** 
 4428              		.loc 1 1770 24 is_stmt 0 view .LVU1353
 4429 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1772:src/display.c **** 	  x = *dd;
 4430              		.loc 1 1772 5 view .LVU1354
 4431 003c 052C     		cmp	r4, #5
1770:src/display.c **** 
 4432              		.loc 1 1770 24 view .LVU1355
 4433 003e 1344     		add	r3, r3, r2
1770:src/display.c **** 
 4434              		.loc 1 1770 11 view .LVU1356
 4435 0040 03F1FF30 		add	r0, r3, #-1
 4436              	.LVL482:
1772:src/display.c **** 	  x = *dd;
 4437              		.loc 1 1772 2 is_stmt 1 view .LVU1357
1772:src/display.c **** 	  x = *dd;
 4438              		.loc 1 1772 5 is_stmt 0 view .LVU1358
 4439 0044 15D1     		bne	.L423
1773:src/display.c **** 	}
 4440              		.loc 1 1773 4 is_stmt 1 view .LVU1359
1773:src/display.c **** 	}
 4441              		.loc 1 1773 6 is_stmt 0 view .LVU1360
 4442 0046 3268     		ldr	r2, [r6]
 4443              	.LVL483:
 4444              	.L418:
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4445              		.loc 1 1776 2 is_stmt 1 view .LVU1361
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4446              		.loc 1 1776 5 is_stmt 0 view .LVU1362
 4447 0048 8242     		cmp	r2, r0
 4448 004a 05DC     		bgt	.L427
1782:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4449              		.loc 1 1782 53 discriminator 2 view .LVU1363
 4450 004c 0333     		adds	r3, r3, #3
 4451 004e 0C2B     		cmp	r3, #12
 4452 0050 04D8     		bhi	.L422
 4453              	.LVL484:
 4454              	.L419:
1786:src/display.c **** 	}
 4455              		.loc 1 1786 11 view .LVU1364
 4456 0052 0020     		movs	r0, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 161


1788:src/display.c **** #else
 4457              		.loc 1 1788 7 view .LVU1365
 4458 0054 0AB0     		add	sp, sp, #40
 4459              		.cfi_remember_state
 4460              		.cfi_def_cfa_offset 16
 4461              		@ sp needed
 4462 0056 70BD     		pop	{r4, r5, r6, pc}
 4463              	.LVL485:
 4464              	.L427:
 4465              		.cfi_restore_state
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4466              		.loc 1 1776 21 view .LVU1366
 4467 0058 031D     		adds	r3, r0, #4
 4468 005a E2DA     		bge	.L421
 4469              	.L422:
 4470              	.LBB388:
 4471              	.LBI388:
1755:src/display.c **** 	decNumber c;
 4472              		.loc 1 1755 26 is_stmt 1 view .LVU1367
 4473              	.LVL486:
 4474              	.LBB389:
1783:src/display.c **** 	}
 4475              		.loc 1 1783 4 view .LVU1368
1783:src/display.c **** 	}
 4476              		.loc 1 1783 24 is_stmt 0 view .LVU1369
 4477 005c 064B     		ldr	r3, .L428
 4478 005e 1B68     		ldr	r3, [r3]
 4479 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1783:src/display.c **** 	}
 4480              		.loc 1 1783 33 view .LVU1370
 4481 0064 13F0100F 		tst	r3, #16
 4482 0068 14BF     		ite	ne
 4483 006a 0320     		movne	r0, #3
 4484 006c 0220     		moveq	r0, #2
 4485              	.LBE389:
 4486              	.LBE388:
1788:src/display.c **** #else
 4487              		.loc 1 1788 7 view .LVU1371
 4488 006e 0AB0     		add	sp, sp, #40
 4489              		.cfi_remember_state
 4490              		.cfi_def_cfa_offset 16
 4491              		@ sp needed
 4492 0070 70BD     		pop	{r4, r5, r6, pc}
 4493              	.LVL487:
 4494              	.L423:
 4495              		.cfi_restore_state
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4496              		.loc 1 1757 16 view .LVU1372
 4497 0072 0022     		movs	r2, #0
 4498 0074 E8E7     		b	.L418
 4499              	.L429:
 4500 0076 00BF     		.align	2
 4501              	.L428:
 4502 0078 00000000 		.word	main_ram
 4503              		.cfi_endproc
 4504              	.LFE24:
 4506              		.section	.text.set_IO_annunciator,"ax",%progbits
ARM GAS  /tmp/ccpF0v4D.s 			page 162


 4507              		.align	1
 4508              		.p2align 2,,3
 4509              		.global	set_IO_annunciator
 4510              		.syntax unified
 4511              		.thumb
 4512              		.thumb_func
 4513              		.fpu fpv4-sp-d16
 4515              	set_IO_annunciator:
 4516              	.LFB33:
2564:src/display.c **** #ifndef DM42
 4517              		.loc 1 2564 37 is_stmt 1 view -0
 4518              		.cfi_startproc
 4519              		@ args = 0, pretend = 0, frame = 0
 4520              		@ frame_needed = 0, uses_anonymous_args = 0
2569:src/display.c **** #endif
 4521              		.loc 1 2569 4 view .LVU1374
 4522              	.LVL488:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4523              		.loc 1 2579 2 view .LVU1375
2564:src/display.c **** #ifndef DM42
 4524              		.loc 1 2564 37 is_stmt 0 view .LVU1376
 4525 0000 10B5     		push	{r4, lr}
 4526              		.cfi_def_cfa_offset 8
 4527              		.cfi_offset 4, -8
 4528              		.cfi_offset 14, -4
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4529              		.loc 1 2579 9 view .LVU1377
 4530 0002 064C     		ldr	r4, .L434
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4531              		.loc 1 2579 5 view .LVU1378
 4532 0004 2368     		ldr	r3, [r4]
 4533 0006 03B9     		cbnz	r3, .L433
2584:src/display.c **** 
 4534              		.loc 1 2584 7 view .LVU1379
 4535 0008 10BD     		pop	{r4, pc}
 4536              	.L433:
 4537              	.LBB394:
 4538              	.LBI394:
2564:src/display.c **** #ifndef DM42
 4539              		.loc 1 2564 12 is_stmt 1 view .LVU1380
 4540              	.LBB395:
2580:src/display.c **** 	  IoAnnunciator = on;
 4541              		.loc 1 2580 4 view .LVU1381
 4542              	.LVL489:
 4543              	.LBB396:
 4544              	.LBI396:
 339:src/display.c ****   if (on)	set_dot(n);
 4545              		.loc 1 339 6 view .LVU1382
 4546              	.LBB397:
 340:src/display.c ****   else	clr_dot(n);
 4547              		.loc 1 340 3 view .LVU1383
 341:src/display.c **** }
 4548              		.loc 1 341 8 view .LVU1384
 4549 000a 8420     		movs	r0, #132
 4550 000c FFF7FEFF 		bl	clr_dot
 4551              	.LVL490:
 341:src/display.c **** }
ARM GAS  /tmp/ccpF0v4D.s 			page 163


 4552              		.loc 1 341 8 is_stmt 0 view .LVU1385
 4553              	.LBE397:
 4554              	.LBE396:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4555              		.loc 1 2581 4 is_stmt 1 view .LVU1386
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4556              		.loc 1 2581 18 is_stmt 0 view .LVU1387
 4557 0010 0023     		movs	r3, #0
 4558 0012 2360     		str	r3, [r4]
2582:src/display.c **** 	}
 4559              		.loc 1 2582 4 is_stmt 1 view .LVU1388
 4560              	.LBE395:
 4561              	.LBE394:
2584:src/display.c **** 
 4562              		.loc 1 2584 7 is_stmt 0 view .LVU1389
 4563 0014 BDE81040 		pop	{r4, lr}
 4564              		.cfi_restore 14
 4565              		.cfi_restore 4
 4566              		.cfi_def_cfa_offset 0
 4567              	.LBB399:
 4568              	.LBB398:
2582:src/display.c **** 	}
 4569              		.loc 1 2582 4 view .LVU1390
 4570 0018 FFF7FEBF 		b	finish_display
 4571              	.LVL491:
 4572              	.L435:
 4573              		.align	2
 4574              	.L434:
 4575 001c 00000000 		.word	IoAnnunciator
 4576              	.LBE398:
 4577              	.LBE399:
 4578              		.cfi_endproc
 4579              	.LFE33:
 4581              		.section	.text.pixel_length,"ax",%progbits
 4582              		.align	1
 4583              		.p2align 2,,3
 4584              		.global	pixel_length
 4585              		.syntax unified
 4586              		.thumb
 4587              		.thumb_func
 4588              		.fpu fpv4-sp-d16
 4590              	pixel_length:
 4591              	.LVL492:
 4592              	.LFB40:
3467:src/display.c **** 
3468:src/display.c **** 
3469:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3470:src/display.c ****        */
3471:src/display.c ****       int pixel_length(const char *s, int smallp)
3472:src/display.c ****       {
 4593              		.loc 1 3472 7 is_stmt 1 view -0
 4594              		.cfi_startproc
 4595              		@ args = 0, pretend = 0, frame = 0
 4596              		@ frame_needed = 0, uses_anonymous_args = 0
3473:src/display.c **** 	int len = 0;
 4597              		.loc 1 3473 2 view .LVU1392
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 164


 4598              		.loc 1 3474 2 view .LVU1393
3472:src/display.c **** 	int len = 0;
 4599              		.loc 1 3472 7 is_stmt 0 view .LVU1394
 4600 0000 70B5     		push	{r4, r5, r6, lr}
 4601              		.cfi_def_cfa_offset 16
 4602              		.cfi_offset 4, -16
 4603              		.cfi_offset 5, -12
 4604              		.cfi_offset 6, -8
 4605              		.cfi_offset 14, -4
3472:src/display.c **** 	int len = 0;
 4606              		.loc 1 3472 7 view .LVU1395
 4607 0002 0446     		mov	r4, r0
3475:src/display.c **** 	while (*s != '\0') {
 4608              		.loc 1 3475 9 view .LVU1396
 4609 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4610              	.LVL493:
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4611              		.loc 1 3474 34 view .LVU1397
 4612 0006 0E1E     		subs	r6, r1, #0
 4613 0008 18BF     		it	ne
 4614 000a 4FF48076 		movne	r6, #256
 4615              	.LVL494:
 4616              		.loc 1 3475 2 is_stmt 1 view .LVU1398
 4617              		.loc 1 3475 8 view .LVU1399
 4618 000e A0B1     		cbz	r0, .L443
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4619              		.loc 1 3473 6 is_stmt 0 view .LVU1400
 4620 0010 0025     		movs	r5, #0
 4621 0012 06E0     		b	.L441
 4622              	.LVL495:
 4623              	.L439:
3476:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3477:src/display.c **** 	  if (s[0] == '\007') {
3478:src/display.c **** 	    len += s[1] & 0x1F;
3479:src/display.c **** 	    s += 3;
3480:src/display.c **** 	    continue;
3481:src/display.c **** 	  }
3482:src/display.c **** #endif
3483:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4624              		.loc 1 3483 11 view .LVU1401
 4625 0014 3044     		add	r0, r0, r6
 4626 0016 FFF7FEFF 		bl	charlengths
 4627              	.LVL496:
 4628              		.loc 1 3483 42 view .LVU1402
 4629 001a 0134     		adds	r4, r4, #1
 4630              	.LVL497:
 4631              		.loc 1 3483 8 view .LVU1403
 4632 001c 0544     		add	r5, r5, r0
 4633              	.LVL498:
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4634              		.loc 1 3475 8 is_stmt 1 view .LVU1404
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4635              		.loc 1 3475 9 is_stmt 0 view .LVU1405
 4636 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4637              		.loc 1 3475 8 view .LVU1406
 4638 0020 48B1     		cbz	r0, .L436
ARM GAS  /tmp/ccpF0v4D.s 			page 165


 4639              	.LVL499:
 4640              	.L441:
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4641              		.loc 1 3477 4 is_stmt 1 view .LVU1407
 4642              		.loc 1 3483 4 view .LVU1408
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4643              		.loc 1 3477 7 is_stmt 0 view .LVU1409
 4644 0022 0728     		cmp	r0, #7
 4645 0024 F6D1     		bne	.L439
3478:src/display.c **** 	    s += 3;
 4646              		.loc 1 3478 6 is_stmt 1 view .LVU1410
3478:src/display.c **** 	    s += 3;
 4647              		.loc 1 3478 18 is_stmt 0 view .LVU1411
 4648 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4649              		.loc 1 3475 9 view .LVU1412
 4650 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3478:src/display.c **** 	    s += 3;
 4651              		.loc 1 3478 18 view .LVU1413
 4652 002a 03F01F03 		and	r3, r3, #31
3479:src/display.c **** 	    continue;
 4653              		.loc 1 3479 8 view .LVU1414
 4654 002e 0334     		adds	r4, r4, #3
 4655              	.LVL500:
3478:src/display.c **** 	    s += 3;
 4656              		.loc 1 3478 10 view .LVU1415
 4657 0030 1D44     		add	r5, r5, r3
 4658              	.LVL501:
3479:src/display.c **** 	    continue;
 4659              		.loc 1 3479 6 is_stmt 1 view .LVU1416
3480:src/display.c **** 	  }
 4660              		.loc 1 3480 6 view .LVU1417
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4661              		.loc 1 3475 8 view .LVU1418
 4662 0032 0028     		cmp	r0, #0
 4663 0034 F5D1     		bne	.L441
 4664              	.L436:
3484:src/display.c **** 	}
3485:src/display.c **** 	return len;
3486:src/display.c ****       }
 4665              		.loc 1 3486 7 is_stmt 0 view .LVU1419
 4666 0036 2846     		mov	r0, r5
 4667 0038 70BD     		pop	{r4, r5, r6, pc}
 4668              	.LVL502:
 4669              	.L443:
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4670              		.loc 1 3473 6 view .LVU1420
 4671 003a 0546     		mov	r5, r0
3485:src/display.c ****       }
 4672              		.loc 1 3485 2 is_stmt 1 view .LVU1421
 4673              		.loc 1 3486 7 is_stmt 0 view .LVU1422
 4674 003c 2846     		mov	r0, r5
 4675 003e 70BD     		pop	{r4, r5, r6, pc}
 4676              		.loc 1 3486 7 view .LVU1423
 4677              		.cfi_endproc
 4678              	.LFE40:
 4680              		.section	.text.set_status,"ax",%progbits
ARM GAS  /tmp/ccpF0v4D.s 			page 166


 4681              		.align	1
 4682              		.p2align 2,,3
 4683              		.syntax unified
 4684              		.thumb
 4685              		.thumb_func
 4686              		.fpu fpv4-sp-d16
 4688              	set_status:
 4689              	.LVL503:
 4690              	.LFB43:
3487:src/display.c **** 
3488:src/display.c **** 
3489:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3490:src/display.c ****        * If this is larger than the display, return true.
3491:src/display.c ****        */
3492:src/display.c ****       static int string_too_large(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3494:src/display.c ****       }
3495:src/display.c ****       static int string_too_large_top(const char *s) {
3496:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3497:src/display.c ****       }
3498:src/display.c **** 
3499:src/display.c **** 
3500:src/display.c ****       /* Display the given string on the screen.
3501:src/display.c ****        */
3502:src/display.c ****       static void set_status(const char *str) {
 4691              		.loc 1 3502 47 is_stmt 1 view -0
 4692              		.cfi_startproc
 4693              		@ args = 0, pretend = 0, frame = 0
 4694              		@ frame_needed = 0, uses_anonymous_args = 0
3503:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4695              		.loc 1 3503 2 view .LVU1425
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4696              		.loc 1 3502 47 is_stmt 0 view .LVU1426
 4697 0000 10B5     		push	{r4, lr}
 4698              		.cfi_def_cfa_offset 8
 4699              		.cfi_offset 4, -8
 4700              		.cfi_offset 14, -4
 4701              		.loc 1 3503 24 view .LVU1427
 4702 0002 0D4B     		ldr	r3, .L451
 4703              		.loc 1 3503 2 view .LVU1428
 4704 0004 93F91630 		ldrsb	r3, [r3, #22]
 4705 0008 002B     		cmp	r3, #0
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4706              		.loc 1 3502 47 view .LVU1429
 4707 000a 82B0     		sub	sp, sp, #8
 4708              		.cfi_def_cfa_offset 16
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4709              		.loc 1 3502 47 view .LVU1430
 4710 000c 0446     		mov	r4, r0
 4711              		.loc 1 3503 2 view .LVU1431
 4712 000e 0ADA     		bge	.L450
 4713 0010 0121     		movs	r1, #1
 4714              	.LVL504:
 4715              	.L447:
 4716              	.LBB400:
 4717              	.LBI400:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
ARM GAS  /tmp/ccpF0v4D.s 			page 167


 4718              		.loc 1 3344 19 is_stmt 1 discriminator 6 view .LVU1432
 4719              	.LBB401:
3345:src/display.c ****       }
 4720              		.loc 1 3345 2 discriminator 6 view .LVU1433
 4721 0012 40F24A23 		movw	r3, #586
 4722 0016 0093     		str	r3, [sp]
 4723 0018 2046     		mov	r0, r4
 4724 001a 8E23     		movs	r3, #142
 4725 001c 4A22     		movs	r2, #74
 4726 001e FFF7FEFF 		bl	s_s_sized
 4727              	.LVL505:
3345:src/display.c ****       }
 4728              		.loc 1 3345 2 is_stmt 0 discriminator 6 view .LVU1434
 4729              	.LBE401:
 4730              	.LBE400:
3504:src/display.c ****       }
 4731              		.loc 1 3504 7 discriminator 6 view .LVU1435
 4732 0022 02B0     		add	sp, sp, #8
 4733              		.cfi_remember_state
 4734              		.cfi_def_cfa_offset 8
 4735              		@ sp needed
 4736 0024 10BD     		pop	{r4, pc}
 4737              	.LVL506:
 4738              	.L450:
 4739              		.cfi_restore_state
 4740              	.LBB402:
 4741              	.LBI402:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4742              		.loc 1 3492 18 is_stmt 1 view .LVU1436
 4743              	.LBB403:
3493:src/display.c ****       }
 4744              		.loc 1 3493 2 view .LVU1437
3493:src/display.c ****       }
 4745              		.loc 1 3493 9 is_stmt 0 view .LVU1438
 4746 0026 0021     		movs	r1, #0
 4747 0028 FFF7FEFF 		bl	pixel_length
 4748              	.LVL507:
3493:src/display.c ****       }
 4749              		.loc 1 3493 9 view .LVU1439
 4750              	.LBE403:
 4751              	.LBE402:
3503:src/display.c ****       }
 4752              		.loc 1 3503 2 view .LVU1440
 4753 002c 4B28     		cmp	r0, #75
 4754 002e D4BF     		ite	le
 4755 0030 0021     		movle	r1, #0
 4756 0032 0121     		movgt	r1, #1
 4757 0034 EDE7     		b	.L447
 4758              	.L452:
 4759 0036 00BF     		.align	2
 4760              	.L451:
 4761 0038 00000000 		.word	StateWhileOn
 4762              		.cfi_endproc
 4763              	.LFE43:
 4765              		.section	.text.set_x_dn,"ax",%progbits
 4766              		.align	1
 4767              		.p2align 2,,3
ARM GAS  /tmp/ccpF0v4D.s 			page 168


 4768              		.global	set_x_dn
 4769              		.syntax unified
 4770              		.thumb
 4771              		.thumb_func
 4772              		.fpu fpv4-sp-d16
 4774              	set_x_dn:
 4775              	.LVL508:
 4776              	.LFB27:
1937:src/display.c **** 	char x[50], *obp = x;
 4777              		.loc 1 1937 67 is_stmt 1 view -0
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 152
 4780              		@ frame_needed = 0, uses_anonymous_args = 0
1938:src/display.c **** 	int odig = 0;
 4781              		.loc 1 1938 2 view .LVU1442
1937:src/display.c **** 	char x[50], *obp = x;
 4782              		.loc 1 1937 67 is_stmt 0 view .LVU1443
 4783 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4784              		.cfi_def_cfa_offset 36
 4785              		.cfi_offset 4, -36
 4786              		.cfi_offset 5, -32
 4787              		.cfi_offset 6, -28
 4788              		.cfi_offset 7, -24
 4789              		.cfi_offset 8, -20
 4790              		.cfi_offset 9, -16
 4791              		.cfi_offset 10, -12
 4792              		.cfi_offset 11, -8
 4793              		.cfi_offset 14, -4
 4794 0004 A7B0     		sub	sp, sp, #156
 4795              		.cfi_def_cfa_offset 192
 4796              	.LVL509:
1939:src/display.c **** 	int show_exp = 0;
 4797              		.loc 1 1939 2 is_stmt 1 view .LVU1444
1940:src/display.c **** 	int j;
 4798              		.loc 1 1940 2 view .LVU1445
1941:src/display.c **** 	char mantissa[64];
 4799              		.loc 1 1941 2 view .LVU1446
1942:src/display.c **** 	int exp = 0;
 4800              		.loc 1 1942 2 view .LVU1447
1943:src/display.c **** 	char *p = mantissa;
 4801              		.loc 1 1943 2 view .LVU1448
1944:src/display.c **** 	char *r;
 4802              		.loc 1 1944 2 view .LVU1449
1945:src/display.c **** 	const char *q;
 4803              		.loc 1 1945 2 view .LVU1450
1946:src/display.c **** 	int count, i;
 4804              		.loc 1 1946 2 view .LVU1451
1947:src/display.c **** 	int extra_digits = 0;
 4805              		.loc 1 1947 2 view .LVU1452
1948:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4806              		.loc 1 1948 2 view .LVU1453
1950:src/display.c **** 	int dispdigs;
 4807              		.loc 1 1950 2 view .LVU1454
1951:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4808              		.loc 1 1951 2 view .LVU1455
1952:src/display.c **** #else
 4809              		.loc 1 1952 2 view .LVU1456
ARM GAS  /tmp/ccpF0v4D.s 			page 169


1937:src/display.c **** 	char x[50], *obp = x;
 4810              		.loc 1 1937 67 is_stmt 0 view .LVU1457
 4811 0006 0546     		mov	r5, r0
1952:src/display.c **** #else
 4812              		.loc 1 1952 13 view .LVU1458
 4813 0008 08A8     		add	r0, sp, #32
 4814              	.LVL510:
1937:src/display.c **** 	char x[50], *obp = x;
 4815              		.loc 1 1937 67 view .LVU1459
 4816 000a 0C46     		mov	r4, r1
 4817 000c 0192     		str	r2, [sp, #4]
1952:src/display.c **** #else
 4818              		.loc 1 1952 13 view .LVU1460
 4819 000e FFF7FEFF 		bl	get_dispmode_digs
 4820              	.LVL511:
1952:src/display.c **** #else
 4821              		.loc 1 1952 13 view .LVU1461
 4822 0012 0646     		mov	r6, r0
 4823              	.LVL512:
1957:src/display.c **** 	int negative = 0;
 4824              		.loc 1 1957 2 is_stmt 1 view .LVU1462
1958:src/display.c **** 	int trimzeros = 0;
 4825              		.loc 1 1958 2 view .LVU1463
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4826              		.loc 1 1959 2 view .LVU1464
1961:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4827              		.loc 1 1961 2 view .LVU1465
1970:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4828              		.loc 1 1970 2 view .LVU1466
 4829 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4830              	.LVL513:
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4831              		.loc 1 1972 2 view .LVU1467
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4832              		.loc 1 1972 5 is_stmt 0 view .LVU1468
 4833 0018 002C     		cmp	r4, #0
 4834 001a 00F07981 		beq	.L454
 4835              	.L457:
1997:src/display.c **** 	  return;
 4836              		.loc 1 1997 2 is_stmt 1 view .LVU1469
1997:src/display.c **** 	  return;
 4837              		.loc 1 1997 6 is_stmt 0 view .LVU1470
 4838 001e 2146     		mov	r1, r4
 4839 0020 05F10800 		add	r0, r5, #8
 4840 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4841              	.LVL514:
1997:src/display.c **** 	  return;
 4842              		.loc 1 1997 5 view .LVU1471
 4843 0028 8346     		mov	fp, r0
 4844 002a 0028     		cmp	r0, #0
 4845 002c 40F06881 		bne	.L453
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4846              		.loc 1 2000 2 is_stmt 1 view .LVU1472
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4847              		.loc 1 2000 12 is_stmt 0 view .LVU1473
 4848 0030 DFF8F885 		ldr	r8, .L697
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
ARM GAS  /tmp/ccpF0v4D.s 			page 170


 4849              		.loc 1 2000 5 view .LVU1474
 4850 0034 98F81130 		ldrb	r3, [r8, #17]	@ zero_extendqisi2
 4851 0038 012B     		cmp	r3, #1
 4852 003a 00F0D082 		beq	.L676
1943:src/display.c **** 	char *p = mantissa;
 4853              		.loc 1 1943 6 view .LVU1475
 4854 003e 8146     		mov	r9, r0
 4855              	.LVL515:
 4856              	.L460:
2006:src/display.c **** 
 4857              		.loc 1 2006 2 is_stmt 1 view .LVU1476
 4858 0040 09AF     		add	r7, sp, #36
 4859              	.LVL516:
2006:src/display.c **** 
 4860              		.loc 1 2006 2 is_stmt 0 view .LVU1477
 4861 0042 3846     		mov	r0, r7
 4862 0044 3222     		movs	r2, #50
 4863 0046 0021     		movs	r1, #0
 4864 0048 FFF7FEFF 		bl	xset
 4865              	.LVL517:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4866              		.loc 1 2008 2 is_stmt 1 view .LVU1478
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4867              		.loc 1 2008 6 is_stmt 0 view .LVU1479
 4868 004c 2846     		mov	r0, r5
 4869 004e FFF7FEFF 		bl	dn_eq0
 4870              	.LVL518:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4871              		.loc 1 2008 5 view .LVU1480
 4872 0052 0028     		cmp	r0, #0
 4873 0054 00F05781 		beq	.L461
2009:src/display.c **** 	    x[0] = '-';
 4874              		.loc 1 2009 4 is_stmt 1 view .LVU1481
2009:src/display.c **** 	    x[0] = '-';
 4875              		.loc 1 2009 7 is_stmt 0 view .LVU1482
 4876 0058 95F90830 		ldrsb	r3, [r5, #8]
 4877 005c 002B     		cmp	r3, #0
 4878 005e C0F2F182 		blt	.L677
 4879              	.L462:
2013:src/display.c **** 	} else
 4880              		.loc 1 2013 6 is_stmt 1 view .LVU1483
2013:src/display.c **** 	} else
 4881              		.loc 1 2013 11 is_stmt 0 view .LVU1484
 4882 0062 3023     		movs	r3, #48
 4883 0064 8DF82430 		strb	r3, [sp, #36]
 4884              	.L463:
2017:src/display.c **** 	  show_x(x, exp);
 4885              		.loc 1 2017 2 is_stmt 1 view .LVU1485
2017:src/display.c **** 	  show_x(x, exp);
 4886              		.loc 1 2017 12 is_stmt 0 view .LVU1486
 4887 0068 98F811A0 		ldrb	r10, [r8, #17]	@ zero_extendqisi2
2017:src/display.c **** 	  show_x(x, exp);
 4888              		.loc 1 2017 5 view .LVU1487
 4889 006c BAF1010F 		cmp	r10, #1
 4890 0070 00F01B83 		beq	.L678
2023:src/display.c **** 	  //  ALL mode: fill the display
 4891              		.loc 1 2023 2 is_stmt 1 view .LVU1488
ARM GAS  /tmp/ccpF0v4D.s 			page 171


2025:src/display.c **** 	else
 4892              		.loc 1 2025 25 is_stmt 0 view .LVU1489
 4893 0074 019B     		ldr	r3, [sp, #4]
2023:src/display.c **** 	  //  ALL mode: fill the display
 4894              		.loc 1 2023 5 view .LVU1490
 4895 0076 002E     		cmp	r6, #0
 4896 0078 40F06581 		bne	.L679
2025:src/display.c **** 	else
 4897              		.loc 1 2025 4 is_stmt 1 view .LVU1491
2025:src/display.c **** 	else
 4898              		.loc 1 2025 25 is_stmt 0 view .LVU1492
 4899 007c 1968     		ldr	r1, [r3]
 4900              	.LBB421:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4901              		.loc 1 2032 11 view .LVU1493
 4902 007e 089B     		ldr	r3, [sp, #32]
 4903 0080 3246     		mov	r2, r6
 4904 0082 2846     		mov	r0, r5
 4905              	.LBE421:
2025:src/display.c **** 	else
 4906              		.loc 1 2025 25 view .LVU1494
 4907 0084 4D1E     		subs	r5, r1, #1
 4908              	.LVL519:
 4909              	.LBB422:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4910              		.loc 1 2032 11 view .LVU1495
 4911 0086 07A9     		add	r1, sp, #28
 4912              	.LBE422:
2025:src/display.c **** 	else
 4913              		.loc 1 2025 7 view .LVU1496
 4914 0088 0795     		str	r5, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 4915              		.loc 1 2029 2 is_stmt 1 view .LVU1497
 4916              	.LBB423:
2030:src/display.c **** 
 4917              		.loc 1 2030 4 view .LVU1498
 4918              	.LVL520:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4919              		.loc 1 2032 4 view .LVU1499
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4920              		.loc 1 2032 11 is_stmt 0 view .LVU1500
 4921 008a FFF7FEFF 		bl	std_round_fix
 4922              	.LVL521:
2037:src/display.c ****  	}
 4923              		.loc 1 2037 27 view .LVU1501
 4924 008e 019B     		ldr	r3, [sp, #4]
 4925 0090 1B68     		ldr	r3, [r3]
 4926 0092 013B     		subs	r3, r3, #1
2037:src/display.c ****  	}
 4927              		.loc 1 2037 9 view .LVU1502
 4928 0094 0793     		str	r3, [sp, #28]
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4929              		.loc 1 2035 16 view .LVU1503
 4930 0096 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4931              		.loc 1 2032 11 view .LVU1504
 4932 0098 0646     		mov	r6, r0
ARM GAS  /tmp/ccpF0v4D.s 			page 172


 4933              	.LVL522:
2033:src/display.c **** 	    // allow zeros to be trimmed
 4934              		.loc 1 2033 4 is_stmt 1 view .LVU1505
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4935              		.loc 1 2035 6 view .LVU1506
2036:src/display.c **** 	    dd = *display_digits - 1;
 4936              		.loc 1 2036 4 view .LVU1507
2037:src/display.c ****  	}
 4937              		.loc 1 2037 6 view .LVU1508
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4938              		.loc 1 2035 16 is_stmt 0 view .LVU1509
 4939 009a 0393     		str	r3, [sp, #12]
 4940              	.LVL523:
 4941              	.L579:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 4942              		.loc 1 2035 16 view .LVU1510
 4943              	.LBE423:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4944              		.loc 1 2049 2 is_stmt 1 view .LVU1511
 4945 009c 0DF15809 		add	r9, sp, #88
 4946              	.LVL524:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4947              		.loc 1 2049 2 is_stmt 0 view .LVU1512
 4948 00a0 3021     		movs	r1, #48
 4949 00a2 4846     		mov	r0, r9
 4950 00a4 3F22     		movs	r2, #63
 4951 00a6 FFF7FEFF 		bl	xset
 4952              	.LVL525:
2050:src/display.c **** 
 4953              		.loc 1 2050 2 is_stmt 1 view .LVU1513
2050:src/display.c **** 
 4954              		.loc 1 2050 31 is_stmt 0 view .LVU1514
 4955 00aa 0023     		movs	r3, #0
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4956              		.loc 1 2052 6 view .LVU1515
 4957 00ac 4521     		movs	r1, #69
 4958 00ae 3846     		mov	r0, r7
2050:src/display.c **** 
 4959              		.loc 1 2050 31 view .LVU1516
 4960 00b0 8DF89730 		strb	r3, [sp, #151]
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4961              		.loc 1 2052 2 is_stmt 1 view .LVU1517
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4962              		.loc 1 2052 6 is_stmt 0 view .LVU1518
 4963 00b4 FFF7FEFF 		bl	find_char
 4964              	.LVL526:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4965              		.loc 1 2061 2 is_stmt 1 view .LVU1519
2061:src/display.c **** 	else exp = s_to_i(q+1);
 4966              		.loc 1 2061 5 is_stmt 0 view .LVU1520
 4967 00b8 0028     		cmp	r0, #0
 4968 00ba 00F05181 		beq	.L586
2062:src/display.c **** #endif
 4969              		.loc 1 2062 7 is_stmt 1 view .LVU1521
2062:src/display.c **** #endif
 4970              		.loc 1 2062 13 is_stmt 0 view .LVU1522
 4971 00be 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccpF0v4D.s 			page 173


 4972              	.LVL527:
2062:src/display.c **** #endif
 4973              		.loc 1 2062 13 view .LVU1523
 4974 00c0 FFF7FEFF 		bl	s_to_i
 4975              	.LVL528:
2062:src/display.c **** #endif
 4976              		.loc 1 2062 13 view .LVU1524
 4977 00c4 0546     		mov	r5, r0
 4978              	.LVL529:
 4979              	.L479:
2066:src/display.c **** 	if (!res) {
 4980              		.loc 1 2066 2 is_stmt 1 view .LVU1525
2066:src/display.c **** 	if (!res) {
 4981              		.loc 1 2066 12 view .LVU1526
2066:src/display.c **** 	if (!res) {
 4982              		.loc 1 2066 2 is_stmt 0 view .LVU1527
 4983 00c6 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4984 00ca 202B     		cmp	r3, #32
2066:src/display.c **** 	if (!res) {
 4985              		.loc 1 2066 8 view .LVU1528
 4986 00cc B846     		mov	r8, r7
2066:src/display.c **** 	if (!res) {
 4987              		.loc 1 2066 2 view .LVU1529
 4988 00ce 03D1     		bne	.L480
 4989              	.LVL530:
 4990              	.L481:
2066:src/display.c **** 	if (!res) {
 4991              		.loc 1 2066 27 is_stmt 1 discriminator 3 view .LVU1530
2066:src/display.c **** 	if (!res) {
 4992              		.loc 1 2066 23 discriminator 3 view .LVU1531
2066:src/display.c **** 	if (!res) {
 4993              		.loc 1 2066 12 discriminator 3 view .LVU1532
2066:src/display.c **** 	if (!res) {
 4994              		.loc 1 2066 2 is_stmt 0 discriminator 3 view .LVU1533
 4995 00d0 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4996              	.LVL531:
2066:src/display.c **** 	if (!res) {
 4997              		.loc 1 2066 2 discriminator 3 view .LVU1534
 4998 00d4 202B     		cmp	r3, #32
 4999 00d6 FBD0     		beq	.L481
 5000              	.LVL532:
 5001              	.L480:
2067:src/display.c **** 	  CLR_EXP_SIGN;
 5002              		.loc 1 2067 2 is_stmt 1 view .LVU1535
2067:src/display.c **** 	  CLR_EXP_SIGN;
 5003              		.loc 1 2067 5 is_stmt 0 view .LVU1536
 5004 00d8 002C     		cmp	r4, #0
 5005 00da 00F0BE82 		beq	.L680
 5006              	.L482:
2071:src/display.c **** 	  negative = 1;
 5007              		.loc 1 2071 2 is_stmt 1 view .LVU1537
2071:src/display.c **** 	  negative = 1;
 5008              		.loc 1 2071 6 is_stmt 0 view .LVU1538
 5009 00de 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2071:src/display.c **** 	  negative = 1;
 5010              		.loc 1 2071 5 view .LVU1539
 5011 00e2 2D2B     		cmp	r3, #45
ARM GAS  /tmp/ccpF0v4D.s 			page 174


 5012 00e4 00F0C481 		beq	.L681
2074:src/display.c **** 	  q++;
 5013              		.loc 1 2074 9 is_stmt 1 view .LVU1540
2074:src/display.c **** 	  q++;
 5014              		.loc 1 2074 12 is_stmt 0 view .LVU1541
 5015 00e8 2B2B     		cmp	r3, #43
 5016 00ea 00F09882 		beq	.L682
1958:src/display.c **** 	int trimzeros = 0;
 5017              		.loc 1 1958 6 view .LVU1542
 5018 00ee 0022     		movs	r2, #0
 5019 00f0 0292     		str	r2, [sp, #8]
 5020              	.LVL533:
 5021              	.L484:
2076:src/display.c **** 	if (*q == '.') {
 5022              		.loc 1 2076 9 is_stmt 1 discriminator 1 view .LVU1543
2076:src/display.c **** 	if (*q == '.') {
 5023              		.loc 1 2076 2 is_stmt 0 discriminator 1 view .LVU1544
 5024 00f2 302B     		cmp	r3, #48
 5025 00f4 03D1     		bne	.L486
 5026              	.LVL534:
 5027              	.L485:
2076:src/display.c **** 	if (*q == '.') {
 5028              		.loc 1 2076 24 is_stmt 1 discriminator 2 view .LVU1545
2076:src/display.c **** 	if (*q == '.') {
 5029              		.loc 1 2076 20 discriminator 2 view .LVU1546
2076:src/display.c **** 	if (*q == '.') {
 5030              		.loc 1 2076 9 discriminator 2 view .LVU1547
 5031 00f6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5032              	.LVL535:
2076:src/display.c **** 	if (*q == '.') {
 5033              		.loc 1 2076 2 is_stmt 0 discriminator 2 view .LVU1548
 5034 00fa 302B     		cmp	r3, #48
 5035 00fc FBD0     		beq	.L485
 5036              	.LVL536:
 5037              	.L486:
2077:src/display.c **** 	  do
 5038              		.loc 1 2077 2 is_stmt 1 view .LVU1549
2077:src/display.c **** 	  do
 5039              		.loc 1 2077 5 is_stmt 0 view .LVU1550
 5040 00fe 2E2B     		cmp	r3, #46
 5041 0100 00F09E81 		beq	.L683
2084:src/display.c **** 	    *p++ = *q++;
 5042              		.loc 1 2084 4 is_stmt 1 view .LVU1551
2084:src/display.c **** 	    *p++ = *q++;
 5043              		.loc 1 2084 7 is_stmt 0 view .LVU1552
 5044 0104 A3F13002 		sub	r2, r3, #48
 5045 0108 092A     		cmp	r2, #9
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5046              		.loc 1 2085 6 is_stmt 1 view .LVU1553
 5047              	.LVL537:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5048              		.loc 1 2085 15 is_stmt 0 view .LVU1554
 5049 010a 9CBF     		itt	ls
 5050 010c 08F10108 		addls	r8, r8, #1
 5051              	.LVL538:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5052              		.loc 1 2085 11 view .LVU1555
ARM GAS  /tmp/ccpF0v4D.s 			page 175


 5053 0110 8DF85830 		strbls	r3, [sp, #88]
2086:src/display.c **** 	    *p++ = *q++;
 5054              		.loc 1 2086 11 view .LVU1556
 5055 0114 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2086:src/display.c **** 	    *p++ = *q++;
 5056              		.loc 1 2086 10 view .LVU1557
 5057 0118 A2F13003 		sub	r3, r2, #48
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5058              		.loc 1 2085 8 view .LVU1558
 5059 011c 94BF     		ite	ls
 5060 011e 0DF15901 		addls	r1, sp, #89
1944:src/display.c **** 	char *r;
 5061              		.loc 1 1944 8 view .LVU1559
 5062 0122 4946     		movhi	r1, r9
 5063              	.LVL539:
2086:src/display.c **** 	    *p++ = *q++;
 5064              		.loc 1 2086 10 is_stmt 1 view .LVU1560
 5065 0124 092B     		cmp	r3, #9
 5066 0126 0ED8     		bhi	.L492
 5067 0128 A5EB0800 		sub	r0, r5, r8
 5068 012c 08F10103 		add	r3, r8, #1
 5069              	.L493:
 5070              	.LVL540:
2087:src/display.c **** 	    exp++;
 5071              		.loc 1 2087 6 view .LVU1561
2087:src/display.c **** 	    exp++;
 5072              		.loc 1 2087 11 is_stmt 0 view .LVU1562
 5073 0130 01F8012B 		strb	r2, [r1], #1
 5074              	.LVL541:
2087:src/display.c **** 	    exp++;
 5075              		.loc 1 2087 15 view .LVU1563
 5076 0134 9846     		mov	r8, r3
 5077              	.LVL542:
2088:src/display.c **** 	  }
 5078              		.loc 1 2088 6 is_stmt 1 view .LVU1564
 5079 0136 C518     		adds	r5, r0, r3
 5080              	.LVL543:
2086:src/display.c **** 	    *p++ = *q++;
 5081              		.loc 1 2086 10 view .LVU1565
2086:src/display.c **** 	    *p++ = *q++;
 5082              		.loc 1 2086 11 is_stmt 0 view .LVU1566
 5083 0138 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5084              	.LVL544:
2086:src/display.c **** 	    *p++ = *q++;
 5085              		.loc 1 2086 10 view .LVU1567
 5086 013c A2F1300C 		sub	ip, r2, #48
 5087 0140 BCF1090F 		cmp	ip, #9
 5088 0144 F4D9     		bls	.L493
 5089              	.LVL545:
 5090              	.L492:
2090:src/display.c **** 	    q++;
 5091              		.loc 1 2090 4 is_stmt 1 view .LVU1568
2090:src/display.c **** 	    q++;
 5092              		.loc 1 2090 7 is_stmt 0 view .LVU1569
 5093 0146 2E2A     		cmp	r2, #46
 5094 0148 00F05782 		beq	.L684
 5095              	.LVL546:
ARM GAS  /tmp/ccpF0v4D.s 			page 176


 5096              	.L489:
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5097              		.loc 1 2097 2 is_stmt 1 view .LVU1570
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5098              		.loc 1 2098 12 is_stmt 0 view .LVU1571
 5099 014c 019B     		ldr	r3, [sp, #4]
 5100 014e 079A     		ldr	r2, [sp, #28]
 5101 0150 D3F800A0 		ldr	r10, [r3]
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5102              		.loc 1 2097 5 view .LVU1572
 5103 0154 012E     		cmp	r6, #1
 5104 0156 00F06381 		beq	.L495
 5105              	.LVL547:
 5106              	.L675:
2099:src/display.c **** 	  else {
 5107              		.loc 1 2099 35 view .LVU1573
 5108 015a 0021     		movs	r1, #0
 5109              	.LVL548:
 5110              	.L496:
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5111              		.loc 1 2111 2 is_stmt 1 view .LVU1574
 5112 015c 02F1010E 		add	lr, r2, #1
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5113              		.loc 1 2111 35 is_stmt 0 view .LVU1575
 5114 0160 7144     		add	r1, r1, lr
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5115              		.loc 1 2111 4 view .LVU1576
 5116 0162 09EB0103 		add	r3, r9, r1
 5117              	.LVL549:
2112:src/display.c **** 	  *p = '0';
 5118              		.loc 1 2112 2 is_stmt 1 view .LVU1577
2112:src/display.c **** 	  *p = '0';
 5119              		.loc 1 2112 6 is_stmt 0 view .LVU1578
 5120 0166 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2112:src/display.c **** 	  *p = '0';
 5121              		.loc 1 2112 5 view .LVU1579
 5122 016a 3428     		cmp	r0, #52
 5123 016c 26D9     		bls	.L501
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5124              		.loc 1 2113 4 is_stmt 1 view .LVU1580
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5125              		.loc 1 2113 7 is_stmt 0 view .LVU1581
 5126 016e 3020     		movs	r0, #48
 5127 0170 09F80100 		strb	r0, [r9, r1]
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5128              		.loc 1 2114 4 is_stmt 1 view .LVU1582
 5129              	.LVL550:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5130              		.loc 1 2114 23 view .LVU1583
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5131              		.loc 1 2114 4 is_stmt 0 view .LVU1584
 5132 0174 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5133 0178 3928     		cmp	r0, #57
 5134 017a 40F0AC83 		bne	.L502
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5135              		.loc 1 2114 11 view .LVU1585
 5136 017e 4846     		mov	r0, r9
ARM GAS  /tmp/ccpF0v4D.s 			page 177


 5137              	.LVL551:
 5138              	.L503:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5139              		.loc 1 2114 38 is_stmt 1 discriminator 3 view .LVU1586
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5140              		.loc 1 2114 34 discriminator 3 view .LVU1587
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5141              		.loc 1 2114 23 discriminator 3 view .LVU1588
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5142              		.loc 1 2114 4 is_stmt 0 discriminator 3 view .LVU1589
 5143 0180 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5144              	.LVL552:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5145              		.loc 1 2114 4 discriminator 3 view .LVU1590
 5146 0184 BCF1390F 		cmp	ip, #57
 5147 0188 FAD0     		beq	.L503
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5148              		.loc 1 2115 4 is_stmt 1 view .LVU1591
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5149              		.loc 1 2115 7 is_stmt 0 view .LVU1592
 5150 018a 8342     		cmp	r3, r0
 5151 018c 00F0F780 		beq	.L685
 5152              	.LVL553:
 5153              	.L577:
2124:src/display.c **** 	      *p = '0';
 5154              		.loc 1 2124 12 is_stmt 1 view .LVU1593
2124:src/display.c **** 	      *p = '0';
 5155              		.loc 1 2124 13 is_stmt 0 view .LVU1594
 5156 0190 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2124:src/display.c **** 	      *p = '0';
 5157              		.loc 1 2124 12 view .LVU1595
 5158 0194 BCF1390F 		cmp	ip, #57
 5159 0198 03F1FF30 		add	r0, r3, #-1
 5160              	.LVL554:
2124:src/display.c **** 	      *p = '0';
 5161              		.loc 1 2124 12 view .LVU1596
 5162 019c 08D1     		bne	.L506
2125:src/display.c **** 	    (*p)++;
 5163              		.loc 1 2125 11 view .LVU1597
 5164 019e 4FF0300E 		mov	lr, #48
 5165              	.L505:
2125:src/display.c **** 	    (*p)++;
 5166              		.loc 1 2125 8 is_stmt 1 view .LVU1598
2125:src/display.c **** 	    (*p)++;
 5167              		.loc 1 2125 11 is_stmt 0 view .LVU1599
 5168 01a2 80F800E0 		strb	lr, [r0]
2124:src/display.c **** 	      *p = '0';
 5169              		.loc 1 2124 12 is_stmt 1 view .LVU1600
 5170              	.LVL555:
2124:src/display.c **** 	      *p = '0';
 5171              		.loc 1 2124 13 is_stmt 0 view .LVU1601
 5172 01a6 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5173              	.LVL556:
2124:src/display.c **** 	      *p = '0';
 5174              		.loc 1 2124 12 view .LVU1602
 5175 01aa BCF1390F 		cmp	ip, #57
 5176 01ae F8D0     		beq	.L505
ARM GAS  /tmp/ccpF0v4D.s 			page 178


 5177              	.L506:
2126:src/display.c **** 	  }
 5178              		.loc 1 2126 6 is_stmt 1 view .LVU1603
2126:src/display.c **** 	  }
 5179              		.loc 1 2126 10 is_stmt 0 view .LVU1604
 5180 01b0 0CF1010C 		add	ip, ip, #1
 5181 01b4 80F800C0 		strb	ip, [r0]
 5182              	.LVL557:
 5183              	.L674:
2126:src/display.c **** 	  }
 5184              		.loc 1 2126 10 view .LVU1605
 5185 01b8 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5186              	.L501:
2131:src/display.c **** 
 5187              		.loc 1 2131 2 is_stmt 1 view .LVU1606
 5188              	.LVL558:
2131:src/display.c **** 
 5189              		.loc 1 2131 45 view .LVU1607
2131:src/display.c **** 
 5190              		.loc 1 2131 2 is_stmt 0 view .LVU1608
 5191 01bc 28B1     		cbz	r0, .L512
 5192              	.LVL559:
 5193              	.L576:
2131:src/display.c **** 
 5194              		.loc 1 2131 62 view .LVU1609
 5195 01be 3020     		movs	r0, #48
 5196              	.L513:
2131:src/display.c **** 
 5197              		.loc 1 2131 68 is_stmt 1 discriminator 3 view .LVU1610
2131:src/display.c **** 
 5198              		.loc 1 2131 57 discriminator 3 view .LVU1611
 5199              	.LVL560:
2131:src/display.c **** 
 5200              		.loc 1 2131 62 is_stmt 0 discriminator 3 view .LVU1612
 5201 01c0 03F8010B 		strb	r0, [r3], #1
 5202              	.LVL561:
2131:src/display.c **** 
 5203              		.loc 1 2131 45 is_stmt 1 discriminator 3 view .LVU1613
2131:src/display.c **** 
 5204              		.loc 1 2131 2 is_stmt 0 discriminator 3 view .LVU1614
 5205 01c4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5206 01c6 0029     		cmp	r1, #0
 5207 01c8 FAD1     		bne	.L513
 5208              	.L512:
2133:src/display.c **** 	switch (mode) {
 5209              		.loc 1 2133 2 is_stmt 1 view .LVU1615
 5210              	.LVL562:
2134:src/display.c **** 	default:
 5211              		.loc 1 2134 2 view .LVU1616
 5212 01ca 022E     		cmp	r6, #2
 5213 01cc 00F05681 		beq	.L550
 5214 01d0 032E     		cmp	r6, #3
 5215 01d2 00F0F880 		beq	.L515
 5216 01d6 012E     		cmp	r6, #1
 5217 01d8 00F0C981 		beq	.L516
2137:src/display.c **** 	  if (count != *display_digits)
 5218              		.loc 1 2137 4 view .LVU1617
ARM GAS  /tmp/ccpF0v4D.s 			page 179


 5219              	.LVL563:
2137:src/display.c **** 	  if (count != *display_digits)
 5220              		.loc 1 2137 34 view .LVU1618
2137:src/display.c **** 	  if (count != *display_digits)
 5221              		.loc 1 2137 42 is_stmt 0 view .LVU1619
 5222 01dc 26AB     		add	r3, sp, #152
 5223 01de 5344     		add	r3, r3, r10
2137:src/display.c **** 	  if (count != *display_digits)
 5224              		.loc 1 2137 4 view .LVU1620
 5225 01e0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5226 01e4 302B     		cmp	r3, #48
 5227 01e6 40F06983 		bne	.L592
 5228 01ea 0AF1FF31 		add	r1, r10, #-1
 5229 01ee 4944     		add	r1, r1, r9
 5230 01f0 5046     		mov	r0, r10
 5231              	.LVL564:
 5232              	.L520:
2137:src/display.c **** 	  if (count != *display_digits)
 5233              		.loc 1 2137 66 is_stmt 1 discriminator 3 view .LVU1621
2137:src/display.c **** 	  if (count != *display_digits)
 5234              		.loc 1 2137 58 discriminator 3 view .LVU1622
2137:src/display.c **** 	  if (count != *display_digits)
 5235              		.loc 1 2137 42 is_stmt 0 discriminator 3 view .LVU1623
 5236 01f2 11F80169 		ldrb	r6, [r1], #-1	@ zero_extendqisi2
2137:src/display.c **** 	  if (count != *display_digits)
 5237              		.loc 1 2137 4 discriminator 3 view .LVU1624
 5238 01f6 302E     		cmp	r6, #48
 5239 01f8 0346     		mov	r3, r0
2137:src/display.c **** 	  if (count != *display_digits)
 5240              		.loc 1 2137 63 discriminator 3 view .LVU1625
 5241 01fa 00F1FF30 		add	r0, r0, #-1
 5242              	.LVL565:
2137:src/display.c **** 	  if (count != *display_digits)
 5243              		.loc 1 2137 34 is_stmt 1 discriminator 3 view .LVU1626
2137:src/display.c **** 	  if (count != *display_digits)
 5244              		.loc 1 2137 4 is_stmt 0 discriminator 3 view .LVU1627
 5245 01fe F8D0     		beq	.L520
2138:src/display.c **** 	    count++;
 5246              		.loc 1 2138 4 is_stmt 1 view .LVU1628
2138:src/display.c **** 	    count++;
 5247              		.loc 1 2138 7 is_stmt 0 view .LVU1629
 5248 0200 5045     		cmp	r0, r10
 5249 0202 08BF     		it	eq
 5250 0204 5346     		moveq	r3, r10
 5251              	.LVL566:
 5252              	.L519:
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5253              		.loc 1 2141 4 is_stmt 1 view .LVU1630
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5254              		.loc 1 2141 7 is_stmt 0 view .LVU1631
 5255 0206 5545     		cmp	r5, r10
 5256 0208 80F2EF80 		bge	.L521
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5257              		.loc 1 2141 47 discriminator 1 view .LVU1632
 5258 020c A3EB0A01 		sub	r1, r3, r10
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5259              		.loc 1 2141 31 discriminator 1 view .LVU1633
ARM GAS  /tmp/ccpF0v4D.s 			page 180


 5260 0210 A942     		cmp	r1, r5
 5261 0212 00F3EA80 		bgt	.L521
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5262              		.loc 1 2166 11 is_stmt 1 view .LVU1634
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5263              		.loc 1 2166 14 is_stmt 0 view .LVU1635
 5264 0216 002D     		cmp	r5, #0
 5265 0218 C0F27183 		blt	.L530
 5266 021c 6A1C     		adds	r2, r5, #1
2168:src/display.c **** 		*obp++ = ',';
 5267              		.loc 1 2168 31 view .LVU1636
 5268 021e DFF814E4 		ldr	lr, .L697+8
 5269 0222 0492     		str	r2, [sp, #16]
 5270 0224 09EB0200 		add	r0, r9, r2
2133:src/display.c **** 	switch (mode) {
 5271              		.loc 1 2133 4 view .LVU1637
 5272 0228 CC46     		mov	ip, r9
1938:src/display.c **** 	int odig = 0;
 5273              		.loc 1 1938 15 view .LVU1638
 5274 022a 3946     		mov	r1, r7
2169:src/display.c **** 	      *obp++ = *p++;
 5275              		.loc 1 2169 10 view .LVU1639
 5276 022c 4FF02C08 		mov	r8, #44
 5277 0230 0593     		str	r3, [sp, #20]
 5278 0232 05E0     		b	.L531
 5279              	.LVL567:
 5280              	.L534:
2169:src/display.c **** 	      *obp++ = *p++;
 5281              		.loc 1 2169 3 is_stmt 1 view .LVU1640
2168:src/display.c **** 		*obp++ = ',';
 5282              		.loc 1 2168 18 is_stmt 0 view .LVU1641
 5283 0234 022E     		cmp	r6, #2
2169:src/display.c **** 	      *obp++ = *p++;
 5284              		.loc 1 2169 10 view .LVU1642
 5285 0236 0ABF     		itet	eq
 5286 0238 81F80180 		strbeq	r8, [r1, #1]
2170:src/display.c **** 	      odig++;
 5287              		.loc 1 2170 12 view .LVU1643
 5288 023c 0131     		addne	r1, r1, #1
 5289              	.LVL568:
2169:src/display.c **** 	      *obp++ = *p++;
 5290              		.loc 1 2169 7 view .LVU1644
 5291 023e 0231     		addeq	r1, r1, #2
 5292              	.LVL569:
 5293              	.L531:
2170:src/display.c **** 	      odig++;
 5294              		.loc 1 2170 8 is_stmt 1 discriminator 2 view .LVU1645
2170:src/display.c **** 	      odig++;
 5295              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1646
 5296 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5297              	.LVL570:
2168:src/display.c **** 		*obp++ = ',';
 5298              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1647
2170:src/display.c **** 	      odig++;
 5299              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1648
 5300 0244 0A70     		strb	r2, [r1]
2171:src/display.c **** 	    }
ARM GAS  /tmp/ccpF0v4D.s 			page 181


 5301              		.loc 1 2171 8 is_stmt 1 discriminator 2 view .LVU1649
 5302              	.LVL571:
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5303              		.loc 1 2167 23 discriminator 2 view .LVU1650
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5304              		.loc 1 2167 15 discriminator 2 view .LVU1651
2168:src/display.c **** 		*obp++ = ',';
 5305              		.loc 1 2168 31 is_stmt 0 discriminator 2 view .LVU1652
 5306 0246 A9EB0C02 		sub	r2, r9, ip
 5307 024a 2A44     		add	r2, r2, r5
 5308 024c 8EFB0236 		smull	r3, r6, lr, r2
 5309 0250 A6EBE276 		sub	r6, r6, r2, asr #31
 5310 0254 06EB4606 		add	r6, r6, r6, lsl #1
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5311              		.loc 1 2167 6 discriminator 2 view .LVU1653
 5312 0258 8445     		cmp	ip, r0
2168:src/display.c **** 		*obp++ = ',';
 5313              		.loc 1 2168 31 discriminator 2 view .LVU1654
 5314 025a A2EB0606 		sub	r6, r2, r6
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5315              		.loc 1 2167 6 discriminator 2 view .LVU1655
 5316 025e E9D1     		bne	.L534
 5317 0260 059B     		ldr	r3, [sp, #20]
 5318 0262 049E     		ldr	r6, [sp, #16]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5319              		.loc 1 2173 6 is_stmt 1 view .LVU1656
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5320              		.loc 1 2173 13 is_stmt 0 view .LVU1657
 5321 0264 2E22     		movs	r2, #46
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5322              		.loc 1 2174 9 view .LVU1658
 5323 0266 B342     		cmp	r3, r6
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5324              		.loc 1 2173 13 view .LVU1659
 5325 0268 4A70     		strb	r2, [r1, #1]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5326              		.loc 1 2173 10 view .LVU1660
 5327 026a 01F10208 		add	r8, r1, #2
 5328              	.LVL572:
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5329              		.loc 1 2174 6 is_stmt 1 view .LVU1661
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5330              		.loc 1 2174 9 is_stmt 0 view .LVU1662
 5331 026e 40F32781 		ble	.L528
 5332 0272 5A1B     		subs	r2, r3, r5
 5333 0274 0A44     		add	r2, r2, r1
 5334 0276 0131     		adds	r1, r1, #1
 5335              	.LVL573:
 5336              	.L535:
2176:src/display.c **** 		odig++;
 5337              		.loc 1 2176 3 is_stmt 1 discriminator 3 view .LVU1663
2176:src/display.c **** 		odig++;
 5338              		.loc 1 2176 10 is_stmt 0 discriminator 3 view .LVU1664
 5339 0278 10F8016B 		ldrb	r6, [r0], #1	@ zero_extendqisi2
 5340              	.LVL574:
2176:src/display.c **** 		odig++;
 5341              		.loc 1 2176 10 discriminator 3 view .LVU1665
ARM GAS  /tmp/ccpF0v4D.s 			page 182


 5342 027c 01F8016F 		strb	r6, [r1, #1]!
2177:src/display.c **** 	      }
 5343              		.loc 1 2177 3 is_stmt 1 discriminator 3 view .LVU1666
2175:src/display.c **** 		*obp++ = *p++;
 5344              		.loc 1 2175 31 discriminator 3 view .LVU1667
2175:src/display.c **** 		*obp++ = *p++;
 5345              		.loc 1 2175 22 discriminator 3 view .LVU1668
2175:src/display.c **** 		*obp++ = *p++;
 5346              		.loc 1 2175 8 is_stmt 0 discriminator 3 view .LVU1669
 5347 0280 8A42     		cmp	r2, r1
 5348 0282 F9D1     		bne	.L535
 5349 0284 EA43     		mvns	r2, r5
 5350 0286 1A44     		add	r2, r2, r3
 5351 0288 9044     		add	r8, r8, r2
 5352              	.LVL575:
2177:src/display.c **** 	      }
 5353              		.loc 1 2177 7 view .LVU1670
 5354 028a 1E46     		mov	r6, r3
 5355 028c 18E1     		b	.L528
 5356              	.LVL576:
 5357              	.L596:
2177:src/display.c **** 	      }
 5358              		.loc 1 2177 7 view .LVU1671
 5359 028e B846     		mov	r8, r7
 5360              	.LVL577:
 5361              	.L557:
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5362              		.loc 1 2269 2 is_stmt 1 view .LVU1672
2275:src/display.c **** 	if (odig > *display_digits)
 5363              		.loc 1 2275 2 view .LVU1673
 5364 0290 5645     		cmp	r6, r10
 5365 0292 A8BF     		it	ge
 5366 0294 5646     		movge	r6, r10
 5367              	.LVL578:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5368              		.loc 1 2278 23 is_stmt 0 view .LVU1674
 5369 0296 AAEB0603 		sub	r3, r10, r6
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5370              		.loc 1 2278 4 view .LVU1675
 5371 029a 03EBC30A 		add	r10, r3, r3, lsl #3
2281:src/display.c **** 	  if (res) *res++ = '-';
 5372              		.loc 1 2281 5 view .LVU1676
 5373 029e 029B     		ldr	r3, [sp, #8]
2275:src/display.c **** 	if (odig > *display_digits)
 5374              		.loc 1 2275 7 view .LVU1677
 5375 02a0 0022     		movs	r2, #0
 5376 02a2 88F80020 		strb	r2, [r8]
2276:src/display.c **** 	  odig = *display_digits;
 5377              		.loc 1 2276 2 is_stmt 1 view .LVU1678
 5378              	.LVL579:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5379              		.loc 1 2278 2 view .LVU1679
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5380              		.loc 1 2279 2 view .LVU1680
2281:src/display.c **** 	  if (res) *res++ = '-';
 5381              		.loc 1 2281 2 view .LVU1681
2281:src/display.c **** 	  if (res) *res++ = '-';
ARM GAS  /tmp/ccpF0v4D.s 			page 183


 5382              		.loc 1 2281 5 is_stmt 0 view .LVU1682
 5383 02a6 2BB1     		cbz	r3, .L560
2282:src/display.c **** 	  else {
 5384              		.loc 1 2282 4 is_stmt 1 view .LVU1683
2282:src/display.c **** 	  else {
 5385              		.loc 1 2282 7 is_stmt 0 view .LVU1684
 5386 02a8 002C     		cmp	r4, #0
 5387 02aa 00F0EE81 		beq	.L561
2282:src/display.c **** 	  else {
 5388              		.loc 1 2282 13 is_stmt 1 discriminator 1 view .LVU1685
 5389              	.LVL580:
2282:src/display.c **** 	  else {
 5390              		.loc 1 2282 20 is_stmt 0 discriminator 1 view .LVU1686
 5391 02ae 2D22     		movs	r2, #45
 5392 02b0 04F8012B 		strb	r2, [r4], #1
 5393              	.LVL581:
 5394              	.L560:
2290:src/display.c **** 	  if (c == '.') {
 5395              		.loc 1 2290 12 is_stmt 1 discriminator 1 view .LVU1687
2290:src/display.c **** 	  if (c == '.') {
 5396              		.loc 1 2290 18 is_stmt 0 discriminator 1 view .LVU1688
 5397 02b4 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5398              	.LVL582:
2290:src/display.c **** 	  if (c == '.') {
 5399              		.loc 1 2290 2 discriminator 1 view .LVU1689
 5400 02b8 BAB1     		cbz	r2, .L562
2290:src/display.c **** 	  if (c == '.') {
 5401              		.loc 1 2290 31 view .LVU1690
 5402 02ba BAF16B0F 		cmp	r10, #107
 5403 02be 14DC     		bgt	.L562
 5404              	.LVL583:
 5405              	.L563:
2292:src/display.c **** 	  } else if (c == ',') {
 5406              		.loc 1 2292 12 view .LVU1691
 5407 02c0 DFF87493 		ldr	r9, .L697+12
 5408              	.LVL584:
 5409              	.L572:
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5410              		.loc 1 2291 4 is_stmt 1 view .LVU1692
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5411              		.loc 1 2291 7 is_stmt 0 view .LVU1693
 5412 02c4 2E2A     		cmp	r2, #46
 5413 02c6 00F01081 		beq	.L686
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5414              		.loc 1 2293 11 is_stmt 1 view .LVU1694
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5415              		.loc 1 2293 14 is_stmt 0 view .LVU1695
 5416 02ca 2C2A     		cmp	r2, #44
 5417 02cc 00F03681 		beq	.L687
2296:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5418              		.loc 1 2296 6 is_stmt 1 view .LVU1696
 5419              	.LVL585:
 5420              	.LBB424:
 5421              	.LBI424:
 407:src/display.c ****   if (res) *res++ = ch;
 5422              		.loc 1 407 14 view .LVU1697
 5423              	.LBB425:
ARM GAS  /tmp/ccpF0v4D.s 			page 184


 408:src/display.c ****   else	set_dig(base, ch);
 5424              		.loc 1 408 3 view .LVU1698
 408:src/display.c ****   else	set_dig(base, ch);
 5425              		.loc 1 408 6 is_stmt 0 view .LVU1699
 5426 02d0 002C     		cmp	r4, #0
 5427 02d2 00F04281 		beq	.L570
 408:src/display.c ****   else	set_dig(base, ch);
 5428              		.loc 1 408 12 is_stmt 1 view .LVU1700
 5429              	.LVL586:
 408:src/display.c ****   else	set_dig(base, ch);
 5430              		.loc 1 408 19 is_stmt 0 view .LVU1701
 5431 02d6 04F8012B 		strb	r2, [r4], #1
 5432              	.LVL587:
 5433              	.L571:
 410:src/display.c **** }
 5434              		.loc 1 410 3 is_stmt 1 view .LVU1702
 410:src/display.c **** }
 5435              		.loc 1 410 3 is_stmt 0 view .LVU1703
 5436              	.LBE425:
 5437              	.LBE424:
2297:src/display.c **** 	  }
 5438              		.loc 1 2297 6 is_stmt 1 view .LVU1704
2290:src/display.c **** 	  if (c == '.') {
 5439              		.loc 1 2290 18 is_stmt 0 view .LVU1705
 5440 02da 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
 5441              	.LVL588:
2297:src/display.c **** 	  }
 5442              		.loc 1 2297 8 view .LVU1706
 5443 02de 0AF1090A 		add	r10, r10, #9
 5444              	.LVL589:
2290:src/display.c **** 	  if (c == '.') {
 5445              		.loc 1 2290 53 is_stmt 1 view .LVU1707
2290:src/display.c **** 	  if (c == '.') {
 5446              		.loc 1 2290 12 view .LVU1708
2290:src/display.c **** 	  if (c == '.') {
 5447              		.loc 1 2290 2 is_stmt 0 view .LVU1709
 5448 02e2 12B1     		cbz	r2, .L562
2290:src/display.c **** 	  if (c == '.') {
 5449              		.loc 1 2290 31 discriminator 3 view .LVU1710
 5450 02e4 BAF16B0F 		cmp	r10, #107
 5451 02e8 ECDD     		ble	.L572
 5452              	.LVL590:
 5453              	.L562:
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5454              		.loc 1 2310 2 is_stmt 1 view .LVU1711
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5455              		.loc 1 2310 5 is_stmt 0 view .LVU1712
 5456 02ea BBF1000F 		cmp	fp, #0
 5457 02ee 40F00D81 		bne	.L688
 5458              	.L573:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5459              		.loc 1 2313 2 is_stmt 1 view .LVU1713
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5460              		.loc 1 2313 5 is_stmt 0 view .LVU1714
 5461 02f2 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5462 02f6 2E2B     		cmp	r3, #46
 5463 02f8 00F01281 		beq	.L689
ARM GAS  /tmp/ccpF0v4D.s 			page 185


 5464              	.LVL591:
 5465              	.L574:
2315:src/display.c ****       }
 5466              		.loc 1 2315 2 is_stmt 1 view .LVU1715
2315:src/display.c ****       }
 5467              		.loc 1 2315 18 is_stmt 0 view .LVU1716
 5468 02fc 019B     		ldr	r3, [sp, #4]
 5469 02fe 1E60     		str	r6, [r3]
 5470              	.LVL592:
 5471              	.L453:
2316:src/display.c **** 
 5472              		.loc 1 2316 7 view .LVU1717
 5473 0300 27B0     		add	sp, sp, #156
 5474              		.cfi_remember_state
 5475              		.cfi_def_cfa_offset 36
 5476              		@ sp needed
 5477 0302 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5478              	.LVL593:
 5479              	.L461:
 5480              		.cfi_restore_state
2015:src/display.c **** 
 5481              		.loc 1 2015 4 is_stmt 1 view .LVU1718
 5482 0306 3946     		mov	r1, r7
 5483 0308 2846     		mov	r0, r5
 5484 030a FFF7FEFF 		bl	decNumberToString
 5485              	.LVL594:
 5486 030e ABE6     		b	.L463
 5487              	.LVL595:
 5488              	.L454:
1973:src/display.c **** 	    if (State2.hms) {
 5489              		.loc 1 1973 4 view .LVU1719
1973:src/display.c **** 	    if (State2.hms) {
 5490              		.loc 1 1973 25 is_stmt 0 view .LVU1720
 5491 0310 C64B     		ldr	r3, .L697
 5492 0312 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5493              		.loc 1 1973 22 view .LVU1721
 5494 0314 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5495              		.loc 1 1973 25 view .LVU1722
 5496 0316 01F00201 		and	r1, r1, #2
1973:src/display.c **** 	    if (State2.hms) {
 5497              		.loc 1 1973 22 view .LVU1723
 5498 031a 1143     		orrs	r1, r1, r2
 5499 031c 7FF47FAE 		bne	.L457
1974:src/display.c **** 	      set_x_hms(z, res);
 5500              		.loc 1 1974 6 is_stmt 1 view .LVU1724
1974:src/display.c **** 	      set_x_hms(z, res);
 5501              		.loc 1 1974 10 is_stmt 0 view .LVU1725
 5502 0320 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1974:src/display.c **** 	      set_x_hms(z, res);
 5503              		.loc 1 1974 9 view .LVU1726
 5504 0322 DF07     		lsls	r7, r3, #31
 5505 0324 00F1C682 		bmi	.L690
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5506              		.loc 1 1978 11 is_stmt 1 view .LVU1727
1978:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/ccpF0v4D.s 			page 186


 5507              		.loc 1 1978 15 is_stmt 0 view .LVU1728
 5508 0328 C14B     		ldr	r3, .L697+4
 5509 032a 1B68     		ldr	r3, [r3]
 5510 032c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5511              		.loc 1 1978 14 view .LVU1729
 5512 0330 9806     		lsls	r0, r3, #26
 5513 0332 7FF574AE 		bpl	.L457
1979:src/display.c **** 		return;
 5514              		.loc 1 1979 8 is_stmt 1 view .LVU1730
1979:src/display.c **** 		return;
 5515              		.loc 1 1979 12 is_stmt 0 view .LVU1731
 5516 0336 2146     		mov	r1, r4
 5517 0338 2846     		mov	r0, r5
 5518 033a FFF7FEFF 		bl	set_x_fract
 5519              	.LVL596:
1979:src/display.c **** 		return;
 5520              		.loc 1 1979 11 view .LVU1732
 5521 033e 0028     		cmp	r0, #0
 5522 0340 3FF46DAE 		beq	.L457
 5523 0344 DCE7     		b	.L453
 5524              	.LVL597:
 5525              	.L679:
2023:src/display.c **** 	  //  ALL mode: fill the display
 5526              		.loc 1 2023 38 discriminator 1 view .LVU1733
 5527 0346 1A68     		ldr	r2, [r3]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5528              		.loc 1 2023 35 discriminator 1 view .LVU1734
 5529 0348 089B     		ldr	r3, [sp, #32]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5530              		.loc 1 2023 23 discriminator 1 view .LVU1735
 5531 034a 9A42     		cmp	r2, r3
 5532 034c 0ADD     		ble	.L476
2027:src/display.c **** 
 5533              		.loc 1 2027 4 is_stmt 1 view .LVU1736
2029:src/display.c **** 	  int orig_mode = mode;
 5534              		.loc 1 2029 23 is_stmt 0 view .LVU1737
 5535 034e 042E     		cmp	r6, #4
2027:src/display.c **** 
 5536              		.loc 1 2027 7 view .LVU1738
 5537 0350 0793     		str	r3, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5538              		.loc 1 2029 2 is_stmt 1 view .LVU1739
2029:src/display.c **** 	  int orig_mode = mode;
 5539              		.loc 1 2029 23 is_stmt 0 view .LVU1740
 5540 0352 0BD0     		beq	.L477
 5541              	.L691:
2029:src/display.c **** 	  int orig_mode = mode;
 5542              		.loc 1 2029 43 discriminator 2 view .LVU1741
 5543 0354 052E     		cmp	r6, #5
 5544 0356 00F08F81 		beq	.L478
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5545              		.loc 1 1959 6 view .LVU1742
 5546 035a 0023     		movs	r3, #0
 5547 035c 0393     		str	r3, [sp, #12]
 5548 035e 9DE6     		b	.L579
 5549              	.LVL598:
ARM GAS  /tmp/ccpF0v4D.s 			page 187


 5550              	.L586:
2061:src/display.c **** 	else exp = s_to_i(q+1);
 5551              		.loc 1 2061 21 view .LVU1743
 5552 0360 0546     		mov	r5, r0
 5553 0362 B0E6     		b	.L479
 5554              	.LVL599:
 5555              	.L476:
2025:src/display.c **** 	else
 5556              		.loc 1 2025 4 is_stmt 1 view .LVU1744
2025:src/display.c **** 	else
 5557              		.loc 1 2025 25 is_stmt 0 view .LVU1745
 5558 0364 013A     		subs	r2, r2, #1
2029:src/display.c **** 	  int orig_mode = mode;
 5559              		.loc 1 2029 23 view .LVU1746
 5560 0366 042E     		cmp	r6, #4
2025:src/display.c **** 	else
 5561              		.loc 1 2025 7 view .LVU1747
 5562 0368 0792     		str	r2, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5563              		.loc 1 2029 2 is_stmt 1 view .LVU1748
2029:src/display.c **** 	  int orig_mode = mode;
 5564              		.loc 1 2029 23 is_stmt 0 view .LVU1749
 5565 036a F3D1     		bne	.L691
 5566              	.L477:
 5567              	.LBB427:
2030:src/display.c **** 
 5568              		.loc 1 2030 4 is_stmt 1 view .LVU1750
 5569              	.LVL600:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5570              		.loc 1 2032 4 view .LVU1751
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5571              		.loc 1 2032 11 is_stmt 0 view .LVU1752
 5572 036c 3246     		mov	r2, r6
 5573 036e 2846     		mov	r0, r5
 5574 0370 07A9     		add	r1, sp, #28
 5575 0372 FFF7FEFF 		bl	std_round_fix
 5576              	.LVL601:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5577              		.loc 1 2035 16 view .LVU1753
 5578 0376 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5579              		.loc 1 2032 11 view .LVU1754
 5580 0378 0646     		mov	r6, r0
 5581              	.LVL602:
2033:src/display.c **** 	    // allow zeros to be trimmed
 5582              		.loc 1 2033 4 is_stmt 1 view .LVU1755
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5583              		.loc 1 2035 6 view .LVU1756
2036:src/display.c **** 	    dd = *display_digits - 1;
 5584              		.loc 1 2036 4 view .LVU1757
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5585              		.loc 1 2035 16 is_stmt 0 view .LVU1758
 5586 037a 0393     		str	r3, [sp, #12]
 5587 037c 8EE6     		b	.L579
 5588              	.LVL603:
 5589              	.L685:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/ccpF0v4D.s 			page 188


 5590              		.loc 1 2035 16 view .LVU1759
 5591              	.LBE427:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5592              		.loc 1 2115 7 view .LVU1760
 5593 037e 4846     		mov	r0, r9
 5594              	.LVL604:
2116:src/display.c **** 	    mantissa[0] = '1';
 5595              		.loc 1 2116 41 view .LVU1761
 5596 0380 4FF03008 		mov	r8, #48
 5597              	.L507:
 5598              	.LVL605:
2116:src/display.c **** 	    mantissa[0] = '1';
 5599              		.loc 1 2116 47 is_stmt 1 discriminator 3 view .LVU1762
2116:src/display.c **** 	    mantissa[0] = '1';
 5600              		.loc 1 2116 36 discriminator 3 view .LVU1763
2116:src/display.c **** 	    mantissa[0] = '1';
 5601              		.loc 1 2116 41 is_stmt 0 discriminator 3 view .LVU1764
 5602 0384 00F8018B 		strb	r8, [r0], #1
 5603              	.LVL606:
2116:src/display.c **** 	    mantissa[0] = '1';
 5604              		.loc 1 2116 25 is_stmt 1 discriminator 3 view .LVU1765
2116:src/display.c **** 	    mantissa[0] = '1';
 5605              		.loc 1 2116 6 is_stmt 0 discriminator 3 view .LVU1766
 5606 0388 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5607 038c BCF1390F 		cmp	ip, #57
 5608 0390 F8D0     		beq	.L507
 5609              	.LVL607:
 5610              	.L578:
2117:src/display.c **** 	    exp++;
 5611              		.loc 1 2117 6 is_stmt 1 view .LVU1767
2117:src/display.c **** 	    exp++;
 5612              		.loc 1 2117 18 is_stmt 0 view .LVU1768
 5613 0392 3120     		movs	r0, #49
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5614              		.loc 1 2119 9 view .LVU1769
 5615 0394 012E     		cmp	r6, #1
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5616              		.loc 1 2118 9 view .LVU1770
 5617 0396 05F10105 		add	r5, r5, #1
 5618              	.LVL608:
2117:src/display.c **** 	    exp++;
 5619              		.loc 1 2117 18 view .LVU1771
 5620 039a 8DF85800 		strb	r0, [sp, #88]
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5621              		.loc 1 2118 6 is_stmt 1 view .LVU1772
 5622              	.LVL609:
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5623              		.loc 1 2119 6 view .LVU1773
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5624              		.loc 1 2119 9 is_stmt 0 view .LVU1774
 5625 039e 7FF40BAF 		bne	.L674
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5626              		.loc 1 2119 27 discriminator 1 view .LVU1775
 5627 03a2 5545     		cmp	r5, r10
 5628 03a4 C0F2DE80 		blt	.L509
2120:src/display.c **** 	      extra_digits = 0;
 5629              		.loc 1 2120 8 is_stmt 1 view .LVU1776
ARM GAS  /tmp/ccpF0v4D.s 			page 189


2120:src/display.c **** 	      extra_digits = 0;
 5630              		.loc 1 2120 28 is_stmt 0 view .LVU1777
 5631 03a8 A14B     		ldr	r3, .L697+4
 5632              	.LVL610:
2120:src/display.c **** 	      extra_digits = 0;
 5633              		.loc 1 2120 28 view .LVU1778
 5634 03aa 1B68     		ldr	r3, [r3]
 5635 03ac 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2120:src/display.c **** 	      extra_digits = 0;
 5636              		.loc 1 2120 37 view .LVU1779
 5637 03b0 D906     		lsls	r1, r3, #27
 5638              	.LVL611:
2120:src/display.c **** 	      extra_digits = 0;
 5639              		.loc 1 2120 37 view .LVU1780
 5640 03b2 40F1C982 		bpl	.L692
 5641              	.LVL612:
2131:src/display.c **** 
 5642              		.loc 1 2131 2 is_stmt 1 view .LVU1781
 5643 03b6 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 5644              		.loc 1 2131 9 is_stmt 0 view .LVU1782
 5645 03ba 09EB0E03 		add	r3, r9, lr
 5646              	.LVL613:
2131:src/display.c **** 
 5647              		.loc 1 2131 45 is_stmt 1 view .LVU1783
2120:src/display.c **** 	      extra_digits = 0;
 5648              		.loc 1 2120 37 is_stmt 0 view .LVU1784
 5649 03be 0326     		movs	r6, #3
2131:src/display.c **** 
 5650              		.loc 1 2131 2 view .LVU1785
 5651 03c0 0029     		cmp	r1, #0
 5652 03c2 7FF4FCAE 		bne	.L576
 5653              	.LVL614:
 5654              	.L515:
2233:src/display.c **** 	  case -1:
 5655              		.loc 1 2233 4 is_stmt 1 view .LVU1786
2233:src/display.c **** 	  case -1:
 5656              		.loc 1 2233 16 is_stmt 0 view .LVU1787
 5657 03c6 9B4B     		ldr	r3, .L697+8
 5658 03c8 83FB0513 		smull	r1, r3, r3, r5
 5659 03cc A3EBE573 		sub	r3, r3, r5, asr #31
 5660 03d0 03EB4303 		add	r3, r3, r3, lsl #1
 5661 03d4 EB1A     		subs	r3, r5, r3
 5662 03d6 0233     		adds	r3, r3, #2
 5663 03d8 042B     		cmp	r3, #4
 5664 03da 4FD8     		bhi	.L550
 5665 03dc DFE813F0 		tbh	[pc, r3, lsl #1]
 5666              	.L552:
 5667 03e0 FF01     		.2byte	(.L553-.L552)/2
 5668 03e2 ED01     		.2byte	(.L551-.L552)/2
 5669 03e4 4E00     		.2byte	(.L550-.L552)/2
 5670 03e6 FF01     		.2byte	(.L553-.L552)/2
 5671 03e8 ED01     		.2byte	(.L551-.L552)/2
 5672              	.LVL615:
 5673              		.p2align 1
 5674              	.L521:
2142:src/display.c **** 	    case -1:
ARM GAS  /tmp/ccpF0v4D.s 			page 190


 5675              		.loc 1 2142 6 is_stmt 1 view .LVU1788
2142:src/display.c **** 	    case -1:
 5676              		.loc 1 2142 32 is_stmt 0 view .LVU1789
 5677 03ea 9148     		ldr	r0, .L697+4
2142:src/display.c **** 	    case -1:
 5678              		.loc 1 2142 19 view .LVU1790
 5679 03ec 9149     		ldr	r1, .L697+8
2142:src/display.c **** 	    case -1:
 5680              		.loc 1 2142 32 view .LVU1791
 5681 03ee 0068     		ldr	r0, [r0]
2142:src/display.c **** 	    case -1:
 5682              		.loc 1 2142 19 view .LVU1792
 5683 03f0 81FB0561 		smull	r6, r1, r1, r5
2142:src/display.c **** 	    case -1:
 5684              		.loc 1 2142 32 view .LVU1793
 5685 03f4 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2142:src/display.c **** 	    case -1:
 5686              		.loc 1 2142 19 view .LVU1794
 5687 03f8 A1EBE571 		sub	r1, r1, r5, asr #31
 5688 03fc 01EB4101 		add	r1, r1, r1, lsl #1
 5689 0400 691A     		subs	r1, r5, r1
2142:src/display.c **** 	    case -1:
 5690              		.loc 1 2142 32 view .LVU1795
 5691 0402 C0F30010 		ubfx	r0, r0, #4, #1
2142:src/display.c **** 	    case -1:
 5692              		.loc 1 2142 24 view .LVU1796
 5693 0406 01FB00F1 		mul	r1, r1, r0
 5694 040a 0231     		adds	r1, r1, #2
 5695 040c 0429     		cmp	r1, #4
 5696 040e 00F25782 		bhi	.L593
 5697 0412 DFE811F0 		tbh	[pc, r1, lsl #1]
 5698              	.L525:
 5699 0416 1C02     		.2byte	(.L526-.L525)/2
 5700 0418 F101     		.2byte	(.L524-.L525)/2
 5701 041a 5502     		.2byte	(.L593-.L525)/2
 5702 041c 1C02     		.2byte	(.L526-.L525)/2
 5703 041e F101     		.2byte	(.L524-.L525)/2
 5704              	.LVL616:
 5705              		.p2align 1
 5706              	.L495:
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5707              		.loc 1 2098 4 is_stmt 1 view .LVU1797
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5708              		.loc 1 2098 7 is_stmt 0 view .LVU1798
 5709 0420 AA45     		cmp	r10, r5
 5710 0422 03DD     		ble	.L498
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5711              		.loc 1 2098 45 discriminator 1 view .LVU1799
 5712 0424 5342     		rsbs	r3, r2, #0
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5713              		.loc 1 2098 36 discriminator 1 view .LVU1800
 5714 0426 AB42     		cmp	r3, r5
 5715 0428 40F3DD81 		ble	.L499
 5716              	.L498:
2099:src/display.c **** 	  else {
 5717              		.loc 1 2099 6 is_stmt 1 view .LVU1801
2099:src/display.c **** 	  else {
ARM GAS  /tmp/ccpF0v4D.s 			page 191


 5718              		.loc 1 2099 26 is_stmt 0 view .LVU1802
 5719 042c 804B     		ldr	r3, .L697+4
 5720 042e 1B68     		ldr	r3, [r3]
 5721 0430 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2099:src/display.c **** 	  else {
 5722              		.loc 1 2099 35 view .LVU1803
 5723 0434 13F0100F 		tst	r3, #16
 5724 0438 14BF     		ite	ne
 5725 043a 0326     		movne	r6, #3
 5726              	.LVL617:
2099:src/display.c **** 	  else {
 5727              		.loc 1 2099 35 view .LVU1804
 5728 043c 0226     		moveq	r6, #2
 5729 043e 8CE6     		b	.L675
 5730              	.LVL618:
 5731              	.L683:
2099:src/display.c **** 	  else {
 5732              		.loc 1 2099 35 view .LVU1805
 5733 0440 013D     		subs	r5, r5, #1
 5734 0442 08EB0502 		add	r2, r8, r5
 5735              	.L488:
2078:src/display.c **** 	    exp--;
 5736              		.loc 1 2078 4 is_stmt 1 discriminator 1 view .LVU1806
2079:src/display.c **** 	  while (*++q == '0');
 5737              		.loc 1 2079 6 discriminator 1 view .LVU1807
 5738 0446 A2EB0805 		sub	r5, r2, r8
 5739              	.LVL619:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5740              		.loc 1 2080 10 discriminator 1 view .LVU1808
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5741              		.loc 1 2080 11 is_stmt 0 discriminator 1 view .LVU1809
 5742 044a 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5743              	.LVL620:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5744              		.loc 1 2080 4 discriminator 1 view .LVU1810
 5745 044e 302B     		cmp	r3, #48
 5746 0450 F9D0     		beq	.L488
2081:src/display.c **** 	    *p++ = *q++;
 5747              		.loc 1 2081 10 is_stmt 1 view .LVU1811
 5748 0452 A3F13002 		sub	r2, r3, #48
 5749 0456 092A     		cmp	r2, #9
 5750 0458 3FF678AE 		bhi	.L489
1944:src/display.c **** 	char *r;
 5751              		.loc 1 1944 8 is_stmt 0 view .LVU1812
 5752 045c 4A46     		mov	r2, r9
 5753              	.LVL621:
 5754              	.L490:
2082:src/display.c **** 	} else {
 5755              		.loc 1 2082 6 is_stmt 1 view .LVU1813
2082:src/display.c **** 	} else {
 5756              		.loc 1 2082 11 is_stmt 0 view .LVU1814
 5757 045e 02F8013B 		strb	r3, [r2], #1
 5758              	.LVL622:
2081:src/display.c **** 	    *p++ = *q++;
 5759              		.loc 1 2081 10 is_stmt 1 view .LVU1815
2081:src/display.c **** 	    *p++ = *q++;
 5760              		.loc 1 2081 11 is_stmt 0 view .LVU1816
ARM GAS  /tmp/ccpF0v4D.s 			page 192


 5761 0462 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2081:src/display.c **** 	    *p++ = *q++;
 5762              		.loc 1 2081 10 view .LVU1817
 5763 0466 A3F13001 		sub	r1, r3, #48
 5764 046a 0929     		cmp	r1, #9
 5765 046c F7D9     		bls	.L490
 5766 046e 6DE6     		b	.L489
 5767              	.LVL623:
 5768              	.L681:
2072:src/display.c **** 	  q++;
 5769              		.loc 1 2072 4 is_stmt 1 view .LVU1818
2073:src/display.c **** 	} else if (*q == '+')
 5770              		.loc 1 2073 4 view .LVU1819
2072:src/display.c **** 	  q++;
 5771              		.loc 1 2072 13 is_stmt 0 view .LVU1820
 5772 0470 0122     		movs	r2, #1
 5773 0472 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5774 0476 0292     		str	r2, [sp, #8]
2073:src/display.c **** 	} else if (*q == '+')
 5775              		.loc 1 2073 5 view .LVU1821
 5776 0478 9044     		add	r8, r8, r2
 5777              	.LVL624:
2073:src/display.c **** 	} else if (*q == '+')
 5778              		.loc 1 2073 5 view .LVU1822
 5779 047a 3AE6     		b	.L484
 5780              	.LVL625:
 5781              	.L550:
2073:src/display.c **** 	} else if (*q == '+')
 5782              		.loc 1 2073 5 view .LVU1823
 5783 047c 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 5784              		.loc 1 2233 16 view .LVU1824
 5785 047e 0126     		movs	r6, #1
1938:src/display.c **** 	int odig = 0;
 5786              		.loc 1 1938 15 view .LVU1825
 5787 0480 3946     		mov	r1, r7
 5788              	.LVL626:
 5789              	.L518:
2247:src/display.c **** 	  };
 5790              		.loc 1 2247 6 is_stmt 1 view .LVU1826
2248:src/display.c **** 	  // Falling through
 5791              		.loc 1 2248 5 view .LVU1827
2252:src/display.c **** 	  odig++;
 5792              		.loc 1 2252 4 view .LVU1828
2252:src/display.c **** 	  odig++;
 5793              		.loc 1 2252 15 is_stmt 0 view .LVU1829
 5794 0482 4B46     		mov	r3, r9
 5795              	.LVL627:
2252:src/display.c **** 	  odig++;
 5796              		.loc 1 2252 11 view .LVU1830
 5797 0484 8846     		mov	r8, r1
 5798 0486 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5799              	.LVL628:
2252:src/display.c **** 	  odig++;
 5800              		.loc 1 2252 11 view .LVU1831
 5801 048a 08F8020B 		strb	r0, [r8], #2
2253:src/display.c **** 	  *obp++ = '.';
ARM GAS  /tmp/ccpF0v4D.s 			page 193


 5802              		.loc 1 2253 4 is_stmt 1 view .LVU1832
2254:src/display.c **** 	  dd--;
 5803              		.loc 1 2254 4 view .LVU1833
 5804              	.LVL629:
2254:src/display.c **** 	  dd--;
 5805              		.loc 1 2254 11 is_stmt 0 view .LVU1834
 5806 048e 4FF02E0C 		mov	ip, #46
2256:src/display.c **** 	    *obp++ = *p++;
 5807              		.loc 1 2256 13 view .LVU1835
 5808 0492 901E     		subs	r0, r2, #2
2256:src/display.c **** 	    *obp++ = *p++;
 5809              		.loc 1 2256 10 view .LVU1836
 5810 0494 002A     		cmp	r2, #0
2254:src/display.c **** 	  dd--;
 5811              		.loc 1 2254 11 view .LVU1837
 5812 0496 81F801C0 		strb	ip, [r1, #1]
2255:src/display.c **** 	  while (dd-- >= 0) {
 5813              		.loc 1 2255 4 is_stmt 1 view .LVU1838
2256:src/display.c **** 	    *obp++ = *p++;
 5814              		.loc 1 2256 4 view .LVU1839
2256:src/display.c **** 	    *obp++ = *p++;
 5815              		.loc 1 2256 10 view .LVU1840
2256:src/display.c **** 	    *obp++ = *p++;
 5816              		.loc 1 2256 13 is_stmt 0 view .LVU1841
 5817 049a 0790     		str	r0, [sp, #28]
2256:src/display.c **** 	    *obp++ = *p++;
 5818              		.loc 1 2256 10 view .LVU1842
 5819 049c 40F31382 		ble	.L594
2256:src/display.c **** 	    *obp++ = *p++;
 5820              		.loc 1 2256 10 view .LVU1843
 5821 04a0 501C     		adds	r0, r2, #1
 5822 04a2 0131     		adds	r1, r1, #1
 5823 04a4 8144     		add	r9, r9, r0
 5824              	.LVL630:
 5825              	.L556:
2257:src/display.c **** 	    odig++;
 5826              		.loc 1 2257 6 is_stmt 1 view .LVU1844
2257:src/display.c **** 	    odig++;
 5827              		.loc 1 2257 13 is_stmt 0 view .LVU1845
 5828 04a6 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5829              	.LVL631:
2257:src/display.c **** 	    odig++;
 5830              		.loc 1 2257 13 view .LVU1846
 5831 04aa 01F8010F 		strb	r0, [r1, #1]!
2258:src/display.c **** 	  }
 5832              		.loc 1 2258 6 is_stmt 1 view .LVU1847
2256:src/display.c **** 	    *obp++ = *p++;
 5833              		.loc 1 2256 10 view .LVU1848
 5834 04ae 4B45     		cmp	r3, r9
 5835 04b0 F9D1     		bne	.L556
 5836 04b2 6FF00103 		mvn	r3, #1
 5837              	.LVL632:
2256:src/display.c **** 	    *obp++ = *p++;
 5838              		.loc 1 2256 10 is_stmt 0 view .LVU1849
 5839 04b6 9044     		add	r8, r8, r2
 5840 04b8 1644     		add	r6, r6, r2
 5841 04ba 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccpF0v4D.s 			page 194


2260:src/display.c **** 	}
 5842              		.loc 1 2260 13 view .LVU1850
 5843 04bc 4FF0010B 		mov	fp, #1
 5844              	.L528:
 5845              	.LVL633:
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5846              		.loc 1 2263 2 is_stmt 1 view .LVU1851
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5847              		.loc 1 2263 5 is_stmt 0 view .LVU1852
 5848 04c0 039B     		ldr	r3, [sp, #12]
 5849 04c2 002B     		cmp	r3, #0
 5850 04c4 3FF4E4AE 		beq	.L557
2264:src/display.c **** 	    obp--;
 5851              		.loc 1 2264 10 is_stmt 1 view .LVU1853
 5852 04c8 B845     		cmp	r8, r7
 5853 04ca 7FF6E1AE 		bls	.L557
 5854 04ce 4346     		mov	r3, r8
 5855 04d0 04E0     		b	.L558
 5856              	.LVL634:
 5857              	.L559:
2264:src/display.c **** 	    obp--;
 5858              		.loc 1 2264 10 is_stmt 0 view .LVU1854
 5859 04d2 9F42     		cmp	r7, r3
2266:src/display.c **** 	  }
 5860              		.loc 1 2266 10 view .LVU1855
 5861 04d4 06F1FF36 		add	r6, r6, #-1
 5862              	.LVL635:
2264:src/display.c **** 	    obp--;
 5863              		.loc 1 2264 10 is_stmt 1 view .LVU1856
 5864 04d8 3FF4D9AE 		beq	.L596
 5865              	.LVL636:
 5866              	.L558:
2265:src/display.c **** 	    odig--;
 5867              		.loc 1 2265 6 discriminator 1 view .LVU1857
 5868 04dc 9846     		mov	r8, r3
 5869              	.LVL637:
2265:src/display.c **** 	    odig--;
 5870              		.loc 1 2265 6 is_stmt 0 discriminator 1 view .LVU1858
 5871 04de 013B     		subs	r3, r3, #1
 5872              	.LVL638:
2266:src/display.c **** 	  }
 5873              		.loc 1 2266 6 is_stmt 1 discriminator 1 view .LVU1859
2264:src/display.c **** 	    obp--;
 5874              		.loc 1 2264 19 is_stmt 0 discriminator 1 view .LVU1860
 5875 04e0 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5876 04e4 302A     		cmp	r2, #48
 5877 04e6 F4D0     		beq	.L559
2264:src/display.c **** 	    obp--;
 5878              		.loc 1 2264 19 discriminator 1 view .LVU1861
 5879 04e8 D2E6     		b	.L557
 5880              	.LVL639:
 5881              	.L686:
2292:src/display.c **** 	  } else if (c == ',') {
 5882              		.loc 1 2292 6 is_stmt 1 view .LVU1862
2292:src/display.c **** 	  } else if (c == ',') {
 5883              		.loc 1 2292 12 is_stmt 0 view .LVU1863
 5884 04ea 2246     		mov	r2, r4
ARM GAS  /tmp/ccpF0v4D.s 			page 195


 5885              	.LVL640:
2292:src/display.c **** 	  } else if (c == ',') {
 5886              		.loc 1 2292 12 view .LVU1864
 5887 04ec 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5888 04f0 AAF10900 		sub	r0, r10, #9
 5889 04f4 FFF7FEFF 		bl	set_decimal
 5890              	.LVL641:
 5891 04f8 0446     		mov	r4, r0
 5892              	.LVL642:
 5893              	.L566:
2290:src/display.c **** 	  if (c == '.') {
 5894              		.loc 1 2290 53 is_stmt 1 view .LVU1865
2290:src/display.c **** 	  if (c == '.') {
 5895              		.loc 1 2290 12 view .LVU1866
2290:src/display.c **** 	  if (c == '.') {
 5896              		.loc 1 2290 18 is_stmt 0 view .LVU1867
 5897 04fa 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
 5898              	.LVL643:
2290:src/display.c **** 	  if (c == '.') {
 5899              		.loc 1 2290 2 view .LVU1868
 5900 04fe 002A     		cmp	r2, #0
 5901 0500 7FF4E0AE 		bne	.L572
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5902              		.loc 1 2310 2 is_stmt 1 view .LVU1869
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5903              		.loc 1 2310 5 is_stmt 0 view .LVU1870
 5904 0504 BBF1000F 		cmp	fp, #0
 5905 0508 3FF4F3AE 		beq	.L573
 5906              	.LVL644:
 5907              	.L688:
2311:src/display.c **** #endif
 5908              		.loc 1 2311 4 is_stmt 1 view .LVU1871
 5909 050c 2846     		mov	r0, r5
 5910 050e 2246     		mov	r2, r4
 5911              	.LVL645:
2311:src/display.c **** #endif
 5912              		.loc 1 2311 4 is_stmt 0 view .LVU1872
 5913 0510 0021     		movs	r1, #0
 5914 0512 FFF7FEFF 		bl	set_exp
 5915              	.LVL646:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5916              		.loc 1 2313 2 is_stmt 1 view .LVU1873
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5917              		.loc 1 2313 5 is_stmt 0 view .LVU1874
 5918 0516 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5919 051a 2E2B     		cmp	r3, #46
 5920 051c 7FF4EEAE 		bne	.L574
 5921              	.L689:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5922              		.loc 1 2313 21 discriminator 1 view .LVU1875
 5923 0520 002C     		cmp	r4, #0
 5924 0522 7FF4EBAE 		bne	.L574
2314:src/display.c **** 	*display_digits = odig;
 5925              		.loc 1 2314 4 is_stmt 1 view .LVU1876
2314:src/display.c **** 	*display_digits = odig;
 5926              		.loc 1 2314 33 is_stmt 0 view .LVU1877
 5927 0526 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccpF0v4D.s 			page 196


 5928 0528 1868     		ldr	r0, [r3]
2314:src/display.c **** 	*display_digits = odig;
 5929              		.loc 1 2314 4 view .LVU1878
 5930 052a 434B     		ldr	r3, .L697+12
2314:src/display.c **** 	*display_digits = odig;
 5931              		.loc 1 2314 33 view .LVU1879
 5932 052c 0138     		subs	r0, r0, #1
2314:src/display.c **** 	*display_digits = odig;
 5933              		.loc 1 2314 4 view .LVU1880
 5934 052e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5935 0530 2246     		mov	r2, r4
 5936 0532 00EBC000 		add	r0, r0, r0, lsl #3
 5937 0536 FFF7FEFF 		bl	set_decimal
 5938              	.LVL647:
 5939 053a DFE6     		b	.L574
 5940              	.LVL648:
 5941              	.L687:
2294:src/display.c **** 	  } else {
 5942              		.loc 1 2294 6 is_stmt 1 view .LVU1881
2294:src/display.c **** 	  } else {
 5943              		.loc 1 2294 12 is_stmt 0 view .LVU1882
 5944 053c 3F4B     		ldr	r3, .L697+16
 5945 053e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5946              	.LVL649:
 5947              	.LBB428:
 5948              	.LBI428:
 367:src/display.c ****   if (sep == SEP_NONE)
 5949              		.loc 1 367 14 is_stmt 1 view .LVU1883
 5950              	.LBB429:
 368:src/display.c ****     return res;
 5951              		.loc 1 368 3 view .LVU1884
 368:src/display.c ****     return res;
 5952              		.loc 1 368 6 is_stmt 0 view .LVU1885
 5953 0540 0029     		cmp	r1, #0
 5954 0542 DAD0     		beq	.L566
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5955              		.loc 1 370 3 is_stmt 1 view .LVU1886
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5956              		.loc 1 370 6 is_stmt 0 view .LVU1887
 5957 0544 002C     		cmp	r4, #0
 5958 0546 00F0C181 		beq	.L568
 371:src/display.c ****     else *res++ = '.';
 5959              		.loc 1 371 5 is_stmt 1 view .LVU1888
 371:src/display.c ****     else *res++ = '.';
 5960              		.loc 1 371 8 is_stmt 0 view .LVU1889
 5961 054a 0129     		cmp	r1, #1
 371:src/display.c ****     else *res++ = '.';
 5962              		.loc 1 371 27 is_stmt 1 view .LVU1890
 5963              	.LVL650:
 372:src/display.c ****   } else {
 5964              		.loc 1 372 17 is_stmt 0 view .LVU1891
 5965 054c 16BF     		itet	ne
 5966 054e 2E23     		movne	r3, #46
 371:src/display.c ****     else *res++ = '.';
 5967              		.loc 1 371 34 view .LVU1892
 5968 0550 04F8012B 		strbeq	r2, [r4], #1
 5969              	.LVL651:
ARM GAS  /tmp/ccpF0v4D.s 			page 197


 372:src/display.c ****   } else {
 5970              		.loc 1 372 10 is_stmt 1 view .LVU1893
 372:src/display.c ****   } else {
 5971              		.loc 1 372 17 is_stmt 0 view .LVU1894
 5972 0554 04F8013B 		strbne	r3, [r4], #1
 5973              	.LVL652:
 372:src/display.c ****   } else {
 5974              		.loc 1 372 17 view .LVU1895
 5975 0558 CFE7     		b	.L566
 5976              	.LVL653:
 5977              	.L570:
 372:src/display.c ****   } else {
 5978              		.loc 1 372 17 view .LVU1896
 5979              	.LBE429:
 5980              	.LBE428:
 5981              	.LBB431:
 5982              	.LBB426:
 409:src/display.c ****   return res;
 5983              		.loc 1 409 8 is_stmt 1 view .LVU1897
 5984 055a 1146     		mov	r1, r2
 5985 055c 5046     		mov	r0, r10
 5986 055e FFF7FEFF 		bl	set_dig
 5987              	.LVL654:
 409:src/display.c ****   return res;
 5988              		.loc 1 409 8 is_stmt 0 view .LVU1898
 5989 0562 BAE6     		b	.L571
 5990              	.LVL655:
 5991              	.L509:
 409:src/display.c ****   return res;
 5992              		.loc 1 409 8 view .LVU1899
 5993              	.LBE426:
 5994              	.LBE431:
2131:src/display.c **** 
 5995              		.loc 1 2131 2 is_stmt 1 view .LVU1900
2131:src/display.c **** 
 5996              		.loc 1 2131 45 view .LVU1901
2131:src/display.c **** 
 5997              		.loc 1 2131 2 is_stmt 0 view .LVU1902
 5998 0564 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 5999 0568 0029     		cmp	r1, #0
 6000 056a 7FF428AE 		bne	.L576
 6001              	.LVL656:
 6002              	.L516:
2196:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6003              		.loc 1 2196 4 is_stmt 1 view .LVU1903
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6004              		.loc 1 2197 4 view .LVU1904
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6005              		.loc 1 2197 7 is_stmt 0 view .LVU1905
 6006 056e 002D     		cmp	r5, #0
 6007 0570 C0F2F480 		blt	.L539
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6008              		.loc 1 2197 7 view .LVU1906
 6009 0574 6B1C     		adds	r3, r5, #1
2199:src/display.c **** 		*obp++ = ',';
 6010              		.loc 1 2199 31 view .LVU1907
 6011 0576 DFF8BCE0 		ldr	lr, .L697+8
ARM GAS  /tmp/ccpF0v4D.s 			page 198


 6012 057a 0493     		str	r3, [sp, #16]
 6013 057c 09EB030C 		add	ip, r9, r3
2133:src/display.c **** 	switch (mode) {
 6014              		.loc 1 2133 4 view .LVU1908
 6015 0580 4E46     		mov	r6, r9
1938:src/display.c **** 	int odig = 0;
 6016              		.loc 1 1938 15 view .LVU1909
 6017 0582 3846     		mov	r0, r7
 6018 0584 05E0     		b	.L540
 6019              	.LVL657:
 6020              	.L543:
2200:src/display.c **** 	      *obp++ = *p++;
 6021              		.loc 1 2200 3 is_stmt 1 view .LVU1910
2199:src/display.c **** 		*obp++ = ',';
 6022              		.loc 1 2199 18 is_stmt 0 view .LVU1911
 6023 0586 0229     		cmp	r1, #2
2200:src/display.c **** 	      *obp++ = *p++;
 6024              		.loc 1 2200 10 view .LVU1912
 6025 0588 05BF     		ittet	eq
 6026 058a 2C23     		moveq	r3, #44
 6027 058c 4370     		strbeq	r3, [r0, #1]
2201:src/display.c **** 	      odig++;
 6028              		.loc 1 2201 12 view .LVU1913
 6029 058e 0130     		addne	r0, r0, #1
 6030              	.LVL658:
2200:src/display.c **** 	      *obp++ = *p++;
 6031              		.loc 1 2200 7 view .LVU1914
 6032 0590 0230     		addeq	r0, r0, #2
 6033              	.LVL659:
 6034              	.L540:
2201:src/display.c **** 	      odig++;
 6035              		.loc 1 2201 8 is_stmt 1 discriminator 2 view .LVU1915
2201:src/display.c **** 	      odig++;
 6036              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1916
 6037 0592 16F8013B 		ldrb	r3, [r6], #1	@ zero_extendqisi2
 6038              	.LVL660:
2199:src/display.c **** 		*obp++ = ',';
 6039              		.loc 1 2199 8 is_stmt 1 discriminator 2 view .LVU1917
2201:src/display.c **** 	      odig++;
 6040              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1918
 6041 0596 0370     		strb	r3, [r0]
2202:src/display.c **** 	    }
 6042              		.loc 1 2202 8 is_stmt 1 discriminator 2 view .LVU1919
 6043              	.LVL661:
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6044              		.loc 1 2198 24 discriminator 2 view .LVU1920
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6045              		.loc 1 2198 16 discriminator 2 view .LVU1921
2199:src/display.c **** 		*obp++ = ',';
 6046              		.loc 1 2199 31 is_stmt 0 discriminator 2 view .LVU1922
 6047 0598 A9EB0603 		sub	r3, r9, r6
 6048 059c 2B44     		add	r3, r3, r5
 6049 059e 8EFB0381 		smull	r8, r1, lr, r3
 6050 05a2 A1EBE371 		sub	r1, r1, r3, asr #31
 6051 05a6 01EB4101 		add	r1, r1, r1, lsl #1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6052              		.loc 1 2198 6 discriminator 2 view .LVU1923
ARM GAS  /tmp/ccpF0v4D.s 			page 199


 6053 05aa B445     		cmp	ip, r6
2199:src/display.c **** 		*obp++ = ',';
 6054              		.loc 1 2199 31 discriminator 2 view .LVU1924
 6055 05ac A3EB0101 		sub	r1, r3, r1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6056              		.loc 1 2198 6 discriminator 2 view .LVU1925
 6057 05b0 E9D1     		bne	.L543
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6058              		.loc 1 2204 13 view .LVU1926
 6059 05b2 2E23     		movs	r3, #46
2205:src/display.c **** 	      *obp++ = *p++;
 6060              		.loc 1 2205 6 view .LVU1927
 6061 05b4 002A     		cmp	r2, #0
 6062 05b6 049E     		ldr	r6, [sp, #16]
 6063              	.LVL662:
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6064              		.loc 1 2204 6 is_stmt 1 view .LVU1928
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6065              		.loc 1 2204 13 is_stmt 0 view .LVU1929
 6066 05b8 4370     		strb	r3, [r0, #1]
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6067              		.loc 1 2204 10 view .LVU1930
 6068 05ba 00F10208 		add	r8, r0, #2
 6069              	.LVL663:
2205:src/display.c **** 	      *obp++ = *p++;
 6070              		.loc 1 2205 6 is_stmt 1 view .LVU1931
2205:src/display.c **** 	      *obp++ = *p++;
 6071              		.loc 1 2205 16 view .LVU1932
2205:src/display.c **** 	      *obp++ = *p++;
 6072              		.loc 1 2205 6 is_stmt 0 view .LVU1933
 6073 05be 7FF77FAF 		ble	.L528
 6074 05c2 0130     		adds	r0, r0, #1
 6075 05c4 0CEB0201 		add	r1, ip, r2
 6076              	.LVL664:
 6077              	.L544:
2206:src/display.c **** 	      odig++;
 6078              		.loc 1 2206 8 is_stmt 1 discriminator 4 view .LVU1934
2206:src/display.c **** 	      odig++;
 6079              		.loc 1 2206 15 is_stmt 0 discriminator 4 view .LVU1935
 6080 05c8 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6081              	.LVL665:
2206:src/display.c **** 	      odig++;
 6082              		.loc 1 2206 15 discriminator 4 view .LVU1936
 6083 05cc 00F8013F 		strb	r3, [r0, #1]!
2207:src/display.c **** 	    }
 6084              		.loc 1 2207 8 is_stmt 1 discriminator 4 view .LVU1937
2205:src/display.c **** 	      *obp++ = *p++;
 6085              		.loc 1 2205 43 discriminator 4 view .LVU1938
2205:src/display.c **** 	      *obp++ = *p++;
 6086              		.loc 1 2205 16 discriminator 4 view .LVU1939
2205:src/display.c **** 	      *obp++ = *p++;
 6087              		.loc 1 2205 6 is_stmt 0 discriminator 4 view .LVU1940
 6088 05d0 6145     		cmp	r1, ip
 6089 05d2 F9D1     		bne	.L544
 6090 05d4 049B     		ldr	r3, [sp, #16]
 6091 05d6 1344     		add	r3, r3, r2
 6092 05d8 9044     		add	r8, r8, r2
ARM GAS  /tmp/ccpF0v4D.s 			page 200


 6093              	.LVL666:
2205:src/display.c **** 	      *obp++ = *p++;
 6094              		.loc 1 2205 6 discriminator 4 view .LVU1941
 6095 05da 1E46     		mov	r6, r3
 6096 05dc 70E7     		b	.L528
 6097              	.LVL667:
 6098              	.L676:
2001:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6099              		.loc 1 2001 4 is_stmt 1 view .LVU1942
 6100 05de 184A     		ldr	r2, .L697+20
 6101 05e0 2946     		mov	r1, r5
 6102 05e2 2846     		mov	r0, r5
 6103 05e4 FFF7FEFF 		bl	decNumberNormalize
 6104              	.LVL668:
2002:src/display.c **** 	  z->exponent = 0;
 6105              		.loc 1 2002 4 view .LVU1943
2002:src/display.c **** 	  z->exponent = 0;
 6106              		.loc 1 2002 22 is_stmt 0 view .LVU1944
 6107 05e8 D5E90023 		ldrd	r2, r3, [r5]
 6108 05ec 03EB0209 		add	r9, r3, r2
2003:src/display.c **** 	}
 6109              		.loc 1 2003 16 view .LVU1945
 6110 05f0 C5F804B0 		str	fp, [r5, #4]
2002:src/display.c **** 	  z->exponent = 0;
 6111              		.loc 1 2002 8 view .LVU1946
 6112 05f4 09F1FF39 		add	r9, r9, #-1
 6113              	.LVL669:
2003:src/display.c **** 	}
 6114              		.loc 1 2003 4 is_stmt 1 view .LVU1947
 6115 05f8 22E5     		b	.L460
 6116              	.LVL670:
 6117              	.L684:
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6118              		.loc 1 2091 6 view .LVU1948
2092:src/display.c **** 	      *p++ = *q++;
 6119              		.loc 1 2092 13 is_stmt 0 view .LVU1949
 6120 05fa 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6121              		.loc 1 2092 12 view .LVU1950
 6122 05fe A3F13002 		sub	r2, r3, #48
 6123 0602 092A     		cmp	r2, #9
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6124              		.loc 1 2091 7 view .LVU1951
 6125 0604 08F10108 		add	r8, r8, #1
 6126              	.LVL671:
2092:src/display.c **** 	      *p++ = *q++;
 6127              		.loc 1 2092 6 is_stmt 1 view .LVU1952
2092:src/display.c **** 	      *p++ = *q++;
 6128              		.loc 1 2092 12 view .LVU1953
 6129 0608 3FF6A0AD 		bhi	.L489
 6130              	.LVL672:
 6131              	.L494:
2093:src/display.c **** 	  }
 6132              		.loc 1 2093 8 view .LVU1954
2093:src/display.c **** 	  }
 6133              		.loc 1 2093 13 is_stmt 0 view .LVU1955
 6134 060c 01F8013B 		strb	r3, [r1], #1
ARM GAS  /tmp/ccpF0v4D.s 			page 201


 6135              	.LVL673:
2092:src/display.c **** 	      *p++ = *q++;
 6136              		.loc 1 2092 12 is_stmt 1 view .LVU1956
2092:src/display.c **** 	      *p++ = *q++;
 6137              		.loc 1 2092 13 is_stmt 0 view .LVU1957
 6138 0610 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6139              		.loc 1 2092 12 view .LVU1958
 6140 0614 A3F13002 		sub	r2, r3, #48
 6141 0618 092A     		cmp	r2, #9
 6142 061a F7D9     		bls	.L494
 6143 061c 96E5     		b	.L489
 6144              	.LVL674:
 6145              	.L682:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6146              		.loc 1 2075 4 is_stmt 1 view .LVU1959
1958:src/display.c **** 	int trimzeros = 0;
 6147              		.loc 1 1958 6 is_stmt 0 view .LVU1960
 6148 061e 0022     		movs	r2, #0
 6149 0620 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6150 0624 0292     		str	r2, [sp, #8]
2075:src/display.c **** 	for (; *q == '0'; q++);
 6151              		.loc 1 2075 5 view .LVU1961
 6152 0626 08F10108 		add	r8, r8, #1
 6153              	.LVL675:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6154              		.loc 1 2075 5 view .LVU1962
 6155 062a 62E5     		b	.L484
 6156              	.L698:
 6157              		.align	2
 6158              	.L697:
 6159 062c 00000000 		.word	StateWhileOn
 6160 0630 00000000 		.word	main_ram
 6161 0634 56555555 		.word	1431655766
 6162 0638 00000000 		.word	.LANCHOR1
 6163 063c 00000000 		.word	.LANCHOR0
 6164 0640 00000000 		.word	Ctx
 6165              	.LVL676:
 6166              	.L677:
2009:src/display.c **** 	    x[0] = '-';
 6167              		.loc 1 2009 34 discriminator 1 view .LVU1963
 6168 0644 6B20     		movs	r0, #107
 6169 0646 FFF7FEFF 		bl	get_user_flag
 6170              	.LVL677:
2009:src/display.c **** 	    x[0] = '-';
 6171              		.loc 1 2009 31 discriminator 1 view .LVU1964
 6172 064a 0028     		cmp	r0, #0
 6173 064c 3FF409AD 		beq	.L462
2010:src/display.c **** 	    x[1] = '0';
 6174              		.loc 1 2010 6 is_stmt 1 view .LVU1965
2011:src/display.c **** 	  } else
 6175              		.loc 1 2011 6 view .LVU1966
2010:src/display.c **** 	    x[1] = '0';
 6176              		.loc 1 2010 11 is_stmt 0 view .LVU1967
 6177 0650 43F22D03 		movw	r3, #12333
 6178 0654 ADF82430 		strh	r3, [sp, #36]	@ movhi
2011:src/display.c **** 	  } else
ARM GAS  /tmp/ccpF0v4D.s 			page 202


 6179              		.loc 1 2011 11 view .LVU1968
 6180 0658 06E5     		b	.L463
 6181              	.LVL678:
 6182              	.L680:
2068:src/display.c **** 	  CLR_MANT_SIGN;
 6183              		.loc 1 2068 4 is_stmt 1 view .LVU1969
 6184              	.LBB432:
 6185              	.LBI432:
 314:src/display.c **** {
 6186              		.loc 1 314 13 view .LVU1970
 6187              	.LBB433:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6188              		.loc 1 316 3 view .LVU1971
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6189              		.loc 1 316 27 is_stmt 0 view .LVU1972
 6190 065a C44B     		ldr	r3, .L699
 6191 065c 4FF0200A 		mov	r10, #32
 317:src/display.c **** }
 6192              		.loc 1 317 3 view .LVU1973
 6193 0660 8220     		movs	r0, #130
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6194              		.loc 1 316 27 view .LVU1974
 6195 0662 83F800A0 		strb	r10, [r3]
 317:src/display.c **** }
 6196              		.loc 1 317 3 is_stmt 1 view .LVU1975
 6197 0666 FFF7FEFF 		bl	clr_dot
 6198              	.LVL679:
 6199              	.LBE433:
 6200              	.LBE432:
2069:src/display.c **** 	}
 6201              		.loc 1 2069 4 view .LVU1976
 6202              	.LBB434:
 6203              	.LBI434:
 302:src/display.c **** {
 6204              		.loc 1 302 13 view .LVU1977
 6205              	.LBB435:
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6206              		.loc 1 304 3 view .LVU1978
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6207              		.loc 1 304 25 is_stmt 0 view .LVU1979
 6208 066a C14B     		ldr	r3, .L699+4
 305:src/display.c **** }
 6209              		.loc 1 305 3 view .LVU1980
 6210 066c 8120     		movs	r0, #129
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6211              		.loc 1 304 25 view .LVU1981
 6212 066e 83F800A0 		strb	r10, [r3]
 305:src/display.c **** }
 6213              		.loc 1 305 3 is_stmt 1 view .LVU1982
 6214 0672 FFF7FEFF 		bl	clr_dot
 6215              	.LVL680:
 306:src/display.c **** 
 6216              		.loc 1 306 1 is_stmt 0 view .LVU1983
 6217 0676 32E5     		b	.L482
 6218              	.LVL681:
 6219              	.L478:
 306:src/display.c **** 
ARM GAS  /tmp/ccpF0v4D.s 			page 203


 6220              		.loc 1 306 1 view .LVU1984
 6221              	.LBE435:
 6222              	.LBE434:
 6223              	.LBB436:
2030:src/display.c **** 
 6224              		.loc 1 2030 4 is_stmt 1 view .LVU1985
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6225              		.loc 1 2032 4 view .LVU1986
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6226              		.loc 1 2032 11 is_stmt 0 view .LVU1987
 6227 0678 3246     		mov	r2, r6
 6228 067a 2846     		mov	r0, r5
 6229 067c 07A9     		add	r1, sp, #28
 6230 067e FFF7FEFF 		bl	std_round_fix
 6231              	.LVL682:
 6232              	.LBE436:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6233              		.loc 1 1959 6 view .LVU1988
 6234 0682 0023     		movs	r3, #0
 6235              	.LBB437:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6236              		.loc 1 2032 11 view .LVU1989
 6237 0684 0646     		mov	r6, r0
 6238              	.LVL683:
2033:src/display.c **** 	    // allow zeros to be trimmed
 6239              		.loc 1 2033 4 is_stmt 1 view .LVU1990
 6240              	.LBE437:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6241              		.loc 1 1959 6 is_stmt 0 view .LVU1991
 6242 0686 0393     		str	r3, [sp, #12]
 6243 0688 08E5     		b	.L579
 6244              	.LVL684:
 6245              	.L561:
2284:src/display.c **** 	      SET_MANT_SIGN;
 6246              		.loc 1 2284 6 is_stmt 1 view .LVU1992
2284:src/display.c **** 	      SET_MANT_SIGN;
 6247              		.loc 1 2284 9 is_stmt 0 view .LVU1993
 6248 068a BAF1000F 		cmp	r10, #0
 6249 068e 40F0E280 		bne	.L564
2285:src/display.c **** 	    else
 6250              		.loc 1 2285 8 is_stmt 1 view .LVU1994
 6251              	.LBB438:
 6252              	.LBI438:
 296:src/display.c **** {
 6253              		.loc 1 296 13 view .LVU1995
 6254              	.LBB439:
 298:src/display.c ****   set_dot(MANT_SIGN);
 6255              		.loc 1 298 3 view .LVU1996
 298:src/display.c ****   set_dot(MANT_SIGN);
 6256              		.loc 1 298 25 is_stmt 0 view .LVU1997
 6257 0692 B74A     		ldr	r2, .L699+4
 6258 0694 2D21     		movs	r1, #45
 299:src/display.c **** }
 6259              		.loc 1 299 3 view .LVU1998
 6260 0696 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 6261              		.loc 1 298 25 view .LVU1999
ARM GAS  /tmp/ccpF0v4D.s 			page 204


 6262 0698 1170     		strb	r1, [r2]
 299:src/display.c **** }
 6263              		.loc 1 299 3 is_stmt 1 view .LVU2000
 6264 069a FFF7FEFF 		bl	set_dot
 6265              	.LVL685:
 299:src/display.c **** }
 6266              		.loc 1 299 3 is_stmt 0 view .LVU2001
 6267              	.LBE439:
 6268              	.LBE438:
2290:src/display.c **** 	  if (c == '.') {
 6269              		.loc 1 2290 12 is_stmt 1 view .LVU2002
2290:src/display.c **** 	  if (c == '.') {
 6270              		.loc 1 2290 18 is_stmt 0 view .LVU2003
 6271 069e 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6272              	.LVL686:
2290:src/display.c **** 	  if (c == '.') {
 6273              		.loc 1 2290 2 view .LVU2004
 6274 06a2 002A     		cmp	r2, #0
 6275 06a4 7FF40CAE 		bne	.L563
 6276 06a8 1FE6     		b	.L562
 6277              	.LVL687:
 6278              	.L678:
2018:src/display.c **** 	  return;
 6279              		.loc 1 2018 4 is_stmt 1 view .LVU2005
 6280              	.LBB440:
 6281              	.LBI440:
1806:src/display.c **** 	const int dbl = is_dblmode();
 6282              		.loc 1 1806 19 view .LVU2006
 6283              	.LBB441:
1807:src/display.c **** 	char *p;
 6284              		.loc 1 1807 2 view .LVU2007
1807:src/display.c **** 	char *p;
 6285              		.loc 1 1807 18 is_stmt 0 view .LVU2008
 6286 06aa FFF7FEFF 		bl	is_dblmode
 6287              	.LVL688:
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6288              		.loc 1 1823 5 view .LVU2009
 6289 06ae 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6290 06b2 2D2B     		cmp	r3, #45
1807:src/display.c **** 	char *p;
 6291              		.loc 1 1807 18 view .LVU2010
 6292 06b4 0446     		mov	r4, r0
 6293              	.LVL689:
1808:src/display.c **** 	int i, j;
 6294              		.loc 1 1808 2 is_stmt 1 view .LVU2011
1809:src/display.c **** 	char *upper_str;
 6295              		.loc 1 1809 2 view .LVU2012
1810:src/display.c **** 	enum separator_modes separator_mode;
 6296              		.loc 1 1810 2 view .LVU2013
1811:src/display.c **** 	char decimal_mark;
 6297              		.loc 1 1811 2 view .LVU2014
1812:src/display.c **** 	char thousands_sep;
 6298              		.loc 1 1812 2 view .LVU2015
1813:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6299              		.loc 1 1813 2 view .LVU2016
1819:src/display.c **** #endif
 6300              		.loc 1 1819 2 view .LVU2017
ARM GAS  /tmp/ccpF0v4D.s 			page 205


1821:src/display.c **** 
 6301              		.loc 1 1821 2 view .LVU2018
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6302              		.loc 1 1823 2 view .LVU2019
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6303              		.loc 1 1823 5 is_stmt 0 view .LVU2020
 6304 06b6 00F01481 		beq	.L693
1836:src/display.c **** 
 6305              		.loc 1 1836 16 view .LVU2021
 6306 06ba 0026     		movs	r6, #0
 6307              	.LVL690:
 6308              	.L465:
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6309              		.loc 1 1838 2 is_stmt 1 view .LVU2022
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6310              		.loc 1 1838 6 is_stmt 0 view .LVU2023
 6311 06bc 0021     		movs	r1, #0
 6312 06be 3846     		mov	r0, r7
 6313 06c0 FFF7FEFF 		bl	find_char
 6314              	.LVL691:
1839:src/display.c **** 
 6315              		.loc 1 1839 2 is_stmt 1 view .LVU2024
1839:src/display.c **** 
 6316              		.loc 1 1839 23 is_stmt 0 view .LVU2025
 6317 06c4 C21B     		subs	r2, r0, r7
1839:src/display.c **** 
 6318              		.loc 1 1839 2 view .LVU2026
 6319 06c6 C2F12202 		rsb	r2, r2, #34
 6320 06ca 3021     		movs	r1, #48
 6321 06cc FFF7FEFF 		bl	xset
 6322              	.LVL692:
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6323              		.loc 1 1841 2 is_stmt 1 view .LVU2027
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6324              		.loc 1 1841 18 is_stmt 0 view .LVU2028
 6325 06d0 A84A     		ldr	r2, .L699+8
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6326              		.loc 1 1852 6 view .LVU2029
 6327 06d2 98F81430 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6328              		.loc 1 1841 5 view .LVU2030
 6329 06d6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1849:src/display.c **** 	}
 6330              		.loc 1 1849 18 view .LVU2031
 6331 06d8 002A     		cmp	r2, #0
 6332 06da 15BF     		itete	ne
 6333 06dc 4FF0020A 		movne	r10, #2
 6334 06e0 4FF02C08 		moveq	r8, #44
 6335 06e4 4FF02E08 		movne	r8, #46
 6336              	.LVL693:
1849:src/display.c **** 	}
 6337              		.loc 1 1849 18 view .LVU2032
 6338 06e8 2E25     		moveq	r5, #46
 6339              	.LVL694:
1849:src/display.c **** 	}
 6340              		.loc 1 1849 18 view .LVU2033
 6341 06ea 18BF     		it	ne
ARM GAS  /tmp/ccpF0v4D.s 			page 206


 6342 06ec 2C25     		movne	r5, #44
 6343              	.LVL695:
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6344              		.loc 1 1852 2 is_stmt 1 view .LVU2034
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6345              		.loc 1 1852 5 is_stmt 0 view .LVU2035
 6346 06ee 13F0380F 		tst	r3, #56
 6347 06f2 40F0B680 		bne	.L694
1879:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6348              		.loc 1 1879 4 is_stmt 1 view .LVU2036
 6349              	.LVL696:
1880:src/display.c **** 	  x[1] = decimal_mark;
 6350              		.loc 1 1880 4 view .LVU2037
 6351 06f6 1022     		movs	r2, #16
 6352 06f8 791C     		adds	r1, r7, #1
 6353 06fa B81C     		adds	r0, r7, #2
 6354 06fc FFF7FEFF 		bl	xcopy
 6355              	.LVL697:
1881:src/display.c **** 	  if (grouping) {
 6356              		.loc 1 1881 4 view .LVU2038
1883:src/display.c **** 	    x[5] = thousands_sep;
 6357              		.loc 1 1883 6 is_stmt 0 view .LVU2039
 6358 0700 0D22     		movs	r2, #13
 6359 0702 791D     		adds	r1, r7, #5
 6360 0704 B81D     		adds	r0, r7, #6
1881:src/display.c **** 	  if (grouping) {
 6361              		.loc 1 1881 9 view .LVU2040
 6362 0706 7D70     		strb	r5, [r7, #1]
1882:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6363              		.loc 1 1882 4 is_stmt 1 view .LVU2041
1883:src/display.c **** 	    x[5] = thousands_sep;
 6364              		.loc 1 1883 6 view .LVU2042
 6365 0708 FFF7FEFF 		bl	xcopy
 6366              	.LVL698:
1884:src/display.c **** 	    x += 9;
 6367              		.loc 1 1884 6 view .LVU2043
1885:src/display.c **** 	  }
 6368              		.loc 1 1885 8 is_stmt 0 view .LVU2044
 6369 070c 07F10905 		add	r5, r7, #9
 6370              	.LVL699:
1884:src/display.c **** 	    x += 9;
 6371              		.loc 1 1884 11 view .LVU2045
 6372 0710 87F80580 		strb	r8, [r7, #5]
1885:src/display.c **** 	  }
 6373              		.loc 1 1885 6 is_stmt 1 view .LVU2046
 6374              	.LVL700:
1888:src/display.c **** 	    if (exp < 0) {
 6375              		.loc 1 1888 4 view .LVU2047
1888:src/display.c **** 	    if (exp < 0) {
 6376              		.loc 1 1888 7 is_stmt 0 view .LVU2048
 6377 0714 002C     		cmp	r4, #0
 6378 0716 00F0E280 		beq	.L469
1889:src/display.c **** 	      x[9] = '-';
 6379              		.loc 1 1889 6 is_stmt 1 view .LVU2049
1889:src/display.c **** 	      x[9] = '-';
 6380              		.loc 1 1889 9 is_stmt 0 view .LVU2050
 6381 071a B9F1000F 		cmp	r9, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 207


1890:src/display.c **** 	      exp = -exp;
 6382              		.loc 1 1890 8 is_stmt 1 view .LVU2051
1891:src/display.c **** 	    }
 6383              		.loc 1 1891 8 view .LVU2052
1895:src/display.c **** 	    x[10] = '0' + j;
 6384              		.loc 1 1895 8 is_stmt 0 view .LVU2053
 6385 071e 964B     		ldr	r3, .L699+12
1897:src/display.c **** 	  }
 6386              		.loc 1 1897 18 view .LVU2054
 6387 0720 9649     		ldr	r1, .L699+16
1890:src/display.c **** 	      exp = -exp;
 6388              		.loc 1 1890 13 view .LVU2055
 6389 0722 B6BF     		itet	lt
 6390 0724 2D22     		movlt	r2, #45
1894:src/display.c **** 	    j = exp / 1000;
 6391              		.loc 1 1894 13 view .LVU2056
 6392 0726 2022     		movge	r2, #32
1891:src/display.c **** 	    }
 6393              		.loc 1 1891 12 view .LVU2057
 6394 0728 C9F10009 		rsblt	r9, r9, #0
 6395              	.LVL701:
1891:src/display.c **** 	    }
 6396              		.loc 1 1891 12 view .LVU2058
 6397 072c BA74     		strb	r2, [r7, #18]
1895:src/display.c **** 	    x[10] = '0' + j;
 6398              		.loc 1 1895 6 is_stmt 1 view .LVU2059
1895:src/display.c **** 	    x[10] = '0' + j;
 6399              		.loc 1 1895 8 is_stmt 0 view .LVU2060
 6400 072e A3FB0923 		umull	r2, r3, r3, r9
 6401 0732 9B09     		lsrs	r3, r3, #6
 6402              	.LVL702:
1896:src/display.c **** 	    exp -= 1000 * j;
 6403              		.loc 1 1896 6 is_stmt 1 view .LVU2061
1896:src/display.c **** 	    exp -= 1000 * j;
 6404              		.loc 1 1896 18 is_stmt 0 view .LVU2062
 6405 0734 03F13002 		add	r2, r3, #48
1897:src/display.c **** 	  }
 6406              		.loc 1 1897 10 view .LVU2063
 6407 0738 01FB0399 		mla	r9, r1, r3, r9
 6408              	.LVL703:
1896:src/display.c **** 	    exp -= 1000 * j;
 6409              		.loc 1 1896 12 view .LVU2064
 6410 073c FA74     		strb	r2, [r7, #19]
1897:src/display.c **** 	  }
 6411              		.loc 1 1897 6 is_stmt 1 view .LVU2065
 6412              	.LVL704:
 6413              	.L471:
1903:src/display.c **** 	  *x = 0;
 6414              		.loc 1 1903 4 view .LVU2066
 6415 073e 0B22     		movs	r2, #11
 6416 0740 2946     		mov	r1, r5
 6417 0742 07F10A00 		add	r0, r7, #10
 6418 0746 FFF7FEFF 		bl	xcopy
 6419              	.LVL705:
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6420              		.loc 1 1904 4 view .LVU2067
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
ARM GAS  /tmp/ccpF0v4D.s 			page 208


 6421              		.loc 1 1904 7 is_stmt 0 view .LVU2068
 6422 074a 0022     		movs	r2, #0
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6423              		.loc 1 1905 4 view .LVU2069
 6424 074c 4846     		mov	r0, r9
 6425 074e 0121     		movs	r1, #1
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6426              		.loc 1 1904 7 view .LVU2070
 6427 0750 7A72     		strb	r2, [r7, #9]
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6428              		.loc 1 1905 4 is_stmt 1 view .LVU2071
 6429 0752 BE1B     		subs	r6, r7, r6
 6430              	.LVL706:
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6431              		.loc 1 1905 4 is_stmt 0 view .LVU2072
 6432 0754 FFF7FEFF 		bl	set_exp
 6433              	.LVL707:
1906:src/display.c **** 	}
 6434              		.loc 1 1906 4 is_stmt 1 view .LVU2073
1906:src/display.c **** 	}
 6435              		.loc 1 1906 6 is_stmt 0 view .LVU2074
 6436 0758 0924     		movs	r4, #9
 6437              	.LVL708:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6438              		.loc 1 1909 11 is_stmt 1 view .LVU2075
 6439 075a 93E0     		b	.L472
 6440              	.LVL709:
 6441              	.L539:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6442              		.loc 1 1909 11 is_stmt 0 view .LVU2076
 6443              	.LBE441:
 6444              	.LBE440:
2210:src/display.c **** 	    odig++;
 6445              		.loc 1 2210 6 is_stmt 1 view .LVU2077
2211:src/display.c **** 	    *obp++ = '.';
 6446              		.loc 1 2211 6 view .LVU2078
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6447              		.loc 1 2212 6 view .LVU2079
2210:src/display.c **** 	    odig++;
 6448              		.loc 1 2210 13 is_stmt 0 view .LVU2080
 6449 075c 42F63063 		movw	r3, #11824
 6450 0760 ADF82430 		strh	r3, [sp, #36]	@ movhi
2213:src/display.c **** 	      *obp++ = '0';
 6451              		.loc 1 2213 6 is_stmt 1 view .LVU2081
 6452              	.LVL710:
2213:src/display.c **** 	      *obp++ = '0';
 6453              		.loc 1 2213 20 view .LVU2082
2213:src/display.c **** 	      *obp++ = '0';
 6454              		.loc 1 2213 6 is_stmt 0 view .LVU2083
 6455 0764 6B1C     		adds	r3, r5, #1
 6456              	.LVL711:
2213:src/display.c **** 	      *obp++ = '0';
 6457              		.loc 1 2213 6 view .LVU2084
 6458 0766 00F0F680 		beq	.L695
 6459 076a C5F10102 		rsb	r2, r5, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6460              		.loc 1 2212 10 view .LVU2085
ARM GAS  /tmp/ccpF0v4D.s 			page 209


 6461 076e 0DF12601 		add	r1, sp, #38
 6462              	.LVL712:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6463              		.loc 1 2212 10 view .LVU2086
 6464 0772 0798     		ldr	r0, [sp, #28]
 6465 0774 3A44     		add	r2, r2, r7
 6466 0776 0B46     		mov	r3, r1
 6467              	.LVL713:
2214:src/display.c **** 	      odig++;
 6468              		.loc 1 2214 15 view .LVU2087
 6469 0778 3026     		movs	r6, #48
 6470              	.LVL714:
 6471              	.L547:
2214:src/display.c **** 	      odig++;
 6472              		.loc 1 2214 8 is_stmt 1 discriminator 3 view .LVU2088
2214:src/display.c **** 	      odig++;
 6473              		.loc 1 2214 15 is_stmt 0 discriminator 3 view .LVU2089
 6474 077a 03F8016B 		strb	r6, [r3], #1
 6475              	.LVL715:
2215:src/display.c **** 	      dd--;
 6476              		.loc 1 2215 8 is_stmt 1 discriminator 3 view .LVU2090
2216:src/display.c **** 	    }
 6477              		.loc 1 2216 8 discriminator 3 view .LVU2091
2213:src/display.c **** 	      *obp++ = '0';
 6478              		.loc 1 2213 25 discriminator 3 view .LVU2092
2213:src/display.c **** 	      *obp++ = '0';
 6479              		.loc 1 2213 20 discriminator 3 view .LVU2093
2213:src/display.c **** 	      *obp++ = '0';
 6480              		.loc 1 2213 6 is_stmt 0 discriminator 3 view .LVU2094
 6481 077e 9342     		cmp	r3, r2
 6482 0780 FBD1     		bne	.L547
 6483 0782 4319     		adds	r3, r0, r5
 6484              	.LVL716:
2213:src/display.c **** 	      *obp++ = '0';
 6485              		.loc 1 2213 6 discriminator 3 view .LVU2095
 6486 0784 6FEA0508 		mvn	r8, r5
 6487 0788 0133     		adds	r3, r3, #1
 6488 078a 8844     		add	r8, r8, r1
 6489 078c 6E42     		rsbs	r6, r5, #0
 6490              	.L546:
 6491              	.LVL717:
2218:src/display.c **** 	      *obp++ = *p++;
 6492              		.loc 1 2218 12 is_stmt 1 view .LVU2096
2218:src/display.c **** 	      *obp++ = *p++;
 6493              		.loc 1 2218 15 is_stmt 0 view .LVU2097
 6494 078e 5A1E     		subs	r2, r3, #1
2218:src/display.c **** 	      *obp++ = *p++;
 6495              		.loc 1 2218 12 view .LVU2098
 6496 0790 002B     		cmp	r3, #0
2218:src/display.c **** 	      *obp++ = *p++;
 6497              		.loc 1 2218 15 view .LVU2099
 6498 0792 0792     		str	r2, [sp, #28]
2218:src/display.c **** 	      *obp++ = *p++;
 6499              		.loc 1 2218 12 view .LVU2100
 6500 0794 7FF794AE 		ble	.L528
 6501 0798 4344     		add	r3, r3, r8
 6502 079a 581E     		subs	r0, r3, #1
ARM GAS  /tmp/ccpF0v4D.s 			page 210


 6503 079c 08F1FF38 		add	r8, r8, #-1
 6504              	.LVL718:
 6505              	.L548:
2219:src/display.c **** 	      odig++;
 6506              		.loc 1 2219 8 is_stmt 1 view .LVU2101
2219:src/display.c **** 	      odig++;
 6507              		.loc 1 2219 15 is_stmt 0 view .LVU2102
 6508 07a0 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6509              	.LVL719:
2219:src/display.c **** 	      odig++;
 6510              		.loc 1 2219 15 view .LVU2103
 6511 07a4 08F8011F 		strb	r1, [r8, #1]!
2220:src/display.c **** 	    }
 6512              		.loc 1 2220 8 is_stmt 1 view .LVU2104
2218:src/display.c **** 	      *obp++ = *p++;
 6513              		.loc 1 2218 12 view .LVU2105
 6514 07a8 4045     		cmp	r0, r8
 6515 07aa F9D1     		bne	.L548
 6516              	.LVL720:
2218:src/display.c **** 	      *obp++ = *p++;
 6517              		.loc 1 2218 12 is_stmt 0 view .LVU2106
 6518 07ac 0136     		adds	r6, r6, #1
 6519 07ae 4FF0FF31 		mov	r1, #-1
 6520 07b2 1644     		add	r6, r6, r2
 6521 07b4 9846     		mov	r8, r3
 6522 07b6 0791     		str	r1, [sp, #28]
 6523 07b8 82E6     		b	.L528
 6524              	.LVL721:
 6525              	.L551:
2236:src/display.c **** 	    odig++;
 6526              		.loc 1 2236 6 is_stmt 1 view .LVU2107
2236:src/display.c **** 	    odig++;
 6527              		.loc 1 2236 13 is_stmt 0 view .LVU2108
 6528 07ba 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6529 07be 8DF82430 		strb	r3, [sp, #36]
2237:src/display.c **** 	    dd--;
 6530              		.loc 1 2237 6 is_stmt 1 view .LVU2109
 6531              	.LVL722:
2238:src/display.c **** 	    exp--;
 6532              		.loc 1 2238 6 view .LVU2110
2238:src/display.c **** 	    exp--;
 6533              		.loc 1 2238 8 is_stmt 0 view .LVU2111
 6534 07c2 013A     		subs	r2, r2, #1
2239:src/display.c **** 	  case -2:
 6535              		.loc 1 2239 6 is_stmt 1 view .LVU2112
2239:src/display.c **** 	  case -2:
 6536              		.loc 1 2239 9 is_stmt 0 view .LVU2113
 6537 07c4 013D     		subs	r5, r5, #1
 6538              	.LVL723:
2239:src/display.c **** 	  case -2:
 6539              		.loc 1 2239 9 view .LVU2114
 6540 07c6 0326     		movs	r6, #3
2236:src/display.c **** 	    odig++;
 6541              		.loc 1 2236 17 view .LVU2115
 6542 07c8 0DF15909 		add	r9, sp, #89
 6543              	.LVL724:
2236:src/display.c **** 	    odig++;
ARM GAS  /tmp/ccpF0v4D.s 			page 211


 6544              		.loc 1 2236 10 view .LVU2116
 6545 07cc 0DF12501 		add	r1, sp, #37
 6546              	.LVL725:
 6547              	.L554:
2242:src/display.c **** 	    odig++;
 6548              		.loc 1 2242 6 is_stmt 1 view .LVU2117
2242:src/display.c **** 	    odig++;
 6549              		.loc 1 2242 13 is_stmt 0 view .LVU2118
 6550 07d0 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6551              	.LVL726:
2242:src/display.c **** 	    odig++;
 6552              		.loc 1 2242 13 view .LVU2119
 6553 07d4 01F8013B 		strb	r3, [r1], #1
 6554              	.LVL727:
2243:src/display.c **** 	    dd--;
 6555              		.loc 1 2243 6 is_stmt 1 view .LVU2120
2244:src/display.c **** 	    exp--;
 6556              		.loc 1 2244 6 view .LVU2121
2244:src/display.c **** 	    exp--;
 6557              		.loc 1 2244 8 is_stmt 0 view .LVU2122
 6558 07d8 013A     		subs	r2, r2, #1
2245:src/display.c **** 	  case 0:
 6559              		.loc 1 2245 6 is_stmt 1 view .LVU2123
2245:src/display.c **** 	  case 0:
 6560              		.loc 1 2245 9 is_stmt 0 view .LVU2124
 6561 07da 013D     		subs	r5, r5, #1
 6562              	.LVL728:
2245:src/display.c **** 	  case 0:
 6563              		.loc 1 2245 9 view .LVU2125
 6564 07dc 51E6     		b	.L518
 6565              	.LVL729:
 6566              	.L553:
2245:src/display.c **** 	  case 0:
 6567              		.loc 1 2245 9 view .LVU2126
 6568 07de 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 6569              		.loc 1 2233 16 view .LVU2127
 6570 07e0 0226     		movs	r6, #2
1938:src/display.c **** 	int odig = 0;
 6571              		.loc 1 1938 15 view .LVU2128
 6572 07e2 3946     		mov	r1, r7
 6573 07e4 F4E7     		b	.L554
 6574              	.LVL730:
 6575              	.L499:
2101:src/display.c **** 	    /* We might have push the fixed decimals off the
 6576              		.loc 1 2101 6 is_stmt 1 view .LVU2129
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6577              		.loc 1 2105 6 view .LVU2130
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6578              		.loc 1 2105 23 is_stmt 0 view .LVU2131
 6579 07e6 5319     		adds	r3, r2, r5
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6580              		.loc 1 2105 9 view .LVU2132
 6581 07e8 9A45     		cmp	r10, r3
2106:src/display.c **** 	  }
 6582              		.loc 1 2106 8 is_stmt 1 view .LVU2133
2106:src/display.c **** 	  }
ARM GAS  /tmp/ccpF0v4D.s 			page 212


 6583              		.loc 1 2106 30 is_stmt 0 view .LVU2134
 6584 07ea DEBF     		ittt	le
 6585 07ec 0AF1FF32 		addle	r2, r10, #-1
2106:src/display.c **** 	  }
 6586              		.loc 1 2106 35 view .LVU2135
 6587 07f0 521B     		suble	r2, r2, r5
2106:src/display.c **** 	  }
 6588              		.loc 1 2106 11 view .LVU2136
 6589 07f2 0792     		strle	r2, [sp, #28]
 6590 07f4 2946     		mov	r1, r5
 6591 07f6 B1E4     		b	.L496
 6592              	.LVL731:
 6593              	.L524:
2145:src/display.c **** 	      odig++;
 6594              		.loc 1 2145 8 is_stmt 1 view .LVU2137
2145:src/display.c **** 	      odig++;
 6595              		.loc 1 2145 15 is_stmt 0 view .LVU2138
 6596 07f8 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6597 07fc 8DF82410 		strb	r1, [sp, #36]
2146:src/display.c **** 	      dd--;
 6598              		.loc 1 2146 8 is_stmt 1 view .LVU2139
 6599              	.LVL732:
2147:src/display.c **** 	      exp--;
 6600              		.loc 1 2147 8 view .LVU2140
2147:src/display.c **** 	      exp--;
 6601              		.loc 1 2147 10 is_stmt 0 view .LVU2141
 6602 0800 013A     		subs	r2, r2, #1
2148:src/display.c **** 	    case -2:
 6603              		.loc 1 2148 8 is_stmt 1 view .LVU2142
2148:src/display.c **** 	    case -2:
 6604              		.loc 1 2148 11 is_stmt 0 view .LVU2143
 6605 0802 013D     		subs	r5, r5, #1
 6606              	.LVL733:
2148:src/display.c **** 	    case -2:
 6607              		.loc 1 2148 11 view .LVU2144
 6608 0804 0326     		movs	r6, #3
2145:src/display.c **** 	      odig++;
 6609              		.loc 1 2145 19 view .LVU2145
 6610 0806 0DF15909 		add	r9, sp, #89
 6611              	.LVL734:
2145:src/display.c **** 	      odig++;
 6612              		.loc 1 2145 12 view .LVU2146
 6613 080a 0DF12501 		add	r1, sp, #37
 6614              	.LVL735:
 6615              	.L527:
2151:src/display.c **** 	      odig++;
 6616              		.loc 1 2151 8 is_stmt 1 view .LVU2147
2151:src/display.c **** 	      odig++;
 6617              		.loc 1 2151 15 is_stmt 0 view .LVU2148
 6618 080e 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6619              	.LVL736:
2151:src/display.c **** 	      odig++;
 6620              		.loc 1 2151 15 view .LVU2149
 6621 0812 01F8010B 		strb	r0, [r1], #1
 6622              	.LVL737:
2152:src/display.c **** 	      dd--;
 6623              		.loc 1 2152 8 is_stmt 1 view .LVU2150
ARM GAS  /tmp/ccpF0v4D.s 			page 213


2153:src/display.c **** 	      exp--;
 6624              		.loc 1 2153 8 view .LVU2151
2154:src/display.c **** 	    case 0:
 6625              		.loc 1 2154 8 view .LVU2152
2153:src/display.c **** 	      exp--;
 6626              		.loc 1 2153 10 is_stmt 0 view .LVU2153
 6627 0816 013A     		subs	r2, r2, #1
 6628 0818 0792     		str	r2, [sp, #28]
2154:src/display.c **** 	    case 0:
 6629              		.loc 1 2154 11 view .LVU2154
 6630 081a 013D     		subs	r5, r5, #1
 6631              	.LVL738:
 6632              	.L523:
2156:src/display.c **** 	    };
 6633              		.loc 1 2156 8 is_stmt 1 view .LVU2155
2157:src/display.c **** 	    *obp++ = *p++;
 6634              		.loc 1 2157 7 view .LVU2156
2158:src/display.c **** 	    odig++;
 6635              		.loc 1 2158 6 view .LVU2157
2158:src/display.c **** 	    odig++;
 6636              		.loc 1 2158 17 is_stmt 0 view .LVU2158
 6637 081c 4A46     		mov	r2, r9
 6638              	.LVL739:
2158:src/display.c **** 	    odig++;
 6639              		.loc 1 2158 13 view .LVU2159
 6640 081e 8846     		mov	r8, r1
 6641 0820 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6642              	.LVL740:
2158:src/display.c **** 	    odig++;
 6643              		.loc 1 2158 13 view .LVU2160
 6644 0824 08F8020B 		strb	r0, [r8], #2
2159:src/display.c **** 	    *obp++ = '.';
 6645              		.loc 1 2159 6 is_stmt 1 view .LVU2161
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6646              		.loc 1 2160 6 view .LVU2162
 6647              	.LVL741:
2161:src/display.c **** 	      *obp++ = *p++;
 6648              		.loc 1 2161 6 is_stmt 0 view .LVU2163
 6649 0828 012B     		cmp	r3, #1
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6650              		.loc 1 2160 13 view .LVU2164
 6651 082a 4FF02E00 		mov	r0, #46
 6652 082e 4870     		strb	r0, [r1, #1]
2161:src/display.c **** 	      *obp++ = *p++;
 6653              		.loc 1 2161 6 is_stmt 1 view .LVU2165
 6654              	.LVL742:
2161:src/display.c **** 	      *obp++ = *p++;
 6655              		.loc 1 2161 16 view .LVU2166
2161:src/display.c **** 	      *obp++ = *p++;
 6656              		.loc 1 2161 6 is_stmt 0 view .LVU2167
 6657 0830 49DD     		ble	.L594
2161:src/display.c **** 	      *obp++ = *p++;
 6658              		.loc 1 2161 6 view .LVU2168
 6659 0832 0131     		adds	r1, r1, #1
 6660 0834 9944     		add	r9, r9, r3
 6661              	.LVL743:
 6662              	.L529:
ARM GAS  /tmp/ccpF0v4D.s 			page 214


2162:src/display.c **** 	      odig++;
 6663              		.loc 1 2162 8 is_stmt 1 discriminator 3 view .LVU2169
2162:src/display.c **** 	      odig++;
 6664              		.loc 1 2162 15 is_stmt 0 discriminator 3 view .LVU2170
 6665 0836 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6666              	.LVL744:
2162:src/display.c **** 	      odig++;
 6667              		.loc 1 2162 15 discriminator 3 view .LVU2171
 6668 083a 01F8010F 		strb	r0, [r1, #1]!
2163:src/display.c **** 	    }
 6669              		.loc 1 2163 8 is_stmt 1 discriminator 3 view .LVU2172
2161:src/display.c **** 	      *obp++ = *p++;
 6670              		.loc 1 2161 25 discriminator 3 view .LVU2173
2161:src/display.c **** 	      *obp++ = *p++;
 6671              		.loc 1 2161 16 discriminator 3 view .LVU2174
2161:src/display.c **** 	      *obp++ = *p++;
 6672              		.loc 1 2161 6 is_stmt 0 discriminator 3 view .LVU2175
 6673 083e 4A45     		cmp	r2, r9
 6674 0840 F9D1     		bne	.L529
 6675 0842 013B     		subs	r3, r3, #1
 6676              	.LVL745:
2161:src/display.c **** 	      *obp++ = *p++;
 6677              		.loc 1 2161 6 discriminator 3 view .LVU2176
 6678 0844 9844     		add	r8, r8, r3
 6679 0846 1E44     		add	r6, r6, r3
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6680              		.loc 1 2165 15 view .LVU2177
 6681 0848 4FF0010B 		mov	fp, #1
 6682 084c 38E6     		b	.L528
 6683              	.LVL746:
 6684              	.L526:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6685              		.loc 1 2165 15 view .LVU2178
 6686 084e 079A     		ldr	r2, [sp, #28]
2142:src/display.c **** 	    case -1:
 6687              		.loc 1 2142 24 view .LVU2179
 6688 0850 0226     		movs	r6, #2
1938:src/display.c **** 	int odig = 0;
 6689              		.loc 1 1938 15 view .LVU2180
 6690 0852 3946     		mov	r1, r7
 6691 0854 DBE7     		b	.L527
 6692              	.LVL747:
 6693              	.L564:
2287:src/display.c **** 	  }
 6694              		.loc 1 2287 8 is_stmt 1 view .LVU2181
 6695 0856 2D21     		movs	r1, #45
 6696 0858 AAF10900 		sub	r0, r10, #9
 6697 085c FFF7FEFF 		bl	set_dig
 6698              	.LVL748:
 6699 0860 28E5     		b	.L560
 6700              	.LVL749:
 6701              	.L694:
 6702              	.LBB450:
 6703              	.LBB448:
 6704              	.LBB442:
1854:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6705              		.loc 1 1854 4 view .LVU2182
ARM GAS  /tmp/ccpF0v4D.s 			page 215


1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6706              		.loc 1 1857 4 view .LVU2183
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6707              		.loc 1 1857 14 is_stmt 0 view .LVU2184
 6708 0862 FE1C     		adds	r6, r7, #3
 6709              	.LVL750:
1858:src/display.c **** 	  if (grouping) {
 6710              		.loc 1 1858 4 is_stmt 1 view .LVU2185
 6711 0864 4649     		ldr	r1, .L699+20
 6712 0866 0D22     		movs	r2, #13
 6713 0868 3046     		mov	r0, r6
 6714 086a FFF7FEFF 		bl	xcopy
 6715              	.LVL751:
1859:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6716              		.loc 1 1859 4 view .LVU2186
1860:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6717              		.loc 1 1860 6 view .LVU2187
 6718 086e 1322     		movs	r2, #19
 6719 0870 B918     		adds	r1, r7, r2
 6720 0872 07F11400 		add	r0, r7, #20
 6721 0876 FFF7FEFF 		bl	xcopy
 6722              	.LVL752:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6723              		.loc 1 1861 6 view .LVU2188
1862:src/display.c **** 	  }
 6724              		.loc 1 1862 8 is_stmt 0 view .LVU2189
 6725 087a 07F11705 		add	r5, r7, #23
 6726              	.LVL753:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6727              		.loc 1 1861 24 view .LVU2190
 6728 087e 87F81380 		strb	r8, [r7, #19]
1862:src/display.c **** 	  }
 6729              		.loc 1 1862 6 is_stmt 1 view .LVU2191
 6730              	.LVL754:
1875:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6731              		.loc 1 1875 4 view .LVU2192
1876:src/display.c **** 	}
 6732              		.loc 1 1876 4 view .LVU2193
1876:src/display.c **** 	}
 6733              		.loc 1 1876 6 is_stmt 0 view .LVU2194
 6734 0882 1B24     		movs	r4, #27
 6735              	.LVL755:
 6736              	.L472:
1876:src/display.c **** 	}
 6737              		.loc 1 1876 6 view .LVU2195
 6738              	.LBE442:
1910:src/display.c **** 	  }
 6739              		.loc 1 1910 6 is_stmt 1 view .LVU2196
 6740              	.LBB443:
 6741              	.LBI443:
 367:src/display.c ****   if (sep == SEP_NONE)
 6742              		.loc 1 367 14 view .LVU2197
 6743              	.LBB444:
 368:src/display.c ****     return res;
 6744              		.loc 1 368 3 view .LVU2198
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6745              		.loc 1 370 3 view .LVU2199
ARM GAS  /tmp/ccpF0v4D.s 			page 216


 6746 0884 2046     		mov	r0, r4
 6747 0886 5146     		mov	r1, r10
 6748              	.LBE444:
 6749              	.LBE443:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6750              		.loc 1 1909 38 is_stmt 0 view .LVU2200
 6751 0888 1B34     		adds	r4, r4, #27
 6752              	.LVL756:
 6753              	.LBB446:
 6754              	.LBB445:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6755              		.loc 1 1909 38 view .LVU2201
 6756 088a FFF7FEFF 		bl	set_separator.part.0
 6757              	.LVL757:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6758              		.loc 1 1909 38 view .LVU2202
 6759              	.LBE445:
 6760              	.LBE446:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6761              		.loc 1 1909 36 is_stmt 1 view .LVU2203
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6762              		.loc 1 1909 11 view .LVU2204
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6763              		.loc 1 1909 4 is_stmt 0 view .LVU2205
 6764 088e 512C     		cmp	r4, #81
 6765 0890 F8DD     		ble	.L472
 6766 0892 6C1E     		subs	r4, r5, #1
 6767              	.LVL758:
 6768              	.L474:
1915:src/display.c **** 
 6769              		.loc 1 1915 4 is_stmt 1 view .LVU2206
 6770 0894 5846     		mov	r0, fp
 6771 0896 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1914:src/display.c **** 	  set_dig(j, x[i]);
 6772              		.loc 1 1914 33 is_stmt 0 view .LVU2207
 6773 089a 0BF1090B 		add	fp, fp, #9
 6774              	.LVL759:
1915:src/display.c **** 
 6775              		.loc 1 1915 4 view .LVU2208
 6776 089e FFF7FEFF 		bl	set_dig
 6777              	.LVL760:
1914:src/display.c **** 	  set_dig(j, x[i]);
 6778              		.loc 1 1914 26 is_stmt 1 view .LVU2209
1914:src/display.c **** 	  set_dig(j, x[i]);
 6779              		.loc 1 1914 18 view .LVU2210
1914:src/display.c **** 	  set_dig(j, x[i]);
 6780              		.loc 1 1914 2 is_stmt 0 view .LVU2211
 6781 08a2 BBF16C0F 		cmp	fp, #108
 6782 08a6 F5D1     		bne	.L474
1917:src/display.c **** 	set_status(upper_str - negative);
 6783              		.loc 1 1917 2 is_stmt 1 view .LVU2212
1917:src/display.c **** 	set_status(upper_str - negative);
 6784              		.loc 1 1917 5 is_stmt 0 view .LVU2213
 6785 08a8 0023     		movs	r3, #0
1918:src/display.c ****       }
 6786              		.loc 1 1918 2 view .LVU2214
 6787 08aa 3046     		mov	r0, r6
ARM GAS  /tmp/ccpF0v4D.s 			page 217


1917:src/display.c **** 	set_status(upper_str - negative);
 6788              		.loc 1 1917 5 view .LVU2215
 6789 08ac 2B70     		strb	r3, [r5]
1918:src/display.c ****       }
 6790              		.loc 1 1918 2 is_stmt 1 view .LVU2216
 6791 08ae FFF7FEFF 		bl	set_status
 6792              	.LVL761:
1919:src/display.c **** 
 6793              		.loc 1 1919 7 is_stmt 0 view .LVU2217
 6794 08b2 25E5     		b	.L453
 6795              	.LVL762:
 6796              	.L690:
1919:src/display.c **** 
 6797              		.loc 1 1919 7 view .LVU2218
 6798              	.LBE448:
 6799              	.LBE450:
1975:src/display.c **** 	      return;
 6800              		.loc 1 1975 8 is_stmt 1 view .LVU2219
 6801 08b4 2846     		mov	r0, r5
 6802 08b6 FFF7FEFF 		bl	set_x_hms
 6803              	.LVL763:
1976:src/display.c **** 	    }
 6804              		.loc 1 1976 8 view .LVU2220
 6805 08ba 21E5     		b	.L453
 6806              	.LVL764:
 6807              	.L592:
2137:src/display.c **** 	  if (count != *display_digits)
 6808              		.loc 1 2137 4 is_stmt 0 view .LVU2221
 6809 08bc 5346     		mov	r3, r10
 6810 08be A2E4     		b	.L519
 6811              	.LVL765:
 6812              	.L593:
2142:src/display.c **** 	    case -1:
 6813              		.loc 1 2142 24 view .LVU2222
 6814 08c0 0126     		movs	r6, #1
 6815 08c2 3946     		mov	r1, r7
 6816 08c4 AAE7     		b	.L523
 6817              	.LVL766:
 6818              	.L594:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6819              		.loc 1 2165 15 view .LVU2223
 6820 08c6 4FF0010B 		mov	fp, #1
 6821 08ca F9E5     		b	.L528
 6822              	.LVL767:
 6823              	.L568:
 6824              	.LBB451:
 6825              	.LBB430:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6826              		.loc 1 2165 15 view .LVU2224
 6827 08cc 5046     		mov	r0, r10
 6828 08ce FFF7FEFF 		bl	set_separator.part.0
 6829              	.LVL768:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6830              		.loc 1 2165 15 view .LVU2225
 6831 08d2 0446     		mov	r4, r0
 6832              	.LVL769:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
ARM GAS  /tmp/ccpF0v4D.s 			page 218


 6833              		.loc 1 2165 15 view .LVU2226
 6834 08d4 11E6     		b	.L566
 6835              	.LVL770:
 6836              	.L502:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6837              		.loc 1 2165 15 view .LVU2227
 6838              	.LBE430:
 6839              	.LBE451:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6840              		.loc 1 2115 4 is_stmt 1 view .LVU2228
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6841              		.loc 1 2115 7 is_stmt 0 view .LVU2229
 6842 08d6 4B45     		cmp	r3, r9
 6843 08d8 7FF45AAC 		bne	.L577
 6844 08dc 59E5     		b	.L578
 6845              	.LVL771:
 6846              	.L469:
 6847              	.LBB452:
 6848              	.LBB449:
1900:src/display.c **** 	    x[10] = '\0';
 6849              		.loc 1 1900 6 is_stmt 1 view .LVU2230
1901:src/display.c **** 	  }
 6850              		.loc 1 1901 6 view .LVU2231
1900:src/display.c **** 	    x[10] = '\0';
 6851              		.loc 1 1900 11 is_stmt 0 view .LVU2232
 6852 08de 7C82     		strh	r4, [r7, #18]	@ movhi
 6853 08e0 2DE7     		b	.L471
 6854              	.LVL772:
 6855              	.L693:
 6856              	.LBB447:
1825:src/display.c **** 
 6857              		.loc 1 1825 4 is_stmt 1 view .LVU2233
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6858              		.loc 1 1827 4 view .LVU2234
 6859 08e2 2222     		movs	r2, #34
 6860 08e4 0DF12501 		add	r1, sp, #37
 6861 08e8 0AA8     		add	r0, sp, #40
 6862              	.LVL773:
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 6863              		.loc 1 1827 4 is_stmt 0 view .LVU2235
 6864 08ea FFF7FEFF 		bl	xcopy
 6865              	.LVL774:
1828:src/display.c **** 	  x += 4;
 6866              		.loc 1 1828 4 is_stmt 1 view .LVU2236
 6867 08ee 3846     		mov	r0, r7
 6868 08f0 2449     		ldr	r1, .L699+24
 6869 08f2 0422     		movs	r2, #4
 6870 08f4 FFF7FEFF 		bl	xcopy
 6871              	.LVL775:
1829:src/display.c **** 	  negative = 4;
 6872              		.loc 1 1829 4 view .LVU2237
1830:src/display.c **** #else
 6873              		.loc 1 1830 4 view .LVU2238
1829:src/display.c **** 	  negative = 4;
 6874              		.loc 1 1829 6 is_stmt 0 view .LVU2239
 6875 08f8 0AAF     		add	r7, sp, #40
 6876              	.LVL776:
ARM GAS  /tmp/ccpF0v4D.s 			page 219


1830:src/display.c **** #else
 6877              		.loc 1 1830 13 view .LVU2240
 6878 08fa 0426     		movs	r6, #4
 6879              	.LVL777:
1830:src/display.c **** #else
 6880              		.loc 1 1830 13 view .LVU2241
 6881              	.LBE447:
 6882 08fc DEE6     		b	.L465
 6883              	.LVL778:
 6884              	.L530:
1830:src/display.c **** #else
 6885              		.loc 1 1830 13 view .LVU2242
 6886              	.LBE449:
 6887              	.LBE452:
2181:src/display.c **** 	    odig++;
 6888              		.loc 1 2181 6 is_stmt 1 view .LVU2243
2182:src/display.c **** 	    *obp++ = '.';
 6889              		.loc 1 2182 6 view .LVU2244
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6890              		.loc 1 2183 6 view .LVU2245
2181:src/display.c **** 	    odig++;
 6891              		.loc 1 2181 13 is_stmt 0 view .LVU2246
 6892 08fe 42F63062 		movw	r2, #11824
 6893 0902 ADF82420 		strh	r2, [sp, #36]	@ movhi
2184:src/display.c **** 	      *obp++ = '0';
 6894              		.loc 1 2184 6 is_stmt 1 view .LVU2247
 6895              	.LVL779:
2184:src/display.c **** 	      *obp++ = '0';
 6896              		.loc 1 2184 20 view .LVU2248
2184:src/display.c **** 	      *obp++ = '0';
 6897              		.loc 1 2184 6 is_stmt 0 view .LVU2249
 6898 0906 6A1C     		adds	r2, r5, #1
 6899              	.LVL780:
2184:src/display.c **** 	      *obp++ = '0';
 6900              		.loc 1 2184 6 view .LVU2250
 6901 0908 2AD0     		beq	.L595
 6902 090a C5F10100 		rsb	r0, r5, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6903              		.loc 1 2183 10 view .LVU2251
 6904 090e 0DF12601 		add	r1, sp, #38
 6905              	.LVL781:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6906              		.loc 1 2183 10 view .LVU2252
 6907 0912 3844     		add	r0, r0, r7
 6908 0914 0A46     		mov	r2, r1
 6909              	.LVL782:
2185:src/display.c **** 	      odig++;
 6910              		.loc 1 2185 15 view .LVU2253
 6911 0916 3026     		movs	r6, #48
 6912              	.LVL783:
 6913              	.L537:
2185:src/display.c **** 	      odig++;
 6914              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2254
2185:src/display.c **** 	      odig++;
 6915              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2255
 6916 0918 02F8016B 		strb	r6, [r2], #1
 6917              	.LVL784:
ARM GAS  /tmp/ccpF0v4D.s 			page 220


2186:src/display.c **** 	    }
 6918              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2256
2184:src/display.c **** 	      *obp++ = '0';
 6919              		.loc 1 2184 25 discriminator 3 view .LVU2257
2184:src/display.c **** 	      *obp++ = '0';
 6920              		.loc 1 2184 20 discriminator 3 view .LVU2258
2184:src/display.c **** 	      *obp++ = '0';
 6921              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2259
 6922 091c 9042     		cmp	r0, r2
 6923 091e FBD1     		bne	.L537
 6924 0920 6FEA0508 		mvn	r8, r5
 6925 0924 8844     		add	r8, r8, r1
 6926 0926 6E42     		rsbs	r6, r5, #0
 6927              	.LVL785:
 6928              	.L536:
2188:src/display.c **** 	      *obp++ = *p++;
 6929              		.loc 1 2188 16 is_stmt 1 view .LVU2260
2188:src/display.c **** 	      *obp++ = *p++;
 6930              		.loc 1 2188 6 is_stmt 0 view .LVU2261
 6931 0928 002B     		cmp	r3, #0
 6932 092a 7FF7C9AD 		ble	.L528
 6933 092e 581E     		subs	r0, r3, #1
 6934 0930 4044     		add	r0, r0, r8
 6935 0932 08F1FF32 		add	r2, r8, #-1
 6936              	.LVL786:
 6937              	.L538:
2189:src/display.c **** 	      odig++;
 6938              		.loc 1 2189 8 is_stmt 1 discriminator 3 view .LVU2262
2189:src/display.c **** 	      odig++;
 6939              		.loc 1 2189 15 is_stmt 0 discriminator 3 view .LVU2263
 6940 0936 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6941              	.LVL787:
2189:src/display.c **** 	      odig++;
 6942              		.loc 1 2189 15 discriminator 3 view .LVU2264
 6943 093a 02F8011F 		strb	r1, [r2, #1]!
2190:src/display.c **** 	    }
 6944              		.loc 1 2190 8 is_stmt 1 discriminator 3 view .LVU2265
2188:src/display.c **** 	      *obp++ = *p++;
 6945              		.loc 1 2188 25 discriminator 3 view .LVU2266
 6946              	.LVL788:
2188:src/display.c **** 	      *obp++ = *p++;
 6947              		.loc 1 2188 16 discriminator 3 view .LVU2267
2188:src/display.c **** 	      *obp++ = *p++;
 6948              		.loc 1 2188 6 is_stmt 0 discriminator 3 view .LVU2268
 6949 093e 8242     		cmp	r2, r0
 6950 0940 F9D1     		bne	.L538
 6951              	.LVL789:
2188:src/display.c **** 	      *obp++ = *p++;
 6952              		.loc 1 2188 6 discriminator 3 view .LVU2269
 6953 0942 9844     		add	r8, r8, r3
 6954              	.LVL790:
2188:src/display.c **** 	      *obp++ = *p++;
 6955              		.loc 1 2188 6 discriminator 3 view .LVU2270
 6956 0944 1E44     		add	r6, r6, r3
 6957 0946 BBE5     		b	.L528
 6958              	.LVL791:
 6959              	.L692:
ARM GAS  /tmp/ccpF0v4D.s 			page 221


2131:src/display.c **** 
 6960              		.loc 1 2131 2 is_stmt 1 view .LVU2271
 6961 0948 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 6962              		.loc 1 2131 9 is_stmt 0 view .LVU2272
 6963 094c 09EB0E03 		add	r3, r9, lr
 6964              	.LVL792:
2131:src/display.c **** 
 6965              		.loc 1 2131 45 is_stmt 1 view .LVU2273
2131:src/display.c **** 
 6966              		.loc 1 2131 2 is_stmt 0 view .LVU2274
 6967 0950 51B1     		cbz	r1, .L696
2120:src/display.c **** 	      extra_digits = 0;
 6968              		.loc 1 2120 37 view .LVU2275
 6969 0952 0226     		movs	r6, #2
 6970 0954 33E4     		b	.L576
 6971              	.LVL793:
 6972              	.L695:
2120:src/display.c **** 	      extra_digits = 0;
 6973              		.loc 1 2120 37 view .LVU2276
 6974 0956 079B     		ldr	r3, [sp, #28]
 6975              	.LVL794:
2211:src/display.c **** 	    *obp++ = '.';
 6976              		.loc 1 2211 10 view .LVU2277
 6977 0958 0126     		movs	r6, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6978              		.loc 1 2212 10 view .LVU2278
 6979 095a 0DF12608 		add	r8, sp, #38
 6980              	.LVL795:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6981              		.loc 1 2212 10 view .LVU2279
 6982 095e 16E7     		b	.L546
 6983              	.LVL796:
 6984              	.L595:
2182:src/display.c **** 	    *obp++ = '.';
 6985              		.loc 1 2182 10 view .LVU2280
 6986 0960 0126     		movs	r6, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6987              		.loc 1 2183 10 view .LVU2281
 6988 0962 0DF12608 		add	r8, sp, #38
 6989              	.LVL797:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6990              		.loc 1 2183 10 view .LVU2282
 6991 0966 DFE7     		b	.L536
 6992              	.LVL798:
 6993              	.L696:
1938:src/display.c **** 	int odig = 0;
 6994              		.loc 1 1938 15 view .LVU2283
 6995 0968 3946     		mov	r1, r7
 6996 096a 8AE5     		b	.L518
 6997              	.L700:
 6998              		.align	2
 6999              	.L699:
 7000 096c 00000000 		.word	LastDisplayedExponent
 7001 0970 00000000 		.word	LastDisplayedNumber
 7002 0974 00000000 		.word	.LANCHOR1
 7003 0978 D34D6210 		.word	274877907
ARM GAS  /tmp/ccpF0v4D.s 			page 222


 7004 097c 18FCFFFF 		.word	-1000
 7005 0980 00000000 		.word	.LANCHOR14
 7006 0984 00000000 		.word	.LANCHOR13
 7007              		.cfi_endproc
 7008              	.LFE27:
 7010              		.section	.text.set_x,"ax",%progbits
 7011              		.align	1
 7012              		.p2align 2,,3
 7013              		.syntax unified
 7014              		.thumb
 7015              		.thumb_func
 7016              		.fpu fpv4-sp-d16
 7018              	set_x:
 7019              	.LVL799:
 7020              	.LFB26:
1926:src/display.c **** 	decNumber z;
 7021              		.loc 1 1926 66 is_stmt 1 view -0
 7022              		.cfi_startproc
 7023              		@ args = 0, pretend = 0, frame = 40
 7024              		@ frame_needed = 0, uses_anonymous_args = 0
1927:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7025              		.loc 1 1927 2 view .LVU2285
1928:src/display.c **** 
 7026              		.loc 1 1928 2 view .LVU2286
1926:src/display.c **** 	decNumber z;
 7027              		.loc 1 1926 66 is_stmt 0 view .LVU2287
 7028 0000 30B5     		push	{r4, r5, lr}
 7029              		.cfi_def_cfa_offset 12
 7030              		.cfi_offset 4, -12
 7031              		.cfi_offset 5, -8
 7032              		.cfi_offset 14, -4
 7033 0002 8BB0     		sub	sp, sp, #44
 7034              		.cfi_def_cfa_offset 56
1928:src/display.c **** 
 7035              		.loc 1 1928 6 view .LVU2288
 7036 0004 0C23     		movs	r3, #12
1931:src/display.c **** 	else
 7037              		.loc 1 1931 4 view .LVU2289
 7038 0006 01AD     		add	r5, sp, #4
1926:src/display.c **** 	decNumber z;
 7039              		.loc 1 1926 66 view .LVU2290
 7040 0008 0C46     		mov	r4, r1
1928:src/display.c **** 
 7041              		.loc 1 1928 6 view .LVU2291
 7042 000a 0093     		str	r3, [sp]
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7043              		.loc 1 1930 2 is_stmt 1 view .LVU2292
1931:src/display.c **** 	else
 7044              		.loc 1 1931 4 is_stmt 0 view .LVU2293
 7045 000c 2946     		mov	r1, r5
 7046              	.LVL800:
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7047              		.loc 1 1930 5 view .LVU2294
 7048 000e 42B1     		cbz	r2, .L702
1931:src/display.c **** 	else
 7049              		.loc 1 1931 4 is_stmt 1 view .LVU2295
 7050 0010 FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/ccpF0v4D.s 			page 223


 7051              	.LVL801:
1934:src/display.c ****       }
 7052              		.loc 1 1934 2 view .LVU2296
 7053 0014 2146     		mov	r1, r4
 7054 0016 2846     		mov	r0, r5
 7055 0018 6A46     		mov	r2, sp
 7056 001a FFF7FEFF 		bl	set_x_dn
 7057              	.LVL802:
1935:src/display.c **** 
 7058              		.loc 1 1935 7 is_stmt 0 view .LVU2297
 7059 001e 0BB0     		add	sp, sp, #44
 7060              		.cfi_remember_state
 7061              		.cfi_def_cfa_offset 12
 7062              		@ sp needed
 7063 0020 30BD     		pop	{r4, r5, pc}
 7064              	.LVL803:
 7065              	.L702:
 7066              		.cfi_restore_state
1933:src/display.c **** 	set_x_dn(&z, res, &digits);
 7067              		.loc 1 1933 4 is_stmt 1 view .LVU2298
 7068 0022 FFF7FEFF 		bl	decimal64ToNumber
 7069              	.LVL804:
1934:src/display.c ****       }
 7070              		.loc 1 1934 2 view .LVU2299
 7071 0026 2146     		mov	r1, r4
 7072 0028 2846     		mov	r0, r5
 7073 002a 6A46     		mov	r2, sp
 7074 002c FFF7FEFF 		bl	set_x_dn
 7075              	.LVL805:
1935:src/display.c **** 
 7076              		.loc 1 1935 7 is_stmt 0 view .LVU2300
 7077 0030 0BB0     		add	sp, sp, #44
 7078              		.cfi_def_cfa_offset 12
 7079              		@ sp needed
 7080 0032 30BD     		pop	{r4, r5, pc}
1935:src/display.c **** 
 7081              		.loc 1 1935 7 view .LVU2301
 7082              		.cfi_endproc
 7083              	.LFE26:
 7085              		.section	.text.format_reg,"ax",%progbits
 7086              		.align	1
 7087              		.p2align 2,,3
 7088              		.global	format_reg
 7089              		.syntax unified
 7090              		.thumb
 7091              		.thumb_func
 7092              		.fpu fpv4-sp-d16
 7094              	format_reg:
 7095              	.LVL806:
 7096              	.LFB28:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7097              		.loc 1 2342 45 is_stmt 1 view -0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 40
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
2343:src/display.c **** 
 7101              		.loc 1 2343 2 view .LVU2303
ARM GAS  /tmp/ccpF0v4D.s 			page 224


2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7102              		.loc 1 2342 45 is_stmt 0 view .LVU2304
 7103 0000 30B5     		push	{r4, r5, lr}
 7104              		.cfi_def_cfa_offset 12
 7105              		.cfi_offset 4, -12
 7106              		.cfi_offset 5, -8
 7107              		.cfi_offset 14, -4
 7108 0002 8BB0     		sub	sp, sp, #44
 7109              		.cfi_def_cfa_offset 56
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7110              		.loc 1 2342 45 view .LVU2305
 7111 0004 0C46     		mov	r4, r1
 7112 0006 0546     		mov	r5, r0
2343:src/display.c **** 
 7113              		.loc 1 2343 28 view .LVU2306
 7114 0008 FFF7FEFF 		bl	get_reg_n
 7115              	.LVL807:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7116              		.loc 1 2345 6 view .LVU2307
 7117 000c 154B     		ldr	r3, .L712
 7118 000e 1B68     		ldr	r3, [r3]
 7119 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7120              	.LVL808:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7121              		.loc 1 2345 2 is_stmt 1 view .LVU2308
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7122              		.loc 1 2345 5 is_stmt 0 view .LVU2309
 7123 0014 D207     		lsls	r2, r2, #31
 7124 0016 1DD4     		bmi	.L710
2348:src/display.c **** 	  decNumber x;
 7125              		.loc 1 2348 7 is_stmt 1 view .LVU2310
2348:src/display.c **** 	  decNumber x;
 7126              		.loc 1 2348 10 is_stmt 0 view .LVU2311
 7127 0018 44B1     		cbz	r4, .L711
 7128              	.L708:
2359:src/display.c ****       }
 7129              		.loc 1 2359 4 is_stmt 1 view .LVU2312
2359:src/display.c ****       }
 7130              		.loc 1 2359 24 is_stmt 0 view .LVU2313
 7131 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2359:src/display.c ****       }
 7132              		.loc 1 2359 4 view .LVU2314
 7133 001e 2146     		mov	r1, r4
 7134 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7135 0024 FFF7FEFF 		bl	set_x
 7136              	.LVL809:
2360:src/display.c **** 
 7137              		.loc 1 2360 7 view .LVU2315
 7138 0028 0BB0     		add	sp, sp, #44
 7139              		.cfi_remember_state
 7140              		.cfi_def_cfa_offset 12
 7141              		@ sp needed
 7142 002a 30BD     		pop	{r4, r5, pc}
 7143              	.LVL810:
 7144              	.L711:
 7145              		.cfi_restore_state
2348:src/display.c **** 	  decNumber x;
ARM GAS  /tmp/ccpF0v4D.s 			page 225


 7146              		.loc 1 2348 32 discriminator 1 view .LVU2316
 7147 002c 0E4A     		ldr	r2, .L712+4
2348:src/display.c **** 	  decNumber x;
 7148              		.loc 1 2348 23 discriminator 1 view .LVU2317
 7149 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7150 0030 012A     		cmp	r2, #1
 7151 0032 F2D9     		bls	.L708
 7152              	.LVL811:
 7153              	.LBB456:
 7154              	.LBI456:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7155              		.loc 1 2342 12 is_stmt 1 view .LVU2318
 7156              	.LBB457:
 7157              	.LBB458:
2349:src/display.c **** 	  int s;
 7158              		.loc 1 2349 4 view .LVU2319
2350:src/display.c **** 	  unsigned long long int v;
 7159              		.loc 1 2350 4 view .LVU2320
2351:src/display.c **** 
 7160              		.loc 1 2351 4 view .LVU2321
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7161              		.loc 1 2353 4 view .LVU2322
 7162 0034 2946     		mov	r1, r5
 7163 0036 01A8     		add	r0, sp, #4
 7164              	.LVL812:
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7165              		.loc 1 2353 4 is_stmt 0 view .LVU2323
 7166 0038 FFF7FEFF 		bl	getRegister
 7167              	.LVL813:
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7168              		.loc 1 2354 4 is_stmt 1 view .LVU2324
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7169              		.loc 1 2354 8 is_stmt 0 view .LVU2325
 7170 003c 01A8     		add	r0, sp, #4
 7171 003e 6946     		mov	r1, sp
 7172 0040 FFF7FEFF 		bl	dn_to_ull
 7173              	.LVL814:
2355:src/display.c **** 	}
 7174              		.loc 1 2355 4 is_stmt 1 view .LVU2326
 7175 0044 009A     		ldr	r2, [sp]
 7176 0046 FFF7FEFF 		bl	build_value
 7177              	.LVL815:
2355:src/display.c **** 	}
 7178              		.loc 1 2355 4 is_stmt 0 view .LVU2327
 7179 004a 2246     		mov	r2, r4
 7180 004c FFF7FEFF 		bl	set_int_x
 7181              	.LVL816:
 7182              	.LBE458:
 7183              	.LBE457:
 7184              	.LBE456:
2360:src/display.c **** 
 7185              		.loc 1 2360 7 view .LVU2328
 7186 0050 0BB0     		add	sp, sp, #44
 7187              		.cfi_remember_state
 7188              		.cfi_def_cfa_offset 12
 7189              		@ sp needed
 7190 0052 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccpF0v4D.s 			page 226


 7191              	.LVL817:
 7192              	.L710:
 7193              		.cfi_restore_state
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7194              		.loc 1 2346 4 is_stmt 1 view .LVU2329
 7195 0054 2846     		mov	r0, r5
 7196              	.LVL818:
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7197              		.loc 1 2346 4 is_stmt 0 view .LVU2330
 7198 0056 FFF7FEFF 		bl	get_reg_n_int
 7199              	.LVL819:
 7200 005a 2246     		mov	r2, r4
 7201 005c FFF7FEFF 		bl	set_int_x
 7202              	.LVL820:
2360:src/display.c **** 
 7203              		.loc 1 2360 7 view .LVU2331
 7204 0060 0BB0     		add	sp, sp, #44
 7205              		.cfi_def_cfa_offset 12
 7206              		@ sp needed
 7207 0062 30BD     		pop	{r4, r5, pc}
 7208              	.LVL821:
 7209              	.L713:
2360:src/display.c **** 
 7210              		.loc 1 2360 7 view .LVU2332
 7211              		.align	2
 7212              	.L712:
 7213 0064 00000000 		.word	main_ram
 7214 0068 00000000 		.word	StateWhileOn
 7215              		.cfi_endproc
 7216              	.LFE28:
 7218              		.section	.text.set_status_right,"ax",%progbits
 7219              		.align	1
 7220              		.p2align 2,,3
 7221              		.syntax unified
 7222              		.thumb
 7223              		.thumb_func
 7224              		.fpu fpv4-sp-d16
 7226              	set_status_right:
 7227              	.LVL822:
 7228              	.LFB47:
3505:src/display.c ****       static void set_status_top(const char *str) {
3506:src/display.c **** 	if (no_status_top) return;
3507:src/display.c **** 	if (State2.runmode) {
3508:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3509:src/display.c **** 	}
3510:src/display.c **** 	else {
3511:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3512:src/display.c **** 	}
3513:src/display.c ****       }
3514:src/display.c **** #ifdef TOP_ROW
3515:src/display.c ****       static void set_status_top_always(const char *str) {
3516:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3517:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3518:src/display.c ****       }
3519:src/display.c **** #endif
3520:src/display.c **** 
3521:src/display.c ****       /*
ARM GAS  /tmp/ccpF0v4D.s 			page 227


3522:src/display.c ****        *  Display messages (global function)
3523:src/display.c ****        */
3524:src/display.c ****       extern void message(const char *str1, const char *str2)
3525:src/display.c ****       {
3526:src/display.c **** 	State2.disp_freeze = 0;
3527:src/display.c **** 	State2.disp_small = 0;
3528:src/display.c **** 	WasDataEntry = 0;
3529:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3530:src/display.c **** 	  // Complete redraw necessary
3531:src/display.c **** 	  DispMsg = str1;
3532:src/display.c **** 	  display();
3533:src/display.c **** 	}
3534:src/display.c **** 	else {
3535:src/display.c **** 	  if ( str2 != NULL ) {
3536:src/display.c **** 	    reset_disp();
3537:src/display.c **** 	    ShowRPN = 0;
3538:src/display.c **** 	    set_annunciators();
3539:src/display.c **** 	    set_digits_string( str2, 0 );
3540:src/display.c **** 	  }
3541:src/display.c **** 	  set_status( str1 );
3542:src/display.c **** 	  finish_display();// message
3543:src/display.c **** 	}
3544:src/display.c ****       }
3545:src/display.c **** 
3546:src/display.c **** #ifdef INCLUDE_STOPWATCH
3547:src/display.c **** 
3548:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3549:src/display.c **** 	int j = SEGS_EXP_BASE;
3550:src/display.c **** 	for (; *exponent!=0; exponent++) {
3551:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3552:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3553:src/display.c **** 	}
3554:src/display.c ****       }
3555:src/display.c **** 
3556:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3557:src/display.c ****       {
3558:src/display.c **** #ifndef REALBUILD
3559:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3560:src/display.c **** #endif
3561:src/display.c **** 	reset_disp();
3562:src/display.c **** 	set_dot(DEG);
3563:src/display.c **** 	set_digits_string( str2, 0 );
3564:src/display.c **** 	State2.disp_small = force_small;
3565:src/display.c **** 	if( exponent!=NULL ) {
3566:src/display.c **** 	  stopwatch_exponent(exponent);
3567:src/display.c **** 	}
3568:src/display.c **** 	set_status( str1 );
3569:src/display.c **** 	finish_display();
3570:src/display.c ****       }
3571:src/display.c **** 
3572:src/display.c **** 
3573:src/display.c **** #endif // INCLUDE_STOPWATCH
3574:src/display.c **** 
3575:src/display.c ****       /* Display the right hand characters from the given string.
3576:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3577:src/display.c ****        * and reduce font size if required.
3578:src/display.c ****        */
ARM GAS  /tmp/ccpF0v4D.s 			page 228


3579:src/display.c ****       static void set_status_right(const char *str) {
 7229              		.loc 1 3579 53 is_stmt 1 view -0
 7230              		.cfi_startproc
 7231              		@ args = 0, pretend = 0, frame = 0
 7232              		@ frame_needed = 0, uses_anonymous_args = 0
3580:src/display.c **** 	unsigned int x = 0;
 7233              		.loc 1 3580 2 view .LVU2334
3581:src/display.c **** 	const char *p;
 7234              		.loc 1 3581 2 view .LVU2335
3582:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7235              		.loc 1 3582 2 view .LVU2336
3579:src/display.c **** 	unsigned int x = 0;
 7236              		.loc 1 3579 53 is_stmt 0 view .LVU2337
 7237 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7238              		.cfi_def_cfa_offset 28
 7239              		.cfi_offset 4, -28
 7240              		.cfi_offset 5, -24
 7241              		.cfi_offset 6, -20
 7242              		.cfi_offset 7, -16
 7243              		.cfi_offset 8, -12
 7244              		.cfi_offset 9, -8
 7245              		.cfi_offset 14, -4
 7246              		.loc 1 3582 23 view .LVU2338
 7247 0004 194B     		ldr	r3, .L729
 7248              		.loc 1 3582 41 view .LVU2339
 7249 0006 93F91630 		ldrsb	r3, [r3, #22]
 7250 000a 002B     		cmp	r3, #0
3579:src/display.c **** 	unsigned int x = 0;
 7251              		.loc 1 3579 53 view .LVU2340
 7252 000c 83B0     		sub	sp, sp, #12
 7253              		.cfi_def_cfa_offset 40
3579:src/display.c **** 	unsigned int x = 0;
 7254              		.loc 1 3579 53 view .LVU2341
 7255 000e 0646     		mov	r6, r0
 7256              		.loc 1 3582 41 view .LVU2342
 7257 0010 23DA     		bge	.L728
 7258              	.LVL823:
 7259              	.L715:
 7260              		.loc 1 3582 12 view .LVU2343
 7261 0012 4FF00108 		mov	r8, #1
3583:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7262              		.loc 1 3583 36 view .LVU2344
 7263 0016 4FF48077 		mov	r7, #256
 7264              	.L716:
 7265              	.LVL824:
3584:src/display.c **** 
3585:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7266              		.loc 1 3585 2 is_stmt 1 discriminator 4 view .LVU2345
 7267              		.loc 1 3585 14 discriminator 4 view .LVU2346
 7268              		.loc 1 3585 2 is_stmt 0 discriminator 4 view .LVU2347
 7269 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7270 001c 3446     		mov	r4, r6
 7271 001e 1BB1     		cbz	r3, .L717
 7272              	.LVL825:
 7273              	.L718:
 7274              		.loc 1 3585 30 is_stmt 1 discriminator 3 view .LVU2348
 7275              		.loc 1 3585 26 discriminator 3 view .LVU2349
ARM GAS  /tmp/ccpF0v4D.s 			page 229


 7276              		.loc 1 3585 14 discriminator 3 view .LVU2350
 7277              		.loc 1 3585 2 is_stmt 0 discriminator 3 view .LVU2351
 7278 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7279              	.LVL826:
 7280              		.loc 1 3585 2 discriminator 3 view .LVU2352
 7281 0024 002B     		cmp	r3, #0
 7282 0026 FBD1     		bne	.L718
 7283              	.L717:
3580:src/display.c **** 	const char *p;
 7284              		.loc 1 3580 15 view .LVU2353
 7285 0028 0025     		movs	r5, #0
 7286 002a 06E0     		b	.L719
 7287              	.LVL827:
 7288              	.L720:
 7289              	.LBB459:
3586:src/display.c **** 	while (--p >= str) {
3587:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7290              		.loc 1 3587 27 view .LVU2354
 7291 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3588:src/display.c **** 
3589:src/display.c **** 	  x += charlengths(c);
 7292              		.loc 1 3589 9 view .LVU2355
 7293 002e 3844     		add	r0, r0, r7
 7294 0030 FFF7FEFF 		bl	charlengths
 7295              	.LVL828:
 7296              		.loc 1 3589 6 view .LVU2356
 7297 0034 0544     		add	r5, r5, r0
 7298              	.LVL829:
3590:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7299              		.loc 1 3590 4 is_stmt 1 view .LVU2357
 7300              		.loc 1 3590 7 is_stmt 0 view .LVU2358
 7301 0036 4B2D     		cmp	r5, #75
 7302 0038 03D8     		bhi	.L721
 7303              	.LVL830:
 7304              	.L719:
3587:src/display.c **** 
 7305              		.loc 1 3587 4 is_stmt 1 view .LVU2359
3587:src/display.c **** 
 7306              		.loc 1 3587 4 is_stmt 0 view .LVU2360
 7307              	.LBE459:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7308              		.loc 1 3586 8 is_stmt 1 view .LVU2361
 7309 003a A146     		mov	r9, r4
 7310 003c 013C     		subs	r4, r4, #1
 7311              	.LVL831:
 7312              	.LBB460:
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7313              		.loc 1 3589 4 view .LVU2362
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7314              		.loc 1 3589 4 is_stmt 0 view .LVU2363
 7315              	.LBE460:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7316              		.loc 1 3586 8 view .LVU2364
 7317 003e A642     		cmp	r6, r4
 7318 0040 F4D9     		bls	.L720
 7319              	.LVL832:
 7320              	.L721:
ARM GAS  /tmp/ccpF0v4D.s 			page 230


3591:src/display.c **** 	    break;
3592:src/display.c **** 	}
3593:src/display.c **** 	set_status_sized(p+1, toolarge);
 7321              		.loc 1 3593 2 is_stmt 1 view .LVU2365
 7322              	.LBB461:
 7323              	.LBI461:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7324              		.loc 1 3344 19 view .LVU2366
 7325              	.LBB462:
3345:src/display.c ****       }
 7326              		.loc 1 3345 2 view .LVU2367
 7327 0042 40F24A23 		movw	r3, #586
 7328 0046 0093     		str	r3, [sp]
 7329 0048 4146     		mov	r1, r8
 7330 004a 4846     		mov	r0, r9
 7331 004c 8E23     		movs	r3, #142
 7332 004e 4A22     		movs	r2, #74
 7333 0050 FFF7FEFF 		bl	s_s_sized
 7334              	.LVL833:
3345:src/display.c ****       }
 7335              		.loc 1 3345 2 is_stmt 0 view .LVU2368
 7336              	.LBE462:
 7337              	.LBE461:
3594:src/display.c ****       }
 7338              		.loc 1 3594 7 view .LVU2369
 7339 0054 03B0     		add	sp, sp, #12
 7340              		.cfi_remember_state
 7341              		.cfi_def_cfa_offset 28
 7342              		@ sp needed
 7343 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7344              	.LVL834:
 7345              	.L728:
 7346              		.cfi_restore_state
 7347              	.LBB463:
 7348              	.LBI463:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7349              		.loc 1 3492 18 is_stmt 1 view .LVU2370
 7350              	.LBB464:
3493:src/display.c ****       }
 7351              		.loc 1 3493 2 view .LVU2371
3493:src/display.c ****       }
 7352              		.loc 1 3493 9 is_stmt 0 view .LVU2372
 7353 005a 0021     		movs	r1, #0
 7354 005c FFF7FEFF 		bl	pixel_length
 7355              	.LVL835:
3493:src/display.c ****       }
 7356              		.loc 1 3493 9 view .LVU2373
 7357              	.LBE464:
 7358              	.LBE463:
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7359              		.loc 1 3582 41 view .LVU2374
 7360 0060 4B28     		cmp	r0, #75
 7361 0062 D6DC     		bgt	.L715
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7362              		.loc 1 3582 12 view .LVU2375
 7363 0064 4FF00008 		mov	r8, #0
3583:src/display.c **** 
ARM GAS  /tmp/ccpF0v4D.s 			page 231


 7364              		.loc 1 3583 36 view .LVU2376
 7365 0068 4746     		mov	r7, r8
 7366 006a D6E7     		b	.L716
 7367              	.L730:
 7368              		.align	2
 7369              	.L729:
 7370 006c 00000000 		.word	StateWhileOn
 7371              		.cfi_endproc
 7372              	.LFE47:
 7374              		.section	.text.set_status_top.part.0,"ax",%progbits
 7375              		.align	1
 7376              		.p2align 2,,3
 7377              		.syntax unified
 7378              		.thumb
 7379              		.thumb_func
 7380              		.fpu fpv4-sp-d16
 7382              	set_status_top.part.0:
 7383              	.LVL836:
 7384              	.LFB57:
3505:src/display.c **** 	if (no_status_top) return;
 7385              		.loc 1 3505 19 is_stmt 1 view -0
 7386              		.cfi_startproc
 7387              		@ args = 0, pretend = 0, frame = 0
 7388              		@ frame_needed = 0, uses_anonymous_args = 0
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7389              		.loc 1 3507 2 view .LVU2378
3505:src/display.c **** 	if (no_status_top) return;
 7390              		.loc 1 3505 19 is_stmt 0 view .LVU2379
 7391 0000 10B5     		push	{r4, lr}
 7392              		.cfi_def_cfa_offset 8
 7393              		.cfi_offset 4, -8
 7394              		.cfi_offset 14, -4
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7395              		.loc 1 3507 6 view .LVU2380
 7396 0002 184B     		ldr	r3, .L741
 7397 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7398              		.loc 1 3507 5 view .LVU2381
 7399 0006 13F04001 		ands	r1, r3, #64
3505:src/display.c **** 	if (no_status_top) return;
 7400              		.loc 1 3505 19 view .LVU2382
 7401 000a 82B0     		sub	sp, sp, #8
 7402              		.cfi_def_cfa_offset 16
3505:src/display.c **** 	if (no_status_top) return;
 7403              		.loc 1 3505 19 view .LVU2383
 7404 000c 0446     		mov	r4, r0
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7405              		.loc 1 3507 5 view .LVU2384
 7406 000e 0DD0     		beq	.L732
3508:src/display.c **** 	}
 7407              		.loc 1 3508 4 is_stmt 1 view .LVU2385
 7408 0010 1A06     		lsls	r2, r3, #24
 7409 0012 18D5     		bpl	.L739
 7410 0014 0121     		movs	r1, #1
 7411              	.LVL837:
 7412              	.L733:
 7413              	.LBB465:
ARM GAS  /tmp/ccpF0v4D.s 			page 232


 7414              	.LBI465:
3347:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7415              		.loc 1 3347 19 view .LVU2386
 7416              	.LBB466:
3348:src/display.c ****       }
 7417              		.loc 1 3348 2 view .LVU2387
 7418 0016 4FF45373 		mov	r3, #844
 7419 001a 0093     		str	r3, [sp]
 7420 001c 2046     		mov	r0, r4
 7421 001e 40F24A23 		movw	r3, #586
 7422 0022 2B22     		movs	r2, #43
 7423 0024 FFF7FEFF 		bl	s_s_sized
 7424              	.LVL838:
3348:src/display.c ****       }
 7425              		.loc 1 3348 2 is_stmt 0 view .LVU2388
 7426              	.LBE466:
 7427              	.LBE465:
3513:src/display.c **** #ifdef TOP_ROW
 7428              		.loc 1 3513 7 view .LVU2389
 7429 0028 02B0     		add	sp, sp, #8
 7430              		.cfi_remember_state
 7431              		.cfi_def_cfa_offset 8
 7432              		@ sp needed
 7433 002a 10BD     		pop	{r4, pc}
 7434              	.LVL839:
 7435              	.L732:
 7436              		.cfi_restore_state
3511:src/display.c **** 	}
 7437              		.loc 1 3511 4 is_stmt 1 view .LVU2390
 7438 002c 1B06     		lsls	r3, r3, #24
 7439 002e 12D5     		bpl	.L740
 7440 0030 0121     		movs	r1, #1
 7441              	.LVL840:
 7442              	.L735:
 7443              	.LBB467:
 7444              	.LBI467:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7445              		.loc 1 3344 19 view .LVU2391
 7446              	.LBB468:
3345:src/display.c ****       }
 7447              		.loc 1 3345 2 view .LVU2392
 7448 0032 40F24A23 		movw	r3, #586
 7449 0036 0093     		str	r3, [sp]
 7450 0038 2046     		mov	r0, r4
 7451 003a 8E23     		movs	r3, #142
 7452 003c 4A22     		movs	r2, #74
 7453 003e FFF7FEFF 		bl	s_s_sized
 7454              	.LVL841:
3345:src/display.c ****       }
 7455              		.loc 1 3345 2 is_stmt 0 view .LVU2393
 7456              	.LBE468:
 7457              	.LBE467:
3513:src/display.c **** #ifdef TOP_ROW
 7458              		.loc 1 3513 7 view .LVU2394
 7459 0042 02B0     		add	sp, sp, #8
 7460              		.cfi_remember_state
 7461              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpF0v4D.s 			page 233


 7462              		@ sp needed
 7463 0044 10BD     		pop	{r4, pc}
 7464              	.LVL842:
 7465              	.L739:
 7466              		.cfi_restore_state
 7467              	.LBB469:
 7468              	.LBI469:
3495:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7469              		.loc 1 3495 18 is_stmt 1 view .LVU2395
 7470              	.LBB470:
3496:src/display.c ****       }
 7471              		.loc 1 3496 2 view .LVU2396
3496:src/display.c ****       }
 7472              		.loc 1 3496 9 is_stmt 0 view .LVU2397
 7473 0046 0021     		movs	r1, #0
 7474 0048 FFF7FEFF 		bl	pixel_length
 7475              	.LVL843:
3496:src/display.c ****       }
 7476              		.loc 1 3496 9 view .LVU2398
 7477              	.LBE470:
 7478              	.LBE469:
3508:src/display.c **** 	}
 7479              		.loc 1 3508 4 view .LVU2399
 7480 004c 2C28     		cmp	r0, #44
 7481 004e D4BF     		ite	le
 7482 0050 0021     		movle	r1, #0
 7483 0052 0121     		movgt	r1, #1
 7484 0054 DFE7     		b	.L733
 7485              	.LVL844:
 7486              	.L740:
 7487              	.LBB471:
 7488              	.LBI471:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7489              		.loc 1 3492 18 is_stmt 1 view .LVU2400
 7490              	.LBB472:
3493:src/display.c ****       }
 7491              		.loc 1 3493 2 view .LVU2401
3493:src/display.c ****       }
 7492              		.loc 1 3493 9 is_stmt 0 view .LVU2402
 7493 0056 FFF7FEFF 		bl	pixel_length
 7494              	.LVL845:
3493:src/display.c ****       }
 7495              		.loc 1 3493 9 view .LVU2403
 7496              	.LBE472:
 7497              	.LBE471:
3511:src/display.c **** 	}
 7498              		.loc 1 3511 4 view .LVU2404
 7499 005a 4B28     		cmp	r0, #75
 7500 005c D4BF     		ite	le
 7501 005e 0021     		movle	r1, #0
 7502 0060 0121     		movgt	r1, #1
 7503 0062 E6E7     		b	.L735
 7504              	.L742:
 7505              		.align	2
 7506              	.L741:
 7507 0064 00000000 		.word	StateWhileOn
 7508              		.cfi_endproc
ARM GAS  /tmp/ccpF0v4D.s 			page 234


 7509              	.LFE57:
 7511              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7512              		.align	2
 7513              	.LC3:
 7514 0000 32630600 		.ascii	"2c\006\000"
 7515              		.align	2
 7516              	.LC4:
 7517 0004 07C63C00 		.ascii	"\007\306<\000"
 7518              		.align	2
 7519              	.LC5:
 7520 0008 07876900 		.ascii	"\007\207i\000"
 7521              		.align	2
 7522              	.LC6:
 7523 000c 07C67900 		.ascii	"\007\306y\000"
 7524              		.align	2
 7525              	.LC7:
 7526 0010 07950600 		.ascii	"\007\225\006\000"
 7527              		.align	2
 7528              	.LC8:
 7529 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7529      060600
 7530 001b 00       		.align	2
 7531              	.LC9:
 7532 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7532      060600
 7533 0023 00       		.align	2
 7534              	.LC10:
 7535 0024 07C74400 		.ascii	"\007\307D\000"
 7536              		.align	2
 7537              	.LC11:
 7538 0028 07872000 		.ascii	"\007\207 \000"
 7539              		.align	2
 7540              	.LC12:
 7541 002c 06060788 		.ascii	"\006\006\007\210\007\000"
 7541      0700
 7542 0032 0000     		.align	2
 7543              	.LC13:
 7544 0034 07C73C00 		.ascii	"\007\307<\000"
 7545              		.align	2
 7546              	.LC14:
 7547 0038 07C77900 		.ascii	"\007\307y\000"
 7548              		.align	2
 7549              	.LC15:
 7550 003c 0784060D 		.ascii	"\007\204\006\015\000"
 7550      00
 7551 0041 000000   		.align	2
 7552              	.LC17:
 7553 0044 07E43F00 		.ascii	"\007\344?\000"
 7554              		.section	.text.annunciators,"ax",%progbits
 7555              		.align	1
 7556              		.p2align 2,,3
 7557              		.syntax unified
 7558              		.thumb
 7559              		.thumb_func
 7560              		.fpu fpv4-sp-d16
 7562              	annunciators:
 7563              	.LFB16:
ARM GAS  /tmp/ccpF0v4D.s 			page 235


 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7564              		.loc 1 601 36 is_stmt 1 view -0
 7565              		.cfi_startproc
 7566              		@ args = 0, pretend = 0, frame = 128
 7567              		@ frame_needed = 0, uses_anonymous_args = 0
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7568              		.loc 1 603 7 view .LVU2406
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7569              		.loc 1 601 36 is_stmt 0 view .LVU2407
 7570 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7571              		.cfi_def_cfa_offset 28
 7572              		.cfi_offset 4, -28
 7573              		.cfi_offset 5, -24
 7574              		.cfi_offset 6, -20
 7575              		.cfi_offset 7, -16
 7576              		.cfi_offset 8, -12
 7577              		.cfi_offset 9, -8
 7578              		.cfi_offset 14, -4
 615:src/display.c **** #  endif
 7579              		.loc 1 615 38 view .LVU2408
 7580 0004 BF4F     		ldr	r7, .L871
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7581              		.loc 1 601 36 view .LVU2409
 7582 0006 A3B0     		sub	sp, sp, #140
 7583              		.cfi_def_cfa_offset 168
 7584              	.LVL846:
 604:src/display.c ****       int n;
 7585              		.loc 1 604 7 is_stmt 1 view .LVU2410
 605:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7586              		.loc 1 605 7 view .LVU2411
 606:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7587              		.loc 1 606 7 view .LVU2412
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7588              		.loc 1 607 7 view .LVU2413
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7589              		.loc 1 607 43 is_stmt 0 view .LVU2414
 7590 0008 FFF7FEFF 		bl	cur_shift
 7591              	.LVL847:
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7592              		.loc 1 607 18 view .LVU2415
 7593 000c BE4B     		ldr	r3, .L871+4
 615:src/display.c **** #  endif
 7594              		.loc 1 615 38 view .LVU2416
 7595 000e 3A68     		ldr	r2, [r7]
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7596              		.loc 1 607 18 view .LVU2417
 7597 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7598              	.LVL848:
 615:src/display.c **** #  endif
 7599              		.loc 1 615 7 is_stmt 1 view .LVU2418
 615:src/display.c **** #  endif
 7600              		.loc 1 615 38 is_stmt 0 view .LVU2419
 7601 0014 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7602              		.loc 1 646 7 view .LVU2420
 7603 0018 0CAE     		add	r6, sp, #48
 7604              	.LVL849:
ARM GAS  /tmp/ccpF0v4D.s 			page 236


 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7605              		.loc 1 646 7 view .LVU2421
 7606 001a 2A22     		movs	r2, #42
 7607 001c 0021     		movs	r1, #0
 7608 001e 3046     		mov	r0, r6
 7609 0020 FFF7FEFF 		bl	xset
 7610              	.LVL850:
 647:src/display.c ****       
 7611              		.loc 1 647 7 view .LVU2422
 7612 0024 0021     		movs	r1, #0
 7613 0026 17A8     		add	r0, sp, #92
 7614              	.LVL851:
 647:src/display.c ****       
 7615              		.loc 1 647 7 view .LVU2423
 7616 0028 2A22     		movs	r2, #42
 7617 002a FFF7FEFF 		bl	xset
 7618              	.LVL852:
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7619              		.loc 1 649 11 view .LVU2424
 7620 002e 3B68     		ldr	r3, [r7]
 7621 0030 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7622              		.loc 1 649 10 view .LVU2425
 7623 0034 D907     		lsls	r1, r3, #31
 615:src/display.c **** #  endif
 7624              		.loc 1 615 17 view .LVU2426
 7625 0036 C4F38004 		ubfx	r4, r4, #2, #1
 7626              	.LVL853:
 618:src/display.c **** #  else
 7627              		.loc 1 618 7 is_stmt 1 view .LVU2427
 623:src/display.c **** #  else
 7628              		.loc 1 623 7 view .LVU2428
 633:src/display.c **** #else
 7629              		.loc 1 633 7 view .LVU2429
 641:src/display.c **** #else
 7630              		.loc 1 641 7 view .LVU2430
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7631              		.loc 1 646 7 view .LVU2431
 647:src/display.c ****       
 7632              		.loc 1 647 7 view .LVU2432
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7633              		.loc 1 649 7 view .LVU2433
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7634              		.loc 1 649 10 is_stmt 0 view .LVU2434
 7635 003a 00F1FB80 		bmi	.L854
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7636              		.loc 1 688 12 is_stmt 1 view .LVU2435
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7637              		.loc 1 688 15 is_stmt 0 view .LVU2436
 7638 003e 84BB     		cbnz	r4, .L758
 706:src/display.c **** 	    *p2++ = shift_char;
 7639              		.loc 1 706 4 is_stmt 1 view .LVU2437
 706:src/display.c **** 	    *p2++ = shift_char;
 7640              		.loc 1 706 7 is_stmt 0 view .LVU2438
 7641 0040 B8F1200F 		cmp	r8, #32
 7642 0044 00F0D581 		beq	.L759
 7643              	.L761:
ARM GAS  /tmp/ccpF0v4D.s 			page 237


 707:src/display.c **** 	    *p2++ = '\006';
 7644              		.loc 1 707 6 is_stmt 1 view .LVU2439
 7645              	.LVL854:
 708:src/display.c **** 	  }
 7646              		.loc 1 708 12 is_stmt 0 view .LVU2440
 7647 0048 0623     		movs	r3, #6
 707:src/display.c **** 	    *p2++ = '\006';
 7648              		.loc 1 707 12 view .LVU2441
 7649 004a 8DF85C80 		strb	r8, [sp, #92]
 708:src/display.c **** 	  }
 7650              		.loc 1 708 6 is_stmt 1 view .LVU2442
 7651              	.LVL855:
 708:src/display.c **** 	  }
 7652              		.loc 1 708 12 is_stmt 0 view .LVU2443
 7653 004e 8DF85D30 		strb	r3, [sp, #93]
 708:src/display.c **** 	  }
 7654              		.loc 1 708 9 view .LVU2444
 7655 0052 0DF15E00 		add	r0, sp, #94
 7656              	.LVL856:
 7657              	.L760:
 714:src/display.c **** 	  *p2++ = ' ';
 7658              		.loc 1 714 2 is_stmt 1 view .LVU2445
 714:src/display.c **** 	  *p2++ = ' ';
 7659              		.loc 1 714 6 is_stmt 0 view .LVU2446
 7660 0056 AD4D     		ldr	r5, .L871+8
 7661 0058 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 714:src/display.c **** 	  *p2++ = ' ';
 7662              		.loc 1 714 5 view .LVU2447
 7663 005a 9A07     		lsls	r2, r3, #30
 7664 005c 00F1A881 		bmi	.L855
 719:src/display.c **** 	  *p2++ = ' ';
 7665              		.loc 1 719 2 is_stmt 1 view .LVU2448
 719:src/display.c **** 	  *p2++ = ' ';
 7666              		.loc 1 719 5 is_stmt 0 view .LVU2449
 7667 0060 5907     		lsls	r1, r3, #29
 7668 0062 00F18881 		bmi	.L856
 725:src/display.c **** 	  if (State2.wascomplex) {
 7669              		.loc 1 725 2 is_stmt 1 view .LVU2450
 725:src/display.c **** 	  if (State2.wascomplex) {
 7670              		.loc 1 725 5 is_stmt 0 view .LVU2451
 7671 0066 B8F1200F 		cmp	r8, #32
 7672 006a 00F0D481 		beq	.L857
 7673              	.L764:
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7674              		.loc 1 742 2 is_stmt 1 view .LVU2452
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7675              		.loc 1 742 16 is_stmt 0 view .LVU2453
 7676 006e 3B68     		ldr	r3, [r7]
 7677 0070 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7678 0074 C3F30113 		ubfx	r3, r3, #4, #2
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7679              		.loc 1 742 2 view .LVU2454
 7680 0078 012B     		cmp	r3, #1
 7681 007a 00F01382 		beq	.L805
 7682 007e A449     		ldr	r1, .L871+12
 7683 0080 A44A     		ldr	r2, .L871+16
 7684 0082 022B     		cmp	r3, #2
ARM GAS  /tmp/ccpF0v4D.s 			page 238


 7685 0084 08BF     		it	eq
 7686 0086 1146     		moveq	r1, r2
 7687              	.L766:
 7688              	.LVL857:
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7689              		.loc 1 756 2 is_stmt 1 view .LVU2455
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7690              		.loc 1 756 7 is_stmt 0 view .LVU2456
 7691 0088 FFF7FEFF 		bl	scopy
 7692              	.LVL858:
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7693              		.loc 1 756 7 view .LVU2457
 7694 008c 0446     		mov	r4, r0
 7695              	.LVL859:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7696              		.loc 1 758 2 is_stmt 1 view .LVU2458
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7697              		.loc 1 758 6 is_stmt 0 view .LVU2459
 7698 008e FFF7FEFF 		bl	get_trig_mode
 7699              	.LVL860:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7700              		.loc 1 758 5 view .LVU2460
 7701 0092 0228     		cmp	r0, #2
 7702 0094 40F02381 		bne	.L757
 759:src/display.c **** 	}
 7703              		.loc 1 759 4 is_stmt 1 view .LVU2461
 7704 0098 9F49     		ldr	r1, .L871+20
 7705 009a 2046     		mov	r0, r4
 7706 009c FFF7FEFF 		bl	scopy
 7707              	.LVL861:
 7708 00a0 1DE1     		b	.L757
 7709              	.LVL862:
 7710              	.L758:
 770:src/display.c **** 	  *p2++ = '\007';
 7711              		.loc 1 770 2 view .LVU2462
 770:src/display.c **** 	  *p2++ = '\007';
 7712              		.loc 1 770 6 is_stmt 0 view .LVU2463
 7713 00a2 9A4D     		ldr	r5, .L871+8
 7714 00a4 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 770:src/display.c **** 	  *p2++ = '\007';
 7715              		.loc 1 770 5 view .LVU2464
 7716 00a6 9A07     		lsls	r2, r3, #30
 7717 00a8 00F14A81 		bmi	.L858
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7718              		.loc 1 778 4 is_stmt 1 view .LVU2465
 7719              	.LVL863:
 779:src/display.c **** 	  *p2++ = shift_char;
 7720              		.loc 1 779 4 view .LVU2466
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7721              		.loc 1 778 10 is_stmt 0 view .LVU2467
 7722 00ac 4CF20773 		movw	r3, #50951
 7723 00b0 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 780:src/display.c **** 	  //	  goto no_copy;
 7724              		.loc 1 780 4 is_stmt 1 view .LVU2468
 7725              	.LVL864:
 785:src/display.c **** 	    q = "\007\207i";
 7726              		.loc 1 785 8 is_stmt 0 view .LVU2469
ARM GAS  /tmp/ccpF0v4D.s 			page 239


 7727 00b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 780:src/display.c **** 	  //	  goto no_copy;
 7728              		.loc 1 780 10 view .LVU2470
 7729 00b6 8DF85E80 		strb	r8, [sp, #94]
 785:src/display.c **** 	    q = "\007\207i";
 7730              		.loc 1 785 7 view .LVU2471
 7731 00ba 13F0C00F 		tst	r3, #192
 780:src/display.c **** 	  //	  goto no_copy;
 7732              		.loc 1 780 7 view .LVU2472
 7733 00be 0DF15F09 		add	r9, sp, #95
 7734              	.LVL865:
 785:src/display.c **** 	    q = "\007\207i";
 7735              		.loc 1 785 4 is_stmt 1 view .LVU2473
 785:src/display.c **** 	    q = "\007\207i";
 7736              		.loc 1 785 7 is_stmt 0 view .LVU2474
 7737 00c2 40F04D81 		bne	.L859
 7738              	.L769:
 790:src/display.c **** 	    q = "\007\307<";
 7739              		.loc 1 790 9 is_stmt 1 view .LVU2475
 790:src/display.c **** 	    q = "\007\307<";
 7740              		.loc 1 790 23 is_stmt 0 view .LVU2476
 7741 00c6 954B     		ldr	r3, .L871+24
 7742 00c8 1B68     		ldr	r3, [r3]
 790:src/display.c **** 	    q = "\007\307<";
 7743              		.loc 1 790 12 view .LVU2477
 7744 00ca 012B     		cmp	r3, #1
 7745 00cc 00F0B681 		beq	.L860
 795:src/display.c **** 	    q = "\007\307y";
 7746              		.loc 1 795 9 is_stmt 1 view .LVU2478
 795:src/display.c **** 	    q = "\007\307y";
 7747              		.loc 1 795 12 is_stmt 0 view .LVU2479
 7748 00d0 022B     		cmp	r3, #2
 7749 00d2 00F0E981 		beq	.L861
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7750              		.loc 1 603 22 view .LVU2480
 7751 00d6 B046     		mov	r8, r6
 7752              	.LVL866:
 7753              	.L770:
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7754              		.loc 1 802 6 is_stmt 1 view .LVU2481
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7755              		.loc 1 802 10 is_stmt 0 view .LVU2482
 7756 00d8 FFF7FEFF 		bl	get_trig_mode
 7757              	.LVL867:
 804:src/display.c **** 	      *p2++ = '\207';
 7758              		.loc 1 804 14 view .LVU2483
 7759 00dc 0723     		movs	r3, #7
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7760              		.loc 1 802 9 view .LVU2484
 7761 00de 0228     		cmp	r0, #2
 805:src/display.c **** 	      *p2++ = '\007';	    
 7762              		.loc 1 805 14 view .LVU2485
 7763 00e0 4FF08702 		mov	r2, #135
 804:src/display.c **** 	      *p2++ = '\207';
 7764              		.loc 1 804 14 view .LVU2486
 7765 00e4 89F80030 		strb	r3, [r9]
 802:src/display.c **** 	    //	    q = "\007\207\007";
ARM GAS  /tmp/ccpF0v4D.s 			page 240


 7766              		.loc 1 802 9 view .LVU2487
 7767 00e8 00F06781 		beq	.L862
 809:src/display.c **** 	      *p2++ = '\207';
 7768              		.loc 1 809 8 is_stmt 1 view .LVU2488
 7769              	.LVL868:
 810:src/display.c **** 	      *p2++ = ' ';
 7770              		.loc 1 810 8 view .LVU2489
 811:src/display.c **** 	    }
 7771              		.loc 1 811 14 is_stmt 0 view .LVU2490
 7772 00ec 2023     		movs	r3, #32
 810:src/display.c **** 	      *p2++ = ' ';
 7773              		.loc 1 810 14 view .LVU2491
 7774 00ee 89F80120 		strb	r2, [r9, #1]
 811:src/display.c **** 	    }
 7775              		.loc 1 811 8 is_stmt 1 view .LVU2492
 811:src/display.c **** 	    }
 7776              		.loc 1 811 14 is_stmt 0 view .LVU2493
 7777 00f2 89F80230 		strb	r3, [r9, #2]
 811:src/display.c **** 	    }
 7778              		.loc 1 811 11 view .LVU2494
 7779 00f6 09F10309 		add	r9, r9, #3
 7780              	.LVL869:
 7781              	.L773:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7782              		.loc 1 816 4 is_stmt 1 view .LVU2495
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7783              		.loc 1 816 9 is_stmt 0 view .LVU2496
 7784 00fa FFF7FEFF 		bl	is_dblmode
 7785              	.LVL870:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7786              		.loc 1 816 36 view .LVU2497
 7787 00fe 884B     		ldr	r3, .L871+28
 7788 0100 884A     		ldr	r2, .L871+32
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7789              		.loc 1 816 9 view .LVU2498
 7790 0102 0146     		mov	r1, r0
 7791              	.LVL871:
 817:src/display.c **** #else
 7792              		.loc 1 817 4 is_stmt 1 view .LVU2499
 817:src/display.c **** #else
 7793              		.loc 1 817 9 is_stmt 0 view .LVU2500
 7794 0104 0029     		cmp	r1, #0
 7795 0106 14BF     		ite	ne
 7796 0108 1146     		movne	r1, r2
 7797 010a 1946     		moveq	r1, r3
 7798              	.LVL872:
 817:src/display.c **** #else
 7799              		.loc 1 817 9 view .LVU2501
 7800 010c 4846     		mov	r0, r9
 7801 010e FFF7FEFF 		bl	scopy
 7802              	.LVL873:
 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7803              		.loc 1 836 16 view .LVU2502
 7804 0112 3B68     		ldr	r3, [r7]
 7805 0114 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7806 0118 C1F30111 		ubfx	r1, r1, #4, #2
 7807              	.LVL874:
ARM GAS  /tmp/ccpF0v4D.s 			page 241


 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7808              		.loc 1 836 2 is_stmt 1 view .LVU2503
 7809 011c 0129     		cmp	r1, #1
 7810 011e 00F05381 		beq	.L809
 7811 0122 7B4B     		ldr	r3, .L871+12
 7812 0124 7B4A     		ldr	r2, .L871+16
 7813 0126 0229     		cmp	r1, #2
 7814 0128 14BF     		ite	ne
 7815 012a 1946     		movne	r1, r3
 7816 012c 1146     		moveq	r1, r2
 7817              	.L775:
 7818              	.LVL875:
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7819              		.loc 1 853 2 view .LVU2504
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7820              		.loc 1 853 6 is_stmt 0 view .LVU2505
 7821 012e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7822              		.loc 1 853 5 view .LVU2506
 7823 0130 5B07     		lsls	r3, r3, #29
 854:src/display.c **** 	} // no need to skip y display with arrow here
 7824              		.loc 1 854 4 is_stmt 1 view .LVU2507
 7825 0132 48BF     		it	mi
 7826 0134 7C49     		ldrmi	r1, .L871+36
 7827              	.LVL876:
 857:src/display.c **** 	}
 7828              		.loc 1 857 4 view .LVU2508
 857:src/display.c **** 	}
 7829              		.loc 1 857 9 is_stmt 0 view .LVU2509
 7830 0136 FFF7FEFF 		bl	scopy
 7831              	.LVL877:
 859:src/display.c **** 	  decNumber y;
 7832              		.loc 1 859 2 is_stmt 1 view .LVU2510
 859:src/display.c **** 	  decNumber y;
 7833              		.loc 1 859 6 is_stmt 0 view .LVU2511
 7834 013a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 859:src/display.c **** 	  decNumber y;
 7835              		.loc 1 859 5 view .LVU2512
 7836 013c 5A06     		lsls	r2, r3, #25
 7837 013e 40F1D180 		bpl	.L796
 7838              	.L747:
 7839              	.LBB483:
 860:src/display.c **** 	display_yreg:
 7840              		.loc 1 860 4 is_stmt 1 view .LVU2513
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7841              		.loc 1 867 4 view .LVU2514
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7842              		.loc 1 867 8 is_stmt 0 view .LVU2515
 7843 0142 3B68     		ldr	r3, [r7]
 7844 0144 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7845              		.loc 1 867 7 view .LVU2516
 7846 0148 DB07     		lsls	r3, r3, #31
 7847 014a 00F15D81 		bmi	.L863
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7848              		.loc 1 872 4 is_stmt 1 view .LVU2517
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
ARM GAS  /tmp/ccpF0v4D.s 			page 242


 7849              		.loc 1 872 34 is_stmt 0 view .LVU2518
 7850 014e DFF8E891 		ldr	r9, .L871+52
 7851 0152 D9F80010 		ldr	r1, [r9]
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7852              		.loc 1 872 4 view .LVU2519
 7853 0156 6329     		cmp	r1, #99
 7854 0158 00F33881 		bgt	.L864
 7855              	.LVL878:
 7856              	.L781:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7857              		.loc 1 872 4 discriminator 5 view .LVU2520
 7858 015c 0131     		adds	r1, r1, #1
 7859              	.L785:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7860              		.loc 1 872 4 discriminator 6 view .LVU2521
 7861 015e 03A8     		add	r0, sp, #12
 7862 0160 FFF7FEFF 		bl	getRegister
 7863              	.LVL879:
 875:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7864              		.loc 1 875 4 is_stmt 1 discriminator 6 view .LVU2522
 875:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7865              		.loc 1 875 7 is_stmt 0 discriminator 6 view .LVU2523
 7866 0164 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 7867 0168 11F07001 		ands	r1, r1, #112
 7868 016c 40D1     		bne	.L787
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7869              		.loc 1 876 6 is_stmt 1 view .LVU2524
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7870              		.loc 1 876 19 is_stmt 0 view .LVU2525
 7871 016e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7872              		.loc 1 876 9 view .LVU2526
 7873 0170 13F0010F 		tst	r3, #1
 7874              	.LBB484:
 877:src/display.c **** 
 7875              		.loc 1 877 44 view .LVU2527
 7876 0174 3B68     		ldr	r3, [r7]
 7877              	.LBE484:
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7878              		.loc 1 876 9 view .LVU2528
 7879 0176 40F06781 		bne	.L865
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7880              		.loc 1 897 6 is_stmt 1 view .LVU2529
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7881              		.loc 1 897 21 is_stmt 0 view .LVU2530
 7882 017a 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7883              		.loc 1 897 9 view .LVU2531
 7884 017e 9806     		lsls	r0, r3, #26
 7885 0180 36D5     		bpl	.L787
 899:src/display.c **** #endif
 7886              		.loc 1 899 6 view .LVU2532
 7887 0182 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 899:src/display.c **** #endif
 7888              		.loc 1 899 3 view .LVU2533
 7889 0184 13F00204 		ands	r4, r3, #2
 7890 0188 32D1     		bne	.L787
ARM GAS  /tmp/ccpF0v4D.s 			page 243


 902:src/display.c **** #endif
 7891              		.loc 1 902 6 view .LVU2534
 7892 018a 644B     		ldr	r3, .L871+24
 902:src/display.c **** #endif
 7893              		.loc 1 902 3 view .LVU2535
 7894 018c 1B68     		ldr	r3, [r3]
 7895 018e 012B     		cmp	r3, #1
 7896 0190 2ED0     		beq	.L787
 904:src/display.c **** 	      char ltgteq;
 7897              		.loc 1 904 6 view .LVU2536
 7898 0192 4146     		mov	r1, r8
 7899 0194 03A8     		add	r0, sp, #12
 7900 0196 FFF7FEFF 		bl	set_x_fract
 7901              	.LVL880:
 904:src/display.c **** 	      char ltgteq;
 7902              		.loc 1 904 3 view .LVU2537
 7903 019a 48B3     		cbz	r0, .L787
 7904              	.LBB485:
 905:src/display.c **** 
 7905              		.loc 1 905 8 is_stmt 1 view .LVU2538
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7906              		.loc 1 907 8 view .LVU2539
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7907              		.loc 1 907 12 is_stmt 0 view .LVU2540
 7908 019c 2146     		mov	r1, r4
 7909 019e 3046     		mov	r0, r6
 7910 01a0 FFF7FEFF 		bl	find_char
 7911              	.LVL881:
 7912 01a4 0446     		mov	r4, r0
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7913              		.loc 1 907 10 view .LVU2541
 7914 01a6 0238     		subs	r0, r0, #2
 7915              	.LVL882:
 909:src/display.c **** 	      switch (ltgteq) {
 7916              		.loc 1 909 8 is_stmt 1 view .LVU2542
 909:src/display.c **** 	      switch (ltgteq) {
 7917              		.loc 1 909 15 is_stmt 0 view .LVU2543
 7918 01a8 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7919              	.LVL883:
 910:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7920              		.loc 1 910 8 is_stmt 1 view .LVU2544
 7921 01ac 472F     		cmp	r7, #71
 7922 01ae 00F08881 		beq	.L811
 912:src/display.c **** 	      }
 7923              		.loc 1 912 25 is_stmt 0 view .LVU2545
 7924 01b2 4C2F     		cmp	r7, #76
 7925 01b4 08BF     		it	eq
 7926 01b6 3C27     		moveq	r7, #60
 7927              	.LVL884:
 7928              	.L792:
 914:src/display.c **** 	      q[2] = ltgteq;
 7929              		.loc 1 914 8 is_stmt 1 view .LVU2546
 7930 01b8 5C49     		ldr	r1, .L871+40
 7931 01ba FFF7FEFF 		bl	scopy
 7932              	.LVL885:
 915:src/display.c **** 
 7933              		.loc 1 915 8 view .LVU2547
ARM GAS  /tmp/ccpF0v4D.s 			page 244


 915:src/display.c **** 
 7934              		.loc 1 915 13 is_stmt 0 view .LVU2548
 7935 01be 2770     		strb	r7, [r4]
 917:src/display.c **** 		goto skip;
 7936              		.loc 1 917 8 is_stmt 1 view .LVU2549
 917:src/display.c **** 		goto skip;
 7937              		.loc 1 917 12 is_stmt 0 view .LVU2550
 7938 01c0 0121     		movs	r1, #1
 7939 01c2 3046     		mov	r0, r6
 7940 01c4 FFF7FEFF 		bl	pixel_length
 7941              	.LVL886:
 917:src/display.c **** 		goto skip;
 7942              		.loc 1 917 11 view .LVU2551
 7943 01c8 2C28     		cmp	r0, #44
 7944 01ca 40F38880 		ble	.L757
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7945              		.loc 1 920 8 is_stmt 1 view .LVU2552
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7946              		.loc 1 920 14 is_stmt 0 view .LVU2553
 7947 01ce 0027     		movs	r7, #0
 7948              	.LVL887:
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7949              		.loc 1 920 14 view .LVU2554
 7950 01d0 04F8037C 		strb	r7, [r4, #-3]
 921:src/display.c **** 		goto skip;
 7951              		.loc 1 921 8 is_stmt 1 view .LVU2555
 921:src/display.c **** 		goto skip;
 7952              		.loc 1 921 12 is_stmt 0 view .LVU2556
 7953 01d4 0121     		movs	r1, #1
 7954 01d6 3046     		mov	r0, r6
 7955 01d8 FFF7FEFF 		bl	pixel_length
 7956              	.LVL888:
 921:src/display.c **** 		goto skip;
 7957              		.loc 1 921 11 view .LVU2557
 7958 01dc 2C28     		cmp	r0, #44
 7959 01de 7EDD     		ble	.L757
 924:src/display.c **** 	    }
 7960              		.loc 1 924 8 is_stmt 1 view .LVU2558
 924:src/display.c **** 	    }
 7961              		.loc 1 924 39 is_stmt 0 view .LVU2559
 7962 01e0 A8EB0602 		sub	r2, r8, r6
 924:src/display.c **** 	    }
 7963              		.loc 1 924 8 view .LVU2560
 7964 01e4 3946     		mov	r1, r7
 7965 01e6 C2F12A02 		rsb	r2, r2, #42
 7966 01ea 4046     		mov	r0, r8
 7967 01ec FFF7FEFF 		bl	xset
 7968              	.LVL889:
 7969              	.L787:
 924:src/display.c **** 	    }
 7970              		.loc 1 924 8 view .LVU2561
 7971              	.LBE485:
 927:src/display.c **** 	    int extra_pixels;
 7972              		.loc 1 927 4 is_stmt 1 view .LVU2562
 927:src/display.c **** 	    int extra_pixels;
 7973              		.loc 1 927 10 is_stmt 0 view .LVU2563
 7974 01f0 0C23     		movs	r3, #12
ARM GAS  /tmp/ccpF0v4D.s 			page 245


 7975 01f2 0293     		str	r3, [sp, #8]
 927:src/display.c **** 	    int extra_pixels;
 7976              		.loc 1 927 27 is_stmt 1 view .LVU2564
 7977 01f4 0EE0     		b	.L794
 7978              	.LVL890:
 7979              	.L866:
 7980              	.LBB486:
 935:src/display.c **** 
 7981              		.loc 1 935 6 is_stmt 0 view .LVU2565
 7982 01f6 029A     		ldr	r2, [sp, #8]
 7983 01f8 0A32     		adds	r2, r2, #10
 7984 01fa FFF7FEFF 		bl	xset
 7985              	.LVL891:
 937:src/display.c **** 	  }
 7986              		.loc 1 937 6 is_stmt 1 view .LVU2566
 937:src/display.c **** 	  }
 7987              		.loc 1 937 30 is_stmt 0 view .LVU2567
 7988 01fe B4F14802 		subs	r2, r4, #72
 937:src/display.c **** 	  }
 7989              		.loc 1 937 8 view .LVU2568
 7990 0202 029B     		ldr	r3, [sp, #8]
 937:src/display.c **** 	  }
 7991              		.loc 1 937 30 view .LVU2569
 7992 0204 48BF     		it	mi
 7993 0206 A4F14502 		submi	r2, r4, #69
 937:src/display.c **** 	  }
 7994              		.loc 1 937 8 view .LVU2570
 7995 020a A3EBA203 		sub	r3, r3, r2, asr #2
 7996              	.LBE486:
 927:src/display.c **** 	    int extra_pixels;
 7997              		.loc 1 927 4 view .LVU2571
 7998 020e 012B     		cmp	r3, #1
 7999              	.LBB487:
 937:src/display.c **** 	  }
 8000              		.loc 1 937 8 view .LVU2572
 8001 0210 0293     		str	r3, [sp, #8]
 8002              	.LBE487:
 927:src/display.c **** 	    int extra_pixels;
 8003              		.loc 1 927 27 is_stmt 1 view .LVU2573
 927:src/display.c **** 	    int extra_pixels;
 8004              		.loc 1 927 4 is_stmt 0 view .LVU2574
 8005 0212 64DD     		ble	.L757
 8006              	.LVL892:
 8007              	.L794:
 8008              	.LBB488:
 928:src/display.c **** 
 8009              		.loc 1 928 6 is_stmt 1 view .LVU2575
 930:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8010              		.loc 1 930 6 view .LVU2576
 8011 0214 02AA     		add	r2, sp, #8
 8012 0216 4146     		mov	r1, r8
 8013 0218 03A8     		add	r0, sp, #12
 8014 021a FFF7FEFF 		bl	set_x_dn
 8015              	.LVL893:
 931:src/display.c **** 	    if (extra_pixels <= 0)
 8016              		.loc 1 931 6 view .LVU2577
 931:src/display.c **** 	    if (extra_pixels <= 0)
ARM GAS  /tmp/ccpF0v4D.s 			page 246


 8017              		.loc 1 931 21 is_stmt 0 view .LVU2578
 8018 021e 0121     		movs	r1, #1
 8019 0220 3046     		mov	r0, r6
 8020 0222 FFF7FEFF 		bl	pixel_length
 8021              	.LVL894:
 935:src/display.c **** 
 8022              		.loc 1 935 6 is_stmt 1 view .LVU2579
 931:src/display.c **** 	    if (extra_pixels <= 0)
 8023              		.loc 1 931 21 is_stmt 0 view .LVU2580
 8024 0226 0446     		mov	r4, r0
 8025              	.LVL895:
 932:src/display.c **** 	      break;
 8026              		.loc 1 932 6 is_stmt 1 view .LVU2581
 932:src/display.c **** 	      break;
 8027              		.loc 1 932 9 is_stmt 0 view .LVU2582
 8028 0228 4B2C     		cmp	r4, #75
 935:src/display.c **** 
 8029              		.loc 1 935 6 view .LVU2583
 8030 022a 4FF00001 		mov	r1, #0
 8031 022e 4046     		mov	r0, r8
 8032              	.LVL896:
 932:src/display.c **** 	      break;
 8033              		.loc 1 932 9 view .LVU2584
 8034 0230 E1DC     		bgt	.L866
 8035              	.LVL897:
 932:src/display.c **** 	      break;
 8036              		.loc 1 932 9 view .LVU2585
 8037              	.LBE488:
 8038 0232 54E0     		b	.L757
 8039              	.LVL898:
 8040              	.L854:
 932:src/display.c **** 	      break;
 8041              		.loc 1 932 9 view .LVU2586
 8042              	.LBE483:
 659:src/display.c **** 	    *p2++ = '\006';
 8043              		.loc 1 659 6 is_stmt 1 view .LVU2587
 660:src/display.c **** 	  }
 8044              		.loc 1 660 12 is_stmt 0 view .LVU2588
 8045 0234 0623     		movs	r3, #6
 8046 0236 8DF85D30 		strb	r3, [sp, #93]
 659:src/display.c **** 	    *p2++ = '\006';
 8047              		.loc 1 659 12 view .LVU2589
 8048 023a 8DF85C80 		strb	r8, [sp, #92]
 660:src/display.c **** 	  }
 8049              		.loc 1 660 6 is_stmt 1 view .LVU2590
 8050              	.LVL899:
 663:src/display.c **** 	default:
 8051              		.loc 1 663 2 view .LVU2591
 663:src/display.c **** 	default:
 8052              		.loc 1 663 9 is_stmt 0 view .LVU2592
 8053 023e FFF7FEFF 		bl	int_mode
 8054              	.LVL900:
 8055 0242 0138     		subs	r0, r0, #1
 8056 0244 C0B2     		uxtb	r0, r0
 8057 0246 0228     		cmp	r0, #2
 8058 0248 96BF     		itet	ls
 8059 024a 394B     		ldrls	r3, .L871+44
ARM GAS  /tmp/ccpF0v4D.s 			page 247


 8060 024c 3949     		ldrhi	r1, .L871+48
 8061 024e 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8062              	.LVL901:
 670:src/display.c **** 	*q++ = '\006';
 8063              		.loc 1 670 2 is_stmt 1 view .LVU2593
 670:src/display.c **** 	*q++ = '\006';
 8064              		.loc 1 670 6 is_stmt 0 view .LVU2594
 8065 0252 0DF15E00 		add	r0, sp, #94
 8066              	.LVL902:
 670:src/display.c **** 	*q++ = '\006';
 8067              		.loc 1 670 6 view .LVU2595
 8068 0256 FFF7FEFF 		bl	scopy
 8069              	.LVL903:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8070              		.loc 1 671 7 view .LVU2596
 8071 025a 8046     		mov	r8, r0
 8072              	.LVL904:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8073              		.loc 1 671 7 view .LVU2597
 8074 025c 0623     		movs	r3, #6
 8075 025e 08F8013B 		strb	r3, [r8], #1
 670:src/display.c **** 	*q++ = '\006';
 8076              		.loc 1 670 6 view .LVU2598
 8077 0262 0546     		mov	r5, r0
 8078              	.LVL905:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8079              		.loc 1 671 2 is_stmt 1 view .LVU2599
 672:src/display.c **** 
 8080              		.loc 1 672 2 view .LVU2600
 672:src/display.c **** 
 8081              		.loc 1 672 7 is_stmt 0 view .LVU2601
 8082 0264 FFF7FEFF 		bl	word_size
 8083              	.LVL906:
 8084 0268 0222     		movs	r2, #2
 8085 026a 0146     		mov	r1, r0
 8086 026c 4046     		mov	r0, r8
 8087 026e FFF7FEFF 		bl	num_arg_0
 8088              	.LVL907:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8089              		.loc 1 674 19 view .LVU2602
 8090 0272 DFF8C8C0 		ldr	ip, .L871+56
 8091 0276 DCF80030 		ldr	r3, [ip]
 8092              	.LVL908:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8093              		.loc 1 674 2 is_stmt 1 view .LVU2603
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8094              		.loc 1 674 5 is_stmt 0 view .LVU2604
 8095 027a 002B     		cmp	r3, #0
 8096 027c 76DD     		ble	.L852
 675:src/display.c **** 	  if (*q == '1')
 8097              		.loc 1 675 4 is_stmt 1 view .LVU2605
 675:src/display.c **** 	  if (*q == '1')
 8098              		.loc 1 675 10 is_stmt 0 view .LVU2606
 8099 027e C3F10702 		rsb	r2, r3, #7
 8100 0282 5200     		lsls	r2, r2, #1
 675:src/display.c **** 	  if (*q == '1')
 8101              		.loc 1 675 6 view .LVU2607
ARM GAS  /tmp/ccpF0v4D.s 			page 248


 8102 0284 0292     		str	r2, [sp, #8]
 676:src/display.c **** 	    n += 2;
 8103              		.loc 1 676 4 is_stmt 1 view .LVU2608
 676:src/display.c **** 	    n += 2;
 8104              		.loc 1 676 7 is_stmt 0 view .LVU2609
 8105 0286 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8106 0288 3129     		cmp	r1, #49
 677:src/display.c **** 	  if (q[1] == '1')
 8107              		.loc 1 677 6 is_stmt 1 view .LVU2610
 677:src/display.c **** 	  if (q[1] == '1')
 8108              		.loc 1 677 8 is_stmt 0 view .LVU2611
 8109 028a 04BF     		itt	eq
 8110 028c 0232     		addeq	r2, r2, #2
 8111 028e 0292     		streq	r2, [sp, #8]
 678:src/display.c **** 	    n += 2;
 8112              		.loc 1 678 4 is_stmt 1 view .LVU2612
 678:src/display.c **** 	    n += 2;
 8113              		.loc 1 678 7 is_stmt 0 view .LVU2613
 8114 0290 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8115 0292 3129     		cmp	r1, #49
 8116 0294 00D1     		bne	.L750
 679:src/display.c **** 	  while (n-- > 0)
 8117              		.loc 1 679 6 is_stmt 1 view .LVU2614
 679:src/display.c **** 	  while (n-- > 0)
 8118              		.loc 1 679 8 is_stmt 0 view .LVU2615
 8119 0296 0232     		adds	r2, r2, #2
 8120              	.L750:
 680:src/display.c **** 	    *p2++ = '\006';
 8121              		.loc 1 680 10 is_stmt 1 view .LVU2616
 680:src/display.c **** 	    *p2++ = '\006';
 8122              		.loc 1 680 12 is_stmt 0 view .LVU2617
 8123 0298 511E     		subs	r1, r2, #1
 680:src/display.c **** 	    *p2++ = '\006';
 8124              		.loc 1 680 10 view .LVU2618
 8125 029a 002A     		cmp	r2, #0
 680:src/display.c **** 	    *p2++ = '\006';
 8126              		.loc 1 680 12 view .LVU2619
 8127 029c 0291     		str	r1, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 8128              		.loc 1 680 10 view .LVU2620
 8129 029e 40F30981 		ble	.L850
 681:src/display.c **** 
 8130              		.loc 1 681 12 view .LVU2621
 8131 02a2 0621     		movs	r1, #6
 8132              	.L751:
 681:src/display.c **** 
 8133              		.loc 1 681 6 is_stmt 1 view .LVU2622
 8134              	.LVL909:
 681:src/display.c **** 
 8135              		.loc 1 681 12 is_stmt 0 view .LVU2623
 8136 02a4 00F8011B 		strb	r1, [r0], #1
 8137              	.LVL910:
 680:src/display.c **** 	    *p2++ = '\006';
 8138              		.loc 1 680 10 is_stmt 1 view .LVU2624
 680:src/display.c **** 	    *p2++ = '\006';
 8139              		.loc 1 680 12 is_stmt 0 view .LVU2625
 8140 02a8 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccpF0v4D.s 			page 249


 8141 02aa 5A1E     		subs	r2, r3, #1
 680:src/display.c **** 	    *p2++ = '\006';
 8142              		.loc 1 680 10 view .LVU2626
 8143 02ac 002B     		cmp	r3, #0
 680:src/display.c **** 	    *p2++ = '\006';
 8144              		.loc 1 680 12 view .LVU2627
 8145 02ae 0292     		str	r2, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 8146              		.loc 1 680 10 view .LVU2628
 8147 02b0 F8DC     		bgt	.L751
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8148              		.loc 1 683 4 is_stmt 1 view .LVU2629
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8149              		.loc 1 683 11 is_stmt 0 view .LVU2630
 8150 02b2 DCF80030 		ldr	r3, [ip]
 8151 02b6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8152              		.loc 1 683 27 is_stmt 1 view .LVU2631
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8153              		.loc 1 683 4 is_stmt 0 view .LVU2632
 8154 02b8 002B     		cmp	r3, #0
 8155 02ba 57DB     		blt	.L852
 8156              	.L799:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8157              		.loc 1 683 4 view .LVU2633
 8158 02bc 134D     		ldr	r5, .L871+8
 8159              	.L756:
 684:src/display.c **** 	}
 8160              		.loc 1 684 6 is_stmt 1 view .LVU2634
 684:src/display.c **** 	}
 8161              		.loc 1 684 20 is_stmt 0 view .LVU2635
 8162 02be 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8163 02c0 C2F3C202 		ubfx	r2, r2, #3, #3
 684:src/display.c **** 	}
 8164              		.loc 1 684 12 view .LVU2636
 8165 02c4 9A42     		cmp	r2, r3
 8166 02c6 0CBF     		ite	eq
 8167 02c8 7C23     		moveq	r3, #124
 8168 02ca 2723     		movne	r3, #39
 8169              	.LVL911:
 684:src/display.c **** 	}
 8170              		.loc 1 684 12 view .LVU2637
 8171 02cc 00F8013B 		strb	r3, [r0], #1
 8172              	.LVL912:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8173              		.loc 1 683 35 is_stmt 1 view .LVU2638
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8174              		.loc 1 683 36 is_stmt 0 view .LVU2639
 8175 02d0 029B     		ldr	r3, [sp, #8]
 8176 02d2 013B     		subs	r3, r3, #1
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8177              		.loc 1 683 4 view .LVU2640
 8178 02d4 002B     		cmp	r3, #0
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8179              		.loc 1 683 36 view .LVU2641
 8180 02d6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccpF0v4D.s 			page 250


 8181              		.loc 1 683 27 is_stmt 1 view .LVU2642
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8182              		.loc 1 683 4 is_stmt 0 view .LVU2643
 8183 02d8 F1DA     		bge	.L756
 686:src/display.c ****       }
 8184              		.loc 1 686 2 is_stmt 1 view .LVU2644
 686:src/display.c ****       }
 8185              		.loc 1 686 5 is_stmt 0 view .LVU2645
 8186 02da 002C     		cmp	r4, #0
 8187 02dc 49D1     		bne	.L867
 8188              	.LVL913:
 8189              	.L757:
 943:src/display.c ****       set_status_top_always(buf2);
 8190              		.loc 1 943 7 is_stmt 1 view .LVU2646
 943:src/display.c ****       set_status_top_always(buf2);
 8191              		.loc 1 943 11 is_stmt 0 view .LVU2647
 8192 02de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 943:src/display.c ****       set_status_top_always(buf2);
 8193              		.loc 1 943 10 view .LVU2648
 8194 02e0 5906     		lsls	r1, r3, #25
 8195 02e2 56D4     		bmi	.L868
 8196              	.L796:
 8197              	.LBB491:
 8198              	.LBB492:
3517:src/display.c ****       }
 8199              		.loc 1 3517 2 is_stmt 1 view .LVU2649
 8200 02e4 1B06     		lsls	r3, r3, #24
 8201 02e6 4BD5     		bpl	.L869
 8202 02e8 0121     		movs	r1, #1
 8203              	.L798:
 8204              	.LVL914:
 8205              	.LBB493:
 8206              	.LBI493:
3347:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8207              		.loc 1 3347 19 view .LVU2650
 8208              	.LBB494:
3348:src/display.c ****       }
 8209              		.loc 1 3348 2 view .LVU2651
 8210 02ea 4FF45373 		mov	r3, #844
 8211 02ee 0093     		str	r3, [sp]
 8212 02f0 17A8     		add	r0, sp, #92
 8213              	.LVL915:
3348:src/display.c ****       }
 8214              		.loc 1 3348 2 is_stmt 0 view .LVU2652
 8215 02f2 40F24A23 		movw	r3, #586
 8216 02f6 2B22     		movs	r2, #43
 8217 02f8 FFF7FEFF 		bl	s_s_sized
 8218              	.LVL916:
3348:src/display.c ****       }
 8219              		.loc 1 3348 2 view .LVU2653
 8220              	.LBE494:
 8221              	.LBE493:
 8222              	.LBE492:
 8223              	.LBE491:
 946:src/display.c **** #else
 8224              		.loc 1 946 5 view .LVU2654
 8225 02fc 23B0     		add	sp, sp, #140
ARM GAS  /tmp/ccpF0v4D.s 			page 251


 8226              		.cfi_remember_state
 8227              		.cfi_def_cfa_offset 28
 8228              		@ sp needed
 8229 02fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8230              	.L872:
 8231 0302 00BF     		.align	2
 8232              	.L871:
 8233 0304 00000000 		.word	main_ram
 8234 0308 00000000 		.word	.LANCHOR15
 8235 030c 00000000 		.word	StateWhileOn
 8236 0310 10000000 		.word	.LC7
 8237 0314 1C000000 		.word	.LC9
 8238 0318 2C000000 		.word	.LC12
 8239 031c 00000000 		.word	RectPolConv
 8240 0320 28000000 		.word	.LC11
 8241 0324 24000000 		.word	.LC10
 8242 0328 3C000000 		.word	.LC15
 8243 032c 44000000 		.word	.LC17
 8244 0330 00000000 		.word	.LANCHOR16
 8245 0334 00000000 		.word	.LC3
 8246 0338 00000000 		.word	ShowRegister
 8247 033c 00000000 		.word	IntMaxWindow
 8248              	.LVL917:
 8249              	.L858:
 8250              		.cfi_restore_state
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8251              		.loc 1 771 4 is_stmt 1 view .LVU2655
 772:src/display.c **** 	  *p2++ = shift_char;
 8252              		.loc 1 772 4 view .LVU2656
 775:src/display.c **** 	}
 8253              		.loc 1 775 10 is_stmt 0 view .LVU2657
 8254 0340 1423     		movs	r3, #20
 8255 0342 8DF85F30 		strb	r3, [sp, #95]
 785:src/display.c **** 	    q = "\007\207i";
 8256              		.loc 1 785 8 view .LVU2658
 8257 0346 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 773:src/display.c **** 	  //	  q = "\024";
 8258              		.loc 1 773 10 view .LVU2659
 8259 0348 8DF85E80 		strb	r8, [sp, #94]
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8260              		.loc 1 771 10 view .LVU2660
 8261 034c 4EF20742 		movw	r2, #58375
 785:src/display.c **** 	    q = "\007\207i";
 8262              		.loc 1 785 7 view .LVU2661
 8263 0350 13F0C00F 		tst	r3, #192
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8264              		.loc 1 771 10 view .LVU2662
 8265 0354 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 773:src/display.c **** 	  //	  q = "\024";
 8266              		.loc 1 773 4 is_stmt 1 view .LVU2663
 8267              	.LVL918:
 775:src/display.c **** 	}
 8268              		.loc 1 775 4 view .LVU2664
 775:src/display.c **** 	}
 8269              		.loc 1 775 7 is_stmt 0 view .LVU2665
 8270 0358 0DF16009 		add	r9, sp, #96
 8271              	.LVL919:
ARM GAS  /tmp/ccpF0v4D.s 			page 252


 785:src/display.c **** 	    q = "\007\207i";
 8272              		.loc 1 785 4 is_stmt 1 view .LVU2666
 785:src/display.c **** 	    q = "\007\207i";
 8273              		.loc 1 785 7 is_stmt 0 view .LVU2667
 8274 035c 3FF4B3AE 		beq	.L769
 8275              	.L859:
 786:src/display.c **** 	    p = scopy(p, q);
 8276              		.loc 1 786 6 is_stmt 1 view .LVU2668
 8277              	.LVL920:
 787:src/display.c **** 	    //	    goto no_copy;
 8278              		.loc 1 787 6 view .LVU2669
 787:src/display.c **** 	    //	    goto no_copy;
 8279              		.loc 1 787 10 is_stmt 0 view .LVU2670
 8280 0360 5949     		ldr	r1, .L873
 8281 0362 3046     		mov	r0, r6
 8282 0364 FFF7FEFF 		bl	scopy
 8283              	.LVL921:
 8284 0368 8046     		mov	r8, r0
 8285              	.LVL922:
 787:src/display.c **** 	    //	    goto no_copy;
 8286              		.loc 1 787 10 view .LVU2671
 8287 036a B5E6     		b	.L770
 8288              	.LVL923:
 8289              	.L852:
 787:src/display.c **** 	    //	    goto no_copy;
 8290              		.loc 1 787 10 view .LVU2672
 8291 036c 574D     		ldr	r5, .L873+4
 686:src/display.c ****       }
 8292              		.loc 1 686 2 is_stmt 1 view .LVU2673
 686:src/display.c ****       }
 8293              		.loc 1 686 5 is_stmt 0 view .LVU2674
 8294 036e 002C     		cmp	r4, #0
 8295 0370 B5D0     		beq	.L757
 8296              	.L867:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8297              		.loc 1 603 22 view .LVU2675
 8298 0372 B046     		mov	r8, r6
 8299              	.LVL924:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8300              		.loc 1 603 22 view .LVU2676
 8301 0374 E5E6     		b	.L747
 8302              	.LVL925:
 8303              	.L856:
 720:src/display.c **** 	  *p2 = '\015';
 8304              		.loc 1 720 4 is_stmt 1 view .LVU2677
 720:src/display.c **** 	  *p2 = '\015';
 8305              		.loc 1 720 10 is_stmt 0 view .LVU2678
 8306 0376 2022     		movs	r2, #32
 721:src/display.c **** 	  goto skip;
 8307              		.loc 1 721 8 view .LVU2679
 8308 0378 0D23     		movs	r3, #13
 720:src/display.c **** 	  *p2 = '\015';
 8309              		.loc 1 720 10 view .LVU2680
 8310 037a 0270     		strb	r2, [r0]
 721:src/display.c **** 	  goto skip;
 8311              		.loc 1 721 4 is_stmt 1 view .LVU2681
 721:src/display.c **** 	  goto skip;
ARM GAS  /tmp/ccpF0v4D.s 			page 253


 8312              		.loc 1 721 8 is_stmt 0 view .LVU2682
 8313 037c 4370     		strb	r3, [r0, #1]
 722:src/display.c **** 	}
 8314              		.loc 1 722 4 is_stmt 1 view .LVU2683
 8315 037e AEE7     		b	.L757
 8316              	.LVL926:
 8317              	.L869:
 8318              	.LBB499:
 8319              	.LBB497:
 8320              	.LBB495:
 8321              	.LBI495:
3495:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8322              		.loc 1 3495 18 view .LVU2684
 8323              	.LBB496:
3496:src/display.c ****       }
 8324              		.loc 1 3496 2 view .LVU2685
3496:src/display.c ****       }
 8325              		.loc 1 3496 9 is_stmt 0 view .LVU2686
 8326 0380 0021     		movs	r1, #0
 8327 0382 17A8     		add	r0, sp, #92
 8328              	.LVL927:
3496:src/display.c ****       }
 8329              		.loc 1 3496 9 view .LVU2687
 8330 0384 FFF7FEFF 		bl	pixel_length
 8331              	.LVL928:
3496:src/display.c ****       }
 8332              		.loc 1 3496 9 view .LVU2688
 8333              	.LBE496:
 8334              	.LBE495:
3517:src/display.c ****       }
 8335              		.loc 1 3517 2 view .LVU2689
 8336 0388 2C28     		cmp	r0, #44
 8337 038a D4BF     		ite	le
 8338 038c 0021     		movle	r1, #0
 8339 038e 0121     		movgt	r1, #1
 8340 0390 ABE7     		b	.L798
 8341              	.L868:
 8342              	.LBE497:
 8343              	.LBE499:
 943:src/display.c ****       set_status_top_always(buf2);
 8344              		.loc 1 943 27 is_stmt 1 discriminator 1 view .LVU2690
 8345 0392 3046     		mov	r0, r6
 8346 0394 FFF7FEFF 		bl	set_status
 8347              	.LVL929:
 944:src/display.c ****       
 8348              		.loc 1 944 7 discriminator 1 view .LVU2691
 8349              	.LBB500:
 8350              	.LBI491:
3515:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8351              		.loc 1 3515 19 discriminator 1 view .LVU2692
 8352              	.LBB498:
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8353              		.loc 1 3516 2 discriminator 1 view .LVU2693
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8354              		.loc 1 3516 6 is_stmt 0 discriminator 1 view .LVU2694
 8355 0398 4D4B     		ldr	r3, .L873+8
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/ccpF0v4D.s 			page 254


 8356              		.loc 1 3516 5 discriminator 1 view .LVU2695
 8357 039a B3F90030 		ldrsh	r3, [r3]
 8358 039e 0BB9     		cbnz	r3, .L795
 8359 03a0 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8360 03a2 9FE7     		b	.L796
 8361              	.L795:
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8362              		.loc 1 3516 22 view .LVU2696
 8363 03a4 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8364 03a6 5A06     		lsls	r2, r3, #25
 8365 03a8 9CD5     		bpl	.L796
 8366              	.LBE498:
 8367              	.LBE500:
 946:src/display.c **** #else
 8368              		.loc 1 946 5 view .LVU2697
 8369 03aa 23B0     		add	sp, sp, #140
 8370              		.cfi_remember_state
 8371              		.cfi_def_cfa_offset 28
 8372              		@ sp needed
 8373 03ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8374              	.LVL930:
 8375              	.L855:
 8376              		.cfi_restore_state
 715:src/display.c **** 	  *p2 = '\024';
 8377              		.loc 1 715 4 is_stmt 1 view .LVU2698
 715:src/display.c **** 	  *p2 = '\024';
 8378              		.loc 1 715 10 is_stmt 0 view .LVU2699
 8379 03b0 2022     		movs	r2, #32
 716:src/display.c **** 	  goto skip;
 8380              		.loc 1 716 8 view .LVU2700
 8381 03b2 1423     		movs	r3, #20
 715:src/display.c **** 	  *p2 = '\024';
 8382              		.loc 1 715 10 view .LVU2701
 8383 03b4 0270     		strb	r2, [r0]
 716:src/display.c **** 	  goto skip;
 8384              		.loc 1 716 4 is_stmt 1 view .LVU2702
 716:src/display.c **** 	  goto skip;
 8385              		.loc 1 716 8 is_stmt 0 view .LVU2703
 8386 03b6 4370     		strb	r3, [r0, #1]
 717:src/display.c **** 	}
 8387              		.loc 1 717 4 is_stmt 1 view .LVU2704
 8388 03b8 91E7     		b	.L757
 8389              	.LVL931:
 8390              	.L862:
 804:src/display.c **** 	      *p2++ = '\207';
 8391              		.loc 1 804 8 view .LVU2705
 805:src/display.c **** 	      *p2++ = '\007';	    
 8392              		.loc 1 805 8 view .LVU2706
 806:src/display.c **** 	    }
 8393              		.loc 1 806 14 is_stmt 0 view .LVU2707
 8394 03ba 89F80230 		strb	r3, [r9, #2]
 805:src/display.c **** 	      *p2++ = '\007';	    
 8395              		.loc 1 805 14 view .LVU2708
 8396 03be 89F80120 		strb	r2, [r9, #1]
 806:src/display.c **** 	    }
 8397              		.loc 1 806 8 is_stmt 1 view .LVU2709
 806:src/display.c **** 	    }
ARM GAS  /tmp/ccpF0v4D.s 			page 255


 8398              		.loc 1 806 11 is_stmt 0 view .LVU2710
 8399 03c2 09F10309 		add	r9, r9, #3
 8400              	.LVL932:
 806:src/display.c **** 	    }
 8401              		.loc 1 806 11 view .LVU2711
 8402 03c6 98E6     		b	.L773
 8403              	.LVL933:
 8404              	.L809:
 842:src/display.c **** #endif
 8405              		.loc 1 842 19 view .LVU2712
 8406 03c8 4249     		ldr	r1, .L873+12
 8407 03ca B0E6     		b	.L775
 8408              	.LVL934:
 8409              	.L864:
 8410              	.LBB501:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8411              		.loc 1 872 75 discriminator 2 view .LVU2713
 8412 03cc FFF7FEFF 		bl	stack_size
 8413              	.LVL935:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8414              		.loc 1 872 62 discriminator 2 view .LVU2714
 8415 03d0 D9F80010 		ldr	r1, [r9]
 8416 03d4 6330     		adds	r0, r0, #99
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8417              		.loc 1 872 46 discriminator 2 view .LVU2715
 8418 03d6 8842     		cmp	r0, r1
 8419 03d8 FFF6C0AE 		blt	.L781
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8420              		.loc 1 872 91 discriminator 4 view .LVU2716
 8421 03dc FFF7FEFF 		bl	get_cmdline
 8422              	.LVL936:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8423              		.loc 1 872 88 discriminator 4 view .LVU2717
 8424 03e0 20B1     		cbz	r0, .L784
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8425              		.loc 1 873 7 view .LVU2718
 8426 03e2 002C     		cmp	r4, #0
 8427 03e4 6AD0     		beq	.L783
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8428              		.loc 1 873 28 discriminator 1 view .LVU2719
 8429 03e6 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8430              		.loc 1 873 10 discriminator 1 view .LVU2720
 8431 03e8 5C06     		lsls	r4, r3, #25
 8432              	.LVL937:
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8433              		.loc 1 873 10 discriminator 1 view .LVU2721
 8434 03ea 67D4     		bmi	.L783
 8435              	.L784:
 8436 03ec D9F80010 		ldr	r1, [r9]
 8437 03f0 B4E6     		b	.L781
 8438              	.LVL938:
 8439              	.L759:
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8440              		.loc 1 873 10 discriminator 1 view .LVU2722
 8441              	.LBE501:
 706:src/display.c **** 	    *p2++ = shift_char;
ARM GAS  /tmp/ccpF0v4D.s 			page 256


 8442              		.loc 1 706 30 discriminator 1 view .LVU2723
 8443 03f2 FFF7FEFF 		bl	is_dblmode
 8444              	.LVL939:
 706:src/display.c **** 	    *p2++ = shift_char;
 8445              		.loc 1 706 26 discriminator 1 view .LVU2724
 8446 03f6 0028     		cmp	r0, #0
 8447 03f8 3FF426AE 		beq	.L761
 711:src/display.c **** 	  }
 8448              		.loc 1 711 6 is_stmt 1 view .LVU2725
 8449              	.LVL940:
 711:src/display.c **** 	  }
 8450              		.loc 1 711 12 is_stmt 0 view .LVU2726
 8451 03fc 4423     		movs	r3, #68
 8452 03fe 8DF85C30 		strb	r3, [sp, #92]
 711:src/display.c **** 	  }
 8453              		.loc 1 711 9 view .LVU2727
 8454 0402 0DF15D00 		add	r0, sp, #93
 8455              	.LVL941:
 711:src/display.c **** 	  }
 8456              		.loc 1 711 9 view .LVU2728
 8457 0406 26E6     		b	.L760
 8458              	.LVL942:
 8459              	.L863:
 8460              	.LBB502:
 868:src/display.c **** 	    goto skip;
 8461              		.loc 1 868 6 is_stmt 1 view .LVU2729
 8462 0408 6520     		movs	r0, #101
 8463 040a FFF7FEFF 		bl	get_reg_n_int
 8464              	.LVL943:
 8465 040e 4246     		mov	r2, r8
 8466 0410 FFF7FEFF 		bl	set_int_x
 8467              	.LVL944:
 869:src/display.c **** 	  }
 8468              		.loc 1 869 6 view .LVU2730
 8469 0414 63E7     		b	.L757
 8470              	.LVL945:
 8471              	.L857:
 869:src/display.c **** 	  }
 8472              		.loc 1 869 6 is_stmt 0 view .LVU2731
 8473              	.LBE502:
 725:src/display.c **** 	  if (State2.wascomplex) {
 8474              		.loc 1 725 28 discriminator 1 view .LVU2732
 8475 0416 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 725:src/display.c **** 	  if (State2.wascomplex) {
 8476              		.loc 1 725 24 discriminator 1 view .LVU2733
 8477 0418 13F0C00F 		tst	r3, #192
 8478 041c 4CD1     		bne	.L803
 725:src/display.c **** 	  if (State2.wascomplex) {
 8479              		.loc 1 725 60 discriminator 2 view .LVU2734
 8480 041e 2E4B     		ldr	r3, .L873+16
 8481 0420 1B68     		ldr	r3, [r3]
 725:src/display.c **** 	  if (State2.wascomplex) {
 8482              		.loc 1 725 46 discriminator 2 view .LVU2735
 8483 0422 002B     		cmp	r3, #0
 8484 0424 3FF423AE 		beq	.L764
 726:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8485              		.loc 1 726 4 is_stmt 1 view .LVU2736
ARM GAS  /tmp/ccpF0v4D.s 			page 257


 729:src/display.c **** 	    if (RectPolConv == 1) {
 8486              		.loc 1 729 9 view .LVU2737
 730:src/display.c **** 	      q = "\007\306<";
 8487              		.loc 1 730 6 view .LVU2738
 734:src/display.c **** 	    }
 8488              		.loc 1 734 10 is_stmt 0 view .LVU2739
 8489 0428 2C49     		ldr	r1, .L873+20
 8490 042a 2D4A     		ldr	r2, .L873+24
 8491 042c 012B     		cmp	r3, #1
 8492 042e 18BF     		it	ne
 8493 0430 1146     		movne	r1, r2
 8494              	.L765:
 8495              	.LVL946:
 737:src/display.c **** 
 8496              		.loc 1 737 4 is_stmt 1 view .LVU2740
 737:src/display.c **** 
 8497              		.loc 1 737 8 is_stmt 0 view .LVU2741
 8498 0432 3046     		mov	r0, r6
 8499              	.LVL947:
 737:src/display.c **** 
 8500              		.loc 1 737 8 view .LVU2742
 8501 0434 FFF7FEFF 		bl	scopy
 8502              	.LVL948:
 737:src/display.c **** 
 8503              		.loc 1 737 8 view .LVU2743
 8504 0438 8046     		mov	r8, r0
 8505              	.LVL949:
 739:src/display.c **** 	}
 8506              		.loc 1 739 4 is_stmt 1 view .LVU2744
 8507 043a 82E6     		b	.L747
 8508              	.LVL950:
 8509              	.L860:
 791:src/display.c **** 	    p = scopy(p, q);
 8510              		.loc 1 791 6 view .LVU2745
 792:src/display.c **** 	    //	    goto no_copy;
 8511              		.loc 1 792 6 view .LVU2746
 792:src/display.c **** 	    //	    goto no_copy;
 8512              		.loc 1 792 10 is_stmt 0 view .LVU2747
 8513 043c 2949     		ldr	r1, .L873+28
 8514 043e 3046     		mov	r0, r6
 8515 0440 FFF7FEFF 		bl	scopy
 8516              	.LVL951:
 8517 0444 8046     		mov	r8, r0
 8518              	.LVL952:
 792:src/display.c **** 	    //	    goto no_copy;
 8519              		.loc 1 792 10 view .LVU2748
 8520 0446 47E6     		b	.L770
 8521              	.LVL953:
 8522              	.L865:
 8523              	.LBB503:
 8524              	.LBB489:
 877:src/display.c **** 
 8525              		.loc 1 877 8 is_stmt 1 view .LVU2749
 879:src/display.c **** 	      UState.nothousands = 1;
 8526              		.loc 1 879 8 is_stmt 0 view .LVU2750
 8527 0448 2A22     		movs	r2, #42
 8528 044a 3046     		mov	r0, r6
ARM GAS  /tmp/ccpF0v4D.s 			page 258


 877:src/display.c **** 
 8529              		.loc 1 877 44 view .LVU2751
 8530 044c 93F8E787 		ldrb	r8, [r3, #2023]	@ zero_extendqisi2
 8531              	.LVL954:
 877:src/display.c **** 
 8532              		.loc 1 877 44 view .LVU2752
 8533 0450 254C     		ldr	r4, .L873+32
 879:src/display.c **** 	      UState.nothousands = 1;
 8534              		.loc 1 879 8 view .LVU2753
 8535 0452 FFF7FEFF 		bl	xset
 8536              	.LVL955:
 880:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8537              		.loc 1 880 27 view .LVU2754
 8538 0456 3A68     		ldr	r2, [r7]
 8539 0458 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8540 045c 43F04003 		orr	r3, r3, #64
 8541 0460 82F8E737 		strb	r3, [r2, #2023]
 881:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8542              		.loc 1 881 8 view .LVU2755
 8543 0464 3146     		mov	r1, r6
 8544 0466 03A8     		add	r0, sp, #12
 8545 0468 FFF7FEFF 		bl	set_x_hms
 8546              	.LVL956:
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8547              		.loc 1 882 27 view .LVU2756
 8548 046c 3B68     		ldr	r3, [r7]
 8549 046e 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 877:src/display.c **** 
 8550              		.loc 1 877 44 view .LVU2757
 8551 0472 C8F38018 		ubfx	r8, r8, #6, #1
 8552              	.LVL957:
 879:src/display.c **** 	      UState.nothousands = 1;
 8553              		.loc 1 879 8 is_stmt 1 view .LVU2758
 880:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8554              		.loc 1 880 8 view .LVU2759
 881:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8555              		.loc 1 881 8 view .LVU2760
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8556              		.loc 1 882 8 view .LVU2761
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8557              		.loc 1 882 27 is_stmt 0 view .LVU2762
 8558 0476 68F38612 		bfi	r2, r8, #6, #1
 8559 047a 83F8E727 		strb	r2, [r3, #2023]
 887:src/display.c **** 	      while (*p) {
 8560              		.loc 1 887 8 is_stmt 1 view .LVU2763
 8561              	.LVL958:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8562              		.loc 1 888 8 view .LVU2764
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8563              		.loc 1 888 14 view .LVU2765
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8564              		.loc 1 888 15 is_stmt 0 view .LVU2766
 8565 047e 4021     		movs	r1, #64
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8566              		.loc 1 882 27 view .LVU2767
 8567 0480 0522     		movs	r2, #5
 8568 0482 05E0     		b	.L790
ARM GAS  /tmp/ccpF0v4D.s 			page 259


 8569              	.LVL959:
 8570              	.L870:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8571              		.loc 1 888 15 view .LVU2768
 8572 0484 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8573              	.LVL960:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8574              		.loc 1 888 14 view .LVU2769
 8575 0488 0029     		cmp	r1, #0
 8576 048a 3FF428AF 		beq	.L757
 8577 048e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8578              	.LVL961:
 8579              	.L790:
 889:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8580              		.loc 1 889 3 is_stmt 1 view .LVU2770
 8581 0490 3046     		mov	r0, r6
 8582 0492 FFF7FEFF 		bl	replace_char
 8583              	.LVL962:
 890:src/display.c **** 		  goto skip;
 8584              		.loc 1 890 3 view .LVU2771
 890:src/display.c **** 		  goto skip;
 8585              		.loc 1 890 7 is_stmt 0 view .LVU2772
 8586 0496 0121     		movs	r1, #1
 8587 0498 3046     		mov	r0, r6
 8588 049a FFF7FEFF 		bl	pixel_length
 8589              	.LVL963:
 893:src/display.c **** 	      }
 8590              		.loc 1 893 3 is_stmt 1 view .LVU2773
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8591              		.loc 1 888 14 view .LVU2774
 890:src/display.c **** 		  goto skip;
 8592              		.loc 1 890 6 is_stmt 0 view .LVU2775
 8593 049e 2C28     		cmp	r0, #44
 8594 04a0 F0DC     		bgt	.L870
 8595 04a2 1CE7     		b	.L757
 8596              	.LVL964:
 8597              	.L805:
 890:src/display.c **** 		  goto skip;
 8598              		.loc 1 890 6 view .LVU2776
 8599              	.LBE489:
 8600              	.LBE503:
 748:src/display.c **** #endif
 8601              		.loc 1 748 19 view .LVU2777
 8602 04a4 0B49     		ldr	r1, .L873+12
 8603 04a6 EFE5     		b	.L766
 8604              	.LVL965:
 8605              	.L861:
 796:src/display.c **** 	    p = scopy(p, q);
 8606              		.loc 1 796 6 is_stmt 1 view .LVU2778
 797:src/display.c **** 	    //	    goto no_copy;
 8607              		.loc 1 797 6 view .LVU2779
 797:src/display.c **** 	    //	    goto no_copy;
 8608              		.loc 1 797 10 is_stmt 0 view .LVU2780
 8609 04a8 1049     		ldr	r1, .L873+36
 8610 04aa 3046     		mov	r0, r6
 8611 04ac FFF7FEFF 		bl	scopy
 8612              	.LVL966:
ARM GAS  /tmp/ccpF0v4D.s 			page 260


 8613 04b0 8046     		mov	r8, r0
 8614              	.LVL967:
 797:src/display.c **** 	    //	    goto no_copy;
 8615              		.loc 1 797 10 view .LVU2781
 8616 04b2 11E6     		b	.L770
 8617              	.LVL968:
 8618              	.L850:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8619              		.loc 1 683 4 is_stmt 1 view .LVU2782
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8620              		.loc 1 683 11 is_stmt 0 view .LVU2783
 8621 04b4 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8622              		.loc 1 683 27 is_stmt 1 view .LVU2784
 8623 04b6 01E7     		b	.L799
 8624              	.LVL969:
 8625              	.L803:
 727:src/display.c **** 	  }
 8626              		.loc 1 727 8 is_stmt 0 view .LVU2785
 8627 04b8 0349     		ldr	r1, .L873
 8628 04ba BAE7     		b	.L765
 8629              	.LVL970:
 8630              	.L783:
 8631              	.LBB504:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8632              		.loc 1 872 4 discriminator 7 view .LVU2786
 8633 04bc D9F80010 		ldr	r1, [r9]
 8634 04c0 4DE6     		b	.L785
 8635              	.LVL971:
 8636              	.L811:
 8637              	.LBB490:
 911:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8638              		.loc 1 911 25 view .LVU2787
 8639 04c2 3E27     		movs	r7, #62
 8640              	.LVL972:
 911:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8641              		.loc 1 911 25 view .LVU2788
 8642 04c4 78E6     		b	.L792
 8643              	.L874:
 8644 04c6 00BF     		.align	2
 8645              	.L873:
 8646 04c8 08000000 		.word	.LC5
 8647 04cc 00000000 		.word	StateWhileOn
 8648 04d0 00000000 		.word	.LANCHOR18
 8649 04d4 14000000 		.word	.LC8
 8650 04d8 00000000 		.word	RectPolConv
 8651 04dc 04000000 		.word	.LC4
 8652 04e0 0C000000 		.word	.LC6
 8653 04e4 34000000 		.word	.LC13
 8654 04e8 00000000 		.word	.LANCHOR17
 8655 04ec 38000000 		.word	.LC14
 8656              	.LBE490:
 8657              	.LBE504:
 8658              		.cfi_endproc
 8659              	.LFE16:
 8661              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8662              		.align	2
ARM GAS  /tmp/ccpF0v4D.s 			page 261


 8663              	.LC18:
 8664 0000 0D00     		.ascii	"\015\000"
 8665 0002 0000     		.align	2
 8666              	.LC19:
 8667 0004 060600   		.ascii	"\006\006\000"
 8668 0007 00       		.align	2
 8669              	.LC21:
 8670 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8670      492C2057 
 8670      77414C74 
 8670      4500
 8671 0016 0000     		.align	2
 8672              	.LC22:
 8673 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8673      2055204C 
 8673      20492C20 
 8673      20572041 
 8673      204C2054 
 8674 0032 0000     		.align	2
 8675              	.LC23:
 8676 0034 2000     		.ascii	" \000"
 8677 0036 0000     		.align	2
 8678              	.LC24:
 8679 0038 48595000 		.ascii	"HYP\000"
 8680              		.align	2
 8681              	.LC25:
 8682 003c 7F060600 		.ascii	"\177\006\006\000"
 8683              		.align	2
 8684              	.LC28:
 8685 0040 3020746F 		.ascii	"0 to 255\000"
 8685      20323535 
 8685      00
 8686 0049 000000   		.align	2
 8687              	.LC29:
 8688 004c 46726565 		.ascii	"Free:\000"
 8688      3A00
 8689 0052 0000     		.align	2
 8690              	.LC30:
 8691 0054 202C2046 		.ascii	" , FL. \000"
 8691      4C2E2000 
 8692              		.align	2
 8693              	.LC31:
 8694 005c 52656773 		.ascii	"Regs:\000"
 8694      3A00
 8695 0062 0000     		.align	2
 8696              	.LC32:
 8697 0064 20910606 		.ascii	" \221\006\006+\000"
 8697      2B00
 8698 006a 0000     		.align	2
 8699              	.LC33:
 8700 006c 202C204C 		.ascii	" , Loc. \000"
 8700      6F632E20 
 8700      00
 8701 0075 000000   		.align	2
 8702              	.LC34:
 8703 0078 464C2000 		.ascii	"FL \000"
 8704              		.align	2
ARM GAS  /tmp/ccpF0v4D.s 			page 262


 8705              	.LC35:
 8706 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8706      06413A44 
 8706      064C494A 
 8706      4B00
 8707 008a 0000     		.align	2
 8708              	.LC36:
 8709 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8709      302D2E31 
 8709      3500
 8710 0096 0000     		.align	2
 8711              	.LC37:
 8712 0098 43414C4C 		.ascii	"CALLS\000"
 8712      5300
 8713 009e 0000     		.align	2
 8714              	.LC38:
 8715 00a0 52656720 		.ascii	"Reg \000"
 8715      00
 8716 00a5 000000   		.align	2
 8717              	.LC39:
 8718 00a8 00       		.ascii	"\000"
 8719 00a9 000000   		.align	2
 8720              	.LC40:
 8721 00ac 202D2D2D 		.ascii	" ---\000"
 8721      00
 8722 00b1 000000   		.align	2
 8723              	.LC27:
 8724 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8724      093E0A00 
 8725              		.align	2
 8726              	.LC26:
 8727 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8727      41424344 
 8727      4C494A4B 
 8727      00
 8728              		.section	.text.display,"ax",%progbits
 8729              		.align	1
 8730              		.p2align 2,,3
 8731              		.global	display
 8732              		.syntax unified
 8733              		.thumb
 8734              		.thumb_func
 8735              		.fpu fpv4-sp-d16
 8737              	display:
 8738              	.LFB34:
2590:src/display.c **** 	int i, j;
 8739              		.loc 1 2590 26 is_stmt 1 view -0
 8740              		.cfi_startproc
 8741              		@ args = 0, pretend = 0, frame = 168
 8742              		@ frame_needed = 0, uses_anonymous_args = 0
2591:src/display.c **** 	char buf[40], *bp = buf;
 8743              		.loc 1 2591 2 view .LVU2790
2592:src/display.c **** 	const char *p;
 8744              		.loc 1 2592 2 view .LVU2791
2590:src/display.c **** 	int i, j;
 8745              		.loc 1 2590 26 is_stmt 0 view .LVU2792
 8746 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/ccpF0v4D.s 			page 263


 8747              		.cfi_def_cfa_offset 36
 8748              		.cfi_offset 4, -36
 8749              		.cfi_offset 5, -32
 8750              		.cfi_offset 6, -28
 8751              		.cfi_offset 7, -24
 8752              		.cfi_offset 8, -20
 8753              		.cfi_offset 9, -16
 8754              		.cfi_offset 10, -12
 8755              		.cfi_offset 11, -8
 8756              		.cfi_offset 14, -4
2595:src/display.c **** 	int skip = 0;
 8757              		.loc 1 2595 24 view .LVU2793
 8758 0004 C24C     		ldr	r4, .L1206
2600:src/display.c **** 	if (State2.disp_freeze) {
 8759              		.loc 1 2600 16 view .LVU2794
 8760 0006 DFF84093 		ldr	r9, .L1206+56
2595:src/display.c **** 	int skip = 0;
 8761              		.loc 1 2595 24 view .LVU2795
 8762 000a 94F80EB0 		ldrb	fp, [r4, #14]	@ zero_extendqisi2
2590:src/display.c **** 	int i, j;
 8763              		.loc 1 2590 26 view .LVU2796
 8764 000e ABB0     		sub	sp, sp, #172
 8765              		.cfi_def_cfa_offset 208
 8766              	.LVL973:
2593:src/display.c **** 	int annuc = 0;
 8767              		.loc 1 2593 2 is_stmt 1 view .LVU2797
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8768              		.loc 1 2594 2 view .LVU2798
2595:src/display.c **** 	int skip = 0;
 8769              		.loc 1 2595 2 view .LVU2799
2596:src/display.c **** 	int x_disp = 0;
 8770              		.loc 1 2596 2 view .LVU2800
2597:src/display.c **** 	const int shift = cur_shift();
 8771              		.loc 1 2597 2 view .LVU2801
2598:src/display.c **** 
 8772              		.loc 1 2598 2 view .LVU2802
2598:src/display.c **** 
 8773              		.loc 1 2598 20 is_stmt 0 view .LVU2803
 8774 0010 FFF7FEFF 		bl	cur_shift
 8775              	.LVL974:
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8776              		.loc 1 2601 6 view .LVU2804
 8777 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2600:src/display.c **** 	if (State2.disp_freeze) {
 8778              		.loc 1 2600 16 view .LVU2805
 8779 0016 0022     		movs	r2, #0
 8780              	.LVL975:
2600:src/display.c **** 	if (State2.disp_freeze) {
 8781              		.loc 1 2600 2 is_stmt 1 view .LVU2806
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8782              		.loc 1 2601 5 is_stmt 0 view .LVU2807
 8783 0018 13F01007 		ands	r7, r3, #16
2600:src/display.c **** 	if (State2.disp_freeze) {
 8784              		.loc 1 2600 16 view .LVU2808
 8785 001c A9F80020 		strh	r2, [r9]	@ movhi
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8786              		.loc 1 2601 2 is_stmt 1 view .LVU2809
ARM GAS  /tmp/ccpF0v4D.s 			page 264


2601:src/display.c **** 	  State2.disp_freeze = 0;
 8787              		.loc 1 2601 5 is_stmt 0 view .LVU2810
 8788 0020 40F0EE80 		bne	.L1168
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8789              		.loc 1 2611 2 is_stmt 1 view .LVU2811
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8790              		.loc 1 2611 6 is_stmt 0 view .LVU2812
 8791 0024 BB4B     		ldr	r3, .L1206+4
 8792 0026 1D68     		ldr	r5, [r3]
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8793              		.loc 1 2611 5 view .LVU2813
 8794 0028 002D     		cmp	r5, #0
 8795 002a 40F08480 		bne	.L1169
2630:src/display.c **** #  endif
 8796              		.loc 1 2630 2 is_stmt 1 view .LVU2814
2630:src/display.c **** #  endif
 8797              		.loc 1 2630 33 is_stmt 0 view .LVU2815
 8798 002e DFF814A3 		ldr	r10, .L1206+52
 8799 0032 DAF80030 		ldr	r3, [r10]
 8800 0036 0646     		mov	r6, r0
 8801 0038 93F8EA87 		ldrb	r8, [r3, #2026]	@ zero_extendqisi2
2636:src/display.c **** 
 8802              		.loc 1 2636 2 view .LVU2816
 8803 003c FFF7FEFF 		bl	reset_disp
 8804              	.LVL976:
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8805              		.loc 1 2639 2 view .LVU2817
 8806 0040 20A8     		add	r0, sp, #128
 8807              	.LVL977:
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8808              		.loc 1 2639 2 view .LVU2818
 8809 0042 2822     		movs	r2, #40
 8810 0044 2946     		mov	r1, r5
 8811 0046 FFF7FEFF 		bl	xset
 8812              	.LVL978:
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8813              		.loc 1 2645 6 view .LVU2819
 8814 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8815              		.loc 1 2645 5 view .LVU2820
 8816 004c D806     		lsls	r0, r3, #27
2630:src/display.c **** #  endif
 8817              		.loc 1 2630 12 view .LVU2821
 8818 004e C8F38008 		ubfx	r8, r8, #2, #1
 8819              	.LVL979:
2636:src/display.c **** 
 8820              		.loc 1 2636 2 is_stmt 1 view .LVU2822
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8821              		.loc 1 2639 2 view .LVU2823
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8822              		.loc 1 2645 2 view .LVU2824
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8823              		.loc 1 2645 5 is_stmt 0 view .LVU2825
 8824 0052 00F18581 		bmi	.L1170
2657:src/display.c **** 	  if (yreg_enabled) {
 8825              		.loc 1 2657 9 is_stmt 1 view .LVU2826
2657:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccpF0v4D.s 			page 265


 8826              		.loc 1 2657 13 is_stmt 0 view .LVU2827
 8827 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2657:src/display.c **** 	  if (yreg_enabled) {
 8828              		.loc 1 2657 12 view .LVU2828
 8829 0058 5107     		lsls	r1, r2, #29
 8830 005a 00F0DB80 		beq	.L883
2658:src/display.c **** 	    set_status_top(S_SURE);
 8831              		.loc 1 2658 4 is_stmt 1 view .LVU2829
2658:src/display.c **** 	    set_status_top(S_SURE);
 8832              		.loc 1 2658 7 is_stmt 0 view .LVU2830
 8833 005e B8F1000F 		cmp	r8, #0
 8834 0062 00F0BE81 		beq	.L884
2659:src/display.c **** 	    no_status_top = 1;
 8835              		.loc 1 2659 6 is_stmt 1 view .LVU2831
 8836              	.LVL980:
 8837              	.LBB564:
 8838              	.LBI564:
3505:src/display.c **** 	if (no_status_top) return;
 8839              		.loc 1 3505 19 view .LVU2832
 8840              	.LBB565:
3506:src/display.c **** 	if (State2.runmode) {
 8841              		.loc 1 3506 2 view .LVU2833
3506:src/display.c **** 	if (State2.runmode) {
 8842              		.loc 1 3506 5 is_stmt 0 view .LVU2834
 8843 0066 B9F90030 		ldrsh	r3, [r9]
 8844 006a 13B9     		cbnz	r3, .L886
 8845 006c AA48     		ldr	r0, .L1206+8
 8846 006e FFF7FEFF 		bl	set_status_top.part.0
 8847              	.LVL981:
 8848              	.L886:
3506:src/display.c **** 	if (State2.runmode) {
 8849              		.loc 1 3506 5 view .LVU2835
 8850              	.LBE565:
 8851              	.LBE564:
2660:src/display.c **** 	    annuc = 1;
 8852              		.loc 1 2660 6 is_stmt 1 view .LVU2836
2660:src/display.c **** 	    annuc = 1;
 8853              		.loc 1 2660 20 is_stmt 0 view .LVU2837
 8854 0072 0125     		movs	r5, #1
 8855 0074 A9F80050 		strh	r5, [r9]	@ movhi
2661:src/display.c **** 	  }
 8856              		.loc 1 2661 6 is_stmt 1 view .LVU2838
 8857              	.LVL982:
2884:src/display.c ****       nostk:
 8858              		.loc 1 2884 2 view .LVU2839
 8859 0078 FFF7FEFF 		bl	show_stack
 8860              	.LVL983:
2886:src/display.c **** 	if (!skip) {
 8861              		.loc 1 2886 2 view .LVU2840
 8862 007c A74B     		ldr	r3, .L1206+12
 8863 007e A84F     		ldr	r7, .L1206+16
 8864 0080 0193     		str	r3, [sp, #4]
 8865 0082 FFF7FEFF 		bl	show_flags
 8866              	.LVL984:
2887:src/display.c **** 	  if (State2.runmode) {
 8867              		.loc 1 2887 2 view .LVU2841
 8868              	.L887:
ARM GAS  /tmp/ccpF0v4D.s 			page 266


2888:src/display.c **** 	  only_update_x:
 8869              		.loc 1 2888 4 view .LVU2842
2888:src/display.c **** 	  only_update_x:
 8870              		.loc 1 2888 8 is_stmt 0 view .LVU2843
 8871 0086 A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
2888:src/display.c **** 	  only_update_x:
 8872              		.loc 1 2888 7 view .LVU2844
 8873 0088 16F04006 		ands	r6, r6, #64
 8874 008c 5FD1     		bne	.L880
 8875              	.LBB566:
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8876              		.loc 1 2906 6 is_stmt 1 view .LVU2845
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8877              		.loc 1 2906 24 is_stmt 0 view .LVU2846
 8878 008e DAF80030 		ldr	r3, [r10]
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8879              		.loc 1 2910 6 view .LVU2847
 8880 0092 DFF8B8A2 		ldr	r10, .L1206+60
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8881              		.loc 1 2906 19 view .LVU2848
 8882 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 8883              	.LVL985:
2907:src/display.c **** 	    const int n = nLIB(pc);
 8884              		.loc 1 2907 6 is_stmt 1 view .LVU2849
2907:src/display.c **** 	    const int n = nLIB(pc);
 8885              		.loc 1 2907 25 is_stmt 0 view .LVU2850
 8886 009a 5846     		mov	r0, fp
 8887 009c FFF7FEFF 		bl	user_pc
 8888              	.LVL986:
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8889              		.loc 1 2909 6 view .LVU2851
 8890 00a0 2822     		movs	r2, #40
 8891 00a2 3146     		mov	r1, r6
2907:src/display.c **** 	    const int n = nLIB(pc);
 8892              		.loc 1 2907 25 view .LVU2852
 8893 00a4 8046     		mov	r8, r0
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8894              		.loc 1 2909 6 view .LVU2853
 8895 00a6 20A8     		add	r0, sp, #128
 8896              	.LVL987:
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8897              		.loc 1 2908 6 is_stmt 1 view .LVU2854
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8898              		.loc 1 2909 6 is_stmt 0 view .LVU2855
 8899 00a8 FFF7FEFF 		bl	xset
 8900              	.LVL988:
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8901              		.loc 1 2908 20 view .LVU2856
 8902 00ac 4FEA9B3B 		lsr	fp, fp, #14
 8903              	.LVL989:
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8904              		.loc 1 2909 6 is_stmt 1 view .LVU2857
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8905              		.loc 1 2910 6 view .LVU2858
 8906 00b0 DAF80000 		ldr	r0, [r10]
 8907 00b4 3246     		mov	r2, r6
 8908 00b6 0121     		movs	r1, #1
ARM GAS  /tmp/ccpF0v4D.s 			page 267


 8909 00b8 FFF7FEFF 		bl	set_exp
 8910              	.LVL990:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8911              		.loc 1 2911 6 view .LVU2859
 8912 00bc BBF1000F 		cmp	fp, #0
 8913 00c0 40F0B881 		bne	.L1171
 8914 00c4 9749     		ldr	r1, .L1206+20
 8915 00c6 20A8     		add	r0, sp, #128
 8916 00c8 FFF7FEFF 		bl	scopy_spc
 8917              	.LVL991:
 8918 00cc 0322     		movs	r2, #3
 8919 00ce 4146     		mov	r1, r8
 8920 00d0 FFF7FEFF 		bl	num_arg_0
 8921              	.LVL992:
2913:src/display.c **** #ifndef REALBUILD
 8922              		.loc 1 2913 6 view .LVU2860
 8923 00d4 0921     		movs	r1, #9
 8924 00d6 20A8     		add	r0, sp, #128
 8925 00d8 FFF7FEFF 		bl	set_digits_string
 8926              	.LVL993:
2915:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8927              		.loc 1 2915 6 view .LVU2861
 8928 00dc 5946     		mov	r1, fp
 8929 00de 2822     		movs	r2, #40
 8930 00e0 20A8     		add	r0, sp, #128
 8931 00e2 FFF7FEFF 		bl	xset
 8932              	.LVL994:
2916:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8933              		.loc 1 2916 6 view .LVU2862
 8934 00e6 5A46     		mov	r2, fp
 8935 00e8 0121     		movs	r1, #1
 8936 00ea DAF80000 		ldr	r0, [r10]
 8937 00ee FFF7FEFF 		bl	set_exp
 8938              	.LVL995:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8939              		.loc 1 2917 6 view .LVU2863
 8940 00f2 8D49     		ldr	r1, .L1206+24
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8941              		.loc 1 2911 6 is_stmt 0 view .LVU2864
 8942 00f4 4FF0030B 		mov	fp, #3
 8943              	.LVL996:
 8944              	.L1021:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8945              		.loc 1 2917 6 discriminator 4 view .LVU2865
 8946 00f8 20A8     		add	r0, sp, #128
 8947 00fa FFF7FEFF 		bl	scopy_spc
 8948              	.LVL997:
 8949 00fe 4146     		mov	r1, r8
 8950 0100 5A46     		mov	r2, fp
 8951 0102 FFF7FEFF 		bl	num_arg_0
 8952              	.LVL998:
 8953              	.LBB567:
2920:src/display.c **** 	      char *l=LastDisplayedNumber;
 8954              		.loc 1 2920 8 is_stmt 1 discriminator 4 view .LVU2866
2921:src/display.c **** 	      *l++=' ';
 8955              		.loc 1 2921 8 discriminator 4 view .LVU2867
2922:src/display.c **** 	      while(*b) {
ARM GAS  /tmp/ccpF0v4D.s 			page 268


 8956              		.loc 1 2922 8 discriminator 4 view .LVU2868
2922:src/display.c **** 	      while(*b) {
 8957              		.loc 1 2922 12 is_stmt 0 discriminator 4 view .LVU2869
 8958 0106 894B     		ldr	r3, .L1206+28
2923:src/display.c **** 		*l++=*b++;
 8959              		.loc 1 2923 14 discriminator 4 view .LVU2870
 8960 0108 9DF88010 		ldrb	r1, [sp, #128]	@ zero_extendqisi2
2922:src/display.c **** 	      while(*b) {
 8961              		.loc 1 2922 12 discriminator 4 view .LVU2871
 8962 010c 2026     		movs	r6, #32
 8963 010e 1E70     		strb	r6, [r3]
2923:src/display.c **** 		*l++=*b++;
 8964              		.loc 1 2923 8 is_stmt 1 discriminator 4 view .LVU2872
2923:src/display.c **** 		*l++=*b++;
 8965              		.loc 1 2923 13 discriminator 4 view .LVU2873
 8966 0110 0029     		cmp	r1, #0
 8967 0112 00F0E482 		beq	.L1035
 8968 0116 0333     		adds	r3, r3, #3
 8969 0118 20A8     		add	r0, sp, #128
 8970              	.LVL999:
 8971              	.L1014:
2924:src/display.c **** 		*l++=' ';
 8972              		.loc 1 2924 3 view .LVU2874
2924:src/display.c **** 		*l++=' ';
 8973              		.loc 1 2924 7 is_stmt 0 view .LVU2875
 8974 011a 03F8021C 		strb	r1, [r3, #-2]
2925:src/display.c **** 	      }
 8975              		.loc 1 2925 3 is_stmt 1 view .LVU2876
 8976              	.LVL1000:
2923:src/display.c **** 		*l++=*b++;
 8977              		.loc 1 2923 14 is_stmt 0 view .LVU2877
 8978 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8979              	.LVL1001:
2925:src/display.c **** 	      }
 8980              		.loc 1 2925 7 view .LVU2878
 8981 0122 03F8016C 		strb	r6, [r3, #-1]
2923:src/display.c **** 		*l++=*b++;
 8982              		.loc 1 2923 13 is_stmt 1 view .LVU2879
 8983 0126 1A46     		mov	r2, r3
 8984 0128 0233     		adds	r3, r3, #2
 8985              	.LVL1002:
2923:src/display.c **** 		*l++=*b++;
 8986              		.loc 1 2923 13 is_stmt 0 view .LVU2880
 8987 012a 0029     		cmp	r1, #0
 8988 012c F5D1     		bne	.L1014
 8989              	.LVL1003:
 8990              	.L1013:
2927:src/display.c **** 	    }
 8991              		.loc 1 2927 8 is_stmt 1 view .LVU2881
2927:src/display.c **** 	    }
 8992              		.loc 1 2927 10 is_stmt 0 view .LVU2882
 8993 012e 0023     		movs	r3, #0
 8994 0130 7F4E     		ldr	r6, .L1206+32
 8995 0132 1370     		strb	r3, [r2]
 8996              	.LVL1004:
2927:src/display.c **** 	    }
 8997              		.loc 1 2927 10 view .LVU2883
ARM GAS  /tmp/ccpF0v4D.s 			page 269


 8998              	.LBE567:
 8999              	.LBE566:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9000              		.loc 1 2932 2 is_stmt 1 view .LVU2884
 9001 0134 21E0     		b	.L1167
 9002              	.LVL1005:
 9003              	.L1169:
2618:src/display.c **** 
 9004              		.loc 1 2618 4 view .LVU2885
 9005 0136 FFF7FEFF 		bl	wait_for_display
 9006              	.LVL1006:
2621:src/display.c **** 	    clr_dot(i);
 9007              		.loc 1 2621 4 view .LVU2886
2621:src/display.c **** 	    clr_dot(i);
 9008              		.loc 1 2621 16 view .LVU2887
 9009              	.L879:
2622:src/display.c **** 	  }
 9010              		.loc 1 2622 6 discriminator 3 view .LVU2888
 9011 013a 3846     		mov	r0, r7
2621:src/display.c **** 	    clr_dot(i);
 9012              		.loc 1 2621 31 is_stmt 0 discriminator 3 view .LVU2889
 9013 013c 0137     		adds	r7, r7, #1
 9014              	.LVL1007:
2622:src/display.c **** 	  }
 9015              		.loc 1 2622 6 discriminator 3 view .LVU2890
 9016 013e FFF7FEFF 		bl	clr_dot
 9017              	.LVL1008:
2621:src/display.c **** 	    clr_dot(i);
 9018              		.loc 1 2621 31 is_stmt 1 discriminator 3 view .LVU2891
2621:src/display.c **** 	    clr_dot(i);
 9019              		.loc 1 2621 16 discriminator 3 view .LVU2892
2621:src/display.c **** 	    clr_dot(i);
 9020              		.loc 1 2621 4 is_stmt 0 discriminator 3 view .LVU2893
 9021 0142 832F     		cmp	r7, #131
 9022 0144 F9D1     		bne	.L879
 9023 0146 754B     		ldr	r3, .L1206+12
 9024 0148 754F     		ldr	r7, .L1206+16
 9025              	.LVL1009:
2621:src/display.c **** 	    clr_dot(i);
 9026              		.loc 1 2621 4 discriminator 3 view .LVU2894
 9027 014a 0193     		str	r3, [sp, #4]
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9028              		.loc 1 2594 6 view .LVU2895
 9029 014c 0025     		movs	r5, #0
 9030              	.LVL1010:
 9031              	.L880:
2890:src/display.c **** 	    if (p == NULL || cata) {
 9032              		.loc 1 2890 6 is_stmt 1 view .LVU2896
2890:src/display.c **** 	    if (p == NULL || cata) {
 9033              		.loc 1 2890 10 is_stmt 0 view .LVU2897
 9034 014e FFF7FEFF 		bl	get_cmdline
 9035              	.LVL1011:
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9036              		.loc 1 2891 6 is_stmt 1 view .LVU2898
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9037              		.loc 1 2891 9 is_stmt 0 view .LVU2899
 9038 0152 8246     		mov	r10, r0
ARM GAS  /tmp/ccpF0v4D.s 			page 270


 9039 0154 18B1     		cbz	r0, .L974
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9040              		.loc 1 2891 20 discriminator 1 view .LVU2900
 9041 0156 BBF1000F 		cmp	fp, #0
 9042 015a 00F09680 		beq	.L975
 9043              	.L974:
2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9044              		.loc 1 2892 8 is_stmt 1 view .LVU2901
2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9045              		.loc 1 2892 25 is_stmt 0 view .LVU2902
 9046 015e 744E     		ldr	r6, .L1206+32
 9047 0160 3068     		ldr	r0, [r6]
 9048              	.LVL1012:
2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9049              		.loc 1 2892 11 view .LVU2903
 9050 0162 421C     		adds	r2, r0, #1
 9051 0164 00F03381 		beq	.L976
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9052              		.loc 1 2893 3 is_stmt 1 view .LVU2904
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9053              		.loc 1 2893 39 is_stmt 0 view .LVU2905
 9054 0168 6428     		cmp	r0, #100
 9055 016a 00F0C480 		beq	.L1172
 9056              	.L977:
2894:src/display.c **** 	      }
 9057              		.loc 1 2894 3 is_stmt 1 view .LVU2906
 9058 016e 0021     		movs	r1, #0
 9059 0170 FFF7FEFF 		bl	format_reg
 9060              	.LVL1013:
2902:src/display.c **** 	      goto finish;
 9061              		.loc 1 2902 6 view .LVU2907
2902:src/display.c **** 	      goto finish;
 9062              		.loc 1 2902 9 is_stmt 0 view .LVU2908
 9063 0174 674B     		ldr	r3, .L1206+4
 9064 0176 1B68     		ldr	r3, [r3]
 9065 0178 73BB     		cbnz	r3, .L979
 9066              	.LVL1014:
 9067              	.L1167:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9068              		.loc 1 2932 2 view .LVU2909
 9069 017a FFF7FEFF 		bl	set_annunciators
 9070              	.LVL1015:
2933:src/display.c **** 	  ShowRPN = 0;
 9071              		.loc 1 2933 2 is_stmt 1 view .LVU2910
 9072              	.L882:
2934:src/display.c **** 	  dot(RPN, 0);
 9073              		.loc 1 2934 4 view .LVU2911
2934:src/display.c **** 	  dot(RPN, 0);
 9074              		.loc 1 2934 12 is_stmt 0 view .LVU2912
 9075 017e DFF8B481 		ldr	r8, .L1206+36
 9076 0182 0023     		movs	r3, #0
 9077              	.LBB569:
 9078              	.LBB570:
 341:src/display.c **** }
 9079              		.loc 1 341 8 view .LVU2913
 9080 0184 8D20     		movs	r0, #141
 9081              	.LBE570:
ARM GAS  /tmp/ccpF0v4D.s 			page 271


 9082              	.LBE569:
2934:src/display.c **** 	  dot(RPN, 0);
 9083              		.loc 1 2934 12 view .LVU2914
 9084 0186 C8F80030 		str	r3, [r8]
2935:src/display.c **** 	}
 9085              		.loc 1 2935 4 is_stmt 1 view .LVU2915
 9086              	.LVL1016:
 9087              	.LBB572:
 9088              	.LBI569:
 339:src/display.c ****   if (on)	set_dot(n);
 9089              		.loc 1 339 6 view .LVU2916
 9090              	.LBB571:
 340:src/display.c ****   else	clr_dot(n);
 9091              		.loc 1 340 3 view .LVU2917
 341:src/display.c **** }
 9092              		.loc 1 341 8 view .LVU2918
 9093 018a FFF7FEFF 		bl	clr_dot
 9094              	.LVL1017:
 9095              	.L1015:
 341:src/display.c **** }
 9096              		.loc 1 341 8 is_stmt 0 view .LVU2919
 9097              	.LBE571:
 9098              	.LBE572:
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9099              		.loc 1 2938 2 is_stmt 1 view .LVU2920
2939:src/display.c **** 
 9100              		.loc 1 2939 4 is_stmt 0 view .LVU2921
 9101 018e D8F80030 		ldr	r3, [r8]
 9102 0192 002B     		cmp	r3, #0
 9103 0194 40F0E280 		bne	.L1036
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9104              		.loc 1 2938 31 view .LVU2922
 9105 0198 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9106 019a 12F04003 		ands	r3, r2, #64
 9107 019e 08D0     		beq	.L1016
2939:src/display.c **** 
 9108              		.loc 1 2939 8 view .LVU2923
 9109 01a0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2939:src/display.c **** 
 9110              		.loc 1 2939 4 view .LVU2924
 9111 01a2 1B07     		lsls	r3, r3, #28
 9112 01a4 40F10681 		bpl	.L1038
2939:src/display.c **** 
 9113              		.loc 1 2939 30 discriminator 3 view .LVU2925
 9114 01a8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9115 01aa 012B     		cmp	r3, #1
 9116 01ac 01D0     		beq	.L1016
2939:src/display.c **** 
 9117              		.loc 1 2939 60 discriminator 5 view .LVU2926
 9118 01ae C2F38003 		ubfx	r3, r2, #2, #1
 9119              	.L1016:
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9120              		.loc 1 2938 19 discriminator 9 view .LVU2927
 9121 01b2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9122 01b4 63F34512 		bfi	r2, r3, #5, #1
 9123 01b8 E275     		strb	r2, [r4, #23]
2942:src/display.c **** 	  annunciators();
ARM GAS  /tmp/ccpF0v4D.s 			page 272


 9124              		.loc 1 2942 2 is_stmt 1 discriminator 9 view .LVU2928
2942:src/display.c **** 	  annunciators();
 9125              		.loc 1 2942 5 is_stmt 0 discriminator 9 view .LVU2929
 9126 01ba 002D     		cmp	r5, #0
 9127 01bc 00F0C880 		beq	.L1017
2942:src/display.c **** 	  annunciators();
 9128              		.loc 1 2942 36 discriminator 1 view .LVU2930
 9129 01c0 D3B2     		uxtb	r3, r2
2942:src/display.c **** 	  annunciators();
 9130              		.loc 1 2942 13 discriminator 1 view .LVU2931
 9131 01c2 03F02103 		and	r3, r3, #33
 9132 01c6 202B     		cmp	r3, #32
 9133 01c8 00F0C280 		beq	.L1017
 9134              	.L1018:
2943:src/display.c ****  	State2.hms = 0;
 9135              		.loc 1 2943 4 is_stmt 1 view .LVU2932
 9136 01cc FFF7FEFF 		bl	annunciators
 9137              	.LVL1018:
 9138              	.L1019:
2944:src/display.c **** #else
 9139              		.loc 1 2944 3 view .LVU2933
2944:src/display.c **** #else
 9140              		.loc 1 2944 14 is_stmt 0 view .LVU2934
 9141 01d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9142 01d2 6FF30003 		bfc	r3, #0, #1
 9143 01d6 E375     		strb	r3, [r4, #23]
 9144              	.L979:
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9145              		.loc 1 2951 2 is_stmt 1 view .LVU2935
2952:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9146              		.loc 1 2952 2 view .LVU2936
2953:src/display.c **** 	State2.invalid_disp = 0;
 9147              		.loc 1 2953 2 view .LVU2937
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9148              		.loc 1 2951 17 is_stmt 0 view .LVU2938
 9149 01d8 6369     		ldr	r3, [r4, #20]
2957:src/display.c **** 	State2.disp_small = 0;
 9150              		.loc 1 2957 11 view .LVU2939
 9151 01da 019A     		ldr	r2, [sp, #4]
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9152              		.loc 1 2951 17 view .LVU2940
 9153 01dc 23F02173 		bic	r3, r3, #42205184
 9154 01e0 23F48053 		bic	r3, r3, #4096
2953:src/display.c **** 	State2.invalid_disp = 0;
 9155              		.loc 1 2953 15 view .LVU2941
 9156 01e4 0025     		movs	r5, #0
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9157              		.loc 1 2951 17 view .LVU2942
 9158 01e6 6361     		str	r3, [r4, #20]
2955:src/display.c **** 	DispMsg = CNULL;
 9159              		.loc 1 2955 15 view .LVU2943
 9160 01e8 6423     		movs	r3, #100
2953:src/display.c **** 	State2.invalid_disp = 0;
 9161              		.loc 1 2953 15 view .LVU2944
 9162 01ea 6574     		strb	r5, [r4, #17]
2954:src/display.c **** 	ShowRegister = regX_idx;
 9163              		.loc 1 2954 2 is_stmt 1 view .LVU2945
ARM GAS  /tmp/ccpF0v4D.s 			page 273


2955:src/display.c **** 	DispMsg = CNULL;
 9164              		.loc 1 2955 2 view .LVU2946
2956:src/display.c **** 	DispPlot = 0;
 9165              		.loc 1 2956 10 is_stmt 0 view .LVU2947
 9166 01ec 3D60     		str	r5, [r7]
2957:src/display.c **** 	State2.disp_small = 0;
 9167              		.loc 1 2957 11 view .LVU2948
 9168 01ee 1580     		strh	r5, [r2]	@ movhi
2955:src/display.c **** 	DispMsg = CNULL;
 9169              		.loc 1 2955 15 view .LVU2949
 9170 01f0 3360     		str	r3, [r6]
2956:src/display.c **** 	DispPlot = 0;
 9171              		.loc 1 2956 2 is_stmt 1 view .LVU2950
2957:src/display.c **** 	State2.disp_small = 0;
 9172              		.loc 1 2957 2 view .LVU2951
2958:src/display.c **** 	finish_display();
 9173              		.loc 1 2958 2 view .LVU2952
2959:src/display.c **** 	no_status_top = 0;
 9174              		.loc 1 2959 2 view .LVU2953
 9175 01f2 FFF7FEFF 		bl	finish_display
 9176              	.LVL1019:
2960:src/display.c **** #ifdef CONSOLE
 9177              		.loc 1 2960 2 view .LVU2954
2960:src/display.c **** #ifdef CONSOLE
 9178              		.loc 1 2960 16 is_stmt 0 view .LVU2955
 9179 01f6 A9F80050 		strh	r5, [r9]	@ movhi
2964:src/display.c **** #else
 9180              		.loc 1 2964 7 view .LVU2956
 9181 01fa 2BB0     		add	sp, sp, #172
 9182              		.cfi_remember_state
 9183              		.cfi_def_cfa_offset 36
 9184              		@ sp needed
 9185 01fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9186              	.LVL1020:
 9187              	.L1168:
 9188              		.cfi_restore_state
2602:src/display.c **** 	  State2.disp_temp = 1;
 9189              		.loc 1 2602 4 is_stmt 1 view .LVU2957
2603:src/display.c **** #ifdef CONSOLE
 9190              		.loc 1 2603 4 view .LVU2958
2607:src/display.c **** 	  return;
 9191              		.loc 1 2607 12 is_stmt 0 view .LVU2959
 9192 0200 4C49     		ldr	r1, .L1206+36
2602:src/display.c **** 	  State2.disp_temp = 1;
 9193              		.loc 1 2602 23 view .LVU2960
 9194 0202 23F03003 		bic	r3, r3, #48
 9195 0206 43F02003 		orr	r3, r3, #32
 9196 020a E375     		strb	r3, [r4, #23]
2607:src/display.c **** 	  return;
 9197              		.loc 1 2607 4 is_stmt 1 view .LVU2961
2607:src/display.c **** 	  return;
 9198              		.loc 1 2607 12 is_stmt 0 view .LVU2962
 9199 020c 0A60     		str	r2, [r1]
2608:src/display.c **** 	}
 9200              		.loc 1 2608 4 is_stmt 1 view .LVU2963
2964:src/display.c **** #else
 9201              		.loc 1 2964 7 is_stmt 0 view .LVU2964
ARM GAS  /tmp/ccpF0v4D.s 			page 274


 9202 020e 2BB0     		add	sp, sp, #172
 9203              		.cfi_remember_state
 9204              		.cfi_def_cfa_offset 36
 9205              		@ sp needed
 9206 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9207              	.LVL1021:
 9208              	.L883:
 9209              		.cfi_restore_state
2666:src/display.c **** 	  bp = scopy(bp, "HYP");
 9210              		.loc 1 2666 9 is_stmt 1 view .LVU2965
2666:src/display.c **** 	  bp = scopy(bp, "HYP");
 9211              		.loc 1 2666 12 is_stmt 0 view .LVU2966
 9212 0214 9A06     		lsls	r2, r3, #26
 9213 0216 00F1CF80 		bmi	.L1173
2678:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9214              		.loc 1 2678 9 is_stmt 1 view .LVU2967
2678:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9215              		.loc 1 2678 12 is_stmt 0 view .LVU2968
 9216 021a DF07     		lsls	r7, r3, #31
 9217 021c 00F15381 		bmi	.L1174
2693:src/display.c **** 	  /* Commands with arguments */
 9218              		.loc 1 2693 9 is_stmt 1 view .LVU2969
2693:src/display.c **** 	  /* Commands with arguments */
 9219              		.loc 1 2693 13 is_stmt 0 view .LVU2970
 9220 0220 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2693:src/display.c **** 	  /* Commands with arguments */
 9221              		.loc 1 2693 12 view .LVU2971
 9222 0222 8806     		lsls	r0, r1, #26
 9223 0224 40F1E880 		bpl	.L895
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9224              		.loc 1 2696 4 is_stmt 1 view .LVU2972
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9225              		.loc 1 2696 8 is_stmt 0 view .LVU2973
 9226 0228 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9227              		.loc 1 2696 7 view .LVU2974
 9228 022a 4D2B     		cmp	r3, #77
 9229 022c 00F08081 		beq	.L896
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9230              		.loc 1 2696 28 discriminator 1 view .LVU2975
 9231 0230 03F17302 		add	r2, r3, #115
 9232 0234 D2B2     		uxtb	r2, r2
 9233 0236 012A     		cmp	r2, #1
 9234 0238 40F27A81 		bls	.L896
2592:src/display.c **** 	const char *p;
 9235              		.loc 1 2592 17 view .LVU2976
 9236 023c 20A8     		add	r0, sp, #128
 9237              	.LVL1022:
 9238              	.L897:
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9239              		.loc 1 2699 4 is_stmt 1 view .LVU2977
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9240              		.loc 1 2699 35 is_stmt 0 view .LVU2978
 9241 023e 0622     		movs	r2, #6
 9242 0240 3D49     		ldr	r1, .L1206+40
 9243 0242 02EB0313 		add	r3, r2, r3, lsl #4
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
ARM GAS  /tmp/ccpF0v4D.s 			page 275


 9244              		.loc 1 2699 9 view .LVU2979
 9245 0246 1944     		add	r1, r1, r3
 9246 0248 FFF7FEFF 		bl	scopy
 9247              	.LVL1023:
2700:src/display.c **** 	  if (State2.dot) {
 9248              		.loc 1 2700 4 is_stmt 1 view .LVU2980
2700:src/display.c **** 	  if (State2.dot) {
 9249              		.loc 1 2700 9 is_stmt 0 view .LVU2981
 9250 024c 3B4B     		ldr	r3, .L1206+44
 9251 024e 94F91510 		ldrsb	r1, [r4, #21]
 9252 0252 3B4A     		ldr	r2, .L1206+48
 9253 0254 12EA2101 		ands	r1, r2, r1, asr #32
 9254 0258 38BF     		it	cc
 9255 025a 1946     		movcc	r1, r3
 9256 025c FFF7FEFF 		bl	scopy
 9257              	.LVL1024:
2701:src/display.c **** 	    *bp++ = 's';
 9258              		.loc 1 2701 8 view .LVU2982
 9259 0260 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9260              	.LVL1025:
2701:src/display.c **** 	    *bp++ = 's';
 9261              		.loc 1 2701 4 is_stmt 1 view .LVU2983
2701:src/display.c **** 	    *bp++ = 's';
 9262              		.loc 1 2701 7 is_stmt 0 view .LVU2984
 9263 0262 5906     		lsls	r1, r3, #25
 9264 0264 40F16A81 		bpl	.L899
2702:src/display.c **** 	    *bp++ = '_';
 9265              		.loc 1 2702 6 is_stmt 1 view .LVU2985
 9266              	.LVL1026:
2702:src/display.c **** 	    *bp++ = '_';
 9267              		.loc 1 2702 12 is_stmt 0 view .LVU2986
 9268 0268 7322     		movs	r2, #115
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9269              		.loc 1 2703 12 view .LVU2987
 9270 026a 5F23     		movs	r3, #95
2702:src/display.c **** 	    *bp++ = '_';
 9271              		.loc 1 2702 12 view .LVU2988
 9272 026c 0270     		strb	r2, [r0]
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9273              		.loc 1 2703 6 is_stmt 1 view .LVU2989
 9274              	.LVL1027:
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9275              		.loc 1 2703 12 is_stmt 0 view .LVU2990
 9276 026e 4370     		strb	r3, [r0, #1]
 9277              	.LVL1028:
 9278              	.L923:
2806:src/display.c **** 	    set_status_top(buf);
 9279              		.loc 1 2806 4 is_stmt 1 view .LVU2991
2806:src/display.c **** 	    set_status_top(buf);
 9280              		.loc 1 2806 7 is_stmt 0 view .LVU2992
 9281 0270 B8F1000F 		cmp	r8, #0
 9282 0274 00F0D380 		beq	.L890
 9283              	.L1157:
2807:src/display.c **** 	    no_status_top = 1;
 9284              		.loc 1 2807 6 is_stmt 1 view .LVU2993
 9285              	.LVL1029:
 9286              	.LBB573:
ARM GAS  /tmp/ccpF0v4D.s 			page 276


 9287              	.LBI573:
3505:src/display.c **** 	if (no_status_top) return;
 9288              		.loc 1 3505 19 view .LVU2994
 9289              	.LBB574:
3506:src/display.c **** 	if (State2.runmode) {
 9290              		.loc 1 3506 2 view .LVU2995
3506:src/display.c **** 	if (State2.runmode) {
 9291              		.loc 1 3506 5 is_stmt 0 view .LVU2996
 9292 0278 B9F90030 		ldrsh	r3, [r9]
 9293 027c 002B     		cmp	r3, #0
 9294 027e 7FF4F8AE 		bne	.L886
 9295              	.LBE574:
 9296              	.LBE573:
 9297              	.LBB575:
 9298              	.LBB576:
 9299 0282 20A8     		add	r0, sp, #128
 9300              	.LVL1030:
3506:src/display.c **** 	if (State2.runmode) {
 9301              		.loc 1 3506 5 view .LVU2997
 9302 0284 FFF7FEFF 		bl	set_status_top.part.0
 9303              	.LVL1031:
3506:src/display.c **** 	if (State2.runmode) {
 9304              		.loc 1 3506 5 view .LVU2998
 9305 0288 F3E6     		b	.L886
 9306              	.LVL1032:
 9307              	.L975:
3506:src/display.c **** 	if (State2.runmode) {
 9308              		.loc 1 3506 5 view .LVU2999
 9309              	.LBE576:
 9310              	.LBE575:
2899:src/display.c **** 	      x_disp = 1;
 9311              		.loc 1 2899 8 is_stmt 1 view .LVU3000
 9312              	.LBB577:
 9313              	.LBI577:
1245:src/display.c ****       int i;
 9314              		.loc 1 1245 17 view .LVU3001
 9315              	.LBB578:
1246:src/display.c ****       int gotdot = -1;
 9316              		.loc 1 1246 7 view .LVU3002
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9317              		.loc 1 1247 7 view .LVU3003
1249:src/display.c **** #endif
 9318              		.loc 1 1249 7 view .LVU3004
1253:src/display.c **** #endif
 9319              		.loc 1 1253 7 view .LVU3005
1256:src/display.c **** 	SET_MANT_SIGN;
 9320              		.loc 1 1256 7 view .LVU3006
1256:src/display.c **** 	SET_MANT_SIGN;
 9321              		.loc 1 1256 10 is_stmt 0 view .LVU3007
 9322 028a 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 9323 028c 2D2A     		cmp	r2, #45
 9324 028e 00F07581 		beq	.L1175
 9325              	.LVL1033:
 9326              	.L983:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9327              		.loc 1 1261 7 is_stmt 1 view .LVU3008
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
ARM GAS  /tmp/ccpF0v4D.s 			page 277


 9328              		.loc 1 1261 11 is_stmt 0 view .LVU3009
 9329 0292 2C4A     		ldr	r2, .L1206+52
 9330 0294 1268     		ldr	r2, [r2]
 9331 0296 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9332              		.loc 1 1261 10 view .LVU3010
 9333 029a 12F00108 		ands	r8, r2, #1
 9334 029e 00F02381 		beq	.L984
 9335              	.LVL1034:
1262:src/display.c **** 	  set_dig(i, *p);
 9336              		.loc 1 1262 12 is_stmt 1 view .LVU3011
 9337 02a2 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1262:src/display.c **** 	  set_dig(i, *p);
 9338              		.loc 1 1262 8 is_stmt 0 view .LVU3012
 9339 02a6 0026     		movs	r6, #0
1262:src/display.c **** 	  set_dig(i, *p);
 9340              		.loc 1 1262 2 view .LVU3013
 9341 02a8 39B1     		cbz	r1, .L986
 9342              	.LVL1035:
 9343              	.L985:
1263:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9344              		.loc 1 1263 4 is_stmt 1 view .LVU3014
 9345 02aa 3046     		mov	r0, r6
 9346 02ac FFF7FEFF 		bl	set_dig
 9347              	.LVL1036:
1264:src/display.c **** 	}
 9348              		.loc 1 1264 4 view .LVU3015
1262:src/display.c **** 	  set_dig(i, *p);
 9349              		.loc 1 1262 12 is_stmt 0 view .LVU3016
 9350 02b0 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 9351              	.LVL1037:
1264:src/display.c **** 	}
 9352              		.loc 1 1264 6 view .LVU3017
 9353 02b4 0936     		adds	r6, r6, #9
 9354              	.LVL1038:
1262:src/display.c **** 	  set_dig(i, *p);
 9355              		.loc 1 1262 24 is_stmt 1 view .LVU3018
1262:src/display.c **** 	  set_dig(i, *p);
 9356              		.loc 1 1262 12 view .LVU3019
1262:src/display.c **** 	  set_dig(i, *p);
 9357              		.loc 1 1262 2 is_stmt 0 view .LVU3020
 9358 02b6 0029     		cmp	r1, #0
 9359 02b8 F7D1     		bne	.L985
 9360              	.LVL1039:
 9361              	.L986:
1266:src/display.c ****       } else {
 9362              		.loc 1 1266 2 is_stmt 1 view .LVU3021
 9363 02ba FFF7FEFF 		bl	carry_overflow
 9364              	.LVL1040:
1266:src/display.c ****       } else {
 9365              		.loc 1 1266 2 is_stmt 0 view .LVU3022
 9366              	.LBE578:
 9367              	.LBE577:
2902:src/display.c **** 	      goto finish;
 9368              		.loc 1 2902 6 is_stmt 1 view .LVU3023
2902:src/display.c **** 	      goto finish;
 9369              		.loc 1 2902 9 is_stmt 0 view .LVU3024
ARM GAS  /tmp/ccpF0v4D.s 			page 278


 9370 02be 154B     		ldr	r3, .L1206+4
 9371 02c0 1B68     		ldr	r3, [r3]
 9372 02c2 002B     		cmp	r3, #0
 9373 02c4 40F0FD80 		bne	.L1079
 9374              	.LVL1041:
 9375              	.L1165:
2902:src/display.c **** 	      goto finish;
 9376              		.loc 1 2902 9 view .LVU3025
 9377 02c8 194E     		ldr	r6, .L1206+32
 9378              	.LVL1042:
 9379              	.L978:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9380              		.loc 1 2932 2 is_stmt 1 view .LVU3026
 9381 02ca FFF7FEFF 		bl	set_annunciators
 9382              	.LVL1043:
2933:src/display.c **** 	  ShowRPN = 0;
 9383              		.loc 1 2933 2 view .LVU3027
2933:src/display.c **** 	  ShowRPN = 0;
 9384              		.loc 1 2933 50 is_stmt 0 view .LVU3028
 9385 02ce 3B68     		ldr	r3, [r7]
 9386 02d0 002B     		cmp	r3, #0
 9387 02d2 7FF454AF 		bne	.L882
2933:src/display.c **** 	  ShowRPN = 0;
 9388              		.loc 1 2933 69 discriminator 3 view .LVU3029
 9389 02d6 019B     		ldr	r3, [sp, #4]
 9390 02d8 B3F90030 		ldrsh	r3, [r3]
 9391 02dc 002B     		cmp	r3, #0
 9392 02de 7FF44EAF 		bne	.L882
2933:src/display.c **** 	  ShowRPN = 0;
 9393              		.loc 1 2933 81 discriminator 4 view .LVU3030
 9394 02e2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9395 02e4 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9396 02e6 03F00403 		and	r3, r3, #4
 9397 02ea 1343     		orrs	r3, r3, r2
 9398 02ec 7FF447AF 		bne	.L882
 9399 02f0 DFF84080 		ldr	r8, .L1206+36
 9400 02f4 4BE7     		b	.L1015
 9401              	.LVL1044:
 9402              	.L1172:
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9403              		.loc 1 2893 42 discriminator 1 view .LVU3031
 9404 02f6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9405              		.loc 1 2893 39 discriminator 1 view .LVU3032
 9406 02f8 13F00101 		ands	r1, r3, #1
 9407 02fc 7FF437AF 		bne	.L977
 9408              	.LVL1045:
2894:src/display.c **** 	      }
 9409              		.loc 1 2894 3 is_stmt 1 view .LVU3033
 9410 0300 FFF7FEFF 		bl	format_reg
 9411              	.LVL1046:
2902:src/display.c **** 	      goto finish;
 9412              		.loc 1 2902 6 view .LVU3034
2902:src/display.c **** 	      goto finish;
 9413              		.loc 1 2902 9 is_stmt 0 view .LVU3035
 9414 0304 034B     		ldr	r3, .L1206+4
 9415 0306 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccpF0v4D.s 			page 279


 9416 0308 002B     		cmp	r3, #0
 9417 030a DED0     		beq	.L978
 9418 030c 64E7     		b	.L979
 9419              	.L1207:
 9420 030e 00BF     		.align	2
 9421              	.L1206:
 9422 0310 00000000 		.word	StateWhileOn
 9423 0314 00000000 		.word	WasDataEntry
 9424 0318 00000000 		.word	.LANCHOR21
 9425 031c 00000000 		.word	DispPlot
 9426 0320 00000000 		.word	DispMsg
 9427 0324 00000000 		.word	.LANCHOR25
 9428 0328 00000000 		.word	.LANCHOR19
 9429 032c 00000000 		.word	LastDisplayedNumber
 9430 0330 00000000 		.word	ShowRegister
 9431 0334 00000000 		.word	ShowRPN
 9432 0338 00000000 		.word	argcmds
 9433 033c 04000000 		.word	.LC19
 9434 0340 00000000 		.word	.LC18
 9435 0344 00000000 		.word	main_ram
 9436 0348 00000000 		.word	.LANCHOR18
 9437 034c 00000000 		.word	ProgFree
 9438              	.LVL1047:
 9439              	.L1017:
2942:src/display.c **** 	  annunciators();
 9440              		.loc 1 2942 52 discriminator 3 view .LVU3036
 9441 0350 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9442 0352 13F0C00F 		tst	r3, #192
 9443 0356 3FF43BAF 		beq	.L1019
 9444 035a 37E7     		b	.L1018
 9445              	.L1036:
 9446 035c 0023     		movs	r3, #0
 9447 035e 28E7     		b	.L1016
 9448              	.LVL1048:
 9449              	.L1170:
 9450              	.LBB604:
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9451              		.loc 1 2646 4 is_stmt 1 view .LVU3037
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9452              		.loc 1 2646 9 is_stmt 0 view .LVU3038
 9453 0360 B24B     		ldr	r3, .L1208
 9454 0362 CDF86650 		str	r5, [sp, #102]	@ unaligned
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9455              		.loc 1 2647 4 is_stmt 1 view .LVU3039
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9456              		.loc 1 2646 9 is_stmt 0 view .LVU3040
 9457 0366 93E80700 		ldm	r3, {r0, r1, r2}
 9458 036a 17AB     		add	r3, sp, #92
 9459 036c 03C3     		stmia	r3!, {r0, r1}
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9460              		.loc 1 2647 4 view .LVU3041
 9461 036e 2946     		mov	r1, r5
 9462 0370 AF48     		ldr	r0, .L1208+4
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9463              		.loc 1 2646 9 view .LVU3042
 9464 0372 1A80     		strh	r2, [r3]	@ movhi
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
ARM GAS  /tmp/ccpF0v4D.s 			page 280


 9465              		.loc 1 2647 4 view .LVU3043
 9466 0374 FFF7FEFF 		bl	set_digits_string
 9467              	.LVL1049:
2648:src/display.c **** #ifndef REALBUILD
 9468              		.loc 1 2648 4 is_stmt 1 view .LVU3044
 9469              	.LBB605:
 9470              	.LBI605:
 407:src/display.c ****   if (res) *res++ = ch;
 9471              		.loc 1 407 14 view .LVU3045
 9472              	.LBB606:
 408:src/display.c ****   else	set_dig(base, ch);
 9473              		.loc 1 408 3 view .LVU3046
 409:src/display.c ****   return res;
 9474              		.loc 1 409 8 view .LVU3047
 9475 0378 7221     		movs	r1, #114
 9476 037a 6C20     		movs	r0, #108
 9477 037c FFF7FEFF 		bl	set_dig
 9478              	.LVL1050:
 410:src/display.c **** }
 9479              		.loc 1 410 3 view .LVU3048
 410:src/display.c **** }
 9480              		.loc 1 410 3 is_stmt 0 view .LVU3049
 9481              	.LBE606:
 9482              	.LBE605:
2650:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9483              		.loc 1 2650 4 is_stmt 1 view .LVU3050
 9484 0380 AC49     		ldr	r1, .L1208+8
 9485 0382 AD48     		ldr	r0, .L1208+12
 9486 0384 AD4F     		ldr	r7, .L1208+16
 9487 0386 AE4E     		ldr	r6, .L1208+20
 9488 0388 FFF7FEFF 		bl	scopy
 9489              	.LVL1051:
2651:src/display.c **** #endif
 9490              		.loc 1 2651 4 view .LVU3051
 9491 038c AD49     		ldr	r1, .L1208+24
 9492 038e AE48     		ldr	r0, .L1208+28
 9493 0390 FFF7FEFF 		bl	scopy
 9494              	.LVL1052:
2653:src/display.c **** 	  set_status(vers);
 9495              		.loc 1 2653 4 view .LVU3052
 9496 0394 AD49     		ldr	r1, .L1208+32
 9497 0396 0422     		movs	r2, #4
 9498 0398 0DF16500 		add	r0, sp, #101
 9499 039c FFF7FEFF 		bl	xcopy
 9500              	.LVL1053:
2654:src/display.c **** 	  skip = 1;
 9501              		.loc 1 2654 4 view .LVU3053
 9502 03a0 17A8     		add	r0, sp, #92
 9503 03a2 FFF7FEFF 		bl	set_status
 9504              	.LVL1054:
2655:src/display.c **** 	  goto nostk;
 9505              		.loc 1 2655 4 view .LVU3054
2656:src/display.c **** 	} else if (State2.confirm) {
 9506              		.loc 1 2656 4 view .LVU3055
2656:src/display.c **** 	} else if (State2.confirm) {
 9507              		.loc 1 2656 4 is_stmt 0 view .LVU3056
 9508              	.LBE604:
ARM GAS  /tmp/ccpF0v4D.s 			page 281


2886:src/display.c **** 	if (!skip) {
 9509              		.loc 1 2886 2 is_stmt 1 view .LVU3057
 9510 03a6 AA4B     		ldr	r3, .L1208+36
 9511 03a8 0193     		str	r3, [sp, #4]
 9512 03aa FFF7FEFF 		bl	show_flags
 9513              	.LVL1055:
2887:src/display.c **** 	  if (State2.runmode) {
 9514              		.loc 1 2887 2 view .LVU3058
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9515              		.loc 1 2932 2 view .LVU3059
 9516 03ae FFF7FEFF 		bl	set_annunciators
 9517              	.LVL1056:
2933:src/display.c **** 	  ShowRPN = 0;
 9518              		.loc 1 2933 2 view .LVU3060
 9519 03b2 E4E6     		b	.L882
 9520              	.LVL1057:
 9521              	.L1038:
2933:src/display.c **** 	  ShowRPN = 0;
 9522              		.loc 1 2933 2 is_stmt 0 view .LVU3061
 9523 03b4 0123     		movs	r3, #1
 9524 03b6 FCE6     		b	.L1016
 9525              	.LVL1058:
 9526              	.L1173:
2667:src/display.c **** 	  if (! State2.dot)
 9527              		.loc 1 2667 4 is_stmt 1 view .LVU3062
2667:src/display.c **** 	  if (! State2.dot)
 9528              		.loc 1 2667 9 is_stmt 0 view .LVU3063
 9529 03b8 A649     		ldr	r1, .L1208+40
 9530 03ba 20A8     		add	r0, sp, #128
 9531              	.LVL1059:
2667:src/display.c **** 	  if (! State2.dot)
 9532              		.loc 1 2667 9 view .LVU3064
 9533 03bc FFF7FEFF 		bl	scopy
 9534              	.LVL1060:
2668:src/display.c **** 	    *bp++ = '\235';
 9535              		.loc 1 2668 8 view .LVU3065
 9536 03c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9537              	.LVL1061:
2668:src/display.c **** 	    *bp++ = '\235';
 9538              		.loc 1 2668 4 is_stmt 1 view .LVU3066
2668:src/display.c **** 	    *bp++ = '\235';
 9539              		.loc 1 2668 7 is_stmt 0 view .LVU3067
 9540 03c2 5B06     		lsls	r3, r3, #25
 9541 03c4 3FF554AF 		bmi	.L923
2669:src/display.c **** 	  if (yreg_enabled) {
 9542              		.loc 1 2669 6 is_stmt 1 view .LVU3068
 9543              	.LVL1062:
2669:src/display.c **** 	  if (yreg_enabled) {
 9544              		.loc 1 2669 12 is_stmt 0 view .LVU3069
 9545 03c8 9D23     		movs	r3, #157
 9546 03ca 0370     		strb	r3, [r0]
 9547 03cc 50E7     		b	.L923
 9548              	.LVL1063:
 9549              	.L976:
2897:src/display.c **** 	    } else {
 9550              		.loc 1 2897 3 is_stmt 1 view .LVU3070
 9551 03ce A248     		ldr	r0, .L1208+44
ARM GAS  /tmp/ccpF0v4D.s 			page 282


 9552 03d0 2421     		movs	r1, #36
 9553 03d2 FFF7FEFF 		bl	set_digits_string
 9554              	.LVL1064:
2902:src/display.c **** 	      goto finish;
 9555              		.loc 1 2902 6 view .LVU3071
2902:src/display.c **** 	      goto finish;
 9556              		.loc 1 2902 9 is_stmt 0 view .LVU3072
 9557 03d6 A14B     		ldr	r3, .L1208+48
 9558 03d8 1B68     		ldr	r3, [r3]
 9559 03da 002B     		cmp	r3, #0
 9560 03dc 3FF4CDAE 		beq	.L1167
 9561 03e0 FAE6     		b	.L979
 9562              	.LVL1065:
 9563              	.L884:
2664:src/display.c **** 	  }
 9564              		.loc 1 2664 6 is_stmt 1 view .LVU3073
 9565 03e2 9B4B     		ldr	r3, .L1208+36
 9566 03e4 9E48     		ldr	r0, .L1208+52
 9567 03e6 0193     		str	r3, [sp, #4]
 9568 03e8 944F     		ldr	r7, .L1208+16
 9569 03ea FFF7FEFF 		bl	set_status
 9570              	.LVL1066:
2884:src/display.c ****       nostk:
 9571              		.loc 1 2884 2 view .LVU3074
 9572 03ee FFF7FEFF 		bl	show_stack
 9573              	.LVL1067:
2886:src/display.c **** 	if (!skip) {
 9574              		.loc 1 2886 2 view .LVU3075
 9575 03f2 FFF7FEFF 		bl	show_flags
 9576              	.LVL1068:
2887:src/display.c **** 	  if (State2.runmode) {
 9577              		.loc 1 2887 2 view .LVU3076
 9578 03f6 46E6     		b	.L887
 9579              	.L895:
2731:src/display.c **** 	  *bp++ = 'x';
 9580              		.loc 1 2731 9 view .LVU3077
2731:src/display.c **** 	  *bp++ = 'x';
 9581              		.loc 1 2731 19 is_stmt 0 view .LVU3078
 9582 03f8 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2731:src/display.c **** 	  *bp++ = 'x';
 9583              		.loc 1 2731 12 view .LVU3079
 9584 03fa 072A     		cmp	r2, #7
 9585 03fc 00F04081 		beq	.L906
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9586              		.loc 1 2732 4 is_stmt 1 view .LVU3080
 9587              	.LVL1069:
2733:src/display.c **** 	  *bp++ = '_';
 9588              		.loc 1 2733 33 is_stmt 0 view .LVU3081
 9589 0400 984B     		ldr	r3, .L1208+56
2733:src/display.c **** 	  *bp++ = '_';
 9590              		.loc 1 2733 10 view .LVU3082
 9591 0402 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9592 0404 8DF88130 		strb	r3, [sp, #129]
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9593              		.loc 1 2732 10 view .LVU3083
 9594 0408 7822     		movs	r2, #120
2734:src/display.c **** 	  *bp++ = '?';
ARM GAS  /tmp/ccpF0v4D.s 			page 283


 9595              		.loc 1 2734 10 view .LVU3084
 9596 040a 43F65F73 		movw	r3, #16223
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9597              		.loc 1 2732 10 view .LVU3085
 9598 040e 8DF88020 		strb	r2, [sp, #128]
2733:src/display.c **** 	  *bp++ = '_';
 9599              		.loc 1 2733 4 is_stmt 1 view .LVU3086
 9600              	.LVL1070:
2734:src/display.c **** 	  *bp++ = '?';
 9601              		.loc 1 2734 4 view .LVU3087
2735:src/display.c **** 	  if (yreg_enabled) {
 9602              		.loc 1 2735 4 view .LVU3088
2734:src/display.c **** 	  *bp++ = '?';
 9603              		.loc 1 2734 10 is_stmt 0 view .LVU3089
 9604 0412 ADF88230 		strh	r3, [sp, #130]	@ movhi
2736:src/display.c **** 	    set_status_top(buf);
 9605              		.loc 1 2736 4 is_stmt 1 view .LVU3090
2736:src/display.c **** 	    set_status_top(buf);
 9606              		.loc 1 2736 7 is_stmt 0 view .LVU3091
 9607 0416 B8F1000F 		cmp	r8, #0
 9608 041a 7FF42DAF 		bne	.L1157
 9609              	.LVL1071:
 9610              	.L890:
2676:src/display.c **** 	  }
 9611              		.loc 1 2676 6 is_stmt 1 view .LVU3092
 9612 041e 20A8     		add	r0, sp, #128
 9613 0420 FFF7FEFF 		bl	set_status
 9614              	.LVL1072:
2884:src/display.c ****       nostk:
 9615              		.loc 1 2884 2 view .LVU3093
 9616 0424 8A4B     		ldr	r3, .L1208+36
 9617 0426 0193     		str	r3, [sp, #4]
 9618 0428 844F     		ldr	r7, .L1208+16
 9619 042a FFF7FEFF 		bl	show_stack
 9620              	.LVL1073:
2886:src/display.c **** 	if (!skip) {
 9621              		.loc 1 2886 2 view .LVU3094
 9622 042e FFF7FEFF 		bl	show_flags
 9623              	.LVL1074:
2887:src/display.c **** 	  if (State2.runmode) {
 9624              		.loc 1 2887 2 view .LVU3095
 9625 0432 28E6     		b	.L887
 9626              	.LVL1075:
 9627              	.L1171:
 9628              	.LBB607:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9629              		.loc 1 2911 6 is_stmt 0 discriminator 1 view .LVU3096
 9630 0434 8C49     		ldr	r1, .L1208+60
 9631 0436 0BEB8B03 		add	r3, fp, fp, lsl #2
2912:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9632              		.loc 1 2912 21 discriminator 1 view .LVU3097
 9633 043a 0BF0010B 		and	fp, fp, #1
 9634              	.LVL1076:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9635              		.loc 1 2911 6 discriminator 1 view .LVU3098
 9636 043e 1944     		add	r1, r1, r3
 9637 0440 20A8     		add	r0, sp, #128
ARM GAS  /tmp/ccpF0v4D.s 			page 284


 9638 0442 0BF1030B 		add	fp, fp, #3
 9639 0446 0293     		str	r3, [sp, #8]
 9640 0448 FFF7FEFF 		bl	scopy_spc
 9641              	.LVL1077:
 9642 044c 5A46     		mov	r2, fp
 9643 044e 4146     		mov	r1, r8
 9644 0450 FFF7FEFF 		bl	num_arg_0
 9645              	.LVL1078:
2913:src/display.c **** #ifndef REALBUILD
 9646              		.loc 1 2913 6 is_stmt 1 discriminator 1 view .LVU3099
 9647 0454 0921     		movs	r1, #9
 9648 0456 20A8     		add	r0, sp, #128
 9649 0458 FFF7FEFF 		bl	set_digits_string
 9650              	.LVL1079:
2915:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9651              		.loc 1 2915 6 discriminator 1 view .LVU3100
 9652 045c 2822     		movs	r2, #40
 9653 045e 3146     		mov	r1, r6
 9654 0460 20A8     		add	r0, sp, #128
 9655 0462 FFF7FEFF 		bl	xset
 9656              	.LVL1080:
2916:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9657              		.loc 1 2916 6 discriminator 1 view .LVU3101
 9658 0466 0121     		movs	r1, #1
 9659 0468 DAF80000 		ldr	r0, [r10]
 9660 046c 3246     		mov	r2, r6
 9661 046e FFF7FEFF 		bl	set_exp
 9662              	.LVL1081:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9663              		.loc 1 2917 6 discriminator 1 view .LVU3102
 9664 0472 7E49     		ldr	r1, .L1208+64
 9665 0474 029B     		ldr	r3, [sp, #8]
 9666 0476 1944     		add	r1, r1, r3
 9667 0478 3EE6     		b	.L1021
 9668              	.LVL1082:
 9669              	.L1003:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9670              		.loc 1 2917 6 is_stmt 0 discriminator 1 view .LVU3103
 9671              	.LBE607:
 9672              	.LBB608:
 9673              	.LBB596:
1359:src/display.c **** 	    gotdot = i;
 9674              		.loc 1 1359 4 is_stmt 1 view .LVU3104
1359:src/display.c **** 	    gotdot = i;
 9675              		.loc 1 1359 7 is_stmt 0 view .LVU3105
 9676 047a BBF1FF3F 		cmp	fp, #-1
 9677 047e 08BF     		it	eq
 9678 0480 C346     		moveq	fp, r8
 9679              	.LVL1083:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9680              		.loc 1 1361 4 is_stmt 1 view .LVU3106
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9681              		.loc 1 1362 6 view .LVU3107
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9682              		.loc 1 1362 13 is_stmt 0 view .LVU3108
 9683 0482 ABF11B0B 		sub	fp, fp, #27
 9684              	.LVL1084:
ARM GAS  /tmp/ccpF0v4D.s 			page 285


1363:src/display.c **** 	      break;
 9685              		.loc 1 1363 6 is_stmt 1 view .LVU3109
1363:src/display.c **** 	      break;
 9686              		.loc 1 1363 9 is_stmt 0 view .LVU3110
 9687 0486 BBF1000F 		cmp	fp, #0
 9688 048a 10DD     		ble	.L988
1369:src/display.c **** 	  }
 9689              		.loc 1 1369 6 view .LVU3111
 9690 048c DFF8EC81 		ldr	r8, .L1208+80
 9691              	.LVL1085:
 9692              	.L1007:
1366:src/display.c **** 	      break;
 9693              		.loc 1 1366 6 is_stmt 1 view .LVU3112
1369:src/display.c **** 	  }
 9694              		.loc 1 1369 6 view .LVU3113
 9695              	.LBB579:
 9696              	.LBB580:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9697              		.loc 1 370 3 view .LVU3114
 9698 0490 5846     		mov	r0, fp
 9699              	.LBE580:
 9700              	.LBE579:
1366:src/display.c **** 	      break;
 9701              		.loc 1 1366 9 is_stmt 0 view .LVU3115
 9702 0492 16B1     		cbz	r6, .L1008
 9703              	.LVL1086:
1366:src/display.c **** 	      break;
 9704              		.loc 1 1366 27 view .LVU3116
 9705 0494 BBF1090F 		cmp	fp, #9
 9706 0498 09D0     		beq	.L988
 9707              	.L1008:
1369:src/display.c **** 	  }
 9708              		.loc 1 1369 6 view .LVU3117
 9709 049a 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 9710              	.LVL1087:
 9711              	.LBB582:
 9712              	.LBI579:
 367:src/display.c ****   if (sep == SEP_NONE)
 9713              		.loc 1 367 14 is_stmt 1 view .LVU3118
 9714              	.LBB581:
 368:src/display.c ****     return res;
 9715              		.loc 1 368 3 view .LVU3119
 368:src/display.c ****     return res;
 9716              		.loc 1 368 6 is_stmt 0 view .LVU3120
 9717 049e 09B1     		cbz	r1, .L1009
 9718 04a0 FFF7FEFF 		bl	set_separator.part.0
 9719              	.LVL1088:
 9720              	.L1009:
 368:src/display.c ****     return res;
 9721              		.loc 1 368 6 view .LVU3121
 9722              	.LBE581:
 9723              	.LBE582:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9724              		.loc 1 1361 4 is_stmt 1 view .LVU3122
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9725              		.loc 1 1362 6 view .LVU3123
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
ARM GAS  /tmp/ccpF0v4D.s 			page 286


 9726              		.loc 1 1362 13 is_stmt 0 view .LVU3124
 9727 04a4 ABF11B0B 		sub	fp, fp, #27
 9728              	.LVL1089:
1363:src/display.c **** 	      break;
 9729              		.loc 1 1363 6 is_stmt 1 view .LVU3125
1363:src/display.c **** 	      break;
 9730              		.loc 1 1363 9 is_stmt 0 view .LVU3126
 9731 04a8 BBF1000F 		cmp	fp, #0
 9732 04ac F0DC     		bgt	.L1007
 9733              	.LVL1090:
 9734              	.L988:
1387:src/display.c **** 	    p++;
 9735              		.loc 1 1387 4 is_stmt 1 view .LVU3127
1387:src/display.c **** 	    p++;
 9736              		.loc 1 1387 7 is_stmt 0 view .LVU3128
 9737 04ae 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
 9738 04b2 452A     		cmp	r2, #69
 9739 04b4 00F01581 		beq	.L1176
 9740              	.L1010:
 9741              	.LVL1091:
1387:src/display.c **** 	    p++;
 9742              		.loc 1 1387 7 view .LVU3129
 9743              	.LBE596:
 9744              	.LBE608:
2902:src/display.c **** 	      goto finish;
 9745              		.loc 1 2902 6 is_stmt 1 view .LVU3130
2902:src/display.c **** 	      goto finish;
 9746              		.loc 1 2902 9 is_stmt 0 view .LVU3131
 9747 04b8 684B     		ldr	r3, .L1208+48
 9748 04ba 1B68     		ldr	r3, [r3]
 9749 04bc 002B     		cmp	r3, #0
 9750 04be 3FF403AF 		beq	.L1165
 9751              	.L1079:
 9752 04c2 5F4E     		ldr	r6, .L1208+20
 9753 04c4 88E6     		b	.L979
 9754              	.LVL1092:
 9755              	.L1174:
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9756              		.loc 1 2680 4 is_stmt 1 view .LVU3132
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9757              		.loc 1 2680 9 is_stmt 0 view .LVU3133
 9758 04c6 2E22     		movs	r2, #46
 9759 04c8 6949     		ldr	r1, .L1208+68
 9760 04ca 20A8     		add	r0, sp, #128
 9761              	.LVL1093:
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9762              		.loc 1 2680 9 view .LVU3134
 9763 04cc FFF7FEFF 		bl	scopy_char
 9764              	.LVL1094:
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9765              		.loc 1 2681 14 view .LVU3135
 9766 04d0 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9767              		.loc 1 2680 9 view .LVU3136
 9768 04d2 0346     		mov	r3, r0
 9769              	.LVL1095:
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
ARM GAS  /tmp/ccpF0v4D.s 			page 287


 9770              		.loc 1 2681 4 is_stmt 1 view .LVU3137
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9771              		.loc 1 2681 7 is_stmt 0 view .LVU3138
 9772 04d4 002A     		cmp	r2, #0
 9773 04d6 40F0F680 		bne	.L1177
 9774              	.L893:
2684:src/display.c **** 	  if (yreg_enabled) {
 9775              		.loc 1 2684 4 is_stmt 1 view .LVU3139
 9776              	.LVL1096:
2684:src/display.c **** 	  if (yreg_enabled) {
 9777              		.loc 1 2684 10 is_stmt 0 view .LVU3140
 9778 04da 5F22     		movs	r2, #95
 9779 04dc 1A70     		strb	r2, [r3]
2685:src/display.c **** 	    set_status_top(buf);
 9780              		.loc 1 2685 4 is_stmt 1 view .LVU3141
2685:src/display.c **** 	    set_status_top(buf);
 9781              		.loc 1 2685 7 is_stmt 0 view .LVU3142
 9782 04de B8F1000F 		cmp	r8, #0
 9783 04e2 7FF4C9AE 		bne	.L1157
2685:src/display.c **** 	    set_status_top(buf);
 9784              		.loc 1 2685 7 view .LVU3143
 9785 04e6 9AE7     		b	.L890
 9786              	.LVL1097:
 9787              	.L984:
 9788              	.LBB609:
 9789              	.LBB597:
1268:src/display.c **** 
 9790              		.loc 1 1268 2 is_stmt 1 view .LVU3144
 9791 04e8 FFF7FEFF 		bl	set_separator_decimal_modes
 9792              	.LVL1098:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9793              		.loc 1 1270 2 view .LVU3145
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9794              		.loc 1 1272 2 view .LVU3146
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9795              		.loc 1 1272 5 is_stmt 0 view .LVU3147
 9796 04ec A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9797              	.LBB583:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9798              		.loc 1 1279 15 view .LVU3148
 9799 04ee 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 9800              	.LBE583:
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9801              		.loc 1 1272 5 view .LVU3149
 9802 04f2 012A     		cmp	r2, #1
 9803 04f4 40F2EC80 		bls	.L987
 9804              	.LVL1099:
 9805              	.LBB584:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9806              		.loc 1 1279 14 is_stmt 1 view .LVU3150
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9807              		.loc 1 1279 4 is_stmt 0 view .LVU3151
 9808 04f8 0029     		cmp	r1, #0
 9809 04fa D8D0     		beq	.L988
1276:src/display.c **** 	  int j;
 9810              		.loc 1 1276 10 view .LVU3152
 9811 04fc 4246     		mov	r2, r8
ARM GAS  /tmp/ccpF0v4D.s 			page 288


1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9812              		.loc 1 1279 10 view .LVU3153
 9813 04fe 4646     		mov	r6, r8
 9814 0500 D446     		mov	ip, r10
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9815              		.loc 1 1279 4 view .LVU3154
 9816 0502 0846     		mov	r0, r1
 9817              	.LBE584:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9818              		.loc 1 1247 11 view .LVU3155
 9819 0504 4FF0FF3E 		mov	lr, #-1
 9820 0508 04E0     		b	.L990
 9821              	.LVL1100:
 9822              	.L989:
 9823              	.LBB585:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9824              		.loc 1 1279 28 is_stmt 1 view .LVU3156
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9825              		.loc 1 1279 15 is_stmt 0 view .LVU3157
 9826 050a 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9827              		.loc 1 1279 29 view .LVU3158
 9828 050e 0136     		adds	r6, r6, #1
 9829              	.LVL1101:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9830              		.loc 1 1279 14 is_stmt 1 view .LVU3159
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9831              		.loc 1 1279 4 is_stmt 0 view .LVU3160
 9832 0510 0028     		cmp	r0, #0
 9833 0512 3BD0     		beq	.L1178
 9834              	.LVL1102:
 9835              	.L990:
1280:src/display.c **** 	      gotdot = j;
 9836              		.loc 1 1280 6 is_stmt 1 view .LVU3161
1280:src/display.c **** 	      gotdot = j;
 9837              		.loc 1 1280 9 is_stmt 0 view .LVU3162
 9838 0514 2E28     		cmp	r0, #46
 9839 0516 F8D1     		bne	.L989
1281:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9840              		.loc 1 1281 8 is_stmt 1 view .LVU3163
 9841              	.LVL1103:
1283:src/display.c **** #  endif
 9842              		.loc 1 1283 8 view .LVU3164
1280:src/display.c **** 	      gotdot = j;
 9843              		.loc 1 1280 22 is_stmt 0 view .LVU3165
 9844 0518 BEF1FF3F 		cmp	lr, #-1
 9845 051c F5D1     		bne	.L989
1283:src/display.c **** #  endif
 9846              		.loc 1 1283 29 view .LVU3166
 9847 051e 9CF80120 		ldrb	r2, [ip, #1]	@ zero_extendqisi2
 9848 0522 A2F12E02 		sub	r2, #46
 9849 0526 B2FA82F2 		clz	r2, r2
1283:src/display.c **** #  endif
 9850              		.loc 1 1283 19 view .LVU3167
 9851 052a B646     		mov	lr, r6
1283:src/display.c **** #  endif
 9852              		.loc 1 1283 29 view .LVU3168
ARM GAS  /tmp/ccpF0v4D.s 			page 289


 9853 052c 5209     		lsrs	r2, r2, #5
 9854              	.LVL1104:
1283:src/display.c **** #  endif
 9855              		.loc 1 1283 29 view .LVU3169
 9856 052e ECE7     		b	.L989
 9857              	.LVL1105:
 9858              	.L896:
1283:src/display.c **** #  endif
 9859              		.loc 1 1283 29 view .LVU3170
 9860              	.LBE585:
 9861              	.LBE597:
 9862              	.LBE609:
2697:src/display.c **** #endif
 9863              		.loc 1 2697 6 is_stmt 1 view .LVU3171
2697:src/display.c **** #endif
 9864              		.loc 1 2697 11 is_stmt 0 view .LVU3172
 9865 0530 5049     		ldr	r1, .L1208+72
 9866 0532 20A8     		add	r0, sp, #128
 9867              	.LVL1106:
2697:src/display.c **** #endif
 9868              		.loc 1 2697 11 view .LVU3173
 9869 0534 FFF7FEFF 		bl	scopy
 9870              	.LVL1107:
2697:src/display.c **** #endif
 9871              		.loc 1 2697 11 view .LVU3174
 9872 0538 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 9873 053a 80E6     		b	.L897
 9874              	.L899:
2704:src/display.c **** 	    *bp++ = '\021';
 9875              		.loc 1 2704 11 is_stmt 1 view .LVU3175
2704:src/display.c **** 	    *bp++ = '\021';
 9876              		.loc 1 2704 14 is_stmt 0 view .LVU3176
 9877 053c 012E     		cmp	r6, #1
 9878 053e 00F0ED80 		beq	.L1179
2711:src/display.c **** 	      *bp++ = '.';
 9879              		.loc 1 2711 6 is_stmt 1 view .LVU3177
2711:src/display.c **** 	      *bp++ = '.';
 9880              		.loc 1 2711 10 is_stmt 0 view .LVU3178
 9881 0542 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2711:src/display.c **** 	      *bp++ = '.';
 9882              		.loc 1 2711 9 view .LVU3179
 9883 0544 DA07     		lsls	r2, r3, #31
2712:src/display.c **** 	    if (State2.numdigit > 0) {
 9884              		.loc 1 2712 8 is_stmt 1 view .LVU3180
 9885              	.LVL1108:
2712:src/display.c **** 	    if (State2.numdigit > 0) {
 9886              		.loc 1 2712 14 is_stmt 0 view .LVU3181
 9887 0546 44BF     		itt	mi
 9888 0548 2E23     		movmi	r3, #46
 9889 054a 00F8013B 		strbmi	r3, [r0], #1
 9890              	.LVL1109:
2713:src/display.c **** 	      if (State2.shuffle)
 9891              		.loc 1 2713 6 is_stmt 1 view .LVU3182
2713:src/display.c **** 	      if (State2.shuffle)
 9892              		.loc 1 2713 16 is_stmt 0 view .LVU3183
 9893 054e E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2713:src/display.c **** 	      if (State2.shuffle)
ARM GAS  /tmp/ccpF0v4D.s 			page 290


 9894              		.loc 1 2713 9 view .LVU3184
 9895 0550 8AB1     		cbz	r2, .L903
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9896              		.loc 1 2714 8 is_stmt 1 view .LVU3185
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9897              		.loc 1 2714 12 is_stmt 0 view .LVU3186
 9898 0552 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9899              		.loc 1 2714 11 view .LVU3187
 9900 0554 9B07     		lsls	r3, r3, #30
 9901 0556 40F12082 		bpl	.L904
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9902              		.loc 1 2715 3 is_stmt 1 view .LVU3188
 9903              	.LVL1110:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9904              		.loc 1 2715 17 is_stmt 0 view .LVU3189
 9905 055a 2289     		ldrh	r2, [r4, #8]
 9906              	.LVL1111:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9907              		.loc 1 2715 34 is_stmt 1 view .LVU3190
 9908 055c 4649     		ldr	r1, .L1208+76
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9909              		.loc 1 2715 10 is_stmt 0 view .LVU3191
 9910 055e 0023     		movs	r3, #0
 9911              	.LVL1112:
 9912              	.L905:
2716:src/display.c **** 	      else
 9913              		.loc 1 2716 5 is_stmt 1 discriminator 3 view .LVU3192
2716:src/display.c **** 	      else
 9914              		.loc 1 2716 24 is_stmt 0 discriminator 3 view .LVU3193
 9915 0560 02F00306 		and	r6, r2, #3
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9916              		.loc 1 2715 54 discriminator 3 view .LVU3194
 9917 0564 0133     		adds	r3, r3, #1
 9918              	.LVL1113:
2716:src/display.c **** 	      else
 9919              		.loc 1 2716 11 discriminator 3 view .LVU3195
 9920 0566 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9921 0568 00F8016B 		strb	r6, [r0], #1
 9922              	.LVL1114:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9923              		.loc 1 2715 53 is_stmt 1 discriminator 3 view .LVU3196
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9924              		.loc 1 2715 42 is_stmt 0 discriminator 3 view .LVU3197
 9925 056c E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9926              		.loc 1 2715 3 discriminator 3 view .LVU3198
 9927 056e 9E42     		cmp	r6, r3
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9928              		.loc 1 2715 60 discriminator 3 view .LVU3199
 9929 0570 4FEAA202 		asr	r2, r2, #2
 9930              	.LVL1115:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9931              		.loc 1 2715 34 is_stmt 1 discriminator 3 view .LVU3200
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9932              		.loc 1 2715 3 is_stmt 0 discriminator 3 view .LVU3201
 9933 0574 F4DC     		bgt	.L905
ARM GAS  /tmp/ccpF0v4D.s 			page 291


 9934              	.LVL1116:
 9935              	.L903:
2721:src/display.c **** 	  }
 9936              		.loc 1 2721 6 is_stmt 1 view .LVU3202
2721:src/display.c **** 	  }
 9937              		.loc 1 2721 12 is_stmt 0 view .LVU3203
 9938 0576 5F23     		movs	r3, #95
 9939 0578 0370     		strb	r3, [r0]
 9940 057a 79E6     		b	.L923
 9941              	.LVL1117:
 9942              	.L1175:
 9943              	.LBB610:
 9944              	.LBB598:
1257:src/display.c **** 	p++;
 9945              		.loc 1 1257 2 is_stmt 1 view .LVU3204
 9946              	.LBB586:
 9947              	.LBI586:
 296:src/display.c **** {
 9948              		.loc 1 296 13 view .LVU3205
 9949              	.LBB587:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9950              		.loc 1 298 3 view .LVU3206
 298:src/display.c ****   set_dot(MANT_SIGN);
 9951              		.loc 1 298 25 is_stmt 0 view .LVU3207
 9952 057c 2E49     		ldr	r1, .L1208+12
 299:src/display.c **** }
 9953              		.loc 1 299 3 view .LVU3208
 9954 057e 8120     		movs	r0, #129
 9955              	.LVL1118:
 298:src/display.c ****   set_dot(MANT_SIGN);
 9956              		.loc 1 298 25 view .LVU3209
 9957 0580 0A70     		strb	r2, [r1]
 299:src/display.c **** }
 9958              		.loc 1 299 3 is_stmt 1 view .LVU3210
 9959              	.LBE587:
 9960              	.LBE586:
1258:src/display.c ****       }
 9961              		.loc 1 1258 3 is_stmt 0 view .LVU3211
 9962 0582 0AF1010A 		add	r10, r10, #1
 9963              	.LVL1119:
 9964              	.LBB589:
 9965              	.LBB588:
 299:src/display.c **** }
 9966              		.loc 1 299 3 view .LVU3212
 9967 0586 FFF7FEFF 		bl	set_dot
 9968              	.LVL1120:
 9969              	.LBE588:
 9970              	.LBE589:
1258:src/display.c ****       }
 9971              		.loc 1 1258 2 is_stmt 1 view .LVU3213
1258:src/display.c ****       }
 9972              		.loc 1 1258 2 is_stmt 0 view .LVU3214
 9973 058a 82E6     		b	.L983
 9974              	.LVL1121:
 9975              	.L1178:
 9976              	.LBB590:
1287:src/display.c **** 	  if (j > 0) {
ARM GAS  /tmp/ccpF0v4D.s 			page 292


 9977              		.loc 1 1287 4 is_stmt 1 view .LVU3215
1287:src/display.c **** 	  if (j > 0) {
 9978              		.loc 1 1287 24 is_stmt 0 view .LVU3216
 9979 058c 02F10C0C 		add	ip, r2, #12
1287:src/display.c **** 	  if (j > 0) {
 9980              		.loc 1 1287 6 view .LVU3217
 9981 0590 A6EB0C06 		sub	r6, r6, ip
 9982              	.LVL1122:
1288:src/display.c **** 	    p += j + 1;
 9983              		.loc 1 1288 4 is_stmt 1 view .LVU3218
1288:src/display.c **** 	    p += j + 1;
 9984              		.loc 1 1288 7 is_stmt 0 view .LVU3219
 9985 0594 002E     		cmp	r6, #0
 9986 0596 40F3D880 		ble	.L1030
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9987              		.loc 1 1289 6 is_stmt 1 view .LVU3220
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9988              		.loc 1 1289 8 is_stmt 0 view .LVU3221
 9989 059a 711C     		adds	r1, r6, #1
1291:src/display.c **** 	      gotdot = 0;
 9990              		.loc 1 1291 9 view .LVU3222
 9991 059c 7645     		cmp	r6, lr
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9992              		.loc 1 1289 8 view .LVU3223
 9993 059e 8A44     		add	r10, r10, r1
 9994              	.LVL1123:
1290:src/display.c **** 	    if (gotdot <= j) {
 9995              		.loc 1 1290 6 is_stmt 1 view .LVU3224
1291:src/display.c **** 	      gotdot = 0;
 9996              		.loc 1 1291 6 view .LVU3225
1291:src/display.c **** 	      gotdot = 0;
 9997              		.loc 1 1291 9 is_stmt 0 view .LVU3226
 9998 05a0 C0F2C180 		blt	.L992
1292:src/display.c **** 	      if (double_dot)
 9999              		.loc 1 1292 8 is_stmt 1 view .LVU3227
 10000              	.LVL1124:
1293:src/display.c **** 		p++;
 10001              		.loc 1 1293 8 view .LVU3228
1293:src/display.c **** 		p++;
 10002              		.loc 1 1293 11 is_stmt 0 view .LVU3229
 10003 05a4 002A     		cmp	r2, #0
 10004 05a6 00F0FC81 		beq	.L1031
1294:src/display.c **** 	    }
 10005              		.loc 1 1294 3 is_stmt 1 view .LVU3230
1294:src/display.c **** 	    }
 10006              		.loc 1 1294 4 is_stmt 0 view .LVU3231
 10007 05aa 0AF1010A 		add	r10, r10, #1
 10008              	.LVL1125:
1290:src/display.c **** 	    if (gotdot <= j) {
 10009              		.loc 1 1290 8 view .LVU3232
 10010 05ae 4FF00908 		mov	r8, #9
 10011              	.L993:
 10012              	.LVL1126:
1303:src/display.c **** 	    overflow_to_left = 1;
 10013              		.loc 1 1303 6 is_stmt 1 view .LVU3233
 10014 05b2 3C21     		movs	r1, #60
 10015 05b4 0020     		movs	r0, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 293


 10016 05b6 FFF7FEFF 		bl	set_dig
 10017              	.LVL1127:
1304:src/display.c **** 	  }
 10018              		.loc 1 1304 6 view .LVU3234
1304:src/display.c **** 	  }
 10019              		.loc 1 1304 6 is_stmt 0 view .LVU3235
 10020 05ba 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 10021              	.LVL1128:
1304:src/display.c **** 	  }
 10022              		.loc 1 1304 6 view .LVU3236
 10023              	.LBE590:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10024              		.loc 1 1310 9 is_stmt 1 view .LVU3237
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10025              		.loc 1 1310 2 is_stmt 0 view .LVU3238
 10026 05be 4FF0000B 		mov	fp, #0
 10027              	.LVL1129:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10028              		.loc 1 1310 2 view .LVU3239
 10029 05c2 0029     		cmp	r1, #0
 10030 05c4 3FF478AF 		beq	.L1010
 10031              	.LVL1130:
 10032              	.L1022:
 10033              	.LBB591:
1304:src/display.c **** 	  }
 10034              		.loc 1 1304 23 view .LVU3240
 10035 05c8 0126     		movs	r6, #1
 10036 05ca 15E0     		b	.L1002
 10037              	.LVL1131:
 10038              	.L1180:
1304:src/display.c **** 	  }
 10039              		.loc 1 1304 23 view .LVU3241
 10040              	.LBE591:
1316:src/display.c **** 	      gotdot = i;
 10041              		.loc 1 1316 6 is_stmt 1 view .LVU3242
1316:src/display.c **** 	      gotdot = i;
 10042              		.loc 1 1316 9 is_stmt 0 view .LVU3243
 10043 05cc BBF1FF3F 		cmp	fp, #-1
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10044              		.loc 1 1320 9 view .LVU3244
 10045 05d0 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
1316:src/display.c **** 	      gotdot = i;
 10046              		.loc 1 1316 9 view .LVU3245
 10047 05d4 1CD0     		beq	.L996
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10048              		.loc 1 1320 6 is_stmt 1 view .LVU3246
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10049              		.loc 1 1320 9 is_stmt 0 view .LVU3247
 10050 05d6 2E2B     		cmp	r3, #46
 10051 05d8 25D0     		beq	.L1020
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10052              		.loc 1 1320 25 view .LVU3248
 10053 05da C345     		cmp	fp, r8
 10054 05dc 1AD0     		beq	.L999
 10055              	.L998:
1327:src/display.c **** 		i += segs_per_digit;
 10056              		.loc 1 1327 3 is_stmt 1 view .LVU3249
ARM GAS  /tmp/ccpF0v4D.s 			page 294


 10057 05de 4046     		mov	r0, r8
 10058 05e0 2F21     		movs	r1, #47
 10059 05e2 FFF7FEFF 		bl	set_dig
 10060              	.LVL1132:
1328:src/display.c **** 	      }
 10061              		.loc 1 1328 3 view .LVU3250
1328:src/display.c **** 	      }
 10062              		.loc 1 1328 5 is_stmt 0 view .LVU3251
 10063 05e6 08F10908 		add	r8, r8, #9
 10064              	.LVL1133:
1328:src/display.c **** 	      }
 10065              		.loc 1 1328 5 view .LVU3252
 10066 05ea 5346     		mov	r3, r10
 10067              	.LVL1134:
 10068              	.L1000:
1314:src/display.c **** 	  if (*p == '.') {
 10069              		.loc 1 1314 11 is_stmt 1 view .LVU3253
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10070              		.loc 1 1310 9 is_stmt 0 view .LVU3254
 10071 05ec 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1314:src/display.c **** 	  if (*p == '.') {
 10072              		.loc 1 1314 12 view .LVU3255
 10073 05ee 0AF1010A 		add	r10, r10, #1
 10074              	.LVL1135:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10075              		.loc 1 1310 9 is_stmt 1 view .LVU3256
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10076              		.loc 1 1310 2 is_stmt 0 view .LVU3257
 10077 05f2 0029     		cmp	r1, #0
 10078 05f4 3FF441AF 		beq	.L1003
 10079              	.LVL1136:
 10080              	.L1002:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10081              		.loc 1 1310 20 view .LVU3258
 10082 05f8 4529     		cmp	r1, #69
 10083 05fa 3FF43EAF 		beq	.L1003
1315:src/display.c **** 	    if (gotdot < 0)
 10084              		.loc 1 1315 4 is_stmt 1 view .LVU3259
1315:src/display.c **** 	    if (gotdot < 0)
 10085              		.loc 1 1315 7 is_stmt 0 view .LVU3260
 10086 05fe 2E29     		cmp	r1, #46
 10087 0600 E4D0     		beq	.L1180
1349:src/display.c **** 	      i += segs_per_digit;
 10088              		.loc 1 1349 8 is_stmt 1 view .LVU3261
 10089 0602 4046     		mov	r0, r8
 10090 0604 FFF7FEFF 		bl	set_dig
 10091              	.LVL1137:
1350:src/display.c **** 	    }
 10092              		.loc 1 1350 8 view .LVU3262
1350:src/display.c **** 	    }
 10093              		.loc 1 1350 10 is_stmt 0 view .LVU3263
 10094 0608 08F10908 		add	r8, r8, #9
 10095              	.LVL1138:
1350:src/display.c **** 	    }
 10096              		.loc 1 1350 10 view .LVU3264
 10097 060c 5346     		mov	r3, r10
 10098 060e EDE7     		b	.L1000
ARM GAS  /tmp/ccpF0v4D.s 			page 295


 10099              	.L996:
1317:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10100              		.loc 1 1317 8 is_stmt 1 view .LVU3265
 10101              	.LVL1139:
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10102              		.loc 1 1320 6 view .LVU3266
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10103              		.loc 1 1320 9 is_stmt 0 view .LVU3267
 10104 0610 2E2B     		cmp	r3, #46
 10105 0612 07D0     		beq	.L1181
 10106              	.LVL1140:
 10107              	.L999:
1331:src/display.c **** 		  i += segs_per_digit;
 10108              		.loc 1 1331 3 is_stmt 1 view .LVU3268
1331:src/display.c **** 		  i += segs_per_digit;
 10109              		.loc 1 1331 6 is_stmt 0 view .LVU3269
 10110 0614 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10111 0616 012B     		cmp	r3, #1
 10112 0618 76D9     		bls	.L1001
1332:src/display.c **** 		}
 10113              		.loc 1 1332 5 is_stmt 1 view .LVU3270
 10114              	.LVL1141:
1332:src/display.c **** 		}
 10115              		.loc 1 1332 5 is_stmt 0 view .LVU3271
 10116 061a C346     		mov	fp, r8
 10117 061c 5346     		mov	r3, r10
1332:src/display.c **** 		}
 10118              		.loc 1 1332 7 view .LVU3272
 10119 061e 08F10908 		add	r8, r8, #9
 10120              	.LVL1142:
1332:src/display.c **** 		}
 10121              		.loc 1 1332 7 view .LVU3273
 10122 0622 E3E7     		b	.L1000
 10123              	.LVL1143:
 10124              	.L1181:
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10125              		.loc 1 1320 9 view .LVU3274
 10126 0624 C346     		mov	fp, r8
 10127              	.LVL1144:
 10128              	.L1020:
1321:src/display.c **** 		p++;
 10129              		.loc 1 1321 8 is_stmt 1 view .LVU3275
1322:src/display.c **** 	      }
 10130              		.loc 1 1322 3 view .LVU3276
1322:src/display.c **** 	      }
 10131              		.loc 1 1322 4 is_stmt 0 view .LVU3277
 10132 0626 0AF1010A 		add	r10, r10, #1
 10133              	.LVL1145:
1322:src/display.c **** 	      }
 10134              		.loc 1 1322 4 view .LVU3278
 10135 062a D8E7     		b	.L998
 10136              	.L1209:
 10137              		.align	2
 10138              	.L1208:
 10139 062c 0C000000 		.word	.LANCHOR17+12
 10140 0630 08000000 		.word	.LC21
 10141 0634 18000000 		.word	.LC22
ARM GAS  /tmp/ccpF0v4D.s 			page 296


 10142 0638 00000000 		.word	LastDisplayedNumber
 10143 063c 00000000 		.word	DispMsg
 10144 0640 00000000 		.word	ShowRegister
 10145 0644 34000000 		.word	.LC23
 10146 0648 00000000 		.word	LastDisplayedExponent
 10147 064c 00000000 		.word	.LANCHOR20
 10148 0650 00000000 		.word	DispPlot
 10149 0654 38000000 		.word	.LC24
 10150 0658 AC000000 		.word	.LC40
 10151 065c 00000000 		.word	WasDataEntry
 10152 0660 00000000 		.word	.LANCHOR21
 10153 0664 B4000000 		.word	.LC27
 10154 0668 00000000 		.word	.LANCHOR22
 10155 066c 00000000 		.word	.LANCHOR24
 10156 0670 56040000 		.word	argcmds+1110
 10157 0674 3C000000 		.word	.LC25
 10158 0678 BC000000 		.word	.LC26
 10159 067c 00000000 		.word	.LANCHOR0
 10160              	.LVL1146:
 10161              	.L906:
1322:src/display.c **** 	      }
 10162              		.loc 1 1322 4 view .LVU3279
 10163              	.LBE598:
 10164              	.LBE610:
2744:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10165              		.loc 1 2744 9 is_stmt 1 view .LVU3280
2744:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10166              		.loc 1 2744 12 is_stmt 0 view .LVU3281
 10167 0680 BBF1000F 		cmp	fp, #0
 10168 0684 66D1     		bne	.L1182
2799:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10169              		.loc 1 2799 9 is_stmt 1 view .LVU3282
2799:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10170              		.loc 1 2799 12 is_stmt 0 view .LVU3283
 10171 0686 1807     		lsls	r0, r3, #28
 10172 0688 00F1CA80 		bmi	.L1183
2814:src/display.c **** 	  show_status();
 10173              		.loc 1 2814 9 is_stmt 1 view .LVU3284
2814:src/display.c **** 	  show_status();
 10174              		.loc 1 2814 19 is_stmt 0 view .LVU3285
 10175 068c 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2814:src/display.c **** 	  show_status();
 10176              		.loc 1 2814 12 view .LVU3286
 10177 068e 002F     		cmp	r7, #0
 10178 0690 40F00181 		bne	.L1184
2817:src/display.c **** 	  show_label();
 10179              		.loc 1 2817 9 is_stmt 1 view .LVU3287
2817:src/display.c **** 	  show_label();
 10180              		.loc 1 2817 13 is_stmt 0 view .LVU3288
 10181 0694 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2817:src/display.c **** 	  show_label();
 10182              		.loc 1 2817 12 view .LVU3289
 10183 0696 5A07     		lsls	r2, r3, #29
 10184 0698 00F1D880 		bmi	.L1185
2820:src/display.c **** 	  show_registers();
 10185              		.loc 1 2820 9 is_stmt 1 view .LVU3290
2820:src/display.c **** 	  show_registers();
ARM GAS  /tmp/ccpF0v4D.s 			page 297


 10186              		.loc 1 2820 12 is_stmt 0 view .LVU3291
 10187 069c 1807     		lsls	r0, r3, #28
 10188 069e 00F1D282 		bmi	.L1186
2830:src/display.c **** 	  if (DispMsg) { 
 10189              		.loc 1 2830 9 is_stmt 1 view .LVU3292
2830:src/display.c **** 	  if (DispMsg) { 
 10190              		.loc 1 2830 12 is_stmt 0 view .LVU3293
 10191 06a2 4806     		lsls	r0, r1, #25
 10192 06a4 40F1EE81 		bpl	.L957
2831:src/display.c **** 	    set_status(DispMsg);
 10193              		.loc 1 2831 4 is_stmt 1 view .LVU3294
2831:src/display.c **** 	    set_status(DispMsg);
 10194              		.loc 1 2831 8 is_stmt 0 view .LVU3295
 10195 06a8 C44F     		ldr	r7, .L1210
 10196 06aa 3B68     		ldr	r3, [r7]
2831:src/display.c **** 	    set_status(DispMsg);
 10197              		.loc 1 2831 7 view .LVU3296
 10198 06ac 002B     		cmp	r3, #0
 10199 06ae 00F09D81 		beq	.L958
2832:src/display.c **** 	  } else if (DispPlot) {
 10200              		.loc 1 2832 6 is_stmt 1 view .LVU3297
 10201 06b2 1846     		mov	r0, r3
 10202 06b4 FFF7FEFF 		bl	set_status
 10203              	.LVL1147:
2884:src/display.c ****       nostk:
 10204              		.loc 1 2884 2 view .LVU3298
 10205 06b8 C14B     		ldr	r3, .L1210+4
 10206 06ba 0193     		str	r3, [sp, #4]
 10207 06bc FFF7FEFF 		bl	show_stack
 10208              	.LVL1148:
2886:src/display.c **** 	if (!skip) {
 10209              		.loc 1 2886 2 view .LVU3299
 10210 06c0 FFF7FEFF 		bl	show_flags
 10211              	.LVL1149:
2887:src/display.c **** 	  if (State2.runmode) {
 10212              		.loc 1 2887 2 view .LVU3300
 10213 06c4 DFE4     		b	.L887
 10214              	.LVL1150:
 10215              	.L1177:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10216              		.loc 1 2682 6 view .LVU3301
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10217              		.loc 1 2682 11 is_stmt 0 view .LVU3302
 10218 06c6 2189     		ldrh	r1, [r4, #8]
 10219 06c8 FFF7FEFF 		bl	num_arg_0
 10220              	.LVL1151:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10221              		.loc 1 2682 11 view .LVU3303
 10222 06cc 0346     		mov	r3, r0
 10223              	.LVL1152:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10224              		.loc 1 2682 11 view .LVU3304
 10225 06ce 04E7     		b	.L893
 10226              	.LVL1153:
 10227              	.L987:
 10228              	.LBB611:
 10229              	.LBB599:
ARM GAS  /tmp/ccpF0v4D.s 			page 298


1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10230              		.loc 1 1310 9 is_stmt 1 view .LVU3305
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10231              		.loc 1 1310 2 is_stmt 0 view .LVU3306
 10232 06d0 0029     		cmp	r1, #0
 10233 06d2 3FF4ECAE 		beq	.L988
1253:src/display.c **** #endif
 10234              		.loc 1 1253 11 view .LVU3307
 10235 06d6 4646     		mov	r6, r8
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10236              		.loc 1 1247 11 view .LVU3308
 10237 06d8 4FF0FF3B 		mov	fp, #-1
 10238              	.LVL1154:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10239              		.loc 1 1247 11 view .LVU3309
 10240 06dc 8CE7     		b	.L1002
 10241              	.LVL1155:
 10242              	.L1035:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10243              		.loc 1 1247 11 view .LVU3310
 10244              	.LBE599:
 10245              	.LBE611:
 10246              	.LBB612:
 10247              	.LBB568:
2922:src/display.c **** 	      while(*b) {
 10248              		.loc 1 2922 10 view .LVU3311
 10249 06de 5A1C     		adds	r2, r3, #1
 10250 06e0 25E5     		b	.L1013
 10251              	.LVL1156:
 10252              	.L1176:
2922:src/display.c **** 	      while(*b) {
 10253              		.loc 1 2922 10 view .LVU3312
 10254              	.LBE568:
 10255              	.LBE612:
 10256              	.LBB613:
 10257              	.LBB600:
1388:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10258              		.loc 1 1388 6 is_stmt 1 view .LVU3313
1393:src/display.c **** #  endif
 10259              		.loc 1 1393 6 view .LVU3314
 10260 06e2 0AF10100 		add	r0, r10, #1
 10261              	.LVL1157:
1393:src/display.c **** #  endif
 10262              		.loc 1 1393 6 is_stmt 0 view .LVU3315
 10263 06e6 FFF7FEFF 		bl	s_to_i
 10264              	.LVL1158:
1393:src/display.c **** #  endif
 10265              		.loc 1 1393 6 view .LVU3316
 10266 06ea 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 10267 06ee 2D2B     		cmp	r3, #45
 10268 06f0 0CBF     		ite	eq
 10269 06f2 0621     		moveq	r1, #6
 10270 06f4 0421     		movne	r1, #4
 10271 06f6 0022     		movs	r2, #0
 10272 06f8 FFF7FEFF 		bl	set_exp
 10273              	.LVL1159:
1393:src/display.c **** #  endif
ARM GAS  /tmp/ccpF0v4D.s 			page 299


 10274              		.loc 1 1393 6 view .LVU3317
 10275              	.LBE600:
 10276              	.LBE613:
2902:src/display.c **** 	      goto finish;
 10277              		.loc 1 2902 6 is_stmt 1 view .LVU3318
2902:src/display.c **** 	      goto finish;
 10278              		.loc 1 2902 9 is_stmt 0 view .LVU3319
 10279 06fc B14B     		ldr	r3, .L1210+8
 10280 06fe 1B68     		ldr	r3, [r3]
 10281 0700 002B     		cmp	r3, #0
 10282 0702 3FF4E1AD 		beq	.L1165
 10283 0706 DCE6     		b	.L1079
 10284              	.LVL1160:
 10285              	.L1001:
 10286              	.LBB614:
 10287              	.LBB601:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10288              		.loc 1 1335 5 is_stmt 1 view .LVU3320
 10289 0708 AF4B     		ldr	r3, .L1210+12
 10290 070a 0022     		movs	r2, #0
 10291 070c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10292 070e A8F10900 		sub	r0, r8, #9
 10293 0712 FFF7FEFF 		bl	set_decimal
 10294              	.LVL1161:
 10295 0716 C346     		mov	fp, r8
 10296 0718 5346     		mov	r3, r10
 10297 071a 67E7     		b	.L1000
 10298              	.LVL1162:
 10299              	.L1179:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10300              		.loc 1 1335 5 is_stmt 0 view .LVU3321
 10301              	.LBE601:
 10302              	.LBE614:
2705:src/display.c **** 	    *bp++ = '_';
 10303              		.loc 1 2705 6 is_stmt 1 view .LVU3322
2705:src/display.c **** 	    *bp++ = '_';
 10304              		.loc 1 2705 12 is_stmt 0 view .LVU3323
 10305 071c 1122     		movs	r2, #17
2706:src/display.c **** 	  } else {
 10306              		.loc 1 2706 12 view .LVU3324
 10307 071e 5F23     		movs	r3, #95
2705:src/display.c **** 	    *bp++ = '_';
 10308              		.loc 1 2705 12 view .LVU3325
 10309 0720 0270     		strb	r2, [r0]
2706:src/display.c **** 	  } else {
 10310              		.loc 1 2706 6 is_stmt 1 view .LVU3326
 10311              	.LVL1163:
2706:src/display.c **** 	  } else {
 10312              		.loc 1 2706 12 is_stmt 0 view .LVU3327
 10313 0722 4370     		strb	r3, [r0, #1]
 10314 0724 A4E5     		b	.L923
 10315              	.LVL1164:
 10316              	.L992:
 10317              	.LBB615:
 10318              	.LBB602:
 10319              	.LBB592:
1296:src/display.c **** 	      gotdot = 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 300


 10320              		.loc 1 1296 11 is_stmt 1 view .LVU3328
1296:src/display.c **** 	      gotdot = 0;
 10321              		.loc 1 1296 14 is_stmt 0 view .LVU3329
 10322 0726 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 10323 072a 2E29     		cmp	r1, #46
 10324 072c 00F03C81 		beq	.L1187
 10325              	.LVL1165:
1303:src/display.c **** 	    overflow_to_left = 1;
 10326              		.loc 1 1303 6 is_stmt 1 view .LVU3330
 10327 0730 3C21     		movs	r1, #60
 10328 0732 FFF7FEFF 		bl	set_dig
 10329              	.LVL1166:
1304:src/display.c **** 	  }
 10330              		.loc 1 1304 6 view .LVU3331
1304:src/display.c **** 	  }
 10331              		.loc 1 1304 6 is_stmt 0 view .LVU3332
 10332 0736 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 10333              	.LVL1167:
1304:src/display.c **** 	  }
 10334              		.loc 1 1304 6 view .LVU3333
 10335              	.LBE592:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10336              		.loc 1 1310 9 is_stmt 1 view .LVU3334
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10337              		.loc 1 1310 2 is_stmt 0 view .LVU3335
 10338 073a 0029     		cmp	r1, #0
 10339 073c 3FF4B7AE 		beq	.L988
 10340              	.LBB593:
1302:src/display.c **** 	    set_dig(0, '<');
 10341              		.loc 1 1302 18 view .LVU3336
 10342 0740 4FF0FF3B 		mov	fp, #-1
 10343              	.LVL1168:
1290:src/display.c **** 	    if (gotdot <= j) {
 10344              		.loc 1 1290 8 view .LVU3337
 10345 0744 4FF00908 		mov	r8, #9
 10346 0748 3EE7     		b	.L1022
 10347              	.LVL1169:
 10348              	.L1030:
1290:src/display.c **** 	    if (gotdot <= j) {
 10349              		.loc 1 1290 8 view .LVU3338
 10350              	.LBE593:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10351              		.loc 1 1270 4 view .LVU3339
 10352 074a 8046     		mov	r8, r0
1253:src/display.c **** #endif
 10353              		.loc 1 1253 11 view .LVU3340
 10354 074c 0646     		mov	r6, r0
 10355              	.LVL1170:
 10356              	.LBB594:
1306:src/display.c **** 	}
 10357              		.loc 1 1306 16 view .LVU3341
 10358 074e 4FF0FF3B 		mov	fp, #-1
 10359              	.LVL1171:
1306:src/display.c **** 	}
 10360              		.loc 1 1306 16 view .LVU3342
 10361 0752 51E7     		b	.L1002
 10362              	.LVL1172:
ARM GAS  /tmp/ccpF0v4D.s 			page 301


 10363              	.L1182:
1306:src/display.c **** 	}
 10364              		.loc 1 1306 16 view .LVU3343
 10365              	.LBE594:
 10366              	.LBE602:
 10367              	.LBE615:
 10368              	.LBB616:
2745:src/display.c **** 	  char b2[16];
 10369              		.loc 1 2745 4 is_stmt 1 view .LVU3344
2745:src/display.c **** 	  char b2[16];
 10370              		.loc 1 2745 45 is_stmt 0 view .LVU3345
 10371 0754 DAF80030 		ldr	r3, [r10]
 10372 0758 B3F8DC07 		ldrh	r0, [r3, #2012]
2745:src/display.c **** 	  char b2[16];
 10373              		.loc 1 2745 22 view .LVU3346
 10374 075c C0F34610 		ubfx	r0, r0, #5, #7
 10375 0760 FFF7FEFF 		bl	current_catalogue
 10376              	.LVL1173:
2749:src/display.c **** 	  p = catcmd(op, b2);
 10377              		.loc 1 2749 9 view .LVU3347
 10378 0764 9949     		ldr	r1, .L1210+16
2745:src/display.c **** 	  char b2[16];
 10379              		.loc 1 2745 22 view .LVU3348
 10380 0766 0546     		mov	r5, r0
 10381              	.LVL1174:
2746:src/display.c **** 	  const char *p;
 10382              		.loc 1 2746 4 is_stmt 1 view .LVU3349
2747:src/display.c **** 
 10383              		.loc 1 2747 4 view .LVU3350
2749:src/display.c **** 	  p = catcmd(op, b2);
 10384              		.loc 1 2749 4 view .LVU3351
2749:src/display.c **** 	  p = catcmd(op, b2);
 10385              		.loc 1 2749 9 is_stmt 0 view .LVU3352
 10386 0768 20A8     		add	r0, sp, #128
 10387              	.LVL1175:
2749:src/display.c **** 	  p = catcmd(op, b2);
 10388              		.loc 1 2749 9 view .LVU3353
 10389 076a FFF7FEFF 		bl	scopy
 10390              	.LVL1176:
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10391              		.loc 1 2750 8 view .LVU3354
 10392 076e 0AA9     		add	r1, sp, #40
2749:src/display.c **** 	  p = catcmd(op, b2);
 10393              		.loc 1 2749 9 view .LVU3355
 10394 0770 0646     		mov	r6, r0
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10395              		.loc 1 2750 8 view .LVU3356
 10396 0772 2846     		mov	r0, r5
 10397              	.LVL1177:
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10398              		.loc 1 2750 4 is_stmt 1 view .LVU3357
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10399              		.loc 1 2750 8 is_stmt 0 view .LVU3358
 10400 0774 FFF7FEFF 		bl	catcmd
 10401              	.LVL1178:
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10402              		.loc 1 2751 7 view .LVU3359
ARM GAS  /tmp/ccpF0v4D.s 			page 302


 10403 0778 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10404 077a 142B     		cmp	r3, #20
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10405              		.loc 1 2750 8 view .LVU3360
 10406 077c 0146     		mov	r1, r0
 10407              	.LVL1179:
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10408              		.loc 1 2751 4 is_stmt 1 view .LVU3361
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10409              		.loc 1 2751 7 is_stmt 0 view .LVU3362
 10410 077e 07D0     		beq	.L908
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10411              		.loc 1 2751 29 discriminator 1 view .LVU3363
 10412 0780 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10413 0782 9F07     		lsls	r7, r3, #30
 10414 0784 04D5     		bpl	.L908
2752:src/display.c **** 	  bp = scopy(bp, p);
 10415              		.loc 1 2752 6 is_stmt 1 view .LVU3364
2752:src/display.c **** 	  bp = scopy(bp, p);
 10416              		.loc 1 2752 9 is_stmt 0 view .LVU3365
 10417 0786 3346     		mov	r3, r6
 10418              	.LVL1180:
2752:src/display.c **** 	  bp = scopy(bp, p);
 10419              		.loc 1 2752 12 view .LVU3366
 10420 0788 1422     		movs	r2, #20
 10421 078a 03F8012B 		strb	r2, [r3], #1
 10422              	.LVL1181:
2752:src/display.c **** 	  bp = scopy(bp, p);
 10423              		.loc 1 2752 9 view .LVU3367
 10424 078e 1E46     		mov	r6, r3
 10425              	.LVL1182:
 10426              	.L908:
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10427              		.loc 1 2753 4 is_stmt 1 view .LVU3368
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10428              		.loc 1 2753 9 is_stmt 0 view .LVU3369
 10429 0790 3046     		mov	r0, r6
 10430              	.LVL1183:
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10431              		.loc 1 2753 9 view .LVU3370
 10432 0792 FFF7FEFF 		bl	scopy
 10433              	.LVL1184:
2754:src/display.c **** 	    // State2.disp_small = 1;
 10434              		.loc 1 2754 4 is_stmt 1 view .LVU3371
2754:src/display.c **** 	    // State2.disp_small = 1;
 10435              		.loc 1 2754 7 is_stmt 0 view .LVU3372
 10436 0796 ABF11003 		sub	r3, fp, #16
 10437 079a 012B     		cmp	r3, #1
 10438 079c 2DD9     		bls	.L1188
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10439              		.loc 1 2761 11 is_stmt 1 view .LVU3373
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10440              		.loc 1 2761 15 is_stmt 0 view .LVU3374
 10441 079e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10442              		.loc 1 2761 14 view .LVU3375
 10443 07a0 13F04003 		ands	r3, r3, #64
ARM GAS  /tmp/ccpF0v4D.s 			page 303


 10444 07a4 08D0     		beq	.L1026
2762:src/display.c **** 	      decNumber x, r;
 10445              		.loc 1 2762 6 is_stmt 1 view .LVU3376
2762:src/display.c **** 	      decNumber x, r;
 10446              		.loc 1 2762 9 is_stmt 0 view .LVU3377
 10447 07a6 BBF1120F 		cmp	fp, #18
 10448 07aa 00F04581 		beq	.L1189
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10449              		.loc 1 2782 13 is_stmt 1 view .LVU3378
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10450              		.loc 1 2782 46 is_stmt 0 view .LVU3379
 10451 07ae A5F58873 		sub	r3, r5, #272
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10452              		.loc 1 2782 16 view .LVU3380
 10453 07b2 0D2B     		cmp	r3, #13
 10454 07b4 40F22A81 		bls	.L1190
 10455              	.L1026:
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10456              		.loc 1 2782 16 view .LVU3381
 10457              	.LBE616:
2596:src/display.c **** 	int x_disp = 0;
 10458              		.loc 1 2596 6 view .LVU3382
 10459 07b8 0026     		movs	r6, #0
 10460              	.LVL1185:
 10461              	.L912:
 10462              	.LBB627:
2791:src/display.c **** 	    set_status_top(buf);
 10463              		.loc 1 2791 4 is_stmt 1 view .LVU3383
2791:src/display.c **** 	    set_status_top(buf);
 10464              		.loc 1 2791 7 is_stmt 0 view .LVU3384
 10465 07ba B8F1000F 		cmp	r8, #0
 10466 07be 17D0     		beq	.L917
2792:src/display.c **** 	    no_status_top = 1;
 10467              		.loc 1 2792 6 is_stmt 1 view .LVU3385
 10468              	.LVL1186:
 10469              	.LBB617:
 10470              	.LBI617:
3505:src/display.c **** 	if (no_status_top) return;
 10471              		.loc 1 3505 19 view .LVU3386
 10472              	.LBB618:
3506:src/display.c **** 	if (State2.runmode) {
 10473              		.loc 1 3506 2 view .LVU3387
3506:src/display.c **** 	if (State2.runmode) {
 10474              		.loc 1 3506 5 is_stmt 0 view .LVU3388
 10475 07c0 B9F90030 		ldrsh	r3, [r9]
 10476 07c4 13B9     		cbnz	r3, .L918
 10477 07c6 20A8     		add	r0, sp, #128
 10478              	.LVL1187:
3506:src/display.c **** 	if (State2.runmode) {
 10479              		.loc 1 3506 5 view .LVU3389
 10480 07c8 FFF7FEFF 		bl	set_status_top.part.0
 10481              	.LVL1188:
 10482              	.L918:
3506:src/display.c **** 	if (State2.runmode) {
 10483              		.loc 1 3506 5 view .LVU3390
 10484              	.LBE618:
 10485              	.LBE617:
ARM GAS  /tmp/ccpF0v4D.s 			page 304


2793:src/display.c **** 	    annuc = 1;
 10486              		.loc 1 2793 6 is_stmt 1 view .LVU3391
2793:src/display.c **** 	    annuc = 1;
 10487              		.loc 1 2793 20 is_stmt 0 view .LVU3392
 10488 07cc 0123     		movs	r3, #1
2794:src/display.c **** 	  }
 10489              		.loc 1 2794 12 view .LVU3393
 10490 07ce 4546     		mov	r5, r8
2793:src/display.c **** 	    annuc = 1;
 10491              		.loc 1 2793 20 view .LVU3394
 10492 07d0 A9F80030 		strh	r3, [r9]	@ movhi
2794:src/display.c **** 	  }
 10493              		.loc 1 2794 6 is_stmt 1 view .LVU3395
 10494              	.LVL1189:
 10495              	.L919:
2794:src/display.c **** 	  }
 10496              		.loc 1 2794 6 is_stmt 0 view .LVU3396
 10497              	.LBE627:
2884:src/display.c ****       nostk:
 10498              		.loc 1 2884 2 is_stmt 1 view .LVU3397
 10499 07d4 FFF7FEFF 		bl	show_stack
 10500              	.LVL1190:
 10501              	.LDL1:
2886:src/display.c **** 	if (!skip) {
 10502              		.loc 1 2886 2 view .LVU3398
 10503 07d8 FFF7FEFF 		bl	show_flags
 10504              	.LVL1191:
2887:src/display.c **** 	  if (State2.runmode) {
 10505              		.loc 1 2887 2 view .LVU3399
2887:src/display.c **** 	  if (State2.runmode) {
 10506              		.loc 1 2887 5 is_stmt 0 view .LVU3400
 10507 07dc 002E     		cmp	r6, #0
 10508 07de 00F06581 		beq	.L1163
 10509              	.LVL1192:
 10510              	.L920:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10511              		.loc 1 2932 2 is_stmt 1 view .LVU3401
 10512 07e2 FFF7FEFF 		bl	set_annunciators
 10513              	.LVL1193:
2933:src/display.c **** 	  ShowRPN = 0;
 10514              		.loc 1 2933 2 view .LVU3402
 10515 07e6 764B     		ldr	r3, .L1210+4
 10516 07e8 744F     		ldr	r7, .L1210
 10517 07ea 794E     		ldr	r6, .L1210+20
 10518 07ec 0193     		str	r3, [sp, #4]
 10519 07ee C6E4     		b	.L882
 10520              	.LVL1194:
 10521              	.L917:
 10522              	.LBB628:
2797:src/display.c **** 	  }
 10523              		.loc 1 2797 6 view .LVU3403
 10524 07f0 20A8     		add	r0, sp, #128
 10525 07f2 FFF7FEFF 		bl	set_status
 10526              	.LVL1195:
 10527              	.LBE628:
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10528              		.loc 1 2594 6 is_stmt 0 view .LVU3404
ARM GAS  /tmp/ccpF0v4D.s 			page 305


 10529 07f6 4546     		mov	r5, r8
 10530 07f8 ECE7     		b	.L919
 10531              	.LVL1196:
 10532              	.L1188:
 10533              	.LBB629:
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10534              		.loc 1 2756 6 is_stmt 1 view .LVU3405
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10535              		.loc 1 2756 9 is_stmt 0 view .LVU3406
 10536 07fa B5F5274F 		cmp	r5, #42752
 10537 07fe 00F05A81 		beq	.L910
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10538              		.loc 1 2756 41 discriminator 1 view .LVU3407
 10539 0802 B5F5284F 		cmp	r5, #43008
 10540 0806 00F05681 		beq	.L910
2759:src/display.c **** 	    skip = 1;
 10541              		.loc 1 2759 8 is_stmt 1 view .LVU3408
2759:src/display.c **** 	    skip = 1;
 10542              		.loc 1 2759 14 is_stmt 0 view .LVU3409
 10543 080a 0021     		movs	r1, #0
 10544 080c 05F07F00 		and	r0, r5, #127
 10545 0810 FFF7FEFF 		bl	get_const
 10546              	.LVL1197:
2759:src/display.c **** 	    skip = 1;
 10547              		.loc 1 2759 8 view .LVU3410
 10548 0814 0022     		movs	r2, #0
 10549 0816 1146     		mov	r1, r2
 10550 0818 FFF7FEFF 		bl	set_x
 10551              	.LVL1198:
2760:src/display.c **** 	  } else if (State2.runmode) {
 10552              		.loc 1 2760 11 view .LVU3411
 10553 081c 0126     		movs	r6, #1
 10554 081e CCE7     		b	.L912
 10555              	.LVL1199:
 10556              	.L1183:
2760:src/display.c **** 	  } else if (State2.runmode) {
 10557              		.loc 1 2760 11 view .LVU3412
 10558              	.LBE629:
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10559              		.loc 1 2800 4 is_stmt 1 view .LVU3413
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10560              		.loc 1 2800 42 is_stmt 0 view .LVU3414
 10561 0820 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10562 0822 6C49     		ldr	r1, .L1210+24
 10563 0824 0423     		movs	r3, #4
 10564 0826 03EB0213 		add	r3, r3, r2, lsl #4
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10565              		.loc 1 2800 9 view .LVU3415
 10566 082a 1944     		add	r1, r1, r3
 10567 082c 2722     		movs	r2, #39
 10568 082e 20A8     		add	r0, sp, #128
 10569              	.LVL1200:
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10570              		.loc 1 2800 9 view .LVU3416
 10571 0830 FFF7FEFF 		bl	scopy_char
 10572              	.LVL1201:
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
ARM GAS  /tmp/ccpF0v4D.s 			page 306


 10573              		.loc 1 2801 7 view .LVU3417
 10574 0834 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10575              	.LVL1202:
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
 10576              		.loc 1 2801 4 is_stmt 1 view .LVU3418
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
 10577              		.loc 1 2801 7 is_stmt 0 view .LVU3419
 10578 0836 002B     		cmp	r3, #0
 10579 0838 3FF41AAD 		beq	.L923
2802:src/display.c **** 	    if (State2.numdigit > 1)
 10580              		.loc 1 2802 6 is_stmt 1 view .LVU3420
 10581              	.LVL1203:
2802:src/display.c **** 	    if (State2.numdigit > 1)
 10582              		.loc 1 2802 14 is_stmt 0 view .LVU3421
 10583 083c 2389     		ldrh	r3, [r4, #8]
 10584 083e 0370     		strb	r3, [r0]
2803:src/display.c **** 	      *bp++ = State2.digval2;
 10585              		.loc 1 2803 6 is_stmt 1 view .LVU3422
2803:src/display.c **** 	      *bp++ = State2.digval2;
 10586              		.loc 1 2803 9 is_stmt 0 view .LVU3423
 10587 0840 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10588 0842 012B     		cmp	r3, #1
2804:src/display.c **** 	  }
 10589              		.loc 1 2804 8 is_stmt 1 view .LVU3424
 10590              	.LVL1204:
2804:src/display.c **** 	  }
 10591              		.loc 1 2804 22 is_stmt 0 view .LVU3425
 10592 0844 84BF     		itt	hi
 10593 0846 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2804:src/display.c **** 	  }
 10594              		.loc 1 2804 14 view .LVU3426
 10595 0848 4370     		strbhi	r3, [r0, #1]
 10596 084a 11E5     		b	.L923
 10597              	.LVL1205:
 10598              	.L1185:
2818:src/display.c **** 	  skip = 1;
 10599              		.loc 1 2818 4 is_stmt 1 view .LVU3427
 10600              	.LBB630:
 10601              	.LBI630:
2465:src/display.c **** 	char buf[16];
 10602              		.loc 1 2465 19 view .LVU3428
 10603              	.LBB631:
2466:src/display.c **** 	unsigned short int pc = State2.digval;
 10604              		.loc 1 2466 2 view .LVU3429
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10605              		.loc 1 2467 2 view .LVU3430
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10606              		.loc 1 2467 21 is_stmt 0 view .LVU3431
 10607 084c B4F808B0 		ldrh	fp, [r4, #8]
 10608              	.LVL1206:
2468:src/display.c **** 	int n = nLIB(pc);
 10609              		.loc 1 2468 2 is_stmt 1 view .LVU3432
2473:src/display.c **** #ifndef REALBUILD
 10610              		.loc 1 2473 27 is_stmt 0 view .LVU3433
 10611 0850 DFF894A1 		ldr	r10, .L1210+44
2468:src/display.c **** 	int n = nLIB(pc);
 10612              		.loc 1 2468 20 view .LVU3434
ARM GAS  /tmp/ccpF0v4D.s 			page 307


 10613 0854 5846     		mov	r0, fp
 10614 0856 FFF7FEFF 		bl	getprog
 10615              	.LVL1207:
 10616 085a 4FEA9B36 		lsr	r6, fp, #14
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10617              		.loc 1 2472 2 view .LVU3435
 10618 085e 17A9     		add	r1, sp, #92
2468:src/display.c **** 	int n = nLIB(pc);
 10619              		.loc 1 2468 20 view .LVU3436
 10620 0860 8046     		mov	r8, r0
 10621              	.LVL1208:
2469:src/display.c **** 	unsigned short int lblpc;
 10622              		.loc 1 2469 2 is_stmt 1 view .LVU3437
2470:src/display.c **** 
 10623              		.loc 1 2470 2 view .LVU3438
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10624              		.loc 1 2472 2 view .LVU3439
2473:src/display.c **** #ifndef REALBUILD
 10625              		.loc 1 2473 27 is_stmt 0 view .LVU3440
 10626 0862 06EB8606 		add	r6, r6, r6, lsl #2
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10627              		.loc 1 2472 2 view .LVU3441
 10628 0866 FFF7FEFF 		bl	prt
 10629              	.LVL1209:
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10630              		.loc 1 2472 2 view .LVU3442
 10631 086a FFF7FEFF 		bl	set_status
 10632              	.LVL1210:
2473:src/display.c **** #ifndef REALBUILD
 10633              		.loc 1 2473 2 is_stmt 1 view .LVU3443
 10634 086e 0AEB0600 		add	r0, r10, r6
 10635 0872 3946     		mov	r1, r7
 10636 0874 FFF7FEFF 		bl	set_digits_string
 10637              	.LVL1211:
2475:src/display.c **** #endif
 10638              		.loc 1 2475 2 view .LVU3444
 10639 0878 574B     		ldr	r3, .L1210+28
 10640 087a 5848     		ldr	r0, .L1210+32
 10641 087c 03EB4601 		add	r1, r3, r6, lsl #1
 10642 0880 FFF7FEFF 		bl	scopy
 10643              	.LVL1212:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10644              		.loc 1 2478 2 view .LVU3445
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10645              		.loc 1 2478 5 is_stmt 0 view .LVU3446
 10646 0884 18F4704F 		tst	r8, #61440
 10647 0888 40F09882 		bne	.L1191
 10648              	.LVL1213:
 10649              	.L1166:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10650              		.loc 1 2478 5 view .LVU3447
 10651              	.LBE631:
 10652              	.LBE630:
2884:src/display.c ****       nostk:
 10653              		.loc 1 2884 2 is_stmt 1 view .LVU3448
 10654 088c FFF7FEFF 		bl	show_stack
 10655              	.LVL1214:
ARM GAS  /tmp/ccpF0v4D.s 			page 308


2886:src/display.c **** 	if (!skip) {
 10656              		.loc 1 2886 2 view .LVU3449
 10657 0890 FFF7FEFF 		bl	show_flags
 10658              	.LVL1215:
2887:src/display.c **** 	  if (State2.runmode) {
 10659              		.loc 1 2887 2 view .LVU3450
 10660 0894 A5E7     		b	.L920
 10661              	.LVL1216:
 10662              	.L1184:
2815:src/display.c **** 	  skip = 1;
 10663              		.loc 1 2815 4 view .LVU3451
 10664              	.LBB634:
 10665              	.LBI634:
2363:src/display.c **** 	int i, n;
 10666              		.loc 1 2363 19 view .LVU3452
 10667              	.LBB635:
2364:src/display.c **** 	int j = SEGS_EXP_BASE;
 10668              		.loc 1 2364 2 view .LVU3453
2365:src/display.c **** 	const int status = State2.status - 3;
 10669              		.loc 1 2365 2 view .LVU3454
2366:src/display.c **** 	char buf[16], *p = buf;
 10670              		.loc 1 2366 2 view .LVU3455
2370:src/display.c **** 	  set_status("Free:");
 10671              		.loc 1 2370 5 is_stmt 0 view .LVU3456
 10672 0896 012F     		cmp	r7, #1
2366:src/display.c **** 	char buf[16], *p = buf;
 10673              		.loc 1 2366 12 view .LVU3457
 10674 0898 A7F10303 		sub	r3, r7, #3
 10675              	.LVL1217:
2367:src/display.c **** 	unsigned int pc;
 10676              		.loc 1 2367 2 is_stmt 1 view .LVU3458
2368:src/display.c **** 
 10677              		.loc 1 2368 2 view .LVU3459
2370:src/display.c **** 	  set_status("Free:");
 10678              		.loc 1 2370 2 view .LVU3460
2370:src/display.c **** 	  set_status("Free:");
 10679              		.loc 1 2370 5 is_stmt 0 view .LVU3461
 10680 089c 00F07482 		beq	.L1192
2378:src/display.c **** 	  /* Top line */
 10681              		.loc 1 2378 7 is_stmt 1 view .LVU3462
2378:src/display.c **** 	  /* Top line */
 10682              		.loc 1 2378 10 is_stmt 0 view .LVU3463
 10683 08a0 591C     		adds	r1, r3, #1
 10684 08a2 00F04F82 		beq	.L1193
 10685              	.LBB636:
2395:src/display.c **** 	  int end;
 10686              		.loc 1 2395 4 is_stmt 1 view .LVU3464
2396:src/display.c **** 	  int group = 10;
 10687              		.loc 1 2396 4 view .LVU3465
2397:src/display.c **** 	  int start = 0;
 10688              		.loc 1 2397 4 view .LVU3466
 10689              	.LVL1218:
2398:src/display.c **** 		
 10690              		.loc 1 2398 4 view .LVU3467
2400:src/display.c **** 	    base = 10 * status;
 10691              		.loc 1 2400 4 view .LVU3468
2400:src/display.c **** 	    base = 10 * status;
ARM GAS  /tmp/ccpF0v4D.s 			page 309


 10692              		.loc 1 2400 7 is_stmt 0 view .LVU3469
 10693 08a6 092B     		cmp	r3, #9
 10694 08a8 40F32882 		ble	.L1194
2410:src/display.c **** 	    base = regX_idx;
 10695              		.loc 1 2410 9 is_stmt 1 view .LVU3470
2410:src/display.c **** 	    base = regX_idx;
 10696              		.loc 1 2410 12 is_stmt 0 view .LVU3471
 10697 08ac 0A2B     		cmp	r3, #10
 10698 08ae 00F09381 		beq	.L1195
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10699              		.loc 1 2418 6 is_stmt 1 view .LVU3472
 10700              	.LVL1219:
2419:src/display.c **** 	    set_status("FL.00-.15");
 10701              		.loc 1 2419 6 view .LVU3473
2420:src/display.c **** 	  }
 10702              		.loc 1 2420 6 view .LVU3474
 10703 08b2 4B48     		ldr	r0, .L1210+36
 10704 08b4 FFF7FEFF 		bl	set_status
 10705              	.LVL1220:
2398:src/display.c **** 		
 10706              		.loc 1 2398 8 is_stmt 0 view .LVU3475
 10707 08b8 4FF0000B 		mov	fp, #0
 10708              	.LVL1221:
2397:src/display.c **** 	  int start = 0;
 10709              		.loc 1 2397 8 view .LVU3476
 10710 08bc 0A23     		movs	r3, #10
2419:src/display.c **** 	    set_status("FL.00-.15");
 10711              		.loc 1 2419 10 view .LVU3477
 10712 08be 4FF07F08 		mov	r8, #127
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10713              		.loc 1 2418 11 view .LVU3478
 10714 08c2 7027     		movs	r7, #112
 10715              	.LVL1222:
 10716              	.L932:
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10717              		.loc 1 2422 4 is_stmt 1 view .LVU3479
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10718              		.loc 1 2422 6 is_stmt 0 view .LVU3480
 10719 08c4 0BEBCB06 		add	r6, fp, fp, lsl #3
 10720              	.LVL1223:
2423:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10721              		.loc 1 2423 4 is_stmt 1 view .LVU3481
 10722              	.LBB637:
 10723              	.LBI637:
 349:src/display.c ****   if (res) {
 10724              		.loc 1 349 14 view .LVU3482
 10725              	.LBB638:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10726              		.loc 1 350 3 view .LVU3483
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10727              		.loc 1 353 5 view .LVU3484
 10728 08c8 0193     		str	r3, [sp, #4]
 10729              	.LVL1224:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10730              		.loc 1 353 5 is_stmt 0 view .LVU3485
 10731 08ca F01D     		adds	r0, r6, #7
 10732              	.LBB639:
ARM GAS  /tmp/ccpF0v4D.s 			page 310


 10733              	.LBB640:
 357:src/display.c **** #endif
 10734              		.loc 1 357 35 view .LVU3486
 10735 08cc 0BF10103 		add	r3, fp, #1
 10736 08d0 0293     		str	r3, [sp, #8]
 10737              	.LBE640:
 10738              	.LBE639:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10739              		.loc 1 353 5 view .LVU3487
 10740 08d2 FFF7FEFF 		bl	set_dot
 10741              	.LVL1225:
 354:src/display.c ****       set_dot(posn+8);
 10742              		.loc 1 354 5 is_stmt 1 view .LVU3488
 10743              	.LBB642:
 10744              	.LBI639:
 349:src/display.c ****   if (res) {
 10745              		.loc 1 349 14 view .LVU3489
 10746              	.LBB641:
 357:src/display.c **** #endif
 10747              		.loc 1 357 5 view .LVU3490
 357:src/display.c **** #endif
 10748              		.loc 1 357 38 is_stmt 0 view .LVU3491
 10749 08d6 4149     		ldr	r1, .L1210+32
 10750 08d8 029B     		ldr	r3, [sp, #8]
 10751 08da 2E22     		movs	r2, #46
 10752 08dc 01F81320 		strb	r2, [r1, r3, lsl #1]
 360:src/display.c **** }
 10753              		.loc 1 360 3 is_stmt 1 view .LVU3492
 10754              	.LVL1226:
 360:src/display.c **** }
 10755              		.loc 1 360 3 is_stmt 0 view .LVU3493
 10756              	.LBE641:
 10757              	.LBE642:
 360:src/display.c **** }
 10758              		.loc 1 360 3 is_stmt 1 view .LVU3494
 360:src/display.c **** }
 10759              		.loc 1 360 3 is_stmt 0 view .LVU3495
 10760              	.LBE638:
 10761              	.LBE637:
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10762              		.loc 1 2424 4 is_stmt 1 view .LVU3496
 10763 08e0 019B     		ldr	r3, [sp, #4]
 10764              	.LBB643:
 10765              	.LBB644:
 10766              	.LBB645:
 10767              	.LBB646:
 10768              	.LBB647:
 357:src/display.c **** #endif
 10769              		.loc 1 357 38 is_stmt 0 view .LVU3497
 10770 08e2 0392     		str	r2, [sp, #12]
 10771 08e4 CBEB4301 		rsb	r1, fp, r3, lsl #1
 10772 08e8 CA19     		adds	r2, r1, r7
 10773 08ea 0592     		str	r2, [sp, #20]
 10774              	.LBE647:
 10775              	.LBE646:
 10776              	.LBE645:
 10777              	.LBE644:
ARM GAS  /tmp/ccpF0v4D.s 			page 311


 10778              	.LBE643:
2425:src/display.c **** 	    int k = i + base - start;
 10779              		.loc 1 2425 30 view .LVU3498
 10780 08ec 0BEB0302 		add	r2, fp, r3
 10781 08f0 FB18     		adds	r3, r7, r3
 10782 08f2 0193     		str	r3, [sp, #4]
 10783 08f4 A7EB0B03 		sub	r3, r7, fp
 10784 08f8 CDE90635 		strd	r3, r5, [sp, #24]
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10785              		.loc 1 2424 6 view .LVU3499
 10786 08fc 0936     		adds	r6, r6, #9
 10787              	.LVL1227:
2425:src/display.c **** 	    int k = i + base - start;
 10788              		.loc 1 2425 4 is_stmt 1 view .LVU3500
2425:src/display.c **** 	    int k = i + base - start;
 10789              		.loc 1 2425 20 view .LVU3501
2425:src/display.c **** 	    int k = i + base - start;
 10790              		.loc 1 2425 30 is_stmt 0 view .LVU3502
 10791 08fe 0492     		str	r2, [sp, #16]
 10792 0900 1EE0     		b	.L936
 10793              	.LVL1228:
 10794              	.L934:
 10795              	.LBB664:
2435:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10796              		.loc 1 2435 6 is_stmt 1 view .LVU3503
 10797 0902 2946     		mov	r1, r5
 10798 0904 3046     		mov	r0, r6
 10799 0906 FFF7FEFF 		bl	set_dig
 10800              	.LVL1229:
2436:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10801              		.loc 1 2436 6 view .LVU3504
 10802              	.LBB654:
 10803              	.LBI644:
 349:src/display.c ****   if (res) {
 10804              		.loc 1 349 14 view .LVU3505
 10805              	.LBB652:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10806              		.loc 1 350 3 view .LVU3506
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10807              		.loc 1 353 5 view .LVU3507
 10808 090a F01D     		adds	r0, r6, #7
 10809 090c FFF7FEFF 		bl	set_dot
 10810              	.LVL1230:
 354:src/display.c ****       set_dot(posn+8);
 10811              		.loc 1 354 5 view .LVU3508
 10812              	.LBB650:
 10813              	.LBI646:
 349:src/display.c ****   if (res) {
 10814              		.loc 1 349 14 view .LVU3509
 10815              	.LBB648:
 357:src/display.c **** #endif
 10816              		.loc 1 357 5 view .LVU3510
 357:src/display.c **** #endif
 10817              		.loc 1 357 30 is_stmt 0 view .LVU3511
 10818 0910 344B     		ldr	r3, .L1210+40
 357:src/display.c **** #endif
 10819              		.loc 1 357 38 view .LVU3512
ARM GAS  /tmp/ccpF0v4D.s 			page 312


 10820 0912 0399     		ldr	r1, [sp, #12]
 357:src/display.c **** #endif
 10821              		.loc 1 357 30 view .LVU3513
 10822 0914 A3FB0623 		umull	r2, r3, r3, r6
 10823 0918 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10824              		.loc 1 357 38 view .LVU3514
 10825 091a 304A     		ldr	r2, .L1210+32
 357:src/display.c **** #endif
 10826              		.loc 1 357 35 view .LVU3515
 10827 091c 0133     		adds	r3, r3, #1
 10828              	.LBE648:
 10829              	.LBE650:
 10830              	.LBE652:
 10831              	.LBE654:
2438:src/display.c **** 	      set_dig(j, 8);
 10832              		.loc 1 2438 9 view .LVU3516
 10833 091e BBF1040F 		cmp	fp, #4
 10834              	.LBB655:
 10835              	.LBB653:
 10836              	.LBB651:
 10837              	.LBB649:
 357:src/display.c **** #endif
 10838              		.loc 1 357 38 view .LVU3517
 10839 0922 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 10840              		.loc 1 360 3 is_stmt 1 view .LVU3518
 10841              	.LVL1231:
 360:src/display.c **** }
 10842              		.loc 1 360 3 is_stmt 0 view .LVU3519
 10843              	.LBE649:
 10844              	.LBE651:
 360:src/display.c **** }
 10845              		.loc 1 360 3 is_stmt 1 view .LVU3520
 360:src/display.c **** }
 10846              		.loc 1 360 3 is_stmt 0 view .LVU3521
 10847              	.LBE653:
 10848              	.LBE655:
2437:src/display.c **** 	    if (i == 4) {
 10849              		.loc 1 2437 6 is_stmt 1 view .LVU3522
2438:src/display.c **** 	      set_dig(j, 8);
 10850              		.loc 1 2438 6 view .LVU3523
2438:src/display.c **** 	      set_dig(j, 8);
 10851              		.loc 1 2438 9 is_stmt 0 view .LVU3524
 10852 0926 25D0     		beq	.L1196
2437:src/display.c **** 	    if (i == 4) {
 10853              		.loc 1 2437 8 view .LVU3525
 10854 0928 3E46     		mov	r6, r7
 10855              	.LVL1232:
 10856              	.L935:
2437:src/display.c **** 	    if (i == 4) {
 10857              		.loc 1 2437 8 view .LVU3526
 10858              	.LBE664:
2425:src/display.c **** 	    int k = i + base - start;
 10859              		.loc 1 2425 39 is_stmt 1 view .LVU3527
 10860 092a 019B     		ldr	r3, [sp, #4]
2425:src/display.c **** 	    int k = i + base - start;
ARM GAS  /tmp/ccpF0v4D.s 			page 313


 10861              		.loc 1 2425 4 is_stmt 0 view .LVU3528
 10862 092c 0499     		ldr	r1, [sp, #16]
 10863 092e 0133     		adds	r3, r3, #1
 10864 0930 0193     		str	r3, [sp, #4]
2425:src/display.c **** 	    int k = i + base - start;
 10865              		.loc 1 2425 40 view .LVU3529
 10866 0932 029B     		ldr	r3, [sp, #8]
2425:src/display.c **** 	    int k = i + base - start;
 10867              		.loc 1 2425 4 view .LVU3530
 10868 0934 8B42     		cmp	r3, r1
2425:src/display.c **** 	    int k = i + base - start;
 10869              		.loc 1 2425 40 view .LVU3531
 10870 0936 9B46     		mov	fp, r3
 10871              	.LVL1233:
2425:src/display.c **** 	    int k = i + base - start;
 10872              		.loc 1 2425 20 is_stmt 1 view .LVU3532
2425:src/display.c **** 	    int k = i + base - start;
 10873              		.loc 1 2425 4 is_stmt 0 view .LVU3533
 10874 0938 00F05881 		beq	.L1151
2425:src/display.c **** 	    int k = i + base - start;
 10875              		.loc 1 2425 4 view .LVU3534
 10876 093c 0133     		adds	r3, r3, #1
 10877              	.LVL1234:
2425:src/display.c **** 	    int k = i + base - start;
 10878              		.loc 1 2425 4 view .LVU3535
 10879 093e 0293     		str	r3, [sp, #8]
 10880              	.LVL1235:
 10881              	.L936:
 10882              	.LBB665:
2426:src/display.c **** 	    int l = get_user_flag(k);
 10883              		.loc 1 2426 6 is_stmt 1 view .LVU3536
2427:src/display.c **** 	    k += group;
 10884              		.loc 1 2427 6 view .LVU3537
2427:src/display.c **** 	    k += group;
 10885              		.loc 1 2427 14 is_stmt 0 view .LVU3538
 10886 0940 069B     		ldr	r3, [sp, #24]
 10887 0942 03EB0B00 		add	r0, r3, fp
 10888 0946 FFF7FEFF 		bl	get_user_flag
 10889              	.LVL1236:
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10890              		.loc 1 2429 9 view .LVU3539
 10891 094a 019B     		ldr	r3, [sp, #4]
 10892 094c 4345     		cmp	r3, r8
2427:src/display.c **** 	    k += group;
 10893              		.loc 1 2427 14 view .LVU3540
 10894 094e 0546     		mov	r5, r0
 10895              	.LVL1237:
2428:src/display.c **** 	    if (end >= k) {
 10896              		.loc 1 2428 6 is_stmt 1 view .LVU3541
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10897              		.loc 1 2429 6 view .LVU3542
2437:src/display.c **** 	    if (i == 4) {
 10898              		.loc 1 2437 8 is_stmt 0 view .LVU3543
 10899 0950 06F10907 		add	r7, r6, #9
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10900              		.loc 1 2429 9 view .LVU3544
 10901 0954 D5DC     		bgt	.L934
ARM GAS  /tmp/ccpF0v4D.s 			page 314


2430:src/display.c **** 	      k += group;
 10902              		.loc 1 2430 8 is_stmt 1 view .LVU3545
2430:src/display.c **** 	      k += group;
 10903              		.loc 1 2430 14 is_stmt 0 view .LVU3546
 10904 0956 1846     		mov	r0, r3
 10905              	.LVL1238:
2430:src/display.c **** 	      k += group;
 10906              		.loc 1 2430 14 view .LVU3547
 10907 0958 FFF7FEFF 		bl	get_user_flag
 10908              	.LVL1239:
2430:src/display.c **** 	      k += group;
 10909              		.loc 1 2430 14 view .LVU3548
 10910 095c 059B     		ldr	r3, [sp, #20]
 10911 095e 5B44     		add	r3, r3, fp
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10912              		.loc 1 2432 11 view .LVU3549
 10913 0960 9845     		cmp	r8, r3
2430:src/display.c **** 	      k += group;
 10914              		.loc 1 2430 10 view .LVU3550
 10915 0962 45EA4005 		orr	r5, r5, r0, lsl #1
 10916              	.LVL1240:
2431:src/display.c **** 	      if (end >= k)
 10917              		.loc 1 2431 8 is_stmt 1 view .LVU3551
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10918              		.loc 1 2432 8 view .LVU3552
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10919              		.loc 1 2432 11 is_stmt 0 view .LVU3553
 10920 0966 CCDB     		blt	.L934
2433:src/display.c **** 	    }
 10921              		.loc 1 2433 3 is_stmt 1 view .LVU3554
2433:src/display.c **** 	    }
 10922              		.loc 1 2433 9 is_stmt 0 view .LVU3555
 10923 0968 1846     		mov	r0, r3
 10924 096a FFF7FEFF 		bl	get_user_flag
 10925              	.LVL1241:
2433:src/display.c **** 	    }
 10926              		.loc 1 2433 5 view .LVU3556
 10927 096e 45EA8005 		orr	r5, r5, r0, lsl #2
 10928              	.LVL1242:
2433:src/display.c **** 	    }
 10929              		.loc 1 2433 5 view .LVU3557
 10930 0972 C6E7     		b	.L934
 10931              	.LVL1243:
 10932              	.L1196:
2439:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10933              		.loc 1 2439 8 is_stmt 1 view .LVU3558
 10934 0974 0821     		movs	r1, #8
 10935 0976 3846     		mov	r0, r7
 10936 0978 FFF7FEFF 		bl	set_dig
 10937              	.LVL1244:
2440:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10938              		.loc 1 2440 8 view .LVU3559
 10939              	.LBB656:
 10940              	.LBI656:
 349:src/display.c ****   if (res) {
 10941              		.loc 1 349 14 view .LVU3560
 10942              	.LBB657:
ARM GAS  /tmp/ccpF0v4D.s 			page 315


 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10943              		.loc 1 350 3 view .LVU3561
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10944              		.loc 1 353 5 view .LVU3562
 10945 097c 06F11000 		add	r0, r6, #16
 10946 0980 FFF7FEFF 		bl	set_dot
 10947              	.LVL1245:
 354:src/display.c ****       set_dot(posn+8);
 10948              		.loc 1 354 5 view .LVU3563
 10949              	.LBB658:
 10950              	.LBI658:
 349:src/display.c ****   if (res) {
 10951              		.loc 1 349 14 view .LVU3564
 10952              	.LBB659:
 357:src/display.c **** #endif
 10953              		.loc 1 357 5 view .LVU3565
 357:src/display.c **** #endif
 10954              		.loc 1 357 30 is_stmt 0 view .LVU3566
 10955 0984 174B     		ldr	r3, .L1210+40
 357:src/display.c **** #endif
 10956              		.loc 1 357 38 view .LVU3567
 10957 0986 0399     		ldr	r1, [sp, #12]
 357:src/display.c **** #endif
 10958              		.loc 1 357 30 view .LVU3568
 10959 0988 A3FB0723 		umull	r2, r3, r3, r7
 10960 098c 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 10961              		.loc 1 357 38 view .LVU3569
 10962 098e 134A     		ldr	r2, .L1210+32
 357:src/display.c **** #endif
 10963              		.loc 1 357 35 view .LVU3570
 10964 0990 0133     		adds	r3, r3, #1
 10965              	.LBE659:
 10966              	.LBE658:
 10967              	.LBE657:
 10968              	.LBE656:
2441:src/display.c **** 	    }
 10969              		.loc 1 2441 10 view .LVU3571
 10970 0992 1236     		adds	r6, r6, #18
 10971              	.LBB663:
 10972              	.LBB662:
 10973              	.LBB661:
 10974              	.LBB660:
 357:src/display.c **** #endif
 10975              		.loc 1 357 38 view .LVU3572
 10976 0994 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 10977              		.loc 1 360 3 is_stmt 1 view .LVU3573
 10978              	.LVL1246:
 360:src/display.c **** }
 10979              		.loc 1 360 3 is_stmt 0 view .LVU3574
 10980              	.LBE660:
 10981              	.LBE661:
 360:src/display.c **** }
 10982              		.loc 1 360 3 is_stmt 1 view .LVU3575
 360:src/display.c **** }
 10983              		.loc 1 360 3 is_stmt 0 view .LVU3576
ARM GAS  /tmp/ccpF0v4D.s 			page 316


 10984              	.LBE662:
 10985              	.LBE663:
2441:src/display.c **** 	    }
 10986              		.loc 1 2441 8 is_stmt 1 view .LVU3577
2441:src/display.c **** 	    }
 10987              		.loc 1 2441 8 is_stmt 0 view .LVU3578
 10988 0998 C7E7     		b	.L935
 10989              	.LVL1247:
 10990              	.L904:
2441:src/display.c **** 	    }
 10991              		.loc 1 2441 8 view .LVU3579
 10992              	.LBE665:
 10993              	.LBE636:
 10994              	.LBE635:
 10995              	.LBE634:
2718:src/display.c **** 	    }
 10996              		.loc 1 2718 3 is_stmt 1 view .LVU3580
2718:src/display.c **** 	    }
 10997              		.loc 1 2718 8 is_stmt 0 view .LVU3581
 10998 099a 2189     		ldrh	r1, [r4, #8]
 10999 099c FFF7FEFF 		bl	num_arg_0
 11000              	.LVL1248:
2718:src/display.c **** 	    }
 11001              		.loc 1 2718 8 view .LVU3582
 11002 09a0 E9E5     		b	.L903
 11003              	.LVL1249:
 11004              	.L1031:
 11005              	.LBB671:
 11006              	.LBB603:
 11007              	.LBB595:
1290:src/display.c **** 	    if (gotdot <= j) {
 11008              		.loc 1 1290 8 view .LVU3583
 11009 09a2 4FF00908 		mov	r8, #9
 11010 09a6 04E6     		b	.L993
 11011              	.LVL1250:
 11012              	.L1187:
1297:src/display.c **** 	      p++;
 11013              		.loc 1 1297 8 is_stmt 1 view .LVU3584
1298:src/display.c **** 	      if (!double_dot)
 11014              		.loc 1 1298 8 view .LVU3585
1300:src/display.c **** 	    }
 11015              		.loc 1 1300 5 is_stmt 0 view .LVU3586
 11016 09a8 002A     		cmp	r2, #0
1298:src/display.c **** 	      if (!double_dot)
 11017              		.loc 1 1298 9 view .LVU3587
 11018 09aa 0AF1010A 		add	r10, r10, #1
 11019              	.LVL1251:
1299:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11020              		.loc 1 1299 8 is_stmt 1 view .LVU3588
1300:src/display.c **** 	    }
 11021              		.loc 1 1300 5 is_stmt 0 view .LVU3589
 11022 09ae 14BF     		ite	ne
 11023 09b0 4FF00908 		movne	r8, #9
 11024 09b4 4FF01208 		moveq	r8, #18
 11025 09b8 FBE5     		b	.L993
 11026              	.L1211:
 11027 09ba 00BF     		.align	2
ARM GAS  /tmp/ccpF0v4D.s 			page 317


 11028              	.L1210:
 11029 09bc 00000000 		.word	DispMsg
 11030 09c0 00000000 		.word	DispPlot
 11031 09c4 00000000 		.word	WasDataEntry
 11032 09c8 00000000 		.word	.LANCHOR1
 11033 09cc 3C000000 		.word	.LC25
 11034 09d0 00000000 		.word	ShowRegister
 11035 09d4 00000000 		.word	multicmds
 11036 09d8 00000000 		.word	.LANCHOR23
 11037 09dc 00000000 		.word	LastDisplayedNumber
 11038 09e0 8C000000 		.word	.LC36
 11039 09e4 398EE338 		.word	954437177
 11040 09e8 00000000 		.word	.LANCHOR22
 11041              	.LVL1252:
 11042              	.L958:
1300:src/display.c **** 	    }
 11043              		.loc 1 1300 5 view .LVU3590
 11044              	.LBE595:
 11045              	.LBE603:
 11046              	.LBE671:
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11047              		.loc 1 2833 11 is_stmt 1 view .LVU3591
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11048              		.loc 1 2833 15 is_stmt 0 view .LVU3592
 11049 09ec B94A     		ldr	r2, .L1212
 11050 09ee 0192     		str	r2, [sp, #4]
 11051 09f0 B2F90020 		ldrsh	r2, [r2]
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11052              		.loc 1 2833 14 view .LVU3593
 11053 09f4 002A     		cmp	r2, #0
 11054 09f6 40F0AC80 		bne	.L1197
2835:src/display.c **** 	    bp = scopy(buf, Alpha);
 11055              		.loc 1 2835 11 is_stmt 1 view .LVU3594
2835:src/display.c **** 	    bp = scopy(buf, Alpha);
 11056              		.loc 1 2835 14 is_stmt 0 view .LVU3595
 11057 09fa 0907     		lsls	r1, r1, #28
 11058 09fc 61D4     		bmi	.L1198
 11059              	.LVL1253:
2884:src/display.c ****       nostk:
 11060              		.loc 1 2884 2 is_stmt 1 view .LVU3596
 11061 09fe FFF7FEFF 		bl	show_stack
 11062              	.LVL1254:
2886:src/display.c **** 	if (!skip) {
 11063              		.loc 1 2886 2 view .LVU3597
2867:src/display.c **** 	  }
 11064              		.loc 1 2867 12 is_stmt 0 view .LVU3598
 11065 0a02 0125     		movs	r5, #1
2886:src/display.c **** 	if (!skip) {
 11066              		.loc 1 2886 2 view .LVU3599
 11067 0a04 FFF7FEFF 		bl	show_flags
 11068              	.LVL1255:
2887:src/display.c **** 	  if (State2.runmode) {
 11069              		.loc 1 2887 2 is_stmt 1 view .LVU3600
 11070 0a08 FFF73DBB 		b	.L887
 11071              	.LVL1256:
 11072              	.L1190:
 11073              	.LBB672:
ARM GAS  /tmp/ccpF0v4D.s 			page 318


 11074              	.LBB619:
2783:src/display.c **** 	      copyreg(&z, x);
 11075              		.loc 1 2783 8 view .LVU3601
2783:src/display.c **** 	      copyreg(&z, x);
 11076              		.loc 1 2783 27 is_stmt 0 view .LVU3602
 11077 0a0c B24B     		ldr	r3, .L1212+4
 11078 0a0e 1E68     		ldr	r6, [r3]
 11079              	.LVL1257:
2784:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11080              		.loc 1 2784 8 is_stmt 1 view .LVU3603
 11081 0a10 17A8     		add	r0, sp, #92
 11082 0a12 3146     		mov	r1, r6
 11083 0a14 FFF7FEFF 		bl	copyreg
 11084              	.LVL1258:
2785:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11085              		.loc 1 2785 8 view .LVU3604
 11086 0a18 E8B2     		uxtb	r0, r5
 11087 0a1a FFF7FEFF 		bl	sigma_val
 11088              	.LVL1259:
2786:src/display.c **** 	      copyreg(x, &z);
 11089              		.loc 1 2786 8 view .LVU3605
 11090 0a1e FFF7FEFF 		bl	is_dblmode
 11091              	.LVL1260:
 11092 0a22 0021     		movs	r1, #0
 11093 0a24 0246     		mov	r2, r0
 11094 0a26 3046     		mov	r0, r6
 11095 0a28 FFF7FEFF 		bl	set_x
 11096              	.LVL1261:
2787:src/display.c **** 	      skip = 1;
 11097              		.loc 1 2787 8 view .LVU3606
 11098 0a2c 3046     		mov	r0, r6
 11099 0a2e 17A9     		add	r1, sp, #92
 11100 0a30 FFF7FEFF 		bl	copyreg
 11101              	.LVL1262:
2788:src/display.c **** 	    }
 11102              		.loc 1 2788 8 view .LVU3607
2788:src/display.c **** 	    }
 11103              		.loc 1 2788 13 is_stmt 0 view .LVU3608
 11104 0a34 0126     		movs	r6, #1
 11105              	.LVL1263:
2788:src/display.c **** 	    }
 11106              		.loc 1 2788 13 view .LVU3609
 11107 0a36 C0E6     		b	.L912
 11108              	.LVL1264:
 11109              	.L1189:
2788:src/display.c **** 	    }
 11110              		.loc 1 2788 13 view .LVU3610
 11111              	.LBE619:
 11112              	.LBB620:
2763:src/display.c **** 	      decimal64 z;
 11113              		.loc 1 2763 8 is_stmt 1 view .LVU3611
2764:src/display.c **** 
 11114              		.loc 1 2764 8 view .LVU3612
2766:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11115              		.loc 1 2766 8 view .LVU3613
 11116 0a38 0EA8     		add	r0, sp, #56
 11117 0a3a FFF7FEFF 		bl	getX
ARM GAS  /tmp/ccpF0v4D.s 			page 319


 11118              	.LVL1265:
2767:src/display.c **** 		const unsigned int f = argKIND(op);
 11119              		.loc 1 2767 8 view .LVU3614
2767:src/display.c **** 		const unsigned int f = argKIND(op);
 11120              		.loc 1 2767 11 is_stmt 0 view .LVU3615
 11121 0a3e C5F30723 		ubfx	r3, r5, #8, #8
 11122 0a42 022B     		cmp	r3, #2
 11123 0a44 40F0BC80 		bne	.L914
 11124              	.LBB621:
2768:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11125              		.loc 1 2768 3 is_stmt 1 view .LVU3616
2768:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11126              		.loc 1 2768 22 is_stmt 0 view .LVU3617
 11127 0a48 EDB2     		uxtb	r5, r5
 11128              	.LVL1266:
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11129              		.loc 1 2769 3 is_stmt 1 view .LVU3618
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11130              		.loc 1 2769 6 is_stmt 0 view .LVU3619
 11131 0a4a 982D     		cmp	r5, #152
 11132              	.LBB622:
2772:src/display.c **** 		}
 11133              		.loc 1 2772 5 view .LVU3620
 11134 0a4c 17AF     		add	r7, sp, #92
 11135              	.LBE622:
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11136              		.loc 1 2769 6 view .LVU3621
 11137 0a4e 7CD8     		bhi	.L915
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11138              		.loc 1 2769 28 discriminator 1 view .LVU3622
 11139 0a50 1823     		movs	r3, #24
 11140 0a52 A24A     		ldr	r2, .L1212+8
 11141 0a54 03FB05F3 		mul	r3, r3, r5
 11142 0a58 D358     		ldr	r3, [r2, r3]
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11143              		.loc 1 2769 23 discriminator 1 view .LVU3623
 11144 0a5a 002B     		cmp	r3, #0
 11145 0a5c 75D0     		beq	.L915
 11146              	.LBB623:
2770:src/display.c **** 		  update_speed(0);
 11147              		.loc 1 2770 5 is_stmt 1 view .LVU3624
 11148              	.LVL1267:
2771:src/display.c **** 		  fp(&r, &x);
 11149              		.loc 1 2771 20 view .LVU3625
2772:src/display.c **** 		}
 11150              		.loc 1 2772 5 view .LVU3626
 11151 0a5e 0EA9     		add	r1, sp, #56
 11152 0a60 3846     		mov	r0, r7
 11153 0a62 9847     		blx	r3
 11154              	.LVL1268:
 11155              	.L916:
2772:src/display.c **** 		}
 11156              		.loc 1 2772 5 is_stmt 0 view .LVU3627
 11157              	.LBE623:
 11158              	.LBE621:
2778:src/display.c **** 	      packed_from_number(&z, &r);
 11159              		.loc 1 2778 8 is_stmt 1 discriminator 1 view .LVU3628
ARM GAS  /tmp/ccpF0v4D.s 			page 320


 11160 0a64 9E4A     		ldr	r2, .L1212+12
 11161 0a66 3946     		mov	r1, r7
 11162 0a68 3846     		mov	r0, r7
 11163 0a6a FFF7FEFF 		bl	decNumberNormalize
 11164              	.LVL1269:
2779:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11165              		.loc 1 2779 8 discriminator 1 view .LVU3629
 11166 0a6e 3946     		mov	r1, r7
 11167 0a70 08A8     		add	r0, sp, #32
 11168 0a72 FFF7FEFF 		bl	packed_from_number
 11169              	.LVL1270:
2780:src/display.c **** 	      skip = 1;
 11170              		.loc 1 2780 8 discriminator 1 view .LVU3630
 11171 0a76 0022     		movs	r2, #0
 11172 0a78 08A8     		add	r0, sp, #32
 11173 0a7a 1146     		mov	r1, r2
 11174 0a7c FFF7FEFF 		bl	set_x
 11175              	.LVL1271:
2781:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11176              		.loc 1 2781 8 discriminator 1 view .LVU3631
2781:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11177              		.loc 1 2781 13 is_stmt 0 discriminator 1 view .LVU3632
 11178 0a80 0126     		movs	r6, #1
 11179              	.LBE620:
 11180 0a82 9AE6     		b	.L912
 11181              	.LVL1272:
 11182              	.L957:
2781:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11183              		.loc 1 2781 13 discriminator 1 view .LVU3633
 11184              	.LBE672:
2874:src/display.c **** 	  if (i > 0)
 11185              		.loc 1 2874 4 is_stmt 1 view .LVU3634
2874:src/display.c **** 	  if (i > 0)
 11186              		.loc 1 2874 8 is_stmt 0 view .LVU3635
 11187 0a84 DAF80030 		ldr	r3, [r10]
 11188 0a88 B3F8E007 		ldrh	r0, [r3, #2016]
 11189              	.LVL1273:
2875:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11190              		.loc 1 2875 4 is_stmt 1 view .LVU3636
2875:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11191              		.loc 1 2875 7 is_stmt 0 view .LVU3637
 11192 0a8c 0028     		cmp	r0, #0
 11193 0a8e 00F0F880 		beq	.L971
2876:src/display.c **** 	  else
 11194              		.loc 1 2876 6 is_stmt 1 view .LVU3638
 11195 0a92 FFF7FEFF 		bl	getprog
 11196              	.LVL1274:
2876:src/display.c **** 	  else
 11197              		.loc 1 2876 6 is_stmt 0 view .LVU3639
 11198 0a96 20A9     		add	r1, sp, #128
 11199              	.LVL1275:
2876:src/display.c **** 	  else
 11200              		.loc 1 2876 6 view .LVU3640
 11201 0a98 FFF7FEFF 		bl	prt
 11202              	.LVL1276:
2876:src/display.c **** 	  else
 11203              		.loc 1 2876 6 view .LVU3641
ARM GAS  /tmp/ccpF0v4D.s 			page 321


 11204 0a9c FFF7FEFF 		bl	set_status
 11205              	.LVL1277:
 11206              	.L972:
2879:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11207              		.loc 1 2879 4 is_stmt 1 view .LVU3642
 11208 0aa0 8920     		movs	r0, #137
 11209 0aa2 FFF7FEFF 		bl	set_dot
 11210              	.LVL1278:
2881:src/display.c **** 	  goto nostk;
 11211              		.loc 1 2881 6 view .LVU3643
2882:src/display.c **** 	}
 11212              		.loc 1 2882 4 view .LVU3644
2886:src/display.c **** 	if (!skip) {
 11213              		.loc 1 2886 2 view .LVU3645
2881:src/display.c **** 	  goto nostk;
 11214              		.loc 1 2881 12 is_stmt 0 view .LVU3646
 11215 0aa6 0125     		movs	r5, #1
2886:src/display.c **** 	if (!skip) {
 11216              		.loc 1 2886 2 view .LVU3647
 11217 0aa8 FFF7FEFF 		bl	show_flags
 11218              	.LVL1279:
 11219              	.L1163:
2887:src/display.c **** 	  if (State2.runmode) {
 11220              		.loc 1 2887 2 is_stmt 1 view .LVU3648
 11221 0aac 894B     		ldr	r3, .L1212
 11222 0aae 8D4F     		ldr	r7, .L1212+16
 11223 0ab0 0193     		str	r3, [sp, #4]
 11224 0ab2 FFF7E8BA 		b	.L887
 11225              	.LVL1280:
 11226              	.L910:
 11227              	.LBB673:
2757:src/display.c **** 	    else
 11228              		.loc 1 2757 8 view .LVU3649
 11229 0ab6 8C48     		ldr	r0, .L1212+20
 11230 0ab8 0021     		movs	r1, #0
 11231 0aba FFF7FEFF 		bl	set_digits_string
 11232              	.LVL1281:
2760:src/display.c **** 	  } else if (State2.runmode) {
 11233              		.loc 1 2760 11 is_stmt 0 view .LVU3650
 11234 0abe 0126     		movs	r6, #1
2757:src/display.c **** 	    else
 11235              		.loc 1 2757 8 view .LVU3651
 11236 0ac0 7BE6     		b	.L912
 11237              	.LVL1282:
 11238              	.L1198:
2757:src/display.c **** 	    else
 11239              		.loc 1 2757 8 view .LVU3652
 11240              	.LBE673:
2836:src/display.c **** 	    j = State2.alpha_pos;
 11241              		.loc 1 2836 6 is_stmt 1 view .LVU3653
2836:src/display.c **** 	    j = State2.alpha_pos;
 11242              		.loc 1 2836 22 is_stmt 0 view .LVU3654
 11243 0ac2 DAF80010 		ldr	r1, [r10]
 11244 0ac6 0292     		str	r2, [sp, #8]
2836:src/display.c **** 	    j = State2.alpha_pos;
 11245              		.loc 1 2836 11 view .LVU3655
 11246 0ac8 20A8     		add	r0, sp, #128
ARM GAS  /tmp/ccpF0v4D.s 			page 322


 11247              	.LVL1283:
2836:src/display.c **** 	    j = State2.alpha_pos;
 11248              		.loc 1 2836 11 view .LVU3656
 11249 0aca 01F5F661 		add	r1, r1, #1968
 11250 0ace FFF7FEFF 		bl	scopy
 11251              	.LVL1284:
2837:src/display.c **** 	    if (j != 0) {
 11252              		.loc 1 2837 16 view .LVU3657
 11253 0ad2 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11254              	.LVL1285:
2837:src/display.c **** 	    if (j != 0) {
 11255              		.loc 1 2837 6 is_stmt 1 view .LVU3658
2838:src/display.c **** 	      i = slen(buf);
 11256              		.loc 1 2838 6 view .LVU3659
2838:src/display.c **** 	      i = slen(buf);
 11257              		.loc 1 2838 9 is_stmt 0 view .LVU3660
 11258 0ad4 2BBB     		cbnz	r3, .L1199
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11259              		.loc 1 2851 8 is_stmt 1 view .LVU3661
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11260              		.loc 1 2851 11 is_stmt 0 view .LVU3662
 11261 0ad6 3EB1     		cbz	r6, .L969
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11262              		.loc 1 2851 31 discriminator 1 view .LVU3663
 11263 0ad8 B8F1000F 		cmp	r8, #0
 11264 0adc 04D1     		bne	.L969
2852:src/display.c **** 		*bp++ = '\0';
 11265              		.loc 1 2852 3 is_stmt 1 view .LVU3664
 11266              	.LVL1286:
2852:src/display.c **** 		*bp++ = '\0';
 11267              		.loc 1 2852 23 is_stmt 0 view .LVU3665
 11268 0ade 06F11003 		add	r3, r6, #16
 11269              	.LVL1287:
2853:src/display.c **** 	      }
 11270              		.loc 1 2853 9 view .LVU3666
 11271 0ae2 0022     		movs	r2, #0
2852:src/display.c **** 		*bp++ = '\0';
 11272              		.loc 1 2852 9 view .LVU3667
 11273 0ae4 0370     		strb	r3, [r0]
 11274              	.LVL1288:
2853:src/display.c **** 	      }
 11275              		.loc 1 2853 3 is_stmt 1 view .LVU3668
2853:src/display.c **** 	      }
 11276              		.loc 1 2853 9 is_stmt 0 view .LVU3669
 11277 0ae6 4270     		strb	r2, [r0, #1]
 11278              	.LVL1289:
 11279              	.L969:
2855:src/display.c **** 	    }
 11280              		.loc 1 2855 8 is_stmt 1 view .LVU3670
 11281 0ae8 20A8     		add	r0, sp, #128
 11282 0aea FFF7FEFF 		bl	set_status_right
 11283              	.LVL1290:
 11284              	.L968:
2857:src/display.c **** 	      bp = buf;
 11285              		.loc 1 2857 6 view .LVU3671
2857:src/display.c **** 	      bp = buf;
 11286              		.loc 1 2857 9 is_stmt 0 view .LVU3672
ARM GAS  /tmp/ccpF0v4D.s 			page 323


 11287 0aee 002E     		cmp	r6, #0
 11288 0af0 60D0     		beq	.L960
2857:src/display.c **** 	      bp = buf;
 11289              		.loc 1 2857 27 discriminator 1 view .LVU3673
 11290 0af2 B8F1000F 		cmp	r8, #0
 11291 0af6 5DD0     		beq	.L960
2858:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11292              		.loc 1 2858 8 is_stmt 1 view .LVU3674
 11293              	.LVL1291:
2859:src/display.c **** 	      *bp++ = '\0';
 11294              		.loc 1 2859 8 view .LVU3675
 11295              	.LBB674:
 11296              	.LBB675:
3506:src/display.c **** 	if (State2.runmode) {
 11297              		.loc 1 3506 5 is_stmt 0 view .LVU3676
 11298 0af8 B9F90030 		ldrsh	r3, [r9]
 11299              	.LBE675:
 11300              	.LBE674:
2859:src/display.c **** 	      *bp++ = '\0';
 11301              		.loc 1 2859 28 view .LVU3677
 11302 0afc 1036     		adds	r6, r6, #16
2860:src/display.c **** 	      set_status_top(buf);
 11303              		.loc 1 2860 14 view .LVU3678
 11304 0afe 0022     		movs	r2, #0
2859:src/display.c **** 	      *bp++ = '\0';
 11305              		.loc 1 2859 14 view .LVU3679
 11306 0b00 8DF88060 		strb	r6, [sp, #128]
2860:src/display.c **** 	      set_status_top(buf);
 11307              		.loc 1 2860 8 is_stmt 1 view .LVU3680
 11308              	.LVL1292:
2860:src/display.c **** 	      set_status_top(buf);
 11309              		.loc 1 2860 14 is_stmt 0 view .LVU3681
 11310 0b04 8DF88120 		strb	r2, [sp, #129]
2861:src/display.c **** 	      no_status_top = 1;
 11311              		.loc 1 2861 8 is_stmt 1 view .LVU3682
 11312              	.LVL1293:
 11313              	.LBB677:
 11314              	.LBI674:
3505:src/display.c **** 	if (no_status_top) return;
 11315              		.loc 1 3505 19 view .LVU3683
 11316              	.LBB676:
3506:src/display.c **** 	if (State2.runmode) {
 11317              		.loc 1 3506 2 view .LVU3684
3506:src/display.c **** 	if (State2.runmode) {
 11318              		.loc 1 3506 5 is_stmt 0 view .LVU3685
 11319 0b08 13B9     		cbnz	r3, .L970
 11320 0b0a 20A8     		add	r0, sp, #128
 11321              	.LVL1294:
3506:src/display.c **** 	if (State2.runmode) {
 11322              		.loc 1 3506 5 view .LVU3686
 11323 0b0c FFF7FEFF 		bl	set_status_top.part.0
 11324              	.LVL1295:
 11325              	.L970:
3506:src/display.c **** 	if (State2.runmode) {
 11326              		.loc 1 3506 5 view .LVU3687
 11327              	.LBE676:
 11328              	.LBE677:
ARM GAS  /tmp/ccpF0v4D.s 			page 324


2862:src/display.c **** 	      //annuc = 1;
 11329              		.loc 1 2862 8 is_stmt 1 view .LVU3688
2862:src/display.c **** 	      //annuc = 1;
 11330              		.loc 1 2862 22 is_stmt 0 view .LVU3689
 11331 0b10 0123     		movs	r3, #1
 11332 0b12 A9F80030 		strh	r3, [r9]	@ movhi
2884:src/display.c ****       nostk:
 11333              		.loc 1 2884 2 is_stmt 1 view .LVU3690
 11334 0b16 FFF7FEFF 		bl	show_stack
 11335              	.LVL1296:
2886:src/display.c **** 	if (!skip) {
 11336              		.loc 1 2886 2 view .LVU3691
 11337 0b1a FFF7FEFF 		bl	show_flags
 11338              	.LVL1297:
2887:src/display.c **** 	  if (State2.runmode) {
 11339              		.loc 1 2887 2 view .LVU3692
 11340 0b1e FFF7B2BA 		b	.L887
 11341              	.LVL1298:
 11342              	.L1199:
2839:src/display.c **** 	      j *= 6;
 11343              		.loc 1 2839 8 view .LVU3693
2839:src/display.c **** 	      j *= 6;
 11344              		.loc 1 2839 12 is_stmt 0 view .LVU3694
 11345 0b22 20A8     		add	r0, sp, #128
 11346              	.LVL1299:
2839:src/display.c **** 	      j *= 6;
 11347              		.loc 1 2839 12 view .LVU3695
 11348 0b24 0393     		str	r3, [sp, #12]
 11349 0b26 FFF7FEFF 		bl	slen
 11350              	.LVL1300:
2840:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11351              		.loc 1 2840 8 is_stmt 1 view .LVU3696
2841:src/display.c **** 		{
 11352              		.loc 1 2841 8 view .LVU3697
2840:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11353              		.loc 1 2840 10 is_stmt 0 view .LVU3698
 11354 0b2a 039B     		ldr	r3, [sp, #12]
 11355 0b2c 03EB4303 		add	r3, r3, r3, lsl #1
2841:src/display.c **** 		{
 11356              		.loc 1 2841 15 view .LVU3699
 11357 0b30 A0EB4300 		sub	r0, r0, r3, lsl #1
 11358              	.LVL1301:
2841:src/display.c **** 		{
 11359              		.loc 1 2841 11 view .LVU3700
 11360 0b34 1328     		cmp	r0, #19
 11361 0b36 4BDD     		ble	.L967
2843:src/display.c **** 		  set_status_right(buf);
 11362              		.loc 1 2843 5 is_stmt 1 view .LVU3701
2843:src/display.c **** 		  set_status_right(buf);
 11363              		.loc 1 2843 20 is_stmt 0 view .LVU3702
 11364 0b38 2AAB     		add	r3, sp, #168
 11365 0b3a 0344     		add	r3, r3, r0
 11366 0b3c 029A     		ldr	r2, [sp, #8]
 11367 0b3e 03F8282C 		strb	r2, [r3, #-40]
2844:src/display.c **** 		}
 11368              		.loc 1 2844 5 is_stmt 1 view .LVU3703
 11369 0b42 20A8     		add	r0, sp, #128
ARM GAS  /tmp/ccpF0v4D.s 			page 325


 11370 0b44 FFF7FEFF 		bl	set_status_right
 11371              	.LVL1302:
 11372 0b48 D1E7     		b	.L968
 11373              	.LVL1303:
 11374              	.L915:
 11375              	.LBB678:
 11376              	.LBB625:
 11377              	.LBB624:
2775:src/display.c **** 	      } else
 11378              		.loc 1 2775 5 view .LVU3704
 11379 0b4a 3846     		mov	r0, r7
 11380 0b4c FFF7FEFF 		bl	set_NaN
 11381              	.LVL1304:
 11382 0b50 88E7     		b	.L916
 11383              	.LVL1305:
 11384              	.L1197:
2775:src/display.c **** 	      } else
 11385              		.loc 1 2775 5 is_stmt 0 view .LVU3705
 11386              	.LBE624:
 11387              	.LBE625:
 11388              	.LBE678:
2834:src/display.c **** 	  } else if (State2.alphas) {
 11389              		.loc 1 2834 6 is_stmt 1 view .LVU3706
2834:src/display.c **** 	  } else if (State2.alphas) {
 11390              		.loc 1 2834 48 is_stmt 0 view .LVU3707
 11391 0b52 501E     		subs	r0, r2, #1
 11392 0b54 0393     		str	r3, [sp, #12]
 11393 0b56 FFF7FEFF 		bl	get_reg_n
 11394              	.LVL1306:
 11395              	.LBB679:
 11396              	.LBI679:
3310:src/display.c **** 	int glen = *graphic++;
 11397              		.loc 1 3310 19 is_stmt 1 view .LVU3708
 11398              	.LBB680:
3311:src/display.c **** 	int i, j;
 11399              		.loc 1 3311 2 view .LVU3709
3319:src/display.c **** #endif
 11400              		.loc 1 3319 15 is_stmt 0 view .LVU3710
 11401 0b5a 644E     		ldr	r6, .L1212+24
3311:src/display.c **** 	int i, j;
 11402              		.loc 1 3311 6 view .LVU3711
 11403 0b5c 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11404              	.LVL1307:
3312:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11405              		.loc 1 3312 2 is_stmt 1 view .LVU3712
3319:src/display.c **** #endif
 11406              		.loc 1 3319 2 view .LVU3713
3319:src/display.c **** #endif
 11407              		.loc 1 3319 15 is_stmt 0 view .LVU3714
 11408 0b5e 0122     		movs	r2, #1
 11409 0b60 3270     		strb	r2, [r6]
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11410              		.loc 1 3321 2 is_stmt 1 view .LVU3715
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11411              		.loc 1 3321 5 is_stmt 0 view .LVU3716
 11412 0b62 39B3     		cbz	r1, .L960
3322:src/display.c **** 
ARM GAS  /tmp/ccpF0v4D.s 			page 326


 11413              		.loc 1 3322 2 is_stmt 1 view .LVU3717
 11414              	.LVL1308:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11415              		.loc 1 3324 2 view .LVU3718
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11416              		.loc 1 3324 12 view .LVU3719
 11417 0b64 8318     		adds	r3, r0, r2
 11418 0b66 0493     		str	r3, [sp, #16]
 11419 0b68 4A29     		cmp	r1, #74
 11420 0b6a D4BF     		ite	le
 11421 0b6c 5B18     		addle	r3, r3, r1
 11422 0b6e 4A33     		addgt	r3, r3, #74
 11423 0b70 0293     		str	r3, [sp, #8]
 11424 0b72 CDE90557 		strd	r5, r7, [sp, #20]
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11425              		.loc 1 3324 8 is_stmt 0 view .LVU3720
 11426 0b76 039B     		ldr	r3, [sp, #12]
 11427 0b78 0392     		str	r2, [sp, #12]
 11428 0b7a 1E46     		mov	r6, r3
 11429              	.LVL1309:
 11430              	.L961:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11431              		.loc 1 3325 14 is_stmt 1 view .LVU3721
 11432 0b7c 039B     		ldr	r3, [sp, #12]
 11433 0b7e 049F     		ldr	r7, [sp, #16]
 11434 0b80 03FA06F8 		lsl	r8, r3, r6
 11435 0b84 06F19405 		add	r5, r6, #148
 11436 0b88 06E0     		b	.L964
 11437              	.LVL1310:
 11438              	.L1201:
 11439              	.LBB681:
 11440              	.LBB682:
 340:src/display.c ****   else	clr_dot(n);
 11441              		.loc 1 340 11 is_stmt 0 view .LVU3722
 11442 0b8a FFF7FEFF 		bl	set_dot
 11443              	.LVL1311:
 11444              	.L963:
 340:src/display.c ****   else	clr_dot(n);
 11445              		.loc 1 340 11 view .LVU3723
 11446              	.LBE682:
 11447              	.LBE681:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11448              		.loc 1 3325 23 is_stmt 1 view .LVU3724
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11449              		.loc 1 3325 14 view .LVU3725
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11450              		.loc 1 3325 4 is_stmt 0 view .LVU3726
 11451 0b8e 029B     		ldr	r3, [sp, #8]
 11452 0b90 BB42     		cmp	r3, r7
 11453 0b92 05F10605 		add	r5, r5, #6
 11454 0b96 08D0     		beq	.L1200
 11455              	.LVL1312:
 11456              	.L964:
3330:src/display.c **** #endif
 11457              		.loc 1 3330 6 is_stmt 1 view .LVU3727
 11458              	.LBB685:
 11459              	.LBI681:
ARM GAS  /tmp/ccpF0v4D.s 			page 327


 339:src/display.c ****   if (on)	set_dot(n);
 11460              		.loc 1 339 6 view .LVU3728
 11461              	.LBB683:
 340:src/display.c ****   else	clr_dot(n);
 11462              		.loc 1 340 3 view .LVU3729
 340:src/display.c ****   else	clr_dot(n);
 11463              		.loc 1 340 11 view .LVU3730
 341:src/display.c **** }
 11464              		.loc 1 341 8 view .LVU3731
 11465              	.LBE683:
 11466              	.LBE685:
3330:src/display.c **** #endif
 11467              		.loc 1 3330 37 is_stmt 0 view .LVU3732
 11468 0b98 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11469              	.LVL1313:
 11470              	.LBB686:
 11471              	.LBB684:
 340:src/display.c ****   else	clr_dot(n);
 11472              		.loc 1 340 6 view .LVU3733
 11473 0b9c 13EA080F 		tst	r3, r8
 340:src/display.c ****   else	clr_dot(n);
 11474              		.loc 1 340 11 view .LVU3734
 11475 0ba0 2846     		mov	r0, r5
 340:src/display.c ****   else	clr_dot(n);
 11476              		.loc 1 340 6 view .LVU3735
 11477 0ba2 F2D1     		bne	.L1201
 341:src/display.c **** }
 11478              		.loc 1 341 8 view .LVU3736
 11479 0ba4 FFF7FEFF 		bl	clr_dot
 11480              	.LVL1314:
 11481 0ba8 F1E7     		b	.L963
 11482              	.LVL1315:
 11483              	.L1200:
 341:src/display.c **** }
 11484              		.loc 1 341 8 view .LVU3737
 11485              	.LBE684:
 11486              	.LBE686:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11487              		.loc 1 3324 17 is_stmt 1 view .LVU3738
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11488              		.loc 1 3324 18 is_stmt 0 view .LVU3739
 11489 0baa 0136     		adds	r6, r6, #1
 11490              	.LVL1316:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11491              		.loc 1 3324 12 is_stmt 1 view .LVU3740
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11492              		.loc 1 3324 2 is_stmt 0 view .LVU3741
 11493 0bac 062E     		cmp	r6, #6
 11494 0bae E5D1     		bne	.L961
 11495 0bb0 DDE90557 		ldrd	r5, r7, [sp, #20]
 11496              	.LVL1317:
 11497              	.L960:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11498              		.loc 1 3324 2 view .LVU3742
 11499              	.LBE680:
 11500              	.LBE679:
2884:src/display.c ****       nostk:
ARM GAS  /tmp/ccpF0v4D.s 			page 328


 11501              		.loc 1 2884 2 is_stmt 1 view .LVU3743
 11502 0bb4 FFF7FEFF 		bl	show_stack
 11503              	.LVL1318:
2886:src/display.c **** 	if (!skip) {
 11504              		.loc 1 2886 2 view .LVU3744
 11505 0bb8 FFF7FEFF 		bl	show_flags
 11506              	.LVL1319:
2887:src/display.c **** 	  if (State2.runmode) {
 11507              		.loc 1 2887 2 view .LVU3745
 11508 0bbc FFF763BA 		b	.L887
 11509              	.LVL1320:
 11510              	.L914:
 11511              	.LBB687:
 11512              	.LBB626:
2777:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11513              		.loc 1 2777 3 view .LVU3746
 11514 0bc0 17AF     		add	r7, sp, #92
 11515 0bc2 0EAA     		add	r2, sp, #56
 11516 0bc4 05F07F01 		and	r1, r5, #127
 11517 0bc8 3846     		mov	r0, r7
 11518 0bca FFF7FEFF 		bl	do_conv
 11519              	.LVL1321:
 11520 0bce 49E7     		b	.L916
 11521              	.LVL1322:
 11522              	.L967:
2777:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11523              		.loc 1 2777 3 is_stmt 0 view .LVU3747
 11524              	.LBE626:
 11525              	.LBE687:
2847:src/display.c **** 	      }
 11526              		.loc 1 2847 3 is_stmt 1 view .LVU3748
 11527 0bd0 20A8     		add	r0, sp, #128
 11528 0bd2 FFF7FEFF 		bl	set_status
 11529              	.LVL1323:
 11530 0bd6 8AE7     		b	.L968
 11531              	.LVL1324:
 11532              	.L1195:
 11533              	.LBB688:
 11534              	.LBB668:
 11535              	.LBB666:
2411:src/display.c **** 	    end = regK_idx;
 11536              		.loc 1 2411 6 view .LVU3749
2412:src/display.c **** 	    start = 3;
 11537              		.loc 1 2412 6 view .LVU3750
2413:src/display.c **** 	    group = 4;
 11538              		.loc 1 2413 6 view .LVU3751
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11539              		.loc 1 2414 6 view .LVU3752
2415:src/display.c **** 	  }
 11540              		.loc 1 2415 6 view .LVU3753
 11541 0bd8 4548     		ldr	r0, .L1212+28
 11542 0bda FFF7FEFF 		bl	set_status
 11543              	.LVL1325:
2413:src/display.c **** 	    group = 4;
 11544              		.loc 1 2413 12 is_stmt 0 view .LVU3754
 11545 0bde 4FF0030B 		mov	fp, #3
 11546              	.LVL1326:
ARM GAS  /tmp/ccpF0v4D.s 			page 329


2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11547              		.loc 1 2414 12 view .LVU3755
 11548 0be2 0423     		movs	r3, #4
2412:src/display.c **** 	    start = 3;
 11549              		.loc 1 2412 10 view .LVU3756
 11550 0be4 4FF06F08 		mov	r8, #111
2411:src/display.c **** 	    end = regK_idx;
 11551              		.loc 1 2411 11 view .LVU3757
 11552 0be8 6427     		movs	r7, #100
 11553              	.LVL1327:
2411:src/display.c **** 	    end = regK_idx;
 11554              		.loc 1 2411 11 view .LVU3758
 11555 0bea 6BE6     		b	.L932
 11556              	.LVL1328:
 11557              	.L1151:
2411:src/display.c **** 	    end = regK_idx;
 11558              		.loc 1 2411 11 view .LVU3759
 11559 0bec 079D     		ldr	r5, [sp, #28]
 11560              	.LVL1329:
 11561              	.L927:
2411:src/display.c **** 	    end = regK_idx;
 11562              		.loc 1 2411 11 view .LVU3760
 11563              	.LBE666:
2446:src/display.c **** 	pc = state_pc();
 11564              		.loc 1 2446 2 is_stmt 1 view .LVU3761
2447:src/display.c **** 	if (isXROM(pc))
 11565              		.loc 1 2447 2 view .LVU3762
2447:src/display.c **** 	if (isXROM(pc))
 11566              		.loc 1 2447 7 is_stmt 0 view .LVU3763
 11567 0bee DAF80030 		ldr	r3, [r10]
2447:src/display.c **** 	if (isXROM(pc))
 11568              		.loc 1 2447 5 view .LVU3764
 11569 0bf2 B3F8E077 		ldrh	r7, [r3, #2016]
 11570              	.LVL1330:
2448:src/display.c **** 	  pc = 1;
 11571              		.loc 1 2448 2 is_stmt 1 view .LVU3765
2448:src/display.c **** 	  pc = 1;
 11572              		.loc 1 2448 6 is_stmt 0 view .LVU3766
 11573 0bf6 BB0B     		lsrs	r3, r7, #14
2449:src/display.c **** 	for (n=i=0; i<4; i++) {
 11574              		.loc 1 2449 7 view .LVU3767
 11575 0bf8 032B     		cmp	r3, #3
 11576 0bfa 08BF     		it	eq
 11577 0bfc 0127     		moveq	r7, #1
 11578              	.LVL1331:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11579              		.loc 1 2450 2 is_stmt 1 view .LVU3768
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11580              		.loc 1 2450 14 view .LVU3769
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11581              		.loc 1 2450 8 is_stmt 0 view .LVU3770
 11582 0bfe 4FF0000A 		mov	r10, #0
 11583 0c02 6426     		movs	r6, #100
2446:src/display.c **** 	pc = state_pc();
 11584              		.loc 1 2446 4 view .LVU3771
 11585 0c04 4FF06C08 		mov	r8, #108
 11586              	.LVL1332:
ARM GAS  /tmp/ccpF0v4D.s 			page 330


 11587              	.L940:
2451:src/display.c **** 	    if (++n == 4) {
 11588              		.loc 1 2451 4 is_stmt 1 view .LVU3772
2451:src/display.c **** 	    if (++n == 4) {
 11589              		.loc 1 2451 8 is_stmt 0 view .LVU3773
 11590 0c08 0222     		movs	r2, #2
 11591 0c0a 3146     		mov	r1, r6
 11592 0c0c 3846     		mov	r0, r7
 11593 0c0e FFF7FEFF 		bl	find_label_from
 11594              	.LVL1333:
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11595              		.loc 1 2452 6 is_stmt 1 view .LVU3774
2451:src/display.c **** 	    if (++n == 4) {
 11596              		.loc 1 2451 7 is_stmt 0 view .LVU3775
 11597 0c12 58B1     		cbz	r0, .L938
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11598              		.loc 1 2452 9 view .LVU3776
 11599 0c14 0AF1010A 		add	r10, r10, #1
 11600              	.LVL1334:
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11601              		.loc 1 2456 8 is_stmt 1 view .LVU3777
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11602              		.loc 1 2452 9 is_stmt 0 view .LVU3778
 11603 0c18 BAF1040F 		cmp	r10, #4
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11604              		.loc 1 2456 8 view .LVU3779
 11605 0c1c A6F12301 		sub	r1, r6, #35
 11606 0c20 4046     		mov	r0, r8
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11607              		.loc 1 2452 9 view .LVU3780
 11608 0c22 07D0     		beq	.L1202
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11609              		.loc 1 2456 8 view .LVU3781
 11610 0c24 FFF7FEFF 		bl	set_dig
 11611              	.LVL1335:
2457:src/display.c **** 	    }
 11612              		.loc 1 2457 8 is_stmt 1 view .LVU3782
2457:src/display.c **** 	    }
 11613              		.loc 1 2457 10 is_stmt 0 view .LVU3783
 11614 0c28 08F10708 		add	r8, r8, #7
 11615              	.LVL1336:
 11616              	.L938:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11617              		.loc 1 2450 19 is_stmt 1 view .LVU3784
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11618              		.loc 1 2450 14 view .LVU3785
 11619 0c2c 0136     		adds	r6, r6, #1
 11620              	.LVL1337:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11621              		.loc 1 2450 2 is_stmt 0 view .LVU3786
 11622 0c2e 682E     		cmp	r6, #104
 11623 0c30 EAD1     		bne	.L940
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11624              		.loc 1 2450 2 view .LVU3787
 11625 0c32 2BE6     		b	.L1166
 11626              	.LVL1338:
 11627              	.L1202:
ARM GAS  /tmp/ccpF0v4D.s 			page 331


2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11628              		.loc 1 2453 8 is_stmt 1 view .LVU3788
 11629 0c34 4C21     		movs	r1, #76
 11630 0c36 7320     		movs	r0, #115
 11631              	.LVL1339:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11632              		.loc 1 2453 8 is_stmt 0 view .LVU3789
 11633 0c38 FFF7FEFF 		bl	set_dig
 11634              	.LVL1340:
2454:src/display.c **** 	    } else {
 11635              		.loc 1 2454 8 is_stmt 1 view .LVU3790
 11636 0c3c 4C21     		movs	r1, #76
 11637 0c3e 7A20     		movs	r0, #122
 11638 0c40 FFF7FEFF 		bl	set_dig
 11639              	.LVL1341:
 11640 0c44 F2E7     		b	.L938
 11641              	.LVL1342:
 11642              	.L1186:
2454:src/display.c **** 	    } else {
 11643              		.loc 1 2454 8 is_stmt 0 view .LVU3791
 11644              	.LBE668:
 11645              	.LBE688:
2821:src/display.c **** 	  skip = 1;
 11646              		.loc 1 2821 4 is_stmt 1 view .LVU3792
 11647              	.LBB689:
 11648              	.LBI689:
2496:src/display.c **** 	char buf[16], *bp;
 11649              		.loc 1 2496 19 view .LVU3793
 11650              	.LBB690:
2497:src/display.c **** 	int n = State2.digval;
 11651              		.loc 1 2497 2 view .LVU3794
2498:src/display.c **** 	
 11652              		.loc 1 2498 2 view .LVU3795
2498:src/display.c **** 	
 11653              		.loc 1 2498 6 is_stmt 0 view .LVU3796
 11654 0c46 B4F808B0 		ldrh	fp, [r4, #8]
 11655              	.LVL1343:
2505:src/display.c **** 	  n;
 11656              		.loc 1 2505 2 is_stmt 1 view .LVU3797
2505:src/display.c **** 	  n;
 11657              		.loc 1 2505 54 is_stmt 0 view .LVU3798
 11658 0c4a CA07     		lsls	r2, r1, #31
 11659 0c4c 4CBF     		ite	mi
 11660 0c4e 0BF17008 		addmi	r8, fp, #112
2498:src/display.c **** 	
 11661              		.loc 1 2498 6 view .LVU3799
 11662 0c52 D846     		movpl	r8, fp
 11663              	.LVL1344:
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11664              		.loc 1 2509 2 is_stmt 1 view .LVU3800
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11665              		.loc 1 2509 5 is_stmt 0 view .LVU3801
 11666 0c54 11F00401 		ands	r1, r1, #4
 11667 0c58 20D0     		beq	.L948
2510:src/display.c **** 	}
 11668              		.loc 1 2510 4 is_stmt 1 view .LVU3802
2510:src/display.c **** 	}
ARM GAS  /tmp/ccpF0v4D.s 			page 332


 11669              		.loc 1 2510 15 is_stmt 0 view .LVU3803
 11670 0c5a 17A9     		add	r1, sp, #92
 11671 0c5c 4046     		mov	r0, r8
 11672 0c5e FFF7FEFF 		bl	alpha_rcl_s
 11673              	.LVL1345:
2510:src/display.c **** 	}
 11674              		.loc 1 2510 4 view .LVU3804
 11675 0c62 FFF7FEFF 		bl	set_status
 11676              	.LVL1346:
 11677              	.L949:
2532:src/display.c ****       }
 11678              		.loc 1 2532 2 is_stmt 1 view .LVU3805
 11679 0c66 4046     		mov	r0, r8
 11680 0c68 0021     		movs	r1, #0
 11681 0c6a FFF7FEFF 		bl	format_reg
 11682              	.LVL1347:
2532:src/display.c ****       }
 11683              		.loc 1 2532 2 is_stmt 0 view .LVU3806
 11684              	.LBE690:
 11685              	.LBE689:
2822:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 11686              		.loc 1 2822 4 is_stmt 1 view .LVU3807
2823:src/display.c **** 	    annunciators();
 11687              		.loc 1 2823 4 view .LVU3808
2823:src/display.c **** 	    annunciators();
 11688              		.loc 1 2823 7 is_stmt 0 view .LVU3809
 11689 0c6e 96B9     		cbnz	r6, .L955
2823:src/display.c **** 	    annunciators();
 11690              		.loc 1 2823 25 discriminator 1 view .LVU3810
 11691 0c70 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 11692 0c72 012B     		cmp	r3, #1
 11693 0c74 09D0     		beq	.L1203
 11694              	.L956:
2884:src/display.c ****       nostk:
 11695              		.loc 1 2884 2 is_stmt 1 view .LVU3811
 11696 0c76 FFF7FEFF 		bl	show_stack
 11697              	.LVL1348:
2886:src/display.c **** 	if (!skip) {
 11698              		.loc 1 2886 2 view .LVU3812
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11699              		.loc 1 2594 6 is_stmt 0 view .LVU3813
 11700 0c7a 0025     		movs	r5, #0
2886:src/display.c **** 	if (!skip) {
 11701              		.loc 1 2886 2 view .LVU3814
 11702 0c7c FFF7FEFF 		bl	show_flags
 11703              	.LVL1349:
2887:src/display.c **** 	  if (State2.runmode) {
 11704              		.loc 1 2887 2 is_stmt 1 view .LVU3815
 11705 0c80 AFE5     		b	.L920
 11706              	.LVL1350:
 11707              	.L971:
2878:src/display.c **** 	  set_dot(STO_annun);
 11708              		.loc 1 2878 6 view .LVU3816
 11709 0c82 1C48     		ldr	r0, .L1212+32
 11710              	.LVL1351:
2878:src/display.c **** 	  set_dot(STO_annun);
 11711              		.loc 1 2878 6 is_stmt 0 view .LVU3817
ARM GAS  /tmp/ccpF0v4D.s 			page 333


 11712 0c84 FFF7FEFF 		bl	set_status
 11713              	.LVL1352:
2878:src/display.c **** 	  set_dot(STO_annun);
 11714              		.loc 1 2878 6 view .LVU3818
 11715 0c88 0AE7     		b	.L972
 11716              	.LVL1353:
 11717              	.L1203:
2823:src/display.c **** 	    annunciators();
 11718              		.loc 1 2823 56 discriminator 2 view .LVU3819
 11719 0c8a DAF80030 		ldr	r3, [r10]
 11720 0c8e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11721 0c92 DE07     		lsls	r6, r3, #31
 11722 0c94 EFD5     		bpl	.L956
 11723              	.L955:
2824:src/display.c **** 	  }
 11724              		.loc 1 2824 6 is_stmt 1 view .LVU3820
 11725 0c96 FFF7FEFF 		bl	annunciators
 11726              	.LVL1354:
 11727 0c9a F7E5     		b	.L1166
 11728              	.LVL1355:
 11729              	.L948:
 11730              	.LBB693:
 11731              	.LBB691:
2513:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11732              		.loc 1 2513 4 view .LVU3821
 11733 0c9c 17AF     		add	r7, sp, #92
 11734 0c9e 1022     		movs	r2, #16
 11735 0ca0 3846     		mov	r0, r7
 11736 0ca2 FFF7FEFF 		bl	xset
 11737              	.LVL1356:
2517:src/display.c **** #endif
 11738              		.loc 1 2517 4 view .LVU3822
2517:src/display.c **** #endif
 11739              		.loc 1 2517 9 is_stmt 0 view .LVU3823
 11740 0ca6 1449     		ldr	r1, .L1212+36
 11741 0ca8 3846     		mov	r0, r7
 11742 0caa FFF7FEFF 		bl	scopy_spc
 11743              	.LVL1357:
2519:src/display.c **** 	    *bp++ = '.';
 11744              		.loc 1 2519 8 view .LVU3824
 11745 0cae A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11746              	.LVL1358:
2519:src/display.c **** 	    *bp++ = '.';
 11747              		.loc 1 2519 4 is_stmt 1 view .LVU3825
2519:src/display.c **** 	    *bp++ = '.';
 11748              		.loc 1 2519 7 is_stmt 0 view .LVU3826
 11749 0cb0 DB07     		lsls	r3, r3, #31
 11750 0cb2 40F19E80 		bpl	.L950
2520:src/display.c **** 	    if (n >= 100) {
 11751              		.loc 1 2520 6 is_stmt 1 view .LVU3827
 11752              	.LVL1359:
2520:src/display.c **** 	    if (n >= 100) {
 11753              		.loc 1 2520 12 is_stmt 0 view .LVU3828
 11754 0cb6 2E23     		movs	r3, #46
2521:src/display.c **** 	      *bp++ = '1';
 11755              		.loc 1 2521 9 view .LVU3829
 11756 0cb8 BBF1630F 		cmp	fp, #99
ARM GAS  /tmp/ccpF0v4D.s 			page 334


2520:src/display.c **** 	    if (n >= 100) {
 11757              		.loc 1 2520 12 view .LVU3830
 11758 0cbc 0370     		strb	r3, [r0]
2521:src/display.c **** 	      *bp++ = '1';
 11759              		.loc 1 2521 6 is_stmt 1 view .LVU3831
2521:src/display.c **** 	      *bp++ = '1';
 11760              		.loc 1 2521 9 is_stmt 0 view .LVU3832
 11761 0cbe 00F39380 		bgt	.L951
2520:src/display.c **** 	    if (n >= 100) {
 11762              		.loc 1 2520 9 view .LVU3833
 11763 0cc2 0130     		adds	r0, r0, #1
 11764              	.LVL1360:
 11765              	.L952:
2527:src/display.c **** 	  else
 11766              		.loc 1 2527 6 is_stmt 1 view .LVU3834
2527:src/display.c **** 	  else
 11767              		.loc 1 2527 11 is_stmt 0 view .LVU3835
 11768 0cc4 5946     		mov	r1, fp
 11769 0cc6 0222     		movs	r2, #2
 11770 0cc8 FFF7FEFF 		bl	num_arg_0
 11771              	.LVL1361:
 11772              	.L954:
2530:src/display.c **** 	}
 11773              		.loc 1 2530 4 is_stmt 1 view .LVU3836
 11774 0ccc 3846     		mov	r0, r7
 11775 0cce FFF7FEFF 		bl	set_status
 11776              	.LVL1362:
 11777 0cd2 C8E7     		b	.L949
 11778              	.L1213:
 11779              		.align	2
 11780              	.L1212:
 11781 0cd4 00000000 		.word	DispPlot
 11782 0cd8 00000000 		.word	StackBase
 11783 0cdc 00000000 		.word	monfuncs
 11784 0ce0 00000000 		.word	Ctx
 11785 0ce4 00000000 		.word	DispMsg
 11786 0ce8 40000000 		.word	.LC28
 11787 0cec 00000000 		.word	forceDispPlot
 11788 0cf0 7C000000 		.word	.LC35
 11789 0cf4 A8000000 		.word	.LC39
 11790 0cf8 A0000000 		.word	.LC38
 11791              	.LVL1363:
 11792              	.L1194:
2530:src/display.c **** 	}
 11793              		.loc 1 2530 4 is_stmt 0 view .LVU3837
 11794              	.LBE691:
 11795              	.LBE693:
 11796              	.LBB694:
 11797              	.LBB669:
 11798              	.LBB667:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11799              		.loc 1 2401 6 is_stmt 1 view .LVU3838
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11800              		.loc 1 2401 11 is_stmt 0 view .LVU3839
 11801 0cfc 0A26     		movs	r6, #10
 11802 0cfe 06FB03F7 		mul	r7, r6, r3
 11803              	.LVL1364:
ARM GAS  /tmp/ccpF0v4D.s 			page 335


2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11804              		.loc 1 2402 6 is_stmt 1 view .LVU3840
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11805              		.loc 1 2402 28 is_stmt 0 view .LVU3841
 11806 0d02 462F     		cmp	r7, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11807              		.loc 1 2403 10 view .LVU3842
 11808 0d04 4F49     		ldr	r1, .L1214
 11809 0d06 17A8     		add	r0, sp, #92
 11810              	.LVL1365:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11811              		.loc 1 2402 28 view .LVU3843
 11812 0d08 B846     		mov	r8, r7
 11813 0d0a A8BF     		it	ge
 11814 0d0c 4FF04608 		movge	r8, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11815              		.loc 1 2403 10 view .LVU3844
 11816 0d10 FFF7FEFF 		bl	scopy
 11817              	.LVL1366:
2404:src/display.c **** 	    *p++ = '-';
 11818              		.loc 1 2404 10 view .LVU3845
 11819 0d14 3946     		mov	r1, r7
 11820 0d16 0222     		movs	r2, #2
 11821 0d18 FFF7FEFF 		bl	num_arg_0
 11822              	.LVL1367:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11823              		.loc 1 2402 10 view .LVU3846
 11824 0d1c 08F11D08 		add	r8, r8, #29
 11825              	.LVL1368:
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11826              		.loc 1 2403 6 is_stmt 1 view .LVU3847
2404:src/display.c **** 	    *p++ = '-';
 11827              		.loc 1 2404 6 view .LVU3848
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11828              		.loc 1 2405 6 view .LVU3849
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11829              		.loc 1 2405 11 is_stmt 0 view .LVU3850
 11830 0d20 2D23     		movs	r3, #45
 11831 0d22 00F8013B 		strb	r3, [r0], #1
 11832              	.LVL1369:
2406:src/display.c **** 	    *p = '\0';
 11833              		.loc 1 2406 6 is_stmt 1 view .LVU3851
2406:src/display.c **** 	    *p = '\0';
 11834              		.loc 1 2406 10 is_stmt 0 view .LVU3852
 11835 0d26 4146     		mov	r1, r8
 11836 0d28 0222     		movs	r2, #2
 11837 0d2a FFF7FEFF 		bl	num_arg_0
 11838              	.LVL1370:
2406:src/display.c **** 	    *p = '\0';
 11839              		.loc 1 2406 10 view .LVU3853
 11840 0d2e 0246     		mov	r2, r0
 11841              	.LVL1371:
2407:src/display.c **** 	    set_status(buf);
 11842              		.loc 1 2407 6 is_stmt 1 view .LVU3854
2407:src/display.c **** 	    set_status(buf);
 11843              		.loc 1 2407 9 is_stmt 0 view .LVU3855
 11844 0d30 4FF0000B 		mov	fp, #0
ARM GAS  /tmp/ccpF0v4D.s 			page 336


 11845              	.LVL1372:
2408:src/display.c **** 	  }
 11846              		.loc 1 2408 6 view .LVU3856
 11847 0d34 17A8     		add	r0, sp, #92
 11848              	.LVL1373:
2407:src/display.c **** 	    set_status(buf);
 11849              		.loc 1 2407 9 view .LVU3857
 11850 0d36 82F800B0 		strb	fp, [r2]
2408:src/display.c **** 	  }
 11851              		.loc 1 2408 6 is_stmt 1 view .LVU3858
2397:src/display.c **** 	  int start = 0;
 11852              		.loc 1 2397 8 is_stmt 0 view .LVU3859
 11853 0d3a 0196     		str	r6, [sp, #4]
2408:src/display.c **** 	  }
 11854              		.loc 1 2408 6 view .LVU3860
 11855 0d3c FFF7FEFF 		bl	set_status
 11856              	.LVL1374:
2408:src/display.c **** 	  }
 11857              		.loc 1 2408 6 view .LVU3861
 11858 0d40 019B     		ldr	r3, [sp, #4]
 11859 0d42 BFE5     		b	.L932
 11860              	.LVL1375:
 11861              	.L1193:
2408:src/display.c **** 	  }
 11862              		.loc 1 2408 6 view .LVU3862
 11863              	.LBE667:
2380:src/display.c **** 	  if (SizeStatRegs)
 11864              		.loc 1 2380 4 is_stmt 1 view .LVU3863
2380:src/display.c **** 	  if (SizeStatRegs)
 11865              		.loc 1 2380 8 is_stmt 0 view .LVU3864
 11866 0d44 17AF     		add	r7, sp, #92
 11867              	.LVL1376:
2380:src/display.c **** 	  if (SizeStatRegs)
 11868              		.loc 1 2380 8 view .LVU3865
 11869 0d46 4049     		ldr	r1, .L1214+4
 11870 0d48 3846     		mov	r0, r7
 11871 0d4a FFF7FEFF 		bl	scopy
 11872              	.LVL1377:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11873              		.loc 1 2381 8 view .LVU3866
 11874 0d4e 3F4A     		ldr	r2, .L1214+8
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11875              		.loc 1 2381 7 view .LVU3867
 11876 0d50 1268     		ldr	r2, [r2]
2380:src/display.c **** 	  if (SizeStatRegs)
 11877              		.loc 1 2380 8 view .LVU3868
 11878 0d52 0346     		mov	r3, r0
 11879              	.LVL1378:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11880              		.loc 1 2381 4 is_stmt 1 view .LVU3869
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11881              		.loc 1 2381 7 is_stmt 0 view .LVU3870
 11882 0d54 002A     		cmp	r2, #0
 11883 0d56 70D1     		bne	.L1204
 11884              	.L929:
2383:src/display.c **** 	  set_status(buf);
 11885              		.loc 1 2383 4 is_stmt 1 view .LVU3871
ARM GAS  /tmp/ccpF0v4D.s 			page 337


2383:src/display.c **** 	  set_status(buf);
 11886              		.loc 1 2383 7 is_stmt 0 view .LVU3872
 11887 0d58 0022     		movs	r2, #0
 11888 0d5a 1A70     		strb	r2, [r3]
2384:src/display.c **** 
 11889              		.loc 1 2384 4 is_stmt 1 view .LVU3873
 11890 0d5c 3846     		mov	r0, r7
 11891              	.LVL1379:
2384:src/display.c **** 
 11892              		.loc 1 2384 4 is_stmt 0 view .LVU3874
 11893 0d5e FFF7FEFF 		bl	set_status
 11894              	.LVL1380:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11895              		.loc 1 2387 4 is_stmt 1 view .LVU3875
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11896              		.loc 1 2387 8 is_stmt 0 view .LVU3876
 11897 0d62 FFF7FEFF 		bl	global_regs
 11898              	.LVL1381:
 11899 0d66 0146     		mov	r1, r0
 11900 0d68 3846     		mov	r0, r7
 11901 0d6a FFF7FEFF 		bl	num_arg
 11902              	.LVL1382:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11903              		.loc 1 2388 8 view .LVU3877
 11904 0d6e DAF80020 		ldr	r2, [r10]
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11905              		.loc 1 2388 7 view .LVU3878
 11906 0d72 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11907 0d76 002A     		cmp	r2, #0
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11908              		.loc 1 2387 8 view .LVU3879
 11909 0d78 0346     		mov	r3, r0
 11910              	.LVL1383:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11911              		.loc 1 2388 4 is_stmt 1 view .LVU3880
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11912              		.loc 1 2388 7 is_stmt 0 view .LVU3881
 11913 0d7a 52DB     		blt	.L1205
 11914              	.L930:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11915              		.loc 1 2392 4 is_stmt 1 view .LVU3882
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11916              		.loc 1 2392 7 is_stmt 0 view .LVU3883
 11917 0d7c 0021     		movs	r1, #0
2393:src/display.c **** 	} else {
 11918              		.loc 1 2393 4 view .LVU3884
 11919 0d7e 3846     		mov	r0, r7
 11920              	.LVL1384:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11921              		.loc 1 2392 7 view .LVU3885
 11922 0d80 1970     		strb	r1, [r3]
2393:src/display.c **** 	} else {
 11923              		.loc 1 2393 4 is_stmt 1 view .LVU3886
 11924 0d82 FFF7FEFF 		bl	set_digits_string
 11925              	.LVL1385:
2393:src/display.c **** 	} else {
 11926              		.loc 1 2393 4 is_stmt 0 view .LVU3887
ARM GAS  /tmp/ccpF0v4D.s 			page 338


 11927 0d86 32E7     		b	.L927
 11928              	.LVL1386:
 11929              	.L1192:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11930              		.loc 1 2371 4 is_stmt 1 view .LVU3888
 11931 0d88 3148     		ldr	r0, .L1214+12
 11932 0d8a FFF7FEFF 		bl	set_status
 11933              	.LVL1387:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11934              		.loc 1 2372 4 view .LVU3889
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11935              		.loc 1 2372 21 is_stmt 0 view .LVU3890
 11936 0d8e FFF7FEFF 		bl	free_mem
 11937              	.LVL1388:
 11938 0d92 0146     		mov	r1, r0
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11939              		.loc 1 2372 8 view .LVU3891
 11940 0d94 17A8     		add	r0, sp, #92
 11941              	.LVL1389:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11942              		.loc 1 2372 8 view .LVU3892
 11943 0d96 FFF7FEFF 		bl	num_arg
 11944              	.LVL1390:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11945              		.loc 1 2373 4 is_stmt 1 view .LVU3893
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11946              		.loc 1 2373 8 is_stmt 0 view .LVU3894
 11947 0d9a 2E49     		ldr	r1, .L1214+16
 11948 0d9c FFF7FEFF 		bl	scopy
 11949              	.LVL1391:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11950              		.loc 1 2373 8 view .LVU3895
 11951 0da0 0646     		mov	r6, r0
 11952              	.LVL1392:
2374:src/display.c **** 	  *p = '\0';
 11953              		.loc 1 2374 4 is_stmt 1 view .LVU3896
2374:src/display.c **** 	  *p = '\0';
 11954              		.loc 1 2374 19 is_stmt 0 view .LVU3897
 11955 0da2 FFF7FEFF 		bl	free_flash
 11956              	.LVL1393:
2374:src/display.c **** 	  *p = '\0';
 11957              		.loc 1 2374 19 view .LVU3898
 11958 0da6 0146     		mov	r1, r0
2374:src/display.c **** 	  *p = '\0';
 11959              		.loc 1 2374 8 view .LVU3899
 11960 0da8 3046     		mov	r0, r6
 11961 0daa FFF7FEFF 		bl	num_arg
 11962              	.LVL1394:
 11963 0dae 0346     		mov	r3, r0
 11964              	.LVL1395:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11965              		.loc 1 2375 4 is_stmt 1 view .LVU3900
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11966              		.loc 1 2375 7 is_stmt 0 view .LVU3901
 11967 0db0 0021     		movs	r1, #0
2376:src/display.c **** 	}
 11968              		.loc 1 2376 4 view .LVU3902
ARM GAS  /tmp/ccpF0v4D.s 			page 339


 11969 0db2 17A8     		add	r0, sp, #92
 11970              	.LVL1396:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11971              		.loc 1 2375 7 view .LVU3903
 11972 0db4 1970     		strb	r1, [r3]
2376:src/display.c **** 	}
 11973              		.loc 1 2376 4 is_stmt 1 view .LVU3904
 11974 0db6 FFF7FEFF 		bl	set_digits_string
 11975              	.LVL1397:
2376:src/display.c **** 	}
 11976              		.loc 1 2376 4 is_stmt 0 view .LVU3905
 11977 0dba 18E7     		b	.L927
 11978              	.LVL1398:
 11979              	.L1191:
2376:src/display.c **** 	}
 11980              		.loc 1 2376 4 view .LVU3906
 11981              	.LBE669:
 11982              	.LBE694:
 11983              	.LBB695:
 11984              	.LBB632:
2479:src/display.c **** 	  if (lblpc != pc) {
 11985              		.loc 1 2479 4 is_stmt 1 view .LVU3907
2479:src/display.c **** 	  if (lblpc != pc) {
 11986              		.loc 1 2479 12 is_stmt 0 view .LVU3908
 11987 0dbc 4046     		mov	r0, r8
 11988 0dbe 3946     		mov	r1, r7
 11989 0dc0 FFF7FEFF 		bl	findmultilbl
 11990              	.LVL1399:
2479:src/display.c **** 	  if (lblpc != pc) {
 11991              		.loc 1 2479 10 view .LVU3909
 11992 0dc4 86B2     		uxth	r6, r0
 11993              	.LVL1400:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11994              		.loc 1 2480 4 is_stmt 1 view .LVU3910
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11995              		.loc 1 2480 7 is_stmt 0 view .LVU3911
 11996 0dc6 B345     		cmp	fp, r6
2479:src/display.c **** 	  if (lblpc != pc) {
 11997              		.loc 1 2479 12 view .LVU3912
 11998 0dc8 8046     		mov	r8, r0
 11999              	.LVL1401:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12000              		.loc 1 2480 7 view .LVU3913
 12001 0dca 3FF45FAD 		beq	.L1166
2481:src/display.c **** 	    n = nLIB(lblpc);
 12002              		.loc 1 2481 6 is_stmt 1 view .LVU3914
 12003 0dce 2248     		ldr	r0, .L1214+20
 12004 0dd0 3F21     		movs	r1, #63
 12005 0dd2 FFF7FEFF 		bl	set_digits_string
 12006              	.LVL1402:
2482:src/display.c **** 	    if (n == REGION_RAM)
 12007              		.loc 1 2482 6 view .LVU3915
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12008              		.loc 1 2483 6 view .LVU3916
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12009              		.loc 1 2483 9 is_stmt 0 view .LVU3917
 12010 0dd6 B60B     		lsrs	r6, r6, #14
ARM GAS  /tmp/ccpF0v4D.s 			page 340


 12011              	.LVL1403:
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12012              		.loc 1 2483 9 view .LVU3918
 12013 0dd8 15D1     		bne	.L945
2484:src/display.c **** 	    else {
 12014              		.loc 1 2484 8 is_stmt 1 view .LVU3919
 12015 0dda 3246     		mov	r2, r6
 12016 0ddc 1FFA88F0 		uxth	r0, r8
 12017 0de0 0121     		movs	r1, #1
 12018 0de2 FFF7FEFF 		bl	set_exp
 12019              	.LVL1404:
 12020 0de6 51E5     		b	.L1166
 12021              	.LVL1405:
 12022              	.L951:
2484:src/display.c **** 	    else {
 12023              		.loc 1 2484 8 is_stmt 0 view .LVU3920
 12024              	.LBE632:
 12025              	.LBE695:
 12026              	.LBB696:
 12027              	.LBB692:
2522:src/display.c **** 	      n -= 100;
 12028              		.loc 1 2522 8 is_stmt 1 view .LVU3921
2522:src/display.c **** 	      n -= 100;
 12029              		.loc 1 2522 14 is_stmt 0 view .LVU3922
 12030 0de8 3123     		movs	r3, #49
 12031 0dea 4370     		strb	r3, [r0, #1]
2523:src/display.c **** 	    }
 12032              		.loc 1 2523 8 is_stmt 1 view .LVU3923
2523:src/display.c **** 	    }
 12033              		.loc 1 2523 10 is_stmt 0 view .LVU3924
 12034 0dec ABF1640B 		sub	fp, fp, #100
 12035              	.LVL1406:
2522:src/display.c **** 	      n -= 100;
 12036              		.loc 1 2522 11 view .LVU3925
 12037 0df0 0230     		adds	r0, r0, #2
 12038              	.LVL1407:
 12039              	.L950:
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12040              		.loc 1 2526 4 is_stmt 1 view .LVU3926
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12041              		.loc 1 2526 7 is_stmt 0 view .LVU3927
 12042 0df2 BBF1630F 		cmp	fp, #99
 12043 0df6 7FF765AF 		ble	.L952
2529:src/display.c **** 	  set_status(buf);
 12044              		.loc 1 2529 6 is_stmt 1 view .LVU3928
 12045              	.LVL1408:
2529:src/display.c **** 	  set_status(buf);
 12046              		.loc 1 2529 22 is_stmt 0 view .LVU3929
 12047 0dfa 184B     		ldr	r3, .L1214+24
 12048 0dfc 5B44     		add	r3, r3, fp
2529:src/display.c **** 	  set_status(buf);
 12049              		.loc 1 2529 12 view .LVU3930
 12050 0dfe 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12051 0e02 0370     		strb	r3, [r0]
 12052 0e04 62E7     		b	.L954
 12053              	.LVL1409:
 12054              	.L945:
ARM GAS  /tmp/ccpF0v4D.s 			page 341


2529:src/display.c **** 	  set_status(buf);
 12055              		.loc 1 2529 12 view .LVU3931
 12056              	.LBE692:
 12057              	.LBE696:
 12058              	.LBB697:
 12059              	.LBB633:
2486:src/display.c **** #ifndef REALBUILD
 12060              		.loc 1 2486 8 is_stmt 1 view .LVU3932
2486:src/display.c **** #ifndef REALBUILD
 12061              		.loc 1 2486 37 is_stmt 0 view .LVU3933
 12062 0e06 06EB8600 		add	r0, r6, r6, lsl #2
2486:src/display.c **** #ifndef REALBUILD
 12063              		.loc 1 2486 8 view .LVU3934
 12064 0e0a 3946     		mov	r1, r7
 12065 0e0c 5044     		add	r0, r0, r10
 12066 0e0e FFF7FEFF 		bl	set_exp_digits_string
 12067              	.LVL1410:
2488:src/display.c **** #endif
 12068              		.loc 1 2488 8 is_stmt 1 view .LVU3935
 12069 0e12 134B     		ldr	r3, .L1214+28
 12070 0e14 1348     		ldr	r0, .L1214+32
2488:src/display.c **** #endif
 12071              		.loc 1 2488 47 is_stmt 0 view .LVU3936
 12072 0e16 0A21     		movs	r1, #10
2488:src/display.c **** #endif
 12073              		.loc 1 2488 8 view .LVU3937
 12074 0e18 01FB0631 		mla	r1, r1, r6, r3
 12075 0e1c FFF7FEFF 		bl	scopy
 12076              	.LVL1411:
2488:src/display.c **** #endif
 12077              		.loc 1 2488 8 view .LVU3938
 12078              	.LBE633:
 12079              	.LBE697:
2884:src/display.c ****       nostk:
 12080              		.loc 1 2884 2 is_stmt 1 view .LVU3939
 12081 0e20 34E5     		b	.L1166
 12082              	.LVL1412:
 12083              	.L1205:
 12084              	.LBB698:
 12085              	.LBB670:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 12086              		.loc 1 2389 6 view .LVU3940
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 12087              		.loc 1 2389 10 is_stmt 0 view .LVU3941
 12088 0e22 1149     		ldr	r1, .L1214+36
 12089 0e24 FFF7FEFF 		bl	scopy
 12090              	.LVL1413:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 12091              		.loc 1 2389 10 view .LVU3942
 12092 0e28 0646     		mov	r6, r0
 12093              	.LVL1414:
2390:src/display.c **** 	  }
 12094              		.loc 1 2390 6 is_stmt 1 view .LVU3943
2390:src/display.c **** 	  }
 12095              		.loc 1 2390 21 is_stmt 0 view .LVU3944
 12096 0e2a FFF7FEFF 		bl	local_regs
 12097              	.LVL1415:
ARM GAS  /tmp/ccpF0v4D.s 			page 342


2390:src/display.c **** 	  }
 12098              		.loc 1 2390 21 view .LVU3945
 12099 0e2e 0146     		mov	r1, r0
2390:src/display.c **** 	  }
 12100              		.loc 1 2390 10 view .LVU3946
 12101 0e30 3046     		mov	r0, r6
 12102 0e32 FFF7FEFF 		bl	num_arg
 12103              	.LVL1416:
 12104 0e36 0346     		mov	r3, r0
 12105              	.LVL1417:
2390:src/display.c **** 	  }
 12106              		.loc 1 2390 10 view .LVU3947
 12107 0e38 A0E7     		b	.L930
 12108              	.L1204:
2382:src/display.c **** 	  *p = '\0';
 12109              		.loc 1 2382 6 is_stmt 1 view .LVU3948
2382:src/display.c **** 	  *p = '\0';
 12110              		.loc 1 2382 10 is_stmt 0 view .LVU3949
 12111 0e3a 0C49     		ldr	r1, .L1214+40
 12112 0e3c FFF7FEFF 		bl	scopy
 12113              	.LVL1418:
2382:src/display.c **** 	  *p = '\0';
 12114              		.loc 1 2382 10 view .LVU3950
 12115 0e40 0346     		mov	r3, r0
 12116              	.LVL1419:
2382:src/display.c **** 	  *p = '\0';
 12117              		.loc 1 2382 10 view .LVU3951
 12118 0e42 89E7     		b	.L929
 12119              	.L1215:
 12120              		.align	2
 12121              	.L1214:
 12122 0e44 78000000 		.word	.LC34
 12123 0e48 5C000000 		.word	.LC31
 12124 0e4c 00000000 		.word	SizeStatRegs
 12125 0e50 4C000000 		.word	.LC29
 12126 0e54 54000000 		.word	.LC30
 12127 0e58 98000000 		.word	.LC37
 12128 0e5c BC000000 		.word	.LC26
 12129 0e60 00000000 		.word	.LANCHOR23
 12130 0e64 00000000 		.word	LastDisplayedNumber
 12131 0e68 6C000000 		.word	.LC33
 12132 0e6c 64000000 		.word	.LC32
 12133              	.LBE670:
 12134              	.LBE698:
 12135              		.cfi_endproc
 12136              	.LFE34:
 12138              		.section	.text.frozen_display,"ax",%progbits
 12139              		.align	1
 12140              		.p2align 2,,3
 12141              		.global	frozen_display
 12142              		.syntax unified
 12143              		.thumb
 12144              		.thumb_func
 12145              		.fpu fpv4-sp-d16
 12147              	frozen_display:
 12148              	.LFB35:
3304:src/display.c **** 	State2.disp_freeze = 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 343


 12149              		.loc 1 3304 7 is_stmt 1 view -0
 12150              		.cfi_startproc
 12151              		@ args = 0, pretend = 0, frame = 0
 12152              		@ frame_needed = 0, uses_anonymous_args = 0
3305:src/display.c **** 	display();
 12153              		.loc 1 3305 2 view .LVU3953
3304:src/display.c **** 	State2.disp_freeze = 0;
 12154              		.loc 1 3304 7 is_stmt 0 view .LVU3954
 12155 0000 10B5     		push	{r4, lr}
 12156              		.cfi_def_cfa_offset 8
 12157              		.cfi_offset 4, -8
 12158              		.cfi_offset 14, -4
3305:src/display.c **** 	display();
 12159              		.loc 1 3305 21 view .LVU3955
 12160 0002 064C     		ldr	r4, .L1218
 12161 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12162 0006 6FF30413 		bfc	r3, #4, #1
 12163 000a E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 12164              		.loc 1 3306 2 is_stmt 1 view .LVU3956
 12165 000c FFF7FEFF 		bl	display
 12166              	.LVL1420:
3307:src/display.c ****       }
 12167              		.loc 1 3307 2 view .LVU3957
3307:src/display.c ****       }
 12168              		.loc 1 3307 21 is_stmt 0 view .LVU3958
 12169 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12170 0012 43F01003 		orr	r3, r3, #16
 12171 0016 E375     		strb	r3, [r4, #23]
3308:src/display.c **** 
 12172              		.loc 1 3308 7 view .LVU3959
 12173 0018 10BD     		pop	{r4, pc}
 12174              	.L1219:
 12175 001a 00BF     		.align	2
 12176              	.L1218:
 12177 001c 00000000 		.word	StateWhileOn
 12178              		.cfi_endproc
 12179              	.LFE35:
 12181              		.section	.text.message,"ax",%progbits
 12182              		.align	1
 12183              		.p2align 2,,3
 12184              		.global	message
 12185              		.syntax unified
 12186              		.thumb
 12187              		.thumb_func
 12188              		.fpu fpv4-sp-d16
 12190              	message:
 12191              	.LVL1421:
 12192              	.LFB46:
3525:src/display.c **** 	State2.disp_freeze = 0;
 12193              		.loc 1 3525 7 is_stmt 1 view -0
 12194              		.cfi_startproc
 12195              		@ args = 0, pretend = 0, frame = 0
 12196              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	State2.disp_small = 0;
 12197              		.loc 1 3526 2 view .LVU3961
3527:src/display.c **** 	WasDataEntry = 0;
ARM GAS  /tmp/ccpF0v4D.s 			page 344


 12198              		.loc 1 3527 2 view .LVU3962
3527:src/display.c **** 	WasDataEntry = 0;
 12199              		.loc 1 3527 20 is_stmt 0 view .LVU3963
 12200 0000 174A     		ldr	r2, .L1230
3525:src/display.c **** 	State2.disp_freeze = 0;
 12201              		.loc 1 3525 7 view .LVU3964
 12202 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12203              		.cfi_def_cfa_offset 24
 12204              		.cfi_offset 3, -24
 12205              		.cfi_offset 4, -20
 12206              		.cfi_offset 5, -16
 12207              		.cfi_offset 6, -12
 12208              		.cfi_offset 7, -8
 12209              		.cfi_offset 14, -4
3527:src/display.c **** 	WasDataEntry = 0;
 12210              		.loc 1 3527 20 view .LVU3965
 12211 0004 D38A     		ldrh	r3, [r2, #22]
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12212              		.loc 1 3528 15 view .LVU3966
 12213 0006 174E     		ldr	r6, .L1230+4
3527:src/display.c **** 	WasDataEntry = 0;
 12214              		.loc 1 3527 20 view .LVU3967
 12215 0008 23F48453 		bic	r3, r3, #4224
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12216              		.loc 1 3528 15 view .LVU3968
 12217 000c 0027     		movs	r7, #0
3527:src/display.c **** 	WasDataEntry = 0;
 12218              		.loc 1 3527 20 view .LVU3969
 12219 000e D382     		strh	r3, [r2, #22]	@ movhi
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12220              		.loc 1 3528 2 is_stmt 1 view .LVU3970
3529:src/display.c **** 	  // Complete redraw necessary
 12221              		.loc 1 3529 5 is_stmt 0 view .LVU3971
 12222 0010 9B05     		lsls	r3, r3, #22
3525:src/display.c **** 	State2.disp_freeze = 0;
 12223              		.loc 1 3525 7 view .LVU3972
 12224 0012 0546     		mov	r5, r0
 12225 0014 0C46     		mov	r4, r1
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12226              		.loc 1 3528 15 view .LVU3973
 12227 0016 3760     		str	r7, [r6]
3529:src/display.c **** 	  // Complete redraw necessary
 12228              		.loc 1 3529 2 is_stmt 1 view .LVU3974
3529:src/display.c **** 	  // Complete redraw necessary
 12229              		.loc 1 3529 5 is_stmt 0 view .LVU3975
 12230 0018 12D5     		bpl	.L1221
3529:src/display.c **** 	  // Complete redraw necessary
 12231              		.loc 1 3529 27 discriminator 1 view .LVU3976
 12232 001a D1B1     		cbz	r1, .L1229
 12233              	.L1222:
3536:src/display.c **** 	    ShowRPN = 0;
 12234              		.loc 1 3536 6 is_stmt 1 view .LVU3977
 12235 001c FFF7FEFF 		bl	reset_disp
 12236              	.LVL1422:
3537:src/display.c **** 	    set_annunciators();
 12237              		.loc 1 3537 6 view .LVU3978
3537:src/display.c **** 	    set_annunciators();
ARM GAS  /tmp/ccpF0v4D.s 			page 345


 12238              		.loc 1 3537 14 is_stmt 0 view .LVU3979
 12239 0020 114B     		ldr	r3, .L1230+8
 12240 0022 0026     		movs	r6, #0
 12241 0024 1E60     		str	r6, [r3]
3538:src/display.c **** 	    set_digits_string( str2, 0 );
 12242              		.loc 1 3538 6 is_stmt 1 view .LVU3980
 12243 0026 FFF7FEFF 		bl	set_annunciators
 12244              	.LVL1423:
3539:src/display.c **** 	  }
 12245              		.loc 1 3539 6 view .LVU3981
 12246 002a 3146     		mov	r1, r6
 12247 002c 2046     		mov	r0, r4
 12248 002e FFF7FEFF 		bl	set_digits_string
 12249              	.LVL1424:
3541:src/display.c **** 	  finish_display();// message
 12250              		.loc 1 3541 4 view .LVU3982
 12251 0032 2846     		mov	r0, r5
 12252 0034 FFF7FEFF 		bl	set_status
 12253              	.LVL1425:
3542:src/display.c **** 	}
 12254              		.loc 1 3542 4 view .LVU3983
3544:src/display.c **** 
 12255              		.loc 1 3544 7 is_stmt 0 view .LVU3984
 12256 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12257              		.cfi_remember_state
 12258              		.cfi_restore 14
 12259              		.cfi_restore 7
 12260              		.cfi_restore 6
 12261              		.cfi_restore 5
 12262              		.cfi_restore 4
 12263              		.cfi_restore 3
 12264              		.cfi_def_cfa_offset 0
 12265              	.LVL1426:
3542:src/display.c **** 	}
 12266              		.loc 1 3542 4 view .LVU3985
 12267 003c FFF7FEBF 		b	finish_display
 12268              	.LVL1427:
 12269              	.L1221:
 12270              		.cfi_restore_state
3535:src/display.c **** 	    reset_disp();
 12271              		.loc 1 3535 4 is_stmt 1 view .LVU3986
3535:src/display.c **** 	    reset_disp();
 12272              		.loc 1 3535 7 is_stmt 0 view .LVU3987
 12273 0040 0029     		cmp	r1, #0
 12274 0042 EBD1     		bne	.L1222
3541:src/display.c **** 	  finish_display();// message
 12275              		.loc 1 3541 4 is_stmt 1 view .LVU3988
 12276 0044 2846     		mov	r0, r5
 12277              	.LVL1428:
3541:src/display.c **** 	  finish_display();// message
 12278              		.loc 1 3541 4 is_stmt 0 view .LVU3989
 12279 0046 FFF7FEFF 		bl	set_status
 12280              	.LVL1429:
3542:src/display.c **** 	}
 12281              		.loc 1 3542 4 is_stmt 1 view .LVU3990
3544:src/display.c **** 
 12282              		.loc 1 3544 7 is_stmt 0 view .LVU3991
ARM GAS  /tmp/ccpF0v4D.s 			page 346


 12283 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12284              		.cfi_remember_state
 12285              		.cfi_restore 14
 12286              		.cfi_restore 7
 12287              		.cfi_restore 6
 12288              		.cfi_restore 5
 12289              		.cfi_restore 4
 12290              		.cfi_restore 3
 12291              		.cfi_def_cfa_offset 0
 12292              	.LVL1430:
3542:src/display.c **** 	}
 12293              		.loc 1 3542 4 view .LVU3992
 12294 004e FFF7FEBF 		b	finish_display
 12295              	.LVL1431:
 12296              	.L1229:
 12297              		.cfi_restore_state
3531:src/display.c **** 	  display();
 12298              		.loc 1 3531 4 is_stmt 1 view .LVU3993
3531:src/display.c **** 	  display();
 12299              		.loc 1 3531 12 is_stmt 0 view .LVU3994
 12300 0052 064B     		ldr	r3, .L1230+12
 12301 0054 1860     		str	r0, [r3]
3532:src/display.c **** 	}
 12302              		.loc 1 3532 4 is_stmt 1 view .LVU3995
3544:src/display.c **** 
 12303              		.loc 1 3544 7 is_stmt 0 view .LVU3996
 12304 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12305              		.cfi_restore 14
 12306              		.cfi_restore 7
 12307              		.cfi_restore 6
 12308              		.cfi_restore 5
 12309              		.cfi_restore 4
 12310              		.cfi_restore 3
 12311              		.cfi_def_cfa_offset 0
3532:src/display.c **** 	}
 12312              		.loc 1 3532 4 view .LVU3997
 12313 005a FFF7FEBF 		b	display
 12314              	.LVL1432:
 12315              	.L1231:
3532:src/display.c **** 	}
 12316              		.loc 1 3532 4 view .LVU3998
 12317 005e 00BF     		.align	2
 12318              	.L1230:
 12319 0060 00000000 		.word	StateWhileOn
 12320 0064 00000000 		.word	WasDataEntry
 12321 0068 00000000 		.word	ShowRPN
 12322 006c 00000000 		.word	DispMsg
 12323              		.cfi_endproc
 12324              	.LFE46:
 12326              		.section	.text.error_message,"ax",%progbits
 12327              		.align	1
 12328              		.p2align 2,,3
 12329              		.global	error_message
 12330              		.syntax unified
 12331              		.thumb
 12332              		.thumb_func
 12333              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccpF0v4D.s 			page 347


 12335              	error_message:
 12336              	.LVL1433:
 12337              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 12338              		.loc 1 134 1 is_stmt 1 view -0
 12339              		.cfi_startproc
 12340              		@ args = 0, pretend = 0, frame = 0
 12341              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 12342              		.loc 1 139 3 view .LVU4000
 197:src/display.c ****     {
 12343              		.loc 1 197 3 view .LVU4001
 232:src/display.c ****     const char *p = error_table[e];
 12344              		.loc 1 232 3 view .LVU4002
 134:src/display.c **** #define MSG1(top) top "\0"
 12345              		.loc 1 134 1 is_stmt 0 view .LVU4003
 12346 0000 38B5     		push	{r3, r4, r5, lr}
 12347              		.cfi_def_cfa_offset 16
 12348              		.cfi_offset 3, -16
 12349              		.cfi_offset 4, -12
 12350              		.cfi_offset 5, -8
 12351              		.cfi_offset 14, -4
 232:src/display.c ****     const char *p = error_table[e];
 12352              		.loc 1 232 21 view .LVU4004
 12353 0002 1A4B     		ldr	r3, .L1243
 12354 0004 1B68     		ldr	r3, [r3]
 12355 0006 0343     		orrs	r3, r0, r3
 12356 0008 2CD0     		beq	.L1232
 12357              	.LBB699:
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12358              		.loc 1 233 5 is_stmt 1 view .LVU4005
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12359              		.loc 1 233 17 is_stmt 0 view .LVU4006
 12360 000a 194B     		ldr	r3, .L1243+4
 12361 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12362              	.LVL1434:
 234:src/display.c ****     if (*q == '\0')
 12363              		.loc 1 234 5 is_stmt 1 view .LVU4007
 12364 0010 0446     		mov	r4, r0
 234:src/display.c ****     if (*q == '\0')
 12365              		.loc 1 234 21 is_stmt 0 view .LVU4008
 12366 0012 0021     		movs	r1, #0
 12367 0014 2846     		mov	r0, r5
 12368              	.LVL1435:
 234:src/display.c ****     if (*q == '\0')
 12369              		.loc 1 234 21 view .LVU4009
 12370 0016 FFF7FEFF 		bl	find_char
 12371              	.LVL1436:
 235:src/display.c ****       q = S7_ERROR;
 12372              		.loc 1 235 5 is_stmt 1 view .LVU4010
 235:src/display.c ****       q = S7_ERROR;
 12373              		.loc 1 235 9 is_stmt 0 view .LVU4011
 12374 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 235:src/display.c ****       q = S7_ERROR;
 12375              		.loc 1 235 8 view .LVU4012
 12376 001c 9BB9     		cbnz	r3, .L1241
 236:src/display.c ****     if (*q == 'X') {
ARM GAS  /tmp/ccpF0v4D.s 			page 348


 12377              		.loc 1 236 9 view .LVU4013
 12378 001e 1549     		ldr	r1, .L1243+8
 12379              	.L1234:
 12380              	.LVL1437:
 246:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12381              		.loc 1 246 7 is_stmt 1 view .LVU4014
 12382 0020 2846     		mov	r0, r5
 12383 0022 FFF7FEFF 		bl	message
 12384              	.LVL1438:
 247:src/display.c **** #ifndef REALBUILD
 12385              		.loc 1 247 7 view .LVU4015
 247:src/display.c **** #ifndef REALBUILD
 12386              		.loc 1 247 26 is_stmt 0 view .LVU4016
 12387 0026 144B     		ldr	r3, .L1243+12
 249:src/display.c **** #endif
 12388              		.loc 1 249 7 view .LVU4017
 12389 0028 1449     		ldr	r1, .L1243+16
 247:src/display.c **** #ifndef REALBUILD
 12390              		.loc 1 247 26 view .LVU4018
 12391 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 249:src/display.c **** #endif
 12392              		.loc 1 249 7 view .LVU4019
 12393 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12394 0030 1348     		ldr	r0, .L1243+20
 247:src/display.c **** #ifndef REALBUILD
 12395              		.loc 1 247 31 view .LVU4020
 12396 0032 003C     		subs	r4, r4, #0
 247:src/display.c **** #ifndef REALBUILD
 12397              		.loc 1 247 31 view .LVU4021
 12398 0034 18BF     		it	ne
 12399 0036 0124     		movne	r4, #1
 12400              	.LVL1439:
 247:src/display.c **** #ifndef REALBUILD
 12401              		.loc 1 247 26 view .LVU4022
 12402 0038 64F30412 		bfi	r2, r4, #4, #1
 12403 003c DA75     		strb	r2, [r3, #23]
 249:src/display.c **** #endif
 12404              		.loc 1 249 7 is_stmt 1 view .LVU4023
 12405              	.LBE699:
 274:src/display.c **** 
 12406              		.loc 1 274 1 is_stmt 0 view .LVU4024
 12407 003e BDE83840 		pop	{r3, r4, r5, lr}
 12408              		.cfi_remember_state
 12409              		.cfi_restore 14
 12410              		.cfi_restore 5
 12411              		.cfi_restore 4
 12412              		.cfi_restore 3
 12413              		.cfi_def_cfa_offset 0
 12414              	.LVL1440:
 12415              	.LBB706:
 249:src/display.c **** #endif
 12416              		.loc 1 249 7 view .LVU4025
 12417 0042 FFF7FEBF 		b	scopy
 12418              	.LVL1441:
 12419              	.L1241:
 12420              		.cfi_restore_state
 237:src/display.c ****       DispMsg = p;
ARM GAS  /tmp/ccpF0v4D.s 			page 349


 12421              		.loc 1 237 5 is_stmt 1 view .LVU4026
 237:src/display.c ****       DispMsg = p;
 12422              		.loc 1 237 8 is_stmt 0 view .LVU4027
 12423 0046 582B     		cmp	r3, #88
 12424 0048 0DD1     		bne	.L1242
 238:src/display.c ****       frozen_display();
 12425              		.loc 1 238 7 is_stmt 1 view .LVU4028
 12426              	.LBB700:
 12427              	.LBB701:
3305:src/display.c **** 	display();
 12428              		.loc 1 3305 21 is_stmt 0 view .LVU4029
 12429 004a 0B4C     		ldr	r4, .L1243+12
 12430              	.LVL1442:
3305:src/display.c **** 	display();
 12431              		.loc 1 3305 21 view .LVU4030
 12432              	.LBE701:
 12433              	.LBE700:
 238:src/display.c ****       frozen_display();
 12434              		.loc 1 238 15 view .LVU4031
 12435 004c 0D4A     		ldr	r2, .L1243+24
 12436              	.LBB704:
 12437              	.LBB702:
3305:src/display.c **** 	display();
 12438              		.loc 1 3305 21 view .LVU4032
 12439 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12440              	.LBE702:
 12441              	.LBE704:
 238:src/display.c ****       frozen_display();
 12442              		.loc 1 238 15 view .LVU4033
 12443 0050 1560     		str	r5, [r2]
 239:src/display.c ****     }
 12444              		.loc 1 239 7 is_stmt 1 view .LVU4034
 12445              	.LBB705:
 12446              	.LBI700:
3303:src/display.c ****       {
 12447              		.loc 1 3303 12 view .LVU4035
 12448              	.LBB703:
3305:src/display.c **** 	display();
 12449              		.loc 1 3305 2 view .LVU4036
3305:src/display.c **** 	display();
 12450              		.loc 1 3305 21 is_stmt 0 view .LVU4037
 12451 0052 6FF30413 		bfc	r3, #4, #1
 12452 0056 E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 12453              		.loc 1 3306 2 is_stmt 1 view .LVU4038
 12454 0058 FFF7FEFF 		bl	display
 12455              	.LVL1443:
3307:src/display.c ****       }
 12456              		.loc 1 3307 2 view .LVU4039
3307:src/display.c ****       }
 12457              		.loc 1 3307 21 is_stmt 0 view .LVU4040
 12458 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12459 005e 43F01003 		orr	r3, r3, #16
 12460 0062 E375     		strb	r3, [r4, #23]
 12461              	.LVL1444:
 12462              	.L1232:
3307:src/display.c ****       }
ARM GAS  /tmp/ccpF0v4D.s 			page 350


 12463              		.loc 1 3307 21 view .LVU4041
 12464              	.LBE703:
 12465              	.LBE705:
 12466              	.LBE706:
 274:src/display.c **** 
 12467              		.loc 1 274 1 view .LVU4042
 12468 0064 38BD     		pop	{r3, r4, r5, pc}
 12469              	.LVL1445:
 12470              	.L1242:
 12471              	.LBB707:
 234:src/display.c ****     if (*q == '\0')
 12472              		.loc 1 234 17 view .LVU4043
 12473 0066 411C     		adds	r1, r0, #1
 12474 0068 DAE7     		b	.L1234
 12475              	.L1244:
 12476 006a 00BF     		.align	2
 12477              	.L1243:
 12478 006c 00000000 		.word	Running
 12479 0070 00000000 		.word	.LANCHOR27
 12480 0074 00000000 		.word	.LANCHOR26
 12481 0078 00000000 		.word	StateWhileOn
 12482 007c 00000000 		.word	.LANCHOR28
 12483 0080 00000000 		.word	LastDisplayedNumber
 12484 0084 00000000 		.word	DispMsg
 12485              	.LBE707:
 12486              		.cfi_endproc
 12487              	.LFE1:
 12489              		.section	.rodata.str1.4,"aMS",%progbits,1
 12490              		.align	2
 12491              	.LC41:
 12492 0000 06316306 		.ascii	"\0061c\006\006\000"
 12492      0600
 12493 0006 0000     		.align	2
 12494              	.LC42:
 12495 0008 756E0600 		.ascii	"un\006\000"
 12496              		.align	2
 12497              	.LC43:
 12498 000c 736D00   		.ascii	"sm\000"
 12499              		.set	CSWTCH.344,CSWTCH.342
 12500 000f 00       		.align	2
 12501              	.LC44:
 12502 0010 20502072 		.ascii	" P r o g r a m \000"
 12502      206F2067 
 12502      20722061 
 12502      206D2000 
 12503              		.align	2
 12504              	.LC45:
 12505 0020 206F2072 		.ascii	" o r   d a t e \000"
 12505      20202064 
 12505      20612074 
 12505      20652000 
 12506              		.align	2
 12507              	.LC46:
 12508 0030 204F2070 		.ascii	" O p - c o d e \000"
 12508      202D2063 
 12508      206F2064 
 12508      20652000 
ARM GAS  /tmp/ccpF0v4D.s 			page 351


 12509              		.align	2
 12510              	.LC47:
 12511 0040 204C2061 		.ascii	" L a b e l \000"
 12511      20622065 
 12511      206C2000 
 12512              		.align	2
 12513              	.LC48:
 12514 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12514      20652072 
 12514      20612074 
 12514      2069206F 
 12514      206E2000 
 12515              		.align	2
 12516              	.LC49:
 12517 0060 20462075 		.ascii	" F u l l \000"
 12517      206C206C 
 12517      2000
 12518 006a 0000     		.align	2
 12519              	.LC50:
 12520 006c 2043206C 		.ascii	" C l a s h \000"
 12520      20612073 
 12520      20682000 
 12521              		.align	2
 12522              	.LC51:
 12523 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12523      206F2020 
 12523      2073206D 
 12523      2061206C 
 12523      206C2000 
 12524              		.align	2
 12525              	.LC52:
 12526 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12526      20742061 
 12526      20202070 
 12526      206F2069 
 12526      206E2074 
 12527              		.align	2
 12528              	.LC53:
 12529 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12529      20722061 
 12529      206D2065 
 12529      20742065 
 12529      20722000 
 12530              		.align	2
 12531              	.LC54:
 12532 00b8 20442061 		.ascii	" D a t a \000"
 12532      20742061 
 12532      2000
 12533 00c2 0000     		.align	2
 12534              	.LC55:
 12535 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12535      206F2074 
 12535      20652063 
 12535      20742065 
 12535      20642000 
 12536              		.align	2
 12537              	.LC56:
ARM GAS  /tmp/ccpF0v4D.s 			page 352


 12538 00d8 2046206F 		.ascii	" F o u n d \000"
 12538      2075206E 
 12538      20642000 
 12539              		.align	2
 12540              	.LC57:
 12541 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12541      2073206D 
 12541      20612074 
 12541      20632068 
 12541      2000
 12542 00f6 0000     		.align	2
 12543              	.LC58:
 12544 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12544      20732074 
 12544      2061206C 
 12544      206C2065 
 12544      20642000 
 12545              		.global	DIGITS
 12546              		.comm	IoAnnunciator,4,4
 12547              		.comm	IntMaxWindow,4,4
 12548              		.comm	JustDisplayed,4,4
 12549              		.comm	ShowRPN,4,4
 12550              		.comm	forceDispPlot,1,1
 12551              		.comm	LastDisplayedExponent,5,4
 12552              		.comm	LastDisplayedNumber,26,4
 12553              		.comm	LastDisplayedText,31,4
 12554              		.global	no_status_top
 12555              		.comm	DispPlot,2,2
 12556              		.comm	DispMsg,4,4
 12557              		.global	SvnRevision
 12558              		.section	.rodata
 12559              		.align	2
 12560              		.set	.LANCHOR17,. + 0
 12561              	.LC16:
 12562 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12562      22002E00 
 12562      00
 12563 0009 000000   		.space	3
 12564              	.LC20:
 12565 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12565      332E3306 
 12565      0600
 12566 0016 00000000 		.space	4
 12567 001a 0000     		.space	2
 12568              	.LC59:
 12569 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12569      696E6700 
 12569      50726F47 
 12569      72614D6D 
 12569      00
 12570 002d 000000   		.space	3
 12571              	.LC60:
 12572 0030 446F6D61 		.ascii	"Domain\000\000"
 12572      696E0000 
 12573              	.LC61:
 12574 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12574      74696D65 
ARM GAS  /tmp/ccpF0v4D.s 			page 353


 12574      006F7220 
 12574      64417445 
 12574      00
 12575 0049 000000   		.space	3
 12576              	.LC62:
 12577 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12577      66696E65 
 12577      64004F70 
 12577      2D434F64 
 12577      4500
 12578 005e 0000     		.space	2
 12579              	.LC63:
 12580 0060 2B9F0000 		.ascii	"+\237\000\000"
 12581              	.LC64:
 12582 0064 2D9F0000 		.ascii	"-\237\000\000"
 12583              	.LC65:
 12584 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12584      75636800 
 12584      4C416245 
 12584      4C00
 12585 0076 0000     		.space	2
 12586              	.LC66:
 12587 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12587      67616C00 
 12587      4F504572 
 12587      4174696F 
 12587      6E00
 12588 008a 0000     		.space	2
 12589              	.LC67:
 12590 008c 4F757420 		.ascii	"Out of range\000\000"
 12590      6F662072 
 12590      616E6765 
 12590      0000
 12591 009a 0000     		.space	2
 12592              	.LC68:
 12593 009c 42616420 		.ascii	"Bad digit\000\000"
 12593      64696769 
 12593      740000
 12594 00a7 00       		.space	1
 12595              	.LC69:
 12596 00a8 546F6F20 		.ascii	"Too long\000\000"
 12596      6C6F6E67 
 12596      0000
 12597 00b2 0000     		.space	2
 12598              	.LC70:
 12599 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12599      69730046 
 12599      754C4C00 
 12600              	.LC71:
 12601 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12601      6B00434C 
 12601      41534800 
 12602              	.LC72:
 12603 00cc 42616420 		.ascii	"Bad mode\000\000"
 12603      6D6F6465 
 12603      0000
 12604 00d6 0000     		.space	2
ARM GAS  /tmp/ccpF0v4D.s 			page 354


 12605              	.LC73:
 12606 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12606      06060673 
 12606      697A6500 
 12606      746F6F20 
 12606      534D6D41 
 12607 00ef 00       		.space	1
 12608              	.LC74:
 12609 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12609      66657700 
 12609      64417441 
 12609      20506F69 
 12609      6E745300 
 12610              	.LC75:
 12611 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12611      6C696400 
 12611      50617261 
 12611      4D6D4574 
 12611      457200
 12612 0117 00       		.space	1
 12613              	.LC76:
 12614 0118 492F4F00 		.ascii	"I/O\000\000"
 12614      00
 12615 011d 000000   		.space	3
 12616              	.LC77:
 12617 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12617      6C696400 
 12617      64417441 
 12617      00
 12618 012d 000000   		.space	3
 12619              	.LC78:
 12620 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12620      65005072 
 12620      6F744563 
 12620      74456400 
 12621              	.LC79:
 12622 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12622      6F6F7400 
 12622      466F756E 
 12622      6400
 12623 014e 0000     		.space	2
 12624              	.LC80:
 12625 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12625      6978004D 
 12625      6D49534D 
 12625      6D417443 
 12625      4800
 12626 0162 0000     		.space	2
 12627              	.LC81:
 12628 0164 53696E67 		.ascii	"Singular\000\000"
 12628      756C6172 
 12628      0000
 12629 016e 0000     		.space	2
 12630              	.LC82:
 12631 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12631      68206973 
 12631      0046754C 
ARM GAS  /tmp/ccpF0v4D.s 			page 355


 12631      4C00
 12632 017e 0000     		.space	2
 12633              	.LC83:
 12634 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12634      72797374 
 12634      616C0049 
 12634      6E537461 
 12634      4C4C4564 
 12635 0195 000000   		.space	3
 12636              	.LC84:
 12637 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12637      5800
 12638              		.section	.bss.DecimalMode,"aw",%nobits
 12639              		.set	.LANCHOR1,. + 0
 12642              	DecimalMode:
 12643 0000 00       		.space	1
 12644              		.section	.bss.SeparatorMode,"aw",%nobits
 12645              		.set	.LANCHOR0,. + 0
 12648              	SeparatorMode:
 12649 0000 00       		.space	1
 12650              		.section	.bss.no_status_top,"aw",%nobits
 12651              		.align	1
 12652              		.set	.LANCHOR18,. + 0
 12655              	no_status_top:
 12656 0000 0000     		.space	2
 12657              		.section	.rodata.CSWTCH.342,"a"
 12658              		.align	2
 12659              		.set	.LANCHOR11,. + 0
 12662              	CSWTCH.342:
 12663 0000 02000000 		.word	2
 12664 0004 08000000 		.word	8
 12665 0008 0A000000 		.word	10
 12666 000c 10000000 		.word	16
 12667              		.section	.rodata.CSWTCH.369,"a"
 12668              		.align	2
 12669              		.set	.LANCHOR16,. + 0
 12672              	CSWTCH.369:
 12673 0000 00000000 		.word	.LC41
 12674 0004 08000000 		.word	.LC42
 12675 0008 0C000000 		.word	.LC43
 12676              		.section	.rodata.DIGITS,"a"
 12677              		.align	2
 12678              		.set	.LANCHOR12,. + 0
 12681              	DIGITS:
 12682 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12682      34353637 
 12682      38394142 
 12682      43444546 
 12682      00
 12683              		.section	.rodata.S7_ERROR,"a"
 12684              		.align	2
 12685              		.set	.LANCHOR26,. + 0
 12688              	S7_ERROR:
 12689 0000 4572726F 		.ascii	"Error\000"
 12689      7200
 12690              		.section	.rodata.S7_INF,"a"
 12691              		.align	2
ARM GAS  /tmp/ccpF0v4D.s 			page 356


 12692              		.set	.LANCHOR5,. + 0
 12695              	S7_INF:
 12696 0000 496E6669 		.ascii	"Infinity\000"
 12696      6E697479 
 12696      00
 12697              		.section	.rodata.S7_INF_Text,"a"
 12698              		.align	2
 12699              		.set	.LANCHOR7,. + 0
 12702              	S7_INF_Text:
 12703 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12703      20662069 
 12703      206E2069 
 12703      20742079 
 12703      2000
 12704              		.section	.rodata.S7_NEG_INF_Text,"a"
 12705              		.align	2
 12706              		.set	.LANCHOR6,. + 0
 12709              	S7_NEG_INF_Text:
 12710 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12710      20662069 
 12710      206E2069 
 12710      20742079 
 12710      2000
 12711              		.section	.rodata.S7_NaN,"a"
 12712              		.align	2
 12713              		.set	.LANCHOR3,. + 0
 12716              	S7_NaN:
 12717 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12717      6E754D6D 
 12717      45726963 
 12717      00
 12718              		.section	.rodata.S7_NaN_Text,"a"
 12719              		.align	2
 12720              		.set	.LANCHOR4,. + 0
 12723              	S7_NaN_Text:
 12724 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12724      20742020 
 12724      206E2075 
 12724      206D2065 
 12724      20722069 
 12725              		.section	.rodata.S7_STEP,"a"
 12726              		.align	2
 12727              		.set	.LANCHOR25,. + 0
 12730              	S7_STEP:
 12731 0000 53744550 		.ascii	"StEP \000"
 12731      2000
 12732              		.section	.rodata.S7_STEP_ShortText,"a"
 12733              		.align	2
 12734              		.set	.LANCHOR19,. + 0
 12737              	S7_STEP_ShortText:
 12738 0000 53544550 		.ascii	"STEP\000"
 12738      00
 12739              		.section	.rodata.S7_fract_EQ,"a"
 12740              		.align	2
 12741              		.set	.LANCHOR9,. + 0
 12744              	S7_fract_EQ:
 12745 0000 203D2000 		.ascii	" = \000"
ARM GAS  /tmp/ccpF0v4D.s 			page 357


 12746              		.section	.rodata.S7_fract_GT,"a"
 12747              		.align	2
 12748              		.set	.LANCHOR10,. + 0
 12751              	S7_fract_GT:
 12752 0000 20477400 		.ascii	" Gt\000"
 12753              		.section	.rodata.S7_fract_LT,"a"
 12754              		.align	2
 12755              		.set	.LANCHOR8,. + 0
 12758              	S7_fract_LT:
 12759 0000 204C7400 		.ascii	" Lt\000"
 12760              		.section	.rodata.S_SURE,"a"
 12761              		.align	2
 12762              		.set	.LANCHOR21,. + 0
 12765              	S_SURE:
 12766 0000 53757265 		.ascii	"Sure?\000"
 12766      3F00
 12767              		.section	.rodata.SvnRevision,"a"
 12768              		.align	2
 12769              		.set	.LANCHOR20,. + 0
 12772              	SvnRevision:
 12773 0000 30202020 		.ascii	"0   "
 12774              		.section	.rodata.digtbl,"a"
 12775              		.align	2
 12776              		.set	.LANCHOR2,. + 0
 12779              	digtbl:
 12780 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12780      02421252 
 12780      2D000000 
 12780      00000000 
 12780      00
 12781 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12781      00000017 
 12781      01000000 
 12781      00
 12782 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12782      28000000 
 12782      0020664B 
 12782      00000010 
 12783 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12783      5E5B3973 
 12783      77497F7B 
 12783      00000612 
 12783      0300787D 
 12784 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12784      673D240F 
 12784      75266C6D 
 12784      6F7C7914 
 12784      73362F00 
 12785 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12785      161F7674 
 12785      6735040F 
 12785      75266915 
 12785      177C7914 
 12786 0076 000F003B 		.ascii	"\000\017\000;"
 12787              		.section	.rodata.error_table.8507,"a"
 12788              		.align	2
 12789              		.set	.LANCHOR27,. + 0
ARM GAS  /tmp/ccpF0v4D.s 			page 358


 12792              	error_table.8507:
 12793 0000 1C000000 		.word	.LC59
 12794 0004 30000000 		.word	.LC60
 12795 0008 38000000 		.word	.LC61
 12796 000c 4C000000 		.word	.LC62
 12797 0010 60000000 		.word	.LC63
 12798 0014 64000000 		.word	.LC64
 12799 0018 68000000 		.word	.LC65
 12800 001c 78000000 		.word	.LC66
 12801 0020 8C000000 		.word	.LC67
 12802 0024 9C000000 		.word	.LC68
 12803 0028 A8000000 		.word	.LC69
 12804 002c B4000000 		.word	.LC70
 12805 0030 C0000000 		.word	.LC71
 12806 0034 CC000000 		.word	.LC72
 12807 0038 D8000000 		.word	.LC73
 12808 003c F0000000 		.word	.LC74
 12809 0040 04010000 		.word	.LC75
 12810 0044 18010000 		.word	.LC76
 12811 0048 20010000 		.word	.LC77
 12812 004c 30010000 		.word	.LC78
 12813 0050 40010000 		.word	.LC79
 12814 0054 50010000 		.word	.LC80
 12815 0058 64010000 		.word	.LC81
 12816 005c 70010000 		.word	.LC82
 12817 0060 80010000 		.word	.LC83
 12818 0064 98010000 		.word	.LC84
 12819              		.section	.rodata.error_table_text.8508,"a"
 12820              		.align	2
 12821              		.set	.LANCHOR28,. + 0
 12824              	error_table_text.8508:
 12825 0000 10000000 		.word	.LC44
 12826 0004 A8000000 		.word	.LC39
 12827 0008 20000000 		.word	.LC45
 12828 000c 30000000 		.word	.LC46
 12829 0010 A8000000 		.word	.LC39
 12830 0014 A8000000 		.word	.LC39
 12831 0018 40000000 		.word	.LC47
 12832 001c 4C000000 		.word	.LC48
 12833 0020 A8000000 		.word	.LC39
 12834 0024 A8000000 		.word	.LC39
 12835 0028 A8000000 		.word	.LC39
 12836 002c 60000000 		.word	.LC49
 12837 0030 6C000000 		.word	.LC50
 12838 0034 A8000000 		.word	.LC39
 12839 0038 78000000 		.word	.LC51
 12840 003c 8C000000 		.word	.LC52
 12841 0040 A4000000 		.word	.LC53
 12842 0044 A8000000 		.word	.LC39
 12843 0048 B8000000 		.word	.LC54
 12844 004c C4000000 		.word	.LC55
 12845 0050 D8000000 		.word	.LC56
 12846 0054 E4000000 		.word	.LC57
 12847 0058 A8000000 		.word	.LC39
 12848 005c 60000000 		.word	.LC49
 12849 0060 F8000000 		.word	.LC58
 12850 0064 A8000000 		.word	.LC39
ARM GAS  /tmp/ccpF0v4D.s 			page 359


 12851              		.section	.rodata.libname,"a"
 12852              		.align	2
 12853              		.set	.LANCHOR22,. + 0
 12856              	libname:
 12857 0000 72414D6D 		.ascii	"rAMm\000"
 12857      00
 12858 0005 4C696220 		.ascii	"Lib \000"
 12858      00
 12859 000a 42757020 		.ascii	"Bup \000"
 12859      00
 12860 000f 726F4D6D 		.ascii	"roMm\000"
 12860      00
 12861              		.section	.rodata.libname_shorttext,"a"
 12862              		.align	2
 12863              		.set	.LANCHOR24,. + 0
 12866              	libname_shorttext:
 12867 0000 52616D00 		.ascii	"Ram\000"
 12868 0004 00       		.space	1
 12869 0005 4C696200 		.ascii	"Lib\000"
 12870 0009 00       		.space	1
 12871 000a 42757000 		.ascii	"Bup\000"
 12872 000e 00       		.space	1
 12873 000f 526F6D00 		.ascii	"Rom\000"
 12874 0013 00       		.space	1
 12875              		.section	.rodata.libname_text,"a"
 12876              		.align	2
 12877              		.set	.LANCHOR23,. + 0
 12880              	libname_text:
 12881 0000 20522061 		.ascii	" R a m \000"
 12881      206D2000 
 12882 0008 0000     		.space	2
 12883 000a 204C2069 		.ascii	" L i b \000"
 12883      20622000 
 12884 0012 0000     		.space	2
 12885 0014 20422075 		.ascii	" B u p \000"
 12885      20702000 
 12886 001c 0000     		.space	2
 12887 001e 2052206F 		.ascii	" R o m \000"
 12887      206D2000 
 12888 0026 0000     		.space	2
 12889              		.section	.rodata.shift_chars.8606,"a"
 12890              		.align	2
 12891              		.set	.LANCHOR15,. + 0
 12894              	shift_chars.8606:
 12895 0000 20111213 		.ascii	" \021\022\023"
 12896              		.section	.rodata.small_dots.8806,"a"
 12897              		.align	2
 12898              		.set	.LANCHOR14,. + 0
 12901              	small_dots.8806:
 12902 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12902      07E12C06 
 12902      07E12C06 
 12902      06
 12903              		.section	.rodata.small_minus.8805,"a"
 12904              		.align	2
 12905              		.set	.LANCHOR13,. + 0
 12908              	small_minus.8805:
ARM GAS  /tmp/ccpF0v4D.s 			page 360


 12909 0000 07C22D06 		.ascii	"\007\302-\006"
 12910              		.text
 12911              	.Letext0:
 12912              		.file 2 "src/decNumber/decContext.h"
 12913              		.file 3 "src/decNumber/decNumber.h"
 12914              		.file 4 "src/decNumber/decimal64.h"
 12915              		.file 5 "src/decNumber/decimal128.h"
 12916              		.file 6 "src/xeq.h"
 12917              		.file 7 "src/data.h"
 12918              		.file 8 "src/storage.h"
 12919              		.file 9 "src/display.h"
 12920              		.file 10 "src/consts.h"
 12921              		.file 11 "src/stats.h"
 12922              		.file 12 "src/revision.h"
 12923              		.file 13 "src/charset7.h"
 12924              		.file 14 "src/lcd.h"
 12925              		.file 15 "src/decn.h"
 12926              		.file 16 "src/alpha.h"
 12927              		.file 17 "src/int.h"
ARM GAS  /tmp/ccpF0v4D.s 			page 361


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccpF0v4D.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccpF0v4D.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccpF0v4D.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccpF0v4D.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccpF0v4D.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccpF0v4D.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccpF0v4D.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccpF0v4D.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccpF0v4D.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccpF0v4D.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccpF0v4D.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccpF0v4D.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccpF0v4D.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccpF0v4D.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccpF0v4D.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccpF0v4D.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccpF0v4D.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccpF0v4D.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/ccpF0v4D.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/ccpF0v4D.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/ccpF0v4D.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccpF0v4D.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccpF0v4D.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccpF0v4D.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/ccpF0v4D.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccpF0v4D.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/ccpF0v4D.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/ccpF0v4D.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccpF0v4D.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccpF0v4D.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccpF0v4D.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccpF0v4D.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/ccpF0v4D.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccpF0v4D.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccpF0v4D.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/ccpF0v4D.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccpF0v4D.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/ccpF0v4D.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccpF0v4D.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/ccpF0v4D.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccpF0v4D.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/ccpF0v4D.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/ccpF0v4D.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccpF0v4D.s:3755   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.342:0000000000000000 CSWTCH.344
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccpF0v4D.s:3767   .text.set_int_x:0000000000000360 $t
     /tmp/ccpF0v4D.s:3874   .text.set_int_x:00000000000003c0 $d
ARM GAS  /tmp/ccpF0v4D.s 			page 362


     /tmp/ccpF0v4D.s:3881   .text.set_annunciators:0000000000000000 $t
     /tmp/ccpF0v4D.s:3888   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccpF0v4D.s:4261   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccpF0v4D.s:4273   .text.getdig:0000000000000000 $t
     /tmp/ccpF0v4D.s:4281   .text.getdig:0000000000000000 getdig
     /tmp/ccpF0v4D.s:4301   .text.getdig:0000000000000008 $d
     /tmp/ccpF0v4D.s:4306   .text.dot:0000000000000000 $t
     /tmp/ccpF0v4D.s:4314   .text.dot:0000000000000000 dot
     /tmp/ccpF0v4D.s:4337   .text.std_round_fix:0000000000000000 $t
     /tmp/ccpF0v4D.s:4345   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccpF0v4D.s:4502   .text.std_round_fix:0000000000000078 $d
     /tmp/ccpF0v4D.s:4507   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccpF0v4D.s:4515   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccpF0v4D.s:4575   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccpF0v4D.s:4582   .text.pixel_length:0000000000000000 $t
     /tmp/ccpF0v4D.s:4590   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccpF0v4D.s:4681   .text.set_status:0000000000000000 $t
     /tmp/ccpF0v4D.s:4688   .text.set_status:0000000000000000 set_status
     /tmp/ccpF0v4D.s:4761   .text.set_status:0000000000000038 $d
     /tmp/ccpF0v4D.s:4766   .text.set_x_dn:0000000000000000 $t
     /tmp/ccpF0v4D.s:4774   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccpF0v4D.s:5667   .text.set_x_dn:00000000000003e0 $d
     /tmp/ccpF0v4D.s:5673   .text.set_x_dn:00000000000003ea $t
     /tmp/ccpF0v4D.s:5699   .text.set_x_dn:0000000000000416 $d
     /tmp/ccpF0v4D.s:5705   .text.set_x_dn:0000000000000420 $t
     /tmp/ccpF0v4D.s:6159   .text.set_x_dn:000000000000062c $d
     /tmp/ccpF0v4D.s:6168   .text.set_x_dn:0000000000000644 $t
     /tmp/ccpF0v4D.s:7000   .text.set_x_dn:000000000000096c $d
     /tmp/ccpF0v4D.s:7011   .text.set_x:0000000000000000 $t
     /tmp/ccpF0v4D.s:7018   .text.set_x:0000000000000000 set_x
     /tmp/ccpF0v4D.s:7086   .text.format_reg:0000000000000000 $t
     /tmp/ccpF0v4D.s:7094   .text.format_reg:0000000000000000 format_reg
     /tmp/ccpF0v4D.s:7213   .text.format_reg:0000000000000064 $d
     /tmp/ccpF0v4D.s:7219   .text.set_status_right:0000000000000000 $t
     /tmp/ccpF0v4D.s:7226   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccpF0v4D.s:7370   .text.set_status_right:000000000000006c $d
     /tmp/ccpF0v4D.s:7375   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccpF0v4D.s:7382   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccpF0v4D.s:7507   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccpF0v4D.s:7512   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:7555   .text.annunciators:0000000000000000 $t
     /tmp/ccpF0v4D.s:7562   .text.annunciators:0000000000000000 annunciators
     /tmp/ccpF0v4D.s:8233   .text.annunciators:0000000000000304 $d
     /tmp/ccpF0v4D.s:8254   .text.annunciators:0000000000000340 $t
     /tmp/ccpF0v4D.s:8646   .text.annunciators:00000000000004c8 $d
     /tmp/ccpF0v4D.s:8662   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:8729   .text.display:0000000000000000 $t
     /tmp/ccpF0v4D.s:8737   .text.display:0000000000000000 display
     /tmp/ccpF0v4D.s:9422   .text.display:0000000000000310 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccpF0v4D.s:9441   .text.display:0000000000000350 $t
     /tmp/ccpF0v4D.s:10139  .text.display:000000000000062c $d
     /tmp/ccpF0v4D.s:10167  .text.display:0000000000000680 $t
     /tmp/ccpF0v4D.s:11029  .text.display:00000000000009bc $d
ARM GAS  /tmp/ccpF0v4D.s 			page 363


     /tmp/ccpF0v4D.s:11049  .text.display:00000000000009ec $t
     /tmp/ccpF0v4D.s:11781  .text.display:0000000000000cd4 $d
     /tmp/ccpF0v4D.s:11801  .text.display:0000000000000cfc $t
     /tmp/ccpF0v4D.s:12122  .text.display:0000000000000e44 $d
     /tmp/ccpF0v4D.s:12139  .text.frozen_display:0000000000000000 $t
     /tmp/ccpF0v4D.s:12147  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccpF0v4D.s:12177  .text.frozen_display:000000000000001c $d
     /tmp/ccpF0v4D.s:12182  .text.message:0000000000000000 $t
     /tmp/ccpF0v4D.s:12190  .text.message:0000000000000000 message
     /tmp/ccpF0v4D.s:12319  .text.message:0000000000000060 $d
     /tmp/ccpF0v4D.s:12327  .text.error_message:0000000000000000 $t
     /tmp/ccpF0v4D.s:12335  .text.error_message:0000000000000000 error_message
     /tmp/ccpF0v4D.s:12478  .text.error_message:000000000000006c $d
     /tmp/ccpF0v4D.s:12490  .rodata.str1.4:0000000000000000 $d
     /tmp/ccpF0v4D.s:12662  .rodata.CSWTCH.342:0000000000000000 CSWTCH.342
     /tmp/ccpF0v4D.s:12681  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccpF0v4D.s:12655  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccpF0v4D.s:12772  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccpF0v4D.s:12559  .rodata:0000000000000000 $d
     /tmp/ccpF0v4D.s:12642  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccpF0v4D.s:12643  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccpF0v4D.s:12648  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccpF0v4D.s:12649  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccpF0v4D.s:12651  .bss.no_status_top:0000000000000000 $d
     /tmp/ccpF0v4D.s:12658  .rodata.CSWTCH.342:0000000000000000 $d
     /tmp/ccpF0v4D.s:12668  .rodata.CSWTCH.369:0000000000000000 $d
     /tmp/ccpF0v4D.s:12672  .rodata.CSWTCH.369:0000000000000000 CSWTCH.369
     /tmp/ccpF0v4D.s:12677  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccpF0v4D.s:12684  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccpF0v4D.s:12688  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccpF0v4D.s:12691  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccpF0v4D.s:12695  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccpF0v4D.s:12698  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccpF0v4D.s:12702  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccpF0v4D.s:12705  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccpF0v4D.s:12709  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccpF0v4D.s:12712  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccpF0v4D.s:12716  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccpF0v4D.s:12719  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccpF0v4D.s:12723  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccpF0v4D.s:12726  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccpF0v4D.s:12730  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccpF0v4D.s:12733  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccpF0v4D.s:12737  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccpF0v4D.s:12740  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccpF0v4D.s:12744  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccpF0v4D.s:12747  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccpF0v4D.s:12751  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccpF0v4D.s:12754  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccpF0v4D.s:12758  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccpF0v4D.s:12761  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccpF0v4D.s:12765  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccpF0v4D.s:12768  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccpF0v4D.s:12775  .rodata.digtbl:0000000000000000 $d
     /tmp/ccpF0v4D.s:12779  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccpF0v4D.s:12788  .rodata.error_table.8507:0000000000000000 $d
ARM GAS  /tmp/ccpF0v4D.s 			page 364


     /tmp/ccpF0v4D.s:12792  .rodata.error_table.8507:0000000000000000 error_table.8507
     /tmp/ccpF0v4D.s:12820  .rodata.error_table_text.8508:0000000000000000 $d
     /tmp/ccpF0v4D.s:12824  .rodata.error_table_text.8508:0000000000000000 error_table_text.8508
     /tmp/ccpF0v4D.s:12852  .rodata.libname:0000000000000000 $d
     /tmp/ccpF0v4D.s:12856  .rodata.libname:0000000000000000 libname
     /tmp/ccpF0v4D.s:12862  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccpF0v4D.s:12866  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccpF0v4D.s:12876  .rodata.libname_text:0000000000000000 $d
     /tmp/ccpF0v4D.s:12880  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccpF0v4D.s:12890  .rodata.shift_chars.8606:0000000000000000 $d
     /tmp/ccpF0v4D.s:12894  .rodata.shift_chars.8606:0000000000000000 shift_chars.8606
     /tmp/ccpF0v4D.s:12897  .rodata.small_dots.8806:0000000000000000 $d
     /tmp/ccpF0v4D.s:12901  .rodata.small_dots.8806:0000000000000000 small_dots.8806
     /tmp/ccpF0v4D.s:12904  .rodata.small_minus.8805:0000000000000000 $d
     /tmp/ccpF0v4D.s:12908  .rodata.small_minus.8805:0000000000000000 small_minus.8805

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
ARM GAS  /tmp/ccpF0v4D.s 			page 365


extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
WasDataEntry
argcmds
ProgFree
scopy_char
current_catalogue
catcmd
get_const
getprog
prt
multicmds
copyreg
sigma_val
getX
packed_from_number
slen
set_NaN
do_conv
find_label_from
alpha_rcl_s
StackBase
monfuncs
global_regs
free_mem
free_flash
ARM GAS  /tmp/ccpF0v4D.s 			page 366


findmultilbl
local_regs
SizeStatRegs

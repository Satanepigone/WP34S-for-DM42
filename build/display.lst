ARM GAS  /tmp/ccZMW3We.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccZMW3We.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status(const char *);
  38:src/display.c **** static void set_status_right(const char *);
  39:src/display.c **** static void set_status_graphic(const unsigned char *);
  40:src/display.c **** 
  41:src/display.c **** const char *DispMsg; // What to display in message area
  42:src/display.c **** 
  43:src/display.c **** short int DispPlot;
  44:src/display.c **** #ifndef REALBUILD
  45:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  46:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  47:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  48:src/display.c **** char forceDispPlot;
  49:src/display.c **** #endif
  50:src/display.c **** 
  51:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  52:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  53:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  54:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  55:src/display.c **** 
  56:src/display.c **** /* Message strings
  57:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  58:src/display.c ****  * are for the upper dot matrix line.
  59:src/display.c ****  */
  60:src/display.c **** static const char S_SURE[] = "Sure?";
  61:src/display.c **** 
  62:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  63:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  64:src/display.c **** #ifndef REALBUILD
  65:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  66:src/display.c **** #endif
  67:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  68:src/display.c **** #ifndef REALBUILD
  69:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  70:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  71:src/display.c **** #endif
  72:src/display.c **** 
  73:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  74:src/display.c **** #ifndef REALBUILD
  75:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  76:src/display.c **** #endif
  77:src/display.c **** 
  78:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  79:src/display.c **** static const char S7_fract_LT[] = " Lt";
  80:src/display.c **** static const char S7_fract_GT[] = " Gt";
  81:src/display.c **** 
  82:src/display.c **** static const char libname[][5] = {
  83:src/display.c **** 	"rAMm", "Lib ", "Bup ",
  84:src/display.c **** #ifndef REALBUILD
  85:src/display.c **** 	"roMm"
  86:src/display.c **** #endif
  87:src/display.c **** };
ARM GAS  /tmp/ccZMW3We.s 			page 3


  88:src/display.c **** 
  89:src/display.c **** #ifndef REALBUILD
  90:src/display.c **** static const char libname_text[][10] = {
  91:src/display.c **** 	" R a m ", " L i b ", " B u p ",	" R o m "
  92:src/display.c **** };
  93:src/display.c **** static const char libname_shorttext[][5] = {
  94:src/display.c **** 	"Ram", "Lib", "Bup", "Rom"
  95:src/display.c **** };
  96:src/display.c **** #endif
  97:src/display.c **** 
  98:src/display.c **** 
  99:src/display.c **** /* Set the separator and decimal mode globals
 100:src/display.c ****  */
 101:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 101 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 102:src/display.c **** 	// Separators used by various modes
 103:src/display.c **** 	if (UState.fraccomma) {
  34              		.loc 1 103 2 view .LVU1
  35              		.loc 1 103 6 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 104:src/display.c **** 		SeparatorMode = SEP_DOT;
  37              		.loc 1 104 17 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  39              		.loc 1 103 6 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  42              		.loc 1 103 5 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 101:src/display.c **** 	// Separators used by various modes
  44              		.loc 1 101 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  49              		.loc 1 103 5 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 104 3 is_stmt 1 view .LVU8
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 105 15 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 106:src/display.c **** 	}
 107:src/display.c **** 	else {
 108:src/display.c **** 		SeparatorMode = SEP_COMMA;
 109:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 110:src/display.c **** 	}
 111:src/display.c **** 	if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 111 7 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 105 15 view .LVU11
ARM GAS  /tmp/ccZMW3We.s 			page 4


  57 0018 0124     		movs	r4, #1
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 104 17 view .LVU12
  59 001a 0225     		movs	r5, #2
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 105 15 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 111 5 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 104 17 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 105 3 is_stmt 1 view .LVU16
  67              		.loc 1 111 2 view .LVU17
  68              		.loc 1 111 5 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 111 62 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 112:src/display.c **** 		SeparatorMode = SEP_NONE;
  75              		.loc 1 112 3 is_stmt 1 view .LVU20
  76              		.loc 1 112 17 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 113:src/display.c **** }
  80              		.loc 1 113 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  89              		.loc 1 108 3 is_stmt 1 view .LVU23
 109:src/display.c **** 	}
  90              		.loc 1 109 15 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  92              		.loc 1 111 7 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 109:src/display.c **** 	}
  94              		.loc 1 109 15 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  96              		.loc 1 108 17 view .LVU27
  97 0038 0125     		movs	r5, #1
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  98              		.loc 1 111 5 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 100              		.loc 1 108 17 view .LVU29
ARM GAS  /tmp/ccZMW3We.s 			page 5


 101 003c 0D70     		strb	r5, [r1]
 109:src/display.c **** 	}
 102              		.loc 1 109 3 is_stmt 1 view .LVU30
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 103              		.loc 1 111 2 view .LVU31
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 104              		.loc 1 111 5 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 107              		.loc 1 111 19 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 113 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 114:src/display.c **** 
 115:src/display.c **** 
 116:src/display.c **** /* Table of error messages.
 117:src/display.c ****  * These consist of a double string.  The first is displayed in the
 118:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 119:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 120:src/display.c ****  */
 121:src/display.c **** void error_message(const unsigned int e) 
 122:src/display.c **** {
 123:src/display.c **** #define MSG1(top) top "\0"
 124:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 125:src/display.c **** 
 126:src/display.c **** 	// NB: this MUST be in the same order as the error #defines in errors.h
 127:src/display.c **** 	static const char *const error_table[] = 
 128:src/display.c **** 	{
 129:src/display.c **** 		// manually get the order correct!
 130:src/display.c **** 		MSG2("Running", "ProGraMm"),
 131:src/display.c **** 		MSG1("Domain"),
 132:src/display.c **** 		MSG2("Bad time", "or dAtE"),
 133:src/display.c **** 		MSG2("Undefined", "Op-COdE"),
ARM GAS  /tmp/ccZMW3We.s 			page 6


 134:src/display.c **** 		MSG1("+\237"),
 135:src/display.c **** 		MSG1("-\237"),
 136:src/display.c **** 		MSG2("No such", "LAbEL"),
 137:src/display.c **** 		MSG2("Illegal", "OPErAtion"),
 138:src/display.c **** 		MSG1("Out of range"),
 139:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 140:src/display.c **** 		MSG2("Bad digit", "1"),
 141:src/display.c **** 		MSG2("Too long", "1"),
 142:src/display.c **** #else
 143:src/display.c **** 		MSG1("Bad digit"),
 144:src/display.c **** 		MSG1("Too long"),
 145:src/display.c **** #endif
 146:src/display.c **** 		MSG2("RAM is", "FuLL"),
 147:src/display.c **** 		MSG2("Stack", "CLASH"),
 148:src/display.c **** 		MSG1("Bad mode"),
 149:src/display.c **** 		MSG2("Word\006\006\006size", "too SMmALL"),
 150:src/display.c **** 		MSG2("Too few", "dAtA PointS"),
 151:src/display.c **** 		MSG2("Invalid", "ParaMmEtEr"),
 152:src/display.c **** 		MSG1("I/O"),
 153:src/display.c **** 		MSG2("Invalid", "dAtA"),
 154:src/display.c **** 		MSG2("Write", "ProtEctEd"),
 155:src/display.c **** 		MSG2("No root", "Found"),
 156:src/display.c **** 		MSG2("Matrix", "MmISMmAtCH"),
 157:src/display.c **** 		MSG1("Singular"),
 158:src/display.c **** 		MSG2("Flash is", "FuLL"),
 159:src/display.c **** 		MSG2("No crystal", "InStaLLEd"),
 160:src/display.c **** #ifndef SHIFT_EXPONENT
 161:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 162:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 163:src/display.c **** 		MSG2("Too\007\304 small", "1"),
 164:src/display.c **** #     else
 165:src/display.c **** 		MSG2("Too small", "1"),
 166:src/display.c **** #     endif
 167:src/display.c **** 		MSG2("Too big", "1"),
 168:src/display.c **** #  else
 169:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 170:src/display.c **** 		MSG1("Too\007\304 small"),
 171:src/display.c **** #     else
 172:src/display.c **** 		MSG1("Too small"),
 173:src/display.c **** #     endif
 174:src/display.c **** 		MSG1("Too big"),
 175:src/display.c **** #  endif
 176:src/display.c **** #endif
 177:src/display.c **** 		MSG2("\004 \035", "X"),		// Integral ~
 178:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 179:src/display.c **** 		MSG2("Interrupted", "X"),
 180:src/display.c **** #endif
 181:src/display.c **** 	};
 182:src/display.c **** #undef MSG1
 183:src/display.c **** #undef MSG2
 184:src/display.c **** #ifndef REALBUILD
 185:src/display.c **** 	static const char *const error_table_text[] =
 186:src/display.c **** 	{
 187:src/display.c **** 		" P r o g r a m ",
 188:src/display.c **** 		"",
 189:src/display.c **** 		" o r   d a t e ",
 190:src/display.c **** 		" O p - c o d e ",
ARM GAS  /tmp/ccZMW3We.s 			page 7


 191:src/display.c **** 		"",
 192:src/display.c **** 		"",
 193:src/display.c **** 		" L a b e l ",
 194:src/display.c **** 		" O p e r a t i o n ",
 195:src/display.c **** 		"",
 196:src/display.c **** 		"",
 197:src/display.c **** 		"",
 198:src/display.c **** 		" F u l l ",
 199:src/display.c **** 		" C l a s h ",
 200:src/display.c **** 		"",
 201:src/display.c **** 		" T o o   s m a l l ",
 202:src/display.c **** 		" D a t a   p o i n t s ",
 203:src/display.c **** 		" P a r a m e t e r ",
 204:src/display.c **** 		"",
 205:src/display.c **** 		" D a t a ",
 206:src/display.c **** 		" P r o t e c t e d ",
 207:src/display.c **** 		" F o u n d ",
 208:src/display.c **** 		" M i s m a t c h ",
 209:src/display.c **** 		"",
 210:src/display.c **** 		" F u l l ",
 211:src/display.c **** 		" I n s t a l l e d ",
 212:src/display.c **** #ifndef SHIFT_EXPONENT
 213:src/display.c **** 		"",
 214:src/display.c **** 		"",
 215:src/display.c **** #endif
 216:src/display.c **** 		"",
 217:src/display.c **** 	};
 218:src/display.c **** #endif
 219:src/display.c **** 
 220:src/display.c **** 	if (e != ERR_NONE || Running) {
 221:src/display.c **** 		const char *p = error_table[e];
 222:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 223:src/display.c **** 		if (*q == '\0')
 224:src/display.c **** 			q = S7_ERROR;
 225:src/display.c **** 		if (*q == 'X') {
 226:src/display.c **** 			DispMsg = p;
 227:src/display.c **** 			frozen_display();
 228:src/display.c **** 		}
 229:src/display.c **** 		else {
 230:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 231:src/display.c **** 			if (*q == '1')
 232:src/display.c **** 				q = CNULL;
 233:src/display.c **** #endif
 234:src/display.c **** 			message(p, q);
 235:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 236:src/display.c **** #ifndef REALBUILD
 237:src/display.c **** 			scopy(LastDisplayedNumber, error_table_text[e]);
 238:src/display.c **** #endif
 239:src/display.c **** 		}
 240:src/display.c **** #ifdef INFRARED
 241:src/display.c **** 		if (Tracing) {
 242:src/display.c **** 			if (*q == 'X')
 243:src/display.c **** 				print_reg(regX_idx, p, 0);
 244:src/display.c **** 			else {
 245:src/display.c **** 				print_tab(0);
 246:src/display.c **** 				print_line(p, 0);
 247:src/display.c **** 				print(' ');
ARM GAS  /tmp/ccZMW3We.s 			page 8


 248:src/display.c **** 				while (*q != '\0') {
 249:src/display.c **** 					int c = *q;
 250:src/display.c **** 					if (c >= 'A')
 251:src/display.c **** 						c |= 0x60; // ASCII lower case
 252:src/display.c **** 					print(c);
 253:src/display.c **** 					if (c == 'm' /* || c == 'w' */)
 254:src/display.c **** 						++q;
 255:src/display.c **** 					++q;
 256:src/display.c **** 				}
 257:src/display.c **** 				print_advance( 0 );
 258:src/display.c **** 			}
 259:src/display.c **** 		}
 260:src/display.c **** #endif
 261:src/display.c **** 	}
 262:src/display.c **** }
 263:src/display.c **** 
 264:src/display.c **** 
 265:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 266:src/display.c ****  * display.
 267:src/display.c ****  */
 268:src/display.c **** #define D_TOP 64
 269:src/display.c **** #define D_TL 32
 270:src/display.c **** #define D_TR 8
 271:src/display.c **** #define D_MIDDLE 16
 272:src/display.c **** #define D_BL 4
 273:src/display.c **** #define D_BR 1
 274:src/display.c **** #define D_BOTTOM 2
 275:src/display.c **** 
 276:src/display.c **** #include "charset7.h"
 277:src/display.c **** 
 278:src/display.c **** #ifndef REALBUILD
 279:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 280:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 281:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 282:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 283:src/display.c **** 
 284:src/display.c **** static void set_mant_sign_dot()
 285:src/display.c **** {
 286:src/display.c **** 	LastDisplayedNumber[0]='-';
 287:src/display.c **** 	set_dot(MANT_SIGN);
 288:src/display.c **** }
 289:src/display.c **** 
 290:src/display.c **** static void clr_mant_sign_dot()
 291:src/display.c **** {
 292:src/display.c **** 	LastDisplayedNumber[0]=' ';
 293:src/display.c **** 	clr_dot(MANT_SIGN);
 294:src/display.c **** }
 295:src/display.c **** 
 296:src/display.c **** static void set_exp_sign_dot()
 297:src/display.c **** {
 298:src/display.c **** 	LastDisplayedExponent[0]='-';
 299:src/display.c **** 	set_dot(EXP_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_exp_sign_dot()
 303:src/display.c **** {
 304:src/display.c **** 	LastDisplayedExponent[0]=' ';
ARM GAS  /tmp/ccZMW3We.s 			page 9


 305:src/display.c **** 	clr_dot(EXP_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** #else
 309:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 310:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 311:src/display.c **** 
 312:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 313:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 314:src/display.c **** 
 315:src/display.c **** #endif
 316:src/display.c **** 
 317:src/display.c **** #ifndef REALBUILD
 318:src/display.c **** int getdig(int ch)
 319:src/display.c **** #else
 320:src/display.c **** static int getdig(int ch)
 321:src/display.c **** #endif
 322:src/display.c **** {
 323:src/display.c **** 	// perform index lookup
 324:src/display.c **** 	return digtbl[ch&0xff];
 325:src/display.c **** }
 326:src/display.c **** 
 327:src/display.c **** void dot(int n, int on) {
 328:src/display.c **** 	if (on)	set_dot(n);
 329:src/display.c **** 	else	clr_dot(n);
 330:src/display.c **** }
 331:src/display.c **** 
 332:src/display.c **** 
 333:src/display.c **** /* Set the decimal point *after* the indicated digit
 334:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 335:src/display.c ****  * of decimal.
 336:src/display.c ****  */
 337:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 338:src/display.c **** 	if (res) {
 339:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 340:src/display.c **** 	} else {
 341:src/display.c **** 		set_dot(posn+7);
 342:src/display.c **** 		if (decimal != DECIMAL_DOT)
 343:src/display.c **** 			set_dot(posn+8);
 344:src/display.c **** #ifndef REALBUILD
 345:src/display.c **** 	LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 346:src/display.c **** #endif
 347:src/display.c **** 	}
 348:src/display.c **** 	return res;
 349:src/display.c **** }
 350:src/display.c **** 
 351:src/display.c **** /* Set the digit group separator *before* the specified digit.
 352:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 353:src/display.c ****  * sep argument.
 354:src/display.c ****  */
 355:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 356:src/display.c **** 	if (sep == SEP_NONE)
 357:src/display.c **** 		return res;
 358:src/display.c **** 	if (res) {
 359:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 360:src/display.c **** 		else *res++ = '.';
 361:src/display.c **** 	} else {
ARM GAS  /tmp/ccZMW3We.s 			page 10


 362:src/display.c **** 		posn -= SEGS_PER_DIGIT;
 363:src/display.c **** 		set_dot(posn+7);
 364:src/display.c **** 		if (sep == SEP_COMMA)
 365:src/display.c **** 			set_dot(posn+8);
 366:src/display.c **** #ifndef REALBUILD
 367:src/display.c **** 		LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 368:src/display.c **** #endif
 369:src/display.c **** 	}
 370:src/display.c **** 	return res;
 371:src/display.c **** }
 372:src/display.c **** 
 373:src/display.c **** /* Set a digit in positions [base, base+6] */
 374:src/display.c **** static void set_dig(int base, int ch)
 375:src/display.c **** {
 136              		.loc 1 375 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 376:src/display.c **** 	int i;
 140              		.loc 1 376 2 view .LVU36
 377:src/display.c **** 	int c = getdig(ch);
 141              		.loc 1 377 2 view .LVU37
 142              	.LBB128:
 143              	.LBI128:
 318:src/display.c **** #else
 144              		.loc 1 318 5 view .LVU38
 145              	.LBB129:
 324:src/display.c **** }
 146              		.loc 1 324 2 view .LVU39
 324:src/display.c **** }
 147              		.loc 1 324 15 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 324:src/display.c **** }
 149              		.loc 1 324 18 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE129:
 152              	.LBE128:
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c **** 	if(base<SEGS_EXP_BASE)
 153              		.loc 1 379 4 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 375:src/display.c **** 	int i;
 155              		.loc 1 375 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB131:
 163              	.LBB130:
 324:src/display.c **** }
 164              		.loc 1 324 15 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 324:src/display.c **** }
 167              		.loc 1 324 15 view .LVU45
ARM GAS  /tmp/ccZMW3We.s 			page 11


 168              	.LBE130:
 169              	.LBE131:
 170              		.loc 1 379 2 is_stmt 1 view .LVU46
 171              		.loc 1 379 4 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 380:src/display.c **** 		LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 380 3 is_stmt 1 view .LVU48
 174              		.loc 1 380 28 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 380 37 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 380 28 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 380 37 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 380 37 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 381:src/display.c **** 	else
 382:src/display.c **** 		LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 383:src/display.c **** #endif
 384:src/display.c **** 	for (i=6; i>=0; i--)
 385:src/display.c **** 	{
 386:src/display.c **** //		dot(base, c & (1 << i));
 387:src/display.c **** 		if (c & (1 << i))
 388:src/display.c **** 			set_dot(base);
 196              		.loc 1 388 4 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 389:src/display.c **** 		else
 390:src/display.c **** 			clr_dot(base);
 391:src/display.c **** 		base++;
 199              		.loc 1 391 3 is_stmt 1 view .LVU55
 384:src/display.c **** 	{
 200              		.loc 1 384 18 view .LVU56
 384:src/display.c **** 	{
 201              		.loc 1 384 2 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 384:src/display.c **** 	{
 204              		.loc 1 384 2 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 388:src/display.c **** 		else
 208              		.loc 1 388 4 is_stmt 1 view .LVU59
ARM GAS  /tmp/ccZMW3We.s 			page 12


 390:src/display.c **** 		base++;
 209              		.loc 1 390 4 view .LVU60
 387:src/display.c **** 			set_dot(base);
 210              		.loc 1 387 7 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 387:src/display.c **** 			set_dot(base);
 212              		.loc 1 387 6 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 387:src/display.c **** 			set_dot(base);
 216              		.loc 1 387 3 is_stmt 1 view .LVU63
 387:src/display.c **** 			set_dot(base);
 217              		.loc 1 387 6 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 390:src/display.c **** 		base++;
 219              		.loc 1 390 4 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 391 3 is_stmt 1 view .LVU66
 384:src/display.c **** 	{
 223              		.loc 1 384 18 view .LVU67
 384:src/display.c **** 	{
 224              		.loc 1 384 2 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 384:src/display.c **** 	{
 227              		.loc 1 384 2 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 392:src/display.c **** 	}
 393:src/display.c **** }
 231              		.loc 1 393 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 382:src/display.c **** #endif
 235              		.loc 1 382 3 is_stmt 1 view .LVU71
 382:src/display.c **** #endif
 236              		.loc 1 382 45 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 382:src/display.c **** #endif
 238              		.loc 1 382 51 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 382:src/display.c **** #endif
 240              		.loc 1 382 30 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 382:src/display.c **** #endif
 242              		.loc 1 382 45 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 382:src/display.c **** #endif
 246              		.loc 1 382 51 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
ARM GAS  /tmp/ccZMW3We.s 			page 13


 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 394:src/display.c **** 
 395:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 396:src/display.c **** 	if (res) *res++ = ch;
 397:src/display.c **** 	else	set_dig(base, ch);
 398:src/display.c **** 	return res;
 399:src/display.c **** }
 400:src/display.c **** 
 401:src/display.c **** 
 402:src/display.c **** static void set_digits_string(const char *msg, int j) {
 403:src/display.c **** 	for (; *msg != '\0'; msg++) {
 404:src/display.c **** 		if (*msg == '.' || *msg == ',')
 405:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 406:src/display.c **** 		else {
 407:src/display.c **** 			set_dig_s(j, *msg, CNULL);
 408:src/display.c **** 			j += SEGS_PER_DIGIT;
 409:src/display.c **** 		}
 410:src/display.c **** 	}
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 414:src/display.c **** 	int i;
 415:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 416:src/display.c **** 
 417:src/display.c **** 	for (i=0; i<n && msg[i] != '\0'; i++)
 418:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** /* Force the exponent display
 422:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 423:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 424:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 425:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 426:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 427:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 428:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 429:src/display.c ****  */
ARM GAS  /tmp/ccZMW3We.s 			page 14


 430:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 431:src/display.c **** 	union {
 432:src/display.c **** 		char buf[4];
 433:src/display.c **** 		int i;
 434:src/display.c **** 	} u;
 435:src/display.c **** 	int negative;
 436:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 437:src/display.c **** 	int thousands;
 438:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 439:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
 440:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 441:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
 442:src/display.c **** #  else
 443:src/display.c **** 	const int show_large_exponent = 1;
 444:src/display.c **** #  endif
 445:src/display.c **** #else
 446:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 447:src/display.c **** 	int thousands;
 448:src/display.c **** #  endif
 449:src/display.c **** 	const int show_large_exponent = 0;
 450:src/display.c **** #endif
 451:src/display.c **** 
 452:src/display.c **** 	negative = flags & 2;
 453:src/display.c **** 	if (exp < 0) {
 454:src/display.c **** 		negative = 1;
 455:src/display.c **** 		exp = -exp;
 456:src/display.c **** 	}
 457:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 458:src/display.c **** 	thousands = exp / 1000;
 459:src/display.c **** #endif
 460:src/display.c **** 	if (res) {
 461:src/display.c **** #ifdef INCLUDE_YREG_CODE
 462:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 463:src/display.c **** 		if (thousands != 0) {
 464:src/display.c **** #else
 465:src/display.c **** 		if (exp > 999) {
 466:src/display.c **** #endif
 467:src/display.c **** 			if (!negative) *res++ = ':'; // Separator for large +ve exponents
 468:src/display.c **** 			// No exponent separator for large -ve exponents
 469:src/display.c **** 		}
 470:src/display.c **** 		else *res++ = 'e'; // Normal separator
 471:src/display.c **** #else
 472:src/display.c **** 		*res++ = 'e';
 473:src/display.c **** #endif
 474:src/display.c **** 		if (negative) *res++ = '-';
 475:src/display.c **** 	}
 476:src/display.c **** 	else {
 477:src/display.c **** 		if (negative) SET_EXP_SIGN;
 478:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 479:src/display.c **** 		if (thousands != 0) {
 480:src/display.c **** #else
 481:src/display.c **** 		if (exp > 999) {
 482:src/display.c **** #endif
 483:src/display.c **** 			if (!show_large_exponent
 484:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 485:src/display.c **** 			                         && (flags & 8) == 0
 486:src/display.c **** #endif
ARM GAS  /tmp/ccZMW3We.s 			page 15


 487:src/display.c **** 			                                            ) {
 488:src/display.c **** #ifdef REALBUILD
 489:src/display.c **** 				u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 490:src/display.c **** #else
 491:src/display.c **** 				scopy(u.buf, "HIG"); // More portable code
 492:src/display.c **** #endif
 493:src/display.c **** 				goto no_number;
 494:src/display.c **** 			}
 495:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 496:src/display.c **** 			else {
 497:src/display.c **** 				exp -= thousands * 1000;
 498:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 499:src/display.c **** 				if (flags & 16) {
 500:src/display.c **** 					// Cut off the last three digits of the mantissa.
 501:src/display.c **** 					int i;
 502:src/display.c **** 
 503:src/display.c **** 					for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 504:src/display.c **** 						// Clear digits and separators
 505:src/display.c **** 						clr_dot(i);
 506:src/display.c **** 					set_dig(9 * SEGS_PER_DIGIT, '>');
 507:src/display.c **** 				}
 508:src/display.c **** #  endif
 509:src/display.c **** 				if (negative) {
 510:src/display.c **** 					CLR_EXP_SIGN;
 511:src/display.c **** 					set_dig(10 * SEGS_PER_DIGIT, '-');
 512:src/display.c **** 				}
 513:src/display.c **** 				set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 514:src/display.c **** 				flags = 1;
 515:src/display.c **** 			}
 516:src/display.c **** #endif
 517:src/display.c **** 		}
 518:src/display.c **** 	}
 519:src/display.c **** #ifdef REALBUILD
 520:src/display.c **** 	u.i = 0; // Smaller ARM code
 521:src/display.c **** #else
 522:src/display.c **** 	xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 523:src/display.c **** #endif
 524:src/display.c **** 	if (flags & 5) {
 525:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 526:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 527:src/display.c **** 		if (flags & 4) { // Pad exponent with spaces instead of zeros
 528:src/display.c **** 			int i;
 529:src/display.c **** 
 530:src/display.c **** 			for (i = 0; i < 2; ++i) {
 531:src/display.c **** 				if (u.buf[i] == '0')
 532:src/display.c **** 					u.buf[i] = ' ';
 533:src/display.c **** 				else
 534:src/display.c **** 					break;
 535:src/display.c **** 			}
 536:src/display.c **** 			if (i != 0 && negative) {
 537:src/display.c **** 				// Move minus sign to right in front of exponent
 538:src/display.c **** 				CLR_EXP_SIGN;
 539:src/display.c **** 				u.buf[i - 1] = '-';
 540:src/display.c **** 			}
 541:src/display.c **** 		}
 542:src/display.c **** #endif
 543:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 16


 544:src/display.c **** 	else
 545:src/display.c **** 		num_arg(u.buf, exp);
 546:src/display.c **** no_number:
 547:src/display.c **** 	set_exp_digits_string(u.buf, res);
 548:src/display.c **** }
 549:src/display.c **** 
 550:src/display.c **** static void carry_overflow(void) {
 551:src/display.c **** 	const int base = SEGS_EXP_BASE;
 552:src/display.c **** 	int c;
 553:src/display.c **** 	unsigned int b;
 554:src/display.c **** 
 555:src/display.c **** 	// Figure out the base
 556:src/display.c **** 	switch (State2.smode) {
 557:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 558:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
 559:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
 560:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
 561:src/display.c **** 	default:	b = UState.int_base+1;	break;
 562:src/display.c **** 	}
 563:src/display.c **** 
 564:src/display.c **** 	// Display the base as the first exponent digit
 565:src/display.c **** 	if (b > 10 && b < 16)
 566:src/display.c **** 		SET_EXP_SIGN;
 567:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 568:src/display.c **** 	set_dig(base, c);
 569:src/display.c **** 
 570:src/display.c **** 	// Carry and overflow are the next two exponent digits if they are set
 571:src/display.c **** 	if (get_carry())
 572:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 573:src/display.c **** 	if (get_overflow())
 574:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 575:src/display.c **** }
 576:src/display.c **** 
 577:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res);
 578:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res);
 579:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 580:src/display.c **** // replace_char() isn't used or implemented unless HMS Y register display is enabled
 581:src/display.c **** static void replace_char(char *a, char b, char c) { }
 582:src/display.c **** #endif
 583:src/display.c **** 
 584:src/display.c **** /* Display the annunicator text line.
 585:src/display.c ****  * Care needs to be taken to keep things aligned.
 586:src/display.c ****  * Spaces are 5 pixels wide, \006 is a single pixel space.
 587:src/display.c ****  */
 588:src/display.c **** static void annunciators(void) {
 589:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 590:src/display.c **** 	char buf[42], *p = buf, *q="";
 591:src/display.c **** 	int n;
 592:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 593:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 594:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 595:src/display.c **** 	// that's set to 0 will be optimized away. This way it's easier to make a
 596:src/display.c **** 	// feature run-time configurable if needed.
 597:src/display.c **** #ifdef INCLUDE_YREG_CODE
 598:src/display.c **** #  ifdef YREG_ALWAYS_ON
 599:src/display.c **** 	const int yreg_enabled = 1;
 600:src/display.c **** #  else
ARM GAS  /tmp/ccZMW3We.s 			page 17


 601:src/display.c **** 	const int yreg_enabled = UState.show_y;
 602:src/display.c **** #  endif
 603:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 604:src/display.c **** 	const int yreg_hms = 1;
 605:src/display.c **** #  else
 606:src/display.c **** 	const int yreg_hms = 0;
 607:src/display.c **** #  endif
 608:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 609:src/display.c **** 	const int yreg_fract = 1;
 610:src/display.c **** #  else
 611:src/display.c **** 	const int yreg_fract = 0;
 612:src/display.c **** #  endif
 613:src/display.c **** #else
 614:src/display.c **** 	const int yreg_enabled = 0;
 615:src/display.c **** 	const int yreg_hms = 0;
 616:src/display.c **** 	const int yreg_fract = 0;
 617:src/display.c **** #endif
 618:src/display.c **** #ifdef RP_PREFIX
 619:src/display.c **** 	const int rp_prefix = 1;
 620:src/display.c **** #else
 621:src/display.c **** 	const int rp_prefix = 0;
 622:src/display.c **** 	const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 623:src/display.c **** #endif
 624:src/display.c **** // Indicates whether font escape code is compiled in.
 625:src/display.c **** // This variable will always be set at compile time.
 626:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 627:src/display.c **** 	const int has_FONT_ESCAPE = 1;
 628:src/display.c **** #else
 629:src/display.c **** 	const int has_FONT_ESCAPE = 0;
 630:src/display.c **** #endif
 631:src/display.c **** 
 632:src/display.c **** 	xset(buf, '\0', sizeof(buf));
 633:src/display.c **** 
 634:src/display.c **** 	if (is_intmode()) {
 635:src/display.c **** #ifdef SHOW_STACK_SIZE
 636:src/display.c **** 		if (shift_char == ' ') {
 637:src/display.c **** 			*p++ = '\007';
 638:src/display.c **** 			*p++ = '\346';
 639:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 640:src/display.c **** 		}
 641:src/display.c **** 		else
 642:src/display.c **** #endif
 643:src/display.c **** 		{
 644:src/display.c **** 			*p++ = shift_char;
 645:src/display.c **** 			*p++ = '\006';
 646:src/display.c **** 		}
 647:src/display.c **** 
 648:src/display.c **** 		switch(int_mode()) {
 649:src/display.c **** 		default:
 650:src/display.c **** 		case MODE_2COMP:	q = "2c\006";		break;
 651:src/display.c **** 		case MODE_UNSIGNED:	q = "un\006";		break;
 652:src/display.c **** 		case MODE_1COMP:	q = "\0061c\006\006";	break;
 653:src/display.c **** 		case MODE_SGNMANT:	q = "sm";		break;
 654:src/display.c **** 		}
 655:src/display.c **** 		q = scopy(p, q);
 656:src/display.c **** 		*q++ = '\006';
 657:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
ARM GAS  /tmp/ccZMW3We.s 			page 18


 658:src/display.c **** 
 659:src/display.c **** 		if (IntMaxWindow > 0) {
 660:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 661:src/display.c **** 			if (*q == '1')
 662:src/display.c **** 				n += 2;
 663:src/display.c **** 			if (q[1] == '1')
 664:src/display.c **** 				n += 2;
 665:src/display.c **** 			while (n-- > 0)
 666:src/display.c **** 				*p++ = '\006';
 667:src/display.c **** 
 668:src/display.c **** 			for (n = IntMaxWindow; n >= 0; n--)
 669:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 670:src/display.c **** 		}
 671:src/display.c **** 	}
 672:src/display.c **** 	else if (!yreg_enabled
 673:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 674:src/display.c **** 		 || shift_char != ' ' || State2.cmplx
 675:src/display.c **** #endif
 676:src/display.c **** 		 ) {
 677:src/display.c **** // The stack size indicator is displayed on the right if date mode indication is enabled
 678:src/display.c **** // because the 'D' in small font doesn't look good next to the date mode indicator.
 679:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 680:src/display.c **** 		if (shift_char == ' ') {
 681:src/display.c **** 			*p++ = '\007';
 682:src/display.c **** 			*p++ = '\342';
 683:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 684:src/display.c **** 			*p++ = '\007';
 685:src/display.c **** 			*p++ = '\344';
 686:src/display.c **** 			*p++ = (is_dblmode() ? 'D' : ' ');
 687:src/display.c **** 		}
 688:src/display.c **** 		else
 689:src/display.c **** #endif
 690:src/display.c **** 		if (shift_char != ' ' || !is_dblmode()) {
 691:src/display.c **** 			*p++ = shift_char;
 692:src/display.c **** 			*p++ = '\006';
 693:src/display.c **** 		}
 694:src/display.c **** 		else {
 695:src/display.c **** 			*p++ = 'D';
 696:src/display.c **** 		}
 697:src/display.c **** 
 698:src/display.c **** 		if (State2.cmplx) {
 699:src/display.c **** 			*p++ = ' ';
 700:src/display.c **** 			*p = '\024';
 701:src/display.c **** 			goto skip;
 702:src/display.c **** 		}
 703:src/display.c **** 		if (State2.arrow) {
 704:src/display.c **** 			*p++ = ' ';
 705:src/display.c **** 			*p = '\015';
 706:src/display.c **** 			goto skip;
 707:src/display.c **** 		}
 708:src/display.c **** 
 709:src/display.c **** 		if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 710:src/display.c **** 			if (State2.wascomplex) {
 711:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 712:src/display.c **** 			}
 713:src/display.c **** 			else if (rp_prefix) {
 714:src/display.c **** 				if (RectPolConv == 1) {
ARM GAS  /tmp/ccZMW3We.s 			page 19


 715:src/display.c **** 					q = "\007\306<";
 716:src/display.c **** 				}
 717:src/display.c **** 				else {
 718:src/display.c **** 					q = "\007\306y";
 719:src/display.c **** 				}
 720:src/display.c **** 			}
 721:src/display.c **** 			p = scopy(buf, q);
 722:src/display.c **** 
 723:src/display.c **** 			goto display_yreg;
 724:src/display.c **** 		}
 725:src/display.c **** 
 726:src/display.c **** 		switch (UState.date_mode) {
 727:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 728:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 729:src/display.c **** 		case DATE_DMY:	q = "d.my\006\006";	break;
 730:src/display.c **** #endif
 731:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 732:src/display.c **** 		case DATE_YMD:	q = "y.md\006\006";	break;
 733:src/display.c **** #endif
 734:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 735:src/display.c **** 		case DATE_MDY:	q = "m.dy\006\006";	break;
 736:src/display.c **** #endif
 737:src/display.c **** #endif
 738:src/display.c **** 		default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 739:src/display.c **** 		}
 740:src/display.c **** 		p = scopy(p, q);
 741:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 742:src/display.c **** 		if (get_trig_mode() == TRIG_GRAD) {
 743:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 744:src/display.c **** 		}
 745:src/display.c **** #else
 746:src/display.c **** 		p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 747:src/display.c **** 		*p++ = '\007';
 748:src/display.c **** 		*p++ = '\342';
 749:src/display.c **** 		*p =  (UState.stack_depth ? ':' : '.');
 750:src/display.c **** #endif
 751:src/display.c **** 	}
 752:src/display.c **** 	else { // yreg_enabled
 753:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 754:src/display.c **** 		if (State2.cmplx) {
 755:src/display.c **** 			*p++ = '\007';
 756:src/display.c **** 			*p++ = '\344';
 757:src/display.c **** 			*p++ = shift_char;
 758:src/display.c **** 			q = "\024";
 759:src/display.c **** 		}
 760:src/display.c **** 		else if (shift_char != ' ') {
 761:src/display.c **** 			*p++ = '\007';
 762:src/display.c **** 			*p++ = '\307';
 763:src/display.c **** 			*p++ = shift_char;
 764:src/display.c **** 			goto no_copy;
 765:src/display.c **** 		}
 766:src/display.c **** 		else
 767:src/display.c **** #endif
 768:src/display.c **** 		if (State2.wascomplex) {
 769:src/display.c **** 			q = "\007\207i";
 770:src/display.c **** 		}
 771:src/display.c **** 		else if (rp_prefix && RectPolConv == 1) {
ARM GAS  /tmp/ccZMW3We.s 			page 20


 772:src/display.c **** 			q = "\007\307<";
 773:src/display.c **** 		}
 774:src/display.c **** 		else if (rp_prefix && RectPolConv == 2) {
 775:src/display.c **** 			q = "\007\307y";
 776:src/display.c **** 		}
 777:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 778:src/display.c **** 		else if (get_trig_mode() == TRIG_GRAD) {
 779:src/display.c **** 			q = "\007\207\007";
 780:src/display.c **** 		}
 781:src/display.c **** #endif
 782:src/display.c **** 		else {
 783:src/display.c **** #ifndef SHOW_STACK_SIZE
 784:src/display.c **** 			q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 785:src/display.c **** #else
 786:src/display.c **** 			if (is_dblmode()) {
 787:src/display.c **** 				*p++ = '\007';
 788:src/display.c **** 				*p++ = '\342';
 789:src/display.c **** 				*p++ = (UState.stack_depth ? ':' : '.');
 790:src/display.c **** 				q = "\007\345D";
 791:src/display.c **** 			}
 792:src/display.c **** 			else {
 793:src/display.c **** 				q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 794:src/display.c **** 			}
 795:src/display.c **** #endif
 796:src/display.c **** 		}
 797:src/display.c **** 		p = scopy(p, q);
 798:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 799:src/display.c **** 	no_copy:
 800:src/display.c **** #endif
 801:src/display.c **** 
 802:src/display.c **** 		if (State2.arrow) {
 803:src/display.c **** 			scopy(p, "\007\204\006\015");
 804:src/display.c **** 		} else if (State2.runmode) {
 805:src/display.c **** 			decNumber y;
 806:src/display.c **** display_yreg:
 807:src/display.c **** 			/* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 808:src/display.c **** 			 * ShowRegister+1 would contain the complex component, however if the register being
 809:src/display.c **** 			 * examined is on the stack and there is a command line present, the stack will be lifted
 810:src/display.c **** 			 * after we execute so we need to show ShowRegister instead.
 811:src/display.c **** 			 */
 812:src/display.c **** 			getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 813:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 814:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 815:src/display.c **** 			if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 816:src/display.c **** 				if (yreg_hms && State2.hms) {
 817:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 818:src/display.c **** 
 819:src/display.c **** 					xset(buf, '\0', sizeof(buf));
 820:src/display.c **** 					UState.nothousands = 1;
 821:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 822:src/display.c **** 					UState.nothousands = saved_nothousands;
 823:src/display.c **** 					// First replace the '@' character with the degree symbol
 824:src/display.c **** 					// Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow space
 825:src/display.c **** 					// then remove the second symbol (") and the overflow or underflow signs,
 826:src/display.c **** 					// then remove the fractional part of the seconds.
 827:src/display.c **** 					p = "@\005 \006\"\0.\0";
 828:src/display.c **** 					while (*p) {
ARM GAS  /tmp/ccZMW3We.s 			page 21


 829:src/display.c **** 						replace_char(buf, p[0], p[1]);
 830:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 831:src/display.c **** 							goto skip;
 832:src/display.c **** 						}
 833:src/display.c **** 						p += 2;
 834:src/display.c **** 					}
 835:src/display.c **** 					goto skip;
 836:src/display.c **** 				}
 837:src/display.c **** 				if (yreg_fract && UState.fract
 838:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 839:src/display.c **** 				    && !State2.cmplx
 840:src/display.c **** #endif
 841:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 842:src/display.c **** 				    && !(rp_prefix && RectPolConv == 1)
 843:src/display.c **** #endif
 844:src/display.c **** 				    && set_x_fract(&y, p)) {
 845:src/display.c **** 					char ltgteq;
 846:src/display.c **** 
 847:src/display.c **** 					q = find_char(buf, '\0') - 2;
 848:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 849:src/display.c **** 					ltgteq = *q;
 850:src/display.c **** 					switch (ltgteq) {
 851:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 852:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 853:src/display.c **** 					}
 854:src/display.c **** 					scopy(q, "\007\344?");
 855:src/display.c **** 					q[2] = ltgteq;
 856:src/display.c **** 
 857:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 858:src/display.c **** 						goto skip;
 859:src/display.c **** 					}
 860:src/display.c **** 					q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 861:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 862:src/display.c **** 						goto skip;
 863:src/display.c **** 					}
 864:src/display.c **** 					xset(p, '\0', sizeof(buf) - (p - buf));
 865:src/display.c **** 				}
 866:src/display.c **** 			}
 867:src/display.c **** 			for (n=DISPLAY_DIGITS; n>1; ) {
 868:src/display.c **** 				int extra_pixels;
 869:src/display.c **** 
 870:src/display.c **** 				set_x_dn(&y, p, &n);
 871:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 872:src/display.c **** 				if (extra_pixels <= 0)
 873:src/display.c **** 					break;
 874:src/display.c **** 
 875:src/display.c **** 				xset(p, '\0', n+10);
 876:src/display.c **** 
 877:src/display.c **** 				n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 878:src/display.c **** 			}
 879:src/display.c **** 		}
 880:src/display.c **** 	}
 881:src/display.c **** 
 882:src/display.c **** skip:	set_status(buf);
 883:src/display.c **** }
 884:src/display.c **** 
 885:src/display.c **** static void disp_x(const char *p) {
ARM GAS  /tmp/ccZMW3We.s 			page 22


 886:src/display.c **** 	int i;
 887:src/display.c **** 	int gotdot = -1;
 888:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 889:src/display.c **** 	const
 890:src/display.c **** #endif
 891:src/display.c **** 	      int segs_per_digit = SEGS_PER_DIGIT;
 892:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 893:src/display.c **** 	int overflow_to_left = 0;
 894:src/display.c **** #endif
 895:src/display.c **** 
 896:src/display.c **** 	if (*p == '-') {
 897:src/display.c **** 		SET_MANT_SIGN;
 898:src/display.c **** 		p++;
 899:src/display.c **** 	}
 900:src/display.c **** 
 901:src/display.c **** 	if (is_intmode()) {
 902:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 903:src/display.c **** 			set_dig(i, *p);
 904:src/display.c **** 			i += SEGS_PER_DIGIT;
 905:src/display.c **** 		}
 906:src/display.c **** 		carry_overflow();
 907:src/display.c **** 	} else {
 908:src/display.c **** 		set_separator_decimal_modes();
 909:src/display.c **** 
 910:src/display.c **** 		i = 0;
 911:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 912:src/display.c **** 		if ( CmdLineDot > 1 ) {
 913:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 914:src/display.c **** 			const
 915:src/display.c **** #  endif
 916:src/display.c **** 			      int double_dot = 0;
 917:src/display.c **** 			int j;
 918:src/display.c **** 
 919:src/display.c **** 			for (j=0; p[j] != '\0'; j++) {
 920:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 921:src/display.c **** 					gotdot = j;
 922:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 923:src/display.c **** 					double_dot = (p[j+1] == '.');
 924:src/display.c **** #  endif
 925:src/display.c **** 				}
 926:src/display.c **** 			}
 927:src/display.c **** 			j -= DISPLAY_DIGITS + double_dot;
 928:src/display.c **** 			if (j > 0) {
 929:src/display.c **** 				p += j + 1;
 930:src/display.c **** 				i = SEGS_PER_DIGIT;
 931:src/display.c **** 				if (gotdot <= j) {
 932:src/display.c **** 					gotdot = 0;
 933:src/display.c **** 					if (double_dot)
 934:src/display.c **** 						p++;
 935:src/display.c **** 				}
 936:src/display.c **** 				else if (*p == '.') {
 937:src/display.c **** 					gotdot = 0;
 938:src/display.c **** 					p++;
 939:src/display.c **** 					if (!double_dot)
 940:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 941:src/display.c **** 				}
 942:src/display.c **** 				else gotdot = -1;
ARM GAS  /tmp/ccZMW3We.s 			page 23


 943:src/display.c **** 				set_dig(0, '<');
 944:src/display.c **** 				overflow_to_left = 1;
 945:src/display.c **** 			}
 946:src/display.c **** 			else gotdot = -1;
 947:src/display.c **** 		}
 948:src/display.c **** #endif
 949:src/display.c **** 
 950:src/display.c **** 		for (; *p != '\0' && *p != 'E'
 951:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 952:src/display.c **** 		                               && *p != 'D'
 953:src/display.c **** #endif
 954:src/display.c **** 		                                           ; p++) {
 955:src/display.c **** 			if (*p == '.') {
 956:src/display.c **** 				if (gotdot < 0)
 957:src/display.c **** 					gotdot = i;
 958:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 959:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 960:src/display.c **** 				if ( *(p+1) == '.' || ( i != gotdot ) ) {
 961:src/display.c **** 					if ( *(p+1) == '.' ) {
 962:src/display.c **** 						p++;
 963:src/display.c **** 					}
 964:src/display.c **** #  else
 965:src/display.c **** 				if ( i != gotdot ) {
 966:src/display.c **** #  endif
 967:src/display.c **** 					set_dig(i, '/'); // put in a fraction separator
 968:src/display.c **** 					i += segs_per_digit;
 969:src/display.c **** 				}
 970:src/display.c **** 				else {
 971:src/display.c **** 					if ( CmdLineDot > 1 ) {
 972:src/display.c **** 						i += segs_per_digit;
 973:src/display.c **** 					}
 974:src/display.c **** 					else {
 975:src/display.c **** 						set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
 976:src/display.c **** //						i += SEGS_PER_DIGIT;
 977:src/display.c **** 					}
 978:src/display.c **** 				}
 979:src/display.c **** #else
 980:src/display.c **** 				if (i > 0)
 981:src/display.c **** 					set_decimal(i - segs_per_digit, DecimalMode, CNULL);
 982:src/display.c **** 				else {
 983:src/display.c **** 					set_dig(i, '0');
 984:src/display.c **** 					set_decimal(i, DecimalMode, CNULL);
 985:src/display.c **** 					i += segs_per_digit;
 986:src/display.c **** 				}
 987:src/display.c **** #endif
 988:src/display.c **** 			} else {
 989:src/display.c **** 				set_dig(i, *p);
 990:src/display.c **** 				i += segs_per_digit;
 991:src/display.c **** 			}
 992:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 993:src/display.c **** 			if (i == SEGS_EXP_BASE)
 994:src/display.c **** 				segs_per_digit = SEGS_PER_EXP_DIGIT;
 995:src/display.c **** #endif
 996:src/display.c **** 		}
 997:src/display.c **** 
 998:src/display.c **** 		/* Implement a floating comma */
 999:src/display.c **** 		if (gotdot < 0)
ARM GAS  /tmp/ccZMW3We.s 			page 24


1000:src/display.c **** 			gotdot = i;
1001:src/display.c **** 		for (;;) {
1002:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
1003:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
1004:src/display.c **** 				break;
1005:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1006:src/display.c **** 			if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1007:src/display.c **** 				break;
1008:src/display.c **** #endif
1009:src/display.c **** 			set_separator(gotdot, SeparatorMode, CNULL);
1010:src/display.c **** 		}
1011:src/display.c **** 
1012:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1013:src/display.c **** 		if (*p == 'E' || *p == 'D') {
1014:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1015:src/display.c **** 			int flags = 8;
1016:src/display.c **** #  else
1017:src/display.c **** 			int flags = 12;
1018:src/display.c **** #  endif
1019:src/display.c **** 
1020:src/display.c **** 			if (*p == 'D')
1021:src/display.c **** 				flags |= 2;
1022:src/display.c **** 			if (i > 10 * SEGS_PER_DIGIT)
1023:src/display.c **** 				flags |= 16;
1024:src/display.c **** 			set_exp(s_to_i(p+1), flags, CNULL);
1025:src/display.c **** 		}
1026:src/display.c **** #else
1027:src/display.c **** 		if (*p == 'E') {
1028:src/display.c **** 			p++;
1029:src/display.c **** 			// set_exp() takes care of setting the exponent sign
1030:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1031:src/display.c **** 			set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1032:src/display.c **** #  else
1033:src/display.c **** 			set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1034:src/display.c **** #  endif
1035:src/display.c **** 		} 
1036:src/display.c **** #endif
1037:src/display.c **** 	}
1038:src/display.c **** }
1039:src/display.c **** 
1040:src/display.c **** const char DIGITS[] = "0123456789ABCDEF";
1041:src/display.c **** 
1042:src/display.c **** static void set_int_x(const long long int value, char *res) {
1043:src/display.c **** 	const int ws = word_size();
1044:src/display.c **** 	unsigned int b;
1045:src/display.c **** 	long long int vs = value;
1046:src/display.c **** 	unsigned long long int v;
1047:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1048:src/display.c **** 	int i, j, k;
1049:src/display.c **** 	int sign = 0;
1050:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1051:src/display.c **** 
1052:src/display.c **** 	switch (State2.smode) {
1053:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1054:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1055:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1056:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
ARM GAS  /tmp/ccZMW3We.s 			page 25


1057:src/display.c **** 	default:	b = int_base();	break;
1058:src/display.c **** 	}
1059:src/display.c **** 
1060:src/display.c **** 	if (!res) {
1061:src/display.c **** 		IntMaxWindow = 0;
1062:src/display.c **** 		carry_overflow();
1063:src/display.c **** 	}
1064:src/display.c **** 
1065:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1066:src/display.c **** 		v = extract_value(value, &sign);
1067:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1068:src/display.c **** 			v = value;
1069:src/display.c **** 		if (v == 0) {
1070:src/display.c **** 			if (sign)
1071:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1072:src/display.c **** 			set_dig_s(dig, '0', res);
1073:src/display.c **** 			return;
1074:src/display.c **** 		} else
1075:src/display.c **** 			for (i=0; v != 0; i++) {
1076:src/display.c **** 				const int r = v % b;
1077:src/display.c **** 				v /= b;
1078:src/display.c **** 				buf[i] = DIGITS[r];
1079:src/display.c **** 			}
1080:src/display.c **** 	} else {
1081:src/display.c **** 		// Truncate down to the current word size and then sign extend it back
1082:src/display.c **** 		if (ws < 64) {
1083:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
1084:src/display.c **** 			vs &= mask;
1085:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
1086:src/display.c **** 				vs |= ~mask;
1087:src/display.c **** 		}
1088:src/display.c **** 
1089:src/display.c **** 		if (!UState.leadzero && vs == 0) {
1090:src/display.c **** 			set_dig_s(dig, '0', res);
1091:src/display.c **** 			return;
1092:src/display.c **** 		} else if (!UState.leadzero) {
1093:src/display.c **** 			v = (unsigned long long int)vs;
1094:src/display.c **** 			for (i=0; v != 0; i++) {
1095:src/display.c **** 				const int r = v % b;
1096:src/display.c **** 				v /= b;
1097:src/display.c **** 				buf[i] = DIGITS[r];
1098:src/display.c **** 			}
1099:src/display.c **** 		} else {
1100:src/display.c **** 			int n;
1101:src/display.c **** 			const unsigned int b1 = b >> 1;
1102:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1103:src/display.c **** 			v = (unsigned long long int)vs;
1104:src/display.c **** 
1105:src/display.c **** 			n = (ws + fac) / (fac+1);
1106:src/display.c **** 			for (i=0; i<n; i++) {
1107:src/display.c **** 				const int r = v % b;
1108:src/display.c **** 				v /= b;
1109:src/display.c **** 				buf[i] = DIGITS[r];
1110:src/display.c **** 			}
1111:src/display.c **** 		}
1112:src/display.c **** 	}
1113:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 26


1114:src/display.c **** 	/* At this point i is the number of digits in the output */
1115:src/display.c **** 	if (res) {
1116:src/display.c **** 		if (sign) *res++ = '-';
1117:src/display.c **** 		while (--i >= 0)
1118:src/display.c **** 			*res++ = buf[i];
1119:src/display.c **** 	} else {
1120:src/display.c **** #if 0
1121:src/display.c **** 		set_separator_decimal_modes();
1122:src/display.c **** 
1123:src/display.c **** 		// Allows configuration of digit grouping per base
1124:src/display.c **** 		static const char grouping[] = 
1125:src/display.c **** 			{       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1126:src/display.c **** 		      //	   2     3     4     5     6     7     8
1127:src/display.c **** 		          0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1128:src/display.c **** 		      //     9    10    11    12    13    14    15    16
1129:src/display.c **** 		const int shift = SeparatorMode == SEP_NONE ? 12 
1130:src/display.c **** 			        : grouping[b - 2] >> 4;
1131:src/display.c **** 		const int group = SeparatorMode == SEP_NONE ? 16
1132:src/display.c **** 				: (grouping[b - 2] & 0xf);
1133:src/display.c **** #else
1134:src/display.c **** 		// Less flexible but shorter
1135:src/display.c **** 		const int shift = b == 2 ? 8 : 12;
1136:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
1137:src/display.c **** 				: b == 16 ? 2 : 3;
1138:src/display.c **** 		set_separator_decimal_modes();
1139:src/display.c **** #endif
1140:src/display.c **** 		IntMaxWindow = (i - 1) / shift;
1141:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
1142:src/display.c **** 			State2.window = 0;
1143:src/display.c **** 		buf[i] = '\0';
1144:src/display.c **** 
1145:src/display.c **** 		j = State2.window * shift;	// digits at a time
1146:src/display.c **** 		for (k = 0; k < 12; k++)
1147:src/display.c **** 			if (buf[j + k] == '\0')
1148:src/display.c **** 				break;
1149:src/display.c **** 		for (i=0; --k >= 0; i++) {
1150:src/display.c **** 			int ch = buf[j++];
1151:src/display.c **** 			if (i >= shift)
1152:src/display.c **** 				ch -= 030;
1153:src/display.c **** 			set_dig(dig, ch);
1154:src/display.c **** 			if ((j % group) == 0 && k != 0)
1155:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
1156:src/display.c **** 			dig -= SEGS_PER_DIGIT;
1157:src/display.c **** 		}
1158:src/display.c **** 		if (sign) {
1159:src/display.c **** 			if (dig >= 0)
1160:src/display.c **** 				set_dig(dig, '-');
1161:src/display.c **** 			else	SET_MANT_SIGN;
1162:src/display.c **** 		}
1163:src/display.c **** 	}
1164:src/display.c **** }
1165:src/display.c **** 
1166:src/display.c **** /* Handle special cases.
1167:src/display.c ****  * return non-zero if the number is special.
1168:src/display.c ****  */
1169:src/display.c **** static int check_special_dn(const decNumber *x, char *res) {
1170:src/display.c **** 	if (decNumberIsSpecial(x)) {
ARM GAS  /tmp/ccZMW3We.s 			page 27


1171:src/display.c **** 		if (decNumberIsNaN(x)) {
1172:src/display.c **** 			if (res) {
1173:src/display.c **** 				scopy(res, "NaN");
1174:src/display.c **** 			} else {
1175:src/display.c **** 				set_digits_string(S7_NaN, 0);
1176:src/display.c **** #ifndef REALBUILD
1177:src/display.c **** 				scopy(LastDisplayedNumber, S7_NaN_Text);
1178:src/display.c **** 				forceDispPlot=0;
1179:src/display.c **** #endif
1180:src/display.c **** 			}
1181:src/display.c **** 			return 1;
1182:src/display.c **** 		} else {
1183:src/display.c **** 			if (decNumberIsNegative(x)) {
1184:src/display.c **** 				if (res) *res++ = '-';
1185:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
1186:src/display.c **** 			}
1187:src/display.c **** 			if (res)
1188:src/display.c **** 				*res++ = '\237';
1189:src/display.c **** 			else {
1190:src/display.c **** 				set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1191:src/display.c **** #ifndef REALBUILD
1192:src/display.c **** 				if (decNumberIsNegative(x)) {
1193:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1194:src/display.c **** 				}
1195:src/display.c **** 				else {
1196:src/display.c **** 					scopy(LastDisplayedNumber, S7_INF_Text);
1197:src/display.c **** 				}
1198:src/display.c **** 				forceDispPlot=0;
1199:src/display.c **** #endif
1200:src/display.c **** 			}
1201:src/display.c **** 			return 1;
1202:src/display.c **** 		}
1203:src/display.c **** 	}
1204:src/display.c **** 	return 0;
1205:src/display.c **** }
1206:src/display.c **** 
1207:src/display.c **** 
1208:src/display.c **** /* Extract the two lowest integral digits from the number
1209:src/display.c ****  */
1210:src/display.c **** static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1211:src/display.c **** 	decNumber n;
1212:src/display.c **** 
1213:src/display.c **** 	decNumberMod(&n, x, &const_100);
1214:src/display.c **** 	*v = dn_to_int(&n);
1215:src/display.c **** 	dn_mulpow10(&n, x, -2);
1216:src/display.c **** 	decNumberTrunc(res, &n);
1217:src/display.c **** }
1218:src/display.c **** 
1219:src/display.c **** static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1219 81 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1220:src/display.c **** 	char b[32];
 276              		.loc 1 1220 2 view .LVU78
1221:src/display.c **** 	int i, j;
 277              		.loc 1 1221 2 view .LVU79
ARM GAS  /tmp/ccZMW3We.s 			page 28


1222:src/display.c **** 
1223:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1223 2 view .LVU80
 279              		.loc 1 1223 12 view .LVU81
1219:src/display.c **** 	char b[32];
 280              		.loc 1 1219 81 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1224:src/display.c **** 		if (v == 0)
1225:src/display.c **** 			b[i] = spaces?' ':'0';
1226:src/display.c **** 		else {
1227:src/display.c **** 			j = v % 10;
 290              		.loc 1 1227 10 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1219:src/display.c **** 	char b[32];
 292              		.loc 1 1219 81 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1219:src/display.c **** 	char b[32];
 295              		.loc 1 1219 81 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1223:src/display.c **** 		if (v == 0)
 298              		.loc 1 1223 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1224:src/display.c **** 		if (v == 0)
 302              		.loc 1 1224 3 is_stmt 1 view .LVU87
 303              		.loc 1 1227 4 view .LVU88
 304              		.loc 1 1227 10 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1228:src/display.c **** 			v /= 10;
 311              		.loc 1 1228 4 is_stmt 1 view .LVU90
1229:src/display.c **** 			b[i] = j + '0';
 312              		.loc 1 1229 13 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1223:src/display.c **** 		if (v == 0)
 315              		.loc 1 1223 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1224:src/display.c **** 			b[i] = spaces?' ':'0';
 317              		.loc 1 1224 6 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1223:src/display.c **** 		if (v == 0)
ARM GAS  /tmp/ccZMW3We.s 			page 29


 319              		.loc 1 1223 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1229 9 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1228:src/display.c **** 			b[i] = j + '0';
 323              		.loc 1 1228 6 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1229 4 is_stmt 1 view .LVU97
1223:src/display.c **** 		if (v == 0)
 327              		.loc 1 1223 17 view .LVU98
1223:src/display.c **** 		if (v == 0)
 328              		.loc 1 1223 12 view .LVU99
1223:src/display.c **** 		if (v == 0)
 329              		.loc 1 1223 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1223:src/display.c **** 		if (v == 0)
 335              		.loc 1 1223 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1223:src/display.c **** 		if (v == 0)
 341              		.loc 1 1223 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1224:src/display.c **** 			b[i] = spaces?' ':'0';
 345              		.loc 1 1224 6 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1225:src/display.c **** 		else {
 349              		.loc 1 1225 4 is_stmt 1 view .LVU104
1223:src/display.c **** 		if (v == 0)
 350              		.loc 1 1223 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1223:src/display.c **** 		if (v == 0)
 353              		.loc 1 1223 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1225:src/display.c **** 		else {
 355              		.loc 1 1225 9 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1223:src/display.c **** 		if (v == 0)
 358              		.loc 1 1223 17 is_stmt 1 view .LVU108
1223:src/display.c **** 		if (v == 0)
 359              		.loc 1 1223 12 view .LVU109
1223:src/display.c **** 		if (v == 0)
 360              		.loc 1 1223 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
ARM GAS  /tmp/ccZMW3We.s 			page 30


 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1223:src/display.c **** 		if (v == 0)
 364              		.loc 1 1223 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1230:src/display.c **** 		}
1231:src/display.c **** 	}
1232:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1232 2 is_stmt 1 view .LVU112
 371              		.loc 1 1232 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1233:src/display.c **** 		b[0] = '0';
1234:src/display.c **** 
1235:src/display.c **** 	/* Copy across and appropriately leading space things
1236:src/display.c **** 	 */
1237:src/display.c **** 	j = *jin;
 374              		.loc 1 1237 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1232:src/display.c **** 		b[0] = '0';
 376              		.loc 1 1232 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1233:src/display.c **** 		b[0] = '0';
 378              		.loc 1 1233 3 is_stmt 1 view .LVU116
1233:src/display.c **** 		b[0] = '0';
 379              		.loc 1 1233 8 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1237 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1238:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1238 2 view .LVU119
 386              		.loc 1 1238 8 view .LVU120
1237:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1237 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1238 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1239:src/display.c **** 		str = set_dig_s(j, b[i], str);
 394              		.loc 1 1239 3 is_stmt 1 view .LVU123
 395              	.LBB132:
 396              	.LBB133:
 396:src/display.c **** 	else	set_dig(base, ch);
 397              		.loc 1 396 11 view .LVU124
 398              	.LBE133:
 399              	.LBE132:
 400              		.loc 1 1239 23 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB137:
ARM GAS  /tmp/ccZMW3We.s 			page 31


 403              	.LBB134:
 396:src/display.c **** 	else	set_dig(base, ch);
 404              		.loc 1 396 15 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 396:src/display.c **** 	else	set_dig(base, ch);
 407              		.loc 1 396 15 view .LVU127
 408              	.LBE134:
 409              	.LBI132:
 395:src/display.c **** 	if (res) *res++ = ch;
 410              		.loc 1 395 14 is_stmt 1 view .LVU128
 411              	.LBB135:
 396:src/display.c **** 	else	set_dig(base, ch);
 412              		.loc 1 396 2 view .LVU129
 396:src/display.c **** 	else	set_dig(base, ch);
 413              		.loc 1 396 5 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 396:src/display.c **** 	else	set_dig(base, ch);
 416              		.loc 1 396 18 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 396:src/display.c **** 	else	set_dig(base, ch);
 419              		.loc 1 396 15 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 398:src/display.c **** }
 423              		.loc 1 398 2 is_stmt 1 view .LVU133
 398:src/display.c **** }
 424              		.loc 1 398 2 is_stmt 0 view .LVU134
 425              	.LBE135:
 426              	.LBE137:
1240:src/display.c **** 		j += SEGS_PER_DIGIT;
 427              		.loc 1 1240 3 is_stmt 1 view .LVU135
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 428              		.loc 1 1238 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1240 5 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 434              		.loc 1 1238 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1241:src/display.c **** 	}
1242:src/display.c **** 	*jin = j;
 436              		.loc 1 1242 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1242 2 is_stmt 1 view .LVU140
 440              		.loc 1 1242 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1243:src/display.c **** 	return str;
1244:src/display.c **** }
 443              		.loc 1 1244 1 view .LVU142
ARM GAS  /tmp/ccZMW3We.s 			page 32


 444 0092 2846     		mov	r0, r5
1242:src/display.c **** 	return str;
 445              		.loc 1 1242 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1243:src/display.c **** 	return str;
 447              		.loc 1 1243 2 is_stmt 1 view .LVU144
 448              		.loc 1 1244 1 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB138:
 458              	.LBB136:
 397:src/display.c **** 	return res;
 459              		.loc 1 397 7 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 397:src/display.c **** 	return res;
 463              		.loc 1 397 7 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE136:
 470              	.LBE138:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 413:src/display.c **** 	int i;
 485              		.loc 1 413 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 414:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 489              		.loc 1 414 2 view .LVU149
 415:src/display.c **** 
 490              		.loc 1 415 2 view .LVU150
 413:src/display.c **** 	int i;
 491              		.loc 1 413 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
ARM GAS  /tmp/ccZMW3We.s 			page 33


 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 415:src/display.c **** 
 500              		.loc 1 415 32 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 417 2 is_stmt 1 view .LVU153
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 417 12 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB139:
 513              	.LBB140:
 397:src/display.c **** 	return res;
 514              		.loc 1 397 7 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 396:src/display.c **** 	else	set_dig(base, ch);
 519              		.loc 1 396 18 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 396:src/display.c **** 	else	set_dig(base, ch);
 522              		.loc 1 396 18 view .LVU157
 523              	.LBE140:
 524              	.LBE139:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 417 2 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB146:
 528              	.LBB141:
 396:src/display.c **** 	else	set_dig(base, ch);
 529              		.loc 1 396 15 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 398:src/display.c **** }
 532              		.loc 1 398 2 is_stmt 1 view .LVU160
 398:src/display.c **** }
 533              		.loc 1 398 2 is_stmt 0 view .LVU161
 534              	.LBE141:
 535              	.LBE146:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 417 35 is_stmt 1 view .LVU162
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 417 12 view .LVU163
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 417 2 is_stmt 0 view .LVU164
ARM GAS  /tmp/ccZMW3We.s 			page 34


 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 418:src/display.c **** }
 542              		.loc 1 418 3 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB147:
 544              	.LBB142:
 396:src/display.c **** 	else	set_dig(base, ch);
 545              		.loc 1 396 11 discriminator 3 view .LVU166
 396:src/display.c **** 	else	set_dig(base, ch);
 546              		.loc 1 396 11 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE142:
 548              	.LBE147:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 417 22 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB148:
 553              	.LBB143:
 396:src/display.c **** 	else	set_dig(base, ch);
 554              		.loc 1 396 15 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 396:src/display.c **** 	else	set_dig(base, ch);
 557              		.loc 1 396 15 discriminator 3 view .LVU170
 558              	.LBE143:
 559              	.LBI139:
 395:src/display.c **** 	if (res) *res++ = ch;
 560              		.loc 1 395 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB144:
 396:src/display.c **** 	else	set_dig(base, ch);
 562              		.loc 1 396 2 discriminator 3 view .LVU172
 563              	.LBE144:
 564              	.LBE148:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 417 16 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB149:
 569              	.LBB145:
 396:src/display.c **** 	else	set_dig(base, ch);
 570              		.loc 1 396 5 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 397:src/display.c **** 	return res;
 573              		.loc 1 397 7 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 398:src/display.c **** }
 578              		.loc 1 398 2 view .LVU176
 398:src/display.c **** }
 579              		.loc 1 398 2 is_stmt 0 view .LVU177
 580              	.LBE145:
 581              	.LBE149:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccZMW3We.s 			page 35


 582              		.loc 1 417 35 is_stmt 1 view .LVU178
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 417 12 view .LVU179
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 417 2 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 419:src/display.c **** 
 589              		.loc 1 419 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 419:src/display.c **** 
 591              		.loc 1 419 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1210:src/display.c **** 	decNumber n;
 606              		.loc 1 1210 69 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1211:src/display.c **** 
 610              		.loc 1 1211 2 view .LVU184
1213:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1213 2 view .LVU185
1210:src/display.c **** 	decNumber n;
 612              		.loc 1 1210 69 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1210:src/display.c **** 	decNumber n;
 621              		.loc 1 1210 69 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1213:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1213 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1213:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1213 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
ARM GAS  /tmp/ccZMW3We.s 			page 36


1210:src/display.c **** 	decNumber n;
 630              		.loc 1 1210 69 view .LVU190
 631 000c 0D46     		mov	r5, r1
1213:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1213 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1214 2 is_stmt 1 view .LVU192
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1214 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1215:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1215 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1214 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1215:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1215 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1216:src/display.c **** }
 649              		.loc 1 1216 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1217:src/display.c **** 
 654              		.loc 1 1217 1 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1217:src/display.c **** 
 661              		.loc 1 1217 1 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.set_status_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	set_status_sized:
 677              	.LVL56:
 678              	.LFB37:
ARM GAS  /tmp/ccZMW3We.s 			page 37


1245:src/display.c **** 
1246:src/display.c **** 
1247:src/display.c **** /* Display the number in H.MS mode.
1248:src/display.c ****  * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1249:src/display.c ****  */
1250:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res) {
1251:src/display.c **** 	decNumber x, y, a, t, u;
1252:src/display.c **** 	int j=0;
1253:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1254:src/display.c **** 	unsigned int hr, min, sec, fs;
1255:src/display.c **** 
1256:src/display.c **** 	if (check_special_dn(rgx, res)) {
1257:src/display.c **** 		if (decNumberIsInfinite(rgx))
1258:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
1259:src/display.c **** 		return;
1260:src/display.c **** 	}
1261:src/display.c **** 
1262:src/display.c **** 	set_separator_decimal_modes();
1263:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1264:src/display.c **** 	dn_abs(&a, rgx);
1265:src/display.c **** 	if (decNumberIsNegative(&x)) {
1266:src/display.c **** 		if (res != NULL)
1267:src/display.c **** 			*res++ += '-';
1268:src/display.c **** 		else
1269:src/display.c **** 			SET_MANT_SIGN;
1270:src/display.c **** 		dn_minus(&x, &x);
1271:src/display.c **** 	}
1272:src/display.c **** 
1273:src/display.c **** 	decNumberHR2HMS(&y, &x);
1274:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1275:src/display.c **** 	decNumberRound(&u, &t);
1276:src/display.c **** 
1277:src/display.c **** 	hms_step(&t, &u, &fs);
1278:src/display.c **** 	hms_step(&u, &t, &sec);
1279:src/display.c **** 	hms_step(&t, &u, &min);
1280:src/display.c **** 	hr = dn_to_int(&t);
1281:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1282:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1283:src/display.c **** 
1284:src/display.c **** 	// degrees
1285:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1286:src/display.c **** 	res = set_dig_s(j, '@', res);
1287:src/display.c **** 	j += SEGS_PER_DIGIT;
1288:src/display.c **** 
1289:src/display.c **** 	// minutes
1290:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1291:src/display.c **** 	res = set_dig_s(j, '\'', res);
1292:src/display.c **** 	j += SEGS_PER_DIGIT;
1293:src/display.c **** 
1294:src/display.c **** 	// seconds
1295:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1296:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1297:src/display.c **** 
1298:src/display.c **** 	// Fractional seconds
1299:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1300:src/display.c **** 
1301:src/display.c **** 	// We're now pointing at the exponent's first digit...
ARM GAS  /tmp/ccZMW3We.s 			page 38


1302:src/display.c **** 	res = set_dig_s(j, '"', res);
1303:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1304:src/display.c **** 
1305:src/display.c **** 	// Check for values too big or small
1306:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1307:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
1308:src/display.c **** 	} else if (! dn_eq0(&a)) {
1309:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
1310:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
1311:src/display.c **** 		}
1312:src/display.c **** 	}
1313:src/display.c **** }
1314:src/display.c **** 
1315:src/display.c **** 
1316:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res) {
1317:src/display.c **** 	decNumber x, w, n, d, t;
1318:src/display.c **** 	char buf[32], *p = buf;
1319:src/display.c **** 	int j;
1320:src/display.c **** 
1321:src/display.c **** 	if (check_special_dn(rgx, res))
1322:src/display.c **** 		return 1;
1323:src/display.c **** 	dn_abs(&x, rgx);
1324:src/display.c **** 	if (dn_ge(&x, &const_100000))
1325:src/display.c **** 		return 0;
1326:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1327:src/display.c **** 		return 0;
1328:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1329:src/display.c **** 		if (res != NULL)
1330:src/display.c **** 			*res++ += '-';
1331:src/display.c **** 		else
1332:src/display.c **** 			SET_MANT_SIGN;
1333:src/display.c **** 	}
1334:src/display.c **** 	decNumberFrac(&w, &x);
1335:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1336:src/display.c **** 
1337:src/display.c **** 	dn_divide(&t, &n, &d);
1338:src/display.c **** 	dn_compare(&t, &t, &w);
1339:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1340:src/display.c **** 
1341:src/display.c **** 	if (dn_eq(&n, &d)) {
1342:src/display.c **** 		dn_inc(&w);
1343:src/display.c **** 		decNumberZero(&n);
1344:src/display.c **** 	}
1345:src/display.c **** 
1346:src/display.c **** 	if (!UState.improperfrac) {
1347:src/display.c **** 		if (!dn_eq0(&w)) {
1348:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
1349:src/display.c **** 			*p++ = ' ';
1350:src/display.c **** 		}
1351:src/display.c **** 	} else {
1352:src/display.c **** 		dn_multiply(&x, &w, &d);
1353:src/display.c **** 		dn_add(&n, &n, &x);
1354:src/display.c **** 	}
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1356:src/display.c **** 	*p++ = '/';
1357:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1358:src/display.c **** 	*p = '\0';
ARM GAS  /tmp/ccZMW3We.s 			page 39


1359:src/display.c **** 	if ((p - 12) > buf) {
1360:src/display.c **** 		p -= 12;
1361:src/display.c **** 		*p = '<';
1362:src/display.c **** 	} else	p = buf;
1363:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1364:src/display.c **** 		res = set_dig_s(j, *p, res);
1365:src/display.c **** 		j += SEGS_PER_DIGIT;
1366:src/display.c **** 	}
1367:src/display.c **** 
1368:src/display.c **** 	if (dn_eq0(&t))
1369:src/display.c **** 		p = (char *)S7_fract_EQ;
1370:src/display.c **** 	else if (decNumberIsNegative(&t))
1371:src/display.c **** 		p = (char *)S7_fract_LT;
1372:src/display.c **** 	else
1373:src/display.c **** 		p = (char *)S7_fract_GT;
1374:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1375:src/display.c **** 		res = set_dig_s(j, *p, res);
1376:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
1377:src/display.c **** 	}
1378:src/display.c **** 	return 1;
1379:src/display.c **** }
1380:src/display.c **** 
1381:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1382:src/display.c **** enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1383:src/display.c **** 	decNumber c;
1384:src/display.c **** 	int true_exp, x=0;
1385:src/display.c **** 	int min_pos_exp, max_neg_exp;
1386:src/display.c **** 
1387:src/display.c **** 	if ( mode != MODE_STD ) {
1388:src/display.c **** 		min_pos_exp = 9;
1389:src/display.c **** 		max_neg_exp = -5;
1390:src/display.c **** 	}
1391:src/display.c **** 	else {
1392:src/display.c **** 		min_pos_exp = 12;
1393:src/display.c **** 		max_neg_exp = -1 - dispdigs;
1394:src/display.c **** 	}
1395:src/display.c **** 
1396:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1397:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1398:src/display.c **** 
1399:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1400:src/display.c **** 		x = *dd;
1401:src/display.c **** 	}
1402:src/display.c **** 
1403:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1404:src/display.c **** 		// decimals needed; *dd adjusted to provide correct number
1405:src/display.c **** 		*dd += -true_exp;
1406:src/display.c **** 		return MODE_FIX;
1407:src/display.c **** 	}
1408:src/display.c **** 
1409:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1410:src/display.c **** 		return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1411:src/display.c **** 	}
1412:src/display.c **** 	else {
1413:src/display.c **** 		return MODE_STD;
1414:src/display.c **** 	}
1415:src/display.c ****  }
ARM GAS  /tmp/ccZMW3We.s 			page 40


1416:src/display.c **** #else
1417:src/display.c **** enum display_modes std_round_fix(const decNumber *z) {
1418:src/display.c **** 	decNumber b, c;
1419:src/display.c **** 
1420:src/display.c **** 	dn_1(&b);
1421:src/display.c **** 	b.exponent -= UState.dispdigs;
1422:src/display.c **** 	dn_abs(&c, z);
1423:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1424:src/display.c **** 		return MODE_FIX;
1425:src/display.c **** 	return MODE_STD;
1426:src/display.c **** }
1427:src/display.c **** #endif
1428:src/display.c **** 
1429:src/display.c **** /* SHOW display mode
1430:src/display.c ****  * in double precision show left or right part
1431:src/display.c ****  * 4 + 12 + 3 or 6 + 10 + 4 version
1432:src/display.c ****  */
1433:src/display.c **** static void show_x(char *x, int exp) {
1434:src/display.c **** 	const int dbl = is_dblmode();
1435:src/display.c **** 	char *p;
1436:src/display.c **** 	int i, j;
1437:src/display.c **** 	char *upper_str;
1438:src/display.c **** 	enum separator_modes separator_mode;
1439:src/display.c **** 	char decimal_mark;
1440:src/display.c **** 	char thousands_sep;
1441:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1442:src/display.c **** 	const int grouping = 0;
1443:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1444:src/display.c **** 	const int grouping = !UState.nothousands;
1445:src/display.c **** #else
1446:src/display.c **** 	const int grouping = 1;
1447:src/display.c **** #endif
1448:src/display.c **** 	int negative;
1449:src/display.c **** 
1450:src/display.c **** 	if (x[0] == '-') {
1451:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1452:src/display.c **** 		static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1453:src/display.c **** 
1454:src/display.c **** 		xcopy(x + 4, x + 1, 34);
1455:src/display.c **** 		xcopy(x, small_minus, 4);
1456:src/display.c **** 		x += 4;
1457:src/display.c **** 		negative = 4;
1458:src/display.c **** #else
1459:src/display.c **** 		++x;
1460:src/display.c **** 		negative = 1;
1461:src/display.c **** #endif
1462:src/display.c **** 	}
1463:src/display.c **** 	else negative = 0;
1464:src/display.c **** 
1465:src/display.c **** 	p = find_char(x, '\0');
1466:src/display.c **** 	xset(p, '0', 34 - (p - x));
1467:src/display.c **** 
1468:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1469:src/display.c **** 		separator_mode = SEP_COMMA;
1470:src/display.c **** 		decimal_mark = '.';
1471:src/display.c **** 		thousands_sep = ',';
1472:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 41


1473:src/display.c **** 	else {
1474:src/display.c **** 		separator_mode = SEP_DOT;
1475:src/display.c **** 		decimal_mark = ',';
1476:src/display.c **** 		thousands_sep = '.';
1477:src/display.c **** 	}
1478:src/display.c **** 
1479:src/display.c **** 	if (State2.window) { // right half in double precision mode
1480:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1481:src/display.c **** 		static const char small_dots[13] = { '\007', '\341', ',', '\006',
1482:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1483:src/display.c **** 
1484:src/display.c **** 		upper_str = x + 3;
1485:src/display.c **** 		xcopy(upper_str, small_dots, 13);
1486:src/display.c **** 		if (grouping) {
1487:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1488:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
1489:src/display.c **** 			x += 3 + 13 + 7;
1490:src/display.c **** 		}
1491:src/display.c **** 		else x += 3 + 13 + 6;
1492:src/display.c **** #else
1493:src/display.c **** 		upper_str = x + 13;
1494:src/display.c **** 		xset(upper_str, '.', 3);
1495:src/display.c **** 		if (grouping) {
1496:src/display.c **** 			xcopy(upper_str + 7, upper_str + 6, 19);
1497:src/display.c **** 			upper_str[6] = thousands_sep;
1498:src/display.c **** 			x += 13 + 3 + 7;
1499:src/display.c **** 		}
1500:src/display.c **** 		else x += 13 + 3 + 6;
1501:src/display.c **** #endif
1502:src/display.c **** 		negative = 0;
1503:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
1504:src/display.c **** 	}
1505:src/display.c **** 	else {
1506:src/display.c **** 		upper_str = x;
1507:src/display.c **** 		xcopy(x + 2, x + 1, 16);
1508:src/display.c **** 		x[1] = decimal_mark;
1509:src/display.c **** 		if (grouping) {
1510:src/display.c **** 			xcopy(x + 6, x + 5, 13);
1511:src/display.c **** 			x[5] = thousands_sep;
1512:src/display.c **** 			x += 9;
1513:src/display.c **** 		}
1514:src/display.c **** 		else x += 8;
1515:src/display.c **** 		if (dbl) {
1516:src/display.c **** 			if (exp < 0) {
1517:src/display.c **** 				x[9] = '-';
1518:src/display.c **** 				exp = -exp;
1519:src/display.c **** 			}
1520:src/display.c **** 			else
1521:src/display.c **** 				x[9] = ' ';
1522:src/display.c **** 			j = exp / 1000;
1523:src/display.c **** 			x[10] = '0' + j;
1524:src/display.c **** 			exp -= 1000 * j;
1525:src/display.c **** 		}
1526:src/display.c **** 		else {
1527:src/display.c **** 			x[9] = '\0';
1528:src/display.c **** 			x[10] = '\0';
1529:src/display.c **** 		}
ARM GAS  /tmp/ccZMW3We.s 			page 42


1530:src/display.c **** 		xcopy(x + 1, x, 11);
1531:src/display.c **** 		*x = 0;
1532:src/display.c **** 		set_exp(exp, 1, CNULL);
1533:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
1534:src/display.c **** 	}
1535:src/display.c **** 	if (grouping) {
1536:src/display.c **** 		for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1537:src/display.c **** 			set_separator(i, separator_mode, CNULL);
1538:src/display.c **** 		}
1539:src/display.c **** 	}
1540:src/display.c **** 
1541:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1542:src/display.c **** 		set_dig(j, x[i]);
1543:src/display.c **** 
1544:src/display.c **** 	*x = '\0';
1545:src/display.c **** 	set_status(upper_str - negative);
1546:src/display.c **** }
1547:src/display.c **** 
1548:src/display.c **** 
1549:src/display.c **** /* Display the X register in the numeric portion of the display.
1550:src/display.c ****  * We have to account for the various display modes and numbers of
1551:src/display.c ****  * digits.
1552:src/display.c ****  */
1553:src/display.c **** static void set_x(const REGISTER *rgx, char *res, int dbl) {
1554:src/display.c **** 	decNumber z;
1555:src/display.c **** 	int digits = DISPLAY_DIGITS;
1556:src/display.c **** 
1557:src/display.c **** 	if (dbl)
1558:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
1559:src/display.c **** 	else
1560:src/display.c **** 		decimal64ToNumber(&(rgx->s), &z);
1561:src/display.c **** 	set_x_dn(&z, res, &digits);
1562:src/display.c **** }
1563:src/display.c **** 
1564:src/display.c **** void set_x_dn(decNumber *z, char *res, int *display_digits) {
1565:src/display.c **** 	char x[50], *obp = x;
1566:src/display.c **** 	int odig = 0;
1567:src/display.c **** 	int show_exp = 0;
1568:src/display.c **** 	int j;
1569:src/display.c **** 	char mantissa[64];
1570:src/display.c **** 	int exp = 0;
1571:src/display.c **** 	char *p = mantissa;
1572:src/display.c **** 	char *r;
1573:src/display.c **** 	const char *q;
1574:src/display.c **** 	int count, i;
1575:src/display.c **** 	int extra_digits = 0;
1576:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1577:src/display.c **** 	int dd;
1578:src/display.c **** 	int dispdigs;
1579:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1580:src/display.c **** #else
1581:src/display.c **** 	int dd = UState.dispdigs;
1582:src/display.c **** 	int mode = UState.dispmode;
1583:src/display.c **** #endif
1584:src/display.c **** 	int c;
1585:src/display.c **** 	int negative = 0;
1586:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccZMW3We.s 			page 43


1587:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1588:src/display.c **** 	const int show_large_exponent = 0;
1589:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1590:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1591:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1592:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1593:src/display.c **** #else
1594:src/display.c **** 	const int show_large_exponent = 1;
1595:src/display.c **** #endif
1596:src/display.c **** 
1597:src/display.c **** 	set_separator_decimal_modes();
1598:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1599:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1600:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
1601:src/display.c **** 			if (State2.hms) {
1602:src/display.c **** 				set_x_hms(z, res);
1603:src/display.c ****  				return;
1604:src/display.c **** 			}
1605:src/display.c **** 			else if (UState.fract) {
1606:src/display.c **** 				if (set_x_fract(z, res))
1607:src/display.c **** 					return;
1608:src/display.c **** 			}
1609:src/display.c **** 		}
1610:src/display.c **** 	}		
1611:src/display.c **** #else
1612:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1613:src/display.c **** 		if (State2.hms) {
1614:src/display.c **** 			set_x_hms(z, res);
1615:src/display.c **** 			State2.hms = 0;
1616:src/display.c **** 			return;
1617:src/display.c **** 		} else if (UState.fract) {
1618:src/display.c **** 			if (set_x_fract(z, res))
1619:src/display.c **** 				return;
1620:src/display.c **** 		}
1621:src/display.c **** 	}
1622:src/display.c **** #endif
1623:src/display.c **** 
1624:src/display.c **** 	if (check_special_dn(z, res))
1625:src/display.c **** 		return;
1626:src/display.c **** 
1627:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1628:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
1629:src/display.c **** 		exp = z->exponent + z->digits - 1;
1630:src/display.c **** 		z->exponent = 0;
1631:src/display.c **** 	}
1632:src/display.c **** 
1633:src/display.c **** 	xset(x, '\0', sizeof(x));
1634:src/display.c **** 
1635:src/display.c **** 	if (dn_eq0(z)) {
1636:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1637:src/display.c **** 			x[0] = '-';
1638:src/display.c **** 			x[1] = '0';
1639:src/display.c **** 		} else
1640:src/display.c **** 			x[0] = '0';
1641:src/display.c **** 	} else
1642:src/display.c **** 		decNumberToString(z, x);
1643:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 44


1644:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1645:src/display.c **** 		show_x(x, exp);
1646:src/display.c **** 		return;
1647:src/display.c **** 	}
1648:src/display.c **** 
1649:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1650:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1651:src/display.c **** 		//  ALL mode: fill the display
1652:src/display.c **** 		dd = *display_digits - 1;
1653:src/display.c **** 	else
1654:src/display.c **** 		dd = dispdigs;
1655:src/display.c **** 
1656:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1657:src/display.c **** 		int orig_mode = mode;
1658:src/display.c **** 
1659:src/display.c **** 		mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1660:src/display.c **** 		if (orig_mode != MODE_SIG0)
1661:src/display.c **** 			// allow zeros to be trimmed
1662:src/display.c **** 			trimzeros = 1;
1663:src/display.c **** 		if (orig_mode == MODE_STD)
1664:src/display.c **** 			dd = *display_digits - 1;
1665:src/display.c ****  	}
1666:src/display.c **** #else
1667:src/display.c **** 	if (mode == MODE_STD) {
1668:src/display.c **** 		mode = std_round_fix(z);
1669:src/display.c **** 		trimzeros = 1;
1670:src/display.c **** 		dd = *display_digits - 1;
1671:src/display.c **** 	} else if (dd >= *display_digits)
1672:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
1673:src/display.c **** 		dd = *display_digits - 1;
1674:src/display.c **** #endif
1675:src/display.c **** 
1676:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
1677:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
1678:src/display.c **** 
1679:src/display.c **** 	q = find_char(x, 'E');
1680:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1681:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
1682:src/display.c **** 	if (q == NULL) exp = 0;
1683:src/display.c **** 	else {
1684:src/display.c **** 		exp = s_to_i(q+1);
1685:src/display.c **** 		if (*q == 'D') exp = -exp;
1686:src/display.c **** 	}
1687:src/display.c **** #else
1688:src/display.c **** 	if (q == NULL) exp = 0;
1689:src/display.c **** 	else exp = s_to_i(q+1);
1690:src/display.c **** #endif
1691:src/display.c **** 
1692:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
1693:src/display.c **** 	for (q=x; *q == ' '; q++);
1694:src/display.c **** 	if (!res) {
1695:src/display.c **** 		CLR_EXP_SIGN;
1696:src/display.c **** 		CLR_MANT_SIGN;
1697:src/display.c **** 	}
1698:src/display.c **** 	if (*q == '-') {
1699:src/display.c **** 		negative = 1;
1700:src/display.c **** 		q++;
ARM GAS  /tmp/ccZMW3We.s 			page 45


1701:src/display.c **** 	} else if (*q == '+')
1702:src/display.c **** 		q++;
1703:src/display.c **** 	for (; *q == '0'; q++);
1704:src/display.c **** 	if (*q == '.') {
1705:src/display.c **** 		do
1706:src/display.c **** 			exp--;
1707:src/display.c **** 		while (*++q == '0');
1708:src/display.c **** 		while (*q >= '0' && *q <= '9')
1709:src/display.c **** 			*p++ = *q++;
1710:src/display.c **** 	} else {
1711:src/display.c **** 		if (*q >= '0' && *q <= '9')
1712:src/display.c **** 			*p++ = *q++;
1713:src/display.c **** 		while (*q >= '0' && *q <= '9') {
1714:src/display.c **** 			*p++ = *q++;
1715:src/display.c **** 			exp++;
1716:src/display.c **** 		}
1717:src/display.c **** 		if (*q == '.') {
1718:src/display.c **** 			q++;
1719:src/display.c **** 			while (*q >= '0' && *q <= '9')
1720:src/display.c **** 				*p++ = *q++;
1721:src/display.c **** 		}
1722:src/display.c **** 	}
1723:src/display.c **** 
1724:src/display.c **** 	if (mode == MODE_FIX) {
1725:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
1726:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
1727:src/display.c **** 		else {
1728:src/display.c **** 			extra_digits = exp;
1729:src/display.c **** 			/* We might have push the fixed decimals off the
1730:src/display.c **** 			 * screen so adjust if so.
1731:src/display.c **** 			 */
1732:src/display.c **** 			if (extra_digits + dd > (*display_digits - 1))
1733:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
1734:src/display.c **** 		}
1735:src/display.c **** 	}
1736:src/display.c **** 
1737:src/display.c **** 	// Round the mantissa to the number of digits desired
1738:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
1739:src/display.c **** 	if (*p >= '5') {	// Round up
1740:src/display.c **** 		*p = '0';
1741:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
1742:src/display.c **** 		if (r == p) {   // Special case 9.9999999
1743:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
1744:src/display.c **** 			mantissa[0] = '1';
1745:src/display.c **** 			exp++;
1746:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
1747:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
1748:src/display.c **** 				extra_digits = 0;
1749:src/display.c **** 			}
1750:src/display.c **** 		} else {
1751:src/display.c **** 			while (*--p == '9')
1752:src/display.c **** 				*p = '0';
1753:src/display.c **** 			(*p)++;
1754:src/display.c **** 		}
1755:src/display.c **** 	}
1756:src/display.c **** 
1757:src/display.c **** 	// Zap what is left
ARM GAS  /tmp/ccZMW3We.s 			page 46


1758:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
1759:src/display.c **** 
1760:src/display.c **** 	p = mantissa;
1761:src/display.c **** 	switch (mode) {
1762:src/display.c **** 	default:
1763:src/display.c **** 	case MODE_STD:   
1764:src/display.c **** 		for (count = *display_digits; mantissa[count] == '0'; count--);
1765:src/display.c **** 		if (count != *display_digits)
1766:src/display.c **** 			count++;
1767:src/display.c **** 		// Too big or too small to fit on display
1768:src/display.c **** 		if (exp >= *display_digits || exp < (count - *display_digits)) {
1769:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
1770:src/display.c **** 			case -1:
1771:src/display.c **** 			case 2:
1772:src/display.c **** 				*obp++ = *p++;
1773:src/display.c **** 				odig++;
1774:src/display.c **** 				dd--;
1775:src/display.c **** 				exp--;
1776:src/display.c **** 			case -2:
1777:src/display.c **** 			case 1:
1778:src/display.c **** 				*obp++ = *p++;
1779:src/display.c **** 				odig++;
1780:src/display.c **** 				dd--;
1781:src/display.c **** 				exp--;
1782:src/display.c **** 			case 0:
1783:src/display.c **** 				;
1784:src/display.c **** 			};
1785:src/display.c **** 			*obp++ = *p++;
1786:src/display.c **** 			odig++;
1787:src/display.c **** 			*obp++ = '.';
1788:src/display.c **** 			for (i=1; i<count; i++) {
1789:src/display.c **** 				*obp++ = *p++;
1790:src/display.c **** 				odig++;
1791:src/display.c **** 			}
1792:src/display.c **** 			show_exp = 1;
1793:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
1794:src/display.c **** 			for(i=0; i<=exp; i++) {
1795:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1796:src/display.c **** 					*obp++ = ',';
1797:src/display.c **** 				*obp++ = *p++;
1798:src/display.c **** 				odig++;
1799:src/display.c **** 			}
1800:src/display.c **** 			*obp++ = '.';
1801:src/display.c **** 			if (count > (exp + 1)) {
1802:src/display.c **** 				for (i=exp+1; i<count; i++) {
1803:src/display.c **** 					*obp++ = *p++;
1804:src/display.c **** 					odig++;
1805:src/display.c **** 				}
1806:src/display.c **** 			}
1807:src/display.c **** 		} else {		// All digits to right of decimal point
1808:src/display.c **** 			*obp++ = '0';
1809:src/display.c **** 			odig++;
1810:src/display.c **** 			*obp++ = '.';
1811:src/display.c **** 			for (i=exp+1; i<0; i++) {
1812:src/display.c **** 				*obp++ = '0';
1813:src/display.c **** 				odig++;
1814:src/display.c **** 			}
ARM GAS  /tmp/ccZMW3We.s 			page 47


1815:src/display.c **** 			for (i=0; i<count; i++) {
1816:src/display.c **** 				*obp++ = *p++;
1817:src/display.c **** 				odig++;
1818:src/display.c **** 			}
1819:src/display.c **** 		}
1820:src/display.c **** 		break;
1821:src/display.c **** 
1822:src/display.c **** 	case MODE_FIX:
1823:src/display.c **** 		j = 0;
1824:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
1825:src/display.c **** 			for (i=0; i<=exp; i++) {
1826:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1827:src/display.c **** 					*obp++ = ',';
1828:src/display.c **** 				*obp++ = *p++;
1829:src/display.c **** 				odig++;
1830:src/display.c **** 			}
1831:src/display.c **** 			*obp++ = '.';
1832:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
1833:src/display.c **** 				*obp++ = *p++;
1834:src/display.c **** 				odig++;
1835:src/display.c **** 			}
1836:src/display.c **** 		} else {		// All digits to right of decimal point
1837:src/display.c **** 			*obp++ = '0';
1838:src/display.c **** 			odig++;
1839:src/display.c **** 			*obp++ = '.';
1840:src/display.c **** 			for (i=exp+1; i<0; i++) {
1841:src/display.c **** 				*obp++ = '0';
1842:src/display.c **** 				odig++;
1843:src/display.c **** 				dd--;
1844:src/display.c **** 			}
1845:src/display.c **** 			while (dd-- > 0) {
1846:src/display.c **** 				*obp++ = *p++;
1847:src/display.c **** 				odig++;
1848:src/display.c **** 			}
1849:src/display.c **** 		}
1850:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
1851:src/display.c **** 		if (trimzeros)
1852:src/display.c **** 			while (obp > x && obp[-1] == '0') {
1853:src/display.c **** 				obp--;
1854:src/display.c **** 				odig--;
1855:src/display.c **** 			}
1856:src/display.c **** #endif			
1857:src/display.c **** 		break;
1858:src/display.c **** 
1859:src/display.c **** 	case MODE_ENG:
1860:src/display.c **** 		switch (exp % 3) {
1861:src/display.c **** 		case -1:
1862:src/display.c **** 		case 2:
1863:src/display.c **** 			*obp++ = *p++;
1864:src/display.c **** 			odig++;
1865:src/display.c **** 			dd--;
1866:src/display.c **** 			exp--;
1867:src/display.c **** 		case -2:
1868:src/display.c **** 		case 1:
1869:src/display.c **** 			*obp++ = *p++;
1870:src/display.c **** 			odig++;
1871:src/display.c **** 			dd--;
ARM GAS  /tmp/ccZMW3We.s 			page 48


1872:src/display.c **** 			exp--;
1873:src/display.c **** 		case 0:
1874:src/display.c **** 			;
1875:src/display.c **** 		};
1876:src/display.c **** 	// Falling through
1877:src/display.c **** 
1878:src/display.c **** 	case MODE_SCI:
1879:src/display.c **** 		*obp++ = *p++;
1880:src/display.c **** 		odig++;
1881:src/display.c **** 		*obp++ = '.';
1882:src/display.c **** 		dd--;
1883:src/display.c **** 		while (dd-- >= 0) {
1884:src/display.c **** 			*obp++ = *p++;
1885:src/display.c **** 			odig++;
1886:src/display.c **** 		}
1887:src/display.c **** 		show_exp = 1;
1888:src/display.c **** 	}
1889:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1890:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
1891:src/display.c **** 		while (obp > x && obp[-1] == '0') {
1892:src/display.c **** 			obp--;
1893:src/display.c **** 			odig--;
1894:src/display.c **** 		}
1895:src/display.c **** #endif	
1896:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
1897:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
1898:src/display.c **** 		set_x_dn(z, res, display_digits);
1899:src/display.c **** 		return;
1900:src/display.c **** 	}
1901:src/display.c **** 	/* Finally, send the output to the display */
1902:src/display.c **** 	*obp = '\0';
1903:src/display.c **** 	if (odig > *display_digits)
1904:src/display.c **** 		odig = *display_digits;
1905:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
1906:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
1907:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
1908:src/display.c **** 	if (negative) {
1909:src/display.c **** 		if (res) *res++ = '-';
1910:src/display.c **** 		else {
1911:src/display.c **** 			if (j == 0)
1912:src/display.c **** 				SET_MANT_SIGN;
1913:src/display.c **** 			else
1914:src/display.c **** 				set_dig(j - SEGS_PER_DIGIT, '-');
1915:src/display.c **** 		}
1916:src/display.c **** 	}
1917:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
1918:src/display.c **** 		if (c == '.') {
1919:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1920:src/display.c **** 		} else if (c == ',') {
1921:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
1922:src/display.c **** 		} else {
1923:src/display.c **** 			res = set_dig_s(j, c, res);
1924:src/display.c **** 			j += SEGS_PER_DIGIT;
1925:src/display.c **** 		}
1926:src/display.c **** 	}
1927:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
1928:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
ARM GAS  /tmp/ccZMW3We.s 			page 49


1929:src/display.c **** 		if ( !res ) {
1930:src/display.c **** 				set_exp(exp, 4, res);
1931:src/display.c **** 		}
1932:src/display.c **** 		else {
1933:src/display.c **** 			set_exp(exp, 0, res);
1934:src/display.c **** 		}
1935:src/display.c **** 	}
1936:src/display.c **** #else
1937:src/display.c **** 	if (show_exp)
1938:src/display.c **** 		set_exp(exp, 0, res);
1939:src/display.c **** #endif
1940:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
1941:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
1942:src/display.c **** 	*display_digits = odig;
1943:src/display.c **** }
1944:src/display.c **** 
1945:src/display.c **** #if defined(QTGUI) || defined(IOS)
1946:src/display.c **** void format_display(char *buf) {
1947:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
1948:src/display.c **** 	{
1949:src/display.c **** 		const char *p = get_cmdline();
1950:src/display.c **** 		if (p == NULL) {
1951:src/display.c **** 			format_reg(regX_idx, buf);
1952:src/display.c **** 		} else {
1953:src/display.c **** 			scopy(buf, p);
1954:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
1955:src/display.c **** 			if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
1956:src/display.c **** 				scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
1957:src/display.c **** 				buf[CmdLineEex] = 'E';
1958:src/display.c **** 				buf[CmdLineEex+1] = '-';
1959:src/display.c **** 			}
1960:src/display.c **** #  endif
1961:src/display.c **** 		}
1962:src/display.c **** 	}
1963:src/display.c **** 	else {
1964:src/display.c **** 		buf[0]=0;
1965:src/display.c **** 	}
1966:src/display.c **** }
1967:src/display.c **** #endif
1968:src/display.c **** 
1969:src/display.c **** void format_reg(int index, char *buf) {
1970:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
1971:src/display.c **** 
1972:src/display.c **** 	if (is_intmode())
1973:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
1974:src/display.c **** #ifndef HP16C_MODE_CHANGE
1975:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
1976:src/display.c **** 		decNumber x;
1977:src/display.c **** 		int s;
1978:src/display.c **** 		unsigned long long int v;
1979:src/display.c **** 
1980:src/display.c **** 		getRegister(&x, index);
1981:src/display.c **** 		v = dn_to_ull(&x, &s);
1982:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
1983:src/display.c **** 	}
1984:src/display.c **** #endif
1985:src/display.c **** 	else
ARM GAS  /tmp/ccZMW3We.s 			page 50


1986:src/display.c **** 		set_x(r, buf, UState.mode_double);
1987:src/display.c **** }
1988:src/display.c **** 
1989:src/display.c **** /* Display the status screen */
1990:src/display.c **** static void show_status(void) {
1991:src/display.c **** 	int i, n;
1992:src/display.c **** 	int j = SEGS_EXP_BASE;
1993:src/display.c **** 	const int status = State2.status - 3;
1994:src/display.c **** 	char buf[16], *p = buf;
1995:src/display.c **** 	unsigned int pc;
1996:src/display.c **** 
1997:src/display.c **** 	if (status == -2) {
1998:src/display.c **** 		set_status("Free:");
1999:src/display.c **** 		p = num_arg(buf, free_mem());
2000:src/display.c **** 		p = scopy(p, " , FL. ");
2001:src/display.c **** 		p = num_arg(p, free_flash());
2002:src/display.c **** 		*p = '\0';
2003:src/display.c **** 		set_digits_string(buf, 0);
2004:src/display.c **** 	}
2005:src/display.c **** 	else if (status == -1) {
2006:src/display.c **** 		/* Top line */
2007:src/display.c **** 		p = scopy(buf, "Regs:");
2008:src/display.c **** 		if (SizeStatRegs)
2009:src/display.c **** 			p = scopy(p, " \221\006\006+");
2010:src/display.c **** 		*p = '\0';
2011:src/display.c **** 		set_status(buf);
2012:src/display.c **** 
2013:src/display.c **** 		/* Bottom line */
2014:src/display.c **** 		p = num_arg(buf, global_regs());
2015:src/display.c **** 		if (LocalRegs < 0) {
2016:src/display.c **** 			p = scopy(p, " , Loc. ");
2017:src/display.c **** 			p = num_arg(p, local_regs());
2018:src/display.c **** 		}
2019:src/display.c **** 		*p = '\0';
2020:src/display.c **** 		set_digits_string(buf, 0);
2021:src/display.c **** 	} else {
2022:src/display.c **** 		int base;
2023:src/display.c **** 		int end;
2024:src/display.c **** 		int group = 10;
2025:src/display.c **** 		int start = 0;
2026:src/display.c **** 		
2027:src/display.c **** 		if (status <= 9) {
2028:src/display.c **** 			base = 10 * status;
2029:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
2030:src/display.c **** 			p = scopy(buf, "FL ");
2031:src/display.c **** 			p = num_arg_0(p, base, 2);
2032:src/display.c **** 			*p++ = '-';
2033:src/display.c **** 			p = num_arg_0(p, end, 2);
2034:src/display.c **** 			*p = '\0';
2035:src/display.c **** 			set_status(buf);
2036:src/display.c **** 		}
2037:src/display.c **** 		else if (status == 10) {
2038:src/display.c **** 			base = regX_idx;
2039:src/display.c **** 			end = regK_idx;
2040:src/display.c **** 			start = 3;
2041:src/display.c **** 			group = 4;
2042:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
ARM GAS  /tmp/ccZMW3We.s 			page 51


2043:src/display.c **** 		}
2044:src/display.c **** 		else { // status == 11
2045:src/display.c **** 			base = LOCAL_FLAG_BASE;
2046:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
2047:src/display.c **** 			set_status("FL.00-.15");
2048:src/display.c **** 		}
2049:src/display.c **** 		j = start * SEGS_PER_DIGIT;
2050:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
2051:src/display.c **** 		j += SEGS_PER_DIGIT;
2052:src/display.c **** 		for (i = start; i < group + start; i++) {
2053:src/display.c **** 			int k = i + base - start;
2054:src/display.c **** 			int l = get_user_flag(k);
2055:src/display.c **** 			k += group;
2056:src/display.c **** 			if (end >= k) {
2057:src/display.c **** 				l |= (get_user_flag(k) << 1);
2058:src/display.c **** 				k += group;
2059:src/display.c **** 				if (end >= k)
2060:src/display.c **** 					l |= (get_user_flag(k) << 2);
2061:src/display.c **** 			}
2062:src/display.c **** 			set_dig(j, l);
2063:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
2064:src/display.c **** 			j += SEGS_PER_DIGIT;
2065:src/display.c **** 			if (i == 4) {
2066:src/display.c **** 				set_dig(j, 8);
2067:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
2068:src/display.c **** 				j += SEGS_PER_DIGIT;
2069:src/display.c **** 			}
2070:src/display.c **** 		}
2071:src/display.c **** 	}
2072:src/display.c **** 
2073:src/display.c **** 	j = SEGS_EXP_BASE;
2074:src/display.c **** 	pc = state_pc();
2075:src/display.c **** 	if (isXROM(pc))
2076:src/display.c **** 		pc = 1;
2077:src/display.c **** 	for (n=i=0; i<4; i++) {
2078:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2079:src/display.c **** 			if (++n == 4) {
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2081:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2082:src/display.c **** 			} else {
2083:src/display.c **** 				set_dig(j, 'A'+i);
2084:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
2085:src/display.c **** 			}
2086:src/display.c **** 		}
2087:src/display.c **** 	}
2088:src/display.c **** }
2089:src/display.c **** 
2090:src/display.c **** 
2091:src/display.c **** /* Display the list of alpha labels */
2092:src/display.c **** static void show_label(void) {
2093:src/display.c **** 	char buf[16];
2094:src/display.c **** 	unsigned short int pc = State2.digval;
2095:src/display.c **** 	unsigned int op = getprog(pc);
2096:src/display.c **** 	int n = nLIB(pc);
2097:src/display.c **** 	unsigned short int lblpc;
2098:src/display.c **** 
2099:src/display.c **** 	set_status(prt((opcode)op, buf));
ARM GAS  /tmp/ccZMW3We.s 			page 52


2100:src/display.c **** 	set_digits_string(libname[n], 0);
2101:src/display.c **** #ifndef REALBUILD
2102:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2103:src/display.c **** #endif
2104:src/display.c **** 
2105:src/display.c **** 	if (op & OP_DBL) {
2106:src/display.c **** 		lblpc = findmultilbl(op, 0);
2107:src/display.c **** 		if (lblpc != pc) {
2108:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2109:src/display.c **** 			n = nLIB(lblpc);
2110:src/display.c **** 			if (n == REGION_RAM)
2111:src/display.c **** 				set_exp(lblpc, 1, CNULL);
2112:src/display.c **** 			else {
2113:src/display.c **** 				set_exp_digits_string(libname[n], CNULL);
2114:src/display.c **** #ifndef REALBUILD
2115:src/display.c **** 				scopy(LastDisplayedNumber, libname_text[n]);
2116:src/display.c **** #endif
2117:src/display.c **** 			}
2118:src/display.c **** 		}
2119:src/display.c **** 	}
2120:src/display.c **** }
2121:src/display.c **** 
2122:src/display.c **** /* Display a list of register contents */
2123:src/display.c **** static void show_registers(void) {
2124:src/display.c **** 	char buf[16], *bp;
2125:src/display.c **** 	int n = State2.digval;
2126:src/display.c **** 	
2127:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2128:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2129:src/display.c **** 			State2.local   ? LOCAL_REG_BASE + n : 
2130:src/display.c **** 			n;
2131:src/display.c **** #else
2132:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2133:src/display.c **** 			n;
2134:src/display.c **** #endif
2135:src/display.c **** 
2136:src/display.c **** 	if (State2.disp_as_alpha) {
2137:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
2138:src/display.c **** 	}
2139:src/display.c **** 	else {
2140:src/display.c **** 		xset(buf, '\0', 16);
2141:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2142:src/display.c **** 		bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2143:src/display.c **** #else
2144:src/display.c **** 		bp = scopy_spc(buf, "Reg ");
2145:src/display.c **** #endif
2146:src/display.c **** 		if (State2.local) {
2147:src/display.c **** 			*bp++ = '.';
2148:src/display.c **** 			if (n >= 100) {
2149:src/display.c **** 				*bp++ = '1';
2150:src/display.c **** 				n -= 100;
2151:src/display.c **** 			}
2152:src/display.c **** 		}
2153:src/display.c **** 		if (n < 100)
2154:src/display.c **** 			bp = num_arg_0(bp, n, 2);
2155:src/display.c **** 		else
2156:src/display.c **** 			*bp++ = REGNAMES[n - regX_idx];
ARM GAS  /tmp/ccZMW3We.s 			page 53


2157:src/display.c **** 		set_status(buf);
2158:src/display.c **** 	}
2159:src/display.c **** 	format_reg(reg, CNULL);
2160:src/display.c **** }
2161:src/display.c **** 
2162:src/display.c **** 
2163:src/display.c **** static void set_annunciators(void)
2164:src/display.c **** {
2165:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2166:src/display.c **** 
2167:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2168:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2169:src/display.c **** 	 * browsing constants.
2170:src/display.c **** 	 */
2171:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2172:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2173:src/display.c **** #else
2174:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2175:src/display.c **** #endif
2176:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2177:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2178:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2179:src/display.c **** 	set_IO_annunciator();
2180:src/display.c **** 
2181:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2182:src/display.c **** 	 */
2183:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2184:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2185:src/display.c **** }
2186:src/display.c **** 
2187:src/display.c **** 
2188:src/display.c **** /*
2189:src/display.c ****  *  Toggle the little "=" sign
2190:src/display.c ****  */
2191:src/display.c **** void set_IO_annunciator(void) {
2192:src/display.c **** #ifndef DM42
2193:src/display.c ****     int on = SerialOn
2194:src/display.c **** #endif
2195:src/display.c **** #ifdef DM42
2196:src/display.c ****     int on = 0
2197:src/display.c **** #endif
2198:src/display.c **** #ifdef REALBUILD
2199:src/display.c **** 	  || DebugFlag
2200:src/display.c **** #endif
2201:src/display.c **** #ifdef INFRARED
2202:src/display.c **** 	  || PrinterColumn != 0
2203:src/display.c **** #endif
2204:src/display.c **** 	;
2205:src/display.c **** 
2206:src/display.c **** 	if (on != IoAnnunciator) {
2207:src/display.c **** 		dot(LIT_EQ, on);
2208:src/display.c **** 		IoAnnunciator = on;
2209:src/display.c **** 		finish_display(); //LIT_EQ
2210:src/display.c **** 	}
2211:src/display.c **** }
2212:src/display.c **** 
2213:src/display.c **** /*
ARM GAS  /tmp/ccZMW3We.s 			page 54


2214:src/display.c ****  *  Update the display
2215:src/display.c ****  */
2216:src/display.c **** void display(void) {
2217:src/display.c **** 	int i, j;
2218:src/display.c **** 	char buf[40], *bp = buf;
2219:src/display.c **** 	const char *p;
2220:src/display.c **** 	int annuc = 0;
2221:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2222:src/display.c **** 	int skip = 0;
2223:src/display.c **** 	int x_disp = 0;
2224:src/display.c **** 	const int shift = cur_shift();
2225:src/display.c **** 
2226:src/display.c **** 
2227:src/display.c **** 
2228:src/display.c **** 	if (State2.disp_freeze) {
2229:src/display.c **** 		State2.disp_freeze = 0;
2230:src/display.c **** 		State2.disp_temp = 1;
2231:src/display.c **** #ifdef CONSOLE
2232:src/display.c **** 		JustDisplayed = 1;
2233:src/display.c **** #endif
2234:src/display.c **** 		ShowRPN = 0;
2235:src/display.c **** 		return;
2236:src/display.c **** 	}
2237:src/display.c **** 
2238:src/display.c **** 	if (WasDataEntry) {
2239:src/display.c **** #if defined(QTGUI) || defined(IOS)
2240:src/display.c **** 		xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2241:src/display.c **** 		LastDisplayedNumber[NUMBER_LENGTH]=0;
2242:src/display.c **** 		xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2243:src/display.c **** 		LastDisplayedExponent[EXPONENT_LENGTH]=0;
2244:src/display.c **** #endif
2245:src/display.c **** 		wait_for_display(); // Normally called from reset_disp()
2246:src/display.c **** 
2247:src/display.c **** 		// Erase 7-segment display
2248:src/display.c **** 		for (i = 0; i <= EXP_SIGN; ++i) {
2249:src/display.c **** 			clr_dot(i);
2250:src/display.c **** 		}
2251:src/display.c **** 		goto only_update_x;
2252:src/display.c **** 	}
2253:src/display.c **** 
2254:src/display.c **** 	// Clear display
2255:src/display.c **** 	reset_disp();
2256:src/display.c **** 
2257:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2258:src/display.c **** 	if (State2.cmplx  && !cata) {
2259:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
2260:src/display.c **** 		set_status(buf);
2261:src/display.c **** 	}
2262:src/display.c **** 	if (State2.version) {
2263:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2264:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
2265:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2266:src/display.c **** #ifndef REALBUILD
2267:src/display.c **** 		scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2268:src/display.c **** 		scopy(LastDisplayedExponent, " ");
2269:src/display.c **** #endif
2270:src/display.c **** 		xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
ARM GAS  /tmp/ccZMW3We.s 			page 55


2271:src/display.c **** 		set_status(vers);
2272:src/display.c **** 		skip = 1;
2273:src/display.c **** 		goto nostk;
2274:src/display.c **** 	} else if (State2.confirm) {
2275:src/display.c **** 		set_status(S_SURE);
2276:src/display.c **** 	} else if (State2.hyp) {
2277:src/display.c **** 		bp = scopy(bp, "HYP");
2278:src/display.c **** 		if (! State2.dot)
2279:src/display.c **** 			*bp++ = '\235';
2280:src/display.c **** 		set_status(buf);
2281:src/display.c **** 	} else if (State2.gtodot) {
2282:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2283:src/display.c **** 		bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2284:src/display.c **** 		if (State2.numdigit > 0)
2285:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2286:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
2287:src/display.c **** 			*bp++ = '_';
2288:src/display.c **** 		set_status(buf);
2289:src/display.c **** 	} else if (State2.rarg) {
2290:src/display.c **** 		/* Commands with arguments */
2291:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2292:src/display.c **** 		if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2293:src/display.c **** 			bp = scopy(bp, "\177\006\006");
2294:src/display.c **** #endif
2295:src/display.c **** 		bp = scopy(bp, argcmds[CmdBase].cmd);
2296:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
2297:src/display.c **** 		if (State2.dot) {
2298:src/display.c **** 			*bp++ = 's';
2299:src/display.c **** 			*bp++ = '_';
2300:src/display.c **** 		} else if (shift == SHIFT_F) {
2301:src/display.c **** 			*bp++ = '\021';
2302:src/display.c **** 			*bp++ = '_';
2303:src/display.c **** 		} else {
2304:src/display.c **** 			/* const int maxdigits = State2.shuffle ? 4 
2305:src/display.c **** 						: State2.ind ? 2 
2306:src/display.c **** 						: num_arg_digits(CmdBase); */
2307:src/display.c **** 			if (State2.local)
2308:src/display.c **** 				*bp++ = '.';
2309:src/display.c **** 			if (State2.numdigit > 0) {
2310:src/display.c **** 				if (State2.shuffle)
2311:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2312:src/display.c **** 						*bp++ = REGNAMES[j & 3];
2313:src/display.c **** 				else
2314:src/display.c **** 					bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2315:src/display.c **** 			}
2316:src/display.c **** 			// for (i = State2.numdigit; i < maxdigits; i++)
2317:src/display.c **** 				*bp++ = '_';
2318:src/display.c **** 		}
2319:src/display.c **** 		set_status(buf);
2320:src/display.c **** 	} else if (State2.test != TST_NONE) {
2321:src/display.c **** 		*bp++ = 'x';
2322:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
2323:src/display.c **** 		*bp++ = '_';
2324:src/display.c **** 		*bp++ = '?';
2325:src/display.c **** 		set_status(buf);
2326:src/display.c **** 	} else if (cata) {
2327:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
ARM GAS  /tmp/ccZMW3We.s 			page 56


2328:src/display.c **** 		char b2[16];
2329:src/display.c **** 		const char *p;
2330:src/display.c **** 
2331:src/display.c **** 		bp = scopy(bp, "\177\006\006");
2332:src/display.c **** 		p = catcmd(op, b2);
2333:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
2334:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
2335:src/display.c **** 		bp = scopy(bp, p);
2336:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2337:src/display.c **** 			// State2.disp_small = 1;
2338:src/display.c **** 			if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2339:src/display.c **** 				set_digits_string("0 to 255", 0);
2340:src/display.c **** 			else
2341:src/display.c **** 				set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2342:src/display.c **** 			skip = 1;
2343:src/display.c **** 		} else if (State2.runmode) {
2344:src/display.c **** 			if (cata == CATALOGUE_CONV) {
2345:src/display.c **** 				decNumber x, r;
2346:src/display.c **** 				decimal64 z;
2347:src/display.c **** 
2348:src/display.c **** 				getX(&x);
2349:src/display.c **** 				if (opKIND(op) == KIND_MON) {
2350:src/display.c **** 					const unsigned int f = argKIND(op);
2351:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2352:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2353:src/display.c **** 						update_speed(0);
2354:src/display.c **** 						fp(&r, &x);
2355:src/display.c **** 					}
2356:src/display.c **** 					else
2357:src/display.c **** 						set_NaN(&r);
2358:src/display.c **** 				} else
2359:src/display.c **** 					do_conv(&r, op & RARG_MASK, &x);
2360:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
2361:src/display.c **** 				packed_from_number(&z, &r);
2362:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
2363:src/display.c **** 				skip = 1;
2364:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2365:src/display.c **** 				REGISTER z, *const x = StackBase;
2366:src/display.c **** 				copyreg(&z, x);
2367:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
2368:src/display.c **** 				set_x(x, CNULL, is_dblmode());
2369:src/display.c **** 				copyreg(x, &z);
2370:src/display.c **** 				skip = 1;
2371:src/display.c **** 			}
2372:src/display.c **** 		}
2373:src/display.c **** 		set_status(buf);
2374:src/display.c **** 	} else if (State2.multi) {
2375:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2376:src/display.c **** 		if (State2.numdigit > 0) {
2377:src/display.c **** 			*bp++ = (char) State2.digval;
2378:src/display.c **** 			if (State2.numdigit > 1)
2379:src/display.c **** 				*bp++ = State2.digval2;
2380:src/display.c **** 		}
2381:src/display.c **** 		set_status(buf);
2382:src/display.c **** 	} else if (State2.status) {
2383:src/display.c **** 		show_status();
2384:src/display.c **** 		skip = 1;
ARM GAS  /tmp/ccZMW3We.s 			page 57


2385:src/display.c **** 	} else if (State2.labellist) {
2386:src/display.c **** 		show_label();
2387:src/display.c **** 		skip = 1;
2388:src/display.c **** 	} else if (State2.registerlist) {
2389:src/display.c **** 		show_registers();
2390:src/display.c **** 		skip = 1;
2391:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2392:src/display.c **** 			annunciators();
2393:src/display.c **** 		}
2394:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2395:src/display.c **** 	} else if (State2.disp_as_alpha) {
2396:src/display.c **** 		set_status(alpha_rcl_s(regX_idx, buf));
2397:src/display.c **** #endif
2398:src/display.c **** 	} else if (State2.runmode) {
2399:src/display.c **** 	  if (DispMsg) { 
2400:src/display.c **** 			set_status(DispMsg);
2401:src/display.c **** 		} else if (DispPlot) {
2402:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2403:src/display.c **** 		} else if (State2.alphas) {
2404:src/display.c **** #if 0
2405:src/display.c **** 			set_digits_string("AlpHA", 0);
2406:src/display.c **** #endif
2407:src/display.c **** 			bp = scopy(buf, Alpha);
2408:src/display.c **** 			j = State2.alpha_pos;
2409:src/display.c **** 			if (j != 0) {
2410:src/display.c **** 				i = slen(buf);
2411:src/display.c **** 				j *= 6;
2412:src/display.c **** 				if ( i - j >= 12 ) {
2413:src/display.c **** 					buf[ (i - j) ] = '\0';
2414:src/display.c **** 					set_status_right(buf);
2415:src/display.c **** 				}
2416:src/display.c **** 				else {
2417:src/display.c **** 					set_status(buf);
2418:src/display.c **** 				}
2419:src/display.c **** 			} else {
2420:src/display.c **** 				if (shift != SHIFT_N) {
2421:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
2422:src/display.c **** 					*bp++ = '\0';
2423:src/display.c **** 				}
2424:src/display.c **** 				set_status_right(buf);
2425:src/display.c **** 			}
2426:src/display.c **** 		} else {
2427:src/display.c **** 			annuc = 1;
2428:src/display.c **** 		}
2429:src/display.c **** 	} else {
2430:src/display.c **** #ifndef DM42
2431:src/display.c **** 	        show_progtrace(buf);
2432:src/display.c **** #endif
2433:src/display.c **** 		i = state_pc();
2434:src/display.c **** 		if (i > 0)
2435:src/display.c **** 			set_status(prt(getprog(i), buf));
2436:src/display.c **** 		else
2437:src/display.c **** 			set_status("");
2438:src/display.c **** 		set_dot(STO_annun);
2439:src/display.c **** #if 0
2440:src/display.c **** 		if (State2.smode == SDISP_SHOW) {
2441:src/display.c **** 			unsigned short int crc;
ARM GAS  /tmp/ccZMW3We.s 			page 58


2442:src/display.c **** 			crc = checksum_program();
2443:src/display.c **** 			j = SEGS_PER_DIGIT * 0;
2444:src/display.c **** 			for (i=0; i<4; i++) {
2445:src/display.c **** 				set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2446:src/display.c **** 				crc >>= 4;
2447:src/display.c **** 				j += SEGS_PER_DIGIT;
2448:src/display.c **** 			}
2449:src/display.c **** 			skip = 1;
2450:src/display.c **** 		}
2451:src/display.c **** 		else
2452:src/display.c **** #endif
2453:src/display.c **** 		if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2454:src/display.c **** 			annuc = 1;
2455:src/display.c **** 		goto nostk;
2456:src/display.c **** 	}
2457:src/display.c **** 	show_stack();
2458:src/display.c **** nostk:	show_flags();
2459:src/display.c **** 	if (!skip) {
2460:src/display.c **** 		if (State2.runmode) {
2461:src/display.c **** only_update_x:
2462:src/display.c **** 			p = get_cmdline();
2463:src/display.c **** 			if (p == NULL || cata) {
2464:src/display.c **** 				if (ShowRegister != -1) {
2465:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
2466:src/display.c **** 					format_reg(ShowRegister, CNULL);
2467:src/display.c **** 				}
2468:src/display.c **** 				else
2469:src/display.c **** 					set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2470:src/display.c **** 			} else {
2471:src/display.c **** 				disp_x(p);
2472:src/display.c **** 				x_disp = 1;
2473:src/display.c **** 			}
2474:src/display.c **** 			if (WasDataEntry) {
2475:src/display.c **** 				goto finish;
2476:src/display.c **** 			}
2477:src/display.c **** 		} else {
2478:src/display.c **** 			unsigned int pc = state_pc();
2479:src/display.c **** 			unsigned int upc = user_pc(pc);
2480:src/display.c **** 			const int n = nLIB(pc);
2481:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2482:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2483:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2484:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2485:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
2486:src/display.c **** #ifndef REALBUILD
2487:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2488:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2489:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2490:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2491:src/display.c ****       { // allow local declaration of b and l in C (not C++) on VisualStudio
2492:src/display.c **** 			  char *b=buf;
2493:src/display.c **** 			  char *l=LastDisplayedNumber;
2494:src/display.c **** 			  *l++=' ';
2495:src/display.c **** 			  while(*b) {
2496:src/display.c **** 				  *l++=*b++;
2497:src/display.c **** 				  *l++=' ';
2498:src/display.c **** 			  }
ARM GAS  /tmp/ccZMW3We.s 			page 59


2499:src/display.c **** 			  *l=0;
2500:src/display.c ****       }
2501:src/display.c **** #endif
2502:src/display.c **** 		}
2503:src/display.c **** 	}
2504:src/display.c **** 	set_annunciators();
2505:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2506:src/display.c **** 		ShowRPN = 0;
2507:src/display.c **** 		dot(RPN, 0);
2508:src/display.c **** 	}
2509:src/display.c **** 	// disp_temp disables the <- key
2510:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2511:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2512:src/display.c **** 
2513:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2514:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2515:src/display.c ****  		annunciators();
2516:src/display.c ****  	State2.hms = 0;
2517:src/display.c **** #else
2518:src/display.c **** 
2519:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2520:src/display.c **** 		annunciators();
2521:src/display.c **** 	
2522:src/display.c **** 
2523:src/display.c **** 
2524:src/display.c **** #endif
2525:src/display.c **** 
2526:src/display.c **** finish:
2527:src/display.c **** 	State2.version = 0;
2528:src/display.c **** 	State2.disp_as_alpha = 0;
2529:src/display.c **** 	State2.smode = SDISP_NORMAL;
2530:src/display.c **** 	State2.invalid_disp = 0;
2531:src/display.c **** 	ShowRegister = regX_idx;
2532:src/display.c **** 	DispMsg = CNULL;
2533:src/display.c **** 	DispPlot = 0;
2534:src/display.c **** 	State2.disp_small = 0;
2535:src/display.c **** 	finish_display();
2536:src/display.c **** #ifdef CONSOLE
2537:src/display.c **** 	JustDisplayed = 1;
2538:src/display.c **** #endif
2539:src/display.c **** }
2540:src/display.c **** 
2541:src/display.c **** /*
2542:src/display.c ****  *  Frozen display will revert to normal only after another call to display();
2543:src/display.c ****  */
2544:src/display.c **** void frozen_display()
2545:src/display.c **** {
2546:src/display.c **** 	State2.disp_freeze = 0;
2547:src/display.c **** 	display();
2548:src/display.c **** 	State2.disp_freeze = 1;
2549:src/display.c **** }
2550:src/display.c **** 
2551:src/display.c **** static void set_status_graphic(const unsigned char *graphic) {
2552:src/display.c **** 	int glen = *graphic++;
2553:src/display.c **** 	int i, j;
2554:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2555:src/display.c **** 	unsigned long long int mat[6];
ARM GAS  /tmp/ccZMW3We.s 			page 60


2556:src/display.c **** 
2557:src/display.c **** 	xset(mat, 0, sizeof(mat));
2558:src/display.c **** #endif
2559:src/display.c **** #ifndef REALBUILD
2560:src/display.c **** 	forceDispPlot=1;
2561:src/display.c **** #endif
2562:src/display.c **** 	if (glen <= 0)			return;
2563:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2564:src/display.c **** 
2565:src/display.c **** 	for (i=0; i<6; i++)
2566:src/display.c **** 		for (j=1; j<=glen; j++) {
2567:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2568:src/display.c **** 			if (graphic[j] & (1 << i))
2569:src/display.c **** 				mat[i] |= 1LL << j;
2570:src/display.c **** #else
2571:src/display.c **** 			dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2572:src/display.c **** #endif
2573:src/display.c **** 		}
2574:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2575:src/display.c **** 	set_status_grob(mat);
2576:src/display.c **** #endif
2577:src/display.c **** }
2578:src/display.c **** 
2579:src/display.c **** 
2580:src/display.c **** /* Take the given string and display as much of it as possible on the top
2581:src/display.c ****  * line of the display.  The font size is set by the smallp parameter.
2582:src/display.c ****  * We allow character to go one pixel beyond the display since the rightmost
2583:src/display.c ****  * column is almost always blank.
2584:src/display.c ****  */
2585:src/display.c **** static void set_status_sized(const char *str, int smallp) {
 679              		.loc 1 2585 59 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 544
 682              		@ frame_needed = 0, uses_anonymous_args = 0
2586:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 2586 2 view .LVU201
2587:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2588:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2589:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 2589 2 view .LVU202
2590:src/display.c **** #endif
2591:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 2591 2 view .LVU203
2592:src/display.c **** 	int i, j;
 686              		.loc 1 2592 2 view .LVU204
2593:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 2593 2 view .LVU205
2585:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 2585 59 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
ARM GAS  /tmp/ccZMW3We.s 			page 61


 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
2594:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2595:src/display.c **** 	unsigned long long int mat[6];
2596:src/display.c **** 
2597:src/display.c **** 	xset(mat, 0, sizeof(mat));
2598:src/display.c **** #endif
2599:src/display.c **** #ifndef REALBUILD
2600:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 2600 2 view .LVU207
 701 0004 624C     		ldr	r4, .L113
2585:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 2585 59 view .LVU208
 703 0006 ADF5097D 		sub	sp, sp, #548
 704              		.cfi_def_cfa_offset 584
2593:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 2593 34 view .LVU209
 706 000a 0B1E     		subs	r3, r1, #0
 707 000c 0293     		str	r3, [sp, #8]
2585:src/display.c **** 	unsigned short int posns[257];
 708              		.loc 1 2585 59 view .LVU210
 709 000e 0090     		str	r0, [sp]
2593:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 2593 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713 0016 0023     		moveq	r3, #0
 714              		.loc 1 2600 2 view .LVU212
 715 0018 0146     		mov	r1, r0
 716              	.LVL57:
 717              		.loc 1 2600 2 view .LVU213
 718 001a 2046     		mov	r0, r4
 719              	.LVL58:
2593:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 720              		.loc 1 2593 34 view .LVU214
 721 001c 0393     		str	r3, [sp, #12]
 722              	.LVL59:
 723              		.loc 1 2600 2 is_stmt 1 view .LVU215
 724 001e FFF7FEFF 		bl	scopy
 725              	.LVL60:
2601:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2602:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 726              		.loc 1 2602 2 view .LVU216
 727              		.loc 1 2602 14 view .LVU217
 728              		.loc 1 2602 31 is_stmt 0 view .LVU218
 729 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 730              		.loc 1 2602 2 view .LVU219
 731 0024 13B9     		cbnz	r3, .L70
 732 0026 07E0     		b	.L68
 733              	.LVL61:
 734              	.L69:
 735              		.loc 1 2602 14 is_stmt 1 discriminator 1 view .LVU220
 736 0028 0134     		adds	r4, r4, #1
 737              		.loc 1 2602 2 is_stmt 0 discriminator 1 view .LVU221
 738 002a 2BB1     		cbz	r3, .L68
 739              	.L70:
ARM GAS  /tmp/ccZMW3We.s 			page 62


 740              	.LVL62:
2603:src/display.c **** 		if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 741              		.loc 1 2603 3 is_stmt 1 view .LVU222
 742              		.loc 1 2603 6 is_stmt 0 view .LVU223
 743 002c 072B     		cmp	r3, #7
 744              		.loc 1 2603 38 view .LVU224
 745 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 746              		.loc 1 2603 6 view .LVU225
 747 0030 FAD1     		bne	.L69
 748              		.loc 1 2603 38 discriminator 1 view .LVU226
 749 0032 002B     		cmp	r3, #0
 750 0034 40F09E80 		bne	.L109
 751              	.LVL63:
 752              	.L68:
2604:src/display.c **** 			scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2605:src/display.c **** 			if (LastDisplayedText[i] != '\0')
2606:src/display.c **** 				++i;
2607:src/display.c **** 		}
2608:src/display.c **** 		else {
2609:src/display.c **** 			++i;
2610:src/display.c **** 		}
2611:src/display.c **** 	}
2612:src/display.c **** #endif
2613:src/display.c **** 	forceDispPlot=0;
 753              		.loc 1 2613 2 is_stmt 1 view .LVU227
2614:src/display.c **** #endif
2615:src/display.c **** #ifdef RP_PREFIX
2616:src/display.c **** 	RectPolConv = 0;
 754              		.loc 1 2616 14 is_stmt 0 view .LVU228
 755 0038 564B     		ldr	r3, .L113+4
2613:src/display.c **** #endif
 756              		.loc 1 2613 15 view .LVU229
 757 003a 574A     		ldr	r2, .L113+8
 758 003c 0027     		movs	r7, #0
 759              		.loc 1 2616 14 view .LVU230
 760 003e 1F60     		str	r7, [r3]
2617:src/display.c **** #endif
2618:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2619:src/display.c **** 	findlengths(posns, smallp);
2620:src/display.c **** #endif
2621:src/display.c **** 	while (*str != '\0' && x <= BITMAP_WIDTH+1)  {
 761              		.loc 1 2621 9 view .LVU231
 762 0040 009B     		ldr	r3, [sp]
2613:src/display.c **** #endif
 763              		.loc 1 2613 15 view .LVU232
 764 0042 1770     		strb	r7, [r2]
2616:src/display.c **** #endif
 765              		.loc 1 2616 2 is_stmt 1 view .LVU233
 766              		.loc 1 2621 2 view .LVU234
 767              	.LVL64:
 768              		.loc 1 2621 8 view .LVU235
 769              		.loc 1 2621 9 is_stmt 0 view .LVU236
 770 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
2622:src/display.c **** 		int c;
2623:src/display.c **** 		int width;
2624:src/display.c **** 		unsigned char cmap[6];
2625:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccZMW3We.s 			page 63


2626:src/display.c **** 		int real_width;
2627:src/display.c **** 		int current_smallp;
2628:src/display.c **** 
2629:src/display.c **** 		// A 007 byte followed by a mode byte changes the way the following character is printed.
2630:src/display.c **** 		// Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2631:src/display.c **** 		// Bits 6-5: 00 -> don't change font
2632:src/display.c **** 		//           01 -> (not used)
2633:src/display.c **** 		//           10 -> use big font
2634:src/display.c **** 		//           11 -> use small font
2635:src/display.c **** 		// Bits 4-0: character will be considered this wide
2636:src/display.c **** 		if (str[0] == '\007') {
2637:src/display.c **** 			width = str[1] & 0x1F;
2638:src/display.c **** 			switch (str[1] & 0x60) {
2639:src/display.c **** 			default:
2640:src/display.c **** 			case 0x00:	current_smallp = smallp;
2641:src/display.c **** 					break;
2642:src/display.c **** 			case 0x40:	current_smallp = 0;
2643:src/display.c **** 					break;
2644:src/display.c **** 			case 0x60:	current_smallp = 1;
2645:src/display.c **** 					break;
2646:src/display.c **** 			}
2647:src/display.c **** 			c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
2648:src/display.c **** 			str += 3;
2649:src/display.c **** 
2650:src/display.c **** 			real_width = charlengths(c);
2651:src/display.c **** 		} else {
2652:src/display.c **** 			c = (unsigned char) *str++ + offset;
2653:src/display.c **** 			real_width = width = charlengths(c);
2654:src/display.c **** 			current_smallp = smallp;
2655:src/display.c **** 		}
2656:src/display.c **** 
2657:src/display.c **** 		if (x + real_width > BITMAP_WIDTH+1)
2658:src/display.c **** 			break;
2659:src/display.c **** 
2660:src/display.c **** 		if (posns_state != current_smallp) {
2661:src/display.c **** 			findlengths(posns, current_smallp);
2662:src/display.c **** 			posns_state = current_smallp;
2663:src/display.c **** 		}
2664:src/display.c **** 		unpackchar(c, cmap, current_smallp, posns);
2665:src/display.c **** #else
2666:src/display.c **** 		c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
2667:src/display.c **** 
2668:src/display.c **** 		//cmap = &charset[c][0];
2669:src/display.c **** 		width = charlengths(c);
2670:src/display.c **** 
2671:src/display.c **** 		if (x + width > BITMAP_WIDTH+1)
2672:src/display.c **** 			break;
2673:src/display.c **** 
2674:src/display.c **** 		/* Decode the packed character bytes */
2675:src/display.c **** 		unpackchar(c, cmap, smallp, posns);
2676:src/display.c **** #endif
2677:src/display.c **** 
2678:src/display.c **** 		for (i=0; i<6; i++)
2679:src/display.c **** 			for (j=0; j<width; j++) {
2680:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
2681:src/display.c **** 					break;
2682:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccZMW3We.s 			page 64


2683:src/display.c **** 				if (cmap[i] & (1 << j))
2684:src/display.c **** 					mat[i] |= 1LL << (x+j);
2685:src/display.c **** #else
2686:src/display.c **** 				dot((x+j)*6+i+MATRIX_BASE, (cmap[i] & (1 << j))?1:0);
2687:src/display.c **** #endif
2688:src/display.c **** 			}
2689:src/display.c **** 		x += width;
2690:src/display.c **** 	}
2691:src/display.c **** 
2692:src/display.c **** 
2693:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2694:src/display.c **** 	set_status_grob(mat);
2695:src/display.c **** #else
2696:src/display.c **** 	for (i=MATRIX_BASE + 6*x; i<400; i++)
 771              		.loc 1 2696 8 view .LVU237
 772 0046 8E24     		movs	r4, #142
2621:src/display.c **** 		int c;
 773              		.loc 1 2621 8 view .LVU238
 774 0048 002D     		cmp	r5, #0
 775 004a 7CD0     		beq	.L88
 776              	.LBB150:
2636:src/display.c **** 			width = str[1] & 0x1F;
 777              		.loc 1 2636 6 view .LVU239
 778 004c 072D     		cmp	r5, #7
 779              	.LBE150:
2589:src/display.c **** #endif
 780              		.loc 1 2589 6 view .LVU240
 781 004e 4FF0FF04 		mov	r4, #255
 782              	.LVL65:
 783              	.LBB159:
2622:src/display.c **** 		int width;
 784              		.loc 1 2622 3 is_stmt 1 view .LVU241
2623:src/display.c **** 		unsigned char cmap[6];
 785              		.loc 1 2623 3 view .LVU242
2624:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 786              		.loc 1 2624 3 view .LVU243
2626:src/display.c **** 		int current_smallp;
 787              		.loc 1 2626 3 view .LVU244
2627:src/display.c **** 
 788              		.loc 1 2627 3 view .LVU245
2636:src/display.c **** 			width = str[1] & 0x1F;
 789              		.loc 1 2636 3 view .LVU246
2636:src/display.c **** 			width = str[1] & 0x1F;
 790              		.loc 1 2636 6 is_stmt 0 view .LVU247
 791 0052 63D1     		bne	.L71
 792              	.L111:
2637:src/display.c **** 			switch (str[1] & 0x60) {
 793              		.loc 1 2637 4 is_stmt 1 view .LVU248
2637:src/display.c **** 			switch (str[1] & 0x60) {
 794              		.loc 1 2637 15 is_stmt 0 view .LVU249
 795 0054 009B     		ldr	r3, [sp]
 796              	.LVL66:
2637:src/display.c **** 			switch (str[1] & 0x60) {
 797              		.loc 1 2637 15 view .LVU250
 798 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 799 0058 06F06003 		and	r3, r6, #96
2638:src/display.c **** 			default:
ARM GAS  /tmp/ccZMW3We.s 			page 65


 800              		.loc 1 2638 4 view .LVU251
 801 005c 402B     		cmp	r3, #64
2637:src/display.c **** 			switch (str[1] & 0x60) {
 802              		.loc 1 2637 10 view .LVU252
 803 005e 06F01F06 		and	r6, r6, #31
 804              	.LVL67:
2638:src/display.c **** 			default:
 805              		.loc 1 2638 4 is_stmt 1 view .LVU253
 806 0062 7BD0     		beq	.L72
 807 0064 602B     		cmp	r3, #96
 808 0066 7ED0     		beq	.L73
 809              	.LVL68:
2647:src/display.c **** 			str += 3;
 810              		.loc 1 2647 4 view .LVU254
2647:src/display.c **** 			str += 3;
 811              		.loc 1 2647 8 is_stmt 0 view .LVU255
 812 0068 009B     		ldr	r3, [sp]
 813 006a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
2647:src/display.c **** 			str += 3;
 814              		.loc 1 2647 55 view .LVU256
 815 006c 029B     		ldr	r3, [sp, #8]
 816 006e 002B     		cmp	r3, #0
 817 0070 00F08A80 		beq	.L92
 818 0074 05F58075 		add	r5, r5, #256
 819 0078 9A46     		mov	r10, r3
 820              	.LVL69:
 821              	.L75:
2648:src/display.c **** 
 822              		.loc 1 2648 4 is_stmt 1 discriminator 4 view .LVU257
2650:src/display.c **** 		} else {
 823              		.loc 1 2650 17 is_stmt 0 discriminator 4 view .LVU258
 824 007a 2846     		mov	r0, r5
 825 007c FFF7FEFF 		bl	charlengths
 826              	.LVL70:
2648:src/display.c **** 
 827              		.loc 1 2648 8 discriminator 4 view .LVU259
 828 0080 009B     		ldr	r3, [sp]
2657:src/display.c **** 			break;
 829              		.loc 1 2657 9 discriminator 4 view .LVU260
 830 0082 3844     		add	r0, r0, r7
2648:src/display.c **** 
 831              		.loc 1 2648 8 discriminator 4 view .LVU261
 832 0084 0333     		adds	r3, r3, #3
2657:src/display.c **** 			break;
 833              		.loc 1 2657 6 discriminator 4 view .LVU262
 834 0086 2C28     		cmp	r0, #44
2648:src/display.c **** 
 835              		.loc 1 2648 8 discriminator 4 view .LVU263
 836 0088 0093     		str	r3, [sp]
 837              	.LVL71:
2650:src/display.c **** 		} else {
 838              		.loc 1 2650 4 is_stmt 1 discriminator 4 view .LVU264
2657:src/display.c **** 			break;
 839              		.loc 1 2657 3 discriminator 4 view .LVU265
2657:src/display.c **** 			break;
 840              		.loc 1 2657 6 is_stmt 0 discriminator 4 view .LVU266
 841 008a 55D8     		bhi	.L87
ARM GAS  /tmp/ccZMW3We.s 			page 66


 842              	.L112:
2660:src/display.c **** 			findlengths(posns, current_smallp);
 843              		.loc 1 2660 3 is_stmt 1 view .LVU267
2660:src/display.c **** 			findlengths(posns, current_smallp);
 844              		.loc 1 2660 6 is_stmt 0 view .LVU268
 845 008c A245     		cmp	r10, r4
2661:src/display.c **** 			posns_state = current_smallp;
 846              		.loc 1 2661 4 view .LVU269
 847 008e 07AB     		add	r3, sp, #28
 848              	.LVL72:
2660:src/display.c **** 			findlengths(posns, current_smallp);
 849              		.loc 1 2660 6 view .LVU270
 850 0090 05D0     		beq	.L78
2661:src/display.c **** 			posns_state = current_smallp;
 851              		.loc 1 2661 4 is_stmt 1 view .LVU271
 852 0092 1846     		mov	r0, r3
 853 0094 5146     		mov	r1, r10
 854 0096 0193     		str	r3, [sp, #4]
 855 0098 FFF7FEFF 		bl	findlengths
 856              	.LVL73:
 857 009c 019B     		ldr	r3, [sp, #4]
2662:src/display.c **** 		}
 858              		.loc 1 2662 4 view .LVU272
 859              	.LVL74:
 860              	.L78:
2664:src/display.c **** #else
 861              		.loc 1 2664 3 view .LVU273
 862 009e 2846     		mov	r0, r5
 863 00a0 05A9     		add	r1, sp, #20
 864 00a2 5246     		mov	r2, r10
 865 00a4 07EB4708 		add	r8, r7, r7, lsl #1
 866 00a8 FFF7FEFF 		bl	unpackchar
 867              	.LVL75:
2678:src/display.c **** 			for (j=0; j<width; j++) {
 868              		.loc 1 2678 3 view .LVU274
2678:src/display.c **** 			for (j=0; j<width; j++) {
 869              		.loc 1 2678 13 view .LVU275
 870 00ac 4FEA4808 		lsl	r8, r8, #1
 871 00b0 05AD     		add	r5, sp, #20
 872              	.LVL76:
2678:src/display.c **** 			for (j=0; j<width; j++) {
 873              		.loc 1 2678 13 is_stmt 0 view .LVU276
 874 00b2 A8F58178 		sub	r8, r8, #258
2664:src/display.c **** #else
 875              		.loc 1 2664 3 view .LVU277
 876 00b6 4FF4C874 		mov	r4, #400
 877              	.LVL77:
 878              	.L79:
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 879              		.loc 1 2679 14 is_stmt 1 view .LVU278
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 880              		.loc 1 2679 4 is_stmt 0 view .LVU279
 881 00ba 002E     		cmp	r6, #0
 882 00bc 1FDD     		ble	.L85
2680:src/display.c **** 					break;
 883              		.loc 1 2680 5 is_stmt 1 view .LVU280
2680:src/display.c **** 					break;
ARM GAS  /tmp/ccZMW3We.s 			page 67


 884              		.loc 1 2680 8 is_stmt 0 view .LVU281
 885 00be 2A2F     		cmp	r7, #42
 886 00c0 1DD8     		bhi	.L85
 887 00c2 08EB0409 		add	r9, r8, r4
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 888              		.loc 1 2679 10 view .LVU282
 889 00c6 4FF0000B 		mov	fp, #0
 890 00ca 09E0     		b	.L80
 891              	.LVL78:
 892              	.L110:
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 893              		.loc 1 2679 24 view .LVU283
 894 00cc 0BF1010B 		add	fp, fp, #1
 895              	.LVL79:
 896              	.LBB151:
 897              	.LBB152:
 328:src/display.c **** 	else	clr_dot(n);
 898              		.loc 1 328 10 view .LVU284
 899 00d0 FFF7FEFF 		bl	set_dot
 900              	.LVL80:
 328:src/display.c **** 	else	clr_dot(n);
 901              		.loc 1 328 10 view .LVU285
 902              	.LBE152:
 903              	.LBE151:
2680:src/display.c **** 					break;
 904              		.loc 1 2680 5 is_stmt 1 view .LVU286
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 905              		.loc 1 2679 23 view .LVU287
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 906              		.loc 1 2679 14 view .LVU288
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 907              		.loc 1 2679 4 is_stmt 0 view .LVU289
 908 00d4 5E45     		cmp	r6, fp
 909 00d6 09F10609 		add	r9, r9, #6
 910 00da 10D0     		beq	.L85
 911              	.L84:
2680:src/display.c **** 					break;
 912              		.loc 1 2680 8 view .LVU290
 913 00dc 4C45     		cmp	r4, r9
 914 00de 0ED0     		beq	.L85
 915              	.LVL81:
 916              	.L80:
2686:src/display.c **** #endif
 917              		.loc 1 2686 5 is_stmt 1 discriminator 2 view .LVU291
 918              	.LBB156:
 919              	.LBI151:
 327:src/display.c **** 	if (on)	set_dot(n);
 920              		.loc 1 327 6 discriminator 2 view .LVU292
 921              	.LBB153:
 328:src/display.c **** 	else	clr_dot(n);
 922              		.loc 1 328 2 discriminator 2 view .LVU293
 328:src/display.c **** 	else	clr_dot(n);
 923              		.loc 1 328 10 discriminator 2 view .LVU294
 329:src/display.c **** }
 924              		.loc 1 329 7 discriminator 2 view .LVU295
 925              	.LBE153:
 926              	.LBE156:
ARM GAS  /tmp/ccZMW3We.s 			page 68


2686:src/display.c **** #endif
 927              		.loc 1 2686 37 is_stmt 0 discriminator 2 view .LVU296
 928 00e0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
2686:src/display.c **** #endif
 929              		.loc 1 2686 52 discriminator 2 view .LVU297
 930 00e2 41FA0BF1 		asr	r1, r1, fp
 931              	.LBB157:
 932              	.LBB154:
 328:src/display.c **** 	else	clr_dot(n);
 933              		.loc 1 328 5 discriminator 2 view .LVU298
 934 00e6 11F0010F 		tst	r1, #1
 328:src/display.c **** 	else	clr_dot(n);
 935              		.loc 1 328 10 discriminator 2 view .LVU299
 936 00ea 4846     		mov	r0, r9
 328:src/display.c **** 	else	clr_dot(n);
 937              		.loc 1 328 5 discriminator 2 view .LVU300
 938 00ec EED1     		bne	.L110
 939              	.LBE154:
 940              	.LBE157:
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 941              		.loc 1 2679 24 view .LVU301
 942 00ee 0BF1010B 		add	fp, fp, #1
 943              	.LVL82:
 944              	.LBB158:
 945              	.LBB155:
 329:src/display.c **** }
 946              		.loc 1 329 7 view .LVU302
 947 00f2 FFF7FEFF 		bl	clr_dot
 948              	.LVL83:
 329:src/display.c **** }
 949              		.loc 1 329 7 view .LVU303
 950              	.LBE155:
 951              	.LBE158:
2680:src/display.c **** 					break;
 952              		.loc 1 2680 5 is_stmt 1 view .LVU304
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 953              		.loc 1 2679 23 view .LVU305
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 954              		.loc 1 2679 14 view .LVU306
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 955              		.loc 1 2679 4 is_stmt 0 view .LVU307
 956 00f6 5E45     		cmp	r6, fp
 957 00f8 09F10609 		add	r9, r9, #6
 958 00fc EED1     		bne	.L84
 959              	.LVL84:
 960              	.L85:
2678:src/display.c **** 			for (j=0; j<width; j++) {
 961              		.loc 1 2678 18 is_stmt 1 view .LVU308
2678:src/display.c **** 			for (j=0; j<width; j++) {
 962              		.loc 1 2678 13 view .LVU309
 963 00fe 0134     		adds	r4, r4, #1
 964              	.LVL85:
2678:src/display.c **** 			for (j=0; j<width; j++) {
 965              		.loc 1 2678 3 is_stmt 0 view .LVU310
 966 0100 B4F5CB7F 		cmp	r4, #406
 967 0104 05F10105 		add	r5, r5, #1
 968 0108 D7D1     		bne	.L79
ARM GAS  /tmp/ccZMW3We.s 			page 69


2689:src/display.c **** 	}
 969              		.loc 1 2689 3 is_stmt 1 view .LVU311
 970              	.LBE159:
2621:src/display.c **** 		int c;
 971              		.loc 1 2621 9 is_stmt 0 view .LVU312
 972 010a 009B     		ldr	r3, [sp]
 973 010c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 974              	.LBB160:
2689:src/display.c **** 	}
 975              		.loc 1 2689 5 view .LVU313
 976 010e 3744     		add	r7, r7, r6
 977              	.LVL86:
2689:src/display.c **** 	}
 978              		.loc 1 2689 5 view .LVU314
 979              	.LBE160:
2621:src/display.c **** 		int c;
 980              		.loc 1 2621 8 is_stmt 1 view .LVU315
 981 0110 95B1     		cbz	r5, .L87
2621:src/display.c **** 		int c;
 982              		.loc 1 2621 22 is_stmt 0 discriminator 1 view .LVU316
 983 0112 2C2F     		cmp	r7, #44
 984 0114 10D8     		bhi	.L87
 985              	.LBB161:
2636:src/display.c **** 			width = str[1] & 0x1F;
 986              		.loc 1 2636 6 view .LVU317
 987 0116 072D     		cmp	r5, #7
 988              	.LBE161:
 989 0118 5446     		mov	r4, r10
 990              	.LVL87:
 991              	.LBB162:
2622:src/display.c **** 		int width;
 992              		.loc 1 2622 3 is_stmt 1 view .LVU318
2623:src/display.c **** 		unsigned char cmap[6];
 993              		.loc 1 2623 3 view .LVU319
2624:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 994              		.loc 1 2624 3 view .LVU320
2626:src/display.c **** 		int current_smallp;
 995              		.loc 1 2626 3 view .LVU321
2627:src/display.c **** 
 996              		.loc 1 2627 3 view .LVU322
2636:src/display.c **** 			width = str[1] & 0x1F;
 997              		.loc 1 2636 3 view .LVU323
2636:src/display.c **** 			width = str[1] & 0x1F;
 998              		.loc 1 2636 6 is_stmt 0 view .LVU324
 999 011a 9BD0     		beq	.L111
 1000              	.LVL88:
 1001              	.L71:
2652:src/display.c **** 			real_width = width = charlengths(c);
 1002              		.loc 1 2652 4 is_stmt 1 view .LVU325
2652:src/display.c **** 			real_width = width = charlengths(c);
 1003              		.loc 1 2652 6 is_stmt 0 view .LVU326
 1004 011c 039B     		ldr	r3, [sp, #12]
 1005              	.LVL89:
2652:src/display.c **** 			real_width = width = charlengths(c);
 1006              		.loc 1 2652 6 view .LVU327
 1007 011e 1D44     		add	r5, r5, r3
2653:src/display.c **** 			current_smallp = smallp;
ARM GAS  /tmp/ccZMW3We.s 			page 70


 1008              		.loc 1 2653 25 view .LVU328
 1009 0120 2846     		mov	r0, r5
 1010 0122 FFF7FEFF 		bl	charlengths
 1011              	.LVL90:
2652:src/display.c **** 			real_width = width = charlengths(c);
 1012              		.loc 1 2652 28 view .LVU329
 1013 0126 009B     		ldr	r3, [sp]
2653:src/display.c **** 			current_smallp = smallp;
 1014              		.loc 1 2653 23 view .LVU330
 1015 0128 DDF808A0 		ldr	r10, [sp, #8]
 1016 012c 0646     		mov	r6, r0
2657:src/display.c **** 			break;
 1017              		.loc 1 2657 9 view .LVU331
 1018 012e 3844     		add	r0, r0, r7
2652:src/display.c **** 			real_width = width = charlengths(c);
 1019              		.loc 1 2652 28 view .LVU332
 1020 0130 0133     		adds	r3, r3, #1
2657:src/display.c **** 			break;
 1021              		.loc 1 2657 6 view .LVU333
 1022 0132 2C28     		cmp	r0, #44
2652:src/display.c **** 			real_width = width = charlengths(c);
 1023              		.loc 1 2652 28 view .LVU334
 1024 0134 0093     		str	r3, [sp]
 1025              	.LVL91:
2653:src/display.c **** 			current_smallp = smallp;
 1026              		.loc 1 2653 4 is_stmt 1 view .LVU335
2654:src/display.c **** 		}
 1027              		.loc 1 2654 4 view .LVU336
2657:src/display.c **** 			break;
 1028              		.loc 1 2657 3 view .LVU337
2657:src/display.c **** 			break;
 1029              		.loc 1 2657 6 is_stmt 0 view .LVU338
 1030 0136 A9D9     		bls	.L112
 1031              	.LVL92:
 1032              	.L87:
2657:src/display.c **** 			break;
 1033              		.loc 1 2657 6 view .LVU339
 1034              	.LBE162:
 1035              		.loc 1 2696 2 is_stmt 1 view .LVU340
 1036              		.loc 1 2696 24 is_stmt 0 view .LVU341
 1037 0138 07EB4704 		add	r4, r7, r7, lsl #1
 1038 013c 6400     		lsls	r4, r4, #1
 1039              		.loc 1 2696 21 view .LVU342
 1040 013e 8E34     		adds	r4, r4, #142
 1041              	.LVL93:
 1042              		.loc 1 2696 28 is_stmt 1 view .LVU343
 1043              		.loc 1 2696 2 is_stmt 0 view .LVU344
 1044 0140 B4F5C87F 		cmp	r4, #400
 1045 0144 06DA     		bge	.L62
 1046              	.LVL94:
 1047              	.L88:
2697:src/display.c **** 		clr_dot(i);
 1048              		.loc 1 2697 3 is_stmt 1 discriminator 3 view .LVU345
 1049 0146 2046     		mov	r0, r4
2696:src/display.c **** 		clr_dot(i);
 1050              		.loc 1 2696 36 is_stmt 0 discriminator 3 view .LVU346
 1051 0148 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccZMW3We.s 			page 71


 1052              	.LVL95:
 1053              		.loc 1 2697 3 discriminator 3 view .LVU347
 1054 014a FFF7FEFF 		bl	clr_dot
 1055              	.LVL96:
2696:src/display.c **** 		clr_dot(i);
 1056              		.loc 1 2696 35 is_stmt 1 discriminator 3 view .LVU348
2696:src/display.c **** 		clr_dot(i);
 1057              		.loc 1 2696 28 discriminator 3 view .LVU349
2696:src/display.c **** 		clr_dot(i);
 1058              		.loc 1 2696 2 is_stmt 0 discriminator 3 view .LVU350
 1059 014e B4F5C87F 		cmp	r4, #400
 1060 0152 F8D1     		bne	.L88
 1061              	.L62:
2698:src/display.c **** #endif
2699:src/display.c **** }
 1062              		.loc 1 2699 1 view .LVU351
 1063 0154 0DF5097D 		add	sp, sp, #548
 1064              		.cfi_remember_state
 1065              		.cfi_def_cfa_offset 36
 1066              	.LVL97:
 1067              		.loc 1 2699 1 view .LVU352
 1068              		@ sp needed
 1069 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1070              	.LVL98:
 1071              	.L72:
 1072              		.cfi_restore_state
 1073              	.LBB163:
2642:src/display.c **** 					break;
 1074              		.loc 1 2642 15 is_stmt 1 view .LVU353
2643:src/display.c **** 			case 0x60:	current_smallp = 1;
 1075              		.loc 1 2643 6 view .LVU354
2647:src/display.c **** 			str += 3;
 1076              		.loc 1 2647 4 view .LVU355
2647:src/display.c **** 			str += 3;
 1077              		.loc 1 2647 8 is_stmt 0 view .LVU356
 1078 015c 009B     		ldr	r3, [sp]
2642:src/display.c **** 					break;
 1079              		.loc 1 2642 30 view .LVU357
 1080 015e 4FF0000A 		mov	r10, #0
2647:src/display.c **** 			str += 3;
 1081              		.loc 1 2647 8 view .LVU358
 1082 0162 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1083 0164 89E7     		b	.L75
 1084              	.LVL99:
 1085              	.L73:
2644:src/display.c **** 					break;
 1086              		.loc 1 2644 15 is_stmt 1 view .LVU359
2645:src/display.c **** 			}
 1087              		.loc 1 2645 6 view .LVU360
2647:src/display.c **** 			str += 3;
 1088              		.loc 1 2647 4 view .LVU361
2647:src/display.c **** 			str += 3;
 1089              		.loc 1 2647 8 is_stmt 0 view .LVU362
 1090 0166 009B     		ldr	r3, [sp]
 1091 0168 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
2644:src/display.c **** 					break;
 1092              		.loc 1 2644 30 view .LVU363
ARM GAS  /tmp/ccZMW3We.s 			page 72


 1093 016a 4FF0010A 		mov	r10, #1
 1094 016e 00F58075 		add	r5, r0, #256
 1095 0172 82E7     		b	.L75
 1096              	.LVL100:
 1097              	.L109:
2644:src/display.c **** 					break;
 1098              		.loc 1 2644 30 view .LVU364
 1099              	.LBE163:
2604:src/display.c **** 			if (LastDisplayedText[i] != '\0')
 1100              		.loc 1 2604 4 is_stmt 1 view .LVU365
 1101 0174 A11C     		adds	r1, r4, #2
 1102 0176 2046     		mov	r0, r4
 1103 0178 FFF7FEFF 		bl	scopy
 1104              	.LVL101:
2605:src/display.c **** 				++i;
 1105              		.loc 1 2605 4 view .LVU366
2605:src/display.c **** 				++i;
 1106              		.loc 1 2605 7 is_stmt 0 view .LVU367
 1107 017c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1108 017e 002B     		cmp	r3, #0
 1109 0180 3FF45AAF 		beq	.L68
 1110 0184 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1111 0186 4FE7     		b	.L69
 1112              	.LVL102:
 1113              	.L92:
 1114              	.LBB164:
2605:src/display.c **** 				++i;
 1115              		.loc 1 2605 7 view .LVU368
 1116 0188 DDF808A0 		ldr	r10, [sp, #8]
 1117 018c 75E7     		b	.L75
 1118              	.L114:
 1119 018e 00BF     		.align	2
 1120              	.L113:
 1121 0190 00000000 		.word	LastDisplayedText
 1122 0194 00000000 		.word	RectPolConv
 1123 0198 00000000 		.word	forceDispPlot
 1124              	.LBE164:
 1125              		.cfi_endproc
 1126              	.LFE37:
 1128              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1129              		.align	2
 1130              	.LC0:
 1131 0000 48494700 		.ascii	"HIG\000"
 1132              		.section	.text.set_exp,"ax",%progbits
 1133              		.align	1
 1134              		.p2align 2,,3
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu fpv4-sp-d16
 1140              	set_exp:
 1141              	.LVL103:
 1142              	.LFB14:
 430:src/display.c **** 	union {
 1143              		.loc 1 430 52 is_stmt 1 view -0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccZMW3We.s 			page 73


 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 431:src/display.c **** 		char buf[4];
 1147              		.loc 1 431 2 view .LVU370
 435:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1148              		.loc 1 435 2 view .LVU371
 449:src/display.c **** #endif
 1149              		.loc 1 449 2 view .LVU372
 452:src/display.c **** 	if (exp < 0) {
 1150              		.loc 1 452 2 view .LVU373
 430:src/display.c **** 	union {
 1151              		.loc 1 430 52 is_stmt 0 view .LVU374
 1152 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1153              		.cfi_def_cfa_offset 20
 1154              		.cfi_offset 4, -20
 1155              		.cfi_offset 5, -16
 1156              		.cfi_offset 6, -12
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 453:src/display.c **** 		negative = 1;
 1159              		.loc 1 453 5 view .LVU375
 1160 0002 051E     		subs	r5, r0, #0
 430:src/display.c **** 	union {
 1161              		.loc 1 430 52 view .LVU376
 1162 0004 83B0     		sub	sp, sp, #12
 1163              		.cfi_def_cfa_offset 32
 430:src/display.c **** 	union {
 1164              		.loc 1 430 52 view .LVU377
 1165 0006 0F46     		mov	r7, r1
 1166              	.LVL104:
 453:src/display.c **** 		negative = 1;
 1167              		.loc 1 453 2 is_stmt 1 view .LVU378
 430:src/display.c **** 	union {
 1168              		.loc 1 430 52 is_stmt 0 view .LVU379
 1169 0008 1446     		mov	r4, r2
 453:src/display.c **** 		negative = 1;
 1170              		.loc 1 453 5 view .LVU380
 1171 000a 0ADB     		blt	.L139
 452:src/display.c **** 	if (exp < 0) {
 1172              		.loc 1 452 11 view .LVU381
 1173 000c 01F00203 		and	r3, r1, #2
 1174              	.LVL105:
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1175              		.loc 1 460 2 is_stmt 1 view .LVU382
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1176              		.loc 1 460 5 is_stmt 0 view .LVU383
 1177 0010 A2B3     		cbz	r2, .L120
 465:src/display.c **** #endif
 1178              		.loc 1 465 3 is_stmt 1 view .LVU384
 465:src/display.c **** #endif
 1179              		.loc 1 465 6 is_stmt 0 view .LVU385
 1180 0012 B5F57A7F 		cmp	r5, #1000
 1181 0016 2ADB     		blt	.L121
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1182              		.loc 1 467 4 is_stmt 1 view .LVU386
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1183              		.loc 1 467 7 is_stmt 0 view .LVU387
 1184 0018 73BB     		cbnz	r3, .L126
ARM GAS  /tmp/ccZMW3We.s 			page 74


 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1185              		.loc 1 467 19 is_stmt 1 discriminator 1 view .LVU388
 1186              	.LVL106:
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1187              		.loc 1 467 26 is_stmt 0 discriminator 1 view .LVU389
 1188 001a 3A23     		movs	r3, #58
 1189              	.LVL107:
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1190              		.loc 1 467 26 discriminator 1 view .LVU390
 1191 001c 04F8013B 		strb	r3, [r4], #1
 1192              	.LVL108:
 474:src/display.c **** 	}
 1193              		.loc 1 474 3 is_stmt 1 discriminator 1 view .LVU391
 1194 0020 08E0     		b	.L122
 1195              	.LVL109:
 1196              	.L139:
 454:src/display.c **** 		exp = -exp;
 1197              		.loc 1 454 3 view .LVU392
 455:src/display.c **** 	}
 1198              		.loc 1 455 3 view .LVU393
 455:src/display.c **** 	}
 1199              		.loc 1 455 7 is_stmt 0 view .LVU394
 1200 0022 6E42     		rsbs	r6, r5, #0
 1201              	.LVL110:
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 460 2 is_stmt 1 view .LVU395
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1203              		.loc 1 460 5 is_stmt 0 view .LVU396
 1204 0024 AAB3     		cbz	r2, .L117
 465:src/display.c **** #endif
 1205              		.loc 1 465 3 is_stmt 1 view .LVU397
 465:src/display.c **** #endif
 1206              		.loc 1 465 6 is_stmt 0 view .LVU398
 1207 0026 15F57A7F 		cmn	r5, #1000
 1208 002a 2DDC     		bgt	.L140
 1209              	.LVL111:
 1210              	.L118:
 474:src/display.c **** 	}
 1211              		.loc 1 474 17 is_stmt 1 discriminator 1 view .LVU399
 474:src/display.c **** 	}
 1212              		.loc 1 474 24 is_stmt 0 discriminator 1 view .LVU400
 1213 002c 2D23     		movs	r3, #45
 1214 002e 04F8013B 		strb	r3, [r4], #1
 1215              	.LVL112:
 474:src/display.c **** 	}
 1216              		.loc 1 474 24 discriminator 1 view .LVU401
 1217 0032 3546     		mov	r5, r6
 1218              	.LVL113:
 1219              	.L122:
 522:src/display.c **** #endif
 1220              		.loc 1 522 2 is_stmt 1 view .LVU402
 1221 0034 01AE     		add	r6, sp, #4
 1222 0036 0021     		movs	r1, #0
 1223 0038 3046     		mov	r0, r6
 1224 003a 0422     		movs	r2, #4
 1225 003c FFF7FEFF 		bl	xset
 1226              	.LVL114:
ARM GAS  /tmp/ccZMW3We.s 			page 75


 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1227              		.loc 1 524 2 view .LVU403
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1228              		.loc 1 524 5 is_stmt 0 view .LVU404
 1229 0040 17F0050F 		tst	r7, #5
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1230              		.loc 1 525 3 view .LVU405
 1231 0044 2946     		mov	r1, r5
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1232              		.loc 1 524 5 view .LVU406
 1233 0046 09D0     		beq	.L125
 1234              	.LVL115:
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1235              		.loc 1 525 3 is_stmt 1 view .LVU407
 1236 0048 0322     		movs	r2, #3
 1237 004a 3046     		mov	r0, r6
 1238 004c FFF7FEFF 		bl	num_arg_0
 1239              	.LVL116:
 1240              	.L124:
 547:src/display.c **** }
 1241              		.loc 1 547 2 view .LVU408
 1242 0050 2146     		mov	r1, r4
 1243 0052 3046     		mov	r0, r6
 1244 0054 FFF7FEFF 		bl	set_exp_digits_string
 1245              	.LVL117:
 548:src/display.c **** 
 1246              		.loc 1 548 1 is_stmt 0 view .LVU409
 1247 0058 03B0     		add	sp, sp, #12
 1248              		.cfi_remember_state
 1249              		.cfi_def_cfa_offset 20
 1250              		@ sp needed
 1251 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1252              	.LVL118:
 1253              	.L125:
 1254              		.cfi_restore_state
 545:src/display.c **** no_number:
 1255              		.loc 1 545 3 is_stmt 1 view .LVU410
 1256 005c 3046     		mov	r0, r6
 1257 005e FFF7FEFF 		bl	num_arg
 1258              	.LVL119:
 547:src/display.c **** }
 1259              		.loc 1 547 2 view .LVU411
 1260 0062 2146     		mov	r1, r4
 1261 0064 3046     		mov	r0, r6
 1262 0066 FFF7FEFF 		bl	set_exp_digits_string
 1263              	.LVL120:
 548:src/display.c **** 
 1264              		.loc 1 548 1 is_stmt 0 view .LVU412
 1265 006a 03B0     		add	sp, sp, #12
 1266              		.cfi_remember_state
 1267              		.cfi_def_cfa_offset 20
 1268              		@ sp needed
 1269 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1270              	.LVL121:
 1271              	.L121:
 1272              		.cfi_restore_state
 470:src/display.c **** #else
ARM GAS  /tmp/ccZMW3We.s 			page 76


 1273              		.loc 1 470 8 is_stmt 1 view .LVU413
 470:src/display.c **** #else
 1274              		.loc 1 470 15 is_stmt 0 view .LVU414
 1275 006e 6522     		movs	r2, #101
 1276              	.LVL122:
 470:src/display.c **** #else
 1277              		.loc 1 470 15 view .LVU415
 1278 0070 04F8012B 		strb	r2, [r4], #1
 1279              	.LVL123:
 474:src/display.c **** 	}
 1280              		.loc 1 474 3 is_stmt 1 view .LVU416
 474:src/display.c **** 	}
 1281              		.loc 1 474 6 is_stmt 0 view .LVU417
 1282 0074 002B     		cmp	r3, #0
 1283 0076 DDD0     		beq	.L122
 1284              	.L126:
 474:src/display.c **** 	}
 1285              		.loc 1 474 6 view .LVU418
 1286 0078 2E46     		mov	r6, r5
 1287 007a D7E7     		b	.L118
 1288              	.LVL124:
 1289              	.L120:
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1290              		.loc 1 477 3 is_stmt 1 view .LVU419
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1291              		.loc 1 477 6 is_stmt 0 view .LVU420
 1292 007c 43B9     		cbnz	r3, .L141
 1293              	.LVL125:
 1294              	.L123:
 481:src/display.c **** #endif
 1295              		.loc 1 481 3 is_stmt 1 view .LVU421
 481:src/display.c **** #endif
 1296              		.loc 1 481 6 is_stmt 0 view .LVU422
 1297 007e B5F57A7F 		cmp	r5, #1000
 1298 0082 0EDA     		bge	.L142
 481:src/display.c **** #endif
 1299              		.loc 1 481 6 view .LVU423
 1300 0084 0024     		movs	r4, #0
 1301              	.LVL126:
 481:src/display.c **** #endif
 1302              		.loc 1 481 6 view .LVU424
 1303 0086 D5E7     		b	.L122
 1304              	.LVL127:
 1305              	.L140:
 470:src/display.c **** #else
 1306              		.loc 1 470 8 is_stmt 1 view .LVU425
 470:src/display.c **** #else
 1307              		.loc 1 470 15 is_stmt 0 view .LVU426
 1308 0088 6523     		movs	r3, #101
 1309 008a 04F8013B 		strb	r3, [r4], #1
 1310              	.LVL128:
 474:src/display.c **** 	}
 1311              		.loc 1 474 3 is_stmt 1 view .LVU427
 1312 008e CDE7     		b	.L118
 1313              	.LVL129:
 1314              	.L141:
 474:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 77


 1315              		.loc 1 474 3 is_stmt 0 view .LVU428
 1316 0090 2E46     		mov	r6, r5
 1317              	.LVL130:
 1318              	.L117:
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1319              		.loc 1 477 17 is_stmt 1 view .LVU429
 1320              	.LBB165:
 1321              	.LBI165:
 296:src/display.c **** {
 1322              		.loc 1 296 13 view .LVU430
 1323              	.LBB166:
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1324              		.loc 1 298 2 view .LVU431
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1325              		.loc 1 298 26 is_stmt 0 view .LVU432
 1326 0092 074B     		ldr	r3, .L143
 1327 0094 2D22     		movs	r2, #45
 1328              	.LVL131:
 299:src/display.c **** }
 1329              		.loc 1 299 2 view .LVU433
 1330 0096 8220     		movs	r0, #130
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1331              		.loc 1 298 26 view .LVU434
 1332 0098 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 1333              		.loc 1 299 2 is_stmt 1 view .LVU435
 300:src/display.c **** 
 1334              		.loc 1 300 1 is_stmt 0 view .LVU436
 1335 009a 3546     		mov	r5, r6
 299:src/display.c **** }
 1336              		.loc 1 299 2 view .LVU437
 1337 009c FFF7FEFF 		bl	set_dot
 1338              	.LVL132:
 300:src/display.c **** 
 1339              		.loc 1 300 1 view .LVU438
 1340 00a0 EDE7     		b	.L123
 1341              	.LVL133:
 1342              	.L142:
 300:src/display.c **** 
 1343              		.loc 1 300 1 view .LVU439
 1344              	.LBE166:
 1345              	.LBE165:
 483:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1346              		.loc 1 483 4 is_stmt 1 view .LVU440
 491:src/display.c **** #endif
 1347              		.loc 1 491 5 view .LVU441
 1348 00a2 01AE     		add	r6, sp, #4
 1349 00a4 0349     		ldr	r1, .L143+4
 1350 00a6 3046     		mov	r0, r6
 1351 00a8 FFF7FEFF 		bl	scopy
 1352              	.LVL134:
 493:src/display.c **** 			}
 1353              		.loc 1 493 5 view .LVU442
 1354 00ac 0024     		movs	r4, #0
 1355              	.LVL135:
 493:src/display.c **** 			}
 1356              		.loc 1 493 5 is_stmt 0 view .LVU443
ARM GAS  /tmp/ccZMW3We.s 			page 78


 1357 00ae CFE7     		b	.L124
 1358              	.L144:
 1359              		.align	2
 1360              	.L143:
 1361 00b0 00000000 		.word	LastDisplayedExponent
 1362 00b4 00000000 		.word	.LC0
 1363              		.cfi_endproc
 1364              	.LFE14:
 1366              		.section	.text.set_separator.part.0,"ax",%progbits
 1367              		.align	1
 1368              		.p2align 2,,3
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	set_separator.part.0:
 1375              	.LVL136:
 1376              	.LFB43:
 355:src/display.c **** 	if (sep == SEP_NONE)
 1377              		.loc 1 355 14 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 362:src/display.c **** 		set_dot(posn+7);
 1381              		.loc 1 362 3 view .LVU445
 355:src/display.c **** 	if (sep == SEP_NONE)
 1382              		.loc 1 355 14 is_stmt 0 view .LVU446
 1383 0000 70B5     		push	{r4, r5, r6, lr}
 1384              		.cfi_def_cfa_offset 16
 1385              		.cfi_offset 4, -16
 1386              		.cfi_offset 5, -12
 1387              		.cfi_offset 6, -8
 1388              		.cfi_offset 14, -4
 355:src/display.c **** 	if (sep == SEP_NONE)
 1389              		.loc 1 355 14 view .LVU447
 1390 0002 0546     		mov	r5, r0
 1391 0004 0E46     		mov	r6, r1
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1392              		.loc 1 363 3 view .LVU448
 1393 0006 0238     		subs	r0, r0, #2
 1394              	.LVL137:
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1395              		.loc 1 363 3 view .LVU449
 1396 0008 FFF7FEFF 		bl	set_dot
 1397              	.LVL138:
 364:src/display.c **** 			set_dot(posn+8);
 1398              		.loc 1 364 6 view .LVU450
 1399 000c 012E     		cmp	r6, #1
 362:src/display.c **** 		set_dot(posn+7);
 1400              		.loc 1 362 8 view .LVU451
 1401 000e A5F10904 		sub	r4, r5, #9
 1402              	.LVL139:
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1403              		.loc 1 363 3 is_stmt 1 view .LVU452
 364:src/display.c **** 			set_dot(posn+8);
 1404              		.loc 1 364 3 view .LVU453
 364:src/display.c **** 			set_dot(posn+8);
ARM GAS  /tmp/ccZMW3We.s 			page 79


 1405              		.loc 1 364 6 is_stmt 0 view .LVU454
 1406 0012 0CD0     		beq	.L149
 367:src/display.c **** #endif
 1407              		.loc 1 367 37 view .LVU455
 1408 0014 2E21     		movs	r1, #46
 1409              	.L146:
 367:src/display.c **** #endif
 1410              		.loc 1 367 28 view .LVU456
 1411 0016 084B     		ldr	r3, .L150
 367:src/display.c **** #endif
 1412              		.loc 1 367 37 view .LVU457
 1413 0018 084A     		ldr	r2, .L150+4
 367:src/display.c **** #endif
 1414              		.loc 1 367 28 view .LVU458
 1415 001a 83FB0403 		smull	r0, r3, r3, r4
 1416 001e E417     		asrs	r4, r4, #31
 1417              	.LVL140:
 367:src/display.c **** #endif
 1418              		.loc 1 367 28 view .LVU459
 1419 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 367:src/display.c **** #endif
 1420              		.loc 1 367 33 view .LVU460
 1421 0024 0134     		adds	r4, r4, #1
 371:src/display.c **** 
 1422              		.loc 1 371 1 view .LVU461
 1423 0026 0020     		movs	r0, #0
 367:src/display.c **** #endif
 1424              		.loc 1 367 37 view .LVU462
 1425 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1426              	.LVL141:
 371:src/display.c **** 
 1427              		.loc 1 371 1 view .LVU463
 1428 002c 70BD     		pop	{r4, r5, r6, pc}
 1429              	.LVL142:
 1430              	.L149:
 365:src/display.c **** #ifndef REALBUILD
 1431              		.loc 1 365 4 is_stmt 1 view .LVU464
 1432 002e 681E     		subs	r0, r5, #1
 1433 0030 FFF7FEFF 		bl	set_dot
 1434              	.LVL143:
 367:src/display.c **** #endif
 1435              		.loc 1 367 3 view .LVU465
 367:src/display.c **** #endif
 1436              		.loc 1 367 37 is_stmt 0 view .LVU466
 1437 0034 2C21     		movs	r1, #44
 1438 0036 EEE7     		b	.L146
 1439              	.L151:
 1440              		.align	2
 1441              	.L150:
 1442 0038 398EE338 		.word	954437177
 1443 003c 00000000 		.word	LastDisplayedNumber
 1444              		.cfi_endproc
 1445              	.LFE43:
 1447              		.section	.text.set_decimal,"ax",%progbits
 1448              		.align	1
 1449              		.p2align 2,,3
 1450              		.syntax unified
ARM GAS  /tmp/ccZMW3We.s 			page 80


 1451              		.thumb
 1452              		.thumb_func
 1453              		.fpu fpv4-sp-d16
 1455              	set_decimal:
 1456              	.LVL144:
 1457              	.LFB8:
 337:src/display.c **** 	if (res) {
 1458              		.loc 1 337 87 is_stmt 1 view -0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 8
 1461              		@ frame_needed = 0, uses_anonymous_args = 0
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1462              		.loc 1 338 2 view .LVU468
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1463              		.loc 1 338 5 is_stmt 0 view .LVU469
 1464 0000 3AB1     		cbz	r2, .L153
 339:src/display.c **** 	} else {
 1465              		.loc 1 339 3 is_stmt 1 view .LVU470
 339:src/display.c **** 	} else {
 1466              		.loc 1 339 10 is_stmt 0 view .LVU471
 1467 0002 0029     		cmp	r1, #0
 339:src/display.c **** 	} else {
 1468              		.loc 1 339 7 view .LVU472
 1469 0004 1046     		mov	r0, r2
 1470              	.LVL145:
 339:src/display.c **** 	} else {
 1471              		.loc 1 339 10 view .LVU473
 1472 0006 0CBF     		ite	eq
 1473 0008 2E23     		moveq	r3, #46
 1474 000a 2C23     		movne	r3, #44
 1475 000c 00F8013B 		strb	r3, [r0], #1
 1476              	.LVL146:
 349:src/display.c **** 
 1477              		.loc 1 349 1 view .LVU474
 1478 0010 7047     		bx	lr
 1479              	.LVL147:
 1480              	.L153:
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1481              		.loc 1 341 3 is_stmt 1 view .LVU475
 337:src/display.c **** 	if (res) {
 1482              		.loc 1 337 87 is_stmt 0 view .LVU476
 1483 0012 10B5     		push	{r4, lr}
 1484              		.cfi_def_cfa_offset 8
 1485              		.cfi_offset 4, -8
 1486              		.cfi_offset 14, -4
 1487 0014 82B0     		sub	sp, sp, #8
 1488              		.cfi_def_cfa_offset 16
 1489 0016 0446     		mov	r4, r0
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1490              		.loc 1 341 3 view .LVU477
 1491 0018 0730     		adds	r0, r0, #7
 1492              	.LVL148:
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1493              		.loc 1 341 3 view .LVU478
 1494 001a 0191     		str	r1, [sp, #4]
 1495 001c FFF7FEFF 		bl	set_dot
 1496              	.LVL149:
ARM GAS  /tmp/ccZMW3We.s 			page 81


 342:src/display.c **** 			set_dot(posn+8);
 1497              		.loc 1 342 3 is_stmt 1 view .LVU479
 342:src/display.c **** 			set_dot(posn+8);
 1498              		.loc 1 342 6 is_stmt 0 view .LVU480
 1499 0020 0199     		ldr	r1, [sp, #4]
 1500 0022 69B9     		cbnz	r1, .L162
 1501              	.LBB169:
 1502              	.LBB170:
 345:src/display.c **** #endif
 1503              		.loc 1 345 35 view .LVU481
 1504 0024 2E22     		movs	r2, #46
 1505              	.L156:
 345:src/display.c **** #endif
 1506              		.loc 1 345 27 view .LVU482
 1507 0026 0948     		ldr	r0, .L163
 345:src/display.c **** #endif
 1508              		.loc 1 345 35 view .LVU483
 1509 0028 094B     		ldr	r3, .L163+4
 345:src/display.c **** #endif
 1510              		.loc 1 345 27 view .LVU484
 1511 002a 80FB0410 		smull	r1, r0, r0, r4
 1512 002e E417     		asrs	r4, r4, #31
 1513              	.LVL150:
 345:src/display.c **** #endif
 1514              		.loc 1 345 27 view .LVU485
 1515 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 345:src/display.c **** #endif
 1516              		.loc 1 345 32 view .LVU486
 1517 0034 0134     		adds	r4, r4, #1
 345:src/display.c **** #endif
 1518              		.loc 1 345 35 view .LVU487
 1519 0036 0020     		movs	r0, #0
 1520 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1521              	.LVL151:
 348:src/display.c **** }
 1522              		.loc 1 348 2 is_stmt 1 view .LVU488
 348:src/display.c **** }
 1523              		.loc 1 348 2 is_stmt 0 view .LVU489
 1524              	.LBE170:
 1525              	.LBE169:
 348:src/display.c **** }
 1526              		.loc 1 348 2 is_stmt 1 view .LVU490
 349:src/display.c **** 
 1527              		.loc 1 349 1 is_stmt 0 view .LVU491
 1528 003c 02B0     		add	sp, sp, #8
 1529              		.cfi_remember_state
 1530              		.cfi_def_cfa_offset 8
 1531              		@ sp needed
 1532 003e 10BD     		pop	{r4, pc}
 1533              	.LVL152:
 1534              	.L162:
 1535              		.cfi_restore_state
 343:src/display.c **** #ifndef REALBUILD
 1536              		.loc 1 343 4 is_stmt 1 view .LVU492
 1537 0040 04F10800 		add	r0, r4, #8
 1538 0044 FFF7FEFF 		bl	set_dot
 1539              	.LVL153:
ARM GAS  /tmp/ccZMW3We.s 			page 82


 1540              	.LBB172:
 1541              	.LBI169:
 337:src/display.c **** 	if (res) {
 1542              		.loc 1 337 14 view .LVU493
 1543              	.LBB171:
 345:src/display.c **** #endif
 1544              		.loc 1 345 2 view .LVU494
 345:src/display.c **** #endif
 1545              		.loc 1 345 35 is_stmt 0 view .LVU495
 1546 0048 2C22     		movs	r2, #44
 1547 004a ECE7     		b	.L156
 1548              	.L164:
 1549              		.align	2
 1550              	.L163:
 1551 004c 398EE338 		.word	954437177
 1552 0050 00000000 		.word	LastDisplayedNumber
 1553              	.LBE171:
 1554              	.LBE172:
 1555              		.cfi_endproc
 1556              	.LFE8:
 1558              		.section	.text.set_digits_string,"ax",%progbits
 1559              		.align	1
 1560              		.p2align 2,,3
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
 1566              	set_digits_string:
 1567              	.LVL154:
 1568              	.LFB12:
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1569              		.loc 1 402 55 is_stmt 1 view -0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1573              		.loc 1 403 2 view .LVU497
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1574              		.loc 1 402 55 is_stmt 0 view .LVU498
 1575 0000 38B5     		push	{r3, r4, r5, lr}
 1576              		.cfi_def_cfa_offset 16
 1577              		.cfi_offset 3, -16
 1578              		.cfi_offset 4, -12
 1579              		.cfi_offset 5, -8
 1580              		.cfi_offset 14, -4
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1581              		.loc 1 403 9 view .LVU499
 1582 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1583              		.loc 1 403 9 is_stmt 1 view .LVU500
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1584              		.loc 1 403 2 is_stmt 0 view .LVU501
 1585 0004 E3B1     		cbz	r3, .L165
 1586 0006 0546     		mov	r5, r0
 1587 0008 0C46     		mov	r4, r1
 1588 000a 06E0     		b	.L169
 1589              	.LVL155:
ARM GAS  /tmp/ccZMW3We.s 			page 83


 1590              	.L167:
 1591              	.LBB173:
 1592              	.LBB174:
 397:src/display.c **** 	return res;
 1593              		.loc 1 397 7 view .LVU502
 1594 000c 2046     		mov	r0, r4
 1595 000e FFF7FEFF 		bl	set_dig
 1596              	.LVL156:
 398:src/display.c **** }
 1597              		.loc 1 398 2 is_stmt 1 view .LVU503
 398:src/display.c **** }
 1598              		.loc 1 398 2 is_stmt 0 view .LVU504
 1599              	.LBE174:
 1600              	.LBE173:
 408:src/display.c **** 		}
 1601              		.loc 1 408 4 is_stmt 1 view .LVU505
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1602              		.loc 1 403 9 is_stmt 0 view .LVU506
 1603 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1604              	.LVL157:
 408:src/display.c **** 		}
 1605              		.loc 1 408 6 view .LVU507
 1606 0016 0934     		adds	r4, r4, #9
 1607              	.LVL158:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1608              		.loc 1 403 23 is_stmt 1 view .LVU508
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1609              		.loc 1 403 9 view .LVU509
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1610              		.loc 1 403 2 is_stmt 0 view .LVU510
 1611 0018 93B1     		cbz	r3, .L165
 1612              	.LVL159:
 1613              	.L169:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1614              		.loc 1 404 3 is_stmt 1 view .LVU511
 405:src/display.c **** 		else {
 1615              		.loc 1 405 4 view .LVU512
 407:src/display.c **** 			j += SEGS_PER_DIGIT;
 1616              		.loc 1 407 4 view .LVU513
 1617              	.LBB177:
 1618              	.LBI173:
 395:src/display.c **** 	if (res) *res++ = ch;
 1619              		.loc 1 395 14 view .LVU514
 1620              	.LBB175:
 396:src/display.c **** 	else	set_dig(base, ch);
 1621              		.loc 1 396 2 view .LVU515
 397:src/display.c **** 	return res;
 1622              		.loc 1 397 7 view .LVU516
 1623              	.LBE175:
 1624              	.LBE177:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1625              		.loc 1 404 19 is_stmt 0 view .LVU517
 1626 001a 03F0FD02 		and	r2, r3, #253
 1627 001e 2C2A     		cmp	r2, #44
 405:src/display.c **** 		else {
 1628              		.loc 1 405 4 view .LVU518
 1629 0020 A4F10900 		sub	r0, r4, #9
ARM GAS  /tmp/ccZMW3We.s 			page 84


 1630 0024 4FF00002 		mov	r2, #0
 1631              	.LBB178:
 1632              	.LBB176:
 397:src/display.c **** 	return res;
 1633              		.loc 1 397 7 view .LVU519
 1634 0028 1946     		mov	r1, r3
 1635              	.LBE176:
 1636              	.LBE178:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1637              		.loc 1 404 19 view .LVU520
 1638 002a EFD1     		bne	.L167
 405:src/display.c **** 		else {
 1639              		.loc 1 405 4 view .LVU521
 1640 002c B3F12E01 		subs	r1, r3, #46
 1641 0030 18BF     		it	ne
 1642 0032 0121     		movne	r1, #1
 1643 0034 FFF7FEFF 		bl	set_decimal
 1644              	.LVL160:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1645              		.loc 1 403 23 is_stmt 1 view .LVU522
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1646              		.loc 1 403 9 view .LVU523
 1647 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1648              	.LVL161:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1649              		.loc 1 403 2 is_stmt 0 view .LVU524
 1650 003c 002B     		cmp	r3, #0
 1651 003e ECD1     		bne	.L169
 1652              	.LVL162:
 1653              	.L165:
 411:src/display.c **** 
 1654              		.loc 1 411 1 view .LVU525
 1655 0040 38BD     		pop	{r3, r4, r5, pc}
 1656              		.cfi_endproc
 1657              	.LFE12:
 1659 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1660              		.align	2
 1661              	.LC1:
 1662 0000 4E614E00 		.ascii	"NaN\000"
 1663              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1664              		.align	1
 1665              		.p2align 2,,3
 1666              		.syntax unified
 1667              		.thumb
 1668              		.thumb_func
 1669              		.fpu fpv4-sp-d16
 1671              	check_special_dn.isra.0:
 1672              	.LVL163:
 1673              	.LFB45:
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1674              		.loc 1 1169 12 is_stmt 1 view -0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1678              		.loc 1 1170 2 view .LVU527
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
ARM GAS  /tmp/ccZMW3We.s 			page 85


 1679              		.loc 1 1169 12 is_stmt 0 view .LVU528
 1680 0000 38B5     		push	{r3, r4, r5, lr}
 1681              		.cfi_def_cfa_offset 16
 1682              		.cfi_offset 3, -16
 1683              		.cfi_offset 4, -12
 1684              		.cfi_offset 5, -8
 1685              		.cfi_offset 14, -4
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1686              		.loc 1 1170 6 view .LVU529
 1687 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1688              		.loc 1 1169 12 view .LVU530
 1689 0004 0546     		mov	r5, r0
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1690              		.loc 1 1170 5 view .LVU531
 1691 0006 13F07000 		ands	r0, r3, #112
 1692 000a 09D0     		beq	.L175
1171:src/display.c **** 			if (res) {
 1693              		.loc 1 1171 3 is_stmt 1 view .LVU532
1171:src/display.c **** 			if (res) {
 1694              		.loc 1 1171 6 is_stmt 0 view .LVU533
 1695 000c 13F0300F 		tst	r3, #48
 1696 0010 0C46     		mov	r4, r1
 1697 0012 06D0     		beq	.L177
 1698              	.LVL164:
 1699              	.LBB181:
 1700              	.LBI181:
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1701              		.loc 1 1169 12 is_stmt 1 view .LVU534
 1702              	.LBB182:
1172:src/display.c **** 				scopy(res, "NaN");
 1703              		.loc 1 1172 4 view .LVU535
1172:src/display.c **** 				scopy(res, "NaN");
 1704              		.loc 1 1172 7 is_stmt 0 view .LVU536
 1705 0014 89B1     		cbz	r1, .L178
1173:src/display.c **** 			} else {
 1706              		.loc 1 1173 5 is_stmt 1 view .LVU537
 1707 0016 0846     		mov	r0, r1
 1708 0018 1849     		ldr	r1, .L191
 1709              	.LVL165:
1173:src/display.c **** 			} else {
 1710              		.loc 1 1173 5 is_stmt 0 view .LVU538
 1711 001a FFF7FEFF 		bl	scopy
 1712              	.LVL166:
1173:src/display.c **** 			} else {
 1713              		.loc 1 1173 5 view .LVU539
 1714 001e 0120     		movs	r0, #1
 1715              	.LVL167:
 1716              	.L175:
1173:src/display.c **** 			} else {
 1717              		.loc 1 1173 5 view .LVU540
 1718              	.LBE182:
 1719              	.LBE181:
1205:src/display.c **** 
 1720              		.loc 1 1205 1 view .LVU541
 1721 0020 38BD     		pop	{r3, r4, r5, pc}
 1722              	.LVL168:
ARM GAS  /tmp/ccZMW3We.s 			page 86


 1723              	.L177:
1183:src/display.c **** 				if (res) *res++ = '-';
 1724              		.loc 1 1183 4 is_stmt 1 view .LVU542
1183:src/display.c **** 				if (res) *res++ = '-';
 1725              		.loc 1 1183 7 is_stmt 0 view .LVU543
 1726 0022 1B06     		lsls	r3, r3, #24
 1727 0024 04D4     		bmi	.L190
1187:src/display.c **** 				*res++ = '\237';
 1728              		.loc 1 1187 4 is_stmt 1 view .LVU544
1187:src/display.c **** 				*res++ = '\237';
 1729              		.loc 1 1187 7 is_stmt 0 view .LVU545
 1730 0026 B9B1     		cbz	r1, .L182
 1731              	.LVL169:
 1732              	.L181:
1188:src/display.c **** 			else {
 1733              		.loc 1 1188 5 is_stmt 1 view .LVU546
1188:src/display.c **** 			else {
 1734              		.loc 1 1188 12 is_stmt 0 view .LVU547
 1735 0028 9F23     		movs	r3, #159
 1736 002a 2370     		strb	r3, [r4]
1201:src/display.c **** 		}
 1737              		.loc 1 1201 11 view .LVU548
 1738 002c 0120     		movs	r0, #1
1205:src/display.c **** 
 1739              		.loc 1 1205 1 view .LVU549
 1740 002e 38BD     		pop	{r3, r4, r5, pc}
 1741              	.LVL170:
 1742              	.L190:
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1743              		.loc 1 1184 5 is_stmt 1 view .LVU550
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1744              		.loc 1 1184 8 is_stmt 0 view .LVU551
 1745 0030 71B1     		cbz	r1, .L180
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1746              		.loc 1 1184 14 is_stmt 1 view .LVU552
 1747              	.LVL171:
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1748              		.loc 1 1184 21 is_stmt 0 view .LVU553
 1749 0032 2D23     		movs	r3, #45
 1750 0034 04F8013B 		strb	r3, [r4], #1
 1751              	.LVL172:
1187:src/display.c **** 				*res++ = '\237';
 1752              		.loc 1 1187 4 is_stmt 1 view .LVU554
 1753 0038 F6E7     		b	.L181
 1754              	.LVL173:
 1755              	.L178:
 1756              	.LBB184:
 1757              	.LBB183:
1175:src/display.c **** #ifndef REALBUILD
 1758              		.loc 1 1175 5 view .LVU555
 1759 003a 1148     		ldr	r0, .L191+4
 1760 003c FFF7FEFF 		bl	set_digits_string
 1761              	.LVL174:
1177:src/display.c **** 				forceDispPlot=0;
 1762              		.loc 1 1177 5 view .LVU556
 1763 0040 1049     		ldr	r1, .L191+8
 1764 0042 1148     		ldr	r0, .L191+12
ARM GAS  /tmp/ccZMW3We.s 			page 87


 1765 0044 FFF7FEFF 		bl	scopy
 1766              	.LVL175:
1178:src/display.c **** #endif
 1767              		.loc 1 1178 5 view .LVU557
1178:src/display.c **** #endif
 1768              		.loc 1 1178 18 is_stmt 0 view .LVU558
 1769 0048 104B     		ldr	r3, .L191+16
 1770 004a 1C70     		strb	r4, [r3]
 1771 004c 0120     		movs	r0, #1
 1772              	.LBE183:
 1773              	.LBE184:
1205:src/display.c **** 
 1774              		.loc 1 1205 1 view .LVU559
 1775 004e 38BD     		pop	{r3, r4, r5, pc}
 1776              	.LVL176:
 1777              	.L180:
1185:src/display.c **** 			}
 1778              		.loc 1 1185 10 is_stmt 1 view .LVU560
 1779 0050 2D21     		movs	r1, #45
 1780              	.LVL177:
1185:src/display.c **** 			}
 1781              		.loc 1 1185 10 is_stmt 0 view .LVU561
 1782 0052 0920     		movs	r0, #9
 1783 0054 FFF7FEFF 		bl	set_dig
 1784              	.LVL178:
1187:src/display.c **** 				*res++ = '\237';
 1785              		.loc 1 1187 4 is_stmt 1 view .LVU562
 1786              	.L182:
1190:src/display.c **** #ifndef REALBUILD
 1787              		.loc 1 1190 5 view .LVU563
 1788 0058 1221     		movs	r1, #18
 1789 005a 0D48     		ldr	r0, .L191+20
 1790 005c FFF7FEFF 		bl	set_digits_string
 1791              	.LVL179:
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1792              		.loc 1 1192 5 view .LVU564
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1793              		.loc 1 1192 8 is_stmt 0 view .LVU565
 1794 0060 95F90030 		ldrsb	r3, [r5]
1196:src/display.c **** 				}
 1795              		.loc 1 1196 6 view .LVU566
 1796 0064 0848     		ldr	r0, .L191+12
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1797              		.loc 1 1192 8 view .LVU567
 1798 0066 002B     		cmp	r3, #0
1193:src/display.c **** 				}
 1799              		.loc 1 1193 6 is_stmt 1 view .LVU568
 1800 0068 B4BF     		ite	lt
 1801 006a 0A49     		ldrlt	r1, .L191+24
1196:src/display.c **** 				}
 1802              		.loc 1 1196 6 view .LVU569
 1803 006c 0A49     		ldrge	r1, .L191+28
 1804 006e FFF7FEFF 		bl	scopy
 1805              	.LVL180:
1198:src/display.c **** #endif
 1806              		.loc 1 1198 5 view .LVU570
1198:src/display.c **** #endif
ARM GAS  /tmp/ccZMW3We.s 			page 88


 1807              		.loc 1 1198 18 is_stmt 0 view .LVU571
 1808 0072 064B     		ldr	r3, .L191+16
 1809 0074 0022     		movs	r2, #0
 1810 0076 1A70     		strb	r2, [r3]
1201:src/display.c **** 		}
 1811              		.loc 1 1201 11 view .LVU572
 1812 0078 0120     		movs	r0, #1
1205:src/display.c **** 
 1813              		.loc 1 1205 1 view .LVU573
 1814 007a 38BD     		pop	{r3, r4, r5, pc}
 1815              	.L192:
 1816              		.align	2
 1817              	.L191:
 1818 007c 00000000 		.word	.LC1
 1819 0080 00000000 		.word	.LANCHOR3
 1820 0084 00000000 		.word	.LANCHOR4
 1821 0088 00000000 		.word	LastDisplayedNumber
 1822 008c 00000000 		.word	forceDispPlot
 1823 0090 00000000 		.word	.LANCHOR5
 1824 0094 00000000 		.word	.LANCHOR6
 1825 0098 00000000 		.word	.LANCHOR7
 1826              		.cfi_endproc
 1827              	.LFE45:
 1829              		.section	.text.set_x_hms,"ax",%progbits
 1830              		.align	1
 1831              		.p2align 2,,3
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	set_x_hms:
 1838              	.LVL181:
 1839              	.LFB22:
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1840              		.loc 1 1250 56 is_stmt 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 200
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
1251:src/display.c **** 	int j=0;
 1844              		.loc 1 1251 2 view .LVU575
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1845              		.loc 1 1252 2 view .LVU576
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1846              		.loc 1 1250 56 is_stmt 0 view .LVU577
 1847 0000 30B5     		push	{r4, r5, lr}
 1848              		.cfi_def_cfa_offset 12
 1849              		.cfi_offset 4, -12
 1850              		.cfi_offset 5, -8
 1851              		.cfi_offset 14, -4
 1852 0002 B5B0     		sub	sp, sp, #212
 1853              		.cfi_def_cfa_offset 224
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1854              		.loc 1 1250 56 view .LVU578
 1855 0004 0446     		mov	r4, r0
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1856              		.loc 1 1252 6 view .LVU579
 1857 0006 0023     		movs	r3, #0
ARM GAS  /tmp/ccZMW3We.s 			page 89


1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1858              		.loc 1 1256 6 view .LVU580
 1859 0008 0830     		adds	r0, r0, #8
 1860              	.LVL182:
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1861              		.loc 1 1250 56 view .LVU581
 1862 000a 0D46     		mov	r5, r1
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1863              		.loc 1 1252 6 view .LVU582
 1864 000c 0393     		str	r3, [sp, #12]
1253:src/display.c **** 	unsigned int hr, min, sec, fs;
 1865              		.loc 1 1253 2 is_stmt 1 view .LVU583
 1866              	.LVL183:
1254:src/display.c **** 
 1867              		.loc 1 1254 2 view .LVU584
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1868              		.loc 1 1256 2 view .LVU585
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1869              		.loc 1 1256 6 is_stmt 0 view .LVU586
 1870 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1871              	.LVL184:
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1872              		.loc 1 1256 5 view .LVU587
 1873 0012 48B1     		cbz	r0, .L194
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1874              		.loc 1 1257 3 is_stmt 1 view .LVU588
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1875              		.loc 1 1257 6 is_stmt 0 view .LVU589
 1876 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1877 0016 5B06     		lsls	r3, r3, #25
 1878 0018 04D5     		bpl	.L193
1258:src/display.c **** 		return;
 1879              		.loc 1 1258 4 is_stmt 1 view .LVU590
 1880              	.LVL185:
 1881              	.LBB185:
 1882              	.LBI185:
 395:src/display.c **** 	if (res) *res++ = ch;
 1883              		.loc 1 395 14 view .LVU591
 1884              	.LBB186:
 396:src/display.c **** 	else	set_dig(base, ch);
 1885              		.loc 1 396 2 view .LVU592
 396:src/display.c **** 	else	set_dig(base, ch);
 1886              		.loc 1 396 5 is_stmt 0 view .LVU593
 1887 001a 002D     		cmp	r5, #0
 1888 001c 00F0B580 		beq	.L197
 396:src/display.c **** 	else	set_dig(base, ch);
 1889              		.loc 1 396 11 is_stmt 1 view .LVU594
 1890              	.LVL186:
 396:src/display.c **** 	else	set_dig(base, ch);
 1891              		.loc 1 396 18 is_stmt 0 view .LVU595
 1892 0020 6F23     		movs	r3, #111
 1893 0022 2B70     		strb	r3, [r5]
 1894              	.LVL187:
 1895              	.L193:
 396:src/display.c **** 	else	set_dig(base, ch);
 1896              		.loc 1 396 18 view .LVU596
 1897              	.LBE186:
ARM GAS  /tmp/ccZMW3We.s 			page 90


 1898              	.LBE185:
1313:src/display.c **** 
 1899              		.loc 1 1313 1 view .LVU597
 1900 0024 35B0     		add	sp, sp, #212
 1901              		.cfi_remember_state
 1902              		.cfi_def_cfa_offset 12
 1903              		@ sp needed
 1904 0026 30BD     		pop	{r4, r5, pc}
 1905              	.LVL188:
 1906              	.L194:
 1907              		.cfi_restore_state
1262:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1908              		.loc 1 1262 2 is_stmt 1 view .LVU598
 1909 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1910              	.LVL189:
1263:src/display.c **** 	dn_abs(&a, rgx);
 1911              		.loc 1 1263 2 view .LVU599
 1912 002c 624A     		ldr	r2, .L224
 1913 002e 2146     		mov	r1, r4
 1914 0030 07A8     		add	r0, sp, #28
 1915 0032 FFF7FEFF 		bl	decNumberMod
 1916              	.LVL190:
1264:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1917              		.loc 1 1264 2 view .LVU600
 1918 0036 2146     		mov	r1, r4
 1919 0038 19A8     		add	r0, sp, #100
 1920 003a FFF7FEFF 		bl	dn_abs
 1921              	.LVL191:
1265:src/display.c **** 		if (res != NULL)
 1922              		.loc 1 1265 2 view .LVU601
1265:src/display.c **** 		if (res != NULL)
 1923              		.loc 1 1265 5 is_stmt 0 view .LVU602
 1924 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1925 0042 002B     		cmp	r3, #0
 1926 0044 72DB     		blt	.L222
 1927              	.L198:
1273:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1928              		.loc 1 1273 2 is_stmt 1 view .LVU603
 1929 0046 07A9     		add	r1, sp, #28
 1930 0048 10A8     		add	r0, sp, #64
 1931 004a FFF7FEFF 		bl	decNumberHR2HMS
 1932              	.LVL192:
1274:src/display.c **** 	decNumberRound(&u, &t);
 1933              		.loc 1 1274 2 view .LVU604
 1934 004e 0622     		movs	r2, #6
 1935 0050 10A9     		add	r1, sp, #64
 1936 0052 22A8     		add	r0, sp, #136
 1937 0054 FFF7FEFF 		bl	dn_mulpow10
 1938              	.LVL193:
1275:src/display.c **** 
 1939              		.loc 1 1275 2 view .LVU605
 1940 0058 22A9     		add	r1, sp, #136
 1941 005a 2BA8     		add	r0, sp, #172
 1942 005c FFF7FEFF 		bl	decNumberRound
 1943              	.LVL194:
1277:src/display.c **** 	hms_step(&u, &t, &sec);
 1944              		.loc 1 1277 2 view .LVU606
ARM GAS  /tmp/ccZMW3We.s 			page 91


 1945 0060 2BA9     		add	r1, sp, #172
 1946 0062 22A8     		add	r0, sp, #136
 1947 0064 06AA     		add	r2, sp, #24
 1948 0066 FFF7FEFF 		bl	hms_step
 1949              	.LVL195:
1278:src/display.c **** 	hms_step(&t, &u, &min);
 1950              		.loc 1 1278 2 view .LVU607
 1951 006a 22A9     		add	r1, sp, #136
 1952 006c 2BA8     		add	r0, sp, #172
 1953 006e 05AA     		add	r2, sp, #20
 1954 0070 FFF7FEFF 		bl	hms_step
 1955              	.LVL196:
1279:src/display.c **** 	hr = dn_to_int(&t);
 1956              		.loc 1 1279 2 view .LVU608
 1957 0074 04AA     		add	r2, sp, #16
 1958 0076 2BA9     		add	r1, sp, #172
 1959 0078 22A8     		add	r0, sp, #136
 1960 007a FFF7FEFF 		bl	hms_step
 1961              	.LVL197:
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1962              		.loc 1 1280 2 view .LVU609
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1963              		.loc 1 1280 7 is_stmt 0 view .LVU610
 1964 007e 22A8     		add	r0, sp, #136
 1965 0080 FFF7FEFF 		bl	dn_to_int
 1966              	.LVL198:
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1967              		.loc 1 1281 33 view .LVU611
 1968 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1969              		.loc 1 1281 5 view .LVU612
 1970 0088 3B2A     		cmp	r2, #59
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1971              		.loc 1 1281 19 is_stmt 1 view .LVU613
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1972              		.loc 1 1281 23 is_stmt 0 view .LVU614
 1973 008a 82BF     		ittt	hi
 1974 008c 3C3A     		subhi	r2, r2, #60
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1975              		.loc 1 1281 33 view .LVU615
 1976 008e 0133     		addhi	r3, r3, #1
 1977 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1282:src/display.c **** 
 1978              		.loc 1 1282 2 is_stmt 1 view .LVU616
1282:src/display.c **** 
 1979              		.loc 1 1282 5 is_stmt 0 view .LVU617
 1980 0094 3B2B     		cmp	r3, #59
 1981 0096 02D9     		bls	.L203
1282:src/display.c **** 
 1982              		.loc 1 1282 19 is_stmt 1 discriminator 1 view .LVU618
1282:src/display.c **** 
 1983              		.loc 1 1282 23 is_stmt 0 discriminator 1 view .LVU619
 1984 0098 3C3B     		subs	r3, r3, #60
 1985 009a 0493     		str	r3, [sp, #16]
1282:src/display.c **** 
 1986              		.loc 1 1282 30 is_stmt 1 discriminator 1 view .LVU620
1282:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 92


 1987              		.loc 1 1282 32 is_stmt 0 discriminator 1 view .LVU621
 1988 009c 0130     		adds	r0, r0, #1
 1989              	.LVL199:
 1990              	.L203:
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
 1991              		.loc 1 1285 2 is_stmt 1 view .LVU622
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
 1992              		.loc 1 1285 8 is_stmt 0 view .LVU623
 1993 009e 0123     		movs	r3, #1
 1994 00a0 0093     		str	r3, [sp]
 1995 00a2 2946     		mov	r1, r5
 1996 00a4 03AA     		add	r2, sp, #12
 1997 00a6 0423     		movs	r3, #4
 1998 00a8 FFF7FEFF 		bl	hms_render
 1999              	.LVL200:
1286:src/display.c **** 	j += SEGS_PER_DIGIT;
 2000              		.loc 1 1286 2 is_stmt 1 view .LVU624
 2001              	.LBB188:
 2002              	.LBI188:
 395:src/display.c **** 	if (res) *res++ = ch;
 2003              		.loc 1 395 14 view .LVU625
 2004              	.LBB189:
 396:src/display.c **** 	else	set_dig(base, ch);
 2005              		.loc 1 396 2 view .LVU626
 396:src/display.c **** 	else	set_dig(base, ch);
 2006              		.loc 1 396 5 is_stmt 0 view .LVU627
 2007 00ac 0446     		mov	r4, r0
 2008              	.LVL201:
 396:src/display.c **** 	else	set_dig(base, ch);
 2009              		.loc 1 396 5 view .LVU628
 2010 00ae 0028     		cmp	r0, #0
 2011 00b0 76D0     		beq	.L204
 396:src/display.c **** 	else	set_dig(base, ch);
 2012              		.loc 1 396 11 is_stmt 1 view .LVU629
 396:src/display.c **** 	else	set_dig(base, ch);
 2013              		.loc 1 396 15 is_stmt 0 view .LVU630
 2014 00b2 0146     		mov	r1, r0
 2015              	.LVL202:
 396:src/display.c **** 	else	set_dig(base, ch);
 2016              		.loc 1 396 18 view .LVU631
 2017 00b4 4023     		movs	r3, #64
 2018 00b6 01F8013B 		strb	r3, [r1], #1
 2019              	.LVL203:
 2020              	.L205:
 398:src/display.c **** }
 2021              		.loc 1 398 2 is_stmt 1 view .LVU632
 398:src/display.c **** }
 2022              		.loc 1 398 2 is_stmt 0 view .LVU633
 2023              	.LBE189:
 2024              	.LBE188:
1287:src/display.c **** 
 2025              		.loc 1 1287 2 is_stmt 1 view .LVU634
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2026              		.loc 1 1290 8 is_stmt 0 view .LVU635
 2027 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2028 00be 0122     		movs	r2, #1
1287:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 93


 2029              		.loc 1 1287 4 view .LVU636
 2030 00c0 03F10904 		add	r4, r3, #9
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2031              		.loc 1 1290 8 view .LVU637
 2032 00c4 0092     		str	r2, [sp]
 2033 00c6 0223     		movs	r3, #2
 2034 00c8 03AA     		add	r2, sp, #12
1287:src/display.c **** 
 2035              		.loc 1 1287 4 view .LVU638
 2036 00ca 0394     		str	r4, [sp, #12]
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2037              		.loc 1 1290 2 is_stmt 1 view .LVU639
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2038              		.loc 1 1290 8 is_stmt 0 view .LVU640
 2039 00cc FFF7FEFF 		bl	hms_render
 2040              	.LVL204:
1291:src/display.c **** 	j += SEGS_PER_DIGIT;
 2041              		.loc 1 1291 2 is_stmt 1 view .LVU641
 2042              	.LBB191:
 2043              	.LBI191:
 395:src/display.c **** 	if (res) *res++ = ch;
 2044              		.loc 1 395 14 view .LVU642
 2045              	.LBB192:
 396:src/display.c **** 	else	set_dig(base, ch);
 2046              		.loc 1 396 2 view .LVU643
 396:src/display.c **** 	else	set_dig(base, ch);
 2047              		.loc 1 396 5 is_stmt 0 view .LVU644
 2048 00d0 0446     		mov	r4, r0
 2049 00d2 0028     		cmp	r0, #0
 2050 00d4 5ED0     		beq	.L206
 396:src/display.c **** 	else	set_dig(base, ch);
 2051              		.loc 1 396 11 is_stmt 1 view .LVU645
 396:src/display.c **** 	else	set_dig(base, ch);
 2052              		.loc 1 396 15 is_stmt 0 view .LVU646
 2053 00d6 0146     		mov	r1, r0
 2054              	.LVL205:
 396:src/display.c **** 	else	set_dig(base, ch);
 2055              		.loc 1 396 18 view .LVU647
 2056 00d8 2723     		movs	r3, #39
 2057 00da 01F8013B 		strb	r3, [r1], #1
 2058              	.LVL206:
 2059              	.L207:
 398:src/display.c **** }
 2060              		.loc 1 398 2 is_stmt 1 view .LVU648
 398:src/display.c **** }
 2061              		.loc 1 398 2 is_stmt 0 view .LVU649
 2062              	.LBE192:
 2063              	.LBE191:
1292:src/display.c **** 
 2064              		.loc 1 1292 2 is_stmt 1 view .LVU650
1292:src/display.c **** 
 2065              		.loc 1 1292 4 is_stmt 0 view .LVU651
 2066 00de 039B     		ldr	r3, [sp, #12]
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2067              		.loc 1 1295 8 view .LVU652
 2068 00e0 0598     		ldr	r0, [sp, #20]
 2069 00e2 0122     		movs	r2, #1
ARM GAS  /tmp/ccZMW3We.s 			page 94


1292:src/display.c **** 
 2070              		.loc 1 1292 4 view .LVU653
 2071 00e4 03F10904 		add	r4, r3, #9
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2072              		.loc 1 1295 8 view .LVU654
 2073 00e8 0092     		str	r2, [sp]
 2074 00ea 0223     		movs	r3, #2
 2075 00ec 03AA     		add	r2, sp, #12
1292:src/display.c **** 
 2076              		.loc 1 1292 4 view .LVU655
 2077 00ee 0394     		str	r4, [sp, #12]
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2078              		.loc 1 1295 2 is_stmt 1 view .LVU656
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2079              		.loc 1 1295 8 is_stmt 0 view .LVU657
 2080 00f0 FFF7FEFF 		bl	hms_render
 2081              	.LVL207:
1296:src/display.c **** 
 2082              		.loc 1 1296 8 view .LVU658
 2083 00f4 3149     		ldr	r1, .L224+4
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2084              		.loc 1 1295 8 view .LVU659
 2085 00f6 0246     		mov	r2, r0
 2086              	.LVL208:
1296:src/display.c **** 
 2087              		.loc 1 1296 2 is_stmt 1 view .LVU660
1296:src/display.c **** 
 2088              		.loc 1 1296 8 is_stmt 0 view .LVU661
 2089 00f8 0398     		ldr	r0, [sp, #12]
 2090              	.LVL209:
1296:src/display.c **** 
 2091              		.loc 1 1296 8 view .LVU662
 2092 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2093 00fc 0938     		subs	r0, r0, #9
 2094 00fe FFF7FEFF 		bl	set_decimal
 2095              	.LVL210:
1299:src/display.c **** 
 2096              		.loc 1 1299 8 view .LVU663
 2097 0102 0023     		movs	r3, #0
1296:src/display.c **** 
 2098              		.loc 1 1296 8 view .LVU664
 2099 0104 0146     		mov	r1, r0
 2100              	.LVL211:
1299:src/display.c **** 
 2101              		.loc 1 1299 2 is_stmt 1 view .LVU665
1299:src/display.c **** 
 2102              		.loc 1 1299 8 is_stmt 0 view .LVU666
 2103 0106 0093     		str	r3, [sp]
 2104 0108 0698     		ldr	r0, [sp, #24]
 2105              	.LVL212:
1299:src/display.c **** 
 2106              		.loc 1 1299 8 view .LVU667
 2107 010a 03AA     		add	r2, sp, #12
 2108 010c 0223     		movs	r3, #2
 2109 010e FFF7FEFF 		bl	hms_render
 2110              	.LVL213:
1302:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccZMW3We.s 			page 95


 2111              		.loc 1 1302 2 is_stmt 1 view .LVU668
 2112              	.LBB194:
 2113              	.LBI194:
 395:src/display.c **** 	if (res) *res++ = ch;
 2114              		.loc 1 395 14 view .LVU669
 2115              	.LBB195:
 396:src/display.c **** 	else	set_dig(base, ch);
 2116              		.loc 1 396 2 view .LVU670
 396:src/display.c **** 	else	set_dig(base, ch);
 2117              		.loc 1 396 5 is_stmt 0 view .LVU671
 2118 0112 0446     		mov	r4, r0
 2119 0114 78B3     		cbz	r0, .L208
 396:src/display.c **** 	else	set_dig(base, ch);
 2120              		.loc 1 396 11 is_stmt 1 view .LVU672
 2121              	.LVL214:
 396:src/display.c **** 	else	set_dig(base, ch);
 2122              		.loc 1 396 18 is_stmt 0 view .LVU673
 2123 0116 2223     		movs	r3, #34
 2124 0118 0370     		strb	r3, [r0]
 2125              	.LVL215:
 398:src/display.c **** }
 2126              		.loc 1 398 2 is_stmt 1 view .LVU674
 398:src/display.c **** }
 2127              		.loc 1 398 2 is_stmt 0 view .LVU675
 2128              	.LBE195:
 2129              	.LBE194:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2130              		.loc 1 1306 2 is_stmt 1 view .LVU676
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2131              		.loc 1 1306 6 is_stmt 0 view .LVU677
 2132 011a 2749     		ldr	r1, .L224
 2133 011c 19A8     		add	r0, sp, #100
 2134              	.LVL216:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2135              		.loc 1 1306 6 view .LVU678
 2136 011e FFF7FEFF 		bl	dn_lt
 2137              	.LVL217:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2138              		.loc 1 1306 5 view .LVU679
 2139 0122 78B9     		cbnz	r0, .L223
1307:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2140              		.loc 1 1307 3 is_stmt 1 view .LVU680
 2141              	.LVL218:
 2142              	.LBB198:
 2143              	.LBI198:
 395:src/display.c **** 	if (res) *res++ = ch;
 2144              		.loc 1 395 14 view .LVU681
 2145              	.LBB199:
 396:src/display.c **** 	else	set_dig(base, ch);
 2146              		.loc 1 396 2 view .LVU682
 396:src/display.c **** 	else	set_dig(base, ch);
 2147              		.loc 1 396 11 view .LVU683
 396:src/display.c **** 	else	set_dig(base, ch);
 2148              		.loc 1 396 18 is_stmt 0 view .LVU684
 2149 0124 6F23     		movs	r3, #111
 2150 0126 6370     		strb	r3, [r4, #1]
 2151              	.LBE199:
ARM GAS  /tmp/ccZMW3We.s 			page 96


 2152              	.LBE198:
1313:src/display.c **** 
 2153              		.loc 1 1313 1 view .LVU685
 2154 0128 35B0     		add	sp, sp, #212
 2155              		.cfi_remember_state
 2156              		.cfi_def_cfa_offset 12
 2157              		@ sp needed
 2158 012a 30BD     		pop	{r4, r5, pc}
 2159              	.LVL219:
 2160              	.L222:
 2161              		.cfi_restore_state
1266:src/display.c **** 			*res++ += '-';
 2162              		.loc 1 1266 3 is_stmt 1 view .LVU686
1266:src/display.c **** 			*res++ += '-';
 2163              		.loc 1 1266 6 is_stmt 0 view .LVU687
 2164 012c E5B1     		cbz	r5, .L199
1267:src/display.c **** 		else
 2165              		.loc 1 1267 4 is_stmt 1 view .LVU688
1267:src/display.c **** 		else
 2166              		.loc 1 1267 8 is_stmt 0 view .LVU689
 2167 012e 2B46     		mov	r3, r5
 2168              	.LVL220:
1267:src/display.c **** 		else
 2169              		.loc 1 1267 11 view .LVU690
 2170 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2171              	.LVL221:
1267:src/display.c **** 		else
 2172              		.loc 1 1267 11 view .LVU691
 2173 0134 2D32     		adds	r2, r2, #45
 2174 0136 2A70     		strb	r2, [r5]
1267:src/display.c **** 		else
 2175              		.loc 1 1267 8 view .LVU692
 2176 0138 1D46     		mov	r5, r3
 2177              	.LVL222:
 2178              	.L200:
1270:src/display.c **** 	}
 2179              		.loc 1 1270 3 is_stmt 1 view .LVU693
 2180 013a 07A9     		add	r1, sp, #28
 2181 013c 0846     		mov	r0, r1
 2182 013e FFF7FEFF 		bl	dn_minus
 2183              	.LVL223:
 2184 0142 80E7     		b	.L198
 2185              	.LVL224:
 2186              	.L223:
 2187              	.LBB200:
 2188              	.LBB196:
 396:src/display.c **** 	else	set_dig(base, ch);
 2189              		.loc 1 396 15 is_stmt 0 view .LVU694
 2190 0144 0134     		adds	r4, r4, #1
 2191              	.LVL225:
 2192              	.L211:
 396:src/display.c **** 	else	set_dig(base, ch);
 2193              		.loc 1 396 15 view .LVU695
 2194              	.LBE196:
 2195              	.LBE200:
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2196              		.loc 1 1308 9 is_stmt 1 view .LVU696
ARM GAS  /tmp/ccZMW3We.s 			page 97


1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2197              		.loc 1 1308 15 is_stmt 0 view .LVU697
 2198 0146 19A8     		add	r0, sp, #100
 2199 0148 FFF7FEFF 		bl	dn_eq0
 2200              	.LVL226:
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2201              		.loc 1 1308 12 view .LVU698
 2202 014c 0028     		cmp	r0, #0
 2203 014e 7FF469AF 		bne	.L193
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2204              		.loc 1 1309 3 is_stmt 1 view .LVU699
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2205              		.loc 1 1309 7 is_stmt 0 view .LVU700
 2206 0152 1B48     		ldr	r0, .L224+8
 2207 0154 19A9     		add	r1, sp, #100
 2208 0156 FFF7FEFF 		bl	dn_lt
 2209              	.LVL227:
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2210              		.loc 1 1309 6 view .LVU701
 2211 015a 0028     		cmp	r0, #0
 2212 015c 7FF462AF 		bne	.L193
1310:src/display.c **** 		}
 2213              		.loc 1 1310 4 is_stmt 1 view .LVU702
 2214              	.LVL228:
 2215              	.LBB201:
 2216              	.LBI201:
 395:src/display.c **** 	if (res) *res++ = ch;
 2217              		.loc 1 395 14 view .LVU703
 2218              	.LBB202:
 396:src/display.c **** 	else	set_dig(base, ch);
 2219              		.loc 1 396 2 view .LVU704
 396:src/display.c **** 	else	set_dig(base, ch);
 2220              		.loc 1 396 5 is_stmt 0 view .LVU705
 2221 0160 24B3     		cbz	r4, .L213
 396:src/display.c **** 	else	set_dig(base, ch);
 2222              		.loc 1 396 11 is_stmt 1 view .LVU706
 2223              	.LVL229:
 396:src/display.c **** 	else	set_dig(base, ch);
 2224              		.loc 1 396 18 is_stmt 0 view .LVU707
 2225 0162 7523     		movs	r3, #117
 2226 0164 2370     		strb	r3, [r4]
 2227 0166 5DE7     		b	.L193
 2228              	.LVL230:
 2229              	.L199:
 396:src/display.c **** 	else	set_dig(base, ch);
 2230              		.loc 1 396 18 view .LVU708
 2231              	.LBE202:
 2232              	.LBE201:
1269:src/display.c **** 		dn_minus(&x, &x);
 2233              		.loc 1 1269 4 is_stmt 1 view .LVU709
 2234              	.LBB204:
 2235              	.LBI204:
 284:src/display.c **** {
 2236              		.loc 1 284 13 view .LVU710
 2237              	.LBB205:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2238              		.loc 1 286 2 view .LVU711
ARM GAS  /tmp/ccZMW3We.s 			page 98


 286:src/display.c **** 	set_dot(MANT_SIGN);
 2239              		.loc 1 286 24 is_stmt 0 view .LVU712
 2240 0168 164B     		ldr	r3, .L224+12
 2241 016a 2D22     		movs	r2, #45
 287:src/display.c **** }
 2242              		.loc 1 287 2 view .LVU713
 2243 016c 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2244              		.loc 1 286 24 view .LVU714
 2245 016e 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 2246              		.loc 1 287 2 is_stmt 1 view .LVU715
 2247 0170 FFF7FEFF 		bl	set_dot
 2248              	.LVL231:
 288:src/display.c **** 
 2249              		.loc 1 288 1 is_stmt 0 view .LVU716
 2250 0174 E1E7     		b	.L200
 2251              	.LVL232:
 2252              	.L208:
 288:src/display.c **** 
 2253              		.loc 1 288 1 view .LVU717
 2254              	.LBE205:
 2255              	.LBE204:
 2256              	.LBB206:
 2257              	.LBB197:
 397:src/display.c **** 	return res;
 2258              		.loc 1 397 7 is_stmt 1 view .LVU718
 2259 0176 0398     		ldr	r0, [sp, #12]
 2260              	.LVL233:
 397:src/display.c **** 	return res;
 2261              		.loc 1 397 7 is_stmt 0 view .LVU719
 2262 0178 2221     		movs	r1, #34
 2263 017a FFF7FEFF 		bl	set_dig
 2264              	.LVL234:
 398:src/display.c **** }
 2265              		.loc 1 398 2 is_stmt 1 view .LVU720
 398:src/display.c **** }
 2266              		.loc 1 398 2 is_stmt 0 view .LVU721
 2267              	.LBE197:
 2268              	.LBE206:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2269              		.loc 1 1306 2 is_stmt 1 view .LVU722
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2270              		.loc 1 1306 6 is_stmt 0 view .LVU723
 2271 017e 0E49     		ldr	r1, .L224
 2272 0180 19A8     		add	r0, sp, #100
 2273 0182 FFF7FEFF 		bl	dn_lt
 2274              	.LVL235:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2275              		.loc 1 1306 5 view .LVU724
 2276 0186 0028     		cmp	r0, #0
 2277 0188 DDD1     		bne	.L211
 2278              	.LVL236:
 2279              	.L197:
 2280              	.LBB207:
 2281              	.LBB187:
 397:src/display.c **** 	return res;
ARM GAS  /tmp/ccZMW3We.s 			page 99


 2282              		.loc 1 397 7 is_stmt 1 view .LVU725
 2283 018a 6F21     		movs	r1, #111
 2284 018c 7A20     		movs	r0, #122
 2285 018e FFF7FEFF 		bl	set_dig
 2286              	.LVL237:
 2287              	.LBE187:
 2288              	.LBE207:
1259:src/display.c **** 	}
 2289              		.loc 1 1259 3 view .LVU726
 2290 0192 47E7     		b	.L193
 2291              	.LVL238:
 2292              	.L206:
 2293              	.LBB208:
 2294              	.LBB193:
 397:src/display.c **** 	return res;
 2295              		.loc 1 397 7 view .LVU727
 2296 0194 2721     		movs	r1, #39
 2297 0196 0398     		ldr	r0, [sp, #12]
 2298              	.LVL239:
 397:src/display.c **** 	return res;
 2299              		.loc 1 397 7 is_stmt 0 view .LVU728
 2300 0198 FFF7FEFF 		bl	set_dig
 2301              	.LVL240:
 397:src/display.c **** 	return res;
 2302              		.loc 1 397 7 view .LVU729
 2303 019c 2146     		mov	r1, r4
 2304 019e 9EE7     		b	.L207
 2305              	.LVL241:
 2306              	.L204:
 397:src/display.c **** 	return res;
 2307              		.loc 1 397 7 view .LVU730
 2308              	.LBE193:
 2309              	.LBE208:
 2310              	.LBB209:
 2311              	.LBB190:
 397:src/display.c **** 	return res;
 2312              		.loc 1 397 7 is_stmt 1 view .LVU731
 2313 01a0 4021     		movs	r1, #64
 2314 01a2 0398     		ldr	r0, [sp, #12]
 2315              	.LVL242:
 397:src/display.c **** 	return res;
 2316              		.loc 1 397 7 is_stmt 0 view .LVU732
 2317 01a4 FFF7FEFF 		bl	set_dig
 2318              	.LVL243:
 397:src/display.c **** 	return res;
 2319              		.loc 1 397 7 view .LVU733
 2320 01a8 2146     		mov	r1, r4
 2321 01aa 86E7     		b	.L205
 2322              	.LVL244:
 2323              	.L213:
 397:src/display.c **** 	return res;
 2324              		.loc 1 397 7 view .LVU734
 2325              	.LBE190:
 2326              	.LBE209:
 2327              	.LBB210:
 2328              	.LBB203:
 397:src/display.c **** 	return res;
ARM GAS  /tmp/ccZMW3We.s 			page 100


 2329              		.loc 1 397 7 is_stmt 1 view .LVU735
 2330 01ac 7521     		movs	r1, #117
 2331 01ae 7A20     		movs	r0, #122
 2332 01b0 FFF7FEFF 		bl	set_dig
 2333              	.LVL245:
 2334 01b4 36E7     		b	.L193
 2335              	.L225:
 2336 01b6 00BF     		.align	2
 2337              	.L224:
 2338 01b8 00000000 		.word	const_9000
 2339 01bc 00000000 		.word	.LANCHOR1
 2340 01c0 00000000 		.word	const_hms_threshold
 2341 01c4 00000000 		.word	LastDisplayedNumber
 2342              	.LBE203:
 2343              	.LBE210:
 2344              		.cfi_endproc
 2345              	.LFE22:
 2347              		.section	.text.set_x_fract,"ax",%progbits
 2348              		.align	1
 2349              		.p2align 2,,3
 2350              		.syntax unified
 2351              		.thumb
 2352              		.thumb_func
 2353              		.fpu fpv4-sp-d16
 2355              	set_x_fract:
 2356              	.LVL246:
 2357              	.LFB23:
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2358              		.loc 1 1316 57 view -0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 216
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
1317:src/display.c **** 	char buf[32], *p = buf;
 2362              		.loc 1 1317 2 view .LVU737
1318:src/display.c **** 	int j;
 2363              		.loc 1 1318 2 view .LVU738
1319:src/display.c **** 
 2364              		.loc 1 1319 2 view .LVU739
1321:src/display.c **** 		return 1;
 2365              		.loc 1 1321 2 view .LVU740
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2366              		.loc 1 1316 57 is_stmt 0 view .LVU741
 2367 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2368              		.cfi_def_cfa_offset 20
 2369              		.cfi_offset 4, -20
 2370              		.cfi_offset 5, -16
 2371              		.cfi_offset 6, -12
 2372              		.cfi_offset 7, -8
 2373              		.cfi_offset 14, -4
 2374 0002 0646     		mov	r6, r0
 2375 0004 B7B0     		sub	sp, sp, #220
 2376              		.cfi_def_cfa_offset 240
1321:src/display.c **** 		return 1;
 2377              		.loc 1 1321 6 view .LVU742
 2378 0006 0830     		adds	r0, r0, #8
 2379              	.LVL247:
1316:src/display.c **** 	decNumber x, w, n, d, t;
ARM GAS  /tmp/ccZMW3We.s 			page 101


 2380              		.loc 1 1316 57 view .LVU743
 2381 0008 0C46     		mov	r4, r1
1321:src/display.c **** 		return 1;
 2382              		.loc 1 1321 6 view .LVU744
 2383 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2384              	.LVL248:
1321:src/display.c **** 		return 1;
 2385              		.loc 1 1321 5 view .LVU745
 2386 000e 18B1     		cbz	r0, .L257
 2387              	.LVL249:
 2388              	.L246:
1322:src/display.c **** 	dn_abs(&x, rgx);
 2389              		.loc 1 1322 10 view .LVU746
 2390 0010 0125     		movs	r5, #1
 2391              	.L226:
1379:src/display.c **** 
 2392              		.loc 1 1379 1 view .LVU747
 2393 0012 2846     		mov	r0, r5
 2394 0014 37B0     		add	sp, sp, #220
 2395              		.cfi_remember_state
 2396              		.cfi_def_cfa_offset 20
 2397              		@ sp needed
 2398 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2399              	.LVL250:
 2400              	.L257:
 2401              		.cfi_restore_state
 2402              	.LBB219:
 2403              	.LBI219:
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2404              		.loc 1 1316 12 is_stmt 1 view .LVU748
 2405              	.LBB220:
1323:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2406              		.loc 1 1323 2 view .LVU749
 2407 0018 3146     		mov	r1, r6
 2408 001a 0546     		mov	r5, r0
 2409 001c 09A8     		add	r0, sp, #36
 2410 001e FFF7FEFF 		bl	dn_abs
 2411              	.LVL251:
1324:src/display.c **** 		return 0;
 2412              		.loc 1 1324 2 view .LVU750
1324:src/display.c **** 		return 0;
 2413              		.loc 1 1324 6 is_stmt 0 view .LVU751
 2414 0022 5D49     		ldr	r1, .L262
 2415 0024 09A8     		add	r0, sp, #36
 2416 0026 FFF7FEFF 		bl	dn_lt
 2417              	.LVL252:
1324:src/display.c **** 		return 0;
 2418              		.loc 1 1324 5 view .LVU752
 2419 002a 0028     		cmp	r0, #0
 2420 002c F1D0     		beq	.L226
1326:src/display.c **** 		return 0;
 2421              		.loc 1 1326 2 is_stmt 1 view .LVU753
1326:src/display.c **** 		return 0;
 2422              		.loc 1 1326 6 is_stmt 0 view .LVU754
 2423 002e 5B49     		ldr	r1, .L262+4
 2424 0030 09A8     		add	r0, sp, #36
 2425 0032 FFF7FEFF 		bl	dn_lt
ARM GAS  /tmp/ccZMW3We.s 			page 102


 2426              	.LVL253:
1326:src/display.c **** 		return 0;
 2427              		.loc 1 1326 5 view .LVU755
 2428 0036 0746     		mov	r7, r0
 2429 0038 0028     		cmp	r0, #0
 2430 003a EAD1     		bne	.L226
1328:src/display.c **** 		if (res != NULL)
 2431              		.loc 1 1328 2 is_stmt 1 view .LVU756
1328:src/display.c **** 		if (res != NULL)
 2432              		.loc 1 1328 5 is_stmt 0 view .LVU757
 2433 003c 96F90830 		ldrsb	r3, [r6, #8]
 2434 0040 002B     		cmp	r3, #0
 2435 0042 C0F28680 		blt	.L258
 2436              	.LVL254:
 2437              	.L231:
1334:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2438              		.loc 1 1334 2 is_stmt 1 view .LVU758
 2439 0046 09A9     		add	r1, sp, #36
 2440 0048 12A8     		add	r0, sp, #72
 2441 004a FFF7FEFF 		bl	decNumberFrac
 2442              	.LVL255:
1335:src/display.c **** 
 2443              		.loc 1 1335 2 view .LVU759
 2444 004e 12AA     		add	r2, sp, #72
 2445 0050 24A9     		add	r1, sp, #144
 2446 0052 1BA8     		add	r0, sp, #108
 2447 0054 FFF7FEFF 		bl	decNumber2Fraction
 2448              	.LVL256:
1337:src/display.c **** 	dn_compare(&t, &t, &w);
 2449              		.loc 1 1337 2 view .LVU760
 2450 0058 24AA     		add	r2, sp, #144
 2451 005a 1BA9     		add	r1, sp, #108
 2452 005c 2DA8     		add	r0, sp, #180
 2453 005e FFF7FEFF 		bl	dn_divide
 2454              	.LVL257:
1338:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2455              		.loc 1 1338 2 view .LVU761
 2456 0062 2DA9     		add	r1, sp, #180
 2457 0064 12AA     		add	r2, sp, #72
 2458 0066 0846     		mov	r0, r1
 2459 0068 FFF7FEFF 		bl	dn_compare
 2460              	.LVL258:
1339:src/display.c **** 
 2461              		.loc 1 1339 2 view .LVU762
 2462 006c 09A9     		add	r1, sp, #36
 2463 006e 12A8     		add	r0, sp, #72
 2464 0070 FFF7FEFF 		bl	decNumberTrunc
 2465              	.LVL259:
1341:src/display.c **** 		dn_inc(&w);
 2466              		.loc 1 1341 2 view .LVU763
1341:src/display.c **** 		dn_inc(&w);
 2467              		.loc 1 1341 6 is_stmt 0 view .LVU764
 2468 0074 24A9     		add	r1, sp, #144
 2469 0076 1BA8     		add	r0, sp, #108
 2470 0078 FFF7FEFF 		bl	dn_eq
 2471              	.LVL260:
1341:src/display.c **** 		dn_inc(&w);
ARM GAS  /tmp/ccZMW3We.s 			page 103


 2472              		.loc 1 1341 5 view .LVU765
 2473 007c 0028     		cmp	r0, #0
 2474 007e 70D1     		bne	.L259
 2475              	.L233:
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2476              		.loc 1 1346 2 is_stmt 1 view .LVU766
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2477              		.loc 1 1346 6 is_stmt 0 view .LVU767
 2478 0080 474B     		ldr	r3, .L262+8
 2479 0082 1B68     		ldr	r3, [r3]
 2480 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2481              		.loc 1 1346 5 view .LVU768
 2482 0088 DB06     		lsls	r3, r3, #27
 2483 008a 55D4     		bmi	.L234
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2484              		.loc 1 1347 3 is_stmt 1 view .LVU769
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2485              		.loc 1 1347 8 is_stmt 0 view .LVU770
 2486 008c 12A8     		add	r0, sp, #72
 2487 008e FFF7FEFF 		bl	dn_eq0
 2488              	.LVL261:
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2489              		.loc 1 1347 6 view .LVU771
 2490 0092 0028     		cmp	r0, #0
 2491 0094 6CD0     		beq	.L260
1318:src/display.c **** 	int j;
 2492              		.loc 1 1318 17 view .LVU772
 2493 0096 01AE     		add	r6, sp, #4
 2494              	.LVL262:
1318:src/display.c **** 	int j;
 2495              		.loc 1 1318 17 view .LVU773
 2496 0098 3546     		mov	r5, r6
 2497              	.L235:
 2498              	.LVL263:
1355:src/display.c **** 	*p++ = '/';
 2499              		.loc 1 1355 2 is_stmt 1 view .LVU774
1355:src/display.c **** 	*p++ = '/';
 2500              		.loc 1 1355 17 is_stmt 0 view .LVU775
 2501 009a 1BA8     		add	r0, sp, #108
 2502 009c FFF7FEFF 		bl	dn_to_int
 2503              	.LVL264:
 2504 00a0 0146     		mov	r1, r0
1355:src/display.c **** 	*p++ = '/';
 2505              		.loc 1 1355 6 view .LVU776
 2506 00a2 2846     		mov	r0, r5
 2507 00a4 FFF7FEFF 		bl	num_arg
 2508              	.LVL265:
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2509              		.loc 1 1356 2 is_stmt 1 view .LVU777
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2510              		.loc 1 1356 4 is_stmt 0 view .LVU778
 2511 00a8 0546     		mov	r5, r0
 2512              	.LVL266:
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2513              		.loc 1 1356 7 view .LVU779
 2514 00aa 2F23     		movs	r3, #47
ARM GAS  /tmp/ccZMW3We.s 			page 104


 2515 00ac 05F8013B 		strb	r3, [r5], #1
 2516              	.LVL267:
1357:src/display.c **** 	*p = '\0';
 2517              		.loc 1 1357 2 is_stmt 1 view .LVU780
1357:src/display.c **** 	*p = '\0';
 2518              		.loc 1 1357 17 is_stmt 0 view .LVU781
 2519 00b0 24A8     		add	r0, sp, #144
 2520 00b2 FFF7FEFF 		bl	dn_to_int
 2521              	.LVL268:
 2522 00b6 0146     		mov	r1, r0
1357:src/display.c **** 	*p = '\0';
 2523              		.loc 1 1357 6 view .LVU782
 2524 00b8 2846     		mov	r0, r5
 2525 00ba FFF7FEFF 		bl	num_arg
 2526              	.LVL269:
1358:src/display.c **** 	if ((p - 12) > buf) {
 2527              		.loc 1 1358 2 is_stmt 1 view .LVU783
1358:src/display.c **** 	if ((p - 12) > buf) {
 2528              		.loc 1 1358 5 is_stmt 0 view .LVU784
 2529 00be 0546     		mov	r5, r0
 2530 00c0 0023     		movs	r3, #0
 2531 00c2 05F80C39 		strb	r3, [r5], #-12
1359:src/display.c **** 		p -= 12;
 2532              		.loc 1 1359 2 is_stmt 1 view .LVU785
1359:src/display.c **** 		p -= 12;
 2533              		.loc 1 1359 5 is_stmt 0 view .LVU786
 2534 00c6 B542     		cmp	r5, r6
 2535 00c8 32D8     		bhi	.L236
 2536 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2537              	.LVL270:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2538              		.loc 1 1363 12 is_stmt 1 view .LVU787
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2539              		.loc 1 1363 2 is_stmt 0 view .LVU788
 2540 00ce 51B1     		cbz	r1, .L238
1362:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2541              		.loc 1 1362 11 view .LVU789
 2542 00d0 3546     		mov	r5, r6
 2543              	.LVL271:
 2544              	.L241:
1364:src/display.c **** 		j += SEGS_PER_DIGIT;
 2545              		.loc 1 1364 3 is_stmt 1 view .LVU790
 2546              	.LBB221:
 2547              	.LBI221:
 395:src/display.c **** 	if (res) *res++ = ch;
 2548              		.loc 1 395 14 view .LVU791
 2549              	.LBB222:
 396:src/display.c **** 	else	set_dig(base, ch);
 2550              		.loc 1 396 2 view .LVU792
 396:src/display.c **** 	else	set_dig(base, ch);
 2551              		.loc 1 396 11 view .LVU793
 396:src/display.c **** 	else	set_dig(base, ch);
 2552              		.loc 1 396 15 is_stmt 0 view .LVU794
 2553 00d2 2346     		mov	r3, r4
 2554              	.LVL272:
 396:src/display.c **** 	else	set_dig(base, ch);
 2555              		.loc 1 396 5 view .LVU795
ARM GAS  /tmp/ccZMW3We.s 			page 105


 2556 00d4 34B3     		cbz	r4, .L239
 2557              	.LVL273:
 396:src/display.c **** 	else	set_dig(base, ch);
 2558              		.loc 1 396 18 view .LVU796
 2559 00d6 03F8011B 		strb	r1, [r3], #1
 2560              	.LVL274:
 396:src/display.c **** 	else	set_dig(base, ch);
 2561              		.loc 1 396 15 view .LVU797
 2562 00da 1C46     		mov	r4, r3
 2563              	.LVL275:
 2564              	.L240:
 398:src/display.c **** }
 2565              		.loc 1 398 2 is_stmt 1 view .LVU798
 398:src/display.c **** }
 2566              		.loc 1 398 2 is_stmt 0 view .LVU799
 2567              	.LBE222:
 2568              	.LBE221:
1365:src/display.c **** 	}
 2569              		.loc 1 1365 3 is_stmt 1 view .LVU800
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2570              		.loc 1 1363 12 is_stmt 0 view .LVU801
 2571 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2572              	.LVL276:
1365:src/display.c **** 	}
 2573              		.loc 1 1365 5 view .LVU802
 2574 00e0 0937     		adds	r7, r7, #9
 2575              	.LVL277:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2576              		.loc 1 1363 24 is_stmt 1 view .LVU803
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2577              		.loc 1 1363 12 view .LVU804
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2578              		.loc 1 1363 2 is_stmt 0 view .LVU805
 2579 00e2 0029     		cmp	r1, #0
 2580 00e4 F5D1     		bne	.L241
 2581              	.LVL278:
 2582              	.L238:
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2583              		.loc 1 1368 2 is_stmt 1 view .LVU806
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2584              		.loc 1 1368 6 is_stmt 0 view .LVU807
 2585 00e6 2DA8     		add	r0, sp, #180
 2586 00e8 FFF7FEFF 		bl	dn_eq0
 2587              	.LVL279:
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2588              		.loc 1 1368 5 view .LVU808
 2589 00ec F0B9     		cbnz	r0, .L249
1370:src/display.c **** 		p = (char *)S7_fract_LT;
 2590              		.loc 1 1370 7 is_stmt 1 view .LVU809
1370:src/display.c **** 		p = (char *)S7_fract_LT;
 2591              		.loc 1 1370 10 is_stmt 0 view .LVU810
 2592 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1373:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2593              		.loc 1 1373 5 view .LVU811
 2594 00f2 2C4D     		ldr	r5, .L262+12
 2595 00f4 2C4B     		ldr	r3, .L262+16
 2596 00f6 15EA2205 		ands	r5, r5, r2, asr #32
ARM GAS  /tmp/ccZMW3We.s 			page 106


 2597 00fa 38BF     		it	cc
 2598 00fc 1D46     		movcc	r5, r3
 2599              	.L242:
 2600              	.LVL280:
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2601              		.loc 1 1374 26 is_stmt 1 view .LVU812
 2602              	.LBB225:
 2603              	.LBB223:
 396:src/display.c **** 	else	set_dig(base, ch);
 2604              		.loc 1 396 15 is_stmt 0 view .LVU813
 2605 00fe 6C26     		movs	r6, #108
 2606 0100 2021     		movs	r1, #32
 2607 0102 08E0     		b	.L245
 2608              	.LVL281:
 2609              	.L261:
 396:src/display.c **** 	else	set_dig(base, ch);
 2610              		.loc 1 396 15 view .LVU814
 2611              	.LBE223:
 2612              	.LBE225:
 2613              	.LBB226:
 2614              	.LBB227:
 396:src/display.c **** 	else	set_dig(base, ch);
 2615              		.loc 1 396 18 view .LVU815
 2616 0104 03F8011B 		strb	r1, [r3], #1
 2617              	.LVL282:
 396:src/display.c **** 	else	set_dig(base, ch);
 2618              		.loc 1 396 15 view .LVU816
 2619 0108 1C46     		mov	r4, r3
 2620              	.LVL283:
 2621              	.L244:
 398:src/display.c **** }
 2622              		.loc 1 398 2 is_stmt 1 view .LVU817
 398:src/display.c **** }
 2623              		.loc 1 398 2 is_stmt 0 view .LVU818
 2624              	.LBE227:
 2625              	.LBE226:
1376:src/display.c **** 	}
 2626              		.loc 1 1376 3 is_stmt 1 view .LVU819
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2627              		.loc 1 1374 26 is_stmt 0 view .LVU820
 2628 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2629              	.LVL284:
1376:src/display.c **** 	}
 2630              		.loc 1 1376 5 view .LVU821
 2631 010e 0736     		adds	r6, r6, #7
 2632              	.LVL285:
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2633              		.loc 1 1374 38 is_stmt 1 view .LVU822
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2634              		.loc 1 1374 26 view .LVU823
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2635              		.loc 1 1374 2 is_stmt 0 view .LVU824
 2636 0110 0029     		cmp	r1, #0
 2637 0112 3FF47DAF 		beq	.L246
 2638              	.LVL286:
 2639              	.L245:
1375:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccZMW3We.s 			page 107


 2640              		.loc 1 1375 3 is_stmt 1 view .LVU825
 2641              	.LBB229:
 2642              	.LBI226:
 395:src/display.c **** 	if (res) *res++ = ch;
 2643              		.loc 1 395 14 view .LVU826
 2644              	.LBB228:
 396:src/display.c **** 	else	set_dig(base, ch);
 2645              		.loc 1 396 2 view .LVU827
 396:src/display.c **** 	else	set_dig(base, ch);
 2646              		.loc 1 396 11 view .LVU828
 396:src/display.c **** 	else	set_dig(base, ch);
 2647              		.loc 1 396 15 is_stmt 0 view .LVU829
 2648 0116 2346     		mov	r3, r4
 2649              	.LVL287:
 396:src/display.c **** 	else	set_dig(base, ch);
 2650              		.loc 1 396 5 view .LVU830
 2651 0118 002C     		cmp	r4, #0
 2652 011a F3D1     		bne	.L261
 2653              	.LVL288:
 397:src/display.c **** 	return res;
 2654              		.loc 1 397 7 is_stmt 1 view .LVU831
 2655 011c 3046     		mov	r0, r6
 2656 011e FFF7FEFF 		bl	set_dig
 2657              	.LVL289:
 397:src/display.c **** 	return res;
 2658              		.loc 1 397 7 is_stmt 0 view .LVU832
 2659 0122 F2E7     		b	.L244
 2660              	.LVL290:
 2661              	.L239:
 397:src/display.c **** 	return res;
 2662              		.loc 1 397 7 view .LVU833
 2663              	.LBE228:
 2664              	.LBE229:
 2665              	.LBB230:
 2666              	.LBB224:
 397:src/display.c **** 	return res;
 2667              		.loc 1 397 7 is_stmt 1 view .LVU834
 2668 0124 3846     		mov	r0, r7
 2669 0126 FFF7FEFF 		bl	set_dig
 2670              	.LVL291:
 397:src/display.c **** 	return res;
 2671              		.loc 1 397 7 is_stmt 0 view .LVU835
 2672 012a D7E7     		b	.L240
 2673              	.LVL292:
 2674              	.L249:
 397:src/display.c **** 	return res;
 2675              		.loc 1 397 7 view .LVU836
 2676              	.LBE224:
 2677              	.LBE230:
1369:src/display.c **** 	else if (decNumberIsNegative(&t))
 2678              		.loc 1 1369 5 view .LVU837
 2679 012c 1F4D     		ldr	r5, .L262+20
 2680 012e E6E7     		b	.L242
 2681              	.LVL293:
 2682              	.L236:
1360:src/display.c **** 		*p = '<';
 2683              		.loc 1 1360 3 is_stmt 1 view .LVU838
ARM GAS  /tmp/ccZMW3We.s 			page 108


1361:src/display.c **** 	} else	p = buf;
 2684              		.loc 1 1361 3 view .LVU839
1361:src/display.c **** 	} else	p = buf;
 2685              		.loc 1 1361 6 is_stmt 0 view .LVU840
 2686 0130 3C21     		movs	r1, #60
 2687 0132 00F80C1C 		strb	r1, [r0, #-12]
 2688              	.LVL294:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2689              		.loc 1 1363 12 is_stmt 1 view .LVU841
 2690 0136 CCE7     		b	.L241
 2691              	.LVL295:
 2692              	.L234:
1352:src/display.c **** 		dn_add(&n, &n, &x);
 2693              		.loc 1 1352 3 view .LVU842
 2694 0138 12A9     		add	r1, sp, #72
 2695 013a 24AA     		add	r2, sp, #144
 2696 013c 09A8     		add	r0, sp, #36
 2697 013e FFF7FEFF 		bl	dn_multiply
 2698              	.LVL296:
1353:src/display.c **** 	}
 2699              		.loc 1 1353 3 view .LVU843
 2700 0142 1BA9     		add	r1, sp, #108
 2701 0144 09AA     		add	r2, sp, #36
 2702 0146 0846     		mov	r0, r1
1318:src/display.c **** 	int j;
 2703              		.loc 1 1318 17 is_stmt 0 view .LVU844
 2704 0148 01AE     		add	r6, sp, #4
 2705              	.LVL297:
1353:src/display.c **** 	}
 2706              		.loc 1 1353 3 view .LVU845
 2707 014a FFF7FEFF 		bl	dn_add
 2708              	.LVL298:
1318:src/display.c **** 	int j;
 2709              		.loc 1 1318 17 view .LVU846
 2710 014e 3546     		mov	r5, r6
 2711 0150 A3E7     		b	.L235
 2712              	.LVL299:
 2713              	.L258:
1329:src/display.c **** 			*res++ += '-';
 2714              		.loc 1 1329 3 is_stmt 1 view .LVU847
1329:src/display.c **** 			*res++ += '-';
 2715              		.loc 1 1329 6 is_stmt 0 view .LVU848
 2716 0152 D4B1     		cbz	r4, .L232
1330:src/display.c **** 		else
 2717              		.loc 1 1330 4 is_stmt 1 view .LVU849
1330:src/display.c **** 		else
 2718              		.loc 1 1330 8 is_stmt 0 view .LVU850
 2719 0154 2346     		mov	r3, r4
 2720              	.LVL300:
1330:src/display.c **** 		else
 2721              		.loc 1 1330 11 view .LVU851
 2722 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2723              	.LVL301:
1330:src/display.c **** 		else
 2724              		.loc 1 1330 11 view .LVU852
 2725 015a 2D32     		adds	r2, r2, #45
 2726 015c 2270     		strb	r2, [r4]
ARM GAS  /tmp/ccZMW3We.s 			page 109


1330:src/display.c **** 		else
 2727              		.loc 1 1330 8 view .LVU853
 2728 015e 1C46     		mov	r4, r3
 2729              	.LVL302:
1330:src/display.c **** 		else
 2730              		.loc 1 1330 8 view .LVU854
 2731 0160 71E7     		b	.L231
 2732              	.LVL303:
 2733              	.L259:
1342:src/display.c **** 		decNumberZero(&n);
 2734              		.loc 1 1342 3 is_stmt 1 view .LVU855
 2735 0162 12A8     		add	r0, sp, #72
 2736 0164 FFF7FEFF 		bl	dn_inc
 2737              	.LVL304:
1343:src/display.c **** 	}
 2738              		.loc 1 1343 3 view .LVU856
 2739 0168 1BA8     		add	r0, sp, #108
 2740 016a FFF7FEFF 		bl	decNumberZero
 2741              	.LVL305:
 2742 016e 87E7     		b	.L233
 2743              	.L260:
1348:src/display.c **** 			*p++ = ' ';
 2744              		.loc 1 1348 4 view .LVU857
1348:src/display.c **** 			*p++ = ' ';
 2745              		.loc 1 1348 19 is_stmt 0 view .LVU858
 2746 0170 12A8     		add	r0, sp, #72
 2747 0172 FFF7FEFF 		bl	dn_to_int
 2748              	.LVL306:
1348:src/display.c **** 			*p++ = ' ';
 2749              		.loc 1 1348 8 view .LVU859
 2750 0176 01AE     		add	r6, sp, #4
 2751              	.LVL307:
1348:src/display.c **** 			*p++ = ' ';
 2752              		.loc 1 1348 19 view .LVU860
 2753 0178 0146     		mov	r1, r0
1348:src/display.c **** 			*p++ = ' ';
 2754              		.loc 1 1348 8 view .LVU861
 2755 017a 3046     		mov	r0, r6
 2756 017c FFF7FEFF 		bl	num_arg
 2757              	.LVL308:
1349:src/display.c **** 		}
 2758              		.loc 1 1349 4 is_stmt 1 view .LVU862
1349:src/display.c **** 		}
 2759              		.loc 1 1349 6 is_stmt 0 view .LVU863
 2760 0180 0546     		mov	r5, r0
 2761              	.LVL309:
1349:src/display.c **** 		}
 2762              		.loc 1 1349 9 view .LVU864
 2763 0182 2023     		movs	r3, #32
 2764 0184 05F8013B 		strb	r3, [r5], #1
 2765              	.LVL310:
1349:src/display.c **** 		}
 2766              		.loc 1 1349 9 view .LVU865
 2767 0188 87E7     		b	.L235
 2768              	.LVL311:
 2769              	.L232:
1332:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 110


 2770              		.loc 1 1332 4 is_stmt 1 view .LVU866
 2771              	.LBB231:
 2772              	.LBI231:
 284:src/display.c **** {
 2773              		.loc 1 284 13 view .LVU867
 2774              	.LBB232:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2775              		.loc 1 286 2 view .LVU868
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2776              		.loc 1 286 24 is_stmt 0 view .LVU869
 2777 018a 094B     		ldr	r3, .L262+24
 2778 018c 2D22     		movs	r2, #45
 287:src/display.c **** }
 2779              		.loc 1 287 2 view .LVU870
 2780 018e 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2781              		.loc 1 286 24 view .LVU871
 2782 0190 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 2783              		.loc 1 287 2 is_stmt 1 view .LVU872
 2784 0192 FFF7FEFF 		bl	set_dot
 2785              	.LVL312:
 288:src/display.c **** 
 2786              		.loc 1 288 1 is_stmt 0 view .LVU873
 2787 0196 56E7     		b	.L231
 2788              	.L263:
 2789              		.align	2
 2790              	.L262:
 2791 0198 00000000 		.word	const_100000
 2792 019c 00000000 		.word	const_0_0001
 2793 01a0 00000000 		.word	main_ram
 2794 01a4 00000000 		.word	.LANCHOR8
 2795 01a8 00000000 		.word	.LANCHOR10
 2796 01ac 00000000 		.word	.LANCHOR9
 2797 01b0 00000000 		.word	LastDisplayedNumber
 2798              	.LBE232:
 2799              	.LBE231:
 2800              	.LBE220:
 2801              	.LBE219:
 2802              		.cfi_endproc
 2803              	.LFE23:
 2805              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2806              		.align	2
 2807              	.LC2:
 2808 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2808      36376F39 
 2808      44313233 
 2808      34356800 
 2809              		.section	.text.carry_overflow,"ax",%progbits
 2810              		.align	1
 2811              		.p2align 2,,3
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	carry_overflow:
 2818              	.LFB15:
ARM GAS  /tmp/ccZMW3We.s 			page 111


 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2819              		.loc 1 550 34 is_stmt 1 view -0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 551:src/display.c **** 	int c;
 2823              		.loc 1 551 2 view .LVU875
 2824              	.LVL313:
 552:src/display.c **** 	unsigned int b;
 2825              		.loc 1 552 2 view .LVU876
 553:src/display.c **** 
 2826              		.loc 1 553 2 view .LVU877
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2827              		.loc 1 556 2 view .LVU878
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2828              		.loc 1 550 34 is_stmt 0 view .LVU879
 2829 0000 10B5     		push	{r4, lr}
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 4, -8
 2832              		.cfi_offset 14, -4
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2833              		.loc 1 556 16 view .LVU880
 2834 0002 1B4B     		ldr	r3, .L277
 2835 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2836 0006 023B     		subs	r3, r3, #2
 2837 0008 DBB2     		uxtb	r3, r3
 2838 000a 032B     		cmp	r3, #3
 2839 000c 14D8     		bhi	.L265
 2840 000e 194A     		ldr	r2, .L277+4
 2841 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2842              	.LVL314:
 565:src/display.c **** 		SET_EXP_SIGN;
 2843              		.loc 1 565 2 is_stmt 1 view .LVU881
 565:src/display.c **** 		SET_EXP_SIGN;
 2844              		.loc 1 565 13 is_stmt 0 view .LVU882
 2845 0014 A4F10B03 		sub	r3, r4, #11
 565:src/display.c **** 		SET_EXP_SIGN;
 2846              		.loc 1 565 5 view .LVU883
 2847 0018 042B     		cmp	r3, #4
 2848 001a 17D9     		bls	.L274
 2849              	.L267:
 567:src/display.c **** 	set_dig(base, c);
 2850              		.loc 1 567 2 is_stmt 1 view .LVU884
 2851              	.LVL315:
 568:src/display.c **** 
 2852              		.loc 1 568 2 view .LVU885
 567:src/display.c **** 	set_dig(base, c);
 2853              		.loc 1 567 23 is_stmt 0 view .LVU886
 2854 001c 164B     		ldr	r3, .L277+8
 2855 001e 1C44     		add	r4, r4, r3
 2856              	.LVL316:
 568:src/display.c **** 
 2857              		.loc 1 568 2 view .LVU887
 2858 0020 6C20     		movs	r0, #108
 2859 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2860 0026 FFF7FEFF 		bl	set_dig
 2861              	.LVL317:
ARM GAS  /tmp/ccZMW3We.s 			page 112


 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2862              		.loc 1 571 2 is_stmt 1 view .LVU888
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2863              		.loc 1 571 6 is_stmt 0 view .LVU889
 2864 002a FFF7FEFF 		bl	get_carry
 2865              	.LVL318:
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2866              		.loc 1 571 5 view .LVU890
 2867 002e D0B9     		cbnz	r0, .L275
 2868              	.L268:
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2869              		.loc 1 573 2 is_stmt 1 view .LVU891
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2870              		.loc 1 573 6 is_stmt 0 view .LVU892
 2871 0030 FFF7FEFF 		bl	get_overflow
 2872              	.LVL319:
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2873              		.loc 1 573 5 view .LVU893
 2874 0034 88B9     		cbnz	r0, .L276
 575:src/display.c **** 
 2875              		.loc 1 575 1 view .LVU894
 2876 0036 10BD     		pop	{r4, pc}
 2877              	.LVL320:
 2878              	.L265:
 561:src/display.c **** 	}
 2879              		.loc 1 561 11 is_stmt 1 view .LVU895
 561:src/display.c **** 	}
 2880              		.loc 1 561 21 is_stmt 0 view .LVU896
 2881 0038 104B     		ldr	r3, .L277+12
 2882 003a 1B68     		ldr	r3, [r3]
 2883 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2884 0040 2409     		lsrs	r4, r4, #4
 561:src/display.c **** 	}
 2885              		.loc 1 561 30 view .LVU897
 2886 0042 0134     		adds	r4, r4, #1
 2887              	.LVL321:
 561:src/display.c **** 	}
 2888              		.loc 1 561 34 is_stmt 1 view .LVU898
 565:src/display.c **** 		SET_EXP_SIGN;
 2889              		.loc 1 565 2 view .LVU899
 565:src/display.c **** 		SET_EXP_SIGN;
 2890              		.loc 1 565 13 is_stmt 0 view .LVU900
 2891 0044 A4F10B03 		sub	r3, r4, #11
 565:src/display.c **** 		SET_EXP_SIGN;
 2892              		.loc 1 565 5 view .LVU901
 2893 0048 042B     		cmp	r3, #4
 2894 004a E7D8     		bhi	.L267
 2895              	.L274:
 566:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 2896              		.loc 1 566 3 is_stmt 1 view .LVU902
 2897              	.LBB239:
 2898              	.LBI239:
 296:src/display.c **** {
 2899              		.loc 1 296 13 view .LVU903
 2900              	.LBB240:
 298:src/display.c **** 	set_dot(EXP_SIGN);
 2901              		.loc 1 298 2 view .LVU904
ARM GAS  /tmp/ccZMW3We.s 			page 113


 298:src/display.c **** 	set_dot(EXP_SIGN);
 2902              		.loc 1 298 26 is_stmt 0 view .LVU905
 2903 004c 0C4B     		ldr	r3, .L277+16
 2904 004e 2D22     		movs	r2, #45
 299:src/display.c **** }
 2905              		.loc 1 299 2 view .LVU906
 2906 0050 8220     		movs	r0, #130
 298:src/display.c **** 	set_dot(EXP_SIGN);
 2907              		.loc 1 298 26 view .LVU907
 2908 0052 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2909              		.loc 1 299 2 is_stmt 1 view .LVU908
 2910 0054 FFF7FEFF 		bl	set_dot
 2911              	.LVL322:
 300:src/display.c **** 
 2912              		.loc 1 300 1 is_stmt 0 view .LVU909
 2913 0058 E0E7     		b	.L267
 2914              	.LVL323:
 2915              	.L276:
 300:src/display.c **** 
 2916              		.loc 1 300 1 view .LVU910
 2917              	.LBE240:
 2918              	.LBE239:
 2919              	.LBB241:
 2920              	.LBI241:
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2921              		.loc 1 550 13 is_stmt 1 view .LVU911
 2922              	.LBB242:
 574:src/display.c **** }
 2923              		.loc 1 574 3 view .LVU912
 2924              	.LBE242:
 2925              	.LBE241:
 575:src/display.c **** 
 2926              		.loc 1 575 1 is_stmt 0 view .LVU913
 2927 005a BDE81040 		pop	{r4, lr}
 2928              		.cfi_remember_state
 2929              		.cfi_restore 14
 2930              		.cfi_restore 4
 2931              		.cfi_def_cfa_offset 0
 2932              	.LVL324:
 2933              	.LBB244:
 2934              	.LBB243:
 574:src/display.c **** }
 2935              		.loc 1 574 3 view .LVU914
 2936 005e 6F21     		movs	r1, #111
 2937 0060 7A20     		movs	r0, #122
 2938 0062 FFF7FEBF 		b	set_dig
 2939              	.LVL325:
 2940              	.L275:
 2941              		.cfi_restore_state
 574:src/display.c **** }
 2942              		.loc 1 574 3 view .LVU915
 2943              	.LBE243:
 2944              	.LBE244:
 572:src/display.c **** 	if (get_overflow())
 2945              		.loc 1 572 3 is_stmt 1 view .LVU916
 2946 0066 6321     		movs	r1, #99
ARM GAS  /tmp/ccZMW3We.s 			page 114


 2947 0068 7320     		movs	r0, #115
 2948 006a FFF7FEFF 		bl	set_dig
 2949              	.LVL326:
 2950 006e DFE7     		b	.L268
 2951              	.L278:
 2952              		.align	2
 2953              	.L277:
 2954 0070 00000000 		.word	StateWhileOn
 2955 0074 00000000 		.word	.LANCHOR11
 2956 0078 00000000 		.word	.LC2
 2957 007c 00000000 		.word	main_ram
 2958 0080 00000000 		.word	LastDisplayedExponent
 2959              		.cfi_endproc
 2960              	.LFE15:
 2962              		.global	__aeabi_uldivmod
 2963              		.section	.text.set_int_x,"ax",%progbits
 2964              		.align	1
 2965              		.p2align 2,,3
 2966              		.syntax unified
 2967              		.thumb
 2968              		.thumb_func
 2969              		.fpu fpv4-sp-d16
 2971              	set_int_x:
 2972              	.LVL327:
 2973              	.LFB18:
1042:src/display.c **** 	const int ws = word_size();
 2974              		.loc 1 1042 61 view -0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 88
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
1042:src/display.c **** 	const int ws = word_size();
 2978              		.loc 1 1042 61 is_stmt 0 view .LVU918
 2979 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2980              		.cfi_def_cfa_offset 36
 2981              		.cfi_offset 4, -36
 2982              		.cfi_offset 5, -32
 2983              		.cfi_offset 6, -28
 2984              		.cfi_offset 7, -24
 2985              		.cfi_offset 8, -20
 2986              		.cfi_offset 9, -16
 2987              		.cfi_offset 10, -12
 2988              		.cfi_offset 11, -8
 2989              		.cfi_offset 14, -4
 2990 0004 97B0     		sub	sp, sp, #92
 2991              		.cfi_def_cfa_offset 128
1042:src/display.c **** 	const int ws = word_size();
 2992              		.loc 1 1042 61 view .LVU919
 2993 0006 9246     		mov	r10, r2
 2994 0008 8046     		mov	r8, r0
 2995 000a 8946     		mov	r9, r1
1043:src/display.c **** 	unsigned int b;
 2996              		.loc 1 1043 2 is_stmt 1 view .LVU920
1043:src/display.c **** 	unsigned int b;
 2997              		.loc 1 1043 17 is_stmt 0 view .LVU921
 2998 000c FFF7FEFF 		bl	word_size
 2999              	.LVL328:
1043:src/display.c **** 	unsigned int b;
ARM GAS  /tmp/ccZMW3We.s 			page 115


 3000              		.loc 1 1043 17 view .LVU922
 3001 0010 CD4B     		ldr	r3, .L368
 3002 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3003 0014 023B     		subs	r3, r3, #2
 3004 0016 DBB2     		uxtb	r3, r3
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3005              		.loc 1 1049 6 view .LVU923
 3006 0018 0022     		movs	r2, #0
 3007 001a 032B     		cmp	r3, #3
1043:src/display.c **** 	unsigned int b;
 3008              		.loc 1 1043 17 view .LVU924
 3009 001c 8346     		mov	fp, r0
 3010              	.LVL329:
1044:src/display.c **** 	long long int vs = value;
 3011              		.loc 1 1044 2 is_stmt 1 view .LVU925
1045:src/display.c **** 	unsigned long long int v;
 3012              		.loc 1 1045 2 view .LVU926
1046:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3013              		.loc 1 1046 2 view .LVU927
1047:src/display.c **** 	int i, j, k;
 3014              		.loc 1 1047 2 view .LVU928
1048:src/display.c **** 	int sign = 0;
 3015              		.loc 1 1048 2 view .LVU929
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3016              		.loc 1 1049 2 view .LVU930
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3017              		.loc 1 1049 6 is_stmt 0 view .LVU931
 3018 001e 0492     		str	r2, [sp, #16]
1050:src/display.c **** 
 3019              		.loc 1 1050 2 is_stmt 1 view .LVU932
 3020              	.LVL330:
1052:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3021              		.loc 1 1052 2 view .LVU933
 3022 0020 00F24481 		bhi	.L280
 3023 0024 C94A     		ldr	r2, .L368+4
 3024 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3025              	.LVL331:
1060:src/display.c **** 		IntMaxWindow = 0;
 3026              		.loc 1 1060 2 view .LVU934
1060:src/display.c **** 		IntMaxWindow = 0;
 3027              		.loc 1 1060 5 is_stmt 0 view .LVU935
 3028 002a BAF1000F 		cmp	r10, #0
 3029 002e 00F04481 		beq	.L359
 3030              	.LVL332:
 3031              	.L282:
1065:src/display.c **** 		v = extract_value(value, &sign);
 3032              		.loc 1 1065 2 is_stmt 1 view .LVU936
1065:src/display.c **** 		v = extract_value(value, &sign);
 3033              		.loc 1 1065 24 is_stmt 0 view .LVU937
 3034 0032 6B1E     		subs	r3, r5, #1
1065:src/display.c **** 		v = extract_value(value, &sign);
 3035              		.loc 1 1065 30 view .LVU938
 3036 0034 47F67574 		movw	r4, #32629
 3037 0038 1C41     		asrs	r4, r4, r3
1065:src/display.c **** 		v = extract_value(value, &sign);
 3038              		.loc 1 1065 5 view .LVU939
 3039 003a 14F00104 		ands	r4, r4, #1
ARM GAS  /tmp/ccZMW3We.s 			page 116


 3040 003e 40F0F080 		bne	.L360
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3041              		.loc 1 1082 3 is_stmt 1 view .LVU940
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3042              		.loc 1 1082 6 is_stmt 0 view .LVU941
 3043 0042 BBF13F0F 		cmp	fp, #63
 3044 0046 18DC     		bgt	.L293
 3045              	.LBB245:
1083:src/display.c **** 			vs &= mask;
 3046              		.loc 1 1083 4 is_stmt 1 view .LVU942
1083:src/display.c **** 			vs &= mask;
 3047              		.loc 1 1083 36 is_stmt 0 view .LVU943
 3048 0048 0121     		movs	r1, #1
 3049 004a ABF12006 		sub	r6, fp, #32
 3050 004e CBF12000 		rsb	r0, fp, #32
 3051 0052 21FA00F0 		lsr	r0, r1, r0
 3052 0056 01FA06F3 		lsl	r3, r1, r6
 3053 005a 01FA0BF2 		lsl	r2, r1, fp
 3054 005e 0343     		orrs	r3, r3, r0
 3055              	.LVL333:
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3056              		.loc 1 1084 4 is_stmt 1 view .LVU944
1083:src/display.c **** 			vs &= mask;
 3057              		.loc 1 1083 24 is_stmt 0 view .LVU945
 3058 0060 12F1FF30 		adds	r0, r2, #-1
 3059 0064 43F1FF31 		adc	r1, r3, #-1
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3060              		.loc 1 1084 7 view .LVU946
 3061 0068 00EA0800 		and	r0, r0, r8
 3062 006c 01EA0901 		and	r1, r1, r9
 3063              	.LVL334:
1085:src/display.c **** 				vs |= ~mask;
 3064              		.loc 1 1085 7 view .LVU947
 3065 0070 0A2D     		cmp	r5, #10
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3066              		.loc 1 1084 7 view .LVU948
 3067 0072 8046     		mov	r8, r0
 3068              	.LVL335:
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3069              		.loc 1 1084 7 view .LVU949
 3070 0074 8946     		mov	r9, r1
1085:src/display.c **** 				vs |= ~mask;
 3071              		.loc 1 1085 4 is_stmt 1 view .LVU950
1085:src/display.c **** 				vs |= ~mask;
 3072              		.loc 1 1085 7 is_stmt 0 view .LVU951
 3073 0076 00F02681 		beq	.L361
 3074              	.LVL336:
 3075              	.L293:
1085:src/display.c **** 				vs |= ~mask;
 3076              		.loc 1 1085 7 view .LVU952
 3077              	.LBE245:
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3078              		.loc 1 1089 3 is_stmt 1 view .LVU953
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3079              		.loc 1 1089 7 is_stmt 0 view .LVU954
 3080 007a B54B     		ldr	r3, .L368+8
 3081 007c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZMW3We.s 			page 117


 3082 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3083              		.loc 1 1089 6 view .LVU955
 3084 0082 9907     		lsls	r1, r3, #30
 3085 0084 3FD5     		bpl	.L322
1092:src/display.c **** 			v = (unsigned long long int)vs;
 3086              		.loc 1 1092 10 is_stmt 1 view .LVU956
 3087              	.LBB246:
1100:src/display.c **** 			const unsigned int b1 = b >> 1;
 3088              		.loc 1 1100 4 view .LVU957
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3089              		.loc 1 1101 4 view .LVU958
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3090              		.loc 1 1101 23 is_stmt 0 view .LVU959
 3091 0086 6A08     		lsrs	r2, r5, #1
 3092              	.LVL337:
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3093              		.loc 1 1102 4 is_stmt 1 view .LVU960
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3094              		.loc 1 1102 41 is_stmt 0 view .LVU961
 3095 0088 12F00A0F 		tst	r2, #10
 3096 008c 14BF     		ite	ne
 3097 008e 0123     		movne	r3, #1
 3098 0090 0023     		moveq	r3, #0
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3099              		.loc 1 1102 68 view .LVU962
 3100 0092 12F00C0F 		tst	r2, #12
 3101 0096 18BF     		it	ne
 3102 0098 43F00203 		orrne	r3, r3, #2
 3103              	.LVL338:
 3104              	.L299:
1103:src/display.c **** 
 3105              		.loc 1 1103 4 is_stmt 1 discriminator 4 view .LVU963
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3106              		.loc 1 1105 12 is_stmt 0 discriminator 4 view .LVU964
 3107 009c 0BEB0306 		add	r6, fp, r3
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3108              		.loc 1 1105 25 discriminator 4 view .LVU965
 3109 00a0 0133     		adds	r3, r3, #1
 3110              	.LVL339:
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3111              		.loc 1 1105 19 discriminator 4 view .LVU966
 3112 00a2 B6FBF3F6 		udiv	r6, r6, r3
1106:src/display.c **** 				const int r = v % b;
 3113              		.loc 1 1106 4 discriminator 4 view .LVU967
 3114 00a6 002E     		cmp	r6, #0
1103:src/display.c **** 
 3115              		.loc 1 1103 6 discriminator 4 view .LVU968
 3116 00a8 4046     		mov	r0, r8
 3117 00aa 4946     		mov	r1, r9
 3118              	.LVL340:
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3119              		.loc 1 1105 4 is_stmt 1 discriminator 4 view .LVU969
1106:src/display.c **** 				const int r = v % b;
 3120              		.loc 1 1106 4 discriminator 4 view .LVU970
1106:src/display.c **** 				const int r = v % b;
 3121              		.loc 1 1106 14 discriminator 4 view .LVU971
ARM GAS  /tmp/ccZMW3We.s 			page 118


1106:src/display.c **** 				const int r = v % b;
 3122              		.loc 1 1106 4 is_stmt 0 discriminator 4 view .LVU972
 3123 00ac 40F36D81 		ble	.L323
 3124 00b0 05AC     		add	r4, sp, #20
 3125 00b2 DFF8A8B2 		ldr	fp, .L368+20
 3126              	.LVL341:
1106:src/display.c **** 				const int r = v % b;
 3127              		.loc 1 1106 4 discriminator 4 view .LVU973
 3128 00b6 3719     		adds	r7, r6, r4
 3129              	.LVL342:
 3130              	.L300:
 3131              	.LBB247:
1107:src/display.c **** 				v /= b;
 3132              		.loc 1 1107 5 is_stmt 1 discriminator 3 view .LVU974
 3133 00b8 2A46     		mov	r2, r5
 3134 00ba 0023     		movs	r3, #0
 3135 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 3136              	.LVL343:
1108:src/display.c **** 				buf[i] = DIGITS[r];
 3137              		.loc 1 1108 5 discriminator 3 view .LVU975
1109:src/display.c **** 			}
 3138              		.loc 1 1109 12 is_stmt 0 discriminator 3 view .LVU976
 3139 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3140 00c4 04F8013B 		strb	r3, [r4], #1
 3141              	.LVL344:
1109:src/display.c **** 			}
 3142              		.loc 1 1109 5 is_stmt 1 discriminator 3 view .LVU977
 3143              	.LBE247:
1106:src/display.c **** 				const int r = v % b;
 3144              		.loc 1 1106 19 discriminator 3 view .LVU978
1106:src/display.c **** 				const int r = v % b;
 3145              		.loc 1 1106 14 discriminator 3 view .LVU979
1106:src/display.c **** 				const int r = v % b;
 3146              		.loc 1 1106 4 is_stmt 0 discriminator 3 view .LVU980
 3147 00c8 BC42     		cmp	r4, r7
 3148 00ca F5D1     		bne	.L300
 3149 00cc 06F1FF39 		add	r9, r6, #-1
1106:src/display.c **** 				const int r = v % b;
 3150              		.loc 1 1106 4 view .LVU981
 3151 00d0 3446     		mov	r4, r6
 3152              	.LVL345:
 3153              	.L292:
1106:src/display.c **** 				const int r = v % b;
 3154              		.loc 1 1106 4 view .LVU982
 3155              	.LBE246:
1115:src/display.c **** 		if (sign) *res++ = '-';
 3156              		.loc 1 1115 2 is_stmt 1 view .LVU983
1115:src/display.c **** 		if (sign) *res++ = '-';
 3157              		.loc 1 1115 5 is_stmt 0 view .LVU984
 3158 00d2 BAF1000F 		cmp	r10, #0
 3159 00d6 41D0     		beq	.L301
 3160              	.LVL346:
 3161              	.L362:
1116:src/display.c **** 		while (--i >= 0)
 3162              		.loc 1 1116 3 is_stmt 1 view .LVU985
1116:src/display.c **** 		while (--i >= 0)
 3163              		.loc 1 1116 6 is_stmt 0 view .LVU986
ARM GAS  /tmp/ccZMW3We.s 			page 119


 3164 00d8 049B     		ldr	r3, [sp, #16]
 3165 00da 13B1     		cbz	r3, .L302
1116:src/display.c **** 		while (--i >= 0)
 3166              		.loc 1 1116 13 is_stmt 1 discriminator 1 view .LVU987
 3167              	.LVL347:
1116:src/display.c **** 		while (--i >= 0)
 3168              		.loc 1 1116 20 is_stmt 0 discriminator 1 view .LVU988
 3169 00dc 2D23     		movs	r3, #45
 3170 00de 0AF8013B 		strb	r3, [r10], #1
 3171              	.LVL348:
 3172              	.L302:
1117:src/display.c **** 			*res++ = buf[i];
 3173              		.loc 1 1117 9 is_stmt 1 view .LVU989
1117:src/display.c **** 			*res++ = buf[i];
 3174              		.loc 1 1117 9 is_stmt 0 view .LVU990
 3175 00e2 B9F1FF3F 		cmp	r9, #-1
 3176 00e6 0BD0     		beq	.L279
 3177 00e8 09F10103 		add	r3, r9, #1
 3178 00ec 05A9     		add	r1, sp, #20
 3179 00ee 0AF1FF3A 		add	r10, r10, #-1
 3180 00f2 0B44     		add	r3, r3, r1
 3181              	.LVL349:
 3182              	.L304:
1118:src/display.c **** 	} else {
 3183              		.loc 1 1118 4 is_stmt 1 view .LVU991
1118:src/display.c **** 	} else {
 3184              		.loc 1 1118 11 is_stmt 0 view .LVU992
 3185 00f4 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3186              	.LVL350:
1118:src/display.c **** 	} else {
 3187              		.loc 1 1118 11 view .LVU993
 3188 00f8 0AF8012F 		strb	r2, [r10, #1]!
 3189              	.LVL351:
1117:src/display.c **** 			*res++ = buf[i];
 3190              		.loc 1 1117 9 is_stmt 1 view .LVU994
1117:src/display.c **** 			*res++ = buf[i];
 3191              		.loc 1 1117 9 is_stmt 0 view .LVU995
 3192 00fc 9942     		cmp	r1, r3
 3193 00fe F9D1     		bne	.L304
 3194              	.LVL352:
 3195              	.L279:
1164:src/display.c **** 
 3196              		.loc 1 1164 1 view .LVU996
 3197 0100 17B0     		add	sp, sp, #92
 3198              		.cfi_remember_state
 3199              		.cfi_def_cfa_offset 36
 3200              		@ sp needed
 3201 0102 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3202              	.LVL353:
 3203              	.L322:
 3204              		.cfi_restore_state
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3205              		.loc 1 1089 24 discriminator 1 view .LVU997
 3206 0106 58EA0903 		orrs	r3, r8, r9
 3207 010a 00F0C680 		beq	.L287
1092:src/display.c **** 			v = (unsigned long long int)vs;
 3208              		.loc 1 1092 10 is_stmt 1 view .LVU998
ARM GAS  /tmp/ccZMW3We.s 			page 120


1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3209              		.loc 1 1093 4 view .LVU999
 3210 010e 2A46     		mov	r2, r5
1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3211              		.loc 1 1093 6 is_stmt 0 view .LVU1000
 3212 0110 4746     		mov	r7, r8
 3213 0112 0023     		movs	r3, #0
 3214 0114 0DF11408 		add	r8, sp, #20
 3215 0118 DFF840B2 		ldr	fp, .L368+20
 3216              	.LVL354:
1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3217              		.loc 1 1093 6 view .LVU1001
 3218 011c 0095     		str	r5, [sp]
 3219 011e 4E46     		mov	r6, r9
1094:src/display.c **** 				const int r = v % b;
 3220              		.loc 1 1094 4 is_stmt 1 view .LVU1002
 3221              	.LVL355:
1094:src/display.c **** 				const int r = v % b;
 3222              		.loc 1 1094 14 view .LVU1003
 3223 0120 4546     		mov	r5, r8
 3224              	.LVL356:
1094:src/display.c **** 				const int r = v % b;
 3225              		.loc 1 1094 14 is_stmt 0 view .LVU1004
 3226 0122 9946     		mov	r9, r3
 3227 0124 9046     		mov	r8, r2
 3228              	.LVL357:
 3229              	.L298:
 3230              	.LBB248:
1095:src/display.c **** 				v /= b;
 3231              		.loc 1 1095 5 is_stmt 1 discriminator 3 view .LVU1005
 3232 0126 3846     		mov	r0, r7
 3233 0128 3146     		mov	r1, r6
 3234 012a 4246     		mov	r2, r8
 3235 012c 4B46     		mov	r3, r9
 3236 012e FFF7FEFF 		bl	__aeabi_uldivmod
 3237              	.LVL358:
 3238 0132 3346     		mov	r3, r6
 3239 0134 9446     		mov	ip, r2
 3240              	.LVL359:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3241              		.loc 1 1096 5 discriminator 3 view .LVU1006
 3242              	.LBE248:
1094:src/display.c **** 				const int r = v % b;
 3243              		.loc 1 1094 4 is_stmt 0 discriminator 3 view .LVU1007
 3244 0136 4B45     		cmp	r3, r9
 3245 0138 3A46     		mov	r2, r7
 3246              	.LVL360:
1094:src/display.c **** 				const int r = v % b;
 3247              		.loc 1 1094 4 discriminator 3 view .LVU1008
 3248 013a 08BF     		it	eq
 3249 013c 4245     		cmpeq	r2, r8
 3250              	.LBB249:
1097:src/display.c **** 			}
 3251              		.loc 1 1097 12 discriminator 3 view .LVU1009
 3252 013e 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3253              	.LVL361:
1097:src/display.c **** 			}
ARM GAS  /tmp/ccZMW3We.s 			page 121


 3254              		.loc 1 1097 12 discriminator 3 view .LVU1010
 3255 0142 05F8017B 		strb	r7, [r5], #1
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3256              		.loc 1 1096 7 discriminator 3 view .LVU1011
 3257 0146 0E46     		mov	r6, r1
 3258              	.LVL362:
1097:src/display.c **** 			}
 3259              		.loc 1 1097 5 is_stmt 1 discriminator 3 view .LVU1012
 3260              	.LBE249:
1094:src/display.c **** 				const int r = v % b;
 3261              		.loc 1 1094 22 discriminator 3 view .LVU1013
 3262              	.LBB250:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3263              		.loc 1 1096 7 is_stmt 0 discriminator 3 view .LVU1014
 3264 0148 0746     		mov	r7, r0
 3265 014a 2146     		mov	r1, r4
 3266              	.LVL363:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3267              		.loc 1 1096 7 discriminator 3 view .LVU1015
 3268              	.LBE250:
1094:src/display.c **** 				const int r = v % b;
 3269              		.loc 1 1094 23 discriminator 3 view .LVU1016
 3270 014c 04F10104 		add	r4, r4, #1
 3271              	.LVL364:
1094:src/display.c **** 				const int r = v % b;
 3272              		.loc 1 1094 14 is_stmt 1 discriminator 3 view .LVU1017
1094:src/display.c **** 				const int r = v % b;
 3273              		.loc 1 1094 4 is_stmt 0 discriminator 3 view .LVU1018
 3274 0150 E9D2     		bcs	.L298
 3275 0152 009D     		ldr	r5, [sp]
 3276 0154 8946     		mov	r9, r1
1115:src/display.c **** 		if (sign) *res++ = '-';
 3277              		.loc 1 1115 2 is_stmt 1 view .LVU1019
1115:src/display.c **** 		if (sign) *res++ = '-';
 3278              		.loc 1 1115 5 is_stmt 0 view .LVU1020
 3279 0156 BAF1000F 		cmp	r10, #0
 3280 015a BDD1     		bne	.L362
 3281              	.LVL365:
 3282              	.L301:
 3283              	.LBB251:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3284              		.loc 1 1135 3 is_stmt 1 view .LVU1021
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3285              		.loc 1 1135 32 is_stmt 0 view .LVU1022
 3286 015c 022D     		cmp	r5, #2
 3287 015e 00F0D880 		beq	.L363
 3288              	.LVL366:
1136:src/display.c **** 				: b == 16 ? 2 : 3;
 3289              		.loc 1 1136 3 is_stmt 1 view .LVU1023
1136:src/display.c **** 				: b == 16 ? 2 : 3;
 3290              		.loc 1 1136 29 is_stmt 0 view .LVU1024
 3291 0162 042D     		cmp	r5, #4
 3292 0164 00F00881 		beq	.L364
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3293              		.loc 1 1135 32 view .LVU1025
 3294 0168 102D     		cmp	r5, #16
 3295 016a 0CBF     		ite	eq
ARM GAS  /tmp/ccZMW3We.s 			page 122


 3296 016c 0225     		moveq	r5, #2
 3297 016e 0325     		movne	r5, #3
 3298 0170 0C27     		movs	r7, #12
 3299              	.LVL367:
 3300              	.L306:
1138:src/display.c **** #endif
 3301              		.loc 1 1138 3 is_stmt 1 view .LVU1026
 3302 0172 FFF7FEFF 		bl	set_separator_decimal_modes
 3303              	.LVL368:
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3304              		.loc 1 1140 3 view .LVU1027
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3305              		.loc 1 1140 26 is_stmt 0 view .LVU1028
 3306 0176 99FBF7F3 		sdiv	r3, r9, r7
1141:src/display.c **** 			State2.window = 0;
 3307              		.loc 1 1141 25 view .LVU1029
 3308 017a 734A     		ldr	r2, .L368
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3309              		.loc 1 1140 16 view .LVU1030
 3310 017c 7549     		ldr	r1, .L368+12
1141:src/display.c **** 			State2.window = 0;
 3311              		.loc 1 1141 25 view .LVU1031
 3312 017e 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3313              		.loc 1 1140 16 view .LVU1032
 3314 0180 0B60     		str	r3, [r1]
1141:src/display.c **** 			State2.window = 0;
 3315              		.loc 1 1141 3 is_stmt 1 view .LVU1033
1141:src/display.c **** 			State2.window = 0;
 3316              		.loc 1 1141 7 is_stmt 0 view .LVU1034
 3317 0182 C2F3C208 		ubfx	r8, r2, #3, #3
1141:src/display.c **** 			State2.window = 0;
 3318              		.loc 1 1141 6 view .LVU1035
 3319 0186 4345     		cmp	r3, r8
 3320 0188 C0F2D780 		blt	.L308
 3321 018c 07FB08F8 		mul	r8, r7, r8
 3322              	.L309:
1143:src/display.c **** 
 3323              		.loc 1 1143 3 is_stmt 1 view .LVU1036
1143:src/display.c **** 
 3324              		.loc 1 1143 10 is_stmt 0 view .LVU1037
 3325 0190 16AB     		add	r3, sp, #88
 3326 0192 16AA     		add	r2, sp, #88
 3327 0194 1C44     		add	r4, r4, r3
 3328              	.LVL369:
1143:src/display.c **** 
 3329              		.loc 1 1143 10 view .LVU1038
 3330 0196 02EB0806 		add	r6, r2, r8
 3331 019a 0023     		movs	r3, #0
 3332 019c 453E     		subs	r6, r6, #69
 3333 019e 04F8443C 		strb	r3, [r4, #-68]
1145:src/display.c **** 		for (k = 0; k < 12; k++)
 3334              		.loc 1 1145 3 is_stmt 1 view .LVU1039
 3335              	.LVL370:
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3336              		.loc 1 1146 3 view .LVU1040
1146:src/display.c **** 			if (buf[j + k] == '\0')
ARM GAS  /tmp/ccZMW3We.s 			page 123


 3337              		.loc 1 1146 15 view .LVU1041
1143:src/display.c **** 
 3338              		.loc 1 1143 10 is_stmt 0 view .LVU1042
 3339 01a2 3246     		mov	r2, r6
 3340              	.LVL371:
 3341              	.L311:
1147:src/display.c **** 				break;
 3342              		.loc 1 1147 4 is_stmt 1 view .LVU1043
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3343              		.loc 1 1146 23 view .LVU1044
1147:src/display.c **** 				break;
 3344              		.loc 1 1147 7 is_stmt 0 view .LVU1045
 3345 01a4 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3346 01a8 0029     		cmp	r1, #0
 3347 01aa 00F0D980 		beq	.L310
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3348              		.loc 1 1146 24 discriminator 2 view .LVU1046
 3349 01ae 0133     		adds	r3, r3, #1
 3350              	.LVL372:
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3351              		.loc 1 1146 15 is_stmt 1 discriminator 2 view .LVU1047
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3352              		.loc 1 1146 3 is_stmt 0 discriminator 2 view .LVU1048
 3353 01b0 0C2B     		cmp	r3, #12
 3354 01b2 F7D1     		bne	.L311
1149:src/display.c **** 			int ch = buf[j++];
 3355              		.loc 1 1149 3 view .LVU1049
 3356 01b4 4FF00B09 		mov	r9, #11
 3357              	.LVL373:
 3358              	.L312:
1149:src/display.c **** 			int ch = buf[j++];
 3359              		.loc 1 1149 3 view .LVU1050
 3360 01b8 08F10108 		add	r8, r8, #1
 3361 01bc C844     		add	r8, r8, r9
 3362 01be 4C46     		mov	r4, r9
 3363 01c0 4FF0630B 		mov	fp, #99
 3364 01c4 09E0     		b	.L317
 3365              	.LVL374:
 3366              	.L365:
 3367              	.LBB252:
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3368              		.loc 1 1155 5 view .LVU1051
 3369 01c6 644B     		ldr	r3, .L368+16
 3370 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3371              	.LVL375:
 3372              	.LBB253:
 3373              	.LBI253:
 355:src/display.c **** 	if (sep == SEP_NONE)
 3374              		.loc 1 355 14 is_stmt 1 view .LVU1052
 3375              	.LBB254:
 356:src/display.c **** 		return res;
 3376              		.loc 1 356 2 view .LVU1053
 356:src/display.c **** 		return res;
 3377              		.loc 1 356 5 is_stmt 0 view .LVU1054
 3378 01ca 09B1     		cbz	r1, .L315
 356:src/display.c **** 		return res;
 3379              		.loc 1 356 5 view .LVU1055
ARM GAS  /tmp/ccZMW3We.s 			page 124


 3380 01cc FFF7FEFF 		bl	set_separator.part.0
 3381              	.LVL376:
 3382              	.L315:
 356:src/display.c **** 		return res;
 3383              		.loc 1 356 5 view .LVU1056
 3384              	.LBE254:
 3385              	.LBE253:
1156:src/display.c **** 		}
 3386              		.loc 1 1156 4 is_stmt 1 discriminator 2 view .LVU1057
 3387              	.LBE252:
1149:src/display.c **** 			int ch = buf[j++];
 3388              		.loc 1 1149 3 is_stmt 0 discriminator 2 view .LVU1058
 3389 01d0 013C     		subs	r4, r4, #1
1149:src/display.c **** 			int ch = buf[j++];
 3390              		.loc 1 1149 3 discriminator 2 view .LVU1059
 3391 01d2 621C     		adds	r2, r4, #1
 3392              	.LBB257:
1156:src/display.c **** 		}
 3393              		.loc 1 1156 8 discriminator 2 view .LVU1060
 3394 01d4 ABF1090B 		sub	fp, fp, #9
 3395              	.LVL377:
1156:src/display.c **** 		}
 3396              		.loc 1 1156 8 discriminator 2 view .LVU1061
 3397              	.LBE257:
1149:src/display.c **** 			int ch = buf[j++];
 3398              		.loc 1 1149 23 is_stmt 1 discriminator 2 view .LVU1062
1149:src/display.c **** 			int ch = buf[j++];
 3399              		.loc 1 1149 13 discriminator 2 view .LVU1063
1149:src/display.c **** 			int ch = buf[j++];
 3400              		.loc 1 1149 3 is_stmt 0 discriminator 2 view .LVU1064
 3401 01d8 16D0     		beq	.L321
 3402              	.LVL378:
 3403              	.L317:
 3404              	.LBB258:
1150:src/display.c **** 			if (i >= shift)
 3405              		.loc 1 1150 4 is_stmt 1 view .LVU1065
1152:src/display.c **** 			set_dig(dig, ch);
 3406              		.loc 1 1152 5 view .LVU1066
1150:src/display.c **** 			if (i >= shift)
 3407              		.loc 1 1150 8 is_stmt 0 view .LVU1067
 3408 01da 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1151:src/display.c **** 				ch -= 030;
 3409              		.loc 1 1151 7 view .LVU1068
 3410 01de A9EB0402 		sub	r2, r9, r4
 3411 01e2 BA42     		cmp	r2, r7
 3412 01e4 A8EB040A 		sub	r10, r8, r4
 3413              	.LVL379:
1151:src/display.c **** 				ch -= 030;
 3414              		.loc 1 1151 4 is_stmt 1 view .LVU1069
1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3415              		.loc 1 1153 4 is_stmt 0 view .LVU1070
 3416 01e8 5846     		mov	r0, fp
1152:src/display.c **** 			set_dig(dig, ch);
 3417              		.loc 1 1152 8 view .LVU1071
 3418 01ea A8BF     		it	ge
 3419 01ec 1839     		subge	r1, r1, #24
 3420              	.LVL380:
ARM GAS  /tmp/ccZMW3We.s 			page 125


1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3421              		.loc 1 1153 4 is_stmt 1 view .LVU1072
 3422 01ee FFF7FEFF 		bl	set_dig
 3423              	.LVL381:
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3424              		.loc 1 1154 4 view .LVU1073
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3425              		.loc 1 1154 11 is_stmt 0 view .LVU1074
 3426 01f2 9AFBF5F3 		sdiv	r3, r10, r5
 3427 01f6 05FB13A3 		mls	r3, r5, r3, r10
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3428              		.loc 1 1154 7 view .LVU1075
 3429 01fa 002B     		cmp	r3, #0
 3430 01fc E8D1     		bne	.L315
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3431              		.loc 1 1155 5 is_stmt 1 discriminator 1 view .LVU1076
 3432              	.LBB256:
 3433              	.LBB255:
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 3434              		.loc 1 358 2 discriminator 1 view .LVU1077
 3435 01fe 5846     		mov	r0, fp
 3436              	.LBE255:
 3437              	.LBE256:
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3438              		.loc 1 1154 25 is_stmt 0 discriminator 1 view .LVU1078
 3439 0200 002C     		cmp	r4, #0
 3440 0202 E0D1     		bne	.L365
1156:src/display.c **** 		}
 3441              		.loc 1 1156 4 is_stmt 1 view .LVU1079
1156:src/display.c **** 		}
 3442              		.loc 1 1156 8 is_stmt 0 view .LVU1080
 3443 0204 ABF1090B 		sub	fp, fp, #9
 3444              	.LVL382:
1156:src/display.c **** 		}
 3445              		.loc 1 1156 8 view .LVU1081
 3446              	.LBE258:
1149:src/display.c **** 			int ch = buf[j++];
 3447              		.loc 1 1149 23 is_stmt 1 view .LVU1082
1149:src/display.c **** 			int ch = buf[j++];
 3448              		.loc 1 1149 13 view .LVU1083
 3449              	.L321:
1158:src/display.c **** 			if (dig >= 0)
 3450              		.loc 1 1158 3 view .LVU1084
1158:src/display.c **** 			if (dig >= 0)
 3451              		.loc 1 1158 6 is_stmt 0 view .LVU1085
 3452 0208 049B     		ldr	r3, [sp, #16]
 3453 020a 002B     		cmp	r3, #0
 3454 020c 3FF478AF 		beq	.L279
1159:src/display.c **** 				set_dig(dig, '-');
 3455              		.loc 1 1159 4 is_stmt 1 view .LVU1086
1159:src/display.c **** 				set_dig(dig, '-');
 3456              		.loc 1 1159 7 is_stmt 0 view .LVU1087
 3457 0210 BBF1000F 		cmp	fp, #0
 3458 0214 C0F2B280 		blt	.L366
 3459              	.LVL383:
 3460              	.L320:
1160:src/display.c **** 			else	SET_MANT_SIGN;
ARM GAS  /tmp/ccZMW3We.s 			page 126


 3461              		.loc 1 1160 5 is_stmt 1 view .LVU1088
 3462 0218 5846     		mov	r0, fp
 3463 021a 2D21     		movs	r1, #45
 3464 021c FFF7FEFF 		bl	set_dig
 3465              	.LVL384:
 3466 0220 6EE7     		b	.L279
 3467              	.LVL385:
 3468              	.L360:
1160:src/display.c **** 			else	SET_MANT_SIGN;
 3469              		.loc 1 1160 5 is_stmt 0 view .LVU1089
 3470              	.LBE251:
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3471              		.loc 1 1066 3 is_stmt 1 view .LVU1090
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3472              		.loc 1 1066 7 is_stmt 0 view .LVU1091
 3473 0222 04AA     		add	r2, sp, #16
 3474 0224 4046     		mov	r0, r8
 3475 0226 4946     		mov	r1, r9
 3476 0228 FFF7FEFF 		bl	extract_value
 3477              	.LVL386:
 3478 022c 0646     		mov	r6, r0
 3479 022e 0F46     		mov	r7, r1
 3480              	.LVL387:
1067:src/display.c **** 			v = value;
 3481              		.loc 1 1067 3 is_stmt 1 view .LVU1092
1067:src/display.c **** 			v = value;
 3482              		.loc 1 1067 7 is_stmt 0 view .LVU1093
 3483 0230 FFF7FEFF 		bl	int_mode
 3484              	.LVL388:
1067:src/display.c **** 			v = value;
 3485              		.loc 1 1067 6 view .LVU1094
 3486 0234 58BB     		cbnz	r0, .L284
1067:src/display.c **** 			v = value;
 3487              		.loc 1 1067 32 discriminator 1 view .LVU1095
 3488 0236 049B     		ldr	r3, [sp, #16]
 3489 0238 012B     		cmp	r3, #1
 3490 023a 28D1     		bne	.L284
1067:src/display.c **** 			v = value;
 3491              		.loc 1 1067 45 discriminator 2 view .LVU1096
 3492 023c 56EA0703 		orrs	r3, r6, r7
 3493 0240 6AD0     		beq	.L367
 3494              	.LVL389:
 3495              	.L285:
1067:src/display.c **** 			v = value;
 3496              		.loc 1 1067 45 discriminator 2 view .LVU1097
 3497 0242 DFF818B1 		ldr	fp, .L368+20
 3498              	.LVL390:
1042:src/display.c **** 	const int ws = word_size();
 3499              		.loc 1 1042 61 discriminator 3 view .LVU1098
 3500 0246 CDF80CA0 		str	r10, [sp, #12]
 3501 024a 0023     		movs	r3, #0
 3502 024c D946     		mov	r9, fp
 3503 024e 0DF11408 		add	r8, sp, #20
 3504 0252 0024     		movs	r4, #0
 3505 0254 AA46     		mov	r10, r5
 3506              	.LVL391:
1042:src/display.c **** 	const int ws = word_size();
ARM GAS  /tmp/ccZMW3We.s 			page 127


 3507              		.loc 1 1042 61 discriminator 3 view .LVU1099
 3508 0256 9B46     		mov	fp, r3
 3509              	.L291:
 3510              	.LVL392:
 3511              	.LBB261:
1076:src/display.c **** 				v /= b;
 3512              		.loc 1 1076 5 is_stmt 1 discriminator 3 view .LVU1100
 3513 0258 3046     		mov	r0, r6
 3514 025a 3946     		mov	r1, r7
 3515 025c 5246     		mov	r2, r10
 3516 025e 5B46     		mov	r3, fp
 3517 0260 FFF7FEFF 		bl	__aeabi_uldivmod
 3518              	.LVL393:
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3519              		.loc 1 1077 5 discriminator 3 view .LVU1101
 3520 0264 CDE90067 		strd	r6, [sp]
1078:src/display.c **** 			}
 3521              		.loc 1 1078 12 is_stmt 0 discriminator 3 view .LVU1102
 3522 0268 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
 3523 026c 08F8013B 		strb	r3, [r8], #1
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3524              		.loc 1 1077 7 discriminator 3 view .LVU1103
 3525 0270 0F46     		mov	r7, r1
 3526              	.LVL394:
1078:src/display.c **** 			}
 3527              		.loc 1 1078 5 is_stmt 1 discriminator 3 view .LVU1104
 3528              	.LBE261:
1075:src/display.c **** 				const int r = v % b;
 3529              		.loc 1 1075 22 discriminator 3 view .LVU1105
1075:src/display.c **** 				const int r = v % b;
 3530              		.loc 1 1075 4 is_stmt 0 discriminator 3 view .LVU1106
 3531 0272 DDE90012 		ldrd	r1, [sp]
 3532              	.LVL395:
1075:src/display.c **** 				const int r = v % b;
 3533              		.loc 1 1075 4 discriminator 3 view .LVU1107
 3534 0276 5A45     		cmp	r2, fp
 3535 0278 08BF     		it	eq
 3536 027a 5145     		cmpeq	r1, r10
 3537 027c 2346     		mov	r3, r4
 3538              	.LVL396:
 3539              	.LBB262:
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3540              		.loc 1 1077 7 discriminator 3 view .LVU1108
 3541 027e 0646     		mov	r6, r0
 3542              	.LBE262:
1075:src/display.c **** 				const int r = v % b;
 3543              		.loc 1 1075 23 discriminator 3 view .LVU1109
 3544 0280 04F10104 		add	r4, r4, #1
 3545              	.LVL397:
1075:src/display.c **** 				const int r = v % b;
 3546              		.loc 1 1075 14 is_stmt 1 discriminator 3 view .LVU1110
1075:src/display.c **** 				const int r = v % b;
 3547              		.loc 1 1075 4 is_stmt 0 discriminator 3 view .LVU1111
 3548 0284 E8D2     		bcs	.L291
 3549 0286 DDF80CA0 		ldr	r10, [sp, #12]
 3550 028a 9946     		mov	r9, r3
 3551 028c 21E7     		b	.L292
ARM GAS  /tmp/ccZMW3We.s 			page 128


 3552              	.LVL398:
 3553              	.L284:
1069:src/display.c **** 			if (sign)
 3554              		.loc 1 1069 3 is_stmt 1 view .LVU1112
1069:src/display.c **** 			if (sign)
 3555              		.loc 1 1069 6 is_stmt 0 view .LVU1113
 3556 028e 56EA0703 		orrs	r3, r6, r7
 3557 0292 D6D1     		bne	.L285
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3558              		.loc 1 1070 4 is_stmt 1 view .LVU1114
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3559              		.loc 1 1070 7 is_stmt 0 view .LVU1115
 3560 0294 049B     		ldr	r3, [sp, #16]
 3561 0296 002B     		cmp	r3, #0
 3562 0298 43D1     		bne	.L286
 3563              	.LVL399:
 3564              	.L287:
1072:src/display.c **** 			return;
 3565              		.loc 1 1072 4 is_stmt 1 view .LVU1116
 3566              	.LBB263:
 3567              	.LBI263:
 395:src/display.c **** 	if (res) *res++ = ch;
 3568              		.loc 1 395 14 view .LVU1117
 3569              	.LBB264:
 396:src/display.c **** 	else	set_dig(base, ch);
 3570              		.loc 1 396 2 view .LVU1118
 396:src/display.c **** 	else	set_dig(base, ch);
 3571              		.loc 1 396 5 is_stmt 0 view .LVU1119
 3572 029a BAF1000F 		cmp	r10, #0
 3573 029e 47D0     		beq	.L289
 3574              	.LVL400:
 3575              	.L288:
 396:src/display.c **** 	else	set_dig(base, ch);
 3576              		.loc 1 396 11 is_stmt 1 view .LVU1120
 396:src/display.c **** 	else	set_dig(base, ch);
 3577              		.loc 1 396 18 is_stmt 0 view .LVU1121
 3578 02a0 3023     		movs	r3, #48
 3579 02a2 8AF80030 		strb	r3, [r10]
 3580              	.LBE264:
 3581              	.LBE263:
1164:src/display.c **** 
 3582              		.loc 1 1164 1 view .LVU1122
 3583 02a6 17B0     		add	sp, sp, #92
 3584              		.cfi_remember_state
 3585              		.cfi_def_cfa_offset 36
 3586              		@ sp needed
 3587 02a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3588              	.LVL401:
 3589              	.L280:
 3590              		.cfi_restore_state
1057:src/display.c **** 	}
 3591              		.loc 1 1057 11 is_stmt 1 view .LVU1123
1057:src/display.c **** 	}
 3592              		.loc 1 1057 15 is_stmt 0 view .LVU1124
 3593 02ac FFF7FEFF 		bl	int_base
 3594              	.LVL402:
1057:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 129


 3595              		.loc 1 1057 15 view .LVU1125
 3596 02b0 0546     		mov	r5, r0
 3597              	.LVL403:
1057:src/display.c **** 	}
 3598              		.loc 1 1057 27 is_stmt 1 view .LVU1126
1060:src/display.c **** 		IntMaxWindow = 0;
 3599              		.loc 1 1060 2 view .LVU1127
1060:src/display.c **** 		IntMaxWindow = 0;
 3600              		.loc 1 1060 5 is_stmt 0 view .LVU1128
 3601 02b2 BAF1000F 		cmp	r10, #0
 3602 02b6 7FF4BCAE 		bne	.L282
 3603              	.LVL404:
 3604              	.L359:
1061:src/display.c **** 		carry_overflow();
 3605              		.loc 1 1061 3 is_stmt 1 view .LVU1129
1061:src/display.c **** 		carry_overflow();
 3606              		.loc 1 1061 16 is_stmt 0 view .LVU1130
 3607 02ba 264B     		ldr	r3, .L368+12
 3608 02bc C3F800A0 		str	r10, [r3]
1062:src/display.c **** 	}
 3609              		.loc 1 1062 3 is_stmt 1 view .LVU1131
 3610 02c0 FFF7FEFF 		bl	carry_overflow
 3611              	.LVL405:
 3612 02c4 B5E6     		b	.L282
 3613              	.LVL406:
 3614              	.L361:
 3615              	.LBB266:
1085:src/display.c **** 				vs |= ~mask;
 3616              		.loc 1 1085 36 is_stmt 0 discriminator 1 view .LVU1132
 3617 02c6 0BF1FF31 		add	r1, fp, #-1
1085:src/display.c **** 				vs |= ~mask;
 3618              		.loc 1 1085 16 discriminator 1 view .LVU1133
 3619 02ca CBF12106 		rsb	r6, fp, #33
 3620 02ce C840     		lsrs	r0, r0, r1
 3621 02d0 09FA06F6 		lsl	r6, r9, r6
 3622 02d4 2039     		subs	r1, r1, #32
 3623 02d6 40EA0600 		orr	r0, r0, r6
 3624 02da 5CBF     		itt	pl
 3625 02dc 49FA01F1 		asrpl	r1, r9, r1
 3626 02e0 0843     		orrpl	r0, r0, r1
 3627 02e2 00F00106 		and	r6, r0, #1
 3628 02e6 0027     		movs	r7, #0
 3629 02e8 56EA0701 		orrs	r1, r6, r7
 3630 02ec 08D0     		beq	.L294
1086:src/display.c **** 		}
 3631              		.loc 1 1086 5 is_stmt 1 view .LVU1134
1086:src/display.c **** 		}
 3632              		.loc 1 1086 8 is_stmt 0 view .LVU1135
 3633 02ee 5042     		rsbs	r0, r2, #0
 3634 02f0 63EB4301 		sbc	r1, r3, r3, lsl #1
 3635 02f4 40EA0802 		orr	r2, r0, r8
 3636              	.LVL407:
1086:src/display.c **** 		}
 3637              		.loc 1 1086 8 view .LVU1136
 3638 02f8 41EA0903 		orr	r3, r1, r9
 3639              	.LVL408:
1086:src/display.c **** 		}
ARM GAS  /tmp/ccZMW3We.s 			page 130


 3640              		.loc 1 1086 8 view .LVU1137
 3641 02fc 9046     		mov	r8, r2
 3642              	.LVL409:
1086:src/display.c **** 		}
 3643              		.loc 1 1086 8 view .LVU1138
 3644 02fe 9946     		mov	r9, r3
 3645              	.L294:
1086:src/display.c **** 		}
 3646              		.loc 1 1086 8 view .LVU1139
 3647              	.LBE266:
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3648              		.loc 1 1089 3 is_stmt 1 view .LVU1140
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3649              		.loc 1 1089 7 is_stmt 0 view .LVU1141
 3650 0300 134B     		ldr	r3, .L368+8
 3651 0302 1B68     		ldr	r3, [r3]
 3652 0304 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3653              		.loc 1 1089 6 view .LVU1142
 3654 0308 9B07     		lsls	r3, r3, #30
 3655 030a 7FF5FCAE 		bpl	.L322
 3656 030e 0223     		movs	r3, #2
 3657 0310 C4E6     		b	.L299
 3658              	.LVL410:
 3659              	.L363:
 3660              	.LBB267:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3661              		.loc 1 1135 32 view .LVU1143
 3662 0312 0827     		movs	r7, #8
1137:src/display.c **** 		set_separator_decimal_modes();
 3663              		.loc 1 1137 5 view .LVU1144
 3664 0314 0425     		movs	r5, #4
 3665 0316 2CE7     		b	.L306
 3666              	.LVL411:
 3667              	.L367:
1137:src/display.c **** 		set_separator_decimal_modes();
 3668              		.loc 1 1137 5 view .LVU1145
 3669              	.LBE267:
1068:src/display.c **** 		if (v == 0) {
 3670              		.loc 1 1068 4 is_stmt 1 view .LVU1146
1068:src/display.c **** 		if (v == 0) {
 3671              		.loc 1 1068 6 is_stmt 0 view .LVU1147
 3672 0318 4646     		mov	r6, r8
 3673              	.LVL412:
1068:src/display.c **** 		if (v == 0) {
 3674              		.loc 1 1068 6 view .LVU1148
 3675 031a 4F46     		mov	r7, r9
 3676              	.LVL413:
1069:src/display.c **** 			if (sign)
 3677              		.loc 1 1069 3 is_stmt 1 view .LVU1149
1069:src/display.c **** 			if (sign)
 3678              		.loc 1 1069 6 is_stmt 0 view .LVU1150
 3679 031c 56EA0703 		orrs	r3, r6, r7
 3680 0320 8FD1     		bne	.L285
 3681              	.LVL414:
 3682              	.L286:
1071:src/display.c **** 			set_dig_s(dig, '0', res);
ARM GAS  /tmp/ccZMW3We.s 			page 131


 3683              		.loc 1 1071 5 is_stmt 1 view .LVU1151
 3684              	.LBB268:
 3685              	.LBI268:
 395:src/display.c **** 	if (res) *res++ = ch;
 3686              		.loc 1 395 14 view .LVU1152
 3687              	.LBB269:
 396:src/display.c **** 	else	set_dig(base, ch);
 3688              		.loc 1 396 2 view .LVU1153
 396:src/display.c **** 	else	set_dig(base, ch);
 3689              		.loc 1 396 5 is_stmt 0 view .LVU1154
 3690 0322 BAF1000F 		cmp	r10, #0
 3691 0326 BBD1     		bne	.L288
 397:src/display.c **** 	return res;
 3692              		.loc 1 397 7 is_stmt 1 view .LVU1155
 3693 0328 2D21     		movs	r1, #45
 3694 032a 5A20     		movs	r0, #90
 3695 032c FFF7FEFF 		bl	set_dig
 3696              	.LVL415:
 397:src/display.c **** 	return res;
 3697              		.loc 1 397 7 is_stmt 0 view .LVU1156
 3698              	.LBE269:
 3699              	.LBE268:
1072:src/display.c **** 			return;
 3700              		.loc 1 1072 4 is_stmt 1 view .LVU1157
 3701              	.LBB270:
 395:src/display.c **** 	if (res) *res++ = ch;
 3702              		.loc 1 395 14 view .LVU1158
 3703              	.LBB265:
 396:src/display.c **** 	else	set_dig(base, ch);
 3704              		.loc 1 396 2 view .LVU1159
 3705              	.L289:
 397:src/display.c **** 	return res;
 3706              		.loc 1 397 7 view .LVU1160
 3707 0330 3021     		movs	r1, #48
 3708 0332 6320     		movs	r0, #99
 3709 0334 FFF7FEFF 		bl	set_dig
 3710              	.LVL416:
 3711 0338 E2E6     		b	.L279
 3712              	.LVL417:
 3713              	.L308:
 397:src/display.c **** 	return res;
 3714              		.loc 1 397 7 is_stmt 0 view .LVU1161
 3715              	.LBE265:
 3716              	.LBE270:
 3717              	.LBB271:
1142:src/display.c **** 		buf[i] = '\0';
 3718              		.loc 1 1142 4 is_stmt 1 view .LVU1162
1142:src/display.c **** 		buf[i] = '\0';
 3719              		.loc 1 1142 18 is_stmt 0 view .LVU1163
 3720 033a 034B     		ldr	r3, .L368
 3721 033c 6FF3C502 		bfc	r2, #3, #3
 3722 0340 1A75     		strb	r2, [r3, #20]
 3723 0342 4FF00008 		mov	r8, #0
 3724 0346 23E7     		b	.L309
 3725              	.L369:
 3726              		.align	2
 3727              	.L368:
ARM GAS  /tmp/ccZMW3We.s 			page 132


 3728 0348 00000000 		.word	StateWhileOn
 3729 034c 00000000 		.word	CSWTCH.306
 3730 0350 00000000 		.word	main_ram
 3731 0354 00000000 		.word	IntMaxWindow
 3732 0358 00000000 		.word	.LANCHOR0
 3733 035c 00000000 		.word	.LANCHOR12
 3734              	.LVL418:
 3735              	.L310:
1149:src/display.c **** 			int ch = buf[j++];
 3736              		.loc 1 1149 13 is_stmt 1 discriminator 1 view .LVU1164
1149:src/display.c **** 			int ch = buf[j++];
 3737              		.loc 1 1149 3 is_stmt 0 discriminator 1 view .LVU1165
 3738 0360 03F1FF39 		add	r9, r3, #-1
 3739              	.LVL419:
1149:src/display.c **** 			int ch = buf[j++];
 3740              		.loc 1 1149 3 discriminator 1 view .LVU1166
 3741 0364 002B     		cmp	r3, #0
 3742 0366 7FF427AF 		bne	.L312
1158:src/display.c **** 			if (dig >= 0)
 3743              		.loc 1 1158 3 is_stmt 1 view .LVU1167
1158:src/display.c **** 			if (dig >= 0)
 3744              		.loc 1 1158 6 is_stmt 0 view .LVU1168
 3745 036a 049B     		ldr	r3, [sp, #16]
 3746 036c 002B     		cmp	r3, #0
 3747 036e 3FF4C7AE 		beq	.L279
 3748 0372 4FF0630B 		mov	fp, #99
 3749 0376 4FE7     		b	.L320
 3750              	.LVL420:
 3751              	.L364:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3752              		.loc 1 1135 32 view .LVU1169
 3753 0378 0C27     		movs	r7, #12
 3754 037a FAE6     		b	.L306
 3755              	.LVL421:
 3756              	.L366:
1161:src/display.c **** 		}
 3757              		.loc 1 1161 9 is_stmt 1 view .LVU1170
 3758              	.LBB259:
 3759              	.LBI259:
 284:src/display.c **** {
 3760              		.loc 1 284 13 view .LVU1171
 3761              	.LBB260:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3762              		.loc 1 286 2 view .LVU1172
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3763              		.loc 1 286 24 is_stmt 0 view .LVU1173
 3764 037c 044B     		ldr	r3, .L370
 3765 037e 2D22     		movs	r2, #45
 287:src/display.c **** }
 3766              		.loc 1 287 2 view .LVU1174
 3767 0380 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3768              		.loc 1 286 24 view .LVU1175
 3769 0382 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 3770              		.loc 1 287 2 is_stmt 1 view .LVU1176
 3771 0384 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccZMW3We.s 			page 133


 3772              	.LVL422:
 288:src/display.c **** 
 3773              		.loc 1 288 1 is_stmt 0 view .LVU1177
 3774 0388 BAE6     		b	.L279
 3775              	.LVL423:
 3776              	.L323:
 288:src/display.c **** 
 3777              		.loc 1 288 1 view .LVU1178
 3778              	.LBE260:
 3779              	.LBE259:
 3780              	.LBE271:
 3781              	.LBB272:
1106:src/display.c **** 				const int r = v % b;
 3782              		.loc 1 1106 4 view .LVU1179
 3783 038a 4FF0FF39 		mov	r9, #-1
 3784 038e A0E6     		b	.L292
 3785              	.L371:
 3786              		.align	2
 3787              	.L370:
 3788 0390 00000000 		.word	LastDisplayedNumber
 3789              	.LBE272:
 3790              		.cfi_endproc
 3791              	.LFE18:
 3793              		.section	.text.set_annunciators,"ax",%progbits
 3794              		.align	1
 3795              		.p2align 2,,3
 3796              		.syntax unified
 3797              		.thumb
 3798              		.thumb_func
 3799              		.fpu fpv4-sp-d16
 3801              	set_annunciators:
 3802              	.LFB32:
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3803              		.loc 1 2164 1 is_stmt 1 view -0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 0
 3806              		@ frame_needed = 0, uses_anonymous_args = 0
2165:src/display.c **** 
 3807              		.loc 1 2165 2 view .LVU1181
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3808              		.loc 1 2164 1 is_stmt 0 view .LVU1182
 3809 0000 70B5     		push	{r4, r5, r6, lr}
 3810              		.cfi_def_cfa_offset 16
 3811              		.cfi_offset 4, -16
 3812              		.cfi_offset 5, -12
 3813              		.cfi_offset 6, -8
 3814              		.cfi_offset 14, -4
2174:src/display.c **** #endif
 3815              		.loc 1 2174 11 view .LVU1183
 3816 0002 344E     		ldr	r6, .L398
2165:src/display.c **** 
 3817              		.loc 1 2165 29 view .LVU1184
 3818 0004 FFF7FEFF 		bl	get_trig_mode
 3819              	.LVL424:
2174:src/display.c **** #endif
 3820              		.loc 1 2174 11 view .LVU1185
 3821 0008 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccZMW3We.s 			page 134


2174:src/display.c **** #endif
 3822              		.loc 1 2174 2 view .LVU1186
 3823 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3824 000e 012B     		cmp	r3, #1
2165:src/display.c **** 
 3825              		.loc 1 2165 29 view .LVU1187
 3826 0010 0446     		mov	r4, r0
 3827              	.LVL425:
2174:src/display.c **** #endif
 3828              		.loc 1 2174 2 is_stmt 1 view .LVU1188
 3829              	.LBB291:
 3830              	.LBB292:
 328:src/display.c **** 	else	clr_dot(n);
 3831              		.loc 1 328 10 is_stmt 0 view .LVU1189
 3832 0012 4FF08800 		mov	r0, #136
 3833              	.LBE292:
 3834              	.LBE291:
2174:src/display.c **** #endif
 3835              		.loc 1 2174 2 view .LVU1190
 3836 0016 03D8     		bhi	.L373
2174:src/display.c **** #endif
 3837              		.loc 1 2174 30 discriminator 1 view .LVU1191
 3838 0018 2F4B     		ldr	r3, .L398+4
2174:src/display.c **** #endif
 3839              		.loc 1 2174 2 discriminator 1 view .LVU1192
 3840 001a 1B68     		ldr	r3, [r3]
 3841 001c 002B     		cmp	r3, #0
 3842 001e 56D0     		beq	.L394
 3843              	.L373:
 3844              	.LVL426:
 3845              	.LBB295:
 3846              	.LBI291:
 327:src/display.c **** 	if (on)	set_dot(n);
 3847              		.loc 1 327 6 is_stmt 1 view .LVU1193
 3848              	.LBB293:
 328:src/display.c **** 	else	clr_dot(n);
 3849              		.loc 1 328 2 view .LVU1194
 329:src/display.c **** }
 3850              		.loc 1 329 7 view .LVU1195
 3851 0020 FFF7FEFF 		bl	clr_dot
 3852              	.LVL427:
 3853              	.L374:
 329:src/display.c **** }
 3854              		.loc 1 329 7 is_stmt 0 view .LVU1196
 3855              	.LBE293:
 3856              	.LBE295:
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3857              		.loc 1 2176 2 is_stmt 1 view .LVU1197
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3858              		.loc 1 2176 19 is_stmt 0 view .LVU1198
 3859 0024 2D4D     		ldr	r5, .L398+8
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3860              		.loc 1 2176 2 view .LVU1199
 3861 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3862              	.LBB296:
 3863              	.LBB297:
 328:src/display.c **** 	else	clr_dot(n);
ARM GAS  /tmp/ccZMW3We.s 			page 135


 3864              		.loc 1 328 10 view .LVU1200
 3865 0028 8620     		movs	r0, #134
 3866              	.LBE297:
 3867              	.LBE296:
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3868              		.loc 1 2176 2 view .LVU1201
 3869 002a 23B9     		cbnz	r3, .L375
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3870              		.loc 1 2176 47 discriminator 2 view .LVU1202
 3871 002c 6A69     		ldr	r2, [r5, #20]
 3872 002e 2C4B     		ldr	r3, .L398+12
 3873 0030 1340     		ands	r3, r3, r2
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3874              		.loc 1 2176 2 discriminator 2 view .LVU1203
 3875 0032 002B     		cmp	r3, #0
 3876 0034 48D0     		beq	.L395
 3877              	.L375:
 3878              	.LBB300:
 3879              	.LBB298:
 328:src/display.c **** 	else	clr_dot(n);
 3880              		.loc 1 328 10 is_stmt 1 view .LVU1204
 3881 0036 FFF7FEFF 		bl	set_dot
 3882              	.LVL428:
 3883              	.L376:
 3884              	.LBE298:
 3885              	.LBE300:
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3886              		.loc 1 2177 2 view .LVU1205
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3887              		.loc 1 2177 31 is_stmt 0 view .LVU1206
 3888 003a 2A4A     		ldr	r2, .L398+16
 3889 003c 6B69     		ldr	r3, [r5, #20]
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3890              		.loc 1 2177 2 view .LVU1207
 3891 003e 1A42     		tst	r2, r3
 3892              	.LBB301:
 3893              	.LBB302:
 328:src/display.c **** 	else	clr_dot(n);
 3894              		.loc 1 328 10 view .LVU1208
 3895 0040 4FF08500 		mov	r0, #133
 3896              	.LBE302:
 3897              	.LBE301:
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3898              		.loc 1 2177 2 view .LVU1209
 3899 0044 02D0     		beq	.L377
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3900              		.loc 1 2177 48 discriminator 1 view .LVU1210
 3901 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3902              		.loc 1 2177 2 discriminator 1 view .LVU1211
 3903 0048 DA06     		lsls	r2, r3, #27
 3904 004a 3AD4     		bmi	.L378
 3905              	.L377:
 3906              	.LVL429:
 3907              	.LBB305:
 3908              	.LBI301:
 327:src/display.c **** 	if (on)	set_dot(n);
ARM GAS  /tmp/ccZMW3We.s 			page 136


 3909              		.loc 1 327 6 is_stmt 1 view .LVU1212
 3910              	.LBB303:
 328:src/display.c **** 	else	clr_dot(n);
 3911              		.loc 1 328 2 view .LVU1213
 329:src/display.c **** }
 3912              		.loc 1 329 7 view .LVU1214
 3913 004c FFF7FEFF 		bl	clr_dot
 3914              	.LVL430:
 3915              	.L379:
 329:src/display.c **** }
 3916              		.loc 1 329 7 is_stmt 0 view .LVU1215
 3917              	.LBE303:
 3918              	.LBE305:
2178:src/display.c **** 	set_IO_annunciator();
 3919              		.loc 1 2178 2 is_stmt 1 view .LVU1216
 3920 0050 6820     		movs	r0, #104
 3921 0052 FFF7FEFF 		bl	get_user_flag
 3922              	.LVL431:
 3923              	.LBB306:
 3924              	.LBI306:
 327:src/display.c **** 	if (on)	set_dot(n);
 3925              		.loc 1 327 6 view .LVU1217
 3926              	.LBB307:
 328:src/display.c **** 	else	clr_dot(n);
 3927              		.loc 1 328 2 view .LVU1218
 328:src/display.c **** 	else	clr_dot(n);
 3928              		.loc 1 328 5 is_stmt 0 view .LVU1219
 3929 0056 28B3     		cbz	r0, .L380
 328:src/display.c **** 	else	clr_dot(n);
 3930              		.loc 1 328 10 is_stmt 1 view .LVU1220
 3931              	.LBE307:
 3932              	.LBE306:
 3933              	.LBB311:
 3934              	.LBB312:
2206:src/display.c **** 		dot(LIT_EQ, on);
 3935              		.loc 1 2206 9 is_stmt 0 view .LVU1221
 3936 0058 234D     		ldr	r5, .L398+20
 3937              	.LBE312:
 3938              	.LBE311:
 3939              	.LBB320:
 3940              	.LBB308:
 328:src/display.c **** 	else	clr_dot(n);
 3941              		.loc 1 328 10 view .LVU1222
 3942 005a 8320     		movs	r0, #131
 3943              	.LVL432:
 328:src/display.c **** 	else	clr_dot(n);
 3944              		.loc 1 328 10 view .LVU1223
 3945 005c FFF7FEFF 		bl	set_dot
 3946              	.LVL433:
 328:src/display.c **** 	else	clr_dot(n);
 3947              		.loc 1 328 10 view .LVU1224
 3948              	.LBE308:
 3949              	.LBE320:
2179:src/display.c **** 
 3950              		.loc 1 2179 2 is_stmt 1 view .LVU1225
 3951              	.LBB321:
 3952              	.LBI311:
ARM GAS  /tmp/ccZMW3We.s 			page 137


2191:src/display.c **** #ifndef DM42
 3953              		.loc 1 2191 6 view .LVU1226
 3954              	.LBB317:
2196:src/display.c **** #endif
 3955              		.loc 1 2196 5 view .LVU1227
2206:src/display.c **** 		dot(LIT_EQ, on);
 3956              		.loc 1 2206 2 view .LVU1228
2206:src/display.c **** 		dot(LIT_EQ, on);
 3957              		.loc 1 2206 5 is_stmt 0 view .LVU1229
 3958 0060 2B68     		ldr	r3, [r5]
 3959 0062 33BB     		cbnz	r3, .L396
 3960              	.L382:
 3961              	.LBE317:
 3962              	.LBE321:
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3963              		.loc 1 2183 2 is_stmt 1 view .LVU1230
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3964              		.loc 1 2183 11 is_stmt 0 view .LVU1231
 3965 0064 3368     		ldr	r3, [r6]
 3966 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3967 006a 03F00103 		and	r3, r3, #1
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3968              		.loc 1 2183 2 view .LVU1232
 3969 006e 2343     		orrs	r3, r3, r4
 3970 0070 13F0FF0F 		tst	r3, #255
 3971              	.LBB322:
 3972              	.LBB323:
 328:src/display.c **** 	else	clr_dot(n);
 3973              		.loc 1 328 10 view .LVU1233
 3974 0074 4FF08C00 		mov	r0, #140
 3975              	.LBE323:
 3976              	.LBE322:
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3977              		.loc 1 2183 2 view .LVU1234
 3978 0078 06D1     		bne	.L397
 3979              	.LVL434:
 3980              	.LBB326:
 3981              	.LBI322:
 327:src/display.c **** 	if (on)	set_dot(n);
 3982              		.loc 1 327 6 is_stmt 1 view .LVU1235
 3983              	.LBB324:
 328:src/display.c **** 	else	clr_dot(n);
 3984              		.loc 1 328 2 view .LVU1236
 328:src/display.c **** 	else	clr_dot(n);
 3985              		.loc 1 328 10 view .LVU1237
 3986 007a FFF7FEFF 		bl	set_dot
 3987              	.LVL435:
 328:src/display.c **** 	else	clr_dot(n);
 3988              		.loc 1 328 10 is_stmt 0 view .LVU1238
 3989              	.LBE324:
 3990              	.LBE326:
2184:src/display.c **** }
 3991              		.loc 1 2184 2 is_stmt 1 view .LVU1239
 3992              	.L385:
 3993              	.LBB327:
 3994              	.LBI327:
 327:src/display.c **** 	if (on)	set_dot(n);
ARM GAS  /tmp/ccZMW3We.s 			page 138


 3995              		.loc 1 327 6 view .LVU1240
 3996              	.LBB328:
 328:src/display.c **** 	else	clr_dot(n);
 3997              		.loc 1 328 2 view .LVU1241
 329:src/display.c **** }
 3998              		.loc 1 329 7 view .LVU1242
 3999              	.LBE328:
 4000              	.LBE327:
2185:src/display.c **** 
 4001              		.loc 1 2185 1 is_stmt 0 view .LVU1243
 4002 007e BDE87040 		pop	{r4, r5, r6, lr}
 4003              		.cfi_remember_state
 4004              		.cfi_restore 14
 4005              		.cfi_restore 6
 4006              		.cfi_restore 5
 4007              		.cfi_restore 4
 4008              		.cfi_def_cfa_offset 0
 4009              	.LVL436:
 4010              	.LBB332:
 4011              	.LBB329:
 329:src/display.c **** }
 4012              		.loc 1 329 7 view .LVU1244
 4013 0082 8B20     		movs	r0, #139
 4014 0084 FFF7FEBF 		b	clr_dot
 4015              	.LVL437:
 4016              	.L397:
 4017              		.cfi_restore_state
 329:src/display.c **** }
 4018              		.loc 1 329 7 view .LVU1245
 4019              	.LBE329:
 4020              	.LBE332:
 4021              	.LBB333:
 327:src/display.c **** 	if (on)	set_dot(n);
 4022              		.loc 1 327 6 is_stmt 1 view .LVU1246
 4023              	.LBB325:
 328:src/display.c **** 	else	clr_dot(n);
 4024              		.loc 1 328 2 view .LVU1247
 329:src/display.c **** }
 4025              		.loc 1 329 7 view .LVU1248
 4026 0088 FFF7FEFF 		bl	clr_dot
 4027              	.LVL438:
 329:src/display.c **** }
 4028              		.loc 1 329 7 is_stmt 0 view .LVU1249
 4029              	.LBE325:
 4030              	.LBE333:
2184:src/display.c **** }
 4031              		.loc 1 2184 2 is_stmt 1 view .LVU1250
2184:src/display.c **** }
 4032              		.loc 1 2184 11 is_stmt 0 view .LVU1251
 4033 008c 3368     		ldr	r3, [r6]
 4034 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2184:src/display.c **** }
 4035              		.loc 1 2184 2 view .LVU1252
 4036 0092 DB07     		lsls	r3, r3, #31
 4037 0094 F3D4     		bmi	.L385
2184:src/display.c **** }
 4038              		.loc 1 2184 2 discriminator 1 view .LVU1253
ARM GAS  /tmp/ccZMW3We.s 			page 139


 4039 0096 012C     		cmp	r4, #1
 4040 0098 F1D1     		bne	.L385
 4041              	.LVL439:
 4042              	.LBB334:
 327:src/display.c **** 	if (on)	set_dot(n);
 4043              		.loc 1 327 6 is_stmt 1 view .LVU1254
 4044              	.LBB330:
 328:src/display.c **** 	else	clr_dot(n);
 4045              		.loc 1 328 2 view .LVU1255
 328:src/display.c **** 	else	clr_dot(n);
 4046              		.loc 1 328 10 view .LVU1256
 4047              	.LBE330:
 4048              	.LBE334:
2185:src/display.c **** 
 4049              		.loc 1 2185 1 is_stmt 0 view .LVU1257
 4050 009a BDE87040 		pop	{r4, r5, r6, lr}
 4051              		.cfi_remember_state
 4052              		.cfi_restore 14
 4053              		.cfi_restore 6
 4054              		.cfi_restore 5
 4055              		.cfi_restore 4
 4056              		.cfi_def_cfa_offset 0
 4057              	.LVL440:
 4058              	.LBB335:
 4059              	.LBB331:
 328:src/display.c **** 	else	clr_dot(n);
 4060              		.loc 1 328 10 view .LVU1258
 4061 009e 8B20     		movs	r0, #139
 4062 00a0 FFF7FEBF 		b	set_dot
 4063              	.LVL441:
 4064              	.L380:
 4065              		.cfi_restore_state
 328:src/display.c **** 	else	clr_dot(n);
 4066              		.loc 1 328 10 view .LVU1259
 4067              	.LBE331:
 4068              	.LBE335:
 4069              	.LBB336:
 4070              	.LBB309:
 329:src/display.c **** }
 4071              		.loc 1 329 7 is_stmt 1 view .LVU1260
 4072              	.LBE309:
 4073              	.LBE336:
 4074              	.LBB337:
 4075              	.LBB318:
2206:src/display.c **** 		dot(LIT_EQ, on);
 4076              		.loc 1 2206 9 is_stmt 0 view .LVU1261
 4077 00a4 104D     		ldr	r5, .L398+20
 4078              	.LBE318:
 4079              	.LBE337:
 4080              	.LBB338:
 4081              	.LBB310:
 329:src/display.c **** }
 4082              		.loc 1 329 7 view .LVU1262
 4083 00a6 8320     		movs	r0, #131
 4084              	.LVL442:
 329:src/display.c **** }
 4085              		.loc 1 329 7 view .LVU1263
ARM GAS  /tmp/ccZMW3We.s 			page 140


 4086 00a8 FFF7FEFF 		bl	clr_dot
 4087              	.LVL443:
 329:src/display.c **** }
 4088              		.loc 1 329 7 view .LVU1264
 4089              	.LBE310:
 4090              	.LBE338:
2179:src/display.c **** 
 4091              		.loc 1 2179 2 is_stmt 1 view .LVU1265
 4092              	.LBB339:
2191:src/display.c **** #ifndef DM42
 4093              		.loc 1 2191 6 view .LVU1266
 4094              	.LBB319:
2196:src/display.c **** #endif
 4095              		.loc 1 2196 5 view .LVU1267
2206:src/display.c **** 		dot(LIT_EQ, on);
 4096              		.loc 1 2206 2 view .LVU1268
2206:src/display.c **** 		dot(LIT_EQ, on);
 4097              		.loc 1 2206 5 is_stmt 0 view .LVU1269
 4098 00ac 2B68     		ldr	r3, [r5]
 4099 00ae 002B     		cmp	r3, #0
 4100 00b0 D8D0     		beq	.L382
 4101              	.L396:
 4102              	.LBB313:
 4103              	.LBI313:
2191:src/display.c **** #ifndef DM42
 4104              		.loc 1 2191 6 is_stmt 1 view .LVU1270
 4105              	.LBB314:
2207:src/display.c **** 		IoAnnunciator = on;
 4106              		.loc 1 2207 3 view .LVU1271
 4107              	.LVL444:
 4108              	.LBB315:
 4109              	.LBI315:
 327:src/display.c **** 	if (on)	set_dot(n);
 4110              		.loc 1 327 6 view .LVU1272
 4111              	.LBB316:
 328:src/display.c **** 	else	clr_dot(n);
 4112              		.loc 1 328 2 view .LVU1273
 329:src/display.c **** }
 4113              		.loc 1 329 7 view .LVU1274
 4114 00b2 8420     		movs	r0, #132
 4115 00b4 FFF7FEFF 		bl	clr_dot
 4116              	.LVL445:
 329:src/display.c **** }
 4117              		.loc 1 329 7 is_stmt 0 view .LVU1275
 4118              	.LBE316:
 4119              	.LBE315:
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4120              		.loc 1 2208 3 is_stmt 1 view .LVU1276
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4121              		.loc 1 2208 17 is_stmt 0 view .LVU1277
 4122 00b8 0023     		movs	r3, #0
 4123 00ba 2B60     		str	r3, [r5]
2209:src/display.c **** 	}
 4124              		.loc 1 2209 3 is_stmt 1 view .LVU1278
 4125 00bc FFF7FEFF 		bl	finish_display
 4126              	.LVL446:
2211:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 141


 4127              		.loc 1 2211 1 is_stmt 0 view .LVU1279
 4128 00c0 D0E7     		b	.L382
 4129              	.LVL447:
 4130              	.L378:
2211:src/display.c **** 
 4131              		.loc 1 2211 1 view .LVU1280
 4132              	.LBE314:
 4133              	.LBE313:
 4134              	.LBE319:
 4135              	.LBE339:
 4136              	.LBB340:
 327:src/display.c **** 	if (on)	set_dot(n);
 4137              		.loc 1 327 6 is_stmt 1 view .LVU1281
 4138              	.LBB304:
 328:src/display.c **** 	else	clr_dot(n);
 4139              		.loc 1 328 2 view .LVU1282
 328:src/display.c **** 	else	clr_dot(n);
 4140              		.loc 1 328 10 view .LVU1283
 4141 00c2 FFF7FEFF 		bl	set_dot
 4142              	.LVL448:
 4143 00c6 C3E7     		b	.L379
 4144              	.LVL449:
 4145              	.L395:
 328:src/display.c **** 	else	clr_dot(n);
 4146              		.loc 1 328 10 is_stmt 0 view .LVU1284
 4147              	.LBE304:
 4148              	.LBE340:
 4149              	.LBB341:
 4150              	.LBI296:
 327:src/display.c **** 	if (on)	set_dot(n);
 4151              		.loc 1 327 6 is_stmt 1 view .LVU1285
 4152              	.LBB299:
 328:src/display.c **** 	else	clr_dot(n);
 4153              		.loc 1 328 2 view .LVU1286
 329:src/display.c **** }
 4154              		.loc 1 329 7 view .LVU1287
 4155 00c8 FFF7FEFF 		bl	clr_dot
 4156              	.LVL450:
 4157 00cc B5E7     		b	.L376
 4158              	.LVL451:
 4159              	.L394:
 329:src/display.c **** }
 4160              		.loc 1 329 7 is_stmt 0 view .LVU1288
 4161              	.LBE299:
 4162              	.LBE341:
 4163              	.LBB342:
 327:src/display.c **** 	if (on)	set_dot(n);
 4164              		.loc 1 327 6 is_stmt 1 view .LVU1289
 4165              	.LBB294:
 328:src/display.c **** 	else	clr_dot(n);
 4166              		.loc 1 328 2 view .LVU1290
 328:src/display.c **** 	else	clr_dot(n);
 4167              		.loc 1 328 10 view .LVU1291
 4168 00ce FFF7FEFF 		bl	set_dot
 4169              	.LVL452:
 4170 00d2 A7E7     		b	.L374
 4171              	.L399:
ARM GAS  /tmp/ccZMW3We.s 			page 142


 4172              		.align	2
 4173              	.L398:
 4174 00d4 00000000 		.word	main_ram
 4175 00d8 00000000 		.word	Running
 4176 00dc 00000000 		.word	StateWhileOn
 4177 00e0 07000800 		.word	524295
 4178 00e4 00080800 		.word	526336
 4179 00e8 00000000 		.word	IoAnnunciator
 4180              	.LBE294:
 4181              	.LBE342:
 4182              		.cfi_endproc
 4183              	.LFE32:
 4185              		.section	.text.getdig,"ax",%progbits
 4186              		.align	1
 4187              		.p2align 2,,3
 4188              		.global	getdig
 4189              		.syntax unified
 4190              		.thumb
 4191              		.thumb_func
 4192              		.fpu fpv4-sp-d16
 4194              	getdig:
 4195              	.LVL453:
 4196              	.LFB6:
 322:src/display.c **** 	// perform index lookup
 4197              		.loc 1 322 1 view -0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 0
 4200              		@ frame_needed = 0, uses_anonymous_args = 0
 4201              		@ link register save eliminated.
 324:src/display.c **** }
 4202              		.loc 1 324 2 view .LVU1293
 324:src/display.c **** }
 4203              		.loc 1 324 15 is_stmt 0 view .LVU1294
 4204 0000 014B     		ldr	r3, .L401
 324:src/display.c **** }
 4205              		.loc 1 324 18 view .LVU1295
 4206 0002 C0B2     		uxtb	r0, r0
 4207              	.LVL454:
 325:src/display.c **** 
 4208              		.loc 1 325 1 view .LVU1296
 4209 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4210 0006 7047     		bx	lr
 4211              	.L402:
 4212              		.align	2
 4213              	.L401:
 4214 0008 00000000 		.word	.LANCHOR2
 4215              		.cfi_endproc
 4216              	.LFE6:
 4218              		.section	.text.dot,"ax",%progbits
 4219              		.align	1
 4220              		.p2align 2,,3
 4221              		.global	dot
 4222              		.syntax unified
 4223              		.thumb
 4224              		.thumb_func
 4225              		.fpu fpv4-sp-d16
 4227              	dot:
ARM GAS  /tmp/ccZMW3We.s 			page 143


 4228              	.LVL455:
 4229              	.LFB7:
 327:src/display.c **** 	if (on)	set_dot(n);
 4230              		.loc 1 327 25 is_stmt 1 view -0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 0
 4233              		@ frame_needed = 0, uses_anonymous_args = 0
 4234              		@ link register save eliminated.
 328:src/display.c **** 	else	clr_dot(n);
 4235              		.loc 1 328 2 view .LVU1298
 328:src/display.c **** 	else	clr_dot(n);
 4236              		.loc 1 328 5 is_stmt 0 view .LVU1299
 4237 0000 09B1     		cbz	r1, .L404
 328:src/display.c **** 	else	clr_dot(n);
 4238              		.loc 1 328 10 is_stmt 1 discriminator 1 view .LVU1300
 4239 0002 FFF7FEBF 		b	set_dot
 4240              	.LVL456:
 4241              	.L404:
 329:src/display.c **** }
 4242              		.loc 1 329 7 view .LVU1301
 4243 0006 FFF7FEBF 		b	clr_dot
 4244              	.LVL457:
 329:src/display.c **** }
 4245              		.loc 1 329 7 is_stmt 0 view .LVU1302
 4246              		.cfi_endproc
 4247              	.LFE7:
 4249 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4250              		.align	1
 4251              		.p2align 2,,3
 4252              		.global	std_round_fix
 4253              		.syntax unified
 4254              		.thumb
 4255              		.thumb_func
 4256              		.fpu fpv4-sp-d16
 4258              	std_round_fix:
 4259              	.LVL458:
 4260              	.LFB24:
1417:src/display.c **** 	decNumber b, c;
 4261              		.loc 1 1417 54 is_stmt 1 view -0
 4262              		.cfi_startproc
 4263              		@ args = 0, pretend = 0, frame = 80
 4264              		@ frame_needed = 0, uses_anonymous_args = 0
1418:src/display.c **** 
 4265              		.loc 1 1418 2 view .LVU1304
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
 4266              		.loc 1 1420 2 view .LVU1305
1417:src/display.c **** 	decNumber b, c;
 4267              		.loc 1 1417 54 is_stmt 0 view .LVU1306
 4268 0000 00B5     		push	{lr}
 4269              		.cfi_def_cfa_offset 4
 4270              		.cfi_offset 14, -4
 4271 0002 95B0     		sub	sp, sp, #84
 4272              		.cfi_def_cfa_offset 88
1417:src/display.c **** 	decNumber b, c;
 4273              		.loc 1 1417 54 view .LVU1307
 4274 0004 0146     		mov	r1, r0
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
ARM GAS  /tmp/ccZMW3We.s 			page 144


 4275              		.loc 1 1420 2 view .LVU1308
 4276 0006 02A8     		add	r0, sp, #8
 4277              	.LVL459:
1417:src/display.c **** 	decNumber b, c;
 4278              		.loc 1 1417 54 view .LVU1309
 4279 0008 0191     		str	r1, [sp, #4]
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
 4280              		.loc 1 1420 2 view .LVU1310
 4281 000a FFF7FEFF 		bl	dn_1
 4282              	.LVL460:
1421:src/display.c **** 	dn_abs(&c, z);
 4283              		.loc 1 1421 2 is_stmt 1 view .LVU1311
1421:src/display.c **** 	dn_abs(&c, z);
 4284              		.loc 1 1421 22 is_stmt 0 view .LVU1312
 4285 000e 0F4A     		ldr	r2, .L410
1421:src/display.c **** 	dn_abs(&c, z);
 4286              		.loc 1 1421 13 view .LVU1313
 4287 0010 039B     		ldr	r3, [sp, #12]
1421:src/display.c **** 	dn_abs(&c, z);
 4288              		.loc 1 1421 22 view .LVU1314
 4289 0012 1268     		ldr	r2, [r2]
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4290              		.loc 1 1422 2 view .LVU1315
 4291 0014 0199     		ldr	r1, [sp, #4]
1421:src/display.c **** 	dn_abs(&c, z);
 4292              		.loc 1 1421 22 view .LVU1316
 4293 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4294 001a 02F00F02 		and	r2, r2, #15
1421:src/display.c **** 	dn_abs(&c, z);
 4295              		.loc 1 1421 13 view .LVU1317
 4296 001e 9B1A     		subs	r3, r3, r2
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4297              		.loc 1 1422 2 view .LVU1318
 4298 0020 0BA8     		add	r0, sp, #44
1421:src/display.c **** 	dn_abs(&c, z);
 4299              		.loc 1 1421 13 view .LVU1319
 4300 0022 0393     		str	r3, [sp, #12]
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4301              		.loc 1 1422 2 is_stmt 1 view .LVU1320
 4302 0024 FFF7FEFF 		bl	dn_abs
 4303              	.LVL461:
1423:src/display.c **** 		return MODE_FIX;
 4304              		.loc 1 1423 2 view .LVU1321
1423:src/display.c **** 		return MODE_FIX;
 4305              		.loc 1 1423 6 is_stmt 0 view .LVU1322
 4306 0028 0BA9     		add	r1, sp, #44
 4307 002a 02A8     		add	r0, sp, #8
 4308 002c FFF7FEFF 		bl	dn_lt
 4309              	.LVL462:
1423:src/display.c **** 		return MODE_FIX;
 4310              		.loc 1 1423 5 view .LVU1323
 4311 0030 10B9     		cbnz	r0, .L409
1426:src/display.c **** #endif
 4312              		.loc 1 1426 1 view .LVU1324
 4313 0032 15B0     		add	sp, sp, #84
 4314              		.cfi_remember_state
 4315              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccZMW3We.s 			page 145


 4316              		@ sp needed
 4317 0034 5DF804FB 		ldr	pc, [sp], #4
 4318              	.LVL463:
 4319              	.L409:
 4320              		.cfi_restore_state
1423:src/display.c **** 		return MODE_FIX;
 4321              		.loc 1 1423 23 discriminator 1 view .LVU1325
 4322 0038 0549     		ldr	r1, .L410+4
 4323 003a 0BA8     		add	r0, sp, #44
 4324 003c FFF7FEFF 		bl	dn_lt
 4325              	.LVL464:
1424:src/display.c **** 	return MODE_STD;
 4326              		.loc 1 1424 10 discriminator 1 view .LVU1326
 4327 0040 0038     		subs	r0, r0, #0
 4328 0042 18BF     		it	ne
 4329 0044 0120     		movne	r0, #1
1426:src/display.c **** #endif
 4330              		.loc 1 1426 1 discriminator 1 view .LVU1327
 4331 0046 15B0     		add	sp, sp, #84
 4332              		.cfi_def_cfa_offset 4
 4333              		@ sp needed
 4334 0048 5DF804FB 		ldr	pc, [sp], #4
 4335              	.LVL465:
 4336              	.L411:
1426:src/display.c **** #endif
 4337              		.loc 1 1426 1 discriminator 1 view .LVU1328
 4338              		.align	2
 4339              	.L410:
 4340 004c 00000000 		.word	main_ram
 4341 0050 00000000 		.word	const_1
 4342              		.cfi_endproc
 4343              	.LFE24:
 4345              		.section	.text.set_IO_annunciator,"ax",%progbits
 4346              		.align	1
 4347              		.p2align 2,,3
 4348              		.global	set_IO_annunciator
 4349              		.syntax unified
 4350              		.thumb
 4351              		.thumb_func
 4352              		.fpu fpv4-sp-d16
 4354              	set_IO_annunciator:
 4355              	.LFB33:
2191:src/display.c **** #ifndef DM42
 4356              		.loc 1 2191 31 is_stmt 1 view -0
 4357              		.cfi_startproc
 4358              		@ args = 0, pretend = 0, frame = 0
 4359              		@ frame_needed = 0, uses_anonymous_args = 0
2196:src/display.c **** #endif
 4360              		.loc 1 2196 5 view .LVU1330
 4361              	.LVL466:
2206:src/display.c **** 		dot(LIT_EQ, on);
 4362              		.loc 1 2206 2 view .LVU1331
2191:src/display.c **** #ifndef DM42
 4363              		.loc 1 2191 31 is_stmt 0 view .LVU1332
 4364 0000 10B5     		push	{r4, lr}
 4365              		.cfi_def_cfa_offset 8
 4366              		.cfi_offset 4, -8
ARM GAS  /tmp/ccZMW3We.s 			page 146


 4367              		.cfi_offset 14, -4
2206:src/display.c **** 		dot(LIT_EQ, on);
 4368              		.loc 1 2206 9 view .LVU1333
 4369 0002 064C     		ldr	r4, .L416
2206:src/display.c **** 		dot(LIT_EQ, on);
 4370              		.loc 1 2206 5 view .LVU1334
 4371 0004 2368     		ldr	r3, [r4]
 4372 0006 03B9     		cbnz	r3, .L415
2211:src/display.c **** 
 4373              		.loc 1 2211 1 view .LVU1335
 4374 0008 10BD     		pop	{r4, pc}
 4375              	.L415:
 4376              	.LBB347:
 4377              	.LBI347:
2191:src/display.c **** #ifndef DM42
 4378              		.loc 1 2191 6 is_stmt 1 view .LVU1336
 4379              	.LBB348:
2207:src/display.c **** 		IoAnnunciator = on;
 4380              		.loc 1 2207 3 view .LVU1337
 4381              	.LVL467:
 4382              	.LBB349:
 4383              	.LBI349:
 327:src/display.c **** 	if (on)	set_dot(n);
 4384              		.loc 1 327 6 view .LVU1338
 4385              	.LBB350:
 328:src/display.c **** 	else	clr_dot(n);
 4386              		.loc 1 328 2 view .LVU1339
 329:src/display.c **** }
 4387              		.loc 1 329 7 view .LVU1340
 4388 000a 8420     		movs	r0, #132
 4389 000c FFF7FEFF 		bl	clr_dot
 4390              	.LVL468:
 329:src/display.c **** }
 4391              		.loc 1 329 7 is_stmt 0 view .LVU1341
 4392              	.LBE350:
 4393              	.LBE349:
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4394              		.loc 1 2208 3 is_stmt 1 view .LVU1342
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4395              		.loc 1 2208 17 is_stmt 0 view .LVU1343
 4396 0010 0023     		movs	r3, #0
 4397 0012 2360     		str	r3, [r4]
2209:src/display.c **** 	}
 4398              		.loc 1 2209 3 is_stmt 1 view .LVU1344
 4399              	.LBE348:
 4400              	.LBE347:
2211:src/display.c **** 
 4401              		.loc 1 2211 1 is_stmt 0 view .LVU1345
 4402 0014 BDE81040 		pop	{r4, lr}
 4403              		.cfi_restore 14
 4404              		.cfi_restore 4
 4405              		.cfi_def_cfa_offset 0
 4406              	.LBB352:
 4407              	.LBB351:
2209:src/display.c **** 	}
 4408              		.loc 1 2209 3 view .LVU1346
 4409 0018 FFF7FEBF 		b	finish_display
ARM GAS  /tmp/ccZMW3We.s 			page 147


 4410              	.LVL469:
 4411              	.L417:
 4412              		.align	2
 4413              	.L416:
 4414 001c 00000000 		.word	IoAnnunciator
 4415              	.LBE351:
 4416              	.LBE352:
 4417              		.cfi_endproc
 4418              	.LFE33:
 4420              		.section	.text.pixel_length,"ax",%progbits
 4421              		.align	1
 4422              		.p2align 2,,3
 4423              		.global	pixel_length
 4424              		.syntax unified
 4425              		.thumb
 4426              		.thumb_func
 4427              		.fpu fpv4-sp-d16
 4429              	pixel_length:
 4430              	.LVL470:
 4431              	.LFB38:
2700:src/display.c **** 
2701:src/display.c **** 
2702:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2703:src/display.c ****  */
2704:src/display.c **** int pixel_length(const char *s, int smallp)
2705:src/display.c **** {
 4432              		.loc 1 2705 1 is_stmt 1 view -0
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 0
 4435              		@ frame_needed = 0, uses_anonymous_args = 0
2706:src/display.c **** 	int len = 0;
 4436              		.loc 1 2706 2 view .LVU1348
2707:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4437              		.loc 1 2707 2 view .LVU1349
2705:src/display.c **** 	int len = 0;
 4438              		.loc 1 2705 1 is_stmt 0 view .LVU1350
 4439 0000 70B5     		push	{r4, r5, r6, lr}
 4440              		.cfi_def_cfa_offset 16
 4441              		.cfi_offset 4, -16
 4442              		.cfi_offset 5, -12
 4443              		.cfi_offset 6, -8
 4444              		.cfi_offset 14, -4
2705:src/display.c **** 	int len = 0;
 4445              		.loc 1 2705 1 view .LVU1351
 4446 0002 0446     		mov	r4, r0
2708:src/display.c **** 	while (*s != '\0') {
 4447              		.loc 1 2708 9 view .LVU1352
 4448 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4449              	.LVL471:
2707:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4450              		.loc 1 2707 34 view .LVU1353
 4451 0006 0E1E     		subs	r6, r1, #0
 4452 0008 18BF     		it	ne
 4453 000a 4FF48076 		movne	r6, #256
 4454              	.LVL472:
 4455              		.loc 1 2708 2 is_stmt 1 view .LVU1354
 4456              		.loc 1 2708 8 view .LVU1355
ARM GAS  /tmp/ccZMW3We.s 			page 148


 4457 000e A0B1     		cbz	r0, .L425
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4458              		.loc 1 2706 6 is_stmt 0 view .LVU1356
 4459 0010 0025     		movs	r5, #0
 4460 0012 06E0     		b	.L423
 4461              	.LVL473:
 4462              	.L421:
2709:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2710:src/display.c **** 		if (s[0] == '\007') {
2711:src/display.c **** 			len += s[1] & 0x1F;
2712:src/display.c **** 			s += 3;
2713:src/display.c **** 			continue;
2714:src/display.c **** 		}
2715:src/display.c **** #endif
2716:src/display.c **** 		len += charlengths( (unsigned char) *s++ + offset );
 4463              		.loc 1 2716 10 view .LVU1357
 4464 0014 3044     		add	r0, r0, r6
 4465 0016 FFF7FEFF 		bl	charlengths
 4466              	.LVL474:
 4467              		.loc 1 2716 41 view .LVU1358
 4468 001a 0134     		adds	r4, r4, #1
 4469              	.LVL475:
 4470              		.loc 1 2716 7 view .LVU1359
 4471 001c 0544     		add	r5, r5, r0
 4472              	.LVL476:
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4473              		.loc 1 2708 8 is_stmt 1 view .LVU1360
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4474              		.loc 1 2708 9 is_stmt 0 view .LVU1361
 4475 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4476              		.loc 1 2708 8 view .LVU1362
 4477 0020 48B1     		cbz	r0, .L418
 4478              	.LVL477:
 4479              	.L423:
2710:src/display.c **** 			len += s[1] & 0x1F;
 4480              		.loc 1 2710 3 is_stmt 1 view .LVU1363
 4481              		.loc 1 2716 3 view .LVU1364
2710:src/display.c **** 			len += s[1] & 0x1F;
 4482              		.loc 1 2710 6 is_stmt 0 view .LVU1365
 4483 0022 0728     		cmp	r0, #7
 4484 0024 F6D1     		bne	.L421
2711:src/display.c **** 			s += 3;
 4485              		.loc 1 2711 4 is_stmt 1 view .LVU1366
2711:src/display.c **** 			s += 3;
 4486              		.loc 1 2711 16 is_stmt 0 view .LVU1367
 4487 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4488              		.loc 1 2708 9 view .LVU1368
 4489 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
2711:src/display.c **** 			s += 3;
 4490              		.loc 1 2711 16 view .LVU1369
 4491 002a 03F01F03 		and	r3, r3, #31
2712:src/display.c **** 			continue;
 4492              		.loc 1 2712 6 view .LVU1370
 4493 002e 0334     		adds	r4, r4, #3
 4494              	.LVL478:
ARM GAS  /tmp/ccZMW3We.s 			page 149


2711:src/display.c **** 			s += 3;
 4495              		.loc 1 2711 8 view .LVU1371
 4496 0030 1D44     		add	r5, r5, r3
 4497              	.LVL479:
2712:src/display.c **** 			continue;
 4498              		.loc 1 2712 4 is_stmt 1 view .LVU1372
2713:src/display.c **** 		}
 4499              		.loc 1 2713 4 view .LVU1373
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4500              		.loc 1 2708 8 view .LVU1374
 4501 0032 0028     		cmp	r0, #0
 4502 0034 F5D1     		bne	.L423
 4503              	.L418:
2717:src/display.c **** 	}
2718:src/display.c **** 	return len;
2719:src/display.c **** }
 4504              		.loc 1 2719 1 is_stmt 0 view .LVU1375
 4505 0036 2846     		mov	r0, r5
 4506 0038 70BD     		pop	{r4, r5, r6, pc}
 4507              	.LVL480:
 4508              	.L425:
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4509              		.loc 1 2706 6 view .LVU1376
 4510 003a 0546     		mov	r5, r0
2718:src/display.c **** }
 4511              		.loc 1 2718 2 is_stmt 1 view .LVU1377
 4512              		.loc 1 2719 1 is_stmt 0 view .LVU1378
 4513 003c 2846     		mov	r0, r5
 4514 003e 70BD     		pop	{r4, r5, r6, pc}
 4515              		.loc 1 2719 1 view .LVU1379
 4516              		.cfi_endproc
 4517              	.LFE38:
 4519              		.section	.text.set_status,"ax",%progbits
 4520              		.align	1
 4521              		.p2align 2,,3
 4522              		.syntax unified
 4523              		.thumb
 4524              		.thumb_func
 4525              		.fpu fpv4-sp-d16
 4527              	set_status:
 4528              	.LVL481:
 4529              	.LFB40:
2720:src/display.c **** 
2721:src/display.c **** 
2722:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2723:src/display.c ****  * If this is larger than the display, return true.
2724:src/display.c ****  */
2725:src/display.c **** static int string_too_large(const char *s) {
2726:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
2727:src/display.c **** }
2728:src/display.c **** 
2729:src/display.c **** 
2730:src/display.c **** /* Display the given string on the screen.
2731:src/display.c ****  */
2732:src/display.c **** static void set_status(const char *str) {
 4530              		.loc 1 2732 41 is_stmt 1 view -0
 4531              		.cfi_startproc
ARM GAS  /tmp/ccZMW3We.s 			page 150


 4532              		@ args = 0, pretend = 0, frame = 0
 4533              		@ frame_needed = 0, uses_anonymous_args = 0
2733:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4534              		.loc 1 2733 2 view .LVU1381
 4535              		.loc 1 2733 24 is_stmt 0 view .LVU1382
 4536 0000 0C4B     		ldr	r3, .L433
 4537              		.loc 1 2733 2 view .LVU1383
 4538 0002 93F91630 		ldrsb	r3, [r3, #22]
 4539 0006 002B     		cmp	r3, #0
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4540              		.loc 1 2732 41 view .LVU1384
 4541 0008 10B5     		push	{r4, lr}
 4542              		.cfi_def_cfa_offset 8
 4543              		.cfi_offset 4, -8
 4544              		.cfi_offset 14, -4
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4545              		.loc 1 2732 41 view .LVU1385
 4546 000a 0446     		mov	r4, r0
 4547              		.loc 1 2733 2 view .LVU1386
 4548 000c 05DA     		bge	.L432
 4549 000e 2046     		mov	r0, r4
 4550              		.loc 1 2733 2 view .LVU1387
 4551 0010 0121     		movs	r1, #1
2734:src/display.c **** }
 4552              		.loc 1 2734 1 view .LVU1388
 4553 0012 BDE81040 		pop	{r4, lr}
 4554              		.cfi_remember_state
 4555              		.cfi_restore 14
 4556              		.cfi_restore 4
 4557              		.cfi_def_cfa_offset 0
2733:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4558              		.loc 1 2733 2 view .LVU1389
 4559 0016 FFF7FEBF 		b	set_status_sized
 4560              	.LVL482:
 4561              	.L432:
 4562              		.cfi_restore_state
 4563              	.LBB353:
 4564              	.LBI353:
2725:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4565              		.loc 1 2725 12 is_stmt 1 view .LVU1390
 4566              	.LBB354:
2726:src/display.c **** }
 4567              		.loc 1 2726 2 view .LVU1391
2726:src/display.c **** }
 4568              		.loc 1 2726 9 is_stmt 0 view .LVU1392
 4569 001a 0021     		movs	r1, #0
 4570 001c FFF7FEFF 		bl	pixel_length
 4571              	.LVL483:
2726:src/display.c **** }
 4572              		.loc 1 2726 9 view .LVU1393
 4573              	.LBE354:
 4574              	.LBE353:
2733:src/display.c **** }
 4575              		.loc 1 2733 2 view .LVU1394
 4576 0020 2C28     		cmp	r0, #44
 4577 0022 D8BF     		it	le
 4578 0024 0021     		movle	r1, #0
ARM GAS  /tmp/ccZMW3We.s 			page 151


 4579 0026 2046     		mov	r0, r4
 4580 0028 C8BF     		it	gt
 4581 002a 0121     		movgt	r1, #1
 4582              		.loc 1 2734 1 view .LVU1395
 4583 002c BDE81040 		pop	{r4, lr}
 4584              		.cfi_restore 14
 4585              		.cfi_restore 4
 4586              		.cfi_def_cfa_offset 0
 4587              	.LVL484:
2733:src/display.c **** }
 4588              		.loc 1 2733 2 view .LVU1396
 4589 0030 FFF7FEBF 		b	set_status_sized
 4590              	.LVL485:
 4591              	.L434:
2733:src/display.c **** }
 4592              		.loc 1 2733 2 view .LVU1397
 4593              		.align	2
 4594              	.L433:
 4595 0034 00000000 		.word	StateWhileOn
 4596              		.cfi_endproc
 4597              	.LFE40:
 4599              		.section	.text.set_x_dn,"ax",%progbits
 4600              		.align	1
 4601              		.p2align 2,,3
 4602              		.global	set_x_dn
 4603              		.syntax unified
 4604              		.thumb
 4605              		.thumb_func
 4606              		.fpu fpv4-sp-d16
 4608              	set_x_dn:
 4609              	.LVL486:
 4610              	.LFB27:
1564:src/display.c **** 	char x[50], *obp = x;
 4611              		.loc 1 1564 61 is_stmt 1 view -0
 4612              		.cfi_startproc
 4613              		@ args = 0, pretend = 0, frame = 136
 4614              		@ frame_needed = 0, uses_anonymous_args = 0
1565:src/display.c **** 	int odig = 0;
 4615              		.loc 1 1565 2 view .LVU1399
1564:src/display.c **** 	char x[50], *obp = x;
 4616              		.loc 1 1564 61 is_stmt 0 view .LVU1400
 4617 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4618              		.cfi_def_cfa_offset 36
 4619              		.cfi_offset 4, -36
 4620              		.cfi_offset 5, -32
 4621              		.cfi_offset 6, -28
 4622              		.cfi_offset 7, -24
 4623              		.cfi_offset 8, -20
 4624              		.cfi_offset 9, -16
 4625              		.cfi_offset 10, -12
 4626              		.cfi_offset 11, -8
 4627              		.cfi_offset 14, -4
1581:src/display.c **** 	int mode = UState.dispmode;
 4628              		.loc 1 1581 11 view .LVU1401
 4629 0004 C84B     		ldr	r3, .L670
 4630 0006 1B68     		ldr	r3, [r3]
1564:src/display.c **** 	char x[50], *obp = x;
ARM GAS  /tmp/ccZMW3We.s 			page 152


 4631              		.loc 1 1564 61 view .LVU1402
 4632 0008 A3B0     		sub	sp, sp, #140
 4633              		.cfi_def_cfa_offset 176
 4634              	.LVL487:
1566:src/display.c **** 	int show_exp = 0;
 4635              		.loc 1 1566 2 is_stmt 1 view .LVU1403
1567:src/display.c **** 	int j;
 4636              		.loc 1 1567 2 view .LVU1404
1568:src/display.c **** 	char mantissa[64];
 4637              		.loc 1 1568 2 view .LVU1405
1569:src/display.c **** 	int exp = 0;
 4638              		.loc 1 1569 2 view .LVU1406
1570:src/display.c **** 	char *p = mantissa;
 4639              		.loc 1 1570 2 view .LVU1407
1571:src/display.c **** 	char *r;
 4640              		.loc 1 1571 2 view .LVU1408
1572:src/display.c **** 	const char *q;
 4641              		.loc 1 1572 2 view .LVU1409
1573:src/display.c **** 	int count, i;
 4642              		.loc 1 1573 2 view .LVU1410
1574:src/display.c **** 	int extra_digits = 0;
 4643              		.loc 1 1574 2 view .LVU1411
1575:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4644              		.loc 1 1575 2 view .LVU1412
1581:src/display.c **** 	int mode = UState.dispmode;
 4645              		.loc 1 1581 2 view .LVU1413
1581:src/display.c **** 	int mode = UState.dispmode;
 4646              		.loc 1 1581 17 is_stmt 0 view .LVU1414
 4647 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1582:src/display.c **** #endif
 4648              		.loc 1 1582 19 view .LVU1415
 4649 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1564:src/display.c **** 	char x[50], *obp = x;
 4650              		.loc 1 1564 61 view .LVU1416
 4651 0012 0092     		str	r2, [sp]
 4652 0014 0C46     		mov	r4, r1
 4653 0016 0646     		mov	r6, r0
1581:src/display.c **** 	int mode = UState.dispmode;
 4654              		.loc 1 1581 17 view .LVU1417
 4655 0018 05F00F05 		and	r5, r5, #15
 4656              	.LVL488:
1582:src/display.c **** #endif
 4657              		.loc 1 1582 2 is_stmt 1 view .LVU1418
1582:src/display.c **** #endif
 4658              		.loc 1 1582 19 is_stmt 0 view .LVU1419
 4659 001c BF09     		lsrs	r7, r7, #6
 4660              	.LVL489:
1584:src/display.c **** 	int negative = 0;
 4661              		.loc 1 1584 2 is_stmt 1 view .LVU1420
1585:src/display.c **** 	int trimzeros = 0;
 4662              		.loc 1 1585 2 view .LVU1421
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4663              		.loc 1 1586 2 view .LVU1422
1588:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4664              		.loc 1 1588 2 view .LVU1423
1597:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4665              		.loc 1 1597 2 view .LVU1424
ARM GAS  /tmp/ccZMW3We.s 			page 153


 4666 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4667              	.LVL490:
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4668              		.loc 1 1599 2 view .LVU1425
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4669              		.loc 1 1599 5 is_stmt 0 view .LVU1426
 4670 0022 002C     		cmp	r4, #0
 4671 0024 00F08A81 		beq	.L436
 4672              	.L439:
1624:src/display.c **** 		return;
 4673              		.loc 1 1624 2 is_stmt 1 view .LVU1427
1624:src/display.c **** 		return;
 4674              		.loc 1 1624 6 is_stmt 0 view .LVU1428
 4675 0028 2146     		mov	r1, r4
 4676 002a 06F10800 		add	r0, r6, #8
 4677 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4678              	.LVL491:
1624:src/display.c **** 		return;
 4679              		.loc 1 1624 5 view .LVU1429
 4680 0032 8346     		mov	fp, r0
 4681 0034 0028     		cmp	r0, #0
 4682 0036 40F06F81 		bne	.L435
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4683              		.loc 1 1627 2 is_stmt 1 view .LVU1430
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4684              		.loc 1 1627 12 is_stmt 0 view .LVU1431
 4685 003a DFF8F092 		ldr	r9, .L670+4
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4686              		.loc 1 1627 5 view .LVU1432
 4687 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4688 0042 012B     		cmp	r3, #1
 4689 0044 00F0AF82 		beq	.L651
1570:src/display.c **** 	char *p = mantissa;
 4690              		.loc 1 1570 6 view .LVU1433
 4691 0048 0190     		str	r0, [sp, #4]
 4692              	.LVL492:
 4693              	.L442:
1633:src/display.c **** 
 4694              		.loc 1 1633 2 is_stmt 1 view .LVU1434
 4695 004a 0DF11408 		add	r8, sp, #20
 4696              	.LVL493:
1633:src/display.c **** 
 4697              		.loc 1 1633 2 is_stmt 0 view .LVU1435
 4698 004e 4046     		mov	r0, r8
 4699 0050 3222     		movs	r2, #50
 4700 0052 0021     		movs	r1, #0
 4701 0054 FFF7FEFF 		bl	xset
 4702              	.LVL494:
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4703              		.loc 1 1635 2 is_stmt 1 view .LVU1436
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4704              		.loc 1 1635 6 is_stmt 0 view .LVU1437
 4705 0058 3046     		mov	r0, r6
 4706 005a FFF7FEFF 		bl	dn_eq0
 4707              	.LVL495:
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4708              		.loc 1 1635 5 view .LVU1438
ARM GAS  /tmp/ccZMW3We.s 			page 154


 4709 005e 0028     		cmp	r0, #0
 4710 0060 00F05D81 		beq	.L443
1636:src/display.c **** 			x[0] = '-';
 4711              		.loc 1 1636 3 is_stmt 1 view .LVU1439
1636:src/display.c **** 			x[0] = '-';
 4712              		.loc 1 1636 6 is_stmt 0 view .LVU1440
 4713 0064 96F90830 		ldrsb	r3, [r6, #8]
 4714 0068 002B     		cmp	r3, #0
 4715 006a C0F2C182 		blt	.L652
 4716              	.L444:
1640:src/display.c **** 	} else
 4717              		.loc 1 1640 4 is_stmt 1 view .LVU1441
1640:src/display.c **** 	} else
 4718              		.loc 1 1640 9 is_stmt 0 view .LVU1442
 4719 006e 3023     		movs	r3, #48
 4720 0070 8DF81430 		strb	r3, [sp, #20]
 4721              	.L445:
1644:src/display.c **** 		show_x(x, exp);
 4722              		.loc 1 1644 2 is_stmt 1 view .LVU1443
1644:src/display.c **** 		show_x(x, exp);
 4723              		.loc 1 1644 12 is_stmt 0 view .LVU1444
 4724 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1644:src/display.c **** 		show_x(x, exp);
 4725              		.loc 1 1644 5 view .LVU1445
 4726 0078 BAF1010F 		cmp	r10, #1
 4727 007c 00F0F082 		beq	.L653
1667:src/display.c **** 		mode = std_round_fix(z);
 4728              		.loc 1 1667 2 is_stmt 1 view .LVU1446
1667:src/display.c **** 		mode = std_round_fix(z);
 4729              		.loc 1 1667 5 is_stmt 0 view .LVU1447
 4730 0080 002F     		cmp	r7, #0
 4731 0082 00F0FD81 		beq	.L654
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4732              		.loc 1 1671 19 view .LVU1448
 4733 0086 009B     		ldr	r3, [sp]
 4734 0088 1B68     		ldr	r3, [r3]
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4735              		.loc 1 1671 12 view .LVU1449
 4736 008a AB42     		cmp	r3, r5
1581:src/display.c **** 	int mode = UState.dispmode;
 4737              		.loc 1 1581 6 view .LVU1450
 4738 008c AA46     		mov	r10, r5
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4739              		.loc 1 1671 9 is_stmt 1 view .LVU1451
1673:src/display.c **** #endif
 4740              		.loc 1 1673 3 view .LVU1452
1673:src/display.c **** #endif
 4741              		.loc 1 1673 6 is_stmt 0 view .LVU1453
 4742 008e D8BF     		it	le
 4743 0090 03F1FF3A 		addle	r10, r3, #-1
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4744              		.loc 1 1586 6 view .LVU1454
 4745 0094 0023     		movs	r3, #0
 4746 0096 0193     		str	r3, [sp, #4]
 4747              	.LVL496:
 4748              	.L458:
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
ARM GAS  /tmp/ccZMW3We.s 			page 155


 4749              		.loc 1 1676 2 is_stmt 1 view .LVU1455
 4750 0098 0DF14809 		add	r9, sp, #72
 4751              	.LVL497:
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4752              		.loc 1 1676 2 is_stmt 0 view .LVU1456
 4753 009c 3021     		movs	r1, #48
 4754 009e 4846     		mov	r0, r9
 4755 00a0 3F22     		movs	r2, #63
 4756 00a2 FFF7FEFF 		bl	xset
 4757              	.LVL498:
1677:src/display.c **** 
 4758              		.loc 1 1677 2 is_stmt 1 view .LVU1457
1677:src/display.c **** 
 4759              		.loc 1 1677 31 is_stmt 0 view .LVU1458
 4760 00a6 0023     		movs	r3, #0
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4761              		.loc 1 1679 6 view .LVU1459
 4762 00a8 4521     		movs	r1, #69
 4763 00aa 4046     		mov	r0, r8
1677:src/display.c **** 
 4764              		.loc 1 1677 31 view .LVU1460
 4765 00ac 8DF88730 		strb	r3, [sp, #135]
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4766              		.loc 1 1679 2 is_stmt 1 view .LVU1461
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4767              		.loc 1 1679 6 is_stmt 0 view .LVU1462
 4768 00b0 FFF7FEFF 		bl	find_char
 4769              	.LVL499:
1688:src/display.c **** 	else exp = s_to_i(q+1);
 4770              		.loc 1 1688 2 is_stmt 1 view .LVU1463
1688:src/display.c **** 	else exp = s_to_i(q+1);
 4771              		.loc 1 1688 5 is_stmt 0 view .LVU1464
 4772 00b4 0028     		cmp	r0, #0
 4773 00b6 00F05C81 		beq	.L559
1689:src/display.c **** #endif
 4774              		.loc 1 1689 7 is_stmt 1 view .LVU1465
1689:src/display.c **** #endif
 4775              		.loc 1 1689 13 is_stmt 0 view .LVU1466
 4776 00ba 0130     		adds	r0, r0, #1
 4777              	.LVL500:
1689:src/display.c **** #endif
 4778              		.loc 1 1689 13 view .LVU1467
 4779 00bc FFF7FEFF 		bl	s_to_i
 4780              	.LVL501:
1689:src/display.c **** #endif
 4781              		.loc 1 1689 13 view .LVU1468
 4782 00c0 0546     		mov	r5, r0
 4783              	.LVL502:
 4784              	.L459:
1693:src/display.c **** 	if (!res) {
 4785              		.loc 1 1693 2 is_stmt 1 view .LVU1469
1693:src/display.c **** 	if (!res) {
 4786              		.loc 1 1693 12 view .LVU1470
1693:src/display.c **** 	if (!res) {
 4787              		.loc 1 1693 2 is_stmt 0 view .LVU1471
 4788 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4789 00c6 202B     		cmp	r3, #32
ARM GAS  /tmp/ccZMW3We.s 			page 156


1693:src/display.c **** 	if (!res) {
 4790              		.loc 1 1693 8 view .LVU1472
 4791 00c8 4646     		mov	r6, r8
 4792              	.LVL503:
1693:src/display.c **** 	if (!res) {
 4793              		.loc 1 1693 2 view .LVU1473
 4794 00ca 03D1     		bne	.L460
 4795              	.LVL504:
 4796              	.L461:
1693:src/display.c **** 	if (!res) {
 4797              		.loc 1 1693 27 is_stmt 1 discriminator 3 view .LVU1474
1693:src/display.c **** 	if (!res) {
 4798              		.loc 1 1693 23 discriminator 3 view .LVU1475
1693:src/display.c **** 	if (!res) {
 4799              		.loc 1 1693 12 discriminator 3 view .LVU1476
1693:src/display.c **** 	if (!res) {
 4800              		.loc 1 1693 2 is_stmt 0 discriminator 3 view .LVU1477
 4801 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4802              	.LVL505:
1693:src/display.c **** 	if (!res) {
 4803              		.loc 1 1693 2 discriminator 3 view .LVU1478
 4804 00d0 202B     		cmp	r3, #32
 4805 00d2 FBD0     		beq	.L461
 4806              	.LVL506:
 4807              	.L460:
1694:src/display.c **** 		CLR_EXP_SIGN;
 4808              		.loc 1 1694 2 is_stmt 1 view .LVU1479
1694:src/display.c **** 		CLR_EXP_SIGN;
 4809              		.loc 1 1694 5 is_stmt 0 view .LVU1480
 4810 00d4 002C     		cmp	r4, #0
 4811 00d6 00F09682 		beq	.L655
 4812              	.L462:
1698:src/display.c **** 		negative = 1;
 4813              		.loc 1 1698 2 is_stmt 1 view .LVU1481
1698:src/display.c **** 		negative = 1;
 4814              		.loc 1 1698 6 is_stmt 0 view .LVU1482
 4815 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1698:src/display.c **** 		negative = 1;
 4816              		.loc 1 1698 5 view .LVU1483
 4817 00dc 2D2B     		cmp	r3, #45
 4818 00de 00F0CA81 		beq	.L656
1701:src/display.c **** 		q++;
 4819              		.loc 1 1701 9 is_stmt 1 view .LVU1484
1701:src/display.c **** 		q++;
 4820              		.loc 1 1701 12 is_stmt 0 view .LVU1485
 4821 00e2 2B2B     		cmp	r3, #43
 4822 00e4 00F06E82 		beq	.L657
1585:src/display.c **** 	int trimzeros = 0;
 4823              		.loc 1 1585 6 view .LVU1486
 4824 00e8 4FF0000E 		mov	lr, #0
 4825              	.LVL507:
 4826              	.L464:
1703:src/display.c **** 	if (*q == '.') {
 4827              		.loc 1 1703 9 is_stmt 1 discriminator 1 view .LVU1487
1703:src/display.c **** 	if (*q == '.') {
 4828              		.loc 1 1703 2 is_stmt 0 discriminator 1 view .LVU1488
 4829 00ec 302B     		cmp	r3, #48
ARM GAS  /tmp/ccZMW3We.s 			page 157


 4830 00ee 03D1     		bne	.L466
 4831              	.LVL508:
 4832              	.L465:
1703:src/display.c **** 	if (*q == '.') {
 4833              		.loc 1 1703 24 is_stmt 1 discriminator 2 view .LVU1489
1703:src/display.c **** 	if (*q == '.') {
 4834              		.loc 1 1703 20 discriminator 2 view .LVU1490
1703:src/display.c **** 	if (*q == '.') {
 4835              		.loc 1 1703 9 discriminator 2 view .LVU1491
 4836 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4837              	.LVL509:
1703:src/display.c **** 	if (*q == '.') {
 4838              		.loc 1 1703 2 is_stmt 0 discriminator 2 view .LVU1492
 4839 00f4 302B     		cmp	r3, #48
 4840 00f6 FBD0     		beq	.L465
 4841              	.LVL510:
 4842              	.L466:
1704:src/display.c **** 		do
 4843              		.loc 1 1704 2 is_stmt 1 view .LVU1493
1704:src/display.c **** 		do
 4844              		.loc 1 1704 5 is_stmt 0 view .LVU1494
 4845 00f8 2E2B     		cmp	r3, #46
 4846 00fa 00F0A681 		beq	.L658
1711:src/display.c **** 			*p++ = *q++;
 4847              		.loc 1 1711 3 is_stmt 1 view .LVU1495
1711:src/display.c **** 			*p++ = *q++;
 4848              		.loc 1 1711 6 is_stmt 0 view .LVU1496
 4849 00fe A3F13002 		sub	r2, r3, #48
 4850 0102 092A     		cmp	r2, #9
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4851              		.loc 1 1712 4 is_stmt 1 view .LVU1497
 4852              	.LVL511:
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4853              		.loc 1 1712 13 is_stmt 0 view .LVU1498
 4854 0104 9CBF     		itt	ls
 4855 0106 0136     		addls	r6, r6, #1
 4856              	.LVL512:
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4857              		.loc 1 1712 9 view .LVU1499
 4858 0108 8DF84830 		strbls	r3, [sp, #72]
1713:src/display.c **** 			*p++ = *q++;
 4859              		.loc 1 1713 10 view .LVU1500
 4860 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
1713:src/display.c **** 			*p++ = *q++;
 4861              		.loc 1 1713 9 view .LVU1501
 4862 010e A2F13003 		sub	r3, r2, #48
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4863              		.loc 1 1712 6 view .LVU1502
 4864 0112 94BF     		ite	ls
 4865 0114 0DF14901 		addls	r1, sp, #73
1571:src/display.c **** 	char *r;
 4866              		.loc 1 1571 8 view .LVU1503
 4867 0118 4946     		movhi	r1, r9
 4868              	.LVL513:
1713:src/display.c **** 			*p++ = *q++;
 4869              		.loc 1 1713 9 is_stmt 1 view .LVU1504
 4870 011a 092B     		cmp	r3, #9
ARM GAS  /tmp/ccZMW3We.s 			page 158


 4871 011c 0CD8     		bhi	.L472
 4872 011e A81B     		subs	r0, r5, r6
 4873 0120 731C     		adds	r3, r6, #1
 4874              	.L473:
 4875              	.LVL514:
1714:src/display.c **** 			exp++;
 4876              		.loc 1 1714 4 view .LVU1505
1714:src/display.c **** 			exp++;
 4877              		.loc 1 1714 9 is_stmt 0 view .LVU1506
 4878 0122 01F8012B 		strb	r2, [r1], #1
 4879              	.LVL515:
1714:src/display.c **** 			exp++;
 4880              		.loc 1 1714 13 view .LVU1507
 4881 0126 1E46     		mov	r6, r3
 4882              	.LVL516:
1715:src/display.c **** 		}
 4883              		.loc 1 1715 4 is_stmt 1 view .LVU1508
 4884 0128 C518     		adds	r5, r0, r3
 4885              	.LVL517:
1713:src/display.c **** 			*p++ = *q++;
 4886              		.loc 1 1713 9 view .LVU1509
1713:src/display.c **** 			*p++ = *q++;
 4887              		.loc 1 1713 10 is_stmt 0 view .LVU1510
 4888 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4889              	.LVL518:
1713:src/display.c **** 			*p++ = *q++;
 4890              		.loc 1 1713 9 view .LVU1511
 4891 012e A2F1300C 		sub	ip, r2, #48
 4892 0132 BCF1090F 		cmp	ip, #9
 4893 0136 F4D9     		bls	.L473
 4894              	.LVL519:
 4895              	.L472:
1717:src/display.c **** 			q++;
 4896              		.loc 1 1717 3 is_stmt 1 view .LVU1512
1717:src/display.c **** 			q++;
 4897              		.loc 1 1717 6 is_stmt 0 view .LVU1513
 4898 0138 2E2A     		cmp	r2, #46
 4899 013a 00F04882 		beq	.L659
 4900              	.LVL520:
 4901              	.L469:
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4902              		.loc 1 1724 2 is_stmt 1 view .LVU1514
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4903              		.loc 1 1725 11 is_stmt 0 view .LVU1515
 4904 013e 009B     		ldr	r3, [sp]
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4905              		.loc 1 1724 5 view .LVU1516
 4906 0140 012F     		cmp	r7, #1
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4907              		.loc 1 1725 11 view .LVU1517
 4908 0142 1E68     		ldr	r6, [r3]
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4909              		.loc 1 1724 5 view .LVU1518
 4910 0144 00F06F81 		beq	.L660
 4911 0148 0022     		movs	r2, #0
 4912              	.LVL521:
 4913              	.L475:
ARM GAS  /tmp/ccZMW3We.s 			page 159


1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4914              		.loc 1 1738 2 is_stmt 1 view .LVU1519
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4915              		.loc 1 1738 20 is_stmt 0 view .LVU1520
 4916 014a 5244     		add	r2, r2, r10
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4917              		.loc 1 1738 35 view .LVU1521
 4918 014c 501C     		adds	r0, r2, #1
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4919              		.loc 1 1738 4 view .LVU1522
 4920 014e 09EB0003 		add	r3, r9, r0
 4921              	.LVL522:
1739:src/display.c **** 		*p = '0';
 4922              		.loc 1 1739 2 is_stmt 1 view .LVU1523
1739:src/display.c **** 		*p = '0';
 4923              		.loc 1 1739 6 is_stmt 0 view .LVU1524
 4924 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
1739:src/display.c **** 		*p = '0';
 4925              		.loc 1 1739 5 view .LVU1525
 4926 0156 3429     		cmp	r1, #52
 4927 0158 21D9     		bls	.L479
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4928              		.loc 1 1740 3 is_stmt 1 view .LVU1526
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4929              		.loc 1 1740 6 is_stmt 0 view .LVU1527
 4930 015a 3021     		movs	r1, #48
 4931 015c 09F80010 		strb	r1, [r9, r0]
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4932              		.loc 1 1741 3 is_stmt 1 view .LVU1528
 4933              	.LVL523:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4934              		.loc 1 1741 22 view .LVU1529
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4935              		.loc 1 1741 3 is_stmt 0 view .LVU1530
 4936 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4937 0164 3929     		cmp	r1, #57
 4938 0166 40F0A683 		bne	.L480
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4939              		.loc 1 1741 10 view .LVU1531
 4940 016a 4946     		mov	r1, r9
 4941              	.LVL524:
 4942              	.L481:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4943              		.loc 1 1741 37 is_stmt 1 discriminator 3 view .LVU1532
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4944              		.loc 1 1741 33 discriminator 3 view .LVU1533
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4945              		.loc 1 1741 22 discriminator 3 view .LVU1534
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4946              		.loc 1 1741 3 is_stmt 0 discriminator 3 view .LVU1535
 4947 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4948              	.LVL525:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4949              		.loc 1 1741 3 discriminator 3 view .LVU1536
 4950 0170 BCF1390F 		cmp	ip, #57
 4951 0174 FAD0     		beq	.L481
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
ARM GAS  /tmp/ccZMW3We.s 			page 160


 4952              		.loc 1 1742 3 is_stmt 1 view .LVU1537
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4953              		.loc 1 1742 6 is_stmt 0 view .LVU1538
 4954 0176 8B42     		cmp	r3, r1
 4955 0178 00F0FD80 		beq	.L661
 4956              	.LVL526:
 4957              	.L551:
1751:src/display.c **** 				*p = '0';
 4958              		.loc 1 1751 10 is_stmt 1 view .LVU1539
1751:src/display.c **** 				*p = '0';
 4959              		.loc 1 1751 11 is_stmt 0 view .LVU1540
 4960 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
1751:src/display.c **** 				*p = '0';
 4961              		.loc 1 1751 10 view .LVU1541
 4962 0180 3929     		cmp	r1, #57
 4963 0182 4A44     		add	r2, r2, r9
 4964              	.LVL527:
1751:src/display.c **** 				*p = '0';
 4965              		.loc 1 1751 10 view .LVU1542
 4966 0184 07D1     		bne	.L484
1752:src/display.c **** 			(*p)++;
 4967              		.loc 1 1752 8 view .LVU1543
 4968 0186 4FF0300C 		mov	ip, #48
 4969              	.L483:
1752:src/display.c **** 			(*p)++;
 4970              		.loc 1 1752 5 is_stmt 1 view .LVU1544
1752:src/display.c **** 			(*p)++;
 4971              		.loc 1 1752 8 is_stmt 0 view .LVU1545
 4972 018a 82F800C0 		strb	ip, [r2]
1751:src/display.c **** 				*p = '0';
 4973              		.loc 1 1751 10 is_stmt 1 view .LVU1546
 4974              	.LVL528:
1751:src/display.c **** 				*p = '0';
 4975              		.loc 1 1751 11 is_stmt 0 view .LVU1547
 4976 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 4977              	.LVL529:
1751:src/display.c **** 				*p = '0';
 4978              		.loc 1 1751 10 view .LVU1548
 4979 0192 3929     		cmp	r1, #57
 4980 0194 F9D0     		beq	.L483
 4981              	.L484:
1753:src/display.c **** 		}
 4982              		.loc 1 1753 4 is_stmt 1 view .LVU1549
1753:src/display.c **** 		}
 4983              		.loc 1 1753 8 is_stmt 0 view .LVU1550
 4984 0196 0131     		adds	r1, r1, #1
 4985 0198 1170     		strb	r1, [r2]
 4986              	.LVL530:
 4987              	.L648:
1753:src/display.c **** 		}
 4988              		.loc 1 1753 8 view .LVU1551
 4989 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 4990              	.L479:
1758:src/display.c **** 
 4991              		.loc 1 1758 2 is_stmt 1 view .LVU1552
 4992              	.LVL531:
1758:src/display.c **** 
ARM GAS  /tmp/ccZMW3We.s 			page 161


 4993              		.loc 1 1758 45 view .LVU1553
1758:src/display.c **** 
 4994              		.loc 1 1758 2 is_stmt 0 view .LVU1554
 4995 019e 29B1     		cbz	r1, .L490
 4996              	.LVL532:
 4997              	.L550:
1758:src/display.c **** 
 4998              		.loc 1 1758 62 view .LVU1555
 4999 01a0 3021     		movs	r1, #48
 5000              	.L491:
1758:src/display.c **** 
 5001              		.loc 1 1758 68 is_stmt 1 discriminator 3 view .LVU1556
1758:src/display.c **** 
 5002              		.loc 1 1758 57 discriminator 3 view .LVU1557
 5003              	.LVL533:
1758:src/display.c **** 
 5004              		.loc 1 1758 62 is_stmt 0 discriminator 3 view .LVU1558
 5005 01a2 03F8011B 		strb	r1, [r3], #1
 5006              	.LVL534:
1758:src/display.c **** 
 5007              		.loc 1 1758 45 is_stmt 1 discriminator 3 view .LVU1559
1758:src/display.c **** 
 5008              		.loc 1 1758 2 is_stmt 0 discriminator 3 view .LVU1560
 5009 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5010 01a8 002A     		cmp	r2, #0
 5011 01aa FAD1     		bne	.L491
 5012              	.L490:
1760:src/display.c **** 	switch (mode) {
 5013              		.loc 1 1760 2 is_stmt 1 view .LVU1561
 5014              	.LVL535:
1761:src/display.c **** 	default:
 5015              		.loc 1 1761 2 view .LVU1562
 5016 01ac 022F     		cmp	r7, #2
 5017 01ae 5AD0     		beq	.L573
 5018 01b0 032F     		cmp	r7, #3
 5019 01b2 00F00481 		beq	.L493
 5020 01b6 012F     		cmp	r7, #1
 5021 01b8 00F0B681 		beq	.L494
1764:src/display.c **** 		if (count != *display_digits)
 5022              		.loc 1 1764 3 view .LVU1563
 5023              	.LVL536:
1764:src/display.c **** 		if (count != *display_digits)
 5024              		.loc 1 1764 33 view .LVU1564
1764:src/display.c **** 		if (count != *display_digits)
 5025              		.loc 1 1764 41 is_stmt 0 view .LVU1565
 5026 01bc 22AB     		add	r3, sp, #136
 5027 01be 3344     		add	r3, r3, r6
1764:src/display.c **** 		if (count != *display_digits)
 5028              		.loc 1 1764 3 view .LVU1566
 5029 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5030 01c4 302B     		cmp	r3, #48
 5031 01c6 40F06783 		bne	.L567
 5032 01ca 711E     		subs	r1, r6, #1
 5033 01cc 4944     		add	r1, r1, r9
1764:src/display.c **** 		if (count != *display_digits)
 5034              		.loc 1 1764 14 view .LVU1567
 5035 01ce 3346     		mov	r3, r6
ARM GAS  /tmp/ccZMW3We.s 			page 162


 5036              	.LVL537:
 5037              	.L496:
1764:src/display.c **** 		if (count != *display_digits)
 5038              		.loc 1 1764 65 is_stmt 1 discriminator 3 view .LVU1568
1764:src/display.c **** 		if (count != *display_digits)
 5039              		.loc 1 1764 57 discriminator 3 view .LVU1569
1764:src/display.c **** 		if (count != *display_digits)
 5040              		.loc 1 1764 41 is_stmt 0 discriminator 3 view .LVU1570
 5041 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
1764:src/display.c **** 		if (count != *display_digits)
 5042              		.loc 1 1764 3 discriminator 3 view .LVU1571
 5043 01d4 3028     		cmp	r0, #48
 5044 01d6 1A46     		mov	r2, r3
1764:src/display.c **** 		if (count != *display_digits)
 5045              		.loc 1 1764 62 discriminator 3 view .LVU1572
 5046 01d8 03F1FF33 		add	r3, r3, #-1
 5047              	.LVL538:
1764:src/display.c **** 		if (count != *display_digits)
 5048              		.loc 1 1764 33 is_stmt 1 discriminator 3 view .LVU1573
1764:src/display.c **** 		if (count != *display_digits)
 5049              		.loc 1 1764 3 is_stmt 0 discriminator 3 view .LVU1574
 5050 01dc F8D0     		beq	.L496
1765:src/display.c **** 			count++;
 5051              		.loc 1 1765 3 is_stmt 1 view .LVU1575
1765:src/display.c **** 			count++;
 5052              		.loc 1 1765 6 is_stmt 0 view .LVU1576
 5053 01de 9E42     		cmp	r6, r3
 5054 01e0 08BF     		it	eq
 5055 01e2 1A46     		moveq	r2, r3
 5056              	.LVL539:
 5057              	.L495:
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5058              		.loc 1 1768 3 is_stmt 1 view .LVU1577
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5059              		.loc 1 1768 6 is_stmt 0 view .LVU1578
 5060 01e4 B542     		cmp	r5, r6
 5061 01e6 80F20381 		bge	.L497
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5062              		.loc 1 1768 46 discriminator 1 view .LVU1579
 5063 01ea 931B     		subs	r3, r2, r6
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5064              		.loc 1 1768 30 discriminator 1 view .LVU1580
 5065 01ec AB42     		cmp	r3, r5
 5066 01ee 00F3FF80 		bgt	.L497
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
 5067              		.loc 1 1793 10 is_stmt 1 view .LVU1581
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
 5068              		.loc 1 1793 13 is_stmt 0 view .LVU1582
 5069 01f2 002D     		cmp	r5, #0
 5070 01f4 C0F27583 		blt	.L505
 5071 01f8 6B1C     		adds	r3, r5, #1
1795:src/display.c **** 					*obp++ = ',';
 5072              		.loc 1 1795 28 view .LVU1583
 5073 01fa DFF834A1 		ldr	r10, .L670+8
 5074 01fe 0293     		str	r3, [sp, #8]
 5075 0200 09EB0300 		add	r0, r9, r3
1760:src/display.c **** 	switch (mode) {
ARM GAS  /tmp/ccZMW3We.s 			page 163


 5076              		.loc 1 1760 4 view .LVU1584
 5077 0204 CC46     		mov	ip, r9
1565:src/display.c **** 	int odig = 0;
 5078              		.loc 1 1565 15 view .LVU1585
 5079 0206 4146     		mov	r1, r8
 5080 0208 0192     		str	r2, [sp, #4]
 5081              	.LVL540:
1565:src/display.c **** 	int odig = 0;
 5082              		.loc 1 1565 15 view .LVU1586
 5083 020a 05E0     		b	.L506
 5084              	.LVL541:
 5085              	.L509:
1796:src/display.c **** 				*obp++ = *p++;
 5086              		.loc 1 1796 6 is_stmt 1 view .LVU1587
1795:src/display.c **** 					*obp++ = ',';
 5087              		.loc 1 1795 15 is_stmt 0 view .LVU1588
 5088 020c 022F     		cmp	r7, #2
1796:src/display.c **** 				*obp++ = *p++;
 5089              		.loc 1 1796 13 view .LVU1589
 5090 020e 05BF     		ittet	eq
 5091 0210 2C23     		moveq	r3, #44
 5092 0212 4B70     		strbeq	r3, [r1, #1]
1797:src/display.c **** 				odig++;
 5093              		.loc 1 1797 9 view .LVU1590
 5094 0214 0131     		addne	r1, r1, #1
 5095              	.LVL542:
1796:src/display.c **** 				*obp++ = *p++;
 5096              		.loc 1 1796 10 view .LVU1591
 5097 0216 0231     		addeq	r1, r1, #2
 5098              	.LVL543:
 5099              	.L506:
1797:src/display.c **** 				odig++;
 5100              		.loc 1 1797 5 is_stmt 1 discriminator 2 view .LVU1592
1797:src/display.c **** 				odig++;
 5101              		.loc 1 1797 12 is_stmt 0 discriminator 2 view .LVU1593
 5102 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5103              	.LVL544:
1795:src/display.c **** 					*obp++ = ',';
 5104              		.loc 1 1795 5 is_stmt 1 discriminator 2 view .LVU1594
1797:src/display.c **** 				odig++;
 5105              		.loc 1 1797 12 is_stmt 0 discriminator 2 view .LVU1595
 5106 021c 0B70     		strb	r3, [r1]
1798:src/display.c **** 			}
 5107              		.loc 1 1798 5 is_stmt 1 discriminator 2 view .LVU1596
 5108              	.LVL545:
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5109              		.loc 1 1794 21 discriminator 2 view .LVU1597
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5110              		.loc 1 1794 13 discriminator 2 view .LVU1598
1795:src/display.c **** 					*obp++ = ',';
 5111              		.loc 1 1795 28 is_stmt 0 discriminator 2 view .LVU1599
 5112 021e A9EB0C03 		sub	r3, r9, ip
 5113 0222 2B44     		add	r3, r3, r5
 5114 0224 8AFB0327 		smull	r2, r7, r10, r3
 5115 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5116 022c 07EB4707 		add	r7, r7, r7, lsl #1
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
ARM GAS  /tmp/ccZMW3We.s 			page 164


 5117              		.loc 1 1794 4 discriminator 2 view .LVU1600
 5118 0230 6045     		cmp	r0, ip
1795:src/display.c **** 					*obp++ = ',';
 5119              		.loc 1 1795 28 discriminator 2 view .LVU1601
 5120 0232 A3EB0707 		sub	r7, r3, r7
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5121              		.loc 1 1794 4 discriminator 2 view .LVU1602
 5122 0236 E9D1     		bne	.L509
 5123 0238 019A     		ldr	r2, [sp, #4]
 5124 023a 029F     		ldr	r7, [sp, #8]
1800:src/display.c **** 			if (count > (exp + 1)) {
 5125              		.loc 1 1800 4 is_stmt 1 view .LVU1603
1800:src/display.c **** 			if (count > (exp + 1)) {
 5126              		.loc 1 1800 11 is_stmt 0 view .LVU1604
 5127 023c 2E23     		movs	r3, #46
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5128              		.loc 1 1801 7 view .LVU1605
 5129 023e BA42     		cmp	r2, r7
1800:src/display.c **** 			if (count > (exp + 1)) {
 5130              		.loc 1 1800 11 view .LVU1606
 5131 0240 4B70     		strb	r3, [r1, #1]
1800:src/display.c **** 			if (count > (exp + 1)) {
 5132              		.loc 1 1800 8 view .LVU1607
 5133 0242 01F10203 		add	r3, r1, #2
 5134              	.LVL546:
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5135              		.loc 1 1801 4 is_stmt 1 view .LVU1608
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5136              		.loc 1 1801 7 is_stmt 0 view .LVU1609
 5137 0246 2BDD     		ble	.L503
 5138 0248 A2EB050C 		sub	ip, r2, r5
 5139              	.LVL547:
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5140              		.loc 1 1801 7 view .LVU1610
 5141 024c 8C44     		add	ip, ip, r1
 5142 024e 0131     		adds	r1, r1, #1
 5143              	.LVL548:
 5144              	.L510:
1803:src/display.c **** 					odig++;
 5145              		.loc 1 1803 6 is_stmt 1 discriminator 3 view .LVU1611
1803:src/display.c **** 					odig++;
 5146              		.loc 1 1803 13 is_stmt 0 discriminator 3 view .LVU1612
 5147 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5148              	.LVL549:
1803:src/display.c **** 					odig++;
 5149              		.loc 1 1803 13 discriminator 3 view .LVU1613
 5150 0254 01F8017F 		strb	r7, [r1, #1]!
1804:src/display.c **** 				}
 5151              		.loc 1 1804 6 is_stmt 1 discriminator 3 view .LVU1614
1802:src/display.c **** 					*obp++ = *p++;
 5152              		.loc 1 1802 28 discriminator 3 view .LVU1615
1802:src/display.c **** 					*obp++ = *p++;
 5153              		.loc 1 1802 19 discriminator 3 view .LVU1616
1802:src/display.c **** 					*obp++ = *p++;
 5154              		.loc 1 1802 5 is_stmt 0 discriminator 3 view .LVU1617
 5155 0258 8C45     		cmp	ip, r1
 5156 025a F9D1     		bne	.L510
ARM GAS  /tmp/ccZMW3We.s 			page 165


 5157 025c E943     		mvns	r1, r5
 5158 025e 1144     		add	r1, r1, r2
 5159 0260 0B44     		add	r3, r3, r1
 5160              	.LVL550:
1804:src/display.c **** 				}
 5161              		.loc 1 1804 10 view .LVU1618
 5162 0262 1746     		mov	r7, r2
 5163 0264 1CE0     		b	.L503
 5164              	.LVL551:
 5165              	.L573:
1860:src/display.c **** 		case -1:
 5166              		.loc 1 1860 15 view .LVU1619
 5167 0266 0127     		movs	r7, #1
 5168              	.LVL552:
 5169              	.L649:
1860:src/display.c **** 		case -1:
 5170              		.loc 1 1860 15 view .LVU1620
 5171 0268 4146     		mov	r1, r8
 5172              	.LVL553:
 5173              	.L492:
1874:src/display.c **** 		};
 5174              		.loc 1 1874 4 is_stmt 1 view .LVU1621
1875:src/display.c **** 	// Falling through
 5175              		.loc 1 1875 4 view .LVU1622
1879:src/display.c **** 		odig++;
 5176              		.loc 1 1879 3 view .LVU1623
1879:src/display.c **** 		odig++;
 5177              		.loc 1 1879 14 is_stmt 0 view .LVU1624
 5178 026a 4A46     		mov	r2, r9
 5179              	.LVL554:
1879:src/display.c **** 		odig++;
 5180              		.loc 1 1879 10 view .LVU1625
 5181 026c 0B46     		mov	r3, r1
 5182 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5183              	.LVL555:
1879:src/display.c **** 		odig++;
 5184              		.loc 1 1879 10 view .LVU1626
 5185 0272 03F8020B 		strb	r0, [r3], #2
1880:src/display.c **** 		*obp++ = '.';
 5186              		.loc 1 1880 3 is_stmt 1 view .LVU1627
1881:src/display.c **** 		dd--;
 5187              		.loc 1 1881 3 view .LVU1628
 5188              	.LVL556:
1883:src/display.c **** 			*obp++ = *p++;
 5189              		.loc 1 1883 9 is_stmt 0 view .LVU1629
 5190 0276 BAF1000F 		cmp	r10, #0
1881:src/display.c **** 		dd--;
 5191              		.loc 1 1881 10 view .LVU1630
 5192 027a 4FF02E00 		mov	r0, #46
 5193 027e 4870     		strb	r0, [r1, #1]
1882:src/display.c **** 		while (dd-- >= 0) {
 5194              		.loc 1 1882 3 is_stmt 1 view .LVU1631
1883:src/display.c **** 			*obp++ = *p++;
 5195              		.loc 1 1883 3 view .LVU1632
1883:src/display.c **** 			*obp++ = *p++;
 5196              		.loc 1 1883 9 view .LVU1633
1883:src/display.c **** 			*obp++ = *p++;
ARM GAS  /tmp/ccZMW3We.s 			page 166


 5197              		.loc 1 1883 9 is_stmt 0 view .LVU1634
 5198 0280 40F30F83 		ble	.L570
1883:src/display.c **** 			*obp++ = *p++;
 5199              		.loc 1 1883 9 view .LVU1635
 5200 0284 0AF10100 		add	r0, r10, #1
 5201 0288 0131     		adds	r1, r1, #1
 5202 028a 8144     		add	r9, r9, r0
 5203              	.LVL557:
 5204              	.L533:
1884:src/display.c **** 			odig++;
 5205              		.loc 1 1884 4 is_stmt 1 view .LVU1636
1884:src/display.c **** 			odig++;
 5206              		.loc 1 1884 11 is_stmt 0 view .LVU1637
 5207 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5208              	.LVL558:
1884:src/display.c **** 			odig++;
 5209              		.loc 1 1884 11 view .LVU1638
 5210 0290 01F8010F 		strb	r0, [r1, #1]!
1885:src/display.c **** 		}
 5211              		.loc 1 1885 4 is_stmt 1 view .LVU1639
1883:src/display.c **** 			*obp++ = *p++;
 5212              		.loc 1 1883 9 view .LVU1640
1883:src/display.c **** 			*obp++ = *p++;
 5213              		.loc 1 1883 9 is_stmt 0 view .LVU1641
 5214 0294 4A45     		cmp	r2, r9
 5215 0296 F9D1     		bne	.L533
 5216 0298 5344     		add	r3, r3, r10
 5217 029a 5744     		add	r7, r7, r10
1887:src/display.c **** 	}
 5218              		.loc 1 1887 12 view .LVU1642
 5219 029c 4FF0010B 		mov	fp, #1
 5220              	.LVL559:
 5221              	.L503:
1896:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
 5222              		.loc 1 1896 2 is_stmt 1 view .LVU1643
1902:src/display.c **** 	if (odig > *display_digits)
 5223              		.loc 1 1902 2 view .LVU1644
 5224 02a0 B742     		cmp	r7, r6
 5225 02a2 A8BF     		it	ge
 5226 02a4 3746     		movge	r7, r6
 5227              	.LVL560:
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5228              		.loc 1 1905 23 is_stmt 0 view .LVU1645
 5229 02a6 F61B     		subs	r6, r6, r7
1902:src/display.c **** 	if (odig > *display_digits)
 5230              		.loc 1 1902 7 view .LVU1646
 5231 02a8 0022     		movs	r2, #0
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5232              		.loc 1 1905 4 view .LVU1647
 5233 02aa 06EBC606 		add	r6, r6, r6, lsl #3
1902:src/display.c **** 	if (odig > *display_digits)
 5234              		.loc 1 1902 7 view .LVU1648
 5235 02ae 1A70     		strb	r2, [r3]
1903:src/display.c **** 		odig = *display_digits;
 5236              		.loc 1 1903 2 is_stmt 1 view .LVU1649
 5237              	.LVL561:
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
ARM GAS  /tmp/ccZMW3We.s 			page 167


 5238              		.loc 1 1905 2 view .LVU1650
1906:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5239              		.loc 1 1906 2 view .LVU1651
1908:src/display.c **** 		if (res) *res++ = '-';
 5240              		.loc 1 1908 2 view .LVU1652
1908:src/display.c **** 		if (res) *res++ = '-';
 5241              		.loc 1 1908 5 is_stmt 0 view .LVU1653
 5242 02b0 BEF1000F 		cmp	lr, #0
 5243 02b4 05D0     		beq	.L534
1909:src/display.c **** 		else {
 5244              		.loc 1 1909 3 is_stmt 1 view .LVU1654
1909:src/display.c **** 		else {
 5245              		.loc 1 1909 6 is_stmt 0 view .LVU1655
 5246 02b6 002C     		cmp	r4, #0
 5247 02b8 00F0B281 		beq	.L535
1909:src/display.c **** 		else {
 5248              		.loc 1 1909 12 is_stmt 1 discriminator 1 view .LVU1656
 5249              	.LVL562:
1909:src/display.c **** 		else {
 5250              		.loc 1 1909 19 is_stmt 0 discriminator 1 view .LVU1657
 5251 02bc 2D22     		movs	r2, #45
 5252 02be 04F8012B 		strb	r2, [r4], #1
 5253              	.LVL563:
 5254              	.L534:
1917:src/display.c **** 		if (c == '.') {
 5255              		.loc 1 1917 12 is_stmt 1 discriminator 1 view .LVU1658
1917:src/display.c **** 		if (c == '.') {
 5256              		.loc 1 1917 18 is_stmt 0 discriminator 1 view .LVU1659
 5257 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5258              	.LVL564:
1917:src/display.c **** 		if (c == '.') {
 5259              		.loc 1 1917 2 discriminator 1 view .LVU1660
 5260 02c6 E2B1     		cbz	r2, .L536
1917:src/display.c **** 		if (c == '.') {
 5261              		.loc 1 1917 31 view .LVU1661
 5262 02c8 6B2E     		cmp	r6, #107
 5263 02ca 1ADC     		bgt	.L536
 5264              	.LVL565:
 5265              	.L537:
 5266              	.LBB371:
 5267              	.LBB372:
 360:src/display.c **** 	} else {
 5268              		.loc 1 360 15 view .LVU1662
 5269 02cc 3946     		mov	r1, r7
 5270              	.LBE372:
 5271              	.LBE371:
1921:src/display.c **** 		} else {
 5272              		.loc 1 1921 10 view .LVU1663
 5273 02ce DFF864A0 		ldr	r10, .L670+12
1919:src/display.c **** 		} else if (c == ',') {
 5274              		.loc 1 1919 10 view .LVU1664
 5275 02d2 DFF86490 		ldr	r9, .L670+16
 5276              	.LBB376:
 5277              	.LBB373:
 360:src/display.c **** 	} else {
 5278              		.loc 1 360 15 view .LVU1665
 5279 02d6 1F46     		mov	r7, r3
ARM GAS  /tmp/ccZMW3We.s 			page 168


 5280              	.LVL566:
 360:src/display.c **** 	} else {
 5281              		.loc 1 360 15 view .LVU1666
 5282 02d8 0B46     		mov	r3, r1
 5283              	.LVL567:
 5284              	.L546:
 360:src/display.c **** 	} else {
 5285              		.loc 1 360 15 view .LVU1667
 5286              	.LBE373:
 5287              	.LBE376:
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5288              		.loc 1 1918 3 is_stmt 1 view .LVU1668
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5289              		.loc 1 1918 6 is_stmt 0 view .LVU1669
 5290 02da 2E2A     		cmp	r2, #46
 5291 02dc 00F0DB80 		beq	.L662
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5292              		.loc 1 1920 10 is_stmt 1 view .LVU1670
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5293              		.loc 1 1920 13 is_stmt 0 view .LVU1671
 5294 02e0 2C2A     		cmp	r2, #44
 5295 02e2 00F0E880 		beq	.L663
1923:src/display.c **** 			j += SEGS_PER_DIGIT;
 5296              		.loc 1 1923 4 is_stmt 1 view .LVU1672
 5297              	.LVL568:
 5298              	.LBB377:
 5299              	.LBI377:
 395:src/display.c **** 	if (res) *res++ = ch;
 5300              		.loc 1 395 14 view .LVU1673
 5301              	.LBB378:
 396:src/display.c **** 	else	set_dig(base, ch);
 5302              		.loc 1 396 2 view .LVU1674
 396:src/display.c **** 	else	set_dig(base, ch);
 5303              		.loc 1 396 5 is_stmt 0 view .LVU1675
 5304 02e6 002C     		cmp	r4, #0
 5305 02e8 00F0F280 		beq	.L544
 396:src/display.c **** 	else	set_dig(base, ch);
 5306              		.loc 1 396 11 is_stmt 1 view .LVU1676
 5307              	.LVL569:
 396:src/display.c **** 	else	set_dig(base, ch);
 5308              		.loc 1 396 18 is_stmt 0 view .LVU1677
 5309 02ec 04F8012B 		strb	r2, [r4], #1
 5310              	.LVL570:
 5311              	.L545:
 398:src/display.c **** }
 5312              		.loc 1 398 2 is_stmt 1 view .LVU1678
 398:src/display.c **** }
 5313              		.loc 1 398 2 is_stmt 0 view .LVU1679
 5314              	.LBE378:
 5315              	.LBE377:
1924:src/display.c **** 		}
 5316              		.loc 1 1924 4 is_stmt 1 view .LVU1680
1917:src/display.c **** 		if (c == '.') {
 5317              		.loc 1 1917 18 is_stmt 0 view .LVU1681
 5318 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5319              	.LVL571:
1924:src/display.c **** 		}
ARM GAS  /tmp/ccZMW3We.s 			page 169


 5320              		.loc 1 1924 6 view .LVU1682
 5321 02f4 0936     		adds	r6, r6, #9
 5322              	.LVL572:
1917:src/display.c **** 		if (c == '.') {
 5323              		.loc 1 1917 53 is_stmt 1 view .LVU1683
1917:src/display.c **** 		if (c == '.') {
 5324              		.loc 1 1917 12 view .LVU1684
1917:src/display.c **** 		if (c == '.') {
 5325              		.loc 1 1917 2 is_stmt 0 view .LVU1685
 5326 02f6 0AB1     		cbz	r2, .L645
1917:src/display.c **** 		if (c == '.') {
 5327              		.loc 1 1917 31 discriminator 3 view .LVU1686
 5328 02f8 6B2E     		cmp	r6, #107
 5329 02fa EEDD     		ble	.L546
 5330              	.L645:
1917:src/display.c **** 		if (c == '.') {
 5331              		.loc 1 1917 31 discriminator 3 view .LVU1687
 5332 02fc 1A46     		mov	r2, r3
 5333              	.LVL573:
1917:src/display.c **** 		if (c == '.') {
 5334              		.loc 1 1917 31 discriminator 3 view .LVU1688
 5335 02fe 3B46     		mov	r3, r7
 5336 0300 1746     		mov	r7, r2
 5337              	.LVL574:
 5338              	.L536:
1937:src/display.c **** 		set_exp(exp, 0, res);
 5339              		.loc 1 1937 2 is_stmt 1 view .LVU1689
1937:src/display.c **** 		set_exp(exp, 0, res);
 5340              		.loc 1 1937 5 is_stmt 0 view .LVU1690
 5341 0302 BBF1000F 		cmp	fp, #0
 5342 0306 40F0F880 		bne	.L664
 5343              	.L547:
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5344              		.loc 1 1940 2 is_stmt 1 view .LVU1691
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5345              		.loc 1 1940 5 is_stmt 0 view .LVU1692
 5346 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5347 030e 2E2B     		cmp	r3, #46
 5348 0310 00F0E580 		beq	.L665
 5349              	.L548:
1942:src/display.c **** }
 5350              		.loc 1 1942 2 is_stmt 1 view .LVU1693
1942:src/display.c **** }
 5351              		.loc 1 1942 18 is_stmt 0 view .LVU1694
 5352 0314 009B     		ldr	r3, [sp]
 5353 0316 1F60     		str	r7, [r3]
 5354              	.LVL575:
 5355              	.L435:
1943:src/display.c **** 
 5356              		.loc 1 1943 1 view .LVU1695
 5357 0318 23B0     		add	sp, sp, #140
 5358              		.cfi_remember_state
 5359              		.cfi_def_cfa_offset 36
 5360              	.LVL576:
1943:src/display.c **** 
 5361              		.loc 1 1943 1 view .LVU1696
 5362              		@ sp needed
ARM GAS  /tmp/ccZMW3We.s 			page 170


 5363 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5364              	.LVL577:
 5365              	.L443:
 5366              		.cfi_restore_state
1642:src/display.c **** 
 5367              		.loc 1 1642 3 is_stmt 1 view .LVU1697
 5368 031e 4146     		mov	r1, r8
 5369 0320 3046     		mov	r0, r6
 5370 0322 FFF7FEFF 		bl	decNumberToString
 5371              	.LVL578:
 5372 0326 A5E6     		b	.L445
 5373              	.L671:
 5374              		.align	2
 5375              	.L670:
 5376 0328 00000000 		.word	main_ram
 5377 032c 00000000 		.word	StateWhileOn
 5378 0330 56555555 		.word	1431655766
 5379 0334 00000000 		.word	.LANCHOR0
 5380 0338 00000000 		.word	.LANCHOR1
 5381              	.LVL579:
 5382              	.L436:
1600:src/display.c **** 			if (State2.hms) {
 5383              		.loc 1 1600 3 view .LVU1698
1600:src/display.c **** 			if (State2.hms) {
 5384              		.loc 1 1600 24 is_stmt 0 view .LVU1699
 5385 033c C14B     		ldr	r3, .L672
 5386 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1600:src/display.c **** 			if (State2.hms) {
 5387              		.loc 1 1600 21 view .LVU1700
 5388 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1600:src/display.c **** 			if (State2.hms) {
 5389              		.loc 1 1600 24 view .LVU1701
 5390 0342 01F00201 		and	r1, r1, #2
1600:src/display.c **** 			if (State2.hms) {
 5391              		.loc 1 1600 21 view .LVU1702
 5392 0346 1143     		orrs	r1, r1, r2
 5393 0348 7FF46EAE 		bne	.L439
1601:src/display.c **** 				set_x_hms(z, res);
 5394              		.loc 1 1601 4 is_stmt 1 view .LVU1703
1601:src/display.c **** 				set_x_hms(z, res);
 5395              		.loc 1 1601 8 is_stmt 0 view .LVU1704
 5396 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1601:src/display.c **** 				set_x_hms(z, res);
 5397              		.loc 1 1601 7 view .LVU1705
 5398 034e DA07     		lsls	r2, r3, #31
 5399 0350 00F19E82 		bmi	.L666
1605:src/display.c **** 				if (set_x_fract(z, res))
 5400              		.loc 1 1605 9 is_stmt 1 view .LVU1706
1605:src/display.c **** 				if (set_x_fract(z, res))
 5401              		.loc 1 1605 13 is_stmt 0 view .LVU1707
 5402 0354 BC4B     		ldr	r3, .L672+4
 5403 0356 1B68     		ldr	r3, [r3]
 5404 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1605:src/display.c **** 				if (set_x_fract(z, res))
 5405              		.loc 1 1605 12 view .LVU1708
 5406 035c 9B06     		lsls	r3, r3, #26
 5407 035e 7FF563AE 		bpl	.L439
ARM GAS  /tmp/ccZMW3We.s 			page 171


1606:src/display.c **** 					return;
 5408              		.loc 1 1606 5 is_stmt 1 view .LVU1709
1606:src/display.c **** 					return;
 5409              		.loc 1 1606 9 is_stmt 0 view .LVU1710
 5410 0362 2146     		mov	r1, r4
 5411 0364 3046     		mov	r0, r6
 5412 0366 FFF7FEFF 		bl	set_x_fract
 5413              	.LVL580:
1606:src/display.c **** 					return;
 5414              		.loc 1 1606 8 view .LVU1711
 5415 036a 0028     		cmp	r0, #0
 5416 036c 3FF45CAE 		beq	.L439
 5417 0370 D2E7     		b	.L435
 5418              	.LVL581:
 5419              	.L559:
1688:src/display.c **** 	else exp = s_to_i(q+1);
 5420              		.loc 1 1688 21 view .LVU1712
 5421 0372 0546     		mov	r5, r0
 5422 0374 A5E6     		b	.L459
 5423              	.LVL582:
 5424              	.L661:
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 5425              		.loc 1 1742 6 view .LVU1713
 5426 0376 4A46     		mov	r2, r9
1743:src/display.c **** 			mantissa[0] = '1';
 5427              		.loc 1 1743 39 view .LVU1714
 5428 0378 4FF0300C 		mov	ip, #48
 5429              	.LVL583:
 5430              	.L485:
1743:src/display.c **** 			mantissa[0] = '1';
 5431              		.loc 1 1743 45 is_stmt 1 discriminator 3 view .LVU1715
1743:src/display.c **** 			mantissa[0] = '1';
 5432              		.loc 1 1743 34 discriminator 3 view .LVU1716
1743:src/display.c **** 			mantissa[0] = '1';
 5433              		.loc 1 1743 39 is_stmt 0 discriminator 3 view .LVU1717
 5434 037c 02F801CB 		strb	ip, [r2], #1
 5435              	.LVL584:
1743:src/display.c **** 			mantissa[0] = '1';
 5436              		.loc 1 1743 23 is_stmt 1 discriminator 3 view .LVU1718
1743:src/display.c **** 			mantissa[0] = '1';
 5437              		.loc 1 1743 4 is_stmt 0 discriminator 3 view .LVU1719
 5438 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5439 0382 3929     		cmp	r1, #57
 5440 0384 FAD0     		beq	.L485
 5441              	.LVL585:
 5442              	.L552:
1744:src/display.c **** 			exp++;
 5443              		.loc 1 1744 4 is_stmt 1 view .LVU1720
1744:src/display.c **** 			exp++;
 5444              		.loc 1 1744 16 is_stmt 0 view .LVU1721
 5445 0386 3122     		movs	r2, #49
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5446              		.loc 1 1746 7 view .LVU1722
 5447 0388 012F     		cmp	r7, #1
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5448              		.loc 1 1745 7 view .LVU1723
 5449 038a 05F10105 		add	r5, r5, #1
ARM GAS  /tmp/ccZMW3We.s 			page 172


 5450              	.LVL586:
1744:src/display.c **** 			exp++;
 5451              		.loc 1 1744 16 view .LVU1724
 5452 038e 8DF84820 		strb	r2, [sp, #72]
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5453              		.loc 1 1745 4 is_stmt 1 view .LVU1725
 5454              	.LVL587:
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5455              		.loc 1 1746 4 view .LVU1726
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5456              		.loc 1 1746 7 is_stmt 0 view .LVU1727
 5457 0392 7FF402AF 		bne	.L648
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5458              		.loc 1 1746 25 discriminator 1 view .LVU1728
 5459 0396 AE42     		cmp	r6, r5
 5460 0398 00F3C180 		bgt	.L487
1747:src/display.c **** 				extra_digits = 0;
 5461              		.loc 1 1747 5 is_stmt 1 view .LVU1729
1747:src/display.c **** 				extra_digits = 0;
 5462              		.loc 1 1747 25 is_stmt 0 view .LVU1730
 5463 039c AA4B     		ldr	r3, .L672+4
 5464              	.LVL588:
1747:src/display.c **** 				extra_digits = 0;
 5465              		.loc 1 1747 25 view .LVU1731
 5466 039e 1B68     		ldr	r3, [r3]
 5467 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1747:src/display.c **** 				extra_digits = 0;
 5468              		.loc 1 1747 34 view .LVU1732
 5469 03a4 D806     		lsls	r0, r3, #27
 5470              	.LVL589:
1747:src/display.c **** 				extra_digits = 0;
 5471              		.loc 1 1747 34 view .LVU1733
 5472 03a6 40F1C082 		bpl	.L667
 5473              	.LVL590:
1758:src/display.c **** 
 5474              		.loc 1 1758 2 is_stmt 1 view .LVU1734
1758:src/display.c **** 
 5475              		.loc 1 1758 40 is_stmt 0 view .LVU1735
 5476 03aa 0AF10102 		add	r2, r10, #1
1758:src/display.c **** 
 5477              		.loc 1 1758 9 view .LVU1736
 5478 03ae 09EB0203 		add	r3, r9, r2
 5479              	.LVL591:
1758:src/display.c **** 
 5480              		.loc 1 1758 45 is_stmt 1 view .LVU1737
1758:src/display.c **** 
 5481              		.loc 1 1758 2 is_stmt 0 view .LVU1738
 5482 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
1747:src/display.c **** 				extra_digits = 0;
 5483              		.loc 1 1747 34 view .LVU1739
 5484 03b6 0327     		movs	r7, #3
1758:src/display.c **** 
 5485              		.loc 1 1758 2 view .LVU1740
 5486 03b8 002A     		cmp	r2, #0
 5487 03ba 7FF4F1AE 		bne	.L550
 5488              	.LVL592:
 5489              	.L493:
ARM GAS  /tmp/ccZMW3We.s 			page 173


1860:src/display.c **** 		case -1:
 5490              		.loc 1 1860 3 is_stmt 1 view .LVU1741
1860:src/display.c **** 		case -1:
 5491              		.loc 1 1860 15 is_stmt 0 view .LVU1742
 5492 03be A34B     		ldr	r3, .L672+8
 5493 03c0 83FB0523 		smull	r2, r3, r3, r5
 5494 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5495 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5496 03cc EB1A     		subs	r3, r5, r3
 5497 03ce 0233     		adds	r3, r3, #2
 5498 03d0 042B     		cmp	r3, #4
 5499 03d2 3FF648AF 		bhi	.L573
 5500 03d6 01A2     		adr	r2, .L530
 5501 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5502              		.p2align 2
 5503              	.L530:
 5504 03dc 0B050000 		.word	.L574+1
 5505 03e0 A7070000 		.word	.L529+1
 5506 03e4 67020000 		.word	.L573+1
 5507 03e8 0B050000 		.word	.L574+1
 5508 03ec A7070000 		.word	.L529+1
 5509              	.LVL593:
 5510              		.p2align 1
 5511              	.L497:
1769:src/display.c **** 			case -1:
 5512              		.loc 1 1769 4 is_stmt 1 view .LVU1743
1769:src/display.c **** 			case -1:
 5513              		.loc 1 1769 30 is_stmt 0 view .LVU1744
 5514 03f0 9549     		ldr	r1, .L672+4
1769:src/display.c **** 			case -1:
 5515              		.loc 1 1769 17 view .LVU1745
 5516 03f2 964B     		ldr	r3, .L672+8
1769:src/display.c **** 			case -1:
 5517              		.loc 1 1769 30 view .LVU1746
 5518 03f4 0968     		ldr	r1, [r1]
1769:src/display.c **** 			case -1:
 5519              		.loc 1 1769 17 view .LVU1747
 5520 03f6 83FB0503 		smull	r0, r3, r3, r5
1769:src/display.c **** 			case -1:
 5521              		.loc 1 1769 30 view .LVU1748
 5522 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
1769:src/display.c **** 			case -1:
 5523              		.loc 1 1769 17 view .LVU1749
 5524 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5525 0402 03EB4303 		add	r3, r3, r3, lsl #1
1769:src/display.c **** 			case -1:
 5526              		.loc 1 1769 30 view .LVU1750
 5527 0406 C1F30011 		ubfx	r1, r1, #4, #1
1769:src/display.c **** 			case -1:
 5528              		.loc 1 1769 17 view .LVU1751
 5529 040a EB1A     		subs	r3, r5, r3
1769:src/display.c **** 			case -1:
 5530              		.loc 1 1769 22 view .LVU1752
 5531 040c 03FB01F3 		mul	r3, r3, r1
 5532 0410 0233     		adds	r3, r3, #2
 5533 0412 042B     		cmp	r3, #4
 5534 0414 00F24282 		bhi	.L568
ARM GAS  /tmp/ccZMW3We.s 			page 174


 5535 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5536              	.L501:
 5537 041c DC01     		.2byte	(.L569-.L501)/2
 5538 041e FD01     		.2byte	(.L500-.L501)/2
 5539 0420 4002     		.2byte	(.L568-.L501)/2
 5540 0422 DC01     		.2byte	(.L569-.L501)/2
 5541 0424 FD01     		.2byte	(.L500-.L501)/2
 5542              	.LVL594:
 5543              		.p2align 1
 5544              	.L660:
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5545              		.loc 1 1725 3 is_stmt 1 view .LVU1753
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5546              		.loc 1 1725 6 is_stmt 0 view .LVU1754
 5547 0426 AE42     		cmp	r6, r5
 5548 0428 04DD     		ble	.L476
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5549              		.loc 1 1725 44 discriminator 1 view .LVU1755
 5550 042a CAF10003 		rsb	r3, r10, #0
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5551              		.loc 1 1725 35 discriminator 1 view .LVU1756
 5552 042e AB42     		cmp	r3, r5
 5553 0430 40F3C681 		ble	.L477
 5554              	.L476:
1726:src/display.c **** 		else {
 5555              		.loc 1 1726 4 is_stmt 1 view .LVU1757
1726:src/display.c **** 		else {
 5556              		.loc 1 1726 24 is_stmt 0 view .LVU1758
 5557 0434 844B     		ldr	r3, .L672+4
 5558 0436 1B68     		ldr	r3, [r3]
 5559 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1726:src/display.c **** 		else {
 5560              		.loc 1 1726 33 view .LVU1759
 5561 043c 13F0100F 		tst	r3, #16
 5562 0440 14BF     		ite	ne
 5563 0442 0327     		movne	r7, #3
 5564              	.LVL595:
1726:src/display.c **** 		else {
 5565              		.loc 1 1726 33 view .LVU1760
 5566 0444 0227     		moveq	r7, #2
 5567 0446 0022     		movs	r2, #0
 5568 0448 7FE6     		b	.L475
 5569              	.LVL596:
 5570              	.L658:
1726:src/display.c **** 		else {
 5571              		.loc 1 1726 33 view .LVU1761
 5572 044a 013D     		subs	r5, r5, #1
 5573 044c 7219     		adds	r2, r6, r5
 5574              	.L468:
1705:src/display.c **** 			exp--;
 5575              		.loc 1 1705 3 is_stmt 1 discriminator 1 view .LVU1762
1706:src/display.c **** 		while (*++q == '0');
 5576              		.loc 1 1706 4 discriminator 1 view .LVU1763
 5577 044e 951B     		subs	r5, r2, r6
 5578              	.LVL597:
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5579              		.loc 1 1707 9 discriminator 1 view .LVU1764
ARM GAS  /tmp/ccZMW3We.s 			page 175


1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5580              		.loc 1 1707 10 is_stmt 0 discriminator 1 view .LVU1765
 5581 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5582              	.LVL598:
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5583              		.loc 1 1707 3 discriminator 1 view .LVU1766
 5584 0454 302B     		cmp	r3, #48
 5585 0456 FAD0     		beq	.L468
1708:src/display.c **** 			*p++ = *q++;
 5586              		.loc 1 1708 9 is_stmt 1 view .LVU1767
 5587 0458 A3F13002 		sub	r2, r3, #48
 5588 045c 092A     		cmp	r2, #9
 5589 045e 3FF66EAE 		bhi	.L469
1571:src/display.c **** 	char *r;
 5590              		.loc 1 1571 8 is_stmt 0 view .LVU1768
 5591 0462 4A46     		mov	r2, r9
 5592              	.LVL599:
 5593              	.L470:
1709:src/display.c **** 	} else {
 5594              		.loc 1 1709 4 is_stmt 1 view .LVU1769
1709:src/display.c **** 	} else {
 5595              		.loc 1 1709 9 is_stmt 0 view .LVU1770
 5596 0464 02F8013B 		strb	r3, [r2], #1
 5597              	.LVL600:
1708:src/display.c **** 			*p++ = *q++;
 5598              		.loc 1 1708 9 is_stmt 1 view .LVU1771
1708:src/display.c **** 			*p++ = *q++;
 5599              		.loc 1 1708 10 is_stmt 0 view .LVU1772
 5600 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1708:src/display.c **** 			*p++ = *q++;
 5601              		.loc 1 1708 9 view .LVU1773
 5602 046c A3F13001 		sub	r1, r3, #48
 5603 0470 0929     		cmp	r1, #9
 5604 0472 F7D9     		bls	.L470
 5605 0474 63E6     		b	.L469
 5606              	.LVL601:
 5607              	.L656:
1699:src/display.c **** 		q++;
 5608              		.loc 1 1699 3 is_stmt 1 view .LVU1774
1700:src/display.c **** 	} else if (*q == '+')
 5609              		.loc 1 1700 3 view .LVU1775
1699:src/display.c **** 		q++;
 5610              		.loc 1 1699 12 is_stmt 0 view .LVU1776
 5611 0476 4FF0010E 		mov	lr, #1
 5612 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1700:src/display.c **** 	} else if (*q == '+')
 5613              		.loc 1 1700 4 view .LVU1777
 5614 047c 7644     		add	r6, r6, lr
 5615              	.LVL602:
1700:src/display.c **** 	} else if (*q == '+')
 5616              		.loc 1 1700 4 view .LVU1778
 5617 047e 35E6     		b	.L464
 5618              	.LVL603:
 5619              	.L654:
1668:src/display.c **** 		trimzeros = 1;
 5620              		.loc 1 1668 3 is_stmt 1 view .LVU1779
1668:src/display.c **** 		trimzeros = 1;
ARM GAS  /tmp/ccZMW3We.s 			page 176


 5621              		.loc 1 1668 10 is_stmt 0 view .LVU1780
 5622 0480 3046     		mov	r0, r6
 5623 0482 FFF7FEFF 		bl	std_round_fix
 5624              	.LVL604:
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5625              		.loc 1 1670 6 view .LVU1781
 5626 0486 009B     		ldr	r3, [sp]
 5627 0488 1D68     		ldr	r5, [r3]
1669:src/display.c **** 		dd = *display_digits - 1;
 5628              		.loc 1 1669 13 view .LVU1782
 5629 048a 0123     		movs	r3, #1
1668:src/display.c **** 		trimzeros = 1;
 5630              		.loc 1 1668 10 view .LVU1783
 5631 048c 0746     		mov	r7, r0
 5632              	.LVL605:
1669:src/display.c **** 		dd = *display_digits - 1;
 5633              		.loc 1 1669 3 is_stmt 1 view .LVU1784
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5634              		.loc 1 1670 3 view .LVU1785
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5635              		.loc 1 1670 6 is_stmt 0 view .LVU1786
 5636 048e 05F1FF3A 		add	r10, r5, #-1
 5637              	.LVL606:
1669:src/display.c **** 		dd = *display_digits - 1;
 5638              		.loc 1 1669 13 view .LVU1787
 5639 0492 0193     		str	r3, [sp, #4]
 5640              	.LVL607:
1669:src/display.c **** 		dd = *display_digits - 1;
 5641              		.loc 1 1669 13 view .LVU1788
 5642 0494 00E6     		b	.L458
 5643              	.LVL608:
 5644              	.L662:
1919:src/display.c **** 		} else if (c == ',') {
 5645              		.loc 1 1919 4 is_stmt 1 view .LVU1789
1919:src/display.c **** 		} else if (c == ',') {
 5646              		.loc 1 1919 10 is_stmt 0 view .LVU1790
 5647 0496 2246     		mov	r2, r4
 5648              	.LVL609:
1919:src/display.c **** 		} else if (c == ',') {
 5649              		.loc 1 1919 10 view .LVU1791
 5650 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5651 049c 0193     		str	r3, [sp, #4]
 5652 049e A6F10900 		sub	r0, r6, #9
 5653 04a2 FFF7FEFF 		bl	set_decimal
 5654              	.LVL610:
 5655 04a6 019B     		ldr	r3, [sp, #4]
 5656 04a8 0446     		mov	r4, r0
 5657              	.LVL611:
 5658              	.L540:
1917:src/display.c **** 		if (c == '.') {
 5659              		.loc 1 1917 53 is_stmt 1 view .LVU1792
1917:src/display.c **** 		if (c == '.') {
 5660              		.loc 1 1917 12 view .LVU1793
1917:src/display.c **** 		if (c == '.') {
 5661              		.loc 1 1917 18 is_stmt 0 view .LVU1794
 5662 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5663              	.LVL612:
ARM GAS  /tmp/ccZMW3We.s 			page 177


1917:src/display.c **** 		if (c == '.') {
 5664              		.loc 1 1917 2 view .LVU1795
 5665 04ae 002A     		cmp	r2, #0
 5666 04b0 7FF413AF 		bne	.L546
 5667 04b4 22E7     		b	.L645
 5668              	.L663:
1921:src/display.c **** 		} else {
 5669              		.loc 1 1921 4 is_stmt 1 view .LVU1796
1921:src/display.c **** 		} else {
 5670              		.loc 1 1921 10 is_stmt 0 view .LVU1797
 5671 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5672              	.LVL613:
 5673              	.LBB380:
 5674              	.LBI371:
 355:src/display.c **** 	if (sep == SEP_NONE)
 5675              		.loc 1 355 14 is_stmt 1 view .LVU1798
 5676              	.LBB374:
 356:src/display.c **** 		return res;
 5677              		.loc 1 356 2 view .LVU1799
 356:src/display.c **** 		return res;
 5678              		.loc 1 356 5 is_stmt 0 view .LVU1800
 5679 04ba 0029     		cmp	r1, #0
 5680 04bc F5D0     		beq	.L540
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5681              		.loc 1 358 2 is_stmt 1 view .LVU1801
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5682              		.loc 1 358 5 is_stmt 0 view .LVU1802
 5683 04be 002C     		cmp	r4, #0
 5684 04c0 00F0F281 		beq	.L542
 359:src/display.c **** 		else *res++ = '.';
 5685              		.loc 1 359 3 is_stmt 1 view .LVU1803
 359:src/display.c **** 		else *res++ = '.';
 5686              		.loc 1 359 6 is_stmt 0 view .LVU1804
 5687 04c4 0129     		cmp	r1, #1
 359:src/display.c **** 		else *res++ = '.';
 5688              		.loc 1 359 25 is_stmt 1 view .LVU1805
 5689              	.LVL614:
 360:src/display.c **** 	} else {
 5690              		.loc 1 360 8 view .LVU1806
 360:src/display.c **** 	} else {
 5691              		.loc 1 360 15 is_stmt 0 view .LVU1807
 5692 04c6 18BF     		it	ne
 5693 04c8 2E22     		movne	r2, #46
 5694              	.LVL615:
 360:src/display.c **** 	} else {
 5695              		.loc 1 360 15 view .LVU1808
 5696 04ca 04F8012B 		strb	r2, [r4], #1
 5697              	.LVL616:
 360:src/display.c **** 	} else {
 5698              		.loc 1 360 15 view .LVU1809
 5699 04ce ECE7     		b	.L540
 5700              	.LVL617:
 5701              	.L544:
 360:src/display.c **** 	} else {
 5702              		.loc 1 360 15 view .LVU1810
 5703              	.LBE374:
 5704              	.LBE380:
ARM GAS  /tmp/ccZMW3We.s 			page 178


 5705              	.LBB381:
 5706              	.LBB379:
 397:src/display.c **** 	return res;
 5707              		.loc 1 397 7 view .LVU1811
 5708 04d0 1146     		mov	r1, r2
 5709 04d2 3046     		mov	r0, r6
 5710 04d4 0193     		str	r3, [sp, #4]
 397:src/display.c **** 	return res;
 5711              		.loc 1 397 7 is_stmt 1 view .LVU1812
 5712 04d6 FFF7FEFF 		bl	set_dig
 5713              	.LVL618:
 397:src/display.c **** 	return res;
 5714              		.loc 1 397 7 is_stmt 0 view .LVU1813
 5715 04da 019B     		ldr	r3, [sp, #4]
 5716 04dc 08E7     		b	.L545
 5717              	.LVL619:
 5718              	.L665:
 397:src/display.c **** 	return res;
 5719              		.loc 1 397 7 view .LVU1814
 5720              	.LBE379:
 5721              	.LBE381:
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5722              		.loc 1 1940 21 discriminator 1 view .LVU1815
 5723 04de 002C     		cmp	r4, #0
 5724 04e0 7FF418AF 		bne	.L548
1941:src/display.c **** 	*display_digits = odig;
 5725              		.loc 1 1941 3 is_stmt 1 view .LVU1816
1941:src/display.c **** 	*display_digits = odig;
 5726              		.loc 1 1941 32 is_stmt 0 view .LVU1817
 5727 04e4 009B     		ldr	r3, [sp]
 5728 04e6 1868     		ldr	r0, [r3]
1941:src/display.c **** 	*display_digits = odig;
 5729              		.loc 1 1941 3 view .LVU1818
 5730 04e8 594B     		ldr	r3, .L672+12
1941:src/display.c **** 	*display_digits = odig;
 5731              		.loc 1 1941 32 view .LVU1819
 5732 04ea 0138     		subs	r0, r0, #1
1941:src/display.c **** 	*display_digits = odig;
 5733              		.loc 1 1941 3 view .LVU1820
 5734 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5735 04ee 2246     		mov	r2, r4
 5736 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5737 04f4 FFF7FEFF 		bl	set_decimal
 5738              	.LVL620:
 5739 04f8 0CE7     		b	.L548
 5740              	.L664:
1938:src/display.c **** #endif
 5741              		.loc 1 1938 3 view .LVU1821
 5742 04fa 2846     		mov	r0, r5
 5743 04fc 2246     		mov	r2, r4
 5744 04fe 0021     		movs	r1, #0
 5745 0500 0193     		str	r3, [sp, #4]
1938:src/display.c **** #endif
 5746              		.loc 1 1938 3 is_stmt 1 view .LVU1822
 5747 0502 FFF7FEFF 		bl	set_exp
 5748              	.LVL621:
 5749 0506 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccZMW3We.s 			page 179


 5750 0508 FFE6     		b	.L547
 5751              	.LVL622:
 5752              	.L574:
1860:src/display.c **** 		case -1:
 5753              		.loc 1 1860 15 is_stmt 0 view .LVU1823
 5754 050a 0227     		movs	r7, #2
 5755 050c 4146     		mov	r1, r8
 5756              	.LVL623:
 5757              	.L531:
1869:src/display.c **** 			odig++;
 5758              		.loc 1 1869 4 is_stmt 1 view .LVU1824
1869:src/display.c **** 			odig++;
 5759              		.loc 1 1869 11 is_stmt 0 view .LVU1825
 5760 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5761              	.LVL624:
1869:src/display.c **** 			odig++;
 5762              		.loc 1 1869 11 view .LVU1826
 5763 0512 01F8013B 		strb	r3, [r1], #1
 5764              	.LVL625:
1870:src/display.c **** 			dd--;
 5765              		.loc 1 1870 4 is_stmt 1 view .LVU1827
1871:src/display.c **** 			exp--;
 5766              		.loc 1 1871 4 view .LVU1828
1871:src/display.c **** 			exp--;
 5767              		.loc 1 1871 6 is_stmt 0 view .LVU1829
 5768 0516 0AF1FF3A 		add	r10, r10, #-1
 5769              	.LVL626:
1872:src/display.c **** 		case 0:
 5770              		.loc 1 1872 4 is_stmt 1 view .LVU1830
1872:src/display.c **** 		case 0:
 5771              		.loc 1 1872 7 is_stmt 0 view .LVU1831
 5772 051a 013D     		subs	r5, r5, #1
 5773              	.LVL627:
1872:src/display.c **** 		case 0:
 5774              		.loc 1 1872 7 view .LVU1832
 5775 051c A5E6     		b	.L492
 5776              	.LVL628:
 5777              	.L487:
1758:src/display.c **** 
 5778              		.loc 1 1758 2 is_stmt 1 view .LVU1833
1758:src/display.c **** 
 5779              		.loc 1 1758 45 view .LVU1834
1758:src/display.c **** 
 5780              		.loc 1 1758 2 is_stmt 0 view .LVU1835
 5781 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5782 0522 002A     		cmp	r2, #0
 5783 0524 7FF43CAE 		bne	.L550
 5784              	.LVL629:
 5785              	.L494:
1823:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
 5786              		.loc 1 1823 3 is_stmt 1 view .LVU1836
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5787              		.loc 1 1824 3 view .LVU1837
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5788              		.loc 1 1824 6 is_stmt 0 view .LVU1838
 5789 0528 002D     		cmp	r5, #0
 5790 052a C0F21081 		blt	.L514
ARM GAS  /tmp/ccZMW3We.s 			page 180


1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5791              		.loc 1 1824 6 view .LVU1839
 5792 052e 6B1C     		adds	r3, r5, #1
1826:src/display.c **** 					*obp++ = ',';
 5793              		.loc 1 1826 28 view .LVU1840
 5794 0530 DFF818C1 		ldr	ip, .L672+8
 5795 0534 0293     		str	r3, [sp, #8]
 5796 0536 09EB0300 		add	r0, r9, r3
1760:src/display.c **** 	switch (mode) {
 5797              		.loc 1 1760 4 view .LVU1841
 5798 053a 4F46     		mov	r7, r9
1565:src/display.c **** 	int odig = 0;
 5799              		.loc 1 1565 15 view .LVU1842
 5800 053c 4146     		mov	r1, r8
 5801 053e 0394     		str	r4, [sp, #12]
 5802 0540 05E0     		b	.L515
 5803              	.LVL630:
 5804              	.L518:
1827:src/display.c **** 				*obp++ = *p++;
 5805              		.loc 1 1827 6 is_stmt 1 view .LVU1843
1826:src/display.c **** 					*obp++ = ',';
 5806              		.loc 1 1826 15 is_stmt 0 view .LVU1844
 5807 0542 022A     		cmp	r2, #2
1827:src/display.c **** 				*obp++ = *p++;
 5808              		.loc 1 1827 13 view .LVU1845
 5809 0544 05BF     		ittet	eq
 5810 0546 2C23     		moveq	r3, #44
 5811 0548 4B70     		strbeq	r3, [r1, #1]
1828:src/display.c **** 				odig++;
 5812              		.loc 1 1828 9 view .LVU1846
 5813 054a 0131     		addne	r1, r1, #1
 5814              	.LVL631:
1827:src/display.c **** 				*obp++ = *p++;
 5815              		.loc 1 1827 10 view .LVU1847
 5816 054c 0231     		addeq	r1, r1, #2
 5817              	.LVL632:
 5818              	.L515:
1828:src/display.c **** 				odig++;
 5819              		.loc 1 1828 5 is_stmt 1 discriminator 2 view .LVU1848
1828:src/display.c **** 				odig++;
 5820              		.loc 1 1828 12 is_stmt 0 discriminator 2 view .LVU1849
 5821 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5822              	.LVL633:
1826:src/display.c **** 					*obp++ = ',';
 5823              		.loc 1 1826 5 is_stmt 1 discriminator 2 view .LVU1850
1828:src/display.c **** 				odig++;
 5824              		.loc 1 1828 12 is_stmt 0 discriminator 2 view .LVU1851
 5825 0552 0B70     		strb	r3, [r1]
1829:src/display.c **** 			}
 5826              		.loc 1 1829 5 is_stmt 1 discriminator 2 view .LVU1852
 5827              	.LVL634:
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5828              		.loc 1 1825 22 discriminator 2 view .LVU1853
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5829              		.loc 1 1825 14 discriminator 2 view .LVU1854
1826:src/display.c **** 					*obp++ = ',';
 5830              		.loc 1 1826 28 is_stmt 0 discriminator 2 view .LVU1855
ARM GAS  /tmp/ccZMW3We.s 			page 181


 5831 0554 A9EB0703 		sub	r3, r9, r7
 5832 0558 2B44     		add	r3, r3, r5
 5833 055a 8CFB0342 		smull	r4, r2, ip, r3
 5834 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5835 0562 02EB4202 		add	r2, r2, r2, lsl #1
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5836              		.loc 1 1825 4 discriminator 2 view .LVU1856
 5837 0566 B842     		cmp	r0, r7
1826:src/display.c **** 					*obp++ = ',';
 5838              		.loc 1 1826 28 discriminator 2 view .LVU1857
 5839 0568 A3EB0202 		sub	r2, r3, r2
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5840              		.loc 1 1825 4 discriminator 2 view .LVU1858
 5841 056c E9D1     		bne	.L518
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5842              		.loc 1 1831 11 view .LVU1859
 5843 056e 2E23     		movs	r3, #46
1832:src/display.c **** 				*obp++ = *p++;
 5844              		.loc 1 1832 4 view .LVU1860
 5845 0570 BAF1000F 		cmp	r10, #0
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5846              		.loc 1 1831 11 view .LVU1861
 5847 0574 4B70     		strb	r3, [r1, #1]
 5848 0576 039C     		ldr	r4, [sp, #12]
 5849 0578 029F     		ldr	r7, [sp, #8]
 5850              	.LVL635:
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5851              		.loc 1 1831 4 is_stmt 1 view .LVU1862
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5852              		.loc 1 1831 8 is_stmt 0 view .LVU1863
 5853 057a 01F10203 		add	r3, r1, #2
 5854              	.LVL636:
1832:src/display.c **** 				*obp++ = *p++;
 5855              		.loc 1 1832 4 is_stmt 1 view .LVU1864
1832:src/display.c **** 				*obp++ = *p++;
 5856              		.loc 1 1832 14 view .LVU1865
1832:src/display.c **** 				*obp++ = *p++;
 5857              		.loc 1 1832 4 is_stmt 0 view .LVU1866
 5858 057e 0CDD     		ble	.L519
 5859 0580 0131     		adds	r1, r1, #1
 5860 0582 00EB0A07 		add	r7, r0, r10
 5861              	.LVL637:
 5862              	.L520:
1833:src/display.c **** 				odig++;
 5863              		.loc 1 1833 5 is_stmt 1 discriminator 4 view .LVU1867
1833:src/display.c **** 				odig++;
 5864              		.loc 1 1833 12 is_stmt 0 discriminator 4 view .LVU1868
 5865 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5866              	.LVL638:
1833:src/display.c **** 				odig++;
 5867              		.loc 1 1833 12 discriminator 4 view .LVU1869
 5868 058a 01F8012F 		strb	r2, [r1, #1]!
1834:src/display.c **** 			}
 5869              		.loc 1 1834 5 is_stmt 1 discriminator 4 view .LVU1870
1832:src/display.c **** 				*obp++ = *p++;
 5870              		.loc 1 1832 41 discriminator 4 view .LVU1871
1832:src/display.c **** 				*obp++ = *p++;
ARM GAS  /tmp/ccZMW3We.s 			page 182


 5871              		.loc 1 1832 14 discriminator 4 view .LVU1872
1832:src/display.c **** 				*obp++ = *p++;
 5872              		.loc 1 1832 4 is_stmt 0 discriminator 4 view .LVU1873
 5873 058e 8742     		cmp	r7, r0
 5874 0590 F9D1     		bne	.L520
 5875 0592 029A     		ldr	r2, [sp, #8]
 5876 0594 5244     		add	r2, r2, r10
 5877 0596 5344     		add	r3, r3, r10
 5878              	.LVL639:
1832:src/display.c **** 				*obp++ = *p++;
 5879              		.loc 1 1832 4 discriminator 4 view .LVU1874
 5880 0598 1746     		mov	r7, r2
 5881              	.LVL640:
 5882              	.L519:
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5883              		.loc 1 1851 3 is_stmt 1 view .LVU1875
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5884              		.loc 1 1851 6 is_stmt 0 view .LVU1876
 5885 059a 019A     		ldr	r2, [sp, #4]
 5886 059c 002A     		cmp	r2, #0
 5887 059e 40F0C480 		bne	.L525
1567:src/display.c **** 	int j;
 5888              		.loc 1 1567 6 view .LVU1877
 5889 05a2 9346     		mov	fp, r2
 5890 05a4 7CE6     		b	.L503
 5891              	.LVL641:
 5892              	.L651:
1628:src/display.c **** 		exp = z->exponent + z->digits - 1;
 5893              		.loc 1 1628 3 is_stmt 1 view .LVU1878
 5894 05a6 2B4A     		ldr	r2, .L672+16
 5895 05a8 3146     		mov	r1, r6
 5896 05aa 3046     		mov	r0, r6
 5897 05ac FFF7FEFF 		bl	decNumberNormalize
 5898              	.LVL642:
1629:src/display.c **** 		z->exponent = 0;
 5899              		.loc 1 1629 3 view .LVU1879
1629:src/display.c **** 		z->exponent = 0;
 5900              		.loc 1 1629 21 is_stmt 0 view .LVU1880
 5901 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5902 05b4 03EB020A 		add	r10, r3, r2
1629:src/display.c **** 		z->exponent = 0;
 5903              		.loc 1 1629 7 view .LVU1881
 5904 05b8 0AF1FF33 		add	r3, r10, #-1
1630:src/display.c **** 	}
 5905              		.loc 1 1630 15 view .LVU1882
 5906 05bc C6F804B0 		str	fp, [r6, #4]
1629:src/display.c **** 		z->exponent = 0;
 5907              		.loc 1 1629 7 view .LVU1883
 5908 05c0 0193     		str	r3, [sp, #4]
 5909              	.LVL643:
1630:src/display.c **** 	}
 5910              		.loc 1 1630 3 is_stmt 1 view .LVU1884
 5911 05c2 42E5     		b	.L442
 5912              	.LVL644:
 5913              	.L657:
1702:src/display.c **** 	for (; *q == '0'; q++);
 5914              		.loc 1 1702 3 view .LVU1885
ARM GAS  /tmp/ccZMW3We.s 			page 183


1702:src/display.c **** 	for (; *q == '0'; q++);
 5915              		.loc 1 1702 3 is_stmt 0 view .LVU1886
 5916 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1585:src/display.c **** 	int trimzeros = 0;
 5917              		.loc 1 1585 6 view .LVU1887
 5918 05c6 4FF0000E 		mov	lr, #0
1702:src/display.c **** 	for (; *q == '0'; q++);
 5919              		.loc 1 1702 4 view .LVU1888
 5920 05ca 0136     		adds	r6, r6, #1
 5921              	.LVL645:
1702:src/display.c **** 	for (; *q == '0'; q++);
 5922              		.loc 1 1702 4 view .LVU1889
 5923 05cc 8EE5     		b	.L464
 5924              	.LVL646:
 5925              	.L659:
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5926              		.loc 1 1718 4 is_stmt 1 view .LVU1890
1719:src/display.c **** 				*p++ = *q++;
 5927              		.loc 1 1719 11 is_stmt 0 view .LVU1891
 5928 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1719:src/display.c **** 				*p++ = *q++;
 5929              		.loc 1 1719 10 view .LVU1892
 5930 05d0 A3F13002 		sub	r2, r3, #48
 5931 05d4 092A     		cmp	r2, #9
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5932              		.loc 1 1718 5 view .LVU1893
 5933 05d6 06F10106 		add	r6, r6, #1
 5934              	.LVL647:
1719:src/display.c **** 				*p++ = *q++;
 5935              		.loc 1 1719 4 is_stmt 1 view .LVU1894
1719:src/display.c **** 				*p++ = *q++;
 5936              		.loc 1 1719 10 view .LVU1895
 5937 05da 3FF6B0AD 		bhi	.L469
 5938              	.LVL648:
 5939              	.L474:
1720:src/display.c **** 		}
 5940              		.loc 1 1720 5 view .LVU1896
1720:src/display.c **** 		}
 5941              		.loc 1 1720 10 is_stmt 0 view .LVU1897
 5942 05de 01F8013B 		strb	r3, [r1], #1
 5943              	.LVL649:
1719:src/display.c **** 				*p++ = *q++;
 5944              		.loc 1 1719 10 is_stmt 1 view .LVU1898
1719:src/display.c **** 				*p++ = *q++;
 5945              		.loc 1 1719 11 is_stmt 0 view .LVU1899
 5946 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1719:src/display.c **** 				*p++ = *q++;
 5947              		.loc 1 1719 10 view .LVU1900
 5948 05e6 A3F13002 		sub	r2, r3, #48
 5949 05ea 092A     		cmp	r2, #9
 5950 05ec F7D9     		bls	.L474
 5951 05ee A6E5     		b	.L469
 5952              	.LVL650:
 5953              	.L652:
1636:src/display.c **** 			x[0] = '-';
 5954              		.loc 1 1636 33 discriminator 1 view .LVU1901
 5955 05f0 6B20     		movs	r0, #107
ARM GAS  /tmp/ccZMW3We.s 			page 184


 5956 05f2 FFF7FEFF 		bl	get_user_flag
 5957              	.LVL651:
1636:src/display.c **** 			x[0] = '-';
 5958              		.loc 1 1636 30 discriminator 1 view .LVU1902
 5959 05f6 0028     		cmp	r0, #0
 5960 05f8 3FF439AD 		beq	.L444
1637:src/display.c **** 			x[1] = '0';
 5961              		.loc 1 1637 4 is_stmt 1 view .LVU1903
1638:src/display.c **** 		} else
 5962              		.loc 1 1638 4 view .LVU1904
1637:src/display.c **** 			x[1] = '0';
 5963              		.loc 1 1637 9 is_stmt 0 view .LVU1905
 5964 05fc 43F22D03 		movw	r3, #12333
 5965 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1638:src/display.c **** 		} else
 5966              		.loc 1 1638 9 view .LVU1906
 5967 0604 36E5     		b	.L445
 5968              	.LVL652:
 5969              	.L655:
1695:src/display.c **** 		CLR_MANT_SIGN;
 5970              		.loc 1 1695 3 is_stmt 1 view .LVU1907
 5971              	.LBB382:
 5972              	.LBI382:
 302:src/display.c **** {
 5973              		.loc 1 302 13 view .LVU1908
 5974              	.LBB383:
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5975              		.loc 1 304 2 view .LVU1909
 305:src/display.c **** }
 5976              		.loc 1 305 2 view .LVU1910
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5977              		.loc 1 304 26 is_stmt 0 view .LVU1911
 5978 0606 144B     		ldr	r3, .L672+20
 5979 0608 2022     		movs	r2, #32
 305:src/display.c **** }
 5980              		.loc 1 305 2 view .LVU1912
 5981 060a 8220     		movs	r0, #130
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5982              		.loc 1 304 26 view .LVU1913
 5983 060c 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 5984              		.loc 1 305 2 view .LVU1914
 5985 060e FFF7FEFF 		bl	clr_dot
 5986              	.LVL653:
 5987              	.LBE383:
 5988              	.LBE382:
1696:src/display.c **** 	}
 5989              		.loc 1 1696 3 is_stmt 1 view .LVU1915
 5990              	.LBB384:
 5991              	.LBI384:
 290:src/display.c **** {
 5992              		.loc 1 290 13 view .LVU1916
 5993              	.LBB385:
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 5994              		.loc 1 292 2 view .LVU1917
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 5995              		.loc 1 292 24 is_stmt 0 view .LVU1918
ARM GAS  /tmp/ccZMW3We.s 			page 185


 5996 0612 124B     		ldr	r3, .L672+24
 5997 0614 2022     		movs	r2, #32
 293:src/display.c **** }
 5998              		.loc 1 293 2 view .LVU1919
 5999 0616 8120     		movs	r0, #129
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 6000              		.loc 1 292 24 view .LVU1920
 6001 0618 1A70     		strb	r2, [r3]
 293:src/display.c **** }
 6002              		.loc 1 293 2 is_stmt 1 view .LVU1921
 6003 061a FFF7FEFF 		bl	clr_dot
 6004              	.LVL654:
 294:src/display.c **** 
 6005              		.loc 1 294 1 is_stmt 0 view .LVU1922
 6006 061e 5CE5     		b	.L462
 6007              	.LVL655:
 6008              	.L535:
 294:src/display.c **** 
 6009              		.loc 1 294 1 view .LVU1923
 6010              	.LBE385:
 6011              	.LBE384:
1911:src/display.c **** 				SET_MANT_SIGN;
 6012              		.loc 1 1911 4 is_stmt 1 view .LVU1924
 6013 0620 0193     		str	r3, [sp, #4]
1911:src/display.c **** 				SET_MANT_SIGN;
 6014              		.loc 1 1911 7 is_stmt 0 view .LVU1925
 6015 0622 002E     		cmp	r6, #0
 6016 0624 40F00281 		bne	.L538
1912:src/display.c **** 			else
 6017              		.loc 1 1912 5 is_stmt 1 view .LVU1926
 6018              	.LBB386:
 6019              	.LBI386:
 284:src/display.c **** {
 6020              		.loc 1 284 13 view .LVU1927
 6021              	.LBB387:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6022              		.loc 1 286 2 view .LVU1928
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6023              		.loc 1 286 24 is_stmt 0 view .LVU1929
 6024 0628 0C4A     		ldr	r2, .L672+24
 6025 062a 2D21     		movs	r1, #45
 287:src/display.c **** }
 6026              		.loc 1 287 2 view .LVU1930
 6027 062c 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6028              		.loc 1 286 24 view .LVU1931
 6029 062e 1170     		strb	r1, [r2]
 287:src/display.c **** }
 6030              		.loc 1 287 2 is_stmt 1 view .LVU1932
 6031 0630 FFF7FEFF 		bl	set_dot
 6032              	.LVL656:
 287:src/display.c **** }
 6033              		.loc 1 287 2 is_stmt 0 view .LVU1933
 6034              	.LBE387:
 6035              	.LBE386:
1917:src/display.c **** 		if (c == '.') {
 6036              		.loc 1 1917 12 is_stmt 1 view .LVU1934
ARM GAS  /tmp/ccZMW3We.s 			page 186


1917:src/display.c **** 		if (c == '.') {
 6037              		.loc 1 1917 18 is_stmt 0 view .LVU1935
 6038 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6039              	.LVL657:
1917:src/display.c **** 		if (c == '.') {
 6040              		.loc 1 1917 2 view .LVU1936
 6041 0638 019B     		ldr	r3, [sp, #4]
 6042 063a 002A     		cmp	r2, #0
 6043 063c 7FF446AE 		bne	.L537
 6044 0640 5FE6     		b	.L536
 6045              	.L673:
 6046 0642 00BF     		.align	2
 6047              	.L672:
 6048 0644 00000000 		.word	StateWhileOn
 6049 0648 00000000 		.word	main_ram
 6050 064c 56555555 		.word	1431655766
 6051 0650 00000000 		.word	.LANCHOR1
 6052 0654 00000000 		.word	Ctx
 6053 0658 00000000 		.word	LastDisplayedExponent
 6054 065c 00000000 		.word	LastDisplayedNumber
 6055              	.LVL658:
 6056              	.L653:
1645:src/display.c **** 		return;
 6057              		.loc 1 1645 3 is_stmt 1 view .LVU1937
 6058              	.LBB388:
 6059              	.LBI388:
1433:src/display.c **** 	const int dbl = is_dblmode();
 6060              		.loc 1 1433 13 view .LVU1938
 6061              	.LBB389:
1434:src/display.c **** 	char *p;
 6062              		.loc 1 1434 2 view .LVU1939
1434:src/display.c **** 	char *p;
 6063              		.loc 1 1434 18 is_stmt 0 view .LVU1940
 6064 0660 FFF7FEFF 		bl	is_dblmode
 6065              	.LVL659:
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6066              		.loc 1 1450 5 view .LVU1941
 6067 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6068 0668 2D2B     		cmp	r3, #45
1434:src/display.c **** 	char *p;
 6069              		.loc 1 1434 18 view .LVU1942
 6070 066a 0446     		mov	r4, r0
 6071              	.LVL660:
1435:src/display.c **** 	int i, j;
 6072              		.loc 1 1435 2 is_stmt 1 view .LVU1943
1436:src/display.c **** 	char *upper_str;
 6073              		.loc 1 1436 2 view .LVU1944
1437:src/display.c **** 	enum separator_modes separator_mode;
 6074              		.loc 1 1437 2 view .LVU1945
1438:src/display.c **** 	char decimal_mark;
 6075              		.loc 1 1438 2 view .LVU1946
1439:src/display.c **** 	char thousands_sep;
 6076              		.loc 1 1439 2 view .LVU1947
1440:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6077              		.loc 1 1440 2 view .LVU1948
1446:src/display.c **** #endif
 6078              		.loc 1 1446 2 view .LVU1949
ARM GAS  /tmp/ccZMW3We.s 			page 187


1448:src/display.c **** 
 6079              		.loc 1 1448 2 view .LVU1950
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6080              		.loc 1 1450 2 view .LVU1951
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6081              		.loc 1 1450 5 is_stmt 0 view .LVU1952
 6082 066c 00F02A81 		beq	.L668
1463:src/display.c **** 
 6083              		.loc 1 1463 16 view .LVU1953
 6084 0670 0026     		movs	r6, #0
 6085              	.LVL661:
 6086              	.L447:
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6087              		.loc 1 1465 2 is_stmt 1 view .LVU1954
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6088              		.loc 1 1465 6 is_stmt 0 view .LVU1955
 6089 0672 0021     		movs	r1, #0
 6090 0674 4046     		mov	r0, r8
 6091 0676 FFF7FEFF 		bl	find_char
 6092              	.LVL662:
1466:src/display.c **** 
 6093              		.loc 1 1466 2 is_stmt 1 view .LVU1956
1466:src/display.c **** 
 6094              		.loc 1 1466 23 is_stmt 0 view .LVU1957
 6095 067a A0EB0802 		sub	r2, r0, r8
1466:src/display.c **** 
 6096              		.loc 1 1466 2 view .LVU1958
 6097 067e C2F12202 		rsb	r2, r2, #34
 6098 0682 3021     		movs	r1, #48
 6099 0684 FFF7FEFF 		bl	xset
 6100              	.LVL663:
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6101              		.loc 1 1468 2 is_stmt 1 view .LVU1959
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6102              		.loc 1 1468 18 is_stmt 0 view .LVU1960
 6103 0688 B14A     		ldr	r2, .L674
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6104              		.loc 1 1479 6 view .LVU1961
 6105 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6106              		.loc 1 1468 5 view .LVU1962
 6107 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1476:src/display.c **** 	}
 6108              		.loc 1 1476 17 view .LVU1963
 6109 0690 002A     		cmp	r2, #0
 6110 0692 15BF     		itete	ne
 6111 0694 4FF0020A 		movne	r10, #2
 6112 0698 2C27     		moveq	r7, #44
 6113 069a 2E27     		movne	r7, #46
 6114              	.LVL664:
1476:src/display.c **** 	}
 6115              		.loc 1 1476 17 view .LVU1964
 6116 069c 2E25     		moveq	r5, #46
 6117 069e 18BF     		it	ne
 6118 06a0 2C25     		movne	r5, #44
 6119              	.LVL665:
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccZMW3We.s 			page 188


 6120              		.loc 1 1479 2 is_stmt 1 view .LVU1965
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6121              		.loc 1 1479 5 is_stmt 0 view .LVU1966
 6122 06a2 13F0380F 		tst	r3, #56
 6123 06a6 40F0C880 		bne	.L669
1506:src/display.c **** 		xcopy(x + 2, x + 1, 16);
 6124              		.loc 1 1506 3 is_stmt 1 view .LVU1967
 6125              	.LVL666:
1507:src/display.c **** 		x[1] = decimal_mark;
 6126              		.loc 1 1507 3 view .LVU1968
 6127 06aa 1022     		movs	r2, #16
 6128 06ac 08F10101 		add	r1, r8, #1
 6129 06b0 08F10200 		add	r0, r8, #2
 6130 06b4 FFF7FEFF 		bl	xcopy
 6131              	.LVL667:
1508:src/display.c **** 		if (grouping) {
 6132              		.loc 1 1508 3 view .LVU1969
1510:src/display.c **** 			x[5] = thousands_sep;
 6133              		.loc 1 1510 4 is_stmt 0 view .LVU1970
 6134 06b8 0D22     		movs	r2, #13
 6135 06ba 08F10501 		add	r1, r8, #5
 6136 06be 08F10600 		add	r0, r8, #6
1508:src/display.c **** 		if (grouping) {
 6137              		.loc 1 1508 8 view .LVU1971
 6138 06c2 88F80150 		strb	r5, [r8, #1]
1509:src/display.c **** 			xcopy(x + 6, x + 5, 13);
 6139              		.loc 1 1509 3 is_stmt 1 view .LVU1972
1510:src/display.c **** 			x[5] = thousands_sep;
 6140              		.loc 1 1510 4 view .LVU1973
 6141 06c6 FFF7FEFF 		bl	xcopy
 6142              	.LVL668:
1511:src/display.c **** 			x += 9;
 6143              		.loc 1 1511 4 view .LVU1974
1512:src/display.c **** 		}
 6144              		.loc 1 1512 6 is_stmt 0 view .LVU1975
 6145 06ca 08F10905 		add	r5, r8, #9
 6146              	.LVL669:
1511:src/display.c **** 			x += 9;
 6147              		.loc 1 1511 9 view .LVU1976
 6148 06ce 88F80570 		strb	r7, [r8, #5]
1512:src/display.c **** 		}
 6149              		.loc 1 1512 4 is_stmt 1 view .LVU1977
 6150              	.LVL670:
1515:src/display.c **** 			if (exp < 0) {
 6151              		.loc 1 1515 3 view .LVU1978
1515:src/display.c **** 			if (exp < 0) {
 6152              		.loc 1 1515 6 is_stmt 0 view .LVU1979
 6153 06d2 002C     		cmp	r4, #0
 6154 06d4 00F0F380 		beq	.L451
1516:src/display.c **** 				x[9] = '-';
 6155              		.loc 1 1516 4 is_stmt 1 view .LVU1980
1516:src/display.c **** 				x[9] = '-';
 6156              		.loc 1 1516 7 is_stmt 0 view .LVU1981
 6157 06d8 019B     		ldr	r3, [sp, #4]
1524:src/display.c **** 		}
 6158              		.loc 1 1524 16 view .LVU1982
 6159 06da 9E49     		ldr	r1, .L674+4
ARM GAS  /tmp/ccZMW3We.s 			page 189


1516:src/display.c **** 				x[9] = '-';
 6160              		.loc 1 1516 7 view .LVU1983
 6161 06dc 002B     		cmp	r3, #0
1517:src/display.c **** 				exp = -exp;
 6162              		.loc 1 1517 5 is_stmt 1 view .LVU1984
1518:src/display.c **** 			}
 6163              		.loc 1 1518 5 view .LVU1985
1518:src/display.c **** 			}
 6164              		.loc 1 1518 9 is_stmt 0 view .LVU1986
 6165 06de BCBF     		itt	lt
 6166 06e0 5B42     		rsblt	r3, r3, #0
 6167 06e2 0193     		strlt	r3, [sp, #4]
 6168              	.LVL671:
1522:src/display.c **** 			x[10] = '0' + j;
 6169              		.loc 1 1522 6 view .LVU1987
 6170 06e4 0198     		ldr	r0, [sp, #4]
 6171 06e6 9C4B     		ldr	r3, .L674+8
1517:src/display.c **** 				exp = -exp;
 6172              		.loc 1 1517 10 view .LVU1988
 6173 06e8 B4BF     		ite	lt
 6174 06ea 2D22     		movlt	r2, #45
1521:src/display.c **** 			j = exp / 1000;
 6175              		.loc 1 1521 10 view .LVU1989
 6176 06ec 2022     		movge	r2, #32
 6177 06ee 88F81220 		strb	r2, [r8, #18]
1522:src/display.c **** 			x[10] = '0' + j;
 6178              		.loc 1 1522 4 is_stmt 1 view .LVU1990
1522:src/display.c **** 			x[10] = '0' + j;
 6179              		.loc 1 1522 6 is_stmt 0 view .LVU1991
 6180 06f2 0246     		mov	r2, r0
 6181 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6182 06f8 9B09     		lsrs	r3, r3, #6
 6183              	.LVL672:
1523:src/display.c **** 			exp -= 1000 * j;
 6184              		.loc 1 1523 4 is_stmt 1 view .LVU1992
1523:src/display.c **** 			exp -= 1000 * j;
 6185              		.loc 1 1523 16 is_stmt 0 view .LVU1993
 6186 06fa 03F13002 		add	r2, r3, #48
1524:src/display.c **** 		}
 6187              		.loc 1 1524 8 view .LVU1994
 6188 06fe 01FB0303 		mla	r3, r1, r3, r0
 6189              	.LVL673:
1524:src/display.c **** 		}
 6190              		.loc 1 1524 8 view .LVU1995
 6191 0702 0193     		str	r3, [sp, #4]
 6192              	.LVL674:
1523:src/display.c **** 			exp -= 1000 * j;
 6193              		.loc 1 1523 10 view .LVU1996
 6194 0704 88F81320 		strb	r2, [r8, #19]
1524:src/display.c **** 		}
 6195              		.loc 1 1524 4 is_stmt 1 view .LVU1997
 6196              	.LVL675:
 6197              	.L453:
1530:src/display.c **** 		*x = 0;
 6198              		.loc 1 1530 3 view .LVU1998
 6199 0708 0B22     		movs	r2, #11
 6200 070a 2946     		mov	r1, r5
ARM GAS  /tmp/ccZMW3We.s 			page 190


 6201 070c 08F10A00 		add	r0, r8, #10
 6202 0710 FFF7FEFF 		bl	xcopy
 6203              	.LVL676:
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6204              		.loc 1 1531 3 view .LVU1999
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6205              		.loc 1 1531 6 is_stmt 0 view .LVU2000
 6206 0714 0022     		movs	r2, #0
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6207              		.loc 1 1532 3 view .LVU2001
 6208 0716 0198     		ldr	r0, [sp, #4]
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6209              		.loc 1 1531 6 view .LVU2002
 6210 0718 88F80920 		strb	r2, [r8, #9]
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6211              		.loc 1 1532 3 is_stmt 1 view .LVU2003
 6212 071c 0121     		movs	r1, #1
 6213 071e FFF7FEFF 		bl	set_exp
 6214              	.LVL677:
1533:src/display.c **** 	}
 6215              		.loc 1 1533 3 view .LVU2004
1533:src/display.c **** 	}
 6216              		.loc 1 1533 3 is_stmt 0 view .LVU2005
 6217 0722 A8EB0606 		sub	r6, r8, r6
 6218              	.LVL678:
1533:src/display.c **** 	}
 6219              		.loc 1 1533 5 view .LVU2006
 6220 0726 0924     		movs	r4, #9
 6221              	.LVL679:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6222              		.loc 1 1536 10 is_stmt 1 view .LVU2007
 6223 0728 9AE0     		b	.L454
 6224              	.LVL680:
 6225              	.L525:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6226              		.loc 1 1536 10 is_stmt 0 view .LVU2008
 6227              	.LBE389:
 6228              	.LBE388:
1852:src/display.c **** 				obp--;
 6229              		.loc 1 1852 10 is_stmt 1 view .LVU2009
 6230 072a 4345     		cmp	r3, r8
 6231 072c 88BF     		it	hi
 6232 072e 1A46     		movhi	r2, r3
 6233 0730 7FF6B6AD 		bls	.L503
 6234              	.L527:
1853:src/display.c **** 				odig--;
 6235              		.loc 1 1853 5 discriminator 1 view .LVU2010
 6236 0734 1346     		mov	r3, r2
 6237              	.LVL681:
1853:src/display.c **** 				odig--;
 6238              		.loc 1 1853 5 is_stmt 0 discriminator 1 view .LVU2011
 6239 0736 013A     		subs	r2, r2, #1
 6240              	.LVL682:
1854:src/display.c **** 			}
 6241              		.loc 1 1854 5 is_stmt 1 discriminator 1 view .LVU2012
1852:src/display.c **** 				obp--;
 6242              		.loc 1 1852 19 is_stmt 0 discriminator 1 view .LVU2013
ARM GAS  /tmp/ccZMW3We.s 			page 191


 6243 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6244 073c 3029     		cmp	r1, #48
 6245 073e 7FF4AFAD 		bne	.L503
1852:src/display.c **** 				obp--;
 6246              		.loc 1 1852 10 view .LVU2014
 6247 0742 9045     		cmp	r8, r2
1854:src/display.c **** 			}
 6248              		.loc 1 1854 9 view .LVU2015
 6249 0744 07F1FF37 		add	r7, r7, #-1
 6250              	.LVL683:
1852:src/display.c **** 				obp--;
 6251              		.loc 1 1852 10 is_stmt 1 view .LVU2016
 6252 0748 F4D1     		bne	.L527
 6253 074a 4346     		mov	r3, r8
 6254 074c A8E5     		b	.L503
 6255              	.LVL684:
 6256              	.L514:
1837:src/display.c **** 			odig++;
 6257              		.loc 1 1837 4 view .LVU2017
1838:src/display.c **** 			*obp++ = '.';
 6258              		.loc 1 1838 4 view .LVU2018
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6259              		.loc 1 1839 4 view .LVU2019
1837:src/display.c **** 			odig++;
 6260              		.loc 1 1837 11 is_stmt 0 view .LVU2020
 6261 074e 42F63063 		movw	r3, #11824
 6262 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
1840:src/display.c **** 				*obp++ = '0';
 6263              		.loc 1 1840 4 is_stmt 1 view .LVU2021
 6264              	.LVL685:
1840:src/display.c **** 				*obp++ = '0';
 6265              		.loc 1 1840 18 view .LVU2022
1840:src/display.c **** 				*obp++ = '0';
 6266              		.loc 1 1840 4 is_stmt 0 view .LVU2023
 6267 0756 6B1C     		adds	r3, r5, #1
 6268              	.LVL686:
1840:src/display.c **** 				*obp++ = '0';
 6269              		.loc 1 1840 4 view .LVU2024
 6270 0758 00F0F280 		beq	.L572
 6271 075c C5F10101 		rsb	r1, r5, #1
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6272              		.loc 1 1839 8 view .LVU2025
 6273 0760 0DF11603 		add	r3, sp, #22
 6274              	.LVL687:
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6275              		.loc 1 1839 8 view .LVU2026
 6276 0764 4144     		add	r1, r1, r8
 6277 0766 1A46     		mov	r2, r3
1841:src/display.c **** 				odig++;
 6278              		.loc 1 1841 12 view .LVU2027
 6279 0768 3020     		movs	r0, #48
 6280              	.LVL688:
 6281              	.L523:
1841:src/display.c **** 				odig++;
 6282              		.loc 1 1841 5 is_stmt 1 discriminator 3 view .LVU2028
1841:src/display.c **** 				odig++;
 6283              		.loc 1 1841 12 is_stmt 0 discriminator 3 view .LVU2029
ARM GAS  /tmp/ccZMW3We.s 			page 192


 6284 076a 02F8010B 		strb	r0, [r2], #1
 6285              	.LVL689:
1842:src/display.c **** 				dd--;
 6286              		.loc 1 1842 5 is_stmt 1 discriminator 3 view .LVU2030
1843:src/display.c **** 			}
 6287              		.loc 1 1843 5 discriminator 3 view .LVU2031
1840:src/display.c **** 				*obp++ = '0';
 6288              		.loc 1 1840 23 discriminator 3 view .LVU2032
1840:src/display.c **** 				*obp++ = '0';
 6289              		.loc 1 1840 18 discriminator 3 view .LVU2033
1840:src/display.c **** 				*obp++ = '0';
 6290              		.loc 1 1840 4 is_stmt 0 discriminator 3 view .LVU2034
 6291 076e 8A42     		cmp	r2, r1
 6292 0770 FBD1     		bne	.L523
 6293 0772 AA44     		add	r10, r10, r5
 6294 0774 EA43     		mvns	r2, r5
 6295              	.LVL690:
1840:src/display.c **** 				*obp++ = '0';
 6296              		.loc 1 1840 4 discriminator 3 view .LVU2035
 6297 0776 0AF1010A 		add	r10, r10, #1
 6298 077a 1344     		add	r3, r3, r2
 6299 077c 6F42     		rsbs	r7, r5, #0
 6300              	.L522:
 6301              	.LVL691:
1845:src/display.c **** 				*obp++ = *p++;
 6302              		.loc 1 1845 10 is_stmt 1 view .LVU2036
 6303 077e BAF1000F 		cmp	r10, #0
1845:src/display.c **** 				*obp++ = *p++;
 6304              		.loc 1 1845 13 is_stmt 0 view .LVU2037
 6305 0782 0AF1FF32 		add	r2, r10, #-1
 6306              	.LVL692:
1845:src/display.c **** 				*obp++ = *p++;
 6307              		.loc 1 1845 10 view .LVU2038
 6308 0786 7FF708AF 		ble	.L519
 6309 078a 9A44     		add	r10, r10, r3
 6310 078c 0AF1FF30 		add	r0, r10, #-1
 6311 0790 013B     		subs	r3, r3, #1
 6312              	.LVL693:
 6313              	.L524:
1846:src/display.c **** 				odig++;
 6314              		.loc 1 1846 5 is_stmt 1 view .LVU2039
1846:src/display.c **** 				odig++;
 6315              		.loc 1 1846 12 is_stmt 0 view .LVU2040
 6316 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6317              	.LVL694:
1846:src/display.c **** 				odig++;
 6318              		.loc 1 1846 12 view .LVU2041
 6319 0796 03F8011F 		strb	r1, [r3, #1]!
1847:src/display.c **** 			}
 6320              		.loc 1 1847 5 is_stmt 1 view .LVU2042
1845:src/display.c **** 				*obp++ = *p++;
 6321              		.loc 1 1845 10 view .LVU2043
1845:src/display.c **** 				*obp++ = *p++;
 6322              		.loc 1 1845 10 is_stmt 0 view .LVU2044
 6323 079a 8342     		cmp	r3, r0
 6324 079c F9D1     		bne	.L524
 6325              	.LVL695:
ARM GAS  /tmp/ccZMW3We.s 			page 193


1845:src/display.c **** 				*obp++ = *p++;
 6326              		.loc 1 1845 10 view .LVU2045
 6327 079e 0137     		adds	r7, r7, #1
 6328 07a0 1744     		add	r7, r7, r2
 6329 07a2 5346     		mov	r3, r10
 6330 07a4 F9E6     		b	.L519
 6331              	.LVL696:
 6332              	.L529:
1863:src/display.c **** 			odig++;
 6333              		.loc 1 1863 4 is_stmt 1 view .LVU2046
1863:src/display.c **** 			odig++;
 6334              		.loc 1 1863 11 is_stmt 0 view .LVU2047
 6335 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6336 07aa 8DF81430 		strb	r3, [sp, #20]
1864:src/display.c **** 			dd--;
 6337              		.loc 1 1864 4 is_stmt 1 view .LVU2048
 6338              	.LVL697:
1865:src/display.c **** 			exp--;
 6339              		.loc 1 1865 4 view .LVU2049
1865:src/display.c **** 			exp--;
 6340              		.loc 1 1865 6 is_stmt 0 view .LVU2050
 6341 07ae 0AF1FF3A 		add	r10, r10, #-1
 6342              	.LVL698:
1866:src/display.c **** 		case -2:
 6343              		.loc 1 1866 4 is_stmt 1 view .LVU2051
1866:src/display.c **** 		case -2:
 6344              		.loc 1 1866 7 is_stmt 0 view .LVU2052
 6345 07b2 013D     		subs	r5, r5, #1
 6346              	.LVL699:
1866:src/display.c **** 		case -2:
 6347              		.loc 1 1866 7 view .LVU2053
 6348 07b4 0327     		movs	r7, #3
1863:src/display.c **** 			odig++;
 6349              		.loc 1 1863 15 view .LVU2054
 6350 07b6 0DF14909 		add	r9, sp, #73
 6351              	.LVL700:
1863:src/display.c **** 			odig++;
 6352              		.loc 1 1863 8 view .LVU2055
 6353 07ba 0DF11501 		add	r1, sp, #21
 6354              	.LVL701:
1863:src/display.c **** 			odig++;
 6355              		.loc 1 1863 8 view .LVU2056
 6356 07be A6E6     		b	.L531
 6357              	.LVL702:
 6358              	.L477:
1728:src/display.c **** 			/* We might have push the fixed decimals off the
 6359              		.loc 1 1728 4 is_stmt 1 view .LVU2057
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6360              		.loc 1 1732 4 view .LVU2058
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6361              		.loc 1 1732 21 is_stmt 0 view .LVU2059
 6362 07c0 05EB0A03 		add	r3, r5, r10
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6363              		.loc 1 1732 7 view .LVU2060
 6364 07c4 9E42     		cmp	r6, r3
1733:src/display.c **** 		}
 6365              		.loc 1 1733 5 is_stmt 1 view .LVU2061
ARM GAS  /tmp/ccZMW3We.s 			page 194


1733:src/display.c **** 		}
 6366              		.loc 1 1733 27 is_stmt 0 view .LVU2062
 6367 07c6 DCBF     		itt	le
 6368 07c8 06F1FF3A 		addle	r10, r6, #-1
 6369              	.LVL703:
1733:src/display.c **** 		}
 6370              		.loc 1 1733 8 view .LVU2063
 6371 07cc AAEB050A 		suble	r10, r10, r5
 6372              	.LVL704:
1733:src/display.c **** 		}
 6373              		.loc 1 1733 8 view .LVU2064
 6374 07d0 2A46     		mov	r2, r5
 6375 07d2 BAE4     		b	.L475
 6376              	.LVL705:
 6377              	.L569:
1769:src/display.c **** 			case -1:
 6378              		.loc 1 1769 22 view .LVU2065
 6379 07d4 0227     		movs	r7, #2
 6380 07d6 4046     		mov	r0, r8
 6381              	.LVL706:
 6382              	.L502:
1778:src/display.c **** 				odig++;
 6383              		.loc 1 1778 5 is_stmt 1 view .LVU2066
1778:src/display.c **** 				odig++;
 6384              		.loc 1 1778 12 is_stmt 0 view .LVU2067
 6385 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6386              	.LVL707:
1778:src/display.c **** 				odig++;
 6387              		.loc 1 1778 12 view .LVU2068
 6388 07dc 00F8013B 		strb	r3, [r0], #1
 6389              	.LVL708:
1779:src/display.c **** 				dd--;
 6390              		.loc 1 1779 5 is_stmt 1 view .LVU2069
1780:src/display.c **** 				exp--;
 6391              		.loc 1 1780 5 view .LVU2070
1781:src/display.c **** 			case 0:
 6392              		.loc 1 1781 5 view .LVU2071
1781:src/display.c **** 			case 0:
 6393              		.loc 1 1781 8 is_stmt 0 view .LVU2072
 6394 07e0 013D     		subs	r5, r5, #1
 6395              	.LVL709:
 6396              	.L499:
1783:src/display.c **** 			};
 6397              		.loc 1 1783 5 is_stmt 1 view .LVU2073
1784:src/display.c **** 			*obp++ = *p++;
 6398              		.loc 1 1784 5 view .LVU2074
1785:src/display.c **** 			odig++;
 6399              		.loc 1 1785 4 view .LVU2075
1785:src/display.c **** 			odig++;
 6400              		.loc 1 1785 15 is_stmt 0 view .LVU2076
 6401 07e2 4946     		mov	r1, r9
 6402              	.LVL710:
1785:src/display.c **** 			odig++;
 6403              		.loc 1 1785 11 view .LVU2077
 6404 07e4 0346     		mov	r3, r0
 6405 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6406              	.LVL711:
ARM GAS  /tmp/ccZMW3We.s 			page 195


1785:src/display.c **** 			odig++;
 6407              		.loc 1 1785 11 view .LVU2078
 6408 07ea 03F802CB 		strb	ip, [r3], #2
1786:src/display.c **** 			*obp++ = '.';
 6409              		.loc 1 1786 4 is_stmt 1 view .LVU2079
1787:src/display.c **** 			for (i=1; i<count; i++) {
 6410              		.loc 1 1787 4 view .LVU2080
 6411              	.LVL712:
1788:src/display.c **** 				*obp++ = *p++;
 6412              		.loc 1 1788 4 is_stmt 0 view .LVU2081
 6413 07ee 012A     		cmp	r2, #1
1787:src/display.c **** 			for (i=1; i<count; i++) {
 6414              		.loc 1 1787 11 view .LVU2082
 6415 07f0 4FF02E0C 		mov	ip, #46
 6416 07f4 80F801C0 		strb	ip, [r0, #1]
1788:src/display.c **** 				*obp++ = *p++;
 6417              		.loc 1 1788 4 is_stmt 1 view .LVU2083
 6418              	.LVL713:
1788:src/display.c **** 				*obp++ = *p++;
 6419              		.loc 1 1788 14 view .LVU2084
1788:src/display.c **** 				*obp++ = *p++;
 6420              		.loc 1 1788 4 is_stmt 0 view .LVU2085
 6421 07f8 53DD     		ble	.L570
1788:src/display.c **** 				*obp++ = *p++;
 6422              		.loc 1 1788 4 view .LVU2086
 6423 07fa 0130     		adds	r0, r0, #1
 6424 07fc 9144     		add	r9, r9, r2
 6425              	.LVL714:
 6426              	.L504:
1789:src/display.c **** 				odig++;
 6427              		.loc 1 1789 5 is_stmt 1 discriminator 3 view .LVU2087
1789:src/display.c **** 				odig++;
 6428              		.loc 1 1789 12 is_stmt 0 discriminator 3 view .LVU2088
 6429 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6430              	.LVL715:
1789:src/display.c **** 				odig++;
 6431              		.loc 1 1789 12 discriminator 3 view .LVU2089
 6432 0802 00F801CF 		strb	ip, [r0, #1]!
1790:src/display.c **** 			}
 6433              		.loc 1 1790 5 is_stmt 1 discriminator 3 view .LVU2090
1788:src/display.c **** 				*obp++ = *p++;
 6434              		.loc 1 1788 23 discriminator 3 view .LVU2091
1788:src/display.c **** 				*obp++ = *p++;
 6435              		.loc 1 1788 14 discriminator 3 view .LVU2092
1788:src/display.c **** 				*obp++ = *p++;
 6436              		.loc 1 1788 4 is_stmt 0 discriminator 3 view .LVU2093
 6437 0806 4945     		cmp	r1, r9
 6438 0808 F9D1     		bne	.L504
 6439 080a 013A     		subs	r2, r2, #1
 6440              	.LVL716:
1788:src/display.c **** 				*obp++ = *p++;
 6441              		.loc 1 1788 4 discriminator 3 view .LVU2094
 6442 080c 1344     		add	r3, r3, r2
 6443 080e 1744     		add	r7, r7, r2
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6444              		.loc 1 1792 13 view .LVU2095
 6445 0810 4FF0010B 		mov	fp, #1
ARM GAS  /tmp/ccZMW3We.s 			page 196


 6446 0814 44E5     		b	.L503
 6447              	.LVL717:
 6448              	.L500:
1772:src/display.c **** 				odig++;
 6449              		.loc 1 1772 5 is_stmt 1 view .LVU2096
1772:src/display.c **** 				odig++;
 6450              		.loc 1 1772 12 is_stmt 0 view .LVU2097
 6451 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6452 081a 8DF81430 		strb	r3, [sp, #20]
1773:src/display.c **** 				dd--;
 6453              		.loc 1 1773 5 is_stmt 1 view .LVU2098
 6454              	.LVL718:
1774:src/display.c **** 				exp--;
 6455              		.loc 1 1774 5 view .LVU2099
1775:src/display.c **** 			case -2:
 6456              		.loc 1 1775 5 view .LVU2100
1775:src/display.c **** 			case -2:
 6457              		.loc 1 1775 8 is_stmt 0 view .LVU2101
 6458 081e 013D     		subs	r5, r5, #1
 6459              	.LVL719:
1775:src/display.c **** 			case -2:
 6460              		.loc 1 1775 8 view .LVU2102
 6461 0820 0327     		movs	r7, #3
1772:src/display.c **** 				odig++;
 6462              		.loc 1 1772 16 view .LVU2103
 6463 0822 0DF14909 		add	r9, sp, #73
 6464              	.LVL720:
1772:src/display.c **** 				odig++;
 6465              		.loc 1 1772 9 view .LVU2104
 6466 0826 0DF11500 		add	r0, sp, #21
 6467              	.LVL721:
1772:src/display.c **** 				odig++;
 6468              		.loc 1 1772 9 view .LVU2105
 6469 082a D5E7     		b	.L502
 6470              	.LVL722:
 6471              	.L538:
1914:src/display.c **** 		}
 6472              		.loc 1 1914 5 is_stmt 1 view .LVU2106
 6473 082c 2D21     		movs	r1, #45
 6474 082e A6F10900 		sub	r0, r6, #9
 6475 0832 FFF7FEFF 		bl	set_dig
 6476              	.LVL723:
 6477 0836 019B     		ldr	r3, [sp, #4]
 6478 0838 43E5     		b	.L534
 6479              	.LVL724:
 6480              	.L669:
 6481              	.LBB398:
 6482              	.LBB396:
 6483              	.LBB390:
1481:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6484              		.loc 1 1481 3 view .LVU2107
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6485              		.loc 1 1484 3 view .LVU2108
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6486              		.loc 1 1484 13 is_stmt 0 view .LVU2109
 6487 083a 08F10306 		add	r6, r8, #3
 6488              	.LVL725:
ARM GAS  /tmp/ccZMW3We.s 			page 197


1485:src/display.c **** 		if (grouping) {
 6489              		.loc 1 1485 3 is_stmt 1 view .LVU2110
 6490 083e 4749     		ldr	r1, .L674+12
 6491 0840 0D22     		movs	r2, #13
 6492 0842 3046     		mov	r0, r6
 6493 0844 FFF7FEFF 		bl	xcopy
 6494              	.LVL726:
1486:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6495              		.loc 1 1486 3 view .LVU2111
1487:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
 6496              		.loc 1 1487 4 view .LVU2112
 6497 0848 1322     		movs	r2, #19
 6498 084a 08EB0201 		add	r1, r8, r2
 6499 084e 08F11400 		add	r0, r8, #20
 6500 0852 FFF7FEFF 		bl	xcopy
 6501              	.LVL727:
1488:src/display.c **** 			x += 3 + 13 + 7;
 6502              		.loc 1 1488 4 view .LVU2113
1489:src/display.c **** 		}
 6503              		.loc 1 1489 6 is_stmt 0 view .LVU2114
 6504 0856 08F11705 		add	r5, r8, #23
 6505              	.LVL728:
1488:src/display.c **** 			x += 3 + 13 + 7;
 6506              		.loc 1 1488 22 view .LVU2115
 6507 085a 88F81370 		strb	r7, [r8, #19]
1489:src/display.c **** 		}
 6508              		.loc 1 1489 4 is_stmt 1 view .LVU2116
 6509              	.LVL729:
1502:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
 6510              		.loc 1 1502 3 view .LVU2117
1503:src/display.c **** 	}
 6511              		.loc 1 1503 3 view .LVU2118
1503:src/display.c **** 	}
 6512              		.loc 1 1503 5 is_stmt 0 view .LVU2119
 6513 085e 1B24     		movs	r4, #27
 6514              	.LVL730:
 6515              	.L454:
1503:src/display.c **** 	}
 6516              		.loc 1 1503 5 view .LVU2120
 6517              	.LBE390:
1537:src/display.c **** 		}
 6518              		.loc 1 1537 4 is_stmt 1 view .LVU2121
 6519              	.LBB391:
 6520              	.LBI391:
 355:src/display.c **** 	if (sep == SEP_NONE)
 6521              		.loc 1 355 14 view .LVU2122
 6522              	.LBB392:
 356:src/display.c **** 		return res;
 6523              		.loc 1 356 2 view .LVU2123
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 6524              		.loc 1 358 2 view .LVU2124
 6525 0860 2046     		mov	r0, r4
 6526 0862 5146     		mov	r1, r10
 6527              	.LBE392:
 6528              	.LBE391:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6529              		.loc 1 1536 37 is_stmt 0 view .LVU2125
ARM GAS  /tmp/ccZMW3We.s 			page 198


 6530 0864 1B34     		adds	r4, r4, #27
 6531              	.LVL731:
 6532              	.LBB394:
 6533              	.LBB393:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6534              		.loc 1 1536 37 view .LVU2126
 6535 0866 FFF7FEFF 		bl	set_separator.part.0
 6536              	.LVL732:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6537              		.loc 1 1536 37 view .LVU2127
 6538              	.LBE393:
 6539              	.LBE394:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6540              		.loc 1 1536 35 is_stmt 1 view .LVU2128
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6541              		.loc 1 1536 10 view .LVU2129
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6542              		.loc 1 1536 3 is_stmt 0 view .LVU2130
 6543 086a 512C     		cmp	r4, #81
 6544 086c F8DD     		ble	.L454
 6545 086e 6C1E     		subs	r4, r5, #1
 6546              	.LVL733:
 6547              	.L456:
1542:src/display.c **** 
 6548              		.loc 1 1542 3 is_stmt 1 view .LVU2131
 6549 0870 5846     		mov	r0, fp
 6550 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1541:src/display.c **** 		set_dig(j, x[i]);
 6551              		.loc 1 1541 33 is_stmt 0 view .LVU2132
 6552 0876 0BF1090B 		add	fp, fp, #9
 6553              	.LVL734:
1542:src/display.c **** 
 6554              		.loc 1 1542 3 view .LVU2133
 6555 087a FFF7FEFF 		bl	set_dig
 6556              	.LVL735:
1541:src/display.c **** 		set_dig(j, x[i]);
 6557              		.loc 1 1541 26 is_stmt 1 view .LVU2134
1541:src/display.c **** 		set_dig(j, x[i]);
 6558              		.loc 1 1541 18 view .LVU2135
1541:src/display.c **** 		set_dig(j, x[i]);
 6559              		.loc 1 1541 2 is_stmt 0 view .LVU2136
 6560 087e BBF16C0F 		cmp	fp, #108
 6561 0882 F5D1     		bne	.L456
1544:src/display.c **** 	set_status(upper_str - negative);
 6562              		.loc 1 1544 2 is_stmt 1 view .LVU2137
1544:src/display.c **** 	set_status(upper_str - negative);
 6563              		.loc 1 1544 5 is_stmt 0 view .LVU2138
 6564 0884 0023     		movs	r3, #0
1545:src/display.c **** }
 6565              		.loc 1 1545 2 view .LVU2139
 6566 0886 3046     		mov	r0, r6
1544:src/display.c **** 	set_status(upper_str - negative);
 6567              		.loc 1 1544 5 view .LVU2140
 6568 0888 2B70     		strb	r3, [r5]
1545:src/display.c **** }
 6569              		.loc 1 1545 2 is_stmt 1 view .LVU2141
 6570 088a FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccZMW3We.s 			page 199


 6571              	.LVL736:
1546:src/display.c **** 
 6572              		.loc 1 1546 1 is_stmt 0 view .LVU2142
 6573 088e 43E5     		b	.L435
 6574              	.LVL737:
 6575              	.L666:
1546:src/display.c **** 
 6576              		.loc 1 1546 1 view .LVU2143
 6577              	.LBE396:
 6578              	.LBE398:
1602:src/display.c ****  				return;
 6579              		.loc 1 1602 5 is_stmt 1 view .LVU2144
 6580 0890 3046     		mov	r0, r6
 6581 0892 FFF7FEFF 		bl	set_x_hms
 6582              	.LVL738:
1603:src/display.c **** 			}
 6583              		.loc 1 1603 6 view .LVU2145
 6584 0896 3FE5     		b	.L435
 6585              	.LVL739:
 6586              	.L567:
1764:src/display.c **** 		if (count != *display_digits)
 6587              		.loc 1 1764 14 is_stmt 0 view .LVU2146
 6588 0898 3246     		mov	r2, r6
 6589 089a A3E4     		b	.L495
 6590              	.LVL740:
 6591              	.L568:
1769:src/display.c **** 			case -1:
 6592              		.loc 1 1769 22 view .LVU2147
 6593 089c 0127     		movs	r7, #1
 6594 089e 4046     		mov	r0, r8
 6595 08a0 9FE7     		b	.L499
 6596              	.LVL741:
 6597              	.L570:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6598              		.loc 1 1792 13 view .LVU2148
 6599 08a2 4FF0010B 		mov	fp, #1
 6600 08a6 FBE4     		b	.L503
 6601              	.LVL742:
 6602              	.L542:
 6603              	.LBB399:
 6604              	.LBB375:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6605              		.loc 1 1792 13 view .LVU2149
 6606 08a8 3046     		mov	r0, r6
 6607 08aa 0193     		str	r3, [sp, #4]
 6608 08ac FFF7FEFF 		bl	set_separator.part.0
 6609              	.LVL743:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6610              		.loc 1 1792 13 view .LVU2150
 6611 08b0 019B     		ldr	r3, [sp, #4]
 6612 08b2 0446     		mov	r4, r0
 6613              	.LVL744:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6614              		.loc 1 1792 13 view .LVU2151
 6615 08b4 F9E5     		b	.L540
 6616              	.LVL745:
 6617              	.L480:
ARM GAS  /tmp/ccZMW3We.s 			page 200


1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6618              		.loc 1 1792 13 view .LVU2152
 6619              	.LBE375:
 6620              	.LBE399:
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6621              		.loc 1 1742 3 is_stmt 1 view .LVU2153
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6622              		.loc 1 1742 6 is_stmt 0 view .LVU2154
 6623 08b6 4B45     		cmp	r3, r9
 6624 08b8 7FF460AC 		bne	.L551
 6625 08bc 63E5     		b	.L552
 6626              	.LVL746:
 6627              	.L451:
 6628              	.LBB400:
 6629              	.LBB397:
1527:src/display.c **** 			x[10] = '\0';
 6630              		.loc 1 1527 4 is_stmt 1 view .LVU2155
1528:src/display.c **** 		}
 6631              		.loc 1 1528 4 view .LVU2156
1527:src/display.c **** 			x[10] = '\0';
 6632              		.loc 1 1527 9 is_stmt 0 view .LVU2157
 6633 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6634 08c2 21E7     		b	.L453
 6635              	.LVL747:
 6636              	.L668:
 6637              	.LBB395:
1452:src/display.c **** 
 6638              		.loc 1 1452 3 is_stmt 1 view .LVU2158
1454:src/display.c **** 		xcopy(x, small_minus, 4);
 6639              		.loc 1 1454 3 view .LVU2159
 6640 08c4 2222     		movs	r2, #34
 6641 08c6 0DF11501 		add	r1, sp, #21
 6642 08ca 06A8     		add	r0, sp, #24
 6643              	.LVL748:
1454:src/display.c **** 		xcopy(x, small_minus, 4);
 6644              		.loc 1 1454 3 is_stmt 0 view .LVU2160
 6645 08cc FFF7FEFF 		bl	xcopy
 6646              	.LVL749:
1455:src/display.c **** 		x += 4;
 6647              		.loc 1 1455 3 is_stmt 1 view .LVU2161
 6648 08d0 4046     		mov	r0, r8
 6649 08d2 2349     		ldr	r1, .L674+16
 6650 08d4 0422     		movs	r2, #4
 6651 08d6 FFF7FEFF 		bl	xcopy
 6652              	.LVL750:
1456:src/display.c **** 		negative = 4;
 6653              		.loc 1 1456 3 view .LVU2162
1457:src/display.c **** #else
 6654              		.loc 1 1457 3 view .LVU2163
1456:src/display.c **** 		negative = 4;
 6655              		.loc 1 1456 5 is_stmt 0 view .LVU2164
 6656 08da 0DF11808 		add	r8, sp, #24
 6657              	.LVL751:
1457:src/display.c **** #else
 6658              		.loc 1 1457 12 view .LVU2165
 6659 08de 0426     		movs	r6, #4
 6660              	.LVL752:
ARM GAS  /tmp/ccZMW3We.s 			page 201


1457:src/display.c **** #else
 6661              		.loc 1 1457 12 view .LVU2166
 6662              	.LBE395:
 6663 08e0 C7E6     		b	.L447
 6664              	.LVL753:
 6665              	.L505:
1457:src/display.c **** #else
 6666              		.loc 1 1457 12 view .LVU2167
 6667              	.LBE397:
 6668              	.LBE400:
1808:src/display.c **** 			odig++;
 6669              		.loc 1 1808 4 is_stmt 1 view .LVU2168
1809:src/display.c **** 			*obp++ = '.';
 6670              		.loc 1 1809 4 view .LVU2169
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6671              		.loc 1 1810 4 view .LVU2170
1808:src/display.c **** 			odig++;
 6672              		.loc 1 1808 11 is_stmt 0 view .LVU2171
 6673 08e2 42F63063 		movw	r3, #11824
1811:src/display.c **** 				*obp++ = '0';
 6674              		.loc 1 1811 4 view .LVU2172
 6675 08e6 691C     		adds	r1, r5, #1
1808:src/display.c **** 			odig++;
 6676              		.loc 1 1808 11 view .LVU2173
 6677 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
1811:src/display.c **** 				*obp++ = '0';
 6678              		.loc 1 1811 4 is_stmt 1 view .LVU2174
 6679              	.LVL754:
1811:src/display.c **** 				*obp++ = '0';
 6680              		.loc 1 1811 18 view .LVU2175
1811:src/display.c **** 				*obp++ = '0';
 6681              		.loc 1 1811 4 is_stmt 0 view .LVU2176
 6682 08ec 2CD0     		beq	.L571
 6683 08ee C5F10100 		rsb	r0, r5, #1
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6684              		.loc 1 1810 8 view .LVU2177
 6685 08f2 0DF11603 		add	r3, sp, #22
 6686              	.LVL755:
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6687              		.loc 1 1810 8 view .LVU2178
 6688 08f6 4044     		add	r0, r0, r8
 6689 08f8 1946     		mov	r1, r3
 6690              	.LVL756:
1812:src/display.c **** 				odig++;
 6691              		.loc 1 1812 12 view .LVU2179
 6692 08fa 3027     		movs	r7, #48
 6693              	.LVL757:
 6694              	.L512:
1812:src/display.c **** 				odig++;
 6695              		.loc 1 1812 5 is_stmt 1 discriminator 3 view .LVU2180
1812:src/display.c **** 				odig++;
 6696              		.loc 1 1812 12 is_stmt 0 discriminator 3 view .LVU2181
 6697 08fc 01F8017B 		strb	r7, [r1], #1
 6698              	.LVL758:
1813:src/display.c **** 			}
 6699              		.loc 1 1813 5 is_stmt 1 discriminator 3 view .LVU2182
1811:src/display.c **** 				*obp++ = '0';
ARM GAS  /tmp/ccZMW3We.s 			page 202


 6700              		.loc 1 1811 23 discriminator 3 view .LVU2183
1811:src/display.c **** 				*obp++ = '0';
 6701              		.loc 1 1811 18 discriminator 3 view .LVU2184
1811:src/display.c **** 				*obp++ = '0';
 6702              		.loc 1 1811 4 is_stmt 0 discriminator 3 view .LVU2185
 6703 0900 8142     		cmp	r1, r0
 6704 0902 FBD1     		bne	.L512
 6705 0904 E943     		mvns	r1, r5
 6706              	.LVL759:
1811:src/display.c **** 				*obp++ = '0';
 6707              		.loc 1 1811 4 discriminator 3 view .LVU2186
 6708 0906 0B44     		add	r3, r3, r1
 6709 0908 6F42     		rsbs	r7, r5, #0
 6710              	.L511:
 6711              	.LVL760:
1815:src/display.c **** 				*obp++ = *p++;
 6712              		.loc 1 1815 14 is_stmt 1 view .LVU2187
1815:src/display.c **** 				*obp++ = *p++;
 6713              		.loc 1 1815 4 is_stmt 0 view .LVU2188
 6714 090a 002A     		cmp	r2, #0
 6715 090c 7FF7C8AC 		ble	.L503
 6716 0910 02F1FF3C 		add	ip, r2, #-1
 6717 0914 9C44     		add	ip, ip, r3
 6718 0916 591E     		subs	r1, r3, #1
 6719              	.LVL761:
 6720              	.L513:
1816:src/display.c **** 				odig++;
 6721              		.loc 1 1816 5 is_stmt 1 discriminator 3 view .LVU2189
1816:src/display.c **** 				odig++;
 6722              		.loc 1 1816 12 is_stmt 0 discriminator 3 view .LVU2190
 6723 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6724              	.LVL762:
1816:src/display.c **** 				odig++;
 6725              		.loc 1 1816 12 discriminator 3 view .LVU2191
 6726 091c 01F8010F 		strb	r0, [r1, #1]!
1817:src/display.c **** 			}
 6727              		.loc 1 1817 5 is_stmt 1 discriminator 3 view .LVU2192
1815:src/display.c **** 				*obp++ = *p++;
 6728              		.loc 1 1815 23 discriminator 3 view .LVU2193
 6729              	.LVL763:
1815:src/display.c **** 				*obp++ = *p++;
 6730              		.loc 1 1815 14 discriminator 3 view .LVU2194
1815:src/display.c **** 				*obp++ = *p++;
 6731              		.loc 1 1815 4 is_stmt 0 discriminator 3 view .LVU2195
 6732 0920 8C45     		cmp	ip, r1
 6733 0922 F9D1     		bne	.L513
 6734              	.LVL764:
1815:src/display.c **** 				*obp++ = *p++;
 6735              		.loc 1 1815 4 discriminator 3 view .LVU2196
 6736 0924 1344     		add	r3, r3, r2
 6737              	.LVL765:
1815:src/display.c **** 				*obp++ = *p++;
 6738              		.loc 1 1815 4 discriminator 3 view .LVU2197
 6739 0926 1744     		add	r7, r7, r2
 6740 0928 BAE4     		b	.L503
 6741              	.LVL766:
 6742              	.L667:
ARM GAS  /tmp/ccZMW3We.s 			page 203


1758:src/display.c **** 
 6743              		.loc 1 1758 2 is_stmt 1 view .LVU2198
1758:src/display.c **** 
 6744              		.loc 1 1758 40 is_stmt 0 view .LVU2199
 6745 092a 0AF10102 		add	r2, r10, #1
1758:src/display.c **** 
 6746              		.loc 1 1758 9 view .LVU2200
 6747 092e 09EB0203 		add	r3, r9, r2
 6748              	.LVL767:
1758:src/display.c **** 
 6749              		.loc 1 1758 45 is_stmt 1 view .LVU2201
1758:src/display.c **** 
 6750              		.loc 1 1758 2 is_stmt 0 view .LVU2202
 6751 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6752 0936 002A     		cmp	r2, #0
 6753 0938 3FF496AC 		beq	.L649
1747:src/display.c **** 				extra_digits = 0;
 6754              		.loc 1 1747 34 view .LVU2203
 6755 093c 0227     		movs	r7, #2
 6756 093e 2FE4     		b	.L550
 6757              	.LVL768:
 6758              	.L572:
1838:src/display.c **** 			*obp++ = '.';
 6759              		.loc 1 1838 8 view .LVU2204
 6760 0940 0127     		movs	r7, #1
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6761              		.loc 1 1839 8 view .LVU2205
 6762 0942 0DF11603 		add	r3, sp, #22
 6763              	.LVL769:
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6764              		.loc 1 1839 8 view .LVU2206
 6765 0946 1AE7     		b	.L522
 6766              	.LVL770:
 6767              	.L571:
1809:src/display.c **** 			*obp++ = '.';
 6768              		.loc 1 1809 8 view .LVU2207
 6769 0948 0127     		movs	r7, #1
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6770              		.loc 1 1810 8 view .LVU2208
 6771 094a 0DF11603 		add	r3, sp, #22
 6772              	.LVL771:
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6773              		.loc 1 1810 8 view .LVU2209
 6774 094e DCE7     		b	.L511
 6775              	.L675:
 6776              		.align	2
 6777              	.L674:
 6778 0950 00000000 		.word	.LANCHOR1
 6779 0954 18FCFFFF 		.word	-1000
 6780 0958 D34D6210 		.word	274877907
 6781 095c 00000000 		.word	.LANCHOR14
 6782 0960 00000000 		.word	.LANCHOR13
 6783              		.cfi_endproc
 6784              	.LFE27:
 6786              		.section	.text.set_x,"ax",%progbits
 6787              		.align	1
 6788              		.p2align 2,,3
ARM GAS  /tmp/ccZMW3We.s 			page 204


 6789              		.syntax unified
 6790              		.thumb
 6791              		.thumb_func
 6792              		.fpu fpv4-sp-d16
 6794              	set_x:
 6795              	.LVL772:
 6796              	.LFB26:
1553:src/display.c **** 	decNumber z;
 6797              		.loc 1 1553 60 is_stmt 1 view -0
 6798              		.cfi_startproc
 6799              		@ args = 0, pretend = 0, frame = 40
 6800              		@ frame_needed = 0, uses_anonymous_args = 0
1554:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6801              		.loc 1 1554 2 view .LVU2211
1555:src/display.c **** 
 6802              		.loc 1 1555 2 view .LVU2212
1553:src/display.c **** 	decNumber z;
 6803              		.loc 1 1553 60 is_stmt 0 view .LVU2213
 6804 0000 30B5     		push	{r4, r5, lr}
 6805              		.cfi_def_cfa_offset 12
 6806              		.cfi_offset 4, -12
 6807              		.cfi_offset 5, -8
 6808              		.cfi_offset 14, -4
 6809 0002 8BB0     		sub	sp, sp, #44
 6810              		.cfi_def_cfa_offset 56
1555:src/display.c **** 
 6811              		.loc 1 1555 6 view .LVU2214
 6812 0004 0C23     		movs	r3, #12
1558:src/display.c **** 	else
 6813              		.loc 1 1558 3 view .LVU2215
 6814 0006 01AD     		add	r5, sp, #4
1553:src/display.c **** 	decNumber z;
 6815              		.loc 1 1553 60 view .LVU2216
 6816 0008 0C46     		mov	r4, r1
1555:src/display.c **** 
 6817              		.loc 1 1555 6 view .LVU2217
 6818 000a 0093     		str	r3, [sp]
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6819              		.loc 1 1557 2 is_stmt 1 view .LVU2218
1558:src/display.c **** 	else
 6820              		.loc 1 1558 3 is_stmt 0 view .LVU2219
 6821 000c 2946     		mov	r1, r5
 6822              	.LVL773:
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6823              		.loc 1 1557 5 view .LVU2220
 6824 000e 42B1     		cbz	r2, .L677
1558:src/display.c **** 	else
 6825              		.loc 1 1558 3 is_stmt 1 view .LVU2221
 6826 0010 FFF7FEFF 		bl	decimal128ToNumber
 6827              	.LVL774:
1561:src/display.c **** }
 6828              		.loc 1 1561 2 view .LVU2222
 6829 0014 2146     		mov	r1, r4
 6830 0016 2846     		mov	r0, r5
 6831 0018 6A46     		mov	r2, sp
 6832 001a FFF7FEFF 		bl	set_x_dn
 6833              	.LVL775:
ARM GAS  /tmp/ccZMW3We.s 			page 205


1562:src/display.c **** 
 6834              		.loc 1 1562 1 is_stmt 0 view .LVU2223
 6835 001e 0BB0     		add	sp, sp, #44
 6836              		.cfi_remember_state
 6837              		.cfi_def_cfa_offset 12
 6838              		@ sp needed
 6839 0020 30BD     		pop	{r4, r5, pc}
 6840              	.LVL776:
 6841              	.L677:
 6842              		.cfi_restore_state
1560:src/display.c **** 	set_x_dn(&z, res, &digits);
 6843              		.loc 1 1560 3 is_stmt 1 view .LVU2224
 6844 0022 FFF7FEFF 		bl	decimal64ToNumber
 6845              	.LVL777:
1561:src/display.c **** }
 6846              		.loc 1 1561 2 view .LVU2225
 6847 0026 2146     		mov	r1, r4
 6848 0028 2846     		mov	r0, r5
 6849 002a 6A46     		mov	r2, sp
 6850 002c FFF7FEFF 		bl	set_x_dn
 6851              	.LVL778:
1562:src/display.c **** 
 6852              		.loc 1 1562 1 is_stmt 0 view .LVU2226
 6853 0030 0BB0     		add	sp, sp, #44
 6854              		.cfi_def_cfa_offset 12
 6855              		@ sp needed
 6856 0032 30BD     		pop	{r4, r5, pc}
1562:src/display.c **** 
 6857              		.loc 1 1562 1 view .LVU2227
 6858              		.cfi_endproc
 6859              	.LFE26:
 6861              		.section	.text.format_reg,"ax",%progbits
 6862              		.align	1
 6863              		.p2align 2,,3
 6864              		.global	format_reg
 6865              		.syntax unified
 6866              		.thumb
 6867              		.thumb_func
 6868              		.fpu fpv4-sp-d16
 6870              	format_reg:
 6871              	.LVL779:
 6872              	.LFB28:
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6873              		.loc 1 1969 39 is_stmt 1 view -0
 6874              		.cfi_startproc
 6875              		@ args = 0, pretend = 0, frame = 40
 6876              		@ frame_needed = 0, uses_anonymous_args = 0
1970:src/display.c **** 
 6877              		.loc 1 1970 2 view .LVU2229
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6878              		.loc 1 1969 39 is_stmt 0 view .LVU2230
 6879 0000 30B5     		push	{r4, r5, lr}
 6880              		.cfi_def_cfa_offset 12
 6881              		.cfi_offset 4, -12
 6882              		.cfi_offset 5, -8
 6883              		.cfi_offset 14, -4
 6884 0002 8BB0     		sub	sp, sp, #44
ARM GAS  /tmp/ccZMW3We.s 			page 206


 6885              		.cfi_def_cfa_offset 56
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6886              		.loc 1 1969 39 view .LVU2231
 6887 0004 0C46     		mov	r4, r1
 6888 0006 0546     		mov	r5, r0
1970:src/display.c **** 
 6889              		.loc 1 1970 28 view .LVU2232
 6890 0008 FFF7FEFF 		bl	get_reg_n
 6891              	.LVL780:
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6892              		.loc 1 1972 6 view .LVU2233
 6893 000c 154B     		ldr	r3, .L687
 6894 000e 1B68     		ldr	r3, [r3]
 6895 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6896              	.LVL781:
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6897              		.loc 1 1972 2 is_stmt 1 view .LVU2234
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6898              		.loc 1 1972 5 is_stmt 0 view .LVU2235
 6899 0014 D207     		lsls	r2, r2, #31
 6900 0016 1DD4     		bmi	.L685
1975:src/display.c **** 		decNumber x;
 6901              		.loc 1 1975 7 is_stmt 1 view .LVU2236
1975:src/display.c **** 		decNumber x;
 6902              		.loc 1 1975 10 is_stmt 0 view .LVU2237
 6903 0018 44B1     		cbz	r4, .L686
 6904              	.L683:
1986:src/display.c **** }
 6905              		.loc 1 1986 3 is_stmt 1 view .LVU2238
1986:src/display.c **** }
 6906              		.loc 1 1986 23 is_stmt 0 view .LVU2239
 6907 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1986:src/display.c **** }
 6908              		.loc 1 1986 3 view .LVU2240
 6909 001e 2146     		mov	r1, r4
 6910 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6911 0024 FFF7FEFF 		bl	set_x
 6912              	.LVL782:
1987:src/display.c **** 
 6913              		.loc 1 1987 1 view .LVU2241
 6914 0028 0BB0     		add	sp, sp, #44
 6915              		.cfi_remember_state
 6916              		.cfi_def_cfa_offset 12
 6917              		@ sp needed
 6918 002a 30BD     		pop	{r4, r5, pc}
 6919              	.LVL783:
 6920              	.L686:
 6921              		.cfi_restore_state
1975:src/display.c **** 		decNumber x;
 6922              		.loc 1 1975 32 discriminator 1 view .LVU2242
 6923 002c 0E4A     		ldr	r2, .L687+4
1975:src/display.c **** 		decNumber x;
 6924              		.loc 1 1975 23 discriminator 1 view .LVU2243
 6925 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6926 0030 012A     		cmp	r2, #1
 6927 0032 F2D9     		bls	.L683
 6928              	.LVL784:
ARM GAS  /tmp/ccZMW3We.s 			page 207


 6929              	.LBB404:
 6930              	.LBI404:
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6931              		.loc 1 1969 6 is_stmt 1 view .LVU2244
 6932              	.LBB405:
 6933              	.LBB406:
1976:src/display.c **** 		int s;
 6934              		.loc 1 1976 3 view .LVU2245
1977:src/display.c **** 		unsigned long long int v;
 6935              		.loc 1 1977 3 view .LVU2246
1978:src/display.c **** 
 6936              		.loc 1 1978 3 view .LVU2247
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
 6937              		.loc 1 1980 3 view .LVU2248
 6938 0034 2946     		mov	r1, r5
 6939 0036 01A8     		add	r0, sp, #4
 6940              	.LVL785:
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
 6941              		.loc 1 1980 3 is_stmt 0 view .LVU2249
 6942 0038 FFF7FEFF 		bl	getRegister
 6943              	.LVL786:
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6944              		.loc 1 1981 3 is_stmt 1 view .LVU2250
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6945              		.loc 1 1981 7 is_stmt 0 view .LVU2251
 6946 003c 01A8     		add	r0, sp, #4
 6947 003e 6946     		mov	r1, sp
 6948 0040 FFF7FEFF 		bl	dn_to_ull
 6949              	.LVL787:
1982:src/display.c **** 	}
 6950              		.loc 1 1982 3 is_stmt 1 view .LVU2252
 6951 0044 009A     		ldr	r2, [sp]
 6952 0046 FFF7FEFF 		bl	build_value
 6953              	.LVL788:
1982:src/display.c **** 	}
 6954              		.loc 1 1982 3 is_stmt 0 view .LVU2253
 6955 004a 2246     		mov	r2, r4
 6956 004c FFF7FEFF 		bl	set_int_x
 6957              	.LVL789:
 6958              	.LBE406:
 6959              	.LBE405:
 6960              	.LBE404:
1987:src/display.c **** 
 6961              		.loc 1 1987 1 view .LVU2254
 6962 0050 0BB0     		add	sp, sp, #44
 6963              		.cfi_remember_state
 6964              		.cfi_def_cfa_offset 12
 6965              		@ sp needed
 6966 0052 30BD     		pop	{r4, r5, pc}
 6967              	.LVL790:
 6968              	.L685:
 6969              		.cfi_restore_state
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6970              		.loc 1 1973 3 is_stmt 1 view .LVU2255
 6971 0054 2846     		mov	r0, r5
 6972              	.LVL791:
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
ARM GAS  /tmp/ccZMW3We.s 			page 208


 6973              		.loc 1 1973 3 is_stmt 0 view .LVU2256
 6974 0056 FFF7FEFF 		bl	get_reg_n_int
 6975              	.LVL792:
 6976 005a 2246     		mov	r2, r4
 6977 005c FFF7FEFF 		bl	set_int_x
 6978              	.LVL793:
1987:src/display.c **** 
 6979              		.loc 1 1987 1 view .LVU2257
 6980 0060 0BB0     		add	sp, sp, #44
 6981              		.cfi_def_cfa_offset 12
 6982              		@ sp needed
 6983 0062 30BD     		pop	{r4, r5, pc}
 6984              	.LVL794:
 6985              	.L688:
1987:src/display.c **** 
 6986              		.loc 1 1987 1 view .LVU2258
 6987              		.align	2
 6988              	.L687:
 6989 0064 00000000 		.word	main_ram
 6990 0068 00000000 		.word	StateWhileOn
 6991              		.cfi_endproc
 6992              	.LFE28:
 6994              		.section	.text.set_status_right,"ax",%progbits
 6995              		.align	1
 6996              		.p2align 2,,3
 6997              		.syntax unified
 6998              		.thumb
 6999              		.thumb_func
 7000              		.fpu fpv4-sp-d16
 7002              	set_status_right:
 7003              	.LVL795:
 7004              	.LFB42:
2735:src/display.c **** 
2736:src/display.c **** 
2737:src/display.c **** /*
2738:src/display.c ****  *  Display messages (global function)
2739:src/display.c ****  */
2740:src/display.c **** extern void message(const char *str1, const char *str2)
2741:src/display.c **** {
2742:src/display.c **** 	State2.disp_freeze = 0;
2743:src/display.c **** 	State2.disp_small = 0;
2744:src/display.c **** 	WasDataEntry = 0;
2745:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
2746:src/display.c **** 		// Complete redraw necessary
2747:src/display.c **** 		DispMsg = str1;
2748:src/display.c **** 		display();
2749:src/display.c **** 	}
2750:src/display.c **** 	else {
2751:src/display.c **** 		if ( str2 != NULL ) {
2752:src/display.c **** 			reset_disp();
2753:src/display.c **** 			ShowRPN = 0;
2754:src/display.c **** 			set_annunciators();
2755:src/display.c **** 			set_digits_string( str2, 0 );
2756:src/display.c **** 		}
2757:src/display.c **** 		set_status( str1 );
2758:src/display.c **** 		finish_display();// message
2759:src/display.c **** 	}
ARM GAS  /tmp/ccZMW3We.s 			page 209


2760:src/display.c **** }
2761:src/display.c **** 
2762:src/display.c **** #ifdef INCLUDE_STOPWATCH
2763:src/display.c **** 
2764:src/display.c **** static void stopwatch_exponent(const char* exponent) {
2765:src/display.c **** 	int j = SEGS_EXP_BASE;
2766:src/display.c **** 	for (; *exponent!=0; exponent++) {
2767:src/display.c **** 		set_dig_s(j, *exponent, CNULL);
2768:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
2769:src/display.c **** 	}
2770:src/display.c **** }
2771:src/display.c **** 
2772:src/display.c **** void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
2773:src/display.c **** {
2774:src/display.c **** #ifndef REALBUILD
2775:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2776:src/display.c **** #endif
2777:src/display.c **** 	reset_disp();
2778:src/display.c **** 	set_dot(DEG);
2779:src/display.c **** 	set_digits_string( str2, 0 );
2780:src/display.c **** 	State2.disp_small = force_small;
2781:src/display.c **** 	if( exponent!=NULL ) {
2782:src/display.c **** 		stopwatch_exponent(exponent);
2783:src/display.c **** 	}
2784:src/display.c **** 	set_status( str1 );
2785:src/display.c **** 	finish_display();
2786:src/display.c **** }
2787:src/display.c **** 
2788:src/display.c **** 
2789:src/display.c **** #endif // INCLUDE_STOPWATCH
2790:src/display.c **** 
2791:src/display.c **** /* Display the right hand characters from the given string.
2792:src/display.c ****  * Trying to fit as many as possible into the bitmap area,
2793:src/display.c ****  * and reduce font size if required.
2794:src/display.c ****  */
2795:src/display.c **** static void set_status_right(const char *str) {
 7005              		.loc 1 2795 47 is_stmt 1 view -0
 7006              		.cfi_startproc
 7007              		@ args = 0, pretend = 0, frame = 0
 7008              		@ frame_needed = 0, uses_anonymous_args = 0
2796:src/display.c **** 	unsigned int x = 0;
 7009              		.loc 1 2796 2 view .LVU2260
2797:src/display.c **** 	const char *p;
 7010              		.loc 1 2797 2 view .LVU2261
2798:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7011              		.loc 1 2798 2 view .LVU2262
2795:src/display.c **** 	unsigned int x = 0;
 7012              		.loc 1 2795 47 is_stmt 0 view .LVU2263
 7013 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7014              		.cfi_def_cfa_offset 32
 7015              		.cfi_offset 3, -32
 7016              		.cfi_offset 4, -28
 7017              		.cfi_offset 5, -24
 7018              		.cfi_offset 6, -20
 7019              		.cfi_offset 7, -16
 7020              		.cfi_offset 8, -12
 7021              		.cfi_offset 9, -8
ARM GAS  /tmp/ccZMW3We.s 			page 210


 7022              		.cfi_offset 14, -4
 7023              		.loc 1 2798 23 view .LVU2264
 7024 0004 164B     		ldr	r3, .L703
 7025              		.loc 1 2798 41 view .LVU2265
 7026 0006 93F91630 		ldrsb	r3, [r3, #22]
 7027 000a 002B     		cmp	r3, #0
2795:src/display.c **** 	unsigned int x = 0;
 7028              		.loc 1 2795 47 view .LVU2266
 7029 000c 0646     		mov	r6, r0
 7030              		.loc 1 2798 41 view .LVU2267
 7031 000e 1DDA     		bge	.L702
 7032              	.LVL796:
 7033              	.L690:
 7034              		.loc 1 2798 12 view .LVU2268
 7035 0010 4FF00108 		mov	r8, #1
2799:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7036              		.loc 1 2799 36 view .LVU2269
 7037 0014 4FF48077 		mov	r7, #256
 7038              	.L691:
 7039              	.LVL797:
2800:src/display.c **** 
2801:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7040              		.loc 1 2801 2 is_stmt 1 discriminator 4 view .LVU2270
 7041              		.loc 1 2801 14 discriminator 4 view .LVU2271
 7042              		.loc 1 2801 2 is_stmt 0 discriminator 4 view .LVU2272
 7043 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7044 001a 3446     		mov	r4, r6
 7045 001c 1BB1     		cbz	r3, .L692
 7046              	.LVL798:
 7047              	.L693:
 7048              		.loc 1 2801 30 is_stmt 1 discriminator 3 view .LVU2273
 7049              		.loc 1 2801 26 discriminator 3 view .LVU2274
 7050              		.loc 1 2801 14 discriminator 3 view .LVU2275
 7051              		.loc 1 2801 2 is_stmt 0 discriminator 3 view .LVU2276
 7052 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7053              	.LVL799:
 7054              		.loc 1 2801 2 discriminator 3 view .LVU2277
 7055 0022 002B     		cmp	r3, #0
 7056 0024 FBD1     		bne	.L693
 7057              	.L692:
2796:src/display.c **** 	const char *p;
 7058              		.loc 1 2796 15 view .LVU2278
 7059 0026 0025     		movs	r5, #0
 7060 0028 06E0     		b	.L694
 7061              	.LVL800:
 7062              	.L695:
 7063              	.LBB407:
2802:src/display.c **** 	while (--p >= str) {
2803:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7064              		.loc 1 2803 26 view .LVU2279
 7065 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2804:src/display.c **** 
2805:src/display.c **** 		x += charlengths(c);
 7066              		.loc 1 2805 8 view .LVU2280
 7067 002c 3844     		add	r0, r0, r7
 7068 002e FFF7FEFF 		bl	charlengths
 7069              	.LVL801:
ARM GAS  /tmp/ccZMW3We.s 			page 211


 7070              		.loc 1 2805 5 view .LVU2281
 7071 0032 0544     		add	r5, r5, r0
 7072              	.LVL802:
2806:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7073              		.loc 1 2806 3 is_stmt 1 view .LVU2282
 7074              		.loc 1 2806 6 is_stmt 0 view .LVU2283
 7075 0034 2C2D     		cmp	r5, #44
 7076 0036 03D8     		bhi	.L696
 7077              	.LVL803:
 7078              	.L694:
2803:src/display.c **** 
 7079              		.loc 1 2803 3 is_stmt 1 view .LVU2284
2803:src/display.c **** 
 7080              		.loc 1 2803 3 is_stmt 0 view .LVU2285
 7081              	.LBE407:
2802:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7082              		.loc 1 2802 8 is_stmt 1 view .LVU2286
 7083 0038 A146     		mov	r9, r4
 7084 003a 013C     		subs	r4, r4, #1
 7085              	.LVL804:
 7086              	.LBB408:
2805:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7087              		.loc 1 2805 3 view .LVU2287
2805:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7088              		.loc 1 2805 3 is_stmt 0 view .LVU2288
 7089              	.LBE408:
2802:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7090              		.loc 1 2802 8 view .LVU2289
 7091 003c A642     		cmp	r6, r4
 7092 003e F4D9     		bls	.L695
 7093              	.LVL805:
 7094              	.L696:
2807:src/display.c **** 			break;
2808:src/display.c **** 	}
2809:src/display.c **** 	set_status_sized(p+1, toolarge);
 7095              		.loc 1 2809 2 is_stmt 1 view .LVU2290
 7096 0040 4146     		mov	r1, r8
 7097 0042 4846     		mov	r0, r9
2810:src/display.c **** }
 7098              		.loc 1 2810 1 is_stmt 0 view .LVU2291
 7099 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7100              		.cfi_remember_state
 7101              		.cfi_restore 14
 7102              		.cfi_restore 9
 7103              		.cfi_restore 8
 7104              		.cfi_restore 7
 7105              		.cfi_restore 6
 7106              		.cfi_restore 5
 7107              		.cfi_restore 4
 7108              		.cfi_restore 3
 7109              		.cfi_def_cfa_offset 0
 7110              	.LVL806:
2809:src/display.c **** }
 7111              		.loc 1 2809 2 view .LVU2292
 7112 0048 FFF7FEBF 		b	set_status_sized
 7113              	.LVL807:
 7114              	.L702:
ARM GAS  /tmp/ccZMW3We.s 			page 212


 7115              		.cfi_restore_state
 7116              	.LBB409:
 7117              	.LBI409:
2725:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7118              		.loc 1 2725 12 is_stmt 1 view .LVU2293
 7119              	.LBB410:
2726:src/display.c **** }
 7120              		.loc 1 2726 2 view .LVU2294
2726:src/display.c **** }
 7121              		.loc 1 2726 9 is_stmt 0 view .LVU2295
 7122 004c 0021     		movs	r1, #0
 7123 004e FFF7FEFF 		bl	pixel_length
 7124              	.LVL808:
2726:src/display.c **** }
 7125              		.loc 1 2726 9 view .LVU2296
 7126              	.LBE410:
 7127              	.LBE409:
2798:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7128              		.loc 1 2798 41 view .LVU2297
 7129 0052 2C28     		cmp	r0, #44
 7130 0054 DCDC     		bgt	.L690
2798:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7131              		.loc 1 2798 12 view .LVU2298
 7132 0056 4FF00008 		mov	r8, #0
2799:src/display.c **** 
 7133              		.loc 1 2799 36 view .LVU2299
 7134 005a 4746     		mov	r7, r8
 7135 005c DCE7     		b	.L691
 7136              	.L704:
 7137 005e 00BF     		.align	2
 7138              	.L703:
 7139 0060 00000000 		.word	StateWhileOn
 7140              		.cfi_endproc
 7141              	.LFE42:
 7143              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7144              		.align	2
 7145              	.LC3:
 7146 0000 32630600 		.ascii	"2c\006\000"
 7147              		.align	2
 7148              	.LC4:
 7149 0004 07C63C00 		.ascii	"\007\306<\000"
 7150              		.align	2
 7151              	.LC5:
 7152 0008 07876900 		.ascii	"\007\207i\000"
 7153              		.align	2
 7154              	.LC6:
 7155 000c 07C67900 		.ascii	"\007\306y\000"
 7156              		.align	2
 7157              	.LC7:
 7158 0010 07950600 		.ascii	"\007\225\006\000"
 7159              		.align	2
 7160              	.LC8:
 7161 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7161      060600
 7162 001b 00       		.align	2
 7163              	.LC9:
 7164 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
ARM GAS  /tmp/ccZMW3We.s 			page 213


 7164      060600
 7165 0023 00       		.align	2
 7166              	.LC10:
 7167 0024 1400     		.ascii	"\024\000"
 7168 0026 0000     		.align	2
 7169              	.LC11:
 7170 0028 07C77900 		.ascii	"\007\307y\000"
 7171              		.align	2
 7172              	.LC12:
 7173 002c 07870700 		.ascii	"\007\207\007\000"
 7174              		.align	2
 7175              	.LC13:
 7176 0030 07C74400 		.ascii	"\007\307D\000"
 7177              		.align	2
 7178              	.LC14:
 7179 0034 07C73C00 		.ascii	"\007\307<\000"
 7180              		.align	2
 7181              	.LC15:
 7182 0038 07872000 		.ascii	"\007\207 \000"
 7183              		.align	2
 7184              	.LC16:
 7185 003c 06060788 		.ascii	"\006\006\007\210\007\000"
 7185      0700
 7186 0042 0000     		.align	2
 7187              	.LC17:
 7188 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7188      00
 7189 0049 000000   		.align	2
 7190              	.LC19:
 7191 004c 07E43F00 		.ascii	"\007\344?\000"
 7192              		.section	.text.annunciators,"ax",%progbits
 7193              		.align	1
 7194              		.p2align 2,,3
 7195              		.syntax unified
 7196              		.thumb
 7197              		.thumb_func
 7198              		.fpu fpv4-sp-d16
 7200              	annunciators:
 7201              	.LFB16:
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7202              		.loc 1 588 32 is_stmt 1 view -0
 7203              		.cfi_startproc
 7204              		@ args = 0, pretend = 0, frame = 88
 7205              		@ frame_needed = 0, uses_anonymous_args = 0
 590:src/display.c **** 	int n;
 7206              		.loc 1 590 2 view .LVU2301
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7207              		.loc 1 588 32 is_stmt 0 view .LVU2302
 7208 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7209              		.cfi_def_cfa_offset 28
 7210              		.cfi_offset 4, -28
 7211              		.cfi_offset 5, -24
 7212              		.cfi_offset 6, -20
 7213              		.cfi_offset 7, -16
 7214              		.cfi_offset 8, -12
 7215              		.cfi_offset 9, -8
 7216              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZMW3We.s 			page 214


 601:src/display.c **** #  endif
 7217              		.loc 1 601 33 view .LVU2303
 7218 0004 DFF83C83 		ldr	r8, .L803+60
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7219              		.loc 1 588 32 view .LVU2304
 7220 0008 97B0     		sub	sp, sp, #92
 7221              		.cfi_def_cfa_offset 120
 7222              	.LVL809:
 591:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 7223              		.loc 1 591 2 is_stmt 1 view .LVU2305
 592:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 7224              		.loc 1 592 2 view .LVU2306
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7225              		.loc 1 593 2 view .LVU2307
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7226              		.loc 1 593 38 is_stmt 0 view .LVU2308
 7227 000a FFF7FEFF 		bl	cur_shift
 7228              	.LVL810:
 601:src/display.c **** #  endif
 7229              		.loc 1 601 33 view .LVU2309
 7230 000e D8F80030 		ldr	r3, [r8]
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7231              		.loc 1 593 13 view .LVU2310
 7232 0012 BD4A     		ldr	r2, .L803
 601:src/display.c **** #  endif
 7233              		.loc 1 601 33 view .LVU2311
 7234 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7235              		.loc 1 593 13 view .LVU2312
 7236 0018 165C     		ldrb	r6, [r2, r0]	@ zero_extendqisi2
 7237              	.LVL811:
 601:src/display.c **** #  endif
 7238              		.loc 1 601 2 is_stmt 1 view .LVU2313
 632:src/display.c **** 
 7239              		.loc 1 632 2 is_stmt 0 view .LVU2314
 7240 001a 0BAD     		add	r5, sp, #44
 7241              	.LVL812:
 632:src/display.c **** 
 7242              		.loc 1 632 2 view .LVU2315
 7243 001c 0021     		movs	r1, #0
 7244 001e 2846     		mov	r0, r5
 7245 0020 2A22     		movs	r2, #42
 601:src/display.c **** #  endif
 7246              		.loc 1 601 33 view .LVU2316
 7247 0022 C3F38007 		ubfx	r7, r3, #2, #1
 7248              	.LVL813:
 604:src/display.c **** #  else
 7249              		.loc 1 604 2 is_stmt 1 view .LVU2317
 609:src/display.c **** #  else
 7250              		.loc 1 609 2 view .LVU2318
 619:src/display.c **** #else
 7251              		.loc 1 619 2 view .LVU2319
 627:src/display.c **** #else
 7252              		.loc 1 627 2 view .LVU2320
 632:src/display.c **** 
 7253              		.loc 1 632 2 view .LVU2321
 7254 0026 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccZMW3We.s 			page 215


 7255              	.LVL814:
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7256              		.loc 1 634 2 view .LVU2322
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7257              		.loc 1 634 6 is_stmt 0 view .LVU2323
 7258 002a D8F80030 		ldr	r3, [r8]
 7259 002e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7260              		.loc 1 634 5 view .LVU2324
 7261 0032 D907     		lsls	r1, r3, #31
 7262 0034 00F1BA80 		bmi	.L792
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7263              		.loc 1 672 7 is_stmt 1 view .LVU2325
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7264              		.loc 1 672 10 is_stmt 0 view .LVU2326
 7265 0038 87BB     		cbnz	r7, .L717
 690:src/display.c **** 			*p++ = shift_char;
 7266              		.loc 1 690 3 is_stmt 1 view .LVU2327
 690:src/display.c **** 			*p++ = shift_char;
 7267              		.loc 1 690 6 is_stmt 0 view .LVU2328
 7268 003a 202E     		cmp	r6, #32
 7269 003c 00F05181 		beq	.L718
 7270              	.L720:
 691:src/display.c **** 			*p++ = '\006';
 7271              		.loc 1 691 4 is_stmt 1 view .LVU2329
 7272              	.LVL815:
 692:src/display.c **** 		}
 7273              		.loc 1 692 9 is_stmt 0 view .LVU2330
 7274 0040 0623     		movs	r3, #6
 691:src/display.c **** 			*p++ = '\006';
 7275              		.loc 1 691 9 view .LVU2331
 7276 0042 8DF82C60 		strb	r6, [sp, #44]
 692:src/display.c **** 		}
 7277              		.loc 1 692 4 is_stmt 1 view .LVU2332
 7278              	.LVL816:
 692:src/display.c **** 		}
 7279              		.loc 1 692 9 is_stmt 0 view .LVU2333
 7280 0046 8DF82D30 		strb	r3, [sp, #45]
 692:src/display.c **** 		}
 7281              		.loc 1 692 6 view .LVU2334
 7282 004a 0DF12E00 		add	r0, sp, #46
 7283              	.LVL817:
 7284              	.L719:
 698:src/display.c **** 			*p++ = ' ';
 7285              		.loc 1 698 3 is_stmt 1 view .LVU2335
 698:src/display.c **** 			*p++ = ' ';
 7286              		.loc 1 698 7 is_stmt 0 view .LVU2336
 7287 004e AF4C     		ldr	r4, .L803+4
 7288 0050 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 698:src/display.c **** 			*p++ = ' ';
 7289              		.loc 1 698 6 view .LVU2337
 7290 0052 9A07     		lsls	r2, r3, #30
 7291 0054 00F12181 		bmi	.L793
 703:src/display.c **** 			*p++ = ' ';
 7292              		.loc 1 703 3 is_stmt 1 view .LVU2338
 703:src/display.c **** 			*p++ = ' ';
 7293              		.loc 1 703 6 is_stmt 0 view .LVU2339
ARM GAS  /tmp/ccZMW3We.s 			page 216


 7294 0058 5907     		lsls	r1, r3, #29
 7295 005a 00F11981 		bmi	.L794
 709:src/display.c **** 			if (State2.wascomplex) {
 7296              		.loc 1 709 3 is_stmt 1 view .LVU2340
 709:src/display.c **** 			if (State2.wascomplex) {
 7297              		.loc 1 709 6 is_stmt 0 view .LVU2341
 7298 005e 202E     		cmp	r6, #32
 7299 0060 00F0A481 		beq	.L795
 7300              	.L723:
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7301              		.loc 1 726 3 is_stmt 1 view .LVU2342
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7302              		.loc 1 726 17 is_stmt 0 view .LVU2343
 7303 0064 D8F80030 		ldr	r3, [r8]
 7304 0068 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7305 006c C3F30113 		ubfx	r3, r3, #4, #2
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7306              		.loc 1 726 3 view .LVU2344
 7307 0070 012B     		cmp	r3, #1
 7308 0072 00F0C081 		beq	.L751
 7309 0076 A649     		ldr	r1, .L803+8
 7310 0078 A64A     		ldr	r2, .L803+12
 7311 007a 022B     		cmp	r3, #2
 7312 007c 08BF     		it	eq
 7313 007e 1146     		moveq	r1, r2
 7314              	.L726:
 7315              	.LVL818:
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7316              		.loc 1 740 3 is_stmt 1 view .LVU2345
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7317              		.loc 1 740 7 is_stmt 0 view .LVU2346
 7318 0080 FFF7FEFF 		bl	scopy
 7319              	.LVL819:
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7320              		.loc 1 740 7 view .LVU2347
 7321 0084 0446     		mov	r4, r0
 7322              	.LVL820:
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7323              		.loc 1 742 3 is_stmt 1 view .LVU2348
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7324              		.loc 1 742 7 is_stmt 0 view .LVU2349
 7325 0086 FFF7FEFF 		bl	get_trig_mode
 7326              	.LVL821:
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7327              		.loc 1 742 6 view .LVU2350
 7328 008a 0228     		cmp	r0, #2
 7329 008c 00F03781 		beq	.L796
 7330              	.LVL822:
 7331              	.L709:
 882:src/display.c **** }
 7332              		.loc 1 882 7 is_stmt 1 view .LVU2351
 7333 0090 2846     		mov	r0, r5
 7334 0092 FFF7FEFF 		bl	set_status
 7335              	.LVL823:
 883:src/display.c **** 
 7336              		.loc 1 883 1 is_stmt 0 view .LVU2352
 7337 0096 17B0     		add	sp, sp, #92
ARM GAS  /tmp/ccZMW3We.s 			page 217


 7338              		.cfi_remember_state
 7339              		.cfi_def_cfa_offset 28
 7340              		@ sp needed
 7341 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7342              	.LVL824:
 7343              	.L717:
 7344              		.cfi_restore_state
 754:src/display.c **** 			*p++ = '\007';
 7345              		.loc 1 754 3 is_stmt 1 view .LVU2353
 754:src/display.c **** 			*p++ = '\007';
 7346              		.loc 1 754 7 is_stmt 0 view .LVU2354
 7347 009c 9B4C     		ldr	r4, .L803+4
 7348 009e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 754:src/display.c **** 			*p++ = '\007';
 7349              		.loc 1 754 6 view .LVU2355
 7350 00a0 9A07     		lsls	r2, r3, #30
 7351 00a2 00F1DB80 		bmi	.L797
 760:src/display.c **** 			*p++ = '\007';
 7352              		.loc 1 760 8 is_stmt 1 view .LVU2356
 760:src/display.c **** 			*p++ = '\007';
 7353              		.loc 1 760 11 is_stmt 0 view .LVU2357
 7354 00a6 202E     		cmp	r6, #32
 7355 00a8 00F00181 		beq	.L729
 7356              	.L730:
 761:src/display.c **** 			*p++ = '\307';
 7357              		.loc 1 761 4 is_stmt 1 view .LVU2358
 7358              	.LVL825:
 762:src/display.c **** 			*p++ = shift_char;
 7359              		.loc 1 762 4 view .LVU2359
 761:src/display.c **** 			*p++ = '\307';
 7360              		.loc 1 761 9 is_stmt 0 view .LVU2360
 7361 00ac 4CF20772 		movw	r2, #50951
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7362              		.loc 1 802 6 view .LVU2361
 7363 00b0 5807     		lsls	r0, r3, #29
 763:src/display.c **** 			goto no_copy;
 7364              		.loc 1 763 9 view .LVU2362
 7365 00b2 8DF82E60 		strb	r6, [sp, #46]
 761:src/display.c **** 			*p++ = '\307';
 7366              		.loc 1 761 9 view .LVU2363
 7367 00b6 ADF82C20 		strh	r2, [sp, #44]	@ movhi
 763:src/display.c **** 			goto no_copy;
 7368              		.loc 1 763 4 is_stmt 1 view .LVU2364
 7369              	.LVL826:
 764:src/display.c **** 		}
 7370              		.loc 1 764 4 view .LVU2365
 763:src/display.c **** 			goto no_copy;
 7371              		.loc 1 763 6 is_stmt 0 view .LVU2366
 7372 00ba 0DF12F06 		add	r6, sp, #47
 7373              	.LVL827:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7374              		.loc 1 802 3 is_stmt 1 view .LVU2367
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7375              		.loc 1 802 6 is_stmt 0 view .LVU2368
 7376 00be 00F1DD80 		bmi	.L798
 7377              	.LVL828:
 7378              	.L731:
ARM GAS  /tmp/ccZMW3We.s 			page 218


 804:src/display.c **** 			decNumber y;
 7379              		.loc 1 804 10 is_stmt 1 view .LVU2369
 804:src/display.c **** 			decNumber y;
 7380              		.loc 1 804 14 is_stmt 0 view .LVU2370
 7381 00c2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 804:src/display.c **** 			decNumber y;
 7382              		.loc 1 804 13 view .LVU2371
 7383 00c4 5906     		lsls	r1, r3, #25
 7384 00c6 E3D5     		bpl	.L709
 7385              	.L725:
 7386              	.LBB411:
 805:src/display.c **** display_yreg:
 7387              		.loc 1 805 4 is_stmt 1 view .LVU2372
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7388              		.loc 1 812 4 view .LVU2373
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7389              		.loc 1 812 34 is_stmt 0 view .LVU2374
 7390 00c8 DFF87C92 		ldr	r9, .L803+64
 7391 00cc D9F80010 		ldr	r1, [r9]
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7392              		.loc 1 812 4 view .LVU2375
 7393 00d0 6329     		cmp	r1, #99
 7394 00d2 00F37E81 		bgt	.L799
 7395              	.L732:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7396              		.loc 1 812 4 discriminator 5 view .LVU2376
 7397 00d6 0131     		adds	r1, r1, #1
 7398              	.L736:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7399              		.loc 1 812 4 discriminator 6 view .LVU2377
 7400 00d8 02A8     		add	r0, sp, #8
 7401 00da FFF7FEFF 		bl	getRegister
 7402              	.LVL829:
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 7403              		.loc 1 815 4 is_stmt 1 discriminator 6 view .LVU2378
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 7404              		.loc 1 815 7 is_stmt 0 discriminator 6 view .LVU2379
 7405 00de 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7406 00e2 11F07001 		ands	r1, r1, #112
 7407 00e6 3FD1     		bne	.L738
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7408              		.loc 1 816 5 is_stmt 1 view .LVU2380
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7409              		.loc 1 816 18 is_stmt 0 view .LVU2381
 7410 00e8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7411              		.loc 1 816 8 view .LVU2382
 7412 00ea 13F0010F 		tst	r3, #1
 7413              	.LBB412:
 817:src/display.c **** 
 7414              		.loc 1 817 42 view .LVU2383
 7415 00ee D8F80030 		ldr	r3, [r8]
 7416              	.LBE412:
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7417              		.loc 1 816 8 view .LVU2384
 7418 00f2 40F02B81 		bne	.L800
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccZMW3We.s 			page 219


 7419              		.loc 1 837 5 is_stmt 1 view .LVU2385
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7420              		.loc 1 837 20 is_stmt 0 view .LVU2386
 7421 00f6 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7422              		.loc 1 837 8 view .LVU2387
 7423 00fa 9B06     		lsls	r3, r3, #26
 7424 00fc 34D5     		bpl	.L738
 839:src/display.c **** #endif
 7425              		.loc 1 839 12 view .LVU2388
 7426 00fe 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 839:src/display.c **** #endif
 7427              		.loc 1 839 9 view .LVU2389
 7428 0100 13F00204 		ands	r4, r3, #2
 7429 0104 30D1     		bne	.L738
 842:src/display.c **** #endif
 7430              		.loc 1 842 12 view .LVU2390
 7431 0106 844B     		ldr	r3, .L803+16
 842:src/display.c **** #endif
 7432              		.loc 1 842 9 view .LVU2391
 7433 0108 1B68     		ldr	r3, [r3]
 7434 010a 012B     		cmp	r3, #1
 7435 010c 2CD0     		beq	.L738
 844:src/display.c **** 					char ltgteq;
 7436              		.loc 1 844 12 view .LVU2392
 7437 010e 3146     		mov	r1, r6
 7438 0110 02A8     		add	r0, sp, #8
 7439 0112 FFF7FEFF 		bl	set_x_fract
 7440              	.LVL830:
 844:src/display.c **** 					char ltgteq;
 7441              		.loc 1 844 9 view .LVU2393
 7442 0116 38B3     		cbz	r0, .L738
 7443              	.LBB413:
 845:src/display.c **** 
 7444              		.loc 1 845 6 is_stmt 1 view .LVU2394
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7445              		.loc 1 847 6 view .LVU2395
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7446              		.loc 1 847 10 is_stmt 0 view .LVU2396
 7447 0118 2146     		mov	r1, r4
 7448 011a 2846     		mov	r0, r5
 7449 011c FFF7FEFF 		bl	find_char
 7450              	.LVL831:
 7451 0120 0446     		mov	r4, r0
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7452              		.loc 1 847 8 view .LVU2397
 7453 0122 0238     		subs	r0, r0, #2
 7454              	.LVL832:
 849:src/display.c **** 					switch (ltgteq) {
 7455              		.loc 1 849 6 is_stmt 1 view .LVU2398
 849:src/display.c **** 					switch (ltgteq) {
 7456              		.loc 1 849 13 is_stmt 0 view .LVU2399
 7457 0124 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7458              	.LVL833:
 850:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 7459              		.loc 1 850 6 is_stmt 1 view .LVU2400
 7460 0128 472F     		cmp	r7, #71
ARM GAS  /tmp/ccZMW3We.s 			page 220


 7461 012a 00F07681 		beq	.L758
 852:src/display.c **** 					}
 7462              		.loc 1 852 23 is_stmt 0 view .LVU2401
 7463 012e 4C2F     		cmp	r7, #76
 7464 0130 08BF     		it	eq
 7465 0132 3C27     		moveq	r7, #60
 7466              	.LVL834:
 7467              	.L743:
 854:src/display.c **** 					q[2] = ltgteq;
 7468              		.loc 1 854 6 is_stmt 1 view .LVU2402
 7469 0134 7949     		ldr	r1, .L803+20
 7470 0136 FFF7FEFF 		bl	scopy
 7471              	.LVL835:
 855:src/display.c **** 
 7472              		.loc 1 855 6 view .LVU2403
 855:src/display.c **** 
 7473              		.loc 1 855 11 is_stmt 0 view .LVU2404
 7474 013a 2770     		strb	r7, [r4]
 857:src/display.c **** 						goto skip;
 7475              		.loc 1 857 6 is_stmt 1 view .LVU2405
 857:src/display.c **** 						goto skip;
 7476              		.loc 1 857 10 is_stmt 0 view .LVU2406
 7477 013c 0121     		movs	r1, #1
 7478 013e 2846     		mov	r0, r5
 7479 0140 FFF7FEFF 		bl	pixel_length
 7480              	.LVL836:
 857:src/display.c **** 						goto skip;
 7481              		.loc 1 857 9 view .LVU2407
 7482 0144 2C28     		cmp	r0, #44
 7483 0146 A3DD     		ble	.L709
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7484              		.loc 1 860 6 is_stmt 1 view .LVU2408
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7485              		.loc 1 860 12 is_stmt 0 view .LVU2409
 7486 0148 0027     		movs	r7, #0
 7487              	.LVL837:
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7488              		.loc 1 860 12 view .LVU2410
 7489 014a 04F8037C 		strb	r7, [r4, #-3]
 861:src/display.c **** 						goto skip;
 7490              		.loc 1 861 6 is_stmt 1 view .LVU2411
 861:src/display.c **** 						goto skip;
 7491              		.loc 1 861 10 is_stmt 0 view .LVU2412
 7492 014e 0121     		movs	r1, #1
 7493 0150 2846     		mov	r0, r5
 7494 0152 FFF7FEFF 		bl	pixel_length
 7495              	.LVL838:
 861:src/display.c **** 						goto skip;
 7496              		.loc 1 861 9 view .LVU2413
 7497 0156 2C28     		cmp	r0, #44
 7498 0158 9ADD     		ble	.L709
 864:src/display.c **** 				}
 7499              		.loc 1 864 6 is_stmt 1 view .LVU2414
 864:src/display.c **** 				}
 7500              		.loc 1 864 37 is_stmt 0 view .LVU2415
 7501 015a 721B     		subs	r2, r6, r5
 864:src/display.c **** 				}
ARM GAS  /tmp/ccZMW3We.s 			page 221


 7502              		.loc 1 864 6 view .LVU2416
 7503 015c 3946     		mov	r1, r7
 7504 015e C2F12A02 		rsb	r2, r2, #42
 7505 0162 3046     		mov	r0, r6
 7506 0164 FFF7FEFF 		bl	xset
 7507              	.LVL839:
 7508              	.L738:
 864:src/display.c **** 				}
 7509              		.loc 1 864 6 view .LVU2417
 7510              	.LBE413:
 867:src/display.c **** 				int extra_pixels;
 7511              		.loc 1 867 4 is_stmt 1 view .LVU2418
 867:src/display.c **** 				int extra_pixels;
 7512              		.loc 1 867 10 is_stmt 0 view .LVU2419
 7513 0168 0C23     		movs	r3, #12
 7514 016a 0193     		str	r3, [sp, #4]
 867:src/display.c **** 				int extra_pixels;
 7515              		.loc 1 867 27 is_stmt 1 view .LVU2420
 7516 016c 0EE0     		b	.L745
 7517              	.LVL840:
 7518              	.L801:
 7519              	.LBB414:
 875:src/display.c **** 
 7520              		.loc 1 875 5 is_stmt 0 view .LVU2421
 7521 016e 019A     		ldr	r2, [sp, #4]
 7522 0170 0A32     		adds	r2, r2, #10
 7523 0172 FFF7FEFF 		bl	xset
 7524              	.LVL841:
 877:src/display.c **** 			}
 7525              		.loc 1 877 5 is_stmt 1 view .LVU2422
 877:src/display.c **** 			}
 7526              		.loc 1 877 29 is_stmt 0 view .LVU2423
 7527 0176 B4F12902 		subs	r2, r4, #41
 877:src/display.c **** 			}
 7528              		.loc 1 877 7 view .LVU2424
 7529 017a 019B     		ldr	r3, [sp, #4]
 877:src/display.c **** 			}
 7530              		.loc 1 877 29 view .LVU2425
 7531 017c 48BF     		it	mi
 7532 017e A4F12602 		submi	r2, r4, #38
 877:src/display.c **** 			}
 7533              		.loc 1 877 7 view .LVU2426
 7534 0182 A3EBA203 		sub	r3, r3, r2, asr #2
 7535              	.LBE414:
 867:src/display.c **** 				int extra_pixels;
 7536              		.loc 1 867 4 view .LVU2427
 7537 0186 012B     		cmp	r3, #1
 7538              	.LBB415:
 877:src/display.c **** 			}
 7539              		.loc 1 877 7 view .LVU2428
 7540 0188 0193     		str	r3, [sp, #4]
 7541              	.LBE415:
 867:src/display.c **** 				int extra_pixels;
 7542              		.loc 1 867 27 is_stmt 1 view .LVU2429
 867:src/display.c **** 				int extra_pixels;
 7543              		.loc 1 867 4 is_stmt 0 view .LVU2430
 7544 018a 81DD     		ble	.L709
ARM GAS  /tmp/ccZMW3We.s 			page 222


 7545              	.LVL842:
 7546              	.L745:
 7547              	.LBB416:
 868:src/display.c **** 
 7548              		.loc 1 868 5 is_stmt 1 view .LVU2431
 870:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7549              		.loc 1 870 5 view .LVU2432
 7550 018c 01AA     		add	r2, sp, #4
 7551 018e 3146     		mov	r1, r6
 7552 0190 02A8     		add	r0, sp, #8
 7553 0192 FFF7FEFF 		bl	set_x_dn
 7554              	.LVL843:
 871:src/display.c **** 				if (extra_pixels <= 0)
 7555              		.loc 1 871 5 view .LVU2433
 871:src/display.c **** 				if (extra_pixels <= 0)
 7556              		.loc 1 871 20 is_stmt 0 view .LVU2434
 7557 0196 0121     		movs	r1, #1
 7558 0198 2846     		mov	r0, r5
 7559 019a FFF7FEFF 		bl	pixel_length
 7560              	.LVL844:
 875:src/display.c **** 
 7561              		.loc 1 875 5 is_stmt 1 view .LVU2435
 871:src/display.c **** 				if (extra_pixels <= 0)
 7562              		.loc 1 871 20 is_stmt 0 view .LVU2436
 7563 019e 0446     		mov	r4, r0
 7564              	.LVL845:
 872:src/display.c **** 					break;
 7565              		.loc 1 872 5 is_stmt 1 view .LVU2437
 872:src/display.c **** 					break;
 7566              		.loc 1 872 8 is_stmt 0 view .LVU2438
 7567 01a0 2C2C     		cmp	r4, #44
 875:src/display.c **** 
 7568              		.loc 1 875 5 view .LVU2439
 7569 01a2 4FF00001 		mov	r1, #0
 7570 01a6 3046     		mov	r0, r6
 7571              	.LVL846:
 872:src/display.c **** 					break;
 7572              		.loc 1 872 8 view .LVU2440
 7573 01a8 E1DC     		bgt	.L801
 7574              	.LVL847:
 872:src/display.c **** 					break;
 7575              		.loc 1 872 8 view .LVU2441
 7576              	.LBE416:
 7577 01aa 71E7     		b	.L709
 7578              	.LVL848:
 7579              	.L792:
 872:src/display.c **** 					break;
 7580              		.loc 1 872 8 view .LVU2442
 7581              	.LBE411:
 644:src/display.c **** 			*p++ = '\006';
 7582              		.loc 1 644 4 is_stmt 1 view .LVU2443
 645:src/display.c **** 		}
 7583              		.loc 1 645 9 is_stmt 0 view .LVU2444
 7584 01ac 0623     		movs	r3, #6
 7585 01ae 8DF82D30 		strb	r3, [sp, #45]
 644:src/display.c **** 			*p++ = '\006';
 7586              		.loc 1 644 9 view .LVU2445
ARM GAS  /tmp/ccZMW3We.s 			page 223


 7587 01b2 8DF82C60 		strb	r6, [sp, #44]
 645:src/display.c **** 		}
 7588              		.loc 1 645 4 is_stmt 1 view .LVU2446
 7589              	.LVL849:
 648:src/display.c **** 		default:
 7590              		.loc 1 648 3 view .LVU2447
 648:src/display.c **** 		default:
 7591              		.loc 1 648 10 is_stmt 0 view .LVU2448
 7592 01b6 FFF7FEFF 		bl	int_mode
 7593              	.LVL850:
 7594 01ba 0138     		subs	r0, r0, #1
 7595 01bc C0B2     		uxtb	r0, r0
 7596 01be 0228     		cmp	r0, #2
 7597 01c0 96BF     		itet	ls
 7598 01c2 574B     		ldrls	r3, .L803+24
 7599 01c4 5749     		ldrhi	r1, .L803+28
 7600 01c6 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7601              	.LVL851:
 655:src/display.c **** 		*q++ = '\006';
 7602              		.loc 1 655 3 is_stmt 1 view .LVU2449
 655:src/display.c **** 		*q++ = '\006';
 7603              		.loc 1 655 7 is_stmt 0 view .LVU2450
 7604 01ca 0DF12E00 		add	r0, sp, #46
 7605              	.LVL852:
 655:src/display.c **** 		*q++ = '\006';
 7606              		.loc 1 655 7 view .LVU2451
 7607 01ce FFF7FEFF 		bl	scopy
 7608              	.LVL853:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7609              		.loc 1 656 8 view .LVU2452
 7610 01d2 0646     		mov	r6, r0
 7611              	.LVL854:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7612              		.loc 1 656 8 view .LVU2453
 7613 01d4 0623     		movs	r3, #6
 7614 01d6 06F8013B 		strb	r3, [r6], #1
 655:src/display.c **** 		*q++ = '\006';
 7615              		.loc 1 655 7 view .LVU2454
 7616 01da 0446     		mov	r4, r0
 7617              	.LVL855:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7618              		.loc 1 656 3 is_stmt 1 view .LVU2455
 657:src/display.c **** 
 7619              		.loc 1 657 3 view .LVU2456
 657:src/display.c **** 
 7620              		.loc 1 657 7 is_stmt 0 view .LVU2457
 7621 01dc FFF7FEFF 		bl	word_size
 7622              	.LVL856:
 7623 01e0 0146     		mov	r1, r0
 7624 01e2 3046     		mov	r0, r6
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7625              		.loc 1 659 20 view .LVU2458
 7626 01e4 504E     		ldr	r6, .L803+32
 7627              	.LVL857:
 657:src/display.c **** 
 7628              		.loc 1 657 7 view .LVU2459
 7629 01e6 0222     		movs	r2, #2
ARM GAS  /tmp/ccZMW3We.s 			page 224


 7630 01e8 FFF7FEFF 		bl	num_arg_0
 7631              	.LVL858:
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7632              		.loc 1 659 20 view .LVU2460
 7633 01ec 3368     		ldr	r3, [r6]
 7634              	.LVL859:
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7635              		.loc 1 659 3 is_stmt 1 view .LVU2461
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7636              		.loc 1 659 6 is_stmt 0 view .LVU2462
 7637 01ee 002B     		cmp	r3, #0
 7638 01f0 7FF74EAF 		ble	.L709
 660:src/display.c **** 			if (*q == '1')
 7639              		.loc 1 660 4 is_stmt 1 view .LVU2463
 660:src/display.c **** 			if (*q == '1')
 7640              		.loc 1 660 10 is_stmt 0 view .LVU2464
 7641 01f4 C3F10702 		rsb	r2, r3, #7
 7642 01f8 5200     		lsls	r2, r2, #1
 660:src/display.c **** 			if (*q == '1')
 7643              		.loc 1 660 6 view .LVU2465
 7644 01fa 0192     		str	r2, [sp, #4]
 661:src/display.c **** 				n += 2;
 7645              		.loc 1 661 4 is_stmt 1 view .LVU2466
 661:src/display.c **** 				n += 2;
 7646              		.loc 1 661 7 is_stmt 0 view .LVU2467
 7647 01fc 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7648 01fe 3129     		cmp	r1, #49
 662:src/display.c **** 			if (q[1] == '1')
 7649              		.loc 1 662 5 is_stmt 1 view .LVU2468
 662:src/display.c **** 			if (q[1] == '1')
 7650              		.loc 1 662 7 is_stmt 0 view .LVU2469
 7651 0200 04BF     		itt	eq
 7652 0202 0232     		addeq	r2, r2, #2
 7653 0204 0192     		streq	r2, [sp, #4]
 663:src/display.c **** 				n += 2;
 7654              		.loc 1 663 4 is_stmt 1 view .LVU2470
 663:src/display.c **** 				n += 2;
 7655              		.loc 1 663 7 is_stmt 0 view .LVU2471
 7656 0206 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7657 0208 3129     		cmp	r1, #49
 664:src/display.c **** 			while (n-- > 0)
 7658              		.loc 1 664 5 is_stmt 1 view .LVU2472
 664:src/display.c **** 			while (n-- > 0)
 7659              		.loc 1 664 7 is_stmt 0 view .LVU2473
 7660 020a 08BF     		it	eq
 7661 020c 0232     		addeq	r2, r2, #2
 665:src/display.c **** 				*p++ = '\006';
 7662              		.loc 1 665 10 is_stmt 1 view .LVU2474
 665:src/display.c **** 				*p++ = '\006';
 7663              		.loc 1 665 12 is_stmt 0 view .LVU2475
 7664 020e 511E     		subs	r1, r2, #1
 665:src/display.c **** 				*p++ = '\006';
 7665              		.loc 1 665 10 view .LVU2476
 7666 0210 002A     		cmp	r2, #0
 665:src/display.c **** 				*p++ = '\006';
 7667              		.loc 1 665 12 view .LVU2477
 7668 0212 0191     		str	r1, [sp, #4]
ARM GAS  /tmp/ccZMW3We.s 			page 225


 665:src/display.c **** 				*p++ = '\006';
 7669              		.loc 1 665 10 view .LVU2478
 7670 0214 40F3F180 		ble	.L712
 666:src/display.c **** 
 7671              		.loc 1 666 10 view .LVU2479
 7672 0218 0621     		movs	r1, #6
 7673              	.L713:
 666:src/display.c **** 
 7674              		.loc 1 666 5 is_stmt 1 view .LVU2480
 7675              	.LVL860:
 666:src/display.c **** 
 7676              		.loc 1 666 10 is_stmt 0 view .LVU2481
 7677 021a 00F8011B 		strb	r1, [r0], #1
 7678              	.LVL861:
 665:src/display.c **** 				*p++ = '\006';
 7679              		.loc 1 665 10 is_stmt 1 view .LVU2482
 665:src/display.c **** 				*p++ = '\006';
 7680              		.loc 1 665 12 is_stmt 0 view .LVU2483
 7681 021e 019B     		ldr	r3, [sp, #4]
 7682 0220 5A1E     		subs	r2, r3, #1
 665:src/display.c **** 				*p++ = '\006';
 7683              		.loc 1 665 10 view .LVU2484
 7684 0222 002B     		cmp	r3, #0
 665:src/display.c **** 				*p++ = '\006';
 7685              		.loc 1 665 12 view .LVU2485
 7686 0224 0192     		str	r2, [sp, #4]
 665:src/display.c **** 				*p++ = '\006';
 7687              		.loc 1 665 10 view .LVU2486
 7688 0226 F8DC     		bgt	.L713
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7689              		.loc 1 668 4 is_stmt 1 view .LVU2487
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7690              		.loc 1 668 11 is_stmt 0 view .LVU2488
 7691 0228 3368     		ldr	r3, [r6]
 7692 022a 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7693              		.loc 1 668 27 is_stmt 1 view .LVU2489
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7694              		.loc 1 668 4 is_stmt 0 view .LVU2490
 7695 022c 002B     		cmp	r3, #0
 7696 022e FFF62FAF 		blt	.L709
 7697              	.L746:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7698              		.loc 1 668 4 view .LVU2491
 7699 0232 364C     		ldr	r4, .L803+4
 7700              	.LVL862:
 7701              	.L716:
 669:src/display.c **** 		}
 7702              		.loc 1 669 5 is_stmt 1 view .LVU2492
 669:src/display.c **** 		}
 7703              		.loc 1 669 18 is_stmt 0 view .LVU2493
 7704 0234 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7705 0236 C2F3C202 		ubfx	r2, r2, #3, #3
 669:src/display.c **** 		}
 7706              		.loc 1 669 10 view .LVU2494
 7707 023a 9A42     		cmp	r2, r3
 7708 023c 0CBF     		ite	eq
ARM GAS  /tmp/ccZMW3We.s 			page 226


 7709 023e 7C23     		moveq	r3, #124
 7710 0240 2723     		movne	r3, #39
 7711              	.LVL863:
 669:src/display.c **** 		}
 7712              		.loc 1 669 10 view .LVU2495
 7713 0242 00F8013B 		strb	r3, [r0], #1
 7714              	.LVL864:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7715              		.loc 1 668 35 is_stmt 1 view .LVU2496
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7716              		.loc 1 668 36 is_stmt 0 view .LVU2497
 7717 0246 019B     		ldr	r3, [sp, #4]
 7718 0248 013B     		subs	r3, r3, #1
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7719              		.loc 1 668 4 view .LVU2498
 7720 024a 002B     		cmp	r3, #0
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7721              		.loc 1 668 36 view .LVU2499
 7722 024c 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7723              		.loc 1 668 27 is_stmt 1 view .LVU2500
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7724              		.loc 1 668 4 is_stmt 0 view .LVU2501
 7725 024e F1DA     		bge	.L716
 882:src/display.c **** }
 7726              		.loc 1 882 7 is_stmt 1 view .LVU2502
 7727 0250 2846     		mov	r0, r5
 7728              	.LVL865:
 882:src/display.c **** }
 7729              		.loc 1 882 7 is_stmt 0 view .LVU2503
 7730 0252 FFF7FEFF 		bl	set_status
 7731              	.LVL866:
 883:src/display.c **** 
 7732              		.loc 1 883 1 view .LVU2504
 7733 0256 17B0     		add	sp, sp, #92
 7734              		.cfi_remember_state
 7735              		.cfi_def_cfa_offset 28
 7736              		@ sp needed
 7737 0258 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7738              	.LVL867:
 7739              	.L797:
 7740              		.cfi_restore_state
 755:src/display.c **** 			*p++ = '\344';
 7741              		.loc 1 755 4 is_stmt 1 view .LVU2505
 756:src/display.c **** 			*p++ = shift_char;
 7742              		.loc 1 756 4 view .LVU2506
 755:src/display.c **** 			*p++ = '\344';
 7743              		.loc 1 755 9 is_stmt 0 view .LVU2507
 7744 025c 4EF20743 		movw	r3, #58375
 758:src/display.c **** 		}
 7745              		.loc 1 758 6 view .LVU2508
 7746 0260 3249     		ldr	r1, .L803+36
 757:src/display.c **** 			q = "\024";
 7747              		.loc 1 757 9 view .LVU2509
 7748 0262 8DF82E60 		strb	r6, [sp, #46]
 755:src/display.c **** 			*p++ = '\344';
 7749              		.loc 1 755 9 view .LVU2510
ARM GAS  /tmp/ccZMW3We.s 			page 227


 7750 0266 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 757:src/display.c **** 			q = "\024";
 7751              		.loc 1 757 4 is_stmt 1 view .LVU2511
 7752              	.LVL868:
 758:src/display.c **** 		}
 7753              		.loc 1 758 4 view .LVU2512
 757:src/display.c **** 			q = "\024";
 7754              		.loc 1 757 6 is_stmt 0 view .LVU2513
 7755 026a 0DF12F00 		add	r0, sp, #47
 7756              	.LVL869:
 7757              	.L728:
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7758              		.loc 1 797 3 is_stmt 1 view .LVU2514
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7759              		.loc 1 797 7 is_stmt 0 view .LVU2515
 7760 026e FFF7FEFF 		bl	scopy
 7761              	.LVL870:
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7762              		.loc 1 797 7 view .LVU2516
 7763 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 7764 0274 0646     		mov	r6, r0
 7765              	.LVL871:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7766              		.loc 1 802 3 is_stmt 1 view .LVU2517
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7767              		.loc 1 802 6 is_stmt 0 view .LVU2518
 7768 0276 5807     		lsls	r0, r3, #29
 7769              	.LVL872:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7770              		.loc 1 802 6 view .LVU2519
 7771 0278 7FF523AF 		bpl	.L731
 7772              	.L798:
 803:src/display.c **** 		} else if (State2.runmode) {
 7773              		.loc 1 803 4 is_stmt 1 view .LVU2520
 7774 027c 2C49     		ldr	r1, .L803+40
 7775 027e 3046     		mov	r0, r6
 7776 0280 FFF7FEFF 		bl	scopy
 7777              	.LVL873:
 882:src/display.c **** }
 7778              		.loc 1 882 7 view .LVU2521
 7779 0284 2846     		mov	r0, r5
 7780 0286 FFF7FEFF 		bl	set_status
 7781              	.LVL874:
 883:src/display.c **** 
 7782              		.loc 1 883 1 is_stmt 0 view .LVU2522
 7783 028a 17B0     		add	sp, sp, #92
 7784              		.cfi_remember_state
 7785              		.cfi_def_cfa_offset 28
 7786              		@ sp needed
 7787 028c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7788              	.LVL875:
 7789              	.L794:
 7790              		.cfi_restore_state
 704:src/display.c **** 			*p = '\015';
 7791              		.loc 1 704 4 is_stmt 1 view .LVU2523
 704:src/display.c **** 			*p = '\015';
 7792              		.loc 1 704 9 is_stmt 0 view .LVU2524
ARM GAS  /tmp/ccZMW3We.s 			page 228


 7793 0290 2022     		movs	r2, #32
 705:src/display.c **** 			goto skip;
 7794              		.loc 1 705 7 view .LVU2525
 7795 0292 0D23     		movs	r3, #13
 704:src/display.c **** 			*p = '\015';
 7796              		.loc 1 704 9 view .LVU2526
 7797 0294 0270     		strb	r2, [r0]
 705:src/display.c **** 			goto skip;
 7798              		.loc 1 705 4 is_stmt 1 view .LVU2527
 705:src/display.c **** 			goto skip;
 7799              		.loc 1 705 7 is_stmt 0 view .LVU2528
 7800 0296 4370     		strb	r3, [r0, #1]
 706:src/display.c **** 		}
 7801              		.loc 1 706 4 is_stmt 1 view .LVU2529
 7802 0298 FAE6     		b	.L709
 7803              	.LVL876:
 7804              	.L793:
 699:src/display.c **** 			*p = '\024';
 7805              		.loc 1 699 4 view .LVU2530
 699:src/display.c **** 			*p = '\024';
 7806              		.loc 1 699 9 is_stmt 0 view .LVU2531
 7807 029a 2022     		movs	r2, #32
 700:src/display.c **** 			goto skip;
 7808              		.loc 1 700 7 view .LVU2532
 7809 029c 1423     		movs	r3, #20
 699:src/display.c **** 			*p = '\024';
 7810              		.loc 1 699 9 view .LVU2533
 7811 029e 0270     		strb	r2, [r0]
 700:src/display.c **** 			goto skip;
 7812              		.loc 1 700 4 is_stmt 1 view .LVU2534
 700:src/display.c **** 			goto skip;
 7813              		.loc 1 700 7 is_stmt 0 view .LVU2535
 7814 02a0 4370     		strb	r3, [r0, #1]
 701:src/display.c **** 		}
 7815              		.loc 1 701 4 is_stmt 1 view .LVU2536
 882:src/display.c **** }
 7816              		.loc 1 882 7 view .LVU2537
 7817 02a2 2846     		mov	r0, r5
 7818              	.LVL877:
 882:src/display.c **** }
 7819              		.loc 1 882 7 is_stmt 0 view .LVU2538
 7820 02a4 FFF7FEFF 		bl	set_status
 7821              	.LVL878:
 883:src/display.c **** 
 7822              		.loc 1 883 1 view .LVU2539
 7823 02a8 17B0     		add	sp, sp, #92
 7824              		.cfi_remember_state
 7825              		.cfi_def_cfa_offset 28
 7826              		@ sp needed
 7827 02aa BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7828              	.LVL879:
 7829              	.L729:
 7830              		.cfi_restore_state
 768:src/display.c **** 			q = "\007\207i";
 7831              		.loc 1 768 3 is_stmt 1 view .LVU2540
 768:src/display.c **** 			q = "\007\207i";
 7832              		.loc 1 768 7 is_stmt 0 view .LVU2541
ARM GAS  /tmp/ccZMW3We.s 			page 229


 7833 02ae 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 768:src/display.c **** 			q = "\007\207i";
 7834              		.loc 1 768 6 view .LVU2542
 7835 02b0 13F0C00F 		tst	r3, #192
 7836 02b4 20D1     		bne	.L753
 771:src/display.c **** 			q = "\007\307<";
 7837              		.loc 1 771 8 is_stmt 1 view .LVU2543
 771:src/display.c **** 			q = "\007\307<";
 7838              		.loc 1 771 22 is_stmt 0 view .LVU2544
 7839 02b6 184B     		ldr	r3, .L803+16
 7840 02b8 1B68     		ldr	r3, [r3]
 771:src/display.c **** 			q = "\007\307<";
 7841              		.loc 1 771 11 view .LVU2545
 7842 02ba 012B     		cmp	r3, #1
 7843 02bc 00F0A480 		beq	.L754
 774:src/display.c **** 			q = "\007\307y";
 7844              		.loc 1 774 8 is_stmt 1 view .LVU2546
 774:src/display.c **** 			q = "\007\307y";
 7845              		.loc 1 774 11 is_stmt 0 view .LVU2547
 7846 02c0 022B     		cmp	r3, #2
 7847 02c2 00F09E80 		beq	.L755
 778:src/display.c **** 			q = "\007\207\007";
 7848              		.loc 1 778 8 is_stmt 1 view .LVU2548
 778:src/display.c **** 			q = "\007\207\007";
 7849              		.loc 1 778 12 is_stmt 0 view .LVU2549
 7850 02c6 FFF7FEFF 		bl	get_trig_mode
 7851              	.LVL880:
 778:src/display.c **** 			q = "\007\207\007";
 7852              		.loc 1 778 11 view .LVU2550
 7853 02ca 0228     		cmp	r0, #2
 7854 02cc 00F0A280 		beq	.L756
 784:src/display.c **** #else
 7855              		.loc 1 784 4 is_stmt 1 view .LVU2551
 784:src/display.c **** #else
 7856              		.loc 1 784 9 is_stmt 0 view .LVU2552
 7857 02d0 FFF7FEFF 		bl	is_dblmode
 7858              	.LVL881:
 784:src/display.c **** #else
 7859              		.loc 1 784 36 view .LVU2553
 7860 02d4 174B     		ldr	r3, .L803+44
 7861 02d6 1849     		ldr	r1, .L803+48
 7862 02d8 0028     		cmp	r0, #0
 7863 02da 18BF     		it	ne
 7864 02dc 1946     		movne	r1, r3
 7865 02de 2846     		mov	r0, r5
 7866 02e0 C5E7     		b	.L728
 7867              	.L718:
 690:src/display.c **** 			*p++ = shift_char;
 7868              		.loc 1 690 29 discriminator 1 view .LVU2554
 7869 02e2 FFF7FEFF 		bl	is_dblmode
 7870              	.LVL882:
 690:src/display.c **** 			*p++ = shift_char;
 7871              		.loc 1 690 25 discriminator 1 view .LVU2555
 7872 02e6 0028     		cmp	r0, #0
 7873 02e8 3FF4AAAE 		beq	.L720
 695:src/display.c **** 		}
 7874              		.loc 1 695 4 is_stmt 1 view .LVU2556
ARM GAS  /tmp/ccZMW3We.s 			page 230


 7875              	.LVL883:
 695:src/display.c **** 		}
 7876              		.loc 1 695 9 is_stmt 0 view .LVU2557
 7877 02ec 4423     		movs	r3, #68
 7878 02ee 8DF82C30 		strb	r3, [sp, #44]
 695:src/display.c **** 		}
 7879              		.loc 1 695 6 view .LVU2558
 7880 02f2 0DF12D00 		add	r0, sp, #45
 7881              	.LVL884:
 695:src/display.c **** 		}
 7882              		.loc 1 695 6 view .LVU2559
 7883 02f6 AAE6     		b	.L719
 7884              	.LVL885:
 7885              	.L753:
 769:src/display.c **** 		}
 7886              		.loc 1 769 6 view .LVU2560
 7887 02f8 1049     		ldr	r1, .L803+52
 590:src/display.c **** 	int n;
 7888              		.loc 1 590 17 view .LVU2561
 7889 02fa 2846     		mov	r0, r5
 7890 02fc B7E7     		b	.L728
 7891              	.LVL886:
 7892              	.L796:
 743:src/display.c **** 		}
 7893              		.loc 1 743 4 is_stmt 1 view .LVU2562
 7894 02fe 1049     		ldr	r1, .L803+56
 7895 0300 2046     		mov	r0, r4
 7896 0302 FFF7FEFF 		bl	scopy
 7897              	.LVL887:
 7898 0306 C3E6     		b	.L709
 7899              	.L804:
 7900              		.align	2
 7901              	.L803:
 7902 0308 00000000 		.word	.LANCHOR15
 7903 030c 00000000 		.word	StateWhileOn
 7904 0310 10000000 		.word	.LC7
 7905 0314 1C000000 		.word	.LC9
 7906 0318 00000000 		.word	RectPolConv
 7907 031c 4C000000 		.word	.LC19
 7908 0320 00000000 		.word	.LANCHOR16
 7909 0324 00000000 		.word	.LC3
 7910 0328 00000000 		.word	IntMaxWindow
 7911 032c 24000000 		.word	.LC10
 7912 0330 44000000 		.word	.LC17
 7913 0334 30000000 		.word	.LC13
 7914 0338 38000000 		.word	.LC15
 7915 033c 08000000 		.word	.LC5
 7916 0340 3C000000 		.word	.LC16
 7917 0344 00000000 		.word	main_ram
 7918 0348 00000000 		.word	ShowRegister
 7919              	.LVL888:
 7920              	.L800:
 7921              	.LBB419:
 7922              	.LBB417:
 817:src/display.c **** 
 7923              		.loc 1 817 6 view .LVU2563
 819:src/display.c **** 					UState.nothousands = 1;
ARM GAS  /tmp/ccZMW3We.s 			page 231


 7924              		.loc 1 819 6 is_stmt 0 view .LVU2564
 7925 034c 2A22     		movs	r2, #42
 7926 034e 2846     		mov	r0, r5
 817:src/display.c **** 
 7927              		.loc 1 817 42 view .LVU2565
 7928 0350 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 7929              	.LVL889:
 817:src/display.c **** 
 7930              		.loc 1 817 42 view .LVU2566
 7931 0354 324C     		ldr	r4, .L805
 819:src/display.c **** 					UState.nothousands = 1;
 7932              		.loc 1 819 6 view .LVU2567
 7933 0356 FFF7FEFF 		bl	xset
 7934              	.LVL890:
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7935              		.loc 1 820 25 view .LVU2568
 7936 035a D8F80020 		ldr	r2, [r8]
 7937 035e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7938 0362 43F04003 		orr	r3, r3, #64
 7939 0366 82F8E737 		strb	r3, [r2, #2023]
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 7940              		.loc 1 821 6 view .LVU2569
 7941 036a 2946     		mov	r1, r5
 7942 036c 02A8     		add	r0, sp, #8
 7943 036e FFF7FEFF 		bl	set_x_hms
 7944              	.LVL891:
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7945              		.loc 1 822 25 view .LVU2570
 7946 0372 D8F80030 		ldr	r3, [r8]
 7947 0376 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 817:src/display.c **** 
 7948              		.loc 1 817 42 view .LVU2571
 7949 037a C6F38016 		ubfx	r6, r6, #6, #1
 7950              	.LVL892:
 819:src/display.c **** 					UState.nothousands = 1;
 7951              		.loc 1 819 6 is_stmt 1 view .LVU2572
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7952              		.loc 1 820 6 view .LVU2573
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 7953              		.loc 1 821 6 view .LVU2574
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7954              		.loc 1 822 6 view .LVU2575
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7955              		.loc 1 822 25 is_stmt 0 view .LVU2576
 7956 037e 66F38612 		bfi	r2, r6, #6, #1
 7957 0382 83F8E727 		strb	r2, [r3, #2023]
 827:src/display.c **** 					while (*p) {
 7958              		.loc 1 827 6 is_stmt 1 view .LVU2577
 7959              	.LVL893:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7960              		.loc 1 828 6 view .LVU2578
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7961              		.loc 1 828 12 view .LVU2579
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7962              		.loc 1 828 13 is_stmt 0 view .LVU2580
 7963 0386 4021     		movs	r1, #64
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
ARM GAS  /tmp/ccZMW3We.s 			page 232


 7964              		.loc 1 822 25 view .LVU2581
 7965 0388 0522     		movs	r2, #5
 7966 038a 05E0     		b	.L741
 7967              	.LVL894:
 7968              	.L802:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7969              		.loc 1 828 13 view .LVU2582
 7970 038c 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 7971              	.LVL895:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7972              		.loc 1 828 12 view .LVU2583
 7973 0390 0029     		cmp	r1, #0
 7974 0392 3FF47DAE 		beq	.L709
 7975 0396 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 7976              	.LVL896:
 7977              	.L741:
 829:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7978              		.loc 1 829 7 is_stmt 1 view .LVU2584
 7979 0398 2846     		mov	r0, r5
 7980 039a FFF7FEFF 		bl	replace_char
 7981              	.LVL897:
 830:src/display.c **** 							goto skip;
 7982              		.loc 1 830 7 view .LVU2585
 830:src/display.c **** 							goto skip;
 7983              		.loc 1 830 11 is_stmt 0 view .LVU2586
 7984 039e 0121     		movs	r1, #1
 7985 03a0 2846     		mov	r0, r5
 7986 03a2 FFF7FEFF 		bl	pixel_length
 7987              	.LVL898:
 833:src/display.c **** 					}
 7988              		.loc 1 833 7 is_stmt 1 view .LVU2587
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7989              		.loc 1 828 12 view .LVU2588
 830:src/display.c **** 							goto skip;
 7990              		.loc 1 830 10 is_stmt 0 view .LVU2589
 7991 03a6 2C28     		cmp	r0, #44
 7992 03a8 F0DC     		bgt	.L802
 7993 03aa 71E6     		b	.L709
 7994              	.LVL899:
 7995              	.L795:
 830:src/display.c **** 							goto skip;
 7996              		.loc 1 830 10 view .LVU2590
 7997              	.LBE417:
 7998              	.LBE419:
 709:src/display.c **** 			if (State2.wascomplex) {
 7999              		.loc 1 709 29 discriminator 1 view .LVU2591
 8000 03ac 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 709:src/display.c **** 			if (State2.wascomplex) {
 8001              		.loc 1 709 25 discriminator 1 view .LVU2592
 8002 03ae 13F0C00F 		tst	r3, #192
 8003 03b2 24D1     		bne	.L749
 709:src/display.c **** 			if (State2.wascomplex) {
 8004              		.loc 1 709 61 discriminator 2 view .LVU2593
 8005 03b4 1B4B     		ldr	r3, .L805+4
 8006 03b6 1B68     		ldr	r3, [r3]
 709:src/display.c **** 			if (State2.wascomplex) {
 8007              		.loc 1 709 47 discriminator 2 view .LVU2594
ARM GAS  /tmp/ccZMW3We.s 			page 233


 8008 03b8 002B     		cmp	r3, #0
 8009 03ba 3FF453AE 		beq	.L723
 710:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8010              		.loc 1 710 4 is_stmt 1 view .LVU2595
 713:src/display.c **** 				if (RectPolConv == 1) {
 8011              		.loc 1 713 9 view .LVU2596
 714:src/display.c **** 					q = "\007\306<";
 8012              		.loc 1 714 5 view .LVU2597
 718:src/display.c **** 				}
 8013              		.loc 1 718 8 is_stmt 0 view .LVU2598
 8014 03be 1A49     		ldr	r1, .L805+8
 8015 03c0 1A4A     		ldr	r2, .L805+12
 8016 03c2 012B     		cmp	r3, #1
 8017 03c4 18BF     		it	ne
 8018 03c6 1146     		movne	r1, r2
 8019              	.L724:
 8020              	.LVL900:
 721:src/display.c **** 
 8021              		.loc 1 721 4 is_stmt 1 view .LVU2599
 721:src/display.c **** 
 8022              		.loc 1 721 8 is_stmt 0 view .LVU2600
 8023 03c8 2846     		mov	r0, r5
 8024              	.LVL901:
 721:src/display.c **** 
 8025              		.loc 1 721 8 view .LVU2601
 8026 03ca FFF7FEFF 		bl	scopy
 8027              	.LVL902:
 721:src/display.c **** 
 8028              		.loc 1 721 8 view .LVU2602
 8029 03ce 0646     		mov	r6, r0
 8030              	.LVL903:
 723:src/display.c **** 		}
 8031              		.loc 1 723 4 is_stmt 1 view .LVU2603
 8032 03d0 7AE6     		b	.L725
 8033              	.LVL904:
 8034              	.L799:
 8035              	.LBB420:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8036              		.loc 1 812 75 is_stmt 0 discriminator 2 view .LVU2604
 8037 03d2 FFF7FEFF 		bl	stack_size
 8038              	.LVL905:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8039              		.loc 1 812 62 discriminator 2 view .LVU2605
 8040 03d6 D9F80010 		ldr	r1, [r9]
 8041 03da 6330     		adds	r0, r0, #99
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8042              		.loc 1 812 46 discriminator 2 view .LVU2606
 8043 03dc 8842     		cmp	r0, r1
 8044 03de FFF67AAE 		blt	.L732
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8045              		.loc 1 812 91 discriminator 4 view .LVU2607
 8046 03e2 FFF7FEFF 		bl	get_cmdline
 8047              	.LVL906:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8048              		.loc 1 812 88 discriminator 4 view .LVU2608
 8049 03e6 18B1     		cbz	r0, .L735
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
ARM GAS  /tmp/ccZMW3We.s 			page 234


 8050              		.loc 1 813 7 view .LVU2609
 8051 03e8 8FB1     		cbz	r7, .L734
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8052              		.loc 1 813 28 discriminator 1 view .LVU2610
 8053 03ea E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8054              		.loc 1 813 10 discriminator 1 view .LVU2611
 8055 03ec 5A06     		lsls	r2, r3, #25
 8056 03ee 0ED4     		bmi	.L734
 8057              	.L735:
 8058 03f0 D9F80010 		ldr	r1, [r9]
 8059 03f4 6FE6     		b	.L732
 8060              	.LVL907:
 8061              	.L751:
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8062              		.loc 1 813 10 discriminator 1 view .LVU2612
 8063              	.LBE420:
 732:src/display.c **** #endif
 8064              		.loc 1 732 20 view .LVU2613
 8065 03f6 0E49     		ldr	r1, .L805+16
 8066 03f8 42E6     		b	.L726
 8067              	.LVL908:
 8068              	.L712:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8069              		.loc 1 668 4 is_stmt 1 view .LVU2614
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8070              		.loc 1 668 11 is_stmt 0 view .LVU2615
 8071 03fa 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8072              		.loc 1 668 27 is_stmt 1 view .LVU2616
 8073 03fc 19E7     		b	.L746
 8074              	.LVL909:
 8075              	.L749:
 711:src/display.c **** 			}
 8076              		.loc 1 711 7 is_stmt 0 view .LVU2617
 8077 03fe 0D49     		ldr	r1, .L805+20
 8078 0400 E2E7     		b	.L724
 8079              	.LVL910:
 8080              	.L755:
 775:src/display.c **** 		}
 8081              		.loc 1 775 6 view .LVU2618
 8082 0402 0D49     		ldr	r1, .L805+24
 590:src/display.c **** 	int n;
 8083              		.loc 1 590 17 view .LVU2619
 8084 0404 2846     		mov	r0, r5
 8085 0406 32E7     		b	.L728
 8086              	.L754:
 772:src/display.c **** 		}
 8087              		.loc 1 772 6 view .LVU2620
 8088 0408 0C49     		ldr	r1, .L805+28
 590:src/display.c **** 	int n;
 8089              		.loc 1 590 17 view .LVU2621
 8090 040a 2846     		mov	r0, r5
 8091 040c 2FE7     		b	.L728
 8092              	.LVL911:
 8093              	.L734:
 8094              	.LBB421:
ARM GAS  /tmp/ccZMW3We.s 			page 235


 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8095              		.loc 1 812 4 discriminator 7 view .LVU2622
 8096 040e D9F80010 		ldr	r1, [r9]
 8097 0412 61E6     		b	.L736
 8098              	.LVL912:
 8099              	.L756:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8100              		.loc 1 812 4 discriminator 7 view .LVU2623
 8101              	.LBE421:
 779:src/display.c **** 		}
 8102              		.loc 1 779 6 view .LVU2624
 8103 0414 0A49     		ldr	r1, .L805+32
 590:src/display.c **** 	int n;
 8104              		.loc 1 590 17 view .LVU2625
 8105 0416 2846     		mov	r0, r5
 8106 0418 29E7     		b	.L728
 8107              	.LVL913:
 8108              	.L758:
 8109              	.LBB422:
 8110              	.LBB418:
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8111              		.loc 1 851 23 view .LVU2626
 8112 041a 3E27     		movs	r7, #62
 8113              	.LVL914:
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8114              		.loc 1 851 23 view .LVU2627
 8115 041c 8AE6     		b	.L743
 8116              	.L806:
 8117 041e 00BF     		.align	2
 8118              	.L805:
 8119 0420 00000000 		.word	.LANCHOR17
 8120 0424 00000000 		.word	RectPolConv
 8121 0428 04000000 		.word	.LC4
 8122 042c 0C000000 		.word	.LC6
 8123 0430 14000000 		.word	.LC8
 8124 0434 08000000 		.word	.LC5
 8125 0438 28000000 		.word	.LC11
 8126 043c 34000000 		.word	.LC14
 8127 0440 2C000000 		.word	.LC12
 8128              	.LBE418:
 8129              	.LBE422:
 8130              		.cfi_endproc
 8131              	.LFE16:
 8133              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8134              		.align	2
 8135              	.LC20:
 8136 0000 0D00     		.ascii	"\015\000"
 8137 0002 0000     		.align	2
 8138              	.LC21:
 8139 0004 060600   		.ascii	"\006\006\000"
 8140 0007 00       		.align	2
 8141              	.LC23:
 8142 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8142      492C2057 
 8142      77414C74 
 8142      4500
 8143 0016 0000     		.align	2
ARM GAS  /tmp/ccZMW3We.s 			page 236


 8144              	.LC24:
 8145 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8145      2055204C 
 8145      20492C20 
 8145      20572041 
 8145      204C2054 
 8146 0032 0000     		.align	2
 8147              	.LC25:
 8148 0034 2000     		.ascii	" \000"
 8149 0036 0000     		.align	2
 8150              	.LC26:
 8151 0038 48595000 		.ascii	"HYP\000"
 8152              		.align	2
 8153              	.LC29:
 8154 003c 7F060600 		.ascii	"\177\006\006\000"
 8155              		.align	2
 8156              	.LC30:
 8157 0040 3020746F 		.ascii	"0 to 255\000"
 8157      20323535 
 8157      00
 8158 0049 000000   		.align	2
 8159              	.LC31:
 8160 004c 46726565 		.ascii	"Free:\000"
 8160      3A00
 8161 0052 0000     		.align	2
 8162              	.LC32:
 8163 0054 202C2046 		.ascii	" , FL. \000"
 8163      4C2E2000 
 8164              		.align	2
 8165              	.LC33:
 8166 005c 52656773 		.ascii	"Regs:\000"
 8166      3A00
 8167 0062 0000     		.align	2
 8168              	.LC34:
 8169 0064 20910606 		.ascii	" \221\006\006+\000"
 8169      2B00
 8170 006a 0000     		.align	2
 8171              	.LC35:
 8172 006c 202C204C 		.ascii	" , Loc. \000"
 8172      6F632E20 
 8172      00
 8173 0075 000000   		.align	2
 8174              	.LC36:
 8175 0078 464C2000 		.ascii	"FL \000"
 8176              		.align	2
 8177              	.LC37:
 8178 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8178      06413A44 
 8178      064C494A 
 8178      4B00
 8179 008a 0000     		.align	2
 8180              	.LC38:
 8181 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8181      302D2E31 
 8181      3500
 8182 0096 0000     		.align	2
 8183              	.LC39:
ARM GAS  /tmp/ccZMW3We.s 			page 237


 8184 0098 43414C4C 		.ascii	"CALLS\000"
 8184      5300
 8185 009e 0000     		.align	2
 8186              	.LC40:
 8187 00a0 52656720 		.ascii	"Reg \000"
 8187      00
 8188 00a5 000000   		.align	2
 8189              	.LC41:
 8190 00a8 00       		.ascii	"\000"
 8191 00a9 000000   		.align	2
 8192              	.LC42:
 8193 00ac 202D2D2D 		.ascii	" ---\000"
 8193      00
 8194 00b1 000000   		.align	2
 8195              	.LC28:
 8196 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8196      093E0A00 
 8197              		.align	2
 8198              	.LC27:
 8199 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8199      41424344 
 8199      4C494A4B 
 8199      00
 8200              		.section	.text.display,"ax",%progbits
 8201              		.align	1
 8202              		.p2align 2,,3
 8203              		.global	display
 8204              		.syntax unified
 8205              		.thumb
 8206              		.thumb_func
 8207              		.fpu fpv4-sp-d16
 8209              	display:
 8210              	.LFB34:
2216:src/display.c **** 	int i, j;
 8211              		.loc 1 2216 20 is_stmt 1 view -0
 8212              		.cfi_startproc
 8213              		@ args = 0, pretend = 0, frame = 160
 8214              		@ frame_needed = 0, uses_anonymous_args = 0
2217:src/display.c **** 	char buf[40], *bp = buf;
 8215              		.loc 1 2217 2 view .LVU2629
2218:src/display.c **** 	const char *p;
 8216              		.loc 1 2218 2 view .LVU2630
2216:src/display.c **** 	int i, j;
 8217              		.loc 1 2216 20 is_stmt 0 view .LVU2631
 8218 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8219              		.cfi_def_cfa_offset 36
 8220              		.cfi_offset 4, -36
 8221              		.cfi_offset 5, -32
 8222              		.cfi_offset 6, -28
 8223              		.cfi_offset 7, -24
 8224              		.cfi_offset 8, -20
 8225              		.cfi_offset 9, -16
 8226              		.cfi_offset 10, -12
 8227              		.cfi_offset 11, -8
 8228              		.cfi_offset 14, -4
2221:src/display.c **** 	int skip = 0;
 8229              		.loc 1 2221 24 view .LVU2632
ARM GAS  /tmp/ccZMW3We.s 			page 238


 8230 0004 BE4C     		ldr	r4, .L1099
2216:src/display.c **** 	int i, j;
 8231              		.loc 1 2216 20 view .LVU2633
 8232 0006 A9B0     		sub	sp, sp, #164
 8233              		.cfi_def_cfa_offset 200
 8234              	.LVL915:
2219:src/display.c **** 	int annuc = 0;
 8235              		.loc 1 2219 2 is_stmt 1 view .LVU2634
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8236              		.loc 1 2220 2 view .LVU2635
2221:src/display.c **** 	int skip = 0;
 8237              		.loc 1 2221 2 view .LVU2636
2221:src/display.c **** 	int skip = 0;
 8238              		.loc 1 2221 24 is_stmt 0 view .LVU2637
 8239 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8240              	.LVL916:
2222:src/display.c **** 	int x_disp = 0;
 8241              		.loc 1 2222 2 is_stmt 1 view .LVU2638
2223:src/display.c **** 	const int shift = cur_shift();
 8242              		.loc 1 2223 2 view .LVU2639
2224:src/display.c **** 
 8243              		.loc 1 2224 2 view .LVU2640
2224:src/display.c **** 
 8244              		.loc 1 2224 20 is_stmt 0 view .LVU2641
 8245 000c FFF7FEFF 		bl	cur_shift
 8246              	.LVL917:
2228:src/display.c **** 		State2.disp_freeze = 0;
 8247              		.loc 1 2228 6 view .LVU2642
 8248 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8249              	.LVL918:
2228:src/display.c **** 		State2.disp_freeze = 0;
 8250              		.loc 1 2228 2 is_stmt 1 view .LVU2643
2228:src/display.c **** 		State2.disp_freeze = 0;
 8251              		.loc 1 2228 5 is_stmt 0 view .LVU2644
 8252 0012 13F01006 		ands	r6, r3, #16
 8253 0016 40F08780 		bne	.L1058
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8254              		.loc 1 2238 2 is_stmt 1 view .LVU2645
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8255              		.loc 1 2238 6 is_stmt 0 view .LVU2646
 8256 001a BA4F     		ldr	r7, .L1099+4
 8257 001c 3D68     		ldr	r5, [r7]
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8258              		.loc 1 2238 5 view .LVU2647
 8259 001e 002D     		cmp	r5, #0
 8260 0020 4BD1     		bne	.L1059
2255:src/display.c **** 
 8261              		.loc 1 2255 2 is_stmt 1 view .LVU2648
 8262 0022 8246     		mov	r10, r0
 8263 0024 FFF7FEFF 		bl	reset_disp
 8264              	.LVL919:
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
 8265              		.loc 1 2257 2 view .LVU2649
 8266 0028 1EA8     		add	r0, sp, #120
 8267              	.LVL920:
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
 8268              		.loc 1 2257 2 is_stmt 0 view .LVU2650
ARM GAS  /tmp/ccZMW3We.s 			page 239


 8269 002a 2822     		movs	r2, #40
 8270 002c 2946     		mov	r1, r5
 8271 002e FFF7FEFF 		bl	xset
 8272              	.LVL921:
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8273              		.loc 1 2258 2 is_stmt 1 view .LVU2651
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8274              		.loc 1 2258 6 is_stmt 0 view .LVU2652
 8275 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8276              		.loc 1 2258 5 view .LVU2653
 8277 0034 9E07     		lsls	r6, r3, #30
 8278 0036 03D5     		bpl	.L942
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8279              		.loc 1 2258 20 discriminator 1 view .LVU2654
 8280 0038 B9F1000F 		cmp	r9, #0
 8281 003c 00F0EC80 		beq	.L1060
 8282              	.L942:
2218:src/display.c **** 	const char *p;
 8283              		.loc 1 2218 17 view .LVU2655
 8284 0040 0DF17808 		add	r8, sp, #120
 8285              	.LVL922:
 8286              	.L813:
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8287              		.loc 1 2262 2 is_stmt 1 view .LVU2656
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8288              		.loc 1 2262 5 is_stmt 0 view .LVU2657
 8289 0044 D806     		lsls	r0, r3, #27
 8290 0046 00F17581 		bmi	.L1061
2274:src/display.c **** 		set_status(S_SURE);
 8291              		.loc 1 2274 9 is_stmt 1 view .LVU2658
2274:src/display.c **** 		set_status(S_SURE);
 8292              		.loc 1 2274 13 is_stmt 0 view .LVU2659
 8293 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2274:src/display.c **** 		set_status(S_SURE);
 8294              		.loc 1 2274 12 view .LVU2660
 8295 004c 5107     		lsls	r1, r2, #29
 8296 004e 40F0F480 		bne	.L1062
2276:src/display.c **** 		bp = scopy(bp, "HYP");
 8297              		.loc 1 2276 9 is_stmt 1 view .LVU2661
2276:src/display.c **** 		bp = scopy(bp, "HYP");
 8298              		.loc 1 2276 12 is_stmt 0 view .LVU2662
 8299 0052 9A06     		lsls	r2, r3, #26
 8300 0054 00F1C280 		bmi	.L1063
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8301              		.loc 1 2281 9 is_stmt 1 view .LVU2663
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8302              		.loc 1 2281 12 is_stmt 0 view .LVU2664
 8303 0058 DE07     		lsls	r6, r3, #31
 8304 005a 00F1AE81 		bmi	.L1064
2289:src/display.c **** 		/* Commands with arguments */
 8305              		.loc 1 2289 9 is_stmt 1 view .LVU2665
2289:src/display.c **** 		/* Commands with arguments */
 8306              		.loc 1 2289 13 is_stmt 0 view .LVU2666
 8307 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2289:src/display.c **** 		/* Commands with arguments */
 8308              		.loc 1 2289 12 view .LVU2667
ARM GAS  /tmp/ccZMW3We.s 			page 240


 8309 0060 8806     		lsls	r0, r1, #26
 8310 0062 00F10582 		bmi	.L1065
2320:src/display.c **** 		*bp++ = 'x';
 8311              		.loc 1 2320 9 is_stmt 1 view .LVU2668
2320:src/display.c **** 		*bp++ = 'x';
 8312              		.loc 1 2320 19 is_stmt 0 view .LVU2669
 8313 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2320:src/display.c **** 		*bp++ = 'x';
 8314              		.loc 1 2320 12 view .LVU2670
 8315 0068 072A     		cmp	r2, #7
 8316 006a 40F0E481 		bne	.L1066
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8317              		.loc 1 2326 9 is_stmt 1 view .LVU2671
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8318              		.loc 1 2326 12 is_stmt 0 view .LVU2672
 8319 006e B9F1000F 		cmp	r9, #0
 8320 0072 40F00F83 		bne	.L1067
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8321              		.loc 1 2374 9 is_stmt 1 view .LVU2673
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8322              		.loc 1 2374 12 is_stmt 0 view .LVU2674
 8323 0076 1A07     		lsls	r2, r3, #28
 8324 0078 00F16083 		bmi	.L1068
2382:src/display.c **** 		show_status();
 8325              		.loc 1 2382 9 is_stmt 1 view .LVU2675
2382:src/display.c **** 		show_status();
 8326              		.loc 1 2382 19 is_stmt 0 view .LVU2676
 8327 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2382:src/display.c **** 		show_status();
 8328              		.loc 1 2382 12 view .LVU2677
 8329 007e 002B     		cmp	r3, #0
 8330 0080 40F0E583 		bne	.L1069
2385:src/display.c **** 		show_label();
 8331              		.loc 1 2385 9 is_stmt 1 view .LVU2678
2385:src/display.c **** 		show_label();
 8332              		.loc 1 2385 13 is_stmt 0 view .LVU2679
 8333 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2385:src/display.c **** 		show_label();
 8334              		.loc 1 2385 12 view .LVU2680
 8335 0086 5E07     		lsls	r6, r3, #29
 8336 0088 00F1AC83 		bmi	.L1070
2388:src/display.c **** 		show_registers();
 8337              		.loc 1 2388 9 is_stmt 1 view .LVU2681
2388:src/display.c **** 		show_registers();
 8338              		.loc 1 2388 12 is_stmt 0 view .LVU2682
 8339 008c 1807     		lsls	r0, r3, #28
 8340 008e 00F1D484 		bmi	.L1071
2398:src/display.c **** 	  if (DispMsg) { 
 8341              		.loc 1 2398 9 is_stmt 1 view .LVU2683
2398:src/display.c **** 	  if (DispMsg) { 
 8342              		.loc 1 2398 12 is_stmt 0 view .LVU2684
 8343 0092 4806     		lsls	r0, r1, #25
 8344 0094 40F1B284 		bpl	.L878
2399:src/display.c **** 			set_status(DispMsg);
 8345              		.loc 1 2399 4 is_stmt 1 view .LVU2685
2399:src/display.c **** 			set_status(DispMsg);
 8346              		.loc 1 2399 8 is_stmt 0 view .LVU2686
ARM GAS  /tmp/ccZMW3We.s 			page 241


 8347 0098 9B4E     		ldr	r6, .L1099+8
 8348 009a D6F800B0 		ldr	fp, [r6]
2399:src/display.c **** 			set_status(DispMsg);
 8349              		.loc 1 2399 7 view .LVU2687
 8350 009e BBF1000F 		cmp	fp, #0
 8351 00a2 00F08184 		beq	.L879
2400:src/display.c **** 		} else if (DispPlot) {
 8352              		.loc 1 2400 4 is_stmt 1 view .LVU2688
 8353 00a6 5846     		mov	r0, fp
 8354 00a8 FFF7FEFF 		bl	set_status
 8355              	.LVL923:
2457:src/display.c **** nostk:	show_flags();
 8356              		.loc 1 2457 2 view .LVU2689
 8357 00ac DFF87882 		ldr	r8, .L1099+40
 8358              	.LVL924:
2457:src/display.c **** nostk:	show_flags();
 8359              		.loc 1 2457 2 is_stmt 0 view .LVU2690
 8360 00b0 FFF7FEFF 		bl	show_stack
 8361              	.LVL925:
2458:src/display.c **** 	if (!skip) {
 8362              		.loc 1 2458 8 is_stmt 1 view .LVU2691
 8363 00b4 FFF7FEFF 		bl	show_flags
 8364              	.LVL926:
2459:src/display.c **** 		if (State2.runmode) {
 8365              		.loc 1 2459 2 view .LVU2692
 8366 00b8 C9E0     		b	.L817
 8367              	.LVL927:
 8368              	.L1059:
2245:src/display.c **** 
 8369              		.loc 1 2245 3 view .LVU2693
 8370 00ba FFF7FEFF 		bl	wait_for_display
 8371              	.LVL928:
2248:src/display.c **** 			clr_dot(i);
 8372              		.loc 1 2248 3 view .LVU2694
2248:src/display.c **** 			clr_dot(i);
 8373              		.loc 1 2248 15 view .LVU2695
 8374              	.L811:
2249:src/display.c **** 		}
 8375              		.loc 1 2249 4 discriminator 3 view .LVU2696
 8376 00be 3046     		mov	r0, r6
2248:src/display.c **** 			clr_dot(i);
 8377              		.loc 1 2248 30 is_stmt 0 discriminator 3 view .LVU2697
 8378 00c0 0136     		adds	r6, r6, #1
 8379              	.LVL929:
2249:src/display.c **** 		}
 8380              		.loc 1 2249 4 discriminator 3 view .LVU2698
 8381 00c2 FFF7FEFF 		bl	clr_dot
 8382              	.LVL930:
2248:src/display.c **** 			clr_dot(i);
 8383              		.loc 1 2248 30 is_stmt 1 discriminator 3 view .LVU2699
2248:src/display.c **** 			clr_dot(i);
 8384              		.loc 1 2248 15 discriminator 3 view .LVU2700
2248:src/display.c **** 			clr_dot(i);
 8385              		.loc 1 2248 3 is_stmt 0 discriminator 3 view .LVU2701
 8386 00c6 832E     		cmp	r6, #131
 8387 00c8 F9D1     		bne	.L811
 8388 00ca 8F4E     		ldr	r6, .L1099+8
ARM GAS  /tmp/ccZMW3We.s 			page 242


 8389              	.LVL931:
2248:src/display.c **** 			clr_dot(i);
 8390              		.loc 1 2248 3 discriminator 3 view .LVU2702
 8391 00cc DFF85882 		ldr	r8, .L1099+40
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8392              		.loc 1 2220 6 view .LVU2703
 8393 00d0 0025     		movs	r5, #0
 8394              	.LVL932:
 8395              	.L812:
2462:src/display.c **** 			if (p == NULL || cata) {
 8396              		.loc 1 2462 4 is_stmt 1 view .LVU2704
2462:src/display.c **** 			if (p == NULL || cata) {
 8397              		.loc 1 2462 8 is_stmt 0 view .LVU2705
 8398 00d2 FFF7FEFF 		bl	get_cmdline
 8399              	.LVL933:
2463:src/display.c **** 				if (ShowRegister != -1) {
 8400              		.loc 1 2463 4 is_stmt 1 view .LVU2706
2463:src/display.c **** 				if (ShowRegister != -1) {
 8401              		.loc 1 2463 7 is_stmt 0 view .LVU2707
 8402 00d6 8246     		mov	r10, r0
 8403 00d8 10B1     		cbz	r0, .L893
2463:src/display.c **** 				if (ShowRegister != -1) {
 8404              		.loc 1 2463 18 discriminator 1 view .LVU2708
 8405 00da B9F1000F 		cmp	r9, #0
 8406 00de 2ED0     		beq	.L894
 8407              	.L893:
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8408              		.loc 1 2464 5 is_stmt 1 view .LVU2709
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8409              		.loc 1 2464 22 is_stmt 0 view .LVU2710
 8410 00e0 DFF84892 		ldr	r9, .L1099+44
 8411              	.LVL934:
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8412              		.loc 1 2464 22 view .LVU2711
 8413 00e4 D9F80000 		ldr	r0, [r9]
 8414              	.LVL935:
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8415              		.loc 1 2464 8 view .LVU2712
 8416 00e8 421C     		adds	r2, r0, #1
 8417 00ea 00F05081 		beq	.L895
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8418              		.loc 1 2465 6 is_stmt 1 view .LVU2713
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8419              		.loc 1 2465 42 is_stmt 0 view .LVU2714
 8420 00ee 6428     		cmp	r0, #100
 8421 00f0 00F08780 		beq	.L1072
 8422              	.L896:
2466:src/display.c **** 				}
 8423              		.loc 1 2466 6 is_stmt 1 view .LVU2715
 8424 00f4 0021     		movs	r1, #0
 8425 00f6 FFF7FEFF 		bl	format_reg
 8426              	.LVL936:
2474:src/display.c **** 				goto finish;
 8427              		.loc 1 2474 4 view .LVU2716
2474:src/display.c **** 				goto finish;
 8428              		.loc 1 2474 7 is_stmt 0 view .LVU2717
 8429 00fa 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccZMW3We.s 			page 243


 8430 00fc 002B     		cmp	r3, #0
 8431 00fe 00F0FC80 		beq	.L1055
 8432              	.LVL937:
 8433              	.L899:
2527:src/display.c **** 	State2.disp_as_alpha = 0;
 8434              		.loc 1 2527 2 is_stmt 1 view .LVU2718
2528:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8435              		.loc 1 2528 2 view .LVU2719
2529:src/display.c **** 	State2.invalid_disp = 0;
 8436              		.loc 1 2529 2 view .LVU2720
2527:src/display.c **** 	State2.disp_as_alpha = 0;
 8437              		.loc 1 2527 17 is_stmt 0 view .LVU2721
 8438 0102 6369     		ldr	r3, [r4, #20]
 8439 0104 23F02173 		bic	r3, r3, #42205184
 8440 0108 23F48053 		bic	r3, r3, #4096
2529:src/display.c **** 	State2.invalid_disp = 0;
 8441              		.loc 1 2529 15 view .LVU2722
 8442 010c 0022     		movs	r2, #0
2527:src/display.c **** 	State2.disp_as_alpha = 0;
 8443              		.loc 1 2527 17 view .LVU2723
 8444 010e 6361     		str	r3, [r4, #20]
2531:src/display.c **** 	DispMsg = CNULL;
 8445              		.loc 1 2531 15 view .LVU2724
 8446 0110 6423     		movs	r3, #100
2529:src/display.c **** 	State2.invalid_disp = 0;
 8447              		.loc 1 2529 15 view .LVU2725
 8448 0112 6274     		strb	r2, [r4, #17]
2530:src/display.c **** 	ShowRegister = regX_idx;
 8449              		.loc 1 2530 2 is_stmt 1 view .LVU2726
2531:src/display.c **** 	DispMsg = CNULL;
 8450              		.loc 1 2531 2 view .LVU2727
2532:src/display.c **** 	DispPlot = 0;
 8451              		.loc 1 2532 10 is_stmt 0 view .LVU2728
 8452 0114 3260     		str	r2, [r6]
2533:src/display.c **** 	State2.disp_small = 0;
 8453              		.loc 1 2533 11 view .LVU2729
 8454 0116 A8F80020 		strh	r2, [r8]	@ movhi
2531:src/display.c **** 	DispMsg = CNULL;
 8455              		.loc 1 2531 15 view .LVU2730
 8456 011a C9F80030 		str	r3, [r9]
2532:src/display.c **** 	DispPlot = 0;
 8457              		.loc 1 2532 2 is_stmt 1 view .LVU2731
2533:src/display.c **** 	State2.disp_small = 0;
 8458              		.loc 1 2533 2 view .LVU2732
2534:src/display.c **** 	finish_display();
 8459              		.loc 1 2534 2 view .LVU2733
2535:src/display.c **** #ifdef CONSOLE
 8460              		.loc 1 2535 2 view .LVU2734
 8461 011e FFF7FEFF 		bl	finish_display
 8462              	.LVL938:
2539:src/display.c **** 
 8463              		.loc 1 2539 1 is_stmt 0 view .LVU2735
 8464 0122 29B0     		add	sp, sp, #164
 8465              		.cfi_remember_state
 8466              		.cfi_def_cfa_offset 36
 8467              		@ sp needed
 8468 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccZMW3We.s 			page 244


 8469              	.LVL939:
 8470              	.L1058:
 8471              		.cfi_restore_state
2229:src/display.c **** 		State2.disp_temp = 1;
 8472              		.loc 1 2229 3 is_stmt 1 view .LVU2736
2230:src/display.c **** #ifdef CONSOLE
 8473              		.loc 1 2230 3 view .LVU2737
2234:src/display.c **** 		return;
 8474              		.loc 1 2234 11 is_stmt 0 view .LVU2738
 8475 0128 784A     		ldr	r2, .L1099+12
2229:src/display.c **** 		State2.disp_temp = 1;
 8476              		.loc 1 2229 22 view .LVU2739
 8477 012a 23F03003 		bic	r3, r3, #48
 8478 012e 43F02003 		orr	r3, r3, #32
2234:src/display.c **** 		return;
 8479              		.loc 1 2234 11 view .LVU2740
 8480 0132 0021     		movs	r1, #0
2229:src/display.c **** 		State2.disp_temp = 1;
 8481              		.loc 1 2229 22 view .LVU2741
 8482 0134 E375     		strb	r3, [r4, #23]
2234:src/display.c **** 		return;
 8483              		.loc 1 2234 3 is_stmt 1 view .LVU2742
2234:src/display.c **** 		return;
 8484              		.loc 1 2234 11 is_stmt 0 view .LVU2743
 8485 0136 1160     		str	r1, [r2]
2235:src/display.c **** 	}
 8486              		.loc 1 2235 3 is_stmt 1 view .LVU2744
2539:src/display.c **** 
 8487              		.loc 1 2539 1 is_stmt 0 view .LVU2745
 8488 0138 29B0     		add	sp, sp, #164
 8489              		.cfi_remember_state
 8490              		.cfi_def_cfa_offset 36
 8491              		@ sp needed
 8492 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8493              	.LVL940:
 8494              	.L894:
 8495              		.cfi_restore_state
2471:src/display.c **** 				x_disp = 1;
 8496              		.loc 1 2471 5 is_stmt 1 view .LVU2746
 8497              	.LBB466:
 8498              	.LBI466:
 885:src/display.c **** 	int i;
 8499              		.loc 1 885 13 view .LVU2747
 8500              	.LBB467:
 886:src/display.c **** 	int gotdot = -1;
 8501              		.loc 1 886 2 view .LVU2748
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8502              		.loc 1 887 2 view .LVU2749
 889:src/display.c **** #endif
 8503              		.loc 1 889 2 view .LVU2750
 893:src/display.c **** #endif
 8504              		.loc 1 893 2 view .LVU2751
 896:src/display.c **** 		SET_MANT_SIGN;
 8505              		.loc 1 896 2 view .LVU2752
 896:src/display.c **** 		SET_MANT_SIGN;
 8506              		.loc 1 896 5 is_stmt 0 view .LVU2753
 8507 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccZMW3We.s 			page 245


 8508 0140 2D2B     		cmp	r3, #45
 8509 0142 00F03E82 		beq	.L1073
 8510              	.LVL941:
 8511              	.L900:
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8512              		.loc 1 901 2 is_stmt 1 view .LVU2754
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8513              		.loc 1 901 6 is_stmt 0 view .LVU2755
 8514 0146 724B     		ldr	r3, .L1099+16
 8515 0148 1B68     		ldr	r3, [r3]
 8516 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8517              		.loc 1 901 5 view .LVU2756
 8518 014e 13F00109 		ands	r9, r3, #1
 8519              	.LVL942:
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8520              		.loc 1 901 5 view .LVU2757
 8521 0152 00F0AC81 		beq	.L901
 8522              	.LVL943:
 902:src/display.c **** 			set_dig(i, *p);
 8523              		.loc 1 902 13 is_stmt 1 view .LVU2758
 8524 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 902:src/display.c **** 			set_dig(i, *p);
 8525              		.loc 1 902 9 is_stmt 0 view .LVU2759
 8526 015a 4FF00009 		mov	r9, #0
 902:src/display.c **** 			set_dig(i, *p);
 8527              		.loc 1 902 3 view .LVU2760
 8528 015e 41B1     		cbz	r1, .L905
 8529              	.LVL944:
 8530              	.L902:
 903:src/display.c **** 			i += SEGS_PER_DIGIT;
 8531              		.loc 1 903 4 is_stmt 1 view .LVU2761
 8532 0160 4846     		mov	r0, r9
 8533 0162 FFF7FEFF 		bl	set_dig
 8534              	.LVL945:
 904:src/display.c **** 		}
 8535              		.loc 1 904 4 view .LVU2762
 902:src/display.c **** 			set_dig(i, *p);
 8536              		.loc 1 902 13 is_stmt 0 view .LVU2763
 8537 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8538              	.LVL946:
 904:src/display.c **** 		}
 8539              		.loc 1 904 6 view .LVU2764
 8540 016a 09F10909 		add	r9, r9, #9
 8541              	.LVL947:
 902:src/display.c **** 			set_dig(i, *p);
 8542              		.loc 1 902 25 is_stmt 1 view .LVU2765
 902:src/display.c **** 			set_dig(i, *p);
 8543              		.loc 1 902 13 view .LVU2766
 902:src/display.c **** 			set_dig(i, *p);
 8544              		.loc 1 902 3 is_stmt 0 view .LVU2767
 8545 016e 0029     		cmp	r1, #0
 8546 0170 F6D1     		bne	.L902
 8547              	.LVL948:
 8548              	.L905:
 906:src/display.c **** 	} else {
 8549              		.loc 1 906 3 is_stmt 1 view .LVU2768
ARM GAS  /tmp/ccZMW3We.s 			page 246


 8550 0172 FFF7FEFF 		bl	carry_overflow
 8551              	.LVL949:
 906:src/display.c **** 	} else {
 8552              		.loc 1 906 3 is_stmt 0 view .LVU2769
 8553              	.LBE467:
 8554              	.LBE466:
2474:src/display.c **** 				goto finish;
 8555              		.loc 1 2474 4 is_stmt 1 view .LVU2770
2474:src/display.c **** 				goto finish;
 8556              		.loc 1 2474 7 is_stmt 0 view .LVU2771
 8557 0176 3B68     		ldr	r3, [r7]
 8558 0178 DFF8B091 		ldr	r9, .L1099+44
 8559 017c 002B     		cmp	r3, #0
 8560 017e C0D1     		bne	.L899
 8561              	.LVL950:
 8562              	.L904:
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8563              		.loc 1 2504 2 is_stmt 1 view .LVU2772
 8564 0180 FFF7FEFF 		bl	set_annunciators
 8565              	.LVL951:
2505:src/display.c **** 		ShowRPN = 0;
 8566              		.loc 1 2505 2 view .LVU2773
2505:src/display.c **** 		ShowRPN = 0;
 8567              		.loc 1 2505 50 is_stmt 0 view .LVU2774
 8568 0184 3368     		ldr	r3, [r6]
 8569 0186 002B     		cmp	r3, #0
 8570 0188 00F00981 		beq	.L1074
 8571              	.LVL952:
 8572              	.L815:
2506:src/display.c **** 		dot(RPN, 0);
 8573              		.loc 1 2506 3 is_stmt 1 view .LVU2775
2506:src/display.c **** 		dot(RPN, 0);
 8574              		.loc 1 2506 11 is_stmt 0 view .LVU2776
 8575 018c 5F4F     		ldr	r7, .L1099+12
 8576 018e 0023     		movs	r3, #0
 8577              	.LBB490:
 8578              	.LBB491:
 329:src/display.c **** }
 8579              		.loc 1 329 7 view .LVU2777
 8580 0190 8D20     		movs	r0, #141
 8581              	.LBE491:
 8582              	.LBE490:
2506:src/display.c **** 		dot(RPN, 0);
 8583              		.loc 1 2506 11 view .LVU2778
 8584 0192 3B60     		str	r3, [r7]
2507:src/display.c **** 	}
 8585              		.loc 1 2507 3 is_stmt 1 view .LVU2779
 8586              	.LVL953:
 8587              	.LBB493:
 8588              	.LBI490:
 327:src/display.c **** 	if (on)	set_dot(n);
 8589              		.loc 1 327 6 view .LVU2780
 8590              	.LBB492:
 328:src/display.c **** 	else	clr_dot(n);
 8591              		.loc 1 328 2 view .LVU2781
 329:src/display.c **** }
 8592              		.loc 1 329 7 view .LVU2782
ARM GAS  /tmp/ccZMW3We.s 			page 247


 8593 0194 FFF7FEFF 		bl	clr_dot
 8594              	.LVL954:
 8595              	.L932:
 329:src/display.c **** }
 8596              		.loc 1 329 7 is_stmt 0 view .LVU2783
 8597              	.LBE492:
 8598              	.LBE493:
2510:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8599              		.loc 1 2510 2 is_stmt 1 view .LVU2784
2511:src/display.c **** 
 8600              		.loc 1 2511 14 is_stmt 0 view .LVU2785
 8601 0198 3B68     		ldr	r3, [r7]
 8602 019a 002B     		cmp	r3, #0
 8603 019c 4BD1     		bne	.L950
2510:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8604              		.loc 1 2510 31 view .LVU2786
 8605 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8606 01a0 12F04003 		ands	r3, r2, #64
 8607 01a4 08D0     		beq	.L933
2511:src/display.c **** 
 8608              		.loc 1 2511 18 view .LVU2787
 8609 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2511:src/display.c **** 
 8610              		.loc 1 2511 14 view .LVU2788
 8611 01a8 1B07     		lsls	r3, r3, #28
 8612 01aa 40F1EE80 		bpl	.L952
2511:src/display.c **** 
 8613              		.loc 1 2511 40 discriminator 3 view .LVU2789
 8614 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8615 01b0 012B     		cmp	r3, #1
 8616 01b2 01D0     		beq	.L933
2511:src/display.c **** 
 8617              		.loc 1 2511 70 discriminator 5 view .LVU2790
 8618 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8619              	.L933:
2510:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8620              		.loc 1 2510 19 discriminator 9 view .LVU2791
 8621 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8622 01ba 63F34512 		bfi	r2, r3, #5, #1
 8623 01be E275     		strb	r2, [r4, #23]
2514:src/display.c ****  		annunciators();
 8624              		.loc 1 2514 2 is_stmt 1 discriminator 9 view .LVU2792
2514:src/display.c ****  		annunciators();
 8625              		.loc 1 2514 5 is_stmt 0 discriminator 9 view .LVU2793
 8626 01c0 002D     		cmp	r5, #0
 8627 01c2 33D0     		beq	.L934
2514:src/display.c ****  		annunciators();
 8628              		.loc 1 2514 36 discriminator 1 view .LVU2794
 8629 01c4 D3B2     		uxtb	r3, r2
2514:src/display.c ****  		annunciators();
 8630              		.loc 1 2514 13 discriminator 1 view .LVU2795
 8631 01c6 03F02103 		and	r3, r3, #33
 8632 01ca 202B     		cmp	r3, #32
 8633 01cc 2ED0     		beq	.L934
 8634              	.L935:
2515:src/display.c ****  	State2.hms = 0;
 8635              		.loc 1 2515 4 is_stmt 1 view .LVU2796
ARM GAS  /tmp/ccZMW3We.s 			page 248


 8636 01ce FFF7FEFF 		bl	annunciators
 8637              	.LVL955:
 8638              	.L936:
2516:src/display.c **** #else
 8639              		.loc 1 2516 3 view .LVU2797
2516:src/display.c **** #else
 8640              		.loc 1 2516 14 is_stmt 0 view .LVU2798
 8641 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8642 01d4 6FF30003 		bfc	r3, #0, #1
 8643 01d8 E375     		strb	r3, [r4, #23]
 8644 01da 92E7     		b	.L899
 8645              	.LVL956:
 8646              	.L1063:
2277:src/display.c **** 		if (! State2.dot)
 8647              		.loc 1 2277 3 is_stmt 1 view .LVU2799
2277:src/display.c **** 		if (! State2.dot)
 8648              		.loc 1 2277 8 is_stmt 0 view .LVU2800
 8649 01dc 4D49     		ldr	r1, .L1099+20
 8650 01de 4046     		mov	r0, r8
 8651 01e0 FFF7FEFF 		bl	scopy
 8652              	.LVL957:
2278:src/display.c **** 			*bp++ = '\235';
 8653              		.loc 1 2278 7 view .LVU2801
 8654 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8655              	.LVL958:
2278:src/display.c **** 			*bp++ = '\235';
 8656              		.loc 1 2278 3 is_stmt 1 view .LVU2802
2278:src/display.c **** 			*bp++ = '\235';
 8657              		.loc 1 2278 6 is_stmt 0 view .LVU2803
 8658 01e6 5B06     		lsls	r3, r3, #25
 8659 01e8 40F1FD80 		bpl	.L819
 8660              	.LVL959:
 8661              	.L1050:
2278:src/display.c **** 			*bp++ = '\235';
 8662              		.loc 1 2278 6 view .LVU2804
 8663 01ec 464E     		ldr	r6, .L1099+8
 8664 01ee DFF83881 		ldr	r8, .L1099+40
 8665              	.L820:
2280:src/display.c **** 	} else if (State2.gtodot) {
 8666              		.loc 1 2280 3 is_stmt 1 view .LVU2805
 8667 01f2 1EA8     		add	r0, sp, #120
 8668 01f4 FFF7FEFF 		bl	set_status
 8669              	.LVL960:
2457:src/display.c **** nostk:	show_flags();
 8670              		.loc 1 2457 2 view .LVU2806
 8671 01f8 FFF7FEFF 		bl	show_stack
 8672              	.LVL961:
2458:src/display.c **** 	if (!skip) {
 8673              		.loc 1 2458 8 view .LVU2807
 8674 01fc FFF7FEFF 		bl	show_flags
 8675              	.LVL962:
2459:src/display.c **** 		if (State2.runmode) {
 8676              		.loc 1 2459 2 view .LVU2808
 8677 0200 25E0     		b	.L817
 8678              	.LVL963:
 8679              	.L1072:
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/ccZMW3We.s 			page 249


 8680              		.loc 1 2465 45 is_stmt 0 discriminator 1 view .LVU2809
 8681 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8682              		.loc 1 2465 42 discriminator 1 view .LVU2810
 8683 0204 13F00101 		ands	r1, r3, #1
 8684 0208 7FF474AF 		bne	.L896
 8685              	.LVL964:
2466:src/display.c **** 				}
 8686              		.loc 1 2466 6 is_stmt 1 view .LVU2811
 8687 020c FFF7FEFF 		bl	format_reg
 8688              	.LVL965:
2474:src/display.c **** 				goto finish;
 8689              		.loc 1 2474 4 view .LVU2812
2474:src/display.c **** 				goto finish;
 8690              		.loc 1 2474 7 is_stmt 0 view .LVU2813
 8691 0210 3B68     		ldr	r3, [r7]
 8692 0212 002B     		cmp	r3, #0
 8693 0214 B4D0     		beq	.L904
 8694 0216 74E7     		b	.L899
 8695              	.LVL966:
 8696              	.L1060:
2259:src/display.c **** 		set_status(buf);
 8697              		.loc 1 2259 3 is_stmt 1 view .LVU2814
2259:src/display.c **** 		set_status(buf);
 8698              		.loc 1 2259 9 is_stmt 0 view .LVU2815
 8699 0218 1423     		movs	r3, #20
2260:src/display.c **** 	}
 8700              		.loc 1 2260 3 view .LVU2816
 8701 021a 1EA8     		add	r0, sp, #120
2259:src/display.c **** 		set_status(buf);
 8702              		.loc 1 2259 9 view .LVU2817
 8703 021c 8DF87830 		strb	r3, [sp, #120]
2260:src/display.c **** 	}
 8704              		.loc 1 2260 3 is_stmt 1 view .LVU2818
2259:src/display.c **** 		set_status(buf);
 8705              		.loc 1 2259 6 is_stmt 0 view .LVU2819
 8706 0220 0DF17908 		add	r8, sp, #121
 8707              	.LVL967:
2260:src/display.c **** 	}
 8708              		.loc 1 2260 3 view .LVU2820
 8709 0224 FFF7FEFF 		bl	set_status
 8710              	.LVL968:
 8711 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8712 022a 0BE7     		b	.L813
 8713              	.LVL969:
 8714              	.L934:
2514:src/display.c ****  		annunciators();
 8715              		.loc 1 2514 52 discriminator 3 view .LVU2821
 8716 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8717 022e 13F0C00F 		tst	r3, #192
 8718 0232 CED0     		beq	.L936
 8719 0234 CBE7     		b	.L935
 8720              	.L950:
 8721 0236 0023     		movs	r3, #0
 8722 0238 BEE7     		b	.L933
 8723              	.LVL970:
 8724              	.L1062:
ARM GAS  /tmp/ccZMW3We.s 			page 250


2275:src/display.c **** 	} else if (State2.hyp) {
 8725              		.loc 1 2275 3 is_stmt 1 view .LVU2822
 8726 023a 3748     		ldr	r0, .L1099+24
 8727 023c 324E     		ldr	r6, .L1099+8
 8728 023e DFF8E880 		ldr	r8, .L1099+40
 8729              	.LVL971:
2275:src/display.c **** 	} else if (State2.hyp) {
 8730              		.loc 1 2275 3 is_stmt 0 view .LVU2823
 8731 0242 FFF7FEFF 		bl	set_status
 8732              	.LVL972:
2457:src/display.c **** nostk:	show_flags();
 8733              		.loc 1 2457 2 is_stmt 1 view .LVU2824
 8734 0246 FFF7FEFF 		bl	show_stack
 8735              	.LVL973:
2458:src/display.c **** 	if (!skip) {
 8736              		.loc 1 2458 8 view .LVU2825
 8737 024a FFF7FEFF 		bl	show_flags
 8738              	.LVL974:
2459:src/display.c **** 		if (State2.runmode) {
 8739              		.loc 1 2459 2 view .LVU2826
 8740              	.L817:
2460:src/display.c **** only_update_x:
 8741              		.loc 1 2460 3 view .LVU2827
2460:src/display.c **** only_update_x:
 8742              		.loc 1 2460 7 is_stmt 0 view .LVU2828
 8743 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2460:src/display.c **** only_update_x:
 8744              		.loc 1 2460 6 view .LVU2829
 8745 0250 13F0400A 		ands	r10, r3, #64
 8746 0254 7FF43DAF 		bne	.L812
 8747              	.LBB494:
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
 8748              		.loc 1 2478 4 is_stmt 1 view .LVU2830
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
 8749              		.loc 1 2478 22 is_stmt 0 view .LVU2831
 8750 0258 2D4B     		ldr	r3, .L1099+16
2482:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8751              		.loc 1 2482 4 view .LVU2832
 8752 025a DFF8D490 		ldr	r9, .L1099+48
 8753              	.LVL975:
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
 8754              		.loc 1 2478 22 view .LVU2833
 8755 025e 1B68     		ldr	r3, [r3]
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
 8756              		.loc 1 2478 17 view .LVU2834
 8757 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8758              	.LVL976:
2479:src/display.c **** 			const int n = nLIB(pc);
 8759              		.loc 1 2479 4 is_stmt 1 view .LVU2835
2479:src/display.c **** 			const int n = nLIB(pc);
 8760              		.loc 1 2479 23 is_stmt 0 view .LVU2836
 8761 0264 3846     		mov	r0, r7
 8762 0266 FFF7FEFF 		bl	user_pc
 8763              	.LVL977:
2481:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8764              		.loc 1 2481 4 view .LVU2837
 8765 026a 2822     		movs	r2, #40
ARM GAS  /tmp/ccZMW3We.s 			page 251


 8766 026c 5146     		mov	r1, r10
2479:src/display.c **** 			const int n = nLIB(pc);
 8767              		.loc 1 2479 23 view .LVU2838
 8768 026e 8346     		mov	fp, r0
2481:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8769              		.loc 1 2481 4 view .LVU2839
 8770 0270 1EA8     		add	r0, sp, #120
 8771 0272 FFF7FEFF 		bl	xset
 8772              	.LVL978:
2480:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8773              		.loc 1 2480 18 view .LVU2840
 8774 0276 BF0B     		lsrs	r7, r7, #14
 8775              	.LVL979:
2480:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8776              		.loc 1 2480 4 is_stmt 1 view .LVU2841
2481:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8777              		.loc 1 2481 4 view .LVU2842
2482:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8778              		.loc 1 2482 4 view .LVU2843
 8779 0278 D9F80000 		ldr	r0, [r9]
 8780 027c 5246     		mov	r2, r10
 8781 027e 0121     		movs	r1, #1
 8782 0280 FFF7FEFF 		bl	set_exp
 8783              	.LVL980:
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8784              		.loc 1 2483 4 view .LVU2844
 8785 0284 002F     		cmp	r7, #0
 8786 0286 40F0B480 		bne	.L1075
 8787 028a 2449     		ldr	r1, .L1099+28
 8788 028c 1EA8     		add	r0, sp, #120
 8789 028e FFF7FEFF 		bl	scopy_spc
 8790              	.LVL981:
 8791 0292 0322     		movs	r2, #3
 8792 0294 5946     		mov	r1, fp
 8793 0296 FFF7FEFF 		bl	num_arg_0
 8794              	.LVL982:
2485:src/display.c **** #ifndef REALBUILD
 8795              		.loc 1 2485 4 view .LVU2845
 8796 029a 0921     		movs	r1, #9
 8797 029c 1EA8     		add	r0, sp, #120
 8798 029e FFF7FEFF 		bl	set_digits_string
 8799              	.LVL983:
2487:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8800              		.loc 1 2487 4 view .LVU2846
 8801 02a2 3946     		mov	r1, r7
 8802 02a4 2822     		movs	r2, #40
 8803 02a6 1EA8     		add	r0, sp, #120
 8804 02a8 FFF7FEFF 		bl	xset
 8805              	.LVL984:
2488:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8806              		.loc 1 2488 4 view .LVU2847
 8807 02ac 3A46     		mov	r2, r7
 8808 02ae 0121     		movs	r1, #1
 8809 02b0 D9F80000 		ldr	r0, [r9]
 8810 02b4 FFF7FEFF 		bl	set_exp
 8811              	.LVL985:
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
ARM GAS  /tmp/ccZMW3We.s 			page 252


 8812              		.loc 1 2489 4 view .LVU2848
 8813 02b8 1949     		ldr	r1, .L1099+32
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8814              		.loc 1 2483 4 is_stmt 0 view .LVU2849
 8815 02ba 0327     		movs	r7, #3
 8816              	.LVL986:
 8817              	.L938:
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8818              		.loc 1 2489 4 discriminator 4 view .LVU2850
 8819 02bc 1EA8     		add	r0, sp, #120
 8820 02be FFF7FEFF 		bl	scopy_spc
 8821              	.LVL987:
 8822 02c2 3A46     		mov	r2, r7
 8823 02c4 5946     		mov	r1, fp
 8824 02c6 FFF7FEFF 		bl	num_arg_0
 8825              	.LVL988:
 8826              	.LBB495:
2492:src/display.c **** 			  char *l=LastDisplayedNumber;
 8827              		.loc 1 2492 6 is_stmt 1 discriminator 4 view .LVU2851
2493:src/display.c **** 			  *l++=' ';
 8828              		.loc 1 2493 6 discriminator 4 view .LVU2852
2494:src/display.c **** 			  while(*b) {
 8829              		.loc 1 2494 6 discriminator 4 view .LVU2853
2494:src/display.c **** 			  while(*b) {
 8830              		.loc 1 2494 10 is_stmt 0 discriminator 4 view .LVU2854
 8831 02ca 164B     		ldr	r3, .L1099+36
2495:src/display.c **** 				  *l++=*b++;
 8832              		.loc 1 2495 12 discriminator 4 view .LVU2855
 8833 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2494:src/display.c **** 			  while(*b) {
 8834              		.loc 1 2494 10 discriminator 4 view .LVU2856
 8835 02d0 2027     		movs	r7, #32
 8836 02d2 1F70     		strb	r7, [r3]
2495:src/display.c **** 				  *l++=*b++;
 8837              		.loc 1 2495 6 is_stmt 1 discriminator 4 view .LVU2857
2495:src/display.c **** 				  *l++=*b++;
 8838              		.loc 1 2495 11 discriminator 4 view .LVU2858
 8839 02d4 0029     		cmp	r1, #0
 8840 02d6 00F04782 		beq	.L949
 8841 02da 0333     		adds	r3, r3, #3
 8842 02dc 1EA8     		add	r0, sp, #120
 8843              	.LVL989:
 8844              	.L931:
2496:src/display.c **** 				  *l++=' ';
 8845              		.loc 1 2496 7 view .LVU2859
2496:src/display.c **** 				  *l++=' ';
 8846              		.loc 1 2496 11 is_stmt 0 view .LVU2860
 8847 02de 03F8021C 		strb	r1, [r3, #-2]
2497:src/display.c **** 			  }
 8848              		.loc 1 2497 7 is_stmt 1 view .LVU2861
 8849              	.LVL990:
2495:src/display.c **** 				  *l++=*b++;
 8850              		.loc 1 2495 12 is_stmt 0 view .LVU2862
 8851 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8852              	.LVL991:
2497:src/display.c **** 			  }
 8853              		.loc 1 2497 11 view .LVU2863
ARM GAS  /tmp/ccZMW3We.s 			page 253


 8854 02e6 03F8017C 		strb	r7, [r3, #-1]
2495:src/display.c **** 				  *l++=*b++;
 8855              		.loc 1 2495 11 is_stmt 1 view .LVU2864
 8856 02ea 1A46     		mov	r2, r3
 8857 02ec 0233     		adds	r3, r3, #2
 8858              	.LVL992:
2495:src/display.c **** 				  *l++=*b++;
 8859              		.loc 1 2495 11 is_stmt 0 view .LVU2865
 8860 02ee 0029     		cmp	r1, #0
 8861 02f0 F5D1     		bne	.L931
 8862              	.LVL993:
 8863              	.L930:
2499:src/display.c ****       }
 8864              		.loc 1 2499 6 is_stmt 1 view .LVU2866
2499:src/display.c ****       }
 8865              		.loc 1 2499 8 is_stmt 0 view .LVU2867
 8866 02f2 0023     		movs	r3, #0
 8867 02f4 DFF83490 		ldr	r9, .L1099+44
 8868 02f8 1370     		strb	r3, [r2]
 8869              	.LVL994:
2499:src/display.c ****       }
 8870              		.loc 1 2499 8 view .LVU2868
 8871              	.LBE495:
 8872              	.LBE494:
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8873              		.loc 1 2504 2 is_stmt 1 view .LVU2869
 8874              	.L1055:
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8875              		.loc 1 2504 2 is_stmt 0 view .LVU2870
 8876 02fa FFF7FEFF 		bl	set_annunciators
 8877              	.LVL995:
2505:src/display.c **** 		ShowRPN = 0;
 8878              		.loc 1 2505 2 is_stmt 1 view .LVU2871
 8879 02fe 45E7     		b	.L815
 8880              	.L1100:
 8881              		.align	2
 8882              	.L1099:
 8883 0300 00000000 		.word	StateWhileOn
 8884 0304 00000000 		.word	WasDataEntry
 8885 0308 00000000 		.word	DispMsg
 8886 030c 00000000 		.word	ShowRPN
 8887 0310 00000000 		.word	main_ram
 8888 0314 38000000 		.word	.LC26
 8889 0318 00000000 		.word	.LANCHOR20
 8890 031c 00000000 		.word	.LANCHOR24
 8891 0320 00000000 		.word	.LANCHOR18
 8892 0324 00000000 		.word	LastDisplayedNumber
 8893 0328 00000000 		.word	DispPlot
 8894 032c 00000000 		.word	ShowRegister
 8895 0330 00000000 		.word	ProgFree
 8896              	.LVL996:
 8897              	.L1061:
 8898              	.LBB497:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8899              		.loc 1 2263 3 view .LVU2872
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8900              		.loc 1 2263 8 is_stmt 0 view .LVU2873
ARM GAS  /tmp/ccZMW3We.s 			page 254


 8901 0334 C14B     		ldr	r3, .L1101
 8902 0336 C24E     		ldr	r6, .L1101+4
 8903 0338 DFF85083 		ldr	r8, .L1101+80
 8904              	.LVL997:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8905              		.loc 1 2263 8 view .LVU2874
 8906 033c DFF85093 		ldr	r9, .L1101+84
 8907              	.LVL998:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8908              		.loc 1 2263 8 view .LVU2875
 8909 0340 93E80700 		ldm	r3, {r0, r1, r2}
 8910 0344 15AB     		add	r3, sp, #84
 8911 0346 03C3     		stmia	r3!, {r0, r1}
 8912 0348 0021     		movs	r1, #0
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8913              		.loc 1 2264 3 view .LVU2876
 8914 034a BE48     		ldr	r0, .L1101+8
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8915              		.loc 1 2263 8 view .LVU2877
 8916 034c 1A80     		strh	r2, [r3]	@ movhi
 8917 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8918              		.loc 1 2264 3 is_stmt 1 view .LVU2878
 8919 0352 FFF7FEFF 		bl	set_digits_string
 8920              	.LVL999:
2265:src/display.c **** #ifndef REALBUILD
 8921              		.loc 1 2265 3 view .LVU2879
 8922              	.LBB498:
 8923              	.LBI498:
 395:src/display.c **** 	if (res) *res++ = ch;
 8924              		.loc 1 395 14 view .LVU2880
 8925              	.LBB499:
 396:src/display.c **** 	else	set_dig(base, ch);
 8926              		.loc 1 396 2 view .LVU2881
 397:src/display.c **** 	return res;
 8927              		.loc 1 397 7 view .LVU2882
 8928 0356 7221     		movs	r1, #114
 8929 0358 6C20     		movs	r0, #108
 8930 035a FFF7FEFF 		bl	set_dig
 8931              	.LVL1000:
 398:src/display.c **** }
 8932              		.loc 1 398 2 view .LVU2883
 398:src/display.c **** }
 8933              		.loc 1 398 2 is_stmt 0 view .LVU2884
 8934              	.LBE499:
 8935              	.LBE498:
2267:src/display.c **** 		scopy(LastDisplayedExponent, " ");
 8936              		.loc 1 2267 3 is_stmt 1 view .LVU2885
 8937 035e BA49     		ldr	r1, .L1101+12
 8938 0360 BA48     		ldr	r0, .L1101+16
 8939 0362 FFF7FEFF 		bl	scopy
 8940              	.LVL1001:
2268:src/display.c **** #endif
 8941              		.loc 1 2268 3 view .LVU2886
 8942 0366 BA49     		ldr	r1, .L1101+20
 8943 0368 BA48     		ldr	r0, .L1101+24
 8944 036a FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccZMW3We.s 			page 255


 8945              	.LVL1002:
2270:src/display.c **** 		set_status(vers);
 8946              		.loc 1 2270 3 view .LVU2887
 8947 036e BA49     		ldr	r1, .L1101+28
 8948 0370 0422     		movs	r2, #4
 8949 0372 0DF15D00 		add	r0, sp, #93
 8950 0376 FFF7FEFF 		bl	xcopy
 8951              	.LVL1003:
2271:src/display.c **** 		skip = 1;
 8952              		.loc 1 2271 3 view .LVU2888
 8953 037a 15A8     		add	r0, sp, #84
 8954 037c FFF7FEFF 		bl	set_status
 8955              	.LVL1004:
2272:src/display.c **** 		goto nostk;
 8956              		.loc 1 2272 3 view .LVU2889
2273:src/display.c **** 	} else if (State2.confirm) {
 8957              		.loc 1 2273 3 view .LVU2890
2273:src/display.c **** 	} else if (State2.confirm) {
 8958              		.loc 1 2273 3 is_stmt 0 view .LVU2891
 8959              	.LBE497:
2458:src/display.c **** 	if (!skip) {
 8960              		.loc 1 2458 8 is_stmt 1 view .LVU2892
 8961 0380 FFF7FEFF 		bl	show_flags
 8962              	.LVL1005:
2459:src/display.c **** 		if (State2.runmode) {
 8963              		.loc 1 2459 2 view .LVU2893
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8964              		.loc 1 2504 2 view .LVU2894
 8965 0384 FFF7FEFF 		bl	set_annunciators
 8966              	.LVL1006:
2505:src/display.c **** 		ShowRPN = 0;
 8967              		.loc 1 2505 2 view .LVU2895
 8968 0388 00E7     		b	.L815
 8969              	.LVL1007:
 8970              	.L952:
2505:src/display.c **** 		ShowRPN = 0;
 8971              		.loc 1 2505 2 is_stmt 0 view .LVU2896
 8972 038a 0123     		movs	r3, #1
 8973 038c 14E7     		b	.L933
 8974              	.LVL1008:
 8975              	.L895:
2469:src/display.c **** 			} else {
 8976              		.loc 1 2469 6 is_stmt 1 view .LVU2897
 8977 038e B348     		ldr	r0, .L1101+32
 8978 0390 2421     		movs	r1, #36
 8979 0392 FFF7FEFF 		bl	set_digits_string
 8980              	.LVL1009:
2474:src/display.c **** 				goto finish;
 8981              		.loc 1 2474 4 view .LVU2898
2474:src/display.c **** 				goto finish;
 8982              		.loc 1 2474 7 is_stmt 0 view .LVU2899
 8983 0396 3B68     		ldr	r3, [r7]
 8984 0398 002B     		cmp	r3, #0
 8985 039a AED0     		beq	.L1055
 8986 039c B1E6     		b	.L899
 8987              	.LVL1010:
 8988              	.L1074:
ARM GAS  /tmp/ccZMW3We.s 			page 256


2505:src/display.c **** 		ShowRPN = 0;
 8989              		.loc 1 2505 69 discriminator 3 view .LVU2900
 8990 039e B8F90030 		ldrsh	r3, [r8]
 8991 03a2 002B     		cmp	r3, #0
 8992 03a4 7FF4F2AE 		bne	.L815
2505:src/display.c **** 		ShowRPN = 0;
 8993              		.loc 1 2505 81 discriminator 4 view .LVU2901
 8994 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 8995 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 8996 03ac 03F00403 		and	r3, r3, #4
 8997 03b0 1343     		orrs	r3, r3, r2
 8998 03b2 7FF4EBAE 		bne	.L815
 8999 03b6 AA4F     		ldr	r7, .L1101+36
 9000 03b8 EEE6     		b	.L932
 9001              	.LVL1011:
 9002              	.L1064:
2283:src/display.c **** 		if (State2.numdigit > 0)
 9003              		.loc 1 2283 3 is_stmt 1 view .LVU2902
2283:src/display.c **** 		if (State2.numdigit > 0)
 9004              		.loc 1 2283 8 is_stmt 0 view .LVU2903
 9005 03ba 2E22     		movs	r2, #46
 9006 03bc A949     		ldr	r1, .L1101+40
 9007 03be 4046     		mov	r0, r8
 9008 03c0 FFF7FEFF 		bl	scopy_char
 9009              	.LVL1012:
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9010              		.loc 1 2284 13 view .LVU2904
 9011 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2283:src/display.c **** 		if (State2.numdigit > 0)
 9012              		.loc 1 2283 8 view .LVU2905
 9013 03c6 0346     		mov	r3, r0
 9014              	.LVL1013:
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9015              		.loc 1 2284 3 is_stmt 1 view .LVU2906
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9016              		.loc 1 2284 6 is_stmt 0 view .LVU2907
 9017 03c8 002A     		cmp	r2, #0
 9018 03ca 4CD1     		bne	.L1076
 9019              	.L822:
2287:src/display.c **** 		set_status(buf);
 9020              		.loc 1 2287 4 is_stmt 1 view .LVU2908
 9021              	.LVL1014:
2287:src/display.c **** 		set_status(buf);
 9022              		.loc 1 2287 10 is_stmt 0 view .LVU2909
 9023 03cc 5F22     		movs	r2, #95
 9024 03ce 1A70     		strb	r2, [r3]
2288:src/display.c **** 	} else if (State2.rarg) {
 9025              		.loc 1 2288 3 is_stmt 1 view .LVU2910
 9026              	.LVL1015:
 9027              	.L838:
 9028              	.LBB500:
2373:src/display.c **** 	} else if (State2.multi) {
 9029              		.loc 1 2373 3 view .LVU2911
 9030 03d0 1EA8     		add	r0, sp, #120
 9031 03d2 FFF7FEFF 		bl	set_status
 9032              	.LVL1016:
2373:src/display.c **** 	} else if (State2.multi) {
ARM GAS  /tmp/ccZMW3We.s 			page 257


 9033              		.loc 1 2373 3 is_stmt 0 view .LVU2912
 9034              	.LBE500:
2457:src/display.c **** nostk:	show_flags();
 9035              		.loc 1 2457 2 is_stmt 1 view .LVU2913
 9036 03d6 9A4E     		ldr	r6, .L1101+4
 9037 03d8 DFF8B082 		ldr	r8, .L1101+80
 9038 03dc FFF7FEFF 		bl	show_stack
 9039              	.LVL1017:
2458:src/display.c **** 	if (!skip) {
 9040              		.loc 1 2458 8 view .LVU2914
 9041 03e0 FFF7FEFF 		bl	show_flags
 9042              	.LVL1018:
2459:src/display.c **** 		if (State2.runmode) {
 9043              		.loc 1 2459 2 view .LVU2915
 9044 03e4 33E7     		b	.L817
 9045              	.LVL1019:
 9046              	.L819:
2279:src/display.c **** 		set_status(buf);
 9047              		.loc 1 2279 4 view .LVU2916
2279:src/display.c **** 		set_status(buf);
 9048              		.loc 1 2279 10 is_stmt 0 view .LVU2917
 9049 03e6 9D23     		movs	r3, #157
 9050 03e8 954E     		ldr	r6, .L1101+4
 9051 03ea DFF8A082 		ldr	r8, .L1101+80
 9052 03ee 0370     		strb	r3, [r0]
 9053 03f0 FFE6     		b	.L820
 9054              	.LVL1020:
 9055              	.L1075:
 9056              	.LBB509:
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9057              		.loc 1 2483 4 discriminator 1 view .LVU2918
 9058 03f2 9D49     		ldr	r1, .L1101+44
 9059 03f4 07EB8703 		add	r3, r7, r7, lsl #2
2484:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
 9060              		.loc 1 2484 19 discriminator 1 view .LVU2919
 9061 03f8 07F00107 		and	r7, r7, #1
 9062              	.LVL1021:
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9063              		.loc 1 2483 4 discriminator 1 view .LVU2920
 9064 03fc 1944     		add	r1, r1, r3
 9065 03fe 1EA8     		add	r0, sp, #120
 9066 0400 0337     		adds	r7, r7, #3
 9067 0402 0193     		str	r3, [sp, #4]
 9068 0404 FFF7FEFF 		bl	scopy_spc
 9069              	.LVL1022:
 9070 0408 3A46     		mov	r2, r7
 9071 040a 5946     		mov	r1, fp
 9072 040c FFF7FEFF 		bl	num_arg_0
 9073              	.LVL1023:
2485:src/display.c **** #ifndef REALBUILD
 9074              		.loc 1 2485 4 is_stmt 1 discriminator 1 view .LVU2921
 9075 0410 0921     		movs	r1, #9
 9076 0412 1EA8     		add	r0, sp, #120
 9077 0414 FFF7FEFF 		bl	set_digits_string
 9078              	.LVL1024:
2487:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 9079              		.loc 1 2487 4 discriminator 1 view .LVU2922
ARM GAS  /tmp/ccZMW3We.s 			page 258


 9080 0418 2822     		movs	r2, #40
 9081 041a 5146     		mov	r1, r10
 9082 041c 1EA8     		add	r0, sp, #120
 9083 041e FFF7FEFF 		bl	xset
 9084              	.LVL1025:
2488:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9085              		.loc 1 2488 4 discriminator 1 view .LVU2923
 9086 0422 0121     		movs	r1, #1
 9087 0424 D9F80000 		ldr	r0, [r9]
 9088 0428 5246     		mov	r2, r10
 9089 042a FFF7FEFF 		bl	set_exp
 9090              	.LVL1026:
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9091              		.loc 1 2489 4 discriminator 1 view .LVU2924
 9092 042e 8F49     		ldr	r1, .L1101+48
 9093 0430 019B     		ldr	r3, [sp, #4]
 9094 0432 1944     		add	r1, r1, r3
 9095 0434 42E7     		b	.L938
 9096              	.LVL1027:
 9097              	.L1066:
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9098              		.loc 1 2489 4 is_stmt 0 discriminator 1 view .LVU2925
 9099              	.LBE509:
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9100              		.loc 1 2321 3 is_stmt 1 view .LVU2926
2322:src/display.c **** 		*bp++ = '_';
 9101              		.loc 1 2322 32 is_stmt 0 view .LVU2927
 9102 0436 8E4B     		ldr	r3, .L1101+52
 9103 0438 814E     		ldr	r6, .L1101+4
2322:src/display.c **** 		*bp++ = '_';
 9104              		.loc 1 2322 9 view .LVU2928
 9105 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9106 043c 88F80130 		strb	r3, [r8, #1]
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9107              		.loc 1 2321 9 view .LVU2929
 9108 0440 7823     		movs	r3, #120
2323:src/display.c **** 		*bp++ = '?';
 9109              		.loc 1 2323 9 view .LVU2930
 9110 0442 5F22     		movs	r2, #95
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9111              		.loc 1 2321 9 view .LVU2931
 9112 0444 88F80030 		strb	r3, [r8]
2322:src/display.c **** 		*bp++ = '_';
 9113              		.loc 1 2322 3 is_stmt 1 view .LVU2932
 9114              	.LVL1028:
2323:src/display.c **** 		*bp++ = '?';
 9115              		.loc 1 2323 3 view .LVU2933
2324:src/display.c **** 		set_status(buf);
 9116              		.loc 1 2324 9 is_stmt 0 view .LVU2934
 9117 0448 3F23     		movs	r3, #63
2323:src/display.c **** 		*bp++ = '?';
 9118              		.loc 1 2323 9 view .LVU2935
 9119 044a 88F80220 		strb	r2, [r8, #2]
2324:src/display.c **** 		set_status(buf);
 9120              		.loc 1 2324 3 is_stmt 1 view .LVU2936
 9121              	.LVL1029:
2324:src/display.c **** 		set_status(buf);
ARM GAS  /tmp/ccZMW3We.s 			page 259


 9122              		.loc 1 2324 9 is_stmt 0 view .LVU2937
 9123 044e 88F80330 		strb	r3, [r8, #3]
2325:src/display.c **** 	} else if (cata) {
 9124              		.loc 1 2325 3 is_stmt 1 view .LVU2938
 9125 0452 1EA8     		add	r0, sp, #120
 9126 0454 DFF83482 		ldr	r8, .L1101+80
 9127              	.LVL1030:
2325:src/display.c **** 	} else if (cata) {
 9128              		.loc 1 2325 3 is_stmt 0 view .LVU2939
 9129 0458 FFF7FEFF 		bl	set_status
 9130              	.LVL1031:
2457:src/display.c **** nostk:	show_flags();
 9131              		.loc 1 2457 2 is_stmt 1 view .LVU2940
 9132 045c FFF7FEFF 		bl	show_stack
 9133              	.LVL1032:
2458:src/display.c **** 	if (!skip) {
 9134              		.loc 1 2458 8 view .LVU2941
 9135 0460 FFF7FEFF 		bl	show_flags
 9136              	.LVL1033:
2459:src/display.c **** 		if (State2.runmode) {
 9137              		.loc 1 2459 2 view .LVU2942
 9138 0464 F3E6     		b	.L817
 9139              	.LVL1034:
 9140              	.L1076:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9141              		.loc 1 2285 4 view .LVU2943
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9142              		.loc 1 2285 9 is_stmt 0 view .LVU2944
 9143 0466 2189     		ldrh	r1, [r4, #8]
 9144 0468 FFF7FEFF 		bl	num_arg_0
 9145              	.LVL1035:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9146              		.loc 1 2285 9 view .LVU2945
 9147 046c 0346     		mov	r3, r0
 9148              	.LVL1036:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9149              		.loc 1 2285 9 view .LVU2946
 9150 046e ADE7     		b	.L822
 9151              	.LVL1037:
 9152              	.L1065:
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9153              		.loc 1 2295 3 is_stmt 1 view .LVU2947
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9154              		.loc 1 2295 34 is_stmt 0 view .LVU2948
 9155 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9156 0472 8049     		ldr	r1, .L1101+56
 9157 0474 0623     		movs	r3, #6
 9158 0476 03EB0213 		add	r3, r3, r2, lsl #4
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9159              		.loc 1 2295 8 view .LVU2949
 9160 047a 1944     		add	r1, r1, r3
 9161 047c 4046     		mov	r0, r8
 9162 047e FFF7FEFF 		bl	scopy
 9163              	.LVL1038:
2296:src/display.c **** 		if (State2.dot) {
 9164              		.loc 1 2296 3 is_stmt 1 view .LVU2950
2296:src/display.c **** 		if (State2.dot) {
ARM GAS  /tmp/ccZMW3We.s 			page 260


 9165              		.loc 1 2296 8 is_stmt 0 view .LVU2951
 9166 0482 7D4A     		ldr	r2, .L1101+60
 9167 0484 7D4B     		ldr	r3, .L1101+64
 9168 0486 94F91510 		ldrsb	r1, [r4, #21]
 9169 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9170 048e 38BF     		it	cc
 9171 0490 1946     		movcc	r1, r3
 9172 0492 FFF7FEFF 		bl	scopy
 9173              	.LVL1039:
2297:src/display.c **** 			*bp++ = 's';
 9174              		.loc 1 2297 7 view .LVU2952
 9175 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9176              	.LVL1040:
2297:src/display.c **** 			*bp++ = 's';
 9177              		.loc 1 2297 3 is_stmt 1 view .LVU2953
2297:src/display.c **** 			*bp++ = 's';
 9178              		.loc 1 2297 6 is_stmt 0 view .LVU2954
 9179 0498 5A06     		lsls	r2, r3, #25
 9180 049a 40F19A80 		bpl	.L825
2298:src/display.c **** 			*bp++ = '_';
 9181              		.loc 1 2298 4 is_stmt 1 view .LVU2955
 9182              	.LVL1041:
2298:src/display.c **** 			*bp++ = '_';
 9183              		.loc 1 2298 10 is_stmt 0 view .LVU2956
 9184 049e 7322     		movs	r2, #115
 9185              	.LVL1042:
 9186              	.L1049:
2302:src/display.c **** 		} else {
 9187              		.loc 1 2302 10 view .LVU2957
 9188 04a0 5F23     		movs	r3, #95
 9189 04a2 674E     		ldr	r6, .L1101+4
 9190 04a4 DFF8E481 		ldr	r8, .L1101+80
2301:src/display.c **** 			*bp++ = '_';
 9191              		.loc 1 2301 10 view .LVU2958
 9192 04a8 0270     		strb	r2, [r0]
2302:src/display.c **** 		} else {
 9193              		.loc 1 2302 4 is_stmt 1 view .LVU2959
2302:src/display.c **** 		} else {
 9194              		.loc 1 2302 10 is_stmt 0 view .LVU2960
 9195 04aa 4370     		strb	r3, [r0, #1]
 9196 04ac A1E6     		b	.L820
 9197              	.LVL1043:
 9198              	.L901:
 9199              	.LBB510:
 9200              	.LBB483:
 908:src/display.c **** 
 9201              		.loc 1 908 3 is_stmt 1 view .LVU2961
 9202 04ae FFF7FEFF 		bl	set_separator_decimal_modes
 9203              	.LVL1044:
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9204              		.loc 1 910 3 view .LVU2962
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9205              		.loc 1 912 3 view .LVU2963
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9206              		.loc 1 912 6 is_stmt 0 view .LVU2964
 9207 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9208              	.LBB468:
ARM GAS  /tmp/ccZMW3We.s 			page 261


 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9209              		.loc 1 919 15 view .LVU2965
 9210 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9211              	.LBE468:
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9212              		.loc 1 912 6 view .LVU2966
 9213 04b8 012B     		cmp	r3, #1
 9214 04ba 40F2B780 		bls	.L906
 9215              	.LVL1045:
 9216              	.LBB469:
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9217              		.loc 1 919 14 is_stmt 1 view .LVU2967
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9218              		.loc 1 919 4 is_stmt 0 view .LVU2968
 9219 04be BCF1000F 		cmp	ip, #0
 9220 04c2 72D0     		beq	.L907
 9221 04c4 0AF10103 		add	r3, r10, #1
 9222 04c8 6046     		mov	r0, ip
 9223              	.LBE469:
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9224              		.loc 1 887 6 view .LVU2969
 9225 04ca 4FF0FF31 		mov	r1, #-1
 9226 04ce 6FEA0A0E 		mvn	lr, r10
 9227              	.LVL1046:
 9228              	.L909:
 9229              	.LBB470:
 920:src/display.c **** 					gotdot = j;
 9230              		.loc 1 920 8 view .LVU2970
 9231 04d2 2E28     		cmp	r0, #46
 9232 04d4 0EEB0302 		add	r2, lr, r3
 9233              	.LVL1047:
 920:src/display.c **** 					gotdot = j;
 9234              		.loc 1 920 5 is_stmt 1 view .LVU2971
 920:src/display.c **** 					gotdot = j;
 9235              		.loc 1 920 8 is_stmt 0 view .LVU2972
 9236 04d8 03D1     		bne	.L908
 920:src/display.c **** 					gotdot = j;
 9237              		.loc 1 920 21 view .LVU2973
 9238 04da B1F1FF3F 		cmp	r1, #-1
 9239 04de 08BF     		it	eq
 9240 04e0 1146     		moveq	r1, r2
 9241              	.LVL1048:
 9242              	.L908:
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9243              		.loc 1 919 28 is_stmt 1 view .LVU2974
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9244              		.loc 1 919 14 view .LVU2975
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9245              		.loc 1 919 15 is_stmt 0 view .LVU2976
 9246 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9247              		.loc 1 919 4 view .LVU2977
 9248 04e6 0028     		cmp	r0, #0
 9249 04e8 F3D1     		bne	.L909
 927:src/display.c **** 			if (j > 0) {
 9250              		.loc 1 927 4 is_stmt 1 view .LVU2978
 927:src/display.c **** 			if (j > 0) {
ARM GAS  /tmp/ccZMW3We.s 			page 262


 9251              		.loc 1 927 6 is_stmt 0 view .LVU2979
 9252 04ea A2F10B03 		sub	r3, r2, #11
 9253              	.LVL1049:
 928:src/display.c **** 				p += j + 1;
 9254              		.loc 1 928 4 is_stmt 1 view .LVU2980
 928:src/display.c **** 				p += j + 1;
 9255              		.loc 1 928 7 is_stmt 0 view .LVU2981
 9256 04ee 002B     		cmp	r3, #0
 9257 04f0 40F34C81 		ble	.L1077
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9258              		.loc 1 929 5 is_stmt 1 view .LVU2982
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9259              		.loc 1 929 7 is_stmt 0 view .LVU2983
 9260 04f4 0A3A     		subs	r2, r2, #10
 931:src/display.c **** 					gotdot = 0;
 9261              		.loc 1 931 8 view .LVU2984
 9262 04f6 8B42     		cmp	r3, r1
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9263              		.loc 1 929 7 view .LVU2985
 9264 04f8 9244     		add	r10, r10, r2
 9265              	.LVL1050:
 930:src/display.c **** 				if (gotdot <= j) {
 9266              		.loc 1 930 5 is_stmt 1 view .LVU2986
 931:src/display.c **** 					gotdot = 0;
 9267              		.loc 1 931 5 view .LVU2987
 931:src/display.c **** 					gotdot = 0;
 9268              		.loc 1 931 8 is_stmt 0 view .LVU2988
 9269 04fa 80F26581 		bge	.L946
 936:src/display.c **** 					gotdot = 0;
 9270              		.loc 1 936 10 is_stmt 1 view .LVU2989
 936:src/display.c **** 					gotdot = 0;
 9271              		.loc 1 936 13 is_stmt 0 view .LVU2990
 9272 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9273              	.LVL1051:
 936:src/display.c **** 					gotdot = 0;
 9274              		.loc 1 936 13 view .LVU2991
 9275 0502 2E2B     		cmp	r3, #46
 9276 0504 00F0E282 		beq	.L1078
 9277              	.LVL1052:
 943:src/display.c **** 				overflow_to_left = 1;
 9278              		.loc 1 943 5 is_stmt 1 view .LVU2992
 9279 0508 3C21     		movs	r1, #60
 9280 050a FFF7FEFF 		bl	set_dig
 9281              	.LVL1053:
 944:src/display.c **** 			}
 9282              		.loc 1 944 5 view .LVU2993
 944:src/display.c **** 			}
 9283              		.loc 1 944 5 is_stmt 0 view .LVU2994
 9284 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 944:src/display.c **** 			}
 9285              		.loc 1 944 5 view .LVU2995
 9286              	.LBE470:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9287              		.loc 1 950 10 is_stmt 1 view .LVU2996
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9288              		.loc 1 950 3 is_stmt 0 view .LVU2997
 9289 0512 BCF1000F 		cmp	ip, #0
ARM GAS  /tmp/ccZMW3We.s 			page 263


 9290 0516 48D0     		beq	.L907
 9291              	.LBB471:
 942:src/display.c **** 				set_dig(0, '<');
 9292              		.loc 1 942 17 view .LVU2998
 9293 0518 4FF0FF33 		mov	r3, #-1
 930:src/display.c **** 				if (gotdot <= j) {
 9294              		.loc 1 930 7 view .LVU2999
 9295 051c 4FF0090B 		mov	fp, #9
 9296              	.LVL1054:
 9297              	.L940:
 944:src/display.c **** 			}
 9298              		.loc 1 944 22 view .LVU3000
 9299 0520 4FF00109 		mov	r9, #1
 9300              	.LVL1055:
 9301              	.L919:
 944:src/display.c **** 			}
 9302              		.loc 1 944 22 view .LVU3001
 9303              	.LBE471:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9304              		.loc 1 975 7 view .LVU3002
 9305 0524 0195     		str	r5, [sp, #4]
 9306 0526 1D46     		mov	r5, r3
 9307              	.LVL1056:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9308              		.loc 1 975 7 view .LVU3003
 9309 0528 3346     		mov	r3, r6
 9310 052a 6246     		mov	r2, ip
 9311 052c 5646     		mov	r6, r10
 9312 052e 9A46     		mov	r10, r3
 9313 0530 08E0     		b	.L917
 9314              	.LVL1057:
 9315              	.L1079:
 965:src/display.c **** #  endif
 9316              		.loc 1 965 8 view .LVU3004
 9317 0532 5D45     		cmp	r5, fp
 9318 0534 11D0     		beq	.L914
 9319              	.LVL1058:
 9320              	.L913:
 989:src/display.c **** 				i += segs_per_digit;
 9321              		.loc 1 989 5 view .LVU3005
 9322 0536 FFF7FEFF 		bl	set_dig
 9323              	.LVL1059:
 990:src/display.c **** 			}
 9324              		.loc 1 990 5 is_stmt 1 view .LVU3006
 990:src/display.c **** 			}
 9325              		.loc 1 990 7 is_stmt 0 view .LVU3007
 9326 053a 0BF1090B 		add	fp, fp, #9
 9327              	.LVL1060:
 9328              	.L915:
 954:src/display.c **** 			if (*p == '.') {
 9329              		.loc 1 954 48 is_stmt 1 view .LVU3008
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9330              		.loc 1 950 10 view .LVU3009
 9331 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9332              	.LVL1061:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9333              		.loc 1 950 3 is_stmt 0 view .LVU3010
ARM GAS  /tmp/ccZMW3We.s 			page 264


 9334 0542 8AB1     		cbz	r2, .L1051
 9335              	.LVL1062:
 9336              	.L917:
 955:src/display.c **** 				if (gotdot < 0)
 9337              		.loc 1 955 4 is_stmt 1 view .LVU3011
 956:src/display.c **** 					gotdot = i;
 9338              		.loc 1 956 5 view .LVU3012
 989:src/display.c **** 				i += segs_per_digit;
 9339              		.loc 1 989 5 view .LVU3013
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9340              		.loc 1 950 21 is_stmt 0 view .LVU3014
 9341 0544 452A     		cmp	r2, #69
 989:src/display.c **** 				i += segs_per_digit;
 9342              		.loc 1 989 5 view .LVU3015
 9343 0546 1146     		mov	r1, r2
 9344 0548 5846     		mov	r0, fp
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9345              		.loc 1 950 21 view .LVU3016
 9346 054a 0DD0     		beq	.L1051
 955:src/display.c **** 				if (gotdot < 0)
 9347              		.loc 1 955 7 view .LVU3017
 9348 054c 2E2A     		cmp	r2, #46
 9349 054e F2D1     		bne	.L913
 965:src/display.c **** #  endif
 9350              		.loc 1 965 5 is_stmt 1 view .LVU3018
 967:src/display.c **** 					i += segs_per_digit;
 9351              		.loc 1 967 6 view .LVU3019
 9352              	.LVL1063:
 971:src/display.c **** 						i += segs_per_digit;
 9353              		.loc 1 971 6 view .LVU3020
 956:src/display.c **** 					gotdot = i;
 9354              		.loc 1 956 8 is_stmt 0 view .LVU3021
 9355 0550 002D     		cmp	r5, #0
 967:src/display.c **** 					i += segs_per_digit;
 9356              		.loc 1 967 6 view .LVU3022
 9357 0552 5846     		mov	r0, fp
 9358 0554 4FF02F01 		mov	r1, #47
 956:src/display.c **** 					gotdot = i;
 9359              		.loc 1 956 8 view .LVU3023
 9360 0558 EBDA     		bge	.L1079
 9361              	.L914:
 972:src/display.c **** 					}
 9362              		.loc 1 972 7 is_stmt 1 view .LVU3024
 9363              	.LVL1064:
 971:src/display.c **** 						i += segs_per_digit;
 9364              		.loc 1 971 9 is_stmt 0 view .LVU3025
 9365 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9366 055c 012A     		cmp	r2, #1
 9367 055e 5CD9     		bls	.L916
 9368 0560 5D46     		mov	r5, fp
 972:src/display.c **** 					}
 9369              		.loc 1 972 9 view .LVU3026
 9370 0562 0BF1090B 		add	fp, fp, #9
 9371              	.LVL1065:
 972:src/display.c **** 					}
 9372              		.loc 1 972 9 view .LVU3027
 9373 0566 EAE7     		b	.L915
ARM GAS  /tmp/ccZMW3We.s 			page 265


 9374              	.LVL1066:
 9375              	.L1051:
 999:src/display.c **** 			gotdot = i;
 9376              		.loc 1 999 3 is_stmt 1 view .LVU3028
 9377 0568 2B46     		mov	r3, r5
 999:src/display.c **** 			gotdot = i;
 9378              		.loc 1 999 6 is_stmt 0 view .LVU3029
 9379 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9380 056e 28BF     		it	cs
 9381 0570 5B46     		movcs	r3, fp
 9382              	.LVL1067:
1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9383              		.loc 1 1001 3 is_stmt 1 view .LVU3030
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9384              		.loc 1 1002 4 view .LVU3031
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9385              		.loc 1 1002 11 is_stmt 0 view .LVU3032
 9386 0572 A3F11B0B 		sub	fp, r3, #27
 9387              	.LVL1068:
1003:src/display.c **** 				break;
 9388              		.loc 1 1003 4 is_stmt 1 view .LVU3033
 9389 0576 5246     		mov	r2, r10
1003:src/display.c **** 				break;
 9390              		.loc 1 1003 7 is_stmt 0 view .LVU3034
 9391 0578 BBF1000F 		cmp	fp, #0
 9392 057c B246     		mov	r10, r6
 9393 057e 019D     		ldr	r5, [sp, #4]
 9394 0580 1646     		mov	r6, r2
 9395              	.LVL1069:
1003:src/display.c **** 				break;
 9396              		.loc 1 1003 7 view .LVU3035
 9397 0582 12DD     		ble	.L907
 9398 0584 4B46     		mov	r3, r9
 9399 0586 A946     		mov	r9, r5
 9400 0588 1D46     		mov	r5, r3
 9401              	.L923:
1006:src/display.c **** 				break;
 9402              		.loc 1 1006 4 is_stmt 1 view .LVU3036
1009:src/display.c **** 		}
 9403              		.loc 1 1009 4 view .LVU3037
 9404              	.LBB472:
 9405              	.LBB473:
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 9406              		.loc 1 358 2 view .LVU3038
 9407 058a 5846     		mov	r0, fp
 9408              	.LBE473:
 9409              	.LBE472:
1006:src/display.c **** 				break;
 9410              		.loc 1 1006 7 is_stmt 0 view .LVU3039
 9411 058c 15B1     		cbz	r5, .L924
 9412              	.LVL1070:
1006:src/display.c **** 				break;
 9413              		.loc 1 1006 25 view .LVU3040
 9414 058e BBF1090F 		cmp	fp, #9
 9415 0592 09D0     		beq	.L1046
 9416              	.L924:
1009:src/display.c **** 		}
ARM GAS  /tmp/ccZMW3We.s 			page 266


 9417              		.loc 1 1009 4 view .LVU3041
 9418 0594 3A4B     		ldr	r3, .L1101+68
 9419 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9420              	.LVL1071:
 9421              	.LBB475:
 9422              	.LBI472:
 355:src/display.c **** 	if (sep == SEP_NONE)
 9423              		.loc 1 355 14 is_stmt 1 view .LVU3042
 9424              	.LBB474:
 356:src/display.c **** 		return res;
 9425              		.loc 1 356 2 view .LVU3043
 356:src/display.c **** 		return res;
 9426              		.loc 1 356 5 is_stmt 0 view .LVU3044
 9427 0598 09B1     		cbz	r1, .L925
 9428 059a FFF7FEFF 		bl	set_separator.part.0
 9429              	.LVL1072:
 9430              	.L925:
 356:src/display.c **** 		return res;
 9431              		.loc 1 356 5 view .LVU3045
 9432              	.LBE474:
 9433              	.LBE475:
1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9434              		.loc 1 1001 3 is_stmt 1 view .LVU3046
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9435              		.loc 1 1002 4 view .LVU3047
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9436              		.loc 1 1002 11 is_stmt 0 view .LVU3048
 9437 059e ABF11B0B 		sub	fp, fp, #27
 9438              	.LVL1073:
1003:src/display.c **** 				break;
 9439              		.loc 1 1003 4 is_stmt 1 view .LVU3049
1003:src/display.c **** 				break;
 9440              		.loc 1 1003 7 is_stmt 0 view .LVU3050
 9441 05a2 BBF1000F 		cmp	fp, #0
 9442 05a6 F0DC     		bgt	.L923
 9443              	.L1046:
1003:src/display.c **** 				break;
 9444              		.loc 1 1003 7 view .LVU3051
 9445 05a8 4D46     		mov	r5, r9
 9446              	.LVL1074:
 9447              	.L907:
1027:src/display.c **** 			p++;
 9448              		.loc 1 1027 3 is_stmt 1 view .LVU3052
1027:src/display.c **** 			p++;
 9449              		.loc 1 1027 6 is_stmt 0 view .LVU3053
 9450 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9451 05ae 452B     		cmp	r3, #69
 9452 05b0 00F0DC80 		beq	.L1080
 9453              	.L1057:
 9454              	.LVL1075:
1027:src/display.c **** 			p++;
 9455              		.loc 1 1027 6 view .LVU3054
 9456              	.LBE483:
 9457              	.LBE510:
2474:src/display.c **** 				goto finish;
 9458              		.loc 1 2474 4 is_stmt 1 view .LVU3055
2474:src/display.c **** 				goto finish;
ARM GAS  /tmp/ccZMW3We.s 			page 267


 9459              		.loc 1 2474 7 is_stmt 0 view .LVU3056
 9460 05b4 3B68     		ldr	r3, [r7]
 9461 05b6 DFF8D890 		ldr	r9, .L1101+84
 9462 05ba 002B     		cmp	r3, #0
 9463 05bc 3FF4E0AD 		beq	.L904
 9464 05c0 9FE5     		b	.L899
 9465              	.LVL1076:
 9466              	.L1073:
 9467              	.LBB511:
 9468              	.LBB484:
 897:src/display.c **** 		p++;
 9469              		.loc 1 897 3 is_stmt 1 view .LVU3057
 9470              	.LBB476:
 9471              	.LBI476:
 284:src/display.c **** {
 9472              		.loc 1 284 13 view .LVU3058
 9473              	.LBB477:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9474              		.loc 1 286 2 view .LVU3059
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9475              		.loc 1 286 24 is_stmt 0 view .LVU3060
 9476 05c2 224A     		ldr	r2, .L1101+16
 287:src/display.c **** }
 9477              		.loc 1 287 2 view .LVU3061
 9478 05c4 8120     		movs	r0, #129
 9479              	.LVL1077:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9480              		.loc 1 286 24 view .LVU3062
 9481 05c6 1370     		strb	r3, [r2]
 287:src/display.c **** }
 9482              		.loc 1 287 2 is_stmt 1 view .LVU3063
 9483              	.LBE477:
 9484              	.LBE476:
 898:src/display.c **** 	}
 9485              		.loc 1 898 4 is_stmt 0 view .LVU3064
 9486 05c8 0AF1010A 		add	r10, r10, #1
 9487              	.LVL1078:
 9488              	.LBB479:
 9489              	.LBB478:
 287:src/display.c **** }
 9490              		.loc 1 287 2 view .LVU3065
 9491 05cc FFF7FEFF 		bl	set_dot
 9492              	.LVL1079:
 9493              	.LBE478:
 9494              	.LBE479:
 898:src/display.c **** 	}
 9495              		.loc 1 898 3 is_stmt 1 view .LVU3066
 898:src/display.c **** 	}
 9496              		.loc 1 898 3 is_stmt 0 view .LVU3067
 9497 05d0 B9E5     		b	.L900
 9498              	.LVL1080:
 9499              	.L825:
 898:src/display.c **** 	}
 9500              		.loc 1 898 3 view .LVU3068
 9501              	.LBE484:
 9502              	.LBE511:
2300:src/display.c **** 			*bp++ = '\021';
ARM GAS  /tmp/ccZMW3We.s 			page 268


 9503              		.loc 1 2300 10 is_stmt 1 view .LVU3069
2300:src/display.c **** 			*bp++ = '\021';
 9504              		.loc 1 2300 13 is_stmt 0 view .LVU3070
 9505 05d2 BAF1010F 		cmp	r10, #1
 9506 05d6 00F0D780 		beq	.L1081
2307:src/display.c **** 				*bp++ = '.';
 9507              		.loc 1 2307 4 is_stmt 1 view .LVU3071
2307:src/display.c **** 				*bp++ = '.';
 9508              		.loc 1 2307 8 is_stmt 0 view .LVU3072
 9509 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2307:src/display.c **** 				*bp++ = '.';
 9510              		.loc 1 2307 7 view .LVU3073
 9511 05dc DB07     		lsls	r3, r3, #31
2308:src/display.c **** 			if (State2.numdigit > 0) {
 9512              		.loc 1 2308 5 is_stmt 1 view .LVU3074
 9513              	.LVL1081:
2308:src/display.c **** 			if (State2.numdigit > 0) {
 9514              		.loc 1 2308 11 is_stmt 0 view .LVU3075
 9515 05de 44BF     		itt	mi
 9516 05e0 2E23     		movmi	r3, #46
 9517 05e2 00F8013B 		strbmi	r3, [r0], #1
 9518              	.LVL1082:
2309:src/display.c **** 				if (State2.shuffle)
 9519              		.loc 1 2309 4 is_stmt 1 view .LVU3076
2309:src/display.c **** 				if (State2.shuffle)
 9520              		.loc 1 2309 14 is_stmt 0 view .LVU3077
 9521 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2309:src/display.c **** 				if (State2.shuffle)
 9522              		.loc 1 2309 7 view .LVU3078
 9523 05e8 8AB1     		cbz	r2, .L828
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9524              		.loc 1 2310 5 is_stmt 1 view .LVU3079
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9525              		.loc 1 2310 9 is_stmt 0 view .LVU3080
 9526 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9527              		.loc 1 2310 8 view .LVU3081
 9528 05ec 9E07     		lsls	r6, r3, #30
 9529 05ee 40F1D781 		bpl	.L829
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9530              		.loc 1 2311 6 is_stmt 1 view .LVU3082
 9531              	.LVL1083:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9532              		.loc 1 2311 20 is_stmt 0 view .LVU3083
 9533 05f2 2289     		ldrh	r2, [r4, #8]
 9534              	.LVL1084:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9535              		.loc 1 2311 37 is_stmt 1 view .LVU3084
 9536 05f4 2349     		ldr	r1, .L1101+72
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9537              		.loc 1 2311 13 is_stmt 0 view .LVU3085
 9538 05f6 0023     		movs	r3, #0
 9539              	.LVL1085:
 9540              	.L830:
2312:src/display.c **** 				else
 9541              		.loc 1 2312 7 is_stmt 1 discriminator 3 view .LVU3086
2312:src/display.c **** 				else
ARM GAS  /tmp/ccZMW3We.s 			page 269


 9542              		.loc 1 2312 26 is_stmt 0 discriminator 3 view .LVU3087
 9543 05f8 02F00306 		and	r6, r2, #3
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9544              		.loc 1 2311 57 discriminator 3 view .LVU3088
 9545 05fc 0133     		adds	r3, r3, #1
 9546              	.LVL1086:
2312:src/display.c **** 				else
 9547              		.loc 1 2312 13 discriminator 3 view .LVU3089
 9548 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9549 0600 00F8016B 		strb	r6, [r0], #1
 9550              	.LVL1087:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9551              		.loc 1 2311 56 is_stmt 1 discriminator 3 view .LVU3090
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9552              		.loc 1 2311 45 is_stmt 0 discriminator 3 view .LVU3091
 9553 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9554              		.loc 1 2311 6 discriminator 3 view .LVU3092
 9555 0606 9E42     		cmp	r6, r3
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9556              		.loc 1 2311 63 discriminator 3 view .LVU3093
 9557 0608 4FEAA202 		asr	r2, r2, #2
 9558              	.LVL1088:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9559              		.loc 1 2311 37 is_stmt 1 discriminator 3 view .LVU3094
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9560              		.loc 1 2311 6 is_stmt 0 discriminator 3 view .LVU3095
 9561 060c F4DC     		bgt	.L830
 9562              	.LVL1089:
 9563              	.L828:
2317:src/display.c **** 		}
 9564              		.loc 1 2317 5 is_stmt 1 view .LVU3096
2317:src/display.c **** 		}
 9565              		.loc 1 2317 11 is_stmt 0 view .LVU3097
 9566 060e 5F23     		movs	r3, #95
 9567 0610 0B4E     		ldr	r6, .L1101+4
 9568 0612 DFF87880 		ldr	r8, .L1101+80
 9569 0616 0370     		strb	r3, [r0]
 9570 0618 EBE5     		b	.L820
 9571              	.LVL1090:
 9572              	.L916:
 9573              	.LBB512:
 9574              	.LBB485:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9575              		.loc 1 975 7 is_stmt 1 view .LVU3098
 9576 061a 1B4B     		ldr	r3, .L1101+76
 9577 061c 0022     		movs	r2, #0
 9578 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9579 0620 ABF10900 		sub	r0, fp, #9
 9580              	.LVL1091:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9581              		.loc 1 975 7 is_stmt 0 view .LVU3099
 9582 0624 FFF7FEFF 		bl	set_decimal
 9583              	.LVL1092:
 9584 0628 5D46     		mov	r5, fp
 9585 062a 88E7     		b	.L915
 9586              	.LVL1093:
ARM GAS  /tmp/ccZMW3We.s 			page 270


 9587              	.L906:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9588              		.loc 1 950 10 is_stmt 1 view .LVU3100
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9589              		.loc 1 950 3 is_stmt 0 view .LVU3101
 9590 062c BCF1000F 		cmp	ip, #0
 9591 0630 BBD0     		beq	.L907
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9592              		.loc 1 910 5 view .LVU3102
 9593 0632 CB46     		mov	fp, r9
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9594              		.loc 1 887 6 view .LVU3103
 9595 0634 4FF0FF33 		mov	r3, #-1
 9596 0638 74E7     		b	.L919
 9597              	.L1102:
 9598 063a 00BF     		.align	2
 9599              	.L1101:
 9600 063c 0C000000 		.word	.LANCHOR17+12
 9601 0640 00000000 		.word	DispMsg
 9602 0644 08000000 		.word	.LC23
 9603 0648 18000000 		.word	.LC24
 9604 064c 00000000 		.word	LastDisplayedNumber
 9605 0650 34000000 		.word	.LC25
 9606 0654 00000000 		.word	LastDisplayedExponent
 9607 0658 00000000 		.word	.LANCHOR19
 9608 065c AC000000 		.word	.LC42
 9609 0660 00000000 		.word	ShowRPN
 9610 0664 56040000 		.word	argcmds+1110
 9611 0668 00000000 		.word	.LANCHOR21
 9612 066c 00000000 		.word	.LANCHOR23
 9613 0670 B4000000 		.word	.LC28
 9614 0674 00000000 		.word	argcmds
 9615 0678 00000000 		.word	.LC20
 9616 067c 04000000 		.word	.LC21
 9617 0680 00000000 		.word	.LANCHOR0
 9618 0684 BC000000 		.word	.LC27
 9619 0688 00000000 		.word	.LANCHOR1
 9620 068c 00000000 		.word	DispPlot
 9621 0690 00000000 		.word	ShowRegister
 9622              	.LVL1094:
 9623              	.L1067:
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9624              		.loc 1 887 6 view .LVU3104
 9625              	.LBE485:
 9626              	.LBE512:
 9627              	.LBB513:
2327:src/display.c **** 		char b2[16];
 9628              		.loc 1 2327 3 is_stmt 1 view .LVU3105
2327:src/display.c **** 		char b2[16];
 9629              		.loc 1 2327 44 is_stmt 0 view .LVU3106
 9630 0694 CC4B     		ldr	r3, .L1103
 9631 0696 1B68     		ldr	r3, [r3]
 9632 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
2327:src/display.c **** 		char b2[16];
 9633              		.loc 1 2327 21 view .LVU3107
 9634 069c C0F34610 		ubfx	r0, r0, #5, #7
 9635 06a0 FFF7FEFF 		bl	current_catalogue
ARM GAS  /tmp/ccZMW3We.s 			page 271


 9636              	.LVL1095:
2331:src/display.c **** 		p = catcmd(op, b2);
 9637              		.loc 1 2331 8 view .LVU3108
 9638 06a4 C949     		ldr	r1, .L1103+4
2327:src/display.c **** 		char b2[16];
 9639              		.loc 1 2327 21 view .LVU3109
 9640 06a6 8246     		mov	r10, r0
 9641              	.LVL1096:
2328:src/display.c **** 		const char *p;
 9642              		.loc 1 2328 3 is_stmt 1 view .LVU3110
2329:src/display.c **** 
 9643              		.loc 1 2329 3 view .LVU3111
2331:src/display.c **** 		p = catcmd(op, b2);
 9644              		.loc 1 2331 3 view .LVU3112
2331:src/display.c **** 		p = catcmd(op, b2);
 9645              		.loc 1 2331 8 is_stmt 0 view .LVU3113
 9646 06a8 4046     		mov	r0, r8
 9647              	.LVL1097:
2331:src/display.c **** 		p = catcmd(op, b2);
 9648              		.loc 1 2331 8 view .LVU3114
 9649 06aa FFF7FEFF 		bl	scopy
 9650              	.LVL1098:
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9651              		.loc 1 2332 7 view .LVU3115
 9652 06ae 08A9     		add	r1, sp, #32
2331:src/display.c **** 		p = catcmd(op, b2);
 9653              		.loc 1 2331 8 view .LVU3116
 9654 06b0 0646     		mov	r6, r0
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9655              		.loc 1 2332 7 view .LVU3117
 9656 06b2 5046     		mov	r0, r10
 9657              	.LVL1099:
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9658              		.loc 1 2332 3 is_stmt 1 view .LVU3118
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9659              		.loc 1 2332 7 is_stmt 0 view .LVU3119
 9660 06b4 FFF7FEFF 		bl	catcmd
 9661              	.LVL1100:
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9662              		.loc 1 2333 6 view .LVU3120
 9663 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9664 06ba 142B     		cmp	r3, #20
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9665              		.loc 1 2332 7 view .LVU3121
 9666 06bc 0146     		mov	r1, r0
 9667              	.LVL1101:
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9668              		.loc 1 2333 3 is_stmt 1 view .LVU3122
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9669              		.loc 1 2333 6 is_stmt 0 view .LVU3123
 9670 06be 05D0     		beq	.L833
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9671              		.loc 1 2333 28 discriminator 1 view .LVU3124
 9672 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9673 06c2 9807     		lsls	r0, r3, #30
 9674              	.LVL1102:
2334:src/display.c **** 		bp = scopy(bp, p);
ARM GAS  /tmp/ccZMW3We.s 			page 272


 9675              		.loc 1 2334 4 is_stmt 1 discriminator 1 view .LVU3125
2334:src/display.c **** 		bp = scopy(bp, p);
 9676              		.loc 1 2334 10 is_stmt 0 discriminator 1 view .LVU3126
 9677 06c4 44BF     		itt	mi
 9678 06c6 1423     		movmi	r3, #20
 9679 06c8 06F8013B 		strbmi	r3, [r6], #1
 9680              	.LVL1103:
 9681              	.L833:
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9682              		.loc 1 2335 3 is_stmt 1 view .LVU3127
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9683              		.loc 1 2335 8 is_stmt 0 view .LVU3128
 9684 06cc 3046     		mov	r0, r6
 9685 06ce FFF7FEFF 		bl	scopy
 9686              	.LVL1104:
2336:src/display.c **** 			// State2.disp_small = 1;
 9687              		.loc 1 2336 3 is_stmt 1 view .LVU3129
2336:src/display.c **** 			// State2.disp_small = 1;
 9688              		.loc 1 2336 6 is_stmt 0 view .LVU3130
 9689 06d2 A9F11003 		sub	r3, r9, #16
 9690 06d6 012B     		cmp	r3, #1
 9691 06d8 5DD9     		bls	.L1082
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9692              		.loc 1 2343 10 is_stmt 1 view .LVU3131
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9693              		.loc 1 2343 14 is_stmt 0 view .LVU3132
 9694 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9695              		.loc 1 2343 13 view .LVU3133
 9696 06dc 5906     		lsls	r1, r3, #25
 9697 06de 7FF577AE 		bpl	.L838
2344:src/display.c **** 				decNumber x, r;
 9698              		.loc 1 2344 4 is_stmt 1 view .LVU3134
2344:src/display.c **** 				decNumber x, r;
 9699              		.loc 1 2344 7 is_stmt 0 view .LVU3135
 9700 06e2 B9F1120F 		cmp	r9, #18
 9701 06e6 00F00682 		beq	.L1083
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9702              		.loc 1 2364 11 is_stmt 1 view .LVU3136
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9703              		.loc 1 2364 44 is_stmt 0 view .LVU3137
 9704 06ea AAF58873 		sub	r3, r10, #272
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9705              		.loc 1 2364 14 view .LVU3138
 9706 06ee 0D2B     		cmp	r3, #13
 9707 06f0 3FF66EAE 		bhi	.L838
 9708              	.LBB501:
2365:src/display.c **** 				copyreg(&z, x);
 9709              		.loc 1 2365 5 is_stmt 1 discriminator 3 view .LVU3139
2365:src/display.c **** 				copyreg(&z, x);
 9710              		.loc 1 2365 24 is_stmt 0 discriminator 3 view .LVU3140
 9711 06f4 B64B     		ldr	r3, .L1103+8
 9712 06f6 1E68     		ldr	r6, [r3]
 9713              	.LVL1105:
2366:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
 9714              		.loc 1 2366 5 is_stmt 1 discriminator 3 view .LVU3141
 9715 06f8 15A8     		add	r0, sp, #84
ARM GAS  /tmp/ccZMW3We.s 			page 273


 9716 06fa 3146     		mov	r1, r6
 9717 06fc FFF7FEFF 		bl	copyreg
 9718              	.LVL1106:
2367:src/display.c **** 				set_x(x, CNULL, is_dblmode());
 9719              		.loc 1 2367 5 discriminator 3 view .LVU3142
 9720 0700 5FFA8AF0 		uxtb	r0, r10
 9721 0704 FFF7FEFF 		bl	sigma_val
 9722              	.LVL1107:
2368:src/display.c **** 				copyreg(x, &z);
 9723              		.loc 1 2368 5 discriminator 3 view .LVU3143
 9724 0708 FFF7FEFF 		bl	is_dblmode
 9725              	.LVL1108:
 9726 070c 0021     		movs	r1, #0
 9727 070e 0246     		mov	r2, r0
 9728 0710 3046     		mov	r0, r6
 9729 0712 FFF7FEFF 		bl	set_x
 9730              	.LVL1109:
2369:src/display.c **** 				skip = 1;
 9731              		.loc 1 2369 5 discriminator 3 view .LVU3144
 9732 0716 15A9     		add	r1, sp, #84
 9733 0718 3046     		mov	r0, r6
 9734 071a FFF7FEFF 		bl	copyreg
 9735              	.LVL1110:
2370:src/display.c **** 			}
 9736              		.loc 1 2370 5 discriminator 3 view .LVU3145
2370:src/display.c **** 			}
 9737              		.loc 1 2370 5 is_stmt 0 discriminator 3 view .LVU3146
 9738              	.LBE501:
2373:src/display.c **** 	} else if (State2.multi) {
 9739              		.loc 1 2373 3 is_stmt 1 discriminator 3 view .LVU3147
 9740 071e 1EA8     		add	r0, sp, #120
 9741 0720 FFF7FEFF 		bl	set_status
 9742              	.LVL1111:
2373:src/display.c **** 	} else if (State2.multi) {
 9743              		.loc 1 2373 3 is_stmt 0 discriminator 3 view .LVU3148
 9744              	.LBE513:
2457:src/display.c **** nostk:	show_flags();
 9745              		.loc 1 2457 2 is_stmt 1 discriminator 3 view .LVU3149
 9746 0724 FFF7FEFF 		bl	show_stack
 9747              	.LVL1112:
2458:src/display.c **** 	if (!skip) {
 9748              		.loc 1 2458 8 discriminator 3 view .LVU3150
 9749 0728 FFF7FEFF 		bl	show_flags
 9750              	.LVL1113:
2459:src/display.c **** 		if (State2.runmode) {
 9751              		.loc 1 2459 2 discriminator 3 view .LVU3151
 9752              	.L837:
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9753              		.loc 1 2504 2 view .LVU3152
 9754 072c FFF7FEFF 		bl	set_annunciators
 9755              	.LVL1114:
2505:src/display.c **** 		ShowRPN = 0;
 9756              		.loc 1 2505 2 view .LVU3153
 9757 0730 A84E     		ldr	r6, .L1103+12
 9758 0732 DFF8BC82 		ldr	r8, .L1103+40
 9759 0736 DFF8BC92 		ldr	r9, .L1103+44
 9760 073a 27E5     		b	.L815
ARM GAS  /tmp/ccZMW3We.s 			page 274


 9761              	.LVL1115:
 9762              	.L1068:
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9763              		.loc 1 2375 3 view .LVU3154
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9764              		.loc 1 2375 41 is_stmt 0 view .LVU3155
 9765 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9766 073e A649     		ldr	r1, .L1103+16
 9767 0740 0423     		movs	r3, #4
 9768 0742 03EB0213 		add	r3, r3, r2, lsl #4
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9769              		.loc 1 2375 8 view .LVU3156
 9770 0746 1944     		add	r1, r1, r3
 9771 0748 4046     		mov	r0, r8
 9772 074a 2722     		movs	r2, #39
 9773 074c FFF7FEFF 		bl	scopy_char
 9774              	.LVL1116:
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9775              		.loc 1 2376 6 view .LVU3157
 9776 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9777              	.LVL1117:
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9778              		.loc 1 2376 3 is_stmt 1 view .LVU3158
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9779              		.loc 1 2376 6 is_stmt 0 view .LVU3159
 9780 0752 002B     		cmp	r3, #0
 9781 0754 3FF44AAD 		beq	.L1050
2377:src/display.c **** 			if (State2.numdigit > 1)
 9782              		.loc 1 2377 4 is_stmt 1 view .LVU3160
 9783              	.LVL1118:
2377:src/display.c **** 			if (State2.numdigit > 1)
 9784              		.loc 1 2377 12 is_stmt 0 view .LVU3161
 9785 0758 2389     		ldrh	r3, [r4, #8]
 9786 075a 0370     		strb	r3, [r0]
2378:src/display.c **** 				*bp++ = State2.digval2;
 9787              		.loc 1 2378 4 is_stmt 1 view .LVU3162
2378:src/display.c **** 				*bp++ = State2.digval2;
 9788              		.loc 1 2378 7 is_stmt 0 view .LVU3163
 9789 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9790 075e 012B     		cmp	r3, #1
2379:src/display.c **** 		}
 9791              		.loc 1 2379 5 is_stmt 1 view .LVU3164
 9792              	.LVL1119:
2379:src/display.c **** 		}
 9793              		.loc 1 2379 19 is_stmt 0 view .LVU3165
 9794 0760 84BF     		itt	hi
 9795 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2379:src/display.c **** 		}
 9796              		.loc 1 2379 11 view .LVU3166
 9797 0764 4370     		strbhi	r3, [r0, #1]
 9798 0766 41E5     		b	.L1050
 9799              	.LVL1120:
 9800              	.L949:
 9801              	.LBB514:
 9802              	.LBB496:
2494:src/display.c **** 			  while(*b) {
 9803              		.loc 1 2494 8 view .LVU3167
ARM GAS  /tmp/ccZMW3We.s 			page 275


 9804 0768 5A1C     		adds	r2, r3, #1
 9805 076a C2E5     		b	.L930
 9806              	.LVL1121:
 9807              	.L1080:
2494:src/display.c **** 			  while(*b) {
 9808              		.loc 1 2494 8 view .LVU3168
 9809              	.LBE496:
 9810              	.LBE514:
 9811              	.LBB515:
 9812              	.LBB486:
1028:src/display.c **** 			// set_exp() takes care of setting the exponent sign
 9813              		.loc 1 1028 4 is_stmt 1 view .LVU3169
1033:src/display.c **** #  endif
 9814              		.loc 1 1033 4 view .LVU3170
 9815 076c 0AF10100 		add	r0, r10, #1
 9816              	.LVL1122:
1033:src/display.c **** #  endif
 9817              		.loc 1 1033 4 is_stmt 0 view .LVU3171
 9818 0770 FFF7FEFF 		bl	s_to_i
 9819              	.LVL1123:
1033:src/display.c **** #  endif
 9820              		.loc 1 1033 4 view .LVU3172
 9821 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9822 0778 2D2B     		cmp	r3, #45
 9823 077a 0CBF     		ite	eq
 9824 077c 0621     		moveq	r1, #6
 9825 077e 0421     		movne	r1, #4
 9826 0780 0022     		movs	r2, #0
 9827 0782 FFF7FEFF 		bl	set_exp
 9828              	.LVL1124:
 9829 0786 15E7     		b	.L1057
 9830              	.LVL1125:
 9831              	.L1081:
1033:src/display.c **** #  endif
 9832              		.loc 1 1033 4 view .LVU3173
 9833              	.LBE486:
 9834              	.LBE515:
2301:src/display.c **** 			*bp++ = '_';
 9835              		.loc 1 2301 4 is_stmt 1 view .LVU3174
2301:src/display.c **** 			*bp++ = '_';
 9836              		.loc 1 2301 10 is_stmt 0 view .LVU3175
 9837 0788 1122     		movs	r2, #17
 9838 078a 89E6     		b	.L1049
 9839              	.LVL1126:
 9840              	.L1077:
 9841              	.LBB516:
 9842              	.LBB487:
 893:src/display.c **** #endif
 9843              		.loc 1 893 6 view .LVU3176
 9844 078c 8146     		mov	r9, r0
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9845              		.loc 1 910 5 view .LVU3177
 9846 078e 8346     		mov	fp, r0
 9847              	.LBB480:
 946:src/display.c **** 		}
 9848              		.loc 1 946 16 view .LVU3178
 9849 0790 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/ccZMW3We.s 			page 276


 9850              	.LVL1127:
 946:src/display.c **** 		}
 9851              		.loc 1 946 16 view .LVU3179
 9852 0794 C6E6     		b	.L919
 9853              	.LVL1128:
 9854              	.L1082:
 946:src/display.c **** 		}
 9855              		.loc 1 946 16 view .LVU3180
 9856              	.LBE480:
 9857              	.LBE487:
 9858              	.LBE516:
 9859              	.LBB517:
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9860              		.loc 1 2338 4 is_stmt 1 view .LVU3181
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9861              		.loc 1 2338 7 is_stmt 0 view .LVU3182
 9862 0796 BAF5274F 		cmp	r10, #42752
 9863 079a 00F09C81 		beq	.L835
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9864              		.loc 1 2338 39 discriminator 1 view .LVU3183
 9865 079e BAF5284F 		cmp	r10, #43008
 9866 07a2 00F09881 		beq	.L835
2341:src/display.c **** 			skip = 1;
 9867              		.loc 1 2341 5 is_stmt 1 view .LVU3184
2341:src/display.c **** 			skip = 1;
 9868              		.loc 1 2341 11 is_stmt 0 view .LVU3185
 9869 07a6 0AF07F00 		and	r0, r10, #127
 9870 07aa 0021     		movs	r1, #0
 9871 07ac FFF7FEFF 		bl	get_const
 9872              	.LVL1129:
2341:src/display.c **** 			skip = 1;
 9873              		.loc 1 2341 5 view .LVU3186
 9874 07b0 0022     		movs	r2, #0
 9875              	.LVL1130:
 9876              	.L1053:
 9877              	.LBB502:
2362:src/display.c **** 				skip = 1;
 9878              		.loc 1 2362 5 discriminator 1 view .LVU3187
 9879 07b2 1146     		mov	r1, r2
 9880 07b4 FFF7FEFF 		bl	set_x
 9881              	.LVL1131:
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9882              		.loc 1 2363 5 is_stmt 1 discriminator 1 view .LVU3188
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9883              		.loc 1 2363 5 is_stmt 0 discriminator 1 view .LVU3189
 9884              	.LBE502:
2373:src/display.c **** 	} else if (State2.multi) {
 9885              		.loc 1 2373 3 is_stmt 1 discriminator 1 view .LVU3190
 9886 07b8 1EA8     		add	r0, sp, #120
 9887 07ba FFF7FEFF 		bl	set_status
 9888              	.LVL1132:
 9889              	.L1054:
2373:src/display.c **** 	} else if (State2.multi) {
 9890              		.loc 1 2373 3 is_stmt 0 discriminator 1 view .LVU3191
 9891              	.LBE517:
2457:src/display.c **** nostk:	show_flags();
 9892              		.loc 1 2457 2 is_stmt 1 discriminator 1 view .LVU3192
ARM GAS  /tmp/ccZMW3We.s 			page 277


 9893 07be FFF7FEFF 		bl	show_stack
 9894              	.LVL1133:
2458:src/display.c **** 	if (!skip) {
 9895              		.loc 1 2458 8 discriminator 1 view .LVU3193
 9896 07c2 FFF7FEFF 		bl	show_flags
 9897              	.LVL1134:
2459:src/display.c **** 		if (State2.runmode) {
 9898              		.loc 1 2459 2 discriminator 1 view .LVU3194
 9899 07c6 B1E7     		b	.L837
 9900              	.LVL1135:
 9901              	.L946:
 9902              	.LBB518:
 9903              	.LBB488:
 9904              	.LBB481:
 930:src/display.c **** 				if (gotdot <= j) {
 9905              		.loc 1 930 7 is_stmt 0 view .LVU3195
 9906 07c8 4FF0090B 		mov	fp, #9
 9907              	.LVL1136:
 9908              	.L911:
 943:src/display.c **** 				overflow_to_left = 1;
 9909              		.loc 1 943 5 is_stmt 1 view .LVU3196
 9910 07cc 3C21     		movs	r1, #60
 9911 07ce 0020     		movs	r0, #0
 9912 07d0 FFF7FEFF 		bl	set_dig
 9913              	.LVL1137:
 944:src/display.c **** 			}
 9914              		.loc 1 944 5 view .LVU3197
 944:src/display.c **** 			}
 9915              		.loc 1 944 5 is_stmt 0 view .LVU3198
 9916 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 944:src/display.c **** 			}
 9917              		.loc 1 944 5 view .LVU3199
 9918              	.LBE481:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9919              		.loc 1 950 10 is_stmt 1 view .LVU3200
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9920              		.loc 1 950 3 is_stmt 0 view .LVU3201
 9921 07d8 0023     		movs	r3, #0
 9922 07da BCF1000F 		cmp	ip, #0
 9923 07de 7FF49FAE 		bne	.L940
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9924              		.loc 1 950 3 view .LVU3202
 9925 07e2 E7E6     		b	.L1057
 9926              	.LVL1138:
 9927              	.L1070:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9928              		.loc 1 950 3 view .LVU3203
 9929              	.LBE488:
 9930              	.LBE518:
2386:src/display.c **** 		skip = 1;
 9931              		.loc 1 2386 3 is_stmt 1 view .LVU3204
 9932              	.LBB519:
 9933              	.LBI519:
2092:src/display.c **** 	char buf[16];
 9934              		.loc 1 2092 13 view .LVU3205
 9935              	.LBB520:
2093:src/display.c **** 	unsigned short int pc = State2.digval;
ARM GAS  /tmp/ccZMW3We.s 			page 278


 9936              		.loc 1 2093 2 view .LVU3206
2094:src/display.c **** 	unsigned int op = getprog(pc);
 9937              		.loc 1 2094 2 view .LVU3207
2094:src/display.c **** 	unsigned int op = getprog(pc);
 9938              		.loc 1 2094 21 is_stmt 0 view .LVU3208
 9939 07e4 B4F80890 		ldrh	r9, [r4, #8]
 9940              	.LVL1139:
2095:src/display.c **** 	int n = nLIB(pc);
 9941              		.loc 1 2095 2 is_stmt 1 view .LVU3209
2100:src/display.c **** #ifndef REALBUILD
 9942              		.loc 1 2100 27 is_stmt 0 view .LVU3210
 9943 07e8 DFF80C82 		ldr	r8, .L1103+48
 9944              	.LVL1140:
2102:src/display.c **** #endif
 9945              		.loc 1 2102 41 view .LVU3211
 9946 07ec 7B4F     		ldr	r7, .L1103+20
2095:src/display.c **** 	int n = nLIB(pc);
 9947              		.loc 1 2095 20 view .LVU3212
 9948 07ee 4846     		mov	r0, r9
 9949 07f0 FFF7FEFF 		bl	getprog
 9950              	.LVL1141:
 9951 07f4 4FEA9936 		lsr	r6, r9, #14
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9952              		.loc 1 2099 2 view .LVU3213
 9953 07f8 15A9     		add	r1, sp, #84
2095:src/display.c **** 	int n = nLIB(pc);
 9954              		.loc 1 2095 20 view .LVU3214
 9955 07fa 8246     		mov	r10, r0
 9956              	.LVL1142:
2096:src/display.c **** 	unsigned short int lblpc;
 9957              		.loc 1 2096 2 is_stmt 1 view .LVU3215
2097:src/display.c **** 
 9958              		.loc 1 2097 2 view .LVU3216
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9959              		.loc 1 2099 2 view .LVU3217
2100:src/display.c **** #ifndef REALBUILD
 9960              		.loc 1 2100 27 is_stmt 0 view .LVU3218
 9961 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9962              		.loc 1 2099 2 view .LVU3219
 9963 0800 FFF7FEFF 		bl	prt
 9964              	.LVL1143:
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9965              		.loc 1 2099 2 view .LVU3220
 9966 0804 FFF7FEFF 		bl	set_status
 9967              	.LVL1144:
2100:src/display.c **** #ifndef REALBUILD
 9968              		.loc 1 2100 2 is_stmt 1 view .LVU3221
 9969 0808 08EB0600 		add	r0, r8, r6
 9970 080c 0021     		movs	r1, #0
 9971 080e FFF7FEFF 		bl	set_digits_string
 9972              	.LVL1145:
2102:src/display.c **** #endif
 9973              		.loc 1 2102 2 view .LVU3222
 9974 0812 7348     		ldr	r0, .L1103+24
 9975 0814 07EB4601 		add	r1, r7, r6, lsl #1
 9976 0818 FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccZMW3We.s 			page 279


 9977              	.LVL1146:
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9978              		.loc 1 2105 2 view .LVU3223
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9979              		.loc 1 2105 5 is_stmt 0 view .LVU3224
 9980 081c 1AF4704F 		tst	r10, #61440
 9981 0820 CDD0     		beq	.L1054
2106:src/display.c **** 		if (lblpc != pc) {
 9982              		.loc 1 2106 3 is_stmt 1 view .LVU3225
2106:src/display.c **** 		if (lblpc != pc) {
 9983              		.loc 1 2106 11 is_stmt 0 view .LVU3226
 9984 0822 5046     		mov	r0, r10
 9985 0824 0021     		movs	r1, #0
 9986 0826 FFF7FEFF 		bl	findmultilbl
 9987              	.LVL1147:
2106:src/display.c **** 		if (lblpc != pc) {
 9988              		.loc 1 2106 9 view .LVU3227
 9989 082a 86B2     		uxth	r6, r0
 9990              	.LVL1148:
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9991              		.loc 1 2107 3 is_stmt 1 view .LVU3228
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9992              		.loc 1 2107 6 is_stmt 0 view .LVU3229
 9993 082c B145     		cmp	r9, r6
2106:src/display.c **** 		if (lblpc != pc) {
 9994              		.loc 1 2106 11 view .LVU3230
 9995 082e 8246     		mov	r10, r0
 9996              	.LVL1149:
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9997              		.loc 1 2107 6 view .LVU3231
 9998 0830 C5D0     		beq	.L1054
2108:src/display.c **** 			n = nLIB(lblpc);
 9999              		.loc 1 2108 4 is_stmt 1 view .LVU3232
 10000 0832 6C48     		ldr	r0, .L1103+28
 10001 0834 3F21     		movs	r1, #63
 10002 0836 FFF7FEFF 		bl	set_digits_string
 10003              	.LVL1150:
2109:src/display.c **** 			if (n == REGION_RAM)
 10004              		.loc 1 2109 4 view .LVU3233
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10005              		.loc 1 2110 4 view .LVU3234
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10006              		.loc 1 2110 7 is_stmt 0 view .LVU3235
 10007 083a B60B     		lsrs	r6, r6, #14
 10008              	.LVL1151:
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10009              		.loc 1 2110 7 view .LVU3236
 10010 083c 40F07D81 		bne	.L866
2111:src/display.c **** 			else {
 10011              		.loc 1 2111 5 is_stmt 1 view .LVU3237
 10012 0840 3246     		mov	r2, r6
 10013 0842 1FFA8AF0 		uxth	r0, r10
 10014 0846 0121     		movs	r1, #1
 10015 0848 FFF7FEFF 		bl	set_exp
 10016              	.LVL1152:
 10017 084c B7E7     		b	.L1054
 10018              	.LVL1153:
ARM GAS  /tmp/ccZMW3We.s 			page 280


 10019              	.L1069:
2111:src/display.c **** 			else {
 10020              		.loc 1 2111 5 is_stmt 0 view .LVU3238
 10021              	.LBE520:
 10022              	.LBE519:
2383:src/display.c **** 		skip = 1;
 10023              		.loc 1 2383 3 is_stmt 1 view .LVU3239
 10024              	.LBB522:
 10025              	.LBI522:
1990:src/display.c **** 	int i, n;
 10026              		.loc 1 1990 13 view .LVU3240
 10027              	.LBB523:
1991:src/display.c **** 	int j = SEGS_EXP_BASE;
 10028              		.loc 1 1991 2 view .LVU3241
1992:src/display.c **** 	const int status = State2.status - 3;
 10029              		.loc 1 1992 2 view .LVU3242
1993:src/display.c **** 	char buf[16], *p = buf;
 10030              		.loc 1 1993 2 view .LVU3243
1997:src/display.c **** 		set_status("Free:");
 10031              		.loc 1 1997 5 is_stmt 0 view .LVU3244
 10032 084e 012B     		cmp	r3, #1
1993:src/display.c **** 	char buf[16], *p = buf;
 10033              		.loc 1 1993 12 view .LVU3245
 10034 0850 A3F10307 		sub	r7, r3, #3
 10035              	.LVL1154:
1994:src/display.c **** 	unsigned int pc;
 10036              		.loc 1 1994 2 is_stmt 1 view .LVU3246
1995:src/display.c **** 
 10037              		.loc 1 1995 2 view .LVU3247
1997:src/display.c **** 		set_status("Free:");
 10038              		.loc 1 1997 2 view .LVU3248
1997:src/display.c **** 		set_status("Free:");
 10039              		.loc 1 1997 5 is_stmt 0 view .LVU3249
 10040 0854 00F01782 		beq	.L1084
2005:src/display.c **** 		/* Top line */
 10041              		.loc 1 2005 7 is_stmt 1 view .LVU3250
2005:src/display.c **** 		/* Top line */
 10042              		.loc 1 2005 10 is_stmt 0 view .LVU3251
 10043 0858 7B1C     		adds	r3, r7, #1
 10044 085a 00F07782 		beq	.L1085
 10045              	.LBB524:
2022:src/display.c **** 		int end;
 10046              		.loc 1 2022 3 is_stmt 1 view .LVU3252
2023:src/display.c **** 		int group = 10;
 10047              		.loc 1 2023 3 view .LVU3253
2024:src/display.c **** 		int start = 0;
 10048              		.loc 1 2024 3 view .LVU3254
 10049              	.LVL1155:
2025:src/display.c **** 		
 10050              		.loc 1 2025 3 view .LVU3255
2027:src/display.c **** 			base = 10 * status;
 10051              		.loc 1 2027 3 view .LVU3256
2027:src/display.c **** 			base = 10 * status;
 10052              		.loc 1 2027 6 is_stmt 0 view .LVU3257
 10053 085e 092F     		cmp	r7, #9
 10054 0860 40F32C82 		ble	.L1086
2037:src/display.c **** 			base = regX_idx;
ARM GAS  /tmp/ccZMW3We.s 			page 281


 10055              		.loc 1 2037 8 is_stmt 1 view .LVU3258
2037:src/display.c **** 			base = regX_idx;
 10056              		.loc 1 2037 11 is_stmt 0 view .LVU3259
 10057 0864 0A2F     		cmp	r7, #10
 10058 0866 00F0FE81 		beq	.L1087
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10059              		.loc 1 2045 4 is_stmt 1 view .LVU3260
 10060              	.LVL1156:
2046:src/display.c **** 			set_status("FL.00-.15");
 10061              		.loc 1 2046 4 view .LVU3261
2047:src/display.c **** 		}
 10062              		.loc 1 2047 4 view .LVU3262
 10063 086a 5F48     		ldr	r0, .L1103+32
 10064 086c 4FF00A0A 		mov	r10, #10
 10065 0870 FFF7FEFF 		bl	set_status
 10066              	.LVL1157:
2024:src/display.c **** 		int start = 0;
 10067              		.loc 1 2024 7 is_stmt 0 view .LVU3263
 10068 0874 5646     		mov	r6, r10
2025:src/display.c **** 		
 10069              		.loc 1 2025 7 view .LVU3264
 10070 0876 4FF0000B 		mov	fp, #0
2047:src/display.c **** 		}
 10071              		.loc 1 2047 4 view .LVU3265
 10072 087a 0222     		movs	r2, #2
 10073 087c 4FF00908 		mov	r8, #9
 10074              	.LVL1158:
2047:src/display.c **** 		}
 10075              		.loc 1 2047 4 view .LVU3266
 10076 0880 0720     		movs	r0, #7
2046:src/display.c **** 			set_status("FL.00-.15");
 10077              		.loc 1 2046 8 view .LVU3267
 10078 0882 4FF07F09 		mov	r9, #127
 10079              	.LVL1159:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10080              		.loc 1 2045 9 view .LVU3268
 10081 0886 7027     		movs	r7, #112
 10082              	.LVL1160:
 10083              	.L852:
2049:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
 10084              		.loc 1 2049 3 is_stmt 1 view .LVU3269
2050:src/display.c **** 		j += SEGS_PER_DIGIT;
 10085              		.loc 1 2050 3 view .LVU3270
 10086              	.LBB525:
 10087              	.LBI525:
 337:src/display.c **** 	if (res) {
 10088              		.loc 1 337 14 view .LVU3271
 10089              	.LBB526:
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10090              		.loc 1 338 2 view .LVU3272
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10091              		.loc 1 341 3 view .LVU3273
 10092 0888 0192     		str	r2, [sp, #4]
 10093 088a FFF7FEFF 		bl	set_dot
 10094              	.LVL1161:
 342:src/display.c **** 			set_dot(posn+8);
 10095              		.loc 1 342 3 view .LVU3274
ARM GAS  /tmp/ccZMW3We.s 			page 282


 10096              	.LBB527:
 10097              	.LBI527:
 337:src/display.c **** 	if (res) {
 10098              		.loc 1 337 14 view .LVU3275
 10099              	.LBB528:
 345:src/display.c **** #endif
 10100              		.loc 1 345 2 view .LVU3276
 345:src/display.c **** #endif
 10101              		.loc 1 345 35 is_stmt 0 view .LVU3277
 10102 088e 019A     		ldr	r2, [sp, #4]
 10103 0890 534B     		ldr	r3, .L1103+24
 10104 0892 2E21     		movs	r1, #46
 10105 0894 9954     		strb	r1, [r3, r2]
 348:src/display.c **** }
 10106              		.loc 1 348 2 is_stmt 1 view .LVU3278
 10107              	.LVL1162:
 348:src/display.c **** }
 10108              		.loc 1 348 2 is_stmt 0 view .LVU3279
 10109              	.LBE528:
 10110              	.LBE527:
 348:src/display.c **** }
 10111              		.loc 1 348 2 is_stmt 1 view .LVU3280
 348:src/display.c **** }
 10112              		.loc 1 348 2 is_stmt 0 view .LVU3281
 10113              	.LBE526:
 10114              	.LBE525:
2051:src/display.c **** 		for (i = start; i < group + start; i++) {
 10115              		.loc 1 2051 3 is_stmt 1 view .LVU3282
2052:src/display.c **** 			int k = i + base - start;
 10116              		.loc 1 2052 3 view .LVU3283
2052:src/display.c **** 			int k = i + base - start;
 10117              		.loc 1 2052 19 view .LVU3284
 10118 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10119 089a D319     		adds	r3, r2, r7
 10120 089c 0293     		str	r3, [sp, #8]
 10121 089e A7EB0B03 		sub	r3, r7, fp
 10122 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10123              	.LBB529:
 10124              	.LBB530:
 10125              	.LBB531:
 10126              	.LBB532:
 10127              	.LBB533:
 345:src/display.c **** #endif
 10128              		.loc 1 345 35 is_stmt 0 view .LVU3285
 10129 08a6 0191     		str	r1, [sp, #4]
 10130 08a8 3E44     		add	r6, r6, r7
 10131              	.LVL1163:
 10132              	.L857:
 345:src/display.c **** #endif
 10133              		.loc 1 345 35 view .LVU3286
 10134              	.LBE533:
 10135              	.LBE532:
 10136              	.LBE531:
 10137              	.LBE530:
2053:src/display.c **** 			int l = get_user_flag(k);
 10138              		.loc 1 2053 4 is_stmt 1 view .LVU3287
2054:src/display.c **** 			k += group;
ARM GAS  /tmp/ccZMW3We.s 			page 283


 10139              		.loc 1 2054 4 view .LVU3288
2054:src/display.c **** 			k += group;
 10140              		.loc 1 2054 12 is_stmt 0 view .LVU3289
 10141 08aa 039B     		ldr	r3, [sp, #12]
 10142 08ac 03EB0B00 		add	r0, r3, fp
 10143 08b0 FFF7FEFF 		bl	get_user_flag
 10144              	.LVL1164:
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10145              		.loc 1 2056 7 view .LVU3290
 10146 08b4 4E45     		cmp	r6, r9
2054:src/display.c **** 			k += group;
 10147              		.loc 1 2054 12 view .LVU3291
 10148 08b6 0546     		mov	r5, r0
 10149              	.LVL1165:
2055:src/display.c **** 			if (end >= k) {
 10150              		.loc 1 2055 4 is_stmt 1 view .LVU3292
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10151              		.loc 1 2056 4 view .LVU3293
2064:src/display.c **** 			if (i == 4) {
 10152              		.loc 1 2064 6 is_stmt 0 view .LVU3294
 10153 08b8 08F10907 		add	r7, r8, #9
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10154              		.loc 1 2056 7 view .LVU3295
 10155 08bc 3FDD     		ble	.L1088
 10156              	.LVL1166:
 10157              	.L854:
2062:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
 10158              		.loc 1 2062 4 is_stmt 1 view .LVU3296
 10159 08be 2946     		mov	r1, r5
 10160 08c0 4046     		mov	r0, r8
 10161 08c2 FFF7FEFF 		bl	set_dig
 10162              	.LVL1167:
2063:src/display.c **** 			j += SEGS_PER_DIGIT;
 10163              		.loc 1 2063 4 view .LVU3297
 10164              	.LBB543:
 10165              	.LBI530:
 337:src/display.c **** 	if (res) {
 10166              		.loc 1 337 14 view .LVU3298
 10167              	.LBB540:
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10168              		.loc 1 338 2 view .LVU3299
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10169              		.loc 1 341 3 view .LVU3300
 10170 08c6 08F10700 		add	r0, r8, #7
 10171 08ca FFF7FEFF 		bl	set_dot
 10172              	.LVL1168:
 342:src/display.c **** 			set_dot(posn+8);
 10173              		.loc 1 342 3 view .LVU3301
 10174              	.LBB537:
 10175              	.LBI532:
 337:src/display.c **** 	if (res) {
 10176              		.loc 1 337 14 view .LVU3302
 10177              	.LBB534:
 345:src/display.c **** #endif
 10178              		.loc 1 345 2 view .LVU3303
 345:src/display.c **** #endif
 10179              		.loc 1 345 2 is_stmt 0 view .LVU3304
ARM GAS  /tmp/ccZMW3We.s 			page 284


 10180              	.LBE534:
 10181              	.LBE537:
 10182              	.LBE540:
 10183              	.LBE543:
 10184              	.LBE529:
2052:src/display.c **** 			int k = i + base - start;
 10185              		.loc 1 2052 38 is_stmt 1 view .LVU3305
 10186              	.LBB554:
 10187              	.LBB544:
 10188              	.LBB541:
 10189              	.LBB538:
 10190              	.LBB535:
 345:src/display.c **** #endif
 10191              		.loc 1 345 27 is_stmt 0 view .LVU3306
 10192 08ce 474B     		ldr	r3, .L1103+36
 345:src/display.c **** #endif
 10193              		.loc 1 345 35 view .LVU3307
 10194 08d0 0199     		ldr	r1, [sp, #4]
 345:src/display.c **** #endif
 10195              		.loc 1 345 27 view .LVU3308
 10196 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10197 08d6 5208     		lsrs	r2, r2, #1
 345:src/display.c **** #endif
 10198              		.loc 1 345 35 view .LVU3309
 10199 08d8 414B     		ldr	r3, .L1103+24
 345:src/display.c **** #endif
 10200              		.loc 1 345 32 view .LVU3310
 10201 08da 0132     		adds	r2, r2, #1
 10202              	.LBE535:
 10203              	.LBE538:
 10204              	.LBE541:
 10205              	.LBE544:
2065:src/display.c **** 				set_dig(j, 8);
 10206              		.loc 1 2065 7 view .LVU3311
 10207 08dc BBF1040F 		cmp	fp, #4
 10208              	.LBB545:
 10209              	.LBB542:
 10210              	.LBB539:
 10211              	.LBB536:
 345:src/display.c **** #endif
 10212              		.loc 1 345 35 view .LVU3312
 10213 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 348:src/display.c **** }
 10214              		.loc 1 348 2 is_stmt 1 view .LVU3313
 10215              	.LVL1169:
 348:src/display.c **** }
 10216              		.loc 1 348 2 is_stmt 0 view .LVU3314
 10217              	.LBE536:
 10218              	.LBE539:
 348:src/display.c **** }
 10219              		.loc 1 348 2 is_stmt 1 view .LVU3315
 348:src/display.c **** }
 10220              		.loc 1 348 2 is_stmt 0 view .LVU3316
 10221              	.LBE542:
 10222              	.LBE545:
2064:src/display.c **** 			if (i == 4) {
 10223              		.loc 1 2064 4 is_stmt 1 view .LVU3317
ARM GAS  /tmp/ccZMW3We.s 			page 285


2065:src/display.c **** 				set_dig(j, 8);
 10224              		.loc 1 2065 4 view .LVU3318
 10225              	.LBE554:
2052:src/display.c **** 			int k = i + base - start;
 10226              		.loc 1 2052 39 is_stmt 0 view .LVU3319
 10227 08e4 0BF1010B 		add	fp, fp, #1
 10228              	.LVL1170:
2052:src/display.c **** 			int k = i + base - start;
 10229              		.loc 1 2052 19 is_stmt 1 view .LVU3320
 10230              	.LBB555:
2065:src/display.c **** 				set_dig(j, 8);
 10231              		.loc 1 2065 7 is_stmt 0 view .LVU3321
 10232 08e8 42D0     		beq	.L1089
2065:src/display.c **** 				set_dig(j, 8);
 10233              		.loc 1 2065 7 view .LVU3322
 10234              	.LBE555:
2052:src/display.c **** 			int k = i + base - start;
 10235              		.loc 1 2052 3 view .LVU3323
 10236 08ea D345     		cmp	fp, r10
 10237 08ec 06F10106 		add	r6, r6, #1
 10238 08f0 01D0     		beq	.L1090
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10239              		.loc 1 2045 9 view .LVU3324
 10240 08f2 B846     		mov	r8, r7
 10241 08f4 D9E7     		b	.L857
 10242              	.L1090:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10243              		.loc 1 2045 9 view .LVU3325
 10244 08f6 049D     		ldr	r5, [sp, #16]
 10245              	.LVL1171:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10246              		.loc 1 2045 9 view .LVU3326
 10247 08f8 334F     		ldr	r7, .L1103
 10248              	.LVL1172:
 10249              	.L847:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10250              		.loc 1 2045 9 view .LVU3327
 10251              	.LBE524:
2073:src/display.c **** 	pc = state_pc();
 10252              		.loc 1 2073 2 is_stmt 1 view .LVU3328
2074:src/display.c **** 	if (isXROM(pc))
 10253              		.loc 1 2074 2 view .LVU3329
2074:src/display.c **** 	if (isXROM(pc))
 10254              		.loc 1 2074 7 is_stmt 0 view .LVU3330
 10255 08fa 3B68     		ldr	r3, [r7]
2074:src/display.c **** 	if (isXROM(pc))
 10256              		.loc 1 2074 5 view .LVU3331
 10257 08fc B3F8E077 		ldrh	r7, [r3, #2016]
 10258              	.LVL1173:
2075:src/display.c **** 		pc = 1;
 10259              		.loc 1 2075 2 is_stmt 1 view .LVU3332
2075:src/display.c **** 		pc = 1;
 10260              		.loc 1 2075 6 is_stmt 0 view .LVU3333
 10261 0900 BB0B     		lsrs	r3, r7, #14
2076:src/display.c **** 	for (n=i=0; i<4; i++) {
 10262              		.loc 1 2076 6 view .LVU3334
 10263 0902 032B     		cmp	r3, #3
ARM GAS  /tmp/ccZMW3We.s 			page 286


 10264 0904 08BF     		it	eq
 10265 0906 0127     		moveq	r7, #1
 10266              	.LVL1174:
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10267              		.loc 1 2077 2 is_stmt 1 view .LVU3335
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10268              		.loc 1 2077 14 view .LVU3336
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10269              		.loc 1 2077 8 is_stmt 0 view .LVU3337
 10270 0908 4FF00009 		mov	r9, #0
 10271 090c 6426     		movs	r6, #100
2073:src/display.c **** 	pc = state_pc();
 10272              		.loc 1 2073 4 view .LVU3338
 10273 090e 4FF06C08 		mov	r8, #108
 10274              	.LVL1175:
 10275              	.L861:
2078:src/display.c **** 			if (++n == 4) {
 10276              		.loc 1 2078 3 is_stmt 1 view .LVU3339
2078:src/display.c **** 			if (++n == 4) {
 10277              		.loc 1 2078 7 is_stmt 0 view .LVU3340
 10278 0912 0222     		movs	r2, #2
 10279 0914 3146     		mov	r1, r6
 10280 0916 3846     		mov	r0, r7
 10281 0918 FFF7FEFF 		bl	find_label_from
 10282              	.LVL1176:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10283              		.loc 1 2079 4 is_stmt 1 view .LVU3341
2078:src/display.c **** 			if (++n == 4) {
 10284              		.loc 1 2078 6 is_stmt 0 view .LVU3342
 10285 091c 58B1     		cbz	r0, .L859
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10286              		.loc 1 2079 7 view .LVU3343
 10287 091e 09F10109 		add	r9, r9, #1
 10288              	.LVL1177:
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10289              		.loc 1 2083 5 is_stmt 1 view .LVU3344
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10290              		.loc 1 2079 7 is_stmt 0 view .LVU3345
 10291 0922 B9F1040F 		cmp	r9, #4
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10292              		.loc 1 2083 5 view .LVU3346
 10293 0926 A6F12301 		sub	r1, r6, #35
 10294 092a 4046     		mov	r0, r8
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10295              		.loc 1 2079 7 view .LVU3347
 10296 092c 17D0     		beq	.L1091
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10297              		.loc 1 2083 5 view .LVU3348
 10298 092e FFF7FEFF 		bl	set_dig
 10299              	.LVL1178:
2084:src/display.c **** 			}
 10300              		.loc 1 2084 5 is_stmt 1 view .LVU3349
2084:src/display.c **** 			}
 10301              		.loc 1 2084 7 is_stmt 0 view .LVU3350
 10302 0932 08F10708 		add	r8, r8, #7
 10303              	.LVL1179:
 10304              	.L859:
ARM GAS  /tmp/ccZMW3We.s 			page 287


2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10305              		.loc 1 2077 19 is_stmt 1 view .LVU3351
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10306              		.loc 1 2077 14 view .LVU3352
 10307 0936 0136     		adds	r6, r6, #1
 10308              	.LVL1180:
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10309              		.loc 1 2077 2 is_stmt 0 view .LVU3353
 10310 0938 682E     		cmp	r6, #104
 10311 093a EAD1     		bne	.L861
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10312              		.loc 1 2077 2 view .LVU3354
 10313 093c 3FE7     		b	.L1054
 10314              	.LVL1181:
 10315              	.L1088:
 10316              	.LBB558:
 10317              	.LBB556:
2057:src/display.c **** 				k += group;
 10318              		.loc 1 2057 5 is_stmt 1 view .LVU3355
2057:src/display.c **** 				k += group;
 10319              		.loc 1 2057 11 is_stmt 0 view .LVU3356
 10320 093e 3046     		mov	r0, r6
 10321              	.LVL1182:
2057:src/display.c **** 				k += group;
 10322              		.loc 1 2057 11 view .LVU3357
 10323 0940 FFF7FEFF 		bl	get_user_flag
 10324              	.LVL1183:
 10325 0944 029B     		ldr	r3, [sp, #8]
 10326 0946 03EB0B02 		add	r2, r3, fp
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10327              		.loc 1 2059 8 view .LVU3358
 10328 094a 4A45     		cmp	r2, r9
2057:src/display.c **** 				k += group;
 10329              		.loc 1 2057 7 view .LVU3359
 10330 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10331              	.LVL1184:
2058:src/display.c **** 				if (end >= k)
 10332              		.loc 1 2058 5 is_stmt 1 view .LVU3360
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10333              		.loc 1 2059 5 view .LVU3361
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10334              		.loc 1 2059 8 is_stmt 0 view .LVU3362
 10335 0950 B5DC     		bgt	.L854
2060:src/display.c **** 			}
 10336              		.loc 1 2060 6 is_stmt 1 view .LVU3363
2060:src/display.c **** 			}
 10337              		.loc 1 2060 12 is_stmt 0 view .LVU3364
 10338 0952 1046     		mov	r0, r2
 10339 0954 FFF7FEFF 		bl	get_user_flag
 10340              	.LVL1185:
2060:src/display.c **** 			}
 10341              		.loc 1 2060 8 view .LVU3365
 10342 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10343              	.LVL1186:
2060:src/display.c **** 			}
 10344              		.loc 1 2060 8 view .LVU3366
 10345 095c AFE7     		b	.L854
ARM GAS  /tmp/ccZMW3We.s 			page 288


 10346              	.LVL1187:
 10347              	.L1091:
2060:src/display.c **** 			}
 10348              		.loc 1 2060 8 view .LVU3367
 10349              	.LBE556:
 10350              	.LBE558:
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10351              		.loc 1 2080 5 is_stmt 1 view .LVU3368
 10352 095e 4C21     		movs	r1, #76
 10353 0960 7320     		movs	r0, #115
 10354              	.LVL1188:
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10355              		.loc 1 2080 5 is_stmt 0 view .LVU3369
 10356 0962 FFF7FEFF 		bl	set_dig
 10357              	.LVL1189:
2081:src/display.c **** 			} else {
 10358              		.loc 1 2081 5 is_stmt 1 view .LVU3370
 10359 0966 4C21     		movs	r1, #76
 10360 0968 7A20     		movs	r0, #122
 10361 096a FFF7FEFF 		bl	set_dig
 10362              	.LVL1190:
 10363 096e E2E7     		b	.L859
 10364              	.LVL1191:
 10365              	.L1089:
 10366              	.LBB559:
 10367              	.LBB557:
2066:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
 10368              		.loc 1 2066 5 view .LVU3371
 10369 0970 0821     		movs	r1, #8
 10370 0972 3846     		mov	r0, r7
 10371 0974 FFF7FEFF 		bl	set_dig
 10372              	.LVL1192:
2067:src/display.c **** 				j += SEGS_PER_DIGIT;
 10373              		.loc 1 2067 5 view .LVU3372
 10374              	.LBB546:
 10375              	.LBI546:
 337:src/display.c **** 	if (res) {
 10376              		.loc 1 337 14 view .LVU3373
 10377              	.LBB547:
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10378              		.loc 1 338 2 view .LVU3374
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10379              		.loc 1 341 3 view .LVU3375
 10380 0978 08F11000 		add	r0, r8, #16
 10381 097c FFF7FEFF 		bl	set_dot
 10382              	.LVL1193:
 342:src/display.c **** 			set_dot(posn+8);
 10383              		.loc 1 342 3 view .LVU3376
 10384              	.LBB548:
 10385              	.LBI548:
 337:src/display.c **** 	if (res) {
 10386              		.loc 1 337 14 view .LVU3377
 10387              	.LBB549:
 345:src/display.c **** #endif
 10388              		.loc 1 345 2 view .LVU3378
 345:src/display.c **** #endif
 10389              		.loc 1 345 27 is_stmt 0 view .LVU3379
ARM GAS  /tmp/ccZMW3We.s 			page 289


 10390 0980 1A4B     		ldr	r3, .L1103+36
 345:src/display.c **** #endif
 10391              		.loc 1 345 35 view .LVU3380
 10392 0982 0199     		ldr	r1, [sp, #4]
 345:src/display.c **** #endif
 10393              		.loc 1 345 27 view .LVU3381
 10394 0984 A3FB0723 		umull	r2, r3, r3, r7
 10395 0988 5B08     		lsrs	r3, r3, #1
 345:src/display.c **** #endif
 10396              		.loc 1 345 35 view .LVU3382
 10397 098a 154A     		ldr	r2, .L1103+24
 345:src/display.c **** #endif
 10398              		.loc 1 345 32 view .LVU3383
 10399 098c 0133     		adds	r3, r3, #1
 10400              	.LBE549:
 10401              	.LBE548:
 10402              	.LBE547:
 10403              	.LBE546:
2068:src/display.c **** 			}
 10404              		.loc 1 2068 7 view .LVU3384
 10405 098e 08F11207 		add	r7, r8, #18
 10406              	.LVL1194:
 10407              	.LBB553:
 10408              	.LBB552:
 10409              	.LBB551:
 10410              	.LBB550:
 345:src/display.c **** #endif
 10411              		.loc 1 345 35 view .LVU3385
 10412 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 348:src/display.c **** }
 10413              		.loc 1 348 2 is_stmt 1 view .LVU3386
 10414              	.LVL1195:
 348:src/display.c **** }
 10415              		.loc 1 348 2 is_stmt 0 view .LVU3387
 10416              	.LBE550:
 10417              	.LBE551:
 348:src/display.c **** }
 10418              		.loc 1 348 2 is_stmt 1 view .LVU3388
 348:src/display.c **** }
 10419              		.loc 1 348 2 is_stmt 0 view .LVU3389
 10420              	.LBE552:
 10421              	.LBE553:
2068:src/display.c **** 			}
 10422              		.loc 1 2068 5 is_stmt 1 view .LVU3390
2068:src/display.c **** 			}
 10423              		.loc 1 2068 5 is_stmt 0 view .LVU3391
 10424              	.LBE557:
2052:src/display.c **** 			int k = i + base - start;
 10425              		.loc 1 2052 38 is_stmt 1 view .LVU3392
2052:src/display.c **** 			int k = i + base - start;
 10426              		.loc 1 2052 19 view .LVU3393
 10427 0996 0136     		adds	r6, r6, #1
2052:src/display.c **** 			int k = i + base - start;
 10428              		.loc 1 2052 39 is_stmt 0 view .LVU3394
 10429 0998 4FF0050B 		mov	fp, #5
 10430              	.LVL1196:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
ARM GAS  /tmp/ccZMW3We.s 			page 290


 10431              		.loc 1 2045 9 view .LVU3395
 10432 099c B846     		mov	r8, r7
 10433 099e 84E7     		b	.L857
 10434              	.LVL1197:
 10435              	.L829:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10436              		.loc 1 2045 9 view .LVU3396
 10437              	.LBE559:
 10438              	.LBE523:
 10439              	.LBE522:
2314:src/display.c **** 			}
 10440              		.loc 1 2314 6 is_stmt 1 view .LVU3397
2314:src/display.c **** 			}
 10441              		.loc 1 2314 11 is_stmt 0 view .LVU3398
 10442 09a0 2189     		ldrh	r1, [r4, #8]
 10443 09a2 FFF7FEFF 		bl	num_arg_0
 10444              	.LVL1198:
2314:src/display.c **** 			}
 10445              		.loc 1 2314 11 view .LVU3399
 10446 09a6 32E6     		b	.L828
 10447              	.LVL1199:
 10448              	.L879:
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10449              		.loc 1 2401 10 is_stmt 1 view .LVU3400
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10450              		.loc 1 2401 14 is_stmt 0 view .LVU3401
 10451 09a8 DFF84480 		ldr	r8, .L1103+40
 10452              	.LVL1200:
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10453              		.loc 1 2401 14 view .LVU3402
 10454 09ac B8F90030 		ldrsh	r3, [r8]
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10455              		.loc 1 2401 13 view .LVU3403
 10456 09b0 002B     		cmp	r3, #0
 10457 09b2 40F01381 		bne	.L1092
2403:src/display.c **** #if 0
 10458              		.loc 1 2403 10 is_stmt 1 view .LVU3404
2403:src/display.c **** #if 0
 10459              		.loc 1 2403 13 is_stmt 0 view .LVU3405
 10460 09b6 0907     		lsls	r1, r1, #28
 10461 09b8 00F1D880 		bmi	.L1093
 10462              	.LVL1201:
2457:src/display.c **** nostk:	show_flags();
 10463              		.loc 1 2457 2 is_stmt 1 view .LVU3406
 10464 09bc FFF7FEFF 		bl	show_stack
 10465              	.LVL1202:
2458:src/display.c **** 	if (!skip) {
 10466              		.loc 1 2458 8 view .LVU3407
2427:src/display.c **** 		}
 10467              		.loc 1 2427 10 is_stmt 0 view .LVU3408
 10468 09c0 0125     		movs	r5, #1
2458:src/display.c **** 	if (!skip) {
 10469              		.loc 1 2458 8 view .LVU3409
 10470 09c2 FFF7FEFF 		bl	show_flags
 10471              	.LVL1203:
2459:src/display.c **** 		if (State2.runmode) {
 10472              		.loc 1 2459 2 is_stmt 1 view .LVU3410
ARM GAS  /tmp/ccZMW3We.s 			page 291


 10473 09c6 42E4     		b	.L817
 10474              	.L1104:
 10475              		.align	2
 10476              	.L1103:
 10477 09c8 00000000 		.word	main_ram
 10478 09cc 3C000000 		.word	.LC29
 10479 09d0 00000000 		.word	StackBase
 10480 09d4 00000000 		.word	DispMsg
 10481 09d8 00000000 		.word	multicmds
 10482 09dc 00000000 		.word	.LANCHOR22
 10483 09e0 00000000 		.word	LastDisplayedNumber
 10484 09e4 98000000 		.word	.LC39
 10485 09e8 8C000000 		.word	.LC38
 10486 09ec 398EE338 		.word	954437177
 10487 09f0 00000000 		.word	DispPlot
 10488 09f4 00000000 		.word	ShowRegister
 10489 09f8 00000000 		.word	.LANCHOR21
 10490              	.LVL1204:
 10491              	.L878:
2433:src/display.c **** 		if (i > 0)
 10492              		.loc 1 2433 3 view .LVU3411
2433:src/display.c **** 		if (i > 0)
 10493              		.loc 1 2433 7 is_stmt 0 view .LVU3412
 10494 09fc C44B     		ldr	r3, .L1105
 10495 09fe 1B68     		ldr	r3, [r3]
 10496 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10497              	.LVL1205:
2434:src/display.c **** 			set_status(prt(getprog(i), buf));
 10498              		.loc 1 2434 3 is_stmt 1 view .LVU3413
2434:src/display.c **** 			set_status(prt(getprog(i), buf));
 10499              		.loc 1 2434 6 is_stmt 0 view .LVU3414
 10500 0a04 0028     		cmp	r0, #0
 10501 0a06 72D0     		beq	.L889
2435:src/display.c **** 		else
 10502              		.loc 1 2435 4 is_stmt 1 view .LVU3415
 10503 0a08 FFF7FEFF 		bl	getprog
 10504              	.LVL1206:
2435:src/display.c **** 		else
 10505              		.loc 1 2435 4 is_stmt 0 view .LVU3416
 10506 0a0c 1EA9     		add	r1, sp, #120
 10507 0a0e FFF7FEFF 		bl	prt
 10508              	.LVL1207:
 10509 0a12 FFF7FEFF 		bl	set_status
 10510              	.LVL1208:
 10511              	.L890:
2438:src/display.c **** #if 0
 10512              		.loc 1 2438 3 is_stmt 1 view .LVU3417
 10513 0a16 8920     		movs	r0, #137
 10514 0a18 FFF7FEFF 		bl	set_dot
 10515              	.LVL1209:
2453:src/display.c **** 			annuc = 1;
 10516              		.loc 1 2453 3 view .LVU3418
2453:src/display.c **** 			annuc = 1;
 10517              		.loc 1 2453 7 is_stmt 0 view .LVU3419
 10518 0a1c FFF7FEFF 		bl	cur_shift
 10519              	.LVL1210:
2453:src/display.c **** 			annuc = 1;
ARM GAS  /tmp/ccZMW3We.s 			page 292


 10520              		.loc 1 2453 46 view .LVU3420
 10521 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10522 0a22 03F00603 		and	r3, r3, #6
 10523 0a26 1843     		orrs	r0, r0, r3
 10524 0a28 10F0FF0F 		tst	r0, #255
 10525 0a2c 46D1     		bne	.L891
2458:src/display.c **** 	if (!skip) {
 10526              		.loc 1 2458 8 is_stmt 1 view .LVU3421
 10527 0a2e FFF7FEFF 		bl	show_flags
 10528              	.LVL1211:
2459:src/display.c **** 		if (State2.runmode) {
 10529              		.loc 1 2459 2 view .LVU3422
 10530 0a32 B84E     		ldr	r6, .L1105+4
 10531 0a34 DFF81083 		ldr	r8, .L1105+56
 10532              	.LVL1212:
2459:src/display.c **** 		if (State2.runmode) {
 10533              		.loc 1 2459 2 is_stmt 0 view .LVU3423
 10534 0a38 09E4     		b	.L817
 10535              	.LVL1213:
 10536              	.L1071:
2389:src/display.c **** 		skip = 1;
 10537              		.loc 1 2389 3 is_stmt 1 view .LVU3424
 10538              	.LBB563:
 10539              	.LBI563:
2123:src/display.c **** 	char buf[16], *bp;
 10540              		.loc 1 2123 13 view .LVU3425
 10541              	.LBB564:
2124:src/display.c **** 	int n = State2.digval;
 10542              		.loc 1 2124 2 view .LVU3426
2125:src/display.c **** 	
 10543              		.loc 1 2125 2 view .LVU3427
2125:src/display.c **** 	
 10544              		.loc 1 2125 6 is_stmt 0 view .LVU3428
 10545 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10546              	.LVL1214:
2132:src/display.c **** 			n;
 10547              		.loc 1 2132 2 is_stmt 1 view .LVU3429
2132:src/display.c **** 			n;
 10548              		.loc 1 2132 54 is_stmt 0 view .LVU3430
 10549 0a3e CA07     		lsls	r2, r1, #31
 10550 0a40 4CBF     		ite	mi
 10551 0a42 08F17007 		addmi	r7, r8, #112
2125:src/display.c **** 	
 10552              		.loc 1 2125 6 view .LVU3431
 10553 0a46 4746     		movpl	r7, r8
 10554              	.LVL1215:
2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10555              		.loc 1 2136 2 is_stmt 1 view .LVU3432
2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10556              		.loc 1 2136 5 is_stmt 0 view .LVU3433
 10557 0a48 11F00401 		ands	r1, r1, #4
 10558 0a4c 1AD0     		beq	.L869
2137:src/display.c **** 	}
 10559              		.loc 1 2137 3 is_stmt 1 view .LVU3434
2137:src/display.c **** 	}
 10560              		.loc 1 2137 14 is_stmt 0 view .LVU3435
 10561 0a4e 15A9     		add	r1, sp, #84
ARM GAS  /tmp/ccZMW3We.s 			page 293


 10562 0a50 3846     		mov	r0, r7
 10563 0a52 FFF7FEFF 		bl	alpha_rcl_s
 10564              	.LVL1216:
2137:src/display.c **** 	}
 10565              		.loc 1 2137 3 view .LVU3436
 10566 0a56 FFF7FEFF 		bl	set_status
 10567              	.LVL1217:
 10568              	.L870:
2159:src/display.c **** }
 10569              		.loc 1 2159 2 is_stmt 1 view .LVU3437
 10570 0a5a 3846     		mov	r0, r7
 10571 0a5c 0021     		movs	r1, #0
 10572 0a5e FFF7FEFF 		bl	format_reg
 10573              	.LVL1218:
 10574              	.LBE564:
 10575              	.LBE563:
2390:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10576              		.loc 1 2390 3 view .LVU3438
2391:src/display.c **** 			annunciators();
 10577              		.loc 1 2391 3 view .LVU3439
2391:src/display.c **** 			annunciators();
 10578              		.loc 1 2391 6 is_stmt 0 view .LVU3440
 10579 0a62 BAF1000F 		cmp	r10, #0
 10580 0a66 0AD1     		bne	.L876
2391:src/display.c **** 			annunciators();
 10581              		.loc 1 2391 24 discriminator 1 view .LVU3441
 10582 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10583 0a6a 012B     		cmp	r3, #1
 10584 0a6c 7FF4A7AE 		bne	.L1054
2391:src/display.c **** 			annunciators();
 10585              		.loc 1 2391 55 discriminator 2 view .LVU3442
 10586 0a70 A74B     		ldr	r3, .L1105
 10587 0a72 1B68     		ldr	r3, [r3]
 10588 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10589 0a78 DE07     		lsls	r6, r3, #31
 10590 0a7a 7FF5A0AE 		bpl	.L1054
 10591              	.L876:
2392:src/display.c **** 		}
 10592              		.loc 1 2392 4 is_stmt 1 view .LVU3443
 10593 0a7e FFF7FEFF 		bl	annunciators
 10594              	.LVL1219:
2457:src/display.c **** nostk:	show_flags();
 10595              		.loc 1 2457 2 view .LVU3444
 10596 0a82 9CE6     		b	.L1054
 10597              	.LVL1220:
 10598              	.L869:
 10599              	.LBB567:
 10600              	.LBB565:
2140:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10601              		.loc 1 2140 3 view .LVU3445
 10602 0a84 15AE     		add	r6, sp, #84
 10603 0a86 1022     		movs	r2, #16
 10604 0a88 3046     		mov	r0, r6
 10605 0a8a FFF7FEFF 		bl	xset
 10606              	.LVL1221:
2144:src/display.c **** #endif
 10607              		.loc 1 2144 3 view .LVU3446
ARM GAS  /tmp/ccZMW3We.s 			page 294


2144:src/display.c **** #endif
 10608              		.loc 1 2144 8 is_stmt 0 view .LVU3447
 10609 0a8e A249     		ldr	r1, .L1105+8
 10610 0a90 3046     		mov	r0, r6
 10611 0a92 FFF7FEFF 		bl	scopy_spc
 10612              	.LVL1222:
2146:src/display.c **** 			*bp++ = '.';
 10613              		.loc 1 2146 7 view .LVU3448
 10614 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10615              	.LVL1223:
2146:src/display.c **** 			*bp++ = '.';
 10616              		.loc 1 2146 3 is_stmt 1 view .LVU3449
2146:src/display.c **** 			*bp++ = '.';
 10617              		.loc 1 2146 6 is_stmt 0 view .LVU3450
 10618 0a98 DB07     		lsls	r3, r3, #31
 10619 0a9a 40F1DA80 		bpl	.L871
2147:src/display.c **** 			if (n >= 100) {
 10620              		.loc 1 2147 4 is_stmt 1 view .LVU3451
 10621              	.LVL1224:
2147:src/display.c **** 			if (n >= 100) {
 10622              		.loc 1 2147 10 is_stmt 0 view .LVU3452
 10623 0a9e 2E23     		movs	r3, #46
2148:src/display.c **** 				*bp++ = '1';
 10624              		.loc 1 2148 7 view .LVU3453
 10625 0aa0 B8F1630F 		cmp	r8, #99
2147:src/display.c **** 			if (n >= 100) {
 10626              		.loc 1 2147 10 view .LVU3454
 10627 0aa4 0370     		strb	r3, [r0]
2148:src/display.c **** 				*bp++ = '1';
 10628              		.loc 1 2148 4 is_stmt 1 view .LVU3455
2148:src/display.c **** 				*bp++ = '1';
 10629              		.loc 1 2148 7 is_stmt 0 view .LVU3456
 10630 0aa6 00F3CF80 		bgt	.L872
2147:src/display.c **** 			if (n >= 100) {
 10631              		.loc 1 2147 7 view .LVU3457
 10632 0aaa 0130     		adds	r0, r0, #1
 10633              	.LVL1225:
 10634              	.L873:
2154:src/display.c **** 		else
 10635              		.loc 1 2154 4 is_stmt 1 view .LVU3458
2154:src/display.c **** 		else
 10636              		.loc 1 2154 9 is_stmt 0 view .LVU3459
 10637 0aac 4146     		mov	r1, r8
 10638 0aae 0222     		movs	r2, #2
 10639 0ab0 FFF7FEFF 		bl	num_arg_0
 10640              	.LVL1226:
 10641              	.L875:
2157:src/display.c **** 	}
 10642              		.loc 1 2157 3 is_stmt 1 view .LVU3460
 10643 0ab4 3046     		mov	r0, r6
 10644 0ab6 FFF7FEFF 		bl	set_status
 10645              	.LVL1227:
 10646 0aba CEE7     		b	.L870
 10647              	.LVL1228:
 10648              	.L891:
2157:src/display.c **** 	}
 10649              		.loc 1 2157 3 is_stmt 0 view .LVU3461
ARM GAS  /tmp/ccZMW3We.s 			page 295


 10650              	.LBE565:
 10651              	.LBE567:
2454:src/display.c **** 		goto nostk;
 10652              		.loc 1 2454 4 is_stmt 1 view .LVU3462
2458:src/display.c **** 	if (!skip) {
 10653              		.loc 1 2458 8 view .LVU3463
 10654 0abc FFF7FEFF 		bl	show_flags
 10655              	.LVL1229:
2459:src/display.c **** 		if (State2.runmode) {
 10656              		.loc 1 2459 2 view .LVU3464
 10657 0ac0 944E     		ldr	r6, .L1105+4
 10658 0ac2 DFF88482 		ldr	r8, .L1105+56
 10659              	.LVL1230:
2454:src/display.c **** 		goto nostk;
 10660              		.loc 1 2454 10 is_stmt 0 view .LVU3465
 10661 0ac6 0125     		movs	r5, #1
 10662 0ac8 FFF7C1BB 		b	.L817
 10663              	.LVL1231:
 10664              	.L1078:
 10665              	.LBB568:
 10666              	.LBB489:
 10667              	.LBB482:
 937:src/display.c **** 					p++;
 10668              		.loc 1 937 6 is_stmt 1 view .LVU3466
 938:src/display.c **** 					if (!double_dot)
 10669              		.loc 1 938 6 view .LVU3467
 938:src/display.c **** 					if (!double_dot)
 10670              		.loc 1 938 7 is_stmt 0 view .LVU3468
 10671 0acc 0AF1010A 		add	r10, r10, #1
 10672              	.LVL1232:
 939:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 10673              		.loc 1 939 6 is_stmt 1 view .LVU3469
 940:src/display.c **** 				}
 10674              		.loc 1 940 7 view .LVU3470
 940:src/display.c **** 				}
 10675              		.loc 1 940 9 is_stmt 0 view .LVU3471
 10676 0ad0 4FF0120B 		mov	fp, #18
 10677 0ad4 7AE6     		b	.L911
 10678              	.LVL1233:
 10679              	.L835:
 940:src/display.c **** 				}
 10680              		.loc 1 940 9 view .LVU3472
 10681              	.LBE482:
 10682              	.LBE489:
 10683              	.LBE568:
 10684              	.LBB569:
2339:src/display.c **** 			else
 10685              		.loc 1 2339 5 is_stmt 1 view .LVU3473
 10686 0ad6 0021     		movs	r1, #0
 10687 0ad8 9048     		ldr	r0, .L1105+12
 10688 0ada FFF7FEFF 		bl	set_digits_string
 10689              	.LVL1234:
2373:src/display.c **** 	} else if (State2.multi) {
 10690              		.loc 1 2373 3 view .LVU3474
 10691 0ade 1EA8     		add	r0, sp, #120
 10692 0ae0 FFF7FEFF 		bl	set_status
 10693              	.LVL1235:
ARM GAS  /tmp/ccZMW3We.s 			page 296


2373:src/display.c **** 	} else if (State2.multi) {
 10694              		.loc 1 2373 3 is_stmt 0 view .LVU3475
 10695              	.LBE569:
2457:src/display.c **** nostk:	show_flags();
 10696              		.loc 1 2457 2 is_stmt 1 view .LVU3476
 10697 0ae4 FFF7FEFF 		bl	show_stack
 10698              	.LVL1236:
2458:src/display.c **** 	if (!skip) {
 10699              		.loc 1 2458 8 view .LVU3477
 10700 0ae8 FFF7FEFF 		bl	show_flags
 10701              	.LVL1237:
2459:src/display.c **** 		if (State2.runmode) {
 10702              		.loc 1 2459 2 view .LVU3478
 10703 0aec 1EE6     		b	.L837
 10704              	.LVL1238:
 10705              	.L889:
2437:src/display.c **** 		set_dot(STO_annun);
 10706              		.loc 1 2437 4 view .LVU3479
 10707 0aee 8C48     		ldr	r0, .L1105+16
 10708              	.LVL1239:
2437:src/display.c **** 		set_dot(STO_annun);
 10709              		.loc 1 2437 4 is_stmt 0 view .LVU3480
 10710 0af0 FFF7FEFF 		bl	set_status
 10711              	.LVL1240:
2437:src/display.c **** 		set_dot(STO_annun);
 10712              		.loc 1 2437 4 view .LVU3481
 10713 0af4 8FE7     		b	.L890
 10714              	.LVL1241:
 10715              	.L1083:
 10716              	.LBB570:
 10717              	.LBB507:
2345:src/display.c **** 				decimal64 z;
 10718              		.loc 1 2345 5 is_stmt 1 view .LVU3482
2346:src/display.c **** 
 10719              		.loc 1 2346 5 view .LVU3483
2348:src/display.c **** 				if (opKIND(op) == KIND_MON) {
 10720              		.loc 1 2348 5 view .LVU3484
 10721 0af6 0CA8     		add	r0, sp, #48
 10722 0af8 FFF7FEFF 		bl	getX
 10723              	.LVL1242:
2349:src/display.c **** 					const unsigned int f = argKIND(op);
 10724              		.loc 1 2349 5 view .LVU3485
2349:src/display.c **** 					const unsigned int f = argKIND(op);
 10725              		.loc 1 2349 8 is_stmt 0 view .LVU3486
 10726 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10727 0b00 022B     		cmp	r3, #2
 10728 0b02 2BD1     		bne	.L840
 10729              	.LBB503:
2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10730              		.loc 1 2350 6 is_stmt 1 view .LVU3487
2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10731              		.loc 1 2350 25 is_stmt 0 view .LVU3488
 10732 0b04 5FFA8AFA 		uxtb	r10, r10
 10733              	.LVL1243:
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10734              		.loc 1 2351 6 is_stmt 1 view .LVU3489
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/ccZMW3We.s 			page 297


 10735              		.loc 1 2351 9 is_stmt 0 view .LVU3490
 10736 0b08 BAF1980F 		cmp	r10, #152
 10737              	.LBB504:
2354:src/display.c **** 					}
 10738              		.loc 1 2354 7 view .LVU3491
 10739 0b0c 15AE     		add	r6, sp, #84
 10740              	.LBE504:
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10741              		.loc 1 2351 9 view .LVU3492
 10742 0b0e 21D8     		bhi	.L841
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10743              		.loc 1 2351 31 discriminator 1 view .LVU3493
 10744 0b10 1823     		movs	r3, #24
 10745 0b12 844A     		ldr	r2, .L1105+20
 10746 0b14 03FB0AF3 		mul	r3, r3, r10
 10747 0b18 D358     		ldr	r3, [r2, r3]
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10748              		.loc 1 2351 26 discriminator 1 view .LVU3494
 10749 0b1a DBB1     		cbz	r3, .L841
 10750              	.LBB505:
2352:src/display.c **** 						update_speed(0);
 10751              		.loc 1 2352 7 is_stmt 1 view .LVU3495
 10752              	.LVL1244:
2353:src/display.c **** 						fp(&r, &x);
 10753              		.loc 1 2353 22 view .LVU3496
2354:src/display.c **** 					}
 10754              		.loc 1 2354 7 view .LVU3497
 10755 0b1c 0CA9     		add	r1, sp, #48
 10756 0b1e 3046     		mov	r0, r6
 10757 0b20 9847     		blx	r3
 10758              	.LVL1245:
 10759              	.L842:
2354:src/display.c **** 					}
 10760              		.loc 1 2354 7 is_stmt 0 view .LVU3498
 10761              	.LBE505:
 10762              	.LBE503:
2360:src/display.c **** 				packed_from_number(&z, &r);
 10763              		.loc 1 2360 5 is_stmt 1 discriminator 1 view .LVU3499
 10764 0b22 814A     		ldr	r2, .L1105+24
 10765 0b24 3146     		mov	r1, r6
 10766 0b26 3046     		mov	r0, r6
 10767 0b28 FFF7FEFF 		bl	decNumberNormalize
 10768              	.LVL1246:
2361:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
 10769              		.loc 1 2361 5 discriminator 1 view .LVU3500
 10770 0b2c 06A8     		add	r0, sp, #24
 10771 0b2e 3146     		mov	r1, r6
 10772 0b30 FFF7FEFF 		bl	packed_from_number
 10773              	.LVL1247:
2362:src/display.c **** 				skip = 1;
 10774              		.loc 1 2362 5 discriminator 1 view .LVU3501
 10775 0b34 0022     		movs	r2, #0
 10776 0b36 06A8     		add	r0, sp, #24
 10777 0b38 3BE6     		b	.L1053
 10778              	.LVL1248:
 10779              	.L866:
2362:src/display.c **** 				skip = 1;
ARM GAS  /tmp/ccZMW3We.s 			page 298


 10780              		.loc 1 2362 5 is_stmt 0 discriminator 1 view .LVU3502
 10781              	.LBE507:
 10782              	.LBE570:
 10783              	.LBB571:
 10784              	.LBB521:
2113:src/display.c **** #ifndef REALBUILD
 10785              		.loc 1 2113 5 is_stmt 1 view .LVU3503
2113:src/display.c **** #ifndef REALBUILD
 10786              		.loc 1 2113 34 is_stmt 0 view .LVU3504
 10787 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2113:src/display.c **** #ifndef REALBUILD
 10788              		.loc 1 2113 5 view .LVU3505
 10789 0b3e 4044     		add	r0, r0, r8
 10790 0b40 0021     		movs	r1, #0
 10791 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10792              	.LVL1249:
2115:src/display.c **** #endif
 10793              		.loc 1 2115 5 is_stmt 1 view .LVU3506
2115:src/display.c **** #endif
 10794              		.loc 1 2115 44 is_stmt 0 view .LVU3507
 10795 0b46 0A21     		movs	r1, #10
2115:src/display.c **** #endif
 10796              		.loc 1 2115 5 view .LVU3508
 10797 0b48 01FB0671 		mla	r1, r1, r6, r7
 10798 0b4c 7748     		ldr	r0, .L1105+28
 10799 0b4e FFF7FEFF 		bl	scopy
 10800              	.LVL1250:
2115:src/display.c **** #endif
 10801              		.loc 1 2115 5 view .LVU3509
 10802              	.LBE521:
 10803              	.LBE571:
2457:src/display.c **** nostk:	show_flags();
 10804              		.loc 1 2457 2 is_stmt 1 view .LVU3510
 10805 0b52 34E6     		b	.L1054
 10806              	.LVL1251:
 10807              	.L841:
 10808              	.LBB572:
 10809              	.LBB508:
 10810              	.LBB506:
2357:src/display.c **** 				} else
 10811              		.loc 1 2357 7 view .LVU3511
 10812 0b54 3046     		mov	r0, r6
 10813 0b56 FFF7FEFF 		bl	set_NaN
 10814              	.LVL1252:
 10815 0b5a E2E7     		b	.L842
 10816              	.LVL1253:
 10817              	.L840:
2357:src/display.c **** 				} else
 10818              		.loc 1 2357 7 is_stmt 0 view .LVU3512
 10819              	.LBE506:
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10820              		.loc 1 2359 6 is_stmt 1 view .LVU3513
 10821 0b5c 15AE     		add	r6, sp, #84
 10822 0b5e 0CAA     		add	r2, sp, #48
 10823 0b60 0AF07F01 		and	r1, r10, #127
 10824 0b64 3046     		mov	r0, r6
 10825 0b66 FFF7FEFF 		bl	do_conv
ARM GAS  /tmp/ccZMW3We.s 			page 299


 10826              	.LVL1254:
 10827 0b6a DAE7     		b	.L842
 10828              	.LVL1255:
 10829              	.L1093:
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10830              		.loc 1 2359 6 is_stmt 0 view .LVU3514
 10831              	.LBE508:
 10832              	.LBE572:
2407:src/display.c **** 			j = State2.alpha_pos;
 10833              		.loc 1 2407 4 is_stmt 1 view .LVU3515
2407:src/display.c **** 			j = State2.alpha_pos;
 10834              		.loc 1 2407 20 is_stmt 0 view .LVU3516
 10835 0b6c 684A     		ldr	r2, .L1105
 10836 0b6e 0193     		str	r3, [sp, #4]
 10837 0b70 1168     		ldr	r1, [r2]
2407:src/display.c **** 			j = State2.alpha_pos;
 10838              		.loc 1 2407 9 view .LVU3517
 10839 0b72 1EA8     		add	r0, sp, #120
 10840 0b74 01F5F661 		add	r1, r1, #1968
 10841 0b78 FFF7FEFF 		bl	scopy
 10842              	.LVL1256:
2408:src/display.c **** 			if (j != 0) {
 10843              		.loc 1 2408 14 view .LVU3518
 10844 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10845              	.LVL1257:
2408:src/display.c **** 			if (j != 0) {
 10846              		.loc 1 2408 4 is_stmt 1 view .LVU3519
2409:src/display.c **** 				i = slen(buf);
 10847              		.loc 1 2409 4 view .LVU3520
2409:src/display.c **** 				i = slen(buf);
 10848              		.loc 1 2409 7 is_stmt 0 view .LVU3521
 10849 0b80 BBF1000F 		cmp	fp, #0
 10850 0b84 12D1     		bne	.L1094
2420:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10851              		.loc 1 2420 5 is_stmt 1 view .LVU3522
2420:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10852              		.loc 1 2420 8 is_stmt 0 view .LVU3523
 10853 0b86 BAF1000F 		cmp	r10, #0
 10854 0b8a 05D0     		beq	.L888
2421:src/display.c **** 					*bp++ = '\0';
 10855              		.loc 1 2421 6 is_stmt 1 view .LVU3524
 10856              	.LVL1258:
2421:src/display.c **** 					*bp++ = '\0';
 10857              		.loc 1 2421 26 is_stmt 0 view .LVU3525
 10858 0b8c 0AF1100A 		add	r10, r10, #16
2421:src/display.c **** 					*bp++ = '\0';
 10859              		.loc 1 2421 12 view .LVU3526
 10860 0b90 80F800A0 		strb	r10, [r0]
2422:src/display.c **** 				}
 10861              		.loc 1 2422 6 is_stmt 1 view .LVU3527
 10862              	.LVL1259:
2422:src/display.c **** 				}
 10863              		.loc 1 2422 12 is_stmt 0 view .LVU3528
 10864 0b94 80F801B0 		strb	fp, [r0, #1]
 10865              	.LVL1260:
 10866              	.L888:
2424:src/display.c **** 			}
ARM GAS  /tmp/ccZMW3We.s 			page 300


 10867              		.loc 1 2424 5 is_stmt 1 view .LVU3529
 10868 0b98 1EA8     		add	r0, sp, #120
 10869 0b9a FFF7FEFF 		bl	set_status_right
 10870              	.LVL1261:
2457:src/display.c **** nostk:	show_flags();
 10871              		.loc 1 2457 2 view .LVU3530
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10872              		.loc 1 2220 6 is_stmt 0 view .LVU3531
 10873 0b9e 0025     		movs	r5, #0
2457:src/display.c **** nostk:	show_flags();
 10874              		.loc 1 2457 2 view .LVU3532
 10875 0ba0 FFF7FEFF 		bl	show_stack
 10876              	.LVL1262:
2458:src/display.c **** 	if (!skip) {
 10877              		.loc 1 2458 8 is_stmt 1 view .LVU3533
 10878 0ba4 FFF7FEFF 		bl	show_flags
 10879              	.LVL1263:
2459:src/display.c **** 		if (State2.runmode) {
 10880              		.loc 1 2459 2 view .LVU3534
 10881 0ba8 FFF751BB 		b	.L817
 10882              	.LVL1264:
 10883              	.L1094:
2410:src/display.c **** 				j *= 6;
 10884              		.loc 1 2410 5 view .LVU3535
2410:src/display.c **** 				j *= 6;
 10885              		.loc 1 2410 9 is_stmt 0 view .LVU3536
 10886 0bac 1EA8     		add	r0, sp, #120
 10887              	.LVL1265:
2410:src/display.c **** 				j *= 6;
 10888              		.loc 1 2410 9 view .LVU3537
 10889 0bae FFF7FEFF 		bl	slen
 10890              	.LVL1266:
2411:src/display.c **** 				if ( i - j >= 12 ) {
 10891              		.loc 1 2411 5 is_stmt 1 view .LVU3538
2412:src/display.c **** 					buf[ (i - j) ] = '\0';
 10892              		.loc 1 2412 5 view .LVU3539
2411:src/display.c **** 				if ( i - j >= 12 ) {
 10893              		.loc 1 2411 7 is_stmt 0 view .LVU3540
 10894 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 10895              	.LVL1267:
2412:src/display.c **** 					buf[ (i - j) ] = '\0';
 10896              		.loc 1 2412 12 view .LVU3541
 10897 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
 10898              	.LVL1268:
2412:src/display.c **** 					buf[ (i - j) ] = '\0';
 10899              		.loc 1 2412 8 view .LVU3542
 10900 0bba 0B28     		cmp	r0, #11
 10901 0bbc 7FF719AB 		ble	.L820
2413:src/display.c **** 					set_status_right(buf);
 10902              		.loc 1 2413 6 is_stmt 1 view .LVU3543
2413:src/display.c **** 					set_status_right(buf);
 10903              		.loc 1 2413 21 is_stmt 0 view .LVU3544
 10904 0bc0 28AB     		add	r3, sp, #160
 10905 0bc2 1A18     		adds	r2, r3, r0
 10906 0bc4 019B     		ldr	r3, [sp, #4]
 10907 0bc6 02F8283C 		strb	r3, [r2, #-40]
2414:src/display.c **** 				}
ARM GAS  /tmp/ccZMW3We.s 			page 301


 10908              		.loc 1 2414 6 is_stmt 1 view .LVU3545
 10909 0bca 1EA8     		add	r0, sp, #120
 10910 0bcc FFF7FEFF 		bl	set_status_right
 10911              	.LVL1269:
2457:src/display.c **** nostk:	show_flags();
 10912              		.loc 1 2457 2 view .LVU3546
 10913 0bd0 FFF7FEFF 		bl	show_stack
 10914              	.LVL1270:
2458:src/display.c **** 	if (!skip) {
 10915              		.loc 1 2458 8 view .LVU3547
 10916 0bd4 FFF7FEFF 		bl	show_flags
 10917              	.LVL1271:
2459:src/display.c **** 		if (State2.runmode) {
 10918              		.loc 1 2459 2 view .LVU3548
 10919 0bd8 FFF739BB 		b	.L817
 10920              	.L1092:
2402:src/display.c **** 		} else if (State2.alphas) {
 10921              		.loc 1 2402 4 view .LVU3549
2402:src/display.c **** 		} else if (State2.alphas) {
 10922              		.loc 1 2402 46 is_stmt 0 view .LVU3550
 10923 0bdc 581E     		subs	r0, r3, #1
 10924 0bde FFF7FEFF 		bl	get_reg_n
 10925              	.LVL1272:
 10926              	.LBB573:
 10927              	.LBI573:
2551:src/display.c **** 	int glen = *graphic++;
 10928              		.loc 1 2551 13 is_stmt 1 view .LVU3551
 10929              	.LBB574:
2552:src/display.c **** 	int i, j;
 10930              		.loc 1 2552 2 view .LVU3552
2560:src/display.c **** #endif
 10931              		.loc 1 2560 15 is_stmt 0 view .LVU3553
 10932 0be2 5349     		ldr	r1, .L1105+32
2552:src/display.c **** 	int i, j;
 10933              		.loc 1 2552 6 view .LVU3554
 10934 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 10935              	.LVL1273:
2553:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10936              		.loc 1 2553 2 is_stmt 1 view .LVU3555
2560:src/display.c **** #endif
 10937              		.loc 1 2560 2 view .LVU3556
2560:src/display.c **** #endif
 10938              		.loc 1 2560 15 is_stmt 0 view .LVU3557
 10939 0be6 0123     		movs	r3, #1
 10940 0be8 0B70     		strb	r3, [r1]
2562:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10941              		.loc 1 2562 2 is_stmt 1 view .LVU3558
2562:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10942              		.loc 1 2562 5 is_stmt 0 view .LVU3559
 10943 0bea 3AB3     		cbz	r2, .L881
2563:src/display.c **** 
 10944              		.loc 1 2563 2 is_stmt 1 view .LVU3560
 10945              	.LVL1274:
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 10946              		.loc 1 2565 2 view .LVU3561
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 10947              		.loc 1 2565 12 view .LVU3562
ARM GAS  /tmp/ccZMW3We.s 			page 302


 10948 0bec C118     		adds	r1, r0, r3
 10949 0bee 0391     		str	r1, [sp, #12]
 10950 0bf0 2B2A     		cmp	r2, #43
 10951 0bf2 D4BF     		ite	le
 10952 0bf4 8918     		addle	r1, r1, r2
 10953 0bf6 2B31     		addgt	r1, r1, #43
 10954 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 10955 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 10956              	.LVL1275:
 10957              	.L882:
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10958              		.loc 1 2566 13 view .LVU3563
 10959 0c00 029B     		ldr	r3, [sp, #8]
 10960 0c02 039E     		ldr	r6, [sp, #12]
 10961 0c04 03FA0BFA 		lsl	r10, r3, fp
 10962 0c08 0BF19405 		add	r5, fp, #148
 10963 0c0c 06E0     		b	.L885
 10964              	.LVL1276:
 10965              	.L1096:
 10966              	.LBB575:
 10967              	.LBB576:
 328:src/display.c **** 	else	clr_dot(n);
 10968              		.loc 1 328 10 is_stmt 0 view .LVU3564
 10969 0c0e FFF7FEFF 		bl	set_dot
 10970              	.LVL1277:
 10971              	.L884:
 328:src/display.c **** 	else	clr_dot(n);
 10972              		.loc 1 328 10 view .LVU3565
 10973              	.LBE576:
 10974              	.LBE575:
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10975              		.loc 1 2566 22 is_stmt 1 view .LVU3566
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10976              		.loc 1 2566 13 view .LVU3567
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10977              		.loc 1 2566 3 is_stmt 0 view .LVU3568
 10978 0c12 019B     		ldr	r3, [sp, #4]
 10979 0c14 9E42     		cmp	r6, r3
 10980 0c16 05F10605 		add	r5, r5, #6
 10981 0c1a 08D0     		beq	.L1095
 10982              	.LVL1278:
 10983              	.L885:
2571:src/display.c **** #endif
 10984              		.loc 1 2571 4 is_stmt 1 view .LVU3569
 10985              	.LBB579:
 10986              	.LBI575:
 327:src/display.c **** 	if (on)	set_dot(n);
 10987              		.loc 1 327 6 view .LVU3570
 10988              	.LBB577:
 328:src/display.c **** 	else	clr_dot(n);
 10989              		.loc 1 328 2 view .LVU3571
 328:src/display.c **** 	else	clr_dot(n);
 10990              		.loc 1 328 10 view .LVU3572
 329:src/display.c **** }
 10991              		.loc 1 329 7 view .LVU3573
 10992              	.LBE577:
 10993              	.LBE579:
ARM GAS  /tmp/ccZMW3We.s 			page 303


2571:src/display.c **** #endif
 10994              		.loc 1 2571 35 is_stmt 0 view .LVU3574
 10995 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 10996              	.LVL1279:
 10997              	.LBB580:
 10998              	.LBB578:
 328:src/display.c **** 	else	clr_dot(n);
 10999              		.loc 1 328 5 view .LVU3575
 11000 0c20 13EA0A0F 		tst	r3, r10
 328:src/display.c **** 	else	clr_dot(n);
 11001              		.loc 1 328 10 view .LVU3576
 11002 0c24 2846     		mov	r0, r5
 328:src/display.c **** 	else	clr_dot(n);
 11003              		.loc 1 328 5 view .LVU3577
 11004 0c26 F2D1     		bne	.L1096
 329:src/display.c **** }
 11005              		.loc 1 329 7 view .LVU3578
 11006 0c28 FFF7FEFF 		bl	clr_dot
 11007              	.LVL1280:
 11008 0c2c F1E7     		b	.L884
 11009              	.LVL1281:
 11010              	.L1095:
 329:src/display.c **** }
 11011              		.loc 1 329 7 view .LVU3579
 11012              	.LBE578:
 11013              	.LBE580:
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 11014              		.loc 1 2565 17 is_stmt 1 view .LVU3580
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 11015              		.loc 1 2565 18 is_stmt 0 view .LVU3581
 11016 0c2e 0BF1010B 		add	fp, fp, #1
 11017              	.LVL1282:
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 11018              		.loc 1 2565 12 is_stmt 1 view .LVU3582
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 11019              		.loc 1 2565 2 is_stmt 0 view .LVU3583
 11020 0c32 BBF1060F 		cmp	fp, #6
 11021 0c36 E3D1     		bne	.L882
 11022 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 11023              	.LVL1283:
 11024              	.L881:
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
 11025              		.loc 1 2565 2 view .LVU3584
 11026              	.LBE574:
 11027              	.LBE573:
2457:src/display.c **** nostk:	show_flags();
 11028              		.loc 1 2457 2 is_stmt 1 view .LVU3585
 11029 0c3c FFF7FEFF 		bl	show_stack
 11030              	.LVL1284:
2458:src/display.c **** 	if (!skip) {
 11031              		.loc 1 2458 8 view .LVU3586
 11032 0c40 FFF7FEFF 		bl	show_flags
 11033              	.LVL1285:
2459:src/display.c **** 		if (State2.runmode) {
 11034              		.loc 1 2459 2 view .LVU3587
 11035 0c44 FFF703BB 		b	.L817
 11036              	.LVL1286:
ARM GAS  /tmp/ccZMW3We.s 			page 304


 11037              	.L872:
 11038              	.LBB581:
 11039              	.LBB566:
2149:src/display.c **** 				n -= 100;
 11040              		.loc 1 2149 5 view .LVU3588
2149:src/display.c **** 				n -= 100;
 11041              		.loc 1 2149 11 is_stmt 0 view .LVU3589
 11042 0c48 3123     		movs	r3, #49
 11043 0c4a 4370     		strb	r3, [r0, #1]
2150:src/display.c **** 			}
 11044              		.loc 1 2150 5 is_stmt 1 view .LVU3590
2150:src/display.c **** 			}
 11045              		.loc 1 2150 7 is_stmt 0 view .LVU3591
 11046 0c4c A8F16408 		sub	r8, r8, #100
 11047              	.LVL1287:
2149:src/display.c **** 				n -= 100;
 11048              		.loc 1 2149 8 view .LVU3592
 11049 0c50 0230     		adds	r0, r0, #2
 11050              	.LVL1288:
 11051              	.L871:
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11052              		.loc 1 2153 3 is_stmt 1 view .LVU3593
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11053              		.loc 1 2153 6 is_stmt 0 view .LVU3594
 11054 0c52 B8F1630F 		cmp	r8, #99
 11055 0c56 7FF729AF 		ble	.L873
2156:src/display.c **** 		set_status(buf);
 11056              		.loc 1 2156 4 is_stmt 1 view .LVU3595
 11057              	.LVL1289:
2156:src/display.c **** 		set_status(buf);
 11058              		.loc 1 2156 20 is_stmt 0 view .LVU3596
 11059 0c5a 364B     		ldr	r3, .L1105+36
 11060 0c5c 9844     		add	r8, r8, r3
 11061              	.LVL1290:
2156:src/display.c **** 		set_status(buf);
 11062              		.loc 1 2156 10 view .LVU3597
 11063 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11064 0c62 0370     		strb	r3, [r0]
 11065 0c64 26E7     		b	.L875
 11066              	.LVL1291:
 11067              	.L1087:
2156:src/display.c **** 		set_status(buf);
 11068              		.loc 1 2156 10 view .LVU3598
 11069              	.LBE566:
 11070              	.LBE581:
 11071              	.LBB582:
 11072              	.LBB562:
 11073              	.LBB560:
2038:src/display.c **** 			end = regK_idx;
 11074              		.loc 1 2038 4 is_stmt 1 view .LVU3599
2039:src/display.c **** 			start = 3;
 11075              		.loc 1 2039 4 view .LVU3600
2040:src/display.c **** 			group = 4;
 11076              		.loc 1 2040 4 view .LVU3601
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11077              		.loc 1 2041 4 view .LVU3602
2042:src/display.c **** 		}
ARM GAS  /tmp/ccZMW3We.s 			page 305


 11078              		.loc 1 2042 4 view .LVU3603
 11079 0c66 3448     		ldr	r0, .L1105+40
 11080 0c68 FFF7FEFF 		bl	set_status
 11081              	.LVL1292:
 11082 0c6c 4FF0070A 		mov	r10, #7
 11083 0c70 0822     		movs	r2, #8
 11084 0c72 4FF02408 		mov	r8, #36
 11085              	.LVL1293:
2042:src/display.c **** 		}
 11086              		.loc 1 2042 4 is_stmt 0 view .LVU3604
 11087 0c76 2220     		movs	r0, #34
2040:src/display.c **** 			group = 4;
 11088              		.loc 1 2040 10 view .LVU3605
 11089 0c78 4FF0030B 		mov	fp, #3
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11090              		.loc 1 2041 10 view .LVU3606
 11091 0c7c 0426     		movs	r6, #4
2039:src/display.c **** 			start = 3;
 11092              		.loc 1 2039 8 view .LVU3607
 11093 0c7e 4FF06F09 		mov	r9, #111
 11094              	.LVL1294:
2038:src/display.c **** 			end = regK_idx;
 11095              		.loc 1 2038 9 view .LVU3608
 11096 0c82 6427     		movs	r7, #100
 11097              	.LVL1295:
2038:src/display.c **** 			end = regK_idx;
 11098              		.loc 1 2038 9 view .LVU3609
 11099 0c84 00E6     		b	.L852
 11100              	.LVL1296:
 11101              	.L1084:
2038:src/display.c **** 			end = regK_idx;
 11102              		.loc 1 2038 9 view .LVU3610
 11103              	.LBE560:
1998:src/display.c **** 		p = num_arg(buf, free_mem());
 11104              		.loc 1 1998 3 is_stmt 1 view .LVU3611
 11105 0c86 2D48     		ldr	r0, .L1105+44
 11106 0c88 214F     		ldr	r7, .L1105
 11107              	.LVL1297:
1998:src/display.c **** 		p = num_arg(buf, free_mem());
 11108              		.loc 1 1998 3 is_stmt 0 view .LVU3612
 11109 0c8a FFF7FEFF 		bl	set_status
 11110              	.LVL1298:
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11111              		.loc 1 1999 3 is_stmt 1 view .LVU3613
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11112              		.loc 1 1999 20 is_stmt 0 view .LVU3614
 11113 0c8e FFF7FEFF 		bl	free_mem
 11114              	.LVL1299:
 11115 0c92 0146     		mov	r1, r0
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11116              		.loc 1 1999 7 view .LVU3615
 11117 0c94 15A8     		add	r0, sp, #84
 11118              	.LVL1300:
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11119              		.loc 1 1999 7 view .LVU3616
 11120 0c96 FFF7FEFF 		bl	num_arg
 11121              	.LVL1301:
ARM GAS  /tmp/ccZMW3We.s 			page 306


2000:src/display.c **** 		p = num_arg(p, free_flash());
 11122              		.loc 1 2000 3 is_stmt 1 view .LVU3617
2000:src/display.c **** 		p = num_arg(p, free_flash());
 11123              		.loc 1 2000 7 is_stmt 0 view .LVU3618
 11124 0c9a 2949     		ldr	r1, .L1105+48
 11125 0c9c FFF7FEFF 		bl	scopy
 11126              	.LVL1302:
2000:src/display.c **** 		p = num_arg(p, free_flash());
 11127              		.loc 1 2000 7 view .LVU3619
 11128 0ca0 0646     		mov	r6, r0
 11129              	.LVL1303:
2001:src/display.c **** 		*p = '\0';
 11130              		.loc 1 2001 3 is_stmt 1 view .LVU3620
2001:src/display.c **** 		*p = '\0';
 11131              		.loc 1 2001 18 is_stmt 0 view .LVU3621
 11132 0ca2 FFF7FEFF 		bl	free_flash
 11133              	.LVL1304:
2001:src/display.c **** 		*p = '\0';
 11134              		.loc 1 2001 18 view .LVU3622
 11135 0ca6 0146     		mov	r1, r0
2001:src/display.c **** 		*p = '\0';
 11136              		.loc 1 2001 7 view .LVU3623
 11137 0ca8 3046     		mov	r0, r6
 11138 0caa FFF7FEFF 		bl	num_arg
 11139              	.LVL1305:
 11140 0cae 0346     		mov	r3, r0
 11141              	.LVL1306:
2002:src/display.c **** 		set_digits_string(buf, 0);
 11142              		.loc 1 2002 3 is_stmt 1 view .LVU3624
2002:src/display.c **** 		set_digits_string(buf, 0);
 11143              		.loc 1 2002 6 is_stmt 0 view .LVU3625
 11144 0cb0 0021     		movs	r1, #0
2003:src/display.c **** 	}
 11145              		.loc 1 2003 3 view .LVU3626
 11146 0cb2 15A8     		add	r0, sp, #84
 11147              	.LVL1307:
2002:src/display.c **** 		set_digits_string(buf, 0);
 11148              		.loc 1 2002 6 view .LVU3627
 11149 0cb4 1970     		strb	r1, [r3]
2003:src/display.c **** 	}
 11150              		.loc 1 2003 3 is_stmt 1 view .LVU3628
 11151 0cb6 FFF7FEFF 		bl	set_digits_string
 11152              	.LVL1308:
2003:src/display.c **** 	}
 11153              		.loc 1 2003 3 is_stmt 0 view .LVU3629
 11154 0cba 1EE6     		b	.L847
 11155              	.LVL1309:
 11156              	.L1086:
 11157              	.LBB561:
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11158              		.loc 1 2028 4 is_stmt 1 view .LVU3630
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11159              		.loc 1 2028 9 is_stmt 0 view .LVU3631
 11160 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11161              	.LVL1310:
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11162              		.loc 1 2028 9 view .LVU3632
ARM GAS  /tmp/ccZMW3We.s 			page 307


 11163 0cc0 7F00     		lsls	r7, r7, #1
 11164              	.LVL1311:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11165              		.loc 1 2029 4 is_stmt 1 view .LVU3633
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11166              		.loc 1 2029 26 is_stmt 0 view .LVU3634
 11167 0cc2 462F     		cmp	r7, #70
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11168              		.loc 1 2030 8 view .LVU3635
 11169 0cc4 1F49     		ldr	r1, .L1105+52
 11170 0cc6 15A8     		add	r0, sp, #84
 11171              	.LVL1312:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11172              		.loc 1 2029 26 view .LVU3636
 11173 0cc8 B946     		mov	r9, r7
 11174              	.LVL1313:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11175              		.loc 1 2029 26 view .LVU3637
 11176 0cca A8BF     		it	ge
 11177 0ccc 4FF04609 		movge	r9, #70
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11178              		.loc 1 2030 8 view .LVU3638
 11179 0cd0 FFF7FEFF 		bl	scopy
 11180              	.LVL1314:
2031:src/display.c **** 			*p++ = '-';
 11181              		.loc 1 2031 8 view .LVU3639
 11182 0cd4 3946     		mov	r1, r7
 11183 0cd6 0222     		movs	r2, #2
 11184 0cd8 FFF7FEFF 		bl	num_arg_0
 11185              	.LVL1315:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11186              		.loc 1 2029 8 view .LVU3640
 11187 0cdc 09F11D09 		add	r9, r9, #29
 11188              	.LVL1316:
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11189              		.loc 1 2030 4 is_stmt 1 view .LVU3641
2031:src/display.c **** 			*p++ = '-';
 11190              		.loc 1 2031 4 view .LVU3642
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
 11191              		.loc 1 2032 4 view .LVU3643
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
 11192              		.loc 1 2032 9 is_stmt 0 view .LVU3644
 11193 0ce0 2D23     		movs	r3, #45
 11194 0ce2 00F8013B 		strb	r3, [r0], #1
 11195              	.LVL1317:
2033:src/display.c **** 			*p = '\0';
 11196              		.loc 1 2033 4 is_stmt 1 view .LVU3645
2033:src/display.c **** 			*p = '\0';
 11197              		.loc 1 2033 8 is_stmt 0 view .LVU3646
 11198 0ce6 4946     		mov	r1, r9
 11199 0ce8 0222     		movs	r2, #2
 11200 0cea FFF7FEFF 		bl	num_arg_0
 11201              	.LVL1318:
2033:src/display.c **** 			*p = '\0';
 11202              		.loc 1 2033 8 view .LVU3647
 11203 0cee 0246     		mov	r2, r0
 11204              	.LVL1319:
ARM GAS  /tmp/ccZMW3We.s 			page 308


2034:src/display.c **** 			set_status(buf);
 11205              		.loc 1 2034 4 is_stmt 1 view .LVU3648
2034:src/display.c **** 			set_status(buf);
 11206              		.loc 1 2034 7 is_stmt 0 view .LVU3649
 11207 0cf0 4FF0000B 		mov	fp, #0
2035:src/display.c **** 		}
 11208              		.loc 1 2035 4 view .LVU3650
 11209 0cf4 15A8     		add	r0, sp, #84
 11210              	.LVL1320:
2034:src/display.c **** 			set_status(buf);
 11211              		.loc 1 2034 7 view .LVU3651
 11212 0cf6 82F800B0 		strb	fp, [r2]
2035:src/display.c **** 		}
 11213              		.loc 1 2035 4 is_stmt 1 view .LVU3652
 11214 0cfa 4FF00A0A 		mov	r10, #10
 11215 0cfe FFF7FEFF 		bl	set_status
 11216              	.LVL1321:
2024:src/display.c **** 		int start = 0;
 11217              		.loc 1 2024 7 is_stmt 0 view .LVU3653
 11218 0d02 5646     		mov	r6, r10
 11219 0d04 0222     		movs	r2, #2
 11220 0d06 4FF00908 		mov	r8, #9
 11221              	.LVL1322:
2024:src/display.c **** 		int start = 0;
 11222              		.loc 1 2024 7 view .LVU3654
 11223 0d0a 0720     		movs	r0, #7
 11224 0d0c BCE5     		b	.L852
 11225              	.L1106:
 11226 0d0e 00BF     		.align	2
 11227              	.L1105:
 11228 0d10 00000000 		.word	main_ram
 11229 0d14 00000000 		.word	DispMsg
 11230 0d18 A0000000 		.word	.LC40
 11231 0d1c 40000000 		.word	.LC30
 11232 0d20 A8000000 		.word	.LC41
 11233 0d24 00000000 		.word	monfuncs
 11234 0d28 00000000 		.word	Ctx
 11235 0d2c 00000000 		.word	LastDisplayedNumber
 11236 0d30 00000000 		.word	forceDispPlot
 11237 0d34 BC000000 		.word	.LC27
 11238 0d38 7C000000 		.word	.LC37
 11239 0d3c 4C000000 		.word	.LC31
 11240 0d40 54000000 		.word	.LC32
 11241 0d44 78000000 		.word	.LC36
 11242 0d48 00000000 		.word	DispPlot
 11243              	.LVL1323:
 11244              	.L1085:
2024:src/display.c **** 		int start = 0;
 11245              		.loc 1 2024 7 view .LVU3655
 11246              	.LBE561:
2007:src/display.c **** 		if (SizeStatRegs)
 11247              		.loc 1 2007 3 is_stmt 1 view .LVU3656
2007:src/display.c **** 		if (SizeStatRegs)
 11248              		.loc 1 2007 7 is_stmt 0 view .LVU3657
 11249 0d4c 15AE     		add	r6, sp, #84
 11250              	.LVL1324:
2007:src/display.c **** 		if (SizeStatRegs)
ARM GAS  /tmp/ccZMW3We.s 			page 309


 11251              		.loc 1 2007 7 view .LVU3658
 11252 0d4e 1849     		ldr	r1, .L1107
 11253 0d50 3046     		mov	r0, r6
 11254 0d52 FFF7FEFF 		bl	scopy
 11255              	.LVL1325:
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11256              		.loc 1 2008 7 view .LVU3659
 11257 0d56 174A     		ldr	r2, .L1107+4
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11258              		.loc 1 2008 6 view .LVU3660
 11259 0d58 1268     		ldr	r2, [r2]
2007:src/display.c **** 		if (SizeStatRegs)
 11260              		.loc 1 2007 7 view .LVU3661
 11261 0d5a 0346     		mov	r3, r0
 11262              	.LVL1326:
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11263              		.loc 1 2008 3 is_stmt 1 view .LVU3662
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11264              		.loc 1 2008 6 is_stmt 0 view .LVU3663
 11265 0d5c BAB9     		cbnz	r2, .L1097
 11266              	.L849:
2010:src/display.c **** 		set_status(buf);
 11267              		.loc 1 2010 3 is_stmt 1 view .LVU3664
2010:src/display.c **** 		set_status(buf);
 11268              		.loc 1 2010 6 is_stmt 0 view .LVU3665
 11269 0d5e 0022     		movs	r2, #0
 11270 0d60 1A70     		strb	r2, [r3]
2011:src/display.c **** 
 11271              		.loc 1 2011 3 is_stmt 1 view .LVU3666
 11272 0d62 3046     		mov	r0, r6
 11273              	.LVL1327:
2011:src/display.c **** 
 11274              		.loc 1 2011 3 is_stmt 0 view .LVU3667
 11275 0d64 FFF7FEFF 		bl	set_status
 11276              	.LVL1328:
2014:src/display.c **** 		if (LocalRegs < 0) {
 11277              		.loc 1 2014 3 is_stmt 1 view .LVU3668
2014:src/display.c **** 		if (LocalRegs < 0) {
 11278              		.loc 1 2014 7 is_stmt 0 view .LVU3669
 11279 0d68 FFF7FEFF 		bl	global_regs
 11280              	.LVL1329:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11281              		.loc 1 2015 7 view .LVU3670
 11282 0d6c 124F     		ldr	r7, .L1107+8
 11283              	.LVL1330:
2014:src/display.c **** 		if (LocalRegs < 0) {
 11284              		.loc 1 2014 7 view .LVU3671
 11285 0d6e 0146     		mov	r1, r0
 11286 0d70 3046     		mov	r0, r6
 11287 0d72 FFF7FEFF 		bl	num_arg
 11288              	.LVL1331:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11289              		.loc 1 2015 7 view .LVU3672
 11290 0d76 3A68     		ldr	r2, [r7]
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11291              		.loc 1 2015 6 view .LVU3673
 11292 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
ARM GAS  /tmp/ccZMW3We.s 			page 310


 11293 0d7c 002A     		cmp	r2, #0
2014:src/display.c **** 		if (LocalRegs < 0) {
 11294              		.loc 1 2014 7 view .LVU3674
 11295 0d7e 0346     		mov	r3, r0
 11296              	.LVL1332:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11297              		.loc 1 2015 3 is_stmt 1 view .LVU3675
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11298              		.loc 1 2015 6 is_stmt 0 view .LVU3676
 11299 0d80 0ADB     		blt	.L1098
 11300              	.LVL1333:
 11301              	.L850:
2019:src/display.c **** 		set_digits_string(buf, 0);
 11302              		.loc 1 2019 3 is_stmt 1 view .LVU3677
2019:src/display.c **** 		set_digits_string(buf, 0);
 11303              		.loc 1 2019 6 is_stmt 0 view .LVU3678
 11304 0d82 0021     		movs	r1, #0
2020:src/display.c **** 	} else {
 11305              		.loc 1 2020 3 view .LVU3679
 11306 0d84 3046     		mov	r0, r6
 11307              	.LVL1334:
2019:src/display.c **** 		set_digits_string(buf, 0);
 11308              		.loc 1 2019 6 view .LVU3680
 11309 0d86 1970     		strb	r1, [r3]
2020:src/display.c **** 	} else {
 11310              		.loc 1 2020 3 is_stmt 1 view .LVU3681
 11311 0d88 FFF7FEFF 		bl	set_digits_string
 11312              	.LVL1335:
2020:src/display.c **** 	} else {
 11313              		.loc 1 2020 3 is_stmt 0 view .LVU3682
 11314 0d8c B5E5     		b	.L847
 11315              	.LVL1336:
 11316              	.L1097:
2009:src/display.c **** 		*p = '\0';
 11317              		.loc 1 2009 4 is_stmt 1 view .LVU3683
2009:src/display.c **** 		*p = '\0';
 11318              		.loc 1 2009 8 is_stmt 0 view .LVU3684
 11319 0d8e 0B49     		ldr	r1, .L1107+12
 11320 0d90 FFF7FEFF 		bl	scopy
 11321              	.LVL1337:
2009:src/display.c **** 		*p = '\0';
 11322              		.loc 1 2009 8 view .LVU3685
 11323 0d94 0346     		mov	r3, r0
 11324              	.LVL1338:
2009:src/display.c **** 		*p = '\0';
 11325              		.loc 1 2009 8 view .LVU3686
 11326 0d96 E2E7     		b	.L849
 11327              	.LVL1339:
 11328              	.L1098:
2016:src/display.c **** 			p = num_arg(p, local_regs());
 11329              		.loc 1 2016 4 is_stmt 1 view .LVU3687
2016:src/display.c **** 			p = num_arg(p, local_regs());
 11330              		.loc 1 2016 8 is_stmt 0 view .LVU3688
 11331 0d98 0949     		ldr	r1, .L1107+16
 11332 0d9a FFF7FEFF 		bl	scopy
 11333              	.LVL1340:
2016:src/display.c **** 			p = num_arg(p, local_regs());
ARM GAS  /tmp/ccZMW3We.s 			page 311


 11334              		.loc 1 2016 8 view .LVU3689
 11335 0d9e 8046     		mov	r8, r0
 11336              	.LVL1341:
2017:src/display.c **** 		}
 11337              		.loc 1 2017 4 is_stmt 1 view .LVU3690
2017:src/display.c **** 		}
 11338              		.loc 1 2017 19 is_stmt 0 view .LVU3691
 11339 0da0 FFF7FEFF 		bl	local_regs
 11340              	.LVL1342:
2017:src/display.c **** 		}
 11341              		.loc 1 2017 19 view .LVU3692
 11342 0da4 0146     		mov	r1, r0
2017:src/display.c **** 		}
 11343              		.loc 1 2017 8 view .LVU3693
 11344 0da6 4046     		mov	r0, r8
 11345 0da8 FFF7FEFF 		bl	num_arg
 11346              	.LVL1343:
 11347 0dac 0346     		mov	r3, r0
 11348              	.LVL1344:
2017:src/display.c **** 		}
 11349              		.loc 1 2017 8 view .LVU3694
 11350 0dae E8E7     		b	.L850
 11351              	.L1108:
 11352              		.align	2
 11353              	.L1107:
 11354 0db0 5C000000 		.word	.LC33
 11355 0db4 00000000 		.word	SizeStatRegs
 11356 0db8 00000000 		.word	main_ram
 11357 0dbc 64000000 		.word	.LC34
 11358 0dc0 6C000000 		.word	.LC35
 11359              	.LBE562:
 11360              	.LBE582:
 11361              		.cfi_endproc
 11362              	.LFE34:
 11364              		.section	.text.frozen_display,"ax",%progbits
 11365              		.align	1
 11366              		.p2align 2,,3
 11367              		.global	frozen_display
 11368              		.syntax unified
 11369              		.thumb
 11370              		.thumb_func
 11371              		.fpu fpv4-sp-d16
 11373              	frozen_display:
 11374              	.LFB35:
2545:src/display.c **** 	State2.disp_freeze = 0;
 11375              		.loc 1 2545 1 is_stmt 1 view -0
 11376              		.cfi_startproc
 11377              		@ args = 0, pretend = 0, frame = 0
 11378              		@ frame_needed = 0, uses_anonymous_args = 0
2546:src/display.c **** 	display();
 11379              		.loc 1 2546 2 view .LVU3696
2545:src/display.c **** 	State2.disp_freeze = 0;
 11380              		.loc 1 2545 1 is_stmt 0 view .LVU3697
 11381 0000 10B5     		push	{r4, lr}
 11382              		.cfi_def_cfa_offset 8
 11383              		.cfi_offset 4, -8
 11384              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZMW3We.s 			page 312


2546:src/display.c **** 	display();
 11385              		.loc 1 2546 21 view .LVU3698
 11386 0002 064C     		ldr	r4, .L1111
 11387 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11388 0006 6FF30413 		bfc	r3, #4, #1
 11389 000a E375     		strb	r3, [r4, #23]
2547:src/display.c **** 	State2.disp_freeze = 1;
 11390              		.loc 1 2547 2 is_stmt 1 view .LVU3699
 11391 000c FFF7FEFF 		bl	display
 11392              	.LVL1345:
2548:src/display.c **** }
 11393              		.loc 1 2548 2 view .LVU3700
2548:src/display.c **** }
 11394              		.loc 1 2548 21 is_stmt 0 view .LVU3701
 11395 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11396 0012 43F01003 		orr	r3, r3, #16
 11397 0016 E375     		strb	r3, [r4, #23]
2549:src/display.c **** 
 11398              		.loc 1 2549 1 view .LVU3702
 11399 0018 10BD     		pop	{r4, pc}
 11400              	.L1112:
 11401 001a 00BF     		.align	2
 11402              	.L1111:
 11403 001c 00000000 		.word	StateWhileOn
 11404              		.cfi_endproc
 11405              	.LFE35:
 11407              		.section	.text.message,"ax",%progbits
 11408              		.align	1
 11409              		.p2align 2,,3
 11410              		.global	message
 11411              		.syntax unified
 11412              		.thumb
 11413              		.thumb_func
 11414              		.fpu fpv4-sp-d16
 11416              	message:
 11417              	.LVL1346:
 11418              	.LFB41:
2741:src/display.c **** 	State2.disp_freeze = 0;
 11419              		.loc 1 2741 1 is_stmt 1 view -0
 11420              		.cfi_startproc
 11421              		@ args = 0, pretend = 0, frame = 0
 11422              		@ frame_needed = 0, uses_anonymous_args = 0
2742:src/display.c **** 	State2.disp_small = 0;
 11423              		.loc 1 2742 2 view .LVU3704
2743:src/display.c **** 	WasDataEntry = 0;
 11424              		.loc 1 2743 2 view .LVU3705
2743:src/display.c **** 	WasDataEntry = 0;
 11425              		.loc 1 2743 20 is_stmt 0 view .LVU3706
 11426 0000 174A     		ldr	r2, .L1123
2741:src/display.c **** 	State2.disp_freeze = 0;
 11427              		.loc 1 2741 1 view .LVU3707
 11428 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11429              		.cfi_def_cfa_offset 24
 11430              		.cfi_offset 3, -24
 11431              		.cfi_offset 4, -20
 11432              		.cfi_offset 5, -16
 11433              		.cfi_offset 6, -12
ARM GAS  /tmp/ccZMW3We.s 			page 313


 11434              		.cfi_offset 7, -8
 11435              		.cfi_offset 14, -4
2743:src/display.c **** 	WasDataEntry = 0;
 11436              		.loc 1 2743 20 view .LVU3708
 11437 0004 D38A     		ldrh	r3, [r2, #22]
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11438              		.loc 1 2744 15 view .LVU3709
 11439 0006 174E     		ldr	r6, .L1123+4
2743:src/display.c **** 	WasDataEntry = 0;
 11440              		.loc 1 2743 20 view .LVU3710
 11441 0008 23F48453 		bic	r3, r3, #4224
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11442              		.loc 1 2744 15 view .LVU3711
 11443 000c 0027     		movs	r7, #0
2743:src/display.c **** 	WasDataEntry = 0;
 11444              		.loc 1 2743 20 view .LVU3712
 11445 000e D382     		strh	r3, [r2, #22]	@ movhi
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11446              		.loc 1 2744 2 is_stmt 1 view .LVU3713
2745:src/display.c **** 		// Complete redraw necessary
 11447              		.loc 1 2745 5 is_stmt 0 view .LVU3714
 11448 0010 9B05     		lsls	r3, r3, #22
2741:src/display.c **** 	State2.disp_freeze = 0;
 11449              		.loc 1 2741 1 view .LVU3715
 11450 0012 0546     		mov	r5, r0
 11451 0014 0C46     		mov	r4, r1
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11452              		.loc 1 2744 15 view .LVU3716
 11453 0016 3760     		str	r7, [r6]
2745:src/display.c **** 		// Complete redraw necessary
 11454              		.loc 1 2745 2 is_stmt 1 view .LVU3717
2745:src/display.c **** 		// Complete redraw necessary
 11455              		.loc 1 2745 5 is_stmt 0 view .LVU3718
 11456 0018 12D5     		bpl	.L1114
2745:src/display.c **** 		// Complete redraw necessary
 11457              		.loc 1 2745 27 discriminator 1 view .LVU3719
 11458 001a D1B1     		cbz	r1, .L1122
 11459              	.L1115:
2752:src/display.c **** 			ShowRPN = 0;
 11460              		.loc 1 2752 4 is_stmt 1 view .LVU3720
 11461 001c FFF7FEFF 		bl	reset_disp
 11462              	.LVL1347:
2753:src/display.c **** 			set_annunciators();
 11463              		.loc 1 2753 4 view .LVU3721
2753:src/display.c **** 			set_annunciators();
 11464              		.loc 1 2753 12 is_stmt 0 view .LVU3722
 11465 0020 114B     		ldr	r3, .L1123+8
 11466 0022 0026     		movs	r6, #0
 11467 0024 1E60     		str	r6, [r3]
2754:src/display.c **** 			set_digits_string( str2, 0 );
 11468              		.loc 1 2754 4 is_stmt 1 view .LVU3723
 11469 0026 FFF7FEFF 		bl	set_annunciators
 11470              	.LVL1348:
2755:src/display.c **** 		}
 11471              		.loc 1 2755 4 view .LVU3724
 11472 002a 3146     		mov	r1, r6
 11473 002c 2046     		mov	r0, r4
ARM GAS  /tmp/ccZMW3We.s 			page 314


 11474 002e FFF7FEFF 		bl	set_digits_string
 11475              	.LVL1349:
2757:src/display.c **** 		finish_display();// message
 11476              		.loc 1 2757 3 view .LVU3725
 11477 0032 2846     		mov	r0, r5
 11478 0034 FFF7FEFF 		bl	set_status
 11479              	.LVL1350:
2758:src/display.c **** 	}
 11480              		.loc 1 2758 3 view .LVU3726
2760:src/display.c **** 
 11481              		.loc 1 2760 1 is_stmt 0 view .LVU3727
 11482 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11483              		.cfi_remember_state
 11484              		.cfi_restore 14
 11485              		.cfi_restore 7
 11486              		.cfi_restore 6
 11487              		.cfi_restore 5
 11488              		.cfi_restore 4
 11489              		.cfi_restore 3
 11490              		.cfi_def_cfa_offset 0
 11491              	.LVL1351:
2758:src/display.c **** 	}
 11492              		.loc 1 2758 3 view .LVU3728
 11493 003c FFF7FEBF 		b	finish_display
 11494              	.LVL1352:
 11495              	.L1114:
 11496              		.cfi_restore_state
2751:src/display.c **** 			reset_disp();
 11497              		.loc 1 2751 3 is_stmt 1 view .LVU3729
2751:src/display.c **** 			reset_disp();
 11498              		.loc 1 2751 6 is_stmt 0 view .LVU3730
 11499 0040 0029     		cmp	r1, #0
 11500 0042 EBD1     		bne	.L1115
2757:src/display.c **** 		finish_display();// message
 11501              		.loc 1 2757 3 is_stmt 1 view .LVU3731
 11502 0044 2846     		mov	r0, r5
 11503              	.LVL1353:
2757:src/display.c **** 		finish_display();// message
 11504              		.loc 1 2757 3 is_stmt 0 view .LVU3732
 11505 0046 FFF7FEFF 		bl	set_status
 11506              	.LVL1354:
2758:src/display.c **** 	}
 11507              		.loc 1 2758 3 is_stmt 1 view .LVU3733
2760:src/display.c **** 
 11508              		.loc 1 2760 1 is_stmt 0 view .LVU3734
 11509 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11510              		.cfi_remember_state
 11511              		.cfi_restore 14
 11512              		.cfi_restore 7
 11513              		.cfi_restore 6
 11514              		.cfi_restore 5
 11515              		.cfi_restore 4
 11516              		.cfi_restore 3
 11517              		.cfi_def_cfa_offset 0
 11518              	.LVL1355:
2758:src/display.c **** 	}
 11519              		.loc 1 2758 3 view .LVU3735
ARM GAS  /tmp/ccZMW3We.s 			page 315


 11520 004e FFF7FEBF 		b	finish_display
 11521              	.LVL1356:
 11522              	.L1122:
 11523              		.cfi_restore_state
2747:src/display.c **** 		display();
 11524              		.loc 1 2747 3 is_stmt 1 view .LVU3736
2747:src/display.c **** 		display();
 11525              		.loc 1 2747 11 is_stmt 0 view .LVU3737
 11526 0052 064B     		ldr	r3, .L1123+12
 11527 0054 1860     		str	r0, [r3]
2748:src/display.c **** 	}
 11528              		.loc 1 2748 3 is_stmt 1 view .LVU3738
2760:src/display.c **** 
 11529              		.loc 1 2760 1 is_stmt 0 view .LVU3739
 11530 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11531              		.cfi_restore 14
 11532              		.cfi_restore 7
 11533              		.cfi_restore 6
 11534              		.cfi_restore 5
 11535              		.cfi_restore 4
 11536              		.cfi_restore 3
 11537              		.cfi_def_cfa_offset 0
2748:src/display.c **** 	}
 11538              		.loc 1 2748 3 view .LVU3740
 11539 005a FFF7FEBF 		b	display
 11540              	.LVL1357:
 11541              	.L1124:
2748:src/display.c **** 	}
 11542              		.loc 1 2748 3 view .LVU3741
 11543 005e 00BF     		.align	2
 11544              	.L1123:
 11545 0060 00000000 		.word	StateWhileOn
 11546 0064 00000000 		.word	WasDataEntry
 11547 0068 00000000 		.word	ShowRPN
 11548 006c 00000000 		.word	DispMsg
 11549              		.cfi_endproc
 11550              	.LFE41:
 11552              		.section	.text.error_message,"ax",%progbits
 11553              		.align	1
 11554              		.p2align 2,,3
 11555              		.global	error_message
 11556              		.syntax unified
 11557              		.thumb
 11558              		.thumb_func
 11559              		.fpu fpv4-sp-d16
 11561              	error_message:
 11562              	.LVL1358:
 11563              	.LFB1:
 122:src/display.c **** #define MSG1(top) top "\0"
 11564              		.loc 1 122 1 is_stmt 1 view -0
 11565              		.cfi_startproc
 11566              		@ args = 0, pretend = 0, frame = 0
 11567              		@ frame_needed = 0, uses_anonymous_args = 0
 127:src/display.c **** 	{
 11568              		.loc 1 127 2 view .LVU3743
 185:src/display.c **** 	{
 11569              		.loc 1 185 2 view .LVU3744
ARM GAS  /tmp/ccZMW3We.s 			page 316


 220:src/display.c **** 		const char *p = error_table[e];
 11570              		.loc 1 220 2 view .LVU3745
 122:src/display.c **** #define MSG1(top) top "\0"
 11571              		.loc 1 122 1 is_stmt 0 view .LVU3746
 11572 0000 38B5     		push	{r3, r4, r5, lr}
 11573              		.cfi_def_cfa_offset 16
 11574              		.cfi_offset 3, -16
 11575              		.cfi_offset 4, -12
 11576              		.cfi_offset 5, -8
 11577              		.cfi_offset 14, -4
 220:src/display.c **** 		const char *p = error_table[e];
 11578              		.loc 1 220 20 view .LVU3747
 11579 0002 1A4B     		ldr	r3, .L1136
 11580 0004 1B68     		ldr	r3, [r3]
 11581 0006 0343     		orrs	r3, r0, r3
 11582 0008 2CD0     		beq	.L1125
 11583              	.LBB583:
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11584              		.loc 1 221 3 is_stmt 1 view .LVU3748
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11585              		.loc 1 221 15 is_stmt 0 view .LVU3749
 11586 000a 194B     		ldr	r3, .L1136+4
 11587 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11588              	.LVL1359:
 222:src/display.c **** 		if (*q == '\0')
 11589              		.loc 1 222 3 is_stmt 1 view .LVU3750
 11590 0010 0446     		mov	r4, r0
 222:src/display.c **** 		if (*q == '\0')
 11591              		.loc 1 222 19 is_stmt 0 view .LVU3751
 11592 0012 0021     		movs	r1, #0
 11593 0014 2846     		mov	r0, r5
 11594              	.LVL1360:
 222:src/display.c **** 		if (*q == '\0')
 11595              		.loc 1 222 19 view .LVU3752
 11596 0016 FFF7FEFF 		bl	find_char
 11597              	.LVL1361:
 223:src/display.c **** 			q = S7_ERROR;
 11598              		.loc 1 223 3 is_stmt 1 view .LVU3753
 223:src/display.c **** 			q = S7_ERROR;
 11599              		.loc 1 223 7 is_stmt 0 view .LVU3754
 11600 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 223:src/display.c **** 			q = S7_ERROR;
 11601              		.loc 1 223 6 view .LVU3755
 11602 001c 9BB9     		cbnz	r3, .L1134
 224:src/display.c **** 		if (*q == 'X') {
 11603              		.loc 1 224 6 view .LVU3756
 11604 001e 1549     		ldr	r1, .L1136+8
 11605              	.L1127:
 11606              	.LVL1362:
 234:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 11607              		.loc 1 234 4 is_stmt 1 view .LVU3757
 11608 0020 2846     		mov	r0, r5
 11609 0022 FFF7FEFF 		bl	message
 11610              	.LVL1363:
 235:src/display.c **** #ifndef REALBUILD
 11611              		.loc 1 235 4 view .LVU3758
 235:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccZMW3We.s 			page 317


 11612              		.loc 1 235 23 is_stmt 0 view .LVU3759
 11613 0026 144B     		ldr	r3, .L1136+12
 237:src/display.c **** #endif
 11614              		.loc 1 237 4 view .LVU3760
 11615 0028 1449     		ldr	r1, .L1136+16
 235:src/display.c **** #ifndef REALBUILD
 11616              		.loc 1 235 23 view .LVU3761
 11617 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 237:src/display.c **** #endif
 11618              		.loc 1 237 4 view .LVU3762
 11619 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11620 0030 1348     		ldr	r0, .L1136+20
 235:src/display.c **** #ifndef REALBUILD
 11621              		.loc 1 235 28 view .LVU3763
 11622 0032 003C     		subs	r4, r4, #0
 235:src/display.c **** #ifndef REALBUILD
 11623              		.loc 1 235 28 view .LVU3764
 11624 0034 18BF     		it	ne
 11625 0036 0124     		movne	r4, #1
 11626              	.LVL1364:
 235:src/display.c **** #ifndef REALBUILD
 11627              		.loc 1 235 23 view .LVU3765
 11628 0038 64F30412 		bfi	r2, r4, #4, #1
 11629 003c DA75     		strb	r2, [r3, #23]
 237:src/display.c **** #endif
 11630              		.loc 1 237 4 is_stmt 1 view .LVU3766
 11631              	.LBE583:
 262:src/display.c **** 
 11632              		.loc 1 262 1 is_stmt 0 view .LVU3767
 11633 003e BDE83840 		pop	{r3, r4, r5, lr}
 11634              		.cfi_remember_state
 11635              		.cfi_restore 14
 11636              		.cfi_restore 5
 11637              		.cfi_restore 4
 11638              		.cfi_restore 3
 11639              		.cfi_def_cfa_offset 0
 11640              	.LVL1365:
 11641              	.LBB590:
 237:src/display.c **** #endif
 11642              		.loc 1 237 4 view .LVU3768
 11643 0042 FFF7FEBF 		b	scopy
 11644              	.LVL1366:
 11645              	.L1134:
 11646              		.cfi_restore_state
 225:src/display.c **** 			DispMsg = p;
 11647              		.loc 1 225 3 is_stmt 1 view .LVU3769
 225:src/display.c **** 			DispMsg = p;
 11648              		.loc 1 225 6 is_stmt 0 view .LVU3770
 11649 0046 582B     		cmp	r3, #88
 11650 0048 0DD1     		bne	.L1135
 226:src/display.c **** 			frozen_display();
 11651              		.loc 1 226 4 is_stmt 1 view .LVU3771
 11652              	.LBB584:
 11653              	.LBB585:
2546:src/display.c **** 	display();
 11654              		.loc 1 2546 21 is_stmt 0 view .LVU3772
 11655 004a 0B4C     		ldr	r4, .L1136+12
ARM GAS  /tmp/ccZMW3We.s 			page 318


 11656              	.LVL1367:
2546:src/display.c **** 	display();
 11657              		.loc 1 2546 21 view .LVU3773
 11658              	.LBE585:
 11659              	.LBE584:
 226:src/display.c **** 			frozen_display();
 11660              		.loc 1 226 12 view .LVU3774
 11661 004c 0D4A     		ldr	r2, .L1136+24
 11662              	.LBB588:
 11663              	.LBB586:
2546:src/display.c **** 	display();
 11664              		.loc 1 2546 21 view .LVU3775
 11665 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11666              	.LBE586:
 11667              	.LBE588:
 226:src/display.c **** 			frozen_display();
 11668              		.loc 1 226 12 view .LVU3776
 11669 0050 1560     		str	r5, [r2]
 227:src/display.c **** 		}
 11670              		.loc 1 227 4 is_stmt 1 view .LVU3777
 11671              	.LBB589:
 11672              	.LBI584:
2544:src/display.c **** {
 11673              		.loc 1 2544 6 view .LVU3778
 11674              	.LBB587:
2546:src/display.c **** 	display();
 11675              		.loc 1 2546 2 view .LVU3779
2546:src/display.c **** 	display();
 11676              		.loc 1 2546 21 is_stmt 0 view .LVU3780
 11677 0052 6FF30413 		bfc	r3, #4, #1
 11678 0056 E375     		strb	r3, [r4, #23]
2547:src/display.c **** 	State2.disp_freeze = 1;
 11679              		.loc 1 2547 2 is_stmt 1 view .LVU3781
 11680 0058 FFF7FEFF 		bl	display
 11681              	.LVL1368:
2548:src/display.c **** }
 11682              		.loc 1 2548 2 view .LVU3782
2548:src/display.c **** }
 11683              		.loc 1 2548 21 is_stmt 0 view .LVU3783
 11684 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11685 005e 43F01003 		orr	r3, r3, #16
 11686 0062 E375     		strb	r3, [r4, #23]
 11687              	.LVL1369:
 11688              	.L1125:
2548:src/display.c **** }
 11689              		.loc 1 2548 21 view .LVU3784
 11690              	.LBE587:
 11691              	.LBE589:
 11692              	.LBE590:
 262:src/display.c **** 
 11693              		.loc 1 262 1 view .LVU3785
 11694 0064 38BD     		pop	{r3, r4, r5, pc}
 11695              	.LVL1370:
 11696              	.L1135:
 11697              	.LBB591:
 222:src/display.c **** 		if (*q == '\0')
 11698              		.loc 1 222 15 view .LVU3786
ARM GAS  /tmp/ccZMW3We.s 			page 319


 11699 0066 411C     		adds	r1, r0, #1
 11700 0068 DAE7     		b	.L1127
 11701              	.L1137:
 11702 006a 00BF     		.align	2
 11703              	.L1136:
 11704 006c 00000000 		.word	Running
 11705 0070 00000000 		.word	.LANCHOR26
 11706 0074 00000000 		.word	.LANCHOR25
 11707 0078 00000000 		.word	StateWhileOn
 11708 007c 00000000 		.word	.LANCHOR27
 11709 0080 00000000 		.word	LastDisplayedNumber
 11710 0084 00000000 		.word	DispMsg
 11711              	.LBE591:
 11712              		.cfi_endproc
 11713              	.LFE1:
 11715              		.section	.rodata.str1.4,"aMS",%progbits,1
 11716              		.align	2
 11717              	.LC43:
 11718 0000 06316306 		.ascii	"\0061c\006\006\000"
 11718      0600
 11719 0006 0000     		.align	2
 11720              	.LC44:
 11721 0008 756E0600 		.ascii	"un\006\000"
 11722              		.align	2
 11723              	.LC45:
 11724 000c 736D00   		.ascii	"sm\000"
 11725              		.set	CSWTCH.306,CSWTCH.304
 11726 000f 00       		.align	2
 11727              	.LC46:
 11728 0010 20502072 		.ascii	" P r o g r a m \000"
 11728      206F2067 
 11728      20722061 
 11728      206D2000 
 11729              		.align	2
 11730              	.LC47:
 11731 0020 206F2072 		.ascii	" o r   d a t e \000"
 11731      20202064 
 11731      20612074 
 11731      20652000 
 11732              		.align	2
 11733              	.LC48:
 11734 0030 204F2070 		.ascii	" O p - c o d e \000"
 11734      202D2063 
 11734      206F2064 
 11734      20652000 
 11735              		.align	2
 11736              	.LC49:
 11737 0040 204C2061 		.ascii	" L a b e l \000"
 11737      20622065 
 11737      206C2000 
 11738              		.align	2
 11739              	.LC50:
 11740 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11740      20652072 
 11740      20612074 
 11740      2069206F 
 11740      206E2000 
ARM GAS  /tmp/ccZMW3We.s 			page 320


 11741              		.align	2
 11742              	.LC51:
 11743 0060 20462075 		.ascii	" F u l l \000"
 11743      206C206C 
 11743      2000
 11744 006a 0000     		.align	2
 11745              	.LC52:
 11746 006c 2043206C 		.ascii	" C l a s h \000"
 11746      20612073 
 11746      20682000 
 11747              		.align	2
 11748              	.LC53:
 11749 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11749      206F2020 
 11749      2073206D 
 11749      2061206C 
 11749      206C2000 
 11750              		.align	2
 11751              	.LC54:
 11752 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11752      20742061 
 11752      20202070 
 11752      206F2069 
 11752      206E2074 
 11753              		.align	2
 11754              	.LC55:
 11755 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11755      20722061 
 11755      206D2065 
 11755      20742065 
 11755      20722000 
 11756              		.align	2
 11757              	.LC56:
 11758 00b8 20442061 		.ascii	" D a t a \000"
 11758      20742061 
 11758      2000
 11759 00c2 0000     		.align	2
 11760              	.LC57:
 11761 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11761      206F2074 
 11761      20652063 
 11761      20742065 
 11761      20642000 
 11762              		.align	2
 11763              	.LC58:
 11764 00d8 2046206F 		.ascii	" F o u n d \000"
 11764      2075206E 
 11764      20642000 
 11765              		.align	2
 11766              	.LC59:
 11767 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11767      2073206D 
 11767      20612074 
 11767      20632068 
 11767      2000
 11768 00f6 0000     		.align	2
 11769              	.LC60:
ARM GAS  /tmp/ccZMW3We.s 			page 321


 11770 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11770      20732074 
 11770      2061206C 
 11770      206C2065 
 11770      20642000 
 11771              		.global	DIGITS
 11772              		.comm	IoAnnunciator,4,4
 11773              		.comm	IntMaxWindow,4,4
 11774              		.comm	JustDisplayed,4,4
 11775              		.comm	ShowRPN,4,4
 11776              		.comm	forceDispPlot,1,1
 11777              		.comm	LastDisplayedExponent,5,4
 11778              		.comm	LastDisplayedNumber,26,4
 11779              		.comm	LastDisplayedText,31,4
 11780              		.comm	DispPlot,2,2
 11781              		.comm	DispMsg,4,4
 11782              		.global	SvnRevision
 11783              		.section	.rodata
 11784              		.align	2
 11785              		.set	.LANCHOR17,. + 0
 11786              	.LC18:
 11787 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11787      22002E00 
 11787      00
 11788 0009 000000   		.space	3
 11789              	.LC22:
 11790 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11790      332E3306 
 11790      0600
 11791 0016 00000000 		.space	4
 11792 001a 0000     		.space	2
 11793              	.LC61:
 11794 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11794      696E6700 
 11794      50726F47 
 11794      72614D6D 
 11794      00
 11795 002d 000000   		.space	3
 11796              	.LC62:
 11797 0030 446F6D61 		.ascii	"Domain\000\000"
 11797      696E0000 
 11798              	.LC63:
 11799 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11799      74696D65 
 11799      006F7220 
 11799      64417445 
 11799      00
 11800 0049 000000   		.space	3
 11801              	.LC64:
 11802 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11802      66696E65 
 11802      64004F70 
 11802      2D434F64 
 11802      4500
 11803 005e 0000     		.space	2
 11804              	.LC65:
 11805 0060 2B9F0000 		.ascii	"+\237\000\000"
ARM GAS  /tmp/ccZMW3We.s 			page 322


 11806              	.LC66:
 11807 0064 2D9F0000 		.ascii	"-\237\000\000"
 11808              	.LC67:
 11809 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11809      75636800 
 11809      4C416245 
 11809      4C00
 11810 0076 0000     		.space	2
 11811              	.LC68:
 11812 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11812      67616C00 
 11812      4F504572 
 11812      4174696F 
 11812      6E00
 11813 008a 0000     		.space	2
 11814              	.LC69:
 11815 008c 4F757420 		.ascii	"Out of range\000\000"
 11815      6F662072 
 11815      616E6765 
 11815      0000
 11816 009a 0000     		.space	2
 11817              	.LC70:
 11818 009c 42616420 		.ascii	"Bad digit\000\000"
 11818      64696769 
 11818      740000
 11819 00a7 00       		.space	1
 11820              	.LC71:
 11821 00a8 546F6F20 		.ascii	"Too long\000\000"
 11821      6C6F6E67 
 11821      0000
 11822 00b2 0000     		.space	2
 11823              	.LC72:
 11824 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11824      69730046 
 11824      754C4C00 
 11825              	.LC73:
 11826 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11826      6B00434C 
 11826      41534800 
 11827              	.LC74:
 11828 00cc 42616420 		.ascii	"Bad mode\000\000"
 11828      6D6F6465 
 11828      0000
 11829 00d6 0000     		.space	2
 11830              	.LC75:
 11831 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11831      06060673 
 11831      697A6500 
 11831      746F6F20 
 11831      534D6D41 
 11832 00ef 00       		.space	1
 11833              	.LC76:
 11834 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11834      66657700 
 11834      64417441 
 11834      20506F69 
 11834      6E745300 
ARM GAS  /tmp/ccZMW3We.s 			page 323


 11835              	.LC77:
 11836 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 11836      6C696400 
 11836      50617261 
 11836      4D6D4574 
 11836      457200
 11837 0117 00       		.space	1
 11838              	.LC78:
 11839 0118 492F4F00 		.ascii	"I/O\000\000"
 11839      00
 11840 011d 000000   		.space	3
 11841              	.LC79:
 11842 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11842      6C696400 
 11842      64417441 
 11842      00
 11843 012d 000000   		.space	3
 11844              	.LC80:
 11845 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11845      65005072 
 11845      6F744563 
 11845      74456400 
 11846              	.LC81:
 11847 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11847      6F6F7400 
 11847      466F756E 
 11847      6400
 11848 014e 0000     		.space	2
 11849              	.LC82:
 11850 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11850      6978004D 
 11850      6D49534D 
 11850      6D417443 
 11850      4800
 11851 0162 0000     		.space	2
 11852              	.LC83:
 11853 0164 53696E67 		.ascii	"Singular\000\000"
 11853      756C6172 
 11853      0000
 11854 016e 0000     		.space	2
 11855              	.LC84:
 11856 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11856      68206973 
 11856      0046754C 
 11856      4C00
 11857 017e 0000     		.space	2
 11858              	.LC85:
 11859 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 11859      72797374 
 11859      616C0049 
 11859      6E537461 
 11859      4C4C4564 
 11860 0195 000000   		.space	3
 11861              	.LC86:
 11862 0198 04201D00 		.ascii	"\004 \035\000X\000"
 11862      5800
 11863              		.section	.bss.DecimalMode,"aw",%nobits
ARM GAS  /tmp/ccZMW3We.s 			page 324


 11864              		.set	.LANCHOR1,. + 0
 11867              	DecimalMode:
 11868 0000 00       		.space	1
 11869              		.section	.bss.SeparatorMode,"aw",%nobits
 11870              		.set	.LANCHOR0,. + 0
 11873              	SeparatorMode:
 11874 0000 00       		.space	1
 11875              		.section	.rodata.CSWTCH.304,"a"
 11876              		.align	2
 11877              		.set	.LANCHOR11,. + 0
 11880              	CSWTCH.304:
 11881 0000 02000000 		.word	2
 11882 0004 08000000 		.word	8
 11883 0008 0A000000 		.word	10
 11884 000c 10000000 		.word	16
 11885              		.section	.rodata.CSWTCH.326,"a"
 11886              		.align	2
 11887              		.set	.LANCHOR16,. + 0
 11890              	CSWTCH.326:
 11891 0000 00000000 		.word	.LC43
 11892 0004 08000000 		.word	.LC44
 11893 0008 0C000000 		.word	.LC45
 11894              		.section	.rodata.DIGITS,"a"
 11895              		.align	2
 11896              		.set	.LANCHOR12,. + 0
 11899              	DIGITS:
 11900 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 11900      34353637 
 11900      38394142 
 11900      43444546 
 11900      00
 11901              		.section	.rodata.S7_ERROR,"a"
 11902              		.align	2
 11903              		.set	.LANCHOR25,. + 0
 11906              	S7_ERROR:
 11907 0000 4572726F 		.ascii	"Error\000"
 11907      7200
 11908              		.section	.rodata.S7_INF,"a"
 11909              		.align	2
 11910              		.set	.LANCHOR5,. + 0
 11913              	S7_INF:
 11914 0000 496E6669 		.ascii	"Infinity\000"
 11914      6E697479 
 11914      00
 11915              		.section	.rodata.S7_INF_Text,"a"
 11916              		.align	2
 11917              		.set	.LANCHOR7,. + 0
 11920              	S7_INF_Text:
 11921 0000 2049206E 		.ascii	" I n f i n i t y \000"
 11921      20662069 
 11921      206E2069 
 11921      20742079 
 11921      2000
 11922              		.section	.rodata.S7_NEG_INF_Text,"a"
 11923              		.align	2
 11924              		.set	.LANCHOR6,. + 0
 11927              	S7_NEG_INF_Text:
ARM GAS  /tmp/ccZMW3We.s 			page 325


 11928 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 11928      20662069 
 11928      206E2069 
 11928      20742079 
 11928      2000
 11929              		.section	.rodata.S7_NaN,"a"
 11930              		.align	2
 11931              		.set	.LANCHOR3,. + 0
 11934              	S7_NaN:
 11935 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 11935      6E754D6D 
 11935      45726963 
 11935      00
 11936              		.section	.rodata.S7_NaN_Text,"a"
 11937              		.align	2
 11938              		.set	.LANCHOR4,. + 0
 11941              	S7_NaN_Text:
 11942 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 11942      20742020 
 11942      206E2075 
 11942      206D2065 
 11942      20722069 
 11943              		.section	.rodata.S7_STEP,"a"
 11944              		.align	2
 11945              		.set	.LANCHOR24,. + 0
 11948              	S7_STEP:
 11949 0000 53744550 		.ascii	"StEP \000"
 11949      2000
 11950              		.section	.rodata.S7_STEP_ShortText,"a"
 11951              		.align	2
 11952              		.set	.LANCHOR18,. + 0
 11955              	S7_STEP_ShortText:
 11956 0000 53544550 		.ascii	"STEP\000"
 11956      00
 11957              		.section	.rodata.S7_fract_EQ,"a"
 11958              		.align	2
 11959              		.set	.LANCHOR9,. + 0
 11962              	S7_fract_EQ:
 11963 0000 203D2000 		.ascii	" = \000"
 11964              		.section	.rodata.S7_fract_GT,"a"
 11965              		.align	2
 11966              		.set	.LANCHOR10,. + 0
 11969              	S7_fract_GT:
 11970 0000 20477400 		.ascii	" Gt\000"
 11971              		.section	.rodata.S7_fract_LT,"a"
 11972              		.align	2
 11973              		.set	.LANCHOR8,. + 0
 11976              	S7_fract_LT:
 11977 0000 204C7400 		.ascii	" Lt\000"
 11978              		.section	.rodata.S_SURE,"a"
 11979              		.align	2
 11980              		.set	.LANCHOR20,. + 0
 11983              	S_SURE:
 11984 0000 53757265 		.ascii	"Sure?\000"
 11984      3F00
 11985              		.section	.rodata.SvnRevision,"a"
 11986              		.align	2
ARM GAS  /tmp/ccZMW3We.s 			page 326


 11987              		.set	.LANCHOR19,. + 0
 11990              	SvnRevision:
 11991 0000 30202020 		.ascii	"0   "
 11992              		.section	.rodata.digtbl,"a"
 11993              		.align	2
 11994              		.set	.LANCHOR2,. + 0
 11997              	digtbl:
 11998 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 11998      02421252 
 11998      2D000000 
 11998      00000000 
 11998      00
 11999 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 11999      00000017 
 11999      01000000 
 11999      00
 12000 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12000      28000000 
 12000      0020664B 
 12000      00000010 
 12001 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12001      5E5B3973 
 12001      77497F7B 
 12001      00000612 
 12001      0300787D 
 12002 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12002      673D240F 
 12002      75266C6D 
 12002      6F7C7914 
 12002      73362F00 
 12003 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12003      161F7674 
 12003      6735040F 
 12003      75266915 
 12003      177C7914 
 12004 0076 000F003B 		.ascii	"\000\017\000;"
 12005              		.section	.rodata.error_table.8474,"a"
 12006              		.align	2
 12007              		.set	.LANCHOR26,. + 0
 12010              	error_table.8474:
 12011 0000 1C000000 		.word	.LC61
 12012 0004 30000000 		.word	.LC62
 12013 0008 38000000 		.word	.LC63
 12014 000c 4C000000 		.word	.LC64
 12015 0010 60000000 		.word	.LC65
 12016 0014 64000000 		.word	.LC66
 12017 0018 68000000 		.word	.LC67
 12018 001c 78000000 		.word	.LC68
 12019 0020 8C000000 		.word	.LC69
 12020 0024 9C000000 		.word	.LC70
 12021 0028 A8000000 		.word	.LC71
 12022 002c B4000000 		.word	.LC72
 12023 0030 C0000000 		.word	.LC73
 12024 0034 CC000000 		.word	.LC74
 12025 0038 D8000000 		.word	.LC75
 12026 003c F0000000 		.word	.LC76
 12027 0040 04010000 		.word	.LC77
ARM GAS  /tmp/ccZMW3We.s 			page 327


 12028 0044 18010000 		.word	.LC78
 12029 0048 20010000 		.word	.LC79
 12030 004c 30010000 		.word	.LC80
 12031 0050 40010000 		.word	.LC81
 12032 0054 50010000 		.word	.LC82
 12033 0058 64010000 		.word	.LC83
 12034 005c 70010000 		.word	.LC84
 12035 0060 80010000 		.word	.LC85
 12036 0064 98010000 		.word	.LC86
 12037              		.section	.rodata.error_table_text.8475,"a"
 12038              		.align	2
 12039              		.set	.LANCHOR27,. + 0
 12042              	error_table_text.8475:
 12043 0000 10000000 		.word	.LC46
 12044 0004 A8000000 		.word	.LC41
 12045 0008 20000000 		.word	.LC47
 12046 000c 30000000 		.word	.LC48
 12047 0010 A8000000 		.word	.LC41
 12048 0014 A8000000 		.word	.LC41
 12049 0018 40000000 		.word	.LC49
 12050 001c 4C000000 		.word	.LC50
 12051 0020 A8000000 		.word	.LC41
 12052 0024 A8000000 		.word	.LC41
 12053 0028 A8000000 		.word	.LC41
 12054 002c 60000000 		.word	.LC51
 12055 0030 6C000000 		.word	.LC52
 12056 0034 A8000000 		.word	.LC41
 12057 0038 78000000 		.word	.LC53
 12058 003c 8C000000 		.word	.LC54
 12059 0040 A4000000 		.word	.LC55
 12060 0044 A8000000 		.word	.LC41
 12061 0048 B8000000 		.word	.LC56
 12062 004c C4000000 		.word	.LC57
 12063 0050 D8000000 		.word	.LC58
 12064 0054 E4000000 		.word	.LC59
 12065 0058 A8000000 		.word	.LC41
 12066 005c 60000000 		.word	.LC51
 12067 0060 F8000000 		.word	.LC60
 12068 0064 A8000000 		.word	.LC41
 12069              		.section	.rodata.libname,"a"
 12070              		.align	2
 12071              		.set	.LANCHOR21,. + 0
 12074              	libname:
 12075 0000 72414D6D 		.ascii	"rAMm\000"
 12075      00
 12076 0005 4C696220 		.ascii	"Lib \000"
 12076      00
 12077 000a 42757020 		.ascii	"Bup \000"
 12077      00
 12078 000f 726F4D6D 		.ascii	"roMm\000"
 12078      00
 12079              		.section	.rodata.libname_shorttext,"a"
 12080              		.align	2
 12081              		.set	.LANCHOR23,. + 0
 12084              	libname_shorttext:
 12085 0000 52616D00 		.ascii	"Ram\000"
 12086 0004 00       		.space	1
ARM GAS  /tmp/ccZMW3We.s 			page 328


 12087 0005 4C696200 		.ascii	"Lib\000"
 12088 0009 00       		.space	1
 12089 000a 42757000 		.ascii	"Bup\000"
 12090 000e 00       		.space	1
 12091 000f 526F6D00 		.ascii	"Rom\000"
 12092 0013 00       		.space	1
 12093              		.section	.rodata.libname_text,"a"
 12094              		.align	2
 12095              		.set	.LANCHOR22,. + 0
 12098              	libname_text:
 12099 0000 20522061 		.ascii	" R a m \000"
 12099      206D2000 
 12100 0008 0000     		.space	2
 12101 000a 204C2069 		.ascii	" L i b \000"
 12101      20622000 
 12102 0012 0000     		.space	2
 12103 0014 20422075 		.ascii	" B u p \000"
 12103      20702000 
 12104 001c 0000     		.space	2
 12105 001e 2052206F 		.ascii	" R o m \000"
 12105      206D2000 
 12106 0026 0000     		.space	2
 12107              		.section	.rodata.shift_chars.8571,"a"
 12108              		.align	2
 12109              		.set	.LANCHOR15,. + 0
 12112              	shift_chars.8571:
 12113 0000 20111213 		.ascii	" \021\022\023"
 12114              		.section	.rodata.small_dots.8758,"a"
 12115              		.align	2
 12116              		.set	.LANCHOR14,. + 0
 12119              	small_dots.8758:
 12120 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12120      07E12C06 
 12120      07E12C06 
 12120      06
 12121              		.section	.rodata.small_minus.8757,"a"
 12122              		.align	2
 12123              		.set	.LANCHOR13,. + 0
 12126              	small_minus.8757:
 12127 0000 07C22D06 		.ascii	"\007\302-\006"
 12128              		.text
 12129              	.Letext0:
 12130              		.file 2 "src/decNumber/decContext.h"
 12131              		.file 3 "src/decNumber/decNumber.h"
 12132              		.file 4 "src/decNumber/decimal64.h"
 12133              		.file 5 "src/decNumber/decimal128.h"
 12134              		.file 6 "src/xeq.h"
 12135              		.file 7 "src/data.h"
 12136              		.file 8 "src/storage.h"
 12137              		.file 9 "src/display.h"
 12138              		.file 10 "src/consts.h"
 12139              		.file 11 "src/stats.h"
 12140              		.file 12 "src/revision.h"
 12141              		.file 13 "src/charset7.h"
 12142              		.file 14 "src/lcd.h"
 12143              		.file 15 "src/decn.h"
 12144              		.file 16 "src/alpha.h"
ARM GAS  /tmp/ccZMW3We.s 			page 329


 12145              		.file 17 "src/int.h"
ARM GAS  /tmp/ccZMW3We.s 			page 330


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccZMW3We.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccZMW3We.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccZMW3We.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccZMW3We.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccZMW3We.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccZMW3We.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccZMW3We.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccZMW3We.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccZMW3We.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccZMW3We.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccZMW3We.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccZMW3We.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccZMW3We.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccZMW3We.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccZMW3We.s:669    .text.set_status_sized:0000000000000000 $t
     /tmp/ccZMW3We.s:676    .text.set_status_sized:0000000000000000 set_status_sized
     /tmp/ccZMW3We.s:1121   .text.set_status_sized:0000000000000190 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccZMW3We.s:1129   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:1133   .text.set_exp:0000000000000000 $t
     /tmp/ccZMW3We.s:1140   .text.set_exp:0000000000000000 set_exp
     /tmp/ccZMW3We.s:1361   .text.set_exp:00000000000000b0 $d
     /tmp/ccZMW3We.s:1367   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccZMW3We.s:1374   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccZMW3We.s:1442   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccZMW3We.s:1448   .text.set_decimal:0000000000000000 $t
     /tmp/ccZMW3We.s:1455   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccZMW3We.s:1551   .text.set_decimal:000000000000004c $d
     /tmp/ccZMW3We.s:1559   .text.set_digits_string:0000000000000000 $t
     /tmp/ccZMW3We.s:1566   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccZMW3We.s:1660   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:1664   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccZMW3We.s:1671   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccZMW3We.s:1818   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccZMW3We.s:1830   .text.set_x_hms:0000000000000000 $t
     /tmp/ccZMW3We.s:1837   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccZMW3We.s:2338   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccZMW3We.s:2348   .text.set_x_fract:0000000000000000 $t
     /tmp/ccZMW3We.s:2355   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccZMW3We.s:2791   .text.set_x_fract:0000000000000198 $d
     /tmp/ccZMW3We.s:2806   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:2807   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccZMW3We.s:2810   .text.carry_overflow:0000000000000000 $t
     /tmp/ccZMW3We.s:2817   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccZMW3We.s:2954   .text.carry_overflow:0000000000000070 $d
     /tmp/ccZMW3We.s:2964   .text.set_int_x:0000000000000000 $t
     /tmp/ccZMW3We.s:2971   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccZMW3We.s:3728   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.304:0000000000000000 CSWTCH.306
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccZMW3We.s:3738   .text.set_int_x:0000000000000360 $t
     /tmp/ccZMW3We.s:3788   .text.set_int_x:0000000000000390 $d
ARM GAS  /tmp/ccZMW3We.s 			page 331


     /tmp/ccZMW3We.s:3794   .text.set_annunciators:0000000000000000 $t
     /tmp/ccZMW3We.s:3801   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccZMW3We.s:4174   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccZMW3We.s:4186   .text.getdig:0000000000000000 $t
     /tmp/ccZMW3We.s:4194   .text.getdig:0000000000000000 getdig
     /tmp/ccZMW3We.s:4214   .text.getdig:0000000000000008 $d
     /tmp/ccZMW3We.s:4219   .text.dot:0000000000000000 $t
     /tmp/ccZMW3We.s:4227   .text.dot:0000000000000000 dot
     /tmp/ccZMW3We.s:4250   .text.std_round_fix:0000000000000000 $t
     /tmp/ccZMW3We.s:4258   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccZMW3We.s:4340   .text.std_round_fix:000000000000004c $d
     /tmp/ccZMW3We.s:4346   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccZMW3We.s:4354   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccZMW3We.s:4414   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccZMW3We.s:4421   .text.pixel_length:0000000000000000 $t
     /tmp/ccZMW3We.s:4429   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccZMW3We.s:4520   .text.set_status:0000000000000000 $t
     /tmp/ccZMW3We.s:4527   .text.set_status:0000000000000000 set_status
     /tmp/ccZMW3We.s:4595   .text.set_status:0000000000000034 $d
     /tmp/ccZMW3We.s:4600   .text.set_x_dn:0000000000000000 $t
     /tmp/ccZMW3We.s:4608   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccZMW3We.s:5376   .text.set_x_dn:0000000000000328 $d
     /tmp/ccZMW3We.s:5385   .text.set_x_dn:000000000000033c $t
     /tmp/ccZMW3We.s:5504   .text.set_x_dn:00000000000003dc $d
     /tmp/ccZMW3We.s:5510   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccZMW3We.s:5537   .text.set_x_dn:000000000000041c $d
     /tmp/ccZMW3We.s:5543   .text.set_x_dn:0000000000000426 $t
     /tmp/ccZMW3We.s:6048   .text.set_x_dn:0000000000000644 $d
     /tmp/ccZMW3We.s:6064   .text.set_x_dn:0000000000000660 $t
     /tmp/ccZMW3We.s:6778   .text.set_x_dn:0000000000000950 $d
     /tmp/ccZMW3We.s:6787   .text.set_x:0000000000000000 $t
     /tmp/ccZMW3We.s:6794   .text.set_x:0000000000000000 set_x
     /tmp/ccZMW3We.s:6862   .text.format_reg:0000000000000000 $t
     /tmp/ccZMW3We.s:6870   .text.format_reg:0000000000000000 format_reg
     /tmp/ccZMW3We.s:6989   .text.format_reg:0000000000000064 $d
     /tmp/ccZMW3We.s:6995   .text.set_status_right:0000000000000000 $t
     /tmp/ccZMW3We.s:7002   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccZMW3We.s:7139   .text.set_status_right:0000000000000060 $d
     /tmp/ccZMW3We.s:7144   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:7193   .text.annunciators:0000000000000000 $t
     /tmp/ccZMW3We.s:7200   .text.annunciators:0000000000000000 annunciators
     /tmp/ccZMW3We.s:7902   .text.annunciators:0000000000000308 $d
     /tmp/ccZMW3We.s:7925   .text.annunciators:000000000000034c $t
     /tmp/ccZMW3We.s:8119   .text.annunciators:0000000000000420 $d
     /tmp/ccZMW3We.s:8134   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:8201   .text.display:0000000000000000 $t
     /tmp/ccZMW3We.s:8209   .text.display:0000000000000000 display
     /tmp/ccZMW3We.s:8883   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccZMW3We.s:8901   .text.display:0000000000000334 $t
     /tmp/ccZMW3We.s:9600   .text.display:000000000000063c $d
     /tmp/ccZMW3We.s:9630   .text.display:0000000000000694 $t
     /tmp/ccZMW3We.s:10477  .text.display:00000000000009c8 $d
     /tmp/ccZMW3We.s:10494  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccZMW3We.s 			page 332


     /tmp/ccZMW3We.s:11228  .text.display:0000000000000d10 $d
     /tmp/ccZMW3We.s:11249  .text.display:0000000000000d4c $t
     /tmp/ccZMW3We.s:11354  .text.display:0000000000000db0 $d
     /tmp/ccZMW3We.s:11365  .text.frozen_display:0000000000000000 $t
     /tmp/ccZMW3We.s:11373  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccZMW3We.s:11403  .text.frozen_display:000000000000001c $d
     /tmp/ccZMW3We.s:11408  .text.message:0000000000000000 $t
     /tmp/ccZMW3We.s:11416  .text.message:0000000000000000 message
     /tmp/ccZMW3We.s:11545  .text.message:0000000000000060 $d
     /tmp/ccZMW3We.s:11553  .text.error_message:0000000000000000 $t
     /tmp/ccZMW3We.s:11561  .text.error_message:0000000000000000 error_message
     /tmp/ccZMW3We.s:11704  .text.error_message:000000000000006c $d
     /tmp/ccZMW3We.s:11716  .rodata.str1.4:0000000000000000 $d
     /tmp/ccZMW3We.s:11880  .rodata.CSWTCH.304:0000000000000000 CSWTCH.304
     /tmp/ccZMW3We.s:11899  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccZMW3We.s:11990  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccZMW3We.s:11784  .rodata:0000000000000000 $d
     /tmp/ccZMW3We.s:11867  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccZMW3We.s:11868  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccZMW3We.s:11873  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccZMW3We.s:11874  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccZMW3We.s:11876  .rodata.CSWTCH.304:0000000000000000 $d
     /tmp/ccZMW3We.s:11886  .rodata.CSWTCH.326:0000000000000000 $d
     /tmp/ccZMW3We.s:11890  .rodata.CSWTCH.326:0000000000000000 CSWTCH.326
     /tmp/ccZMW3We.s:11895  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccZMW3We.s:11902  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccZMW3We.s:11906  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccZMW3We.s:11909  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccZMW3We.s:11913  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccZMW3We.s:11916  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccZMW3We.s:11920  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccZMW3We.s:11923  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccZMW3We.s:11927  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccZMW3We.s:11930  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccZMW3We.s:11934  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccZMW3We.s:11937  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccZMW3We.s:11941  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccZMW3We.s:11944  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccZMW3We.s:11948  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccZMW3We.s:11951  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccZMW3We.s:11955  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccZMW3We.s:11958  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccZMW3We.s:11962  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccZMW3We.s:11965  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccZMW3We.s:11969  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccZMW3We.s:11972  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccZMW3We.s:11976  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccZMW3We.s:11979  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccZMW3We.s:11983  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccZMW3We.s:11986  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccZMW3We.s:11993  .rodata.digtbl:0000000000000000 $d
     /tmp/ccZMW3We.s:11997  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccZMW3We.s:12006  .rodata.error_table.8474:0000000000000000 $d
     /tmp/ccZMW3We.s:12010  .rodata.error_table.8474:0000000000000000 error_table.8474
     /tmp/ccZMW3We.s:12038  .rodata.error_table_text.8475:0000000000000000 $d
     /tmp/ccZMW3We.s:12042  .rodata.error_table_text.8475:0000000000000000 error_table_text.8475
ARM GAS  /tmp/ccZMW3We.s 			page 333


     /tmp/ccZMW3We.s:12070  .rodata.libname:0000000000000000 $d
     /tmp/ccZMW3We.s:12074  .rodata.libname:0000000000000000 libname
     /tmp/ccZMW3We.s:12080  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccZMW3We.s:12084  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccZMW3We.s:12094  .rodata.libname_text:0000000000000000 $d
     /tmp/ccZMW3We.s:12098  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccZMW3We.s:12108  .rodata.shift_chars.8571:0000000000000000 $d
     /tmp/ccZMW3We.s:12112  .rodata.shift_chars.8571:0000000000000000 shift_chars.8571
     /tmp/ccZMW3We.s:12115  .rodata.small_dots.8758:0000000000000000 $d
     /tmp/ccZMW3We.s:12119  .rodata.small_dots.8758:0000000000000000 small_dots.8758
     /tmp/ccZMW3We.s:12122  .rodata.small_minus.8757:0000000000000000 $d
     /tmp/ccZMW3We.s:12126  .rodata.small_minus.8757:0000000000000000 small_minus.8757

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccZMW3We.s 			page 334


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccZMW3We.s 			page 335


SizeStatRegs

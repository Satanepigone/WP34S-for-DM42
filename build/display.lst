ARM GAS  /tmp/ccSEf3H9.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccSEf3H9.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** #ifdef TOP_ROW
  43:src/display.c **** static void set_status_top_always(const char *);
  44:src/display.c **** #endif
  45:src/display.c **** 
  46:src/display.c **** static void set_status_right(const char *);
  47:src/display.c **** static void set_status_graphic(const unsigned char *);
  48:src/display.c **** 
  49:src/display.c **** static void set_int_x(const long long int value, char *res);
  50:src/display.c **** 
  51:src/display.c **** const char *DispMsg; // What to display in message area
  52:src/display.c **** 
  53:src/display.c **** short int DispPlot;
  54:src/display.c **** short int no_status_top = 0;
  55:src/display.c **** 
  56:src/display.c **** #ifndef REALBUILD
  57:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  58:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  59:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  60:src/display.c **** char forceDispPlot;
  61:src/display.c **** #endif
  62:src/display.c **** 
  63:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  64:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  65:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  66:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  67:src/display.c **** 
  68:src/display.c **** /* Message strings
  69:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  70:src/display.c ****  * are for the upper dot matrix line.
  71:src/display.c ****  */
  72:src/display.c **** static const char S_SURE[] = "Sure?";
  73:src/display.c **** 
  74:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  75:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  76:src/display.c **** #ifndef REALBUILD
  77:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  78:src/display.c **** #endif
  79:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  82:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  86:src/display.c **** #ifndef REALBUILD
  87:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
ARM GAS  /tmp/ccSEf3H9.s 			page 3


  88:src/display.c **** #endif
  89:src/display.c **** 
  90:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  91:src/display.c **** static const char S7_fract_LT[] = " Lt";
  92:src/display.c **** static const char S7_fract_GT[] = " Gt";
  93:src/display.c **** 
  94:src/display.c **** static const char libname[][5] = {
  95:src/display.c ****   "rAMm", "Lib ", "Bup ",
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c ****   "roMm"
  98:src/display.c **** #endif
  99:src/display.c **** };
 100:src/display.c **** 
 101:src/display.c **** #ifndef REALBUILD
 102:src/display.c **** static const char libname_text[][10] = {
 103:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 104:src/display.c **** };
 105:src/display.c **** static const char libname_shorttext[][5] = {
 106:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 107:src/display.c **** };
 108:src/display.c **** #endif
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Set the separator and decimal mode globals
 112:src/display.c ****  */
 113:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 113 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 114:src/display.c ****   // Separators used by various modes
 115:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 115 3 view .LVU1
  35              		.loc 1 115 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 116:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 116 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 115 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 115 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 113:src/display.c ****   // Separators used by various modes
  44              		.loc 1 113 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 115:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 115 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 116 5 is_stmt 1 view .LVU8
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccSEf3H9.s 			page 4


  52              		.loc 1 117 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 118:src/display.c ****   }
 119:src/display.c ****   else {
 120:src/display.c ****     SeparatorMode = SEP_COMMA;
 121:src/display.c ****     DecimalMode = DECIMAL_DOT;
 122:src/display.c ****   }
 123:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 123 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 117 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 116 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 117 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 123 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 116:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 116 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 117:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 117 5 is_stmt 1 view .LVU16
  67              		.loc 1 123 3 view .LVU17
  68              		.loc 1 123 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 123 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 124:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 124 5 is_stmt 1 view .LVU20
  76              		.loc 1 124 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 125:src/display.c **** }
  80              		.loc 1 125 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 120 5 is_stmt 1 view .LVU23
 121:src/display.c ****   }
  90              		.loc 1 121 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 123 8 view .LVU25
ARM GAS  /tmp/ccSEf3H9.s 			page 5


  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 121:src/display.c ****   }
  94              		.loc 1 121 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 120 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 123:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 123 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 120:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 120 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 121:src/display.c ****   }
 102              		.loc 1 121 5 is_stmt 1 view .LVU30
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 123 3 view .LVU31
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 123 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 123:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 123 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 125 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 126:src/display.c **** 
 127:src/display.c **** 
 128:src/display.c **** /* Table of error messages.
 129:src/display.c ****  * These consist of a double string.  The first is displayed in the
 130:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 131:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 132:src/display.c ****  */
 133:src/display.c **** void error_message(const unsigned int e) 
ARM GAS  /tmp/ccSEf3H9.s 			page 6


 134:src/display.c **** {
 135:src/display.c **** #define MSG1(top) top "\0"
 136:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 137:src/display.c **** 
 138:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 139:src/display.c ****   static const char *const error_table[] = 
 140:src/display.c ****     {
 141:src/display.c ****       // manually get the order correct!
 142:src/display.c ****       MSG2("Running", "ProGraMm"),
 143:src/display.c ****       MSG1("Domain"),
 144:src/display.c ****       MSG2("Bad time", "or dAtE"),
 145:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 146:src/display.c ****       MSG1("+\237"),
 147:src/display.c ****       MSG1("-\237"),
 148:src/display.c ****       MSG2("No such", "LAbEL"),
 149:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 150:src/display.c ****       MSG1("Out of range"),
 151:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 152:src/display.c ****       MSG2("Bad digit", "1"),
 153:src/display.c ****       MSG2("Too long", "1"),
 154:src/display.c **** #else
 155:src/display.c ****       MSG1("Bad digit"),
 156:src/display.c ****       MSG1("Too long"),
 157:src/display.c **** #endif
 158:src/display.c ****       MSG2("RAM is", "FuLL"),
 159:src/display.c ****       MSG2("Stack", "CLASH"),
 160:src/display.c ****       MSG1("Bad mode"),
 161:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 162:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 163:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 164:src/display.c ****       MSG1("I/O"),
 165:src/display.c ****       MSG2("Invalid", "dAtA"),
 166:src/display.c ****       MSG2("Write", "ProtEctEd"),
 167:src/display.c ****       MSG2("No root", "Found"),
 168:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 169:src/display.c ****       MSG1("Singular"),
 170:src/display.c ****       MSG2("Flash is", "FuLL"),
 171:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 172:src/display.c **** #ifndef SHIFT_EXPONENT
 173:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG2("Too\007\304 small", "1"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG2("Too small", "1"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG2("Too big", "1"),
 180:src/display.c **** #  else
 181:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 182:src/display.c ****       MSG1("Too\007\304 small"),
 183:src/display.c **** #     else
 184:src/display.c ****       MSG1("Too small"),
 185:src/display.c **** #     endif
 186:src/display.c ****       MSG1("Too big"),
 187:src/display.c **** #  endif
 188:src/display.c **** #endif
 189:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 190:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
ARM GAS  /tmp/ccSEf3H9.s 			page 7


 191:src/display.c ****       MSG2("Interrupted", "X"),
 192:src/display.c **** #endif
 193:src/display.c ****     };
 194:src/display.c **** #undef MSG1
 195:src/display.c **** #undef MSG2
 196:src/display.c **** #ifndef REALBUILD
 197:src/display.c ****   static const char *const error_table_text[] =
 198:src/display.c ****     {
 199:src/display.c ****       " P r o g r a m ",
 200:src/display.c ****       "",
 201:src/display.c ****       " o r   d a t e ",
 202:src/display.c ****       " O p - c o d e ",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " L a b e l ",
 206:src/display.c ****       " O p e r a t i o n ",
 207:src/display.c ****       "",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " F u l l ",
 211:src/display.c ****       " C l a s h ",
 212:src/display.c ****       "",
 213:src/display.c ****       " T o o   s m a l l ",
 214:src/display.c ****       " D a t a   p o i n t s ",
 215:src/display.c ****       " P a r a m e t e r ",
 216:src/display.c ****       "",
 217:src/display.c ****       " D a t a ",
 218:src/display.c ****       " P r o t e c t e d ",
 219:src/display.c ****       " F o u n d ",
 220:src/display.c ****       " M i s m a t c h ",
 221:src/display.c ****       "",
 222:src/display.c ****       " F u l l ",
 223:src/display.c ****       " I n s t a l l e d ",
 224:src/display.c **** #ifndef SHIFT_EXPONENT
 225:src/display.c ****       "",
 226:src/display.c ****       "",
 227:src/display.c **** #endif
 228:src/display.c ****       "",
 229:src/display.c ****     };
 230:src/display.c **** #endif
 231:src/display.c **** 
 232:src/display.c ****   if (e != ERR_NONE || Running) {
 233:src/display.c ****     const char *p = error_table[e];
 234:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 235:src/display.c ****     if (*q == '\0')
 236:src/display.c ****       q = S7_ERROR;
 237:src/display.c ****     if (*q == 'X') {
 238:src/display.c ****       DispMsg = p;
 239:src/display.c ****       frozen_display();
 240:src/display.c ****     }
 241:src/display.c ****     else {
 242:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 243:src/display.c ****       if (*q == '1')
 244:src/display.c **** 	q = CNULL;
 245:src/display.c **** #endif
 246:src/display.c ****       message(p, q);
 247:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
ARM GAS  /tmp/ccSEf3H9.s 			page 8


 248:src/display.c **** #ifndef REALBUILD
 249:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 250:src/display.c **** #endif
 251:src/display.c ****     }
 252:src/display.c **** #ifdef INFRARED
 253:src/display.c ****     if (Tracing) {
 254:src/display.c ****       if (*q == 'X')
 255:src/display.c **** 	print_reg(regX_idx, p, 0);
 256:src/display.c ****       else {
 257:src/display.c **** 	print_tab(0);
 258:src/display.c **** 	print_line(p, 0);
 259:src/display.c **** 	print(' ');
 260:src/display.c **** 	while (*q != '\0') {
 261:src/display.c **** 	  int c = *q;
 262:src/display.c **** 	  if (c >= 'A')
 263:src/display.c **** 	    c |= 0x60; // ASCII lower case
 264:src/display.c **** 	  print(c);
 265:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 266:src/display.c **** 	    ++q;
 267:src/display.c **** 	  ++q;
 268:src/display.c **** 	}
 269:src/display.c **** 	print_advance( 0 );
 270:src/display.c ****       }
 271:src/display.c ****     }
 272:src/display.c **** #endif
 273:src/display.c ****   }
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** 
 277:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 278:src/display.c ****  * display.
 279:src/display.c ****  */
 280:src/display.c **** #define D_TOP 64
 281:src/display.c **** #define D_TL 32
 282:src/display.c **** #define D_TR 8
 283:src/display.c **** #define D_MIDDLE 16
 284:src/display.c **** #define D_BL 4
 285:src/display.c **** #define D_BR 1
 286:src/display.c **** #define D_BOTTOM 2
 287:src/display.c **** 
 288:src/display.c **** #include "charset7.h"
 289:src/display.c **** 
 290:src/display.c **** #ifndef REALBUILD
 291:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 292:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 293:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 294:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 295:src/display.c **** 
 296:src/display.c **** static void set_mant_sign_dot()
 297:src/display.c **** {
 298:src/display.c ****   LastDisplayedNumber[0]='-';
 299:src/display.c ****   set_dot(MANT_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_mant_sign_dot()
 303:src/display.c **** {
 304:src/display.c ****   LastDisplayedNumber[0]=' ';
ARM GAS  /tmp/ccSEf3H9.s 			page 9


 305:src/display.c ****   clr_dot(MANT_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** static void set_exp_sign_dot()
 309:src/display.c **** {
 310:src/display.c ****   LastDisplayedExponent[0]='-';
 311:src/display.c ****   set_dot(EXP_SIGN);
 312:src/display.c **** }
 313:src/display.c **** 
 314:src/display.c **** static void clr_exp_sign_dot()
 315:src/display.c **** {
 316:src/display.c ****   LastDisplayedExponent[0]=' ';
 317:src/display.c ****   clr_dot(EXP_SIGN);
 318:src/display.c **** }
 319:src/display.c **** 
 320:src/display.c **** #else
 321:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 322:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 325:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 326:src/display.c **** 
 327:src/display.c **** #endif
 328:src/display.c **** 
 329:src/display.c **** #ifndef REALBUILD
 330:src/display.c **** int getdig(int ch)
 331:src/display.c **** #else
 332:src/display.c ****   static int getdig(int ch)
 333:src/display.c **** #endif
 334:src/display.c **** {
 335:src/display.c ****   // perform index lookup
 336:src/display.c ****   return digtbl[ch&0xff];
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** void dot(int n, int on) {
 340:src/display.c ****   if (on)	set_dot(n);
 341:src/display.c ****   else	clr_dot(n);
 342:src/display.c **** }
 343:src/display.c **** 
 344:src/display.c **** 
 345:src/display.c **** /* Set the decimal point *after* the indicated digit
 346:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 347:src/display.c ****  * of decimal.
 348:src/display.c ****  */
 349:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 350:src/display.c ****   if (res) {
 351:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 352:src/display.c ****   } else {
 353:src/display.c ****     set_dot(posn+7);
 354:src/display.c ****     if (decimal != DECIMAL_DOT)
 355:src/display.c ****       set_dot(posn+8);
 356:src/display.c **** #ifndef REALBUILD
 357:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 358:src/display.c **** #endif
 359:src/display.c ****   }
 360:src/display.c ****   return res;
 361:src/display.c **** }
ARM GAS  /tmp/ccSEf3H9.s 			page 10


 362:src/display.c **** 
 363:src/display.c **** /* Set the digit group separator *before* the specified digit.
 364:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 365:src/display.c ****  * sep argument.
 366:src/display.c ****  */
 367:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 368:src/display.c ****   if (sep == SEP_NONE)
 369:src/display.c ****     return res;
 370:src/display.c ****   if (res) {
 371:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 372:src/display.c ****     else *res++ = '.';
 373:src/display.c ****   } else {
 374:src/display.c ****     posn -= SEGS_PER_DIGIT;
 375:src/display.c ****     set_dot(posn+7);
 376:src/display.c ****     if (sep == SEP_COMMA)
 377:src/display.c ****       set_dot(posn+8);
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 380:src/display.c **** #endif
 381:src/display.c ****   }
 382:src/display.c ****   return res;
 383:src/display.c **** }
 384:src/display.c **** 
 385:src/display.c **** /* Set a digit in positions [base, base+6] */
 386:src/display.c **** static void set_dig(int base, int ch)
 387:src/display.c **** {
 136              		.loc 1 387 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 388:src/display.c ****   int i;
 140              		.loc 1 388 3 view .LVU36
 389:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 389 3 view .LVU37
 142              	.LBB173:
 143              	.LBI173:
 330:src/display.c **** #else
 144              		.loc 1 330 5 view .LVU38
 145              	.LBB174:
 336:src/display.c **** }
 146              		.loc 1 336 3 view .LVU39
 336:src/display.c **** }
 147              		.loc 1 336 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 336:src/display.c **** }
 149              		.loc 1 336 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE174:
 152              	.LBE173:
 390:src/display.c **** #ifndef REALBUILD
 391:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 391 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 387:src/display.c ****   int i;
 155              		.loc 1 387 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccSEf3H9.s 			page 11


 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB176:
 163              	.LBB175:
 336:src/display.c **** }
 164              		.loc 1 336 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 336:src/display.c **** }
 167              		.loc 1 336 16 view .LVU45
 168              	.LBE175:
 169              	.LBE176:
 170              		.loc 1 391 3 is_stmt 1 view .LVU46
 171              		.loc 1 391 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 392:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 392 5 is_stmt 1 view .LVU48
 174              		.loc 1 392 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 392 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 392 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 392 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 392 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 393:src/display.c ****   else
 394:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 395:src/display.c **** #endif
 396:src/display.c ****   for (i=6; i>=0; i--)
 397:src/display.c ****     {
 398:src/display.c ****       //		dot(base, c & (1 << i));
 399:src/display.c ****       if (c & (1 << i))
 400:src/display.c **** 	set_dot(base);
 196              		.loc 1 400 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 401:src/display.c ****       else
 402:src/display.c **** 	clr_dot(base);
 403:src/display.c ****       base++;
 199              		.loc 1 403 7 is_stmt 1 view .LVU55
 396:src/display.c ****     {
ARM GAS  /tmp/ccSEf3H9.s 			page 12


 200              		.loc 1 396 19 view .LVU56
 396:src/display.c ****     {
 201              		.loc 1 396 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 396:src/display.c ****     {
 204              		.loc 1 396 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 400:src/display.c ****       else
 208              		.loc 1 400 2 is_stmt 1 view .LVU59
 402:src/display.c ****       base++;
 209              		.loc 1 402 2 view .LVU60
 399:src/display.c **** 	set_dot(base);
 210              		.loc 1 399 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 399:src/display.c **** 	set_dot(base);
 212              		.loc 1 399 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 399:src/display.c **** 	set_dot(base);
 216              		.loc 1 399 7 is_stmt 1 view .LVU63
 399:src/display.c **** 	set_dot(base);
 217              		.loc 1 399 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 402:src/display.c ****       base++;
 219              		.loc 1 402 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 403 7 is_stmt 1 view .LVU66
 396:src/display.c ****     {
 223              		.loc 1 396 19 view .LVU67
 396:src/display.c ****     {
 224              		.loc 1 396 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 396:src/display.c ****     {
 227              		.loc 1 396 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 404:src/display.c ****     }
 405:src/display.c **** }
 231              		.loc 1 405 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 394:src/display.c **** #endif
 235              		.loc 1 394 5 is_stmt 1 view .LVU71
 394:src/display.c **** #endif
 236              		.loc 1 394 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 394:src/display.c **** #endif
 238              		.loc 1 394 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
ARM GAS  /tmp/ccSEf3H9.s 			page 13


 394:src/display.c **** #endif
 240              		.loc 1 394 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 394:src/display.c **** #endif
 242              		.loc 1 394 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 394:src/display.c **** #endif
 246              		.loc 1 394 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 406:src/display.c **** 
 407:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 408:src/display.c ****   if (res) *res++ = ch;
 409:src/display.c ****   else	set_dig(base, ch);
 410:src/display.c ****   return res;
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** 
 414:src/display.c **** static void set_digits_string(const char *msg, int j) {
 415:src/display.c ****   for (; *msg != '\0'; msg++) {
 416:src/display.c ****     if (*msg == '.' || *msg == ',')
 417:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 418:src/display.c ****     else {
 419:src/display.c ****       set_dig_s(j, *msg, CNULL);
 420:src/display.c ****       j += SEGS_PER_DIGIT;
 421:src/display.c ****     }
 422:src/display.c ****   }
 423:src/display.c **** }
 424:src/display.c **** 
 425:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 426:src/display.c ****   int i;
 427:src/display.c ****   const int n = res == NULL ? 3 : 4;
 428:src/display.c **** 
 429:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
ARM GAS  /tmp/ccSEf3H9.s 			page 14


 430:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** /* Force the exponent display
 434:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 435:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 436:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 437:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 438:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 439:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 440:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 441:src/display.c ****  */
 442:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 443:src/display.c ****   union {
 444:src/display.c ****     char buf[4];
 445:src/display.c ****     int i;
 446:src/display.c ****   } u;
 447:src/display.c ****   int negative;
 448:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 449:src/display.c ****   int thousands;
 450:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 451:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 452:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 453:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 454:src/display.c **** #  else
 455:src/display.c ****   const int show_large_exponent = 1;
 456:src/display.c **** #  endif
 457:src/display.c **** #else
 458:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 459:src/display.c ****   int thousands;
 460:src/display.c **** #  endif
 461:src/display.c ****   const int show_large_exponent = 0;
 462:src/display.c **** #endif
 463:src/display.c **** 
 464:src/display.c ****   negative = flags & 2;
 465:src/display.c ****   if (exp < 0) {
 466:src/display.c ****     negative = 1;
 467:src/display.c ****     exp = -exp;
 468:src/display.c ****   }
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****   thousands = exp / 1000;
 471:src/display.c **** #endif
 472:src/display.c ****   if (res) {
 473:src/display.c **** #ifdef INCLUDE_YREG_CODE
 474:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 475:src/display.c ****     if (thousands != 0) {
 476:src/display.c **** #else
 477:src/display.c ****       if (exp > 999) {
 478:src/display.c **** #endif
 479:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 480:src/display.c **** 	// No exponent separator for large -ve exponents
 481:src/display.c ****       }
 482:src/display.c ****       else *res++ = 'e'; // Normal separator
 483:src/display.c **** #else
 484:src/display.c ****       *res++ = 'e';
 485:src/display.c **** #endif
 486:src/display.c ****       if (negative) *res++ = '-';
ARM GAS  /tmp/ccSEf3H9.s 			page 15


 487:src/display.c ****     }
 488:src/display.c ****     else {
 489:src/display.c ****       if (negative) SET_EXP_SIGN;
 490:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 491:src/display.c ****       if (thousands != 0) {
 492:src/display.c **** #else
 493:src/display.c **** 	if (exp > 999) {
 494:src/display.c **** #endif
 495:src/display.c **** 	  if (!show_large_exponent
 496:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 497:src/display.c **** 	      && (flags & 8) == 0
 498:src/display.c **** #endif
 499:src/display.c **** 	      ) {
 500:src/display.c **** #ifdef REALBUILD
 501:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 502:src/display.c **** #else
 503:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 504:src/display.c **** #endif
 505:src/display.c **** 	    goto no_number;
 506:src/display.c **** 	  }
 507:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 508:src/display.c **** 	  else {
 509:src/display.c **** 	    exp -= thousands * 1000;
 510:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 511:src/display.c **** 	    if (flags & 16) {
 512:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 513:src/display.c **** 	      int i;
 514:src/display.c **** 
 515:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 516:src/display.c **** 		// Clear digits and separators
 517:src/display.c **** 		clr_dot(i);
 518:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 519:src/display.c **** 	    }
 520:src/display.c **** #  endif
 521:src/display.c **** 	    if (negative) {
 522:src/display.c **** 	      CLR_EXP_SIGN;
 523:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 524:src/display.c **** 	    }
 525:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 526:src/display.c **** 	    flags = 1;
 527:src/display.c **** 	  }
 528:src/display.c **** #endif
 529:src/display.c **** 	}
 530:src/display.c ****       }
 531:src/display.c **** #ifdef REALBUILD
 532:src/display.c ****       u.i = 0; // Smaller ARM code
 533:src/display.c **** #else
 534:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 535:src/display.c **** #endif
 536:src/display.c ****       if (flags & 5) {
 537:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 538:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 539:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 540:src/display.c **** 	  int i;
 541:src/display.c **** 
 542:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 543:src/display.c **** 	    if (u.buf[i] == '0')
ARM GAS  /tmp/ccSEf3H9.s 			page 16


 544:src/display.c **** 	      u.buf[i] = ' ';
 545:src/display.c **** 	    else
 546:src/display.c **** 	      break;
 547:src/display.c **** 	  }
 548:src/display.c **** 	  if (i != 0 && negative) {
 549:src/display.c **** 	    // Move minus sign to right in front of exponent
 550:src/display.c **** 	    CLR_EXP_SIGN;
 551:src/display.c **** 	    u.buf[i - 1] = '-';
 552:src/display.c **** 	  }
 553:src/display.c **** 	}
 554:src/display.c **** #endif
 555:src/display.c ****       }
 556:src/display.c ****       else
 557:src/display.c **** 	num_arg(u.buf, exp);
 558:src/display.c ****     no_number:
 559:src/display.c ****       set_exp_digits_string(u.buf, res);
 560:src/display.c ****     }
 561:src/display.c **** 
 562:src/display.c ****     static void carry_overflow(void) {
 563:src/display.c ****       const int base = SEGS_EXP_BASE;
 564:src/display.c ****       int c;
 565:src/display.c ****       unsigned int b;
 566:src/display.c **** 
 567:src/display.c ****       // Figure out the base
 568:src/display.c ****       switch (State2.smode) {
 569:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 570:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 571:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 572:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 573:src/display.c ****       default:	b = UState.int_base+1;	break;
 574:src/display.c ****       }
 575:src/display.c **** 
 576:src/display.c ****       // Display the base as the first exponent digit
 577:src/display.c ****       if (b > 10 && b < 16)
 578:src/display.c **** 	SET_EXP_SIGN;
 579:src/display.c ****       c = "B34567o9D12345h"[b-2];
 580:src/display.c ****       set_dig(base, c);
 581:src/display.c **** 
 582:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 583:src/display.c ****       if (get_carry())
 584:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 585:src/display.c ****       if (get_overflow())
 586:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 587:src/display.c ****     }
 588:src/display.c **** 
 589:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 590:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 591:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 592:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 593:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 594:src/display.c **** #endif
 595:src/display.c **** 
 596:src/display.c ****     /* Display the annunicator text line.
 597:src/display.c ****      * Care needs to be taken to keep things aligned.
 598:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 599:src/display.c ****      */
 600:src/display.c **** #ifdef TOP_ROW
ARM GAS  /tmp/ccSEf3H9.s 			page 17


 601:src/display.c ****     static void annunciators(void) {
 602:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 603:src/display.c ****       char buf[42], *p = buf, *q="";
 604:src/display.c ****       char buf2[42], *p2 = buf2;
 605:src/display.c ****       int n;
 606:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 607:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 608:src/display.c ****       // Constant variables and code branches depending on a constant variable
 609:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 610:src/display.c ****       // feature run-time configurable if needed.
 611:src/display.c **** #ifdef INCLUDE_YREG_CODE
 612:src/display.c **** #  ifdef YREG_ALWAYS_ON
 613:src/display.c ****       const int yreg_enabled = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_enabled = UState.show_y;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 618:src/display.c ****       const int yreg_hms = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_hms = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 623:src/display.c ****       const int yreg_fract = 1;
 624:src/display.c **** #  else
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #  endif
 627:src/display.c **** #else
 628:src/display.c ****       const int yreg_enabled = 0;
 629:src/display.c ****       const int yreg_hms = 0;
 630:src/display.c ****       const int yreg_fract = 0;
 631:src/display.c **** #endif
 632:src/display.c **** #ifdef RP_PREFIX
 633:src/display.c ****       const int rp_prefix = 1;
 634:src/display.c **** #else
 635:src/display.c ****       const int rp_prefix = 0;
 636:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 637:src/display.c **** #endif
 638:src/display.c ****       // Indicates whether font escape code is compiled in.
 639:src/display.c ****       // This variable will always be set at compile time.
 640:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 641:src/display.c ****       const int has_FONT_ESCAPE = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int has_FONT_ESCAPE = 0;
 644:src/display.c **** #endif
 645:src/display.c **** 
 646:src/display.c ****       xset(buf, '\0', sizeof(buf));
 647:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 648:src/display.c ****       
 649:src/display.c ****       if (is_intmode()) {
 650:src/display.c **** #ifdef SHOW_STACK_SIZE
 651:src/display.c **** 	if (shift_char == ' ') {
 652:src/display.c **** 	  *p2++ = '\007';
 653:src/display.c **** 	  *p2++ = '\346';
 654:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 655:src/display.c **** 	}
 656:src/display.c **** 	else
 657:src/display.c **** #endif
ARM GAS  /tmp/ccSEf3H9.s 			page 18


 658:src/display.c **** 	  {
 659:src/display.c **** 	    *p2++ = shift_char;
 660:src/display.c **** 	    *p2++ = '\006';
 661:src/display.c **** 	  }
 662:src/display.c **** 
 663:src/display.c **** 	switch(int_mode()) {
 664:src/display.c **** 	default:
 665:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 666:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 667:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 668:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 669:src/display.c **** 	}
 670:src/display.c **** 	q = scopy(p2, q);
 671:src/display.c **** 	*q++ = '\006';
 672:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 673:src/display.c **** 
 674:src/display.c **** 	if (IntMaxWindow > 0) {
 675:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 676:src/display.c **** 	  if (*q == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  if (q[1] == '1')
 679:src/display.c **** 	    n += 2;
 680:src/display.c **** 	  while (n-- > 0)
 681:src/display.c **** 	    *p2++ = '\006';
 682:src/display.c **** 
 683:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 684:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 685:src/display.c **** 	}
 686:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 687:src/display.c ****       }
 688:src/display.c ****       else if (!yreg_enabled
 689:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 690:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 691:src/display.c **** #endif
 692:src/display.c **** 	       ) {
 693:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 694:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 695:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 696:src/display.c **** 	if (shift_char == ' ') {
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\342';
 699:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 700:src/display.c **** 	  *p2++ = '\007';
 701:src/display.c **** 	  *p2++ = '\344';
 702:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 703:src/display.c **** 	}
 704:src/display.c **** 	else
 705:src/display.c **** #endif
 706:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 707:src/display.c **** 	    *p2++ = shift_char;
 708:src/display.c **** 	    *p2++ = '\006';
 709:src/display.c **** 	  }
 710:src/display.c **** 	  else {
 711:src/display.c **** 	    *p2++ = 'D';
 712:src/display.c **** 	  }
 713:src/display.c **** 
 714:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/ccSEf3H9.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\024';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 	if (State2.arrow) {
 720:src/display.c **** 	  *p2++ = ' ';
 721:src/display.c **** 	  *p2 = '\015';
 722:src/display.c **** 	  goto skip;
 723:src/display.c **** 	}
 724:src/display.c **** 
 725:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 726:src/display.c **** 	  if (State2.wascomplex) {
 727:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 728:src/display.c **** 	  }
 729:src/display.c **** 	  else if (rp_prefix) {
 730:src/display.c **** 	    if (RectPolConv == 1) {
 731:src/display.c **** 	      q = "\007\306<";
 732:src/display.c **** 	    }
 733:src/display.c **** 	    else {
 734:src/display.c **** 	      q = "\007\306y";
 735:src/display.c **** 	    }
 736:src/display.c **** 	  }
 737:src/display.c **** 	  p = scopy(buf, q);
 738:src/display.c **** 
 739:src/display.c **** 	  goto display_yreg;
 740:src/display.c **** 	}
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	p2 = scopy(p2, q);
 757:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 758:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 759:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 760:src/display.c **** 	}
 761:src/display.c **** #else
 762:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 763:src/display.c **** 	*p2++ = '\007';
 764:src/display.c **** 	*p2++ = '\342';
 765:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 766:src/display.c **** #endif
 767:src/display.c ****       }
 768:src/display.c ****       else { // yreg_enabled
 769:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 770:src/display.c **** 	if (State2.cmplx) {
 771:src/display.c **** 	  *p2++ = '\007';
ARM GAS  /tmp/ccSEf3H9.s 			page 20


 772:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 773:src/display.c **** 	  *p2++ = shift_char;
 774:src/display.c **** 	  //	  q = "\024";
 775:src/display.c **** 	  *p2++ = '\024';
 776:src/display.c **** 	}
 777:src/display.c **** 	else {// if (shift_char != ' ') {
 778:src/display.c **** 	  *p2++ = '\007';
 779:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 780:src/display.c **** 	  *p2++ = shift_char;
 781:src/display.c **** 	  //	  goto no_copy;
 782:src/display.c **** 	}
 783:src/display.c **** 	//	else
 784:src/display.c **** #endif
 785:src/display.c **** 	  if (State2.wascomplex) {
 786:src/display.c **** 	    q = "\007\207i";
 787:src/display.c **** 	    p = scopy(p, q);
 788:src/display.c **** 	    //	    goto no_copy;
 789:src/display.c **** 	  }
 790:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 791:src/display.c **** 	    q = "\007\307<";
 792:src/display.c **** 	    p = scopy(p, q);
 793:src/display.c **** 	    //	    goto no_copy;
 794:src/display.c **** 	  }
 795:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 796:src/display.c **** 	    q = "\007\307y";
 797:src/display.c **** 	    p = scopy(p, q);
 798:src/display.c **** 	    //	    goto no_copy;
 799:src/display.c **** 	  }
 800:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 801:src/display.c **** 	  //	  else
 802:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 803:src/display.c **** 	    //	    q = "\007\207\007";
 804:src/display.c **** 	      *p2++ = '\007';
 805:src/display.c **** 	      *p2++ = '\207';
 806:src/display.c **** 	      *p2++ = '\007';	    
 807:src/display.c **** 	    }
 808:src/display.c **** 	    else {
 809:src/display.c **** 	      *p2++ = '\007';
 810:src/display.c **** 	      *p2++ = '\207';
 811:src/display.c **** 	      *p2++ = ' ';
 812:src/display.c **** 	    }
 813:src/display.c **** #endif
 814:src/display.c **** 	    //	else { 
 815:src/display.c **** #ifndef SHOW_STACK_SIZE
 816:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 817:src/display.c **** 	  p2 = scopy(p2, q);
 818:src/display.c **** #else
 819:src/display.c **** 	  if (is_dblmode()) {
 820:src/display.c **** 	    *p2++ = '\007';
 821:src/display.c **** 	    *p2++ = '\342';
 822:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 823:src/display.c **** 	    //	    q = "\007\345D";
 824:src/display.c **** 	    *p2++ = '\007';
 825:src/display.c **** 	    *p2++ = '\345';
 826:src/display.c **** 	    *p2++ = 'D';
 827:src/display.c **** 	  }
 828:src/display.c **** 	  else {
ARM GAS  /tmp/ccSEf3H9.s 			page 21


 829:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 830:src/display.c **** 	    p2 = scopy(p2, q);
 831:src/display.c **** 	  }
 832:src/display.c **** #endif
 833:src/display.c **** 	  //	}
 834:src/display.c **** 	//	p2 = scopy(p2, q);
 835:src/display.c **** 
 836:src/display.c **** 	switch (UState.date_mode) {
 837:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 838:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 839:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 842:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 845:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 846:src/display.c **** #endif
 847:src/display.c **** #endif
 848:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 849:src/display.c **** 	}
 850:src/display.c **** 	  
 851:src/display.c **** 	//      no_copy:
 852:src/display.c **** 	// display either arrow or datemode
 853:src/display.c **** 	if (State2.arrow) {
 854:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 855:src/display.c **** 	} // no need to skip y display with arrow here
 856:src/display.c **** 	else {
 857:src/display.c **** 	  p2 = scopy(p2, q);
 858:src/display.c **** 	}
 859:src/display.c **** 	if (State2.runmode) {
 860:src/display.c **** 	  decNumber y;
 861:src/display.c **** 	display_yreg:
 862:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 863:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 864:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 865:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 866:src/display.c **** 	   */
 867:src/display.c **** 	  if (is_intmode()) {
 868:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 869:src/display.c **** 	    goto skip;
 870:src/display.c **** 	  }
 871:src/display.c **** 		      
 872:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 873:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 874:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 875:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 876:src/display.c **** 	    if (yreg_hms && State2.hms) {
 877:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 878:src/display.c **** 
 879:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 880:src/display.c **** 	      UState.nothousands = 1;
 881:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 882:src/display.c **** 	      UState.nothousands = saved_nothousands;
 883:src/display.c **** 	      // First replace the '@' character with the degree symbol
 884:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 885:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
ARM GAS  /tmp/ccSEf3H9.s 			page 22


 886:src/display.c **** 	      // then remove the fractional part of the seconds.
 887:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 888:src/display.c **** 	      while (*p) {
 889:src/display.c **** 		replace_char(buf, p[0], p[1]);
 890:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 891:src/display.c **** 		  goto skip;
 892:src/display.c **** 		}
 893:src/display.c **** 		p += 2;
 894:src/display.c **** 	      }
 895:src/display.c **** 	      goto skip;
 896:src/display.c **** 	    }
 897:src/display.c **** 	    if (yreg_fract && UState.fract
 898:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 899:src/display.c **** 		&& !State2.cmplx
 900:src/display.c **** #endif
 901:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 902:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 903:src/display.c **** #endif
 904:src/display.c **** 		&& set_x_fract(&y, p)) {
 905:src/display.c **** 	      char ltgteq;
 906:src/display.c **** 
 907:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 908:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 909:src/display.c **** 	      ltgteq = *q;
 910:src/display.c **** 	      switch (ltgteq) {
 911:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 912:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 913:src/display.c **** 	      }
 914:src/display.c **** 	      scopy(q, "\007\344?");
 915:src/display.c **** 	      q[2] = ltgteq;
 916:src/display.c **** 
 917:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 918:src/display.c **** 		goto skip;
 919:src/display.c **** 	      }
 920:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 921:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 922:src/display.c **** 		goto skip;
 923:src/display.c **** 	      }
 924:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 925:src/display.c **** 	    }
 926:src/display.c **** 	  }
 927:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 928:src/display.c **** 	    int extra_pixels;
 929:src/display.c **** 
 930:src/display.c **** 	    set_x_dn(&y, p, &n);
 931:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 932:src/display.c **** 	    if (extra_pixels <= 0)
 933:src/display.c **** 	      break;
 934:src/display.c **** 
 935:src/display.c **** 	    xset(p, '\0', n+10);
 936:src/display.c **** 
 937:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 938:src/display.c **** 	  }
 939:src/display.c **** 	}
 940:src/display.c ****       }
 941:src/display.c ****       
 942:src/display.c ****     skip:
ARM GAS  /tmp/ccSEf3H9.s 			page 23


 943:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 944:src/display.c ****       set_status_top_always(buf2);
 945:src/display.c ****       
 946:src/display.c ****     }
 947:src/display.c **** #else
 948:src/display.c ****     static void annunciators(void) {
 949:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 950:src/display.c ****       char buf[42], *p = buf, *q="";
 951:src/display.c ****       int n;
 952:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 953:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 954:src/display.c ****       // Constant variables and code branches depending on a constant variable
 955:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 956:src/display.c ****       // feature run-time configurable if needed.
 957:src/display.c **** #ifdef INCLUDE_YREG_CODE
 958:src/display.c **** #  ifdef YREG_ALWAYS_ON
 959:src/display.c ****       const int yreg_enabled = 1;
 960:src/display.c **** #  else
 961:src/display.c ****       const int yreg_enabled = UState.show_y;
 962:src/display.c **** #  endif
 963:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 964:src/display.c ****       const int yreg_hms = 1;
 965:src/display.c **** #  else
 966:src/display.c ****       const int yreg_hms = 0;
 967:src/display.c **** #  endif
 968:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 969:src/display.c ****       const int yreg_fract = 1;
 970:src/display.c **** #  else
 971:src/display.c ****       const int yreg_fract = 0;
 972:src/display.c **** #  endif
 973:src/display.c **** #else
 974:src/display.c ****       const int yreg_enabled = 0;
 975:src/display.c ****       const int yreg_hms = 0;
 976:src/display.c ****       const int yreg_fract = 0;
 977:src/display.c **** #endif
 978:src/display.c **** #ifdef RP_PREFIX
 979:src/display.c ****       const int rp_prefix = 1;
 980:src/display.c **** #else
 981:src/display.c ****       const int rp_prefix = 0;
 982:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 983:src/display.c **** #endif
 984:src/display.c ****       // Indicates whether font escape code is compiled in.
 985:src/display.c ****       // This variable will always be set at compile time.
 986:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 987:src/display.c ****       const int has_FONT_ESCAPE = 1;
 988:src/display.c **** #else
 989:src/display.c ****       const int has_FONT_ESCAPE = 0;
 990:src/display.c **** #endif
 991:src/display.c **** 
 992:src/display.c ****       xset(buf, '\0', sizeof(buf));
 993:src/display.c ****       
 994:src/display.c ****       if (is_intmode()) {
 995:src/display.c **** #ifdef SHOW_STACK_SIZE
 996:src/display.c **** 	if (shift_char == ' ') {
 997:src/display.c **** 	  *p++ = '\007';
 998:src/display.c **** 	  *p++ = '\346';
 999:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
ARM GAS  /tmp/ccSEf3H9.s 			page 24


1000:src/display.c **** 	}
1001:src/display.c **** 	else
1002:src/display.c **** #endif
1003:src/display.c **** 	  {
1004:src/display.c **** 	    *p++ = shift_char;
1005:src/display.c **** 	    *p++ = '\006';
1006:src/display.c **** 	  }
1007:src/display.c **** 
1008:src/display.c **** 	switch(int_mode()) {
1009:src/display.c **** 	default:
1010:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1011:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1012:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1013:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1014:src/display.c **** 	}
1015:src/display.c **** 	q = scopy(p, q);
1016:src/display.c **** 	*q++ = '\006';
1017:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1018:src/display.c **** 
1019:src/display.c **** 	if (IntMaxWindow > 0) {
1020:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1021:src/display.c **** 	  if (*q == '1')
1022:src/display.c **** 	    n += 2;
1023:src/display.c **** 	  if (q[1] == '1')
1024:src/display.c **** 	    n += 2;
1025:src/display.c **** 	  while (n-- > 0)
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 
1028:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1029:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1030:src/display.c **** 	}
1031:src/display.c ****       }
1032:src/display.c ****       else if (!yreg_enabled
1033:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1034:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1035:src/display.c **** #endif
1036:src/display.c **** 	       ) {
1037:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1038:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1039:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\342';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	  *p++ = '\007';
1045:src/display.c **** 	  *p++ = '\344';
1046:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1047:src/display.c **** 	}
1048:src/display.c **** 	else
1049:src/display.c **** #endif
1050:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1051:src/display.c **** 	    *p++ = shift_char;
1052:src/display.c **** 	    *p++ = '\006';
1053:src/display.c **** 	  }
1054:src/display.c **** 	  else {
1055:src/display.c **** 	    *p++ = 'D';
1056:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 25


1057:src/display.c **** 
1058:src/display.c **** 	if (State2.cmplx) {
1059:src/display.c **** 	  *p++ = ' ';
1060:src/display.c **** 	  *p = '\024';
1061:src/display.c **** 	  goto skip;
1062:src/display.c **** 	}
1063:src/display.c **** 	if (State2.arrow) {
1064:src/display.c **** 	  *p++ = ' ';
1065:src/display.c **** 	  *p = '\015';
1066:src/display.c **** 	  goto skip;
1067:src/display.c **** 	}
1068:src/display.c **** 
1069:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1070:src/display.c **** 	  if (State2.wascomplex) {
1071:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1072:src/display.c **** 	  }
1073:src/display.c **** 	  else if (rp_prefix) {
1074:src/display.c **** 	    if (RectPolConv == 1) {
1075:src/display.c **** 	      q = "\007\306<";
1076:src/display.c **** 	    }
1077:src/display.c **** 	    else {
1078:src/display.c **** 	      q = "\007\306y";
1079:src/display.c **** 	    }
1080:src/display.c **** 	  }
1081:src/display.c **** 	  p = scopy(buf, q);
1082:src/display.c **** 
1083:src/display.c **** 	  goto display_yreg;
1084:src/display.c **** 	}
1085:src/display.c **** 
1086:src/display.c **** 	switch (UState.date_mode) {
1087:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1088:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1089:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1090:src/display.c **** #endif
1091:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1092:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1093:src/display.c **** #endif
1094:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1095:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1096:src/display.c **** #endif
1097:src/display.c **** #endif
1098:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1099:src/display.c **** 	}
1100:src/display.c **** 	p = scopy(p, q);
1101:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1102:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1103:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1104:src/display.c **** 	}
1105:src/display.c **** #else
1106:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1107:src/display.c **** 	*p++ = '\007';
1108:src/display.c **** 	*p++ = '\342';
1109:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1110:src/display.c **** #endif
1111:src/display.c ****       }
1112:src/display.c ****       else { // yreg_enabled
1113:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccSEf3H9.s 			page 26


1114:src/display.c **** 	if (State2.cmplx) {
1115:src/display.c **** 	  *p++ = '\007';
1116:src/display.c **** 	  *p++ = '\344';
1117:src/display.c **** 	  *p++ = shift_char;
1118:src/display.c **** 	  q = "\024";
1119:src/display.c **** 	}
1120:src/display.c **** 	else if (shift_char != ' ') {
1121:src/display.c **** 	  *p++ = '\007';
1122:src/display.c **** 	  *p++ = '\307';
1123:src/display.c **** 	  *p++ = shift_char;
1124:src/display.c **** 	  goto no_copy;
1125:src/display.c **** 	}
1126:src/display.c **** 	else
1127:src/display.c **** #endif
1128:src/display.c **** 	  if (State2.wascomplex) {
1129:src/display.c **** 	    q = "\007\207i";
1130:src/display.c **** 	  }
1131:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1132:src/display.c **** 	    q = "\007\307<";
1133:src/display.c **** 	  }
1134:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1135:src/display.c **** 	    q = "\007\307y";
1136:src/display.c **** 	  }
1137:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1138:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1139:src/display.c **** 	    q = "\007\207\007";
1140:src/display.c **** 	  }
1141:src/display.c **** #endif
1142:src/display.c **** 	  else {
1143:src/display.c **** #ifndef SHOW_STACK_SIZE
1144:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1145:src/display.c **** #else
1146:src/display.c **** 	    if (is_dblmode()) {
1147:src/display.c **** 	      *p++ = '\007';
1148:src/display.c **** 	      *p++ = '\342';
1149:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1150:src/display.c **** 	      q = "\007\345D";
1151:src/display.c **** 	    }
1152:src/display.c **** 	    else {
1153:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1154:src/display.c **** 	    }
1155:src/display.c **** #endif
1156:src/display.c **** 	  }
1157:src/display.c **** 	p = scopy(p, q);
1158:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1159:src/display.c ****       no_copy:
1160:src/display.c **** #endif
1161:src/display.c **** 
1162:src/display.c **** 	if (State2.arrow) {
1163:src/display.c **** 	  scopy(p, "\007\204\006\015");
1164:src/display.c **** 	} else if (State2.runmode) {
1165:src/display.c **** 	  decNumber y;
1166:src/display.c **** 	display_yreg:
1167:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1168:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1169:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1170:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
ARM GAS  /tmp/ccSEf3H9.s 			page 27


1171:src/display.c **** 	   */
1172:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1173:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1174:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1175:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1176:src/display.c **** 	    if (yreg_hms && State2.hms) {
1177:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1178:src/display.c **** 
1179:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1180:src/display.c **** 	      UState.nothousands = 1;
1181:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1182:src/display.c **** 	      UState.nothousands = saved_nothousands;
1183:src/display.c **** 	      // First replace the '@' character with the degree symbol
1184:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1185:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1186:src/display.c **** 	      // then remove the fractional part of the seconds.
1187:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1188:src/display.c **** 	      while (*p) {
1189:src/display.c **** 		replace_char(buf, p[0], p[1]);
1190:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1191:src/display.c **** 		  goto skip;
1192:src/display.c **** 		}
1193:src/display.c **** 		p += 2;
1194:src/display.c **** 	      }
1195:src/display.c **** 	      goto skip;
1196:src/display.c **** 	    }
1197:src/display.c **** 	    if (yreg_fract && UState.fract
1198:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1199:src/display.c **** 		&& !State2.cmplx
1200:src/display.c **** #endif
1201:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1202:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1203:src/display.c **** #endif
1204:src/display.c **** 		&& set_x_fract(&y, p)) {
1205:src/display.c **** 	      char ltgteq;
1206:src/display.c **** 
1207:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1208:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1209:src/display.c **** 	      ltgteq = *q;
1210:src/display.c **** 	      switch (ltgteq) {
1211:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1212:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1213:src/display.c **** 	      }
1214:src/display.c **** 	      scopy(q, "\007\344?");
1215:src/display.c **** 	      q[2] = ltgteq;
1216:src/display.c **** 
1217:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1218:src/display.c **** 		goto skip;
1219:src/display.c **** 	      }
1220:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1221:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1222:src/display.c **** 		goto skip;
1223:src/display.c **** 	      }
1224:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1225:src/display.c **** 	    }
1226:src/display.c **** 	  }
1227:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
ARM GAS  /tmp/ccSEf3H9.s 			page 28


1228:src/display.c **** 	    int extra_pixels;
1229:src/display.c **** 
1230:src/display.c **** 	    set_x_dn(&y, p, &n);
1231:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1232:src/display.c **** 	    if (extra_pixels <= 0)
1233:src/display.c **** 	      break;
1234:src/display.c **** 
1235:src/display.c **** 	    xset(p, '\0', n+10);
1236:src/display.c **** 
1237:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1238:src/display.c **** 	  }
1239:src/display.c **** 	}
1240:src/display.c ****       }
1241:src/display.c ****       
1242:src/display.c ****     skip:	set_status_top(buf);
1243:src/display.c ****     }
1244:src/display.c **** #endif //top_row
1245:src/display.c ****     static void disp_x(const char *p) {
1246:src/display.c ****       int i;
1247:src/display.c ****       int gotdot = -1;
1248:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1249:src/display.c ****       const
1250:src/display.c **** #endif
1251:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1252:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1253:src/display.c ****       int overflow_to_left = 0;
1254:src/display.c **** #endif
1255:src/display.c **** 
1256:src/display.c ****       if (*p == '-') {
1257:src/display.c **** 	SET_MANT_SIGN;
1258:src/display.c **** 	p++;
1259:src/display.c ****       }
1260:src/display.c **** 
1261:src/display.c ****       if (is_intmode()) {
1262:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1263:src/display.c **** 	  set_dig(i, *p);
1264:src/display.c **** 	  i += SEGS_PER_DIGIT;
1265:src/display.c **** 	}
1266:src/display.c **** 	carry_overflow();
1267:src/display.c ****       } else {
1268:src/display.c **** 	set_separator_decimal_modes();
1269:src/display.c **** 
1270:src/display.c **** 	i = 0;
1271:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1272:src/display.c **** 	if ( CmdLineDot > 1 ) {
1273:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1274:src/display.c **** 	  const
1275:src/display.c **** #  endif
1276:src/display.c **** 	    int double_dot = 0;
1277:src/display.c **** 	  int j;
1278:src/display.c **** 
1279:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1280:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1281:src/display.c **** 	      gotdot = j;
1282:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	      double_dot = (p[j+1] == '.');
1284:src/display.c **** #  endif
ARM GAS  /tmp/ccSEf3H9.s 			page 29


1285:src/display.c **** 	    }
1286:src/display.c **** 	  }
1287:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1288:src/display.c **** 	  if (j > 0) {
1289:src/display.c **** 	    p += j + 1;
1290:src/display.c **** 	    i = SEGS_PER_DIGIT;
1291:src/display.c **** 	    if (gotdot <= j) {
1292:src/display.c **** 	      gotdot = 0;
1293:src/display.c **** 	      if (double_dot)
1294:src/display.c **** 		p++;
1295:src/display.c **** 	    }
1296:src/display.c **** 	    else if (*p == '.') {
1297:src/display.c **** 	      gotdot = 0;
1298:src/display.c **** 	      p++;
1299:src/display.c **** 	      if (!double_dot)
1300:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1301:src/display.c **** 	    }
1302:src/display.c **** 	    else gotdot = -1;
1303:src/display.c **** 	    set_dig(0, '<');
1304:src/display.c **** 	    overflow_to_left = 1;
1305:src/display.c **** 	  }
1306:src/display.c **** 	  else gotdot = -1;
1307:src/display.c **** 	}
1308:src/display.c **** #endif
1309:src/display.c **** 
1310:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1311:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1312:src/display.c **** 	       && *p != 'D'
1313:src/display.c **** #endif
1314:src/display.c **** 	       ; p++) {
1315:src/display.c **** 	  if (*p == '.') {
1316:src/display.c **** 	    if (gotdot < 0)
1317:src/display.c **** 	      gotdot = i;
1318:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1319:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1320:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1321:src/display.c **** 	      if ( *(p+1) == '.' ) {
1322:src/display.c **** 		p++;
1323:src/display.c **** 	      }
1324:src/display.c **** #  else
1325:src/display.c **** 	      if ( i != gotdot ) {
1326:src/display.c **** #  endif
1327:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1328:src/display.c **** 		i += segs_per_digit;
1329:src/display.c **** 	      }
1330:src/display.c **** 	      else {
1331:src/display.c **** 		if ( CmdLineDot > 1 ) {
1332:src/display.c **** 		  i += segs_per_digit;
1333:src/display.c **** 		}
1334:src/display.c **** 		else {
1335:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1336:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1337:src/display.c **** 		}
1338:src/display.c **** 	      }
1339:src/display.c **** #else
1340:src/display.c **** 	      if (i > 0)
1341:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
ARM GAS  /tmp/ccSEf3H9.s 			page 30


1342:src/display.c **** 	      else {
1343:src/display.c **** 		set_dig(i, '0');
1344:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1345:src/display.c **** 		i += segs_per_digit;
1346:src/display.c **** 	      }
1347:src/display.c **** #endif
1348:src/display.c **** 	    } else {
1349:src/display.c **** 	      set_dig(i, *p);
1350:src/display.c **** 	      i += segs_per_digit;
1351:src/display.c **** 	    }
1352:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1353:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1354:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1355:src/display.c **** #endif
1356:src/display.c **** 	  }
1357:src/display.c **** 
1358:src/display.c **** 	  /* Implement a floating comma */
1359:src/display.c **** 	  if (gotdot < 0)
1360:src/display.c **** 	    gotdot = i;
1361:src/display.c **** 	  for (;;) {
1362:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1363:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1364:src/display.c **** 	      break;
1365:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1366:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1367:src/display.c **** 	      break;
1368:src/display.c **** #endif
1369:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1370:src/display.c **** 	  }
1371:src/display.c **** 
1372:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1373:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1374:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1375:src/display.c **** 	    int flags = 8;
1376:src/display.c **** #  else
1377:src/display.c **** 	    int flags = 12;
1378:src/display.c **** #  endif
1379:src/display.c **** 
1380:src/display.c **** 	    if (*p == 'D')
1381:src/display.c **** 	      flags |= 2;
1382:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1383:src/display.c **** 	      flags |= 16;
1384:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1385:src/display.c **** 	  }
1386:src/display.c **** #else
1387:src/display.c **** 	  if (*p == 'E') {
1388:src/display.c **** 	    p++;
1389:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1390:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1391:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1392:src/display.c **** #  else
1393:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  endif
1395:src/display.c **** 	  } 
1396:src/display.c **** #endif
1397:src/display.c **** 	}
1398:src/display.c ****       }
ARM GAS  /tmp/ccSEf3H9.s 			page 31


1399:src/display.c **** 
1400:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1401:src/display.c **** 
1402:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1403:src/display.c **** 	const int ws = word_size();
1404:src/display.c **** 	unsigned int b;
1405:src/display.c **** 	long long int vs = value;
1406:src/display.c **** 	unsigned long long int v;
1407:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1408:src/display.c **** 	int i, j, k;
1409:src/display.c **** 	int sign = 0;
1410:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1411:src/display.c **** 
1412:src/display.c **** 	switch (State2.smode) {
1413:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1414:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1415:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1416:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1417:src/display.c **** 	default:	b = int_base();	break;
1418:src/display.c **** 	}
1419:src/display.c **** 
1420:src/display.c **** 	if (!res) {
1421:src/display.c **** 	  IntMaxWindow = 0;
1422:src/display.c **** 	  carry_overflow();
1423:src/display.c **** 	}
1424:src/display.c **** 
1425:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1426:src/display.c **** 	  v = extract_value(value, &sign);
1427:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1428:src/display.c **** 	    v = value;
1429:src/display.c **** 	  if (v == 0) {
1430:src/display.c **** 	    if (sign)
1431:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1432:src/display.c **** 	    set_dig_s(dig, '0', res);
1433:src/display.c **** 	    return;
1434:src/display.c **** 	  } else
1435:src/display.c **** 	    for (i=0; v != 0; i++) {
1436:src/display.c **** 	      const int r = v % b;
1437:src/display.c **** 	      v /= b;
1438:src/display.c **** 	      buf[i] = DIGITS[r];
1439:src/display.c **** 	    }
1440:src/display.c **** 	} else {
1441:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1442:src/display.c **** 	  if (ws < 64) {
1443:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1444:src/display.c **** 	    vs &= mask;
1445:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1446:src/display.c **** 	      vs |= ~mask;
1447:src/display.c **** 	  }
1448:src/display.c **** 
1449:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1450:src/display.c **** 	    set_dig_s(dig, '0', res);
1451:src/display.c **** 	    return;
1452:src/display.c **** 	  } else if (!UState.leadzero) {
1453:src/display.c **** 	    v = (unsigned long long int)vs;
1454:src/display.c **** 	    for (i=0; v != 0; i++) {
1455:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccSEf3H9.s 			page 32


1456:src/display.c **** 	      v /= b;
1457:src/display.c **** 	      buf[i] = DIGITS[r];
1458:src/display.c **** 	    }
1459:src/display.c **** 	  } else {
1460:src/display.c **** 	    int n;
1461:src/display.c **** 	    const unsigned int b1 = b >> 1;
1462:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1463:src/display.c **** 	    v = (unsigned long long int)vs;
1464:src/display.c **** 
1465:src/display.c **** 	    n = (ws + fac) / (fac+1);
1466:src/display.c **** 	    for (i=0; i<n; i++) {
1467:src/display.c **** 	      const int r = v % b;
1468:src/display.c **** 	      v /= b;
1469:src/display.c **** 	      buf[i] = DIGITS[r];
1470:src/display.c **** 	    }
1471:src/display.c **** 	  }
1472:src/display.c **** 	}
1473:src/display.c **** #ifdef BIGGER_DISPLAY
1474:src/display.c **** #define MAX_INT_Y_DIG 13
1475:src/display.c **** #else
1476:src/display.c **** #define MAX_INT_Y_DIG 7
1477:src/display.c **** #endif
1478:src/display.c **** 	/* At this point i is the number of digits in the output */
1479:src/display.c **** 	int nd = i;
1480:src/display.c **** 	if (res) {
1481:src/display.c **** 	  if (sign) *res++ = '-';
1482:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1483:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1484:src/display.c **** 	      *res++ = buf[i];
1485:src/display.c **** 	    *res++ = '.';
1486:src/display.c **** 	    *res++ = '.';
1487:src/display.c **** 	  }
1488:src/display.c **** 	  else {
1489:src/display.c **** 	    while (--i >= 0)
1490:src/display.c **** 	      *res++ = buf[i];
1491:src/display.c **** 	  }
1492:src/display.c **** 	} else {
1493:src/display.c **** #if 0
1494:src/display.c **** 	  set_separator_decimal_modes();
1495:src/display.c **** 
1496:src/display.c **** 	  // Allows configuration of digit grouping per base
1497:src/display.c **** 	  static const char grouping[] = 
1498:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1499:src/display.c **** 		    //	   2     3     4     5     6     7     8
1500:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1501:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1502:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1503:src/display.c **** 	    : grouping[b - 2] >> 4;
1504:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1505:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1506:src/display.c **** #else
1507:src/display.c **** 	  // Less flexible but shorter
1508:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1509:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1510:src/display.c **** 	    : b == 16 ? 2 : 3;
1511:src/display.c **** 	  set_separator_decimal_modes();
1512:src/display.c **** #endif
ARM GAS  /tmp/ccSEf3H9.s 			page 33


1513:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1514:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1515:src/display.c **** 	    State2.window = 0;
1516:src/display.c **** 	  buf[i] = '\0';
1517:src/display.c **** 
1518:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1519:src/display.c **** 	  for (k = 0; k < 12; k++)
1520:src/display.c **** 	    if (buf[j + k] == '\0')
1521:src/display.c **** 	      break;
1522:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1523:src/display.c **** 	    int ch = buf[j++];
1524:src/display.c **** 	    if (i >= shift)
1525:src/display.c **** 	      ch -= 030;
1526:src/display.c **** 	    set_dig(dig, ch);
1527:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1528:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1529:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1530:src/display.c **** 	  }
1531:src/display.c **** 	  if (sign) {
1532:src/display.c **** 	    if (dig >= 0)
1533:src/display.c **** 	      set_dig(dig, '-');
1534:src/display.c **** 	    else	SET_MANT_SIGN;
1535:src/display.c **** 	  }
1536:src/display.c **** 	}
1537:src/display.c ****       }
1538:src/display.c **** 
1539:src/display.c ****       /* Handle special cases.
1540:src/display.c ****        * return non-zero if the number is special.
1541:src/display.c ****        */
1542:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1543:src/display.c **** 	if (decNumberIsSpecial(x)) {
1544:src/display.c **** 	  if (decNumberIsNaN(x)) {
1545:src/display.c **** 	    if (res) {
1546:src/display.c **** 	      scopy(res, "NaN");
1547:src/display.c **** 	    } else {
1548:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1549:src/display.c **** #ifndef REALBUILD
1550:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1551:src/display.c **** 	      forceDispPlot=0;
1552:src/display.c **** #endif
1553:src/display.c **** 	    }
1554:src/display.c **** 	    return 1;
1555:src/display.c **** 	  } else {
1556:src/display.c **** 	    if (decNumberIsNegative(x)) {
1557:src/display.c **** 	      if (res) *res++ = '-';
1558:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1559:src/display.c **** 	    }
1560:src/display.c **** 	    if (res)
1561:src/display.c **** 	      *res++ = '\237';
1562:src/display.c **** 	    else {
1563:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1564:src/display.c **** #ifndef REALBUILD
1565:src/display.c **** 	      if (decNumberIsNegative(x)) {
1566:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1567:src/display.c **** 	      }
1568:src/display.c **** 	      else {
1569:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
ARM GAS  /tmp/ccSEf3H9.s 			page 34


1570:src/display.c **** 	      }
1571:src/display.c **** 	      forceDispPlot=0;
1572:src/display.c **** #endif
1573:src/display.c **** 	    }
1574:src/display.c **** 	    return 1;
1575:src/display.c **** 	  }
1576:src/display.c **** 	}
1577:src/display.c **** 	return 0;
1578:src/display.c ****       }
1579:src/display.c **** 
1580:src/display.c **** 
1581:src/display.c ****       /* Extract the two lowest integral digits from the number
1582:src/display.c ****        */
1583:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1584:src/display.c **** 	decNumber n;
1585:src/display.c **** 
1586:src/display.c **** 	decNumberMod(&n, x, &const_100);
1587:src/display.c **** 	*v = dn_to_int(&n);
1588:src/display.c **** 	dn_mulpow10(&n, x, -2);
1589:src/display.c **** 	decNumberTrunc(res, &n);
1590:src/display.c ****       }
1591:src/display.c **** 
1592:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1592 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1593:src/display.c **** 	char b[32];
 276              		.loc 1 1593 2 view .LVU78
1594:src/display.c **** 	int i, j;
 277              		.loc 1 1594 2 view .LVU79
1595:src/display.c **** 
1596:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1596 2 view .LVU80
 279              		.loc 1 1596 12 view .LVU81
1592:src/display.c **** 	char b[32];
 280              		.loc 1 1592 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1597:src/display.c **** 	  if (v == 0)
1598:src/display.c **** 	    b[i] = spaces?' ':'0';
1599:src/display.c **** 	  else {
1600:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1600 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1592:src/display.c **** 	char b[32];
 292              		.loc 1 1592 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1592:src/display.c **** 	char b[32];
ARM GAS  /tmp/ccSEf3H9.s 			page 35


 295              		.loc 1 1592 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1596:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1596 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1597:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1597 4 is_stmt 1 view .LVU87
 303              		.loc 1 1600 6 view .LVU88
 304              		.loc 1 1600 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1601:src/display.c **** 	    v /= 10;
 311              		.loc 1 1601 6 is_stmt 1 view .LVU90
1602:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1602 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1596:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1596 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1597 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1596:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1596 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1602 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1601:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1601 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1602 6 is_stmt 1 view .LVU97
1596:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1596 17 view .LVU98
1596:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1596 12 view .LVU99
1596:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1596 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1596:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1596 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
ARM GAS  /tmp/ccSEf3H9.s 			page 36


 340              	.LVL18:
1596:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1596 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1597:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1597 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1598:src/display.c **** 	  else {
 349              		.loc 1 1598 6 is_stmt 1 view .LVU104
1596:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1596 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1596:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1596 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1598:src/display.c **** 	  else {
 355              		.loc 1 1598 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1596:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1596 17 is_stmt 1 view .LVU108
1596:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1596 12 view .LVU109
1596:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1596 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1596:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1596 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1603:src/display.c **** 	  }
1604:src/display.c **** 	}
1605:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1605 2 is_stmt 1 view .LVU112
 371              		.loc 1 1605 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1606:src/display.c **** 	  b[0] = '0';
1607:src/display.c **** 
1608:src/display.c **** 	/* Copy across and appropriately leading space things
1609:src/display.c **** 	 */
1610:src/display.c **** 	j = *jin;
 374              		.loc 1 1610 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1605:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1605 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
ARM GAS  /tmp/ccSEf3H9.s 			page 37


1606:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1606 4 is_stmt 1 view .LVU116
1606:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1606 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1610 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1611:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1611 2 view .LVU119
 386              		.loc 1 1611 8 view .LVU120
1610:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1610 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1611 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1612:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1612 4 is_stmt 1 view .LVU123
 395              	.LBB177:
 396              	.LBB178:
 408:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 408 12 view .LVU124
 398              	.LBE178:
 399              	.LBE177:
 400              		.loc 1 1612 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB182:
 403              	.LBB179:
 408:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 408 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 408:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 408 16 view .LVU127
 408              	.LBE179:
 409              	.LBI177:
 407:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 407 14 is_stmt 1 view .LVU128
 411              	.LBB180:
 408:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 408 3 view .LVU129
 408:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 408 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 408:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 408 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 408:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 408 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
ARM GAS  /tmp/ccSEf3H9.s 			page 38


 422              	.L37:
 410:src/display.c **** }
 423              		.loc 1 410 3 is_stmt 1 view .LVU133
 410:src/display.c **** }
 424              		.loc 1 410 3 is_stmt 0 view .LVU134
 425              	.LBE180:
 426              	.LBE182:
1613:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1613 4 is_stmt 1 view .LVU135
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1611 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1613 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1611:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1611 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1614:src/display.c **** 	}
1615:src/display.c **** 	*jin = j;
 436              		.loc 1 1615 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1615 2 is_stmt 1 view .LVU140
 440              		.loc 1 1615 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1616:src/display.c **** 	return str;
1617:src/display.c ****       }
 443              		.loc 1 1617 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1615:src/display.c **** 	return str;
 445              		.loc 1 1615 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1616:src/display.c **** 	return str;
 447              		.loc 1 1616 2 is_stmt 1 view .LVU144
 448              		.loc 1 1617 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB183:
 458              	.LBB181:
 409:src/display.c ****   return res;
 459              		.loc 1 409 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 409:src/display.c ****   return res;
 463              		.loc 1 409 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
ARM GAS  /tmp/ccSEf3H9.s 			page 39


 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE181:
 470              	.LBE183:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 425:src/display.c ****   int i;
 485              		.loc 1 425 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 426:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 426 3 view .LVU149
 427:src/display.c **** 
 490              		.loc 1 427 3 view .LVU150
 425:src/display.c ****   int i;
 491              		.loc 1 425 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 427:src/display.c **** 
 500              		.loc 1 427 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 429 3 is_stmt 1 view .LVU153
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 429 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB184:
 513              	.LBB185:
 409:src/display.c ****   return res;
 514              		.loc 1 409 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
ARM GAS  /tmp/ccSEf3H9.s 			page 40


 517              	.LVL39:
 518              	.L57:
 408:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 408 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 408:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 408 19 view .LVU157
 523              	.LBE185:
 524              	.LBE184:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 429 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB191:
 528              	.LBB186:
 408:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 408 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 410:src/display.c **** }
 532              		.loc 1 410 3 is_stmt 1 view .LVU160
 410:src/display.c **** }
 533              		.loc 1 410 3 is_stmt 0 view .LVU161
 534              	.LBE186:
 535              	.LBE191:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 429 36 is_stmt 1 view .LVU162
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 429 13 view .LVU163
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 429 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 430:src/display.c **** }
 542              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB192:
 544              	.LBB187:
 408:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 408 12 discriminator 3 view .LVU166
 408:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 408 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE187:
 548              	.LBE192:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 429 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB193:
 553              	.LBB188:
 408:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 408 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 408:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 408 16 discriminator 3 view .LVU170
 558              	.LBE188:
ARM GAS  /tmp/ccSEf3H9.s 			page 41


 559              	.LBI184:
 407:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 407 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB189:
 408:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 408 3 discriminator 3 view .LVU172
 563              	.LBE189:
 564              	.LBE193:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 429 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB194:
 569              	.LBB190:
 408:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 408 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 409:src/display.c ****   return res;
 573              		.loc 1 409 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 410:src/display.c **** }
 578              		.loc 1 410 3 view .LVU176
 410:src/display.c **** }
 579              		.loc 1 410 3 is_stmt 0 view .LVU177
 580              	.LBE190:
 581              	.LBE194:
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 429 36 is_stmt 1 view .LVU178
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 429 13 view .LVU179
 429:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 429 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 431:src/display.c **** 
 589              		.loc 1 431 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 431:src/display.c **** 
 591              		.loc 1 431 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
ARM GAS  /tmp/ccSEf3H9.s 			page 42


1583:src/display.c **** 	decNumber n;
 606              		.loc 1 1583 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1584:src/display.c **** 
 610              		.loc 1 1584 2 view .LVU184
1586:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1586 2 view .LVU185
1583:src/display.c **** 	decNumber n;
 612              		.loc 1 1583 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1583:src/display.c **** 	decNumber n;
 621              		.loc 1 1583 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1586:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1586 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1586:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1586 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1583:src/display.c **** 	decNumber n;
 630              		.loc 1 1583 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1586:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1586 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1587 2 is_stmt 1 view .LVU192
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1587 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1588:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1588 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1587:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1587 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1588:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1588 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
ARM GAS  /tmp/ccSEf3H9.s 			page 43


1589:src/display.c ****       }
 649              		.loc 1 1589 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1590:src/display.c **** 
 654              		.loc 1 1590 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1590:src/display.c **** 
 661              		.loc 1 1590 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1618:src/display.c **** 
1619:src/display.c **** 
1620:src/display.c ****       /* Display the number in H.MS mode.
1621:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1622:src/display.c ****        */
1623:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1624:src/display.c **** 	decNumber x, y, a, t, u;
1625:src/display.c **** 	int j=0;
1626:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1627:src/display.c **** 	unsigned int hr, min, sec, fs;
1628:src/display.c **** 
1629:src/display.c **** 	if (check_special_dn(rgx, res)) {
1630:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1631:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1632:src/display.c **** 	  return;
1633:src/display.c **** 	}
1634:src/display.c **** 
1635:src/display.c **** 	set_separator_decimal_modes();
1636:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1637:src/display.c **** 	dn_abs(&a, rgx);
1638:src/display.c **** 	if (decNumberIsNegative(&x)) {
1639:src/display.c **** 	  if (res != NULL)
1640:src/display.c **** 	    *res++ += '-';
1641:src/display.c **** 	  else
1642:src/display.c **** 	    SET_MANT_SIGN;
1643:src/display.c **** 	  dn_minus(&x, &x);
ARM GAS  /tmp/ccSEf3H9.s 			page 44


1644:src/display.c **** 	}
1645:src/display.c **** 
1646:src/display.c **** 	decNumberHR2HMS(&y, &x);
1647:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1648:src/display.c **** 	decNumberRound(&u, &t);
1649:src/display.c **** 
1650:src/display.c **** 	hms_step(&t, &u, &fs);
1651:src/display.c **** 	hms_step(&u, &t, &sec);
1652:src/display.c **** 	hms_step(&t, &u, &min);
1653:src/display.c **** 	hr = dn_to_int(&t);
1654:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1655:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1656:src/display.c **** 
1657:src/display.c **** 	// degrees
1658:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1659:src/display.c **** 	res = set_dig_s(j, '@', res);
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
1661:src/display.c **** 
1662:src/display.c **** 	// minutes
1663:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1664:src/display.c **** 	res = set_dig_s(j, '\'', res);
1665:src/display.c **** 	j += SEGS_PER_DIGIT;
1666:src/display.c **** 
1667:src/display.c **** 	// seconds
1668:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1669:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1670:src/display.c **** 
1671:src/display.c **** 	// Fractional seconds
1672:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1673:src/display.c **** 
1674:src/display.c **** 	// We're now pointing at the exponent's first digit...
1675:src/display.c **** 	res = set_dig_s(j, '"', res);
1676:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1677:src/display.c **** 
1678:src/display.c **** 	// Check for values too big or small
1679:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1680:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1681:src/display.c **** 	} else if (! dn_eq0(&a)) {
1682:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1683:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1684:src/display.c **** 	  }
1685:src/display.c **** 	}
1686:src/display.c ****       }
1687:src/display.c **** 
1688:src/display.c **** 
1689:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1690:src/display.c **** 	decNumber x, w, n, d, t;
1691:src/display.c **** 	char buf[32], *p = buf;
1692:src/display.c **** 	int j;
1693:src/display.c **** 
1694:src/display.c **** 	if (check_special_dn(rgx, res))
1695:src/display.c **** 	  return 1;
1696:src/display.c **** 	dn_abs(&x, rgx);
1697:src/display.c **** 	if (dn_ge(&x, &const_100000))
1698:src/display.c **** 	  return 0;
1699:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1700:src/display.c **** 	  return 0;
ARM GAS  /tmp/ccSEf3H9.s 			page 45


1701:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1702:src/display.c **** 	  if (res != NULL)
1703:src/display.c **** 	    *res++ += '-';
1704:src/display.c **** 	  else
1705:src/display.c **** 	    SET_MANT_SIGN;
1706:src/display.c **** 	}
1707:src/display.c **** 	decNumberFrac(&w, &x);
1708:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1709:src/display.c **** 
1710:src/display.c **** 	dn_divide(&t, &n, &d);
1711:src/display.c **** 	dn_compare(&t, &t, &w);
1712:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1713:src/display.c **** 
1714:src/display.c **** 	if (dn_eq(&n, &d)) {
1715:src/display.c **** 	  dn_inc(&w);
1716:src/display.c **** 	  decNumberZero(&n);
1717:src/display.c **** 	}
1718:src/display.c **** 
1719:src/display.c **** 	if (!UState.improperfrac) {
1720:src/display.c **** 	  if (!dn_eq0(&w)) {
1721:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1722:src/display.c **** 	    *p++ = ' ';
1723:src/display.c **** 	  }
1724:src/display.c **** 	} else {
1725:src/display.c **** 	  dn_multiply(&x, &w, &d);
1726:src/display.c **** 	  dn_add(&n, &n, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1729:src/display.c **** 	*p++ = '/';
1730:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1731:src/display.c **** 	*p = '\0';
1732:src/display.c **** 	if ((p - 12) > buf) {
1733:src/display.c **** 	  p -= 12;
1734:src/display.c **** 	  *p = '<';
1735:src/display.c **** 	} else	p = buf;
1736:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1737:src/display.c **** 	  res = set_dig_s(j, *p, res);
1738:src/display.c **** 	  j += SEGS_PER_DIGIT;
1739:src/display.c **** 	}
1740:src/display.c **** 
1741:src/display.c **** 	if (dn_eq0(&t))
1742:src/display.c **** 	  p = (char *)S7_fract_EQ;
1743:src/display.c **** 	else if (decNumberIsNegative(&t))
1744:src/display.c **** 	  p = (char *)S7_fract_LT;
1745:src/display.c **** 	else
1746:src/display.c **** 	  p = (char *)S7_fract_GT;
1747:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1748:src/display.c **** 	  res = set_dig_s(j, *p, res);
1749:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1750:src/display.c **** 	}
1751:src/display.c **** 	return 1;
1752:src/display.c ****       }
1753:src/display.c **** 
1754:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1755:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1756:src/display.c **** 	decNumber c;
1757:src/display.c **** 	int true_exp, x=0;
ARM GAS  /tmp/ccSEf3H9.s 			page 46


1758:src/display.c **** 	int min_pos_exp, max_neg_exp;
1759:src/display.c **** 
1760:src/display.c **** 	if ( mode != MODE_STD ) {
1761:src/display.c **** 	  min_pos_exp = 9;
1762:src/display.c **** 	  max_neg_exp = -5;
1763:src/display.c **** 	}
1764:src/display.c **** 	else {
1765:src/display.c **** 	  min_pos_exp = 12;
1766:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1767:src/display.c **** 	}
1768:src/display.c **** 
1769:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1770:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1771:src/display.c **** 
1772:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1773:src/display.c **** 	  x = *dd;
1774:src/display.c **** 	}
1775:src/display.c **** 
1776:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1777:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1778:src/display.c **** 	  *dd += -true_exp;
1779:src/display.c **** 	  return MODE_FIX;
1780:src/display.c **** 	}
1781:src/display.c **** 
1782:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1783:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1784:src/display.c **** 	}
1785:src/display.c **** 	else {
1786:src/display.c **** 	  return MODE_STD;
1787:src/display.c **** 	}
1788:src/display.c ****       }
1789:src/display.c **** #else
1790:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1791:src/display.c **** 	decNumber b, c;
1792:src/display.c **** 
1793:src/display.c **** 	dn_1(&b);
1794:src/display.c **** 	b.exponent -= UState.dispdigs;
1795:src/display.c **** 	dn_abs(&c, z);
1796:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1797:src/display.c **** 	  return MODE_FIX;
1798:src/display.c **** 	return MODE_STD;
1799:src/display.c ****       }
1800:src/display.c **** #endif
1801:src/display.c **** 
1802:src/display.c ****       /* SHOW display mode
1803:src/display.c ****        * in double precision show left or right part
1804:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1805:src/display.c ****        */
1806:src/display.c ****       static void show_x(char *x, int exp) {
1807:src/display.c **** 	const int dbl = is_dblmode();
1808:src/display.c **** 	char *p;
1809:src/display.c **** 	int i, j;
1810:src/display.c **** 	char *upper_str;
1811:src/display.c **** 	enum separator_modes separator_mode;
1812:src/display.c **** 	char decimal_mark;
1813:src/display.c **** 	char thousands_sep;
1814:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
ARM GAS  /tmp/ccSEf3H9.s 			page 47


1815:src/display.c **** 	const int grouping = 0;
1816:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1817:src/display.c **** 	const int grouping = !UState.nothousands;
1818:src/display.c **** #else
1819:src/display.c **** 	const int grouping = 1;
1820:src/display.c **** #endif
1821:src/display.c **** 	int negative;
1822:src/display.c **** 
1823:src/display.c **** 	if (x[0] == '-') {
1824:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1825:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1826:src/display.c **** 
1827:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1828:src/display.c **** 	  xcopy(x, small_minus, 4);
1829:src/display.c **** 	  x += 4;
1830:src/display.c **** 	  negative = 4;
1831:src/display.c **** #else
1832:src/display.c **** 	  ++x;
1833:src/display.c **** 	  negative = 1;
1834:src/display.c **** #endif
1835:src/display.c **** 	}
1836:src/display.c **** 	else negative = 0;
1837:src/display.c **** 
1838:src/display.c **** 	p = find_char(x, '\0');
1839:src/display.c **** 	xset(p, '0', 34 - (p - x));
1840:src/display.c **** 
1841:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1842:src/display.c **** 	  separator_mode = SEP_COMMA;
1843:src/display.c **** 	  decimal_mark = '.';
1844:src/display.c **** 	  thousands_sep = ',';
1845:src/display.c **** 	}
1846:src/display.c **** 	else {
1847:src/display.c **** 	  separator_mode = SEP_DOT;
1848:src/display.c **** 	  decimal_mark = ',';
1849:src/display.c **** 	  thousands_sep = '.';
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	if (State2.window) { // right half in double precision mode
1853:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1854:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1855:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1856:src/display.c **** 
1857:src/display.c **** 	  upper_str = x + 3;
1858:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1859:src/display.c **** 	  if (grouping) {
1860:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1861:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1862:src/display.c **** 	    x += 3 + 13 + 7;
1863:src/display.c **** 	  }
1864:src/display.c **** 	  else x += 3 + 13 + 6;
1865:src/display.c **** #else
1866:src/display.c **** 	  upper_str = x + 13;
1867:src/display.c **** 	  xset(upper_str, '.', 3);
1868:src/display.c **** 	  if (grouping) {
1869:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1870:src/display.c **** 	    upper_str[6] = thousands_sep;
1871:src/display.c **** 	    x += 13 + 3 + 7;
ARM GAS  /tmp/ccSEf3H9.s 			page 48


1872:src/display.c **** 	  }
1873:src/display.c **** 	  else x += 13 + 3 + 6;
1874:src/display.c **** #endif
1875:src/display.c **** 	  negative = 0;
1876:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1877:src/display.c **** 	}
1878:src/display.c **** 	else {
1879:src/display.c **** 	  upper_str = x;
1880:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1881:src/display.c **** 	  x[1] = decimal_mark;
1882:src/display.c **** 	  if (grouping) {
1883:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1884:src/display.c **** 	    x[5] = thousands_sep;
1885:src/display.c **** 	    x += 9;
1886:src/display.c **** 	  }
1887:src/display.c **** 	  else x += 8;
1888:src/display.c **** 	  if (dbl) {
1889:src/display.c **** 	    if (exp < 0) {
1890:src/display.c **** 	      x[9] = '-';
1891:src/display.c **** 	      exp = -exp;
1892:src/display.c **** 	    }
1893:src/display.c **** 	    else
1894:src/display.c **** 	      x[9] = ' ';
1895:src/display.c **** 	    j = exp / 1000;
1896:src/display.c **** 	    x[10] = '0' + j;
1897:src/display.c **** 	    exp -= 1000 * j;
1898:src/display.c **** 	  }
1899:src/display.c **** 	  else {
1900:src/display.c **** 	    x[9] = '\0';
1901:src/display.c **** 	    x[10] = '\0';
1902:src/display.c **** 	  }
1903:src/display.c **** 	  xcopy(x + 1, x, 11);
1904:src/display.c **** 	  *x = 0;
1905:src/display.c **** 	  set_exp(exp, 1, CNULL);
1906:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1907:src/display.c **** 	}
1908:src/display.c **** 	if (grouping) {
1909:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1910:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1911:src/display.c **** 	  }
1912:src/display.c **** 	}
1913:src/display.c **** 
1914:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1915:src/display.c **** 	  set_dig(j, x[i]);
1916:src/display.c **** 
1917:src/display.c **** 	*x = '\0';
1918:src/display.c **** 	set_status(upper_str - negative);
1919:src/display.c ****       }
1920:src/display.c **** 
1921:src/display.c **** 
1922:src/display.c ****       /* Display the X register in the numeric portion of the display.
1923:src/display.c ****        * We have to account for the various display modes and numbers of
1924:src/display.c ****        * digits.
1925:src/display.c ****        */
1926:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1927:src/display.c **** 	decNumber z;
1928:src/display.c **** 	int digits = DISPLAY_DIGITS;
ARM GAS  /tmp/ccSEf3H9.s 			page 49


1929:src/display.c **** 
1930:src/display.c **** 	if (dbl)
1931:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1932:src/display.c **** 	else
1933:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1934:src/display.c **** 	set_x_dn(&z, res, &digits);
1935:src/display.c ****       }
1936:src/display.c **** 
1937:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1938:src/display.c **** 	char x[50], *obp = x;
1939:src/display.c **** 	int odig = 0;
1940:src/display.c **** 	int show_exp = 0;
1941:src/display.c **** 	int j;
1942:src/display.c **** 	char mantissa[64];
1943:src/display.c **** 	int exp = 0;
1944:src/display.c **** 	char *p = mantissa;
1945:src/display.c **** 	char *r;
1946:src/display.c **** 	const char *q;
1947:src/display.c **** 	int count, i;
1948:src/display.c **** 	int extra_digits = 0;
1949:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1950:src/display.c **** 	int dd;
1951:src/display.c **** 	int dispdigs;
1952:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1953:src/display.c **** #else
1954:src/display.c **** 	int dd = UState.dispdigs;
1955:src/display.c **** 	int mode = UState.dispmode;
1956:src/display.c **** #endif
1957:src/display.c **** 	int c;
1958:src/display.c **** 	int negative = 0;
1959:src/display.c **** 	int trimzeros = 0;
1960:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1961:src/display.c **** 	const int show_large_exponent = 0;
1962:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1963:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1964:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1965:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1966:src/display.c **** #else
1967:src/display.c **** 	const int show_large_exponent = 1;
1968:src/display.c **** #endif
1969:src/display.c **** 
1970:src/display.c **** 	set_separator_decimal_modes();
1971:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1972:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1973:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1974:src/display.c **** 	    if (State2.hms) {
1975:src/display.c **** 	      set_x_hms(z, res);
1976:src/display.c **** 	      return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else if (UState.fract) {
1979:src/display.c **** 	      if (set_x_fract(z, res))
1980:src/display.c **** 		return;
1981:src/display.c **** 	    }
1982:src/display.c **** 	  }
1983:src/display.c **** 	}		
1984:src/display.c **** #else
1985:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
ARM GAS  /tmp/ccSEf3H9.s 			page 50


1986:src/display.c **** 	  if (State2.hms) {
1987:src/display.c **** 	    set_x_hms(z, res);
1988:src/display.c **** 	    State2.hms = 0;
1989:src/display.c **** 	    return;
1990:src/display.c **** 	  } else if (UState.fract) {
1991:src/display.c **** 	    if (set_x_fract(z, res))
1992:src/display.c **** 	      return;
1993:src/display.c **** 	  }
1994:src/display.c **** 	}
1995:src/display.c **** #endif
1996:src/display.c **** 
1997:src/display.c **** 	if (check_special_dn(z, res))
1998:src/display.c **** 	  return;
1999:src/display.c **** 
2000:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2001:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2002:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2003:src/display.c **** 	  z->exponent = 0;
2004:src/display.c **** 	}
2005:src/display.c **** 
2006:src/display.c **** 	xset(x, '\0', sizeof(x));
2007:src/display.c **** 
2008:src/display.c **** 	if (dn_eq0(z)) {
2009:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2010:src/display.c **** 	    x[0] = '-';
2011:src/display.c **** 	    x[1] = '0';
2012:src/display.c **** 	  } else
2013:src/display.c **** 	    x[0] = '0';
2014:src/display.c **** 	} else
2015:src/display.c **** 	  decNumberToString(z, x);
2016:src/display.c **** 
2017:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2018:src/display.c **** 	  show_x(x, exp);
2019:src/display.c **** 	  return;
2020:src/display.c **** 	}
2021:src/display.c **** 
2022:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2023:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2024:src/display.c **** 	  //  ALL mode: fill the display
2025:src/display.c **** 	  dd = *display_digits - 1;
2026:src/display.c **** 	else
2027:src/display.c **** 	  dd = dispdigs;
2028:src/display.c **** 
2029:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2030:src/display.c **** 	  int orig_mode = mode;
2031:src/display.c **** 
2032:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2033:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2034:src/display.c **** 	    // allow zeros to be trimmed
2035:src/display.c **** 	    trimzeros = 1;
2036:src/display.c **** 	  if (orig_mode == MODE_STD)
2037:src/display.c **** 	    dd = *display_digits - 1;
2038:src/display.c ****  	}
2039:src/display.c **** #else
2040:src/display.c **** 	if (mode == MODE_STD) {
2041:src/display.c **** 	  mode = std_round_fix(z);
2042:src/display.c **** 	  trimzeros = 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 51


2043:src/display.c **** 	  dd = *display_digits - 1;
2044:src/display.c **** 	} else if (dd >= *display_digits)
2045:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2046:src/display.c **** 	  dd = *display_digits - 1;
2047:src/display.c **** #endif
2048:src/display.c **** 
2049:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2050:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2051:src/display.c **** 
2052:src/display.c **** 	q = find_char(x, 'E');
2053:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2054:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2055:src/display.c **** 	if (q == NULL) exp = 0;
2056:src/display.c **** 	else {
2057:src/display.c **** 	  exp = s_to_i(q+1);
2058:src/display.c **** 	  if (*q == 'D') exp = -exp;
2059:src/display.c **** 	}
2060:src/display.c **** #else
2061:src/display.c **** 	if (q == NULL) exp = 0;
2062:src/display.c **** 	else exp = s_to_i(q+1);
2063:src/display.c **** #endif
2064:src/display.c **** 
2065:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2066:src/display.c **** 	for (q=x; *q == ' '; q++);
2067:src/display.c **** 	if (!res) {
2068:src/display.c **** 	  CLR_EXP_SIGN;
2069:src/display.c **** 	  CLR_MANT_SIGN;
2070:src/display.c **** 	}
2071:src/display.c **** 	if (*q == '-') {
2072:src/display.c **** 	  negative = 1;
2073:src/display.c **** 	  q++;
2074:src/display.c **** 	} else if (*q == '+')
2075:src/display.c **** 	  q++;
2076:src/display.c **** 	for (; *q == '0'; q++);
2077:src/display.c **** 	if (*q == '.') {
2078:src/display.c **** 	  do
2079:src/display.c **** 	    exp--;
2080:src/display.c **** 	  while (*++q == '0');
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2082:src/display.c **** 	    *p++ = *q++;
2083:src/display.c **** 	} else {
2084:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2085:src/display.c **** 	    *p++ = *q++;
2086:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2087:src/display.c **** 	    *p++ = *q++;
2088:src/display.c **** 	    exp++;
2089:src/display.c **** 	  }
2090:src/display.c **** 	  if (*q == '.') {
2091:src/display.c **** 	    q++;
2092:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2093:src/display.c **** 	      *p++ = *q++;
2094:src/display.c **** 	  }
2095:src/display.c **** 	}
2096:src/display.c **** 
2097:src/display.c **** 	if (mode == MODE_FIX) {
2098:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2099:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccSEf3H9.s 			page 52


2100:src/display.c **** 	  else {
2101:src/display.c **** 	    extra_digits = exp;
2102:src/display.c **** 	    /* We might have push the fixed decimals off the
2103:src/display.c **** 	     * screen so adjust if so.
2104:src/display.c **** 	     */
2105:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2106:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2107:src/display.c **** 	  }
2108:src/display.c **** 	}
2109:src/display.c **** 
2110:src/display.c **** 	// Round the mantissa to the number of digits desired
2111:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2112:src/display.c **** 	if (*p >= '5') {	// Round up
2113:src/display.c **** 	  *p = '0';
2114:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2115:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2116:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2117:src/display.c **** 	    mantissa[0] = '1';
2118:src/display.c **** 	    exp++;
2119:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2120:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2121:src/display.c **** 	      extra_digits = 0;
2122:src/display.c **** 	    }
2123:src/display.c **** 	  } else {
2124:src/display.c **** 	    while (*--p == '9')
2125:src/display.c **** 	      *p = '0';
2126:src/display.c **** 	    (*p)++;
2127:src/display.c **** 	  }
2128:src/display.c **** 	}
2129:src/display.c **** 
2130:src/display.c **** 	// Zap what is left
2131:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2132:src/display.c **** 
2133:src/display.c **** 	p = mantissa;
2134:src/display.c **** 	switch (mode) {
2135:src/display.c **** 	default:
2136:src/display.c **** 	case MODE_STD:   
2137:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2138:src/display.c **** 	  if (count != *display_digits)
2139:src/display.c **** 	    count++;
2140:src/display.c **** 	  // Too big or too small to fit on display
2141:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2142:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2143:src/display.c **** 	    case -1:
2144:src/display.c **** 	    case 2:
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	      dd--;
2148:src/display.c **** 	      exp--;
2149:src/display.c **** 	    case -2:
2150:src/display.c **** 	    case 1:
2151:src/display.c **** 	      *obp++ = *p++;
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	      dd--;
2154:src/display.c **** 	      exp--;
2155:src/display.c **** 	    case 0:
2156:src/display.c **** 	      ;
ARM GAS  /tmp/ccSEf3H9.s 			page 53


2157:src/display.c **** 	    };
2158:src/display.c **** 	    *obp++ = *p++;
2159:src/display.c **** 	    odig++;
2160:src/display.c **** 	    *obp++ = '.';
2161:src/display.c **** 	    for (i=1; i<count; i++) {
2162:src/display.c **** 	      *obp++ = *p++;
2163:src/display.c **** 	      odig++;
2164:src/display.c **** 	    }
2165:src/display.c **** 	    show_exp = 1;
2166:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2167:src/display.c **** 	    for(i=0; i<=exp; i++) {
2168:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2169:src/display.c **** 		*obp++ = ',';
2170:src/display.c **** 	      *obp++ = *p++;
2171:src/display.c **** 	      odig++;
2172:src/display.c **** 	    }
2173:src/display.c **** 	    *obp++ = '.';
2174:src/display.c **** 	    if (count > (exp + 1)) {
2175:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2176:src/display.c **** 		*obp++ = *p++;
2177:src/display.c **** 		odig++;
2178:src/display.c **** 	      }
2179:src/display.c **** 	    }
2180:src/display.c **** 	  } else {		// All digits to right of decimal point
2181:src/display.c **** 	    *obp++ = '0';
2182:src/display.c **** 	    odig++;
2183:src/display.c **** 	    *obp++ = '.';
2184:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2185:src/display.c **** 	      *obp++ = '0';
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	    for (i=0; i<count; i++) {
2189:src/display.c **** 	      *obp++ = *p++;
2190:src/display.c **** 	      odig++;
2191:src/display.c **** 	    }
2192:src/display.c **** 	  }
2193:src/display.c **** 	  break;
2194:src/display.c **** 
2195:src/display.c **** 	case MODE_FIX:
2196:src/display.c **** 	  j = 0;
2197:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2198:src/display.c **** 	    for (i=0; i<=exp; i++) {
2199:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2200:src/display.c **** 		*obp++ = ',';
2201:src/display.c **** 	      *obp++ = *p++;
2202:src/display.c **** 	      odig++;
2203:src/display.c **** 	    }
2204:src/display.c **** 	    *obp++ = '.';
2205:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2206:src/display.c **** 	      *obp++ = *p++;
2207:src/display.c **** 	      odig++;
2208:src/display.c **** 	    }
2209:src/display.c **** 	  } else {		// All digits to right of decimal point
2210:src/display.c **** 	    *obp++ = '0';
2211:src/display.c **** 	    odig++;
2212:src/display.c **** 	    *obp++ = '.';
2213:src/display.c **** 	    for (i=exp+1; i<0; i++) {
ARM GAS  /tmp/ccSEf3H9.s 			page 54


2214:src/display.c **** 	      *obp++ = '0';
2215:src/display.c **** 	      odig++;
2216:src/display.c **** 	      dd--;
2217:src/display.c **** 	    }
2218:src/display.c **** 	    while (dd-- > 0) {
2219:src/display.c **** 	      *obp++ = *p++;
2220:src/display.c **** 	      odig++;
2221:src/display.c **** 	    }
2222:src/display.c **** 	  }
2223:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2224:src/display.c **** 	  if (trimzeros)
2225:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2226:src/display.c **** 	      obp--;
2227:src/display.c **** 	      odig--;
2228:src/display.c **** 	    }
2229:src/display.c **** #endif			
2230:src/display.c **** 	  break;
2231:src/display.c **** 
2232:src/display.c **** 	case MODE_ENG:
2233:src/display.c **** 	  switch (exp % 3) {
2234:src/display.c **** 	  case -1:
2235:src/display.c **** 	  case 2:
2236:src/display.c **** 	    *obp++ = *p++;
2237:src/display.c **** 	    odig++;
2238:src/display.c **** 	    dd--;
2239:src/display.c **** 	    exp--;
2240:src/display.c **** 	  case -2:
2241:src/display.c **** 	  case 1:
2242:src/display.c **** 	    *obp++ = *p++;
2243:src/display.c **** 	    odig++;
2244:src/display.c **** 	    dd--;
2245:src/display.c **** 	    exp--;
2246:src/display.c **** 	  case 0:
2247:src/display.c **** 	    ;
2248:src/display.c **** 	  };
2249:src/display.c **** 	  // Falling through
2250:src/display.c **** 
2251:src/display.c **** 	case MODE_SCI:
2252:src/display.c **** 	  *obp++ = *p++;
2253:src/display.c **** 	  odig++;
2254:src/display.c **** 	  *obp++ = '.';
2255:src/display.c **** 	  dd--;
2256:src/display.c **** 	  while (dd-- >= 0) {
2257:src/display.c **** 	    *obp++ = *p++;
2258:src/display.c **** 	    odig++;
2259:src/display.c **** 	  }
2260:src/display.c **** 	  show_exp = 1;
2261:src/display.c **** 	}
2262:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2263:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2264:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2265:src/display.c **** 	    obp--;
2266:src/display.c **** 	    odig--;
2267:src/display.c **** 	  }
2268:src/display.c **** #endif	
2269:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2270:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
ARM GAS  /tmp/ccSEf3H9.s 			page 55


2271:src/display.c **** 	  set_x_dn(z, res, display_digits);
2272:src/display.c **** 	  return;
2273:src/display.c **** 	}
2274:src/display.c **** 	/* Finally, send the output to the display */
2275:src/display.c **** 	*obp = '\0';
2276:src/display.c **** 	if (odig > *display_digits)
2277:src/display.c **** 	  odig = *display_digits;
2278:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2279:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2280:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2281:src/display.c **** 	if (negative) {
2282:src/display.c **** 	  if (res) *res++ = '-';
2283:src/display.c **** 	  else {
2284:src/display.c **** 	    if (j == 0)
2285:src/display.c **** 	      SET_MANT_SIGN;
2286:src/display.c **** 	    else
2287:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2288:src/display.c **** 	  }
2289:src/display.c **** 	}
2290:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	  if (c == '.') {
2292:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2293:src/display.c **** 	  } else if (c == ',') {
2294:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2295:src/display.c **** 	  } else {
2296:src/display.c **** 	    res = set_dig_s(j, c, res);
2297:src/display.c **** 	    j += SEGS_PER_DIGIT;
2298:src/display.c **** 	  }
2299:src/display.c **** 	}
2300:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2301:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2302:src/display.c **** 	  if ( !res ) {
2303:src/display.c **** 	    set_exp(exp, 4, res);
2304:src/display.c **** 	  }
2305:src/display.c **** 	  else {
2306:src/display.c **** 	    set_exp(exp, 0, res);
2307:src/display.c **** 	  }
2308:src/display.c **** 	}
2309:src/display.c **** #else
2310:src/display.c **** 	if (show_exp)
2311:src/display.c **** 	  set_exp(exp, 0, res);
2312:src/display.c **** #endif
2313:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2314:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2315:src/display.c **** 	*display_digits = odig;
2316:src/display.c ****       }
2317:src/display.c **** 
2318:src/display.c **** #if defined(QTGUI) || defined(IOS)
2319:src/display.c ****       void format_display(char *buf) {
2320:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2321:src/display.c **** 	  {
2322:src/display.c **** 	    const char *p = get_cmdline();
2323:src/display.c **** 	    if (p == NULL) {
2324:src/display.c **** 	      format_reg(regX_idx, buf);
2325:src/display.c **** 	    } else {
2326:src/display.c **** 	      scopy(buf, p);
2327:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccSEf3H9.s 			page 56


2328:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2329:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2330:src/display.c **** 		buf[CmdLineEex] = 'E';
2331:src/display.c **** 		buf[CmdLineEex+1] = '-';
2332:src/display.c **** 	      }
2333:src/display.c **** #  endif
2334:src/display.c **** 	    }
2335:src/display.c **** 	  }
2336:src/display.c **** 	else {
2337:src/display.c **** 	  buf[0]=0;
2338:src/display.c **** 	}
2339:src/display.c ****       }
2340:src/display.c **** #endif
2341:src/display.c **** 
2342:src/display.c ****       void format_reg(int index, char *buf) {
2343:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2344:src/display.c **** 
2345:src/display.c **** 	if (is_intmode())
2346:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2347:src/display.c **** #ifndef HP16C_MODE_CHANGE
2348:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2349:src/display.c **** 	  decNumber x;
2350:src/display.c **** 	  int s;
2351:src/display.c **** 	  unsigned long long int v;
2352:src/display.c **** 
2353:src/display.c **** 	  getRegister(&x, index);
2354:src/display.c **** 	  v = dn_to_ull(&x, &s);
2355:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2356:src/display.c **** 	}
2357:src/display.c **** #endif
2358:src/display.c **** 	else
2359:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2360:src/display.c ****       }
2361:src/display.c **** 
2362:src/display.c ****       /* Display the status screen */
2363:src/display.c ****       static void show_status(void) {
2364:src/display.c **** 	int i, n;
2365:src/display.c **** 	int j = SEGS_EXP_BASE;
2366:src/display.c **** 	const int status = State2.status - 3;
2367:src/display.c **** 	char buf[16], *p = buf;
2368:src/display.c **** 	unsigned int pc;
2369:src/display.c **** 
2370:src/display.c **** 	if (status == -2) {
2371:src/display.c **** 	  set_status("Free:");
2372:src/display.c **** 	  p = num_arg(buf, free_mem());
2373:src/display.c **** 	  p = scopy(p, " , FL. ");
2374:src/display.c **** 	  p = num_arg(p, free_flash());
2375:src/display.c **** 	  *p = '\0';
2376:src/display.c **** 	  set_digits_string(buf, 0);
2377:src/display.c **** 	}
2378:src/display.c **** 	else if (status == -1) {
2379:src/display.c **** 	  /* Top line */
2380:src/display.c **** 	  p = scopy(buf, "Regs:");
2381:src/display.c **** 	  if (SizeStatRegs)
2382:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2383:src/display.c **** 	  *p = '\0';
2384:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccSEf3H9.s 			page 57


2385:src/display.c **** 
2386:src/display.c **** 	  /* Bottom line */
2387:src/display.c **** 	  p = num_arg(buf, global_regs());
2388:src/display.c **** 	  if (LocalRegs < 0) {
2389:src/display.c **** 	    p = scopy(p, " , Loc. ");
2390:src/display.c **** 	    p = num_arg(p, local_regs());
2391:src/display.c **** 	  }
2392:src/display.c **** 	  *p = '\0';
2393:src/display.c **** 	  set_digits_string(buf, 0);
2394:src/display.c **** 	} else {
2395:src/display.c **** 	  int base;
2396:src/display.c **** 	  int end;
2397:src/display.c **** 	  int group = 10;
2398:src/display.c **** 	  int start = 0;
2399:src/display.c **** 		
2400:src/display.c **** 	  if (status <= 9) {
2401:src/display.c **** 	    base = 10 * status;
2402:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2403:src/display.c **** 	    p = scopy(buf, "FL ");
2404:src/display.c **** 	    p = num_arg_0(p, base, 2);
2405:src/display.c **** 	    *p++ = '-';
2406:src/display.c **** 	    p = num_arg_0(p, end, 2);
2407:src/display.c **** 	    *p = '\0';
2408:src/display.c **** 	    set_status(buf);
2409:src/display.c **** 	  }
2410:src/display.c **** 	  else if (status == 10) {
2411:src/display.c **** 	    base = regX_idx;
2412:src/display.c **** 	    end = regK_idx;
2413:src/display.c **** 	    start = 3;
2414:src/display.c **** 	    group = 4;
2415:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2416:src/display.c **** 	  }
2417:src/display.c **** 	  else { // status == 11
2418:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2419:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2420:src/display.c **** 	    set_status("FL.00-.15");
2421:src/display.c **** 	  }
2422:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2423:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2424:src/display.c **** 	  j += SEGS_PER_DIGIT;
2425:src/display.c **** 	  for (i = start; i < group + start; i++) {
2426:src/display.c **** 	    int k = i + base - start;
2427:src/display.c **** 	    int l = get_user_flag(k);
2428:src/display.c **** 	    k += group;
2429:src/display.c **** 	    if (end >= k) {
2430:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2431:src/display.c **** 	      k += group;
2432:src/display.c **** 	      if (end >= k)
2433:src/display.c **** 		l |= (get_user_flag(k) << 2);
2434:src/display.c **** 	    }
2435:src/display.c **** 	    set_dig(j, l);
2436:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	    j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    if (i == 4) {
2439:src/display.c **** 	      set_dig(j, 8);
2440:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2441:src/display.c **** 	      j += SEGS_PER_DIGIT;
ARM GAS  /tmp/ccSEf3H9.s 			page 58


2442:src/display.c **** 	    }
2443:src/display.c **** 	  }
2444:src/display.c **** 	}
2445:src/display.c **** 
2446:src/display.c **** 	j = SEGS_EXP_BASE;
2447:src/display.c **** 	pc = state_pc();
2448:src/display.c **** 	if (isXROM(pc))
2449:src/display.c **** 	  pc = 1;
2450:src/display.c **** 	for (n=i=0; i<4; i++) {
2451:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2452:src/display.c **** 	    if (++n == 4) {
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2454:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2455:src/display.c **** 	    } else {
2456:src/display.c **** 	      set_dig(j, 'A'+i);
2457:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2458:src/display.c **** 	    }
2459:src/display.c **** 	  }
2460:src/display.c **** 	}
2461:src/display.c ****       }
2462:src/display.c **** 
2463:src/display.c **** 
2464:src/display.c ****       /* Display the list of alpha labels */
2465:src/display.c ****       static void show_label(void) {
2466:src/display.c **** 	char buf[16];
2467:src/display.c **** 	unsigned short int pc = State2.digval;
2468:src/display.c **** 	unsigned int op = getprog(pc);
2469:src/display.c **** 	int n = nLIB(pc);
2470:src/display.c **** 	unsigned short int lblpc;
2471:src/display.c **** 
2472:src/display.c **** 	set_status(prt((opcode)op, buf));
2473:src/display.c **** 	set_digits_string(libname[n], 0);
2474:src/display.c **** #ifndef REALBUILD
2475:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2476:src/display.c **** #endif
2477:src/display.c **** 
2478:src/display.c **** 	if (op & OP_DBL) {
2479:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2480:src/display.c **** 	  if (lblpc != pc) {
2481:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2482:src/display.c **** 	    n = nLIB(lblpc);
2483:src/display.c **** 	    if (n == REGION_RAM)
2484:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2485:src/display.c **** 	    else {
2486:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2487:src/display.c **** #ifndef REALBUILD
2488:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2489:src/display.c **** #endif
2490:src/display.c **** 	    }
2491:src/display.c **** 	  }
2492:src/display.c **** 	}
2493:src/display.c ****       }
2494:src/display.c **** 
2495:src/display.c ****       /* Display a list of register contents */
2496:src/display.c ****       static void show_registers(void) {
2497:src/display.c **** 	char buf[16], *bp;
2498:src/display.c **** 	int n = State2.digval;
ARM GAS  /tmp/ccSEf3H9.s 			page 59


2499:src/display.c **** 	
2500:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2501:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2502:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2503:src/display.c **** 	  n;
2504:src/display.c **** #else
2505:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2506:src/display.c **** 	  n;
2507:src/display.c **** #endif
2508:src/display.c **** 
2509:src/display.c **** 	if (State2.disp_as_alpha) {
2510:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2511:src/display.c **** 	}
2512:src/display.c **** 	else {
2513:src/display.c **** 	  xset(buf, '\0', 16);
2514:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2515:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2516:src/display.c **** #else
2517:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2518:src/display.c **** #endif
2519:src/display.c **** 	  if (State2.local) {
2520:src/display.c **** 	    *bp++ = '.';
2521:src/display.c **** 	    if (n >= 100) {
2522:src/display.c **** 	      *bp++ = '1';
2523:src/display.c **** 	      n -= 100;
2524:src/display.c **** 	    }
2525:src/display.c **** 	  }
2526:src/display.c **** 	  if (n < 100)
2527:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2528:src/display.c **** 	  else
2529:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2530:src/display.c **** 	  set_status(buf);
2531:src/display.c **** 	}
2532:src/display.c **** 	format_reg(reg, CNULL);
2533:src/display.c ****       }
2534:src/display.c **** 
2535:src/display.c **** 
2536:src/display.c ****       static void set_annunciators(void)
2537:src/display.c ****       {
2538:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2539:src/display.c **** 
2540:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2541:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2542:src/display.c **** 	 * browsing constants.
2543:src/display.c **** 	 */
2544:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2545:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2546:src/display.c **** #else
2547:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2548:src/display.c **** #endif
2549:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2550:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2551:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2552:src/display.c **** 	set_IO_annunciator();
2553:src/display.c **** 
2554:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2555:src/display.c **** 	 */
ARM GAS  /tmp/ccSEf3H9.s 			page 60


2556:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2557:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2558:src/display.c ****       }
2559:src/display.c **** 
2560:src/display.c **** 
2561:src/display.c ****       /*
2562:src/display.c ****        *  Toggle the little "=" sign
2563:src/display.c ****        */
2564:src/display.c ****       void set_IO_annunciator(void) {
2565:src/display.c **** #ifndef DM42
2566:src/display.c **** 	int on = SerialOn
2567:src/display.c **** #endif
2568:src/display.c **** #ifdef DM42
2569:src/display.c **** 	  int on = 0
2570:src/display.c **** #endif
2571:src/display.c **** #ifdef REALBUILD
2572:src/display.c **** 	  || DebugFlag
2573:src/display.c **** #endif
2574:src/display.c **** #ifdef INFRARED
2575:src/display.c **** 	  || PrinterColumn != 0
2576:src/display.c **** #endif
2577:src/display.c **** 	  ;
2578:src/display.c **** 
2579:src/display.c **** 	if (on != IoAnnunciator) {
2580:src/display.c **** 	  dot(LIT_EQ, on);
2581:src/display.c **** 	  IoAnnunciator = on;
2582:src/display.c **** 	  finish_display(); //LIT_EQ
2583:src/display.c **** 	}
2584:src/display.c ****       }
2585:src/display.c **** 
2586:src/display.c **** #ifdef TOP_ROW
2587:src/display.c ****       /*
2588:src/display.c ****        *  Update the display
2589:src/display.c ****        */
2590:src/display.c ****       void display(void) {
2591:src/display.c **** 	int i, j;
2592:src/display.c **** 	char buf[40], *bp = buf;
2593:src/display.c **** 	const char *p;
2594:src/display.c **** 	int annuc = 0;
2595:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2596:src/display.c **** 	int skip = 0;
2597:src/display.c **** 	int x_disp = 0;
2598:src/display.c **** 	const int shift = cur_shift();
2599:src/display.c **** 
2600:src/display.c **** 	no_status_top = 0;
2601:src/display.c **** 	if (State2.disp_freeze) {
2602:src/display.c **** 	  State2.disp_freeze = 0;
2603:src/display.c **** 	  State2.disp_temp = 1;
2604:src/display.c **** #ifdef CONSOLE
2605:src/display.c **** 	  JustDisplayed = 1;
2606:src/display.c **** #endif
2607:src/display.c **** 	  ShowRPN = 0;
2608:src/display.c **** 	  return;
2609:src/display.c **** 	}
2610:src/display.c **** 
2611:src/display.c **** 	if (WasDataEntry) {
2612:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/ccSEf3H9.s 			page 61


2613:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2614:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2615:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2616:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2617:src/display.c **** #endif
2618:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2619:src/display.c **** 
2620:src/display.c **** 	  // Erase 7-segment display
2621:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2622:src/display.c **** 	    clr_dot(i);
2623:src/display.c **** 	  }
2624:src/display.c **** 	  goto only_update_x;
2625:src/display.c **** 	}
2626:src/display.c **** #ifdef INCLUDE_YREG_CODE
2627:src/display.c **** #  ifdef YREG_ALWAYS_ON
2628:src/display.c **** 	const int yreg_enabled = 1;
2629:src/display.c **** #  else
2630:src/display.c **** 	const int yreg_enabled = UState.show_y;
2631:src/display.c **** #  endif
2632:src/display.c **** #else
2633:src/display.c **** 	const int yreg_enabled = 0;
2634:src/display.c **** #endif
2635:src/display.c **** 	// Clear display
2636:src/display.c **** 	reset_disp();
2637:src/display.c **** 
2638:src/display.c **** 	
2639:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2640:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2641:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2642:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2643:src/display.c **** 	/*   set_status(buf); */
2644:src/display.c **** 	/* } */
2645:src/display.c **** 	if (State2.version) {
2646:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2647:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2648:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2649:src/display.c **** #ifndef REALBUILD
2650:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2651:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2652:src/display.c **** #endif
2653:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2654:src/display.c **** 	  set_status(vers);
2655:src/display.c **** 	  skip = 1;
2656:src/display.c **** 	  goto nostk;
2657:src/display.c **** 	} else if (State2.confirm) {
2658:src/display.c **** 	  if (yreg_enabled) {
2659:src/display.c **** 	    set_status_top(S_SURE);
2660:src/display.c **** 	    no_status_top = 1;
2661:src/display.c **** 	    annuc = 1;
2662:src/display.c **** 	  }
2663:src/display.c **** 	  else {
2664:src/display.c **** 	    set_status(S_SURE);
2665:src/display.c **** 	  }
2666:src/display.c **** 	} else if (State2.hyp) {
2667:src/display.c **** 	  bp = scopy(bp, "HYP");
2668:src/display.c **** 	  if (! State2.dot)
2669:src/display.c **** 	    *bp++ = '\235';
ARM GAS  /tmp/ccSEf3H9.s 			page 62


2670:src/display.c **** 	  if (yreg_enabled) {
2671:src/display.c **** 	    set_status_top(buf);
2672:src/display.c **** 	    no_status_top = 1;
2673:src/display.c **** 	    annuc = 1;
2674:src/display.c **** 	  }
2675:src/display.c **** 	  else {
2676:src/display.c **** 	    set_status(buf);
2677:src/display.c **** 	  }
2678:src/display.c **** 	} else if (State2.gtodot) {
2679:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2680:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2681:src/display.c **** 	  if (State2.numdigit > 0)
2682:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2683:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2684:src/display.c **** 	  *bp++ = '_';
2685:src/display.c **** 	  if (yreg_enabled) {
2686:src/display.c **** 	    set_status_top(buf);
2687:src/display.c **** 	    no_status_top = 1;
2688:src/display.c **** 	    annuc = 1;
2689:src/display.c **** 	  }
2690:src/display.c **** 	  else {
2691:src/display.c **** 	    set_status(buf);
2692:src/display.c **** 	  }
2693:src/display.c **** 	} else if (State2.rarg) {
2694:src/display.c **** 	  /* Commands with arguments */
2695:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2696:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2697:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2698:src/display.c **** #endif
2699:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2700:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2701:src/display.c **** 	  if (State2.dot) {
2702:src/display.c **** 	    *bp++ = 's';
2703:src/display.c **** 	    *bp++ = '_';
2704:src/display.c **** 	  } else if (shift == SHIFT_F) {
2705:src/display.c **** 	    *bp++ = '\021';
2706:src/display.c **** 	    *bp++ = '_';
2707:src/display.c **** 	  } else {
2708:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2709:src/display.c **** 	       : State2.ind ? 2 
2710:src/display.c **** 	       : num_arg_digits(CmdBase); */
2711:src/display.c **** 	    if (State2.local)
2712:src/display.c **** 	      *bp++ = '.';
2713:src/display.c **** 	    if (State2.numdigit > 0) {
2714:src/display.c **** 	      if (State2.shuffle)
2715:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2716:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2717:src/display.c **** 	      else
2718:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2719:src/display.c **** 	    }
2720:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2721:src/display.c **** 	    *bp++ = '_';
2722:src/display.c **** 	  }
2723:src/display.c **** 	  if (yreg_enabled) {
2724:src/display.c **** 	    set_status_top(buf);
2725:src/display.c **** 	    no_status_top = 1;
2726:src/display.c **** 	    annuc = 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 63


2727:src/display.c **** 	  }
2728:src/display.c **** 	  else {
2729:src/display.c **** 	    set_status(buf);
2730:src/display.c **** 	  }
2731:src/display.c **** 	} else if (State2.test != TST_NONE) {
2732:src/display.c **** 	  *bp++ = 'x';
2733:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2734:src/display.c **** 	  *bp++ = '_';
2735:src/display.c **** 	  *bp++ = '?';
2736:src/display.c **** 	  if (yreg_enabled) {
2737:src/display.c **** 	    set_status_top(buf);
2738:src/display.c **** 	    no_status_top = 1;
2739:src/display.c **** 	    annuc = 1;
2740:src/display.c **** 	  }
2741:src/display.c **** 	  else {
2742:src/display.c **** 	    set_status(buf);
2743:src/display.c **** 	  }
2744:src/display.c **** 	} else if (cata) {
2745:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2746:src/display.c **** 	  char b2[16];
2747:src/display.c **** 	  const char *p;
2748:src/display.c **** 
2749:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2750:src/display.c **** 	  p = catcmd(op, b2);
2751:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2752:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2753:src/display.c **** 	  bp = scopy(bp, p);
2754:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2755:src/display.c **** 	    // State2.disp_small = 1;
2756:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2757:src/display.c **** 	      set_digits_string("0 to 255", 0);
2758:src/display.c **** 	    else
2759:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2760:src/display.c **** 	    skip = 1;
2761:src/display.c **** 	  } else if (State2.runmode) {
2762:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2763:src/display.c **** 	      decNumber x, r;
2764:src/display.c **** 	      decimal64 z;
2765:src/display.c **** 
2766:src/display.c **** 	      getX(&x);
2767:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2768:src/display.c **** 		const unsigned int f = argKIND(op);
2769:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2770:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2771:src/display.c **** 		  update_speed(0);
2772:src/display.c **** 		  fp(&r, &x);
2773:src/display.c **** 		}
2774:src/display.c **** 		else
2775:src/display.c **** 		  set_NaN(&r);
2776:src/display.c **** 	      } else
2777:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2778:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2779:src/display.c **** 	      packed_from_number(&z, &r);
2780:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2781:src/display.c **** 	      skip = 1;
2782:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2783:src/display.c **** 	      REGISTER z, *const x = StackBase;
ARM GAS  /tmp/ccSEf3H9.s 			page 64


2784:src/display.c **** 	      copyreg(&z, x);
2785:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2786:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2787:src/display.c **** 	      copyreg(x, &z);
2788:src/display.c **** 	      skip = 1;
2789:src/display.c **** 	    }
2790:src/display.c **** 	  }
2791:src/display.c **** 	  if (yreg_enabled) {
2792:src/display.c **** 	    set_status_top(buf);
2793:src/display.c **** 	    no_status_top = 1;
2794:src/display.c **** 	    annuc = 1;
2795:src/display.c **** 	  }
2796:src/display.c **** 	  else {
2797:src/display.c **** 	    set_status(buf);
2798:src/display.c **** 	  }
2799:src/display.c **** 	} else if (State2.multi) {
2800:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2801:src/display.c **** 	  if (State2.numdigit > 0) {
2802:src/display.c **** 	    *bp++ = (char) State2.digval;
2803:src/display.c **** 	    if (State2.numdigit > 1)
2804:src/display.c **** 	      *bp++ = State2.digval2;
2805:src/display.c **** 	  }
2806:src/display.c **** 	  if (yreg_enabled) {
2807:src/display.c **** 	    set_status_top(buf);
2808:src/display.c **** 	    no_status_top = 1;
2809:src/display.c **** 	    annuc = 1;
2810:src/display.c **** 	  }
2811:src/display.c **** 	  else {
2812:src/display.c **** 	    set_status(buf);
2813:src/display.c **** 	  }
2814:src/display.c **** 	} else if (State2.status) {
2815:src/display.c **** 	  show_status();
2816:src/display.c **** 	  skip = 1;
2817:src/display.c **** 	} else if (State2.labellist) {
2818:src/display.c **** 	  show_label();
2819:src/display.c **** 	  skip = 1;
2820:src/display.c **** 	} else if (State2.registerlist) {
2821:src/display.c **** 	  show_registers();
2822:src/display.c **** 	  skip = 1;
2823:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2824:src/display.c **** 	    annunciators();
2825:src/display.c **** 	  }
2826:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2827:src/display.c **** 	} else if (State2.disp_as_alpha) {
2828:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2829:src/display.c **** #endif
2830:src/display.c **** 	} else if (State2.runmode) {
2831:src/display.c **** 	  if (DispMsg) { 
2832:src/display.c **** 	    set_status(DispMsg);
2833:src/display.c **** 	  } else if (DispPlot) {
2834:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2835:src/display.c **** 	  } else if (State2.alphas) {
2836:src/display.c **** 	    bp = scopy(buf, Alpha);
2837:src/display.c **** 	    j = State2.alpha_pos;
2838:src/display.c **** 	    if (j != 0) {
2839:src/display.c **** 	      i = slen(buf);
2840:src/display.c **** 	      j *= 6;
ARM GAS  /tmp/ccSEf3H9.s 			page 65


2841:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2842:src/display.c **** 		{
2843:src/display.c **** 		  buf[ (i - j) ] = '\0';
2844:src/display.c **** 		  set_status_right(buf);
2845:src/display.c **** 		}
2846:src/display.c **** 	      else {
2847:src/display.c **** 		set_status(buf);
2848:src/display.c **** 	      }
2849:src/display.c **** 	    }
2850:src/display.c **** 	    else {
2851:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2852:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2853:src/display.c **** 		*bp++ = '\0';
2854:src/display.c **** 	      }
2855:src/display.c **** 	      set_status_right(buf);
2856:src/display.c **** 	    }
2857:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2858:src/display.c **** 	      bp = buf;
2859:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2860:src/display.c **** 	      *bp++ = '\0';
2861:src/display.c **** 	      set_status_top(buf);
2862:src/display.c **** 	      no_status_top = 1;
2863:src/display.c **** 	      //annuc = 1;
2864:src/display.c **** 	    }
2865:src/display.c **** 	  }
2866:src/display.c **** 	  else {
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  }
2869:src/display.c **** 	}
2870:src/display.c **** 	else {
2871:src/display.c **** #ifndef DM42
2872:src/display.c **** 	  show_progtrace(buf);
2873:src/display.c **** #endif
2874:src/display.c **** 	  i = state_pc();
2875:src/display.c **** 	  if (i > 0)
2876:src/display.c **** 	    set_status(prt(getprog(i), buf));
2877:src/display.c **** 	  else
2878:src/display.c **** 	    set_status("");
2879:src/display.c **** 	  set_dot(STO_annun);
2880:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  goto nostk;
2883:src/display.c **** 	}
2884:src/display.c **** 	show_stack();
2885:src/display.c ****       nostk:
2886:src/display.c **** 	show_flags();
2887:src/display.c **** 	if (!skip) {
2888:src/display.c **** 	  if (State2.runmode) {
2889:src/display.c **** 	  only_update_x:
2890:src/display.c **** 	    p = get_cmdline();
2891:src/display.c **** 	    if (p == NULL || cata) {
2892:src/display.c **** 	      if (ShowRegister != -1) {
2893:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2894:src/display.c **** 		format_reg(ShowRegister, CNULL);
2895:src/display.c **** 	      }
2896:src/display.c **** 	      else
2897:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
ARM GAS  /tmp/ccSEf3H9.s 			page 66


2898:src/display.c **** 	    } else {
2899:src/display.c **** 	      disp_x(p);
2900:src/display.c **** 	      x_disp = 1;
2901:src/display.c **** 	    }
2902:src/display.c **** 	    if (WasDataEntry) {
2903:src/display.c **** 	      goto finish;
2904:src/display.c **** 	    }
2905:src/display.c **** 	  } else {
2906:src/display.c **** 	    unsigned int pc = state_pc();
2907:src/display.c **** 	    unsigned int upc = user_pc(pc);
2908:src/display.c **** 	    const int n = nLIB(pc);
2909:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2910:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2911:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2912:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2913:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** 	  }
2931:src/display.c **** 	}
2932:src/display.c **** 	set_annunciators();
2933:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2934:src/display.c **** 	  ShowRPN = 0;
2935:src/display.c **** 	  dot(RPN, 0);
2936:src/display.c **** 	}
2937:src/display.c **** 	// disp_temp disables the <- key
2938:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2939:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2940:src/display.c **** 
2941:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2942:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2943:src/display.c **** 	  annunciators();
2944:src/display.c ****  	State2.hms = 0;
2945:src/display.c **** #else
2946:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2947:src/display.c **** 	  annunciators();
2948:src/display.c **** #endif
2949:src/display.c **** 
2950:src/display.c ****       finish:
2951:src/display.c **** 	State2.version = 0;
2952:src/display.c **** 	State2.disp_as_alpha = 0;
2953:src/display.c **** 	State2.smode = SDISP_NORMAL;
2954:src/display.c **** 	State2.invalid_disp = 0;
ARM GAS  /tmp/ccSEf3H9.s 			page 67


2955:src/display.c **** 	ShowRegister = regX_idx;
2956:src/display.c **** 	DispMsg = CNULL;
2957:src/display.c **** 	DispPlot = 0;
2958:src/display.c **** 	State2.disp_small = 0;
2959:src/display.c **** 	finish_display();
2960:src/display.c **** 	no_status_top = 0;
2961:src/display.c **** #ifdef CONSOLE
2962:src/display.c **** 	JustDisplayed = 1;
2963:src/display.c **** #endif
2964:src/display.c ****       }
2965:src/display.c **** #else
2966:src/display.c ****       /*
2967:src/display.c ****        *  Update the display
2968:src/display.c ****        */
2969:src/display.c ****       void display(void) {
2970:src/display.c **** 	int i, j;
2971:src/display.c **** 	char buf[40], *bp = buf;
2972:src/display.c **** 	const char *p;
2973:src/display.c **** 	int annuc = 0;
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2975:src/display.c **** 	int skip = 0;
2976:src/display.c **** 	int x_disp = 0;
2977:src/display.c **** 	const int shift = cur_shift();
2978:src/display.c **** 
2979:src/display.c **** 
2980:src/display.c **** 
2981:src/display.c **** 	if (State2.disp_freeze) {
2982:src/display.c **** 	  State2.disp_freeze = 0;
2983:src/display.c **** 	  State2.disp_temp = 1;
2984:src/display.c **** #ifdef CONSOLE
2985:src/display.c **** 	  JustDisplayed = 1;
2986:src/display.c **** #endif
2987:src/display.c **** 	  ShowRPN = 0;
2988:src/display.c **** 	  return;
2989:src/display.c **** 	}
2990:src/display.c **** 
2991:src/display.c **** 	if (WasDataEntry) {
2992:src/display.c **** #if defined(QTGUI) || defined(IOS)
2993:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2994:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2995:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2996:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2997:src/display.c **** #endif
2998:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2999:src/display.c **** 
3000:src/display.c **** 	  // Erase 7-segment display
3001:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3002:src/display.c **** 	    clr_dot(i);
3003:src/display.c **** 	  }
3004:src/display.c **** 	  goto only_update_x;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	// Clear display
3008:src/display.c **** 	reset_disp();
3009:src/display.c **** 
3010:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3011:src/display.c **** 	if (State2.cmplx  && !cata) {
ARM GAS  /tmp/ccSEf3H9.s 			page 68


3012:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3013:src/display.c **** 	  set_status(buf);
3014:src/display.c **** 	}
3015:src/display.c **** 	if (State2.version) {
3016:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3017:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3018:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3019:src/display.c **** #ifndef REALBUILD
3020:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3021:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3022:src/display.c **** #endif
3023:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3024:src/display.c **** 	  set_status(vers);
3025:src/display.c **** 	  skip = 1;
3026:src/display.c **** 	  goto nostk;
3027:src/display.c **** 	} else if (State2.confirm) {
3028:src/display.c **** 	  set_status(S_SURE);
3029:src/display.c **** 	} else if (State2.hyp) {
3030:src/display.c **** 	  bp = scopy(bp, "HYP");
3031:src/display.c **** 	  if (! State2.dot)
3032:src/display.c **** 	    *bp++ = '\235';
3033:src/display.c **** 	  set_status(buf);
3034:src/display.c **** 	} else if (State2.gtodot) {
3035:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3036:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3037:src/display.c **** 	  if (State2.numdigit > 0)
3038:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3039:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3040:src/display.c **** 	  *bp++ = '_';
3041:src/display.c **** 	  set_status(buf);
3042:src/display.c **** 	} else if (State2.rarg) {
3043:src/display.c **** 	  /* Commands with arguments */
3044:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3045:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3046:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3047:src/display.c **** #endif
3048:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3049:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3050:src/display.c **** 	  if (State2.dot) {
3051:src/display.c **** 	    *bp++ = 's';
3052:src/display.c **** 	    *bp++ = '_';
3053:src/display.c **** 	  } else if (shift == SHIFT_F) {
3054:src/display.c **** 	    *bp++ = '\021';
3055:src/display.c **** 	    *bp++ = '_';
3056:src/display.c **** 	  } else {
3057:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3058:src/display.c **** 	       : State2.ind ? 2 
3059:src/display.c **** 	       : num_arg_digits(CmdBase); */
3060:src/display.c **** 	    if (State2.local)
3061:src/display.c **** 	      *bp++ = '.';
3062:src/display.c **** 	    if (State2.numdigit > 0) {
3063:src/display.c **** 	      if (State2.shuffle)
3064:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3065:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3066:src/display.c **** 	      else
3067:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3068:src/display.c **** 	    }
ARM GAS  /tmp/ccSEf3H9.s 			page 69


3069:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3070:src/display.c **** 	    *bp++ = '_';
3071:src/display.c **** 	  }
3072:src/display.c **** 	  set_status(buf);
3073:src/display.c **** 	} else if (State2.test != TST_NONE) {
3074:src/display.c **** 	  *bp++ = 'x';
3075:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3076:src/display.c **** 	  *bp++ = '_';
3077:src/display.c **** 	  *bp++ = '?';
3078:src/display.c **** 	  set_status(buf);
3079:src/display.c **** 	} else if (cata) {
3080:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3081:src/display.c **** 	  char b2[16];
3082:src/display.c **** 	  const char *p;
3083:src/display.c **** 
3084:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3085:src/display.c **** 	  p = catcmd(op, b2);
3086:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3087:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3088:src/display.c **** 	  bp = scopy(bp, p);
3089:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3090:src/display.c **** 	    // State2.disp_small = 1;
3091:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3092:src/display.c **** 	      set_digits_string("0 to 255", 0);
3093:src/display.c **** 	    else
3094:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3095:src/display.c **** 	    skip = 1;
3096:src/display.c **** 	  } else if (State2.runmode) {
3097:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3098:src/display.c **** 	      decNumber x, r;
3099:src/display.c **** 	      decimal64 z;
3100:src/display.c **** 
3101:src/display.c **** 	      getX(&x);
3102:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3103:src/display.c **** 		const unsigned int f = argKIND(op);
3104:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3105:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3106:src/display.c **** 		  update_speed(0);
3107:src/display.c **** 		  fp(&r, &x);
3108:src/display.c **** 		}
3109:src/display.c **** 		else
3110:src/display.c **** 		  set_NaN(&r);
3111:src/display.c **** 	      } else
3112:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3113:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3114:src/display.c **** 	      packed_from_number(&z, &r);
3115:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3116:src/display.c **** 	      skip = 1;
3117:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3118:src/display.c **** 	      REGISTER z, *const x = StackBase;
3119:src/display.c **** 	      copyreg(&z, x);
3120:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3121:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3122:src/display.c **** 	      copyreg(x, &z);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    }
3125:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 70


3126:src/display.c **** 	  set_status(buf);
3127:src/display.c **** 	} else if (State2.multi) {
3128:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3129:src/display.c **** 	  if (State2.numdigit > 0) {
3130:src/display.c **** 	    *bp++ = (char) State2.digval;
3131:src/display.c **** 	    if (State2.numdigit > 1)
3132:src/display.c **** 	      *bp++ = State2.digval2;
3133:src/display.c **** 	  }
3134:src/display.c **** 	  set_status(buf);
3135:src/display.c **** 	} else if (State2.status) {
3136:src/display.c **** 	  show_status();
3137:src/display.c **** 	  skip = 1;
3138:src/display.c **** 	} else if (State2.labellist) {
3139:src/display.c **** 	  show_label();
3140:src/display.c **** 	  skip = 1;
3141:src/display.c **** 	} else if (State2.registerlist) {
3142:src/display.c **** 	  show_registers();
3143:src/display.c **** 	  skip = 1;
3144:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3145:src/display.c **** 	    annunciators();
3146:src/display.c **** 	  }
3147:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3148:src/display.c **** 	} else if (State2.disp_as_alpha) {
3149:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3150:src/display.c **** #endif
3151:src/display.c **** 	} else if (State2.runmode) {
3152:src/display.c **** 	  if (DispMsg) { 
3153:src/display.c **** 	    set_status(DispMsg);
3154:src/display.c **** 	  } else if (DispPlot) {
3155:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3156:src/display.c **** 	  } else if (State2.alphas) {
3157:src/display.c **** #if 0
3158:src/display.c **** 	    set_digits_string("AlpHA", 0);
3159:src/display.c **** #endif
3160:src/display.c **** 	    bp = scopy(buf, Alpha);
3161:src/display.c **** 	    j = State2.alpha_pos;
3162:src/display.c **** 	    if (j != 0) {
3163:src/display.c **** 	      i = slen(buf);
3164:src/display.c **** 	      //				
3165:src/display.c **** 	      j *= 6;
3166:src/display.c **** #ifdef BIGGER_DISPLAY
3167:src/display.c **** 	      if ( i - j >= 20 )
3168:src/display.c **** #else
3169:src/display.c **** 	      if ( i - j >= 12 )
3170:src/display.c **** #endif
3171:src/display.c **** 		{
3172:src/display.c **** 		buf[ (i - j) ] = '\0';
3173:src/display.c **** 		set_status_right(buf);
3174:src/display.c **** 		}
3175:src/display.c **** 	      else {
3176:src/display.c **** 		set_status(buf);
3177:src/display.c **** 	      }
3178:src/display.c **** 	    } else {
3179:src/display.c **** 	      if (shift != SHIFT_N) {
3180:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3181:src/display.c **** 		*bp++ = '\0';
3182:src/display.c **** 	      }
ARM GAS  /tmp/ccSEf3H9.s 			page 71


3183:src/display.c **** 	      set_status_right(buf);
3184:src/display.c **** 	    }
3185:src/display.c **** 	  } else {
3186:src/display.c **** 	    annuc = 1;
3187:src/display.c **** 	  }
3188:src/display.c **** 	} else {
3189:src/display.c **** #ifndef DM42
3190:src/display.c **** 	  show_progtrace(buf);
3191:src/display.c **** #endif
3192:src/display.c **** 	  i = state_pc();
3193:src/display.c **** 	  if (i > 0)
3194:src/display.c **** 	    set_status(prt(getprog(i), buf));
3195:src/display.c **** 	  else
3196:src/display.c **** 	    set_status("");
3197:src/display.c **** 	  set_dot(STO_annun);
3198:src/display.c **** #if 0
3199:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3200:src/display.c **** 	    unsigned short int crc;
3201:src/display.c **** 	    crc = checksum_program();
3202:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3203:src/display.c **** 	    for (i=0; i<4; i++) {
3204:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3205:src/display.c **** 	      crc >>= 4;
3206:src/display.c **** 	      j += SEGS_PER_DIGIT;
3207:src/display.c **** 	    }
3208:src/display.c **** 	    skip = 1;
3209:src/display.c **** 	  }
3210:src/display.c **** 	  else
3211:src/display.c **** #endif
3212:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3213:src/display.c **** 	      annuc = 1;
3214:src/display.c **** 	  goto nostk;
3215:src/display.c **** 	}
3216:src/display.c **** 	show_stack();
3217:src/display.c ****       nostk:	show_flags();
3218:src/display.c **** 	if (!skip) {
3219:src/display.c **** 	  if (State2.runmode) {
3220:src/display.c **** 	  only_update_x:
3221:src/display.c **** 	    p = get_cmdline();
3222:src/display.c **** 	    if (p == NULL || cata) {
3223:src/display.c **** 	      if (ShowRegister != -1) {
3224:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3225:src/display.c **** 		format_reg(ShowRegister, CNULL);
3226:src/display.c **** 	      }
3227:src/display.c **** 	      else
3228:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3229:src/display.c **** 	    } else {
3230:src/display.c **** 	      disp_x(p);
3231:src/display.c **** 	      x_disp = 1;
3232:src/display.c **** 	    }
3233:src/display.c **** 	    if (WasDataEntry) {
3234:src/display.c **** 	      goto finish;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  } else {
3237:src/display.c **** 	    unsigned int pc = state_pc();
3238:src/display.c **** 	    unsigned int upc = user_pc(pc);
3239:src/display.c **** 	    const int n = nLIB(pc);
ARM GAS  /tmp/ccSEf3H9.s 			page 72


3240:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3241:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3242:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3243:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3244:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3245:src/display.c **** #ifndef REALBUILD
3246:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3247:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3248:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3249:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3250:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3251:src/display.c **** 	      char *b=buf;
3252:src/display.c **** 	      char *l=LastDisplayedNumber;
3253:src/display.c **** 	      *l++=' ';
3254:src/display.c **** 	      while(*b) {
3255:src/display.c **** 		*l++=*b++;
3256:src/display.c **** 		*l++=' ';
3257:src/display.c **** 	      }
3258:src/display.c **** 	      *l=0;
3259:src/display.c **** 	    }
3260:src/display.c **** #endif
3261:src/display.c **** 	  }
3262:src/display.c **** 	}
3263:src/display.c **** 	set_annunciators();
3264:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3265:src/display.c **** 	  ShowRPN = 0;
3266:src/display.c **** 	  dot(RPN, 0);
3267:src/display.c **** 	}
3268:src/display.c **** 	// disp_temp disables the <- key
3269:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3270:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3271:src/display.c **** 
3272:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3273:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3274:src/display.c **** 	  annunciators();
3275:src/display.c ****  	State2.hms = 0;
3276:src/display.c **** #else
3277:src/display.c **** 
3278:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3279:src/display.c **** 	  annunciators();
3280:src/display.c **** 	
3281:src/display.c **** 
3282:src/display.c **** 
3283:src/display.c **** #endif
3284:src/display.c **** 
3285:src/display.c ****       finish:
3286:src/display.c **** 	State2.version = 0;
3287:src/display.c **** 	State2.disp_as_alpha = 0;
3288:src/display.c **** 	State2.smode = SDISP_NORMAL;
3289:src/display.c **** 	State2.invalid_disp = 0;
3290:src/display.c **** 	ShowRegister = regX_idx;
3291:src/display.c **** 	DispMsg = CNULL;
3292:src/display.c **** 	DispPlot = 0;
3293:src/display.c **** 	State2.disp_small = 0;
3294:src/display.c **** 	finish_display();
3295:src/display.c **** #ifdef CONSOLE
3296:src/display.c **** 	JustDisplayed = 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 73


3297:src/display.c **** #endif
3298:src/display.c ****       }
3299:src/display.c **** #endif
3300:src/display.c ****       /*
3301:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3302:src/display.c ****        */
3303:src/display.c ****       void frozen_display()
3304:src/display.c ****       {
3305:src/display.c **** 	State2.disp_freeze = 0;
3306:src/display.c **** 	display();
3307:src/display.c **** 	State2.disp_freeze = 1;
3308:src/display.c ****       }
3309:src/display.c **** 
3310:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3311:src/display.c **** 	int glen = *graphic++;
3312:src/display.c **** 	int i, j;
3313:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3314:src/display.c **** 	unsigned long long int mat[6];
3315:src/display.c **** 
3316:src/display.c **** 	xset(mat, 0, sizeof(mat));
3317:src/display.c **** #endif
3318:src/display.c **** #ifndef REALBUILD
3319:src/display.c **** 	forceDispPlot=1;
3320:src/display.c **** #endif
3321:src/display.c **** 	if (glen <= 0)			return;
3322:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3323:src/display.c **** 
3324:src/display.c **** 	for (i=0; i<6; i++)
3325:src/display.c **** 	  for (j=1; j<=glen; j++) {
3326:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3327:src/display.c **** 	    if (graphic[j] & (1 << i))
3328:src/display.c **** 	      mat[i] |= 1LL << j;
3329:src/display.c **** #else
3330:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3331:src/display.c **** #endif
3332:src/display.c **** 	  }
3333:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3334:src/display.c **** 	set_status_grob(mat);
3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** 
3338:src/display.c **** 
3339:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3340:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3341:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3342:src/display.c ****        * column is almost always blank.
3343:src/display.c ****        */
3344:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3345:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3346:src/display.c ****       }
3347:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3348:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3349:src/display.c ****       }
3350:src/display.c **** 
3351:src/display.c ****       
3352:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3352 85 is_stmt 1 view -0
ARM GAS  /tmp/ccSEf3H9.s 			page 74


 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3353:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3353 2 view .LVU201
3354:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3355:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3356:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3356 2 view .LVU202
3357:src/display.c **** #endif
3358:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3358 2 view .LVU203
3359:src/display.c **** 	int i, j;
 686              		.loc 1 3359 2 view .LVU204
3360:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3360 2 view .LVU205
3352:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3352 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	unsigned long long int mat[6];
3363:src/display.c **** 
3364:src/display.c **** 	xset(mat, 0, sizeof(mat));
3365:src/display.c **** #endif
3366:src/display.c **** #ifndef REALBUILD
3367:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3367 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3352:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3352 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3360 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3352:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3352 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3360 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3360 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
ARM GAS  /tmp/ccSEf3H9.s 			page 75


 716              		.loc 1 3367 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3367 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3360 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3367 2 is_stmt 1 view .LVU216
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3360 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3352:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3352 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3367 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3368:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3369:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3369 2 is_stmt 1 view .LVU220
 734              		.loc 1 3369 14 view .LVU221
 735              		.loc 1 3369 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3369 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3369 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3369 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3370:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3370 4 is_stmt 1 view .LVU226
 749              		.loc 1 3370 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3370 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3370 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3370 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3371:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3372:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3373:src/display.c **** 	      ++i;
3374:src/display.c **** 	  }
3375:src/display.c **** 	  else {
3376:src/display.c **** 	    ++i;
3377:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 76


3378:src/display.c **** 	}
3379:src/display.c **** #endif
3380:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3380 2 is_stmt 1 view .LVU231
3381:src/display.c **** #endif
3382:src/display.c **** #ifdef RP_PREFIX
3383:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3383 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3380:src/display.c **** #endif
 763              		.loc 1 3380 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3383 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3384:src/display.c **** #endif
3385:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3386:src/display.c **** 	findlengths(posns, smallp);
3387:src/display.c **** #endif
3388:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3388 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3380:src/display.c **** #endif
 770              		.loc 1 3380 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3383:src/display.c **** #endif
 772              		.loc 1 3383 2 is_stmt 1 view .LVU237
 773              		.loc 1 3388 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3388 8 view .LVU239
 776              		.loc 1 3388 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3388 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3358:src/display.c **** 	int i, j;
 781              		.loc 1 3358 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB195:
3389:src/display.c **** 	  int c;
3390:src/display.c **** 	  int width;
3391:src/display.c **** 	  unsigned char cmap[6];
3392:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3393:src/display.c **** 	  int real_width;
3394:src/display.c **** 	  int current_smallp;
3395:src/display.c **** 
3396:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3397:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3398:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3399:src/display.c **** 	  //           01 -> (not used)
3400:src/display.c **** 	  //           10 -> use big font
3401:src/display.c **** 	  //           11 -> use small font
3402:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3403:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3403 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE195:
ARM GAS  /tmp/ccSEf3H9.s 			page 77


3388:src/display.c **** 	  int c;
 787              		.loc 1 3388 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3356:src/display.c **** #endif
 790              		.loc 1 3356 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB204:
3389:src/display.c **** 	  int c;
 794              		.loc 1 3389 4 is_stmt 1 view .LVU246
3390:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3390 4 view .LVU247
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3391 4 view .LVU248
3393:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3393 4 view .LVU249
3394:src/display.c **** 
 798              		.loc 1 3394 4 view .LVU250
 799              		.loc 1 3403 4 view .LVU251
 800              		.loc 1 3403 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3404:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3404 6 is_stmt 1 view .LVU253
 805              		.loc 1 3404 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3405:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3405 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3404:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3404 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3405 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3406:src/display.c **** 	    default:
3407:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x40:	current_smallp = 0;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x60:	current_smallp = 1;
3412:src/display.c **** 	      break;
3413:src/display.c **** 	    }
3414:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3414 6 view .LVU258
 820              		.loc 1 3414 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3414 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
ARM GAS  /tmp/ccSEf3H9.s 			page 78


 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3415:src/display.c **** 	    str += 3;
 831              		.loc 1 3415 6 is_stmt 1 discriminator 4 view .LVU261
3416:src/display.c **** 
3417:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3417 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3415:src/display.c **** 	    str += 3;
 836              		.loc 1 3415 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3417 6 is_stmt 1 discriminator 4 view .LVU264
3418:src/display.c **** 	  } else {
3419:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3420:src/display.c **** 	    real_width = width = charlengths(c);
3421:src/display.c **** 	    current_smallp = smallp;
3422:src/display.c **** 	  }
3423:src/display.c **** 
3424:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3424 4 discriminator 4 view .LVU265
 843              		.loc 1 3424 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3424 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3424 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3425:src/display.c **** 	    break;
3426:src/display.c **** 
3427:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3427 4 is_stmt 1 view .LVU269
 853              		.loc 1 3427 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3428:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3428 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3427 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3428 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
ARM GAS  /tmp/ccSEf3H9.s 			page 79


 866 00b0 019B     		ldr	r3, [sp, #4]
3429:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3429 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3430:src/display.c **** 	  }
3431:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3431 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3432:src/display.c **** #else
3433:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3434:src/display.c **** 
3435:src/display.c **** 	  //cmap = &charset[c][0];
3436:src/display.c **** 	  width = charlengths(c);
3437:src/display.c **** 
3438:src/display.c **** 	  if (x + width > b_w+1)
3439:src/display.c **** 	    break;
3440:src/display.c **** 
3441:src/display.c **** 	  /* Decode the packed character bytes */
3442:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3443:src/display.c **** #endif
3444:src/display.c **** 
3445:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3445 4 view .LVU276
 877              		.loc 1 3445 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3445 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3446 16 is_stmt 1 view .LVU279
 889              		.loc 1 3446 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3447:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3447 8 is_stmt 1 view .LVU281
 893              		.loc 1 3447 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3446 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
ARM GAS  /tmp/ccSEf3H9.s 			page 80


3446:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3446 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB196:
 907              	.LBB197:
 340:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 340 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 340:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 340 11 view .LVU286
 912              	.LBE197:
 913              	.LBE196:
 914              		.loc 1 3447 8 is_stmt 1 view .LVU287
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3446 25 view .LVU288
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3446 16 view .LVU289
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3446 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3447 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3448:src/display.c **** 		break;
3449:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3450:src/display.c **** 	      if (cmap[i] & (1 << j))
3451:src/display.c **** 		mat[i] |= 1LL << (x+j);
3452:src/display.c **** #else
3453:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3453 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB201:
 929              	.LBI196:
 339:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 339 6 discriminator 2 view .LVU293
 931              	.LBB198:
 340:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 340 3 discriminator 2 view .LVU294
 340:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 340 11 discriminator 2 view .LVU295
 341:src/display.c **** }
 934              		.loc 1 341 8 discriminator 2 view .LVU296
 935              	.LBE198:
 936              	.LBE201:
 937              		.loc 1 3453 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3453 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB202:
 942              	.LBB199:
 340:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccSEf3H9.s 			page 81


 943              		.loc 1 340 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 340:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 340 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 340:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 340 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE199:
 950              	.LBE202:
3446:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3446 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB203:
 955              	.LBB200:
 341:src/display.c **** }
 956              		.loc 1 341 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 341:src/display.c **** }
 959              		.loc 1 341 8 view .LVU304
 960              	.LBE200:
 961              	.LBE203:
3447:src/display.c **** 		break;
 962              		.loc 1 3447 8 is_stmt 1 view .LVU305
3446:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3446 25 view .LVU306
3446:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3446 16 view .LVU307
3446:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3446 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3445 19 is_stmt 1 view .LVU309
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3445 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3445 14 is_stmt 1 view .LVU311
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3445 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3454:src/display.c **** #endif
3455:src/display.c **** 	    }
3456:src/display.c **** 	  x += width;
 980              		.loc 1 3456 4 is_stmt 1 view .LVU313
 981              	.LBE204:
3388:src/display.c **** 	  int c;
 982              		.loc 1 3388 9 is_stmt 0 view .LVU314
ARM GAS  /tmp/ccSEf3H9.s 			page 82


 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB205:
 986              		.loc 1 3456 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3456 6 view .LVU316
 990              	.LBE205:
3388:src/display.c **** 	  int c;
 991              		.loc 1 3388 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3388:src/display.c **** 	  int c;
 993              		.loc 1 3388 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3388:src/display.c **** 	  int c;
 996              		.loc 1 3388 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB206:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3403 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE206:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB207:
3389:src/display.c **** 	  int width;
 1005              		.loc 1 3389 4 is_stmt 1 view .LVU321
3390:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3390 4 view .LVU322
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3391 4 view .LVU323
3393:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3393 4 view .LVU324
3394:src/display.c **** 
 1009              		.loc 1 3394 4 view .LVU325
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3403 4 view .LVU326
3403:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3403 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3419 6 is_stmt 1 view .LVU328
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3419 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3420:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3420 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3419 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccSEf3H9.s 			page 83


 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3420:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3420 6 is_stmt 1 view .LVU332
3420:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3420 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3420:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3420 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3424:src/display.c **** 	    break;
 1034              		.loc 1 3424 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3420:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3420 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3421:src/display.c **** 	  }
 1039              		.loc 1 3421 6 is_stmt 1 view .LVU337
3424:src/display.c **** 	    break;
 1040              		.loc 1 3424 4 view .LVU338
3424:src/display.c **** 	    break;
 1041              		.loc 1 3424 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3424:src/display.c **** 	    break;
 1044              		.loc 1 3424 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3424:src/display.c **** 	    break;
 1049              		.loc 1 3424 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3424:src/display.c **** 	    break;
 1053              		.loc 1 3424 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3424:src/display.c **** 	    break;
 1057              		.loc 1 3424 7 view .LVU343
 1058              	.LBE207:
3457:src/display.c **** 	}
3458:src/display.c **** 
3459:src/display.c **** 
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	set_status_grob(mat);
3462:src/display.c **** #else
3463:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3463 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3463 20 view .LVU345
 1061              		.loc 1 3463 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
ARM GAS  /tmp/ccSEf3H9.s 			page 84


 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3464:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3464 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3463:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3463 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3464 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3463:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3463 27 is_stmt 1 discriminator 3 view .LVU350
3463:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3463 20 discriminator 3 view .LVU351
3463:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3463 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3465:src/display.c **** #endif
3466:src/display.c ****       }
 1081              		.loc 1 3466 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB208:
3411:src/display.c **** 	      break;
 1091              		.loc 1 3411 17 is_stmt 1 view .LVU354
3412:src/display.c **** 	    }
 1092              		.loc 1 3412 8 view .LVU355
3414:src/display.c **** 	    str += 3;
 1093              		.loc 1 3414 6 view .LVU356
3414:src/display.c **** 	    str += 3;
 1094              		.loc 1 3414 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 1097              		.loc 1 3411 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3409:src/display.c **** 	      break;
 1104              		.loc 1 3409 17 is_stmt 1 view .LVU359
3410:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3410 8 view .LVU360
ARM GAS  /tmp/ccSEf3H9.s 			page 85


3414:src/display.c **** 	    str += 3;
 1106              		.loc 1 3414 6 view .LVU361
3414:src/display.c **** 	    str += 3;
 1107              		.loc 1 3414 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3409:src/display.c **** 	      break;
 1110              		.loc 1 3409 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3409:src/display.c **** 	      break;
 1116              		.loc 1 3409 32 view .LVU364
 1117              	.LBE208:
3371:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3371 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3372:src/display.c **** 	      ++i;
 1123              		.loc 1 3372 6 view .LVU366
3372:src/display.c **** 	      ++i;
 1124              		.loc 1 3372 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB209:
3372:src/display.c **** 	      ++i;
 1133              		.loc 1 3372 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3372:src/display.c **** 	      ++i;
 1136              		.loc 1 3372 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3372:src/display.c **** 	      ++i;
 1141              		.loc 1 3372 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE209:
 1151              		.cfi_endproc
 1152              	.LFE39:
ARM GAS  /tmp/ccSEf3H9.s 			page 86


 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 442:src/display.c ****   union {
 1165              		.loc 1 442 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/display.c ****     char buf[4];
 1169              		.loc 1 443 3 view .LVU372
 447:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 447 3 view .LVU373
 449:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 449 3 view .LVU374
 455:src/display.c **** #  endif
 1172              		.loc 1 455 3 view .LVU375
 464:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 464 3 view .LVU376
 442:src/display.c ****   union {
 1174              		.loc 1 442 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 465:src/display.c ****     negative = 1;
 1183              		.loc 1 465 6 view .LVU378
 1184 0004 051E     		subs	r5, r0, #0
 442:src/display.c ****   union {
 1185              		.loc 1 442 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 442:src/display.c ****   union {
 1188              		.loc 1 442 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 465:src/display.c ****     negative = 1;
 1191              		.loc 1 465 3 is_stmt 1 view .LVU381
 465:src/display.c ****     negative = 1;
 1192              		.loc 1 465 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 470:src/display.c **** #endif
 1194              		.loc 1 470 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
ARM GAS  /tmp/ccSEf3H9.s 			page 87


 470:src/display.c **** #endif
 1199              		.loc 1 470 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 464:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 464 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 470:src/display.c **** #endif
 1204              		.loc 1 470 3 is_stmt 1 view .LVU386
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 472 3 view .LVU387
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 472 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 475:src/display.c **** #else
 1209              		.loc 1 475 5 is_stmt 1 view .LVU389
 475:src/display.c **** #else
 1210              		.loc 1 475 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 479 2 is_stmt 1 view .LVU391
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 479 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 479 17 is_stmt 1 discriminator 1 view .LVU393
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 479 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 479 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 479:src/display.c **** 	// No exponent separator for large -ve exponents
 1223              		.loc 1 479 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
 1225              	.LVL112:
 486:src/display.c ****     }
 1226              		.loc 1 486 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
 1228              	.LVL113:
 1229              	.L127:
 482:src/display.c **** #else
 1230              		.loc 1 482 12 view .LVU398
 482:src/display.c **** #else
 1231              		.loc 1 482 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 482:src/display.c **** #else
 1234              		.loc 1 482 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 482:src/display.c **** #else
 1237              		.loc 1 482 19 view .LVU401
ARM GAS  /tmp/ccSEf3H9.s 			page 88


 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 486:src/display.c ****     }
 1240              		.loc 1 486 7 is_stmt 1 view .LVU402
 486:src/display.c ****     }
 1241              		.loc 1 486 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 482:src/display.c **** #else
 1244              		.loc 1 482 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 486:src/display.c ****     }
 1248              		.loc 1 486 21 is_stmt 1 discriminator 1 view .LVU405
 486:src/display.c ****     }
 1249              		.loc 1 486 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 486:src/display.c ****     }
 1252              		.loc 1 486 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 534:src/display.c **** #endif
 1257              		.loc 1 534 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 536 7 view .LVU409
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 536 10 is_stmt 0 view .LVU410
 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
 1268              	.L135:
 557:src/display.c ****     no_number:
 1269              		.loc 1 557 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 559:src/display.c ****     }
 1274              		.loc 1 559 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 560:src/display.c **** 
 1279              		.loc 1 560 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccSEf3H9.s 			page 89


 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 466:src/display.c ****     exp = -exp;
 1288              		.loc 1 466 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 489 21 is_stmt 1 view .LVU415
 1293              	.LBB210:
 1294              	.LBI210:
 308:src/display.c **** {
 1295              		.loc 1 308 13 view .LVU416
 1296              	.LBB211:
 310:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 310 3 view .LVU417
 310:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 310 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 311:src/display.c **** }
 1302              		.loc 1 311 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 310 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 1306              		.loc 1 311 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 311:src/display.c **** }
 1310              		.loc 1 311 3 is_stmt 0 view .LVU422
 1311              	.LBE211:
 1312              	.LBE210:
 491:src/display.c **** #else
 1313              		.loc 1 491 7 is_stmt 1 view .LVU423
 491:src/display.c **** #else
 1314              		.loc 1 491 10 is_stmt 0 view .LVU424
 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 495:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 495 4 is_stmt 1 view .LVU425
 509:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 509 6 view .LVU426
 509:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 509 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 509:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 509 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 511:src/display.c **** 	      // Cut off the last three digits of the mantissa.
ARM GAS  /tmp/ccSEf3H9.s 			page 90


 1324              		.loc 1 511 6 is_stmt 1 view .LVU429
 511:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 511 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB212:
 515:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 515 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 517:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 517 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 515:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 515 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 517:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 517 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 515:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 515 66 is_stmt 1 discriminator 3 view .LVU435
 515:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 515 41 discriminator 3 view .LVU436
 515:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 515 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 518:src/display.c **** 	    }
 1346              		.loc 1 518 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
 518:src/display.c **** 	    }
 1352              		.loc 1 518 8 is_stmt 0 view .LVU439
 1353              	.LBE212:
 521:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 521 6 is_stmt 1 view .LVU440
 521:src/display.c **** 	      CLR_EXP_SIGN;
 1355              		.loc 1 521 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 525:src/display.c **** 	    flags = 1;
 1359              		.loc 1 525 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 534:src/display.c **** #endif
 1362              		.loc 1 534 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 525:src/display.c **** 	    flags = 1;
 1364              		.loc 1 525 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccSEf3H9.s 			page 91


 1366              	.LVL132:
 526:src/display.c **** 	  }
 1367              		.loc 1 526 6 is_stmt 1 view .LVU445
 534:src/display.c **** #endif
 1368              		.loc 1 534 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 536:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 536 7 view .LVU447
 534:src/display.c **** #endif
 1375              		.loc 1 534 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 537:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 537 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 559:src/display.c ****     }
 1385              		.loc 1 559 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 560:src/display.c **** 
 1390              		.loc 1 560 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              	.LVL137:
 1397              	.L153:
 1398              		.cfi_restore_state
 466:src/display.c ****     exp = -exp;
 1399              		.loc 1 466 5 is_stmt 1 view .LVU452
 467:src/display.c ****   }
 1400              		.loc 1 467 5 view .LVU453
 470:src/display.c **** #endif
 1401              		.loc 1 470 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 467:src/display.c ****   }
 1403              		.loc 1 467 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 470:src/display.c **** #endif
 1406              		.loc 1 470 3 is_stmt 1 view .LVU456
 470:src/display.c **** #endif
 1407              		.loc 1 470 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
ARM GAS  /tmp/ccSEf3H9.s 			page 92


 1410              	.LVL139:
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 472 3 is_stmt 1 view .LVU458
 472:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 472 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 475:src/display.c **** #else
 1415              		.loc 1 475 5 is_stmt 1 view .LVU460
 475:src/display.c **** #else
 1416              		.loc 1 475 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 482:src/display.c **** #else
 1419              		.loc 1 482 12 is_stmt 1 view .LVU462
 482:src/display.c **** #else
 1420              		.loc 1 482 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 482:src/display.c **** #else
 1423              		.loc 1 482 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 486:src/display.c ****     }
 1427              		.loc 1 486 7 is_stmt 1 view .LVU465
 482:src/display.c **** #else
 1428              		.loc 1 482 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 489 7 is_stmt 1 view .LVU467
 489:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 489 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
 1438              	.LVL143:
 1439              	.L154:
 522:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 522 8 is_stmt 1 view .LVU469
 1441              	.LBB213:
 1442              	.LBI213:
 314:src/display.c **** {
 1443              		.loc 1 314 13 view .LVU470
 1444              	.LBB214:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 316 3 view .LVU471
 316:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 316 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 317:src/display.c **** }
 1449              		.loc 1 317 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
ARM GAS  /tmp/ccSEf3H9.s 			page 93


 316:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 316 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 1453              		.loc 1 317 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE214:
 1457              	.LBE213:
 523:src/display.c **** 	    }
 1458              		.loc 1 523 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB48:
 367:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 367 14 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 374:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 374 5 view .LVU478
 367:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 367 14 is_stmt 0 view .LVU479
 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 367:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 367 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 375:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 375 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
ARM GAS  /tmp/ccSEf3H9.s 			page 94


 375:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 375 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 376:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 376 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 374:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 374 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 375:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 375 5 is_stmt 1 view .LVU485
 376:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 376 5 view .LVU486
 376:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 376 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 379:src/display.c **** #endif
 1514              		.loc 1 379 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 379:src/display.c **** #endif
 1517              		.loc 1 379 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 379:src/display.c **** #endif
 1519              		.loc 1 379 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 379:src/display.c **** #endif
 1521              		.loc 1 379 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 379:src/display.c **** #endif
 1525              		.loc 1 379 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 379:src/display.c **** #endif
 1527              		.loc 1 379 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
 383:src/display.c **** 
 1529              		.loc 1 383 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 379:src/display.c **** #endif
 1531              		.loc 1 379 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 383:src/display.c **** 
 1534              		.loc 1 383 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 377:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 377 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 379:src/display.c **** #endif
ARM GAS  /tmp/ccSEf3H9.s 			page 95


 1542              		.loc 1 379 5 view .LVU498
 379:src/display.c **** #endif
 1543              		.loc 1 379 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE48:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 349:src/display.c ****   if (res) {
 1565              		.loc 1 349 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 350 3 view .LVU501
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 350 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 351:src/display.c ****   } else {
 1572              		.loc 1 351 5 is_stmt 1 view .LVU503
 351:src/display.c ****   } else {
 1573              		.loc 1 351 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
 351:src/display.c ****   } else {
 1575              		.loc 1 351 9 view .LVU505
 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 351:src/display.c ****   } else {
 1578              		.loc 1 351 12 view .LVU506
 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 361:src/display.c **** 
 1584              		.loc 1 361 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 353 5 is_stmt 1 view .LVU508
 349:src/display.c ****   if (res) {
 1589              		.loc 1 349 87 is_stmt 0 view .LVU509
ARM GAS  /tmp/ccSEf3H9.s 			page 96


 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 353 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 353 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 354:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 354 5 is_stmt 1 view .LVU512
 354:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 354 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB217:
 1609              	.LBB218:
 357:src/display.c **** #endif
 1610              		.loc 1 357 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 357:src/display.c **** #endif
 1613              		.loc 1 357 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 357:src/display.c **** #endif
 1615              		.loc 1 357 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 357:src/display.c **** #endif
 1617              		.loc 1 357 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
 357:src/display.c **** #endif
 1621              		.loc 1 357 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 357:src/display.c **** #endif
 1623              		.loc 1 357 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 357:src/display.c **** #endif
 1625              		.loc 1 357 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 360:src/display.c **** }
 1629              		.loc 1 360 3 is_stmt 1 view .LVU521
 360:src/display.c **** }
 1630              		.loc 1 360 3 is_stmt 0 view .LVU522
 1631              	.LBE218:
 1632              	.LBE217:
 360:src/display.c **** }
ARM GAS  /tmp/ccSEf3H9.s 			page 97


 1633              		.loc 1 360 3 is_stmt 1 view .LVU523
 361:src/display.c **** 
 1634              		.loc 1 361 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 355:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 355 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB220:
 1648              	.LBI217:
 349:src/display.c ****   if (res) {
 1649              		.loc 1 349 14 view .LVU526
 1650              	.LBB219:
 357:src/display.c **** #endif
 1651              		.loc 1 357 5 view .LVU527
 357:src/display.c **** #endif
 1652              		.loc 1 357 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE219:
 1661              	.LBE220:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
 1666              		.align	1
 1667              		.p2align 2,,3
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 414 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 415 3 view .LVU530
 414:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 414 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccSEf3H9.s 			page 98


 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 415 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 415 10 is_stmt 1 view .LVU533
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 415 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB221:
 1699              	.LBB222:
 409:src/display.c ****   return res;
 1700              		.loc 1 409 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 410:src/display.c **** }
 1704              		.loc 1 410 3 is_stmt 1 view .LVU536
 410:src/display.c **** }
 1705              		.loc 1 410 3 is_stmt 0 view .LVU537
 1706              	.LBE222:
 1707              	.LBE221:
 420:src/display.c ****     }
 1708              		.loc 1 420 7 is_stmt 1 view .LVU538
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 415 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 420:src/display.c ****     }
 1712              		.loc 1 420 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
 1714              	.LVL168:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 415 24 is_stmt 1 view .LVU541
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1716              		.loc 1 415 10 view .LVU542
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 415 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 416 5 is_stmt 1 view .LVU544
 417:src/display.c ****     else {
 1722              		.loc 1 417 7 view .LVU545
 419:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 419 7 view .LVU546
 1724              	.LBB225:
 1725              	.LBI221:
ARM GAS  /tmp/ccSEf3H9.s 			page 99


 407:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 407 14 view .LVU547
 1727              	.LBB223:
 408:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 408 3 view .LVU548
 409:src/display.c ****   return res;
 1729              		.loc 1 409 8 view .LVU549
 1730              	.LBE223:
 1731              	.LBE225:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 416 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 417:src/display.c ****     else {
 1735              		.loc 1 417 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB226:
 1739              	.LBB224:
 409:src/display.c ****   return res;
 1740              		.loc 1 409 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE224:
 1743              	.LBE226:
 416:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 416 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 417:src/display.c ****     else {
 1746              		.loc 1 417 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 415 24 is_stmt 1 view .LVU555
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1753              		.loc 1 415 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1755              	.LVL171:
 415:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 415 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 423:src/display.c **** 
 1761              		.loc 1 423 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
ARM GAS  /tmp/ccSEf3H9.s 			page 100


 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB50:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1542 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1543 2 view .LVU560
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1542 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1543 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1542 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1543:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1543 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1544:src/display.c **** 	    if (res) {
 1800              		.loc 1 1544 4 is_stmt 1 view .LVU565
1544:src/display.c **** 	    if (res) {
 1801              		.loc 1 1544 7 is_stmt 0 view .LVU566
 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB229:
 1807              	.LBI229:
1542:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1542 18 is_stmt 1 view .LVU567
 1809              	.LBB230:
1545:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1545 6 view .LVU568
1545:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1545 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1546:src/display.c **** 	    } else {
 1813              		.loc 1 1546 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1546:src/display.c **** 	    } else {
ARM GAS  /tmp/ccSEf3H9.s 			page 101


 1817              		.loc 1 1546 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1546:src/display.c **** 	    } else {
 1820              		.loc 1 1546 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1546:src/display.c **** 	    } else {
 1824              		.loc 1 1546 8 view .LVU573
 1825              	.LBE230:
 1826              	.LBE229:
1578:src/display.c **** 
 1827              		.loc 1 1578 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1556:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1556 6 is_stmt 1 view .LVU575
1556:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1556 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1560:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1560 6 is_stmt 1 view .LVU577
1560:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1560 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1561:src/display.c **** 	    else {
 1840              		.loc 1 1561 8 is_stmt 1 view .LVU579
1561:src/display.c **** 	    else {
 1841              		.loc 1 1561 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1574:src/display.c **** 	  }
 1844              		.loc 1 1574 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
1578:src/display.c **** 
 1846              		.loc 1 1578 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
 1849              	.L202:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1557 8 is_stmt 1 view .LVU583
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1557 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1557 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1557:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1557 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
ARM GAS  /tmp/ccSEf3H9.s 			page 102


1560:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1560 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB232:
 1864              	.LBB231:
1548:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1548 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1550:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1550 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1551:src/display.c **** #endif
 1874              		.loc 1 1551 8 view .LVU590
1551:src/display.c **** #endif
 1875              		.loc 1 1551 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE231:
 1880              	.LBE232:
1578:src/display.c **** 
 1881              		.loc 1 1578 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1558:src/display.c **** 	    }
 1885              		.loc 1 1558 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1558:src/display.c **** 	    }
 1888              		.loc 1 1558 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1560:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1560 6 is_stmt 1 view .LVU595
 1893              	.L194:
1563:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1563 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1565 8 view .LVU597
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1565 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1569:src/display.c **** 	      }
 1902              		.loc 1 1569 3 view .LVU599
ARM GAS  /tmp/ccSEf3H9.s 			page 103


 1903 0064 0848     		ldr	r0, .L203+12
1565:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1565 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1566:src/display.c **** 	      }
 1906              		.loc 1 1566 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1569:src/display.c **** 	      }
 1909              		.loc 1 1569 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1571:src/display.c **** #endif
 1913              		.loc 1 1571 8 view .LVU603
1571:src/display.c **** #endif
 1914              		.loc 1 1571 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1574:src/display.c **** 	  }
 1918              		.loc 1 1574 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1578:src/display.c **** 
 1920              		.loc 1 1578 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
 1933              		.cfi_endproc
 1934              	.LFE50:
 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1623 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1624:src/display.c **** 	int j=0;
 1951              		.loc 1 1624 2 view .LVU608
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccSEf3H9.s 			page 104


 1952              		.loc 1 1625 2 view .LVU609
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1623 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1623 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1625 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1629 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1623:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1623 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1625:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1625 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1626:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1626 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1627:src/display.c **** 
 1974              		.loc 1 1627 2 view .LVU617
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1629 2 view .LVU618
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1629 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
1629:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1629 5 view .LVU620
 1980 0012 48B1     		cbz	r0, .L206
1630:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1630 4 is_stmt 1 view .LVU621
1630:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1982              		.loc 1 1630 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1631:src/display.c **** 	  return;
 1986              		.loc 1 1631 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB233:
 1989              	.LBI233:
 407:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 407 14 view .LVU624
 1991              	.LBB234:
 408:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 408 3 view .LVU625
ARM GAS  /tmp/ccSEf3H9.s 			page 105


 408:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 408 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 408:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 408 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 408:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 408 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 408:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 408 19 view .LVU629
 2004              	.LBE234:
 2005              	.LBE233:
1686:src/display.c **** 
 2006              		.loc 1 1686 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1635:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1635 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1636:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1636 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
 2023              	.LVL200:
1637:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2024              		.loc 1 1637 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
 2028              	.LVL201:
1638:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1638 2 view .LVU634
1638:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1638 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1646:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1646 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
ARM GAS  /tmp/ccSEf3H9.s 			page 106


 2039              	.LVL202:
1647:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1647 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1648:src/display.c **** 
 2046              		.loc 1 1648 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1650:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1650 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1651:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1651 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1652:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1652 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1653 2 view .LVU642
1653:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1653 7 is_stmt 0 view .LVU643
 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2074              		.loc 1 1654 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1654 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1654 19 is_stmt 1 view .LVU646
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1654 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1654:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1654 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
ARM GAS  /tmp/ccSEf3H9.s 			page 107


 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1655:src/display.c **** 
 2085              		.loc 1 1655 2 is_stmt 1 view .LVU649
1655:src/display.c **** 
 2086              		.loc 1 1655 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1655:src/display.c **** 
 2089              		.loc 1 1655 19 is_stmt 1 discriminator 1 view .LVU651
1655:src/display.c **** 
 2090              		.loc 1 1655 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1655:src/display.c **** 
 2093              		.loc 1 1655 30 is_stmt 1 discriminator 1 view .LVU653
1655:src/display.c **** 
 2094              		.loc 1 1655 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1658 2 is_stmt 1 view .LVU655
1658:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1658 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1659:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1659 2 is_stmt 1 view .LVU657
 2108              	.LBB236:
 2109              	.LBI236:
 407:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 407 14 view .LVU658
 2111              	.LBB237:
 408:src/display.c ****   else	set_dig(base, ch);
 2112              		.loc 1 408 3 view .LVU659
 408:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 408 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
 2115              	.LVL211:
 408:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 408 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 408:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 408 12 is_stmt 1 view .LVU662
 408:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 408 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 408:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 408 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
ARM GAS  /tmp/ccSEf3H9.s 			page 108


 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 410:src/display.c **** }
 2128              		.loc 1 410 3 is_stmt 1 view .LVU665
 410:src/display.c **** }
 2129              		.loc 1 410 3 is_stmt 0 view .LVU666
 2130              	.LBE237:
 2131              	.LBE236:
1660:src/display.c **** 
 2132              		.loc 1 1660 2 is_stmt 1 view .LVU667
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1663 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1660:src/display.c **** 
 2136              		.loc 1 1660 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1663 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1660:src/display.c **** 
 2142              		.loc 1 1660 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1663 2 is_stmt 1 view .LVU672
1663:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1663 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1664:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1664 2 is_stmt 1 view .LVU674
 2149              	.LBB239:
 2150              	.LBI239:
 407:src/display.c ****   if (res) *res++ = ch;
 2151              		.loc 1 407 14 view .LVU675
 2152              	.LBB240:
 408:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 408 3 view .LVU676
 408:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 408 6 is_stmt 0 view .LVU677
 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 408:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 408 12 is_stmt 1 view .LVU678
 408:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 408 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 408:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 408 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
ARM GAS  /tmp/ccSEf3H9.s 			page 109


 2166              	.L219:
 410:src/display.c **** }
 2167              		.loc 1 410 3 is_stmt 1 view .LVU681
 410:src/display.c **** }
 2168              		.loc 1 410 3 is_stmt 0 view .LVU682
 2169              	.LBE240:
 2170              	.LBE239:
1665:src/display.c **** 
 2171              		.loc 1 1665 2 is_stmt 1 view .LVU683
1665:src/display.c **** 
 2172              		.loc 1 1665 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1668 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1665:src/display.c **** 
 2177              		.loc 1 1665 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1668 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1665:src/display.c **** 
 2183              		.loc 1 1665 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1668 2 is_stmt 1 view .LVU689
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1668 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1669:src/display.c **** 
 2189              		.loc 1 1669 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1668:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2191              		.loc 1 1668 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
 2193              	.LVL218:
1669:src/display.c **** 
 2194              		.loc 1 1669 2 is_stmt 1 view .LVU693
1669:src/display.c **** 
 2195              		.loc 1 1669 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1669:src/display.c **** 
 2198              		.loc 1 1669 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1672:src/display.c **** 
 2203              		.loc 1 1672 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1669:src/display.c **** 
 2205              		.loc 1 1669 8 view .LVU697
ARM GAS  /tmp/ccSEf3H9.s 			page 110


 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1672:src/display.c **** 
 2208              		.loc 1 1672 2 is_stmt 1 view .LVU698
1672:src/display.c **** 
 2209              		.loc 1 1672 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1672:src/display.c **** 
 2213              		.loc 1 1672 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1675:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1675 2 is_stmt 1 view .LVU701
 2219              	.LBB242:
 2220              	.LBI242:
 407:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 407 14 view .LVU702
 2222              	.LBB243:
 408:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 408 3 view .LVU703
 408:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 408 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 408:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 408 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 408:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 408 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 410:src/display.c **** }
 2233              		.loc 1 410 3 is_stmt 1 view .LVU707
 410:src/display.c **** }
 2234              		.loc 1 410 3 is_stmt 0 view .LVU708
 2235              	.LBE243:
 2236              	.LBE242:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2237              		.loc 1 1679 2 is_stmt 1 view .LVU709
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1679 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1679 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1679 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1680:src/display.c **** 	} else if (! dn_eq0(&a)) {
ARM GAS  /tmp/ccSEf3H9.s 			page 111


 2247              		.loc 1 1680 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB246:
 2250              	.LBI246:
 407:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 407 14 view .LVU714
 2252              	.LBB247:
 408:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 408 3 view .LVU715
 408:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 408 12 view .LVU716
 408:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 408 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE247:
 2259              	.LBE246:
1686:src/display.c **** 
 2260              		.loc 1 1686 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1639:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1639 4 is_stmt 1 view .LVU719
1639:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1639 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1640:src/display.c **** 	  else
 2272              		.loc 1 1640 6 is_stmt 1 view .LVU721
1640:src/display.c **** 	  else
 2273              		.loc 1 1640 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
 2275              	.LVL230:
1640:src/display.c **** 	  else
 2276              		.loc 1 1640 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1640:src/display.c **** 	  else
 2279              		.loc 1 1640 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1640:src/display.c **** 	  else
 2282              		.loc 1 1640 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1643:src/display.c **** 	}
 2286              		.loc 1 1643 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
ARM GAS  /tmp/ccSEf3H9.s 			page 112


 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB248:
 2295              	.LBB244:
 408:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 408 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 408:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 408 16 view .LVU728
 2301              	.LBE244:
 2302              	.LBE248:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1681 9 is_stmt 1 view .LVU729
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1681 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1681:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1681 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1682 4 is_stmt 1 view .LVU732
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1682 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1682:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1682 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
1683:src/display.c **** 	  }
 2320              		.loc 1 1683 6 is_stmt 1 view .LVU735
 2321              	.LVL238:
 2322              	.LBB249:
 2323              	.LBI249:
 407:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 407 14 view .LVU736
 2325              	.LBB250:
 408:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 408 3 view .LVU737
 408:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 408 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 408:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 408 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 408:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 408 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
ARM GAS  /tmp/ccSEf3H9.s 			page 113


 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 408:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 408 19 view .LVU741
 2338              	.LBE250:
 2339              	.LBE249:
1642:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1642 6 is_stmt 1 view .LVU742
 2341              	.LBB252:
 2342              	.LBI252:
 296:src/display.c **** {
 2343              		.loc 1 296 13 view .LVU743
 2344              	.LBB253:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 298 3 view .LVU744
 298:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 298 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 299:src/display.c **** }
 2349              		.loc 1 299 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 298 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2353              		.loc 1 299 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 300:src/display.c **** 
 2356              		.loc 1 300 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 300:src/display.c **** 
 2360              		.loc 1 300 1 view .LVU750
 2361              	.LBE253:
 2362              	.LBE252:
 2363              	.LBB254:
 2364              	.LBB245:
 409:src/display.c ****   return res;
 2365              		.loc 1 409 8 is_stmt 1 view .LVU751
 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 409:src/display.c ****   return res;
 2368              		.loc 1 409 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 410:src/display.c **** }
 2372              		.loc 1 410 3 is_stmt 1 view .LVU753
 410:src/display.c **** }
 2373              		.loc 1 410 3 is_stmt 0 view .LVU754
 2374              	.LBE245:
 2375              	.LBE254:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
ARM GAS  /tmp/ccSEf3H9.s 			page 114


 2376              		.loc 1 1679 2 is_stmt 1 view .LVU755
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1679 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1679:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1679 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB255:
 2388              	.LBB235:
 409:src/display.c ****   return res;
 2389              		.loc 1 409 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE235:
 2395              	.LBE255:
1632:src/display.c **** 	}
 2396              		.loc 1 1632 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB256:
 2401              	.LBB241:
 409:src/display.c ****   return res;
 2402              		.loc 1 409 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 409:src/display.c ****   return res;
 2406              		.loc 1 409 8 is_stmt 0 view .LVU761
 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
 409:src/display.c ****   return res;
 2409              		.loc 1 409 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
 2412              	.LVL251:
 2413              	.L216:
 409:src/display.c ****   return res;
 2414              		.loc 1 409 8 view .LVU763
 2415              	.LBE241:
 2416              	.LBE256:
 2417              	.LBB257:
 2418              	.LBB238:
 409:src/display.c ****   return res;
 2419              		.loc 1 409 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 409:src/display.c ****   return res;
ARM GAS  /tmp/ccSEf3H9.s 			page 115


 2423              		.loc 1 409 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 409:src/display.c ****   return res;
 2426              		.loc 1 409 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 409:src/display.c ****   return res;
 2431              		.loc 1 409 8 view .LVU767
 2432              	.LBE238:
 2433              	.LBE257:
 2434              	.LBB258:
 2435              	.LBB251:
 409:src/display.c ****   return res;
 2436              		.loc 1 409 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE251:
 2450              	.LBE258:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1689 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1690:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1690 2 view .LVU770
1691:src/display.c **** 	int j;
 2470              		.loc 1 1691 2 view .LVU771
1692:src/display.c **** 
 2471              		.loc 1 1692 2 view .LVU772
1694:src/display.c **** 	  return 1;
 2472              		.loc 1 1694 2 view .LVU773
1689:src/display.c **** 	decNumber x, w, n, d, t;
ARM GAS  /tmp/ccSEf3H9.s 			page 116


 2473              		.loc 1 1689 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1694:src/display.c **** 	  return 1;
 2484              		.loc 1 1694 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1689 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1694:src/display.c **** 	  return 1;
 2489              		.loc 1 1694 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1694:src/display.c **** 	  return 1;
 2492              		.loc 1 1694 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1695:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1695 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1752:src/display.c **** 
 2499              		.loc 1 1752 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB267:
 2510              	.LBI267:
1689:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1689 18 is_stmt 1 view .LVU781
 2512              	.LBB268:
1696:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1696 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1697:src/display.c **** 	  return 0;
 2519              		.loc 1 1697 2 view .LVU783
1697:src/display.c **** 	  return 0;
ARM GAS  /tmp/ccSEf3H9.s 			page 117


 2520              		.loc 1 1697 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1697:src/display.c **** 	  return 0;
 2525              		.loc 1 1697 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1699:src/display.c **** 	  return 0;
 2528              		.loc 1 1699 2 is_stmt 1 view .LVU786
1699:src/display.c **** 	  return 0;
 2529              		.loc 1 1699 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1699:src/display.c **** 	  return 0;
 2534              		.loc 1 1699 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1701:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1701 2 is_stmt 1 view .LVU789
1701:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1701 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1707:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1707 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
1708:src/display.c **** 
 2550              		.loc 1 1708 2 view .LVU792
 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
 2555              	.LVL266:
1710:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1710 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1711:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1711 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
ARM GAS  /tmp/ccSEf3H9.s 			page 118


 2567              	.LVL268:
1712:src/display.c **** 
 2568              		.loc 1 1712 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1714:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1714 2 view .LVU796
1714:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1714 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1714:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1714 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1719 2 is_stmt 1 view .LVU799
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1719 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1719:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1719 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1720 4 is_stmt 1 view .LVU802
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1720 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
 2595              	.LVL271:
1720:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2596              		.loc 1 1720 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1691:src/display.c **** 	int j;
 2599              		.loc 1 1691 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1691:src/display.c **** 	int j;
 2602              		.loc 1 1691 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1728:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1728 2 is_stmt 1 view .LVU807
1728:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1728 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
ARM GAS  /tmp/ccSEf3H9.s 			page 119


 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1728:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1728 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1729 2 is_stmt 1 view .LVU810
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1729 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1729:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1729 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1730:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1730 2 is_stmt 1 view .LVU813
1730:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1730 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1730:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1730 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1731:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1731 2 is_stmt 1 view .LVU816
1731:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1731 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1732:src/display.c **** 	  p -= 12;
 2639              		.loc 1 1732 2 is_stmt 1 view .LVU818
1732:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1732 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1736 12 is_stmt 1 view .LVU820
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1736 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1735:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1735 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1737:src/display.c **** 	  j += SEGS_PER_DIGIT;
ARM GAS  /tmp/ccSEf3H9.s 			page 120


 2652              		.loc 1 1737 4 is_stmt 1 view .LVU823
 2653              	.LBB269:
 2654              	.LBI269:
 407:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 407 14 view .LVU824
 2656              	.LBB270:
 408:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 408 3 view .LVU825
 408:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 408 12 view .LVU826
 408:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 408 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 408:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 408 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 408:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 408 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 408:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 408 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 410:src/display.c **** }
 2672              		.loc 1 410 3 is_stmt 1 view .LVU831
 410:src/display.c **** }
 2673              		.loc 1 410 3 is_stmt 0 view .LVU832
 2674              	.LBE270:
 2675              	.LBE269:
1738:src/display.c **** 	}
 2676              		.loc 1 1738 4 is_stmt 1 view .LVU833
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1736 12 is_stmt 0 view .LVU834
 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
1738:src/display.c **** 	}
 2680              		.loc 1 1738 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1736 24 is_stmt 1 view .LVU836
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1736 12 view .LVU837
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1736 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1741 2 is_stmt 1 view .LVU839
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1741 6 is_stmt 0 view .LVU840
ARM GAS  /tmp/ccSEf3H9.s 			page 121


 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1741:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1741 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1743 7 is_stmt 1 view .LVU842
1743:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1743 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1746:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1746 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1747 26 is_stmt 1 view .LVU845
 2709              	.LBB273:
 2710              	.LBB271:
 408:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 408 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 408:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 408 16 view .LVU847
 2718              	.LBE271:
 2719              	.LBE273:
 2720              	.LBB274:
 2721              	.LBB275:
 408:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 408 19 view .LVU848
 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 408:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 408 16 view .LVU849
 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 410:src/display.c **** }
 2729              		.loc 1 410 3 is_stmt 1 view .LVU850
 410:src/display.c **** }
 2730              		.loc 1 410 3 is_stmt 0 view .LVU851
 2731              	.LBE275:
 2732              	.LBE274:
1749:src/display.c **** 	}
 2733              		.loc 1 1749 4 is_stmt 1 view .LVU852
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1747 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccSEf3H9.s 			page 122


 2736              	.LVL294:
1749:src/display.c **** 	}
 2737              		.loc 1 1749 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1747 38 is_stmt 1 view .LVU855
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1747 26 view .LVU856
1747:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1747 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1748:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1748 4 is_stmt 1 view .LVU858
 2748              	.LBB277:
 2749              	.LBI274:
 407:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 407 14 view .LVU859
 2751              	.LBB276:
 408:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 408 3 view .LVU860
 408:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 408 12 view .LVU861
 408:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 408 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 408:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 408 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 409:src/display.c ****   return res;
 2761              		.loc 1 409 8 is_stmt 1 view .LVU864
 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
 2764              	.LVL299:
 409:src/display.c ****   return res;
 2765              		.loc 1 409 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
 2767              	.LVL300:
 2768              	.L251:
 409:src/display.c ****   return res;
 2769              		.loc 1 409 8 view .LVU866
 2770              	.LBE276:
 2771              	.LBE277:
 2772              	.LBB278:
 2773              	.LBB272:
 409:src/display.c ****   return res;
 2774              		.loc 1 409 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 409:src/display.c ****   return res;
ARM GAS  /tmp/ccSEf3H9.s 			page 123


 2778              		.loc 1 409 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 409:src/display.c ****   return res;
 2782              		.loc 1 409 8 view .LVU869
 2783              	.LBE272:
 2784              	.LBE278:
1742:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1742 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1733:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1733 4 is_stmt 1 view .LVU871
1734:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1734 4 view .LVU872
1734:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1734 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1736 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1725:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1725 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1726:src/display.c **** 	}
 2806              		.loc 1 1726 4 view .LVU876
 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
 2809 0146 0846     		mov	r0, r1
1691:src/display.c **** 	int j;
 2810              		.loc 1 1691 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
 2812              	.LVL307:
1726:src/display.c **** 	}
 2813              		.loc 1 1726 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1691:src/display.c **** 	int j;
 2816              		.loc 1 1691 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1702:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1702 4 is_stmt 1 view .LVU880
1702:src/display.c **** 	    *res++ += '-';
ARM GAS  /tmp/ccSEf3H9.s 			page 124


 2822              		.loc 1 1702 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1703:src/display.c **** 	  else
 2824              		.loc 1 1703 6 is_stmt 1 view .LVU882
1703:src/display.c **** 	  else
 2825              		.loc 1 1703 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1703:src/display.c **** 	  else
 2828              		.loc 1 1703 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1703:src/display.c **** 	  else
 2831              		.loc 1 1703 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1703:src/display.c **** 	  else
 2834              		.loc 1 1703 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1703:src/display.c **** 	  else
 2837              		.loc 1 1703 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1715:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1715 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1716:src/display.c **** 	}
 2845              		.loc 1 1716 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
1721:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1721 6 view .LVU890
1721:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1721 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
 2855              	.LVL316:
1721:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1721 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1721:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1721 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1721:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1721 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1722:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 125


 2865              		.loc 1 1722 6 is_stmt 1 view .LVU895
1722:src/display.c **** 	  }
 2866              		.loc 1 1722 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1722:src/display.c **** 	  }
 2869              		.loc 1 1722 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1722:src/display.c **** 	  }
 2873              		.loc 1 1722 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1705:src/display.c **** 	}
 2877              		.loc 1 1705 6 is_stmt 1 view .LVU899
 2878              	.LBB279:
 2879              	.LBI279:
 296:src/display.c **** {
 2880              		.loc 1 296 13 view .LVU900
 2881              	.LBB280:
 298:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 298 3 view .LVU901
 298:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 298 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 299:src/display.c **** }
 2886              		.loc 1 299 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 298 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2890              		.loc 1 299 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
 2892              	.LVL322:
 300:src/display.c **** 
 2893              		.loc 1 300 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE280:
 2906              	.LBE279:
 2907              	.LBE268:
 2908              	.LBE267:
 2909              		.cfi_endproc
 2910              	.LFE23:
ARM GAS  /tmp/ccSEf3H9.s 			page 126


 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 562 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/display.c ****       int c;
 2930              		.loc 1 563 7 view .LVU908
 2931              	.LVL323:
 564:src/display.c ****       unsigned int b;
 2932              		.loc 1 564 7 view .LVU909
 565:src/display.c **** 
 2933              		.loc 1 565 7 view .LVU910
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 568 7 view .LVU911
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 562 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 568:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2940              		.loc 1 568 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 577:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 577 7 is_stmt 1 view .LVU914
 577:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 577 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 577 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
ARM GAS  /tmp/ccSEf3H9.s 			page 127


 579:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 579 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 580:src/display.c **** 
 2959              		.loc 1 580 7 view .LVU918
 579:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 579 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 580:src/display.c **** 
 2964              		.loc 1 580 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 583 7 is_stmt 1 view .LVU921
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 583 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 583:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 583 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 585 7 is_stmt 1 view .LVU924
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 585 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 585:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 585 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 587:src/display.c **** 
 2982              		.loc 1 587 5 view .LVU927
 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
 2985              	.L277:
 573:src/display.c ****       }
 2986              		.loc 1 573 16 is_stmt 1 view .LVU928
 573:src/display.c ****       }
 2987              		.loc 1 573 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 573:src/display.c ****       }
 2992              		.loc 1 573 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 573:src/display.c ****       }
 2995              		.loc 1 573 39 is_stmt 1 view .LVU931
 577:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 577 7 view .LVU932
 577:src/display.c **** 	SET_EXP_SIGN;
ARM GAS  /tmp/ccSEf3H9.s 			page 128


 2997              		.loc 1 577 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 577:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 577 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 578:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 578 2 is_stmt 1 view .LVU935
 3004              	.LBB287:
 3005              	.LBI287:
 308:src/display.c **** {
 3006              		.loc 1 308 13 view .LVU936
 3007              	.LBB288:
 310:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 310 3 view .LVU937
 310:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 310 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 311:src/display.c **** }
 3012              		.loc 1 311 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 310:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 310 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 311:src/display.c **** }
 3016              		.loc 1 311 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 312:src/display.c **** 
 3019              		.loc 1 312 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 312:src/display.c **** 
 3023              		.loc 1 312 1 view .LVU943
 3024              	.LBE288:
 3025              	.LBE287:
 3026              	.LBB289:
 3027              	.LBI289:
 562:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 562 17 is_stmt 1 view .LVU944
 3029              	.LBB290:
 586:src/display.c ****     }
 3030              		.loc 1 586 2 view .LVU945
 3031              	.LBE290:
 3032              	.LBE289:
 587:src/display.c **** 
 3033              		.loc 1 587 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB292:
ARM GAS  /tmp/ccSEf3H9.s 			page 129


 3041              	.LBB291:
 586:src/display.c ****     }
 3042              		.loc 1 586 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 586:src/display.c ****     }
 3049              		.loc 1 586 2 view .LVU948
 3050              	.LBE291:
 3051              	.LBE292:
 584:src/display.c ****       if (get_overflow())
 3052              		.loc 1 584 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
 3079              	.LVL337:
 3080              	.LFB18:
1402:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1402 67 view -0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1402:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1402 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
ARM GAS  /tmp/ccSEf3H9.s 			page 130


 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1402:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1402 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1403:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1403 2 is_stmt 1 view .LVU953
1403:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1403 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1403:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1403 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1409 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1403:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1403 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1404:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1404 2 is_stmt 1 view .LVU958
1405:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1405 2 view .LVU959
1406:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1406 2 view .LVU960
1407:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1407 2 view .LVU961
1408:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1408 2 view .LVU962
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1409 2 view .LVU963
1409:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1409 6 is_stmt 0 view .LVU964
 3125 001e 0492     		str	r2, [sp, #16]
1410:src/display.c **** 
 3126              		.loc 1 1410 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1412:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1412 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1420:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1420 2 view .LVU967
1420:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1420 5 is_stmt 0 view .LVU968
ARM GAS  /tmp/ccSEf3H9.s 			page 131


 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1425 2 is_stmt 1 view .LVU969
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1425 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1425 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1425:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1425 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1442 4 is_stmt 1 view .LVU973
1442:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1442 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB293:
1443:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1443 6 is_stmt 1 view .LVU975
1443:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1443 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3163              		.loc 1 1444 6 is_stmt 1 view .LVU977
1443:src/display.c **** 	    vs &= mask;
 3164              		.loc 1 1443 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3167              		.loc 1 1444 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1445:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1445 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1444 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1444:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1444 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
ARM GAS  /tmp/ccSEf3H9.s 			page 132


1445:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1445 6 is_stmt 1 view .LVU983
1445:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1445 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1445:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1445 9 view .LVU985
 3184              	.LBE293:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1449 4 is_stmt 1 view .LVU986
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1449 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1449 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1452 11 is_stmt 1 view .LVU989
 3194              	.LBB294:
1460:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1460 6 view .LVU990
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1461 6 view .LVU991
1461:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1461 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1462 6 is_stmt 1 view .LVU993
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1462 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
 3205 0090 0023     		moveq	r3, #0
1462:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1462 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1463:src/display.c **** 
 3212              		.loc 1 1463 6 is_stmt 1 discriminator 4 view .LVU996
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1465 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1465 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
ARM GAS  /tmp/ccSEf3H9.s 			page 133


 3218              		.loc 1 1465 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1466:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1466 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1463:src/display.c **** 
 3222              		.loc 1 1463 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1465:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU1002
1466:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1466 6 discriminator 4 view .LVU1003
1466:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1466 16 discriminator 4 view .LVU1004
1466:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1466 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1466:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1466 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB295:
1467:src/display.c **** 	      v /= b;
 3239              		.loc 1 1467 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1468:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1468 8 discriminator 3 view .LVU1008
1469:src/display.c **** 	    }
 3245              		.loc 1 1469 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1469:src/display.c **** 	    }
 3249              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU1010
 3250              	.LBE295:
1466:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1466 21 discriminator 3 view .LVU1011
1466:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1466 16 discriminator 3 view .LVU1012
1466:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1466 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1466:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1466 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
ARM GAS  /tmp/ccSEf3H9.s 			page 134


 3260              	.LVL356:
 3261              	.L304:
1466:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1466 6 view .LVU1015
 3263              	.LBE294:
1479:src/display.c **** 	if (res) {
 3264              		.loc 1 1479 2 is_stmt 1 view .LVU1016
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1480 2 view .LVU1017
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1480 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1481 4 is_stmt 1 view .LVU1019
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1481 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1481 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1481:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1481 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1482 4 is_stmt 1 view .LVU1023
1482:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1482 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1489:src/display.c **** 	      *res++ = buf[i];
 3286              		.loc 1 1489 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
1489:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1489 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1490:src/display.c **** 	  }
 3297              		.loc 1 1490 8 is_stmt 1 view .LVU1027
1490:src/display.c **** 	  }
 3298              		.loc 1 1490 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1490:src/display.c **** 	  }
 3301              		.loc 1 1490 15 view .LVU1029
ARM GAS  /tmp/ccSEf3H9.s 			page 135


 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1489:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1489 12 is_stmt 1 view .LVU1030
1489:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1489 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1537:src/display.c **** 
 3310              		.loc 1 1537 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1449 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1452:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1452 11 is_stmt 1 view .LVU1034
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1453 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1453 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1453:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1453 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
1454:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1454 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1454:src/display.c **** 	      const int r = v % b;
 3335              		.loc 1 1454 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB296:
1455:src/display.c **** 	      v /= b;
 3341              		.loc 1 1455 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
ARM GAS  /tmp/ccSEf3H9.s 			page 136


 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1456 8 discriminator 3 view .LVU1041
 3352              	.LBE296:
1454:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB297:
1457:src/display.c **** 	    }
 3358              		.loc 1 1457 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1457:src/display.c **** 	    }
 3361              		.loc 1 1457 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE297:
1454:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1454 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB298:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1456 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1457:src/display.c **** 	    }
 3371              		.loc 1 1457 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE298:
1454:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1454 24 discriminator 3 view .LVU1048
 3374              	.LBB299:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1456 10 is_stmt 0 discriminator 3 view .LVU1049
 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
 3378              	.LVL374:
1456:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1456 10 discriminator 3 view .LVU1050
 3380              	.LBE299:
1454:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1454 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1454:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1454 16 is_stmt 1 discriminator 3 view .LVU1052
1454:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1454 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1479:src/display.c **** 	if (res) {
 3389              		.loc 1 1479 2 is_stmt 1 view .LVU1054
1480:src/display.c **** 	  if (sign) *res++ = '-';
ARM GAS  /tmp/ccSEf3H9.s 			page 137


 3390              		.loc 1 1480 2 view .LVU1055
1480:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1480 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB300:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1508 4 is_stmt 1 view .LVU1057
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1508 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1509 4 is_stmt 1 view .LVU1059
1509:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1509 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1508 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1511:src/display.c **** #endif
 3414              		.loc 1 1511 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1513 4 view .LVU1063
1514:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1514 26 is_stmt 0 view .LVU1064
 3420 017e 724B     		ldr	r3, .L383
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1513 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
1514:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1514 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1513 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1514:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1514 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1514:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1514 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1513:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
ARM GAS  /tmp/ccSEf3H9.s 			page 138


 3432              		.loc 1 1513 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1514:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1514 4 is_stmt 1 view .LVU1071
1514:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1514 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1516:src/display.c **** 
 3439              		.loc 1 1516 4 is_stmt 1 view .LVU1073
1516:src/display.c **** 
 3440              		.loc 1 1516 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1516:src/display.c **** 
 3445              		.loc 1 1516 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1518:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1518 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1519 4 view .LVU1077
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1519 16 view .LVU1078
1516:src/display.c **** 
 3454              		.loc 1 1516 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1520:src/display.c **** 	      break;
 3458              		.loc 1 1520 6 is_stmt 1 view .LVU1080
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1519 24 view .LVU1081
1520:src/display.c **** 	      break;
 3460              		.loc 1 1520 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
 3463 01b2 00F0EC80 		beq	.L324
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1519 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1519 16 is_stmt 1 discriminator 2 view .LVU1084
1519:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1519 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1522:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1522 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
ARM GAS  /tmp/ccSEf3H9.s 			page 139


 3473              	.LVL385:
 3474              	.L326:
1522:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1522 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB301:
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1528 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB302:
 3489              	.LBI302:
 367:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 367 14 is_stmt 1 view .LVU1089
 3491              	.LBB303:
 368:src/display.c ****     return res;
 3492              		.loc 1 368 3 view .LVU1090
 368:src/display.c ****     return res;
 3493              		.loc 1 368 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 368:src/display.c ****     return res;
 3495              		.loc 1 368 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 368:src/display.c ****     return res;
 3499              		.loc 1 368 6 view .LVU1093
 3500              	.LBE303:
 3501              	.LBE302:
1529:src/display.c **** 	  }
 3502              		.loc 1 1529 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE301:
1522:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1522:src/display.c **** 	    int ch = buf[j++];
 3506              		.loc 1 1522 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB306:
1529:src/display.c **** 	  }
 3509              		.loc 1 1529 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1529:src/display.c **** 	  }
 3512              		.loc 1 1529 10 discriminator 2 view .LVU1098
 3513              	.LBE306:
1522:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1522 24 is_stmt 1 discriminator 2 view .LVU1099
1522:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1522 14 discriminator 2 view .LVU1100
ARM GAS  /tmp/ccSEf3H9.s 			page 140


1522:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1522 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB307:
1523:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1523 6 is_stmt 1 view .LVU1102
1525:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1525 8 view .LVU1103
1523:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1523 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1524:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1524 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1524:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1524 6 is_stmt 1 view .LVU1106
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1526 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1525:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1525 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1526:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1526 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1527 6 view .LVU1110
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1527 13 is_stmt 0 view .LVU1111
 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1527 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
1528:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1528 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB305:
 3549              	.LBB304:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 370 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE304:
 3553              	.LBE305:
1527:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1527 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1529:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 141


 3557              		.loc 1 1529 6 is_stmt 1 view .LVU1116
1529:src/display.c **** 	  }
 3558              		.loc 1 1529 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1529:src/display.c **** 	  }
 3561              		.loc 1 1529 10 view .LVU1118
 3562              	.LBE307:
1522:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1522 24 is_stmt 1 view .LVU1119
1522:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1522 14 view .LVU1120
 3565              	.L335:
1531:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1531 4 view .LVU1121
1531:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1531 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1532:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1532 6 is_stmt 1 view .LVU1123
1532:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1532 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1533 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
1533:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1533 8 is_stmt 0 view .LVU1126
 3586              	.LBE300:
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1426 4 is_stmt 1 view .LVU1127
1426:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3588              		.loc 1 1426 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1427:src/display.c **** 	    v = value;
 3597              		.loc 1 1427 4 is_stmt 1 view .LVU1129
1427:src/display.c **** 	    v = value;
 3598              		.loc 1 1427 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
ARM GAS  /tmp/ccSEf3H9.s 			page 142


 3600              	.LVL400:
1427:src/display.c **** 	    v = value;
 3601              		.loc 1 1427 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1427:src/display.c **** 	    v = value;
 3603              		.loc 1 1427 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1427:src/display.c **** 	    v = value;
 3607              		.loc 1 1427 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1427:src/display.c **** 	    v = value;
 3612              		.loc 1 1427 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1402:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1402 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1402:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1402 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB310:
1436:src/display.c **** 	      v /= b;
 3628              		.loc 1 1436 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3635              		.loc 1 1437 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1438:src/display.c **** 	    }
 3637              		.loc 1 1438 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE310:
1435:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1435 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1435:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1435 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
ARM GAS  /tmp/ccSEf3H9.s 			page 143


 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB311:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1437 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1438:src/display.c **** 	    }
 3652              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE311:
1435:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1435 24 discriminator 3 view .LVU1144
 3655              	.LBB312:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1437 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1437:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1437 10 discriminator 3 view .LVU1146
 3661              	.LBE312:
1435:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1435 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1435:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1435 16 is_stmt 1 discriminator 3 view .LVU1148
1435:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1435 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1429:src/display.c **** 	    if (sign)
 3672              		.loc 1 1429 4 is_stmt 1 view .LVU1150
1429:src/display.c **** 	    if (sign)
 3673              		.loc 1 1429 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
 3675 0290 DBD1     		bne	.L297
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1430 6 is_stmt 1 view .LVU1152
1430:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3677              		.loc 1 1430 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1432:src/display.c **** 	    return;
 3683              		.loc 1 1432 6 is_stmt 1 view .LVU1154
 3684              	.LBB313:
 3685              	.LBI313:
 407:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 407 14 view .LVU1155
 3687              	.LBB314:
 408:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccSEf3H9.s 			page 144


 3688              		.loc 1 408 3 view .LVU1156
 408:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 408 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 408:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 408 12 is_stmt 1 view .LVU1158
 408:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 408 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE314:
 3699              	.LBE313:
1537:src/display.c **** 
 3700              		.loc 1 1537 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1417:src/display.c **** 	}
 3709              		.loc 1 1417 11 is_stmt 1 view .LVU1161
1417:src/display.c **** 	}
 3710              		.loc 1 1417 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1417:src/display.c **** 	}
 3713              		.loc 1 1417 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1417:src/display.c **** 	}
 3716              		.loc 1 1417 27 is_stmt 1 view .LVU1164
1420:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1420 2 view .LVU1165
1420:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1420 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
 3721              	.LVL416:
 3722              	.L374:
1421:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1421 4 is_stmt 1 view .LVU1167
1421:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1421 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1422:src/display.c **** 	}
 3727              		.loc 1 1422 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
ARM GAS  /tmp/ccSEf3H9.s 			page 145


 3732              	.L315:
1483:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1483 12 view .LVU1170
1483:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1483 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1483:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1483 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1484:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1484 8 is_stmt 1 view .LVU1173
1484:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1484 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1484:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1484 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1483:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1483 12 is_stmt 1 view .LVU1176
1483:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1483 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1483:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1483 12 view .LVU1178
 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1485:src/display.c **** 	    *res++ = '.';
 3765              		.loc 1 1485 6 is_stmt 1 view .LVU1179
1485:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1485 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1486:src/display.c **** 	  }
 3769              		.loc 1 1486 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1486:src/display.c **** 	  }
 3771              		.loc 1 1486 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1537:src/display.c **** 
 3773              		.loc 1 1537 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
ARM GAS  /tmp/ccSEf3H9.s 			page 146


 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB316:
1445:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1445 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1445:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1445 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1446:src/display.c **** 	  }
 3798              		.loc 1 1446 8 is_stmt 1 view .LVU1186
1446:src/display.c **** 	  }
 3799              		.loc 1 1446 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1446:src/display.c **** 	  }
 3804              		.loc 1 1446 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
1446:src/display.c **** 	  }
 3807              		.loc 1 1446 11 view .LVU1189
 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1446:src/display.c **** 	  }
 3810              		.loc 1 1446 11 view .LVU1190
 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1446:src/display.c **** 	  }
 3813              		.loc 1 1446 11 view .LVU1191
 3814              	.LBE316:
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1449 4 is_stmt 1 view .LVU1192
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1449 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1449:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1449 7 view .LVU1194
ARM GAS  /tmp/ccSEf3H9.s 			page 147


 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB317:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1508 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1510:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1510 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.344
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1510:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1510 6 view .LVU1197
 3845              	.LBE317:
1428:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1428 6 is_stmt 1 view .LVU1198
1428:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1428 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1428:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1428 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
 3852              	.LVL432:
1429:src/display.c **** 	    if (sign)
 3853              		.loc 1 1429 4 is_stmt 1 view .LVU1201
1429:src/display.c **** 	    if (sign)
 3854              		.loc 1 1429 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1431:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1431 8 is_stmt 1 view .LVU1203
 3860              	.LBB318:
 3861              	.LBI318:
 407:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 407 14 view .LVU1204
 3863              	.LBB319:
 408:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 408 3 view .LVU1205
 408:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 408 6 is_stmt 0 view .LVU1206
ARM GAS  /tmp/ccSEf3H9.s 			page 148


 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 409:src/display.c ****   return res;
 3868              		.loc 1 409 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 409:src/display.c ****   return res;
 3873              		.loc 1 409 8 is_stmt 0 view .LVU1208
 3874              	.LBE319:
 3875              	.LBE318:
1432:src/display.c **** 	    return;
 3876              		.loc 1 1432 6 is_stmt 1 view .LVU1209
 3877              	.LBB320:
 407:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 407 14 view .LVU1210
 3879              	.LBB315:
 408:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 408 3 view .LVU1211
 3881              	.L301:
 409:src/display.c ****   return res;
 3882              		.loc 1 409 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 409:src/display.c ****   return res;
 3890              		.loc 1 409 8 is_stmt 0 view .LVU1213
 3891              	.LBE315:
 3892              	.LBE320:
 3893              	.LBB321:
1515:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1515 6 is_stmt 1 view .LVU1214
1515:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1515 20 is_stmt 0 view .LVU1215
 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1522:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1522 14 is_stmt 1 discriminator 1 view .LVU1216
1522:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1522 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1522:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1522 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1531:src/display.c **** 	    if (dig >= 0)
ARM GAS  /tmp/ccSEf3H9.s 			page 149


 3910              		.loc 1 1531 4 is_stmt 1 view .LVU1219
1531:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1531 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1508:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1508 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1534:src/display.c **** 	  }
 3924              		.loc 1 1534 11 is_stmt 1 view .LVU1222
 3925              	.LBB308:
 3926              	.LBI308:
 296:src/display.c **** {
 3927              		.loc 1 296 13 view .LVU1223
 3928              	.LBB309:
 298:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 298 3 view .LVU1224
 298:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 298 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 299:src/display.c **** }
 3933              		.loc 1 299 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 298 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 3937              		.loc 1 299 3 is_stmt 1 view .LVU1228
 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
 300:src/display.c **** 
 3940              		.loc 1 300 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
 3943              	.L337:
 300:src/display.c **** 
 3944              		.loc 1 300 1 view .LVU1230
 3945              	.LBE309:
 3946              	.LBE308:
 3947              	.LBE321:
 3948              	.LBB322:
1466:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1466 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
ARM GAS  /tmp/ccSEf3H9.s 			page 150


 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE322:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.set_annunciators,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.syntax unified
 3965              		.thumb
 3966              		.thumb_func
 3967              		.fpu fpv4-sp-d16
 3969              	set_annunciators:
 3970              	.LFB32:
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3971              		.loc 1 2537 7 is_stmt 1 view -0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 0
 3974              		@ frame_needed = 0, uses_anonymous_args = 0
2538:src/display.c **** 
 3975              		.loc 1 2538 2 view .LVU1233
2537:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3976              		.loc 1 2537 7 is_stmt 0 view .LVU1234
 3977 0000 70B5     		push	{r4, r5, r6, lr}
 3978              		.cfi_def_cfa_offset 16
 3979              		.cfi_offset 4, -16
 3980              		.cfi_offset 5, -12
 3981              		.cfi_offset 6, -8
 3982              		.cfi_offset 14, -4
2545:src/display.c **** #else
 3983              		.loc 1 2545 11 view .LVU1235
 3984 0002 344E     		ldr	r6, .L416
2538:src/display.c **** 
 3985              		.loc 1 2538 29 view .LVU1236
 3986 0004 FFF7FEFF 		bl	get_trig_mode
 3987              	.LVL443:
2545:src/display.c **** #else
 3988              		.loc 1 2545 11 view .LVU1237
 3989 0008 3368     		ldr	r3, [r6]
 3990 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2545:src/display.c **** #else
 3991              		.loc 1 2545 2 view .LVU1238
 3992 000e 1907     		lsls	r1, r3, #28
2538:src/display.c **** 
 3993              		.loc 1 2538 29 view .LVU1239
 3994 0010 0446     		mov	r4, r0
 3995              	.LVL444:
2545:src/display.c **** #else
 3996              		.loc 1 2545 2 is_stmt 1 view .LVU1240
 3997              	.LBB341:
 3998              	.LBB342:
 340:src/display.c ****   else	clr_dot(n);
 3999              		.loc 1 340 11 is_stmt 0 view .LVU1241
 4000 0012 4FF08800 		mov	r0, #136
 4001              	.LBE342:
 4002              	.LBE341:
2545:src/display.c **** #else
ARM GAS  /tmp/ccSEf3H9.s 			page 151


 4003              		.loc 1 2545 2 view .LVU1242
 4004 0016 03D5     		bpl	.L388
2545:src/display.c **** #else
 4005              		.loc 1 2545 33 discriminator 1 view .LVU1243
 4006 0018 2F4B     		ldr	r3, .L416+4
2545:src/display.c **** #else
 4007              		.loc 1 2545 2 discriminator 1 view .LVU1244
 4008 001a 1B68     		ldr	r3, [r3]
 4009 001c 002B     		cmp	r3, #0
 4010 001e 56D0     		beq	.L412
 4011              	.L388:
 4012              	.LVL445:
 4013              	.LBB345:
 4014              	.LBI341:
 339:src/display.c ****   if (on)	set_dot(n);
 4015              		.loc 1 339 6 is_stmt 1 view .LVU1245
 4016              	.LBB343:
 340:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 340 3 view .LVU1246
 341:src/display.c **** }
 4018              		.loc 1 341 8 view .LVU1247
 4019 0020 FFF7FEFF 		bl	clr_dot
 4020              	.LVL446:
 4021              	.L389:
 341:src/display.c **** }
 4022              		.loc 1 341 8 is_stmt 0 view .LVU1248
 4023              	.LBE343:
 4024              	.LBE345:
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4025              		.loc 1 2549 2 is_stmt 1 view .LVU1249
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4026              		.loc 1 2549 19 is_stmt 0 view .LVU1250
 4027 0024 2D4D     		ldr	r5, .L416+8
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4028              		.loc 1 2549 2 view .LVU1251
 4029 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 4030              	.LBB346:
 4031              	.LBB347:
 340:src/display.c ****   else	clr_dot(n);
 4032              		.loc 1 340 11 view .LVU1252
 4033 0028 8620     		movs	r0, #134
 4034              	.LBE347:
 4035              	.LBE346:
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4036              		.loc 1 2549 2 view .LVU1253
 4037 002a 23B9     		cbnz	r3, .L390
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4038              		.loc 1 2549 47 discriminator 2 view .LVU1254
 4039 002c 6A69     		ldr	r2, [r5, #20]
 4040 002e 2C4B     		ldr	r3, .L416+12
 4041 0030 1340     		ands	r3, r3, r2
2549:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4042              		.loc 1 2549 2 discriminator 2 view .LVU1255
 4043 0032 002B     		cmp	r3, #0
 4044 0034 48D0     		beq	.L413
 4045              	.L390:
 4046              	.LBB350:
ARM GAS  /tmp/ccSEf3H9.s 			page 152


 4047              	.LBB348:
 340:src/display.c ****   else	clr_dot(n);
 4048              		.loc 1 340 11 is_stmt 1 view .LVU1256
 4049 0036 FFF7FEFF 		bl	set_dot
 4050              	.LVL447:
 4051              	.L391:
 4052              	.LBE348:
 4053              	.LBE350:
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4054              		.loc 1 2550 2 view .LVU1257
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4055              		.loc 1 2550 31 is_stmt 0 view .LVU1258
 4056 003a 2A4A     		ldr	r2, .L416+16
 4057 003c 6B69     		ldr	r3, [r5, #20]
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4058              		.loc 1 2550 2 view .LVU1259
 4059 003e 1A42     		tst	r2, r3
 4060              	.LBB351:
 4061              	.LBB352:
 340:src/display.c ****   else	clr_dot(n);
 4062              		.loc 1 340 11 view .LVU1260
 4063 0040 4FF08500 		mov	r0, #133
 4064              	.LBE352:
 4065              	.LBE351:
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4066              		.loc 1 2550 2 view .LVU1261
 4067 0044 02D0     		beq	.L392
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4068              		.loc 1 2550 48 discriminator 1 view .LVU1262
 4069 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2550:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4070              		.loc 1 2550 2 discriminator 1 view .LVU1263
 4071 0048 DA06     		lsls	r2, r3, #27
 4072 004a 3AD4     		bmi	.L393
 4073              	.L392:
 4074              	.LVL448:
 4075              	.LBB355:
 4076              	.LBI351:
 339:src/display.c ****   if (on)	set_dot(n);
 4077              		.loc 1 339 6 is_stmt 1 view .LVU1264
 4078              	.LBB353:
 340:src/display.c ****   else	clr_dot(n);
 4079              		.loc 1 340 3 view .LVU1265
 341:src/display.c **** }
 4080              		.loc 1 341 8 view .LVU1266
 4081 004c FFF7FEFF 		bl	clr_dot
 4082              	.LVL449:
 4083              	.L394:
 341:src/display.c **** }
 4084              		.loc 1 341 8 is_stmt 0 view .LVU1267
 4085              	.LBE353:
 4086              	.LBE355:
2551:src/display.c **** 	set_IO_annunciator();
 4087              		.loc 1 2551 2 is_stmt 1 view .LVU1268
 4088 0050 6820     		movs	r0, #104
 4089 0052 FFF7FEFF 		bl	get_user_flag
 4090              	.LVL450:
ARM GAS  /tmp/ccSEf3H9.s 			page 153


 4091              	.LBB356:
 4092              	.LBI356:
 339:src/display.c ****   if (on)	set_dot(n);
 4093              		.loc 1 339 6 view .LVU1269
 4094              	.LBB357:
 340:src/display.c ****   else	clr_dot(n);
 4095              		.loc 1 340 3 view .LVU1270
 340:src/display.c ****   else	clr_dot(n);
 4096              		.loc 1 340 6 is_stmt 0 view .LVU1271
 4097 0056 28B3     		cbz	r0, .L395
 340:src/display.c ****   else	clr_dot(n);
 4098              		.loc 1 340 11 is_stmt 1 view .LVU1272
 4099              	.LBE357:
 4100              	.LBE356:
 4101              	.LBB361:
 4102              	.LBB362:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4103              		.loc 1 2579 9 is_stmt 0 view .LVU1273
 4104 0058 234D     		ldr	r5, .L416+20
 4105              	.LBE362:
 4106              	.LBE361:
 4107              	.LBB370:
 4108              	.LBB358:
 340:src/display.c ****   else	clr_dot(n);
 4109              		.loc 1 340 11 view .LVU1274
 4110 005a 8320     		movs	r0, #131
 4111              	.LVL451:
 340:src/display.c ****   else	clr_dot(n);
 4112              		.loc 1 340 11 view .LVU1275
 4113 005c FFF7FEFF 		bl	set_dot
 4114              	.LVL452:
 340:src/display.c ****   else	clr_dot(n);
 4115              		.loc 1 340 11 view .LVU1276
 4116              	.LBE358:
 4117              	.LBE370:
2552:src/display.c **** 
 4118              		.loc 1 2552 2 is_stmt 1 view .LVU1277
 4119              	.LBB371:
 4120              	.LBI361:
2564:src/display.c **** #ifndef DM42
 4121              		.loc 1 2564 12 view .LVU1278
 4122              	.LBB367:
2569:src/display.c **** #endif
 4123              		.loc 1 2569 4 view .LVU1279
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4124              		.loc 1 2579 2 view .LVU1280
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4125              		.loc 1 2579 5 is_stmt 0 view .LVU1281
 4126 0060 2B68     		ldr	r3, [r5]
 4127 0062 33BB     		cbnz	r3, .L414
 4128              	.L397:
 4129              	.LBE367:
 4130              	.LBE371:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4131              		.loc 1 2556 2 is_stmt 1 view .LVU1282
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4132              		.loc 1 2556 11 is_stmt 0 view .LVU1283
ARM GAS  /tmp/ccSEf3H9.s 			page 154


 4133 0064 3368     		ldr	r3, [r6]
 4134 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4135 006a 03F00103 		and	r3, r3, #1
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4136              		.loc 1 2556 2 view .LVU1284
 4137 006e 2343     		orrs	r3, r3, r4
 4138 0070 13F0FF0F 		tst	r3, #255
 4139              	.LBB372:
 4140              	.LBB373:
 340:src/display.c ****   else	clr_dot(n);
 4141              		.loc 1 340 11 view .LVU1285
 4142 0074 4FF08C00 		mov	r0, #140
 4143              	.LBE373:
 4144              	.LBE372:
2556:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4145              		.loc 1 2556 2 view .LVU1286
 4146 0078 06D1     		bne	.L415
 4147              	.LVL453:
 4148              	.LBB376:
 4149              	.LBI372:
 339:src/display.c ****   if (on)	set_dot(n);
 4150              		.loc 1 339 6 is_stmt 1 view .LVU1287
 4151              	.LBB374:
 340:src/display.c ****   else	clr_dot(n);
 4152              		.loc 1 340 3 view .LVU1288
 340:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 340 11 view .LVU1289
 4154 007a FFF7FEFF 		bl	set_dot
 4155              	.LVL454:
 340:src/display.c ****   else	clr_dot(n);
 4156              		.loc 1 340 11 is_stmt 0 view .LVU1290
 4157              	.LBE374:
 4158              	.LBE376:
2557:src/display.c ****       }
 4159              		.loc 1 2557 2 is_stmt 1 view .LVU1291
 4160              	.L400:
 4161              	.LBB377:
 4162              	.LBI377:
 339:src/display.c ****   if (on)	set_dot(n);
 4163              		.loc 1 339 6 view .LVU1292
 4164              	.LBB378:
 340:src/display.c ****   else	clr_dot(n);
 4165              		.loc 1 340 3 view .LVU1293
 341:src/display.c **** }
 4166              		.loc 1 341 8 view .LVU1294
 4167              	.LBE378:
 4168              	.LBE377:
2558:src/display.c **** 
 4169              		.loc 1 2558 7 is_stmt 0 view .LVU1295
 4170 007e BDE87040 		pop	{r4, r5, r6, lr}
 4171              		.cfi_remember_state
 4172              		.cfi_restore 14
 4173              		.cfi_restore 6
 4174              		.cfi_restore 5
 4175              		.cfi_restore 4
 4176              		.cfi_def_cfa_offset 0
 4177              	.LVL455:
ARM GAS  /tmp/ccSEf3H9.s 			page 155


 4178              	.LBB382:
 4179              	.LBB379:
 341:src/display.c **** }
 4180              		.loc 1 341 8 view .LVU1296
 4181 0082 8B20     		movs	r0, #139
 4182 0084 FFF7FEBF 		b	clr_dot
 4183              	.LVL456:
 4184              	.L415:
 4185              		.cfi_restore_state
 341:src/display.c **** }
 4186              		.loc 1 341 8 view .LVU1297
 4187              	.LBE379:
 4188              	.LBE382:
 4189              	.LBB383:
 339:src/display.c ****   if (on)	set_dot(n);
 4190              		.loc 1 339 6 is_stmt 1 view .LVU1298
 4191              	.LBB375:
 340:src/display.c ****   else	clr_dot(n);
 4192              		.loc 1 340 3 view .LVU1299
 341:src/display.c **** }
 4193              		.loc 1 341 8 view .LVU1300
 4194 0088 FFF7FEFF 		bl	clr_dot
 4195              	.LVL457:
 341:src/display.c **** }
 4196              		.loc 1 341 8 is_stmt 0 view .LVU1301
 4197              	.LBE375:
 4198              	.LBE383:
2557:src/display.c ****       }
 4199              		.loc 1 2557 2 is_stmt 1 view .LVU1302
2557:src/display.c ****       }
 4200              		.loc 1 2557 11 is_stmt 0 view .LVU1303
 4201 008c 3368     		ldr	r3, [r6]
 4202 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2557:src/display.c ****       }
 4203              		.loc 1 2557 2 view .LVU1304
 4204 0092 DB07     		lsls	r3, r3, #31
 4205 0094 F3D4     		bmi	.L400
2557:src/display.c ****       }
 4206              		.loc 1 2557 2 discriminator 1 view .LVU1305
 4207 0096 012C     		cmp	r4, #1
 4208 0098 F1D1     		bne	.L400
 4209              	.LVL458:
 4210              	.LBB384:
 339:src/display.c ****   if (on)	set_dot(n);
 4211              		.loc 1 339 6 is_stmt 1 view .LVU1306
 4212              	.LBB380:
 340:src/display.c ****   else	clr_dot(n);
 4213              		.loc 1 340 3 view .LVU1307
 340:src/display.c ****   else	clr_dot(n);
 4214              		.loc 1 340 11 view .LVU1308
 4215              	.LBE380:
 4216              	.LBE384:
2558:src/display.c **** 
 4217              		.loc 1 2558 7 is_stmt 0 view .LVU1309
 4218 009a BDE87040 		pop	{r4, r5, r6, lr}
 4219              		.cfi_remember_state
 4220              		.cfi_restore 14
ARM GAS  /tmp/ccSEf3H9.s 			page 156


 4221              		.cfi_restore 6
 4222              		.cfi_restore 5
 4223              		.cfi_restore 4
 4224              		.cfi_def_cfa_offset 0
 4225              	.LVL459:
 4226              	.LBB385:
 4227              	.LBB381:
 340:src/display.c ****   else	clr_dot(n);
 4228              		.loc 1 340 11 view .LVU1310
 4229 009e 8B20     		movs	r0, #139
 4230 00a0 FFF7FEBF 		b	set_dot
 4231              	.LVL460:
 4232              	.L395:
 4233              		.cfi_restore_state
 340:src/display.c ****   else	clr_dot(n);
 4234              		.loc 1 340 11 view .LVU1311
 4235              	.LBE381:
 4236              	.LBE385:
 4237              	.LBB386:
 4238              	.LBB359:
 341:src/display.c **** }
 4239              		.loc 1 341 8 is_stmt 1 view .LVU1312
 4240              	.LBE359:
 4241              	.LBE386:
 4242              	.LBB387:
 4243              	.LBB368:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4244              		.loc 1 2579 9 is_stmt 0 view .LVU1313
 4245 00a4 104D     		ldr	r5, .L416+20
 4246              	.LBE368:
 4247              	.LBE387:
 4248              	.LBB388:
 4249              	.LBB360:
 341:src/display.c **** }
 4250              		.loc 1 341 8 view .LVU1314
 4251 00a6 8320     		movs	r0, #131
 4252              	.LVL461:
 341:src/display.c **** }
 4253              		.loc 1 341 8 view .LVU1315
 4254 00a8 FFF7FEFF 		bl	clr_dot
 4255              	.LVL462:
 341:src/display.c **** }
 4256              		.loc 1 341 8 view .LVU1316
 4257              	.LBE360:
 4258              	.LBE388:
2552:src/display.c **** 
 4259              		.loc 1 2552 2 is_stmt 1 view .LVU1317
 4260              	.LBB389:
2564:src/display.c **** #ifndef DM42
 4261              		.loc 1 2564 12 view .LVU1318
 4262              	.LBB369:
2569:src/display.c **** #endif
 4263              		.loc 1 2569 4 view .LVU1319
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4264              		.loc 1 2579 2 view .LVU1320
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4265              		.loc 1 2579 5 is_stmt 0 view .LVU1321
ARM GAS  /tmp/ccSEf3H9.s 			page 157


 4266 00ac 2B68     		ldr	r3, [r5]
 4267 00ae 002B     		cmp	r3, #0
 4268 00b0 D8D0     		beq	.L397
 4269              	.L414:
 4270              	.LBB363:
 4271              	.LBI363:
2564:src/display.c **** #ifndef DM42
 4272              		.loc 1 2564 12 is_stmt 1 view .LVU1322
 4273              	.LBB364:
2580:src/display.c **** 	  IoAnnunciator = on;
 4274              		.loc 1 2580 4 view .LVU1323
 4275              	.LVL463:
 4276              	.LBB365:
 4277              	.LBI365:
 339:src/display.c ****   if (on)	set_dot(n);
 4278              		.loc 1 339 6 view .LVU1324
 4279              	.LBB366:
 340:src/display.c ****   else	clr_dot(n);
 4280              		.loc 1 340 3 view .LVU1325
 341:src/display.c **** }
 4281              		.loc 1 341 8 view .LVU1326
 4282 00b2 8420     		movs	r0, #132
 4283 00b4 FFF7FEFF 		bl	clr_dot
 4284              	.LVL464:
 341:src/display.c **** }
 4285              		.loc 1 341 8 is_stmt 0 view .LVU1327
 4286              	.LBE366:
 4287              	.LBE365:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4288              		.loc 1 2581 4 is_stmt 1 view .LVU1328
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4289              		.loc 1 2581 18 is_stmt 0 view .LVU1329
 4290 00b8 0023     		movs	r3, #0
 4291 00ba 2B60     		str	r3, [r5]
2582:src/display.c **** 	}
 4292              		.loc 1 2582 4 is_stmt 1 view .LVU1330
 4293 00bc FFF7FEFF 		bl	finish_display
 4294              	.LVL465:
2584:src/display.c **** 
 4295              		.loc 1 2584 7 is_stmt 0 view .LVU1331
 4296 00c0 D0E7     		b	.L397
 4297              	.LVL466:
 4298              	.L393:
2584:src/display.c **** 
 4299              		.loc 1 2584 7 view .LVU1332
 4300              	.LBE364:
 4301              	.LBE363:
 4302              	.LBE369:
 4303              	.LBE389:
 4304              	.LBB390:
 339:src/display.c ****   if (on)	set_dot(n);
 4305              		.loc 1 339 6 is_stmt 1 view .LVU1333
 4306              	.LBB354:
 340:src/display.c ****   else	clr_dot(n);
 4307              		.loc 1 340 3 view .LVU1334
 340:src/display.c ****   else	clr_dot(n);
 4308              		.loc 1 340 11 view .LVU1335
ARM GAS  /tmp/ccSEf3H9.s 			page 158


 4309 00c2 FFF7FEFF 		bl	set_dot
 4310              	.LVL467:
 4311 00c6 C3E7     		b	.L394
 4312              	.LVL468:
 4313              	.L413:
 340:src/display.c ****   else	clr_dot(n);
 4314              		.loc 1 340 11 is_stmt 0 view .LVU1336
 4315              	.LBE354:
 4316              	.LBE390:
 4317              	.LBB391:
 4318              	.LBI346:
 339:src/display.c ****   if (on)	set_dot(n);
 4319              		.loc 1 339 6 is_stmt 1 view .LVU1337
 4320              	.LBB349:
 340:src/display.c ****   else	clr_dot(n);
 4321              		.loc 1 340 3 view .LVU1338
 341:src/display.c **** }
 4322              		.loc 1 341 8 view .LVU1339
 4323 00c8 FFF7FEFF 		bl	clr_dot
 4324              	.LVL469:
 4325 00cc B5E7     		b	.L391
 4326              	.LVL470:
 4327              	.L412:
 341:src/display.c **** }
 4328              		.loc 1 341 8 is_stmt 0 view .LVU1340
 4329              	.LBE349:
 4330              	.LBE391:
 4331              	.LBB392:
 339:src/display.c ****   if (on)	set_dot(n);
 4332              		.loc 1 339 6 is_stmt 1 view .LVU1341
 4333              	.LBB344:
 340:src/display.c ****   else	clr_dot(n);
 4334              		.loc 1 340 3 view .LVU1342
 340:src/display.c ****   else	clr_dot(n);
 4335              		.loc 1 340 11 view .LVU1343
 4336 00ce FFF7FEFF 		bl	set_dot
 4337              	.LVL471:
 4338 00d2 A7E7     		b	.L389
 4339              	.L417:
 4340              		.align	2
 4341              	.L416:
 4342 00d4 00000000 		.word	main_ram
 4343 00d8 00000000 		.word	Running
 4344 00dc 00000000 		.word	StateWhileOn
 4345 00e0 07000800 		.word	524295
 4346 00e4 00080800 		.word	526336
 4347 00e8 00000000 		.word	IoAnnunciator
 4348              	.LBE344:
 4349              	.LBE392:
 4350              		.cfi_endproc
 4351              	.LFE32:
 4353              		.section	.text.getdig,"ax",%progbits
 4354              		.align	1
 4355              		.p2align 2,,3
 4356              		.global	getdig
 4357              		.syntax unified
 4358              		.thumb
ARM GAS  /tmp/ccSEf3H9.s 			page 159


 4359              		.thumb_func
 4360              		.fpu fpv4-sp-d16
 4362              	getdig:
 4363              	.LVL472:
 4364              	.LFB6:
 334:src/display.c ****   // perform index lookup
 4365              		.loc 1 334 1 view -0
 4366              		.cfi_startproc
 4367              		@ args = 0, pretend = 0, frame = 0
 4368              		@ frame_needed = 0, uses_anonymous_args = 0
 4369              		@ link register save eliminated.
 336:src/display.c **** }
 4370              		.loc 1 336 3 view .LVU1345
 336:src/display.c **** }
 4371              		.loc 1 336 16 is_stmt 0 view .LVU1346
 4372 0000 014B     		ldr	r3, .L419
 336:src/display.c **** }
 4373              		.loc 1 336 19 view .LVU1347
 4374 0002 C0B2     		uxtb	r0, r0
 4375              	.LVL473:
 337:src/display.c **** 
 4376              		.loc 1 337 1 view .LVU1348
 4377 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4378 0006 7047     		bx	lr
 4379              	.L420:
 4380              		.align	2
 4381              	.L419:
 4382 0008 00000000 		.word	.LANCHOR2
 4383              		.cfi_endproc
 4384              	.LFE6:
 4386              		.section	.text.dot,"ax",%progbits
 4387              		.align	1
 4388              		.p2align 2,,3
 4389              		.global	dot
 4390              		.syntax unified
 4391              		.thumb
 4392              		.thumb_func
 4393              		.fpu fpv4-sp-d16
 4395              	dot:
 4396              	.LVL474:
 4397              	.LFB7:
 339:src/display.c ****   if (on)	set_dot(n);
 4398              		.loc 1 339 25 is_stmt 1 view -0
 4399              		.cfi_startproc
 4400              		@ args = 0, pretend = 0, frame = 0
 4401              		@ frame_needed = 0, uses_anonymous_args = 0
 4402              		@ link register save eliminated.
 340:src/display.c ****   else	clr_dot(n);
 4403              		.loc 1 340 3 view .LVU1350
 340:src/display.c ****   else	clr_dot(n);
 4404              		.loc 1 340 6 is_stmt 0 view .LVU1351
 4405 0000 09B1     		cbz	r1, .L422
 340:src/display.c ****   else	clr_dot(n);
 4406              		.loc 1 340 11 is_stmt 1 discriminator 1 view .LVU1352
 4407 0002 FFF7FEBF 		b	set_dot
 4408              	.LVL475:
 4409              	.L422:
ARM GAS  /tmp/ccSEf3H9.s 			page 160


 341:src/display.c **** }
 4410              		.loc 1 341 8 view .LVU1353
 4411 0006 FFF7FEBF 		b	clr_dot
 4412              	.LVL476:
 341:src/display.c **** }
 4413              		.loc 1 341 8 is_stmt 0 view .LVU1354
 4414              		.cfi_endproc
 4415              	.LFE7:
 4417 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4418              		.align	1
 4419              		.p2align 2,,3
 4420              		.global	std_round_fix
 4421              		.syntax unified
 4422              		.thumb
 4423              		.thumb_func
 4424              		.fpu fpv4-sp-d16
 4426              	std_round_fix:
 4427              	.LVL477:
 4428              	.LFB24:
1755:src/display.c **** 	decNumber c;
 4429              		.loc 1 1755 93 is_stmt 1 view -0
 4430              		.cfi_startproc
 4431              		@ args = 0, pretend = 0, frame = 40
 4432              		@ frame_needed = 0, uses_anonymous_args = 0
1755:src/display.c **** 	decNumber c;
 4433              		.loc 1 1755 93 is_stmt 0 view .LVU1356
 4434 0000 70B5     		push	{r4, r5, r6, lr}
 4435              		.cfi_def_cfa_offset 16
 4436              		.cfi_offset 4, -16
 4437              		.cfi_offset 5, -12
 4438              		.cfi_offset 6, -8
 4439              		.cfi_offset 14, -4
 4440 0002 0E46     		mov	r6, r1
1756:src/display.c **** 	int true_exp, x=0;
 4441              		.loc 1 1756 2 is_stmt 1 view .LVU1357
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4442              		.loc 1 1757 2 view .LVU1358
 4443              	.LVL478:
1758:src/display.c **** 
 4444              		.loc 1 1758 2 view .LVU1359
1760:src/display.c **** 	  min_pos_exp = 9;
 4445              		.loc 1 1760 2 view .LVU1360
1755:src/display.c **** 	decNumber c;
 4446              		.loc 1 1755 93 is_stmt 0 view .LVU1361
 4447 0004 8AB0     		sub	sp, sp, #40
 4448              		.cfi_def_cfa_offset 56
1760:src/display.c **** 	  min_pos_exp = 9;
 4449              		.loc 1 1760 5 view .LVU1362
 4450 0006 92B9     		cbnz	r2, .L424
1765:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4451              		.loc 1 1765 4 is_stmt 1 view .LVU1363
 4452              	.LVL479:
1766:src/display.c **** 	}
 4453              		.loc 1 1766 4 view .LVU1364
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4454              		.loc 1 1769 2 view .LVU1365
 4455 0008 0146     		mov	r1, r0
ARM GAS  /tmp/ccSEf3H9.s 			page 161


 4456              	.LVL480:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4457              		.loc 1 1769 2 is_stmt 0 view .LVU1366
 4458 000a 01A8     		add	r0, sp, #4
 4459              	.LVL481:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4460              		.loc 1 1769 2 view .LVU1367
 4461 000c 1D46     		mov	r5, r3
 4462 000e FFF7FEFF 		bl	dn_abs
 4463              	.LVL482:
1770:src/display.c **** 
 4464              		.loc 1 1770 2 is_stmt 1 view .LVU1368
1770:src/display.c **** 
 4465              		.loc 1 1770 24 is_stmt 0 view .LVU1369
 4466 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4467 0016 1844     		add	r0, r0, r3
 4468              	.LVL483:
1772:src/display.c **** 	  x = *dd;
 4469              		.loc 1 1772 2 is_stmt 1 view .LVU1370
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4470              		.loc 1 1776 2 view .LVU1371
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4471              		.loc 1 1776 5 is_stmt 0 view .LVU1372
 4472 0018 0138     		subs	r0, r0, #1
 4473 001a 1AD5     		bpl	.L428
1766:src/display.c **** 	}
 4474              		.loc 1 1766 16 view .LVU1373
 4475 001c EB43     		mvns	r3, r5
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4476              		.loc 1 1776 21 view .LVU1374
 4477 001e 8342     		cmp	r3, r0
 4478 0020 17DA     		bge	.L428
 4479              	.LVL484:
 4480              	.L430:
1778:src/display.c **** 	  return MODE_FIX;
 4481              		.loc 1 1778 4 is_stmt 1 view .LVU1375
1778:src/display.c **** 	  return MODE_FIX;
 4482              		.loc 1 1778 8 is_stmt 0 view .LVU1376
 4483 0022 3368     		ldr	r3, [r6]
 4484 0024 181A     		subs	r0, r3, r0
 4485 0026 3060     		str	r0, [r6]
1779:src/display.c **** 	}
 4486              		.loc 1 1779 4 is_stmt 1 view .LVU1377
1779:src/display.c **** 	}
 4487              		.loc 1 1779 11 is_stmt 0 view .LVU1378
 4488 0028 0120     		movs	r0, #1
1788:src/display.c **** #else
 4489              		.loc 1 1788 7 view .LVU1379
 4490 002a 0AB0     		add	sp, sp, #40
 4491              		.cfi_remember_state
 4492              		.cfi_def_cfa_offset 16
 4493              		@ sp needed
 4494 002c 70BD     		pop	{r4, r5, r6, pc}
 4495              	.LVL485:
 4496              	.L424:
 4497              		.cfi_restore_state
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 162


 4498              		.loc 1 1769 2 is_stmt 1 view .LVU1380
 4499 002e 0146     		mov	r1, r0
 4500              	.LVL486:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4501              		.loc 1 1769 2 is_stmt 0 view .LVU1381
 4502 0030 01A8     		add	r0, sp, #4
 4503              	.LVL487:
1769:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4504              		.loc 1 1769 2 view .LVU1382
 4505 0032 1446     		mov	r4, r2
 4506 0034 FFF7FEFF 		bl	dn_abs
 4507              	.LVL488:
1770:src/display.c **** 
 4508              		.loc 1 1770 2 is_stmt 1 view .LVU1383
1770:src/display.c **** 
 4509              		.loc 1 1770 24 is_stmt 0 view .LVU1384
 4510 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1772:src/display.c **** 	  x = *dd;
 4511              		.loc 1 1772 5 view .LVU1385
 4512 003c 052C     		cmp	r4, #5
1770:src/display.c **** 
 4513              		.loc 1 1770 24 view .LVU1386
 4514 003e 1344     		add	r3, r3, r2
1770:src/display.c **** 
 4515              		.loc 1 1770 11 view .LVU1387
 4516 0040 03F1FF30 		add	r0, r3, #-1
 4517              	.LVL489:
1772:src/display.c **** 	  x = *dd;
 4518              		.loc 1 1772 2 is_stmt 1 view .LVU1388
1772:src/display.c **** 	  x = *dd;
 4519              		.loc 1 1772 5 is_stmt 0 view .LVU1389
 4520 0044 15D1     		bne	.L432
1773:src/display.c **** 	}
 4521              		.loc 1 1773 4 is_stmt 1 view .LVU1390
1773:src/display.c **** 	}
 4522              		.loc 1 1773 6 is_stmt 0 view .LVU1391
 4523 0046 3268     		ldr	r2, [r6]
 4524              	.LVL490:
 4525              	.L427:
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4526              		.loc 1 1776 2 is_stmt 1 view .LVU1392
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4527              		.loc 1 1776 5 is_stmt 0 view .LVU1393
 4528 0048 8242     		cmp	r2, r0
 4529 004a 05DC     		bgt	.L436
1782:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4530              		.loc 1 1782 53 discriminator 2 view .LVU1394
 4531 004c 0333     		adds	r3, r3, #3
 4532 004e 0C2B     		cmp	r3, #12
 4533 0050 04D8     		bhi	.L431
 4534              	.LVL491:
 4535              	.L428:
1786:src/display.c **** 	}
 4536              		.loc 1 1786 11 view .LVU1395
 4537 0052 0020     		movs	r0, #0
1788:src/display.c **** #else
 4538              		.loc 1 1788 7 view .LVU1396
ARM GAS  /tmp/ccSEf3H9.s 			page 163


 4539 0054 0AB0     		add	sp, sp, #40
 4540              		.cfi_remember_state
 4541              		.cfi_def_cfa_offset 16
 4542              		@ sp needed
 4543 0056 70BD     		pop	{r4, r5, r6, pc}
 4544              	.LVL492:
 4545              	.L436:
 4546              		.cfi_restore_state
1776:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4547              		.loc 1 1776 21 view .LVU1397
 4548 0058 031D     		adds	r3, r0, #4
 4549 005a E2DA     		bge	.L430
 4550              	.L431:
 4551              	.LBB395:
 4552              	.LBI395:
1755:src/display.c **** 	decNumber c;
 4553              		.loc 1 1755 26 is_stmt 1 view .LVU1398
 4554              	.LVL493:
 4555              	.LBB396:
1783:src/display.c **** 	}
 4556              		.loc 1 1783 4 view .LVU1399
1783:src/display.c **** 	}
 4557              		.loc 1 1783 24 is_stmt 0 view .LVU1400
 4558 005c 064B     		ldr	r3, .L437
 4559 005e 1B68     		ldr	r3, [r3]
 4560 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1783:src/display.c **** 	}
 4561              		.loc 1 1783 33 view .LVU1401
 4562 0064 13F0100F 		tst	r3, #16
 4563 0068 14BF     		ite	ne
 4564 006a 0320     		movne	r0, #3
 4565 006c 0220     		moveq	r0, #2
 4566              	.LBE396:
 4567              	.LBE395:
1788:src/display.c **** #else
 4568              		.loc 1 1788 7 view .LVU1402
 4569 006e 0AB0     		add	sp, sp, #40
 4570              		.cfi_remember_state
 4571              		.cfi_def_cfa_offset 16
 4572              		@ sp needed
 4573 0070 70BD     		pop	{r4, r5, r6, pc}
 4574              	.LVL494:
 4575              	.L432:
 4576              		.cfi_restore_state
1757:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4577              		.loc 1 1757 16 view .LVU1403
 4578 0072 0022     		movs	r2, #0
 4579 0074 E8E7     		b	.L427
 4580              	.L438:
 4581 0076 00BF     		.align	2
 4582              	.L437:
 4583 0078 00000000 		.word	main_ram
 4584              		.cfi_endproc
 4585              	.LFE24:
 4587              		.section	.text.set_IO_annunciator,"ax",%progbits
 4588              		.align	1
 4589              		.p2align 2,,3
ARM GAS  /tmp/ccSEf3H9.s 			page 164


 4590              		.global	set_IO_annunciator
 4591              		.syntax unified
 4592              		.thumb
 4593              		.thumb_func
 4594              		.fpu fpv4-sp-d16
 4596              	set_IO_annunciator:
 4597              	.LFB33:
2564:src/display.c **** #ifndef DM42
 4598              		.loc 1 2564 37 is_stmt 1 view -0
 4599              		.cfi_startproc
 4600              		@ args = 0, pretend = 0, frame = 0
 4601              		@ frame_needed = 0, uses_anonymous_args = 0
2569:src/display.c **** #endif
 4602              		.loc 1 2569 4 view .LVU1405
 4603              	.LVL495:
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4604              		.loc 1 2579 2 view .LVU1406
2564:src/display.c **** #ifndef DM42
 4605              		.loc 1 2564 37 is_stmt 0 view .LVU1407
 4606 0000 10B5     		push	{r4, lr}
 4607              		.cfi_def_cfa_offset 8
 4608              		.cfi_offset 4, -8
 4609              		.cfi_offset 14, -4
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4610              		.loc 1 2579 9 view .LVU1408
 4611 0002 064C     		ldr	r4, .L443
2579:src/display.c **** 	  dot(LIT_EQ, on);
 4612              		.loc 1 2579 5 view .LVU1409
 4613 0004 2368     		ldr	r3, [r4]
 4614 0006 03B9     		cbnz	r3, .L442
2584:src/display.c **** 
 4615              		.loc 1 2584 7 view .LVU1410
 4616 0008 10BD     		pop	{r4, pc}
 4617              	.L442:
 4618              	.LBB401:
 4619              	.LBI401:
2564:src/display.c **** #ifndef DM42
 4620              		.loc 1 2564 12 is_stmt 1 view .LVU1411
 4621              	.LBB402:
2580:src/display.c **** 	  IoAnnunciator = on;
 4622              		.loc 1 2580 4 view .LVU1412
 4623              	.LVL496:
 4624              	.LBB403:
 4625              	.LBI403:
 339:src/display.c ****   if (on)	set_dot(n);
 4626              		.loc 1 339 6 view .LVU1413
 4627              	.LBB404:
 340:src/display.c ****   else	clr_dot(n);
 4628              		.loc 1 340 3 view .LVU1414
 341:src/display.c **** }
 4629              		.loc 1 341 8 view .LVU1415
 4630 000a 8420     		movs	r0, #132
 4631 000c FFF7FEFF 		bl	clr_dot
 4632              	.LVL497:
 341:src/display.c **** }
 4633              		.loc 1 341 8 is_stmt 0 view .LVU1416
 4634              	.LBE404:
ARM GAS  /tmp/ccSEf3H9.s 			page 165


 4635              	.LBE403:
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4636              		.loc 1 2581 4 is_stmt 1 view .LVU1417
2581:src/display.c **** 	  finish_display(); //LIT_EQ
 4637              		.loc 1 2581 18 is_stmt 0 view .LVU1418
 4638 0010 0023     		movs	r3, #0
 4639 0012 2360     		str	r3, [r4]
2582:src/display.c **** 	}
 4640              		.loc 1 2582 4 is_stmt 1 view .LVU1419
 4641              	.LBE402:
 4642              	.LBE401:
2584:src/display.c **** 
 4643              		.loc 1 2584 7 is_stmt 0 view .LVU1420
 4644 0014 BDE81040 		pop	{r4, lr}
 4645              		.cfi_restore 14
 4646              		.cfi_restore 4
 4647              		.cfi_def_cfa_offset 0
 4648              	.LBB406:
 4649              	.LBB405:
2582:src/display.c **** 	}
 4650              		.loc 1 2582 4 view .LVU1421
 4651 0018 FFF7FEBF 		b	finish_display
 4652              	.LVL498:
 4653              	.L444:
 4654              		.align	2
 4655              	.L443:
 4656 001c 00000000 		.word	IoAnnunciator
 4657              	.LBE405:
 4658              	.LBE406:
 4659              		.cfi_endproc
 4660              	.LFE33:
 4662              		.section	.text.pixel_length,"ax",%progbits
 4663              		.align	1
 4664              		.p2align 2,,3
 4665              		.global	pixel_length
 4666              		.syntax unified
 4667              		.thumb
 4668              		.thumb_func
 4669              		.fpu fpv4-sp-d16
 4671              	pixel_length:
 4672              	.LVL499:
 4673              	.LFB40:
3467:src/display.c **** 
3468:src/display.c **** 
3469:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3470:src/display.c ****        */
3471:src/display.c ****       int pixel_length(const char *s, int smallp)
3472:src/display.c ****       {
 4674              		.loc 1 3472 7 is_stmt 1 view -0
 4675              		.cfi_startproc
 4676              		@ args = 0, pretend = 0, frame = 0
 4677              		@ frame_needed = 0, uses_anonymous_args = 0
3473:src/display.c **** 	int len = 0;
 4678              		.loc 1 3473 2 view .LVU1423
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4679              		.loc 1 3474 2 view .LVU1424
3472:src/display.c **** 	int len = 0;
ARM GAS  /tmp/ccSEf3H9.s 			page 166


 4680              		.loc 1 3472 7 is_stmt 0 view .LVU1425
 4681 0000 70B5     		push	{r4, r5, r6, lr}
 4682              		.cfi_def_cfa_offset 16
 4683              		.cfi_offset 4, -16
 4684              		.cfi_offset 5, -12
 4685              		.cfi_offset 6, -8
 4686              		.cfi_offset 14, -4
3472:src/display.c **** 	int len = 0;
 4687              		.loc 1 3472 7 view .LVU1426
 4688 0002 0446     		mov	r4, r0
3475:src/display.c **** 	while (*s != '\0') {
 4689              		.loc 1 3475 9 view .LVU1427
 4690 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4691              	.LVL500:
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4692              		.loc 1 3474 34 view .LVU1428
 4693 0006 0E1E     		subs	r6, r1, #0
 4694 0008 18BF     		it	ne
 4695 000a 4FF48076 		movne	r6, #256
 4696              	.LVL501:
 4697              		.loc 1 3475 2 is_stmt 1 view .LVU1429
 4698              		.loc 1 3475 8 view .LVU1430
 4699 000e A0B1     		cbz	r0, .L452
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4700              		.loc 1 3473 6 is_stmt 0 view .LVU1431
 4701 0010 0025     		movs	r5, #0
 4702 0012 06E0     		b	.L450
 4703              	.LVL502:
 4704              	.L448:
3476:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3477:src/display.c **** 	  if (s[0] == '\007') {
3478:src/display.c **** 	    len += s[1] & 0x1F;
3479:src/display.c **** 	    s += 3;
3480:src/display.c **** 	    continue;
3481:src/display.c **** 	  }
3482:src/display.c **** #endif
3483:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4705              		.loc 1 3483 11 view .LVU1432
 4706 0014 3044     		add	r0, r0, r6
 4707 0016 FFF7FEFF 		bl	charlengths
 4708              	.LVL503:
 4709              		.loc 1 3483 42 view .LVU1433
 4710 001a 0134     		adds	r4, r4, #1
 4711              	.LVL504:
 4712              		.loc 1 3483 8 view .LVU1434
 4713 001c 0544     		add	r5, r5, r0
 4714              	.LVL505:
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4715              		.loc 1 3475 8 is_stmt 1 view .LVU1435
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4716              		.loc 1 3475 9 is_stmt 0 view .LVU1436
 4717 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4718              		.loc 1 3475 8 view .LVU1437
 4719 0020 48B1     		cbz	r0, .L445
 4720              	.LVL506:
 4721              	.L450:
ARM GAS  /tmp/ccSEf3H9.s 			page 167


3477:src/display.c **** 	    len += s[1] & 0x1F;
 4722              		.loc 1 3477 4 is_stmt 1 view .LVU1438
 4723              		.loc 1 3483 4 view .LVU1439
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4724              		.loc 1 3477 7 is_stmt 0 view .LVU1440
 4725 0022 0728     		cmp	r0, #7
 4726 0024 F6D1     		bne	.L448
3478:src/display.c **** 	    s += 3;
 4727              		.loc 1 3478 6 is_stmt 1 view .LVU1441
3478:src/display.c **** 	    s += 3;
 4728              		.loc 1 3478 18 is_stmt 0 view .LVU1442
 4729 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4730              		.loc 1 3475 9 view .LVU1443
 4731 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3478:src/display.c **** 	    s += 3;
 4732              		.loc 1 3478 18 view .LVU1444
 4733 002a 03F01F03 		and	r3, r3, #31
3479:src/display.c **** 	    continue;
 4734              		.loc 1 3479 8 view .LVU1445
 4735 002e 0334     		adds	r4, r4, #3
 4736              	.LVL507:
3478:src/display.c **** 	    s += 3;
 4737              		.loc 1 3478 10 view .LVU1446
 4738 0030 1D44     		add	r5, r5, r3
 4739              	.LVL508:
3479:src/display.c **** 	    continue;
 4740              		.loc 1 3479 6 is_stmt 1 view .LVU1447
3480:src/display.c **** 	  }
 4741              		.loc 1 3480 6 view .LVU1448
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4742              		.loc 1 3475 8 view .LVU1449
 4743 0032 0028     		cmp	r0, #0
 4744 0034 F5D1     		bne	.L450
 4745              	.L445:
3484:src/display.c **** 	}
3485:src/display.c **** 	return len;
3486:src/display.c ****       }
 4746              		.loc 1 3486 7 is_stmt 0 view .LVU1450
 4747 0036 2846     		mov	r0, r5
 4748 0038 70BD     		pop	{r4, r5, r6, pc}
 4749              	.LVL509:
 4750              	.L452:
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4751              		.loc 1 3473 6 view .LVU1451
 4752 003a 0546     		mov	r5, r0
3485:src/display.c ****       }
 4753              		.loc 1 3485 2 is_stmt 1 view .LVU1452
 4754              		.loc 1 3486 7 is_stmt 0 view .LVU1453
 4755 003c 2846     		mov	r0, r5
 4756 003e 70BD     		pop	{r4, r5, r6, pc}
 4757              		.loc 1 3486 7 view .LVU1454
 4758              		.cfi_endproc
 4759              	.LFE40:
 4761              		.section	.text.set_status,"ax",%progbits
 4762              		.align	1
 4763              		.p2align 2,,3
ARM GAS  /tmp/ccSEf3H9.s 			page 168


 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv4-sp-d16
 4769              	set_status:
 4770              	.LVL510:
 4771              	.LFB43:
3487:src/display.c **** 
3488:src/display.c **** 
3489:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3490:src/display.c ****        * If this is larger than the display, return true.
3491:src/display.c ****        */
3492:src/display.c ****       static int string_too_large(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3494:src/display.c ****       }
3495:src/display.c ****       static int string_too_large_top(const char *s) {
3496:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3497:src/display.c ****       }
3498:src/display.c **** 
3499:src/display.c **** 
3500:src/display.c ****       /* Display the given string on the screen.
3501:src/display.c ****        */
3502:src/display.c ****       static void set_status(const char *str) {
 4772              		.loc 1 3502 47 is_stmt 1 view -0
 4773              		.cfi_startproc
 4774              		@ args = 0, pretend = 0, frame = 0
 4775              		@ frame_needed = 0, uses_anonymous_args = 0
3503:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4776              		.loc 1 3503 2 view .LVU1456
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4777              		.loc 1 3502 47 is_stmt 0 view .LVU1457
 4778 0000 10B5     		push	{r4, lr}
 4779              		.cfi_def_cfa_offset 8
 4780              		.cfi_offset 4, -8
 4781              		.cfi_offset 14, -4
 4782              		.loc 1 3503 24 view .LVU1458
 4783 0002 0D4B     		ldr	r3, .L460
 4784              		.loc 1 3503 2 view .LVU1459
 4785 0004 93F91630 		ldrsb	r3, [r3, #22]
 4786 0008 002B     		cmp	r3, #0
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4787              		.loc 1 3502 47 view .LVU1460
 4788 000a 82B0     		sub	sp, sp, #8
 4789              		.cfi_def_cfa_offset 16
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4790              		.loc 1 3502 47 view .LVU1461
 4791 000c 0446     		mov	r4, r0
 4792              		.loc 1 3503 2 view .LVU1462
 4793 000e 0ADA     		bge	.L459
 4794 0010 0121     		movs	r1, #1
 4795              	.LVL511:
 4796              	.L456:
 4797              	.LBB407:
 4798              	.LBI407:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4799              		.loc 1 3344 19 is_stmt 1 discriminator 6 view .LVU1463
 4800              	.LBB408:
ARM GAS  /tmp/ccSEf3H9.s 			page 169


3345:src/display.c ****       }
 4801              		.loc 1 3345 2 discriminator 6 view .LVU1464
 4802 0012 40F24A23 		movw	r3, #586
 4803 0016 0093     		str	r3, [sp]
 4804 0018 2046     		mov	r0, r4
 4805 001a 8E23     		movs	r3, #142
 4806 001c 4A22     		movs	r2, #74
 4807 001e FFF7FEFF 		bl	s_s_sized
 4808              	.LVL512:
3345:src/display.c ****       }
 4809              		.loc 1 3345 2 is_stmt 0 discriminator 6 view .LVU1465
 4810              	.LBE408:
 4811              	.LBE407:
3504:src/display.c ****       }
 4812              		.loc 1 3504 7 discriminator 6 view .LVU1466
 4813 0022 02B0     		add	sp, sp, #8
 4814              		.cfi_remember_state
 4815              		.cfi_def_cfa_offset 8
 4816              		@ sp needed
 4817 0024 10BD     		pop	{r4, pc}
 4818              	.LVL513:
 4819              	.L459:
 4820              		.cfi_restore_state
 4821              	.LBB409:
 4822              	.LBI409:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4823              		.loc 1 3492 18 is_stmt 1 view .LVU1467
 4824              	.LBB410:
3493:src/display.c ****       }
 4825              		.loc 1 3493 2 view .LVU1468
3493:src/display.c ****       }
 4826              		.loc 1 3493 9 is_stmt 0 view .LVU1469
 4827 0026 0021     		movs	r1, #0
 4828 0028 FFF7FEFF 		bl	pixel_length
 4829              	.LVL514:
3493:src/display.c ****       }
 4830              		.loc 1 3493 9 view .LVU1470
 4831              	.LBE410:
 4832              	.LBE409:
3503:src/display.c ****       }
 4833              		.loc 1 3503 2 view .LVU1471
 4834 002c 4B28     		cmp	r0, #75
 4835 002e D4BF     		ite	le
 4836 0030 0021     		movle	r1, #0
 4837 0032 0121     		movgt	r1, #1
 4838 0034 EDE7     		b	.L456
 4839              	.L461:
 4840 0036 00BF     		.align	2
 4841              	.L460:
 4842 0038 00000000 		.word	StateWhileOn
 4843              		.cfi_endproc
 4844              	.LFE43:
 4846              		.section	.text.set_x_dn,"ax",%progbits
 4847              		.align	1
 4848              		.p2align 2,,3
 4849              		.global	set_x_dn
 4850              		.syntax unified
ARM GAS  /tmp/ccSEf3H9.s 			page 170


 4851              		.thumb
 4852              		.thumb_func
 4853              		.fpu fpv4-sp-d16
 4855              	set_x_dn:
 4856              	.LVL515:
 4857              	.LFB27:
1937:src/display.c **** 	char x[50], *obp = x;
 4858              		.loc 1 1937 67 is_stmt 1 view -0
 4859              		.cfi_startproc
 4860              		@ args = 0, pretend = 0, frame = 152
 4861              		@ frame_needed = 0, uses_anonymous_args = 0
1938:src/display.c **** 	int odig = 0;
 4862              		.loc 1 1938 2 view .LVU1473
1937:src/display.c **** 	char x[50], *obp = x;
 4863              		.loc 1 1937 67 is_stmt 0 view .LVU1474
 4864 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4865              		.cfi_def_cfa_offset 36
 4866              		.cfi_offset 4, -36
 4867              		.cfi_offset 5, -32
 4868              		.cfi_offset 6, -28
 4869              		.cfi_offset 7, -24
 4870              		.cfi_offset 8, -20
 4871              		.cfi_offset 9, -16
 4872              		.cfi_offset 10, -12
 4873              		.cfi_offset 11, -8
 4874              		.cfi_offset 14, -4
 4875 0004 A7B0     		sub	sp, sp, #156
 4876              		.cfi_def_cfa_offset 192
 4877              	.LVL516:
1939:src/display.c **** 	int show_exp = 0;
 4878              		.loc 1 1939 2 is_stmt 1 view .LVU1475
1940:src/display.c **** 	int j;
 4879              		.loc 1 1940 2 view .LVU1476
1941:src/display.c **** 	char mantissa[64];
 4880              		.loc 1 1941 2 view .LVU1477
1942:src/display.c **** 	int exp = 0;
 4881              		.loc 1 1942 2 view .LVU1478
1943:src/display.c **** 	char *p = mantissa;
 4882              		.loc 1 1943 2 view .LVU1479
1944:src/display.c **** 	char *r;
 4883              		.loc 1 1944 2 view .LVU1480
1945:src/display.c **** 	const char *q;
 4884              		.loc 1 1945 2 view .LVU1481
1946:src/display.c **** 	int count, i;
 4885              		.loc 1 1946 2 view .LVU1482
1947:src/display.c **** 	int extra_digits = 0;
 4886              		.loc 1 1947 2 view .LVU1483
1948:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4887              		.loc 1 1948 2 view .LVU1484
1950:src/display.c **** 	int dispdigs;
 4888              		.loc 1 1950 2 view .LVU1485
1951:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4889              		.loc 1 1951 2 view .LVU1486
1952:src/display.c **** #else
 4890              		.loc 1 1952 2 view .LVU1487
1937:src/display.c **** 	char x[50], *obp = x;
 4891              		.loc 1 1937 67 is_stmt 0 view .LVU1488
ARM GAS  /tmp/ccSEf3H9.s 			page 171


 4892 0006 0746     		mov	r7, r0
1952:src/display.c **** #else
 4893              		.loc 1 1952 13 view .LVU1489
 4894 0008 08A8     		add	r0, sp, #32
 4895              	.LVL517:
1937:src/display.c **** 	char x[50], *obp = x;
 4896              		.loc 1 1937 67 view .LVU1490
 4897 000a 0C46     		mov	r4, r1
 4898 000c 0192     		str	r2, [sp, #4]
1952:src/display.c **** #else
 4899              		.loc 1 1952 13 view .LVU1491
 4900 000e FFF7FEFF 		bl	get_dispmode_digs
 4901              	.LVL518:
1952:src/display.c **** #else
 4902              		.loc 1 1952 13 view .LVU1492
 4903 0012 0546     		mov	r5, r0
 4904              	.LVL519:
1957:src/display.c **** 	int negative = 0;
 4905              		.loc 1 1957 2 is_stmt 1 view .LVU1493
1958:src/display.c **** 	int trimzeros = 0;
 4906              		.loc 1 1958 2 view .LVU1494
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4907              		.loc 1 1959 2 view .LVU1495
1967:src/display.c **** #endif
 4908              		.loc 1 1967 2 view .LVU1496
1970:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4909              		.loc 1 1970 2 view .LVU1497
 4910 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4911              	.LVL520:
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4912              		.loc 1 1972 2 view .LVU1498
1972:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4913              		.loc 1 1972 5 is_stmt 0 view .LVU1499
 4914 0018 002C     		cmp	r4, #0
 4915 001a 00F08181 		beq	.L463
 4916              	.L466:
1997:src/display.c **** 	  return;
 4917              		.loc 1 1997 2 is_stmt 1 view .LVU1500
1997:src/display.c **** 	  return;
 4918              		.loc 1 1997 6 is_stmt 0 view .LVU1501
 4919 001e 2146     		mov	r1, r4
 4920 0020 07F10800 		add	r0, r7, #8
 4921 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4922              	.LVL521:
1997:src/display.c **** 	  return;
 4923              		.loc 1 1997 5 view .LVU1502
 4924 0028 8246     		mov	r10, r0
 4925 002a 0028     		cmp	r0, #0
 4926 002c 40F07081 		bne	.L462
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4927              		.loc 1 2000 2 is_stmt 1 view .LVU1503
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4928              		.loc 1 2000 12 is_stmt 0 view .LVU1504
 4929 0030 C94E     		ldr	r6, .L711
2000:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4930              		.loc 1 2000 5 view .LVU1505
 4931 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
ARM GAS  /tmp/ccSEf3H9.s 			page 172


 4932 0034 012B     		cmp	r3, #1
 4933 0036 00F0EC82 		beq	.L688
1943:src/display.c **** 	char *p = mantissa;
 4934              		.loc 1 1943 6 view .LVU1506
 4935 003a 8046     		mov	r8, r0
 4936              	.LVL522:
 4937              	.L469:
2006:src/display.c **** 
 4938              		.loc 1 2006 2 is_stmt 1 view .LVU1507
 4939 003c 0DF1240B 		add	fp, sp, #36
 4940              	.LVL523:
2006:src/display.c **** 
 4941              		.loc 1 2006 2 is_stmt 0 view .LVU1508
 4942 0040 5846     		mov	r0, fp
 4943 0042 3222     		movs	r2, #50
 4944 0044 0021     		movs	r1, #0
 4945 0046 FFF7FEFF 		bl	xset
 4946              	.LVL524:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4947              		.loc 1 2008 2 is_stmt 1 view .LVU1509
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4948              		.loc 1 2008 6 is_stmt 0 view .LVU1510
 4949 004a 3846     		mov	r0, r7
 4950 004c FFF7FEFF 		bl	dn_eq0
 4951              	.LVL525:
2008:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4952              		.loc 1 2008 5 view .LVU1511
 4953 0050 0028     		cmp	r0, #0
 4954 0052 00F06081 		beq	.L470
2009:src/display.c **** 	    x[0] = '-';
 4955              		.loc 1 2009 4 is_stmt 1 view .LVU1512
2009:src/display.c **** 	    x[0] = '-';
 4956              		.loc 1 2009 7 is_stmt 0 view .LVU1513
 4957 0056 97F90830 		ldrsb	r3, [r7, #8]
 4958 005a 002B     		cmp	r3, #0
 4959 005c C0F20083 		blt	.L689
 4960              	.L471:
2013:src/display.c **** 	} else
 4961              		.loc 1 2013 6 is_stmt 1 view .LVU1514
2013:src/display.c **** 	} else
 4962              		.loc 1 2013 11 is_stmt 0 view .LVU1515
 4963 0060 3023     		movs	r3, #48
 4964 0062 8DF82430 		strb	r3, [sp, #36]
 4965              	.L472:
2017:src/display.c **** 	  show_x(x, exp);
 4966              		.loc 1 2017 2 is_stmt 1 view .LVU1516
2017:src/display.c **** 	  show_x(x, exp);
 4967              		.loc 1 2017 12 is_stmt 0 view .LVU1517
 4968 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
2017:src/display.c **** 	  show_x(x, exp);
 4969              		.loc 1 2017 5 view .LVU1518
 4970 006a B9F1010F 		cmp	r9, #1
 4971 006e 00F04583 		beq	.L690
2023:src/display.c **** 	  //  ALL mode: fill the display
 4972              		.loc 1 2023 2 is_stmt 1 view .LVU1519
2023:src/display.c **** 	  //  ALL mode: fill the display
 4973              		.loc 1 2023 5 is_stmt 0 view .LVU1520
ARM GAS  /tmp/ccSEf3H9.s 			page 173


 4974 0072 002D     		cmp	r5, #0
 4975 0074 40F07881 		bne	.L691
2025:src/display.c **** 	else
 4976              		.loc 1 2025 4 is_stmt 1 view .LVU1521
2025:src/display.c **** 	else
 4977              		.loc 1 2025 25 is_stmt 0 view .LVU1522
 4978 0078 019E     		ldr	r6, [sp, #4]
 4979              	.LBB428:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4980              		.loc 1 2032 11 view .LVU1523
 4981 007a 089B     		ldr	r3, [sp, #32]
 4982              	.LBE428:
2025:src/display.c **** 	else
 4983              		.loc 1 2025 25 view .LVU1524
 4984 007c 3168     		ldr	r1, [r6]
 4985              	.LBB429:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4986              		.loc 1 2032 11 view .LVU1525
 4987 007e 2A46     		mov	r2, r5
 4988 0080 3846     		mov	r0, r7
 4989              	.LBE429:
2025:src/display.c **** 	else
 4990              		.loc 1 2025 25 view .LVU1526
 4991 0082 4D1E     		subs	r5, r1, #1
 4992              	.LVL526:
 4993              	.LBB430:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4994              		.loc 1 2032 11 view .LVU1527
 4995 0084 07A9     		add	r1, sp, #28
 4996              	.LBE430:
2025:src/display.c **** 	else
 4997              		.loc 1 2025 7 view .LVU1528
 4998 0086 0795     		str	r5, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 4999              		.loc 1 2029 2 is_stmt 1 view .LVU1529
 5000              	.LBB431:
2030:src/display.c **** 
 5001              		.loc 1 2030 4 view .LVU1530
 5002              	.LVL527:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5003              		.loc 1 2032 4 view .LVU1531
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5004              		.loc 1 2032 11 is_stmt 0 view .LVU1532
 5005 0088 FFF7FEFF 		bl	std_round_fix
 5006              	.LVL528:
2037:src/display.c ****  	}
 5007              		.loc 1 2037 27 view .LVU1533
 5008 008c 3368     		ldr	r3, [r6]
 5009 008e 013B     		subs	r3, r3, #1
2037:src/display.c ****  	}
 5010              		.loc 1 2037 9 view .LVU1534
 5011 0090 0793     		str	r3, [sp, #28]
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5012              		.loc 1 2035 16 view .LVU1535
 5013 0092 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5014              		.loc 1 2032 11 view .LVU1536
ARM GAS  /tmp/ccSEf3H9.s 			page 174


 5015 0094 0546     		mov	r5, r0
 5016              	.LVL529:
2033:src/display.c **** 	    // allow zeros to be trimmed
 5017              		.loc 1 2033 4 is_stmt 1 view .LVU1537
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5018              		.loc 1 2035 6 view .LVU1538
2036:src/display.c **** 	    dd = *display_digits - 1;
 5019              		.loc 1 2036 4 view .LVU1539
2037:src/display.c ****  	}
 5020              		.loc 1 2037 6 view .LVU1540
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5021              		.loc 1 2035 16 is_stmt 0 view .LVU1541
 5022 0096 0493     		str	r3, [sp, #16]
 5023              	.LVL530:
 5024              	.L591:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5025              		.loc 1 2035 16 view .LVU1542
 5026              	.LBE431:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5027              		.loc 1 2049 2 is_stmt 1 view .LVU1543
 5028 0098 0DF15809 		add	r9, sp, #88
 5029              	.LVL531:
2049:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5030              		.loc 1 2049 2 is_stmt 0 view .LVU1544
 5031 009c 3F22     		movs	r2, #63
 5032 009e 3021     		movs	r1, #48
 5033 00a0 4846     		mov	r0, r9
 5034 00a2 FFF7FEFF 		bl	xset
 5035              	.LVL532:
2050:src/display.c **** 
 5036              		.loc 1 2050 2 is_stmt 1 view .LVU1545
2050:src/display.c **** 
 5037              		.loc 1 2050 31 is_stmt 0 view .LVU1546
 5038 00a6 0023     		movs	r3, #0
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5039              		.loc 1 2052 6 view .LVU1547
 5040 00a8 4521     		movs	r1, #69
 5041 00aa 5846     		mov	r0, fp
2050:src/display.c **** 
 5042              		.loc 1 2050 31 view .LVU1548
 5043 00ac 8DF89730 		strb	r3, [sp, #151]
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5044              		.loc 1 2052 2 is_stmt 1 view .LVU1549
2052:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5045              		.loc 1 2052 6 is_stmt 0 view .LVU1550
 5046 00b0 FFF7FEFF 		bl	find_char
 5047              	.LVL533:
2054:src/display.c **** 	if (q == NULL) exp = 0;
 5048              		.loc 1 2054 2 is_stmt 1 view .LVU1551
2054:src/display.c **** 	if (q == NULL) exp = 0;
 5049              		.loc 1 2054 5 is_stmt 0 view .LVU1552
 5050 00b4 0646     		mov	r6, r0
 5051 00b6 0028     		cmp	r0, #0
 5052 00b8 00F06481 		beq	.L692
 5053              	.L488:
2057:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5054              		.loc 1 2057 4 is_stmt 1 view .LVU1553
ARM GAS  /tmp/ccSEf3H9.s 			page 175


2057:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5055              		.loc 1 2057 10 is_stmt 0 view .LVU1554
 5056 00bc 701C     		adds	r0, r6, #1
 5057              	.LVL534:
2057:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5058              		.loc 1 2057 10 view .LVU1555
 5059 00be FFF7FEFF 		bl	s_to_i
 5060              	.LVL535:
2058:src/display.c **** 	}
 5061              		.loc 1 2058 7 view .LVU1556
 5062 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5063 00c4 442B     		cmp	r3, #68
2057:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5064              		.loc 1 2057 10 view .LVU1557
 5065 00c6 0646     		mov	r6, r0
 5066              	.LVL536:
2058:src/display.c **** 	}
 5067              		.loc 1 2058 4 is_stmt 1 view .LVU1558
2058:src/display.c **** 	}
 5068              		.loc 1 2058 19 view .LVU1559
2058:src/display.c **** 	}
 5069              		.loc 1 2058 23 is_stmt 0 view .LVU1560
 5070 00c8 08BF     		it	eq
 5071 00ca 4642     		rsbeq	r6, r0, #0
 5072              	.LVL537:
 5073              	.L489:
2066:src/display.c **** 	if (!res) {
 5074              		.loc 1 2066 2 is_stmt 1 view .LVU1561
2066:src/display.c **** 	if (!res) {
 5075              		.loc 1 2066 12 view .LVU1562
2066:src/display.c **** 	if (!res) {
 5076              		.loc 1 2066 2 is_stmt 0 view .LVU1563
 5077 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5078 00d0 202B     		cmp	r3, #32
2066:src/display.c **** 	if (!res) {
 5079              		.loc 1 2066 8 view .LVU1564
 5080 00d2 D846     		mov	r8, fp
2066:src/display.c **** 	if (!res) {
 5081              		.loc 1 2066 2 view .LVU1565
 5082 00d4 03D1     		bne	.L490
 5083              	.LVL538:
 5084              	.L491:
2066:src/display.c **** 	if (!res) {
 5085              		.loc 1 2066 27 is_stmt 1 discriminator 3 view .LVU1566
2066:src/display.c **** 	if (!res) {
 5086              		.loc 1 2066 23 discriminator 3 view .LVU1567
2066:src/display.c **** 	if (!res) {
 5087              		.loc 1 2066 12 discriminator 3 view .LVU1568
2066:src/display.c **** 	if (!res) {
 5088              		.loc 1 2066 2 is_stmt 0 discriminator 3 view .LVU1569
 5089 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5090              	.LVL539:
2066:src/display.c **** 	if (!res) {
 5091              		.loc 1 2066 2 discriminator 3 view .LVU1570
 5092 00da 202B     		cmp	r3, #32
 5093 00dc FBD0     		beq	.L491
 5094              	.LVL540:
ARM GAS  /tmp/ccSEf3H9.s 			page 176


 5095              	.L490:
2067:src/display.c **** 	  CLR_EXP_SIGN;
 5096              		.loc 1 2067 2 is_stmt 1 view .LVU1571
2067:src/display.c **** 	  CLR_EXP_SIGN;
 5097              		.loc 1 2067 5 is_stmt 0 view .LVU1572
 5098 00de 002C     		cmp	r4, #0
 5099 00e0 00F0C982 		beq	.L693
 5100              	.L492:
2071:src/display.c **** 	  negative = 1;
 5101              		.loc 1 2071 2 is_stmt 1 view .LVU1573
2071:src/display.c **** 	  negative = 1;
 5102              		.loc 1 2071 6 is_stmt 0 view .LVU1574
 5103 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2071:src/display.c **** 	  negative = 1;
 5104              		.loc 1 2071 5 view .LVU1575
 5105 00e8 2D2B     		cmp	r3, #45
 5106 00ea 00F0DB81 		beq	.L694
2074:src/display.c **** 	  q++;
 5107              		.loc 1 2074 9 is_stmt 1 view .LVU1576
2074:src/display.c **** 	  q++;
 5108              		.loc 1 2074 12 is_stmt 0 view .LVU1577
 5109 00ee 2B2B     		cmp	r3, #43
 5110 00f0 00F0AF82 		beq	.L695
1958:src/display.c **** 	int trimzeros = 0;
 5111              		.loc 1 1958 6 view .LVU1578
 5112 00f4 0022     		movs	r2, #0
 5113 00f6 0392     		str	r2, [sp, #12]
 5114              	.LVL541:
 5115              	.L494:
2076:src/display.c **** 	if (*q == '.') {
 5116              		.loc 1 2076 9 is_stmt 1 discriminator 1 view .LVU1579
2076:src/display.c **** 	if (*q == '.') {
 5117              		.loc 1 2076 2 is_stmt 0 discriminator 1 view .LVU1580
 5118 00f8 302B     		cmp	r3, #48
 5119 00fa 03D1     		bne	.L496
 5120              	.LVL542:
 5121              	.L495:
2076:src/display.c **** 	if (*q == '.') {
 5122              		.loc 1 2076 24 is_stmt 1 discriminator 2 view .LVU1581
2076:src/display.c **** 	if (*q == '.') {
 5123              		.loc 1 2076 20 discriminator 2 view .LVU1582
2076:src/display.c **** 	if (*q == '.') {
 5124              		.loc 1 2076 9 discriminator 2 view .LVU1583
 5125 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5126              	.LVL543:
2076:src/display.c **** 	if (*q == '.') {
 5127              		.loc 1 2076 2 is_stmt 0 discriminator 2 view .LVU1584
 5128 0100 302B     		cmp	r3, #48
 5129 0102 FBD0     		beq	.L495
 5130              	.LVL544:
 5131              	.L496:
2077:src/display.c **** 	  do
 5132              		.loc 1 2077 2 is_stmt 1 view .LVU1585
2077:src/display.c **** 	  do
 5133              		.loc 1 2077 5 is_stmt 0 view .LVU1586
 5134 0104 2E2B     		cmp	r3, #46
 5135 0106 00F0B581 		beq	.L696
ARM GAS  /tmp/ccSEf3H9.s 			page 177


2084:src/display.c **** 	    *p++ = *q++;
 5136              		.loc 1 2084 4 is_stmt 1 view .LVU1587
2084:src/display.c **** 	    *p++ = *q++;
 5137              		.loc 1 2084 7 is_stmt 0 view .LVU1588
 5138 010a A3F13002 		sub	r2, r3, #48
 5139 010e 092A     		cmp	r2, #9
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5140              		.loc 1 2085 6 is_stmt 1 view .LVU1589
 5141              	.LVL545:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5142              		.loc 1 2085 15 is_stmt 0 view .LVU1590
 5143 0110 9CBF     		itt	ls
 5144 0112 08F10108 		addls	r8, r8, #1
 5145              	.LVL546:
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5146              		.loc 1 2085 11 view .LVU1591
 5147 0116 8DF85830 		strbls	r3, [sp, #88]
2086:src/display.c **** 	    *p++ = *q++;
 5148              		.loc 1 2086 11 view .LVU1592
 5149 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2086:src/display.c **** 	    *p++ = *q++;
 5150              		.loc 1 2086 10 view .LVU1593
 5151 011e A2F13003 		sub	r3, r2, #48
2085:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5152              		.loc 1 2085 8 view .LVU1594
 5153 0122 94BF     		ite	ls
 5154 0124 0DF15901 		addls	r1, sp, #89
1944:src/display.c **** 	char *r;
 5155              		.loc 1 1944 8 view .LVU1595
 5156 0128 4946     		movhi	r1, r9
 5157              	.LVL547:
2086:src/display.c **** 	    *p++ = *q++;
 5158              		.loc 1 2086 10 is_stmt 1 view .LVU1596
 5159 012a 092B     		cmp	r3, #9
 5160 012c 0ED8     		bhi	.L502
 5161 012e A6EB0800 		sub	r0, r6, r8
 5162 0132 08F10103 		add	r3, r8, #1
 5163              	.L503:
 5164              	.LVL548:
2087:src/display.c **** 	    exp++;
 5165              		.loc 1 2087 6 view .LVU1597
2087:src/display.c **** 	    exp++;
 5166              		.loc 1 2087 11 is_stmt 0 view .LVU1598
 5167 0136 01F8012B 		strb	r2, [r1], #1
 5168              	.LVL549:
2087:src/display.c **** 	    exp++;
 5169              		.loc 1 2087 15 view .LVU1599
 5170 013a 9846     		mov	r8, r3
 5171              	.LVL550:
2088:src/display.c **** 	  }
 5172              		.loc 1 2088 6 is_stmt 1 view .LVU1600
 5173 013c C618     		adds	r6, r0, r3
 5174              	.LVL551:
2086:src/display.c **** 	    *p++ = *q++;
 5175              		.loc 1 2086 10 view .LVU1601
2086:src/display.c **** 	    *p++ = *q++;
 5176              		.loc 1 2086 11 is_stmt 0 view .LVU1602
ARM GAS  /tmp/ccSEf3H9.s 			page 178


 5177 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5178              	.LVL552:
2086:src/display.c **** 	    *p++ = *q++;
 5179              		.loc 1 2086 10 view .LVU1603
 5180 0142 A2F1300C 		sub	ip, r2, #48
 5181 0146 BCF1090F 		cmp	ip, #9
 5182 014a F4D9     		bls	.L503
 5183              	.LVL553:
 5184              	.L502:
2090:src/display.c **** 	    q++;
 5185              		.loc 1 2090 4 is_stmt 1 view .LVU1604
2090:src/display.c **** 	    q++;
 5186              		.loc 1 2090 7 is_stmt 0 view .LVU1605
 5187 014c 2E2A     		cmp	r2, #46
 5188 014e 00F06E82 		beq	.L697
 5189              	.LVL554:
 5190              	.L499:
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5191              		.loc 1 2097 2 is_stmt 1 view .LVU1606
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5192              		.loc 1 2098 12 is_stmt 0 view .LVU1607
 5193 0152 019B     		ldr	r3, [sp, #4]
 5194 0154 079A     		ldr	r2, [sp, #28]
 5195 0156 1B68     		ldr	r3, [r3]
 5196 0158 0293     		str	r3, [sp, #8]
2097:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5197              		.loc 1 2097 5 view .LVU1608
 5198 015a 012D     		cmp	r5, #1
 5199 015c 00F07A81 		beq	.L505
 5200              	.LVL555:
 5201              	.L687:
2099:src/display.c **** 	  else {
 5202              		.loc 1 2099 35 view .LVU1609
 5203 0160 0021     		movs	r1, #0
 5204              	.LVL556:
 5205              	.L506:
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5206              		.loc 1 2111 2 is_stmt 1 view .LVU1610
 5207 0162 02F1010E 		add	lr, r2, #1
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5208              		.loc 1 2111 35 is_stmt 0 view .LVU1611
 5209 0166 7144     		add	r1, r1, lr
2111:src/display.c **** 	if (*p >= '5') {	// Round up
 5210              		.loc 1 2111 4 view .LVU1612
 5211 0168 09EB0103 		add	r3, r9, r1
 5212              	.LVL557:
2112:src/display.c **** 	  *p = '0';
 5213              		.loc 1 2112 2 is_stmt 1 view .LVU1613
2112:src/display.c **** 	  *p = '0';
 5214              		.loc 1 2112 6 is_stmt 0 view .LVU1614
 5215 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2112:src/display.c **** 	  *p = '0';
 5216              		.loc 1 2112 5 view .LVU1615
 5217 0170 3428     		cmp	r0, #52
 5218 0172 26D9     		bls	.L511
2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5219              		.loc 1 2113 4 is_stmt 1 view .LVU1616
ARM GAS  /tmp/ccSEf3H9.s 			page 179


2113:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5220              		.loc 1 2113 7 is_stmt 0 view .LVU1617
 5221 0174 3020     		movs	r0, #48
 5222 0176 09F80100 		strb	r0, [r9, r1]
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5223              		.loc 1 2114 4 is_stmt 1 view .LVU1618
 5224              	.LVL558:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5225              		.loc 1 2114 23 view .LVU1619
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5226              		.loc 1 2114 4 is_stmt 0 view .LVU1620
 5227 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5228 017e 3928     		cmp	r0, #57
 5229 0180 40F0DD83 		bne	.L512
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5230              		.loc 1 2114 11 view .LVU1621
 5231 0184 4846     		mov	r0, r9
 5232              	.LVL559:
 5233              	.L513:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5234              		.loc 1 2114 38 is_stmt 1 discriminator 3 view .LVU1622
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5235              		.loc 1 2114 34 discriminator 3 view .LVU1623
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5236              		.loc 1 2114 23 discriminator 3 view .LVU1624
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5237              		.loc 1 2114 4 is_stmt 0 discriminator 3 view .LVU1625
 5238 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5239              	.LVL560:
2114:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5240              		.loc 1 2114 4 discriminator 3 view .LVU1626
 5241 018a BCF1390F 		cmp	ip, #57
 5242 018e FAD0     		beq	.L513
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5243              		.loc 1 2115 4 is_stmt 1 view .LVU1627
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5244              		.loc 1 2115 7 is_stmt 0 view .LVU1628
 5245 0190 8342     		cmp	r3, r0
 5246 0192 00F00D81 		beq	.L698
 5247              	.LVL561:
 5248              	.L589:
2124:src/display.c **** 	      *p = '0';
 5249              		.loc 1 2124 12 is_stmt 1 view .LVU1629
2124:src/display.c **** 	      *p = '0';
 5250              		.loc 1 2124 13 is_stmt 0 view .LVU1630
 5251 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2124:src/display.c **** 	      *p = '0';
 5252              		.loc 1 2124 12 view .LVU1631
 5253 019a BCF1390F 		cmp	ip, #57
 5254 019e 03F1FF30 		add	r0, r3, #-1
 5255              	.LVL562:
2124:src/display.c **** 	      *p = '0';
 5256              		.loc 1 2124 12 view .LVU1632
 5257 01a2 08D1     		bne	.L516
2125:src/display.c **** 	    (*p)++;
 5258              		.loc 1 2125 11 view .LVU1633
 5259 01a4 4FF0300E 		mov	lr, #48
ARM GAS  /tmp/ccSEf3H9.s 			page 180


 5260              	.L515:
2125:src/display.c **** 	    (*p)++;
 5261              		.loc 1 2125 8 is_stmt 1 view .LVU1634
2125:src/display.c **** 	    (*p)++;
 5262              		.loc 1 2125 11 is_stmt 0 view .LVU1635
 5263 01a8 80F800E0 		strb	lr, [r0]
2124:src/display.c **** 	      *p = '0';
 5264              		.loc 1 2124 12 is_stmt 1 view .LVU1636
 5265              	.LVL563:
2124:src/display.c **** 	      *p = '0';
 5266              		.loc 1 2124 13 is_stmt 0 view .LVU1637
 5267 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5268              	.LVL564:
2124:src/display.c **** 	      *p = '0';
 5269              		.loc 1 2124 12 view .LVU1638
 5270 01b0 BCF1390F 		cmp	ip, #57
 5271 01b4 F8D0     		beq	.L515
 5272              	.L516:
2126:src/display.c **** 	  }
 5273              		.loc 1 2126 6 is_stmt 1 view .LVU1639
2126:src/display.c **** 	  }
 5274              		.loc 1 2126 10 is_stmt 0 view .LVU1640
 5275 01b6 0CF1010C 		add	ip, ip, #1
 5276 01ba 80F800C0 		strb	ip, [r0]
 5277              	.LVL565:
 5278              	.L686:
2126:src/display.c **** 	  }
 5279              		.loc 1 2126 10 view .LVU1641
 5280 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5281              	.L511:
2131:src/display.c **** 
 5282              		.loc 1 2131 2 is_stmt 1 view .LVU1642
 5283              	.LVL566:
2131:src/display.c **** 
 5284              		.loc 1 2131 45 view .LVU1643
2131:src/display.c **** 
 5285              		.loc 1 2131 2 is_stmt 0 view .LVU1644
 5286 01c2 28B1     		cbz	r0, .L522
 5287              	.LVL567:
 5288              	.L588:
2131:src/display.c **** 
 5289              		.loc 1 2131 62 view .LVU1645
 5290 01c4 3020     		movs	r0, #48
 5291              	.L523:
2131:src/display.c **** 
 5292              		.loc 1 2131 68 is_stmt 1 discriminator 3 view .LVU1646
2131:src/display.c **** 
 5293              		.loc 1 2131 57 discriminator 3 view .LVU1647
 5294              	.LVL568:
2131:src/display.c **** 
 5295              		.loc 1 2131 62 is_stmt 0 discriminator 3 view .LVU1648
 5296 01c6 03F8010B 		strb	r0, [r3], #1
 5297              	.LVL569:
2131:src/display.c **** 
 5298              		.loc 1 2131 45 is_stmt 1 discriminator 3 view .LVU1649
2131:src/display.c **** 
 5299              		.loc 1 2131 2 is_stmt 0 discriminator 3 view .LVU1650
ARM GAS  /tmp/ccSEf3H9.s 			page 181


 5300 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5301 01cc 0029     		cmp	r1, #0
 5302 01ce FAD1     		bne	.L523
 5303              	.L522:
2133:src/display.c **** 	switch (mode) {
 5304              		.loc 1 2133 2 is_stmt 1 view .LVU1651
 5305              	.LVL570:
2134:src/display.c **** 	default:
 5306              		.loc 1 2134 2 view .LVU1652
 5307 01d0 022D     		cmp	r5, #2
 5308 01d2 00F06D81 		beq	.L560
 5309 01d6 032D     		cmp	r5, #3
 5310 01d8 00F00F81 		beq	.L525
 5311 01dc 012D     		cmp	r5, #1
 5312 01de 00F0E081 		beq	.L526
2137:src/display.c **** 	  if (count != *display_digits)
 5313              		.loc 1 2137 4 view .LVU1653
 5314              	.LVL571:
2137:src/display.c **** 	  if (count != *display_digits)
 5315              		.loc 1 2137 34 view .LVU1654
2137:src/display.c **** 	  if (count != *display_digits)
 5316              		.loc 1 2137 42 is_stmt 0 view .LVU1655
 5317 01e2 0298     		ldr	r0, [sp, #8]
 5318 01e4 26AB     		add	r3, sp, #152
 5319 01e6 0344     		add	r3, r3, r0
2137:src/display.c **** 	  if (count != *display_digits)
 5320              		.loc 1 2137 4 view .LVU1656
 5321 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5322 01ec 302B     		cmp	r3, #48
 5323 01ee 40F09983 		bne	.L604
 5324 01f2 411E     		subs	r1, r0, #1
 5325 01f4 4944     		add	r1, r1, r9
 5326              	.LVL572:
 5327              	.L530:
2137:src/display.c **** 	  if (count != *display_digits)
 5328              		.loc 1 2137 66 is_stmt 1 discriminator 3 view .LVU1657
2137:src/display.c **** 	  if (count != *display_digits)
 5329              		.loc 1 2137 58 discriminator 3 view .LVU1658
2137:src/display.c **** 	  if (count != *display_digits)
 5330              		.loc 1 2137 42 is_stmt 0 discriminator 3 view .LVU1659
 5331 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2137:src/display.c **** 	  if (count != *display_digits)
 5332              		.loc 1 2137 4 discriminator 3 view .LVU1660
 5333 01fa 302D     		cmp	r5, #48
 5334 01fc 0346     		mov	r3, r0
2137:src/display.c **** 	  if (count != *display_digits)
 5335              		.loc 1 2137 63 discriminator 3 view .LVU1661
 5336 01fe 00F1FF30 		add	r0, r0, #-1
 5337              	.LVL573:
2137:src/display.c **** 	  if (count != *display_digits)
 5338              		.loc 1 2137 34 is_stmt 1 discriminator 3 view .LVU1662
2137:src/display.c **** 	  if (count != *display_digits)
 5339              		.loc 1 2137 4 is_stmt 0 discriminator 3 view .LVU1663
 5340 0202 F8D0     		beq	.L530
2138:src/display.c **** 	    count++;
 5341              		.loc 1 2138 4 is_stmt 1 view .LVU1664
2138:src/display.c **** 	    count++;
ARM GAS  /tmp/ccSEf3H9.s 			page 182


 5342              		.loc 1 2138 7 is_stmt 0 view .LVU1665
 5343 0204 0299     		ldr	r1, [sp, #8]
 5344 0206 8842     		cmp	r0, r1
 5345 0208 08BF     		it	eq
 5346 020a 0B46     		moveq	r3, r1
 5347              	.LVL574:
 5348              	.L529:
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5349              		.loc 1 2141 4 is_stmt 1 view .LVU1666
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5350              		.loc 1 2141 7 is_stmt 0 view .LVU1667
 5351 020c 0299     		ldr	r1, [sp, #8]
 5352 020e 8E42     		cmp	r6, r1
 5353 0210 80F20581 		bge	.L531
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5354              		.loc 1 2141 47 discriminator 1 view .LVU1668
 5355 0214 591A     		subs	r1, r3, r1
2141:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5356              		.loc 1 2141 31 discriminator 1 view .LVU1669
 5357 0216 B142     		cmp	r1, r6
 5358 0218 00F30181 		bgt	.L531
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5359              		.loc 1 2166 11 is_stmt 1 view .LVU1670
2166:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5360              		.loc 1 2166 14 is_stmt 0 view .LVU1671
 5361 021c 002E     		cmp	r6, #0
 5362 021e C0F2A483 		blt	.L540
 5363 0222 721C     		adds	r2, r6, #1
2168:src/display.c **** 		*obp++ = ',';
 5364              		.loc 1 2168 31 view .LVU1672
 5365 0224 DFF838E1 		ldr	lr, .L711+8
 5366 0228 0592     		str	r2, [sp, #20]
 5367 022a 09EB0200 		add	r0, r9, r2
2133:src/display.c **** 	switch (mode) {
 5368              		.loc 1 2133 4 view .LVU1673
 5369 022e CC46     		mov	ip, r9
1938:src/display.c **** 	int odig = 0;
 5370              		.loc 1 1938 15 view .LVU1674
 5371 0230 5946     		mov	r1, fp
 5372 0232 05E0     		b	.L541
 5373              	.LVL575:
 5374              	.L544:
2169:src/display.c **** 	      *obp++ = *p++;
 5375              		.loc 1 2169 3 is_stmt 1 view .LVU1675
2168:src/display.c **** 		*obp++ = ',';
 5376              		.loc 1 2168 18 is_stmt 0 view .LVU1676
 5377 0234 022D     		cmp	r5, #2
2169:src/display.c **** 	      *obp++ = *p++;
 5378              		.loc 1 2169 10 view .LVU1677
 5379 0236 05BF     		ittet	eq
 5380 0238 2C22     		moveq	r2, #44
 5381 023a 4A70     		strbeq	r2, [r1, #1]
2170:src/display.c **** 	      odig++;
 5382              		.loc 1 2170 12 view .LVU1678
 5383 023c 0131     		addne	r1, r1, #1
 5384              	.LVL576:
2169:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccSEf3H9.s 			page 183


 5385              		.loc 1 2169 7 view .LVU1679
 5386 023e 0231     		addeq	r1, r1, #2
 5387              	.LVL577:
 5388              	.L541:
2170:src/display.c **** 	      odig++;
 5389              		.loc 1 2170 8 is_stmt 1 discriminator 2 view .LVU1680
2170:src/display.c **** 	      odig++;
 5390              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1681
 5391 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5392              	.LVL578:
2168:src/display.c **** 		*obp++ = ',';
 5393              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1682
2170:src/display.c **** 	      odig++;
 5394              		.loc 1 2170 15 is_stmt 0 discriminator 2 view .LVU1683
 5395 0244 0A70     		strb	r2, [r1]
2171:src/display.c **** 	    }
 5396              		.loc 1 2171 8 is_stmt 1 discriminator 2 view .LVU1684
 5397              	.LVL579:
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5398              		.loc 1 2167 23 discriminator 2 view .LVU1685
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5399              		.loc 1 2167 15 discriminator 2 view .LVU1686
2168:src/display.c **** 		*obp++ = ',';
 5400              		.loc 1 2168 31 is_stmt 0 discriminator 2 view .LVU1687
 5401 0246 A9EB0C02 		sub	r2, r9, ip
 5402 024a 3244     		add	r2, r2, r6
 5403 024c 8EFB0285 		smull	r8, r5, lr, r2
 5404 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5405 0254 05EB4505 		add	r5, r5, r5, lsl #1
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5406              		.loc 1 2167 6 discriminator 2 view .LVU1688
 5407 0258 6045     		cmp	r0, ip
2168:src/display.c **** 		*obp++ = ',';
 5408              		.loc 1 2168 31 discriminator 2 view .LVU1689
 5409 025a A2EB0505 		sub	r5, r2, r5
2167:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5410              		.loc 1 2167 6 discriminator 2 view .LVU1690
 5411 025e E9D1     		bne	.L544
 5412 0260 059D     		ldr	r5, [sp, #20]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5413              		.loc 1 2173 6 is_stmt 1 view .LVU1691
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5414              		.loc 1 2173 13 is_stmt 0 view .LVU1692
 5415 0262 2E22     		movs	r2, #46
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5416              		.loc 1 2174 9 view .LVU1693
 5417 0264 AB42     		cmp	r3, r5
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5418              		.loc 1 2173 13 view .LVU1694
 5419 0266 4A70     		strb	r2, [r1, #1]
2173:src/display.c **** 	    if (count > (exp + 1)) {
 5420              		.loc 1 2173 10 view .LVU1695
 5421 0268 01F10208 		add	r8, r1, #2
 5422              	.LVL580:
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5423              		.loc 1 2174 6 is_stmt 1 view .LVU1696
2174:src/display.c **** 	      for (i=exp+1; i<count; i++) {
ARM GAS  /tmp/ccSEf3H9.s 			page 184


 5424              		.loc 1 2174 9 is_stmt 0 view .LVU1697
 5425 026c 40F34281 		ble	.L538
 5426 0270 9A1B     		subs	r2, r3, r6
 5427 0272 0A44     		add	r2, r2, r1
 5428 0274 0131     		adds	r1, r1, #1
 5429              	.LVL581:
 5430              	.L545:
2176:src/display.c **** 		odig++;
 5431              		.loc 1 2176 3 is_stmt 1 discriminator 3 view .LVU1698
2176:src/display.c **** 		odig++;
 5432              		.loc 1 2176 10 is_stmt 0 discriminator 3 view .LVU1699
 5433 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5434              	.LVL582:
2176:src/display.c **** 		odig++;
 5435              		.loc 1 2176 10 discriminator 3 view .LVU1700
 5436 027a 01F8015F 		strb	r5, [r1, #1]!
2177:src/display.c **** 	      }
 5437              		.loc 1 2177 3 is_stmt 1 discriminator 3 view .LVU1701
2175:src/display.c **** 		*obp++ = *p++;
 5438              		.loc 1 2175 31 discriminator 3 view .LVU1702
2175:src/display.c **** 		*obp++ = *p++;
 5439              		.loc 1 2175 22 discriminator 3 view .LVU1703
2175:src/display.c **** 		*obp++ = *p++;
 5440              		.loc 1 2175 8 is_stmt 0 discriminator 3 view .LVU1704
 5441 027e 9142     		cmp	r1, r2
 5442 0280 F9D1     		bne	.L545
 5443 0282 F243     		mvns	r2, r6
 5444 0284 1A44     		add	r2, r2, r3
 5445 0286 9044     		add	r8, r8, r2
 5446              	.LVL583:
2177:src/display.c **** 	      }
 5447              		.loc 1 2177 7 view .LVU1705
 5448 0288 1D46     		mov	r5, r3
 5449 028a 33E1     		b	.L538
 5450              	.LVL584:
 5451              	.L608:
2177:src/display.c **** 	      }
 5452              		.loc 1 2177 7 view .LVU1706
 5453 028c D846     		mov	r8, fp
 5454              	.LVL585:
 5455              	.L567:
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5456              		.loc 1 2269 2 is_stmt 1 view .LVU1707
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5457              		.loc 1 2269 5 is_stmt 0 view .LVU1708
 5458 028e 029B     		ldr	r3, [sp, #8]
 5459 0290 0A2B     		cmp	r3, #10
 5460 0292 02DD     		ble	.L570
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5461              		.loc 1 2269 50 discriminator 1 view .LVU1709
 5462 0294 002C     		cmp	r4, #0
 5463 0296 00F0FB81 		beq	.L699
 5464              	.L570:
2275:src/display.c **** 	if (odig > *display_digits)
 5465              		.loc 1 2275 2 is_stmt 1 view .LVU1710
 5466 029a 029B     		ldr	r3, [sp, #8]
 5467 029c 9D42     		cmp	r5, r3
ARM GAS  /tmp/ccSEf3H9.s 			page 185


 5468 029e A8BF     		it	ge
 5469 02a0 1D46     		movge	r5, r3
 5470              	.LVL586:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5471              		.loc 1 2278 23 is_stmt 0 view .LVU1711
 5472 02a2 5F1B     		subs	r7, r3, r5
 5473              	.LVL587:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5474              		.loc 1 2278 4 view .LVU1712
 5475 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2275:src/display.c **** 	if (odig > *display_digits)
 5476              		.loc 1 2275 7 view .LVU1713
 5477 02a8 0023     		movs	r3, #0
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5478              		.loc 1 2279 5 view .LVU1714
 5479 02aa 9F42     		cmp	r7, r3
2275:src/display.c **** 	if (odig > *display_digits)
 5480              		.loc 1 2275 7 view .LVU1715
 5481 02ac 88F80030 		strb	r3, [r8]
2276:src/display.c **** 	  odig = *display_digits;
 5482              		.loc 1 2276 2 is_stmt 1 view .LVU1716
 5483              	.LVL588:
2278:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5484              		.loc 1 2278 2 view .LVU1717
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5485              		.loc 1 2279 2 view .LVU1718
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5486              		.loc 1 2279 5 is_stmt 0 view .LVU1719
 5487 02b0 03DD     		ble	.L571
2279:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5488              		.loc 1 2279 35 discriminator 1 view .LVU1720
 5489 02b2 16F57A7F 		cmn	r6, #1000
2280:src/display.c **** 	if (negative) {
 5490              		.loc 1 2280 4 is_stmt 1 discriminator 1 view .LVU1721
2280:src/display.c **** 	if (negative) {
 5491              		.loc 1 2280 6 is_stmt 0 discriminator 1 view .LVU1722
 5492 02b6 D8BF     		it	le
 5493 02b8 093F     		suble	r7, r7, #9
 5494              	.LVL589:
 5495              	.L571:
2281:src/display.c **** 	  if (res) *res++ = '-';
 5496              		.loc 1 2281 2 is_stmt 1 view .LVU1723
2281:src/display.c **** 	  if (res) *res++ = '-';
 5497              		.loc 1 2281 5 is_stmt 0 view .LVU1724
 5498 02ba 039B     		ldr	r3, [sp, #12]
 5499 02bc 2BB1     		cbz	r3, .L572
2282:src/display.c **** 	  else {
 5500              		.loc 1 2282 4 is_stmt 1 view .LVU1725
2282:src/display.c **** 	  else {
 5501              		.loc 1 2282 7 is_stmt 0 view .LVU1726
 5502 02be 002C     		cmp	r4, #0
 5503 02c0 00F0FE81 		beq	.L573
2282:src/display.c **** 	  else {
 5504              		.loc 1 2282 13 is_stmt 1 discriminator 1 view .LVU1727
 5505              	.LVL590:
2282:src/display.c **** 	  else {
 5506              		.loc 1 2282 20 is_stmt 0 discriminator 1 view .LVU1728
ARM GAS  /tmp/ccSEf3H9.s 			page 186


 5507 02c4 2D23     		movs	r3, #45
 5508 02c6 04F8013B 		strb	r3, [r4], #1
 5509              	.LVL591:
 5510              	.L572:
2290:src/display.c **** 	  if (c == '.') {
 5511              		.loc 1 2290 12 is_stmt 1 discriminator 1 view .LVU1729
2290:src/display.c **** 	  if (c == '.') {
 5512              		.loc 1 2290 18 is_stmt 0 discriminator 1 view .LVU1730
 5513 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5514              	.LVL592:
2290:src/display.c **** 	  if (c == '.') {
 5515              		.loc 1 2290 2 discriminator 1 view .LVU1731
 5516 02ce A2B1     		cbz	r2, .L574
2290:src/display.c **** 	  if (c == '.') {
 5517              		.loc 1 2290 31 view .LVU1732
 5518 02d0 6B2F     		cmp	r7, #107
 5519 02d2 12DC     		bgt	.L574
 5520              	.LVL593:
 5521              	.L575:
2292:src/display.c **** 	  } else if (c == ',') {
 5522              		.loc 1 2292 12 view .LVU1733
 5523 02d4 DFF88C90 		ldr	r9, .L711+12
 5524              	.LVL594:
 5525              	.L584:
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5526              		.loc 1 2291 4 is_stmt 1 view .LVU1734
2291:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5527              		.loc 1 2291 7 is_stmt 0 view .LVU1735
 5528 02d8 2E2A     		cmp	r2, #46
 5529 02da 00F02081 		beq	.L700
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5530              		.loc 1 2293 11 is_stmt 1 view .LVU1736
2293:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5531              		.loc 1 2293 14 is_stmt 0 view .LVU1737
 5532 02de 2C2A     		cmp	r2, #44
 5533 02e0 00F04681 		beq	.L701
2296:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5534              		.loc 1 2296 6 is_stmt 1 view .LVU1738
 5535              	.LVL595:
 5536              	.LBB432:
 5537              	.LBI432:
 407:src/display.c ****   if (res) *res++ = ch;
 5538              		.loc 1 407 14 view .LVU1739
 5539              	.LBB433:
 408:src/display.c ****   else	set_dig(base, ch);
 5540              		.loc 1 408 3 view .LVU1740
 408:src/display.c ****   else	set_dig(base, ch);
 5541              		.loc 1 408 6 is_stmt 0 view .LVU1741
 5542 02e4 002C     		cmp	r4, #0
 5543 02e6 00F05281 		beq	.L582
 408:src/display.c ****   else	set_dig(base, ch);
 5544              		.loc 1 408 12 is_stmt 1 view .LVU1742
 5545              	.LVL596:
 408:src/display.c ****   else	set_dig(base, ch);
 5546              		.loc 1 408 19 is_stmt 0 view .LVU1743
 5547 02ea 04F8012B 		strb	r2, [r4], #1
 5548              	.LVL597:
ARM GAS  /tmp/ccSEf3H9.s 			page 187


 5549              	.L583:
 410:src/display.c **** }
 5550              		.loc 1 410 3 is_stmt 1 view .LVU1744
 410:src/display.c **** }
 5551              		.loc 1 410 3 is_stmt 0 view .LVU1745
 5552              	.LBE433:
 5553              	.LBE432:
2297:src/display.c **** 	  }
 5554              		.loc 1 2297 6 is_stmt 1 view .LVU1746
2290:src/display.c **** 	  if (c == '.') {
 5555              		.loc 1 2290 18 is_stmt 0 view .LVU1747
 5556 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5557              	.LVL598:
2297:src/display.c **** 	  }
 5558              		.loc 1 2297 8 view .LVU1748
 5559 02f2 0937     		adds	r7, r7, #9
 5560              	.LVL599:
2290:src/display.c **** 	  if (c == '.') {
 5561              		.loc 1 2290 53 is_stmt 1 view .LVU1749
2290:src/display.c **** 	  if (c == '.') {
 5562              		.loc 1 2290 12 view .LVU1750
2290:src/display.c **** 	  if (c == '.') {
 5563              		.loc 1 2290 2 is_stmt 0 view .LVU1751
 5564 02f4 0AB1     		cbz	r2, .L574
2290:src/display.c **** 	  if (c == '.') {
 5565              		.loc 1 2290 31 discriminator 3 view .LVU1752
 5566 02f6 6B2F     		cmp	r7, #107
 5567 02f8 EEDD     		ble	.L584
 5568              	.LVL600:
 5569              	.L574:
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5570              		.loc 1 2310 2 is_stmt 1 view .LVU1753
2310:src/display.c **** 	  set_exp(exp, 0, res);
 5571              		.loc 1 2310 5 is_stmt 0 view .LVU1754
 5572 02fa BAF1000F 		cmp	r10, #0
 5573 02fe 40F01F81 		bne	.L702
 5574              	.L585:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5575              		.loc 1 2313 2 is_stmt 1 view .LVU1755
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5576              		.loc 1 2313 5 is_stmt 0 view .LVU1756
 5577 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5578 0306 2E2B     		cmp	r3, #46
 5579 0308 00F02481 		beq	.L703
 5580              	.LVL601:
 5581              	.L586:
2315:src/display.c ****       }
 5582              		.loc 1 2315 2 is_stmt 1 view .LVU1757
2315:src/display.c ****       }
 5583              		.loc 1 2315 18 is_stmt 0 view .LVU1758
 5584 030c 019B     		ldr	r3, [sp, #4]
 5585 030e 1D60     		str	r5, [r3]
 5586              	.LVL602:
 5587              	.L462:
2316:src/display.c **** 
 5588              		.loc 1 2316 7 view .LVU1759
 5589 0310 27B0     		add	sp, sp, #156
ARM GAS  /tmp/ccSEf3H9.s 			page 188


 5590              		.cfi_remember_state
 5591              		.cfi_def_cfa_offset 36
 5592              		@ sp needed
 5593 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5594              	.LVL603:
 5595              	.L470:
 5596              		.cfi_restore_state
2015:src/display.c **** 
 5597              		.loc 1 2015 4 is_stmt 1 view .LVU1760
 5598 0316 5946     		mov	r1, fp
 5599 0318 3846     		mov	r0, r7
 5600 031a FFF7FEFF 		bl	decNumberToString
 5601              	.LVL604:
 5602 031e A2E6     		b	.L472
 5603              	.LVL605:
 5604              	.L463:
1973:src/display.c **** 	    if (State2.hms) {
 5605              		.loc 1 1973 4 view .LVU1761
1973:src/display.c **** 	    if (State2.hms) {
 5606              		.loc 1 1973 25 is_stmt 0 view .LVU1762
 5607 0320 0D4B     		ldr	r3, .L711
 5608 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5609              		.loc 1 1973 22 view .LVU1763
 5610 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1973:src/display.c **** 	    if (State2.hms) {
 5611              		.loc 1 1973 25 view .LVU1764
 5612 0326 01F00201 		and	r1, r1, #2
1973:src/display.c **** 	    if (State2.hms) {
 5613              		.loc 1 1973 22 view .LVU1765
 5614 032a 1143     		orrs	r1, r1, r2
 5615 032c 7FF477AE 		bne	.L466
1974:src/display.c **** 	      set_x_hms(z, res);
 5616              		.loc 1 1974 6 is_stmt 1 view .LVU1766
1974:src/display.c **** 	      set_x_hms(z, res);
 5617              		.loc 1 1974 10 is_stmt 0 view .LVU1767
 5618 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1974:src/display.c **** 	      set_x_hms(z, res);
 5619              		.loc 1 1974 9 view .LVU1768
 5620 0332 DE07     		lsls	r6, r3, #31
 5621 0334 00F1F282 		bmi	.L704
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5622              		.loc 1 1978 11 is_stmt 1 view .LVU1769
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5623              		.loc 1 1978 15 is_stmt 0 view .LVU1770
 5624 0338 084B     		ldr	r3, .L711+4
 5625 033a 1B68     		ldr	r3, [r3]
 5626 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1978:src/display.c **** 	      if (set_x_fract(z, res))
 5627              		.loc 1 1978 14 view .LVU1771
 5628 0340 9806     		lsls	r0, r3, #26
 5629 0342 7FF56CAE 		bpl	.L466
1979:src/display.c **** 		return;
 5630              		.loc 1 1979 8 is_stmt 1 view .LVU1772
1979:src/display.c **** 		return;
 5631              		.loc 1 1979 12 is_stmt 0 view .LVU1773
 5632 0346 2146     		mov	r1, r4
ARM GAS  /tmp/ccSEf3H9.s 			page 189


 5633 0348 3846     		mov	r0, r7
 5634 034a FFF7FEFF 		bl	set_x_fract
 5635              	.LVL606:
1979:src/display.c **** 		return;
 5636              		.loc 1 1979 11 view .LVU1774
 5637 034e 0028     		cmp	r0, #0
 5638 0350 3FF465AE 		beq	.L466
 5639 0354 DCE7     		b	.L462
 5640              	.L712:
 5641 0356 00BF     		.align	2
 5642              	.L711:
 5643 0358 00000000 		.word	StateWhileOn
 5644 035c 00000000 		.word	main_ram
 5645 0360 56555555 		.word	1431655766
 5646 0364 00000000 		.word	.LANCHOR1
 5647              	.LVL607:
 5648              	.L691:
2023:src/display.c **** 	  //  ALL mode: fill the display
 5649              		.loc 1 2023 38 discriminator 1 view .LVU1775
 5650 0368 019B     		ldr	r3, [sp, #4]
 5651 036a 1A68     		ldr	r2, [r3]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5652              		.loc 1 2023 35 discriminator 1 view .LVU1776
 5653 036c 089B     		ldr	r3, [sp, #32]
2023:src/display.c **** 	  //  ALL mode: fill the display
 5654              		.loc 1 2023 23 discriminator 1 view .LVU1777
 5655 036e 9A42     		cmp	r2, r3
 5656 0370 11DD     		ble	.L485
2027:src/display.c **** 
 5657              		.loc 1 2027 4 is_stmt 1 view .LVU1778
2029:src/display.c **** 	  int orig_mode = mode;
 5658              		.loc 1 2029 23 is_stmt 0 view .LVU1779
 5659 0372 042D     		cmp	r5, #4
2027:src/display.c **** 
 5660              		.loc 1 2027 7 view .LVU1780
 5661 0374 0793     		str	r3, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5662              		.loc 1 2029 2 is_stmt 1 view .LVU1781
2029:src/display.c **** 	  int orig_mode = mode;
 5663              		.loc 1 2029 23 is_stmt 0 view .LVU1782
 5664 0376 12D0     		beq	.L486
 5665              	.L705:
2029:src/display.c **** 	  int orig_mode = mode;
 5666              		.loc 1 2029 43 discriminator 2 view .LVU1783
 5667 0378 052D     		cmp	r5, #5
 5668 037a 00F09881 		beq	.L487
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5669              		.loc 1 1959 6 view .LVU1784
 5670 037e 0023     		movs	r3, #0
 5671 0380 0493     		str	r3, [sp, #16]
 5672 0382 89E6     		b	.L591
 5673              	.LVL608:
 5674              	.L692:
2054:src/display.c **** 	if (q == NULL) exp = 0;
 5675              		.loc 1 2054 17 is_stmt 1 discriminator 1 view .LVU1785
2054:src/display.c **** 	if (q == NULL) exp = 0;
 5676              		.loc 1 2054 21 is_stmt 0 discriminator 1 view .LVU1786
ARM GAS  /tmp/ccSEf3H9.s 			page 190


 5677 0384 4421     		movs	r1, #68
 5678 0386 5846     		mov	r0, fp
 5679              	.LVL609:
2054:src/display.c **** 	if (q == NULL) exp = 0;
 5680              		.loc 1 2054 21 discriminator 1 view .LVU1787
 5681 0388 FFF7FEFF 		bl	find_char
 5682              	.LVL610:
2055:src/display.c **** 	else {
 5683              		.loc 1 2055 2 is_stmt 1 discriminator 1 view .LVU1788
2055:src/display.c **** 	else {
 5684              		.loc 1 2055 5 is_stmt 0 discriminator 1 view .LVU1789
 5685 038c 0646     		mov	r6, r0
 5686 038e 0028     		cmp	r0, #0
 5687 0390 3FF49CAE 		beq	.L489
 5688 0394 92E6     		b	.L488
 5689              	.LVL611:
 5690              	.L485:
2025:src/display.c **** 	else
 5691              		.loc 1 2025 4 is_stmt 1 view .LVU1790
2025:src/display.c **** 	else
 5692              		.loc 1 2025 25 is_stmt 0 view .LVU1791
 5693 0396 013A     		subs	r2, r2, #1
2029:src/display.c **** 	  int orig_mode = mode;
 5694              		.loc 1 2029 23 view .LVU1792
 5695 0398 042D     		cmp	r5, #4
2025:src/display.c **** 	else
 5696              		.loc 1 2025 7 view .LVU1793
 5697 039a 0792     		str	r2, [sp, #28]
2029:src/display.c **** 	  int orig_mode = mode;
 5698              		.loc 1 2029 2 is_stmt 1 view .LVU1794
2029:src/display.c **** 	  int orig_mode = mode;
 5699              		.loc 1 2029 23 is_stmt 0 view .LVU1795
 5700 039c ECD1     		bne	.L705
 5701              	.L486:
 5702              	.LBB435:
2030:src/display.c **** 
 5703              		.loc 1 2030 4 is_stmt 1 view .LVU1796
 5704              	.LVL612:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5705              		.loc 1 2032 4 view .LVU1797
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5706              		.loc 1 2032 11 is_stmt 0 view .LVU1798
 5707 039e 2A46     		mov	r2, r5
 5708 03a0 07A9     		add	r1, sp, #28
 5709 03a2 3846     		mov	r0, r7
 5710 03a4 FFF7FEFF 		bl	std_round_fix
 5711              	.LVL613:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5712              		.loc 1 2035 16 view .LVU1799
 5713 03a8 0123     		movs	r3, #1
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5714              		.loc 1 2032 11 view .LVU1800
 5715 03aa 0546     		mov	r5, r0
 5716              	.LVL614:
2033:src/display.c **** 	    // allow zeros to be trimmed
 5717              		.loc 1 2033 4 is_stmt 1 view .LVU1801
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/ccSEf3H9.s 			page 191


 5718              		.loc 1 2035 6 view .LVU1802
2036:src/display.c **** 	    dd = *display_digits - 1;
 5719              		.loc 1 2036 4 view .LVU1803
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5720              		.loc 1 2035 16 is_stmt 0 view .LVU1804
 5721 03ac 0493     		str	r3, [sp, #16]
 5722 03ae 73E6     		b	.L591
 5723              	.LVL615:
 5724              	.L698:
2035:src/display.c **** 	  if (orig_mode == MODE_STD)
 5725              		.loc 1 2035 16 view .LVU1805
 5726              	.LBE435:
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5727              		.loc 1 2115 7 view .LVU1806
 5728 03b0 4846     		mov	r0, r9
 5729              	.LVL616:
2116:src/display.c **** 	    mantissa[0] = '1';
 5730              		.loc 1 2116 41 view .LVU1807
 5731 03b2 4FF03008 		mov	r8, #48
 5732              	.L517:
 5733              	.LVL617:
2116:src/display.c **** 	    mantissa[0] = '1';
 5734              		.loc 1 2116 47 is_stmt 1 discriminator 3 view .LVU1808
2116:src/display.c **** 	    mantissa[0] = '1';
 5735              		.loc 1 2116 36 discriminator 3 view .LVU1809
2116:src/display.c **** 	    mantissa[0] = '1';
 5736              		.loc 1 2116 41 is_stmt 0 discriminator 3 view .LVU1810
 5737 03b6 00F8018B 		strb	r8, [r0], #1
 5738              	.LVL618:
2116:src/display.c **** 	    mantissa[0] = '1';
 5739              		.loc 1 2116 25 is_stmt 1 discriminator 3 view .LVU1811
2116:src/display.c **** 	    mantissa[0] = '1';
 5740              		.loc 1 2116 6 is_stmt 0 discriminator 3 view .LVU1812
 5741 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5742 03be BCF1390F 		cmp	ip, #57
 5743 03c2 F8D0     		beq	.L517
 5744              	.LVL619:
 5745              	.L590:
2117:src/display.c **** 	    exp++;
 5746              		.loc 1 2117 6 is_stmt 1 view .LVU1813
2117:src/display.c **** 	    exp++;
 5747              		.loc 1 2117 18 is_stmt 0 view .LVU1814
 5748 03c4 3120     		movs	r0, #49
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5749              		.loc 1 2119 9 view .LVU1815
 5750 03c6 012D     		cmp	r5, #1
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5751              		.loc 1 2118 9 view .LVU1816
 5752 03c8 06F10106 		add	r6, r6, #1
 5753              	.LVL620:
2117:src/display.c **** 	    exp++;
 5754              		.loc 1 2117 18 view .LVU1817
 5755 03cc 8DF85800 		strb	r0, [sp, #88]
2118:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5756              		.loc 1 2118 6 is_stmt 1 view .LVU1818
 5757              	.LVL621:
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccSEf3H9.s 			page 192


 5758              		.loc 1 2119 6 view .LVU1819
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5759              		.loc 1 2119 9 is_stmt 0 view .LVU1820
 5760 03d0 7FF4F5AE 		bne	.L686
2119:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5761              		.loc 1 2119 27 discriminator 1 view .LVU1821
 5762 03d4 0298     		ldr	r0, [sp, #8]
 5763 03d6 8642     		cmp	r6, r0
 5764 03d8 C0F2DE80 		blt	.L519
2120:src/display.c **** 	      extra_digits = 0;
 5765              		.loc 1 2120 8 is_stmt 1 view .LVU1822
2120:src/display.c **** 	      extra_digits = 0;
 5766              		.loc 1 2120 28 is_stmt 0 view .LVU1823
 5767 03dc C04B     		ldr	r3, .L713
 5768              	.LVL622:
2120:src/display.c **** 	      extra_digits = 0;
 5769              		.loc 1 2120 28 view .LVU1824
 5770 03de 1B68     		ldr	r3, [r3]
 5771 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2120:src/display.c **** 	      extra_digits = 0;
 5772              		.loc 1 2120 37 view .LVU1825
 5773 03e4 D906     		lsls	r1, r3, #27
 5774              	.LVL623:
2120:src/display.c **** 	      extra_digits = 0;
 5775              		.loc 1 2120 37 view .LVU1826
 5776 03e6 40F1E582 		bpl	.L706
 5777              	.LVL624:
2131:src/display.c **** 
 5778              		.loc 1 2131 2 is_stmt 1 view .LVU1827
 5779 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 5780              		.loc 1 2131 9 is_stmt 0 view .LVU1828
 5781 03ee 09EB0E03 		add	r3, r9, lr
 5782              	.LVL625:
2131:src/display.c **** 
 5783              		.loc 1 2131 45 is_stmt 1 view .LVU1829
2120:src/display.c **** 	      extra_digits = 0;
 5784              		.loc 1 2120 37 is_stmt 0 view .LVU1830
 5785 03f2 0325     		movs	r5, #3
2131:src/display.c **** 
 5786              		.loc 1 2131 2 view .LVU1831
 5787 03f4 0029     		cmp	r1, #0
 5788 03f6 7FF4E5AE 		bne	.L588
 5789              	.LVL626:
 5790              	.L525:
2233:src/display.c **** 	  case -1:
 5791              		.loc 1 2233 4 is_stmt 1 view .LVU1832
2233:src/display.c **** 	  case -1:
 5792              		.loc 1 2233 16 is_stmt 0 view .LVU1833
 5793 03fa BA4B     		ldr	r3, .L713+4
 5794 03fc 83FB0613 		smull	r1, r3, r3, r6
 5795 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5796 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5797 0408 F31A     		subs	r3, r6, r3
 5798 040a 0233     		adds	r3, r3, #2
 5799 040c 042B     		cmp	r3, #4
 5800 040e 4FD8     		bhi	.L560
ARM GAS  /tmp/ccSEf3H9.s 			page 193


 5801 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5802              	.L562:
 5803 0414 2C02     		.2byte	(.L563-.L562)/2
 5804 0416 1A02     		.2byte	(.L561-.L562)/2
 5805 0418 4E00     		.2byte	(.L560-.L562)/2
 5806 041a 2C02     		.2byte	(.L563-.L562)/2
 5807 041c 1A02     		.2byte	(.L561-.L562)/2
 5808              	.LVL627:
 5809              		.p2align 1
 5810              	.L531:
2142:src/display.c **** 	    case -1:
 5811              		.loc 1 2142 6 is_stmt 1 view .LVU1834
2142:src/display.c **** 	    case -1:
 5812              		.loc 1 2142 32 is_stmt 0 view .LVU1835
 5813 041e B048     		ldr	r0, .L713
2142:src/display.c **** 	    case -1:
 5814              		.loc 1 2142 19 view .LVU1836
 5815 0420 B049     		ldr	r1, .L713+4
2142:src/display.c **** 	    case -1:
 5816              		.loc 1 2142 32 view .LVU1837
 5817 0422 0068     		ldr	r0, [r0]
2142:src/display.c **** 	    case -1:
 5818              		.loc 1 2142 19 view .LVU1838
 5819 0424 81FB0651 		smull	r5, r1, r1, r6
2142:src/display.c **** 	    case -1:
 5820              		.loc 1 2142 32 view .LVU1839
 5821 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2142:src/display.c **** 	    case -1:
 5822              		.loc 1 2142 19 view .LVU1840
 5823 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5824 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5825 0434 711A     		subs	r1, r6, r1
2142:src/display.c **** 	    case -1:
 5826              		.loc 1 2142 32 view .LVU1841
 5827 0436 C0F30010 		ubfx	r0, r0, #4, #1
2142:src/display.c **** 	    case -1:
 5828              		.loc 1 2142 24 view .LVU1842
 5829 043a 01FB00F1 		mul	r1, r1, r0
 5830 043e 0231     		adds	r1, r1, #2
 5831 0440 0429     		cmp	r1, #4
 5832 0442 00F27182 		bhi	.L605
 5833 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5834              	.L535:
 5835 044a 4B02     		.2byte	(.L536-.L535)/2
 5836 044c 2002     		.2byte	(.L534-.L535)/2
 5837 044e 6F02     		.2byte	(.L605-.L535)/2
 5838 0450 4B02     		.2byte	(.L536-.L535)/2
 5839 0452 2002     		.2byte	(.L534-.L535)/2
 5840              	.LVL628:
 5841              		.p2align 1
 5842              	.L505:
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5843              		.loc 1 2098 4 is_stmt 1 view .LVU1843
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5844              		.loc 1 2098 7 is_stmt 0 view .LVU1844
 5845 0454 B342     		cmp	r3, r6
 5846 0456 03DD     		ble	.L508
ARM GAS  /tmp/ccSEf3H9.s 			page 194


2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5847              		.loc 1 2098 45 discriminator 1 view .LVU1845
 5848 0458 5342     		rsbs	r3, r2, #0
2098:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5849              		.loc 1 2098 36 discriminator 1 view .LVU1846
 5850 045a B342     		cmp	r3, r6
 5851 045c 40F30A82 		ble	.L509
 5852              	.L508:
2099:src/display.c **** 	  else {
 5853              		.loc 1 2099 6 is_stmt 1 view .LVU1847
2099:src/display.c **** 	  else {
 5854              		.loc 1 2099 26 is_stmt 0 view .LVU1848
 5855 0460 9F4B     		ldr	r3, .L713
 5856 0462 1B68     		ldr	r3, [r3]
 5857 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2099:src/display.c **** 	  else {
 5858              		.loc 1 2099 35 view .LVU1849
 5859 0468 13F0100F 		tst	r3, #16
 5860 046c 14BF     		ite	ne
 5861 046e 0325     		movne	r5, #3
 5862              	.LVL629:
2099:src/display.c **** 	  else {
 5863              		.loc 1 2099 35 view .LVU1850
 5864 0470 0225     		moveq	r5, #2
 5865 0472 75E6     		b	.L687
 5866              	.LVL630:
 5867              	.L696:
2099:src/display.c **** 	  else {
 5868              		.loc 1 2099 35 view .LVU1851
 5869 0474 013E     		subs	r6, r6, #1
 5870 0476 08EB0602 		add	r2, r8, r6
 5871              	.L498:
2078:src/display.c **** 	    exp--;
 5872              		.loc 1 2078 4 is_stmt 1 discriminator 1 view .LVU1852
2079:src/display.c **** 	  while (*++q == '0');
 5873              		.loc 1 2079 6 discriminator 1 view .LVU1853
 5874 047a A2EB0806 		sub	r6, r2, r8
 5875              	.LVL631:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5876              		.loc 1 2080 10 discriminator 1 view .LVU1854
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5877              		.loc 1 2080 11 is_stmt 0 discriminator 1 view .LVU1855
 5878 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5879              	.LVL632:
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5880              		.loc 1 2080 4 discriminator 1 view .LVU1856
 5881 0482 302B     		cmp	r3, #48
 5882 0484 F9D0     		beq	.L498
2081:src/display.c **** 	    *p++ = *q++;
 5883              		.loc 1 2081 10 is_stmt 1 view .LVU1857
 5884 0486 A3F13002 		sub	r2, r3, #48
 5885 048a 092A     		cmp	r2, #9
 5886 048c 3FF661AE 		bhi	.L499
1944:src/display.c **** 	char *r;
 5887              		.loc 1 1944 8 is_stmt 0 view .LVU1858
 5888 0490 4A46     		mov	r2, r9
 5889              	.LVL633:
ARM GAS  /tmp/ccSEf3H9.s 			page 195


 5890              	.L500:
2082:src/display.c **** 	} else {
 5891              		.loc 1 2082 6 is_stmt 1 view .LVU1859
2082:src/display.c **** 	} else {
 5892              		.loc 1 2082 11 is_stmt 0 view .LVU1860
 5893 0492 02F8013B 		strb	r3, [r2], #1
 5894              	.LVL634:
2081:src/display.c **** 	    *p++ = *q++;
 5895              		.loc 1 2081 10 is_stmt 1 view .LVU1861
2081:src/display.c **** 	    *p++ = *q++;
 5896              		.loc 1 2081 11 is_stmt 0 view .LVU1862
 5897 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2081:src/display.c **** 	    *p++ = *q++;
 5898              		.loc 1 2081 10 view .LVU1863
 5899 049a A3F13001 		sub	r1, r3, #48
 5900 049e 0929     		cmp	r1, #9
 5901 04a0 F7D9     		bls	.L500
 5902 04a2 56E6     		b	.L499
 5903              	.LVL635:
 5904              	.L694:
2072:src/display.c **** 	  q++;
 5905              		.loc 1 2072 4 is_stmt 1 view .LVU1864
2073:src/display.c **** 	} else if (*q == '+')
 5906              		.loc 1 2073 4 view .LVU1865
2072:src/display.c **** 	  q++;
 5907              		.loc 1 2072 13 is_stmt 0 view .LVU1866
 5908 04a4 0122     		movs	r2, #1
 5909 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5910 04aa 0392     		str	r2, [sp, #12]
2073:src/display.c **** 	} else if (*q == '+')
 5911              		.loc 1 2073 5 view .LVU1867
 5912 04ac 9044     		add	r8, r8, r2
 5913              	.LVL636:
2073:src/display.c **** 	} else if (*q == '+')
 5914              		.loc 1 2073 5 view .LVU1868
 5915 04ae 23E6     		b	.L494
 5916              	.LVL637:
 5917              	.L560:
2073:src/display.c **** 	} else if (*q == '+')
 5918              		.loc 1 2073 5 view .LVU1869
 5919 04b0 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 5920              		.loc 1 2233 16 view .LVU1870
 5921 04b2 0125     		movs	r5, #1
1938:src/display.c **** 	int odig = 0;
 5922              		.loc 1 1938 15 view .LVU1871
 5923 04b4 5946     		mov	r1, fp
 5924              	.LVL638:
 5925              	.L528:
2247:src/display.c **** 	  };
 5926              		.loc 1 2247 6 is_stmt 1 view .LVU1872
2248:src/display.c **** 	  // Falling through
 5927              		.loc 1 2248 5 view .LVU1873
2252:src/display.c **** 	  odig++;
 5928              		.loc 1 2252 4 view .LVU1874
2252:src/display.c **** 	  odig++;
 5929              		.loc 1 2252 15 is_stmt 0 view .LVU1875
ARM GAS  /tmp/ccSEf3H9.s 			page 196


 5930 04b6 4B46     		mov	r3, r9
 5931              	.LVL639:
2252:src/display.c **** 	  odig++;
 5932              		.loc 1 2252 11 view .LVU1876
 5933 04b8 8846     		mov	r8, r1
 5934 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5935              	.LVL640:
2252:src/display.c **** 	  odig++;
 5936              		.loc 1 2252 11 view .LVU1877
 5937 04be 08F8020B 		strb	r0, [r8], #2
2253:src/display.c **** 	  *obp++ = '.';
 5938              		.loc 1 2253 4 is_stmt 1 view .LVU1878
2254:src/display.c **** 	  dd--;
 5939              		.loc 1 2254 4 view .LVU1879
 5940              	.LVL641:
2254:src/display.c **** 	  dd--;
 5941              		.loc 1 2254 11 is_stmt 0 view .LVU1880
 5942 04c2 4FF02E0C 		mov	ip, #46
2256:src/display.c **** 	    *obp++ = *p++;
 5943              		.loc 1 2256 13 view .LVU1881
 5944 04c6 901E     		subs	r0, r2, #2
2256:src/display.c **** 	    *obp++ = *p++;
 5945              		.loc 1 2256 10 view .LVU1882
 5946 04c8 002A     		cmp	r2, #0
2254:src/display.c **** 	  dd--;
 5947              		.loc 1 2254 11 view .LVU1883
 5948 04ca 81F801C0 		strb	ip, [r1, #1]
2255:src/display.c **** 	  while (dd-- >= 0) {
 5949              		.loc 1 2255 4 is_stmt 1 view .LVU1884
2256:src/display.c **** 	    *obp++ = *p++;
 5950              		.loc 1 2256 4 view .LVU1885
2256:src/display.c **** 	    *obp++ = *p++;
 5951              		.loc 1 2256 10 view .LVU1886
2256:src/display.c **** 	    *obp++ = *p++;
 5952              		.loc 1 2256 13 is_stmt 0 view .LVU1887
 5953 04ce 0790     		str	r0, [sp, #28]
2256:src/display.c **** 	    *obp++ = *p++;
 5954              		.loc 1 2256 10 view .LVU1888
 5955 04d0 40F32D82 		ble	.L606
2256:src/display.c **** 	    *obp++ = *p++;
 5956              		.loc 1 2256 10 view .LVU1889
 5957 04d4 501C     		adds	r0, r2, #1
 5958 04d6 0131     		adds	r1, r1, #1
 5959 04d8 8144     		add	r9, r9, r0
 5960              	.LVL642:
 5961              	.L566:
2257:src/display.c **** 	    odig++;
 5962              		.loc 1 2257 6 is_stmt 1 view .LVU1890
2257:src/display.c **** 	    odig++;
 5963              		.loc 1 2257 13 is_stmt 0 view .LVU1891
 5964 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5965              	.LVL643:
2257:src/display.c **** 	    odig++;
 5966              		.loc 1 2257 13 view .LVU1892
 5967 04de 01F8010F 		strb	r0, [r1, #1]!
2258:src/display.c **** 	  }
 5968              		.loc 1 2258 6 is_stmt 1 view .LVU1893
ARM GAS  /tmp/ccSEf3H9.s 			page 197


2256:src/display.c **** 	    *obp++ = *p++;
 5969              		.loc 1 2256 10 view .LVU1894
 5970 04e2 4B45     		cmp	r3, r9
 5971 04e4 F9D1     		bne	.L566
 5972 04e6 6FF00103 		mvn	r3, #1
 5973              	.LVL644:
2256:src/display.c **** 	    *obp++ = *p++;
 5974              		.loc 1 2256 10 is_stmt 0 view .LVU1895
 5975 04ea 9044     		add	r8, r8, r2
 5976 04ec 1544     		add	r5, r5, r2
 5977 04ee 0793     		str	r3, [sp, #28]
2260:src/display.c **** 	}
 5978              		.loc 1 2260 13 view .LVU1896
 5979 04f0 4FF0010A 		mov	r10, #1
 5980              	.L538:
 5981              	.LVL645:
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5982              		.loc 1 2263 2 is_stmt 1 view .LVU1897
2263:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5983              		.loc 1 2263 5 is_stmt 0 view .LVU1898
 5984 04f4 049B     		ldr	r3, [sp, #16]
 5985 04f6 002B     		cmp	r3, #0
 5986 04f8 3FF4C9AE 		beq	.L567
2264:src/display.c **** 	    obp--;
 5987              		.loc 1 2264 10 is_stmt 1 view .LVU1899
 5988 04fc D845     		cmp	r8, fp
 5989 04fe 7FF6C6AE 		bls	.L567
 5990 0502 4346     		mov	r3, r8
 5991 0504 04E0     		b	.L568
 5992              	.LVL646:
 5993              	.L569:
2264:src/display.c **** 	    obp--;
 5994              		.loc 1 2264 10 is_stmt 0 view .LVU1900
 5995 0506 9B45     		cmp	fp, r3
2266:src/display.c **** 	  }
 5996              		.loc 1 2266 10 view .LVU1901
 5997 0508 05F1FF35 		add	r5, r5, #-1
 5998              	.LVL647:
2264:src/display.c **** 	    obp--;
 5999              		.loc 1 2264 10 is_stmt 1 view .LVU1902
 6000 050c 3FF4BEAE 		beq	.L608
 6001              	.LVL648:
 6002              	.L568:
2265:src/display.c **** 	    odig--;
 6003              		.loc 1 2265 6 discriminator 1 view .LVU1903
 6004 0510 9846     		mov	r8, r3
 6005              	.LVL649:
2265:src/display.c **** 	    odig--;
 6006              		.loc 1 2265 6 is_stmt 0 discriminator 1 view .LVU1904
 6007 0512 013B     		subs	r3, r3, #1
 6008              	.LVL650:
2266:src/display.c **** 	  }
 6009              		.loc 1 2266 6 is_stmt 1 discriminator 1 view .LVU1905
2264:src/display.c **** 	    obp--;
 6010              		.loc 1 2264 19 is_stmt 0 discriminator 1 view .LVU1906
 6011 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6012 0518 302A     		cmp	r2, #48
ARM GAS  /tmp/ccSEf3H9.s 			page 198


 6013 051a F4D0     		beq	.L569
2264:src/display.c **** 	    obp--;
 6014              		.loc 1 2264 19 discriminator 1 view .LVU1907
 6015 051c B7E6     		b	.L567
 6016              	.LVL651:
 6017              	.L700:
2292:src/display.c **** 	  } else if (c == ',') {
 6018              		.loc 1 2292 6 is_stmt 1 view .LVU1908
2292:src/display.c **** 	  } else if (c == ',') {
 6019              		.loc 1 2292 12 is_stmt 0 view .LVU1909
 6020 051e 2246     		mov	r2, r4
 6021              	.LVL652:
2292:src/display.c **** 	  } else if (c == ',') {
 6022              		.loc 1 2292 12 view .LVU1910
 6023 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6024 0524 A7F10900 		sub	r0, r7, #9
 6025 0528 FFF7FEFF 		bl	set_decimal
 6026              	.LVL653:
 6027 052c 0446     		mov	r4, r0
 6028              	.LVL654:
 6029              	.L578:
2290:src/display.c **** 	  if (c == '.') {
 6030              		.loc 1 2290 53 is_stmt 1 view .LVU1911
2290:src/display.c **** 	  if (c == '.') {
 6031              		.loc 1 2290 12 view .LVU1912
2290:src/display.c **** 	  if (c == '.') {
 6032              		.loc 1 2290 18 is_stmt 0 view .LVU1913
 6033 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6034              	.LVL655:
2290:src/display.c **** 	  if (c == '.') {
 6035              		.loc 1 2290 2 view .LVU1914
 6036 0532 002A     		cmp	r2, #0
 6037 0534 7FF4D0AE 		bne	.L584
2310:src/display.c **** 	  set_exp(exp, 0, res);
 6038              		.loc 1 2310 2 is_stmt 1 view .LVU1915
2310:src/display.c **** 	  set_exp(exp, 0, res);
 6039              		.loc 1 2310 5 is_stmt 0 view .LVU1916
 6040 0538 BAF1000F 		cmp	r10, #0
 6041 053c 3FF4E1AE 		beq	.L585
 6042              	.LVL656:
 6043              	.L702:
2311:src/display.c **** #endif
 6044              		.loc 1 2311 4 is_stmt 1 view .LVU1917
 6045 0540 3046     		mov	r0, r6
 6046 0542 2246     		mov	r2, r4
 6047              	.LVL657:
2311:src/display.c **** #endif
 6048              		.loc 1 2311 4 is_stmt 0 view .LVU1918
 6049 0544 0021     		movs	r1, #0
 6050 0546 FFF7FEFF 		bl	set_exp
 6051              	.LVL658:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6052              		.loc 1 2313 2 is_stmt 1 view .LVU1919
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6053              		.loc 1 2313 5 is_stmt 0 view .LVU1920
 6054 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6055 054e 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccSEf3H9.s 			page 199


 6056 0550 7FF4DCAE 		bne	.L586
 6057              	.L703:
2313:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6058              		.loc 1 2313 21 discriminator 1 view .LVU1921
 6059 0554 002C     		cmp	r4, #0
 6060 0556 7FF4D9AE 		bne	.L586
2314:src/display.c **** 	*display_digits = odig;
 6061              		.loc 1 2314 4 is_stmt 1 view .LVU1922
2314:src/display.c **** 	*display_digits = odig;
 6062              		.loc 1 2314 33 is_stmt 0 view .LVU1923
 6063 055a 019B     		ldr	r3, [sp, #4]
 6064 055c 1868     		ldr	r0, [r3]
2314:src/display.c **** 	*display_digits = odig;
 6065              		.loc 1 2314 4 view .LVU1924
 6066 055e 624B     		ldr	r3, .L713+8
2314:src/display.c **** 	*display_digits = odig;
 6067              		.loc 1 2314 33 view .LVU1925
 6068 0560 0138     		subs	r0, r0, #1
2314:src/display.c **** 	*display_digits = odig;
 6069              		.loc 1 2314 4 view .LVU1926
 6070 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6071 0564 2246     		mov	r2, r4
 6072 0566 00EBC000 		add	r0, r0, r0, lsl #3
 6073 056a FFF7FEFF 		bl	set_decimal
 6074              	.LVL659:
 6075 056e CDE6     		b	.L586
 6076              	.LVL660:
 6077              	.L701:
2294:src/display.c **** 	  } else {
 6078              		.loc 1 2294 6 is_stmt 1 view .LVU1927
2294:src/display.c **** 	  } else {
 6079              		.loc 1 2294 12 is_stmt 0 view .LVU1928
 6080 0570 5E4B     		ldr	r3, .L713+12
 6081 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6082              	.LVL661:
 6083              	.LBB436:
 6084              	.LBI436:
 367:src/display.c ****   if (sep == SEP_NONE)
 6085              		.loc 1 367 14 is_stmt 1 view .LVU1929
 6086              	.LBB437:
 368:src/display.c ****     return res;
 6087              		.loc 1 368 3 view .LVU1930
 368:src/display.c ****     return res;
 6088              		.loc 1 368 6 is_stmt 0 view .LVU1931
 6089 0574 0029     		cmp	r1, #0
 6090 0576 DAD0     		beq	.L578
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6091              		.loc 1 370 3 is_stmt 1 view .LVU1932
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6092              		.loc 1 370 6 is_stmt 0 view .LVU1933
 6093 0578 002C     		cmp	r4, #0
 6094 057a 00F0DB81 		beq	.L580
 371:src/display.c ****     else *res++ = '.';
 6095              		.loc 1 371 5 is_stmt 1 view .LVU1934
 371:src/display.c ****     else *res++ = '.';
 6096              		.loc 1 371 8 is_stmt 0 view .LVU1935
 6097 057e 0129     		cmp	r1, #1
ARM GAS  /tmp/ccSEf3H9.s 			page 200


 371:src/display.c ****     else *res++ = '.';
 6098              		.loc 1 371 27 is_stmt 1 view .LVU1936
 6099              	.LVL662:
 372:src/display.c ****   } else {
 6100              		.loc 1 372 17 is_stmt 0 view .LVU1937
 6101 0580 16BF     		itet	ne
 6102 0582 2E23     		movne	r3, #46
 371:src/display.c ****     else *res++ = '.';
 6103              		.loc 1 371 34 view .LVU1938
 6104 0584 04F8012B 		strbeq	r2, [r4], #1
 6105              	.LVL663:
 372:src/display.c ****   } else {
 6106              		.loc 1 372 10 is_stmt 1 view .LVU1939
 372:src/display.c ****   } else {
 6107              		.loc 1 372 17 is_stmt 0 view .LVU1940
 6108 0588 04F8013B 		strbne	r3, [r4], #1
 6109              	.LVL664:
 372:src/display.c ****   } else {
 6110              		.loc 1 372 17 view .LVU1941
 6111 058c CFE7     		b	.L578
 6112              	.LVL665:
 6113              	.L582:
 372:src/display.c ****   } else {
 6114              		.loc 1 372 17 view .LVU1942
 6115              	.LBE437:
 6116              	.LBE436:
 6117              	.LBB439:
 6118              	.LBB434:
 409:src/display.c ****   return res;
 6119              		.loc 1 409 8 is_stmt 1 view .LVU1943
 6120 058e 1146     		mov	r1, r2
 6121 0590 3846     		mov	r0, r7
 6122 0592 FFF7FEFF 		bl	set_dig
 6123              	.LVL666:
 409:src/display.c ****   return res;
 6124              		.loc 1 409 8 is_stmt 0 view .LVU1944
 6125 0596 AAE6     		b	.L583
 6126              	.LVL667:
 6127              	.L519:
 409:src/display.c ****   return res;
 6128              		.loc 1 409 8 view .LVU1945
 6129              	.LBE434:
 6130              	.LBE439:
2131:src/display.c **** 
 6131              		.loc 1 2131 2 is_stmt 1 view .LVU1946
2131:src/display.c **** 
 6132              		.loc 1 2131 45 view .LVU1947
2131:src/display.c **** 
 6133              		.loc 1 2131 2 is_stmt 0 view .LVU1948
 6134 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6135 059c 0029     		cmp	r1, #0
 6136 059e 7FF411AE 		bne	.L588
 6137              	.LVL668:
 6138              	.L526:
2196:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6139              		.loc 1 2196 4 is_stmt 1 view .LVU1949
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
ARM GAS  /tmp/ccSEf3H9.s 			page 201


 6140              		.loc 1 2197 4 view .LVU1950
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6141              		.loc 1 2197 7 is_stmt 0 view .LVU1951
 6142 05a2 002E     		cmp	r6, #0
 6143 05a4 C0F22181 		blt	.L549
2197:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6144              		.loc 1 2197 7 view .LVU1952
 6145 05a8 731C     		adds	r3, r6, #1
2199:src/display.c **** 		*obp++ = ',';
 6146              		.loc 1 2199 31 view .LVU1953
 6147 05aa DFF838E1 		ldr	lr, .L713+4
 6148 05ae 0593     		str	r3, [sp, #20]
 6149 05b0 09EB030C 		add	ip, r9, r3
2133:src/display.c **** 	switch (mode) {
 6150              		.loc 1 2133 4 view .LVU1954
 6151 05b4 4D46     		mov	r5, r9
1938:src/display.c **** 	int odig = 0;
 6152              		.loc 1 1938 15 view .LVU1955
 6153 05b6 5846     		mov	r0, fp
 6154 05b8 05E0     		b	.L550
 6155              	.LVL669:
 6156              	.L553:
2200:src/display.c **** 	      *obp++ = *p++;
 6157              		.loc 1 2200 3 is_stmt 1 view .LVU1956
2199:src/display.c **** 		*obp++ = ',';
 6158              		.loc 1 2199 18 is_stmt 0 view .LVU1957
 6159 05ba 0229     		cmp	r1, #2
2200:src/display.c **** 	      *obp++ = *p++;
 6160              		.loc 1 2200 10 view .LVU1958
 6161 05bc 05BF     		ittet	eq
 6162 05be 2C23     		moveq	r3, #44
 6163 05c0 4370     		strbeq	r3, [r0, #1]
2201:src/display.c **** 	      odig++;
 6164              		.loc 1 2201 12 view .LVU1959
 6165 05c2 0130     		addne	r0, r0, #1
 6166              	.LVL670:
2200:src/display.c **** 	      *obp++ = *p++;
 6167              		.loc 1 2200 7 view .LVU1960
 6168 05c4 0230     		addeq	r0, r0, #2
 6169              	.LVL671:
 6170              	.L550:
2201:src/display.c **** 	      odig++;
 6171              		.loc 1 2201 8 is_stmt 1 discriminator 2 view .LVU1961
2201:src/display.c **** 	      odig++;
 6172              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1962
 6173 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6174              	.LVL672:
2199:src/display.c **** 		*obp++ = ',';
 6175              		.loc 1 2199 8 is_stmt 1 discriminator 2 view .LVU1963
2201:src/display.c **** 	      odig++;
 6176              		.loc 1 2201 15 is_stmt 0 discriminator 2 view .LVU1964
 6177 05ca 0370     		strb	r3, [r0]
2202:src/display.c **** 	    }
 6178              		.loc 1 2202 8 is_stmt 1 discriminator 2 view .LVU1965
 6179              	.LVL673:
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6180              		.loc 1 2198 24 discriminator 2 view .LVU1966
ARM GAS  /tmp/ccSEf3H9.s 			page 202


2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6181              		.loc 1 2198 16 discriminator 2 view .LVU1967
2199:src/display.c **** 		*obp++ = ',';
 6182              		.loc 1 2199 31 is_stmt 0 discriminator 2 view .LVU1968
 6183 05cc A9EB0503 		sub	r3, r9, r5
 6184 05d0 3344     		add	r3, r3, r6
 6185 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6186 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6187 05da 01EB4101 		add	r1, r1, r1, lsl #1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6188              		.loc 1 2198 6 discriminator 2 view .LVU1969
 6189 05de AC45     		cmp	ip, r5
2199:src/display.c **** 		*obp++ = ',';
 6190              		.loc 1 2199 31 discriminator 2 view .LVU1970
 6191 05e0 A3EB0101 		sub	r1, r3, r1
2198:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6192              		.loc 1 2198 6 discriminator 2 view .LVU1971
 6193 05e4 E9D1     		bne	.L553
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6194              		.loc 1 2204 13 view .LVU1972
 6195 05e6 2E23     		movs	r3, #46
2205:src/display.c **** 	      *obp++ = *p++;
 6196              		.loc 1 2205 6 view .LVU1973
 6197 05e8 002A     		cmp	r2, #0
 6198 05ea 059D     		ldr	r5, [sp, #20]
 6199              	.LVL674:
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6200              		.loc 1 2204 6 is_stmt 1 view .LVU1974
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6201              		.loc 1 2204 13 is_stmt 0 view .LVU1975
 6202 05ec 4370     		strb	r3, [r0, #1]
2204:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6203              		.loc 1 2204 10 view .LVU1976
 6204 05ee 00F10208 		add	r8, r0, #2
 6205              	.LVL675:
2205:src/display.c **** 	      *obp++ = *p++;
 6206              		.loc 1 2205 6 is_stmt 1 view .LVU1977
2205:src/display.c **** 	      *obp++ = *p++;
 6207              		.loc 1 2205 16 view .LVU1978
2205:src/display.c **** 	      *obp++ = *p++;
 6208              		.loc 1 2205 6 is_stmt 0 view .LVU1979
 6209 05f2 7FF77FAF 		ble	.L538
 6210 05f6 0130     		adds	r0, r0, #1
 6211 05f8 0CEB0201 		add	r1, ip, r2
 6212              	.LVL676:
 6213              	.L554:
2206:src/display.c **** 	      odig++;
 6214              		.loc 1 2206 8 is_stmt 1 discriminator 4 view .LVU1980
2206:src/display.c **** 	      odig++;
 6215              		.loc 1 2206 15 is_stmt 0 discriminator 4 view .LVU1981
 6216 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6217              	.LVL677:
2206:src/display.c **** 	      odig++;
 6218              		.loc 1 2206 15 discriminator 4 view .LVU1982
 6219 0600 00F8013F 		strb	r3, [r0, #1]!
2207:src/display.c **** 	    }
 6220              		.loc 1 2207 8 is_stmt 1 discriminator 4 view .LVU1983
ARM GAS  /tmp/ccSEf3H9.s 			page 203


2205:src/display.c **** 	      *obp++ = *p++;
 6221              		.loc 1 2205 43 discriminator 4 view .LVU1984
2205:src/display.c **** 	      *obp++ = *p++;
 6222              		.loc 1 2205 16 discriminator 4 view .LVU1985
2205:src/display.c **** 	      *obp++ = *p++;
 6223              		.loc 1 2205 6 is_stmt 0 discriminator 4 view .LVU1986
 6224 0604 8C45     		cmp	ip, r1
 6225 0606 F9D1     		bne	.L554
 6226 0608 059B     		ldr	r3, [sp, #20]
 6227 060a 1344     		add	r3, r3, r2
 6228 060c 9044     		add	r8, r8, r2
 6229              	.LVL678:
2205:src/display.c **** 	      *obp++ = *p++;
 6230              		.loc 1 2205 6 discriminator 4 view .LVU1987
 6231 060e 1D46     		mov	r5, r3
 6232 0610 70E7     		b	.L538
 6233              	.LVL679:
 6234              	.L688:
2001:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6235              		.loc 1 2001 4 is_stmt 1 view .LVU1988
 6236 0612 374A     		ldr	r2, .L713+16
 6237 0614 3946     		mov	r1, r7
 6238 0616 3846     		mov	r0, r7
 6239 0618 FFF7FEFF 		bl	decNumberNormalize
 6240              	.LVL680:
2002:src/display.c **** 	  z->exponent = 0;
 6241              		.loc 1 2002 4 view .LVU1989
2002:src/display.c **** 	  z->exponent = 0;
 6242              		.loc 1 2002 22 is_stmt 0 view .LVU1990
 6243 061c D7E90023 		ldrd	r2, r3, [r7]
 6244 0620 03EB0208 		add	r8, r3, r2
2003:src/display.c **** 	}
 6245              		.loc 1 2003 16 view .LVU1991
 6246 0624 C7F804A0 		str	r10, [r7, #4]
2002:src/display.c **** 	  z->exponent = 0;
 6247              		.loc 1 2002 8 view .LVU1992
 6248 0628 08F1FF38 		add	r8, r8, #-1
 6249              	.LVL681:
2003:src/display.c **** 	}
 6250              		.loc 1 2003 4 is_stmt 1 view .LVU1993
 6251 062c 06E5     		b	.L469
 6252              	.LVL682:
 6253              	.L697:
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6254              		.loc 1 2091 6 view .LVU1994
2092:src/display.c **** 	      *p++ = *q++;
 6255              		.loc 1 2092 13 is_stmt 0 view .LVU1995
 6256 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6257              		.loc 1 2092 12 view .LVU1996
 6258 0632 A3F13002 		sub	r2, r3, #48
 6259 0636 092A     		cmp	r2, #9
2091:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6260              		.loc 1 2091 7 view .LVU1997
 6261 0638 08F10108 		add	r8, r8, #1
 6262              	.LVL683:
2092:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/ccSEf3H9.s 			page 204


 6263              		.loc 1 2092 6 is_stmt 1 view .LVU1998
2092:src/display.c **** 	      *p++ = *q++;
 6264              		.loc 1 2092 12 view .LVU1999
 6265 063c 3FF689AD 		bhi	.L499
 6266              	.LVL684:
 6267              	.L504:
2093:src/display.c **** 	  }
 6268              		.loc 1 2093 8 view .LVU2000
2093:src/display.c **** 	  }
 6269              		.loc 1 2093 13 is_stmt 0 view .LVU2001
 6270 0640 01F8013B 		strb	r3, [r1], #1
 6271              	.LVL685:
2092:src/display.c **** 	      *p++ = *q++;
 6272              		.loc 1 2092 12 is_stmt 1 view .LVU2002
2092:src/display.c **** 	      *p++ = *q++;
 6273              		.loc 1 2092 13 is_stmt 0 view .LVU2003
 6274 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2092:src/display.c **** 	      *p++ = *q++;
 6275              		.loc 1 2092 12 view .LVU2004
 6276 0648 A3F13002 		sub	r2, r3, #48
 6277 064c 092A     		cmp	r2, #9
 6278 064e F7D9     		bls	.L504
 6279 0650 7FE5     		b	.L499
 6280              	.LVL686:
 6281              	.L695:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6282              		.loc 1 2075 4 is_stmt 1 view .LVU2005
1958:src/display.c **** 	int trimzeros = 0;
 6283              		.loc 1 1958 6 is_stmt 0 view .LVU2006
 6284 0652 0022     		movs	r2, #0
 6285 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6286 0658 0392     		str	r2, [sp, #12]
2075:src/display.c **** 	for (; *q == '0'; q++);
 6287              		.loc 1 2075 5 view .LVU2007
 6288 065a 08F10108 		add	r8, r8, #1
 6289              	.LVL687:
2075:src/display.c **** 	for (; *q == '0'; q++);
 6290              		.loc 1 2075 5 view .LVU2008
 6291 065e 4BE5     		b	.L494
 6292              	.LVL688:
 6293              	.L689:
2009:src/display.c **** 	    x[0] = '-';
 6294              		.loc 1 2009 34 discriminator 1 view .LVU2009
 6295 0660 6B20     		movs	r0, #107
 6296 0662 FFF7FEFF 		bl	get_user_flag
 6297              	.LVL689:
2009:src/display.c **** 	    x[0] = '-';
 6298              		.loc 1 2009 31 discriminator 1 view .LVU2010
 6299 0666 0028     		cmp	r0, #0
 6300 0668 3FF4FAAC 		beq	.L471
2010:src/display.c **** 	    x[1] = '0';
 6301              		.loc 1 2010 6 is_stmt 1 view .LVU2011
2011:src/display.c **** 	  } else
 6302              		.loc 1 2011 6 view .LVU2012
2010:src/display.c **** 	    x[1] = '0';
 6303              		.loc 1 2010 11 is_stmt 0 view .LVU2013
 6304 066c 43F22D03 		movw	r3, #12333
ARM GAS  /tmp/ccSEf3H9.s 			page 205


 6305 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2011:src/display.c **** 	  } else
 6306              		.loc 1 2011 11 view .LVU2014
 6307 0674 F7E4     		b	.L472
 6308              	.LVL690:
 6309              	.L693:
2068:src/display.c **** 	  CLR_MANT_SIGN;
 6310              		.loc 1 2068 4 is_stmt 1 view .LVU2015
 6311              	.LBB440:
 6312              	.LBI440:
 314:src/display.c **** {
 6313              		.loc 1 314 13 view .LVU2016
 6314              	.LBB441:
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6315              		.loc 1 316 3 view .LVU2017
 317:src/display.c **** }
 6316              		.loc 1 317 3 view .LVU2018
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6317              		.loc 1 316 27 is_stmt 0 view .LVU2019
 6318 0676 1F4B     		ldr	r3, .L713+20
 6319 0678 2022     		movs	r2, #32
 317:src/display.c **** }
 6320              		.loc 1 317 3 view .LVU2020
 6321 067a 8220     		movs	r0, #130
 316:src/display.c ****   clr_dot(EXP_SIGN);
 6322              		.loc 1 316 27 view .LVU2021
 6323 067c 1A70     		strb	r2, [r3]
 317:src/display.c **** }
 6324              		.loc 1 317 3 view .LVU2022
 6325 067e FFF7FEFF 		bl	clr_dot
 6326              	.LVL691:
 6327              	.LBE441:
 6328              	.LBE440:
2069:src/display.c **** 	}
 6329              		.loc 1 2069 4 is_stmt 1 view .LVU2023
 6330              	.LBB442:
 6331              	.LBI442:
 302:src/display.c **** {
 6332              		.loc 1 302 13 view .LVU2024
 6333              	.LBB443:
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6334              		.loc 1 304 3 view .LVU2025
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6335              		.loc 1 304 25 is_stmt 0 view .LVU2026
 6336 0682 1D4B     		ldr	r3, .L713+24
 6337 0684 2022     		movs	r2, #32
 305:src/display.c **** }
 6338              		.loc 1 305 3 view .LVU2027
 6339 0686 8120     		movs	r0, #129
 304:src/display.c ****   clr_dot(MANT_SIGN);
 6340              		.loc 1 304 25 view .LVU2028
 6341 0688 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 6342              		.loc 1 305 3 is_stmt 1 view .LVU2029
 6343 068a FFF7FEFF 		bl	clr_dot
 6344              	.LVL692:
 306:src/display.c **** 
ARM GAS  /tmp/ccSEf3H9.s 			page 206


 6345              		.loc 1 306 1 is_stmt 0 view .LVU2030
 6346 068e 29E5     		b	.L492
 6347              	.LVL693:
 6348              	.L699:
 306:src/display.c **** 
 6349              		.loc 1 306 1 view .LVU2031
 6350              	.LBE443:
 6351              	.LBE442:
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6352              		.loc 1 2269 72 discriminator 2 view .LVU2032
 6353 0690 06F2E732 		addw	r2, r6, #999
2269:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6354              		.loc 1 2269 58 discriminator 2 view .LVU2033
 6355 0694 40F2CE73 		movw	r3, #1998
 6356 0698 9A42     		cmp	r2, r3
 6357 069a 7FF6FEAD 		bls	.L570
2270:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6358              		.loc 1 2270 4 is_stmt 1 view .LVU2034
2270:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6359              		.loc 1 2270 20 is_stmt 0 view .LVU2035
 6360 069e 019A     		ldr	r2, [sp, #4]
 6361 06a0 0A23     		movs	r3, #10
2271:src/display.c **** 	  return;
 6362              		.loc 1 2271 4 view .LVU2036
 6363 06a2 2146     		mov	r1, r4
 6364 06a4 3846     		mov	r0, r7
2270:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6365              		.loc 1 2270 20 view .LVU2037
 6366 06a6 1360     		str	r3, [r2]
2271:src/display.c **** 	  return;
 6367              		.loc 1 2271 4 is_stmt 1 view .LVU2038
 6368 06a8 FFF7FEFF 		bl	set_x_dn
 6369              	.LVL694:
2272:src/display.c **** 	}
 6370              		.loc 1 2272 4 view .LVU2039
 6371 06ac 30E6     		b	.L462
 6372              	.LVL695:
 6373              	.L487:
 6374              	.LBB444:
2030:src/display.c **** 
 6375              		.loc 1 2030 4 view .LVU2040
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6376              		.loc 1 2032 4 view .LVU2041
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6377              		.loc 1 2032 11 is_stmt 0 view .LVU2042
 6378 06ae 2A46     		mov	r2, r5
 6379 06b0 07A9     		add	r1, sp, #28
 6380 06b2 3846     		mov	r0, r7
 6381 06b4 FFF7FEFF 		bl	std_round_fix
 6382              	.LVL696:
 6383              	.LBE444:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6384              		.loc 1 1959 6 view .LVU2043
 6385 06b8 0023     		movs	r3, #0
 6386              	.LBB445:
2032:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6387              		.loc 1 2032 11 view .LVU2044
ARM GAS  /tmp/ccSEf3H9.s 			page 207


 6388 06ba 0546     		mov	r5, r0
 6389              	.LVL697:
2033:src/display.c **** 	    // allow zeros to be trimmed
 6390              		.loc 1 2033 4 is_stmt 1 view .LVU2045
 6391              	.LBE445:
1959:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6392              		.loc 1 1959 6 is_stmt 0 view .LVU2046
 6393 06bc 0493     		str	r3, [sp, #16]
 6394 06be EBE4     		b	.L591
 6395              	.LVL698:
 6396              	.L573:
2284:src/display.c **** 	      SET_MANT_SIGN;
 6397              		.loc 1 2284 6 is_stmt 1 view .LVU2047
2284:src/display.c **** 	      SET_MANT_SIGN;
 6398              		.loc 1 2284 9 is_stmt 0 view .LVU2048
 6399 06c0 002F     		cmp	r7, #0
 6400 06c2 40F01181 		bne	.L576
2285:src/display.c **** 	    else
 6401              		.loc 1 2285 8 is_stmt 1 view .LVU2049
 6402              	.LBB446:
 6403              	.LBI446:
 296:src/display.c **** {
 6404              		.loc 1 296 13 view .LVU2050
 6405              	.LBB447:
 298:src/display.c ****   set_dot(MANT_SIGN);
 6406              		.loc 1 298 3 view .LVU2051
 298:src/display.c ****   set_dot(MANT_SIGN);
 6407              		.loc 1 298 25 is_stmt 0 view .LVU2052
 6408 06c6 0C4B     		ldr	r3, .L713+24
 6409 06c8 2D22     		movs	r2, #45
 299:src/display.c **** }
 6410              		.loc 1 299 3 view .LVU2053
 6411 06ca 8120     		movs	r0, #129
 298:src/display.c ****   set_dot(MANT_SIGN);
 6412              		.loc 1 298 25 view .LVU2054
 6413 06cc 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 6414              		.loc 1 299 3 is_stmt 1 view .LVU2055
 6415 06ce FFF7FEFF 		bl	set_dot
 6416              	.LVL699:
 299:src/display.c **** }
 6417              		.loc 1 299 3 is_stmt 0 view .LVU2056
 6418              	.LBE447:
 6419              	.LBE446:
2290:src/display.c **** 	  if (c == '.') {
 6420              		.loc 1 2290 12 is_stmt 1 view .LVU2057
2290:src/display.c **** 	  if (c == '.') {
 6421              		.loc 1 2290 18 is_stmt 0 view .LVU2058
 6422 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6423              	.LVL700:
2290:src/display.c **** 	  if (c == '.') {
 6424              		.loc 1 2290 2 view .LVU2059
 6425 06d6 002A     		cmp	r2, #0
 6426 06d8 7FF4FCAD 		bne	.L575
 6427 06dc 0DE6     		b	.L574
 6428              	.L714:
 6429 06de 00BF     		.align	2
ARM GAS  /tmp/ccSEf3H9.s 			page 208


 6430              	.L713:
 6431 06e0 00000000 		.word	main_ram
 6432 06e4 56555555 		.word	1431655766
 6433 06e8 00000000 		.word	.LANCHOR1
 6434 06ec 00000000 		.word	.LANCHOR0
 6435 06f0 00000000 		.word	Ctx
 6436 06f4 00000000 		.word	LastDisplayedExponent
 6437 06f8 00000000 		.word	LastDisplayedNumber
 6438              	.LVL701:
 6439              	.L690:
2018:src/display.c **** 	  return;
 6440              		.loc 1 2018 4 is_stmt 1 view .LVU2060
 6441              	.LBB448:
 6442              	.LBI448:
1806:src/display.c **** 	const int dbl = is_dblmode();
 6443              		.loc 1 1806 19 view .LVU2061
 6444              	.LBB449:
1807:src/display.c **** 	char *p;
 6445              		.loc 1 1807 2 view .LVU2062
1807:src/display.c **** 	char *p;
 6446              		.loc 1 1807 18 is_stmt 0 view .LVU2063
 6447 06fc FFF7FEFF 		bl	is_dblmode
 6448              	.LVL702:
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6449              		.loc 1 1823 5 view .LVU2064
 6450 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6451 0704 2D2B     		cmp	r3, #45
1807:src/display.c **** 	char *p;
 6452              		.loc 1 1807 18 view .LVU2065
 6453 0706 0446     		mov	r4, r0
 6454              	.LVL703:
1808:src/display.c **** 	int i, j;
 6455              		.loc 1 1808 2 is_stmt 1 view .LVU2066
1809:src/display.c **** 	char *upper_str;
 6456              		.loc 1 1809 2 view .LVU2067
1810:src/display.c **** 	enum separator_modes separator_mode;
 6457              		.loc 1 1810 2 view .LVU2068
1811:src/display.c **** 	char decimal_mark;
 6458              		.loc 1 1811 2 view .LVU2069
1812:src/display.c **** 	char thousands_sep;
 6459              		.loc 1 1812 2 view .LVU2070
1813:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6460              		.loc 1 1813 2 view .LVU2071
1819:src/display.c **** #endif
 6461              		.loc 1 1819 2 view .LVU2072
1821:src/display.c **** 
 6462              		.loc 1 1821 2 view .LVU2073
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6463              		.loc 1 1823 2 view .LVU2074
1823:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6464              		.loc 1 1823 5 is_stmt 0 view .LVU2075
 6465 0708 00F02081 		beq	.L707
1836:src/display.c **** 
 6466              		.loc 1 1836 16 view .LVU2076
 6467 070c 0027     		movs	r7, #0
 6468              	.LVL704:
 6469              	.L474:
ARM GAS  /tmp/ccSEf3H9.s 			page 209


1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6470              		.loc 1 1838 2 is_stmt 1 view .LVU2077
1838:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6471              		.loc 1 1838 6 is_stmt 0 view .LVU2078
 6472 070e 0021     		movs	r1, #0
 6473 0710 5846     		mov	r0, fp
 6474 0712 FFF7FEFF 		bl	find_char
 6475              	.LVL705:
1839:src/display.c **** 
 6476              		.loc 1 1839 2 is_stmt 1 view .LVU2079
1839:src/display.c **** 
 6477              		.loc 1 1839 23 is_stmt 0 view .LVU2080
 6478 0716 A0EB0B02 		sub	r2, r0, fp
1839:src/display.c **** 
 6479              		.loc 1 1839 2 view .LVU2081
 6480 071a C2F12202 		rsb	r2, r2, #34
 6481 071e 3021     		movs	r1, #48
 6482 0720 FFF7FEFF 		bl	xset
 6483              	.LVL706:
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6484              		.loc 1 1841 2 is_stmt 1 view .LVU2082
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6485              		.loc 1 1841 18 is_stmt 0 view .LVU2083
 6486 0724 AC4A     		ldr	r2, .L715
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6487              		.loc 1 1852 6 view .LVU2084
 6488 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1841:src/display.c **** 	  separator_mode = SEP_COMMA;
 6489              		.loc 1 1841 5 view .LVU2085
 6490 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1849:src/display.c **** 	}
 6491              		.loc 1 1849 18 view .LVU2086
 6492 072a 002A     		cmp	r2, #0
 6493 072c 15BF     		itete	ne
 6494 072e 4FF00209 		movne	r9, #2
 6495 0732 2C26     		moveq	r6, #44
 6496 0734 2E26     		movne	r6, #46
 6497              	.LVL707:
1849:src/display.c **** 	}
 6498              		.loc 1 1849 18 view .LVU2087
 6499 0736 2E25     		moveq	r5, #46
 6500              	.LVL708:
1849:src/display.c **** 	}
 6501              		.loc 1 1849 18 view .LVU2088
 6502 0738 18BF     		it	ne
 6503 073a 2C25     		movne	r5, #44
 6504              	.LVL709:
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6505              		.loc 1 1852 2 is_stmt 1 view .LVU2089
1852:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6506              		.loc 1 1852 5 is_stmt 0 view .LVU2090
 6507 073c 13F0380F 		tst	r3, #56
 6508 0740 40F0D880 		bne	.L708
1879:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6509              		.loc 1 1879 4 is_stmt 1 view .LVU2091
 6510              	.LVL710:
1880:src/display.c **** 	  x[1] = decimal_mark;
ARM GAS  /tmp/ccSEf3H9.s 			page 210


 6511              		.loc 1 1880 4 view .LVU2092
 6512 0744 1022     		movs	r2, #16
 6513 0746 0BF10101 		add	r1, fp, #1
 6514 074a 0BF10200 		add	r0, fp, #2
 6515 074e FFF7FEFF 		bl	xcopy
 6516              	.LVL711:
1881:src/display.c **** 	  if (grouping) {
 6517              		.loc 1 1881 4 view .LVU2093
1883:src/display.c **** 	    x[5] = thousands_sep;
 6518              		.loc 1 1883 6 is_stmt 0 view .LVU2094
 6519 0752 0D22     		movs	r2, #13
 6520 0754 0BF10501 		add	r1, fp, #5
 6521 0758 0BF10600 		add	r0, fp, #6
1881:src/display.c **** 	  if (grouping) {
 6522              		.loc 1 1881 9 view .LVU2095
 6523 075c 8BF80150 		strb	r5, [fp, #1]
1882:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6524              		.loc 1 1882 4 is_stmt 1 view .LVU2096
1883:src/display.c **** 	    x[5] = thousands_sep;
 6525              		.loc 1 1883 6 view .LVU2097
 6526 0760 FFF7FEFF 		bl	xcopy
 6527              	.LVL712:
1884:src/display.c **** 	    x += 9;
 6528              		.loc 1 1884 6 view .LVU2098
1885:src/display.c **** 	  }
 6529              		.loc 1 1885 8 is_stmt 0 view .LVU2099
 6530 0764 0BF10905 		add	r5, fp, #9
 6531              	.LVL713:
1884:src/display.c **** 	    x += 9;
 6532              		.loc 1 1884 11 view .LVU2100
 6533 0768 8BF80560 		strb	r6, [fp, #5]
1885:src/display.c **** 	  }
 6534              		.loc 1 1885 6 is_stmt 1 view .LVU2101
 6535              	.LVL714:
1888:src/display.c **** 	    if (exp < 0) {
 6536              		.loc 1 1888 4 view .LVU2102
1888:src/display.c **** 	    if (exp < 0) {
 6537              		.loc 1 1888 7 is_stmt 0 view .LVU2103
 6538 076c 002C     		cmp	r4, #0
 6539 076e 00F0EA80 		beq	.L478
1889:src/display.c **** 	      x[9] = '-';
 6540              		.loc 1 1889 6 is_stmt 1 view .LVU2104
1889:src/display.c **** 	      x[9] = '-';
 6541              		.loc 1 1889 9 is_stmt 0 view .LVU2105
 6542 0772 B8F1000F 		cmp	r8, #0
1890:src/display.c **** 	      exp = -exp;
 6543              		.loc 1 1890 8 is_stmt 1 view .LVU2106
1891:src/display.c **** 	    }
 6544              		.loc 1 1891 8 view .LVU2107
1895:src/display.c **** 	    x[10] = '0' + j;
 6545              		.loc 1 1895 8 is_stmt 0 view .LVU2108
 6546 0776 994B     		ldr	r3, .L715+4
1897:src/display.c **** 	  }
 6547              		.loc 1 1897 18 view .LVU2109
 6548 0778 9949     		ldr	r1, .L715+8
1890:src/display.c **** 	      exp = -exp;
 6549              		.loc 1 1890 13 view .LVU2110
ARM GAS  /tmp/ccSEf3H9.s 			page 211


 6550 077a B6BF     		itet	lt
 6551 077c 2D22     		movlt	r2, #45
1894:src/display.c **** 	    j = exp / 1000;
 6552              		.loc 1 1894 13 view .LVU2111
 6553 077e 2022     		movge	r2, #32
1891:src/display.c **** 	    }
 6554              		.loc 1 1891 12 view .LVU2112
 6555 0780 C8F10008 		rsblt	r8, r8, #0
 6556              	.LVL715:
1891:src/display.c **** 	    }
 6557              		.loc 1 1891 12 view .LVU2113
 6558 0784 8BF81220 		strb	r2, [fp, #18]
1895:src/display.c **** 	    x[10] = '0' + j;
 6559              		.loc 1 1895 6 is_stmt 1 view .LVU2114
1895:src/display.c **** 	    x[10] = '0' + j;
 6560              		.loc 1 1895 8 is_stmt 0 view .LVU2115
 6561 0788 A3FB0823 		umull	r2, r3, r3, r8
 6562 078c 9B09     		lsrs	r3, r3, #6
 6563              	.LVL716:
1896:src/display.c **** 	    exp -= 1000 * j;
 6564              		.loc 1 1896 6 is_stmt 1 view .LVU2116
1896:src/display.c **** 	    exp -= 1000 * j;
 6565              		.loc 1 1896 18 is_stmt 0 view .LVU2117
 6566 078e 03F13002 		add	r2, r3, #48
1897:src/display.c **** 	  }
 6567              		.loc 1 1897 10 view .LVU2118
 6568 0792 01FB0388 		mla	r8, r1, r3, r8
 6569              	.LVL717:
1896:src/display.c **** 	    exp -= 1000 * j;
 6570              		.loc 1 1896 12 view .LVU2119
 6571 0796 8BF81320 		strb	r2, [fp, #19]
1897:src/display.c **** 	  }
 6572              		.loc 1 1897 6 is_stmt 1 view .LVU2120
 6573              	.LVL718:
 6574              	.L480:
1903:src/display.c **** 	  *x = 0;
 6575              		.loc 1 1903 4 view .LVU2121
 6576 079a 0B22     		movs	r2, #11
 6577 079c 2946     		mov	r1, r5
 6578 079e 0BF10A00 		add	r0, fp, #10
 6579 07a2 FFF7FEFF 		bl	xcopy
 6580              	.LVL719:
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6581              		.loc 1 1904 4 view .LVU2122
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6582              		.loc 1 1904 7 is_stmt 0 view .LVU2123
 6583 07a6 0022     		movs	r2, #0
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6584              		.loc 1 1905 4 view .LVU2124
 6585 07a8 4046     		mov	r0, r8
 6586 07aa 0121     		movs	r1, #1
1904:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6587              		.loc 1 1904 7 view .LVU2125
 6588 07ac 8BF80920 		strb	r2, [fp, #9]
1905:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6589              		.loc 1 1905 4 is_stmt 1 view .LVU2126
 6590 07b0 FFF7FEFF 		bl	set_exp
ARM GAS  /tmp/ccSEf3H9.s 			page 212


 6591              	.LVL720:
1906:src/display.c **** 	}
 6592              		.loc 1 1906 4 view .LVU2127
1906:src/display.c **** 	}
 6593              		.loc 1 1906 4 is_stmt 0 view .LVU2128
 6594 07b4 ABEB0707 		sub	r7, fp, r7
 6595              	.LVL721:
1906:src/display.c **** 	}
 6596              		.loc 1 1906 6 view .LVU2129
 6597 07b8 0924     		movs	r4, #9
 6598              	.LVL722:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6599              		.loc 1 1909 11 is_stmt 1 view .LVU2130
 6600              	.L481:
1910:src/display.c **** 	  }
 6601              		.loc 1 1910 6 view .LVU2131
 6602              	.LBB450:
 6603              	.LBI450:
 367:src/display.c ****   if (sep == SEP_NONE)
 6604              		.loc 1 367 14 view .LVU2132
 6605              	.LBB451:
 368:src/display.c ****     return res;
 6606              		.loc 1 368 3 view .LVU2133
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6607              		.loc 1 370 3 view .LVU2134
 6608 07ba 2046     		mov	r0, r4
 6609 07bc 4946     		mov	r1, r9
 6610              	.LBE451:
 6611              	.LBE450:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6612              		.loc 1 1909 38 is_stmt 0 view .LVU2135
 6613 07be 1B34     		adds	r4, r4, #27
 6614              	.LVL723:
 6615              	.LBB453:
 6616              	.LBB452:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6617              		.loc 1 1909 38 view .LVU2136
 6618 07c0 FFF7FEFF 		bl	set_separator.part.0
 6619              	.LVL724:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6620              		.loc 1 1909 38 view .LVU2137
 6621              	.LBE452:
 6622              	.LBE453:
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6623              		.loc 1 1909 36 is_stmt 1 view .LVU2138
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6624              		.loc 1 1909 11 view .LVU2139
1909:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6625              		.loc 1 1909 4 is_stmt 0 view .LVU2140
 6626 07c4 512C     		cmp	r4, #81
 6627 07c6 F8DD     		ble	.L481
 6628 07c8 6C1E     		subs	r4, r5, #1
 6629              	.LVL725:
 6630              	.L483:
1915:src/display.c **** 
 6631              		.loc 1 1915 4 is_stmt 1 view .LVU2141
 6632 07ca 5046     		mov	r0, r10
ARM GAS  /tmp/ccSEf3H9.s 			page 213


 6633 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1914:src/display.c **** 	  set_dig(j, x[i]);
 6634              		.loc 1 1914 33 is_stmt 0 view .LVU2142
 6635 07d0 0AF1090A 		add	r10, r10, #9
 6636              	.LVL726:
1915:src/display.c **** 
 6637              		.loc 1 1915 4 view .LVU2143
 6638 07d4 FFF7FEFF 		bl	set_dig
 6639              	.LVL727:
1914:src/display.c **** 	  set_dig(j, x[i]);
 6640              		.loc 1 1914 26 is_stmt 1 view .LVU2144
1914:src/display.c **** 	  set_dig(j, x[i]);
 6641              		.loc 1 1914 18 view .LVU2145
1914:src/display.c **** 	  set_dig(j, x[i]);
 6642              		.loc 1 1914 2 is_stmt 0 view .LVU2146
 6643 07d8 BAF16C0F 		cmp	r10, #108
 6644 07dc F5D1     		bne	.L483
1917:src/display.c **** 	set_status(upper_str - negative);
 6645              		.loc 1 1917 2 is_stmt 1 view .LVU2147
1917:src/display.c **** 	set_status(upper_str - negative);
 6646              		.loc 1 1917 5 is_stmt 0 view .LVU2148
 6647 07de 0023     		movs	r3, #0
1918:src/display.c ****       }
 6648              		.loc 1 1918 2 view .LVU2149
 6649 07e0 3846     		mov	r0, r7
1917:src/display.c **** 	set_status(upper_str - negative);
 6650              		.loc 1 1917 5 view .LVU2150
 6651 07e2 2B70     		strb	r3, [r5]
1918:src/display.c ****       }
 6652              		.loc 1 1918 2 is_stmt 1 view .LVU2151
 6653 07e4 FFF7FEFF 		bl	set_status
 6654              	.LVL728:
1919:src/display.c **** 
 6655              		.loc 1 1919 7 is_stmt 0 view .LVU2152
 6656 07e8 92E5     		b	.L462
 6657              	.LVL729:
 6658              	.L549:
1919:src/display.c **** 
 6659              		.loc 1 1919 7 view .LVU2153
 6660              	.LBE449:
 6661              	.LBE448:
2210:src/display.c **** 	    odig++;
 6662              		.loc 1 2210 6 is_stmt 1 view .LVU2154
2211:src/display.c **** 	    *obp++ = '.';
 6663              		.loc 1 2211 6 view .LVU2155
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6664              		.loc 1 2212 6 view .LVU2156
2210:src/display.c **** 	    odig++;
 6665              		.loc 1 2210 13 is_stmt 0 view .LVU2157
 6666 07ea 42F63063 		movw	r3, #11824
 6667 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2213:src/display.c **** 	      *obp++ = '0';
 6668              		.loc 1 2213 6 is_stmt 1 view .LVU2158
 6669              	.LVL730:
2213:src/display.c **** 	      *obp++ = '0';
 6670              		.loc 1 2213 20 view .LVU2159
2213:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccSEf3H9.s 			page 214


 6671              		.loc 1 2213 6 is_stmt 0 view .LVU2160
 6672 07f2 731C     		adds	r3, r6, #1
 6673              	.LVL731:
2213:src/display.c **** 	      *obp++ = '0';
 6674              		.loc 1 2213 6 view .LVU2161
 6675 07f4 00F0E580 		beq	.L709
 6676 07f8 C6F10102 		rsb	r2, r6, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6677              		.loc 1 2212 10 view .LVU2162
 6678 07fc 0DF12600 		add	r0, sp, #38
 6679              	.LVL732:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6680              		.loc 1 2212 10 view .LVU2163
 6681 0800 079D     		ldr	r5, [sp, #28]
 6682 0802 5A44     		add	r2, r2, fp
 6683 0804 0346     		mov	r3, r0
 6684              	.LVL733:
2214:src/display.c **** 	      odig++;
 6685              		.loc 1 2214 15 view .LVU2164
 6686 0806 3021     		movs	r1, #48
 6687              	.LVL734:
 6688              	.L557:
2214:src/display.c **** 	      odig++;
 6689              		.loc 1 2214 8 is_stmt 1 discriminator 3 view .LVU2165
2214:src/display.c **** 	      odig++;
 6690              		.loc 1 2214 15 is_stmt 0 discriminator 3 view .LVU2166
 6691 0808 03F8011B 		strb	r1, [r3], #1
 6692              	.LVL735:
2215:src/display.c **** 	      dd--;
 6693              		.loc 1 2215 8 is_stmt 1 discriminator 3 view .LVU2167
2216:src/display.c **** 	    }
 6694              		.loc 1 2216 8 discriminator 3 view .LVU2168
2213:src/display.c **** 	      *obp++ = '0';
 6695              		.loc 1 2213 25 discriminator 3 view .LVU2169
2213:src/display.c **** 	      *obp++ = '0';
 6696              		.loc 1 2213 20 discriminator 3 view .LVU2170
2213:src/display.c **** 	      *obp++ = '0';
 6697              		.loc 1 2213 6 is_stmt 0 discriminator 3 view .LVU2171
 6698 080c 9342     		cmp	r3, r2
 6699 080e FBD1     		bne	.L557
 6700 0810 AB19     		adds	r3, r5, r6
 6701              	.LVL736:
2213:src/display.c **** 	      *obp++ = '0';
 6702              		.loc 1 2213 6 discriminator 3 view .LVU2172
 6703 0812 6FEA0608 		mvn	r8, r6
 6704 0816 0133     		adds	r3, r3, #1
 6705 0818 8044     		add	r8, r8, r0
 6706 081a 7542     		rsbs	r5, r6, #0
 6707              	.L556:
 6708              	.LVL737:
2218:src/display.c **** 	      *obp++ = *p++;
 6709              		.loc 1 2218 12 is_stmt 1 view .LVU2173
2218:src/display.c **** 	      *obp++ = *p++;
 6710              		.loc 1 2218 15 is_stmt 0 view .LVU2174
 6711 081c 5A1E     		subs	r2, r3, #1
2218:src/display.c **** 	      *obp++ = *p++;
 6712              		.loc 1 2218 12 view .LVU2175
ARM GAS  /tmp/ccSEf3H9.s 			page 215


 6713 081e 002B     		cmp	r3, #0
2218:src/display.c **** 	      *obp++ = *p++;
 6714              		.loc 1 2218 15 view .LVU2176
 6715 0820 0792     		str	r2, [sp, #28]
2218:src/display.c **** 	      *obp++ = *p++;
 6716              		.loc 1 2218 12 view .LVU2177
 6717 0822 7FF767AE 		ble	.L538
 6718 0826 4344     		add	r3, r3, r8
 6719 0828 581E     		subs	r0, r3, #1
 6720 082a 08F1FF38 		add	r8, r8, #-1
 6721              	.LVL738:
 6722              	.L558:
2219:src/display.c **** 	      odig++;
 6723              		.loc 1 2219 8 is_stmt 1 view .LVU2178
2219:src/display.c **** 	      odig++;
 6724              		.loc 1 2219 15 is_stmt 0 view .LVU2179
 6725 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6726              	.LVL739:
2219:src/display.c **** 	      odig++;
 6727              		.loc 1 2219 15 view .LVU2180
 6728 0832 08F8011F 		strb	r1, [r8, #1]!
2220:src/display.c **** 	    }
 6729              		.loc 1 2220 8 is_stmt 1 view .LVU2181
2218:src/display.c **** 	      *obp++ = *p++;
 6730              		.loc 1 2218 12 view .LVU2182
 6731 0836 8045     		cmp	r8, r0
 6732 0838 F9D1     		bne	.L558
 6733              	.LVL740:
2218:src/display.c **** 	      *obp++ = *p++;
 6734              		.loc 1 2218 12 is_stmt 0 view .LVU2183
 6735 083a 0135     		adds	r5, r5, #1
 6736 083c 4FF0FF31 		mov	r1, #-1
 6737 0840 1544     		add	r5, r5, r2
 6738 0842 9846     		mov	r8, r3
 6739 0844 0791     		str	r1, [sp, #28]
 6740 0846 55E6     		b	.L538
 6741              	.LVL741:
 6742              	.L561:
2236:src/display.c **** 	    odig++;
 6743              		.loc 1 2236 6 is_stmt 1 view .LVU2184
2236:src/display.c **** 	    odig++;
 6744              		.loc 1 2236 13 is_stmt 0 view .LVU2185
 6745 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6746 084c 8DF82430 		strb	r3, [sp, #36]
2237:src/display.c **** 	    dd--;
 6747              		.loc 1 2237 6 is_stmt 1 view .LVU2186
 6748              	.LVL742:
2238:src/display.c **** 	    exp--;
 6749              		.loc 1 2238 6 view .LVU2187
2238:src/display.c **** 	    exp--;
 6750              		.loc 1 2238 8 is_stmt 0 view .LVU2188
 6751 0850 013A     		subs	r2, r2, #1
2239:src/display.c **** 	  case -2:
 6752              		.loc 1 2239 6 is_stmt 1 view .LVU2189
2239:src/display.c **** 	  case -2:
 6753              		.loc 1 2239 9 is_stmt 0 view .LVU2190
 6754 0852 013E     		subs	r6, r6, #1
ARM GAS  /tmp/ccSEf3H9.s 			page 216


 6755              	.LVL743:
2239:src/display.c **** 	  case -2:
 6756              		.loc 1 2239 9 view .LVU2191
 6757 0854 0325     		movs	r5, #3
2236:src/display.c **** 	    odig++;
 6758              		.loc 1 2236 17 view .LVU2192
 6759 0856 0DF15909 		add	r9, sp, #89
 6760              	.LVL744:
2236:src/display.c **** 	    odig++;
 6761              		.loc 1 2236 10 view .LVU2193
 6762 085a 0DF12501 		add	r1, sp, #37
 6763              	.LVL745:
 6764              	.L564:
2242:src/display.c **** 	    odig++;
 6765              		.loc 1 2242 6 is_stmt 1 view .LVU2194
2242:src/display.c **** 	    odig++;
 6766              		.loc 1 2242 13 is_stmt 0 view .LVU2195
 6767 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6768              	.LVL746:
2242:src/display.c **** 	    odig++;
 6769              		.loc 1 2242 13 view .LVU2196
 6770 0862 01F8013B 		strb	r3, [r1], #1
 6771              	.LVL747:
2243:src/display.c **** 	    dd--;
 6772              		.loc 1 2243 6 is_stmt 1 view .LVU2197
2244:src/display.c **** 	    exp--;
 6773              		.loc 1 2244 6 view .LVU2198
2244:src/display.c **** 	    exp--;
 6774              		.loc 1 2244 8 is_stmt 0 view .LVU2199
 6775 0866 013A     		subs	r2, r2, #1
2245:src/display.c **** 	  case 0:
 6776              		.loc 1 2245 6 is_stmt 1 view .LVU2200
2245:src/display.c **** 	  case 0:
 6777              		.loc 1 2245 9 is_stmt 0 view .LVU2201
 6778 0868 013E     		subs	r6, r6, #1
 6779              	.LVL748:
2245:src/display.c **** 	  case 0:
 6780              		.loc 1 2245 9 view .LVU2202
 6781 086a 24E6     		b	.L528
 6782              	.LVL749:
 6783              	.L563:
2245:src/display.c **** 	  case 0:
 6784              		.loc 1 2245 9 view .LVU2203
 6785 086c 079A     		ldr	r2, [sp, #28]
2233:src/display.c **** 	  case -1:
 6786              		.loc 1 2233 16 view .LVU2204
 6787 086e 0225     		movs	r5, #2
1938:src/display.c **** 	int odig = 0;
 6788              		.loc 1 1938 15 view .LVU2205
 6789 0870 5946     		mov	r1, fp
 6790 0872 F4E7     		b	.L564
 6791              	.LVL750:
 6792              	.L509:
2101:src/display.c **** 	    /* We might have push the fixed decimals off the
 6793              		.loc 1 2101 6 is_stmt 1 view .LVU2206
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6794              		.loc 1 2105 6 view .LVU2207
ARM GAS  /tmp/ccSEf3H9.s 			page 217


2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6795              		.loc 1 2105 9 is_stmt 0 view .LVU2208
 6796 0874 0299     		ldr	r1, [sp, #8]
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6797              		.loc 1 2105 23 view .LVU2209
 6798 0876 9319     		adds	r3, r2, r6
2105:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6799              		.loc 1 2105 9 view .LVU2210
 6800 0878 9942     		cmp	r1, r3
2106:src/display.c **** 	  }
 6801              		.loc 1 2106 8 is_stmt 1 view .LVU2211
2106:src/display.c **** 	  }
 6802              		.loc 1 2106 30 is_stmt 0 view .LVU2212
 6803 087a DFBF     		itttt	le
 6804 087c 029B     		ldrle	r3, [sp, #8]
 6805 087e 03F1FF32 		addle	r2, r3, #-1
2106:src/display.c **** 	  }
 6806              		.loc 1 2106 35 view .LVU2213
 6807 0882 921B     		suble	r2, r2, r6
2106:src/display.c **** 	  }
 6808              		.loc 1 2106 11 view .LVU2214
 6809 0884 0792     		strle	r2, [sp, #28]
 6810 0886 3146     		mov	r1, r6
 6811 0888 6BE4     		b	.L506
 6812              	.LVL751:
 6813              	.L534:
2145:src/display.c **** 	      odig++;
 6814              		.loc 1 2145 8 is_stmt 1 view .LVU2215
2145:src/display.c **** 	      odig++;
 6815              		.loc 1 2145 15 is_stmt 0 view .LVU2216
 6816 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6817 088e 8DF82410 		strb	r1, [sp, #36]
2146:src/display.c **** 	      dd--;
 6818              		.loc 1 2146 8 is_stmt 1 view .LVU2217
 6819              	.LVL752:
2147:src/display.c **** 	      exp--;
 6820              		.loc 1 2147 8 view .LVU2218
2147:src/display.c **** 	      exp--;
 6821              		.loc 1 2147 10 is_stmt 0 view .LVU2219
 6822 0892 013A     		subs	r2, r2, #1
2148:src/display.c **** 	    case -2:
 6823              		.loc 1 2148 8 is_stmt 1 view .LVU2220
2148:src/display.c **** 	    case -2:
 6824              		.loc 1 2148 11 is_stmt 0 view .LVU2221
 6825 0894 013E     		subs	r6, r6, #1
 6826              	.LVL753:
2148:src/display.c **** 	    case -2:
 6827              		.loc 1 2148 11 view .LVU2222
 6828 0896 0325     		movs	r5, #3
2145:src/display.c **** 	      odig++;
 6829              		.loc 1 2145 19 view .LVU2223
 6830 0898 0DF15909 		add	r9, sp, #89
 6831              	.LVL754:
2145:src/display.c **** 	      odig++;
 6832              		.loc 1 2145 12 view .LVU2224
 6833 089c 0DF12501 		add	r1, sp, #37
 6834              	.LVL755:
ARM GAS  /tmp/ccSEf3H9.s 			page 218


 6835              	.L537:
2151:src/display.c **** 	      odig++;
 6836              		.loc 1 2151 8 is_stmt 1 view .LVU2225
2151:src/display.c **** 	      odig++;
 6837              		.loc 1 2151 15 is_stmt 0 view .LVU2226
 6838 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6839              	.LVL756:
2151:src/display.c **** 	      odig++;
 6840              		.loc 1 2151 15 view .LVU2227
 6841 08a4 01F8010B 		strb	r0, [r1], #1
 6842              	.LVL757:
2152:src/display.c **** 	      dd--;
 6843              		.loc 1 2152 8 is_stmt 1 view .LVU2228
2153:src/display.c **** 	      exp--;
 6844              		.loc 1 2153 8 view .LVU2229
2154:src/display.c **** 	    case 0:
 6845              		.loc 1 2154 8 view .LVU2230
2153:src/display.c **** 	      exp--;
 6846              		.loc 1 2153 10 is_stmt 0 view .LVU2231
 6847 08a8 013A     		subs	r2, r2, #1
 6848 08aa 0792     		str	r2, [sp, #28]
2154:src/display.c **** 	    case 0:
 6849              		.loc 1 2154 11 view .LVU2232
 6850 08ac 013E     		subs	r6, r6, #1
 6851              	.LVL758:
 6852              	.L533:
2156:src/display.c **** 	    };
 6853              		.loc 1 2156 8 is_stmt 1 view .LVU2233
2157:src/display.c **** 	    *obp++ = *p++;
 6854              		.loc 1 2157 7 view .LVU2234
2158:src/display.c **** 	    odig++;
 6855              		.loc 1 2158 6 view .LVU2235
2158:src/display.c **** 	    odig++;
 6856              		.loc 1 2158 17 is_stmt 0 view .LVU2236
 6857 08ae 4A46     		mov	r2, r9
 6858              	.LVL759:
2158:src/display.c **** 	    odig++;
 6859              		.loc 1 2158 13 view .LVU2237
 6860 08b0 8846     		mov	r8, r1
 6861 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6862              	.LVL760:
2158:src/display.c **** 	    odig++;
 6863              		.loc 1 2158 13 view .LVU2238
 6864 08b6 08F8020B 		strb	r0, [r8], #2
2159:src/display.c **** 	    *obp++ = '.';
 6865              		.loc 1 2159 6 is_stmt 1 view .LVU2239
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6866              		.loc 1 2160 6 view .LVU2240
 6867              	.LVL761:
2161:src/display.c **** 	      *obp++ = *p++;
 6868              		.loc 1 2161 6 is_stmt 0 view .LVU2241
 6869 08ba 012B     		cmp	r3, #1
2160:src/display.c **** 	    for (i=1; i<count; i++) {
 6870              		.loc 1 2160 13 view .LVU2242
 6871 08bc 4FF02E00 		mov	r0, #46
 6872 08c0 4870     		strb	r0, [r1, #1]
2161:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccSEf3H9.s 			page 219


 6873              		.loc 1 2161 6 is_stmt 1 view .LVU2243
 6874              	.LVL762:
2161:src/display.c **** 	      *obp++ = *p++;
 6875              		.loc 1 2161 16 view .LVU2244
2161:src/display.c **** 	      *obp++ = *p++;
 6876              		.loc 1 2161 6 is_stmt 0 view .LVU2245
 6877 08c2 34DD     		ble	.L606
2161:src/display.c **** 	      *obp++ = *p++;
 6878              		.loc 1 2161 6 view .LVU2246
 6879 08c4 0131     		adds	r1, r1, #1
 6880 08c6 9944     		add	r9, r9, r3
 6881              	.LVL763:
 6882              	.L539:
2162:src/display.c **** 	      odig++;
 6883              		.loc 1 2162 8 is_stmt 1 discriminator 3 view .LVU2247
2162:src/display.c **** 	      odig++;
 6884              		.loc 1 2162 15 is_stmt 0 discriminator 3 view .LVU2248
 6885 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6886              	.LVL764:
2162:src/display.c **** 	      odig++;
 6887              		.loc 1 2162 15 discriminator 3 view .LVU2249
 6888 08cc 01F8010F 		strb	r0, [r1, #1]!
2163:src/display.c **** 	    }
 6889              		.loc 1 2163 8 is_stmt 1 discriminator 3 view .LVU2250
2161:src/display.c **** 	      *obp++ = *p++;
 6890              		.loc 1 2161 25 discriminator 3 view .LVU2251
2161:src/display.c **** 	      *obp++ = *p++;
 6891              		.loc 1 2161 16 discriminator 3 view .LVU2252
2161:src/display.c **** 	      *obp++ = *p++;
 6892              		.loc 1 2161 6 is_stmt 0 discriminator 3 view .LVU2253
 6893 08d0 4A45     		cmp	r2, r9
 6894 08d2 F9D1     		bne	.L539
 6895 08d4 013B     		subs	r3, r3, #1
 6896              	.LVL765:
2161:src/display.c **** 	      *obp++ = *p++;
 6897              		.loc 1 2161 6 discriminator 3 view .LVU2254
 6898 08d6 9844     		add	r8, r8, r3
 6899 08d8 1D44     		add	r5, r5, r3
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6900              		.loc 1 2165 15 view .LVU2255
 6901 08da 4FF0010A 		mov	r10, #1
 6902 08de 09E6     		b	.L538
 6903              	.LVL766:
 6904              	.L536:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6905              		.loc 1 2165 15 view .LVU2256
 6906 08e0 079A     		ldr	r2, [sp, #28]
2142:src/display.c **** 	    case -1:
 6907              		.loc 1 2142 24 view .LVU2257
 6908 08e2 0225     		movs	r5, #2
1938:src/display.c **** 	int odig = 0;
 6909              		.loc 1 1938 15 view .LVU2258
 6910 08e4 5946     		mov	r1, fp
 6911 08e6 DBE7     		b	.L537
 6912              	.LVL767:
 6913              	.L576:
2287:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 220


 6914              		.loc 1 2287 8 is_stmt 1 view .LVU2259
 6915 08e8 2D21     		movs	r1, #45
 6916 08ea A7F10900 		sub	r0, r7, #9
 6917 08ee FFF7FEFF 		bl	set_dig
 6918              	.LVL768:
 6919 08f2 EAE4     		b	.L572
 6920              	.LVL769:
 6921              	.L708:
 6922              	.LBB458:
 6923              	.LBB456:
 6924              	.LBB454:
1854:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6925              		.loc 1 1854 4 view .LVU2260
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6926              		.loc 1 1857 4 view .LVU2261
1857:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6927              		.loc 1 1857 14 is_stmt 0 view .LVU2262
 6928 08f4 0BF10307 		add	r7, fp, #3
 6929              	.LVL770:
1858:src/display.c **** 	  if (grouping) {
 6930              		.loc 1 1858 4 is_stmt 1 view .LVU2263
 6931 08f8 3A49     		ldr	r1, .L715+12
 6932 08fa 0D22     		movs	r2, #13
 6933 08fc 3846     		mov	r0, r7
 6934 08fe FFF7FEFF 		bl	xcopy
 6935              	.LVL771:
1859:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6936              		.loc 1 1859 4 view .LVU2264
1860:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6937              		.loc 1 1860 6 view .LVU2265
 6938 0902 1322     		movs	r2, #19
 6939 0904 0BEB0201 		add	r1, fp, r2
 6940 0908 0BF11400 		add	r0, fp, #20
 6941 090c FFF7FEFF 		bl	xcopy
 6942              	.LVL772:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6943              		.loc 1 1861 6 view .LVU2266
1862:src/display.c **** 	  }
 6944              		.loc 1 1862 8 is_stmt 0 view .LVU2267
 6945 0910 0BF11705 		add	r5, fp, #23
 6946              	.LVL773:
1861:src/display.c **** 	    x += 3 + 13 + 7;
 6947              		.loc 1 1861 24 view .LVU2268
 6948 0914 8BF81360 		strb	r6, [fp, #19]
1862:src/display.c **** 	  }
 6949              		.loc 1 1862 6 is_stmt 1 view .LVU2269
 6950              	.LVL774:
1875:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6951              		.loc 1 1875 4 view .LVU2270
1876:src/display.c **** 	}
 6952              		.loc 1 1876 4 view .LVU2271
1876:src/display.c **** 	}
 6953              		.loc 1 1876 6 is_stmt 0 view .LVU2272
 6954 0918 1B24     		movs	r4, #27
 6955              	.LVL775:
1876:src/display.c **** 	}
 6956              		.loc 1 1876 6 view .LVU2273
ARM GAS  /tmp/ccSEf3H9.s 			page 221


 6957              	.LBE454:
 6958 091a 4EE7     		b	.L481
 6959              	.LVL776:
 6960              	.L704:
1876:src/display.c **** 	}
 6961              		.loc 1 1876 6 view .LVU2274
 6962              	.LBE456:
 6963              	.LBE458:
1975:src/display.c **** 	      return;
 6964              		.loc 1 1975 8 is_stmt 1 view .LVU2275
 6965 091c 3846     		mov	r0, r7
 6966 091e FFF7FEFF 		bl	set_x_hms
 6967              	.LVL777:
1976:src/display.c **** 	    }
 6968              		.loc 1 1976 8 view .LVU2276
 6969 0922 F5E4     		b	.L462
 6970              	.LVL778:
 6971              	.L604:
2137:src/display.c **** 	  if (count != *display_digits)
 6972              		.loc 1 2137 4 is_stmt 0 view .LVU2277
 6973 0924 029B     		ldr	r3, [sp, #8]
 6974 0926 71E4     		b	.L529
 6975              	.LVL779:
 6976              	.L605:
2142:src/display.c **** 	    case -1:
 6977              		.loc 1 2142 24 view .LVU2278
 6978 0928 0125     		movs	r5, #1
 6979 092a 5946     		mov	r1, fp
 6980 092c BFE7     		b	.L533
 6981              	.LVL780:
 6982              	.L606:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6983              		.loc 1 2165 15 view .LVU2279
 6984 092e 4FF0010A 		mov	r10, #1
 6985 0932 DFE5     		b	.L538
 6986              	.LVL781:
 6987              	.L580:
 6988              	.LBB459:
 6989              	.LBB438:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6990              		.loc 1 2165 15 view .LVU2280
 6991 0934 3846     		mov	r0, r7
 6992 0936 FFF7FEFF 		bl	set_separator.part.0
 6993              	.LVL782:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6994              		.loc 1 2165 15 view .LVU2281
 6995 093a 0446     		mov	r4, r0
 6996              	.LVL783:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6997              		.loc 1 2165 15 view .LVU2282
 6998 093c F7E5     		b	.L578
 6999              	.LVL784:
 7000              	.L512:
2165:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7001              		.loc 1 2165 15 view .LVU2283
 7002              	.LBE438:
 7003              	.LBE459:
ARM GAS  /tmp/ccSEf3H9.s 			page 222


2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7004              		.loc 1 2115 4 is_stmt 1 view .LVU2284
2115:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7005              		.loc 1 2115 7 is_stmt 0 view .LVU2285
 7006 093e 4B45     		cmp	r3, r9
 7007 0940 7FF429AC 		bne	.L589
 7008 0944 3EE5     		b	.L590
 7009              	.LVL785:
 7010              	.L478:
 7011              	.LBB460:
 7012              	.LBB457:
1900:src/display.c **** 	    x[10] = '\0';
 7013              		.loc 1 1900 6 is_stmt 1 view .LVU2286
1901:src/display.c **** 	  }
 7014              		.loc 1 1901 6 view .LVU2287
1900:src/display.c **** 	    x[10] = '\0';
 7015              		.loc 1 1900 11 is_stmt 0 view .LVU2288
 7016 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7017 094a 26E7     		b	.L480
 7018              	.LVL786:
 7019              	.L707:
 7020              	.LBB455:
1825:src/display.c **** 
 7021              		.loc 1 1825 4 is_stmt 1 view .LVU2289
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 7022              		.loc 1 1827 4 view .LVU2290
 7023 094c 2222     		movs	r2, #34
 7024 094e 0DF12501 		add	r1, sp, #37
 7025 0952 0AA8     		add	r0, sp, #40
 7026              	.LVL787:
1827:src/display.c **** 	  xcopy(x, small_minus, 4);
 7027              		.loc 1 1827 4 is_stmt 0 view .LVU2291
 7028 0954 FFF7FEFF 		bl	xcopy
 7029              	.LVL788:
1828:src/display.c **** 	  x += 4;
 7030              		.loc 1 1828 4 is_stmt 1 view .LVU2292
 7031 0958 5846     		mov	r0, fp
 7032 095a 2349     		ldr	r1, .L715+16
 7033 095c 0422     		movs	r2, #4
 7034 095e FFF7FEFF 		bl	xcopy
 7035              	.LVL789:
1829:src/display.c **** 	  negative = 4;
 7036              		.loc 1 1829 4 view .LVU2293
1830:src/display.c **** #else
 7037              		.loc 1 1830 4 view .LVU2294
1829:src/display.c **** 	  negative = 4;
 7038              		.loc 1 1829 6 is_stmt 0 view .LVU2295
 7039 0962 0DF1280B 		add	fp, sp, #40
 7040              	.LVL790:
1830:src/display.c **** #else
 7041              		.loc 1 1830 13 view .LVU2296
 7042 0966 0427     		movs	r7, #4
 7043              	.LVL791:
1830:src/display.c **** #else
 7044              		.loc 1 1830 13 view .LVU2297
 7045              	.LBE455:
 7046 0968 D1E6     		b	.L474
ARM GAS  /tmp/ccSEf3H9.s 			page 223


 7047              	.LVL792:
 7048              	.L540:
1830:src/display.c **** #else
 7049              		.loc 1 1830 13 view .LVU2298
 7050              	.LBE457:
 7051              	.LBE460:
2181:src/display.c **** 	    odig++;
 7052              		.loc 1 2181 6 is_stmt 1 view .LVU2299
2182:src/display.c **** 	    *obp++ = '.';
 7053              		.loc 1 2182 6 view .LVU2300
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7054              		.loc 1 2183 6 view .LVU2301
2181:src/display.c **** 	    odig++;
 7055              		.loc 1 2181 13 is_stmt 0 view .LVU2302
 7056 096a 42F63062 		movw	r2, #11824
 7057 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2184:src/display.c **** 	      *obp++ = '0';
 7058              		.loc 1 2184 6 is_stmt 1 view .LVU2303
 7059              	.LVL793:
2184:src/display.c **** 	      *obp++ = '0';
 7060              		.loc 1 2184 20 view .LVU2304
2184:src/display.c **** 	      *obp++ = '0';
 7061              		.loc 1 2184 6 is_stmt 0 view .LVU2305
 7062 0972 721C     		adds	r2, r6, #1
 7063              	.LVL794:
2184:src/display.c **** 	      *obp++ = '0';
 7064              		.loc 1 2184 6 view .LVU2306
 7065 0974 2AD0     		beq	.L607
 7066 0976 C6F10101 		rsb	r1, r6, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7067              		.loc 1 2183 10 view .LVU2307
 7068 097a 0DF12600 		add	r0, sp, #38
 7069              	.LVL795:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7070              		.loc 1 2183 10 view .LVU2308
 7071 097e 5944     		add	r1, r1, fp
 7072 0980 0246     		mov	r2, r0
 7073              	.LVL796:
2185:src/display.c **** 	      odig++;
 7074              		.loc 1 2185 15 view .LVU2309
 7075 0982 3025     		movs	r5, #48
 7076              	.LVL797:
 7077              	.L547:
2185:src/display.c **** 	      odig++;
 7078              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2310
2185:src/display.c **** 	      odig++;
 7079              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2311
 7080 0984 02F8015B 		strb	r5, [r2], #1
 7081              	.LVL798:
2186:src/display.c **** 	    }
 7082              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2312
2184:src/display.c **** 	      *obp++ = '0';
 7083              		.loc 1 2184 25 discriminator 3 view .LVU2313
2184:src/display.c **** 	      *obp++ = '0';
 7084              		.loc 1 2184 20 discriminator 3 view .LVU2314
2184:src/display.c **** 	      *obp++ = '0';
 7085              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2315
ARM GAS  /tmp/ccSEf3H9.s 			page 224


 7086 0988 8A42     		cmp	r2, r1
 7087 098a FBD1     		bne	.L547
 7088 098c 6FEA0608 		mvn	r8, r6
 7089 0990 8044     		add	r8, r8, r0
 7090 0992 7542     		rsbs	r5, r6, #0
 7091              	.LVL799:
 7092              	.L546:
2188:src/display.c **** 	      *obp++ = *p++;
 7093              		.loc 1 2188 16 is_stmt 1 view .LVU2316
2188:src/display.c **** 	      *obp++ = *p++;
 7094              		.loc 1 2188 6 is_stmt 0 view .LVU2317
 7095 0994 002B     		cmp	r3, #0
 7096 0996 7FF7ADAD 		ble	.L538
 7097 099a 581E     		subs	r0, r3, #1
 7098 099c 4044     		add	r0, r0, r8
 7099 099e 08F1FF32 		add	r2, r8, #-1
 7100              	.LVL800:
 7101              	.L548:
2189:src/display.c **** 	      odig++;
 7102              		.loc 1 2189 8 is_stmt 1 discriminator 3 view .LVU2318
2189:src/display.c **** 	      odig++;
 7103              		.loc 1 2189 15 is_stmt 0 discriminator 3 view .LVU2319
 7104 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 7105              	.LVL801:
2189:src/display.c **** 	      odig++;
 7106              		.loc 1 2189 15 discriminator 3 view .LVU2320
 7107 09a6 02F8011F 		strb	r1, [r2, #1]!
2190:src/display.c **** 	    }
 7108              		.loc 1 2190 8 is_stmt 1 discriminator 3 view .LVU2321
2188:src/display.c **** 	      *obp++ = *p++;
 7109              		.loc 1 2188 25 discriminator 3 view .LVU2322
 7110              	.LVL802:
2188:src/display.c **** 	      *obp++ = *p++;
 7111              		.loc 1 2188 16 discriminator 3 view .LVU2323
2188:src/display.c **** 	      *obp++ = *p++;
 7112              		.loc 1 2188 6 is_stmt 0 discriminator 3 view .LVU2324
 7113 09aa 9042     		cmp	r0, r2
 7114 09ac F9D1     		bne	.L548
 7115              	.LVL803:
2188:src/display.c **** 	      *obp++ = *p++;
 7116              		.loc 1 2188 6 discriminator 3 view .LVU2325
 7117 09ae 9844     		add	r8, r8, r3
 7118              	.LVL804:
2188:src/display.c **** 	      *obp++ = *p++;
 7119              		.loc 1 2188 6 discriminator 3 view .LVU2326
 7120 09b0 1D44     		add	r5, r5, r3
 7121 09b2 9FE5     		b	.L538
 7122              	.LVL805:
 7123              	.L706:
2131:src/display.c **** 
 7124              		.loc 1 2131 2 is_stmt 1 view .LVU2327
 7125 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2131:src/display.c **** 
 7126              		.loc 1 2131 9 is_stmt 0 view .LVU2328
 7127 09b8 09EB0E03 		add	r3, r9, lr
 7128              	.LVL806:
2131:src/display.c **** 
ARM GAS  /tmp/ccSEf3H9.s 			page 225


 7129              		.loc 1 2131 45 is_stmt 1 view .LVU2329
2131:src/display.c **** 
 7130              		.loc 1 2131 2 is_stmt 0 view .LVU2330
 7131 09bc 51B1     		cbz	r1, .L710
2120:src/display.c **** 	      extra_digits = 0;
 7132              		.loc 1 2120 37 view .LVU2331
 7133 09be 0225     		movs	r5, #2
 7134 09c0 00E4     		b	.L588
 7135              	.LVL807:
 7136              	.L709:
2120:src/display.c **** 	      extra_digits = 0;
 7137              		.loc 1 2120 37 view .LVU2332
 7138 09c2 079B     		ldr	r3, [sp, #28]
 7139              	.LVL808:
2211:src/display.c **** 	    *obp++ = '.';
 7140              		.loc 1 2211 10 view .LVU2333
 7141 09c4 0125     		movs	r5, #1
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7142              		.loc 1 2212 10 view .LVU2334
 7143 09c6 0DF12608 		add	r8, sp, #38
 7144              	.LVL809:
2212:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7145              		.loc 1 2212 10 view .LVU2335
 7146 09ca 27E7     		b	.L556
 7147              	.LVL810:
 7148              	.L607:
2182:src/display.c **** 	    *obp++ = '.';
 7149              		.loc 1 2182 10 view .LVU2336
 7150 09cc 0125     		movs	r5, #1
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7151              		.loc 1 2183 10 view .LVU2337
 7152 09ce 0DF12608 		add	r8, sp, #38
 7153              	.LVL811:
2183:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7154              		.loc 1 2183 10 view .LVU2338
 7155 09d2 DFE7     		b	.L546
 7156              	.LVL812:
 7157              	.L710:
1938:src/display.c **** 	int odig = 0;
 7158              		.loc 1 1938 15 view .LVU2339
 7159 09d4 5946     		mov	r1, fp
 7160 09d6 6EE5     		b	.L528
 7161              	.L716:
 7162              		.align	2
 7163              	.L715:
 7164 09d8 00000000 		.word	.LANCHOR1
 7165 09dc D34D6210 		.word	274877907
 7166 09e0 18FCFFFF 		.word	-1000
 7167 09e4 00000000 		.word	.LANCHOR14
 7168 09e8 00000000 		.word	.LANCHOR13
 7169              		.cfi_endproc
 7170              	.LFE27:
 7172              		.section	.text.set_x,"ax",%progbits
 7173              		.align	1
 7174              		.p2align 2,,3
 7175              		.syntax unified
 7176              		.thumb
ARM GAS  /tmp/ccSEf3H9.s 			page 226


 7177              		.thumb_func
 7178              		.fpu fpv4-sp-d16
 7180              	set_x:
 7181              	.LVL813:
 7182              	.LFB26:
1926:src/display.c **** 	decNumber z;
 7183              		.loc 1 1926 66 is_stmt 1 view -0
 7184              		.cfi_startproc
 7185              		@ args = 0, pretend = 0, frame = 40
 7186              		@ frame_needed = 0, uses_anonymous_args = 0
1927:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7187              		.loc 1 1927 2 view .LVU2341
1928:src/display.c **** 
 7188              		.loc 1 1928 2 view .LVU2342
1926:src/display.c **** 	decNumber z;
 7189              		.loc 1 1926 66 is_stmt 0 view .LVU2343
 7190 0000 30B5     		push	{r4, r5, lr}
 7191              		.cfi_def_cfa_offset 12
 7192              		.cfi_offset 4, -12
 7193              		.cfi_offset 5, -8
 7194              		.cfi_offset 14, -4
 7195 0002 8BB0     		sub	sp, sp, #44
 7196              		.cfi_def_cfa_offset 56
1928:src/display.c **** 
 7197              		.loc 1 1928 6 view .LVU2344
 7198 0004 0C23     		movs	r3, #12
1931:src/display.c **** 	else
 7199              		.loc 1 1931 4 view .LVU2345
 7200 0006 01AD     		add	r5, sp, #4
1926:src/display.c **** 	decNumber z;
 7201              		.loc 1 1926 66 view .LVU2346
 7202 0008 0C46     		mov	r4, r1
1928:src/display.c **** 
 7203              		.loc 1 1928 6 view .LVU2347
 7204 000a 0093     		str	r3, [sp]
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7205              		.loc 1 1930 2 is_stmt 1 view .LVU2348
1931:src/display.c **** 	else
 7206              		.loc 1 1931 4 is_stmt 0 view .LVU2349
 7207 000c 2946     		mov	r1, r5
 7208              	.LVL814:
1930:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7209              		.loc 1 1930 5 view .LVU2350
 7210 000e 42B1     		cbz	r2, .L718
1931:src/display.c **** 	else
 7211              		.loc 1 1931 4 is_stmt 1 view .LVU2351
 7212 0010 FFF7FEFF 		bl	decimal128ToNumber
 7213              	.LVL815:
1934:src/display.c ****       }
 7214              		.loc 1 1934 2 view .LVU2352
 7215 0014 2146     		mov	r1, r4
 7216 0016 2846     		mov	r0, r5
 7217 0018 6A46     		mov	r2, sp
 7218 001a FFF7FEFF 		bl	set_x_dn
 7219              	.LVL816:
1935:src/display.c **** 
 7220              		.loc 1 1935 7 is_stmt 0 view .LVU2353
ARM GAS  /tmp/ccSEf3H9.s 			page 227


 7221 001e 0BB0     		add	sp, sp, #44
 7222              		.cfi_remember_state
 7223              		.cfi_def_cfa_offset 12
 7224              		@ sp needed
 7225 0020 30BD     		pop	{r4, r5, pc}
 7226              	.LVL817:
 7227              	.L718:
 7228              		.cfi_restore_state
1933:src/display.c **** 	set_x_dn(&z, res, &digits);
 7229              		.loc 1 1933 4 is_stmt 1 view .LVU2354
 7230 0022 FFF7FEFF 		bl	decimal64ToNumber
 7231              	.LVL818:
1934:src/display.c ****       }
 7232              		.loc 1 1934 2 view .LVU2355
 7233 0026 2146     		mov	r1, r4
 7234 0028 2846     		mov	r0, r5
 7235 002a 6A46     		mov	r2, sp
 7236 002c FFF7FEFF 		bl	set_x_dn
 7237              	.LVL819:
1935:src/display.c **** 
 7238              		.loc 1 1935 7 is_stmt 0 view .LVU2356
 7239 0030 0BB0     		add	sp, sp, #44
 7240              		.cfi_def_cfa_offset 12
 7241              		@ sp needed
 7242 0032 30BD     		pop	{r4, r5, pc}
1935:src/display.c **** 
 7243              		.loc 1 1935 7 view .LVU2357
 7244              		.cfi_endproc
 7245              	.LFE26:
 7247              		.section	.text.format_reg,"ax",%progbits
 7248              		.align	1
 7249              		.p2align 2,,3
 7250              		.global	format_reg
 7251              		.syntax unified
 7252              		.thumb
 7253              		.thumb_func
 7254              		.fpu fpv4-sp-d16
 7256              	format_reg:
 7257              	.LVL820:
 7258              	.LFB28:
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7259              		.loc 1 2342 45 is_stmt 1 view -0
 7260              		.cfi_startproc
 7261              		@ args = 0, pretend = 0, frame = 40
 7262              		@ frame_needed = 0, uses_anonymous_args = 0
2343:src/display.c **** 
 7263              		.loc 1 2343 2 view .LVU2359
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7264              		.loc 1 2342 45 is_stmt 0 view .LVU2360
 7265 0000 30B5     		push	{r4, r5, lr}
 7266              		.cfi_def_cfa_offset 12
 7267              		.cfi_offset 4, -12
 7268              		.cfi_offset 5, -8
 7269              		.cfi_offset 14, -4
 7270 0002 8BB0     		sub	sp, sp, #44
 7271              		.cfi_def_cfa_offset 56
2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
ARM GAS  /tmp/ccSEf3H9.s 			page 228


 7272              		.loc 1 2342 45 view .LVU2361
 7273 0004 0C46     		mov	r4, r1
 7274 0006 0546     		mov	r5, r0
2343:src/display.c **** 
 7275              		.loc 1 2343 28 view .LVU2362
 7276 0008 FFF7FEFF 		bl	get_reg_n
 7277              	.LVL821:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7278              		.loc 1 2345 6 view .LVU2363
 7279 000c 154B     		ldr	r3, .L728
 7280 000e 1B68     		ldr	r3, [r3]
 7281 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7282              	.LVL822:
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7283              		.loc 1 2345 2 is_stmt 1 view .LVU2364
2345:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7284              		.loc 1 2345 5 is_stmt 0 view .LVU2365
 7285 0014 D207     		lsls	r2, r2, #31
 7286 0016 1DD4     		bmi	.L726
2348:src/display.c **** 	  decNumber x;
 7287              		.loc 1 2348 7 is_stmt 1 view .LVU2366
2348:src/display.c **** 	  decNumber x;
 7288              		.loc 1 2348 10 is_stmt 0 view .LVU2367
 7289 0018 44B1     		cbz	r4, .L727
 7290              	.L724:
2359:src/display.c ****       }
 7291              		.loc 1 2359 4 is_stmt 1 view .LVU2368
2359:src/display.c ****       }
 7292              		.loc 1 2359 24 is_stmt 0 view .LVU2369
 7293 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2359:src/display.c ****       }
 7294              		.loc 1 2359 4 view .LVU2370
 7295 001e 2146     		mov	r1, r4
 7296 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7297 0024 FFF7FEFF 		bl	set_x
 7298              	.LVL823:
2360:src/display.c **** 
 7299              		.loc 1 2360 7 view .LVU2371
 7300 0028 0BB0     		add	sp, sp, #44
 7301              		.cfi_remember_state
 7302              		.cfi_def_cfa_offset 12
 7303              		@ sp needed
 7304 002a 30BD     		pop	{r4, r5, pc}
 7305              	.LVL824:
 7306              	.L727:
 7307              		.cfi_restore_state
2348:src/display.c **** 	  decNumber x;
 7308              		.loc 1 2348 32 discriminator 1 view .LVU2372
 7309 002c 0E4A     		ldr	r2, .L728+4
2348:src/display.c **** 	  decNumber x;
 7310              		.loc 1 2348 23 discriminator 1 view .LVU2373
 7311 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7312 0030 012A     		cmp	r2, #1
 7313 0032 F2D9     		bls	.L724
 7314              	.LVL825:
 7315              	.LBB464:
 7316              	.LBI464:
ARM GAS  /tmp/ccSEf3H9.s 			page 229


2342:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7317              		.loc 1 2342 12 is_stmt 1 view .LVU2374
 7318              	.LBB465:
 7319              	.LBB466:
2349:src/display.c **** 	  int s;
 7320              		.loc 1 2349 4 view .LVU2375
2350:src/display.c **** 	  unsigned long long int v;
 7321              		.loc 1 2350 4 view .LVU2376
2351:src/display.c **** 
 7322              		.loc 1 2351 4 view .LVU2377
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7323              		.loc 1 2353 4 view .LVU2378
 7324 0034 2946     		mov	r1, r5
 7325 0036 01A8     		add	r0, sp, #4
 7326              	.LVL826:
2353:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7327              		.loc 1 2353 4 is_stmt 0 view .LVU2379
 7328 0038 FFF7FEFF 		bl	getRegister
 7329              	.LVL827:
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7330              		.loc 1 2354 4 is_stmt 1 view .LVU2380
2354:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7331              		.loc 1 2354 8 is_stmt 0 view .LVU2381
 7332 003c 01A8     		add	r0, sp, #4
 7333 003e 6946     		mov	r1, sp
 7334 0040 FFF7FEFF 		bl	dn_to_ull
 7335              	.LVL828:
2355:src/display.c **** 	}
 7336              		.loc 1 2355 4 is_stmt 1 view .LVU2382
 7337 0044 009A     		ldr	r2, [sp]
 7338 0046 FFF7FEFF 		bl	build_value
 7339              	.LVL829:
2355:src/display.c **** 	}
 7340              		.loc 1 2355 4 is_stmt 0 view .LVU2383
 7341 004a 2246     		mov	r2, r4
 7342 004c FFF7FEFF 		bl	set_int_x
 7343              	.LVL830:
 7344              	.LBE466:
 7345              	.LBE465:
 7346              	.LBE464:
2360:src/display.c **** 
 7347              		.loc 1 2360 7 view .LVU2384
 7348 0050 0BB0     		add	sp, sp, #44
 7349              		.cfi_remember_state
 7350              		.cfi_def_cfa_offset 12
 7351              		@ sp needed
 7352 0052 30BD     		pop	{r4, r5, pc}
 7353              	.LVL831:
 7354              	.L726:
 7355              		.cfi_restore_state
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7356              		.loc 1 2346 4 is_stmt 1 view .LVU2385
 7357 0054 2846     		mov	r0, r5
 7358              	.LVL832:
2346:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7359              		.loc 1 2346 4 is_stmt 0 view .LVU2386
 7360 0056 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/ccSEf3H9.s 			page 230


 7361              	.LVL833:
 7362 005a 2246     		mov	r2, r4
 7363 005c FFF7FEFF 		bl	set_int_x
 7364              	.LVL834:
2360:src/display.c **** 
 7365              		.loc 1 2360 7 view .LVU2387
 7366 0060 0BB0     		add	sp, sp, #44
 7367              		.cfi_def_cfa_offset 12
 7368              		@ sp needed
 7369 0062 30BD     		pop	{r4, r5, pc}
 7370              	.LVL835:
 7371              	.L729:
2360:src/display.c **** 
 7372              		.loc 1 2360 7 view .LVU2388
 7373              		.align	2
 7374              	.L728:
 7375 0064 00000000 		.word	main_ram
 7376 0068 00000000 		.word	StateWhileOn
 7377              		.cfi_endproc
 7378              	.LFE28:
 7380              		.section	.text.set_status_right,"ax",%progbits
 7381              		.align	1
 7382              		.p2align 2,,3
 7383              		.syntax unified
 7384              		.thumb
 7385              		.thumb_func
 7386              		.fpu fpv4-sp-d16
 7388              	set_status_right:
 7389              	.LVL836:
 7390              	.LFB47:
3505:src/display.c ****       static void set_status_top(const char *str) {
3506:src/display.c **** 	if (no_status_top) return;
3507:src/display.c **** 	if (State2.runmode) {
3508:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3509:src/display.c **** 	}
3510:src/display.c **** 	else {
3511:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3512:src/display.c **** 	}
3513:src/display.c ****       }
3514:src/display.c **** #ifdef TOP_ROW
3515:src/display.c ****       static void set_status_top_always(const char *str) {
3516:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3517:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3518:src/display.c ****       }
3519:src/display.c **** #endif
3520:src/display.c **** 
3521:src/display.c ****       /*
3522:src/display.c ****        *  Display messages (global function)
3523:src/display.c ****        */
3524:src/display.c ****       extern void message(const char *str1, const char *str2)
3525:src/display.c ****       {
3526:src/display.c **** 	State2.disp_freeze = 0;
3527:src/display.c **** 	State2.disp_small = 0;
3528:src/display.c **** 	WasDataEntry = 0;
3529:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3530:src/display.c **** 	  // Complete redraw necessary
3531:src/display.c **** 	  DispMsg = str1;
ARM GAS  /tmp/ccSEf3H9.s 			page 231


3532:src/display.c **** 	  display();
3533:src/display.c **** 	}
3534:src/display.c **** 	else {
3535:src/display.c **** 	  if ( str2 != NULL ) {
3536:src/display.c **** 	    reset_disp();
3537:src/display.c **** 	    ShowRPN = 0;
3538:src/display.c **** 	    set_annunciators();
3539:src/display.c **** 	    set_digits_string( str2, 0 );
3540:src/display.c **** 	  }
3541:src/display.c **** 	  set_status( str1 );
3542:src/display.c **** 	  finish_display();// message
3543:src/display.c **** 	}
3544:src/display.c ****       }
3545:src/display.c **** 
3546:src/display.c **** #ifdef INCLUDE_STOPWATCH
3547:src/display.c **** 
3548:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3549:src/display.c **** 	int j = SEGS_EXP_BASE;
3550:src/display.c **** 	for (; *exponent!=0; exponent++) {
3551:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3552:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3553:src/display.c **** 	}
3554:src/display.c ****       }
3555:src/display.c **** 
3556:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3557:src/display.c ****       {
3558:src/display.c **** #ifndef REALBUILD
3559:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3560:src/display.c **** #endif
3561:src/display.c **** 	reset_disp();
3562:src/display.c **** 	set_dot(DEG);
3563:src/display.c **** 	set_digits_string( str2, 0 );
3564:src/display.c **** 	State2.disp_small = force_small;
3565:src/display.c **** 	if( exponent!=NULL ) {
3566:src/display.c **** 	  stopwatch_exponent(exponent);
3567:src/display.c **** 	}
3568:src/display.c **** 	set_status( str1 );
3569:src/display.c **** 	finish_display();
3570:src/display.c ****       }
3571:src/display.c **** 
3572:src/display.c **** 
3573:src/display.c **** #endif // INCLUDE_STOPWATCH
3574:src/display.c **** 
3575:src/display.c ****       /* Display the right hand characters from the given string.
3576:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3577:src/display.c ****        * and reduce font size if required.
3578:src/display.c ****        */
3579:src/display.c ****       static void set_status_right(const char *str) {
 7391              		.loc 1 3579 53 is_stmt 1 view -0
 7392              		.cfi_startproc
 7393              		@ args = 0, pretend = 0, frame = 0
 7394              		@ frame_needed = 0, uses_anonymous_args = 0
3580:src/display.c **** 	unsigned int x = 0;
 7395              		.loc 1 3580 2 view .LVU2390
3581:src/display.c **** 	const char *p;
 7396              		.loc 1 3581 2 view .LVU2391
3582:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
ARM GAS  /tmp/ccSEf3H9.s 			page 232


 7397              		.loc 1 3582 2 view .LVU2392
3579:src/display.c **** 	unsigned int x = 0;
 7398              		.loc 1 3579 53 is_stmt 0 view .LVU2393
 7399 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7400              		.cfi_def_cfa_offset 28
 7401              		.cfi_offset 4, -28
 7402              		.cfi_offset 5, -24
 7403              		.cfi_offset 6, -20
 7404              		.cfi_offset 7, -16
 7405              		.cfi_offset 8, -12
 7406              		.cfi_offset 9, -8
 7407              		.cfi_offset 14, -4
 7408              		.loc 1 3582 23 view .LVU2394
 7409 0004 194B     		ldr	r3, .L745
 7410              		.loc 1 3582 41 view .LVU2395
 7411 0006 93F91630 		ldrsb	r3, [r3, #22]
 7412 000a 002B     		cmp	r3, #0
3579:src/display.c **** 	unsigned int x = 0;
 7413              		.loc 1 3579 53 view .LVU2396
 7414 000c 83B0     		sub	sp, sp, #12
 7415              		.cfi_def_cfa_offset 40
3579:src/display.c **** 	unsigned int x = 0;
 7416              		.loc 1 3579 53 view .LVU2397
 7417 000e 0646     		mov	r6, r0
 7418              		.loc 1 3582 41 view .LVU2398
 7419 0010 23DA     		bge	.L744
 7420              	.LVL837:
 7421              	.L731:
 7422              		.loc 1 3582 12 view .LVU2399
 7423 0012 4FF00108 		mov	r8, #1
3583:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7424              		.loc 1 3583 36 view .LVU2400
 7425 0016 4FF48077 		mov	r7, #256
 7426              	.L732:
 7427              	.LVL838:
3584:src/display.c **** 
3585:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7428              		.loc 1 3585 2 is_stmt 1 discriminator 4 view .LVU2401
 7429              		.loc 1 3585 14 discriminator 4 view .LVU2402
 7430              		.loc 1 3585 2 is_stmt 0 discriminator 4 view .LVU2403
 7431 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7432 001c 3446     		mov	r4, r6
 7433 001e 1BB1     		cbz	r3, .L733
 7434              	.LVL839:
 7435              	.L734:
 7436              		.loc 1 3585 30 is_stmt 1 discriminator 3 view .LVU2404
 7437              		.loc 1 3585 26 discriminator 3 view .LVU2405
 7438              		.loc 1 3585 14 discriminator 3 view .LVU2406
 7439              		.loc 1 3585 2 is_stmt 0 discriminator 3 view .LVU2407
 7440 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7441              	.LVL840:
 7442              		.loc 1 3585 2 discriminator 3 view .LVU2408
 7443 0024 002B     		cmp	r3, #0
 7444 0026 FBD1     		bne	.L734
 7445              	.L733:
3580:src/display.c **** 	const char *p;
 7446              		.loc 1 3580 15 view .LVU2409
ARM GAS  /tmp/ccSEf3H9.s 			page 233


 7447 0028 0025     		movs	r5, #0
 7448 002a 06E0     		b	.L735
 7449              	.LVL841:
 7450              	.L736:
 7451              	.LBB467:
3586:src/display.c **** 	while (--p >= str) {
3587:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7452              		.loc 1 3587 27 view .LVU2410
 7453 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3588:src/display.c **** 
3589:src/display.c **** 	  x += charlengths(c);
 7454              		.loc 1 3589 9 view .LVU2411
 7455 002e 3844     		add	r0, r0, r7
 7456 0030 FFF7FEFF 		bl	charlengths
 7457              	.LVL842:
 7458              		.loc 1 3589 6 view .LVU2412
 7459 0034 0544     		add	r5, r5, r0
 7460              	.LVL843:
3590:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7461              		.loc 1 3590 4 is_stmt 1 view .LVU2413
 7462              		.loc 1 3590 7 is_stmt 0 view .LVU2414
 7463 0036 4B2D     		cmp	r5, #75
 7464 0038 03D8     		bhi	.L737
 7465              	.LVL844:
 7466              	.L735:
3587:src/display.c **** 
 7467              		.loc 1 3587 4 is_stmt 1 view .LVU2415
3587:src/display.c **** 
 7468              		.loc 1 3587 4 is_stmt 0 view .LVU2416
 7469              	.LBE467:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7470              		.loc 1 3586 8 is_stmt 1 view .LVU2417
 7471 003a A146     		mov	r9, r4
 7472 003c 013C     		subs	r4, r4, #1
 7473              	.LVL845:
 7474              	.LBB468:
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7475              		.loc 1 3589 4 view .LVU2418
3589:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7476              		.loc 1 3589 4 is_stmt 0 view .LVU2419
 7477              	.LBE468:
3586:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7478              		.loc 1 3586 8 view .LVU2420
 7479 003e A642     		cmp	r6, r4
 7480 0040 F4D9     		bls	.L736
 7481              	.LVL846:
 7482              	.L737:
3591:src/display.c **** 	    break;
3592:src/display.c **** 	}
3593:src/display.c **** 	set_status_sized(p+1, toolarge);
 7483              		.loc 1 3593 2 is_stmt 1 view .LVU2421
 7484              	.LBB469:
 7485              	.LBI469:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7486              		.loc 1 3344 19 view .LVU2422
 7487              	.LBB470:
3345:src/display.c ****       }
ARM GAS  /tmp/ccSEf3H9.s 			page 234


 7488              		.loc 1 3345 2 view .LVU2423
 7489 0042 40F24A23 		movw	r3, #586
 7490 0046 0093     		str	r3, [sp]
 7491 0048 4146     		mov	r1, r8
 7492 004a 4846     		mov	r0, r9
 7493 004c 8E23     		movs	r3, #142
 7494 004e 4A22     		movs	r2, #74
 7495 0050 FFF7FEFF 		bl	s_s_sized
 7496              	.LVL847:
3345:src/display.c ****       }
 7497              		.loc 1 3345 2 is_stmt 0 view .LVU2424
 7498              	.LBE470:
 7499              	.LBE469:
3594:src/display.c ****       }
 7500              		.loc 1 3594 7 view .LVU2425
 7501 0054 03B0     		add	sp, sp, #12
 7502              		.cfi_remember_state
 7503              		.cfi_def_cfa_offset 28
 7504              		@ sp needed
 7505 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7506              	.LVL848:
 7507              	.L744:
 7508              		.cfi_restore_state
 7509              	.LBB471:
 7510              	.LBI471:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7511              		.loc 1 3492 18 is_stmt 1 view .LVU2426
 7512              	.LBB472:
3493:src/display.c ****       }
 7513              		.loc 1 3493 2 view .LVU2427
3493:src/display.c ****       }
 7514              		.loc 1 3493 9 is_stmt 0 view .LVU2428
 7515 005a 0021     		movs	r1, #0
 7516 005c FFF7FEFF 		bl	pixel_length
 7517              	.LVL849:
3493:src/display.c ****       }
 7518              		.loc 1 3493 9 view .LVU2429
 7519              	.LBE472:
 7520              	.LBE471:
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7521              		.loc 1 3582 41 view .LVU2430
 7522 0060 4B28     		cmp	r0, #75
 7523 0062 D6DC     		bgt	.L731
3582:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7524              		.loc 1 3582 12 view .LVU2431
 7525 0064 4FF00008 		mov	r8, #0
3583:src/display.c **** 
 7526              		.loc 1 3583 36 view .LVU2432
 7527 0068 4746     		mov	r7, r8
 7528 006a D6E7     		b	.L732
 7529              	.L746:
 7530              		.align	2
 7531              	.L745:
 7532 006c 00000000 		.word	StateWhileOn
 7533              		.cfi_endproc
 7534              	.LFE47:
 7536              		.section	.text.set_status_top.part.0,"ax",%progbits
ARM GAS  /tmp/ccSEf3H9.s 			page 235


 7537              		.align	1
 7538              		.p2align 2,,3
 7539              		.syntax unified
 7540              		.thumb
 7541              		.thumb_func
 7542              		.fpu fpv4-sp-d16
 7544              	set_status_top.part.0:
 7545              	.LVL850:
 7546              	.LFB57:
3505:src/display.c **** 	if (no_status_top) return;
 7547              		.loc 1 3505 19 is_stmt 1 view -0
 7548              		.cfi_startproc
 7549              		@ args = 0, pretend = 0, frame = 0
 7550              		@ frame_needed = 0, uses_anonymous_args = 0
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7551              		.loc 1 3507 2 view .LVU2434
3505:src/display.c **** 	if (no_status_top) return;
 7552              		.loc 1 3505 19 is_stmt 0 view .LVU2435
 7553 0000 10B5     		push	{r4, lr}
 7554              		.cfi_def_cfa_offset 8
 7555              		.cfi_offset 4, -8
 7556              		.cfi_offset 14, -4
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7557              		.loc 1 3507 6 view .LVU2436
 7558 0002 184B     		ldr	r3, .L757
 7559 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7560              		.loc 1 3507 5 view .LVU2437
 7561 0006 13F04001 		ands	r1, r3, #64
3505:src/display.c **** 	if (no_status_top) return;
 7562              		.loc 1 3505 19 view .LVU2438
 7563 000a 82B0     		sub	sp, sp, #8
 7564              		.cfi_def_cfa_offset 16
3505:src/display.c **** 	if (no_status_top) return;
 7565              		.loc 1 3505 19 view .LVU2439
 7566 000c 0446     		mov	r4, r0
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7567              		.loc 1 3507 5 view .LVU2440
 7568 000e 0DD0     		beq	.L748
3508:src/display.c **** 	}
 7569              		.loc 1 3508 4 is_stmt 1 view .LVU2441
 7570 0010 1A06     		lsls	r2, r3, #24
 7571 0012 18D5     		bpl	.L755
 7572 0014 0121     		movs	r1, #1
 7573              	.LVL851:
 7574              	.L749:
 7575              	.LBB473:
 7576              	.LBI473:
3347:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7577              		.loc 1 3347 19 view .LVU2442
 7578              	.LBB474:
3348:src/display.c ****       }
 7579              		.loc 1 3348 2 view .LVU2443
 7580 0016 4FF45373 		mov	r3, #844
 7581 001a 0093     		str	r3, [sp]
 7582 001c 2046     		mov	r0, r4
 7583 001e 40F24A23 		movw	r3, #586
ARM GAS  /tmp/ccSEf3H9.s 			page 236


 7584 0022 2B22     		movs	r2, #43
 7585 0024 FFF7FEFF 		bl	s_s_sized
 7586              	.LVL852:
3348:src/display.c ****       }
 7587              		.loc 1 3348 2 is_stmt 0 view .LVU2444
 7588              	.LBE474:
 7589              	.LBE473:
3513:src/display.c **** #ifdef TOP_ROW
 7590              		.loc 1 3513 7 view .LVU2445
 7591 0028 02B0     		add	sp, sp, #8
 7592              		.cfi_remember_state
 7593              		.cfi_def_cfa_offset 8
 7594              		@ sp needed
 7595 002a 10BD     		pop	{r4, pc}
 7596              	.LVL853:
 7597              	.L748:
 7598              		.cfi_restore_state
3511:src/display.c **** 	}
 7599              		.loc 1 3511 4 is_stmt 1 view .LVU2446
 7600 002c 1B06     		lsls	r3, r3, #24
 7601 002e 12D5     		bpl	.L756
 7602 0030 0121     		movs	r1, #1
 7603              	.LVL854:
 7604              	.L751:
 7605              	.LBB475:
 7606              	.LBI475:
3344:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7607              		.loc 1 3344 19 view .LVU2447
 7608              	.LBB476:
3345:src/display.c ****       }
 7609              		.loc 1 3345 2 view .LVU2448
 7610 0032 40F24A23 		movw	r3, #586
 7611 0036 0093     		str	r3, [sp]
 7612 0038 2046     		mov	r0, r4
 7613 003a 8E23     		movs	r3, #142
 7614 003c 4A22     		movs	r2, #74
 7615 003e FFF7FEFF 		bl	s_s_sized
 7616              	.LVL855:
3345:src/display.c ****       }
 7617              		.loc 1 3345 2 is_stmt 0 view .LVU2449
 7618              	.LBE476:
 7619              	.LBE475:
3513:src/display.c **** #ifdef TOP_ROW
 7620              		.loc 1 3513 7 view .LVU2450
 7621 0042 02B0     		add	sp, sp, #8
 7622              		.cfi_remember_state
 7623              		.cfi_def_cfa_offset 8
 7624              		@ sp needed
 7625 0044 10BD     		pop	{r4, pc}
 7626              	.LVL856:
 7627              	.L755:
 7628              		.cfi_restore_state
 7629              	.LBB477:
 7630              	.LBI477:
3495:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7631              		.loc 1 3495 18 is_stmt 1 view .LVU2451
 7632              	.LBB478:
ARM GAS  /tmp/ccSEf3H9.s 			page 237


3496:src/display.c ****       }
 7633              		.loc 1 3496 2 view .LVU2452
3496:src/display.c ****       }
 7634              		.loc 1 3496 9 is_stmt 0 view .LVU2453
 7635 0046 0021     		movs	r1, #0
 7636 0048 FFF7FEFF 		bl	pixel_length
 7637              	.LVL857:
3496:src/display.c ****       }
 7638              		.loc 1 3496 9 view .LVU2454
 7639              	.LBE478:
 7640              	.LBE477:
3508:src/display.c **** 	}
 7641              		.loc 1 3508 4 view .LVU2455
 7642 004c 2C28     		cmp	r0, #44
 7643 004e D4BF     		ite	le
 7644 0050 0021     		movle	r1, #0
 7645 0052 0121     		movgt	r1, #1
 7646 0054 DFE7     		b	.L749
 7647              	.LVL858:
 7648              	.L756:
 7649              	.LBB479:
 7650              	.LBI479:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7651              		.loc 1 3492 18 is_stmt 1 view .LVU2456
 7652              	.LBB480:
3493:src/display.c ****       }
 7653              		.loc 1 3493 2 view .LVU2457
3493:src/display.c ****       }
 7654              		.loc 1 3493 9 is_stmt 0 view .LVU2458
 7655 0056 FFF7FEFF 		bl	pixel_length
 7656              	.LVL859:
3493:src/display.c ****       }
 7657              		.loc 1 3493 9 view .LVU2459
 7658              	.LBE480:
 7659              	.LBE479:
3511:src/display.c **** 	}
 7660              		.loc 1 3511 4 view .LVU2460
 7661 005a 4B28     		cmp	r0, #75
 7662 005c D4BF     		ite	le
 7663 005e 0021     		movle	r1, #0
 7664 0060 0121     		movgt	r1, #1
 7665 0062 E6E7     		b	.L751
 7666              	.L758:
 7667              		.align	2
 7668              	.L757:
 7669 0064 00000000 		.word	StateWhileOn
 7670              		.cfi_endproc
 7671              	.LFE57:
 7673              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7674              		.align	2
 7675              	.LC2:
 7676 0000 32630600 		.ascii	"2c\006\000"
 7677              		.align	2
 7678              	.LC3:
 7679 0004 07C63C00 		.ascii	"\007\306<\000"
 7680              		.align	2
 7681              	.LC4:
ARM GAS  /tmp/ccSEf3H9.s 			page 238


 7682 0008 07876900 		.ascii	"\007\207i\000"
 7683              		.align	2
 7684              	.LC5:
 7685 000c 07C67900 		.ascii	"\007\306y\000"
 7686              		.align	2
 7687              	.LC6:
 7688 0010 07950600 		.ascii	"\007\225\006\000"
 7689              		.align	2
 7690              	.LC7:
 7691 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7691      060600
 7692 001b 00       		.align	2
 7693              	.LC8:
 7694 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7694      060600
 7695 0023 00       		.align	2
 7696              	.LC9:
 7697 0024 07C74400 		.ascii	"\007\307D\000"
 7698              		.align	2
 7699              	.LC10:
 7700 0028 07872000 		.ascii	"\007\207 \000"
 7701              		.align	2
 7702              	.LC11:
 7703 002c 06060788 		.ascii	"\006\006\007\210\007\000"
 7703      0700
 7704 0032 0000     		.align	2
 7705              	.LC12:
 7706 0034 07C73C00 		.ascii	"\007\307<\000"
 7707              		.align	2
 7708              	.LC13:
 7709 0038 07C77900 		.ascii	"\007\307y\000"
 7710              		.align	2
 7711              	.LC14:
 7712 003c 0784060D 		.ascii	"\007\204\006\015\000"
 7712      00
 7713 0041 000000   		.align	2
 7714              	.LC16:
 7715 0044 07E43F00 		.ascii	"\007\344?\000"
 7716              		.section	.text.annunciators,"ax",%progbits
 7717              		.align	1
 7718              		.p2align 2,,3
 7719              		.syntax unified
 7720              		.thumb
 7721              		.thumb_func
 7722              		.fpu fpv4-sp-d16
 7724              	annunciators:
 7725              	.LFB16:
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7726              		.loc 1 601 36 is_stmt 1 view -0
 7727              		.cfi_startproc
 7728              		@ args = 0, pretend = 0, frame = 128
 7729              		@ frame_needed = 0, uses_anonymous_args = 0
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7730              		.loc 1 603 7 view .LVU2462
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7731              		.loc 1 601 36 is_stmt 0 view .LVU2463
 7732 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/ccSEf3H9.s 			page 239


 7733              		.cfi_def_cfa_offset 28
 7734              		.cfi_offset 4, -28
 7735              		.cfi_offset 5, -24
 7736              		.cfi_offset 6, -20
 7737              		.cfi_offset 7, -16
 7738              		.cfi_offset 8, -12
 7739              		.cfi_offset 9, -8
 7740              		.cfi_offset 14, -4
 615:src/display.c **** #  endif
 7741              		.loc 1 615 38 view .LVU2464
 7742 0004 BF4F     		ldr	r7, .L887
 601:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7743              		.loc 1 601 36 view .LVU2465
 7744 0006 A3B0     		sub	sp, sp, #140
 7745              		.cfi_def_cfa_offset 168
 7746              	.LVL860:
 604:src/display.c ****       int n;
 7747              		.loc 1 604 7 is_stmt 1 view .LVU2466
 605:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7748              		.loc 1 605 7 view .LVU2467
 606:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7749              		.loc 1 606 7 view .LVU2468
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7750              		.loc 1 607 7 view .LVU2469
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7751              		.loc 1 607 43 is_stmt 0 view .LVU2470
 7752 0008 FFF7FEFF 		bl	cur_shift
 7753              	.LVL861:
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7754              		.loc 1 607 18 view .LVU2471
 7755 000c BE4B     		ldr	r3, .L887+4
 615:src/display.c **** #  endif
 7756              		.loc 1 615 38 view .LVU2472
 7757 000e 3A68     		ldr	r2, [r7]
 607:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7758              		.loc 1 607 18 view .LVU2473
 7759 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7760              	.LVL862:
 615:src/display.c **** #  endif
 7761              		.loc 1 615 7 is_stmt 1 view .LVU2474
 615:src/display.c **** #  endif
 7762              		.loc 1 615 38 is_stmt 0 view .LVU2475
 7763 0014 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7764              		.loc 1 646 7 view .LVU2476
 7765 0018 0CAE     		add	r6, sp, #48
 7766              	.LVL863:
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7767              		.loc 1 646 7 view .LVU2477
 7768 001a 2A22     		movs	r2, #42
 7769 001c 0021     		movs	r1, #0
 7770 001e 3046     		mov	r0, r6
 7771 0020 FFF7FEFF 		bl	xset
 7772              	.LVL864:
 647:src/display.c ****       
 7773              		.loc 1 647 7 view .LVU2478
 7774 0024 0021     		movs	r1, #0
ARM GAS  /tmp/ccSEf3H9.s 			page 240


 7775 0026 17A8     		add	r0, sp, #92
 7776              	.LVL865:
 647:src/display.c ****       
 7777              		.loc 1 647 7 view .LVU2479
 7778 0028 2A22     		movs	r2, #42
 7779 002a FFF7FEFF 		bl	xset
 7780              	.LVL866:
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7781              		.loc 1 649 11 view .LVU2480
 7782 002e 3B68     		ldr	r3, [r7]
 7783 0030 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7784              		.loc 1 649 10 view .LVU2481
 7785 0034 D907     		lsls	r1, r3, #31
 615:src/display.c **** #  endif
 7786              		.loc 1 615 17 view .LVU2482
 7787 0036 C4F38004 		ubfx	r4, r4, #2, #1
 7788              	.LVL867:
 618:src/display.c **** #  else
 7789              		.loc 1 618 7 is_stmt 1 view .LVU2483
 623:src/display.c **** #  else
 7790              		.loc 1 623 7 view .LVU2484
 633:src/display.c **** #else
 7791              		.loc 1 633 7 view .LVU2485
 641:src/display.c **** #else
 7792              		.loc 1 641 7 view .LVU2486
 646:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7793              		.loc 1 646 7 view .LVU2487
 647:src/display.c ****       
 7794              		.loc 1 647 7 view .LVU2488
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7795              		.loc 1 649 7 view .LVU2489
 649:src/display.c **** #ifdef SHOW_STACK_SIZE
 7796              		.loc 1 649 10 is_stmt 0 view .LVU2490
 7797 003a 00F1FB80 		bmi	.L870
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7798              		.loc 1 688 12 is_stmt 1 view .LVU2491
 688:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7799              		.loc 1 688 15 is_stmt 0 view .LVU2492
 7800 003e 84BB     		cbnz	r4, .L774
 706:src/display.c **** 	    *p2++ = shift_char;
 7801              		.loc 1 706 4 is_stmt 1 view .LVU2493
 706:src/display.c **** 	    *p2++ = shift_char;
 7802              		.loc 1 706 7 is_stmt 0 view .LVU2494
 7803 0040 B8F1200F 		cmp	r8, #32
 7804 0044 00F0D581 		beq	.L775
 7805              	.L777:
 707:src/display.c **** 	    *p2++ = '\006';
 7806              		.loc 1 707 6 is_stmt 1 view .LVU2495
 7807              	.LVL868:
 708:src/display.c **** 	  }
 7808              		.loc 1 708 12 is_stmt 0 view .LVU2496
 7809 0048 0623     		movs	r3, #6
 707:src/display.c **** 	    *p2++ = '\006';
 7810              		.loc 1 707 12 view .LVU2497
 7811 004a 8DF85C80 		strb	r8, [sp, #92]
 708:src/display.c **** 	  }
ARM GAS  /tmp/ccSEf3H9.s 			page 241


 7812              		.loc 1 708 6 is_stmt 1 view .LVU2498
 7813              	.LVL869:
 708:src/display.c **** 	  }
 7814              		.loc 1 708 12 is_stmt 0 view .LVU2499
 7815 004e 8DF85D30 		strb	r3, [sp, #93]
 708:src/display.c **** 	  }
 7816              		.loc 1 708 9 view .LVU2500
 7817 0052 0DF15E00 		add	r0, sp, #94
 7818              	.LVL870:
 7819              	.L776:
 714:src/display.c **** 	  *p2++ = ' ';
 7820              		.loc 1 714 2 is_stmt 1 view .LVU2501
 714:src/display.c **** 	  *p2++ = ' ';
 7821              		.loc 1 714 6 is_stmt 0 view .LVU2502
 7822 0056 AD4D     		ldr	r5, .L887+8
 7823 0058 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 714:src/display.c **** 	  *p2++ = ' ';
 7824              		.loc 1 714 5 view .LVU2503
 7825 005a 9A07     		lsls	r2, r3, #30
 7826 005c 00F1A881 		bmi	.L871
 719:src/display.c **** 	  *p2++ = ' ';
 7827              		.loc 1 719 2 is_stmt 1 view .LVU2504
 719:src/display.c **** 	  *p2++ = ' ';
 7828              		.loc 1 719 5 is_stmt 0 view .LVU2505
 7829 0060 5907     		lsls	r1, r3, #29
 7830 0062 00F18881 		bmi	.L872
 725:src/display.c **** 	  if (State2.wascomplex) {
 7831              		.loc 1 725 2 is_stmt 1 view .LVU2506
 725:src/display.c **** 	  if (State2.wascomplex) {
 7832              		.loc 1 725 5 is_stmt 0 view .LVU2507
 7833 0066 B8F1200F 		cmp	r8, #32
 7834 006a 00F0D481 		beq	.L873
 7835              	.L780:
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7836              		.loc 1 742 2 is_stmt 1 view .LVU2508
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7837              		.loc 1 742 16 is_stmt 0 view .LVU2509
 7838 006e 3B68     		ldr	r3, [r7]
 7839 0070 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7840 0074 C3F30113 		ubfx	r3, r3, #4, #2
 742:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7841              		.loc 1 742 2 view .LVU2510
 7842 0078 012B     		cmp	r3, #1
 7843 007a 00F01382 		beq	.L821
 7844 007e A449     		ldr	r1, .L887+12
 7845 0080 A44A     		ldr	r2, .L887+16
 7846 0082 022B     		cmp	r3, #2
 7847 0084 08BF     		it	eq
 7848 0086 1146     		moveq	r1, r2
 7849              	.L782:
 7850              	.LVL871:
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7851              		.loc 1 756 2 is_stmt 1 view .LVU2511
 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7852              		.loc 1 756 7 is_stmt 0 view .LVU2512
 7853 0088 FFF7FEFF 		bl	scopy
 7854              	.LVL872:
ARM GAS  /tmp/ccSEf3H9.s 			page 242


 756:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7855              		.loc 1 756 7 view .LVU2513
 7856 008c 0446     		mov	r4, r0
 7857              	.LVL873:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7858              		.loc 1 758 2 is_stmt 1 view .LVU2514
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7859              		.loc 1 758 6 is_stmt 0 view .LVU2515
 7860 008e FFF7FEFF 		bl	get_trig_mode
 7861              	.LVL874:
 758:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7862              		.loc 1 758 5 view .LVU2516
 7863 0092 0228     		cmp	r0, #2
 7864 0094 40F02381 		bne	.L773
 759:src/display.c **** 	}
 7865              		.loc 1 759 4 is_stmt 1 view .LVU2517
 7866 0098 9F49     		ldr	r1, .L887+20
 7867 009a 2046     		mov	r0, r4
 7868 009c FFF7FEFF 		bl	scopy
 7869              	.LVL875:
 7870 00a0 1DE1     		b	.L773
 7871              	.LVL876:
 7872              	.L774:
 770:src/display.c **** 	  *p2++ = '\007';
 7873              		.loc 1 770 2 view .LVU2518
 770:src/display.c **** 	  *p2++ = '\007';
 7874              		.loc 1 770 6 is_stmt 0 view .LVU2519
 7875 00a2 9A4D     		ldr	r5, .L887+8
 7876 00a4 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 770:src/display.c **** 	  *p2++ = '\007';
 7877              		.loc 1 770 5 view .LVU2520
 7878 00a6 9A07     		lsls	r2, r3, #30
 7879 00a8 00F14A81 		bmi	.L874
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7880              		.loc 1 778 4 is_stmt 1 view .LVU2521
 7881              	.LVL877:
 779:src/display.c **** 	  *p2++ = shift_char;
 7882              		.loc 1 779 4 view .LVU2522
 778:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7883              		.loc 1 778 10 is_stmt 0 view .LVU2523
 7884 00ac 4CF20773 		movw	r3, #50951
 7885 00b0 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 780:src/display.c **** 	  //	  goto no_copy;
 7886              		.loc 1 780 4 is_stmt 1 view .LVU2524
 7887              	.LVL878:
 785:src/display.c **** 	    q = "\007\207i";
 7888              		.loc 1 785 8 is_stmt 0 view .LVU2525
 7889 00b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 780:src/display.c **** 	  //	  goto no_copy;
 7890              		.loc 1 780 10 view .LVU2526
 7891 00b6 8DF85E80 		strb	r8, [sp, #94]
 785:src/display.c **** 	    q = "\007\207i";
 7892              		.loc 1 785 7 view .LVU2527
 7893 00ba 13F0C00F 		tst	r3, #192
 780:src/display.c **** 	  //	  goto no_copy;
 7894              		.loc 1 780 7 view .LVU2528
 7895 00be 0DF15F09 		add	r9, sp, #95
ARM GAS  /tmp/ccSEf3H9.s 			page 243


 7896              	.LVL879:
 785:src/display.c **** 	    q = "\007\207i";
 7897              		.loc 1 785 4 is_stmt 1 view .LVU2529
 785:src/display.c **** 	    q = "\007\207i";
 7898              		.loc 1 785 7 is_stmt 0 view .LVU2530
 7899 00c2 40F04D81 		bne	.L875
 7900              	.L785:
 790:src/display.c **** 	    q = "\007\307<";
 7901              		.loc 1 790 9 is_stmt 1 view .LVU2531
 790:src/display.c **** 	    q = "\007\307<";
 7902              		.loc 1 790 23 is_stmt 0 view .LVU2532
 7903 00c6 954B     		ldr	r3, .L887+24
 7904 00c8 1B68     		ldr	r3, [r3]
 790:src/display.c **** 	    q = "\007\307<";
 7905              		.loc 1 790 12 view .LVU2533
 7906 00ca 012B     		cmp	r3, #1
 7907 00cc 00F0B681 		beq	.L876
 795:src/display.c **** 	    q = "\007\307y";
 7908              		.loc 1 795 9 is_stmt 1 view .LVU2534
 795:src/display.c **** 	    q = "\007\307y";
 7909              		.loc 1 795 12 is_stmt 0 view .LVU2535
 7910 00d0 022B     		cmp	r3, #2
 7911 00d2 00F0E981 		beq	.L877
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 7912              		.loc 1 603 22 view .LVU2536
 7913 00d6 B046     		mov	r8, r6
 7914              	.LVL880:
 7915              	.L786:
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7916              		.loc 1 802 6 is_stmt 1 view .LVU2537
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7917              		.loc 1 802 10 is_stmt 0 view .LVU2538
 7918 00d8 FFF7FEFF 		bl	get_trig_mode
 7919              	.LVL881:
 804:src/display.c **** 	      *p2++ = '\207';
 7920              		.loc 1 804 14 view .LVU2539
 7921 00dc 0723     		movs	r3, #7
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7922              		.loc 1 802 9 view .LVU2540
 7923 00de 0228     		cmp	r0, #2
 805:src/display.c **** 	      *p2++ = '\007';	    
 7924              		.loc 1 805 14 view .LVU2541
 7925 00e0 4FF08702 		mov	r2, #135
 804:src/display.c **** 	      *p2++ = '\207';
 7926              		.loc 1 804 14 view .LVU2542
 7927 00e4 89F80030 		strb	r3, [r9]
 802:src/display.c **** 	    //	    q = "\007\207\007";
 7928              		.loc 1 802 9 view .LVU2543
 7929 00e8 00F06781 		beq	.L878
 809:src/display.c **** 	      *p2++ = '\207';
 7930              		.loc 1 809 8 is_stmt 1 view .LVU2544
 7931              	.LVL882:
 810:src/display.c **** 	      *p2++ = ' ';
 7932              		.loc 1 810 8 view .LVU2545
 811:src/display.c **** 	    }
 7933              		.loc 1 811 14 is_stmt 0 view .LVU2546
 7934 00ec 2023     		movs	r3, #32
ARM GAS  /tmp/ccSEf3H9.s 			page 244


 810:src/display.c **** 	      *p2++ = ' ';
 7935              		.loc 1 810 14 view .LVU2547
 7936 00ee 89F80120 		strb	r2, [r9, #1]
 811:src/display.c **** 	    }
 7937              		.loc 1 811 8 is_stmt 1 view .LVU2548
 811:src/display.c **** 	    }
 7938              		.loc 1 811 14 is_stmt 0 view .LVU2549
 7939 00f2 89F80230 		strb	r3, [r9, #2]
 811:src/display.c **** 	    }
 7940              		.loc 1 811 11 view .LVU2550
 7941 00f6 09F10309 		add	r9, r9, #3
 7942              	.LVL883:
 7943              	.L789:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7944              		.loc 1 816 4 is_stmt 1 view .LVU2551
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7945              		.loc 1 816 9 is_stmt 0 view .LVU2552
 7946 00fa FFF7FEFF 		bl	is_dblmode
 7947              	.LVL884:
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7948              		.loc 1 816 36 view .LVU2553
 7949 00fe 884B     		ldr	r3, .L887+28
 7950 0100 884A     		ldr	r2, .L887+32
 816:src/display.c **** 	  p2 = scopy(p2, q);
 7951              		.loc 1 816 9 view .LVU2554
 7952 0102 0146     		mov	r1, r0
 7953              	.LVL885:
 817:src/display.c **** #else
 7954              		.loc 1 817 4 is_stmt 1 view .LVU2555
 817:src/display.c **** #else
 7955              		.loc 1 817 9 is_stmt 0 view .LVU2556
 7956 0104 0029     		cmp	r1, #0
 7957 0106 14BF     		ite	ne
 7958 0108 1146     		movne	r1, r2
 7959 010a 1946     		moveq	r1, r3
 7960              	.LVL886:
 817:src/display.c **** #else
 7961              		.loc 1 817 9 view .LVU2557
 7962 010c 4846     		mov	r0, r9
 7963 010e FFF7FEFF 		bl	scopy
 7964              	.LVL887:
 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7965              		.loc 1 836 16 view .LVU2558
 7966 0112 3B68     		ldr	r3, [r7]
 7967 0114 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7968 0118 C1F30111 		ubfx	r1, r1, #4, #2
 7969              	.LVL888:
 836:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7970              		.loc 1 836 2 is_stmt 1 view .LVU2559
 7971 011c 0129     		cmp	r1, #1
 7972 011e 00F05381 		beq	.L825
 7973 0122 7B4B     		ldr	r3, .L887+12
 7974 0124 7B4A     		ldr	r2, .L887+16
 7975 0126 0229     		cmp	r1, #2
 7976 0128 14BF     		ite	ne
 7977 012a 1946     		movne	r1, r3
 7978 012c 1146     		moveq	r1, r2
ARM GAS  /tmp/ccSEf3H9.s 			page 245


 7979              	.L791:
 7980              	.LVL889:
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7981              		.loc 1 853 2 view .LVU2560
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7982              		.loc 1 853 6 is_stmt 0 view .LVU2561
 7983 012e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 853:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7984              		.loc 1 853 5 view .LVU2562
 7985 0130 5B07     		lsls	r3, r3, #29
 854:src/display.c **** 	} // no need to skip y display with arrow here
 7986              		.loc 1 854 4 is_stmt 1 view .LVU2563
 7987 0132 48BF     		it	mi
 7988 0134 7C49     		ldrmi	r1, .L887+36
 7989              	.LVL890:
 857:src/display.c **** 	}
 7990              		.loc 1 857 4 view .LVU2564
 857:src/display.c **** 	}
 7991              		.loc 1 857 9 is_stmt 0 view .LVU2565
 7992 0136 FFF7FEFF 		bl	scopy
 7993              	.LVL891:
 859:src/display.c **** 	  decNumber y;
 7994              		.loc 1 859 2 is_stmt 1 view .LVU2566
 859:src/display.c **** 	  decNumber y;
 7995              		.loc 1 859 6 is_stmt 0 view .LVU2567
 7996 013a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 859:src/display.c **** 	  decNumber y;
 7997              		.loc 1 859 5 view .LVU2568
 7998 013c 5A06     		lsls	r2, r3, #25
 7999 013e 40F1D180 		bpl	.L812
 8000              	.L763:
 8001              	.LBB491:
 860:src/display.c **** 	display_yreg:
 8002              		.loc 1 860 4 is_stmt 1 view .LVU2569
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8003              		.loc 1 867 4 view .LVU2570
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8004              		.loc 1 867 8 is_stmt 0 view .LVU2571
 8005 0142 3B68     		ldr	r3, [r7]
 8006 0144 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 867:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8007              		.loc 1 867 7 view .LVU2572
 8008 0148 DB07     		lsls	r3, r3, #31
 8009 014a 00F15D81 		bmi	.L879
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8010              		.loc 1 872 4 is_stmt 1 view .LVU2573
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8011              		.loc 1 872 34 is_stmt 0 view .LVU2574
 8012 014e DFF8E891 		ldr	r9, .L887+52
 8013 0152 D9F80010 		ldr	r1, [r9]
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8014              		.loc 1 872 4 view .LVU2575
 8015 0156 6329     		cmp	r1, #99
 8016 0158 00F33881 		bgt	.L880
 8017              	.LVL892:
 8018              	.L797:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
ARM GAS  /tmp/ccSEf3H9.s 			page 246


 8019              		.loc 1 872 4 discriminator 5 view .LVU2576
 8020 015c 0131     		adds	r1, r1, #1
 8021              	.L801:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8022              		.loc 1 872 4 discriminator 6 view .LVU2577
 8023 015e 03A8     		add	r0, sp, #12
 8024 0160 FFF7FEFF 		bl	getRegister
 8025              	.LVL893:
 875:src/display.c **** 	    if (yreg_hms && State2.hms) {
 8026              		.loc 1 875 4 is_stmt 1 discriminator 6 view .LVU2578
 875:src/display.c **** 	    if (yreg_hms && State2.hms) {
 8027              		.loc 1 875 7 is_stmt 0 discriminator 6 view .LVU2579
 8028 0164 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 8029 0168 11F07001 		ands	r1, r1, #112
 8030 016c 40D1     		bne	.L803
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 8031              		.loc 1 876 6 is_stmt 1 view .LVU2580
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 8032              		.loc 1 876 19 is_stmt 0 view .LVU2581
 8033 016e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 8034              		.loc 1 876 9 view .LVU2582
 8035 0170 13F0010F 		tst	r3, #1
 8036              	.LBB492:
 877:src/display.c **** 
 8037              		.loc 1 877 44 view .LVU2583
 8038 0174 3B68     		ldr	r3, [r7]
 8039              	.LBE492:
 876:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 8040              		.loc 1 876 9 view .LVU2584
 8041 0176 40F06781 		bne	.L881
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8042              		.loc 1 897 6 is_stmt 1 view .LVU2585
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8043              		.loc 1 897 21 is_stmt 0 view .LVU2586
 8044 017a 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 897:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8045              		.loc 1 897 9 view .LVU2587
 8046 017e 9806     		lsls	r0, r3, #26
 8047 0180 36D5     		bpl	.L803
 899:src/display.c **** #endif
 8048              		.loc 1 899 6 view .LVU2588
 8049 0182 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 899:src/display.c **** #endif
 8050              		.loc 1 899 3 view .LVU2589
 8051 0184 13F00204 		ands	r4, r3, #2
 8052 0188 32D1     		bne	.L803
 902:src/display.c **** #endif
 8053              		.loc 1 902 6 view .LVU2590
 8054 018a 644B     		ldr	r3, .L887+24
 902:src/display.c **** #endif
 8055              		.loc 1 902 3 view .LVU2591
 8056 018c 1B68     		ldr	r3, [r3]
 8057 018e 012B     		cmp	r3, #1
 8058 0190 2ED0     		beq	.L803
 904:src/display.c **** 	      char ltgteq;
 8059              		.loc 1 904 6 view .LVU2592
ARM GAS  /tmp/ccSEf3H9.s 			page 247


 8060 0192 4146     		mov	r1, r8
 8061 0194 03A8     		add	r0, sp, #12
 8062 0196 FFF7FEFF 		bl	set_x_fract
 8063              	.LVL894:
 904:src/display.c **** 	      char ltgteq;
 8064              		.loc 1 904 3 view .LVU2593
 8065 019a 48B3     		cbz	r0, .L803
 8066              	.LBB493:
 905:src/display.c **** 
 8067              		.loc 1 905 8 is_stmt 1 view .LVU2594
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8068              		.loc 1 907 8 view .LVU2595
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8069              		.loc 1 907 12 is_stmt 0 view .LVU2596
 8070 019c 2146     		mov	r1, r4
 8071 019e 3046     		mov	r0, r6
 8072 01a0 FFF7FEFF 		bl	find_char
 8073              	.LVL895:
 8074 01a4 0446     		mov	r4, r0
 907:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8075              		.loc 1 907 10 view .LVU2597
 8076 01a6 0238     		subs	r0, r0, #2
 8077              	.LVL896:
 909:src/display.c **** 	      switch (ltgteq) {
 8078              		.loc 1 909 8 is_stmt 1 view .LVU2598
 909:src/display.c **** 	      switch (ltgteq) {
 8079              		.loc 1 909 15 is_stmt 0 view .LVU2599
 8080 01a8 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 8081              	.LVL897:
 910:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8082              		.loc 1 910 8 is_stmt 1 view .LVU2600
 8083 01ac 472F     		cmp	r7, #71
 8084 01ae 00F08881 		beq	.L827
 912:src/display.c **** 	      }
 8085              		.loc 1 912 25 is_stmt 0 view .LVU2601
 8086 01b2 4C2F     		cmp	r7, #76
 8087 01b4 08BF     		it	eq
 8088 01b6 3C27     		moveq	r7, #60
 8089              	.LVL898:
 8090              	.L808:
 914:src/display.c **** 	      q[2] = ltgteq;
 8091              		.loc 1 914 8 is_stmt 1 view .LVU2602
 8092 01b8 5C49     		ldr	r1, .L887+40
 8093 01ba FFF7FEFF 		bl	scopy
 8094              	.LVL899:
 915:src/display.c **** 
 8095              		.loc 1 915 8 view .LVU2603
 915:src/display.c **** 
 8096              		.loc 1 915 13 is_stmt 0 view .LVU2604
 8097 01be 2770     		strb	r7, [r4]
 917:src/display.c **** 		goto skip;
 8098              		.loc 1 917 8 is_stmt 1 view .LVU2605
 917:src/display.c **** 		goto skip;
 8099              		.loc 1 917 12 is_stmt 0 view .LVU2606
 8100 01c0 0121     		movs	r1, #1
 8101 01c2 3046     		mov	r0, r6
 8102 01c4 FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/ccSEf3H9.s 			page 248


 8103              	.LVL900:
 917:src/display.c **** 		goto skip;
 8104              		.loc 1 917 11 view .LVU2607
 8105 01c8 2C28     		cmp	r0, #44
 8106 01ca 40F38880 		ble	.L773
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8107              		.loc 1 920 8 is_stmt 1 view .LVU2608
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8108              		.loc 1 920 14 is_stmt 0 view .LVU2609
 8109 01ce 0027     		movs	r7, #0
 8110              	.LVL901:
 920:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8111              		.loc 1 920 14 view .LVU2610
 8112 01d0 04F8037C 		strb	r7, [r4, #-3]
 921:src/display.c **** 		goto skip;
 8113              		.loc 1 921 8 is_stmt 1 view .LVU2611
 921:src/display.c **** 		goto skip;
 8114              		.loc 1 921 12 is_stmt 0 view .LVU2612
 8115 01d4 0121     		movs	r1, #1
 8116 01d6 3046     		mov	r0, r6
 8117 01d8 FFF7FEFF 		bl	pixel_length
 8118              	.LVL902:
 921:src/display.c **** 		goto skip;
 8119              		.loc 1 921 11 view .LVU2613
 8120 01dc 2C28     		cmp	r0, #44
 8121 01de 7EDD     		ble	.L773
 924:src/display.c **** 	    }
 8122              		.loc 1 924 8 is_stmt 1 view .LVU2614
 924:src/display.c **** 	    }
 8123              		.loc 1 924 39 is_stmt 0 view .LVU2615
 8124 01e0 A8EB0602 		sub	r2, r8, r6
 924:src/display.c **** 	    }
 8125              		.loc 1 924 8 view .LVU2616
 8126 01e4 3946     		mov	r1, r7
 8127 01e6 C2F12A02 		rsb	r2, r2, #42
 8128 01ea 4046     		mov	r0, r8
 8129 01ec FFF7FEFF 		bl	xset
 8130              	.LVL903:
 8131              	.L803:
 924:src/display.c **** 	    }
 8132              		.loc 1 924 8 view .LVU2617
 8133              	.LBE493:
 927:src/display.c **** 	    int extra_pixels;
 8134              		.loc 1 927 4 is_stmt 1 view .LVU2618
 927:src/display.c **** 	    int extra_pixels;
 8135              		.loc 1 927 10 is_stmt 0 view .LVU2619
 8136 01f0 0C23     		movs	r3, #12
 8137 01f2 0293     		str	r3, [sp, #8]
 927:src/display.c **** 	    int extra_pixels;
 8138              		.loc 1 927 27 is_stmt 1 view .LVU2620
 8139 01f4 0EE0     		b	.L810
 8140              	.LVL904:
 8141              	.L882:
 8142              	.LBB494:
 935:src/display.c **** 
 8143              		.loc 1 935 6 is_stmt 0 view .LVU2621
 8144 01f6 029A     		ldr	r2, [sp, #8]
ARM GAS  /tmp/ccSEf3H9.s 			page 249


 8145 01f8 0A32     		adds	r2, r2, #10
 8146 01fa FFF7FEFF 		bl	xset
 8147              	.LVL905:
 937:src/display.c **** 	  }
 8148              		.loc 1 937 6 is_stmt 1 view .LVU2622
 937:src/display.c **** 	  }
 8149              		.loc 1 937 30 is_stmt 0 view .LVU2623
 8150 01fe B4F14802 		subs	r2, r4, #72
 937:src/display.c **** 	  }
 8151              		.loc 1 937 8 view .LVU2624
 8152 0202 029B     		ldr	r3, [sp, #8]
 937:src/display.c **** 	  }
 8153              		.loc 1 937 30 view .LVU2625
 8154 0204 48BF     		it	mi
 8155 0206 A4F14502 		submi	r2, r4, #69
 937:src/display.c **** 	  }
 8156              		.loc 1 937 8 view .LVU2626
 8157 020a A3EBA203 		sub	r3, r3, r2, asr #2
 8158              	.LBE494:
 927:src/display.c **** 	    int extra_pixels;
 8159              		.loc 1 927 4 view .LVU2627
 8160 020e 012B     		cmp	r3, #1
 8161              	.LBB495:
 937:src/display.c **** 	  }
 8162              		.loc 1 937 8 view .LVU2628
 8163 0210 0293     		str	r3, [sp, #8]
 8164              	.LBE495:
 927:src/display.c **** 	    int extra_pixels;
 8165              		.loc 1 927 27 is_stmt 1 view .LVU2629
 927:src/display.c **** 	    int extra_pixels;
 8166              		.loc 1 927 4 is_stmt 0 view .LVU2630
 8167 0212 64DD     		ble	.L773
 8168              	.LVL906:
 8169              	.L810:
 8170              	.LBB496:
 928:src/display.c **** 
 8171              		.loc 1 928 6 is_stmt 1 view .LVU2631
 930:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8172              		.loc 1 930 6 view .LVU2632
 8173 0214 02AA     		add	r2, sp, #8
 8174 0216 4146     		mov	r1, r8
 8175 0218 03A8     		add	r0, sp, #12
 8176 021a FFF7FEFF 		bl	set_x_dn
 8177              	.LVL907:
 931:src/display.c **** 	    if (extra_pixels <= 0)
 8178              		.loc 1 931 6 view .LVU2633
 931:src/display.c **** 	    if (extra_pixels <= 0)
 8179              		.loc 1 931 21 is_stmt 0 view .LVU2634
 8180 021e 0121     		movs	r1, #1
 8181 0220 3046     		mov	r0, r6
 8182 0222 FFF7FEFF 		bl	pixel_length
 8183              	.LVL908:
 935:src/display.c **** 
 8184              		.loc 1 935 6 is_stmt 1 view .LVU2635
 931:src/display.c **** 	    if (extra_pixels <= 0)
 8185              		.loc 1 931 21 is_stmt 0 view .LVU2636
 8186 0226 0446     		mov	r4, r0
ARM GAS  /tmp/ccSEf3H9.s 			page 250


 8187              	.LVL909:
 932:src/display.c **** 	      break;
 8188              		.loc 1 932 6 is_stmt 1 view .LVU2637
 932:src/display.c **** 	      break;
 8189              		.loc 1 932 9 is_stmt 0 view .LVU2638
 8190 0228 4B2C     		cmp	r4, #75
 935:src/display.c **** 
 8191              		.loc 1 935 6 view .LVU2639
 8192 022a 4FF00001 		mov	r1, #0
 8193 022e 4046     		mov	r0, r8
 8194              	.LVL910:
 932:src/display.c **** 	      break;
 8195              		.loc 1 932 9 view .LVU2640
 8196 0230 E1DC     		bgt	.L882
 8197              	.LVL911:
 932:src/display.c **** 	      break;
 8198              		.loc 1 932 9 view .LVU2641
 8199              	.LBE496:
 8200 0232 54E0     		b	.L773
 8201              	.LVL912:
 8202              	.L870:
 932:src/display.c **** 	      break;
 8203              		.loc 1 932 9 view .LVU2642
 8204              	.LBE491:
 659:src/display.c **** 	    *p2++ = '\006';
 8205              		.loc 1 659 6 is_stmt 1 view .LVU2643
 660:src/display.c **** 	  }
 8206              		.loc 1 660 12 is_stmt 0 view .LVU2644
 8207 0234 0623     		movs	r3, #6
 8208 0236 8DF85D30 		strb	r3, [sp, #93]
 659:src/display.c **** 	    *p2++ = '\006';
 8209              		.loc 1 659 12 view .LVU2645
 8210 023a 8DF85C80 		strb	r8, [sp, #92]
 660:src/display.c **** 	  }
 8211              		.loc 1 660 6 is_stmt 1 view .LVU2646
 8212              	.LVL913:
 663:src/display.c **** 	default:
 8213              		.loc 1 663 2 view .LVU2647
 663:src/display.c **** 	default:
 8214              		.loc 1 663 9 is_stmt 0 view .LVU2648
 8215 023e FFF7FEFF 		bl	int_mode
 8216              	.LVL914:
 8217 0242 0138     		subs	r0, r0, #1
 8218 0244 C0B2     		uxtb	r0, r0
 8219 0246 0228     		cmp	r0, #2
 8220 0248 96BF     		itet	ls
 8221 024a 394B     		ldrls	r3, .L887+44
 8222 024c 3949     		ldrhi	r1, .L887+48
 8223 024e 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8224              	.LVL915:
 670:src/display.c **** 	*q++ = '\006';
 8225              		.loc 1 670 2 is_stmt 1 view .LVU2649
 670:src/display.c **** 	*q++ = '\006';
 8226              		.loc 1 670 6 is_stmt 0 view .LVU2650
 8227 0252 0DF15E00 		add	r0, sp, #94
 8228              	.LVL916:
 670:src/display.c **** 	*q++ = '\006';
ARM GAS  /tmp/ccSEf3H9.s 			page 251


 8229              		.loc 1 670 6 view .LVU2651
 8230 0256 FFF7FEFF 		bl	scopy
 8231              	.LVL917:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8232              		.loc 1 671 7 view .LVU2652
 8233 025a 8046     		mov	r8, r0
 8234              	.LVL918:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8235              		.loc 1 671 7 view .LVU2653
 8236 025c 0623     		movs	r3, #6
 8237 025e 08F8013B 		strb	r3, [r8], #1
 670:src/display.c **** 	*q++ = '\006';
 8238              		.loc 1 670 6 view .LVU2654
 8239 0262 0546     		mov	r5, r0
 8240              	.LVL919:
 671:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8241              		.loc 1 671 2 is_stmt 1 view .LVU2655
 672:src/display.c **** 
 8242              		.loc 1 672 2 view .LVU2656
 672:src/display.c **** 
 8243              		.loc 1 672 7 is_stmt 0 view .LVU2657
 8244 0264 FFF7FEFF 		bl	word_size
 8245              	.LVL920:
 8246 0268 0222     		movs	r2, #2
 8247 026a 0146     		mov	r1, r0
 8248 026c 4046     		mov	r0, r8
 8249 026e FFF7FEFF 		bl	num_arg_0
 8250              	.LVL921:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8251              		.loc 1 674 19 view .LVU2658
 8252 0272 DFF8C8C0 		ldr	ip, .L887+56
 8253 0276 DCF80030 		ldr	r3, [ip]
 8254              	.LVL922:
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8255              		.loc 1 674 2 is_stmt 1 view .LVU2659
 674:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8256              		.loc 1 674 5 is_stmt 0 view .LVU2660
 8257 027a 002B     		cmp	r3, #0
 8258 027c 76DD     		ble	.L868
 675:src/display.c **** 	  if (*q == '1')
 8259              		.loc 1 675 4 is_stmt 1 view .LVU2661
 675:src/display.c **** 	  if (*q == '1')
 8260              		.loc 1 675 10 is_stmt 0 view .LVU2662
 8261 027e C3F10702 		rsb	r2, r3, #7
 8262 0282 5200     		lsls	r2, r2, #1
 675:src/display.c **** 	  if (*q == '1')
 8263              		.loc 1 675 6 view .LVU2663
 8264 0284 0292     		str	r2, [sp, #8]
 676:src/display.c **** 	    n += 2;
 8265              		.loc 1 676 4 is_stmt 1 view .LVU2664
 676:src/display.c **** 	    n += 2;
 8266              		.loc 1 676 7 is_stmt 0 view .LVU2665
 8267 0286 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8268 0288 3129     		cmp	r1, #49
 677:src/display.c **** 	  if (q[1] == '1')
 8269              		.loc 1 677 6 is_stmt 1 view .LVU2666
 677:src/display.c **** 	  if (q[1] == '1')
ARM GAS  /tmp/ccSEf3H9.s 			page 252


 8270              		.loc 1 677 8 is_stmt 0 view .LVU2667
 8271 028a 04BF     		itt	eq
 8272 028c 0232     		addeq	r2, r2, #2
 8273 028e 0292     		streq	r2, [sp, #8]
 678:src/display.c **** 	    n += 2;
 8274              		.loc 1 678 4 is_stmt 1 view .LVU2668
 678:src/display.c **** 	    n += 2;
 8275              		.loc 1 678 7 is_stmt 0 view .LVU2669
 8276 0290 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8277 0292 3129     		cmp	r1, #49
 8278 0294 00D1     		bne	.L766
 679:src/display.c **** 	  while (n-- > 0)
 8279              		.loc 1 679 6 is_stmt 1 view .LVU2670
 679:src/display.c **** 	  while (n-- > 0)
 8280              		.loc 1 679 8 is_stmt 0 view .LVU2671
 8281 0296 0232     		adds	r2, r2, #2
 8282              	.L766:
 680:src/display.c **** 	    *p2++ = '\006';
 8283              		.loc 1 680 10 is_stmt 1 view .LVU2672
 680:src/display.c **** 	    *p2++ = '\006';
 8284              		.loc 1 680 12 is_stmt 0 view .LVU2673
 8285 0298 511E     		subs	r1, r2, #1
 680:src/display.c **** 	    *p2++ = '\006';
 8286              		.loc 1 680 10 view .LVU2674
 8287 029a 002A     		cmp	r2, #0
 680:src/display.c **** 	    *p2++ = '\006';
 8288              		.loc 1 680 12 view .LVU2675
 8289 029c 0291     		str	r1, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 8290              		.loc 1 680 10 view .LVU2676
 8291 029e 40F30981 		ble	.L866
 681:src/display.c **** 
 8292              		.loc 1 681 12 view .LVU2677
 8293 02a2 0621     		movs	r1, #6
 8294              	.L767:
 681:src/display.c **** 
 8295              		.loc 1 681 6 is_stmt 1 view .LVU2678
 8296              	.LVL923:
 681:src/display.c **** 
 8297              		.loc 1 681 12 is_stmt 0 view .LVU2679
 8298 02a4 00F8011B 		strb	r1, [r0], #1
 8299              	.LVL924:
 680:src/display.c **** 	    *p2++ = '\006';
 8300              		.loc 1 680 10 is_stmt 1 view .LVU2680
 680:src/display.c **** 	    *p2++ = '\006';
 8301              		.loc 1 680 12 is_stmt 0 view .LVU2681
 8302 02a8 029B     		ldr	r3, [sp, #8]
 8303 02aa 5A1E     		subs	r2, r3, #1
 680:src/display.c **** 	    *p2++ = '\006';
 8304              		.loc 1 680 10 view .LVU2682
 8305 02ac 002B     		cmp	r3, #0
 680:src/display.c **** 	    *p2++ = '\006';
 8306              		.loc 1 680 12 view .LVU2683
 8307 02ae 0292     		str	r2, [sp, #8]
 680:src/display.c **** 	    *p2++ = '\006';
 8308              		.loc 1 680 10 view .LVU2684
 8309 02b0 F8DC     		bgt	.L767
ARM GAS  /tmp/ccSEf3H9.s 			page 253


 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8310              		.loc 1 683 4 is_stmt 1 view .LVU2685
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8311              		.loc 1 683 11 is_stmt 0 view .LVU2686
 8312 02b2 DCF80030 		ldr	r3, [ip]
 8313 02b6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8314              		.loc 1 683 27 is_stmt 1 view .LVU2687
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8315              		.loc 1 683 4 is_stmt 0 view .LVU2688
 8316 02b8 002B     		cmp	r3, #0
 8317 02ba 57DB     		blt	.L868
 8318              	.L815:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8319              		.loc 1 683 4 view .LVU2689
 8320 02bc 134D     		ldr	r5, .L887+8
 8321              	.L772:
 684:src/display.c **** 	}
 8322              		.loc 1 684 6 is_stmt 1 view .LVU2690
 684:src/display.c **** 	}
 8323              		.loc 1 684 20 is_stmt 0 view .LVU2691
 8324 02be 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8325 02c0 C2F3C202 		ubfx	r2, r2, #3, #3
 684:src/display.c **** 	}
 8326              		.loc 1 684 12 view .LVU2692
 8327 02c4 9A42     		cmp	r2, r3
 8328 02c6 0CBF     		ite	eq
 8329 02c8 7C23     		moveq	r3, #124
 8330 02ca 2723     		movne	r3, #39
 8331              	.LVL925:
 684:src/display.c **** 	}
 8332              		.loc 1 684 12 view .LVU2693
 8333 02cc 00F8013B 		strb	r3, [r0], #1
 8334              	.LVL926:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8335              		.loc 1 683 35 is_stmt 1 view .LVU2694
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8336              		.loc 1 683 36 is_stmt 0 view .LVU2695
 8337 02d0 029B     		ldr	r3, [sp, #8]
 8338 02d2 013B     		subs	r3, r3, #1
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8339              		.loc 1 683 4 view .LVU2696
 8340 02d4 002B     		cmp	r3, #0
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8341              		.loc 1 683 36 view .LVU2697
 8342 02d6 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8343              		.loc 1 683 27 is_stmt 1 view .LVU2698
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8344              		.loc 1 683 4 is_stmt 0 view .LVU2699
 8345 02d8 F1DA     		bge	.L772
 686:src/display.c ****       }
 8346              		.loc 1 686 2 is_stmt 1 view .LVU2700
 686:src/display.c ****       }
 8347              		.loc 1 686 5 is_stmt 0 view .LVU2701
 8348 02da 002C     		cmp	r4, #0
 8349 02dc 49D1     		bne	.L883
ARM GAS  /tmp/ccSEf3H9.s 			page 254


 8350              	.LVL927:
 8351              	.L773:
 943:src/display.c ****       set_status_top_always(buf2);
 8352              		.loc 1 943 7 is_stmt 1 view .LVU2702
 943:src/display.c ****       set_status_top_always(buf2);
 8353              		.loc 1 943 11 is_stmt 0 view .LVU2703
 8354 02de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 943:src/display.c ****       set_status_top_always(buf2);
 8355              		.loc 1 943 10 view .LVU2704
 8356 02e0 5906     		lsls	r1, r3, #25
 8357 02e2 56D4     		bmi	.L884
 8358              	.L812:
 8359              	.LBB499:
 8360              	.LBB500:
3517:src/display.c ****       }
 8361              		.loc 1 3517 2 is_stmt 1 view .LVU2705
 8362 02e4 1B06     		lsls	r3, r3, #24
 8363 02e6 4BD5     		bpl	.L885
 8364 02e8 0121     		movs	r1, #1
 8365              	.L814:
 8366              	.LVL928:
 8367              	.LBB501:
 8368              	.LBI501:
3347:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8369              		.loc 1 3347 19 view .LVU2706
 8370              	.LBB502:
3348:src/display.c ****       }
 8371              		.loc 1 3348 2 view .LVU2707
 8372 02ea 4FF45373 		mov	r3, #844
 8373 02ee 0093     		str	r3, [sp]
 8374 02f0 17A8     		add	r0, sp, #92
 8375              	.LVL929:
3348:src/display.c ****       }
 8376              		.loc 1 3348 2 is_stmt 0 view .LVU2708
 8377 02f2 40F24A23 		movw	r3, #586
 8378 02f6 2B22     		movs	r2, #43
 8379 02f8 FFF7FEFF 		bl	s_s_sized
 8380              	.LVL930:
3348:src/display.c ****       }
 8381              		.loc 1 3348 2 view .LVU2709
 8382              	.LBE502:
 8383              	.LBE501:
 8384              	.LBE500:
 8385              	.LBE499:
 946:src/display.c **** #else
 8386              		.loc 1 946 5 view .LVU2710
 8387 02fc 23B0     		add	sp, sp, #140
 8388              		.cfi_remember_state
 8389              		.cfi_def_cfa_offset 28
 8390              		@ sp needed
 8391 02fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8392              	.L888:
 8393 0302 00BF     		.align	2
 8394              	.L887:
 8395 0304 00000000 		.word	main_ram
 8396 0308 00000000 		.word	.LANCHOR15
 8397 030c 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccSEf3H9.s 			page 255


 8398 0310 10000000 		.word	.LC6
 8399 0314 1C000000 		.word	.LC8
 8400 0318 2C000000 		.word	.LC11
 8401 031c 00000000 		.word	RectPolConv
 8402 0320 28000000 		.word	.LC10
 8403 0324 24000000 		.word	.LC9
 8404 0328 3C000000 		.word	.LC14
 8405 032c 44000000 		.word	.LC16
 8406 0330 00000000 		.word	.LANCHOR16
 8407 0334 00000000 		.word	.LC2
 8408 0338 00000000 		.word	ShowRegister
 8409 033c 00000000 		.word	IntMaxWindow
 8410              	.LVL931:
 8411              	.L874:
 8412              		.cfi_restore_state
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8413              		.loc 1 771 4 is_stmt 1 view .LVU2711
 772:src/display.c **** 	  *p2++ = shift_char;
 8414              		.loc 1 772 4 view .LVU2712
 775:src/display.c **** 	}
 8415              		.loc 1 775 10 is_stmt 0 view .LVU2713
 8416 0340 1423     		movs	r3, #20
 8417 0342 8DF85F30 		strb	r3, [sp, #95]
 785:src/display.c **** 	    q = "\007\207i";
 8418              		.loc 1 785 8 view .LVU2714
 8419 0346 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 773:src/display.c **** 	  //	  q = "\024";
 8420              		.loc 1 773 10 view .LVU2715
 8421 0348 8DF85E80 		strb	r8, [sp, #94]
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8422              		.loc 1 771 10 view .LVU2716
 8423 034c 4EF20742 		movw	r2, #58375
 785:src/display.c **** 	    q = "\007\207i";
 8424              		.loc 1 785 7 view .LVU2717
 8425 0350 13F0C00F 		tst	r3, #192
 771:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8426              		.loc 1 771 10 view .LVU2718
 8427 0354 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 773:src/display.c **** 	  //	  q = "\024";
 8428              		.loc 1 773 4 is_stmt 1 view .LVU2719
 8429              	.LVL932:
 775:src/display.c **** 	}
 8430              		.loc 1 775 4 view .LVU2720
 775:src/display.c **** 	}
 8431              		.loc 1 775 7 is_stmt 0 view .LVU2721
 8432 0358 0DF16009 		add	r9, sp, #96
 8433              	.LVL933:
 785:src/display.c **** 	    q = "\007\207i";
 8434              		.loc 1 785 4 is_stmt 1 view .LVU2722
 785:src/display.c **** 	    q = "\007\207i";
 8435              		.loc 1 785 7 is_stmt 0 view .LVU2723
 8436 035c 3FF4B3AE 		beq	.L785
 8437              	.L875:
 786:src/display.c **** 	    p = scopy(p, q);
 8438              		.loc 1 786 6 is_stmt 1 view .LVU2724
 8439              	.LVL934:
 787:src/display.c **** 	    //	    goto no_copy;
ARM GAS  /tmp/ccSEf3H9.s 			page 256


 8440              		.loc 1 787 6 view .LVU2725
 787:src/display.c **** 	    //	    goto no_copy;
 8441              		.loc 1 787 10 is_stmt 0 view .LVU2726
 8442 0360 5949     		ldr	r1, .L889
 8443 0362 3046     		mov	r0, r6
 8444 0364 FFF7FEFF 		bl	scopy
 8445              	.LVL935:
 8446 0368 8046     		mov	r8, r0
 8447              	.LVL936:
 787:src/display.c **** 	    //	    goto no_copy;
 8448              		.loc 1 787 10 view .LVU2727
 8449 036a B5E6     		b	.L786
 8450              	.LVL937:
 8451              	.L868:
 787:src/display.c **** 	    //	    goto no_copy;
 8452              		.loc 1 787 10 view .LVU2728
 8453 036c 574D     		ldr	r5, .L889+4
 686:src/display.c ****       }
 8454              		.loc 1 686 2 is_stmt 1 view .LVU2729
 686:src/display.c ****       }
 8455              		.loc 1 686 5 is_stmt 0 view .LVU2730
 8456 036e 002C     		cmp	r4, #0
 8457 0370 B5D0     		beq	.L773
 8458              	.L883:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8459              		.loc 1 603 22 view .LVU2731
 8460 0372 B046     		mov	r8, r6
 8461              	.LVL938:
 603:src/display.c ****       char buf2[42], *p2 = buf2;
 8462              		.loc 1 603 22 view .LVU2732
 8463 0374 E5E6     		b	.L763
 8464              	.LVL939:
 8465              	.L872:
 720:src/display.c **** 	  *p2 = '\015';
 8466              		.loc 1 720 4 is_stmt 1 view .LVU2733
 720:src/display.c **** 	  *p2 = '\015';
 8467              		.loc 1 720 10 is_stmt 0 view .LVU2734
 8468 0376 2022     		movs	r2, #32
 721:src/display.c **** 	  goto skip;
 8469              		.loc 1 721 8 view .LVU2735
 8470 0378 0D23     		movs	r3, #13
 720:src/display.c **** 	  *p2 = '\015';
 8471              		.loc 1 720 10 view .LVU2736
 8472 037a 0270     		strb	r2, [r0]
 721:src/display.c **** 	  goto skip;
 8473              		.loc 1 721 4 is_stmt 1 view .LVU2737
 721:src/display.c **** 	  goto skip;
 8474              		.loc 1 721 8 is_stmt 0 view .LVU2738
 8475 037c 4370     		strb	r3, [r0, #1]
 722:src/display.c **** 	}
 8476              		.loc 1 722 4 is_stmt 1 view .LVU2739
 8477 037e AEE7     		b	.L773
 8478              	.LVL940:
 8479              	.L885:
 8480              	.LBB507:
 8481              	.LBB505:
 8482              	.LBB503:
ARM GAS  /tmp/ccSEf3H9.s 			page 257


 8483              	.LBI503:
3495:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8484              		.loc 1 3495 18 view .LVU2740
 8485              	.LBB504:
3496:src/display.c ****       }
 8486              		.loc 1 3496 2 view .LVU2741
3496:src/display.c ****       }
 8487              		.loc 1 3496 9 is_stmt 0 view .LVU2742
 8488 0380 0021     		movs	r1, #0
 8489 0382 17A8     		add	r0, sp, #92
 8490              	.LVL941:
3496:src/display.c ****       }
 8491              		.loc 1 3496 9 view .LVU2743
 8492 0384 FFF7FEFF 		bl	pixel_length
 8493              	.LVL942:
3496:src/display.c ****       }
 8494              		.loc 1 3496 9 view .LVU2744
 8495              	.LBE504:
 8496              	.LBE503:
3517:src/display.c ****       }
 8497              		.loc 1 3517 2 view .LVU2745
 8498 0388 2C28     		cmp	r0, #44
 8499 038a D4BF     		ite	le
 8500 038c 0021     		movle	r1, #0
 8501 038e 0121     		movgt	r1, #1
 8502 0390 ABE7     		b	.L814
 8503              	.L884:
 8504              	.LBE505:
 8505              	.LBE507:
 943:src/display.c ****       set_status_top_always(buf2);
 8506              		.loc 1 943 27 is_stmt 1 discriminator 1 view .LVU2746
 8507 0392 3046     		mov	r0, r6
 8508 0394 FFF7FEFF 		bl	set_status
 8509              	.LVL943:
 944:src/display.c ****       
 8510              		.loc 1 944 7 discriminator 1 view .LVU2747
 8511              	.LBB508:
 8512              	.LBI499:
3515:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8513              		.loc 1 3515 19 discriminator 1 view .LVU2748
 8514              	.LBB506:
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8515              		.loc 1 3516 2 discriminator 1 view .LVU2749
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8516              		.loc 1 3516 6 is_stmt 0 discriminator 1 view .LVU2750
 8517 0398 4D4B     		ldr	r3, .L889+8
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8518              		.loc 1 3516 5 discriminator 1 view .LVU2751
 8519 039a B3F90030 		ldrsh	r3, [r3]
 8520 039e 0BB9     		cbnz	r3, .L811
 8521 03a0 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8522 03a2 9FE7     		b	.L812
 8523              	.L811:
3516:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8524              		.loc 1 3516 22 view .LVU2752
 8525 03a4 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8526 03a6 5A06     		lsls	r2, r3, #25
ARM GAS  /tmp/ccSEf3H9.s 			page 258


 8527 03a8 9CD5     		bpl	.L812
 8528              	.LBE506:
 8529              	.LBE508:
 946:src/display.c **** #else
 8530              		.loc 1 946 5 view .LVU2753
 8531 03aa 23B0     		add	sp, sp, #140
 8532              		.cfi_remember_state
 8533              		.cfi_def_cfa_offset 28
 8534              		@ sp needed
 8535 03ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8536              	.LVL944:
 8537              	.L871:
 8538              		.cfi_restore_state
 715:src/display.c **** 	  *p2 = '\024';
 8539              		.loc 1 715 4 is_stmt 1 view .LVU2754
 715:src/display.c **** 	  *p2 = '\024';
 8540              		.loc 1 715 10 is_stmt 0 view .LVU2755
 8541 03b0 2022     		movs	r2, #32
 716:src/display.c **** 	  goto skip;
 8542              		.loc 1 716 8 view .LVU2756
 8543 03b2 1423     		movs	r3, #20
 715:src/display.c **** 	  *p2 = '\024';
 8544              		.loc 1 715 10 view .LVU2757
 8545 03b4 0270     		strb	r2, [r0]
 716:src/display.c **** 	  goto skip;
 8546              		.loc 1 716 4 is_stmt 1 view .LVU2758
 716:src/display.c **** 	  goto skip;
 8547              		.loc 1 716 8 is_stmt 0 view .LVU2759
 8548 03b6 4370     		strb	r3, [r0, #1]
 717:src/display.c **** 	}
 8549              		.loc 1 717 4 is_stmt 1 view .LVU2760
 8550 03b8 91E7     		b	.L773
 8551              	.LVL945:
 8552              	.L878:
 804:src/display.c **** 	      *p2++ = '\207';
 8553              		.loc 1 804 8 view .LVU2761
 805:src/display.c **** 	      *p2++ = '\007';	    
 8554              		.loc 1 805 8 view .LVU2762
 806:src/display.c **** 	    }
 8555              		.loc 1 806 14 is_stmt 0 view .LVU2763
 8556 03ba 89F80230 		strb	r3, [r9, #2]
 805:src/display.c **** 	      *p2++ = '\007';	    
 8557              		.loc 1 805 14 view .LVU2764
 8558 03be 89F80120 		strb	r2, [r9, #1]
 806:src/display.c **** 	    }
 8559              		.loc 1 806 8 is_stmt 1 view .LVU2765
 806:src/display.c **** 	    }
 8560              		.loc 1 806 11 is_stmt 0 view .LVU2766
 8561 03c2 09F10309 		add	r9, r9, #3
 8562              	.LVL946:
 806:src/display.c **** 	    }
 8563              		.loc 1 806 11 view .LVU2767
 8564 03c6 98E6     		b	.L789
 8565              	.LVL947:
 8566              	.L825:
 842:src/display.c **** #endif
 8567              		.loc 1 842 19 view .LVU2768
ARM GAS  /tmp/ccSEf3H9.s 			page 259


 8568 03c8 4249     		ldr	r1, .L889+12
 8569 03ca B0E6     		b	.L791
 8570              	.LVL948:
 8571              	.L880:
 8572              	.LBB509:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8573              		.loc 1 872 75 discriminator 2 view .LVU2769
 8574 03cc FFF7FEFF 		bl	stack_size
 8575              	.LVL949:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8576              		.loc 1 872 62 discriminator 2 view .LVU2770
 8577 03d0 D9F80010 		ldr	r1, [r9]
 8578 03d4 6330     		adds	r0, r0, #99
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8579              		.loc 1 872 46 discriminator 2 view .LVU2771
 8580 03d6 8842     		cmp	r0, r1
 8581 03d8 FFF6C0AE 		blt	.L797
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8582              		.loc 1 872 91 discriminator 4 view .LVU2772
 8583 03dc FFF7FEFF 		bl	get_cmdline
 8584              	.LVL950:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8585              		.loc 1 872 88 discriminator 4 view .LVU2773
 8586 03e0 20B1     		cbz	r0, .L800
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8587              		.loc 1 873 7 view .LVU2774
 8588 03e2 002C     		cmp	r4, #0
 8589 03e4 6AD0     		beq	.L799
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8590              		.loc 1 873 28 discriminator 1 view .LVU2775
 8591 03e6 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8592              		.loc 1 873 10 discriminator 1 view .LVU2776
 8593 03e8 5C06     		lsls	r4, r3, #25
 8594              	.LVL951:
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8595              		.loc 1 873 10 discriminator 1 view .LVU2777
 8596 03ea 67D4     		bmi	.L799
 8597              	.L800:
 8598 03ec D9F80010 		ldr	r1, [r9]
 8599 03f0 B4E6     		b	.L797
 8600              	.LVL952:
 8601              	.L775:
 873:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8602              		.loc 1 873 10 discriminator 1 view .LVU2778
 8603              	.LBE509:
 706:src/display.c **** 	    *p2++ = shift_char;
 8604              		.loc 1 706 30 discriminator 1 view .LVU2779
 8605 03f2 FFF7FEFF 		bl	is_dblmode
 8606              	.LVL953:
 706:src/display.c **** 	    *p2++ = shift_char;
 8607              		.loc 1 706 26 discriminator 1 view .LVU2780
 8608 03f6 0028     		cmp	r0, #0
 8609 03f8 3FF426AE 		beq	.L777
 711:src/display.c **** 	  }
 8610              		.loc 1 711 6 is_stmt 1 view .LVU2781
 8611              	.LVL954:
ARM GAS  /tmp/ccSEf3H9.s 			page 260


 711:src/display.c **** 	  }
 8612              		.loc 1 711 12 is_stmt 0 view .LVU2782
 8613 03fc 4423     		movs	r3, #68
 8614 03fe 8DF85C30 		strb	r3, [sp, #92]
 711:src/display.c **** 	  }
 8615              		.loc 1 711 9 view .LVU2783
 8616 0402 0DF15D00 		add	r0, sp, #93
 8617              	.LVL955:
 711:src/display.c **** 	  }
 8618              		.loc 1 711 9 view .LVU2784
 8619 0406 26E6     		b	.L776
 8620              	.LVL956:
 8621              	.L879:
 8622              	.LBB510:
 868:src/display.c **** 	    goto skip;
 8623              		.loc 1 868 6 is_stmt 1 view .LVU2785
 8624 0408 6520     		movs	r0, #101
 8625 040a FFF7FEFF 		bl	get_reg_n_int
 8626              	.LVL957:
 8627 040e 4246     		mov	r2, r8
 8628 0410 FFF7FEFF 		bl	set_int_x
 8629              	.LVL958:
 869:src/display.c **** 	  }
 8630              		.loc 1 869 6 view .LVU2786
 8631 0414 63E7     		b	.L773
 8632              	.LVL959:
 8633              	.L873:
 869:src/display.c **** 	  }
 8634              		.loc 1 869 6 is_stmt 0 view .LVU2787
 8635              	.LBE510:
 725:src/display.c **** 	  if (State2.wascomplex) {
 8636              		.loc 1 725 28 discriminator 1 view .LVU2788
 8637 0416 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 725:src/display.c **** 	  if (State2.wascomplex) {
 8638              		.loc 1 725 24 discriminator 1 view .LVU2789
 8639 0418 13F0C00F 		tst	r3, #192
 8640 041c 4CD1     		bne	.L819
 725:src/display.c **** 	  if (State2.wascomplex) {
 8641              		.loc 1 725 60 discriminator 2 view .LVU2790
 8642 041e 2E4B     		ldr	r3, .L889+16
 8643 0420 1B68     		ldr	r3, [r3]
 725:src/display.c **** 	  if (State2.wascomplex) {
 8644              		.loc 1 725 46 discriminator 2 view .LVU2791
 8645 0422 002B     		cmp	r3, #0
 8646 0424 3FF423AE 		beq	.L780
 726:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8647              		.loc 1 726 4 is_stmt 1 view .LVU2792
 729:src/display.c **** 	    if (RectPolConv == 1) {
 8648              		.loc 1 729 9 view .LVU2793
 730:src/display.c **** 	      q = "\007\306<";
 8649              		.loc 1 730 6 view .LVU2794
 734:src/display.c **** 	    }
 8650              		.loc 1 734 10 is_stmt 0 view .LVU2795
 8651 0428 2C49     		ldr	r1, .L889+20
 8652 042a 2D4A     		ldr	r2, .L889+24
 8653 042c 012B     		cmp	r3, #1
 8654 042e 18BF     		it	ne
ARM GAS  /tmp/ccSEf3H9.s 			page 261


 8655 0430 1146     		movne	r1, r2
 8656              	.L781:
 8657              	.LVL960:
 737:src/display.c **** 
 8658              		.loc 1 737 4 is_stmt 1 view .LVU2796
 737:src/display.c **** 
 8659              		.loc 1 737 8 is_stmt 0 view .LVU2797
 8660 0432 3046     		mov	r0, r6
 8661              	.LVL961:
 737:src/display.c **** 
 8662              		.loc 1 737 8 view .LVU2798
 8663 0434 FFF7FEFF 		bl	scopy
 8664              	.LVL962:
 737:src/display.c **** 
 8665              		.loc 1 737 8 view .LVU2799
 8666 0438 8046     		mov	r8, r0
 8667              	.LVL963:
 739:src/display.c **** 	}
 8668              		.loc 1 739 4 is_stmt 1 view .LVU2800
 8669 043a 82E6     		b	.L763
 8670              	.LVL964:
 8671              	.L876:
 791:src/display.c **** 	    p = scopy(p, q);
 8672              		.loc 1 791 6 view .LVU2801
 792:src/display.c **** 	    //	    goto no_copy;
 8673              		.loc 1 792 6 view .LVU2802
 792:src/display.c **** 	    //	    goto no_copy;
 8674              		.loc 1 792 10 is_stmt 0 view .LVU2803
 8675 043c 2949     		ldr	r1, .L889+28
 8676 043e 3046     		mov	r0, r6
 8677 0440 FFF7FEFF 		bl	scopy
 8678              	.LVL965:
 8679 0444 8046     		mov	r8, r0
 8680              	.LVL966:
 792:src/display.c **** 	    //	    goto no_copy;
 8681              		.loc 1 792 10 view .LVU2804
 8682 0446 47E6     		b	.L786
 8683              	.LVL967:
 8684              	.L881:
 8685              	.LBB511:
 8686              	.LBB497:
 877:src/display.c **** 
 8687              		.loc 1 877 8 is_stmt 1 view .LVU2805
 879:src/display.c **** 	      UState.nothousands = 1;
 8688              		.loc 1 879 8 is_stmt 0 view .LVU2806
 8689 0448 2A22     		movs	r2, #42
 8690 044a 3046     		mov	r0, r6
 877:src/display.c **** 
 8691              		.loc 1 877 44 view .LVU2807
 8692 044c 93F8E787 		ldrb	r8, [r3, #2023]	@ zero_extendqisi2
 8693              	.LVL968:
 877:src/display.c **** 
 8694              		.loc 1 877 44 view .LVU2808
 8695 0450 254C     		ldr	r4, .L889+32
 879:src/display.c **** 	      UState.nothousands = 1;
 8696              		.loc 1 879 8 view .LVU2809
 8697 0452 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccSEf3H9.s 			page 262


 8698              	.LVL969:
 880:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8699              		.loc 1 880 27 view .LVU2810
 8700 0456 3A68     		ldr	r2, [r7]
 8701 0458 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8702 045c 43F04003 		orr	r3, r3, #64
 8703 0460 82F8E737 		strb	r3, [r2, #2023]
 881:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8704              		.loc 1 881 8 view .LVU2811
 8705 0464 3146     		mov	r1, r6
 8706 0466 03A8     		add	r0, sp, #12
 8707 0468 FFF7FEFF 		bl	set_x_hms
 8708              	.LVL970:
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8709              		.loc 1 882 27 view .LVU2812
 8710 046c 3B68     		ldr	r3, [r7]
 8711 046e 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 877:src/display.c **** 
 8712              		.loc 1 877 44 view .LVU2813
 8713 0472 C8F38018 		ubfx	r8, r8, #6, #1
 8714              	.LVL971:
 879:src/display.c **** 	      UState.nothousands = 1;
 8715              		.loc 1 879 8 is_stmt 1 view .LVU2814
 880:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8716              		.loc 1 880 8 view .LVU2815
 881:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8717              		.loc 1 881 8 view .LVU2816
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8718              		.loc 1 882 8 view .LVU2817
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8719              		.loc 1 882 27 is_stmt 0 view .LVU2818
 8720 0476 68F38612 		bfi	r2, r8, #6, #1
 8721 047a 83F8E727 		strb	r2, [r3, #2023]
 887:src/display.c **** 	      while (*p) {
 8722              		.loc 1 887 8 is_stmt 1 view .LVU2819
 8723              	.LVL972:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8724              		.loc 1 888 8 view .LVU2820
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8725              		.loc 1 888 14 view .LVU2821
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8726              		.loc 1 888 15 is_stmt 0 view .LVU2822
 8727 047e 4021     		movs	r1, #64
 882:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8728              		.loc 1 882 27 view .LVU2823
 8729 0480 0522     		movs	r2, #5
 8730 0482 05E0     		b	.L806
 8731              	.LVL973:
 8732              	.L886:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8733              		.loc 1 888 15 view .LVU2824
 8734 0484 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8735              	.LVL974:
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8736              		.loc 1 888 14 view .LVU2825
 8737 0488 0029     		cmp	r1, #0
 8738 048a 3FF428AF 		beq	.L773
ARM GAS  /tmp/ccSEf3H9.s 			page 263


 8739 048e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8740              	.LVL975:
 8741              	.L806:
 889:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8742              		.loc 1 889 3 is_stmt 1 view .LVU2826
 8743 0490 3046     		mov	r0, r6
 8744 0492 FFF7FEFF 		bl	replace_char
 8745              	.LVL976:
 890:src/display.c **** 		  goto skip;
 8746              		.loc 1 890 3 view .LVU2827
 890:src/display.c **** 		  goto skip;
 8747              		.loc 1 890 7 is_stmt 0 view .LVU2828
 8748 0496 0121     		movs	r1, #1
 8749 0498 3046     		mov	r0, r6
 8750 049a FFF7FEFF 		bl	pixel_length
 8751              	.LVL977:
 893:src/display.c **** 	      }
 8752              		.loc 1 893 3 is_stmt 1 view .LVU2829
 888:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8753              		.loc 1 888 14 view .LVU2830
 890:src/display.c **** 		  goto skip;
 8754              		.loc 1 890 6 is_stmt 0 view .LVU2831
 8755 049e 2C28     		cmp	r0, #44
 8756 04a0 F0DC     		bgt	.L886
 8757 04a2 1CE7     		b	.L773
 8758              	.LVL978:
 8759              	.L821:
 890:src/display.c **** 		  goto skip;
 8760              		.loc 1 890 6 view .LVU2832
 8761              	.LBE497:
 8762              	.LBE511:
 748:src/display.c **** #endif
 8763              		.loc 1 748 19 view .LVU2833
 8764 04a4 0B49     		ldr	r1, .L889+12
 8765 04a6 EFE5     		b	.L782
 8766              	.LVL979:
 8767              	.L877:
 796:src/display.c **** 	    p = scopy(p, q);
 8768              		.loc 1 796 6 is_stmt 1 view .LVU2834
 797:src/display.c **** 	    //	    goto no_copy;
 8769              		.loc 1 797 6 view .LVU2835
 797:src/display.c **** 	    //	    goto no_copy;
 8770              		.loc 1 797 10 is_stmt 0 view .LVU2836
 8771 04a8 1049     		ldr	r1, .L889+36
 8772 04aa 3046     		mov	r0, r6
 8773 04ac FFF7FEFF 		bl	scopy
 8774              	.LVL980:
 8775 04b0 8046     		mov	r8, r0
 8776              	.LVL981:
 797:src/display.c **** 	    //	    goto no_copy;
 8777              		.loc 1 797 10 view .LVU2837
 8778 04b2 11E6     		b	.L786
 8779              	.LVL982:
 8780              	.L866:
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8781              		.loc 1 683 4 is_stmt 1 view .LVU2838
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccSEf3H9.s 			page 264


 8782              		.loc 1 683 11 is_stmt 0 view .LVU2839
 8783 04b4 0293     		str	r3, [sp, #8]
 683:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8784              		.loc 1 683 27 is_stmt 1 view .LVU2840
 8785 04b6 01E7     		b	.L815
 8786              	.LVL983:
 8787              	.L819:
 727:src/display.c **** 	  }
 8788              		.loc 1 727 8 is_stmt 0 view .LVU2841
 8789 04b8 0349     		ldr	r1, .L889
 8790 04ba BAE7     		b	.L781
 8791              	.LVL984:
 8792              	.L799:
 8793              	.LBB512:
 872:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8794              		.loc 1 872 4 discriminator 7 view .LVU2842
 8795 04bc D9F80010 		ldr	r1, [r9]
 8796 04c0 4DE6     		b	.L801
 8797              	.LVL985:
 8798              	.L827:
 8799              	.LBB498:
 911:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8800              		.loc 1 911 25 view .LVU2843
 8801 04c2 3E27     		movs	r7, #62
 8802              	.LVL986:
 911:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8803              		.loc 1 911 25 view .LVU2844
 8804 04c4 78E6     		b	.L808
 8805              	.L890:
 8806 04c6 00BF     		.align	2
 8807              	.L889:
 8808 04c8 08000000 		.word	.LC4
 8809 04cc 00000000 		.word	StateWhileOn
 8810 04d0 00000000 		.word	.LANCHOR18
 8811 04d4 14000000 		.word	.LC7
 8812 04d8 00000000 		.word	RectPolConv
 8813 04dc 04000000 		.word	.LC3
 8814 04e0 0C000000 		.word	.LC5
 8815 04e4 34000000 		.word	.LC12
 8816 04e8 00000000 		.word	.LANCHOR17
 8817 04ec 38000000 		.word	.LC13
 8818              	.LBE498:
 8819              	.LBE512:
 8820              		.cfi_endproc
 8821              	.LFE16:
 8823              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8824              		.align	2
 8825              	.LC17:
 8826 0000 0D00     		.ascii	"\015\000"
 8827 0002 0000     		.align	2
 8828              	.LC18:
 8829 0004 060600   		.ascii	"\006\006\000"
 8830 0007 00       		.align	2
 8831              	.LC20:
 8832 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8832      492C2057 
 8832      77414C74 
ARM GAS  /tmp/ccSEf3H9.s 			page 265


 8832      4500
 8833 0016 0000     		.align	2
 8834              	.LC21:
 8835 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8835      2055204C 
 8835      20492C20 
 8835      20572041 
 8835      204C2054 
 8836 0032 0000     		.align	2
 8837              	.LC22:
 8838 0034 2000     		.ascii	" \000"
 8839 0036 0000     		.align	2
 8840              	.LC23:
 8841 0038 48595000 		.ascii	"HYP\000"
 8842              		.align	2
 8843              	.LC24:
 8844 003c 7F060600 		.ascii	"\177\006\006\000"
 8845              		.align	2
 8846              	.LC27:
 8847 0040 3020746F 		.ascii	"0 to 255\000"
 8847      20323535 
 8847      00
 8848 0049 000000   		.align	2
 8849              	.LC28:
 8850 004c 46726565 		.ascii	"Free:\000"
 8850      3A00
 8851 0052 0000     		.align	2
 8852              	.LC29:
 8853 0054 202C2046 		.ascii	" , FL. \000"
 8853      4C2E2000 
 8854              		.align	2
 8855              	.LC30:
 8856 005c 52656773 		.ascii	"Regs:\000"
 8856      3A00
 8857 0062 0000     		.align	2
 8858              	.LC31:
 8859 0064 20910606 		.ascii	" \221\006\006+\000"
 8859      2B00
 8860 006a 0000     		.align	2
 8861              	.LC32:
 8862 006c 202C204C 		.ascii	" , Loc. \000"
 8862      6F632E20 
 8862      00
 8863 0075 000000   		.align	2
 8864              	.LC33:
 8865 0078 464C2000 		.ascii	"FL \000"
 8866              		.align	2
 8867              	.LC34:
 8868 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8868      06413A44 
 8868      064C494A 
 8868      4B00
 8869 008a 0000     		.align	2
 8870              	.LC35:
 8871 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8871      302D2E31 
 8871      3500
ARM GAS  /tmp/ccSEf3H9.s 			page 266


 8872 0096 0000     		.align	2
 8873              	.LC36:
 8874 0098 43414C4C 		.ascii	"CALLS\000"
 8874      5300
 8875 009e 0000     		.align	2
 8876              	.LC37:
 8877 00a0 52656720 		.ascii	"Reg \000"
 8877      00
 8878 00a5 000000   		.align	2
 8879              	.LC38:
 8880 00a8 00       		.ascii	"\000"
 8881 00a9 000000   		.align	2
 8882              	.LC39:
 8883 00ac 202D2D2D 		.ascii	" ---\000"
 8883      00
 8884 00b1 000000   		.align	2
 8885              	.LC26:
 8886 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8886      093E0A00 
 8887              		.align	2
 8888              	.LC25:
 8889 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8889      41424344 
 8889      4C494A4B 
 8889      00
 8890              		.section	.text.display,"ax",%progbits
 8891              		.align	1
 8892              		.p2align 2,,3
 8893              		.global	display
 8894              		.syntax unified
 8895              		.thumb
 8896              		.thumb_func
 8897              		.fpu fpv4-sp-d16
 8899              	display:
 8900              	.LFB34:
2590:src/display.c **** 	int i, j;
 8901              		.loc 1 2590 26 is_stmt 1 view -0
 8902              		.cfi_startproc
 8903              		@ args = 0, pretend = 0, frame = 160
 8904              		@ frame_needed = 0, uses_anonymous_args = 0
2591:src/display.c **** 	char buf[40], *bp = buf;
 8905              		.loc 1 2591 2 view .LVU2846
2592:src/display.c **** 	const char *p;
 8906              		.loc 1 2592 2 view .LVU2847
2590:src/display.c **** 	int i, j;
 8907              		.loc 1 2590 26 is_stmt 0 view .LVU2848
 8908 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8909              		.cfi_def_cfa_offset 36
 8910              		.cfi_offset 4, -36
 8911              		.cfi_offset 5, -32
 8912              		.cfi_offset 6, -28
 8913              		.cfi_offset 7, -24
 8914              		.cfi_offset 8, -20
 8915              		.cfi_offset 9, -16
 8916              		.cfi_offset 10, -12
 8917              		.cfi_offset 11, -8
 8918              		.cfi_offset 14, -4
ARM GAS  /tmp/ccSEf3H9.s 			page 267


2595:src/display.c **** 	int skip = 0;
 8919              		.loc 1 2595 24 view .LVU2849
 8920 0004 C24C     		ldr	r4, .L1221
2600:src/display.c **** 	if (State2.disp_freeze) {
 8921              		.loc 1 2600 16 view .LVU2850
 8922 0006 DFF83C93 		ldr	r9, .L1221+52
2595:src/display.c **** 	int skip = 0;
 8923              		.loc 1 2595 24 view .LVU2851
 8924 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
2590:src/display.c **** 	int i, j;
 8925              		.loc 1 2590 26 view .LVU2852
 8926 000e A9B0     		sub	sp, sp, #164
 8927              		.cfi_def_cfa_offset 200
 8928              	.LVL987:
2593:src/display.c **** 	int annuc = 0;
 8929              		.loc 1 2593 2 is_stmt 1 view .LVU2853
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8930              		.loc 1 2594 2 view .LVU2854
2595:src/display.c **** 	int skip = 0;
 8931              		.loc 1 2595 2 view .LVU2855
2596:src/display.c **** 	int x_disp = 0;
 8932              		.loc 1 2596 2 view .LVU2856
2597:src/display.c **** 	const int shift = cur_shift();
 8933              		.loc 1 2597 2 view .LVU2857
2598:src/display.c **** 
 8934              		.loc 1 2598 2 view .LVU2858
2598:src/display.c **** 
 8935              		.loc 1 2598 20 is_stmt 0 view .LVU2859
 8936 0010 FFF7FEFF 		bl	cur_shift
 8937              	.LVL988:
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8938              		.loc 1 2601 6 view .LVU2860
 8939 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2600:src/display.c **** 	if (State2.disp_freeze) {
 8940              		.loc 1 2600 16 view .LVU2861
 8941 0016 0022     		movs	r2, #0
 8942              	.LVL989:
2600:src/display.c **** 	if (State2.disp_freeze) {
 8943              		.loc 1 2600 2 is_stmt 1 view .LVU2862
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8944              		.loc 1 2601 5 is_stmt 0 view .LVU2863
 8945 0018 13F01007 		ands	r7, r3, #16
2600:src/display.c **** 	if (State2.disp_freeze) {
 8946              		.loc 1 2600 16 view .LVU2864
 8947 001c A9F80020 		strh	r2, [r9]	@ movhi
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8948              		.loc 1 2601 2 is_stmt 1 view .LVU2865
2601:src/display.c **** 	  State2.disp_freeze = 0;
 8949              		.loc 1 2601 5 is_stmt 0 view .LVU2866
 8950 0020 40F0EE80 		bne	.L1183
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8951              		.loc 1 2611 2 is_stmt 1 view .LVU2867
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8952              		.loc 1 2611 6 is_stmt 0 view .LVU2868
 8953 0024 DFF82083 		ldr	r8, .L1221+56
 8954 0028 D8F80060 		ldr	r6, [r8]
2611:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/ccSEf3H9.s 			page 268


 8955              		.loc 1 2611 5 view .LVU2869
 8956 002c 002E     		cmp	r6, #0
 8957 002e 40F08280 		bne	.L1184
2630:src/display.c **** #  endif
 8958              		.loc 1 2630 2 is_stmt 1 view .LVU2870
2630:src/display.c **** #  endif
 8959              		.loc 1 2630 33 is_stmt 0 view .LVU2871
 8960 0032 B84B     		ldr	r3, .L1221+4
 8961 0034 1B68     		ldr	r3, [r3]
 8962 0036 0546     		mov	r5, r0
 8963 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2636:src/display.c **** 
 8964              		.loc 1 2636 2 view .LVU2872
 8965 003c FFF7FEFF 		bl	reset_disp
 8966              	.LVL990:
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8967              		.loc 1 2639 2 view .LVU2873
 8968 0040 1EA8     		add	r0, sp, #120
 8969              	.LVL991:
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8970              		.loc 1 2639 2 view .LVU2874
 8971 0042 2822     		movs	r2, #40
 8972 0044 3146     		mov	r1, r6
 8973 0046 FFF7FEFF 		bl	xset
 8974              	.LVL992:
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8975              		.loc 1 2645 6 view .LVU2875
 8976 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8977              		.loc 1 2645 5 view .LVU2876
 8978 004c D806     		lsls	r0, r3, #27
2630:src/display.c **** #  endif
 8979              		.loc 1 2630 12 view .LVU2877
 8980 004e CBF3800B 		ubfx	fp, fp, #2, #1
 8981              	.LVL993:
2636:src/display.c **** 
 8982              		.loc 1 2636 2 is_stmt 1 view .LVU2878
2639:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8983              		.loc 1 2639 2 view .LVU2879
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8984              		.loc 1 2645 2 view .LVU2880
2645:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8985              		.loc 1 2645 5 is_stmt 0 view .LVU2881
 8986 0052 00F18581 		bmi	.L1185
2657:src/display.c **** 	  if (yreg_enabled) {
 8987              		.loc 1 2657 9 is_stmt 1 view .LVU2882
2657:src/display.c **** 	  if (yreg_enabled) {
 8988              		.loc 1 2657 13 is_stmt 0 view .LVU2883
 8989 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2657:src/display.c **** 	  if (yreg_enabled) {
 8990              		.loc 1 2657 12 view .LVU2884
 8991 0058 5107     		lsls	r1, r2, #29
 8992 005a 00F0DB80 		beq	.L899
2658:src/display.c **** 	    set_status_top(S_SURE);
 8993              		.loc 1 2658 4 is_stmt 1 view .LVU2885
2658:src/display.c **** 	    set_status_top(S_SURE);
 8994              		.loc 1 2658 7 is_stmt 0 view .LVU2886
ARM GAS  /tmp/ccSEf3H9.s 			page 269


 8995 005e BBF1000F 		cmp	fp, #0
 8996 0062 00F0BE81 		beq	.L900
2659:src/display.c **** 	    no_status_top = 1;
 8997              		.loc 1 2659 6 is_stmt 1 view .LVU2887
 8998              	.LVL994:
 8999              	.LBB573:
 9000              	.LBI573:
3505:src/display.c **** 	if (no_status_top) return;
 9001              		.loc 1 3505 19 view .LVU2888
 9002              	.LBB574:
3506:src/display.c **** 	if (State2.runmode) {
 9003              		.loc 1 3506 2 view .LVU2889
3506:src/display.c **** 	if (State2.runmode) {
 9004              		.loc 1 3506 5 is_stmt 0 view .LVU2890
 9005 0066 B9F90030 		ldrsh	r3, [r9]
 9006 006a 13B9     		cbnz	r3, .L902
 9007 006c AA48     		ldr	r0, .L1221+8
 9008 006e FFF7FEFF 		bl	set_status_top.part.0
 9009              	.LVL995:
 9010              	.L902:
3506:src/display.c **** 	if (State2.runmode) {
 9011              		.loc 1 3506 5 view .LVU2891
 9012              	.LBE574:
 9013              	.LBE573:
2660:src/display.c **** 	    annuc = 1;
 9014              		.loc 1 2660 6 is_stmt 1 view .LVU2892
2660:src/display.c **** 	    annuc = 1;
 9015              		.loc 1 2660 20 is_stmt 0 view .LVU2893
 9016 0072 0126     		movs	r6, #1
 9017 0074 A9F80060 		strh	r6, [r9]	@ movhi
2661:src/display.c **** 	  }
 9018              		.loc 1 2661 6 is_stmt 1 view .LVU2894
 9019              	.LVL996:
2884:src/display.c ****       nostk:
 9020              		.loc 1 2884 2 view .LVU2895
 9021 0078 FFF7FEFF 		bl	show_stack
 9022              	.LVL997:
2886:src/display.c **** 	if (!skip) {
 9023              		.loc 1 2886 2 view .LVU2896
 9024 007c A74B     		ldr	r3, .L1221+12
 9025 007e A84F     		ldr	r7, .L1221+16
 9026 0080 0093     		str	r3, [sp]
 9027 0082 FFF7FEFF 		bl	show_flags
 9028              	.LVL998:
2887:src/display.c **** 	  if (State2.runmode) {
 9029              		.loc 1 2887 2 view .LVU2897
 9030              	.L903:
2888:src/display.c **** 	  only_update_x:
 9031              		.loc 1 2888 4 view .LVU2898
2888:src/display.c **** 	  only_update_x:
 9032              		.loc 1 2888 8 is_stmt 0 view .LVU2899
 9033 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2888:src/display.c **** 	  only_update_x:
 9034              		.loc 1 2888 7 view .LVU2900
 9035 0088 15F04005 		ands	r5, r5, #64
 9036 008c 5FD1     		bne	.L896
 9037              	.LBB575:
ARM GAS  /tmp/ccSEf3H9.s 			page 270


2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9038              		.loc 1 2906 6 is_stmt 1 view .LVU2901
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9039              		.loc 1 2906 24 is_stmt 0 view .LVU2902
 9040 008e A14B     		ldr	r3, .L1221+4
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9041              		.loc 1 2910 6 view .LVU2903
 9042 0090 DFF8B8A2 		ldr	r10, .L1221+60
 9043              	.LVL999:
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9044              		.loc 1 2906 24 view .LVU2904
 9045 0094 1B68     		ldr	r3, [r3]
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9046              		.loc 1 2906 19 view .LVU2905
 9047 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9048              	.LVL1000:
2907:src/display.c **** 	    const int n = nLIB(pc);
 9049              		.loc 1 2907 6 is_stmt 1 view .LVU2906
2907:src/display.c **** 	    const int n = nLIB(pc);
 9050              		.loc 1 2907 25 is_stmt 0 view .LVU2907
 9051 009a 5846     		mov	r0, fp
 9052 009c FFF7FEFF 		bl	user_pc
 9053              	.LVL1001:
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9054              		.loc 1 2909 6 view .LVU2908
 9055 00a0 2822     		movs	r2, #40
 9056 00a2 2946     		mov	r1, r5
2907:src/display.c **** 	    const int n = nLIB(pc);
 9057              		.loc 1 2907 25 view .LVU2909
 9058 00a4 8046     		mov	r8, r0
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9059              		.loc 1 2909 6 view .LVU2910
 9060 00a6 1EA8     		add	r0, sp, #120
 9061              	.LVL1002:
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9062              		.loc 1 2908 6 is_stmt 1 view .LVU2911
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9063              		.loc 1 2909 6 is_stmt 0 view .LVU2912
 9064 00a8 FFF7FEFF 		bl	xset
 9065              	.LVL1003:
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9066              		.loc 1 2908 20 view .LVU2913
 9067 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9068              	.LVL1004:
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9069              		.loc 1 2909 6 is_stmt 1 view .LVU2914
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9070              		.loc 1 2910 6 view .LVU2915
 9071 00b0 DAF80000 		ldr	r0, [r10]
 9072 00b4 2A46     		mov	r2, r5
 9073 00b6 0121     		movs	r1, #1
 9074 00b8 FFF7FEFF 		bl	set_exp
 9075              	.LVL1005:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9076              		.loc 1 2911 6 view .LVU2916
 9077 00bc BBF1000F 		cmp	fp, #0
 9078 00c0 40F0B881 		bne	.L1186
ARM GAS  /tmp/ccSEf3H9.s 			page 271


 9079 00c4 9749     		ldr	r1, .L1221+20
 9080 00c6 1EA8     		add	r0, sp, #120
 9081 00c8 FFF7FEFF 		bl	scopy_spc
 9082              	.LVL1006:
 9083 00cc 0322     		movs	r2, #3
 9084 00ce 4146     		mov	r1, r8
 9085 00d0 FFF7FEFF 		bl	num_arg_0
 9086              	.LVL1007:
2913:src/display.c **** #ifndef REALBUILD
 9087              		.loc 1 2913 6 view .LVU2917
 9088 00d4 0921     		movs	r1, #9
 9089 00d6 1EA8     		add	r0, sp, #120
 9090 00d8 FFF7FEFF 		bl	set_digits_string
 9091              	.LVL1008:
2915:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9092              		.loc 1 2915 6 view .LVU2918
 9093 00dc 5946     		mov	r1, fp
 9094 00de 2822     		movs	r2, #40
 9095 00e0 1EA8     		add	r0, sp, #120
 9096 00e2 FFF7FEFF 		bl	xset
 9097              	.LVL1009:
2916:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9098              		.loc 1 2916 6 view .LVU2919
 9099 00e6 5A46     		mov	r2, fp
 9100 00e8 0121     		movs	r1, #1
 9101 00ea DAF80000 		ldr	r0, [r10]
 9102 00ee FFF7FEFF 		bl	set_exp
 9103              	.LVL1010:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9104              		.loc 1 2917 6 view .LVU2920
 9105 00f2 8D49     		ldr	r1, .L1221+24
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9106              		.loc 1 2911 6 is_stmt 0 view .LVU2921
 9107 00f4 4FF0030B 		mov	fp, #3
 9108              	.LVL1011:
 9109              	.L1038:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9110              		.loc 1 2917 6 discriminator 4 view .LVU2922
 9111 00f8 1EA8     		add	r0, sp, #120
 9112 00fa FFF7FEFF 		bl	scopy_spc
 9113              	.LVL1012:
 9114 00fe 4146     		mov	r1, r8
 9115 0100 5A46     		mov	r2, fp
 9116 0102 FFF7FEFF 		bl	num_arg_0
 9117              	.LVL1013:
 9118              	.LBB576:
2920:src/display.c **** 	      char *l=LastDisplayedNumber;
 9119              		.loc 1 2920 8 is_stmt 1 discriminator 4 view .LVU2923
2921:src/display.c **** 	      *l++=' ';
 9120              		.loc 1 2921 8 discriminator 4 view .LVU2924
2922:src/display.c **** 	      while(*b) {
 9121              		.loc 1 2922 8 discriminator 4 view .LVU2925
2922:src/display.c **** 	      while(*b) {
 9122              		.loc 1 2922 12 is_stmt 0 discriminator 4 view .LVU2926
 9123 0106 894B     		ldr	r3, .L1221+28
2923:src/display.c **** 		*l++=*b++;
 9124              		.loc 1 2923 14 discriminator 4 view .LVU2927
ARM GAS  /tmp/ccSEf3H9.s 			page 272


 9125 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2922:src/display.c **** 	      while(*b) {
 9126              		.loc 1 2922 12 discriminator 4 view .LVU2928
 9127 010c 2025     		movs	r5, #32
 9128 010e 1D70     		strb	r5, [r3]
2923:src/display.c **** 		*l++=*b++;
 9129              		.loc 1 2923 8 is_stmt 1 discriminator 4 view .LVU2929
2923:src/display.c **** 		*l++=*b++;
 9130              		.loc 1 2923 13 discriminator 4 view .LVU2930
 9131 0110 0029     		cmp	r1, #0
 9132 0112 00F0FD82 		beq	.L1053
 9133 0116 0333     		adds	r3, r3, #3
 9134 0118 1EA8     		add	r0, sp, #120
 9135              	.LVL1014:
 9136              	.L1031:
2924:src/display.c **** 		*l++=' ';
 9137              		.loc 1 2924 3 view .LVU2931
2924:src/display.c **** 		*l++=' ';
 9138              		.loc 1 2924 7 is_stmt 0 view .LVU2932
 9139 011a 03F8021C 		strb	r1, [r3, #-2]
2925:src/display.c **** 	      }
 9140              		.loc 1 2925 3 is_stmt 1 view .LVU2933
 9141              	.LVL1015:
2923:src/display.c **** 		*l++=*b++;
 9142              		.loc 1 2923 14 is_stmt 0 view .LVU2934
 9143 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9144              	.LVL1016:
2925:src/display.c **** 	      }
 9145              		.loc 1 2925 7 view .LVU2935
 9146 0122 03F8015C 		strb	r5, [r3, #-1]
2923:src/display.c **** 		*l++=*b++;
 9147              		.loc 1 2923 13 is_stmt 1 view .LVU2936
 9148 0126 1A46     		mov	r2, r3
 9149 0128 0233     		adds	r3, r3, #2
 9150              	.LVL1017:
2923:src/display.c **** 		*l++=*b++;
 9151              		.loc 1 2923 13 is_stmt 0 view .LVU2937
 9152 012a 0029     		cmp	r1, #0
 9153 012c F5D1     		bne	.L1031
 9154              	.LVL1018:
 9155              	.L1030:
2927:src/display.c **** 	    }
 9156              		.loc 1 2927 8 is_stmt 1 view .LVU2938
2927:src/display.c **** 	    }
 9157              		.loc 1 2927 10 is_stmt 0 view .LVU2939
 9158 012e 0023     		movs	r3, #0
 9159 0130 7F4D     		ldr	r5, .L1221+32
 9160 0132 1370     		strb	r3, [r2]
 9161              	.LVL1019:
2927:src/display.c **** 	    }
 9162              		.loc 1 2927 10 view .LVU2940
 9163              	.LBE576:
 9164              	.LBE575:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9165              		.loc 1 2932 2 is_stmt 1 view .LVU2941
 9166 0134 21E0     		b	.L1182
 9167              	.LVL1020:
ARM GAS  /tmp/ccSEf3H9.s 			page 273


 9168              	.L1184:
2618:src/display.c **** 
 9169              		.loc 1 2618 4 view .LVU2942
 9170 0136 FFF7FEFF 		bl	wait_for_display
 9171              	.LVL1021:
2621:src/display.c **** 	    clr_dot(i);
 9172              		.loc 1 2621 4 view .LVU2943
2621:src/display.c **** 	    clr_dot(i);
 9173              		.loc 1 2621 16 view .LVU2944
 9174              	.L895:
2622:src/display.c **** 	  }
 9175              		.loc 1 2622 6 discriminator 3 view .LVU2945
 9176 013a 3846     		mov	r0, r7
2621:src/display.c **** 	    clr_dot(i);
 9177              		.loc 1 2621 31 is_stmt 0 discriminator 3 view .LVU2946
 9178 013c 0137     		adds	r7, r7, #1
 9179              	.LVL1022:
2622:src/display.c **** 	  }
 9180              		.loc 1 2622 6 discriminator 3 view .LVU2947
 9181 013e FFF7FEFF 		bl	clr_dot
 9182              	.LVL1023:
2621:src/display.c **** 	    clr_dot(i);
 9183              		.loc 1 2621 31 is_stmt 1 discriminator 3 view .LVU2948
2621:src/display.c **** 	    clr_dot(i);
 9184              		.loc 1 2621 16 discriminator 3 view .LVU2949
2621:src/display.c **** 	    clr_dot(i);
 9185              		.loc 1 2621 4 is_stmt 0 discriminator 3 view .LVU2950
 9186 0142 832F     		cmp	r7, #131
 9187 0144 F9D1     		bne	.L895
 9188 0146 754B     		ldr	r3, .L1221+12
 9189 0148 754F     		ldr	r7, .L1221+16
 9190              	.LVL1024:
2621:src/display.c **** 	    clr_dot(i);
 9191              		.loc 1 2621 4 discriminator 3 view .LVU2951
 9192 014a 0093     		str	r3, [sp]
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9193              		.loc 1 2594 6 view .LVU2952
 9194 014c 0026     		movs	r6, #0
 9195              	.LVL1025:
 9196              	.L896:
2890:src/display.c **** 	    if (p == NULL || cata) {
 9197              		.loc 1 2890 6 is_stmt 1 view .LVU2953
2890:src/display.c **** 	    if (p == NULL || cata) {
 9198              		.loc 1 2890 10 is_stmt 0 view .LVU2954
 9199 014e FFF7FEFF 		bl	get_cmdline
 9200              	.LVL1026:
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9201              		.loc 1 2891 6 is_stmt 1 view .LVU2955
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9202              		.loc 1 2891 9 is_stmt 0 view .LVU2956
 9203 0152 0546     		mov	r5, r0
 9204 0154 18B1     		cbz	r0, .L990
2891:src/display.c **** 	      if (ShowRegister != -1) {
 9205              		.loc 1 2891 20 discriminator 1 view .LVU2957
 9206 0156 BAF1000F 		cmp	r10, #0
 9207 015a 00F09680 		beq	.L991
 9208              	.L990:
ARM GAS  /tmp/ccSEf3H9.s 			page 274


2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9209              		.loc 1 2892 8 is_stmt 1 view .LVU2958
2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9210              		.loc 1 2892 25 is_stmt 0 view .LVU2959
 9211 015e 744D     		ldr	r5, .L1221+32
 9212 0160 2868     		ldr	r0, [r5]
 9213              	.LVL1027:
2892:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 9214              		.loc 1 2892 11 view .LVU2960
 9215 0162 421C     		adds	r2, r0, #1
 9216 0164 00F03381 		beq	.L992
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9217              		.loc 1 2893 3 is_stmt 1 view .LVU2961
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9218              		.loc 1 2893 39 is_stmt 0 view .LVU2962
 9219 0168 6428     		cmp	r0, #100
 9220 016a 00F0C580 		beq	.L1187
 9221              	.L993:
2894:src/display.c **** 	      }
 9222              		.loc 1 2894 3 is_stmt 1 view .LVU2963
 9223 016e 0021     		movs	r1, #0
 9224 0170 FFF7FEFF 		bl	format_reg
 9225              	.LVL1028:
2902:src/display.c **** 	      goto finish;
 9226              		.loc 1 2902 6 view .LVU2964
2902:src/display.c **** 	      goto finish;
 9227              		.loc 1 2902 9 is_stmt 0 view .LVU2965
 9228 0174 D8F80030 		ldr	r3, [r8]
 9229 0178 73BB     		cbnz	r3, .L995
 9230              	.LVL1029:
 9231              	.L1182:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9232              		.loc 1 2932 2 view .LVU2966
 9233 017a FFF7FEFF 		bl	set_annunciators
 9234              	.LVL1030:
2933:src/display.c **** 	  ShowRPN = 0;
 9235              		.loc 1 2933 2 is_stmt 1 view .LVU2967
 9236              	.L898:
2934:src/display.c **** 	  dot(RPN, 0);
 9237              		.loc 1 2934 4 view .LVU2968
2934:src/display.c **** 	  dot(RPN, 0);
 9238              		.loc 1 2934 12 is_stmt 0 view .LVU2969
 9239 017e DFF8B481 		ldr	r8, .L1221+36
 9240 0182 0023     		movs	r3, #0
 9241              	.LBB578:
 9242              	.LBB579:
 341:src/display.c **** }
 9243              		.loc 1 341 8 view .LVU2970
 9244 0184 8D20     		movs	r0, #141
 9245              	.LBE579:
 9246              	.LBE578:
2934:src/display.c **** 	  dot(RPN, 0);
 9247              		.loc 1 2934 12 view .LVU2971
 9248 0186 C8F80030 		str	r3, [r8]
2935:src/display.c **** 	}
 9249              		.loc 1 2935 4 is_stmt 1 view .LVU2972
 9250              	.LVL1031:
ARM GAS  /tmp/ccSEf3H9.s 			page 275


 9251              	.LBB581:
 9252              	.LBI578:
 339:src/display.c ****   if (on)	set_dot(n);
 9253              		.loc 1 339 6 view .LVU2973
 9254              	.LBB580:
 340:src/display.c ****   else	clr_dot(n);
 9255              		.loc 1 340 3 view .LVU2974
 341:src/display.c **** }
 9256              		.loc 1 341 8 view .LVU2975
 9257 018a FFF7FEFF 		bl	clr_dot
 9258              	.LVL1032:
 9259              	.L1032:
 341:src/display.c **** }
 9260              		.loc 1 341 8 is_stmt 0 view .LVU2976
 9261              	.LBE580:
 9262              	.LBE581:
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9263              		.loc 1 2938 2 is_stmt 1 view .LVU2977
2939:src/display.c **** 
 9264              		.loc 1 2939 4 is_stmt 0 view .LVU2978
 9265 018e D8F80030 		ldr	r3, [r8]
 9266 0192 002B     		cmp	r3, #0
 9267 0194 40F0E280 		bne	.L1054
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9268              		.loc 1 2938 31 view .LVU2979
 9269 0198 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9270 019a 12F04003 		ands	r3, r2, #64
 9271 019e 08D0     		beq	.L1033
2939:src/display.c **** 
 9272              		.loc 1 2939 8 view .LVU2980
 9273 01a0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2939:src/display.c **** 
 9274              		.loc 1 2939 4 view .LVU2981
 9275 01a2 1B07     		lsls	r3, r3, #28
 9276 01a4 40F10681 		bpl	.L1056
2939:src/display.c **** 
 9277              		.loc 1 2939 30 discriminator 3 view .LVU2982
 9278 01a8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9279 01aa 012B     		cmp	r3, #1
 9280 01ac 01D0     		beq	.L1033
2939:src/display.c **** 
 9281              		.loc 1 2939 60 discriminator 5 view .LVU2983
 9282 01ae C2F38003 		ubfx	r3, r2, #2, #1
 9283              	.L1033:
2938:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9284              		.loc 1 2938 19 discriminator 9 view .LVU2984
 9285 01b2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9286 01b4 63F34512 		bfi	r2, r3, #5, #1
 9287 01b8 E275     		strb	r2, [r4, #23]
2942:src/display.c **** 	  annunciators();
 9288              		.loc 1 2942 2 is_stmt 1 discriminator 9 view .LVU2985
2942:src/display.c **** 	  annunciators();
 9289              		.loc 1 2942 5 is_stmt 0 discriminator 9 view .LVU2986
 9290 01ba 002E     		cmp	r6, #0
 9291 01bc 00F0C880 		beq	.L1034
2942:src/display.c **** 	  annunciators();
 9292              		.loc 1 2942 36 discriminator 1 view .LVU2987
ARM GAS  /tmp/ccSEf3H9.s 			page 276


 9293 01c0 D3B2     		uxtb	r3, r2
2942:src/display.c **** 	  annunciators();
 9294              		.loc 1 2942 13 discriminator 1 view .LVU2988
 9295 01c2 03F02103 		and	r3, r3, #33
 9296 01c6 202B     		cmp	r3, #32
 9297 01c8 00F0C280 		beq	.L1034
 9298              	.L1035:
2943:src/display.c ****  	State2.hms = 0;
 9299              		.loc 1 2943 4 is_stmt 1 view .LVU2989
 9300 01cc FFF7FEFF 		bl	annunciators
 9301              	.LVL1033:
 9302              	.L1036:
2944:src/display.c **** #else
 9303              		.loc 1 2944 3 view .LVU2990
2944:src/display.c **** #else
 9304              		.loc 1 2944 14 is_stmt 0 view .LVU2991
 9305 01d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9306 01d2 6FF30003 		bfc	r3, #0, #1
 9307 01d6 E375     		strb	r3, [r4, #23]
 9308              	.L995:
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9309              		.loc 1 2951 2 is_stmt 1 view .LVU2992
2952:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9310              		.loc 1 2952 2 view .LVU2993
2953:src/display.c **** 	State2.invalid_disp = 0;
 9311              		.loc 1 2953 2 view .LVU2994
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9312              		.loc 1 2951 17 is_stmt 0 view .LVU2995
 9313 01d8 6369     		ldr	r3, [r4, #20]
2957:src/display.c **** 	State2.disp_small = 0;
 9314              		.loc 1 2957 11 view .LVU2996
 9315 01da 009A     		ldr	r2, [sp]
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9316              		.loc 1 2951 17 view .LVU2997
 9317 01dc 23F02173 		bic	r3, r3, #42205184
 9318 01e0 23F48053 		bic	r3, r3, #4096
2953:src/display.c **** 	State2.invalid_disp = 0;
 9319              		.loc 1 2953 15 view .LVU2998
 9320 01e4 0026     		movs	r6, #0
2951:src/display.c **** 	State2.disp_as_alpha = 0;
 9321              		.loc 1 2951 17 view .LVU2999
 9322 01e6 6361     		str	r3, [r4, #20]
2955:src/display.c **** 	DispMsg = CNULL;
 9323              		.loc 1 2955 15 view .LVU3000
 9324 01e8 6423     		movs	r3, #100
2953:src/display.c **** 	State2.invalid_disp = 0;
 9325              		.loc 1 2953 15 view .LVU3001
 9326 01ea 6674     		strb	r6, [r4, #17]
2954:src/display.c **** 	ShowRegister = regX_idx;
 9327              		.loc 1 2954 2 is_stmt 1 view .LVU3002
2955:src/display.c **** 	DispMsg = CNULL;
 9328              		.loc 1 2955 2 view .LVU3003
2956:src/display.c **** 	DispPlot = 0;
 9329              		.loc 1 2956 10 is_stmt 0 view .LVU3004
 9330 01ec 3E60     		str	r6, [r7]
2957:src/display.c **** 	State2.disp_small = 0;
 9331              		.loc 1 2957 11 view .LVU3005
ARM GAS  /tmp/ccSEf3H9.s 			page 277


 9332 01ee 1680     		strh	r6, [r2]	@ movhi
2955:src/display.c **** 	DispMsg = CNULL;
 9333              		.loc 1 2955 15 view .LVU3006
 9334 01f0 2B60     		str	r3, [r5]
2956:src/display.c **** 	DispPlot = 0;
 9335              		.loc 1 2956 2 is_stmt 1 view .LVU3007
2957:src/display.c **** 	State2.disp_small = 0;
 9336              		.loc 1 2957 2 view .LVU3008
2958:src/display.c **** 	finish_display();
 9337              		.loc 1 2958 2 view .LVU3009
2959:src/display.c **** 	no_status_top = 0;
 9338              		.loc 1 2959 2 view .LVU3010
 9339 01f2 FFF7FEFF 		bl	finish_display
 9340              	.LVL1034:
2960:src/display.c **** #ifdef CONSOLE
 9341              		.loc 1 2960 2 view .LVU3011
2960:src/display.c **** #ifdef CONSOLE
 9342              		.loc 1 2960 16 is_stmt 0 view .LVU3012
 9343 01f6 A9F80060 		strh	r6, [r9]	@ movhi
2964:src/display.c **** #else
 9344              		.loc 1 2964 7 view .LVU3013
 9345 01fa 29B0     		add	sp, sp, #164
 9346              		.cfi_remember_state
 9347              		.cfi_def_cfa_offset 36
 9348              		@ sp needed
 9349 01fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9350              	.LVL1035:
 9351              	.L1183:
 9352              		.cfi_restore_state
2602:src/display.c **** 	  State2.disp_temp = 1;
 9353              		.loc 1 2602 4 is_stmt 1 view .LVU3014
2603:src/display.c **** #ifdef CONSOLE
 9354              		.loc 1 2603 4 view .LVU3015
2607:src/display.c **** 	  return;
 9355              		.loc 1 2607 12 is_stmt 0 view .LVU3016
 9356 0200 4C49     		ldr	r1, .L1221+36
2602:src/display.c **** 	  State2.disp_temp = 1;
 9357              		.loc 1 2602 23 view .LVU3017
 9358 0202 23F03003 		bic	r3, r3, #48
 9359 0206 43F02003 		orr	r3, r3, #32
 9360 020a E375     		strb	r3, [r4, #23]
2607:src/display.c **** 	  return;
 9361              		.loc 1 2607 4 is_stmt 1 view .LVU3018
2607:src/display.c **** 	  return;
 9362              		.loc 1 2607 12 is_stmt 0 view .LVU3019
 9363 020c 0A60     		str	r2, [r1]
2608:src/display.c **** 	}
 9364              		.loc 1 2608 4 is_stmt 1 view .LVU3020
2964:src/display.c **** #else
 9365              		.loc 1 2964 7 is_stmt 0 view .LVU3021
 9366 020e 29B0     		add	sp, sp, #164
 9367              		.cfi_remember_state
 9368              		.cfi_def_cfa_offset 36
 9369              		@ sp needed
 9370 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9371              	.LVL1036:
 9372              	.L899:
ARM GAS  /tmp/ccSEf3H9.s 			page 278


 9373              		.cfi_restore_state
2666:src/display.c **** 	  bp = scopy(bp, "HYP");
 9374              		.loc 1 2666 9 is_stmt 1 view .LVU3022
2666:src/display.c **** 	  bp = scopy(bp, "HYP");
 9375              		.loc 1 2666 12 is_stmt 0 view .LVU3023
 9376 0214 9A06     		lsls	r2, r3, #26
 9377 0216 00F1CF80 		bmi	.L1188
2678:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9378              		.loc 1 2678 9 is_stmt 1 view .LVU3024
2678:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9379              		.loc 1 2678 12 is_stmt 0 view .LVU3025
 9380 021a DF07     		lsls	r7, r3, #31
 9381 021c 00F15781 		bmi	.L1189
2693:src/display.c **** 	  /* Commands with arguments */
 9382              		.loc 1 2693 9 is_stmt 1 view .LVU3026
2693:src/display.c **** 	  /* Commands with arguments */
 9383              		.loc 1 2693 13 is_stmt 0 view .LVU3027
 9384 0220 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2693:src/display.c **** 	  /* Commands with arguments */
 9385              		.loc 1 2693 12 view .LVU3028
 9386 0222 8806     		lsls	r0, r1, #26
 9387 0224 40F1E880 		bpl	.L911
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9388              		.loc 1 2696 4 is_stmt 1 view .LVU3029
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9389              		.loc 1 2696 8 is_stmt 0 view .LVU3030
 9390 0228 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9391              		.loc 1 2696 7 view .LVU3031
 9392 022a 4D2B     		cmp	r3, #77
 9393 022c 00F08481 		beq	.L912
2696:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9394              		.loc 1 2696 28 discriminator 1 view .LVU3032
 9395 0230 03F17302 		add	r2, r3, #115
 9396 0234 D2B2     		uxtb	r2, r2
 9397 0236 012A     		cmp	r2, #1
 9398 0238 40F27E81 		bls	.L912
2592:src/display.c **** 	const char *p;
 9399              		.loc 1 2592 17 view .LVU3033
 9400 023c 1EA8     		add	r0, sp, #120
 9401              	.LVL1037:
 9402              	.L913:
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9403              		.loc 1 2699 4 is_stmt 1 view .LVU3034
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9404              		.loc 1 2699 35 is_stmt 0 view .LVU3035
 9405 023e 0622     		movs	r2, #6
 9406 0240 3D49     		ldr	r1, .L1221+40
 9407 0242 02EB0313 		add	r3, r2, r3, lsl #4
2699:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9408              		.loc 1 2699 9 view .LVU3036
 9409 0246 1944     		add	r1, r1, r3
 9410 0248 FFF7FEFF 		bl	scopy
 9411              	.LVL1038:
2700:src/display.c **** 	  if (State2.dot) {
 9412              		.loc 1 2700 4 is_stmt 1 view .LVU3037
2700:src/display.c **** 	  if (State2.dot) {
ARM GAS  /tmp/ccSEf3H9.s 			page 279


 9413              		.loc 1 2700 9 is_stmt 0 view .LVU3038
 9414 024c 3B4B     		ldr	r3, .L1221+44
 9415 024e 94F91510 		ldrsb	r1, [r4, #21]
 9416 0252 3B4A     		ldr	r2, .L1221+48
 9417 0254 12EA2101 		ands	r1, r2, r1, asr #32
 9418 0258 38BF     		it	cc
 9419 025a 1946     		movcc	r1, r3
 9420 025c FFF7FEFF 		bl	scopy
 9421              	.LVL1039:
2701:src/display.c **** 	    *bp++ = 's';
 9422              		.loc 1 2701 8 view .LVU3039
 9423 0260 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9424              	.LVL1040:
2701:src/display.c **** 	    *bp++ = 's';
 9425              		.loc 1 2701 4 is_stmt 1 view .LVU3040
2701:src/display.c **** 	    *bp++ = 's';
 9426              		.loc 1 2701 7 is_stmt 0 view .LVU3041
 9427 0262 5906     		lsls	r1, r3, #25
 9428 0264 40F16E81 		bpl	.L915
2702:src/display.c **** 	    *bp++ = '_';
 9429              		.loc 1 2702 6 is_stmt 1 view .LVU3042
 9430              	.LVL1041:
2702:src/display.c **** 	    *bp++ = '_';
 9431              		.loc 1 2702 12 is_stmt 0 view .LVU3043
 9432 0268 7322     		movs	r2, #115
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9433              		.loc 1 2703 12 view .LVU3044
 9434 026a 5F23     		movs	r3, #95
2702:src/display.c **** 	    *bp++ = '_';
 9435              		.loc 1 2702 12 view .LVU3045
 9436 026c 0270     		strb	r2, [r0]
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9437              		.loc 1 2703 6 is_stmt 1 view .LVU3046
 9438              	.LVL1042:
2703:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9439              		.loc 1 2703 12 is_stmt 0 view .LVU3047
 9440 026e 4370     		strb	r3, [r0, #1]
 9441              	.LVL1043:
 9442              	.L939:
2806:src/display.c **** 	    set_status_top(buf);
 9443              		.loc 1 2806 4 is_stmt 1 view .LVU3048
2806:src/display.c **** 	    set_status_top(buf);
 9444              		.loc 1 2806 7 is_stmt 0 view .LVU3049
 9445 0270 BBF1000F 		cmp	fp, #0
 9446 0274 00F0D380 		beq	.L906
 9447              	.L1172:
2807:src/display.c **** 	    no_status_top = 1;
 9448              		.loc 1 2807 6 is_stmt 1 view .LVU3050
 9449              	.LVL1044:
 9450              	.LBB582:
 9451              	.LBI582:
3505:src/display.c **** 	if (no_status_top) return;
 9452              		.loc 1 3505 19 view .LVU3051
 9453              	.LBB583:
3506:src/display.c **** 	if (State2.runmode) {
 9454              		.loc 1 3506 2 view .LVU3052
3506:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/ccSEf3H9.s 			page 280


 9455              		.loc 1 3506 5 is_stmt 0 view .LVU3053
 9456 0278 B9F90030 		ldrsh	r3, [r9]
 9457 027c 002B     		cmp	r3, #0
 9458 027e 7FF4F8AE 		bne	.L902
 9459              	.LBE583:
 9460              	.LBE582:
 9461              	.LBB584:
 9462              	.LBB585:
 9463 0282 1EA8     		add	r0, sp, #120
 9464              	.LVL1045:
3506:src/display.c **** 	if (State2.runmode) {
 9465              		.loc 1 3506 5 view .LVU3054
 9466 0284 FFF7FEFF 		bl	set_status_top.part.0
 9467              	.LVL1046:
3506:src/display.c **** 	if (State2.runmode) {
 9468              		.loc 1 3506 5 view .LVU3055
 9469 0288 F3E6     		b	.L902
 9470              	.LVL1047:
 9471              	.L991:
3506:src/display.c **** 	if (State2.runmode) {
 9472              		.loc 1 3506 5 view .LVU3056
 9473              	.LBE585:
 9474              	.LBE584:
2899:src/display.c **** 	      x_disp = 1;
 9475              		.loc 1 2899 8 is_stmt 1 view .LVU3057
 9476              	.LBB586:
 9477              	.LBI586:
1245:src/display.c ****       int i;
 9478              		.loc 1 1245 17 view .LVU3058
 9479              	.LBB587:
1246:src/display.c ****       int gotdot = -1;
 9480              		.loc 1 1246 7 view .LVU3059
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9481              		.loc 1 1247 7 view .LVU3060
1249:src/display.c **** #endif
 9482              		.loc 1 1249 7 view .LVU3061
1253:src/display.c **** #endif
 9483              		.loc 1 1253 7 view .LVU3062
1256:src/display.c **** 	SET_MANT_SIGN;
 9484              		.loc 1 1256 7 view .LVU3063
1256:src/display.c **** 	SET_MANT_SIGN;
 9485              		.loc 1 1256 10 is_stmt 0 view .LVU3064
 9486 028a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9487 028c 2D2B     		cmp	r3, #45
 9488 028e 00F07981 		beq	.L1190
 9489              	.LVL1048:
 9490              	.L999:
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9491              		.loc 1 1261 7 is_stmt 1 view .LVU3065
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9492              		.loc 1 1261 11 is_stmt 0 view .LVU3066
 9493 0292 204B     		ldr	r3, .L1221+4
 9494 0294 1B68     		ldr	r3, [r3]
 9495 0296 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1261:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9496              		.loc 1 1261 10 view .LVU3067
 9497 029a 13F0010B 		ands	fp, r3, #1
ARM GAS  /tmp/ccSEf3H9.s 			page 281


 9498 029e 00F02781 		beq	.L1000
 9499              	.LVL1049:
1262:src/display.c **** 	  set_dig(i, *p);
 9500              		.loc 1 1262 12 is_stmt 1 view .LVU3068
 9501 02a2 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1262:src/display.c **** 	  set_dig(i, *p);
 9502              		.loc 1 1262 8 is_stmt 0 view .LVU3069
 9503 02a4 4FF0000A 		mov	r10, #0
 9504              	.LVL1050:
1262:src/display.c **** 	  set_dig(i, *p);
 9505              		.loc 1 1262 2 view .LVU3070
 9506 02a8 41B1     		cbz	r1, .L1002
 9507              	.LVL1051:
 9508              	.L1001:
1263:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9509              		.loc 1 1263 4 is_stmt 1 view .LVU3071
 9510 02aa 5046     		mov	r0, r10
 9511 02ac FFF7FEFF 		bl	set_dig
 9512              	.LVL1052:
1264:src/display.c **** 	}
 9513              		.loc 1 1264 4 view .LVU3072
1262:src/display.c **** 	  set_dig(i, *p);
 9514              		.loc 1 1262 12 is_stmt 0 view .LVU3073
 9515 02b0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9516              	.LVL1053:
1264:src/display.c **** 	}
 9517              		.loc 1 1264 6 view .LVU3074
 9518 02b4 0AF1090A 		add	r10, r10, #9
 9519              	.LVL1054:
1262:src/display.c **** 	  set_dig(i, *p);
 9520              		.loc 1 1262 24 is_stmt 1 view .LVU3075
1262:src/display.c **** 	  set_dig(i, *p);
 9521              		.loc 1 1262 12 view .LVU3076
1262:src/display.c **** 	  set_dig(i, *p);
 9522              		.loc 1 1262 2 is_stmt 0 view .LVU3077
 9523 02b8 0029     		cmp	r1, #0
 9524 02ba F6D1     		bne	.L1001
 9525              	.LVL1055:
 9526              	.L1002:
1266:src/display.c ****       } else {
 9527              		.loc 1 1266 2 is_stmt 1 view .LVU3078
 9528 02bc FFF7FEFF 		bl	carry_overflow
 9529              	.LVL1056:
1266:src/display.c ****       } else {
 9530              		.loc 1 1266 2 is_stmt 0 view .LVU3079
 9531              	.LBE587:
 9532              	.LBE586:
2902:src/display.c **** 	      goto finish;
 9533              		.loc 1 2902 6 is_stmt 1 view .LVU3080
2902:src/display.c **** 	      goto finish;
 9534              		.loc 1 2902 9 is_stmt 0 view .LVU3081
 9535 02c0 D8F80030 		ldr	r3, [r8]
 9536 02c4 002B     		cmp	r3, #0
 9537 02c6 40F00081 		bne	.L1096
 9538              	.LVL1057:
 9539              	.L1180:
2902:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccSEf3H9.s 			page 282


 9540              		.loc 1 2902 9 view .LVU3082
 9541 02ca 194D     		ldr	r5, .L1221+32
 9542              	.LVL1058:
 9543              	.L994:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9544              		.loc 1 2932 2 is_stmt 1 view .LVU3083
 9545 02cc FFF7FEFF 		bl	set_annunciators
 9546              	.LVL1059:
2933:src/display.c **** 	  ShowRPN = 0;
 9547              		.loc 1 2933 2 view .LVU3084
2933:src/display.c **** 	  ShowRPN = 0;
 9548              		.loc 1 2933 50 is_stmt 0 view .LVU3085
 9549 02d0 3B68     		ldr	r3, [r7]
 9550 02d2 002B     		cmp	r3, #0
 9551 02d4 7FF453AF 		bne	.L898
2933:src/display.c **** 	  ShowRPN = 0;
 9552              		.loc 1 2933 69 discriminator 3 view .LVU3086
 9553 02d8 009B     		ldr	r3, [sp]
 9554 02da B3F90030 		ldrsh	r3, [r3]
 9555 02de 002B     		cmp	r3, #0
 9556 02e0 7FF44DAF 		bne	.L898
2933:src/display.c **** 	  ShowRPN = 0;
 9557              		.loc 1 2933 81 discriminator 4 view .LVU3087
 9558 02e4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9559 02e6 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9560 02e8 03F00403 		and	r3, r3, #4
 9561 02ec 1343     		orrs	r3, r3, r2
 9562 02ee 7FF446AF 		bne	.L898
 9563 02f2 DFF84080 		ldr	r8, .L1221+36
 9564 02f6 4AE7     		b	.L1032
 9565              	.LVL1060:
 9566              	.L1187:
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9567              		.loc 1 2893 42 discriminator 1 view .LVU3088
 9568 02f8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2893:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9569              		.loc 1 2893 39 discriminator 1 view .LVU3089
 9570 02fa 13F00101 		ands	r1, r3, #1
 9571 02fe 7FF436AF 		bne	.L993
 9572              	.LVL1061:
2894:src/display.c **** 	      }
 9573              		.loc 1 2894 3 is_stmt 1 view .LVU3090
 9574 0302 FFF7FEFF 		bl	format_reg
 9575              	.LVL1062:
2902:src/display.c **** 	      goto finish;
 9576              		.loc 1 2902 6 view .LVU3091
2902:src/display.c **** 	      goto finish;
 9577              		.loc 1 2902 9 is_stmt 0 view .LVU3092
 9578 0306 D8F80030 		ldr	r3, [r8]
 9579 030a 002B     		cmp	r3, #0
 9580 030c DED0     		beq	.L994
 9581 030e 63E7     		b	.L995
 9582              	.L1222:
 9583              		.align	2
 9584              	.L1221:
 9585 0310 00000000 		.word	StateWhileOn
 9586 0314 00000000 		.word	main_ram
ARM GAS  /tmp/ccSEf3H9.s 			page 283


 9587 0318 00000000 		.word	.LANCHOR21
 9588 031c 00000000 		.word	DispPlot
 9589 0320 00000000 		.word	DispMsg
 9590 0324 00000000 		.word	.LANCHOR25
 9591 0328 00000000 		.word	.LANCHOR19
 9592 032c 00000000 		.word	LastDisplayedNumber
 9593 0330 00000000 		.word	ShowRegister
 9594 0334 00000000 		.word	ShowRPN
 9595 0338 00000000 		.word	argcmds
 9596 033c 04000000 		.word	.LC18
 9597 0340 00000000 		.word	.LC17
 9598 0344 00000000 		.word	.LANCHOR18
 9599 0348 00000000 		.word	WasDataEntry
 9600 034c 00000000 		.word	ProgFree
 9601              	.LVL1063:
 9602              	.L1034:
2942:src/display.c **** 	  annunciators();
 9603              		.loc 1 2942 52 discriminator 3 view .LVU3093
 9604 0350 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9605 0352 13F0C00F 		tst	r3, #192
 9606 0356 3FF43BAF 		beq	.L1036
 9607 035a 37E7     		b	.L1035
 9608              	.L1054:
 9609 035c 0023     		movs	r3, #0
 9610 035e 28E7     		b	.L1033
 9611              	.LVL1064:
 9612              	.L1185:
 9613              	.LBB618:
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9614              		.loc 1 2646 4 is_stmt 1 view .LVU3094
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9615              		.loc 1 2646 9 is_stmt 0 view .LVU3095
 9616 0360 B34B     		ldr	r3, .L1223
 9617 0362 CDF85E60 		str	r6, [sp, #94]	@ unaligned
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9618              		.loc 1 2647 4 is_stmt 1 view .LVU3096
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9619              		.loc 1 2646 9 is_stmt 0 view .LVU3097
 9620 0366 93E80700 		ldm	r3, {r0, r1, r2}
 9621 036a 15AB     		add	r3, sp, #84
 9622 036c 03C3     		stmia	r3!, {r0, r1}
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9623              		.loc 1 2647 4 view .LVU3098
 9624 036e 3146     		mov	r1, r6
 9625 0370 B048     		ldr	r0, .L1223+4
2646:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9626              		.loc 1 2646 9 view .LVU3099
 9627 0372 1A80     		strh	r2, [r3]	@ movhi
2647:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9628              		.loc 1 2647 4 view .LVU3100
 9629 0374 FFF7FEFF 		bl	set_digits_string
 9630              	.LVL1065:
2648:src/display.c **** #ifndef REALBUILD
 9631              		.loc 1 2648 4 is_stmt 1 view .LVU3101
 9632              	.LBB619:
 9633              	.LBI619:
 407:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccSEf3H9.s 			page 284


 9634              		.loc 1 407 14 view .LVU3102
 9635              	.LBB620:
 408:src/display.c ****   else	set_dig(base, ch);
 9636              		.loc 1 408 3 view .LVU3103
 409:src/display.c ****   return res;
 9637              		.loc 1 409 8 view .LVU3104
 9638 0378 7221     		movs	r1, #114
 9639 037a 6C20     		movs	r0, #108
 9640 037c FFF7FEFF 		bl	set_dig
 9641              	.LVL1066:
 410:src/display.c **** }
 9642              		.loc 1 410 3 view .LVU3105
 410:src/display.c **** }
 9643              		.loc 1 410 3 is_stmt 0 view .LVU3106
 9644              	.LBE620:
 9645              	.LBE619:
2650:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9646              		.loc 1 2650 4 is_stmt 1 view .LVU3107
 9647 0380 AD49     		ldr	r1, .L1223+8
 9648 0382 AE48     		ldr	r0, .L1223+12
 9649 0384 AE4F     		ldr	r7, .L1223+16
 9650 0386 AF4D     		ldr	r5, .L1223+20
 9651 0388 FFF7FEFF 		bl	scopy
 9652              	.LVL1067:
2651:src/display.c **** #endif
 9653              		.loc 1 2651 4 view .LVU3108
 9654 038c AE49     		ldr	r1, .L1223+24
 9655 038e AF48     		ldr	r0, .L1223+28
 9656 0390 FFF7FEFF 		bl	scopy
 9657              	.LVL1068:
2653:src/display.c **** 	  set_status(vers);
 9658              		.loc 1 2653 4 view .LVU3109
 9659 0394 AE49     		ldr	r1, .L1223+32
 9660 0396 0422     		movs	r2, #4
 9661 0398 0DF15D00 		add	r0, sp, #93
 9662 039c FFF7FEFF 		bl	xcopy
 9663              	.LVL1069:
2654:src/display.c **** 	  skip = 1;
 9664              		.loc 1 2654 4 view .LVU3110
 9665 03a0 15A8     		add	r0, sp, #84
 9666 03a2 FFF7FEFF 		bl	set_status
 9667              	.LVL1070:
2655:src/display.c **** 	  goto nostk;
 9668              		.loc 1 2655 4 view .LVU3111
2656:src/display.c **** 	} else if (State2.confirm) {
 9669              		.loc 1 2656 4 view .LVU3112
2656:src/display.c **** 	} else if (State2.confirm) {
 9670              		.loc 1 2656 4 is_stmt 0 view .LVU3113
 9671              	.LBE618:
2886:src/display.c **** 	if (!skip) {
 9672              		.loc 1 2886 2 is_stmt 1 view .LVU3114
 9673 03a6 AB4B     		ldr	r3, .L1223+36
 9674 03a8 0093     		str	r3, [sp]
 9675 03aa FFF7FEFF 		bl	show_flags
 9676              	.LVL1071:
2887:src/display.c **** 	  if (State2.runmode) {
 9677              		.loc 1 2887 2 view .LVU3115
ARM GAS  /tmp/ccSEf3H9.s 			page 285


2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9678              		.loc 1 2932 2 view .LVU3116
 9679 03ae FFF7FEFF 		bl	set_annunciators
 9680              	.LVL1072:
2933:src/display.c **** 	  ShowRPN = 0;
 9681              		.loc 1 2933 2 view .LVU3117
 9682 03b2 E4E6     		b	.L898
 9683              	.LVL1073:
 9684              	.L1056:
2933:src/display.c **** 	  ShowRPN = 0;
 9685              		.loc 1 2933 2 is_stmt 0 view .LVU3118
 9686 03b4 0123     		movs	r3, #1
 9687 03b6 FCE6     		b	.L1033
 9688              	.LVL1074:
 9689              	.L1188:
2667:src/display.c **** 	  if (! State2.dot)
 9690              		.loc 1 2667 4 is_stmt 1 view .LVU3119
2667:src/display.c **** 	  if (! State2.dot)
 9691              		.loc 1 2667 9 is_stmt 0 view .LVU3120
 9692 03b8 A749     		ldr	r1, .L1223+40
 9693 03ba 1EA8     		add	r0, sp, #120
 9694              	.LVL1075:
2667:src/display.c **** 	  if (! State2.dot)
 9695              		.loc 1 2667 9 view .LVU3121
 9696 03bc FFF7FEFF 		bl	scopy
 9697              	.LVL1076:
2668:src/display.c **** 	    *bp++ = '\235';
 9698              		.loc 1 2668 8 view .LVU3122
 9699 03c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9700              	.LVL1077:
2668:src/display.c **** 	    *bp++ = '\235';
 9701              		.loc 1 2668 4 is_stmt 1 view .LVU3123
2668:src/display.c **** 	    *bp++ = '\235';
 9702              		.loc 1 2668 7 is_stmt 0 view .LVU3124
 9703 03c2 5B06     		lsls	r3, r3, #25
 9704 03c4 3FF554AF 		bmi	.L939
2669:src/display.c **** 	  if (yreg_enabled) {
 9705              		.loc 1 2669 6 is_stmt 1 view .LVU3125
 9706              	.LVL1078:
2669:src/display.c **** 	  if (yreg_enabled) {
 9707              		.loc 1 2669 12 is_stmt 0 view .LVU3126
 9708 03c8 9D23     		movs	r3, #157
 9709 03ca 0370     		strb	r3, [r0]
 9710 03cc 50E7     		b	.L939
 9711              	.LVL1079:
 9712              	.L992:
2897:src/display.c **** 	    } else {
 9713              		.loc 1 2897 3 is_stmt 1 view .LVU3127
 9714 03ce A348     		ldr	r0, .L1223+44
 9715 03d0 2421     		movs	r1, #36
 9716 03d2 FFF7FEFF 		bl	set_digits_string
 9717              	.LVL1080:
2902:src/display.c **** 	      goto finish;
 9718              		.loc 1 2902 6 view .LVU3128
2902:src/display.c **** 	      goto finish;
 9719              		.loc 1 2902 9 is_stmt 0 view .LVU3129
 9720 03d6 D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccSEf3H9.s 			page 286


 9721 03da 002B     		cmp	r3, #0
 9722 03dc 3FF4CDAE 		beq	.L1182
 9723 03e0 FAE6     		b	.L995
 9724              	.LVL1081:
 9725              	.L900:
2664:src/display.c **** 	  }
 9726              		.loc 1 2664 6 is_stmt 1 view .LVU3130
 9727 03e2 9C4B     		ldr	r3, .L1223+36
 9728 03e4 9E48     		ldr	r0, .L1223+48
 9729 03e6 0093     		str	r3, [sp]
 9730 03e8 954F     		ldr	r7, .L1223+16
 9731 03ea FFF7FEFF 		bl	set_status
 9732              	.LVL1082:
2884:src/display.c ****       nostk:
 9733              		.loc 1 2884 2 view .LVU3131
 9734 03ee FFF7FEFF 		bl	show_stack
 9735              	.LVL1083:
2886:src/display.c **** 	if (!skip) {
 9736              		.loc 1 2886 2 view .LVU3132
 9737 03f2 FFF7FEFF 		bl	show_flags
 9738              	.LVL1084:
2887:src/display.c **** 	  if (State2.runmode) {
 9739              		.loc 1 2887 2 view .LVU3133
 9740 03f6 46E6     		b	.L903
 9741              	.L911:
2731:src/display.c **** 	  *bp++ = 'x';
 9742              		.loc 1 2731 9 view .LVU3134
2731:src/display.c **** 	  *bp++ = 'x';
 9743              		.loc 1 2731 19 is_stmt 0 view .LVU3135
 9744 03f8 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2731:src/display.c **** 	  *bp++ = 'x';
 9745              		.loc 1 2731 12 view .LVU3136
 9746 03fa 072A     		cmp	r2, #7
 9747 03fc 00F04081 		beq	.L922
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9748              		.loc 1 2732 4 is_stmt 1 view .LVU3137
 9749              	.LVL1085:
2733:src/display.c **** 	  *bp++ = '_';
 9750              		.loc 1 2733 33 is_stmt 0 view .LVU3138
 9751 0400 984B     		ldr	r3, .L1223+52
2733:src/display.c **** 	  *bp++ = '_';
 9752              		.loc 1 2733 10 view .LVU3139
 9753 0402 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9754 0404 8DF87930 		strb	r3, [sp, #121]
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9755              		.loc 1 2732 10 view .LVU3140
 9756 0408 7822     		movs	r2, #120
2734:src/display.c **** 	  *bp++ = '?';
 9757              		.loc 1 2734 10 view .LVU3141
 9758 040a 43F65F73 		movw	r3, #16223
2732:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9759              		.loc 1 2732 10 view .LVU3142
 9760 040e 8DF87820 		strb	r2, [sp, #120]
2733:src/display.c **** 	  *bp++ = '_';
 9761              		.loc 1 2733 4 is_stmt 1 view .LVU3143
 9762              	.LVL1086:
2734:src/display.c **** 	  *bp++ = '?';
ARM GAS  /tmp/ccSEf3H9.s 			page 287


 9763              		.loc 1 2734 4 view .LVU3144
2735:src/display.c **** 	  if (yreg_enabled) {
 9764              		.loc 1 2735 4 view .LVU3145
2734:src/display.c **** 	  *bp++ = '?';
 9765              		.loc 1 2734 10 is_stmt 0 view .LVU3146
 9766 0412 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2736:src/display.c **** 	    set_status_top(buf);
 9767              		.loc 1 2736 4 is_stmt 1 view .LVU3147
2736:src/display.c **** 	    set_status_top(buf);
 9768              		.loc 1 2736 7 is_stmt 0 view .LVU3148
 9769 0416 BBF1000F 		cmp	fp, #0
 9770 041a 7FF42DAF 		bne	.L1172
 9771              	.LVL1087:
 9772              	.L906:
2676:src/display.c **** 	  }
 9773              		.loc 1 2676 6 is_stmt 1 view .LVU3149
 9774 041e 1EA8     		add	r0, sp, #120
 9775 0420 FFF7FEFF 		bl	set_status
 9776              	.LVL1088:
2884:src/display.c ****       nostk:
 9777              		.loc 1 2884 2 view .LVU3150
 9778 0424 8B4B     		ldr	r3, .L1223+36
 9779 0426 0093     		str	r3, [sp]
 9780 0428 854F     		ldr	r7, .L1223+16
 9781 042a FFF7FEFF 		bl	show_stack
 9782              	.LVL1089:
2886:src/display.c **** 	if (!skip) {
 9783              		.loc 1 2886 2 view .LVU3151
 9784 042e FFF7FEFF 		bl	show_flags
 9785              	.LVL1090:
2887:src/display.c **** 	  if (State2.runmode) {
 9786              		.loc 1 2887 2 view .LVU3152
 9787 0432 28E6     		b	.L903
 9788              	.LVL1091:
 9789              	.L1186:
 9790              	.LBB621:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9791              		.loc 1 2911 6 is_stmt 0 discriminator 1 view .LVU3153
 9792 0434 8C49     		ldr	r1, .L1223+56
 9793 0436 0BEB8B03 		add	r3, fp, fp, lsl #2
2912:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9794              		.loc 1 2912 21 discriminator 1 view .LVU3154
 9795 043a 0BF0010B 		and	fp, fp, #1
 9796              	.LVL1092:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9797              		.loc 1 2911 6 discriminator 1 view .LVU3155
 9798 043e 1944     		add	r1, r1, r3
 9799 0440 1EA8     		add	r0, sp, #120
 9800 0442 0BF1030B 		add	fp, fp, #3
 9801 0446 0193     		str	r3, [sp, #4]
 9802 0448 FFF7FEFF 		bl	scopy_spc
 9803              	.LVL1093:
 9804 044c 5A46     		mov	r2, fp
 9805 044e 4146     		mov	r1, r8
 9806 0450 FFF7FEFF 		bl	num_arg_0
 9807              	.LVL1094:
2913:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccSEf3H9.s 			page 288


 9808              		.loc 1 2913 6 is_stmt 1 discriminator 1 view .LVU3156
 9809 0454 0921     		movs	r1, #9
 9810 0456 1EA8     		add	r0, sp, #120
 9811 0458 FFF7FEFF 		bl	set_digits_string
 9812              	.LVL1095:
2915:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9813              		.loc 1 2915 6 discriminator 1 view .LVU3157
 9814 045c 2822     		movs	r2, #40
 9815 045e 2946     		mov	r1, r5
 9816 0460 1EA8     		add	r0, sp, #120
 9817 0462 FFF7FEFF 		bl	xset
 9818              	.LVL1096:
2916:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9819              		.loc 1 2916 6 discriminator 1 view .LVU3158
 9820 0466 0121     		movs	r1, #1
 9821 0468 DAF80000 		ldr	r0, [r10]
 9822 046c 2A46     		mov	r2, r5
 9823 046e FFF7FEFF 		bl	set_exp
 9824              	.LVL1097:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9825              		.loc 1 2917 6 discriminator 1 view .LVU3159
 9826 0472 7E49     		ldr	r1, .L1223+60
 9827 0474 019B     		ldr	r3, [sp, #4]
 9828 0476 1944     		add	r1, r1, r3
 9829 0478 3EE6     		b	.L1038
 9830              	.LVL1098:
 9831              	.L1019:
2917:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9832              		.loc 1 2917 6 is_stmt 0 discriminator 1 view .LVU3160
 9833              	.LBE621:
 9834              	.LBB622:
 9835              	.LBB608:
1359:src/display.c **** 	    gotdot = i;
 9836              		.loc 1 1359 4 is_stmt 1 view .LVU3161
1359:src/display.c **** 	    gotdot = i;
 9837              		.loc 1 1359 7 is_stmt 0 view .LVU3162
 9838 047a BAF1FF3F 		cmp	r10, #-1
 9839 047e 08BF     		it	eq
 9840 0480 DA46     		moveq	r10, fp
 9841              	.LVL1099:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9842              		.loc 1 1361 4 is_stmt 1 view .LVU3163
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9843              		.loc 1 1362 6 view .LVU3164
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9844              		.loc 1 1362 13 is_stmt 0 view .LVU3165
 9845 0482 AAF11B0A 		sub	r10, r10, #27
 9846              	.LVL1100:
1363:src/display.c **** 	      break;
 9847              		.loc 1 1363 6 is_stmt 1 view .LVU3166
1363:src/display.c **** 	      break;
 9848              		.loc 1 1363 9 is_stmt 0 view .LVU3167
 9849 0486 BAF1000F 		cmp	r10, #0
 9850 048a 13DD     		ble	.L1004
1363:src/display.c **** 	      break;
 9851              		.loc 1 1363 9 view .LVU3168
 9852 048c 0296     		str	r6, [sp, #8]
ARM GAS  /tmp/ccSEf3H9.s 			page 289


 9853 048e 5646     		mov	r6, r10
 9854              	.LVL1101:
1363:src/display.c **** 	      break;
 9855              		.loc 1 1363 9 view .LVU3169
 9856 0490 BA46     		mov	r10, r7
 9857              	.LVL1102:
1363:src/display.c **** 	      break;
 9858              		.loc 1 1363 9 view .LVU3170
 9859 0492 2F46     		mov	r7, r5
 9860 0494 019D     		ldr	r5, [sp, #4]
 9861              	.LVL1103:
 9862              	.L1023:
1366:src/display.c **** 	      break;
 9863              		.loc 1 1366 6 is_stmt 1 view .LVU3171
1369:src/display.c **** 	  }
 9864              		.loc 1 1369 6 view .LVU3172
 9865              	.LBB588:
 9866              	.LBB589:
 370:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9867              		.loc 1 370 3 view .LVU3173
 9868 0496 3046     		mov	r0, r6
 9869              	.LBE589:
 9870              	.LBE588:
1366:src/display.c **** 	      break;
 9871              		.loc 1 1366 9 is_stmt 0 view .LVU3174
 9872 0498 0DB1     		cbz	r5, .L1024
 9873              	.LVL1104:
1366:src/display.c **** 	      break;
 9874              		.loc 1 1366 27 view .LVU3175
 9875 049a 092E     		cmp	r6, #9
 9876 049c 07D0     		beq	.L1169
 9877              	.L1024:
1369:src/display.c **** 	  }
 9878              		.loc 1 1369 6 view .LVU3176
 9879 049e 744B     		ldr	r3, .L1223+64
 9880 04a0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9881              	.LVL1105:
 9882              	.LBB591:
 9883              	.LBI588:
 367:src/display.c ****   if (sep == SEP_NONE)
 9884              		.loc 1 367 14 is_stmt 1 view .LVU3177
 9885              	.LBB590:
 368:src/display.c ****     return res;
 9886              		.loc 1 368 3 view .LVU3178
 368:src/display.c ****     return res;
 9887              		.loc 1 368 6 is_stmt 0 view .LVU3179
 9888 04a2 09B1     		cbz	r1, .L1025
 9889 04a4 FFF7FEFF 		bl	set_separator.part.0
 9890              	.LVL1106:
 9891              	.L1025:
 368:src/display.c ****     return res;
 9892              		.loc 1 368 6 view .LVU3180
 9893              	.LBE590:
 9894              	.LBE591:
1361:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9895              		.loc 1 1361 4 is_stmt 1 view .LVU3181
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
ARM GAS  /tmp/ccSEf3H9.s 			page 290


 9896              		.loc 1 1362 6 view .LVU3182
1362:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9897              		.loc 1 1362 13 is_stmt 0 view .LVU3183
 9898 04a8 1B3E     		subs	r6, r6, #27
 9899              	.LVL1107:
1363:src/display.c **** 	      break;
 9900              		.loc 1 1363 6 is_stmt 1 view .LVU3184
1363:src/display.c **** 	      break;
 9901              		.loc 1 1363 9 is_stmt 0 view .LVU3185
 9902 04aa 002E     		cmp	r6, #0
 9903 04ac F3DC     		bgt	.L1023
 9904              	.L1169:
1363:src/display.c **** 	      break;
 9905              		.loc 1 1363 9 view .LVU3186
 9906 04ae 029E     		ldr	r6, [sp, #8]
 9907              	.LVL1108:
1363:src/display.c **** 	      break;
 9908              		.loc 1 1363 9 view .LVU3187
 9909 04b0 3D46     		mov	r5, r7
 9910 04b2 5746     		mov	r7, r10
 9911              	.LVL1109:
 9912              	.L1004:
1373:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9913              		.loc 1 1373 4 is_stmt 1 view .LVU3188
1373:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9914              		.loc 1 1373 8 is_stmt 0 view .LVU3189
 9915 04b4 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1373:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9916              		.loc 1 1373 7 view .LVU3190
 9917 04b6 A2F14401 		sub	r1, r2, #68
 9918 04ba 0129     		cmp	r1, #1
 9919 04bc 40F20881 		bls	.L1191
 9920              	.L1026:
 9921              	.LVL1110:
1373:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9922              		.loc 1 1373 7 view .LVU3191
 9923              	.LBE608:
 9924              	.LBE622:
2902:src/display.c **** 	      goto finish;
 9925              		.loc 1 2902 6 is_stmt 1 view .LVU3192
2902:src/display.c **** 	      goto finish;
 9926              		.loc 1 2902 9 is_stmt 0 view .LVU3193
 9927 04c0 D8F80030 		ldr	r3, [r8]
 9928 04c4 002B     		cmp	r3, #0
 9929 04c6 3FF400AF 		beq	.L1180
 9930              	.L1096:
 9931 04ca 5E4D     		ldr	r5, .L1223+20
 9932 04cc 84E6     		b	.L995
 9933              	.LVL1111:
 9934              	.L1189:
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9935              		.loc 1 2680 4 is_stmt 1 view .LVU3194
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9936              		.loc 1 2680 9 is_stmt 0 view .LVU3195
 9937 04ce 2E22     		movs	r2, #46
 9938 04d0 6849     		ldr	r1, .L1223+68
 9939 04d2 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/ccSEf3H9.s 			page 291


 9940              	.LVL1112:
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9941              		.loc 1 2680 9 view .LVU3196
 9942 04d4 FFF7FEFF 		bl	scopy_char
 9943              	.LVL1113:
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9944              		.loc 1 2681 14 view .LVU3197
 9945 04d8 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2680:src/display.c **** 	  if (State2.numdigit > 0)
 9946              		.loc 1 2680 9 view .LVU3198
 9947 04da 0346     		mov	r3, r0
 9948              	.LVL1114:
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9949              		.loc 1 2681 4 is_stmt 1 view .LVU3199
2681:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9950              		.loc 1 2681 7 is_stmt 0 view .LVU3200
 9951 04dc 002A     		cmp	r2, #0
 9952 04de 40F0F280 		bne	.L1192
 9953              	.L909:
2684:src/display.c **** 	  if (yreg_enabled) {
 9954              		.loc 1 2684 4 is_stmt 1 view .LVU3201
 9955              	.LVL1115:
2684:src/display.c **** 	  if (yreg_enabled) {
 9956              		.loc 1 2684 10 is_stmt 0 view .LVU3202
 9957 04e2 5F22     		movs	r2, #95
 9958 04e4 1A70     		strb	r2, [r3]
2685:src/display.c **** 	    set_status_top(buf);
 9959              		.loc 1 2685 4 is_stmt 1 view .LVU3203
2685:src/display.c **** 	    set_status_top(buf);
 9960              		.loc 1 2685 7 is_stmt 0 view .LVU3204
 9961 04e6 BBF1000F 		cmp	fp, #0
 9962 04ea 7FF4C5AE 		bne	.L1172
2685:src/display.c **** 	    set_status_top(buf);
 9963              		.loc 1 2685 7 view .LVU3205
 9964 04ee 96E7     		b	.L906
 9965              	.LVL1116:
 9966              	.L1000:
 9967              	.LBB623:
 9968              	.LBB609:
1268:src/display.c **** 
 9969              		.loc 1 1268 2 is_stmt 1 view .LVU3206
 9970 04f0 FFF7FEFF 		bl	set_separator_decimal_modes
 9971              	.LVL1117:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9972              		.loc 1 1270 2 view .LVU3207
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9973              		.loc 1 1272 2 view .LVU3208
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9974              		.loc 1 1272 5 is_stmt 0 view .LVU3209
 9975 04f4 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9976              	.LBB592:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9977              		.loc 1 1279 15 view .LVU3210
 9978 04f6 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9979              	.LBE592:
1272:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9980              		.loc 1 1272 5 view .LVU3211
ARM GAS  /tmp/ccSEf3H9.s 			page 292


 9981 04f8 012B     		cmp	r3, #1
 9982 04fa 40F20181 		bls	.L1003
 9983              	.LVL1118:
 9984              	.LBB593:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9985              		.loc 1 1279 14 is_stmt 1 view .LVU3212
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9986              		.loc 1 1279 4 is_stmt 0 view .LVU3213
 9987 04fe 0029     		cmp	r1, #0
 9988 0500 00F09381 		beq	.L1047
1276:src/display.c **** 	  int j;
 9989              		.loc 1 1276 10 view .LVU3214
 9990 0504 5B46     		mov	r3, fp
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9991              		.loc 1 1279 10 view .LVU3215
 9992 0506 5A46     		mov	r2, fp
 9993 0508 AC46     		mov	ip, r5
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9994              		.loc 1 1279 4 view .LVU3216
 9995 050a 0846     		mov	r0, r1
 9996              	.LBE593:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9997              		.loc 1 1247 11 view .LVU3217
 9998 050c 4FF0FF3E 		mov	lr, #-1
 9999 0510 04E0     		b	.L1006
 10000              	.LVL1119:
 10001              	.L1005:
 10002              	.LBB594:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10003              		.loc 1 1279 28 is_stmt 1 view .LVU3218
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10004              		.loc 1 1279 15 is_stmt 0 view .LVU3219
 10005 0512 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10006              		.loc 1 1279 29 view .LVU3220
 10007 0516 0132     		adds	r2, r2, #1
 10008              	.LVL1120:
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10009              		.loc 1 1279 14 is_stmt 1 view .LVU3221
1279:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10010              		.loc 1 1279 4 is_stmt 0 view .LVU3222
 10011 0518 0028     		cmp	r0, #0
 10012 051a 3AD0     		beq	.L1193
 10013              	.LVL1121:
 10014              	.L1006:
1280:src/display.c **** 	      gotdot = j;
 10015              		.loc 1 1280 6 is_stmt 1 view .LVU3223
1280:src/display.c **** 	      gotdot = j;
 10016              		.loc 1 1280 9 is_stmt 0 view .LVU3224
 10017 051c 2E28     		cmp	r0, #46
 10018 051e F8D1     		bne	.L1005
1281:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10019              		.loc 1 1281 8 is_stmt 1 view .LVU3225
 10020              	.LVL1122:
1283:src/display.c **** #  endif
 10021              		.loc 1 1283 8 view .LVU3226
1280:src/display.c **** 	      gotdot = j;
ARM GAS  /tmp/ccSEf3H9.s 			page 293


 10022              		.loc 1 1280 22 is_stmt 0 view .LVU3227
 10023 0520 BEF1FF3F 		cmp	lr, #-1
 10024 0524 F5D1     		bne	.L1005
1283:src/display.c **** #  endif
 10025              		.loc 1 1283 29 view .LVU3228
 10026 0526 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10027 052a A3F12E03 		sub	r3, #46
 10028 052e B3FA83F3 		clz	r3, r3
1283:src/display.c **** #  endif
 10029              		.loc 1 1283 19 view .LVU3229
 10030 0532 9646     		mov	lr, r2
1283:src/display.c **** #  endif
 10031              		.loc 1 1283 29 view .LVU3230
 10032 0534 5B09     		lsrs	r3, r3, #5
 10033              	.LVL1123:
1283:src/display.c **** #  endif
 10034              		.loc 1 1283 29 view .LVU3231
 10035 0536 ECE7     		b	.L1005
 10036              	.LVL1124:
 10037              	.L912:
1283:src/display.c **** #  endif
 10038              		.loc 1 1283 29 view .LVU3232
 10039              	.LBE594:
 10040              	.LBE609:
 10041              	.LBE623:
2697:src/display.c **** #endif
 10042              		.loc 1 2697 6 is_stmt 1 view .LVU3233
2697:src/display.c **** #endif
 10043              		.loc 1 2697 11 is_stmt 0 view .LVU3234
 10044 0538 4F49     		ldr	r1, .L1223+72
 10045 053a 1EA8     		add	r0, sp, #120
 10046              	.LVL1125:
2697:src/display.c **** #endif
 10047              		.loc 1 2697 11 view .LVU3235
 10048 053c FFF7FEFF 		bl	scopy
 10049              	.LVL1126:
2697:src/display.c **** #endif
 10050              		.loc 1 2697 11 view .LVU3236
 10051 0540 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10052 0542 7CE6     		b	.L913
 10053              	.L915:
2704:src/display.c **** 	    *bp++ = '\021';
 10054              		.loc 1 2704 11 is_stmt 1 view .LVU3237
2704:src/display.c **** 	    *bp++ = '\021';
 10055              		.loc 1 2704 14 is_stmt 0 view .LVU3238
 10056 0544 012D     		cmp	r5, #1
 10057 0546 00F0EF80 		beq	.L1194
2711:src/display.c **** 	      *bp++ = '.';
 10058              		.loc 1 2711 6 is_stmt 1 view .LVU3239
2711:src/display.c **** 	      *bp++ = '.';
 10059              		.loc 1 2711 10 is_stmt 0 view .LVU3240
 10060 054a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2711:src/display.c **** 	      *bp++ = '.';
 10061              		.loc 1 2711 9 view .LVU3241
 10062 054c DA07     		lsls	r2, r3, #31
2712:src/display.c **** 	    if (State2.numdigit > 0) {
 10063              		.loc 1 2712 8 is_stmt 1 view .LVU3242
ARM GAS  /tmp/ccSEf3H9.s 			page 294


 10064              	.LVL1127:
2712:src/display.c **** 	    if (State2.numdigit > 0) {
 10065              		.loc 1 2712 14 is_stmt 0 view .LVU3243
 10066 054e 44BF     		itt	mi
 10067 0550 2E23     		movmi	r3, #46
 10068 0552 00F8013B 		strbmi	r3, [r0], #1
 10069              	.LVL1128:
2713:src/display.c **** 	      if (State2.shuffle)
 10070              		.loc 1 2713 6 is_stmt 1 view .LVU3244
2713:src/display.c **** 	      if (State2.shuffle)
 10071              		.loc 1 2713 16 is_stmt 0 view .LVU3245
 10072 0556 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2713:src/display.c **** 	      if (State2.shuffle)
 10073              		.loc 1 2713 9 view .LVU3246
 10074 0558 8AB1     		cbz	r2, .L919
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10075              		.loc 1 2714 8 is_stmt 1 view .LVU3247
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10076              		.loc 1 2714 12 is_stmt 0 view .LVU3248
 10077 055a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2714:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10078              		.loc 1 2714 11 view .LVU3249
 10079 055c 9B07     		lsls	r3, r3, #30
 10080 055e 40F16681 		bpl	.L920
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10081              		.loc 1 2715 3 is_stmt 1 view .LVU3250
 10082              	.LVL1129:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10083              		.loc 1 2715 17 is_stmt 0 view .LVU3251
 10084 0562 2289     		ldrh	r2, [r4, #8]
 10085              	.LVL1130:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10086              		.loc 1 2715 34 is_stmt 1 view .LVU3252
 10087 0564 4549     		ldr	r1, .L1223+76
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10088              		.loc 1 2715 10 is_stmt 0 view .LVU3253
 10089 0566 0023     		movs	r3, #0
 10090              	.LVL1131:
 10091              	.L921:
2716:src/display.c **** 	      else
 10092              		.loc 1 2716 5 is_stmt 1 discriminator 3 view .LVU3254
2716:src/display.c **** 	      else
 10093              		.loc 1 2716 24 is_stmt 0 discriminator 3 view .LVU3255
 10094 0568 02F00305 		and	r5, r2, #3
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10095              		.loc 1 2715 54 discriminator 3 view .LVU3256
 10096 056c 0133     		adds	r3, r3, #1
 10097              	.LVL1132:
2716:src/display.c **** 	      else
 10098              		.loc 1 2716 11 discriminator 3 view .LVU3257
 10099 056e 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10100 0570 00F8015B 		strb	r5, [r0], #1
 10101              	.LVL1133:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10102              		.loc 1 2715 53 is_stmt 1 discriminator 3 view .LVU3258
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10103              		.loc 1 2715 42 is_stmt 0 discriminator 3 view .LVU3259
ARM GAS  /tmp/ccSEf3H9.s 			page 295


 10104 0574 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10105              		.loc 1 2715 3 discriminator 3 view .LVU3260
 10106 0576 9D42     		cmp	r5, r3
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10107              		.loc 1 2715 60 discriminator 3 view .LVU3261
 10108 0578 4FEAA202 		asr	r2, r2, #2
 10109              	.LVL1134:
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10110              		.loc 1 2715 34 is_stmt 1 discriminator 3 view .LVU3262
2715:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10111              		.loc 1 2715 3 is_stmt 0 discriminator 3 view .LVU3263
 10112 057c F4DC     		bgt	.L921
 10113              	.LVL1135:
 10114              	.L919:
2721:src/display.c **** 	  }
 10115              		.loc 1 2721 6 is_stmt 1 view .LVU3264
2721:src/display.c **** 	  }
 10116              		.loc 1 2721 12 is_stmt 0 view .LVU3265
 10117 057e 5F23     		movs	r3, #95
 10118 0580 0370     		strb	r3, [r0]
 10119 0582 75E6     		b	.L939
 10120              	.LVL1136:
 10121              	.L1190:
 10122              	.LBB624:
 10123              	.LBB610:
1257:src/display.c **** 	p++;
 10124              		.loc 1 1257 2 is_stmt 1 view .LVU3266
 10125              	.LBB595:
 10126              	.LBI595:
 296:src/display.c **** {
 10127              		.loc 1 296 13 view .LVU3267
 10128              	.LBB596:
 298:src/display.c ****   set_dot(MANT_SIGN);
 10129              		.loc 1 298 3 view .LVU3268
 298:src/display.c ****   set_dot(MANT_SIGN);
 10130              		.loc 1 298 25 is_stmt 0 view .LVU3269
 10131 0584 2D4A     		ldr	r2, .L1223+12
 299:src/display.c **** }
 10132              		.loc 1 299 3 view .LVU3270
 10133 0586 8120     		movs	r0, #129
 10134              	.LVL1137:
 298:src/display.c ****   set_dot(MANT_SIGN);
 10135              		.loc 1 298 25 view .LVU3271
 10136 0588 1370     		strb	r3, [r2]
 299:src/display.c **** }
 10137              		.loc 1 299 3 is_stmt 1 view .LVU3272
 10138              	.LBE596:
 10139              	.LBE595:
1258:src/display.c ****       }
 10140              		.loc 1 1258 3 is_stmt 0 view .LVU3273
 10141 058a 0135     		adds	r5, r5, #1
 10142              	.LVL1138:
 10143              	.LBB598:
 10144              	.LBB597:
 299:src/display.c **** }
 10145              		.loc 1 299 3 view .LVU3274
ARM GAS  /tmp/ccSEf3H9.s 			page 296


 10146 058c FFF7FEFF 		bl	set_dot
 10147              	.LVL1139:
 10148              	.LBE597:
 10149              	.LBE598:
1258:src/display.c ****       }
 10150              		.loc 1 1258 2 is_stmt 1 view .LVU3275
1258:src/display.c ****       }
 10151              		.loc 1 1258 2 is_stmt 0 view .LVU3276
 10152 0590 7FE6     		b	.L999
 10153              	.LVL1140:
 10154              	.L1193:
 10155              	.LBB599:
1287:src/display.c **** 	  if (j > 0) {
 10156              		.loc 1 1287 4 is_stmt 1 view .LVU3277
1287:src/display.c **** 	  if (j > 0) {
 10157              		.loc 1 1287 24 is_stmt 0 view .LVU3278
 10158 0592 03F10C0C 		add	ip, r3, #12
1287:src/display.c **** 	  if (j > 0) {
 10159              		.loc 1 1287 6 view .LVU3279
 10160 0596 A2EB0C02 		sub	r2, r2, ip
 10161              	.LVL1141:
1288:src/display.c **** 	    p += j + 1;
 10162              		.loc 1 1288 4 is_stmt 1 view .LVU3280
1288:src/display.c **** 	    p += j + 1;
 10163              		.loc 1 1288 7 is_stmt 0 view .LVU3281
 10164 059a 002A     		cmp	r2, #0
 10165 059c 40F3DA80 		ble	.L1048
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10166              		.loc 1 1289 6 is_stmt 1 view .LVU3282
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10167              		.loc 1 1289 8 is_stmt 0 view .LVU3283
 10168 05a0 511C     		adds	r1, r2, #1
1291:src/display.c **** 	      gotdot = 0;
 10169              		.loc 1 1291 9 view .LVU3284
 10170 05a2 7245     		cmp	r2, lr
1289:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10171              		.loc 1 1289 8 view .LVU3285
 10172 05a4 0D44     		add	r5, r5, r1
 10173              	.LVL1142:
1290:src/display.c **** 	    if (gotdot <= j) {
 10174              		.loc 1 1290 6 is_stmt 1 view .LVU3286
1291:src/display.c **** 	      gotdot = 0;
 10175              		.loc 1 1291 6 view .LVU3287
1291:src/display.c **** 	      gotdot = 0;
 10176              		.loc 1 1291 9 is_stmt 0 view .LVU3288
 10177 05a6 C0F2C480 		blt	.L1008
1292:src/display.c **** 	      if (double_dot)
 10178              		.loc 1 1292 8 is_stmt 1 view .LVU3289
 10179              	.LVL1143:
1293:src/display.c **** 		p++;
 10180              		.loc 1 1293 8 view .LVU3290
1293:src/display.c **** 		p++;
 10181              		.loc 1 1293 11 is_stmt 0 view .LVU3291
 10182 05aa 002B     		cmp	r3, #0
 10183 05ac 00F00482 		beq	.L1049
1294:src/display.c **** 	    }
 10184              		.loc 1 1294 3 is_stmt 1 view .LVU3292
ARM GAS  /tmp/ccSEf3H9.s 			page 297


1294:src/display.c **** 	    }
 10185              		.loc 1 1294 4 is_stmt 0 view .LVU3293
 10186 05b0 0135     		adds	r5, r5, #1
 10187              	.LVL1144:
1290:src/display.c **** 	    if (gotdot <= j) {
 10188              		.loc 1 1290 8 view .LVU3294
 10189 05b2 4FF0090B 		mov	fp, #9
 10190              	.LVL1145:
 10191              	.L1009:
1303:src/display.c **** 	    overflow_to_left = 1;
 10192              		.loc 1 1303 6 is_stmt 1 view .LVU3295
 10193 05b6 3C21     		movs	r1, #60
 10194              	.LVL1146:
1303:src/display.c **** 	    overflow_to_left = 1;
 10195              		.loc 1 1303 6 is_stmt 0 view .LVU3296
 10196 05b8 0020     		movs	r0, #0
 10197 05ba FFF7FEFF 		bl	set_dig
 10198              	.LVL1147:
1304:src/display.c **** 	  }
 10199              		.loc 1 1304 6 is_stmt 1 view .LVU3297
1304:src/display.c **** 	  }
 10200              		.loc 1 1304 6 is_stmt 0 view .LVU3298
 10201 05be 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 10202              		.loc 1 1304 6 view .LVU3299
 10203              	.LBE599:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10204              		.loc 1 1310 9 is_stmt 1 view .LVU3300
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10205              		.loc 1 1310 2 is_stmt 0 view .LVU3301
 10206 05c0 4FF0000A 		mov	r10, #0
 10207              	.LVL1148:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10208              		.loc 1 1310 2 view .LVU3302
 10209 05c4 0029     		cmp	r1, #0
 10210 05c6 3FF47BAF 		beq	.L1026
 10211              	.LVL1149:
 10212              	.L1039:
 10213              	.LBB600:
1304:src/display.c **** 	  }
 10214              		.loc 1 1304 23 view .LVU3303
 10215 05ca 0123     		movs	r3, #1
 10216 05cc 0193     		str	r3, [sp, #4]
 10217 05ce 13E0     		b	.L1018
 10218              	.LVL1150:
 10219              	.L1195:
1304:src/display.c **** 	  }
 10220              		.loc 1 1304 23 view .LVU3304
 10221              	.LBE600:
1316:src/display.c **** 	      gotdot = i;
 10222              		.loc 1 1316 6 is_stmt 1 view .LVU3305
1316:src/display.c **** 	      gotdot = i;
 10223              		.loc 1 1316 9 is_stmt 0 view .LVU3306
 10224 05d0 BAF1FF3F 		cmp	r10, #-1
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10225              		.loc 1 1320 9 view .LVU3307
 10226 05d4 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccSEf3H9.s 			page 298


1316:src/display.c **** 	      gotdot = i;
 10227              		.loc 1 1316 9 view .LVU3308
 10228 05d6 1DD0     		beq	.L1012
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10229              		.loc 1 1320 6 is_stmt 1 view .LVU3309
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10230              		.loc 1 1320 9 is_stmt 0 view .LVU3310
 10231 05d8 2E2B     		cmp	r3, #46
 10232 05da 26D0     		beq	.L1037
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10233              		.loc 1 1320 25 view .LVU3311
 10234 05dc DA45     		cmp	r10, fp
 10235 05de 1BD0     		beq	.L1015
 10236              	.L1014:
1327:src/display.c **** 		i += segs_per_digit;
 10237              		.loc 1 1327 3 is_stmt 1 view .LVU3312
 10238 05e0 5846     		mov	r0, fp
 10239 05e2 2F21     		movs	r1, #47
 10240 05e4 FFF7FEFF 		bl	set_dig
 10241              	.LVL1151:
1328:src/display.c **** 	      }
 10242              		.loc 1 1328 3 view .LVU3313
1328:src/display.c **** 	      }
 10243              		.loc 1 1328 5 is_stmt 0 view .LVU3314
 10244 05e8 0BF1090B 		add	fp, fp, #9
 10245              	.LVL1152:
1328:src/display.c **** 	      }
 10246              		.loc 1 1328 5 view .LVU3315
 10247 05ec 2B46     		mov	r3, r5
 10248              	.LVL1153:
 10249              	.L1016:
1314:src/display.c **** 	  if (*p == '.') {
 10250              		.loc 1 1314 11 is_stmt 1 view .LVU3316
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10251              		.loc 1 1310 9 is_stmt 0 view .LVU3317
 10252 05ee 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1314:src/display.c **** 	  if (*p == '.') {
 10253              		.loc 1 1314 12 view .LVU3318
 10254 05f0 0135     		adds	r5, r5, #1
 10255              	.LVL1154:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10256              		.loc 1 1310 9 is_stmt 1 view .LVU3319
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10257              		.loc 1 1310 2 is_stmt 0 view .LVU3320
 10258 05f2 0029     		cmp	r1, #0
 10259 05f4 3FF441AF 		beq	.L1019
 10260              	.LVL1155:
 10261              	.L1018:
1312:src/display.c **** #endif
 10262              		.loc 1 1312 9 view .LVU3321
 10263 05f8 A1F14403 		sub	r3, r1, #68
 10264 05fc 012B     		cmp	r3, #1
 10265 05fe 7FF63CAF 		bls	.L1019
1315:src/display.c **** 	    if (gotdot < 0)
 10266              		.loc 1 1315 4 is_stmt 1 view .LVU3322
1315:src/display.c **** 	    if (gotdot < 0)
 10267              		.loc 1 1315 7 is_stmt 0 view .LVU3323
ARM GAS  /tmp/ccSEf3H9.s 			page 299


 10268 0602 2E29     		cmp	r1, #46
 10269 0604 E4D0     		beq	.L1195
1349:src/display.c **** 	      i += segs_per_digit;
 10270              		.loc 1 1349 8 is_stmt 1 view .LVU3324
 10271 0606 5846     		mov	r0, fp
 10272 0608 FFF7FEFF 		bl	set_dig
 10273              	.LVL1156:
1350:src/display.c **** 	    }
 10274              		.loc 1 1350 8 view .LVU3325
1350:src/display.c **** 	    }
 10275              		.loc 1 1350 10 is_stmt 0 view .LVU3326
 10276 060c 0BF1090B 		add	fp, fp, #9
 10277              	.LVL1157:
1350:src/display.c **** 	    }
 10278              		.loc 1 1350 10 view .LVU3327
 10279 0610 2B46     		mov	r3, r5
 10280 0612 ECE7     		b	.L1016
 10281              	.L1012:
1317:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10282              		.loc 1 1317 8 is_stmt 1 view .LVU3328
 10283              	.LVL1158:
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10284              		.loc 1 1320 6 view .LVU3329
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10285              		.loc 1 1320 9 is_stmt 0 view .LVU3330
 10286 0614 2E2B     		cmp	r3, #46
 10287 0616 07D0     		beq	.L1196
 10288              	.LVL1159:
 10289              	.L1015:
1331:src/display.c **** 		  i += segs_per_digit;
 10290              		.loc 1 1331 3 is_stmt 1 view .LVU3331
1331:src/display.c **** 		  i += segs_per_digit;
 10291              		.loc 1 1331 6 is_stmt 0 view .LVU3332
 10292 0618 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10293 061a 012B     		cmp	r3, #1
 10294 061c 7AD9     		bls	.L1017
1332:src/display.c **** 		}
 10295              		.loc 1 1332 5 is_stmt 1 view .LVU3333
 10296              	.LVL1160:
1332:src/display.c **** 		}
 10297              		.loc 1 1332 5 is_stmt 0 view .LVU3334
 10298 061e DA46     		mov	r10, fp
 10299 0620 2B46     		mov	r3, r5
1332:src/display.c **** 		}
 10300              		.loc 1 1332 7 view .LVU3335
 10301 0622 0BF1090B 		add	fp, fp, #9
 10302              	.LVL1161:
1332:src/display.c **** 		}
 10303              		.loc 1 1332 7 view .LVU3336
 10304 0626 E2E7     		b	.L1016
 10305              	.LVL1162:
 10306              	.L1196:
1320:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10307              		.loc 1 1320 9 view .LVU3337
 10308 0628 DA46     		mov	r10, fp
 10309              	.LVL1163:
 10310              	.L1037:
ARM GAS  /tmp/ccSEf3H9.s 			page 300


1321:src/display.c **** 		p++;
 10311              		.loc 1 1321 8 is_stmt 1 view .LVU3338
1322:src/display.c **** 	      }
 10312              		.loc 1 1322 3 view .LVU3339
1322:src/display.c **** 	      }
 10313              		.loc 1 1322 4 is_stmt 0 view .LVU3340
 10314 062a 0135     		adds	r5, r5, #1
 10315              	.LVL1164:
1322:src/display.c **** 	      }
 10316              		.loc 1 1322 4 view .LVU3341
 10317 062c D8E7     		b	.L1014
 10318              	.L1224:
 10319 062e 00BF     		.align	2
 10320              	.L1223:
 10321 0630 0C000000 		.word	.LANCHOR17+12
 10322 0634 08000000 		.word	.LC20
 10323 0638 18000000 		.word	.LC21
 10324 063c 00000000 		.word	LastDisplayedNumber
 10325 0640 00000000 		.word	DispMsg
 10326 0644 00000000 		.word	ShowRegister
 10327 0648 34000000 		.word	.LC22
 10328 064c 00000000 		.word	LastDisplayedExponent
 10329 0650 00000000 		.word	.LANCHOR20
 10330 0654 00000000 		.word	DispPlot
 10331 0658 38000000 		.word	.LC23
 10332 065c AC000000 		.word	.LC39
 10333 0660 00000000 		.word	.LANCHOR21
 10334 0664 B4000000 		.word	.LC26
 10335 0668 00000000 		.word	.LANCHOR22
 10336 066c 00000000 		.word	.LANCHOR24
 10337 0670 00000000 		.word	.LANCHOR0
 10338 0674 56040000 		.word	argcmds+1110
 10339 0678 3C000000 		.word	.LC24
 10340 067c BC000000 		.word	.LC25
 10341              	.LVL1165:
 10342              	.L922:
1322:src/display.c **** 	      }
 10343              		.loc 1 1322 4 view .LVU3342
 10344              	.LBE610:
 10345              	.LBE624:
2744:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10346              		.loc 1 2744 9 is_stmt 1 view .LVU3343
2744:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10347              		.loc 1 2744 12 is_stmt 0 view .LVU3344
 10348 0680 BAF1000F 		cmp	r10, #0
 10349 0684 6BD1     		bne	.L1197
2799:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10350              		.loc 1 2799 9 is_stmt 1 view .LVU3345
2799:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10351              		.loc 1 2799 12 is_stmt 0 view .LVU3346
 10352 0686 1807     		lsls	r0, r3, #28
 10353 0688 00F1DE80 		bmi	.L1198
2814:src/display.c **** 	  show_status();
 10354              		.loc 1 2814 9 is_stmt 1 view .LVU3347
2814:src/display.c **** 	  show_status();
 10355              		.loc 1 2814 19 is_stmt 0 view .LVU3348
 10356 068c 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
ARM GAS  /tmp/ccSEf3H9.s 			page 301


2814:src/display.c **** 	  show_status();
 10357              		.loc 1 2814 12 view .LVU3349
 10358 068e 002F     		cmp	r7, #0
 10359 0690 40F01581 		bne	.L1199
2817:src/display.c **** 	  show_label();
 10360              		.loc 1 2817 9 is_stmt 1 view .LVU3350
2817:src/display.c **** 	  show_label();
 10361              		.loc 1 2817 13 is_stmt 0 view .LVU3351
 10362 0694 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2817:src/display.c **** 	  show_label();
 10363              		.loc 1 2817 12 view .LVU3352
 10364 0696 5A07     		lsls	r2, r3, #29
 10365 0698 00F1EC80 		bmi	.L1200
2820:src/display.c **** 	  show_registers();
 10366              		.loc 1 2820 9 is_stmt 1 view .LVU3353
2820:src/display.c **** 	  show_registers();
 10367              		.loc 1 2820 12 is_stmt 0 view .LVU3354
 10368 069c 1807     		lsls	r0, r3, #28
 10369 069e 00F10B83 		bmi	.L1201
2830:src/display.c **** 	  if (DispMsg) { 
 10370              		.loc 1 2830 9 is_stmt 1 view .LVU3355
2830:src/display.c **** 	  if (DispMsg) { 
 10371              		.loc 1 2830 12 is_stmt 0 view .LVU3356
 10372 06a2 4806     		lsls	r0, r1, #25
 10373 06a4 40F1EF82 		bpl	.L973
2831:src/display.c **** 	    set_status(DispMsg);
 10374              		.loc 1 2831 4 is_stmt 1 view .LVU3357
2831:src/display.c **** 	    set_status(DispMsg);
 10375              		.loc 1 2831 8 is_stmt 0 view .LVU3358
 10376 06a8 C54F     		ldr	r7, .L1225
 10377 06aa 3B68     		ldr	r3, [r7]
2831:src/display.c **** 	    set_status(DispMsg);
 10378              		.loc 1 2831 7 view .LVU3359
 10379 06ac 002B     		cmp	r3, #0
 10380 06ae 00F09F81 		beq	.L974
2832:src/display.c **** 	  } else if (DispPlot) {
 10381              		.loc 1 2832 6 is_stmt 1 view .LVU3360
 10382 06b2 1846     		mov	r0, r3
 10383 06b4 FFF7FEFF 		bl	set_status
 10384              	.LVL1166:
2884:src/display.c ****       nostk:
 10385              		.loc 1 2884 2 view .LVU3361
 10386 06b8 C24B     		ldr	r3, .L1225+4
 10387 06ba 0093     		str	r3, [sp]
 10388 06bc FFF7FEFF 		bl	show_stack
 10389              	.LVL1167:
2886:src/display.c **** 	if (!skip) {
 10390              		.loc 1 2886 2 view .LVU3362
 10391 06c0 FFF7FEFF 		bl	show_flags
 10392              	.LVL1168:
2887:src/display.c **** 	  if (State2.runmode) {
 10393              		.loc 1 2887 2 view .LVU3363
 10394 06c4 DFE4     		b	.L903
 10395              	.LVL1169:
 10396              	.L1192:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10397              		.loc 1 2682 6 view .LVU3364
ARM GAS  /tmp/ccSEf3H9.s 			page 302


2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10398              		.loc 1 2682 11 is_stmt 0 view .LVU3365
 10399 06c6 2189     		ldrh	r1, [r4, #8]
 10400 06c8 FFF7FEFF 		bl	num_arg_0
 10401              	.LVL1170:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10402              		.loc 1 2682 11 view .LVU3366
 10403 06cc 0346     		mov	r3, r0
 10404              	.LVL1171:
2682:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10405              		.loc 1 2682 11 view .LVU3367
 10406 06ce 08E7     		b	.L909
 10407              	.LVL1172:
 10408              	.L1191:
 10409              	.LBB625:
 10410              	.LBB611:
 10411              	.LBB601:
1377:src/display.c **** #  endif
 10412              		.loc 1 1377 6 is_stmt 1 view .LVU3368
1380:src/display.c **** 	      flags |= 2;
 10413              		.loc 1 1380 6 view .LVU3369
1381:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10414              		.loc 1 1381 14 is_stmt 0 view .LVU3370
 10415 06d0 442A     		cmp	r2, #68
 10416 06d2 14BF     		ite	ne
 10417 06d4 4FF00C0A 		movne	r10, #12
 10418 06d8 4FF00E0A 		moveq	r10, #14
 10419              	.LVL1173:
1382:src/display.c **** 	      flags |= 16;
 10420              		.loc 1 1382 6 is_stmt 1 view .LVU3371
1382:src/display.c **** 	      flags |= 16;
 10421              		.loc 1 1382 9 is_stmt 0 view .LVU3372
 10422 06dc BBF15A0F 		cmp	fp, #90
1383:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10423              		.loc 1 1383 8 is_stmt 1 view .LVU3373
1383:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10424              		.loc 1 1383 14 is_stmt 0 view .LVU3374
 10425 06e0 C8BF     		it	gt
 10426 06e2 4AF0100A 		orrgt	r10, r10, #16
 10427              	.LVL1174:
1384:src/display.c **** 	  }
 10428              		.loc 1 1384 6 is_stmt 1 view .LVU3375
 10429 06e6 681C     		adds	r0, r5, #1
 10430 06e8 FFF7FEFF 		bl	s_to_i
 10431              	.LVL1175:
 10432 06ec 5146     		mov	r1, r10
 10433 06ee 0022     		movs	r2, #0
 10434 06f0 FFF7FEFF 		bl	set_exp
 10435              	.LVL1176:
1384:src/display.c **** 	  }
 10436              		.loc 1 1384 6 is_stmt 0 view .LVU3376
 10437              	.LBE601:
 10438              	.LBE611:
 10439              	.LBE625:
2902:src/display.c **** 	      goto finish;
 10440              		.loc 1 2902 6 is_stmt 1 view .LVU3377
2902:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccSEf3H9.s 			page 303


 10441              		.loc 1 2902 9 is_stmt 0 view .LVU3378
 10442 06f4 D8F80030 		ldr	r3, [r8]
 10443 06f8 002B     		cmp	r3, #0
 10444 06fa 3FF4E6AD 		beq	.L1180
 10445 06fe E4E6     		b	.L1096
 10446              	.LVL1177:
 10447              	.L1003:
 10448              	.LBB626:
 10449              	.LBB612:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10450              		.loc 1 1310 9 is_stmt 1 view .LVU3379
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10451              		.loc 1 1310 2 is_stmt 0 view .LVU3380
 10452 0700 0029     		cmp	r1, #0
 10453 0702 00F09280 		beq	.L1047
1253:src/display.c **** #endif
 10454              		.loc 1 1253 11 view .LVU3381
 10455 0706 CDF804B0 		str	fp, [sp, #4]
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10456              		.loc 1 1247 11 view .LVU3382
 10457 070a 4FF0FF3A 		mov	r10, #-1
 10458              	.LVL1178:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10459              		.loc 1 1247 11 view .LVU3383
 10460 070e 73E7     		b	.L1018
 10461              	.LVL1179:
 10462              	.L1053:
1247:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10463              		.loc 1 1247 11 view .LVU3384
 10464              	.LBE612:
 10465              	.LBE626:
 10466              	.LBB627:
 10467              	.LBB577:
2922:src/display.c **** 	      while(*b) {
 10468              		.loc 1 2922 10 view .LVU3385
 10469 0710 5A1C     		adds	r2, r3, #1
 10470 0712 0CE5     		b	.L1030
 10471              	.LVL1180:
 10472              	.L1017:
2922:src/display.c **** 	      while(*b) {
 10473              		.loc 1 2922 10 view .LVU3386
 10474              	.LBE577:
 10475              	.LBE627:
 10476              	.LBB628:
 10477              	.LBB613:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10478              		.loc 1 1335 5 is_stmt 1 view .LVU3387
 10479 0714 AC4B     		ldr	r3, .L1225+8
 10480 0716 0022     		movs	r2, #0
 10481 0718 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10482 071a ABF10900 		sub	r0, fp, #9
 10483 071e FFF7FEFF 		bl	set_decimal
 10484              	.LVL1181:
 10485 0722 DA46     		mov	r10, fp
 10486 0724 2B46     		mov	r3, r5
 10487 0726 62E7     		b	.L1016
 10488              	.LVL1182:
ARM GAS  /tmp/ccSEf3H9.s 			page 304


 10489              	.L1194:
1335:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10490              		.loc 1 1335 5 is_stmt 0 view .LVU3388
 10491              	.LBE613:
 10492              	.LBE628:
2705:src/display.c **** 	    *bp++ = '_';
 10493              		.loc 1 2705 6 is_stmt 1 view .LVU3389
2705:src/display.c **** 	    *bp++ = '_';
 10494              		.loc 1 2705 12 is_stmt 0 view .LVU3390
 10495 0728 1122     		movs	r2, #17
2706:src/display.c **** 	  } else {
 10496              		.loc 1 2706 12 view .LVU3391
 10497 072a 5F23     		movs	r3, #95
2705:src/display.c **** 	    *bp++ = '_';
 10498              		.loc 1 2705 12 view .LVU3392
 10499 072c 0270     		strb	r2, [r0]
2706:src/display.c **** 	  } else {
 10500              		.loc 1 2706 6 is_stmt 1 view .LVU3393
 10501              	.LVL1183:
2706:src/display.c **** 	  } else {
 10502              		.loc 1 2706 12 is_stmt 0 view .LVU3394
 10503 072e 4370     		strb	r3, [r0, #1]
 10504 0730 9EE5     		b	.L939
 10505              	.LVL1184:
 10506              	.L1008:
 10507              	.LBB629:
 10508              	.LBB614:
 10509              	.LBB602:
1296:src/display.c **** 	      gotdot = 0;
 10510              		.loc 1 1296 11 is_stmt 1 view .LVU3395
1296:src/display.c **** 	      gotdot = 0;
 10511              		.loc 1 1296 14 is_stmt 0 view .LVU3396
 10512 0732 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10513              	.LVL1185:
1296:src/display.c **** 	      gotdot = 0;
 10514              		.loc 1 1296 14 view .LVU3397
 10515 0734 2E2A     		cmp	r2, #46
 10516 0736 7ED0     		beq	.L1202
 10517              	.LVL1186:
1303:src/display.c **** 	    overflow_to_left = 1;
 10518              		.loc 1 1303 6 is_stmt 1 view .LVU3398
 10519 0738 3C21     		movs	r1, #60
 10520              	.LVL1187:
1303:src/display.c **** 	    overflow_to_left = 1;
 10521              		.loc 1 1303 6 is_stmt 0 view .LVU3399
 10522 073a FFF7FEFF 		bl	set_dig
 10523              	.LVL1188:
1304:src/display.c **** 	  }
 10524              		.loc 1 1304 6 is_stmt 1 view .LVU3400
1304:src/display.c **** 	  }
 10525              		.loc 1 1304 6 is_stmt 0 view .LVU3401
 10526 073e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1304:src/display.c **** 	  }
 10527              		.loc 1 1304 6 view .LVU3402
 10528              	.LBE602:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10529              		.loc 1 1310 9 is_stmt 1 view .LVU3403
ARM GAS  /tmp/ccSEf3H9.s 			page 305


 10530              	.LBB603:
1290:src/display.c **** 	    if (gotdot <= j) {
 10531              		.loc 1 1290 8 is_stmt 0 view .LVU3404
 10532 0740 4FF0090B 		mov	fp, #9
 10533              	.LBE603:
1310:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10534              		.loc 1 1310 2 view .LVU3405
 10535 0744 0029     		cmp	r1, #0
 10536 0746 3FF4B5AE 		beq	.L1004
 10537              	.LBB604:
1302:src/display.c **** 	    set_dig(0, '<');
 10538              		.loc 1 1302 18 view .LVU3406
 10539 074a 4FF0FF3A 		mov	r10, #-1
 10540              	.LVL1189:
1290:src/display.c **** 	    if (gotdot <= j) {
 10541              		.loc 1 1290 8 view .LVU3407
 10542 074e 4FF0090B 		mov	fp, #9
 10543 0752 3AE7     		b	.L1039
 10544              	.LVL1190:
 10545              	.L1048:
1290:src/display.c **** 	    if (gotdot <= j) {
 10546              		.loc 1 1290 8 view .LVU3408
 10547              	.LBE604:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10548              		.loc 1 1270 4 view .LVU3409
 10549 0754 8346     		mov	fp, r0
1253:src/display.c **** #endif
 10550              		.loc 1 1253 11 view .LVU3410
 10551 0756 0190     		str	r0, [sp, #4]
 10552              	.LBB605:
1306:src/display.c **** 	}
 10553              		.loc 1 1306 16 view .LVU3411
 10554 0758 4FF0FF3A 		mov	r10, #-1
 10555              	.LVL1191:
1306:src/display.c **** 	}
 10556              		.loc 1 1306 16 view .LVU3412
 10557 075c 4CE7     		b	.L1018
 10558              	.LVL1192:
 10559              	.L1197:
1306:src/display.c **** 	}
 10560              		.loc 1 1306 16 view .LVU3413
 10561              	.LBE605:
 10562              	.LBE614:
 10563              	.LBE629:
 10564              	.LBB630:
2745:src/display.c **** 	  char b2[16];
 10565              		.loc 1 2745 4 is_stmt 1 view .LVU3414
2745:src/display.c **** 	  char b2[16];
 10566              		.loc 1 2745 45 is_stmt 0 view .LVU3415
 10567 075e 9B4B     		ldr	r3, .L1225+12
 10568 0760 1B68     		ldr	r3, [r3]
 10569 0762 B3F8DC07 		ldrh	r0, [r3, #2012]
2745:src/display.c **** 	  char b2[16];
 10570              		.loc 1 2745 22 view .LVU3416
 10571 0766 C0F34610 		ubfx	r0, r0, #5, #7
 10572 076a FFF7FEFF 		bl	current_catalogue
 10573              	.LVL1193:
ARM GAS  /tmp/ccSEf3H9.s 			page 306


2749:src/display.c **** 	  p = catcmd(op, b2);
 10574              		.loc 1 2749 9 view .LVU3417
 10575 076e 9849     		ldr	r1, .L1225+16
2745:src/display.c **** 	  char b2[16];
 10576              		.loc 1 2745 22 view .LVU3418
 10577 0770 0546     		mov	r5, r0
 10578              	.LVL1194:
2746:src/display.c **** 	  const char *p;
 10579              		.loc 1 2746 4 is_stmt 1 view .LVU3419
2747:src/display.c **** 
 10580              		.loc 1 2747 4 view .LVU3420
2749:src/display.c **** 	  p = catcmd(op, b2);
 10581              		.loc 1 2749 4 view .LVU3421
2749:src/display.c **** 	  p = catcmd(op, b2);
 10582              		.loc 1 2749 9 is_stmt 0 view .LVU3422
 10583 0772 1EA8     		add	r0, sp, #120
 10584              	.LVL1195:
2749:src/display.c **** 	  p = catcmd(op, b2);
 10585              		.loc 1 2749 9 view .LVU3423
 10586 0774 FFF7FEFF 		bl	scopy
 10587              	.LVL1196:
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10588              		.loc 1 2750 8 view .LVU3424
 10589 0778 08A9     		add	r1, sp, #32
2749:src/display.c **** 	  p = catcmd(op, b2);
 10590              		.loc 1 2749 9 view .LVU3425
 10591 077a 0646     		mov	r6, r0
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10592              		.loc 1 2750 8 view .LVU3426
 10593 077c 2846     		mov	r0, r5
 10594              	.LVL1197:
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10595              		.loc 1 2750 4 is_stmt 1 view .LVU3427
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10596              		.loc 1 2750 8 is_stmt 0 view .LVU3428
 10597 077e FFF7FEFF 		bl	catcmd
 10598              	.LVL1198:
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10599              		.loc 1 2751 7 view .LVU3429
 10600 0782 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10601 0784 142B     		cmp	r3, #20
2750:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10602              		.loc 1 2750 8 view .LVU3430
 10603 0786 0146     		mov	r1, r0
 10604              	.LVL1199:
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10605              		.loc 1 2751 4 is_stmt 1 view .LVU3431
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10606              		.loc 1 2751 7 is_stmt 0 view .LVU3432
 10607 0788 07D0     		beq	.L924
2751:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10608              		.loc 1 2751 29 discriminator 1 view .LVU3433
 10609 078a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10610 078c 9F07     		lsls	r7, r3, #30
 10611 078e 04D5     		bpl	.L924
2752:src/display.c **** 	  bp = scopy(bp, p);
 10612              		.loc 1 2752 6 is_stmt 1 view .LVU3434
ARM GAS  /tmp/ccSEf3H9.s 			page 307


2752:src/display.c **** 	  bp = scopy(bp, p);
 10613              		.loc 1 2752 9 is_stmt 0 view .LVU3435
 10614 0790 3346     		mov	r3, r6
 10615              	.LVL1200:
2752:src/display.c **** 	  bp = scopy(bp, p);
 10616              		.loc 1 2752 12 view .LVU3436
 10617 0792 1422     		movs	r2, #20
 10618 0794 03F8012B 		strb	r2, [r3], #1
 10619              	.LVL1201:
2752:src/display.c **** 	  bp = scopy(bp, p);
 10620              		.loc 1 2752 9 view .LVU3437
 10621 0798 1E46     		mov	r6, r3
 10622              	.LVL1202:
 10623              	.L924:
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10624              		.loc 1 2753 4 is_stmt 1 view .LVU3438
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10625              		.loc 1 2753 9 is_stmt 0 view .LVU3439
 10626 079a 3046     		mov	r0, r6
 10627              	.LVL1203:
2753:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10628              		.loc 1 2753 9 view .LVU3440
 10629 079c FFF7FEFF 		bl	scopy
 10630              	.LVL1204:
2754:src/display.c **** 	    // State2.disp_small = 1;
 10631              		.loc 1 2754 4 is_stmt 1 view .LVU3441
2754:src/display.c **** 	    // State2.disp_small = 1;
 10632              		.loc 1 2754 7 is_stmt 0 view .LVU3442
 10633 07a0 AAF11003 		sub	r3, r10, #16
 10634 07a4 012B     		cmp	r3, #1
 10635 07a6 2DD9     		bls	.L1203
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10636              		.loc 1 2761 11 is_stmt 1 view .LVU3443
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10637              		.loc 1 2761 15 is_stmt 0 view .LVU3444
 10638 07a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2761:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10639              		.loc 1 2761 14 view .LVU3445
 10640 07aa 13F04003 		ands	r3, r3, #64
 10641 07ae 08D0     		beq	.L1043
2762:src/display.c **** 	      decNumber x, r;
 10642              		.loc 1 2762 6 is_stmt 1 view .LVU3446
2762:src/display.c **** 	      decNumber x, r;
 10643              		.loc 1 2762 9 is_stmt 0 view .LVU3447
 10644 07b0 BAF1120F 		cmp	r10, #18
 10645 07b4 00F00483 		beq	.L1204
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10646              		.loc 1 2782 13 is_stmt 1 view .LVU3448
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10647              		.loc 1 2782 46 is_stmt 0 view .LVU3449
 10648 07b8 A5F58873 		sub	r3, r5, #272
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10649              		.loc 1 2782 16 view .LVU3450
 10650 07bc 0D2B     		cmp	r3, #13
 10651 07be 40F2E982 		bls	.L1205
 10652              	.L1043:
2782:src/display.c **** 	      REGISTER z, *const x = StackBase;
ARM GAS  /tmp/ccSEf3H9.s 			page 308


 10653              		.loc 1 2782 16 view .LVU3451
 10654              	.LBE630:
2596:src/display.c **** 	int x_disp = 0;
 10655              		.loc 1 2596 6 view .LVU3452
 10656 07c2 0025     		movs	r5, #0
 10657              	.LVL1205:
 10658              	.L928:
 10659              	.LBB640:
2791:src/display.c **** 	    set_status_top(buf);
 10660              		.loc 1 2791 4 is_stmt 1 view .LVU3453
2791:src/display.c **** 	    set_status_top(buf);
 10661              		.loc 1 2791 7 is_stmt 0 view .LVU3454
 10662 07c4 BBF1000F 		cmp	fp, #0
 10663 07c8 17D0     		beq	.L933
2792:src/display.c **** 	    no_status_top = 1;
 10664              		.loc 1 2792 6 is_stmt 1 view .LVU3455
 10665              	.LVL1206:
 10666              	.LBB631:
 10667              	.LBI631:
3505:src/display.c **** 	if (no_status_top) return;
 10668              		.loc 1 3505 19 view .LVU3456
 10669              	.LBB632:
3506:src/display.c **** 	if (State2.runmode) {
 10670              		.loc 1 3506 2 view .LVU3457
3506:src/display.c **** 	if (State2.runmode) {
 10671              		.loc 1 3506 5 is_stmt 0 view .LVU3458
 10672 07ca B9F90030 		ldrsh	r3, [r9]
 10673 07ce 13B9     		cbnz	r3, .L934
 10674 07d0 1EA8     		add	r0, sp, #120
 10675              	.LVL1207:
3506:src/display.c **** 	if (State2.runmode) {
 10676              		.loc 1 3506 5 view .LVU3459
 10677 07d2 FFF7FEFF 		bl	set_status_top.part.0
 10678              	.LVL1208:
 10679              	.L934:
3506:src/display.c **** 	if (State2.runmode) {
 10680              		.loc 1 3506 5 view .LVU3460
 10681              	.LBE632:
 10682              	.LBE631:
2793:src/display.c **** 	    annuc = 1;
 10683              		.loc 1 2793 6 is_stmt 1 view .LVU3461
2793:src/display.c **** 	    annuc = 1;
 10684              		.loc 1 2793 20 is_stmt 0 view .LVU3462
 10685 07d6 0123     		movs	r3, #1
2794:src/display.c **** 	  }
 10686              		.loc 1 2794 12 view .LVU3463
 10687 07d8 5E46     		mov	r6, fp
2793:src/display.c **** 	    annuc = 1;
 10688              		.loc 1 2793 20 view .LVU3464
 10689 07da A9F80030 		strh	r3, [r9]	@ movhi
2794:src/display.c **** 	  }
 10690              		.loc 1 2794 6 is_stmt 1 view .LVU3465
 10691              	.LVL1209:
 10692              	.L935:
2794:src/display.c **** 	  }
 10693              		.loc 1 2794 6 is_stmt 0 view .LVU3466
 10694              	.LBE640:
ARM GAS  /tmp/ccSEf3H9.s 			page 309


2884:src/display.c ****       nostk:
 10695              		.loc 1 2884 2 is_stmt 1 view .LVU3467
 10696 07de FFF7FEFF 		bl	show_stack
 10697              	.LVL1210:
 10698              	.LDL1:
2886:src/display.c **** 	if (!skip) {
 10699              		.loc 1 2886 2 view .LVU3468
 10700 07e2 FFF7FEFF 		bl	show_flags
 10701              	.LVL1211:
2887:src/display.c **** 	  if (State2.runmode) {
 10702              		.loc 1 2887 2 view .LVU3469
2887:src/display.c **** 	  if (State2.runmode) {
 10703              		.loc 1 2887 5 is_stmt 0 view .LVU3470
 10704 07e6 002D     		cmp	r5, #0
 10705 07e8 00F06182 		beq	.L1178
 10706              	.LVL1212:
 10707              	.L936:
2932:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10708              		.loc 1 2932 2 is_stmt 1 view .LVU3471
 10709 07ec FFF7FEFF 		bl	set_annunciators
 10710              	.LVL1213:
2933:src/display.c **** 	  ShowRPN = 0;
 10711              		.loc 1 2933 2 view .LVU3472
 10712 07f0 744B     		ldr	r3, .L1225+4
 10713 07f2 734F     		ldr	r7, .L1225
 10714 07f4 774D     		ldr	r5, .L1225+20
 10715 07f6 0093     		str	r3, [sp]
 10716 07f8 C1E4     		b	.L898
 10717              	.LVL1214:
 10718              	.L933:
 10719              	.LBB641:
2797:src/display.c **** 	  }
 10720              		.loc 1 2797 6 view .LVU3473
 10721 07fa 1EA8     		add	r0, sp, #120
 10722 07fc FFF7FEFF 		bl	set_status
 10723              	.LVL1215:
 10724              	.LBE641:
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10725              		.loc 1 2594 6 is_stmt 0 view .LVU3474
 10726 0800 5E46     		mov	r6, fp
 10727 0802 ECE7     		b	.L935
 10728              	.LVL1216:
 10729              	.L1203:
 10730              	.LBB642:
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10731              		.loc 1 2756 6 is_stmt 1 view .LVU3475
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10732              		.loc 1 2756 9 is_stmt 0 view .LVU3476
 10733 0804 B5F5274F 		cmp	r5, #42752
 10734 0808 00F0FE82 		beq	.L926
2756:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10735              		.loc 1 2756 41 discriminator 1 view .LVU3477
 10736 080c B5F5284F 		cmp	r5, #43008
 10737 0810 00F0FA82 		beq	.L926
2759:src/display.c **** 	    skip = 1;
 10738              		.loc 1 2759 8 is_stmt 1 view .LVU3478
2759:src/display.c **** 	    skip = 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 310


 10739              		.loc 1 2759 14 is_stmt 0 view .LVU3479
 10740 0814 05F07F00 		and	r0, r5, #127
 10741 0818 0021     		movs	r1, #0
 10742 081a FFF7FEFF 		bl	get_const
 10743              	.LVL1217:
2759:src/display.c **** 	    skip = 1;
 10744              		.loc 1 2759 8 view .LVU3480
 10745 081e 0022     		movs	r2, #0
 10746 0820 1146     		mov	r1, r2
 10747 0822 FFF7FEFF 		bl	set_x
 10748              	.LVL1218:
2760:src/display.c **** 	  } else if (State2.runmode) {
 10749              		.loc 1 2760 11 view .LVU3481
 10750 0826 0125     		movs	r5, #1
 10751              	.LVL1219:
2760:src/display.c **** 	  } else if (State2.runmode) {
 10752              		.loc 1 2760 11 view .LVU3482
 10753 0828 CCE7     		b	.L928
 10754              	.LVL1220:
 10755              	.L1047:
2760:src/display.c **** 	  } else if (State2.runmode) {
 10756              		.loc 1 2760 11 view .LVU3483
 10757              	.LBE642:
 10758              	.LBB643:
 10759              	.LBB615:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10760              		.loc 1 1270 4 view .LVU3484
 10761 082a 8B46     		mov	fp, r1
 10762 082c 42E6     		b	.L1004
 10763              	.LVL1221:
 10764              	.L920:
1270:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10765              		.loc 1 1270 4 view .LVU3485
 10766              	.LBE615:
 10767              	.LBE643:
2718:src/display.c **** 	    }
 10768              		.loc 1 2718 3 is_stmt 1 view .LVU3486
2718:src/display.c **** 	    }
 10769              		.loc 1 2718 8 is_stmt 0 view .LVU3487
 10770 082e 2189     		ldrh	r1, [r4, #8]
 10771 0830 FFF7FEFF 		bl	num_arg_0
 10772              	.LVL1222:
2718:src/display.c **** 	    }
 10773              		.loc 1 2718 8 view .LVU3488
 10774 0834 A3E6     		b	.L919
 10775              	.LVL1223:
 10776              	.L1202:
 10777              	.LBB644:
 10778              	.LBB616:
 10779              	.LBB606:
1297:src/display.c **** 	      p++;
 10780              		.loc 1 1297 8 is_stmt 1 view .LVU3489
1298:src/display.c **** 	      if (!double_dot)
 10781              		.loc 1 1298 8 view .LVU3490
1300:src/display.c **** 	    }
 10782              		.loc 1 1300 5 is_stmt 0 view .LVU3491
 10783 0836 002B     		cmp	r3, #0
ARM GAS  /tmp/ccSEf3H9.s 			page 311


1298:src/display.c **** 	      if (!double_dot)
 10784              		.loc 1 1298 9 view .LVU3492
 10785 0838 05F10105 		add	r5, r5, #1
 10786              	.LVL1224:
1299:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10787              		.loc 1 1299 8 is_stmt 1 view .LVU3493
1300:src/display.c **** 	    }
 10788              		.loc 1 1300 5 is_stmt 0 view .LVU3494
 10789 083c 14BF     		ite	ne
 10790 083e 4FF0090B 		movne	fp, #9
 10791 0842 4FF0120B 		moveq	fp, #18
 10792 0846 B6E6     		b	.L1009
 10793              	.LVL1225:
 10794              	.L1198:
1300:src/display.c **** 	    }
 10795              		.loc 1 1300 5 view .LVU3495
 10796              	.LBE606:
 10797              	.LBE616:
 10798              	.LBE644:
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10799              		.loc 1 2800 4 is_stmt 1 view .LVU3496
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10800              		.loc 1 2800 42 is_stmt 0 view .LVU3497
 10801 0848 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10802 084a 6349     		ldr	r1, .L1225+24
 10803 084c 0423     		movs	r3, #4
 10804 084e 03EB0213 		add	r3, r3, r2, lsl #4
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10805              		.loc 1 2800 9 view .LVU3498
 10806 0852 1944     		add	r1, r1, r3
 10807 0854 2722     		movs	r2, #39
 10808 0856 1EA8     		add	r0, sp, #120
 10809              	.LVL1226:
2800:src/display.c **** 	  if (State2.numdigit > 0) {
 10810              		.loc 1 2800 9 view .LVU3499
 10811 0858 FFF7FEFF 		bl	scopy_char
 10812              	.LVL1227:
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
 10813              		.loc 1 2801 7 view .LVU3500
 10814 085c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10815              	.LVL1228:
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
 10816              		.loc 1 2801 4 is_stmt 1 view .LVU3501
2801:src/display.c **** 	    *bp++ = (char) State2.digval;
 10817              		.loc 1 2801 7 is_stmt 0 view .LVU3502
 10818 085e 002B     		cmp	r3, #0
 10819 0860 3FF406AD 		beq	.L939
2802:src/display.c **** 	    if (State2.numdigit > 1)
 10820              		.loc 1 2802 6 is_stmt 1 view .LVU3503
 10821              	.LVL1229:
2802:src/display.c **** 	    if (State2.numdigit > 1)
 10822              		.loc 1 2802 14 is_stmt 0 view .LVU3504
 10823 0864 2389     		ldrh	r3, [r4, #8]
 10824 0866 0370     		strb	r3, [r0]
2803:src/display.c **** 	      *bp++ = State2.digval2;
 10825              		.loc 1 2803 6 is_stmt 1 view .LVU3505
2803:src/display.c **** 	      *bp++ = State2.digval2;
ARM GAS  /tmp/ccSEf3H9.s 			page 312


 10826              		.loc 1 2803 9 is_stmt 0 view .LVU3506
 10827 0868 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10828 086a 012B     		cmp	r3, #1
2804:src/display.c **** 	  }
 10829              		.loc 1 2804 8 is_stmt 1 view .LVU3507
 10830              	.LVL1230:
2804:src/display.c **** 	  }
 10831              		.loc 1 2804 22 is_stmt 0 view .LVU3508
 10832 086c 84BF     		itt	hi
 10833 086e A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2804:src/display.c **** 	  }
 10834              		.loc 1 2804 14 view .LVU3509
 10835 0870 4370     		strbhi	r3, [r0, #1]
 10836 0872 FDE4     		b	.L939
 10837              	.LVL1231:
 10838              	.L1200:
2818:src/display.c **** 	  skip = 1;
 10839              		.loc 1 2818 4 is_stmt 1 view .LVU3510
 10840              	.LBB645:
 10841              	.LBI645:
2465:src/display.c **** 	char buf[16];
 10842              		.loc 1 2465 19 view .LVU3511
 10843              	.LBB646:
2466:src/display.c **** 	unsigned short int pc = State2.digval;
 10844              		.loc 1 2466 2 view .LVU3512
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10845              		.loc 1 2467 2 view .LVU3513
2467:src/display.c **** 	unsigned int op = getprog(pc);
 10846              		.loc 1 2467 21 is_stmt 0 view .LVU3514
 10847 0874 B4F808B0 		ldrh	fp, [r4, #8]
 10848              	.LVL1232:
2468:src/display.c **** 	int n = nLIB(pc);
 10849              		.loc 1 2468 2 is_stmt 1 view .LVU3515
2473:src/display.c **** #ifndef REALBUILD
 10850              		.loc 1 2473 27 is_stmt 0 view .LVU3516
 10851 0878 DFF870A1 		ldr	r10, .L1225+44
 10852              	.LVL1233:
2468:src/display.c **** 	int n = nLIB(pc);
 10853              		.loc 1 2468 20 view .LVU3517
 10854 087c 5846     		mov	r0, fp
 10855 087e FFF7FEFF 		bl	getprog
 10856              	.LVL1234:
 10857 0882 4FEA9B35 		lsr	r5, fp, #14
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10858              		.loc 1 2472 2 view .LVU3518
 10859 0886 15A9     		add	r1, sp, #84
2468:src/display.c **** 	int n = nLIB(pc);
 10860              		.loc 1 2468 20 view .LVU3519
 10861 0888 8046     		mov	r8, r0
 10862              	.LVL1235:
2469:src/display.c **** 	unsigned short int lblpc;
 10863              		.loc 1 2469 2 is_stmt 1 view .LVU3520
2470:src/display.c **** 
 10864              		.loc 1 2470 2 view .LVU3521
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10865              		.loc 1 2472 2 view .LVU3522
2473:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccSEf3H9.s 			page 313


 10866              		.loc 1 2473 27 is_stmt 0 view .LVU3523
 10867 088a 05EB8505 		add	r5, r5, r5, lsl #2
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10868              		.loc 1 2472 2 view .LVU3524
 10869 088e FFF7FEFF 		bl	prt
 10870              	.LVL1236:
2472:src/display.c **** 	set_digits_string(libname[n], 0);
 10871              		.loc 1 2472 2 view .LVU3525
 10872 0892 FFF7FEFF 		bl	set_status
 10873              	.LVL1237:
2473:src/display.c **** #ifndef REALBUILD
 10874              		.loc 1 2473 2 is_stmt 1 view .LVU3526
 10875 0896 0AEB0500 		add	r0, r10, r5
 10876 089a 3946     		mov	r1, r7
 10877 089c FFF7FEFF 		bl	set_digits_string
 10878              	.LVL1238:
2475:src/display.c **** #endif
 10879              		.loc 1 2475 2 view .LVU3527
 10880 08a0 4E4B     		ldr	r3, .L1225+28
 10881 08a2 4F48     		ldr	r0, .L1225+32
 10882 08a4 03EB4501 		add	r1, r3, r5, lsl #1
 10883 08a8 FFF7FEFF 		bl	scopy
 10884              	.LVL1239:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10885              		.loc 1 2478 2 view .LVU3528
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10886              		.loc 1 2478 5 is_stmt 0 view .LVU3529
 10887 08ac 18F4704F 		tst	r8, #61440
 10888 08b0 40F00081 		bne	.L1206
 10889              	.LVL1240:
 10890              	.L1181:
2478:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10891              		.loc 1 2478 5 view .LVU3530
 10892              	.LBE646:
 10893              	.LBE645:
2884:src/display.c ****       nostk:
 10894              		.loc 1 2884 2 is_stmt 1 view .LVU3531
 10895 08b4 FFF7FEFF 		bl	show_stack
 10896              	.LVL1241:
2886:src/display.c **** 	if (!skip) {
 10897              		.loc 1 2886 2 view .LVU3532
 10898 08b8 FFF7FEFF 		bl	show_flags
 10899              	.LVL1242:
2887:src/display.c **** 	  if (State2.runmode) {
 10900              		.loc 1 2887 2 view .LVU3533
 10901 08bc 96E7     		b	.L936
 10902              	.LVL1243:
 10903              	.L1199:
2815:src/display.c **** 	  skip = 1;
 10904              		.loc 1 2815 4 view .LVU3534
 10905              	.LBB649:
 10906              	.LBI649:
2363:src/display.c **** 	int i, n;
 10907              		.loc 1 2363 19 view .LVU3535
 10908              	.LBB650:
2364:src/display.c **** 	int j = SEGS_EXP_BASE;
 10909              		.loc 1 2364 2 view .LVU3536
ARM GAS  /tmp/ccSEf3H9.s 			page 314


2365:src/display.c **** 	const int status = State2.status - 3;
 10910              		.loc 1 2365 2 view .LVU3537
2366:src/display.c **** 	char buf[16], *p = buf;
 10911              		.loc 1 2366 2 view .LVU3538
2370:src/display.c **** 	  set_status("Free:");
 10912              		.loc 1 2370 5 is_stmt 0 view .LVU3539
 10913 08be 012F     		cmp	r7, #1
2366:src/display.c **** 	char buf[16], *p = buf;
 10914              		.loc 1 2366 12 view .LVU3540
 10915 08c0 A7F10303 		sub	r3, r7, #3
 10916              	.LVL1244:
2367:src/display.c **** 	unsigned int pc;
 10917              		.loc 1 2367 2 is_stmt 1 view .LVU3541
2368:src/display.c **** 
 10918              		.loc 1 2368 2 view .LVU3542
2370:src/display.c **** 	  set_status("Free:");
 10919              		.loc 1 2370 2 view .LVU3543
2370:src/display.c **** 	  set_status("Free:");
 10920              		.loc 1 2370 5 is_stmt 0 view .LVU3544
 10921 08c4 00F0DC80 		beq	.L1207
2378:src/display.c **** 	  /* Top line */
 10922              		.loc 1 2378 7 is_stmt 1 view .LVU3545
2378:src/display.c **** 	  /* Top line */
 10923              		.loc 1 2378 10 is_stmt 0 view .LVU3546
 10924 08c8 591C     		adds	r1, r3, #1
 10925 08ca 00F0BA81 		beq	.L1208
 10926              	.LBB651:
2395:src/display.c **** 	  int end;
 10927              		.loc 1 2395 4 is_stmt 1 view .LVU3547
2396:src/display.c **** 	  int group = 10;
 10928              		.loc 1 2396 4 view .LVU3548
2397:src/display.c **** 	  int start = 0;
 10929              		.loc 1 2397 4 view .LVU3549
 10930              	.LVL1245:
2398:src/display.c **** 		
 10931              		.loc 1 2398 4 view .LVU3550
2400:src/display.c **** 	    base = 10 * status;
 10932              		.loc 1 2400 4 view .LVU3551
2400:src/display.c **** 	    base = 10 * status;
 10933              		.loc 1 2400 7 is_stmt 0 view .LVU3552
 10934 08ce 092B     		cmp	r3, #9
 10935 08d0 40F39481 		ble	.L1209
2410:src/display.c **** 	    base = regX_idx;
 10936              		.loc 1 2410 9 is_stmt 1 view .LVU3553
2410:src/display.c **** 	    base = regX_idx;
 10937              		.loc 1 2410 12 is_stmt 0 view .LVU3554
 10938 08d4 0A2B     		cmp	r3, #10
 10939 08d6 00F09B80 		beq	.L1210
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10940              		.loc 1 2418 6 is_stmt 1 view .LVU3555
 10941              	.LVL1246:
2419:src/display.c **** 	    set_status("FL.00-.15");
 10942              		.loc 1 2419 6 view .LVU3556
2420:src/display.c **** 	  }
 10943              		.loc 1 2420 6 view .LVU3557
 10944 08da 4248     		ldr	r0, .L1225+36
 10945 08dc FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccSEf3H9.s 			page 315


 10946              	.LVL1247:
2398:src/display.c **** 		
 10947              		.loc 1 2398 8 is_stmt 0 view .LVU3558
 10948 08e0 4FF0000B 		mov	fp, #0
2397:src/display.c **** 	  int start = 0;
 10949              		.loc 1 2397 8 view .LVU3559
 10950 08e4 4FF00A0A 		mov	r10, #10
 10951              	.LVL1248:
2419:src/display.c **** 	    set_status("FL.00-.15");
 10952              		.loc 1 2419 10 view .LVU3560
 10953 08e8 4FF07F08 		mov	r8, #127
2418:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10954              		.loc 1 2418 11 view .LVU3561
 10955 08ec 7027     		movs	r7, #112
 10956              	.LVL1249:
 10957              	.L948:
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10958              		.loc 1 2422 4 is_stmt 1 view .LVU3562
2422:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10959              		.loc 1 2422 6 is_stmt 0 view .LVU3563
 10960 08ee 0BEBCB05 		add	r5, fp, fp, lsl #3
 10961              	.LVL1250:
2423:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10962              		.loc 1 2423 4 is_stmt 1 view .LVU3564
 10963              	.LBB652:
 10964              	.LBI652:
 349:src/display.c ****   if (res) {
 10965              		.loc 1 349 14 view .LVU3565
 10966              	.LBB653:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10967              		.loc 1 350 3 view .LVU3566
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10968              		.loc 1 353 5 view .LVU3567
 10969              	.LBB654:
 10970              	.LBB655:
 357:src/display.c **** #endif
 10971              		.loc 1 357 35 is_stmt 0 view .LVU3568
 10972 08f2 0BF10103 		add	r3, fp, #1
 10973              	.LBE655:
 10974              	.LBE654:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10975              		.loc 1 353 5 view .LVU3569
 10976 08f6 E81D     		adds	r0, r5, #7
 10977              	.LBB658:
 10978              	.LBB656:
 357:src/display.c **** #endif
 10979              		.loc 1 357 35 view .LVU3570
 10980 08f8 0093     		str	r3, [sp]
 10981              	.LBE656:
 10982              	.LBE658:
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 10983              		.loc 1 353 5 view .LVU3571
 10984 08fa FFF7FEFF 		bl	set_dot
 10985              	.LVL1251:
 354:src/display.c ****       set_dot(posn+8);
 10986              		.loc 1 354 5 is_stmt 1 view .LVU3572
 10987              	.LBB659:
ARM GAS  /tmp/ccSEf3H9.s 			page 316


 10988              	.LBI654:
 349:src/display.c ****   if (res) {
 10989              		.loc 1 349 14 view .LVU3573
 10990              	.LBB657:
 357:src/display.c **** #endif
 10991              		.loc 1 357 5 view .LVU3574
 357:src/display.c **** #endif
 10992              		.loc 1 357 38 is_stmt 0 view .LVU3575
 10993 08fe 3849     		ldr	r1, .L1225+32
 10994 0900 009B     		ldr	r3, [sp]
 10995 0902 2E22     		movs	r2, #46
 10996 0904 01F81320 		strb	r2, [r1, r3, lsl #1]
 360:src/display.c **** }
 10997              		.loc 1 360 3 is_stmt 1 view .LVU3576
 10998              	.LVL1252:
 360:src/display.c **** }
 10999              		.loc 1 360 3 is_stmt 0 view .LVU3577
 11000              	.LBE657:
 11001              	.LBE659:
 360:src/display.c **** }
 11002              		.loc 1 360 3 is_stmt 1 view .LVU3578
 360:src/display.c **** }
 11003              		.loc 1 360 3 is_stmt 0 view .LVU3579
 11004              	.LBE653:
 11005              	.LBE652:
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11006              		.loc 1 2424 4 is_stmt 1 view .LVU3580
 11007 0908 CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11008 090c CB19     		adds	r3, r1, r7
 11009 090e 0393     		str	r3, [sp, #12]
2425:src/display.c **** 	    int k = i + base - start;
 11010              		.loc 1 2425 30 is_stmt 0 view .LVU3581
 11011 0910 0BEB0A03 		add	r3, fp, r10
 11012 0914 0293     		str	r3, [sp, #8]
 11013 0916 A7EB0B03 		sub	r3, r7, fp
 11014 091a CDE90436 		strd	r3, r6, [sp, #16]
2424:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11015              		.loc 1 2424 6 view .LVU3582
 11016 091e 0935     		adds	r5, r5, #9
 11017              	.LVL1253:
2425:src/display.c **** 	    int k = i + base - start;
 11018              		.loc 1 2425 4 is_stmt 1 view .LVU3583
2425:src/display.c **** 	    int k = i + base - start;
 11019              		.loc 1 2425 20 view .LVU3584
 11020              	.LBB660:
 11021              	.LBB661:
 11022              	.LBB662:
 11023              	.LBB663:
 11024              	.LBB664:
 357:src/display.c **** #endif
 11025              		.loc 1 357 38 is_stmt 0 view .LVU3585
 11026 0920 0192     		str	r2, [sp, #4]
 11027 0922 BA44     		add	r10, r10, r7
 11028              	.LVL1254:
 357:src/display.c **** #endif
 11029              		.loc 1 357 38 view .LVU3586
 11030 0924 1CE0     		b	.L952
ARM GAS  /tmp/ccSEf3H9.s 			page 317


 11031              	.LVL1255:
 11032              	.L950:
 357:src/display.c **** #endif
 11033              		.loc 1 357 38 view .LVU3587
 11034              	.LBE664:
 11035              	.LBE663:
 11036              	.LBE662:
 11037              	.LBE661:
2435:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11038              		.loc 1 2435 6 is_stmt 1 view .LVU3588
 11039 0926 3146     		mov	r1, r6
 11040 0928 2846     		mov	r0, r5
 11041 092a FFF7FEFF 		bl	set_dig
 11042              	.LVL1256:
2436:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11043              		.loc 1 2436 6 view .LVU3589
 11044              	.LBB671:
 11045              	.LBI661:
 349:src/display.c ****   if (res) {
 11046              		.loc 1 349 14 view .LVU3590
 11047              	.LBB669:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11048              		.loc 1 350 3 view .LVU3591
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 11049              		.loc 1 353 5 view .LVU3592
 11050 092e E81D     		adds	r0, r5, #7
 11051 0930 FFF7FEFF 		bl	set_dot
 11052              	.LVL1257:
 354:src/display.c ****       set_dot(posn+8);
 11053              		.loc 1 354 5 view .LVU3593
 11054              	.LBB667:
 11055              	.LBI663:
 349:src/display.c ****   if (res) {
 11056              		.loc 1 349 14 view .LVU3594
 11057              	.LBB665:
 357:src/display.c **** #endif
 11058              		.loc 1 357 5 view .LVU3595
 357:src/display.c **** #endif
 11059              		.loc 1 357 30 is_stmt 0 view .LVU3596
 11060 0934 2C4B     		ldr	r3, .L1225+40
 357:src/display.c **** #endif
 11061              		.loc 1 357 38 view .LVU3597
 11062 0936 0199     		ldr	r1, [sp, #4]
 357:src/display.c **** #endif
 11063              		.loc 1 357 30 view .LVU3598
 11064 0938 A3FB0523 		umull	r2, r3, r3, r5
 11065 093c 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 11066              		.loc 1 357 38 view .LVU3599
 11067 093e 284A     		ldr	r2, .L1225+32
 357:src/display.c **** #endif
 11068              		.loc 1 357 35 view .LVU3600
 11069 0940 0133     		adds	r3, r3, #1
 11070              	.LBE665:
 11071              	.LBE667:
 11072              	.LBE669:
 11073              	.LBE671:
ARM GAS  /tmp/ccSEf3H9.s 			page 318


2438:src/display.c **** 	      set_dig(j, 8);
 11074              		.loc 1 2438 9 view .LVU3601
 11075 0942 BBF1040F 		cmp	fp, #4
 11076              	.LBB672:
 11077              	.LBB670:
 11078              	.LBB668:
 11079              	.LBB666:
 357:src/display.c **** #endif
 11080              		.loc 1 357 38 view .LVU3602
 11081 0946 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 11082              		.loc 1 360 3 is_stmt 1 view .LVU3603
 11083              	.LVL1258:
 360:src/display.c **** }
 11084              		.loc 1 360 3 is_stmt 0 view .LVU3604
 11085              	.LBE666:
 11086              	.LBE668:
 360:src/display.c **** }
 11087              		.loc 1 360 3 is_stmt 1 view .LVU3605
 360:src/display.c **** }
 11088              		.loc 1 360 3 is_stmt 0 view .LVU3606
 11089              	.LBE670:
 11090              	.LBE672:
2437:src/display.c **** 	    if (i == 4) {
 11091              		.loc 1 2437 6 is_stmt 1 view .LVU3607
2438:src/display.c **** 	      set_dig(j, 8);
 11092              		.loc 1 2438 6 view .LVU3608
2438:src/display.c **** 	      set_dig(j, 8);
 11093              		.loc 1 2438 9 is_stmt 0 view .LVU3609
 11094 094a 22D0     		beq	.L1211
2437:src/display.c **** 	    if (i == 4) {
 11095              		.loc 1 2437 8 view .LVU3610
 11096 094c 3D46     		mov	r5, r7
 11097              	.LVL1259:
 11098              	.L951:
2437:src/display.c **** 	    if (i == 4) {
 11099              		.loc 1 2437 8 view .LVU3611
 11100              	.LBE660:
2425:src/display.c **** 	    int k = i + base - start;
 11101              		.loc 1 2425 39 is_stmt 1 view .LVU3612
2425:src/display.c **** 	    int k = i + base - start;
 11102              		.loc 1 2425 40 is_stmt 0 view .LVU3613
 11103 094e 009B     		ldr	r3, [sp]
2425:src/display.c **** 	    int k = i + base - start;
 11104              		.loc 1 2425 4 view .LVU3614
 11105 0950 0299     		ldr	r1, [sp, #8]
 11106 0952 8B42     		cmp	r3, r1
 11107 0954 0AF1010A 		add	r10, r10, #1
2425:src/display.c **** 	    int k = i + base - start;
 11108              		.loc 1 2425 40 view .LVU3615
 11109 0958 9B46     		mov	fp, r3
 11110              	.LVL1260:
2425:src/display.c **** 	    int k = i + base - start;
 11111              		.loc 1 2425 20 is_stmt 1 view .LVU3616
2425:src/display.c **** 	    int k = i + base - start;
 11112              		.loc 1 2425 4 is_stmt 0 view .LVU3617
 11113 095a 64D0     		beq	.L1166
ARM GAS  /tmp/ccSEf3H9.s 			page 319


2425:src/display.c **** 	    int k = i + base - start;
 11114              		.loc 1 2425 4 view .LVU3618
 11115 095c 0133     		adds	r3, r3, #1
 11116              	.LVL1261:
2425:src/display.c **** 	    int k = i + base - start;
 11117              		.loc 1 2425 4 view .LVU3619
 11118 095e 0093     		str	r3, [sp]
 11119              	.LVL1262:
 11120              	.L952:
 11121              	.LBB681:
2426:src/display.c **** 	    int l = get_user_flag(k);
 11122              		.loc 1 2426 6 is_stmt 1 view .LVU3620
2427:src/display.c **** 	    k += group;
 11123              		.loc 1 2427 6 view .LVU3621
2427:src/display.c **** 	    k += group;
 11124              		.loc 1 2427 14 is_stmt 0 view .LVU3622
 11125 0960 049B     		ldr	r3, [sp, #16]
 11126 0962 03EB0B00 		add	r0, r3, fp
 11127 0966 FFF7FEFF 		bl	get_user_flag
 11128              	.LVL1263:
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11129              		.loc 1 2429 9 view .LVU3623
 11130 096a C245     		cmp	r10, r8
2427:src/display.c **** 	    k += group;
 11131              		.loc 1 2427 14 view .LVU3624
 11132 096c 0646     		mov	r6, r0
 11133              	.LVL1264:
2428:src/display.c **** 	    if (end >= k) {
 11134              		.loc 1 2428 6 is_stmt 1 view .LVU3625
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11135              		.loc 1 2429 6 view .LVU3626
2437:src/display.c **** 	    if (i == 4) {
 11136              		.loc 1 2437 8 is_stmt 0 view .LVU3627
 11137 096e 05F10907 		add	r7, r5, #9
2429:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11138              		.loc 1 2429 9 view .LVU3628
 11139 0972 D8DC     		bgt	.L950
2430:src/display.c **** 	      k += group;
 11140              		.loc 1 2430 8 is_stmt 1 view .LVU3629
2430:src/display.c **** 	      k += group;
 11141              		.loc 1 2430 14 is_stmt 0 view .LVU3630
 11142 0974 5046     		mov	r0, r10
 11143              	.LVL1265:
2430:src/display.c **** 	      k += group;
 11144              		.loc 1 2430 14 view .LVU3631
 11145 0976 FFF7FEFF 		bl	get_user_flag
 11146              	.LVL1266:
 11147 097a 039B     		ldr	r3, [sp, #12]
 11148 097c 5B44     		add	r3, r3, fp
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11149              		.loc 1 2432 11 view .LVU3632
 11150 097e 9845     		cmp	r8, r3
2430:src/display.c **** 	      k += group;
 11151              		.loc 1 2430 10 view .LVU3633
 11152 0980 46EA4006 		orr	r6, r6, r0, lsl #1
 11153              	.LVL1267:
2431:src/display.c **** 	      if (end >= k)
ARM GAS  /tmp/ccSEf3H9.s 			page 320


 11154              		.loc 1 2431 8 is_stmt 1 view .LVU3634
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11155              		.loc 1 2432 8 view .LVU3635
2432:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11156              		.loc 1 2432 11 is_stmt 0 view .LVU3636
 11157 0984 CFDB     		blt	.L950
2433:src/display.c **** 	    }
 11158              		.loc 1 2433 3 is_stmt 1 view .LVU3637
2433:src/display.c **** 	    }
 11159              		.loc 1 2433 9 is_stmt 0 view .LVU3638
 11160 0986 1846     		mov	r0, r3
 11161 0988 FFF7FEFF 		bl	get_user_flag
 11162              	.LVL1268:
2433:src/display.c **** 	    }
 11163              		.loc 1 2433 5 view .LVU3639
 11164 098c 46EA8006 		orr	r6, r6, r0, lsl #2
 11165              	.LVL1269:
2433:src/display.c **** 	    }
 11166              		.loc 1 2433 5 view .LVU3640
 11167 0990 C9E7     		b	.L950
 11168              	.LVL1270:
 11169              	.L1211:
2439:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11170              		.loc 1 2439 8 is_stmt 1 view .LVU3641
 11171 0992 0821     		movs	r1, #8
 11172 0994 3846     		mov	r0, r7
 11173 0996 FFF7FEFF 		bl	set_dig
 11174              	.LVL1271:
2440:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11175              		.loc 1 2440 8 view .LVU3642
 11176              	.LBB673:
 11177              	.LBI673:
 349:src/display.c ****   if (res) {
 11178              		.loc 1 349 14 view .LVU3643
 11179              	.LBB674:
 350:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11180              		.loc 1 350 3 view .LVU3644
 353:src/display.c ****     if (decimal != DECIMAL_DOT)
 11181              		.loc 1 353 5 view .LVU3645
 11182 099a 05F11000 		add	r0, r5, #16
 11183 099e FFF7FEFF 		bl	set_dot
 11184              	.LVL1272:
 354:src/display.c ****       set_dot(posn+8);
 11185              		.loc 1 354 5 view .LVU3646
 11186              	.LBB675:
 11187              	.LBI675:
 349:src/display.c ****   if (res) {
 11188              		.loc 1 349 14 view .LVU3647
 11189              	.LBB676:
 357:src/display.c **** #endif
 11190              		.loc 1 357 5 view .LVU3648
 357:src/display.c **** #endif
 11191              		.loc 1 357 30 is_stmt 0 view .LVU3649
 11192 09a2 114B     		ldr	r3, .L1225+40
 357:src/display.c **** #endif
 11193              		.loc 1 357 38 view .LVU3650
 11194 09a4 0199     		ldr	r1, [sp, #4]
ARM GAS  /tmp/ccSEf3H9.s 			page 321


 357:src/display.c **** #endif
 11195              		.loc 1 357 30 view .LVU3651
 11196 09a6 A3FB0723 		umull	r2, r3, r3, r7
 11197 09aa 5B08     		lsrs	r3, r3, #1
 357:src/display.c **** #endif
 11198              		.loc 1 357 38 view .LVU3652
 11199 09ac 0C4A     		ldr	r2, .L1225+32
 357:src/display.c **** #endif
 11200              		.loc 1 357 35 view .LVU3653
 11201 09ae 0133     		adds	r3, r3, #1
 11202              	.LBE676:
 11203              	.LBE675:
 11204              	.LBE674:
 11205              	.LBE673:
2441:src/display.c **** 	    }
 11206              		.loc 1 2441 10 view .LVU3654
 11207 09b0 1235     		adds	r5, r5, #18
 11208              	.LBB680:
 11209              	.LBB679:
 11210              	.LBB678:
 11211              	.LBB677:
 357:src/display.c **** #endif
 11212              		.loc 1 357 38 view .LVU3655
 11213 09b2 02F81310 		strb	r1, [r2, r3, lsl #1]
 360:src/display.c **** }
 11214              		.loc 1 360 3 is_stmt 1 view .LVU3656
 11215              	.LVL1273:
 360:src/display.c **** }
 11216              		.loc 1 360 3 is_stmt 0 view .LVU3657
 11217              	.LBE677:
 11218              	.LBE678:
 360:src/display.c **** }
 11219              		.loc 1 360 3 is_stmt 1 view .LVU3658
 360:src/display.c **** }
 11220              		.loc 1 360 3 is_stmt 0 view .LVU3659
 11221              	.LBE679:
 11222              	.LBE680:
2441:src/display.c **** 	    }
 11223              		.loc 1 2441 8 is_stmt 1 view .LVU3660
2441:src/display.c **** 	    }
 11224              		.loc 1 2441 8 is_stmt 0 view .LVU3661
 11225 09b6 CAE7     		b	.L951
 11226              	.LVL1274:
 11227              	.L1049:
2441:src/display.c **** 	    }
 11228              		.loc 1 2441 8 view .LVU3662
 11229              	.LBE681:
 11230              	.LBE651:
 11231              	.LBE650:
 11232              	.LBE649:
 11233              	.LBB687:
 11234              	.LBB617:
 11235              	.LBB607:
1290:src/display.c **** 	    if (gotdot <= j) {
 11236              		.loc 1 1290 8 view .LVU3663
 11237 09b8 4FF0090B 		mov	fp, #9
 11238 09bc FBE5     		b	.L1009
ARM GAS  /tmp/ccSEf3H9.s 			page 322


 11239              	.L1226:
 11240 09be 00BF     		.align	2
 11241              	.L1225:
 11242 09c0 00000000 		.word	DispMsg
 11243 09c4 00000000 		.word	DispPlot
 11244 09c8 00000000 		.word	.LANCHOR1
 11245 09cc 00000000 		.word	main_ram
 11246 09d0 3C000000 		.word	.LC24
 11247 09d4 00000000 		.word	ShowRegister
 11248 09d8 00000000 		.word	multicmds
 11249 09dc 00000000 		.word	.LANCHOR23
 11250 09e0 00000000 		.word	LastDisplayedNumber
 11251 09e4 8C000000 		.word	.LC35
 11252 09e8 398EE338 		.word	954437177
 11253 09ec 00000000 		.word	.LANCHOR22
 11254              	.LVL1275:
 11255              	.L974:
1290:src/display.c **** 	    if (gotdot <= j) {
 11256              		.loc 1 1290 8 view .LVU3664
 11257              	.LBE607:
 11258              	.LBE617:
 11259              	.LBE687:
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11260              		.loc 1 2833 11 is_stmt 1 view .LVU3665
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11261              		.loc 1 2833 15 is_stmt 0 view .LVU3666
 11262 09f0 C14A     		ldr	r2, .L1227
 11263 09f2 0092     		str	r2, [sp]
 11264 09f4 B2F90020 		ldrsh	r2, [r2]
2833:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11265              		.loc 1 2833 14 view .LVU3667
 11266 09f8 002A     		cmp	r2, #0
 11267 09fa 40F0C480 		bne	.L1212
2835:src/display.c **** 	    bp = scopy(buf, Alpha);
 11268              		.loc 1 2835 11 is_stmt 1 view .LVU3668
2835:src/display.c **** 	    bp = scopy(buf, Alpha);
 11269              		.loc 1 2835 14 is_stmt 0 view .LVU3669
 11270 09fe 0907     		lsls	r1, r1, #28
 11271 0a00 6FD4     		bmi	.L1213
 11272              	.LVL1276:
2884:src/display.c ****       nostk:
 11273              		.loc 1 2884 2 is_stmt 1 view .LVU3670
 11274 0a02 FFF7FEFF 		bl	show_stack
 11275              	.LVL1277:
2886:src/display.c **** 	if (!skip) {
 11276              		.loc 1 2886 2 view .LVU3671
2867:src/display.c **** 	  }
 11277              		.loc 1 2867 12 is_stmt 0 view .LVU3672
 11278 0a06 0126     		movs	r6, #1
2886:src/display.c **** 	if (!skip) {
 11279              		.loc 1 2886 2 view .LVU3673
 11280 0a08 FFF7FEFF 		bl	show_flags
 11281              	.LVL1278:
2887:src/display.c **** 	  if (State2.runmode) {
 11282              		.loc 1 2887 2 is_stmt 1 view .LVU3674
 11283 0a0c FFF73BBB 		b	.L903
 11284              	.LVL1279:
ARM GAS  /tmp/ccSEf3H9.s 			page 323


 11285              	.L1210:
 11286              	.LBB688:
 11287              	.LBB684:
 11288              	.LBB682:
2411:src/display.c **** 	    end = regK_idx;
 11289              		.loc 1 2411 6 view .LVU3675
2412:src/display.c **** 	    start = 3;
 11290              		.loc 1 2412 6 view .LVU3676
2413:src/display.c **** 	    group = 4;
 11291              		.loc 1 2413 6 view .LVU3677
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11292              		.loc 1 2414 6 view .LVU3678
2415:src/display.c **** 	  }
 11293              		.loc 1 2415 6 view .LVU3679
 11294 0a10 BA48     		ldr	r0, .L1227+4
 11295 0a12 FFF7FEFF 		bl	set_status
 11296              	.LVL1280:
2413:src/display.c **** 	    group = 4;
 11297              		.loc 1 2413 12 is_stmt 0 view .LVU3680
 11298 0a16 4FF0030B 		mov	fp, #3
2414:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11299              		.loc 1 2414 12 view .LVU3681
 11300 0a1a 4FF0040A 		mov	r10, #4
 11301              	.LVL1281:
2412:src/display.c **** 	    start = 3;
 11302              		.loc 1 2412 10 view .LVU3682
 11303 0a1e 4FF06F08 		mov	r8, #111
2411:src/display.c **** 	    end = regK_idx;
 11304              		.loc 1 2411 11 view .LVU3683
 11305 0a22 6427     		movs	r7, #100
 11306              	.LVL1282:
2411:src/display.c **** 	    end = regK_idx;
 11307              		.loc 1 2411 11 view .LVU3684
 11308 0a24 63E7     		b	.L948
 11309              	.LVL1283:
 11310              	.L1166:
2411:src/display.c **** 	    end = regK_idx;
 11311              		.loc 1 2411 11 view .LVU3685
 11312 0a26 059E     		ldr	r6, [sp, #20]
 11313              	.LVL1284:
 11314              	.L943:
2411:src/display.c **** 	    end = regK_idx;
 11315              		.loc 1 2411 11 view .LVU3686
 11316              	.LBE682:
2446:src/display.c **** 	pc = state_pc();
 11317              		.loc 1 2446 2 is_stmt 1 view .LVU3687
2447:src/display.c **** 	if (isXROM(pc))
 11318              		.loc 1 2447 2 view .LVU3688
2447:src/display.c **** 	if (isXROM(pc))
 11319              		.loc 1 2447 7 is_stmt 0 view .LVU3689
 11320 0a28 B54B     		ldr	r3, .L1227+8
 11321 0a2a 1B68     		ldr	r3, [r3]
2447:src/display.c **** 	if (isXROM(pc))
 11322              		.loc 1 2447 5 view .LVU3690
 11323 0a2c B3F8E077 		ldrh	r7, [r3, #2016]
 11324              	.LVL1285:
2448:src/display.c **** 	  pc = 1;
ARM GAS  /tmp/ccSEf3H9.s 			page 324


 11325              		.loc 1 2448 2 is_stmt 1 view .LVU3691
2448:src/display.c **** 	  pc = 1;
 11326              		.loc 1 2448 6 is_stmt 0 view .LVU3692
 11327 0a30 BB0B     		lsrs	r3, r7, #14
2449:src/display.c **** 	for (n=i=0; i<4; i++) {
 11328              		.loc 1 2449 7 view .LVU3693
 11329 0a32 032B     		cmp	r3, #3
 11330 0a34 08BF     		it	eq
 11331 0a36 0127     		moveq	r7, #1
 11332              	.LVL1286:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11333              		.loc 1 2450 2 is_stmt 1 view .LVU3694
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11334              		.loc 1 2450 14 view .LVU3695
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11335              		.loc 1 2450 8 is_stmt 0 view .LVU3696
 11336 0a38 4FF0000A 		mov	r10, #0
 11337 0a3c 6425     		movs	r5, #100
2446:src/display.c **** 	pc = state_pc();
 11338              		.loc 1 2446 4 view .LVU3697
 11339 0a3e 4FF06C08 		mov	r8, #108
 11340              	.LVL1287:
 11341              	.L956:
2451:src/display.c **** 	    if (++n == 4) {
 11342              		.loc 1 2451 4 is_stmt 1 view .LVU3698
2451:src/display.c **** 	    if (++n == 4) {
 11343              		.loc 1 2451 8 is_stmt 0 view .LVU3699
 11344 0a42 0222     		movs	r2, #2
 11345 0a44 2946     		mov	r1, r5
 11346 0a46 3846     		mov	r0, r7
 11347 0a48 FFF7FEFF 		bl	find_label_from
 11348              	.LVL1288:
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11349              		.loc 1 2452 6 is_stmt 1 view .LVU3700
2451:src/display.c **** 	    if (++n == 4) {
 11350              		.loc 1 2451 7 is_stmt 0 view .LVU3701
 11351 0a4c 58B1     		cbz	r0, .L954
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11352              		.loc 1 2452 9 view .LVU3702
 11353 0a4e 0AF1010A 		add	r10, r10, #1
 11354              	.LVL1289:
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11355              		.loc 1 2456 8 is_stmt 1 view .LVU3703
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11356              		.loc 1 2452 9 is_stmt 0 view .LVU3704
 11357 0a52 BAF1040F 		cmp	r10, #4
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11358              		.loc 1 2456 8 view .LVU3705
 11359 0a56 A5F12301 		sub	r1, r5, #35
 11360 0a5a 4046     		mov	r0, r8
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11361              		.loc 1 2452 9 view .LVU3706
 11362 0a5c 07D0     		beq	.L1214
2456:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11363              		.loc 1 2456 8 view .LVU3707
 11364 0a5e FFF7FEFF 		bl	set_dig
 11365              	.LVL1290:
ARM GAS  /tmp/ccSEf3H9.s 			page 325


2457:src/display.c **** 	    }
 11366              		.loc 1 2457 8 is_stmt 1 view .LVU3708
2457:src/display.c **** 	    }
 11367              		.loc 1 2457 10 is_stmt 0 view .LVU3709
 11368 0a62 08F10708 		add	r8, r8, #7
 11369              	.LVL1291:
 11370              	.L954:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11371              		.loc 1 2450 19 is_stmt 1 view .LVU3710
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11372              		.loc 1 2450 14 view .LVU3711
 11373 0a66 0135     		adds	r5, r5, #1
 11374              	.LVL1292:
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11375              		.loc 1 2450 2 is_stmt 0 view .LVU3712
 11376 0a68 682D     		cmp	r5, #104
 11377 0a6a EAD1     		bne	.L956
2450:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11378              		.loc 1 2450 2 view .LVU3713
 11379 0a6c 22E7     		b	.L1181
 11380              	.LVL1293:
 11381              	.L1214:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11382              		.loc 1 2453 8 is_stmt 1 view .LVU3714
 11383 0a6e 4C21     		movs	r1, #76
 11384 0a70 7320     		movs	r0, #115
 11385              	.LVL1294:
2453:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11386              		.loc 1 2453 8 is_stmt 0 view .LVU3715
 11387 0a72 FFF7FEFF 		bl	set_dig
 11388              	.LVL1295:
2454:src/display.c **** 	    } else {
 11389              		.loc 1 2454 8 is_stmt 1 view .LVU3716
 11390 0a76 4C21     		movs	r1, #76
 11391 0a78 7A20     		movs	r0, #122
 11392 0a7a FFF7FEFF 		bl	set_dig
 11393              	.LVL1296:
 11394 0a7e F2E7     		b	.L954
 11395              	.LVL1297:
 11396              	.L1207:
2371:src/display.c **** 	  p = num_arg(buf, free_mem());
 11397              		.loc 1 2371 4 view .LVU3717
 11398 0a80 A048     		ldr	r0, .L1227+12
 11399 0a82 FFF7FEFF 		bl	set_status
 11400              	.LVL1298:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11401              		.loc 1 2372 4 view .LVU3718
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11402              		.loc 1 2372 21 is_stmt 0 view .LVU3719
 11403 0a86 FFF7FEFF 		bl	free_mem
 11404              	.LVL1299:
 11405 0a8a 0146     		mov	r1, r0
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
 11406              		.loc 1 2372 8 view .LVU3720
 11407 0a8c 15A8     		add	r0, sp, #84
 11408              	.LVL1300:
2372:src/display.c **** 	  p = scopy(p, " , FL. ");
ARM GAS  /tmp/ccSEf3H9.s 			page 326


 11409              		.loc 1 2372 8 view .LVU3721
 11410 0a8e FFF7FEFF 		bl	num_arg
 11411              	.LVL1301:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11412              		.loc 1 2373 4 is_stmt 1 view .LVU3722
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11413              		.loc 1 2373 8 is_stmt 0 view .LVU3723
 11414 0a92 9D49     		ldr	r1, .L1227+16
 11415 0a94 FFF7FEFF 		bl	scopy
 11416              	.LVL1302:
2373:src/display.c **** 	  p = num_arg(p, free_flash());
 11417              		.loc 1 2373 8 view .LVU3724
 11418 0a98 0546     		mov	r5, r0
 11419              	.LVL1303:
2374:src/display.c **** 	  *p = '\0';
 11420              		.loc 1 2374 4 is_stmt 1 view .LVU3725
2374:src/display.c **** 	  *p = '\0';
 11421              		.loc 1 2374 19 is_stmt 0 view .LVU3726
 11422 0a9a FFF7FEFF 		bl	free_flash
 11423              	.LVL1304:
2374:src/display.c **** 	  *p = '\0';
 11424              		.loc 1 2374 19 view .LVU3727
 11425 0a9e 0146     		mov	r1, r0
2374:src/display.c **** 	  *p = '\0';
 11426              		.loc 1 2374 8 view .LVU3728
 11427 0aa0 2846     		mov	r0, r5
 11428 0aa2 FFF7FEFF 		bl	num_arg
 11429              	.LVL1305:
 11430 0aa6 0346     		mov	r3, r0
 11431              	.LVL1306:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11432              		.loc 1 2375 4 is_stmt 1 view .LVU3729
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11433              		.loc 1 2375 7 is_stmt 0 view .LVU3730
 11434 0aa8 0021     		movs	r1, #0
2376:src/display.c **** 	}
 11435              		.loc 1 2376 4 view .LVU3731
 11436 0aaa 15A8     		add	r0, sp, #84
 11437              	.LVL1307:
2375:src/display.c **** 	  set_digits_string(buf, 0);
 11438              		.loc 1 2375 7 view .LVU3732
 11439 0aac 1970     		strb	r1, [r3]
2376:src/display.c **** 	}
 11440              		.loc 1 2376 4 is_stmt 1 view .LVU3733
 11441 0aae FFF7FEFF 		bl	set_digits_string
 11442              	.LVL1308:
2376:src/display.c **** 	}
 11443              		.loc 1 2376 4 is_stmt 0 view .LVU3734
 11444 0ab2 B9E7     		b	.L943
 11445              	.LVL1309:
 11446              	.L1206:
2376:src/display.c **** 	}
 11447              		.loc 1 2376 4 view .LVU3735
 11448              	.LBE684:
 11449              	.LBE688:
 11450              	.LBB689:
 11451              	.LBB647:
ARM GAS  /tmp/ccSEf3H9.s 			page 327


2479:src/display.c **** 	  if (lblpc != pc) {
 11452              		.loc 1 2479 4 is_stmt 1 view .LVU3736
2479:src/display.c **** 	  if (lblpc != pc) {
 11453              		.loc 1 2479 12 is_stmt 0 view .LVU3737
 11454 0ab4 4046     		mov	r0, r8
 11455 0ab6 3946     		mov	r1, r7
 11456 0ab8 FFF7FEFF 		bl	findmultilbl
 11457              	.LVL1310:
2479:src/display.c **** 	  if (lblpc != pc) {
 11458              		.loc 1 2479 10 view .LVU3738
 11459 0abc 85B2     		uxth	r5, r0
 11460              	.LVL1311:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11461              		.loc 1 2480 4 is_stmt 1 view .LVU3739
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11462              		.loc 1 2480 7 is_stmt 0 view .LVU3740
 11463 0abe AB45     		cmp	fp, r5
2479:src/display.c **** 	  if (lblpc != pc) {
 11464              		.loc 1 2479 12 view .LVU3741
 11465 0ac0 8046     		mov	r8, r0
 11466              	.LVL1312:
2480:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11467              		.loc 1 2480 7 view .LVU3742
 11468 0ac2 3FF4F7AE 		beq	.L1181
2481:src/display.c **** 	    n = nLIB(lblpc);
 11469              		.loc 1 2481 6 is_stmt 1 view .LVU3743
 11470 0ac6 9148     		ldr	r0, .L1227+20
 11471 0ac8 3F21     		movs	r1, #63
 11472 0aca FFF7FEFF 		bl	set_digits_string
 11473              	.LVL1313:
2482:src/display.c **** 	    if (n == REGION_RAM)
 11474              		.loc 1 2482 6 view .LVU3744
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11475              		.loc 1 2483 6 view .LVU3745
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11476              		.loc 1 2483 9 is_stmt 0 view .LVU3746
 11477 0ace AD0B     		lsrs	r5, r5, #14
 11478              	.LVL1314:
2483:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11479              		.loc 1 2483 9 view .LVU3747
 11480 0ad0 40F08680 		bne	.L961
2484:src/display.c **** 	    else {
 11481              		.loc 1 2484 8 is_stmt 1 view .LVU3748
 11482 0ad4 2A46     		mov	r2, r5
 11483 0ad6 1FFA88F0 		uxth	r0, r8
 11484 0ada 0121     		movs	r1, #1
 11485 0adc FFF7FEFF 		bl	set_exp
 11486              	.LVL1315:
 11487 0ae0 E8E6     		b	.L1181
 11488              	.LVL1316:
 11489              	.L1213:
2484:src/display.c **** 	    else {
 11490              		.loc 1 2484 8 is_stmt 0 view .LVU3749
 11491              	.LBE647:
 11492              	.LBE689:
2836:src/display.c **** 	    j = State2.alpha_pos;
 11493              		.loc 1 2836 6 is_stmt 1 view .LVU3750
ARM GAS  /tmp/ccSEf3H9.s 			page 328


2836:src/display.c **** 	    j = State2.alpha_pos;
 11494              		.loc 1 2836 22 is_stmt 0 view .LVU3751
 11495 0ae2 874B     		ldr	r3, .L1227+8
 11496 0ae4 0192     		str	r2, [sp, #4]
 11497 0ae6 1968     		ldr	r1, [r3]
2836:src/display.c **** 	    j = State2.alpha_pos;
 11498              		.loc 1 2836 11 view .LVU3752
 11499 0ae8 1EA8     		add	r0, sp, #120
 11500              	.LVL1317:
2836:src/display.c **** 	    j = State2.alpha_pos;
 11501              		.loc 1 2836 11 view .LVU3753
 11502 0aea 01F5F661 		add	r1, r1, #1968
 11503 0aee FFF7FEFF 		bl	scopy
 11504              	.LVL1318:
2837:src/display.c **** 	    if (j != 0) {
 11505              		.loc 1 2837 16 view .LVU3754
 11506 0af2 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11507              	.LVL1319:
2837:src/display.c **** 	    if (j != 0) {
 11508              		.loc 1 2837 6 is_stmt 1 view .LVU3755
2838:src/display.c **** 	      i = slen(buf);
 11509              		.loc 1 2838 6 view .LVU3756
2838:src/display.c **** 	      i = slen(buf);
 11510              		.loc 1 2838 9 is_stmt 0 view .LVU3757
 11511 0af4 23BB     		cbnz	r3, .L1215
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11512              		.loc 1 2851 8 is_stmt 1 view .LVU3758
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11513              		.loc 1 2851 11 is_stmt 0 view .LVU3759
 11514 0af6 3DB1     		cbz	r5, .L985
2851:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11515              		.loc 1 2851 31 discriminator 1 view .LVU3760
 11516 0af8 BBF1000F 		cmp	fp, #0
 11517 0afc 04D1     		bne	.L985
2852:src/display.c **** 		*bp++ = '\0';
 11518              		.loc 1 2852 3 is_stmt 1 view .LVU3761
 11519              	.LVL1320:
2852:src/display.c **** 		*bp++ = '\0';
 11520              		.loc 1 2852 23 is_stmt 0 view .LVU3762
 11521 0afe 05F11003 		add	r3, r5, #16
 11522              	.LVL1321:
2853:src/display.c **** 	      }
 11523              		.loc 1 2853 9 view .LVU3763
 11524 0b02 0022     		movs	r2, #0
2852:src/display.c **** 		*bp++ = '\0';
 11525              		.loc 1 2852 9 view .LVU3764
 11526 0b04 0370     		strb	r3, [r0]
 11527              	.LVL1322:
2853:src/display.c **** 	      }
 11528              		.loc 1 2853 3 is_stmt 1 view .LVU3765
2853:src/display.c **** 	      }
 11529              		.loc 1 2853 9 is_stmt 0 view .LVU3766
 11530 0b06 4270     		strb	r2, [r0, #1]
 11531              	.LVL1323:
 11532              	.L985:
2855:src/display.c **** 	    }
 11533              		.loc 1 2855 8 is_stmt 1 view .LVU3767
ARM GAS  /tmp/ccSEf3H9.s 			page 329


 11534 0b08 1EA8     		add	r0, sp, #120
 11535 0b0a FFF7FEFF 		bl	set_status_right
 11536              	.LVL1324:
 11537              	.L984:
2857:src/display.c **** 	      bp = buf;
 11538              		.loc 1 2857 6 view .LVU3768
2857:src/display.c **** 	      bp = buf;
 11539              		.loc 1 2857 9 is_stmt 0 view .LVU3769
 11540 0b0e 85B3     		cbz	r5, .L976
2857:src/display.c **** 	      bp = buf;
 11541              		.loc 1 2857 27 discriminator 1 view .LVU3770
 11542 0b10 BBF1000F 		cmp	fp, #0
 11543 0b14 2DD0     		beq	.L976
2858:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11544              		.loc 1 2858 8 is_stmt 1 view .LVU3771
 11545              	.LVL1325:
2859:src/display.c **** 	      *bp++ = '\0';
 11546              		.loc 1 2859 8 view .LVU3772
 11547              	.LBB690:
 11548              	.LBB691:
3506:src/display.c **** 	if (State2.runmode) {
 11549              		.loc 1 3506 5 is_stmt 0 view .LVU3773
 11550 0b16 B9F90030 		ldrsh	r3, [r9]
 11551              	.LBE691:
 11552              	.LBE690:
2859:src/display.c **** 	      *bp++ = '\0';
 11553              		.loc 1 2859 28 view .LVU3774
 11554 0b1a 1035     		adds	r5, r5, #16
2860:src/display.c **** 	      set_status_top(buf);
 11555              		.loc 1 2860 14 view .LVU3775
 11556 0b1c 0022     		movs	r2, #0
2859:src/display.c **** 	      *bp++ = '\0';
 11557              		.loc 1 2859 14 view .LVU3776
 11558 0b1e 8DF87850 		strb	r5, [sp, #120]
2860:src/display.c **** 	      set_status_top(buf);
 11559              		.loc 1 2860 8 is_stmt 1 view .LVU3777
 11560              	.LVL1326:
2860:src/display.c **** 	      set_status_top(buf);
 11561              		.loc 1 2860 14 is_stmt 0 view .LVU3778
 11562 0b22 8DF87920 		strb	r2, [sp, #121]
2861:src/display.c **** 	      no_status_top = 1;
 11563              		.loc 1 2861 8 is_stmt 1 view .LVU3779
 11564              	.LVL1327:
 11565              	.LBB693:
 11566              	.LBI690:
3505:src/display.c **** 	if (no_status_top) return;
 11567              		.loc 1 3505 19 view .LVU3780
 11568              	.LBB692:
3506:src/display.c **** 	if (State2.runmode) {
 11569              		.loc 1 3506 2 view .LVU3781
3506:src/display.c **** 	if (State2.runmode) {
 11570              		.loc 1 3506 5 is_stmt 0 view .LVU3782
 11571 0b26 13B9     		cbnz	r3, .L986
 11572 0b28 1EA8     		add	r0, sp, #120
 11573              	.LVL1328:
3506:src/display.c **** 	if (State2.runmode) {
 11574              		.loc 1 3506 5 view .LVU3783
ARM GAS  /tmp/ccSEf3H9.s 			page 330


 11575 0b2a FFF7FEFF 		bl	set_status_top.part.0
 11576              	.LVL1329:
 11577              	.L986:
3506:src/display.c **** 	if (State2.runmode) {
 11578              		.loc 1 3506 5 view .LVU3784
 11579              	.LBE692:
 11580              	.LBE693:
2862:src/display.c **** 	      //annuc = 1;
 11581              		.loc 1 2862 8 is_stmt 1 view .LVU3785
2862:src/display.c **** 	      //annuc = 1;
 11582              		.loc 1 2862 22 is_stmt 0 view .LVU3786
 11583 0b2e 0123     		movs	r3, #1
 11584 0b30 A9F80030 		strh	r3, [r9]	@ movhi
2884:src/display.c ****       nostk:
 11585              		.loc 1 2884 2 is_stmt 1 view .LVU3787
 11586 0b34 FFF7FEFF 		bl	show_stack
 11587              	.LVL1330:
2886:src/display.c **** 	if (!skip) {
 11588              		.loc 1 2886 2 view .LVU3788
 11589 0b38 FFF7FEFF 		bl	show_flags
 11590              	.LVL1331:
2887:src/display.c **** 	  if (State2.runmode) {
 11591              		.loc 1 2887 2 view .LVU3789
 11592 0b3c FFF7A3BA 		b	.L903
 11593              	.LVL1332:
 11594              	.L1215:
2839:src/display.c **** 	      j *= 6;
 11595              		.loc 1 2839 8 view .LVU3790
2839:src/display.c **** 	      j *= 6;
 11596              		.loc 1 2839 12 is_stmt 0 view .LVU3791
 11597 0b40 1EA8     		add	r0, sp, #120
 11598              	.LVL1333:
2839:src/display.c **** 	      j *= 6;
 11599              		.loc 1 2839 12 view .LVU3792
 11600 0b42 0293     		str	r3, [sp, #8]
 11601 0b44 FFF7FEFF 		bl	slen
 11602              	.LVL1334:
2840:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11603              		.loc 1 2840 8 is_stmt 1 view .LVU3793
2841:src/display.c **** 		{
 11604              		.loc 1 2841 8 view .LVU3794
2840:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11605              		.loc 1 2840 10 is_stmt 0 view .LVU3795
 11606 0b48 029B     		ldr	r3, [sp, #8]
 11607 0b4a 03EB4303 		add	r3, r3, r3, lsl #1
2841:src/display.c **** 		{
 11608              		.loc 1 2841 15 view .LVU3796
 11609 0b4e A0EB4300 		sub	r0, r0, r3, lsl #1
 11610              	.LVL1335:
2841:src/display.c **** 		{
 11611              		.loc 1 2841 11 view .LVU3797
 11612 0b52 1328     		cmp	r0, #19
 11613 0b54 13DD     		ble	.L983
2843:src/display.c **** 		  set_status_right(buf);
 11614              		.loc 1 2843 5 is_stmt 1 view .LVU3798
2843:src/display.c **** 		  set_status_right(buf);
 11615              		.loc 1 2843 20 is_stmt 0 view .LVU3799
ARM GAS  /tmp/ccSEf3H9.s 			page 331


 11616 0b56 28AB     		add	r3, sp, #160
 11617 0b58 0344     		add	r3, r3, r0
 11618 0b5a 019A     		ldr	r2, [sp, #4]
 11619 0b5c 03F8282C 		strb	r2, [r3, #-40]
2844:src/display.c **** 		}
 11620              		.loc 1 2844 5 is_stmt 1 view .LVU3800
 11621 0b60 1EA8     		add	r0, sp, #120
 11622 0b62 FFF7FEFF 		bl	set_status_right
 11623              	.LVL1336:
 11624 0b66 D2E7     		b	.L984
 11625              	.LVL1337:
 11626              	.L1216:
 11627              	.LBB694:
 11628              	.LBB695:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11629              		.loc 1 3324 17 view .LVU3801
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11630              		.loc 1 3324 18 is_stmt 0 view .LVU3802
 11631 0b68 0135     		adds	r5, r5, #1
 11632              	.LVL1338:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11633              		.loc 1 3324 12 is_stmt 1 view .LVU3803
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11634              		.loc 1 3324 2 is_stmt 0 view .LVU3804
 11635 0b6a 062D     		cmp	r5, #6
 11636 0b6c 21D1     		bne	.L977
 11637 0b6e DDE90467 		ldrd	r6, r7, [sp, #16]
 11638              	.LVL1339:
 11639              	.L976:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11640              		.loc 1 3324 2 view .LVU3805
 11641              	.LBE695:
 11642              	.LBE694:
2884:src/display.c ****       nostk:
 11643              		.loc 1 2884 2 is_stmt 1 view .LVU3806
 11644 0b72 FFF7FEFF 		bl	show_stack
 11645              	.LVL1340:
2886:src/display.c **** 	if (!skip) {
 11646              		.loc 1 2886 2 view .LVU3807
 11647 0b76 FFF7FEFF 		bl	show_flags
 11648              	.LVL1341:
2887:src/display.c **** 	  if (State2.runmode) {
 11649              		.loc 1 2887 2 view .LVU3808
 11650 0b7a FFF784BA 		b	.L903
 11651              	.LVL1342:
 11652              	.L983:
2847:src/display.c **** 	      }
 11653              		.loc 1 2847 3 view .LVU3809
 11654 0b7e 1EA8     		add	r0, sp, #120
 11655 0b80 FFF7FEFF 		bl	set_status
 11656              	.LVL1343:
 11657 0b84 C3E7     		b	.L984
 11658              	.LVL1344:
 11659              	.L1212:
2834:src/display.c **** 	  } else if (State2.alphas) {
 11660              		.loc 1 2834 6 view .LVU3810
2834:src/display.c **** 	  } else if (State2.alphas) {
ARM GAS  /tmp/ccSEf3H9.s 			page 332


 11661              		.loc 1 2834 48 is_stmt 0 view .LVU3811
 11662 0b86 501E     		subs	r0, r2, #1
 11663 0b88 0293     		str	r3, [sp, #8]
 11664 0b8a FFF7FEFF 		bl	get_reg_n
 11665              	.LVL1345:
 11666              	.LBB703:
 11667              	.LBI694:
3310:src/display.c **** 	int glen = *graphic++;
 11668              		.loc 1 3310 19 is_stmt 1 view .LVU3812
 11669              	.LBB702:
3311:src/display.c **** 	int i, j;
 11670              		.loc 1 3311 2 view .LVU3813
3319:src/display.c **** #endif
 11671              		.loc 1 3319 15 is_stmt 0 view .LVU3814
 11672 0b8e 604D     		ldr	r5, .L1227+24
3311:src/display.c **** 	int i, j;
 11673              		.loc 1 3311 6 view .LVU3815
 11674 0b90 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11675              	.LVL1346:
3312:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11676              		.loc 1 3312 2 is_stmt 1 view .LVU3816
3319:src/display.c **** #endif
 11677              		.loc 1 3319 2 view .LVU3817
3319:src/display.c **** #endif
 11678              		.loc 1 3319 15 is_stmt 0 view .LVU3818
 11679 0b92 0122     		movs	r2, #1
 11680 0b94 2A70     		strb	r2, [r5]
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11681              		.loc 1 3321 2 is_stmt 1 view .LVU3819
3321:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11682              		.loc 1 3321 5 is_stmt 0 view .LVU3820
 11683 0b96 0029     		cmp	r1, #0
 11684 0b98 EBD0     		beq	.L976
3322:src/display.c **** 
 11685              		.loc 1 3322 2 is_stmt 1 view .LVU3821
 11686              	.LVL1347:
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11687              		.loc 1 3324 2 view .LVU3822
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11688              		.loc 1 3324 12 view .LVU3823
 11689 0b9a 8318     		adds	r3, r0, r2
 11690 0b9c 0393     		str	r3, [sp, #12]
 11691 0b9e 4A29     		cmp	r1, #74
 11692 0ba0 D4BF     		ite	le
 11693 0ba2 5B18     		addle	r3, r3, r1
 11694 0ba4 4A33     		addgt	r3, r3, #74
 11695 0ba6 0193     		str	r3, [sp, #4]
 11696 0ba8 CDE90467 		strd	r6, r7, [sp, #16]
3324:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11697              		.loc 1 3324 8 is_stmt 0 view .LVU3824
 11698 0bac 029B     		ldr	r3, [sp, #8]
 11699 0bae 0292     		str	r2, [sp, #8]
 11700 0bb0 1D46     		mov	r5, r3
 11701              	.LVL1348:
 11702              	.L977:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11703              		.loc 1 3325 14 is_stmt 1 view .LVU3825
ARM GAS  /tmp/ccSEf3H9.s 			page 333


 11704 0bb2 029B     		ldr	r3, [sp, #8]
 11705 0bb4 039F     		ldr	r7, [sp, #12]
 11706 0bb6 03FA05FB 		lsl	fp, r3, r5
 11707 0bba 05F19406 		add	r6, r5, #148
 11708 0bbe 06E0     		b	.L980
 11709              	.LVL1349:
 11710              	.L1217:
 11711              	.LBB696:
 11712              	.LBB697:
 340:src/display.c ****   else	clr_dot(n);
 11713              		.loc 1 340 11 is_stmt 0 view .LVU3826
 11714 0bc0 FFF7FEFF 		bl	set_dot
 11715              	.LVL1350:
 11716              	.L979:
 340:src/display.c ****   else	clr_dot(n);
 11717              		.loc 1 340 11 view .LVU3827
 11718              	.LBE697:
 11719              	.LBE696:
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11720              		.loc 1 3325 23 is_stmt 1 view .LVU3828
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11721              		.loc 1 3325 14 view .LVU3829
3325:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11722              		.loc 1 3325 4 is_stmt 0 view .LVU3830
 11723 0bc4 019B     		ldr	r3, [sp, #4]
 11724 0bc6 BB42     		cmp	r3, r7
 11725 0bc8 06F10606 		add	r6, r6, #6
 11726 0bcc CCD0     		beq	.L1216
 11727              	.LVL1351:
 11728              	.L980:
3330:src/display.c **** #endif
 11729              		.loc 1 3330 6 is_stmt 1 view .LVU3831
 11730              	.LBB700:
 11731              	.LBI696:
 339:src/display.c ****   if (on)	set_dot(n);
 11732              		.loc 1 339 6 view .LVU3832
 11733              	.LBB698:
 340:src/display.c ****   else	clr_dot(n);
 11734              		.loc 1 340 3 view .LVU3833
 340:src/display.c ****   else	clr_dot(n);
 11735              		.loc 1 340 11 view .LVU3834
 341:src/display.c **** }
 11736              		.loc 1 341 8 view .LVU3835
 11737              	.LBE698:
 11738              	.LBE700:
3330:src/display.c **** #endif
 11739              		.loc 1 3330 37 is_stmt 0 view .LVU3836
 11740 0bce 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11741              	.LVL1352:
 11742              	.LBB701:
 11743              	.LBB699:
 340:src/display.c ****   else	clr_dot(n);
 11744              		.loc 1 340 6 view .LVU3837
 11745 0bd2 13EA0B0F 		tst	r3, fp
 340:src/display.c ****   else	clr_dot(n);
 11746              		.loc 1 340 11 view .LVU3838
 11747 0bd6 3046     		mov	r0, r6
ARM GAS  /tmp/ccSEf3H9.s 			page 334


 340:src/display.c ****   else	clr_dot(n);
 11748              		.loc 1 340 6 view .LVU3839
 11749 0bd8 F2D1     		bne	.L1217
 341:src/display.c **** }
 11750              		.loc 1 341 8 view .LVU3840
 11751 0bda FFF7FEFF 		bl	clr_dot
 11752              	.LVL1353:
 11753 0bde F1E7     		b	.L979
 11754              	.LVL1354:
 11755              	.L961:
 341:src/display.c **** }
 11756              		.loc 1 341 8 view .LVU3841
 11757              	.LBE699:
 11758              	.LBE701:
 11759              	.LBE702:
 11760              	.LBE703:
 11761              	.LBB704:
 11762              	.LBB648:
2486:src/display.c **** #ifndef REALBUILD
 11763              		.loc 1 2486 8 is_stmt 1 view .LVU3842
2486:src/display.c **** #ifndef REALBUILD
 11764              		.loc 1 2486 37 is_stmt 0 view .LVU3843
 11765 0be0 05EB8500 		add	r0, r5, r5, lsl #2
2486:src/display.c **** #ifndef REALBUILD
 11766              		.loc 1 2486 8 view .LVU3844
 11767 0be4 3946     		mov	r1, r7
 11768 0be6 5044     		add	r0, r0, r10
 11769 0be8 FFF7FEFF 		bl	set_exp_digits_string
 11770              	.LVL1355:
2488:src/display.c **** #endif
 11771              		.loc 1 2488 8 is_stmt 1 view .LVU3845
 11772 0bec 494B     		ldr	r3, .L1227+28
 11773 0bee 4A48     		ldr	r0, .L1227+32
2488:src/display.c **** #endif
 11774              		.loc 1 2488 47 is_stmt 0 view .LVU3846
 11775 0bf0 0A21     		movs	r1, #10
2488:src/display.c **** #endif
 11776              		.loc 1 2488 8 view .LVU3847
 11777 0bf2 01FB0531 		mla	r1, r1, r5, r3
 11778 0bf6 FFF7FEFF 		bl	scopy
 11779              	.LVL1356:
2488:src/display.c **** #endif
 11780              		.loc 1 2488 8 view .LVU3848
 11781              	.LBE648:
 11782              	.LBE704:
2884:src/display.c ****       nostk:
 11783              		.loc 1 2884 2 is_stmt 1 view .LVU3849
 11784 0bfa 5BE6     		b	.L1181
 11785              	.LVL1357:
 11786              	.L1209:
 11787              	.LBB705:
 11788              	.LBB685:
 11789              	.LBB683:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11790              		.loc 1 2401 6 view .LVU3850
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11791              		.loc 1 2401 11 is_stmt 0 view .LVU3851
ARM GAS  /tmp/ccSEf3H9.s 			page 335


 11792 0bfc 4FF00A0A 		mov	r10, #10
 11793              	.LVL1358:
2401:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11794              		.loc 1 2401 11 view .LVU3852
 11795 0c00 0AFB03F7 		mul	r7, r10, r3
 11796              	.LVL1359:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11797              		.loc 1 2402 6 is_stmt 1 view .LVU3853
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11798              		.loc 1 2402 28 is_stmt 0 view .LVU3854
 11799 0c04 462F     		cmp	r7, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11800              		.loc 1 2403 10 view .LVU3855
 11801 0c06 4549     		ldr	r1, .L1227+36
 11802 0c08 15A8     		add	r0, sp, #84
 11803              	.LVL1360:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11804              		.loc 1 2402 28 view .LVU3856
 11805 0c0a B846     		mov	r8, r7
 11806 0c0c A8BF     		it	ge
 11807 0c0e 4FF04608 		movge	r8, #70
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11808              		.loc 1 2403 10 view .LVU3857
 11809 0c12 FFF7FEFF 		bl	scopy
 11810              	.LVL1361:
2404:src/display.c **** 	    *p++ = '-';
 11811              		.loc 1 2404 10 view .LVU3858
 11812 0c16 3946     		mov	r1, r7
 11813 0c18 0222     		movs	r2, #2
 11814 0c1a FFF7FEFF 		bl	num_arg_0
 11815              	.LVL1362:
2402:src/display.c **** 	    p = scopy(buf, "FL ");
 11816              		.loc 1 2402 10 view .LVU3859
 11817 0c1e 08F11D08 		add	r8, r8, #29
 11818              	.LVL1363:
2403:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11819              		.loc 1 2403 6 is_stmt 1 view .LVU3860
2404:src/display.c **** 	    *p++ = '-';
 11820              		.loc 1 2404 6 view .LVU3861
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11821              		.loc 1 2405 6 view .LVU3862
2405:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11822              		.loc 1 2405 11 is_stmt 0 view .LVU3863
 11823 0c22 2D23     		movs	r3, #45
 11824 0c24 00F8013B 		strb	r3, [r0], #1
 11825              	.LVL1364:
2406:src/display.c **** 	    *p = '\0';
 11826              		.loc 1 2406 6 is_stmt 1 view .LVU3864
2406:src/display.c **** 	    *p = '\0';
 11827              		.loc 1 2406 10 is_stmt 0 view .LVU3865
 11828 0c28 4146     		mov	r1, r8
 11829 0c2a 0222     		movs	r2, #2
 11830 0c2c FFF7FEFF 		bl	num_arg_0
 11831              	.LVL1365:
2406:src/display.c **** 	    *p = '\0';
 11832              		.loc 1 2406 10 view .LVU3866
 11833 0c30 0246     		mov	r2, r0
ARM GAS  /tmp/ccSEf3H9.s 			page 336


 11834              	.LVL1366:
2407:src/display.c **** 	    set_status(buf);
 11835              		.loc 1 2407 6 is_stmt 1 view .LVU3867
2407:src/display.c **** 	    set_status(buf);
 11836              		.loc 1 2407 9 is_stmt 0 view .LVU3868
 11837 0c32 4FF0000B 		mov	fp, #0
2408:src/display.c **** 	  }
 11838              		.loc 1 2408 6 view .LVU3869
 11839 0c36 15A8     		add	r0, sp, #84
 11840              	.LVL1367:
2407:src/display.c **** 	    set_status(buf);
 11841              		.loc 1 2407 9 view .LVU3870
 11842 0c38 82F800B0 		strb	fp, [r2]
2408:src/display.c **** 	  }
 11843              		.loc 1 2408 6 is_stmt 1 view .LVU3871
 11844 0c3c FFF7FEFF 		bl	set_status
 11845              	.LVL1368:
2408:src/display.c **** 	  }
 11846              		.loc 1 2408 6 is_stmt 0 view .LVU3872
 11847 0c40 55E6     		b	.L948
 11848              	.LVL1369:
 11849              	.L1208:
2408:src/display.c **** 	  }
 11850              		.loc 1 2408 6 view .LVU3873
 11851              	.LBE683:
2380:src/display.c **** 	  if (SizeStatRegs)
 11852              		.loc 1 2380 4 is_stmt 1 view .LVU3874
2380:src/display.c **** 	  if (SizeStatRegs)
 11853              		.loc 1 2380 8 is_stmt 0 view .LVU3875
 11854 0c42 15AF     		add	r7, sp, #84
 11855              	.LVL1370:
2380:src/display.c **** 	  if (SizeStatRegs)
 11856              		.loc 1 2380 8 view .LVU3876
 11857 0c44 3649     		ldr	r1, .L1227+40
 11858 0c46 3846     		mov	r0, r7
 11859 0c48 FFF7FEFF 		bl	scopy
 11860              	.LVL1371:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11861              		.loc 1 2381 8 view .LVU3877
 11862 0c4c 354A     		ldr	r2, .L1227+44
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11863              		.loc 1 2381 7 view .LVU3878
 11864 0c4e 1268     		ldr	r2, [r2]
2380:src/display.c **** 	  if (SizeStatRegs)
 11865              		.loc 1 2380 8 view .LVU3879
 11866 0c50 0346     		mov	r3, r0
 11867              	.LVL1372:
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11868              		.loc 1 2381 4 is_stmt 1 view .LVU3880
2381:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11869              		.loc 1 2381 7 is_stmt 0 view .LVU3881
 11870 0c52 002A     		cmp	r2, #0
 11871 0c54 76D1     		bne	.L1218
 11872              	.L945:
2383:src/display.c **** 	  set_status(buf);
 11873              		.loc 1 2383 4 is_stmt 1 view .LVU3882
2383:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccSEf3H9.s 			page 337


 11874              		.loc 1 2383 7 is_stmt 0 view .LVU3883
 11875 0c56 0022     		movs	r2, #0
 11876 0c58 1A70     		strb	r2, [r3]
2384:src/display.c **** 
 11877              		.loc 1 2384 4 is_stmt 1 view .LVU3884
 11878 0c5a 3846     		mov	r0, r7
 11879              	.LVL1373:
2384:src/display.c **** 
 11880              		.loc 1 2384 4 is_stmt 0 view .LVU3885
 11881 0c5c FFF7FEFF 		bl	set_status
 11882              	.LVL1374:
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11883              		.loc 1 2387 4 is_stmt 1 view .LVU3886
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11884              		.loc 1 2387 8 is_stmt 0 view .LVU3887
 11885 0c60 FFF7FEFF 		bl	global_regs
 11886              	.LVL1375:
 11887 0c64 0146     		mov	r1, r0
 11888 0c66 3846     		mov	r0, r7
 11889 0c68 FFF7FEFF 		bl	num_arg
 11890              	.LVL1376:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11891              		.loc 1 2388 8 view .LVU3888
 11892 0c6c 244B     		ldr	r3, .L1227+8
 11893 0c6e 1A68     		ldr	r2, [r3]
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11894              		.loc 1 2388 7 view .LVU3889
 11895 0c70 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11896 0c74 002A     		cmp	r2, #0
2387:src/display.c **** 	  if (LocalRegs < 0) {
 11897              		.loc 1 2387 8 view .LVU3890
 11898 0c76 0346     		mov	r3, r0
 11899              	.LVL1377:
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11900              		.loc 1 2388 4 is_stmt 1 view .LVU3891
2388:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11901              		.loc 1 2388 7 is_stmt 0 view .LVU3892
 11902 0c78 58DB     		blt	.L1219
 11903              	.L946:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11904              		.loc 1 2392 4 is_stmt 1 view .LVU3893
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11905              		.loc 1 2392 7 is_stmt 0 view .LVU3894
 11906 0c7a 0021     		movs	r1, #0
2393:src/display.c **** 	} else {
 11907              		.loc 1 2393 4 view .LVU3895
 11908 0c7c 3846     		mov	r0, r7
 11909              	.LVL1378:
2392:src/display.c **** 	  set_digits_string(buf, 0);
 11910              		.loc 1 2392 7 view .LVU3896
 11911 0c7e 1970     		strb	r1, [r3]
2393:src/display.c **** 	} else {
 11912              		.loc 1 2393 4 is_stmt 1 view .LVU3897
 11913 0c80 FFF7FEFF 		bl	set_digits_string
 11914              	.LVL1379:
2393:src/display.c **** 	} else {
 11915              		.loc 1 2393 4 is_stmt 0 view .LVU3898
ARM GAS  /tmp/ccSEf3H9.s 			page 338


 11916 0c84 D0E6     		b	.L943
 11917              	.LVL1380:
 11918              	.L973:
2393:src/display.c **** 	} else {
 11919              		.loc 1 2393 4 view .LVU3899
 11920              	.LBE685:
 11921              	.LBE705:
2874:src/display.c **** 	  if (i > 0)
 11922              		.loc 1 2874 4 is_stmt 1 view .LVU3900
2874:src/display.c **** 	  if (i > 0)
 11923              		.loc 1 2874 8 is_stmt 0 view .LVU3901
 11924 0c86 1E4B     		ldr	r3, .L1227+8
 11925 0c88 1B68     		ldr	r3, [r3]
 11926 0c8a B3F8E007 		ldrh	r0, [r3, #2016]
 11927              	.LVL1381:
2875:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11928              		.loc 1 2875 4 is_stmt 1 view .LVU3902
2875:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11929              		.loc 1 2875 7 is_stmt 0 view .LVU3903
 11930 0c8e 0028     		cmp	r0, #0
 11931 0c90 00F0C080 		beq	.L987
2876:src/display.c **** 	  else
 11932              		.loc 1 2876 6 is_stmt 1 view .LVU3904
 11933 0c94 FFF7FEFF 		bl	getprog
 11934              	.LVL1382:
2876:src/display.c **** 	  else
 11935              		.loc 1 2876 6 is_stmt 0 view .LVU3905
 11936 0c98 1EA9     		add	r1, sp, #120
 11937              	.LVL1383:
2876:src/display.c **** 	  else
 11938              		.loc 1 2876 6 view .LVU3906
 11939 0c9a FFF7FEFF 		bl	prt
 11940              	.LVL1384:
2876:src/display.c **** 	  else
 11941              		.loc 1 2876 6 view .LVU3907
 11942 0c9e FFF7FEFF 		bl	set_status
 11943              	.LVL1385:
 11944              	.L988:
2879:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11945              		.loc 1 2879 4 is_stmt 1 view .LVU3908
 11946 0ca2 8920     		movs	r0, #137
 11947 0ca4 FFF7FEFF 		bl	set_dot
 11948              	.LVL1386:
2881:src/display.c **** 	  goto nostk;
 11949              		.loc 1 2881 6 view .LVU3909
2882:src/display.c **** 	}
 11950              		.loc 1 2882 4 view .LVU3910
2886:src/display.c **** 	if (!skip) {
 11951              		.loc 1 2886 2 view .LVU3911
2881:src/display.c **** 	  goto nostk;
 11952              		.loc 1 2881 12 is_stmt 0 view .LVU3912
 11953 0ca8 0126     		movs	r6, #1
2886:src/display.c **** 	if (!skip) {
 11954              		.loc 1 2886 2 view .LVU3913
 11955 0caa FFF7FEFF 		bl	show_flags
 11956              	.LVL1387:
 11957              	.L1178:
ARM GAS  /tmp/ccSEf3H9.s 			page 339


2887:src/display.c **** 	  if (State2.runmode) {
 11958              		.loc 1 2887 2 is_stmt 1 view .LVU3914
 11959 0cae 124B     		ldr	r3, .L1227
 11960 0cb0 1D4F     		ldr	r7, .L1227+48
 11961 0cb2 0093     		str	r3, [sp]
 11962 0cb4 FFF7E7B9 		b	.L903
 11963              	.LVL1388:
 11964              	.L1201:
2821:src/display.c **** 	  skip = 1;
 11965              		.loc 1 2821 4 view .LVU3915
 11966              	.LBB706:
 11967              	.LBI706:
2496:src/display.c **** 	char buf[16], *bp;
 11968              		.loc 1 2496 19 view .LVU3916
 11969              	.LBB707:
2497:src/display.c **** 	int n = State2.digval;
 11970              		.loc 1 2497 2 view .LVU3917
2498:src/display.c **** 	
 11971              		.loc 1 2498 2 view .LVU3918
2498:src/display.c **** 	
 11972              		.loc 1 2498 6 is_stmt 0 view .LVU3919
 11973 0cb8 B4F808A0 		ldrh	r10, [r4, #8]
 11974              	.LVL1389:
2505:src/display.c **** 	  n;
 11975              		.loc 1 2505 2 is_stmt 1 view .LVU3920
2505:src/display.c **** 	  n;
 11976              		.loc 1 2505 54 is_stmt 0 view .LVU3921
 11977 0cbc CA07     		lsls	r2, r1, #31
 11978 0cbe 4CBF     		ite	mi
 11979 0cc0 0AF17008 		addmi	r8, r10, #112
2498:src/display.c **** 	
 11980              		.loc 1 2498 6 view .LVU3922
 11981 0cc4 D046     		movpl	r8, r10
 11982              	.LVL1390:
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11983              		.loc 1 2509 2 is_stmt 1 view .LVU3923
2509:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11984              		.loc 1 2509 5 is_stmt 0 view .LVU3924
 11985 0cc6 11F00401 		ands	r1, r1, #4
 11986 0cca 49D0     		beq	.L964
2510:src/display.c **** 	}
 11987              		.loc 1 2510 4 is_stmt 1 view .LVU3925
2510:src/display.c **** 	}
 11988              		.loc 1 2510 15 is_stmt 0 view .LVU3926
 11989 0ccc 15A9     		add	r1, sp, #84
 11990 0cce 4046     		mov	r0, r8
 11991 0cd0 FFF7FEFF 		bl	alpha_rcl_s
 11992              	.LVL1391:
2510:src/display.c **** 	}
 11993              		.loc 1 2510 4 view .LVU3927
 11994 0cd4 FFF7FEFF 		bl	set_status
 11995              	.LVL1392:
 11996              	.L965:
2532:src/display.c ****       }
 11997              		.loc 1 2532 2 is_stmt 1 view .LVU3928
 11998 0cd8 4046     		mov	r0, r8
 11999 0cda 0021     		movs	r1, #0
ARM GAS  /tmp/ccSEf3H9.s 			page 340


 12000 0cdc FFF7FEFF 		bl	format_reg
 12001              	.LVL1393:
2532:src/display.c ****       }
 12002              		.loc 1 2532 2 is_stmt 0 view .LVU3929
 12003              	.LBE707:
 12004              	.LBE706:
2822:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12005              		.loc 1 2822 4 is_stmt 1 view .LVU3930
2823:src/display.c **** 	    annunciators();
 12006              		.loc 1 2823 4 view .LVU3931
2823:src/display.c **** 	    annunciators();
 12007              		.loc 1 2823 7 is_stmt 0 view .LVU3932
 12008 0ce0 002D     		cmp	r5, #0
 12009 0ce2 3AD1     		bne	.L971
2823:src/display.c **** 	    annunciators();
 12010              		.loc 1 2823 25 discriminator 1 view .LVU3933
 12011 0ce4 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12012 0ce6 012B     		cmp	r3, #1
 12013 0ce8 31D0     		beq	.L1220
 12014              	.L972:
2884:src/display.c ****       nostk:
 12015              		.loc 1 2884 2 is_stmt 1 view .LVU3934
 12016 0cea FFF7FEFF 		bl	show_stack
 12017              	.LVL1394:
2886:src/display.c **** 	if (!skip) {
 12018              		.loc 1 2886 2 view .LVU3935
2594:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12019              		.loc 1 2594 6 is_stmt 0 view .LVU3936
 12020 0cee 0026     		movs	r6, #0
2886:src/display.c **** 	if (!skip) {
 12021              		.loc 1 2886 2 view .LVU3937
 12022 0cf0 FFF7FEFF 		bl	show_flags
 12023              	.LVL1395:
2887:src/display.c **** 	  if (State2.runmode) {
 12024              		.loc 1 2887 2 is_stmt 1 view .LVU3938
 12025 0cf4 7AE5     		b	.L936
 12026              	.L1228:
 12027 0cf6 00BF     		.align	2
 12028              	.L1227:
 12029 0cf8 00000000 		.word	DispPlot
 12030 0cfc 7C000000 		.word	.LC34
 12031 0d00 00000000 		.word	main_ram
 12032 0d04 4C000000 		.word	.LC28
 12033 0d08 54000000 		.word	.LC29
 12034 0d0c 98000000 		.word	.LC36
 12035 0d10 00000000 		.word	forceDispPlot
 12036 0d14 00000000 		.word	.LANCHOR23
 12037 0d18 00000000 		.word	LastDisplayedNumber
 12038 0d1c 78000000 		.word	.LC33
 12039 0d20 5C000000 		.word	.LC30
 12040 0d24 00000000 		.word	SizeStatRegs
 12041 0d28 00000000 		.word	DispMsg
 12042              	.LVL1396:
 12043              	.L1219:
 12044              	.LBB710:
 12045              	.LBB686:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
ARM GAS  /tmp/ccSEf3H9.s 			page 341


 12046              		.loc 1 2389 6 view .LVU3939
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 12047              		.loc 1 2389 10 is_stmt 0 view .LVU3940
 12048 0d2c 4849     		ldr	r1, .L1229
 12049 0d2e FFF7FEFF 		bl	scopy
 12050              	.LVL1397:
2389:src/display.c **** 	    p = num_arg(p, local_regs());
 12051              		.loc 1 2389 10 view .LVU3941
 12052 0d32 0546     		mov	r5, r0
 12053              	.LVL1398:
2390:src/display.c **** 	  }
 12054              		.loc 1 2390 6 is_stmt 1 view .LVU3942
2390:src/display.c **** 	  }
 12055              		.loc 1 2390 21 is_stmt 0 view .LVU3943
 12056 0d34 FFF7FEFF 		bl	local_regs
 12057              	.LVL1399:
2390:src/display.c **** 	  }
 12058              		.loc 1 2390 21 view .LVU3944
 12059 0d38 0146     		mov	r1, r0
2390:src/display.c **** 	  }
 12060              		.loc 1 2390 10 view .LVU3945
 12061 0d3a 2846     		mov	r0, r5
 12062 0d3c FFF7FEFF 		bl	num_arg
 12063              	.LVL1400:
 12064 0d40 0346     		mov	r3, r0
 12065              	.LVL1401:
2390:src/display.c **** 	  }
 12066              		.loc 1 2390 10 view .LVU3946
 12067 0d42 9AE7     		b	.L946
 12068              	.L1218:
2382:src/display.c **** 	  *p = '\0';
 12069              		.loc 1 2382 6 is_stmt 1 view .LVU3947
2382:src/display.c **** 	  *p = '\0';
 12070              		.loc 1 2382 10 is_stmt 0 view .LVU3948
 12071 0d44 4349     		ldr	r1, .L1229+4
 12072 0d46 FFF7FEFF 		bl	scopy
 12073              	.LVL1402:
2382:src/display.c **** 	  *p = '\0';
 12074              		.loc 1 2382 10 view .LVU3949
 12075 0d4a 0346     		mov	r3, r0
 12076              	.LVL1403:
2382:src/display.c **** 	  *p = '\0';
 12077              		.loc 1 2382 10 view .LVU3950
 12078 0d4c 83E7     		b	.L945
 12079              	.LVL1404:
 12080              	.L1220:
2382:src/display.c **** 	  *p = '\0';
 12081              		.loc 1 2382 10 view .LVU3951
 12082              	.LBE686:
 12083              	.LBE710:
2823:src/display.c **** 	    annunciators();
 12084              		.loc 1 2823 56 discriminator 2 view .LVU3952
 12085 0d4e 424B     		ldr	r3, .L1229+8
 12086 0d50 1B68     		ldr	r3, [r3]
 12087 0d52 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12088 0d56 DD07     		lsls	r5, r3, #31
 12089 0d58 C7D5     		bpl	.L972
ARM GAS  /tmp/ccSEf3H9.s 			page 342


 12090              	.L971:
2824:src/display.c **** 	  }
 12091              		.loc 1 2824 6 is_stmt 1 view .LVU3953
 12092 0d5a FFF7FEFF 		bl	annunciators
 12093              	.LVL1405:
 12094 0d5e A9E5     		b	.L1181
 12095              	.LVL1406:
 12096              	.L964:
 12097              	.LBB711:
 12098              	.LBB708:
2513:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12099              		.loc 1 2513 4 view .LVU3954
 12100 0d60 15AF     		add	r7, sp, #84
 12101 0d62 1022     		movs	r2, #16
 12102 0d64 3846     		mov	r0, r7
 12103 0d66 FFF7FEFF 		bl	xset
 12104              	.LVL1407:
2517:src/display.c **** #endif
 12105              		.loc 1 2517 4 view .LVU3955
2517:src/display.c **** #endif
 12106              		.loc 1 2517 9 is_stmt 0 view .LVU3956
 12107 0d6a 3C49     		ldr	r1, .L1229+12
 12108 0d6c 3846     		mov	r0, r7
 12109 0d6e FFF7FEFF 		bl	scopy_spc
 12110              	.LVL1408:
2519:src/display.c **** 	    *bp++ = '.';
 12111              		.loc 1 2519 8 view .LVU3957
 12112 0d72 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12113              	.LVL1409:
2519:src/display.c **** 	    *bp++ = '.';
 12114              		.loc 1 2519 4 is_stmt 1 view .LVU3958
2519:src/display.c **** 	    *bp++ = '.';
 12115              		.loc 1 2519 7 is_stmt 0 view .LVU3959
 12116 0d74 DB07     		lsls	r3, r3, #31
 12117 0d76 56D5     		bpl	.L966
2520:src/display.c **** 	    if (n >= 100) {
 12118              		.loc 1 2520 6 is_stmt 1 view .LVU3960
 12119              	.LVL1410:
2520:src/display.c **** 	    if (n >= 100) {
 12120              		.loc 1 2520 12 is_stmt 0 view .LVU3961
 12121 0d78 2E23     		movs	r3, #46
2521:src/display.c **** 	      *bp++ = '1';
 12122              		.loc 1 2521 9 view .LVU3962
 12123 0d7a BAF1630F 		cmp	r10, #99
2520:src/display.c **** 	    if (n >= 100) {
 12124              		.loc 1 2520 12 view .LVU3963
 12125 0d7e 0370     		strb	r3, [r0]
2521:src/display.c **** 	      *bp++ = '1';
 12126              		.loc 1 2521 6 is_stmt 1 view .LVU3964
2521:src/display.c **** 	      *bp++ = '1';
 12127              		.loc 1 2521 9 is_stmt 0 view .LVU3965
 12128 0d80 4CDC     		bgt	.L967
2520:src/display.c **** 	    if (n >= 100) {
 12129              		.loc 1 2520 9 view .LVU3966
 12130 0d82 0130     		adds	r0, r0, #1
 12131              	.LVL1411:
 12132              	.L968:
ARM GAS  /tmp/ccSEf3H9.s 			page 343


2527:src/display.c **** 	  else
 12133              		.loc 1 2527 6 is_stmt 1 view .LVU3967
2527:src/display.c **** 	  else
 12134              		.loc 1 2527 11 is_stmt 0 view .LVU3968
 12135 0d84 5146     		mov	r1, r10
 12136 0d86 0222     		movs	r2, #2
 12137 0d88 FFF7FEFF 		bl	num_arg_0
 12138              	.LVL1412:
 12139              	.L970:
2530:src/display.c **** 	}
 12140              		.loc 1 2530 4 is_stmt 1 view .LVU3969
 12141 0d8c 3846     		mov	r0, r7
 12142 0d8e FFF7FEFF 		bl	set_status
 12143              	.LVL1413:
 12144 0d92 A1E7     		b	.L965
 12145              	.LVL1414:
 12146              	.L1205:
2530:src/display.c **** 	}
 12147              		.loc 1 2530 4 is_stmt 0 view .LVU3970
 12148              	.LBE708:
 12149              	.LBE711:
 12150              	.LBB712:
 12151              	.LBB633:
2783:src/display.c **** 	      copyreg(&z, x);
 12152              		.loc 1 2783 8 is_stmt 1 view .LVU3971
2783:src/display.c **** 	      copyreg(&z, x);
 12153              		.loc 1 2783 27 is_stmt 0 view .LVU3972
 12154 0d94 324B     		ldr	r3, .L1229+16
 12155 0d96 1E68     		ldr	r6, [r3]
 12156              	.LVL1415:
2784:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 12157              		.loc 1 2784 8 is_stmt 1 view .LVU3973
 12158 0d98 15A8     		add	r0, sp, #84
 12159 0d9a 3146     		mov	r1, r6
 12160 0d9c FFF7FEFF 		bl	copyreg
 12161              	.LVL1416:
2785:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12162              		.loc 1 2785 8 view .LVU3974
 12163 0da0 E8B2     		uxtb	r0, r5
 12164 0da2 FFF7FEFF 		bl	sigma_val
 12165              	.LVL1417:
2786:src/display.c **** 	      copyreg(x, &z);
 12166              		.loc 1 2786 8 view .LVU3975
 12167 0da6 FFF7FEFF 		bl	is_dblmode
 12168              	.LVL1418:
 12169 0daa 0021     		movs	r1, #0
 12170 0dac 0246     		mov	r2, r0
 12171 0dae 3046     		mov	r0, r6
 12172 0db0 FFF7FEFF 		bl	set_x
 12173              	.LVL1419:
2787:src/display.c **** 	      skip = 1;
 12174              		.loc 1 2787 8 view .LVU3976
 12175 0db4 15A9     		add	r1, sp, #84
 12176 0db6 3046     		mov	r0, r6
 12177 0db8 FFF7FEFF 		bl	copyreg
 12178              	.LVL1420:
2788:src/display.c **** 	    }
ARM GAS  /tmp/ccSEf3H9.s 			page 344


 12179              		.loc 1 2788 8 view .LVU3977
2788:src/display.c **** 	    }
 12180              		.loc 1 2788 13 is_stmt 0 view .LVU3978
 12181 0dbc 0125     		movs	r5, #1
 12182              	.LVL1421:
2788:src/display.c **** 	    }
 12183              		.loc 1 2788 13 view .LVU3979
 12184 0dbe 01E5     		b	.L928
 12185              	.LVL1422:
 12186              	.L1204:
2788:src/display.c **** 	    }
 12187              		.loc 1 2788 13 view .LVU3980
 12188              	.LBE633:
 12189              	.LBB634:
2763:src/display.c **** 	      decimal64 z;
 12190              		.loc 1 2763 8 is_stmt 1 view .LVU3981
2764:src/display.c **** 
 12191              		.loc 1 2764 8 view .LVU3982
2766:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12192              		.loc 1 2766 8 view .LVU3983
 12193 0dc0 0CA8     		add	r0, sp, #48
 12194 0dc2 FFF7FEFF 		bl	getX
 12195              	.LVL1423:
2767:src/display.c **** 		const unsigned int f = argKIND(op);
 12196              		.loc 1 2767 8 view .LVU3984
2767:src/display.c **** 		const unsigned int f = argKIND(op);
 12197              		.loc 1 2767 11 is_stmt 0 view .LVU3985
 12198 0dc6 C5F30723 		ubfx	r3, r5, #8, #8
 12199 0dca 022B     		cmp	r3, #2
 12200 0dcc 38D1     		bne	.L930
 12201              	.LBB635:
2768:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12202              		.loc 1 2768 3 is_stmt 1 view .LVU3986
2768:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12203              		.loc 1 2768 22 is_stmt 0 view .LVU3987
 12204 0dce EDB2     		uxtb	r5, r5
 12205              	.LVL1424:
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12206              		.loc 1 2769 3 is_stmt 1 view .LVU3988
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12207              		.loc 1 2769 6 is_stmt 0 view .LVU3989
 12208 0dd0 9B2D     		cmp	r5, #155
 12209              	.LBB636:
2772:src/display.c **** 		}
 12210              		.loc 1 2772 5 view .LVU3990
 12211 0dd2 15AF     		add	r7, sp, #84
 12212              	.LBE636:
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12213              		.loc 1 2769 6 view .LVU3991
 12214 0dd4 30D8     		bhi	.L931
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12215              		.loc 1 2769 28 discriminator 1 view .LVU3992
 12216 0dd6 1823     		movs	r3, #24
 12217 0dd8 224A     		ldr	r2, .L1229+20
 12218 0dda 03FB05F3 		mul	r3, r3, r5
 12219 0dde D358     		ldr	r3, [r2, r3]
2769:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/ccSEf3H9.s 			page 345


 12220              		.loc 1 2769 23 discriminator 1 view .LVU3993
 12221 0de0 53B3     		cbz	r3, .L931
 12222              	.LBB637:
2770:src/display.c **** 		  update_speed(0);
 12223              		.loc 1 2770 5 is_stmt 1 view .LVU3994
 12224              	.LVL1425:
2771:src/display.c **** 		  fp(&r, &x);
 12225              		.loc 1 2771 20 view .LVU3995
2772:src/display.c **** 		}
 12226              		.loc 1 2772 5 view .LVU3996
 12227 0de2 0CA9     		add	r1, sp, #48
 12228 0de4 3846     		mov	r0, r7
 12229 0de6 9847     		blx	r3
 12230              	.LVL1426:
 12231              	.L932:
2772:src/display.c **** 		}
 12232              		.loc 1 2772 5 is_stmt 0 view .LVU3997
 12233              	.LBE637:
 12234              	.LBE635:
2778:src/display.c **** 	      packed_from_number(&z, &r);
 12235              		.loc 1 2778 8 is_stmt 1 discriminator 1 view .LVU3998
 12236 0de8 1F4A     		ldr	r2, .L1229+24
 12237 0dea 3946     		mov	r1, r7
 12238 0dec 3846     		mov	r0, r7
 12239 0dee FFF7FEFF 		bl	decNumberNormalize
 12240              	.LVL1427:
2779:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12241              		.loc 1 2779 8 discriminator 1 view .LVU3999
 12242 0df2 3946     		mov	r1, r7
 12243 0df4 06A8     		add	r0, sp, #24
 12244 0df6 FFF7FEFF 		bl	packed_from_number
 12245              	.LVL1428:
2780:src/display.c **** 	      skip = 1;
 12246              		.loc 1 2780 8 discriminator 1 view .LVU4000
 12247 0dfa 0022     		movs	r2, #0
 12248 0dfc 06A8     		add	r0, sp, #24
 12249 0dfe 1146     		mov	r1, r2
 12250 0e00 FFF7FEFF 		bl	set_x
 12251              	.LVL1429:
2781:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12252              		.loc 1 2781 8 discriminator 1 view .LVU4001
2781:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12253              		.loc 1 2781 13 is_stmt 0 discriminator 1 view .LVU4002
 12254 0e04 0125     		movs	r5, #1
 12255              	.LBE634:
 12256 0e06 DDE4     		b	.L928
 12257              	.LVL1430:
 12258              	.L926:
2757:src/display.c **** 	    else
 12259              		.loc 1 2757 8 is_stmt 1 view .LVU4003
 12260 0e08 1848     		ldr	r0, .L1229+28
 12261 0e0a 0021     		movs	r1, #0
 12262 0e0c FFF7FEFF 		bl	set_digits_string
 12263              	.LVL1431:
2760:src/display.c **** 	  } else if (State2.runmode) {
 12264              		.loc 1 2760 11 is_stmt 0 view .LVU4004
 12265 0e10 0125     		movs	r5, #1
ARM GAS  /tmp/ccSEf3H9.s 			page 346


 12266              	.LVL1432:
2757:src/display.c **** 	    else
 12267              		.loc 1 2757 8 view .LVU4005
 12268 0e12 D7E4     		b	.L928
 12269              	.LVL1433:
 12270              	.L987:
2757:src/display.c **** 	    else
 12271              		.loc 1 2757 8 view .LVU4006
 12272              	.LBE712:
2878:src/display.c **** 	  set_dot(STO_annun);
 12273              		.loc 1 2878 6 is_stmt 1 view .LVU4007
 12274 0e14 1648     		ldr	r0, .L1229+32
 12275              	.LVL1434:
2878:src/display.c **** 	  set_dot(STO_annun);
 12276              		.loc 1 2878 6 is_stmt 0 view .LVU4008
 12277 0e16 FFF7FEFF 		bl	set_status
 12278              	.LVL1435:
2878:src/display.c **** 	  set_dot(STO_annun);
 12279              		.loc 1 2878 6 view .LVU4009
 12280 0e1a 42E7     		b	.L988
 12281              	.LVL1436:
 12282              	.L967:
 12283              	.LBB713:
 12284              	.LBB709:
2522:src/display.c **** 	      n -= 100;
 12285              		.loc 1 2522 8 is_stmt 1 view .LVU4010
2522:src/display.c **** 	      n -= 100;
 12286              		.loc 1 2522 14 is_stmt 0 view .LVU4011
 12287 0e1c 3123     		movs	r3, #49
 12288 0e1e 4370     		strb	r3, [r0, #1]
2523:src/display.c **** 	    }
 12289              		.loc 1 2523 8 is_stmt 1 view .LVU4012
2523:src/display.c **** 	    }
 12290              		.loc 1 2523 10 is_stmt 0 view .LVU4013
 12291 0e20 AAF1640A 		sub	r10, r10, #100
 12292              	.LVL1437:
2522:src/display.c **** 	      n -= 100;
 12293              		.loc 1 2522 11 view .LVU4014
 12294 0e24 0230     		adds	r0, r0, #2
 12295              	.LVL1438:
 12296              	.L966:
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12297              		.loc 1 2526 4 is_stmt 1 view .LVU4015
2526:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12298              		.loc 1 2526 7 is_stmt 0 view .LVU4016
 12299 0e26 BAF1630F 		cmp	r10, #99
 12300 0e2a ABDD     		ble	.L968
2529:src/display.c **** 	  set_status(buf);
 12301              		.loc 1 2529 6 is_stmt 1 view .LVU4017
 12302              	.LVL1439:
2529:src/display.c **** 	  set_status(buf);
 12303              		.loc 1 2529 22 is_stmt 0 view .LVU4018
 12304 0e2c 114B     		ldr	r3, .L1229+36
 12305 0e2e 5344     		add	r3, r3, r10
2529:src/display.c **** 	  set_status(buf);
 12306              		.loc 1 2529 12 view .LVU4019
 12307 0e30 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
ARM GAS  /tmp/ccSEf3H9.s 			page 347


 12308 0e34 0370     		strb	r3, [r0]
 12309 0e36 A9E7     		b	.L970
 12310              	.LVL1440:
 12311              	.L931:
2529:src/display.c **** 	  set_status(buf);
 12312              		.loc 1 2529 12 view .LVU4020
 12313              	.LBE709:
 12314              	.LBE713:
 12315              	.LBB714:
 12316              	.LBB639:
 12317              	.LBB638:
2775:src/display.c **** 	      } else
 12318              		.loc 1 2775 5 is_stmt 1 view .LVU4021
 12319 0e38 3846     		mov	r0, r7
 12320 0e3a FFF7FEFF 		bl	set_NaN
 12321              	.LVL1441:
 12322 0e3e D3E7     		b	.L932
 12323              	.LVL1442:
 12324              	.L930:
2775:src/display.c **** 	      } else
 12325              		.loc 1 2775 5 is_stmt 0 view .LVU4022
 12326              	.LBE638:
2777:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12327              		.loc 1 2777 3 is_stmt 1 view .LVU4023
 12328 0e40 15AF     		add	r7, sp, #84
 12329 0e42 0CAA     		add	r2, sp, #48
 12330 0e44 05F07F01 		and	r1, r5, #127
 12331 0e48 3846     		mov	r0, r7
 12332 0e4a FFF7FEFF 		bl	do_conv
 12333              	.LVL1443:
 12334 0e4e CBE7     		b	.L932
 12335              	.L1230:
 12336              		.align	2
 12337              	.L1229:
 12338 0e50 6C000000 		.word	.LC32
 12339 0e54 64000000 		.word	.LC31
 12340 0e58 00000000 		.word	main_ram
 12341 0e5c A0000000 		.word	.LC37
 12342 0e60 00000000 		.word	StackBase
 12343 0e64 00000000 		.word	monfuncs
 12344 0e68 00000000 		.word	Ctx
 12345 0e6c 40000000 		.word	.LC27
 12346 0e70 A8000000 		.word	.LC38
 12347 0e74 BC000000 		.word	.LC25
 12348              	.LBE639:
 12349              	.LBE714:
 12350              		.cfi_endproc
 12351              	.LFE34:
 12353              		.section	.text.frozen_display,"ax",%progbits
 12354              		.align	1
 12355              		.p2align 2,,3
 12356              		.global	frozen_display
 12357              		.syntax unified
 12358              		.thumb
 12359              		.thumb_func
 12360              		.fpu fpv4-sp-d16
 12362              	frozen_display:
ARM GAS  /tmp/ccSEf3H9.s 			page 348


 12363              	.LFB35:
3304:src/display.c **** 	State2.disp_freeze = 0;
 12364              		.loc 1 3304 7 view -0
 12365              		.cfi_startproc
 12366              		@ args = 0, pretend = 0, frame = 0
 12367              		@ frame_needed = 0, uses_anonymous_args = 0
3305:src/display.c **** 	display();
 12368              		.loc 1 3305 2 view .LVU4025
3304:src/display.c **** 	State2.disp_freeze = 0;
 12369              		.loc 1 3304 7 is_stmt 0 view .LVU4026
 12370 0000 10B5     		push	{r4, lr}
 12371              		.cfi_def_cfa_offset 8
 12372              		.cfi_offset 4, -8
 12373              		.cfi_offset 14, -4
3305:src/display.c **** 	display();
 12374              		.loc 1 3305 21 view .LVU4027
 12375 0002 064C     		ldr	r4, .L1233
 12376 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12377 0006 6FF30413 		bfc	r3, #4, #1
 12378 000a E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 12379              		.loc 1 3306 2 is_stmt 1 view .LVU4028
 12380 000c FFF7FEFF 		bl	display
 12381              	.LVL1444:
3307:src/display.c ****       }
 12382              		.loc 1 3307 2 view .LVU4029
3307:src/display.c ****       }
 12383              		.loc 1 3307 21 is_stmt 0 view .LVU4030
 12384 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12385 0012 43F01003 		orr	r3, r3, #16
 12386 0016 E375     		strb	r3, [r4, #23]
3308:src/display.c **** 
 12387              		.loc 1 3308 7 view .LVU4031
 12388 0018 10BD     		pop	{r4, pc}
 12389              	.L1234:
 12390 001a 00BF     		.align	2
 12391              	.L1233:
 12392 001c 00000000 		.word	StateWhileOn
 12393              		.cfi_endproc
 12394              	.LFE35:
 12396              		.section	.text.message,"ax",%progbits
 12397              		.align	1
 12398              		.p2align 2,,3
 12399              		.global	message
 12400              		.syntax unified
 12401              		.thumb
 12402              		.thumb_func
 12403              		.fpu fpv4-sp-d16
 12405              	message:
 12406              	.LVL1445:
 12407              	.LFB46:
3525:src/display.c **** 	State2.disp_freeze = 0;
 12408              		.loc 1 3525 7 is_stmt 1 view -0
 12409              		.cfi_startproc
 12410              		@ args = 0, pretend = 0, frame = 0
 12411              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	State2.disp_small = 0;
ARM GAS  /tmp/ccSEf3H9.s 			page 349


 12412              		.loc 1 3526 2 view .LVU4033
3527:src/display.c **** 	WasDataEntry = 0;
 12413              		.loc 1 3527 2 view .LVU4034
3527:src/display.c **** 	WasDataEntry = 0;
 12414              		.loc 1 3527 20 is_stmt 0 view .LVU4035
 12415 0000 174A     		ldr	r2, .L1245
3525:src/display.c **** 	State2.disp_freeze = 0;
 12416              		.loc 1 3525 7 view .LVU4036
 12417 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12418              		.cfi_def_cfa_offset 24
 12419              		.cfi_offset 3, -24
 12420              		.cfi_offset 4, -20
 12421              		.cfi_offset 5, -16
 12422              		.cfi_offset 6, -12
 12423              		.cfi_offset 7, -8
 12424              		.cfi_offset 14, -4
3527:src/display.c **** 	WasDataEntry = 0;
 12425              		.loc 1 3527 20 view .LVU4037
 12426 0004 D38A     		ldrh	r3, [r2, #22]
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12427              		.loc 1 3528 15 view .LVU4038
 12428 0006 174E     		ldr	r6, .L1245+4
3527:src/display.c **** 	WasDataEntry = 0;
 12429              		.loc 1 3527 20 view .LVU4039
 12430 0008 23F48453 		bic	r3, r3, #4224
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12431              		.loc 1 3528 15 view .LVU4040
 12432 000c 0027     		movs	r7, #0
3527:src/display.c **** 	WasDataEntry = 0;
 12433              		.loc 1 3527 20 view .LVU4041
 12434 000e D382     		strh	r3, [r2, #22]	@ movhi
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12435              		.loc 1 3528 2 is_stmt 1 view .LVU4042
3529:src/display.c **** 	  // Complete redraw necessary
 12436              		.loc 1 3529 5 is_stmt 0 view .LVU4043
 12437 0010 9B05     		lsls	r3, r3, #22
3525:src/display.c **** 	State2.disp_freeze = 0;
 12438              		.loc 1 3525 7 view .LVU4044
 12439 0012 0546     		mov	r5, r0
 12440 0014 0C46     		mov	r4, r1
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12441              		.loc 1 3528 15 view .LVU4045
 12442 0016 3760     		str	r7, [r6]
3529:src/display.c **** 	  // Complete redraw necessary
 12443              		.loc 1 3529 2 is_stmt 1 view .LVU4046
3529:src/display.c **** 	  // Complete redraw necessary
 12444              		.loc 1 3529 5 is_stmt 0 view .LVU4047
 12445 0018 12D5     		bpl	.L1236
3529:src/display.c **** 	  // Complete redraw necessary
 12446              		.loc 1 3529 27 discriminator 1 view .LVU4048
 12447 001a D1B1     		cbz	r1, .L1244
 12448              	.L1237:
3536:src/display.c **** 	    ShowRPN = 0;
 12449              		.loc 1 3536 6 is_stmt 1 view .LVU4049
 12450 001c FFF7FEFF 		bl	reset_disp
 12451              	.LVL1446:
3537:src/display.c **** 	    set_annunciators();
ARM GAS  /tmp/ccSEf3H9.s 			page 350


 12452              		.loc 1 3537 6 view .LVU4050
3537:src/display.c **** 	    set_annunciators();
 12453              		.loc 1 3537 14 is_stmt 0 view .LVU4051
 12454 0020 114B     		ldr	r3, .L1245+8
 12455 0022 0026     		movs	r6, #0
 12456 0024 1E60     		str	r6, [r3]
3538:src/display.c **** 	    set_digits_string( str2, 0 );
 12457              		.loc 1 3538 6 is_stmt 1 view .LVU4052
 12458 0026 FFF7FEFF 		bl	set_annunciators
 12459              	.LVL1447:
3539:src/display.c **** 	  }
 12460              		.loc 1 3539 6 view .LVU4053
 12461 002a 3146     		mov	r1, r6
 12462 002c 2046     		mov	r0, r4
 12463 002e FFF7FEFF 		bl	set_digits_string
 12464              	.LVL1448:
3541:src/display.c **** 	  finish_display();// message
 12465              		.loc 1 3541 4 view .LVU4054
 12466 0032 2846     		mov	r0, r5
 12467 0034 FFF7FEFF 		bl	set_status
 12468              	.LVL1449:
3542:src/display.c **** 	}
 12469              		.loc 1 3542 4 view .LVU4055
3544:src/display.c **** 
 12470              		.loc 1 3544 7 is_stmt 0 view .LVU4056
 12471 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12472              		.cfi_remember_state
 12473              		.cfi_restore 14
 12474              		.cfi_restore 7
 12475              		.cfi_restore 6
 12476              		.cfi_restore 5
 12477              		.cfi_restore 4
 12478              		.cfi_restore 3
 12479              		.cfi_def_cfa_offset 0
 12480              	.LVL1450:
3542:src/display.c **** 	}
 12481              		.loc 1 3542 4 view .LVU4057
 12482 003c FFF7FEBF 		b	finish_display
 12483              	.LVL1451:
 12484              	.L1236:
 12485              		.cfi_restore_state
3535:src/display.c **** 	    reset_disp();
 12486              		.loc 1 3535 4 is_stmt 1 view .LVU4058
3535:src/display.c **** 	    reset_disp();
 12487              		.loc 1 3535 7 is_stmt 0 view .LVU4059
 12488 0040 0029     		cmp	r1, #0
 12489 0042 EBD1     		bne	.L1237
3541:src/display.c **** 	  finish_display();// message
 12490              		.loc 1 3541 4 is_stmt 1 view .LVU4060
 12491 0044 2846     		mov	r0, r5
 12492              	.LVL1452:
3541:src/display.c **** 	  finish_display();// message
 12493              		.loc 1 3541 4 is_stmt 0 view .LVU4061
 12494 0046 FFF7FEFF 		bl	set_status
 12495              	.LVL1453:
3542:src/display.c **** 	}
 12496              		.loc 1 3542 4 is_stmt 1 view .LVU4062
ARM GAS  /tmp/ccSEf3H9.s 			page 351


3544:src/display.c **** 
 12497              		.loc 1 3544 7 is_stmt 0 view .LVU4063
 12498 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12499              		.cfi_remember_state
 12500              		.cfi_restore 14
 12501              		.cfi_restore 7
 12502              		.cfi_restore 6
 12503              		.cfi_restore 5
 12504              		.cfi_restore 4
 12505              		.cfi_restore 3
 12506              		.cfi_def_cfa_offset 0
 12507              	.LVL1454:
3542:src/display.c **** 	}
 12508              		.loc 1 3542 4 view .LVU4064
 12509 004e FFF7FEBF 		b	finish_display
 12510              	.LVL1455:
 12511              	.L1244:
 12512              		.cfi_restore_state
3531:src/display.c **** 	  display();
 12513              		.loc 1 3531 4 is_stmt 1 view .LVU4065
3531:src/display.c **** 	  display();
 12514              		.loc 1 3531 12 is_stmt 0 view .LVU4066
 12515 0052 064B     		ldr	r3, .L1245+12
 12516 0054 1860     		str	r0, [r3]
3532:src/display.c **** 	}
 12517              		.loc 1 3532 4 is_stmt 1 view .LVU4067
3544:src/display.c **** 
 12518              		.loc 1 3544 7 is_stmt 0 view .LVU4068
 12519 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12520              		.cfi_restore 14
 12521              		.cfi_restore 7
 12522              		.cfi_restore 6
 12523              		.cfi_restore 5
 12524              		.cfi_restore 4
 12525              		.cfi_restore 3
 12526              		.cfi_def_cfa_offset 0
3532:src/display.c **** 	}
 12527              		.loc 1 3532 4 view .LVU4069
 12528 005a FFF7FEBF 		b	display
 12529              	.LVL1456:
 12530              	.L1246:
3532:src/display.c **** 	}
 12531              		.loc 1 3532 4 view .LVU4070
 12532 005e 00BF     		.align	2
 12533              	.L1245:
 12534 0060 00000000 		.word	StateWhileOn
 12535 0064 00000000 		.word	WasDataEntry
 12536 0068 00000000 		.word	ShowRPN
 12537 006c 00000000 		.word	DispMsg
 12538              		.cfi_endproc
 12539              	.LFE46:
 12541              		.section	.text.error_message,"ax",%progbits
 12542              		.align	1
 12543              		.p2align 2,,3
 12544              		.global	error_message
 12545              		.syntax unified
 12546              		.thumb
ARM GAS  /tmp/ccSEf3H9.s 			page 352


 12547              		.thumb_func
 12548              		.fpu fpv4-sp-d16
 12550              	error_message:
 12551              	.LVL1457:
 12552              	.LFB1:
 134:src/display.c **** #define MSG1(top) top "\0"
 12553              		.loc 1 134 1 is_stmt 1 view -0
 12554              		.cfi_startproc
 12555              		@ args = 0, pretend = 0, frame = 0
 12556              		@ frame_needed = 0, uses_anonymous_args = 0
 139:src/display.c ****     {
 12557              		.loc 1 139 3 view .LVU4072
 197:src/display.c ****     {
 12558              		.loc 1 197 3 view .LVU4073
 232:src/display.c ****     const char *p = error_table[e];
 12559              		.loc 1 232 3 view .LVU4074
 134:src/display.c **** #define MSG1(top) top "\0"
 12560              		.loc 1 134 1 is_stmt 0 view .LVU4075
 12561 0000 38B5     		push	{r3, r4, r5, lr}
 12562              		.cfi_def_cfa_offset 16
 12563              		.cfi_offset 3, -16
 12564              		.cfi_offset 4, -12
 12565              		.cfi_offset 5, -8
 12566              		.cfi_offset 14, -4
 232:src/display.c ****     const char *p = error_table[e];
 12567              		.loc 1 232 21 view .LVU4076
 12568 0002 1A4B     		ldr	r3, .L1258
 12569 0004 1B68     		ldr	r3, [r3]
 12570 0006 0343     		orrs	r3, r0, r3
 12571 0008 2CD0     		beq	.L1247
 12572              	.LBB715:
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12573              		.loc 1 233 5 is_stmt 1 view .LVU4077
 233:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12574              		.loc 1 233 17 is_stmt 0 view .LVU4078
 12575 000a 194B     		ldr	r3, .L1258+4
 12576 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12577              	.LVL1458:
 234:src/display.c ****     if (*q == '\0')
 12578              		.loc 1 234 5 is_stmt 1 view .LVU4079
 12579 0010 0446     		mov	r4, r0
 234:src/display.c ****     if (*q == '\0')
 12580              		.loc 1 234 21 is_stmt 0 view .LVU4080
 12581 0012 0021     		movs	r1, #0
 12582 0014 2846     		mov	r0, r5
 12583              	.LVL1459:
 234:src/display.c ****     if (*q == '\0')
 12584              		.loc 1 234 21 view .LVU4081
 12585 0016 FFF7FEFF 		bl	find_char
 12586              	.LVL1460:
 235:src/display.c ****       q = S7_ERROR;
 12587              		.loc 1 235 5 is_stmt 1 view .LVU4082
 235:src/display.c ****       q = S7_ERROR;
 12588              		.loc 1 235 9 is_stmt 0 view .LVU4083
 12589 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 235:src/display.c ****       q = S7_ERROR;
 12590              		.loc 1 235 8 view .LVU4084
ARM GAS  /tmp/ccSEf3H9.s 			page 353


 12591 001c 9BB9     		cbnz	r3, .L1256
 236:src/display.c ****     if (*q == 'X') {
 12592              		.loc 1 236 9 view .LVU4085
 12593 001e 1549     		ldr	r1, .L1258+8
 12594              	.L1249:
 12595              	.LVL1461:
 246:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12596              		.loc 1 246 7 is_stmt 1 view .LVU4086
 12597 0020 2846     		mov	r0, r5
 12598 0022 FFF7FEFF 		bl	message
 12599              	.LVL1462:
 247:src/display.c **** #ifndef REALBUILD
 12600              		.loc 1 247 7 view .LVU4087
 247:src/display.c **** #ifndef REALBUILD
 12601              		.loc 1 247 26 is_stmt 0 view .LVU4088
 12602 0026 144B     		ldr	r3, .L1258+12
 249:src/display.c **** #endif
 12603              		.loc 1 249 7 view .LVU4089
 12604 0028 1449     		ldr	r1, .L1258+16
 247:src/display.c **** #ifndef REALBUILD
 12605              		.loc 1 247 26 view .LVU4090
 12606 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 249:src/display.c **** #endif
 12607              		.loc 1 249 7 view .LVU4091
 12608 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12609 0030 1348     		ldr	r0, .L1258+20
 247:src/display.c **** #ifndef REALBUILD
 12610              		.loc 1 247 31 view .LVU4092
 12611 0032 003C     		subs	r4, r4, #0
 247:src/display.c **** #ifndef REALBUILD
 12612              		.loc 1 247 31 view .LVU4093
 12613 0034 18BF     		it	ne
 12614 0036 0124     		movne	r4, #1
 12615              	.LVL1463:
 247:src/display.c **** #ifndef REALBUILD
 12616              		.loc 1 247 26 view .LVU4094
 12617 0038 64F30412 		bfi	r2, r4, #4, #1
 12618 003c DA75     		strb	r2, [r3, #23]
 249:src/display.c **** #endif
 12619              		.loc 1 249 7 is_stmt 1 view .LVU4095
 12620              	.LBE715:
 274:src/display.c **** 
 12621              		.loc 1 274 1 is_stmt 0 view .LVU4096
 12622 003e BDE83840 		pop	{r3, r4, r5, lr}
 12623              		.cfi_remember_state
 12624              		.cfi_restore 14
 12625              		.cfi_restore 5
 12626              		.cfi_restore 4
 12627              		.cfi_restore 3
 12628              		.cfi_def_cfa_offset 0
 12629              	.LVL1464:
 12630              	.LBB722:
 249:src/display.c **** #endif
 12631              		.loc 1 249 7 view .LVU4097
 12632 0042 FFF7FEBF 		b	scopy
 12633              	.LVL1465:
 12634              	.L1256:
ARM GAS  /tmp/ccSEf3H9.s 			page 354


 12635              		.cfi_restore_state
 237:src/display.c ****       DispMsg = p;
 12636              		.loc 1 237 5 is_stmt 1 view .LVU4098
 237:src/display.c ****       DispMsg = p;
 12637              		.loc 1 237 8 is_stmt 0 view .LVU4099
 12638 0046 582B     		cmp	r3, #88
 12639 0048 0DD1     		bne	.L1257
 238:src/display.c ****       frozen_display();
 12640              		.loc 1 238 7 is_stmt 1 view .LVU4100
 12641              	.LBB716:
 12642              	.LBB717:
3305:src/display.c **** 	display();
 12643              		.loc 1 3305 21 is_stmt 0 view .LVU4101
 12644 004a 0B4C     		ldr	r4, .L1258+12
 12645              	.LVL1466:
3305:src/display.c **** 	display();
 12646              		.loc 1 3305 21 view .LVU4102
 12647              	.LBE717:
 12648              	.LBE716:
 238:src/display.c ****       frozen_display();
 12649              		.loc 1 238 15 view .LVU4103
 12650 004c 0D4A     		ldr	r2, .L1258+24
 12651              	.LBB720:
 12652              	.LBB718:
3305:src/display.c **** 	display();
 12653              		.loc 1 3305 21 view .LVU4104
 12654 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12655              	.LBE718:
 12656              	.LBE720:
 238:src/display.c ****       frozen_display();
 12657              		.loc 1 238 15 view .LVU4105
 12658 0050 1560     		str	r5, [r2]
 239:src/display.c ****     }
 12659              		.loc 1 239 7 is_stmt 1 view .LVU4106
 12660              	.LBB721:
 12661              	.LBI716:
3303:src/display.c ****       {
 12662              		.loc 1 3303 12 view .LVU4107
 12663              	.LBB719:
3305:src/display.c **** 	display();
 12664              		.loc 1 3305 2 view .LVU4108
3305:src/display.c **** 	display();
 12665              		.loc 1 3305 21 is_stmt 0 view .LVU4109
 12666 0052 6FF30413 		bfc	r3, #4, #1
 12667 0056 E375     		strb	r3, [r4, #23]
3306:src/display.c **** 	State2.disp_freeze = 1;
 12668              		.loc 1 3306 2 is_stmt 1 view .LVU4110
 12669 0058 FFF7FEFF 		bl	display
 12670              	.LVL1467:
3307:src/display.c ****       }
 12671              		.loc 1 3307 2 view .LVU4111
3307:src/display.c ****       }
 12672              		.loc 1 3307 21 is_stmt 0 view .LVU4112
 12673 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12674 005e 43F01003 		orr	r3, r3, #16
 12675 0062 E375     		strb	r3, [r4, #23]
 12676              	.LVL1468:
ARM GAS  /tmp/ccSEf3H9.s 			page 355


 12677              	.L1247:
3307:src/display.c ****       }
 12678              		.loc 1 3307 21 view .LVU4113
 12679              	.LBE719:
 12680              	.LBE721:
 12681              	.LBE722:
 274:src/display.c **** 
 12682              		.loc 1 274 1 view .LVU4114
 12683 0064 38BD     		pop	{r3, r4, r5, pc}
 12684              	.LVL1469:
 12685              	.L1257:
 12686              	.LBB723:
 234:src/display.c ****     if (*q == '\0')
 12687              		.loc 1 234 17 view .LVU4115
 12688 0066 411C     		adds	r1, r0, #1
 12689 0068 DAE7     		b	.L1249
 12690              	.L1259:
 12691 006a 00BF     		.align	2
 12692              	.L1258:
 12693 006c 00000000 		.word	Running
 12694 0070 00000000 		.word	.LANCHOR27
 12695 0074 00000000 		.word	.LANCHOR26
 12696 0078 00000000 		.word	StateWhileOn
 12697 007c 00000000 		.word	.LANCHOR28
 12698 0080 00000000 		.word	LastDisplayedNumber
 12699 0084 00000000 		.word	DispMsg
 12700              	.LBE723:
 12701              		.cfi_endproc
 12702              	.LFE1:
 12704              		.section	.rodata.str1.4,"aMS",%progbits,1
 12705              		.align	2
 12706              	.LC40:
 12707 0000 06316306 		.ascii	"\0061c\006\006\000"
 12707      0600
 12708 0006 0000     		.align	2
 12709              	.LC41:
 12710 0008 756E0600 		.ascii	"un\006\000"
 12711              		.align	2
 12712              	.LC42:
 12713 000c 736D00   		.ascii	"sm\000"
 12714              		.set	CSWTCH.344,CSWTCH.342
 12715 000f 00       		.align	2
 12716              	.LC43:
 12717 0010 20502072 		.ascii	" P r o g r a m \000"
 12717      206F2067 
 12717      20722061 
 12717      206D2000 
 12718              		.align	2
 12719              	.LC44:
 12720 0020 206F2072 		.ascii	" o r   d a t e \000"
 12720      20202064 
 12720      20612074 
 12720      20652000 
 12721              		.align	2
 12722              	.LC45:
 12723 0030 204F2070 		.ascii	" O p - c o d e \000"
 12723      202D2063 
ARM GAS  /tmp/ccSEf3H9.s 			page 356


 12723      206F2064 
 12723      20652000 
 12724              		.align	2
 12725              	.LC46:
 12726 0040 204C2061 		.ascii	" L a b e l \000"
 12726      20622065 
 12726      206C2000 
 12727              		.align	2
 12728              	.LC47:
 12729 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12729      20652072 
 12729      20612074 
 12729      2069206F 
 12729      206E2000 
 12730              		.align	2
 12731              	.LC48:
 12732 0060 20462075 		.ascii	" F u l l \000"
 12732      206C206C 
 12732      2000
 12733 006a 0000     		.align	2
 12734              	.LC49:
 12735 006c 2043206C 		.ascii	" C l a s h \000"
 12735      20612073 
 12735      20682000 
 12736              		.align	2
 12737              	.LC50:
 12738 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12738      206F2020 
 12738      2073206D 
 12738      2061206C 
 12738      206C2000 
 12739              		.align	2
 12740              	.LC51:
 12741 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12741      20742061 
 12741      20202070 
 12741      206F2069 
 12741      206E2074 
 12742              		.align	2
 12743              	.LC52:
 12744 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12744      20722061 
 12744      206D2065 
 12744      20742065 
 12744      20722000 
 12745              		.align	2
 12746              	.LC53:
 12747 00b8 20442061 		.ascii	" D a t a \000"
 12747      20742061 
 12747      2000
 12748 00c2 0000     		.align	2
 12749              	.LC54:
 12750 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12750      206F2074 
 12750      20652063 
 12750      20742065 
 12750      20642000 
ARM GAS  /tmp/ccSEf3H9.s 			page 357


 12751              		.align	2
 12752              	.LC55:
 12753 00d8 2046206F 		.ascii	" F o u n d \000"
 12753      2075206E 
 12753      20642000 
 12754              		.align	2
 12755              	.LC56:
 12756 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12756      2073206D 
 12756      20612074 
 12756      20632068 
 12756      2000
 12757 00f6 0000     		.align	2
 12758              	.LC57:
 12759 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12759      20732074 
 12759      2061206C 
 12759      206C2065 
 12759      20642000 
 12760              		.global	DIGITS
 12761              		.comm	IoAnnunciator,4,4
 12762              		.comm	IntMaxWindow,4,4
 12763              		.comm	JustDisplayed,4,4
 12764              		.comm	ShowRPN,4,4
 12765              		.comm	forceDispPlot,1,1
 12766              		.comm	LastDisplayedExponent,5,4
 12767              		.comm	LastDisplayedNumber,26,4
 12768              		.comm	LastDisplayedText,31,4
 12769              		.global	no_status_top
 12770              		.comm	DispPlot,2,2
 12771              		.comm	DispMsg,4,4
 12772              		.global	SvnRevision
 12773              		.section	.rodata
 12774              		.align	2
 12775              		.set	.LANCHOR17,. + 0
 12776              	.LC15:
 12777 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12777      22002E00 
 12777      00
 12778 0009 000000   		.space	3
 12779              	.LC19:
 12780 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12780      332E3306 
 12780      0600
 12781 0016 00000000 		.space	4
 12782 001a 0000     		.space	2
 12783              	.LC58:
 12784 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12784      696E6700 
 12784      50726F47 
 12784      72614D6D 
 12784      00
 12785 002d 000000   		.space	3
 12786              	.LC59:
 12787 0030 446F6D61 		.ascii	"Domain\000\000"
 12787      696E0000 
 12788              	.LC60:
ARM GAS  /tmp/ccSEf3H9.s 			page 358


 12789 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12789      74696D65 
 12789      006F7220 
 12789      64417445 
 12789      00
 12790 0049 000000   		.space	3
 12791              	.LC61:
 12792 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12792      66696E65 
 12792      64004F70 
 12792      2D434F64 
 12792      4500
 12793 005e 0000     		.space	2
 12794              	.LC62:
 12795 0060 2B9F0000 		.ascii	"+\237\000\000"
 12796              	.LC63:
 12797 0064 2D9F0000 		.ascii	"-\237\000\000"
 12798              	.LC64:
 12799 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12799      75636800 
 12799      4C416245 
 12799      4C00
 12800 0076 0000     		.space	2
 12801              	.LC65:
 12802 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12802      67616C00 
 12802      4F504572 
 12802      4174696F 
 12802      6E00
 12803 008a 0000     		.space	2
 12804              	.LC66:
 12805 008c 4F757420 		.ascii	"Out of range\000\000"
 12805      6F662072 
 12805      616E6765 
 12805      0000
 12806 009a 0000     		.space	2
 12807              	.LC67:
 12808 009c 42616420 		.ascii	"Bad digit\000\000"
 12808      64696769 
 12808      740000
 12809 00a7 00       		.space	1
 12810              	.LC68:
 12811 00a8 546F6F20 		.ascii	"Too long\000\000"
 12811      6C6F6E67 
 12811      0000
 12812 00b2 0000     		.space	2
 12813              	.LC69:
 12814 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12814      69730046 
 12814      754C4C00 
 12815              	.LC70:
 12816 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12816      6B00434C 
 12816      41534800 
 12817              	.LC71:
 12818 00cc 42616420 		.ascii	"Bad mode\000\000"
 12818      6D6F6465 
ARM GAS  /tmp/ccSEf3H9.s 			page 359


 12818      0000
 12819 00d6 0000     		.space	2
 12820              	.LC72:
 12821 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12821      06060673 
 12821      697A6500 
 12821      746F6F20 
 12821      534D6D41 
 12822 00ef 00       		.space	1
 12823              	.LC73:
 12824 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12824      66657700 
 12824      64417441 
 12824      20506F69 
 12824      6E745300 
 12825              	.LC74:
 12826 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12826      6C696400 
 12826      50617261 
 12826      4D6D4574 
 12826      457200
 12827 0117 00       		.space	1
 12828              	.LC75:
 12829 0118 492F4F00 		.ascii	"I/O\000\000"
 12829      00
 12830 011d 000000   		.space	3
 12831              	.LC76:
 12832 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12832      6C696400 
 12832      64417441 
 12832      00
 12833 012d 000000   		.space	3
 12834              	.LC77:
 12835 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12835      65005072 
 12835      6F744563 
 12835      74456400 
 12836              	.LC78:
 12837 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12837      6F6F7400 
 12837      466F756E 
 12837      6400
 12838 014e 0000     		.space	2
 12839              	.LC79:
 12840 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12840      6978004D 
 12840      6D49534D 
 12840      6D417443 
 12840      4800
 12841 0162 0000     		.space	2
 12842              	.LC80:
 12843 0164 53696E67 		.ascii	"Singular\000\000"
 12843      756C6172 
 12843      0000
 12844 016e 0000     		.space	2
 12845              	.LC81:
 12846 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
ARM GAS  /tmp/ccSEf3H9.s 			page 360


 12846      68206973 
 12846      0046754C 
 12846      4C00
 12847 017e 0000     		.space	2
 12848              	.LC82:
 12849 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12849      72797374 
 12849      616C0049 
 12849      6E537461 
 12849      4C4C4564 
 12850 0195 000000   		.space	3
 12851              	.LC83:
 12852 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12852      5800
 12853              		.section	.bss.DecimalMode,"aw",%nobits
 12854              		.set	.LANCHOR1,. + 0
 12857              	DecimalMode:
 12858 0000 00       		.space	1
 12859              		.section	.bss.SeparatorMode,"aw",%nobits
 12860              		.set	.LANCHOR0,. + 0
 12863              	SeparatorMode:
 12864 0000 00       		.space	1
 12865              		.section	.bss.no_status_top,"aw",%nobits
 12866              		.align	1
 12867              		.set	.LANCHOR18,. + 0
 12870              	no_status_top:
 12871 0000 0000     		.space	2
 12872              		.section	.rodata.CSWTCH.342,"a"
 12873              		.align	2
 12874              		.set	.LANCHOR11,. + 0
 12877              	CSWTCH.342:
 12878 0000 02000000 		.word	2
 12879 0004 08000000 		.word	8
 12880 0008 0A000000 		.word	10
 12881 000c 10000000 		.word	16
 12882              		.section	.rodata.CSWTCH.369,"a"
 12883              		.align	2
 12884              		.set	.LANCHOR16,. + 0
 12887              	CSWTCH.369:
 12888 0000 00000000 		.word	.LC40
 12889 0004 08000000 		.word	.LC41
 12890 0008 0C000000 		.word	.LC42
 12891              		.section	.rodata.DIGITS,"a"
 12892              		.align	2
 12893              		.set	.LANCHOR12,. + 0
 12896              	DIGITS:
 12897 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12897      34353637 
 12897      38394142 
 12897      43444546 
 12897      00
 12898              		.section	.rodata.S7_ERROR,"a"
 12899              		.align	2
 12900              		.set	.LANCHOR26,. + 0
 12903              	S7_ERROR:
 12904 0000 4572726F 		.ascii	"Error\000"
 12904      7200
ARM GAS  /tmp/ccSEf3H9.s 			page 361


 12905              		.section	.rodata.S7_INF,"a"
 12906              		.align	2
 12907              		.set	.LANCHOR5,. + 0
 12910              	S7_INF:
 12911 0000 496E6669 		.ascii	"Infinity\000"
 12911      6E697479 
 12911      00
 12912              		.section	.rodata.S7_INF_Text,"a"
 12913              		.align	2
 12914              		.set	.LANCHOR7,. + 0
 12917              	S7_INF_Text:
 12918 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12918      20662069 
 12918      206E2069 
 12918      20742079 
 12918      2000
 12919              		.section	.rodata.S7_NEG_INF_Text,"a"
 12920              		.align	2
 12921              		.set	.LANCHOR6,. + 0
 12924              	S7_NEG_INF_Text:
 12925 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12925      20662069 
 12925      206E2069 
 12925      20742079 
 12925      2000
 12926              		.section	.rodata.S7_NaN,"a"
 12927              		.align	2
 12928              		.set	.LANCHOR3,. + 0
 12931              	S7_NaN:
 12932 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12932      6E754D6D 
 12932      45726963 
 12932      00
 12933              		.section	.rodata.S7_NaN_Text,"a"
 12934              		.align	2
 12935              		.set	.LANCHOR4,. + 0
 12938              	S7_NaN_Text:
 12939 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12939      20742020 
 12939      206E2075 
 12939      206D2065 
 12939      20722069 
 12940              		.section	.rodata.S7_STEP,"a"
 12941              		.align	2
 12942              		.set	.LANCHOR25,. + 0
 12945              	S7_STEP:
 12946 0000 53744550 		.ascii	"StEP \000"
 12946      2000
 12947              		.section	.rodata.S7_STEP_ShortText,"a"
 12948              		.align	2
 12949              		.set	.LANCHOR19,. + 0
 12952              	S7_STEP_ShortText:
 12953 0000 53544550 		.ascii	"STEP\000"
 12953      00
 12954              		.section	.rodata.S7_fract_EQ,"a"
 12955              		.align	2
 12956              		.set	.LANCHOR9,. + 0
ARM GAS  /tmp/ccSEf3H9.s 			page 362


 12959              	S7_fract_EQ:
 12960 0000 203D2000 		.ascii	" = \000"
 12961              		.section	.rodata.S7_fract_GT,"a"
 12962              		.align	2
 12963              		.set	.LANCHOR10,. + 0
 12966              	S7_fract_GT:
 12967 0000 20477400 		.ascii	" Gt\000"
 12968              		.section	.rodata.S7_fract_LT,"a"
 12969              		.align	2
 12970              		.set	.LANCHOR8,. + 0
 12973              	S7_fract_LT:
 12974 0000 204C7400 		.ascii	" Lt\000"
 12975              		.section	.rodata.S_SURE,"a"
 12976              		.align	2
 12977              		.set	.LANCHOR21,. + 0
 12980              	S_SURE:
 12981 0000 53757265 		.ascii	"Sure?\000"
 12981      3F00
 12982              		.section	.rodata.SvnRevision,"a"
 12983              		.align	2
 12984              		.set	.LANCHOR20,. + 0
 12987              	SvnRevision:
 12988 0000 30202020 		.ascii	"0   "
 12989              		.section	.rodata.digtbl,"a"
 12990              		.align	2
 12991              		.set	.LANCHOR2,. + 0
 12994              	digtbl:
 12995 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12995      02421252 
 12995      2D000000 
 12995      00000000 
 12995      00
 12996 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12996      00000017 
 12996      01000000 
 12996      00
 12997 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12997      28000000 
 12997      0020664B 
 12997      00000010 
 12998 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12998      5E5B3973 
 12998      77497F7B 
 12998      00000612 
 12998      0300787D 
 12999 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12999      673D240F 
 12999      75266C6D 
 12999      6F7C7914 
 12999      73362F00 
 13000 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13000      161F7674 
 13000      6735040F 
 13000      75266915 
 13000      177C7914 
 13001 0076 000F003B 		.ascii	"\000\017\000;"
 13002              		.section	.rodata.error_table.8535,"a"
ARM GAS  /tmp/ccSEf3H9.s 			page 363


 13003              		.align	2
 13004              		.set	.LANCHOR27,. + 0
 13007              	error_table.8535:
 13008 0000 1C000000 		.word	.LC58
 13009 0004 30000000 		.word	.LC59
 13010 0008 38000000 		.word	.LC60
 13011 000c 4C000000 		.word	.LC61
 13012 0010 60000000 		.word	.LC62
 13013 0014 64000000 		.word	.LC63
 13014 0018 68000000 		.word	.LC64
 13015 001c 78000000 		.word	.LC65
 13016 0020 8C000000 		.word	.LC66
 13017 0024 9C000000 		.word	.LC67
 13018 0028 A8000000 		.word	.LC68
 13019 002c B4000000 		.word	.LC69
 13020 0030 C0000000 		.word	.LC70
 13021 0034 CC000000 		.word	.LC71
 13022 0038 D8000000 		.word	.LC72
 13023 003c F0000000 		.word	.LC73
 13024 0040 04010000 		.word	.LC74
 13025 0044 18010000 		.word	.LC75
 13026 0048 20010000 		.word	.LC76
 13027 004c 30010000 		.word	.LC77
 13028 0050 40010000 		.word	.LC78
 13029 0054 50010000 		.word	.LC79
 13030 0058 64010000 		.word	.LC80
 13031 005c 70010000 		.word	.LC81
 13032 0060 80010000 		.word	.LC82
 13033 0064 98010000 		.word	.LC83
 13034              		.section	.rodata.error_table_text.8536,"a"
 13035              		.align	2
 13036              		.set	.LANCHOR28,. + 0
 13039              	error_table_text.8536:
 13040 0000 10000000 		.word	.LC43
 13041 0004 A8000000 		.word	.LC38
 13042 0008 20000000 		.word	.LC44
 13043 000c 30000000 		.word	.LC45
 13044 0010 A8000000 		.word	.LC38
 13045 0014 A8000000 		.word	.LC38
 13046 0018 40000000 		.word	.LC46
 13047 001c 4C000000 		.word	.LC47
 13048 0020 A8000000 		.word	.LC38
 13049 0024 A8000000 		.word	.LC38
 13050 0028 A8000000 		.word	.LC38
 13051 002c 60000000 		.word	.LC48
 13052 0030 6C000000 		.word	.LC49
 13053 0034 A8000000 		.word	.LC38
 13054 0038 78000000 		.word	.LC50
 13055 003c 8C000000 		.word	.LC51
 13056 0040 A4000000 		.word	.LC52
 13057 0044 A8000000 		.word	.LC38
 13058 0048 B8000000 		.word	.LC53
 13059 004c C4000000 		.word	.LC54
 13060 0050 D8000000 		.word	.LC55
 13061 0054 E4000000 		.word	.LC56
 13062 0058 A8000000 		.word	.LC38
 13063 005c 60000000 		.word	.LC48
ARM GAS  /tmp/ccSEf3H9.s 			page 364


 13064 0060 F8000000 		.word	.LC57
 13065 0064 A8000000 		.word	.LC38
 13066              		.section	.rodata.libname,"a"
 13067              		.align	2
 13068              		.set	.LANCHOR22,. + 0
 13071              	libname:
 13072 0000 72414D6D 		.ascii	"rAMm\000"
 13072      00
 13073 0005 4C696220 		.ascii	"Lib \000"
 13073      00
 13074 000a 42757020 		.ascii	"Bup \000"
 13074      00
 13075 000f 726F4D6D 		.ascii	"roMm\000"
 13075      00
 13076              		.section	.rodata.libname_shorttext,"a"
 13077              		.align	2
 13078              		.set	.LANCHOR24,. + 0
 13081              	libname_shorttext:
 13082 0000 52616D00 		.ascii	"Ram\000"
 13083 0004 00       		.space	1
 13084 0005 4C696200 		.ascii	"Lib\000"
 13085 0009 00       		.space	1
 13086 000a 42757000 		.ascii	"Bup\000"
 13087 000e 00       		.space	1
 13088 000f 526F6D00 		.ascii	"Rom\000"
 13089 0013 00       		.space	1
 13090              		.section	.rodata.libname_text,"a"
 13091              		.align	2
 13092              		.set	.LANCHOR23,. + 0
 13095              	libname_text:
 13096 0000 20522061 		.ascii	" R a m \000"
 13096      206D2000 
 13097 0008 0000     		.space	2
 13098 000a 204C2069 		.ascii	" L i b \000"
 13098      20622000 
 13099 0012 0000     		.space	2
 13100 0014 20422075 		.ascii	" B u p \000"
 13100      20702000 
 13101 001c 0000     		.space	2
 13102 001e 2052206F 		.ascii	" R o m \000"
 13102      206D2000 
 13103 0026 0000     		.space	2
 13104              		.section	.rodata.shift_chars.8639,"a"
 13105              		.align	2
 13106              		.set	.LANCHOR15,. + 0
 13109              	shift_chars.8639:
 13110 0000 20111213 		.ascii	" \021\022\023"
 13111              		.section	.rodata.small_dots.8840,"a"
 13112              		.align	2
 13113              		.set	.LANCHOR14,. + 0
 13116              	small_dots.8840:
 13117 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13117      07E12C06 
 13117      07E12C06 
 13117      06
 13118              		.section	.rodata.small_minus.8839,"a"
 13119              		.align	2
ARM GAS  /tmp/ccSEf3H9.s 			page 365


 13120              		.set	.LANCHOR13,. + 0
 13123              	small_minus.8839:
 13124 0000 07C22D06 		.ascii	"\007\302-\006"
 13125              		.text
 13126              	.Letext0:
 13127              		.file 2 "src/decNumber/decContext.h"
 13128              		.file 3 "src/decNumber/decNumber.h"
 13129              		.file 4 "src/decNumber/decimal64.h"
 13130              		.file 5 "src/decNumber/decimal128.h"
 13131              		.file 6 "src/xeq.h"
 13132              		.file 7 "src/data.h"
 13133              		.file 8 "src/storage.h"
 13134              		.file 9 "src/display.h"
 13135              		.file 10 "src/consts.h"
 13136              		.file 11 "src/stats.h"
 13137              		.file 12 "src/revision.h"
 13138              		.file 13 "src/charset7.h"
 13139              		.file 14 "src/lcd.h"
 13140              		.file 15 "src/decn.h"
 13141              		.file 16 "src/alpha.h"
 13142              		.file 17 "src/int.h"
ARM GAS  /tmp/ccSEf3H9.s 			page 366


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccSEf3H9.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccSEf3H9.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccSEf3H9.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccSEf3H9.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccSEf3H9.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccSEf3H9.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccSEf3H9.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccSEf3H9.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccSEf3H9.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccSEf3H9.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccSEf3H9.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccSEf3H9.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccSEf3H9.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccSEf3H9.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccSEf3H9.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccSEf3H9.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccSEf3H9.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccSEf3H9.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/ccSEf3H9.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/ccSEf3H9.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/ccSEf3H9.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccSEf3H9.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccSEf3H9.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccSEf3H9.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/ccSEf3H9.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccSEf3H9.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/ccSEf3H9.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/ccSEf3H9.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccSEf3H9.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccSEf3H9.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccSEf3H9.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccSEf3H9.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccSEf3H9.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/ccSEf3H9.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccSEf3H9.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccSEf3H9.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/ccSEf3H9.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccSEf3H9.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/ccSEf3H9.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccSEf3H9.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccSEf3H9.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/ccSEf3H9.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccSEf3H9.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/ccSEf3H9.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/ccSEf3H9.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccSEf3H9.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.342:0000000000000000 CSWTCH.344
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccSEf3H9.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/ccSEf3H9.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/ccSEf3H9.s:3962   .text.set_annunciators:0000000000000000 $t
ARM GAS  /tmp/ccSEf3H9.s 			page 367


     /tmp/ccSEf3H9.s:3969   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccSEf3H9.s:4342   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccSEf3H9.s:4354   .text.getdig:0000000000000000 $t
     /tmp/ccSEf3H9.s:4362   .text.getdig:0000000000000000 getdig
     /tmp/ccSEf3H9.s:4382   .text.getdig:0000000000000008 $d
     /tmp/ccSEf3H9.s:4387   .text.dot:0000000000000000 $t
     /tmp/ccSEf3H9.s:4395   .text.dot:0000000000000000 dot
     /tmp/ccSEf3H9.s:4418   .text.std_round_fix:0000000000000000 $t
     /tmp/ccSEf3H9.s:4426   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccSEf3H9.s:4583   .text.std_round_fix:0000000000000078 $d
     /tmp/ccSEf3H9.s:4588   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccSEf3H9.s:4596   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccSEf3H9.s:4656   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccSEf3H9.s:4663   .text.pixel_length:0000000000000000 $t
     /tmp/ccSEf3H9.s:4671   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccSEf3H9.s:4762   .text.set_status:0000000000000000 $t
     /tmp/ccSEf3H9.s:4769   .text.set_status:0000000000000000 set_status
     /tmp/ccSEf3H9.s:4842   .text.set_status:0000000000000038 $d
     /tmp/ccSEf3H9.s:4847   .text.set_x_dn:0000000000000000 $t
     /tmp/ccSEf3H9.s:4855   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccSEf3H9.s:5643   .text.set_x_dn:0000000000000358 $d
     /tmp/ccSEf3H9.s:5650   .text.set_x_dn:0000000000000368 $t
     /tmp/ccSEf3H9.s:5803   .text.set_x_dn:0000000000000414 $d
     /tmp/ccSEf3H9.s:5809   .text.set_x_dn:000000000000041e $t
     /tmp/ccSEf3H9.s:5835   .text.set_x_dn:000000000000044a $d
     /tmp/ccSEf3H9.s:5841   .text.set_x_dn:0000000000000454 $t
     /tmp/ccSEf3H9.s:6431   .text.set_x_dn:00000000000006e0 $d
     /tmp/ccSEf3H9.s:6447   .text.set_x_dn:00000000000006fc $t
     /tmp/ccSEf3H9.s:7164   .text.set_x_dn:00000000000009d8 $d
     /tmp/ccSEf3H9.s:7173   .text.set_x:0000000000000000 $t
     /tmp/ccSEf3H9.s:7180   .text.set_x:0000000000000000 set_x
     /tmp/ccSEf3H9.s:7248   .text.format_reg:0000000000000000 $t
     /tmp/ccSEf3H9.s:7256   .text.format_reg:0000000000000000 format_reg
     /tmp/ccSEf3H9.s:7375   .text.format_reg:0000000000000064 $d
     /tmp/ccSEf3H9.s:7381   .text.set_status_right:0000000000000000 $t
     /tmp/ccSEf3H9.s:7388   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccSEf3H9.s:7532   .text.set_status_right:000000000000006c $d
     /tmp/ccSEf3H9.s:7537   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccSEf3H9.s:7544   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccSEf3H9.s:7669   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccSEf3H9.s:7674   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccSEf3H9.s:7717   .text.annunciators:0000000000000000 $t
     /tmp/ccSEf3H9.s:7724   .text.annunciators:0000000000000000 annunciators
     /tmp/ccSEf3H9.s:8395   .text.annunciators:0000000000000304 $d
     /tmp/ccSEf3H9.s:8416   .text.annunciators:0000000000000340 $t
     /tmp/ccSEf3H9.s:8808   .text.annunciators:00000000000004c8 $d
     /tmp/ccSEf3H9.s:8824   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccSEf3H9.s:8891   .text.display:0000000000000000 $t
     /tmp/ccSEf3H9.s:8899   .text.display:0000000000000000 display
     /tmp/ccSEf3H9.s:9585   .text.display:0000000000000310 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccSEf3H9.s:9604   .text.display:0000000000000350 $t
     /tmp/ccSEf3H9.s:10321  .text.display:0000000000000630 $d
     /tmp/ccSEf3H9.s:10348  .text.display:0000000000000680 $t
ARM GAS  /tmp/ccSEf3H9.s 			page 368


     /tmp/ccSEf3H9.s:11242  .text.display:00000000000009c0 $d
     /tmp/ccSEf3H9.s:11262  .text.display:00000000000009f0 $t
     /tmp/ccSEf3H9.s:12029  .text.display:0000000000000cf8 $d
     /tmp/ccSEf3H9.s:12048  .text.display:0000000000000d2c $t
     /tmp/ccSEf3H9.s:12338  .text.display:0000000000000e50 $d
     /tmp/ccSEf3H9.s:12354  .text.frozen_display:0000000000000000 $t
     /tmp/ccSEf3H9.s:12362  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccSEf3H9.s:12392  .text.frozen_display:000000000000001c $d
     /tmp/ccSEf3H9.s:12397  .text.message:0000000000000000 $t
     /tmp/ccSEf3H9.s:12405  .text.message:0000000000000000 message
     /tmp/ccSEf3H9.s:12534  .text.message:0000000000000060 $d
     /tmp/ccSEf3H9.s:12542  .text.error_message:0000000000000000 $t
     /tmp/ccSEf3H9.s:12550  .text.error_message:0000000000000000 error_message
     /tmp/ccSEf3H9.s:12693  .text.error_message:000000000000006c $d
     /tmp/ccSEf3H9.s:12705  .rodata.str1.4:0000000000000000 $d
     /tmp/ccSEf3H9.s:12877  .rodata.CSWTCH.342:0000000000000000 CSWTCH.342
     /tmp/ccSEf3H9.s:12896  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccSEf3H9.s:12870  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccSEf3H9.s:12987  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccSEf3H9.s:12774  .rodata:0000000000000000 $d
     /tmp/ccSEf3H9.s:12857  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccSEf3H9.s:12858  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccSEf3H9.s:12863  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccSEf3H9.s:12864  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccSEf3H9.s:12866  .bss.no_status_top:0000000000000000 $d
     /tmp/ccSEf3H9.s:12873  .rodata.CSWTCH.342:0000000000000000 $d
     /tmp/ccSEf3H9.s:12883  .rodata.CSWTCH.369:0000000000000000 $d
     /tmp/ccSEf3H9.s:12887  .rodata.CSWTCH.369:0000000000000000 CSWTCH.369
     /tmp/ccSEf3H9.s:12892  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccSEf3H9.s:12899  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccSEf3H9.s:12903  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccSEf3H9.s:12906  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccSEf3H9.s:12910  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccSEf3H9.s:12913  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccSEf3H9.s:12917  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccSEf3H9.s:12920  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccSEf3H9.s:12924  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccSEf3H9.s:12927  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccSEf3H9.s:12931  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccSEf3H9.s:12934  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccSEf3H9.s:12938  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccSEf3H9.s:12941  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccSEf3H9.s:12945  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccSEf3H9.s:12948  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccSEf3H9.s:12952  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccSEf3H9.s:12955  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccSEf3H9.s:12959  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccSEf3H9.s:12962  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccSEf3H9.s:12966  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccSEf3H9.s:12969  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccSEf3H9.s:12973  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccSEf3H9.s:12976  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccSEf3H9.s:12980  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccSEf3H9.s:12983  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccSEf3H9.s:12990  .rodata.digtbl:0000000000000000 $d
     /tmp/ccSEf3H9.s:12994  .rodata.digtbl:0000000000000000 digtbl
ARM GAS  /tmp/ccSEf3H9.s 			page 369


     /tmp/ccSEf3H9.s:13003  .rodata.error_table.8535:0000000000000000 $d
     /tmp/ccSEf3H9.s:13007  .rodata.error_table.8535:0000000000000000 error_table.8535
     /tmp/ccSEf3H9.s:13035  .rodata.error_table_text.8536:0000000000000000 $d
     /tmp/ccSEf3H9.s:13039  .rodata.error_table_text.8536:0000000000000000 error_table_text.8536
     /tmp/ccSEf3H9.s:13067  .rodata.libname:0000000000000000 $d
     /tmp/ccSEf3H9.s:13071  .rodata.libname:0000000000000000 libname
     /tmp/ccSEf3H9.s:13077  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccSEf3H9.s:13081  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccSEf3H9.s:13091  .rodata.libname_text:0000000000000000 $d
     /tmp/ccSEf3H9.s:13095  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccSEf3H9.s:13105  .rodata.shift_chars.8639:0000000000000000 $d
     /tmp/ccSEf3H9.s:13109  .rodata.shift_chars.8639:0000000000000000 shift_chars.8639
     /tmp/ccSEf3H9.s:13112  .rodata.small_dots.8840:0000000000000000 $d
     /tmp/ccSEf3H9.s:13116  .rodata.small_dots.8840:0000000000000000 small_dots.8840
     /tmp/ccSEf3H9.s:13119  .rodata.small_minus.8839:0000000000000000 $d
     /tmp/ccSEf3H9.s:13123  .rodata.small_minus.8839:0000000000000000 small_minus.8839

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
ARM GAS  /tmp/ccSEf3H9.s 			page 370


word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
current_catalogue
catcmd
get_const
getprog
prt
multicmds
find_label_from
free_mem
free_flash
findmultilbl
slen
global_regs
alpha_rcl_s
SizeStatRegs
local_regs
copyreg
sigma_val
getX
packed_from_number
ARM GAS  /tmp/ccSEf3H9.s 			page 371


set_NaN
do_conv
StackBase
monfuncs

ARM GAS  /tmp/ccW65oEM.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccW65oEM.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** 
  43:src/display.c **** static void set_status_right(const char *);
  44:src/display.c **** static void set_status_graphic(const unsigned char *);
  45:src/display.c **** 
  46:src/display.c **** const char *DispMsg; // What to display in message area
  47:src/display.c **** 
  48:src/display.c **** short int DispPlot;
  49:src/display.c **** #ifndef REALBUILD
  50:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  51:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  52:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  53:src/display.c **** char forceDispPlot;
  54:src/display.c **** #endif
  55:src/display.c **** 
  56:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  57:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  58:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  59:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  60:src/display.c **** 
  61:src/display.c **** /* Message strings
  62:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  63:src/display.c ****  * are for the upper dot matrix line.
  64:src/display.c ****  */
  65:src/display.c **** static const char S_SURE[] = "Sure?";
  66:src/display.c **** 
  67:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  68:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  69:src/display.c **** #ifndef REALBUILD
  70:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  71:src/display.c **** #endif
  72:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  73:src/display.c **** #ifndef REALBUILD
  74:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  75:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  76:src/display.c **** #endif
  77:src/display.c **** 
  78:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  79:src/display.c **** #ifndef REALBUILD
  80:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  81:src/display.c **** #endif
  82:src/display.c **** 
  83:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  84:src/display.c **** static const char S7_fract_LT[] = " Lt";
  85:src/display.c **** static const char S7_fract_GT[] = " Gt";
  86:src/display.c **** 
  87:src/display.c **** static const char libname[][5] = {
ARM GAS  /tmp/ccW65oEM.s 			page 3


  88:src/display.c ****   "rAMm", "Lib ", "Bup ",
  89:src/display.c **** #ifndef REALBUILD
  90:src/display.c ****   "roMm"
  91:src/display.c **** #endif
  92:src/display.c **** };
  93:src/display.c **** 
  94:src/display.c **** #ifndef REALBUILD
  95:src/display.c **** static const char libname_text[][10] = {
  96:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
  97:src/display.c **** };
  98:src/display.c **** static const char libname_shorttext[][5] = {
  99:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 100:src/display.c **** };
 101:src/display.c **** #endif
 102:src/display.c **** 
 103:src/display.c **** 
 104:src/display.c **** /* Set the separator and decimal mode globals
 105:src/display.c ****  */
 106:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 106 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 107:src/display.c ****   // Separators used by various modes
 108:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 108 3 view .LVU1
  35              		.loc 1 108 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 109:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 109 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 108:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 108 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 108:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 108 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 106:src/display.c ****   // Separators used by various modes
  44              		.loc 1 106 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 108:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 108 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 109 5 is_stmt 1 view .LVU8
 110:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 110 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 111:src/display.c ****   }
 112:src/display.c ****   else {
 113:src/display.c ****     SeparatorMode = SEP_COMMA;
 114:src/display.c ****     DecimalMode = DECIMAL_DOT;
 115:src/display.c ****   }
ARM GAS  /tmp/ccW65oEM.s 			page 4


 116:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 116 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 110:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 110 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 109:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 109 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 110:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 110 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 116 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 109:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 109 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 110:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 110 5 is_stmt 1 view .LVU16
  67              		.loc 1 116 3 view .LVU17
  68              		.loc 1 116 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 116 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 117:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 117 5 is_stmt 1 view .LVU20
  76              		.loc 1 117 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 118:src/display.c **** }
  80              		.loc 1 118 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 113:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 113 5 is_stmt 1 view .LVU23
 114:src/display.c ****   }
  90              		.loc 1 114 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 116:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 116 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 114:src/display.c ****   }
  94              		.loc 1 114 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 113:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 113 19 view .LVU27
  97 0038 0125     		movs	r5, #1
ARM GAS  /tmp/ccW65oEM.s 			page 5


 116:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 116 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 113:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 113 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 114:src/display.c ****   }
 102              		.loc 1 114 5 is_stmt 1 view .LVU30
 116:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 116 3 view .LVU31
 116:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 116 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 116:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 116 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 118 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 119:src/display.c **** 
 120:src/display.c **** 
 121:src/display.c **** /* Table of error messages.
 122:src/display.c ****  * These consist of a double string.  The first is displayed in the
 123:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 124:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 125:src/display.c ****  */
 126:src/display.c **** void error_message(const unsigned int e) 
 127:src/display.c **** {
 128:src/display.c **** #define MSG1(top) top "\0"
 129:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 130:src/display.c **** 
 131:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 132:src/display.c ****   static const char *const error_table[] = 
 133:src/display.c ****     {
ARM GAS  /tmp/ccW65oEM.s 			page 6


 134:src/display.c ****       // manually get the order correct!
 135:src/display.c ****       MSG2("Running", "ProGraMm"),
 136:src/display.c ****       MSG1("Domain"),
 137:src/display.c ****       MSG2("Bad time", "or dAtE"),
 138:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 139:src/display.c ****       MSG1("+\237"),
 140:src/display.c ****       MSG1("-\237"),
 141:src/display.c ****       MSG2("No such", "LAbEL"),
 142:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 143:src/display.c ****       MSG1("Out of range"),
 144:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 145:src/display.c ****       MSG2("Bad digit", "1"),
 146:src/display.c ****       MSG2("Too long", "1"),
 147:src/display.c **** #else
 148:src/display.c ****       MSG1("Bad digit"),
 149:src/display.c ****       MSG1("Too long"),
 150:src/display.c **** #endif
 151:src/display.c ****       MSG2("RAM is", "FuLL"),
 152:src/display.c ****       MSG2("Stack", "CLASH"),
 153:src/display.c ****       MSG1("Bad mode"),
 154:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 155:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 156:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 157:src/display.c ****       MSG1("I/O"),
 158:src/display.c ****       MSG2("Invalid", "dAtA"),
 159:src/display.c ****       MSG2("Write", "ProtEctEd"),
 160:src/display.c ****       MSG2("No root", "Found"),
 161:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 162:src/display.c ****       MSG1("Singular"),
 163:src/display.c ****       MSG2("Flash is", "FuLL"),
 164:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 165:src/display.c **** #ifndef SHIFT_EXPONENT
 166:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 167:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 168:src/display.c ****       MSG2("Too\007\304 small", "1"),
 169:src/display.c **** #     else
 170:src/display.c ****       MSG2("Too small", "1"),
 171:src/display.c **** #     endif
 172:src/display.c ****       MSG2("Too big", "1"),
 173:src/display.c **** #  else
 174:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 175:src/display.c ****       MSG1("Too\007\304 small"),
 176:src/display.c **** #     else
 177:src/display.c ****       MSG1("Too small"),
 178:src/display.c **** #     endif
 179:src/display.c ****       MSG1("Too big"),
 180:src/display.c **** #  endif
 181:src/display.c **** #endif
 182:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 183:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 184:src/display.c ****       MSG2("Interrupted", "X"),
 185:src/display.c **** #endif
 186:src/display.c ****     };
 187:src/display.c **** #undef MSG1
 188:src/display.c **** #undef MSG2
 189:src/display.c **** #ifndef REALBUILD
 190:src/display.c ****   static const char *const error_table_text[] =
ARM GAS  /tmp/ccW65oEM.s 			page 7


 191:src/display.c ****     {
 192:src/display.c ****       " P r o g r a m ",
 193:src/display.c ****       "",
 194:src/display.c ****       " o r   d a t e ",
 195:src/display.c ****       " O p - c o d e ",
 196:src/display.c ****       "",
 197:src/display.c ****       "",
 198:src/display.c ****       " L a b e l ",
 199:src/display.c ****       " O p e r a t i o n ",
 200:src/display.c ****       "",
 201:src/display.c ****       "",
 202:src/display.c ****       "",
 203:src/display.c ****       " F u l l ",
 204:src/display.c ****       " C l a s h ",
 205:src/display.c ****       "",
 206:src/display.c ****       " T o o   s m a l l ",
 207:src/display.c ****       " D a t a   p o i n t s ",
 208:src/display.c ****       " P a r a m e t e r ",
 209:src/display.c ****       "",
 210:src/display.c ****       " D a t a ",
 211:src/display.c ****       " P r o t e c t e d ",
 212:src/display.c ****       " F o u n d ",
 213:src/display.c ****       " M i s m a t c h ",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " I n s t a l l e d ",
 217:src/display.c **** #ifndef SHIFT_EXPONENT
 218:src/display.c ****       "",
 219:src/display.c ****       "",
 220:src/display.c **** #endif
 221:src/display.c ****       "",
 222:src/display.c ****     };
 223:src/display.c **** #endif
 224:src/display.c **** 
 225:src/display.c ****   if (e != ERR_NONE || Running) {
 226:src/display.c ****     const char *p = error_table[e];
 227:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 228:src/display.c ****     if (*q == '\0')
 229:src/display.c ****       q = S7_ERROR;
 230:src/display.c ****     if (*q == 'X') {
 231:src/display.c ****       DispMsg = p;
 232:src/display.c ****       frozen_display();
 233:src/display.c ****     }
 234:src/display.c ****     else {
 235:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 236:src/display.c ****       if (*q == '1')
 237:src/display.c **** 	q = CNULL;
 238:src/display.c **** #endif
 239:src/display.c ****       message(p, q);
 240:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 241:src/display.c **** #ifndef REALBUILD
 242:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 243:src/display.c **** #endif
 244:src/display.c ****     }
 245:src/display.c **** #ifdef INFRARED
 246:src/display.c ****     if (Tracing) {
 247:src/display.c ****       if (*q == 'X')
ARM GAS  /tmp/ccW65oEM.s 			page 8


 248:src/display.c **** 	print_reg(regX_idx, p, 0);
 249:src/display.c ****       else {
 250:src/display.c **** 	print_tab(0);
 251:src/display.c **** 	print_line(p, 0);
 252:src/display.c **** 	print(' ');
 253:src/display.c **** 	while (*q != '\0') {
 254:src/display.c **** 	  int c = *q;
 255:src/display.c **** 	  if (c >= 'A')
 256:src/display.c **** 	    c |= 0x60; // ASCII lower case
 257:src/display.c **** 	  print(c);
 258:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 259:src/display.c **** 	    ++q;
 260:src/display.c **** 	  ++q;
 261:src/display.c **** 	}
 262:src/display.c **** 	print_advance( 0 );
 263:src/display.c ****       }
 264:src/display.c ****     }
 265:src/display.c **** #endif
 266:src/display.c ****   }
 267:src/display.c **** }
 268:src/display.c **** 
 269:src/display.c **** 
 270:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 271:src/display.c ****  * display.
 272:src/display.c ****  */
 273:src/display.c **** #define D_TOP 64
 274:src/display.c **** #define D_TL 32
 275:src/display.c **** #define D_TR 8
 276:src/display.c **** #define D_MIDDLE 16
 277:src/display.c **** #define D_BL 4
 278:src/display.c **** #define D_BR 1
 279:src/display.c **** #define D_BOTTOM 2
 280:src/display.c **** 
 281:src/display.c **** #include "charset7.h"
 282:src/display.c **** 
 283:src/display.c **** #ifndef REALBUILD
 284:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 285:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 286:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 287:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 288:src/display.c **** 
 289:src/display.c **** static void set_mant_sign_dot()
 290:src/display.c **** {
 291:src/display.c ****   LastDisplayedNumber[0]='-';
 292:src/display.c ****   set_dot(MANT_SIGN);
 293:src/display.c **** }
 294:src/display.c **** 
 295:src/display.c **** static void clr_mant_sign_dot()
 296:src/display.c **** {
 297:src/display.c ****   LastDisplayedNumber[0]=' ';
 298:src/display.c ****   clr_dot(MANT_SIGN);
 299:src/display.c **** }
 300:src/display.c **** 
 301:src/display.c **** static void set_exp_sign_dot()
 302:src/display.c **** {
 303:src/display.c ****   LastDisplayedExponent[0]='-';
 304:src/display.c ****   set_dot(EXP_SIGN);
ARM GAS  /tmp/ccW65oEM.s 			page 9


 305:src/display.c **** }
 306:src/display.c **** 
 307:src/display.c **** static void clr_exp_sign_dot()
 308:src/display.c **** {
 309:src/display.c ****   LastDisplayedExponent[0]=' ';
 310:src/display.c ****   clr_dot(EXP_SIGN);
 311:src/display.c **** }
 312:src/display.c **** 
 313:src/display.c **** #else
 314:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 315:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 316:src/display.c **** 
 317:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 318:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 319:src/display.c **** 
 320:src/display.c **** #endif
 321:src/display.c **** 
 322:src/display.c **** #ifndef REALBUILD
 323:src/display.c **** int getdig(int ch)
 324:src/display.c **** #else
 325:src/display.c ****   static int getdig(int ch)
 326:src/display.c **** #endif
 327:src/display.c **** {
 328:src/display.c ****   // perform index lookup
 329:src/display.c ****   return digtbl[ch&0xff];
 330:src/display.c **** }
 331:src/display.c **** 
 332:src/display.c **** void dot(int n, int on) {
 333:src/display.c ****   if (on)	set_dot(n);
 334:src/display.c ****   else	clr_dot(n);
 335:src/display.c **** }
 336:src/display.c **** 
 337:src/display.c **** 
 338:src/display.c **** /* Set the decimal point *after* the indicated digit
 339:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 340:src/display.c ****  * of decimal.
 341:src/display.c ****  */
 342:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 343:src/display.c ****   if (res) {
 344:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 345:src/display.c ****   } else {
 346:src/display.c ****     set_dot(posn+7);
 347:src/display.c ****     if (decimal != DECIMAL_DOT)
 348:src/display.c ****       set_dot(posn+8);
 349:src/display.c **** #ifndef REALBUILD
 350:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 351:src/display.c **** #endif
 352:src/display.c ****   }
 353:src/display.c ****   return res;
 354:src/display.c **** }
 355:src/display.c **** 
 356:src/display.c **** /* Set the digit group separator *before* the specified digit.
 357:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 358:src/display.c ****  * sep argument.
 359:src/display.c ****  */
 360:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 361:src/display.c ****   if (sep == SEP_NONE)
ARM GAS  /tmp/ccW65oEM.s 			page 10


 362:src/display.c ****     return res;
 363:src/display.c ****   if (res) {
 364:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 365:src/display.c ****     else *res++ = '.';
 366:src/display.c ****   } else {
 367:src/display.c ****     posn -= SEGS_PER_DIGIT;
 368:src/display.c ****     set_dot(posn+7);
 369:src/display.c ****     if (sep == SEP_COMMA)
 370:src/display.c ****       set_dot(posn+8);
 371:src/display.c **** #ifndef REALBUILD
 372:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 373:src/display.c **** #endif
 374:src/display.c ****   }
 375:src/display.c ****   return res;
 376:src/display.c **** }
 377:src/display.c **** 
 378:src/display.c **** /* Set a digit in positions [base, base+6] */
 379:src/display.c **** static void set_dig(int base, int ch)
 380:src/display.c **** {
 136              		.loc 1 380 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 381:src/display.c ****   int i;
 140              		.loc 1 381 3 view .LVU36
 382:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 382 3 view .LVU37
 142              	.LBB136:
 143              	.LBI136:
 323:src/display.c **** #else
 144              		.loc 1 323 5 view .LVU38
 145              	.LBB137:
 329:src/display.c **** }
 146              		.loc 1 329 3 view .LVU39
 329:src/display.c **** }
 147              		.loc 1 329 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 329:src/display.c **** }
 149              		.loc 1 329 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE137:
 152              	.LBE136:
 383:src/display.c **** #ifndef REALBUILD
 384:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 384 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 380:src/display.c ****   int i;
 155              		.loc 1 380 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB139:
 163              	.LBB138:
 329:src/display.c **** }
ARM GAS  /tmp/ccW65oEM.s 			page 11


 164              		.loc 1 329 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 329:src/display.c **** }
 167              		.loc 1 329 16 view .LVU45
 168              	.LBE138:
 169              	.LBE139:
 170              		.loc 1 384 3 is_stmt 1 view .LVU46
 171              		.loc 1 384 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 385:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 385 5 is_stmt 1 view .LVU48
 174              		.loc 1 385 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 385 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 385 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 385 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 385 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 386:src/display.c ****   else
 387:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 388:src/display.c **** #endif
 389:src/display.c ****   for (i=6; i>=0; i--)
 390:src/display.c ****     {
 391:src/display.c ****       //		dot(base, c & (1 << i));
 392:src/display.c ****       if (c & (1 << i))
 393:src/display.c **** 	set_dot(base);
 196              		.loc 1 393 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 394:src/display.c ****       else
 395:src/display.c **** 	clr_dot(base);
 396:src/display.c ****       base++;
 199              		.loc 1 396 7 is_stmt 1 view .LVU55
 389:src/display.c ****     {
 200              		.loc 1 389 19 view .LVU56
 389:src/display.c ****     {
 201              		.loc 1 389 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 389:src/display.c ****     {
 204              		.loc 1 389 3 view .LVU58
ARM GAS  /tmp/ccW65oEM.s 			page 12


 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 393:src/display.c ****       else
 208              		.loc 1 393 2 is_stmt 1 view .LVU59
 395:src/display.c ****       base++;
 209              		.loc 1 395 2 view .LVU60
 392:src/display.c **** 	set_dot(base);
 210              		.loc 1 392 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 392:src/display.c **** 	set_dot(base);
 212              		.loc 1 392 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 392:src/display.c **** 	set_dot(base);
 216              		.loc 1 392 7 is_stmt 1 view .LVU63
 392:src/display.c **** 	set_dot(base);
 217              		.loc 1 392 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 395:src/display.c ****       base++;
 219              		.loc 1 395 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 396 7 is_stmt 1 view .LVU66
 389:src/display.c ****     {
 223              		.loc 1 389 19 view .LVU67
 389:src/display.c ****     {
 224              		.loc 1 389 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 389:src/display.c ****     {
 227              		.loc 1 389 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 397:src/display.c ****     }
 398:src/display.c **** }
 231              		.loc 1 398 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 387:src/display.c **** #endif
 235              		.loc 1 387 5 is_stmt 1 view .LVU71
 387:src/display.c **** #endif
 236              		.loc 1 387 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 387:src/display.c **** #endif
 238              		.loc 1 387 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 387:src/display.c **** #endif
 240              		.loc 1 387 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 387:src/display.c **** #endif
 242              		.loc 1 387 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
ARM GAS  /tmp/ccW65oEM.s 			page 13


 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 387:src/display.c **** #endif
 246              		.loc 1 387 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 399:src/display.c **** 
 400:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 401:src/display.c ****   if (res) *res++ = ch;
 402:src/display.c ****   else	set_dig(base, ch);
 403:src/display.c ****   return res;
 404:src/display.c **** }
 405:src/display.c **** 
 406:src/display.c **** 
 407:src/display.c **** static void set_digits_string(const char *msg, int j) {
 408:src/display.c ****   for (; *msg != '\0'; msg++) {
 409:src/display.c ****     if (*msg == '.' || *msg == ',')
 410:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 411:src/display.c ****     else {
 412:src/display.c ****       set_dig_s(j, *msg, CNULL);
 413:src/display.c ****       j += SEGS_PER_DIGIT;
 414:src/display.c ****     }
 415:src/display.c ****   }
 416:src/display.c **** }
 417:src/display.c **** 
 418:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 419:src/display.c ****   int i;
 420:src/display.c ****   const int n = res == NULL ? 3 : 4;
 421:src/display.c **** 
 422:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 423:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 424:src/display.c **** }
 425:src/display.c **** 
 426:src/display.c **** /* Force the exponent display
 427:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 428:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 429:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
ARM GAS  /tmp/ccW65oEM.s 			page 14


 430:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 431:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 432:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 433:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 434:src/display.c ****  */
 435:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 436:src/display.c ****   union {
 437:src/display.c ****     char buf[4];
 438:src/display.c ****     int i;
 439:src/display.c ****   } u;
 440:src/display.c ****   int negative;
 441:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 442:src/display.c ****   int thousands;
 443:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 444:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 445:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 446:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 447:src/display.c **** #  else
 448:src/display.c ****   const int show_large_exponent = 1;
 449:src/display.c **** #  endif
 450:src/display.c **** #else
 451:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 452:src/display.c ****   int thousands;
 453:src/display.c **** #  endif
 454:src/display.c ****   const int show_large_exponent = 0;
 455:src/display.c **** #endif
 456:src/display.c **** 
 457:src/display.c ****   negative = flags & 2;
 458:src/display.c ****   if (exp < 0) {
 459:src/display.c ****     negative = 1;
 460:src/display.c ****     exp = -exp;
 461:src/display.c ****   }
 462:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 463:src/display.c ****   thousands = exp / 1000;
 464:src/display.c **** #endif
 465:src/display.c ****   if (res) {
 466:src/display.c **** #ifdef INCLUDE_YREG_CODE
 467:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 468:src/display.c ****     if (thousands != 0) {
 469:src/display.c **** #else
 470:src/display.c ****       if (exp > 999) {
 471:src/display.c **** #endif
 472:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 473:src/display.c **** 	// No exponent separator for large -ve exponents
 474:src/display.c ****       }
 475:src/display.c ****       else *res++ = 'e'; // Normal separator
 476:src/display.c **** #else
 477:src/display.c ****       *res++ = 'e';
 478:src/display.c **** #endif
 479:src/display.c ****       if (negative) *res++ = '-';
 480:src/display.c ****     }
 481:src/display.c ****     else {
 482:src/display.c ****       if (negative) SET_EXP_SIGN;
 483:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 484:src/display.c ****       if (thousands != 0) {
 485:src/display.c **** #else
 486:src/display.c **** 	if (exp > 999) {
ARM GAS  /tmp/ccW65oEM.s 			page 15


 487:src/display.c **** #endif
 488:src/display.c **** 	  if (!show_large_exponent
 489:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 490:src/display.c **** 	      && (flags & 8) == 0
 491:src/display.c **** #endif
 492:src/display.c **** 	      ) {
 493:src/display.c **** #ifdef REALBUILD
 494:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 495:src/display.c **** #else
 496:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 497:src/display.c **** #endif
 498:src/display.c **** 	    goto no_number;
 499:src/display.c **** 	  }
 500:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 501:src/display.c **** 	  else {
 502:src/display.c **** 	    exp -= thousands * 1000;
 503:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 504:src/display.c **** 	    if (flags & 16) {
 505:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 506:src/display.c **** 	      int i;
 507:src/display.c **** 
 508:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 509:src/display.c **** 		// Clear digits and separators
 510:src/display.c **** 		clr_dot(i);
 511:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 512:src/display.c **** 	    }
 513:src/display.c **** #  endif
 514:src/display.c **** 	    if (negative) {
 515:src/display.c **** 	      CLR_EXP_SIGN;
 516:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 517:src/display.c **** 	    }
 518:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 519:src/display.c **** 	    flags = 1;
 520:src/display.c **** 	  }
 521:src/display.c **** #endif
 522:src/display.c **** 	}
 523:src/display.c ****       }
 524:src/display.c **** #ifdef REALBUILD
 525:src/display.c ****       u.i = 0; // Smaller ARM code
 526:src/display.c **** #else
 527:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 528:src/display.c **** #endif
 529:src/display.c ****       if (flags & 5) {
 530:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 531:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 532:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 533:src/display.c **** 	  int i;
 534:src/display.c **** 
 535:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 536:src/display.c **** 	    if (u.buf[i] == '0')
 537:src/display.c **** 	      u.buf[i] = ' ';
 538:src/display.c **** 	    else
 539:src/display.c **** 	      break;
 540:src/display.c **** 	  }
 541:src/display.c **** 	  if (i != 0 && negative) {
 542:src/display.c **** 	    // Move minus sign to right in front of exponent
 543:src/display.c **** 	    CLR_EXP_SIGN;
ARM GAS  /tmp/ccW65oEM.s 			page 16


 544:src/display.c **** 	    u.buf[i - 1] = '-';
 545:src/display.c **** 	  }
 546:src/display.c **** 	}
 547:src/display.c **** #endif
 548:src/display.c ****       }
 549:src/display.c ****       else
 550:src/display.c **** 	num_arg(u.buf, exp);
 551:src/display.c ****     no_number:
 552:src/display.c ****       set_exp_digits_string(u.buf, res);
 553:src/display.c ****     }
 554:src/display.c **** 
 555:src/display.c ****     static void carry_overflow(void) {
 556:src/display.c ****       const int base = SEGS_EXP_BASE;
 557:src/display.c ****       int c;
 558:src/display.c ****       unsigned int b;
 559:src/display.c **** 
 560:src/display.c ****       // Figure out the base
 561:src/display.c ****       switch (State2.smode) {
 562:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 563:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 564:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 565:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 566:src/display.c ****       default:	b = UState.int_base+1;	break;
 567:src/display.c ****       }
 568:src/display.c **** 
 569:src/display.c ****       // Display the base as the first exponent digit
 570:src/display.c ****       if (b > 10 && b < 16)
 571:src/display.c **** 	SET_EXP_SIGN;
 572:src/display.c ****       c = "B34567o9D12345h"[b-2];
 573:src/display.c ****       set_dig(base, c);
 574:src/display.c **** 
 575:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 576:src/display.c ****       if (get_carry())
 577:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 578:src/display.c ****       if (get_overflow())
 579:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 580:src/display.c ****     }
 581:src/display.c **** 
 582:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 583:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 584:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 585:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 586:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 587:src/display.c **** #endif
 588:src/display.c **** 
 589:src/display.c ****     /* Display the annunicator text line.
 590:src/display.c ****      * Care needs to be taken to keep things aligned.
 591:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 592:src/display.c ****      */
 593:src/display.c **** #ifdef TOP_ROW
 594:src/display.c ****     static void annunciators(void) {
 595:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 596:src/display.c ****       char buf[42], *p = buf, *q="";
 597:src/display.c ****       char buf2[42], *p2 = buf2;
 598:src/display.c ****       int n;
 599:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 600:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
ARM GAS  /tmp/ccW65oEM.s 			page 17


 601:src/display.c ****       // Constant variables and code branches depending on a constant variable
 602:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 603:src/display.c ****       // feature run-time configurable if needed.
 604:src/display.c **** #ifdef INCLUDE_YREG_CODE
 605:src/display.c **** #  ifdef YREG_ALWAYS_ON
 606:src/display.c ****       const int yreg_enabled = 1;
 607:src/display.c **** #  else
 608:src/display.c ****       const int yreg_enabled = UState.show_y;
 609:src/display.c **** #  endif
 610:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 611:src/display.c ****       const int yreg_hms = 1;
 612:src/display.c **** #  else
 613:src/display.c ****       const int yreg_hms = 0;
 614:src/display.c **** #  endif
 615:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 616:src/display.c ****       const int yreg_fract = 1;
 617:src/display.c **** #  else
 618:src/display.c ****       const int yreg_fract = 0;
 619:src/display.c **** #  endif
 620:src/display.c **** #else
 621:src/display.c ****       const int yreg_enabled = 0;
 622:src/display.c ****       const int yreg_hms = 0;
 623:src/display.c ****       const int yreg_fract = 0;
 624:src/display.c **** #endif
 625:src/display.c **** #ifdef RP_PREFIX
 626:src/display.c ****       const int rp_prefix = 1;
 627:src/display.c **** #else
 628:src/display.c ****       const int rp_prefix = 0;
 629:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 630:src/display.c **** #endif
 631:src/display.c ****       // Indicates whether font escape code is compiled in.
 632:src/display.c ****       // This variable will always be set at compile time.
 633:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 634:src/display.c ****       const int has_FONT_ESCAPE = 1;
 635:src/display.c **** #else
 636:src/display.c ****       const int has_FONT_ESCAPE = 0;
 637:src/display.c **** #endif
 638:src/display.c **** 
 639:src/display.c ****       xset(buf, '\0', sizeof(buf));
 640:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 641:src/display.c ****       
 642:src/display.c ****       if (is_intmode()) {
 643:src/display.c **** #ifdef SHOW_STACK_SIZE
 644:src/display.c **** 	if (shift_char == ' ') {
 645:src/display.c **** 	  *p2++ = '\007';
 646:src/display.c **** 	  *p2++ = '\346';
 647:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 648:src/display.c **** 	}
 649:src/display.c **** 	else
 650:src/display.c **** #endif
 651:src/display.c **** 	  {
 652:src/display.c **** 	    *p2++ = shift_char;
 653:src/display.c **** 	    *p2++ = '\006';
 654:src/display.c **** 	  }
 655:src/display.c **** 
 656:src/display.c **** 	switch(int_mode()) {
 657:src/display.c **** 	default:
ARM GAS  /tmp/ccW65oEM.s 			page 18


 658:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 659:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 660:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 661:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 662:src/display.c **** 	}
 663:src/display.c **** 	q = scopy(p2, q);
 664:src/display.c **** 	*q++ = '\006';
 665:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 666:src/display.c **** 
 667:src/display.c **** 	if (IntMaxWindow > 0) {
 668:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 669:src/display.c **** 	  if (*q == '1')
 670:src/display.c **** 	    n += 2;
 671:src/display.c **** 	  if (q[1] == '1')
 672:src/display.c **** 	    n += 2;
 673:src/display.c **** 	  while (n-- > 0)
 674:src/display.c **** 	    *p2++ = '\006';
 675:src/display.c **** 
 676:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 677:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 678:src/display.c **** 	}
 679:src/display.c **** 	//	if (yreg_enabled) goto display_yreg;
 680:src/display.c ****       }
 681:src/display.c ****       else if (!yreg_enabled
 682:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 683:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 684:src/display.c **** #endif
 685:src/display.c **** 	       ) {
 686:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 687:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 688:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 689:src/display.c **** 	if (shift_char == ' ') {
 690:src/display.c **** 	  *p2++ = '\007';
 691:src/display.c **** 	  *p2++ = '\342';
 692:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 693:src/display.c **** 	  *p2++ = '\007';
 694:src/display.c **** 	  *p2++ = '\344';
 695:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 696:src/display.c **** 	}
 697:src/display.c **** 	else
 698:src/display.c **** #endif
 699:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 700:src/display.c **** 	    *p2++ = shift_char;
 701:src/display.c **** 	    *p2++ = '\006';
 702:src/display.c **** 	  }
 703:src/display.c **** 	  else {
 704:src/display.c **** 	    *p2++ = 'D';
 705:src/display.c **** 	  }
 706:src/display.c **** 
 707:src/display.c **** 	if (State2.cmplx) {
 708:src/display.c **** 	  *p2++ = ' ';
 709:src/display.c **** 	  *p2 = '\024';
 710:src/display.c **** 	  goto skip;
 711:src/display.c **** 	}
 712:src/display.c **** 	if (State2.arrow) {
 713:src/display.c **** 	  *p2++ = ' ';
 714:src/display.c **** 	  *p2 = '\015';
ARM GAS  /tmp/ccW65oEM.s 			page 19


 715:src/display.c **** 	  goto skip;
 716:src/display.c **** 	}
 717:src/display.c **** 
 718:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 719:src/display.c **** 	  if (State2.wascomplex) {
 720:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else if (rp_prefix) {
 723:src/display.c **** 	    if (RectPolConv == 1) {
 724:src/display.c **** 	      q = "\007\306<";
 725:src/display.c **** 	    }
 726:src/display.c **** 	    else {
 727:src/display.c **** 	      q = "\007\306y";
 728:src/display.c **** 	    }
 729:src/display.c **** 	  }
 730:src/display.c **** 	  p = scopy(buf, q);
 731:src/display.c **** 
 732:src/display.c **** 	  goto display_yreg;
 733:src/display.c **** 	}
 734:src/display.c **** 
 735:src/display.c **** 	switch (UState.date_mode) {
 736:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 737:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 738:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 739:src/display.c **** #endif
 740:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 741:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 742:src/display.c **** #endif
 743:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 744:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 745:src/display.c **** #endif
 746:src/display.c **** #endif
 747:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 748:src/display.c **** 	}
 749:src/display.c **** 	p2 = scopy(p2, q);
 750:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 751:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 752:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 753:src/display.c **** 	}
 754:src/display.c **** #else
 755:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 756:src/display.c **** 	*p2++ = '\007';
 757:src/display.c **** 	*p2++ = '\342';
 758:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 759:src/display.c **** #endif
 760:src/display.c ****       }
 761:src/display.c ****       else { // yreg_enabled
 762:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 763:src/display.c **** 	if (State2.cmplx) {
 764:src/display.c **** 	  *p2++ = '\007';
 765:src/display.c **** 	  *p2++ = '\344';
 766:src/display.c **** 	  *p2++ = shift_char;
 767:src/display.c **** 	  q = "\024";
 768:src/display.c **** 	}
 769:src/display.c **** 	else if (shift_char != ' ') {
 770:src/display.c **** 	  *p2++ = '\007';
 771:src/display.c **** 	  *p2++ = '\307';
ARM GAS  /tmp/ccW65oEM.s 			page 20


 772:src/display.c **** 	  *p2++ = shift_char;
 773:src/display.c **** 	  goto no_copy;
 774:src/display.c **** 	}
 775:src/display.c **** 	else
 776:src/display.c **** #endif
 777:src/display.c **** 	  if (State2.wascomplex) {
 778:src/display.c **** 	    q = "\007\207i";
 779:src/display.c **** 	    p = scopy(p, q);
 780:src/display.c **** 	    goto no_copy;
 781:src/display.c **** 	  }
 782:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 783:src/display.c **** 	    q = "\007\307<";
 784:src/display.c **** 	    p = scopy(p, q);
 785:src/display.c **** 	    goto no_copy;
 786:src/display.c **** 	  }
 787:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 788:src/display.c **** 	    q = "\007\307y";
 789:src/display.c **** 	    p = scopy(p, q);
 790:src/display.c **** 	    goto no_copy;
 791:src/display.c **** 	  }
 792:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 793:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
 794:src/display.c **** 	    q = "\007\207\007";
 795:src/display.c **** 	  }
 796:src/display.c **** #endif
 797:src/display.c **** 	  else {
 798:src/display.c **** #ifndef SHOW_STACK_SIZE
 799:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 800:src/display.c **** #else
 801:src/display.c **** 	    if (is_dblmode()) {
 802:src/display.c **** 	      *p++ = '\007';
 803:src/display.c **** 	      *p++ = '\342';
 804:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
 805:src/display.c **** 	      q = "\007\345D";
 806:src/display.c **** 	    }
 807:src/display.c **** 	    else {
 808:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 809:src/display.c **** 	    }
 810:src/display.c **** #endif
 811:src/display.c **** 	  }
 812:src/display.c **** 	p2 = scopy(p2, q);
 813:src/display.c **** 
 814:src/display.c ****       no_copy:
 815:src/display.c **** 
 816:src/display.c **** 
 817:src/display.c **** 	if (State2.arrow) {
 818:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 819:src/display.c **** 	} else if (State2.runmode) {
 820:src/display.c **** 	  decNumber y;
 821:src/display.c **** 	display_yreg:
 822:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 823:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 824:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 825:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 826:src/display.c **** 	   */
 827:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 828:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
ARM GAS  /tmp/ccW65oEM.s 			page 21


 829:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 830:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 831:src/display.c **** 	    if (yreg_hms && State2.hms) {
 832:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 833:src/display.c **** 
 834:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 835:src/display.c **** 	      UState.nothousands = 1;
 836:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 837:src/display.c **** 	      UState.nothousands = saved_nothousands;
 838:src/display.c **** 	      // First replace the '@' character with the degree symbol
 839:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 840:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 841:src/display.c **** 	      // then remove the fractional part of the seconds.
 842:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 843:src/display.c **** 	      while (*p) {
 844:src/display.c **** 		replace_char(buf, p[0], p[1]);
 845:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 846:src/display.c **** 		  goto skip;
 847:src/display.c **** 		}
 848:src/display.c **** 		p += 2;
 849:src/display.c **** 	      }
 850:src/display.c **** 	      goto skip;
 851:src/display.c **** 	    }
 852:src/display.c **** 	    if (yreg_fract && UState.fract
 853:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 854:src/display.c **** 		&& !State2.cmplx
 855:src/display.c **** #endif
 856:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 857:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 858:src/display.c **** #endif
 859:src/display.c **** 		&& set_x_fract(&y, p)) {
 860:src/display.c **** 	      char ltgteq;
 861:src/display.c **** 
 862:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 863:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 864:src/display.c **** 	      ltgteq = *q;
 865:src/display.c **** 	      switch (ltgteq) {
 866:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 867:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 868:src/display.c **** 	      }
 869:src/display.c **** 	      scopy(q, "\007\344?");
 870:src/display.c **** 	      q[2] = ltgteq;
 871:src/display.c **** 
 872:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 873:src/display.c **** 		goto skip;
 874:src/display.c **** 	      }
 875:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 876:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 877:src/display.c **** 		goto skip;
 878:src/display.c **** 	      }
 879:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 880:src/display.c **** 	    }
 881:src/display.c **** 	  }
 882:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 883:src/display.c **** 	    int extra_pixels;
 884:src/display.c **** 
 885:src/display.c **** 	    set_x_dn(&y, p, &n);
ARM GAS  /tmp/ccW65oEM.s 			page 22


 886:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 887:src/display.c **** 	    if (extra_pixels <= 0)
 888:src/display.c **** 	      break;
 889:src/display.c **** 
 890:src/display.c **** 	    xset(p, '\0', n+10);
 891:src/display.c **** 
 892:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 893:src/display.c **** 	  }
 894:src/display.c **** 	}
 895:src/display.c ****       }
 896:src/display.c ****       
 897:src/display.c ****     skip:	set_status(buf);
 898:src/display.c ****       set_status_top(buf2);
 899:src/display.c ****       
 900:src/display.c ****     }
 901:src/display.c **** #else
 902:src/display.c ****     static void annunciators(void) {
 903:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 904:src/display.c ****       char buf[42], *p = buf, *q="";
 905:src/display.c ****       int n;
 906:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 907:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 908:src/display.c ****       // Constant variables and code branches depending on a constant variable
 909:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 910:src/display.c ****       // feature run-time configurable if needed.
 911:src/display.c **** #ifdef INCLUDE_YREG_CODE
 912:src/display.c **** #  ifdef YREG_ALWAYS_ON
 913:src/display.c ****       const int yreg_enabled = 1;
 914:src/display.c **** #  else
 915:src/display.c ****       const int yreg_enabled = UState.show_y;
 916:src/display.c **** #  endif
 917:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 918:src/display.c ****       const int yreg_hms = 1;
 919:src/display.c **** #  else
 920:src/display.c ****       const int yreg_hms = 0;
 921:src/display.c **** #  endif
 922:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 923:src/display.c ****       const int yreg_fract = 1;
 924:src/display.c **** #  else
 925:src/display.c ****       const int yreg_fract = 0;
 926:src/display.c **** #  endif
 927:src/display.c **** #else
 928:src/display.c ****       const int yreg_enabled = 0;
 929:src/display.c ****       const int yreg_hms = 0;
 930:src/display.c ****       const int yreg_fract = 0;
 931:src/display.c **** #endif
 932:src/display.c **** #ifdef RP_PREFIX
 933:src/display.c ****       const int rp_prefix = 1;
 934:src/display.c **** #else
 935:src/display.c ****       const int rp_prefix = 0;
 936:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 937:src/display.c **** #endif
 938:src/display.c ****       // Indicates whether font escape code is compiled in.
 939:src/display.c ****       // This variable will always be set at compile time.
 940:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 941:src/display.c ****       const int has_FONT_ESCAPE = 1;
 942:src/display.c **** #else
ARM GAS  /tmp/ccW65oEM.s 			page 23


 943:src/display.c ****       const int has_FONT_ESCAPE = 0;
 944:src/display.c **** #endif
 945:src/display.c **** 
 946:src/display.c ****       xset(buf, '\0', sizeof(buf));
 947:src/display.c **** #ifdef TOP_ROW
 948:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 949:src/display.c **** #endif
 950:src/display.c ****       
 951:src/display.c ****       if (is_intmode()) {
 952:src/display.c **** #ifdef SHOW_STACK_SIZE
 953:src/display.c **** 	if (shift_char == ' ') {
 954:src/display.c **** 	  *p++ = '\007';
 955:src/display.c **** 	  *p++ = '\346';
 956:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 957:src/display.c **** 	}
 958:src/display.c **** 	else
 959:src/display.c **** #endif
 960:src/display.c **** 	  {
 961:src/display.c **** 	    *p++ = shift_char;
 962:src/display.c **** 	    *p++ = '\006';
 963:src/display.c **** 	  }
 964:src/display.c **** 
 965:src/display.c **** 	switch(int_mode()) {
 966:src/display.c **** 	default:
 967:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 968:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 969:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 970:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 971:src/display.c **** 	}
 972:src/display.c **** 	q = scopy(p, q);
 973:src/display.c **** 	*q++ = '\006';
 974:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 975:src/display.c **** 
 976:src/display.c **** 	if (IntMaxWindow > 0) {
 977:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 978:src/display.c **** 	  if (*q == '1')
 979:src/display.c **** 	    n += 2;
 980:src/display.c **** 	  if (q[1] == '1')
 981:src/display.c **** 	    n += 2;
 982:src/display.c **** 	  while (n-- > 0)
 983:src/display.c **** 	    *p++ = '\006';
 984:src/display.c **** 
 985:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 986:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 987:src/display.c **** 	}
 988:src/display.c ****       }
 989:src/display.c ****       else if (!yreg_enabled
 990:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 991:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 992:src/display.c **** #endif
 993:src/display.c **** 	       ) {
 994:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 995:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 996:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 997:src/display.c **** 	if (shift_char == ' ') {
 998:src/display.c **** 	  *p++ = '\007';
 999:src/display.c **** 	  *p++ = '\342';
ARM GAS  /tmp/ccW65oEM.s 			page 24


1000:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1001:src/display.c **** 	  *p++ = '\007';
1002:src/display.c **** 	  *p++ = '\344';
1003:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1004:src/display.c **** 	}
1005:src/display.c **** 	else
1006:src/display.c **** #endif
1007:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1008:src/display.c **** 	    *p++ = shift_char;
1009:src/display.c **** 	    *p++ = '\006';
1010:src/display.c **** 	  }
1011:src/display.c **** 	  else {
1012:src/display.c **** 	    *p++ = 'D';
1013:src/display.c **** 	  }
1014:src/display.c **** 
1015:src/display.c **** 	if (State2.cmplx) {
1016:src/display.c **** 	  *p++ = ' ';
1017:src/display.c **** 	  *p = '\024';
1018:src/display.c **** 	  goto skip;
1019:src/display.c **** 	}
1020:src/display.c **** 	if (State2.arrow) {
1021:src/display.c **** 	  *p++ = ' ';
1022:src/display.c **** 	  *p = '\015';
1023:src/display.c **** 	  goto skip;
1024:src/display.c **** 	}
1025:src/display.c **** 
1026:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1027:src/display.c **** 	  if (State2.wascomplex) {
1028:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1029:src/display.c **** 	  }
1030:src/display.c **** 	  else if (rp_prefix) {
1031:src/display.c **** 	    if (RectPolConv == 1) {
1032:src/display.c **** 	      q = "\007\306<";
1033:src/display.c **** 	    }
1034:src/display.c **** 	    else {
1035:src/display.c **** 	      q = "\007\306y";
1036:src/display.c **** 	    }
1037:src/display.c **** 	  }
1038:src/display.c **** 	  p = scopy(buf, q);
1039:src/display.c **** 
1040:src/display.c **** 	  goto display_yreg;
1041:src/display.c **** 	}
1042:src/display.c **** 
1043:src/display.c **** 	switch (UState.date_mode) {
1044:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1045:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1046:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1047:src/display.c **** #endif
1048:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1049:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1050:src/display.c **** #endif
1051:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1052:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1053:src/display.c **** #endif
1054:src/display.c **** #endif
1055:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1056:src/display.c **** 	}
ARM GAS  /tmp/ccW65oEM.s 			page 25


1057:src/display.c **** 	p = scopy(p, q);
1058:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1059:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1060:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1061:src/display.c **** 	}
1062:src/display.c **** #else
1063:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1064:src/display.c **** 	*p++ = '\007';
1065:src/display.c **** 	*p++ = '\342';
1066:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1067:src/display.c **** #endif
1068:src/display.c ****       }
1069:src/display.c ****       else { // yreg_enabled
1070:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1071:src/display.c **** 	if (State2.cmplx) {
1072:src/display.c **** 	  *p++ = '\007';
1073:src/display.c **** 	  *p++ = '\344';
1074:src/display.c **** 	  *p++ = shift_char;
1075:src/display.c **** 	  q = "\024";
1076:src/display.c **** 	}
1077:src/display.c **** 	else if (shift_char != ' ') {
1078:src/display.c **** 	  *p++ = '\007';
1079:src/display.c **** 	  *p++ = '\307';
1080:src/display.c **** 	  *p++ = shift_char;
1081:src/display.c **** 	  goto no_copy;
1082:src/display.c **** 	}
1083:src/display.c **** 	else
1084:src/display.c **** #endif
1085:src/display.c **** 	  if (State2.wascomplex) {
1086:src/display.c **** 	    q = "\007\207i";
1087:src/display.c **** 	  }
1088:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1089:src/display.c **** 	    q = "\007\307<";
1090:src/display.c **** 	  }
1091:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1092:src/display.c **** 	    q = "\007\307y";
1093:src/display.c **** 	  }
1094:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1095:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1096:src/display.c **** 	    q = "\007\207\007";
1097:src/display.c **** 	  }
1098:src/display.c **** #endif
1099:src/display.c **** 	  else {
1100:src/display.c **** #ifndef SHOW_STACK_SIZE
1101:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1102:src/display.c **** #else
1103:src/display.c **** 	    if (is_dblmode()) {
1104:src/display.c **** 	      *p++ = '\007';
1105:src/display.c **** 	      *p++ = '\342';
1106:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1107:src/display.c **** 	      q = "\007\345D";
1108:src/display.c **** 	    }
1109:src/display.c **** 	    else {
1110:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1111:src/display.c **** 	    }
1112:src/display.c **** #endif
1113:src/display.c **** 	  }
ARM GAS  /tmp/ccW65oEM.s 			page 26


1114:src/display.c **** 	p = scopy(p, q);
1115:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1116:src/display.c ****       no_copy:
1117:src/display.c **** #endif
1118:src/display.c **** 
1119:src/display.c **** 	if (State2.arrow) {
1120:src/display.c **** 	  scopy(p, "\007\204\006\015");
1121:src/display.c **** 	} else if (State2.runmode) {
1122:src/display.c **** 	  decNumber y;
1123:src/display.c **** 	display_yreg:
1124:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1125:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1126:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1127:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1128:src/display.c **** 	   */
1129:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1130:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1131:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1132:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1133:src/display.c **** 	    if (yreg_hms && State2.hms) {
1134:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1135:src/display.c **** 
1136:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1137:src/display.c **** 	      UState.nothousands = 1;
1138:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1139:src/display.c **** 	      UState.nothousands = saved_nothousands;
1140:src/display.c **** 	      // First replace the '@' character with the degree symbol
1141:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1142:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1143:src/display.c **** 	      // then remove the fractional part of the seconds.
1144:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1145:src/display.c **** 	      while (*p) {
1146:src/display.c **** 		replace_char(buf, p[0], p[1]);
1147:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1148:src/display.c **** 		  goto skip;
1149:src/display.c **** 		}
1150:src/display.c **** 		p += 2;
1151:src/display.c **** 	      }
1152:src/display.c **** 	      goto skip;
1153:src/display.c **** 	    }
1154:src/display.c **** 	    if (yreg_fract && UState.fract
1155:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1156:src/display.c **** 		&& !State2.cmplx
1157:src/display.c **** #endif
1158:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1159:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1160:src/display.c **** #endif
1161:src/display.c **** 		&& set_x_fract(&y, p)) {
1162:src/display.c **** 	      char ltgteq;
1163:src/display.c **** 
1164:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1165:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1166:src/display.c **** 	      ltgteq = *q;
1167:src/display.c **** 	      switch (ltgteq) {
1168:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1169:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1170:src/display.c **** 	      }
ARM GAS  /tmp/ccW65oEM.s 			page 27


1171:src/display.c **** 	      scopy(q, "\007\344?");
1172:src/display.c **** 	      q[2] = ltgteq;
1173:src/display.c **** 
1174:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1175:src/display.c **** 		goto skip;
1176:src/display.c **** 	      }
1177:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1178:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1179:src/display.c **** 		goto skip;
1180:src/display.c **** 	      }
1181:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1182:src/display.c **** 	    }
1183:src/display.c **** 	  }
1184:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1185:src/display.c **** 	    int extra_pixels;
1186:src/display.c **** 
1187:src/display.c **** 	    set_x_dn(&y, p, &n);
1188:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1189:src/display.c **** 	    if (extra_pixels <= 0)
1190:src/display.c **** 	      break;
1191:src/display.c **** 
1192:src/display.c **** 	    xset(p, '\0', n+10);
1193:src/display.c **** 
1194:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1195:src/display.c **** 	  }
1196:src/display.c **** 	}
1197:src/display.c ****       }
1198:src/display.c ****       
1199:src/display.c ****     skip:	set_status_top(buf);
1200:src/display.c ****     }
1201:src/display.c **** #endif //top_row
1202:src/display.c ****     static void disp_x(const char *p) {
1203:src/display.c ****       int i;
1204:src/display.c ****       int gotdot = -1;
1205:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1206:src/display.c ****       const
1207:src/display.c **** #endif
1208:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1209:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1210:src/display.c ****       int overflow_to_left = 0;
1211:src/display.c **** #endif
1212:src/display.c **** 
1213:src/display.c ****       if (*p == '-') {
1214:src/display.c **** 	SET_MANT_SIGN;
1215:src/display.c **** 	p++;
1216:src/display.c ****       }
1217:src/display.c **** 
1218:src/display.c ****       if (is_intmode()) {
1219:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1220:src/display.c **** 	  set_dig(i, *p);
1221:src/display.c **** 	  i += SEGS_PER_DIGIT;
1222:src/display.c **** 	}
1223:src/display.c **** 	carry_overflow();
1224:src/display.c ****       } else {
1225:src/display.c **** 	set_separator_decimal_modes();
1226:src/display.c **** 
1227:src/display.c **** 	i = 0;
ARM GAS  /tmp/ccW65oEM.s 			page 28


1228:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1229:src/display.c **** 	if ( CmdLineDot > 1 ) {
1230:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1231:src/display.c **** 	  const
1232:src/display.c **** #  endif
1233:src/display.c **** 	    int double_dot = 0;
1234:src/display.c **** 	  int j;
1235:src/display.c **** 
1236:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1237:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1238:src/display.c **** 	      gotdot = j;
1239:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1240:src/display.c **** 	      double_dot = (p[j+1] == '.');
1241:src/display.c **** #  endif
1242:src/display.c **** 	    }
1243:src/display.c **** 	  }
1244:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1245:src/display.c **** 	  if (j > 0) {
1246:src/display.c **** 	    p += j + 1;
1247:src/display.c **** 	    i = SEGS_PER_DIGIT;
1248:src/display.c **** 	    if (gotdot <= j) {
1249:src/display.c **** 	      gotdot = 0;
1250:src/display.c **** 	      if (double_dot)
1251:src/display.c **** 		p++;
1252:src/display.c **** 	    }
1253:src/display.c **** 	    else if (*p == '.') {
1254:src/display.c **** 	      gotdot = 0;
1255:src/display.c **** 	      p++;
1256:src/display.c **** 	      if (!double_dot)
1257:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1258:src/display.c **** 	    }
1259:src/display.c **** 	    else gotdot = -1;
1260:src/display.c **** 	    set_dig(0, '<');
1261:src/display.c **** 	    overflow_to_left = 1;
1262:src/display.c **** 	  }
1263:src/display.c **** 	  else gotdot = -1;
1264:src/display.c **** 	}
1265:src/display.c **** #endif
1266:src/display.c **** 
1267:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1268:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1269:src/display.c **** 	       && *p != 'D'
1270:src/display.c **** #endif
1271:src/display.c **** 	       ; p++) {
1272:src/display.c **** 	  if (*p == '.') {
1273:src/display.c **** 	    if (gotdot < 0)
1274:src/display.c **** 	      gotdot = i;
1275:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1276:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1277:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1278:src/display.c **** 	      if ( *(p+1) == '.' ) {
1279:src/display.c **** 		p++;
1280:src/display.c **** 	      }
1281:src/display.c **** #  else
1282:src/display.c **** 	      if ( i != gotdot ) {
1283:src/display.c **** #  endif
1284:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
ARM GAS  /tmp/ccW65oEM.s 			page 29


1285:src/display.c **** 		i += segs_per_digit;
1286:src/display.c **** 	      }
1287:src/display.c **** 	      else {
1288:src/display.c **** 		if ( CmdLineDot > 1 ) {
1289:src/display.c **** 		  i += segs_per_digit;
1290:src/display.c **** 		}
1291:src/display.c **** 		else {
1292:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1293:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1294:src/display.c **** 		}
1295:src/display.c **** 	      }
1296:src/display.c **** #else
1297:src/display.c **** 	      if (i > 0)
1298:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1299:src/display.c **** 	      else {
1300:src/display.c **** 		set_dig(i, '0');
1301:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1302:src/display.c **** 		i += segs_per_digit;
1303:src/display.c **** 	      }
1304:src/display.c **** #endif
1305:src/display.c **** 	    } else {
1306:src/display.c **** 	      set_dig(i, *p);
1307:src/display.c **** 	      i += segs_per_digit;
1308:src/display.c **** 	    }
1309:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1310:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1311:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1312:src/display.c **** #endif
1313:src/display.c **** 	  }
1314:src/display.c **** 
1315:src/display.c **** 	  /* Implement a floating comma */
1316:src/display.c **** 	  if (gotdot < 0)
1317:src/display.c **** 	    gotdot = i;
1318:src/display.c **** 	  for (;;) {
1319:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1320:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1321:src/display.c **** 	      break;
1322:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1323:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1324:src/display.c **** 	      break;
1325:src/display.c **** #endif
1326:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1327:src/display.c **** 	  }
1328:src/display.c **** 
1329:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1330:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1331:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1332:src/display.c **** 	    int flags = 8;
1333:src/display.c **** #  else
1334:src/display.c **** 	    int flags = 12;
1335:src/display.c **** #  endif
1336:src/display.c **** 
1337:src/display.c **** 	    if (*p == 'D')
1338:src/display.c **** 	      flags |= 2;
1339:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1340:src/display.c **** 	      flags |= 16;
1341:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
ARM GAS  /tmp/ccW65oEM.s 			page 30


1342:src/display.c **** 	  }
1343:src/display.c **** #else
1344:src/display.c **** 	  if (*p == 'E') {
1345:src/display.c **** 	    p++;
1346:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1347:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1348:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1349:src/display.c **** #  else
1350:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1351:src/display.c **** #  endif
1352:src/display.c **** 	  } 
1353:src/display.c **** #endif
1354:src/display.c **** 	}
1355:src/display.c ****       }
1356:src/display.c **** 
1357:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1358:src/display.c **** 
1359:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1360:src/display.c **** 	const int ws = word_size();
1361:src/display.c **** 	unsigned int b;
1362:src/display.c **** 	long long int vs = value;
1363:src/display.c **** 	unsigned long long int v;
1364:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1365:src/display.c **** 	int i, j, k;
1366:src/display.c **** 	int sign = 0;
1367:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1368:src/display.c **** 
1369:src/display.c **** 	switch (State2.smode) {
1370:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1371:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1372:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1373:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1374:src/display.c **** 	default:	b = int_base();	break;
1375:src/display.c **** 	}
1376:src/display.c **** 
1377:src/display.c **** 	if (!res) {
1378:src/display.c **** 	  IntMaxWindow = 0;
1379:src/display.c **** 	  carry_overflow();
1380:src/display.c **** 	}
1381:src/display.c **** 
1382:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1383:src/display.c **** 	  v = extract_value(value, &sign);
1384:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1385:src/display.c **** 	    v = value;
1386:src/display.c **** 	  if (v == 0) {
1387:src/display.c **** 	    if (sign)
1388:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1389:src/display.c **** 	    set_dig_s(dig, '0', res);
1390:src/display.c **** 	    return;
1391:src/display.c **** 	  } else
1392:src/display.c **** 	    for (i=0; v != 0; i++) {
1393:src/display.c **** 	      const int r = v % b;
1394:src/display.c **** 	      v /= b;
1395:src/display.c **** 	      buf[i] = DIGITS[r];
1396:src/display.c **** 	    }
1397:src/display.c **** 	} else {
1398:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
ARM GAS  /tmp/ccW65oEM.s 			page 31


1399:src/display.c **** 	  if (ws < 64) {
1400:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1401:src/display.c **** 	    vs &= mask;
1402:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1403:src/display.c **** 	      vs |= ~mask;
1404:src/display.c **** 	  }
1405:src/display.c **** 
1406:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1407:src/display.c **** 	    set_dig_s(dig, '0', res);
1408:src/display.c **** 	    return;
1409:src/display.c **** 	  } else if (!UState.leadzero) {
1410:src/display.c **** 	    v = (unsigned long long int)vs;
1411:src/display.c **** 	    for (i=0; v != 0; i++) {
1412:src/display.c **** 	      const int r = v % b;
1413:src/display.c **** 	      v /= b;
1414:src/display.c **** 	      buf[i] = DIGITS[r];
1415:src/display.c **** 	    }
1416:src/display.c **** 	  } else {
1417:src/display.c **** 	    int n;
1418:src/display.c **** 	    const unsigned int b1 = b >> 1;
1419:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1420:src/display.c **** 	    v = (unsigned long long int)vs;
1421:src/display.c **** 
1422:src/display.c **** 	    n = (ws + fac) / (fac+1);
1423:src/display.c **** 	    for (i=0; i<n; i++) {
1424:src/display.c **** 	      const int r = v % b;
1425:src/display.c **** 	      v /= b;
1426:src/display.c **** 	      buf[i] = DIGITS[r];
1427:src/display.c **** 	    }
1428:src/display.c **** 	  }
1429:src/display.c **** 	}
1430:src/display.c **** 
1431:src/display.c **** 	/* At this point i is the number of digits in the output */
1432:src/display.c **** 	if (res) {
1433:src/display.c **** 	  if (sign) *res++ = '-';
1434:src/display.c **** 	  while (--i >= 0)
1435:src/display.c **** 	    *res++ = buf[i];
1436:src/display.c **** 	} else {
1437:src/display.c **** #if 0
1438:src/display.c **** 	  set_separator_decimal_modes();
1439:src/display.c **** 
1440:src/display.c **** 	  // Allows configuration of digit grouping per base
1441:src/display.c **** 	  static const char grouping[] = 
1442:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1443:src/display.c **** 		    //	   2     3     4     5     6     7     8
1444:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1445:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1446:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1447:src/display.c **** 	    : grouping[b - 2] >> 4;
1448:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1449:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1450:src/display.c **** #else
1451:src/display.c **** 	  // Less flexible but shorter
1452:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1453:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1454:src/display.c **** 	    : b == 16 ? 2 : 3;
1455:src/display.c **** 	  set_separator_decimal_modes();
ARM GAS  /tmp/ccW65oEM.s 			page 32


1456:src/display.c **** #endif
1457:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1458:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1459:src/display.c **** 	    State2.window = 0;
1460:src/display.c **** 	  buf[i] = '\0';
1461:src/display.c **** 
1462:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1463:src/display.c **** 	  for (k = 0; k < 12; k++)
1464:src/display.c **** 	    if (buf[j + k] == '\0')
1465:src/display.c **** 	      break;
1466:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1467:src/display.c **** 	    int ch = buf[j++];
1468:src/display.c **** 	    if (i >= shift)
1469:src/display.c **** 	      ch -= 030;
1470:src/display.c **** 	    set_dig(dig, ch);
1471:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1472:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1473:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1474:src/display.c **** 	  }
1475:src/display.c **** 	  if (sign) {
1476:src/display.c **** 	    if (dig >= 0)
1477:src/display.c **** 	      set_dig(dig, '-');
1478:src/display.c **** 	    else	SET_MANT_SIGN;
1479:src/display.c **** 	  }
1480:src/display.c **** 	}
1481:src/display.c ****       }
1482:src/display.c **** 
1483:src/display.c ****       /* Handle special cases.
1484:src/display.c ****        * return non-zero if the number is special.
1485:src/display.c ****        */
1486:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1487:src/display.c **** 	if (decNumberIsSpecial(x)) {
1488:src/display.c **** 	  if (decNumberIsNaN(x)) {
1489:src/display.c **** 	    if (res) {
1490:src/display.c **** 	      scopy(res, "NaN");
1491:src/display.c **** 	    } else {
1492:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1493:src/display.c **** #ifndef REALBUILD
1494:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1495:src/display.c **** 	      forceDispPlot=0;
1496:src/display.c **** #endif
1497:src/display.c **** 	    }
1498:src/display.c **** 	    return 1;
1499:src/display.c **** 	  } else {
1500:src/display.c **** 	    if (decNumberIsNegative(x)) {
1501:src/display.c **** 	      if (res) *res++ = '-';
1502:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1503:src/display.c **** 	    }
1504:src/display.c **** 	    if (res)
1505:src/display.c **** 	      *res++ = '\237';
1506:src/display.c **** 	    else {
1507:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1508:src/display.c **** #ifndef REALBUILD
1509:src/display.c **** 	      if (decNumberIsNegative(x)) {
1510:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1511:src/display.c **** 	      }
1512:src/display.c **** 	      else {
ARM GAS  /tmp/ccW65oEM.s 			page 33


1513:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1514:src/display.c **** 	      }
1515:src/display.c **** 	      forceDispPlot=0;
1516:src/display.c **** #endif
1517:src/display.c **** 	    }
1518:src/display.c **** 	    return 1;
1519:src/display.c **** 	  }
1520:src/display.c **** 	}
1521:src/display.c **** 	return 0;
1522:src/display.c ****       }
1523:src/display.c **** 
1524:src/display.c **** 
1525:src/display.c ****       /* Extract the two lowest integral digits from the number
1526:src/display.c ****        */
1527:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1528:src/display.c **** 	decNumber n;
1529:src/display.c **** 
1530:src/display.c **** 	decNumberMod(&n, x, &const_100);
1531:src/display.c **** 	*v = dn_to_int(&n);
1532:src/display.c **** 	dn_mulpow10(&n, x, -2);
1533:src/display.c **** 	decNumberTrunc(res, &n);
1534:src/display.c ****       }
1535:src/display.c **** 
1536:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1536 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1537:src/display.c **** 	char b[32];
 276              		.loc 1 1537 2 view .LVU78
1538:src/display.c **** 	int i, j;
 277              		.loc 1 1538 2 view .LVU79
1539:src/display.c **** 
1540:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1540 2 view .LVU80
 279              		.loc 1 1540 12 view .LVU81
1536:src/display.c **** 	char b[32];
 280              		.loc 1 1536 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1541:src/display.c **** 	  if (v == 0)
1542:src/display.c **** 	    b[i] = spaces?' ':'0';
1543:src/display.c **** 	  else {
1544:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1544 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1536:src/display.c **** 	char b[32];
 292              		.loc 1 1536 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/ccW65oEM.s 			page 34


1536:src/display.c **** 	char b[32];
 295              		.loc 1 1536 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1540:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1540 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1541:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1541 4 is_stmt 1 view .LVU87
 303              		.loc 1 1544 6 view .LVU88
 304              		.loc 1 1544 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1545:src/display.c **** 	    v /= 10;
 311              		.loc 1 1545 6 is_stmt 1 view .LVU90
1546:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1546 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1540:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1540 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1541:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1541 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1540:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1540 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1546 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1545:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1545 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1546 6 is_stmt 1 view .LVU97
1540:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1540 17 view .LVU98
1540:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1540 12 view .LVU99
1540:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1540 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1540:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1540 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
ARM GAS  /tmp/ccW65oEM.s 			page 35


 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1540:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1540 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1541:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1541 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1542:src/display.c **** 	  else {
 349              		.loc 1 1542 6 is_stmt 1 view .LVU104
1540:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1540 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1540:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1540 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1542:src/display.c **** 	  else {
 355              		.loc 1 1542 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1540:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1540 17 is_stmt 1 view .LVU108
1540:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1540 12 view .LVU109
1540:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1540 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1540:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1540 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1547:src/display.c **** 	  }
1548:src/display.c **** 	}
1549:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1549 2 is_stmt 1 view .LVU112
 371              		.loc 1 1549 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1550:src/display.c **** 	  b[0] = '0';
1551:src/display.c **** 
1552:src/display.c **** 	/* Copy across and appropriately leading space things
1553:src/display.c **** 	 */
1554:src/display.c **** 	j = *jin;
 374              		.loc 1 1554 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1549:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1549 5 view .LVU115
ARM GAS  /tmp/ccW65oEM.s 			page 36


 377 005e 202B     		cmp	r3, #32
1550:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1550 4 is_stmt 1 view .LVU116
1550:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1550 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1554 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1555:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1555 2 view .LVU119
 386              		.loc 1 1555 8 view .LVU120
1554:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1554 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1555 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1556:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1556 4 is_stmt 1 view .LVU123
 395              	.LBB140:
 396              	.LBB141:
 401:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 401 12 view .LVU124
 398              	.LBE141:
 399              	.LBE140:
 400              		.loc 1 1556 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB145:
 403              	.LBB142:
 401:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 401 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 401:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 401 16 view .LVU127
 408              	.LBE142:
 409              	.LBI140:
 400:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 400 14 is_stmt 1 view .LVU128
 411              	.LBB143:
 401:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 401 3 view .LVU129
 401:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 401 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 401:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 401 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 401:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 401 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
ARM GAS  /tmp/ccW65oEM.s 			page 37


 421              	.LVL31:
 422              	.L37:
 403:src/display.c **** }
 423              		.loc 1 403 3 is_stmt 1 view .LVU133
 403:src/display.c **** }
 424              		.loc 1 403 3 is_stmt 0 view .LVU134
 425              	.LBE143:
 426              	.LBE145:
1557:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1557 4 is_stmt 1 view .LVU135
1555:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1555 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1557 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1555:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1555 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1558:src/display.c **** 	}
1559:src/display.c **** 	*jin = j;
 436              		.loc 1 1559 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1559 2 is_stmt 1 view .LVU140
 440              		.loc 1 1559 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1560:src/display.c **** 	return str;
1561:src/display.c ****       }
 443              		.loc 1 1561 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1559:src/display.c **** 	return str;
 445              		.loc 1 1559 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1560:src/display.c **** 	return str;
 447              		.loc 1 1560 2 is_stmt 1 view .LVU144
 448              		.loc 1 1561 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB146:
 458              	.LBB144:
 402:src/display.c ****   return res;
 459              		.loc 1 402 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 402:src/display.c ****   return res;
 463              		.loc 1 402 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
ARM GAS  /tmp/ccW65oEM.s 			page 38


 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE144:
 470              	.LBE146:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 418:src/display.c ****   int i;
 485              		.loc 1 418 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 419:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 419 3 view .LVU149
 420:src/display.c **** 
 490              		.loc 1 420 3 view .LVU150
 418:src/display.c ****   int i;
 491              		.loc 1 418 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 420:src/display.c **** 
 500              		.loc 1 420 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 422 3 is_stmt 1 view .LVU153
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 422 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB147:
 513              	.LBB148:
 402:src/display.c ****   return res;
 514              		.loc 1 402 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
ARM GAS  /tmp/ccW65oEM.s 			page 39


 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 401:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 401 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 401:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 401 19 view .LVU157
 523              	.LBE148:
 524              	.LBE147:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 422 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB154:
 528              	.LBB149:
 401:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 401 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 403:src/display.c **** }
 532              		.loc 1 403 3 is_stmt 1 view .LVU160
 403:src/display.c **** }
 533              		.loc 1 403 3 is_stmt 0 view .LVU161
 534              	.LBE149:
 535              	.LBE154:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 422 36 is_stmt 1 view .LVU162
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 422 13 view .LVU163
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 422 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 423:src/display.c **** }
 542              		.loc 1 423 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB155:
 544              	.LBB150:
 401:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 401 12 discriminator 3 view .LVU166
 401:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 401 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE150:
 548              	.LBE155:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 422 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB156:
 553              	.LBB151:
 401:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 401 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 401:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 401 16 discriminator 3 view .LVU170
ARM GAS  /tmp/ccW65oEM.s 			page 40


 558              	.LBE151:
 559              	.LBI147:
 400:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 400 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB152:
 401:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 401 3 discriminator 3 view .LVU172
 563              	.LBE152:
 564              	.LBE156:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 422 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB157:
 569              	.LBB153:
 401:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 401 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 402:src/display.c ****   return res;
 573              		.loc 1 402 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 403:src/display.c **** }
 578              		.loc 1 403 3 view .LVU176
 403:src/display.c **** }
 579              		.loc 1 403 3 is_stmt 0 view .LVU177
 580              	.LBE153:
 581              	.LBE157:
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 422 36 is_stmt 1 view .LVU178
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 422 13 view .LVU179
 422:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 422 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 424:src/display.c **** 
 589              		.loc 1 424 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 424:src/display.c **** 
 591              		.loc 1 424 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
ARM GAS  /tmp/ccW65oEM.s 			page 41


 605              	.LFB20:
1527:src/display.c **** 	decNumber n;
 606              		.loc 1 1527 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1528:src/display.c **** 
 610              		.loc 1 1528 2 view .LVU184
1530:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1530 2 view .LVU185
1527:src/display.c **** 	decNumber n;
 612              		.loc 1 1527 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1527:src/display.c **** 	decNumber n;
 621              		.loc 1 1527 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1530:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1530 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1530:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1530 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1527:src/display.c **** 	decNumber n;
 630              		.loc 1 1527 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1530:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1530 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1531:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1531 2 is_stmt 1 view .LVU192
1531:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1531 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1532:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1532 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1531:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1531 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1532:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1532 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
ARM GAS  /tmp/ccW65oEM.s 			page 42


 648              	.LVL53:
1533:src/display.c ****       }
 649              		.loc 1 1533 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1534:src/display.c **** 
 654              		.loc 1 1534 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1534:src/display.c **** 
 661              		.loc 1 1534 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1562:src/display.c **** 
1563:src/display.c **** 
1564:src/display.c ****       /* Display the number in H.MS mode.
1565:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1566:src/display.c ****        */
1567:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1568:src/display.c **** 	decNumber x, y, a, t, u;
1569:src/display.c **** 	int j=0;
1570:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1571:src/display.c **** 	unsigned int hr, min, sec, fs;
1572:src/display.c **** 
1573:src/display.c **** 	if (check_special_dn(rgx, res)) {
1574:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1575:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1576:src/display.c **** 	  return;
1577:src/display.c **** 	}
1578:src/display.c **** 
1579:src/display.c **** 	set_separator_decimal_modes();
1580:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1581:src/display.c **** 	dn_abs(&a, rgx);
1582:src/display.c **** 	if (decNumberIsNegative(&x)) {
1583:src/display.c **** 	  if (res != NULL)
1584:src/display.c **** 	    *res++ += '-';
1585:src/display.c **** 	  else
1586:src/display.c **** 	    SET_MANT_SIGN;
ARM GAS  /tmp/ccW65oEM.s 			page 43


1587:src/display.c **** 	  dn_minus(&x, &x);
1588:src/display.c **** 	}
1589:src/display.c **** 
1590:src/display.c **** 	decNumberHR2HMS(&y, &x);
1591:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1592:src/display.c **** 	decNumberRound(&u, &t);
1593:src/display.c **** 
1594:src/display.c **** 	hms_step(&t, &u, &fs);
1595:src/display.c **** 	hms_step(&u, &t, &sec);
1596:src/display.c **** 	hms_step(&t, &u, &min);
1597:src/display.c **** 	hr = dn_to_int(&t);
1598:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1599:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1600:src/display.c **** 
1601:src/display.c **** 	// degrees
1602:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1603:src/display.c **** 	res = set_dig_s(j, '@', res);
1604:src/display.c **** 	j += SEGS_PER_DIGIT;
1605:src/display.c **** 
1606:src/display.c **** 	// minutes
1607:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1608:src/display.c **** 	res = set_dig_s(j, '\'', res);
1609:src/display.c **** 	j += SEGS_PER_DIGIT;
1610:src/display.c **** 
1611:src/display.c **** 	// seconds
1612:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1613:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1614:src/display.c **** 
1615:src/display.c **** 	// Fractional seconds
1616:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1617:src/display.c **** 
1618:src/display.c **** 	// We're now pointing at the exponent's first digit...
1619:src/display.c **** 	res = set_dig_s(j, '"', res);
1620:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1621:src/display.c **** 
1622:src/display.c **** 	// Check for values too big or small
1623:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1624:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1625:src/display.c **** 	} else if (! dn_eq0(&a)) {
1626:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1627:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1628:src/display.c **** 	  }
1629:src/display.c **** 	}
1630:src/display.c ****       }
1631:src/display.c **** 
1632:src/display.c **** 
1633:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1634:src/display.c **** 	decNumber x, w, n, d, t;
1635:src/display.c **** 	char buf[32], *p = buf;
1636:src/display.c **** 	int j;
1637:src/display.c **** 
1638:src/display.c **** 	if (check_special_dn(rgx, res))
1639:src/display.c **** 	  return 1;
1640:src/display.c **** 	dn_abs(&x, rgx);
1641:src/display.c **** 	if (dn_ge(&x, &const_100000))
1642:src/display.c **** 	  return 0;
1643:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
ARM GAS  /tmp/ccW65oEM.s 			page 44


1644:src/display.c **** 	  return 0;
1645:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1646:src/display.c **** 	  if (res != NULL)
1647:src/display.c **** 	    *res++ += '-';
1648:src/display.c **** 	  else
1649:src/display.c **** 	    SET_MANT_SIGN;
1650:src/display.c **** 	}
1651:src/display.c **** 	decNumberFrac(&w, &x);
1652:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1653:src/display.c **** 
1654:src/display.c **** 	dn_divide(&t, &n, &d);
1655:src/display.c **** 	dn_compare(&t, &t, &w);
1656:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1657:src/display.c **** 
1658:src/display.c **** 	if (dn_eq(&n, &d)) {
1659:src/display.c **** 	  dn_inc(&w);
1660:src/display.c **** 	  decNumberZero(&n);
1661:src/display.c **** 	}
1662:src/display.c **** 
1663:src/display.c **** 	if (!UState.improperfrac) {
1664:src/display.c **** 	  if (!dn_eq0(&w)) {
1665:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1666:src/display.c **** 	    *p++ = ' ';
1667:src/display.c **** 	  }
1668:src/display.c **** 	} else {
1669:src/display.c **** 	  dn_multiply(&x, &w, &d);
1670:src/display.c **** 	  dn_add(&n, &n, &x);
1671:src/display.c **** 	}
1672:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1673:src/display.c **** 	*p++ = '/';
1674:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1675:src/display.c **** 	*p = '\0';
1676:src/display.c **** 	if ((p - 12) > buf) {
1677:src/display.c **** 	  p -= 12;
1678:src/display.c **** 	  *p = '<';
1679:src/display.c **** 	} else	p = buf;
1680:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1681:src/display.c **** 	  res = set_dig_s(j, *p, res);
1682:src/display.c **** 	  j += SEGS_PER_DIGIT;
1683:src/display.c **** 	}
1684:src/display.c **** 
1685:src/display.c **** 	if (dn_eq0(&t))
1686:src/display.c **** 	  p = (char *)S7_fract_EQ;
1687:src/display.c **** 	else if (decNumberIsNegative(&t))
1688:src/display.c **** 	  p = (char *)S7_fract_LT;
1689:src/display.c **** 	else
1690:src/display.c **** 	  p = (char *)S7_fract_GT;
1691:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1692:src/display.c **** 	  res = set_dig_s(j, *p, res);
1693:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1694:src/display.c **** 	}
1695:src/display.c **** 	return 1;
1696:src/display.c ****       }
1697:src/display.c **** 
1698:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1699:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1700:src/display.c **** 	decNumber c;
ARM GAS  /tmp/ccW65oEM.s 			page 45


1701:src/display.c **** 	int true_exp, x=0;
1702:src/display.c **** 	int min_pos_exp, max_neg_exp;
1703:src/display.c **** 
1704:src/display.c **** 	if ( mode != MODE_STD ) {
1705:src/display.c **** 	  min_pos_exp = 9;
1706:src/display.c **** 	  max_neg_exp = -5;
1707:src/display.c **** 	}
1708:src/display.c **** 	else {
1709:src/display.c **** 	  min_pos_exp = 12;
1710:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1711:src/display.c **** 	}
1712:src/display.c **** 
1713:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1714:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1715:src/display.c **** 
1716:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1717:src/display.c **** 	  x = *dd;
1718:src/display.c **** 	}
1719:src/display.c **** 
1720:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1721:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1722:src/display.c **** 	  *dd += -true_exp;
1723:src/display.c **** 	  return MODE_FIX;
1724:src/display.c **** 	}
1725:src/display.c **** 
1726:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1727:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1728:src/display.c **** 	}
1729:src/display.c **** 	else {
1730:src/display.c **** 	  return MODE_STD;
1731:src/display.c **** 	}
1732:src/display.c ****       }
1733:src/display.c **** #else
1734:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1735:src/display.c **** 	decNumber b, c;
1736:src/display.c **** 
1737:src/display.c **** 	dn_1(&b);
1738:src/display.c **** 	b.exponent -= UState.dispdigs;
1739:src/display.c **** 	dn_abs(&c, z);
1740:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1741:src/display.c **** 	  return MODE_FIX;
1742:src/display.c **** 	return MODE_STD;
1743:src/display.c ****       }
1744:src/display.c **** #endif
1745:src/display.c **** 
1746:src/display.c ****       /* SHOW display mode
1747:src/display.c ****        * in double precision show left or right part
1748:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1749:src/display.c ****        */
1750:src/display.c ****       static void show_x(char *x, int exp) {
1751:src/display.c **** 	const int dbl = is_dblmode();
1752:src/display.c **** 	char *p;
1753:src/display.c **** 	int i, j;
1754:src/display.c **** 	char *upper_str;
1755:src/display.c **** 	enum separator_modes separator_mode;
1756:src/display.c **** 	char decimal_mark;
1757:src/display.c **** 	char thousands_sep;
ARM GAS  /tmp/ccW65oEM.s 			page 46


1758:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1759:src/display.c **** 	const int grouping = 0;
1760:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1761:src/display.c **** 	const int grouping = !UState.nothousands;
1762:src/display.c **** #else
1763:src/display.c **** 	const int grouping = 1;
1764:src/display.c **** #endif
1765:src/display.c **** 	int negative;
1766:src/display.c **** 
1767:src/display.c **** 	if (x[0] == '-') {
1768:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1769:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1770:src/display.c **** 
1771:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1772:src/display.c **** 	  xcopy(x, small_minus, 4);
1773:src/display.c **** 	  x += 4;
1774:src/display.c **** 	  negative = 4;
1775:src/display.c **** #else
1776:src/display.c **** 	  ++x;
1777:src/display.c **** 	  negative = 1;
1778:src/display.c **** #endif
1779:src/display.c **** 	}
1780:src/display.c **** 	else negative = 0;
1781:src/display.c **** 
1782:src/display.c **** 	p = find_char(x, '\0');
1783:src/display.c **** 	xset(p, '0', 34 - (p - x));
1784:src/display.c **** 
1785:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1786:src/display.c **** 	  separator_mode = SEP_COMMA;
1787:src/display.c **** 	  decimal_mark = '.';
1788:src/display.c **** 	  thousands_sep = ',';
1789:src/display.c **** 	}
1790:src/display.c **** 	else {
1791:src/display.c **** 	  separator_mode = SEP_DOT;
1792:src/display.c **** 	  decimal_mark = ',';
1793:src/display.c **** 	  thousands_sep = '.';
1794:src/display.c **** 	}
1795:src/display.c **** 
1796:src/display.c **** 	if (State2.window) { // right half in double precision mode
1797:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1798:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1799:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1800:src/display.c **** 
1801:src/display.c **** 	  upper_str = x + 3;
1802:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1803:src/display.c **** 	  if (grouping) {
1804:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1805:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1806:src/display.c **** 	    x += 3 + 13 + 7;
1807:src/display.c **** 	  }
1808:src/display.c **** 	  else x += 3 + 13 + 6;
1809:src/display.c **** #else
1810:src/display.c **** 	  upper_str = x + 13;
1811:src/display.c **** 	  xset(upper_str, '.', 3);
1812:src/display.c **** 	  if (grouping) {
1813:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1814:src/display.c **** 	    upper_str[6] = thousands_sep;
ARM GAS  /tmp/ccW65oEM.s 			page 47


1815:src/display.c **** 	    x += 13 + 3 + 7;
1816:src/display.c **** 	  }
1817:src/display.c **** 	  else x += 13 + 3 + 6;
1818:src/display.c **** #endif
1819:src/display.c **** 	  negative = 0;
1820:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1821:src/display.c **** 	}
1822:src/display.c **** 	else {
1823:src/display.c **** 	  upper_str = x;
1824:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1825:src/display.c **** 	  x[1] = decimal_mark;
1826:src/display.c **** 	  if (grouping) {
1827:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1828:src/display.c **** 	    x[5] = thousands_sep;
1829:src/display.c **** 	    x += 9;
1830:src/display.c **** 	  }
1831:src/display.c **** 	  else x += 8;
1832:src/display.c **** 	  if (dbl) {
1833:src/display.c **** 	    if (exp < 0) {
1834:src/display.c **** 	      x[9] = '-';
1835:src/display.c **** 	      exp = -exp;
1836:src/display.c **** 	    }
1837:src/display.c **** 	    else
1838:src/display.c **** 	      x[9] = ' ';
1839:src/display.c **** 	    j = exp / 1000;
1840:src/display.c **** 	    x[10] = '0' + j;
1841:src/display.c **** 	    exp -= 1000 * j;
1842:src/display.c **** 	  }
1843:src/display.c **** 	  else {
1844:src/display.c **** 	    x[9] = '\0';
1845:src/display.c **** 	    x[10] = '\0';
1846:src/display.c **** 	  }
1847:src/display.c **** 	  xcopy(x + 1, x, 11);
1848:src/display.c **** 	  *x = 0;
1849:src/display.c **** 	  set_exp(exp, 1, CNULL);
1850:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1851:src/display.c **** 	}
1852:src/display.c **** 	if (grouping) {
1853:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1854:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1855:src/display.c **** 	  }
1856:src/display.c **** 	}
1857:src/display.c **** 
1858:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1859:src/display.c **** 	  set_dig(j, x[i]);
1860:src/display.c **** 
1861:src/display.c **** 	*x = '\0';
1862:src/display.c **** 	set_status(upper_str - negative);
1863:src/display.c ****       }
1864:src/display.c **** 
1865:src/display.c **** 
1866:src/display.c ****       /* Display the X register in the numeric portion of the display.
1867:src/display.c ****        * We have to account for the various display modes and numbers of
1868:src/display.c ****        * digits.
1869:src/display.c ****        */
1870:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1871:src/display.c **** 	decNumber z;
ARM GAS  /tmp/ccW65oEM.s 			page 48


1872:src/display.c **** 	int digits = DISPLAY_DIGITS;
1873:src/display.c **** 
1874:src/display.c **** 	if (dbl)
1875:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1876:src/display.c **** 	else
1877:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1878:src/display.c **** 	set_x_dn(&z, res, &digits);
1879:src/display.c ****       }
1880:src/display.c **** 
1881:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1882:src/display.c **** 	char x[50], *obp = x;
1883:src/display.c **** 	int odig = 0;
1884:src/display.c **** 	int show_exp = 0;
1885:src/display.c **** 	int j;
1886:src/display.c **** 	char mantissa[64];
1887:src/display.c **** 	int exp = 0;
1888:src/display.c **** 	char *p = mantissa;
1889:src/display.c **** 	char *r;
1890:src/display.c **** 	const char *q;
1891:src/display.c **** 	int count, i;
1892:src/display.c **** 	int extra_digits = 0;
1893:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1894:src/display.c **** 	int dd;
1895:src/display.c **** 	int dispdigs;
1896:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1897:src/display.c **** #else
1898:src/display.c **** 	int dd = UState.dispdigs;
1899:src/display.c **** 	int mode = UState.dispmode;
1900:src/display.c **** #endif
1901:src/display.c **** 	int c;
1902:src/display.c **** 	int negative = 0;
1903:src/display.c **** 	int trimzeros = 0;
1904:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1905:src/display.c **** 	const int show_large_exponent = 0;
1906:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1907:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1908:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1909:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1910:src/display.c **** #else
1911:src/display.c **** 	const int show_large_exponent = 1;
1912:src/display.c **** #endif
1913:src/display.c **** 
1914:src/display.c **** 	set_separator_decimal_modes();
1915:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1916:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1917:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1918:src/display.c **** 	    if (State2.hms) {
1919:src/display.c **** 	      set_x_hms(z, res);
1920:src/display.c **** 	      return;
1921:src/display.c **** 	    }
1922:src/display.c **** 	    else if (UState.fract) {
1923:src/display.c **** 	      if (set_x_fract(z, res))
1924:src/display.c **** 		return;
1925:src/display.c **** 	    }
1926:src/display.c **** 	  }
1927:src/display.c **** 	}		
1928:src/display.c **** #else
ARM GAS  /tmp/ccW65oEM.s 			page 49


1929:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1930:src/display.c **** 	  if (State2.hms) {
1931:src/display.c **** 	    set_x_hms(z, res);
1932:src/display.c **** 	    State2.hms = 0;
1933:src/display.c **** 	    return;
1934:src/display.c **** 	  } else if (UState.fract) {
1935:src/display.c **** 	    if (set_x_fract(z, res))
1936:src/display.c **** 	      return;
1937:src/display.c **** 	  }
1938:src/display.c **** 	}
1939:src/display.c **** #endif
1940:src/display.c **** 
1941:src/display.c **** 	if (check_special_dn(z, res))
1942:src/display.c **** 	  return;
1943:src/display.c **** 
1944:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1945:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1946:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1947:src/display.c **** 	  z->exponent = 0;
1948:src/display.c **** 	}
1949:src/display.c **** 
1950:src/display.c **** 	xset(x, '\0', sizeof(x));
1951:src/display.c **** 
1952:src/display.c **** 	if (dn_eq0(z)) {
1953:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1954:src/display.c **** 	    x[0] = '-';
1955:src/display.c **** 	    x[1] = '0';
1956:src/display.c **** 	  } else
1957:src/display.c **** 	    x[0] = '0';
1958:src/display.c **** 	} else
1959:src/display.c **** 	  decNumberToString(z, x);
1960:src/display.c **** 
1961:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1962:src/display.c **** 	  show_x(x, exp);
1963:src/display.c **** 	  return;
1964:src/display.c **** 	}
1965:src/display.c **** 
1966:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1967:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1968:src/display.c **** 	  //  ALL mode: fill the display
1969:src/display.c **** 	  dd = *display_digits - 1;
1970:src/display.c **** 	else
1971:src/display.c **** 	  dd = dispdigs;
1972:src/display.c **** 
1973:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1974:src/display.c **** 	  int orig_mode = mode;
1975:src/display.c **** 
1976:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1977:src/display.c **** 	  if (orig_mode != MODE_SIG0)
1978:src/display.c **** 	    // allow zeros to be trimmed
1979:src/display.c **** 	    trimzeros = 1;
1980:src/display.c **** 	  if (orig_mode == MODE_STD)
1981:src/display.c **** 	    dd = *display_digits - 1;
1982:src/display.c ****  	}
1983:src/display.c **** #else
1984:src/display.c **** 	if (mode == MODE_STD) {
1985:src/display.c **** 	  mode = std_round_fix(z);
ARM GAS  /tmp/ccW65oEM.s 			page 50


1986:src/display.c **** 	  trimzeros = 1;
1987:src/display.c **** 	  dd = *display_digits - 1;
1988:src/display.c **** 	} else if (dd >= *display_digits)
1989:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
1990:src/display.c **** 	  dd = *display_digits - 1;
1991:src/display.c **** #endif
1992:src/display.c **** 
1993:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
1994:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
1995:src/display.c **** 
1996:src/display.c **** 	q = find_char(x, 'E');
1997:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1998:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
1999:src/display.c **** 	if (q == NULL) exp = 0;
2000:src/display.c **** 	else {
2001:src/display.c **** 	  exp = s_to_i(q+1);
2002:src/display.c **** 	  if (*q == 'D') exp = -exp;
2003:src/display.c **** 	}
2004:src/display.c **** #else
2005:src/display.c **** 	if (q == NULL) exp = 0;
2006:src/display.c **** 	else exp = s_to_i(q+1);
2007:src/display.c **** #endif
2008:src/display.c **** 
2009:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2010:src/display.c **** 	for (q=x; *q == ' '; q++);
2011:src/display.c **** 	if (!res) {
2012:src/display.c **** 	  CLR_EXP_SIGN;
2013:src/display.c **** 	  CLR_MANT_SIGN;
2014:src/display.c **** 	}
2015:src/display.c **** 	if (*q == '-') {
2016:src/display.c **** 	  negative = 1;
2017:src/display.c **** 	  q++;
2018:src/display.c **** 	} else if (*q == '+')
2019:src/display.c **** 	  q++;
2020:src/display.c **** 	for (; *q == '0'; q++);
2021:src/display.c **** 	if (*q == '.') {
2022:src/display.c **** 	  do
2023:src/display.c **** 	    exp--;
2024:src/display.c **** 	  while (*++q == '0');
2025:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2026:src/display.c **** 	    *p++ = *q++;
2027:src/display.c **** 	} else {
2028:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2029:src/display.c **** 	    *p++ = *q++;
2030:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2031:src/display.c **** 	    *p++ = *q++;
2032:src/display.c **** 	    exp++;
2033:src/display.c **** 	  }
2034:src/display.c **** 	  if (*q == '.') {
2035:src/display.c **** 	    q++;
2036:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2037:src/display.c **** 	      *p++ = *q++;
2038:src/display.c **** 	  }
2039:src/display.c **** 	}
2040:src/display.c **** 
2041:src/display.c **** 	if (mode == MODE_FIX) {
2042:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
ARM GAS  /tmp/ccW65oEM.s 			page 51


2043:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2044:src/display.c **** 	  else {
2045:src/display.c **** 	    extra_digits = exp;
2046:src/display.c **** 	    /* We might have push the fixed decimals off the
2047:src/display.c **** 	     * screen so adjust if so.
2048:src/display.c **** 	     */
2049:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2050:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2051:src/display.c **** 	  }
2052:src/display.c **** 	}
2053:src/display.c **** 
2054:src/display.c **** 	// Round the mantissa to the number of digits desired
2055:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2056:src/display.c **** 	if (*p >= '5') {	// Round up
2057:src/display.c **** 	  *p = '0';
2058:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2059:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2060:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2061:src/display.c **** 	    mantissa[0] = '1';
2062:src/display.c **** 	    exp++;
2063:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2064:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2065:src/display.c **** 	      extra_digits = 0;
2066:src/display.c **** 	    }
2067:src/display.c **** 	  } else {
2068:src/display.c **** 	    while (*--p == '9')
2069:src/display.c **** 	      *p = '0';
2070:src/display.c **** 	    (*p)++;
2071:src/display.c **** 	  }
2072:src/display.c **** 	}
2073:src/display.c **** 
2074:src/display.c **** 	// Zap what is left
2075:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2076:src/display.c **** 
2077:src/display.c **** 	p = mantissa;
2078:src/display.c **** 	switch (mode) {
2079:src/display.c **** 	default:
2080:src/display.c **** 	case MODE_STD:   
2081:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2082:src/display.c **** 	  if (count != *display_digits)
2083:src/display.c **** 	    count++;
2084:src/display.c **** 	  // Too big or too small to fit on display
2085:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2086:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2087:src/display.c **** 	    case -1:
2088:src/display.c **** 	    case 2:
2089:src/display.c **** 	      *obp++ = *p++;
2090:src/display.c **** 	      odig++;
2091:src/display.c **** 	      dd--;
2092:src/display.c **** 	      exp--;
2093:src/display.c **** 	    case -2:
2094:src/display.c **** 	    case 1:
2095:src/display.c **** 	      *obp++ = *p++;
2096:src/display.c **** 	      odig++;
2097:src/display.c **** 	      dd--;
2098:src/display.c **** 	      exp--;
2099:src/display.c **** 	    case 0:
ARM GAS  /tmp/ccW65oEM.s 			page 52


2100:src/display.c **** 	      ;
2101:src/display.c **** 	    };
2102:src/display.c **** 	    *obp++ = *p++;
2103:src/display.c **** 	    odig++;
2104:src/display.c **** 	    *obp++ = '.';
2105:src/display.c **** 	    for (i=1; i<count; i++) {
2106:src/display.c **** 	      *obp++ = *p++;
2107:src/display.c **** 	      odig++;
2108:src/display.c **** 	    }
2109:src/display.c **** 	    show_exp = 1;
2110:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2111:src/display.c **** 	    for(i=0; i<=exp; i++) {
2112:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2113:src/display.c **** 		*obp++ = ',';
2114:src/display.c **** 	      *obp++ = *p++;
2115:src/display.c **** 	      odig++;
2116:src/display.c **** 	    }
2117:src/display.c **** 	    *obp++ = '.';
2118:src/display.c **** 	    if (count > (exp + 1)) {
2119:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2120:src/display.c **** 		*obp++ = *p++;
2121:src/display.c **** 		odig++;
2122:src/display.c **** 	      }
2123:src/display.c **** 	    }
2124:src/display.c **** 	  } else {		// All digits to right of decimal point
2125:src/display.c **** 	    *obp++ = '0';
2126:src/display.c **** 	    odig++;
2127:src/display.c **** 	    *obp++ = '.';
2128:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2129:src/display.c **** 	      *obp++ = '0';
2130:src/display.c **** 	      odig++;
2131:src/display.c **** 	    }
2132:src/display.c **** 	    for (i=0; i<count; i++) {
2133:src/display.c **** 	      *obp++ = *p++;
2134:src/display.c **** 	      odig++;
2135:src/display.c **** 	    }
2136:src/display.c **** 	  }
2137:src/display.c **** 	  break;
2138:src/display.c **** 
2139:src/display.c **** 	case MODE_FIX:
2140:src/display.c **** 	  j = 0;
2141:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2142:src/display.c **** 	    for (i=0; i<=exp; i++) {
2143:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2144:src/display.c **** 		*obp++ = ',';
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	    }
2148:src/display.c **** 	    *obp++ = '.';
2149:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2150:src/display.c **** 	      *obp++ = *p++;
2151:src/display.c **** 	      odig++;
2152:src/display.c **** 	    }
2153:src/display.c **** 	  } else {		// All digits to right of decimal point
2154:src/display.c **** 	    *obp++ = '0';
2155:src/display.c **** 	    odig++;
2156:src/display.c **** 	    *obp++ = '.';
ARM GAS  /tmp/ccW65oEM.s 			page 53


2157:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2158:src/display.c **** 	      *obp++ = '0';
2159:src/display.c **** 	      odig++;
2160:src/display.c **** 	      dd--;
2161:src/display.c **** 	    }
2162:src/display.c **** 	    while (dd-- > 0) {
2163:src/display.c **** 	      *obp++ = *p++;
2164:src/display.c **** 	      odig++;
2165:src/display.c **** 	    }
2166:src/display.c **** 	  }
2167:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2168:src/display.c **** 	  if (trimzeros)
2169:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2170:src/display.c **** 	      obp--;
2171:src/display.c **** 	      odig--;
2172:src/display.c **** 	    }
2173:src/display.c **** #endif			
2174:src/display.c **** 	  break;
2175:src/display.c **** 
2176:src/display.c **** 	case MODE_ENG:
2177:src/display.c **** 	  switch (exp % 3) {
2178:src/display.c **** 	  case -1:
2179:src/display.c **** 	  case 2:
2180:src/display.c **** 	    *obp++ = *p++;
2181:src/display.c **** 	    odig++;
2182:src/display.c **** 	    dd--;
2183:src/display.c **** 	    exp--;
2184:src/display.c **** 	  case -2:
2185:src/display.c **** 	  case 1:
2186:src/display.c **** 	    *obp++ = *p++;
2187:src/display.c **** 	    odig++;
2188:src/display.c **** 	    dd--;
2189:src/display.c **** 	    exp--;
2190:src/display.c **** 	  case 0:
2191:src/display.c **** 	    ;
2192:src/display.c **** 	  };
2193:src/display.c **** 	  // Falling through
2194:src/display.c **** 
2195:src/display.c **** 	case MODE_SCI:
2196:src/display.c **** 	  *obp++ = *p++;
2197:src/display.c **** 	  odig++;
2198:src/display.c **** 	  *obp++ = '.';
2199:src/display.c **** 	  dd--;
2200:src/display.c **** 	  while (dd-- >= 0) {
2201:src/display.c **** 	    *obp++ = *p++;
2202:src/display.c **** 	    odig++;
2203:src/display.c **** 	  }
2204:src/display.c **** 	  show_exp = 1;
2205:src/display.c **** 	}
2206:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2207:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2208:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2209:src/display.c **** 	    obp--;
2210:src/display.c **** 	    odig--;
2211:src/display.c **** 	  }
2212:src/display.c **** #endif	
2213:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
ARM GAS  /tmp/ccW65oEM.s 			page 54


2214:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2215:src/display.c **** 	  set_x_dn(z, res, display_digits);
2216:src/display.c **** 	  return;
2217:src/display.c **** 	}
2218:src/display.c **** 	/* Finally, send the output to the display */
2219:src/display.c **** 	*obp = '\0';
2220:src/display.c **** 	if (odig > *display_digits)
2221:src/display.c **** 	  odig = *display_digits;
2222:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2223:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2224:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2225:src/display.c **** 	if (negative) {
2226:src/display.c **** 	  if (res) *res++ = '-';
2227:src/display.c **** 	  else {
2228:src/display.c **** 	    if (j == 0)
2229:src/display.c **** 	      SET_MANT_SIGN;
2230:src/display.c **** 	    else
2231:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2232:src/display.c **** 	  }
2233:src/display.c **** 	}
2234:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2235:src/display.c **** 	  if (c == '.') {
2236:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2237:src/display.c **** 	  } else if (c == ',') {
2238:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2239:src/display.c **** 	  } else {
2240:src/display.c **** 	    res = set_dig_s(j, c, res);
2241:src/display.c **** 	    j += SEGS_PER_DIGIT;
2242:src/display.c **** 	  }
2243:src/display.c **** 	}
2244:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2245:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2246:src/display.c **** 	  if ( !res ) {
2247:src/display.c **** 	    set_exp(exp, 4, res);
2248:src/display.c **** 	  }
2249:src/display.c **** 	  else {
2250:src/display.c **** 	    set_exp(exp, 0, res);
2251:src/display.c **** 	  }
2252:src/display.c **** 	}
2253:src/display.c **** #else
2254:src/display.c **** 	if (show_exp)
2255:src/display.c **** 	  set_exp(exp, 0, res);
2256:src/display.c **** #endif
2257:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2258:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2259:src/display.c **** 	*display_digits = odig;
2260:src/display.c ****       }
2261:src/display.c **** 
2262:src/display.c **** #if defined(QTGUI) || defined(IOS)
2263:src/display.c ****       void format_display(char *buf) {
2264:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2265:src/display.c **** 	  {
2266:src/display.c **** 	    const char *p = get_cmdline();
2267:src/display.c **** 	    if (p == NULL) {
2268:src/display.c **** 	      format_reg(regX_idx, buf);
2269:src/display.c **** 	    } else {
2270:src/display.c **** 	      scopy(buf, p);
ARM GAS  /tmp/ccW65oEM.s 			page 55


2271:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2272:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2273:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2274:src/display.c **** 		buf[CmdLineEex] = 'E';
2275:src/display.c **** 		buf[CmdLineEex+1] = '-';
2276:src/display.c **** 	      }
2277:src/display.c **** #  endif
2278:src/display.c **** 	    }
2279:src/display.c **** 	  }
2280:src/display.c **** 	else {
2281:src/display.c **** 	  buf[0]=0;
2282:src/display.c **** 	}
2283:src/display.c ****       }
2284:src/display.c **** #endif
2285:src/display.c **** 
2286:src/display.c ****       void format_reg(int index, char *buf) {
2287:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2288:src/display.c **** 
2289:src/display.c **** 	if (is_intmode())
2290:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2291:src/display.c **** #ifndef HP16C_MODE_CHANGE
2292:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2293:src/display.c **** 	  decNumber x;
2294:src/display.c **** 	  int s;
2295:src/display.c **** 	  unsigned long long int v;
2296:src/display.c **** 
2297:src/display.c **** 	  getRegister(&x, index);
2298:src/display.c **** 	  v = dn_to_ull(&x, &s);
2299:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2300:src/display.c **** 	}
2301:src/display.c **** #endif
2302:src/display.c **** 	else
2303:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2304:src/display.c ****       }
2305:src/display.c **** 
2306:src/display.c ****       /* Display the status screen */
2307:src/display.c ****       static void show_status(void) {
2308:src/display.c **** 	int i, n;
2309:src/display.c **** 	int j = SEGS_EXP_BASE;
2310:src/display.c **** 	const int status = State2.status - 3;
2311:src/display.c **** 	char buf[16], *p = buf;
2312:src/display.c **** 	unsigned int pc;
2313:src/display.c **** 
2314:src/display.c **** 	if (status == -2) {
2315:src/display.c **** 	  set_status("Free:");
2316:src/display.c **** 	  p = num_arg(buf, free_mem());
2317:src/display.c **** 	  p = scopy(p, " , FL. ");
2318:src/display.c **** 	  p = num_arg(p, free_flash());
2319:src/display.c **** 	  *p = '\0';
2320:src/display.c **** 	  set_digits_string(buf, 0);
2321:src/display.c **** 	}
2322:src/display.c **** 	else if (status == -1) {
2323:src/display.c **** 	  /* Top line */
2324:src/display.c **** 	  p = scopy(buf, "Regs:");
2325:src/display.c **** 	  if (SizeStatRegs)
2326:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2327:src/display.c **** 	  *p = '\0';
ARM GAS  /tmp/ccW65oEM.s 			page 56


2328:src/display.c **** 	  set_status(buf);
2329:src/display.c **** 
2330:src/display.c **** 	  /* Bottom line */
2331:src/display.c **** 	  p = num_arg(buf, global_regs());
2332:src/display.c **** 	  if (LocalRegs < 0) {
2333:src/display.c **** 	    p = scopy(p, " , Loc. ");
2334:src/display.c **** 	    p = num_arg(p, local_regs());
2335:src/display.c **** 	  }
2336:src/display.c **** 	  *p = '\0';
2337:src/display.c **** 	  set_digits_string(buf, 0);
2338:src/display.c **** 	} else {
2339:src/display.c **** 	  int base;
2340:src/display.c **** 	  int end;
2341:src/display.c **** 	  int group = 10;
2342:src/display.c **** 	  int start = 0;
2343:src/display.c **** 		
2344:src/display.c **** 	  if (status <= 9) {
2345:src/display.c **** 	    base = 10 * status;
2346:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2347:src/display.c **** 	    p = scopy(buf, "FL ");
2348:src/display.c **** 	    p = num_arg_0(p, base, 2);
2349:src/display.c **** 	    *p++ = '-';
2350:src/display.c **** 	    p = num_arg_0(p, end, 2);
2351:src/display.c **** 	    *p = '\0';
2352:src/display.c **** 	    set_status(buf);
2353:src/display.c **** 	  }
2354:src/display.c **** 	  else if (status == 10) {
2355:src/display.c **** 	    base = regX_idx;
2356:src/display.c **** 	    end = regK_idx;
2357:src/display.c **** 	    start = 3;
2358:src/display.c **** 	    group = 4;
2359:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2360:src/display.c **** 	  }
2361:src/display.c **** 	  else { // status == 11
2362:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2363:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2364:src/display.c **** 	    set_status("FL.00-.15");
2365:src/display.c **** 	  }
2366:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2367:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2368:src/display.c **** 	  j += SEGS_PER_DIGIT;
2369:src/display.c **** 	  for (i = start; i < group + start; i++) {
2370:src/display.c **** 	    int k = i + base - start;
2371:src/display.c **** 	    int l = get_user_flag(k);
2372:src/display.c **** 	    k += group;
2373:src/display.c **** 	    if (end >= k) {
2374:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2375:src/display.c **** 	      k += group;
2376:src/display.c **** 	      if (end >= k)
2377:src/display.c **** 		l |= (get_user_flag(k) << 2);
2378:src/display.c **** 	    }
2379:src/display.c **** 	    set_dig(j, l);
2380:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2381:src/display.c **** 	    j += SEGS_PER_DIGIT;
2382:src/display.c **** 	    if (i == 4) {
2383:src/display.c **** 	      set_dig(j, 8);
2384:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
ARM GAS  /tmp/ccW65oEM.s 			page 57


2385:src/display.c **** 	      j += SEGS_PER_DIGIT;
2386:src/display.c **** 	    }
2387:src/display.c **** 	  }
2388:src/display.c **** 	}
2389:src/display.c **** 
2390:src/display.c **** 	j = SEGS_EXP_BASE;
2391:src/display.c **** 	pc = state_pc();
2392:src/display.c **** 	if (isXROM(pc))
2393:src/display.c **** 	  pc = 1;
2394:src/display.c **** 	for (n=i=0; i<4; i++) {
2395:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2396:src/display.c **** 	    if (++n == 4) {
2397:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2398:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2399:src/display.c **** 	    } else {
2400:src/display.c **** 	      set_dig(j, 'A'+i);
2401:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2402:src/display.c **** 	    }
2403:src/display.c **** 	  }
2404:src/display.c **** 	}
2405:src/display.c ****       }
2406:src/display.c **** 
2407:src/display.c **** 
2408:src/display.c ****       /* Display the list of alpha labels */
2409:src/display.c ****       static void show_label(void) {
2410:src/display.c **** 	char buf[16];
2411:src/display.c **** 	unsigned short int pc = State2.digval;
2412:src/display.c **** 	unsigned int op = getprog(pc);
2413:src/display.c **** 	int n = nLIB(pc);
2414:src/display.c **** 	unsigned short int lblpc;
2415:src/display.c **** 
2416:src/display.c **** 	set_status(prt((opcode)op, buf));
2417:src/display.c **** 	set_digits_string(libname[n], 0);
2418:src/display.c **** #ifndef REALBUILD
2419:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2420:src/display.c **** #endif
2421:src/display.c **** 
2422:src/display.c **** 	if (op & OP_DBL) {
2423:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2424:src/display.c **** 	  if (lblpc != pc) {
2425:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2426:src/display.c **** 	    n = nLIB(lblpc);
2427:src/display.c **** 	    if (n == REGION_RAM)
2428:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2429:src/display.c **** 	    else {
2430:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2431:src/display.c **** #ifndef REALBUILD
2432:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2433:src/display.c **** #endif
2434:src/display.c **** 	    }
2435:src/display.c **** 	  }
2436:src/display.c **** 	}
2437:src/display.c ****       }
2438:src/display.c **** 
2439:src/display.c ****       /* Display a list of register contents */
2440:src/display.c ****       static void show_registers(void) {
2441:src/display.c **** 	char buf[16], *bp;
ARM GAS  /tmp/ccW65oEM.s 			page 58


2442:src/display.c **** 	int n = State2.digval;
2443:src/display.c **** 	
2444:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2445:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2446:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2447:src/display.c **** 	  n;
2448:src/display.c **** #else
2449:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2450:src/display.c **** 	  n;
2451:src/display.c **** #endif
2452:src/display.c **** 
2453:src/display.c **** 	if (State2.disp_as_alpha) {
2454:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2455:src/display.c **** 	}
2456:src/display.c **** 	else {
2457:src/display.c **** 	  xset(buf, '\0', 16);
2458:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2459:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2460:src/display.c **** #else
2461:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2462:src/display.c **** #endif
2463:src/display.c **** 	  if (State2.local) {
2464:src/display.c **** 	    *bp++ = '.';
2465:src/display.c **** 	    if (n >= 100) {
2466:src/display.c **** 	      *bp++ = '1';
2467:src/display.c **** 	      n -= 100;
2468:src/display.c **** 	    }
2469:src/display.c **** 	  }
2470:src/display.c **** 	  if (n < 100)
2471:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2472:src/display.c **** 	  else
2473:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2474:src/display.c **** 	  set_status(buf);
2475:src/display.c **** 	}
2476:src/display.c **** 	format_reg(reg, CNULL);
2477:src/display.c ****       }
2478:src/display.c **** 
2479:src/display.c **** 
2480:src/display.c ****       static void set_annunciators(void)
2481:src/display.c ****       {
2482:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2483:src/display.c **** 
2484:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2485:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2486:src/display.c **** 	 * browsing constants.
2487:src/display.c **** 	 */
2488:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2489:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2490:src/display.c **** #else
2491:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2492:src/display.c **** #endif
2493:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2494:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2495:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2496:src/display.c **** 	set_IO_annunciator();
2497:src/display.c **** 
2498:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
ARM GAS  /tmp/ccW65oEM.s 			page 59


2499:src/display.c **** 	 */
2500:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2501:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2502:src/display.c ****       }
2503:src/display.c **** 
2504:src/display.c **** 
2505:src/display.c ****       /*
2506:src/display.c ****        *  Toggle the little "=" sign
2507:src/display.c ****        */
2508:src/display.c ****       void set_IO_annunciator(void) {
2509:src/display.c **** #ifndef DM42
2510:src/display.c **** 	int on = SerialOn
2511:src/display.c **** #endif
2512:src/display.c **** #ifdef DM42
2513:src/display.c **** 	  int on = 0
2514:src/display.c **** #endif
2515:src/display.c **** #ifdef REALBUILD
2516:src/display.c **** 	  || DebugFlag
2517:src/display.c **** #endif
2518:src/display.c **** #ifdef INFRARED
2519:src/display.c **** 	  || PrinterColumn != 0
2520:src/display.c **** #endif
2521:src/display.c **** 	  ;
2522:src/display.c **** 
2523:src/display.c **** 	if (on != IoAnnunciator) {
2524:src/display.c **** 	  dot(LIT_EQ, on);
2525:src/display.c **** 	  IoAnnunciator = on;
2526:src/display.c **** 	  finish_display(); //LIT_EQ
2527:src/display.c **** 	}
2528:src/display.c ****       }
2529:src/display.c **** 
2530:src/display.c ****       /*
2531:src/display.c ****        *  Update the display
2532:src/display.c ****        */
2533:src/display.c ****       void display(void) {
2534:src/display.c **** 	int i, j;
2535:src/display.c **** 	char buf[40], *bp = buf;
2536:src/display.c **** 	const char *p;
2537:src/display.c **** 	int annuc = 0;
2538:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2539:src/display.c **** 	int skip = 0;
2540:src/display.c **** 	int x_disp = 0;
2541:src/display.c **** 	const int shift = cur_shift();
2542:src/display.c **** 
2543:src/display.c **** 
2544:src/display.c **** 
2545:src/display.c **** 	if (State2.disp_freeze) {
2546:src/display.c **** 	  State2.disp_freeze = 0;
2547:src/display.c **** 	  State2.disp_temp = 1;
2548:src/display.c **** #ifdef CONSOLE
2549:src/display.c **** 	  JustDisplayed = 1;
2550:src/display.c **** #endif
2551:src/display.c **** 	  ShowRPN = 0;
2552:src/display.c **** 	  return;
2553:src/display.c **** 	}
2554:src/display.c **** 
2555:src/display.c **** 	if (WasDataEntry) {
ARM GAS  /tmp/ccW65oEM.s 			page 60


2556:src/display.c **** #if defined(QTGUI) || defined(IOS)
2557:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2558:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2559:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2560:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2561:src/display.c **** #endif
2562:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2563:src/display.c **** 
2564:src/display.c **** 	  // Erase 7-segment display
2565:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2566:src/display.c **** 	    clr_dot(i);
2567:src/display.c **** 	  }
2568:src/display.c **** 	  goto only_update_x;
2569:src/display.c **** 	}
2570:src/display.c **** 
2571:src/display.c **** 	// Clear display
2572:src/display.c **** 	reset_disp();
2573:src/display.c **** 
2574:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2575:src/display.c **** 	if (State2.cmplx  && !cata) {
2576:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
2577:src/display.c **** 	  set_status(buf);
2578:src/display.c **** 	}
2579:src/display.c **** 	if (State2.version) {
2580:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2581:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2582:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2583:src/display.c **** #ifndef REALBUILD
2584:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2585:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2586:src/display.c **** #endif
2587:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2588:src/display.c **** 	  set_status(vers);
2589:src/display.c **** 	  skip = 1;
2590:src/display.c **** 	  goto nostk;
2591:src/display.c **** 	} else if (State2.confirm) {
2592:src/display.c **** 	  set_status(S_SURE);
2593:src/display.c **** 	} else if (State2.hyp) {
2594:src/display.c **** 	  bp = scopy(bp, "HYP");
2595:src/display.c **** 	  if (! State2.dot)
2596:src/display.c **** 	    *bp++ = '\235';
2597:src/display.c **** 	  set_status(buf);
2598:src/display.c **** 	} else if (State2.gtodot) {
2599:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2600:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2601:src/display.c **** 	  if (State2.numdigit > 0)
2602:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2603:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2604:src/display.c **** 	  *bp++ = '_';
2605:src/display.c **** 	  set_status(buf);
2606:src/display.c **** 	} else if (State2.rarg) {
2607:src/display.c **** 	  /* Commands with arguments */
2608:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2609:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2610:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2611:src/display.c **** #endif
2612:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
ARM GAS  /tmp/ccW65oEM.s 			page 61


2613:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2614:src/display.c **** 	  if (State2.dot) {
2615:src/display.c **** 	    *bp++ = 's';
2616:src/display.c **** 	    *bp++ = '_';
2617:src/display.c **** 	  } else if (shift == SHIFT_F) {
2618:src/display.c **** 	    *bp++ = '\021';
2619:src/display.c **** 	    *bp++ = '_';
2620:src/display.c **** 	  } else {
2621:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2622:src/display.c **** 	       : State2.ind ? 2 
2623:src/display.c **** 	       : num_arg_digits(CmdBase); */
2624:src/display.c **** 	    if (State2.local)
2625:src/display.c **** 	      *bp++ = '.';
2626:src/display.c **** 	    if (State2.numdigit > 0) {
2627:src/display.c **** 	      if (State2.shuffle)
2628:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2629:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2630:src/display.c **** 	      else
2631:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2632:src/display.c **** 	    }
2633:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2634:src/display.c **** 	    *bp++ = '_';
2635:src/display.c **** 	  }
2636:src/display.c **** 	  set_status(buf);
2637:src/display.c **** 	} else if (State2.test != TST_NONE) {
2638:src/display.c **** 	  *bp++ = 'x';
2639:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2640:src/display.c **** 	  *bp++ = '_';
2641:src/display.c **** 	  *bp++ = '?';
2642:src/display.c **** 	  set_status(buf);
2643:src/display.c **** 	} else if (cata) {
2644:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2645:src/display.c **** 	  char b2[16];
2646:src/display.c **** 	  const char *p;
2647:src/display.c **** 
2648:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2649:src/display.c **** 	  p = catcmd(op, b2);
2650:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2651:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2652:src/display.c **** 	  bp = scopy(bp, p);
2653:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2654:src/display.c **** 	    // State2.disp_small = 1;
2655:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2656:src/display.c **** 	      set_digits_string("0 to 255", 0);
2657:src/display.c **** 	    else
2658:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2659:src/display.c **** 	    skip = 1;
2660:src/display.c **** 	  } else if (State2.runmode) {
2661:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2662:src/display.c **** 	      decNumber x, r;
2663:src/display.c **** 	      decimal64 z;
2664:src/display.c **** 
2665:src/display.c **** 	      getX(&x);
2666:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2667:src/display.c **** 		const unsigned int f = argKIND(op);
2668:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2669:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/ccW65oEM.s 			page 62


2670:src/display.c **** 		  update_speed(0);
2671:src/display.c **** 		  fp(&r, &x);
2672:src/display.c **** 		}
2673:src/display.c **** 		else
2674:src/display.c **** 		  set_NaN(&r);
2675:src/display.c **** 	      } else
2676:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2677:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2678:src/display.c **** 	      packed_from_number(&z, &r);
2679:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2680:src/display.c **** 	      skip = 1;
2681:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2682:src/display.c **** 	      REGISTER z, *const x = StackBase;
2683:src/display.c **** 	      copyreg(&z, x);
2684:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2685:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2686:src/display.c **** 	      copyreg(x, &z);
2687:src/display.c **** 	      skip = 1;
2688:src/display.c **** 	    }
2689:src/display.c **** 	  }
2690:src/display.c **** 	  set_status(buf);
2691:src/display.c **** 	} else if (State2.multi) {
2692:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2693:src/display.c **** 	  if (State2.numdigit > 0) {
2694:src/display.c **** 	    *bp++ = (char) State2.digval;
2695:src/display.c **** 	    if (State2.numdigit > 1)
2696:src/display.c **** 	      *bp++ = State2.digval2;
2697:src/display.c **** 	  }
2698:src/display.c **** 	  set_status(buf);
2699:src/display.c **** 	} else if (State2.status) {
2700:src/display.c **** 	  show_status();
2701:src/display.c **** 	  skip = 1;
2702:src/display.c **** 	} else if (State2.labellist) {
2703:src/display.c **** 	  show_label();
2704:src/display.c **** 	  skip = 1;
2705:src/display.c **** 	} else if (State2.registerlist) {
2706:src/display.c **** 	  show_registers();
2707:src/display.c **** 	  skip = 1;
2708:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2709:src/display.c **** 	    annunciators();
2710:src/display.c **** 	  }
2711:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2712:src/display.c **** 	} else if (State2.disp_as_alpha) {
2713:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2714:src/display.c **** #endif
2715:src/display.c **** 	} else if (State2.runmode) {
2716:src/display.c **** 	  if (DispMsg) { 
2717:src/display.c **** 	    set_status(DispMsg);
2718:src/display.c **** 	  } else if (DispPlot) {
2719:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2720:src/display.c **** 	  } else if (State2.alphas) {
2721:src/display.c **** #if 0
2722:src/display.c **** 	    set_digits_string("AlpHA", 0);
2723:src/display.c **** #endif
2724:src/display.c **** 	    bp = scopy(buf, Alpha);
2725:src/display.c **** 	    j = State2.alpha_pos;
2726:src/display.c **** 	    if (j != 0) {
ARM GAS  /tmp/ccW65oEM.s 			page 63


2727:src/display.c **** 	      i = slen(buf);
2728:src/display.c **** 	      //				
2729:src/display.c **** 	      j *= 6;
2730:src/display.c **** #ifdef BIGGER_DISPLAY
2731:src/display.c **** 	      if ( i - j >= 20 )
2732:src/display.c **** #else
2733:src/display.c **** 	      if ( i - j >= 12 )
2734:src/display.c **** #endif
2735:src/display.c **** 		{
2736:src/display.c **** 		buf[ (i - j) ] = '\0';
2737:src/display.c **** 		set_status_right(buf);
2738:src/display.c **** 		}
2739:src/display.c **** 	      else {
2740:src/display.c **** 		set_status(buf);
2741:src/display.c **** 	      }
2742:src/display.c **** 	    } else {
2743:src/display.c **** 	      if (shift != SHIFT_N) {
2744:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2745:src/display.c **** 		*bp++ = '\0';
2746:src/display.c **** 	      }
2747:src/display.c **** 	      set_status_right(buf);
2748:src/display.c **** 	    }
2749:src/display.c **** 	  } else {
2750:src/display.c **** 	    annuc = 1;
2751:src/display.c **** 	  }
2752:src/display.c **** 	} else {
2753:src/display.c **** #ifndef DM42
2754:src/display.c **** 	  show_progtrace(buf);
2755:src/display.c **** #endif
2756:src/display.c **** 	  i = state_pc();
2757:src/display.c **** 	  if (i > 0)
2758:src/display.c **** 	    set_status(prt(getprog(i), buf));
2759:src/display.c **** 	  else
2760:src/display.c **** 	    set_status("");
2761:src/display.c **** 	  set_dot(STO_annun);
2762:src/display.c **** #if 0
2763:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
2764:src/display.c **** 	    unsigned short int crc;
2765:src/display.c **** 	    crc = checksum_program();
2766:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
2767:src/display.c **** 	    for (i=0; i<4; i++) {
2768:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2769:src/display.c **** 	      crc >>= 4;
2770:src/display.c **** 	      j += SEGS_PER_DIGIT;
2771:src/display.c **** 	    }
2772:src/display.c **** 	    skip = 1;
2773:src/display.c **** 	  }
2774:src/display.c **** 	  else
2775:src/display.c **** #endif
2776:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2777:src/display.c **** 	      annuc = 1;
2778:src/display.c **** 	  goto nostk;
2779:src/display.c **** 	}
2780:src/display.c **** 	show_stack();
2781:src/display.c ****       nostk:	show_flags();
2782:src/display.c **** 	if (!skip) {
2783:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/ccW65oEM.s 			page 64


2784:src/display.c **** 	  only_update_x:
2785:src/display.c **** 	    p = get_cmdline();
2786:src/display.c **** 	    if (p == NULL || cata) {
2787:src/display.c **** 	      if (ShowRegister != -1) {
2788:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2789:src/display.c **** 		format_reg(ShowRegister, CNULL);
2790:src/display.c **** 	      }
2791:src/display.c **** 	      else
2792:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2793:src/display.c **** 	    } else {
2794:src/display.c **** 	      disp_x(p);
2795:src/display.c **** 	      x_disp = 1;
2796:src/display.c **** 	    }
2797:src/display.c **** 	    if (WasDataEntry) {
2798:src/display.c **** 	      goto finish;
2799:src/display.c **** 	    }
2800:src/display.c **** 	  } else {
2801:src/display.c **** 	    unsigned int pc = state_pc();
2802:src/display.c **** 	    unsigned int upc = user_pc(pc);
2803:src/display.c **** 	    const int n = nLIB(pc);
2804:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2805:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2806:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2807:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2808:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2809:src/display.c **** #ifndef REALBUILD
2810:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2811:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2812:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2813:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2814:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2815:src/display.c **** 	      char *b=buf;
2816:src/display.c **** 	      char *l=LastDisplayedNumber;
2817:src/display.c **** 	      *l++=' ';
2818:src/display.c **** 	      while(*b) {
2819:src/display.c **** 		*l++=*b++;
2820:src/display.c **** 		*l++=' ';
2821:src/display.c **** 	      }
2822:src/display.c **** 	      *l=0;
2823:src/display.c **** 	    }
2824:src/display.c **** #endif
2825:src/display.c **** 	  }
2826:src/display.c **** 	}
2827:src/display.c **** 	set_annunciators();
2828:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2829:src/display.c **** 	  ShowRPN = 0;
2830:src/display.c **** 	  dot(RPN, 0);
2831:src/display.c **** 	}
2832:src/display.c **** 	// disp_temp disables the <- key
2833:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2834:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2835:src/display.c **** 
2836:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2837:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2838:src/display.c **** 	  annunciators();
2839:src/display.c ****  	State2.hms = 0;
2840:src/display.c **** #else
ARM GAS  /tmp/ccW65oEM.s 			page 65


2841:src/display.c **** 
2842:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2843:src/display.c **** 	  annunciators();
2844:src/display.c **** 	
2845:src/display.c **** 
2846:src/display.c **** 
2847:src/display.c **** #endif
2848:src/display.c **** 
2849:src/display.c ****       finish:
2850:src/display.c **** 	State2.version = 0;
2851:src/display.c **** 	State2.disp_as_alpha = 0;
2852:src/display.c **** 	State2.smode = SDISP_NORMAL;
2853:src/display.c **** 	State2.invalid_disp = 0;
2854:src/display.c **** 	ShowRegister = regX_idx;
2855:src/display.c **** 	DispMsg = CNULL;
2856:src/display.c **** 	DispPlot = 0;
2857:src/display.c **** 	State2.disp_small = 0;
2858:src/display.c **** 	finish_display();
2859:src/display.c **** #ifdef CONSOLE
2860:src/display.c **** 	JustDisplayed = 1;
2861:src/display.c **** #endif
2862:src/display.c ****       }
2863:src/display.c **** 
2864:src/display.c ****       /*
2865:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
2866:src/display.c ****        */
2867:src/display.c ****       void frozen_display()
2868:src/display.c ****       {
2869:src/display.c **** 	State2.disp_freeze = 0;
2870:src/display.c **** 	display();
2871:src/display.c **** 	State2.disp_freeze = 1;
2872:src/display.c ****       }
2873:src/display.c **** 
2874:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
2875:src/display.c **** 	int glen = *graphic++;
2876:src/display.c **** 	int i, j;
2877:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2878:src/display.c **** 	unsigned long long int mat[6];
2879:src/display.c **** 
2880:src/display.c **** 	xset(mat, 0, sizeof(mat));
2881:src/display.c **** #endif
2882:src/display.c **** #ifndef REALBUILD
2883:src/display.c **** 	forceDispPlot=1;
2884:src/display.c **** #endif
2885:src/display.c **** 	if (glen <= 0)			return;
2886:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2887:src/display.c **** 
2888:src/display.c **** 	for (i=0; i<6; i++)
2889:src/display.c **** 	  for (j=1; j<=glen; j++) {
2890:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2891:src/display.c **** 	    if (graphic[j] & (1 << i))
2892:src/display.c **** 	      mat[i] |= 1LL << j;
2893:src/display.c **** #else
2894:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2895:src/display.c **** #endif
2896:src/display.c **** 	  }
2897:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccW65oEM.s 			page 66


2898:src/display.c **** 	set_status_grob(mat);
2899:src/display.c **** #endif
2900:src/display.c ****       }
2901:src/display.c **** 
2902:src/display.c **** 
2903:src/display.c ****       /* Take the given string and display as much of it as possible on the top
2904:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
2905:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
2906:src/display.c ****        * column is almost always blank.
2907:src/display.c ****        */
2908:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
2909:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
2910:src/display.c ****       }
2911:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
2912:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
2913:src/display.c ****       }
2914:src/display.c **** 
2915:src/display.c ****       
2916:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 2916 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
2917:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 2917 2 view .LVU201
2918:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2919:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2920:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 2920 2 view .LVU202
2921:src/display.c **** #endif
2922:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 2922 2 view .LVU203
2923:src/display.c **** 	int i, j;
 686              		.loc 1 2923 2 view .LVU204
2924:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 2924 2 view .LVU205
2916:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 2916 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
2925:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2926:src/display.c **** 	unsigned long long int mat[6];
2927:src/display.c **** 
2928:src/display.c **** 	xset(mat, 0, sizeof(mat));
2929:src/display.c **** #endif
2930:src/display.c **** #ifndef REALBUILD
2931:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 2931 2 view .LVU207
ARM GAS  /tmp/ccW65oEM.s 			page 67


 701 0004 6B4C     		ldr	r4, .L119
2916:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 2916 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
2924:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 2924 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
2916:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 2916 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
2924:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 2924 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
2924:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 2924 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 2931 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 2931 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
2924:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 2924 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 2931 2 is_stmt 1 view .LVU216
2924:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 2924 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
2916:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 2916 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 2931 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
2932:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2933:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 2933 2 is_stmt 1 view .LVU220
 734              		.loc 1 2933 14 view .LVU221
 735              		.loc 1 2933 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 2933 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 2933 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 2933 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
ARM GAS  /tmp/ccW65oEM.s 			page 68


2934:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 2934 4 is_stmt 1 view .LVU226
 749              		.loc 1 2934 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 2934 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 2934 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 2934 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
2935:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2936:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
2937:src/display.c **** 	      ++i;
2938:src/display.c **** 	  }
2939:src/display.c **** 	  else {
2940:src/display.c **** 	    ++i;
2941:src/display.c **** 	  }
2942:src/display.c **** 	}
2943:src/display.c **** #endif
2944:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 2944 2 is_stmt 1 view .LVU231
2945:src/display.c **** #endif
2946:src/display.c **** #ifdef RP_PREFIX
2947:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 2947 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
2944:src/display.c **** #endif
 763              		.loc 1 2944 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 2947 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
2948:src/display.c **** #endif
2949:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2950:src/display.c **** 	findlengths(posns, smallp);
2951:src/display.c **** #endif
2952:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 2952 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
2944:src/display.c **** #endif
 770              		.loc 1 2944 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
2947:src/display.c **** #endif
 772              		.loc 1 2947 2 is_stmt 1 view .LVU237
 773              		.loc 1 2952 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 2952 8 view .LVU239
 776              		.loc 1 2952 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 2952 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
2922:src/display.c **** 	int i, j;
 781              		.loc 1 2922 15 view .LVU242
ARM GAS  /tmp/ccW65oEM.s 			page 69


 782 0050 9846     		mov	r8, r3
 783              	.LBB158:
2953:src/display.c **** 	  int c;
2954:src/display.c **** 	  int width;
2955:src/display.c **** 	  unsigned char cmap[6];
2956:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2957:src/display.c **** 	  int real_width;
2958:src/display.c **** 	  int current_smallp;
2959:src/display.c **** 
2960:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
2961:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2962:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
2963:src/display.c **** 	  //           01 -> (not used)
2964:src/display.c **** 	  //           10 -> use big font
2965:src/display.c **** 	  //           11 -> use small font
2966:src/display.c **** 	  // Bits 4-0: character will be considered this wide
2967:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 2967 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE158:
2952:src/display.c **** 	  int c;
 787              		.loc 1 2952 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
2920:src/display.c **** #endif
 790              		.loc 1 2920 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB167:
2953:src/display.c **** 	  int c;
 794              		.loc 1 2953 4 is_stmt 1 view .LVU246
2954:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 2954 4 view .LVU247
2955:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 2955 4 view .LVU248
2957:src/display.c **** 	  int current_smallp;
 797              		.loc 1 2957 4 view .LVU249
2958:src/display.c **** 
 798              		.loc 1 2958 4 view .LVU250
 799              		.loc 1 2967 4 view .LVU251
 800              		.loc 1 2967 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
2968:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 2968 6 is_stmt 1 view .LVU253
 805              		.loc 1 2968 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
2969:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 2969 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
2968:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 2968 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
ARM GAS  /tmp/ccW65oEM.s 			page 70


 814              		.loc 1 2969 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
2970:src/display.c **** 	    default:
2971:src/display.c **** 	    case 0x00:	current_smallp = smallp;
2972:src/display.c **** 	      break;
2973:src/display.c **** 	    case 0x40:	current_smallp = 0;
2974:src/display.c **** 	      break;
2975:src/display.c **** 	    case 0x60:	current_smallp = 1;
2976:src/display.c **** 	      break;
2977:src/display.c **** 	    }
2978:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 2978 6 view .LVU258
 820              		.loc 1 2978 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 2978 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
2979:src/display.c **** 	    str += 3;
 831              		.loc 1 2979 6 is_stmt 1 discriminator 4 view .LVU261
2980:src/display.c **** 
2981:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 2981 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
2979:src/display.c **** 	    str += 3;
 836              		.loc 1 2979 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 2981 6 is_stmt 1 discriminator 4 view .LVU264
2982:src/display.c **** 	  } else {
2983:src/display.c **** 	    c = (unsigned char) *str++ + offset;
2984:src/display.c **** 	    real_width = width = charlengths(c);
2985:src/display.c **** 	    current_smallp = smallp;
2986:src/display.c **** 	  }
2987:src/display.c **** 
2988:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 2988 4 discriminator 4 view .LVU265
 843              		.loc 1 2988 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 2988 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 2988 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
ARM GAS  /tmp/ccW65oEM.s 			page 71


 851              	.L118:
2989:src/display.c **** 	    break;
2990:src/display.c **** 
2991:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 2991 4 is_stmt 1 view .LVU269
 853              		.loc 1 2991 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
2992:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 2992 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
2991:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 2991 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 2992 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
2993:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 2993 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
2994:src/display.c **** 	  }
2995:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 2995 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
2996:src/display.c **** #else
2997:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
2998:src/display.c **** 
2999:src/display.c **** 	  //cmap = &charset[c][0];
3000:src/display.c **** 	  width = charlengths(c);
3001:src/display.c **** 
3002:src/display.c **** 	  if (x + width > b_w+1)
3003:src/display.c **** 	    break;
3004:src/display.c **** 
3005:src/display.c **** 	  /* Decode the packed character bytes */
3006:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3007:src/display.c **** #endif
3008:src/display.c **** 
3009:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3009 4 view .LVU276
 877              		.loc 1 3009 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3009 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
ARM GAS  /tmp/ccW65oEM.s 			page 72


 886              	.LVL77:
 887              	.L80:
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3010 16 is_stmt 1 view .LVU279
 889              		.loc 1 3010 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3011:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3011 8 is_stmt 1 view .LVU281
 893              		.loc 1 3011 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3010 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3010 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB159:
 907              	.LBB160:
 333:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 333 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 333:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 333 11 view .LVU286
 912              	.LBE160:
 913              	.LBE159:
 914              		.loc 1 3011 8 is_stmt 1 view .LVU287
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3010 25 view .LVU288
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3010 16 view .LVU289
3010:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3010 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3011 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3012:src/display.c **** 		break;
3013:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3014:src/display.c **** 	      if (cmap[i] & (1 << j))
3015:src/display.c **** 		mat[i] |= 1LL << (x+j);
3016:src/display.c **** #else
3017:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3017 8 is_stmt 1 discriminator 2 view .LVU292
ARM GAS  /tmp/ccW65oEM.s 			page 73


 928              	.LBB164:
 929              	.LBI159:
 332:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 332 6 discriminator 2 view .LVU293
 931              	.LBB161:
 333:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 333 3 discriminator 2 view .LVU294
 333:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 333 11 discriminator 2 view .LVU295
 334:src/display.c **** }
 934              		.loc 1 334 8 discriminator 2 view .LVU296
 935              	.LBE161:
 936              	.LBE164:
 937              		.loc 1 3017 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3017 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB165:
 942              	.LBB162:
 333:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 333 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 333:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 333 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 333:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 333 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE162:
 950              	.LBE165:
3010:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3010 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB166:
 955              	.LBB163:
 334:src/display.c **** }
 956              		.loc 1 334 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 334:src/display.c **** }
 959              		.loc 1 334 8 view .LVU304
 960              	.LBE163:
 961              	.LBE166:
3011:src/display.c **** 		break;
 962              		.loc 1 3011 8 is_stmt 1 view .LVU305
3010:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3010 25 view .LVU306
3010:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3010 16 view .LVU307
3010:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3010 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
ARM GAS  /tmp/ccW65oEM.s 			page 74


3009:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3009 19 is_stmt 1 view .LVU309
3009:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3009 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3009:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3009 14 is_stmt 1 view .LVU311
3009:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3009 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3018:src/display.c **** #endif
3019:src/display.c **** 	    }
3020:src/display.c **** 	  x += width;
 980              		.loc 1 3020 4 is_stmt 1 view .LVU313
 981              	.LBE167:
2952:src/display.c **** 	  int c;
 982              		.loc 1 2952 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB168:
 986              		.loc 1 3020 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3020 6 view .LVU316
 990              	.LBE168:
2952:src/display.c **** 	  int c;
 991              		.loc 1 2952 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
2952:src/display.c **** 	  int c;
 993              		.loc 1 2952 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
2952:src/display.c **** 	  int c;
 996              		.loc 1 2952 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB169:
2967:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 2967 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE169:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB170:
2953:src/display.c **** 	  int width;
 1005              		.loc 1 2953 4 is_stmt 1 view .LVU321
2954:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 2954 4 view .LVU322
2955:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 2955 4 view .LVU323
2957:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 2957 4 view .LVU324
2958:src/display.c **** 
 1009              		.loc 1 2958 4 view .LVU325
2967:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccW65oEM.s 			page 75


 1010              		.loc 1 2967 4 view .LVU326
2967:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 2967 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
2983:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 2983 6 is_stmt 1 view .LVU328
2983:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 2983 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
2984:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 2984 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
2983:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 2983 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
2984:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 2984 6 is_stmt 1 view .LVU332
2984:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 2984 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
2984:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 2984 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
2988:src/display.c **** 	    break;
 1034              		.loc 1 2988 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
2984:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 2984 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
2985:src/display.c **** 	  }
 1039              		.loc 1 2985 6 is_stmt 1 view .LVU337
2988:src/display.c **** 	    break;
 1040              		.loc 1 2988 4 view .LVU338
2988:src/display.c **** 	    break;
 1041              		.loc 1 2988 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
2988:src/display.c **** 	    break;
 1044              		.loc 1 2988 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
2988:src/display.c **** 	    break;
 1049              		.loc 1 2988 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
ARM GAS  /tmp/ccW65oEM.s 			page 76


 1052              	.LVL95:
2988:src/display.c **** 	    break;
 1053              		.loc 1 2988 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
2988:src/display.c **** 	    break;
 1057              		.loc 1 2988 7 view .LVU343
 1058              	.LBE170:
3021:src/display.c **** 	}
3022:src/display.c **** 
3023:src/display.c **** 
3024:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3025:src/display.c **** 	set_status_grob(mat);
3026:src/display.c **** #else
3027:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3027 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3027 20 view .LVU345
 1061              		.loc 1 3027 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3028:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3028 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3027:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3027 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3028 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3027:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3027 27 is_stmt 1 discriminator 3 view .LVU350
3027:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3027 20 discriminator 3 view .LVU351
3027:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3027 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3029:src/display.c **** #endif
3030:src/display.c ****       }
 1081              		.loc 1 3030 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB171:
2975:src/display.c **** 	      break;
 1091              		.loc 1 2975 17 is_stmt 1 view .LVU354
ARM GAS  /tmp/ccW65oEM.s 			page 77


2976:src/display.c **** 	    }
 1092              		.loc 1 2976 8 view .LVU355
2978:src/display.c **** 	    str += 3;
 1093              		.loc 1 2978 6 view .LVU356
2978:src/display.c **** 	    str += 3;
 1094              		.loc 1 2978 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
2975:src/display.c **** 	      break;
 1097              		.loc 1 2975 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
2973:src/display.c **** 	      break;
 1104              		.loc 1 2973 17 is_stmt 1 view .LVU359
2974:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 2974 8 view .LVU360
2978:src/display.c **** 	    str += 3;
 1106              		.loc 1 2978 6 view .LVU361
2978:src/display.c **** 	    str += 3;
 1107              		.loc 1 2978 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
2973:src/display.c **** 	      break;
 1110              		.loc 1 2973 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
2973:src/display.c **** 	      break;
 1116              		.loc 1 2973 32 view .LVU364
 1117              	.LBE171:
2935:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 2935 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
2936:src/display.c **** 	      ++i;
 1123              		.loc 1 2936 6 view .LVU366
2936:src/display.c **** 	      ++i;
 1124              		.loc 1 2936 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB172:
2936:src/display.c **** 	      ++i;
 1133              		.loc 1 2936 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
ARM GAS  /tmp/ccW65oEM.s 			page 78


 1135              	.LVL104:
2936:src/display.c **** 	      ++i;
 1136              		.loc 1 2936 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
2936:src/display.c **** 	      ++i;
 1141              		.loc 1 2936 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE172:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 435:src/display.c ****   union {
 1169              		.loc 1 435 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 436:src/display.c ****     char buf[4];
 1173              		.loc 1 436 3 view .LVU372
 440:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 440 3 view .LVU373
 454:src/display.c **** #endif
 1175              		.loc 1 454 3 view .LVU374
 457:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 457 3 view .LVU375
 435:src/display.c ****   union {
 1177              		.loc 1 435 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 458:src/display.c ****     negative = 1;
ARM GAS  /tmp/ccW65oEM.s 			page 79


 1185              		.loc 1 458 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 435:src/display.c ****   union {
 1187              		.loc 1 435 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 435:src/display.c ****   union {
 1190              		.loc 1 435 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 458:src/display.c ****     negative = 1;
 1193              		.loc 1 458 3 is_stmt 1 view .LVU380
 435:src/display.c ****   union {
 1194              		.loc 1 435 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 458:src/display.c ****     negative = 1;
 1196              		.loc 1 458 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 457:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 457 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 465:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 465 3 is_stmt 1 view .LVU384
 465:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 465 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 470:src/display.c **** #endif
 1204              		.loc 1 470 7 is_stmt 1 view .LVU386
 470:src/display.c **** #endif
 1205              		.loc 1 470 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 472:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 472 2 is_stmt 1 view .LVU388
 472:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 472 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 472:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 472 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 472:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 472 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 472:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 472 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 479:src/display.c ****     }
 1219              		.loc 1 479 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 459:src/display.c ****     exp = -exp;
 1223              		.loc 1 459 5 view .LVU394
 460:src/display.c ****   }
ARM GAS  /tmp/ccW65oEM.s 			page 80


 1224              		.loc 1 460 5 view .LVU395
 460:src/display.c ****   }
 1225              		.loc 1 460 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 465:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 465 3 is_stmt 1 view .LVU397
 465:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 465 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 470:src/display.c **** #endif
 1231              		.loc 1 470 7 is_stmt 1 view .LVU399
 470:src/display.c **** #endif
 1232              		.loc 1 470 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 479:src/display.c ****     }
 1237              		.loc 1 479 21 is_stmt 1 discriminator 1 view .LVU401
 479:src/display.c ****     }
 1238              		.loc 1 479 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 479:src/display.c ****     }
 1242              		.loc 1 479 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 527:src/display.c **** #endif
 1246              		.loc 1 527 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 529:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 529 7 view .LVU405
 529:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 529 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 530:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 530 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 529:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 529 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 530:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 530 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
ARM GAS  /tmp/ccW65oEM.s 			page 81


 552:src/display.c ****     }
 1267              		.loc 1 552 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 553:src/display.c **** 
 1272              		.loc 1 553 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 550:src/display.c ****     no_number:
 1281              		.loc 1 550 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 552:src/display.c ****     }
 1285              		.loc 1 552 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 553:src/display.c **** 
 1290              		.loc 1 553 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 475:src/display.c **** #else
 1299              		.loc 1 475 12 is_stmt 1 view .LVU415
 475:src/display.c **** #else
 1300              		.loc 1 475 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 475:src/display.c **** #else
 1303              		.loc 1 475 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 479:src/display.c ****     }
 1306              		.loc 1 479 7 is_stmt 1 view .LVU418
 479:src/display.c ****     }
 1307              		.loc 1 479 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 479:src/display.c ****     }
 1311              		.loc 1 479 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
ARM GAS  /tmp/ccW65oEM.s 			page 82


 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 482 7 is_stmt 1 view .LVU421
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 482 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 486:src/display.c **** #endif
 1321              		.loc 1 486 2 is_stmt 1 view .LVU423
 486:src/display.c **** #endif
 1322              		.loc 1 486 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 486:src/display.c **** #endif
 1325              		.loc 1 486 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 486:src/display.c **** #endif
 1328              		.loc 1 486 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 475:src/display.c **** #else
 1332              		.loc 1 475 12 is_stmt 1 view .LVU427
 475:src/display.c **** #else
 1333              		.loc 1 475 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 479:src/display.c ****     }
 1337              		.loc 1 479 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 479:src/display.c ****     }
 1341              		.loc 1 479 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 482 21 is_stmt 1 view .LVU431
 1346              	.LBB173:
 1347              	.LBI173:
 301:src/display.c **** {
 1348              		.loc 1 301 13 view .LVU432
 1349              	.LBB174:
 303:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 303 3 view .LVU433
 303:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 303 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 304:src/display.c **** }
ARM GAS  /tmp/ccW65oEM.s 			page 83


 1355              		.loc 1 304 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 303:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 303 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 304:src/display.c **** }
 1359              		.loc 1 304 3 is_stmt 1 view .LVU437
 305:src/display.c **** 
 1360              		.loc 1 305 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 304:src/display.c **** }
 1362              		.loc 1 304 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 305:src/display.c **** 
 1365              		.loc 1 305 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 305:src/display.c **** 
 1369              		.loc 1 305 1 view .LVU441
 1370              	.LBE174:
 1371              	.LBE173:
 488:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 488 4 is_stmt 1 view .LVU442
 496:src/display.c **** #endif
 1373              		.loc 1 496 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 498:src/display.c **** 	  }
 1379              		.loc 1 498 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 498:src/display.c **** 	  }
 1382              		.loc 1 498 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB47:
 360:src/display.c ****   if (sep == SEP_NONE)
ARM GAS  /tmp/ccW65oEM.s 			page 84


 1403              		.loc 1 360 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 367:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 367 5 view .LVU447
 360:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 360 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 360:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 360 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 368:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 368 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 368:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 368 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 369:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 369 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 367:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 367 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 368:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 368 5 is_stmt 1 view .LVU454
 369:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 369 5 view .LVU455
 369:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 369 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 372:src/display.c **** #endif
 1433              		.loc 1 372 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 372:src/display.c **** #endif
 1436              		.loc 1 372 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 372:src/display.c **** #endif
 1438              		.loc 1 372 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 372:src/display.c **** #endif
 1440              		.loc 1 372 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 372:src/display.c **** #endif
 1444              		.loc 1 372 30 view .LVU461
ARM GAS  /tmp/ccW65oEM.s 			page 85


 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 372:src/display.c **** #endif
 1446              		.loc 1 372 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 376:src/display.c **** 
 1448              		.loc 1 376 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 372:src/display.c **** #endif
 1450              		.loc 1 372 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 376:src/display.c **** 
 1453              		.loc 1 376 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 370:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 370 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 372:src/display.c **** #endif
 1461              		.loc 1 372 5 view .LVU467
 372:src/display.c **** #endif
 1462              		.loc 1 372 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE47:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 342:src/display.c ****   if (res) {
 1484              		.loc 1 342 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 343:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 343 3 view .LVU470
 343:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 343 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 344:src/display.c ****   } else {
 1491              		.loc 1 344 5 is_stmt 1 view .LVU472
 344:src/display.c ****   } else {
ARM GAS  /tmp/ccW65oEM.s 			page 86


 1492              		.loc 1 344 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 344:src/display.c ****   } else {
 1494              		.loc 1 344 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 344:src/display.c ****   } else {
 1497              		.loc 1 344 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 354:src/display.c **** 
 1503              		.loc 1 354 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 346 5 is_stmt 1 view .LVU477
 342:src/display.c ****   if (res) {
 1508              		.loc 1 342 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 346 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 346 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 347:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 347 5 is_stmt 1 view .LVU481
 347:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 347 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB177:
 1528              	.LBB178:
 350:src/display.c **** #endif
 1529              		.loc 1 350 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 350:src/display.c **** #endif
 1532              		.loc 1 350 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 350:src/display.c **** #endif
 1534              		.loc 1 350 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 350:src/display.c **** #endif
ARM GAS  /tmp/ccW65oEM.s 			page 87


 1536              		.loc 1 350 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 350:src/display.c **** #endif
 1540              		.loc 1 350 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 350:src/display.c **** #endif
 1542              		.loc 1 350 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 350:src/display.c **** #endif
 1544              		.loc 1 350 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 353:src/display.c **** }
 1548              		.loc 1 353 3 is_stmt 1 view .LVU490
 353:src/display.c **** }
 1549              		.loc 1 353 3 is_stmt 0 view .LVU491
 1550              	.LBE178:
 1551              	.LBE177:
 353:src/display.c **** }
 1552              		.loc 1 353 3 is_stmt 1 view .LVU492
 354:src/display.c **** 
 1553              		.loc 1 354 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 348:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 348 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB180:
 1567              	.LBI177:
 342:src/display.c ****   if (res) {
 1568              		.loc 1 342 14 view .LVU495
 1569              	.LBB179:
 350:src/display.c **** #endif
 1570              		.loc 1 350 5 view .LVU496
 350:src/display.c **** #endif
 1571              		.loc 1 350 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE179:
 1580              	.LBE180:
 1581              		.cfi_endproc
ARM GAS  /tmp/ccW65oEM.s 			page 88


 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 407:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 407 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 408 3 view .LVU499
 407:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 407 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 408 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 408 10 is_stmt 1 view .LVU502
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 408 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB181:
 1618              	.LBB182:
 402:src/display.c ****   return res;
 1619              		.loc 1 402 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 403:src/display.c **** }
 1623              		.loc 1 403 3 is_stmt 1 view .LVU505
 403:src/display.c **** }
 1624              		.loc 1 403 3 is_stmt 0 view .LVU506
 1625              	.LBE182:
 1626              	.LBE181:
 413:src/display.c ****     }
 1627              		.loc 1 413 7 is_stmt 1 view .LVU507
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 408 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccW65oEM.s 			page 89


 1630              	.LVL160:
 413:src/display.c ****     }
 1631              		.loc 1 413 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 408 24 is_stmt 1 view .LVU510
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 408 10 view .LVU511
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 408 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 409:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 409 5 is_stmt 1 view .LVU513
 410:src/display.c ****     else {
 1641              		.loc 1 410 7 view .LVU514
 412:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 412 7 view .LVU515
 1643              	.LBB185:
 1644              	.LBI181:
 400:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 400 14 view .LVU516
 1646              	.LBB183:
 401:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 401 3 view .LVU517
 402:src/display.c ****   return res;
 1648              		.loc 1 402 8 view .LVU518
 1649              	.LBE183:
 1650              	.LBE185:
 409:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 409 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 410:src/display.c ****     else {
 1654              		.loc 1 410 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB186:
 1658              	.LBB184:
 402:src/display.c ****   return res;
 1659              		.loc 1 402 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE184:
 1662              	.LBE186:
 409:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 409 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 410:src/display.c ****     else {
 1665              		.loc 1 410 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
ARM GAS  /tmp/ccW65oEM.s 			page 90


 1671              		.loc 1 408 24 is_stmt 1 view .LVU524
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 408 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 408:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 408 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 416:src/display.c **** 
 1680              		.loc 1 416 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB49:
1486:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1486 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1487:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1487 2 view .LVU529
1486:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1486 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1487:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1487 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1486:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1486 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1487:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1487 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1488:src/display.c **** 	    if (res) {
 1719              		.loc 1 1488 4 is_stmt 1 view .LVU534
ARM GAS  /tmp/ccW65oEM.s 			page 91


1488:src/display.c **** 	    if (res) {
 1720              		.loc 1 1488 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB189:
 1726              	.LBI189:
1486:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1486 18 is_stmt 1 view .LVU536
 1728              	.LBB190:
1489:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1489 6 view .LVU537
1489:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1489 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1490:src/display.c **** 	    } else {
 1732              		.loc 1 1490 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1490:src/display.c **** 	    } else {
 1736              		.loc 1 1490 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1490:src/display.c **** 	    } else {
 1739              		.loc 1 1490 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1490:src/display.c **** 	    } else {
 1743              		.loc 1 1490 8 view .LVU542
 1744              	.LBE190:
 1745              	.LBE189:
1522:src/display.c **** 
 1746              		.loc 1 1522 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1500:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1500 6 is_stmt 1 view .LVU544
1500:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1500 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1504:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1504 6 is_stmt 1 view .LVU546
1504:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1504 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1505:src/display.c **** 	    else {
 1759              		.loc 1 1505 8 is_stmt 1 view .LVU548
1505:src/display.c **** 	    else {
 1760              		.loc 1 1505 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
ARM GAS  /tmp/ccW65oEM.s 			page 92


 1762 002a 2370     		strb	r3, [r4]
1518:src/display.c **** 	  }
 1763              		.loc 1 1518 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1522:src/display.c **** 
 1765              		.loc 1 1522 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1501:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1501 8 is_stmt 1 view .LVU552
1501:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1501 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1501:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1501 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1501:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1501 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1504:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1504 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB192:
 1783              	.LBB191:
1492:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1492 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1494:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1494 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1495:src/display.c **** #endif
 1793              		.loc 1 1495 8 view .LVU559
1495:src/display.c **** #endif
 1794              		.loc 1 1495 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE191:
 1799              	.LBE192:
1522:src/display.c **** 
 1800              		.loc 1 1522 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1502:src/display.c **** 	    }
 1804              		.loc 1 1502 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
ARM GAS  /tmp/ccW65oEM.s 			page 93


 1806              	.LVL180:
1502:src/display.c **** 	    }
 1807              		.loc 1 1502 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1504:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1504 6 is_stmt 1 view .LVU564
 1812              	.L188:
1507:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1507 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1509:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1509 8 view .LVU566
1509:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1509 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1513:src/display.c **** 	      }
 1821              		.loc 1 1513 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1509:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1509 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1510:src/display.c **** 	      }
 1825              		.loc 1 1510 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1513:src/display.c **** 	      }
 1828              		.loc 1 1513 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1515:src/display.c **** #endif
 1832              		.loc 1 1515 8 view .LVU572
1515:src/display.c **** #endif
 1833              		.loc 1 1515 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1518:src/display.c **** 	  }
 1837              		.loc 1 1518 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1522:src/display.c **** 
 1839              		.loc 1 1522 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccW65oEM.s 			page 94


 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE49:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1567:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1567 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1568:src/display.c **** 	int j=0;
 1870              		.loc 1 1568 2 view .LVU577
1569:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1569 2 view .LVU578
1567:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1567 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1567:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1567 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1569:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1569 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1573:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1573 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1567:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1567 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1569:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1569 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1570:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1570 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1571:src/display.c **** 
 1893              		.loc 1 1571 2 view .LVU586
1573:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1573 2 view .LVU587
1573:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1573 6 is_stmt 0 view .LVU588
ARM GAS  /tmp/ccW65oEM.s 			page 95


 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1573:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1573 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1574:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1574 4 is_stmt 1 view .LVU590
1574:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1574 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1575:src/display.c **** 	  return;
 1905              		.loc 1 1575 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB193:
 1908              	.LBI193:
 400:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 400 14 view .LVU593
 1910              	.LBB194:
 401:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 401 3 view .LVU594
 401:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 401 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 401:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 401 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 401:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 401 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 401:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 401 19 view .LVU598
 1923              	.LBE194:
 1924              	.LBE193:
1630:src/display.c **** 
 1925              		.loc 1 1630 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1579:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1579 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1580:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1580 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
ARM GAS  /tmp/ccW65oEM.s 			page 96


 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1581:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1581 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1582:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1582 2 view .LVU603
1582:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1582 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1590:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1590 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1591:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1591 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1592:src/display.c **** 
 1965              		.loc 1 1592 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1594:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1594 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1595:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1595 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1596:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1596 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
ARM GAS  /tmp/ccW65oEM.s 			page 97


1597:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1597 2 view .LVU611
1597:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1597 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1598:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1598 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1598:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1598 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1598:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1598 19 is_stmt 1 view .LVU615
1598:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1598 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1598:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1598 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1599:src/display.c **** 
 2004              		.loc 1 1599 2 is_stmt 1 view .LVU618
1599:src/display.c **** 
 2005              		.loc 1 1599 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1599:src/display.c **** 
 2008              		.loc 1 1599 19 is_stmt 1 discriminator 1 view .LVU620
1599:src/display.c **** 
 2009              		.loc 1 1599 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1599:src/display.c **** 
 2012              		.loc 1 1599 30 is_stmt 1 discriminator 1 view .LVU622
1599:src/display.c **** 
 2013              		.loc 1 1599 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1602:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1602 2 is_stmt 1 view .LVU624
1602:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1602 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1603:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1603 2 is_stmt 1 view .LVU626
 2027              	.LBB196:
 2028              	.LBI196:
ARM GAS  /tmp/ccW65oEM.s 			page 98


 400:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 400 14 view .LVU627
 2030              	.LBB197:
 401:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 401 3 view .LVU628
 401:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 401 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 401:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 401 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 401:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 401 12 is_stmt 1 view .LVU631
 401:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 401 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 401:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 401 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 403:src/display.c **** }
 2047              		.loc 1 403 3 is_stmt 1 view .LVU634
 403:src/display.c **** }
 2048              		.loc 1 403 3 is_stmt 0 view .LVU635
 2049              	.LBE197:
 2050              	.LBE196:
1604:src/display.c **** 
 2051              		.loc 1 1604 2 is_stmt 1 view .LVU636
1607:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1607 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1604:src/display.c **** 
 2055              		.loc 1 1604 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1607:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1607 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1604:src/display.c **** 
 2061              		.loc 1 1604 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1607:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1607 2 is_stmt 1 view .LVU641
1607:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1607 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1608:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1608 2 is_stmt 1 view .LVU643
 2068              	.LBB199:
ARM GAS  /tmp/ccW65oEM.s 			page 99


 2069              	.LBI199:
 400:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 400 14 view .LVU644
 2071              	.LBB200:
 401:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 401 3 view .LVU645
 401:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 401 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 401:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 401 12 is_stmt 1 view .LVU647
 401:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 401 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 401:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 401 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 403:src/display.c **** }
 2086              		.loc 1 403 3 is_stmt 1 view .LVU650
 403:src/display.c **** }
 2087              		.loc 1 403 3 is_stmt 0 view .LVU651
 2088              	.LBE200:
 2089              	.LBE199:
1609:src/display.c **** 
 2090              		.loc 1 1609 2 is_stmt 1 view .LVU652
1609:src/display.c **** 
 2091              		.loc 1 1609 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1612:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1612 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1609:src/display.c **** 
 2096              		.loc 1 1609 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1612:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1612 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1609:src/display.c **** 
 2102              		.loc 1 1609 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1612:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1612 2 is_stmt 1 view .LVU658
1612:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1612 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1613:src/display.c **** 
 2108              		.loc 1 1613 8 view .LVU660
ARM GAS  /tmp/ccW65oEM.s 			page 100


 2109 00f4 3149     		ldr	r1, .L230+4
1612:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1612 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1613:src/display.c **** 
 2113              		.loc 1 1613 2 is_stmt 1 view .LVU662
1613:src/display.c **** 
 2114              		.loc 1 1613 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1613:src/display.c **** 
 2117              		.loc 1 1613 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1616:src/display.c **** 
 2122              		.loc 1 1616 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1613:src/display.c **** 
 2124              		.loc 1 1613 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1616:src/display.c **** 
 2127              		.loc 1 1616 2 is_stmt 1 view .LVU667
1616:src/display.c **** 
 2128              		.loc 1 1616 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1616:src/display.c **** 
 2132              		.loc 1 1616 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1619:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1619 2 is_stmt 1 view .LVU670
 2138              	.LBB202:
 2139              	.LBI202:
 400:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 400 14 view .LVU671
 2141              	.LBB203:
 401:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 401 3 view .LVU672
 401:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 401 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 401:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 401 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 401:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 401 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccW65oEM.s 			page 101


 2151              	.LVL218:
 403:src/display.c **** }
 2152              		.loc 1 403 3 is_stmt 1 view .LVU676
 403:src/display.c **** }
 2153              		.loc 1 403 3 is_stmt 0 view .LVU677
 2154              	.LBE203:
 2155              	.LBE202:
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1623 2 is_stmt 1 view .LVU678
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1623 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1623 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1623 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1624:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1624 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB206:
 2169              	.LBI206:
 400:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 400 14 view .LVU683
 2171              	.LBB207:
 401:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 401 3 view .LVU684
 401:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 401 12 view .LVU685
 401:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 401 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE207:
 2178              	.LBE206:
1630:src/display.c **** 
 2179              		.loc 1 1630 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1583:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1583 4 is_stmt 1 view .LVU688
1583:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1583 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1584:src/display.c **** 	  else
 2191              		.loc 1 1584 6 is_stmt 1 view .LVU690
1584:src/display.c **** 	  else
ARM GAS  /tmp/ccW65oEM.s 			page 102


 2192              		.loc 1 1584 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1584:src/display.c **** 	  else
 2195              		.loc 1 1584 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1584:src/display.c **** 	  else
 2198              		.loc 1 1584 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1584:src/display.c **** 	  else
 2201              		.loc 1 1584 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1587:src/display.c **** 	}
 2205              		.loc 1 1587 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB208:
 2214              	.LBB204:
 401:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 401 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 401:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 401 16 view .LVU697
 2220              	.LBE204:
 2221              	.LBE208:
1625:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1625 9 is_stmt 1 view .LVU698
1625:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1625 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1625:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1625 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1626 4 is_stmt 1 view .LVU701
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1626 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1626 7 view .LVU703
ARM GAS  /tmp/ccW65oEM.s 			page 103


 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1627:src/display.c **** 	  }
 2239              		.loc 1 1627 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB209:
 2242              	.LBI209:
 400:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 400 14 view .LVU705
 2244              	.LBB210:
 401:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 401 3 view .LVU706
 401:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 401 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 401:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 401 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 401:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 401 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 401:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 401 19 view .LVU710
 2257              	.LBE210:
 2258              	.LBE209:
1586:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1586 6 is_stmt 1 view .LVU711
 2260              	.LBB212:
 2261              	.LBI212:
 289:src/display.c **** {
 2262              		.loc 1 289 13 view .LVU712
 2263              	.LBB213:
 291:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 291 3 view .LVU713
 291:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 291 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 292:src/display.c **** }
 2268              		.loc 1 292 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 291:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 291 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 292:src/display.c **** }
 2272              		.loc 1 292 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 293:src/display.c **** 
 2275              		.loc 1 293 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
ARM GAS  /tmp/ccW65oEM.s 			page 104


 293:src/display.c **** 
 2279              		.loc 1 293 1 view .LVU719
 2280              	.LBE213:
 2281              	.LBE212:
 2282              	.LBB214:
 2283              	.LBB205:
 402:src/display.c ****   return res;
 2284              		.loc 1 402 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 402:src/display.c ****   return res;
 2287              		.loc 1 402 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 403:src/display.c **** }
 2291              		.loc 1 403 3 is_stmt 1 view .LVU722
 403:src/display.c **** }
 2292              		.loc 1 403 3 is_stmt 0 view .LVU723
 2293              	.LBE205:
 2294              	.LBE214:
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1623 2 is_stmt 1 view .LVU724
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1623 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1623:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1623 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB215:
 2307              	.LBB195:
 402:src/display.c ****   return res;
 2308              		.loc 1 402 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE195:
 2314              	.LBE215:
1576:src/display.c **** 	}
 2315              		.loc 1 1576 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB216:
 2320              	.LBB201:
 402:src/display.c ****   return res;
 2321              		.loc 1 402 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
ARM GAS  /tmp/ccW65oEM.s 			page 105


 402:src/display.c ****   return res;
 2325              		.loc 1 402 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 402:src/display.c ****   return res;
 2328              		.loc 1 402 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 402:src/display.c ****   return res;
 2333              		.loc 1 402 8 view .LVU732
 2334              	.LBE201:
 2335              	.LBE216:
 2336              	.LBB217:
 2337              	.LBB198:
 402:src/display.c ****   return res;
 2338              		.loc 1 402 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 402:src/display.c ****   return res;
 2342              		.loc 1 402 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 402:src/display.c ****   return res;
 2345              		.loc 1 402 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 402:src/display.c ****   return res;
 2350              		.loc 1 402 8 view .LVU736
 2351              	.LBE198:
 2352              	.LBE217:
 2353              	.LBB218:
 2354              	.LBB211:
 402:src/display.c ****   return res;
 2355              		.loc 1 402 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE211:
 2369              	.LBE218:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
ARM GAS  /tmp/ccW65oEM.s 			page 106


 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1633:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1633 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1634:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1634 2 view .LVU739
1635:src/display.c **** 	int j;
 2389              		.loc 1 1635 2 view .LVU740
1636:src/display.c **** 
 2390              		.loc 1 1636 2 view .LVU741
1638:src/display.c **** 	  return 1;
 2391              		.loc 1 1638 2 view .LVU742
1633:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1633 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1638:src/display.c **** 	  return 1;
 2403              		.loc 1 1638 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1633:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1633 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1638:src/display.c **** 	  return 1;
 2408              		.loc 1 1638 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1638:src/display.c **** 	  return 1;
 2411              		.loc 1 1638 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1639:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1639 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1696:src/display.c **** 
 2418              		.loc 1 1696 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
ARM GAS  /tmp/ccW65oEM.s 			page 107


 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB227:
 2429              	.LBI227:
1633:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1633 18 is_stmt 1 view .LVU750
 2431              	.LBB228:
1640:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1640 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1641:src/display.c **** 	  return 0;
 2438              		.loc 1 1641 2 view .LVU752
1641:src/display.c **** 	  return 0;
 2439              		.loc 1 1641 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1641:src/display.c **** 	  return 0;
 2444              		.loc 1 1641 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1643:src/display.c **** 	  return 0;
 2447              		.loc 1 1643 2 is_stmt 1 view .LVU755
1643:src/display.c **** 	  return 0;
 2448              		.loc 1 1643 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1643:src/display.c **** 	  return 0;
 2453              		.loc 1 1643 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1645:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1645 2 is_stmt 1 view .LVU758
1645:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1645 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1651:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1651 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
ARM GAS  /tmp/ccW65oEM.s 			page 108


 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1652:src/display.c **** 
 2469              		.loc 1 1652 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1654:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1654 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1655:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1655 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1656:src/display.c **** 
 2487              		.loc 1 1656 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1658:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1658 2 view .LVU765
1658:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1658 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1658:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1658 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1663:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1663 2 is_stmt 1 view .LVU768
1663:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1663 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1663:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1663 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1664:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1664 4 is_stmt 1 view .LVU771
1664:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1664 9 is_stmt 0 view .LVU772
ARM GAS  /tmp/ccW65oEM.s 			page 109


 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1664:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1664 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1635:src/display.c **** 	int j;
 2518              		.loc 1 1635 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1635:src/display.c **** 	int j;
 2521              		.loc 1 1635 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1672:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1672 2 is_stmt 1 view .LVU776
1672:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1672 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1672:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1672 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1673:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1673 2 is_stmt 1 view .LVU779
1673:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1673 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1673:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1673 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1674:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1674 2 is_stmt 1 view .LVU782
1674:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1674 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1674:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1674 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1675:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1675 2 is_stmt 1 view .LVU785
1675:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1675 5 is_stmt 0 view .LVU786
ARM GAS  /tmp/ccW65oEM.s 			page 110


 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1676:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1676 2 is_stmt 1 view .LVU787
1676:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1676 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1680 12 is_stmt 1 view .LVU789
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1680 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1679:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1679 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1681:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1681 4 is_stmt 1 view .LVU792
 2572              	.LBB229:
 2573              	.LBI229:
 400:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 400 14 view .LVU793
 2575              	.LBB230:
 401:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 401 3 view .LVU794
 401:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 401 12 view .LVU795
 401:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 401 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 401:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 401 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 401:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 401 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 401:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 401 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 403:src/display.c **** }
 2591              		.loc 1 403 3 is_stmt 1 view .LVU800
 403:src/display.c **** }
 2592              		.loc 1 403 3 is_stmt 0 view .LVU801
 2593              	.LBE230:
 2594              	.LBE229:
1682:src/display.c **** 	}
 2595              		.loc 1 1682 4 is_stmt 1 view .LVU802
ARM GAS  /tmp/ccW65oEM.s 			page 111


1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1680 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1682:src/display.c **** 	}
 2599              		.loc 1 1682 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1680 24 is_stmt 1 view .LVU805
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1680 12 view .LVU806
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1680 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1685:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1685 2 is_stmt 1 view .LVU808
1685:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1685 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1685:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1685 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1687:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1687 7 is_stmt 1 view .LVU811
1687:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1687 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1690:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1690 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1691:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1691 26 is_stmt 1 view .LVU814
 2628              	.LBB233:
 2629              	.LBB231:
 401:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 401 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 401:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 401 16 view .LVU816
 2637              	.LBE231:
 2638              	.LBE233:
ARM GAS  /tmp/ccW65oEM.s 			page 112


 2639              	.LBB234:
 2640              	.LBB235:
 401:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 401 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 401:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 401 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 403:src/display.c **** }
 2648              		.loc 1 403 3 is_stmt 1 view .LVU819
 403:src/display.c **** }
 2649              		.loc 1 403 3 is_stmt 0 view .LVU820
 2650              	.LBE235:
 2651              	.LBE234:
1693:src/display.c **** 	}
 2652              		.loc 1 1693 4 is_stmt 1 view .LVU821
1691:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1691 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1693:src/display.c **** 	}
 2656              		.loc 1 1693 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1691:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1691 38 is_stmt 1 view .LVU824
1691:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1691 26 view .LVU825
1691:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1691 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1692:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1692 4 is_stmt 1 view .LVU827
 2667              	.LBB237:
 2668              	.LBI234:
 400:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 400 14 view .LVU828
 2670              	.LBB236:
 401:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 401 3 view .LVU829
 401:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 401 12 view .LVU830
 401:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 401 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 401:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 401 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
ARM GAS  /tmp/ccW65oEM.s 			page 113


 402:src/display.c ****   return res;
 2680              		.loc 1 402 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 402:src/display.c ****   return res;
 2684              		.loc 1 402 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 402:src/display.c ****   return res;
 2688              		.loc 1 402 8 view .LVU835
 2689              	.LBE236:
 2690              	.LBE237:
 2691              	.LBB238:
 2692              	.LBB232:
 402:src/display.c ****   return res;
 2693              		.loc 1 402 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 402:src/display.c ****   return res;
 2697              		.loc 1 402 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 402:src/display.c ****   return res;
 2701              		.loc 1 402 8 view .LVU838
 2702              	.LBE232:
 2703              	.LBE238:
1686:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1686 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1677:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1677 4 is_stmt 1 view .LVU840
1678:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1678 4 view .LVU841
1678:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1678 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1680:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1680 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1669:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1669 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
ARM GAS  /tmp/ccW65oEM.s 			page 114


1670:src/display.c **** 	}
 2725              		.loc 1 1670 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1635:src/display.c **** 	int j;
 2729              		.loc 1 1635 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1670:src/display.c **** 	}
 2732              		.loc 1 1670 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1635:src/display.c **** 	int j;
 2735              		.loc 1 1635 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1646:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1646 4 is_stmt 1 view .LVU849
1646:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1646 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1647:src/display.c **** 	  else
 2743              		.loc 1 1647 6 is_stmt 1 view .LVU851
1647:src/display.c **** 	  else
 2744              		.loc 1 1647 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1647:src/display.c **** 	  else
 2747              		.loc 1 1647 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1647:src/display.c **** 	  else
 2750              		.loc 1 1647 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1647:src/display.c **** 	  else
 2753              		.loc 1 1647 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1647:src/display.c **** 	  else
 2756              		.loc 1 1647 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1659:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1659 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1660:src/display.c **** 	}
 2764              		.loc 1 1660 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
ARM GAS  /tmp/ccW65oEM.s 			page 115


 2768 016e 87E7     		b	.L239
 2769              	.L266:
1665:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1665 6 view .LVU859
1665:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1665 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1665:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1665 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1665:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1665 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1665:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1665 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1666:src/display.c **** 	  }
 2784              		.loc 1 1666 6 is_stmt 1 view .LVU864
1666:src/display.c **** 	  }
 2785              		.loc 1 1666 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1666:src/display.c **** 	  }
 2788              		.loc 1 1666 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1666:src/display.c **** 	  }
 2792              		.loc 1 1666 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1649:src/display.c **** 	}
 2796              		.loc 1 1649 6 is_stmt 1 view .LVU868
 2797              	.LBB239:
 2798              	.LBI239:
 289:src/display.c **** {
 2799              		.loc 1 289 13 view .LVU869
 2800              	.LBB240:
 291:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 291 3 view .LVU870
 291:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 291 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 292:src/display.c **** }
 2805              		.loc 1 292 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 291:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 291 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 292:src/display.c **** }
ARM GAS  /tmp/ccW65oEM.s 			page 116


 2809              		.loc 1 292 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 293:src/display.c **** 
 2812              		.loc 1 293 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE240:
 2825              	.LBE239:
 2826              	.LBE228:
 2827              	.LBE227:
 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 555:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 555 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 556:src/display.c ****       int c;
 2849              		.loc 1 556 7 view .LVU877
 2850              	.LVL316:
 557:src/display.c ****       unsigned int b;
 2851              		.loc 1 557 7 view .LVU878
 558:src/display.c **** 
 2852              		.loc 1 558 7 view .LVU879
 561:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 561 7 view .LVU880
 555:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 555 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
ARM GAS  /tmp/ccW65oEM.s 			page 117


 2858              		.cfi_offset 14, -4
 561:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 561 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 570:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 570 7 is_stmt 1 view .LVU883
 570:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 570 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 570:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 570 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 572:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 572 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 573:src/display.c **** 
 2878              		.loc 1 573 7 view .LVU887
 572:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 572 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 573:src/display.c **** 
 2883              		.loc 1 573 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 576:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 576 7 is_stmt 1 view .LVU890
 576:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 576 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 576:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 576 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 578:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 578 7 is_stmt 1 view .LVU893
 578:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 578 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 578:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 578 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
ARM GAS  /tmp/ccW65oEM.s 			page 118


 580:src/display.c **** 
 2901              		.loc 1 580 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 566:src/display.c ****       }
 2905              		.loc 1 566 16 is_stmt 1 view .LVU897
 566:src/display.c ****       }
 2906              		.loc 1 566 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 566:src/display.c ****       }
 2911              		.loc 1 566 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 566:src/display.c ****       }
 2914              		.loc 1 566 39 is_stmt 1 view .LVU900
 570:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 570 7 view .LVU901
 570:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 570 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 570:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 570 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 571:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 571 2 is_stmt 1 view .LVU904
 2923              	.LBB247:
 2924              	.LBI247:
 301:src/display.c **** {
 2925              		.loc 1 301 13 view .LVU905
 2926              	.LBB248:
 303:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 303 3 view .LVU906
 303:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 303 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 304:src/display.c **** }
 2931              		.loc 1 304 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 303:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 303 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 304:src/display.c **** }
 2935              		.loc 1 304 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 305:src/display.c **** 
 2938              		.loc 1 305 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
ARM GAS  /tmp/ccW65oEM.s 			page 119


 305:src/display.c **** 
 2942              		.loc 1 305 1 view .LVU912
 2943              	.LBE248:
 2944              	.LBE247:
 2945              	.LBB249:
 2946              	.LBI249:
 555:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 555 17 is_stmt 1 view .LVU913
 2948              	.LBB250:
 579:src/display.c ****     }
 2949              		.loc 1 579 2 view .LVU914
 2950              	.LBE250:
 2951              	.LBE249:
 580:src/display.c **** 
 2952              		.loc 1 580 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB252:
 2960              	.LBB251:
 579:src/display.c ****     }
 2961              		.loc 1 579 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 579:src/display.c ****     }
 2968              		.loc 1 579 2 view .LVU917
 2969              	.LBE251:
 2970              	.LBE252:
 577:src/display.c ****       if (get_overflow())
 2971              		.loc 1 577 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
ARM GAS  /tmp/ccW65oEM.s 			page 120


 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1359:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1359 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1359:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1359 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1359:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1359 67 view .LVU921
 3019 0006 9246     		mov	r10, r2
 3020 0008 8046     		mov	r8, r0
 3021 000a 8946     		mov	r9, r1
1360:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1360 2 is_stmt 1 view .LVU922
1360:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1360 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1360:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1360 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L374
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1366:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1366 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1360:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1360 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1361:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1361 2 is_stmt 1 view .LVU927
1362:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1362 2 view .LVU928
1363:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1363 2 view .LVU929
ARM GAS  /tmp/ccW65oEM.s 			page 121


1364:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1364 2 view .LVU930
1365:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1365 2 view .LVU931
1366:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1366 2 view .LVU932
1366:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1366 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1367:src/display.c **** 
 3045              		.loc 1 1367 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1369:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1369 2 view .LVU935
 3048 0020 00F24481 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L374+4
 3050 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3051              	.LVL334:
1377:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1377 2 view .LVU936
1377:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1377 5 is_stmt 0 view .LVU937
 3054 002a BAF1000F 		cmp	r10, #0
 3055 002e 00F04481 		beq	.L365
 3056              	.LVL335:
 3057              	.L288:
1382:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1382 2 is_stmt 1 view .LVU938
1382:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1382 24 is_stmt 0 view .LVU939
 3060 0032 6B1E     		subs	r3, r5, #1
1382:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1382 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1382:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1382 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F080 		bne	.L366
1399:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1399 4 is_stmt 1 view .LVU942
1399:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1399 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 18DC     		bgt	.L299
 3071              	.LBB253:
1400:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1400 6 is_stmt 1 view .LVU944
1400:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1400 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF12006 		sub	r6, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA06F3 		lsl	r3, r1, r6
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
ARM GAS  /tmp/ccW65oEM.s 			page 122


 3081              	.LVL336:
1401:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1401 6 is_stmt 1 view .LVU946
1400:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1400 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1401:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1401 9 view .LVU948
 3087 0068 00EA0800 		and	r0, r0, r8
 3088 006c 01EA0901 		and	r1, r1, r9
 3089              	.LVL337:
1402:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1402 9 view .LVU949
 3091 0070 0A2D     		cmp	r5, #10
1401:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1401 9 view .LVU950
 3093 0072 8046     		mov	r8, r0
 3094              	.LVL338:
1401:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1401 9 view .LVU951
 3096 0074 8946     		mov	r9, r1
1402:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1402 6 is_stmt 1 view .LVU952
1402:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1402 9 is_stmt 0 view .LVU953
 3099 0076 00F02681 		beq	.L367
 3100              	.LVL339:
 3101              	.L299:
1402:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1402 9 view .LVU954
 3103              	.LBE253:
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1406 4 is_stmt 1 view .LVU955
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1406 8 is_stmt 0 view .LVU956
 3106 007a B54B     		ldr	r3, .L374+8
 3107 007c 1B68     		ldr	r3, [r3]
 3108 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1406 7 view .LVU957
 3110 0082 9907     		lsls	r1, r3, #30
 3111 0084 3FD5     		bpl	.L328
1409:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1409 11 is_stmt 1 view .LVU958
 3113              	.LBB254:
1417:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1417 6 view .LVU959
1418:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1418 6 view .LVU960
1418:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1418 25 is_stmt 0 view .LVU961
 3117 0086 6A08     		lsrs	r2, r5, #1
 3118              	.LVL340:
1419:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1419 6 is_stmt 1 view .LVU962
1419:src/display.c **** 	    v = (unsigned long long int)vs;
ARM GAS  /tmp/ccW65oEM.s 			page 123


 3120              		.loc 1 1419 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1419:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1419 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1420:src/display.c **** 
 3131              		.loc 1 1420 6 is_stmt 1 discriminator 4 view .LVU965
1422:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1422 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0306 		add	r6, fp, r3
1422:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1422 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1422:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1422 21 discriminator 4 view .LVU968
 3138 00a2 B6FBF3F6 		udiv	r6, r6, r3
1423:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1423 6 discriminator 4 view .LVU969
 3140 00a6 002E     		cmp	r6, #0
1420:src/display.c **** 
 3141              		.loc 1 1420 8 discriminator 4 view .LVU970
 3142 00a8 4046     		mov	r0, r8
 3143 00aa 4946     		mov	r1, r9
 3144              	.LVL343:
1422:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1422 6 is_stmt 1 discriminator 4 view .LVU971
1423:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1423 6 discriminator 4 view .LVU972
1423:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1423 16 discriminator 4 view .LVU973
1423:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1423 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ac 40F36D81 		ble	.L329
 3150 00b0 05AC     		add	r4, sp, #20
 3151 00b2 DFF8A8B2 		ldr	fp, .L374+20
 3152              	.LVL344:
1423:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1423 6 discriminator 4 view .LVU975
 3154 00b6 3719     		adds	r7, r6, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB255:
1424:src/display.c **** 	      v /= b;
 3158              		.loc 1 1424 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00b8 2A46     		mov	r2, r5
 3160 00ba 0023     		movs	r3, #0
 3161 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1425:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/ccW65oEM.s 			page 124


 3163              		.loc 1 1425 8 discriminator 3 view .LVU977
1426:src/display.c **** 	    }
 3164              		.loc 1 1426 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c4 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1426:src/display.c **** 	    }
 3168              		.loc 1 1426 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE255:
1423:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1423 21 discriminator 3 view .LVU980
1423:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1423 16 discriminator 3 view .LVU981
1423:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1423 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00c8 BC42     		cmp	r4, r7
 3174 00ca F5D1     		bne	.L306
 3175 00cc 06F1FF39 		add	r9, r6, #-1
1423:src/display.c **** 	      const int r = v % b;
 3176              		.loc 1 1423 6 view .LVU983
 3177 00d0 3446     		mov	r4, r6
 3178              	.LVL348:
 3179              	.L298:
1423:src/display.c **** 	      const int r = v % b;
 3180              		.loc 1 1423 6 view .LVU984
 3181              	.LBE254:
1432:src/display.c **** 	  if (sign) *res++ = '-';
 3182              		.loc 1 1432 2 is_stmt 1 view .LVU985
1432:src/display.c **** 	  if (sign) *res++ = '-';
 3183              		.loc 1 1432 5 is_stmt 0 view .LVU986
 3184 00d2 BAF1000F 		cmp	r10, #0
 3185 00d6 41D0     		beq	.L307
 3186              	.LVL349:
 3187              	.L368:
1433:src/display.c **** 	  while (--i >= 0)
 3188              		.loc 1 1433 4 is_stmt 1 view .LVU987
1433:src/display.c **** 	  while (--i >= 0)
 3189              		.loc 1 1433 7 is_stmt 0 view .LVU988
 3190 00d8 049B     		ldr	r3, [sp, #16]
 3191 00da 13B1     		cbz	r3, .L308
1433:src/display.c **** 	  while (--i >= 0)
 3192              		.loc 1 1433 14 is_stmt 1 discriminator 1 view .LVU989
 3193              	.LVL350:
1433:src/display.c **** 	  while (--i >= 0)
 3194              		.loc 1 1433 21 is_stmt 0 discriminator 1 view .LVU990
 3195 00dc 2D23     		movs	r3, #45
 3196 00de 0AF8013B 		strb	r3, [r10], #1
 3197              	.LVL351:
 3198              	.L308:
1434:src/display.c **** 	    *res++ = buf[i];
 3199              		.loc 1 1434 10 is_stmt 1 view .LVU991
1434:src/display.c **** 	    *res++ = buf[i];
 3200              		.loc 1 1434 10 is_stmt 0 view .LVU992
 3201 00e2 B9F1FF3F 		cmp	r9, #-1
 3202 00e6 0BD0     		beq	.L285
 3203 00e8 09F10103 		add	r3, r9, #1
 3204 00ec 05A9     		add	r1, sp, #20
ARM GAS  /tmp/ccW65oEM.s 			page 125


 3205 00ee 0AF1FF3A 		add	r10, r10, #-1
 3206 00f2 0B44     		add	r3, r3, r1
 3207              	.LVL352:
 3208              	.L310:
1435:src/display.c **** 	} else {
 3209              		.loc 1 1435 6 is_stmt 1 view .LVU993
1435:src/display.c **** 	} else {
 3210              		.loc 1 1435 13 is_stmt 0 view .LVU994
 3211 00f4 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3212              	.LVL353:
1435:src/display.c **** 	} else {
 3213              		.loc 1 1435 13 view .LVU995
 3214 00f8 0AF8012F 		strb	r2, [r10, #1]!
 3215              	.LVL354:
1434:src/display.c **** 	    *res++ = buf[i];
 3216              		.loc 1 1434 10 is_stmt 1 view .LVU996
1434:src/display.c **** 	    *res++ = buf[i];
 3217              		.loc 1 1434 10 is_stmt 0 view .LVU997
 3218 00fc 9942     		cmp	r1, r3
 3219 00fe F9D1     		bne	.L310
 3220              	.LVL355:
 3221              	.L285:
1481:src/display.c **** 
 3222              		.loc 1 1481 7 view .LVU998
 3223 0100 17B0     		add	sp, sp, #92
 3224              		.cfi_remember_state
 3225              		.cfi_def_cfa_offset 36
 3226              		@ sp needed
 3227 0102 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3228              	.LVL356:
 3229              	.L328:
 3230              		.cfi_restore_state
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3231              		.loc 1 1406 25 discriminator 1 view .LVU999
 3232 0106 58EA0903 		orrs	r3, r8, r9
 3233 010a 00F0C680 		beq	.L293
1409:src/display.c **** 	    v = (unsigned long long int)vs;
 3234              		.loc 1 1409 11 is_stmt 1 view .LVU1000
1410:src/display.c **** 	    for (i=0; v != 0; i++) {
 3235              		.loc 1 1410 6 view .LVU1001
 3236 010e 2A46     		mov	r2, r5
1410:src/display.c **** 	    for (i=0; v != 0; i++) {
 3237              		.loc 1 1410 8 is_stmt 0 view .LVU1002
 3238 0110 4746     		mov	r7, r8
 3239 0112 0023     		movs	r3, #0
 3240 0114 0DF11408 		add	r8, sp, #20
 3241 0118 DFF840B2 		ldr	fp, .L374+20
 3242              	.LVL357:
1410:src/display.c **** 	    for (i=0; v != 0; i++) {
 3243              		.loc 1 1410 8 view .LVU1003
 3244 011c 0095     		str	r5, [sp]
 3245 011e 4E46     		mov	r6, r9
1411:src/display.c **** 	      const int r = v % b;
 3246              		.loc 1 1411 6 is_stmt 1 view .LVU1004
 3247              	.LVL358:
1411:src/display.c **** 	      const int r = v % b;
 3248              		.loc 1 1411 16 view .LVU1005
ARM GAS  /tmp/ccW65oEM.s 			page 126


 3249 0120 4546     		mov	r5, r8
 3250              	.LVL359:
1411:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1411 16 is_stmt 0 view .LVU1006
 3252 0122 9946     		mov	r9, r3
 3253 0124 9046     		mov	r8, r2
 3254              	.LVL360:
 3255              	.L304:
 3256              	.LBB256:
1412:src/display.c **** 	      v /= b;
 3257              		.loc 1 1412 8 is_stmt 1 discriminator 3 view .LVU1007
 3258 0126 3846     		mov	r0, r7
 3259 0128 3146     		mov	r1, r6
 3260 012a 4246     		mov	r2, r8
 3261 012c 4B46     		mov	r3, r9
 3262 012e FFF7FEFF 		bl	__aeabi_uldivmod
 3263              	.LVL361:
 3264 0132 3346     		mov	r3, r6
 3265 0134 9446     		mov	ip, r2
 3266              	.LVL362:
1413:src/display.c **** 	      buf[i] = DIGITS[r];
 3267              		.loc 1 1413 8 discriminator 3 view .LVU1008
 3268              	.LBE256:
1411:src/display.c **** 	      const int r = v % b;
 3269              		.loc 1 1411 6 is_stmt 0 discriminator 3 view .LVU1009
 3270 0136 4B45     		cmp	r3, r9
 3271 0138 3A46     		mov	r2, r7
 3272              	.LVL363:
1411:src/display.c **** 	      const int r = v % b;
 3273              		.loc 1 1411 6 discriminator 3 view .LVU1010
 3274 013a 08BF     		it	eq
 3275 013c 4245     		cmpeq	r2, r8
 3276              	.LBB257:
1414:src/display.c **** 	    }
 3277              		.loc 1 1414 15 discriminator 3 view .LVU1011
 3278 013e 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3279              	.LVL364:
1414:src/display.c **** 	    }
 3280              		.loc 1 1414 15 discriminator 3 view .LVU1012
 3281 0142 05F8017B 		strb	r7, [r5], #1
1413:src/display.c **** 	      buf[i] = DIGITS[r];
 3282              		.loc 1 1413 10 discriminator 3 view .LVU1013
 3283 0146 0E46     		mov	r6, r1
 3284              	.LVL365:
1414:src/display.c **** 	    }
 3285              		.loc 1 1414 8 is_stmt 1 discriminator 3 view .LVU1014
 3286              	.LBE257:
1411:src/display.c **** 	      const int r = v % b;
 3287              		.loc 1 1411 24 discriminator 3 view .LVU1015
 3288              	.LBB258:
1413:src/display.c **** 	      buf[i] = DIGITS[r];
 3289              		.loc 1 1413 10 is_stmt 0 discriminator 3 view .LVU1016
 3290 0148 0746     		mov	r7, r0
 3291 014a 2146     		mov	r1, r4
 3292              	.LVL366:
1413:src/display.c **** 	      buf[i] = DIGITS[r];
 3293              		.loc 1 1413 10 discriminator 3 view .LVU1017
ARM GAS  /tmp/ccW65oEM.s 			page 127


 3294              	.LBE258:
1411:src/display.c **** 	      const int r = v % b;
 3295              		.loc 1 1411 25 discriminator 3 view .LVU1018
 3296 014c 04F10104 		add	r4, r4, #1
 3297              	.LVL367:
1411:src/display.c **** 	      const int r = v % b;
 3298              		.loc 1 1411 16 is_stmt 1 discriminator 3 view .LVU1019
1411:src/display.c **** 	      const int r = v % b;
 3299              		.loc 1 1411 6 is_stmt 0 discriminator 3 view .LVU1020
 3300 0150 E9D2     		bcs	.L304
 3301 0152 009D     		ldr	r5, [sp]
 3302 0154 8946     		mov	r9, r1
1432:src/display.c **** 	  if (sign) *res++ = '-';
 3303              		.loc 1 1432 2 is_stmt 1 view .LVU1021
1432:src/display.c **** 	  if (sign) *res++ = '-';
 3304              		.loc 1 1432 5 is_stmt 0 view .LVU1022
 3305 0156 BAF1000F 		cmp	r10, #0
 3306 015a BDD1     		bne	.L368
 3307              	.LVL368:
 3308              	.L307:
 3309              	.LBB259:
1452:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3310              		.loc 1 1452 4 is_stmt 1 view .LVU1023
1452:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3311              		.loc 1 1452 33 is_stmt 0 view .LVU1024
 3312 015c 022D     		cmp	r5, #2
 3313 015e 00F0D880 		beq	.L369
 3314              	.LVL369:
1453:src/display.c **** 	    : b == 16 ? 2 : 3;
 3315              		.loc 1 1453 4 is_stmt 1 view .LVU1025
1453:src/display.c **** 	    : b == 16 ? 2 : 3;
 3316              		.loc 1 1453 30 is_stmt 0 view .LVU1026
 3317 0162 042D     		cmp	r5, #4
 3318 0164 00F00881 		beq	.L370
1452:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3319              		.loc 1 1452 33 view .LVU1027
 3320 0168 102D     		cmp	r5, #16
 3321 016a 0CBF     		ite	eq
 3322 016c 0225     		moveq	r5, #2
 3323 016e 0325     		movne	r5, #3
 3324 0170 0C27     		movs	r7, #12
 3325              	.LVL370:
 3326              	.L312:
1455:src/display.c **** #endif
 3327              		.loc 1 1455 4 is_stmt 1 view .LVU1028
 3328 0172 FFF7FEFF 		bl	set_separator_decimal_modes
 3329              	.LVL371:
1457:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3330              		.loc 1 1457 4 view .LVU1029
1457:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3331              		.loc 1 1457 27 is_stmt 0 view .LVU1030
 3332 0176 99FBF7F3 		sdiv	r3, r9, r7
1458:src/display.c **** 	    State2.window = 0;
 3333              		.loc 1 1458 26 view .LVU1031
 3334 017a 734A     		ldr	r2, .L374
1457:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3335              		.loc 1 1457 17 view .LVU1032
ARM GAS  /tmp/ccW65oEM.s 			page 128


 3336 017c 7549     		ldr	r1, .L374+12
1458:src/display.c **** 	    State2.window = 0;
 3337              		.loc 1 1458 26 view .LVU1033
 3338 017e 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1457:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3339              		.loc 1 1457 17 view .LVU1034
 3340 0180 0B60     		str	r3, [r1]
1458:src/display.c **** 	    State2.window = 0;
 3341              		.loc 1 1458 4 is_stmt 1 view .LVU1035
1458:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1458 8 is_stmt 0 view .LVU1036
 3343 0182 C2F3C208 		ubfx	r8, r2, #3, #3
1458:src/display.c **** 	    State2.window = 0;
 3344              		.loc 1 1458 7 view .LVU1037
 3345 0186 4345     		cmp	r3, r8
 3346 0188 C0F2D780 		blt	.L314
 3347 018c 07FB08F8 		mul	r8, r7, r8
 3348              	.L315:
1460:src/display.c **** 
 3349              		.loc 1 1460 4 is_stmt 1 view .LVU1038
1460:src/display.c **** 
 3350              		.loc 1 1460 11 is_stmt 0 view .LVU1039
 3351 0190 16AB     		add	r3, sp, #88
 3352 0192 16AA     		add	r2, sp, #88
 3353 0194 1C44     		add	r4, r4, r3
 3354              	.LVL372:
1460:src/display.c **** 
 3355              		.loc 1 1460 11 view .LVU1040
 3356 0196 02EB0806 		add	r6, r2, r8
 3357 019a 0023     		movs	r3, #0
 3358 019c 453E     		subs	r6, r6, #69
 3359 019e 04F8443C 		strb	r3, [r4, #-68]
1462:src/display.c **** 	  for (k = 0; k < 12; k++)
 3360              		.loc 1 1462 4 is_stmt 1 view .LVU1041
 3361              	.LVL373:
1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3362              		.loc 1 1463 4 view .LVU1042
1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3363              		.loc 1 1463 16 view .LVU1043
1460:src/display.c **** 
 3364              		.loc 1 1460 11 is_stmt 0 view .LVU1044
 3365 01a2 3246     		mov	r2, r6
 3366              	.LVL374:
 3367              	.L317:
1464:src/display.c **** 	      break;
 3368              		.loc 1 1464 6 is_stmt 1 view .LVU1045
1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3369              		.loc 1 1463 24 view .LVU1046
1464:src/display.c **** 	      break;
 3370              		.loc 1 1464 9 is_stmt 0 view .LVU1047
 3371 01a4 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3372 01a8 0029     		cmp	r1, #0
 3373 01aa 00F0D980 		beq	.L316
1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3374              		.loc 1 1463 25 discriminator 2 view .LVU1048
 3375 01ae 0133     		adds	r3, r3, #1
 3376              	.LVL375:
ARM GAS  /tmp/ccW65oEM.s 			page 129


1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3377              		.loc 1 1463 16 is_stmt 1 discriminator 2 view .LVU1049
1463:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1463 4 is_stmt 0 discriminator 2 view .LVU1050
 3379 01b0 0C2B     		cmp	r3, #12
 3380 01b2 F7D1     		bne	.L317
1466:src/display.c **** 	    int ch = buf[j++];
 3381              		.loc 1 1466 4 view .LVU1051
 3382 01b4 4FF00B09 		mov	r9, #11
 3383              	.LVL376:
 3384              	.L318:
1466:src/display.c **** 	    int ch = buf[j++];
 3385              		.loc 1 1466 4 view .LVU1052
 3386 01b8 08F10108 		add	r8, r8, #1
 3387 01bc C844     		add	r8, r8, r9
 3388 01be 4C46     		mov	r4, r9
 3389 01c0 4FF0630B 		mov	fp, #99
 3390 01c4 09E0     		b	.L323
 3391              	.LVL377:
 3392              	.L371:
 3393              	.LBB260:
1472:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3394              		.loc 1 1472 8 view .LVU1053
 3395 01c6 644B     		ldr	r3, .L374+16
 3396 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3397              	.LVL378:
 3398              	.LBB261:
 3399              	.LBI261:
 360:src/display.c ****   if (sep == SEP_NONE)
 3400              		.loc 1 360 14 is_stmt 1 view .LVU1054
 3401              	.LBB262:
 361:src/display.c ****     return res;
 3402              		.loc 1 361 3 view .LVU1055
 361:src/display.c ****     return res;
 3403              		.loc 1 361 6 is_stmt 0 view .LVU1056
 3404 01ca 09B1     		cbz	r1, .L321
 361:src/display.c ****     return res;
 3405              		.loc 1 361 6 view .LVU1057
 3406 01cc FFF7FEFF 		bl	set_separator.part.0
 3407              	.LVL379:
 3408              	.L321:
 361:src/display.c ****     return res;
 3409              		.loc 1 361 6 view .LVU1058
 3410              	.LBE262:
 3411              	.LBE261:
1473:src/display.c **** 	  }
 3412              		.loc 1 1473 6 is_stmt 1 discriminator 2 view .LVU1059
 3413              	.LBE260:
1466:src/display.c **** 	    int ch = buf[j++];
 3414              		.loc 1 1466 4 is_stmt 0 discriminator 2 view .LVU1060
 3415 01d0 013C     		subs	r4, r4, #1
1466:src/display.c **** 	    int ch = buf[j++];
 3416              		.loc 1 1466 4 discriminator 2 view .LVU1061
 3417 01d2 621C     		adds	r2, r4, #1
 3418              	.LBB265:
1473:src/display.c **** 	  }
 3419              		.loc 1 1473 10 discriminator 2 view .LVU1062
ARM GAS  /tmp/ccW65oEM.s 			page 130


 3420 01d4 ABF1090B 		sub	fp, fp, #9
 3421              	.LVL380:
1473:src/display.c **** 	  }
 3422              		.loc 1 1473 10 discriminator 2 view .LVU1063
 3423              	.LBE265:
1466:src/display.c **** 	    int ch = buf[j++];
 3424              		.loc 1 1466 24 is_stmt 1 discriminator 2 view .LVU1064
1466:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1466 14 discriminator 2 view .LVU1065
1466:src/display.c **** 	    int ch = buf[j++];
 3426              		.loc 1 1466 4 is_stmt 0 discriminator 2 view .LVU1066
 3427 01d8 16D0     		beq	.L327
 3428              	.LVL381:
 3429              	.L323:
 3430              	.LBB266:
1467:src/display.c **** 	    if (i >= shift)
 3431              		.loc 1 1467 6 is_stmt 1 view .LVU1067
1469:src/display.c **** 	    set_dig(dig, ch);
 3432              		.loc 1 1469 8 view .LVU1068
1467:src/display.c **** 	    if (i >= shift)
 3433              		.loc 1 1467 10 is_stmt 0 view .LVU1069
 3434 01da 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1468:src/display.c **** 	      ch -= 030;
 3435              		.loc 1 1468 9 view .LVU1070
 3436 01de A9EB0402 		sub	r2, r9, r4
 3437 01e2 BA42     		cmp	r2, r7
 3438 01e4 A8EB040A 		sub	r10, r8, r4
 3439              	.LVL382:
1468:src/display.c **** 	      ch -= 030;
 3440              		.loc 1 1468 6 is_stmt 1 view .LVU1071
1470:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3441              		.loc 1 1470 6 is_stmt 0 view .LVU1072
 3442 01e8 5846     		mov	r0, fp
1469:src/display.c **** 	    set_dig(dig, ch);
 3443              		.loc 1 1469 11 view .LVU1073
 3444 01ea A8BF     		it	ge
 3445 01ec 1839     		subge	r1, r1, #24
 3446              	.LVL383:
1470:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3447              		.loc 1 1470 6 is_stmt 1 view .LVU1074
 3448 01ee FFF7FEFF 		bl	set_dig
 3449              	.LVL384:
1471:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3450              		.loc 1 1471 6 view .LVU1075
1471:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3451              		.loc 1 1471 13 is_stmt 0 view .LVU1076
 3452 01f2 9AFBF5F3 		sdiv	r3, r10, r5
 3453 01f6 05FB13A3 		mls	r3, r5, r3, r10
1471:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3454              		.loc 1 1471 9 view .LVU1077
 3455 01fa 002B     		cmp	r3, #0
 3456 01fc E8D1     		bne	.L321
1472:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3457              		.loc 1 1472 8 is_stmt 1 discriminator 1 view .LVU1078
 3458              	.LBB264:
 3459              	.LBB263:
 363:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
ARM GAS  /tmp/ccW65oEM.s 			page 131


 3460              		.loc 1 363 3 discriminator 1 view .LVU1079
 3461 01fe 5846     		mov	r0, fp
 3462              	.LBE263:
 3463              	.LBE264:
1471:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3464              		.loc 1 1471 27 is_stmt 0 discriminator 1 view .LVU1080
 3465 0200 002C     		cmp	r4, #0
 3466 0202 E0D1     		bne	.L371
1473:src/display.c **** 	  }
 3467              		.loc 1 1473 6 is_stmt 1 view .LVU1081
1473:src/display.c **** 	  }
 3468              		.loc 1 1473 10 is_stmt 0 view .LVU1082
 3469 0204 ABF1090B 		sub	fp, fp, #9
 3470              	.LVL385:
1473:src/display.c **** 	  }
 3471              		.loc 1 1473 10 view .LVU1083
 3472              	.LBE266:
1466:src/display.c **** 	    int ch = buf[j++];
 3473              		.loc 1 1466 24 is_stmt 1 view .LVU1084
1466:src/display.c **** 	    int ch = buf[j++];
 3474              		.loc 1 1466 14 view .LVU1085
 3475              	.L327:
1475:src/display.c **** 	    if (dig >= 0)
 3476              		.loc 1 1475 4 view .LVU1086
1475:src/display.c **** 	    if (dig >= 0)
 3477              		.loc 1 1475 7 is_stmt 0 view .LVU1087
 3478 0208 049B     		ldr	r3, [sp, #16]
 3479 020a 002B     		cmp	r3, #0
 3480 020c 3FF478AF 		beq	.L285
1476:src/display.c **** 	      set_dig(dig, '-');
 3481              		.loc 1 1476 6 is_stmt 1 view .LVU1088
1476:src/display.c **** 	      set_dig(dig, '-');
 3482              		.loc 1 1476 9 is_stmt 0 view .LVU1089
 3483 0210 BBF1000F 		cmp	fp, #0
 3484 0214 C0F2B280 		blt	.L372
 3485              	.LVL386:
 3486              	.L326:
1477:src/display.c **** 	    else	SET_MANT_SIGN;
 3487              		.loc 1 1477 8 is_stmt 1 view .LVU1090
 3488 0218 5846     		mov	r0, fp
 3489 021a 2D21     		movs	r1, #45
 3490 021c FFF7FEFF 		bl	set_dig
 3491              	.LVL387:
 3492 0220 6EE7     		b	.L285
 3493              	.LVL388:
 3494              	.L366:
1477:src/display.c **** 	    else	SET_MANT_SIGN;
 3495              		.loc 1 1477 8 is_stmt 0 view .LVU1091
 3496              	.LBE259:
1383:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3497              		.loc 1 1383 4 is_stmt 1 view .LVU1092
1383:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3498              		.loc 1 1383 8 is_stmt 0 view .LVU1093
 3499 0222 04AA     		add	r2, sp, #16
 3500 0224 4046     		mov	r0, r8
 3501 0226 4946     		mov	r1, r9
 3502 0228 FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/ccW65oEM.s 			page 132


 3503              	.LVL389:
 3504 022c 0646     		mov	r6, r0
 3505 022e 0F46     		mov	r7, r1
 3506              	.LVL390:
1384:src/display.c **** 	    v = value;
 3507              		.loc 1 1384 4 is_stmt 1 view .LVU1094
1384:src/display.c **** 	    v = value;
 3508              		.loc 1 1384 8 is_stmt 0 view .LVU1095
 3509 0230 FFF7FEFF 		bl	int_mode
 3510              	.LVL391:
1384:src/display.c **** 	    v = value;
 3511              		.loc 1 1384 7 view .LVU1096
 3512 0234 58BB     		cbnz	r0, .L290
1384:src/display.c **** 	    v = value;
 3513              		.loc 1 1384 33 discriminator 1 view .LVU1097
 3514 0236 049B     		ldr	r3, [sp, #16]
 3515 0238 012B     		cmp	r3, #1
 3516 023a 28D1     		bne	.L290
1384:src/display.c **** 	    v = value;
 3517              		.loc 1 1384 46 discriminator 2 view .LVU1098
 3518 023c 56EA0703 		orrs	r3, r6, r7
 3519 0240 6AD0     		beq	.L373
 3520              	.LVL392:
 3521              	.L291:
1384:src/display.c **** 	    v = value;
 3522              		.loc 1 1384 46 discriminator 2 view .LVU1099
 3523 0242 DFF818B1 		ldr	fp, .L374+20
 3524              	.LVL393:
1359:src/display.c **** 	const int ws = word_size();
 3525              		.loc 1 1359 67 discriminator 3 view .LVU1100
 3526 0246 CDF80CA0 		str	r10, [sp, #12]
 3527 024a 0023     		movs	r3, #0
 3528 024c D946     		mov	r9, fp
 3529 024e 0DF11408 		add	r8, sp, #20
 3530 0252 0024     		movs	r4, #0
 3531 0254 AA46     		mov	r10, r5
 3532              	.LVL394:
1359:src/display.c **** 	const int ws = word_size();
 3533              		.loc 1 1359 67 discriminator 3 view .LVU1101
 3534 0256 9B46     		mov	fp, r3
 3535              	.L297:
 3536              	.LVL395:
 3537              	.LBB269:
1393:src/display.c **** 	      v /= b;
 3538              		.loc 1 1393 8 is_stmt 1 discriminator 3 view .LVU1102
 3539 0258 3046     		mov	r0, r6
 3540 025a 3946     		mov	r1, r7
 3541 025c 5246     		mov	r2, r10
 3542 025e 5B46     		mov	r3, fp
 3543 0260 FFF7FEFF 		bl	__aeabi_uldivmod
 3544              	.LVL396:
1394:src/display.c **** 	      buf[i] = DIGITS[r];
 3545              		.loc 1 1394 8 discriminator 3 view .LVU1103
 3546 0264 CDE90067 		strd	r6, [sp]
1395:src/display.c **** 	    }
 3547              		.loc 1 1395 15 is_stmt 0 discriminator 3 view .LVU1104
 3548 0268 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccW65oEM.s 			page 133


 3549 026c 08F8013B 		strb	r3, [r8], #1
1394:src/display.c **** 	      buf[i] = DIGITS[r];
 3550              		.loc 1 1394 10 discriminator 3 view .LVU1105
 3551 0270 0F46     		mov	r7, r1
 3552              	.LVL397:
1395:src/display.c **** 	    }
 3553              		.loc 1 1395 8 is_stmt 1 discriminator 3 view .LVU1106
 3554              	.LBE269:
1392:src/display.c **** 	      const int r = v % b;
 3555              		.loc 1 1392 24 discriminator 3 view .LVU1107
1392:src/display.c **** 	      const int r = v % b;
 3556              		.loc 1 1392 6 is_stmt 0 discriminator 3 view .LVU1108
 3557 0272 DDE90012 		ldrd	r1, [sp]
 3558              	.LVL398:
1392:src/display.c **** 	      const int r = v % b;
 3559              		.loc 1 1392 6 discriminator 3 view .LVU1109
 3560 0276 5A45     		cmp	r2, fp
 3561 0278 08BF     		it	eq
 3562 027a 5145     		cmpeq	r1, r10
 3563 027c 2346     		mov	r3, r4
 3564              	.LVL399:
 3565              	.LBB270:
1394:src/display.c **** 	      buf[i] = DIGITS[r];
 3566              		.loc 1 1394 10 discriminator 3 view .LVU1110
 3567 027e 0646     		mov	r6, r0
 3568              	.LBE270:
1392:src/display.c **** 	      const int r = v % b;
 3569              		.loc 1 1392 25 discriminator 3 view .LVU1111
 3570 0280 04F10104 		add	r4, r4, #1
 3571              	.LVL400:
1392:src/display.c **** 	      const int r = v % b;
 3572              		.loc 1 1392 16 is_stmt 1 discriminator 3 view .LVU1112
1392:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1392 6 is_stmt 0 discriminator 3 view .LVU1113
 3574 0284 E8D2     		bcs	.L297
 3575 0286 DDF80CA0 		ldr	r10, [sp, #12]
 3576 028a 9946     		mov	r9, r3
 3577 028c 21E7     		b	.L298
 3578              	.LVL401:
 3579              	.L290:
1386:src/display.c **** 	    if (sign)
 3580              		.loc 1 1386 4 is_stmt 1 view .LVU1114
1386:src/display.c **** 	    if (sign)
 3581              		.loc 1 1386 7 is_stmt 0 view .LVU1115
 3582 028e 56EA0703 		orrs	r3, r6, r7
 3583 0292 D6D1     		bne	.L291
1387:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3584              		.loc 1 1387 6 is_stmt 1 view .LVU1116
1387:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3585              		.loc 1 1387 9 is_stmt 0 view .LVU1117
 3586 0294 049B     		ldr	r3, [sp, #16]
 3587 0296 002B     		cmp	r3, #0
 3588 0298 43D1     		bne	.L292
 3589              	.LVL402:
 3590              	.L293:
1389:src/display.c **** 	    return;
 3591              		.loc 1 1389 6 is_stmt 1 view .LVU1118
ARM GAS  /tmp/ccW65oEM.s 			page 134


 3592              	.LBB271:
 3593              	.LBI271:
 400:src/display.c ****   if (res) *res++ = ch;
 3594              		.loc 1 400 14 view .LVU1119
 3595              	.LBB272:
 401:src/display.c ****   else	set_dig(base, ch);
 3596              		.loc 1 401 3 view .LVU1120
 401:src/display.c ****   else	set_dig(base, ch);
 3597              		.loc 1 401 6 is_stmt 0 view .LVU1121
 3598 029a BAF1000F 		cmp	r10, #0
 3599 029e 47D0     		beq	.L295
 3600              	.LVL403:
 3601              	.L294:
 401:src/display.c ****   else	set_dig(base, ch);
 3602              		.loc 1 401 12 is_stmt 1 view .LVU1122
 401:src/display.c ****   else	set_dig(base, ch);
 3603              		.loc 1 401 19 is_stmt 0 view .LVU1123
 3604 02a0 3023     		movs	r3, #48
 3605 02a2 8AF80030 		strb	r3, [r10]
 3606              	.LBE272:
 3607              	.LBE271:
1481:src/display.c **** 
 3608              		.loc 1 1481 7 view .LVU1124
 3609 02a6 17B0     		add	sp, sp, #92
 3610              		.cfi_remember_state
 3611              		.cfi_def_cfa_offset 36
 3612              		@ sp needed
 3613 02a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3614              	.LVL404:
 3615              	.L286:
 3616              		.cfi_restore_state
1374:src/display.c **** 	}
 3617              		.loc 1 1374 11 is_stmt 1 view .LVU1125
1374:src/display.c **** 	}
 3618              		.loc 1 1374 15 is_stmt 0 view .LVU1126
 3619 02ac FFF7FEFF 		bl	int_base
 3620              	.LVL405:
1374:src/display.c **** 	}
 3621              		.loc 1 1374 15 view .LVU1127
 3622 02b0 0546     		mov	r5, r0
 3623              	.LVL406:
1374:src/display.c **** 	}
 3624              		.loc 1 1374 27 is_stmt 1 view .LVU1128
1377:src/display.c **** 	  IntMaxWindow = 0;
 3625              		.loc 1 1377 2 view .LVU1129
1377:src/display.c **** 	  IntMaxWindow = 0;
 3626              		.loc 1 1377 5 is_stmt 0 view .LVU1130
 3627 02b2 BAF1000F 		cmp	r10, #0
 3628 02b6 7FF4BCAE 		bne	.L288
 3629              	.LVL407:
 3630              	.L365:
1378:src/display.c **** 	  carry_overflow();
 3631              		.loc 1 1378 4 is_stmt 1 view .LVU1131
1378:src/display.c **** 	  carry_overflow();
 3632              		.loc 1 1378 17 is_stmt 0 view .LVU1132
 3633 02ba 264B     		ldr	r3, .L374+12
 3634 02bc C3F800A0 		str	r10, [r3]
ARM GAS  /tmp/ccW65oEM.s 			page 135


1379:src/display.c **** 	}
 3635              		.loc 1 1379 4 is_stmt 1 view .LVU1133
 3636 02c0 FFF7FEFF 		bl	carry_overflow
 3637              	.LVL408:
 3638 02c4 B5E6     		b	.L288
 3639              	.LVL409:
 3640              	.L367:
 3641              	.LBB274:
1402:src/display.c **** 	      vs |= ~mask;
 3642              		.loc 1 1402 38 is_stmt 0 discriminator 1 view .LVU1134
 3643 02c6 0BF1FF31 		add	r1, fp, #-1
1402:src/display.c **** 	      vs |= ~mask;
 3644              		.loc 1 1402 18 discriminator 1 view .LVU1135
 3645 02ca CBF12106 		rsb	r6, fp, #33
 3646 02ce C840     		lsrs	r0, r0, r1
 3647 02d0 09FA06F6 		lsl	r6, r9, r6
 3648 02d4 2039     		subs	r1, r1, #32
 3649 02d6 40EA0600 		orr	r0, r0, r6
 3650 02da 5CBF     		itt	pl
 3651 02dc 49FA01F1 		asrpl	r1, r9, r1
 3652 02e0 0843     		orrpl	r0, r0, r1
 3653 02e2 00F00106 		and	r6, r0, #1
 3654 02e6 0027     		movs	r7, #0
 3655 02e8 56EA0701 		orrs	r1, r6, r7
 3656 02ec 08D0     		beq	.L300
1403:src/display.c **** 	  }
 3657              		.loc 1 1403 8 is_stmt 1 view .LVU1136
1403:src/display.c **** 	  }
 3658              		.loc 1 1403 11 is_stmt 0 view .LVU1137
 3659 02ee 5042     		rsbs	r0, r2, #0
 3660 02f0 63EB4301 		sbc	r1, r3, r3, lsl #1
 3661 02f4 40EA0802 		orr	r2, r0, r8
 3662              	.LVL410:
1403:src/display.c **** 	  }
 3663              		.loc 1 1403 11 view .LVU1138
 3664 02f8 41EA0903 		orr	r3, r1, r9
 3665              	.LVL411:
1403:src/display.c **** 	  }
 3666              		.loc 1 1403 11 view .LVU1139
 3667 02fc 9046     		mov	r8, r2
 3668              	.LVL412:
1403:src/display.c **** 	  }
 3669              		.loc 1 1403 11 view .LVU1140
 3670 02fe 9946     		mov	r9, r3
 3671              	.L300:
1403:src/display.c **** 	  }
 3672              		.loc 1 1403 11 view .LVU1141
 3673              	.LBE274:
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3674              		.loc 1 1406 4 is_stmt 1 view .LVU1142
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3675              		.loc 1 1406 8 is_stmt 0 view .LVU1143
 3676 0300 134B     		ldr	r3, .L374+8
 3677 0302 1B68     		ldr	r3, [r3]
 3678 0304 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1406:src/display.c **** 	    set_dig_s(dig, '0', res);
 3679              		.loc 1 1406 7 view .LVU1144
ARM GAS  /tmp/ccW65oEM.s 			page 136


 3680 0308 9B07     		lsls	r3, r3, #30
 3681 030a 7FF5FCAE 		bpl	.L328
 3682 030e 0223     		movs	r3, #2
 3683 0310 C4E6     		b	.L305
 3684              	.LVL413:
 3685              	.L369:
 3686              	.LBB275:
1452:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3687              		.loc 1 1452 33 view .LVU1145
 3688 0312 0827     		movs	r7, #8
1454:src/display.c **** 	  set_separator_decimal_modes();
 3689              		.loc 1 1454 6 view .LVU1146
 3690 0314 0425     		movs	r5, #4
 3691 0316 2CE7     		b	.L312
 3692              	.LVL414:
 3693              	.L373:
1454:src/display.c **** 	  set_separator_decimal_modes();
 3694              		.loc 1 1454 6 view .LVU1147
 3695              	.LBE275:
1385:src/display.c **** 	  if (v == 0) {
 3696              		.loc 1 1385 6 is_stmt 1 view .LVU1148
1385:src/display.c **** 	  if (v == 0) {
 3697              		.loc 1 1385 8 is_stmt 0 view .LVU1149
 3698 0318 4646     		mov	r6, r8
 3699              	.LVL415:
1385:src/display.c **** 	  if (v == 0) {
 3700              		.loc 1 1385 8 view .LVU1150
 3701 031a 4F46     		mov	r7, r9
 3702              	.LVL416:
1386:src/display.c **** 	    if (sign)
 3703              		.loc 1 1386 4 is_stmt 1 view .LVU1151
1386:src/display.c **** 	    if (sign)
 3704              		.loc 1 1386 7 is_stmt 0 view .LVU1152
 3705 031c 56EA0703 		orrs	r3, r6, r7
 3706 0320 8FD1     		bne	.L291
 3707              	.LVL417:
 3708              	.L292:
1388:src/display.c **** 	    set_dig_s(dig, '0', res);
 3709              		.loc 1 1388 8 is_stmt 1 view .LVU1153
 3710              	.LBB276:
 3711              	.LBI276:
 400:src/display.c ****   if (res) *res++ = ch;
 3712              		.loc 1 400 14 view .LVU1154
 3713              	.LBB277:
 401:src/display.c ****   else	set_dig(base, ch);
 3714              		.loc 1 401 3 view .LVU1155
 401:src/display.c ****   else	set_dig(base, ch);
 3715              		.loc 1 401 6 is_stmt 0 view .LVU1156
 3716 0322 BAF1000F 		cmp	r10, #0
 3717 0326 BBD1     		bne	.L294
 402:src/display.c ****   return res;
 3718              		.loc 1 402 8 is_stmt 1 view .LVU1157
 3719 0328 2D21     		movs	r1, #45
 3720 032a 5A20     		movs	r0, #90
 3721 032c FFF7FEFF 		bl	set_dig
 3722              	.LVL418:
 402:src/display.c ****   return res;
ARM GAS  /tmp/ccW65oEM.s 			page 137


 3723              		.loc 1 402 8 is_stmt 0 view .LVU1158
 3724              	.LBE277:
 3725              	.LBE276:
1389:src/display.c **** 	    return;
 3726              		.loc 1 1389 6 is_stmt 1 view .LVU1159
 3727              	.LBB278:
 400:src/display.c ****   if (res) *res++ = ch;
 3728              		.loc 1 400 14 view .LVU1160
 3729              	.LBB273:
 401:src/display.c ****   else	set_dig(base, ch);
 3730              		.loc 1 401 3 view .LVU1161
 3731              	.L295:
 402:src/display.c ****   return res;
 3732              		.loc 1 402 8 view .LVU1162
 3733 0330 3021     		movs	r1, #48
 3734 0332 6320     		movs	r0, #99
 3735 0334 FFF7FEFF 		bl	set_dig
 3736              	.LVL419:
 3737 0338 E2E6     		b	.L285
 3738              	.LVL420:
 3739              	.L314:
 402:src/display.c ****   return res;
 3740              		.loc 1 402 8 is_stmt 0 view .LVU1163
 3741              	.LBE273:
 3742              	.LBE278:
 3743              	.LBB279:
1459:src/display.c **** 	  buf[i] = '\0';
 3744              		.loc 1 1459 6 is_stmt 1 view .LVU1164
1459:src/display.c **** 	  buf[i] = '\0';
 3745              		.loc 1 1459 20 is_stmt 0 view .LVU1165
 3746 033a 034B     		ldr	r3, .L374
 3747 033c 6FF3C502 		bfc	r2, #3, #3
 3748 0340 1A75     		strb	r2, [r3, #20]
 3749 0342 4FF00008 		mov	r8, #0
 3750 0346 23E7     		b	.L315
 3751              	.L375:
 3752              		.align	2
 3753              	.L374:
 3754 0348 00000000 		.word	StateWhileOn
 3755 034c 00000000 		.word	CSWTCH.310
 3756 0350 00000000 		.word	main_ram
 3757 0354 00000000 		.word	IntMaxWindow
 3758 0358 00000000 		.word	.LANCHOR0
 3759 035c 00000000 		.word	.LANCHOR12
 3760              	.LVL421:
 3761              	.L316:
1466:src/display.c **** 	    int ch = buf[j++];
 3762              		.loc 1 1466 14 is_stmt 1 discriminator 1 view .LVU1166
1466:src/display.c **** 	    int ch = buf[j++];
 3763              		.loc 1 1466 4 is_stmt 0 discriminator 1 view .LVU1167
 3764 0360 03F1FF39 		add	r9, r3, #-1
 3765              	.LVL422:
1466:src/display.c **** 	    int ch = buf[j++];
 3766              		.loc 1 1466 4 discriminator 1 view .LVU1168
 3767 0364 002B     		cmp	r3, #0
 3768 0366 7FF427AF 		bne	.L318
1475:src/display.c **** 	    if (dig >= 0)
ARM GAS  /tmp/ccW65oEM.s 			page 138


 3769              		.loc 1 1475 4 is_stmt 1 view .LVU1169
1475:src/display.c **** 	    if (dig >= 0)
 3770              		.loc 1 1475 7 is_stmt 0 view .LVU1170
 3771 036a 049B     		ldr	r3, [sp, #16]
 3772 036c 002B     		cmp	r3, #0
 3773 036e 3FF4C7AE 		beq	.L285
 3774 0372 4FF0630B 		mov	fp, #99
 3775 0376 4FE7     		b	.L326
 3776              	.LVL423:
 3777              	.L370:
1452:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3778              		.loc 1 1452 33 view .LVU1171
 3779 0378 0C27     		movs	r7, #12
 3780 037a FAE6     		b	.L312
 3781              	.LVL424:
 3782              	.L372:
1478:src/display.c **** 	  }
 3783              		.loc 1 1478 11 is_stmt 1 view .LVU1172
 3784              	.LBB267:
 3785              	.LBI267:
 289:src/display.c **** {
 3786              		.loc 1 289 13 view .LVU1173
 3787              	.LBB268:
 291:src/display.c ****   set_dot(MANT_SIGN);
 3788              		.loc 1 291 3 view .LVU1174
 291:src/display.c ****   set_dot(MANT_SIGN);
 3789              		.loc 1 291 25 is_stmt 0 view .LVU1175
 3790 037c 044B     		ldr	r3, .L376
 3791 037e 2D22     		movs	r2, #45
 292:src/display.c **** }
 3792              		.loc 1 292 3 view .LVU1176
 3793 0380 8120     		movs	r0, #129
 291:src/display.c ****   set_dot(MANT_SIGN);
 3794              		.loc 1 291 25 view .LVU1177
 3795 0382 1A70     		strb	r2, [r3]
 292:src/display.c **** }
 3796              		.loc 1 292 3 is_stmt 1 view .LVU1178
 3797 0384 FFF7FEFF 		bl	set_dot
 3798              	.LVL425:
 293:src/display.c **** 
 3799              		.loc 1 293 1 is_stmt 0 view .LVU1179
 3800 0388 BAE6     		b	.L285
 3801              	.LVL426:
 3802              	.L329:
 293:src/display.c **** 
 3803              		.loc 1 293 1 view .LVU1180
 3804              	.LBE268:
 3805              	.LBE267:
 3806              	.LBE279:
 3807              	.LBB280:
1423:src/display.c **** 	      const int r = v % b;
 3808              		.loc 1 1423 6 view .LVU1181
 3809 038a 4FF0FF39 		mov	r9, #-1
 3810 038e A0E6     		b	.L298
 3811              	.L377:
 3812              		.align	2
 3813              	.L376:
ARM GAS  /tmp/ccW65oEM.s 			page 139


 3814 0390 00000000 		.word	LastDisplayedNumber
 3815              	.LBE280:
 3816              		.cfi_endproc
 3817              	.LFE18:
 3819              		.section	.text.set_annunciators,"ax",%progbits
 3820              		.align	1
 3821              		.p2align 2,,3
 3822              		.syntax unified
 3823              		.thumb
 3824              		.thumb_func
 3825              		.fpu fpv4-sp-d16
 3827              	set_annunciators:
 3828              	.LFB32:
2481:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3829              		.loc 1 2481 7 is_stmt 1 view -0
 3830              		.cfi_startproc
 3831              		@ args = 0, pretend = 0, frame = 0
 3832              		@ frame_needed = 0, uses_anonymous_args = 0
2482:src/display.c **** 
 3833              		.loc 1 2482 2 view .LVU1183
2481:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3834              		.loc 1 2481 7 is_stmt 0 view .LVU1184
 3835 0000 70B5     		push	{r4, r5, r6, lr}
 3836              		.cfi_def_cfa_offset 16
 3837              		.cfi_offset 4, -16
 3838              		.cfi_offset 5, -12
 3839              		.cfi_offset 6, -8
 3840              		.cfi_offset 14, -4
2491:src/display.c **** #endif
 3841              		.loc 1 2491 11 view .LVU1185
 3842 0002 344E     		ldr	r6, .L404
2482:src/display.c **** 
 3843              		.loc 1 2482 29 view .LVU1186
 3844 0004 FFF7FEFF 		bl	get_trig_mode
 3845              	.LVL427:
2491:src/display.c **** #endif
 3846              		.loc 1 2491 11 view .LVU1187
 3847 0008 3368     		ldr	r3, [r6]
2491:src/display.c **** #endif
 3848              		.loc 1 2491 2 view .LVU1188
 3849 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3850 000e 012B     		cmp	r3, #1
2482:src/display.c **** 
 3851              		.loc 1 2482 29 view .LVU1189
 3852 0010 0446     		mov	r4, r0
 3853              	.LVL428:
2491:src/display.c **** #endif
 3854              		.loc 1 2491 2 is_stmt 1 view .LVU1190
 3855              	.LBB299:
 3856              	.LBB300:
 333:src/display.c ****   else	clr_dot(n);
 3857              		.loc 1 333 11 is_stmt 0 view .LVU1191
 3858 0012 4FF08800 		mov	r0, #136
 3859              	.LBE300:
 3860              	.LBE299:
2491:src/display.c **** #endif
 3861              		.loc 1 2491 2 view .LVU1192
ARM GAS  /tmp/ccW65oEM.s 			page 140


 3862 0016 03D8     		bhi	.L379
2491:src/display.c **** #endif
 3863              		.loc 1 2491 30 discriminator 1 view .LVU1193
 3864 0018 2F4B     		ldr	r3, .L404+4
2491:src/display.c **** #endif
 3865              		.loc 1 2491 2 discriminator 1 view .LVU1194
 3866 001a 1B68     		ldr	r3, [r3]
 3867 001c 002B     		cmp	r3, #0
 3868 001e 56D0     		beq	.L400
 3869              	.L379:
 3870              	.LVL429:
 3871              	.LBB303:
 3872              	.LBI299:
 332:src/display.c ****   if (on)	set_dot(n);
 3873              		.loc 1 332 6 is_stmt 1 view .LVU1195
 3874              	.LBB301:
 333:src/display.c ****   else	clr_dot(n);
 3875              		.loc 1 333 3 view .LVU1196
 334:src/display.c **** }
 3876              		.loc 1 334 8 view .LVU1197
 3877 0020 FFF7FEFF 		bl	clr_dot
 3878              	.LVL430:
 3879              	.L380:
 334:src/display.c **** }
 3880              		.loc 1 334 8 is_stmt 0 view .LVU1198
 3881              	.LBE301:
 3882              	.LBE303:
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3883              		.loc 1 2493 2 is_stmt 1 view .LVU1199
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3884              		.loc 1 2493 19 is_stmt 0 view .LVU1200
 3885 0024 2D4D     		ldr	r5, .L404+8
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3886              		.loc 1 2493 2 view .LVU1201
 3887 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3888              	.LBB304:
 3889              	.LBB305:
 333:src/display.c ****   else	clr_dot(n);
 3890              		.loc 1 333 11 view .LVU1202
 3891 0028 8620     		movs	r0, #134
 3892              	.LBE305:
 3893              	.LBE304:
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3894              		.loc 1 2493 2 view .LVU1203
 3895 002a 23B9     		cbnz	r3, .L381
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3896              		.loc 1 2493 47 discriminator 2 view .LVU1204
 3897 002c 6A69     		ldr	r2, [r5, #20]
 3898 002e 2C4B     		ldr	r3, .L404+12
 3899 0030 1340     		ands	r3, r3, r2
2493:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3900              		.loc 1 2493 2 discriminator 2 view .LVU1205
 3901 0032 002B     		cmp	r3, #0
 3902 0034 48D0     		beq	.L401
 3903              	.L381:
 3904              	.LBB308:
 3905              	.LBB306:
ARM GAS  /tmp/ccW65oEM.s 			page 141


 333:src/display.c ****   else	clr_dot(n);
 3906              		.loc 1 333 11 is_stmt 1 view .LVU1206
 3907 0036 FFF7FEFF 		bl	set_dot
 3908              	.LVL431:
 3909              	.L382:
 3910              	.LBE306:
 3911              	.LBE308:
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3912              		.loc 1 2494 2 view .LVU1207
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3913              		.loc 1 2494 31 is_stmt 0 view .LVU1208
 3914 003a 2A4A     		ldr	r2, .L404+16
 3915 003c 6B69     		ldr	r3, [r5, #20]
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3916              		.loc 1 2494 2 view .LVU1209
 3917 003e 1A42     		tst	r2, r3
 3918              	.LBB309:
 3919              	.LBB310:
 333:src/display.c ****   else	clr_dot(n);
 3920              		.loc 1 333 11 view .LVU1210
 3921 0040 4FF08500 		mov	r0, #133
 3922              	.LBE310:
 3923              	.LBE309:
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3924              		.loc 1 2494 2 view .LVU1211
 3925 0044 02D0     		beq	.L383
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3926              		.loc 1 2494 48 discriminator 1 view .LVU1212
 3927 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2494:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3928              		.loc 1 2494 2 discriminator 1 view .LVU1213
 3929 0048 DA06     		lsls	r2, r3, #27
 3930 004a 3AD4     		bmi	.L384
 3931              	.L383:
 3932              	.LVL432:
 3933              	.LBB313:
 3934              	.LBI309:
 332:src/display.c ****   if (on)	set_dot(n);
 3935              		.loc 1 332 6 is_stmt 1 view .LVU1214
 3936              	.LBB311:
 333:src/display.c ****   else	clr_dot(n);
 3937              		.loc 1 333 3 view .LVU1215
 334:src/display.c **** }
 3938              		.loc 1 334 8 view .LVU1216
 3939 004c FFF7FEFF 		bl	clr_dot
 3940              	.LVL433:
 3941              	.L385:
 334:src/display.c **** }
 3942              		.loc 1 334 8 is_stmt 0 view .LVU1217
 3943              	.LBE311:
 3944              	.LBE313:
2495:src/display.c **** 	set_IO_annunciator();
 3945              		.loc 1 2495 2 is_stmt 1 view .LVU1218
 3946 0050 6820     		movs	r0, #104
 3947 0052 FFF7FEFF 		bl	get_user_flag
 3948              	.LVL434:
 3949              	.LBB314:
ARM GAS  /tmp/ccW65oEM.s 			page 142


 3950              	.LBI314:
 332:src/display.c ****   if (on)	set_dot(n);
 3951              		.loc 1 332 6 view .LVU1219
 3952              	.LBB315:
 333:src/display.c ****   else	clr_dot(n);
 3953              		.loc 1 333 3 view .LVU1220
 333:src/display.c ****   else	clr_dot(n);
 3954              		.loc 1 333 6 is_stmt 0 view .LVU1221
 3955 0056 28B3     		cbz	r0, .L386
 333:src/display.c ****   else	clr_dot(n);
 3956              		.loc 1 333 11 is_stmt 1 view .LVU1222
 3957              	.LBE315:
 3958              	.LBE314:
 3959              	.LBB319:
 3960              	.LBB320:
2523:src/display.c **** 	  dot(LIT_EQ, on);
 3961              		.loc 1 2523 9 is_stmt 0 view .LVU1223
 3962 0058 234D     		ldr	r5, .L404+20
 3963              	.LBE320:
 3964              	.LBE319:
 3965              	.LBB328:
 3966              	.LBB316:
 333:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 333 11 view .LVU1224
 3968 005a 8320     		movs	r0, #131
 3969              	.LVL435:
 333:src/display.c ****   else	clr_dot(n);
 3970              		.loc 1 333 11 view .LVU1225
 3971 005c FFF7FEFF 		bl	set_dot
 3972              	.LVL436:
 333:src/display.c ****   else	clr_dot(n);
 3973              		.loc 1 333 11 view .LVU1226
 3974              	.LBE316:
 3975              	.LBE328:
2496:src/display.c **** 
 3976              		.loc 1 2496 2 is_stmt 1 view .LVU1227
 3977              	.LBB329:
 3978              	.LBI319:
2508:src/display.c **** #ifndef DM42
 3979              		.loc 1 2508 12 view .LVU1228
 3980              	.LBB325:
2513:src/display.c **** #endif
 3981              		.loc 1 2513 4 view .LVU1229
2523:src/display.c **** 	  dot(LIT_EQ, on);
 3982              		.loc 1 2523 2 view .LVU1230
2523:src/display.c **** 	  dot(LIT_EQ, on);
 3983              		.loc 1 2523 5 is_stmt 0 view .LVU1231
 3984 0060 2B68     		ldr	r3, [r5]
 3985 0062 33BB     		cbnz	r3, .L402
 3986              	.L388:
 3987              	.LBE325:
 3988              	.LBE329:
2500:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3989              		.loc 1 2500 2 is_stmt 1 view .LVU1232
2500:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3990              		.loc 1 2500 11 is_stmt 0 view .LVU1233
 3991 0064 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccW65oEM.s 			page 143


 3992 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3993 006a 03F00103 		and	r3, r3, #1
2500:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3994              		.loc 1 2500 2 view .LVU1234
 3995 006e 2343     		orrs	r3, r3, r4
 3996 0070 13F0FF0F 		tst	r3, #255
 3997              	.LBB330:
 3998              	.LBB331:
 333:src/display.c ****   else	clr_dot(n);
 3999              		.loc 1 333 11 view .LVU1235
 4000 0074 4FF08C00 		mov	r0, #140
 4001              	.LBE331:
 4002              	.LBE330:
2500:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4003              		.loc 1 2500 2 view .LVU1236
 4004 0078 06D1     		bne	.L403
 4005              	.LVL437:
 4006              	.LBB334:
 4007              	.LBI330:
 332:src/display.c ****   if (on)	set_dot(n);
 4008              		.loc 1 332 6 is_stmt 1 view .LVU1237
 4009              	.LBB332:
 333:src/display.c ****   else	clr_dot(n);
 4010              		.loc 1 333 3 view .LVU1238
 333:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 333 11 view .LVU1239
 4012 007a FFF7FEFF 		bl	set_dot
 4013              	.LVL438:
 333:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 333 11 is_stmt 0 view .LVU1240
 4015              	.LBE332:
 4016              	.LBE334:
2501:src/display.c ****       }
 4017              		.loc 1 2501 2 is_stmt 1 view .LVU1241
 4018              	.L391:
 4019              	.LBB335:
 4020              	.LBI335:
 332:src/display.c ****   if (on)	set_dot(n);
 4021              		.loc 1 332 6 view .LVU1242
 4022              	.LBB336:
 333:src/display.c ****   else	clr_dot(n);
 4023              		.loc 1 333 3 view .LVU1243
 334:src/display.c **** }
 4024              		.loc 1 334 8 view .LVU1244
 4025              	.LBE336:
 4026              	.LBE335:
2502:src/display.c **** 
 4027              		.loc 1 2502 7 is_stmt 0 view .LVU1245
 4028 007e BDE87040 		pop	{r4, r5, r6, lr}
 4029              		.cfi_remember_state
 4030              		.cfi_restore 14
 4031              		.cfi_restore 6
 4032              		.cfi_restore 5
 4033              		.cfi_restore 4
 4034              		.cfi_def_cfa_offset 0
 4035              	.LVL439:
 4036              	.LBB340:
ARM GAS  /tmp/ccW65oEM.s 			page 144


 4037              	.LBB337:
 334:src/display.c **** }
 4038              		.loc 1 334 8 view .LVU1246
 4039 0082 8B20     		movs	r0, #139
 4040 0084 FFF7FEBF 		b	clr_dot
 4041              	.LVL440:
 4042              	.L403:
 4043              		.cfi_restore_state
 334:src/display.c **** }
 4044              		.loc 1 334 8 view .LVU1247
 4045              	.LBE337:
 4046              	.LBE340:
 4047              	.LBB341:
 332:src/display.c ****   if (on)	set_dot(n);
 4048              		.loc 1 332 6 is_stmt 1 view .LVU1248
 4049              	.LBB333:
 333:src/display.c ****   else	clr_dot(n);
 4050              		.loc 1 333 3 view .LVU1249
 334:src/display.c **** }
 4051              		.loc 1 334 8 view .LVU1250
 4052 0088 FFF7FEFF 		bl	clr_dot
 4053              	.LVL441:
 334:src/display.c **** }
 4054              		.loc 1 334 8 is_stmt 0 view .LVU1251
 4055              	.LBE333:
 4056              	.LBE341:
2501:src/display.c ****       }
 4057              		.loc 1 2501 2 is_stmt 1 view .LVU1252
2501:src/display.c ****       }
 4058              		.loc 1 2501 11 is_stmt 0 view .LVU1253
 4059 008c 3368     		ldr	r3, [r6]
 4060 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2501:src/display.c ****       }
 4061              		.loc 1 2501 2 view .LVU1254
 4062 0092 DB07     		lsls	r3, r3, #31
 4063 0094 F3D4     		bmi	.L391
2501:src/display.c ****       }
 4064              		.loc 1 2501 2 discriminator 1 view .LVU1255
 4065 0096 012C     		cmp	r4, #1
 4066 0098 F1D1     		bne	.L391
 4067              	.LVL442:
 4068              	.LBB342:
 332:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 332 6 is_stmt 1 view .LVU1256
 4070              	.LBB338:
 333:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 333 3 view .LVU1257
 333:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 333 11 view .LVU1258
 4073              	.LBE338:
 4074              	.LBE342:
2502:src/display.c **** 
 4075              		.loc 1 2502 7 is_stmt 0 view .LVU1259
 4076 009a BDE87040 		pop	{r4, r5, r6, lr}
 4077              		.cfi_remember_state
 4078              		.cfi_restore 14
 4079              		.cfi_restore 6
ARM GAS  /tmp/ccW65oEM.s 			page 145


 4080              		.cfi_restore 5
 4081              		.cfi_restore 4
 4082              		.cfi_def_cfa_offset 0
 4083              	.LVL443:
 4084              	.LBB343:
 4085              	.LBB339:
 333:src/display.c ****   else	clr_dot(n);
 4086              		.loc 1 333 11 view .LVU1260
 4087 009e 8B20     		movs	r0, #139
 4088 00a0 FFF7FEBF 		b	set_dot
 4089              	.LVL444:
 4090              	.L386:
 4091              		.cfi_restore_state
 333:src/display.c ****   else	clr_dot(n);
 4092              		.loc 1 333 11 view .LVU1261
 4093              	.LBE339:
 4094              	.LBE343:
 4095              	.LBB344:
 4096              	.LBB317:
 334:src/display.c **** }
 4097              		.loc 1 334 8 is_stmt 1 view .LVU1262
 4098              	.LBE317:
 4099              	.LBE344:
 4100              	.LBB345:
 4101              	.LBB326:
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4102              		.loc 1 2523 9 is_stmt 0 view .LVU1263
 4103 00a4 104D     		ldr	r5, .L404+20
 4104              	.LBE326:
 4105              	.LBE345:
 4106              	.LBB346:
 4107              	.LBB318:
 334:src/display.c **** }
 4108              		.loc 1 334 8 view .LVU1264
 4109 00a6 8320     		movs	r0, #131
 4110              	.LVL445:
 334:src/display.c **** }
 4111              		.loc 1 334 8 view .LVU1265
 4112 00a8 FFF7FEFF 		bl	clr_dot
 4113              	.LVL446:
 334:src/display.c **** }
 4114              		.loc 1 334 8 view .LVU1266
 4115              	.LBE318:
 4116              	.LBE346:
2496:src/display.c **** 
 4117              		.loc 1 2496 2 is_stmt 1 view .LVU1267
 4118              	.LBB347:
2508:src/display.c **** #ifndef DM42
 4119              		.loc 1 2508 12 view .LVU1268
 4120              	.LBB327:
2513:src/display.c **** #endif
 4121              		.loc 1 2513 4 view .LVU1269
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4122              		.loc 1 2523 2 view .LVU1270
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4123              		.loc 1 2523 5 is_stmt 0 view .LVU1271
 4124 00ac 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccW65oEM.s 			page 146


 4125 00ae 002B     		cmp	r3, #0
 4126 00b0 D8D0     		beq	.L388
 4127              	.L402:
 4128              	.LBB321:
 4129              	.LBI321:
2508:src/display.c **** #ifndef DM42
 4130              		.loc 1 2508 12 is_stmt 1 view .LVU1272
 4131              	.LBB322:
2524:src/display.c **** 	  IoAnnunciator = on;
 4132              		.loc 1 2524 4 view .LVU1273
 4133              	.LVL447:
 4134              	.LBB323:
 4135              	.LBI323:
 332:src/display.c ****   if (on)	set_dot(n);
 4136              		.loc 1 332 6 view .LVU1274
 4137              	.LBB324:
 333:src/display.c ****   else	clr_dot(n);
 4138              		.loc 1 333 3 view .LVU1275
 334:src/display.c **** }
 4139              		.loc 1 334 8 view .LVU1276
 4140 00b2 8420     		movs	r0, #132
 4141 00b4 FFF7FEFF 		bl	clr_dot
 4142              	.LVL448:
 334:src/display.c **** }
 4143              		.loc 1 334 8 is_stmt 0 view .LVU1277
 4144              	.LBE324:
 4145              	.LBE323:
2525:src/display.c **** 	  finish_display(); //LIT_EQ
 4146              		.loc 1 2525 4 is_stmt 1 view .LVU1278
2525:src/display.c **** 	  finish_display(); //LIT_EQ
 4147              		.loc 1 2525 18 is_stmt 0 view .LVU1279
 4148 00b8 0023     		movs	r3, #0
 4149 00ba 2B60     		str	r3, [r5]
2526:src/display.c **** 	}
 4150              		.loc 1 2526 4 is_stmt 1 view .LVU1280
 4151 00bc FFF7FEFF 		bl	finish_display
 4152              	.LVL449:
2528:src/display.c **** 
 4153              		.loc 1 2528 7 is_stmt 0 view .LVU1281
 4154 00c0 D0E7     		b	.L388
 4155              	.LVL450:
 4156              	.L384:
2528:src/display.c **** 
 4157              		.loc 1 2528 7 view .LVU1282
 4158              	.LBE322:
 4159              	.LBE321:
 4160              	.LBE327:
 4161              	.LBE347:
 4162              	.LBB348:
 332:src/display.c ****   if (on)	set_dot(n);
 4163              		.loc 1 332 6 is_stmt 1 view .LVU1283
 4164              	.LBB312:
 333:src/display.c ****   else	clr_dot(n);
 4165              		.loc 1 333 3 view .LVU1284
 333:src/display.c ****   else	clr_dot(n);
 4166              		.loc 1 333 11 view .LVU1285
 4167 00c2 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccW65oEM.s 			page 147


 4168              	.LVL451:
 4169 00c6 C3E7     		b	.L385
 4170              	.LVL452:
 4171              	.L401:
 333:src/display.c ****   else	clr_dot(n);
 4172              		.loc 1 333 11 is_stmt 0 view .LVU1286
 4173              	.LBE312:
 4174              	.LBE348:
 4175              	.LBB349:
 4176              	.LBI304:
 332:src/display.c ****   if (on)	set_dot(n);
 4177              		.loc 1 332 6 is_stmt 1 view .LVU1287
 4178              	.LBB307:
 333:src/display.c ****   else	clr_dot(n);
 4179              		.loc 1 333 3 view .LVU1288
 334:src/display.c **** }
 4180              		.loc 1 334 8 view .LVU1289
 4181 00c8 FFF7FEFF 		bl	clr_dot
 4182              	.LVL453:
 4183 00cc B5E7     		b	.L382
 4184              	.LVL454:
 4185              	.L400:
 334:src/display.c **** }
 4186              		.loc 1 334 8 is_stmt 0 view .LVU1290
 4187              	.LBE307:
 4188              	.LBE349:
 4189              	.LBB350:
 332:src/display.c ****   if (on)	set_dot(n);
 4190              		.loc 1 332 6 is_stmt 1 view .LVU1291
 4191              	.LBB302:
 333:src/display.c ****   else	clr_dot(n);
 4192              		.loc 1 333 3 view .LVU1292
 333:src/display.c ****   else	clr_dot(n);
 4193              		.loc 1 333 11 view .LVU1293
 4194 00ce FFF7FEFF 		bl	set_dot
 4195              	.LVL455:
 4196 00d2 A7E7     		b	.L380
 4197              	.L405:
 4198              		.align	2
 4199              	.L404:
 4200 00d4 00000000 		.word	main_ram
 4201 00d8 00000000 		.word	Running
 4202 00dc 00000000 		.word	StateWhileOn
 4203 00e0 07000800 		.word	524295
 4204 00e4 00080800 		.word	526336
 4205 00e8 00000000 		.word	IoAnnunciator
 4206              	.LBE302:
 4207              	.LBE350:
 4208              		.cfi_endproc
 4209              	.LFE32:
 4211              		.section	.text.getdig,"ax",%progbits
 4212              		.align	1
 4213              		.p2align 2,,3
 4214              		.global	getdig
 4215              		.syntax unified
 4216              		.thumb
 4217              		.thumb_func
ARM GAS  /tmp/ccW65oEM.s 			page 148


 4218              		.fpu fpv4-sp-d16
 4220              	getdig:
 4221              	.LVL456:
 4222              	.LFB6:
 327:src/display.c ****   // perform index lookup
 4223              		.loc 1 327 1 view -0
 4224              		.cfi_startproc
 4225              		@ args = 0, pretend = 0, frame = 0
 4226              		@ frame_needed = 0, uses_anonymous_args = 0
 4227              		@ link register save eliminated.
 329:src/display.c **** }
 4228              		.loc 1 329 3 view .LVU1295
 329:src/display.c **** }
 4229              		.loc 1 329 16 is_stmt 0 view .LVU1296
 4230 0000 014B     		ldr	r3, .L407
 329:src/display.c **** }
 4231              		.loc 1 329 19 view .LVU1297
 4232 0002 C0B2     		uxtb	r0, r0
 4233              	.LVL457:
 330:src/display.c **** 
 4234              		.loc 1 330 1 view .LVU1298
 4235 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4236 0006 7047     		bx	lr
 4237              	.L408:
 4238              		.align	2
 4239              	.L407:
 4240 0008 00000000 		.word	.LANCHOR2
 4241              		.cfi_endproc
 4242              	.LFE6:
 4244              		.section	.text.dot,"ax",%progbits
 4245              		.align	1
 4246              		.p2align 2,,3
 4247              		.global	dot
 4248              		.syntax unified
 4249              		.thumb
 4250              		.thumb_func
 4251              		.fpu fpv4-sp-d16
 4253              	dot:
 4254              	.LVL458:
 4255              	.LFB7:
 332:src/display.c ****   if (on)	set_dot(n);
 4256              		.loc 1 332 25 is_stmt 1 view -0
 4257              		.cfi_startproc
 4258              		@ args = 0, pretend = 0, frame = 0
 4259              		@ frame_needed = 0, uses_anonymous_args = 0
 4260              		@ link register save eliminated.
 333:src/display.c ****   else	clr_dot(n);
 4261              		.loc 1 333 3 view .LVU1300
 333:src/display.c ****   else	clr_dot(n);
 4262              		.loc 1 333 6 is_stmt 0 view .LVU1301
 4263 0000 09B1     		cbz	r1, .L410
 333:src/display.c ****   else	clr_dot(n);
 4264              		.loc 1 333 11 is_stmt 1 discriminator 1 view .LVU1302
 4265 0002 FFF7FEBF 		b	set_dot
 4266              	.LVL459:
 4267              	.L410:
 334:src/display.c **** }
ARM GAS  /tmp/ccW65oEM.s 			page 149


 4268              		.loc 1 334 8 view .LVU1303
 4269 0006 FFF7FEBF 		b	clr_dot
 4270              	.LVL460:
 334:src/display.c **** }
 4271              		.loc 1 334 8 is_stmt 0 view .LVU1304
 4272              		.cfi_endproc
 4273              	.LFE7:
 4275 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4276              		.align	1
 4277              		.p2align 2,,3
 4278              		.global	std_round_fix
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
 4282              		.fpu fpv4-sp-d16
 4284              	std_round_fix:
 4285              	.LVL461:
 4286              	.LFB24:
1734:src/display.c **** 	decNumber b, c;
 4287              		.loc 1 1734 60 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 80
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
1735:src/display.c **** 
 4291              		.loc 1 1735 2 view .LVU1306
1737:src/display.c **** 	b.exponent -= UState.dispdigs;
 4292              		.loc 1 1737 2 view .LVU1307
1734:src/display.c **** 	decNumber b, c;
 4293              		.loc 1 1734 60 is_stmt 0 view .LVU1308
 4294 0000 00B5     		push	{lr}
 4295              		.cfi_def_cfa_offset 4
 4296              		.cfi_offset 14, -4
 4297 0002 95B0     		sub	sp, sp, #84
 4298              		.cfi_def_cfa_offset 88
1734:src/display.c **** 	decNumber b, c;
 4299              		.loc 1 1734 60 view .LVU1309
 4300 0004 0146     		mov	r1, r0
1737:src/display.c **** 	b.exponent -= UState.dispdigs;
 4301              		.loc 1 1737 2 view .LVU1310
 4302 0006 02A8     		add	r0, sp, #8
 4303              	.LVL462:
1734:src/display.c **** 	decNumber b, c;
 4304              		.loc 1 1734 60 view .LVU1311
 4305 0008 0191     		str	r1, [sp, #4]
1737:src/display.c **** 	b.exponent -= UState.dispdigs;
 4306              		.loc 1 1737 2 view .LVU1312
 4307 000a FFF7FEFF 		bl	dn_1
 4308              	.LVL463:
1738:src/display.c **** 	dn_abs(&c, z);
 4309              		.loc 1 1738 2 is_stmt 1 view .LVU1313
1738:src/display.c **** 	dn_abs(&c, z);
 4310              		.loc 1 1738 22 is_stmt 0 view .LVU1314
 4311 000e 0F4A     		ldr	r2, .L416
1738:src/display.c **** 	dn_abs(&c, z);
 4312              		.loc 1 1738 13 view .LVU1315
 4313 0010 039B     		ldr	r3, [sp, #12]
1738:src/display.c **** 	dn_abs(&c, z);
ARM GAS  /tmp/ccW65oEM.s 			page 150


 4314              		.loc 1 1738 22 view .LVU1316
 4315 0012 1268     		ldr	r2, [r2]
1739:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4316              		.loc 1 1739 2 view .LVU1317
 4317 0014 0199     		ldr	r1, [sp, #4]
1738:src/display.c **** 	dn_abs(&c, z);
 4318              		.loc 1 1738 22 view .LVU1318
 4319 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4320 001a 02F00F02 		and	r2, r2, #15
1738:src/display.c **** 	dn_abs(&c, z);
 4321              		.loc 1 1738 13 view .LVU1319
 4322 001e 9B1A     		subs	r3, r3, r2
1739:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4323              		.loc 1 1739 2 view .LVU1320
 4324 0020 0BA8     		add	r0, sp, #44
1738:src/display.c **** 	dn_abs(&c, z);
 4325              		.loc 1 1738 13 view .LVU1321
 4326 0022 0393     		str	r3, [sp, #12]
1739:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4327              		.loc 1 1739 2 is_stmt 1 view .LVU1322
 4328 0024 FFF7FEFF 		bl	dn_abs
 4329              	.LVL464:
1740:src/display.c **** 	  return MODE_FIX;
 4330              		.loc 1 1740 2 view .LVU1323
1740:src/display.c **** 	  return MODE_FIX;
 4331              		.loc 1 1740 6 is_stmt 0 view .LVU1324
 4332 0028 0BA9     		add	r1, sp, #44
 4333 002a 02A8     		add	r0, sp, #8
 4334 002c FFF7FEFF 		bl	dn_lt
 4335              	.LVL465:
1740:src/display.c **** 	  return MODE_FIX;
 4336              		.loc 1 1740 5 view .LVU1325
 4337 0030 10B9     		cbnz	r0, .L415
1743:src/display.c **** #endif
 4338              		.loc 1 1743 7 view .LVU1326
 4339 0032 15B0     		add	sp, sp, #84
 4340              		.cfi_remember_state
 4341              		.cfi_def_cfa_offset 4
 4342              		@ sp needed
 4343 0034 5DF804FB 		ldr	pc, [sp], #4
 4344              	.LVL466:
 4345              	.L415:
 4346              		.cfi_restore_state
1740:src/display.c **** 	  return MODE_FIX;
 4347              		.loc 1 1740 23 discriminator 1 view .LVU1327
 4348 0038 0549     		ldr	r1, .L416+4
 4349 003a 0BA8     		add	r0, sp, #44
 4350 003c FFF7FEFF 		bl	dn_lt
 4351              	.LVL467:
1741:src/display.c **** 	return MODE_STD;
 4352              		.loc 1 1741 11 discriminator 1 view .LVU1328
 4353 0040 0038     		subs	r0, r0, #0
 4354 0042 18BF     		it	ne
 4355 0044 0120     		movne	r0, #1
1743:src/display.c **** #endif
 4356              		.loc 1 1743 7 discriminator 1 view .LVU1329
 4357 0046 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccW65oEM.s 			page 151


 4358              		.cfi_def_cfa_offset 4
 4359              		@ sp needed
 4360 0048 5DF804FB 		ldr	pc, [sp], #4
 4361              	.LVL468:
 4362              	.L417:
1743:src/display.c **** #endif
 4363              		.loc 1 1743 7 discriminator 1 view .LVU1330
 4364              		.align	2
 4365              	.L416:
 4366 004c 00000000 		.word	main_ram
 4367 0050 00000000 		.word	const_1
 4368              		.cfi_endproc
 4369              	.LFE24:
 4371              		.section	.text.set_IO_annunciator,"ax",%progbits
 4372              		.align	1
 4373              		.p2align 2,,3
 4374              		.global	set_IO_annunciator
 4375              		.syntax unified
 4376              		.thumb
 4377              		.thumb_func
 4378              		.fpu fpv4-sp-d16
 4380              	set_IO_annunciator:
 4381              	.LFB33:
2508:src/display.c **** #ifndef DM42
 4382              		.loc 1 2508 37 is_stmt 1 view -0
 4383              		.cfi_startproc
 4384              		@ args = 0, pretend = 0, frame = 0
 4385              		@ frame_needed = 0, uses_anonymous_args = 0
2513:src/display.c **** #endif
 4386              		.loc 1 2513 4 view .LVU1332
 4387              	.LVL469:
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4388              		.loc 1 2523 2 view .LVU1333
2508:src/display.c **** #ifndef DM42
 4389              		.loc 1 2508 37 is_stmt 0 view .LVU1334
 4390 0000 10B5     		push	{r4, lr}
 4391              		.cfi_def_cfa_offset 8
 4392              		.cfi_offset 4, -8
 4393              		.cfi_offset 14, -4
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4394              		.loc 1 2523 9 view .LVU1335
 4395 0002 064C     		ldr	r4, .L422
2523:src/display.c **** 	  dot(LIT_EQ, on);
 4396              		.loc 1 2523 5 view .LVU1336
 4397 0004 2368     		ldr	r3, [r4]
 4398 0006 03B9     		cbnz	r3, .L421
2528:src/display.c **** 
 4399              		.loc 1 2528 7 view .LVU1337
 4400 0008 10BD     		pop	{r4, pc}
 4401              	.L421:
 4402              	.LBB355:
 4403              	.LBI355:
2508:src/display.c **** #ifndef DM42
 4404              		.loc 1 2508 12 is_stmt 1 view .LVU1338
 4405              	.LBB356:
2524:src/display.c **** 	  IoAnnunciator = on;
 4406              		.loc 1 2524 4 view .LVU1339
ARM GAS  /tmp/ccW65oEM.s 			page 152


 4407              	.LVL470:
 4408              	.LBB357:
 4409              	.LBI357:
 332:src/display.c ****   if (on)	set_dot(n);
 4410              		.loc 1 332 6 view .LVU1340
 4411              	.LBB358:
 333:src/display.c ****   else	clr_dot(n);
 4412              		.loc 1 333 3 view .LVU1341
 334:src/display.c **** }
 4413              		.loc 1 334 8 view .LVU1342
 4414 000a 8420     		movs	r0, #132
 4415 000c FFF7FEFF 		bl	clr_dot
 4416              	.LVL471:
 334:src/display.c **** }
 4417              		.loc 1 334 8 is_stmt 0 view .LVU1343
 4418              	.LBE358:
 4419              	.LBE357:
2525:src/display.c **** 	  finish_display(); //LIT_EQ
 4420              		.loc 1 2525 4 is_stmt 1 view .LVU1344
2525:src/display.c **** 	  finish_display(); //LIT_EQ
 4421              		.loc 1 2525 18 is_stmt 0 view .LVU1345
 4422 0010 0023     		movs	r3, #0
 4423 0012 2360     		str	r3, [r4]
2526:src/display.c **** 	}
 4424              		.loc 1 2526 4 is_stmt 1 view .LVU1346
 4425              	.LBE356:
 4426              	.LBE355:
2528:src/display.c **** 
 4427              		.loc 1 2528 7 is_stmt 0 view .LVU1347
 4428 0014 BDE81040 		pop	{r4, lr}
 4429              		.cfi_restore 14
 4430              		.cfi_restore 4
 4431              		.cfi_def_cfa_offset 0
 4432              	.LBB360:
 4433              	.LBB359:
2526:src/display.c **** 	}
 4434              		.loc 1 2526 4 view .LVU1348
 4435 0018 FFF7FEBF 		b	finish_display
 4436              	.LVL472:
 4437              	.L423:
 4438              		.align	2
 4439              	.L422:
 4440 001c 00000000 		.word	IoAnnunciator
 4441              	.LBE359:
 4442              	.LBE360:
 4443              		.cfi_endproc
 4444              	.LFE33:
 4446              		.section	.text.pixel_length,"ax",%progbits
 4447              		.align	1
 4448              		.p2align 2,,3
 4449              		.global	pixel_length
 4450              		.syntax unified
 4451              		.thumb
 4452              		.thumb_func
 4453              		.fpu fpv4-sp-d16
 4455              	pixel_length:
 4456              	.LVL473:
ARM GAS  /tmp/ccW65oEM.s 			page 153


 4457              	.LFB40:
3031:src/display.c **** 
3032:src/display.c **** 
3033:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3034:src/display.c ****        */
3035:src/display.c ****       int pixel_length(const char *s, int smallp)
3036:src/display.c ****       {
 4458              		.loc 1 3036 7 is_stmt 1 view -0
 4459              		.cfi_startproc
 4460              		@ args = 0, pretend = 0, frame = 0
 4461              		@ frame_needed = 0, uses_anonymous_args = 0
3037:src/display.c **** 	int len = 0;
 4462              		.loc 1 3037 2 view .LVU1350
3038:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4463              		.loc 1 3038 2 view .LVU1351
3036:src/display.c **** 	int len = 0;
 4464              		.loc 1 3036 7 is_stmt 0 view .LVU1352
 4465 0000 70B5     		push	{r4, r5, r6, lr}
 4466              		.cfi_def_cfa_offset 16
 4467              		.cfi_offset 4, -16
 4468              		.cfi_offset 5, -12
 4469              		.cfi_offset 6, -8
 4470              		.cfi_offset 14, -4
3036:src/display.c **** 	int len = 0;
 4471              		.loc 1 3036 7 view .LVU1353
 4472 0002 0446     		mov	r4, r0
3039:src/display.c **** 	while (*s != '\0') {
 4473              		.loc 1 3039 9 view .LVU1354
 4474 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4475              	.LVL474:
3038:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4476              		.loc 1 3038 34 view .LVU1355
 4477 0006 0E1E     		subs	r6, r1, #0
 4478 0008 18BF     		it	ne
 4479 000a 4FF48076 		movne	r6, #256
 4480              	.LVL475:
 4481              		.loc 1 3039 2 is_stmt 1 view .LVU1356
 4482              		.loc 1 3039 8 view .LVU1357
 4483 000e A0B1     		cbz	r0, .L431
3037:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4484              		.loc 1 3037 6 is_stmt 0 view .LVU1358
 4485 0010 0025     		movs	r5, #0
 4486 0012 06E0     		b	.L429
 4487              	.LVL476:
 4488              	.L427:
3040:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3041:src/display.c **** 	  if (s[0] == '\007') {
3042:src/display.c **** 	    len += s[1] & 0x1F;
3043:src/display.c **** 	    s += 3;
3044:src/display.c **** 	    continue;
3045:src/display.c **** 	  }
3046:src/display.c **** #endif
3047:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4489              		.loc 1 3047 11 view .LVU1359
 4490 0014 3044     		add	r0, r0, r6
 4491 0016 FFF7FEFF 		bl	charlengths
 4492              	.LVL477:
ARM GAS  /tmp/ccW65oEM.s 			page 154


 4493              		.loc 1 3047 42 view .LVU1360
 4494 001a 0134     		adds	r4, r4, #1
 4495              	.LVL478:
 4496              		.loc 1 3047 8 view .LVU1361
 4497 001c 0544     		add	r5, r5, r0
 4498              	.LVL479:
3039:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4499              		.loc 1 3039 8 is_stmt 1 view .LVU1362
3039:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4500              		.loc 1 3039 9 is_stmt 0 view .LVU1363
 4501 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3039:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4502              		.loc 1 3039 8 view .LVU1364
 4503 0020 48B1     		cbz	r0, .L424
 4504              	.LVL480:
 4505              	.L429:
3041:src/display.c **** 	    len += s[1] & 0x1F;
 4506              		.loc 1 3041 4 is_stmt 1 view .LVU1365
 4507              		.loc 1 3047 4 view .LVU1366
3041:src/display.c **** 	    len += s[1] & 0x1F;
 4508              		.loc 1 3041 7 is_stmt 0 view .LVU1367
 4509 0022 0728     		cmp	r0, #7
 4510 0024 F6D1     		bne	.L427
3042:src/display.c **** 	    s += 3;
 4511              		.loc 1 3042 6 is_stmt 1 view .LVU1368
3042:src/display.c **** 	    s += 3;
 4512              		.loc 1 3042 18 is_stmt 0 view .LVU1369
 4513 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3039:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4514              		.loc 1 3039 9 view .LVU1370
 4515 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3042:src/display.c **** 	    s += 3;
 4516              		.loc 1 3042 18 view .LVU1371
 4517 002a 03F01F03 		and	r3, r3, #31
3043:src/display.c **** 	    continue;
 4518              		.loc 1 3043 8 view .LVU1372
 4519 002e 0334     		adds	r4, r4, #3
 4520              	.LVL481:
3042:src/display.c **** 	    s += 3;
 4521              		.loc 1 3042 10 view .LVU1373
 4522 0030 1D44     		add	r5, r5, r3
 4523              	.LVL482:
3043:src/display.c **** 	    continue;
 4524              		.loc 1 3043 6 is_stmt 1 view .LVU1374
3044:src/display.c **** 	  }
 4525              		.loc 1 3044 6 view .LVU1375
3039:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4526              		.loc 1 3039 8 view .LVU1376
 4527 0032 0028     		cmp	r0, #0
 4528 0034 F5D1     		bne	.L429
 4529              	.L424:
3048:src/display.c **** 	}
3049:src/display.c **** 	return len;
3050:src/display.c ****       }
 4530              		.loc 1 3050 7 is_stmt 0 view .LVU1377
 4531 0036 2846     		mov	r0, r5
 4532 0038 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccW65oEM.s 			page 155


 4533              	.LVL483:
 4534              	.L431:
3037:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4535              		.loc 1 3037 6 view .LVU1378
 4536 003a 0546     		mov	r5, r0
3049:src/display.c ****       }
 4537              		.loc 1 3049 2 is_stmt 1 view .LVU1379
 4538              		.loc 1 3050 7 is_stmt 0 view .LVU1380
 4539 003c 2846     		mov	r0, r5
 4540 003e 70BD     		pop	{r4, r5, r6, pc}
 4541              		.loc 1 3050 7 view .LVU1381
 4542              		.cfi_endproc
 4543              	.LFE40:
 4545              		.section	.text.set_status,"ax",%progbits
 4546              		.align	1
 4547              		.p2align 2,,3
 4548              		.syntax unified
 4549              		.thumb
 4550              		.thumb_func
 4551              		.fpu fpv4-sp-d16
 4553              	set_status:
 4554              	.LVL484:
 4555              	.LFB43:
3051:src/display.c **** 
3052:src/display.c **** 
3053:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3054:src/display.c ****        * If this is larger than the display, return true.
3055:src/display.c ****        */
3056:src/display.c ****       static int string_too_large(const char *s) {
3057:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3058:src/display.c ****       }
3059:src/display.c ****       static int string_too_large_top(const char *s) {
3060:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3061:src/display.c ****       }
3062:src/display.c **** 
3063:src/display.c **** 
3064:src/display.c ****       /* Display the given string on the screen.
3065:src/display.c ****        */
3066:src/display.c ****       static void set_status(const char *str) {
 4556              		.loc 1 3066 47 is_stmt 1 view -0
 4557              		.cfi_startproc
 4558              		@ args = 0, pretend = 0, frame = 0
 4559              		@ frame_needed = 0, uses_anonymous_args = 0
3067:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4560              		.loc 1 3067 2 view .LVU1383
3066:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4561              		.loc 1 3066 47 is_stmt 0 view .LVU1384
 4562 0000 10B5     		push	{r4, lr}
 4563              		.cfi_def_cfa_offset 8
 4564              		.cfi_offset 4, -8
 4565              		.cfi_offset 14, -4
 4566              		.loc 1 3067 24 view .LVU1385
 4567 0002 0D4B     		ldr	r3, .L439
 4568              		.loc 1 3067 2 view .LVU1386
 4569 0004 93F91630 		ldrsb	r3, [r3, #22]
 4570 0008 002B     		cmp	r3, #0
3066:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
ARM GAS  /tmp/ccW65oEM.s 			page 156


 4571              		.loc 1 3066 47 view .LVU1387
 4572 000a 82B0     		sub	sp, sp, #8
 4573              		.cfi_def_cfa_offset 16
3066:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4574              		.loc 1 3066 47 view .LVU1388
 4575 000c 0446     		mov	r4, r0
 4576              		.loc 1 3067 2 view .LVU1389
 4577 000e 0ADA     		bge	.L438
 4578 0010 0121     		movs	r1, #1
 4579              	.LVL485:
 4580              	.L435:
 4581              	.LBB361:
 4582              	.LBI361:
2908:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4583              		.loc 1 2908 19 is_stmt 1 discriminator 6 view .LVU1390
 4584              	.LBB362:
2909:src/display.c ****       }
 4585              		.loc 1 2909 2 discriminator 6 view .LVU1391
 4586 0012 40F24A23 		movw	r3, #586
 4587 0016 0093     		str	r3, [sp]
 4588 0018 2046     		mov	r0, r4
 4589 001a 8E23     		movs	r3, #142
 4590 001c 4A22     		movs	r2, #74
 4591 001e FFF7FEFF 		bl	s_s_sized
 4592              	.LVL486:
2909:src/display.c ****       }
 4593              		.loc 1 2909 2 is_stmt 0 discriminator 6 view .LVU1392
 4594              	.LBE362:
 4595              	.LBE361:
3068:src/display.c ****       }
 4596              		.loc 1 3068 7 discriminator 6 view .LVU1393
 4597 0022 02B0     		add	sp, sp, #8
 4598              		.cfi_remember_state
 4599              		.cfi_def_cfa_offset 8
 4600              		@ sp needed
 4601 0024 10BD     		pop	{r4, pc}
 4602              	.LVL487:
 4603              	.L438:
 4604              		.cfi_restore_state
 4605              	.LBB363:
 4606              	.LBI363:
3056:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4607              		.loc 1 3056 18 is_stmt 1 view .LVU1394
 4608              	.LBB364:
3057:src/display.c ****       }
 4609              		.loc 1 3057 2 view .LVU1395
3057:src/display.c ****       }
 4610              		.loc 1 3057 9 is_stmt 0 view .LVU1396
 4611 0026 0021     		movs	r1, #0
 4612 0028 FFF7FEFF 		bl	pixel_length
 4613              	.LVL488:
3057:src/display.c ****       }
 4614              		.loc 1 3057 9 view .LVU1397
 4615              	.LBE364:
 4616              	.LBE363:
3067:src/display.c ****       }
 4617              		.loc 1 3067 2 view .LVU1398
ARM GAS  /tmp/ccW65oEM.s 			page 157


 4618 002c 4B28     		cmp	r0, #75
 4619 002e D4BF     		ite	le
 4620 0030 0021     		movle	r1, #0
 4621 0032 0121     		movgt	r1, #1
 4622 0034 EDE7     		b	.L435
 4623              	.L440:
 4624 0036 00BF     		.align	2
 4625              	.L439:
 4626 0038 00000000 		.word	StateWhileOn
 4627              		.cfi_endproc
 4628              	.LFE43:
 4630              		.section	.text.set_x_dn,"ax",%progbits
 4631              		.align	1
 4632              		.p2align 2,,3
 4633              		.global	set_x_dn
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu fpv4-sp-d16
 4639              	set_x_dn:
 4640              	.LVL489:
 4641              	.LFB27:
1881:src/display.c **** 	char x[50], *obp = x;
 4642              		.loc 1 1881 67 is_stmt 1 view -0
 4643              		.cfi_startproc
 4644              		@ args = 0, pretend = 0, frame = 136
 4645              		@ frame_needed = 0, uses_anonymous_args = 0
1882:src/display.c **** 	int odig = 0;
 4646              		.loc 1 1882 2 view .LVU1400
1881:src/display.c **** 	char x[50], *obp = x;
 4647              		.loc 1 1881 67 is_stmt 0 view .LVU1401
 4648 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4649              		.cfi_def_cfa_offset 36
 4650              		.cfi_offset 4, -36
 4651              		.cfi_offset 5, -32
 4652              		.cfi_offset 6, -28
 4653              		.cfi_offset 7, -24
 4654              		.cfi_offset 8, -20
 4655              		.cfi_offset 9, -16
 4656              		.cfi_offset 10, -12
 4657              		.cfi_offset 11, -8
 4658              		.cfi_offset 14, -4
1898:src/display.c **** 	int mode = UState.dispmode;
 4659              		.loc 1 1898 11 view .LVU1402
 4660 0004 C84B     		ldr	r3, .L676
 4661 0006 1B68     		ldr	r3, [r3]
1881:src/display.c **** 	char x[50], *obp = x;
 4662              		.loc 1 1881 67 view .LVU1403
 4663 0008 A3B0     		sub	sp, sp, #140
 4664              		.cfi_def_cfa_offset 176
 4665              	.LVL490:
1883:src/display.c **** 	int show_exp = 0;
 4666              		.loc 1 1883 2 is_stmt 1 view .LVU1404
1884:src/display.c **** 	int j;
 4667              		.loc 1 1884 2 view .LVU1405
1885:src/display.c **** 	char mantissa[64];
 4668              		.loc 1 1885 2 view .LVU1406
ARM GAS  /tmp/ccW65oEM.s 			page 158


1886:src/display.c **** 	int exp = 0;
 4669              		.loc 1 1886 2 view .LVU1407
1887:src/display.c **** 	char *p = mantissa;
 4670              		.loc 1 1887 2 view .LVU1408
1888:src/display.c **** 	char *r;
 4671              		.loc 1 1888 2 view .LVU1409
1889:src/display.c **** 	const char *q;
 4672              		.loc 1 1889 2 view .LVU1410
1890:src/display.c **** 	int count, i;
 4673              		.loc 1 1890 2 view .LVU1411
1891:src/display.c **** 	int extra_digits = 0;
 4674              		.loc 1 1891 2 view .LVU1412
1892:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4675              		.loc 1 1892 2 view .LVU1413
1898:src/display.c **** 	int mode = UState.dispmode;
 4676              		.loc 1 1898 2 view .LVU1414
1898:src/display.c **** 	int mode = UState.dispmode;
 4677              		.loc 1 1898 17 is_stmt 0 view .LVU1415
 4678 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1899:src/display.c **** #endif
 4679              		.loc 1 1899 19 view .LVU1416
 4680 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1881:src/display.c **** 	char x[50], *obp = x;
 4681              		.loc 1 1881 67 view .LVU1417
 4682 0012 0092     		str	r2, [sp]
 4683 0014 0C46     		mov	r4, r1
 4684 0016 0646     		mov	r6, r0
1898:src/display.c **** 	int mode = UState.dispmode;
 4685              		.loc 1 1898 17 view .LVU1418
 4686 0018 05F00F05 		and	r5, r5, #15
 4687              	.LVL491:
1899:src/display.c **** #endif
 4688              		.loc 1 1899 2 is_stmt 1 view .LVU1419
1899:src/display.c **** #endif
 4689              		.loc 1 1899 19 is_stmt 0 view .LVU1420
 4690 001c BF09     		lsrs	r7, r7, #6
 4691              	.LVL492:
1901:src/display.c **** 	int negative = 0;
 4692              		.loc 1 1901 2 is_stmt 1 view .LVU1421
1902:src/display.c **** 	int trimzeros = 0;
 4693              		.loc 1 1902 2 view .LVU1422
1903:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4694              		.loc 1 1903 2 view .LVU1423
1905:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4695              		.loc 1 1905 2 view .LVU1424
1914:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4696              		.loc 1 1914 2 view .LVU1425
 4697 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4698              	.LVL493:
1916:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4699              		.loc 1 1916 2 view .LVU1426
1916:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4700              		.loc 1 1916 5 is_stmt 0 view .LVU1427
 4701 0022 002C     		cmp	r4, #0
 4702 0024 00F08A81 		beq	.L442
 4703              	.L445:
1941:src/display.c **** 	  return;
ARM GAS  /tmp/ccW65oEM.s 			page 159


 4704              		.loc 1 1941 2 is_stmt 1 view .LVU1428
1941:src/display.c **** 	  return;
 4705              		.loc 1 1941 6 is_stmt 0 view .LVU1429
 4706 0028 2146     		mov	r1, r4
 4707 002a 06F10800 		add	r0, r6, #8
 4708 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4709              	.LVL494:
1941:src/display.c **** 	  return;
 4710              		.loc 1 1941 5 view .LVU1430
 4711 0032 8346     		mov	fp, r0
 4712 0034 0028     		cmp	r0, #0
 4713 0036 40F06F81 		bne	.L441
1944:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4714              		.loc 1 1944 2 is_stmt 1 view .LVU1431
1944:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4715              		.loc 1 1944 12 is_stmt 0 view .LVU1432
 4716 003a DFF8F092 		ldr	r9, .L676+4
1944:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4717              		.loc 1 1944 5 view .LVU1433
 4718 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4719 0042 012B     		cmp	r3, #1
 4720 0044 00F0AF82 		beq	.L657
1887:src/display.c **** 	char *p = mantissa;
 4721              		.loc 1 1887 6 view .LVU1434
 4722 0048 0190     		str	r0, [sp, #4]
 4723              	.LVL495:
 4724              	.L448:
1950:src/display.c **** 
 4725              		.loc 1 1950 2 is_stmt 1 view .LVU1435
 4726 004a 0DF11408 		add	r8, sp, #20
 4727              	.LVL496:
1950:src/display.c **** 
 4728              		.loc 1 1950 2 is_stmt 0 view .LVU1436
 4729 004e 4046     		mov	r0, r8
 4730 0050 3222     		movs	r2, #50
 4731 0052 0021     		movs	r1, #0
 4732 0054 FFF7FEFF 		bl	xset
 4733              	.LVL497:
1952:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4734              		.loc 1 1952 2 is_stmt 1 view .LVU1437
1952:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4735              		.loc 1 1952 6 is_stmt 0 view .LVU1438
 4736 0058 3046     		mov	r0, r6
 4737 005a FFF7FEFF 		bl	dn_eq0
 4738              	.LVL498:
1952:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4739              		.loc 1 1952 5 view .LVU1439
 4740 005e 0028     		cmp	r0, #0
 4741 0060 00F05D81 		beq	.L449
1953:src/display.c **** 	    x[0] = '-';
 4742              		.loc 1 1953 4 is_stmt 1 view .LVU1440
1953:src/display.c **** 	    x[0] = '-';
 4743              		.loc 1 1953 7 is_stmt 0 view .LVU1441
 4744 0064 96F90830 		ldrsb	r3, [r6, #8]
 4745 0068 002B     		cmp	r3, #0
 4746 006a C0F2C182 		blt	.L658
 4747              	.L450:
ARM GAS  /tmp/ccW65oEM.s 			page 160


1957:src/display.c **** 	} else
 4748              		.loc 1 1957 6 is_stmt 1 view .LVU1442
1957:src/display.c **** 	} else
 4749              		.loc 1 1957 11 is_stmt 0 view .LVU1443
 4750 006e 3023     		movs	r3, #48
 4751 0070 8DF81430 		strb	r3, [sp, #20]
 4752              	.L451:
1961:src/display.c **** 	  show_x(x, exp);
 4753              		.loc 1 1961 2 is_stmt 1 view .LVU1444
1961:src/display.c **** 	  show_x(x, exp);
 4754              		.loc 1 1961 12 is_stmt 0 view .LVU1445
 4755 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1961:src/display.c **** 	  show_x(x, exp);
 4756              		.loc 1 1961 5 view .LVU1446
 4757 0078 BAF1010F 		cmp	r10, #1
 4758 007c 00F0F082 		beq	.L659
1984:src/display.c **** 	  mode = std_round_fix(z);
 4759              		.loc 1 1984 2 is_stmt 1 view .LVU1447
1984:src/display.c **** 	  mode = std_round_fix(z);
 4760              		.loc 1 1984 5 is_stmt 0 view .LVU1448
 4761 0080 002F     		cmp	r7, #0
 4762 0082 00F0FD81 		beq	.L660
1988:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4763              		.loc 1 1988 19 view .LVU1449
 4764 0086 009B     		ldr	r3, [sp]
 4765 0088 1B68     		ldr	r3, [r3]
1988:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4766              		.loc 1 1988 12 view .LVU1450
 4767 008a AB42     		cmp	r3, r5
1898:src/display.c **** 	int mode = UState.dispmode;
 4768              		.loc 1 1898 6 view .LVU1451
 4769 008c AA46     		mov	r10, r5
1988:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4770              		.loc 1 1988 9 is_stmt 1 view .LVU1452
1990:src/display.c **** #endif
 4771              		.loc 1 1990 4 view .LVU1453
1990:src/display.c **** #endif
 4772              		.loc 1 1990 7 is_stmt 0 view .LVU1454
 4773 008e D8BF     		it	le
 4774 0090 03F1FF3A 		addle	r10, r3, #-1
1903:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4775              		.loc 1 1903 6 view .LVU1455
 4776 0094 0023     		movs	r3, #0
 4777 0096 0193     		str	r3, [sp, #4]
 4778              	.LVL499:
 4779              	.L464:
1993:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4780              		.loc 1 1993 2 is_stmt 1 view .LVU1456
 4781 0098 0DF14809 		add	r9, sp, #72
 4782              	.LVL500:
1993:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4783              		.loc 1 1993 2 is_stmt 0 view .LVU1457
 4784 009c 3021     		movs	r1, #48
 4785 009e 4846     		mov	r0, r9
 4786 00a0 3F22     		movs	r2, #63
 4787 00a2 FFF7FEFF 		bl	xset
 4788              	.LVL501:
ARM GAS  /tmp/ccW65oEM.s 			page 161


1994:src/display.c **** 
 4789              		.loc 1 1994 2 is_stmt 1 view .LVU1458
1994:src/display.c **** 
 4790              		.loc 1 1994 31 is_stmt 0 view .LVU1459
 4791 00a6 0023     		movs	r3, #0
1996:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4792              		.loc 1 1996 6 view .LVU1460
 4793 00a8 4521     		movs	r1, #69
 4794 00aa 4046     		mov	r0, r8
1994:src/display.c **** 
 4795              		.loc 1 1994 31 view .LVU1461
 4796 00ac 8DF88730 		strb	r3, [sp, #135]
1996:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4797              		.loc 1 1996 2 is_stmt 1 view .LVU1462
1996:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4798              		.loc 1 1996 6 is_stmt 0 view .LVU1463
 4799 00b0 FFF7FEFF 		bl	find_char
 4800              	.LVL502:
2005:src/display.c **** 	else exp = s_to_i(q+1);
 4801              		.loc 1 2005 2 is_stmt 1 view .LVU1464
2005:src/display.c **** 	else exp = s_to_i(q+1);
 4802              		.loc 1 2005 5 is_stmt 0 view .LVU1465
 4803 00b4 0028     		cmp	r0, #0
 4804 00b6 00F05C81 		beq	.L565
2006:src/display.c **** #endif
 4805              		.loc 1 2006 7 is_stmt 1 view .LVU1466
2006:src/display.c **** #endif
 4806              		.loc 1 2006 13 is_stmt 0 view .LVU1467
 4807 00ba 0130     		adds	r0, r0, #1
 4808              	.LVL503:
2006:src/display.c **** #endif
 4809              		.loc 1 2006 13 view .LVU1468
 4810 00bc FFF7FEFF 		bl	s_to_i
 4811              	.LVL504:
2006:src/display.c **** #endif
 4812              		.loc 1 2006 13 view .LVU1469
 4813 00c0 0546     		mov	r5, r0
 4814              	.LVL505:
 4815              	.L465:
2010:src/display.c **** 	if (!res) {
 4816              		.loc 1 2010 2 is_stmt 1 view .LVU1470
2010:src/display.c **** 	if (!res) {
 4817              		.loc 1 2010 12 view .LVU1471
2010:src/display.c **** 	if (!res) {
 4818              		.loc 1 2010 2 is_stmt 0 view .LVU1472
 4819 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4820 00c6 202B     		cmp	r3, #32
2010:src/display.c **** 	if (!res) {
 4821              		.loc 1 2010 8 view .LVU1473
 4822 00c8 4646     		mov	r6, r8
 4823              	.LVL506:
2010:src/display.c **** 	if (!res) {
 4824              		.loc 1 2010 2 view .LVU1474
 4825 00ca 03D1     		bne	.L466
 4826              	.LVL507:
 4827              	.L467:
2010:src/display.c **** 	if (!res) {
ARM GAS  /tmp/ccW65oEM.s 			page 162


 4828              		.loc 1 2010 27 is_stmt 1 discriminator 3 view .LVU1475
2010:src/display.c **** 	if (!res) {
 4829              		.loc 1 2010 23 discriminator 3 view .LVU1476
2010:src/display.c **** 	if (!res) {
 4830              		.loc 1 2010 12 discriminator 3 view .LVU1477
2010:src/display.c **** 	if (!res) {
 4831              		.loc 1 2010 2 is_stmt 0 discriminator 3 view .LVU1478
 4832 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4833              	.LVL508:
2010:src/display.c **** 	if (!res) {
 4834              		.loc 1 2010 2 discriminator 3 view .LVU1479
 4835 00d0 202B     		cmp	r3, #32
 4836 00d2 FBD0     		beq	.L467
 4837              	.LVL509:
 4838              	.L466:
2011:src/display.c **** 	  CLR_EXP_SIGN;
 4839              		.loc 1 2011 2 is_stmt 1 view .LVU1480
2011:src/display.c **** 	  CLR_EXP_SIGN;
 4840              		.loc 1 2011 5 is_stmt 0 view .LVU1481
 4841 00d4 002C     		cmp	r4, #0
 4842 00d6 00F09682 		beq	.L661
 4843              	.L468:
2015:src/display.c **** 	  negative = 1;
 4844              		.loc 1 2015 2 is_stmt 1 view .LVU1482
2015:src/display.c **** 	  negative = 1;
 4845              		.loc 1 2015 6 is_stmt 0 view .LVU1483
 4846 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2015:src/display.c **** 	  negative = 1;
 4847              		.loc 1 2015 5 view .LVU1484
 4848 00dc 2D2B     		cmp	r3, #45
 4849 00de 00F0CA81 		beq	.L662
2018:src/display.c **** 	  q++;
 4850              		.loc 1 2018 9 is_stmt 1 view .LVU1485
2018:src/display.c **** 	  q++;
 4851              		.loc 1 2018 12 is_stmt 0 view .LVU1486
 4852 00e2 2B2B     		cmp	r3, #43
 4853 00e4 00F06E82 		beq	.L663
1902:src/display.c **** 	int trimzeros = 0;
 4854              		.loc 1 1902 6 view .LVU1487
 4855 00e8 4FF0000E 		mov	lr, #0
 4856              	.LVL510:
 4857              	.L470:
2020:src/display.c **** 	if (*q == '.') {
 4858              		.loc 1 2020 9 is_stmt 1 discriminator 1 view .LVU1488
2020:src/display.c **** 	if (*q == '.') {
 4859              		.loc 1 2020 2 is_stmt 0 discriminator 1 view .LVU1489
 4860 00ec 302B     		cmp	r3, #48
 4861 00ee 03D1     		bne	.L472
 4862              	.LVL511:
 4863              	.L471:
2020:src/display.c **** 	if (*q == '.') {
 4864              		.loc 1 2020 24 is_stmt 1 discriminator 2 view .LVU1490
2020:src/display.c **** 	if (*q == '.') {
 4865              		.loc 1 2020 20 discriminator 2 view .LVU1491
2020:src/display.c **** 	if (*q == '.') {
 4866              		.loc 1 2020 9 discriminator 2 view .LVU1492
 4867 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccW65oEM.s 			page 163


 4868              	.LVL512:
2020:src/display.c **** 	if (*q == '.') {
 4869              		.loc 1 2020 2 is_stmt 0 discriminator 2 view .LVU1493
 4870 00f4 302B     		cmp	r3, #48
 4871 00f6 FBD0     		beq	.L471
 4872              	.LVL513:
 4873              	.L472:
2021:src/display.c **** 	  do
 4874              		.loc 1 2021 2 is_stmt 1 view .LVU1494
2021:src/display.c **** 	  do
 4875              		.loc 1 2021 5 is_stmt 0 view .LVU1495
 4876 00f8 2E2B     		cmp	r3, #46
 4877 00fa 00F0A681 		beq	.L664
2028:src/display.c **** 	    *p++ = *q++;
 4878              		.loc 1 2028 4 is_stmt 1 view .LVU1496
2028:src/display.c **** 	    *p++ = *q++;
 4879              		.loc 1 2028 7 is_stmt 0 view .LVU1497
 4880 00fe A3F13002 		sub	r2, r3, #48
 4881 0102 092A     		cmp	r2, #9
2029:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4882              		.loc 1 2029 6 is_stmt 1 view .LVU1498
 4883              	.LVL514:
2029:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4884              		.loc 1 2029 15 is_stmt 0 view .LVU1499
 4885 0104 9CBF     		itt	ls
 4886 0106 0136     		addls	r6, r6, #1
 4887              	.LVL515:
2029:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4888              		.loc 1 2029 11 view .LVU1500
 4889 0108 8DF84830 		strbls	r3, [sp, #72]
2030:src/display.c **** 	    *p++ = *q++;
 4890              		.loc 1 2030 11 view .LVU1501
 4891 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2030:src/display.c **** 	    *p++ = *q++;
 4892              		.loc 1 2030 10 view .LVU1502
 4893 010e A2F13003 		sub	r3, r2, #48
2029:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4894              		.loc 1 2029 8 view .LVU1503
 4895 0112 94BF     		ite	ls
 4896 0114 0DF14901 		addls	r1, sp, #73
1888:src/display.c **** 	char *r;
 4897              		.loc 1 1888 8 view .LVU1504
 4898 0118 4946     		movhi	r1, r9
 4899              	.LVL516:
2030:src/display.c **** 	    *p++ = *q++;
 4900              		.loc 1 2030 10 is_stmt 1 view .LVU1505
 4901 011a 092B     		cmp	r3, #9
 4902 011c 0CD8     		bhi	.L478
 4903 011e A81B     		subs	r0, r5, r6
 4904 0120 731C     		adds	r3, r6, #1
 4905              	.L479:
 4906              	.LVL517:
2031:src/display.c **** 	    exp++;
 4907              		.loc 1 2031 6 view .LVU1506
2031:src/display.c **** 	    exp++;
 4908              		.loc 1 2031 11 is_stmt 0 view .LVU1507
 4909 0122 01F8012B 		strb	r2, [r1], #1
ARM GAS  /tmp/ccW65oEM.s 			page 164


 4910              	.LVL518:
2031:src/display.c **** 	    exp++;
 4911              		.loc 1 2031 15 view .LVU1508
 4912 0126 1E46     		mov	r6, r3
 4913              	.LVL519:
2032:src/display.c **** 	  }
 4914              		.loc 1 2032 6 is_stmt 1 view .LVU1509
 4915 0128 C518     		adds	r5, r0, r3
 4916              	.LVL520:
2030:src/display.c **** 	    *p++ = *q++;
 4917              		.loc 1 2030 10 view .LVU1510
2030:src/display.c **** 	    *p++ = *q++;
 4918              		.loc 1 2030 11 is_stmt 0 view .LVU1511
 4919 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4920              	.LVL521:
2030:src/display.c **** 	    *p++ = *q++;
 4921              		.loc 1 2030 10 view .LVU1512
 4922 012e A2F1300C 		sub	ip, r2, #48
 4923 0132 BCF1090F 		cmp	ip, #9
 4924 0136 F4D9     		bls	.L479
 4925              	.LVL522:
 4926              	.L478:
2034:src/display.c **** 	    q++;
 4927              		.loc 1 2034 4 is_stmt 1 view .LVU1513
2034:src/display.c **** 	    q++;
 4928              		.loc 1 2034 7 is_stmt 0 view .LVU1514
 4929 0138 2E2A     		cmp	r2, #46
 4930 013a 00F04882 		beq	.L665
 4931              	.LVL523:
 4932              	.L475:
2041:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4933              		.loc 1 2041 2 is_stmt 1 view .LVU1515
2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4934              		.loc 1 2042 12 is_stmt 0 view .LVU1516
 4935 013e 009B     		ldr	r3, [sp]
2041:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4936              		.loc 1 2041 5 view .LVU1517
 4937 0140 012F     		cmp	r7, #1
2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4938              		.loc 1 2042 12 view .LVU1518
 4939 0142 1E68     		ldr	r6, [r3]
2041:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4940              		.loc 1 2041 5 view .LVU1519
 4941 0144 00F06F81 		beq	.L666
 4942 0148 0022     		movs	r2, #0
 4943              	.LVL524:
 4944              	.L481:
2055:src/display.c **** 	if (*p >= '5') {	// Round up
 4945              		.loc 1 2055 2 is_stmt 1 view .LVU1520
2055:src/display.c **** 	if (*p >= '5') {	// Round up
 4946              		.loc 1 2055 20 is_stmt 0 view .LVU1521
 4947 014a 5244     		add	r2, r2, r10
2055:src/display.c **** 	if (*p >= '5') {	// Round up
 4948              		.loc 1 2055 35 view .LVU1522
 4949 014c 501C     		adds	r0, r2, #1
2055:src/display.c **** 	if (*p >= '5') {	// Round up
 4950              		.loc 1 2055 4 view .LVU1523
ARM GAS  /tmp/ccW65oEM.s 			page 165


 4951 014e 09EB0003 		add	r3, r9, r0
 4952              	.LVL525:
2056:src/display.c **** 	  *p = '0';
 4953              		.loc 1 2056 2 is_stmt 1 view .LVU1524
2056:src/display.c **** 	  *p = '0';
 4954              		.loc 1 2056 6 is_stmt 0 view .LVU1525
 4955 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2056:src/display.c **** 	  *p = '0';
 4956              		.loc 1 2056 5 view .LVU1526
 4957 0156 3429     		cmp	r1, #52
 4958 0158 21D9     		bls	.L485
2057:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4959              		.loc 1 2057 4 is_stmt 1 view .LVU1527
2057:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4960              		.loc 1 2057 7 is_stmt 0 view .LVU1528
 4961 015a 3021     		movs	r1, #48
 4962 015c 09F80010 		strb	r1, [r9, r0]
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4963              		.loc 1 2058 4 is_stmt 1 view .LVU1529
 4964              	.LVL526:
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4965              		.loc 1 2058 23 view .LVU1530
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4966              		.loc 1 2058 4 is_stmt 0 view .LVU1531
 4967 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4968 0164 3929     		cmp	r1, #57
 4969 0166 40F0A683 		bne	.L486
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4970              		.loc 1 2058 11 view .LVU1532
 4971 016a 4946     		mov	r1, r9
 4972              	.LVL527:
 4973              	.L487:
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4974              		.loc 1 2058 38 is_stmt 1 discriminator 3 view .LVU1533
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4975              		.loc 1 2058 34 discriminator 3 view .LVU1534
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4976              		.loc 1 2058 23 discriminator 3 view .LVU1535
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4977              		.loc 1 2058 4 is_stmt 0 discriminator 3 view .LVU1536
 4978 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4979              	.LVL528:
2058:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4980              		.loc 1 2058 4 discriminator 3 view .LVU1537
 4981 0170 BCF1390F 		cmp	ip, #57
 4982 0174 FAD0     		beq	.L487
2059:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4983              		.loc 1 2059 4 is_stmt 1 view .LVU1538
2059:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4984              		.loc 1 2059 7 is_stmt 0 view .LVU1539
 4985 0176 8B42     		cmp	r3, r1
 4986 0178 00F0FD80 		beq	.L667
 4987              	.LVL529:
 4988              	.L557:
2068:src/display.c **** 	      *p = '0';
 4989              		.loc 1 2068 12 is_stmt 1 view .LVU1540
2068:src/display.c **** 	      *p = '0';
ARM GAS  /tmp/ccW65oEM.s 			page 166


 4990              		.loc 1 2068 13 is_stmt 0 view .LVU1541
 4991 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2068:src/display.c **** 	      *p = '0';
 4992              		.loc 1 2068 12 view .LVU1542
 4993 0180 3929     		cmp	r1, #57
 4994 0182 4A44     		add	r2, r2, r9
 4995              	.LVL530:
2068:src/display.c **** 	      *p = '0';
 4996              		.loc 1 2068 12 view .LVU1543
 4997 0184 07D1     		bne	.L490
2069:src/display.c **** 	    (*p)++;
 4998              		.loc 1 2069 11 view .LVU1544
 4999 0186 4FF0300C 		mov	ip, #48
 5000              	.L489:
2069:src/display.c **** 	    (*p)++;
 5001              		.loc 1 2069 8 is_stmt 1 view .LVU1545
2069:src/display.c **** 	    (*p)++;
 5002              		.loc 1 2069 11 is_stmt 0 view .LVU1546
 5003 018a 82F800C0 		strb	ip, [r2]
2068:src/display.c **** 	      *p = '0';
 5004              		.loc 1 2068 12 is_stmt 1 view .LVU1547
 5005              	.LVL531:
2068:src/display.c **** 	      *p = '0';
 5006              		.loc 1 2068 13 is_stmt 0 view .LVU1548
 5007 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5008              	.LVL532:
2068:src/display.c **** 	      *p = '0';
 5009              		.loc 1 2068 12 view .LVU1549
 5010 0192 3929     		cmp	r1, #57
 5011 0194 F9D0     		beq	.L489
 5012              	.L490:
2070:src/display.c **** 	  }
 5013              		.loc 1 2070 6 is_stmt 1 view .LVU1550
2070:src/display.c **** 	  }
 5014              		.loc 1 2070 10 is_stmt 0 view .LVU1551
 5015 0196 0131     		adds	r1, r1, #1
 5016 0198 1170     		strb	r1, [r2]
 5017              	.LVL533:
 5018              	.L654:
2070:src/display.c **** 	  }
 5019              		.loc 1 2070 10 view .LVU1552
 5020 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5021              	.L485:
2075:src/display.c **** 
 5022              		.loc 1 2075 2 is_stmt 1 view .LVU1553
 5023              	.LVL534:
2075:src/display.c **** 
 5024              		.loc 1 2075 45 view .LVU1554
2075:src/display.c **** 
 5025              		.loc 1 2075 2 is_stmt 0 view .LVU1555
 5026 019e 29B1     		cbz	r1, .L496
 5027              	.LVL535:
 5028              	.L556:
2075:src/display.c **** 
 5029              		.loc 1 2075 62 view .LVU1556
 5030 01a0 3021     		movs	r1, #48
 5031              	.L497:
ARM GAS  /tmp/ccW65oEM.s 			page 167


2075:src/display.c **** 
 5032              		.loc 1 2075 68 is_stmt 1 discriminator 3 view .LVU1557
2075:src/display.c **** 
 5033              		.loc 1 2075 57 discriminator 3 view .LVU1558
 5034              	.LVL536:
2075:src/display.c **** 
 5035              		.loc 1 2075 62 is_stmt 0 discriminator 3 view .LVU1559
 5036 01a2 03F8011B 		strb	r1, [r3], #1
 5037              	.LVL537:
2075:src/display.c **** 
 5038              		.loc 1 2075 45 is_stmt 1 discriminator 3 view .LVU1560
2075:src/display.c **** 
 5039              		.loc 1 2075 2 is_stmt 0 discriminator 3 view .LVU1561
 5040 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5041 01a8 002A     		cmp	r2, #0
 5042 01aa FAD1     		bne	.L497
 5043              	.L496:
2077:src/display.c **** 	switch (mode) {
 5044              		.loc 1 2077 2 is_stmt 1 view .LVU1562
 5045              	.LVL538:
2078:src/display.c **** 	default:
 5046              		.loc 1 2078 2 view .LVU1563
 5047 01ac 022F     		cmp	r7, #2
 5048 01ae 5AD0     		beq	.L579
 5049 01b0 032F     		cmp	r7, #3
 5050 01b2 00F00481 		beq	.L499
 5051 01b6 012F     		cmp	r7, #1
 5052 01b8 00F0B681 		beq	.L500
2081:src/display.c **** 	  if (count != *display_digits)
 5053              		.loc 1 2081 4 view .LVU1564
 5054              	.LVL539:
2081:src/display.c **** 	  if (count != *display_digits)
 5055              		.loc 1 2081 34 view .LVU1565
2081:src/display.c **** 	  if (count != *display_digits)
 5056              		.loc 1 2081 42 is_stmt 0 view .LVU1566
 5057 01bc 22AB     		add	r3, sp, #136
 5058 01be 3344     		add	r3, r3, r6
2081:src/display.c **** 	  if (count != *display_digits)
 5059              		.loc 1 2081 4 view .LVU1567
 5060 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5061 01c4 302B     		cmp	r3, #48
 5062 01c6 40F06783 		bne	.L573
 5063 01ca 711E     		subs	r1, r6, #1
 5064 01cc 4944     		add	r1, r1, r9
2081:src/display.c **** 	  if (count != *display_digits)
 5065              		.loc 1 2081 15 view .LVU1568
 5066 01ce 3346     		mov	r3, r6
 5067              	.LVL540:
 5068              	.L502:
2081:src/display.c **** 	  if (count != *display_digits)
 5069              		.loc 1 2081 66 is_stmt 1 discriminator 3 view .LVU1569
2081:src/display.c **** 	  if (count != *display_digits)
 5070              		.loc 1 2081 58 discriminator 3 view .LVU1570
2081:src/display.c **** 	  if (count != *display_digits)
 5071              		.loc 1 2081 42 is_stmt 0 discriminator 3 view .LVU1571
 5072 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2081:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/ccW65oEM.s 			page 168


 5073              		.loc 1 2081 4 discriminator 3 view .LVU1572
 5074 01d4 3028     		cmp	r0, #48
 5075 01d6 1A46     		mov	r2, r3
2081:src/display.c **** 	  if (count != *display_digits)
 5076              		.loc 1 2081 63 discriminator 3 view .LVU1573
 5077 01d8 03F1FF33 		add	r3, r3, #-1
 5078              	.LVL541:
2081:src/display.c **** 	  if (count != *display_digits)
 5079              		.loc 1 2081 34 is_stmt 1 discriminator 3 view .LVU1574
2081:src/display.c **** 	  if (count != *display_digits)
 5080              		.loc 1 2081 4 is_stmt 0 discriminator 3 view .LVU1575
 5081 01dc F8D0     		beq	.L502
2082:src/display.c **** 	    count++;
 5082              		.loc 1 2082 4 is_stmt 1 view .LVU1576
2082:src/display.c **** 	    count++;
 5083              		.loc 1 2082 7 is_stmt 0 view .LVU1577
 5084 01de 9E42     		cmp	r6, r3
 5085 01e0 08BF     		it	eq
 5086 01e2 1A46     		moveq	r2, r3
 5087              	.LVL542:
 5088              	.L501:
2085:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5089              		.loc 1 2085 4 is_stmt 1 view .LVU1578
2085:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5090              		.loc 1 2085 7 is_stmt 0 view .LVU1579
 5091 01e4 B542     		cmp	r5, r6
 5092 01e6 80F20381 		bge	.L503
2085:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5093              		.loc 1 2085 47 discriminator 1 view .LVU1580
 5094 01ea 931B     		subs	r3, r2, r6
2085:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5095              		.loc 1 2085 31 discriminator 1 view .LVU1581
 5096 01ec AB42     		cmp	r3, r5
 5097 01ee 00F3FF80 		bgt	.L503
2110:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5098              		.loc 1 2110 11 is_stmt 1 view .LVU1582
2110:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5099              		.loc 1 2110 14 is_stmt 0 view .LVU1583
 5100 01f2 002D     		cmp	r5, #0
 5101 01f4 C0F27583 		blt	.L511
 5102 01f8 6B1C     		adds	r3, r5, #1
2112:src/display.c **** 		*obp++ = ',';
 5103              		.loc 1 2112 31 view .LVU1584
 5104 01fa DFF834A1 		ldr	r10, .L676+8
 5105 01fe 0293     		str	r3, [sp, #8]
 5106 0200 09EB0300 		add	r0, r9, r3
2077:src/display.c **** 	switch (mode) {
 5107              		.loc 1 2077 4 view .LVU1585
 5108 0204 CC46     		mov	ip, r9
1882:src/display.c **** 	int odig = 0;
 5109              		.loc 1 1882 15 view .LVU1586
 5110 0206 4146     		mov	r1, r8
 5111 0208 0192     		str	r2, [sp, #4]
 5112              	.LVL543:
1882:src/display.c **** 	int odig = 0;
 5113              		.loc 1 1882 15 view .LVU1587
 5114 020a 05E0     		b	.L512
ARM GAS  /tmp/ccW65oEM.s 			page 169


 5115              	.LVL544:
 5116              	.L515:
2113:src/display.c **** 	      *obp++ = *p++;
 5117              		.loc 1 2113 3 is_stmt 1 view .LVU1588
2112:src/display.c **** 		*obp++ = ',';
 5118              		.loc 1 2112 18 is_stmt 0 view .LVU1589
 5119 020c 022F     		cmp	r7, #2
2113:src/display.c **** 	      *obp++ = *p++;
 5120              		.loc 1 2113 10 view .LVU1590
 5121 020e 05BF     		ittet	eq
 5122 0210 2C23     		moveq	r3, #44
 5123 0212 4B70     		strbeq	r3, [r1, #1]
2114:src/display.c **** 	      odig++;
 5124              		.loc 1 2114 12 view .LVU1591
 5125 0214 0131     		addne	r1, r1, #1
 5126              	.LVL545:
2113:src/display.c **** 	      *obp++ = *p++;
 5127              		.loc 1 2113 7 view .LVU1592
 5128 0216 0231     		addeq	r1, r1, #2
 5129              	.LVL546:
 5130              	.L512:
2114:src/display.c **** 	      odig++;
 5131              		.loc 1 2114 8 is_stmt 1 discriminator 2 view .LVU1593
2114:src/display.c **** 	      odig++;
 5132              		.loc 1 2114 15 is_stmt 0 discriminator 2 view .LVU1594
 5133 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5134              	.LVL547:
2112:src/display.c **** 		*obp++ = ',';
 5135              		.loc 1 2112 8 is_stmt 1 discriminator 2 view .LVU1595
2114:src/display.c **** 	      odig++;
 5136              		.loc 1 2114 15 is_stmt 0 discriminator 2 view .LVU1596
 5137 021c 0B70     		strb	r3, [r1]
2115:src/display.c **** 	    }
 5138              		.loc 1 2115 8 is_stmt 1 discriminator 2 view .LVU1597
 5139              	.LVL548:
2111:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5140              		.loc 1 2111 23 discriminator 2 view .LVU1598
2111:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5141              		.loc 1 2111 15 discriminator 2 view .LVU1599
2112:src/display.c **** 		*obp++ = ',';
 5142              		.loc 1 2112 31 is_stmt 0 discriminator 2 view .LVU1600
 5143 021e A9EB0C03 		sub	r3, r9, ip
 5144 0222 2B44     		add	r3, r3, r5
 5145 0224 8AFB0327 		smull	r2, r7, r10, r3
 5146 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5147 022c 07EB4707 		add	r7, r7, r7, lsl #1
2111:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5148              		.loc 1 2111 6 discriminator 2 view .LVU1601
 5149 0230 6045     		cmp	r0, ip
2112:src/display.c **** 		*obp++ = ',';
 5150              		.loc 1 2112 31 discriminator 2 view .LVU1602
 5151 0232 A3EB0707 		sub	r7, r3, r7
2111:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5152              		.loc 1 2111 6 discriminator 2 view .LVU1603
 5153 0236 E9D1     		bne	.L515
 5154 0238 019A     		ldr	r2, [sp, #4]
 5155 023a 029F     		ldr	r7, [sp, #8]
ARM GAS  /tmp/ccW65oEM.s 			page 170


2117:src/display.c **** 	    if (count > (exp + 1)) {
 5156              		.loc 1 2117 6 is_stmt 1 view .LVU1604
2117:src/display.c **** 	    if (count > (exp + 1)) {
 5157              		.loc 1 2117 13 is_stmt 0 view .LVU1605
 5158 023c 2E23     		movs	r3, #46
2118:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5159              		.loc 1 2118 9 view .LVU1606
 5160 023e BA42     		cmp	r2, r7
2117:src/display.c **** 	    if (count > (exp + 1)) {
 5161              		.loc 1 2117 13 view .LVU1607
 5162 0240 4B70     		strb	r3, [r1, #1]
2117:src/display.c **** 	    if (count > (exp + 1)) {
 5163              		.loc 1 2117 10 view .LVU1608
 5164 0242 01F10203 		add	r3, r1, #2
 5165              	.LVL549:
2118:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5166              		.loc 1 2118 6 is_stmt 1 view .LVU1609
2118:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5167              		.loc 1 2118 9 is_stmt 0 view .LVU1610
 5168 0246 2BDD     		ble	.L509
 5169 0248 A2EB050C 		sub	ip, r2, r5
 5170              	.LVL550:
2118:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5171              		.loc 1 2118 9 view .LVU1611
 5172 024c 8C44     		add	ip, ip, r1
 5173 024e 0131     		adds	r1, r1, #1
 5174              	.LVL551:
 5175              	.L516:
2120:src/display.c **** 		odig++;
 5176              		.loc 1 2120 3 is_stmt 1 discriminator 3 view .LVU1612
2120:src/display.c **** 		odig++;
 5177              		.loc 1 2120 10 is_stmt 0 discriminator 3 view .LVU1613
 5178 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5179              	.LVL552:
2120:src/display.c **** 		odig++;
 5180              		.loc 1 2120 10 discriminator 3 view .LVU1614
 5181 0254 01F8017F 		strb	r7, [r1, #1]!
2121:src/display.c **** 	      }
 5182              		.loc 1 2121 3 is_stmt 1 discriminator 3 view .LVU1615
2119:src/display.c **** 		*obp++ = *p++;
 5183              		.loc 1 2119 31 discriminator 3 view .LVU1616
2119:src/display.c **** 		*obp++ = *p++;
 5184              		.loc 1 2119 22 discriminator 3 view .LVU1617
2119:src/display.c **** 		*obp++ = *p++;
 5185              		.loc 1 2119 8 is_stmt 0 discriminator 3 view .LVU1618
 5186 0258 8C45     		cmp	ip, r1
 5187 025a F9D1     		bne	.L516
 5188 025c E943     		mvns	r1, r5
 5189 025e 1144     		add	r1, r1, r2
 5190 0260 0B44     		add	r3, r3, r1
 5191              	.LVL553:
2121:src/display.c **** 	      }
 5192              		.loc 1 2121 7 view .LVU1619
 5193 0262 1746     		mov	r7, r2
 5194 0264 1CE0     		b	.L509
 5195              	.LVL554:
 5196              	.L579:
ARM GAS  /tmp/ccW65oEM.s 			page 171


2177:src/display.c **** 	  case -1:
 5197              		.loc 1 2177 16 view .LVU1620
 5198 0266 0127     		movs	r7, #1
 5199              	.LVL555:
 5200              	.L655:
2177:src/display.c **** 	  case -1:
 5201              		.loc 1 2177 16 view .LVU1621
 5202 0268 4146     		mov	r1, r8
 5203              	.LVL556:
 5204              	.L498:
2191:src/display.c **** 	  };
 5205              		.loc 1 2191 6 is_stmt 1 view .LVU1622
2192:src/display.c **** 	  // Falling through
 5206              		.loc 1 2192 5 view .LVU1623
2196:src/display.c **** 	  odig++;
 5207              		.loc 1 2196 4 view .LVU1624
2196:src/display.c **** 	  odig++;
 5208              		.loc 1 2196 15 is_stmt 0 view .LVU1625
 5209 026a 4A46     		mov	r2, r9
 5210              	.LVL557:
2196:src/display.c **** 	  odig++;
 5211              		.loc 1 2196 11 view .LVU1626
 5212 026c 0B46     		mov	r3, r1
 5213 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5214              	.LVL558:
2196:src/display.c **** 	  odig++;
 5215              		.loc 1 2196 11 view .LVU1627
 5216 0272 03F8020B 		strb	r0, [r3], #2
2197:src/display.c **** 	  *obp++ = '.';
 5217              		.loc 1 2197 4 is_stmt 1 view .LVU1628
2198:src/display.c **** 	  dd--;
 5218              		.loc 1 2198 4 view .LVU1629
 5219              	.LVL559:
2200:src/display.c **** 	    *obp++ = *p++;
 5220              		.loc 1 2200 10 is_stmt 0 view .LVU1630
 5221 0276 BAF1000F 		cmp	r10, #0
2198:src/display.c **** 	  dd--;
 5222              		.loc 1 2198 11 view .LVU1631
 5223 027a 4FF02E00 		mov	r0, #46
 5224 027e 4870     		strb	r0, [r1, #1]
2199:src/display.c **** 	  while (dd-- >= 0) {
 5225              		.loc 1 2199 4 is_stmt 1 view .LVU1632
2200:src/display.c **** 	    *obp++ = *p++;
 5226              		.loc 1 2200 4 view .LVU1633
2200:src/display.c **** 	    *obp++ = *p++;
 5227              		.loc 1 2200 10 view .LVU1634
2200:src/display.c **** 	    *obp++ = *p++;
 5228              		.loc 1 2200 10 is_stmt 0 view .LVU1635
 5229 0280 40F30F83 		ble	.L576
2200:src/display.c **** 	    *obp++ = *p++;
 5230              		.loc 1 2200 10 view .LVU1636
 5231 0284 0AF10100 		add	r0, r10, #1
 5232 0288 0131     		adds	r1, r1, #1
 5233 028a 8144     		add	r9, r9, r0
 5234              	.LVL560:
 5235              	.L539:
2201:src/display.c **** 	    odig++;
ARM GAS  /tmp/ccW65oEM.s 			page 172


 5236              		.loc 1 2201 6 is_stmt 1 view .LVU1637
2201:src/display.c **** 	    odig++;
 5237              		.loc 1 2201 13 is_stmt 0 view .LVU1638
 5238 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5239              	.LVL561:
2201:src/display.c **** 	    odig++;
 5240              		.loc 1 2201 13 view .LVU1639
 5241 0290 01F8010F 		strb	r0, [r1, #1]!
2202:src/display.c **** 	  }
 5242              		.loc 1 2202 6 is_stmt 1 view .LVU1640
2200:src/display.c **** 	    *obp++ = *p++;
 5243              		.loc 1 2200 10 view .LVU1641
2200:src/display.c **** 	    *obp++ = *p++;
 5244              		.loc 1 2200 10 is_stmt 0 view .LVU1642
 5245 0294 4A45     		cmp	r2, r9
 5246 0296 F9D1     		bne	.L539
 5247 0298 5344     		add	r3, r3, r10
 5248 029a 5744     		add	r7, r7, r10
2204:src/display.c **** 	}
 5249              		.loc 1 2204 13 view .LVU1643
 5250 029c 4FF0010B 		mov	fp, #1
 5251              	.LVL562:
 5252              	.L509:
2213:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5253              		.loc 1 2213 2 is_stmt 1 view .LVU1644
2219:src/display.c **** 	if (odig > *display_digits)
 5254              		.loc 1 2219 2 view .LVU1645
 5255 02a0 B742     		cmp	r7, r6
 5256 02a2 A8BF     		it	ge
 5257 02a4 3746     		movge	r7, r6
 5258              	.LVL563:
2222:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5259              		.loc 1 2222 23 is_stmt 0 view .LVU1646
 5260 02a6 F61B     		subs	r6, r6, r7
2219:src/display.c **** 	if (odig > *display_digits)
 5261              		.loc 1 2219 7 view .LVU1647
 5262 02a8 0022     		movs	r2, #0
2222:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5263              		.loc 1 2222 4 view .LVU1648
 5264 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2219:src/display.c **** 	if (odig > *display_digits)
 5265              		.loc 1 2219 7 view .LVU1649
 5266 02ae 1A70     		strb	r2, [r3]
2220:src/display.c **** 	  odig = *display_digits;
 5267              		.loc 1 2220 2 is_stmt 1 view .LVU1650
 5268              	.LVL564:
2222:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5269              		.loc 1 2222 2 view .LVU1651
2223:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5270              		.loc 1 2223 2 view .LVU1652
2225:src/display.c **** 	  if (res) *res++ = '-';
 5271              		.loc 1 2225 2 view .LVU1653
2225:src/display.c **** 	  if (res) *res++ = '-';
 5272              		.loc 1 2225 5 is_stmt 0 view .LVU1654
 5273 02b0 BEF1000F 		cmp	lr, #0
 5274 02b4 05D0     		beq	.L540
2226:src/display.c **** 	  else {
ARM GAS  /tmp/ccW65oEM.s 			page 173


 5275              		.loc 1 2226 4 is_stmt 1 view .LVU1655
2226:src/display.c **** 	  else {
 5276              		.loc 1 2226 7 is_stmt 0 view .LVU1656
 5277 02b6 002C     		cmp	r4, #0
 5278 02b8 00F0B281 		beq	.L541
2226:src/display.c **** 	  else {
 5279              		.loc 1 2226 13 is_stmt 1 discriminator 1 view .LVU1657
 5280              	.LVL565:
2226:src/display.c **** 	  else {
 5281              		.loc 1 2226 20 is_stmt 0 discriminator 1 view .LVU1658
 5282 02bc 2D22     		movs	r2, #45
 5283 02be 04F8012B 		strb	r2, [r4], #1
 5284              	.LVL566:
 5285              	.L540:
2234:src/display.c **** 	  if (c == '.') {
 5286              		.loc 1 2234 12 is_stmt 1 discriminator 1 view .LVU1659
2234:src/display.c **** 	  if (c == '.') {
 5287              		.loc 1 2234 18 is_stmt 0 discriminator 1 view .LVU1660
 5288 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5289              	.LVL567:
2234:src/display.c **** 	  if (c == '.') {
 5290              		.loc 1 2234 2 discriminator 1 view .LVU1661
 5291 02c6 E2B1     		cbz	r2, .L542
2234:src/display.c **** 	  if (c == '.') {
 5292              		.loc 1 2234 31 view .LVU1662
 5293 02c8 6B2E     		cmp	r6, #107
 5294 02ca 1ADC     		bgt	.L542
 5295              	.LVL568:
 5296              	.L543:
 5297              	.LBB381:
 5298              	.LBB382:
 365:src/display.c ****   } else {
 5299              		.loc 1 365 17 view .LVU1663
 5300 02cc 3946     		mov	r1, r7
 5301              	.LBE382:
 5302              	.LBE381:
2238:src/display.c **** 	  } else {
 5303              		.loc 1 2238 12 view .LVU1664
 5304 02ce DFF864A0 		ldr	r10, .L676+12
2236:src/display.c **** 	  } else if (c == ',') {
 5305              		.loc 1 2236 12 view .LVU1665
 5306 02d2 DFF86490 		ldr	r9, .L676+16
 5307              	.LBB386:
 5308              	.LBB383:
 365:src/display.c ****   } else {
 5309              		.loc 1 365 17 view .LVU1666
 5310 02d6 1F46     		mov	r7, r3
 5311              	.LVL569:
 365:src/display.c ****   } else {
 5312              		.loc 1 365 17 view .LVU1667
 5313 02d8 0B46     		mov	r3, r1
 5314              	.LVL570:
 5315              	.L552:
 365:src/display.c ****   } else {
 5316              		.loc 1 365 17 view .LVU1668
 5317              	.LBE383:
 5318              	.LBE386:
ARM GAS  /tmp/ccW65oEM.s 			page 174


2235:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5319              		.loc 1 2235 4 is_stmt 1 view .LVU1669
2235:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5320              		.loc 1 2235 7 is_stmt 0 view .LVU1670
 5321 02da 2E2A     		cmp	r2, #46
 5322 02dc 00F0DB80 		beq	.L668
2237:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5323              		.loc 1 2237 11 is_stmt 1 view .LVU1671
2237:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5324              		.loc 1 2237 14 is_stmt 0 view .LVU1672
 5325 02e0 2C2A     		cmp	r2, #44
 5326 02e2 00F0E880 		beq	.L669
2240:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5327              		.loc 1 2240 6 is_stmt 1 view .LVU1673
 5328              	.LVL571:
 5329              	.LBB387:
 5330              	.LBI387:
 400:src/display.c ****   if (res) *res++ = ch;
 5331              		.loc 1 400 14 view .LVU1674
 5332              	.LBB388:
 401:src/display.c ****   else	set_dig(base, ch);
 5333              		.loc 1 401 3 view .LVU1675
 401:src/display.c ****   else	set_dig(base, ch);
 5334              		.loc 1 401 6 is_stmt 0 view .LVU1676
 5335 02e6 002C     		cmp	r4, #0
 5336 02e8 00F0F280 		beq	.L550
 401:src/display.c ****   else	set_dig(base, ch);
 5337              		.loc 1 401 12 is_stmt 1 view .LVU1677
 5338              	.LVL572:
 401:src/display.c ****   else	set_dig(base, ch);
 5339              		.loc 1 401 19 is_stmt 0 view .LVU1678
 5340 02ec 04F8012B 		strb	r2, [r4], #1
 5341              	.LVL573:
 5342              	.L551:
 403:src/display.c **** }
 5343              		.loc 1 403 3 is_stmt 1 view .LVU1679
 403:src/display.c **** }
 5344              		.loc 1 403 3 is_stmt 0 view .LVU1680
 5345              	.LBE388:
 5346              	.LBE387:
2241:src/display.c **** 	  }
 5347              		.loc 1 2241 6 is_stmt 1 view .LVU1681
2234:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2234 18 is_stmt 0 view .LVU1682
 5349 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5350              	.LVL574:
2241:src/display.c **** 	  }
 5351              		.loc 1 2241 8 view .LVU1683
 5352 02f4 0936     		adds	r6, r6, #9
 5353              	.LVL575:
2234:src/display.c **** 	  if (c == '.') {
 5354              		.loc 1 2234 53 is_stmt 1 view .LVU1684
2234:src/display.c **** 	  if (c == '.') {
 5355              		.loc 1 2234 12 view .LVU1685
2234:src/display.c **** 	  if (c == '.') {
 5356              		.loc 1 2234 2 is_stmt 0 view .LVU1686
 5357 02f6 0AB1     		cbz	r2, .L651
ARM GAS  /tmp/ccW65oEM.s 			page 175


2234:src/display.c **** 	  if (c == '.') {
 5358              		.loc 1 2234 31 discriminator 3 view .LVU1687
 5359 02f8 6B2E     		cmp	r6, #107
 5360 02fa EEDD     		ble	.L552
 5361              	.L651:
2234:src/display.c **** 	  if (c == '.') {
 5362              		.loc 1 2234 31 discriminator 3 view .LVU1688
 5363 02fc 1A46     		mov	r2, r3
 5364              	.LVL576:
2234:src/display.c **** 	  if (c == '.') {
 5365              		.loc 1 2234 31 discriminator 3 view .LVU1689
 5366 02fe 3B46     		mov	r3, r7
 5367 0300 1746     		mov	r7, r2
 5368              	.LVL577:
 5369              	.L542:
2254:src/display.c **** 	  set_exp(exp, 0, res);
 5370              		.loc 1 2254 2 is_stmt 1 view .LVU1690
2254:src/display.c **** 	  set_exp(exp, 0, res);
 5371              		.loc 1 2254 5 is_stmt 0 view .LVU1691
 5372 0302 BBF1000F 		cmp	fp, #0
 5373 0306 40F0F880 		bne	.L670
 5374              	.L553:
2257:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5375              		.loc 1 2257 2 is_stmt 1 view .LVU1692
2257:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5376              		.loc 1 2257 5 is_stmt 0 view .LVU1693
 5377 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5378 030e 2E2B     		cmp	r3, #46
 5379 0310 00F0E580 		beq	.L671
 5380              	.L554:
2259:src/display.c ****       }
 5381              		.loc 1 2259 2 is_stmt 1 view .LVU1694
2259:src/display.c ****       }
 5382              		.loc 1 2259 18 is_stmt 0 view .LVU1695
 5383 0314 009B     		ldr	r3, [sp]
 5384 0316 1F60     		str	r7, [r3]
 5385              	.LVL578:
 5386              	.L441:
2260:src/display.c **** 
 5387              		.loc 1 2260 7 view .LVU1696
 5388 0318 23B0     		add	sp, sp, #140
 5389              		.cfi_remember_state
 5390              		.cfi_def_cfa_offset 36
 5391              	.LVL579:
2260:src/display.c **** 
 5392              		.loc 1 2260 7 view .LVU1697
 5393              		@ sp needed
 5394 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5395              	.LVL580:
 5396              	.L449:
 5397              		.cfi_restore_state
1959:src/display.c **** 
 5398              		.loc 1 1959 4 is_stmt 1 view .LVU1698
 5399 031e 4146     		mov	r1, r8
 5400 0320 3046     		mov	r0, r6
 5401 0322 FFF7FEFF 		bl	decNumberToString
 5402              	.LVL581:
ARM GAS  /tmp/ccW65oEM.s 			page 176


 5403 0326 A5E6     		b	.L451
 5404              	.L677:
 5405              		.align	2
 5406              	.L676:
 5407 0328 00000000 		.word	main_ram
 5408 032c 00000000 		.word	StateWhileOn
 5409 0330 56555555 		.word	1431655766
 5410 0334 00000000 		.word	.LANCHOR0
 5411 0338 00000000 		.word	.LANCHOR1
 5412              	.LVL582:
 5413              	.L442:
1917:src/display.c **** 	    if (State2.hms) {
 5414              		.loc 1 1917 4 view .LVU1699
1917:src/display.c **** 	    if (State2.hms) {
 5415              		.loc 1 1917 25 is_stmt 0 view .LVU1700
 5416 033c C14B     		ldr	r3, .L678
 5417 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1917:src/display.c **** 	    if (State2.hms) {
 5418              		.loc 1 1917 22 view .LVU1701
 5419 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1917:src/display.c **** 	    if (State2.hms) {
 5420              		.loc 1 1917 25 view .LVU1702
 5421 0342 01F00201 		and	r1, r1, #2
1917:src/display.c **** 	    if (State2.hms) {
 5422              		.loc 1 1917 22 view .LVU1703
 5423 0346 1143     		orrs	r1, r1, r2
 5424 0348 7FF46EAE 		bne	.L445
1918:src/display.c **** 	      set_x_hms(z, res);
 5425              		.loc 1 1918 6 is_stmt 1 view .LVU1704
1918:src/display.c **** 	      set_x_hms(z, res);
 5426              		.loc 1 1918 10 is_stmt 0 view .LVU1705
 5427 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1918:src/display.c **** 	      set_x_hms(z, res);
 5428              		.loc 1 1918 9 view .LVU1706
 5429 034e DA07     		lsls	r2, r3, #31
 5430 0350 00F19E82 		bmi	.L672
1922:src/display.c **** 	      if (set_x_fract(z, res))
 5431              		.loc 1 1922 11 is_stmt 1 view .LVU1707
1922:src/display.c **** 	      if (set_x_fract(z, res))
 5432              		.loc 1 1922 15 is_stmt 0 view .LVU1708
 5433 0354 BC4B     		ldr	r3, .L678+4
 5434 0356 1B68     		ldr	r3, [r3]
 5435 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1922:src/display.c **** 	      if (set_x_fract(z, res))
 5436              		.loc 1 1922 14 view .LVU1709
 5437 035c 9B06     		lsls	r3, r3, #26
 5438 035e 7FF563AE 		bpl	.L445
1923:src/display.c **** 		return;
 5439              		.loc 1 1923 8 is_stmt 1 view .LVU1710
1923:src/display.c **** 		return;
 5440              		.loc 1 1923 12 is_stmt 0 view .LVU1711
 5441 0362 2146     		mov	r1, r4
 5442 0364 3046     		mov	r0, r6
 5443 0366 FFF7FEFF 		bl	set_x_fract
 5444              	.LVL583:
1923:src/display.c **** 		return;
 5445              		.loc 1 1923 11 view .LVU1712
ARM GAS  /tmp/ccW65oEM.s 			page 177


 5446 036a 0028     		cmp	r0, #0
 5447 036c 3FF45CAE 		beq	.L445
 5448 0370 D2E7     		b	.L441
 5449              	.LVL584:
 5450              	.L565:
2005:src/display.c **** 	else exp = s_to_i(q+1);
 5451              		.loc 1 2005 21 view .LVU1713
 5452 0372 0546     		mov	r5, r0
 5453 0374 A5E6     		b	.L465
 5454              	.LVL585:
 5455              	.L667:
2059:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5456              		.loc 1 2059 7 view .LVU1714
 5457 0376 4A46     		mov	r2, r9
2060:src/display.c **** 	    mantissa[0] = '1';
 5458              		.loc 1 2060 41 view .LVU1715
 5459 0378 4FF0300C 		mov	ip, #48
 5460              	.LVL586:
 5461              	.L491:
2060:src/display.c **** 	    mantissa[0] = '1';
 5462              		.loc 1 2060 47 is_stmt 1 discriminator 3 view .LVU1716
2060:src/display.c **** 	    mantissa[0] = '1';
 5463              		.loc 1 2060 36 discriminator 3 view .LVU1717
2060:src/display.c **** 	    mantissa[0] = '1';
 5464              		.loc 1 2060 41 is_stmt 0 discriminator 3 view .LVU1718
 5465 037c 02F801CB 		strb	ip, [r2], #1
 5466              	.LVL587:
2060:src/display.c **** 	    mantissa[0] = '1';
 5467              		.loc 1 2060 25 is_stmt 1 discriminator 3 view .LVU1719
2060:src/display.c **** 	    mantissa[0] = '1';
 5468              		.loc 1 2060 6 is_stmt 0 discriminator 3 view .LVU1720
 5469 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5470 0382 3929     		cmp	r1, #57
 5471 0384 FAD0     		beq	.L491
 5472              	.LVL588:
 5473              	.L558:
2061:src/display.c **** 	    exp++;
 5474              		.loc 1 2061 6 is_stmt 1 view .LVU1721
2061:src/display.c **** 	    exp++;
 5475              		.loc 1 2061 18 is_stmt 0 view .LVU1722
 5476 0386 3122     		movs	r2, #49
2063:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5477              		.loc 1 2063 9 view .LVU1723
 5478 0388 012F     		cmp	r7, #1
2062:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5479              		.loc 1 2062 9 view .LVU1724
 5480 038a 05F10105 		add	r5, r5, #1
 5481              	.LVL589:
2061:src/display.c **** 	    exp++;
 5482              		.loc 1 2061 18 view .LVU1725
 5483 038e 8DF84820 		strb	r2, [sp, #72]
2062:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5484              		.loc 1 2062 6 is_stmt 1 view .LVU1726
 5485              	.LVL590:
2063:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5486              		.loc 1 2063 6 view .LVU1727
2063:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccW65oEM.s 			page 178


 5487              		.loc 1 2063 9 is_stmt 0 view .LVU1728
 5488 0392 7FF402AF 		bne	.L654
2063:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5489              		.loc 1 2063 27 discriminator 1 view .LVU1729
 5490 0396 AE42     		cmp	r6, r5
 5491 0398 00F3C180 		bgt	.L493
2064:src/display.c **** 	      extra_digits = 0;
 5492              		.loc 1 2064 8 is_stmt 1 view .LVU1730
2064:src/display.c **** 	      extra_digits = 0;
 5493              		.loc 1 2064 28 is_stmt 0 view .LVU1731
 5494 039c AA4B     		ldr	r3, .L678+4
 5495              	.LVL591:
2064:src/display.c **** 	      extra_digits = 0;
 5496              		.loc 1 2064 28 view .LVU1732
 5497 039e 1B68     		ldr	r3, [r3]
 5498 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2064:src/display.c **** 	      extra_digits = 0;
 5499              		.loc 1 2064 37 view .LVU1733
 5500 03a4 D806     		lsls	r0, r3, #27
 5501              	.LVL592:
2064:src/display.c **** 	      extra_digits = 0;
 5502              		.loc 1 2064 37 view .LVU1734
 5503 03a6 40F1C082 		bpl	.L673
 5504              	.LVL593:
2075:src/display.c **** 
 5505              		.loc 1 2075 2 is_stmt 1 view .LVU1735
2075:src/display.c **** 
 5506              		.loc 1 2075 40 is_stmt 0 view .LVU1736
 5507 03aa 0AF10102 		add	r2, r10, #1
2075:src/display.c **** 
 5508              		.loc 1 2075 9 view .LVU1737
 5509 03ae 09EB0203 		add	r3, r9, r2
 5510              	.LVL594:
2075:src/display.c **** 
 5511              		.loc 1 2075 45 is_stmt 1 view .LVU1738
2075:src/display.c **** 
 5512              		.loc 1 2075 2 is_stmt 0 view .LVU1739
 5513 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2064:src/display.c **** 	      extra_digits = 0;
 5514              		.loc 1 2064 37 view .LVU1740
 5515 03b6 0327     		movs	r7, #3
2075:src/display.c **** 
 5516              		.loc 1 2075 2 view .LVU1741
 5517 03b8 002A     		cmp	r2, #0
 5518 03ba 7FF4F1AE 		bne	.L556
 5519              	.LVL595:
 5520              	.L499:
2177:src/display.c **** 	  case -1:
 5521              		.loc 1 2177 4 is_stmt 1 view .LVU1742
2177:src/display.c **** 	  case -1:
 5522              		.loc 1 2177 16 is_stmt 0 view .LVU1743
 5523 03be A34B     		ldr	r3, .L678+8
 5524 03c0 83FB0523 		smull	r2, r3, r3, r5
 5525 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5526 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5527 03cc EB1A     		subs	r3, r5, r3
 5528 03ce 0233     		adds	r3, r3, #2
ARM GAS  /tmp/ccW65oEM.s 			page 179


 5529 03d0 042B     		cmp	r3, #4
 5530 03d2 3FF648AF 		bhi	.L579
 5531 03d6 01A2     		adr	r2, .L536
 5532 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5533              		.p2align 2
 5534              	.L536:
 5535 03dc 0B050000 		.word	.L580+1
 5536 03e0 A7070000 		.word	.L535+1
 5537 03e4 67020000 		.word	.L579+1
 5538 03e8 0B050000 		.word	.L580+1
 5539 03ec A7070000 		.word	.L535+1
 5540              	.LVL596:
 5541              		.p2align 1
 5542              	.L503:
2086:src/display.c **** 	    case -1:
 5543              		.loc 1 2086 6 is_stmt 1 view .LVU1744
2086:src/display.c **** 	    case -1:
 5544              		.loc 1 2086 32 is_stmt 0 view .LVU1745
 5545 03f0 9549     		ldr	r1, .L678+4
2086:src/display.c **** 	    case -1:
 5546              		.loc 1 2086 19 view .LVU1746
 5547 03f2 964B     		ldr	r3, .L678+8
2086:src/display.c **** 	    case -1:
 5548              		.loc 1 2086 32 view .LVU1747
 5549 03f4 0968     		ldr	r1, [r1]
2086:src/display.c **** 	    case -1:
 5550              		.loc 1 2086 19 view .LVU1748
 5551 03f6 83FB0503 		smull	r0, r3, r3, r5
2086:src/display.c **** 	    case -1:
 5552              		.loc 1 2086 32 view .LVU1749
 5553 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2086:src/display.c **** 	    case -1:
 5554              		.loc 1 2086 19 view .LVU1750
 5555 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5556 0402 03EB4303 		add	r3, r3, r3, lsl #1
2086:src/display.c **** 	    case -1:
 5557              		.loc 1 2086 32 view .LVU1751
 5558 0406 C1F30011 		ubfx	r1, r1, #4, #1
2086:src/display.c **** 	    case -1:
 5559              		.loc 1 2086 19 view .LVU1752
 5560 040a EB1A     		subs	r3, r5, r3
2086:src/display.c **** 	    case -1:
 5561              		.loc 1 2086 24 view .LVU1753
 5562 040c 03FB01F3 		mul	r3, r3, r1
 5563 0410 0233     		adds	r3, r3, #2
 5564 0412 042B     		cmp	r3, #4
 5565 0414 00F24282 		bhi	.L574
 5566 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5567              	.L507:
 5568 041c DC01     		.2byte	(.L575-.L507)/2
 5569 041e FD01     		.2byte	(.L506-.L507)/2
 5570 0420 4002     		.2byte	(.L574-.L507)/2
 5571 0422 DC01     		.2byte	(.L575-.L507)/2
 5572 0424 FD01     		.2byte	(.L506-.L507)/2
 5573              	.LVL597:
 5574              		.p2align 1
 5575              	.L666:
ARM GAS  /tmp/ccW65oEM.s 			page 180


2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5576              		.loc 1 2042 4 is_stmt 1 view .LVU1754
2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5577              		.loc 1 2042 7 is_stmt 0 view .LVU1755
 5578 0426 AE42     		cmp	r6, r5
 5579 0428 04DD     		ble	.L482
2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5580              		.loc 1 2042 45 discriminator 1 view .LVU1756
 5581 042a CAF10003 		rsb	r3, r10, #0
2042:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5582              		.loc 1 2042 36 discriminator 1 view .LVU1757
 5583 042e AB42     		cmp	r3, r5
 5584 0430 40F3C681 		ble	.L483
 5585              	.L482:
2043:src/display.c **** 	  else {
 5586              		.loc 1 2043 6 is_stmt 1 view .LVU1758
2043:src/display.c **** 	  else {
 5587              		.loc 1 2043 26 is_stmt 0 view .LVU1759
 5588 0434 844B     		ldr	r3, .L678+4
 5589 0436 1B68     		ldr	r3, [r3]
 5590 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2043:src/display.c **** 	  else {
 5591              		.loc 1 2043 35 view .LVU1760
 5592 043c 13F0100F 		tst	r3, #16
 5593 0440 14BF     		ite	ne
 5594 0442 0327     		movne	r7, #3
 5595              	.LVL598:
2043:src/display.c **** 	  else {
 5596              		.loc 1 2043 35 view .LVU1761
 5597 0444 0227     		moveq	r7, #2
 5598 0446 0022     		movs	r2, #0
 5599 0448 7FE6     		b	.L481
 5600              	.LVL599:
 5601              	.L664:
2043:src/display.c **** 	  else {
 5602              		.loc 1 2043 35 view .LVU1762
 5603 044a 013D     		subs	r5, r5, #1
 5604 044c 7219     		adds	r2, r6, r5
 5605              	.L474:
2022:src/display.c **** 	    exp--;
 5606              		.loc 1 2022 4 is_stmt 1 discriminator 1 view .LVU1763
2023:src/display.c **** 	  while (*++q == '0');
 5607              		.loc 1 2023 6 discriminator 1 view .LVU1764
 5608 044e 951B     		subs	r5, r2, r6
 5609              	.LVL600:
2024:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5610              		.loc 1 2024 10 discriminator 1 view .LVU1765
2024:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5611              		.loc 1 2024 11 is_stmt 0 discriminator 1 view .LVU1766
 5612 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5613              	.LVL601:
2024:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5614              		.loc 1 2024 4 discriminator 1 view .LVU1767
 5615 0454 302B     		cmp	r3, #48
 5616 0456 FAD0     		beq	.L474
2025:src/display.c **** 	    *p++ = *q++;
 5617              		.loc 1 2025 10 is_stmt 1 view .LVU1768
ARM GAS  /tmp/ccW65oEM.s 			page 181


 5618 0458 A3F13002 		sub	r2, r3, #48
 5619 045c 092A     		cmp	r2, #9
 5620 045e 3FF66EAE 		bhi	.L475
1888:src/display.c **** 	char *r;
 5621              		.loc 1 1888 8 is_stmt 0 view .LVU1769
 5622 0462 4A46     		mov	r2, r9
 5623              	.LVL602:
 5624              	.L476:
2026:src/display.c **** 	} else {
 5625              		.loc 1 2026 6 is_stmt 1 view .LVU1770
2026:src/display.c **** 	} else {
 5626              		.loc 1 2026 11 is_stmt 0 view .LVU1771
 5627 0464 02F8013B 		strb	r3, [r2], #1
 5628              	.LVL603:
2025:src/display.c **** 	    *p++ = *q++;
 5629              		.loc 1 2025 10 is_stmt 1 view .LVU1772
2025:src/display.c **** 	    *p++ = *q++;
 5630              		.loc 1 2025 11 is_stmt 0 view .LVU1773
 5631 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2025:src/display.c **** 	    *p++ = *q++;
 5632              		.loc 1 2025 10 view .LVU1774
 5633 046c A3F13001 		sub	r1, r3, #48
 5634 0470 0929     		cmp	r1, #9
 5635 0472 F7D9     		bls	.L476
 5636 0474 63E6     		b	.L475
 5637              	.LVL604:
 5638              	.L662:
2016:src/display.c **** 	  q++;
 5639              		.loc 1 2016 4 is_stmt 1 view .LVU1775
2017:src/display.c **** 	} else if (*q == '+')
 5640              		.loc 1 2017 4 view .LVU1776
2016:src/display.c **** 	  q++;
 5641              		.loc 1 2016 13 is_stmt 0 view .LVU1777
 5642 0476 4FF0010E 		mov	lr, #1
 5643 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2017:src/display.c **** 	} else if (*q == '+')
 5644              		.loc 1 2017 5 view .LVU1778
 5645 047c 7644     		add	r6, r6, lr
 5646              	.LVL605:
2017:src/display.c **** 	} else if (*q == '+')
 5647              		.loc 1 2017 5 view .LVU1779
 5648 047e 35E6     		b	.L470
 5649              	.LVL606:
 5650              	.L660:
1985:src/display.c **** 	  trimzeros = 1;
 5651              		.loc 1 1985 4 is_stmt 1 view .LVU1780
1985:src/display.c **** 	  trimzeros = 1;
 5652              		.loc 1 1985 11 is_stmt 0 view .LVU1781
 5653 0480 3046     		mov	r0, r6
 5654 0482 FFF7FEFF 		bl	std_round_fix
 5655              	.LVL607:
1987:src/display.c **** 	} else if (dd >= *display_digits)
 5656              		.loc 1 1987 7 view .LVU1782
 5657 0486 009B     		ldr	r3, [sp]
 5658 0488 1D68     		ldr	r5, [r3]
1986:src/display.c **** 	  dd = *display_digits - 1;
 5659              		.loc 1 1986 14 view .LVU1783
ARM GAS  /tmp/ccW65oEM.s 			page 182


 5660 048a 0123     		movs	r3, #1
1985:src/display.c **** 	  trimzeros = 1;
 5661              		.loc 1 1985 11 view .LVU1784
 5662 048c 0746     		mov	r7, r0
 5663              	.LVL608:
1986:src/display.c **** 	  dd = *display_digits - 1;
 5664              		.loc 1 1986 4 is_stmt 1 view .LVU1785
1987:src/display.c **** 	} else if (dd >= *display_digits)
 5665              		.loc 1 1987 4 view .LVU1786
1987:src/display.c **** 	} else if (dd >= *display_digits)
 5666              		.loc 1 1987 7 is_stmt 0 view .LVU1787
 5667 048e 05F1FF3A 		add	r10, r5, #-1
 5668              	.LVL609:
1986:src/display.c **** 	  dd = *display_digits - 1;
 5669              		.loc 1 1986 14 view .LVU1788
 5670 0492 0193     		str	r3, [sp, #4]
 5671              	.LVL610:
1986:src/display.c **** 	  dd = *display_digits - 1;
 5672              		.loc 1 1986 14 view .LVU1789
 5673 0494 00E6     		b	.L464
 5674              	.LVL611:
 5675              	.L668:
2236:src/display.c **** 	  } else if (c == ',') {
 5676              		.loc 1 2236 6 is_stmt 1 view .LVU1790
2236:src/display.c **** 	  } else if (c == ',') {
 5677              		.loc 1 2236 12 is_stmt 0 view .LVU1791
 5678 0496 2246     		mov	r2, r4
 5679              	.LVL612:
2236:src/display.c **** 	  } else if (c == ',') {
 5680              		.loc 1 2236 12 view .LVU1792
 5681 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5682 049c 0193     		str	r3, [sp, #4]
 5683 049e A6F10900 		sub	r0, r6, #9
 5684 04a2 FFF7FEFF 		bl	set_decimal
 5685              	.LVL613:
 5686 04a6 019B     		ldr	r3, [sp, #4]
 5687 04a8 0446     		mov	r4, r0
 5688              	.LVL614:
 5689              	.L546:
2234:src/display.c **** 	  if (c == '.') {
 5690              		.loc 1 2234 53 is_stmt 1 view .LVU1793
2234:src/display.c **** 	  if (c == '.') {
 5691              		.loc 1 2234 12 view .LVU1794
2234:src/display.c **** 	  if (c == '.') {
 5692              		.loc 1 2234 18 is_stmt 0 view .LVU1795
 5693 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5694              	.LVL615:
2234:src/display.c **** 	  if (c == '.') {
 5695              		.loc 1 2234 2 view .LVU1796
 5696 04ae 002A     		cmp	r2, #0
 5697 04b0 7FF413AF 		bne	.L552
 5698 04b4 22E7     		b	.L651
 5699              	.L669:
2238:src/display.c **** 	  } else {
 5700              		.loc 1 2238 6 is_stmt 1 view .LVU1797
2238:src/display.c **** 	  } else {
 5701              		.loc 1 2238 12 is_stmt 0 view .LVU1798
ARM GAS  /tmp/ccW65oEM.s 			page 183


 5702 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5703              	.LVL616:
 5704              	.LBB390:
 5705              	.LBI381:
 360:src/display.c ****   if (sep == SEP_NONE)
 5706              		.loc 1 360 14 is_stmt 1 view .LVU1799
 5707              	.LBB384:
 361:src/display.c ****     return res;
 5708              		.loc 1 361 3 view .LVU1800
 361:src/display.c ****     return res;
 5709              		.loc 1 361 6 is_stmt 0 view .LVU1801
 5710 04ba 0029     		cmp	r1, #0
 5711 04bc F5D0     		beq	.L546
 363:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5712              		.loc 1 363 3 is_stmt 1 view .LVU1802
 363:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5713              		.loc 1 363 6 is_stmt 0 view .LVU1803
 5714 04be 002C     		cmp	r4, #0
 5715 04c0 00F0F281 		beq	.L548
 364:src/display.c ****     else *res++ = '.';
 5716              		.loc 1 364 5 is_stmt 1 view .LVU1804
 364:src/display.c ****     else *res++ = '.';
 5717              		.loc 1 364 8 is_stmt 0 view .LVU1805
 5718 04c4 0129     		cmp	r1, #1
 364:src/display.c ****     else *res++ = '.';
 5719              		.loc 1 364 27 is_stmt 1 view .LVU1806
 5720              	.LVL617:
 365:src/display.c ****   } else {
 5721              		.loc 1 365 10 view .LVU1807
 365:src/display.c ****   } else {
 5722              		.loc 1 365 17 is_stmt 0 view .LVU1808
 5723 04c6 18BF     		it	ne
 5724 04c8 2E22     		movne	r2, #46
 5725              	.LVL618:
 365:src/display.c ****   } else {
 5726              		.loc 1 365 17 view .LVU1809
 5727 04ca 04F8012B 		strb	r2, [r4], #1
 5728              	.LVL619:
 365:src/display.c ****   } else {
 5729              		.loc 1 365 17 view .LVU1810
 5730 04ce ECE7     		b	.L546
 5731              	.LVL620:
 5732              	.L550:
 365:src/display.c ****   } else {
 5733              		.loc 1 365 17 view .LVU1811
 5734              	.LBE384:
 5735              	.LBE390:
 5736              	.LBB391:
 5737              	.LBB389:
 402:src/display.c ****   return res;
 5738              		.loc 1 402 8 view .LVU1812
 5739 04d0 1146     		mov	r1, r2
 5740 04d2 3046     		mov	r0, r6
 5741 04d4 0193     		str	r3, [sp, #4]
 402:src/display.c ****   return res;
 5742              		.loc 1 402 8 is_stmt 1 view .LVU1813
 5743 04d6 FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccW65oEM.s 			page 184


 5744              	.LVL621:
 402:src/display.c ****   return res;
 5745              		.loc 1 402 8 is_stmt 0 view .LVU1814
 5746 04da 019B     		ldr	r3, [sp, #4]
 5747 04dc 08E7     		b	.L551
 5748              	.LVL622:
 5749              	.L671:
 402:src/display.c ****   return res;
 5750              		.loc 1 402 8 view .LVU1815
 5751              	.LBE389:
 5752              	.LBE391:
2257:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5753              		.loc 1 2257 21 discriminator 1 view .LVU1816
 5754 04de 002C     		cmp	r4, #0
 5755 04e0 7FF418AF 		bne	.L554
2258:src/display.c **** 	*display_digits = odig;
 5756              		.loc 1 2258 4 is_stmt 1 view .LVU1817
2258:src/display.c **** 	*display_digits = odig;
 5757              		.loc 1 2258 33 is_stmt 0 view .LVU1818
 5758 04e4 009B     		ldr	r3, [sp]
 5759 04e6 1868     		ldr	r0, [r3]
2258:src/display.c **** 	*display_digits = odig;
 5760              		.loc 1 2258 4 view .LVU1819
 5761 04e8 594B     		ldr	r3, .L678+12
2258:src/display.c **** 	*display_digits = odig;
 5762              		.loc 1 2258 33 view .LVU1820
 5763 04ea 0138     		subs	r0, r0, #1
2258:src/display.c **** 	*display_digits = odig;
 5764              		.loc 1 2258 4 view .LVU1821
 5765 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5766 04ee 2246     		mov	r2, r4
 5767 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5768 04f4 FFF7FEFF 		bl	set_decimal
 5769              	.LVL623:
 5770 04f8 0CE7     		b	.L554
 5771              	.L670:
2255:src/display.c **** #endif
 5772              		.loc 1 2255 4 view .LVU1822
 5773 04fa 2846     		mov	r0, r5
 5774 04fc 2246     		mov	r2, r4
 5775 04fe 0021     		movs	r1, #0
 5776 0500 0193     		str	r3, [sp, #4]
2255:src/display.c **** #endif
 5777              		.loc 1 2255 4 is_stmt 1 view .LVU1823
 5778 0502 FFF7FEFF 		bl	set_exp
 5779              	.LVL624:
 5780 0506 019B     		ldr	r3, [sp, #4]
 5781 0508 FFE6     		b	.L553
 5782              	.LVL625:
 5783              	.L580:
2177:src/display.c **** 	  case -1:
 5784              		.loc 1 2177 16 is_stmt 0 view .LVU1824
 5785 050a 0227     		movs	r7, #2
 5786 050c 4146     		mov	r1, r8
 5787              	.LVL626:
 5788              	.L537:
2186:src/display.c **** 	    odig++;
ARM GAS  /tmp/ccW65oEM.s 			page 185


 5789              		.loc 1 2186 6 is_stmt 1 view .LVU1825
2186:src/display.c **** 	    odig++;
 5790              		.loc 1 2186 13 is_stmt 0 view .LVU1826
 5791 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5792              	.LVL627:
2186:src/display.c **** 	    odig++;
 5793              		.loc 1 2186 13 view .LVU1827
 5794 0512 01F8013B 		strb	r3, [r1], #1
 5795              	.LVL628:
2187:src/display.c **** 	    dd--;
 5796              		.loc 1 2187 6 is_stmt 1 view .LVU1828
2188:src/display.c **** 	    exp--;
 5797              		.loc 1 2188 6 view .LVU1829
2188:src/display.c **** 	    exp--;
 5798              		.loc 1 2188 8 is_stmt 0 view .LVU1830
 5799 0516 0AF1FF3A 		add	r10, r10, #-1
 5800              	.LVL629:
2189:src/display.c **** 	  case 0:
 5801              		.loc 1 2189 6 is_stmt 1 view .LVU1831
2189:src/display.c **** 	  case 0:
 5802              		.loc 1 2189 9 is_stmt 0 view .LVU1832
 5803 051a 013D     		subs	r5, r5, #1
 5804              	.LVL630:
2189:src/display.c **** 	  case 0:
 5805              		.loc 1 2189 9 view .LVU1833
 5806 051c A5E6     		b	.L498
 5807              	.LVL631:
 5808              	.L493:
2075:src/display.c **** 
 5809              		.loc 1 2075 2 is_stmt 1 view .LVU1834
2075:src/display.c **** 
 5810              		.loc 1 2075 45 view .LVU1835
2075:src/display.c **** 
 5811              		.loc 1 2075 2 is_stmt 0 view .LVU1836
 5812 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5813 0522 002A     		cmp	r2, #0
 5814 0524 7FF43CAE 		bne	.L556
 5815              	.LVL632:
 5816              	.L500:
2140:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5817              		.loc 1 2140 4 is_stmt 1 view .LVU1837
2141:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5818              		.loc 1 2141 4 view .LVU1838
2141:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5819              		.loc 1 2141 7 is_stmt 0 view .LVU1839
 5820 0528 002D     		cmp	r5, #0
 5821 052a C0F21081 		blt	.L520
2141:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5822              		.loc 1 2141 7 view .LVU1840
 5823 052e 6B1C     		adds	r3, r5, #1
2143:src/display.c **** 		*obp++ = ',';
 5824              		.loc 1 2143 31 view .LVU1841
 5825 0530 DFF818C1 		ldr	ip, .L678+8
 5826 0534 0293     		str	r3, [sp, #8]
 5827 0536 09EB0300 		add	r0, r9, r3
2077:src/display.c **** 	switch (mode) {
 5828              		.loc 1 2077 4 view .LVU1842
ARM GAS  /tmp/ccW65oEM.s 			page 186


 5829 053a 4F46     		mov	r7, r9
1882:src/display.c **** 	int odig = 0;
 5830              		.loc 1 1882 15 view .LVU1843
 5831 053c 4146     		mov	r1, r8
 5832 053e 0394     		str	r4, [sp, #12]
 5833 0540 05E0     		b	.L521
 5834              	.LVL633:
 5835              	.L524:
2144:src/display.c **** 	      *obp++ = *p++;
 5836              		.loc 1 2144 3 is_stmt 1 view .LVU1844
2143:src/display.c **** 		*obp++ = ',';
 5837              		.loc 1 2143 18 is_stmt 0 view .LVU1845
 5838 0542 022A     		cmp	r2, #2
2144:src/display.c **** 	      *obp++ = *p++;
 5839              		.loc 1 2144 10 view .LVU1846
 5840 0544 05BF     		ittet	eq
 5841 0546 2C23     		moveq	r3, #44
 5842 0548 4B70     		strbeq	r3, [r1, #1]
2145:src/display.c **** 	      odig++;
 5843              		.loc 1 2145 12 view .LVU1847
 5844 054a 0131     		addne	r1, r1, #1
 5845              	.LVL634:
2144:src/display.c **** 	      *obp++ = *p++;
 5846              		.loc 1 2144 7 view .LVU1848
 5847 054c 0231     		addeq	r1, r1, #2
 5848              	.LVL635:
 5849              	.L521:
2145:src/display.c **** 	      odig++;
 5850              		.loc 1 2145 8 is_stmt 1 discriminator 2 view .LVU1849
2145:src/display.c **** 	      odig++;
 5851              		.loc 1 2145 15 is_stmt 0 discriminator 2 view .LVU1850
 5852 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5853              	.LVL636:
2143:src/display.c **** 		*obp++ = ',';
 5854              		.loc 1 2143 8 is_stmt 1 discriminator 2 view .LVU1851
2145:src/display.c **** 	      odig++;
 5855              		.loc 1 2145 15 is_stmt 0 discriminator 2 view .LVU1852
 5856 0552 0B70     		strb	r3, [r1]
2146:src/display.c **** 	    }
 5857              		.loc 1 2146 8 is_stmt 1 discriminator 2 view .LVU1853
 5858              	.LVL637:
2142:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5859              		.loc 1 2142 24 discriminator 2 view .LVU1854
2142:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5860              		.loc 1 2142 16 discriminator 2 view .LVU1855
2143:src/display.c **** 		*obp++ = ',';
 5861              		.loc 1 2143 31 is_stmt 0 discriminator 2 view .LVU1856
 5862 0554 A9EB0703 		sub	r3, r9, r7
 5863 0558 2B44     		add	r3, r3, r5
 5864 055a 8CFB0342 		smull	r4, r2, ip, r3
 5865 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5866 0562 02EB4202 		add	r2, r2, r2, lsl #1
2142:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5867              		.loc 1 2142 6 discriminator 2 view .LVU1857
 5868 0566 B842     		cmp	r0, r7
2143:src/display.c **** 		*obp++ = ',';
 5869              		.loc 1 2143 31 discriminator 2 view .LVU1858
ARM GAS  /tmp/ccW65oEM.s 			page 187


 5870 0568 A3EB0202 		sub	r2, r3, r2
2142:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5871              		.loc 1 2142 6 discriminator 2 view .LVU1859
 5872 056c E9D1     		bne	.L524
2148:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5873              		.loc 1 2148 13 view .LVU1860
 5874 056e 2E23     		movs	r3, #46
2149:src/display.c **** 	      *obp++ = *p++;
 5875              		.loc 1 2149 6 view .LVU1861
 5876 0570 BAF1000F 		cmp	r10, #0
2148:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5877              		.loc 1 2148 13 view .LVU1862
 5878 0574 4B70     		strb	r3, [r1, #1]
 5879 0576 039C     		ldr	r4, [sp, #12]
 5880 0578 029F     		ldr	r7, [sp, #8]
 5881              	.LVL638:
2148:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5882              		.loc 1 2148 6 is_stmt 1 view .LVU1863
2148:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5883              		.loc 1 2148 10 is_stmt 0 view .LVU1864
 5884 057a 01F10203 		add	r3, r1, #2
 5885              	.LVL639:
2149:src/display.c **** 	      *obp++ = *p++;
 5886              		.loc 1 2149 6 is_stmt 1 view .LVU1865
2149:src/display.c **** 	      *obp++ = *p++;
 5887              		.loc 1 2149 16 view .LVU1866
2149:src/display.c **** 	      *obp++ = *p++;
 5888              		.loc 1 2149 6 is_stmt 0 view .LVU1867
 5889 057e 0CDD     		ble	.L525
 5890 0580 0131     		adds	r1, r1, #1
 5891 0582 00EB0A07 		add	r7, r0, r10
 5892              	.LVL640:
 5893              	.L526:
2150:src/display.c **** 	      odig++;
 5894              		.loc 1 2150 8 is_stmt 1 discriminator 4 view .LVU1868
2150:src/display.c **** 	      odig++;
 5895              		.loc 1 2150 15 is_stmt 0 discriminator 4 view .LVU1869
 5896 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5897              	.LVL641:
2150:src/display.c **** 	      odig++;
 5898              		.loc 1 2150 15 discriminator 4 view .LVU1870
 5899 058a 01F8012F 		strb	r2, [r1, #1]!
2151:src/display.c **** 	    }
 5900              		.loc 1 2151 8 is_stmt 1 discriminator 4 view .LVU1871
2149:src/display.c **** 	      *obp++ = *p++;
 5901              		.loc 1 2149 43 discriminator 4 view .LVU1872
2149:src/display.c **** 	      *obp++ = *p++;
 5902              		.loc 1 2149 16 discriminator 4 view .LVU1873
2149:src/display.c **** 	      *obp++ = *p++;
 5903              		.loc 1 2149 6 is_stmt 0 discriminator 4 view .LVU1874
 5904 058e 8742     		cmp	r7, r0
 5905 0590 F9D1     		bne	.L526
 5906 0592 029A     		ldr	r2, [sp, #8]
 5907 0594 5244     		add	r2, r2, r10
 5908 0596 5344     		add	r3, r3, r10
 5909              	.LVL642:
2149:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccW65oEM.s 			page 188


 5910              		.loc 1 2149 6 discriminator 4 view .LVU1875
 5911 0598 1746     		mov	r7, r2
 5912              	.LVL643:
 5913              	.L525:
2168:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5914              		.loc 1 2168 4 is_stmt 1 view .LVU1876
2168:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5915              		.loc 1 2168 7 is_stmt 0 view .LVU1877
 5916 059a 019A     		ldr	r2, [sp, #4]
 5917 059c 002A     		cmp	r2, #0
 5918 059e 40F0C480 		bne	.L531
1884:src/display.c **** 	int j;
 5919              		.loc 1 1884 6 view .LVU1878
 5920 05a2 9346     		mov	fp, r2
 5921 05a4 7CE6     		b	.L509
 5922              	.LVL644:
 5923              	.L657:
1945:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5924              		.loc 1 1945 4 is_stmt 1 view .LVU1879
 5925 05a6 2B4A     		ldr	r2, .L678+16
 5926 05a8 3146     		mov	r1, r6
 5927 05aa 3046     		mov	r0, r6
 5928 05ac FFF7FEFF 		bl	decNumberNormalize
 5929              	.LVL645:
1946:src/display.c **** 	  z->exponent = 0;
 5930              		.loc 1 1946 4 view .LVU1880
1946:src/display.c **** 	  z->exponent = 0;
 5931              		.loc 1 1946 22 is_stmt 0 view .LVU1881
 5932 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5933 05b4 03EB020A 		add	r10, r3, r2
1946:src/display.c **** 	  z->exponent = 0;
 5934              		.loc 1 1946 8 view .LVU1882
 5935 05b8 0AF1FF33 		add	r3, r10, #-1
1947:src/display.c **** 	}
 5936              		.loc 1 1947 16 view .LVU1883
 5937 05bc C6F804B0 		str	fp, [r6, #4]
1946:src/display.c **** 	  z->exponent = 0;
 5938              		.loc 1 1946 8 view .LVU1884
 5939 05c0 0193     		str	r3, [sp, #4]
 5940              	.LVL646:
1947:src/display.c **** 	}
 5941              		.loc 1 1947 4 is_stmt 1 view .LVU1885
 5942 05c2 42E5     		b	.L448
 5943              	.LVL647:
 5944              	.L663:
2019:src/display.c **** 	for (; *q == '0'; q++);
 5945              		.loc 1 2019 4 view .LVU1886
2019:src/display.c **** 	for (; *q == '0'; q++);
 5946              		.loc 1 2019 4 is_stmt 0 view .LVU1887
 5947 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1902:src/display.c **** 	int trimzeros = 0;
 5948              		.loc 1 1902 6 view .LVU1888
 5949 05c6 4FF0000E 		mov	lr, #0
2019:src/display.c **** 	for (; *q == '0'; q++);
 5950              		.loc 1 2019 5 view .LVU1889
 5951 05ca 0136     		adds	r6, r6, #1
 5952              	.LVL648:
ARM GAS  /tmp/ccW65oEM.s 			page 189


2019:src/display.c **** 	for (; *q == '0'; q++);
 5953              		.loc 1 2019 5 view .LVU1890
 5954 05cc 8EE5     		b	.L470
 5955              	.LVL649:
 5956              	.L665:
2035:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5957              		.loc 1 2035 6 is_stmt 1 view .LVU1891
2036:src/display.c **** 	      *p++ = *q++;
 5958              		.loc 1 2036 13 is_stmt 0 view .LVU1892
 5959 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2036:src/display.c **** 	      *p++ = *q++;
 5960              		.loc 1 2036 12 view .LVU1893
 5961 05d0 A3F13002 		sub	r2, r3, #48
 5962 05d4 092A     		cmp	r2, #9
2035:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5963              		.loc 1 2035 7 view .LVU1894
 5964 05d6 06F10106 		add	r6, r6, #1
 5965              	.LVL650:
2036:src/display.c **** 	      *p++ = *q++;
 5966              		.loc 1 2036 6 is_stmt 1 view .LVU1895
2036:src/display.c **** 	      *p++ = *q++;
 5967              		.loc 1 2036 12 view .LVU1896
 5968 05da 3FF6B0AD 		bhi	.L475
 5969              	.LVL651:
 5970              	.L480:
2037:src/display.c **** 	  }
 5971              		.loc 1 2037 8 view .LVU1897
2037:src/display.c **** 	  }
 5972              		.loc 1 2037 13 is_stmt 0 view .LVU1898
 5973 05de 01F8013B 		strb	r3, [r1], #1
 5974              	.LVL652:
2036:src/display.c **** 	      *p++ = *q++;
 5975              		.loc 1 2036 12 is_stmt 1 view .LVU1899
2036:src/display.c **** 	      *p++ = *q++;
 5976              		.loc 1 2036 13 is_stmt 0 view .LVU1900
 5977 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2036:src/display.c **** 	      *p++ = *q++;
 5978              		.loc 1 2036 12 view .LVU1901
 5979 05e6 A3F13002 		sub	r2, r3, #48
 5980 05ea 092A     		cmp	r2, #9
 5981 05ec F7D9     		bls	.L480
 5982 05ee A6E5     		b	.L475
 5983              	.LVL653:
 5984              	.L658:
1953:src/display.c **** 	    x[0] = '-';
 5985              		.loc 1 1953 34 discriminator 1 view .LVU1902
 5986 05f0 6B20     		movs	r0, #107
 5987 05f2 FFF7FEFF 		bl	get_user_flag
 5988              	.LVL654:
1953:src/display.c **** 	    x[0] = '-';
 5989              		.loc 1 1953 31 discriminator 1 view .LVU1903
 5990 05f6 0028     		cmp	r0, #0
 5991 05f8 3FF439AD 		beq	.L450
1954:src/display.c **** 	    x[1] = '0';
 5992              		.loc 1 1954 6 is_stmt 1 view .LVU1904
1955:src/display.c **** 	  } else
 5993              		.loc 1 1955 6 view .LVU1905
ARM GAS  /tmp/ccW65oEM.s 			page 190


1954:src/display.c **** 	    x[1] = '0';
 5994              		.loc 1 1954 11 is_stmt 0 view .LVU1906
 5995 05fc 43F22D03 		movw	r3, #12333
 5996 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1955:src/display.c **** 	  } else
 5997              		.loc 1 1955 11 view .LVU1907
 5998 0604 36E5     		b	.L451
 5999              	.LVL655:
 6000              	.L661:
2012:src/display.c **** 	  CLR_MANT_SIGN;
 6001              		.loc 1 2012 4 is_stmt 1 view .LVU1908
 6002              	.LBB392:
 6003              	.LBI392:
 307:src/display.c **** {
 6004              		.loc 1 307 13 view .LVU1909
 6005              	.LBB393:
 309:src/display.c ****   clr_dot(EXP_SIGN);
 6006              		.loc 1 309 3 view .LVU1910
 310:src/display.c **** }
 6007              		.loc 1 310 3 view .LVU1911
 309:src/display.c ****   clr_dot(EXP_SIGN);
 6008              		.loc 1 309 27 is_stmt 0 view .LVU1912
 6009 0606 144B     		ldr	r3, .L678+20
 6010 0608 2022     		movs	r2, #32
 310:src/display.c **** }
 6011              		.loc 1 310 3 view .LVU1913
 6012 060a 8220     		movs	r0, #130
 309:src/display.c ****   clr_dot(EXP_SIGN);
 6013              		.loc 1 309 27 view .LVU1914
 6014 060c 1A70     		strb	r2, [r3]
 310:src/display.c **** }
 6015              		.loc 1 310 3 view .LVU1915
 6016 060e FFF7FEFF 		bl	clr_dot
 6017              	.LVL656:
 6018              	.LBE393:
 6019              	.LBE392:
2013:src/display.c **** 	}
 6020              		.loc 1 2013 4 is_stmt 1 view .LVU1916
 6021              	.LBB394:
 6022              	.LBI394:
 295:src/display.c **** {
 6023              		.loc 1 295 13 view .LVU1917
 6024              	.LBB395:
 297:src/display.c ****   clr_dot(MANT_SIGN);
 6025              		.loc 1 297 3 view .LVU1918
 297:src/display.c ****   clr_dot(MANT_SIGN);
 6026              		.loc 1 297 25 is_stmt 0 view .LVU1919
 6027 0612 124B     		ldr	r3, .L678+24
 6028 0614 2022     		movs	r2, #32
 298:src/display.c **** }
 6029              		.loc 1 298 3 view .LVU1920
 6030 0616 8120     		movs	r0, #129
 297:src/display.c ****   clr_dot(MANT_SIGN);
 6031              		.loc 1 297 25 view .LVU1921
 6032 0618 1A70     		strb	r2, [r3]
 298:src/display.c **** }
 6033              		.loc 1 298 3 is_stmt 1 view .LVU1922
ARM GAS  /tmp/ccW65oEM.s 			page 191


 6034 061a FFF7FEFF 		bl	clr_dot
 6035              	.LVL657:
 299:src/display.c **** 
 6036              		.loc 1 299 1 is_stmt 0 view .LVU1923
 6037 061e 5CE5     		b	.L468
 6038              	.LVL658:
 6039              	.L541:
 299:src/display.c **** 
 6040              		.loc 1 299 1 view .LVU1924
 6041              	.LBE395:
 6042              	.LBE394:
2228:src/display.c **** 	      SET_MANT_SIGN;
 6043              		.loc 1 2228 6 is_stmt 1 view .LVU1925
 6044 0620 0193     		str	r3, [sp, #4]
2228:src/display.c **** 	      SET_MANT_SIGN;
 6045              		.loc 1 2228 9 is_stmt 0 view .LVU1926
 6046 0622 002E     		cmp	r6, #0
 6047 0624 40F00281 		bne	.L544
2229:src/display.c **** 	    else
 6048              		.loc 1 2229 8 is_stmt 1 view .LVU1927
 6049              	.LBB396:
 6050              	.LBI396:
 289:src/display.c **** {
 6051              		.loc 1 289 13 view .LVU1928
 6052              	.LBB397:
 291:src/display.c ****   set_dot(MANT_SIGN);
 6053              		.loc 1 291 3 view .LVU1929
 291:src/display.c ****   set_dot(MANT_SIGN);
 6054              		.loc 1 291 25 is_stmt 0 view .LVU1930
 6055 0628 0C4A     		ldr	r2, .L678+24
 6056 062a 2D21     		movs	r1, #45
 292:src/display.c **** }
 6057              		.loc 1 292 3 view .LVU1931
 6058 062c 8120     		movs	r0, #129
 291:src/display.c ****   set_dot(MANT_SIGN);
 6059              		.loc 1 291 25 view .LVU1932
 6060 062e 1170     		strb	r1, [r2]
 292:src/display.c **** }
 6061              		.loc 1 292 3 is_stmt 1 view .LVU1933
 6062 0630 FFF7FEFF 		bl	set_dot
 6063              	.LVL659:
 292:src/display.c **** }
 6064              		.loc 1 292 3 is_stmt 0 view .LVU1934
 6065              	.LBE397:
 6066              	.LBE396:
2234:src/display.c **** 	  if (c == '.') {
 6067              		.loc 1 2234 12 is_stmt 1 view .LVU1935
2234:src/display.c **** 	  if (c == '.') {
 6068              		.loc 1 2234 18 is_stmt 0 view .LVU1936
 6069 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6070              	.LVL660:
2234:src/display.c **** 	  if (c == '.') {
 6071              		.loc 1 2234 2 view .LVU1937
 6072 0638 019B     		ldr	r3, [sp, #4]
 6073 063a 002A     		cmp	r2, #0
 6074 063c 7FF446AE 		bne	.L543
 6075 0640 5FE6     		b	.L542
ARM GAS  /tmp/ccW65oEM.s 			page 192


 6076              	.L679:
 6077 0642 00BF     		.align	2
 6078              	.L678:
 6079 0644 00000000 		.word	StateWhileOn
 6080 0648 00000000 		.word	main_ram
 6081 064c 56555555 		.word	1431655766
 6082 0650 00000000 		.word	.LANCHOR1
 6083 0654 00000000 		.word	Ctx
 6084 0658 00000000 		.word	LastDisplayedExponent
 6085 065c 00000000 		.word	LastDisplayedNumber
 6086              	.LVL661:
 6087              	.L659:
1962:src/display.c **** 	  return;
 6088              		.loc 1 1962 4 is_stmt 1 view .LVU1938
 6089              	.LBB398:
 6090              	.LBI398:
1750:src/display.c **** 	const int dbl = is_dblmode();
 6091              		.loc 1 1750 19 view .LVU1939
 6092              	.LBB399:
1751:src/display.c **** 	char *p;
 6093              		.loc 1 1751 2 view .LVU1940
1751:src/display.c **** 	char *p;
 6094              		.loc 1 1751 18 is_stmt 0 view .LVU1941
 6095 0660 FFF7FEFF 		bl	is_dblmode
 6096              	.LVL662:
1767:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6097              		.loc 1 1767 5 view .LVU1942
 6098 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6099 0668 2D2B     		cmp	r3, #45
1751:src/display.c **** 	char *p;
 6100              		.loc 1 1751 18 view .LVU1943
 6101 066a 0446     		mov	r4, r0
 6102              	.LVL663:
1752:src/display.c **** 	int i, j;
 6103              		.loc 1 1752 2 is_stmt 1 view .LVU1944
1753:src/display.c **** 	char *upper_str;
 6104              		.loc 1 1753 2 view .LVU1945
1754:src/display.c **** 	enum separator_modes separator_mode;
 6105              		.loc 1 1754 2 view .LVU1946
1755:src/display.c **** 	char decimal_mark;
 6106              		.loc 1 1755 2 view .LVU1947
1756:src/display.c **** 	char thousands_sep;
 6107              		.loc 1 1756 2 view .LVU1948
1757:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6108              		.loc 1 1757 2 view .LVU1949
1763:src/display.c **** #endif
 6109              		.loc 1 1763 2 view .LVU1950
1765:src/display.c **** 
 6110              		.loc 1 1765 2 view .LVU1951
1767:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6111              		.loc 1 1767 2 view .LVU1952
1767:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6112              		.loc 1 1767 5 is_stmt 0 view .LVU1953
 6113 066c 00F02A81 		beq	.L674
1780:src/display.c **** 
 6114              		.loc 1 1780 16 view .LVU1954
 6115 0670 0026     		movs	r6, #0
ARM GAS  /tmp/ccW65oEM.s 			page 193


 6116              	.LVL664:
 6117              	.L453:
1782:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6118              		.loc 1 1782 2 is_stmt 1 view .LVU1955
1782:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6119              		.loc 1 1782 6 is_stmt 0 view .LVU1956
 6120 0672 0021     		movs	r1, #0
 6121 0674 4046     		mov	r0, r8
 6122 0676 FFF7FEFF 		bl	find_char
 6123              	.LVL665:
1783:src/display.c **** 
 6124              		.loc 1 1783 2 is_stmt 1 view .LVU1957
1783:src/display.c **** 
 6125              		.loc 1 1783 23 is_stmt 0 view .LVU1958
 6126 067a A0EB0802 		sub	r2, r0, r8
1783:src/display.c **** 
 6127              		.loc 1 1783 2 view .LVU1959
 6128 067e C2F12202 		rsb	r2, r2, #34
 6129 0682 3021     		movs	r1, #48
 6130 0684 FFF7FEFF 		bl	xset
 6131              	.LVL666:
1785:src/display.c **** 	  separator_mode = SEP_COMMA;
 6132              		.loc 1 1785 2 is_stmt 1 view .LVU1960
1785:src/display.c **** 	  separator_mode = SEP_COMMA;
 6133              		.loc 1 1785 18 is_stmt 0 view .LVU1961
 6134 0688 B14A     		ldr	r2, .L680
1796:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6135              		.loc 1 1796 6 view .LVU1962
 6136 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1785:src/display.c **** 	  separator_mode = SEP_COMMA;
 6137              		.loc 1 1785 5 view .LVU1963
 6138 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1793:src/display.c **** 	}
 6139              		.loc 1 1793 18 view .LVU1964
 6140 0690 002A     		cmp	r2, #0
 6141 0692 15BF     		itete	ne
 6142 0694 4FF0020A 		movne	r10, #2
 6143 0698 2C27     		moveq	r7, #44
 6144 069a 2E27     		movne	r7, #46
 6145              	.LVL667:
1793:src/display.c **** 	}
 6146              		.loc 1 1793 18 view .LVU1965
 6147 069c 2E25     		moveq	r5, #46
 6148 069e 18BF     		it	ne
 6149 06a0 2C25     		movne	r5, #44
 6150              	.LVL668:
1796:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6151              		.loc 1 1796 2 is_stmt 1 view .LVU1966
1796:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6152              		.loc 1 1796 5 is_stmt 0 view .LVU1967
 6153 06a2 13F0380F 		tst	r3, #56
 6154 06a6 40F0C880 		bne	.L675
1823:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6155              		.loc 1 1823 4 is_stmt 1 view .LVU1968
 6156              	.LVL669:
1824:src/display.c **** 	  x[1] = decimal_mark;
 6157              		.loc 1 1824 4 view .LVU1969
ARM GAS  /tmp/ccW65oEM.s 			page 194


 6158 06aa 1022     		movs	r2, #16
 6159 06ac 08F10101 		add	r1, r8, #1
 6160 06b0 08F10200 		add	r0, r8, #2
 6161 06b4 FFF7FEFF 		bl	xcopy
 6162              	.LVL670:
1825:src/display.c **** 	  if (grouping) {
 6163              		.loc 1 1825 4 view .LVU1970
1827:src/display.c **** 	    x[5] = thousands_sep;
 6164              		.loc 1 1827 6 is_stmt 0 view .LVU1971
 6165 06b8 0D22     		movs	r2, #13
 6166 06ba 08F10501 		add	r1, r8, #5
 6167 06be 08F10600 		add	r0, r8, #6
1825:src/display.c **** 	  if (grouping) {
 6168              		.loc 1 1825 9 view .LVU1972
 6169 06c2 88F80150 		strb	r5, [r8, #1]
1826:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6170              		.loc 1 1826 4 is_stmt 1 view .LVU1973
1827:src/display.c **** 	    x[5] = thousands_sep;
 6171              		.loc 1 1827 6 view .LVU1974
 6172 06c6 FFF7FEFF 		bl	xcopy
 6173              	.LVL671:
1828:src/display.c **** 	    x += 9;
 6174              		.loc 1 1828 6 view .LVU1975
1829:src/display.c **** 	  }
 6175              		.loc 1 1829 8 is_stmt 0 view .LVU1976
 6176 06ca 08F10905 		add	r5, r8, #9
 6177              	.LVL672:
1828:src/display.c **** 	    x += 9;
 6178              		.loc 1 1828 11 view .LVU1977
 6179 06ce 88F80570 		strb	r7, [r8, #5]
1829:src/display.c **** 	  }
 6180              		.loc 1 1829 6 is_stmt 1 view .LVU1978
 6181              	.LVL673:
1832:src/display.c **** 	    if (exp < 0) {
 6182              		.loc 1 1832 4 view .LVU1979
1832:src/display.c **** 	    if (exp < 0) {
 6183              		.loc 1 1832 7 is_stmt 0 view .LVU1980
 6184 06d2 002C     		cmp	r4, #0
 6185 06d4 00F0F380 		beq	.L457
1833:src/display.c **** 	      x[9] = '-';
 6186              		.loc 1 1833 6 is_stmt 1 view .LVU1981
1833:src/display.c **** 	      x[9] = '-';
 6187              		.loc 1 1833 9 is_stmt 0 view .LVU1982
 6188 06d8 019B     		ldr	r3, [sp, #4]
1841:src/display.c **** 	  }
 6189              		.loc 1 1841 18 view .LVU1983
 6190 06da 9E49     		ldr	r1, .L680+4
1833:src/display.c **** 	      x[9] = '-';
 6191              		.loc 1 1833 9 view .LVU1984
 6192 06dc 002B     		cmp	r3, #0
1834:src/display.c **** 	      exp = -exp;
 6193              		.loc 1 1834 8 is_stmt 1 view .LVU1985
1835:src/display.c **** 	    }
 6194              		.loc 1 1835 8 view .LVU1986
1835:src/display.c **** 	    }
 6195              		.loc 1 1835 12 is_stmt 0 view .LVU1987
 6196 06de BCBF     		itt	lt
ARM GAS  /tmp/ccW65oEM.s 			page 195


 6197 06e0 5B42     		rsblt	r3, r3, #0
 6198 06e2 0193     		strlt	r3, [sp, #4]
 6199              	.LVL674:
1839:src/display.c **** 	    x[10] = '0' + j;
 6200              		.loc 1 1839 8 view .LVU1988
 6201 06e4 0198     		ldr	r0, [sp, #4]
 6202 06e6 9C4B     		ldr	r3, .L680+8
1834:src/display.c **** 	      exp = -exp;
 6203              		.loc 1 1834 13 view .LVU1989
 6204 06e8 B4BF     		ite	lt
 6205 06ea 2D22     		movlt	r2, #45
1838:src/display.c **** 	    j = exp / 1000;
 6206              		.loc 1 1838 13 view .LVU1990
 6207 06ec 2022     		movge	r2, #32
 6208 06ee 88F81220 		strb	r2, [r8, #18]
1839:src/display.c **** 	    x[10] = '0' + j;
 6209              		.loc 1 1839 6 is_stmt 1 view .LVU1991
1839:src/display.c **** 	    x[10] = '0' + j;
 6210              		.loc 1 1839 8 is_stmt 0 view .LVU1992
 6211 06f2 0246     		mov	r2, r0
 6212 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6213 06f8 9B09     		lsrs	r3, r3, #6
 6214              	.LVL675:
1840:src/display.c **** 	    exp -= 1000 * j;
 6215              		.loc 1 1840 6 is_stmt 1 view .LVU1993
1840:src/display.c **** 	    exp -= 1000 * j;
 6216              		.loc 1 1840 18 is_stmt 0 view .LVU1994
 6217 06fa 03F13002 		add	r2, r3, #48
1841:src/display.c **** 	  }
 6218              		.loc 1 1841 10 view .LVU1995
 6219 06fe 01FB0303 		mla	r3, r1, r3, r0
 6220              	.LVL676:
1841:src/display.c **** 	  }
 6221              		.loc 1 1841 10 view .LVU1996
 6222 0702 0193     		str	r3, [sp, #4]
 6223              	.LVL677:
1840:src/display.c **** 	    exp -= 1000 * j;
 6224              		.loc 1 1840 12 view .LVU1997
 6225 0704 88F81320 		strb	r2, [r8, #19]
1841:src/display.c **** 	  }
 6226              		.loc 1 1841 6 is_stmt 1 view .LVU1998
 6227              	.LVL678:
 6228              	.L459:
1847:src/display.c **** 	  *x = 0;
 6229              		.loc 1 1847 4 view .LVU1999
 6230 0708 0B22     		movs	r2, #11
 6231 070a 2946     		mov	r1, r5
 6232 070c 08F10A00 		add	r0, r8, #10
 6233 0710 FFF7FEFF 		bl	xcopy
 6234              	.LVL679:
1848:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6235              		.loc 1 1848 4 view .LVU2000
1848:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6236              		.loc 1 1848 7 is_stmt 0 view .LVU2001
 6237 0714 0022     		movs	r2, #0
1849:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6238              		.loc 1 1849 4 view .LVU2002
ARM GAS  /tmp/ccW65oEM.s 			page 196


 6239 0716 0198     		ldr	r0, [sp, #4]
1848:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6240              		.loc 1 1848 7 view .LVU2003
 6241 0718 88F80920 		strb	r2, [r8, #9]
1849:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6242              		.loc 1 1849 4 is_stmt 1 view .LVU2004
 6243 071c 0121     		movs	r1, #1
 6244 071e FFF7FEFF 		bl	set_exp
 6245              	.LVL680:
1850:src/display.c **** 	}
 6246              		.loc 1 1850 4 view .LVU2005
1850:src/display.c **** 	}
 6247              		.loc 1 1850 4 is_stmt 0 view .LVU2006
 6248 0722 A8EB0606 		sub	r6, r8, r6
 6249              	.LVL681:
1850:src/display.c **** 	}
 6250              		.loc 1 1850 6 view .LVU2007
 6251 0726 0924     		movs	r4, #9
 6252              	.LVL682:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6253              		.loc 1 1853 11 is_stmt 1 view .LVU2008
 6254 0728 9AE0     		b	.L460
 6255              	.LVL683:
 6256              	.L531:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6257              		.loc 1 1853 11 is_stmt 0 view .LVU2009
 6258              	.LBE399:
 6259              	.LBE398:
2169:src/display.c **** 	      obp--;
 6260              		.loc 1 2169 12 is_stmt 1 view .LVU2010
 6261 072a 4345     		cmp	r3, r8
 6262 072c 88BF     		it	hi
 6263 072e 1A46     		movhi	r2, r3
 6264 0730 7FF6B6AD 		bls	.L509
 6265              	.L533:
2170:src/display.c **** 	      odig--;
 6266              		.loc 1 2170 8 discriminator 1 view .LVU2011
 6267 0734 1346     		mov	r3, r2
 6268              	.LVL684:
2170:src/display.c **** 	      odig--;
 6269              		.loc 1 2170 8 is_stmt 0 discriminator 1 view .LVU2012
 6270 0736 013A     		subs	r2, r2, #1
 6271              	.LVL685:
2171:src/display.c **** 	    }
 6272              		.loc 1 2171 8 is_stmt 1 discriminator 1 view .LVU2013
2169:src/display.c **** 	      obp--;
 6273              		.loc 1 2169 21 is_stmt 0 discriminator 1 view .LVU2014
 6274 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6275 073c 3029     		cmp	r1, #48
 6276 073e 7FF4AFAD 		bne	.L509
2169:src/display.c **** 	      obp--;
 6277              		.loc 1 2169 12 view .LVU2015
 6278 0742 9045     		cmp	r8, r2
2171:src/display.c **** 	    }
 6279              		.loc 1 2171 12 view .LVU2016
 6280 0744 07F1FF37 		add	r7, r7, #-1
 6281              	.LVL686:
ARM GAS  /tmp/ccW65oEM.s 			page 197


2169:src/display.c **** 	      obp--;
 6282              		.loc 1 2169 12 is_stmt 1 view .LVU2017
 6283 0748 F4D1     		bne	.L533
 6284 074a 4346     		mov	r3, r8
 6285 074c A8E5     		b	.L509
 6286              	.LVL687:
 6287              	.L520:
2154:src/display.c **** 	    odig++;
 6288              		.loc 1 2154 6 view .LVU2018
2155:src/display.c **** 	    *obp++ = '.';
 6289              		.loc 1 2155 6 view .LVU2019
2156:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6290              		.loc 1 2156 6 view .LVU2020
2154:src/display.c **** 	    odig++;
 6291              		.loc 1 2154 13 is_stmt 0 view .LVU2021
 6292 074e 42F63063 		movw	r3, #11824
 6293 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2157:src/display.c **** 	      *obp++ = '0';
 6294              		.loc 1 2157 6 is_stmt 1 view .LVU2022
 6295              	.LVL688:
2157:src/display.c **** 	      *obp++ = '0';
 6296              		.loc 1 2157 20 view .LVU2023
2157:src/display.c **** 	      *obp++ = '0';
 6297              		.loc 1 2157 6 is_stmt 0 view .LVU2024
 6298 0756 6B1C     		adds	r3, r5, #1
 6299              	.LVL689:
2157:src/display.c **** 	      *obp++ = '0';
 6300              		.loc 1 2157 6 view .LVU2025
 6301 0758 00F0F280 		beq	.L578
 6302 075c C5F10101 		rsb	r1, r5, #1
2156:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6303              		.loc 1 2156 10 view .LVU2026
 6304 0760 0DF11603 		add	r3, sp, #22
 6305              	.LVL690:
2156:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6306              		.loc 1 2156 10 view .LVU2027
 6307 0764 4144     		add	r1, r1, r8
 6308 0766 1A46     		mov	r2, r3
2158:src/display.c **** 	      odig++;
 6309              		.loc 1 2158 15 view .LVU2028
 6310 0768 3020     		movs	r0, #48
 6311              	.LVL691:
 6312              	.L529:
2158:src/display.c **** 	      odig++;
 6313              		.loc 1 2158 8 is_stmt 1 discriminator 3 view .LVU2029
2158:src/display.c **** 	      odig++;
 6314              		.loc 1 2158 15 is_stmt 0 discriminator 3 view .LVU2030
 6315 076a 02F8010B 		strb	r0, [r2], #1
 6316              	.LVL692:
2159:src/display.c **** 	      dd--;
 6317              		.loc 1 2159 8 is_stmt 1 discriminator 3 view .LVU2031
2160:src/display.c **** 	    }
 6318              		.loc 1 2160 8 discriminator 3 view .LVU2032
2157:src/display.c **** 	      *obp++ = '0';
 6319              		.loc 1 2157 25 discriminator 3 view .LVU2033
2157:src/display.c **** 	      *obp++ = '0';
 6320              		.loc 1 2157 20 discriminator 3 view .LVU2034
ARM GAS  /tmp/ccW65oEM.s 			page 198


2157:src/display.c **** 	      *obp++ = '0';
 6321              		.loc 1 2157 6 is_stmt 0 discriminator 3 view .LVU2035
 6322 076e 8A42     		cmp	r2, r1
 6323 0770 FBD1     		bne	.L529
 6324 0772 AA44     		add	r10, r10, r5
 6325 0774 EA43     		mvns	r2, r5
 6326              	.LVL693:
2157:src/display.c **** 	      *obp++ = '0';
 6327              		.loc 1 2157 6 discriminator 3 view .LVU2036
 6328 0776 0AF1010A 		add	r10, r10, #1
 6329 077a 1344     		add	r3, r3, r2
 6330 077c 6F42     		rsbs	r7, r5, #0
 6331              	.L528:
 6332              	.LVL694:
2162:src/display.c **** 	      *obp++ = *p++;
 6333              		.loc 1 2162 12 is_stmt 1 view .LVU2037
 6334 077e BAF1000F 		cmp	r10, #0
2162:src/display.c **** 	      *obp++ = *p++;
 6335              		.loc 1 2162 15 is_stmt 0 view .LVU2038
 6336 0782 0AF1FF32 		add	r2, r10, #-1
 6337              	.LVL695:
2162:src/display.c **** 	      *obp++ = *p++;
 6338              		.loc 1 2162 12 view .LVU2039
 6339 0786 7FF708AF 		ble	.L525
 6340 078a 9A44     		add	r10, r10, r3
 6341 078c 0AF1FF30 		add	r0, r10, #-1
 6342 0790 013B     		subs	r3, r3, #1
 6343              	.LVL696:
 6344              	.L530:
2163:src/display.c **** 	      odig++;
 6345              		.loc 1 2163 8 is_stmt 1 view .LVU2040
2163:src/display.c **** 	      odig++;
 6346              		.loc 1 2163 15 is_stmt 0 view .LVU2041
 6347 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6348              	.LVL697:
2163:src/display.c **** 	      odig++;
 6349              		.loc 1 2163 15 view .LVU2042
 6350 0796 03F8011F 		strb	r1, [r3, #1]!
2164:src/display.c **** 	    }
 6351              		.loc 1 2164 8 is_stmt 1 view .LVU2043
2162:src/display.c **** 	      *obp++ = *p++;
 6352              		.loc 1 2162 12 view .LVU2044
2162:src/display.c **** 	      *obp++ = *p++;
 6353              		.loc 1 2162 12 is_stmt 0 view .LVU2045
 6354 079a 8342     		cmp	r3, r0
 6355 079c F9D1     		bne	.L530
 6356              	.LVL698:
2162:src/display.c **** 	      *obp++ = *p++;
 6357              		.loc 1 2162 12 view .LVU2046
 6358 079e 0137     		adds	r7, r7, #1
 6359 07a0 1744     		add	r7, r7, r2
 6360 07a2 5346     		mov	r3, r10
 6361 07a4 F9E6     		b	.L525
 6362              	.LVL699:
 6363              	.L535:
2180:src/display.c **** 	    odig++;
 6364              		.loc 1 2180 6 is_stmt 1 view .LVU2047
ARM GAS  /tmp/ccW65oEM.s 			page 199


2180:src/display.c **** 	    odig++;
 6365              		.loc 1 2180 13 is_stmt 0 view .LVU2048
 6366 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6367 07aa 8DF81430 		strb	r3, [sp, #20]
2181:src/display.c **** 	    dd--;
 6368              		.loc 1 2181 6 is_stmt 1 view .LVU2049
 6369              	.LVL700:
2182:src/display.c **** 	    exp--;
 6370              		.loc 1 2182 6 view .LVU2050
2182:src/display.c **** 	    exp--;
 6371              		.loc 1 2182 8 is_stmt 0 view .LVU2051
 6372 07ae 0AF1FF3A 		add	r10, r10, #-1
 6373              	.LVL701:
2183:src/display.c **** 	  case -2:
 6374              		.loc 1 2183 6 is_stmt 1 view .LVU2052
2183:src/display.c **** 	  case -2:
 6375              		.loc 1 2183 9 is_stmt 0 view .LVU2053
 6376 07b2 013D     		subs	r5, r5, #1
 6377              	.LVL702:
2183:src/display.c **** 	  case -2:
 6378              		.loc 1 2183 9 view .LVU2054
 6379 07b4 0327     		movs	r7, #3
2180:src/display.c **** 	    odig++;
 6380              		.loc 1 2180 17 view .LVU2055
 6381 07b6 0DF14909 		add	r9, sp, #73
 6382              	.LVL703:
2180:src/display.c **** 	    odig++;
 6383              		.loc 1 2180 10 view .LVU2056
 6384 07ba 0DF11501 		add	r1, sp, #21
 6385              	.LVL704:
2180:src/display.c **** 	    odig++;
 6386              		.loc 1 2180 10 view .LVU2057
 6387 07be A6E6     		b	.L537
 6388              	.LVL705:
 6389              	.L483:
2045:src/display.c **** 	    /* We might have push the fixed decimals off the
 6390              		.loc 1 2045 6 is_stmt 1 view .LVU2058
2049:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6391              		.loc 1 2049 6 view .LVU2059
2049:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6392              		.loc 1 2049 23 is_stmt 0 view .LVU2060
 6393 07c0 05EB0A03 		add	r3, r5, r10
2049:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6394              		.loc 1 2049 9 view .LVU2061
 6395 07c4 9E42     		cmp	r6, r3
2050:src/display.c **** 	  }
 6396              		.loc 1 2050 8 is_stmt 1 view .LVU2062
2050:src/display.c **** 	  }
 6397              		.loc 1 2050 30 is_stmt 0 view .LVU2063
 6398 07c6 DCBF     		itt	le
 6399 07c8 06F1FF3A 		addle	r10, r6, #-1
 6400              	.LVL706:
2050:src/display.c **** 	  }
 6401              		.loc 1 2050 11 view .LVU2064
 6402 07cc AAEB050A 		suble	r10, r10, r5
 6403              	.LVL707:
2050:src/display.c **** 	  }
ARM GAS  /tmp/ccW65oEM.s 			page 200


 6404              		.loc 1 2050 11 view .LVU2065
 6405 07d0 2A46     		mov	r2, r5
 6406 07d2 BAE4     		b	.L481
 6407              	.LVL708:
 6408              	.L575:
2086:src/display.c **** 	    case -1:
 6409              		.loc 1 2086 24 view .LVU2066
 6410 07d4 0227     		movs	r7, #2
 6411 07d6 4046     		mov	r0, r8
 6412              	.LVL709:
 6413              	.L508:
2095:src/display.c **** 	      odig++;
 6414              		.loc 1 2095 8 is_stmt 1 view .LVU2067
2095:src/display.c **** 	      odig++;
 6415              		.loc 1 2095 15 is_stmt 0 view .LVU2068
 6416 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6417              	.LVL710:
2095:src/display.c **** 	      odig++;
 6418              		.loc 1 2095 15 view .LVU2069
 6419 07dc 00F8013B 		strb	r3, [r0], #1
 6420              	.LVL711:
2096:src/display.c **** 	      dd--;
 6421              		.loc 1 2096 8 is_stmt 1 view .LVU2070
2097:src/display.c **** 	      exp--;
 6422              		.loc 1 2097 8 view .LVU2071
2098:src/display.c **** 	    case 0:
 6423              		.loc 1 2098 8 view .LVU2072
2098:src/display.c **** 	    case 0:
 6424              		.loc 1 2098 11 is_stmt 0 view .LVU2073
 6425 07e0 013D     		subs	r5, r5, #1
 6426              	.LVL712:
 6427              	.L505:
2100:src/display.c **** 	    };
 6428              		.loc 1 2100 8 is_stmt 1 view .LVU2074
2101:src/display.c **** 	    *obp++ = *p++;
 6429              		.loc 1 2101 7 view .LVU2075
2102:src/display.c **** 	    odig++;
 6430              		.loc 1 2102 6 view .LVU2076
2102:src/display.c **** 	    odig++;
 6431              		.loc 1 2102 17 is_stmt 0 view .LVU2077
 6432 07e2 4946     		mov	r1, r9
 6433              	.LVL713:
2102:src/display.c **** 	    odig++;
 6434              		.loc 1 2102 13 view .LVU2078
 6435 07e4 0346     		mov	r3, r0
 6436 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6437              	.LVL714:
2102:src/display.c **** 	    odig++;
 6438              		.loc 1 2102 13 view .LVU2079
 6439 07ea 03F802CB 		strb	ip, [r3], #2
2103:src/display.c **** 	    *obp++ = '.';
 6440              		.loc 1 2103 6 is_stmt 1 view .LVU2080
2104:src/display.c **** 	    for (i=1; i<count; i++) {
 6441              		.loc 1 2104 6 view .LVU2081
 6442              	.LVL715:
2105:src/display.c **** 	      *obp++ = *p++;
 6443              		.loc 1 2105 6 is_stmt 0 view .LVU2082
ARM GAS  /tmp/ccW65oEM.s 			page 201


 6444 07ee 012A     		cmp	r2, #1
2104:src/display.c **** 	    for (i=1; i<count; i++) {
 6445              		.loc 1 2104 13 view .LVU2083
 6446 07f0 4FF02E0C 		mov	ip, #46
 6447 07f4 80F801C0 		strb	ip, [r0, #1]
2105:src/display.c **** 	      *obp++ = *p++;
 6448              		.loc 1 2105 6 is_stmt 1 view .LVU2084
 6449              	.LVL716:
2105:src/display.c **** 	      *obp++ = *p++;
 6450              		.loc 1 2105 16 view .LVU2085
2105:src/display.c **** 	      *obp++ = *p++;
 6451              		.loc 1 2105 6 is_stmt 0 view .LVU2086
 6452 07f8 53DD     		ble	.L576
2105:src/display.c **** 	      *obp++ = *p++;
 6453              		.loc 1 2105 6 view .LVU2087
 6454 07fa 0130     		adds	r0, r0, #1
 6455 07fc 9144     		add	r9, r9, r2
 6456              	.LVL717:
 6457              	.L510:
2106:src/display.c **** 	      odig++;
 6458              		.loc 1 2106 8 is_stmt 1 discriminator 3 view .LVU2088
2106:src/display.c **** 	      odig++;
 6459              		.loc 1 2106 15 is_stmt 0 discriminator 3 view .LVU2089
 6460 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6461              	.LVL718:
2106:src/display.c **** 	      odig++;
 6462              		.loc 1 2106 15 discriminator 3 view .LVU2090
 6463 0802 00F801CF 		strb	ip, [r0, #1]!
2107:src/display.c **** 	    }
 6464              		.loc 1 2107 8 is_stmt 1 discriminator 3 view .LVU2091
2105:src/display.c **** 	      *obp++ = *p++;
 6465              		.loc 1 2105 25 discriminator 3 view .LVU2092
2105:src/display.c **** 	      *obp++ = *p++;
 6466              		.loc 1 2105 16 discriminator 3 view .LVU2093
2105:src/display.c **** 	      *obp++ = *p++;
 6467              		.loc 1 2105 6 is_stmt 0 discriminator 3 view .LVU2094
 6468 0806 4945     		cmp	r1, r9
 6469 0808 F9D1     		bne	.L510
 6470 080a 013A     		subs	r2, r2, #1
 6471              	.LVL719:
2105:src/display.c **** 	      *obp++ = *p++;
 6472              		.loc 1 2105 6 discriminator 3 view .LVU2095
 6473 080c 1344     		add	r3, r3, r2
 6474 080e 1744     		add	r7, r7, r2
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6475              		.loc 1 2109 15 view .LVU2096
 6476 0810 4FF0010B 		mov	fp, #1
 6477 0814 44E5     		b	.L509
 6478              	.LVL720:
 6479              	.L506:
2089:src/display.c **** 	      odig++;
 6480              		.loc 1 2089 8 is_stmt 1 view .LVU2097
2089:src/display.c **** 	      odig++;
 6481              		.loc 1 2089 15 is_stmt 0 view .LVU2098
 6482 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6483 081a 8DF81430 		strb	r3, [sp, #20]
2090:src/display.c **** 	      dd--;
ARM GAS  /tmp/ccW65oEM.s 			page 202


 6484              		.loc 1 2090 8 is_stmt 1 view .LVU2099
 6485              	.LVL721:
2091:src/display.c **** 	      exp--;
 6486              		.loc 1 2091 8 view .LVU2100
2092:src/display.c **** 	    case -2:
 6487              		.loc 1 2092 8 view .LVU2101
2092:src/display.c **** 	    case -2:
 6488              		.loc 1 2092 11 is_stmt 0 view .LVU2102
 6489 081e 013D     		subs	r5, r5, #1
 6490              	.LVL722:
2092:src/display.c **** 	    case -2:
 6491              		.loc 1 2092 11 view .LVU2103
 6492 0820 0327     		movs	r7, #3
2089:src/display.c **** 	      odig++;
 6493              		.loc 1 2089 19 view .LVU2104
 6494 0822 0DF14909 		add	r9, sp, #73
 6495              	.LVL723:
2089:src/display.c **** 	      odig++;
 6496              		.loc 1 2089 12 view .LVU2105
 6497 0826 0DF11500 		add	r0, sp, #21
 6498              	.LVL724:
2089:src/display.c **** 	      odig++;
 6499              		.loc 1 2089 12 view .LVU2106
 6500 082a D5E7     		b	.L508
 6501              	.LVL725:
 6502              	.L544:
2231:src/display.c **** 	  }
 6503              		.loc 1 2231 8 is_stmt 1 view .LVU2107
 6504 082c 2D21     		movs	r1, #45
 6505 082e A6F10900 		sub	r0, r6, #9
 6506 0832 FFF7FEFF 		bl	set_dig
 6507              	.LVL726:
 6508 0836 019B     		ldr	r3, [sp, #4]
 6509 0838 43E5     		b	.L540
 6510              	.LVL727:
 6511              	.L675:
 6512              	.LBB408:
 6513              	.LBB406:
 6514              	.LBB400:
1798:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6515              		.loc 1 1798 4 view .LVU2108
1801:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6516              		.loc 1 1801 4 view .LVU2109
1801:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6517              		.loc 1 1801 14 is_stmt 0 view .LVU2110
 6518 083a 08F10306 		add	r6, r8, #3
 6519              	.LVL728:
1802:src/display.c **** 	  if (grouping) {
 6520              		.loc 1 1802 4 is_stmt 1 view .LVU2111
 6521 083e 4749     		ldr	r1, .L680+12
 6522 0840 0D22     		movs	r2, #13
 6523 0842 3046     		mov	r0, r6
 6524 0844 FFF7FEFF 		bl	xcopy
 6525              	.LVL729:
1803:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6526              		.loc 1 1803 4 view .LVU2112
1804:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
ARM GAS  /tmp/ccW65oEM.s 			page 203


 6527              		.loc 1 1804 6 view .LVU2113
 6528 0848 1322     		movs	r2, #19
 6529 084a 08EB0201 		add	r1, r8, r2
 6530 084e 08F11400 		add	r0, r8, #20
 6531 0852 FFF7FEFF 		bl	xcopy
 6532              	.LVL730:
1805:src/display.c **** 	    x += 3 + 13 + 7;
 6533              		.loc 1 1805 6 view .LVU2114
1806:src/display.c **** 	  }
 6534              		.loc 1 1806 8 is_stmt 0 view .LVU2115
 6535 0856 08F11705 		add	r5, r8, #23
 6536              	.LVL731:
1805:src/display.c **** 	    x += 3 + 13 + 7;
 6537              		.loc 1 1805 24 view .LVU2116
 6538 085a 88F81370 		strb	r7, [r8, #19]
1806:src/display.c **** 	  }
 6539              		.loc 1 1806 6 is_stmt 1 view .LVU2117
 6540              	.LVL732:
1819:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6541              		.loc 1 1819 4 view .LVU2118
1820:src/display.c **** 	}
 6542              		.loc 1 1820 4 view .LVU2119
1820:src/display.c **** 	}
 6543              		.loc 1 1820 6 is_stmt 0 view .LVU2120
 6544 085e 1B24     		movs	r4, #27
 6545              	.LVL733:
 6546              	.L460:
1820:src/display.c **** 	}
 6547              		.loc 1 1820 6 view .LVU2121
 6548              	.LBE400:
1854:src/display.c **** 	  }
 6549              		.loc 1 1854 6 is_stmt 1 view .LVU2122
 6550              	.LBB401:
 6551              	.LBI401:
 360:src/display.c ****   if (sep == SEP_NONE)
 6552              		.loc 1 360 14 view .LVU2123
 6553              	.LBB402:
 361:src/display.c ****     return res;
 6554              		.loc 1 361 3 view .LVU2124
 363:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6555              		.loc 1 363 3 view .LVU2125
 6556 0860 2046     		mov	r0, r4
 6557 0862 5146     		mov	r1, r10
 6558              	.LBE402:
 6559              	.LBE401:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6560              		.loc 1 1853 38 is_stmt 0 view .LVU2126
 6561 0864 1B34     		adds	r4, r4, #27
 6562              	.LVL734:
 6563              	.LBB404:
 6564              	.LBB403:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6565              		.loc 1 1853 38 view .LVU2127
 6566 0866 FFF7FEFF 		bl	set_separator.part.0
 6567              	.LVL735:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6568              		.loc 1 1853 38 view .LVU2128
ARM GAS  /tmp/ccW65oEM.s 			page 204


 6569              	.LBE403:
 6570              	.LBE404:
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6571              		.loc 1 1853 36 is_stmt 1 view .LVU2129
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6572              		.loc 1 1853 11 view .LVU2130
1853:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6573              		.loc 1 1853 4 is_stmt 0 view .LVU2131
 6574 086a 512C     		cmp	r4, #81
 6575 086c F8DD     		ble	.L460
 6576 086e 6C1E     		subs	r4, r5, #1
 6577              	.LVL736:
 6578              	.L462:
1859:src/display.c **** 
 6579              		.loc 1 1859 4 is_stmt 1 view .LVU2132
 6580 0870 5846     		mov	r0, fp
 6581 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1858:src/display.c **** 	  set_dig(j, x[i]);
 6582              		.loc 1 1858 33 is_stmt 0 view .LVU2133
 6583 0876 0BF1090B 		add	fp, fp, #9
 6584              	.LVL737:
1859:src/display.c **** 
 6585              		.loc 1 1859 4 view .LVU2134
 6586 087a FFF7FEFF 		bl	set_dig
 6587              	.LVL738:
1858:src/display.c **** 	  set_dig(j, x[i]);
 6588              		.loc 1 1858 26 is_stmt 1 view .LVU2135
1858:src/display.c **** 	  set_dig(j, x[i]);
 6589              		.loc 1 1858 18 view .LVU2136
1858:src/display.c **** 	  set_dig(j, x[i]);
 6590              		.loc 1 1858 2 is_stmt 0 view .LVU2137
 6591 087e BBF16C0F 		cmp	fp, #108
 6592 0882 F5D1     		bne	.L462
1861:src/display.c **** 	set_status(upper_str - negative);
 6593              		.loc 1 1861 2 is_stmt 1 view .LVU2138
1861:src/display.c **** 	set_status(upper_str - negative);
 6594              		.loc 1 1861 5 is_stmt 0 view .LVU2139
 6595 0884 0023     		movs	r3, #0
1862:src/display.c ****       }
 6596              		.loc 1 1862 2 view .LVU2140
 6597 0886 3046     		mov	r0, r6
1861:src/display.c **** 	set_status(upper_str - negative);
 6598              		.loc 1 1861 5 view .LVU2141
 6599 0888 2B70     		strb	r3, [r5]
1862:src/display.c ****       }
 6600              		.loc 1 1862 2 is_stmt 1 view .LVU2142
 6601 088a FFF7FEFF 		bl	set_status
 6602              	.LVL739:
1863:src/display.c **** 
 6603              		.loc 1 1863 7 is_stmt 0 view .LVU2143
 6604 088e 43E5     		b	.L441
 6605              	.LVL740:
 6606              	.L672:
1863:src/display.c **** 
 6607              		.loc 1 1863 7 view .LVU2144
 6608              	.LBE406:
 6609              	.LBE408:
ARM GAS  /tmp/ccW65oEM.s 			page 205


1919:src/display.c **** 	      return;
 6610              		.loc 1 1919 8 is_stmt 1 view .LVU2145
 6611 0890 3046     		mov	r0, r6
 6612 0892 FFF7FEFF 		bl	set_x_hms
 6613              	.LVL741:
1920:src/display.c **** 	    }
 6614              		.loc 1 1920 8 view .LVU2146
 6615 0896 3FE5     		b	.L441
 6616              	.LVL742:
 6617              	.L573:
2081:src/display.c **** 	  if (count != *display_digits)
 6618              		.loc 1 2081 15 is_stmt 0 view .LVU2147
 6619 0898 3246     		mov	r2, r6
 6620 089a A3E4     		b	.L501
 6621              	.LVL743:
 6622              	.L574:
2086:src/display.c **** 	    case -1:
 6623              		.loc 1 2086 24 view .LVU2148
 6624 089c 0127     		movs	r7, #1
 6625 089e 4046     		mov	r0, r8
 6626 08a0 9FE7     		b	.L505
 6627              	.LVL744:
 6628              	.L576:
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6629              		.loc 1 2109 15 view .LVU2149
 6630 08a2 4FF0010B 		mov	fp, #1
 6631 08a6 FBE4     		b	.L509
 6632              	.LVL745:
 6633              	.L548:
 6634              	.LBB409:
 6635              	.LBB385:
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6636              		.loc 1 2109 15 view .LVU2150
 6637 08a8 3046     		mov	r0, r6
 6638 08aa 0193     		str	r3, [sp, #4]
 6639 08ac FFF7FEFF 		bl	set_separator.part.0
 6640              	.LVL746:
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6641              		.loc 1 2109 15 view .LVU2151
 6642 08b0 019B     		ldr	r3, [sp, #4]
 6643 08b2 0446     		mov	r4, r0
 6644              	.LVL747:
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6645              		.loc 1 2109 15 view .LVU2152
 6646 08b4 F9E5     		b	.L546
 6647              	.LVL748:
 6648              	.L486:
2109:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6649              		.loc 1 2109 15 view .LVU2153
 6650              	.LBE385:
 6651              	.LBE409:
2059:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6652              		.loc 1 2059 4 is_stmt 1 view .LVU2154
2059:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6653              		.loc 1 2059 7 is_stmt 0 view .LVU2155
 6654 08b6 4B45     		cmp	r3, r9
 6655 08b8 7FF460AC 		bne	.L557
ARM GAS  /tmp/ccW65oEM.s 			page 206


 6656 08bc 63E5     		b	.L558
 6657              	.LVL749:
 6658              	.L457:
 6659              	.LBB410:
 6660              	.LBB407:
1844:src/display.c **** 	    x[10] = '\0';
 6661              		.loc 1 1844 6 is_stmt 1 view .LVU2156
1845:src/display.c **** 	  }
 6662              		.loc 1 1845 6 view .LVU2157
1844:src/display.c **** 	    x[10] = '\0';
 6663              		.loc 1 1844 11 is_stmt 0 view .LVU2158
 6664 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6665 08c2 21E7     		b	.L459
 6666              	.LVL750:
 6667              	.L674:
 6668              	.LBB405:
1769:src/display.c **** 
 6669              		.loc 1 1769 4 is_stmt 1 view .LVU2159
1771:src/display.c **** 	  xcopy(x, small_minus, 4);
 6670              		.loc 1 1771 4 view .LVU2160
 6671 08c4 2222     		movs	r2, #34
 6672 08c6 0DF11501 		add	r1, sp, #21
 6673 08ca 06A8     		add	r0, sp, #24
 6674              	.LVL751:
1771:src/display.c **** 	  xcopy(x, small_minus, 4);
 6675              		.loc 1 1771 4 is_stmt 0 view .LVU2161
 6676 08cc FFF7FEFF 		bl	xcopy
 6677              	.LVL752:
1772:src/display.c **** 	  x += 4;
 6678              		.loc 1 1772 4 is_stmt 1 view .LVU2162
 6679 08d0 4046     		mov	r0, r8
 6680 08d2 2349     		ldr	r1, .L680+16
 6681 08d4 0422     		movs	r2, #4
 6682 08d6 FFF7FEFF 		bl	xcopy
 6683              	.LVL753:
1773:src/display.c **** 	  negative = 4;
 6684              		.loc 1 1773 4 view .LVU2163
1774:src/display.c **** #else
 6685              		.loc 1 1774 4 view .LVU2164
1773:src/display.c **** 	  negative = 4;
 6686              		.loc 1 1773 6 is_stmt 0 view .LVU2165
 6687 08da 0DF11808 		add	r8, sp, #24
 6688              	.LVL754:
1774:src/display.c **** #else
 6689              		.loc 1 1774 13 view .LVU2166
 6690 08de 0426     		movs	r6, #4
 6691              	.LVL755:
1774:src/display.c **** #else
 6692              		.loc 1 1774 13 view .LVU2167
 6693              	.LBE405:
 6694 08e0 C7E6     		b	.L453
 6695              	.LVL756:
 6696              	.L511:
1774:src/display.c **** #else
 6697              		.loc 1 1774 13 view .LVU2168
 6698              	.LBE407:
 6699              	.LBE410:
ARM GAS  /tmp/ccW65oEM.s 			page 207


2125:src/display.c **** 	    odig++;
 6700              		.loc 1 2125 6 is_stmt 1 view .LVU2169
2126:src/display.c **** 	    *obp++ = '.';
 6701              		.loc 1 2126 6 view .LVU2170
2127:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6702              		.loc 1 2127 6 view .LVU2171
2125:src/display.c **** 	    odig++;
 6703              		.loc 1 2125 13 is_stmt 0 view .LVU2172
 6704 08e2 42F63063 		movw	r3, #11824
2128:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2128 6 view .LVU2173
 6706 08e6 691C     		adds	r1, r5, #1
2125:src/display.c **** 	    odig++;
 6707              		.loc 1 2125 13 view .LVU2174
 6708 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2128:src/display.c **** 	      *obp++ = '0';
 6709              		.loc 1 2128 6 is_stmt 1 view .LVU2175
 6710              	.LVL757:
2128:src/display.c **** 	      *obp++ = '0';
 6711              		.loc 1 2128 20 view .LVU2176
2128:src/display.c **** 	      *obp++ = '0';
 6712              		.loc 1 2128 6 is_stmt 0 view .LVU2177
 6713 08ec 2CD0     		beq	.L577
 6714 08ee C5F10100 		rsb	r0, r5, #1
2127:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6715              		.loc 1 2127 10 view .LVU2178
 6716 08f2 0DF11603 		add	r3, sp, #22
 6717              	.LVL758:
2127:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6718              		.loc 1 2127 10 view .LVU2179
 6719 08f6 4044     		add	r0, r0, r8
 6720 08f8 1946     		mov	r1, r3
 6721              	.LVL759:
2129:src/display.c **** 	      odig++;
 6722              		.loc 1 2129 15 view .LVU2180
 6723 08fa 3027     		movs	r7, #48
 6724              	.LVL760:
 6725              	.L518:
2129:src/display.c **** 	      odig++;
 6726              		.loc 1 2129 8 is_stmt 1 discriminator 3 view .LVU2181
2129:src/display.c **** 	      odig++;
 6727              		.loc 1 2129 15 is_stmt 0 discriminator 3 view .LVU2182
 6728 08fc 01F8017B 		strb	r7, [r1], #1
 6729              	.LVL761:
2130:src/display.c **** 	    }
 6730              		.loc 1 2130 8 is_stmt 1 discriminator 3 view .LVU2183
2128:src/display.c **** 	      *obp++ = '0';
 6731              		.loc 1 2128 25 discriminator 3 view .LVU2184
2128:src/display.c **** 	      *obp++ = '0';
 6732              		.loc 1 2128 20 discriminator 3 view .LVU2185
2128:src/display.c **** 	      *obp++ = '0';
 6733              		.loc 1 2128 6 is_stmt 0 discriminator 3 view .LVU2186
 6734 0900 8142     		cmp	r1, r0
 6735 0902 FBD1     		bne	.L518
 6736 0904 E943     		mvns	r1, r5
 6737              	.LVL762:
2128:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccW65oEM.s 			page 208


 6738              		.loc 1 2128 6 discriminator 3 view .LVU2187
 6739 0906 0B44     		add	r3, r3, r1
 6740 0908 6F42     		rsbs	r7, r5, #0
 6741              	.L517:
 6742              	.LVL763:
2132:src/display.c **** 	      *obp++ = *p++;
 6743              		.loc 1 2132 16 is_stmt 1 view .LVU2188
2132:src/display.c **** 	      *obp++ = *p++;
 6744              		.loc 1 2132 6 is_stmt 0 view .LVU2189
 6745 090a 002A     		cmp	r2, #0
 6746 090c 7FF7C8AC 		ble	.L509
 6747 0910 02F1FF3C 		add	ip, r2, #-1
 6748 0914 9C44     		add	ip, ip, r3
 6749 0916 591E     		subs	r1, r3, #1
 6750              	.LVL764:
 6751              	.L519:
2133:src/display.c **** 	      odig++;
 6752              		.loc 1 2133 8 is_stmt 1 discriminator 3 view .LVU2190
2133:src/display.c **** 	      odig++;
 6753              		.loc 1 2133 15 is_stmt 0 discriminator 3 view .LVU2191
 6754 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6755              	.LVL765:
2133:src/display.c **** 	      odig++;
 6756              		.loc 1 2133 15 discriminator 3 view .LVU2192
 6757 091c 01F8010F 		strb	r0, [r1, #1]!
2134:src/display.c **** 	    }
 6758              		.loc 1 2134 8 is_stmt 1 discriminator 3 view .LVU2193
2132:src/display.c **** 	      *obp++ = *p++;
 6759              		.loc 1 2132 25 discriminator 3 view .LVU2194
 6760              	.LVL766:
2132:src/display.c **** 	      *obp++ = *p++;
 6761              		.loc 1 2132 16 discriminator 3 view .LVU2195
2132:src/display.c **** 	      *obp++ = *p++;
 6762              		.loc 1 2132 6 is_stmt 0 discriminator 3 view .LVU2196
 6763 0920 8C45     		cmp	ip, r1
 6764 0922 F9D1     		bne	.L519
 6765              	.LVL767:
2132:src/display.c **** 	      *obp++ = *p++;
 6766              		.loc 1 2132 6 discriminator 3 view .LVU2197
 6767 0924 1344     		add	r3, r3, r2
 6768              	.LVL768:
2132:src/display.c **** 	      *obp++ = *p++;
 6769              		.loc 1 2132 6 discriminator 3 view .LVU2198
 6770 0926 1744     		add	r7, r7, r2
 6771 0928 BAE4     		b	.L509
 6772              	.LVL769:
 6773              	.L673:
2075:src/display.c **** 
 6774              		.loc 1 2075 2 is_stmt 1 view .LVU2199
2075:src/display.c **** 
 6775              		.loc 1 2075 40 is_stmt 0 view .LVU2200
 6776 092a 0AF10102 		add	r2, r10, #1
2075:src/display.c **** 
 6777              		.loc 1 2075 9 view .LVU2201
 6778 092e 09EB0203 		add	r3, r9, r2
 6779              	.LVL770:
2075:src/display.c **** 
ARM GAS  /tmp/ccW65oEM.s 			page 209


 6780              		.loc 1 2075 45 is_stmt 1 view .LVU2202
2075:src/display.c **** 
 6781              		.loc 1 2075 2 is_stmt 0 view .LVU2203
 6782 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6783 0936 002A     		cmp	r2, #0
 6784 0938 3FF496AC 		beq	.L655
2064:src/display.c **** 	      extra_digits = 0;
 6785              		.loc 1 2064 37 view .LVU2204
 6786 093c 0227     		movs	r7, #2
 6787 093e 2FE4     		b	.L556
 6788              	.LVL771:
 6789              	.L578:
2155:src/display.c **** 	    *obp++ = '.';
 6790              		.loc 1 2155 10 view .LVU2205
 6791 0940 0127     		movs	r7, #1
2156:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6792              		.loc 1 2156 10 view .LVU2206
 6793 0942 0DF11603 		add	r3, sp, #22
 6794              	.LVL772:
2156:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6795              		.loc 1 2156 10 view .LVU2207
 6796 0946 1AE7     		b	.L528
 6797              	.LVL773:
 6798              	.L577:
2126:src/display.c **** 	    *obp++ = '.';
 6799              		.loc 1 2126 10 view .LVU2208
 6800 0948 0127     		movs	r7, #1
2127:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6801              		.loc 1 2127 10 view .LVU2209
 6802 094a 0DF11603 		add	r3, sp, #22
 6803              	.LVL774:
2127:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6804              		.loc 1 2127 10 view .LVU2210
 6805 094e DCE7     		b	.L517
 6806              	.L681:
 6807              		.align	2
 6808              	.L680:
 6809 0950 00000000 		.word	.LANCHOR1
 6810 0954 18FCFFFF 		.word	-1000
 6811 0958 D34D6210 		.word	274877907
 6812 095c 00000000 		.word	.LANCHOR14
 6813 0960 00000000 		.word	.LANCHOR13
 6814              		.cfi_endproc
 6815              	.LFE27:
 6817              		.section	.text.set_x,"ax",%progbits
 6818              		.align	1
 6819              		.p2align 2,,3
 6820              		.syntax unified
 6821              		.thumb
 6822              		.thumb_func
 6823              		.fpu fpv4-sp-d16
 6825              	set_x:
 6826              	.LVL775:
 6827              	.LFB26:
1870:src/display.c **** 	decNumber z;
 6828              		.loc 1 1870 66 is_stmt 1 view -0
 6829              		.cfi_startproc
ARM GAS  /tmp/ccW65oEM.s 			page 210


 6830              		@ args = 0, pretend = 0, frame = 40
 6831              		@ frame_needed = 0, uses_anonymous_args = 0
1871:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6832              		.loc 1 1871 2 view .LVU2212
1872:src/display.c **** 
 6833              		.loc 1 1872 2 view .LVU2213
1870:src/display.c **** 	decNumber z;
 6834              		.loc 1 1870 66 is_stmt 0 view .LVU2214
 6835 0000 30B5     		push	{r4, r5, lr}
 6836              		.cfi_def_cfa_offset 12
 6837              		.cfi_offset 4, -12
 6838              		.cfi_offset 5, -8
 6839              		.cfi_offset 14, -4
 6840 0002 8BB0     		sub	sp, sp, #44
 6841              		.cfi_def_cfa_offset 56
1872:src/display.c **** 
 6842              		.loc 1 1872 6 view .LVU2215
 6843 0004 0C23     		movs	r3, #12
1875:src/display.c **** 	else
 6844              		.loc 1 1875 4 view .LVU2216
 6845 0006 01AD     		add	r5, sp, #4
1870:src/display.c **** 	decNumber z;
 6846              		.loc 1 1870 66 view .LVU2217
 6847 0008 0C46     		mov	r4, r1
1872:src/display.c **** 
 6848              		.loc 1 1872 6 view .LVU2218
 6849 000a 0093     		str	r3, [sp]
1874:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6850              		.loc 1 1874 2 is_stmt 1 view .LVU2219
1875:src/display.c **** 	else
 6851              		.loc 1 1875 4 is_stmt 0 view .LVU2220
 6852 000c 2946     		mov	r1, r5
 6853              	.LVL776:
1874:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6854              		.loc 1 1874 5 view .LVU2221
 6855 000e 42B1     		cbz	r2, .L683
1875:src/display.c **** 	else
 6856              		.loc 1 1875 4 is_stmt 1 view .LVU2222
 6857 0010 FFF7FEFF 		bl	decimal128ToNumber
 6858              	.LVL777:
1878:src/display.c ****       }
 6859              		.loc 1 1878 2 view .LVU2223
 6860 0014 2146     		mov	r1, r4
 6861 0016 2846     		mov	r0, r5
 6862 0018 6A46     		mov	r2, sp
 6863 001a FFF7FEFF 		bl	set_x_dn
 6864              	.LVL778:
1879:src/display.c **** 
 6865              		.loc 1 1879 7 is_stmt 0 view .LVU2224
 6866 001e 0BB0     		add	sp, sp, #44
 6867              		.cfi_remember_state
 6868              		.cfi_def_cfa_offset 12
 6869              		@ sp needed
 6870 0020 30BD     		pop	{r4, r5, pc}
 6871              	.LVL779:
 6872              	.L683:
 6873              		.cfi_restore_state
ARM GAS  /tmp/ccW65oEM.s 			page 211


1877:src/display.c **** 	set_x_dn(&z, res, &digits);
 6874              		.loc 1 1877 4 is_stmt 1 view .LVU2225
 6875 0022 FFF7FEFF 		bl	decimal64ToNumber
 6876              	.LVL780:
1878:src/display.c ****       }
 6877              		.loc 1 1878 2 view .LVU2226
 6878 0026 2146     		mov	r1, r4
 6879 0028 2846     		mov	r0, r5
 6880 002a 6A46     		mov	r2, sp
 6881 002c FFF7FEFF 		bl	set_x_dn
 6882              	.LVL781:
1879:src/display.c **** 
 6883              		.loc 1 1879 7 is_stmt 0 view .LVU2227
 6884 0030 0BB0     		add	sp, sp, #44
 6885              		.cfi_def_cfa_offset 12
 6886              		@ sp needed
 6887 0032 30BD     		pop	{r4, r5, pc}
1879:src/display.c **** 
 6888              		.loc 1 1879 7 view .LVU2228
 6889              		.cfi_endproc
 6890              	.LFE26:
 6892              		.section	.text.format_reg,"ax",%progbits
 6893              		.align	1
 6894              		.p2align 2,,3
 6895              		.global	format_reg
 6896              		.syntax unified
 6897              		.thumb
 6898              		.thumb_func
 6899              		.fpu fpv4-sp-d16
 6901              	format_reg:
 6902              	.LVL782:
 6903              	.LFB28:
2286:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6904              		.loc 1 2286 45 is_stmt 1 view -0
 6905              		.cfi_startproc
 6906              		@ args = 0, pretend = 0, frame = 40
 6907              		@ frame_needed = 0, uses_anonymous_args = 0
2287:src/display.c **** 
 6908              		.loc 1 2287 2 view .LVU2230
2286:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6909              		.loc 1 2286 45 is_stmt 0 view .LVU2231
 6910 0000 30B5     		push	{r4, r5, lr}
 6911              		.cfi_def_cfa_offset 12
 6912              		.cfi_offset 4, -12
 6913              		.cfi_offset 5, -8
 6914              		.cfi_offset 14, -4
 6915 0002 8BB0     		sub	sp, sp, #44
 6916              		.cfi_def_cfa_offset 56
2286:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6917              		.loc 1 2286 45 view .LVU2232
 6918 0004 0C46     		mov	r4, r1
 6919 0006 0546     		mov	r5, r0
2287:src/display.c **** 
 6920              		.loc 1 2287 28 view .LVU2233
 6921 0008 FFF7FEFF 		bl	get_reg_n
 6922              	.LVL783:
2289:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
ARM GAS  /tmp/ccW65oEM.s 			page 212


 6923              		.loc 1 2289 6 view .LVU2234
 6924 000c 154B     		ldr	r3, .L693
 6925 000e 1B68     		ldr	r3, [r3]
 6926 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6927              	.LVL784:
2289:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6928              		.loc 1 2289 2 is_stmt 1 view .LVU2235
2289:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6929              		.loc 1 2289 5 is_stmt 0 view .LVU2236
 6930 0014 D207     		lsls	r2, r2, #31
 6931 0016 1DD4     		bmi	.L691
2292:src/display.c **** 	  decNumber x;
 6932              		.loc 1 2292 7 is_stmt 1 view .LVU2237
2292:src/display.c **** 	  decNumber x;
 6933              		.loc 1 2292 10 is_stmt 0 view .LVU2238
 6934 0018 44B1     		cbz	r4, .L692
 6935              	.L689:
2303:src/display.c ****       }
 6936              		.loc 1 2303 4 is_stmt 1 view .LVU2239
2303:src/display.c ****       }
 6937              		.loc 1 2303 24 is_stmt 0 view .LVU2240
 6938 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2303:src/display.c ****       }
 6939              		.loc 1 2303 4 view .LVU2241
 6940 001e 2146     		mov	r1, r4
 6941 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6942 0024 FFF7FEFF 		bl	set_x
 6943              	.LVL785:
2304:src/display.c **** 
 6944              		.loc 1 2304 7 view .LVU2242
 6945 0028 0BB0     		add	sp, sp, #44
 6946              		.cfi_remember_state
 6947              		.cfi_def_cfa_offset 12
 6948              		@ sp needed
 6949 002a 30BD     		pop	{r4, r5, pc}
 6950              	.LVL786:
 6951              	.L692:
 6952              		.cfi_restore_state
2292:src/display.c **** 	  decNumber x;
 6953              		.loc 1 2292 32 discriminator 1 view .LVU2243
 6954 002c 0E4A     		ldr	r2, .L693+4
2292:src/display.c **** 	  decNumber x;
 6955              		.loc 1 2292 23 discriminator 1 view .LVU2244
 6956 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6957 0030 012A     		cmp	r2, #1
 6958 0032 F2D9     		bls	.L689
 6959              	.LVL787:
 6960              	.LBB414:
 6961              	.LBI414:
2286:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6962              		.loc 1 2286 12 is_stmt 1 view .LVU2245
 6963              	.LBB415:
 6964              	.LBB416:
2293:src/display.c **** 	  int s;
 6965              		.loc 1 2293 4 view .LVU2246
2294:src/display.c **** 	  unsigned long long int v;
 6966              		.loc 1 2294 4 view .LVU2247
ARM GAS  /tmp/ccW65oEM.s 			page 213


2295:src/display.c **** 
 6967              		.loc 1 2295 4 view .LVU2248
2297:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6968              		.loc 1 2297 4 view .LVU2249
 6969 0034 2946     		mov	r1, r5
 6970 0036 01A8     		add	r0, sp, #4
 6971              	.LVL788:
2297:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6972              		.loc 1 2297 4 is_stmt 0 view .LVU2250
 6973 0038 FFF7FEFF 		bl	getRegister
 6974              	.LVL789:
2298:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6975              		.loc 1 2298 4 is_stmt 1 view .LVU2251
2298:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6976              		.loc 1 2298 8 is_stmt 0 view .LVU2252
 6977 003c 01A8     		add	r0, sp, #4
 6978 003e 6946     		mov	r1, sp
 6979 0040 FFF7FEFF 		bl	dn_to_ull
 6980              	.LVL790:
2299:src/display.c **** 	}
 6981              		.loc 1 2299 4 is_stmt 1 view .LVU2253
 6982 0044 009A     		ldr	r2, [sp]
 6983 0046 FFF7FEFF 		bl	build_value
 6984              	.LVL791:
2299:src/display.c **** 	}
 6985              		.loc 1 2299 4 is_stmt 0 view .LVU2254
 6986 004a 2246     		mov	r2, r4
 6987 004c FFF7FEFF 		bl	set_int_x
 6988              	.LVL792:
 6989              	.LBE416:
 6990              	.LBE415:
 6991              	.LBE414:
2304:src/display.c **** 
 6992              		.loc 1 2304 7 view .LVU2255
 6993 0050 0BB0     		add	sp, sp, #44
 6994              		.cfi_remember_state
 6995              		.cfi_def_cfa_offset 12
 6996              		@ sp needed
 6997 0052 30BD     		pop	{r4, r5, pc}
 6998              	.LVL793:
 6999              	.L691:
 7000              		.cfi_restore_state
2290:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7001              		.loc 1 2290 4 is_stmt 1 view .LVU2256
 7002 0054 2846     		mov	r0, r5
 7003              	.LVL794:
2290:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7004              		.loc 1 2290 4 is_stmt 0 view .LVU2257
 7005 0056 FFF7FEFF 		bl	get_reg_n_int
 7006              	.LVL795:
 7007 005a 2246     		mov	r2, r4
 7008 005c FFF7FEFF 		bl	set_int_x
 7009              	.LVL796:
2304:src/display.c **** 
 7010              		.loc 1 2304 7 view .LVU2258
 7011 0060 0BB0     		add	sp, sp, #44
 7012              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccW65oEM.s 			page 214


 7013              		@ sp needed
 7014 0062 30BD     		pop	{r4, r5, pc}
 7015              	.LVL797:
 7016              	.L694:
2304:src/display.c **** 
 7017              		.loc 1 2304 7 view .LVU2259
 7018              		.align	2
 7019              	.L693:
 7020 0064 00000000 		.word	main_ram
 7021 0068 00000000 		.word	StateWhileOn
 7022              		.cfi_endproc
 7023              	.LFE28:
 7025              		.section	.text.set_status_right,"ax",%progbits
 7026              		.align	1
 7027              		.p2align 2,,3
 7028              		.syntax unified
 7029              		.thumb
 7030              		.thumb_func
 7031              		.fpu fpv4-sp-d16
 7033              	set_status_right:
 7034              	.LVL798:
 7035              	.LFB46:
3069:src/display.c ****       static void set_status_top(const char *str) {
3070:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3071:src/display.c ****       }
3072:src/display.c **** 
3073:src/display.c **** 
3074:src/display.c ****       /*
3075:src/display.c ****        *  Display messages (global function)
3076:src/display.c ****        */
3077:src/display.c ****       extern void message(const char *str1, const char *str2)
3078:src/display.c ****       {
3079:src/display.c **** 	State2.disp_freeze = 0;
3080:src/display.c **** 	State2.disp_small = 0;
3081:src/display.c **** 	WasDataEntry = 0;
3082:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3083:src/display.c **** 	  // Complete redraw necessary
3084:src/display.c **** 	  DispMsg = str1;
3085:src/display.c **** 	  display();
3086:src/display.c **** 	}
3087:src/display.c **** 	else {
3088:src/display.c **** 	  if ( str2 != NULL ) {
3089:src/display.c **** 	    reset_disp();
3090:src/display.c **** 	    ShowRPN = 0;
3091:src/display.c **** 	    set_annunciators();
3092:src/display.c **** 	    set_digits_string( str2, 0 );
3093:src/display.c **** 	  }
3094:src/display.c **** 	  set_status( str1 );
3095:src/display.c **** 	  finish_display();// message
3096:src/display.c **** 	}
3097:src/display.c ****       }
3098:src/display.c **** 
3099:src/display.c **** #ifdef INCLUDE_STOPWATCH
3100:src/display.c **** 
3101:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3102:src/display.c **** 	int j = SEGS_EXP_BASE;
3103:src/display.c **** 	for (; *exponent!=0; exponent++) {
ARM GAS  /tmp/ccW65oEM.s 			page 215


3104:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3105:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3106:src/display.c **** 	}
3107:src/display.c ****       }
3108:src/display.c **** 
3109:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3110:src/display.c ****       {
3111:src/display.c **** #ifndef REALBUILD
3112:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3113:src/display.c **** #endif
3114:src/display.c **** 	reset_disp();
3115:src/display.c **** 	set_dot(DEG);
3116:src/display.c **** 	set_digits_string( str2, 0 );
3117:src/display.c **** 	State2.disp_small = force_small;
3118:src/display.c **** 	if( exponent!=NULL ) {
3119:src/display.c **** 	  stopwatch_exponent(exponent);
3120:src/display.c **** 	}
3121:src/display.c **** 	set_status( str1 );
3122:src/display.c **** 	finish_display();
3123:src/display.c ****       }
3124:src/display.c **** 
3125:src/display.c **** 
3126:src/display.c **** #endif // INCLUDE_STOPWATCH
3127:src/display.c **** 
3128:src/display.c ****       /* Display the right hand characters from the given string.
3129:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3130:src/display.c ****        * and reduce font size if required.
3131:src/display.c ****        */
3132:src/display.c ****       static void set_status_right(const char *str) {
 7036              		.loc 1 3132 53 is_stmt 1 view -0
 7037              		.cfi_startproc
 7038              		@ args = 0, pretend = 0, frame = 0
 7039              		@ frame_needed = 0, uses_anonymous_args = 0
3133:src/display.c **** 	unsigned int x = 0;
 7040              		.loc 1 3133 2 view .LVU2261
3134:src/display.c **** 	const char *p;
 7041              		.loc 1 3134 2 view .LVU2262
3135:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7042              		.loc 1 3135 2 view .LVU2263
3132:src/display.c **** 	unsigned int x = 0;
 7043              		.loc 1 3132 53 is_stmt 0 view .LVU2264
 7044 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7045              		.cfi_def_cfa_offset 28
 7046              		.cfi_offset 4, -28
 7047              		.cfi_offset 5, -24
 7048              		.cfi_offset 6, -20
 7049              		.cfi_offset 7, -16
 7050              		.cfi_offset 8, -12
 7051              		.cfi_offset 9, -8
 7052              		.cfi_offset 14, -4
 7053              		.loc 1 3135 23 view .LVU2265
 7054 0004 194B     		ldr	r3, .L710
 7055              		.loc 1 3135 41 view .LVU2266
 7056 0006 93F91630 		ldrsb	r3, [r3, #22]
 7057 000a 002B     		cmp	r3, #0
3132:src/display.c **** 	unsigned int x = 0;
 7058              		.loc 1 3132 53 view .LVU2267
ARM GAS  /tmp/ccW65oEM.s 			page 216


 7059 000c 83B0     		sub	sp, sp, #12
 7060              		.cfi_def_cfa_offset 40
3132:src/display.c **** 	unsigned int x = 0;
 7061              		.loc 1 3132 53 view .LVU2268
 7062 000e 0646     		mov	r6, r0
 7063              		.loc 1 3135 41 view .LVU2269
 7064 0010 23DA     		bge	.L709
 7065              	.LVL799:
 7066              	.L696:
 7067              		.loc 1 3135 12 view .LVU2270
 7068 0012 4FF00108 		mov	r8, #1
3136:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7069              		.loc 1 3136 36 view .LVU2271
 7070 0016 4FF48077 		mov	r7, #256
 7071              	.L697:
 7072              	.LVL800:
3137:src/display.c **** 
3138:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7073              		.loc 1 3138 2 is_stmt 1 discriminator 4 view .LVU2272
 7074              		.loc 1 3138 14 discriminator 4 view .LVU2273
 7075              		.loc 1 3138 2 is_stmt 0 discriminator 4 view .LVU2274
 7076 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7077 001c 3446     		mov	r4, r6
 7078 001e 1BB1     		cbz	r3, .L698
 7079              	.LVL801:
 7080              	.L699:
 7081              		.loc 1 3138 30 is_stmt 1 discriminator 3 view .LVU2275
 7082              		.loc 1 3138 26 discriminator 3 view .LVU2276
 7083              		.loc 1 3138 14 discriminator 3 view .LVU2277
 7084              		.loc 1 3138 2 is_stmt 0 discriminator 3 view .LVU2278
 7085 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7086              	.LVL802:
 7087              		.loc 1 3138 2 discriminator 3 view .LVU2279
 7088 0024 002B     		cmp	r3, #0
 7089 0026 FBD1     		bne	.L699
 7090              	.L698:
3133:src/display.c **** 	const char *p;
 7091              		.loc 1 3133 15 view .LVU2280
 7092 0028 0025     		movs	r5, #0
 7093 002a 06E0     		b	.L700
 7094              	.LVL803:
 7095              	.L701:
 7096              	.LBB417:
3139:src/display.c **** 	while (--p >= str) {
3140:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7097              		.loc 1 3140 27 view .LVU2281
 7098 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3141:src/display.c **** 
3142:src/display.c **** 	  x += charlengths(c);
 7099              		.loc 1 3142 9 view .LVU2282
 7100 002e 3844     		add	r0, r0, r7
 7101 0030 FFF7FEFF 		bl	charlengths
 7102              	.LVL804:
 7103              		.loc 1 3142 6 view .LVU2283
 7104 0034 0544     		add	r5, r5, r0
 7105              	.LVL805:
3143:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
ARM GAS  /tmp/ccW65oEM.s 			page 217


 7106              		.loc 1 3143 4 is_stmt 1 view .LVU2284
 7107              		.loc 1 3143 7 is_stmt 0 view .LVU2285
 7108 0036 4B2D     		cmp	r5, #75
 7109 0038 03D8     		bhi	.L702
 7110              	.LVL806:
 7111              	.L700:
3140:src/display.c **** 
 7112              		.loc 1 3140 4 is_stmt 1 view .LVU2286
3140:src/display.c **** 
 7113              		.loc 1 3140 4 is_stmt 0 view .LVU2287
 7114              	.LBE417:
3139:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7115              		.loc 1 3139 8 is_stmt 1 view .LVU2288
 7116 003a A146     		mov	r9, r4
 7117 003c 013C     		subs	r4, r4, #1
 7118              	.LVL807:
 7119              	.LBB418:
3142:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7120              		.loc 1 3142 4 view .LVU2289
3142:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7121              		.loc 1 3142 4 is_stmt 0 view .LVU2290
 7122              	.LBE418:
3139:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7123              		.loc 1 3139 8 view .LVU2291
 7124 003e A642     		cmp	r6, r4
 7125 0040 F4D9     		bls	.L701
 7126              	.LVL808:
 7127              	.L702:
3144:src/display.c **** 	    break;
3145:src/display.c **** 	}
3146:src/display.c **** 	set_status_sized(p+1, toolarge);
 7128              		.loc 1 3146 2 is_stmt 1 view .LVU2292
 7129              	.LBB419:
 7130              	.LBI419:
2908:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7131              		.loc 1 2908 19 view .LVU2293
 7132              	.LBB420:
2909:src/display.c ****       }
 7133              		.loc 1 2909 2 view .LVU2294
 7134 0042 40F24A23 		movw	r3, #586
 7135 0046 0093     		str	r3, [sp]
 7136 0048 4146     		mov	r1, r8
 7137 004a 4846     		mov	r0, r9
 7138 004c 8E23     		movs	r3, #142
 7139 004e 4A22     		movs	r2, #74
 7140 0050 FFF7FEFF 		bl	s_s_sized
 7141              	.LVL809:
2909:src/display.c ****       }
 7142              		.loc 1 2909 2 is_stmt 0 view .LVU2295
 7143              	.LBE420:
 7144              	.LBE419:
3147:src/display.c ****       }
 7145              		.loc 1 3147 7 view .LVU2296
 7146 0054 03B0     		add	sp, sp, #12
 7147              		.cfi_remember_state
 7148              		.cfi_def_cfa_offset 28
 7149              		@ sp needed
ARM GAS  /tmp/ccW65oEM.s 			page 218


 7150 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7151              	.LVL810:
 7152              	.L709:
 7153              		.cfi_restore_state
 7154              	.LBB421:
 7155              	.LBI421:
3056:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7156              		.loc 1 3056 18 is_stmt 1 view .LVU2297
 7157              	.LBB422:
3057:src/display.c ****       }
 7158              		.loc 1 3057 2 view .LVU2298
3057:src/display.c ****       }
 7159              		.loc 1 3057 9 is_stmt 0 view .LVU2299
 7160 005a 0021     		movs	r1, #0
 7161 005c FFF7FEFF 		bl	pixel_length
 7162              	.LVL811:
3057:src/display.c ****       }
 7163              		.loc 1 3057 9 view .LVU2300
 7164              	.LBE422:
 7165              	.LBE421:
3135:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7166              		.loc 1 3135 41 view .LVU2301
 7167 0060 4B28     		cmp	r0, #75
 7168 0062 D6DC     		bgt	.L696
3135:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7169              		.loc 1 3135 12 view .LVU2302
 7170 0064 4FF00008 		mov	r8, #0
3136:src/display.c **** 
 7171              		.loc 1 3136 36 view .LVU2303
 7172 0068 4746     		mov	r7, r8
 7173 006a D6E7     		b	.L697
 7174              	.L711:
 7175              		.align	2
 7176              	.L710:
 7177 006c 00000000 		.word	StateWhileOn
 7178              		.cfi_endproc
 7179              	.LFE46:
 7181              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7182              		.align	2
 7183              	.LC3:
 7184 0000 32630600 		.ascii	"2c\006\000"
 7185              		.align	2
 7186              	.LC4:
 7187 0004 07C63C00 		.ascii	"\007\306<\000"
 7188              		.align	2
 7189              	.LC5:
 7190 0008 07876900 		.ascii	"\007\207i\000"
 7191              		.align	2
 7192              	.LC6:
 7193 000c 07C67900 		.ascii	"\007\306y\000"
 7194              		.align	2
 7195              	.LC7:
 7196 0010 07950600 		.ascii	"\007\225\006\000"
 7197              		.align	2
 7198              	.LC8:
 7199 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7199      060600
ARM GAS  /tmp/ccW65oEM.s 			page 219


 7200 001b 00       		.align	2
 7201              	.LC9:
 7202 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7202      060600
 7203 0023 00       		.align	2
 7204              	.LC10:
 7205 0024 1400     		.ascii	"\024\000"
 7206 0026 0000     		.align	2
 7207              	.LC11:
 7208 0028 07C74400 		.ascii	"\007\307D\000"
 7209              		.align	2
 7210              	.LC12:
 7211 002c 07870700 		.ascii	"\007\207\007\000"
 7212              		.align	2
 7213              	.LC13:
 7214 0030 07872000 		.ascii	"\007\207 \000"
 7215              		.align	2
 7216              	.LC14:
 7217 0034 06060788 		.ascii	"\006\006\007\210\007\000"
 7217      0700
 7218 003a 0000     		.align	2
 7219              	.LC15:
 7220 003c 07C73C00 		.ascii	"\007\307<\000"
 7221              		.align	2
 7222              	.LC16:
 7223 0040 07C77900 		.ascii	"\007\307y\000"
 7224              		.align	2
 7225              	.LC17:
 7226 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7226      00
 7227 0049 000000   		.align	2
 7228              	.LC19:
 7229 004c 07E43F00 		.ascii	"\007\344?\000"
 7230              		.section	.text.annunciators,"ax",%progbits
 7231              		.align	1
 7232              		.p2align 2,,3
 7233              		.syntax unified
 7234              		.thumb
 7235              		.thumb_func
 7236              		.fpu fpv4-sp-d16
 7238              	annunciators:
 7239              	.LFB16:
 594:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7240              		.loc 1 594 36 is_stmt 1 view -0
 7241              		.cfi_startproc
 7242              		@ args = 0, pretend = 0, frame = 128
 7243              		@ frame_needed = 0, uses_anonymous_args = 0
 596:src/display.c ****       char buf2[42], *p2 = buf2;
 7244              		.loc 1 596 7 view .LVU2305
 594:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7245              		.loc 1 594 36 is_stmt 0 view .LVU2306
 7246 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7247              		.cfi_def_cfa_offset 28
 7248              		.cfi_offset 4, -28
 7249              		.cfi_offset 5, -24
 7250              		.cfi_offset 6, -20
 7251              		.cfi_offset 7, -16
ARM GAS  /tmp/ccW65oEM.s 			page 220


 7252              		.cfi_offset 8, -12
 7253              		.cfi_offset 9, -8
 7254              		.cfi_offset 14, -4
 608:src/display.c **** #  endif
 7255              		.loc 1 608 38 view .LVU2307
 7256 0004 DFF86083 		ldr	r8, .L823+56
 594:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7257              		.loc 1 594 36 view .LVU2308
 7258 0008 A3B0     		sub	sp, sp, #140
 7259              		.cfi_def_cfa_offset 168
 7260              	.LVL812:
 597:src/display.c ****       int n;
 7261              		.loc 1 597 7 is_stmt 1 view .LVU2309
 598:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7262              		.loc 1 598 7 view .LVU2310
 599:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7263              		.loc 1 599 7 view .LVU2311
 600:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7264              		.loc 1 600 7 view .LVU2312
 600:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7265              		.loc 1 600 43 is_stmt 0 view .LVU2313
 7266 000a FFF7FEFF 		bl	cur_shift
 7267              	.LVL813:
 608:src/display.c **** #  endif
 7268              		.loc 1 608 38 view .LVU2314
 7269 000e D8F80030 		ldr	r3, [r8]
 600:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7270              		.loc 1 600 18 view .LVU2315
 7271 0012 C74A     		ldr	r2, .L823
 608:src/display.c **** #  endif
 7272              		.loc 1 608 38 view .LVU2316
 7273 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 600:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7274              		.loc 1 600 18 view .LVU2317
 7275 0018 165C     		ldrb	r6, [r2, r0]	@ zero_extendqisi2
 7276              	.LVL814:
 608:src/display.c **** #  endif
 7277              		.loc 1 608 7 is_stmt 1 view .LVU2318
 639:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7278              		.loc 1 639 7 is_stmt 0 view .LVU2319
 7279 001a 0CAD     		add	r5, sp, #48
 7280              	.LVL815:
 639:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7281              		.loc 1 639 7 view .LVU2320
 7282 001c 2A22     		movs	r2, #42
 7283 001e 0021     		movs	r1, #0
 7284 0020 2846     		mov	r0, r5
 608:src/display.c **** #  endif
 7285              		.loc 1 608 38 view .LVU2321
 7286 0022 C3F38009 		ubfx	r9, r3, #2, #1
 7287              	.LVL816:
 611:src/display.c **** #  else
 7288              		.loc 1 611 7 is_stmt 1 view .LVU2322
 616:src/display.c **** #  else
 7289              		.loc 1 616 7 view .LVU2323
 626:src/display.c **** #else
 7290              		.loc 1 626 7 view .LVU2324
ARM GAS  /tmp/ccW65oEM.s 			page 221


 634:src/display.c **** #else
 7291              		.loc 1 634 7 view .LVU2325
 639:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7292              		.loc 1 639 7 view .LVU2326
 7293 0026 FFF7FEFF 		bl	xset
 7294              	.LVL817:
 640:src/display.c ****       
 7295              		.loc 1 640 7 view .LVU2327
 7296 002a 0021     		movs	r1, #0
 7297 002c 17A8     		add	r0, sp, #92
 7298              	.LVL818:
 640:src/display.c ****       
 7299              		.loc 1 640 7 is_stmt 0 view .LVU2328
 7300 002e 2A22     		movs	r2, #42
 7301 0030 FFF7FEFF 		bl	xset
 7302              	.LVL819:
 642:src/display.c **** #ifdef SHOW_STACK_SIZE
 7303              		.loc 1 642 7 is_stmt 1 view .LVU2329
 642:src/display.c **** #ifdef SHOW_STACK_SIZE
 7304              		.loc 1 642 11 is_stmt 0 view .LVU2330
 7305 0034 D8F80030 		ldr	r3, [r8]
 7306 0038 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 642:src/display.c **** #ifdef SHOW_STACK_SIZE
 7307              		.loc 1 642 10 view .LVU2331
 7308 003c D907     		lsls	r1, r3, #31
 7309 003e 00F1D080 		bmi	.L808
 681:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7310              		.loc 1 681 12 is_stmt 1 view .LVU2332
 681:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7311              		.loc 1 681 15 is_stmt 0 view .LVU2333
 7312 0042 B9F1000F 		cmp	r9, #0
 7313 0046 3FD1     		bne	.L725
 699:src/display.c **** 	    *p2++ = shift_char;
 7314              		.loc 1 699 4 is_stmt 1 view .LVU2334
 699:src/display.c **** 	    *p2++ = shift_char;
 7315              		.loc 1 699 7 is_stmt 0 view .LVU2335
 7316 0048 202E     		cmp	r6, #32
 7317 004a 00F06581 		beq	.L726
 7318              	.L728:
 700:src/display.c **** 	    *p2++ = '\006';
 7319              		.loc 1 700 6 is_stmt 1 view .LVU2336
 7320              	.LVL820:
 701:src/display.c **** 	  }
 7321              		.loc 1 701 12 is_stmt 0 view .LVU2337
 7322 004e 0623     		movs	r3, #6
 700:src/display.c **** 	    *p2++ = '\006';
 7323              		.loc 1 700 12 view .LVU2338
 7324 0050 8DF85C60 		strb	r6, [sp, #92]
 701:src/display.c **** 	  }
 7325              		.loc 1 701 6 is_stmt 1 view .LVU2339
 7326              	.LVL821:
 701:src/display.c **** 	  }
 7327              		.loc 1 701 12 is_stmt 0 view .LVU2340
 7328 0054 8DF85D30 		strb	r3, [sp, #93]
 701:src/display.c **** 	  }
 7329              		.loc 1 701 9 view .LVU2341
 7330 0058 0DF15E00 		add	r0, sp, #94
ARM GAS  /tmp/ccW65oEM.s 			page 222


 7331              	.LVL822:
 7332              	.L727:
 707:src/display.c **** 	  *p2++ = ' ';
 7333              		.loc 1 707 2 is_stmt 1 view .LVU2342
 707:src/display.c **** 	  *p2++ = ' ';
 7334              		.loc 1 707 6 is_stmt 0 view .LVU2343
 7335 005c B54C     		ldr	r4, .L823+4
 7336 005e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 707:src/display.c **** 	  *p2++ = ' ';
 7337              		.loc 1 707 5 view .LVU2344
 7338 0060 9A07     		lsls	r2, r3, #30
 7339 0062 00F13A81 		bmi	.L809
 712:src/display.c **** 	  *p2++ = ' ';
 7340              		.loc 1 712 2 is_stmt 1 view .LVU2345
 712:src/display.c **** 	  *p2++ = ' ';
 7341              		.loc 1 712 5 is_stmt 0 view .LVU2346
 7342 0066 5B07     		lsls	r3, r3, #29
 7343 0068 00F13281 		bmi	.L810
 718:src/display.c **** 	  if (State2.wascomplex) {
 7344              		.loc 1 718 2 is_stmt 1 view .LVU2347
 718:src/display.c **** 	  if (State2.wascomplex) {
 7345              		.loc 1 718 5 is_stmt 0 view .LVU2348
 7346 006c 202E     		cmp	r6, #32
 7347 006e 00F0BA81 		beq	.L811
 7348              	.L731:
 735:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7349              		.loc 1 735 2 is_stmt 1 view .LVU2349
 735:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7350              		.loc 1 735 16 is_stmt 0 view .LVU2350
 7351 0072 D8F80030 		ldr	r3, [r8]
 7352 0076 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7353 007a C3F30113 		ubfx	r3, r3, #4, #2
 735:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7354              		.loc 1 735 2 view .LVU2351
 7355 007e 012B     		cmp	r3, #1
 7356 0080 00F0D681 		beq	.L763
 7357 0084 AC49     		ldr	r1, .L823+8
 7358 0086 AD4A     		ldr	r2, .L823+12
 7359 0088 022B     		cmp	r3, #2
 7360 008a 08BF     		it	eq
 7361 008c 1146     		moveq	r1, r2
 7362              	.L734:
 7363              	.LVL823:
 749:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7364              		.loc 1 749 2 is_stmt 1 view .LVU2352
 749:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7365              		.loc 1 749 7 is_stmt 0 view .LVU2353
 7366 008e FFF7FEFF 		bl	scopy
 7367              	.LVL824:
 749:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7368              		.loc 1 749 7 view .LVU2354
 7369 0092 0646     		mov	r6, r0
 7370              	.LVL825:
 751:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7371              		.loc 1 751 2 is_stmt 1 view .LVU2355
 751:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7372              		.loc 1 751 6 is_stmt 0 view .LVU2356
ARM GAS  /tmp/ccW65oEM.s 			page 223


 7373 0094 FFF7FEFF 		bl	get_trig_mode
 7374              	.LVL826:
 751:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7375              		.loc 1 751 5 view .LVU2357
 7376 0098 0228     		cmp	r0, #2
 7377 009a 00F06781 		beq	.L812
 7378              	.LVL827:
 7379              	.L716:
 897:src/display.c ****       set_status_top(buf2);
 7380              		.loc 1 897 11 is_stmt 1 view .LVU2358
 7381 009e 2846     		mov	r0, r5
 7382 00a0 FFF7FEFF 		bl	set_status
 7383              	.LVL828:
 898:src/display.c ****       
 7384              		.loc 1 898 7 view .LVU2359
 7385              	.LBB433:
 7386              	.LBI433:
3069:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7387              		.loc 1 3069 19 view .LVU2360
 7388              	.LBB434:
3070:src/display.c ****       }
 7389              		.loc 1 3070 2 view .LVU2361
 7390 00a4 94F91630 		ldrsb	r3, [r4, #22]
 7391 00a8 002B     		cmp	r3, #0
 7392 00aa 80F2F280 		bge	.L813
 7393              	.L769:
 7394 00ae 0121     		movs	r1, #1
 7395              	.L757:
 7396              	.LVL829:
 7397              	.LBB435:
 7398              	.LBI435:
2911:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7399              		.loc 1 2911 19 view .LVU2362
 7400              	.LBB436:
2912:src/display.c ****       }
 7401              		.loc 1 2912 2 view .LVU2363
 7402 00b0 4FF43873 		mov	r3, #736
 7403 00b4 0093     		str	r3, [sp]
 7404 00b6 17A8     		add	r0, sp, #92
 7405              	.LVL830:
2912:src/display.c ****       }
 7406              		.loc 1 2912 2 is_stmt 0 view .LVU2364
 7407 00b8 40F24A23 		movw	r3, #586
 7408 00bc 1922     		movs	r2, #25
 7409 00be FFF7FEFF 		bl	s_s_sized
 7410              	.LVL831:
2912:src/display.c ****       }
 7411              		.loc 1 2912 2 view .LVU2365
 7412              	.LBE436:
 7413              	.LBE435:
 7414              	.LBE434:
 7415              	.LBE433:
 900:src/display.c **** #else
 7416              		.loc 1 900 5 view .LVU2366
 7417 00c2 23B0     		add	sp, sp, #140
 7418              		.cfi_remember_state
 7419              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccW65oEM.s 			page 224


 7420              		@ sp needed
 7421 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7422              	.LVL832:
 7423              	.L725:
 7424              		.cfi_restore_state
 763:src/display.c **** 	  *p2++ = '\007';
 7425              		.loc 1 763 2 is_stmt 1 view .LVU2367
 763:src/display.c **** 	  *p2++ = '\007';
 7426              		.loc 1 763 6 is_stmt 0 view .LVU2368
 7427 00c8 9A4C     		ldr	r4, .L823+4
 7428 00ca 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 763:src/display.c **** 	  *p2++ = '\007';
 7429              		.loc 1 763 5 view .LVU2369
 7430 00cc 9F07     		lsls	r7, r3, #30
 7431 00ce 00F1E980 		bmi	.L814
 769:src/display.c **** 	  *p2++ = '\007';
 7432              		.loc 1 769 7 is_stmt 1 view .LVU2370
 769:src/display.c **** 	  *p2++ = '\007';
 7433              		.loc 1 769 10 is_stmt 0 view .LVU2371
 7434 00d2 202E     		cmp	r6, #32
 7435 00d4 00F00681 		beq	.L737
 770:src/display.c **** 	  *p2++ = '\307';
 7436              		.loc 1 770 4 is_stmt 1 view .LVU2372
 7437              	.LVL833:
 771:src/display.c **** 	  *p2++ = shift_char;
 7438              		.loc 1 771 4 view .LVU2373
 770:src/display.c **** 	  *p2++ = '\307';
 7439              		.loc 1 770 10 is_stmt 0 view .LVU2374
 7440 00d8 4CF20772 		movw	r2, #50951
 772:src/display.c **** 	  goto no_copy;
 7441              		.loc 1 772 10 view .LVU2375
 7442 00dc 8DF85E60 		strb	r6, [sp, #94]
 770:src/display.c **** 	  *p2++ = '\307';
 7443              		.loc 1 770 10 view .LVU2376
 7444 00e0 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 772:src/display.c **** 	  goto no_copy;
 7445              		.loc 1 772 4 is_stmt 1 view .LVU2377
 7446              	.LVL834:
 773:src/display.c **** 	}
 7447              		.loc 1 773 4 view .LVU2378
 772:src/display.c **** 	  goto no_copy;
 7448              		.loc 1 772 7 is_stmt 0 view .LVU2379
 7449 00e4 0DF15F00 		add	r0, sp, #95
 7450              	.LVL835:
 596:src/display.c ****       char buf2[42], *p2 = buf2;
 7451              		.loc 1 596 22 view .LVU2380
 7452 00e8 2F46     		mov	r7, r5
 7453              	.LVL836:
 7454              	.L738:
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7455              		.loc 1 817 2 is_stmt 1 view .LVU2381
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7456              		.loc 1 817 5 is_stmt 0 view .LVU2382
 7457 00ea 5E07     		lsls	r6, r3, #29
 7458              	.LVL837:
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7459              		.loc 1 817 5 view .LVU2383
ARM GAS  /tmp/ccW65oEM.s 			page 225


 7460 00ec 00F1EA80 		bmi	.L815
 7461              	.L742:
 819:src/display.c **** 	  decNumber y;
 7462              		.loc 1 819 9 is_stmt 1 view .LVU2384
 819:src/display.c **** 	  decNumber y;
 7463              		.loc 1 819 13 is_stmt 0 view .LVU2385
 7464 00f0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 819:src/display.c **** 	  decNumber y;
 7465              		.loc 1 819 12 view .LVU2386
 7466 00f2 5906     		lsls	r1, r3, #25
 7467 00f4 D3D5     		bpl	.L716
 7468              	.LVL838:
 7469              	.L733:
 7470              	.LBB440:
 820:src/display.c **** 	display_yreg:
 7471              		.loc 1 820 4 is_stmt 1 view .LVU2387
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7472              		.loc 1 827 4 view .LVU2388
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7473              		.loc 1 827 34 is_stmt 0 view .LVU2389
 7474 00f6 924E     		ldr	r6, .L823+16
 7475 00f8 3168     		ldr	r1, [r6]
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7476              		.loc 1 827 4 view .LVU2390
 7477 00fa 6329     		cmp	r1, #99
 7478 00fc 00F38681 		bgt	.L816
 7479              	.L743:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7480              		.loc 1 827 4 discriminator 5 view .LVU2391
 7481 0100 0131     		adds	r1, r1, #1
 7482              	.L747:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7483              		.loc 1 827 4 discriminator 6 view .LVU2392
 7484 0102 03A8     		add	r0, sp, #12
 7485 0104 FFF7FEFF 		bl	getRegister
 7486              	.LVL839:
 830:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7487              		.loc 1 830 4 is_stmt 1 discriminator 6 view .LVU2393
 830:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7488              		.loc 1 830 7 is_stmt 0 discriminator 6 view .LVU2394
 7489 0108 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 7490 010c 11F07001 		ands	r1, r1, #112
 7491 0110 44D1     		bne	.L749
 831:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7492              		.loc 1 831 6 is_stmt 1 view .LVU2395
 831:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7493              		.loc 1 831 19 is_stmt 0 view .LVU2396
 7494 0112 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 831:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7495              		.loc 1 831 9 view .LVU2397
 7496 0114 13F0010F 		tst	r3, #1
 7497              	.LBB441:
 832:src/display.c **** 
 7498              		.loc 1 832 44 view .LVU2398
 7499 0118 D8F80030 		ldr	r3, [r8]
 7500              	.LBE441:
 831:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
ARM GAS  /tmp/ccW65oEM.s 			page 226


 7501              		.loc 1 831 9 view .LVU2399
 7502 011c 40F02B81 		bne	.L817
 852:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7503              		.loc 1 852 6 is_stmt 1 view .LVU2400
 852:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7504              		.loc 1 852 21 is_stmt 0 view .LVU2401
 7505 0120 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 852:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7506              		.loc 1 852 9 view .LVU2402
 7507 0124 9B06     		lsls	r3, r3, #26
 7508 0126 39D5     		bpl	.L749
 854:src/display.c **** #endif
 7509              		.loc 1 854 6 view .LVU2403
 7510 0128 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 854:src/display.c **** #endif
 7511              		.loc 1 854 3 view .LVU2404
 7512 012a 13F00206 		ands	r6, r3, #2
 7513 012e 35D1     		bne	.L749
 857:src/display.c **** #endif
 7514              		.loc 1 857 6 view .LVU2405
 7515 0130 844B     		ldr	r3, .L823+20
 857:src/display.c **** #endif
 7516              		.loc 1 857 3 view .LVU2406
 7517 0132 1B68     		ldr	r3, [r3]
 7518 0134 012B     		cmp	r3, #1
 7519 0136 31D0     		beq	.L749
 859:src/display.c **** 	      char ltgteq;
 7520              		.loc 1 859 6 view .LVU2407
 7521 0138 3946     		mov	r1, r7
 7522 013a 03A8     		add	r0, sp, #12
 7523 013c FFF7FEFF 		bl	set_x_fract
 7524              	.LVL840:
 859:src/display.c **** 	      char ltgteq;
 7525              		.loc 1 859 3 view .LVU2408
 7526 0140 60B3     		cbz	r0, .L749
 7527              	.LBB442:
 860:src/display.c **** 
 7528              		.loc 1 860 8 is_stmt 1 view .LVU2409
 862:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7529              		.loc 1 862 8 view .LVU2410
 862:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7530              		.loc 1 862 12 is_stmt 0 view .LVU2411
 7531 0142 3146     		mov	r1, r6
 7532 0144 2846     		mov	r0, r5
 7533 0146 FFF7FEFF 		bl	find_char
 7534              	.LVL841:
 7535 014a 0646     		mov	r6, r0
 862:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7536              		.loc 1 862 10 view .LVU2412
 7537 014c 0238     		subs	r0, r0, #2
 7538              	.LVL842:
 864:src/display.c **** 	      switch (ltgteq) {
 7539              		.loc 1 864 8 is_stmt 1 view .LVU2413
 864:src/display.c **** 	      switch (ltgteq) {
 7540              		.loc 1 864 15 is_stmt 0 view .LVU2414
 7541 014e 16F8028C 		ldrb	r8, [r6, #-2]	@ zero_extendqisi2
 7542              	.LVL843:
ARM GAS  /tmp/ccW65oEM.s 			page 227


 865:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7543              		.loc 1 865 8 is_stmt 1 view .LVU2415
 7544 0152 B8F1470F 		cmp	r8, #71
 7545 0156 00F07A81 		beq	.L767
 867:src/display.c **** 	      }
 7546              		.loc 1 867 25 is_stmt 0 view .LVU2416
 7547 015a B8F14C0F 		cmp	r8, #76
 7548 015e 08BF     		it	eq
 7549 0160 4FF03C08 		moveq	r8, #60
 7550              	.LVL844:
 7551              	.L754:
 869:src/display.c **** 	      q[2] = ltgteq;
 7552              		.loc 1 869 8 is_stmt 1 view .LVU2417
 7553 0164 7849     		ldr	r1, .L823+24
 7554 0166 FFF7FEFF 		bl	scopy
 7555              	.LVL845:
 870:src/display.c **** 
 7556              		.loc 1 870 8 view .LVU2418
 870:src/display.c **** 
 7557              		.loc 1 870 13 is_stmt 0 view .LVU2419
 7558 016a 86F80080 		strb	r8, [r6]
 872:src/display.c **** 		goto skip;
 7559              		.loc 1 872 8 is_stmt 1 view .LVU2420
 872:src/display.c **** 		goto skip;
 7560              		.loc 1 872 12 is_stmt 0 view .LVU2421
 7561 016e 0121     		movs	r1, #1
 7562 0170 2846     		mov	r0, r5
 7563 0172 FFF7FEFF 		bl	pixel_length
 7564              	.LVL846:
 872:src/display.c **** 		goto skip;
 7565              		.loc 1 872 11 view .LVU2422
 7566 0176 1A28     		cmp	r0, #26
 7567 0178 91DD     		ble	.L716
 875:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7568              		.loc 1 875 8 is_stmt 1 view .LVU2423
 875:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7569              		.loc 1 875 14 is_stmt 0 view .LVU2424
 7570 017a 4FF00008 		mov	r8, #0
 7571              	.LVL847:
 875:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7572              		.loc 1 875 14 view .LVU2425
 7573 017e 06F8038C 		strb	r8, [r6, #-3]
 876:src/display.c **** 		goto skip;
 7574              		.loc 1 876 8 is_stmt 1 view .LVU2426
 876:src/display.c **** 		goto skip;
 7575              		.loc 1 876 12 is_stmt 0 view .LVU2427
 7576 0182 0121     		movs	r1, #1
 7577 0184 2846     		mov	r0, r5
 7578 0186 FFF7FEFF 		bl	pixel_length
 7579              	.LVL848:
 876:src/display.c **** 		goto skip;
 7580              		.loc 1 876 11 view .LVU2428
 7581 018a 1A28     		cmp	r0, #26
 7582 018c 87DD     		ble	.L716
 879:src/display.c **** 	    }
 7583              		.loc 1 879 8 is_stmt 1 view .LVU2429
 879:src/display.c **** 	    }
ARM GAS  /tmp/ccW65oEM.s 			page 228


 7584              		.loc 1 879 39 is_stmt 0 view .LVU2430
 7585 018e 7A1B     		subs	r2, r7, r5
 879:src/display.c **** 	    }
 7586              		.loc 1 879 8 view .LVU2431
 7587 0190 4146     		mov	r1, r8
 7588 0192 C2F12A02 		rsb	r2, r2, #42
 7589 0196 3846     		mov	r0, r7
 7590 0198 FFF7FEFF 		bl	xset
 7591              	.LVL849:
 7592              	.L749:
 879:src/display.c **** 	    }
 7593              		.loc 1 879 8 view .LVU2432
 7594              	.LBE442:
 882:src/display.c **** 	    int extra_pixels;
 7595              		.loc 1 882 4 is_stmt 1 view .LVU2433
 882:src/display.c **** 	    int extra_pixels;
 7596              		.loc 1 882 10 is_stmt 0 view .LVU2434
 7597 019c 0C23     		movs	r3, #12
 7598 019e 0293     		str	r3, [sp, #8]
 882:src/display.c **** 	    int extra_pixels;
 7599              		.loc 1 882 27 is_stmt 1 view .LVU2435
 7600 01a0 0FE0     		b	.L756
 7601              	.LVL850:
 7602              	.L818:
 7603              	.LBB443:
 890:src/display.c **** 
 7604              		.loc 1 890 6 is_stmt 0 view .LVU2436
 7605 01a2 029A     		ldr	r2, [sp, #8]
 7606 01a4 0A32     		adds	r2, r2, #10
 7607 01a6 FFF7FEFF 		bl	xset
 7608              	.LVL851:
 892:src/display.c **** 	  }
 7609              		.loc 1 892 6 is_stmt 1 view .LVU2437
 892:src/display.c **** 	  }
 7610              		.loc 1 892 30 is_stmt 0 view .LVU2438
 7611 01aa B6F14802 		subs	r2, r6, #72
 892:src/display.c **** 	  }
 7612              		.loc 1 892 8 view .LVU2439
 7613 01ae 029B     		ldr	r3, [sp, #8]
 892:src/display.c **** 	  }
 7614              		.loc 1 892 30 view .LVU2440
 7615 01b0 48BF     		it	mi
 7616 01b2 A6F14502 		submi	r2, r6, #69
 892:src/display.c **** 	  }
 7617              		.loc 1 892 8 view .LVU2441
 7618 01b6 A3EBA203 		sub	r3, r3, r2, asr #2
 7619              	.LBE443:
 882:src/display.c **** 	    int extra_pixels;
 7620              		.loc 1 882 4 view .LVU2442
 7621 01ba 012B     		cmp	r3, #1
 7622              	.LBB444:
 892:src/display.c **** 	  }
 7623              		.loc 1 892 8 view .LVU2443
 7624 01bc 0293     		str	r3, [sp, #8]
 7625              	.LBE444:
 882:src/display.c **** 	    int extra_pixels;
 7626              		.loc 1 882 27 is_stmt 1 view .LVU2444
ARM GAS  /tmp/ccW65oEM.s 			page 229


 882:src/display.c **** 	    int extra_pixels;
 7627              		.loc 1 882 4 is_stmt 0 view .LVU2445
 7628 01be 7FF76EAF 		ble	.L716
 7629              	.LVL852:
 7630              	.L756:
 7631              	.LBB445:
 883:src/display.c **** 
 7632              		.loc 1 883 6 is_stmt 1 view .LVU2446
 885:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7633              		.loc 1 885 6 view .LVU2447
 7634 01c2 02AA     		add	r2, sp, #8
 7635 01c4 3946     		mov	r1, r7
 7636 01c6 03A8     		add	r0, sp, #12
 7637 01c8 FFF7FEFF 		bl	set_x_dn
 7638              	.LVL853:
 886:src/display.c **** 	    if (extra_pixels <= 0)
 7639              		.loc 1 886 6 view .LVU2448
 886:src/display.c **** 	    if (extra_pixels <= 0)
 7640              		.loc 1 886 21 is_stmt 0 view .LVU2449
 7641 01cc 0121     		movs	r1, #1
 7642 01ce 2846     		mov	r0, r5
 7643 01d0 FFF7FEFF 		bl	pixel_length
 7644              	.LVL854:
 890:src/display.c **** 
 7645              		.loc 1 890 6 is_stmt 1 view .LVU2450
 886:src/display.c **** 	    if (extra_pixels <= 0)
 7646              		.loc 1 886 21 is_stmt 0 view .LVU2451
 7647 01d4 0646     		mov	r6, r0
 7648              	.LVL855:
 887:src/display.c **** 	      break;
 7649              		.loc 1 887 6 is_stmt 1 view .LVU2452
 887:src/display.c **** 	      break;
 7650              		.loc 1 887 9 is_stmt 0 view .LVU2453
 7651 01d6 4B2E     		cmp	r6, #75
 890:src/display.c **** 
 7652              		.loc 1 890 6 view .LVU2454
 7653 01d8 4FF00001 		mov	r1, #0
 7654 01dc 3846     		mov	r0, r7
 7655              	.LVL856:
 887:src/display.c **** 	      break;
 7656              		.loc 1 887 9 view .LVU2455
 7657 01de E0DC     		bgt	.L818
 7658              	.LVL857:
 887:src/display.c **** 	      break;
 7659              		.loc 1 887 9 view .LVU2456
 7660              	.LBE445:
 7661 01e0 5DE7     		b	.L716
 7662              	.LVL858:
 7663              	.L808:
 887:src/display.c **** 	      break;
 7664              		.loc 1 887 9 view .LVU2457
 7665              	.LBE440:
 652:src/display.c **** 	    *p2++ = '\006';
 7666              		.loc 1 652 6 is_stmt 1 view .LVU2458
 653:src/display.c **** 	  }
 7667              		.loc 1 653 12 is_stmt 0 view .LVU2459
 7668 01e2 0623     		movs	r3, #6
ARM GAS  /tmp/ccW65oEM.s 			page 230


 7669 01e4 8DF85D30 		strb	r3, [sp, #93]
 652:src/display.c **** 	    *p2++ = '\006';
 7670              		.loc 1 652 12 view .LVU2460
 7671 01e8 8DF85C60 		strb	r6, [sp, #92]
 653:src/display.c **** 	  }
 7672              		.loc 1 653 6 is_stmt 1 view .LVU2461
 7673              	.LVL859:
 656:src/display.c **** 	default:
 7674              		.loc 1 656 2 view .LVU2462
 656:src/display.c **** 	default:
 7675              		.loc 1 656 9 is_stmt 0 view .LVU2463
 7676 01ec FFF7FEFF 		bl	int_mode
 7677              	.LVL860:
 7678 01f0 0138     		subs	r0, r0, #1
 7679 01f2 C0B2     		uxtb	r0, r0
 7680 01f4 0228     		cmp	r0, #2
 7681 01f6 96BF     		itet	ls
 7682 01f8 544B     		ldrls	r3, .L823+28
 7683 01fa 5549     		ldrhi	r1, .L823+32
 7684 01fc 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7685              	.LVL861:
 663:src/display.c **** 	*q++ = '\006';
 7686              		.loc 1 663 2 is_stmt 1 view .LVU2464
 663:src/display.c **** 	*q++ = '\006';
 7687              		.loc 1 663 6 is_stmt 0 view .LVU2465
 7688 0200 0DF15E00 		add	r0, sp, #94
 7689              	.LVL862:
 663:src/display.c **** 	*q++ = '\006';
 7690              		.loc 1 663 6 view .LVU2466
 7691 0204 FFF7FEFF 		bl	scopy
 7692              	.LVL863:
 664:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7693              		.loc 1 664 7 view .LVU2467
 7694 0208 0646     		mov	r6, r0
 7695              	.LVL864:
 664:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7696              		.loc 1 664 7 view .LVU2468
 7697 020a 0623     		movs	r3, #6
 7698 020c 06F8013B 		strb	r3, [r6], #1
 663:src/display.c **** 	*q++ = '\006';
 7699              		.loc 1 663 6 view .LVU2469
 7700 0210 0446     		mov	r4, r0
 7701              	.LVL865:
 664:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7702              		.loc 1 664 2 is_stmt 1 view .LVU2470
 665:src/display.c **** 
 7703              		.loc 1 665 2 view .LVU2471
 665:src/display.c **** 
 7704              		.loc 1 665 7 is_stmt 0 view .LVU2472
 7705 0212 FFF7FEFF 		bl	word_size
 7706              	.LVL866:
 7707 0216 0146     		mov	r1, r0
 7708 0218 3046     		mov	r0, r6
 667:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7709              		.loc 1 667 19 view .LVU2473
 7710 021a 4E4E     		ldr	r6, .L823+36
 7711              	.LVL867:
ARM GAS  /tmp/ccW65oEM.s 			page 231


 665:src/display.c **** 
 7712              		.loc 1 665 7 view .LVU2474
 7713 021c 0222     		movs	r2, #2
 7714 021e FFF7FEFF 		bl	num_arg_0
 7715              	.LVL868:
 667:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7716              		.loc 1 667 19 view .LVU2475
 7717 0222 3368     		ldr	r3, [r6]
 7718              	.LVL869:
 667:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7719              		.loc 1 667 2 is_stmt 1 view .LVU2476
 667:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7720              		.loc 1 667 5 is_stmt 0 view .LVU2477
 7721 0224 002B     		cmp	r3, #0
 7722 0226 51DD     		ble	.L807
 668:src/display.c **** 	  if (*q == '1')
 7723              		.loc 1 668 4 is_stmt 1 view .LVU2478
 668:src/display.c **** 	  if (*q == '1')
 7724              		.loc 1 668 10 is_stmt 0 view .LVU2479
 7725 0228 C3F10702 		rsb	r2, r3, #7
 7726 022c 5200     		lsls	r2, r2, #1
 668:src/display.c **** 	  if (*q == '1')
 7727              		.loc 1 668 6 view .LVU2480
 7728 022e 0292     		str	r2, [sp, #8]
 669:src/display.c **** 	    n += 2;
 7729              		.loc 1 669 4 is_stmt 1 view .LVU2481
 669:src/display.c **** 	    n += 2;
 7730              		.loc 1 669 7 is_stmt 0 view .LVU2482
 7731 0230 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7732 0232 3129     		cmp	r1, #49
 670:src/display.c **** 	  if (q[1] == '1')
 7733              		.loc 1 670 6 is_stmt 1 view .LVU2483
 670:src/display.c **** 	  if (q[1] == '1')
 7734              		.loc 1 670 8 is_stmt 0 view .LVU2484
 7735 0234 04BF     		itt	eq
 7736 0236 0232     		addeq	r2, r2, #2
 7737 0238 0292     		streq	r2, [sp, #8]
 671:src/display.c **** 	    n += 2;
 7738              		.loc 1 671 4 is_stmt 1 view .LVU2485
 671:src/display.c **** 	    n += 2;
 7739              		.loc 1 671 7 is_stmt 0 view .LVU2486
 7740 023a A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7741 023c 3129     		cmp	r1, #49
 7742 023e 00D1     		bne	.L718
 672:src/display.c **** 	  while (n-- > 0)
 7743              		.loc 1 672 6 is_stmt 1 view .LVU2487
 672:src/display.c **** 	  while (n-- > 0)
 7744              		.loc 1 672 8 is_stmt 0 view .LVU2488
 7745 0240 0232     		adds	r2, r2, #2
 7746              	.L718:
 673:src/display.c **** 	    *p2++ = '\006';
 7747              		.loc 1 673 10 is_stmt 1 view .LVU2489
 673:src/display.c **** 	    *p2++ = '\006';
 7748              		.loc 1 673 12 is_stmt 0 view .LVU2490
 7749 0242 511E     		subs	r1, r2, #1
 673:src/display.c **** 	    *p2++ = '\006';
 7750              		.loc 1 673 10 view .LVU2491
ARM GAS  /tmp/ccW65oEM.s 			page 232


 7751 0244 002A     		cmp	r2, #0
 673:src/display.c **** 	    *p2++ = '\006';
 7752              		.loc 1 673 12 view .LVU2492
 7753 0246 0291     		str	r1, [sp, #8]
 673:src/display.c **** 	    *p2++ = '\006';
 7754              		.loc 1 673 10 view .LVU2493
 7755 0248 40F3F780 		ble	.L803
 674:src/display.c **** 
 7756              		.loc 1 674 12 view .LVU2494
 7757 024c 0621     		movs	r1, #6
 7758              	.L719:
 674:src/display.c **** 
 7759              		.loc 1 674 6 is_stmt 1 view .LVU2495
 7760              	.LVL870:
 674:src/display.c **** 
 7761              		.loc 1 674 12 is_stmt 0 view .LVU2496
 7762 024e 00F8011B 		strb	r1, [r0], #1
 7763              	.LVL871:
 673:src/display.c **** 	    *p2++ = '\006';
 7764              		.loc 1 673 10 is_stmt 1 view .LVU2497
 673:src/display.c **** 	    *p2++ = '\006';
 7765              		.loc 1 673 12 is_stmt 0 view .LVU2498
 7766 0252 029B     		ldr	r3, [sp, #8]
 7767 0254 5A1E     		subs	r2, r3, #1
 673:src/display.c **** 	    *p2++ = '\006';
 7768              		.loc 1 673 10 view .LVU2499
 7769 0256 002B     		cmp	r3, #0
 673:src/display.c **** 	    *p2++ = '\006';
 7770              		.loc 1 673 12 view .LVU2500
 7771 0258 0292     		str	r2, [sp, #8]
 673:src/display.c **** 	    *p2++ = '\006';
 7772              		.loc 1 673 10 view .LVU2501
 7773 025a F8DC     		bgt	.L719
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7774              		.loc 1 676 4 is_stmt 1 view .LVU2502
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7775              		.loc 1 676 11 is_stmt 0 view .LVU2503
 7776 025c 3368     		ldr	r3, [r6]
 7777 025e 0293     		str	r3, [sp, #8]
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7778              		.loc 1 676 27 is_stmt 1 view .LVU2504
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7779              		.loc 1 676 4 is_stmt 0 view .LVU2505
 7780 0260 002B     		cmp	r3, #0
 7781 0262 33DB     		blt	.L807
 7782              	.L758:
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7783              		.loc 1 676 4 view .LVU2506
 7784 0264 334C     		ldr	r4, .L823+4
 7785              	.LVL872:
 7786              	.L724:
 677:src/display.c **** 	}
 7787              		.loc 1 677 6 is_stmt 1 view .LVU2507
 677:src/display.c **** 	}
 7788              		.loc 1 677 20 is_stmt 0 view .LVU2508
 7789 0266 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7790 0268 C2F3C202 		ubfx	r2, r2, #3, #3
ARM GAS  /tmp/ccW65oEM.s 			page 233


 677:src/display.c **** 	}
 7791              		.loc 1 677 12 view .LVU2509
 7792 026c 9A42     		cmp	r2, r3
 7793 026e 0CBF     		ite	eq
 7794 0270 7C23     		moveq	r3, #124
 7795 0272 2723     		movne	r3, #39
 7796              	.LVL873:
 677:src/display.c **** 	}
 7797              		.loc 1 677 12 view .LVU2510
 7798 0274 00F8013B 		strb	r3, [r0], #1
 7799              	.LVL874:
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7800              		.loc 1 676 35 is_stmt 1 view .LVU2511
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7801              		.loc 1 676 36 is_stmt 0 view .LVU2512
 7802 0278 029B     		ldr	r3, [sp, #8]
 7803 027a 013B     		subs	r3, r3, #1
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7804              		.loc 1 676 4 view .LVU2513
 7805 027c 002B     		cmp	r3, #0
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7806              		.loc 1 676 36 view .LVU2514
 7807 027e 0293     		str	r3, [sp, #8]
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7808              		.loc 1 676 27 is_stmt 1 view .LVU2515
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7809              		.loc 1 676 4 is_stmt 0 view .LVU2516
 7810 0280 F1DA     		bge	.L724
 897:src/display.c ****       set_status_top(buf2);
 7811              		.loc 1 897 11 is_stmt 1 view .LVU2517
 7812 0282 2846     		mov	r0, r5
 7813              	.LVL875:
 897:src/display.c ****       set_status_top(buf2);
 7814              		.loc 1 897 11 is_stmt 0 view .LVU2518
 7815 0284 FFF7FEFF 		bl	set_status
 7816              	.LVL876:
 898:src/display.c ****       
 7817              		.loc 1 898 7 is_stmt 1 view .LVU2519
 7818              	.LBB448:
3069:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7819              		.loc 1 3069 19 view .LVU2520
 7820              	.LBB439:
3070:src/display.c ****       }
 7821              		.loc 1 3070 2 view .LVU2521
 7822 0288 94F91630 		ldrsb	r3, [r4, #22]
 7823 028c 002B     		cmp	r3, #0
 7824 028e FFF60EAF 		blt	.L769
 7825              	.LVL877:
 7826              	.L813:
 7827              	.LBB437:
 7828              	.LBI437:
3059:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7829              		.loc 1 3059 18 view .LVU2522
 7830              	.LBB438:
3060:src/display.c ****       }
 7831              		.loc 1 3060 2 view .LVU2523
3060:src/display.c ****       }
ARM GAS  /tmp/ccW65oEM.s 			page 234


 7832              		.loc 1 3060 9 is_stmt 0 view .LVU2524
 7833 0292 0021     		movs	r1, #0
 7834 0294 17A8     		add	r0, sp, #92
 7835              	.LVL878:
3060:src/display.c ****       }
 7836              		.loc 1 3060 9 view .LVU2525
 7837 0296 FFF7FEFF 		bl	pixel_length
 7838              	.LVL879:
3060:src/display.c ****       }
 7839              		.loc 1 3060 9 view .LVU2526
 7840              	.LBE438:
 7841              	.LBE437:
3070:src/display.c ****       }
 7842              		.loc 1 3070 2 view .LVU2527
 7843 029a 1A28     		cmp	r0, #26
 7844 029c D4BF     		ite	le
 7845 029e 0021     		movle	r1, #0
 7846 02a0 0121     		movgt	r1, #1
 7847 02a2 05E7     		b	.L757
 7848              	.LVL880:
 7849              	.L814:
3070:src/display.c ****       }
 7850              		.loc 1 3070 2 view .LVU2528
 7851              	.LBE439:
 7852              	.LBE448:
 764:src/display.c **** 	  *p2++ = '\344';
 7853              		.loc 1 764 4 is_stmt 1 view .LVU2529
 765:src/display.c **** 	  *p2++ = shift_char;
 7854              		.loc 1 765 4 view .LVU2530
 764:src/display.c **** 	  *p2++ = '\344';
 7855              		.loc 1 764 10 is_stmt 0 view .LVU2531
 7856 02a4 4EF20743 		movw	r3, #58375
 767:src/display.c **** 	}
 7857              		.loc 1 767 6 view .LVU2532
 7858 02a8 2B49     		ldr	r1, .L823+40
 766:src/display.c **** 	  q = "\024";
 7859              		.loc 1 766 10 view .LVU2533
 7860 02aa 8DF85E60 		strb	r6, [sp, #94]
 764:src/display.c **** 	  *p2++ = '\344';
 7861              		.loc 1 764 10 view .LVU2534
 7862 02ae ADF85C30 		strh	r3, [sp, #92]	@ movhi
 766:src/display.c **** 	  q = "\024";
 7863              		.loc 1 766 4 is_stmt 1 view .LVU2535
 7864              	.LVL881:
 767:src/display.c **** 	}
 7865              		.loc 1 767 4 view .LVU2536
 766:src/display.c **** 	  q = "\024";
 7866              		.loc 1 766 7 is_stmt 0 view .LVU2537
 7867 02b2 0DF15F00 		add	r0, sp, #95
 7868              	.LVL882:
 7869              	.L736:
 812:src/display.c **** 
 7870              		.loc 1 812 2 is_stmt 1 view .LVU2538
 812:src/display.c **** 
 7871              		.loc 1 812 7 is_stmt 0 view .LVU2539
 7872 02b6 FFF7FEFF 		bl	scopy
 7873              	.LVL883:
ARM GAS  /tmp/ccW65oEM.s 			page 235


 812:src/display.c **** 
 7874              		.loc 1 812 7 view .LVU2540
 7875 02ba 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 7876              	.LVL884:
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7877              		.loc 1 817 5 view .LVU2541
 7878 02bc 5E07     		lsls	r6, r3, #29
 7879              	.LVL885:
 596:src/display.c ****       char buf2[42], *p2 = buf2;
 7880              		.loc 1 596 22 view .LVU2542
 7881 02be 2F46     		mov	r7, r5
 7882              	.LVL886:
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7883              		.loc 1 817 2 is_stmt 1 view .LVU2543
 817:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7884              		.loc 1 817 5 is_stmt 0 view .LVU2544
 7885 02c0 7FF516AF 		bpl	.L742
 7886              	.L815:
 818:src/display.c **** 	} else if (State2.runmode) {
 7887              		.loc 1 818 4 is_stmt 1 view .LVU2545
 7888 02c4 2549     		ldr	r1, .L823+44
 7889 02c6 FFF7FEFF 		bl	scopy
 7890              	.LVL887:
 818:src/display.c **** 	} else if (State2.runmode) {
 7891              		.loc 1 818 4 is_stmt 0 view .LVU2546
 7892 02ca E8E6     		b	.L716
 7893              	.LVL888:
 7894              	.L807:
 818:src/display.c **** 	} else if (State2.runmode) {
 7895              		.loc 1 818 4 view .LVU2547
 7896 02cc 194C     		ldr	r4, .L823+4
 7897              	.LVL889:
 818:src/display.c **** 	} else if (State2.runmode) {
 7898              		.loc 1 818 4 view .LVU2548
 7899 02ce E6E6     		b	.L716
 7900              	.LVL890:
 7901              	.L810:
 713:src/display.c **** 	  *p2 = '\015';
 7902              		.loc 1 713 4 is_stmt 1 view .LVU2549
 713:src/display.c **** 	  *p2 = '\015';
 7903              		.loc 1 713 10 is_stmt 0 view .LVU2550
 7904 02d0 2022     		movs	r2, #32
 714:src/display.c **** 	  goto skip;
 7905              		.loc 1 714 8 view .LVU2551
 7906 02d2 0D23     		movs	r3, #13
 713:src/display.c **** 	  *p2 = '\015';
 7907              		.loc 1 713 10 view .LVU2552
 7908 02d4 0270     		strb	r2, [r0]
 714:src/display.c **** 	  goto skip;
 7909              		.loc 1 714 4 is_stmt 1 view .LVU2553
 714:src/display.c **** 	  goto skip;
 7910              		.loc 1 714 8 is_stmt 0 view .LVU2554
 7911 02d6 4370     		strb	r3, [r0, #1]
 715:src/display.c **** 	}
 7912              		.loc 1 715 4 is_stmt 1 view .LVU2555
 7913 02d8 E1E6     		b	.L716
 7914              	.LVL891:
ARM GAS  /tmp/ccW65oEM.s 			page 236


 7915              	.L809:
 708:src/display.c **** 	  *p2 = '\024';
 7916              		.loc 1 708 4 view .LVU2556
 708:src/display.c **** 	  *p2 = '\024';
 7917              		.loc 1 708 10 is_stmt 0 view .LVU2557
 7918 02da 2022     		movs	r2, #32
 709:src/display.c **** 	  goto skip;
 7919              		.loc 1 709 8 view .LVU2558
 7920 02dc 1423     		movs	r3, #20
 708:src/display.c **** 	  *p2 = '\024';
 7921              		.loc 1 708 10 view .LVU2559
 7922 02de 0270     		strb	r2, [r0]
 709:src/display.c **** 	  goto skip;
 7923              		.loc 1 709 4 is_stmt 1 view .LVU2560
 709:src/display.c **** 	  goto skip;
 7924              		.loc 1 709 8 is_stmt 0 view .LVU2561
 7925 02e0 4370     		strb	r3, [r0, #1]
 710:src/display.c **** 	}
 7926              		.loc 1 710 4 is_stmt 1 view .LVU2562
 7927 02e2 DCE6     		b	.L716
 7928              	.LVL892:
 7929              	.L737:
 777:src/display.c **** 	    q = "\007\207i";
 7930              		.loc 1 777 4 view .LVU2563
 777:src/display.c **** 	    q = "\007\207i";
 7931              		.loc 1 777 8 is_stmt 0 view .LVU2564
 7932 02e4 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 777:src/display.c **** 	    q = "\007\207i";
 7933              		.loc 1 777 7 view .LVU2565
 7934 02e6 13F0C00F 		tst	r3, #192
 7935 02ea 40F0A880 		bne	.L819
 782:src/display.c **** 	    q = "\007\307<";
 7936              		.loc 1 782 9 is_stmt 1 view .LVU2566
 782:src/display.c **** 	    q = "\007\307<";
 7937              		.loc 1 782 23 is_stmt 0 view .LVU2567
 7938 02ee 154B     		ldr	r3, .L823+20
 7939 02f0 1B68     		ldr	r3, [r3]
 782:src/display.c **** 	    q = "\007\307<";
 7940              		.loc 1 782 12 view .LVU2568
 7941 02f2 012B     		cmp	r3, #1
 7942 02f4 00F0A980 		beq	.L820
 787:src/display.c **** 	    q = "\007\307y";
 7943              		.loc 1 787 9 is_stmt 1 view .LVU2569
 787:src/display.c **** 	    q = "\007\307y";
 7944              		.loc 1 787 12 is_stmt 0 view .LVU2570
 7945 02f8 022B     		cmp	r3, #2
 7946 02fa 6CD0     		beq	.L821
 793:src/display.c **** 	    q = "\007\207\007";
 7947              		.loc 1 793 9 is_stmt 1 view .LVU2571
 793:src/display.c **** 	    q = "\007\207\007";
 7948              		.loc 1 793 13 is_stmt 0 view .LVU2572
 7949 02fc FFF7FEFF 		bl	get_trig_mode
 7950              	.LVL893:
 793:src/display.c **** 	    q = "\007\207\007";
 7951              		.loc 1 793 12 view .LVU2573
 7952 0300 0228     		cmp	r0, #2
 7953 0302 00F09780 		beq	.L765
ARM GAS  /tmp/ccW65oEM.s 			page 237


 799:src/display.c **** #else
 7954              		.loc 1 799 6 is_stmt 1 view .LVU2574
 799:src/display.c **** #else
 7955              		.loc 1 799 11 is_stmt 0 view .LVU2575
 7956 0306 FFF7FEFF 		bl	is_dblmode
 7957              	.LVL894:
 597:src/display.c ****       int n;
 7958              		.loc 1 597 23 view .LVU2576
 7959 030a 154B     		ldr	r3, .L823+48
 7960 030c 1549     		ldr	r1, .L823+52
 7961 030e 0028     		cmp	r0, #0
 7962 0310 18BF     		it	ne
 7963 0312 1946     		movne	r1, r3
 7964 0314 17A8     		add	r0, sp, #92
 7965              	.LVL895:
 597:src/display.c ****       int n;
 7966              		.loc 1 597 23 view .LVU2577
 7967 0316 CEE7     		b	.L736
 7968              	.LVL896:
 7969              	.L726:
 699:src/display.c **** 	    *p2++ = shift_char;
 7970              		.loc 1 699 30 discriminator 1 view .LVU2578
 7971 0318 FFF7FEFF 		bl	is_dblmode
 7972              	.LVL897:
 699:src/display.c **** 	    *p2++ = shift_char;
 7973              		.loc 1 699 26 discriminator 1 view .LVU2579
 7974 031c 0028     		cmp	r0, #0
 7975 031e 3FF496AE 		beq	.L728
 704:src/display.c **** 	  }
 7976              		.loc 1 704 6 is_stmt 1 view .LVU2580
 7977              	.LVL898:
 704:src/display.c **** 	  }
 7978              		.loc 1 704 12 is_stmt 0 view .LVU2581
 7979 0322 4423     		movs	r3, #68
 7980 0324 8DF85C30 		strb	r3, [sp, #92]
 704:src/display.c **** 	  }
 7981              		.loc 1 704 9 view .LVU2582
 7982 0328 0DF15D00 		add	r0, sp, #93
 7983              	.LVL899:
 704:src/display.c **** 	  }
 7984              		.loc 1 704 9 view .LVU2583
 7985 032c 96E6     		b	.L727
 7986              	.L824:
 7987 032e 00BF     		.align	2
 7988              	.L823:
 7989 0330 00000000 		.word	.LANCHOR15
 7990 0334 00000000 		.word	StateWhileOn
 7991 0338 10000000 		.word	.LC7
 7992 033c 1C000000 		.word	.LC9
 7993 0340 00000000 		.word	ShowRegister
 7994 0344 00000000 		.word	RectPolConv
 7995 0348 4C000000 		.word	.LC19
 7996 034c 00000000 		.word	.LANCHOR16
 7997 0350 00000000 		.word	.LC3
 7998 0354 00000000 		.word	IntMaxWindow
 7999 0358 24000000 		.word	.LC10
 8000 035c 44000000 		.word	.LC17
ARM GAS  /tmp/ccW65oEM.s 			page 238


 8001 0360 28000000 		.word	.LC11
 8002 0364 30000000 		.word	.LC13
 8003 0368 00000000 		.word	main_ram
 8004              	.LVL900:
 8005              	.L812:
 752:src/display.c **** 	}
 8006              		.loc 1 752 4 is_stmt 1 view .LVU2584
 8007 036c 3949     		ldr	r1, .L825
 8008 036e 3046     		mov	r0, r6
 8009 0370 FFF7FEFF 		bl	scopy
 8010              	.LVL901:
 8011 0374 93E6     		b	.L716
 8012              	.LVL902:
 8013              	.L817:
 8014              	.LBB449:
 8015              	.LBB446:
 832:src/display.c **** 
 8016              		.loc 1 832 8 view .LVU2585
 834:src/display.c **** 	      UState.nothousands = 1;
 8017              		.loc 1 834 8 is_stmt 0 view .LVU2586
 8018 0376 2A22     		movs	r2, #42
 8019 0378 2846     		mov	r0, r5
 832:src/display.c **** 
 8020              		.loc 1 832 44 view .LVU2587
 8021 037a 93F8E777 		ldrb	r7, [r3, #2023]	@ zero_extendqisi2
 8022              	.LVL903:
 832:src/display.c **** 
 8023              		.loc 1 832 44 view .LVU2588
 8024 037e 364E     		ldr	r6, .L825+4
 834:src/display.c **** 	      UState.nothousands = 1;
 8025              		.loc 1 834 8 view .LVU2589
 8026 0380 FFF7FEFF 		bl	xset
 8027              	.LVL904:
 835:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8028              		.loc 1 835 27 view .LVU2590
 8029 0384 D8F80020 		ldr	r2, [r8]
 8030 0388 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8031 038c 43F04003 		orr	r3, r3, #64
 8032 0390 82F8E737 		strb	r3, [r2, #2023]
 836:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8033              		.loc 1 836 8 view .LVU2591
 8034 0394 2946     		mov	r1, r5
 8035 0396 03A8     		add	r0, sp, #12
 8036 0398 FFF7FEFF 		bl	set_x_hms
 8037              	.LVL905:
 837:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8038              		.loc 1 837 27 view .LVU2592
 8039 039c D8F80030 		ldr	r3, [r8]
 8040 03a0 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 832:src/display.c **** 
 8041              		.loc 1 832 44 view .LVU2593
 8042 03a4 C7F38017 		ubfx	r7, r7, #6, #1
 8043              	.LVL906:
 834:src/display.c **** 	      UState.nothousands = 1;
 8044              		.loc 1 834 8 is_stmt 1 view .LVU2594
 835:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8045              		.loc 1 835 8 view .LVU2595
ARM GAS  /tmp/ccW65oEM.s 			page 239


 836:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8046              		.loc 1 836 8 view .LVU2596
 837:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8047              		.loc 1 837 8 view .LVU2597
 837:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8048              		.loc 1 837 27 is_stmt 0 view .LVU2598
 8049 03a8 67F38612 		bfi	r2, r7, #6, #1
 8050 03ac 83F8E727 		strb	r2, [r3, #2023]
 842:src/display.c **** 	      while (*p) {
 8051              		.loc 1 842 8 is_stmt 1 view .LVU2599
 8052              	.LVL907:
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8053              		.loc 1 843 8 view .LVU2600
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8054              		.loc 1 843 14 view .LVU2601
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8055              		.loc 1 843 15 is_stmt 0 view .LVU2602
 8056 03b0 4021     		movs	r1, #64
 837:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8057              		.loc 1 837 27 view .LVU2603
 8058 03b2 0522     		movs	r2, #5
 8059 03b4 05E0     		b	.L752
 8060              	.LVL908:
 8061              	.L822:
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8062              		.loc 1 843 15 view .LVU2604
 8063 03b6 16F8021F 		ldrb	r1, [r6, #2]!	@ zero_extendqisi2
 8064              	.LVL909:
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8065              		.loc 1 843 14 view .LVU2605
 8066 03ba 0029     		cmp	r1, #0
 8067 03bc 3FF46FAE 		beq	.L716
 8068 03c0 7278     		ldrb	r2, [r6, #1]	@ zero_extendqisi2
 8069              	.LVL910:
 8070              	.L752:
 844:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8071              		.loc 1 844 3 is_stmt 1 view .LVU2606
 8072 03c2 2846     		mov	r0, r5
 8073 03c4 FFF7FEFF 		bl	replace_char
 8074              	.LVL911:
 845:src/display.c **** 		  goto skip;
 8075              		.loc 1 845 3 view .LVU2607
 845:src/display.c **** 		  goto skip;
 8076              		.loc 1 845 7 is_stmt 0 view .LVU2608
 8077 03c8 0121     		movs	r1, #1
 8078 03ca 2846     		mov	r0, r5
 8079 03cc FFF7FEFF 		bl	pixel_length
 8080              	.LVL912:
 848:src/display.c **** 	      }
 8081              		.loc 1 848 3 is_stmt 1 view .LVU2609
 843:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8082              		.loc 1 843 14 view .LVU2610
 845:src/display.c **** 		  goto skip;
 8083              		.loc 1 845 6 is_stmt 0 view .LVU2611
 8084 03d0 1A28     		cmp	r0, #26
 8085 03d2 F0DC     		bgt	.L822
 8086 03d4 63E6     		b	.L716
ARM GAS  /tmp/ccW65oEM.s 			page 240


 8087              	.LVL913:
 8088              	.L821:
 845:src/display.c **** 		  goto skip;
 8089              		.loc 1 845 6 view .LVU2612
 8090              	.LBE446:
 8091              	.LBE449:
 788:src/display.c **** 	    p = scopy(p, q);
 8092              		.loc 1 788 6 is_stmt 1 view .LVU2613
 789:src/display.c **** 	    goto no_copy;
 8093              		.loc 1 789 6 view .LVU2614
 789:src/display.c **** 	    goto no_copy;
 8094              		.loc 1 789 10 is_stmt 0 view .LVU2615
 8095 03d6 2149     		ldr	r1, .L825+8
 8096              	.LVL914:
 8097              	.L806:
 784:src/display.c **** 	    goto no_copy;
 8098              		.loc 1 784 10 view .LVU2616
 8099 03d8 2846     		mov	r0, r5
 8100 03da FFF7FEFF 		bl	scopy
 8101              	.LVL915:
 8102 03de 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8103 03e0 0746     		mov	r7, r0
 8104              	.LVL916:
 785:src/display.c **** 	  }
 8105              		.loc 1 785 6 is_stmt 1 view .LVU2617
 597:src/display.c ****       int n;
 8106              		.loc 1 597 23 is_stmt 0 view .LVU2618
 8107 03e2 17A8     		add	r0, sp, #92
 8108              	.LVL917:
 785:src/display.c **** 	  }
 8109              		.loc 1 785 6 view .LVU2619
 8110 03e4 81E6     		b	.L738
 8111              	.LVL918:
 8112              	.L811:
 718:src/display.c **** 	  if (State2.wascomplex) {
 8113              		.loc 1 718 28 discriminator 1 view .LVU2620
 8114 03e6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 718:src/display.c **** 	  if (State2.wascomplex) {
 8115              		.loc 1 718 24 discriminator 1 view .LVU2621
 8116 03e8 13F0C00F 		tst	r3, #192
 8117 03ec 29D1     		bne	.L761
 718:src/display.c **** 	  if (State2.wascomplex) {
 8118              		.loc 1 718 60 discriminator 2 view .LVU2622
 8119 03ee 1C4B     		ldr	r3, .L825+12
 8120 03f0 1B68     		ldr	r3, [r3]
 718:src/display.c **** 	  if (State2.wascomplex) {
 8121              		.loc 1 718 46 discriminator 2 view .LVU2623
 8122 03f2 002B     		cmp	r3, #0
 8123 03f4 3FF43DAE 		beq	.L731
 719:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8124              		.loc 1 719 4 is_stmt 1 view .LVU2624
 722:src/display.c **** 	    if (RectPolConv == 1) {
 8125              		.loc 1 722 9 view .LVU2625
 723:src/display.c **** 	      q = "\007\306<";
 8126              		.loc 1 723 6 view .LVU2626
 727:src/display.c **** 	    }
 8127              		.loc 1 727 10 is_stmt 0 view .LVU2627
ARM GAS  /tmp/ccW65oEM.s 			page 241


 8128 03f8 1A49     		ldr	r1, .L825+16
 8129 03fa 1B4A     		ldr	r2, .L825+20
 8130 03fc 012B     		cmp	r3, #1
 8131 03fe 18BF     		it	ne
 8132 0400 1146     		movne	r1, r2
 8133              	.L732:
 8134              	.LVL919:
 730:src/display.c **** 
 8135              		.loc 1 730 4 is_stmt 1 view .LVU2628
 730:src/display.c **** 
 8136              		.loc 1 730 8 is_stmt 0 view .LVU2629
 8137 0402 2846     		mov	r0, r5
 8138              	.LVL920:
 730:src/display.c **** 
 8139              		.loc 1 730 8 view .LVU2630
 8140 0404 FFF7FEFF 		bl	scopy
 8141              	.LVL921:
 730:src/display.c **** 
 8142              		.loc 1 730 8 view .LVU2631
 8143 0408 0746     		mov	r7, r0
 8144              	.LVL922:
 732:src/display.c **** 	}
 8145              		.loc 1 732 4 is_stmt 1 view .LVU2632
 8146 040a 74E6     		b	.L733
 8147              	.LVL923:
 8148              	.L816:
 8149              	.LBB450:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8150              		.loc 1 827 75 is_stmt 0 discriminator 2 view .LVU2633
 8151 040c FFF7FEFF 		bl	stack_size
 8152              	.LVL924:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8153              		.loc 1 827 62 discriminator 2 view .LVU2634
 8154 0410 3168     		ldr	r1, [r6]
 8155 0412 6330     		adds	r0, r0, #99
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8156              		.loc 1 827 46 discriminator 2 view .LVU2635
 8157 0414 8842     		cmp	r0, r1
 8158 0416 FFF673AE 		blt	.L743
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8159              		.loc 1 827 91 discriminator 4 view .LVU2636
 8160 041a FFF7FEFF 		bl	get_cmdline
 8161              	.LVL925:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8162              		.loc 1 827 88 discriminator 4 view .LVU2637
 8163 041e 28B1     		cbz	r0, .L746
 828:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8164              		.loc 1 828 7 view .LVU2638
 8165 0420 B9F1000F 		cmp	r9, #0
 8166 0424 0FD0     		beq	.L745
 828:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8167              		.loc 1 828 28 discriminator 1 view .LVU2639
 8168 0426 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 828:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8169              		.loc 1 828 10 discriminator 1 view .LVU2640
 8170 0428 5A06     		lsls	r2, r3, #25
 8171 042a 0CD4     		bmi	.L745
ARM GAS  /tmp/ccW65oEM.s 			page 242


 8172              	.L746:
 8173 042c 3168     		ldr	r1, [r6]
 8174 042e 67E6     		b	.L743
 8175              	.LVL926:
 8176              	.L763:
 828:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8177              		.loc 1 828 10 discriminator 1 view .LVU2641
 8178              	.LBE450:
 741:src/display.c **** #endif
 8179              		.loc 1 741 19 view .LVU2642
 8180 0430 0E49     		ldr	r1, .L825+24
 8181 0432 2CE6     		b	.L734
 8182              	.LVL927:
 8183              	.L765:
 794:src/display.c **** 	  }
 8184              		.loc 1 794 8 view .LVU2643
 8185 0434 0E49     		ldr	r1, .L825+28
 597:src/display.c ****       int n;
 8186              		.loc 1 597 23 view .LVU2644
 8187 0436 17A8     		add	r0, sp, #92
 8188              	.LVL928:
 597:src/display.c ****       int n;
 8189              		.loc 1 597 23 view .LVU2645
 8190 0438 3DE7     		b	.L736
 8191              	.LVL929:
 8192              	.L803:
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8193              		.loc 1 676 4 is_stmt 1 view .LVU2646
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8194              		.loc 1 676 11 is_stmt 0 view .LVU2647
 8195 043a 0293     		str	r3, [sp, #8]
 676:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8196              		.loc 1 676 27 is_stmt 1 view .LVU2648
 8197 043c 12E7     		b	.L758
 8198              	.LVL930:
 8199              	.L819:
 778:src/display.c **** 	    p = scopy(p, q);
 8200              		.loc 1 778 6 view .LVU2649
 779:src/display.c **** 	    goto no_copy;
 8201              		.loc 1 779 6 view .LVU2650
 779:src/display.c **** 	    goto no_copy;
 8202              		.loc 1 779 10 is_stmt 0 view .LVU2651
 8203 043e 0D49     		ldr	r1, .L825+32
 8204 0440 CAE7     		b	.L806
 8205              	.LVL931:
 8206              	.L761:
 720:src/display.c **** 	  }
 8207              		.loc 1 720 8 view .LVU2652
 8208 0442 0C49     		ldr	r1, .L825+32
 8209 0444 DDE7     		b	.L732
 8210              	.LVL932:
 8211              	.L745:
 8212              	.LBB451:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8213              		.loc 1 827 4 discriminator 7 view .LVU2653
 8214 0446 3168     		ldr	r1, [r6]
 8215 0448 5BE6     		b	.L747
ARM GAS  /tmp/ccW65oEM.s 			page 243


 8216              	.LVL933:
 8217              	.L820:
 827:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8218              		.loc 1 827 4 discriminator 7 view .LVU2654
 8219              	.LBE451:
 783:src/display.c **** 	    p = scopy(p, q);
 8220              		.loc 1 783 6 is_stmt 1 view .LVU2655
 784:src/display.c **** 	    goto no_copy;
 8221              		.loc 1 784 6 view .LVU2656
 784:src/display.c **** 	    goto no_copy;
 8222              		.loc 1 784 10 is_stmt 0 view .LVU2657
 8223 044a 0B49     		ldr	r1, .L825+36
 8224 044c C4E7     		b	.L806
 8225              	.LVL934:
 8226              	.L767:
 8227              	.LBB452:
 8228              	.LBB447:
 866:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8229              		.loc 1 866 25 view .LVU2658
 8230 044e 4FF03E08 		mov	r8, #62
 8231              	.LVL935:
 866:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8232              		.loc 1 866 25 view .LVU2659
 8233 0452 87E6     		b	.L754
 8234              	.L826:
 8235              		.align	2
 8236              	.L825:
 8237 0454 34000000 		.word	.LC14
 8238 0458 00000000 		.word	.LANCHOR17
 8239 045c 40000000 		.word	.LC16
 8240 0460 00000000 		.word	RectPolConv
 8241 0464 04000000 		.word	.LC4
 8242 0468 0C000000 		.word	.LC6
 8243 046c 14000000 		.word	.LC8
 8244 0470 2C000000 		.word	.LC12
 8245 0474 08000000 		.word	.LC5
 8246 0478 3C000000 		.word	.LC15
 8247              	.LBE447:
 8248              	.LBE452:
 8249              		.cfi_endproc
 8250              	.LFE16:
 8252              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8253              		.align	2
 8254              	.LC20:
 8255 0000 0D00     		.ascii	"\015\000"
 8256 0002 0000     		.align	2
 8257              	.LC21:
 8258 0004 060600   		.ascii	"\006\006\000"
 8259 0007 00       		.align	2
 8260              	.LC23:
 8261 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8261      492C2057 
 8261      77414C74 
 8261      4500
 8262 0016 0000     		.align	2
 8263              	.LC24:
 8264 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
ARM GAS  /tmp/ccW65oEM.s 			page 244


 8264      2055204C 
 8264      20492C20 
 8264      20572041 
 8264      204C2054 
 8265 0032 0000     		.align	2
 8266              	.LC25:
 8267 0034 2000     		.ascii	" \000"
 8268 0036 0000     		.align	2
 8269              	.LC26:
 8270 0038 48595000 		.ascii	"HYP\000"
 8271              		.align	2
 8272              	.LC29:
 8273 003c 7F060600 		.ascii	"\177\006\006\000"
 8274              		.align	2
 8275              	.LC30:
 8276 0040 3020746F 		.ascii	"0 to 255\000"
 8276      20323535 
 8276      00
 8277 0049 000000   		.align	2
 8278              	.LC31:
 8279 004c 46726565 		.ascii	"Free:\000"
 8279      3A00
 8280 0052 0000     		.align	2
 8281              	.LC32:
 8282 0054 202C2046 		.ascii	" , FL. \000"
 8282      4C2E2000 
 8283              		.align	2
 8284              	.LC33:
 8285 005c 52656773 		.ascii	"Regs:\000"
 8285      3A00
 8286 0062 0000     		.align	2
 8287              	.LC34:
 8288 0064 20910606 		.ascii	" \221\006\006+\000"
 8288      2B00
 8289 006a 0000     		.align	2
 8290              	.LC35:
 8291 006c 202C204C 		.ascii	" , Loc. \000"
 8291      6F632E20 
 8291      00
 8292 0075 000000   		.align	2
 8293              	.LC36:
 8294 0078 464C2000 		.ascii	"FL \000"
 8295              		.align	2
 8296              	.LC37:
 8297 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8297      06413A44 
 8297      064C494A 
 8297      4B00
 8298 008a 0000     		.align	2
 8299              	.LC38:
 8300 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8300      302D2E31 
 8300      3500
 8301 0096 0000     		.align	2
 8302              	.LC39:
 8303 0098 43414C4C 		.ascii	"CALLS\000"
 8303      5300
ARM GAS  /tmp/ccW65oEM.s 			page 245


 8304 009e 0000     		.align	2
 8305              	.LC40:
 8306 00a0 52656720 		.ascii	"Reg \000"
 8306      00
 8307 00a5 000000   		.align	2
 8308              	.LC41:
 8309 00a8 00       		.ascii	"\000"
 8310 00a9 000000   		.align	2
 8311              	.LC42:
 8312 00ac 202D2D2D 		.ascii	" ---\000"
 8312      00
 8313 00b1 000000   		.align	2
 8314              	.LC28:
 8315 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8315      093E0A00 
 8316              		.align	2
 8317              	.LC27:
 8318 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8318      41424344 
 8318      4C494A4B 
 8318      00
 8319              		.section	.text.display,"ax",%progbits
 8320              		.align	1
 8321              		.p2align 2,,3
 8322              		.global	display
 8323              		.syntax unified
 8324              		.thumb
 8325              		.thumb_func
 8326              		.fpu fpv4-sp-d16
 8328              	display:
 8329              	.LFB34:
2533:src/display.c **** 	int i, j;
 8330              		.loc 1 2533 26 is_stmt 1 view -0
 8331              		.cfi_startproc
 8332              		@ args = 0, pretend = 0, frame = 160
 8333              		@ frame_needed = 0, uses_anonymous_args = 0
2534:src/display.c **** 	char buf[40], *bp = buf;
 8334              		.loc 1 2534 2 view .LVU2661
2535:src/display.c **** 	const char *p;
 8335              		.loc 1 2535 2 view .LVU2662
2533:src/display.c **** 	int i, j;
 8336              		.loc 1 2533 26 is_stmt 0 view .LVU2663
 8337 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8338              		.cfi_def_cfa_offset 36
 8339              		.cfi_offset 4, -36
 8340              		.cfi_offset 5, -32
 8341              		.cfi_offset 6, -28
 8342              		.cfi_offset 7, -24
 8343              		.cfi_offset 8, -20
 8344              		.cfi_offset 9, -16
 8345              		.cfi_offset 10, -12
 8346              		.cfi_offset 11, -8
 8347              		.cfi_offset 14, -4
2538:src/display.c **** 	int skip = 0;
 8348              		.loc 1 2538 24 view .LVU2664
 8349 0004 BE4C     		ldr	r4, .L1119
2533:src/display.c **** 	int i, j;
ARM GAS  /tmp/ccW65oEM.s 			page 246


 8350              		.loc 1 2533 26 view .LVU2665
 8351 0006 A9B0     		sub	sp, sp, #164
 8352              		.cfi_def_cfa_offset 200
 8353              	.LVL936:
2536:src/display.c **** 	int annuc = 0;
 8354              		.loc 1 2536 2 is_stmt 1 view .LVU2666
2537:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8355              		.loc 1 2537 2 view .LVU2667
2538:src/display.c **** 	int skip = 0;
 8356              		.loc 1 2538 2 view .LVU2668
2538:src/display.c **** 	int skip = 0;
 8357              		.loc 1 2538 24 is_stmt 0 view .LVU2669
 8358 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8359              	.LVL937:
2539:src/display.c **** 	int x_disp = 0;
 8360              		.loc 1 2539 2 is_stmt 1 view .LVU2670
2540:src/display.c **** 	const int shift = cur_shift();
 8361              		.loc 1 2540 2 view .LVU2671
2541:src/display.c **** 
 8362              		.loc 1 2541 2 view .LVU2672
2541:src/display.c **** 
 8363              		.loc 1 2541 20 is_stmt 0 view .LVU2673
 8364 000c FFF7FEFF 		bl	cur_shift
 8365              	.LVL938:
2545:src/display.c **** 	  State2.disp_freeze = 0;
 8366              		.loc 1 2545 6 view .LVU2674
 8367 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8368              	.LVL939:
2545:src/display.c **** 	  State2.disp_freeze = 0;
 8369              		.loc 1 2545 2 is_stmt 1 view .LVU2675
2545:src/display.c **** 	  State2.disp_freeze = 0;
 8370              		.loc 1 2545 5 is_stmt 0 view .LVU2676
 8371 0012 13F01006 		ands	r6, r3, #16
 8372 0016 40F08780 		bne	.L1078
2555:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8373              		.loc 1 2555 2 is_stmt 1 view .LVU2677
2555:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8374              		.loc 1 2555 6 is_stmt 0 view .LVU2678
 8375 001a BA4F     		ldr	r7, .L1119+4
 8376 001c 3D68     		ldr	r5, [r7]
2555:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8377              		.loc 1 2555 5 view .LVU2679
 8378 001e 002D     		cmp	r5, #0
 8379 0020 4BD1     		bne	.L1079
2572:src/display.c **** 
 8380              		.loc 1 2572 2 is_stmt 1 view .LVU2680
 8381 0022 8246     		mov	r10, r0
 8382 0024 FFF7FEFF 		bl	reset_disp
 8383              	.LVL940:
2574:src/display.c **** 	if (State2.cmplx  && !cata) {
 8384              		.loc 1 2574 2 view .LVU2681
 8385 0028 1EA8     		add	r0, sp, #120
 8386              	.LVL941:
2574:src/display.c **** 	if (State2.cmplx  && !cata) {
 8387              		.loc 1 2574 2 is_stmt 0 view .LVU2682
 8388 002a 2822     		movs	r2, #40
 8389 002c 2946     		mov	r1, r5
ARM GAS  /tmp/ccW65oEM.s 			page 247


 8390 002e FFF7FEFF 		bl	xset
 8391              	.LVL942:
2575:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8392              		.loc 1 2575 2 is_stmt 1 view .LVU2683
2575:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8393              		.loc 1 2575 6 is_stmt 0 view .LVU2684
 8394 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2575:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8395              		.loc 1 2575 5 view .LVU2685
 8396 0034 9E07     		lsls	r6, r3, #30
 8397 0036 03D5     		bpl	.L962
2575:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8398              		.loc 1 2575 20 discriminator 1 view .LVU2686
 8399 0038 B9F1000F 		cmp	r9, #0
 8400 003c 00F0EC80 		beq	.L1080
 8401              	.L962:
2535:src/display.c **** 	const char *p;
 8402              		.loc 1 2535 17 view .LVU2687
 8403 0040 0DF17808 		add	r8, sp, #120
 8404              	.LVL943:
 8405              	.L833:
2579:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8406              		.loc 1 2579 2 is_stmt 1 view .LVU2688
2579:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8407              		.loc 1 2579 5 is_stmt 0 view .LVU2689
 8408 0044 D806     		lsls	r0, r3, #27
 8409 0046 00F17581 		bmi	.L1081
2591:src/display.c **** 	  set_status(S_SURE);
 8410              		.loc 1 2591 9 is_stmt 1 view .LVU2690
2591:src/display.c **** 	  set_status(S_SURE);
 8411              		.loc 1 2591 13 is_stmt 0 view .LVU2691
 8412 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2591:src/display.c **** 	  set_status(S_SURE);
 8413              		.loc 1 2591 12 view .LVU2692
 8414 004c 5107     		lsls	r1, r2, #29
 8415 004e 40F0F480 		bne	.L1082
2593:src/display.c **** 	  bp = scopy(bp, "HYP");
 8416              		.loc 1 2593 9 is_stmt 1 view .LVU2693
2593:src/display.c **** 	  bp = scopy(bp, "HYP");
 8417              		.loc 1 2593 12 is_stmt 0 view .LVU2694
 8418 0052 9A06     		lsls	r2, r3, #26
 8419 0054 00F1C280 		bmi	.L1083
2598:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8420              		.loc 1 2598 9 is_stmt 1 view .LVU2695
2598:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8421              		.loc 1 2598 12 is_stmt 0 view .LVU2696
 8422 0058 DE07     		lsls	r6, r3, #31
 8423 005a 00F1AE81 		bmi	.L1084
2606:src/display.c **** 	  /* Commands with arguments */
 8424              		.loc 1 2606 9 is_stmt 1 view .LVU2697
2606:src/display.c **** 	  /* Commands with arguments */
 8425              		.loc 1 2606 13 is_stmt 0 view .LVU2698
 8426 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2606:src/display.c **** 	  /* Commands with arguments */
 8427              		.loc 1 2606 12 view .LVU2699
 8428 0060 8806     		lsls	r0, r1, #26
 8429 0062 00F10582 		bmi	.L1085
ARM GAS  /tmp/ccW65oEM.s 			page 248


2637:src/display.c **** 	  *bp++ = 'x';
 8430              		.loc 1 2637 9 is_stmt 1 view .LVU2700
2637:src/display.c **** 	  *bp++ = 'x';
 8431              		.loc 1 2637 19 is_stmt 0 view .LVU2701
 8432 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2637:src/display.c **** 	  *bp++ = 'x';
 8433              		.loc 1 2637 12 view .LVU2702
 8434 0068 072A     		cmp	r2, #7
 8435 006a 40F0E481 		bne	.L1086
2643:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8436              		.loc 1 2643 9 is_stmt 1 view .LVU2703
2643:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8437              		.loc 1 2643 12 is_stmt 0 view .LVU2704
 8438 006e B9F1000F 		cmp	r9, #0
 8439 0072 40F00F83 		bne	.L1087
2691:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8440              		.loc 1 2691 9 is_stmt 1 view .LVU2705
2691:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8441              		.loc 1 2691 12 is_stmt 0 view .LVU2706
 8442 0076 1A07     		lsls	r2, r3, #28
 8443 0078 00F16083 		bmi	.L1088
2699:src/display.c **** 	  show_status();
 8444              		.loc 1 2699 9 is_stmt 1 view .LVU2707
2699:src/display.c **** 	  show_status();
 8445              		.loc 1 2699 19 is_stmt 0 view .LVU2708
 8446 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2699:src/display.c **** 	  show_status();
 8447              		.loc 1 2699 12 view .LVU2709
 8448 007e 002B     		cmp	r3, #0
 8449 0080 40F0E583 		bne	.L1089
2702:src/display.c **** 	  show_label();
 8450              		.loc 1 2702 9 is_stmt 1 view .LVU2710
2702:src/display.c **** 	  show_label();
 8451              		.loc 1 2702 13 is_stmt 0 view .LVU2711
 8452 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2702:src/display.c **** 	  show_label();
 8453              		.loc 1 2702 12 view .LVU2712
 8454 0086 5E07     		lsls	r6, r3, #29
 8455 0088 00F1AC83 		bmi	.L1090
2705:src/display.c **** 	  show_registers();
 8456              		.loc 1 2705 9 is_stmt 1 view .LVU2713
2705:src/display.c **** 	  show_registers();
 8457              		.loc 1 2705 12 is_stmt 0 view .LVU2714
 8458 008c 1807     		lsls	r0, r3, #28
 8459 008e 00F1D484 		bmi	.L1091
2715:src/display.c **** 	  if (DispMsg) { 
 8460              		.loc 1 2715 9 is_stmt 1 view .LVU2715
2715:src/display.c **** 	  if (DispMsg) { 
 8461              		.loc 1 2715 12 is_stmt 0 view .LVU2716
 8462 0092 4806     		lsls	r0, r1, #25
 8463 0094 40F1B284 		bpl	.L898
2716:src/display.c **** 	    set_status(DispMsg);
 8464              		.loc 1 2716 4 is_stmt 1 view .LVU2717
2716:src/display.c **** 	    set_status(DispMsg);
 8465              		.loc 1 2716 8 is_stmt 0 view .LVU2718
 8466 0098 9B4E     		ldr	r6, .L1119+8
 8467 009a D6F800B0 		ldr	fp, [r6]
ARM GAS  /tmp/ccW65oEM.s 			page 249


2716:src/display.c **** 	    set_status(DispMsg);
 8468              		.loc 1 2716 7 view .LVU2719
 8469 009e BBF1000F 		cmp	fp, #0
 8470 00a2 00F08184 		beq	.L899
2717:src/display.c **** 	  } else if (DispPlot) {
 8471              		.loc 1 2717 6 is_stmt 1 view .LVU2720
 8472 00a6 5846     		mov	r0, fp
 8473 00a8 FFF7FEFF 		bl	set_status
 8474              	.LVL944:
2780:src/display.c ****       nostk:	show_flags();
 8475              		.loc 1 2780 2 view .LVU2721
 8476 00ac DFF87882 		ldr	r8, .L1119+40
 8477              	.LVL945:
2780:src/display.c ****       nostk:	show_flags();
 8478              		.loc 1 2780 2 is_stmt 0 view .LVU2722
 8479 00b0 FFF7FEFF 		bl	show_stack
 8480              	.LVL946:
2781:src/display.c **** 	if (!skip) {
 8481              		.loc 1 2781 14 is_stmt 1 view .LVU2723
 8482 00b4 FFF7FEFF 		bl	show_flags
 8483              	.LVL947:
2782:src/display.c **** 	  if (State2.runmode) {
 8484              		.loc 1 2782 2 view .LVU2724
 8485 00b8 C9E0     		b	.L837
 8486              	.LVL948:
 8487              	.L1079:
2562:src/display.c **** 
 8488              		.loc 1 2562 4 view .LVU2725
 8489 00ba FFF7FEFF 		bl	wait_for_display
 8490              	.LVL949:
2565:src/display.c **** 	    clr_dot(i);
 8491              		.loc 1 2565 4 view .LVU2726
2565:src/display.c **** 	    clr_dot(i);
 8492              		.loc 1 2565 16 view .LVU2727
 8493              	.L831:
2566:src/display.c **** 	  }
 8494              		.loc 1 2566 6 discriminator 3 view .LVU2728
 8495 00be 3046     		mov	r0, r6
2565:src/display.c **** 	    clr_dot(i);
 8496              		.loc 1 2565 31 is_stmt 0 discriminator 3 view .LVU2729
 8497 00c0 0136     		adds	r6, r6, #1
 8498              	.LVL950:
2566:src/display.c **** 	  }
 8499              		.loc 1 2566 6 discriminator 3 view .LVU2730
 8500 00c2 FFF7FEFF 		bl	clr_dot
 8501              	.LVL951:
2565:src/display.c **** 	    clr_dot(i);
 8502              		.loc 1 2565 31 is_stmt 1 discriminator 3 view .LVU2731
2565:src/display.c **** 	    clr_dot(i);
 8503              		.loc 1 2565 16 discriminator 3 view .LVU2732
2565:src/display.c **** 	    clr_dot(i);
 8504              		.loc 1 2565 4 is_stmt 0 discriminator 3 view .LVU2733
 8505 00c6 832E     		cmp	r6, #131
 8506 00c8 F9D1     		bne	.L831
 8507 00ca 8F4E     		ldr	r6, .L1119+8
 8508              	.LVL952:
2565:src/display.c **** 	    clr_dot(i);
ARM GAS  /tmp/ccW65oEM.s 			page 250


 8509              		.loc 1 2565 4 discriminator 3 view .LVU2734
 8510 00cc DFF85882 		ldr	r8, .L1119+40
2537:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8511              		.loc 1 2537 6 view .LVU2735
 8512 00d0 0025     		movs	r5, #0
 8513              	.LVL953:
 8514              	.L832:
2785:src/display.c **** 	    if (p == NULL || cata) {
 8515              		.loc 1 2785 6 is_stmt 1 view .LVU2736
2785:src/display.c **** 	    if (p == NULL || cata) {
 8516              		.loc 1 2785 10 is_stmt 0 view .LVU2737
 8517 00d2 FFF7FEFF 		bl	get_cmdline
 8518              	.LVL954:
2786:src/display.c **** 	      if (ShowRegister != -1) {
 8519              		.loc 1 2786 6 is_stmt 1 view .LVU2738
2786:src/display.c **** 	      if (ShowRegister != -1) {
 8520              		.loc 1 2786 9 is_stmt 0 view .LVU2739
 8521 00d6 8246     		mov	r10, r0
 8522 00d8 10B1     		cbz	r0, .L913
2786:src/display.c **** 	      if (ShowRegister != -1) {
 8523              		.loc 1 2786 20 discriminator 1 view .LVU2740
 8524 00da B9F1000F 		cmp	r9, #0
 8525 00de 2ED0     		beq	.L914
 8526              	.L913:
2787:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8527              		.loc 1 2787 8 is_stmt 1 view .LVU2741
2787:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8528              		.loc 1 2787 25 is_stmt 0 view .LVU2742
 8529 00e0 DFF84892 		ldr	r9, .L1119+44
 8530              	.LVL955:
2787:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8531              		.loc 1 2787 25 view .LVU2743
 8532 00e4 D9F80000 		ldr	r0, [r9]
 8533              	.LVL956:
2787:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8534              		.loc 1 2787 11 view .LVU2744
 8535 00e8 421C     		adds	r2, r0, #1
 8536 00ea 00F05081 		beq	.L915
2788:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8537              		.loc 1 2788 3 is_stmt 1 view .LVU2745
2788:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8538              		.loc 1 2788 39 is_stmt 0 view .LVU2746
 8539 00ee 6428     		cmp	r0, #100
 8540 00f0 00F08780 		beq	.L1092
 8541              	.L916:
2789:src/display.c **** 	      }
 8542              		.loc 1 2789 3 is_stmt 1 view .LVU2747
 8543 00f4 0021     		movs	r1, #0
 8544 00f6 FFF7FEFF 		bl	format_reg
 8545              	.LVL957:
2797:src/display.c **** 	      goto finish;
 8546              		.loc 1 2797 6 view .LVU2748
2797:src/display.c **** 	      goto finish;
 8547              		.loc 1 2797 9 is_stmt 0 view .LVU2749
 8548 00fa 3B68     		ldr	r3, [r7]
 8549 00fc 002B     		cmp	r3, #0
 8550 00fe 00F0FC80 		beq	.L1075
ARM GAS  /tmp/ccW65oEM.s 			page 251


 8551              	.LVL958:
 8552              	.L919:
2850:src/display.c **** 	State2.disp_as_alpha = 0;
 8553              		.loc 1 2850 2 is_stmt 1 view .LVU2750
2851:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8554              		.loc 1 2851 2 view .LVU2751
2852:src/display.c **** 	State2.invalid_disp = 0;
 8555              		.loc 1 2852 2 view .LVU2752
2850:src/display.c **** 	State2.disp_as_alpha = 0;
 8556              		.loc 1 2850 17 is_stmt 0 view .LVU2753
 8557 0102 6369     		ldr	r3, [r4, #20]
 8558 0104 23F02173 		bic	r3, r3, #42205184
 8559 0108 23F48053 		bic	r3, r3, #4096
2852:src/display.c **** 	State2.invalid_disp = 0;
 8560              		.loc 1 2852 15 view .LVU2754
 8561 010c 0022     		movs	r2, #0
2850:src/display.c **** 	State2.disp_as_alpha = 0;
 8562              		.loc 1 2850 17 view .LVU2755
 8563 010e 6361     		str	r3, [r4, #20]
2854:src/display.c **** 	DispMsg = CNULL;
 8564              		.loc 1 2854 15 view .LVU2756
 8565 0110 6423     		movs	r3, #100
2852:src/display.c **** 	State2.invalid_disp = 0;
 8566              		.loc 1 2852 15 view .LVU2757
 8567 0112 6274     		strb	r2, [r4, #17]
2853:src/display.c **** 	ShowRegister = regX_idx;
 8568              		.loc 1 2853 2 is_stmt 1 view .LVU2758
2854:src/display.c **** 	DispMsg = CNULL;
 8569              		.loc 1 2854 2 view .LVU2759
2855:src/display.c **** 	DispPlot = 0;
 8570              		.loc 1 2855 10 is_stmt 0 view .LVU2760
 8571 0114 3260     		str	r2, [r6]
2856:src/display.c **** 	State2.disp_small = 0;
 8572              		.loc 1 2856 11 view .LVU2761
 8573 0116 A8F80020 		strh	r2, [r8]	@ movhi
2854:src/display.c **** 	DispMsg = CNULL;
 8574              		.loc 1 2854 15 view .LVU2762
 8575 011a C9F80030 		str	r3, [r9]
2855:src/display.c **** 	DispPlot = 0;
 8576              		.loc 1 2855 2 is_stmt 1 view .LVU2763
2856:src/display.c **** 	State2.disp_small = 0;
 8577              		.loc 1 2856 2 view .LVU2764
2857:src/display.c **** 	finish_display();
 8578              		.loc 1 2857 2 view .LVU2765
2858:src/display.c **** #ifdef CONSOLE
 8579              		.loc 1 2858 2 view .LVU2766
 8580 011e FFF7FEFF 		bl	finish_display
 8581              	.LVL959:
2862:src/display.c **** 
 8582              		.loc 1 2862 7 is_stmt 0 view .LVU2767
 8583 0122 29B0     		add	sp, sp, #164
 8584              		.cfi_remember_state
 8585              		.cfi_def_cfa_offset 36
 8586              		@ sp needed
 8587 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8588              	.LVL960:
 8589              	.L1078:
ARM GAS  /tmp/ccW65oEM.s 			page 252


 8590              		.cfi_restore_state
2546:src/display.c **** 	  State2.disp_temp = 1;
 8591              		.loc 1 2546 4 is_stmt 1 view .LVU2768
2547:src/display.c **** #ifdef CONSOLE
 8592              		.loc 1 2547 4 view .LVU2769
2551:src/display.c **** 	  return;
 8593              		.loc 1 2551 12 is_stmt 0 view .LVU2770
 8594 0128 784A     		ldr	r2, .L1119+12
2546:src/display.c **** 	  State2.disp_temp = 1;
 8595              		.loc 1 2546 23 view .LVU2771
 8596 012a 23F03003 		bic	r3, r3, #48
 8597 012e 43F02003 		orr	r3, r3, #32
2551:src/display.c **** 	  return;
 8598              		.loc 1 2551 12 view .LVU2772
 8599 0132 0021     		movs	r1, #0
2546:src/display.c **** 	  State2.disp_temp = 1;
 8600              		.loc 1 2546 23 view .LVU2773
 8601 0134 E375     		strb	r3, [r4, #23]
2551:src/display.c **** 	  return;
 8602              		.loc 1 2551 4 is_stmt 1 view .LVU2774
2551:src/display.c **** 	  return;
 8603              		.loc 1 2551 12 is_stmt 0 view .LVU2775
 8604 0136 1160     		str	r1, [r2]
2552:src/display.c **** 	}
 8605              		.loc 1 2552 4 is_stmt 1 view .LVU2776
2862:src/display.c **** 
 8606              		.loc 1 2862 7 is_stmt 0 view .LVU2777
 8607 0138 29B0     		add	sp, sp, #164
 8608              		.cfi_remember_state
 8609              		.cfi_def_cfa_offset 36
 8610              		@ sp needed
 8611 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8612              	.LVL961:
 8613              	.L914:
 8614              		.cfi_restore_state
2794:src/display.c **** 	      x_disp = 1;
 8615              		.loc 1 2794 8 is_stmt 1 view .LVU2778
 8616              	.LBB496:
 8617              	.LBI496:
1202:src/display.c ****       int i;
 8618              		.loc 1 1202 17 view .LVU2779
 8619              	.LBB497:
1203:src/display.c ****       int gotdot = -1;
 8620              		.loc 1 1203 7 view .LVU2780
1204:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8621              		.loc 1 1204 7 view .LVU2781
1206:src/display.c **** #endif
 8622              		.loc 1 1206 7 view .LVU2782
1210:src/display.c **** #endif
 8623              		.loc 1 1210 7 view .LVU2783
1213:src/display.c **** 	SET_MANT_SIGN;
 8624              		.loc 1 1213 7 view .LVU2784
1213:src/display.c **** 	SET_MANT_SIGN;
 8625              		.loc 1 1213 10 is_stmt 0 view .LVU2785
 8626 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8627 0140 2D2B     		cmp	r3, #45
 8628 0142 00F03E82 		beq	.L1093
ARM GAS  /tmp/ccW65oEM.s 			page 253


 8629              	.LVL962:
 8630              	.L920:
1218:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8631              		.loc 1 1218 7 is_stmt 1 view .LVU2786
1218:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8632              		.loc 1 1218 11 is_stmt 0 view .LVU2787
 8633 0146 724B     		ldr	r3, .L1119+16
 8634 0148 1B68     		ldr	r3, [r3]
 8635 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1218:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8636              		.loc 1 1218 10 view .LVU2788
 8637 014e 13F00109 		ands	r9, r3, #1
 8638              	.LVL963:
1218:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8639              		.loc 1 1218 10 view .LVU2789
 8640 0152 00F0AC81 		beq	.L921
 8641              	.LVL964:
1219:src/display.c **** 	  set_dig(i, *p);
 8642              		.loc 1 1219 12 is_stmt 1 view .LVU2790
 8643 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1219:src/display.c **** 	  set_dig(i, *p);
 8644              		.loc 1 1219 8 is_stmt 0 view .LVU2791
 8645 015a 4FF00009 		mov	r9, #0
1219:src/display.c **** 	  set_dig(i, *p);
 8646              		.loc 1 1219 2 view .LVU2792
 8647 015e 41B1     		cbz	r1, .L925
 8648              	.LVL965:
 8649              	.L922:
1220:src/display.c **** 	  i += SEGS_PER_DIGIT;
 8650              		.loc 1 1220 4 is_stmt 1 view .LVU2793
 8651 0160 4846     		mov	r0, r9
 8652 0162 FFF7FEFF 		bl	set_dig
 8653              	.LVL966:
1221:src/display.c **** 	}
 8654              		.loc 1 1221 4 view .LVU2794
1219:src/display.c **** 	  set_dig(i, *p);
 8655              		.loc 1 1219 12 is_stmt 0 view .LVU2795
 8656 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8657              	.LVL967:
1221:src/display.c **** 	}
 8658              		.loc 1 1221 6 view .LVU2796
 8659 016a 09F10909 		add	r9, r9, #9
 8660              	.LVL968:
1219:src/display.c **** 	  set_dig(i, *p);
 8661              		.loc 1 1219 24 is_stmt 1 view .LVU2797
1219:src/display.c **** 	  set_dig(i, *p);
 8662              		.loc 1 1219 12 view .LVU2798
1219:src/display.c **** 	  set_dig(i, *p);
 8663              		.loc 1 1219 2 is_stmt 0 view .LVU2799
 8664 016e 0029     		cmp	r1, #0
 8665 0170 F6D1     		bne	.L922
 8666              	.LVL969:
 8667              	.L925:
1223:src/display.c ****       } else {
 8668              		.loc 1 1223 2 is_stmt 1 view .LVU2800
 8669 0172 FFF7FEFF 		bl	carry_overflow
 8670              	.LVL970:
ARM GAS  /tmp/ccW65oEM.s 			page 254


1223:src/display.c ****       } else {
 8671              		.loc 1 1223 2 is_stmt 0 view .LVU2801
 8672              	.LBE497:
 8673              	.LBE496:
2797:src/display.c **** 	      goto finish;
 8674              		.loc 1 2797 6 is_stmt 1 view .LVU2802
2797:src/display.c **** 	      goto finish;
 8675              		.loc 1 2797 9 is_stmt 0 view .LVU2803
 8676 0176 3B68     		ldr	r3, [r7]
 8677 0178 DFF8B091 		ldr	r9, .L1119+44
 8678 017c 002B     		cmp	r3, #0
 8679 017e C0D1     		bne	.L919
 8680              	.LVL971:
 8681              	.L924:
2827:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8682              		.loc 1 2827 2 is_stmt 1 view .LVU2804
 8683 0180 FFF7FEFF 		bl	set_annunciators
 8684              	.LVL972:
2828:src/display.c **** 	  ShowRPN = 0;
 8685              		.loc 1 2828 2 view .LVU2805
2828:src/display.c **** 	  ShowRPN = 0;
 8686              		.loc 1 2828 50 is_stmt 0 view .LVU2806
 8687 0184 3368     		ldr	r3, [r6]
 8688 0186 002B     		cmp	r3, #0
 8689 0188 00F00981 		beq	.L1094
 8690              	.LVL973:
 8691              	.L835:
2829:src/display.c **** 	  dot(RPN, 0);
 8692              		.loc 1 2829 4 is_stmt 1 view .LVU2807
2829:src/display.c **** 	  dot(RPN, 0);
 8693              		.loc 1 2829 12 is_stmt 0 view .LVU2808
 8694 018c 5F4F     		ldr	r7, .L1119+12
 8695 018e 0023     		movs	r3, #0
 8696              	.LBB520:
 8697              	.LBB521:
 334:src/display.c **** }
 8698              		.loc 1 334 8 view .LVU2809
 8699 0190 8D20     		movs	r0, #141
 8700              	.LBE521:
 8701              	.LBE520:
2829:src/display.c **** 	  dot(RPN, 0);
 8702              		.loc 1 2829 12 view .LVU2810
 8703 0192 3B60     		str	r3, [r7]
2830:src/display.c **** 	}
 8704              		.loc 1 2830 4 is_stmt 1 view .LVU2811
 8705              	.LVL974:
 8706              	.LBB523:
 8707              	.LBI520:
 332:src/display.c ****   if (on)	set_dot(n);
 8708              		.loc 1 332 6 view .LVU2812
 8709              	.LBB522:
 333:src/display.c ****   else	clr_dot(n);
 8710              		.loc 1 333 3 view .LVU2813
 334:src/display.c **** }
 8711              		.loc 1 334 8 view .LVU2814
 8712 0194 FFF7FEFF 		bl	clr_dot
 8713              	.LVL975:
ARM GAS  /tmp/ccW65oEM.s 			page 255


 8714              	.L952:
 334:src/display.c **** }
 8715              		.loc 1 334 8 is_stmt 0 view .LVU2815
 8716              	.LBE522:
 8717              	.LBE523:
2833:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8718              		.loc 1 2833 2 is_stmt 1 view .LVU2816
2834:src/display.c **** 
 8719              		.loc 1 2834 4 is_stmt 0 view .LVU2817
 8720 0198 3B68     		ldr	r3, [r7]
 8721 019a 002B     		cmp	r3, #0
 8722 019c 4BD1     		bne	.L970
2833:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8723              		.loc 1 2833 31 view .LVU2818
 8724 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8725 01a0 12F04003 		ands	r3, r2, #64
 8726 01a4 08D0     		beq	.L953
2834:src/display.c **** 
 8727              		.loc 1 2834 8 view .LVU2819
 8728 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2834:src/display.c **** 
 8729              		.loc 1 2834 4 view .LVU2820
 8730 01a8 1B07     		lsls	r3, r3, #28
 8731 01aa 40F1EE80 		bpl	.L972
2834:src/display.c **** 
 8732              		.loc 1 2834 30 discriminator 3 view .LVU2821
 8733 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8734 01b0 012B     		cmp	r3, #1
 8735 01b2 01D0     		beq	.L953
2834:src/display.c **** 
 8736              		.loc 1 2834 60 discriminator 5 view .LVU2822
 8737 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8738              	.L953:
2833:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8739              		.loc 1 2833 19 discriminator 9 view .LVU2823
 8740 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8741 01ba 63F34512 		bfi	r2, r3, #5, #1
 8742 01be E275     		strb	r2, [r4, #23]
2837:src/display.c **** 	  annunciators();
 8743              		.loc 1 2837 2 is_stmt 1 discriminator 9 view .LVU2824
2837:src/display.c **** 	  annunciators();
 8744              		.loc 1 2837 5 is_stmt 0 discriminator 9 view .LVU2825
 8745 01c0 002D     		cmp	r5, #0
 8746 01c2 33D0     		beq	.L954
2837:src/display.c **** 	  annunciators();
 8747              		.loc 1 2837 36 discriminator 1 view .LVU2826
 8748 01c4 D3B2     		uxtb	r3, r2
2837:src/display.c **** 	  annunciators();
 8749              		.loc 1 2837 13 discriminator 1 view .LVU2827
 8750 01c6 03F02103 		and	r3, r3, #33
 8751 01ca 202B     		cmp	r3, #32
 8752 01cc 2ED0     		beq	.L954
 8753              	.L955:
2838:src/display.c ****  	State2.hms = 0;
 8754              		.loc 1 2838 4 is_stmt 1 view .LVU2828
 8755 01ce FFF7FEFF 		bl	annunciators
 8756              	.LVL976:
ARM GAS  /tmp/ccW65oEM.s 			page 256


 8757              	.L956:
2839:src/display.c **** #else
 8758              		.loc 1 2839 3 view .LVU2829
2839:src/display.c **** #else
 8759              		.loc 1 2839 14 is_stmt 0 view .LVU2830
 8760 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8761 01d4 6FF30003 		bfc	r3, #0, #1
 8762 01d8 E375     		strb	r3, [r4, #23]
 8763 01da 92E7     		b	.L919
 8764              	.LVL977:
 8765              	.L1083:
2594:src/display.c **** 	  if (! State2.dot)
 8766              		.loc 1 2594 4 is_stmt 1 view .LVU2831
2594:src/display.c **** 	  if (! State2.dot)
 8767              		.loc 1 2594 9 is_stmt 0 view .LVU2832
 8768 01dc 4D49     		ldr	r1, .L1119+20
 8769 01de 4046     		mov	r0, r8
 8770 01e0 FFF7FEFF 		bl	scopy
 8771              	.LVL978:
2595:src/display.c **** 	    *bp++ = '\235';
 8772              		.loc 1 2595 8 view .LVU2833
 8773 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8774              	.LVL979:
2595:src/display.c **** 	    *bp++ = '\235';
 8775              		.loc 1 2595 4 is_stmt 1 view .LVU2834
2595:src/display.c **** 	    *bp++ = '\235';
 8776              		.loc 1 2595 7 is_stmt 0 view .LVU2835
 8777 01e6 5B06     		lsls	r3, r3, #25
 8778 01e8 40F1FD80 		bpl	.L839
 8779              	.LVL980:
 8780              	.L1070:
2595:src/display.c **** 	    *bp++ = '\235';
 8781              		.loc 1 2595 7 view .LVU2836
 8782 01ec 464E     		ldr	r6, .L1119+8
 8783 01ee DFF83881 		ldr	r8, .L1119+40
 8784              	.L840:
2597:src/display.c **** 	} else if (State2.gtodot) {
 8785              		.loc 1 2597 4 is_stmt 1 view .LVU2837
 8786 01f2 1EA8     		add	r0, sp, #120
 8787 01f4 FFF7FEFF 		bl	set_status
 8788              	.LVL981:
2780:src/display.c ****       nostk:	show_flags();
 8789              		.loc 1 2780 2 view .LVU2838
 8790 01f8 FFF7FEFF 		bl	show_stack
 8791              	.LVL982:
2781:src/display.c **** 	if (!skip) {
 8792              		.loc 1 2781 14 view .LVU2839
 8793 01fc FFF7FEFF 		bl	show_flags
 8794              	.LVL983:
2782:src/display.c **** 	  if (State2.runmode) {
 8795              		.loc 1 2782 2 view .LVU2840
 8796 0200 25E0     		b	.L837
 8797              	.LVL984:
 8798              	.L1092:
2788:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8799              		.loc 1 2788 42 is_stmt 0 discriminator 1 view .LVU2841
 8800 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccW65oEM.s 			page 257


2788:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8801              		.loc 1 2788 39 discriminator 1 view .LVU2842
 8802 0204 13F00101 		ands	r1, r3, #1
 8803 0208 7FF474AF 		bne	.L916
 8804              	.LVL985:
2789:src/display.c **** 	      }
 8805              		.loc 1 2789 3 is_stmt 1 view .LVU2843
 8806 020c FFF7FEFF 		bl	format_reg
 8807              	.LVL986:
2797:src/display.c **** 	      goto finish;
 8808              		.loc 1 2797 6 view .LVU2844
2797:src/display.c **** 	      goto finish;
 8809              		.loc 1 2797 9 is_stmt 0 view .LVU2845
 8810 0210 3B68     		ldr	r3, [r7]
 8811 0212 002B     		cmp	r3, #0
 8812 0214 B4D0     		beq	.L924
 8813 0216 74E7     		b	.L919
 8814              	.LVL987:
 8815              	.L1080:
2576:src/display.c **** 	  set_status(buf);
 8816              		.loc 1 2576 4 is_stmt 1 view .LVU2846
2576:src/display.c **** 	  set_status(buf);
 8817              		.loc 1 2576 10 is_stmt 0 view .LVU2847
 8818 0218 1423     		movs	r3, #20
2577:src/display.c **** 	}
 8819              		.loc 1 2577 4 view .LVU2848
 8820 021a 1EA8     		add	r0, sp, #120
2576:src/display.c **** 	  set_status(buf);
 8821              		.loc 1 2576 10 view .LVU2849
 8822 021c 8DF87830 		strb	r3, [sp, #120]
2577:src/display.c **** 	}
 8823              		.loc 1 2577 4 is_stmt 1 view .LVU2850
2576:src/display.c **** 	  set_status(buf);
 8824              		.loc 1 2576 7 is_stmt 0 view .LVU2851
 8825 0220 0DF17908 		add	r8, sp, #121
 8826              	.LVL988:
2577:src/display.c **** 	}
 8827              		.loc 1 2577 4 view .LVU2852
 8828 0224 FFF7FEFF 		bl	set_status
 8829              	.LVL989:
 8830 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8831 022a 0BE7     		b	.L833
 8832              	.LVL990:
 8833              	.L954:
2837:src/display.c **** 	  annunciators();
 8834              		.loc 1 2837 52 discriminator 3 view .LVU2853
 8835 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8836 022e 13F0C00F 		tst	r3, #192
 8837 0232 CED0     		beq	.L956
 8838 0234 CBE7     		b	.L955
 8839              	.L970:
 8840 0236 0023     		movs	r3, #0
 8841 0238 BEE7     		b	.L953
 8842              	.LVL991:
 8843              	.L1082:
2592:src/display.c **** 	} else if (State2.hyp) {
 8844              		.loc 1 2592 4 is_stmt 1 view .LVU2854
ARM GAS  /tmp/ccW65oEM.s 			page 258


 8845 023a 3748     		ldr	r0, .L1119+24
 8846 023c 324E     		ldr	r6, .L1119+8
 8847 023e DFF8E880 		ldr	r8, .L1119+40
 8848              	.LVL992:
2592:src/display.c **** 	} else if (State2.hyp) {
 8849              		.loc 1 2592 4 is_stmt 0 view .LVU2855
 8850 0242 FFF7FEFF 		bl	set_status
 8851              	.LVL993:
2780:src/display.c ****       nostk:	show_flags();
 8852              		.loc 1 2780 2 is_stmt 1 view .LVU2856
 8853 0246 FFF7FEFF 		bl	show_stack
 8854              	.LVL994:
2781:src/display.c **** 	if (!skip) {
 8855              		.loc 1 2781 14 view .LVU2857
 8856 024a FFF7FEFF 		bl	show_flags
 8857              	.LVL995:
2782:src/display.c **** 	  if (State2.runmode) {
 8858              		.loc 1 2782 2 view .LVU2858
 8859              	.L837:
2783:src/display.c **** 	  only_update_x:
 8860              		.loc 1 2783 4 view .LVU2859
2783:src/display.c **** 	  only_update_x:
 8861              		.loc 1 2783 8 is_stmt 0 view .LVU2860
 8862 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2783:src/display.c **** 	  only_update_x:
 8863              		.loc 1 2783 7 view .LVU2861
 8864 0250 13F0400A 		ands	r10, r3, #64
 8865 0254 7FF43DAF 		bne	.L832
 8866              	.LBB524:
2801:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8867              		.loc 1 2801 6 is_stmt 1 view .LVU2862
2801:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8868              		.loc 1 2801 24 is_stmt 0 view .LVU2863
 8869 0258 2D4B     		ldr	r3, .L1119+16
2805:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8870              		.loc 1 2805 6 view .LVU2864
 8871 025a DFF8D490 		ldr	r9, .L1119+48
 8872              	.LVL996:
2801:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8873              		.loc 1 2801 24 view .LVU2865
 8874 025e 1B68     		ldr	r3, [r3]
2801:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8875              		.loc 1 2801 19 view .LVU2866
 8876 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8877              	.LVL997:
2802:src/display.c **** 	    const int n = nLIB(pc);
 8878              		.loc 1 2802 6 is_stmt 1 view .LVU2867
2802:src/display.c **** 	    const int n = nLIB(pc);
 8879              		.loc 1 2802 25 is_stmt 0 view .LVU2868
 8880 0264 3846     		mov	r0, r7
 8881 0266 FFF7FEFF 		bl	user_pc
 8882              	.LVL998:
2804:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8883              		.loc 1 2804 6 view .LVU2869
 8884 026a 2822     		movs	r2, #40
 8885 026c 5146     		mov	r1, r10
2802:src/display.c **** 	    const int n = nLIB(pc);
ARM GAS  /tmp/ccW65oEM.s 			page 259


 8886              		.loc 1 2802 25 view .LVU2870
 8887 026e 8346     		mov	fp, r0
2804:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8888              		.loc 1 2804 6 view .LVU2871
 8889 0270 1EA8     		add	r0, sp, #120
 8890 0272 FFF7FEFF 		bl	xset
 8891              	.LVL999:
2803:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8892              		.loc 1 2803 20 view .LVU2872
 8893 0276 BF0B     		lsrs	r7, r7, #14
 8894              	.LVL1000:
2803:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8895              		.loc 1 2803 6 is_stmt 1 view .LVU2873
2804:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8896              		.loc 1 2804 6 view .LVU2874
2805:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8897              		.loc 1 2805 6 view .LVU2875
 8898 0278 D9F80000 		ldr	r0, [r9]
 8899 027c 5246     		mov	r2, r10
 8900 027e 0121     		movs	r1, #1
 8901 0280 FFF7FEFF 		bl	set_exp
 8902              	.LVL1001:
2806:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8903              		.loc 1 2806 6 view .LVU2876
 8904 0284 002F     		cmp	r7, #0
 8905 0286 40F0B480 		bne	.L1095
 8906 028a 2449     		ldr	r1, .L1119+28
 8907 028c 1EA8     		add	r0, sp, #120
 8908 028e FFF7FEFF 		bl	scopy_spc
 8909              	.LVL1002:
 8910 0292 0322     		movs	r2, #3
 8911 0294 5946     		mov	r1, fp
 8912 0296 FFF7FEFF 		bl	num_arg_0
 8913              	.LVL1003:
2808:src/display.c **** #ifndef REALBUILD
 8914              		.loc 1 2808 6 view .LVU2877
 8915 029a 0921     		movs	r1, #9
 8916 029c 1EA8     		add	r0, sp, #120
 8917 029e FFF7FEFF 		bl	set_digits_string
 8918              	.LVL1004:
2810:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8919              		.loc 1 2810 6 view .LVU2878
 8920 02a2 3946     		mov	r1, r7
 8921 02a4 2822     		movs	r2, #40
 8922 02a6 1EA8     		add	r0, sp, #120
 8923 02a8 FFF7FEFF 		bl	xset
 8924              	.LVL1005:
2811:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8925              		.loc 1 2811 6 view .LVU2879
 8926 02ac 3A46     		mov	r2, r7
 8927 02ae 0121     		movs	r1, #1
 8928 02b0 D9F80000 		ldr	r0, [r9]
 8929 02b4 FFF7FEFF 		bl	set_exp
 8930              	.LVL1006:
2812:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8931              		.loc 1 2812 6 view .LVU2880
 8932 02b8 1949     		ldr	r1, .L1119+32
ARM GAS  /tmp/ccW65oEM.s 			page 260


2806:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8933              		.loc 1 2806 6 is_stmt 0 view .LVU2881
 8934 02ba 0327     		movs	r7, #3
 8935              	.LVL1007:
 8936              	.L958:
2812:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8937              		.loc 1 2812 6 discriminator 4 view .LVU2882
 8938 02bc 1EA8     		add	r0, sp, #120
 8939 02be FFF7FEFF 		bl	scopy_spc
 8940              	.LVL1008:
 8941 02c2 3A46     		mov	r2, r7
 8942 02c4 5946     		mov	r1, fp
 8943 02c6 FFF7FEFF 		bl	num_arg_0
 8944              	.LVL1009:
 8945              	.LBB525:
2815:src/display.c **** 	      char *l=LastDisplayedNumber;
 8946              		.loc 1 2815 8 is_stmt 1 discriminator 4 view .LVU2883
2816:src/display.c **** 	      *l++=' ';
 8947              		.loc 1 2816 8 discriminator 4 view .LVU2884
2817:src/display.c **** 	      while(*b) {
 8948              		.loc 1 2817 8 discriminator 4 view .LVU2885
2817:src/display.c **** 	      while(*b) {
 8949              		.loc 1 2817 12 is_stmt 0 discriminator 4 view .LVU2886
 8950 02ca 164B     		ldr	r3, .L1119+36
2818:src/display.c **** 		*l++=*b++;
 8951              		.loc 1 2818 14 discriminator 4 view .LVU2887
 8952 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2817:src/display.c **** 	      while(*b) {
 8953              		.loc 1 2817 12 discriminator 4 view .LVU2888
 8954 02d0 2027     		movs	r7, #32
 8955 02d2 1F70     		strb	r7, [r3]
2818:src/display.c **** 		*l++=*b++;
 8956              		.loc 1 2818 8 is_stmt 1 discriminator 4 view .LVU2889
2818:src/display.c **** 		*l++=*b++;
 8957              		.loc 1 2818 13 discriminator 4 view .LVU2890
 8958 02d4 0029     		cmp	r1, #0
 8959 02d6 00F04782 		beq	.L969
 8960 02da 0333     		adds	r3, r3, #3
 8961 02dc 1EA8     		add	r0, sp, #120
 8962              	.LVL1010:
 8963              	.L951:
2819:src/display.c **** 		*l++=' ';
 8964              		.loc 1 2819 3 view .LVU2891
2819:src/display.c **** 		*l++=' ';
 8965              		.loc 1 2819 7 is_stmt 0 view .LVU2892
 8966 02de 03F8021C 		strb	r1, [r3, #-2]
2820:src/display.c **** 	      }
 8967              		.loc 1 2820 3 is_stmt 1 view .LVU2893
 8968              	.LVL1011:
2818:src/display.c **** 		*l++=*b++;
 8969              		.loc 1 2818 14 is_stmt 0 view .LVU2894
 8970 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8971              	.LVL1012:
2820:src/display.c **** 	      }
 8972              		.loc 1 2820 7 view .LVU2895
 8973 02e6 03F8017C 		strb	r7, [r3, #-1]
2818:src/display.c **** 		*l++=*b++;
ARM GAS  /tmp/ccW65oEM.s 			page 261


 8974              		.loc 1 2818 13 is_stmt 1 view .LVU2896
 8975 02ea 1A46     		mov	r2, r3
 8976 02ec 0233     		adds	r3, r3, #2
 8977              	.LVL1013:
2818:src/display.c **** 		*l++=*b++;
 8978              		.loc 1 2818 13 is_stmt 0 view .LVU2897
 8979 02ee 0029     		cmp	r1, #0
 8980 02f0 F5D1     		bne	.L951
 8981              	.LVL1014:
 8982              	.L950:
2822:src/display.c **** 	    }
 8983              		.loc 1 2822 8 is_stmt 1 view .LVU2898
2822:src/display.c **** 	    }
 8984              		.loc 1 2822 10 is_stmt 0 view .LVU2899
 8985 02f2 0023     		movs	r3, #0
 8986 02f4 DFF83490 		ldr	r9, .L1119+44
 8987 02f8 1370     		strb	r3, [r2]
 8988              	.LVL1015:
2822:src/display.c **** 	    }
 8989              		.loc 1 2822 10 view .LVU2900
 8990              	.LBE525:
 8991              	.LBE524:
2827:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8992              		.loc 1 2827 2 is_stmt 1 view .LVU2901
 8993              	.L1075:
2827:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8994              		.loc 1 2827 2 is_stmt 0 view .LVU2902
 8995 02fa FFF7FEFF 		bl	set_annunciators
 8996              	.LVL1016:
2828:src/display.c **** 	  ShowRPN = 0;
 8997              		.loc 1 2828 2 is_stmt 1 view .LVU2903
 8998 02fe 45E7     		b	.L835
 8999              	.L1120:
 9000              		.align	2
 9001              	.L1119:
 9002 0300 00000000 		.word	StateWhileOn
 9003 0304 00000000 		.word	WasDataEntry
 9004 0308 00000000 		.word	DispMsg
 9005 030c 00000000 		.word	ShowRPN
 9006 0310 00000000 		.word	main_ram
 9007 0314 38000000 		.word	.LC26
 9008 0318 00000000 		.word	.LANCHOR20
 9009 031c 00000000 		.word	.LANCHOR24
 9010 0320 00000000 		.word	.LANCHOR18
 9011 0324 00000000 		.word	LastDisplayedNumber
 9012 0328 00000000 		.word	DispPlot
 9013 032c 00000000 		.word	ShowRegister
 9014 0330 00000000 		.word	ProgFree
 9015              	.LVL1017:
 9016              	.L1081:
 9017              	.LBB527:
2580:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9018              		.loc 1 2580 4 view .LVU2904
2580:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9019              		.loc 1 2580 9 is_stmt 0 view .LVU2905
 9020 0334 C14B     		ldr	r3, .L1121
 9021 0336 C24E     		ldr	r6, .L1121+4
ARM GAS  /tmp/ccW65oEM.s 			page 262


 9022 0338 DFF85083 		ldr	r8, .L1121+80
 9023              	.LVL1018:
2580:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9024              		.loc 1 2580 9 view .LVU2906
 9025 033c DFF85093 		ldr	r9, .L1121+84
 9026              	.LVL1019:
2580:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9027              		.loc 1 2580 9 view .LVU2907
 9028 0340 93E80700 		ldm	r3, {r0, r1, r2}
 9029 0344 15AB     		add	r3, sp, #84
 9030 0346 03C3     		stmia	r3!, {r0, r1}
 9031 0348 0021     		movs	r1, #0
2581:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9032              		.loc 1 2581 4 view .LVU2908
 9033 034a BE48     		ldr	r0, .L1121+8
2580:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9034              		.loc 1 2580 9 view .LVU2909
 9035 034c 1A80     		strh	r2, [r3]	@ movhi
 9036 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
2581:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9037              		.loc 1 2581 4 is_stmt 1 view .LVU2910
 9038 0352 FFF7FEFF 		bl	set_digits_string
 9039              	.LVL1020:
2582:src/display.c **** #ifndef REALBUILD
 9040              		.loc 1 2582 4 view .LVU2911
 9041              	.LBB528:
 9042              	.LBI528:
 400:src/display.c ****   if (res) *res++ = ch;
 9043              		.loc 1 400 14 view .LVU2912
 9044              	.LBB529:
 401:src/display.c ****   else	set_dig(base, ch);
 9045              		.loc 1 401 3 view .LVU2913
 402:src/display.c ****   return res;
 9046              		.loc 1 402 8 view .LVU2914
 9047 0356 7221     		movs	r1, #114
 9048 0358 6C20     		movs	r0, #108
 9049 035a FFF7FEFF 		bl	set_dig
 9050              	.LVL1021:
 403:src/display.c **** }
 9051              		.loc 1 403 3 view .LVU2915
 403:src/display.c **** }
 9052              		.loc 1 403 3 is_stmt 0 view .LVU2916
 9053              	.LBE529:
 9054              	.LBE528:
2584:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9055              		.loc 1 2584 4 is_stmt 1 view .LVU2917
 9056 035e BA49     		ldr	r1, .L1121+12
 9057 0360 BA48     		ldr	r0, .L1121+16
 9058 0362 FFF7FEFF 		bl	scopy
 9059              	.LVL1022:
2585:src/display.c **** #endif
 9060              		.loc 1 2585 4 view .LVU2918
 9061 0366 BA49     		ldr	r1, .L1121+20
 9062 0368 BA48     		ldr	r0, .L1121+24
 9063 036a FFF7FEFF 		bl	scopy
 9064              	.LVL1023:
2587:src/display.c **** 	  set_status(vers);
ARM GAS  /tmp/ccW65oEM.s 			page 263


 9065              		.loc 1 2587 4 view .LVU2919
 9066 036e BA49     		ldr	r1, .L1121+28
 9067 0370 0422     		movs	r2, #4
 9068 0372 0DF15D00 		add	r0, sp, #93
 9069 0376 FFF7FEFF 		bl	xcopy
 9070              	.LVL1024:
2588:src/display.c **** 	  skip = 1;
 9071              		.loc 1 2588 4 view .LVU2920
 9072 037a 15A8     		add	r0, sp, #84
 9073 037c FFF7FEFF 		bl	set_status
 9074              	.LVL1025:
2589:src/display.c **** 	  goto nostk;
 9075              		.loc 1 2589 4 view .LVU2921
2590:src/display.c **** 	} else if (State2.confirm) {
 9076              		.loc 1 2590 4 view .LVU2922
2590:src/display.c **** 	} else if (State2.confirm) {
 9077              		.loc 1 2590 4 is_stmt 0 view .LVU2923
 9078              	.LBE527:
2781:src/display.c **** 	if (!skip) {
 9079              		.loc 1 2781 14 is_stmt 1 view .LVU2924
 9080 0380 FFF7FEFF 		bl	show_flags
 9081              	.LVL1026:
2782:src/display.c **** 	  if (State2.runmode) {
 9082              		.loc 1 2782 2 view .LVU2925
2827:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9083              		.loc 1 2827 2 view .LVU2926
 9084 0384 FFF7FEFF 		bl	set_annunciators
 9085              	.LVL1027:
2828:src/display.c **** 	  ShowRPN = 0;
 9086              		.loc 1 2828 2 view .LVU2927
 9087 0388 00E7     		b	.L835
 9088              	.LVL1028:
 9089              	.L972:
2828:src/display.c **** 	  ShowRPN = 0;
 9090              		.loc 1 2828 2 is_stmt 0 view .LVU2928
 9091 038a 0123     		movs	r3, #1
 9092 038c 14E7     		b	.L953
 9093              	.LVL1029:
 9094              	.L915:
2792:src/display.c **** 	    } else {
 9095              		.loc 1 2792 3 is_stmt 1 view .LVU2929
 9096 038e B348     		ldr	r0, .L1121+32
 9097 0390 2421     		movs	r1, #36
 9098 0392 FFF7FEFF 		bl	set_digits_string
 9099              	.LVL1030:
2797:src/display.c **** 	      goto finish;
 9100              		.loc 1 2797 6 view .LVU2930
2797:src/display.c **** 	      goto finish;
 9101              		.loc 1 2797 9 is_stmt 0 view .LVU2931
 9102 0396 3B68     		ldr	r3, [r7]
 9103 0398 002B     		cmp	r3, #0
 9104 039a AED0     		beq	.L1075
 9105 039c B1E6     		b	.L919
 9106              	.LVL1031:
 9107              	.L1094:
2828:src/display.c **** 	  ShowRPN = 0;
 9108              		.loc 1 2828 69 discriminator 3 view .LVU2932
ARM GAS  /tmp/ccW65oEM.s 			page 264


 9109 039e B8F90030 		ldrsh	r3, [r8]
 9110 03a2 002B     		cmp	r3, #0
 9111 03a4 7FF4F2AE 		bne	.L835
2828:src/display.c **** 	  ShowRPN = 0;
 9112              		.loc 1 2828 81 discriminator 4 view .LVU2933
 9113 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9114 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9115 03ac 03F00403 		and	r3, r3, #4
 9116 03b0 1343     		orrs	r3, r3, r2
 9117 03b2 7FF4EBAE 		bne	.L835
 9118 03b6 AA4F     		ldr	r7, .L1121+36
 9119 03b8 EEE6     		b	.L952
 9120              	.LVL1032:
 9121              	.L1084:
2600:src/display.c **** 	  if (State2.numdigit > 0)
 9122              		.loc 1 2600 4 is_stmt 1 view .LVU2934
2600:src/display.c **** 	  if (State2.numdigit > 0)
 9123              		.loc 1 2600 9 is_stmt 0 view .LVU2935
 9124 03ba 2E22     		movs	r2, #46
 9125 03bc A949     		ldr	r1, .L1121+40
 9126 03be 4046     		mov	r0, r8
 9127 03c0 FFF7FEFF 		bl	scopy_char
 9128              	.LVL1033:
2601:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9129              		.loc 1 2601 14 view .LVU2936
 9130 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2600:src/display.c **** 	  if (State2.numdigit > 0)
 9131              		.loc 1 2600 9 view .LVU2937
 9132 03c6 0346     		mov	r3, r0
 9133              	.LVL1034:
2601:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9134              		.loc 1 2601 4 is_stmt 1 view .LVU2938
2601:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9135              		.loc 1 2601 7 is_stmt 0 view .LVU2939
 9136 03c8 002A     		cmp	r2, #0
 9137 03ca 4CD1     		bne	.L1096
 9138              	.L842:
2604:src/display.c **** 	  set_status(buf);
 9139              		.loc 1 2604 4 is_stmt 1 view .LVU2940
 9140              	.LVL1035:
2604:src/display.c **** 	  set_status(buf);
 9141              		.loc 1 2604 10 is_stmt 0 view .LVU2941
 9142 03cc 5F22     		movs	r2, #95
 9143 03ce 1A70     		strb	r2, [r3]
2605:src/display.c **** 	} else if (State2.rarg) {
 9144              		.loc 1 2605 4 is_stmt 1 view .LVU2942
 9145              	.LVL1036:
 9146              	.L858:
 9147              	.LBB530:
2690:src/display.c **** 	} else if (State2.multi) {
 9148              		.loc 1 2690 4 view .LVU2943
 9149 03d0 1EA8     		add	r0, sp, #120
 9150 03d2 FFF7FEFF 		bl	set_status
 9151              	.LVL1037:
2690:src/display.c **** 	} else if (State2.multi) {
 9152              		.loc 1 2690 4 is_stmt 0 view .LVU2944
 9153              	.LBE530:
ARM GAS  /tmp/ccW65oEM.s 			page 265


2780:src/display.c ****       nostk:	show_flags();
 9154              		.loc 1 2780 2 is_stmt 1 view .LVU2945
 9155 03d6 9A4E     		ldr	r6, .L1121+4
 9156 03d8 DFF8B082 		ldr	r8, .L1121+80
 9157 03dc FFF7FEFF 		bl	show_stack
 9158              	.LVL1038:
2781:src/display.c **** 	if (!skip) {
 9159              		.loc 1 2781 14 view .LVU2946
 9160 03e0 FFF7FEFF 		bl	show_flags
 9161              	.LVL1039:
2782:src/display.c **** 	  if (State2.runmode) {
 9162              		.loc 1 2782 2 view .LVU2947
 9163 03e4 33E7     		b	.L837
 9164              	.LVL1040:
 9165              	.L839:
2596:src/display.c **** 	  set_status(buf);
 9166              		.loc 1 2596 6 view .LVU2948
2596:src/display.c **** 	  set_status(buf);
 9167              		.loc 1 2596 12 is_stmt 0 view .LVU2949
 9168 03e6 9D23     		movs	r3, #157
 9169 03e8 954E     		ldr	r6, .L1121+4
 9170 03ea DFF8A082 		ldr	r8, .L1121+80
 9171 03ee 0370     		strb	r3, [r0]
 9172 03f0 FFE6     		b	.L840
 9173              	.LVL1041:
 9174              	.L1095:
 9175              	.LBB539:
2806:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9176              		.loc 1 2806 6 discriminator 1 view .LVU2950
 9177 03f2 9D49     		ldr	r1, .L1121+44
 9178 03f4 07EB8703 		add	r3, r7, r7, lsl #2
2807:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9179              		.loc 1 2807 21 discriminator 1 view .LVU2951
 9180 03f8 07F00107 		and	r7, r7, #1
 9181              	.LVL1042:
2806:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9182              		.loc 1 2806 6 discriminator 1 view .LVU2952
 9183 03fc 1944     		add	r1, r1, r3
 9184 03fe 1EA8     		add	r0, sp, #120
 9185 0400 0337     		adds	r7, r7, #3
 9186 0402 0193     		str	r3, [sp, #4]
 9187 0404 FFF7FEFF 		bl	scopy_spc
 9188              	.LVL1043:
 9189 0408 3A46     		mov	r2, r7
 9190 040a 5946     		mov	r1, fp
 9191 040c FFF7FEFF 		bl	num_arg_0
 9192              	.LVL1044:
2808:src/display.c **** #ifndef REALBUILD
 9193              		.loc 1 2808 6 is_stmt 1 discriminator 1 view .LVU2953
 9194 0410 0921     		movs	r1, #9
 9195 0412 1EA8     		add	r0, sp, #120
 9196 0414 FFF7FEFF 		bl	set_digits_string
 9197              	.LVL1045:
2810:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9198              		.loc 1 2810 6 discriminator 1 view .LVU2954
 9199 0418 2822     		movs	r2, #40
 9200 041a 5146     		mov	r1, r10
ARM GAS  /tmp/ccW65oEM.s 			page 266


 9201 041c 1EA8     		add	r0, sp, #120
 9202 041e FFF7FEFF 		bl	xset
 9203              	.LVL1046:
2811:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9204              		.loc 1 2811 6 discriminator 1 view .LVU2955
 9205 0422 0121     		movs	r1, #1
 9206 0424 D9F80000 		ldr	r0, [r9]
 9207 0428 5246     		mov	r2, r10
 9208 042a FFF7FEFF 		bl	set_exp
 9209              	.LVL1047:
2812:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9210              		.loc 1 2812 6 discriminator 1 view .LVU2956
 9211 042e 8F49     		ldr	r1, .L1121+48
 9212 0430 019B     		ldr	r3, [sp, #4]
 9213 0432 1944     		add	r1, r1, r3
 9214 0434 42E7     		b	.L958
 9215              	.LVL1048:
 9216              	.L1086:
2812:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9217              		.loc 1 2812 6 is_stmt 0 discriminator 1 view .LVU2957
 9218              	.LBE539:
2638:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9219              		.loc 1 2638 4 is_stmt 1 view .LVU2958
2639:src/display.c **** 	  *bp++ = '_';
 9220              		.loc 1 2639 33 is_stmt 0 view .LVU2959
 9221 0436 8E4B     		ldr	r3, .L1121+52
 9222 0438 814E     		ldr	r6, .L1121+4
2639:src/display.c **** 	  *bp++ = '_';
 9223              		.loc 1 2639 10 view .LVU2960
 9224 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9225 043c 88F80130 		strb	r3, [r8, #1]
2638:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9226              		.loc 1 2638 10 view .LVU2961
 9227 0440 7823     		movs	r3, #120
2640:src/display.c **** 	  *bp++ = '?';
 9228              		.loc 1 2640 10 view .LVU2962
 9229 0442 5F22     		movs	r2, #95
2638:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9230              		.loc 1 2638 10 view .LVU2963
 9231 0444 88F80030 		strb	r3, [r8]
2639:src/display.c **** 	  *bp++ = '_';
 9232              		.loc 1 2639 4 is_stmt 1 view .LVU2964
 9233              	.LVL1049:
2640:src/display.c **** 	  *bp++ = '?';
 9234              		.loc 1 2640 4 view .LVU2965
2641:src/display.c **** 	  set_status(buf);
 9235              		.loc 1 2641 10 is_stmt 0 view .LVU2966
 9236 0448 3F23     		movs	r3, #63
2640:src/display.c **** 	  *bp++ = '?';
 9237              		.loc 1 2640 10 view .LVU2967
 9238 044a 88F80220 		strb	r2, [r8, #2]
2641:src/display.c **** 	  set_status(buf);
 9239              		.loc 1 2641 4 is_stmt 1 view .LVU2968
 9240              	.LVL1050:
2641:src/display.c **** 	  set_status(buf);
 9241              		.loc 1 2641 10 is_stmt 0 view .LVU2969
 9242 044e 88F80330 		strb	r3, [r8, #3]
ARM GAS  /tmp/ccW65oEM.s 			page 267


2642:src/display.c **** 	} else if (cata) {
 9243              		.loc 1 2642 4 is_stmt 1 view .LVU2970
 9244 0452 1EA8     		add	r0, sp, #120
 9245 0454 DFF83482 		ldr	r8, .L1121+80
 9246              	.LVL1051:
2642:src/display.c **** 	} else if (cata) {
 9247              		.loc 1 2642 4 is_stmt 0 view .LVU2971
 9248 0458 FFF7FEFF 		bl	set_status
 9249              	.LVL1052:
2780:src/display.c ****       nostk:	show_flags();
 9250              		.loc 1 2780 2 is_stmt 1 view .LVU2972
 9251 045c FFF7FEFF 		bl	show_stack
 9252              	.LVL1053:
2781:src/display.c **** 	if (!skip) {
 9253              		.loc 1 2781 14 view .LVU2973
 9254 0460 FFF7FEFF 		bl	show_flags
 9255              	.LVL1054:
2782:src/display.c **** 	  if (State2.runmode) {
 9256              		.loc 1 2782 2 view .LVU2974
 9257 0464 F3E6     		b	.L837
 9258              	.LVL1055:
 9259              	.L1096:
2602:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9260              		.loc 1 2602 6 view .LVU2975
2602:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9261              		.loc 1 2602 11 is_stmt 0 view .LVU2976
 9262 0466 2189     		ldrh	r1, [r4, #8]
 9263 0468 FFF7FEFF 		bl	num_arg_0
 9264              	.LVL1056:
2602:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9265              		.loc 1 2602 11 view .LVU2977
 9266 046c 0346     		mov	r3, r0
 9267              	.LVL1057:
2602:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9268              		.loc 1 2602 11 view .LVU2978
 9269 046e ADE7     		b	.L842
 9270              	.LVL1058:
 9271              	.L1085:
2612:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9272              		.loc 1 2612 4 is_stmt 1 view .LVU2979
2612:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9273              		.loc 1 2612 35 is_stmt 0 view .LVU2980
 9274 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9275 0472 8049     		ldr	r1, .L1121+56
 9276 0474 0623     		movs	r3, #6
 9277 0476 03EB0213 		add	r3, r3, r2, lsl #4
2612:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9278              		.loc 1 2612 9 view .LVU2981
 9279 047a 1944     		add	r1, r1, r3
 9280 047c 4046     		mov	r0, r8
 9281 047e FFF7FEFF 		bl	scopy
 9282              	.LVL1059:
2613:src/display.c **** 	  if (State2.dot) {
 9283              		.loc 1 2613 4 is_stmt 1 view .LVU2982
2613:src/display.c **** 	  if (State2.dot) {
 9284              		.loc 1 2613 9 is_stmt 0 view .LVU2983
 9285 0482 7D4A     		ldr	r2, .L1121+60
ARM GAS  /tmp/ccW65oEM.s 			page 268


 9286 0484 7D4B     		ldr	r3, .L1121+64
 9287 0486 94F91510 		ldrsb	r1, [r4, #21]
 9288 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9289 048e 38BF     		it	cc
 9290 0490 1946     		movcc	r1, r3
 9291 0492 FFF7FEFF 		bl	scopy
 9292              	.LVL1060:
2614:src/display.c **** 	    *bp++ = 's';
 9293              		.loc 1 2614 8 view .LVU2984
 9294 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9295              	.LVL1061:
2614:src/display.c **** 	    *bp++ = 's';
 9296              		.loc 1 2614 4 is_stmt 1 view .LVU2985
2614:src/display.c **** 	    *bp++ = 's';
 9297              		.loc 1 2614 7 is_stmt 0 view .LVU2986
 9298 0498 5A06     		lsls	r2, r3, #25
 9299 049a 40F19A80 		bpl	.L845
2615:src/display.c **** 	    *bp++ = '_';
 9300              		.loc 1 2615 6 is_stmt 1 view .LVU2987
 9301              	.LVL1062:
2615:src/display.c **** 	    *bp++ = '_';
 9302              		.loc 1 2615 12 is_stmt 0 view .LVU2988
 9303 049e 7322     		movs	r2, #115
 9304              	.LVL1063:
 9305              	.L1069:
2619:src/display.c **** 	  } else {
 9306              		.loc 1 2619 12 view .LVU2989
 9307 04a0 5F23     		movs	r3, #95
 9308 04a2 674E     		ldr	r6, .L1121+4
 9309 04a4 DFF8E481 		ldr	r8, .L1121+80
2618:src/display.c **** 	    *bp++ = '_';
 9310              		.loc 1 2618 12 view .LVU2990
 9311 04a8 0270     		strb	r2, [r0]
2619:src/display.c **** 	  } else {
 9312              		.loc 1 2619 6 is_stmt 1 view .LVU2991
2619:src/display.c **** 	  } else {
 9313              		.loc 1 2619 12 is_stmt 0 view .LVU2992
 9314 04aa 4370     		strb	r3, [r0, #1]
 9315 04ac A1E6     		b	.L840
 9316              	.LVL1064:
 9317              	.L921:
 9318              	.LBB540:
 9319              	.LBB513:
1225:src/display.c **** 
 9320              		.loc 1 1225 2 is_stmt 1 view .LVU2993
 9321 04ae FFF7FEFF 		bl	set_separator_decimal_modes
 9322              	.LVL1065:
1227:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9323              		.loc 1 1227 2 view .LVU2994
1229:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9324              		.loc 1 1229 2 view .LVU2995
1229:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9325              		.loc 1 1229 5 is_stmt 0 view .LVU2996
 9326 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9327              	.LBB498:
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9328              		.loc 1 1236 15 view .LVU2997
ARM GAS  /tmp/ccW65oEM.s 			page 269


 9329 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9330              	.LBE498:
1229:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9331              		.loc 1 1229 5 view .LVU2998
 9332 04b8 012B     		cmp	r3, #1
 9333 04ba 40F2B780 		bls	.L926
 9334              	.LVL1066:
 9335              	.LBB499:
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9336              		.loc 1 1236 14 is_stmt 1 view .LVU2999
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9337              		.loc 1 1236 4 is_stmt 0 view .LVU3000
 9338 04be BCF1000F 		cmp	ip, #0
 9339 04c2 72D0     		beq	.L927
 9340 04c4 0AF10103 		add	r3, r10, #1
 9341 04c8 6046     		mov	r0, ip
 9342              	.LBE499:
1204:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9343              		.loc 1 1204 11 view .LVU3001
 9344 04ca 4FF0FF31 		mov	r1, #-1
 9345 04ce 6FEA0A0E 		mvn	lr, r10
 9346              	.LVL1067:
 9347              	.L929:
 9348              	.LBB500:
1237:src/display.c **** 	      gotdot = j;
 9349              		.loc 1 1237 9 view .LVU3002
 9350 04d2 2E28     		cmp	r0, #46
 9351 04d4 0EEB0302 		add	r2, lr, r3
 9352              	.LVL1068:
1237:src/display.c **** 	      gotdot = j;
 9353              		.loc 1 1237 6 is_stmt 1 view .LVU3003
1237:src/display.c **** 	      gotdot = j;
 9354              		.loc 1 1237 9 is_stmt 0 view .LVU3004
 9355 04d8 03D1     		bne	.L928
1237:src/display.c **** 	      gotdot = j;
 9356              		.loc 1 1237 22 view .LVU3005
 9357 04da B1F1FF3F 		cmp	r1, #-1
 9358 04de 08BF     		it	eq
 9359 04e0 1146     		moveq	r1, r2
 9360              	.LVL1069:
 9361              	.L928:
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9362              		.loc 1 1236 28 is_stmt 1 view .LVU3006
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9363              		.loc 1 1236 14 view .LVU3007
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9364              		.loc 1 1236 15 is_stmt 0 view .LVU3008
 9365 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
1236:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9366              		.loc 1 1236 4 view .LVU3009
 9367 04e6 0028     		cmp	r0, #0
 9368 04e8 F3D1     		bne	.L929
1244:src/display.c **** 	  if (j > 0) {
 9369              		.loc 1 1244 4 is_stmt 1 view .LVU3010
1244:src/display.c **** 	  if (j > 0) {
 9370              		.loc 1 1244 6 is_stmt 0 view .LVU3011
 9371 04ea A2F10B03 		sub	r3, r2, #11
ARM GAS  /tmp/ccW65oEM.s 			page 270


 9372              	.LVL1070:
1245:src/display.c **** 	    p += j + 1;
 9373              		.loc 1 1245 4 is_stmt 1 view .LVU3012
1245:src/display.c **** 	    p += j + 1;
 9374              		.loc 1 1245 7 is_stmt 0 view .LVU3013
 9375 04ee 002B     		cmp	r3, #0
 9376 04f0 40F34C81 		ble	.L1097
1246:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9377              		.loc 1 1246 6 is_stmt 1 view .LVU3014
1246:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9378              		.loc 1 1246 8 is_stmt 0 view .LVU3015
 9379 04f4 0A3A     		subs	r2, r2, #10
1248:src/display.c **** 	      gotdot = 0;
 9380              		.loc 1 1248 9 view .LVU3016
 9381 04f6 8B42     		cmp	r3, r1
1246:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9382              		.loc 1 1246 8 view .LVU3017
 9383 04f8 9244     		add	r10, r10, r2
 9384              	.LVL1071:
1247:src/display.c **** 	    if (gotdot <= j) {
 9385              		.loc 1 1247 6 is_stmt 1 view .LVU3018
1248:src/display.c **** 	      gotdot = 0;
 9386              		.loc 1 1248 6 view .LVU3019
1248:src/display.c **** 	      gotdot = 0;
 9387              		.loc 1 1248 9 is_stmt 0 view .LVU3020
 9388 04fa 80F26581 		bge	.L966
1253:src/display.c **** 	      gotdot = 0;
 9389              		.loc 1 1253 11 is_stmt 1 view .LVU3021
1253:src/display.c **** 	      gotdot = 0;
 9390              		.loc 1 1253 14 is_stmt 0 view .LVU3022
 9391 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9392              	.LVL1072:
1253:src/display.c **** 	      gotdot = 0;
 9393              		.loc 1 1253 14 view .LVU3023
 9394 0502 2E2B     		cmp	r3, #46
 9395 0504 00F0E282 		beq	.L1098
 9396              	.LVL1073:
1260:src/display.c **** 	    overflow_to_left = 1;
 9397              		.loc 1 1260 6 is_stmt 1 view .LVU3024
 9398 0508 3C21     		movs	r1, #60
 9399 050a FFF7FEFF 		bl	set_dig
 9400              	.LVL1074:
1261:src/display.c **** 	  }
 9401              		.loc 1 1261 6 view .LVU3025
1261:src/display.c **** 	  }
 9402              		.loc 1 1261 6 is_stmt 0 view .LVU3026
 9403 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1261:src/display.c **** 	  }
 9404              		.loc 1 1261 6 view .LVU3027
 9405              	.LBE500:
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9406              		.loc 1 1267 9 is_stmt 1 view .LVU3028
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9407              		.loc 1 1267 2 is_stmt 0 view .LVU3029
 9408 0512 BCF1000F 		cmp	ip, #0
 9409 0516 48D0     		beq	.L927
 9410              	.LBB501:
ARM GAS  /tmp/ccW65oEM.s 			page 271


1259:src/display.c **** 	    set_dig(0, '<');
 9411              		.loc 1 1259 18 view .LVU3030
 9412 0518 4FF0FF33 		mov	r3, #-1
1247:src/display.c **** 	    if (gotdot <= j) {
 9413              		.loc 1 1247 8 view .LVU3031
 9414 051c 4FF0090B 		mov	fp, #9
 9415              	.LVL1075:
 9416              	.L960:
1261:src/display.c **** 	  }
 9417              		.loc 1 1261 23 view .LVU3032
 9418 0520 4FF00109 		mov	r9, #1
 9419              	.LVL1076:
 9420              	.L939:
1261:src/display.c **** 	  }
 9421              		.loc 1 1261 23 view .LVU3033
 9422              	.LBE501:
1292:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9423              		.loc 1 1292 5 view .LVU3034
 9424 0524 0195     		str	r5, [sp, #4]
 9425 0526 1D46     		mov	r5, r3
 9426              	.LVL1077:
1292:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9427              		.loc 1 1292 5 view .LVU3035
 9428 0528 3346     		mov	r3, r6
 9429 052a 6246     		mov	r2, ip
 9430 052c 5646     		mov	r6, r10
 9431 052e 9A46     		mov	r10, r3
 9432 0530 08E0     		b	.L937
 9433              	.LVL1078:
 9434              	.L1099:
1282:src/display.c **** #  endif
 9435              		.loc 1 1282 11 view .LVU3036
 9436 0532 5D45     		cmp	r5, fp
 9437 0534 11D0     		beq	.L934
 9438              	.LVL1079:
 9439              	.L933:
1306:src/display.c **** 	      i += segs_per_digit;
 9440              		.loc 1 1306 8 view .LVU3037
 9441 0536 FFF7FEFF 		bl	set_dig
 9442              	.LVL1080:
1307:src/display.c **** 	    }
 9443              		.loc 1 1307 8 is_stmt 1 view .LVU3038
1307:src/display.c **** 	    }
 9444              		.loc 1 1307 10 is_stmt 0 view .LVU3039
 9445 053a 0BF1090B 		add	fp, fp, #9
 9446              	.LVL1081:
 9447              	.L935:
1271:src/display.c **** 	  if (*p == '.') {
 9448              		.loc 1 1271 11 is_stmt 1 view .LVU3040
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9449              		.loc 1 1267 9 view .LVU3041
 9450 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9451              	.LVL1082:
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9452              		.loc 1 1267 2 is_stmt 0 view .LVU3042
 9453 0542 8AB1     		cbz	r2, .L1071
 9454              	.LVL1083:
ARM GAS  /tmp/ccW65oEM.s 			page 272


 9455              	.L937:
1272:src/display.c **** 	    if (gotdot < 0)
 9456              		.loc 1 1272 4 is_stmt 1 view .LVU3043
1273:src/display.c **** 	      gotdot = i;
 9457              		.loc 1 1273 6 view .LVU3044
1306:src/display.c **** 	      i += segs_per_digit;
 9458              		.loc 1 1306 8 view .LVU3045
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9459              		.loc 1 1267 20 is_stmt 0 view .LVU3046
 9460 0544 452A     		cmp	r2, #69
1306:src/display.c **** 	      i += segs_per_digit;
 9461              		.loc 1 1306 8 view .LVU3047
 9462 0546 1146     		mov	r1, r2
 9463 0548 5846     		mov	r0, fp
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9464              		.loc 1 1267 20 view .LVU3048
 9465 054a 0DD0     		beq	.L1071
1272:src/display.c **** 	    if (gotdot < 0)
 9466              		.loc 1 1272 7 view .LVU3049
 9467 054c 2E2A     		cmp	r2, #46
 9468 054e F2D1     		bne	.L933
1282:src/display.c **** #  endif
 9469              		.loc 1 1282 8 is_stmt 1 view .LVU3050
1284:src/display.c **** 		i += segs_per_digit;
 9470              		.loc 1 1284 3 view .LVU3051
 9471              	.LVL1084:
1288:src/display.c **** 		  i += segs_per_digit;
 9472              		.loc 1 1288 3 view .LVU3052
1273:src/display.c **** 	      gotdot = i;
 9473              		.loc 1 1273 9 is_stmt 0 view .LVU3053
 9474 0550 002D     		cmp	r5, #0
1284:src/display.c **** 		i += segs_per_digit;
 9475              		.loc 1 1284 3 view .LVU3054
 9476 0552 5846     		mov	r0, fp
 9477 0554 4FF02F01 		mov	r1, #47
1273:src/display.c **** 	      gotdot = i;
 9478              		.loc 1 1273 9 view .LVU3055
 9479 0558 EBDA     		bge	.L1099
 9480              	.L934:
1289:src/display.c **** 		}
 9481              		.loc 1 1289 5 is_stmt 1 view .LVU3056
 9482              	.LVL1085:
1288:src/display.c **** 		  i += segs_per_digit;
 9483              		.loc 1 1288 6 is_stmt 0 view .LVU3057
 9484 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9485 055c 012A     		cmp	r2, #1
 9486 055e 5CD9     		bls	.L936
 9487 0560 5D46     		mov	r5, fp
1289:src/display.c **** 		}
 9488              		.loc 1 1289 7 view .LVU3058
 9489 0562 0BF1090B 		add	fp, fp, #9
 9490              	.LVL1086:
1289:src/display.c **** 		}
 9491              		.loc 1 1289 7 view .LVU3059
 9492 0566 EAE7     		b	.L935
 9493              	.LVL1087:
 9494              	.L1071:
ARM GAS  /tmp/ccW65oEM.s 			page 273


1316:src/display.c **** 	    gotdot = i;
 9495              		.loc 1 1316 4 is_stmt 1 view .LVU3060
 9496 0568 2B46     		mov	r3, r5
1316:src/display.c **** 	    gotdot = i;
 9497              		.loc 1 1316 7 is_stmt 0 view .LVU3061
 9498 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9499 056e 28BF     		it	cs
 9500 0570 5B46     		movcs	r3, fp
 9501              	.LVL1088:
1318:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9502              		.loc 1 1318 4 is_stmt 1 view .LVU3062
1319:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9503              		.loc 1 1319 6 view .LVU3063
1319:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9504              		.loc 1 1319 13 is_stmt 0 view .LVU3064
 9505 0572 A3F11B0B 		sub	fp, r3, #27
 9506              	.LVL1089:
1320:src/display.c **** 	      break;
 9507              		.loc 1 1320 6 is_stmt 1 view .LVU3065
 9508 0576 5246     		mov	r2, r10
1320:src/display.c **** 	      break;
 9509              		.loc 1 1320 9 is_stmt 0 view .LVU3066
 9510 0578 BBF1000F 		cmp	fp, #0
 9511 057c B246     		mov	r10, r6
 9512 057e 019D     		ldr	r5, [sp, #4]
 9513 0580 1646     		mov	r6, r2
 9514              	.LVL1090:
1320:src/display.c **** 	      break;
 9515              		.loc 1 1320 9 view .LVU3067
 9516 0582 12DD     		ble	.L927
 9517 0584 4B46     		mov	r3, r9
 9518 0586 A946     		mov	r9, r5
 9519 0588 1D46     		mov	r5, r3
 9520              	.L943:
1323:src/display.c **** 	      break;
 9521              		.loc 1 1323 6 is_stmt 1 view .LVU3068
1326:src/display.c **** 	  }
 9522              		.loc 1 1326 6 view .LVU3069
 9523              	.LBB502:
 9524              	.LBB503:
 363:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9525              		.loc 1 363 3 view .LVU3070
 9526 058a 5846     		mov	r0, fp
 9527              	.LBE503:
 9528              	.LBE502:
1323:src/display.c **** 	      break;
 9529              		.loc 1 1323 9 is_stmt 0 view .LVU3071
 9530 058c 15B1     		cbz	r5, .L944
 9531              	.LVL1091:
1323:src/display.c **** 	      break;
 9532              		.loc 1 1323 27 view .LVU3072
 9533 058e BBF1090F 		cmp	fp, #9
 9534 0592 09D0     		beq	.L1066
 9535              	.L944:
1326:src/display.c **** 	  }
 9536              		.loc 1 1326 6 view .LVU3073
 9537 0594 3A4B     		ldr	r3, .L1121+68
ARM GAS  /tmp/ccW65oEM.s 			page 274


 9538 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9539              	.LVL1092:
 9540              	.LBB505:
 9541              	.LBI502:
 360:src/display.c ****   if (sep == SEP_NONE)
 9542              		.loc 1 360 14 is_stmt 1 view .LVU3074
 9543              	.LBB504:
 361:src/display.c ****     return res;
 9544              		.loc 1 361 3 view .LVU3075
 361:src/display.c ****     return res;
 9545              		.loc 1 361 6 is_stmt 0 view .LVU3076
 9546 0598 09B1     		cbz	r1, .L945
 9547 059a FFF7FEFF 		bl	set_separator.part.0
 9548              	.LVL1093:
 9549              	.L945:
 361:src/display.c ****     return res;
 9550              		.loc 1 361 6 view .LVU3077
 9551              	.LBE504:
 9552              	.LBE505:
1318:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9553              		.loc 1 1318 4 is_stmt 1 view .LVU3078
1319:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9554              		.loc 1 1319 6 view .LVU3079
1319:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9555              		.loc 1 1319 13 is_stmt 0 view .LVU3080
 9556 059e ABF11B0B 		sub	fp, fp, #27
 9557              	.LVL1094:
1320:src/display.c **** 	      break;
 9558              		.loc 1 1320 6 is_stmt 1 view .LVU3081
1320:src/display.c **** 	      break;
 9559              		.loc 1 1320 9 is_stmt 0 view .LVU3082
 9560 05a2 BBF1000F 		cmp	fp, #0
 9561 05a6 F0DC     		bgt	.L943
 9562              	.L1066:
1320:src/display.c **** 	      break;
 9563              		.loc 1 1320 9 view .LVU3083
 9564 05a8 4D46     		mov	r5, r9
 9565              	.LVL1095:
 9566              	.L927:
1344:src/display.c **** 	    p++;
 9567              		.loc 1 1344 4 is_stmt 1 view .LVU3084
1344:src/display.c **** 	    p++;
 9568              		.loc 1 1344 7 is_stmt 0 view .LVU3085
 9569 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9570 05ae 452B     		cmp	r3, #69
 9571 05b0 00F0DC80 		beq	.L1100
 9572              	.L1077:
 9573              	.LVL1096:
1344:src/display.c **** 	    p++;
 9574              		.loc 1 1344 7 view .LVU3086
 9575              	.LBE513:
 9576              	.LBE540:
2797:src/display.c **** 	      goto finish;
 9577              		.loc 1 2797 6 is_stmt 1 view .LVU3087
2797:src/display.c **** 	      goto finish;
 9578              		.loc 1 2797 9 is_stmt 0 view .LVU3088
 9579 05b4 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccW65oEM.s 			page 275


 9580 05b6 DFF8D890 		ldr	r9, .L1121+84
 9581 05ba 002B     		cmp	r3, #0
 9582 05bc 3FF4E0AD 		beq	.L924
 9583 05c0 9FE5     		b	.L919
 9584              	.LVL1097:
 9585              	.L1093:
 9586              	.LBB541:
 9587              	.LBB514:
1214:src/display.c **** 	p++;
 9588              		.loc 1 1214 2 is_stmt 1 view .LVU3089
 9589              	.LBB506:
 9590              	.LBI506:
 289:src/display.c **** {
 9591              		.loc 1 289 13 view .LVU3090
 9592              	.LBB507:
 291:src/display.c ****   set_dot(MANT_SIGN);
 9593              		.loc 1 291 3 view .LVU3091
 291:src/display.c ****   set_dot(MANT_SIGN);
 9594              		.loc 1 291 25 is_stmt 0 view .LVU3092
 9595 05c2 224A     		ldr	r2, .L1121+16
 292:src/display.c **** }
 9596              		.loc 1 292 3 view .LVU3093
 9597 05c4 8120     		movs	r0, #129
 9598              	.LVL1098:
 291:src/display.c ****   set_dot(MANT_SIGN);
 9599              		.loc 1 291 25 view .LVU3094
 9600 05c6 1370     		strb	r3, [r2]
 292:src/display.c **** }
 9601              		.loc 1 292 3 is_stmt 1 view .LVU3095
 9602              	.LBE507:
 9603              	.LBE506:
1215:src/display.c ****       }
 9604              		.loc 1 1215 3 is_stmt 0 view .LVU3096
 9605 05c8 0AF1010A 		add	r10, r10, #1
 9606              	.LVL1099:
 9607              	.LBB509:
 9608              	.LBB508:
 292:src/display.c **** }
 9609              		.loc 1 292 3 view .LVU3097
 9610 05cc FFF7FEFF 		bl	set_dot
 9611              	.LVL1100:
 9612              	.LBE508:
 9613              	.LBE509:
1215:src/display.c ****       }
 9614              		.loc 1 1215 2 is_stmt 1 view .LVU3098
1215:src/display.c ****       }
 9615              		.loc 1 1215 2 is_stmt 0 view .LVU3099
 9616 05d0 B9E5     		b	.L920
 9617              	.LVL1101:
 9618              	.L845:
1215:src/display.c ****       }
 9619              		.loc 1 1215 2 view .LVU3100
 9620              	.LBE514:
 9621              	.LBE541:
2617:src/display.c **** 	    *bp++ = '\021';
 9622              		.loc 1 2617 11 is_stmt 1 view .LVU3101
2617:src/display.c **** 	    *bp++ = '\021';
ARM GAS  /tmp/ccW65oEM.s 			page 276


 9623              		.loc 1 2617 14 is_stmt 0 view .LVU3102
 9624 05d2 BAF1010F 		cmp	r10, #1
 9625 05d6 00F0D780 		beq	.L1101
2624:src/display.c **** 	      *bp++ = '.';
 9626              		.loc 1 2624 6 is_stmt 1 view .LVU3103
2624:src/display.c **** 	      *bp++ = '.';
 9627              		.loc 1 2624 10 is_stmt 0 view .LVU3104
 9628 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2624:src/display.c **** 	      *bp++ = '.';
 9629              		.loc 1 2624 9 view .LVU3105
 9630 05dc DB07     		lsls	r3, r3, #31
2625:src/display.c **** 	    if (State2.numdigit > 0) {
 9631              		.loc 1 2625 8 is_stmt 1 view .LVU3106
 9632              	.LVL1102:
2625:src/display.c **** 	    if (State2.numdigit > 0) {
 9633              		.loc 1 2625 14 is_stmt 0 view .LVU3107
 9634 05de 44BF     		itt	mi
 9635 05e0 2E23     		movmi	r3, #46
 9636 05e2 00F8013B 		strbmi	r3, [r0], #1
 9637              	.LVL1103:
2626:src/display.c **** 	      if (State2.shuffle)
 9638              		.loc 1 2626 6 is_stmt 1 view .LVU3108
2626:src/display.c **** 	      if (State2.shuffle)
 9639              		.loc 1 2626 16 is_stmt 0 view .LVU3109
 9640 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2626:src/display.c **** 	      if (State2.shuffle)
 9641              		.loc 1 2626 9 view .LVU3110
 9642 05e8 8AB1     		cbz	r2, .L848
2627:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9643              		.loc 1 2627 8 is_stmt 1 view .LVU3111
2627:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9644              		.loc 1 2627 12 is_stmt 0 view .LVU3112
 9645 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2627:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9646              		.loc 1 2627 11 view .LVU3113
 9647 05ec 9E07     		lsls	r6, r3, #30
 9648 05ee 40F1D781 		bpl	.L849
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9649              		.loc 1 2628 3 is_stmt 1 view .LVU3114
 9650              	.LVL1104:
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9651              		.loc 1 2628 17 is_stmt 0 view .LVU3115
 9652 05f2 2289     		ldrh	r2, [r4, #8]
 9653              	.LVL1105:
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9654              		.loc 1 2628 34 is_stmt 1 view .LVU3116
 9655 05f4 2349     		ldr	r1, .L1121+72
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9656              		.loc 1 2628 10 is_stmt 0 view .LVU3117
 9657 05f6 0023     		movs	r3, #0
 9658              	.LVL1106:
 9659              	.L850:
2629:src/display.c **** 	      else
 9660              		.loc 1 2629 5 is_stmt 1 discriminator 3 view .LVU3118
2629:src/display.c **** 	      else
 9661              		.loc 1 2629 24 is_stmt 0 discriminator 3 view .LVU3119
 9662 05f8 02F00306 		and	r6, r2, #3
ARM GAS  /tmp/ccW65oEM.s 			page 277


2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9663              		.loc 1 2628 54 discriminator 3 view .LVU3120
 9664 05fc 0133     		adds	r3, r3, #1
 9665              	.LVL1107:
2629:src/display.c **** 	      else
 9666              		.loc 1 2629 11 discriminator 3 view .LVU3121
 9667 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9668 0600 00F8016B 		strb	r6, [r0], #1
 9669              	.LVL1108:
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9670              		.loc 1 2628 53 is_stmt 1 discriminator 3 view .LVU3122
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9671              		.loc 1 2628 42 is_stmt 0 discriminator 3 view .LVU3123
 9672 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9673              		.loc 1 2628 3 discriminator 3 view .LVU3124
 9674 0606 9E42     		cmp	r6, r3
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9675              		.loc 1 2628 60 discriminator 3 view .LVU3125
 9676 0608 4FEAA202 		asr	r2, r2, #2
 9677              	.LVL1109:
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9678              		.loc 1 2628 34 is_stmt 1 discriminator 3 view .LVU3126
2628:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9679              		.loc 1 2628 3 is_stmt 0 discriminator 3 view .LVU3127
 9680 060c F4DC     		bgt	.L850
 9681              	.LVL1110:
 9682              	.L848:
2634:src/display.c **** 	  }
 9683              		.loc 1 2634 6 is_stmt 1 view .LVU3128
2634:src/display.c **** 	  }
 9684              		.loc 1 2634 12 is_stmt 0 view .LVU3129
 9685 060e 5F23     		movs	r3, #95
 9686 0610 0B4E     		ldr	r6, .L1121+4
 9687 0612 DFF87880 		ldr	r8, .L1121+80
 9688 0616 0370     		strb	r3, [r0]
 9689 0618 EBE5     		b	.L840
 9690              	.LVL1111:
 9691              	.L936:
 9692              	.LBB542:
 9693              	.LBB515:
1292:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9694              		.loc 1 1292 5 is_stmt 1 view .LVU3130
 9695 061a 1B4B     		ldr	r3, .L1121+76
 9696 061c 0022     		movs	r2, #0
 9697 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9698 0620 ABF10900 		sub	r0, fp, #9
 9699              	.LVL1112:
1292:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9700              		.loc 1 1292 5 is_stmt 0 view .LVU3131
 9701 0624 FFF7FEFF 		bl	set_decimal
 9702              	.LVL1113:
 9703 0628 5D46     		mov	r5, fp
 9704 062a 88E7     		b	.L935
 9705              	.LVL1114:
 9706              	.L926:
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccW65oEM.s 			page 278


 9707              		.loc 1 1267 9 is_stmt 1 view .LVU3132
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9708              		.loc 1 1267 2 is_stmt 0 view .LVU3133
 9709 062c BCF1000F 		cmp	ip, #0
 9710 0630 BBD0     		beq	.L927
1227:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9711              		.loc 1 1227 4 view .LVU3134
 9712 0632 CB46     		mov	fp, r9
1204:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9713              		.loc 1 1204 11 view .LVU3135
 9714 0634 4FF0FF33 		mov	r3, #-1
 9715 0638 74E7     		b	.L939
 9716              	.L1122:
 9717 063a 00BF     		.align	2
 9718              	.L1121:
 9719 063c 0C000000 		.word	.LANCHOR17+12
 9720 0640 00000000 		.word	DispMsg
 9721 0644 08000000 		.word	.LC23
 9722 0648 18000000 		.word	.LC24
 9723 064c 00000000 		.word	LastDisplayedNumber
 9724 0650 34000000 		.word	.LC25
 9725 0654 00000000 		.word	LastDisplayedExponent
 9726 0658 00000000 		.word	.LANCHOR19
 9727 065c AC000000 		.word	.LC42
 9728 0660 00000000 		.word	ShowRPN
 9729 0664 56040000 		.word	argcmds+1110
 9730 0668 00000000 		.word	.LANCHOR21
 9731 066c 00000000 		.word	.LANCHOR23
 9732 0670 B4000000 		.word	.LC28
 9733 0674 00000000 		.word	argcmds
 9734 0678 00000000 		.word	.LC20
 9735 067c 04000000 		.word	.LC21
 9736 0680 00000000 		.word	.LANCHOR0
 9737 0684 BC000000 		.word	.LC27
 9738 0688 00000000 		.word	.LANCHOR1
 9739 068c 00000000 		.word	DispPlot
 9740 0690 00000000 		.word	ShowRegister
 9741              	.LVL1115:
 9742              	.L1087:
1204:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9743              		.loc 1 1204 11 view .LVU3136
 9744              	.LBE515:
 9745              	.LBE542:
 9746              	.LBB543:
2644:src/display.c **** 	  char b2[16];
 9747              		.loc 1 2644 4 is_stmt 1 view .LVU3137
2644:src/display.c **** 	  char b2[16];
 9748              		.loc 1 2644 45 is_stmt 0 view .LVU3138
 9749 0694 CC4B     		ldr	r3, .L1123
 9750 0696 1B68     		ldr	r3, [r3]
 9751 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
2644:src/display.c **** 	  char b2[16];
 9752              		.loc 1 2644 22 view .LVU3139
 9753 069c C0F34610 		ubfx	r0, r0, #5, #7
 9754 06a0 FFF7FEFF 		bl	current_catalogue
 9755              	.LVL1116:
2648:src/display.c **** 	  p = catcmd(op, b2);
ARM GAS  /tmp/ccW65oEM.s 			page 279


 9756              		.loc 1 2648 9 view .LVU3140
 9757 06a4 C949     		ldr	r1, .L1123+4
2644:src/display.c **** 	  char b2[16];
 9758              		.loc 1 2644 22 view .LVU3141
 9759 06a6 8246     		mov	r10, r0
 9760              	.LVL1117:
2645:src/display.c **** 	  const char *p;
 9761              		.loc 1 2645 4 is_stmt 1 view .LVU3142
2646:src/display.c **** 
 9762              		.loc 1 2646 4 view .LVU3143
2648:src/display.c **** 	  p = catcmd(op, b2);
 9763              		.loc 1 2648 4 view .LVU3144
2648:src/display.c **** 	  p = catcmd(op, b2);
 9764              		.loc 1 2648 9 is_stmt 0 view .LVU3145
 9765 06a8 4046     		mov	r0, r8
 9766              	.LVL1118:
2648:src/display.c **** 	  p = catcmd(op, b2);
 9767              		.loc 1 2648 9 view .LVU3146
 9768 06aa FFF7FEFF 		bl	scopy
 9769              	.LVL1119:
2649:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9770              		.loc 1 2649 8 view .LVU3147
 9771 06ae 08A9     		add	r1, sp, #32
2648:src/display.c **** 	  p = catcmd(op, b2);
 9772              		.loc 1 2648 9 view .LVU3148
 9773 06b0 0646     		mov	r6, r0
2649:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9774              		.loc 1 2649 8 view .LVU3149
 9775 06b2 5046     		mov	r0, r10
 9776              	.LVL1120:
2649:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9777              		.loc 1 2649 4 is_stmt 1 view .LVU3150
2649:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9778              		.loc 1 2649 8 is_stmt 0 view .LVU3151
 9779 06b4 FFF7FEFF 		bl	catcmd
 9780              	.LVL1121:
2650:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9781              		.loc 1 2650 7 view .LVU3152
 9782 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9783 06ba 142B     		cmp	r3, #20
2649:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9784              		.loc 1 2649 8 view .LVU3153
 9785 06bc 0146     		mov	r1, r0
 9786              	.LVL1122:
2650:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9787              		.loc 1 2650 4 is_stmt 1 view .LVU3154
2650:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9788              		.loc 1 2650 7 is_stmt 0 view .LVU3155
 9789 06be 05D0     		beq	.L853
2650:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9790              		.loc 1 2650 29 discriminator 1 view .LVU3156
 9791 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9792 06c2 9807     		lsls	r0, r3, #30
 9793              	.LVL1123:
2651:src/display.c **** 	  bp = scopy(bp, p);
 9794              		.loc 1 2651 6 is_stmt 1 discriminator 1 view .LVU3157
2651:src/display.c **** 	  bp = scopy(bp, p);
ARM GAS  /tmp/ccW65oEM.s 			page 280


 9795              		.loc 1 2651 12 is_stmt 0 discriminator 1 view .LVU3158
 9796 06c4 44BF     		itt	mi
 9797 06c6 1423     		movmi	r3, #20
 9798 06c8 06F8013B 		strbmi	r3, [r6], #1
 9799              	.LVL1124:
 9800              	.L853:
2652:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9801              		.loc 1 2652 4 is_stmt 1 view .LVU3159
2652:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9802              		.loc 1 2652 9 is_stmt 0 view .LVU3160
 9803 06cc 3046     		mov	r0, r6
 9804 06ce FFF7FEFF 		bl	scopy
 9805              	.LVL1125:
2653:src/display.c **** 	    // State2.disp_small = 1;
 9806              		.loc 1 2653 4 is_stmt 1 view .LVU3161
2653:src/display.c **** 	    // State2.disp_small = 1;
 9807              		.loc 1 2653 7 is_stmt 0 view .LVU3162
 9808 06d2 A9F11003 		sub	r3, r9, #16
 9809 06d6 012B     		cmp	r3, #1
 9810 06d8 5DD9     		bls	.L1102
2660:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9811              		.loc 1 2660 11 is_stmt 1 view .LVU3163
2660:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9812              		.loc 1 2660 15 is_stmt 0 view .LVU3164
 9813 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2660:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9814              		.loc 1 2660 14 view .LVU3165
 9815 06dc 5906     		lsls	r1, r3, #25
 9816 06de 7FF577AE 		bpl	.L858
2661:src/display.c **** 	      decNumber x, r;
 9817              		.loc 1 2661 6 is_stmt 1 view .LVU3166
2661:src/display.c **** 	      decNumber x, r;
 9818              		.loc 1 2661 9 is_stmt 0 view .LVU3167
 9819 06e2 B9F1120F 		cmp	r9, #18
 9820 06e6 00F00682 		beq	.L1103
2681:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9821              		.loc 1 2681 13 is_stmt 1 view .LVU3168
2681:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9822              		.loc 1 2681 46 is_stmt 0 view .LVU3169
 9823 06ea AAF58873 		sub	r3, r10, #272
2681:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9824              		.loc 1 2681 16 view .LVU3170
 9825 06ee 0D2B     		cmp	r3, #13
 9826 06f0 3FF66EAE 		bhi	.L858
 9827              	.LBB531:
2682:src/display.c **** 	      copyreg(&z, x);
 9828              		.loc 1 2682 8 is_stmt 1 discriminator 3 view .LVU3171
2682:src/display.c **** 	      copyreg(&z, x);
 9829              		.loc 1 2682 27 is_stmt 0 discriminator 3 view .LVU3172
 9830 06f4 B64B     		ldr	r3, .L1123+8
 9831 06f6 1E68     		ldr	r6, [r3]
 9832              	.LVL1126:
2683:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 9833              		.loc 1 2683 8 is_stmt 1 discriminator 3 view .LVU3173
 9834 06f8 15A8     		add	r0, sp, #84
 9835 06fa 3146     		mov	r1, r6
 9836 06fc FFF7FEFF 		bl	copyreg
ARM GAS  /tmp/ccW65oEM.s 			page 281


 9837              	.LVL1127:
2684:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 9838              		.loc 1 2684 8 discriminator 3 view .LVU3174
 9839 0700 5FFA8AF0 		uxtb	r0, r10
 9840 0704 FFF7FEFF 		bl	sigma_val
 9841              	.LVL1128:
2685:src/display.c **** 	      copyreg(x, &z);
 9842              		.loc 1 2685 8 discriminator 3 view .LVU3175
 9843 0708 FFF7FEFF 		bl	is_dblmode
 9844              	.LVL1129:
 9845 070c 0021     		movs	r1, #0
 9846 070e 0246     		mov	r2, r0
 9847 0710 3046     		mov	r0, r6
 9848 0712 FFF7FEFF 		bl	set_x
 9849              	.LVL1130:
2686:src/display.c **** 	      skip = 1;
 9850              		.loc 1 2686 8 discriminator 3 view .LVU3176
 9851 0716 15A9     		add	r1, sp, #84
 9852 0718 3046     		mov	r0, r6
 9853 071a FFF7FEFF 		bl	copyreg
 9854              	.LVL1131:
2687:src/display.c **** 	    }
 9855              		.loc 1 2687 8 discriminator 3 view .LVU3177
2687:src/display.c **** 	    }
 9856              		.loc 1 2687 8 is_stmt 0 discriminator 3 view .LVU3178
 9857              	.LBE531:
2690:src/display.c **** 	} else if (State2.multi) {
 9858              		.loc 1 2690 4 is_stmt 1 discriminator 3 view .LVU3179
 9859 071e 1EA8     		add	r0, sp, #120
 9860 0720 FFF7FEFF 		bl	set_status
 9861              	.LVL1132:
2690:src/display.c **** 	} else if (State2.multi) {
 9862              		.loc 1 2690 4 is_stmt 0 discriminator 3 view .LVU3180
 9863              	.LBE543:
2780:src/display.c ****       nostk:	show_flags();
 9864              		.loc 1 2780 2 is_stmt 1 discriminator 3 view .LVU3181
 9865 0724 FFF7FEFF 		bl	show_stack
 9866              	.LVL1133:
2781:src/display.c **** 	if (!skip) {
 9867              		.loc 1 2781 14 discriminator 3 view .LVU3182
 9868 0728 FFF7FEFF 		bl	show_flags
 9869              	.LVL1134:
2782:src/display.c **** 	  if (State2.runmode) {
 9870              		.loc 1 2782 2 discriminator 3 view .LVU3183
 9871              	.L857:
2827:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9872              		.loc 1 2827 2 view .LVU3184
 9873 072c FFF7FEFF 		bl	set_annunciators
 9874              	.LVL1135:
2828:src/display.c **** 	  ShowRPN = 0;
 9875              		.loc 1 2828 2 view .LVU3185
 9876 0730 A84E     		ldr	r6, .L1123+12
 9877 0732 DFF8BC82 		ldr	r8, .L1123+40
 9878 0736 DFF8BC92 		ldr	r9, .L1123+44
 9879 073a 27E5     		b	.L835
 9880              	.LVL1136:
 9881              	.L1088:
ARM GAS  /tmp/ccW65oEM.s 			page 282


2692:src/display.c **** 	  if (State2.numdigit > 0) {
 9882              		.loc 1 2692 4 view .LVU3186
2692:src/display.c **** 	  if (State2.numdigit > 0) {
 9883              		.loc 1 2692 42 is_stmt 0 view .LVU3187
 9884 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9885 073e A649     		ldr	r1, .L1123+16
 9886 0740 0423     		movs	r3, #4
 9887 0742 03EB0213 		add	r3, r3, r2, lsl #4
2692:src/display.c **** 	  if (State2.numdigit > 0) {
 9888              		.loc 1 2692 9 view .LVU3188
 9889 0746 1944     		add	r1, r1, r3
 9890 0748 4046     		mov	r0, r8
 9891 074a 2722     		movs	r2, #39
 9892 074c FFF7FEFF 		bl	scopy_char
 9893              	.LVL1137:
2693:src/display.c **** 	    *bp++ = (char) State2.digval;
 9894              		.loc 1 2693 7 view .LVU3189
 9895 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9896              	.LVL1138:
2693:src/display.c **** 	    *bp++ = (char) State2.digval;
 9897              		.loc 1 2693 4 is_stmt 1 view .LVU3190
2693:src/display.c **** 	    *bp++ = (char) State2.digval;
 9898              		.loc 1 2693 7 is_stmt 0 view .LVU3191
 9899 0752 002B     		cmp	r3, #0
 9900 0754 3FF44AAD 		beq	.L1070
2694:src/display.c **** 	    if (State2.numdigit > 1)
 9901              		.loc 1 2694 6 is_stmt 1 view .LVU3192
 9902              	.LVL1139:
2694:src/display.c **** 	    if (State2.numdigit > 1)
 9903              		.loc 1 2694 14 is_stmt 0 view .LVU3193
 9904 0758 2389     		ldrh	r3, [r4, #8]
 9905 075a 0370     		strb	r3, [r0]
2695:src/display.c **** 	      *bp++ = State2.digval2;
 9906              		.loc 1 2695 6 is_stmt 1 view .LVU3194
2695:src/display.c **** 	      *bp++ = State2.digval2;
 9907              		.loc 1 2695 9 is_stmt 0 view .LVU3195
 9908 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9909 075e 012B     		cmp	r3, #1
2696:src/display.c **** 	  }
 9910              		.loc 1 2696 8 is_stmt 1 view .LVU3196
 9911              	.LVL1140:
2696:src/display.c **** 	  }
 9912              		.loc 1 2696 22 is_stmt 0 view .LVU3197
 9913 0760 84BF     		itt	hi
 9914 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2696:src/display.c **** 	  }
 9915              		.loc 1 2696 14 view .LVU3198
 9916 0764 4370     		strbhi	r3, [r0, #1]
 9917 0766 41E5     		b	.L1070
 9918              	.LVL1141:
 9919              	.L969:
 9920              	.LBB544:
 9921              	.LBB526:
2817:src/display.c **** 	      while(*b) {
 9922              		.loc 1 2817 10 view .LVU3199
 9923 0768 5A1C     		adds	r2, r3, #1
 9924 076a C2E5     		b	.L950
ARM GAS  /tmp/ccW65oEM.s 			page 283


 9925              	.LVL1142:
 9926              	.L1100:
2817:src/display.c **** 	      while(*b) {
 9927              		.loc 1 2817 10 view .LVU3200
 9928              	.LBE526:
 9929              	.LBE544:
 9930              	.LBB545:
 9931              	.LBB516:
1345:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 9932              		.loc 1 1345 6 is_stmt 1 view .LVU3201
1350:src/display.c **** #  endif
 9933              		.loc 1 1350 6 view .LVU3202
 9934 076c 0AF10100 		add	r0, r10, #1
 9935              	.LVL1143:
1350:src/display.c **** #  endif
 9936              		.loc 1 1350 6 is_stmt 0 view .LVU3203
 9937 0770 FFF7FEFF 		bl	s_to_i
 9938              	.LVL1144:
1350:src/display.c **** #  endif
 9939              		.loc 1 1350 6 view .LVU3204
 9940 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9941 0778 2D2B     		cmp	r3, #45
 9942 077a 0CBF     		ite	eq
 9943 077c 0621     		moveq	r1, #6
 9944 077e 0421     		movne	r1, #4
 9945 0780 0022     		movs	r2, #0
 9946 0782 FFF7FEFF 		bl	set_exp
 9947              	.LVL1145:
 9948 0786 15E7     		b	.L1077
 9949              	.LVL1146:
 9950              	.L1101:
1350:src/display.c **** #  endif
 9951              		.loc 1 1350 6 view .LVU3205
 9952              	.LBE516:
 9953              	.LBE545:
2618:src/display.c **** 	    *bp++ = '_';
 9954              		.loc 1 2618 6 is_stmt 1 view .LVU3206
2618:src/display.c **** 	    *bp++ = '_';
 9955              		.loc 1 2618 12 is_stmt 0 view .LVU3207
 9956 0788 1122     		movs	r2, #17
 9957 078a 89E6     		b	.L1069
 9958              	.LVL1147:
 9959              	.L1097:
 9960              	.LBB546:
 9961              	.LBB517:
1210:src/display.c **** #endif
 9962              		.loc 1 1210 11 view .LVU3208
 9963 078c 8146     		mov	r9, r0
1227:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9964              		.loc 1 1227 4 view .LVU3209
 9965 078e 8346     		mov	fp, r0
 9966              	.LBB510:
1263:src/display.c **** 	}
 9967              		.loc 1 1263 16 view .LVU3210
 9968 0790 4FF0FF33 		mov	r3, #-1
 9969              	.LVL1148:
1263:src/display.c **** 	}
ARM GAS  /tmp/ccW65oEM.s 			page 284


 9970              		.loc 1 1263 16 view .LVU3211
 9971 0794 C6E6     		b	.L939
 9972              	.LVL1149:
 9973              	.L1102:
1263:src/display.c **** 	}
 9974              		.loc 1 1263 16 view .LVU3212
 9975              	.LBE510:
 9976              	.LBE517:
 9977              	.LBE546:
 9978              	.LBB547:
2655:src/display.c **** 	      set_digits_string("0 to 255", 0);
 9979              		.loc 1 2655 6 is_stmt 1 view .LVU3213
2655:src/display.c **** 	      set_digits_string("0 to 255", 0);
 9980              		.loc 1 2655 9 is_stmt 0 view .LVU3214
 9981 0796 BAF5274F 		cmp	r10, #42752
 9982 079a 00F09C81 		beq	.L855
2655:src/display.c **** 	      set_digits_string("0 to 255", 0);
 9983              		.loc 1 2655 41 discriminator 1 view .LVU3215
 9984 079e BAF5284F 		cmp	r10, #43008
 9985 07a2 00F09881 		beq	.L855
2658:src/display.c **** 	    skip = 1;
 9986              		.loc 1 2658 8 is_stmt 1 view .LVU3216
2658:src/display.c **** 	    skip = 1;
 9987              		.loc 1 2658 14 is_stmt 0 view .LVU3217
 9988 07a6 0AF07F00 		and	r0, r10, #127
 9989 07aa 0021     		movs	r1, #0
 9990 07ac FFF7FEFF 		bl	get_const
 9991              	.LVL1150:
2658:src/display.c **** 	    skip = 1;
 9992              		.loc 1 2658 8 view .LVU3218
 9993 07b0 0022     		movs	r2, #0
 9994              	.LVL1151:
 9995              	.L1073:
 9996              	.LBB532:
2679:src/display.c **** 	      skip = 1;
 9997              		.loc 1 2679 8 discriminator 1 view .LVU3219
 9998 07b2 1146     		mov	r1, r2
 9999 07b4 FFF7FEFF 		bl	set_x
 10000              	.LVL1152:
2680:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10001              		.loc 1 2680 8 is_stmt 1 discriminator 1 view .LVU3220
2680:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10002              		.loc 1 2680 8 is_stmt 0 discriminator 1 view .LVU3221
 10003              	.LBE532:
2690:src/display.c **** 	} else if (State2.multi) {
 10004              		.loc 1 2690 4 is_stmt 1 discriminator 1 view .LVU3222
 10005 07b8 1EA8     		add	r0, sp, #120
 10006 07ba FFF7FEFF 		bl	set_status
 10007              	.LVL1153:
 10008              	.L1074:
2690:src/display.c **** 	} else if (State2.multi) {
 10009              		.loc 1 2690 4 is_stmt 0 discriminator 1 view .LVU3223
 10010              	.LBE547:
2780:src/display.c ****       nostk:	show_flags();
 10011              		.loc 1 2780 2 is_stmt 1 discriminator 1 view .LVU3224
 10012 07be FFF7FEFF 		bl	show_stack
 10013              	.LVL1154:
ARM GAS  /tmp/ccW65oEM.s 			page 285


2781:src/display.c **** 	if (!skip) {
 10014              		.loc 1 2781 14 discriminator 1 view .LVU3225
 10015 07c2 FFF7FEFF 		bl	show_flags
 10016              	.LVL1155:
2782:src/display.c **** 	  if (State2.runmode) {
 10017              		.loc 1 2782 2 discriminator 1 view .LVU3226
 10018 07c6 B1E7     		b	.L857
 10019              	.LVL1156:
 10020              	.L966:
 10021              	.LBB548:
 10022              	.LBB518:
 10023              	.LBB511:
1247:src/display.c **** 	    if (gotdot <= j) {
 10024              		.loc 1 1247 8 is_stmt 0 view .LVU3227
 10025 07c8 4FF0090B 		mov	fp, #9
 10026              	.LVL1157:
 10027              	.L931:
1260:src/display.c **** 	    overflow_to_left = 1;
 10028              		.loc 1 1260 6 is_stmt 1 view .LVU3228
 10029 07cc 3C21     		movs	r1, #60
 10030 07ce 0020     		movs	r0, #0
 10031 07d0 FFF7FEFF 		bl	set_dig
 10032              	.LVL1158:
1261:src/display.c **** 	  }
 10033              		.loc 1 1261 6 view .LVU3229
1261:src/display.c **** 	  }
 10034              		.loc 1 1261 6 is_stmt 0 view .LVU3230
 10035 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1261:src/display.c **** 	  }
 10036              		.loc 1 1261 6 view .LVU3231
 10037              	.LBE511:
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10038              		.loc 1 1267 9 is_stmt 1 view .LVU3232
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10039              		.loc 1 1267 2 is_stmt 0 view .LVU3233
 10040 07d8 0023     		movs	r3, #0
 10041 07da BCF1000F 		cmp	ip, #0
 10042 07de 7FF49FAE 		bne	.L960
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10043              		.loc 1 1267 2 view .LVU3234
 10044 07e2 E7E6     		b	.L1077
 10045              	.LVL1159:
 10046              	.L1090:
1267:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10047              		.loc 1 1267 2 view .LVU3235
 10048              	.LBE518:
 10049              	.LBE548:
2703:src/display.c **** 	  skip = 1;
 10050              		.loc 1 2703 4 is_stmt 1 view .LVU3236
 10051              	.LBB549:
 10052              	.LBI549:
2409:src/display.c **** 	char buf[16];
 10053              		.loc 1 2409 19 view .LVU3237
 10054              	.LBB550:
2410:src/display.c **** 	unsigned short int pc = State2.digval;
 10055              		.loc 1 2410 2 view .LVU3238
2411:src/display.c **** 	unsigned int op = getprog(pc);
ARM GAS  /tmp/ccW65oEM.s 			page 286


 10056              		.loc 1 2411 2 view .LVU3239
2411:src/display.c **** 	unsigned int op = getprog(pc);
 10057              		.loc 1 2411 21 is_stmt 0 view .LVU3240
 10058 07e4 B4F80890 		ldrh	r9, [r4, #8]
 10059              	.LVL1160:
2412:src/display.c **** 	int n = nLIB(pc);
 10060              		.loc 1 2412 2 is_stmt 1 view .LVU3241
2417:src/display.c **** #ifndef REALBUILD
 10061              		.loc 1 2417 27 is_stmt 0 view .LVU3242
 10062 07e8 DFF80C82 		ldr	r8, .L1123+48
 10063              	.LVL1161:
2419:src/display.c **** #endif
 10064              		.loc 1 2419 41 view .LVU3243
 10065 07ec 7B4F     		ldr	r7, .L1123+20
2412:src/display.c **** 	int n = nLIB(pc);
 10066              		.loc 1 2412 20 view .LVU3244
 10067 07ee 4846     		mov	r0, r9
 10068 07f0 FFF7FEFF 		bl	getprog
 10069              	.LVL1162:
 10070 07f4 4FEA9936 		lsr	r6, r9, #14
2416:src/display.c **** 	set_digits_string(libname[n], 0);
 10071              		.loc 1 2416 2 view .LVU3245
 10072 07f8 15A9     		add	r1, sp, #84
2412:src/display.c **** 	int n = nLIB(pc);
 10073              		.loc 1 2412 20 view .LVU3246
 10074 07fa 8246     		mov	r10, r0
 10075              	.LVL1163:
2413:src/display.c **** 	unsigned short int lblpc;
 10076              		.loc 1 2413 2 is_stmt 1 view .LVU3247
2414:src/display.c **** 
 10077              		.loc 1 2414 2 view .LVU3248
2416:src/display.c **** 	set_digits_string(libname[n], 0);
 10078              		.loc 1 2416 2 view .LVU3249
2417:src/display.c **** #ifndef REALBUILD
 10079              		.loc 1 2417 27 is_stmt 0 view .LVU3250
 10080 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2416:src/display.c **** 	set_digits_string(libname[n], 0);
 10081              		.loc 1 2416 2 view .LVU3251
 10082 0800 FFF7FEFF 		bl	prt
 10083              	.LVL1164:
2416:src/display.c **** 	set_digits_string(libname[n], 0);
 10084              		.loc 1 2416 2 view .LVU3252
 10085 0804 FFF7FEFF 		bl	set_status
 10086              	.LVL1165:
2417:src/display.c **** #ifndef REALBUILD
 10087              		.loc 1 2417 2 is_stmt 1 view .LVU3253
 10088 0808 08EB0600 		add	r0, r8, r6
 10089 080c 0021     		movs	r1, #0
 10090 080e FFF7FEFF 		bl	set_digits_string
 10091              	.LVL1166:
2419:src/display.c **** #endif
 10092              		.loc 1 2419 2 view .LVU3254
 10093 0812 7348     		ldr	r0, .L1123+24
 10094 0814 07EB4601 		add	r1, r7, r6, lsl #1
 10095 0818 FFF7FEFF 		bl	scopy
 10096              	.LVL1167:
2422:src/display.c **** 	  lblpc = findmultilbl(op, 0);
ARM GAS  /tmp/ccW65oEM.s 			page 287


 10097              		.loc 1 2422 2 view .LVU3255
2422:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10098              		.loc 1 2422 5 is_stmt 0 view .LVU3256
 10099 081c 1AF4704F 		tst	r10, #61440
 10100 0820 CDD0     		beq	.L1074
2423:src/display.c **** 	  if (lblpc != pc) {
 10101              		.loc 1 2423 4 is_stmt 1 view .LVU3257
2423:src/display.c **** 	  if (lblpc != pc) {
 10102              		.loc 1 2423 12 is_stmt 0 view .LVU3258
 10103 0822 5046     		mov	r0, r10
 10104 0824 0021     		movs	r1, #0
 10105 0826 FFF7FEFF 		bl	findmultilbl
 10106              	.LVL1168:
2423:src/display.c **** 	  if (lblpc != pc) {
 10107              		.loc 1 2423 10 view .LVU3259
 10108 082a 86B2     		uxth	r6, r0
 10109              	.LVL1169:
2424:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10110              		.loc 1 2424 4 is_stmt 1 view .LVU3260
2424:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10111              		.loc 1 2424 7 is_stmt 0 view .LVU3261
 10112 082c B145     		cmp	r9, r6
2423:src/display.c **** 	  if (lblpc != pc) {
 10113              		.loc 1 2423 12 view .LVU3262
 10114 082e 8246     		mov	r10, r0
 10115              	.LVL1170:
2424:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10116              		.loc 1 2424 7 view .LVU3263
 10117 0830 C5D0     		beq	.L1074
2425:src/display.c **** 	    n = nLIB(lblpc);
 10118              		.loc 1 2425 6 is_stmt 1 view .LVU3264
 10119 0832 6C48     		ldr	r0, .L1123+28
 10120 0834 3F21     		movs	r1, #63
 10121 0836 FFF7FEFF 		bl	set_digits_string
 10122              	.LVL1171:
2426:src/display.c **** 	    if (n == REGION_RAM)
 10123              		.loc 1 2426 6 view .LVU3265
2427:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10124              		.loc 1 2427 6 view .LVU3266
2427:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10125              		.loc 1 2427 9 is_stmt 0 view .LVU3267
 10126 083a B60B     		lsrs	r6, r6, #14
 10127              	.LVL1172:
2427:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10128              		.loc 1 2427 9 view .LVU3268
 10129 083c 40F07D81 		bne	.L886
2428:src/display.c **** 	    else {
 10130              		.loc 1 2428 8 is_stmt 1 view .LVU3269
 10131 0840 3246     		mov	r2, r6
 10132 0842 1FFA8AF0 		uxth	r0, r10
 10133 0846 0121     		movs	r1, #1
 10134 0848 FFF7FEFF 		bl	set_exp
 10135              	.LVL1173:
 10136 084c B7E7     		b	.L1074
 10137              	.LVL1174:
 10138              	.L1089:
2428:src/display.c **** 	    else {
ARM GAS  /tmp/ccW65oEM.s 			page 288


 10139              		.loc 1 2428 8 is_stmt 0 view .LVU3270
 10140              	.LBE550:
 10141              	.LBE549:
2700:src/display.c **** 	  skip = 1;
 10142              		.loc 1 2700 4 is_stmt 1 view .LVU3271
 10143              	.LBB552:
 10144              	.LBI552:
2307:src/display.c **** 	int i, n;
 10145              		.loc 1 2307 19 view .LVU3272
 10146              	.LBB553:
2308:src/display.c **** 	int j = SEGS_EXP_BASE;
 10147              		.loc 1 2308 2 view .LVU3273
2309:src/display.c **** 	const int status = State2.status - 3;
 10148              		.loc 1 2309 2 view .LVU3274
2310:src/display.c **** 	char buf[16], *p = buf;
 10149              		.loc 1 2310 2 view .LVU3275
2314:src/display.c **** 	  set_status("Free:");
 10150              		.loc 1 2314 5 is_stmt 0 view .LVU3276
 10151 084e 012B     		cmp	r3, #1
2310:src/display.c **** 	char buf[16], *p = buf;
 10152              		.loc 1 2310 12 view .LVU3277
 10153 0850 A3F10307 		sub	r7, r3, #3
 10154              	.LVL1175:
2311:src/display.c **** 	unsigned int pc;
 10155              		.loc 1 2311 2 is_stmt 1 view .LVU3278
2312:src/display.c **** 
 10156              		.loc 1 2312 2 view .LVU3279
2314:src/display.c **** 	  set_status("Free:");
 10157              		.loc 1 2314 2 view .LVU3280
2314:src/display.c **** 	  set_status("Free:");
 10158              		.loc 1 2314 5 is_stmt 0 view .LVU3281
 10159 0854 00F01782 		beq	.L1104
2322:src/display.c **** 	  /* Top line */
 10160              		.loc 1 2322 7 is_stmt 1 view .LVU3282
2322:src/display.c **** 	  /* Top line */
 10161              		.loc 1 2322 10 is_stmt 0 view .LVU3283
 10162 0858 7B1C     		adds	r3, r7, #1
 10163 085a 00F07782 		beq	.L1105
 10164              	.LBB554:
2339:src/display.c **** 	  int end;
 10165              		.loc 1 2339 4 is_stmt 1 view .LVU3284
2340:src/display.c **** 	  int group = 10;
 10166              		.loc 1 2340 4 view .LVU3285
2341:src/display.c **** 	  int start = 0;
 10167              		.loc 1 2341 4 view .LVU3286
 10168              	.LVL1176:
2342:src/display.c **** 		
 10169              		.loc 1 2342 4 view .LVU3287
2344:src/display.c **** 	    base = 10 * status;
 10170              		.loc 1 2344 4 view .LVU3288
2344:src/display.c **** 	    base = 10 * status;
 10171              		.loc 1 2344 7 is_stmt 0 view .LVU3289
 10172 085e 092F     		cmp	r7, #9
 10173 0860 40F32C82 		ble	.L1106
2354:src/display.c **** 	    base = regX_idx;
 10174              		.loc 1 2354 9 is_stmt 1 view .LVU3290
2354:src/display.c **** 	    base = regX_idx;
ARM GAS  /tmp/ccW65oEM.s 			page 289


 10175              		.loc 1 2354 12 is_stmt 0 view .LVU3291
 10176 0864 0A2F     		cmp	r7, #10
 10177 0866 00F0FE81 		beq	.L1107
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10178              		.loc 1 2362 6 is_stmt 1 view .LVU3292
 10179              	.LVL1177:
2363:src/display.c **** 	    set_status("FL.00-.15");
 10180              		.loc 1 2363 6 view .LVU3293
2364:src/display.c **** 	  }
 10181              		.loc 1 2364 6 view .LVU3294
 10182 086a 5F48     		ldr	r0, .L1123+32
 10183 086c 4FF00A0A 		mov	r10, #10
 10184 0870 FFF7FEFF 		bl	set_status
 10185              	.LVL1178:
2341:src/display.c **** 	  int start = 0;
 10186              		.loc 1 2341 8 is_stmt 0 view .LVU3295
 10187 0874 5646     		mov	r6, r10
2342:src/display.c **** 		
 10188              		.loc 1 2342 8 view .LVU3296
 10189 0876 4FF0000B 		mov	fp, #0
2364:src/display.c **** 	  }
 10190              		.loc 1 2364 6 view .LVU3297
 10191 087a 0222     		movs	r2, #2
 10192 087c 4FF00908 		mov	r8, #9
 10193              	.LVL1179:
2364:src/display.c **** 	  }
 10194              		.loc 1 2364 6 view .LVU3298
 10195 0880 0720     		movs	r0, #7
2363:src/display.c **** 	    set_status("FL.00-.15");
 10196              		.loc 1 2363 10 view .LVU3299
 10197 0882 4FF07F09 		mov	r9, #127
 10198              	.LVL1180:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10199              		.loc 1 2362 11 view .LVU3300
 10200 0886 7027     		movs	r7, #112
 10201              	.LVL1181:
 10202              	.L872:
2366:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10203              		.loc 1 2366 4 is_stmt 1 view .LVU3301
2367:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10204              		.loc 1 2367 4 view .LVU3302
 10205              	.LBB555:
 10206              	.LBI555:
 342:src/display.c ****   if (res) {
 10207              		.loc 1 342 14 view .LVU3303
 10208              	.LBB556:
 343:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10209              		.loc 1 343 3 view .LVU3304
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 10210              		.loc 1 346 5 view .LVU3305
 10211 0888 0192     		str	r2, [sp, #4]
 10212 088a FFF7FEFF 		bl	set_dot
 10213              	.LVL1182:
 347:src/display.c ****       set_dot(posn+8);
 10214              		.loc 1 347 5 view .LVU3306
 10215              	.LBB557:
 10216              	.LBI557:
ARM GAS  /tmp/ccW65oEM.s 			page 290


 342:src/display.c ****   if (res) {
 10217              		.loc 1 342 14 view .LVU3307
 10218              	.LBB558:
 350:src/display.c **** #endif
 10219              		.loc 1 350 5 view .LVU3308
 350:src/display.c **** #endif
 10220              		.loc 1 350 38 is_stmt 0 view .LVU3309
 10221 088e 019A     		ldr	r2, [sp, #4]
 10222 0890 534B     		ldr	r3, .L1123+24
 10223 0892 2E21     		movs	r1, #46
 10224 0894 9954     		strb	r1, [r3, r2]
 353:src/display.c **** }
 10225              		.loc 1 353 3 is_stmt 1 view .LVU3310
 10226              	.LVL1183:
 353:src/display.c **** }
 10227              		.loc 1 353 3 is_stmt 0 view .LVU3311
 10228              	.LBE558:
 10229              	.LBE557:
 353:src/display.c **** }
 10230              		.loc 1 353 3 is_stmt 1 view .LVU3312
 353:src/display.c **** }
 10231              		.loc 1 353 3 is_stmt 0 view .LVU3313
 10232              	.LBE556:
 10233              	.LBE555:
2368:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10234              		.loc 1 2368 4 is_stmt 1 view .LVU3314
2369:src/display.c **** 	    int k = i + base - start;
 10235              		.loc 1 2369 4 view .LVU3315
2369:src/display.c **** 	    int k = i + base - start;
 10236              		.loc 1 2369 20 view .LVU3316
 10237 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10238 089a D319     		adds	r3, r2, r7
 10239 089c 0293     		str	r3, [sp, #8]
 10240 089e A7EB0B03 		sub	r3, r7, fp
 10241 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10242              	.LBB559:
 10243              	.LBB560:
 10244              	.LBB561:
 10245              	.LBB562:
 10246              	.LBB563:
 350:src/display.c **** #endif
 10247              		.loc 1 350 38 is_stmt 0 view .LVU3317
 10248 08a6 0191     		str	r1, [sp, #4]
 10249 08a8 3E44     		add	r6, r6, r7
 10250              	.LVL1184:
 10251              	.L877:
 350:src/display.c **** #endif
 10252              		.loc 1 350 38 view .LVU3318
 10253              	.LBE563:
 10254              	.LBE562:
 10255              	.LBE561:
 10256              	.LBE560:
2370:src/display.c **** 	    int l = get_user_flag(k);
 10257              		.loc 1 2370 6 is_stmt 1 view .LVU3319
2371:src/display.c **** 	    k += group;
 10258              		.loc 1 2371 6 view .LVU3320
2371:src/display.c **** 	    k += group;
ARM GAS  /tmp/ccW65oEM.s 			page 291


 10259              		.loc 1 2371 14 is_stmt 0 view .LVU3321
 10260 08aa 039B     		ldr	r3, [sp, #12]
 10261 08ac 03EB0B00 		add	r0, r3, fp
 10262 08b0 FFF7FEFF 		bl	get_user_flag
 10263              	.LVL1185:
2373:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10264              		.loc 1 2373 9 view .LVU3322
 10265 08b4 4E45     		cmp	r6, r9
2371:src/display.c **** 	    k += group;
 10266              		.loc 1 2371 14 view .LVU3323
 10267 08b6 0546     		mov	r5, r0
 10268              	.LVL1186:
2372:src/display.c **** 	    if (end >= k) {
 10269              		.loc 1 2372 6 is_stmt 1 view .LVU3324
2373:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10270              		.loc 1 2373 6 view .LVU3325
2381:src/display.c **** 	    if (i == 4) {
 10271              		.loc 1 2381 8 is_stmt 0 view .LVU3326
 10272 08b8 08F10907 		add	r7, r8, #9
2373:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10273              		.loc 1 2373 9 view .LVU3327
 10274 08bc 3FDD     		ble	.L1108
 10275              	.LVL1187:
 10276              	.L874:
2379:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10277              		.loc 1 2379 6 is_stmt 1 view .LVU3328
 10278 08be 2946     		mov	r1, r5
 10279 08c0 4046     		mov	r0, r8
 10280 08c2 FFF7FEFF 		bl	set_dig
 10281              	.LVL1188:
2380:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10282              		.loc 1 2380 6 view .LVU3329
 10283              	.LBB573:
 10284              	.LBI560:
 342:src/display.c ****   if (res) {
 10285              		.loc 1 342 14 view .LVU3330
 10286              	.LBB570:
 343:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10287              		.loc 1 343 3 view .LVU3331
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 10288              		.loc 1 346 5 view .LVU3332
 10289 08c6 08F10700 		add	r0, r8, #7
 10290 08ca FFF7FEFF 		bl	set_dot
 10291              	.LVL1189:
 347:src/display.c ****       set_dot(posn+8);
 10292              		.loc 1 347 5 view .LVU3333
 10293              	.LBB567:
 10294              	.LBI562:
 342:src/display.c ****   if (res) {
 10295              		.loc 1 342 14 view .LVU3334
 10296              	.LBB564:
 350:src/display.c **** #endif
 10297              		.loc 1 350 5 view .LVU3335
 350:src/display.c **** #endif
 10298              		.loc 1 350 5 is_stmt 0 view .LVU3336
 10299              	.LBE564:
 10300              	.LBE567:
ARM GAS  /tmp/ccW65oEM.s 			page 292


 10301              	.LBE570:
 10302              	.LBE573:
 10303              	.LBE559:
2369:src/display.c **** 	    int k = i + base - start;
 10304              		.loc 1 2369 39 is_stmt 1 view .LVU3337
 10305              	.LBB584:
 10306              	.LBB574:
 10307              	.LBB571:
 10308              	.LBB568:
 10309              	.LBB565:
 350:src/display.c **** #endif
 10310              		.loc 1 350 30 is_stmt 0 view .LVU3338
 10311 08ce 474B     		ldr	r3, .L1123+36
 350:src/display.c **** #endif
 10312              		.loc 1 350 38 view .LVU3339
 10313 08d0 0199     		ldr	r1, [sp, #4]
 350:src/display.c **** #endif
 10314              		.loc 1 350 30 view .LVU3340
 10315 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10316 08d6 5208     		lsrs	r2, r2, #1
 350:src/display.c **** #endif
 10317              		.loc 1 350 38 view .LVU3341
 10318 08d8 414B     		ldr	r3, .L1123+24
 350:src/display.c **** #endif
 10319              		.loc 1 350 35 view .LVU3342
 10320 08da 0132     		adds	r2, r2, #1
 10321              	.LBE565:
 10322              	.LBE568:
 10323              	.LBE571:
 10324              	.LBE574:
2382:src/display.c **** 	      set_dig(j, 8);
 10325              		.loc 1 2382 9 view .LVU3343
 10326 08dc BBF1040F 		cmp	fp, #4
 10327              	.LBB575:
 10328              	.LBB572:
 10329              	.LBB569:
 10330              	.LBB566:
 350:src/display.c **** #endif
 10331              		.loc 1 350 38 view .LVU3344
 10332 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 353:src/display.c **** }
 10333              		.loc 1 353 3 is_stmt 1 view .LVU3345
 10334              	.LVL1190:
 353:src/display.c **** }
 10335              		.loc 1 353 3 is_stmt 0 view .LVU3346
 10336              	.LBE566:
 10337              	.LBE569:
 353:src/display.c **** }
 10338              		.loc 1 353 3 is_stmt 1 view .LVU3347
 353:src/display.c **** }
 10339              		.loc 1 353 3 is_stmt 0 view .LVU3348
 10340              	.LBE572:
 10341              	.LBE575:
2381:src/display.c **** 	    if (i == 4) {
 10342              		.loc 1 2381 6 is_stmt 1 view .LVU3349
2382:src/display.c **** 	      set_dig(j, 8);
 10343              		.loc 1 2382 6 view .LVU3350
ARM GAS  /tmp/ccW65oEM.s 			page 293


 10344              	.LBE584:
2369:src/display.c **** 	    int k = i + base - start;
 10345              		.loc 1 2369 40 is_stmt 0 view .LVU3351
 10346 08e4 0BF1010B 		add	fp, fp, #1
 10347              	.LVL1191:
2369:src/display.c **** 	    int k = i + base - start;
 10348              		.loc 1 2369 20 is_stmt 1 view .LVU3352
 10349              	.LBB585:
2382:src/display.c **** 	      set_dig(j, 8);
 10350              		.loc 1 2382 9 is_stmt 0 view .LVU3353
 10351 08e8 42D0     		beq	.L1109
2382:src/display.c **** 	      set_dig(j, 8);
 10352              		.loc 1 2382 9 view .LVU3354
 10353              	.LBE585:
2369:src/display.c **** 	    int k = i + base - start;
 10354              		.loc 1 2369 4 view .LVU3355
 10355 08ea D345     		cmp	fp, r10
 10356 08ec 06F10106 		add	r6, r6, #1
 10357 08f0 01D0     		beq	.L1110
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10358              		.loc 1 2362 11 view .LVU3356
 10359 08f2 B846     		mov	r8, r7
 10360 08f4 D9E7     		b	.L877
 10361              	.L1110:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10362              		.loc 1 2362 11 view .LVU3357
 10363 08f6 049D     		ldr	r5, [sp, #16]
 10364              	.LVL1192:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10365              		.loc 1 2362 11 view .LVU3358
 10366 08f8 334F     		ldr	r7, .L1123
 10367              	.LVL1193:
 10368              	.L867:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10369              		.loc 1 2362 11 view .LVU3359
 10370              	.LBE554:
2390:src/display.c **** 	pc = state_pc();
 10371              		.loc 1 2390 2 is_stmt 1 view .LVU3360
2391:src/display.c **** 	if (isXROM(pc))
 10372              		.loc 1 2391 2 view .LVU3361
2391:src/display.c **** 	if (isXROM(pc))
 10373              		.loc 1 2391 7 is_stmt 0 view .LVU3362
 10374 08fa 3B68     		ldr	r3, [r7]
2391:src/display.c **** 	if (isXROM(pc))
 10375              		.loc 1 2391 5 view .LVU3363
 10376 08fc B3F8E077 		ldrh	r7, [r3, #2016]
 10377              	.LVL1194:
2392:src/display.c **** 	  pc = 1;
 10378              		.loc 1 2392 2 is_stmt 1 view .LVU3364
2392:src/display.c **** 	  pc = 1;
 10379              		.loc 1 2392 6 is_stmt 0 view .LVU3365
 10380 0900 BB0B     		lsrs	r3, r7, #14
2393:src/display.c **** 	for (n=i=0; i<4; i++) {
 10381              		.loc 1 2393 7 view .LVU3366
 10382 0902 032B     		cmp	r3, #3
 10383 0904 08BF     		it	eq
 10384 0906 0127     		moveq	r7, #1
ARM GAS  /tmp/ccW65oEM.s 			page 294


 10385              	.LVL1195:
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10386              		.loc 1 2394 2 is_stmt 1 view .LVU3367
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10387              		.loc 1 2394 14 view .LVU3368
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10388              		.loc 1 2394 8 is_stmt 0 view .LVU3369
 10389 0908 4FF00009 		mov	r9, #0
 10390 090c 6426     		movs	r6, #100
2390:src/display.c **** 	pc = state_pc();
 10391              		.loc 1 2390 4 view .LVU3370
 10392 090e 4FF06C08 		mov	r8, #108
 10393              	.LVL1196:
 10394              	.L881:
2395:src/display.c **** 	    if (++n == 4) {
 10395              		.loc 1 2395 4 is_stmt 1 view .LVU3371
2395:src/display.c **** 	    if (++n == 4) {
 10396              		.loc 1 2395 8 is_stmt 0 view .LVU3372
 10397 0912 0222     		movs	r2, #2
 10398 0914 3146     		mov	r1, r6
 10399 0916 3846     		mov	r0, r7
 10400 0918 FFF7FEFF 		bl	find_label_from
 10401              	.LVL1197:
2396:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10402              		.loc 1 2396 6 is_stmt 1 view .LVU3373
2395:src/display.c **** 	    if (++n == 4) {
 10403              		.loc 1 2395 7 is_stmt 0 view .LVU3374
 10404 091c 58B1     		cbz	r0, .L879
2396:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10405              		.loc 1 2396 9 view .LVU3375
 10406 091e 09F10109 		add	r9, r9, #1
 10407              	.LVL1198:
2400:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10408              		.loc 1 2400 8 is_stmt 1 view .LVU3376
2396:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10409              		.loc 1 2396 9 is_stmt 0 view .LVU3377
 10410 0922 B9F1040F 		cmp	r9, #4
2400:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10411              		.loc 1 2400 8 view .LVU3378
 10412 0926 A6F12301 		sub	r1, r6, #35
 10413 092a 4046     		mov	r0, r8
2396:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10414              		.loc 1 2396 9 view .LVU3379
 10415 092c 17D0     		beq	.L1111
2400:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10416              		.loc 1 2400 8 view .LVU3380
 10417 092e FFF7FEFF 		bl	set_dig
 10418              	.LVL1199:
2401:src/display.c **** 	    }
 10419              		.loc 1 2401 8 is_stmt 1 view .LVU3381
2401:src/display.c **** 	    }
 10420              		.loc 1 2401 10 is_stmt 0 view .LVU3382
 10421 0932 08F10708 		add	r8, r8, #7
 10422              	.LVL1200:
 10423              	.L879:
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10424              		.loc 1 2394 19 is_stmt 1 view .LVU3383
ARM GAS  /tmp/ccW65oEM.s 			page 295


2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10425              		.loc 1 2394 14 view .LVU3384
 10426 0936 0136     		adds	r6, r6, #1
 10427              	.LVL1201:
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10428              		.loc 1 2394 2 is_stmt 0 view .LVU3385
 10429 0938 682E     		cmp	r6, #104
 10430 093a EAD1     		bne	.L881
2394:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10431              		.loc 1 2394 2 view .LVU3386
 10432 093c 3FE7     		b	.L1074
 10433              	.LVL1202:
 10434              	.L1108:
 10435              	.LBB588:
 10436              	.LBB586:
2374:src/display.c **** 	      k += group;
 10437              		.loc 1 2374 8 is_stmt 1 view .LVU3387
2374:src/display.c **** 	      k += group;
 10438              		.loc 1 2374 14 is_stmt 0 view .LVU3388
 10439 093e 3046     		mov	r0, r6
 10440              	.LVL1203:
2374:src/display.c **** 	      k += group;
 10441              		.loc 1 2374 14 view .LVU3389
 10442 0940 FFF7FEFF 		bl	get_user_flag
 10443              	.LVL1204:
 10444 0944 029B     		ldr	r3, [sp, #8]
 10445 0946 03EB0B02 		add	r2, r3, fp
2376:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10446              		.loc 1 2376 11 view .LVU3390
 10447 094a 4A45     		cmp	r2, r9
2374:src/display.c **** 	      k += group;
 10448              		.loc 1 2374 10 view .LVU3391
 10449 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10450              	.LVL1205:
2375:src/display.c **** 	      if (end >= k)
 10451              		.loc 1 2375 8 is_stmt 1 view .LVU3392
2376:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10452              		.loc 1 2376 8 view .LVU3393
2376:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10453              		.loc 1 2376 11 is_stmt 0 view .LVU3394
 10454 0950 B5DC     		bgt	.L874
2377:src/display.c **** 	    }
 10455              		.loc 1 2377 3 is_stmt 1 view .LVU3395
2377:src/display.c **** 	    }
 10456              		.loc 1 2377 9 is_stmt 0 view .LVU3396
 10457 0952 1046     		mov	r0, r2
 10458 0954 FFF7FEFF 		bl	get_user_flag
 10459              	.LVL1206:
2377:src/display.c **** 	    }
 10460              		.loc 1 2377 5 view .LVU3397
 10461 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10462              	.LVL1207:
2377:src/display.c **** 	    }
 10463              		.loc 1 2377 5 view .LVU3398
 10464 095c AFE7     		b	.L874
 10465              	.LVL1208:
 10466              	.L1111:
ARM GAS  /tmp/ccW65oEM.s 			page 296


2377:src/display.c **** 	    }
 10467              		.loc 1 2377 5 view .LVU3399
 10468              	.LBE586:
 10469              	.LBE588:
2397:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10470              		.loc 1 2397 8 is_stmt 1 view .LVU3400
 10471 095e 4C21     		movs	r1, #76
 10472 0960 7320     		movs	r0, #115
 10473              	.LVL1209:
2397:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10474              		.loc 1 2397 8 is_stmt 0 view .LVU3401
 10475 0962 FFF7FEFF 		bl	set_dig
 10476              	.LVL1210:
2398:src/display.c **** 	    } else {
 10477              		.loc 1 2398 8 is_stmt 1 view .LVU3402
 10478 0966 4C21     		movs	r1, #76
 10479 0968 7A20     		movs	r0, #122
 10480 096a FFF7FEFF 		bl	set_dig
 10481              	.LVL1211:
 10482 096e E2E7     		b	.L879
 10483              	.LVL1212:
 10484              	.L1109:
 10485              	.LBB589:
 10486              	.LBB587:
2383:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10487              		.loc 1 2383 8 view .LVU3403
 10488 0970 0821     		movs	r1, #8
 10489 0972 3846     		mov	r0, r7
 10490 0974 FFF7FEFF 		bl	set_dig
 10491              	.LVL1213:
2384:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10492              		.loc 1 2384 8 view .LVU3404
 10493              	.LBB576:
 10494              	.LBI576:
 342:src/display.c ****   if (res) {
 10495              		.loc 1 342 14 view .LVU3405
 10496              	.LBB577:
 343:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10497              		.loc 1 343 3 view .LVU3406
 346:src/display.c ****     if (decimal != DECIMAL_DOT)
 10498              		.loc 1 346 5 view .LVU3407
 10499 0978 08F11000 		add	r0, r8, #16
 10500 097c FFF7FEFF 		bl	set_dot
 10501              	.LVL1214:
 347:src/display.c ****       set_dot(posn+8);
 10502              		.loc 1 347 5 view .LVU3408
 10503              	.LBB578:
 10504              	.LBI578:
 342:src/display.c ****   if (res) {
 10505              		.loc 1 342 14 view .LVU3409
 10506              	.LBB579:
 350:src/display.c **** #endif
 10507              		.loc 1 350 5 view .LVU3410
 350:src/display.c **** #endif
 10508              		.loc 1 350 30 is_stmt 0 view .LVU3411
 10509 0980 1A4B     		ldr	r3, .L1123+36
 350:src/display.c **** #endif
ARM GAS  /tmp/ccW65oEM.s 			page 297


 10510              		.loc 1 350 38 view .LVU3412
 10511 0982 0199     		ldr	r1, [sp, #4]
 350:src/display.c **** #endif
 10512              		.loc 1 350 30 view .LVU3413
 10513 0984 A3FB0723 		umull	r2, r3, r3, r7
 10514 0988 5B08     		lsrs	r3, r3, #1
 350:src/display.c **** #endif
 10515              		.loc 1 350 38 view .LVU3414
 10516 098a 154A     		ldr	r2, .L1123+24
 350:src/display.c **** #endif
 10517              		.loc 1 350 35 view .LVU3415
 10518 098c 0133     		adds	r3, r3, #1
 10519              	.LBE579:
 10520              	.LBE578:
 10521              	.LBE577:
 10522              	.LBE576:
2385:src/display.c **** 	    }
 10523              		.loc 1 2385 10 view .LVU3416
 10524 098e 08F11207 		add	r7, r8, #18
 10525              	.LVL1215:
 10526              	.LBB583:
 10527              	.LBB582:
 10528              	.LBB581:
 10529              	.LBB580:
 350:src/display.c **** #endif
 10530              		.loc 1 350 38 view .LVU3417
 10531 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 353:src/display.c **** }
 10532              		.loc 1 353 3 is_stmt 1 view .LVU3418
 10533              	.LVL1216:
 353:src/display.c **** }
 10534              		.loc 1 353 3 is_stmt 0 view .LVU3419
 10535              	.LBE580:
 10536              	.LBE581:
 353:src/display.c **** }
 10537              		.loc 1 353 3 is_stmt 1 view .LVU3420
 353:src/display.c **** }
 10538              		.loc 1 353 3 is_stmt 0 view .LVU3421
 10539              	.LBE582:
 10540              	.LBE583:
2385:src/display.c **** 	    }
 10541              		.loc 1 2385 8 is_stmt 1 view .LVU3422
2385:src/display.c **** 	    }
 10542              		.loc 1 2385 8 is_stmt 0 view .LVU3423
 10543              	.LBE587:
2369:src/display.c **** 	    int k = i + base - start;
 10544              		.loc 1 2369 39 is_stmt 1 view .LVU3424
2369:src/display.c **** 	    int k = i + base - start;
 10545              		.loc 1 2369 20 view .LVU3425
 10546 0996 0136     		adds	r6, r6, #1
2369:src/display.c **** 	    int k = i + base - start;
 10547              		.loc 1 2369 40 is_stmt 0 view .LVU3426
 10548 0998 4FF0050B 		mov	fp, #5
 10549              	.LVL1217:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10550              		.loc 1 2362 11 view .LVU3427
 10551 099c B846     		mov	r8, r7
ARM GAS  /tmp/ccW65oEM.s 			page 298


 10552 099e 84E7     		b	.L877
 10553              	.LVL1218:
 10554              	.L849:
2362:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10555              		.loc 1 2362 11 view .LVU3428
 10556              	.LBE589:
 10557              	.LBE553:
 10558              	.LBE552:
2631:src/display.c **** 	    }
 10559              		.loc 1 2631 3 is_stmt 1 view .LVU3429
2631:src/display.c **** 	    }
 10560              		.loc 1 2631 8 is_stmt 0 view .LVU3430
 10561 09a0 2189     		ldrh	r1, [r4, #8]
 10562 09a2 FFF7FEFF 		bl	num_arg_0
 10563              	.LVL1219:
2631:src/display.c **** 	    }
 10564              		.loc 1 2631 8 view .LVU3431
 10565 09a6 32E6     		b	.L848
 10566              	.LVL1220:
 10567              	.L899:
2718:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10568              		.loc 1 2718 11 is_stmt 1 view .LVU3432
2718:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10569              		.loc 1 2718 15 is_stmt 0 view .LVU3433
 10570 09a8 DFF84480 		ldr	r8, .L1123+40
 10571              	.LVL1221:
2718:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10572              		.loc 1 2718 15 view .LVU3434
 10573 09ac B8F90030 		ldrsh	r3, [r8]
2718:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10574              		.loc 1 2718 14 view .LVU3435
 10575 09b0 002B     		cmp	r3, #0
 10576 09b2 40F01381 		bne	.L1112
2720:src/display.c **** #if 0
 10577              		.loc 1 2720 11 is_stmt 1 view .LVU3436
2720:src/display.c **** #if 0
 10578              		.loc 1 2720 14 is_stmt 0 view .LVU3437
 10579 09b6 0907     		lsls	r1, r1, #28
 10580 09b8 00F1D880 		bmi	.L1113
 10581              	.LVL1222:
2780:src/display.c ****       nostk:	show_flags();
 10582              		.loc 1 2780 2 is_stmt 1 view .LVU3438
 10583 09bc FFF7FEFF 		bl	show_stack
 10584              	.LVL1223:
2781:src/display.c **** 	if (!skip) {
 10585              		.loc 1 2781 14 view .LVU3439
2750:src/display.c **** 	  }
 10586              		.loc 1 2750 12 is_stmt 0 view .LVU3440
 10587 09c0 0125     		movs	r5, #1
2781:src/display.c **** 	if (!skip) {
 10588              		.loc 1 2781 14 view .LVU3441
 10589 09c2 FFF7FEFF 		bl	show_flags
 10590              	.LVL1224:
2782:src/display.c **** 	  if (State2.runmode) {
 10591              		.loc 1 2782 2 is_stmt 1 view .LVU3442
 10592 09c6 42E4     		b	.L837
 10593              	.L1124:
ARM GAS  /tmp/ccW65oEM.s 			page 299


 10594              		.align	2
 10595              	.L1123:
 10596 09c8 00000000 		.word	main_ram
 10597 09cc 3C000000 		.word	.LC29
 10598 09d0 00000000 		.word	StackBase
 10599 09d4 00000000 		.word	DispMsg
 10600 09d8 00000000 		.word	multicmds
 10601 09dc 00000000 		.word	.LANCHOR22
 10602 09e0 00000000 		.word	LastDisplayedNumber
 10603 09e4 98000000 		.word	.LC39
 10604 09e8 8C000000 		.word	.LC38
 10605 09ec 398EE338 		.word	954437177
 10606 09f0 00000000 		.word	DispPlot
 10607 09f4 00000000 		.word	ShowRegister
 10608 09f8 00000000 		.word	.LANCHOR21
 10609              	.LVL1225:
 10610              	.L898:
2756:src/display.c **** 	  if (i > 0)
 10611              		.loc 1 2756 4 view .LVU3443
2756:src/display.c **** 	  if (i > 0)
 10612              		.loc 1 2756 8 is_stmt 0 view .LVU3444
 10613 09fc C44B     		ldr	r3, .L1125
 10614 09fe 1B68     		ldr	r3, [r3]
 10615 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10616              	.LVL1226:
2757:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10617              		.loc 1 2757 4 is_stmt 1 view .LVU3445
2757:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10618              		.loc 1 2757 7 is_stmt 0 view .LVU3446
 10619 0a04 0028     		cmp	r0, #0
 10620 0a06 72D0     		beq	.L909
2758:src/display.c **** 	  else
 10621              		.loc 1 2758 6 is_stmt 1 view .LVU3447
 10622 0a08 FFF7FEFF 		bl	getprog
 10623              	.LVL1227:
2758:src/display.c **** 	  else
 10624              		.loc 1 2758 6 is_stmt 0 view .LVU3448
 10625 0a0c 1EA9     		add	r1, sp, #120
 10626 0a0e FFF7FEFF 		bl	prt
 10627              	.LVL1228:
 10628 0a12 FFF7FEFF 		bl	set_status
 10629              	.LVL1229:
 10630              	.L910:
2761:src/display.c **** #if 0
 10631              		.loc 1 2761 4 is_stmt 1 view .LVU3449
 10632 0a16 8920     		movs	r0, #137
 10633 0a18 FFF7FEFF 		bl	set_dot
 10634              	.LVL1230:
2776:src/display.c **** 	      annuc = 1;
 10635              		.loc 1 2776 6 view .LVU3450
2776:src/display.c **** 	      annuc = 1;
 10636              		.loc 1 2776 10 is_stmt 0 view .LVU3451
 10637 0a1c FFF7FEFF 		bl	cur_shift
 10638              	.LVL1231:
2776:src/display.c **** 	      annuc = 1;
 10639              		.loc 1 2776 49 view .LVU3452
 10640 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccW65oEM.s 			page 300


 10641 0a22 03F00603 		and	r3, r3, #6
 10642 0a26 1843     		orrs	r0, r0, r3
 10643 0a28 10F0FF0F 		tst	r0, #255
 10644 0a2c 46D1     		bne	.L911
2781:src/display.c **** 	if (!skip) {
 10645              		.loc 1 2781 14 is_stmt 1 view .LVU3453
 10646 0a2e FFF7FEFF 		bl	show_flags
 10647              	.LVL1232:
2782:src/display.c **** 	  if (State2.runmode) {
 10648              		.loc 1 2782 2 view .LVU3454
 10649 0a32 B84E     		ldr	r6, .L1125+4
 10650 0a34 DFF81083 		ldr	r8, .L1125+56
 10651              	.LVL1233:
2782:src/display.c **** 	  if (State2.runmode) {
 10652              		.loc 1 2782 2 is_stmt 0 view .LVU3455
 10653 0a38 09E4     		b	.L837
 10654              	.LVL1234:
 10655              	.L1091:
2706:src/display.c **** 	  skip = 1;
 10656              		.loc 1 2706 4 is_stmt 1 view .LVU3456
 10657              	.LBB593:
 10658              	.LBI593:
2440:src/display.c **** 	char buf[16], *bp;
 10659              		.loc 1 2440 19 view .LVU3457
 10660              	.LBB594:
2441:src/display.c **** 	int n = State2.digval;
 10661              		.loc 1 2441 2 view .LVU3458
2442:src/display.c **** 	
 10662              		.loc 1 2442 2 view .LVU3459
2442:src/display.c **** 	
 10663              		.loc 1 2442 6 is_stmt 0 view .LVU3460
 10664 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10665              	.LVL1235:
2449:src/display.c **** 	  n;
 10666              		.loc 1 2449 2 is_stmt 1 view .LVU3461
2449:src/display.c **** 	  n;
 10667              		.loc 1 2449 54 is_stmt 0 view .LVU3462
 10668 0a3e CA07     		lsls	r2, r1, #31
 10669 0a40 4CBF     		ite	mi
 10670 0a42 08F17007 		addmi	r7, r8, #112
2442:src/display.c **** 	
 10671              		.loc 1 2442 6 view .LVU3463
 10672 0a46 4746     		movpl	r7, r8
 10673              	.LVL1236:
2453:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10674              		.loc 1 2453 2 is_stmt 1 view .LVU3464
2453:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10675              		.loc 1 2453 5 is_stmt 0 view .LVU3465
 10676 0a48 11F00401 		ands	r1, r1, #4
 10677 0a4c 1AD0     		beq	.L889
2454:src/display.c **** 	}
 10678              		.loc 1 2454 4 is_stmt 1 view .LVU3466
2454:src/display.c **** 	}
 10679              		.loc 1 2454 15 is_stmt 0 view .LVU3467
 10680 0a4e 15A9     		add	r1, sp, #84
 10681 0a50 3846     		mov	r0, r7
 10682 0a52 FFF7FEFF 		bl	alpha_rcl_s
ARM GAS  /tmp/ccW65oEM.s 			page 301


 10683              	.LVL1237:
2454:src/display.c **** 	}
 10684              		.loc 1 2454 4 view .LVU3468
 10685 0a56 FFF7FEFF 		bl	set_status
 10686              	.LVL1238:
 10687              	.L890:
2476:src/display.c ****       }
 10688              		.loc 1 2476 2 is_stmt 1 view .LVU3469
 10689 0a5a 3846     		mov	r0, r7
 10690 0a5c 0021     		movs	r1, #0
 10691 0a5e FFF7FEFF 		bl	format_reg
 10692              	.LVL1239:
 10693              	.LBE594:
 10694              	.LBE593:
2707:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10695              		.loc 1 2707 4 view .LVU3470
2708:src/display.c **** 	    annunciators();
 10696              		.loc 1 2708 4 view .LVU3471
2708:src/display.c **** 	    annunciators();
 10697              		.loc 1 2708 7 is_stmt 0 view .LVU3472
 10698 0a62 BAF1000F 		cmp	r10, #0
 10699 0a66 0AD1     		bne	.L896
2708:src/display.c **** 	    annunciators();
 10700              		.loc 1 2708 25 discriminator 1 view .LVU3473
 10701 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10702 0a6a 012B     		cmp	r3, #1
 10703 0a6c 7FF4A7AE 		bne	.L1074
2708:src/display.c **** 	    annunciators();
 10704              		.loc 1 2708 56 discriminator 2 view .LVU3474
 10705 0a70 A74B     		ldr	r3, .L1125
 10706 0a72 1B68     		ldr	r3, [r3]
 10707 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10708 0a78 DE07     		lsls	r6, r3, #31
 10709 0a7a 7FF5A0AE 		bpl	.L1074
 10710              	.L896:
2709:src/display.c **** 	  }
 10711              		.loc 1 2709 6 is_stmt 1 view .LVU3475
 10712 0a7e FFF7FEFF 		bl	annunciators
 10713              	.LVL1240:
2780:src/display.c ****       nostk:	show_flags();
 10714              		.loc 1 2780 2 view .LVU3476
 10715 0a82 9CE6     		b	.L1074
 10716              	.LVL1241:
 10717              	.L889:
 10718              	.LBB597:
 10719              	.LBB595:
2457:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10720              		.loc 1 2457 4 view .LVU3477
 10721 0a84 15AE     		add	r6, sp, #84
 10722 0a86 1022     		movs	r2, #16
 10723 0a88 3046     		mov	r0, r6
 10724 0a8a FFF7FEFF 		bl	xset
 10725              	.LVL1242:
2461:src/display.c **** #endif
 10726              		.loc 1 2461 4 view .LVU3478
2461:src/display.c **** #endif
 10727              		.loc 1 2461 9 is_stmt 0 view .LVU3479
ARM GAS  /tmp/ccW65oEM.s 			page 302


 10728 0a8e A249     		ldr	r1, .L1125+8
 10729 0a90 3046     		mov	r0, r6
 10730 0a92 FFF7FEFF 		bl	scopy_spc
 10731              	.LVL1243:
2463:src/display.c **** 	    *bp++ = '.';
 10732              		.loc 1 2463 8 view .LVU3480
 10733 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10734              	.LVL1244:
2463:src/display.c **** 	    *bp++ = '.';
 10735              		.loc 1 2463 4 is_stmt 1 view .LVU3481
2463:src/display.c **** 	    *bp++ = '.';
 10736              		.loc 1 2463 7 is_stmt 0 view .LVU3482
 10737 0a98 DB07     		lsls	r3, r3, #31
 10738 0a9a 40F1DA80 		bpl	.L891
2464:src/display.c **** 	    if (n >= 100) {
 10739              		.loc 1 2464 6 is_stmt 1 view .LVU3483
 10740              	.LVL1245:
2464:src/display.c **** 	    if (n >= 100) {
 10741              		.loc 1 2464 12 is_stmt 0 view .LVU3484
 10742 0a9e 2E23     		movs	r3, #46
2465:src/display.c **** 	      *bp++ = '1';
 10743              		.loc 1 2465 9 view .LVU3485
 10744 0aa0 B8F1630F 		cmp	r8, #99
2464:src/display.c **** 	    if (n >= 100) {
 10745              		.loc 1 2464 12 view .LVU3486
 10746 0aa4 0370     		strb	r3, [r0]
2465:src/display.c **** 	      *bp++ = '1';
 10747              		.loc 1 2465 6 is_stmt 1 view .LVU3487
2465:src/display.c **** 	      *bp++ = '1';
 10748              		.loc 1 2465 9 is_stmt 0 view .LVU3488
 10749 0aa6 00F3CF80 		bgt	.L892
2464:src/display.c **** 	    if (n >= 100) {
 10750              		.loc 1 2464 9 view .LVU3489
 10751 0aaa 0130     		adds	r0, r0, #1
 10752              	.LVL1246:
 10753              	.L893:
2471:src/display.c **** 	  else
 10754              		.loc 1 2471 6 is_stmt 1 view .LVU3490
2471:src/display.c **** 	  else
 10755              		.loc 1 2471 11 is_stmt 0 view .LVU3491
 10756 0aac 4146     		mov	r1, r8
 10757 0aae 0222     		movs	r2, #2
 10758 0ab0 FFF7FEFF 		bl	num_arg_0
 10759              	.LVL1247:
 10760              	.L895:
2474:src/display.c **** 	}
 10761              		.loc 1 2474 4 is_stmt 1 view .LVU3492
 10762 0ab4 3046     		mov	r0, r6
 10763 0ab6 FFF7FEFF 		bl	set_status
 10764              	.LVL1248:
 10765 0aba CEE7     		b	.L890
 10766              	.LVL1249:
 10767              	.L911:
2474:src/display.c **** 	}
 10768              		.loc 1 2474 4 is_stmt 0 view .LVU3493
 10769              	.LBE595:
 10770              	.LBE597:
ARM GAS  /tmp/ccW65oEM.s 			page 303


2777:src/display.c **** 	  goto nostk;
 10771              		.loc 1 2777 8 is_stmt 1 view .LVU3494
2781:src/display.c **** 	if (!skip) {
 10772              		.loc 1 2781 14 view .LVU3495
 10773 0abc FFF7FEFF 		bl	show_flags
 10774              	.LVL1250:
2782:src/display.c **** 	  if (State2.runmode) {
 10775              		.loc 1 2782 2 view .LVU3496
 10776 0ac0 944E     		ldr	r6, .L1125+4
 10777 0ac2 DFF88482 		ldr	r8, .L1125+56
 10778              	.LVL1251:
2777:src/display.c **** 	  goto nostk;
 10779              		.loc 1 2777 14 is_stmt 0 view .LVU3497
 10780 0ac6 0125     		movs	r5, #1
 10781 0ac8 FFF7C1BB 		b	.L837
 10782              	.LVL1252:
 10783              	.L1098:
 10784              	.LBB598:
 10785              	.LBB519:
 10786              	.LBB512:
1254:src/display.c **** 	      p++;
 10787              		.loc 1 1254 8 is_stmt 1 view .LVU3498
1255:src/display.c **** 	      if (!double_dot)
 10788              		.loc 1 1255 8 view .LVU3499
1255:src/display.c **** 	      if (!double_dot)
 10789              		.loc 1 1255 9 is_stmt 0 view .LVU3500
 10790 0acc 0AF1010A 		add	r10, r10, #1
 10791              	.LVL1253:
1256:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10792              		.loc 1 1256 8 is_stmt 1 view .LVU3501
1257:src/display.c **** 	    }
 10793              		.loc 1 1257 3 view .LVU3502
1257:src/display.c **** 	    }
 10794              		.loc 1 1257 5 is_stmt 0 view .LVU3503
 10795 0ad0 4FF0120B 		mov	fp, #18
 10796 0ad4 7AE6     		b	.L931
 10797              	.LVL1254:
 10798              	.L855:
1257:src/display.c **** 	    }
 10799              		.loc 1 1257 5 view .LVU3504
 10800              	.LBE512:
 10801              	.LBE519:
 10802              	.LBE598:
 10803              	.LBB599:
2656:src/display.c **** 	    else
 10804              		.loc 1 2656 8 is_stmt 1 view .LVU3505
 10805 0ad6 0021     		movs	r1, #0
 10806 0ad8 9048     		ldr	r0, .L1125+12
 10807 0ada FFF7FEFF 		bl	set_digits_string
 10808              	.LVL1255:
2690:src/display.c **** 	} else if (State2.multi) {
 10809              		.loc 1 2690 4 view .LVU3506
 10810 0ade 1EA8     		add	r0, sp, #120
 10811 0ae0 FFF7FEFF 		bl	set_status
 10812              	.LVL1256:
2690:src/display.c **** 	} else if (State2.multi) {
 10813              		.loc 1 2690 4 is_stmt 0 view .LVU3507
ARM GAS  /tmp/ccW65oEM.s 			page 304


 10814              	.LBE599:
2780:src/display.c ****       nostk:	show_flags();
 10815              		.loc 1 2780 2 is_stmt 1 view .LVU3508
 10816 0ae4 FFF7FEFF 		bl	show_stack
 10817              	.LVL1257:
2781:src/display.c **** 	if (!skip) {
 10818              		.loc 1 2781 14 view .LVU3509
 10819 0ae8 FFF7FEFF 		bl	show_flags
 10820              	.LVL1258:
2782:src/display.c **** 	  if (State2.runmode) {
 10821              		.loc 1 2782 2 view .LVU3510
 10822 0aec 1EE6     		b	.L857
 10823              	.LVL1259:
 10824              	.L909:
2760:src/display.c **** 	  set_dot(STO_annun);
 10825              		.loc 1 2760 6 view .LVU3511
 10826 0aee 8C48     		ldr	r0, .L1125+16
 10827              	.LVL1260:
2760:src/display.c **** 	  set_dot(STO_annun);
 10828              		.loc 1 2760 6 is_stmt 0 view .LVU3512
 10829 0af0 FFF7FEFF 		bl	set_status
 10830              	.LVL1261:
2760:src/display.c **** 	  set_dot(STO_annun);
 10831              		.loc 1 2760 6 view .LVU3513
 10832 0af4 8FE7     		b	.L910
 10833              	.LVL1262:
 10834              	.L1103:
 10835              	.LBB600:
 10836              	.LBB537:
2662:src/display.c **** 	      decimal64 z;
 10837              		.loc 1 2662 8 is_stmt 1 view .LVU3514
2663:src/display.c **** 
 10838              		.loc 1 2663 8 view .LVU3515
2665:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 10839              		.loc 1 2665 8 view .LVU3516
 10840 0af6 0CA8     		add	r0, sp, #48
 10841 0af8 FFF7FEFF 		bl	getX
 10842              	.LVL1263:
2666:src/display.c **** 		const unsigned int f = argKIND(op);
 10843              		.loc 1 2666 8 view .LVU3517
2666:src/display.c **** 		const unsigned int f = argKIND(op);
 10844              		.loc 1 2666 11 is_stmt 0 view .LVU3518
 10845 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10846 0b00 022B     		cmp	r3, #2
 10847 0b02 2BD1     		bne	.L860
 10848              	.LBB533:
2667:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10849              		.loc 1 2667 3 is_stmt 1 view .LVU3519
2667:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10850              		.loc 1 2667 22 is_stmt 0 view .LVU3520
 10851 0b04 5FFA8AFA 		uxtb	r10, r10
 10852              	.LVL1264:
2668:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10853              		.loc 1 2668 3 is_stmt 1 view .LVU3521
2668:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10854              		.loc 1 2668 6 is_stmt 0 view .LVU3522
 10855 0b08 BAF1980F 		cmp	r10, #152
ARM GAS  /tmp/ccW65oEM.s 			page 305


 10856              	.LBB534:
2671:src/display.c **** 		}
 10857              		.loc 1 2671 5 view .LVU3523
 10858 0b0c 15AE     		add	r6, sp, #84
 10859              	.LBE534:
2668:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10860              		.loc 1 2668 6 view .LVU3524
 10861 0b0e 21D8     		bhi	.L861
2668:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10862              		.loc 1 2668 28 discriminator 1 view .LVU3525
 10863 0b10 1823     		movs	r3, #24
 10864 0b12 844A     		ldr	r2, .L1125+20
 10865 0b14 03FB0AF3 		mul	r3, r3, r10
 10866 0b18 D358     		ldr	r3, [r2, r3]
2668:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10867              		.loc 1 2668 23 discriminator 1 view .LVU3526
 10868 0b1a DBB1     		cbz	r3, .L861
 10869              	.LBB535:
2669:src/display.c **** 		  update_speed(0);
 10870              		.loc 1 2669 5 is_stmt 1 view .LVU3527
 10871              	.LVL1265:
2670:src/display.c **** 		  fp(&r, &x);
 10872              		.loc 1 2670 20 view .LVU3528
2671:src/display.c **** 		}
 10873              		.loc 1 2671 5 view .LVU3529
 10874 0b1c 0CA9     		add	r1, sp, #48
 10875 0b1e 3046     		mov	r0, r6
 10876 0b20 9847     		blx	r3
 10877              	.LVL1266:
 10878              	.L862:
2671:src/display.c **** 		}
 10879              		.loc 1 2671 5 is_stmt 0 view .LVU3530
 10880              	.LBE535:
 10881              	.LBE533:
2677:src/display.c **** 	      packed_from_number(&z, &r);
 10882              		.loc 1 2677 8 is_stmt 1 discriminator 1 view .LVU3531
 10883 0b22 814A     		ldr	r2, .L1125+24
 10884 0b24 3146     		mov	r1, r6
 10885 0b26 3046     		mov	r0, r6
 10886 0b28 FFF7FEFF 		bl	decNumberNormalize
 10887              	.LVL1267:
2678:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 10888              		.loc 1 2678 8 discriminator 1 view .LVU3532
 10889 0b2c 06A8     		add	r0, sp, #24
 10890 0b2e 3146     		mov	r1, r6
 10891 0b30 FFF7FEFF 		bl	packed_from_number
 10892              	.LVL1268:
2679:src/display.c **** 	      skip = 1;
 10893              		.loc 1 2679 8 discriminator 1 view .LVU3533
 10894 0b34 0022     		movs	r2, #0
 10895 0b36 06A8     		add	r0, sp, #24
 10896 0b38 3BE6     		b	.L1073
 10897              	.LVL1269:
 10898              	.L886:
2679:src/display.c **** 	      skip = 1;
 10899              		.loc 1 2679 8 is_stmt 0 discriminator 1 view .LVU3534
 10900              	.LBE537:
ARM GAS  /tmp/ccW65oEM.s 			page 306


 10901              	.LBE600:
 10902              	.LBB601:
 10903              	.LBB551:
2430:src/display.c **** #ifndef REALBUILD
 10904              		.loc 1 2430 8 is_stmt 1 view .LVU3535
2430:src/display.c **** #ifndef REALBUILD
 10905              		.loc 1 2430 37 is_stmt 0 view .LVU3536
 10906 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2430:src/display.c **** #ifndef REALBUILD
 10907              		.loc 1 2430 8 view .LVU3537
 10908 0b3e 4044     		add	r0, r0, r8
 10909 0b40 0021     		movs	r1, #0
 10910 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10911              	.LVL1270:
2432:src/display.c **** #endif
 10912              		.loc 1 2432 8 is_stmt 1 view .LVU3538
2432:src/display.c **** #endif
 10913              		.loc 1 2432 47 is_stmt 0 view .LVU3539
 10914 0b46 0A21     		movs	r1, #10
2432:src/display.c **** #endif
 10915              		.loc 1 2432 8 view .LVU3540
 10916 0b48 01FB0671 		mla	r1, r1, r6, r7
 10917 0b4c 7748     		ldr	r0, .L1125+28
 10918 0b4e FFF7FEFF 		bl	scopy
 10919              	.LVL1271:
2432:src/display.c **** #endif
 10920              		.loc 1 2432 8 view .LVU3541
 10921              	.LBE551:
 10922              	.LBE601:
2780:src/display.c ****       nostk:	show_flags();
 10923              		.loc 1 2780 2 is_stmt 1 view .LVU3542
 10924 0b52 34E6     		b	.L1074
 10925              	.LVL1272:
 10926              	.L861:
 10927              	.LBB602:
 10928              	.LBB538:
 10929              	.LBB536:
2674:src/display.c **** 	      } else
 10930              		.loc 1 2674 5 view .LVU3543
 10931 0b54 3046     		mov	r0, r6
 10932 0b56 FFF7FEFF 		bl	set_NaN
 10933              	.LVL1273:
 10934 0b5a E2E7     		b	.L862
 10935              	.LVL1274:
 10936              	.L860:
2674:src/display.c **** 	      } else
 10937              		.loc 1 2674 5 is_stmt 0 view .LVU3544
 10938              	.LBE536:
2676:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10939              		.loc 1 2676 3 is_stmt 1 view .LVU3545
 10940 0b5c 15AE     		add	r6, sp, #84
 10941 0b5e 0CAA     		add	r2, sp, #48
 10942 0b60 0AF07F01 		and	r1, r10, #127
 10943 0b64 3046     		mov	r0, r6
 10944 0b66 FFF7FEFF 		bl	do_conv
 10945              	.LVL1275:
 10946 0b6a DAE7     		b	.L862
ARM GAS  /tmp/ccW65oEM.s 			page 307


 10947              	.LVL1276:
 10948              	.L1113:
2676:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10949              		.loc 1 2676 3 is_stmt 0 view .LVU3546
 10950              	.LBE538:
 10951              	.LBE602:
2724:src/display.c **** 	    j = State2.alpha_pos;
 10952              		.loc 1 2724 6 is_stmt 1 view .LVU3547
2724:src/display.c **** 	    j = State2.alpha_pos;
 10953              		.loc 1 2724 22 is_stmt 0 view .LVU3548
 10954 0b6c 684A     		ldr	r2, .L1125
 10955 0b6e 0193     		str	r3, [sp, #4]
 10956 0b70 1168     		ldr	r1, [r2]
2724:src/display.c **** 	    j = State2.alpha_pos;
 10957              		.loc 1 2724 11 view .LVU3549
 10958 0b72 1EA8     		add	r0, sp, #120
 10959 0b74 01F5F661 		add	r1, r1, #1968
 10960 0b78 FFF7FEFF 		bl	scopy
 10961              	.LVL1277:
2725:src/display.c **** 	    if (j != 0) {
 10962              		.loc 1 2725 16 view .LVU3550
 10963 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10964              	.LVL1278:
2725:src/display.c **** 	    if (j != 0) {
 10965              		.loc 1 2725 6 is_stmt 1 view .LVU3551
2726:src/display.c **** 	      i = slen(buf);
 10966              		.loc 1 2726 6 view .LVU3552
2726:src/display.c **** 	      i = slen(buf);
 10967              		.loc 1 2726 9 is_stmt 0 view .LVU3553
 10968 0b80 BBF1000F 		cmp	fp, #0
 10969 0b84 12D1     		bne	.L1114
2743:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 10970              		.loc 1 2743 8 is_stmt 1 view .LVU3554
2743:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 10971              		.loc 1 2743 11 is_stmt 0 view .LVU3555
 10972 0b86 BAF1000F 		cmp	r10, #0
 10973 0b8a 05D0     		beq	.L908
2744:src/display.c **** 		*bp++ = '\0';
 10974              		.loc 1 2744 3 is_stmt 1 view .LVU3556
 10975              	.LVL1279:
2744:src/display.c **** 		*bp++ = '\0';
 10976              		.loc 1 2744 23 is_stmt 0 view .LVU3557
 10977 0b8c 0AF1100A 		add	r10, r10, #16
2744:src/display.c **** 		*bp++ = '\0';
 10978              		.loc 1 2744 9 view .LVU3558
 10979 0b90 80F800A0 		strb	r10, [r0]
2745:src/display.c **** 	      }
 10980              		.loc 1 2745 3 is_stmt 1 view .LVU3559
 10981              	.LVL1280:
2745:src/display.c **** 	      }
 10982              		.loc 1 2745 9 is_stmt 0 view .LVU3560
 10983 0b94 80F801B0 		strb	fp, [r0, #1]
 10984              	.LVL1281:
 10985              	.L908:
2747:src/display.c **** 	    }
 10986              		.loc 1 2747 8 is_stmt 1 view .LVU3561
 10987 0b98 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/ccW65oEM.s 			page 308


 10988 0b9a FFF7FEFF 		bl	set_status_right
 10989              	.LVL1282:
2780:src/display.c ****       nostk:	show_flags();
 10990              		.loc 1 2780 2 view .LVU3562
2537:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10991              		.loc 1 2537 6 is_stmt 0 view .LVU3563
 10992 0b9e 0025     		movs	r5, #0
2780:src/display.c ****       nostk:	show_flags();
 10993              		.loc 1 2780 2 view .LVU3564
 10994 0ba0 FFF7FEFF 		bl	show_stack
 10995              	.LVL1283:
2781:src/display.c **** 	if (!skip) {
 10996              		.loc 1 2781 14 is_stmt 1 view .LVU3565
 10997 0ba4 FFF7FEFF 		bl	show_flags
 10998              	.LVL1284:
2782:src/display.c **** 	  if (State2.runmode) {
 10999              		.loc 1 2782 2 view .LVU3566
 11000 0ba8 FFF751BB 		b	.L837
 11001              	.LVL1285:
 11002              	.L1114:
2727:src/display.c **** 	      //				
 11003              		.loc 1 2727 8 view .LVU3567
2727:src/display.c **** 	      //				
 11004              		.loc 1 2727 12 is_stmt 0 view .LVU3568
 11005 0bac 1EA8     		add	r0, sp, #120
 11006              	.LVL1286:
2727:src/display.c **** 	      //				
 11007              		.loc 1 2727 12 view .LVU3569
 11008 0bae FFF7FEFF 		bl	slen
 11009              	.LVL1287:
2729:src/display.c **** #ifdef BIGGER_DISPLAY
 11010              		.loc 1 2729 8 is_stmt 1 view .LVU3570
2731:src/display.c **** #else
 11011              		.loc 1 2731 8 view .LVU3571
2729:src/display.c **** #ifdef BIGGER_DISPLAY
 11012              		.loc 1 2729 10 is_stmt 0 view .LVU3572
 11013 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 11014              	.LVL1288:
2731:src/display.c **** #else
 11015              		.loc 1 2731 15 view .LVU3573
 11016 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
 11017              	.LVL1289:
2731:src/display.c **** #else
 11018              		.loc 1 2731 11 view .LVU3574
 11019 0bba 1328     		cmp	r0, #19
 11020 0bbc 7FF719AB 		ble	.L840
2736:src/display.c **** 		set_status_right(buf);
 11021              		.loc 1 2736 3 is_stmt 1 view .LVU3575
2736:src/display.c **** 		set_status_right(buf);
 11022              		.loc 1 2736 18 is_stmt 0 view .LVU3576
 11023 0bc0 28AB     		add	r3, sp, #160
 11024 0bc2 1A18     		adds	r2, r3, r0
 11025 0bc4 019B     		ldr	r3, [sp, #4]
 11026 0bc6 02F8283C 		strb	r3, [r2, #-40]
2737:src/display.c **** 		}
 11027              		.loc 1 2737 3 is_stmt 1 view .LVU3577
 11028 0bca 1EA8     		add	r0, sp, #120
ARM GAS  /tmp/ccW65oEM.s 			page 309


 11029 0bcc FFF7FEFF 		bl	set_status_right
 11030              	.LVL1290:
2780:src/display.c ****       nostk:	show_flags();
 11031              		.loc 1 2780 2 view .LVU3578
 11032 0bd0 FFF7FEFF 		bl	show_stack
 11033              	.LVL1291:
2781:src/display.c **** 	if (!skip) {
 11034              		.loc 1 2781 14 view .LVU3579
 11035 0bd4 FFF7FEFF 		bl	show_flags
 11036              	.LVL1292:
2782:src/display.c **** 	  if (State2.runmode) {
 11037              		.loc 1 2782 2 view .LVU3580
 11038 0bd8 FFF739BB 		b	.L837
 11039              	.L1112:
2719:src/display.c **** 	  } else if (State2.alphas) {
 11040              		.loc 1 2719 6 view .LVU3581
2719:src/display.c **** 	  } else if (State2.alphas) {
 11041              		.loc 1 2719 48 is_stmt 0 view .LVU3582
 11042 0bdc 581E     		subs	r0, r3, #1
 11043 0bde FFF7FEFF 		bl	get_reg_n
 11044              	.LVL1293:
 11045              	.LBB603:
 11046              	.LBI603:
2874:src/display.c **** 	int glen = *graphic++;
 11047              		.loc 1 2874 19 is_stmt 1 view .LVU3583
 11048              	.LBB604:
2875:src/display.c **** 	int i, j;
 11049              		.loc 1 2875 2 view .LVU3584
2883:src/display.c **** #endif
 11050              		.loc 1 2883 15 is_stmt 0 view .LVU3585
 11051 0be2 5349     		ldr	r1, .L1125+32
2875:src/display.c **** 	int i, j;
 11052              		.loc 1 2875 6 view .LVU3586
 11053 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 11054              	.LVL1294:
2876:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11055              		.loc 1 2876 2 is_stmt 1 view .LVU3587
2883:src/display.c **** #endif
 11056              		.loc 1 2883 2 view .LVU3588
2883:src/display.c **** #endif
 11057              		.loc 1 2883 15 is_stmt 0 view .LVU3589
 11058 0be6 0123     		movs	r3, #1
 11059 0be8 0B70     		strb	r3, [r1]
2885:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11060              		.loc 1 2885 2 is_stmt 1 view .LVU3590
2885:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11061              		.loc 1 2885 5 is_stmt 0 view .LVU3591
 11062 0bea 3AB3     		cbz	r2, .L901
2886:src/display.c **** 
 11063              		.loc 1 2886 2 is_stmt 1 view .LVU3592
 11064              	.LVL1295:
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11065              		.loc 1 2888 2 view .LVU3593
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11066              		.loc 1 2888 12 view .LVU3594
 11067 0bec C118     		adds	r1, r0, r3
 11068 0bee 0391     		str	r1, [sp, #12]
ARM GAS  /tmp/ccW65oEM.s 			page 310


 11069 0bf0 4A2A     		cmp	r2, #74
 11070 0bf2 D4BF     		ite	le
 11071 0bf4 8918     		addle	r1, r1, r2
 11072 0bf6 4A31     		addgt	r1, r1, #74
 11073 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 11074 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 11075              	.LVL1296:
 11076              	.L902:
2889:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11077              		.loc 1 2889 14 view .LVU3595
 11078 0c00 029B     		ldr	r3, [sp, #8]
 11079 0c02 039E     		ldr	r6, [sp, #12]
 11080 0c04 03FA0BFA 		lsl	r10, r3, fp
 11081 0c08 0BF19405 		add	r5, fp, #148
 11082 0c0c 06E0     		b	.L905
 11083              	.LVL1297:
 11084              	.L1116:
 11085              	.LBB605:
 11086              	.LBB606:
 333:src/display.c ****   else	clr_dot(n);
 11087              		.loc 1 333 11 is_stmt 0 view .LVU3596
 11088 0c0e FFF7FEFF 		bl	set_dot
 11089              	.LVL1298:
 11090              	.L904:
 333:src/display.c ****   else	clr_dot(n);
 11091              		.loc 1 333 11 view .LVU3597
 11092              	.LBE606:
 11093              	.LBE605:
2889:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11094              		.loc 1 2889 23 is_stmt 1 view .LVU3598
2889:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11095              		.loc 1 2889 14 view .LVU3599
2889:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11096              		.loc 1 2889 4 is_stmt 0 view .LVU3600
 11097 0c12 019B     		ldr	r3, [sp, #4]
 11098 0c14 9E42     		cmp	r6, r3
 11099 0c16 05F10605 		add	r5, r5, #6
 11100 0c1a 08D0     		beq	.L1115
 11101              	.LVL1299:
 11102              	.L905:
2894:src/display.c **** #endif
 11103              		.loc 1 2894 6 is_stmt 1 view .LVU3601
 11104              	.LBB609:
 11105              	.LBI605:
 332:src/display.c ****   if (on)	set_dot(n);
 11106              		.loc 1 332 6 view .LVU3602
 11107              	.LBB607:
 333:src/display.c ****   else	clr_dot(n);
 11108              		.loc 1 333 3 view .LVU3603
 333:src/display.c ****   else	clr_dot(n);
 11109              		.loc 1 333 11 view .LVU3604
 334:src/display.c **** }
 11110              		.loc 1 334 8 view .LVU3605
 11111              	.LBE607:
 11112              	.LBE609:
2894:src/display.c **** #endif
 11113              		.loc 1 2894 37 is_stmt 0 view .LVU3606
ARM GAS  /tmp/ccW65oEM.s 			page 311


 11114 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11115              	.LVL1300:
 11116              	.LBB610:
 11117              	.LBB608:
 333:src/display.c ****   else	clr_dot(n);
 11118              		.loc 1 333 6 view .LVU3607
 11119 0c20 13EA0A0F 		tst	r3, r10
 333:src/display.c ****   else	clr_dot(n);
 11120              		.loc 1 333 11 view .LVU3608
 11121 0c24 2846     		mov	r0, r5
 333:src/display.c ****   else	clr_dot(n);
 11122              		.loc 1 333 6 view .LVU3609
 11123 0c26 F2D1     		bne	.L1116
 334:src/display.c **** }
 11124              		.loc 1 334 8 view .LVU3610
 11125 0c28 FFF7FEFF 		bl	clr_dot
 11126              	.LVL1301:
 11127 0c2c F1E7     		b	.L904
 11128              	.LVL1302:
 11129              	.L1115:
 334:src/display.c **** }
 11130              		.loc 1 334 8 view .LVU3611
 11131              	.LBE608:
 11132              	.LBE610:
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11133              		.loc 1 2888 17 is_stmt 1 view .LVU3612
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11134              		.loc 1 2888 18 is_stmt 0 view .LVU3613
 11135 0c2e 0BF1010B 		add	fp, fp, #1
 11136              	.LVL1303:
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11137              		.loc 1 2888 12 is_stmt 1 view .LVU3614
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11138              		.loc 1 2888 2 is_stmt 0 view .LVU3615
 11139 0c32 BBF1060F 		cmp	fp, #6
 11140 0c36 E3D1     		bne	.L902
 11141 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 11142              	.LVL1304:
 11143              	.L901:
2888:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11144              		.loc 1 2888 2 view .LVU3616
 11145              	.LBE604:
 11146              	.LBE603:
2780:src/display.c ****       nostk:	show_flags();
 11147              		.loc 1 2780 2 is_stmt 1 view .LVU3617
 11148 0c3c FFF7FEFF 		bl	show_stack
 11149              	.LVL1305:
2781:src/display.c **** 	if (!skip) {
 11150              		.loc 1 2781 14 view .LVU3618
 11151 0c40 FFF7FEFF 		bl	show_flags
 11152              	.LVL1306:
2782:src/display.c **** 	  if (State2.runmode) {
 11153              		.loc 1 2782 2 view .LVU3619
 11154 0c44 FFF703BB 		b	.L837
 11155              	.LVL1307:
 11156              	.L892:
 11157              	.LBB611:
ARM GAS  /tmp/ccW65oEM.s 			page 312


 11158              	.LBB596:
2466:src/display.c **** 	      n -= 100;
 11159              		.loc 1 2466 8 view .LVU3620
2466:src/display.c **** 	      n -= 100;
 11160              		.loc 1 2466 14 is_stmt 0 view .LVU3621
 11161 0c48 3123     		movs	r3, #49
 11162 0c4a 4370     		strb	r3, [r0, #1]
2467:src/display.c **** 	    }
 11163              		.loc 1 2467 8 is_stmt 1 view .LVU3622
2467:src/display.c **** 	    }
 11164              		.loc 1 2467 10 is_stmt 0 view .LVU3623
 11165 0c4c A8F16408 		sub	r8, r8, #100
 11166              	.LVL1308:
2466:src/display.c **** 	      n -= 100;
 11167              		.loc 1 2466 11 view .LVU3624
 11168 0c50 0230     		adds	r0, r0, #2
 11169              	.LVL1309:
 11170              	.L891:
2470:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11171              		.loc 1 2470 4 is_stmt 1 view .LVU3625
2470:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11172              		.loc 1 2470 7 is_stmt 0 view .LVU3626
 11173 0c52 B8F1630F 		cmp	r8, #99
 11174 0c56 7FF729AF 		ble	.L893
2473:src/display.c **** 	  set_status(buf);
 11175              		.loc 1 2473 6 is_stmt 1 view .LVU3627
 11176              	.LVL1310:
2473:src/display.c **** 	  set_status(buf);
 11177              		.loc 1 2473 22 is_stmt 0 view .LVU3628
 11178 0c5a 364B     		ldr	r3, .L1125+36
 11179 0c5c 9844     		add	r8, r8, r3
 11180              	.LVL1311:
2473:src/display.c **** 	  set_status(buf);
 11181              		.loc 1 2473 12 view .LVU3629
 11182 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11183 0c62 0370     		strb	r3, [r0]
 11184 0c64 26E7     		b	.L895
 11185              	.LVL1312:
 11186              	.L1107:
2473:src/display.c **** 	  set_status(buf);
 11187              		.loc 1 2473 12 view .LVU3630
 11188              	.LBE596:
 11189              	.LBE611:
 11190              	.LBB612:
 11191              	.LBB592:
 11192              	.LBB590:
2355:src/display.c **** 	    end = regK_idx;
 11193              		.loc 1 2355 6 is_stmt 1 view .LVU3631
2356:src/display.c **** 	    start = 3;
 11194              		.loc 1 2356 6 view .LVU3632
2357:src/display.c **** 	    group = 4;
 11195              		.loc 1 2357 6 view .LVU3633
2358:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11196              		.loc 1 2358 6 view .LVU3634
2359:src/display.c **** 	  }
 11197              		.loc 1 2359 6 view .LVU3635
 11198 0c66 3448     		ldr	r0, .L1125+40
ARM GAS  /tmp/ccW65oEM.s 			page 313


 11199 0c68 FFF7FEFF 		bl	set_status
 11200              	.LVL1313:
 11201 0c6c 4FF0070A 		mov	r10, #7
 11202 0c70 0822     		movs	r2, #8
 11203 0c72 4FF02408 		mov	r8, #36
 11204              	.LVL1314:
2359:src/display.c **** 	  }
 11205              		.loc 1 2359 6 is_stmt 0 view .LVU3636
 11206 0c76 2220     		movs	r0, #34
2357:src/display.c **** 	    group = 4;
 11207              		.loc 1 2357 12 view .LVU3637
 11208 0c78 4FF0030B 		mov	fp, #3
2358:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11209              		.loc 1 2358 12 view .LVU3638
 11210 0c7c 0426     		movs	r6, #4
2356:src/display.c **** 	    start = 3;
 11211              		.loc 1 2356 10 view .LVU3639
 11212 0c7e 4FF06F09 		mov	r9, #111
 11213              	.LVL1315:
2355:src/display.c **** 	    end = regK_idx;
 11214              		.loc 1 2355 11 view .LVU3640
 11215 0c82 6427     		movs	r7, #100
 11216              	.LVL1316:
2355:src/display.c **** 	    end = regK_idx;
 11217              		.loc 1 2355 11 view .LVU3641
 11218 0c84 00E6     		b	.L872
 11219              	.LVL1317:
 11220              	.L1104:
2355:src/display.c **** 	    end = regK_idx;
 11221              		.loc 1 2355 11 view .LVU3642
 11222              	.LBE590:
2315:src/display.c **** 	  p = num_arg(buf, free_mem());
 11223              		.loc 1 2315 4 is_stmt 1 view .LVU3643
 11224 0c86 2D48     		ldr	r0, .L1125+44
 11225 0c88 214F     		ldr	r7, .L1125
 11226              	.LVL1318:
2315:src/display.c **** 	  p = num_arg(buf, free_mem());
 11227              		.loc 1 2315 4 is_stmt 0 view .LVU3644
 11228 0c8a FFF7FEFF 		bl	set_status
 11229              	.LVL1319:
2316:src/display.c **** 	  p = scopy(p, " , FL. ");
 11230              		.loc 1 2316 4 is_stmt 1 view .LVU3645
2316:src/display.c **** 	  p = scopy(p, " , FL. ");
 11231              		.loc 1 2316 21 is_stmt 0 view .LVU3646
 11232 0c8e FFF7FEFF 		bl	free_mem
 11233              	.LVL1320:
 11234 0c92 0146     		mov	r1, r0
2316:src/display.c **** 	  p = scopy(p, " , FL. ");
 11235              		.loc 1 2316 8 view .LVU3647
 11236 0c94 15A8     		add	r0, sp, #84
 11237              	.LVL1321:
2316:src/display.c **** 	  p = scopy(p, " , FL. ");
 11238              		.loc 1 2316 8 view .LVU3648
 11239 0c96 FFF7FEFF 		bl	num_arg
 11240              	.LVL1322:
2317:src/display.c **** 	  p = num_arg(p, free_flash());
 11241              		.loc 1 2317 4 is_stmt 1 view .LVU3649
ARM GAS  /tmp/ccW65oEM.s 			page 314


2317:src/display.c **** 	  p = num_arg(p, free_flash());
 11242              		.loc 1 2317 8 is_stmt 0 view .LVU3650
 11243 0c9a 2949     		ldr	r1, .L1125+48
 11244 0c9c FFF7FEFF 		bl	scopy
 11245              	.LVL1323:
2317:src/display.c **** 	  p = num_arg(p, free_flash());
 11246              		.loc 1 2317 8 view .LVU3651
 11247 0ca0 0646     		mov	r6, r0
 11248              	.LVL1324:
2318:src/display.c **** 	  *p = '\0';
 11249              		.loc 1 2318 4 is_stmt 1 view .LVU3652
2318:src/display.c **** 	  *p = '\0';
 11250              		.loc 1 2318 19 is_stmt 0 view .LVU3653
 11251 0ca2 FFF7FEFF 		bl	free_flash
 11252              	.LVL1325:
2318:src/display.c **** 	  *p = '\0';
 11253              		.loc 1 2318 19 view .LVU3654
 11254 0ca6 0146     		mov	r1, r0
2318:src/display.c **** 	  *p = '\0';
 11255              		.loc 1 2318 8 view .LVU3655
 11256 0ca8 3046     		mov	r0, r6
 11257 0caa FFF7FEFF 		bl	num_arg
 11258              	.LVL1326:
 11259 0cae 0346     		mov	r3, r0
 11260              	.LVL1327:
2319:src/display.c **** 	  set_digits_string(buf, 0);
 11261              		.loc 1 2319 4 is_stmt 1 view .LVU3656
2319:src/display.c **** 	  set_digits_string(buf, 0);
 11262              		.loc 1 2319 7 is_stmt 0 view .LVU3657
 11263 0cb0 0021     		movs	r1, #0
2320:src/display.c **** 	}
 11264              		.loc 1 2320 4 view .LVU3658
 11265 0cb2 15A8     		add	r0, sp, #84
 11266              	.LVL1328:
2319:src/display.c **** 	  set_digits_string(buf, 0);
 11267              		.loc 1 2319 7 view .LVU3659
 11268 0cb4 1970     		strb	r1, [r3]
2320:src/display.c **** 	}
 11269              		.loc 1 2320 4 is_stmt 1 view .LVU3660
 11270 0cb6 FFF7FEFF 		bl	set_digits_string
 11271              	.LVL1329:
2320:src/display.c **** 	}
 11272              		.loc 1 2320 4 is_stmt 0 view .LVU3661
 11273 0cba 1EE6     		b	.L867
 11274              	.LVL1330:
 11275              	.L1106:
 11276              	.LBB591:
2345:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11277              		.loc 1 2345 6 is_stmt 1 view .LVU3662
2345:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11278              		.loc 1 2345 11 is_stmt 0 view .LVU3663
 11279 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11280              	.LVL1331:
2345:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11281              		.loc 1 2345 11 view .LVU3664
 11282 0cc0 7F00     		lsls	r7, r7, #1
 11283              	.LVL1332:
ARM GAS  /tmp/ccW65oEM.s 			page 315


2346:src/display.c **** 	    p = scopy(buf, "FL ");
 11284              		.loc 1 2346 6 is_stmt 1 view .LVU3665
2346:src/display.c **** 	    p = scopy(buf, "FL ");
 11285              		.loc 1 2346 28 is_stmt 0 view .LVU3666
 11286 0cc2 462F     		cmp	r7, #70
2347:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11287              		.loc 1 2347 10 view .LVU3667
 11288 0cc4 1F49     		ldr	r1, .L1125+52
 11289 0cc6 15A8     		add	r0, sp, #84
 11290              	.LVL1333:
2346:src/display.c **** 	    p = scopy(buf, "FL ");
 11291              		.loc 1 2346 28 view .LVU3668
 11292 0cc8 B946     		mov	r9, r7
 11293              	.LVL1334:
2346:src/display.c **** 	    p = scopy(buf, "FL ");
 11294              		.loc 1 2346 28 view .LVU3669
 11295 0cca A8BF     		it	ge
 11296 0ccc 4FF04609 		movge	r9, #70
2347:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11297              		.loc 1 2347 10 view .LVU3670
 11298 0cd0 FFF7FEFF 		bl	scopy
 11299              	.LVL1335:
2348:src/display.c **** 	    *p++ = '-';
 11300              		.loc 1 2348 10 view .LVU3671
 11301 0cd4 3946     		mov	r1, r7
 11302 0cd6 0222     		movs	r2, #2
 11303 0cd8 FFF7FEFF 		bl	num_arg_0
 11304              	.LVL1336:
2346:src/display.c **** 	    p = scopy(buf, "FL ");
 11305              		.loc 1 2346 10 view .LVU3672
 11306 0cdc 09F11D09 		add	r9, r9, #29
 11307              	.LVL1337:
2347:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11308              		.loc 1 2347 6 is_stmt 1 view .LVU3673
2348:src/display.c **** 	    *p++ = '-';
 11309              		.loc 1 2348 6 view .LVU3674
2349:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11310              		.loc 1 2349 6 view .LVU3675
2349:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11311              		.loc 1 2349 11 is_stmt 0 view .LVU3676
 11312 0ce0 2D23     		movs	r3, #45
 11313 0ce2 00F8013B 		strb	r3, [r0], #1
 11314              	.LVL1338:
2350:src/display.c **** 	    *p = '\0';
 11315              		.loc 1 2350 6 is_stmt 1 view .LVU3677
2350:src/display.c **** 	    *p = '\0';
 11316              		.loc 1 2350 10 is_stmt 0 view .LVU3678
 11317 0ce6 4946     		mov	r1, r9
 11318 0ce8 0222     		movs	r2, #2
 11319 0cea FFF7FEFF 		bl	num_arg_0
 11320              	.LVL1339:
2350:src/display.c **** 	    *p = '\0';
 11321              		.loc 1 2350 10 view .LVU3679
 11322 0cee 0246     		mov	r2, r0
 11323              	.LVL1340:
2351:src/display.c **** 	    set_status(buf);
 11324              		.loc 1 2351 6 is_stmt 1 view .LVU3680
ARM GAS  /tmp/ccW65oEM.s 			page 316


2351:src/display.c **** 	    set_status(buf);
 11325              		.loc 1 2351 9 is_stmt 0 view .LVU3681
 11326 0cf0 4FF0000B 		mov	fp, #0
2352:src/display.c **** 	  }
 11327              		.loc 1 2352 6 view .LVU3682
 11328 0cf4 15A8     		add	r0, sp, #84
 11329              	.LVL1341:
2351:src/display.c **** 	    set_status(buf);
 11330              		.loc 1 2351 9 view .LVU3683
 11331 0cf6 82F800B0 		strb	fp, [r2]
2352:src/display.c **** 	  }
 11332              		.loc 1 2352 6 is_stmt 1 view .LVU3684
 11333 0cfa 4FF00A0A 		mov	r10, #10
 11334 0cfe FFF7FEFF 		bl	set_status
 11335              	.LVL1342:
2341:src/display.c **** 	  int start = 0;
 11336              		.loc 1 2341 8 is_stmt 0 view .LVU3685
 11337 0d02 5646     		mov	r6, r10
 11338 0d04 0222     		movs	r2, #2
 11339 0d06 4FF00908 		mov	r8, #9
 11340              	.LVL1343:
2341:src/display.c **** 	  int start = 0;
 11341              		.loc 1 2341 8 view .LVU3686
 11342 0d0a 0720     		movs	r0, #7
 11343 0d0c BCE5     		b	.L872
 11344              	.L1126:
 11345 0d0e 00BF     		.align	2
 11346              	.L1125:
 11347 0d10 00000000 		.word	main_ram
 11348 0d14 00000000 		.word	DispMsg
 11349 0d18 A0000000 		.word	.LC40
 11350 0d1c 40000000 		.word	.LC30
 11351 0d20 A8000000 		.word	.LC41
 11352 0d24 00000000 		.word	monfuncs
 11353 0d28 00000000 		.word	Ctx
 11354 0d2c 00000000 		.word	LastDisplayedNumber
 11355 0d30 00000000 		.word	forceDispPlot
 11356 0d34 BC000000 		.word	.LC27
 11357 0d38 7C000000 		.word	.LC37
 11358 0d3c 4C000000 		.word	.LC31
 11359 0d40 54000000 		.word	.LC32
 11360 0d44 78000000 		.word	.LC36
 11361 0d48 00000000 		.word	DispPlot
 11362              	.LVL1344:
 11363              	.L1105:
2341:src/display.c **** 	  int start = 0;
 11364              		.loc 1 2341 8 view .LVU3687
 11365              	.LBE591:
2324:src/display.c **** 	  if (SizeStatRegs)
 11366              		.loc 1 2324 4 is_stmt 1 view .LVU3688
2324:src/display.c **** 	  if (SizeStatRegs)
 11367              		.loc 1 2324 8 is_stmt 0 view .LVU3689
 11368 0d4c 15AE     		add	r6, sp, #84
 11369              	.LVL1345:
2324:src/display.c **** 	  if (SizeStatRegs)
 11370              		.loc 1 2324 8 view .LVU3690
 11371 0d4e 1849     		ldr	r1, .L1127
ARM GAS  /tmp/ccW65oEM.s 			page 317


 11372 0d50 3046     		mov	r0, r6
 11373 0d52 FFF7FEFF 		bl	scopy
 11374              	.LVL1346:
2325:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11375              		.loc 1 2325 8 view .LVU3691
 11376 0d56 174A     		ldr	r2, .L1127+4
2325:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11377              		.loc 1 2325 7 view .LVU3692
 11378 0d58 1268     		ldr	r2, [r2]
2324:src/display.c **** 	  if (SizeStatRegs)
 11379              		.loc 1 2324 8 view .LVU3693
 11380 0d5a 0346     		mov	r3, r0
 11381              	.LVL1347:
2325:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11382              		.loc 1 2325 4 is_stmt 1 view .LVU3694
2325:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11383              		.loc 1 2325 7 is_stmt 0 view .LVU3695
 11384 0d5c BAB9     		cbnz	r2, .L1117
 11385              	.L869:
2327:src/display.c **** 	  set_status(buf);
 11386              		.loc 1 2327 4 is_stmt 1 view .LVU3696
2327:src/display.c **** 	  set_status(buf);
 11387              		.loc 1 2327 7 is_stmt 0 view .LVU3697
 11388 0d5e 0022     		movs	r2, #0
 11389 0d60 1A70     		strb	r2, [r3]
2328:src/display.c **** 
 11390              		.loc 1 2328 4 is_stmt 1 view .LVU3698
 11391 0d62 3046     		mov	r0, r6
 11392              	.LVL1348:
2328:src/display.c **** 
 11393              		.loc 1 2328 4 is_stmt 0 view .LVU3699
 11394 0d64 FFF7FEFF 		bl	set_status
 11395              	.LVL1349:
2331:src/display.c **** 	  if (LocalRegs < 0) {
 11396              		.loc 1 2331 4 is_stmt 1 view .LVU3700
2331:src/display.c **** 	  if (LocalRegs < 0) {
 11397              		.loc 1 2331 8 is_stmt 0 view .LVU3701
 11398 0d68 FFF7FEFF 		bl	global_regs
 11399              	.LVL1350:
2332:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11400              		.loc 1 2332 8 view .LVU3702
 11401 0d6c 124F     		ldr	r7, .L1127+8
 11402              	.LVL1351:
2331:src/display.c **** 	  if (LocalRegs < 0) {
 11403              		.loc 1 2331 8 view .LVU3703
 11404 0d6e 0146     		mov	r1, r0
 11405 0d70 3046     		mov	r0, r6
 11406 0d72 FFF7FEFF 		bl	num_arg
 11407              	.LVL1352:
2332:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11408              		.loc 1 2332 8 view .LVU3704
 11409 0d76 3A68     		ldr	r2, [r7]
2332:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11410              		.loc 1 2332 7 view .LVU3705
 11411 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11412 0d7c 002A     		cmp	r2, #0
2331:src/display.c **** 	  if (LocalRegs < 0) {
ARM GAS  /tmp/ccW65oEM.s 			page 318


 11413              		.loc 1 2331 8 view .LVU3706
 11414 0d7e 0346     		mov	r3, r0
 11415              	.LVL1353:
2332:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11416              		.loc 1 2332 4 is_stmt 1 view .LVU3707
2332:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11417              		.loc 1 2332 7 is_stmt 0 view .LVU3708
 11418 0d80 0ADB     		blt	.L1118
 11419              	.LVL1354:
 11420              	.L870:
2336:src/display.c **** 	  set_digits_string(buf, 0);
 11421              		.loc 1 2336 4 is_stmt 1 view .LVU3709
2336:src/display.c **** 	  set_digits_string(buf, 0);
 11422              		.loc 1 2336 7 is_stmt 0 view .LVU3710
 11423 0d82 0021     		movs	r1, #0
2337:src/display.c **** 	} else {
 11424              		.loc 1 2337 4 view .LVU3711
 11425 0d84 3046     		mov	r0, r6
 11426              	.LVL1355:
2336:src/display.c **** 	  set_digits_string(buf, 0);
 11427              		.loc 1 2336 7 view .LVU3712
 11428 0d86 1970     		strb	r1, [r3]
2337:src/display.c **** 	} else {
 11429              		.loc 1 2337 4 is_stmt 1 view .LVU3713
 11430 0d88 FFF7FEFF 		bl	set_digits_string
 11431              	.LVL1356:
2337:src/display.c **** 	} else {
 11432              		.loc 1 2337 4 is_stmt 0 view .LVU3714
 11433 0d8c B5E5     		b	.L867
 11434              	.LVL1357:
 11435              	.L1117:
2326:src/display.c **** 	  *p = '\0';
 11436              		.loc 1 2326 6 is_stmt 1 view .LVU3715
2326:src/display.c **** 	  *p = '\0';
 11437              		.loc 1 2326 10 is_stmt 0 view .LVU3716
 11438 0d8e 0B49     		ldr	r1, .L1127+12
 11439 0d90 FFF7FEFF 		bl	scopy
 11440              	.LVL1358:
2326:src/display.c **** 	  *p = '\0';
 11441              		.loc 1 2326 10 view .LVU3717
 11442 0d94 0346     		mov	r3, r0
 11443              	.LVL1359:
2326:src/display.c **** 	  *p = '\0';
 11444              		.loc 1 2326 10 view .LVU3718
 11445 0d96 E2E7     		b	.L869
 11446              	.LVL1360:
 11447              	.L1118:
2333:src/display.c **** 	    p = num_arg(p, local_regs());
 11448              		.loc 1 2333 6 is_stmt 1 view .LVU3719
2333:src/display.c **** 	    p = num_arg(p, local_regs());
 11449              		.loc 1 2333 10 is_stmt 0 view .LVU3720
 11450 0d98 0949     		ldr	r1, .L1127+16
 11451 0d9a FFF7FEFF 		bl	scopy
 11452              	.LVL1361:
2333:src/display.c **** 	    p = num_arg(p, local_regs());
 11453              		.loc 1 2333 10 view .LVU3721
 11454 0d9e 8046     		mov	r8, r0
ARM GAS  /tmp/ccW65oEM.s 			page 319


 11455              	.LVL1362:
2334:src/display.c **** 	  }
 11456              		.loc 1 2334 6 is_stmt 1 view .LVU3722
2334:src/display.c **** 	  }
 11457              		.loc 1 2334 21 is_stmt 0 view .LVU3723
 11458 0da0 FFF7FEFF 		bl	local_regs
 11459              	.LVL1363:
2334:src/display.c **** 	  }
 11460              		.loc 1 2334 21 view .LVU3724
 11461 0da4 0146     		mov	r1, r0
2334:src/display.c **** 	  }
 11462              		.loc 1 2334 10 view .LVU3725
 11463 0da6 4046     		mov	r0, r8
 11464 0da8 FFF7FEFF 		bl	num_arg
 11465              	.LVL1364:
 11466 0dac 0346     		mov	r3, r0
 11467              	.LVL1365:
2334:src/display.c **** 	  }
 11468              		.loc 1 2334 10 view .LVU3726
 11469 0dae E8E7     		b	.L870
 11470              	.L1128:
 11471              		.align	2
 11472              	.L1127:
 11473 0db0 5C000000 		.word	.LC33
 11474 0db4 00000000 		.word	SizeStatRegs
 11475 0db8 00000000 		.word	main_ram
 11476 0dbc 64000000 		.word	.LC34
 11477 0dc0 6C000000 		.word	.LC35
 11478              	.LBE592:
 11479              	.LBE612:
 11480              		.cfi_endproc
 11481              	.LFE34:
 11483              		.section	.text.frozen_display,"ax",%progbits
 11484              		.align	1
 11485              		.p2align 2,,3
 11486              		.global	frozen_display
 11487              		.syntax unified
 11488              		.thumb
 11489              		.thumb_func
 11490              		.fpu fpv4-sp-d16
 11492              	frozen_display:
 11493              	.LFB35:
2868:src/display.c **** 	State2.disp_freeze = 0;
 11494              		.loc 1 2868 7 is_stmt 1 view -0
 11495              		.cfi_startproc
 11496              		@ args = 0, pretend = 0, frame = 0
 11497              		@ frame_needed = 0, uses_anonymous_args = 0
2869:src/display.c **** 	display();
 11498              		.loc 1 2869 2 view .LVU3728
2868:src/display.c **** 	State2.disp_freeze = 0;
 11499              		.loc 1 2868 7 is_stmt 0 view .LVU3729
 11500 0000 10B5     		push	{r4, lr}
 11501              		.cfi_def_cfa_offset 8
 11502              		.cfi_offset 4, -8
 11503              		.cfi_offset 14, -4
2869:src/display.c **** 	display();
 11504              		.loc 1 2869 21 view .LVU3730
ARM GAS  /tmp/ccW65oEM.s 			page 320


 11505 0002 064C     		ldr	r4, .L1131
 11506 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11507 0006 6FF30413 		bfc	r3, #4, #1
 11508 000a E375     		strb	r3, [r4, #23]
2870:src/display.c **** 	State2.disp_freeze = 1;
 11509              		.loc 1 2870 2 is_stmt 1 view .LVU3731
 11510 000c FFF7FEFF 		bl	display
 11511              	.LVL1366:
2871:src/display.c ****       }
 11512              		.loc 1 2871 2 view .LVU3732
2871:src/display.c ****       }
 11513              		.loc 1 2871 21 is_stmt 0 view .LVU3733
 11514 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11515 0012 43F01003 		orr	r3, r3, #16
 11516 0016 E375     		strb	r3, [r4, #23]
2872:src/display.c **** 
 11517              		.loc 1 2872 7 view .LVU3734
 11518 0018 10BD     		pop	{r4, pc}
 11519              	.L1132:
 11520 001a 00BF     		.align	2
 11521              	.L1131:
 11522 001c 00000000 		.word	StateWhileOn
 11523              		.cfi_endproc
 11524              	.LFE35:
 11526              		.section	.text.message,"ax",%progbits
 11527              		.align	1
 11528              		.p2align 2,,3
 11529              		.global	message
 11530              		.syntax unified
 11531              		.thumb
 11532              		.thumb_func
 11533              		.fpu fpv4-sp-d16
 11535              	message:
 11536              	.LVL1367:
 11537              	.LFB45:
3078:src/display.c **** 	State2.disp_freeze = 0;
 11538              		.loc 1 3078 7 is_stmt 1 view -0
 11539              		.cfi_startproc
 11540              		@ args = 0, pretend = 0, frame = 0
 11541              		@ frame_needed = 0, uses_anonymous_args = 0
3079:src/display.c **** 	State2.disp_small = 0;
 11542              		.loc 1 3079 2 view .LVU3736
3080:src/display.c **** 	WasDataEntry = 0;
 11543              		.loc 1 3080 2 view .LVU3737
3080:src/display.c **** 	WasDataEntry = 0;
 11544              		.loc 1 3080 20 is_stmt 0 view .LVU3738
 11545 0000 174A     		ldr	r2, .L1143
3078:src/display.c **** 	State2.disp_freeze = 0;
 11546              		.loc 1 3078 7 view .LVU3739
 11547 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11548              		.cfi_def_cfa_offset 24
 11549              		.cfi_offset 3, -24
 11550              		.cfi_offset 4, -20
 11551              		.cfi_offset 5, -16
 11552              		.cfi_offset 6, -12
 11553              		.cfi_offset 7, -8
 11554              		.cfi_offset 14, -4
ARM GAS  /tmp/ccW65oEM.s 			page 321


3080:src/display.c **** 	WasDataEntry = 0;
 11555              		.loc 1 3080 20 view .LVU3740
 11556 0004 D38A     		ldrh	r3, [r2, #22]
3081:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11557              		.loc 1 3081 15 view .LVU3741
 11558 0006 174E     		ldr	r6, .L1143+4
3080:src/display.c **** 	WasDataEntry = 0;
 11559              		.loc 1 3080 20 view .LVU3742
 11560 0008 23F48453 		bic	r3, r3, #4224
3081:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11561              		.loc 1 3081 15 view .LVU3743
 11562 000c 0027     		movs	r7, #0
3080:src/display.c **** 	WasDataEntry = 0;
 11563              		.loc 1 3080 20 view .LVU3744
 11564 000e D382     		strh	r3, [r2, #22]	@ movhi
3081:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11565              		.loc 1 3081 2 is_stmt 1 view .LVU3745
3082:src/display.c **** 	  // Complete redraw necessary
 11566              		.loc 1 3082 5 is_stmt 0 view .LVU3746
 11567 0010 9B05     		lsls	r3, r3, #22
3078:src/display.c **** 	State2.disp_freeze = 0;
 11568              		.loc 1 3078 7 view .LVU3747
 11569 0012 0546     		mov	r5, r0
 11570 0014 0C46     		mov	r4, r1
3081:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11571              		.loc 1 3081 15 view .LVU3748
 11572 0016 3760     		str	r7, [r6]
3082:src/display.c **** 	  // Complete redraw necessary
 11573              		.loc 1 3082 2 is_stmt 1 view .LVU3749
3082:src/display.c **** 	  // Complete redraw necessary
 11574              		.loc 1 3082 5 is_stmt 0 view .LVU3750
 11575 0018 12D5     		bpl	.L1134
3082:src/display.c **** 	  // Complete redraw necessary
 11576              		.loc 1 3082 27 discriminator 1 view .LVU3751
 11577 001a D1B1     		cbz	r1, .L1142
 11578              	.L1135:
3089:src/display.c **** 	    ShowRPN = 0;
 11579              		.loc 1 3089 6 is_stmt 1 view .LVU3752
 11580 001c FFF7FEFF 		bl	reset_disp
 11581              	.LVL1368:
3090:src/display.c **** 	    set_annunciators();
 11582              		.loc 1 3090 6 view .LVU3753
3090:src/display.c **** 	    set_annunciators();
 11583              		.loc 1 3090 14 is_stmt 0 view .LVU3754
 11584 0020 114B     		ldr	r3, .L1143+8
 11585 0022 0026     		movs	r6, #0
 11586 0024 1E60     		str	r6, [r3]
3091:src/display.c **** 	    set_digits_string( str2, 0 );
 11587              		.loc 1 3091 6 is_stmt 1 view .LVU3755
 11588 0026 FFF7FEFF 		bl	set_annunciators
 11589              	.LVL1369:
3092:src/display.c **** 	  }
 11590              		.loc 1 3092 6 view .LVU3756
 11591 002a 3146     		mov	r1, r6
 11592 002c 2046     		mov	r0, r4
 11593 002e FFF7FEFF 		bl	set_digits_string
 11594              	.LVL1370:
ARM GAS  /tmp/ccW65oEM.s 			page 322


3094:src/display.c **** 	  finish_display();// message
 11595              		.loc 1 3094 4 view .LVU3757
 11596 0032 2846     		mov	r0, r5
 11597 0034 FFF7FEFF 		bl	set_status
 11598              	.LVL1371:
3095:src/display.c **** 	}
 11599              		.loc 1 3095 4 view .LVU3758
3097:src/display.c **** 
 11600              		.loc 1 3097 7 is_stmt 0 view .LVU3759
 11601 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11602              		.cfi_remember_state
 11603              		.cfi_restore 14
 11604              		.cfi_restore 7
 11605              		.cfi_restore 6
 11606              		.cfi_restore 5
 11607              		.cfi_restore 4
 11608              		.cfi_restore 3
 11609              		.cfi_def_cfa_offset 0
 11610              	.LVL1372:
3095:src/display.c **** 	}
 11611              		.loc 1 3095 4 view .LVU3760
 11612 003c FFF7FEBF 		b	finish_display
 11613              	.LVL1373:
 11614              	.L1134:
 11615              		.cfi_restore_state
3088:src/display.c **** 	    reset_disp();
 11616              		.loc 1 3088 4 is_stmt 1 view .LVU3761
3088:src/display.c **** 	    reset_disp();
 11617              		.loc 1 3088 7 is_stmt 0 view .LVU3762
 11618 0040 0029     		cmp	r1, #0
 11619 0042 EBD1     		bne	.L1135
3094:src/display.c **** 	  finish_display();// message
 11620              		.loc 1 3094 4 is_stmt 1 view .LVU3763
 11621 0044 2846     		mov	r0, r5
 11622              	.LVL1374:
3094:src/display.c **** 	  finish_display();// message
 11623              		.loc 1 3094 4 is_stmt 0 view .LVU3764
 11624 0046 FFF7FEFF 		bl	set_status
 11625              	.LVL1375:
3095:src/display.c **** 	}
 11626              		.loc 1 3095 4 is_stmt 1 view .LVU3765
3097:src/display.c **** 
 11627              		.loc 1 3097 7 is_stmt 0 view .LVU3766
 11628 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11629              		.cfi_remember_state
 11630              		.cfi_restore 14
 11631              		.cfi_restore 7
 11632              		.cfi_restore 6
 11633              		.cfi_restore 5
 11634              		.cfi_restore 4
 11635              		.cfi_restore 3
 11636              		.cfi_def_cfa_offset 0
 11637              	.LVL1376:
3095:src/display.c **** 	}
 11638              		.loc 1 3095 4 view .LVU3767
 11639 004e FFF7FEBF 		b	finish_display
 11640              	.LVL1377:
ARM GAS  /tmp/ccW65oEM.s 			page 323


 11641              	.L1142:
 11642              		.cfi_restore_state
3084:src/display.c **** 	  display();
 11643              		.loc 1 3084 4 is_stmt 1 view .LVU3768
3084:src/display.c **** 	  display();
 11644              		.loc 1 3084 12 is_stmt 0 view .LVU3769
 11645 0052 064B     		ldr	r3, .L1143+12
 11646 0054 1860     		str	r0, [r3]
3085:src/display.c **** 	}
 11647              		.loc 1 3085 4 is_stmt 1 view .LVU3770
3097:src/display.c **** 
 11648              		.loc 1 3097 7 is_stmt 0 view .LVU3771
 11649 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11650              		.cfi_restore 14
 11651              		.cfi_restore 7
 11652              		.cfi_restore 6
 11653              		.cfi_restore 5
 11654              		.cfi_restore 4
 11655              		.cfi_restore 3
 11656              		.cfi_def_cfa_offset 0
3085:src/display.c **** 	}
 11657              		.loc 1 3085 4 view .LVU3772
 11658 005a FFF7FEBF 		b	display
 11659              	.LVL1378:
 11660              	.L1144:
3085:src/display.c **** 	}
 11661              		.loc 1 3085 4 view .LVU3773
 11662 005e 00BF     		.align	2
 11663              	.L1143:
 11664 0060 00000000 		.word	StateWhileOn
 11665 0064 00000000 		.word	WasDataEntry
 11666 0068 00000000 		.word	ShowRPN
 11667 006c 00000000 		.word	DispMsg
 11668              		.cfi_endproc
 11669              	.LFE45:
 11671              		.section	.text.error_message,"ax",%progbits
 11672              		.align	1
 11673              		.p2align 2,,3
 11674              		.global	error_message
 11675              		.syntax unified
 11676              		.thumb
 11677              		.thumb_func
 11678              		.fpu fpv4-sp-d16
 11680              	error_message:
 11681              	.LVL1379:
 11682              	.LFB1:
 127:src/display.c **** #define MSG1(top) top "\0"
 11683              		.loc 1 127 1 is_stmt 1 view -0
 11684              		.cfi_startproc
 11685              		@ args = 0, pretend = 0, frame = 0
 11686              		@ frame_needed = 0, uses_anonymous_args = 0
 132:src/display.c ****     {
 11687              		.loc 1 132 3 view .LVU3775
 190:src/display.c ****     {
 11688              		.loc 1 190 3 view .LVU3776
 225:src/display.c ****     const char *p = error_table[e];
 11689              		.loc 1 225 3 view .LVU3777
ARM GAS  /tmp/ccW65oEM.s 			page 324


 127:src/display.c **** #define MSG1(top) top "\0"
 11690              		.loc 1 127 1 is_stmt 0 view .LVU3778
 11691 0000 38B5     		push	{r3, r4, r5, lr}
 11692              		.cfi_def_cfa_offset 16
 11693              		.cfi_offset 3, -16
 11694              		.cfi_offset 4, -12
 11695              		.cfi_offset 5, -8
 11696              		.cfi_offset 14, -4
 225:src/display.c ****     const char *p = error_table[e];
 11697              		.loc 1 225 21 view .LVU3779
 11698 0002 1A4B     		ldr	r3, .L1156
 11699 0004 1B68     		ldr	r3, [r3]
 11700 0006 0343     		orrs	r3, r0, r3
 11701 0008 2CD0     		beq	.L1145
 11702              	.LBB613:
 226:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11703              		.loc 1 226 5 is_stmt 1 view .LVU3780
 226:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11704              		.loc 1 226 17 is_stmt 0 view .LVU3781
 11705 000a 194B     		ldr	r3, .L1156+4
 11706 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11707              	.LVL1380:
 227:src/display.c ****     if (*q == '\0')
 11708              		.loc 1 227 5 is_stmt 1 view .LVU3782
 11709 0010 0446     		mov	r4, r0
 227:src/display.c ****     if (*q == '\0')
 11710              		.loc 1 227 21 is_stmt 0 view .LVU3783
 11711 0012 0021     		movs	r1, #0
 11712 0014 2846     		mov	r0, r5
 11713              	.LVL1381:
 227:src/display.c ****     if (*q == '\0')
 11714              		.loc 1 227 21 view .LVU3784
 11715 0016 FFF7FEFF 		bl	find_char
 11716              	.LVL1382:
 228:src/display.c ****       q = S7_ERROR;
 11717              		.loc 1 228 5 is_stmt 1 view .LVU3785
 228:src/display.c ****       q = S7_ERROR;
 11718              		.loc 1 228 9 is_stmt 0 view .LVU3786
 11719 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 228:src/display.c ****       q = S7_ERROR;
 11720              		.loc 1 228 8 view .LVU3787
 11721 001c 9BB9     		cbnz	r3, .L1154
 229:src/display.c ****     if (*q == 'X') {
 11722              		.loc 1 229 9 view .LVU3788
 11723 001e 1549     		ldr	r1, .L1156+8
 11724              	.L1147:
 11725              	.LVL1383:
 239:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 11726              		.loc 1 239 7 is_stmt 1 view .LVU3789
 11727 0020 2846     		mov	r0, r5
 11728 0022 FFF7FEFF 		bl	message
 11729              	.LVL1384:
 240:src/display.c **** #ifndef REALBUILD
 11730              		.loc 1 240 7 view .LVU3790
 240:src/display.c **** #ifndef REALBUILD
 11731              		.loc 1 240 26 is_stmt 0 view .LVU3791
 11732 0026 144B     		ldr	r3, .L1156+12
ARM GAS  /tmp/ccW65oEM.s 			page 325


 242:src/display.c **** #endif
 11733              		.loc 1 242 7 view .LVU3792
 11734 0028 1449     		ldr	r1, .L1156+16
 240:src/display.c **** #ifndef REALBUILD
 11735              		.loc 1 240 26 view .LVU3793
 11736 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 242:src/display.c **** #endif
 11737              		.loc 1 242 7 view .LVU3794
 11738 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11739 0030 1348     		ldr	r0, .L1156+20
 240:src/display.c **** #ifndef REALBUILD
 11740              		.loc 1 240 31 view .LVU3795
 11741 0032 003C     		subs	r4, r4, #0
 240:src/display.c **** #ifndef REALBUILD
 11742              		.loc 1 240 31 view .LVU3796
 11743 0034 18BF     		it	ne
 11744 0036 0124     		movne	r4, #1
 11745              	.LVL1385:
 240:src/display.c **** #ifndef REALBUILD
 11746              		.loc 1 240 26 view .LVU3797
 11747 0038 64F30412 		bfi	r2, r4, #4, #1
 11748 003c DA75     		strb	r2, [r3, #23]
 242:src/display.c **** #endif
 11749              		.loc 1 242 7 is_stmt 1 view .LVU3798
 11750              	.LBE613:
 267:src/display.c **** 
 11751              		.loc 1 267 1 is_stmt 0 view .LVU3799
 11752 003e BDE83840 		pop	{r3, r4, r5, lr}
 11753              		.cfi_remember_state
 11754              		.cfi_restore 14
 11755              		.cfi_restore 5
 11756              		.cfi_restore 4
 11757              		.cfi_restore 3
 11758              		.cfi_def_cfa_offset 0
 11759              	.LVL1386:
 11760              	.LBB620:
 242:src/display.c **** #endif
 11761              		.loc 1 242 7 view .LVU3800
 11762 0042 FFF7FEBF 		b	scopy
 11763              	.LVL1387:
 11764              	.L1154:
 11765              		.cfi_restore_state
 230:src/display.c ****       DispMsg = p;
 11766              		.loc 1 230 5 is_stmt 1 view .LVU3801
 230:src/display.c ****       DispMsg = p;
 11767              		.loc 1 230 8 is_stmt 0 view .LVU3802
 11768 0046 582B     		cmp	r3, #88
 11769 0048 0DD1     		bne	.L1155
 231:src/display.c ****       frozen_display();
 11770              		.loc 1 231 7 is_stmt 1 view .LVU3803
 11771              	.LBB614:
 11772              	.LBB615:
2869:src/display.c **** 	display();
 11773              		.loc 1 2869 21 is_stmt 0 view .LVU3804
 11774 004a 0B4C     		ldr	r4, .L1156+12
 11775              	.LVL1388:
2869:src/display.c **** 	display();
ARM GAS  /tmp/ccW65oEM.s 			page 326


 11776              		.loc 1 2869 21 view .LVU3805
 11777              	.LBE615:
 11778              	.LBE614:
 231:src/display.c ****       frozen_display();
 11779              		.loc 1 231 15 view .LVU3806
 11780 004c 0D4A     		ldr	r2, .L1156+24
 11781              	.LBB618:
 11782              	.LBB616:
2869:src/display.c **** 	display();
 11783              		.loc 1 2869 21 view .LVU3807
 11784 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11785              	.LBE616:
 11786              	.LBE618:
 231:src/display.c ****       frozen_display();
 11787              		.loc 1 231 15 view .LVU3808
 11788 0050 1560     		str	r5, [r2]
 232:src/display.c ****     }
 11789              		.loc 1 232 7 is_stmt 1 view .LVU3809
 11790              	.LBB619:
 11791              	.LBI614:
2867:src/display.c ****       {
 11792              		.loc 1 2867 12 view .LVU3810
 11793              	.LBB617:
2869:src/display.c **** 	display();
 11794              		.loc 1 2869 2 view .LVU3811
2869:src/display.c **** 	display();
 11795              		.loc 1 2869 21 is_stmt 0 view .LVU3812
 11796 0052 6FF30413 		bfc	r3, #4, #1
 11797 0056 E375     		strb	r3, [r4, #23]
2870:src/display.c **** 	State2.disp_freeze = 1;
 11798              		.loc 1 2870 2 is_stmt 1 view .LVU3813
 11799 0058 FFF7FEFF 		bl	display
 11800              	.LVL1389:
2871:src/display.c ****       }
 11801              		.loc 1 2871 2 view .LVU3814
2871:src/display.c ****       }
 11802              		.loc 1 2871 21 is_stmt 0 view .LVU3815
 11803 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11804 005e 43F01003 		orr	r3, r3, #16
 11805 0062 E375     		strb	r3, [r4, #23]
 11806              	.LVL1390:
 11807              	.L1145:
2871:src/display.c ****       }
 11808              		.loc 1 2871 21 view .LVU3816
 11809              	.LBE617:
 11810              	.LBE619:
 11811              	.LBE620:
 267:src/display.c **** 
 11812              		.loc 1 267 1 view .LVU3817
 11813 0064 38BD     		pop	{r3, r4, r5, pc}
 11814              	.LVL1391:
 11815              	.L1155:
 11816              	.LBB621:
 227:src/display.c ****     if (*q == '\0')
 11817              		.loc 1 227 17 view .LVU3818
 11818 0066 411C     		adds	r1, r0, #1
 11819 0068 DAE7     		b	.L1147
ARM GAS  /tmp/ccW65oEM.s 			page 327


 11820              	.L1157:
 11821 006a 00BF     		.align	2
 11822              	.L1156:
 11823 006c 00000000 		.word	Running
 11824 0070 00000000 		.word	.LANCHOR26
 11825 0074 00000000 		.word	.LANCHOR25
 11826 0078 00000000 		.word	StateWhileOn
 11827 007c 00000000 		.word	.LANCHOR27
 11828 0080 00000000 		.word	LastDisplayedNumber
 11829 0084 00000000 		.word	DispMsg
 11830              	.LBE621:
 11831              		.cfi_endproc
 11832              	.LFE1:
 11834              		.section	.rodata.str1.4,"aMS",%progbits,1
 11835              		.align	2
 11836              	.LC43:
 11837 0000 06316306 		.ascii	"\0061c\006\006\000"
 11837      0600
 11838 0006 0000     		.align	2
 11839              	.LC44:
 11840 0008 756E0600 		.ascii	"un\006\000"
 11841              		.align	2
 11842              	.LC45:
 11843 000c 736D00   		.ascii	"sm\000"
 11844              		.set	CSWTCH.310,CSWTCH.308
 11845 000f 00       		.align	2
 11846              	.LC46:
 11847 0010 20502072 		.ascii	" P r o g r a m \000"
 11847      206F2067 
 11847      20722061 
 11847      206D2000 
 11848              		.align	2
 11849              	.LC47:
 11850 0020 206F2072 		.ascii	" o r   d a t e \000"
 11850      20202064 
 11850      20612074 
 11850      20652000 
 11851              		.align	2
 11852              	.LC48:
 11853 0030 204F2070 		.ascii	" O p - c o d e \000"
 11853      202D2063 
 11853      206F2064 
 11853      20652000 
 11854              		.align	2
 11855              	.LC49:
 11856 0040 204C2061 		.ascii	" L a b e l \000"
 11856      20622065 
 11856      206C2000 
 11857              		.align	2
 11858              	.LC50:
 11859 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11859      20652072 
 11859      20612074 
 11859      2069206F 
 11859      206E2000 
 11860              		.align	2
 11861              	.LC51:
ARM GAS  /tmp/ccW65oEM.s 			page 328


 11862 0060 20462075 		.ascii	" F u l l \000"
 11862      206C206C 
 11862      2000
 11863 006a 0000     		.align	2
 11864              	.LC52:
 11865 006c 2043206C 		.ascii	" C l a s h \000"
 11865      20612073 
 11865      20682000 
 11866              		.align	2
 11867              	.LC53:
 11868 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11868      206F2020 
 11868      2073206D 
 11868      2061206C 
 11868      206C2000 
 11869              		.align	2
 11870              	.LC54:
 11871 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11871      20742061 
 11871      20202070 
 11871      206F2069 
 11871      206E2074 
 11872              		.align	2
 11873              	.LC55:
 11874 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11874      20722061 
 11874      206D2065 
 11874      20742065 
 11874      20722000 
 11875              		.align	2
 11876              	.LC56:
 11877 00b8 20442061 		.ascii	" D a t a \000"
 11877      20742061 
 11877      2000
 11878 00c2 0000     		.align	2
 11879              	.LC57:
 11880 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11880      206F2074 
 11880      20652063 
 11880      20742065 
 11880      20642000 
 11881              		.align	2
 11882              	.LC58:
 11883 00d8 2046206F 		.ascii	" F o u n d \000"
 11883      2075206E 
 11883      20642000 
 11884              		.align	2
 11885              	.LC59:
 11886 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11886      2073206D 
 11886      20612074 
 11886      20632068 
 11886      2000
 11887 00f6 0000     		.align	2
 11888              	.LC60:
 11889 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11889      20732074 
ARM GAS  /tmp/ccW65oEM.s 			page 329


 11889      2061206C 
 11889      206C2065 
 11889      20642000 
 11890              		.global	DIGITS
 11891              		.comm	IoAnnunciator,4,4
 11892              		.comm	IntMaxWindow,4,4
 11893              		.comm	JustDisplayed,4,4
 11894              		.comm	ShowRPN,4,4
 11895              		.comm	forceDispPlot,1,1
 11896              		.comm	LastDisplayedExponent,5,4
 11897              		.comm	LastDisplayedNumber,26,4
 11898              		.comm	LastDisplayedText,31,4
 11899              		.comm	DispPlot,2,2
 11900              		.comm	DispMsg,4,4
 11901              		.global	SvnRevision
 11902              		.section	.rodata
 11903              		.align	2
 11904              		.set	.LANCHOR17,. + 0
 11905              	.LC18:
 11906 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11906      22002E00 
 11906      00
 11907 0009 000000   		.space	3
 11908              	.LC22:
 11909 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11909      332E3306 
 11909      0600
 11910 0016 00000000 		.space	4
 11911 001a 0000     		.space	2
 11912              	.LC61:
 11913 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11913      696E6700 
 11913      50726F47 
 11913      72614D6D 
 11913      00
 11914 002d 000000   		.space	3
 11915              	.LC62:
 11916 0030 446F6D61 		.ascii	"Domain\000\000"
 11916      696E0000 
 11917              	.LC63:
 11918 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11918      74696D65 
 11918      006F7220 
 11918      64417445 
 11918      00
 11919 0049 000000   		.space	3
 11920              	.LC64:
 11921 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11921      66696E65 
 11921      64004F70 
 11921      2D434F64 
 11921      4500
 11922 005e 0000     		.space	2
 11923              	.LC65:
 11924 0060 2B9F0000 		.ascii	"+\237\000\000"
 11925              	.LC66:
 11926 0064 2D9F0000 		.ascii	"-\237\000\000"
ARM GAS  /tmp/ccW65oEM.s 			page 330


 11927              	.LC67:
 11928 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11928      75636800 
 11928      4C416245 
 11928      4C00
 11929 0076 0000     		.space	2
 11930              	.LC68:
 11931 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11931      67616C00 
 11931      4F504572 
 11931      4174696F 
 11931      6E00
 11932 008a 0000     		.space	2
 11933              	.LC69:
 11934 008c 4F757420 		.ascii	"Out of range\000\000"
 11934      6F662072 
 11934      616E6765 
 11934      0000
 11935 009a 0000     		.space	2
 11936              	.LC70:
 11937 009c 42616420 		.ascii	"Bad digit\000\000"
 11937      64696769 
 11937      740000
 11938 00a7 00       		.space	1
 11939              	.LC71:
 11940 00a8 546F6F20 		.ascii	"Too long\000\000"
 11940      6C6F6E67 
 11940      0000
 11941 00b2 0000     		.space	2
 11942              	.LC72:
 11943 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11943      69730046 
 11943      754C4C00 
 11944              	.LC73:
 11945 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11945      6B00434C 
 11945      41534800 
 11946              	.LC74:
 11947 00cc 42616420 		.ascii	"Bad mode\000\000"
 11947      6D6F6465 
 11947      0000
 11948 00d6 0000     		.space	2
 11949              	.LC75:
 11950 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11950      06060673 
 11950      697A6500 
 11950      746F6F20 
 11950      534D6D41 
 11951 00ef 00       		.space	1
 11952              	.LC76:
 11953 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11953      66657700 
 11953      64417441 
 11953      20506F69 
 11953      6E745300 
 11954              	.LC77:
 11955 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
ARM GAS  /tmp/ccW65oEM.s 			page 331


 11955      6C696400 
 11955      50617261 
 11955      4D6D4574 
 11955      457200
 11956 0117 00       		.space	1
 11957              	.LC78:
 11958 0118 492F4F00 		.ascii	"I/O\000\000"
 11958      00
 11959 011d 000000   		.space	3
 11960              	.LC79:
 11961 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11961      6C696400 
 11961      64417441 
 11961      00
 11962 012d 000000   		.space	3
 11963              	.LC80:
 11964 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11964      65005072 
 11964      6F744563 
 11964      74456400 
 11965              	.LC81:
 11966 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11966      6F6F7400 
 11966      466F756E 
 11966      6400
 11967 014e 0000     		.space	2
 11968              	.LC82:
 11969 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11969      6978004D 
 11969      6D49534D 
 11969      6D417443 
 11969      4800
 11970 0162 0000     		.space	2
 11971              	.LC83:
 11972 0164 53696E67 		.ascii	"Singular\000\000"
 11972      756C6172 
 11972      0000
 11973 016e 0000     		.space	2
 11974              	.LC84:
 11975 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11975      68206973 
 11975      0046754C 
 11975      4C00
 11976 017e 0000     		.space	2
 11977              	.LC85:
 11978 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 11978      72797374 
 11978      616C0049 
 11978      6E537461 
 11978      4C4C4564 
 11979 0195 000000   		.space	3
 11980              	.LC86:
 11981 0198 04201D00 		.ascii	"\004 \035\000X\000"
 11981      5800
 11982              		.section	.bss.DecimalMode,"aw",%nobits
 11983              		.set	.LANCHOR1,. + 0
 11986              	DecimalMode:
ARM GAS  /tmp/ccW65oEM.s 			page 332


 11987 0000 00       		.space	1
 11988              		.section	.bss.SeparatorMode,"aw",%nobits
 11989              		.set	.LANCHOR0,. + 0
 11992              	SeparatorMode:
 11993 0000 00       		.space	1
 11994              		.section	.rodata.CSWTCH.308,"a"
 11995              		.align	2
 11996              		.set	.LANCHOR11,. + 0
 11999              	CSWTCH.308:
 12000 0000 02000000 		.word	2
 12001 0004 08000000 		.word	8
 12002 0008 0A000000 		.word	10
 12003 000c 10000000 		.word	16
 12004              		.section	.rodata.CSWTCH.334,"a"
 12005              		.align	2
 12006              		.set	.LANCHOR16,. + 0
 12009              	CSWTCH.334:
 12010 0000 00000000 		.word	.LC43
 12011 0004 08000000 		.word	.LC44
 12012 0008 0C000000 		.word	.LC45
 12013              		.section	.rodata.DIGITS,"a"
 12014              		.align	2
 12015              		.set	.LANCHOR12,. + 0
 12018              	DIGITS:
 12019 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12019      34353637 
 12019      38394142 
 12019      43444546 
 12019      00
 12020              		.section	.rodata.S7_ERROR,"a"
 12021              		.align	2
 12022              		.set	.LANCHOR25,. + 0
 12025              	S7_ERROR:
 12026 0000 4572726F 		.ascii	"Error\000"
 12026      7200
 12027              		.section	.rodata.S7_INF,"a"
 12028              		.align	2
 12029              		.set	.LANCHOR5,. + 0
 12032              	S7_INF:
 12033 0000 496E6669 		.ascii	"Infinity\000"
 12033      6E697479 
 12033      00
 12034              		.section	.rodata.S7_INF_Text,"a"
 12035              		.align	2
 12036              		.set	.LANCHOR7,. + 0
 12039              	S7_INF_Text:
 12040 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12040      20662069 
 12040      206E2069 
 12040      20742079 
 12040      2000
 12041              		.section	.rodata.S7_NEG_INF_Text,"a"
 12042              		.align	2
 12043              		.set	.LANCHOR6,. + 0
 12046              	S7_NEG_INF_Text:
 12047 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12047      20662069 
ARM GAS  /tmp/ccW65oEM.s 			page 333


 12047      206E2069 
 12047      20742079 
 12047      2000
 12048              		.section	.rodata.S7_NaN,"a"
 12049              		.align	2
 12050              		.set	.LANCHOR3,. + 0
 12053              	S7_NaN:
 12054 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12054      6E754D6D 
 12054      45726963 
 12054      00
 12055              		.section	.rodata.S7_NaN_Text,"a"
 12056              		.align	2
 12057              		.set	.LANCHOR4,. + 0
 12060              	S7_NaN_Text:
 12061 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12061      20742020 
 12061      206E2075 
 12061      206D2065 
 12061      20722069 
 12062              		.section	.rodata.S7_STEP,"a"
 12063              		.align	2
 12064              		.set	.LANCHOR24,. + 0
 12067              	S7_STEP:
 12068 0000 53744550 		.ascii	"StEP \000"
 12068      2000
 12069              		.section	.rodata.S7_STEP_ShortText,"a"
 12070              		.align	2
 12071              		.set	.LANCHOR18,. + 0
 12074              	S7_STEP_ShortText:
 12075 0000 53544550 		.ascii	"STEP\000"
 12075      00
 12076              		.section	.rodata.S7_fract_EQ,"a"
 12077              		.align	2
 12078              		.set	.LANCHOR9,. + 0
 12081              	S7_fract_EQ:
 12082 0000 203D2000 		.ascii	" = \000"
 12083              		.section	.rodata.S7_fract_GT,"a"
 12084              		.align	2
 12085              		.set	.LANCHOR10,. + 0
 12088              	S7_fract_GT:
 12089 0000 20477400 		.ascii	" Gt\000"
 12090              		.section	.rodata.S7_fract_LT,"a"
 12091              		.align	2
 12092              		.set	.LANCHOR8,. + 0
 12095              	S7_fract_LT:
 12096 0000 204C7400 		.ascii	" Lt\000"
 12097              		.section	.rodata.S_SURE,"a"
 12098              		.align	2
 12099              		.set	.LANCHOR20,. + 0
 12102              	S_SURE:
 12103 0000 53757265 		.ascii	"Sure?\000"
 12103      3F00
 12104              		.section	.rodata.SvnRevision,"a"
 12105              		.align	2
 12106              		.set	.LANCHOR19,. + 0
 12109              	SvnRevision:
ARM GAS  /tmp/ccW65oEM.s 			page 334


 12110 0000 30202020 		.ascii	"0   "
 12111              		.section	.rodata.digtbl,"a"
 12112              		.align	2
 12113              		.set	.LANCHOR2,. + 0
 12116              	digtbl:
 12117 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12117      02421252 
 12117      2D000000 
 12117      00000000 
 12117      00
 12118 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12118      00000017 
 12118      01000000 
 12118      00
 12119 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12119      28000000 
 12119      0020664B 
 12119      00000010 
 12120 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12120      5E5B3973 
 12120      77497F7B 
 12120      00000612 
 12120      0300787D 
 12121 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12121      673D240F 
 12121      75266C6D 
 12121      6F7C7914 
 12121      73362F00 
 12122 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12122      161F7674 
 12122      6735040F 
 12122      75266915 
 12122      177C7914 
 12123 0076 000F003B 		.ascii	"\000\017\000;"
 12124              		.section	.rodata.error_table.8489,"a"
 12125              		.align	2
 12126              		.set	.LANCHOR26,. + 0
 12129              	error_table.8489:
 12130 0000 1C000000 		.word	.LC61
 12131 0004 30000000 		.word	.LC62
 12132 0008 38000000 		.word	.LC63
 12133 000c 4C000000 		.word	.LC64
 12134 0010 60000000 		.word	.LC65
 12135 0014 64000000 		.word	.LC66
 12136 0018 68000000 		.word	.LC67
 12137 001c 78000000 		.word	.LC68
 12138 0020 8C000000 		.word	.LC69
 12139 0024 9C000000 		.word	.LC70
 12140 0028 A8000000 		.word	.LC71
 12141 002c B4000000 		.word	.LC72
 12142 0030 C0000000 		.word	.LC73
 12143 0034 CC000000 		.word	.LC74
 12144 0038 D8000000 		.word	.LC75
 12145 003c F0000000 		.word	.LC76
 12146 0040 04010000 		.word	.LC77
 12147 0044 18010000 		.word	.LC78
 12148 0048 20010000 		.word	.LC79
ARM GAS  /tmp/ccW65oEM.s 			page 335


 12149 004c 30010000 		.word	.LC80
 12150 0050 40010000 		.word	.LC81
 12151 0054 50010000 		.word	.LC82
 12152 0058 64010000 		.word	.LC83
 12153 005c 70010000 		.word	.LC84
 12154 0060 80010000 		.word	.LC85
 12155 0064 98010000 		.word	.LC86
 12156              		.section	.rodata.error_table_text.8490,"a"
 12157              		.align	2
 12158              		.set	.LANCHOR27,. + 0
 12161              	error_table_text.8490:
 12162 0000 10000000 		.word	.LC46
 12163 0004 A8000000 		.word	.LC41
 12164 0008 20000000 		.word	.LC47
 12165 000c 30000000 		.word	.LC48
 12166 0010 A8000000 		.word	.LC41
 12167 0014 A8000000 		.word	.LC41
 12168 0018 40000000 		.word	.LC49
 12169 001c 4C000000 		.word	.LC50
 12170 0020 A8000000 		.word	.LC41
 12171 0024 A8000000 		.word	.LC41
 12172 0028 A8000000 		.word	.LC41
 12173 002c 60000000 		.word	.LC51
 12174 0030 6C000000 		.word	.LC52
 12175 0034 A8000000 		.word	.LC41
 12176 0038 78000000 		.word	.LC53
 12177 003c 8C000000 		.word	.LC54
 12178 0040 A4000000 		.word	.LC55
 12179 0044 A8000000 		.word	.LC41
 12180 0048 B8000000 		.word	.LC56
 12181 004c C4000000 		.word	.LC57
 12182 0050 D8000000 		.word	.LC58
 12183 0054 E4000000 		.word	.LC59
 12184 0058 A8000000 		.word	.LC41
 12185 005c 60000000 		.word	.LC51
 12186 0060 F8000000 		.word	.LC60
 12187 0064 A8000000 		.word	.LC41
 12188              		.section	.rodata.libname,"a"
 12189              		.align	2
 12190              		.set	.LANCHOR21,. + 0
 12193              	libname:
 12194 0000 72414D6D 		.ascii	"rAMm\000"
 12194      00
 12195 0005 4C696220 		.ascii	"Lib \000"
 12195      00
 12196 000a 42757020 		.ascii	"Bup \000"
 12196      00
 12197 000f 726F4D6D 		.ascii	"roMm\000"
 12197      00
 12198              		.section	.rodata.libname_shorttext,"a"
 12199              		.align	2
 12200              		.set	.LANCHOR23,. + 0
 12203              	libname_shorttext:
 12204 0000 52616D00 		.ascii	"Ram\000"
 12205 0004 00       		.space	1
 12206 0005 4C696200 		.ascii	"Lib\000"
 12207 0009 00       		.space	1
ARM GAS  /tmp/ccW65oEM.s 			page 336


 12208 000a 42757000 		.ascii	"Bup\000"
 12209 000e 00       		.space	1
 12210 000f 526F6D00 		.ascii	"Rom\000"
 12211 0013 00       		.space	1
 12212              		.section	.rodata.libname_text,"a"
 12213              		.align	2
 12214              		.set	.LANCHOR22,. + 0
 12217              	libname_text:
 12218 0000 20522061 		.ascii	" R a m \000"
 12218      206D2000 
 12219 0008 0000     		.space	2
 12220 000a 204C2069 		.ascii	" L i b \000"
 12220      20622000 
 12221 0012 0000     		.space	2
 12222 0014 20422075 		.ascii	" B u p \000"
 12222      20702000 
 12223 001c 0000     		.space	2
 12224 001e 2052206F 		.ascii	" R o m \000"
 12224      206D2000 
 12225 0026 0000     		.space	2
 12226              		.section	.rodata.shift_chars.8588,"a"
 12227              		.align	2
 12228              		.set	.LANCHOR15,. + 0
 12231              	shift_chars.8588:
 12232 0000 20111213 		.ascii	" \021\022\023"
 12233              		.section	.rodata.small_dots.8775,"a"
 12234              		.align	2
 12235              		.set	.LANCHOR14,. + 0
 12238              	small_dots.8775:
 12239 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12239      07E12C06 
 12239      07E12C06 
 12239      06
 12240              		.section	.rodata.small_minus.8774,"a"
 12241              		.align	2
 12242              		.set	.LANCHOR13,. + 0
 12245              	small_minus.8774:
 12246 0000 07C22D06 		.ascii	"\007\302-\006"
 12247              		.text
 12248              	.Letext0:
 12249              		.file 2 "src/decNumber/decContext.h"
 12250              		.file 3 "src/decNumber/decNumber.h"
 12251              		.file 4 "src/decNumber/decimal64.h"
 12252              		.file 5 "src/decNumber/decimal128.h"
 12253              		.file 6 "src/xeq.h"
 12254              		.file 7 "src/data.h"
 12255              		.file 8 "src/storage.h"
 12256              		.file 9 "src/display.h"
 12257              		.file 10 "src/consts.h"
 12258              		.file 11 "src/stats.h"
 12259              		.file 12 "src/revision.h"
 12260              		.file 13 "src/charset7.h"
 12261              		.file 14 "src/lcd.h"
 12262              		.file 15 "src/decn.h"
 12263              		.file 16 "src/alpha.h"
 12264              		.file 17 "src/int.h"
ARM GAS  /tmp/ccW65oEM.s 			page 337


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccW65oEM.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccW65oEM.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccW65oEM.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccW65oEM.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccW65oEM.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccW65oEM.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccW65oEM.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccW65oEM.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccW65oEM.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccW65oEM.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccW65oEM.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccW65oEM.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccW65oEM.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccW65oEM.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccW65oEM.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccW65oEM.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccW65oEM.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccW65oEM.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/ccW65oEM.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/ccW65oEM.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/ccW65oEM.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccW65oEM.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccW65oEM.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccW65oEM.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/ccW65oEM.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccW65oEM.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/ccW65oEM.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/ccW65oEM.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccW65oEM.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccW65oEM.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccW65oEM.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccW65oEM.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/ccW65oEM.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccW65oEM.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccW65oEM.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/ccW65oEM.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccW65oEM.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/ccW65oEM.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccW65oEM.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/ccW65oEM.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccW65oEM.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/ccW65oEM.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/ccW65oEM.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccW65oEM.s:3754   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.308:0000000000000000 CSWTCH.310
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccW65oEM.s:3764   .text.set_int_x:0000000000000360 $t
     /tmp/ccW65oEM.s:3814   .text.set_int_x:0000000000000390 $d
ARM GAS  /tmp/ccW65oEM.s 			page 338


     /tmp/ccW65oEM.s:3820   .text.set_annunciators:0000000000000000 $t
     /tmp/ccW65oEM.s:3827   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccW65oEM.s:4200   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccW65oEM.s:4212   .text.getdig:0000000000000000 $t
     /tmp/ccW65oEM.s:4220   .text.getdig:0000000000000000 getdig
     /tmp/ccW65oEM.s:4240   .text.getdig:0000000000000008 $d
     /tmp/ccW65oEM.s:4245   .text.dot:0000000000000000 $t
     /tmp/ccW65oEM.s:4253   .text.dot:0000000000000000 dot
     /tmp/ccW65oEM.s:4276   .text.std_round_fix:0000000000000000 $t
     /tmp/ccW65oEM.s:4284   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccW65oEM.s:4366   .text.std_round_fix:000000000000004c $d
     /tmp/ccW65oEM.s:4372   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccW65oEM.s:4380   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccW65oEM.s:4440   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccW65oEM.s:4447   .text.pixel_length:0000000000000000 $t
     /tmp/ccW65oEM.s:4455   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccW65oEM.s:4546   .text.set_status:0000000000000000 $t
     /tmp/ccW65oEM.s:4553   .text.set_status:0000000000000000 set_status
     /tmp/ccW65oEM.s:4626   .text.set_status:0000000000000038 $d
     /tmp/ccW65oEM.s:4631   .text.set_x_dn:0000000000000000 $t
     /tmp/ccW65oEM.s:4639   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccW65oEM.s:5407   .text.set_x_dn:0000000000000328 $d
     /tmp/ccW65oEM.s:5416   .text.set_x_dn:000000000000033c $t
     /tmp/ccW65oEM.s:5535   .text.set_x_dn:00000000000003dc $d
     /tmp/ccW65oEM.s:5541   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccW65oEM.s:5568   .text.set_x_dn:000000000000041c $d
     /tmp/ccW65oEM.s:5574   .text.set_x_dn:0000000000000426 $t
     /tmp/ccW65oEM.s:6079   .text.set_x_dn:0000000000000644 $d
     /tmp/ccW65oEM.s:6095   .text.set_x_dn:0000000000000660 $t
     /tmp/ccW65oEM.s:6809   .text.set_x_dn:0000000000000950 $d
     /tmp/ccW65oEM.s:6818   .text.set_x:0000000000000000 $t
     /tmp/ccW65oEM.s:6825   .text.set_x:0000000000000000 set_x
     /tmp/ccW65oEM.s:6893   .text.format_reg:0000000000000000 $t
     /tmp/ccW65oEM.s:6901   .text.format_reg:0000000000000000 format_reg
     /tmp/ccW65oEM.s:7020   .text.format_reg:0000000000000064 $d
     /tmp/ccW65oEM.s:7026   .text.set_status_right:0000000000000000 $t
     /tmp/ccW65oEM.s:7033   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccW65oEM.s:7177   .text.set_status_right:000000000000006c $d
     /tmp/ccW65oEM.s:7182   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:7231   .text.annunciators:0000000000000000 $t
     /tmp/ccW65oEM.s:7238   .text.annunciators:0000000000000000 annunciators
     /tmp/ccW65oEM.s:7989   .text.annunciators:0000000000000330 $d
     /tmp/ccW65oEM.s:8007   .text.annunciators:000000000000036c $t
     /tmp/ccW65oEM.s:8237   .text.annunciators:0000000000000454 $d
     /tmp/ccW65oEM.s:8253   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:8320   .text.display:0000000000000000 $t
     /tmp/ccW65oEM.s:8328   .text.display:0000000000000000 display
     /tmp/ccW65oEM.s:9002   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccW65oEM.s:9020   .text.display:0000000000000334 $t
     /tmp/ccW65oEM.s:9719   .text.display:000000000000063c $d
     /tmp/ccW65oEM.s:9749   .text.display:0000000000000694 $t
     /tmp/ccW65oEM.s:10596  .text.display:00000000000009c8 $d
     /tmp/ccW65oEM.s:10613  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccW65oEM.s 			page 339


     /tmp/ccW65oEM.s:11347  .text.display:0000000000000d10 $d
     /tmp/ccW65oEM.s:11368  .text.display:0000000000000d4c $t
     /tmp/ccW65oEM.s:11473  .text.display:0000000000000db0 $d
     /tmp/ccW65oEM.s:11484  .text.frozen_display:0000000000000000 $t
     /tmp/ccW65oEM.s:11492  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccW65oEM.s:11522  .text.frozen_display:000000000000001c $d
     /tmp/ccW65oEM.s:11527  .text.message:0000000000000000 $t
     /tmp/ccW65oEM.s:11535  .text.message:0000000000000000 message
     /tmp/ccW65oEM.s:11664  .text.message:0000000000000060 $d
     /tmp/ccW65oEM.s:11672  .text.error_message:0000000000000000 $t
     /tmp/ccW65oEM.s:11680  .text.error_message:0000000000000000 error_message
     /tmp/ccW65oEM.s:11823  .text.error_message:000000000000006c $d
     /tmp/ccW65oEM.s:11835  .rodata.str1.4:0000000000000000 $d
     /tmp/ccW65oEM.s:11999  .rodata.CSWTCH.308:0000000000000000 CSWTCH.308
     /tmp/ccW65oEM.s:12018  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccW65oEM.s:12109  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccW65oEM.s:11903  .rodata:0000000000000000 $d
     /tmp/ccW65oEM.s:11986  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccW65oEM.s:11987  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccW65oEM.s:11992  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccW65oEM.s:11993  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccW65oEM.s:11995  .rodata.CSWTCH.308:0000000000000000 $d
     /tmp/ccW65oEM.s:12005  .rodata.CSWTCH.334:0000000000000000 $d
     /tmp/ccW65oEM.s:12009  .rodata.CSWTCH.334:0000000000000000 CSWTCH.334
     /tmp/ccW65oEM.s:12014  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccW65oEM.s:12021  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccW65oEM.s:12025  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccW65oEM.s:12028  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccW65oEM.s:12032  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccW65oEM.s:12035  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccW65oEM.s:12039  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccW65oEM.s:12042  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccW65oEM.s:12046  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccW65oEM.s:12049  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccW65oEM.s:12053  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccW65oEM.s:12056  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccW65oEM.s:12060  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccW65oEM.s:12063  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccW65oEM.s:12067  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccW65oEM.s:12070  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccW65oEM.s:12074  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccW65oEM.s:12077  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccW65oEM.s:12081  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccW65oEM.s:12084  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccW65oEM.s:12088  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccW65oEM.s:12091  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccW65oEM.s:12095  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccW65oEM.s:12098  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccW65oEM.s:12102  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccW65oEM.s:12105  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccW65oEM.s:12112  .rodata.digtbl:0000000000000000 $d
     /tmp/ccW65oEM.s:12116  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccW65oEM.s:12125  .rodata.error_table.8489:0000000000000000 $d
     /tmp/ccW65oEM.s:12129  .rodata.error_table.8489:0000000000000000 error_table.8489
     /tmp/ccW65oEM.s:12157  .rodata.error_table_text.8490:0000000000000000 $d
     /tmp/ccW65oEM.s:12161  .rodata.error_table_text.8490:0000000000000000 error_table_text.8490
ARM GAS  /tmp/ccW65oEM.s 			page 340


     /tmp/ccW65oEM.s:12189  .rodata.libname:0000000000000000 $d
     /tmp/ccW65oEM.s:12193  .rodata.libname:0000000000000000 libname
     /tmp/ccW65oEM.s:12199  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccW65oEM.s:12203  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccW65oEM.s:12213  .rodata.libname_text:0000000000000000 $d
     /tmp/ccW65oEM.s:12217  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccW65oEM.s:12227  .rodata.shift_chars.8588:0000000000000000 $d
     /tmp/ccW65oEM.s:12231  .rodata.shift_chars.8588:0000000000000000 shift_chars.8588
     /tmp/ccW65oEM.s:12234  .rodata.small_dots.8775:0000000000000000 $d
     /tmp/ccW65oEM.s:12238  .rodata.small_dots.8775:0000000000000000 small_dots.8775
     /tmp/ccW65oEM.s:12241  .rodata.small_minus.8774:0000000000000000 $d
     /tmp/ccW65oEM.s:12245  .rodata.small_minus.8774:0000000000000000 small_minus.8774

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccW65oEM.s 			page 341


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccW65oEM.s 			page 342


SizeStatRegs

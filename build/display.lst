ARM GAS  /tmp/ccPv3rzq.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #ifdef DM42
  18:src/display.c **** #include "dmcp.h"
  19:src/display.c **** #endif
  20:src/display.c **** 
  21:src/display.c **** #define DM42SAFE
  22:src/display.c **** 
  23:src/display.c **** #include "features.h"
  24:src/display.c **** #include "xeq.h" 
  25:src/display.c **** #include "storage.h"
  26:src/display.c **** #include "display.h"
  27:src/display.c **** #include "lcd.h"
  28:src/display.c **** #include "int.h"
  29:src/display.c **** #include "consts.h"
  30:src/display.c **** #include "alpha.h"
ARM GAS  /tmp/ccPv3rzq.s 			page 2


  31:src/display.c **** #include "stats.h"
  32:src/display.c **** #include "decn.h"
  33:src/display.c **** #include "revision.h"
  34:src/display.c **** #ifdef INFRARED
  35:src/display.c **** #include "printer.h"
  36:src/display.c **** #endif
  37:src/display.c **** #ifndef DM42
  38:src/display.c **** #include "serial.h"
  39:src/display.c **** #endif
  40:src/display.c **** #undef DM42SAFE
  41:src/display.c **** 
  42:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  43:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  44:src/display.c **** 
  45:src/display.c **** static void set_status_sized(const char *, int);
  46:src/display.c **** static void set_status_sized_top(const char *, int);
  47:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  48:src/display.c **** 
  49:src/display.c **** static void set_status(const char *);
  50:src/display.c **** static void set_status_top(const char *);
  51:src/display.c **** #ifdef TOP_ROW
  52:src/display.c **** static void set_status_top_always(const char *);
  53:src/display.c **** #endif
  54:src/display.c **** 
  55:src/display.c **** static void set_status_right(const char *);
  56:src/display.c **** static void set_status_graphic(const unsigned char *);
  57:src/display.c **** 
  58:src/display.c **** static void set_int_x(const long long int value, char *res);
  59:src/display.c **** 
  60:src/display.c **** const char *DispMsg; // What to display in message area
  61:src/display.c **** 
  62:src/display.c **** short int DispPlot;
  63:src/display.c **** short int no_status_top = 0;
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** //FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  79:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  80:src/display.c **** 
  81:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  82:src/display.c **** static const char S7_fract_LT[] = " Lt";
  83:src/display.c **** static const char S7_fract_GT[] = " Gt";
  84:src/display.c **** 
  85:src/display.c **** static const char libname[][5] = {
  86:src/display.c ****   "rAMm", "Lib ", "Bup ",
  87:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccPv3rzq.s 			page 3


  88:src/display.c ****   "roMm"
  89:src/display.c **** #endif
  90:src/display.c **** };
  91:src/display.c **** 
  92:src/display.c **** 
  93:src/display.c **** 
  94:src/display.c **** /* Set the separator and decimal mode globals
  95:src/display.c ****  */
  96:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 96 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  97:src/display.c ****   // Separators used by various modes
  98:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 98 3 view .LVU1
  35              		.loc 1 98 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
  99:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 99 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 98 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 98 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
  96:src/display.c ****   // Separators used by various modes
  44              		.loc 1 96 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 98 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 99 5 is_stmt 1 view .LVU8
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 100 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 101:src/display.c ****   }
 102:src/display.c ****   else {
 103:src/display.c ****     SeparatorMode = SEP_COMMA;
 104:src/display.c ****     DecimalMode = DECIMAL_DOT;
 105:src/display.c ****   }
 106:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 106 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 100 17 view .LVU11
  57 0018 0124     		movs	r4, #1
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 99 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccPv3rzq.s 			page 4


  60              		.loc 1 100 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 106 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 99 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 100 5 is_stmt 1 view .LVU16
  67              		.loc 1 106 3 view .LVU17
  68              		.loc 1 106 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 106 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 107:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 107 5 is_stmt 1 view .LVU20
  76              		.loc 1 107 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 108:src/display.c **** }
  80              		.loc 1 108 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 103 5 is_stmt 1 view .LVU23
 104:src/display.c ****   }
  90              		.loc 1 104 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 106 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 104:src/display.c ****   }
  94              		.loc 1 104 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 103 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 106 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 103 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 104:src/display.c ****   }
 102              		.loc 1 104 5 is_stmt 1 view .LVU30
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 106 3 view .LVU31
ARM GAS  /tmp/ccPv3rzq.s 			page 5


 106:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 106 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 106 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 108 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Table of error messages.
 112:src/display.c ****  * These consist of a double string.  The first is displayed in the
 113:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 114:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 115:src/display.c ****  */
 116:src/display.c **** void error_message(const unsigned int e) 
 117:src/display.c **** {
 118:src/display.c **** #define MSG1(top) top "\0"
 119:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 120:src/display.c **** 
 121:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 122:src/display.c ****   static const char *const error_table[] = 
 123:src/display.c ****     {
 124:src/display.c ****       // manually get the order correct!
 125:src/display.c ****       MSG2("Running", "ProGraMm"),
 126:src/display.c ****       MSG1("Domain"),
 127:src/display.c ****       MSG2("Bad time", "or dAtE"),
 128:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 129:src/display.c ****       MSG1("+\237"),
 130:src/display.c ****       MSG1("-\237"),
 131:src/display.c ****       MSG2("No such", "LAbEL"),
 132:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 133:src/display.c ****       MSG1("Out of range"),
ARM GAS  /tmp/ccPv3rzq.s 			page 6


 134:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 135:src/display.c ****       MSG2("Bad digit", "1"),
 136:src/display.c ****       MSG2("Too long", "1"),
 137:src/display.c **** #else
 138:src/display.c ****       MSG1("Bad digit"),
 139:src/display.c ****       MSG1("Too long"),
 140:src/display.c **** #endif
 141:src/display.c ****       MSG2("RAM is", "FuLL"),
 142:src/display.c ****       MSG2("Stack", "CLASH"),
 143:src/display.c ****       MSG1("Bad mode"),
 144:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 145:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 146:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 147:src/display.c ****       MSG1("I/O"),
 148:src/display.c ****       MSG2("Invalid", "dAtA"),
 149:src/display.c ****       MSG2("Write", "ProtEctEd"),
 150:src/display.c ****       MSG2("No root", "Found"),
 151:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 152:src/display.c ****       MSG1("Singular"),
 153:src/display.c ****       MSG2("Flash is", "FuLL"),
 154:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 155:src/display.c **** #ifndef SHIFT_EXPONENT
 156:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 157:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 158:src/display.c ****       MSG2("Too\007\304 small", "1"),
 159:src/display.c **** #     else
 160:src/display.c ****       MSG2("Too small", "1"),
 161:src/display.c **** #     endif
 162:src/display.c ****       MSG2("Too big", "1"),
 163:src/display.c **** #  else
 164:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 165:src/display.c ****       MSG1("Too\007\304 small"),
 166:src/display.c **** #     else
 167:src/display.c ****       MSG1("Too small"),
 168:src/display.c **** #     endif
 169:src/display.c ****       MSG1("Too big"),
 170:src/display.c **** #  endif
 171:src/display.c **** #endif
 172:src/display.c **** #ifdef INCLUDE_C_LOCK
 173:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 174:src/display.c **** #endif
 175:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 176:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 177:src/display.c ****       MSG2("Interrupted", "X"),
 178:src/display.c **** #endif
 179:src/display.c ****     };
 180:src/display.c **** #undef MSG1
 181:src/display.c **** #undef MSG2
 182:src/display.c **** 
 183:src/display.c ****   if (e != ERR_NONE || Running) {
 184:src/display.c ****     const char *p = error_table[e];
 185:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 186:src/display.c ****     if (*q == '\0')
 187:src/display.c ****       q = S7_ERROR;
 188:src/display.c ****     if (*q == 'X') {
 189:src/display.c ****       DispMsg = p;
 190:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccPv3rzq.s 			page 7


 191:src/display.c ****     }
 192:src/display.c ****     else {
 193:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 194:src/display.c ****       if (*q == '1')
 195:src/display.c **** 	q = CNULL;
 196:src/display.c **** #endif
 197:src/display.c ****       message(p, q);
 198:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 199:src/display.c ****     }
 200:src/display.c **** #ifdef INFRARED
 201:src/display.c ****     if (Tracing) {
 202:src/display.c ****       if (*q == 'X')
 203:src/display.c **** 	print_reg(regX_idx, p, 0);
 204:src/display.c ****       else {
 205:src/display.c **** 	print_tab(0);
 206:src/display.c **** 	print_line(p, 0);
 207:src/display.c **** 	print(' ');
 208:src/display.c **** 	while (*q != '\0') {
 209:src/display.c **** 	  int c = *q;
 210:src/display.c **** 	  if (c >= 'A')
 211:src/display.c **** 	    c |= 0x60; // ASCII lower case
 212:src/display.c **** 	  print(c);
 213:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 214:src/display.c **** 	    ++q;
 215:src/display.c **** 	  ++q;
 216:src/display.c **** 	}
 217:src/display.c **** 	print_advance( 0 );
 218:src/display.c ****       }
 219:src/display.c ****     }
 220:src/display.c **** #endif
 221:src/display.c ****   }
 222:src/display.c **** }
 223:src/display.c **** 
 224:src/display.c **** 
 225:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 226:src/display.c ****  * display.
 227:src/display.c ****  */
 228:src/display.c **** #define D_TOP 64
 229:src/display.c **** #define D_TL 32
 230:src/display.c **** #define D_TR 8
 231:src/display.c **** #define D_MIDDLE 16
 232:src/display.c **** #define D_BL 4
 233:src/display.c **** #define D_BR 1
 234:src/display.c **** #define D_BOTTOM 2
 235:src/display.c **** 
 236:src/display.c **** #include "charset7.h"
 237:src/display.c **** 
 238:src/display.c **** #ifndef REALBUILD
 239:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 240:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 241:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 242:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 243:src/display.c **** 
 244:src/display.c **** static void set_mant_sign_dot()
 245:src/display.c **** {
 246:src/display.c ****   set_dot(MANT_SIGN);
 247:src/display.c **** }
ARM GAS  /tmp/ccPv3rzq.s 			page 8


 248:src/display.c **** 
 249:src/display.c **** static void clr_mant_sign_dot()
 250:src/display.c **** {
 251:src/display.c ****   clr_dot(MANT_SIGN);
 252:src/display.c **** }
 253:src/display.c **** 
 254:src/display.c **** static void set_exp_sign_dot()
 255:src/display.c **** {
 256:src/display.c ****   set_dot(EXP_SIGN);
 257:src/display.c **** }
 258:src/display.c **** 
 259:src/display.c **** static void clr_exp_sign_dot()
 260:src/display.c **** {
 261:src/display.c ****   clr_dot(EXP_SIGN);
 262:src/display.c **** }
 263:src/display.c **** 
 264:src/display.c **** #else
 265:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 266:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 267:src/display.c **** 
 268:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 269:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 270:src/display.c **** 
 271:src/display.c **** #endif
 272:src/display.c **** 
 273:src/display.c **** #ifndef REALBUILD
 274:src/display.c **** int getdig(int ch)
 275:src/display.c **** #else
 276:src/display.c ****   static int getdig(int ch)
 277:src/display.c **** #endif
 278:src/display.c **** {
 279:src/display.c ****   // perform index lookup
 280:src/display.c ****   return digtbl[ch&0xff];
 281:src/display.c **** }
 282:src/display.c **** 
 283:src/display.c **** void dot(int n, int on) {
 284:src/display.c ****   if (on)	set_dot(n);
 285:src/display.c ****   else	clr_dot(n);
 286:src/display.c **** }
 287:src/display.c **** 
 288:src/display.c **** 
 289:src/display.c **** /* Set the decimal point *after* the indicated digit
 290:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 291:src/display.c ****  * of decimal.
 292:src/display.c ****  */
 293:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 294:src/display.c ****   if (res) {
 295:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 296:src/display.c ****   } else {
 297:src/display.c ****     set_dot(posn+7);
 298:src/display.c ****     if (decimal != DECIMAL_DOT)
 299:src/display.c ****       set_dot(posn+8);
 300:src/display.c ****   }
 301:src/display.c ****   return res;
 302:src/display.c **** }
 303:src/display.c **** 
 304:src/display.c **** /* Set the digit group separator *before* the specified digit.
ARM GAS  /tmp/ccPv3rzq.s 			page 9


 305:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 306:src/display.c ****  * sep argument.
 307:src/display.c ****  */
 308:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 309:src/display.c ****   if (sep == SEP_NONE)
 310:src/display.c ****     return res;
 311:src/display.c ****   if (res) {
 312:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 313:src/display.c ****     else *res++ = '.';
 314:src/display.c ****   } else {
 315:src/display.c ****     posn -= SEGS_PER_DIGIT;
 316:src/display.c ****     set_dot(posn+7);
 317:src/display.c ****     if (sep == SEP_COMMA)
 318:src/display.c ****       set_dot(posn+8);
 319:src/display.c ****   }
 320:src/display.c ****   return res;
 321:src/display.c **** }
 322:src/display.c **** 
 323:src/display.c **** /* Set a digit in positions [base, base+6] */
 324:src/display.c **** static void set_dig(int base, int ch)
 325:src/display.c **** {
 136              		.loc 1 325 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 326:src/display.c ****   int i;
 140              		.loc 1 326 3 view .LVU36
 327:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 327 3 view .LVU37
 142              	.LBB183:
 143              	.LBI183:
 274:src/display.c **** #else
 144              		.loc 1 274 5 view .LVU38
 145              	.LBB184:
 280:src/display.c **** }
 146              		.loc 1 280 3 view .LVU39
 280:src/display.c **** }
 147              		.loc 1 280 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 280:src/display.c **** }
 149              		.loc 1 280 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 280:src/display.c **** }
 152              		.loc 1 280 19 view .LVU42
 153              	.LBE184:
 154              	.LBE183:
 325:src/display.c ****   int i;
 155              		.loc 1 325 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB186:
 163              	.LBB185:
ARM GAS  /tmp/ccPv3rzq.s 			page 10


 280:src/display.c **** }
 164              		.loc 1 280 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 280:src/display.c **** }
 167              		.loc 1 280 16 view .LVU45
 168              	.LBE185:
 169              	.LBE186:
 328:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 328 3 is_stmt 1 view .LVU46
 171              		.loc 1 328 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 328 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 329:src/display.c ****     {
 330:src/display.c ****       //		dot(base, c & (1 << i));
 331:src/display.c ****       if (c & (1 << i))
 332:src/display.c **** 	set_dot(base);
 178              		.loc 1 332 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 333:src/display.c ****       else
 334:src/display.c **** 	clr_dot(base);
 335:src/display.c ****       base++;
 181              		.loc 1 335 7 is_stmt 1 view .LVU50
 328:src/display.c ****     {
 182              		.loc 1 328 19 view .LVU51
 328:src/display.c ****     {
 183              		.loc 1 328 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 328:src/display.c ****     {
 186              		.loc 1 328 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
 189              	.L19:
 332:src/display.c ****       else
 190              		.loc 1 332 2 is_stmt 1 view .LVU54
 334:src/display.c ****       base++;
 191              		.loc 1 334 2 view .LVU55
 331:src/display.c **** 	set_dot(base);
 192              		.loc 1 331 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 331:src/display.c **** 	set_dot(base);
 194              		.loc 1 331 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 331:src/display.c **** 	set_dot(base);
 198              		.loc 1 331 7 is_stmt 1 view .LVU58
 331:src/display.c **** 	set_dot(base);
 199              		.loc 1 331 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 334:src/display.c ****       base++;
ARM GAS  /tmp/ccPv3rzq.s 			page 11


 201              		.loc 1 334 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 335 7 is_stmt 1 view .LVU61
 328:src/display.c ****     {
 205              		.loc 1 328 19 view .LVU62
 328:src/display.c ****     {
 206              		.loc 1 328 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
 328:src/display.c ****     {
 209              		.loc 1 328 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 336:src/display.c ****     }
 337:src/display.c **** }
 213              		.loc 1 337 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 337 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE10:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB21:
 338:src/display.c **** 
 339:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 340:src/display.c ****   if (res) *res++ = ch;
 341:src/display.c ****   else	set_dig(base, ch);
 342:src/display.c ****   return res;
 343:src/display.c **** }
 344:src/display.c **** 
 345:src/display.c **** 
 346:src/display.c **** static void set_digits_string(const char *msg, int j) {
 347:src/display.c ****   for (; *msg != '\0'; msg++) {
 348:src/display.c ****     if (*msg == '.' || *msg == ',')
 349:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 350:src/display.c ****     else {
 351:src/display.c ****       set_dig_s(j, *msg, CNULL);
 352:src/display.c ****       j += SEGS_PER_DIGIT;
 353:src/display.c ****     }
 354:src/display.c ****   }
 355:src/display.c **** }
 356:src/display.c **** 
 357:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
ARM GAS  /tmp/ccPv3rzq.s 			page 12


 358:src/display.c ****   int i;
 359:src/display.c ****   const int n = res == NULL ? 3 : 4;
 360:src/display.c **** 
 361:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 362:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 363:src/display.c **** }
 364:src/display.c **** 
 365:src/display.c **** /* Force the exponent display
 366:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 367:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 368:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 369:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 370:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 371:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 372:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 373:src/display.c ****  */
 374:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 375:src/display.c ****   union {
 376:src/display.c ****     char buf[4];
 377:src/display.c ****     int i;
 378:src/display.c ****   } u;
 379:src/display.c ****   int negative;
 380:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 381:src/display.c ****   int thousands;
 382:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 383:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 384:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 385:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 386:src/display.c **** #  else
 387:src/display.c ****   const int show_large_exponent = 1;
 388:src/display.c **** #  endif
 389:src/display.c **** #else
 390:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 391:src/display.c ****   int thousands;
 392:src/display.c **** #  endif
 393:src/display.c ****   const int show_large_exponent = 0;
 394:src/display.c **** #endif
 395:src/display.c **** 
 396:src/display.c ****   negative = flags & 2;
 397:src/display.c ****   if (exp < 0) {
 398:src/display.c ****     negative = 1;
 399:src/display.c ****     exp = -exp;
 400:src/display.c ****   }
 401:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 402:src/display.c ****   thousands = exp / 1000;
 403:src/display.c **** #endif
 404:src/display.c ****   if (res) {
 405:src/display.c **** #ifdef INCLUDE_YREG_CODE
 406:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 407:src/display.c ****     if (thousands != 0) {
 408:src/display.c **** #else
 409:src/display.c ****       if (exp > 999) {
 410:src/display.c **** #endif
 411:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 412:src/display.c **** 	// No exponent separator for large -ve exponents
 413:src/display.c ****       }
 414:src/display.c ****       else *res++ = 'e'; // Normal separator
ARM GAS  /tmp/ccPv3rzq.s 			page 13


 415:src/display.c **** #else
 416:src/display.c ****       *res++ = 'e';
 417:src/display.c **** #endif
 418:src/display.c ****       if (negative) *res++ = '-';
 419:src/display.c ****     }
 420:src/display.c ****     else {
 421:src/display.c ****       if (negative) SET_EXP_SIGN;
 422:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 423:src/display.c ****       if (thousands != 0) {
 424:src/display.c **** #else
 425:src/display.c **** 	if (exp > 999) {
 426:src/display.c **** #endif
 427:src/display.c **** 	  if (!show_large_exponent
 428:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 429:src/display.c **** 	      && (flags & 8) == 0
 430:src/display.c **** #endif
 431:src/display.c **** 	      ) {
 432:src/display.c **** #ifdef REALBUILD
 433:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 434:src/display.c **** #else
 435:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 436:src/display.c **** #endif
 437:src/display.c **** 	    goto no_number;
 438:src/display.c **** 	  }
 439:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 440:src/display.c **** 	  else {
 441:src/display.c **** 	    exp -= thousands * 1000;
 442:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 443:src/display.c **** 	    if (flags & 16) {
 444:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 445:src/display.c **** 	      int i;
 446:src/display.c **** 
 447:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 448:src/display.c **** 		// Clear digits and separators
 449:src/display.c **** 		clr_dot(i);
 450:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 451:src/display.c **** 	    }
 452:src/display.c **** #  endif
 453:src/display.c **** 	    if (negative) {
 454:src/display.c **** 	      CLR_EXP_SIGN;
 455:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 456:src/display.c **** 	    }
 457:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 458:src/display.c **** 	    flags = 1;
 459:src/display.c **** 	  }
 460:src/display.c **** #endif
 461:src/display.c **** 	}
 462:src/display.c ****       }
 463:src/display.c **** #ifdef REALBUILD
 464:src/display.c ****       u.i = 0; // Smaller ARM code
 465:src/display.c **** #else
 466:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 467:src/display.c **** #endif
 468:src/display.c ****       if (flags & 5) {
 469:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 470:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 471:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
ARM GAS  /tmp/ccPv3rzq.s 			page 14


 472:src/display.c **** 	  int i;
 473:src/display.c **** 
 474:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 475:src/display.c **** 	    if (u.buf[i] == '0')
 476:src/display.c **** 	      u.buf[i] = ' ';
 477:src/display.c **** 	    else
 478:src/display.c **** 	      break;
 479:src/display.c **** 	  }
 480:src/display.c **** 	  if (i != 0 && negative) {
 481:src/display.c **** 	    // Move minus sign to right in front of exponent
 482:src/display.c **** 	    CLR_EXP_SIGN;
 483:src/display.c **** 	    u.buf[i - 1] = '-';
 484:src/display.c **** 	  }
 485:src/display.c **** 	}
 486:src/display.c **** #endif
 487:src/display.c ****       }
 488:src/display.c ****       else
 489:src/display.c **** 	num_arg(u.buf, exp);
 490:src/display.c ****     no_number:
 491:src/display.c ****       set_exp_digits_string(u.buf, res);
 492:src/display.c ****     }
 493:src/display.c **** 
 494:src/display.c ****     static void carry_overflow(void) {
 495:src/display.c ****       const int base = SEGS_EXP_BASE;
 496:src/display.c ****       int c;
 497:src/display.c ****       unsigned int b;
 498:src/display.c **** 
 499:src/display.c ****       // Figure out the base
 500:src/display.c ****       switch (State2.smode) {
 501:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 502:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 503:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 504:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 505:src/display.c ****       default:	b = UState.int_base+1;	break;
 506:src/display.c ****       }
 507:src/display.c **** 
 508:src/display.c ****       // Display the base as the first exponent digit
 509:src/display.c ****       if (b > 10 && b < 16)
 510:src/display.c **** 	SET_EXP_SIGN;
 511:src/display.c ****       c = "B34567o9D12345h"[b-2];
 512:src/display.c ****       set_dig(base, c);
 513:src/display.c **** 
 514:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 515:src/display.c ****       if (get_carry())
 516:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 517:src/display.c ****       if (get_overflow())
 518:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 519:src/display.c ****     }
 520:src/display.c **** 
 521:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 522:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 523:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 524:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 525:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 526:src/display.c **** #endif
 527:src/display.c **** 
 528:src/display.c ****     /* Display the annunicator text line.
ARM GAS  /tmp/ccPv3rzq.s 			page 15


 529:src/display.c ****      * Care needs to be taken to keep things aligned.
 530:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 531:src/display.c ****      */
 532:src/display.c **** #ifdef TOP_ROW
 533:src/display.c ****     static void annunciators(void) {
 534:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 535:src/display.c ****       char buf[42], *p = buf, *q="";
 536:src/display.c ****       char buf2[42], *p2 = buf2;
 537:src/display.c ****       int n;
 538:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 539:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 540:src/display.c ****       // Constant variables and code branches depending on a constant variable
 541:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 542:src/display.c ****       // feature run-time configurable if needed.
 543:src/display.c **** #ifdef INCLUDE_YREG_CODE
 544:src/display.c **** #  ifdef YREG_ALWAYS_ON
 545:src/display.c ****       const int yreg_enabled = 1;
 546:src/display.c **** #  else
 547:src/display.c ****       const int yreg_enabled = UState.show_y;
 548:src/display.c **** #  endif
 549:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 550:src/display.c ****       const int yreg_hms = 1;
 551:src/display.c **** #  else
 552:src/display.c ****       const int yreg_hms = 0;
 553:src/display.c **** #  endif
 554:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 555:src/display.c ****       const int yreg_fract = 1;
 556:src/display.c **** #  else
 557:src/display.c ****       const int yreg_fract = 0;
 558:src/display.c **** #  endif
 559:src/display.c **** #else
 560:src/display.c ****       const int yreg_enabled = 0;
 561:src/display.c ****       const int yreg_hms = 0;
 562:src/display.c ****       const int yreg_fract = 0;
 563:src/display.c **** #endif
 564:src/display.c **** #ifdef RP_PREFIX
 565:src/display.c ****       const int rp_prefix = 1;
 566:src/display.c **** #else
 567:src/display.c ****       const int rp_prefix = 0;
 568:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 569:src/display.c **** #endif
 570:src/display.c ****       // Indicates whether font escape code is compiled in.
 571:src/display.c ****       // This variable will always be set at compile time.
 572:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 573:src/display.c ****       const int has_FONT_ESCAPE = 1;
 574:src/display.c **** #else
 575:src/display.c ****       const int has_FONT_ESCAPE = 0;
 576:src/display.c **** #endif
 577:src/display.c **** 
 578:src/display.c ****       xset(buf, '\0', sizeof(buf));
 579:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 580:src/display.c ****       
 581:src/display.c ****       if (is_intmode()) {
 582:src/display.c **** #ifdef SHOW_STACK_SIZE
 583:src/display.c **** 	if (shift_char == ' ') {
 584:src/display.c **** 	  *p2++ = '\007';
 585:src/display.c **** 	  *p2++ = '\346';
ARM GAS  /tmp/ccPv3rzq.s 			page 16


 586:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 587:src/display.c **** 	}
 588:src/display.c **** 	else
 589:src/display.c **** #endif
 590:src/display.c **** 	  {
 591:src/display.c **** 	    *p2++ = shift_char;
 592:src/display.c **** 	    *p2++ = '\006';
 593:src/display.c **** 	  }
 594:src/display.c **** 
 595:src/display.c **** 	switch(int_mode()) {
 596:src/display.c **** 	default:
 597:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 598:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 599:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 600:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 601:src/display.c **** 	}
 602:src/display.c **** 	q = scopy(p2, q);
 603:src/display.c **** 	*q++ = '\006';
 604:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 605:src/display.c **** 
 606:src/display.c **** 	if (IntMaxWindow > 0) {
 607:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 608:src/display.c **** 	  if (*q == '1')
 609:src/display.c **** 	    n += 2;
 610:src/display.c **** 	  if (q[1] == '1')
 611:src/display.c **** 	    n += 2;
 612:src/display.c **** 	  while (n-- > 0)
 613:src/display.c **** 	    *p2++ = '\006';
 614:src/display.c **** 
 615:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 616:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 617:src/display.c **** 	}
 618:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 619:src/display.c ****       }
 620:src/display.c **** #ifdef INCLUDE_C_LOCK
 621:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 622:src/display.c **** #else
 623:src/display.c ****       else if (!yreg_enabled
 624:src/display.c **** #endif
 625:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 626:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 627:src/display.c **** #endif
 628:src/display.c **** 	       ) {
 629:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 630:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 631:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 632:src/display.c **** 	if (shift_char == ' ') {
 633:src/display.c **** 	  *p2++ = '\007';
 634:src/display.c **** 	  *p2++ = '\342';
 635:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 636:src/display.c **** 	  *p2++ = '\007';
 637:src/display.c **** 	  *p2++ = '\344';
 638:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 639:src/display.c **** 	}
 640:src/display.c **** 	else
 641:src/display.c **** #endif
 642:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
ARM GAS  /tmp/ccPv3rzq.s 			page 17


 643:src/display.c **** 	    *p2++ = shift_char;
 644:src/display.c **** 	    *p2++ = '\006';
 645:src/display.c **** 	  }
 646:src/display.c **** 	  else {
 647:src/display.c **** 	    *p2++ = 'D';
 648:src/display.c **** 	  }
 649:src/display.c **** 
 650:src/display.c **** 	if (State2.cmplx) {
 651:src/display.c **** 	  *p2++ = ' ';
 652:src/display.c **** 	  *p2 = '\024';
 653:src/display.c **** 	  goto skip;
 654:src/display.c **** 	}
 655:src/display.c **** 	if (State2.arrow) {
 656:src/display.c **** 	  *p2++ = ' ';
 657:src/display.c **** 	  *p2 = '\015';
 658:src/display.c **** 	  goto skip;
 659:src/display.c **** 	}
 660:src/display.c **** 
 661:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 662:src/display.c **** 	  if (State2.wascomplex) {
 663:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 664:src/display.c **** 	  }
 665:src/display.c **** 	  else if (rp_prefix) {
 666:src/display.c **** 	    if (RectPolConv == 1) {
 667:src/display.c **** 	      q = "\007\306<";
 668:src/display.c **** 	    }
 669:src/display.c **** 	    else {
 670:src/display.c **** 	      q = "\007\306y";
 671:src/display.c **** 	    }
 672:src/display.c **** 	  }
 673:src/display.c **** 	  p = scopy(buf, q);
 674:src/display.c **** 
 675:src/display.c **** 	  goto display_yreg;
 676:src/display.c **** 	}
 677:src/display.c **** 
 678:src/display.c **** 	switch (UState.date_mode) {
 679:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 680:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 681:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 682:src/display.c **** #endif
 683:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 684:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 685:src/display.c **** #endif
 686:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 687:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 688:src/display.c **** #endif
 689:src/display.c **** #endif
 690:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 691:src/display.c **** 	}
 692:src/display.c **** 	p2 = scopy(p2, q);
 693:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 694:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 695:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 696:src/display.c **** 	}
 697:src/display.c **** #else
 698:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 699:src/display.c **** 	*p2++ = '\007';
ARM GAS  /tmp/ccPv3rzq.s 			page 18


 700:src/display.c **** 	*p2++ = '\342';
 701:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 702:src/display.c **** #endif
 703:src/display.c ****       }
 704:src/display.c ****       else { // yreg_enabled
 705:src/display.c **** 	// do top-related things first
 706:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 707:src/display.c **** 	if (State2.cmplx) {
 708:src/display.c **** 	  *p2++ = '\007';
 709:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 710:src/display.c **** 	  *p2++ = shift_char;
 711:src/display.c **** 	  *p2++ = '\024';
 712:src/display.c **** 	}
 713:src/display.c **** 	else {// if (shift_char != ' ') {
 714:src/display.c **** 	  *p2++ = '\007';
 715:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 716:src/display.c **** 	  *p2++ = shift_char;
 717:src/display.c **** 	}
 718:src/display.c **** #endif
 719:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 720:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 721:src/display.c **** 	  *p2++ = '\007';
 722:src/display.c **** 	  *p2++ = '\207';
 723:src/display.c **** 	  *p2++ = '\007';	    
 724:src/display.c **** 	}
 725:src/display.c **** 	else {
 726:src/display.c **** 	  *p2++ = '\007';
 727:src/display.c **** 	  *p2++ = '\207';
 728:src/display.c **** 	  *p2++ = ' ';
 729:src/display.c **** 	}
 730:src/display.c **** #endif
 731:src/display.c **** #ifndef SHOW_STACK_SIZE
 732:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 733:src/display.c **** 	p2 = scopy(p2, q);
 734:src/display.c **** #else
 735:src/display.c **** 	if (is_dblmode()) {
 736:src/display.c **** 	  *p2++ = '\007';
 737:src/display.c **** 	  *p2++ = '\342';
 738:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 739:src/display.c **** 	  *p2++ = '\007';
 740:src/display.c **** 	  *p2++ = '\345';
 741:src/display.c **** 	  *p2++ = 'D';
 742:src/display.c **** 	}
 743:src/display.c **** 	else {
 744:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 745:src/display.c **** 	  p2 = scopy(p2, q);
 746:src/display.c **** 	}
 747:src/display.c **** #endif
 748:src/display.c **** 
 749:src/display.c **** 	switch (UState.date_mode) {
 750:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 751:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 752:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 753:src/display.c **** #endif
 754:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 755:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 756:src/display.c **** #endif
ARM GAS  /tmp/ccPv3rzq.s 			page 19


 757:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 758:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 759:src/display.c **** #endif
 760:src/display.c **** #endif
 761:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 762:src/display.c **** 	}
 763:src/display.c **** 	  
 764:src/display.c **** 	//      no_copy:
 765:src/display.c **** 	// display either arrow or datemode
 766:src/display.c **** 	if (State2.arrow) {
 767:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 768:src/display.c **** 	} // no need to skip y display with arrow here
 769:src/display.c **** 	else {
 770:src/display.c **** 	  p2 = scopy(p2, q);
 771:src/display.c **** 	}
 772:src/display.c **** 	// now do the annotations, if any, for the middle row:
 773:src/display.c **** #ifdef INCLUDE_C_LOCK
 774:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 775:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 776:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 777:src/display.c **** 	  }
 778:src/display.c **** 	  else {
 779:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 780:src/display.c **** 	  }
 781:src/display.c **** 	  scopy(p, q);
 782:src/display.c **** 	  goto skip;
 783:src/display.c **** 	}
 784:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 785:src/display.c **** 	  q = "\007\307<";
 786:src/display.c **** 	  p = scopy(p, q);
 787:src/display.c **** 	}
 788:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 789:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 790:src/display.c **** 	  p = scopy(p, q);
 791:src/display.c **** 	}
 792:src/display.c **** #else
 793:src/display.c **** 	
 794:src/display.c **** 	if (State2.wascomplex) {
 795:src/display.c **** 	  q = "\007\207i";
 796:src/display.c **** 	  p = scopy(p, q);
 797:src/display.c **** 	  //	    goto no_copy;
 798:src/display.c **** 	}
 799:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 800:src/display.c **** 	  q = "\007\307<";
 801:src/display.c **** 	  p = scopy(p, q);
 802:src/display.c **** 	  //	    goto no_copy;
 803:src/display.c **** 	}
 804:src/display.c **** 	else
 805:src/display.c **** #endif
 806:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 807:src/display.c **** 	    q = "\007\307y";
 808:src/display.c **** 	    p = scopy(p, q);
 809:src/display.c **** 	    //	    goto no_copy;
 810:src/display.c **** 	  }
 811:src/display.c ****       
 812:src/display.c **** 	if (State2.runmode) {
 813:src/display.c **** 	  decNumber y;
ARM GAS  /tmp/ccPv3rzq.s 			page 20


 814:src/display.c **** 	display_yreg:
 815:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 816:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 817:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 818:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 819:src/display.c **** 	   */
 820:src/display.c **** 	  if (is_intmode()) {
 821:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 822:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 823:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 824:src/display.c **** 	    goto skip;
 825:src/display.c **** 	  }
 826:src/display.c **** #ifdef INCLUDE_C_LOCK
 827:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 828:src/display.c **** 	    getRegister(&y, regK_idx);
 829:src/display.c **** 	  }
 830:src/display.c **** 	  else {
 831:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 832:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 833:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 834:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 835:src/display.c **** 	  }
 836:src/display.c **** #else
 837:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 838:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 839:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 840:src/display.c **** #endif
 841:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 842:src/display.c **** #ifdef INCLUDE_C_LOCK
 843:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 844:src/display.c **** #else
 845:src/display.c **** 	    if (yreg_hms && State2.hms) {
 846:src/display.c **** #endif
 847:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 848:src/display.c **** 
 849:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 850:src/display.c **** 	      UState.nothousands = 1;
 851:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 852:src/display.c **** 	      UState.nothousands = saved_nothousands;
 853:src/display.c **** 	      // First replace the '@' character with the degree symbol
 854:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 855:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 856:src/display.c **** 	      // then remove the fractional part of the seconds.
 857:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 858:src/display.c **** 	      while (*p) {
 859:src/display.c **** 		replace_char(buf, p[0], p[1]);
 860:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 861:src/display.c **** 		  goto skip;
 862:src/display.c **** 		}
 863:src/display.c **** 		p += 2;
 864:src/display.c **** 	      }
 865:src/display.c **** 	      goto skip;
 866:src/display.c **** 	    }
 867:src/display.c **** 	    if (yreg_fract && UState.fract
 868:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 869:src/display.c **** 		&& !State2.cmplx
 870:src/display.c **** #endif
ARM GAS  /tmp/ccPv3rzq.s 			page 21


 871:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 872:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 873:src/display.c **** #endif
 874:src/display.c **** 		&& set_x_fract(&y, p)) {
 875:src/display.c **** 	      char ltgteq;
 876:src/display.c **** 
 877:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 878:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 879:src/display.c **** 	      ltgteq = *q;
 880:src/display.c **** 	      switch (ltgteq) {
 881:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 882:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 883:src/display.c **** 	      }
 884:src/display.c **** 	      scopy(q, "\007\344?");
 885:src/display.c **** 	      q[2] = ltgteq;
 886:src/display.c **** 
 887:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 888:src/display.c **** 		goto skip;
 889:src/display.c **** 	      }
 890:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 891:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 892:src/display.c **** 		goto skip;
 893:src/display.c **** 	      }
 894:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 895:src/display.c **** 	    }
 896:src/display.c **** 	  }
 897:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 898:src/display.c **** 	    int extra_pixels;
 899:src/display.c **** 
 900:src/display.c **** 	    set_x_dn(&y, p, &n);
 901:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 902:src/display.c **** 	    if (extra_pixels <= 0)
 903:src/display.c **** 	      break;
 904:src/display.c **** 
 905:src/display.c **** 	    xset(p, '\0', n+10);
 906:src/display.c **** 
 907:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 908:src/display.c **** 	  }
 909:src/display.c **** 	}
 910:src/display.c ****       }
 911:src/display.c ****       
 912:src/display.c ****     skip:
 913:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 914:src/display.c ****       set_status_top_always(buf2);
 915:src/display.c ****       
 916:src/display.c ****     }
 917:src/display.c **** #else
 918:src/display.c ****     static void annunciators(void) {
 919:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 920:src/display.c ****       char buf[42], *p = buf, *q="";
 921:src/display.c ****       int n;
 922:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 923:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 924:src/display.c ****       // Constant variables and code branches depending on a constant variable
 925:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 926:src/display.c ****       // feature run-time configurable if needed.
 927:src/display.c **** #ifdef INCLUDE_YREG_CODE
ARM GAS  /tmp/ccPv3rzq.s 			page 22


 928:src/display.c **** #  ifdef YREG_ALWAYS_ON
 929:src/display.c ****       const int yreg_enabled = 1;
 930:src/display.c **** #  else
 931:src/display.c ****       const int yreg_enabled = UState.show_y;
 932:src/display.c **** #  endif
 933:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 934:src/display.c ****       const int yreg_hms = 1;
 935:src/display.c **** #  else
 936:src/display.c ****       const int yreg_hms = 0;
 937:src/display.c **** #  endif
 938:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 939:src/display.c ****       const int yreg_fract = 1;
 940:src/display.c **** #  else
 941:src/display.c ****       const int yreg_fract = 0;
 942:src/display.c **** #  endif
 943:src/display.c **** #else
 944:src/display.c ****       const int yreg_enabled = 0;
 945:src/display.c ****       const int yreg_hms = 0;
 946:src/display.c ****       const int yreg_fract = 0;
 947:src/display.c **** #endif
 948:src/display.c **** #ifdef RP_PREFIX
 949:src/display.c ****       const int rp_prefix = 1;
 950:src/display.c **** #else
 951:src/display.c ****       const int rp_prefix = 0;
 952:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 953:src/display.c **** #endif
 954:src/display.c ****       // Indicates whether font escape code is compiled in.
 955:src/display.c ****       // This variable will always be set at compile time.
 956:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 957:src/display.c ****       const int has_FONT_ESCAPE = 1;
 958:src/display.c **** #else
 959:src/display.c ****       const int has_FONT_ESCAPE = 0;
 960:src/display.c **** #endif
 961:src/display.c **** 
 962:src/display.c ****       xset(buf, '\0', sizeof(buf));
 963:src/display.c ****       
 964:src/display.c ****       if (is_intmode()) {
 965:src/display.c **** #ifdef SHOW_STACK_SIZE
 966:src/display.c **** 	if (shift_char == ' ') {
 967:src/display.c **** 	  *p++ = '\007';
 968:src/display.c **** 	  *p++ = '\346';
 969:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 970:src/display.c **** 	}
 971:src/display.c **** 	else
 972:src/display.c **** #endif
 973:src/display.c **** 	  {
 974:src/display.c **** 	    *p++ = shift_char;
 975:src/display.c **** 	    *p++ = '\006';
 976:src/display.c **** 	  }
 977:src/display.c **** 
 978:src/display.c **** 	switch(int_mode()) {
 979:src/display.c **** 	default:
 980:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 981:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 982:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 983:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 984:src/display.c **** 	}
ARM GAS  /tmp/ccPv3rzq.s 			page 23


 985:src/display.c **** 	q = scopy(p, q);
 986:src/display.c **** 	*q++ = '\006';
 987:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 988:src/display.c **** 
 989:src/display.c **** 	if (IntMaxWindow > 0) {
 990:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 991:src/display.c **** 	  if (*q == '1')
 992:src/display.c **** 	    n += 2;
 993:src/display.c **** 	  if (q[1] == '1')
 994:src/display.c **** 	    n += 2;
 995:src/display.c **** 	  while (n-- > 0)
 996:src/display.c **** 	    *p++ = '\006';
 997:src/display.c **** 
 998:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 999:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1000:src/display.c **** 	}
1001:src/display.c ****       }
1002:src/display.c **** #ifdef INCLUDE_C_LOCK
1003:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1004:src/display.c **** #else
1005:src/display.c ****       else if (!yreg_enabled
1006:src/display.c **** #endif
1007:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1008:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1009:src/display.c **** #endif
1010:src/display.c **** 	       ) {
1011:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1012:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1013:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1014:src/display.c **** 	if (shift_char == ' ') {
1015:src/display.c **** 	  *p++ = '\007';
1016:src/display.c **** 	  *p++ = '\342';
1017:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1018:src/display.c **** 	  *p++ = '\007';
1019:src/display.c **** 	  *p++ = '\344';
1020:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1021:src/display.c **** 	}
1022:src/display.c **** 	else
1023:src/display.c **** #endif
1024:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1025:src/display.c **** 	    *p++ = shift_char;
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 	  }
1028:src/display.c **** 	  else {
1029:src/display.c **** 	    *p++ = 'D';
1030:src/display.c **** 	  }
1031:src/display.c **** 
1032:src/display.c **** 	if (State2.cmplx) {
1033:src/display.c **** 	  *p++ = ' ';
1034:src/display.c **** 	  *p = '\024';
1035:src/display.c **** 	  goto skip;
1036:src/display.c **** 	}
1037:src/display.c **** 	if (State2.arrow) {
1038:src/display.c **** 	  *p++ = ' ';
1039:src/display.c **** 	  *p = '\015';
1040:src/display.c **** 	  goto skip;
1041:src/display.c **** 	}
ARM GAS  /tmp/ccPv3rzq.s 			page 24


1042:src/display.c **** 
1043:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1044:src/display.c **** 	  if (State2.wascomplex) {
1045:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1046:src/display.c **** 	  }
1047:src/display.c **** 	  else if (rp_prefix) {
1048:src/display.c **** 	    if (RectPolConv == 1) {
1049:src/display.c **** 	      q = "\007\306<";
1050:src/display.c **** 	    }
1051:src/display.c **** 	    else {
1052:src/display.c **** 	      q = "\007\306y";
1053:src/display.c **** 	    }
1054:src/display.c **** 	  }
1055:src/display.c **** 	  p = scopy(buf, q);
1056:src/display.c **** 
1057:src/display.c **** 	  goto display_yreg;
1058:src/display.c **** 	}
1059:src/display.c **** 
1060:src/display.c **** 	switch (UState.date_mode) {
1061:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1062:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1063:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1064:src/display.c **** #endif
1065:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1066:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1067:src/display.c **** #endif
1068:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1069:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1070:src/display.c **** #endif
1071:src/display.c **** #endif
1072:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1073:src/display.c **** 	}
1074:src/display.c **** 	p = scopy(p, q);
1075:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1076:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1077:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1078:src/display.c **** 	}
1079:src/display.c **** #else
1080:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1081:src/display.c **** 	*p++ = '\007';
1082:src/display.c **** 	*p++ = '\342';
1083:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1084:src/display.c **** #endif
1085:src/display.c ****       }
1086:src/display.c ****       else { // yreg_enabled
1087:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1088:src/display.c **** 	if (State2.cmplx) {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\344';
1091:src/display.c **** 	  *p++ = shift_char;
1092:src/display.c **** 	  q = "\024";
1093:src/display.c **** 	}
1094:src/display.c **** 	else if (shift_char != ' ') {
1095:src/display.c **** 	  *p++ = '\007';
1096:src/display.c **** 	  *p++ = '\307';
1097:src/display.c **** 	  *p++ = shift_char;
1098:src/display.c **** 	  goto no_copy;
ARM GAS  /tmp/ccPv3rzq.s 			page 25


1099:src/display.c **** 	}
1100:src/display.c **** 	else
1101:src/display.c **** #endif
1102:src/display.c **** #ifdef INCLUDE_C_LOCK
1103:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1104:src/display.c **** 			if ( POLAR_DISPLAY ) {
1105:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1106:src/display.c **** 			}
1107:src/display.c **** 			else {
1108:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1109:src/display.c **** 			}
1110:src/display.c **** 			scopy(p, q);
1111:src/display.c **** 			goto skip;
1112:src/display.c **** 		}
1113:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1114:src/display.c **** 			q = "\007\307<";
1115:src/display.c **** 		}
1116:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1117:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1118:src/display.c **** 		}
1119:src/display.c **** #else
1120:src/display.c **** 	  if (State2.wascomplex) {
1121:src/display.c **** 	    q = "\007\207i";
1122:src/display.c **** 	  }
1123:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1124:src/display.c **** 	    q = "\007\307<";
1125:src/display.c **** 	  }
1126:src/display.c **** #endif
1127:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1128:src/display.c **** 	    q = "\007\307y";
1129:src/display.c **** 	  }
1130:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1131:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1132:src/display.c **** 	    q = "\007\207\007";
1133:src/display.c **** 	  }
1134:src/display.c **** #endif
1135:src/display.c **** 	  else {
1136:src/display.c **** #ifndef SHOW_STACK_SIZE
1137:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1138:src/display.c **** #else
1139:src/display.c **** 	    if (is_dblmode()) {
1140:src/display.c **** 	      *p++ = '\007';
1141:src/display.c **** 	      *p++ = '\342';
1142:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1143:src/display.c **** 	      q = "\007\345D";
1144:src/display.c **** 	    }
1145:src/display.c **** 	    else {
1146:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1147:src/display.c **** 	    }
1148:src/display.c **** #endif
1149:src/display.c **** 	  }
1150:src/display.c **** 	p = scopy(p, q);
1151:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1152:src/display.c ****       no_copy:
1153:src/display.c **** #endif
1154:src/display.c **** 
1155:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccPv3rzq.s 			page 26


1156:src/display.c **** 	  scopy(p, "\007\204\006\015");
1157:src/display.c **** 	} else if (State2.runmode) {
1158:src/display.c **** 	  decNumber y;
1159:src/display.c **** 	display_yreg:
1160:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1161:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1162:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1163:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1164:src/display.c **** 	   */
1165:src/display.c **** #ifdef INCLUDE_C_LOCK
1166:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1167:src/display.c **** 		    getRegister(&y, regK_idx);
1168:src/display.c **** 		  }
1169:src/display.c **** 		  else {
1170:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1171:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1172:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1173:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1174:src/display.c **** 		  }
1175:src/display.c **** #else
1176:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1177:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1178:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1179:src/display.c **** #endif
1180:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1181:src/display.c **** #ifdef INCLUDE_C_LOCK
1182:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1183:src/display.c **** #else
1184:src/display.c **** 	    if (yreg_hms && State2.hms) {
1185:src/display.c **** #endif
1186:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1187:src/display.c **** 
1188:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1189:src/display.c **** 	      UState.nothousands = 1;
1190:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1191:src/display.c **** 	      UState.nothousands = saved_nothousands;
1192:src/display.c **** 	      // First replace the '@' character with the degree symbol
1193:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1194:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1195:src/display.c **** 	      // then remove the fractional part of the seconds.
1196:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1197:src/display.c **** 	      while (*p) {
1198:src/display.c **** 		replace_char(buf, p[0], p[1]);
1199:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1200:src/display.c **** 		  goto skip;
1201:src/display.c **** 		}
1202:src/display.c **** 		p += 2;
1203:src/display.c **** 	      }
1204:src/display.c **** 	      goto skip;
1205:src/display.c **** 	    }
1206:src/display.c **** 	    if (yreg_fract && UState.fract
1207:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1208:src/display.c **** 		&& !State2.cmplx
1209:src/display.c **** #endif
1210:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1211:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1212:src/display.c **** #endif
ARM GAS  /tmp/ccPv3rzq.s 			page 27


1213:src/display.c **** 		&& set_x_fract(&y, p)) {
1214:src/display.c **** 	      char ltgteq;
1215:src/display.c **** 
1216:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1217:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1218:src/display.c **** 	      ltgteq = *q;
1219:src/display.c **** 	      switch (ltgteq) {
1220:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1221:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1222:src/display.c **** 	      }
1223:src/display.c **** 	      scopy(q, "\007\344?");
1224:src/display.c **** 	      q[2] = ltgteq;
1225:src/display.c **** 
1226:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1227:src/display.c **** 		goto skip;
1228:src/display.c **** 	      }
1229:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1230:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1231:src/display.c **** 		goto skip;
1232:src/display.c **** 	      }
1233:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1234:src/display.c **** 	    }
1235:src/display.c **** 	  }
1236:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1237:src/display.c **** 	    int extra_pixels;
1238:src/display.c **** 
1239:src/display.c **** 	    set_x_dn(&y, p, &n);
1240:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1241:src/display.c **** 	    if (extra_pixels <= 0)
1242:src/display.c **** 	      break;
1243:src/display.c **** 
1244:src/display.c **** 	    xset(p, '\0', n+10);
1245:src/display.c **** 
1246:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1247:src/display.c **** 	  }
1248:src/display.c **** 	}
1249:src/display.c ****       }
1250:src/display.c ****       
1251:src/display.c ****     skip:	set_status_top(buf);
1252:src/display.c ****     }
1253:src/display.c **** #endif //top_row
1254:src/display.c ****     static void disp_x(const char *p) {
1255:src/display.c ****       int i;
1256:src/display.c ****       int gotdot = -1;
1257:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1258:src/display.c ****       const
1259:src/display.c **** #endif
1260:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1261:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1262:src/display.c ****       int overflow_to_left = 0;
1263:src/display.c **** #endif
1264:src/display.c **** 
1265:src/display.c ****       if (*p == '-') {
1266:src/display.c **** 	SET_MANT_SIGN;
1267:src/display.c **** 	p++;
1268:src/display.c ****       }
1269:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 28


1270:src/display.c ****       if (is_intmode()) {
1271:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1272:src/display.c **** 	  set_dig(i, *p);
1273:src/display.c **** 	  i += SEGS_PER_DIGIT;
1274:src/display.c **** 	}
1275:src/display.c **** 	carry_overflow();
1276:src/display.c ****       } else {
1277:src/display.c **** 	set_separator_decimal_modes();
1278:src/display.c **** 
1279:src/display.c **** 	i = 0;
1280:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1281:src/display.c **** 	if ( CmdLineDot > 1 ) {
1282:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	  const
1284:src/display.c **** #  endif
1285:src/display.c **** 	    int double_dot = 0;
1286:src/display.c **** 	  int j;
1287:src/display.c **** 
1288:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1289:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1290:src/display.c **** 	      gotdot = j;
1291:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1292:src/display.c **** 	      double_dot = (p[j+1] == '.');
1293:src/display.c **** #  endif
1294:src/display.c **** 	    }
1295:src/display.c **** 	  }
1296:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1297:src/display.c **** 	  if (j > 0) {
1298:src/display.c **** 	    p += j + 1;
1299:src/display.c **** 	    i = SEGS_PER_DIGIT;
1300:src/display.c **** 	    if (gotdot <= j) {
1301:src/display.c **** 	      gotdot = 0;
1302:src/display.c **** 	      if (double_dot)
1303:src/display.c **** 		p++;
1304:src/display.c **** 	    }
1305:src/display.c **** 	    else if (*p == '.') {
1306:src/display.c **** 	      gotdot = 0;
1307:src/display.c **** 	      p++;
1308:src/display.c **** 	      if (!double_dot)
1309:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1310:src/display.c **** 	    }
1311:src/display.c **** 	    else gotdot = -1;
1312:src/display.c **** 	    set_dig(0, '<');
1313:src/display.c **** 	    overflow_to_left = 1;
1314:src/display.c **** 	  }
1315:src/display.c **** 	  else gotdot = -1;
1316:src/display.c **** 	}
1317:src/display.c **** #endif
1318:src/display.c **** 
1319:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1320:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1321:src/display.c **** 	       && *p != 'D'
1322:src/display.c **** #endif
1323:src/display.c **** 	       ; p++) {
1324:src/display.c **** 	  if (*p == '.') {
1325:src/display.c **** 	    if (gotdot < 0)
1326:src/display.c **** 	      gotdot = i;
ARM GAS  /tmp/ccPv3rzq.s 			page 29


1327:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1328:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1329:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1330:src/display.c **** 	      if ( *(p+1) == '.' ) {
1331:src/display.c **** 		p++;
1332:src/display.c **** 	      }
1333:src/display.c **** #  else
1334:src/display.c **** 	      if ( i != gotdot ) {
1335:src/display.c **** #  endif
1336:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1337:src/display.c **** 		i += segs_per_digit;
1338:src/display.c **** 	      }
1339:src/display.c **** 	      else {
1340:src/display.c **** 		if ( CmdLineDot > 1 ) {
1341:src/display.c **** 		  i += segs_per_digit;
1342:src/display.c **** 		}
1343:src/display.c **** 		else {
1344:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1345:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1346:src/display.c **** 		}
1347:src/display.c **** 	      }
1348:src/display.c **** #else
1349:src/display.c **** 	      if (i > 0)
1350:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1351:src/display.c **** 	      else {
1352:src/display.c **** 		set_dig(i, '0');
1353:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1354:src/display.c **** 		i += segs_per_digit;
1355:src/display.c **** 	      }
1356:src/display.c **** #endif
1357:src/display.c **** 	    } else {
1358:src/display.c **** 	      set_dig(i, *p);
1359:src/display.c **** 	      i += segs_per_digit;
1360:src/display.c **** 	    }
1361:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1362:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1363:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1364:src/display.c **** #endif
1365:src/display.c **** 	  }
1366:src/display.c **** 
1367:src/display.c **** 	  /* Implement a floating comma */
1368:src/display.c **** 	  if (gotdot < 0)
1369:src/display.c **** 	    gotdot = i;
1370:src/display.c **** 	  for (;;) {
1371:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1372:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1373:src/display.c **** 	      break;
1374:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1375:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1376:src/display.c **** 	      break;
1377:src/display.c **** #endif
1378:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1379:src/display.c **** 	  }
1380:src/display.c **** 
1381:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1382:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1383:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
ARM GAS  /tmp/ccPv3rzq.s 			page 30


1384:src/display.c **** 	    int flags = 8;
1385:src/display.c **** #  else
1386:src/display.c **** 	    int flags = 12;
1387:src/display.c **** #  endif
1388:src/display.c **** 
1389:src/display.c **** 	    if (*p == 'D')
1390:src/display.c **** 	      flags |= 2;
1391:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1392:src/display.c **** 	      flags |= 16;
1393:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1394:src/display.c **** 	  }
1395:src/display.c **** #else
1396:src/display.c **** 	  if (*p == 'E') {
1397:src/display.c **** 	    p++;
1398:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1399:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1400:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1401:src/display.c **** #  else
1402:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1403:src/display.c **** #  endif
1404:src/display.c **** 	  } 
1405:src/display.c **** #endif
1406:src/display.c **** 	}
1407:src/display.c ****       }
1408:src/display.c **** 
1409:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1410:src/display.c **** 
1411:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1412:src/display.c **** 	const int ws = word_size();
1413:src/display.c **** 	unsigned int b;
1414:src/display.c **** 	long long int vs = value;
1415:src/display.c **** 	unsigned long long int v;
1416:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1417:src/display.c **** 	int i, j, k;
1418:src/display.c **** 	int sign = 0;
1419:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1420:src/display.c **** 
1421:src/display.c **** 	switch (State2.smode) {
1422:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1423:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1424:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1425:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1426:src/display.c **** 	default:	b = int_base();	break;
1427:src/display.c **** 	}
1428:src/display.c **** 
1429:src/display.c **** 	if (!res) {
1430:src/display.c **** 	  IntMaxWindow = 0;
1431:src/display.c **** 	  carry_overflow();
1432:src/display.c **** 	}
1433:src/display.c **** 
1434:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1435:src/display.c **** 	  v = extract_value(value, &sign);
1436:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1437:src/display.c **** 	    v = value;
1438:src/display.c **** 	  if (v == 0) {
1439:src/display.c **** 	    if (sign)
1440:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
ARM GAS  /tmp/ccPv3rzq.s 			page 31


1441:src/display.c **** 	    set_dig_s(dig, '0', res);
1442:src/display.c **** 	    return;
1443:src/display.c **** 	  } else
1444:src/display.c **** 	    for (i=0; v != 0; i++) {
1445:src/display.c **** 	      const int r = v % b;
1446:src/display.c **** 	      v /= b;
1447:src/display.c **** 	      buf[i] = DIGITS[r];
1448:src/display.c **** 	    }
1449:src/display.c **** 	} else {
1450:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1451:src/display.c **** 	  if (ws < 64) {
1452:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1453:src/display.c **** 	    vs &= mask;
1454:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1455:src/display.c **** 	      vs |= ~mask;
1456:src/display.c **** 	  }
1457:src/display.c **** 
1458:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1459:src/display.c **** 	    set_dig_s(dig, '0', res);
1460:src/display.c **** 	    return;
1461:src/display.c **** 	  } else if (!UState.leadzero) {
1462:src/display.c **** 	    v = (unsigned long long int)vs;
1463:src/display.c **** 	    for (i=0; v != 0; i++) {
1464:src/display.c **** 	      const int r = v % b;
1465:src/display.c **** 	      v /= b;
1466:src/display.c **** 	      buf[i] = DIGITS[r];
1467:src/display.c **** 	    }
1468:src/display.c **** 	  } else {
1469:src/display.c **** 	    int n;
1470:src/display.c **** 	    const unsigned int b1 = b >> 1;
1471:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1472:src/display.c **** 	    v = (unsigned long long int)vs;
1473:src/display.c **** 
1474:src/display.c **** 	    n = (ws + fac) / (fac+1);
1475:src/display.c **** 	    for (i=0; i<n; i++) {
1476:src/display.c **** 	      const int r = v % b;
1477:src/display.c **** 	      v /= b;
1478:src/display.c **** 	      buf[i] = DIGITS[r];
1479:src/display.c **** 	    }
1480:src/display.c **** 	  }
1481:src/display.c **** 	}
1482:src/display.c **** #ifdef BIGGER_DISPLAY
1483:src/display.c **** #define MAX_INT_Y_DIG 13
1484:src/display.c **** #else
1485:src/display.c **** #define MAX_INT_Y_DIG 7
1486:src/display.c **** #endif
1487:src/display.c **** 	/* At this point i is the number of digits in the output */
1488:src/display.c **** 	int nd = i;
1489:src/display.c **** 	if (res) {
1490:src/display.c **** 	  if (sign) *res++ = '-';
1491:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1492:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1493:src/display.c **** 	      *res++ = buf[i];
1494:src/display.c **** 	    *res++ = '.';
1495:src/display.c **** 	    *res++ = '.';
1496:src/display.c **** 	  }
1497:src/display.c **** 	  else {
ARM GAS  /tmp/ccPv3rzq.s 			page 32


1498:src/display.c **** 	    while (--i >= 0)
1499:src/display.c **** 	      *res++ = buf[i];
1500:src/display.c **** 	  }
1501:src/display.c **** 	} else {
1502:src/display.c **** #if 0
1503:src/display.c **** 	  set_separator_decimal_modes();
1504:src/display.c **** 
1505:src/display.c **** 	  // Allows configuration of digit grouping per base
1506:src/display.c **** 	  static const char grouping[] = 
1507:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1508:src/display.c **** 		    //	   2     3     4     5     6     7     8
1509:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1510:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1511:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1512:src/display.c **** 	    : grouping[b - 2] >> 4;
1513:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1514:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1515:src/display.c **** #else
1516:src/display.c **** 	  // Less flexible but shorter
1517:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1518:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1519:src/display.c **** 	    : b == 16 ? 2 : 3;
1520:src/display.c **** 	  set_separator_decimal_modes();
1521:src/display.c **** #endif
1522:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1523:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1524:src/display.c **** 	    State2.window = 0;
1525:src/display.c **** 	  buf[i] = '\0';
1526:src/display.c **** 
1527:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1528:src/display.c **** 	  for (k = 0; k < 12; k++)
1529:src/display.c **** 	    if (buf[j + k] == '\0')
1530:src/display.c **** 	      break;
1531:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1532:src/display.c **** 	    int ch = buf[j++];
1533:src/display.c **** 	    if (i >= shift)
1534:src/display.c **** 	      ch -= 030;
1535:src/display.c **** 	    set_dig(dig, ch);
1536:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1537:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1538:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1539:src/display.c **** 	  }
1540:src/display.c **** 	  if (sign) {
1541:src/display.c **** 	    if (dig >= 0)
1542:src/display.c **** 	      set_dig(dig, '-');
1543:src/display.c **** 	    else	SET_MANT_SIGN;
1544:src/display.c **** 	  }
1545:src/display.c **** 	}
1546:src/display.c ****       }
1547:src/display.c **** 
1548:src/display.c ****       /* Handle special cases.
1549:src/display.c ****        * return non-zero if the number is special.
1550:src/display.c ****        */
1551:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1552:src/display.c **** 	if (decNumberIsSpecial(x)) {
1553:src/display.c **** 	  if (decNumberIsNaN(x)) {
1554:src/display.c **** 	    if (res) {
ARM GAS  /tmp/ccPv3rzq.s 			page 33


1555:src/display.c **** 	      scopy(res, "NaN");
1556:src/display.c **** 	    } else {
1557:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1558:src/display.c **** 	    }
1559:src/display.c **** 	    return 1;
1560:src/display.c **** 	  } else {
1561:src/display.c **** 	    if (decNumberIsNegative(x)) {
1562:src/display.c **** 	      if (res) *res++ = '-';
1563:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1564:src/display.c **** 	    }
1565:src/display.c **** 	    if (res)
1566:src/display.c **** 	      *res++ = '\237';
1567:src/display.c **** 	    else {
1568:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1569:src/display.c **** 	    }
1570:src/display.c **** 	    return 1;
1571:src/display.c **** 	  }
1572:src/display.c **** 	}
1573:src/display.c **** 	return 0;
1574:src/display.c ****       }
1575:src/display.c **** 
1576:src/display.c **** 
1577:src/display.c ****       /* Extract the two lowest integral digits from the number
1578:src/display.c ****        */
1579:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1580:src/display.c **** 	decNumber n;
1581:src/display.c **** 
1582:src/display.c **** 	decNumberMod(&n, x, &const_100);
1583:src/display.c **** 	*v = dn_to_int(&n);
1584:src/display.c **** 	dn_mulpow10(&n, x, -2);
1585:src/display.c **** 	decNumberTrunc(res, &n);
1586:src/display.c ****       }
1587:src/display.c **** 
1588:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1588 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1589:src/display.c **** 	char b[32];
 239              		.loc 1 1589 2 view .LVU68
1590:src/display.c **** 	int i, j;
 240              		.loc 1 1590 2 view .LVU69
1591:src/display.c **** 
1592:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1592 2 view .LVU70
 242              		.loc 1 1592 12 view .LVU71
1588:src/display.c **** 	char b[32];
 243              		.loc 1 1588 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPv3rzq.s 			page 34


1593:src/display.c **** 	  if (v == 0)
1594:src/display.c **** 	    b[i] = spaces?' ':'0';
1595:src/display.c **** 	  else {
1596:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1596 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1588:src/display.c **** 	char b[32];
 255              		.loc 1 1588 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
1588:src/display.c **** 	char b[32];
 258              		.loc 1 1588 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1592:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1592 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1593:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1593 4 is_stmt 1 view .LVU77
 266              		.loc 1 1596 6 view .LVU78
 267              		.loc 1 1596 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1597:src/display.c **** 	    v /= 10;
 274              		.loc 1 1597 6 is_stmt 1 view .LVU80
1598:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1598 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1592:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1592 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1593 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1592:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1592 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1598 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1597:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1597 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1598 6 is_stmt 1 view .LVU87
1592:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1592 17 view .LVU88
1592:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1592 12 view .LVU89
1592:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1592 2 is_stmt 0 view .LVU90
ARM GAS  /tmp/ccPv3rzq.s 			page 35


 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1592:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1592 2 view .LVU91
 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1592:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1592 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1593 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1594:src/display.c **** 	  else {
 312              		.loc 1 1594 6 is_stmt 1 view .LVU94
1592:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1592 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
 315              	.LVL21:
1592:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1592 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1594:src/display.c **** 	  else {
 318              		.loc 1 1594 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1592:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1592 17 is_stmt 1 view .LVU98
1592:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1592 12 view .LVU99
1592:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1592 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1592:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1592 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1599:src/display.c **** 	  }
1600:src/display.c **** 	}
1601:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1601 2 is_stmt 1 view .LVU102
 334              		.loc 1 1601 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
ARM GAS  /tmp/ccPv3rzq.s 			page 36


 336              	.LVL25:
1602:src/display.c **** 	  b[0] = '0';
1603:src/display.c **** 
1604:src/display.c **** 	/* Copy across and appropriately leading space things
1605:src/display.c **** 	 */
1606:src/display.c **** 	j = *jin;
 337              		.loc 1 1606 4 view .LVU104
 338 005a D7F80090 		ldr	r9, [r7]
1601:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1601 5 view .LVU105
 340 005e 202B     		cmp	r3, #32
1602:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1602 4 is_stmt 1 view .LVU106
1602:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1602 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1606 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1607:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1607 2 view .LVU109
 349              		.loc 1 1607 8 view .LVU110
1606:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1606 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
 353              		.loc 1 1607 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1608:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1608 4 is_stmt 1 view .LVU113
 358              	.LBB187:
 359              	.LBB188:
 340:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 340 12 view .LVU114
 361              	.LBE188:
 362              	.LBE187:
 363              		.loc 1 1608 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB192:
 366              	.LBB189:
 340:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 340 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 340:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 340 16 view .LVU117
 371              	.LBE189:
 372              	.LBI187:
 339:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 339 14 is_stmt 1 view .LVU118
 374              	.LBB190:
 340:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 340 3 view .LVU119
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccPv3rzq.s 			page 37


 376              		.loc 1 340 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 340:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 340 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
 340:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 340 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
 384              	.LVL31:
 385              	.L34:
 342:src/display.c **** }
 386              		.loc 1 342 3 is_stmt 1 view .LVU123
 342:src/display.c **** }
 387              		.loc 1 342 3 is_stmt 0 view .LVU124
 388              	.LBE190:
 389              	.LBE192:
1609:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1609 4 is_stmt 1 view .LVU125
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1607 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1609 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1607 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1610:src/display.c **** 	}
1611:src/display.c **** 	*jin = j;
 399              		.loc 1 1611 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1611 2 is_stmt 1 view .LVU130
 403              		.loc 1 1611 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1612:src/display.c **** 	return str;
1613:src/display.c ****       }
 406              		.loc 1 1613 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1611:src/display.c **** 	return str;
 408              		.loc 1 1611 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1612:src/display.c **** 	return str;
 410              		.loc 1 1612 2 is_stmt 1 view .LVU134
 411              		.loc 1 1613 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
ARM GAS  /tmp/ccPv3rzq.s 			page 38


 420              	.LBB193:
 421              	.LBB191:
 341:src/display.c ****   return res;
 422              		.loc 1 341 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
 341:src/display.c ****   return res;
 426              		.loc 1 341 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE191:
 433              	.LBE193:
 434              		.cfi_endproc
 435              	.LFE21:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
 447              	.LFB13:
 357:src/display.c ****   int i;
 448              		.loc 1 357 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 358 3 view .LVU139
 359:src/display.c **** 
 453              		.loc 1 359 3 view .LVU140
 357:src/display.c ****   int i;
 454              		.loc 1 357 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 359:src/display.c **** 
 463              		.loc 1 359 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 361 3 is_stmt 1 view .LVU143
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccPv3rzq.s 			page 39


 470              		.loc 1 361 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB194:
 476              	.LBB195:
 341:src/display.c ****   return res;
 477              		.loc 1 341 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 340:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 340 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 340:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 340 19 view .LVU147
 486              	.LBE195:
 487              	.LBE194:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 361 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB201:
 491              	.LBB196:
 340:src/display.c ****   else	set_dig(base, ch);
 492              		.loc 1 340 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 342:src/display.c **** }
 495              		.loc 1 342 3 is_stmt 1 view .LVU150
 342:src/display.c **** }
 496              		.loc 1 342 3 is_stmt 0 view .LVU151
 497              	.LBE196:
 498              	.LBE201:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 361 36 is_stmt 1 view .LVU152
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 361 13 view .LVU153
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 361 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 362:src/display.c **** }
 505              		.loc 1 362 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB202:
 507              	.LBB197:
 340:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 340 12 discriminator 3 view .LVU156
 340:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 340 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE197:
 511              	.LBE202:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 361 23 discriminator 3 view .LVU158
ARM GAS  /tmp/ccPv3rzq.s 			page 40


 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB203:
 516              	.LBB198:
 340:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 340 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
 519              	.LVL44:
 340:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 340 16 discriminator 3 view .LVU160
 521              	.LBE198:
 522              	.LBI194:
 339:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 339 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB199:
 340:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 340 3 discriminator 3 view .LVU162
 526              	.LBE199:
 527              	.LBE203:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 361 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB204:
 532              	.LBB200:
 340:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 340 6 discriminator 4 view .LVU164
 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 341:src/display.c ****   return res;
 536              		.loc 1 341 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 342:src/display.c **** }
 541              		.loc 1 342 3 view .LVU166
 342:src/display.c **** }
 542              		.loc 1 342 3 is_stmt 0 view .LVU167
 543              	.LBE200:
 544              	.LBE204:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 361 36 is_stmt 1 view .LVU168
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 361 13 view .LVU169
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 361 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 363:src/display.c **** 
 552              		.loc 1 363 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 363:src/display.c **** 
 554              		.loc 1 363 1 view .LVU172
 555              		.cfi_endproc
ARM GAS  /tmp/ccPv3rzq.s 			page 41


 556              	.LFE13:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
 568              	.LFB20:
1579:src/display.c **** 	decNumber n;
 569              		.loc 1 1579 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1580:src/display.c **** 
 573              		.loc 1 1580 2 view .LVU174
1582:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1582 2 view .LVU175
1579:src/display.c **** 	decNumber n;
 575              		.loc 1 1579 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1579:src/display.c **** 	decNumber n;
 584              		.loc 1 1579 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1582:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1582 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1582:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1582 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1579:src/display.c **** 	decNumber n;
 593              		.loc 1 1579 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1582:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1582 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1583 2 is_stmt 1 view .LVU182
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1583 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1584:src/display.c **** 	decNumberTrunc(res, &n);
ARM GAS  /tmp/ccPv3rzq.s 			page 42


 603              		.loc 1 1584 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1583 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1584:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1584 2 is_stmt 1 view .LVU186
 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
 611              	.LVL53:
1585:src/display.c ****       }
 612              		.loc 1 1585 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1586:src/display.c **** 
 617              		.loc 1 1586 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1586:src/display.c **** 
 624              		.loc 1 1586 7 view .LVU189
 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE20:
 631              		.section	.text.s_s_sized,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	s_s_sized:
 640              	.LVL56:
 641              	.LFB38:
1614:src/display.c **** 
1615:src/display.c **** 
1616:src/display.c ****       /* Display the number in H.MS mode.
1617:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1618:src/display.c ****        */
1619:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1620:src/display.c **** 	decNumber x, y, a, t, u;
1621:src/display.c **** 	int j=0;
1622:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1623:src/display.c **** 	unsigned int hr, min, sec, fs;
1624:src/display.c **** 
1625:src/display.c **** 	if (check_special_dn(rgx, res)) {
1626:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1627:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1628:src/display.c **** 	  return;
ARM GAS  /tmp/ccPv3rzq.s 			page 43


1629:src/display.c **** 	}
1630:src/display.c **** 
1631:src/display.c **** 	set_separator_decimal_modes();
1632:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1633:src/display.c **** 	dn_abs(&a, rgx);
1634:src/display.c **** 	if (decNumberIsNegative(&x)) {
1635:src/display.c **** 	  if (res != NULL)
1636:src/display.c **** 	    *res++ += '-';
1637:src/display.c **** 	  else
1638:src/display.c **** 	    SET_MANT_SIGN;
1639:src/display.c **** 	  dn_minus(&x, &x);
1640:src/display.c **** 	}
1641:src/display.c **** 
1642:src/display.c **** 	decNumberHR2HMS(&y, &x);
1643:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1644:src/display.c **** 	decNumberRound(&u, &t);
1645:src/display.c **** 
1646:src/display.c **** 	hms_step(&t, &u, &fs);
1647:src/display.c **** 	hms_step(&u, &t, &sec);
1648:src/display.c **** 	hms_step(&t, &u, &min);
1649:src/display.c **** 	hr = dn_to_int(&t);
1650:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1651:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1652:src/display.c **** 
1653:src/display.c **** 	// degrees
1654:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1655:src/display.c **** 	res = set_dig_s(j, '@', res);
1656:src/display.c **** 	j += SEGS_PER_DIGIT;
1657:src/display.c **** 
1658:src/display.c **** 	// minutes
1659:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1660:src/display.c **** 	res = set_dig_s(j, '\'', res);
1661:src/display.c **** 	j += SEGS_PER_DIGIT;
1662:src/display.c **** 
1663:src/display.c **** 	// seconds
1664:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1665:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1666:src/display.c **** 
1667:src/display.c **** 	// Fractional seconds
1668:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1669:src/display.c **** 
1670:src/display.c **** 	// We're now pointing at the exponent's first digit...
1671:src/display.c **** 	res = set_dig_s(j, '"', res);
1672:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1673:src/display.c **** 
1674:src/display.c **** 	// Check for values too big or small
1675:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1676:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1677:src/display.c **** 	} else if (! dn_eq0(&a)) {
1678:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1679:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1680:src/display.c **** 	  }
1681:src/display.c **** 	}
1682:src/display.c ****       }
1683:src/display.c **** 
1684:src/display.c **** 
1685:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
ARM GAS  /tmp/ccPv3rzq.s 			page 44


1686:src/display.c **** 	decNumber x, w, n, d, t;
1687:src/display.c **** 	char buf[32], *p = buf;
1688:src/display.c **** 	int j;
1689:src/display.c **** 
1690:src/display.c **** 	if (check_special_dn(rgx, res))
1691:src/display.c **** 	  return 1;
1692:src/display.c **** 	dn_abs(&x, rgx);
1693:src/display.c **** 	if (dn_ge(&x, &const_100000))
1694:src/display.c **** 	  return 0;
1695:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1696:src/display.c **** 	  return 0;
1697:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1698:src/display.c **** 	  if (res != NULL)
1699:src/display.c **** 	    *res++ += '-';
1700:src/display.c **** 	  else
1701:src/display.c **** 	    SET_MANT_SIGN;
1702:src/display.c **** 	}
1703:src/display.c **** 	decNumberFrac(&w, &x);
1704:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1705:src/display.c **** 
1706:src/display.c **** 	dn_divide(&t, &n, &d);
1707:src/display.c **** 	dn_compare(&t, &t, &w);
1708:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1709:src/display.c **** 
1710:src/display.c **** 	if (dn_eq(&n, &d)) {
1711:src/display.c **** 	  dn_inc(&w);
1712:src/display.c **** 	  decNumberZero(&n);
1713:src/display.c **** 	}
1714:src/display.c **** 
1715:src/display.c **** 	if (!UState.improperfrac) {
1716:src/display.c **** 	  if (!dn_eq0(&w)) {
1717:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1718:src/display.c **** 	    *p++ = ' ';
1719:src/display.c **** 	  }
1720:src/display.c **** 	} else {
1721:src/display.c **** 	  dn_multiply(&x, &w, &d);
1722:src/display.c **** 	  dn_add(&n, &n, &x);
1723:src/display.c **** 	}
1724:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1725:src/display.c **** 	*p++ = '/';
1726:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1727:src/display.c **** 	*p = '\0';
1728:src/display.c **** 	if ((p - 12) > buf) {
1729:src/display.c **** 	  p -= 12;
1730:src/display.c **** 	  *p = '<';
1731:src/display.c **** 	} else	p = buf;
1732:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
1734:src/display.c **** 	  j += SEGS_PER_DIGIT;
1735:src/display.c **** 	}
1736:src/display.c **** 
1737:src/display.c **** 	if (dn_eq0(&t))
1738:src/display.c **** 	  p = (char *)S7_fract_EQ;
1739:src/display.c **** 	else if (decNumberIsNegative(&t))
1740:src/display.c **** 	  p = (char *)S7_fract_LT;
1741:src/display.c **** 	else
1742:src/display.c **** 	  p = (char *)S7_fract_GT;
ARM GAS  /tmp/ccPv3rzq.s 			page 45


1743:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1744:src/display.c **** 	  res = set_dig_s(j, *p, res);
1745:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1746:src/display.c **** 	}
1747:src/display.c **** 	return 1;
1748:src/display.c ****       }
1749:src/display.c **** 
1750:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1751:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1752:src/display.c **** 	decNumber c;
1753:src/display.c **** 	int true_exp, x=0;
1754:src/display.c **** 	int min_pos_exp, max_neg_exp;
1755:src/display.c **** 
1756:src/display.c **** 	if ( mode != MODE_STD ) {
1757:src/display.c **** 	  min_pos_exp = 9;
1758:src/display.c **** 	  max_neg_exp = -5;
1759:src/display.c **** 	}
1760:src/display.c **** 	else {
1761:src/display.c **** 	  min_pos_exp = 12;
1762:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1763:src/display.c **** 	}
1764:src/display.c **** 
1765:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1766:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1767:src/display.c **** 
1768:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1769:src/display.c **** 	  x = *dd;
1770:src/display.c **** 	}
1771:src/display.c **** 
1772:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1773:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1774:src/display.c **** 	  *dd += -true_exp;
1775:src/display.c **** 	  return MODE_FIX;
1776:src/display.c **** 	}
1777:src/display.c **** 
1778:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1779:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1780:src/display.c **** 	}
1781:src/display.c **** 	else {
1782:src/display.c **** 	  return MODE_STD;
1783:src/display.c **** 	}
1784:src/display.c ****       }
1785:src/display.c **** #else
1786:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1787:src/display.c **** 	decNumber b, c;
1788:src/display.c **** 
1789:src/display.c **** 	dn_1(&b);
1790:src/display.c **** 	b.exponent -= UState.dispdigs;
1791:src/display.c **** 	dn_abs(&c, z);
1792:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1793:src/display.c **** 	  return MODE_FIX;
1794:src/display.c **** 	return MODE_STD;
1795:src/display.c ****       }
1796:src/display.c **** #endif
1797:src/display.c **** 
1798:src/display.c ****       /* SHOW display mode
1799:src/display.c ****        * in double precision show left or right part
ARM GAS  /tmp/ccPv3rzq.s 			page 46


1800:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1801:src/display.c ****        */
1802:src/display.c ****       static void show_x(char *x, int exp) {
1803:src/display.c **** 	const int dbl = is_dblmode();
1804:src/display.c **** 	char *p;
1805:src/display.c **** 	int i, j;
1806:src/display.c **** 	char *upper_str;
1807:src/display.c **** 	enum separator_modes separator_mode;
1808:src/display.c **** 	char decimal_mark;
1809:src/display.c **** 	char thousands_sep;
1810:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1811:src/display.c **** 	const int grouping = 0;
1812:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1813:src/display.c **** 	const int grouping = !UState.nothousands;
1814:src/display.c **** #else
1815:src/display.c **** 	const int grouping = 1;
1816:src/display.c **** #endif
1817:src/display.c **** 	int negative;
1818:src/display.c **** 
1819:src/display.c **** 	if (x[0] == '-') {
1820:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1821:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1822:src/display.c **** 
1823:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1824:src/display.c **** 	  xcopy(x, small_minus, 4);
1825:src/display.c **** 	  x += 4;
1826:src/display.c **** 	  negative = 4;
1827:src/display.c **** #else
1828:src/display.c **** 	  ++x;
1829:src/display.c **** 	  negative = 1;
1830:src/display.c **** #endif
1831:src/display.c **** 	}
1832:src/display.c **** 	else negative = 0;
1833:src/display.c **** 
1834:src/display.c **** 	p = find_char(x, '\0');
1835:src/display.c **** 	xset(p, '0', 34 - (p - x));
1836:src/display.c **** 
1837:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1838:src/display.c **** 	  separator_mode = SEP_COMMA;
1839:src/display.c **** 	  decimal_mark = '.';
1840:src/display.c **** 	  thousands_sep = ',';
1841:src/display.c **** 	}
1842:src/display.c **** 	else {
1843:src/display.c **** 	  separator_mode = SEP_DOT;
1844:src/display.c **** 	  decimal_mark = ',';
1845:src/display.c **** 	  thousands_sep = '.';
1846:src/display.c **** 	}
1847:src/display.c **** 
1848:src/display.c **** 	if (State2.window) { // right half in double precision mode
1849:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1850:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1851:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1852:src/display.c **** 
1853:src/display.c **** 	  upper_str = x + 3;
1854:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1855:src/display.c **** 	  if (grouping) {
1856:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
ARM GAS  /tmp/ccPv3rzq.s 			page 47


1857:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1858:src/display.c **** 	    x += 3 + 13 + 7;
1859:src/display.c **** 	  }
1860:src/display.c **** 	  else x += 3 + 13 + 6;
1861:src/display.c **** #else
1862:src/display.c **** 	  upper_str = x + 13;
1863:src/display.c **** 	  xset(upper_str, '.', 3);
1864:src/display.c **** 	  if (grouping) {
1865:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1866:src/display.c **** 	    upper_str[6] = thousands_sep;
1867:src/display.c **** 	    x += 13 + 3 + 7;
1868:src/display.c **** 	  }
1869:src/display.c **** 	  else x += 13 + 3 + 6;
1870:src/display.c **** #endif
1871:src/display.c **** 	  negative = 0;
1872:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1873:src/display.c **** 	}
1874:src/display.c **** 	else {
1875:src/display.c **** 	  upper_str = x;
1876:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1877:src/display.c **** 	  x[1] = decimal_mark;
1878:src/display.c **** 	  if (grouping) {
1879:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1880:src/display.c **** 	    x[5] = thousands_sep;
1881:src/display.c **** 	    x += 9;
1882:src/display.c **** 	  }
1883:src/display.c **** 	  else x += 8;
1884:src/display.c **** 	  if (dbl) {
1885:src/display.c **** 	    if (exp < 0) {
1886:src/display.c **** 	      x[9] = '-';
1887:src/display.c **** 	      exp = -exp;
1888:src/display.c **** 	    }
1889:src/display.c **** 	    else
1890:src/display.c **** 	      x[9] = ' ';
1891:src/display.c **** 	    j = exp / 1000;
1892:src/display.c **** 	    x[10] = '0' + j;
1893:src/display.c **** 	    exp -= 1000 * j;
1894:src/display.c **** 	  }
1895:src/display.c **** 	  else {
1896:src/display.c **** 	    x[9] = '\0';
1897:src/display.c **** 	    x[10] = '\0';
1898:src/display.c **** 	  }
1899:src/display.c **** 	  xcopy(x + 1, x, 11);
1900:src/display.c **** 	  *x = 0;
1901:src/display.c **** 	  set_exp(exp, 1, CNULL);
1902:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1903:src/display.c **** 	}
1904:src/display.c **** 	if (grouping) {
1905:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1906:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1907:src/display.c **** 	  }
1908:src/display.c **** 	}
1909:src/display.c **** 
1910:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1911:src/display.c **** 	  set_dig(j, x[i]);
1912:src/display.c **** 
1913:src/display.c **** 	*x = '\0';
ARM GAS  /tmp/ccPv3rzq.s 			page 48


1914:src/display.c **** 	set_status(upper_str - negative);
1915:src/display.c ****       }
1916:src/display.c **** 
1917:src/display.c **** 
1918:src/display.c ****       /* Display the X register in the numeric portion of the display.
1919:src/display.c ****        * We have to account for the various display modes and numbers of
1920:src/display.c ****        * digits.
1921:src/display.c ****        */
1922:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1923:src/display.c **** 	decNumber z;
1924:src/display.c **** 	int digits = DISPLAY_DIGITS;
1925:src/display.c **** 
1926:src/display.c **** 	if (dbl)
1927:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1928:src/display.c **** 	else
1929:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1930:src/display.c **** 	set_x_dn(&z, res, &digits);
1931:src/display.c ****       }
1932:src/display.c **** 
1933:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1934:src/display.c **** 	char x[50], *obp = x;
1935:src/display.c **** 	int odig = 0;
1936:src/display.c **** 	int show_exp = 0;
1937:src/display.c **** 	int j;
1938:src/display.c **** 	char mantissa[64];
1939:src/display.c **** 	int exp = 0;
1940:src/display.c **** 	char *p = mantissa;
1941:src/display.c **** 	char *r;
1942:src/display.c **** 	const char *q;
1943:src/display.c **** 	int count, i;
1944:src/display.c **** 	int extra_digits = 0;
1945:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1946:src/display.c **** 	int dd;
1947:src/display.c **** 	int dispdigs;
1948:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1949:src/display.c **** #else
1950:src/display.c **** 	int dd = UState.dispdigs;
1951:src/display.c **** 	int mode = UState.dispmode;
1952:src/display.c **** #endif
1953:src/display.c **** 	int c;
1954:src/display.c **** 	int negative = 0;
1955:src/display.c **** 	int trimzeros = 0;
1956:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1957:src/display.c **** 	const int show_large_exponent = 0;
1958:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1959:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1960:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1961:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1962:src/display.c **** #else
1963:src/display.c **** 	const int show_large_exponent = 1;
1964:src/display.c **** #endif
1965:src/display.c **** 
1966:src/display.c **** 	set_separator_decimal_modes();
1967:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1968:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1969:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1970:src/display.c **** 	    if (State2.hms) {
ARM GAS  /tmp/ccPv3rzq.s 			page 49


1971:src/display.c **** 	      set_x_hms(z, res);
1972:src/display.c **** 	      return;
1973:src/display.c **** 	    }
1974:src/display.c **** 	    else if (UState.fract) {
1975:src/display.c **** 	      if (set_x_fract(z, res))
1976:src/display.c **** 		return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	  }
1979:src/display.c **** 	}		
1980:src/display.c **** #else
1981:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1982:src/display.c **** 	  if (State2.hms) {
1983:src/display.c **** 	    set_x_hms(z, res);
1984:src/display.c **** 	    State2.hms = 0;
1985:src/display.c **** 	    return;
1986:src/display.c **** 	  } else if (UState.fract) {
1987:src/display.c **** 	    if (set_x_fract(z, res))
1988:src/display.c **** 	      return;
1989:src/display.c **** 	  }
1990:src/display.c **** 	}
1991:src/display.c **** #endif
1992:src/display.c **** 
1993:src/display.c **** 	if (check_special_dn(z, res))
1994:src/display.c **** 	  return;
1995:src/display.c **** 
1996:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1997:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1998:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1999:src/display.c **** 	  z->exponent = 0;
2000:src/display.c **** 	}
2001:src/display.c **** 
2002:src/display.c **** 	xset(x, '\0', sizeof(x));
2003:src/display.c **** 
2004:src/display.c **** 	if (dn_eq0(z)) {
2005:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2006:src/display.c **** 	    x[0] = '-';
2007:src/display.c **** 	    x[1] = '0';
2008:src/display.c **** 	  } else
2009:src/display.c **** 	    x[0] = '0';
2010:src/display.c **** 	} else
2011:src/display.c **** 	  decNumberToString(z, x);
2012:src/display.c **** 
2013:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2014:src/display.c **** 	  show_x(x, exp);
2015:src/display.c **** 	  return;
2016:src/display.c **** 	}
2017:src/display.c **** 
2018:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2019:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2020:src/display.c **** 	  //  ALL mode: fill the display
2021:src/display.c **** 	  dd = *display_digits - 1;
2022:src/display.c **** 	else
2023:src/display.c **** 	  dd = dispdigs;
2024:src/display.c **** 
2025:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2026:src/display.c **** 	  int orig_mode = mode;
2027:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 50


2028:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2029:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2030:src/display.c **** 	    // allow zeros to be trimmed
2031:src/display.c **** 	    trimzeros = 1;
2032:src/display.c **** 	  if (orig_mode == MODE_STD)
2033:src/display.c **** 	    dd = *display_digits - 1;
2034:src/display.c ****  	}
2035:src/display.c **** #else
2036:src/display.c **** 	if (mode == MODE_STD) {
2037:src/display.c **** 	  mode = std_round_fix(z);
2038:src/display.c **** 	  trimzeros = 1;
2039:src/display.c **** 	  dd = *display_digits - 1;
2040:src/display.c **** 	} else if (dd >= *display_digits)
2041:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2042:src/display.c **** 	  dd = *display_digits - 1;
2043:src/display.c **** #endif
2044:src/display.c **** 
2045:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2046:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2047:src/display.c **** 
2048:src/display.c **** 	q = find_char(x, 'E');
2049:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2050:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2051:src/display.c **** 	if (q == NULL) exp = 0;
2052:src/display.c **** 	else {
2053:src/display.c **** 	  exp = s_to_i(q+1);
2054:src/display.c **** 	  if (*q == 'D') exp = -exp;
2055:src/display.c **** 	}
2056:src/display.c **** #else
2057:src/display.c **** 	if (q == NULL) exp = 0;
2058:src/display.c **** 	else exp = s_to_i(q+1);
2059:src/display.c **** #endif
2060:src/display.c **** 
2061:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2062:src/display.c **** 	for (q=x; *q == ' '; q++);
2063:src/display.c **** 	if (!res) {
2064:src/display.c **** 	  CLR_EXP_SIGN;
2065:src/display.c **** 	  CLR_MANT_SIGN;
2066:src/display.c **** 	}
2067:src/display.c **** 	if (*q == '-') {
2068:src/display.c **** 	  negative = 1;
2069:src/display.c **** 	  q++;
2070:src/display.c **** 	} else if (*q == '+')
2071:src/display.c **** 	  q++;
2072:src/display.c **** 	for (; *q == '0'; q++);
2073:src/display.c **** 	if (*q == '.') {
2074:src/display.c **** 	  do
2075:src/display.c **** 	    exp--;
2076:src/display.c **** 	  while (*++q == '0');
2077:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2078:src/display.c **** 	    *p++ = *q++;
2079:src/display.c **** 	} else {
2080:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2081:src/display.c **** 	    *p++ = *q++;
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2083:src/display.c **** 	    *p++ = *q++;
2084:src/display.c **** 	    exp++;
ARM GAS  /tmp/ccPv3rzq.s 			page 51


2085:src/display.c **** 	  }
2086:src/display.c **** 	  if (*q == '.') {
2087:src/display.c **** 	    q++;
2088:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2089:src/display.c **** 	      *p++ = *q++;
2090:src/display.c **** 	  }
2091:src/display.c **** 	}
2092:src/display.c **** 
2093:src/display.c **** 	if (mode == MODE_FIX) {
2094:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2095:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2096:src/display.c **** 	  else {
2097:src/display.c **** 	    extra_digits = exp;
2098:src/display.c **** 	    /* We might have push the fixed decimals off the
2099:src/display.c **** 	     * screen so adjust if so.
2100:src/display.c **** 	     */
2101:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2102:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2103:src/display.c **** 	  }
2104:src/display.c **** 	}
2105:src/display.c **** 
2106:src/display.c **** 	// Round the mantissa to the number of digits desired
2107:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2108:src/display.c **** 	if (*p >= '5') {	// Round up
2109:src/display.c **** 	  *p = '0';
2110:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2111:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2112:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2113:src/display.c **** 	    mantissa[0] = '1';
2114:src/display.c **** 	    exp++;
2115:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2116:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2117:src/display.c **** 	      extra_digits = 0;
2118:src/display.c **** 	    }
2119:src/display.c **** 	  } else {
2120:src/display.c **** 	    while (*--p == '9')
2121:src/display.c **** 	      *p = '0';
2122:src/display.c **** 	    (*p)++;
2123:src/display.c **** 	  }
2124:src/display.c **** 	}
2125:src/display.c **** 
2126:src/display.c **** 	// Zap what is left
2127:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2128:src/display.c **** 
2129:src/display.c **** 	p = mantissa;
2130:src/display.c **** 	switch (mode) {
2131:src/display.c **** 	default:
2132:src/display.c **** 	case MODE_STD:   
2133:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2134:src/display.c **** 	  if (count != *display_digits)
2135:src/display.c **** 	    count++;
2136:src/display.c **** 	  // Too big or too small to fit on display
2137:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2138:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2139:src/display.c **** 	    case -1:
2140:src/display.c **** 	    case 2:
2141:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccPv3rzq.s 			page 52


2142:src/display.c **** 	      odig++;
2143:src/display.c **** 	      dd--;
2144:src/display.c **** 	      exp--;
2145:src/display.c **** 	    case -2:
2146:src/display.c **** 	    case 1:
2147:src/display.c **** 	      *obp++ = *p++;
2148:src/display.c **** 	      odig++;
2149:src/display.c **** 	      dd--;
2150:src/display.c **** 	      exp--;
2151:src/display.c **** 	    case 0:
2152:src/display.c **** 	      ;
2153:src/display.c **** 	    };
2154:src/display.c **** 	    *obp++ = *p++;
2155:src/display.c **** 	    odig++;
2156:src/display.c **** 	    *obp++ = '.';
2157:src/display.c **** 	    for (i=1; i<count; i++) {
2158:src/display.c **** 	      *obp++ = *p++;
2159:src/display.c **** 	      odig++;
2160:src/display.c **** 	    }
2161:src/display.c **** 	    show_exp = 1;
2162:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2163:src/display.c **** 	    for(i=0; i<=exp; i++) {
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2165:src/display.c **** 		*obp++ = ',';
2166:src/display.c **** 	      *obp++ = *p++;
2167:src/display.c **** 	      odig++;
2168:src/display.c **** 	    }
2169:src/display.c **** 	    *obp++ = '.';
2170:src/display.c **** 	    if (count > (exp + 1)) {
2171:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2172:src/display.c **** 		*obp++ = *p++;
2173:src/display.c **** 		odig++;
2174:src/display.c **** 	      }
2175:src/display.c **** 	    }
2176:src/display.c **** 	  } else {		// All digits to right of decimal point
2177:src/display.c **** 	    *obp++ = '0';
2178:src/display.c **** 	    odig++;
2179:src/display.c **** 	    *obp++ = '.';
2180:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2181:src/display.c **** 	      *obp++ = '0';
2182:src/display.c **** 	      odig++;
2183:src/display.c **** 	    }
2184:src/display.c **** 	    for (i=0; i<count; i++) {
2185:src/display.c **** 	      *obp++ = *p++;
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	  }
2189:src/display.c **** 	  break;
2190:src/display.c **** 
2191:src/display.c **** 	case MODE_FIX:
2192:src/display.c **** 	  j = 0;
2193:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2194:src/display.c **** 	    for (i=0; i<=exp; i++) {
2195:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2196:src/display.c **** 		*obp++ = ',';
2197:src/display.c **** 	      *obp++ = *p++;
2198:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccPv3rzq.s 			page 53


2199:src/display.c **** 	    }
2200:src/display.c **** 	    *obp++ = '.';
2201:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2202:src/display.c **** 	      *obp++ = *p++;
2203:src/display.c **** 	      odig++;
2204:src/display.c **** 	    }
2205:src/display.c **** 	  } else {		// All digits to right of decimal point
2206:src/display.c **** 	    *obp++ = '0';
2207:src/display.c **** 	    odig++;
2208:src/display.c **** 	    *obp++ = '.';
2209:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2210:src/display.c **** 	      *obp++ = '0';
2211:src/display.c **** 	      odig++;
2212:src/display.c **** 	      dd--;
2213:src/display.c **** 	    }
2214:src/display.c **** 	    while (dd-- > 0) {
2215:src/display.c **** 	      *obp++ = *p++;
2216:src/display.c **** 	      odig++;
2217:src/display.c **** 	    }
2218:src/display.c **** 	  }
2219:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2220:src/display.c **** 	  if (trimzeros)
2221:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2222:src/display.c **** 	      obp--;
2223:src/display.c **** 	      odig--;
2224:src/display.c **** 	    }
2225:src/display.c **** #endif			
2226:src/display.c **** 	  break;
2227:src/display.c **** 
2228:src/display.c **** 	case MODE_ENG:
2229:src/display.c **** 	  switch (exp % 3) {
2230:src/display.c **** 	  case -1:
2231:src/display.c **** 	  case 2:
2232:src/display.c **** 	    *obp++ = *p++;
2233:src/display.c **** 	    odig++;
2234:src/display.c **** 	    dd--;
2235:src/display.c **** 	    exp--;
2236:src/display.c **** 	  case -2:
2237:src/display.c **** 	  case 1:
2238:src/display.c **** 	    *obp++ = *p++;
2239:src/display.c **** 	    odig++;
2240:src/display.c **** 	    dd--;
2241:src/display.c **** 	    exp--;
2242:src/display.c **** 	  case 0:
2243:src/display.c **** 	    ;
2244:src/display.c **** 	  };
2245:src/display.c **** 	  // Falling through
2246:src/display.c **** 
2247:src/display.c **** 	case MODE_SCI:
2248:src/display.c **** 	  *obp++ = *p++;
2249:src/display.c **** 	  odig++;
2250:src/display.c **** 	  *obp++ = '.';
2251:src/display.c **** 	  dd--;
2252:src/display.c **** 	  while (dd-- >= 0) {
2253:src/display.c **** 	    *obp++ = *p++;
2254:src/display.c **** 	    odig++;
2255:src/display.c **** 	  }
ARM GAS  /tmp/ccPv3rzq.s 			page 54


2256:src/display.c **** 	  show_exp = 1;
2257:src/display.c **** 	}
2258:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2259:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2260:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2261:src/display.c **** 	    obp--;
2262:src/display.c **** 	    odig--;
2263:src/display.c **** 	  }
2264:src/display.c **** #endif	
2265:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2266:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2267:src/display.c **** 	  set_x_dn(z, res, display_digits);
2268:src/display.c **** 	  return;
2269:src/display.c **** 	}
2270:src/display.c **** 	/* Finally, send the output to the display */
2271:src/display.c **** 	*obp = '\0';
2272:src/display.c **** 	if (odig > *display_digits)
2273:src/display.c **** 	  odig = *display_digits;
2274:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2275:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2276:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2277:src/display.c **** 	if (negative) {
2278:src/display.c **** 	  if (res) *res++ = '-';
2279:src/display.c **** 	  else {
2280:src/display.c **** 	    if (j == 0)
2281:src/display.c **** 	      SET_MANT_SIGN;
2282:src/display.c **** 	    else
2283:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2284:src/display.c **** 	  }
2285:src/display.c **** 	}
2286:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2287:src/display.c **** 	  if (c == '.') {
2288:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2289:src/display.c **** 	  } else if (c == ',') {
2290:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2291:src/display.c **** 	  } else {
2292:src/display.c **** 	    res = set_dig_s(j, c, res);
2293:src/display.c **** 	    j += SEGS_PER_DIGIT;
2294:src/display.c **** 	  }
2295:src/display.c **** 	}
2296:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2297:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2298:src/display.c **** 	  if ( !res ) {
2299:src/display.c **** 	    set_exp(exp, 4, res);
2300:src/display.c **** 	  }
2301:src/display.c **** 	  else {
2302:src/display.c **** 	    set_exp(exp, 0, res);
2303:src/display.c **** 	  }
2304:src/display.c **** 	}
2305:src/display.c **** #else
2306:src/display.c **** 	if (show_exp)
2307:src/display.c **** 	  set_exp(exp, 0, res);
2308:src/display.c **** #endif
2309:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2310:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2311:src/display.c **** 	*display_digits = odig;
2312:src/display.c ****       }
ARM GAS  /tmp/ccPv3rzq.s 			page 55


2313:src/display.c **** 
2314:src/display.c **** #if defined(QTGUI) || defined(IOS)
2315:src/display.c ****       void format_display(char *buf) {
2316:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2317:src/display.c **** 	  {
2318:src/display.c **** 	    const char *p = get_cmdline();
2319:src/display.c **** 	    if (p == NULL) {
2320:src/display.c **** 	      format_reg(regX_idx, buf);
2321:src/display.c **** 	    } else {
2322:src/display.c **** 	      scopy(buf, p);
2323:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2324:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2325:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2326:src/display.c **** 		buf[CmdLineEex] = 'E';
2327:src/display.c **** 		buf[CmdLineEex+1] = '-';
2328:src/display.c **** 	      }
2329:src/display.c **** #  endif
2330:src/display.c **** 	    }
2331:src/display.c **** 	  }
2332:src/display.c **** 	else {
2333:src/display.c **** 	  buf[0]=0;
2334:src/display.c **** 	}
2335:src/display.c ****       }
2336:src/display.c **** #endif
2337:src/display.c **** 
2338:src/display.c ****       void format_reg(int index, char *buf) {
2339:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2340:src/display.c **** 
2341:src/display.c **** 	if (is_intmode())
2342:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2343:src/display.c **** #ifndef HP16C_MODE_CHANGE
2344:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2345:src/display.c **** 	  decNumber x;
2346:src/display.c **** 	  int s;
2347:src/display.c **** 	  unsigned long long int v;
2348:src/display.c **** 
2349:src/display.c **** 	  getRegister(&x, index);
2350:src/display.c **** 	  v = dn_to_ull(&x, &s);
2351:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2352:src/display.c **** 	}
2353:src/display.c **** #endif
2354:src/display.c **** 	else
2355:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2356:src/display.c ****       }
2357:src/display.c **** 
2358:src/display.c ****       /* Display the status screen */
2359:src/display.c ****       static void show_status(void) {
2360:src/display.c **** 	int i, n;
2361:src/display.c **** 	int j = SEGS_EXP_BASE;
2362:src/display.c **** 	const int status = State2.status - 3;
2363:src/display.c **** 	char buf[16], *p = buf;
2364:src/display.c **** 	unsigned int pc;
2365:src/display.c **** 
2366:src/display.c **** 	if (status == -2) {
2367:src/display.c **** 	  set_status("Free:");
2368:src/display.c **** 	  p = num_arg(buf, free_mem());
2369:src/display.c **** 	  p = scopy(p, " , FL. ");
ARM GAS  /tmp/ccPv3rzq.s 			page 56


2370:src/display.c **** 	  p = num_arg(p, free_flash());
2371:src/display.c **** 	  *p = '\0';
2372:src/display.c **** 	  set_digits_string(buf, 0);
2373:src/display.c **** 	}
2374:src/display.c **** 	else if (status == -1) {
2375:src/display.c **** 	  /* Top line */
2376:src/display.c **** 	  p = scopy(buf, "Regs:");
2377:src/display.c **** 	  if (SizeStatRegs)
2378:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2379:src/display.c **** 	  *p = '\0';
2380:src/display.c **** 	  set_status(buf);
2381:src/display.c **** 
2382:src/display.c **** 	  /* Bottom line */
2383:src/display.c **** 	  p = num_arg(buf, global_regs());
2384:src/display.c **** 	  if (LocalRegs < 0) {
2385:src/display.c **** 	    p = scopy(p, " , Loc. ");
2386:src/display.c **** 	    p = num_arg(p, local_regs());
2387:src/display.c **** 	  }
2388:src/display.c **** 	  *p = '\0';
2389:src/display.c **** 	  set_digits_string(buf, 0);
2390:src/display.c **** 	} else {
2391:src/display.c **** 	  int base;
2392:src/display.c **** 	  int end;
2393:src/display.c **** 	  int group = 10;
2394:src/display.c **** 	  int start = 0;
2395:src/display.c **** 		
2396:src/display.c **** 	  if (status <= 9) {
2397:src/display.c **** 	    base = 10 * status;
2398:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2399:src/display.c **** 	    p = scopy(buf, "FL ");
2400:src/display.c **** 	    p = num_arg_0(p, base, 2);
2401:src/display.c **** 	    *p++ = '-';
2402:src/display.c **** 	    p = num_arg_0(p, end, 2);
2403:src/display.c **** 	    *p = '\0';
2404:src/display.c **** 	    set_status(buf);
2405:src/display.c **** 	  }
2406:src/display.c **** 	  else if (status == 10) {
2407:src/display.c **** 	    base = regX_idx;
2408:src/display.c **** 	    end = regK_idx;
2409:src/display.c **** 	    start = 3;
2410:src/display.c **** 	    group = 4;
2411:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2412:src/display.c **** 	  }
2413:src/display.c **** 	  else { // status == 11
2414:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2415:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2416:src/display.c **** 	    set_status("FL.00-.15");
2417:src/display.c **** 	  }
2418:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2419:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2420:src/display.c **** 	  j += SEGS_PER_DIGIT;
2421:src/display.c **** 	  for (i = start; i < group + start; i++) {
2422:src/display.c **** 	    int k = i + base - start;
2423:src/display.c **** 	    int l = get_user_flag(k);
2424:src/display.c **** 	    k += group;
2425:src/display.c **** 	    if (end >= k) {
2426:src/display.c **** 	      l |= (get_user_flag(k) << 1);
ARM GAS  /tmp/ccPv3rzq.s 			page 57


2427:src/display.c **** 	      k += group;
2428:src/display.c **** 	      if (end >= k)
2429:src/display.c **** 		l |= (get_user_flag(k) << 2);
2430:src/display.c **** 	    }
2431:src/display.c **** 	    set_dig(j, l);
2432:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2433:src/display.c **** 	    j += SEGS_PER_DIGIT;
2434:src/display.c **** 	    if (i == 4) {
2435:src/display.c **** 	      set_dig(j, 8);
2436:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	      j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    }
2439:src/display.c **** 	  }
2440:src/display.c **** 	}
2441:src/display.c **** 
2442:src/display.c **** 	j = SEGS_EXP_BASE;
2443:src/display.c **** 	pc = state_pc();
2444:src/display.c **** 	if (isXROM(pc))
2445:src/display.c **** 	  pc = 1;
2446:src/display.c **** 	for (n=i=0; i<4; i++) {
2447:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2448:src/display.c **** 	    if (++n == 4) {
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2451:src/display.c **** 	    } else {
2452:src/display.c **** 	      set_dig(j, 'A'+i);
2453:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2454:src/display.c **** 	    }
2455:src/display.c **** 	  }
2456:src/display.c **** 	}
2457:src/display.c ****       }
2458:src/display.c **** 
2459:src/display.c **** 
2460:src/display.c ****       /* Display the list of alpha labels */
2461:src/display.c ****       static void show_label(void) {
2462:src/display.c **** 	char buf[16];
2463:src/display.c **** 	unsigned short int pc = State2.digval;
2464:src/display.c **** 	unsigned int op = getprog(pc);
2465:src/display.c **** 	int n = nLIB(pc);
2466:src/display.c **** 	unsigned short int lblpc;
2467:src/display.c **** 
2468:src/display.c **** 	set_status(prt((opcode)op, buf));
2469:src/display.c **** 	set_digits_string(libname[n], 0);
2470:src/display.c **** 
2471:src/display.c **** 	if (op & OP_DBL) {
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2473:src/display.c **** 	  if (lblpc != pc) {
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2475:src/display.c **** 	    n = nLIB(lblpc);
2476:src/display.c **** 	    if (n == REGION_RAM)
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2478:src/display.c **** 	    else {
2479:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2480:src/display.c **** 	    }
2481:src/display.c **** 	  }
2482:src/display.c **** 	}
2483:src/display.c ****       }
ARM GAS  /tmp/ccPv3rzq.s 			page 58


2484:src/display.c **** 
2485:src/display.c ****       /* Display a list of register contents */
2486:src/display.c ****       static void show_registers(void) {
2487:src/display.c **** 	char buf[16], *bp;
2488:src/display.c **** 	int n = State2.digval;
2489:src/display.c **** 	
2490:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2491:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2492:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2493:src/display.c **** 	  n;
2494:src/display.c **** #else
2495:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2496:src/display.c **** 	  n;
2497:src/display.c **** #endif
2498:src/display.c **** 
2499:src/display.c **** 	if (State2.disp_as_alpha) {
2500:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2501:src/display.c **** 	}
2502:src/display.c **** 	else {
2503:src/display.c **** 	  xset(buf, '\0', 16);
2504:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2505:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2506:src/display.c **** #else
2507:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2508:src/display.c **** #endif
2509:src/display.c **** 	  if (State2.local) {
2510:src/display.c **** 	    *bp++ = '.';
2511:src/display.c **** 	    if (n >= 100) {
2512:src/display.c **** 	      *bp++ = '1';
2513:src/display.c **** 	      n -= 100;
2514:src/display.c **** 	    }
2515:src/display.c **** 	  }
2516:src/display.c **** 	  if (n < 100)
2517:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2518:src/display.c **** 	  else
2519:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2520:src/display.c **** 	  set_status(buf);
2521:src/display.c **** 	}
2522:src/display.c **** 	format_reg(reg, CNULL);
2523:src/display.c ****       }
2524:src/display.c **** 
2525:src/display.c **** 
2526:src/display.c ****       static void set_annunciators(void)
2527:src/display.c ****       {
2528:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2529:src/display.c **** 
2530:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2531:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2532:src/display.c **** 	 * browsing constants.
2533:src/display.c **** 	 */
2534:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2535:src/display.c **** 	//	dot(BEG, UState.stack_depth && ! Running);
2536:src/display.c **** 	draw_dot(BEG);
2537:src/display.c **** #else
2538:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2539:src/display.c **** #endif
2540:src/display.c **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccPv3rzq.s 			page 59


2541:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2542:src/display.c **** #endif
2543:src/display.c **** 
2544:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2545:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2546:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2547:src/display.c **** 	//	set_IO_annunciator();
2548:src/display.c **** 
2549:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2550:src/display.c **** 	 */
2551:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2552:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2553:src/display.c ****       }
2554:src/display.c **** 
2555:src/display.c **** 
2556:src/display.c ****       /*
2557:src/display.c ****        *  Toggle the little "=" sign
2558:src/display.c ****        */
2559:src/display.c **** /*       void set_IO_annunciator(void) { */
2560:src/display.c **** /* #ifndef DM42 */
2561:src/display.c **** /* 	int on = SerialOn */
2562:src/display.c **** /* #endif */
2563:src/display.c **** /* #ifdef DM42 */
2564:src/display.c **** /* 	  int on = 0 */
2565:src/display.c **** /* #endif */
2566:src/display.c **** /* #ifdef REALBUILD */
2567:src/display.c **** /* 	  || DebugFlag */
2568:src/display.c **** /* #endif */
2569:src/display.c **** /* #ifdef INFRARED */
2570:src/display.c **** /* 	  || PrinterColumn != 0 */
2571:src/display.c **** /* #endif */
2572:src/display.c **** /* 	  ; */
2573:src/display.c **** 
2574:src/display.c **** /* 	if (on != IoAnnunciator) { */
2575:src/display.c **** /* 	  dot(LIT_EQ, on); */
2576:src/display.c **** /* 	  IoAnnunciator = on; */
2577:src/display.c **** /* 	  finish_display(); //LIT_EQ */
2578:src/display.c **** /* 	} */
2579:src/display.c **** /*       } */
2580:src/display.c **** 
2581:src/display.c **** #ifdef TOP_ROW
2582:src/display.c ****       /*
2583:src/display.c ****        *  Update the display
2584:src/display.c ****        */
2585:src/display.c ****       void display(void) {
2586:src/display.c **** 	int i, j;
2587:src/display.c **** 	char buf[40], *bp = buf;
2588:src/display.c **** 	const char *p;
2589:src/display.c **** 	int annuc = 0;
2590:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2591:src/display.c **** 	int skip = 0;
2592:src/display.c **** 	int x_disp = 0;
2593:src/display.c **** 	const int shift = cur_shift();
2594:src/display.c **** 
2595:src/display.c **** 	no_status_top = 0;
2596:src/display.c **** 	if (State2.disp_freeze) {
2597:src/display.c **** 	  State2.disp_freeze = 0;
ARM GAS  /tmp/ccPv3rzq.s 			page 60


2598:src/display.c **** 	  State2.disp_temp = 1;
2599:src/display.c **** #ifdef CONSOLE
2600:src/display.c **** 	  JustDisplayed = 1;
2601:src/display.c **** #endif
2602:src/display.c **** 	  ShowRPN = 0;
2603:src/display.c **** 	  return;
2604:src/display.c **** 	}
2605:src/display.c **** 
2606:src/display.c **** 	if (WasDataEntry) {
2607:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2608:src/display.c **** 
2609:src/display.c **** 	  // Erase 7-segment display
2610:src/display.c **** 	  //	  for (i = 0; i <= EXP_SIGN; ++i) {
2611:src/display.c **** 	  //	    clr_dot(i);
2612:src/display.c **** 	  //	  }
2613:src/display.c **** 	  reset_7_segment();
2614:src/display.c **** 	  goto only_update_x;
2615:src/display.c **** 	}
2616:src/display.c **** #ifdef INCLUDE_YREG_CODE
2617:src/display.c **** #  ifdef YREG_ALWAYS_ON
2618:src/display.c **** 	const int yreg_enabled = 1;
2619:src/display.c **** #  else
2620:src/display.c **** 	const int yreg_enabled = UState.show_y;
2621:src/display.c **** #  endif
2622:src/display.c **** #else
2623:src/display.c **** 	const int yreg_enabled = 0;
2624:src/display.c **** #endif
2625:src/display.c **** 	// Clear display
2626:src/display.c **** 	reset_disp();
2627:src/display.c **** 
2628:src/display.c **** 	
2629:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2630:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2631:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2632:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2633:src/display.c **** 	/*   set_status(buf); */
2634:src/display.c **** 	/* } */
2635:src/display.c **** 	if (State2.version) {
2636:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2637:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2638:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2639:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2640:src/display.c **** 	  set_status(vers);
2641:src/display.c **** 	  skip = 1;
2642:src/display.c **** 	  goto nostk;
2643:src/display.c **** 	} else if (State2.confirm) {
2644:src/display.c **** 	  if (yreg_enabled) {
2645:src/display.c **** 	    set_status_top(S_SURE);
2646:src/display.c **** 	    no_status_top = 1;
2647:src/display.c **** 	    annuc = 1;
2648:src/display.c **** 	  }
2649:src/display.c **** 	  else {
2650:src/display.c **** 	    set_status(S_SURE);
2651:src/display.c **** 	  }
2652:src/display.c **** 	} else if (State2.hyp) {
2653:src/display.c **** 	  bp = scopy(bp, "HYP");
2654:src/display.c **** 	  if (! State2.dot)
ARM GAS  /tmp/ccPv3rzq.s 			page 61


2655:src/display.c **** 	    *bp++ = '\235';
2656:src/display.c **** 	  if (yreg_enabled) {
2657:src/display.c **** 	    set_status_top(buf);
2658:src/display.c **** 	    no_status_top = 1;
2659:src/display.c **** 	    annuc = 1;
2660:src/display.c **** 	  }
2661:src/display.c **** 	  else {
2662:src/display.c **** 	    set_status(buf);
2663:src/display.c **** 	  }
2664:src/display.c **** 	} else if (State2.gtodot) {
2665:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2666:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2667:src/display.c **** 	  if (State2.numdigit > 0)
2668:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2669:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2670:src/display.c **** 	  *bp++ = '_';
2671:src/display.c **** 	  if (yreg_enabled) {
2672:src/display.c **** 	    set_status_top(buf);
2673:src/display.c **** 	    no_status_top = 1;
2674:src/display.c **** 	    annuc = 1;
2675:src/display.c **** 	  }
2676:src/display.c **** 	  else {
2677:src/display.c **** 	    set_status(buf);
2678:src/display.c **** 	  }
2679:src/display.c **** 	} else if (State2.rarg) {
2680:src/display.c **** 	  /* Commands with arguments */
2681:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2682:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2683:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2684:src/display.c **** #endif
2685:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2686:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2687:src/display.c **** 	  if (State2.dot) {
2688:src/display.c **** 	    *bp++ = 's';
2689:src/display.c **** 	    *bp++ = '_';
2690:src/display.c **** 	  } else if (shift == SHIFT_F) {
2691:src/display.c **** 	    *bp++ = '\021';
2692:src/display.c **** 	    *bp++ = '_';
2693:src/display.c **** 	  } else {
2694:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2695:src/display.c **** 	       : State2.ind ? 2 
2696:src/display.c **** 	       : num_arg_digits(CmdBase); */
2697:src/display.c **** 	    if (State2.local)
2698:src/display.c **** 	      *bp++ = '.';
2699:src/display.c **** 	    if (State2.numdigit > 0) {
2700:src/display.c **** 	      if (State2.shuffle)
2701:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2702:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2703:src/display.c **** 	      else
2704:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2705:src/display.c **** 	    }
2706:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2707:src/display.c **** 	    *bp++ = '_';
2708:src/display.c **** 	  }
2709:src/display.c **** 	  if (yreg_enabled) {
2710:src/display.c **** 	    set_status_top(buf);
2711:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccPv3rzq.s 			page 62


2712:src/display.c **** 	    annuc = 1;
2713:src/display.c **** 	  }
2714:src/display.c **** 	  else {
2715:src/display.c **** 	    set_status(buf);
2716:src/display.c **** 	  }
2717:src/display.c **** 	} else if (State2.test != TST_NONE) {
2718:src/display.c **** 	  *bp++ = 'x';
2719:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2720:src/display.c **** 	  *bp++ = '_';
2721:src/display.c **** 	  *bp++ = '?';
2722:src/display.c **** 	  if (yreg_enabled) {
2723:src/display.c **** 	    set_status_top(buf);
2724:src/display.c **** 	    no_status_top = 1;
2725:src/display.c **** 	    annuc = 1;
2726:src/display.c **** 	  }
2727:src/display.c **** 	  else {
2728:src/display.c **** 	    set_status(buf);
2729:src/display.c **** 	  }
2730:src/display.c **** 	} else if (cata) {
2731:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2732:src/display.c **** 	  char b2[16];
2733:src/display.c **** 	  const char *p;
2734:src/display.c **** 
2735:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2736:src/display.c **** 	  p = catcmd(op, b2);
2737:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2738:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2739:src/display.c **** 	  bp = scopy(bp, p);
2740:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2741:src/display.c **** 	    // State2.disp_small = 1;
2742:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2743:src/display.c **** 	      set_digits_string("0 to 255", 0);
2744:src/display.c **** 	    else
2745:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2746:src/display.c **** 	    skip = 1;
2747:src/display.c **** 	  } else if (State2.runmode) {
2748:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2749:src/display.c **** 	      decNumber x, r;
2750:src/display.c **** 	      decimal64 z;
2751:src/display.c **** 
2752:src/display.c **** 	      getX(&x);
2753:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2754:src/display.c **** 		const unsigned int f = argKIND(op);
2755:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2756:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2757:src/display.c **** 		  update_speed(0);
2758:src/display.c **** 		  fp(&r, &x);
2759:src/display.c **** 		}
2760:src/display.c **** 		else
2761:src/display.c **** 		  set_NaN(&r);
2762:src/display.c **** 	      } else
2763:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2764:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2765:src/display.c **** 	      packed_from_number(&z, &r);
2766:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2767:src/display.c **** 	      skip = 1;
2768:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
ARM GAS  /tmp/ccPv3rzq.s 			page 63


2769:src/display.c **** 	      REGISTER z, *const x = StackBase;
2770:src/display.c **** 	      copyreg(&z, x);
2771:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2772:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2773:src/display.c **** 	      copyreg(x, &z);
2774:src/display.c **** 	      skip = 1;
2775:src/display.c **** 	    }
2776:src/display.c **** 	  }
2777:src/display.c **** 	  if (yreg_enabled) {
2778:src/display.c **** 	    set_status_top(buf);
2779:src/display.c **** 	    no_status_top = 1;
2780:src/display.c **** 	    annuc = 1;
2781:src/display.c **** 	  }
2782:src/display.c **** 	  else {
2783:src/display.c **** 	    set_status(buf);
2784:src/display.c **** 	  }
2785:src/display.c **** 	} else if (State2.multi) {
2786:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2787:src/display.c **** 	  if (State2.numdigit > 0) {
2788:src/display.c **** 	    *bp++ = (char) State2.digval;
2789:src/display.c **** 	    if (State2.numdigit > 1)
2790:src/display.c **** 	      *bp++ = State2.digval2;
2791:src/display.c **** 	  }
2792:src/display.c **** 	  if (yreg_enabled) {
2793:src/display.c **** 	    set_status_top(buf);
2794:src/display.c **** 	    no_status_top = 1;
2795:src/display.c **** 	    annuc = 1;
2796:src/display.c **** 	  }
2797:src/display.c **** 	  else {
2798:src/display.c **** 	    set_status(buf);
2799:src/display.c **** 	  }
2800:src/display.c **** 	} else if (State2.status) {
2801:src/display.c **** 	  show_status();
2802:src/display.c **** 	  skip = 1;
2803:src/display.c **** 	} else if (State2.labellist) {
2804:src/display.c **** 	  show_label();
2805:src/display.c **** 	  skip = 1;
2806:src/display.c **** 	} else if (State2.registerlist) {
2807:src/display.c **** 	  show_registers();
2808:src/display.c **** 	  skip = 1;
2809:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2810:src/display.c **** 	    annunciators();
2811:src/display.c **** 	  }
2812:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2813:src/display.c **** 	} else if (State2.disp_as_alpha) {
2814:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2815:src/display.c **** #endif
2816:src/display.c **** 	} else if (State2.runmode) {
2817:src/display.c **** 	  if (DispMsg) { 
2818:src/display.c **** 	    set_status(DispMsg);
2819:src/display.c **** 	  } else if (DispPlot) {
2820:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2821:src/display.c **** 	  } else if (State2.alphas) {
2822:src/display.c **** 	    bp = scopy(buf, Alpha);
2823:src/display.c **** 	    j = State2.alpha_pos;
2824:src/display.c **** 	    if (j != 0) {
2825:src/display.c **** 	      i = slen(buf);
ARM GAS  /tmp/ccPv3rzq.s 			page 64


2826:src/display.c **** 	      j *= 6;
2827:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2828:src/display.c **** 		{
2829:src/display.c **** 		  buf[ (i - j) ] = '\0';
2830:src/display.c **** 		  set_status_right(buf);
2831:src/display.c **** 		}
2832:src/display.c **** 	      else {
2833:src/display.c **** 		set_status(buf);
2834:src/display.c **** 	      }
2835:src/display.c **** 	    }
2836:src/display.c **** 	    else {
2837:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2838:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2839:src/display.c **** 		*bp++ = '\0';
2840:src/display.c **** 	      }
2841:src/display.c **** 	      set_status_right(buf);
2842:src/display.c **** 	    }
2843:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2844:src/display.c **** 	      bp = buf;
2845:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2846:src/display.c **** 	      *bp++ = '\0';
2847:src/display.c **** 	      set_status_top(buf);
2848:src/display.c **** 	      no_status_top = 1;
2849:src/display.c **** 	      //annuc = 1;
2850:src/display.c **** 	    }
2851:src/display.c **** 	  }
2852:src/display.c **** 	  else {
2853:src/display.c **** 	    annuc = 1;
2854:src/display.c **** 	  }
2855:src/display.c **** 	}
2856:src/display.c **** 	else {
2857:src/display.c **** #ifndef DM42
2858:src/display.c **** 	  show_progtrace(buf);
2859:src/display.c **** #endif
2860:src/display.c **** 	  i = state_pc();
2861:src/display.c **** 	  if (i > 0)
2862:src/display.c **** 	    set_status(prt(getprog(i), buf));
2863:src/display.c **** 	  else
2864:src/display.c **** 	    set_status("");
2865:src/display.c **** 	  set_dot(STO_annun);
2866:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  goto nostk;
2869:src/display.c **** 	}
2870:src/display.c **** 	show_stack();
2871:src/display.c ****       nostk:
2872:src/display.c **** 	show_flags();
2873:src/display.c **** 	if (!skip) {
2874:src/display.c **** 	  if (State2.runmode) {
2875:src/display.c **** 	  only_update_x:
2876:src/display.c **** 	    p = get_cmdline();
2877:src/display.c **** 	    if (p == NULL || cata) {
2878:src/display.c **** 	      if (ShowRegister != -1) {
2879:src/display.c **** #ifdef INCLUDE_C_LOCK
2880:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2881:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2882:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
ARM GAS  /tmp/ccPv3rzq.s 			page 65


2883:src/display.c **** 		    SET_POLAR_READY;
2884:src/display.c **** 		  }
2885:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2886:src/display.c **** 		    State2.hms = 0;
2887:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2888:src/display.c **** 		    State2.hms = 1;
2889:src/display.c **** 		  }
2890:src/display.c **** 		  else {
2891:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2892:src/display.c **** 		  }
2893:src/display.c **** 		  x_disp = 1;
2894:src/display.c **** 		}
2895:src/display.c **** 		else {
2896:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2897:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2898:src/display.c **** 		}
2899:src/display.c **** #else		
2900:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2901:src/display.c **** 		format_reg(ShowRegister, CNULL);
2902:src/display.c **** #endif
2903:src/display.c **** 	      }
2904:src/display.c **** 	      else
2905:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2906:src/display.c **** 	    } else {
2907:src/display.c **** 	      disp_x(p);
2908:src/display.c **** 	      x_disp = 1;
2909:src/display.c **** 	    }
2910:src/display.c **** 	    if (WasDataEntry) {
2911:src/display.c **** 	      goto finish;
2912:src/display.c **** 	    }
2913:src/display.c **** 	  } else {
2914:src/display.c **** 	    unsigned int pc = state_pc();
2915:src/display.c **** 	    unsigned int upc = user_pc(pc);
2916:src/display.c **** 	    const int n = nLIB(pc);
2917:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2918:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2919:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2920:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2921:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2922:src/display.c **** #if 0
2923:src/display.c **** #ifndef REALBUILD
2924:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2925:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2926:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2927:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2928:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2929:src/display.c **** 	      char *b=buf;
2930:src/display.c **** 	      char *l=LastDisplayedNumber;
2931:src/display.c **** 	      *l++=' ';
2932:src/display.c **** 	      while(*b) {
2933:src/display.c **** 		*l++=*b++;
2934:src/display.c **** 		*l++=' ';
2935:src/display.c **** 	      }
2936:src/display.c **** 	      *l=0;
2937:src/display.c **** 	    }
2938:src/display.c **** #endif
2939:src/display.c **** #endif
ARM GAS  /tmp/ccPv3rzq.s 			page 66


2940:src/display.c **** 	  }
2941:src/display.c **** 	}
2942:src/display.c **** 	set_annunciators();
2943:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2944:src/display.c **** 	  ShowRPN = 0;
2945:src/display.c **** 	  dot(RPN, 0);
2946:src/display.c **** 	}
2947:src/display.c **** 	// disp_temp disables the <- key
2948:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2949:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2950:src/display.c **** 
2951:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2952:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2953:src/display.c **** 	  annunciators();
2954:src/display.c ****  	State2.hms = 0;
2955:src/display.c **** #else
2956:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2957:src/display.c **** 	  annunciators();
2958:src/display.c **** #endif
2959:src/display.c **** 
2960:src/display.c ****       finish:
2961:src/display.c **** 	State2.version = 0;
2962:src/display.c **** 	State2.disp_as_alpha = 0;
2963:src/display.c **** 	State2.smode = SDISP_NORMAL;
2964:src/display.c **** 	State2.invalid_disp = 0;
2965:src/display.c **** 	ShowRegister = regX_idx;
2966:src/display.c **** 	DispMsg = CNULL;
2967:src/display.c **** 	DispPlot = 0;
2968:src/display.c **** 	State2.disp_small = 0;
2969:src/display.c **** 	if (WasDataEntry) {
2970:src/display.c **** 	  finish_7_segment();
2971:src/display.c **** 	  lcd_refresh();
2972:src/display.c **** 	}
2973:src/display.c **** 	else {
2974:src/display.c **** 	  finish_display();
2975:src/display.c **** 	}
2976:src/display.c **** 	no_status_top = 0;
2977:src/display.c **** #ifdef CONSOLE
2978:src/display.c **** 	JustDisplayed = 1;
2979:src/display.c **** #endif
2980:src/display.c ****       }
2981:src/display.c **** #else
2982:src/display.c ****       /*
2983:src/display.c ****        *  Update the display
2984:src/display.c ****        */
2985:src/display.c ****       void display(void) {
2986:src/display.c **** 	int i, j;
2987:src/display.c **** 	char buf[40], *bp = buf;
2988:src/display.c **** 	const char *p;
2989:src/display.c **** 	int annuc = 0;
2990:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2991:src/display.c **** 	int skip = 0;
2992:src/display.c **** 	int x_disp = 0;
2993:src/display.c **** 	const int shift = cur_shift();
2994:src/display.c **** 
2995:src/display.c **** 
2996:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 67


2997:src/display.c **** 	if (State2.disp_freeze) {
2998:src/display.c **** 	  State2.disp_freeze = 0;
2999:src/display.c **** 	  State2.disp_temp = 1;
3000:src/display.c **** #ifdef CONSOLE
3001:src/display.c **** 	  JustDisplayed = 1;
3002:src/display.c **** #endif
3003:src/display.c **** 	  ShowRPN = 0;
3004:src/display.c **** 	  return;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	if (WasDataEntry) {
3008:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3009:src/display.c **** 
3010:src/display.c **** 	  // Erase 7-segment display
3011:src/display.c **** 	  //	  for (i = 0; i <= EXP_SIGN; ++i) {
3012:src/display.c **** 	  //	    clr_dot(i);
3013:src/display.c **** 	  //	  }
3014:src/display.c **** 	  reset_7_segment();
3015:src/display.c **** 	  goto only_update_x;
3016:src/display.c **** 	}
3017:src/display.c **** 
3018:src/display.c **** 	// Clear display
3019:src/display.c **** 	reset_disp();
3020:src/display.c **** 
3021:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3022:src/display.c **** 	if (State2.cmplx  && !cata) {
3023:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3024:src/display.c **** 	  set_status(buf);
3025:src/display.c **** 	}
3026:src/display.c **** 	if (State2.version) {
3027:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3028:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3029:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3030:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3031:src/display.c **** 	  set_status(vers);
3032:src/display.c **** 	  skip = 1;
3033:src/display.c **** 	  goto nostk;
3034:src/display.c **** 	} else if (State2.confirm) {
3035:src/display.c **** 	  set_status(S_SURE);
3036:src/display.c **** 	} else if (State2.hyp) {
3037:src/display.c **** 	  bp = scopy(bp, "HYP");
3038:src/display.c **** 	  if (! State2.dot)
3039:src/display.c **** 	    *bp++ = '\235';
3040:src/display.c **** 	  set_status(buf);
3041:src/display.c **** 	} else if (State2.gtodot) {
3042:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3043:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3044:src/display.c **** 	  if (State2.numdigit > 0)
3045:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3046:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3047:src/display.c **** 	  *bp++ = '_';
3048:src/display.c **** 	  set_status(buf);
3049:src/display.c **** 	} else if (State2.rarg) {
3050:src/display.c **** 	  /* Commands with arguments */
3051:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3052:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3053:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
ARM GAS  /tmp/ccPv3rzq.s 			page 68


3054:src/display.c **** #endif
3055:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3056:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3057:src/display.c **** 	  if (State2.dot) {
3058:src/display.c **** 	    *bp++ = 's';
3059:src/display.c **** 	    *bp++ = '_';
3060:src/display.c **** 	  } else if (shift == SHIFT_F) {
3061:src/display.c **** 	    *bp++ = '\021';
3062:src/display.c **** 	    *bp++ = '_';
3063:src/display.c **** 	  } else {
3064:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3065:src/display.c **** 	       : State2.ind ? 2 
3066:src/display.c **** 	       : num_arg_digits(CmdBase); */
3067:src/display.c **** 	    if (State2.local)
3068:src/display.c **** 	      *bp++ = '.';
3069:src/display.c **** 	    if (State2.numdigit > 0) {
3070:src/display.c **** 	      if (State2.shuffle)
3071:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3072:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3073:src/display.c **** 	      else
3074:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3075:src/display.c **** 	    }
3076:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3077:src/display.c **** 	    *bp++ = '_';
3078:src/display.c **** 	  }
3079:src/display.c **** 	  set_status(buf);
3080:src/display.c **** 	} else if (State2.test != TST_NONE) {
3081:src/display.c **** 	  *bp++ = 'x';
3082:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3083:src/display.c **** 	  *bp++ = '_';
3084:src/display.c **** 	  *bp++ = '?';
3085:src/display.c **** 	  set_status(buf);
3086:src/display.c **** 	} else if (cata) {
3087:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3088:src/display.c **** 	  char b2[16];
3089:src/display.c **** 	  const char *p;
3090:src/display.c **** 
3091:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3092:src/display.c **** 	  p = catcmd(op, b2);
3093:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3094:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3095:src/display.c **** 	  bp = scopy(bp, p);
3096:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3097:src/display.c **** 	    // State2.disp_small = 1;
3098:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3099:src/display.c **** 	      set_digits_string("0 to 255", 0);
3100:src/display.c **** 	    else
3101:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3102:src/display.c **** 	    skip = 1;
3103:src/display.c **** 	  } else if (State2.runmode) {
3104:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3105:src/display.c **** 	      decNumber x, r;
3106:src/display.c **** 	      decimal64 z;
3107:src/display.c **** 
3108:src/display.c **** 	      getX(&x);
3109:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3110:src/display.c **** 		const unsigned int f = argKIND(op);
ARM GAS  /tmp/ccPv3rzq.s 			page 69


3111:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3112:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3113:src/display.c **** 		  update_speed(0);
3114:src/display.c **** 		  fp(&r, &x);
3115:src/display.c **** 		}
3116:src/display.c **** 		else
3117:src/display.c **** 		  set_NaN(&r);
3118:src/display.c **** 	      } else
3119:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3120:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3121:src/display.c **** 	      packed_from_number(&z, &r);
3122:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3125:src/display.c **** 	      REGISTER z, *const x = StackBase;
3126:src/display.c **** 	      copyreg(&z, x);
3127:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3128:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3129:src/display.c **** 	      copyreg(x, &z);
3130:src/display.c **** 	      skip = 1;
3131:src/display.c **** 	    }
3132:src/display.c **** 	  }
3133:src/display.c **** 	  set_status(buf);
3134:src/display.c **** 	} else if (State2.multi) {
3135:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3136:src/display.c **** 	  if (State2.numdigit > 0) {
3137:src/display.c **** 	    *bp++ = (char) State2.digval;
3138:src/display.c **** 	    if (State2.numdigit > 1)
3139:src/display.c **** 	      *bp++ = State2.digval2;
3140:src/display.c **** 	  }
3141:src/display.c **** 	  set_status(buf);
3142:src/display.c **** 	} else if (State2.status) {
3143:src/display.c **** 	  show_status();
3144:src/display.c **** 	  skip = 1;
3145:src/display.c **** 	} else if (State2.labellist) {
3146:src/display.c **** 	  show_label();
3147:src/display.c **** 	  skip = 1;
3148:src/display.c **** 	} else if (State2.registerlist) {
3149:src/display.c **** 	  show_registers();
3150:src/display.c **** 	  skip = 1;
3151:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3152:src/display.c **** 	    annunciators();
3153:src/display.c **** 	  }
3154:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3155:src/display.c **** 	} else if (State2.disp_as_alpha) {
3156:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3157:src/display.c **** #endif
3158:src/display.c **** 	} else if (State2.runmode) {
3159:src/display.c **** 	  if (DispMsg) { 
3160:src/display.c **** 	    set_status(DispMsg);
3161:src/display.c **** 	  } else if (DispPlot) {
3162:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3163:src/display.c **** 	  } else if (State2.alphas) {
3164:src/display.c **** #if 0
3165:src/display.c **** 	    set_digits_string("AlpHA", 0);
3166:src/display.c **** #endif
3167:src/display.c **** 	    bp = scopy(buf, Alpha);
ARM GAS  /tmp/ccPv3rzq.s 			page 70


3168:src/display.c **** 	    j = State2.alpha_pos;
3169:src/display.c **** 	    if (j != 0) {
3170:src/display.c **** 	      i = slen(buf);
3171:src/display.c **** 	      //				
3172:src/display.c **** 	      j *= 6;
3173:src/display.c **** #ifdef BIGGER_DISPLAY
3174:src/display.c **** 	      if ( i - j >= 20 )
3175:src/display.c **** #else
3176:src/display.c **** 	      if ( i - j >= 12 )
3177:src/display.c **** #endif
3178:src/display.c **** 		{
3179:src/display.c **** 		buf[ (i - j) ] = '\0';
3180:src/display.c **** 		set_status_right(buf);
3181:src/display.c **** 		}
3182:src/display.c **** 	      else {
3183:src/display.c **** 		set_status(buf);
3184:src/display.c **** 	      }
3185:src/display.c **** 	    } else {
3186:src/display.c **** 	      if (shift != SHIFT_N) {
3187:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3188:src/display.c **** 		*bp++ = '\0';
3189:src/display.c **** 	      }
3190:src/display.c **** 	      set_status_right(buf);
3191:src/display.c **** 	    }
3192:src/display.c **** 	  } else {
3193:src/display.c **** 	    annuc = 1;
3194:src/display.c **** 	  }
3195:src/display.c **** 	} else {
3196:src/display.c **** #ifndef DM42
3197:src/display.c **** 	  show_progtrace(buf);
3198:src/display.c **** #endif
3199:src/display.c **** 	  i = state_pc();
3200:src/display.c **** 	  if (i > 0)
3201:src/display.c **** 	    set_status(prt(getprog(i), buf));
3202:src/display.c **** 	  else
3203:src/display.c **** 	    set_status("");
3204:src/display.c **** 	  set_dot(STO_annun);
3205:src/display.c **** #if 0
3206:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3207:src/display.c **** 	    unsigned short int crc;
3208:src/display.c **** 	    crc = checksum_program();
3209:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3210:src/display.c **** 	    for (i=0; i<4; i++) {
3211:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3212:src/display.c **** 	      crc >>= 4;
3213:src/display.c **** 	      j += SEGS_PER_DIGIT;
3214:src/display.c **** 	    }
3215:src/display.c **** 	    skip = 1;
3216:src/display.c **** 	  }
3217:src/display.c **** 	  else
3218:src/display.c **** #endif
3219:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3220:src/display.c **** 	      annuc = 1;
3221:src/display.c **** 	  goto nostk;
3222:src/display.c **** 	}
3223:src/display.c **** 	show_stack();
3224:src/display.c ****       nostk:	show_flags();
ARM GAS  /tmp/ccPv3rzq.s 			page 71


3225:src/display.c **** 	if (!skip) {
3226:src/display.c **** 	  if (State2.runmode) {
3227:src/display.c **** 	  only_update_x:
3228:src/display.c **** 	    p = get_cmdline();
3229:src/display.c **** 	    if (p == NULL || cata) {
3230:src/display.c **** 	      if (ShowRegister != -1) {
3231:src/display.c **** #ifdef INCLUDE_C_LOCK
3232:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3233:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3234:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3235:src/display.c **** 		    SET_POLAR_READY;
3236:src/display.c **** 		  }
3237:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3238:src/display.c **** 		    State2.hms = 0;
3239:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3240:src/display.c **** 		    State2.hms = 1;
3241:src/display.c **** 		  }
3242:src/display.c **** 		  else {
3243:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3244:src/display.c **** 		  }
3245:src/display.c **** 		  x_disp = 1;
3246:src/display.c **** 		}
3247:src/display.c **** 		else {
3248:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3249:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3250:src/display.c **** 		}
3251:src/display.c **** #else
3252:src/display.c **** 
3253:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3254:src/display.c **** 		format_reg(ShowRegister, CNULL);
3255:src/display.c **** #endif
3256:src/display.c **** 	      }
3257:src/display.c **** 	      else
3258:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3259:src/display.c **** 	    } else {
3260:src/display.c **** 	      disp_x(p);
3261:src/display.c **** 	      x_disp = 1;
3262:src/display.c **** 	    }
3263:src/display.c **** 	    if (WasDataEntry) {
3264:src/display.c **** 	      goto finish;
3265:src/display.c **** 	    }
3266:src/display.c **** 	  } else {
3267:src/display.c **** 	    unsigned int pc = state_pc();
3268:src/display.c **** 	    unsigned int upc = user_pc(pc);
3269:src/display.c **** 	    const int n = nLIB(pc);
3270:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3271:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3272:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3273:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3274:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3275:src/display.c **** #if 0
3276:src/display.c **** #ifndef REALBUILD
3277:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3278:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3279:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3280:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3281:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
ARM GAS  /tmp/ccPv3rzq.s 			page 72


3282:src/display.c **** 	      char *b=buf;
3283:src/display.c **** 	      char *l=LastDisplayedNumber;
3284:src/display.c **** 	      *l++=' ';
3285:src/display.c **** 	      while(*b) {
3286:src/display.c **** 		*l++=*b++;
3287:src/display.c **** 		*l++=' ';
3288:src/display.c **** 	      }
3289:src/display.c **** 	      *l=0;
3290:src/display.c **** 	    }
3291:src/display.c **** #endif
3292:src/display.c **** #endif
3293:src/display.c **** 	  }
3294:src/display.c **** 	}
3295:src/display.c **** 	set_annunciators();
3296:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3297:src/display.c **** 	  ShowRPN = 0;
3298:src/display.c **** 	  dot(RPN, 0);
3299:src/display.c **** 	}
3300:src/display.c **** 	// disp_temp disables the <- key
3301:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3302:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3303:src/display.c **** 
3304:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3305:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3306:src/display.c **** 	  annunciators();
3307:src/display.c ****  	State2.hms = 0;
3308:src/display.c **** #else
3309:src/display.c **** 
3310:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3311:src/display.c **** 	  annunciators();
3312:src/display.c **** 	
3313:src/display.c **** 
3314:src/display.c **** 
3315:src/display.c **** #endif
3316:src/display.c **** 
3317:src/display.c ****       finish:
3318:src/display.c **** 	State2.version = 0;
3319:src/display.c **** 	State2.disp_as_alpha = 0;
3320:src/display.c **** 	State2.smode = SDISP_NORMAL;
3321:src/display.c **** 	State2.invalid_disp = 0;
3322:src/display.c **** 	ShowRegister = regX_idx;
3323:src/display.c **** 	DispMsg = CNULL;
3324:src/display.c **** 	DispPlot = 0;
3325:src/display.c **** 	State2.disp_small = 0;
3326:src/display.c **** 	if (WasDataEntry) {
3327:src/display.c **** 	  finish_7_segment();
3328:src/display.c **** 	  lcd_refresh();
3329:src/display.c **** 	}
3330:src/display.c **** 	else {
3331:src/display.c **** 	  finish_display();
3332:src/display.c **** 	}
3333:src/display.c **** #ifdef CONSOLE
3334:src/display.c **** 	JustDisplayed = 1;
3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** #endif
3338:src/display.c ****       /*
ARM GAS  /tmp/ccPv3rzq.s 			page 73


3339:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3340:src/display.c ****        */
3341:src/display.c ****       void frozen_display()
3342:src/display.c ****       {
3343:src/display.c **** 	State2.disp_freeze = 0;
3344:src/display.c **** 	display();
3345:src/display.c **** 	State2.disp_freeze = 1;
3346:src/display.c ****       }
3347:src/display.c **** 
3348:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3349:src/display.c **** 	int glen = *graphic++;
3350:src/display.c **** 	int i, j;
3351:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3352:src/display.c **** 	unsigned long long int mat[6];
3353:src/display.c **** 
3354:src/display.c **** 	xset(mat, 0, sizeof(mat));
3355:src/display.c **** #endif
3356:src/display.c **** 	if (glen <= 0)			return;
3357:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3358:src/display.c **** 
3359:src/display.c **** 	for (i=0; i<6; i++)
3360:src/display.c **** 	  for (j=1; j<=glen; j++) {
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	    if (graphic[j] & (1 << i))
3363:src/display.c **** 	      mat[i] |= 1LL << j;
3364:src/display.c **** #else
3365:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3366:src/display.c **** #endif
3367:src/display.c **** 	  }
3368:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3369:src/display.c **** 	set_status_grob(mat);
3370:src/display.c **** #endif
3371:src/display.c ****       }
3372:src/display.c **** 
3373:src/display.c **** 
3374:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3375:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3376:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3377:src/display.c ****        * column is almost always blank.
3378:src/display.c ****        */
3379:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3380:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3381:src/display.c ****       }
3382:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3383:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3384:src/display.c ****       }
3385:src/display.c **** 
3386:src/display.c ****       
3387:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 642              		.loc 1 3387 85 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 4, pretend = 0, frame = 560
 645              		@ frame_needed = 0, uses_anonymous_args = 0
3388:src/display.c **** 	unsigned short int posns[257];
 646              		.loc 1 3388 2 view .LVU191
3389:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3390:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
ARM GAS  /tmp/ccPv3rzq.s 			page 74


3391:src/display.c **** 	int posns_state = 255;
 647              		.loc 1 3391 2 view .LVU192
3392:src/display.c **** #endif
3393:src/display.c **** 	unsigned int x = 0;
 648              		.loc 1 3393 2 view .LVU193
3394:src/display.c **** 	int i, j;
 649              		.loc 1 3394 2 view .LVU194
3395:src/display.c **** 	const int offset = smallp ? 256 : 0;
 650              		.loc 1 3395 2 view .LVU195
3387:src/display.c **** 	unsigned short int posns[257];
 651              		.loc 1 3387 85 is_stmt 0 view .LVU196
 652 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 653              		.cfi_def_cfa_offset 36
 654              		.cfi_offset 4, -36
 655              		.cfi_offset 5, -32
 656              		.cfi_offset 6, -28
 657              		.cfi_offset 7, -24
 658              		.cfi_offset 8, -20
 659              		.cfi_offset 9, -16
 660              		.cfi_offset 10, -12
 661              		.cfi_offset 11, -8
 662              		.cfi_offset 14, -4
 663 0004 ADF50D7D 		sub	sp, sp, #564
 664              		.cfi_def_cfa_offset 600
3396:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3397:src/display.c **** 	unsigned long long int mat[6];
3398:src/display.c **** 
3399:src/display.c **** 	xset(mat, 0, sizeof(mat));
3400:src/display.c **** #endif
3401:src/display.c **** #ifdef RP_PREFIX
3402:src/display.c **** 	RectPolConv = 0;
 665              		.loc 1 3402 14 view .LVU197
 666 0008 5B4C     		ldr	r4, .L99
3387:src/display.c **** 	unsigned short int posns[257];
 667              		.loc 1 3387 85 view .LVU198
 668 000a 0390     		str	r0, [sp, #12]
 669 000c 0546     		mov	r5, r0
 670              		.loc 1 3402 14 view .LVU199
 671 000e 0020     		movs	r0, #0
 672              	.LVL57:
 673              		.loc 1 3402 14 view .LVU200
 674 0010 2060     		str	r0, [r4]
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 675              		.loc 1 3395 34 view .LVU201
 676 0012 0029     		cmp	r1, #0
3403:src/display.c **** #endif
3404:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3405:src/display.c **** 	findlengths(posns, smallp);
3406:src/display.c **** #endif
3407:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 677              		.loc 1 3407 9 view .LVU202
 678 0014 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
3387:src/display.c **** 	unsigned short int posns[257];
 679              		.loc 1 3387 85 view .LVU203
 680 0016 CDE90531 		strd	r3, r1, [sp, #20]
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 681              		.loc 1 3395 34 view .LVU204
ARM GAS  /tmp/ccPv3rzq.s 			page 75


 682 001a 14BF     		ite	ne
 683 001c 4FF48073 		movne	r3, #256
 684              	.LVL58:
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 685              		.loc 1 3395 34 view .LVU205
 686 0020 0346     		moveq	r3, r0
 687 0022 0793     		str	r3, [sp, #28]
 688              	.LVL59:
3402:src/display.c **** #endif
 689              		.loc 1 3402 2 is_stmt 1 view .LVU206
 690              		.loc 1 3407 2 view .LVU207
 691              		.loc 1 3407 8 view .LVU208
 692 0024 002E     		cmp	r6, #0
 693 0026 00F0A480 		beq	.L95
 694              		.loc 1 3407 33 is_stmt 0 view .LVU209
 695 002a 531C     		adds	r3, r2, #1
 696              	.LVL60:
 697              	.LBB205:
3408:src/display.c **** 	  int c;
3409:src/display.c **** 	  int width;
3410:src/display.c **** 	  unsigned char cmap[6];
3411:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3412:src/display.c **** 	  int real_width;
3413:src/display.c **** 	  int current_smallp;
3414:src/display.c **** 
3415:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3416:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3417:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3418:src/display.c **** 	  //           01 -> (not used)
3419:src/display.c **** 	  //           10 -> use big font
3420:src/display.c **** 	  //           11 -> use small font
3421:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3422:src/display.c **** 	  if (str[0] == '\007') {
 698              		.loc 1 3422 7 view .LVU210
 699 002c 072E     		cmp	r6, #7
 700 002e 9246     		mov	r10, r2
 701              	.LBE205:
3393:src/display.c **** 	int i, j;
 702              		.loc 1 3393 15 view .LVU211
 703 0030 8046     		mov	r8, r0
3407:src/display.c **** 	  int c;
 704              		.loc 1 3407 33 view .LVU212
 705 0032 0493     		str	r3, [sp, #16]
3391:src/display.c **** #endif
 706              		.loc 1 3391 6 view .LVU213
 707 0034 4FF0FF04 		mov	r4, #255
 708              	.LVL61:
 709              	.LBB214:
3408:src/display.c **** 	  int width;
 710              		.loc 1 3408 4 is_stmt 1 view .LVU214
3409:src/display.c **** 	  unsigned char cmap[6];
 711              		.loc 1 3409 4 view .LVU215
3410:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 712              		.loc 1 3410 4 view .LVU216
3412:src/display.c **** 	  int current_smallp;
 713              		.loc 1 3412 4 view .LVU217
3413:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 76


 714              		.loc 1 3413 4 view .LVU218
 715              		.loc 1 3422 4 view .LVU219
 716              		.loc 1 3422 7 is_stmt 0 view .LVU220
 717 0038 69D1     		bne	.L63
 718              	.LVL62:
 719              	.L97:
3423:src/display.c **** 	    width = str[1] & 0x1F;
 720              		.loc 1 3423 6 is_stmt 1 view .LVU221
 721              		.loc 1 3423 17 is_stmt 0 view .LVU222
 722 003a 039B     		ldr	r3, [sp, #12]
 723 003c 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 724 003e 05F06003 		and	r3, r5, #96
3424:src/display.c **** 	    switch (str[1] & 0x60) {
 725              		.loc 1 3424 6 view .LVU223
 726 0042 402B     		cmp	r3, #64
3423:src/display.c **** 	    width = str[1] & 0x1F;
 727              		.loc 1 3423 12 view .LVU224
 728 0044 05F01F05 		and	r5, r5, #31
 729              	.LVL63:
 730              		.loc 1 3424 6 is_stmt 1 view .LVU225
 731 0048 00F08480 		beq	.L64
 732 004c 602B     		cmp	r3, #96
 733 004e 00F08680 		beq	.L65
 734              	.LVL64:
3425:src/display.c **** 	    default:
3426:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3427:src/display.c **** 	      break;
3428:src/display.c **** 	    case 0x40:	current_smallp = 0;
3429:src/display.c **** 	      break;
3430:src/display.c **** 	    case 0x60:	current_smallp = 1;
3431:src/display.c **** 	      break;
3432:src/display.c **** 	    }
3433:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 735              		.loc 1 3433 6 view .LVU226
 736              		.loc 1 3433 10 is_stmt 0 view .LVU227
 737 0052 039B     		ldr	r3, [sp, #12]
 738 0054 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 739              		.loc 1 3433 57 view .LVU228
 740 0056 069B     		ldr	r3, [sp, #24]
 741 0058 002B     		cmp	r3, #0
 742 005a 00F08780 		beq	.L83
 743 005e 06F58076 		add	r6, r6, #256
 744 0062 0293     		str	r3, [sp, #8]
 745              	.LVL65:
 746              	.L67:
3434:src/display.c **** 	    str += 3;
 747              		.loc 1 3434 6 is_stmt 1 discriminator 4 view .LVU229
3435:src/display.c **** 
3436:src/display.c **** 	    real_width = charlengths(c);
 748              		.loc 1 3436 19 is_stmt 0 discriminator 4 view .LVU230
 749 0064 3046     		mov	r0, r6
 750 0066 FFF7FEFF 		bl	charlengths
 751              	.LVL66:
3434:src/display.c **** 	    str += 3;
 752              		.loc 1 3434 10 discriminator 4 view .LVU231
 753 006a 039B     		ldr	r3, [sp, #12]
 754 006c 0333     		adds	r3, r3, #3
ARM GAS  /tmp/ccPv3rzq.s 			page 77


 755 006e 0393     		str	r3, [sp, #12]
 756              	.LVL67:
 757              		.loc 1 3436 6 is_stmt 1 discriminator 4 view .LVU232
3437:src/display.c **** 	  } else {
3438:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3439:src/display.c **** 	    real_width = width = charlengths(c);
3440:src/display.c **** 	    current_smallp = smallp;
3441:src/display.c **** 	  }
3442:src/display.c **** 
3443:src/display.c **** 	  if (x + real_width > b_w + 1)
 758              		.loc 1 3443 4 discriminator 4 view .LVU233
 759              		.loc 1 3443 7 is_stmt 0 discriminator 4 view .LVU234
 760 0070 049B     		ldr	r3, [sp, #16]
 761              	.LVL68:
 762              		.loc 1 3443 10 discriminator 4 view .LVU235
 763 0072 4044     		add	r0, r0, r8
 764              		.loc 1 3443 7 discriminator 4 view .LVU236
 765 0074 9842     		cmp	r0, r3
 766 0076 59D8     		bhi	.L94
 767              	.L98:
3444:src/display.c **** 	    break;
3445:src/display.c **** 
3446:src/display.c **** 	  if (posns_state != current_smallp) {
 768              		.loc 1 3446 4 is_stmt 1 view .LVU237
 769              		.loc 1 3446 7 is_stmt 0 view .LVU238
 770 0078 029B     		ldr	r3, [sp, #8]
 771 007a A342     		cmp	r3, r4
3447:src/display.c **** 	    findlengths(posns, current_smallp);
 772              		.loc 1 3447 6 view .LVU239
 773 007c 0BAB     		add	r3, sp, #44
3446:src/display.c **** 	    findlengths(posns, current_smallp);
 774              		.loc 1 3446 7 view .LVU240
 775 007e 05D0     		beq	.L70
 776              		.loc 1 3447 6 is_stmt 1 view .LVU241
 777 0080 1846     		mov	r0, r3
 778 0082 0299     		ldr	r1, [sp, #8]
 779 0084 0193     		str	r3, [sp, #4]
 780 0086 FFF7FEFF 		bl	findlengths
 781              	.LVL69:
 782 008a 019B     		ldr	r3, [sp, #4]
3448:src/display.c **** 	    posns_state = current_smallp;
 783              		.loc 1 3448 6 view .LVU242
 784              	.LVL70:
 785              	.L70:
3449:src/display.c **** 	  }
3450:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 786              		.loc 1 3450 4 view .LVU243
 787 008c 029A     		ldr	r2, [sp, #8]
 788 008e 3046     		mov	r0, r6
 789 0090 09A9     		add	r1, sp, #36
 790 0092 FFF7FEFF 		bl	unpackchar
 791              	.LVL71:
3451:src/display.c **** #else
3452:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3453:src/display.c **** 
3454:src/display.c **** 	  //cmap = &charset[c][0];
3455:src/display.c **** 	  width = charlengths(c);
ARM GAS  /tmp/ccPv3rzq.s 			page 78


3456:src/display.c **** 
3457:src/display.c **** 	  if (x + width > b_w+1)
3458:src/display.c **** 	    break;
3459:src/display.c **** 
3460:src/display.c **** 	  /* Decode the packed character bytes */
3461:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3462:src/display.c **** #endif
3463:src/display.c **** 
3464:src/display.c **** 	  for (i=0; i<6; i++)
 792              		.loc 1 3464 4 view .LVU244
 793              		.loc 1 3464 14 view .LVU245
 794 0096 059B     		ldr	r3, [sp, #20]
 795 0098 08EB4809 		add	r9, r8, r8, lsl #1
 796 009c 03EB4903 		add	r3, r3, r9, lsl #1
 797 00a0 09AC     		add	r4, sp, #36
 798 00a2 0193     		str	r3, [sp, #4]
 799              		.loc 1 3464 10 is_stmt 0 view .LVU246
 800 00a4 0027     		movs	r7, #0
 801 00a6 AAEB0806 		sub	r6, r10, r8
 802              	.LVL72:
 803              	.L71:
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 804              		.loc 1 3465 16 is_stmt 1 view .LVU247
 805              		.loc 1 3465 6 is_stmt 0 view .LVU248
 806 00aa 002D     		cmp	r5, #0
 807 00ac 20DD     		ble	.L77
3466:src/display.c **** 	      if (x+j >= b_w)
 808              		.loc 1 3466 8 is_stmt 1 view .LVU249
 809              		.loc 1 3466 11 is_stmt 0 view .LVU250
 810 00ae C245     		cmp	r10, r8
 811 00b0 1ED9     		bls	.L77
 812 00b2 019B     		ldr	r3, [sp, #4]
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 813              		.loc 1 3465 12 view .LVU251
 814 00b4 4FF00009 		mov	r9, #0
 815 00b8 07EB030B 		add	fp, r7, r3
 816 00bc 09E0     		b	.L72
 817              	.LVL73:
 818              	.L96:
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 819              		.loc 1 3465 26 view .LVU252
 820 00be 09F10109 		add	r9, r9, #1
 821              	.LVL74:
 822              	.LBB206:
 823              	.LBB207:
 284:src/display.c ****   else	clr_dot(n);
 824              		.loc 1 284 11 view .LVU253
 825 00c2 FFF7FEFF 		bl	set_dot
 826              	.LVL75:
 284:src/display.c ****   else	clr_dot(n);
 827              		.loc 1 284 11 view .LVU254
 828              	.LBE207:
 829              	.LBE206:
 830              		.loc 1 3466 8 is_stmt 1 view .LVU255
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 831              		.loc 1 3465 25 view .LVU256
3465:src/display.c **** 	    for (j=0; j<width; j++) {
ARM GAS  /tmp/ccPv3rzq.s 			page 79


 832              		.loc 1 3465 16 view .LVU257
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 833              		.loc 1 3465 6 is_stmt 0 view .LVU258
 834 00c6 4D45     		cmp	r5, r9
 835 00c8 0BF1060B 		add	fp, fp, #6
 836 00cc 10D0     		beq	.L77
 837              	.L76:
 838              		.loc 1 3466 11 view .LVU259
 839 00ce 4E45     		cmp	r6, r9
 840 00d0 0ED0     		beq	.L77
 841              	.LVL76:
 842              	.L72:
3467:src/display.c **** 		break;
3468:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3469:src/display.c **** 	      if (cmap[i] & (1 << j))
3470:src/display.c **** 		mat[i] |= 1LL << (x+j);
3471:src/display.c **** #else
3472:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 843              		.loc 1 3472 8 is_stmt 1 discriminator 2 view .LVU260
 844              	.LBB211:
 845              	.LBI206:
 283:src/display.c ****   if (on)	set_dot(n);
 846              		.loc 1 283 6 discriminator 2 view .LVU261
 847              	.LBB208:
 284:src/display.c ****   else	clr_dot(n);
 848              		.loc 1 284 3 discriminator 2 view .LVU262
 284:src/display.c ****   else	clr_dot(n);
 849              		.loc 1 284 11 discriminator 2 view .LVU263
 285:src/display.c **** }
 850              		.loc 1 285 8 discriminator 2 view .LVU264
 851              	.LBE208:
 852              	.LBE211:
 853              		.loc 1 3472 32 is_stmt 0 discriminator 2 view .LVU265
 854 00d2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 855              		.loc 1 3472 47 discriminator 2 view .LVU266
 856 00d4 43FA09F3 		asr	r3, r3, r9
 857              	.LBB212:
 858              	.LBB209:
 284:src/display.c ****   else	clr_dot(n);
 859              		.loc 1 284 6 discriminator 2 view .LVU267
 860 00d8 13F0010F 		tst	r3, #1
 284:src/display.c ****   else	clr_dot(n);
 861              		.loc 1 284 11 discriminator 2 view .LVU268
 862 00dc 5846     		mov	r0, fp
 284:src/display.c ****   else	clr_dot(n);
 863              		.loc 1 284 6 discriminator 2 view .LVU269
 864 00de EED1     		bne	.L96
 865              	.LBE209:
 866              	.LBE212:
3465:src/display.c **** 	      if (x+j >= b_w)
 867              		.loc 1 3465 26 view .LVU270
 868 00e0 09F10109 		add	r9, r9, #1
 869              	.LVL77:
 870              	.LBB213:
 871              	.LBB210:
 285:src/display.c **** }
 872              		.loc 1 285 8 view .LVU271
ARM GAS  /tmp/ccPv3rzq.s 			page 80


 873 00e4 FFF7FEFF 		bl	clr_dot
 874              	.LVL78:
 285:src/display.c **** }
 875              		.loc 1 285 8 view .LVU272
 876              	.LBE210:
 877              	.LBE213:
3466:src/display.c **** 		break;
 878              		.loc 1 3466 8 is_stmt 1 view .LVU273
3465:src/display.c **** 	      if (x+j >= b_w)
 879              		.loc 1 3465 25 view .LVU274
3465:src/display.c **** 	      if (x+j >= b_w)
 880              		.loc 1 3465 16 view .LVU275
3465:src/display.c **** 	      if (x+j >= b_w)
 881              		.loc 1 3465 6 is_stmt 0 view .LVU276
 882 00e8 4D45     		cmp	r5, r9
 883 00ea 0BF1060B 		add	fp, fp, #6
 884 00ee EED1     		bne	.L76
 885              	.LVL79:
 886              	.L77:
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 887              		.loc 1 3464 19 is_stmt 1 view .LVU277
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3464 20 is_stmt 0 view .LVU278
 889 00f0 0137     		adds	r7, r7, #1
 890              	.LVL80:
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 891              		.loc 1 3464 14 is_stmt 1 view .LVU279
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 892              		.loc 1 3464 4 is_stmt 0 view .LVU280
 893 00f2 062F     		cmp	r7, #6
 894 00f4 04F10104 		add	r4, r4, #1
 895 00f8 D7D1     		bne	.L71
3473:src/display.c **** #endif
3474:src/display.c **** 	    }
3475:src/display.c **** 	  x += width;
 896              		.loc 1 3475 4 is_stmt 1 view .LVU281
 897              	.LBE214:
3407:src/display.c **** 	  int c;
 898              		.loc 1 3407 9 is_stmt 0 view .LVU282
 899 00fa 039B     		ldr	r3, [sp, #12]
 900 00fc 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 901              	.LBB215:
 902              		.loc 1 3475 6 view .LVU283
 903 00fe A844     		add	r8, r8, r5
 904              	.LVL81:
 905              		.loc 1 3475 6 view .LVU284
 906              	.LBE215:
3407:src/display.c **** 	  int c;
 907              		.loc 1 3407 8 is_stmt 1 view .LVU285
 908 0100 A6B1     		cbz	r6, .L94
3407:src/display.c **** 	  int c;
 909              		.loc 1 3407 22 is_stmt 0 discriminator 1 view .LVU286
 910 0102 049B     		ldr	r3, [sp, #16]
 911              	.LVL82:
3407:src/display.c **** 	  int c;
 912              		.loc 1 3407 22 discriminator 1 view .LVU287
 913 0104 9845     		cmp	r8, r3
ARM GAS  /tmp/ccPv3rzq.s 			page 81


 914 0106 11D8     		bhi	.L94
 915              	.LBB216:
3422:src/display.c **** 	    width = str[1] & 0x1F;
 916              		.loc 1 3422 7 view .LVU288
 917 0108 072E     		cmp	r6, #7
 918              	.LBE216:
 919 010a 029C     		ldr	r4, [sp, #8]
 920              	.LBB217:
3408:src/display.c **** 	  int width;
 921              		.loc 1 3408 4 is_stmt 1 view .LVU289
3409:src/display.c **** 	  unsigned char cmap[6];
 922              		.loc 1 3409 4 view .LVU290
3410:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 923              		.loc 1 3410 4 view .LVU291
3412:src/display.c **** 	  int current_smallp;
 924              		.loc 1 3412 4 view .LVU292
3413:src/display.c **** 
 925              		.loc 1 3413 4 view .LVU293
3422:src/display.c **** 	    width = str[1] & 0x1F;
 926              		.loc 1 3422 4 view .LVU294
3422:src/display.c **** 	    width = str[1] & 0x1F;
 927              		.loc 1 3422 7 is_stmt 0 view .LVU295
 928 010c 95D0     		beq	.L97
 929              	.LVL83:
 930              	.L63:
3438:src/display.c **** 	    real_width = width = charlengths(c);
 931              		.loc 1 3438 6 is_stmt 1 view .LVU296
3438:src/display.c **** 	    real_width = width = charlengths(c);
 932              		.loc 1 3438 8 is_stmt 0 view .LVU297
 933 010e 079B     		ldr	r3, [sp, #28]
 934 0110 1E44     		add	r6, r6, r3
3439:src/display.c **** 	    current_smallp = smallp;
 935              		.loc 1 3439 27 view .LVU298
 936 0112 3046     		mov	r0, r6
 937 0114 FFF7FEFF 		bl	charlengths
 938              	.LVL84:
3438:src/display.c **** 	    real_width = width = charlengths(c);
 939              		.loc 1 3438 30 view .LVU299
 940 0118 039B     		ldr	r3, [sp, #12]
 941 011a 0133     		adds	r3, r3, #1
 942 011c 0393     		str	r3, [sp, #12]
 943              	.LVL85:
3439:src/display.c **** 	    current_smallp = smallp;
 944              		.loc 1 3439 6 is_stmt 1 view .LVU300
3439:src/display.c **** 	    current_smallp = smallp;
 945              		.loc 1 3439 25 is_stmt 0 view .LVU301
 946 011e 069B     		ldr	r3, [sp, #24]
 947              	.LVL86:
3439:src/display.c **** 	    current_smallp = smallp;
 948              		.loc 1 3439 25 view .LVU302
 949 0120 0293     		str	r3, [sp, #8]
3443:src/display.c **** 	    break;
 950              		.loc 1 3443 7 view .LVU303
 951 0122 049B     		ldr	r3, [sp, #16]
3439:src/display.c **** 	    current_smallp = smallp;
 952              		.loc 1 3439 25 view .LVU304
 953 0124 0546     		mov	r5, r0
ARM GAS  /tmp/ccPv3rzq.s 			page 82


 954              	.LVL87:
3440:src/display.c **** 	  }
 955              		.loc 1 3440 6 is_stmt 1 view .LVU305
3443:src/display.c **** 	    break;
 956              		.loc 1 3443 4 view .LVU306
3443:src/display.c **** 	    break;
 957              		.loc 1 3443 10 is_stmt 0 view .LVU307
 958 0126 4044     		add	r0, r0, r8
 959              	.LVL88:
3443:src/display.c **** 	    break;
 960              		.loc 1 3443 7 view .LVU308
 961 0128 9842     		cmp	r0, r3
 962 012a A5D9     		bls	.L98
 963              	.LVL89:
 964              	.L94:
3443:src/display.c **** 	    break;
 965              		.loc 1 3443 7 view .LVU309
 966 012c 059B     		ldr	r3, [sp, #20]
 967 012e 08EB4808 		add	r8, r8, r8, lsl #1
 968              	.LVL90:
3443:src/display.c **** 	    break;
 969              		.loc 1 3443 7 view .LVU310
 970 0132 03EB4808 		add	r8, r3, r8, lsl #1
 971              	.LVL91:
 972              	.L62:
3443:src/display.c **** 	    break;
 973              		.loc 1 3443 7 view .LVU311
 974              	.LBE217:
3476:src/display.c **** 	}
3477:src/display.c **** 
3478:src/display.c **** 
3479:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3480:src/display.c **** 	set_status_grob(mat);
3481:src/display.c **** #else
3482:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 975              		.loc 1 3482 2 is_stmt 1 view .LVU312
 976              		.loc 1 3482 20 view .LVU313
 977              		.loc 1 3482 2 is_stmt 0 view .LVU314
 978 0136 969B     		ldr	r3, [sp, #600]
 979 0138 9845     		cmp	r8, r3
 980 013a 07DA     		bge	.L59
 981 013c 1C46     		mov	r4, r3
 982              	.L80:
3483:src/display.c **** 	  clr_dot(i);
 983              		.loc 1 3483 4 is_stmt 1 discriminator 3 view .LVU315
 984 013e 4046     		mov	r0, r8
3482:src/display.c **** 	  clr_dot(i);
 985              		.loc 1 3482 28 is_stmt 0 discriminator 3 view .LVU316
 986 0140 08F10108 		add	r8, r8, #1
 987              	.LVL92:
 988              		.loc 1 3483 4 discriminator 3 view .LVU317
 989 0144 FFF7FEFF 		bl	clr_dot
 990              	.LVL93:
3482:src/display.c **** 	  clr_dot(i);
 991              		.loc 1 3482 27 is_stmt 1 discriminator 3 view .LVU318
3482:src/display.c **** 	  clr_dot(i);
 992              		.loc 1 3482 20 discriminator 3 view .LVU319
ARM GAS  /tmp/ccPv3rzq.s 			page 83


3482:src/display.c **** 	  clr_dot(i);
 993              		.loc 1 3482 2 is_stmt 0 discriminator 3 view .LVU320
 994 0148 4445     		cmp	r4, r8
 995 014a F8D1     		bne	.L80
 996              	.L59:
3484:src/display.c **** #endif
3485:src/display.c ****       }
 997              		.loc 1 3485 7 view .LVU321
 998 014c 0DF50D7D 		add	sp, sp, #564
 999              		.cfi_remember_state
 1000              		.cfi_def_cfa_offset 36
 1001              		@ sp needed
 1002 0150 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1003              	.LVL94:
 1004              	.L64:
 1005              		.cfi_restore_state
 1006              	.LBB218:
3428:src/display.c **** 	      break;
 1007              		.loc 1 3428 17 is_stmt 1 view .LVU322
3429:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1008              		.loc 1 3429 8 view .LVU323
3433:src/display.c **** 	    str += 3;
 1009              		.loc 1 3433 6 view .LVU324
3433:src/display.c **** 	    str += 3;
 1010              		.loc 1 3433 10 is_stmt 0 view .LVU325
 1011 0154 039B     		ldr	r3, [sp, #12]
 1012 0156 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3428:src/display.c **** 	      break;
 1013              		.loc 1 3428 32 view .LVU326
 1014 0158 0023     		movs	r3, #0
 1015 015a 0293     		str	r3, [sp, #8]
 1016 015c 82E7     		b	.L67
 1017              	.LVL95:
 1018              	.L65:
3430:src/display.c **** 	      break;
 1019              		.loc 1 3430 17 is_stmt 1 view .LVU327
3431:src/display.c **** 	    }
 1020              		.loc 1 3431 8 view .LVU328
3433:src/display.c **** 	    str += 3;
 1021              		.loc 1 3433 6 view .LVU329
3433:src/display.c **** 	    str += 3;
 1022              		.loc 1 3433 10 is_stmt 0 view .LVU330
 1023 015e 039B     		ldr	r3, [sp, #12]
 1024 0160 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3430:src/display.c **** 	      break;
 1025              		.loc 1 3430 32 view .LVU331
 1026 0162 0123     		movs	r3, #1
 1027 0164 0293     		str	r3, [sp, #8]
 1028 0166 06F58076 		add	r6, r6, #256
 1029 016a 7BE7     		b	.L67
 1030              	.LVL96:
 1031              	.L83:
3430:src/display.c **** 	      break;
 1032              		.loc 1 3430 32 view .LVU332
 1033 016c 069B     		ldr	r3, [sp, #24]
 1034              	.LVL97:
3430:src/display.c **** 	      break;
ARM GAS  /tmp/ccPv3rzq.s 			page 84


 1035              		.loc 1 3430 32 view .LVU333
 1036 016e 0293     		str	r3, [sp, #8]
 1037 0170 78E7     		b	.L67
 1038              	.LVL98:
 1039              	.L95:
3430:src/display.c **** 	      break;
 1040              		.loc 1 3430 32 view .LVU334
 1041 0172 DDF81480 		ldr	r8, [sp, #20]
 1042 0176 DEE7     		b	.L62
 1043              	.L100:
 1044              		.align	2
 1045              	.L99:
 1046 0178 00000000 		.word	RectPolConv
 1047              	.LBE218:
 1048              		.cfi_endproc
 1049              	.LFE38:
 1051              		.section	.text.set_exp,"ax",%progbits
 1052              		.align	1
 1053              		.p2align 2,,3
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	set_exp:
 1060              	.LVL99:
 1061              	.LFB14:
 374:src/display.c ****   union {
 1062              		.loc 1 374 52 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 8
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 375:src/display.c ****     char buf[4];
 1066              		.loc 1 375 3 view .LVU336
 379:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1067              		.loc 1 379 3 view .LVU337
 381:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1068              		.loc 1 381 3 view .LVU338
 387:src/display.c **** #  endif
 1069              		.loc 1 387 3 view .LVU339
 396:src/display.c ****   if (exp < 0) {
 1070              		.loc 1 396 3 view .LVU340
 374:src/display.c ****   union {
 1071              		.loc 1 374 52 is_stmt 0 view .LVU341
 1072 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1073              		.cfi_def_cfa_offset 20
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 397:src/display.c ****     negative = 1;
 1079              		.loc 1 397 6 view .LVU342
 1080 0002 051E     		subs	r5, r0, #0
 374:src/display.c ****   union {
 1081              		.loc 1 374 52 view .LVU343
 1082 0004 83B0     		sub	sp, sp, #12
 1083              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccPv3rzq.s 			page 85


 374:src/display.c ****   union {
 1084              		.loc 1 374 52 view .LVU344
 1085 0006 0E46     		mov	r6, r1
 1086              	.LVL100:
 397:src/display.c ****     negative = 1;
 1087              		.loc 1 397 3 is_stmt 1 view .LVU345
 397:src/display.c ****     negative = 1;
 1088              		.loc 1 397 6 is_stmt 0 view .LVU346
 1089 0008 5BDB     		blt	.L133
 402:src/display.c **** #endif
 1090              		.loc 1 402 13 view .LVU347
 1091 000a 3B4B     		ldr	r3, .L135
 1092 000c EC17     		asrs	r4, r5, #31
 1093 000e 83FB0513 		smull	r1, r3, r3, r5
 1094              	.LVL101:
 402:src/display.c **** #endif
 1095              		.loc 1 402 13 view .LVU348
 1096 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 396:src/display.c ****   if (exp < 0) {
 1097              		.loc 1 396 12 view .LVU349
 1098 0016 06F00207 		and	r7, r6, #2
 1099              	.LVL102:
 402:src/display.c **** #endif
 1100              		.loc 1 402 3 is_stmt 1 view .LVU350
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1101              		.loc 1 404 3 view .LVU351
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1102              		.loc 1 404 6 is_stmt 0 view .LVU352
 1103 001a 002A     		cmp	r2, #0
 1104 001c 60D0     		beq	.L106
 407:src/display.c **** #else
 1105              		.loc 1 407 5 is_stmt 1 view .LVU353
 407:src/display.c **** #else
 1106              		.loc 1 407 8 is_stmt 0 view .LVU354
 1107 001e 2CB1     		cbz	r4, .L107
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1108              		.loc 1 411 2 is_stmt 1 view .LVU355
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1109              		.loc 1 411 5 is_stmt 0 view .LVU356
 1110 0020 57B9     		cbnz	r7, .L104
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1111              		.loc 1 411 17 is_stmt 1 discriminator 1 view .LVU357
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1112              		.loc 1 411 21 is_stmt 0 discriminator 1 view .LVU358
 1113 0022 1446     		mov	r4, r2
 1114              	.LVL103:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1115              		.loc 1 411 24 discriminator 1 view .LVU359
 1116 0024 3A23     		movs	r3, #58
 1117              	.LVL104:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1118              		.loc 1 411 24 discriminator 1 view .LVU360
 1119 0026 04F8013B 		strb	r3, [r4], #1
 1120              	.LVL105:
 418:src/display.c ****     }
 1121              		.loc 1 418 7 is_stmt 1 discriminator 1 view .LVU361
 1122 002a 09E0     		b	.L108
ARM GAS  /tmp/ccPv3rzq.s 			page 86


 1123              	.LVL106:
 1124              	.L107:
 414:src/display.c **** #else
 1125              		.loc 1 414 12 view .LVU362
 414:src/display.c **** #else
 1126              		.loc 1 414 16 is_stmt 0 view .LVU363
 1127 002c 1446     		mov	r4, r2
 1128              	.LVL107:
 414:src/display.c **** #else
 1129              		.loc 1 414 19 view .LVU364
 1130 002e 6523     		movs	r3, #101
 1131              	.LVL108:
 414:src/display.c **** #else
 1132              		.loc 1 414 19 view .LVU365
 1133 0030 04F8013B 		strb	r3, [r4], #1
 1134              	.LVL109:
 418:src/display.c ****     }
 1135              		.loc 1 418 7 is_stmt 1 view .LVU366
 418:src/display.c ****     }
 1136              		.loc 1 418 10 is_stmt 0 view .LVU367
 1137 0034 27B1     		cbz	r7, .L108
 414:src/display.c **** #else
 1138              		.loc 1 414 16 view .LVU368
 1139 0036 2246     		mov	r2, r4
 1140              	.LVL110:
 1141              	.L104:
 418:src/display.c ****     }
 1142              		.loc 1 418 21 is_stmt 1 discriminator 1 view .LVU369
 418:src/display.c ****     }
 1143              		.loc 1 418 25 is_stmt 0 discriminator 1 view .LVU370
 1144 0038 1446     		mov	r4, r2
 1145              	.LVL111:
 418:src/display.c ****     }
 1146              		.loc 1 418 28 discriminator 1 view .LVU371
 1147 003a 2D23     		movs	r3, #45
 1148 003c 04F8013B 		strb	r3, [r4], #1
 1149              	.LVL112:
 1150              	.L108:
 466:src/display.c **** #endif
 1151              		.loc 1 466 7 is_stmt 1 view .LVU372
 1152 0040 01AF     		add	r7, sp, #4
 1153 0042 3846     		mov	r0, r7
 1154 0044 0422     		movs	r2, #4
 1155 0046 0021     		movs	r1, #0
 1156 0048 FFF7FEFF 		bl	xset
 1157              	.LVL113:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1158              		.loc 1 468 7 view .LVU373
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1159              		.loc 1 468 10 is_stmt 0 view .LVU374
 1160 004c 16F0050F 		tst	r6, #5
 1161 0050 2CD1     		bne	.L113
 1162              	.L115:
 489:src/display.c ****     no_number:
 1163              		.loc 1 489 2 is_stmt 1 view .LVU375
 1164 0052 2946     		mov	r1, r5
 1165 0054 3846     		mov	r0, r7
ARM GAS  /tmp/ccPv3rzq.s 			page 87


 1166 0056 FFF7FEFF 		bl	num_arg
 1167              	.LVL114:
 491:src/display.c ****     }
 1168              		.loc 1 491 7 view .LVU376
 1169 005a 2146     		mov	r1, r4
 1170 005c 3846     		mov	r0, r7
 1171 005e FFF7FEFF 		bl	set_exp_digits_string
 1172              	.LVL115:
 492:src/display.c **** 
 1173              		.loc 1 492 5 is_stmt 0 view .LVU377
 1174 0062 03B0     		add	sp, sp, #12
 1175              		.cfi_remember_state
 1176              		.cfi_def_cfa_offset 20
 1177              		@ sp needed
 1178 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 1179              	.LVL116:
 1180              	.L116:
 1181              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
 1182              		.loc 1 398 14 view .LVU378
 1183 0066 0127     		movs	r7, #1
 1184              	.LVL117:
 1185              	.L103:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1186              		.loc 1 421 21 is_stmt 1 view .LVU379
 1187              	.LBB219:
 1188              	.LBI219:
 254:src/display.c **** {
 1189              		.loc 1 254 13 view .LVU380
 1190              	.LBB220:
 256:src/display.c **** }
 1191              		.loc 1 256 3 view .LVU381
 1192 0068 8220     		movs	r0, #130
 1193 006a FFF7FEFF 		bl	set_dot
 1194              	.LVL118:
 1195              	.L109:
 256:src/display.c **** }
 1196              		.loc 1 256 3 is_stmt 0 view .LVU382
 1197              	.LBE220:
 1198              	.LBE219:
 423:src/display.c **** #else
 1199              		.loc 1 423 7 is_stmt 1 view .LVU383
 423:src/display.c **** #else
 1200              		.loc 1 423 10 is_stmt 0 view .LVU384
 1201 006e 002C     		cmp	r4, #0
 1202 0070 E6D0     		beq	.L108
 427:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1203              		.loc 1 427 4 is_stmt 1 view .LVU385
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1204              		.loc 1 441 6 view .LVU386
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1205              		.loc 1 441 23 is_stmt 0 view .LVU387
 1206 0072 224B     		ldr	r3, .L135+4
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1207              		.loc 1 441 10 view .LVU388
 1208 0074 03FB0455 		mla	r5, r3, r4, r5
 1209              	.LVL119:
ARM GAS  /tmp/ccPv3rzq.s 			page 88


 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1210              		.loc 1 443 6 is_stmt 1 view .LVU389
 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1211              		.loc 1 443 9 is_stmt 0 view .LVU390
 1212 0078 F306     		lsls	r3, r6, #27
 1213 007a 0AD5     		bpl	.L110
 1214              	.LBB221:
 447:src/display.c **** 		// Clear digits and separators
 1215              		.loc 1 447 15 view .LVU391
 1216 007c 4F26     		movs	r6, #79
 1217              	.LVL120:
 1218              	.L111:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1219              		.loc 1 449 3 is_stmt 1 discriminator 3 view .LVU392
 1220 007e 3046     		mov	r0, r6
 447:src/display.c **** 		// Clear digits and separators
 1221              		.loc 1 447 66 is_stmt 0 discriminator 3 view .LVU393
 1222 0080 0136     		adds	r6, r6, #1
 1223              	.LVL121:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1224              		.loc 1 449 3 discriminator 3 view .LVU394
 1225 0082 FFF7FEFF 		bl	clr_dot
 1226              	.LVL122:
 447:src/display.c **** 		// Clear digits and separators
 1227              		.loc 1 447 66 is_stmt 1 discriminator 3 view .LVU395
 447:src/display.c **** 		// Clear digits and separators
 1228              		.loc 1 447 41 discriminator 3 view .LVU396
 447:src/display.c **** 		// Clear digits and separators
 1229              		.loc 1 447 8 is_stmt 0 discriminator 3 view .LVU397
 1230 0086 632E     		cmp	r6, #99
 1231 0088 F9D1     		bne	.L111
 450:src/display.c **** 	    }
 1232              		.loc 1 450 8 is_stmt 1 view .LVU398
 1233 008a 3E21     		movs	r1, #62
 1234 008c 5120     		movs	r0, #81
 1235 008e FFF7FEFF 		bl	set_dig
 1236              	.LVL123:
 1237              	.L110:
 450:src/display.c **** 	    }
 1238              		.loc 1 450 8 is_stmt 0 view .LVU399
 1239              	.LBE221:
 453:src/display.c **** 	      CLR_EXP_SIGN;
 1240              		.loc 1 453 6 is_stmt 1 view .LVU400
 453:src/display.c **** 	      CLR_EXP_SIGN;
 1241              		.loc 1 453 9 is_stmt 0 view .LVU401
 1242 0092 47BB     		cbnz	r7, .L134
 1243              	.L112:
 457:src/display.c **** 	    flags = 1;
 1244              		.loc 1 457 6 is_stmt 1 view .LVU402
 1245 0094 04F13001 		add	r1, r4, #48
 1246 0098 6320     		movs	r0, #99
 466:src/display.c **** #endif
 1247              		.loc 1 466 7 is_stmt 0 view .LVU403
 1248 009a 01AF     		add	r7, sp, #4
 457:src/display.c **** 	    flags = 1;
 1249              		.loc 1 457 6 view .LVU404
 1250 009c FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccPv3rzq.s 			page 89


 1251              	.LVL124:
 458:src/display.c **** 	  }
 1252              		.loc 1 458 6 is_stmt 1 view .LVU405
 466:src/display.c **** #endif
 1253              		.loc 1 466 7 view .LVU406
 1254 00a0 3846     		mov	r0, r7
 1255 00a2 0422     		movs	r2, #4
 1256 00a4 0021     		movs	r1, #0
 1257 00a6 FFF7FEFF 		bl	xset
 1258              	.LVL125:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1259              		.loc 1 468 7 view .LVU407
 466:src/display.c **** #endif
 1260              		.loc 1 466 7 is_stmt 0 view .LVU408
 1261 00aa 0024     		movs	r4, #0
 1262              	.LVL126:
 1263              	.L113:
 469:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1264              		.loc 1 469 2 is_stmt 1 view .LVU409
 1265 00ac 2946     		mov	r1, r5
 1266 00ae 0322     		movs	r2, #3
 1267 00b0 3846     		mov	r0, r7
 1268 00b2 FFF7FEFF 		bl	num_arg_0
 1269              	.LVL127:
 491:src/display.c ****     }
 1270              		.loc 1 491 7 view .LVU410
 1271 00b6 2146     		mov	r1, r4
 1272 00b8 3846     		mov	r0, r7
 1273 00ba FFF7FEFF 		bl	set_exp_digits_string
 1274              	.LVL128:
 492:src/display.c **** 
 1275              		.loc 1 492 5 is_stmt 0 view .LVU411
 1276 00be 03B0     		add	sp, sp, #12
 1277              		.cfi_remember_state
 1278              		.cfi_def_cfa_offset 20
 1279              		@ sp needed
 1280 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1281              	.LVL129:
 1282              	.L133:
 1283              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
 1284              		.loc 1 398 5 is_stmt 1 view .LVU412
 399:src/display.c ****   }
 1285              		.loc 1 399 5 view .LVU413
 402:src/display.c **** #endif
 1286              		.loc 1 402 13 is_stmt 0 view .LVU414
 1287 00c2 0D4C     		ldr	r4, .L135
 399:src/display.c ****   }
 1288              		.loc 1 399 9 view .LVU415
 1289 00c4 6D42     		rsbs	r5, r5, #0
 1290              	.LVL130:
 402:src/display.c **** #endif
 1291              		.loc 1 402 3 is_stmt 1 view .LVU416
 402:src/display.c **** #endif
 1292              		.loc 1 402 13 is_stmt 0 view .LVU417
 1293 00c6 A4FB0534 		umull	r3, r4, r4, r5
 1294 00ca A409     		lsrs	r4, r4, #6
ARM GAS  /tmp/ccPv3rzq.s 			page 90


 1295              	.LVL131:
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1296              		.loc 1 404 3 is_stmt 1 view .LVU418
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1297              		.loc 1 404 6 is_stmt 0 view .LVU419
 1298 00cc 002A     		cmp	r2, #0
 1299 00ce CAD0     		beq	.L116
 407:src/display.c **** #else
 1300              		.loc 1 407 5 is_stmt 1 view .LVU420
 407:src/display.c **** #else
 1301              		.loc 1 407 8 is_stmt 0 view .LVU421
 1302 00d0 002C     		cmp	r4, #0
 1303 00d2 B1D1     		bne	.L104
 414:src/display.c **** #else
 1304              		.loc 1 414 12 is_stmt 1 view .LVU422
 414:src/display.c **** #else
 1305              		.loc 1 414 16 is_stmt 0 view .LVU423
 1306 00d4 1446     		mov	r4, r2
 1307              	.LVL132:
 414:src/display.c **** #else
 1308              		.loc 1 414 19 view .LVU424
 1309 00d6 6523     		movs	r3, #101
 1310 00d8 04F8013B 		strb	r3, [r4], #1
 1311              	.LVL133:
 418:src/display.c ****     }
 1312              		.loc 1 418 7 is_stmt 1 view .LVU425
 414:src/display.c **** #else
 1313              		.loc 1 414 16 is_stmt 0 view .LVU426
 1314 00dc 2246     		mov	r2, r4
 1315 00de ABE7     		b	.L104
 1316              	.LVL134:
 1317              	.L106:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1318              		.loc 1 421 7 is_stmt 1 view .LVU427
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1319              		.loc 1 421 10 is_stmt 0 view .LVU428
 1320 00e0 002F     		cmp	r7, #0
 1321 00e2 C4D0     		beq	.L109
 1322 00e4 C0E7     		b	.L103
 1323              	.LVL135:
 1324              	.L134:
 454:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1325              		.loc 1 454 8 is_stmt 1 view .LVU429
 1326              	.LBB222:
 1327              	.LBI222:
 259:src/display.c **** {
 1328              		.loc 1 259 13 view .LVU430
 1329              	.LBB223:
 261:src/display.c **** }
 1330              		.loc 1 261 3 view .LVU431
 1331 00e6 8220     		movs	r0, #130
 1332 00e8 FFF7FEFF 		bl	clr_dot
 1333              	.LVL136:
 1334              	.LBE223:
 1335              	.LBE222:
 455:src/display.c **** 	    }
 1336              		.loc 1 455 8 view .LVU432
ARM GAS  /tmp/ccPv3rzq.s 			page 91


 1337 00ec 2D21     		movs	r1, #45
 1338 00ee 5A20     		movs	r0, #90
 1339 00f0 FFF7FEFF 		bl	set_dig
 1340              	.LVL137:
 1341 00f4 CEE7     		b	.L112
 1342              	.L136:
 1343 00f6 00BF     		.align	2
 1344              	.L135:
 1345 00f8 D34D6210 		.word	274877907
 1346 00fc 18FCFFFF 		.word	-1000
 1347              		.cfi_endproc
 1348              	.LFE14:
 1350              		.section	.text.set_annunciators,"ax",%progbits
 1351              		.align	1
 1352              		.p2align 2,,3
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	set_annunciators:
 1359              	.LFB32:
2527:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 1360              		.loc 1 2527 7 view -0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
2528:src/display.c **** 
 1364              		.loc 1 2528 2 view .LVU434
2527:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 1365              		.loc 1 2527 7 is_stmt 0 view .LVU435
 1366 0000 70B5     		push	{r4, r5, r6, lr}
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 6, -8
 1371              		.cfi_offset 14, -4
2528:src/display.c **** 
 1372              		.loc 1 2528 29 view .LVU436
 1373 0002 FFF7FEFF 		bl	get_trig_mode
 1374              	.LVL138:
2541:src/display.c **** #endif
 1375              		.loc 1 2541 14 view .LVU437
 1376 0006 2D4E     		ldr	r6, .L157
2528:src/display.c **** 
 1377              		.loc 1 2528 29 view .LVU438
 1378 0008 0446     		mov	r4, r0
2536:src/display.c **** #else
 1379              		.loc 1 2536 2 view .LVU439
 1380 000a 8820     		movs	r0, #136
 1381              	.LVL139:
2536:src/display.c **** #else
 1382              		.loc 1 2536 2 is_stmt 1 view .LVU440
 1383 000c FFF7FEFF 		bl	draw_dot
 1384              	.LVL140:
2541:src/display.c **** #endif
 1385              		.loc 1 2541 2 view .LVU441
 1386              	.LBB224:
ARM GAS  /tmp/ccPv3rzq.s 			page 92


 1387              	.LBI224:
 283:src/display.c ****   if (on)	set_dot(n);
 1388              		.loc 1 283 6 view .LVU442
 1389              	.LBB225:
 284:src/display.c ****   else	clr_dot(n);
 1390              		.loc 1 284 3 view .LVU443
 1391              	.LBE225:
 1392              	.LBE224:
2541:src/display.c **** #endif
 1393              		.loc 1 2541 14 is_stmt 0 view .LVU444
 1394 0010 3368     		ldr	r3, [r6]
 1395 0012 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1396              	.LBB228:
 1397              	.LBB226:
 284:src/display.c ****   else	clr_dot(n);
 1398              		.loc 1 284 6 view .LVU445
 1399 0016 03F04103 		and	r3, r3, #65
 1400 001a 412B     		cmp	r3, #65
 284:src/display.c ****   else	clr_dot(n);
 1401              		.loc 1 284 11 view .LVU446
 1402 001c 4FF08400 		mov	r0, #132
 284:src/display.c ****   else	clr_dot(n);
 1403              		.loc 1 284 6 view .LVU447
 1404 0020 42D1     		bne	.L138
 284:src/display.c ****   else	clr_dot(n);
 1405              		.loc 1 284 11 is_stmt 1 view .LVU448
 1406 0022 FFF7FEFF 		bl	set_dot
 1407              	.LVL141:
 1408              	.L139:
 284:src/display.c ****   else	clr_dot(n);
 1409              		.loc 1 284 11 is_stmt 0 view .LVU449
 1410              	.LBE226:
 1411              	.LBE228:
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1412              		.loc 1 2544 2 is_stmt 1 view .LVU450
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1413              		.loc 1 2544 19 is_stmt 0 view .LVU451
 1414 0026 264D     		ldr	r5, .L157+4
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1415              		.loc 1 2544 2 view .LVU452
 1416 0028 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 1417              	.LBB229:
 1418              	.LBB230:
 284:src/display.c ****   else	clr_dot(n);
 1419              		.loc 1 284 11 view .LVU453
 1420 002a 8620     		movs	r0, #134
 1421              	.LBE230:
 1422              	.LBE229:
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1423              		.loc 1 2544 2 view .LVU454
 1424 002c 23B9     		cbnz	r3, .L140
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1425              		.loc 1 2544 47 discriminator 2 view .LVU455
 1426 002e 6A69     		ldr	r2, [r5, #20]
 1427 0030 244B     		ldr	r3, .L157+8
 1428 0032 1340     		ands	r3, r3, r2
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
ARM GAS  /tmp/ccPv3rzq.s 			page 93


 1429              		.loc 1 2544 2 discriminator 2 view .LVU456
 1430 0034 002B     		cmp	r3, #0
 1431 0036 3DD0     		beq	.L155
 1432              	.L140:
 1433              	.LBB233:
 1434              	.LBB231:
 284:src/display.c ****   else	clr_dot(n);
 1435              		.loc 1 284 11 is_stmt 1 view .LVU457
 1436 0038 FFF7FEFF 		bl	set_dot
 1437              	.LVL142:
 1438              	.L141:
 1439              	.LBE231:
 1440              	.LBE233:
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1441              		.loc 1 2545 2 view .LVU458
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1442              		.loc 1 2545 31 is_stmt 0 view .LVU459
 1443 003c 224A     		ldr	r2, .L157+12
 1444 003e 6B69     		ldr	r3, [r5, #20]
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1445              		.loc 1 2545 2 view .LVU460
 1446 0040 1A42     		tst	r2, r3
 1447              	.LBB234:
 1448              	.LBB235:
 284:src/display.c ****   else	clr_dot(n);
 1449              		.loc 1 284 11 view .LVU461
 1450 0042 4FF08500 		mov	r0, #133
 1451              	.LBE235:
 1452              	.LBE234:
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1453              		.loc 1 2545 2 view .LVU462
 1454 0046 02D0     		beq	.L142
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1455              		.loc 1 2545 48 discriminator 1 view .LVU463
 1456 0048 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1457              		.loc 1 2545 2 discriminator 1 view .LVU464
 1458 004a DA06     		lsls	r2, r3, #27
 1459 004c 2FD4     		bmi	.L143
 1460              	.L142:
 1461              	.LVL143:
 1462              	.LBB238:
 1463              	.LBI234:
 283:src/display.c ****   if (on)	set_dot(n);
 1464              		.loc 1 283 6 is_stmt 1 view .LVU465
 1465              	.LBB236:
 284:src/display.c ****   else	clr_dot(n);
 1466              		.loc 1 284 3 view .LVU466
 285:src/display.c **** }
 1467              		.loc 1 285 8 view .LVU467
 1468 004e FFF7FEFF 		bl	clr_dot
 1469              	.LVL144:
 1470              	.L144:
 285:src/display.c **** }
 1471              		.loc 1 285 8 is_stmt 0 view .LVU468
 1472              	.LBE236:
 1473              	.LBE238:
ARM GAS  /tmp/ccPv3rzq.s 			page 94


2546:src/display.c **** 	//	set_IO_annunciator();
 1474              		.loc 1 2546 2 is_stmt 1 view .LVU469
 1475 0052 6820     		movs	r0, #104
 1476 0054 FFF7FEFF 		bl	get_user_flag
 1477              	.LVL145:
 1478              	.LBB239:
 1479              	.LBI239:
 283:src/display.c ****   if (on)	set_dot(n);
 1480              		.loc 1 283 6 view .LVU470
 1481              	.LBB240:
 284:src/display.c ****   else	clr_dot(n);
 1482              		.loc 1 284 3 view .LVU471
 284:src/display.c ****   else	clr_dot(n);
 1483              		.loc 1 284 6 is_stmt 0 view .LVU472
 1484 0058 10B3     		cbz	r0, .L145
 284:src/display.c ****   else	clr_dot(n);
 1485              		.loc 1 284 11 is_stmt 1 view .LVU473
 1486 005a 8320     		movs	r0, #131
 1487              	.LVL146:
 284:src/display.c ****   else	clr_dot(n);
 1488              		.loc 1 284 11 is_stmt 0 view .LVU474
 1489 005c FFF7FEFF 		bl	set_dot
 1490              	.LVL147:
 1491              	.L146:
 284:src/display.c ****   else	clr_dot(n);
 1492              		.loc 1 284 11 view .LVU475
 1493              	.LBE240:
 1494              	.LBE239:
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1495              		.loc 1 2551 2 is_stmt 1 view .LVU476
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1496              		.loc 1 2551 11 is_stmt 0 view .LVU477
 1497 0060 3368     		ldr	r3, [r6]
 1498 0062 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 1499 0066 03F00103 		and	r3, r3, #1
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1500              		.loc 1 2551 2 view .LVU478
 1501 006a 2343     		orrs	r3, r3, r4
 1502 006c 13F0FF0F 		tst	r3, #255
 1503              	.LBB242:
 1504              	.LBB243:
 284:src/display.c ****   else	clr_dot(n);
 1505              		.loc 1 284 11 view .LVU479
 1506 0070 4FF08C00 		mov	r0, #140
 1507              	.LBE243:
 1508              	.LBE242:
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1509              		.loc 1 2551 2 view .LVU480
 1510 0074 06D1     		bne	.L156
 1511              	.LVL148:
 1512              	.LBB246:
 1513              	.LBI242:
 283:src/display.c ****   if (on)	set_dot(n);
 1514              		.loc 1 283 6 is_stmt 1 view .LVU481
 1515              	.LBB244:
 284:src/display.c ****   else	clr_dot(n);
 1516              		.loc 1 284 3 view .LVU482
ARM GAS  /tmp/ccPv3rzq.s 			page 95


 284:src/display.c ****   else	clr_dot(n);
 1517              		.loc 1 284 11 view .LVU483
 1518 0076 FFF7FEFF 		bl	set_dot
 1519              	.LVL149:
 284:src/display.c ****   else	clr_dot(n);
 1520              		.loc 1 284 11 is_stmt 0 view .LVU484
 1521              	.LBE244:
 1522              	.LBE246:
2552:src/display.c ****       }
 1523              		.loc 1 2552 2 is_stmt 1 view .LVU485
 1524              	.L149:
 1525              	.LBB247:
 1526              	.LBI247:
 283:src/display.c ****   if (on)	set_dot(n);
 1527              		.loc 1 283 6 view .LVU486
 1528              	.LBB248:
 284:src/display.c ****   else	clr_dot(n);
 1529              		.loc 1 284 3 view .LVU487
 285:src/display.c **** }
 1530              		.loc 1 285 8 view .LVU488
 1531              	.LBE248:
 1532              	.LBE247:
2553:src/display.c **** 
 1533              		.loc 1 2553 7 is_stmt 0 view .LVU489
 1534 007a BDE87040 		pop	{r4, r5, r6, lr}
 1535              		.cfi_remember_state
 1536              		.cfi_restore 14
 1537              		.cfi_restore 6
 1538              		.cfi_restore 5
 1539              		.cfi_restore 4
 1540              		.cfi_def_cfa_offset 0
 1541              	.LVL150:
 1542              	.LBB252:
 1543              	.LBB249:
 285:src/display.c **** }
 1544              		.loc 1 285 8 view .LVU490
 1545 007e 8B20     		movs	r0, #139
 1546 0080 FFF7FEBF 		b	clr_dot
 1547              	.LVL151:
 1548              	.L156:
 1549              		.cfi_restore_state
 285:src/display.c **** }
 1550              		.loc 1 285 8 view .LVU491
 1551              	.LBE249:
 1552              	.LBE252:
 1553              	.LBB253:
 283:src/display.c ****   if (on)	set_dot(n);
 1554              		.loc 1 283 6 is_stmt 1 view .LVU492
 1555              	.LBB245:
 284:src/display.c ****   else	clr_dot(n);
 1556              		.loc 1 284 3 view .LVU493
 285:src/display.c **** }
 1557              		.loc 1 285 8 view .LVU494
 1558 0084 FFF7FEFF 		bl	clr_dot
 1559              	.LVL152:
 285:src/display.c **** }
 1560              		.loc 1 285 8 is_stmt 0 view .LVU495
ARM GAS  /tmp/ccPv3rzq.s 			page 96


 1561              	.LBE245:
 1562              	.LBE253:
2552:src/display.c ****       }
 1563              		.loc 1 2552 2 is_stmt 1 view .LVU496
2552:src/display.c ****       }
 1564              		.loc 1 2552 11 is_stmt 0 view .LVU497
 1565 0088 3368     		ldr	r3, [r6]
 1566 008a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2552:src/display.c ****       }
 1567              		.loc 1 2552 2 view .LVU498
 1568 008e DB07     		lsls	r3, r3, #31
 1569 0090 F3D4     		bmi	.L149
2552:src/display.c ****       }
 1570              		.loc 1 2552 2 discriminator 1 view .LVU499
 1571 0092 012C     		cmp	r4, #1
 1572 0094 F1D1     		bne	.L149
 1573              	.LVL153:
 1574              	.LBB254:
 283:src/display.c ****   if (on)	set_dot(n);
 1575              		.loc 1 283 6 is_stmt 1 view .LVU500
 1576              	.LBB250:
 284:src/display.c ****   else	clr_dot(n);
 1577              		.loc 1 284 3 view .LVU501
 284:src/display.c ****   else	clr_dot(n);
 1578              		.loc 1 284 11 view .LVU502
 1579              	.LBE250:
 1580              	.LBE254:
2553:src/display.c **** 
 1581              		.loc 1 2553 7 is_stmt 0 view .LVU503
 1582 0096 BDE87040 		pop	{r4, r5, r6, lr}
 1583              		.cfi_remember_state
 1584              		.cfi_restore 14
 1585              		.cfi_restore 6
 1586              		.cfi_restore 5
 1587              		.cfi_restore 4
 1588              		.cfi_def_cfa_offset 0
 1589              	.LVL154:
 1590              	.LBB255:
 1591              	.LBB251:
 284:src/display.c ****   else	clr_dot(n);
 1592              		.loc 1 284 11 view .LVU504
 1593 009a 8B20     		movs	r0, #139
 1594 009c FFF7FEBF 		b	set_dot
 1595              	.LVL155:
 1596              	.L145:
 1597              		.cfi_restore_state
 284:src/display.c ****   else	clr_dot(n);
 1598              		.loc 1 284 11 view .LVU505
 1599              	.LBE251:
 1600              	.LBE255:
 1601              	.LBB256:
 1602              	.LBB241:
 285:src/display.c **** }
 1603              		.loc 1 285 8 is_stmt 1 view .LVU506
 1604 00a0 8320     		movs	r0, #131
 1605              	.LVL156:
 285:src/display.c **** }
ARM GAS  /tmp/ccPv3rzq.s 			page 97


 1606              		.loc 1 285 8 is_stmt 0 view .LVU507
 1607 00a2 FFF7FEFF 		bl	clr_dot
 1608              	.LVL157:
 1609 00a6 DBE7     		b	.L146
 1610              	.LVL158:
 1611              	.L138:
 285:src/display.c **** }
 1612              		.loc 1 285 8 view .LVU508
 1613              	.LBE241:
 1614              	.LBE256:
 1615              	.LBB257:
 1616              	.LBB227:
 285:src/display.c **** }
 1617              		.loc 1 285 8 is_stmt 1 view .LVU509
 1618 00a8 FFF7FEFF 		bl	clr_dot
 1619              	.LVL159:
 285:src/display.c **** }
 1620              		.loc 1 285 8 is_stmt 0 view .LVU510
 1621 00ac BBE7     		b	.L139
 1622              	.LVL160:
 1623              	.L143:
 285:src/display.c **** }
 1624              		.loc 1 285 8 view .LVU511
 1625              	.LBE227:
 1626              	.LBE257:
 1627              	.LBB258:
 283:src/display.c ****   if (on)	set_dot(n);
 1628              		.loc 1 283 6 is_stmt 1 view .LVU512
 1629              	.LBB237:
 284:src/display.c ****   else	clr_dot(n);
 1630              		.loc 1 284 3 view .LVU513
 284:src/display.c ****   else	clr_dot(n);
 1631              		.loc 1 284 11 view .LVU514
 1632 00ae FFF7FEFF 		bl	set_dot
 1633              	.LVL161:
 1634 00b2 CEE7     		b	.L144
 1635              	.LVL162:
 1636              	.L155:
 284:src/display.c ****   else	clr_dot(n);
 1637              		.loc 1 284 11 is_stmt 0 view .LVU515
 1638              	.LBE237:
 1639              	.LBE258:
 1640              	.LBB259:
 1641              	.LBI229:
 283:src/display.c ****   if (on)	set_dot(n);
 1642              		.loc 1 283 6 is_stmt 1 view .LVU516
 1643              	.LBB232:
 284:src/display.c ****   else	clr_dot(n);
 1644              		.loc 1 284 3 view .LVU517
 285:src/display.c **** }
 1645              		.loc 1 285 8 view .LVU518
 1646 00b4 FFF7FEFF 		bl	clr_dot
 1647              	.LVL163:
 1648 00b8 C0E7     		b	.L141
 1649              	.L158:
 1650 00ba 00BF     		.align	2
 1651              	.L157:
ARM GAS  /tmp/ccPv3rzq.s 			page 98


 1652 00bc 00000000 		.word	main_ram
 1653 00c0 00000000 		.word	StateWhileOn
 1654 00c4 07000800 		.word	524295
 1655 00c8 00080800 		.word	526336
 1656              	.LBE232:
 1657              	.LBE259:
 1658              		.cfi_endproc
 1659              	.LFE32:
 1661              		.section	.text.set_separator.part.0,"ax",%progbits
 1662              		.align	1
 1663              		.p2align 2,,3
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu fpv4-sp-d16
 1669              	set_separator.part.0:
 1670              	.LVL164:
 1671              	.LFB49:
 308:src/display.c ****   if (sep == SEP_NONE)
 1672              		.loc 1 308 14 view -0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 315:src/display.c ****     set_dot(posn+7);
 1676              		.loc 1 315 5 view .LVU520
 308:src/display.c ****   if (sep == SEP_NONE)
 1677              		.loc 1 308 14 is_stmt 0 view .LVU521
 1678 0000 38B5     		push	{r3, r4, r5, lr}
 1679              		.cfi_def_cfa_offset 16
 1680              		.cfi_offset 3, -16
 1681              		.cfi_offset 4, -12
 1682              		.cfi_offset 5, -8
 1683              		.cfi_offset 14, -4
 308:src/display.c ****   if (sep == SEP_NONE)
 1684              		.loc 1 308 14 view .LVU522
 1685 0002 0D46     		mov	r5, r1
 1686 0004 0446     		mov	r4, r0
 1687              	.LVL165:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1688              		.loc 1 316 5 is_stmt 1 view .LVU523
 1689 0006 0238     		subs	r0, r0, #2
 1690              	.LVL166:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1691              		.loc 1 316 5 is_stmt 0 view .LVU524
 1692 0008 FFF7FEFF 		bl	set_dot
 1693              	.LVL167:
 317:src/display.c ****       set_dot(posn+8);
 1694              		.loc 1 317 5 is_stmt 1 view .LVU525
 317:src/display.c ****       set_dot(posn+8);
 1695              		.loc 1 317 8 is_stmt 0 view .LVU526
 1696 000c 012D     		cmp	r5, #1
 1697 000e 01D0     		beq	.L162
 1698              	.LVL168:
 321:src/display.c **** 
 1699              		.loc 1 321 1 view .LVU527
 1700 0010 0020     		movs	r0, #0
 1701 0012 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccPv3rzq.s 			page 99


 1702              	.LVL169:
 1703              	.L162:
 318:src/display.c ****   }
 1704              		.loc 1 318 7 is_stmt 1 view .LVU528
 1705 0014 601E     		subs	r0, r4, #1
 1706 0016 FFF7FEFF 		bl	set_dot
 1707              	.LVL170:
 321:src/display.c **** 
 1708              		.loc 1 321 1 is_stmt 0 view .LVU529
 1709 001a 0020     		movs	r0, #0
 1710 001c 38BD     		pop	{r3, r4, r5, pc}
 321:src/display.c **** 
 1711              		.loc 1 321 1 view .LVU530
 1712              		.cfi_endproc
 1713              	.LFE49:
 1715 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 1716              		.align	1
 1717              		.p2align 2,,3
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1721              		.fpu fpv4-sp-d16
 1723              	set_decimal.part.0:
 1724              	.LVL171:
 1725              	.LFB50:
 293:src/display.c ****   if (res) {
 1726              		.loc 1 293 14 is_stmt 1 view -0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1730              		.loc 1 297 5 view .LVU532
 293:src/display.c ****   if (res) {
 1731              		.loc 1 293 14 is_stmt 0 view .LVU533
 1732 0000 38B5     		push	{r3, r4, r5, lr}
 1733              		.cfi_def_cfa_offset 16
 1734              		.cfi_offset 3, -16
 1735              		.cfi_offset 4, -12
 1736              		.cfi_offset 5, -8
 1737              		.cfi_offset 14, -4
 293:src/display.c ****   if (res) {
 1738              		.loc 1 293 14 view .LVU534
 1739 0002 0446     		mov	r4, r0
 1740 0004 0D46     		mov	r5, r1
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1741              		.loc 1 297 5 view .LVU535
 1742 0006 0730     		adds	r0, r0, #7
 1743              	.LVL172:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1744              		.loc 1 297 5 view .LVU536
 1745 0008 FFF7FEFF 		bl	set_dot
 1746              	.LVL173:
 298:src/display.c ****       set_dot(posn+8);
 1747              		.loc 1 298 5 is_stmt 1 view .LVU537
 298:src/display.c ****       set_dot(posn+8);
 1748              		.loc 1 298 8 is_stmt 0 view .LVU538
 1749 000c 0DB9     		cbnz	r5, .L169
ARM GAS  /tmp/ccPv3rzq.s 			page 100


 1750              	.LVL174:
 301:src/display.c **** }
 1751              		.loc 1 301 3 is_stmt 1 view .LVU539
 302:src/display.c **** 
 1752              		.loc 1 302 1 is_stmt 0 view .LVU540
 1753 000e 0020     		movs	r0, #0
 1754 0010 38BD     		pop	{r3, r4, r5, pc}
 1755              	.LVL175:
 1756              	.L169:
 299:src/display.c ****   }
 1757              		.loc 1 299 7 is_stmt 1 view .LVU541
 1758 0012 04F10800 		add	r0, r4, #8
 1759 0016 FFF7FEFF 		bl	set_dot
 1760              	.LVL176:
 301:src/display.c **** }
 1761              		.loc 1 301 3 view .LVU542
 302:src/display.c **** 
 1762              		.loc 1 302 1 is_stmt 0 view .LVU543
 1763 001a 0020     		movs	r0, #0
 1764 001c 38BD     		pop	{r3, r4, r5, pc}
 302:src/display.c **** 
 1765              		.loc 1 302 1 view .LVU544
 1766              		.cfi_endproc
 1767              	.LFE50:
 1769 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1770              		.align	1
 1771              		.p2align 2,,3
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1775              		.fpu fpv4-sp-d16
 1777              	set_digits_string:
 1778              	.LVL177:
 1779              	.LFB12:
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1780              		.loc 1 346 55 is_stmt 1 view -0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1784              		.loc 1 347 3 view .LVU546
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1785              		.loc 1 346 55 is_stmt 0 view .LVU547
 1786 0000 38B5     		push	{r3, r4, r5, lr}
 1787              		.cfi_def_cfa_offset 16
 1788              		.cfi_offset 3, -16
 1789              		.cfi_offset 4, -12
 1790              		.cfi_offset 5, -8
 1791              		.cfi_offset 14, -4
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1792              		.loc 1 347 10 view .LVU548
 1793 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1794              		.loc 1 347 10 is_stmt 1 view .LVU549
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1795              		.loc 1 347 3 is_stmt 0 view .LVU550
 1796 0004 D3B1     		cbz	r3, .L170
ARM GAS  /tmp/ccPv3rzq.s 			page 101


 1797 0006 0546     		mov	r5, r0
 1798 0008 0C46     		mov	r4, r1
 1799 000a 06E0     		b	.L174
 1800              	.LVL178:
 1801              	.L172:
 1802              	.LBB260:
 1803              	.LBB261:
 341:src/display.c ****   return res;
 1804              		.loc 1 341 8 view .LVU551
 1805 000c 2046     		mov	r0, r4
 1806              	.LVL179:
 341:src/display.c ****   return res;
 1807              		.loc 1 341 8 view .LVU552
 1808 000e FFF7FEFF 		bl	set_dig
 1809              	.LVL180:
 342:src/display.c **** }
 1810              		.loc 1 342 3 is_stmt 1 view .LVU553
 342:src/display.c **** }
 1811              		.loc 1 342 3 is_stmt 0 view .LVU554
 1812              	.LBE261:
 1813              	.LBE260:
 352:src/display.c ****     }
 1814              		.loc 1 352 7 is_stmt 1 view .LVU555
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1815              		.loc 1 347 10 is_stmt 0 view .LVU556
 1816 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1817              	.LVL181:
 352:src/display.c ****     }
 1818              		.loc 1 352 9 view .LVU557
 1819 0016 0934     		adds	r4, r4, #9
 1820              	.LVL182:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1821              		.loc 1 347 24 is_stmt 1 view .LVU558
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1822              		.loc 1 347 10 view .LVU559
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1823              		.loc 1 347 3 is_stmt 0 view .LVU560
 1824 0018 83B1     		cbz	r3, .L170
 1825              	.LVL183:
 1826              	.L174:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1827              		.loc 1 348 5 is_stmt 1 view .LVU561
 349:src/display.c ****     else {
 1828              		.loc 1 349 7 view .LVU562
 1829              	.LBB264:
 1830              	.LBI264:
 293:src/display.c ****   if (res) {
 1831              		.loc 1 293 14 view .LVU563
 1832              	.LBB265:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1833              		.loc 1 294 3 view .LVU564
 1834              	.LBE265:
 1835              	.LBE264:
 351:src/display.c ****       j += SEGS_PER_DIGIT;
 1836              		.loc 1 351 7 view .LVU565
 1837              	.LBB268:
 1838              	.LBI260:
ARM GAS  /tmp/ccPv3rzq.s 			page 102


 339:src/display.c ****   if (res) *res++ = ch;
 1839              		.loc 1 339 14 view .LVU566
 1840              	.LBB262:
 340:src/display.c ****   else	set_dig(base, ch);
 1841              		.loc 1 340 3 view .LVU567
 341:src/display.c ****   return res;
 1842              		.loc 1 341 8 view .LVU568
 1843              	.LBE262:
 1844              	.LBE268:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1845              		.loc 1 348 21 is_stmt 0 view .LVU569
 1846 001a 03F0FD02 		and	r2, r3, #253
 1847 001e 2C2A     		cmp	r2, #44
 1848              	.LBB269:
 1849              	.LBB266:
 1850 0020 A4F10900 		sub	r0, r4, #9
 1851              	.LVL184:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1852              		.loc 1 348 21 view .LVU570
 1853              	.LBE266:
 1854              	.LBE269:
 1855              	.LBB270:
 1856              	.LBB263:
 341:src/display.c ****   return res;
 1857              		.loc 1 341 8 view .LVU571
 1858 0024 1946     		mov	r1, r3
 1859              	.LBE263:
 1860              	.LBE270:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1861              		.loc 1 348 21 view .LVU572
 1862 0026 F1D1     		bne	.L172
 1863              	.LBB271:
 1864              	.LBB267:
 1865 0028 B3F12E01 		subs	r1, r3, #46
 1866 002c 18BF     		it	ne
 1867 002e 0121     		movne	r1, #1
 1868 0030 FFF7FEFF 		bl	set_decimal.part.0
 1869              	.LVL185:
 301:src/display.c **** }
 1870              		.loc 1 301 3 is_stmt 1 view .LVU573
 301:src/display.c **** }
 1871              		.loc 1 301 3 is_stmt 0 view .LVU574
 1872              	.LBE267:
 1873              	.LBE271:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1874              		.loc 1 347 24 is_stmt 1 view .LVU575
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1875              		.loc 1 347 10 view .LVU576
 1876 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1877              	.LVL186:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1878              		.loc 1 347 3 is_stmt 0 view .LVU577
 1879 0038 002B     		cmp	r3, #0
 1880 003a EED1     		bne	.L174
 1881              	.LVL187:
 1882              	.L170:
 355:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 103


 1883              		.loc 1 355 1 view .LVU578
 1884 003c 38BD     		pop	{r3, r4, r5, pc}
 1885              		.cfi_endproc
 1886              	.LFE12:
 1888 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1889              		.align	2
 1890              	.LC0:
 1891 0000 4E614E00 		.ascii	"NaN\000"
 1892              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1893              		.align	1
 1894              		.p2align 2,,3
 1895              		.syntax unified
 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv4-sp-d16
 1900              	check_special_dn.isra.0:
 1901              	.LVL188:
 1902              	.LFB51:
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1903              		.loc 1 1551 18 is_stmt 1 view -0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1907              		.loc 1 1552 2 view .LVU580
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1908              		.loc 1 1552 5 is_stmt 0 view .LVU581
 1909 0000 10F07002 		ands	r2, r0, #112
 1910 0004 0BD0     		beq	.L188
1553:src/display.c **** 	    if (res) {
 1911              		.loc 1 1553 4 is_stmt 1 view .LVU582
1553:src/display.c **** 	    if (res) {
 1912              		.loc 1 1553 7 is_stmt 0 view .LVU583
 1913 0006 10F0300F 		tst	r0, #48
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1914              		.loc 1 1551 18 view .LVU584
 1915 000a 08B5     		push	{r3, lr}
 1916              		.cfi_def_cfa_offset 8
 1917              		.cfi_offset 3, -8
 1918              		.cfi_offset 14, -4
 1919 000c 0B46     		mov	r3, r1
1553:src/display.c **** 	    if (res) {
 1920              		.loc 1 1553 7 view .LVU585
 1921 000e 08D0     		beq	.L182
 1922              	.LVL189:
 1923              	.LBB274:
 1924              	.LBI274:
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1925              		.loc 1 1551 18 is_stmt 1 view .LVU586
 1926              	.LBB275:
1554:src/display.c **** 	      scopy(res, "NaN");
 1927              		.loc 1 1554 6 view .LVU587
1554:src/display.c **** 	      scopy(res, "NaN");
 1928              		.loc 1 1554 9 is_stmt 0 view .LVU588
 1929 0010 99B1     		cbz	r1, .L183
1555:src/display.c **** 	    } else {
 1930              		.loc 1 1555 8 is_stmt 1 view .LVU589
ARM GAS  /tmp/ccPv3rzq.s 			page 104


 1931 0012 0846     		mov	r0, r1
 1932 0014 1049     		ldr	r1, .L197
 1933              	.LVL190:
1555:src/display.c **** 	    } else {
 1934              		.loc 1 1555 8 is_stmt 0 view .LVU590
 1935 0016 FFF7FEFF 		bl	scopy
 1936              	.LVL191:
1555:src/display.c **** 	    } else {
 1937              		.loc 1 1555 8 view .LVU591
 1938 001a 0120     		movs	r0, #1
 1939              	.LBE275:
 1940              	.LBE274:
1574:src/display.c **** 
 1941              		.loc 1 1574 7 view .LVU592
 1942 001c 08BD     		pop	{r3, pc}
 1943              	.LVL192:
 1944              	.L188:
 1945              		.cfi_def_cfa_offset 0
 1946              		.cfi_restore 3
 1947              		.cfi_restore 14
1573:src/display.c ****       }
 1948              		.loc 1 1573 9 view .LVU593
 1949 001e 1046     		mov	r0, r2
1574:src/display.c **** 
 1950              		.loc 1 1574 7 view .LVU594
 1951 0020 7047     		bx	lr
 1952              	.L182:
 1953              		.cfi_def_cfa_offset 8
 1954              		.cfi_offset 3, -8
 1955              		.cfi_offset 14, -4
1561:src/display.c **** 	      if (res) *res++ = '-';
 1956              		.loc 1 1561 6 is_stmt 1 view .LVU595
1561:src/display.c **** 	      if (res) *res++ = '-';
 1957              		.loc 1 1561 9 is_stmt 0 view .LVU596
 1958 0022 0206     		lsls	r2, r0, #24
 1959 0024 04D4     		bmi	.L196
1565:src/display.c **** 	      *res++ = '\237';
 1960              		.loc 1 1565 6 is_stmt 1 view .LVU597
1565:src/display.c **** 	      *res++ = '\237';
 1961              		.loc 1 1565 9 is_stmt 0 view .LVU598
 1962 0026 89B1     		cbz	r1, .L187
 1963              	.LVL193:
 1964              	.L186:
1566:src/display.c **** 	    else {
 1965              		.loc 1 1566 8 is_stmt 1 view .LVU599
1566:src/display.c **** 	    else {
 1966              		.loc 1 1566 15 is_stmt 0 view .LVU600
 1967 0028 9F22     		movs	r2, #159
 1968 002a 1A70     		strb	r2, [r3]
1570:src/display.c **** 	  }
 1969              		.loc 1 1570 13 view .LVU601
 1970 002c 0120     		movs	r0, #1
1574:src/display.c **** 
 1971              		.loc 1 1574 7 view .LVU602
 1972 002e 08BD     		pop	{r3, pc}
 1973              	.LVL194:
 1974              	.L196:
ARM GAS  /tmp/ccPv3rzq.s 			page 105


1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1975              		.loc 1 1562 8 is_stmt 1 view .LVU603
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1976              		.loc 1 1562 11 is_stmt 0 view .LVU604
 1977 0030 41B1     		cbz	r1, .L185
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1978              		.loc 1 1562 17 is_stmt 1 view .LVU605
 1979              	.LVL195:
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1980              		.loc 1 1562 24 is_stmt 0 view .LVU606
 1981 0032 2D22     		movs	r2, #45
 1982 0034 03F8012B 		strb	r2, [r3], #1
 1983              	.LVL196:
1565:src/display.c **** 	      *res++ = '\237';
 1984              		.loc 1 1565 6 is_stmt 1 view .LVU607
 1985 0038 F6E7     		b	.L186
 1986              	.LVL197:
 1987              	.L183:
 1988              	.LBB277:
 1989              	.LBB276:
1557:src/display.c **** 	    }
 1990              		.loc 1 1557 8 view .LVU608
 1991 003a 0848     		ldr	r0, .L197+4
 1992 003c FFF7FEFF 		bl	set_digits_string
 1993              	.LVL198:
1557:src/display.c **** 	    }
 1994              		.loc 1 1557 8 is_stmt 0 view .LVU609
 1995 0040 0120     		movs	r0, #1
 1996              	.LBE276:
 1997              	.LBE277:
1574:src/display.c **** 
 1998              		.loc 1 1574 7 view .LVU610
 1999 0042 08BD     		pop	{r3, pc}
 2000              	.LVL199:
 2001              	.L185:
1563:src/display.c **** 	    }
 2002              		.loc 1 1563 13 is_stmt 1 view .LVU611
 2003 0044 2D21     		movs	r1, #45
 2004              	.LVL200:
1563:src/display.c **** 	    }
 2005              		.loc 1 1563 13 is_stmt 0 view .LVU612
 2006 0046 0920     		movs	r0, #9
 2007 0048 FFF7FEFF 		bl	set_dig
 2008              	.LVL201:
1565:src/display.c **** 	      *res++ = '\237';
 2009              		.loc 1 1565 6 is_stmt 1 view .LVU613
 2010              	.L187:
1568:src/display.c **** 	    }
 2011              		.loc 1 1568 8 view .LVU614
 2012 004c 0448     		ldr	r0, .L197+8
 2013 004e 1221     		movs	r1, #18
 2014 0050 FFF7FEFF 		bl	set_digits_string
 2015              	.LVL202:
1570:src/display.c **** 	  }
 2016              		.loc 1 1570 13 is_stmt 0 view .LVU615
 2017 0054 0120     		movs	r0, #1
1574:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 106


 2018              		.loc 1 1574 7 view .LVU616
 2019 0056 08BD     		pop	{r3, pc}
 2020              	.L198:
 2021              		.align	2
 2022              	.L197:
 2023 0058 00000000 		.word	.LC0
 2024 005c 00000000 		.word	.LANCHOR3
 2025 0060 00000000 		.word	.LANCHOR4
 2026              		.cfi_endproc
 2027              	.LFE51:
 2029              		.section	.text.set_x_hms,"ax",%progbits
 2030              		.align	1
 2031              		.p2align 2,,3
 2032              		.syntax unified
 2033              		.thumb
 2034              		.thumb_func
 2035              		.fpu fpv4-sp-d16
 2037              	set_x_hms:
 2038              	.LVL203:
 2039              	.LFB22:
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2040              		.loc 1 1619 62 is_stmt 1 view -0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 200
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
1620:src/display.c **** 	int j=0;
 2044              		.loc 1 1620 2 view .LVU618
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2045              		.loc 1 1621 2 view .LVU619
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2046              		.loc 1 1619 62 is_stmt 0 view .LVU620
 2047 0000 30B5     		push	{r4, r5, lr}
 2048              		.cfi_def_cfa_offset 12
 2049              		.cfi_offset 4, -12
 2050              		.cfi_offset 5, -8
 2051              		.cfi_offset 14, -4
 2052 0002 B5B0     		sub	sp, sp, #212
 2053              		.cfi_def_cfa_offset 224
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2054              		.loc 1 1619 62 view .LVU621
 2055 0004 0446     		mov	r4, r0
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2056              		.loc 1 1621 6 view .LVU622
 2057 0006 0023     		movs	r3, #0
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2058              		.loc 1 1625 6 view .LVU623
 2059 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2060              	.LVL204:
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2061              		.loc 1 1621 6 view .LVU624
 2062 000a 0393     		str	r3, [sp, #12]
1622:src/display.c **** 	unsigned int hr, min, sec, fs;
 2063              		.loc 1 1622 2 is_stmt 1 view .LVU625
 2064              	.LVL205:
1623:src/display.c **** 
 2065              		.loc 1 1623 2 view .LVU626
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
ARM GAS  /tmp/ccPv3rzq.s 			page 107


 2066              		.loc 1 1625 2 view .LVU627
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2067              		.loc 1 1619 62 is_stmt 0 view .LVU628
 2068 000c 0D46     		mov	r5, r1
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2069              		.loc 1 1625 6 view .LVU629
 2070 000e FFF7FEFF 		bl	check_special_dn.isra.0
 2071              	.LVL206:
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2072              		.loc 1 1625 5 view .LVU630
 2073 0012 48B1     		cbz	r0, .L200
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 2074              		.loc 1 1626 4 is_stmt 1 view .LVU631
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 2075              		.loc 1 1626 7 is_stmt 0 view .LVU632
 2076 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 2077 0016 5B06     		lsls	r3, r3, #25
 2078 0018 04D5     		bpl	.L199
1627:src/display.c **** 	  return;
 2079              		.loc 1 1627 6 is_stmt 1 view .LVU633
 2080              	.LVL207:
 2081              	.LBB278:
 2082              	.LBI278:
 339:src/display.c ****   if (res) *res++ = ch;
 2083              		.loc 1 339 14 view .LVU634
 2084              	.LBB279:
 340:src/display.c ****   else	set_dig(base, ch);
 2085              		.loc 1 340 3 view .LVU635
 340:src/display.c ****   else	set_dig(base, ch);
 2086              		.loc 1 340 6 is_stmt 0 view .LVU636
 2087 001a 002D     		cmp	r5, #0
 2088 001c 00F0BB80 		beq	.L203
 340:src/display.c ****   else	set_dig(base, ch);
 2089              		.loc 1 340 12 is_stmt 1 view .LVU637
 2090              	.LVL208:
 340:src/display.c ****   else	set_dig(base, ch);
 2091              		.loc 1 340 19 is_stmt 0 view .LVU638
 2092 0020 6F23     		movs	r3, #111
 2093 0022 2B70     		strb	r3, [r5]
 2094              	.LVL209:
 2095              	.L199:
 340:src/display.c ****   else	set_dig(base, ch);
 2096              		.loc 1 340 19 view .LVU639
 2097              	.LBE279:
 2098              	.LBE278:
1682:src/display.c **** 
 2099              		.loc 1 1682 7 view .LVU640
 2100 0024 35B0     		add	sp, sp, #212
 2101              		.cfi_remember_state
 2102              		.cfi_def_cfa_offset 12
 2103              		@ sp needed
 2104 0026 30BD     		pop	{r4, r5, pc}
 2105              	.LVL210:
 2106              	.L200:
 2107              		.cfi_restore_state
1631:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2108              		.loc 1 1631 2 is_stmt 1 view .LVU641
ARM GAS  /tmp/ccPv3rzq.s 			page 108


 2109 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2110              	.LVL211:
1632:src/display.c **** 	dn_abs(&a, rgx);
 2111              		.loc 1 1632 2 view .LVU642
 2112 002c 654A     		ldr	r2, .L234
 2113 002e 2146     		mov	r1, r4
 2114 0030 07A8     		add	r0, sp, #28
 2115 0032 FFF7FEFF 		bl	decNumberMod
 2116              	.LVL212:
1633:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2117              		.loc 1 1633 2 view .LVU643
 2118 0036 2146     		mov	r1, r4
 2119 0038 19A8     		add	r0, sp, #100
 2120 003a FFF7FEFF 		bl	dn_abs
 2121              	.LVL213:
1634:src/display.c **** 	  if (res != NULL)
 2122              		.loc 1 1634 2 view .LVU644
1634:src/display.c **** 	  if (res != NULL)
 2123              		.loc 1 1634 5 is_stmt 0 view .LVU645
 2124 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2125 0042 002B     		cmp	r3, #0
 2126 0044 75DB     		blt	.L232
 2127              	.L204:
1642:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2128              		.loc 1 1642 2 is_stmt 1 view .LVU646
 2129 0046 07A9     		add	r1, sp, #28
 2130 0048 10A8     		add	r0, sp, #64
 2131 004a FFF7FEFF 		bl	decNumberHR2HMS
 2132              	.LVL214:
1643:src/display.c **** 	decNumberRound(&u, &t);
 2133              		.loc 1 1643 2 view .LVU647
 2134 004e 0622     		movs	r2, #6
 2135 0050 10A9     		add	r1, sp, #64
 2136 0052 22A8     		add	r0, sp, #136
 2137 0054 FFF7FEFF 		bl	dn_mulpow10
 2138              	.LVL215:
1644:src/display.c **** 
 2139              		.loc 1 1644 2 view .LVU648
 2140 0058 22A9     		add	r1, sp, #136
 2141 005a 2BA8     		add	r0, sp, #172
 2142 005c FFF7FEFF 		bl	decNumberRound
 2143              	.LVL216:
1646:src/display.c **** 	hms_step(&u, &t, &sec);
 2144              		.loc 1 1646 2 view .LVU649
 2145 0060 2BA9     		add	r1, sp, #172
 2146 0062 22A8     		add	r0, sp, #136
 2147 0064 06AA     		add	r2, sp, #24
 2148 0066 FFF7FEFF 		bl	hms_step
 2149              	.LVL217:
1647:src/display.c **** 	hms_step(&t, &u, &min);
 2150              		.loc 1 1647 2 view .LVU650
 2151 006a 22A9     		add	r1, sp, #136
 2152 006c 2BA8     		add	r0, sp, #172
 2153 006e 05AA     		add	r2, sp, #20
 2154 0070 FFF7FEFF 		bl	hms_step
 2155              	.LVL218:
1648:src/display.c **** 	hr = dn_to_int(&t);
ARM GAS  /tmp/ccPv3rzq.s 			page 109


 2156              		.loc 1 1648 2 view .LVU651
 2157 0074 04AA     		add	r2, sp, #16
 2158 0076 2BA9     		add	r1, sp, #172
 2159 0078 22A8     		add	r0, sp, #136
 2160 007a FFF7FEFF 		bl	hms_step
 2161              	.LVL219:
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2162              		.loc 1 1649 2 view .LVU652
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2163              		.loc 1 1649 7 is_stmt 0 view .LVU653
 2164 007e 22A8     		add	r0, sp, #136
 2165 0080 FFF7FEFF 		bl	dn_to_int
 2166              	.LVL220:
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2167              		.loc 1 1650 33 view .LVU654
 2168 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2169              		.loc 1 1650 5 view .LVU655
 2170 0088 3B2A     		cmp	r2, #59
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2171              		.loc 1 1650 19 is_stmt 1 view .LVU656
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2172              		.loc 1 1650 23 is_stmt 0 view .LVU657
 2173 008a 82BF     		ittt	hi
 2174 008c 3C3A     		subhi	r2, r2, #60
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2175              		.loc 1 1650 33 view .LVU658
 2176 008e 0133     		addhi	r3, r3, #1
 2177 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1651:src/display.c **** 
 2178              		.loc 1 1651 2 is_stmt 1 view .LVU659
1651:src/display.c **** 
 2179              		.loc 1 1651 5 is_stmt 0 view .LVU660
 2180 0094 3B2B     		cmp	r3, #59
 2181 0096 02D9     		bls	.L209
1651:src/display.c **** 
 2182              		.loc 1 1651 19 is_stmt 1 discriminator 1 view .LVU661
1651:src/display.c **** 
 2183              		.loc 1 1651 23 is_stmt 0 discriminator 1 view .LVU662
 2184 0098 3C3B     		subs	r3, r3, #60
 2185 009a 0493     		str	r3, [sp, #16]
1651:src/display.c **** 
 2186              		.loc 1 1651 30 is_stmt 1 discriminator 1 view .LVU663
1651:src/display.c **** 
 2187              		.loc 1 1651 32 is_stmt 0 discriminator 1 view .LVU664
 2188 009c 0130     		adds	r0, r0, #1
 2189              	.LVL221:
 2190              	.L209:
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 2191              		.loc 1 1654 2 is_stmt 1 view .LVU665
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 2192              		.loc 1 1654 8 is_stmt 0 view .LVU666
 2193 009e 0123     		movs	r3, #1
 2194 00a0 0093     		str	r3, [sp]
 2195 00a2 2946     		mov	r1, r5
 2196 00a4 03AA     		add	r2, sp, #12
 2197 00a6 0423     		movs	r3, #4
ARM GAS  /tmp/ccPv3rzq.s 			page 110


 2198 00a8 FFF7FEFF 		bl	hms_render
 2199              	.LVL222:
1655:src/display.c **** 	j += SEGS_PER_DIGIT;
 2200              		.loc 1 1655 2 is_stmt 1 view .LVU667
 2201              	.LBB281:
 2202              	.LBI281:
 339:src/display.c ****   if (res) *res++ = ch;
 2203              		.loc 1 339 14 view .LVU668
 2204              	.LBB282:
 340:src/display.c ****   else	set_dig(base, ch);
 2205              		.loc 1 340 3 view .LVU669
 340:src/display.c ****   else	set_dig(base, ch);
 2206              		.loc 1 340 6 is_stmt 0 view .LVU670
 2207 00ac 0446     		mov	r4, r0
 2208              	.LVL223:
 340:src/display.c ****   else	set_dig(base, ch);
 2209              		.loc 1 340 6 view .LVU671
 2210 00ae 0028     		cmp	r0, #0
 2211 00b0 7CD0     		beq	.L210
 340:src/display.c ****   else	set_dig(base, ch);
 2212              		.loc 1 340 12 is_stmt 1 view .LVU672
 340:src/display.c ****   else	set_dig(base, ch);
 2213              		.loc 1 340 16 is_stmt 0 view .LVU673
 2214 00b2 0146     		mov	r1, r0
 2215              	.LVL224:
 340:src/display.c ****   else	set_dig(base, ch);
 2216              		.loc 1 340 19 view .LVU674
 2217 00b4 4023     		movs	r3, #64
 2218 00b6 01F8013B 		strb	r3, [r1], #1
 2219              	.LVL225:
 2220              	.L211:
 342:src/display.c **** }
 2221              		.loc 1 342 3 is_stmt 1 view .LVU675
 342:src/display.c **** }
 2222              		.loc 1 342 3 is_stmt 0 view .LVU676
 2223              	.LBE282:
 2224              	.LBE281:
1656:src/display.c **** 
 2225              		.loc 1 1656 2 is_stmt 1 view .LVU677
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2226              		.loc 1 1659 8 is_stmt 0 view .LVU678
 2227 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2228 00be 0122     		movs	r2, #1
1656:src/display.c **** 
 2229              		.loc 1 1656 4 view .LVU679
 2230 00c0 03F10904 		add	r4, r3, #9
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2231              		.loc 1 1659 8 view .LVU680
 2232 00c4 0092     		str	r2, [sp]
 2233 00c6 0223     		movs	r3, #2
 2234 00c8 03AA     		add	r2, sp, #12
1656:src/display.c **** 
 2235              		.loc 1 1656 4 view .LVU681
 2236 00ca 0394     		str	r4, [sp, #12]
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2237              		.loc 1 1659 2 is_stmt 1 view .LVU682
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
ARM GAS  /tmp/ccPv3rzq.s 			page 111


 2238              		.loc 1 1659 8 is_stmt 0 view .LVU683
 2239 00cc FFF7FEFF 		bl	hms_render
 2240              	.LVL226:
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
 2241              		.loc 1 1660 2 is_stmt 1 view .LVU684
 2242              	.LBB284:
 2243              	.LBI284:
 339:src/display.c ****   if (res) *res++ = ch;
 2244              		.loc 1 339 14 view .LVU685
 2245              	.LBB285:
 340:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 340 3 view .LVU686
 340:src/display.c ****   else	set_dig(base, ch);
 2247              		.loc 1 340 6 is_stmt 0 view .LVU687
 2248 00d0 0446     		mov	r4, r0
 2249 00d2 0028     		cmp	r0, #0
 2250 00d4 64D0     		beq	.L212
 340:src/display.c ****   else	set_dig(base, ch);
 2251              		.loc 1 340 12 is_stmt 1 view .LVU688
 340:src/display.c ****   else	set_dig(base, ch);
 2252              		.loc 1 340 16 is_stmt 0 view .LVU689
 2253 00d6 0146     		mov	r1, r0
 2254              	.LVL227:
 340:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 340 19 view .LVU690
 2256 00d8 2723     		movs	r3, #39
 2257 00da 01F8013B 		strb	r3, [r1], #1
 2258              	.LVL228:
 2259              	.L213:
 342:src/display.c **** }
 2260              		.loc 1 342 3 is_stmt 1 view .LVU691
 342:src/display.c **** }
 2261              		.loc 1 342 3 is_stmt 0 view .LVU692
 2262              	.LBE285:
 2263              	.LBE284:
1661:src/display.c **** 
 2264              		.loc 1 1661 2 is_stmt 1 view .LVU693
1661:src/display.c **** 
 2265              		.loc 1 1661 4 is_stmt 0 view .LVU694
 2266 00de 039B     		ldr	r3, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2267              		.loc 1 1664 8 view .LVU695
 2268 00e0 0598     		ldr	r0, [sp, #20]
 2269 00e2 0122     		movs	r2, #1
1661:src/display.c **** 
 2270              		.loc 1 1661 4 view .LVU696
 2271 00e4 03F10904 		add	r4, r3, #9
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2272              		.loc 1 1664 8 view .LVU697
 2273 00e8 0092     		str	r2, [sp]
 2274 00ea 0223     		movs	r3, #2
 2275 00ec 03AA     		add	r2, sp, #12
1661:src/display.c **** 
 2276              		.loc 1 1661 4 view .LVU698
 2277 00ee 0394     		str	r4, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2278              		.loc 1 1664 2 is_stmt 1 view .LVU699
ARM GAS  /tmp/ccPv3rzq.s 			page 112


1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2279              		.loc 1 1664 8 is_stmt 0 view .LVU700
 2280 00f0 FFF7FEFF 		bl	hms_render
 2281              	.LVL229:
1665:src/display.c **** 
 2282              		.loc 1 1665 2 is_stmt 1 view .LVU701
1665:src/display.c **** 
 2283              		.loc 1 1665 8 is_stmt 0 view .LVU702
 2284 00f4 344B     		ldr	r3, .L234+4
 2285 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2286              	.LVL230:
 2287              	.LBB287:
 2288              	.LBI287:
 293:src/display.c ****   if (res) {
 2289              		.loc 1 293 14 is_stmt 1 view .LVU703
 2290              	.LBB288:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 2291              		.loc 1 294 3 view .LVU704
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 2292              		.loc 1 294 6 is_stmt 0 view .LVU705
 2293 00f8 0028     		cmp	r0, #0
 2294 00fa 38D0     		beq	.L214
 295:src/display.c ****   } else {
 2295              		.loc 1 295 5 is_stmt 1 view .LVU706
 295:src/display.c ****   } else {
 2296              		.loc 1 295 12 is_stmt 0 view .LVU707
 2297 00fc 0029     		cmp	r1, #0
 295:src/display.c ****   } else {
 2298              		.loc 1 295 9 view .LVU708
 2299 00fe 0146     		mov	r1, r0
 2300              	.LVL231:
 295:src/display.c ****   } else {
 2301              		.loc 1 295 12 view .LVU709
 2302 0100 0CBF     		ite	eq
 2303 0102 2E23     		moveq	r3, #46
 2304 0104 2C23     		movne	r3, #44
 2305 0106 01F8013B 		strb	r3, [r1], #1
 2306              	.LVL232:
 2307              	.L216:
 301:src/display.c **** }
 2308              		.loc 1 301 3 is_stmt 1 view .LVU710
 301:src/display.c **** }
 2309              		.loc 1 301 3 is_stmt 0 view .LVU711
 2310              	.LBE288:
 2311              	.LBE287:
1668:src/display.c **** 
 2312              		.loc 1 1668 2 is_stmt 1 view .LVU712
1668:src/display.c **** 
 2313              		.loc 1 1668 8 is_stmt 0 view .LVU713
 2314 010a 0023     		movs	r3, #0
 2315 010c 0093     		str	r3, [sp]
 2316 010e 0698     		ldr	r0, [sp, #24]
 2317 0110 03AA     		add	r2, sp, #12
 2318 0112 0223     		movs	r3, #2
 2319 0114 FFF7FEFF 		bl	hms_render
 2320              	.LVL233:
1671:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccPv3rzq.s 			page 113


 2321              		.loc 1 1671 2 is_stmt 1 view .LVU714
 2322              	.LBB290:
 2323              	.LBI290:
 339:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 339 14 view .LVU715
 2325              	.LBB291:
 340:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 340 3 view .LVU716
 340:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 340 6 is_stmt 0 view .LVU717
 2328 0118 0446     		mov	r4, r0
 2329 011a 90B3     		cbz	r0, .L217
 340:src/display.c ****   else	set_dig(base, ch);
 2330              		.loc 1 340 12 is_stmt 1 view .LVU718
 2331              	.LVL234:
 340:src/display.c ****   else	set_dig(base, ch);
 2332              		.loc 1 340 19 is_stmt 0 view .LVU719
 2333 011c 2223     		movs	r3, #34
 2334 011e 0370     		strb	r3, [r0]
 2335              	.LVL235:
 342:src/display.c **** }
 2336              		.loc 1 342 3 is_stmt 1 view .LVU720
 342:src/display.c **** }
 2337              		.loc 1 342 3 is_stmt 0 view .LVU721
 2338              	.LBE291:
 2339              	.LBE290:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2340              		.loc 1 1675 2 is_stmt 1 view .LVU722
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2341              		.loc 1 1675 6 is_stmt 0 view .LVU723
 2342 0120 2849     		ldr	r1, .L234
 2343 0122 19A8     		add	r0, sp, #100
 2344              	.LVL236:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2345              		.loc 1 1675 6 view .LVU724
 2346 0124 FFF7FEFF 		bl	dn_lt
 2347              	.LVL237:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2348              		.loc 1 1675 5 view .LVU725
 2349 0128 78B9     		cbnz	r0, .L233
1676:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2350              		.loc 1 1676 4 is_stmt 1 view .LVU726
 2351              	.LVL238:
 2352              	.LBB294:
 2353              	.LBI294:
 339:src/display.c ****   if (res) *res++ = ch;
 2354              		.loc 1 339 14 view .LVU727
 2355              	.LBB295:
 340:src/display.c ****   else	set_dig(base, ch);
 2356              		.loc 1 340 3 view .LVU728
 340:src/display.c ****   else	set_dig(base, ch);
 2357              		.loc 1 340 12 view .LVU729
 340:src/display.c ****   else	set_dig(base, ch);
 2358              		.loc 1 340 19 is_stmt 0 view .LVU730
 2359 012a 6F23     		movs	r3, #111
 2360 012c 6370     		strb	r3, [r4, #1]
 2361              	.LBE295:
ARM GAS  /tmp/ccPv3rzq.s 			page 114


 2362              	.LBE294:
1682:src/display.c **** 
 2363              		.loc 1 1682 7 view .LVU731
 2364 012e 35B0     		add	sp, sp, #212
 2365              		.cfi_remember_state
 2366              		.cfi_def_cfa_offset 12
 2367              		@ sp needed
 2368 0130 30BD     		pop	{r4, r5, pc}
 2369              	.LVL239:
 2370              	.L232:
 2371              		.cfi_restore_state
1635:src/display.c **** 	    *res++ += '-';
 2372              		.loc 1 1635 4 is_stmt 1 view .LVU732
1635:src/display.c **** 	    *res++ += '-';
 2373              		.loc 1 1635 7 is_stmt 0 view .LVU733
 2374 0132 15B3     		cbz	r5, .L205
1636:src/display.c **** 	  else
 2375              		.loc 1 1636 6 is_stmt 1 view .LVU734
1636:src/display.c **** 	  else
 2376              		.loc 1 1636 10 is_stmt 0 view .LVU735
 2377 0134 2B46     		mov	r3, r5
 2378              	.LVL240:
1636:src/display.c **** 	  else
 2379              		.loc 1 1636 13 view .LVU736
 2380 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2381              	.LVL241:
1636:src/display.c **** 	  else
 2382              		.loc 1 1636 13 view .LVU737
 2383 013a 2D32     		adds	r2, r2, #45
 2384 013c 2A70     		strb	r2, [r5]
1636:src/display.c **** 	  else
 2385              		.loc 1 1636 10 view .LVU738
 2386 013e 1D46     		mov	r5, r3
 2387              	.LVL242:
 2388              	.L206:
1639:src/display.c **** 	}
 2389              		.loc 1 1639 4 is_stmt 1 view .LVU739
 2390 0140 07A9     		add	r1, sp, #28
 2391 0142 0846     		mov	r0, r1
 2392 0144 FFF7FEFF 		bl	dn_minus
 2393              	.LVL243:
 2394 0148 7DE7     		b	.L204
 2395              	.LVL244:
 2396              	.L233:
 2397              	.LBB296:
 2398              	.LBB292:
 340:src/display.c ****   else	set_dig(base, ch);
 2399              		.loc 1 340 16 is_stmt 0 view .LVU740
 2400 014a 0134     		adds	r4, r4, #1
 2401              	.LVL245:
 2402              	.L220:
 340:src/display.c ****   else	set_dig(base, ch);
 2403              		.loc 1 340 16 view .LVU741
 2404              	.LBE292:
 2405              	.LBE296:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2406              		.loc 1 1677 9 is_stmt 1 view .LVU742
ARM GAS  /tmp/ccPv3rzq.s 			page 115


1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2407              		.loc 1 1677 15 is_stmt 0 view .LVU743
 2408 014c 19A8     		add	r0, sp, #100
 2409 014e FFF7FEFF 		bl	dn_eq0
 2410              	.LVL246:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2411              		.loc 1 1677 12 view .LVU744
 2412 0152 0028     		cmp	r0, #0
 2413 0154 7FF466AF 		bne	.L199
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2414              		.loc 1 1678 4 is_stmt 1 view .LVU745
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2415              		.loc 1 1678 8 is_stmt 0 view .LVU746
 2416 0158 1C48     		ldr	r0, .L234+8
 2417 015a 19A9     		add	r1, sp, #100
 2418 015c FFF7FEFF 		bl	dn_lt
 2419              	.LVL247:
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2420              		.loc 1 1678 7 view .LVU747
 2421 0160 0028     		cmp	r0, #0
 2422 0162 7FF45FAF 		bne	.L199
1679:src/display.c **** 	  }
 2423              		.loc 1 1679 6 is_stmt 1 view .LVU748
 2424              	.LVL248:
 2425              	.LBB297:
 2426              	.LBI297:
 339:src/display.c ****   if (res) *res++ = ch;
 2427              		.loc 1 339 14 view .LVU749
 2428              	.LBB298:
 340:src/display.c ****   else	set_dig(base, ch);
 2429              		.loc 1 340 3 view .LVU750
 340:src/display.c ****   else	set_dig(base, ch);
 2430              		.loc 1 340 6 is_stmt 0 view .LVU751
 2431 0166 3CB3     		cbz	r4, .L222
 340:src/display.c ****   else	set_dig(base, ch);
 2432              		.loc 1 340 12 is_stmt 1 view .LVU752
 2433              	.LVL249:
 340:src/display.c ****   else	set_dig(base, ch);
 2434              		.loc 1 340 19 is_stmt 0 view .LVU753
 2435 0168 7523     		movs	r3, #117
 2436 016a 2370     		strb	r3, [r4]
 2437 016c 5AE7     		b	.L199
 2438              	.LVL250:
 2439              	.L214:
 340:src/display.c ****   else	set_dig(base, ch);
 2440              		.loc 1 340 19 view .LVU754
 2441              	.LBE298:
 2442              	.LBE297:
1665:src/display.c **** 
 2443              		.loc 1 1665 8 view .LVU755
 2444 016e 0398     		ldr	r0, [sp, #12]
 2445              	.LVL251:
 2446              	.LBB300:
 2447              	.LBB289:
1665:src/display.c **** 
 2448              		.loc 1 1665 8 view .LVU756
 2449 0170 0938     		subs	r0, r0, #9
ARM GAS  /tmp/ccPv3rzq.s 			page 116


 2450 0172 FFF7FEFF 		bl	set_decimal.part.0
 2451              	.LVL252:
1665:src/display.c **** 
 2452              		.loc 1 1665 8 view .LVU757
 2453 0176 0146     		mov	r1, r0
 2454 0178 C7E7     		b	.L216
 2455              	.LVL253:
 2456              	.L205:
1665:src/display.c **** 
 2457              		.loc 1 1665 8 view .LVU758
 2458              	.LBE289:
 2459              	.LBE300:
1638:src/display.c **** 	  dn_minus(&x, &x);
 2460              		.loc 1 1638 6 is_stmt 1 view .LVU759
 2461              	.LBB301:
 2462              	.LBI301:
 244:src/display.c **** {
 2463              		.loc 1 244 13 view .LVU760
 2464              	.LBB302:
 246:src/display.c **** }
 2465              		.loc 1 246 3 view .LVU761
 2466 017a 8120     		movs	r0, #129
 2467 017c FFF7FEFF 		bl	set_dot
 2468              	.LVL254:
 247:src/display.c **** 
 2469              		.loc 1 247 1 is_stmt 0 view .LVU762
 2470 0180 DEE7     		b	.L206
 2471              	.LVL255:
 2472              	.L217:
 247:src/display.c **** 
 2473              		.loc 1 247 1 view .LVU763
 2474              	.LBE302:
 2475              	.LBE301:
 2476              	.LBB303:
 2477              	.LBB293:
 341:src/display.c ****   return res;
 2478              		.loc 1 341 8 is_stmt 1 view .LVU764
 2479 0182 0398     		ldr	r0, [sp, #12]
 2480              	.LVL256:
 341:src/display.c ****   return res;
 2481              		.loc 1 341 8 is_stmt 0 view .LVU765
 2482 0184 2221     		movs	r1, #34
 2483 0186 FFF7FEFF 		bl	set_dig
 2484              	.LVL257:
 342:src/display.c **** }
 2485              		.loc 1 342 3 is_stmt 1 view .LVU766
 342:src/display.c **** }
 2486              		.loc 1 342 3 is_stmt 0 view .LVU767
 2487              	.LBE293:
 2488              	.LBE303:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2489              		.loc 1 1675 2 is_stmt 1 view .LVU768
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2490              		.loc 1 1675 6 is_stmt 0 view .LVU769
 2491 018a 0E49     		ldr	r1, .L234
 2492 018c 19A8     		add	r0, sp, #100
 2493 018e FFF7FEFF 		bl	dn_lt
ARM GAS  /tmp/ccPv3rzq.s 			page 117


 2494              	.LVL258:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2495              		.loc 1 1675 5 view .LVU770
 2496 0192 0028     		cmp	r0, #0
 2497 0194 DAD1     		bne	.L220
 2498              	.LVL259:
 2499              	.L203:
 2500              	.LBB304:
 2501              	.LBB280:
 341:src/display.c ****   return res;
 2502              		.loc 1 341 8 is_stmt 1 view .LVU771
 2503 0196 6F21     		movs	r1, #111
 2504 0198 7A20     		movs	r0, #122
 2505 019a FFF7FEFF 		bl	set_dig
 2506              	.LVL260:
 2507              	.LBE280:
 2508              	.LBE304:
1628:src/display.c **** 	}
 2509              		.loc 1 1628 4 view .LVU772
 2510 019e 41E7     		b	.L199
 2511              	.LVL261:
 2512              	.L212:
 2513              	.LBB305:
 2514              	.LBB286:
 341:src/display.c ****   return res;
 2515              		.loc 1 341 8 view .LVU773
 2516 01a0 2721     		movs	r1, #39
 2517 01a2 0398     		ldr	r0, [sp, #12]
 2518              	.LVL262:
 341:src/display.c ****   return res;
 2519              		.loc 1 341 8 is_stmt 0 view .LVU774
 2520 01a4 FFF7FEFF 		bl	set_dig
 2521              	.LVL263:
 341:src/display.c ****   return res;
 2522              		.loc 1 341 8 view .LVU775
 2523 01a8 2146     		mov	r1, r4
 2524 01aa 98E7     		b	.L213
 2525              	.LVL264:
 2526              	.L210:
 341:src/display.c ****   return res;
 2527              		.loc 1 341 8 view .LVU776
 2528              	.LBE286:
 2529              	.LBE305:
 2530              	.LBB306:
 2531              	.LBB283:
 341:src/display.c ****   return res;
 2532              		.loc 1 341 8 is_stmt 1 view .LVU777
 2533 01ac 4021     		movs	r1, #64
 2534 01ae 0398     		ldr	r0, [sp, #12]
 2535              	.LVL265:
 341:src/display.c ****   return res;
 2536              		.loc 1 341 8 is_stmt 0 view .LVU778
 2537 01b0 FFF7FEFF 		bl	set_dig
 2538              	.LVL266:
 341:src/display.c ****   return res;
 2539              		.loc 1 341 8 view .LVU779
 2540 01b4 2146     		mov	r1, r4
ARM GAS  /tmp/ccPv3rzq.s 			page 118


 2541 01b6 80E7     		b	.L211
 2542              	.LVL267:
 2543              	.L222:
 341:src/display.c ****   return res;
 2544              		.loc 1 341 8 view .LVU780
 2545              	.LBE283:
 2546              	.LBE306:
 2547              	.LBB307:
 2548              	.LBB299:
 341:src/display.c ****   return res;
 2549              		.loc 1 341 8 is_stmt 1 view .LVU781
 2550 01b8 7521     		movs	r1, #117
 2551 01ba 7A20     		movs	r0, #122
 2552 01bc FFF7FEFF 		bl	set_dig
 2553              	.LVL268:
 2554 01c0 30E7     		b	.L199
 2555              	.L235:
 2556 01c2 00BF     		.align	2
 2557              	.L234:
 2558 01c4 00000000 		.word	const_9000
 2559 01c8 00000000 		.word	.LANCHOR1
 2560 01cc 00000000 		.word	const_hms_threshold
 2561              	.LBE299:
 2562              	.LBE307:
 2563              		.cfi_endproc
 2564              	.LFE22:
 2566              		.section	.text.set_x_fract,"ax",%progbits
 2567              		.align	1
 2568              		.p2align 2,,3
 2569              		.syntax unified
 2570              		.thumb
 2571              		.thumb_func
 2572              		.fpu fpv4-sp-d16
 2574              	set_x_fract:
 2575              	.LVL269:
 2576              	.LFB23:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2577              		.loc 1 1685 63 view -0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 216
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/display.c **** 	char buf[32], *p = buf;
 2581              		.loc 1 1686 2 view .LVU783
1687:src/display.c **** 	int j;
 2582              		.loc 1 1687 2 view .LVU784
1688:src/display.c **** 
 2583              		.loc 1 1688 2 view .LVU785
1690:src/display.c **** 	  return 1;
 2584              		.loc 1 1690 2 view .LVU786
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2585              		.loc 1 1685 63 is_stmt 0 view .LVU787
 2586 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2587              		.cfi_def_cfa_offset 20
 2588              		.cfi_offset 4, -20
 2589              		.cfi_offset 5, -16
 2590              		.cfi_offset 6, -12
 2591              		.cfi_offset 7, -8
ARM GAS  /tmp/ccPv3rzq.s 			page 119


 2592              		.cfi_offset 14, -4
 2593 0002 0646     		mov	r6, r0
 2594 0004 B7B0     		sub	sp, sp, #220
 2595              		.cfi_def_cfa_offset 240
1690:src/display.c **** 	  return 1;
 2596              		.loc 1 1690 6 view .LVU788
 2597 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2598              	.LVL270:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2599              		.loc 1 1685 63 view .LVU789
 2600 0008 0C46     		mov	r4, r1
1690:src/display.c **** 	  return 1;
 2601              		.loc 1 1690 6 view .LVU790
 2602 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2603              	.LVL271:
1690:src/display.c **** 	  return 1;
 2604              		.loc 1 1690 5 view .LVU791
 2605 000e 18B1     		cbz	r0, .L267
 2606              	.LVL272:
 2607              	.L256:
1691:src/display.c **** 	dn_abs(&x, rgx);
 2608              		.loc 1 1691 11 view .LVU792
 2609 0010 0125     		movs	r5, #1
 2610              	.L236:
1748:src/display.c **** 
 2611              		.loc 1 1748 7 view .LVU793
 2612 0012 2846     		mov	r0, r5
 2613 0014 37B0     		add	sp, sp, #220
 2614              		.cfi_remember_state
 2615              		.cfi_def_cfa_offset 20
 2616              		@ sp needed
 2617 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2618              	.LVL273:
 2619              	.L267:
 2620              		.cfi_restore_state
 2621              	.LBB316:
 2622              	.LBI316:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2623              		.loc 1 1685 18 is_stmt 1 view .LVU794
 2624              	.LBB317:
1692:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2625              		.loc 1 1692 2 view .LVU795
 2626 0018 3146     		mov	r1, r6
 2627 001a 0546     		mov	r5, r0
 2628 001c 09A8     		add	r0, sp, #36
 2629 001e FFF7FEFF 		bl	dn_abs
 2630              	.LVL274:
1693:src/display.c **** 	  return 0;
 2631              		.loc 1 1693 2 view .LVU796
1693:src/display.c **** 	  return 0;
 2632              		.loc 1 1693 6 is_stmt 0 view .LVU797
 2633 0022 5C49     		ldr	r1, .L272
 2634 0024 09A8     		add	r0, sp, #36
 2635 0026 FFF7FEFF 		bl	dn_lt
 2636              	.LVL275:
1693:src/display.c **** 	  return 0;
 2637              		.loc 1 1693 5 view .LVU798
ARM GAS  /tmp/ccPv3rzq.s 			page 120


 2638 002a 0028     		cmp	r0, #0
 2639 002c F1D0     		beq	.L236
1695:src/display.c **** 	  return 0;
 2640              		.loc 1 1695 2 is_stmt 1 view .LVU799
1695:src/display.c **** 	  return 0;
 2641              		.loc 1 1695 6 is_stmt 0 view .LVU800
 2642 002e 5A49     		ldr	r1, .L272+4
 2643 0030 09A8     		add	r0, sp, #36
 2644 0032 FFF7FEFF 		bl	dn_lt
 2645              	.LVL276:
1695:src/display.c **** 	  return 0;
 2646              		.loc 1 1695 5 view .LVU801
 2647 0036 0746     		mov	r7, r0
 2648 0038 0028     		cmp	r0, #0
 2649 003a EAD1     		bne	.L236
1697:src/display.c **** 	  if (res != NULL)
 2650              		.loc 1 1697 2 is_stmt 1 view .LVU802
1697:src/display.c **** 	  if (res != NULL)
 2651              		.loc 1 1697 5 is_stmt 0 view .LVU803
 2652 003c 96F90830 		ldrsb	r3, [r6, #8]
 2653 0040 002B     		cmp	r3, #0
 2654 0042 C0F28680 		blt	.L268
 2655              	.LVL277:
 2656              	.L241:
1703:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2657              		.loc 1 1703 2 is_stmt 1 view .LVU804
 2658 0046 09A9     		add	r1, sp, #36
 2659 0048 12A8     		add	r0, sp, #72
 2660 004a FFF7FEFF 		bl	decNumberFrac
 2661              	.LVL278:
1704:src/display.c **** 
 2662              		.loc 1 1704 2 view .LVU805
 2663 004e 12AA     		add	r2, sp, #72
 2664 0050 24A9     		add	r1, sp, #144
 2665 0052 1BA8     		add	r0, sp, #108
 2666 0054 FFF7FEFF 		bl	decNumber2Fraction
 2667              	.LVL279:
1706:src/display.c **** 	dn_compare(&t, &t, &w);
 2668              		.loc 1 1706 2 view .LVU806
 2669 0058 24AA     		add	r2, sp, #144
 2670 005a 1BA9     		add	r1, sp, #108
 2671 005c 2DA8     		add	r0, sp, #180
 2672 005e FFF7FEFF 		bl	dn_divide
 2673              	.LVL280:
1707:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2674              		.loc 1 1707 2 view .LVU807
 2675 0062 2DA9     		add	r1, sp, #180
 2676 0064 12AA     		add	r2, sp, #72
 2677 0066 0846     		mov	r0, r1
 2678 0068 FFF7FEFF 		bl	dn_compare
 2679              	.LVL281:
1708:src/display.c **** 
 2680              		.loc 1 1708 2 view .LVU808
 2681 006c 09A9     		add	r1, sp, #36
 2682 006e 12A8     		add	r0, sp, #72
 2683 0070 FFF7FEFF 		bl	decNumberTrunc
 2684              	.LVL282:
ARM GAS  /tmp/ccPv3rzq.s 			page 121


1710:src/display.c **** 	  dn_inc(&w);
 2685              		.loc 1 1710 2 view .LVU809
1710:src/display.c **** 	  dn_inc(&w);
 2686              		.loc 1 1710 6 is_stmt 0 view .LVU810
 2687 0074 24A9     		add	r1, sp, #144
 2688 0076 1BA8     		add	r0, sp, #108
 2689 0078 FFF7FEFF 		bl	dn_eq
 2690              	.LVL283:
1710:src/display.c **** 	  dn_inc(&w);
 2691              		.loc 1 1710 5 view .LVU811
 2692 007c 0028     		cmp	r0, #0
 2693 007e 70D1     		bne	.L269
 2694              	.L243:
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2695              		.loc 1 1715 2 is_stmt 1 view .LVU812
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2696              		.loc 1 1715 6 is_stmt 0 view .LVU813
 2697 0080 464B     		ldr	r3, .L272+8
 2698 0082 1B68     		ldr	r3, [r3]
 2699 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2700              		.loc 1 1715 5 view .LVU814
 2701 0088 DB06     		lsls	r3, r3, #27
 2702 008a 55D4     		bmi	.L244
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2703              		.loc 1 1716 4 is_stmt 1 view .LVU815
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2704              		.loc 1 1716 9 is_stmt 0 view .LVU816
 2705 008c 12A8     		add	r0, sp, #72
 2706 008e FFF7FEFF 		bl	dn_eq0
 2707              	.LVL284:
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2708              		.loc 1 1716 7 view .LVU817
 2709 0092 0028     		cmp	r0, #0
 2710 0094 6CD0     		beq	.L270
1687:src/display.c **** 	int j;
 2711              		.loc 1 1687 17 view .LVU818
 2712 0096 01AE     		add	r6, sp, #4
 2713              	.LVL285:
1687:src/display.c **** 	int j;
 2714              		.loc 1 1687 17 view .LVU819
 2715 0098 3546     		mov	r5, r6
 2716              	.L245:
 2717              	.LVL286:
1724:src/display.c **** 	*p++ = '/';
 2718              		.loc 1 1724 2 is_stmt 1 view .LVU820
1724:src/display.c **** 	*p++ = '/';
 2719              		.loc 1 1724 17 is_stmt 0 view .LVU821
 2720 009a 1BA8     		add	r0, sp, #108
 2721 009c FFF7FEFF 		bl	dn_to_int
 2722              	.LVL287:
 2723 00a0 0146     		mov	r1, r0
1724:src/display.c **** 	*p++ = '/';
 2724              		.loc 1 1724 6 view .LVU822
 2725 00a2 2846     		mov	r0, r5
 2726 00a4 FFF7FEFF 		bl	num_arg
 2727              	.LVL288:
ARM GAS  /tmp/ccPv3rzq.s 			page 122


1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2728              		.loc 1 1725 2 is_stmt 1 view .LVU823
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2729              		.loc 1 1725 4 is_stmt 0 view .LVU824
 2730 00a8 0546     		mov	r5, r0
 2731              	.LVL289:
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2732              		.loc 1 1725 7 view .LVU825
 2733 00aa 2F23     		movs	r3, #47
 2734 00ac 05F8013B 		strb	r3, [r5], #1
 2735              	.LVL290:
1726:src/display.c **** 	*p = '\0';
 2736              		.loc 1 1726 2 is_stmt 1 view .LVU826
1726:src/display.c **** 	*p = '\0';
 2737              		.loc 1 1726 17 is_stmt 0 view .LVU827
 2738 00b0 24A8     		add	r0, sp, #144
 2739 00b2 FFF7FEFF 		bl	dn_to_int
 2740              	.LVL291:
 2741 00b6 0146     		mov	r1, r0
1726:src/display.c **** 	*p = '\0';
 2742              		.loc 1 1726 6 view .LVU828
 2743 00b8 2846     		mov	r0, r5
 2744 00ba FFF7FEFF 		bl	num_arg
 2745              	.LVL292:
1727:src/display.c **** 	if ((p - 12) > buf) {
 2746              		.loc 1 1727 2 is_stmt 1 view .LVU829
1727:src/display.c **** 	if ((p - 12) > buf) {
 2747              		.loc 1 1727 5 is_stmt 0 view .LVU830
 2748 00be 0546     		mov	r5, r0
 2749 00c0 0023     		movs	r3, #0
 2750 00c2 05F80C39 		strb	r3, [r5], #-12
1728:src/display.c **** 	  p -= 12;
 2751              		.loc 1 1728 2 is_stmt 1 view .LVU831
1728:src/display.c **** 	  p -= 12;
 2752              		.loc 1 1728 5 is_stmt 0 view .LVU832
 2753 00c6 B542     		cmp	r5, r6
 2754 00c8 32D8     		bhi	.L246
 2755 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2756              	.LVL293:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2757              		.loc 1 1732 12 is_stmt 1 view .LVU833
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2758              		.loc 1 1732 2 is_stmt 0 view .LVU834
 2759 00ce 51B1     		cbz	r1, .L248
1731:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2760              		.loc 1 1731 11 view .LVU835
 2761 00d0 3546     		mov	r5, r6
 2762              	.LVL294:
 2763              	.L251:
1733:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2764              		.loc 1 1733 4 is_stmt 1 view .LVU836
 2765              	.LBB318:
 2766              	.LBI318:
 339:src/display.c ****   if (res) *res++ = ch;
 2767              		.loc 1 339 14 view .LVU837
 2768              	.LBB319:
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccPv3rzq.s 			page 123


 2769              		.loc 1 340 3 view .LVU838
 340:src/display.c ****   else	set_dig(base, ch);
 2770              		.loc 1 340 12 view .LVU839
 340:src/display.c ****   else	set_dig(base, ch);
 2771              		.loc 1 340 16 is_stmt 0 view .LVU840
 2772 00d2 2346     		mov	r3, r4
 2773              	.LVL295:
 340:src/display.c ****   else	set_dig(base, ch);
 2774              		.loc 1 340 6 view .LVU841
 2775 00d4 34B3     		cbz	r4, .L249
 2776              	.LVL296:
 340:src/display.c ****   else	set_dig(base, ch);
 2777              		.loc 1 340 19 view .LVU842
 2778 00d6 03F8011B 		strb	r1, [r3], #1
 2779              	.LVL297:
 340:src/display.c ****   else	set_dig(base, ch);
 2780              		.loc 1 340 16 view .LVU843
 2781 00da 1C46     		mov	r4, r3
 2782              	.LVL298:
 2783              	.L250:
 342:src/display.c **** }
 2784              		.loc 1 342 3 is_stmt 1 view .LVU844
 342:src/display.c **** }
 2785              		.loc 1 342 3 is_stmt 0 view .LVU845
 2786              	.LBE319:
 2787              	.LBE318:
1734:src/display.c **** 	}
 2788              		.loc 1 1734 4 is_stmt 1 view .LVU846
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2789              		.loc 1 1732 12 is_stmt 0 view .LVU847
 2790 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2791              	.LVL299:
1734:src/display.c **** 	}
 2792              		.loc 1 1734 6 view .LVU848
 2793 00e0 0937     		adds	r7, r7, #9
 2794              	.LVL300:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2795              		.loc 1 1732 24 is_stmt 1 view .LVU849
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1732 12 view .LVU850
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2797              		.loc 1 1732 2 is_stmt 0 view .LVU851
 2798 00e2 0029     		cmp	r1, #0
 2799 00e4 F5D1     		bne	.L251
 2800              	.LVL301:
 2801              	.L248:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2802              		.loc 1 1737 2 is_stmt 1 view .LVU852
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2803              		.loc 1 1737 6 is_stmt 0 view .LVU853
 2804 00e6 2DA8     		add	r0, sp, #180
 2805 00e8 FFF7FEFF 		bl	dn_eq0
 2806              	.LVL302:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2807              		.loc 1 1737 5 view .LVU854
 2808 00ec F0B9     		cbnz	r0, .L259
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
ARM GAS  /tmp/ccPv3rzq.s 			page 124


 2809              		.loc 1 1739 7 is_stmt 1 view .LVU855
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
 2810              		.loc 1 1739 10 is_stmt 0 view .LVU856
 2811 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1742:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2812              		.loc 1 1742 6 view .LVU857
 2813 00f2 2B4D     		ldr	r5, .L272+12
 2814 00f4 2B4B     		ldr	r3, .L272+16
 2815 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2816 00fa 38BF     		it	cc
 2817 00fc 1D46     		movcc	r5, r3
 2818              	.L252:
 2819              	.LVL303:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2820              		.loc 1 1743 26 is_stmt 1 view .LVU858
 2821              	.LBB322:
 2822              	.LBB320:
 340:src/display.c ****   else	set_dig(base, ch);
 2823              		.loc 1 340 16 is_stmt 0 view .LVU859
 2824 00fe 6C26     		movs	r6, #108
 2825 0100 2021     		movs	r1, #32
 2826 0102 08E0     		b	.L255
 2827              	.LVL304:
 2828              	.L271:
 340:src/display.c ****   else	set_dig(base, ch);
 2829              		.loc 1 340 16 view .LVU860
 2830              	.LBE320:
 2831              	.LBE322:
 2832              	.LBB323:
 2833              	.LBB324:
 340:src/display.c ****   else	set_dig(base, ch);
 2834              		.loc 1 340 19 view .LVU861
 2835 0104 03F8011B 		strb	r1, [r3], #1
 2836              	.LVL305:
 340:src/display.c ****   else	set_dig(base, ch);
 2837              		.loc 1 340 16 view .LVU862
 2838 0108 1C46     		mov	r4, r3
 2839              	.LVL306:
 2840              	.L254:
 342:src/display.c **** }
 2841              		.loc 1 342 3 is_stmt 1 view .LVU863
 342:src/display.c **** }
 2842              		.loc 1 342 3 is_stmt 0 view .LVU864
 2843              	.LBE324:
 2844              	.LBE323:
1745:src/display.c **** 	}
 2845              		.loc 1 1745 4 is_stmt 1 view .LVU865
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2846              		.loc 1 1743 26 is_stmt 0 view .LVU866
 2847 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2848              	.LVL307:
1745:src/display.c **** 	}
 2849              		.loc 1 1745 6 view .LVU867
 2850 010e 0736     		adds	r6, r6, #7
 2851              	.LVL308:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2852              		.loc 1 1743 38 is_stmt 1 view .LVU868
ARM GAS  /tmp/ccPv3rzq.s 			page 125


1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2853              		.loc 1 1743 26 view .LVU869
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2854              		.loc 1 1743 2 is_stmt 0 view .LVU870
 2855 0110 0029     		cmp	r1, #0
 2856 0112 3FF47DAF 		beq	.L256
 2857              	.LVL309:
 2858              	.L255:
1744:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2859              		.loc 1 1744 4 is_stmt 1 view .LVU871
 2860              	.LBB326:
 2861              	.LBI323:
 339:src/display.c ****   if (res) *res++ = ch;
 2862              		.loc 1 339 14 view .LVU872
 2863              	.LBB325:
 340:src/display.c ****   else	set_dig(base, ch);
 2864              		.loc 1 340 3 view .LVU873
 340:src/display.c ****   else	set_dig(base, ch);
 2865              		.loc 1 340 12 view .LVU874
 340:src/display.c ****   else	set_dig(base, ch);
 2866              		.loc 1 340 16 is_stmt 0 view .LVU875
 2867 0116 2346     		mov	r3, r4
 2868              	.LVL310:
 340:src/display.c ****   else	set_dig(base, ch);
 2869              		.loc 1 340 6 view .LVU876
 2870 0118 002C     		cmp	r4, #0
 2871 011a F3D1     		bne	.L271
 2872              	.LVL311:
 341:src/display.c ****   return res;
 2873              		.loc 1 341 8 is_stmt 1 view .LVU877
 2874 011c 3046     		mov	r0, r6
 2875 011e FFF7FEFF 		bl	set_dig
 2876              	.LVL312:
 341:src/display.c ****   return res;
 2877              		.loc 1 341 8 is_stmt 0 view .LVU878
 2878 0122 F2E7     		b	.L254
 2879              	.LVL313:
 2880              	.L249:
 341:src/display.c ****   return res;
 2881              		.loc 1 341 8 view .LVU879
 2882              	.LBE325:
 2883              	.LBE326:
 2884              	.LBB327:
 2885              	.LBB321:
 341:src/display.c ****   return res;
 2886              		.loc 1 341 8 is_stmt 1 view .LVU880
 2887 0124 3846     		mov	r0, r7
 2888 0126 FFF7FEFF 		bl	set_dig
 2889              	.LVL314:
 341:src/display.c ****   return res;
 2890              		.loc 1 341 8 is_stmt 0 view .LVU881
 2891 012a D7E7     		b	.L250
 2892              	.LVL315:
 2893              	.L259:
 341:src/display.c ****   return res;
 2894              		.loc 1 341 8 view .LVU882
 2895              	.LBE321:
ARM GAS  /tmp/ccPv3rzq.s 			page 126


 2896              	.LBE327:
1738:src/display.c **** 	else if (decNumberIsNegative(&t))
 2897              		.loc 1 1738 6 view .LVU883
 2898 012c 1E4D     		ldr	r5, .L272+20
 2899 012e E6E7     		b	.L252
 2900              	.LVL316:
 2901              	.L246:
1729:src/display.c **** 	  *p = '<';
 2902              		.loc 1 1729 4 is_stmt 1 view .LVU884
1730:src/display.c **** 	} else	p = buf;
 2903              		.loc 1 1730 4 view .LVU885
1730:src/display.c **** 	} else	p = buf;
 2904              		.loc 1 1730 7 is_stmt 0 view .LVU886
 2905 0130 3C21     		movs	r1, #60
 2906 0132 00F80C1C 		strb	r1, [r0, #-12]
 2907              	.LVL317:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2908              		.loc 1 1732 12 is_stmt 1 view .LVU887
 2909 0136 CCE7     		b	.L251
 2910              	.LVL318:
 2911              	.L244:
1721:src/display.c **** 	  dn_add(&n, &n, &x);
 2912              		.loc 1 1721 4 view .LVU888
 2913 0138 12A9     		add	r1, sp, #72
 2914 013a 24AA     		add	r2, sp, #144
 2915 013c 09A8     		add	r0, sp, #36
 2916 013e FFF7FEFF 		bl	dn_multiply
 2917              	.LVL319:
1722:src/display.c **** 	}
 2918              		.loc 1 1722 4 view .LVU889
 2919 0142 1BA9     		add	r1, sp, #108
 2920 0144 09AA     		add	r2, sp, #36
 2921 0146 0846     		mov	r0, r1
1687:src/display.c **** 	int j;
 2922              		.loc 1 1687 17 is_stmt 0 view .LVU890
 2923 0148 01AE     		add	r6, sp, #4
 2924              	.LVL320:
1722:src/display.c **** 	}
 2925              		.loc 1 1722 4 view .LVU891
 2926 014a FFF7FEFF 		bl	dn_add
 2927              	.LVL321:
1687:src/display.c **** 	int j;
 2928              		.loc 1 1687 17 view .LVU892
 2929 014e 3546     		mov	r5, r6
 2930 0150 A3E7     		b	.L245
 2931              	.LVL322:
 2932              	.L268:
1698:src/display.c **** 	    *res++ += '-';
 2933              		.loc 1 1698 4 is_stmt 1 view .LVU893
1698:src/display.c **** 	    *res++ += '-';
 2934              		.loc 1 1698 7 is_stmt 0 view .LVU894
 2935 0152 D4B1     		cbz	r4, .L242
1699:src/display.c **** 	  else
 2936              		.loc 1 1699 6 is_stmt 1 view .LVU895
1699:src/display.c **** 	  else
 2937              		.loc 1 1699 10 is_stmt 0 view .LVU896
 2938 0154 2346     		mov	r3, r4
ARM GAS  /tmp/ccPv3rzq.s 			page 127


 2939              	.LVL323:
1699:src/display.c **** 	  else
 2940              		.loc 1 1699 13 view .LVU897
 2941 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2942              	.LVL324:
1699:src/display.c **** 	  else
 2943              		.loc 1 1699 13 view .LVU898
 2944 015a 2D32     		adds	r2, r2, #45
 2945 015c 2270     		strb	r2, [r4]
1699:src/display.c **** 	  else
 2946              		.loc 1 1699 10 view .LVU899
 2947 015e 1C46     		mov	r4, r3
 2948              	.LVL325:
1699:src/display.c **** 	  else
 2949              		.loc 1 1699 10 view .LVU900
 2950 0160 71E7     		b	.L241
 2951              	.LVL326:
 2952              	.L269:
1711:src/display.c **** 	  decNumberZero(&n);
 2953              		.loc 1 1711 4 is_stmt 1 view .LVU901
 2954 0162 12A8     		add	r0, sp, #72
 2955 0164 FFF7FEFF 		bl	dn_inc
 2956              	.LVL327:
1712:src/display.c **** 	}
 2957              		.loc 1 1712 4 view .LVU902
 2958 0168 1BA8     		add	r0, sp, #108
 2959 016a FFF7FEFF 		bl	decNumberZero
 2960              	.LVL328:
 2961 016e 87E7     		b	.L243
 2962              	.L270:
1717:src/display.c **** 	    *p++ = ' ';
 2963              		.loc 1 1717 6 view .LVU903
1717:src/display.c **** 	    *p++ = ' ';
 2964              		.loc 1 1717 21 is_stmt 0 view .LVU904
 2965 0170 12A8     		add	r0, sp, #72
 2966 0172 FFF7FEFF 		bl	dn_to_int
 2967              	.LVL329:
1717:src/display.c **** 	    *p++ = ' ';
 2968              		.loc 1 1717 10 view .LVU905
 2969 0176 01AE     		add	r6, sp, #4
 2970              	.LVL330:
1717:src/display.c **** 	    *p++ = ' ';
 2971              		.loc 1 1717 21 view .LVU906
 2972 0178 0146     		mov	r1, r0
1717:src/display.c **** 	    *p++ = ' ';
 2973              		.loc 1 1717 10 view .LVU907
 2974 017a 3046     		mov	r0, r6
 2975 017c FFF7FEFF 		bl	num_arg
 2976              	.LVL331:
1718:src/display.c **** 	  }
 2977              		.loc 1 1718 6 is_stmt 1 view .LVU908
1718:src/display.c **** 	  }
 2978              		.loc 1 1718 8 is_stmt 0 view .LVU909
 2979 0180 0546     		mov	r5, r0
 2980              	.LVL332:
1718:src/display.c **** 	  }
 2981              		.loc 1 1718 11 view .LVU910
ARM GAS  /tmp/ccPv3rzq.s 			page 128


 2982 0182 2023     		movs	r3, #32
 2983 0184 05F8013B 		strb	r3, [r5], #1
 2984              	.LVL333:
1718:src/display.c **** 	  }
 2985              		.loc 1 1718 11 view .LVU911
 2986 0188 87E7     		b	.L245
 2987              	.LVL334:
 2988              	.L242:
1701:src/display.c **** 	}
 2989              		.loc 1 1701 6 is_stmt 1 view .LVU912
 2990              	.LBB328:
 2991              	.LBI328:
 244:src/display.c **** {
 2992              		.loc 1 244 13 view .LVU913
 2993              	.LBB329:
 246:src/display.c **** }
 2994              		.loc 1 246 3 view .LVU914
 2995 018a 8120     		movs	r0, #129
 2996 018c FFF7FEFF 		bl	set_dot
 2997              	.LVL335:
 247:src/display.c **** 
 2998              		.loc 1 247 1 is_stmt 0 view .LVU915
 2999 0190 59E7     		b	.L241
 3000              	.L273:
 3001 0192 00BF     		.align	2
 3002              	.L272:
 3003 0194 00000000 		.word	const_100000
 3004 0198 00000000 		.word	const_0_0001
 3005 019c 00000000 		.word	main_ram
 3006 01a0 00000000 		.word	.LANCHOR5
 3007 01a4 00000000 		.word	.LANCHOR7
 3008 01a8 00000000 		.word	.LANCHOR6
 3009              	.LBE329:
 3010              	.LBE328:
 3011              	.LBE317:
 3012              	.LBE316:
 3013              		.cfi_endproc
 3014              	.LFE23:
 3016              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 3017              		.align	2
 3018              	.LC1:
 3019 0000 42333435 		.ascii	"B34567o9D12345h\000"
 3019      36376F39 
 3019      44313233 
 3019      34356800 
 3020              		.section	.text.carry_overflow,"ax",%progbits
 3021              		.align	1
 3022              		.p2align 2,,3
 3023              		.syntax unified
 3024              		.thumb
 3025              		.thumb_func
 3026              		.fpu fpv4-sp-d16
 3028              	carry_overflow:
 3029              	.LFB15:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3030              		.loc 1 494 38 is_stmt 1 view -0
 3031              		.cfi_startproc
ARM GAS  /tmp/ccPv3rzq.s 			page 129


 3032              		@ args = 0, pretend = 0, frame = 0
 3033              		@ frame_needed = 0, uses_anonymous_args = 0
 495:src/display.c ****       int c;
 3034              		.loc 1 495 7 view .LVU917
 3035              	.LVL336:
 496:src/display.c ****       unsigned int b;
 3036              		.loc 1 496 7 view .LVU918
 497:src/display.c **** 
 3037              		.loc 1 497 7 view .LVU919
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 3038              		.loc 1 500 7 view .LVU920
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3039              		.loc 1 494 38 is_stmt 0 view .LVU921
 3040 0000 10B5     		push	{r4, lr}
 3041              		.cfi_def_cfa_offset 8
 3042              		.cfi_offset 4, -8
 3043              		.cfi_offset 14, -4
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 3044              		.loc 1 500 21 view .LVU922
 3045 0002 1A4B     		ldr	r3, .L287
 3046 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3047 0006 023B     		subs	r3, r3, #2
 3048 0008 DBB2     		uxtb	r3, r3
 3049 000a 032B     		cmp	r3, #3
 3050 000c 14D8     		bhi	.L275
 3051 000e 184A     		ldr	r2, .L287+4
 3052 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 3053              	.LVL337:
 509:src/display.c **** 	SET_EXP_SIGN;
 3054              		.loc 1 509 7 is_stmt 1 view .LVU923
 509:src/display.c **** 	SET_EXP_SIGN;
 3055              		.loc 1 509 18 is_stmt 0 view .LVU924
 3056 0014 A4F10B03 		sub	r3, r4, #11
 509:src/display.c **** 	SET_EXP_SIGN;
 3057              		.loc 1 509 10 view .LVU925
 3058 0018 042B     		cmp	r3, #4
 3059 001a 17D9     		bls	.L284
 3060              	.L277:
 511:src/display.c ****       set_dig(base, c);
 3061              		.loc 1 511 7 is_stmt 1 view .LVU926
 3062              	.LVL338:
 512:src/display.c **** 
 3063              		.loc 1 512 7 view .LVU927
 511:src/display.c ****       set_dig(base, c);
 3064              		.loc 1 511 28 is_stmt 0 view .LVU928
 3065 001c 154B     		ldr	r3, .L287+8
 3066 001e 1C44     		add	r4, r4, r3
 3067              	.LVL339:
 512:src/display.c **** 
 3068              		.loc 1 512 7 view .LVU929
 3069 0020 6C20     		movs	r0, #108
 3070 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 3071 0026 FFF7FEFF 		bl	set_dig
 3072              	.LVL340:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 3073              		.loc 1 515 7 is_stmt 1 view .LVU930
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
ARM GAS  /tmp/ccPv3rzq.s 			page 130


 3074              		.loc 1 515 11 is_stmt 0 view .LVU931
 3075 002a FFF7FEFF 		bl	get_carry
 3076              	.LVL341:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 3077              		.loc 1 515 10 view .LVU932
 3078 002e B8B9     		cbnz	r0, .L285
 3079              	.L278:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3080              		.loc 1 517 7 is_stmt 1 view .LVU933
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3081              		.loc 1 517 11 is_stmt 0 view .LVU934
 3082 0030 FFF7FEFF 		bl	get_overflow
 3083              	.LVL342:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3084              		.loc 1 517 10 view .LVU935
 3085 0034 70B9     		cbnz	r0, .L286
 519:src/display.c **** 
 3086              		.loc 1 519 5 view .LVU936
 3087 0036 10BD     		pop	{r4, pc}
 3088              	.LVL343:
 3089              	.L275:
 505:src/display.c ****       }
 3090              		.loc 1 505 16 is_stmt 1 view .LVU937
 505:src/display.c ****       }
 3091              		.loc 1 505 26 is_stmt 0 view .LVU938
 3092 0038 0F4B     		ldr	r3, .L287+12
 3093 003a 1B68     		ldr	r3, [r3]
 3094 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 3095 0040 2409     		lsrs	r4, r4, #4
 505:src/display.c ****       }
 3096              		.loc 1 505 35 view .LVU939
 3097 0042 0134     		adds	r4, r4, #1
 3098              	.LVL344:
 505:src/display.c ****       }
 3099              		.loc 1 505 39 is_stmt 1 view .LVU940
 509:src/display.c **** 	SET_EXP_SIGN;
 3100              		.loc 1 509 7 view .LVU941
 509:src/display.c **** 	SET_EXP_SIGN;
 3101              		.loc 1 509 18 is_stmt 0 view .LVU942
 3102 0044 A4F10B03 		sub	r3, r4, #11
 509:src/display.c **** 	SET_EXP_SIGN;
 3103              		.loc 1 509 10 view .LVU943
 3104 0048 042B     		cmp	r3, #4
 3105 004a E7D8     		bhi	.L277
 3106              	.L284:
 510:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3107              		.loc 1 510 2 is_stmt 1 view .LVU944
 3108              	.LBB336:
 3109              	.LBI336:
 254:src/display.c **** {
 3110              		.loc 1 254 13 view .LVU945
 3111              	.LBB337:
 256:src/display.c **** }
 3112              		.loc 1 256 3 view .LVU946
 3113 004c 8220     		movs	r0, #130
 3114 004e FFF7FEFF 		bl	set_dot
 3115              	.LVL345:
ARM GAS  /tmp/ccPv3rzq.s 			page 131


 257:src/display.c **** 
 3116              		.loc 1 257 1 is_stmt 0 view .LVU947
 3117 0052 E3E7     		b	.L277
 3118              	.LVL346:
 3119              	.L286:
 257:src/display.c **** 
 3120              		.loc 1 257 1 view .LVU948
 3121              	.LBE337:
 3122              	.LBE336:
 3123              	.LBB338:
 3124              	.LBI338:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3125              		.loc 1 494 17 is_stmt 1 view .LVU949
 3126              	.LBB339:
 518:src/display.c ****     }
 3127              		.loc 1 518 2 view .LVU950
 3128              	.LBE339:
 3129              	.LBE338:
 519:src/display.c **** 
 3130              		.loc 1 519 5 is_stmt 0 view .LVU951
 3131 0054 BDE81040 		pop	{r4, lr}
 3132              		.cfi_remember_state
 3133              		.cfi_restore 14
 3134              		.cfi_restore 4
 3135              		.cfi_def_cfa_offset 0
 3136              	.LVL347:
 3137              	.LBB341:
 3138              	.LBB340:
 518:src/display.c ****     }
 3139              		.loc 1 518 2 view .LVU952
 3140 0058 6F21     		movs	r1, #111
 3141 005a 7A20     		movs	r0, #122
 3142 005c FFF7FEBF 		b	set_dig
 3143              	.LVL348:
 3144              	.L285:
 3145              		.cfi_restore_state
 518:src/display.c ****     }
 3146              		.loc 1 518 2 view .LVU953
 3147              	.LBE340:
 3148              	.LBE341:
 516:src/display.c ****       if (get_overflow())
 3149              		.loc 1 516 2 is_stmt 1 view .LVU954
 3150 0060 6321     		movs	r1, #99
 3151 0062 7320     		movs	r0, #115
 3152 0064 FFF7FEFF 		bl	set_dig
 3153              	.LVL349:
 3154 0068 E2E7     		b	.L278
 3155              	.L288:
 3156 006a 00BF     		.align	2
 3157              	.L287:
 3158 006c 00000000 		.word	StateWhileOn
 3159 0070 00000000 		.word	.LANCHOR8
 3160 0074 00000000 		.word	.LC1
 3161 0078 00000000 		.word	main_ram
 3162              		.cfi_endproc
 3163              	.LFE15:
 3165              		.global	__aeabi_uldivmod
ARM GAS  /tmp/ccPv3rzq.s 			page 132


 3166              		.section	.text.set_int_x,"ax",%progbits
 3167              		.align	1
 3168              		.p2align 2,,3
 3169              		.syntax unified
 3170              		.thumb
 3171              		.thumb_func
 3172              		.fpu fpv4-sp-d16
 3174              	set_int_x:
 3175              	.LVL350:
 3176              	.LFB18:
1411:src/display.c **** 	const int ws = word_size();
 3177              		.loc 1 1411 67 view -0
 3178              		.cfi_startproc
 3179              		@ args = 0, pretend = 0, frame = 88
 3180              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/display.c **** 	const int ws = word_size();
 3181              		.loc 1 1411 67 is_stmt 0 view .LVU956
 3182 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3183              		.cfi_def_cfa_offset 36
 3184              		.cfi_offset 4, -36
 3185              		.cfi_offset 5, -32
 3186              		.cfi_offset 6, -28
 3187              		.cfi_offset 7, -24
 3188              		.cfi_offset 8, -20
 3189              		.cfi_offset 9, -16
 3190              		.cfi_offset 10, -12
 3191              		.cfi_offset 11, -8
 3192              		.cfi_offset 14, -4
 3193 0004 97B0     		sub	sp, sp, #92
 3194              		.cfi_def_cfa_offset 128
1411:src/display.c **** 	const int ws = word_size();
 3195              		.loc 1 1411 67 view .LVU957
 3196 0006 1546     		mov	r5, r2
 3197 0008 0646     		mov	r6, r0
 3198 000a 0F46     		mov	r7, r1
1412:src/display.c **** 	unsigned int b;
 3199              		.loc 1 1412 2 is_stmt 1 view .LVU958
1412:src/display.c **** 	unsigned int b;
 3200              		.loc 1 1412 17 is_stmt 0 view .LVU959
 3201 000c FFF7FEFF 		bl	word_size
 3202              	.LVL351:
1412:src/display.c **** 	unsigned int b;
 3203              		.loc 1 1412 17 view .LVU960
 3204 0010 CD4B     		ldr	r3, .L381
 3205 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3206 0014 023B     		subs	r3, r3, #2
 3207 0016 DBB2     		uxtb	r3, r3
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3208              		.loc 1 1418 6 view .LVU961
 3209 0018 0022     		movs	r2, #0
 3210 001a 032B     		cmp	r3, #3
1412:src/display.c **** 	unsigned int b;
 3211              		.loc 1 1412 17 view .LVU962
 3212 001c 8346     		mov	fp, r0
 3213              	.LVL352:
1413:src/display.c **** 	long long int vs = value;
 3214              		.loc 1 1413 2 is_stmt 1 view .LVU963
ARM GAS  /tmp/ccPv3rzq.s 			page 133


1414:src/display.c **** 	unsigned long long int v;
 3215              		.loc 1 1414 2 view .LVU964
1415:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3216              		.loc 1 1415 2 view .LVU965
1416:src/display.c **** 	int i, j, k;
 3217              		.loc 1 1416 2 view .LVU966
1417:src/display.c **** 	int sign = 0;
 3218              		.loc 1 1417 2 view .LVU967
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3219              		.loc 1 1418 2 view .LVU968
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3220              		.loc 1 1418 6 is_stmt 0 view .LVU969
 3221 001e 0492     		str	r2, [sp, #16]
1419:src/display.c **** 
 3222              		.loc 1 1419 2 is_stmt 1 view .LVU970
 3223              	.LVL353:
1421:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3224              		.loc 1 1421 2 view .LVU971
 3225 0020 00F24181 		bhi	.L290
 3226 0024 C94A     		ldr	r2, .L381+4
 3227 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3228              	.LVL354:
1429:src/display.c **** 	  IntMaxWindow = 0;
 3229              		.loc 1 1429 2 view .LVU972
1429:src/display.c **** 	  IntMaxWindow = 0;
 3230              		.loc 1 1429 5 is_stmt 0 view .LVU973
 3231 002a 002D     		cmp	r5, #0
 3232 002c 00F04181 		beq	.L372
 3233              	.LVL355:
 3234              	.L292:
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3235              		.loc 1 1434 2 is_stmt 1 view .LVU974
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3236              		.loc 1 1434 24 is_stmt 0 view .LVU975
 3237 0030 0AF1FF33 		add	r3, r10, #-1
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3238              		.loc 1 1434 30 view .LVU976
 3239 0034 47F67574 		movw	r4, #32629
 3240 0038 1C41     		asrs	r4, r4, r3
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3241              		.loc 1 1434 5 view .LVU977
 3242 003a 14F00104 		ands	r4, r4, #1
 3243 003e 40F0F380 		bne	.L373
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3244              		.loc 1 1451 4 is_stmt 1 view .LVU978
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3245              		.loc 1 1451 7 is_stmt 0 view .LVU979
 3246 0042 BBF13F0F 		cmp	fp, #63
 3247 0046 17DC     		bgt	.L303
 3248              	.LBB342:
1452:src/display.c **** 	    vs &= mask;
 3249              		.loc 1 1452 6 is_stmt 1 view .LVU980
1452:src/display.c **** 	    vs &= mask;
 3250              		.loc 1 1452 38 is_stmt 0 view .LVU981
 3251 0048 0121     		movs	r1, #1
 3252 004a ABF1200C 		sub	ip, fp, #32
 3253 004e CBF12000 		rsb	r0, fp, #32
ARM GAS  /tmp/ccPv3rzq.s 			page 134


 3254 0052 21FA00F0 		lsr	r0, r1, r0
 3255 0056 01FA0CF3 		lsl	r3, r1, ip
 3256 005a 01FA0BF2 		lsl	r2, r1, fp
 3257 005e 0343     		orrs	r3, r3, r0
 3258              	.LVL356:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3259              		.loc 1 1453 6 is_stmt 1 view .LVU982
1452:src/display.c **** 	    vs &= mask;
 3260              		.loc 1 1452 26 is_stmt 0 view .LVU983
 3261 0060 12F1FF30 		adds	r0, r2, #-1
 3262 0064 43F1FF31 		adc	r1, r3, #-1
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3263              		.loc 1 1453 9 view .LVU984
 3264 0068 3040     		ands	r0, r0, r6
 3265 006a 3940     		ands	r1, r1, r7
 3266              	.LVL357:
1454:src/display.c **** 	      vs |= ~mask;
 3267              		.loc 1 1454 9 view .LVU985
 3268 006c BAF10A0F 		cmp	r10, #10
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3269              		.loc 1 1453 9 view .LVU986
 3270 0070 0646     		mov	r6, r0
 3271              	.LVL358:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3272              		.loc 1 1453 9 view .LVU987
 3273 0072 0F46     		mov	r7, r1
1454:src/display.c **** 	      vs |= ~mask;
 3274              		.loc 1 1454 6 is_stmt 1 view .LVU988
1454:src/display.c **** 	      vs |= ~mask;
 3275              		.loc 1 1454 9 is_stmt 0 view .LVU989
 3276 0074 00F03D81 		beq	.L374
 3277              	.LVL359:
 3278              	.L303:
1454:src/display.c **** 	      vs |= ~mask;
 3279              		.loc 1 1454 9 view .LVU990
 3280              	.LBE342:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3281              		.loc 1 1458 4 is_stmt 1 view .LVU991
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3282              		.loc 1 1458 8 is_stmt 0 view .LVU992
 3283 0078 B54B     		ldr	r3, .L381+8
 3284 007a 1B68     		ldr	r3, [r3]
 3285 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3286              		.loc 1 1458 7 view .LVU993
 3287 0080 9A07     		lsls	r2, r3, #30
 3288 0082 41D5     		bpl	.L334
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 3289              		.loc 1 1461 11 is_stmt 1 view .LVU994
 3290              	.LBB343:
1469:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3291              		.loc 1 1469 6 view .LVU995
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3292              		.loc 1 1470 6 view .LVU996
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3293              		.loc 1 1470 25 is_stmt 0 view .LVU997
 3294 0084 4FEA5A02 		lsr	r2, r10, #1
ARM GAS  /tmp/ccPv3rzq.s 			page 135


 3295              	.LVL360:
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3296              		.loc 1 1471 6 is_stmt 1 view .LVU998
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3297              		.loc 1 1471 43 is_stmt 0 view .LVU999
 3298 0088 12F00A0F 		tst	r2, #10
 3299 008c 14BF     		ite	ne
 3300 008e 0123     		movne	r3, #1
 3301 0090 0023     		moveq	r3, #0
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3302              		.loc 1 1471 70 view .LVU1000
 3303 0092 12F00C0F 		tst	r2, #12
 3304 0096 18BF     		it	ne
 3305 0098 43F00203 		orrne	r3, r3, #2
 3306              	.LVL361:
 3307              	.L309:
1472:src/display.c **** 
 3308              		.loc 1 1472 6 is_stmt 1 discriminator 4 view .LVU1001
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3309              		.loc 1 1474 14 is_stmt 0 discriminator 4 view .LVU1002
 3310 009c 0BEB0308 		add	r8, fp, r3
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3311              		.loc 1 1474 27 discriminator 4 view .LVU1003
 3312 00a0 0133     		adds	r3, r3, #1
 3313              	.LVL362:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3314              		.loc 1 1474 21 discriminator 4 view .LVU1004
 3315 00a2 B8FBF3F8 		udiv	r8, r8, r3
1475:src/display.c **** 	      const int r = v % b;
 3316              		.loc 1 1475 6 discriminator 4 view .LVU1005
 3317 00a6 B8F1000F 		cmp	r8, #0
1472:src/display.c **** 
 3318              		.loc 1 1472 8 discriminator 4 view .LVU1006
 3319 00aa 3046     		mov	r0, r6
 3320 00ac 3946     		mov	r1, r7
 3321              	.LVL363:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3322              		.loc 1 1474 6 is_stmt 1 discriminator 4 view .LVU1007
1475:src/display.c **** 	      const int r = v % b;
 3323              		.loc 1 1475 6 discriminator 4 view .LVU1008
1475:src/display.c **** 	      const int r = v % b;
 3324              		.loc 1 1475 16 discriminator 4 view .LVU1009
1475:src/display.c **** 	      const int r = v % b;
 3325              		.loc 1 1475 6 is_stmt 0 discriminator 4 view .LVU1010
 3326 00ae 40F38081 		ble	.L335
 3327 00b2 05AC     		add	r4, sp, #20
 3328 00b4 DFF8A4B2 		ldr	fp, .L381+20
 3329              	.LVL364:
1475:src/display.c **** 	      const int r = v % b;
 3330              		.loc 1 1475 6 discriminator 4 view .LVU1011
 3331 00b8 08EB0406 		add	r6, r8, r4
 3332              	.LVL365:
 3333              	.L310:
 3334              	.LBB344:
1476:src/display.c **** 	      v /= b;
 3335              		.loc 1 1476 8 is_stmt 1 discriminator 3 view .LVU1012
 3336 00bc 5246     		mov	r2, r10
ARM GAS  /tmp/ccPv3rzq.s 			page 136


 3337 00be 0023     		movs	r3, #0
 3338 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3339              	.LVL366:
1477:src/display.c **** 	      buf[i] = DIGITS[r];
 3340              		.loc 1 1477 8 discriminator 3 view .LVU1013
1478:src/display.c **** 	    }
 3341              		.loc 1 1478 15 is_stmt 0 discriminator 3 view .LVU1014
 3342 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3343 00c8 04F8013B 		strb	r3, [r4], #1
 3344              	.LVL367:
1478:src/display.c **** 	    }
 3345              		.loc 1 1478 8 is_stmt 1 discriminator 3 view .LVU1015
 3346              	.LBE344:
1475:src/display.c **** 	      const int r = v % b;
 3347              		.loc 1 1475 21 discriminator 3 view .LVU1016
1475:src/display.c **** 	      const int r = v % b;
 3348              		.loc 1 1475 16 discriminator 3 view .LVU1017
1475:src/display.c **** 	      const int r = v % b;
 3349              		.loc 1 1475 6 is_stmt 0 discriminator 3 view .LVU1018
 3350 00cc B442     		cmp	r4, r6
 3351 00ce F5D1     		bne	.L310
 3352 00d0 08F1FF31 		add	r1, r8, #-1
 3353              	.LVL368:
1475:src/display.c **** 	      const int r = v % b;
 3354              		.loc 1 1475 6 view .LVU1019
 3355 00d4 4446     		mov	r4, r8
 3356              	.LVL369:
 3357              	.L302:
1475:src/display.c **** 	      const int r = v % b;
 3358              		.loc 1 1475 6 view .LVU1020
 3359              	.LBE343:
1488:src/display.c **** 	if (res) {
 3360              		.loc 1 1488 2 is_stmt 1 view .LVU1021
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3361              		.loc 1 1489 2 view .LVU1022
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3362              		.loc 1 1489 5 is_stmt 0 view .LVU1023
 3363 00d6 002D     		cmp	r5, #0
 3364 00d8 3ED0     		beq	.L311
 3365              	.LVL370:
 3366              	.L375:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3367              		.loc 1 1490 4 is_stmt 1 view .LVU1024
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3368              		.loc 1 1490 7 is_stmt 0 view .LVU1025
 3369 00da 049B     		ldr	r3, [sp, #16]
 3370 00dc 13B1     		cbz	r3, .L312
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3371              		.loc 1 1490 14 is_stmt 1 discriminator 1 view .LVU1026
 3372              	.LVL371:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3373              		.loc 1 1490 21 is_stmt 0 discriminator 1 view .LVU1027
 3374 00de 2D23     		movs	r3, #45
 3375 00e0 05F8013B 		strb	r3, [r5], #1
 3376              	.LVL372:
 3377              	.L312:
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
ARM GAS  /tmp/ccPv3rzq.s 			page 137


 3378              		.loc 1 1491 4 is_stmt 1 view .LVU1028
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3379              		.loc 1 1491 7 is_stmt 0 view .LVU1029
 3380 00e4 0D2C     		cmp	r4, #13
 3381 00e6 00F3E980 		bgt	.L313
1498:src/display.c **** 	      *res++ = buf[i];
 3382              		.loc 1 1498 12 is_stmt 1 view .LVU1030
 3383              	.LVL373:
1498:src/display.c **** 	      *res++ = buf[i];
 3384              		.loc 1 1498 12 is_stmt 0 view .LVU1031
 3385 00ea 481C     		adds	r0, r1, #1
 3386 00ec 09D0     		beq	.L289
 3387 00ee 0131     		adds	r1, r1, #1
 3388 00f0 05AA     		add	r2, sp, #20
 3389 00f2 013D     		subs	r5, r5, #1
 3390 00f4 1144     		add	r1, r1, r2
 3391              	.LVL374:
 3392              	.L316:
1499:src/display.c **** 	  }
 3393              		.loc 1 1499 8 is_stmt 1 view .LVU1032
1499:src/display.c **** 	  }
 3394              		.loc 1 1499 15 is_stmt 0 view .LVU1033
 3395 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3396              	.LVL375:
1499:src/display.c **** 	  }
 3397              		.loc 1 1499 15 view .LVU1034
 3398 00fa 05F8013F 		strb	r3, [r5, #1]!
 3399              	.LVL376:
1498:src/display.c **** 	      *res++ = buf[i];
 3400              		.loc 1 1498 12 is_stmt 1 view .LVU1035
1498:src/display.c **** 	      *res++ = buf[i];
 3401              		.loc 1 1498 12 is_stmt 0 view .LVU1036
 3402 00fe 9142     		cmp	r1, r2
 3403 0100 F9D1     		bne	.L316
 3404              	.LVL377:
 3405              	.L289:
1546:src/display.c **** 
 3406              		.loc 1 1546 7 view .LVU1037
 3407 0102 17B0     		add	sp, sp, #92
 3408              		.cfi_remember_state
 3409              		.cfi_def_cfa_offset 36
 3410              		@ sp needed
 3411 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3412              	.LVL378:
 3413              	.L334:
 3414              		.cfi_restore_state
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3415              		.loc 1 1458 25 discriminator 1 view .LVU1038
 3416 0108 56EA0703 		orrs	r3, r6, r7
 3417 010c 00F0C480 		beq	.L297
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 3418              		.loc 1 1461 11 is_stmt 1 view .LVU1039
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3419              		.loc 1 1462 6 view .LVU1040
 3420 0110 DFF848B2 		ldr	fp, .L381+20
 3421              	.LVL379:
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
ARM GAS  /tmp/ccPv3rzq.s 			page 138


 3422              		.loc 1 1462 6 is_stmt 0 view .LVU1041
 3423 0114 CDF800A0 		str	r10, [sp]
 3424 0118 0023     		movs	r3, #0
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3425              		.loc 1 1462 8 view .LVU1042
 3426 011a B046     		mov	r8, r6
 3427 011c D946     		mov	r9, fp
 3428 011e 3E46     		mov	r6, r7
1463:src/display.c **** 	      const int r = v % b;
 3429              		.loc 1 1463 6 is_stmt 1 view .LVU1043
 3430              	.LVL380:
1463:src/display.c **** 	      const int r = v % b;
 3431              		.loc 1 1463 16 view .LVU1044
 3432 0120 9B46     		mov	fp, r3
 3433 0122 05AF     		add	r7, sp, #20
 3434              	.LVL381:
 3435              	.L308:
 3436              	.LBB345:
1464:src/display.c **** 	      v /= b;
 3437              		.loc 1 1464 8 discriminator 3 view .LVU1045
 3438 0124 4046     		mov	r0, r8
 3439 0126 3146     		mov	r1, r6
 3440 0128 5246     		mov	r2, r10
 3441 012a 5B46     		mov	r3, fp
 3442 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3443              	.LVL382:
 3444 0130 3346     		mov	r3, r6
 3445 0132 9446     		mov	ip, r2
 3446              	.LVL383:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3447              		.loc 1 1465 8 discriminator 3 view .LVU1046
 3448              	.LBE345:
1463:src/display.c **** 	      const int r = v % b;
 3449              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU1047
 3450 0134 5B45     		cmp	r3, fp
 3451 0136 4246     		mov	r2, r8
 3452              	.LVL384:
 3453              	.LBB346:
1466:src/display.c **** 	    }
 3454              		.loc 1 1466 15 discriminator 3 view .LVU1048
 3455 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3456              	.LVL385:
1466:src/display.c **** 	    }
 3457              		.loc 1 1466 15 discriminator 3 view .LVU1049
 3458 013c 07F801CB 		strb	ip, [r7], #1
 3459              	.LBE346:
1463:src/display.c **** 	      const int r = v % b;
 3460              		.loc 1 1463 6 discriminator 3 view .LVU1050
 3461 0140 08BF     		it	eq
 3462 0142 5245     		cmpeq	r2, r10
 3463              	.LBB347:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3464              		.loc 1 1465 10 discriminator 3 view .LVU1051
 3465 0144 0E46     		mov	r6, r1
 3466              	.LVL386:
1466:src/display.c **** 	    }
 3467              		.loc 1 1466 8 is_stmt 1 discriminator 3 view .LVU1052
ARM GAS  /tmp/ccPv3rzq.s 			page 139


 3468              	.LBE347:
1463:src/display.c **** 	      const int r = v % b;
 3469              		.loc 1 1463 24 discriminator 3 view .LVU1053
 3470              	.LBB348:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3471              		.loc 1 1465 10 is_stmt 0 discriminator 3 view .LVU1054
 3472 0146 8046     		mov	r8, r0
 3473 0148 2146     		mov	r1, r4
 3474              	.LVL387:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3475              		.loc 1 1465 10 discriminator 3 view .LVU1055
 3476              	.LBE348:
1463:src/display.c **** 	      const int r = v % b;
 3477              		.loc 1 1463 25 discriminator 3 view .LVU1056
 3478 014a 04F10104 		add	r4, r4, #1
 3479              	.LVL388:
1463:src/display.c **** 	      const int r = v % b;
 3480              		.loc 1 1463 16 is_stmt 1 discriminator 3 view .LVU1057
1463:src/display.c **** 	      const int r = v % b;
 3481              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU1058
 3482 014e E9D2     		bcs	.L308
 3483 0150 DDF800A0 		ldr	r10, [sp]
 3484              	.LVL389:
1488:src/display.c **** 	if (res) {
 3485              		.loc 1 1488 2 is_stmt 1 view .LVU1059
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3486              		.loc 1 1489 2 view .LVU1060
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3487              		.loc 1 1489 5 is_stmt 0 view .LVU1061
 3488 0154 002D     		cmp	r5, #0
 3489 0156 C0D1     		bne	.L375
 3490              	.LVL390:
 3491              	.L311:
 3492              	.LBB349:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3493              		.loc 1 1517 4 is_stmt 1 view .LVU1062
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3494              		.loc 1 1517 33 is_stmt 0 view .LVU1063
 3495 0158 BAF1020F 		cmp	r10, #2
 3496 015c 00F0F080 		beq	.L376
 3497              	.LVL391:
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3498              		.loc 1 1518 4 is_stmt 1 view .LVU1064
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3499              		.loc 1 1518 30 is_stmt 0 view .LVU1065
 3500 0160 BAF1040F 		cmp	r10, #4
 3501 0164 00F01F81 		beq	.L377
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3502              		.loc 1 1517 33 view .LVU1066
 3503 0168 BAF1100F 		cmp	r10, #16
 3504 016c 0CBF     		ite	eq
 3505 016e 4FF0020A 		moveq	r10, #2
 3506 0172 4FF0030A 		movne	r10, #3
 3507 0176 0C26     		movs	r6, #12
 3508              	.LVL392:
 3509              	.L318:
1520:src/display.c **** #endif
ARM GAS  /tmp/ccPv3rzq.s 			page 140


 3510              		.loc 1 1520 4 is_stmt 1 view .LVU1067
 3511 0178 0091     		str	r1, [sp]
 3512 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3513              	.LVL393:
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3514              		.loc 1 1522 4 view .LVU1068
1523:src/display.c **** 	    State2.window = 0;
 3515              		.loc 1 1523 26 is_stmt 0 view .LVU1069
 3516 017e 724B     		ldr	r3, .L381
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3517              		.loc 1 1522 17 view .LVU1070
 3518 0180 744A     		ldr	r2, .L381+12
1523:src/display.c **** 	    State2.window = 0;
 3519              		.loc 1 1523 26 view .LVU1071
 3520 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3521              		.loc 1 1522 27 view .LVU1072
 3522 0184 0099     		ldr	r1, [sp]
 3523 0186 91FBF6F1 		sdiv	r1, r1, r6
1523:src/display.c **** 	    State2.window = 0;
 3524              		.loc 1 1523 8 view .LVU1073
 3525 018a C3F3C207 		ubfx	r7, r3, #3, #3
1523:src/display.c **** 	    State2.window = 0;
 3526              		.loc 1 1523 7 view .LVU1074
 3527 018e B942     		cmp	r1, r7
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3528              		.loc 1 1522 17 view .LVU1075
 3529 0190 1160     		str	r1, [r2]
1523:src/display.c **** 	    State2.window = 0;
 3530              		.loc 1 1523 4 is_stmt 1 view .LVU1076
1523:src/display.c **** 	    State2.window = 0;
 3531              		.loc 1 1523 7 is_stmt 0 view .LVU1077
 3532 0192 C0F2F680 		blt	.L320
 3533 0196 06FB07F7 		mul	r7, r6, r7
 3534              	.L321:
1525:src/display.c **** 
 3535              		.loc 1 1525 4 is_stmt 1 view .LVU1078
1525:src/display.c **** 
 3536              		.loc 1 1525 11 is_stmt 0 view .LVU1079
 3537 019a 16AB     		add	r3, sp, #88
 3538 019c 16AA     		add	r2, sp, #88
 3539 019e 1C44     		add	r4, r4, r3
 3540              	.LVL394:
1525:src/display.c **** 
 3541              		.loc 1 1525 11 view .LVU1080
 3542 01a0 D519     		adds	r5, r2, r7
 3543 01a2 0023     		movs	r3, #0
 3544 01a4 453D     		subs	r5, r5, #69
 3545 01a6 04F8443C 		strb	r3, [r4, #-68]
1527:src/display.c **** 	  for (k = 0; k < 12; k++)
 3546              		.loc 1 1527 4 is_stmt 1 view .LVU1081
 3547              	.LVL395:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3548              		.loc 1 1528 4 view .LVU1082
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3549              		.loc 1 1528 16 view .LVU1083
1525:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 141


 3550              		.loc 1 1525 11 is_stmt 0 view .LVU1084
 3551 01aa 2A46     		mov	r2, r5
 3552              	.LVL396:
 3553              	.L323:
1529:src/display.c **** 	      break;
 3554              		.loc 1 1529 6 is_stmt 1 view .LVU1085
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3555              		.loc 1 1528 24 view .LVU1086
1529:src/display.c **** 	      break;
 3556              		.loc 1 1529 9 is_stmt 0 view .LVU1087
 3557 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3558 01b0 0029     		cmp	r1, #0
 3559 01b2 00F0EC80 		beq	.L322
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3560              		.loc 1 1528 25 discriminator 2 view .LVU1088
 3561 01b6 0133     		adds	r3, r3, #1
 3562              	.LVL397:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3563              		.loc 1 1528 16 is_stmt 1 discriminator 2 view .LVU1089
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3564              		.loc 1 1528 4 is_stmt 0 discriminator 2 view .LVU1090
 3565 01b8 0C2B     		cmp	r3, #12
 3566 01ba F7D1     		bne	.L323
1531:src/display.c **** 	    int ch = buf[j++];
 3567              		.loc 1 1531 4 view .LVU1091
 3568 01bc 4FF00B08 		mov	r8, #11
 3569              	.LVL398:
 3570              	.L324:
1531:src/display.c **** 	    int ch = buf[j++];
 3571              		.loc 1 1531 4 view .LVU1092
 3572 01c0 0137     		adds	r7, r7, #1
 3573 01c2 4744     		add	r7, r7, r8
 3574 01c4 4446     		mov	r4, r8
 3575 01c6 4FF0630B 		mov	fp, #99
 3576 01ca 09E0     		b	.L329
 3577              	.LVL399:
 3578              	.L378:
 3579              	.LBB350:
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3580              		.loc 1 1537 8 view .LVU1093
 3581 01cc 624B     		ldr	r3, .L381+16
 3582 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3583              	.LVL400:
 3584              	.LBB351:
 3585              	.LBI351:
 308:src/display.c ****   if (sep == SEP_NONE)
 3586              		.loc 1 308 14 is_stmt 1 view .LVU1094
 3587              	.LBB352:
 309:src/display.c ****     return res;
 3588              		.loc 1 309 3 view .LVU1095
 309:src/display.c ****     return res;
 3589              		.loc 1 309 6 is_stmt 0 view .LVU1096
 3590 01d0 09B1     		cbz	r1, .L327
 309:src/display.c ****     return res;
 3591              		.loc 1 309 6 view .LVU1097
 3592 01d2 FFF7FEFF 		bl	set_separator.part.0
 3593              	.LVL401:
ARM GAS  /tmp/ccPv3rzq.s 			page 142


 3594              	.L327:
 309:src/display.c ****     return res;
 3595              		.loc 1 309 6 view .LVU1098
 3596              	.LBE352:
 3597              	.LBE351:
1538:src/display.c **** 	  }
 3598              		.loc 1 1538 6 is_stmt 1 discriminator 2 view .LVU1099
 3599              	.LBE350:
1531:src/display.c **** 	    int ch = buf[j++];
 3600              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU1100
 3601 01d6 013C     		subs	r4, r4, #1
1531:src/display.c **** 	    int ch = buf[j++];
 3602              		.loc 1 1531 4 discriminator 2 view .LVU1101
 3603 01d8 621C     		adds	r2, r4, #1
 3604              	.LBB355:
1538:src/display.c **** 	  }
 3605              		.loc 1 1538 10 discriminator 2 view .LVU1102
 3606 01da ABF1090B 		sub	fp, fp, #9
 3607              	.LVL402:
1538:src/display.c **** 	  }
 3608              		.loc 1 1538 10 discriminator 2 view .LVU1103
 3609              	.LBE355:
1531:src/display.c **** 	    int ch = buf[j++];
 3610              		.loc 1 1531 24 is_stmt 1 discriminator 2 view .LVU1104
1531:src/display.c **** 	    int ch = buf[j++];
 3611              		.loc 1 1531 14 discriminator 2 view .LVU1105
1531:src/display.c **** 	    int ch = buf[j++];
 3612              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU1106
 3613 01de 16D0     		beq	.L333
 3614              	.LVL403:
 3615              	.L329:
 3616              	.LBB356:
1532:src/display.c **** 	    if (i >= shift)
 3617              		.loc 1 1532 6 is_stmt 1 view .LVU1107
1534:src/display.c **** 	    set_dig(dig, ch);
 3618              		.loc 1 1534 8 view .LVU1108
1532:src/display.c **** 	    if (i >= shift)
 3619              		.loc 1 1532 10 is_stmt 0 view .LVU1109
 3620 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1533:src/display.c **** 	      ch -= 030;
 3621              		.loc 1 1533 9 view .LVU1110
 3622 01e4 A8EB0402 		sub	r2, r8, r4
 3623 01e8 B242     		cmp	r2, r6
 3624 01ea A7EB0409 		sub	r9, r7, r4
 3625              	.LVL404:
1533:src/display.c **** 	      ch -= 030;
 3626              		.loc 1 1533 6 is_stmt 1 view .LVU1111
1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3627              		.loc 1 1535 6 is_stmt 0 view .LVU1112
 3628 01ee 5846     		mov	r0, fp
1534:src/display.c **** 	    set_dig(dig, ch);
 3629              		.loc 1 1534 11 view .LVU1113
 3630 01f0 A8BF     		it	ge
 3631 01f2 1839     		subge	r1, r1, #24
 3632              	.LVL405:
1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3633              		.loc 1 1535 6 is_stmt 1 view .LVU1114
ARM GAS  /tmp/ccPv3rzq.s 			page 143


 3634 01f4 FFF7FEFF 		bl	set_dig
 3635              	.LVL406:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3636              		.loc 1 1536 6 view .LVU1115
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3637              		.loc 1 1536 13 is_stmt 0 view .LVU1116
 3638 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3639 01fc 0AFB1393 		mls	r3, r10, r3, r9
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3640              		.loc 1 1536 9 view .LVU1117
 3641 0200 002B     		cmp	r3, #0
 3642 0202 E8D1     		bne	.L327
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3643              		.loc 1 1537 8 is_stmt 1 discriminator 1 view .LVU1118
 3644              	.LBB354:
 3645              	.LBB353:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3646              		.loc 1 311 3 discriminator 1 view .LVU1119
 3647 0204 5846     		mov	r0, fp
 3648              	.LBE353:
 3649              	.LBE354:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3650              		.loc 1 1536 27 is_stmt 0 discriminator 1 view .LVU1120
 3651 0206 002C     		cmp	r4, #0
 3652 0208 E0D1     		bne	.L378
1538:src/display.c **** 	  }
 3653              		.loc 1 1538 6 is_stmt 1 view .LVU1121
1538:src/display.c **** 	  }
 3654              		.loc 1 1538 10 is_stmt 0 view .LVU1122
 3655 020a ABF1090B 		sub	fp, fp, #9
 3656              	.LVL407:
1538:src/display.c **** 	  }
 3657              		.loc 1 1538 10 view .LVU1123
 3658              	.LBE356:
1531:src/display.c **** 	    int ch = buf[j++];
 3659              		.loc 1 1531 24 is_stmt 1 view .LVU1124
1531:src/display.c **** 	    int ch = buf[j++];
 3660              		.loc 1 1531 14 view .LVU1125
 3661              	.L333:
1540:src/display.c **** 	    if (dig >= 0)
 3662              		.loc 1 1540 4 view .LVU1126
1540:src/display.c **** 	    if (dig >= 0)
 3663              		.loc 1 1540 7 is_stmt 0 view .LVU1127
 3664 020e 049B     		ldr	r3, [sp, #16]
 3665 0210 002B     		cmp	r3, #0
 3666 0212 3FF476AF 		beq	.L289
1541:src/display.c **** 	      set_dig(dig, '-');
 3667              		.loc 1 1541 6 is_stmt 1 view .LVU1128
1541:src/display.c **** 	      set_dig(dig, '-');
 3668              		.loc 1 1541 9 is_stmt 0 view .LVU1129
 3669 0216 BBF1000F 		cmp	fp, #0
 3670 021a C0F2C680 		blt	.L379
 3671              	.LVL408:
 3672              	.L332:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3673              		.loc 1 1542 8 is_stmt 1 view .LVU1130
 3674 021e 5846     		mov	r0, fp
ARM GAS  /tmp/ccPv3rzq.s 			page 144


 3675 0220 2D21     		movs	r1, #45
 3676 0222 FFF7FEFF 		bl	set_dig
 3677              	.LVL409:
 3678 0226 6CE7     		b	.L289
 3679              	.LVL410:
 3680              	.L373:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3681              		.loc 1 1542 8 is_stmt 0 view .LVU1131
 3682              	.LBE349:
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3683              		.loc 1 1435 4 is_stmt 1 view .LVU1132
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3684              		.loc 1 1435 8 is_stmt 0 view .LVU1133
 3685 0228 04AA     		add	r2, sp, #16
 3686 022a 3046     		mov	r0, r6
 3687 022c 3946     		mov	r1, r7
 3688 022e FFF7FEFF 		bl	extract_value
 3689              	.LVL411:
 3690 0232 8046     		mov	r8, r0
 3691 0234 8946     		mov	r9, r1
 3692              	.LVL412:
1436:src/display.c **** 	    v = value;
 3693              		.loc 1 1436 4 is_stmt 1 view .LVU1134
1436:src/display.c **** 	    v = value;
 3694              		.loc 1 1436 8 is_stmt 0 view .LVU1135
 3695 0236 FFF7FEFF 		bl	int_mode
 3696              	.LVL413:
1436:src/display.c **** 	    v = value;
 3697              		.loc 1 1436 7 view .LVU1136
 3698 023a 38BB     		cbnz	r0, .L294
1436:src/display.c **** 	    v = value;
 3699              		.loc 1 1436 33 discriminator 1 view .LVU1137
 3700 023c 049B     		ldr	r3, [sp, #16]
 3701 023e 012B     		cmp	r3, #1
 3702 0240 24D1     		bne	.L294
1436:src/display.c **** 	    v = value;
 3703              		.loc 1 1436 46 discriminator 2 view .LVU1138
 3704 0242 58EA0903 		orrs	r3, r8, r9
 3705 0246 00F08B80 		beq	.L380
 3706              	.LVL414:
 3707              	.L295:
1436:src/display.c **** 	    v = value;
 3708              		.loc 1 1436 46 discriminator 2 view .LVU1139
 3709 024a DFF810B1 		ldr	fp, .L381+20
 3710              	.LVL415:
1411:src/display.c **** 	const int ws = word_size();
 3711              		.loc 1 1411 67 discriminator 3 view .LVU1140
 3712 024e 0395     		str	r5, [sp, #12]
 3713 0250 05AB     		add	r3, sp, #20
 3714 0252 5D46     		mov	r5, fp
 3715              	.LVL416:
1411:src/display.c **** 	const int ws = word_size();
 3716              		.loc 1 1411 67 discriminator 3 view .LVU1141
 3717 0254 5646     		mov	r6, r10
 3718 0256 0027     		movs	r7, #0
 3719 0258 0024     		movs	r4, #0
 3720 025a 9B46     		mov	fp, r3
ARM GAS  /tmp/ccPv3rzq.s 			page 145


 3721              	.LVL417:
 3722              	.L301:
 3723              	.LBB359:
1445:src/display.c **** 	      v /= b;
 3724              		.loc 1 1445 8 is_stmt 1 discriminator 3 view .LVU1142
 3725 025c 4046     		mov	r0, r8
 3726 025e 4946     		mov	r1, r9
 3727 0260 3246     		mov	r2, r6
 3728 0262 3B46     		mov	r3, r7
 3729 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3730              	.LVL418:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3731              		.loc 1 1446 8 discriminator 3 view .LVU1143
 3732 0268 CDE90089 		strd	r8, [sp]
1447:src/display.c **** 	    }
 3733              		.loc 1 1447 15 is_stmt 0 discriminator 3 view .LVU1144
 3734 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3735 026e 0BF8013B 		strb	r3, [fp], #1
 3736              	.LBE359:
1444:src/display.c **** 	      const int r = v % b;
 3737              		.loc 1 1444 6 discriminator 3 view .LVU1145
 3738 0272 DDE90023 		ldrd	r2, [sp]
 3739              	.LVL419:
1444:src/display.c **** 	      const int r = v % b;
 3740              		.loc 1 1444 6 discriminator 3 view .LVU1146
 3741 0276 BB42     		cmp	r3, r7
 3742 0278 08BF     		it	eq
 3743 027a B242     		cmpeq	r2, r6
 3744              	.LBB360:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3745              		.loc 1 1446 10 discriminator 3 view .LVU1147
 3746 027c 8946     		mov	r9, r1
 3747              	.LVL420:
1447:src/display.c **** 	    }
 3748              		.loc 1 1447 8 is_stmt 1 discriminator 3 view .LVU1148
 3749              	.LBE360:
1444:src/display.c **** 	      const int r = v % b;
 3750              		.loc 1 1444 24 discriminator 3 view .LVU1149
 3751              	.LBB361:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3752              		.loc 1 1446 10 is_stmt 0 discriminator 3 view .LVU1150
 3753 027e 8046     		mov	r8, r0
 3754 0280 2146     		mov	r1, r4
 3755              	.LVL421:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3756              		.loc 1 1446 10 discriminator 3 view .LVU1151
 3757              	.LBE361:
1444:src/display.c **** 	      const int r = v % b;
 3758              		.loc 1 1444 25 discriminator 3 view .LVU1152
 3759 0282 04F10104 		add	r4, r4, #1
 3760              	.LVL422:
1444:src/display.c **** 	      const int r = v % b;
 3761              		.loc 1 1444 16 is_stmt 1 discriminator 3 view .LVU1153
1444:src/display.c **** 	      const int r = v % b;
 3762              		.loc 1 1444 6 is_stmt 0 discriminator 3 view .LVU1154
 3763 0286 E9D2     		bcs	.L301
 3764 0288 039D     		ldr	r5, [sp, #12]
ARM GAS  /tmp/ccPv3rzq.s 			page 146


 3765 028a 24E7     		b	.L302
 3766              	.LVL423:
 3767              	.L294:
1438:src/display.c **** 	    if (sign)
 3768              		.loc 1 1438 4 is_stmt 1 view .LVU1155
1438:src/display.c **** 	    if (sign)
 3769              		.loc 1 1438 7 is_stmt 0 view .LVU1156
 3770 028c 58EA0903 		orrs	r3, r8, r9
 3771 0290 DBD1     		bne	.L295
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3772              		.loc 1 1439 6 is_stmt 1 view .LVU1157
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3773              		.loc 1 1439 9 is_stmt 0 view .LVU1158
 3774 0292 049B     		ldr	r3, [sp, #16]
 3775 0294 002B     		cmp	r3, #0
 3776 0296 69D1     		bne	.L296
 3777              	.LVL424:
 3778              	.L297:
1441:src/display.c **** 	    return;
 3779              		.loc 1 1441 6 is_stmt 1 view .LVU1159
 3780              	.LBB362:
 3781              	.LBI362:
 339:src/display.c ****   if (res) *res++ = ch;
 3782              		.loc 1 339 14 view .LVU1160
 3783              	.LBB363:
 340:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 340 3 view .LVU1161
 340:src/display.c ****   else	set_dig(base, ch);
 3785              		.loc 1 340 6 is_stmt 0 view .LVU1162
 3786 0298 002D     		cmp	r5, #0
 3787 029a 6DD0     		beq	.L299
 3788              	.LVL425:
 3789              	.L298:
 340:src/display.c ****   else	set_dig(base, ch);
 3790              		.loc 1 340 12 is_stmt 1 view .LVU1163
 340:src/display.c ****   else	set_dig(base, ch);
 3791              		.loc 1 340 19 is_stmt 0 view .LVU1164
 3792 029c 3023     		movs	r3, #48
 3793 029e 2B70     		strb	r3, [r5]
 3794              	.LBE363:
 3795              	.LBE362:
1546:src/display.c **** 
 3796              		.loc 1 1546 7 view .LVU1165
 3797 02a0 17B0     		add	sp, sp, #92
 3798              		.cfi_remember_state
 3799              		.cfi_def_cfa_offset 36
 3800              		@ sp needed
 3801 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3802              	.LVL426:
 3803              	.L290:
 3804              		.cfi_restore_state
1426:src/display.c **** 	}
 3805              		.loc 1 1426 11 is_stmt 1 view .LVU1166
1426:src/display.c **** 	}
 3806              		.loc 1 1426 15 is_stmt 0 view .LVU1167
 3807 02a6 FFF7FEFF 		bl	int_base
 3808              	.LVL427:
ARM GAS  /tmp/ccPv3rzq.s 			page 147


1426:src/display.c **** 	}
 3809              		.loc 1 1426 15 view .LVU1168
 3810 02aa 8246     		mov	r10, r0
 3811              	.LVL428:
1426:src/display.c **** 	}
 3812              		.loc 1 1426 27 is_stmt 1 view .LVU1169
1429:src/display.c **** 	  IntMaxWindow = 0;
 3813              		.loc 1 1429 2 view .LVU1170
1429:src/display.c **** 	  IntMaxWindow = 0;
 3814              		.loc 1 1429 5 is_stmt 0 view .LVU1171
 3815 02ac 002D     		cmp	r5, #0
 3816 02ae 7FF4BFAE 		bne	.L292
 3817              	.LVL429:
 3818              	.L372:
1430:src/display.c **** 	  carry_overflow();
 3819              		.loc 1 1430 4 is_stmt 1 view .LVU1172
1430:src/display.c **** 	  carry_overflow();
 3820              		.loc 1 1430 17 is_stmt 0 view .LVU1173
 3821 02b2 284B     		ldr	r3, .L381+12
 3822 02b4 1D60     		str	r5, [r3]
1431:src/display.c **** 	}
 3823              		.loc 1 1431 4 is_stmt 1 view .LVU1174
 3824 02b6 FFF7FEFF 		bl	carry_overflow
 3825              	.LVL430:
 3826 02ba B9E6     		b	.L292
 3827              	.LVL431:
 3828              	.L313:
1492:src/display.c **** 	      *res++ = buf[i];
 3829              		.loc 1 1492 12 view .LVU1175
1492:src/display.c **** 	      *res++ = buf[i];
 3830              		.loc 1 1492 12 is_stmt 0 view .LVU1176
 3831 02bc 05AB     		add	r3, sp, #20
 3832 02be 5818     		adds	r0, r3, r1
1492:src/display.c **** 	      *res++ = buf[i];
 3833              		.loc 1 1492 24 view .LVU1177
 3834 02c0 A4F10D06 		sub	r6, r4, #13
 3835 02c4 6A1E     		subs	r2, r5, #1
 3836              	.LVL432:
 3837              	.L315:
1493:src/display.c **** 	    *res++ = '.';
 3838              		.loc 1 1493 8 is_stmt 1 view .LVU1178
1493:src/display.c **** 	    *res++ = '.';
 3839              		.loc 1 1493 20 is_stmt 0 view .LVU1179
 3840 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3841              	.LVL433:
1493:src/display.c **** 	    *res++ = '.';
 3842              		.loc 1 1493 15 view .LVU1180
 3843 02ca 02F8013F 		strb	r3, [r2, #1]!
 3844              	.LVL434:
1492:src/display.c **** 	      *res++ = buf[i];
 3845              		.loc 1 1492 12 is_stmt 1 view .LVU1181
1492:src/display.c **** 	      *res++ = buf[i];
 3846              		.loc 1 1492 12 is_stmt 0 view .LVU1182
 3847 02ce D343     		mvns	r3, r2
 3848 02d0 0B44     		add	r3, r3, r1
 3849 02d2 2B44     		add	r3, r3, r5
 3850 02d4 9E42     		cmp	r6, r3
ARM GAS  /tmp/ccPv3rzq.s 			page 148


 3851 02d6 F6DD     		ble	.L315
 3852 02d8 01F10E03 		add	r3, r1, #14
 3853 02dc 1C1B     		subs	r4, r3, r4
 3854              	.LVL435:
1492:src/display.c **** 	      *res++ = buf[i];
 3855              		.loc 1 1492 12 view .LVU1183
 3856 02de 8E42     		cmp	r6, r1
 3857 02e0 C8BF     		it	gt
 3858 02e2 0124     		movgt	r4, #1
 3859 02e4 2A19     		adds	r2, r5, r4
 3860              	.LVL436:
1494:src/display.c **** 	    *res++ = '.';
 3861              		.loc 1 1494 6 is_stmt 1 view .LVU1184
1494:src/display.c **** 	    *res++ = '.';
 3862              		.loc 1 1494 13 is_stmt 0 view .LVU1185
 3863 02e6 2E23     		movs	r3, #46
 3864 02e8 2B55     		strb	r3, [r5, r4]
1495:src/display.c **** 	  }
 3865              		.loc 1 1495 6 is_stmt 1 view .LVU1186
 3866              	.LVL437:
1495:src/display.c **** 	  }
 3867              		.loc 1 1495 13 is_stmt 0 view .LVU1187
 3868 02ea 5370     		strb	r3, [r2, #1]
1546:src/display.c **** 
 3869              		.loc 1 1546 7 view .LVU1188
 3870 02ec 17B0     		add	sp, sp, #92
 3871              		.cfi_remember_state
 3872              		.cfi_def_cfa_offset 36
 3873              		@ sp needed
 3874 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3875              	.LVL438:
 3876              	.L374:
 3877              		.cfi_restore_state
 3878              	.LBB365:
1454:src/display.c **** 	      vs |= ~mask;
 3879              		.loc 1 1454 38 discriminator 1 view .LVU1189
 3880 02f2 0BF1FF31 		add	r1, fp, #-1
1454:src/display.c **** 	      vs |= ~mask;
 3881              		.loc 1 1454 18 discriminator 1 view .LVU1190
 3882 02f6 CBF1210C 		rsb	ip, fp, #33
 3883 02fa C840     		lsrs	r0, r0, r1
 3884 02fc 07FA0CFC 		lsl	ip, r7, ip
 3885 0300 2039     		subs	r1, r1, #32
 3886 0302 40EA0C00 		orr	r0, r0, ip
 3887 0306 5CBF     		itt	pl
 3888 0308 47FA01F1 		asrpl	r1, r7, r1
 3889 030c 0843     		orrpl	r0, r0, r1
 3890 030e 00F00108 		and	r8, r0, #1
 3891 0312 4FF00009 		mov	r9, #0
 3892 0316 58EA0901 		orrs	r1, r8, r9
 3893 031a 08D0     		beq	.L304
1455:src/display.c **** 	  }
 3894              		.loc 1 1455 8 is_stmt 1 view .LVU1191
1455:src/display.c **** 	  }
 3895              		.loc 1 1455 11 is_stmt 0 view .LVU1192
 3896 031c 5042     		rsbs	r0, r2, #0
 3897 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
ARM GAS  /tmp/ccPv3rzq.s 			page 149


 3898 0322 40EA0602 		orr	r2, r0, r6
 3899              	.LVL439:
1455:src/display.c **** 	  }
 3900              		.loc 1 1455 11 view .LVU1193
 3901 0326 41EA0703 		orr	r3, r1, r7
 3902              	.LVL440:
1455:src/display.c **** 	  }
 3903              		.loc 1 1455 11 view .LVU1194
 3904 032a 1646     		mov	r6, r2
 3905              	.LVL441:
1455:src/display.c **** 	  }
 3906              		.loc 1 1455 11 view .LVU1195
 3907 032c 1F46     		mov	r7, r3
 3908              	.L304:
1455:src/display.c **** 	  }
 3909              		.loc 1 1455 11 view .LVU1196
 3910              	.LBE365:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3911              		.loc 1 1458 4 is_stmt 1 view .LVU1197
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3912              		.loc 1 1458 8 is_stmt 0 view .LVU1198
 3913 032e 084B     		ldr	r3, .L381+8
 3914 0330 1B68     		ldr	r3, [r3]
 3915 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3916              		.loc 1 1458 7 view .LVU1199
 3917 0336 9B07     		lsls	r3, r3, #30
 3918 0338 7FF5E6AE 		bpl	.L334
 3919 033c 0223     		movs	r3, #2
 3920 033e ADE6     		b	.L309
 3921              	.LVL442:
 3922              	.L376:
 3923              	.LBB366:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3924              		.loc 1 1517 33 view .LVU1200
 3925 0340 0826     		movs	r6, #8
1519:src/display.c **** 	  set_separator_decimal_modes();
 3926              		.loc 1 1519 6 view .LVU1201
 3927 0342 4FF0040A 		mov	r10, #4
 3928 0346 17E7     		b	.L318
 3929              	.L382:
 3930              		.align	2
 3931              	.L381:
 3932 0348 00000000 		.word	StateWhileOn
 3933 034c 00000000 		.word	CSWTCH.356
 3934 0350 00000000 		.word	main_ram
 3935 0354 00000000 		.word	IntMaxWindow
 3936 0358 00000000 		.word	.LANCHOR0
 3937 035c 00000000 		.word	.LANCHOR9
 3938              	.LVL443:
 3939              	.L380:
1519:src/display.c **** 	  set_separator_decimal_modes();
 3940              		.loc 1 1519 6 view .LVU1202
 3941              	.LBE366:
1437:src/display.c **** 	  if (v == 0) {
 3942              		.loc 1 1437 6 is_stmt 1 view .LVU1203
1437:src/display.c **** 	  if (v == 0) {
ARM GAS  /tmp/ccPv3rzq.s 			page 150


 3943              		.loc 1 1437 8 is_stmt 0 view .LVU1204
 3944 0360 B046     		mov	r8, r6
 3945              	.LVL444:
1437:src/display.c **** 	  if (v == 0) {
 3946              		.loc 1 1437 8 view .LVU1205
 3947 0362 B946     		mov	r9, r7
 3948              	.LVL445:
1438:src/display.c **** 	    if (sign)
 3949              		.loc 1 1438 4 is_stmt 1 view .LVU1206
1438:src/display.c **** 	    if (sign)
 3950              		.loc 1 1438 7 is_stmt 0 view .LVU1207
 3951 0364 58EA0903 		orrs	r3, r8, r9
 3952 0368 7FF46FAF 		bne	.L295
 3953              	.LVL446:
 3954              	.L296:
1440:src/display.c **** 	    set_dig_s(dig, '0', res);
 3955              		.loc 1 1440 8 is_stmt 1 view .LVU1208
 3956              	.LBB367:
 3957              	.LBI367:
 339:src/display.c ****   if (res) *res++ = ch;
 3958              		.loc 1 339 14 view .LVU1209
 3959              	.LBB368:
 340:src/display.c ****   else	set_dig(base, ch);
 3960              		.loc 1 340 3 view .LVU1210
 340:src/display.c ****   else	set_dig(base, ch);
 3961              		.loc 1 340 6 is_stmt 0 view .LVU1211
 3962 036c 002D     		cmp	r5, #0
 3963 036e 95D1     		bne	.L298
 341:src/display.c ****   return res;
 3964              		.loc 1 341 8 is_stmt 1 view .LVU1212
 3965 0370 2D21     		movs	r1, #45
 3966 0372 5A20     		movs	r0, #90
 3967 0374 FFF7FEFF 		bl	set_dig
 3968              	.LVL447:
 341:src/display.c ****   return res;
 3969              		.loc 1 341 8 is_stmt 0 view .LVU1213
 3970              	.LBE368:
 3971              	.LBE367:
1441:src/display.c **** 	    return;
 3972              		.loc 1 1441 6 is_stmt 1 view .LVU1214
 3973              	.LBB369:
 339:src/display.c ****   if (res) *res++ = ch;
 3974              		.loc 1 339 14 view .LVU1215
 3975              	.LBB364:
 340:src/display.c ****   else	set_dig(base, ch);
 3976              		.loc 1 340 3 view .LVU1216
 3977              	.L299:
 341:src/display.c ****   return res;
 3978              		.loc 1 341 8 view .LVU1217
 3979 0378 3021     		movs	r1, #48
 3980 037a 6320     		movs	r0, #99
 3981 037c FFF7FEFF 		bl	set_dig
 3982              	.LVL448:
 3983 0380 BFE6     		b	.L289
 3984              	.LVL449:
 3985              	.L320:
 341:src/display.c ****   return res;
ARM GAS  /tmp/ccPv3rzq.s 			page 151


 3986              		.loc 1 341 8 is_stmt 0 view .LVU1218
 3987              	.LBE364:
 3988              	.LBE369:
 3989              	.LBB370:
1524:src/display.c **** 	  buf[i] = '\0';
 3990              		.loc 1 1524 6 is_stmt 1 view .LVU1219
1524:src/display.c **** 	  buf[i] = '\0';
 3991              		.loc 1 1524 20 is_stmt 0 view .LVU1220
 3992 0382 0D4A     		ldr	r2, .L383
 3993 0384 6FF3C503 		bfc	r3, #3, #3
 3994 0388 1375     		strb	r3, [r2, #20]
 3995 038a 0027     		movs	r7, #0
 3996 038c 05E7     		b	.L321
 3997              	.LVL450:
 3998              	.L322:
1531:src/display.c **** 	    int ch = buf[j++];
 3999              		.loc 1 1531 14 is_stmt 1 discriminator 1 view .LVU1221
1531:src/display.c **** 	    int ch = buf[j++];
 4000              		.loc 1 1531 4 is_stmt 0 discriminator 1 view .LVU1222
 4001 038e 03F1FF38 		add	r8, r3, #-1
 4002              	.LVL451:
1531:src/display.c **** 	    int ch = buf[j++];
 4003              		.loc 1 1531 4 discriminator 1 view .LVU1223
 4004 0392 002B     		cmp	r3, #0
 4005 0394 7FF414AF 		bne	.L324
1540:src/display.c **** 	    if (dig >= 0)
 4006              		.loc 1 1540 4 is_stmt 1 view .LVU1224
1540:src/display.c **** 	    if (dig >= 0)
 4007              		.loc 1 1540 7 is_stmt 0 view .LVU1225
 4008 0398 049B     		ldr	r3, [sp, #16]
 4009 039a 002B     		cmp	r3, #0
 4010 039c 3FF4B1AE 		beq	.L289
 4011 03a0 4FF0630B 		mov	fp, #99
 4012 03a4 3BE7     		b	.L332
 4013              	.LVL452:
 4014              	.L377:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 4015              		.loc 1 1517 33 view .LVU1226
 4016 03a6 0C26     		movs	r6, #12
 4017 03a8 E6E6     		b	.L318
 4018              	.LVL453:
 4019              	.L379:
1543:src/display.c **** 	  }
 4020              		.loc 1 1543 11 is_stmt 1 view .LVU1227
 4021              	.LBB357:
 4022              	.LBI357:
 244:src/display.c **** {
 4023              		.loc 1 244 13 view .LVU1228
 4024              	.LBB358:
 246:src/display.c **** }
 4025              		.loc 1 246 3 view .LVU1229
 4026 03aa 8120     		movs	r0, #129
 4027 03ac FFF7FEFF 		bl	set_dot
 4028              	.LVL454:
 247:src/display.c **** 
 4029              		.loc 1 247 1 is_stmt 0 view .LVU1230
 4030 03b0 A7E6     		b	.L289
ARM GAS  /tmp/ccPv3rzq.s 			page 152


 4031              	.LVL455:
 4032              	.L335:
 247:src/display.c **** 
 4033              		.loc 1 247 1 view .LVU1231
 4034              	.LBE358:
 4035              	.LBE357:
 4036              	.LBE370:
 4037              	.LBB371:
1475:src/display.c **** 	      const int r = v % b;
 4038              		.loc 1 1475 6 view .LVU1232
 4039 03b2 4FF0FF31 		mov	r1, #-1
 4040 03b6 8EE6     		b	.L302
 4041              	.L384:
 4042              		.align	2
 4043              	.L383:
 4044 03b8 00000000 		.word	StateWhileOn
 4045              	.LBE371:
 4046              		.cfi_endproc
 4047              	.LFE18:
 4049              		.section	.text.getdig,"ax",%progbits
 4050              		.align	1
 4051              		.p2align 2,,3
 4052              		.global	getdig
 4053              		.syntax unified
 4054              		.thumb
 4055              		.thumb_func
 4056              		.fpu fpv4-sp-d16
 4058              	getdig:
 4059              	.LVL456:
 4060              	.LFB6:
 278:src/display.c ****   // perform index lookup
 4061              		.loc 1 278 1 is_stmt 1 view -0
 4062              		.cfi_startproc
 4063              		@ args = 0, pretend = 0, frame = 0
 4064              		@ frame_needed = 0, uses_anonymous_args = 0
 4065              		@ link register save eliminated.
 280:src/display.c **** }
 4066              		.loc 1 280 3 view .LVU1234
 280:src/display.c **** }
 4067              		.loc 1 280 16 is_stmt 0 view .LVU1235
 4068 0000 014B     		ldr	r3, .L386
 280:src/display.c **** }
 4069              		.loc 1 280 19 view .LVU1236
 4070 0002 C0B2     		uxtb	r0, r0
 4071              	.LVL457:
 281:src/display.c **** 
 4072              		.loc 1 281 1 view .LVU1237
 4073 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4074 0006 7047     		bx	lr
 4075              	.L387:
 4076              		.align	2
 4077              	.L386:
 4078 0008 00000000 		.word	.LANCHOR2
 4079              		.cfi_endproc
 4080              	.LFE6:
 4082              		.section	.text.dot,"ax",%progbits
 4083              		.align	1
ARM GAS  /tmp/ccPv3rzq.s 			page 153


 4084              		.p2align 2,,3
 4085              		.global	dot
 4086              		.syntax unified
 4087              		.thumb
 4088              		.thumb_func
 4089              		.fpu fpv4-sp-d16
 4091              	dot:
 4092              	.LVL458:
 4093              	.LFB7:
 283:src/display.c ****   if (on)	set_dot(n);
 4094              		.loc 1 283 25 is_stmt 1 view -0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 0
 4097              		@ frame_needed = 0, uses_anonymous_args = 0
 4098              		@ link register save eliminated.
 284:src/display.c ****   else	clr_dot(n);
 4099              		.loc 1 284 3 view .LVU1239
 284:src/display.c ****   else	clr_dot(n);
 4100              		.loc 1 284 6 is_stmt 0 view .LVU1240
 4101 0000 09B1     		cbz	r1, .L389
 284:src/display.c ****   else	clr_dot(n);
 4102              		.loc 1 284 11 is_stmt 1 discriminator 1 view .LVU1241
 4103 0002 FFF7FEBF 		b	set_dot
 4104              	.LVL459:
 4105              	.L389:
 285:src/display.c **** }
 4106              		.loc 1 285 8 view .LVU1242
 4107 0006 FFF7FEBF 		b	clr_dot
 4108              	.LVL460:
 285:src/display.c **** }
 4109              		.loc 1 285 8 is_stmt 0 view .LVU1243
 4110              		.cfi_endproc
 4111              	.LFE7:
 4113 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4114              		.align	1
 4115              		.p2align 2,,3
 4116              		.global	std_round_fix
 4117              		.syntax unified
 4118              		.thumb
 4119              		.thumb_func
 4120              		.fpu fpv4-sp-d16
 4122              	std_round_fix:
 4123              	.LVL461:
 4124              	.LFB24:
1751:src/display.c **** 	decNumber c;
 4125              		.loc 1 1751 93 is_stmt 1 view -0
 4126              		.cfi_startproc
 4127              		@ args = 0, pretend = 0, frame = 40
 4128              		@ frame_needed = 0, uses_anonymous_args = 0
1751:src/display.c **** 	decNumber c;
 4129              		.loc 1 1751 93 is_stmt 0 view .LVU1245
 4130 0000 70B5     		push	{r4, r5, r6, lr}
 4131              		.cfi_def_cfa_offset 16
 4132              		.cfi_offset 4, -16
 4133              		.cfi_offset 5, -12
 4134              		.cfi_offset 6, -8
 4135              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPv3rzq.s 			page 154


 4136 0002 0E46     		mov	r6, r1
1752:src/display.c **** 	int true_exp, x=0;
 4137              		.loc 1 1752 2 is_stmt 1 view .LVU1246
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4138              		.loc 1 1753 2 view .LVU1247
 4139              	.LVL462:
1754:src/display.c **** 
 4140              		.loc 1 1754 2 view .LVU1248
1756:src/display.c **** 	  min_pos_exp = 9;
 4141              		.loc 1 1756 2 view .LVU1249
1751:src/display.c **** 	decNumber c;
 4142              		.loc 1 1751 93 is_stmt 0 view .LVU1250
 4143 0004 8AB0     		sub	sp, sp, #40
 4144              		.cfi_def_cfa_offset 56
1756:src/display.c **** 	  min_pos_exp = 9;
 4145              		.loc 1 1756 5 view .LVU1251
 4146 0006 92B9     		cbnz	r2, .L391
1761:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4147              		.loc 1 1761 4 is_stmt 1 view .LVU1252
 4148              	.LVL463:
1762:src/display.c **** 	}
 4149              		.loc 1 1762 4 view .LVU1253
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4150              		.loc 1 1765 2 view .LVU1254
 4151 0008 0146     		mov	r1, r0
 4152              	.LVL464:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4153              		.loc 1 1765 2 is_stmt 0 view .LVU1255
 4154 000a 01A8     		add	r0, sp, #4
 4155              	.LVL465:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4156              		.loc 1 1765 2 view .LVU1256
 4157 000c 1D46     		mov	r5, r3
 4158 000e FFF7FEFF 		bl	dn_abs
 4159              	.LVL466:
1766:src/display.c **** 
 4160              		.loc 1 1766 2 is_stmt 1 view .LVU1257
1766:src/display.c **** 
 4161              		.loc 1 1766 24 is_stmt 0 view .LVU1258
 4162 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4163 0016 1844     		add	r0, r0, r3
 4164              	.LVL467:
1768:src/display.c **** 	  x = *dd;
 4165              		.loc 1 1768 2 is_stmt 1 view .LVU1259
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4166              		.loc 1 1772 2 view .LVU1260
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4167              		.loc 1 1772 5 is_stmt 0 view .LVU1261
 4168 0018 0138     		subs	r0, r0, #1
 4169 001a 1AD5     		bpl	.L395
1762:src/display.c **** 	}
 4170              		.loc 1 1762 16 view .LVU1262
 4171 001c EB43     		mvns	r3, r5
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4172              		.loc 1 1772 21 view .LVU1263
 4173 001e 8342     		cmp	r3, r0
 4174 0020 17DA     		bge	.L395
ARM GAS  /tmp/ccPv3rzq.s 			page 155


 4175              	.LVL468:
 4176              	.L397:
1774:src/display.c **** 	  return MODE_FIX;
 4177              		.loc 1 1774 4 is_stmt 1 view .LVU1264
1774:src/display.c **** 	  return MODE_FIX;
 4178              		.loc 1 1774 8 is_stmt 0 view .LVU1265
 4179 0022 3368     		ldr	r3, [r6]
 4180 0024 181A     		subs	r0, r3, r0
 4181 0026 3060     		str	r0, [r6]
1775:src/display.c **** 	}
 4182              		.loc 1 1775 4 is_stmt 1 view .LVU1266
1775:src/display.c **** 	}
 4183              		.loc 1 1775 11 is_stmt 0 view .LVU1267
 4184 0028 0120     		movs	r0, #1
1784:src/display.c **** #else
 4185              		.loc 1 1784 7 view .LVU1268
 4186 002a 0AB0     		add	sp, sp, #40
 4187              		.cfi_remember_state
 4188              		.cfi_def_cfa_offset 16
 4189              		@ sp needed
 4190 002c 70BD     		pop	{r4, r5, r6, pc}
 4191              	.LVL469:
 4192              	.L391:
 4193              		.cfi_restore_state
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4194              		.loc 1 1765 2 is_stmt 1 view .LVU1269
 4195 002e 0146     		mov	r1, r0
 4196              	.LVL470:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4197              		.loc 1 1765 2 is_stmt 0 view .LVU1270
 4198 0030 01A8     		add	r0, sp, #4
 4199              	.LVL471:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4200              		.loc 1 1765 2 view .LVU1271
 4201 0032 1446     		mov	r4, r2
 4202 0034 FFF7FEFF 		bl	dn_abs
 4203              	.LVL472:
1766:src/display.c **** 
 4204              		.loc 1 1766 2 is_stmt 1 view .LVU1272
1766:src/display.c **** 
 4205              		.loc 1 1766 24 is_stmt 0 view .LVU1273
 4206 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1768:src/display.c **** 	  x = *dd;
 4207              		.loc 1 1768 5 view .LVU1274
 4208 003c 052C     		cmp	r4, #5
1766:src/display.c **** 
 4209              		.loc 1 1766 24 view .LVU1275
 4210 003e 1344     		add	r3, r3, r2
1766:src/display.c **** 
 4211              		.loc 1 1766 11 view .LVU1276
 4212 0040 03F1FF30 		add	r0, r3, #-1
 4213              	.LVL473:
1768:src/display.c **** 	  x = *dd;
 4214              		.loc 1 1768 2 is_stmt 1 view .LVU1277
1768:src/display.c **** 	  x = *dd;
 4215              		.loc 1 1768 5 is_stmt 0 view .LVU1278
 4216 0044 15D1     		bne	.L399
ARM GAS  /tmp/ccPv3rzq.s 			page 156


1769:src/display.c **** 	}
 4217              		.loc 1 1769 4 is_stmt 1 view .LVU1279
1769:src/display.c **** 	}
 4218              		.loc 1 1769 6 is_stmt 0 view .LVU1280
 4219 0046 3268     		ldr	r2, [r6]
 4220              	.LVL474:
 4221              	.L394:
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4222              		.loc 1 1772 2 is_stmt 1 view .LVU1281
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4223              		.loc 1 1772 5 is_stmt 0 view .LVU1282
 4224 0048 8242     		cmp	r2, r0
 4225 004a 05DC     		bgt	.L403
1778:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4226              		.loc 1 1778 53 discriminator 2 view .LVU1283
 4227 004c 0333     		adds	r3, r3, #3
 4228 004e 0C2B     		cmp	r3, #12
 4229 0050 04D8     		bhi	.L398
 4230              	.LVL475:
 4231              	.L395:
1782:src/display.c **** 	}
 4232              		.loc 1 1782 11 view .LVU1284
 4233 0052 0020     		movs	r0, #0
1784:src/display.c **** #else
 4234              		.loc 1 1784 7 view .LVU1285
 4235 0054 0AB0     		add	sp, sp, #40
 4236              		.cfi_remember_state
 4237              		.cfi_def_cfa_offset 16
 4238              		@ sp needed
 4239 0056 70BD     		pop	{r4, r5, r6, pc}
 4240              	.LVL476:
 4241              	.L403:
 4242              		.cfi_restore_state
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4243              		.loc 1 1772 21 view .LVU1286
 4244 0058 031D     		adds	r3, r0, #4
 4245 005a E2DA     		bge	.L397
 4246              	.L398:
 4247              	.LBB374:
 4248              	.LBI374:
1751:src/display.c **** 	decNumber c;
 4249              		.loc 1 1751 26 is_stmt 1 view .LVU1287
 4250              	.LVL477:
 4251              	.LBB375:
1779:src/display.c **** 	}
 4252              		.loc 1 1779 4 view .LVU1288
1779:src/display.c **** 	}
 4253              		.loc 1 1779 24 is_stmt 0 view .LVU1289
 4254 005c 064B     		ldr	r3, .L404
 4255 005e 1B68     		ldr	r3, [r3]
 4256 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1779:src/display.c **** 	}
 4257              		.loc 1 1779 33 view .LVU1290
 4258 0064 13F0100F 		tst	r3, #16
 4259 0068 14BF     		ite	ne
 4260 006a 0320     		movne	r0, #3
 4261 006c 0220     		moveq	r0, #2
ARM GAS  /tmp/ccPv3rzq.s 			page 157


 4262              	.LBE375:
 4263              	.LBE374:
1784:src/display.c **** #else
 4264              		.loc 1 1784 7 view .LVU1291
 4265 006e 0AB0     		add	sp, sp, #40
 4266              		.cfi_remember_state
 4267              		.cfi_def_cfa_offset 16
 4268              		@ sp needed
 4269 0070 70BD     		pop	{r4, r5, r6, pc}
 4270              	.LVL478:
 4271              	.L399:
 4272              		.cfi_restore_state
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4273              		.loc 1 1753 16 view .LVU1292
 4274 0072 0022     		movs	r2, #0
 4275 0074 E8E7     		b	.L394
 4276              	.L405:
 4277 0076 00BF     		.align	2
 4278              	.L404:
 4279 0078 00000000 		.word	main_ram
 4280              		.cfi_endproc
 4281              	.LFE24:
 4283              		.section	.text.pixel_length,"ax",%progbits
 4284              		.align	1
 4285              		.p2align 2,,3
 4286              		.global	pixel_length
 4287              		.syntax unified
 4288              		.thumb
 4289              		.thumb_func
 4290              		.fpu fpv4-sp-d16
 4292              	pixel_length:
 4293              	.LVL479:
 4294              	.LFB39:
3486:src/display.c **** 
3487:src/display.c **** 
3488:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3489:src/display.c ****        */
3490:src/display.c ****       int pixel_length(const char *s, int smallp)
3491:src/display.c ****       {
 4295              		.loc 1 3491 7 is_stmt 1 view -0
 4296              		.cfi_startproc
 4297              		@ args = 0, pretend = 0, frame = 0
 4298              		@ frame_needed = 0, uses_anonymous_args = 0
3492:src/display.c **** 	int len = 0;
 4299              		.loc 1 3492 2 view .LVU1294
3493:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4300              		.loc 1 3493 2 view .LVU1295
3491:src/display.c **** 	int len = 0;
 4301              		.loc 1 3491 7 is_stmt 0 view .LVU1296
 4302 0000 70B5     		push	{r4, r5, r6, lr}
 4303              		.cfi_def_cfa_offset 16
 4304              		.cfi_offset 4, -16
 4305              		.cfi_offset 5, -12
 4306              		.cfi_offset 6, -8
 4307              		.cfi_offset 14, -4
3491:src/display.c **** 	int len = 0;
 4308              		.loc 1 3491 7 view .LVU1297
ARM GAS  /tmp/ccPv3rzq.s 			page 158


 4309 0002 0446     		mov	r4, r0
3494:src/display.c **** 	while (*s != '\0') {
 4310              		.loc 1 3494 9 view .LVU1298
 4311 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4312              	.LVL480:
3493:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4313              		.loc 1 3493 34 view .LVU1299
 4314 0006 0E1E     		subs	r6, r1, #0
 4315 0008 18BF     		it	ne
 4316 000a 4FF48076 		movne	r6, #256
 4317              	.LVL481:
 4318              		.loc 1 3494 2 is_stmt 1 view .LVU1300
 4319              		.loc 1 3494 8 view .LVU1301
 4320 000e A0B1     		cbz	r0, .L413
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4321              		.loc 1 3492 6 is_stmt 0 view .LVU1302
 4322 0010 0025     		movs	r5, #0
 4323 0012 06E0     		b	.L411
 4324              	.LVL482:
 4325              	.L409:
3495:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3496:src/display.c **** 	  if (s[0] == '\007') {
3497:src/display.c **** 	    len += s[1] & 0x1F;
3498:src/display.c **** 	    s += 3;
3499:src/display.c **** 	    continue;
3500:src/display.c **** 	  }
3501:src/display.c **** #endif
3502:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4326              		.loc 1 3502 11 view .LVU1303
 4327 0014 3044     		add	r0, r0, r6
 4328 0016 FFF7FEFF 		bl	charlengths
 4329              	.LVL483:
 4330              		.loc 1 3502 42 view .LVU1304
 4331 001a 0134     		adds	r4, r4, #1
 4332              	.LVL484:
 4333              		.loc 1 3502 8 view .LVU1305
 4334 001c 0544     		add	r5, r5, r0
 4335              	.LVL485:
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4336              		.loc 1 3494 8 is_stmt 1 view .LVU1306
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4337              		.loc 1 3494 9 is_stmt 0 view .LVU1307
 4338 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4339              		.loc 1 3494 8 view .LVU1308
 4340 0020 48B1     		cbz	r0, .L406
 4341              	.LVL486:
 4342              	.L411:
3496:src/display.c **** 	    len += s[1] & 0x1F;
 4343              		.loc 1 3496 4 is_stmt 1 view .LVU1309
 4344              		.loc 1 3502 4 view .LVU1310
3496:src/display.c **** 	    len += s[1] & 0x1F;
 4345              		.loc 1 3496 7 is_stmt 0 view .LVU1311
 4346 0022 0728     		cmp	r0, #7
 4347 0024 F6D1     		bne	.L409
3497:src/display.c **** 	    s += 3;
 4348              		.loc 1 3497 6 is_stmt 1 view .LVU1312
ARM GAS  /tmp/ccPv3rzq.s 			page 159


3497:src/display.c **** 	    s += 3;
 4349              		.loc 1 3497 18 is_stmt 0 view .LVU1313
 4350 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4351              		.loc 1 3494 9 view .LVU1314
 4352 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3497:src/display.c **** 	    s += 3;
 4353              		.loc 1 3497 18 view .LVU1315
 4354 002a 03F01F03 		and	r3, r3, #31
3498:src/display.c **** 	    continue;
 4355              		.loc 1 3498 8 view .LVU1316
 4356 002e 0334     		adds	r4, r4, #3
 4357              	.LVL487:
3497:src/display.c **** 	    s += 3;
 4358              		.loc 1 3497 10 view .LVU1317
 4359 0030 1D44     		add	r5, r5, r3
 4360              	.LVL488:
3498:src/display.c **** 	    continue;
 4361              		.loc 1 3498 6 is_stmt 1 view .LVU1318
3499:src/display.c **** 	  }
 4362              		.loc 1 3499 6 view .LVU1319
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4363              		.loc 1 3494 8 view .LVU1320
 4364 0032 0028     		cmp	r0, #0
 4365 0034 F5D1     		bne	.L411
 4366              	.L406:
3503:src/display.c **** 	}
3504:src/display.c **** 	return len;
3505:src/display.c ****       }
 4367              		.loc 1 3505 7 is_stmt 0 view .LVU1321
 4368 0036 2846     		mov	r0, r5
 4369 0038 70BD     		pop	{r4, r5, r6, pc}
 4370              	.LVL489:
 4371              	.L413:
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4372              		.loc 1 3492 6 view .LVU1322
 4373 003a 0546     		mov	r5, r0
3504:src/display.c ****       }
 4374              		.loc 1 3504 2 is_stmt 1 view .LVU1323
 4375              		.loc 1 3505 7 is_stmt 0 view .LVU1324
 4376 003c 2846     		mov	r0, r5
 4377 003e 70BD     		pop	{r4, r5, r6, pc}
 4378              		.loc 1 3505 7 view .LVU1325
 4379              		.cfi_endproc
 4380              	.LFE39:
 4382              		.section	.text.set_status,"ax",%progbits
 4383              		.align	1
 4384              		.p2align 2,,3
 4385              		.syntax unified
 4386              		.thumb
 4387              		.thumb_func
 4388              		.fpu fpv4-sp-d16
 4390              	set_status:
 4391              	.LVL490:
 4392              	.LFB42:
3506:src/display.c **** 
3507:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 160


3508:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3509:src/display.c ****        * If this is larger than the display, return true.
3510:src/display.c ****        */
3511:src/display.c ****       static int string_too_large(const char *s) {
3512:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3513:src/display.c ****       }
3514:src/display.c ****       static int string_too_large_top(const char *s) {
3515:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3516:src/display.c ****       }
3517:src/display.c **** 
3518:src/display.c **** 
3519:src/display.c ****       /* Display the given string on the screen.
3520:src/display.c ****        */
3521:src/display.c ****       static void set_status(const char *str) {
 4393              		.loc 1 3521 47 is_stmt 1 view -0
 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 0
 4396              		@ frame_needed = 0, uses_anonymous_args = 0
3522:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4397              		.loc 1 3522 2 view .LVU1327
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4398              		.loc 1 3521 47 is_stmt 0 view .LVU1328
 4399 0000 10B5     		push	{r4, lr}
 4400              		.cfi_def_cfa_offset 8
 4401              		.cfi_offset 4, -8
 4402              		.cfi_offset 14, -4
 4403              		.loc 1 3522 24 view .LVU1329
 4404 0002 0D4B     		ldr	r3, .L421
 4405              		.loc 1 3522 2 view .LVU1330
 4406 0004 93F91630 		ldrsb	r3, [r3, #22]
 4407 0008 002B     		cmp	r3, #0
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4408              		.loc 1 3521 47 view .LVU1331
 4409 000a 82B0     		sub	sp, sp, #8
 4410              		.cfi_def_cfa_offset 16
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4411              		.loc 1 3521 47 view .LVU1332
 4412 000c 0446     		mov	r4, r0
 4413              		.loc 1 3522 2 view .LVU1333
 4414 000e 0ADA     		bge	.L420
 4415 0010 0121     		movs	r1, #1
 4416              	.LVL491:
 4417              	.L417:
 4418              	.LBB376:
 4419              	.LBI376:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4420              		.loc 1 3379 19 is_stmt 1 discriminator 6 view .LVU1334
 4421              	.LBB377:
3380:src/display.c ****       }
 4422              		.loc 1 3380 2 discriminator 6 view .LVU1335
 4423 0012 40F24A23 		movw	r3, #586
 4424 0016 0093     		str	r3, [sp]
 4425 0018 2046     		mov	r0, r4
 4426 001a 8E23     		movs	r3, #142
 4427 001c 4A22     		movs	r2, #74
 4428 001e FFF7FEFF 		bl	s_s_sized
 4429              	.LVL492:
ARM GAS  /tmp/ccPv3rzq.s 			page 161


3380:src/display.c ****       }
 4430              		.loc 1 3380 2 is_stmt 0 discriminator 6 view .LVU1336
 4431              	.LBE377:
 4432              	.LBE376:
3523:src/display.c ****       }
 4433              		.loc 1 3523 7 discriminator 6 view .LVU1337
 4434 0022 02B0     		add	sp, sp, #8
 4435              		.cfi_remember_state
 4436              		.cfi_def_cfa_offset 8
 4437              		@ sp needed
 4438 0024 10BD     		pop	{r4, pc}
 4439              	.LVL493:
 4440              	.L420:
 4441              		.cfi_restore_state
 4442              	.LBB378:
 4443              	.LBI378:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4444              		.loc 1 3511 18 is_stmt 1 view .LVU1338
 4445              	.LBB379:
3512:src/display.c ****       }
 4446              		.loc 1 3512 2 view .LVU1339
3512:src/display.c ****       }
 4447              		.loc 1 3512 9 is_stmt 0 view .LVU1340
 4448 0026 0021     		movs	r1, #0
 4449 0028 FFF7FEFF 		bl	pixel_length
 4450              	.LVL494:
3512:src/display.c ****       }
 4451              		.loc 1 3512 9 view .LVU1341
 4452              	.LBE379:
 4453              	.LBE378:
3522:src/display.c ****       }
 4454              		.loc 1 3522 2 view .LVU1342
 4455 002c 4B28     		cmp	r0, #75
 4456 002e D4BF     		ite	le
 4457 0030 0021     		movle	r1, #0
 4458 0032 0121     		movgt	r1, #1
 4459 0034 EDE7     		b	.L417
 4460              	.L422:
 4461 0036 00BF     		.align	2
 4462              	.L421:
 4463 0038 00000000 		.word	StateWhileOn
 4464              		.cfi_endproc
 4465              	.LFE42:
 4467              		.section	.text.set_x_dn,"ax",%progbits
 4468              		.align	1
 4469              		.p2align 2,,3
 4470              		.global	set_x_dn
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4474              		.fpu fpv4-sp-d16
 4476              	set_x_dn:
 4477              	.LVL495:
 4478              	.LFB27:
1933:src/display.c **** 	char x[50], *obp = x;
 4479              		.loc 1 1933 67 is_stmt 1 view -0
 4480              		.cfi_startproc
ARM GAS  /tmp/ccPv3rzq.s 			page 162


 4481              		@ args = 0, pretend = 0, frame = 152
 4482              		@ frame_needed = 0, uses_anonymous_args = 0
1934:src/display.c **** 	int odig = 0;
 4483              		.loc 1 1934 2 view .LVU1344
1933:src/display.c **** 	char x[50], *obp = x;
 4484              		.loc 1 1933 67 is_stmt 0 view .LVU1345
 4485 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4486              		.cfi_def_cfa_offset 36
 4487              		.cfi_offset 4, -36
 4488              		.cfi_offset 5, -32
 4489              		.cfi_offset 6, -28
 4490              		.cfi_offset 7, -24
 4491              		.cfi_offset 8, -20
 4492              		.cfi_offset 9, -16
 4493              		.cfi_offset 10, -12
 4494              		.cfi_offset 11, -8
 4495              		.cfi_offset 14, -4
 4496 0004 A7B0     		sub	sp, sp, #156
 4497              		.cfi_def_cfa_offset 192
 4498              	.LVL496:
1935:src/display.c **** 	int show_exp = 0;
 4499              		.loc 1 1935 2 is_stmt 1 view .LVU1346
1936:src/display.c **** 	int j;
 4500              		.loc 1 1936 2 view .LVU1347
1937:src/display.c **** 	char mantissa[64];
 4501              		.loc 1 1937 2 view .LVU1348
1938:src/display.c **** 	int exp = 0;
 4502              		.loc 1 1938 2 view .LVU1349
1939:src/display.c **** 	char *p = mantissa;
 4503              		.loc 1 1939 2 view .LVU1350
1940:src/display.c **** 	char *r;
 4504              		.loc 1 1940 2 view .LVU1351
1941:src/display.c **** 	const char *q;
 4505              		.loc 1 1941 2 view .LVU1352
1942:src/display.c **** 	int count, i;
 4506              		.loc 1 1942 2 view .LVU1353
1943:src/display.c **** 	int extra_digits = 0;
 4507              		.loc 1 1943 2 view .LVU1354
1944:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4508              		.loc 1 1944 2 view .LVU1355
1946:src/display.c **** 	int dispdigs;
 4509              		.loc 1 1946 2 view .LVU1356
1947:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4510              		.loc 1 1947 2 view .LVU1357
1948:src/display.c **** #else
 4511              		.loc 1 1948 2 view .LVU1358
1933:src/display.c **** 	char x[50], *obp = x;
 4512              		.loc 1 1933 67 is_stmt 0 view .LVU1359
 4513 0006 8246     		mov	r10, r0
1948:src/display.c **** #else
 4514              		.loc 1 1948 13 view .LVU1360
 4515 0008 08A8     		add	r0, sp, #32
 4516              	.LVL497:
1933:src/display.c **** 	char x[50], *obp = x;
 4517              		.loc 1 1933 67 view .LVU1361
 4518 000a 0C46     		mov	r4, r1
 4519 000c 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccPv3rzq.s 			page 163


1948:src/display.c **** #else
 4520              		.loc 1 1948 13 view .LVU1362
 4521 000e FFF7FEFF 		bl	get_dispmode_digs
 4522              	.LVL498:
1948:src/display.c **** #else
 4523              		.loc 1 1948 13 view .LVU1363
 4524 0012 0546     		mov	r5, r0
 4525              	.LVL499:
1953:src/display.c **** 	int negative = 0;
 4526              		.loc 1 1953 2 is_stmt 1 view .LVU1364
1954:src/display.c **** 	int trimzeros = 0;
 4527              		.loc 1 1954 2 view .LVU1365
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4528              		.loc 1 1955 2 view .LVU1366
1963:src/display.c **** #endif
 4529              		.loc 1 1963 2 view .LVU1367
1966:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4530              		.loc 1 1966 2 view .LVU1368
 4531 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4532              	.LVL500:
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4533              		.loc 1 1968 2 view .LVU1369
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4534              		.loc 1 1968 5 is_stmt 0 view .LVU1370
 4535 0018 002C     		cmp	r4, #0
 4536 001a 00F08781 		beq	.L424
 4537              	.L427:
1993:src/display.c **** 	  return;
 4538              		.loc 1 1993 2 is_stmt 1 view .LVU1371
1993:src/display.c **** 	  return;
 4539              		.loc 1 1993 6 is_stmt 0 view .LVU1372
 4540 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4541 0022 2146     		mov	r1, r4
 4542 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4543              	.LVL501:
1993:src/display.c **** 	  return;
 4544              		.loc 1 1993 5 view .LVU1373
 4545 0028 8146     		mov	r9, r0
 4546 002a 0028     		cmp	r0, #0
 4547 002c 40F07681 		bne	.L423
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4548              		.loc 1 1996 2 is_stmt 1 view .LVU1374
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4549              		.loc 1 1996 12 is_stmt 0 view .LVU1375
 4550 0030 CC4E     		ldr	r6, .L675
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4551              		.loc 1 1996 5 view .LVU1376
 4552 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4553 0034 012B     		cmp	r3, #1
 4554 0036 00F0FB82 		beq	.L652
1939:src/display.c **** 	char *p = mantissa;
 4555              		.loc 1 1939 6 view .LVU1377
 4556 003a 8046     		mov	r8, r0
 4557              	.LVL502:
 4558              	.L430:
2002:src/display.c **** 
 4559              		.loc 1 2002 2 is_stmt 1 view .LVU1378
ARM GAS  /tmp/ccPv3rzq.s 			page 164


 4560 003c 09AF     		add	r7, sp, #36
 4561              	.LVL503:
2002:src/display.c **** 
 4562              		.loc 1 2002 2 is_stmt 0 view .LVU1379
 4563 003e 3846     		mov	r0, r7
 4564 0040 3222     		movs	r2, #50
 4565 0042 0021     		movs	r1, #0
 4566 0044 FFF7FEFF 		bl	xset
 4567              	.LVL504:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4568              		.loc 1 2004 2 is_stmt 1 view .LVU1380
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4569              		.loc 1 2004 6 is_stmt 0 view .LVU1381
 4570 0048 5046     		mov	r0, r10
 4571 004a FFF7FEFF 		bl	dn_eq0
 4572              	.LVL505:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4573              		.loc 1 2004 5 view .LVU1382
 4574 004e 0028     		cmp	r0, #0
 4575 0050 00F06781 		beq	.L431
2005:src/display.c **** 	    x[0] = '-';
 4576              		.loc 1 2005 4 is_stmt 1 view .LVU1383
2005:src/display.c **** 	    x[0] = '-';
 4577              		.loc 1 2005 7 is_stmt 0 view .LVU1384
 4578 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4579 0058 002B     		cmp	r3, #0
 4580 005a C0F21083 		blt	.L653
 4581              	.L432:
2009:src/display.c **** 	} else
 4582              		.loc 1 2009 6 is_stmt 1 view .LVU1385
2009:src/display.c **** 	} else
 4583              		.loc 1 2009 11 is_stmt 0 view .LVU1386
 4584 005e 3023     		movs	r3, #48
 4585 0060 8DF82430 		strb	r3, [sp, #36]
 4586              	.L433:
2013:src/display.c **** 	  show_x(x, exp);
 4587              		.loc 1 2013 2 is_stmt 1 view .LVU1387
2013:src/display.c **** 	  show_x(x, exp);
 4588              		.loc 1 2013 12 is_stmt 0 view .LVU1388
 4589 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2013:src/display.c **** 	  show_x(x, exp);
 4590              		.loc 1 2013 5 view .LVU1389
 4591 0068 BBF1010F 		cmp	fp, #1
 4592 006c 00F04883 		beq	.L654
2019:src/display.c **** 	  //  ALL mode: fill the display
 4593              		.loc 1 2019 2 is_stmt 1 view .LVU1390
2019:src/display.c **** 	  //  ALL mode: fill the display
 4594              		.loc 1 2019 5 is_stmt 0 view .LVU1391
 4595 0070 002D     		cmp	r5, #0
 4596 0072 40F08181 		bne	.L655
2021:src/display.c **** 	else
 4597              		.loc 1 2021 4 is_stmt 1 view .LVU1392
2021:src/display.c **** 	else
 4598              		.loc 1 2021 25 is_stmt 0 view .LVU1393
 4599 0076 019E     		ldr	r6, [sp, #4]
 4600              	.LBB401:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
ARM GAS  /tmp/ccPv3rzq.s 			page 165


 4601              		.loc 1 2028 11 view .LVU1394
 4602 0078 089B     		ldr	r3, [sp, #32]
 4603              	.LBE401:
2021:src/display.c **** 	else
 4604              		.loc 1 2021 25 view .LVU1395
 4605 007a 3168     		ldr	r1, [r6]
 4606              	.LBB402:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4607              		.loc 1 2028 11 view .LVU1396
 4608 007c 2A46     		mov	r2, r5
 4609 007e 5046     		mov	r0, r10
 4610              	.LBE402:
2021:src/display.c **** 	else
 4611              		.loc 1 2021 25 view .LVU1397
 4612 0080 4D1E     		subs	r5, r1, #1
 4613              	.LVL506:
 4614              	.LBB403:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4615              		.loc 1 2028 11 view .LVU1398
 4616 0082 07A9     		add	r1, sp, #28
 4617              	.LBE403:
2021:src/display.c **** 	else
 4618              		.loc 1 2021 7 view .LVU1399
 4619 0084 0795     		str	r5, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 4620              		.loc 1 2025 2 is_stmt 1 view .LVU1400
 4621              	.LBB404:
2026:src/display.c **** 
 4622              		.loc 1 2026 4 view .LVU1401
 4623              	.LVL507:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4624              		.loc 1 2028 4 view .LVU1402
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4625              		.loc 1 2028 11 is_stmt 0 view .LVU1403
 4626 0086 FFF7FEFF 		bl	std_round_fix
 4627              	.LVL508:
2033:src/display.c ****  	}
 4628              		.loc 1 2033 27 view .LVU1404
 4629 008a 3368     		ldr	r3, [r6]
 4630 008c 013B     		subs	r3, r3, #1
2033:src/display.c ****  	}
 4631              		.loc 1 2033 9 view .LVU1405
 4632 008e 0793     		str	r3, [sp, #28]
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4633              		.loc 1 2031 16 view .LVU1406
 4634 0090 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4635              		.loc 1 2028 11 view .LVU1407
 4636 0092 0546     		mov	r5, r0
 4637              	.LVL509:
2029:src/display.c **** 	    // allow zeros to be trimmed
 4638              		.loc 1 2029 4 is_stmt 1 view .LVU1408
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4639              		.loc 1 2031 6 view .LVU1409
2032:src/display.c **** 	    dd = *display_digits - 1;
 4640              		.loc 1 2032 4 view .LVU1410
2033:src/display.c ****  	}
ARM GAS  /tmp/ccPv3rzq.s 			page 166


 4641              		.loc 1 2033 6 view .LVU1411
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4642              		.loc 1 2031 16 is_stmt 0 view .LVU1412
 4643 0094 0493     		str	r3, [sp, #16]
 4644              	.LVL510:
 4645              	.L554:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4646              		.loc 1 2031 16 view .LVU1413
 4647              	.LBE404:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4648              		.loc 1 2045 2 is_stmt 1 view .LVU1414
 4649 0096 0DF1580B 		add	fp, sp, #88
 4650              	.LVL511:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4651              		.loc 1 2045 2 is_stmt 0 view .LVU1415
 4652 009a 3F22     		movs	r2, #63
 4653 009c 3021     		movs	r1, #48
 4654 009e 5846     		mov	r0, fp
 4655 00a0 FFF7FEFF 		bl	xset
 4656              	.LVL512:
2046:src/display.c **** 
 4657              		.loc 1 2046 2 is_stmt 1 view .LVU1416
2046:src/display.c **** 
 4658              		.loc 1 2046 31 is_stmt 0 view .LVU1417
 4659 00a4 0023     		movs	r3, #0
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4660              		.loc 1 2048 6 view .LVU1418
 4661 00a6 4521     		movs	r1, #69
 4662 00a8 3846     		mov	r0, r7
2046:src/display.c **** 
 4663              		.loc 1 2046 31 view .LVU1419
 4664 00aa 8DF89730 		strb	r3, [sp, #151]
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4665              		.loc 1 2048 2 is_stmt 1 view .LVU1420
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4666              		.loc 1 2048 6 is_stmt 0 view .LVU1421
 4667 00ae FFF7FEFF 		bl	find_char
 4668              	.LVL513:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4669              		.loc 1 2050 2 is_stmt 1 view .LVU1422
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4670              		.loc 1 2050 5 is_stmt 0 view .LVU1423
 4671 00b2 0646     		mov	r6, r0
 4672 00b4 0028     		cmp	r0, #0
 4673 00b6 00F06D81 		beq	.L656
 4674              	.L449:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4675              		.loc 1 2053 4 is_stmt 1 view .LVU1424
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4676              		.loc 1 2053 10 is_stmt 0 view .LVU1425
 4677 00ba 701C     		adds	r0, r6, #1
 4678              	.LVL514:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4679              		.loc 1 2053 10 view .LVU1426
 4680 00bc FFF7FEFF 		bl	s_to_i
 4681              	.LVL515:
2054:src/display.c **** 	}
ARM GAS  /tmp/ccPv3rzq.s 			page 167


 4682              		.loc 1 2054 7 view .LVU1427
 4683 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4684 00c2 442B     		cmp	r3, #68
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4685              		.loc 1 2053 10 view .LVU1428
 4686 00c4 0646     		mov	r6, r0
 4687              	.LVL516:
2054:src/display.c **** 	}
 4688              		.loc 1 2054 4 is_stmt 1 view .LVU1429
2054:src/display.c **** 	}
 4689              		.loc 1 2054 19 view .LVU1430
2054:src/display.c **** 	}
 4690              		.loc 1 2054 23 is_stmt 0 view .LVU1431
 4691 00c6 08BF     		it	eq
 4692 00c8 4642     		rsbeq	r6, r0, #0
 4693              	.LVL517:
 4694              	.L450:
2062:src/display.c **** 	if (!res) {
 4695              		.loc 1 2062 2 is_stmt 1 view .LVU1432
2062:src/display.c **** 	if (!res) {
 4696              		.loc 1 2062 12 view .LVU1433
2062:src/display.c **** 	if (!res) {
 4697              		.loc 1 2062 2 is_stmt 0 view .LVU1434
 4698 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4699 00ce 202B     		cmp	r3, #32
2062:src/display.c **** 	if (!res) {
 4700              		.loc 1 2062 8 view .LVU1435
 4701 00d0 B846     		mov	r8, r7
2062:src/display.c **** 	if (!res) {
 4702              		.loc 1 2062 2 view .LVU1436
 4703 00d2 03D1     		bne	.L451
 4704              	.LVL518:
 4705              	.L452:
2062:src/display.c **** 	if (!res) {
 4706              		.loc 1 2062 27 is_stmt 1 discriminator 3 view .LVU1437
2062:src/display.c **** 	if (!res) {
 4707              		.loc 1 2062 23 discriminator 3 view .LVU1438
2062:src/display.c **** 	if (!res) {
 4708              		.loc 1 2062 12 discriminator 3 view .LVU1439
2062:src/display.c **** 	if (!res) {
 4709              		.loc 1 2062 2 is_stmt 0 discriminator 3 view .LVU1440
 4710 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4711              	.LVL519:
2062:src/display.c **** 	if (!res) {
 4712              		.loc 1 2062 2 discriminator 3 view .LVU1441
 4713 00d8 202B     		cmp	r3, #32
 4714 00da FBD0     		beq	.L452
 4715              	.LVL520:
 4716              	.L451:
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4717              		.loc 1 2063 2 is_stmt 1 view .LVU1442
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4718              		.loc 1 2063 5 is_stmt 0 view .LVU1443
 4719 00dc 002C     		cmp	r4, #0
 4720 00de 00F0D982 		beq	.L657
 4721              	.L453:
2067:src/display.c **** 	  negative = 1;
ARM GAS  /tmp/ccPv3rzq.s 			page 168


 4722              		.loc 1 2067 2 is_stmt 1 view .LVU1444
2067:src/display.c **** 	  negative = 1;
 4723              		.loc 1 2067 6 is_stmt 0 view .LVU1445
 4724 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2067:src/display.c **** 	  negative = 1;
 4725              		.loc 1 2067 5 view .LVU1446
 4726 00e6 2D2B     		cmp	r3, #45
 4727 00e8 00F0E481 		beq	.L658
2070:src/display.c **** 	  q++;
 4728              		.loc 1 2070 9 is_stmt 1 view .LVU1447
2070:src/display.c **** 	  q++;
 4729              		.loc 1 2070 12 is_stmt 0 view .LVU1448
 4730 00ec 2B2B     		cmp	r3, #43
 4731 00ee 00F0BF82 		beq	.L659
1954:src/display.c **** 	int trimzeros = 0;
 4732              		.loc 1 1954 6 view .LVU1449
 4733 00f2 0022     		movs	r2, #0
 4734 00f4 0392     		str	r2, [sp, #12]
 4735              	.LVL521:
 4736              	.L455:
2072:src/display.c **** 	if (*q == '.') {
 4737              		.loc 1 2072 9 is_stmt 1 discriminator 1 view .LVU1450
2072:src/display.c **** 	if (*q == '.') {
 4738              		.loc 1 2072 2 is_stmt 0 discriminator 1 view .LVU1451
 4739 00f6 302B     		cmp	r3, #48
 4740 00f8 03D1     		bne	.L457
 4741              	.LVL522:
 4742              	.L456:
2072:src/display.c **** 	if (*q == '.') {
 4743              		.loc 1 2072 24 is_stmt 1 discriminator 2 view .LVU1452
2072:src/display.c **** 	if (*q == '.') {
 4744              		.loc 1 2072 20 discriminator 2 view .LVU1453
2072:src/display.c **** 	if (*q == '.') {
 4745              		.loc 1 2072 9 discriminator 2 view .LVU1454
 4746 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4747              	.LVL523:
2072:src/display.c **** 	if (*q == '.') {
 4748              		.loc 1 2072 2 is_stmt 0 discriminator 2 view .LVU1455
 4749 00fe 302B     		cmp	r3, #48
 4750 0100 FBD0     		beq	.L456
 4751              	.LVL524:
 4752              	.L457:
2073:src/display.c **** 	  do
 4753              		.loc 1 2073 2 is_stmt 1 view .LVU1456
2073:src/display.c **** 	  do
 4754              		.loc 1 2073 5 is_stmt 0 view .LVU1457
 4755 0102 2E2B     		cmp	r3, #46
 4756 0104 00F0BE81 		beq	.L660
2080:src/display.c **** 	    *p++ = *q++;
 4757              		.loc 1 2080 4 is_stmt 1 view .LVU1458
2080:src/display.c **** 	    *p++ = *q++;
 4758              		.loc 1 2080 7 is_stmt 0 view .LVU1459
 4759 0108 A3F13002 		sub	r2, r3, #48
 4760 010c 092A     		cmp	r2, #9
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4761              		.loc 1 2081 6 is_stmt 1 view .LVU1460
 4762              	.LVL525:
ARM GAS  /tmp/ccPv3rzq.s 			page 169


2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4763              		.loc 1 2081 15 is_stmt 0 view .LVU1461
 4764 010e 9CBF     		itt	ls
 4765 0110 08F10108 		addls	r8, r8, #1
 4766              	.LVL526:
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4767              		.loc 1 2081 11 view .LVU1462
 4768 0114 8DF85830 		strbls	r3, [sp, #88]
2082:src/display.c **** 	    *p++ = *q++;
 4769              		.loc 1 2082 11 view .LVU1463
 4770 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2082:src/display.c **** 	    *p++ = *q++;
 4771              		.loc 1 2082 10 view .LVU1464
 4772 011c A2F13003 		sub	r3, r2, #48
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4773              		.loc 1 2081 8 view .LVU1465
 4774 0120 94BF     		ite	ls
 4775 0122 0DF15901 		addls	r1, sp, #89
1940:src/display.c **** 	char *r;
 4776              		.loc 1 1940 8 view .LVU1466
 4777 0126 5946     		movhi	r1, fp
 4778              	.LVL527:
2082:src/display.c **** 	    *p++ = *q++;
 4779              		.loc 1 2082 10 is_stmt 1 view .LVU1467
 4780 0128 092B     		cmp	r3, #9
 4781 012a 0ED8     		bhi	.L463
 4782 012c A6EB0800 		sub	r0, r6, r8
 4783 0130 08F10103 		add	r3, r8, #1
 4784              	.L464:
 4785              	.LVL528:
2083:src/display.c **** 	    exp++;
 4786              		.loc 1 2083 6 view .LVU1468
2083:src/display.c **** 	    exp++;
 4787              		.loc 1 2083 11 is_stmt 0 view .LVU1469
 4788 0134 01F8012B 		strb	r2, [r1], #1
 4789              	.LVL529:
2083:src/display.c **** 	    exp++;
 4790              		.loc 1 2083 15 view .LVU1470
 4791 0138 9846     		mov	r8, r3
 4792              	.LVL530:
2084:src/display.c **** 	  }
 4793              		.loc 1 2084 6 is_stmt 1 view .LVU1471
 4794 013a C618     		adds	r6, r0, r3
 4795              	.LVL531:
2082:src/display.c **** 	    *p++ = *q++;
 4796              		.loc 1 2082 10 view .LVU1472
2082:src/display.c **** 	    *p++ = *q++;
 4797              		.loc 1 2082 11 is_stmt 0 view .LVU1473
 4798 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4799              	.LVL532:
2082:src/display.c **** 	    *p++ = *q++;
 4800              		.loc 1 2082 10 view .LVU1474
 4801 0140 A2F1300C 		sub	ip, r2, #48
 4802 0144 BCF1090F 		cmp	ip, #9
 4803 0148 F4D9     		bls	.L464
 4804              	.LVL533:
 4805              	.L463:
ARM GAS  /tmp/ccPv3rzq.s 			page 170


2086:src/display.c **** 	    q++;
 4806              		.loc 1 2086 4 is_stmt 1 view .LVU1475
2086:src/display.c **** 	    q++;
 4807              		.loc 1 2086 7 is_stmt 0 view .LVU1476
 4808 014a 2E2A     		cmp	r2, #46
 4809 014c 00F07E82 		beq	.L661
 4810              	.LVL534:
 4811              	.L460:
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4812              		.loc 1 2093 2 is_stmt 1 view .LVU1477
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4813              		.loc 1 2094 12 is_stmt 0 view .LVU1478
 4814 0150 019B     		ldr	r3, [sp, #4]
 4815 0152 079A     		ldr	r2, [sp, #28]
 4816 0154 1B68     		ldr	r3, [r3]
 4817 0156 0293     		str	r3, [sp, #8]
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4818              		.loc 1 2093 5 view .LVU1479
 4819 0158 012D     		cmp	r5, #1
 4820 015a 00F08381 		beq	.L466
 4821              	.LVL535:
 4822              	.L651:
2095:src/display.c **** 	  else {
 4823              		.loc 1 2095 35 view .LVU1480
 4824 015e 0021     		movs	r1, #0
 4825              	.LVL536:
 4826              	.L467:
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4827              		.loc 1 2107 2 is_stmt 1 view .LVU1481
 4828 0160 02F1010E 		add	lr, r2, #1
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4829              		.loc 1 2107 35 is_stmt 0 view .LVU1482
 4830 0164 7144     		add	r1, r1, lr
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4831              		.loc 1 2107 4 view .LVU1483
 4832 0166 0BEB0103 		add	r3, fp, r1
 4833              	.LVL537:
2108:src/display.c **** 	  *p = '0';
 4834              		.loc 1 2108 2 is_stmt 1 view .LVU1484
2108:src/display.c **** 	  *p = '0';
 4835              		.loc 1 2108 6 is_stmt 0 view .LVU1485
 4836 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2108:src/display.c **** 	  *p = '0';
 4837              		.loc 1 2108 5 view .LVU1486
 4838 016e 3428     		cmp	r0, #52
 4839 0170 26D9     		bls	.L472
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4840              		.loc 1 2109 4 is_stmt 1 view .LVU1487
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4841              		.loc 1 2109 7 is_stmt 0 view .LVU1488
 4842 0172 3020     		movs	r0, #48
 4843 0174 0BF80100 		strb	r0, [fp, r1]
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4844              		.loc 1 2110 4 is_stmt 1 view .LVU1489
 4845              	.LVL538:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4846              		.loc 1 2110 23 view .LVU1490
ARM GAS  /tmp/ccPv3rzq.s 			page 171


2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4847              		.loc 1 2110 4 is_stmt 0 view .LVU1491
 4848 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 4849 017c 3928     		cmp	r0, #57
 4850 017e 40F0D783 		bne	.L473
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4851              		.loc 1 2110 11 view .LVU1492
 4852 0182 5846     		mov	r0, fp
 4853              	.LVL539:
 4854              	.L474:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4855              		.loc 1 2110 38 is_stmt 1 discriminator 3 view .LVU1493
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4856              		.loc 1 2110 34 discriminator 3 view .LVU1494
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4857              		.loc 1 2110 23 discriminator 3 view .LVU1495
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4858              		.loc 1 2110 4 is_stmt 0 discriminator 3 view .LVU1496
 4859 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 4860              	.LVL540:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4861              		.loc 1 2110 4 discriminator 3 view .LVU1497
 4862 0188 BCF1390F 		cmp	ip, #57
 4863 018c FAD0     		beq	.L474
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4864              		.loc 1 2111 4 is_stmt 1 view .LVU1498
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4865              		.loc 1 2111 7 is_stmt 0 view .LVU1499
 4866 018e 8342     		cmp	r3, r0
 4867 0190 00F01681 		beq	.L662
 4868              	.LVL541:
 4869              	.L552:
2120:src/display.c **** 	      *p = '0';
 4870              		.loc 1 2120 12 is_stmt 1 view .LVU1500
2120:src/display.c **** 	      *p = '0';
 4871              		.loc 1 2120 13 is_stmt 0 view .LVU1501
 4872 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2120:src/display.c **** 	      *p = '0';
 4873              		.loc 1 2120 12 view .LVU1502
 4874 0198 BCF1390F 		cmp	ip, #57
 4875 019c 03F1FF30 		add	r0, r3, #-1
 4876              	.LVL542:
2120:src/display.c **** 	      *p = '0';
 4877              		.loc 1 2120 12 view .LVU1503
 4878 01a0 08D1     		bne	.L477
2121:src/display.c **** 	    (*p)++;
 4879              		.loc 1 2121 11 view .LVU1504
 4880 01a2 4FF0300E 		mov	lr, #48
 4881              	.L476:
2121:src/display.c **** 	    (*p)++;
 4882              		.loc 1 2121 8 is_stmt 1 view .LVU1505
2121:src/display.c **** 	    (*p)++;
 4883              		.loc 1 2121 11 is_stmt 0 view .LVU1506
 4884 01a6 80F800E0 		strb	lr, [r0]
2120:src/display.c **** 	      *p = '0';
 4885              		.loc 1 2120 12 is_stmt 1 view .LVU1507
 4886              	.LVL543:
ARM GAS  /tmp/ccPv3rzq.s 			page 172


2120:src/display.c **** 	      *p = '0';
 4887              		.loc 1 2120 13 is_stmt 0 view .LVU1508
 4888 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 4889              	.LVL544:
2120:src/display.c **** 	      *p = '0';
 4890              		.loc 1 2120 12 view .LVU1509
 4891 01ae BCF1390F 		cmp	ip, #57
 4892 01b2 F8D0     		beq	.L476
 4893              	.L477:
2122:src/display.c **** 	  }
 4894              		.loc 1 2122 6 is_stmt 1 view .LVU1510
2122:src/display.c **** 	  }
 4895              		.loc 1 2122 10 is_stmt 0 view .LVU1511
 4896 01b4 0CF1010C 		add	ip, ip, #1
 4897 01b8 80F800C0 		strb	ip, [r0]
 4898              	.LVL545:
 4899              	.L650:
2122:src/display.c **** 	  }
 4900              		.loc 1 2122 10 view .LVU1512
 4901 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 4902              	.L472:
2127:src/display.c **** 
 4903              		.loc 1 2127 2 is_stmt 1 view .LVU1513
 4904              	.LVL546:
2127:src/display.c **** 
 4905              		.loc 1 2127 45 view .LVU1514
2127:src/display.c **** 
 4906              		.loc 1 2127 2 is_stmt 0 view .LVU1515
 4907 01c0 28B1     		cbz	r0, .L483
 4908              	.LVL547:
 4909              	.L551:
2127:src/display.c **** 
 4910              		.loc 1 2127 62 view .LVU1516
 4911 01c2 3020     		movs	r0, #48
 4912              	.L484:
2127:src/display.c **** 
 4913              		.loc 1 2127 68 is_stmt 1 discriminator 3 view .LVU1517
2127:src/display.c **** 
 4914              		.loc 1 2127 57 discriminator 3 view .LVU1518
 4915              	.LVL548:
2127:src/display.c **** 
 4916              		.loc 1 2127 62 is_stmt 0 discriminator 3 view .LVU1519
 4917 01c4 03F8010B 		strb	r0, [r3], #1
 4918              	.LVL549:
2127:src/display.c **** 
 4919              		.loc 1 2127 45 is_stmt 1 discriminator 3 view .LVU1520
2127:src/display.c **** 
 4920              		.loc 1 2127 2 is_stmt 0 discriminator 3 view .LVU1521
 4921 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4922 01ca 0029     		cmp	r1, #0
 4923 01cc FAD1     		bne	.L484
 4924              	.L483:
2129:src/display.c **** 	switch (mode) {
 4925              		.loc 1 2129 2 is_stmt 1 view .LVU1522
 4926              	.LVL550:
2130:src/display.c **** 	default:
 4927              		.loc 1 2130 2 view .LVU1523
ARM GAS  /tmp/ccPv3rzq.s 			page 173


 4928 01ce 022D     		cmp	r5, #2
 4929 01d0 00F07681 		beq	.L521
 4930 01d4 032D     		cmp	r5, #3
 4931 01d6 00F01881 		beq	.L486
 4932 01da 012D     		cmp	r5, #1
 4933 01dc 00F0F081 		beq	.L487
2133:src/display.c **** 	  if (count != *display_digits)
 4934              		.loc 1 2133 4 view .LVU1524
 4935              	.LVL551:
2133:src/display.c **** 	  if (count != *display_digits)
 4936              		.loc 1 2133 34 view .LVU1525
2133:src/display.c **** 	  if (count != *display_digits)
 4937              		.loc 1 2133 42 is_stmt 0 view .LVU1526
 4938 01e0 0298     		ldr	r0, [sp, #8]
 4939 01e2 26AB     		add	r3, sp, #152
 4940 01e4 0344     		add	r3, r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4941              		.loc 1 2133 4 view .LVU1527
 4942 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 4943 01ea 302B     		cmp	r3, #48
 4944 01ec 40F09883 		bne	.L567
 4945 01f0 411E     		subs	r1, r0, #1
 4946 01f2 5944     		add	r1, r1, fp
 4947              	.LVL552:
 4948              	.L491:
2133:src/display.c **** 	  if (count != *display_digits)
 4949              		.loc 1 2133 66 is_stmt 1 discriminator 3 view .LVU1528
2133:src/display.c **** 	  if (count != *display_digits)
 4950              		.loc 1 2133 58 discriminator 3 view .LVU1529
2133:src/display.c **** 	  if (count != *display_digits)
 4951              		.loc 1 2133 42 is_stmt 0 discriminator 3 view .LVU1530
 4952 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2133:src/display.c **** 	  if (count != *display_digits)
 4953              		.loc 1 2133 4 discriminator 3 view .LVU1531
 4954 01f8 302D     		cmp	r5, #48
 4955 01fa 0346     		mov	r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4956              		.loc 1 2133 63 discriminator 3 view .LVU1532
 4957 01fc 00F1FF30 		add	r0, r0, #-1
 4958              	.LVL553:
2133:src/display.c **** 	  if (count != *display_digits)
 4959              		.loc 1 2133 34 is_stmt 1 discriminator 3 view .LVU1533
2133:src/display.c **** 	  if (count != *display_digits)
 4960              		.loc 1 2133 4 is_stmt 0 discriminator 3 view .LVU1534
 4961 0200 F8D0     		beq	.L491
2134:src/display.c **** 	    count++;
 4962              		.loc 1 2134 4 is_stmt 1 view .LVU1535
2134:src/display.c **** 	    count++;
 4963              		.loc 1 2134 7 is_stmt 0 view .LVU1536
 4964 0202 0299     		ldr	r1, [sp, #8]
 4965 0204 8842     		cmp	r0, r1
 4966 0206 08BF     		it	eq
 4967 0208 0B46     		moveq	r3, r1
 4968              	.LVL554:
 4969              	.L490:
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4970              		.loc 1 2137 4 is_stmt 1 view .LVU1537
ARM GAS  /tmp/ccPv3rzq.s 			page 174


2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4971              		.loc 1 2137 7 is_stmt 0 view .LVU1538
 4972 020a 0299     		ldr	r1, [sp, #8]
 4973 020c 8E42     		cmp	r6, r1
 4974 020e 80F20E81 		bge	.L492
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4975              		.loc 1 2137 47 discriminator 1 view .LVU1539
 4976 0212 591A     		subs	r1, r3, r1
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4977              		.loc 1 2137 31 discriminator 1 view .LVU1540
 4978 0214 B142     		cmp	r1, r6
 4979 0216 00F30A81 		bgt	.L492
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 4980              		.loc 1 2162 11 is_stmt 1 view .LVU1541
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 4981              		.loc 1 2162 14 is_stmt 0 view .LVU1542
 4982 021a 002E     		cmp	r6, #0
 4983 021c C0F29D83 		blt	.L501
 4984 0220 721C     		adds	r2, r6, #1
2164:src/display.c **** 		*obp++ = ',';
 4985              		.loc 1 2164 31 view .LVU1543
 4986 0222 DFF84CE1 		ldr	lr, .L675+12
 4987 0226 0592     		str	r2, [sp, #20]
 4988 0228 0BEB0200 		add	r0, fp, r2
2129:src/display.c **** 	switch (mode) {
 4989              		.loc 1 2129 4 view .LVU1544
 4990 022c DC46     		mov	ip, fp
1934:src/display.c **** 	int odig = 0;
 4991              		.loc 1 1934 15 view .LVU1545
 4992 022e 3946     		mov	r1, r7
 4993 0230 05E0     		b	.L502
 4994              	.LVL555:
 4995              	.L505:
2165:src/display.c **** 	      *obp++ = *p++;
 4996              		.loc 1 2165 3 is_stmt 1 view .LVU1546
2164:src/display.c **** 		*obp++ = ',';
 4997              		.loc 1 2164 18 is_stmt 0 view .LVU1547
 4998 0232 022D     		cmp	r5, #2
2165:src/display.c **** 	      *obp++ = *p++;
 4999              		.loc 1 2165 10 view .LVU1548
 5000 0234 05BF     		ittet	eq
 5001 0236 2C22     		moveq	r2, #44
 5002 0238 4A70     		strbeq	r2, [r1, #1]
2166:src/display.c **** 	      odig++;
 5003              		.loc 1 2166 12 view .LVU1549
 5004 023a 0131     		addne	r1, r1, #1
 5005              	.LVL556:
2165:src/display.c **** 	      *obp++ = *p++;
 5006              		.loc 1 2165 7 view .LVU1550
 5007 023c 0231     		addeq	r1, r1, #2
 5008              	.LVL557:
 5009              	.L502:
2166:src/display.c **** 	      odig++;
 5010              		.loc 1 2166 8 is_stmt 1 discriminator 2 view .LVU1551
2166:src/display.c **** 	      odig++;
 5011              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1552
 5012 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccPv3rzq.s 			page 175


 5013              	.LVL558:
2164:src/display.c **** 		*obp++ = ',';
 5014              		.loc 1 2164 8 is_stmt 1 discriminator 2 view .LVU1553
2166:src/display.c **** 	      odig++;
 5015              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1554
 5016 0242 0A70     		strb	r2, [r1]
2167:src/display.c **** 	    }
 5017              		.loc 1 2167 8 is_stmt 1 discriminator 2 view .LVU1555
 5018              	.LVL559:
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5019              		.loc 1 2163 23 discriminator 2 view .LVU1556
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5020              		.loc 1 2163 15 discriminator 2 view .LVU1557
2164:src/display.c **** 		*obp++ = ',';
 5021              		.loc 1 2164 31 is_stmt 0 discriminator 2 view .LVU1558
 5022 0244 ABEB0C02 		sub	r2, fp, ip
 5023 0248 3244     		add	r2, r2, r6
 5024 024a 8EFB0285 		smull	r8, r5, lr, r2
 5025 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5026 0252 05EB4505 		add	r5, r5, r5, lsl #1
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5027              		.loc 1 2163 6 discriminator 2 view .LVU1559
 5028 0256 6045     		cmp	r0, ip
2164:src/display.c **** 		*obp++ = ',';
 5029              		.loc 1 2164 31 discriminator 2 view .LVU1560
 5030 0258 A2EB0505 		sub	r5, r2, r5
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5031              		.loc 1 2163 6 discriminator 2 view .LVU1561
 5032 025c E9D1     		bne	.L505
 5033 025e 059D     		ldr	r5, [sp, #20]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5034              		.loc 1 2169 6 is_stmt 1 view .LVU1562
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5035              		.loc 1 2169 13 is_stmt 0 view .LVU1563
 5036 0260 2E22     		movs	r2, #46
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5037              		.loc 1 2170 9 view .LVU1564
 5038 0262 AB42     		cmp	r3, r5
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5039              		.loc 1 2169 13 view .LVU1565
 5040 0264 4A70     		strb	r2, [r1, #1]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5041              		.loc 1 2169 10 view .LVU1566
 5042 0266 01F10208 		add	r8, r1, #2
 5043              	.LVL560:
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5044              		.loc 1 2170 6 is_stmt 1 view .LVU1567
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5045              		.loc 1 2170 9 is_stmt 0 view .LVU1568
 5046 026a 40F34B81 		ble	.L499
 5047 026e 9A1B     		subs	r2, r3, r6
 5048 0270 0A44     		add	r2, r2, r1
 5049 0272 0131     		adds	r1, r1, #1
 5050              	.LVL561:
 5051              	.L506:
2172:src/display.c **** 		odig++;
 5052              		.loc 1 2172 3 is_stmt 1 discriminator 3 view .LVU1569
ARM GAS  /tmp/ccPv3rzq.s 			page 176


2172:src/display.c **** 		odig++;
 5053              		.loc 1 2172 10 is_stmt 0 discriminator 3 view .LVU1570
 5054 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5055              	.LVL562:
2172:src/display.c **** 		odig++;
 5056              		.loc 1 2172 10 discriminator 3 view .LVU1571
 5057 0278 01F8015F 		strb	r5, [r1, #1]!
2173:src/display.c **** 	      }
 5058              		.loc 1 2173 3 is_stmt 1 discriminator 3 view .LVU1572
2171:src/display.c **** 		*obp++ = *p++;
 5059              		.loc 1 2171 31 discriminator 3 view .LVU1573
2171:src/display.c **** 		*obp++ = *p++;
 5060              		.loc 1 2171 22 discriminator 3 view .LVU1574
2171:src/display.c **** 		*obp++ = *p++;
 5061              		.loc 1 2171 8 is_stmt 0 discriminator 3 view .LVU1575
 5062 027c 9142     		cmp	r1, r2
 5063 027e F9D1     		bne	.L506
 5064 0280 F243     		mvns	r2, r6
 5065 0282 1A44     		add	r2, r2, r3
 5066 0284 9044     		add	r8, r8, r2
 5067              	.LVL563:
2173:src/display.c **** 	      }
 5068              		.loc 1 2173 7 view .LVU1576
 5069 0286 1D46     		mov	r5, r3
 5070 0288 3CE1     		b	.L499
 5071              	.LVL564:
 5072              	.L571:
2173:src/display.c **** 	      }
 5073              		.loc 1 2173 7 view .LVU1577
 5074 028a B846     		mov	r8, r7
 5075              	.LVL565:
 5076              	.L528:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5077              		.loc 1 2265 2 is_stmt 1 view .LVU1578
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5078              		.loc 1 2265 5 is_stmt 0 view .LVU1579
 5079 028c 029B     		ldr	r3, [sp, #8]
 5080 028e 0A2B     		cmp	r3, #10
 5081 0290 02DD     		ble	.L531
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5082              		.loc 1 2265 50 discriminator 1 view .LVU1580
 5083 0292 002C     		cmp	r4, #0
 5084 0294 00F00E82 		beq	.L663
 5085              	.L531:
2271:src/display.c **** 	if (odig > *display_digits)
 5086              		.loc 1 2271 2 is_stmt 1 view .LVU1581
 5087 0298 029B     		ldr	r3, [sp, #8]
 5088 029a 9D42     		cmp	r5, r3
 5089 029c A8BF     		it	ge
 5090 029e 1D46     		movge	r5, r3
 5091              	.LVL566:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5092              		.loc 1 2274 23 is_stmt 0 view .LVU1582
 5093 02a0 A3EB050A 		sub	r10, r3, r5
 5094              	.LVL567:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5095              		.loc 1 2274 23 view .LVU1583
ARM GAS  /tmp/ccPv3rzq.s 			page 177


 5096 02a4 1A46     		mov	r2, r3
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5097              		.loc 1 2274 4 view .LVU1584
 5098 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2271:src/display.c **** 	if (odig > *display_digits)
 5099              		.loc 1 2271 7 view .LVU1585
 5100 02aa 0023     		movs	r3, #0
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5101              		.loc 1 2275 5 view .LVU1586
 5102 02ac 9A45     		cmp	r10, r3
2271:src/display.c **** 	if (odig > *display_digits)
 5103              		.loc 1 2271 7 view .LVU1587
 5104 02ae 88F80030 		strb	r3, [r8]
2272:src/display.c **** 	  odig = *display_digits;
 5105              		.loc 1 2272 2 is_stmt 1 view .LVU1588
 5106              	.LVL568:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5107              		.loc 1 2274 2 view .LVU1589
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5108              		.loc 1 2275 2 view .LVU1590
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5109              		.loc 1 2275 5 is_stmt 0 view .LVU1591
 5110 02b2 04DD     		ble	.L532
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5111              		.loc 1 2275 35 discriminator 1 view .LVU1592
 5112 02b4 16F57A7F 		cmn	r6, #1000
2276:src/display.c **** 	if (negative) {
 5113              		.loc 1 2276 4 is_stmt 1 discriminator 1 view .LVU1593
2276:src/display.c **** 	if (negative) {
 5114              		.loc 1 2276 6 is_stmt 0 discriminator 1 view .LVU1594
 5115 02b8 D8BF     		it	le
 5116 02ba AAF1090A 		suble	r10, r10, #9
 5117              	.LVL569:
 5118              	.L532:
2277:src/display.c **** 	  if (res) *res++ = '-';
 5119              		.loc 1 2277 2 is_stmt 1 view .LVU1595
2277:src/display.c **** 	  if (res) *res++ = '-';
 5120              		.loc 1 2277 5 is_stmt 0 view .LVU1596
 5121 02be 039B     		ldr	r3, [sp, #12]
 5122 02c0 2BB1     		cbz	r3, .L533
2278:src/display.c **** 	  else {
 5123              		.loc 1 2278 4 is_stmt 1 view .LVU1597
2278:src/display.c **** 	  else {
 5124              		.loc 1 2278 7 is_stmt 0 view .LVU1598
 5125 02c2 002C     		cmp	r4, #0
 5126 02c4 00F00582 		beq	.L534
2278:src/display.c **** 	  else {
 5127              		.loc 1 2278 13 is_stmt 1 discriminator 1 view .LVU1599
 5128              	.LVL570:
2278:src/display.c **** 	  else {
 5129              		.loc 1 2278 20 is_stmt 0 discriminator 1 view .LVU1600
 5130 02c8 2D23     		movs	r3, #45
 5131 02ca 04F8013B 		strb	r3, [r4], #1
 5132              	.LVL571:
 5133              	.L533:
2286:src/display.c **** 	  if (c == '.') {
 5134              		.loc 1 2286 12 is_stmt 1 discriminator 1 view .LVU1601
ARM GAS  /tmp/ccPv3rzq.s 			page 178


2286:src/display.c **** 	  if (c == '.') {
 5135              		.loc 1 2286 18 is_stmt 0 discriminator 1 view .LVU1602
 5136 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5137              	.LVL572:
2286:src/display.c **** 	  if (c == '.') {
 5138              		.loc 1 2286 2 discriminator 1 view .LVU1603
 5139 02d2 C1B1     		cbz	r1, .L535
2286:src/display.c **** 	  if (c == '.') {
 5140              		.loc 1 2286 31 view .LVU1604
 5141 02d4 BAF16B0F 		cmp	r10, #107
 5142 02d8 15DC     		bgt	.L535
 5143              	.LVL573:
 5144              	.L536:
2290:src/display.c **** 	  } else {
 5145              		.loc 1 2290 12 view .LVU1605
 5146 02da 234B     		ldr	r3, .L675+4
2288:src/display.c **** 	  } else if (c == ',') {
 5147              		.loc 1 2288 12 view .LVU1606
 5148 02dc DFF894B0 		ldr	fp, .L675+16
 5149              	.LVL574:
 5150              	.L547:
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5151              		.loc 1 2287 4 is_stmt 1 view .LVU1607
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5152              		.loc 1 2287 7 is_stmt 0 view .LVU1608
 5153 02e0 2E29     		cmp	r1, #46
 5154 02e2 00F02481 		beq	.L664
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5155              		.loc 1 2289 11 is_stmt 1 view .LVU1609
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5156              		.loc 1 2289 14 is_stmt 0 view .LVU1610
 5157 02e6 2C29     		cmp	r1, #44
 5158 02e8 00F04B81 		beq	.L665
2292:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5159              		.loc 1 2292 6 is_stmt 1 view .LVU1611
 5160              	.LVL575:
 5161              	.LBB405:
 5162              	.LBI405:
 339:src/display.c ****   if (res) *res++ = ch;
 5163              		.loc 1 339 14 view .LVU1612
 5164              	.LBB406:
 340:src/display.c ****   else	set_dig(base, ch);
 5165              		.loc 1 340 3 view .LVU1613
 340:src/display.c ****   else	set_dig(base, ch);
 5166              		.loc 1 340 6 is_stmt 0 view .LVU1614
 5167 02ec 002C     		cmp	r4, #0
 5168 02ee 00F05D81 		beq	.L545
 340:src/display.c ****   else	set_dig(base, ch);
 5169              		.loc 1 340 12 is_stmt 1 view .LVU1615
 5170              	.LVL576:
 340:src/display.c ****   else	set_dig(base, ch);
 5171              		.loc 1 340 19 is_stmt 0 view .LVU1616
 5172 02f2 04F8011B 		strb	r1, [r4], #1
 5173              	.LVL577:
 5174              	.L546:
 342:src/display.c **** }
 5175              		.loc 1 342 3 is_stmt 1 view .LVU1617
ARM GAS  /tmp/ccPv3rzq.s 			page 179


 342:src/display.c **** }
 5176              		.loc 1 342 3 is_stmt 0 view .LVU1618
 5177              	.LBE406:
 5178              	.LBE405:
2293:src/display.c **** 	  }
 5179              		.loc 1 2293 6 is_stmt 1 view .LVU1619
2286:src/display.c **** 	  if (c == '.') {
 5180              		.loc 1 2286 18 is_stmt 0 view .LVU1620
 5181 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5182              	.LVL578:
2293:src/display.c **** 	  }
 5183              		.loc 1 2293 8 view .LVU1621
 5184 02fa 0AF1090A 		add	r10, r10, #9
 5185              	.LVL579:
2286:src/display.c **** 	  if (c == '.') {
 5186              		.loc 1 2286 53 is_stmt 1 view .LVU1622
2286:src/display.c **** 	  if (c == '.') {
 5187              		.loc 1 2286 12 view .LVU1623
2286:src/display.c **** 	  if (c == '.') {
 5188              		.loc 1 2286 2 is_stmt 0 view .LVU1624
 5189 02fe 11B1     		cbz	r1, .L535
2286:src/display.c **** 	  if (c == '.') {
 5190              		.loc 1 2286 31 discriminator 3 view .LVU1625
 5191 0300 BAF16B0F 		cmp	r10, #107
 5192 0304 ECDD     		ble	.L547
 5193              	.LVL580:
 5194              	.L535:
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5195              		.loc 1 2306 2 is_stmt 1 view .LVU1626
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5196              		.loc 1 2306 5 is_stmt 0 view .LVU1627
 5197 0306 B9F1000F 		cmp	r9, #0
 5198 030a 40F02381 		bne	.L666
 5199              	.L548:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5200              		.loc 1 2309 2 is_stmt 1 view .LVU1628
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5201              		.loc 1 2309 5 is_stmt 0 view .LVU1629
 5202 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5203 0312 2E2B     		cmp	r3, #46
 5204 0314 00F02881 		beq	.L667
 5205              	.LVL581:
 5206              	.L549:
2311:src/display.c ****       }
 5207              		.loc 1 2311 2 is_stmt 1 view .LVU1630
2311:src/display.c ****       }
 5208              		.loc 1 2311 18 is_stmt 0 view .LVU1631
 5209 0318 019B     		ldr	r3, [sp, #4]
 5210 031a 1D60     		str	r5, [r3]
 5211              	.LVL582:
 5212              	.L423:
2312:src/display.c **** 
 5213              		.loc 1 2312 7 view .LVU1632
 5214 031c 27B0     		add	sp, sp, #156
 5215              		.cfi_remember_state
 5216              		.cfi_def_cfa_offset 36
 5217              		@ sp needed
ARM GAS  /tmp/ccPv3rzq.s 			page 180


 5218 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5219              	.LVL583:
 5220              	.L431:
 5221              		.cfi_restore_state
2011:src/display.c **** 
 5222              		.loc 1 2011 4 is_stmt 1 view .LVU1633
 5223 0322 3946     		mov	r1, r7
 5224 0324 5046     		mov	r0, r10
 5225 0326 FFF7FEFF 		bl	decNumberToString
 5226              	.LVL584:
 5227 032a 9BE6     		b	.L433
 5228              	.LVL585:
 5229              	.L424:
1969:src/display.c **** 	    if (State2.hms) {
 5230              		.loc 1 1969 4 view .LVU1634
1969:src/display.c **** 	    if (State2.hms) {
 5231              		.loc 1 1969 25 is_stmt 0 view .LVU1635
 5232 032c 0D4B     		ldr	r3, .L675
 5233 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5234              		.loc 1 1969 22 view .LVU1636
 5235 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5236              		.loc 1 1969 25 view .LVU1637
 5237 0332 01F00201 		and	r1, r1, #2
1969:src/display.c **** 	    if (State2.hms) {
 5238              		.loc 1 1969 22 view .LVU1638
 5239 0336 1143     		orrs	r1, r1, r2
 5240 0338 7FF471AE 		bne	.L427
1970:src/display.c **** 	      set_x_hms(z, res);
 5241              		.loc 1 1970 6 is_stmt 1 view .LVU1639
1970:src/display.c **** 	      set_x_hms(z, res);
 5242              		.loc 1 1970 10 is_stmt 0 view .LVU1640
 5243 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1970:src/display.c **** 	      set_x_hms(z, res);
 5244              		.loc 1 1970 9 view .LVU1641
 5245 033e DE07     		lsls	r6, r3, #31
 5246 0340 00F1EA82 		bmi	.L668
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5247              		.loc 1 1974 11 is_stmt 1 view .LVU1642
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5248              		.loc 1 1974 15 is_stmt 0 view .LVU1643
 5249 0344 094B     		ldr	r3, .L675+8
 5250 0346 1B68     		ldr	r3, [r3]
 5251 0348 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5252              		.loc 1 1974 14 view .LVU1644
 5253 034c 9806     		lsls	r0, r3, #26
 5254 034e 7FF566AE 		bpl	.L427
1975:src/display.c **** 		return;
 5255              		.loc 1 1975 8 is_stmt 1 view .LVU1645
1975:src/display.c **** 		return;
 5256              		.loc 1 1975 12 is_stmt 0 view .LVU1646
 5257 0352 2146     		mov	r1, r4
 5258 0354 5046     		mov	r0, r10
 5259 0356 FFF7FEFF 		bl	set_x_fract
 5260              	.LVL586:
ARM GAS  /tmp/ccPv3rzq.s 			page 181


1975:src/display.c **** 		return;
 5261              		.loc 1 1975 11 view .LVU1647
 5262 035a 0028     		cmp	r0, #0
 5263 035c 3FF45FAE 		beq	.L427
 5264 0360 DCE7     		b	.L423
 5265              	.L676:
 5266 0362 00BF     		.align	2
 5267              	.L675:
 5268 0364 00000000 		.word	StateWhileOn
 5269 0368 00000000 		.word	.LANCHOR0
 5270 036c 00000000 		.word	main_ram
 5271 0370 56555555 		.word	1431655766
 5272 0374 00000000 		.word	.LANCHOR1
 5273              	.LVL587:
 5274              	.L655:
2019:src/display.c **** 	  //  ALL mode: fill the display
 5275              		.loc 1 2019 38 discriminator 1 view .LVU1648
 5276 0378 019B     		ldr	r3, [sp, #4]
 5277 037a 1A68     		ldr	r2, [r3]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5278              		.loc 1 2019 35 discriminator 1 view .LVU1649
 5279 037c 089B     		ldr	r3, [sp, #32]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5280              		.loc 1 2019 23 discriminator 1 view .LVU1650
 5281 037e 9A42     		cmp	r2, r3
 5282 0380 11DD     		ble	.L446
2023:src/display.c **** 
 5283              		.loc 1 2023 4 is_stmt 1 view .LVU1651
2025:src/display.c **** 	  int orig_mode = mode;
 5284              		.loc 1 2025 23 is_stmt 0 view .LVU1652
 5285 0382 042D     		cmp	r5, #4
2023:src/display.c **** 
 5286              		.loc 1 2023 7 view .LVU1653
 5287 0384 0793     		str	r3, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5288              		.loc 1 2025 2 is_stmt 1 view .LVU1654
2025:src/display.c **** 	  int orig_mode = mode;
 5289              		.loc 1 2025 23 is_stmt 0 view .LVU1655
 5290 0386 12D0     		beq	.L447
 5291              	.L669:
2025:src/display.c **** 	  int orig_mode = mode;
 5292              		.loc 1 2025 43 discriminator 2 view .LVU1656
 5293 0388 052D     		cmp	r5, #5
 5294 038a 00F08A81 		beq	.L448
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5295              		.loc 1 1955 6 view .LVU1657
 5296 038e 0023     		movs	r3, #0
 5297 0390 0493     		str	r3, [sp, #16]
 5298 0392 80E6     		b	.L554
 5299              	.LVL588:
 5300              	.L656:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5301              		.loc 1 2050 17 is_stmt 1 discriminator 1 view .LVU1658
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5302              		.loc 1 2050 21 is_stmt 0 discriminator 1 view .LVU1659
 5303 0394 4421     		movs	r1, #68
 5304 0396 3846     		mov	r0, r7
ARM GAS  /tmp/ccPv3rzq.s 			page 182


 5305              	.LVL589:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5306              		.loc 1 2050 21 discriminator 1 view .LVU1660
 5307 0398 FFF7FEFF 		bl	find_char
 5308              	.LVL590:
2051:src/display.c **** 	else {
 5309              		.loc 1 2051 2 is_stmt 1 discriminator 1 view .LVU1661
2051:src/display.c **** 	else {
 5310              		.loc 1 2051 5 is_stmt 0 discriminator 1 view .LVU1662
 5311 039c 0646     		mov	r6, r0
 5312 039e 0028     		cmp	r0, #0
 5313 03a0 3FF493AE 		beq	.L450
 5314 03a4 89E6     		b	.L449
 5315              	.LVL591:
 5316              	.L446:
2021:src/display.c **** 	else
 5317              		.loc 1 2021 4 is_stmt 1 view .LVU1663
2021:src/display.c **** 	else
 5318              		.loc 1 2021 25 is_stmt 0 view .LVU1664
 5319 03a6 013A     		subs	r2, r2, #1
2025:src/display.c **** 	  int orig_mode = mode;
 5320              		.loc 1 2025 23 view .LVU1665
 5321 03a8 042D     		cmp	r5, #4
2021:src/display.c **** 	else
 5322              		.loc 1 2021 7 view .LVU1666
 5323 03aa 0792     		str	r2, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5324              		.loc 1 2025 2 is_stmt 1 view .LVU1667
2025:src/display.c **** 	  int orig_mode = mode;
 5325              		.loc 1 2025 23 is_stmt 0 view .LVU1668
 5326 03ac ECD1     		bne	.L669
 5327              	.L447:
 5328              	.LBB408:
2026:src/display.c **** 
 5329              		.loc 1 2026 4 is_stmt 1 view .LVU1669
 5330              	.LVL592:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5331              		.loc 1 2028 4 view .LVU1670
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5332              		.loc 1 2028 11 is_stmt 0 view .LVU1671
 5333 03ae 2A46     		mov	r2, r5
 5334 03b0 07A9     		add	r1, sp, #28
 5335 03b2 5046     		mov	r0, r10
 5336 03b4 FFF7FEFF 		bl	std_round_fix
 5337              	.LVL593:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5338              		.loc 1 2031 16 view .LVU1672
 5339 03b8 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5340              		.loc 1 2028 11 view .LVU1673
 5341 03ba 0546     		mov	r5, r0
 5342              	.LVL594:
2029:src/display.c **** 	    // allow zeros to be trimmed
 5343              		.loc 1 2029 4 is_stmt 1 view .LVU1674
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5344              		.loc 1 2031 6 view .LVU1675
2032:src/display.c **** 	    dd = *display_digits - 1;
ARM GAS  /tmp/ccPv3rzq.s 			page 183


 5345              		.loc 1 2032 4 view .LVU1676
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5346              		.loc 1 2031 16 is_stmt 0 view .LVU1677
 5347 03bc 0493     		str	r3, [sp, #16]
 5348 03be 6AE6     		b	.L554
 5349              	.LVL595:
 5350              	.L662:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5351              		.loc 1 2031 16 view .LVU1678
 5352              	.LBE408:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5353              		.loc 1 2111 7 view .LVU1679
 5354 03c0 5846     		mov	r0, fp
 5355              	.LVL596:
2112:src/display.c **** 	    mantissa[0] = '1';
 5356              		.loc 1 2112 41 view .LVU1680
 5357 03c2 4FF03008 		mov	r8, #48
 5358              	.L478:
 5359              	.LVL597:
2112:src/display.c **** 	    mantissa[0] = '1';
 5360              		.loc 1 2112 47 is_stmt 1 discriminator 3 view .LVU1681
2112:src/display.c **** 	    mantissa[0] = '1';
 5361              		.loc 1 2112 36 discriminator 3 view .LVU1682
2112:src/display.c **** 	    mantissa[0] = '1';
 5362              		.loc 1 2112 41 is_stmt 0 discriminator 3 view .LVU1683
 5363 03c6 00F8018B 		strb	r8, [r0], #1
 5364              	.LVL598:
2112:src/display.c **** 	    mantissa[0] = '1';
 5365              		.loc 1 2112 25 is_stmt 1 discriminator 3 view .LVU1684
2112:src/display.c **** 	    mantissa[0] = '1';
 5366              		.loc 1 2112 6 is_stmt 0 discriminator 3 view .LVU1685
 5367 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5368 03ce BCF1390F 		cmp	ip, #57
 5369 03d2 F8D0     		beq	.L478
 5370              	.LVL599:
 5371              	.L553:
2113:src/display.c **** 	    exp++;
 5372              		.loc 1 2113 6 is_stmt 1 view .LVU1686
2113:src/display.c **** 	    exp++;
 5373              		.loc 1 2113 18 is_stmt 0 view .LVU1687
 5374 03d4 3120     		movs	r0, #49
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5375              		.loc 1 2115 9 view .LVU1688
 5376 03d6 012D     		cmp	r5, #1
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5377              		.loc 1 2114 9 view .LVU1689
 5378 03d8 06F10106 		add	r6, r6, #1
 5379              	.LVL600:
2113:src/display.c **** 	    exp++;
 5380              		.loc 1 2113 18 view .LVU1690
 5381 03dc 8DF85800 		strb	r0, [sp, #88]
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5382              		.loc 1 2114 6 is_stmt 1 view .LVU1691
 5383              	.LVL601:
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5384              		.loc 1 2115 6 view .LVU1692
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccPv3rzq.s 			page 184


 5385              		.loc 1 2115 9 is_stmt 0 view .LVU1693
 5386 03e0 7FF4ECAE 		bne	.L650
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5387              		.loc 1 2115 27 discriminator 1 view .LVU1694
 5388 03e4 0298     		ldr	r0, [sp, #8]
 5389 03e6 8642     		cmp	r6, r0
 5390 03e8 C0F2E580 		blt	.L480
2116:src/display.c **** 	      extra_digits = 0;
 5391              		.loc 1 2116 8 is_stmt 1 view .LVU1695
2116:src/display.c **** 	      extra_digits = 0;
 5392              		.loc 1 2116 28 is_stmt 0 view .LVU1696
 5393 03ec BF4B     		ldr	r3, .L677
 5394              	.LVL602:
2116:src/display.c **** 	      extra_digits = 0;
 5395              		.loc 1 2116 28 view .LVU1697
 5396 03ee 1B68     		ldr	r3, [r3]
 5397 03f0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2116:src/display.c **** 	      extra_digits = 0;
 5398              		.loc 1 2116 37 view .LVU1698
 5399 03f4 D906     		lsls	r1, r3, #27
 5400              	.LVL603:
2116:src/display.c **** 	      extra_digits = 0;
 5401              		.loc 1 2116 37 view .LVU1699
 5402 03f6 40F1D582 		bpl	.L670
 5403              	.LVL604:
2127:src/display.c **** 
 5404              		.loc 1 2127 2 is_stmt 1 view .LVU1700
 5405 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 5406              		.loc 1 2127 9 is_stmt 0 view .LVU1701
 5407 03fe 0BEB0E03 		add	r3, fp, lr
 5408              	.LVL605:
2127:src/display.c **** 
 5409              		.loc 1 2127 45 is_stmt 1 view .LVU1702
2116:src/display.c **** 	      extra_digits = 0;
 5410              		.loc 1 2116 37 is_stmt 0 view .LVU1703
 5411 0402 0325     		movs	r5, #3
2127:src/display.c **** 
 5412              		.loc 1 2127 2 view .LVU1704
 5413 0404 0029     		cmp	r1, #0
 5414 0406 7FF4DCAE 		bne	.L551
 5415              	.LVL606:
 5416              	.L486:
2229:src/display.c **** 	  case -1:
 5417              		.loc 1 2229 4 is_stmt 1 view .LVU1705
2229:src/display.c **** 	  case -1:
 5418              		.loc 1 2229 16 is_stmt 0 view .LVU1706
 5419 040a B94B     		ldr	r3, .L677+4
 5420 040c 83FB0613 		smull	r1, r3, r3, r6
 5421 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5422 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5423 0418 F31A     		subs	r3, r6, r3
 5424 041a 0233     		adds	r3, r3, #2
 5425 041c 042B     		cmp	r3, #4
 5426 041e 4FD8     		bhi	.L521
 5427 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5428              	.L523:
ARM GAS  /tmp/ccPv3rzq.s 			page 185


 5429 0424 2402     		.2byte	(.L524-.L523)/2
 5430 0426 1202     		.2byte	(.L522-.L523)/2
 5431 0428 4E00     		.2byte	(.L521-.L523)/2
 5432 042a 2402     		.2byte	(.L524-.L523)/2
 5433 042c 1202     		.2byte	(.L522-.L523)/2
 5434              	.LVL607:
 5435              		.p2align 1
 5436              	.L492:
2138:src/display.c **** 	    case -1:
 5437              		.loc 1 2138 6 is_stmt 1 view .LVU1707
2138:src/display.c **** 	    case -1:
 5438              		.loc 1 2138 32 is_stmt 0 view .LVU1708
 5439 042e AF48     		ldr	r0, .L677
2138:src/display.c **** 	    case -1:
 5440              		.loc 1 2138 19 view .LVU1709
 5441 0430 AF49     		ldr	r1, .L677+4
2138:src/display.c **** 	    case -1:
 5442              		.loc 1 2138 32 view .LVU1710
 5443 0432 0068     		ldr	r0, [r0]
2138:src/display.c **** 	    case -1:
 5444              		.loc 1 2138 19 view .LVU1711
 5445 0434 81FB0651 		smull	r5, r1, r1, r6
2138:src/display.c **** 	    case -1:
 5446              		.loc 1 2138 32 view .LVU1712
 5447 0438 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2138:src/display.c **** 	    case -1:
 5448              		.loc 1 2138 19 view .LVU1713
 5449 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5450 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5451 0444 711A     		subs	r1, r6, r1
2138:src/display.c **** 	    case -1:
 5452              		.loc 1 2138 32 view .LVU1714
 5453 0446 C0F30010 		ubfx	r0, r0, #4, #1
2138:src/display.c **** 	    case -1:
 5454              		.loc 1 2138 24 view .LVU1715
 5455 044a 01FB00F1 		mul	r1, r1, r0
 5456 044e 0231     		adds	r1, r1, #2
 5457 0450 0429     		cmp	r1, #4
 5458 0452 00F26782 		bhi	.L568
 5459 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5460              	.L496:
 5461 045a 4302     		.2byte	(.L497-.L496)/2
 5462 045c 1802     		.2byte	(.L495-.L496)/2
 5463 045e 6502     		.2byte	(.L568-.L496)/2
 5464 0460 4302     		.2byte	(.L497-.L496)/2
 5465 0462 1802     		.2byte	(.L495-.L496)/2
 5466              	.LVL608:
 5467              		.p2align 1
 5468              	.L466:
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5469              		.loc 1 2094 4 is_stmt 1 view .LVU1716
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5470              		.loc 1 2094 7 is_stmt 0 view .LVU1717
 5471 0464 B342     		cmp	r3, r6
 5472 0466 03DD     		ble	.L469
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5473              		.loc 1 2094 45 discriminator 1 view .LVU1718
ARM GAS  /tmp/ccPv3rzq.s 			page 186


 5474 0468 5342     		rsbs	r3, r2, #0
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5475              		.loc 1 2094 36 discriminator 1 view .LVU1719
 5476 046a B342     		cmp	r3, r6
 5477 046c 40F30282 		ble	.L470
 5478              	.L469:
2095:src/display.c **** 	  else {
 5479              		.loc 1 2095 6 is_stmt 1 view .LVU1720
2095:src/display.c **** 	  else {
 5480              		.loc 1 2095 26 is_stmt 0 view .LVU1721
 5481 0470 9E4B     		ldr	r3, .L677
 5482 0472 1B68     		ldr	r3, [r3]
 5483 0474 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2095:src/display.c **** 	  else {
 5484              		.loc 1 2095 35 view .LVU1722
 5485 0478 13F0100F 		tst	r3, #16
 5486 047c 14BF     		ite	ne
 5487 047e 0325     		movne	r5, #3
 5488              	.LVL609:
2095:src/display.c **** 	  else {
 5489              		.loc 1 2095 35 view .LVU1723
 5490 0480 0225     		moveq	r5, #2
 5491 0482 6CE6     		b	.L651
 5492              	.LVL610:
 5493              	.L660:
2095:src/display.c **** 	  else {
 5494              		.loc 1 2095 35 view .LVU1724
 5495 0484 013E     		subs	r6, r6, #1
 5496 0486 08EB0602 		add	r2, r8, r6
 5497              	.L459:
2074:src/display.c **** 	    exp--;
 5498              		.loc 1 2074 4 is_stmt 1 discriminator 1 view .LVU1725
2075:src/display.c **** 	  while (*++q == '0');
 5499              		.loc 1 2075 6 discriminator 1 view .LVU1726
 5500 048a A2EB0806 		sub	r6, r2, r8
 5501              	.LVL611:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5502              		.loc 1 2076 10 discriminator 1 view .LVU1727
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5503              		.loc 1 2076 11 is_stmt 0 discriminator 1 view .LVU1728
 5504 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5505              	.LVL612:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5506              		.loc 1 2076 4 discriminator 1 view .LVU1729
 5507 0492 302B     		cmp	r3, #48
 5508 0494 F9D0     		beq	.L459
2077:src/display.c **** 	    *p++ = *q++;
 5509              		.loc 1 2077 10 is_stmt 1 view .LVU1730
 5510 0496 A3F13002 		sub	r2, r3, #48
 5511 049a 092A     		cmp	r2, #9
 5512 049c 3FF658AE 		bhi	.L460
1940:src/display.c **** 	char *r;
 5513              		.loc 1 1940 8 is_stmt 0 view .LVU1731
 5514 04a0 5A46     		mov	r2, fp
 5515              	.LVL613:
 5516              	.L461:
2078:src/display.c **** 	} else {
ARM GAS  /tmp/ccPv3rzq.s 			page 187


 5517              		.loc 1 2078 6 is_stmt 1 view .LVU1732
2078:src/display.c **** 	} else {
 5518              		.loc 1 2078 11 is_stmt 0 view .LVU1733
 5519 04a2 02F8013B 		strb	r3, [r2], #1
 5520              	.LVL614:
2077:src/display.c **** 	    *p++ = *q++;
 5521              		.loc 1 2077 10 is_stmt 1 view .LVU1734
2077:src/display.c **** 	    *p++ = *q++;
 5522              		.loc 1 2077 11 is_stmt 0 view .LVU1735
 5523 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2077:src/display.c **** 	    *p++ = *q++;
 5524              		.loc 1 2077 10 view .LVU1736
 5525 04aa A3F13001 		sub	r1, r3, #48
 5526 04ae 0929     		cmp	r1, #9
 5527 04b0 F7D9     		bls	.L461
 5528 04b2 4DE6     		b	.L460
 5529              	.LVL615:
 5530              	.L658:
2068:src/display.c **** 	  q++;
 5531              		.loc 1 2068 4 is_stmt 1 view .LVU1737
2069:src/display.c **** 	} else if (*q == '+')
 5532              		.loc 1 2069 4 view .LVU1738
2068:src/display.c **** 	  q++;
 5533              		.loc 1 2068 13 is_stmt 0 view .LVU1739
 5534 04b4 0122     		movs	r2, #1
 5535 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5536 04ba 0392     		str	r2, [sp, #12]
2069:src/display.c **** 	} else if (*q == '+')
 5537              		.loc 1 2069 5 view .LVU1740
 5538 04bc 9044     		add	r8, r8, r2
 5539              	.LVL616:
2069:src/display.c **** 	} else if (*q == '+')
 5540              		.loc 1 2069 5 view .LVU1741
 5541 04be 1AE6     		b	.L455
 5542              	.LVL617:
 5543              	.L521:
2069:src/display.c **** 	} else if (*q == '+')
 5544              		.loc 1 2069 5 view .LVU1742
 5545 04c0 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 5546              		.loc 1 2229 16 view .LVU1743
 5547 04c2 0125     		movs	r5, #1
1934:src/display.c **** 	int odig = 0;
 5548              		.loc 1 1934 15 view .LVU1744
 5549 04c4 3946     		mov	r1, r7
 5550              	.LVL618:
 5551              	.L489:
2243:src/display.c **** 	  };
 5552              		.loc 1 2243 6 is_stmt 1 view .LVU1745
2244:src/display.c **** 	  // Falling through
 5553              		.loc 1 2244 5 view .LVU1746
2248:src/display.c **** 	  odig++;
 5554              		.loc 1 2248 4 view .LVU1747
2248:src/display.c **** 	  odig++;
 5555              		.loc 1 2248 15 is_stmt 0 view .LVU1748
 5556 04c6 5B46     		mov	r3, fp
 5557              	.LVL619:
ARM GAS  /tmp/ccPv3rzq.s 			page 188


2248:src/display.c **** 	  odig++;
 5558              		.loc 1 2248 11 view .LVU1749
 5559 04c8 8846     		mov	r8, r1
 5560 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5561              	.LVL620:
2248:src/display.c **** 	  odig++;
 5562              		.loc 1 2248 11 view .LVU1750
 5563 04ce 08F8020B 		strb	r0, [r8], #2
2249:src/display.c **** 	  *obp++ = '.';
 5564              		.loc 1 2249 4 is_stmt 1 view .LVU1751
2250:src/display.c **** 	  dd--;
 5565              		.loc 1 2250 4 view .LVU1752
 5566              	.LVL621:
2250:src/display.c **** 	  dd--;
 5567              		.loc 1 2250 11 is_stmt 0 view .LVU1753
 5568 04d2 4FF02E0C 		mov	ip, #46
2252:src/display.c **** 	    *obp++ = *p++;
 5569              		.loc 1 2252 13 view .LVU1754
 5570 04d6 901E     		subs	r0, r2, #2
2252:src/display.c **** 	    *obp++ = *p++;
 5571              		.loc 1 2252 10 view .LVU1755
 5572 04d8 002A     		cmp	r2, #0
2250:src/display.c **** 	  dd--;
 5573              		.loc 1 2250 11 view .LVU1756
 5574 04da 81F801C0 		strb	ip, [r1, #1]
2251:src/display.c **** 	  while (dd-- >= 0) {
 5575              		.loc 1 2251 4 is_stmt 1 view .LVU1757
2252:src/display.c **** 	    *obp++ = *p++;
 5576              		.loc 1 2252 4 view .LVU1758
2252:src/display.c **** 	    *obp++ = *p++;
 5577              		.loc 1 2252 10 view .LVU1759
2252:src/display.c **** 	    *obp++ = *p++;
 5578              		.loc 1 2252 13 is_stmt 0 view .LVU1760
 5579 04de 0790     		str	r0, [sp, #28]
2252:src/display.c **** 	    *obp++ = *p++;
 5580              		.loc 1 2252 10 view .LVU1761
 5581 04e0 40F32382 		ble	.L569
2252:src/display.c **** 	    *obp++ = *p++;
 5582              		.loc 1 2252 10 view .LVU1762
 5583 04e4 501C     		adds	r0, r2, #1
 5584 04e6 0131     		adds	r1, r1, #1
 5585 04e8 8344     		add	fp, fp, r0
 5586              	.LVL622:
 5587              	.L527:
2253:src/display.c **** 	    odig++;
 5588              		.loc 1 2253 6 is_stmt 1 view .LVU1763
2253:src/display.c **** 	    odig++;
 5589              		.loc 1 2253 13 is_stmt 0 view .LVU1764
 5590 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5591              	.LVL623:
2253:src/display.c **** 	    odig++;
 5592              		.loc 1 2253 13 view .LVU1765
 5593 04ee 01F8010F 		strb	r0, [r1, #1]!
2254:src/display.c **** 	  }
 5594              		.loc 1 2254 6 is_stmt 1 view .LVU1766
2252:src/display.c **** 	    *obp++ = *p++;
 5595              		.loc 1 2252 10 view .LVU1767
ARM GAS  /tmp/ccPv3rzq.s 			page 189


 5596 04f2 5B45     		cmp	r3, fp
 5597 04f4 F9D1     		bne	.L527
 5598 04f6 6FF00103 		mvn	r3, #1
 5599              	.LVL624:
2252:src/display.c **** 	    *obp++ = *p++;
 5600              		.loc 1 2252 10 is_stmt 0 view .LVU1768
 5601 04fa 9044     		add	r8, r8, r2
 5602 04fc 1544     		add	r5, r5, r2
 5603 04fe 0793     		str	r3, [sp, #28]
2256:src/display.c **** 	}
 5604              		.loc 1 2256 13 view .LVU1769
 5605 0500 4FF00109 		mov	r9, #1
 5606              	.L499:
 5607              	.LVL625:
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5608              		.loc 1 2259 2 is_stmt 1 view .LVU1770
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5609              		.loc 1 2259 5 is_stmt 0 view .LVU1771
 5610 0504 049B     		ldr	r3, [sp, #16]
 5611 0506 002B     		cmp	r3, #0
 5612 0508 3FF4C0AE 		beq	.L528
2260:src/display.c **** 	    obp--;
 5613              		.loc 1 2260 10 is_stmt 1 view .LVU1772
 5614 050c B845     		cmp	r8, r7
 5615 050e 7FF6BDAE 		bls	.L528
 5616 0512 4346     		mov	r3, r8
 5617 0514 04E0     		b	.L529
 5618              	.LVL626:
 5619              	.L530:
2260:src/display.c **** 	    obp--;
 5620              		.loc 1 2260 10 is_stmt 0 view .LVU1773
 5621 0516 9F42     		cmp	r7, r3
2262:src/display.c **** 	  }
 5622              		.loc 1 2262 10 view .LVU1774
 5623 0518 05F1FF35 		add	r5, r5, #-1
 5624              	.LVL627:
2260:src/display.c **** 	    obp--;
 5625              		.loc 1 2260 10 is_stmt 1 view .LVU1775
 5626 051c 3FF4B5AE 		beq	.L571
 5627              	.LVL628:
 5628              	.L529:
2261:src/display.c **** 	    odig--;
 5629              		.loc 1 2261 6 discriminator 1 view .LVU1776
 5630 0520 9846     		mov	r8, r3
 5631              	.LVL629:
2261:src/display.c **** 	    odig--;
 5632              		.loc 1 2261 6 is_stmt 0 discriminator 1 view .LVU1777
 5633 0522 013B     		subs	r3, r3, #1
 5634              	.LVL630:
2262:src/display.c **** 	  }
 5635              		.loc 1 2262 6 is_stmt 1 discriminator 1 view .LVU1778
2260:src/display.c **** 	    obp--;
 5636              		.loc 1 2260 19 is_stmt 0 discriminator 1 view .LVU1779
 5637 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5638 0528 302A     		cmp	r2, #48
 5639 052a F4D0     		beq	.L530
2260:src/display.c **** 	    obp--;
ARM GAS  /tmp/ccPv3rzq.s 			page 190


 5640              		.loc 1 2260 19 discriminator 1 view .LVU1780
 5641 052c AEE6     		b	.L528
 5642              	.LVL631:
 5643              	.L664:
2288:src/display.c **** 	  } else if (c == ',') {
 5644              		.loc 1 2288 6 is_stmt 1 view .LVU1781
2288:src/display.c **** 	  } else if (c == ',') {
 5645              		.loc 1 2288 12 is_stmt 0 view .LVU1782
 5646 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5647              	.LVL632:
 5648              	.LBB409:
 5649              	.LBI409:
 293:src/display.c ****   if (res) {
 5650              		.loc 1 293 14 is_stmt 1 view .LVU1783
 5651              	.LBB410:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5652              		.loc 1 294 3 view .LVU1784
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5653              		.loc 1 294 6 is_stmt 0 view .LVU1785
 5654 0532 002C     		cmp	r4, #0
 5655 0534 33D0     		beq	.L539
 295:src/display.c ****   } else {
 5656              		.loc 1 295 5 is_stmt 1 view .LVU1786
 295:src/display.c ****   } else {
 5657              		.loc 1 295 12 is_stmt 0 view .LVU1787
 5658 0536 0029     		cmp	r1, #0
 5659              	.LVL633:
 295:src/display.c ****   } else {
 5660              		.loc 1 295 12 view .LVU1788
 5661 0538 0CBF     		ite	eq
 5662 053a 2E22     		moveq	r2, #46
 5663 053c 2C22     		movne	r2, #44
 5664 053e 04F8012B 		strb	r2, [r4], #1
 5665              	.LVL634:
 5666              	.L541:
 295:src/display.c ****   } else {
 5667              		.loc 1 295 12 view .LVU1789
 5668              	.LBE410:
 5669              	.LBE409:
2286:src/display.c **** 	  if (c == '.') {
 5670              		.loc 1 2286 53 is_stmt 1 view .LVU1790
2286:src/display.c **** 	  if (c == '.') {
 5671              		.loc 1 2286 12 view .LVU1791
2286:src/display.c **** 	  if (c == '.') {
 5672              		.loc 1 2286 18 is_stmt 0 view .LVU1792
 5673 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5674              	.LVL635:
2286:src/display.c **** 	  if (c == '.') {
 5675              		.loc 1 2286 2 view .LVU1793
 5676 0546 0029     		cmp	r1, #0
 5677 0548 7FF4CAAE 		bne	.L547
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5678              		.loc 1 2306 2 is_stmt 1 view .LVU1794
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5679              		.loc 1 2306 5 is_stmt 0 view .LVU1795
 5680 054c B9F1000F 		cmp	r9, #0
 5681 0550 3FF4DDAE 		beq	.L548
ARM GAS  /tmp/ccPv3rzq.s 			page 191


 5682              	.LVL636:
 5683              	.L666:
2307:src/display.c **** #endif
 5684              		.loc 1 2307 4 is_stmt 1 view .LVU1796
 5685 0554 3046     		mov	r0, r6
 5686 0556 2246     		mov	r2, r4
 5687 0558 0021     		movs	r1, #0
 5688              	.LVL637:
2307:src/display.c **** #endif
 5689              		.loc 1 2307 4 is_stmt 0 view .LVU1797
 5690 055a FFF7FEFF 		bl	set_exp
 5691              	.LVL638:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5692              		.loc 1 2309 2 is_stmt 1 view .LVU1798
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5693              		.loc 1 2309 5 is_stmt 0 view .LVU1799
 5694 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5695 0562 2E2B     		cmp	r3, #46
 5696 0564 7FF4D8AE 		bne	.L549
 5697              	.L667:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5698              		.loc 1 2309 21 discriminator 1 view .LVU1800
 5699 0568 002C     		cmp	r4, #0
 5700 056a 7FF4D5AE 		bne	.L549
2310:src/display.c **** 	*display_digits = odig;
 5701              		.loc 1 2310 4 is_stmt 1 view .LVU1801
 5702              	.LVL639:
 5703              	.LBB412:
 5704              	.LBI412:
 293:src/display.c ****   if (res) {
 5705              		.loc 1 293 14 view .LVU1802
 5706              	.LBB413:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5707              		.loc 1 294 3 view .LVU1803
 5708              	.LBE413:
 5709              	.LBE412:
2310:src/display.c **** 	*display_digits = odig;
 5710              		.loc 1 2310 33 is_stmt 0 view .LVU1804
 5711 056e 019B     		ldr	r3, [sp, #4]
 5712 0570 1868     		ldr	r0, [r3]
2310:src/display.c **** 	*display_digits = odig;
 5713              		.loc 1 2310 4 view .LVU1805
 5714 0572 604B     		ldr	r3, .L677+8
2310:src/display.c **** 	*display_digits = odig;
 5715              		.loc 1 2310 33 view .LVU1806
 5716 0574 0138     		subs	r0, r0, #1
 5717              	.LBB415:
 5718              	.LBB414:
 5719 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5720 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5721 057c FFF7FEFF 		bl	set_decimal.part.0
 5722              	.LVL640:
 301:src/display.c **** }
 5723              		.loc 1 301 3 is_stmt 1 view .LVU1807
 301:src/display.c **** }
 5724              		.loc 1 301 10 is_stmt 0 view .LVU1808
 5725 0580 CAE6     		b	.L549
ARM GAS  /tmp/ccPv3rzq.s 			page 192


 5726              	.LVL641:
 5727              	.L665:
 301:src/display.c **** }
 5728              		.loc 1 301 10 view .LVU1809
 5729              	.LBE414:
 5730              	.LBE415:
2290:src/display.c **** 	  } else {
 5731              		.loc 1 2290 6 is_stmt 1 view .LVU1810
2290:src/display.c **** 	  } else {
 5732              		.loc 1 2290 12 is_stmt 0 view .LVU1811
 5733 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5734              	.LVL642:
 5735              	.LBB416:
 5736              	.LBI416:
 308:src/display.c ****   if (sep == SEP_NONE)
 5737              		.loc 1 308 14 is_stmt 1 view .LVU1812
 5738              	.LBB417:
 309:src/display.c ****     return res;
 5739              		.loc 1 309 3 view .LVU1813
 309:src/display.c ****     return res;
 5740              		.loc 1 309 6 is_stmt 0 view .LVU1814
 5741 0584 002A     		cmp	r2, #0
 5742 0586 DCD0     		beq	.L541
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5743              		.loc 1 311 3 is_stmt 1 view .LVU1815
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5744              		.loc 1 311 6 is_stmt 0 view .LVU1816
 5745 0588 002C     		cmp	r4, #0
 5746 058a 00F02781 		beq	.L543
 312:src/display.c ****     else *res++ = '.';
 5747              		.loc 1 312 5 is_stmt 1 view .LVU1817
 312:src/display.c ****     else *res++ = '.';
 5748              		.loc 1 312 8 is_stmt 0 view .LVU1818
 5749 058e 012A     		cmp	r2, #1
 312:src/display.c ****     else *res++ = '.';
 5750              		.loc 1 312 27 is_stmt 1 view .LVU1819
 5751              	.LVL643:
 313:src/display.c ****   } else {
 5752              		.loc 1 313 17 is_stmt 0 view .LVU1820
 5753 0590 16BF     		itet	ne
 5754 0592 2E22     		movne	r2, #46
 5755              	.LVL644:
 312:src/display.c ****     else *res++ = '.';
 5756              		.loc 1 312 34 view .LVU1821
 5757 0594 04F8011B 		strbeq	r1, [r4], #1
 5758              	.LVL645:
 313:src/display.c ****   } else {
 5759              		.loc 1 313 10 is_stmt 1 view .LVU1822
 313:src/display.c ****   } else {
 5760              		.loc 1 313 17 is_stmt 0 view .LVU1823
 5761 0598 04F8012B 		strbne	r2, [r4], #1
 5762              	.LVL646:
 313:src/display.c ****   } else {
 5763              		.loc 1 313 17 view .LVU1824
 5764 059c D1E7     		b	.L541
 5765              	.LVL647:
 5766              	.L539:
ARM GAS  /tmp/ccPv3rzq.s 			page 193


 313:src/display.c ****   } else {
 5767              		.loc 1 313 17 view .LVU1825
 5768              	.LBE417:
 5769              	.LBE416:
 5770              	.LBB419:
 5771              	.LBB411:
 5772 059e AAF10900 		sub	r0, r10, #9
 5773 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5774              	.LVL648:
 313:src/display.c ****   } else {
 5775              		.loc 1 313 17 view .LVU1826
 5776 05a6 544B     		ldr	r3, .L677+12
 5777 05a8 0446     		mov	r4, r0
 5778              	.LVL649:
 313:src/display.c ****   } else {
 5779              		.loc 1 313 17 view .LVU1827
 5780 05aa CAE7     		b	.L541
 5781              	.LVL650:
 5782              	.L545:
 313:src/display.c ****   } else {
 5783              		.loc 1 313 17 view .LVU1828
 5784              	.LBE411:
 5785              	.LBE419:
 5786              	.LBB420:
 5787              	.LBB407:
 341:src/display.c ****   return res;
 5788              		.loc 1 341 8 is_stmt 1 view .LVU1829
 5789 05ac 5046     		mov	r0, r10
 5790 05ae FFF7FEFF 		bl	set_dig
 5791              	.LVL651:
 341:src/display.c ****   return res;
 5792              		.loc 1 341 8 is_stmt 0 view .LVU1830
 5793 05b2 514B     		ldr	r3, .L677+12
 5794 05b4 9FE6     		b	.L546
 5795              	.LVL652:
 5796              	.L480:
 341:src/display.c ****   return res;
 5797              		.loc 1 341 8 view .LVU1831
 5798              	.LBE407:
 5799              	.LBE420:
2127:src/display.c **** 
 5800              		.loc 1 2127 2 is_stmt 1 view .LVU1832
2127:src/display.c **** 
 5801              		.loc 1 2127 45 view .LVU1833
2127:src/display.c **** 
 5802              		.loc 1 2127 2 is_stmt 0 view .LVU1834
 5803 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
 5804 05ba 0029     		cmp	r1, #0
 5805 05bc 7FF401AE 		bne	.L551
 5806              	.LVL653:
 5807              	.L487:
2192:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5808              		.loc 1 2192 4 is_stmt 1 view .LVU1835
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5809              		.loc 1 2193 4 view .LVU1836
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5810              		.loc 1 2193 7 is_stmt 0 view .LVU1837
ARM GAS  /tmp/ccPv3rzq.s 			page 194


 5811 05c0 002E     		cmp	r6, #0
 5812 05c2 C0F21281 		blt	.L510
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5813              		.loc 1 2193 7 view .LVU1838
 5814 05c6 731C     		adds	r3, r6, #1
2195:src/display.c **** 		*obp++ = ',';
 5815              		.loc 1 2195 31 view .LVU1839
 5816 05c8 DFF824E1 		ldr	lr, .L677+4
 5817 05cc 0593     		str	r3, [sp, #20]
 5818 05ce 0BEB030C 		add	ip, fp, r3
2129:src/display.c **** 	switch (mode) {
 5819              		.loc 1 2129 4 view .LVU1840
 5820 05d2 5D46     		mov	r5, fp
1934:src/display.c **** 	int odig = 0;
 5821              		.loc 1 1934 15 view .LVU1841
 5822 05d4 3846     		mov	r0, r7
 5823 05d6 05E0     		b	.L511
 5824              	.LVL654:
 5825              	.L514:
2196:src/display.c **** 	      *obp++ = *p++;
 5826              		.loc 1 2196 3 is_stmt 1 view .LVU1842
2195:src/display.c **** 		*obp++ = ',';
 5827              		.loc 1 2195 18 is_stmt 0 view .LVU1843
 5828 05d8 0229     		cmp	r1, #2
2196:src/display.c **** 	      *obp++ = *p++;
 5829              		.loc 1 2196 10 view .LVU1844
 5830 05da 05BF     		ittet	eq
 5831 05dc 2C23     		moveq	r3, #44
 5832 05de 4370     		strbeq	r3, [r0, #1]
2197:src/display.c **** 	      odig++;
 5833              		.loc 1 2197 12 view .LVU1845
 5834 05e0 0130     		addne	r0, r0, #1
 5835              	.LVL655:
2196:src/display.c **** 	      *obp++ = *p++;
 5836              		.loc 1 2196 7 view .LVU1846
 5837 05e2 0230     		addeq	r0, r0, #2
 5838              	.LVL656:
 5839              	.L511:
2197:src/display.c **** 	      odig++;
 5840              		.loc 1 2197 8 is_stmt 1 discriminator 2 view .LVU1847
2197:src/display.c **** 	      odig++;
 5841              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1848
 5842 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 5843              	.LVL657:
2195:src/display.c **** 		*obp++ = ',';
 5844              		.loc 1 2195 8 is_stmt 1 discriminator 2 view .LVU1849
2197:src/display.c **** 	      odig++;
 5845              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1850
 5846 05e8 0370     		strb	r3, [r0]
2198:src/display.c **** 	    }
 5847              		.loc 1 2198 8 is_stmt 1 discriminator 2 view .LVU1851
 5848              	.LVL658:
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5849              		.loc 1 2194 24 discriminator 2 view .LVU1852
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5850              		.loc 1 2194 16 discriminator 2 view .LVU1853
2195:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/ccPv3rzq.s 			page 195


 5851              		.loc 1 2195 31 is_stmt 0 discriminator 2 view .LVU1854
 5852 05ea ABEB0503 		sub	r3, fp, r5
 5853 05ee 3344     		add	r3, r3, r6
 5854 05f0 8EFB0381 		smull	r8, r1, lr, r3
 5855 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 5856 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5857              		.loc 1 2194 6 discriminator 2 view .LVU1855
 5858 05fc AC45     		cmp	ip, r5
2195:src/display.c **** 		*obp++ = ',';
 5859              		.loc 1 2195 31 discriminator 2 view .LVU1856
 5860 05fe A3EB0101 		sub	r1, r3, r1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5861              		.loc 1 2194 6 discriminator 2 view .LVU1857
 5862 0602 E9D1     		bne	.L514
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5863              		.loc 1 2200 13 view .LVU1858
 5864 0604 2E23     		movs	r3, #46
2201:src/display.c **** 	      *obp++ = *p++;
 5865              		.loc 1 2201 6 view .LVU1859
 5866 0606 002A     		cmp	r2, #0
 5867 0608 059D     		ldr	r5, [sp, #20]
 5868              	.LVL659:
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5869              		.loc 1 2200 6 is_stmt 1 view .LVU1860
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5870              		.loc 1 2200 13 is_stmt 0 view .LVU1861
 5871 060a 4370     		strb	r3, [r0, #1]
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5872              		.loc 1 2200 10 view .LVU1862
 5873 060c 00F10208 		add	r8, r0, #2
 5874              	.LVL660:
2201:src/display.c **** 	      *obp++ = *p++;
 5875              		.loc 1 2201 6 is_stmt 1 view .LVU1863
2201:src/display.c **** 	      *obp++ = *p++;
 5876              		.loc 1 2201 16 view .LVU1864
2201:src/display.c **** 	      *obp++ = *p++;
 5877              		.loc 1 2201 6 is_stmt 0 view .LVU1865
 5878 0610 7FF778AF 		ble	.L499
 5879 0614 0130     		adds	r0, r0, #1
 5880 0616 0CEB0201 		add	r1, ip, r2
 5881              	.LVL661:
 5882              	.L515:
2202:src/display.c **** 	      odig++;
 5883              		.loc 1 2202 8 is_stmt 1 discriminator 4 view .LVU1866
2202:src/display.c **** 	      odig++;
 5884              		.loc 1 2202 15 is_stmt 0 discriminator 4 view .LVU1867
 5885 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5886              	.LVL662:
2202:src/display.c **** 	      odig++;
 5887              		.loc 1 2202 15 discriminator 4 view .LVU1868
 5888 061e 00F8013F 		strb	r3, [r0, #1]!
2203:src/display.c **** 	    }
 5889              		.loc 1 2203 8 is_stmt 1 discriminator 4 view .LVU1869
2201:src/display.c **** 	      *obp++ = *p++;
 5890              		.loc 1 2201 43 discriminator 4 view .LVU1870
2201:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccPv3rzq.s 			page 196


 5891              		.loc 1 2201 16 discriminator 4 view .LVU1871
2201:src/display.c **** 	      *obp++ = *p++;
 5892              		.loc 1 2201 6 is_stmt 0 discriminator 4 view .LVU1872
 5893 0622 8C45     		cmp	ip, r1
 5894 0624 F9D1     		bne	.L515
 5895 0626 059B     		ldr	r3, [sp, #20]
 5896 0628 1344     		add	r3, r3, r2
 5897 062a 9044     		add	r8, r8, r2
 5898              	.LVL663:
2201:src/display.c **** 	      *obp++ = *p++;
 5899              		.loc 1 2201 6 discriminator 4 view .LVU1873
 5900 062c 1D46     		mov	r5, r3
 5901 062e 69E7     		b	.L499
 5902              	.LVL664:
 5903              	.L652:
1997:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5904              		.loc 1 1997 4 is_stmt 1 view .LVU1874
 5905 0630 324A     		ldr	r2, .L677+16
 5906 0632 5146     		mov	r1, r10
 5907 0634 5046     		mov	r0, r10
 5908 0636 FFF7FEFF 		bl	decNumberNormalize
 5909              	.LVL665:
1998:src/display.c **** 	  z->exponent = 0;
 5910              		.loc 1 1998 4 view .LVU1875
1998:src/display.c **** 	  z->exponent = 0;
 5911              		.loc 1 1998 22 is_stmt 0 view .LVU1876
 5912 063a DAE90023 		ldrd	r2, r3, [r10]
 5913 063e 03EB0208 		add	r8, r3, r2
1999:src/display.c **** 	}
 5914              		.loc 1 1999 16 view .LVU1877
 5915 0642 CAF80490 		str	r9, [r10, #4]
1998:src/display.c **** 	  z->exponent = 0;
 5916              		.loc 1 1998 8 view .LVU1878
 5917 0646 08F1FF38 		add	r8, r8, #-1
 5918              	.LVL666:
1999:src/display.c **** 	}
 5919              		.loc 1 1999 4 is_stmt 1 view .LVU1879
 5920 064a F7E4     		b	.L430
 5921              	.LVL667:
 5922              	.L661:
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5923              		.loc 1 2087 6 view .LVU1880
2088:src/display.c **** 	      *p++ = *q++;
 5924              		.loc 1 2088 13 is_stmt 0 view .LVU1881
 5925 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5926              		.loc 1 2088 12 view .LVU1882
 5927 0650 A3F13002 		sub	r2, r3, #48
 5928 0654 092A     		cmp	r2, #9
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5929              		.loc 1 2087 7 view .LVU1883
 5930 0656 08F10108 		add	r8, r8, #1
 5931              	.LVL668:
2088:src/display.c **** 	      *p++ = *q++;
 5932              		.loc 1 2088 6 is_stmt 1 view .LVU1884
2088:src/display.c **** 	      *p++ = *q++;
 5933              		.loc 1 2088 12 view .LVU1885
ARM GAS  /tmp/ccPv3rzq.s 			page 197


 5934 065a 3FF679AD 		bhi	.L460
 5935              	.LVL669:
 5936              	.L465:
2089:src/display.c **** 	  }
 5937              		.loc 1 2089 8 view .LVU1886
2089:src/display.c **** 	  }
 5938              		.loc 1 2089 13 is_stmt 0 view .LVU1887
 5939 065e 01F8013B 		strb	r3, [r1], #1
 5940              	.LVL670:
2088:src/display.c **** 	      *p++ = *q++;
 5941              		.loc 1 2088 12 is_stmt 1 view .LVU1888
2088:src/display.c **** 	      *p++ = *q++;
 5942              		.loc 1 2088 13 is_stmt 0 view .LVU1889
 5943 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5944              		.loc 1 2088 12 view .LVU1890
 5945 0666 A3F13002 		sub	r2, r3, #48
 5946 066a 092A     		cmp	r2, #9
 5947 066c F7D9     		bls	.L465
 5948 066e 6FE5     		b	.L460
 5949              	.LVL671:
 5950              	.L659:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5951              		.loc 1 2071 4 is_stmt 1 view .LVU1891
1954:src/display.c **** 	int trimzeros = 0;
 5952              		.loc 1 1954 6 is_stmt 0 view .LVU1892
 5953 0670 0022     		movs	r2, #0
 5954 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5955 0676 0392     		str	r2, [sp, #12]
2071:src/display.c **** 	for (; *q == '0'; q++);
 5956              		.loc 1 2071 5 view .LVU1893
 5957 0678 08F10108 		add	r8, r8, #1
 5958              	.LVL672:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5959              		.loc 1 2071 5 view .LVU1894
 5960 067c 3BE5     		b	.L455
 5961              	.LVL673:
 5962              	.L653:
2005:src/display.c **** 	    x[0] = '-';
 5963              		.loc 1 2005 34 discriminator 1 view .LVU1895
 5964 067e 6B20     		movs	r0, #107
 5965 0680 FFF7FEFF 		bl	get_user_flag
 5966              	.LVL674:
2005:src/display.c **** 	    x[0] = '-';
 5967              		.loc 1 2005 31 discriminator 1 view .LVU1896
 5968 0684 0028     		cmp	r0, #0
 5969 0686 3FF4EAAC 		beq	.L432
2006:src/display.c **** 	    x[1] = '0';
 5970              		.loc 1 2006 6 is_stmt 1 view .LVU1897
2007:src/display.c **** 	  } else
 5971              		.loc 1 2007 6 view .LVU1898
2006:src/display.c **** 	    x[1] = '0';
 5972              		.loc 1 2006 11 is_stmt 0 view .LVU1899
 5973 068a 43F22D03 		movw	r3, #12333
 5974 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
2007:src/display.c **** 	  } else
 5975              		.loc 1 2007 11 view .LVU1900
ARM GAS  /tmp/ccPv3rzq.s 			page 198


 5976 0692 E7E4     		b	.L433
 5977              	.LVL675:
 5978              	.L657:
2064:src/display.c **** 	  CLR_MANT_SIGN;
 5979              		.loc 1 2064 4 is_stmt 1 view .LVU1901
 5980              	.LBB421:
 5981              	.LBI421:
 259:src/display.c **** {
 5982              		.loc 1 259 13 view .LVU1902
 5983              	.LBB422:
 261:src/display.c **** }
 5984              		.loc 1 261 3 view .LVU1903
 5985 0694 8220     		movs	r0, #130
 5986 0696 FFF7FEFF 		bl	clr_dot
 5987              	.LVL676:
 5988              	.LBE422:
 5989              	.LBE421:
2065:src/display.c **** 	}
 5990              		.loc 1 2065 4 view .LVU1904
 5991              	.LBB423:
 5992              	.LBI423:
 249:src/display.c **** {
 5993              		.loc 1 249 13 view .LVU1905
 5994              	.LBB424:
 251:src/display.c **** }
 5995              		.loc 1 251 3 view .LVU1906
 5996 069a 8120     		movs	r0, #129
 5997 069c FFF7FEFF 		bl	clr_dot
 5998              	.LVL677:
 252:src/display.c **** 
 5999              		.loc 1 252 1 is_stmt 0 view .LVU1907
 6000 06a0 1FE5     		b	.L453
 6001              	.LVL678:
 6002              	.L448:
 252:src/display.c **** 
 6003              		.loc 1 252 1 view .LVU1908
 6004              	.LBE424:
 6005              	.LBE423:
 6006              	.LBB425:
2026:src/display.c **** 
 6007              		.loc 1 2026 4 is_stmt 1 view .LVU1909
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6008              		.loc 1 2028 4 view .LVU1910
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6009              		.loc 1 2028 11 is_stmt 0 view .LVU1911
 6010 06a2 2A46     		mov	r2, r5
 6011 06a4 07A9     		add	r1, sp, #28
 6012 06a6 5046     		mov	r0, r10
 6013 06a8 FFF7FEFF 		bl	std_round_fix
 6014              	.LVL679:
 6015              	.LBE425:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6016              		.loc 1 1955 6 view .LVU1912
 6017 06ac 0023     		movs	r3, #0
 6018              	.LBB426:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6019              		.loc 1 2028 11 view .LVU1913
ARM GAS  /tmp/ccPv3rzq.s 			page 199


 6020 06ae 0546     		mov	r5, r0
 6021              	.LVL680:
2029:src/display.c **** 	    // allow zeros to be trimmed
 6022              		.loc 1 2029 4 is_stmt 1 view .LVU1914
 6023              	.LBE426:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6024              		.loc 1 1955 6 is_stmt 0 view .LVU1915
 6025 06b0 0493     		str	r3, [sp, #16]
 6026 06b2 F0E4     		b	.L554
 6027              	.LVL681:
 6028              	.L663:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6029              		.loc 1 2265 72 discriminator 2 view .LVU1916
 6030 06b4 06F2E732 		addw	r2, r6, #999
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6031              		.loc 1 2265 58 discriminator 2 view .LVU1917
 6032 06b8 40F2CE73 		movw	r3, #1998
 6033 06bc 9A42     		cmp	r2, r3
 6034 06be 7FF6EBAD 		bls	.L531
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6035              		.loc 1 2266 4 is_stmt 1 view .LVU1918
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6036              		.loc 1 2266 20 is_stmt 0 view .LVU1919
 6037 06c2 019A     		ldr	r2, [sp, #4]
 6038 06c4 0A23     		movs	r3, #10
2267:src/display.c **** 	  return;
 6039              		.loc 1 2267 4 view .LVU1920
 6040 06c6 2146     		mov	r1, r4
 6041 06c8 5046     		mov	r0, r10
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6042              		.loc 1 2266 20 view .LVU1921
 6043 06ca 1360     		str	r3, [r2]
2267:src/display.c **** 	  return;
 6044              		.loc 1 2267 4 is_stmt 1 view .LVU1922
 6045 06cc FFF7FEFF 		bl	set_x_dn
 6046              	.LVL682:
2268:src/display.c **** 	}
 6047              		.loc 1 2268 4 view .LVU1923
 6048 06d0 24E6     		b	.L423
 6049              	.LVL683:
 6050              	.L534:
2280:src/display.c **** 	      SET_MANT_SIGN;
 6051              		.loc 1 2280 6 view .LVU1924
2280:src/display.c **** 	      SET_MANT_SIGN;
 6052              		.loc 1 2280 9 is_stmt 0 view .LVU1925
 6053 06d2 BAF1000F 		cmp	r10, #0
 6054 06d6 40F00781 		bne	.L537
2281:src/display.c **** 	    else
 6055              		.loc 1 2281 8 is_stmt 1 view .LVU1926
 6056              	.LBB427:
 6057              	.LBI427:
 244:src/display.c **** {
 6058              		.loc 1 244 13 view .LVU1927
 6059              	.LBB428:
 246:src/display.c **** }
 6060              		.loc 1 246 3 view .LVU1928
 6061 06da 8120     		movs	r0, #129
ARM GAS  /tmp/ccPv3rzq.s 			page 200


 6062 06dc FFF7FEFF 		bl	set_dot
 6063              	.LVL684:
 246:src/display.c **** }
 6064              		.loc 1 246 3 is_stmt 0 view .LVU1929
 6065              	.LBE428:
 6066              	.LBE427:
2286:src/display.c **** 	  if (c == '.') {
 6067              		.loc 1 2286 12 is_stmt 1 view .LVU1930
2286:src/display.c **** 	  if (c == '.') {
 6068              		.loc 1 2286 18 is_stmt 0 view .LVU1931
 6069 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6070              	.LVL685:
2286:src/display.c **** 	  if (c == '.') {
 6071              		.loc 1 2286 2 view .LVU1932
 6072 06e4 0029     		cmp	r1, #0
 6073 06e6 7FF4F8AD 		bne	.L536
 6074 06ea 0CE6     		b	.L535
 6075              	.L678:
 6076              		.align	2
 6077              	.L677:
 6078 06ec 00000000 		.word	main_ram
 6079 06f0 56555555 		.word	1431655766
 6080 06f4 00000000 		.word	.LANCHOR1
 6081 06f8 00000000 		.word	.LANCHOR0
 6082 06fc 00000000 		.word	Ctx
 6083              	.LVL686:
 6084              	.L654:
2014:src/display.c **** 	  return;
 6085              		.loc 1 2014 4 is_stmt 1 view .LVU1933
 6086              	.LBB429:
 6087              	.LBI429:
1802:src/display.c **** 	const int dbl = is_dblmode();
 6088              		.loc 1 1802 19 view .LVU1934
 6089              	.LBB430:
1803:src/display.c **** 	char *p;
 6090              		.loc 1 1803 2 view .LVU1935
1803:src/display.c **** 	char *p;
 6091              		.loc 1 1803 18 is_stmt 0 view .LVU1936
 6092 0700 FFF7FEFF 		bl	is_dblmode
 6093              	.LVL687:
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6094              		.loc 1 1819 5 view .LVU1937
 6095 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6096 0708 2D2B     		cmp	r3, #45
1803:src/display.c **** 	char *p;
 6097              		.loc 1 1803 18 view .LVU1938
 6098 070a 0446     		mov	r4, r0
 6099              	.LVL688:
1804:src/display.c **** 	int i, j;
 6100              		.loc 1 1804 2 is_stmt 1 view .LVU1939
1805:src/display.c **** 	char *upper_str;
 6101              		.loc 1 1805 2 view .LVU1940
1806:src/display.c **** 	enum separator_modes separator_mode;
 6102              		.loc 1 1806 2 view .LVU1941
1807:src/display.c **** 	char decimal_mark;
 6103              		.loc 1 1807 2 view .LVU1942
1808:src/display.c **** 	char thousands_sep;
ARM GAS  /tmp/ccPv3rzq.s 			page 201


 6104              		.loc 1 1808 2 view .LVU1943
1809:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6105              		.loc 1 1809 2 view .LVU1944
1815:src/display.c **** #endif
 6106              		.loc 1 1815 2 view .LVU1945
1817:src/display.c **** 
 6107              		.loc 1 1817 2 view .LVU1946
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6108              		.loc 1 1819 2 view .LVU1947
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6109              		.loc 1 1819 5 is_stmt 0 view .LVU1948
 6110 070c 00F01681 		beq	.L671
1832:src/display.c **** 
 6111              		.loc 1 1832 16 view .LVU1949
 6112 0710 4FF0000A 		mov	r10, #0
 6113              	.LVL689:
 6114              	.L435:
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6115              		.loc 1 1834 2 is_stmt 1 view .LVU1950
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6116              		.loc 1 1834 6 is_stmt 0 view .LVU1951
 6117 0714 0021     		movs	r1, #0
 6118 0716 3846     		mov	r0, r7
 6119 0718 FFF7FEFF 		bl	find_char
 6120              	.LVL690:
1835:src/display.c **** 
 6121              		.loc 1 1835 2 is_stmt 1 view .LVU1952
1835:src/display.c **** 
 6122              		.loc 1 1835 23 is_stmt 0 view .LVU1953
 6123 071c C21B     		subs	r2, r0, r7
1835:src/display.c **** 
 6124              		.loc 1 1835 2 view .LVU1954
 6125 071e C2F12202 		rsb	r2, r2, #34
 6126 0722 3021     		movs	r1, #48
 6127 0724 FFF7FEFF 		bl	xset
 6128              	.LVL691:
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6129              		.loc 1 1837 2 is_stmt 1 view .LVU1955
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6130              		.loc 1 1837 18 is_stmt 0 view .LVU1956
 6131 0728 A74A     		ldr	r2, .L679
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6132              		.loc 1 1848 6 view .LVU1957
 6133 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6134              		.loc 1 1837 5 view .LVU1958
 6135 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1845:src/display.c **** 	}
 6136              		.loc 1 1845 18 view .LVU1959
 6137 072e 002A     		cmp	r2, #0
 6138 0730 15BF     		itete	ne
 6139 0732 4FF0020B 		movne	fp, #2
 6140 0736 2C26     		moveq	r6, #44
 6141 0738 2E26     		movne	r6, #46
 6142              	.LVL692:
1845:src/display.c **** 	}
 6143              		.loc 1 1845 18 view .LVU1960
ARM GAS  /tmp/ccPv3rzq.s 			page 202


 6144 073a 2E25     		moveq	r5, #46
 6145              	.LVL693:
1845:src/display.c **** 	}
 6146              		.loc 1 1845 18 view .LVU1961
 6147 073c 18BF     		it	ne
 6148 073e 2C25     		movne	r5, #44
 6149              	.LVL694:
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6150              		.loc 1 1848 2 is_stmt 1 view .LVU1962
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6151              		.loc 1 1848 5 is_stmt 0 view .LVU1963
 6152 0740 13F0380F 		tst	r3, #56
 6153 0744 40F0D680 		bne	.L672
1875:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6154              		.loc 1 1875 4 is_stmt 1 view .LVU1964
 6155              	.LVL695:
1876:src/display.c **** 	  x[1] = decimal_mark;
 6156              		.loc 1 1876 4 view .LVU1965
 6157 0748 1022     		movs	r2, #16
 6158 074a 791C     		adds	r1, r7, #1
 6159 074c B81C     		adds	r0, r7, #2
 6160 074e FFF7FEFF 		bl	xcopy
 6161              	.LVL696:
1877:src/display.c **** 	  if (grouping) {
 6162              		.loc 1 1877 4 view .LVU1966
1879:src/display.c **** 	    x[5] = thousands_sep;
 6163              		.loc 1 1879 6 is_stmt 0 view .LVU1967
 6164 0752 0D22     		movs	r2, #13
 6165 0754 791D     		adds	r1, r7, #5
 6166 0756 B81D     		adds	r0, r7, #6
1877:src/display.c **** 	  if (grouping) {
 6167              		.loc 1 1877 9 view .LVU1968
 6168 0758 7D70     		strb	r5, [r7, #1]
1878:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6169              		.loc 1 1878 4 is_stmt 1 view .LVU1969
1879:src/display.c **** 	    x[5] = thousands_sep;
 6170              		.loc 1 1879 6 view .LVU1970
 6171 075a FFF7FEFF 		bl	xcopy
 6172              	.LVL697:
1880:src/display.c **** 	    x += 9;
 6173              		.loc 1 1880 6 view .LVU1971
1881:src/display.c **** 	  }
 6174              		.loc 1 1881 8 is_stmt 0 view .LVU1972
 6175 075e 07F10905 		add	r5, r7, #9
 6176              	.LVL698:
1880:src/display.c **** 	    x += 9;
 6177              		.loc 1 1880 11 view .LVU1973
 6178 0762 7E71     		strb	r6, [r7, #5]
1881:src/display.c **** 	  }
 6179              		.loc 1 1881 6 is_stmt 1 view .LVU1974
 6180              	.LVL699:
1884:src/display.c **** 	    if (exp < 0) {
 6181              		.loc 1 1884 4 view .LVU1975
1884:src/display.c **** 	    if (exp < 0) {
 6182              		.loc 1 1884 7 is_stmt 0 view .LVU1976
 6183 0764 002C     		cmp	r4, #0
 6184 0766 00F0E780 		beq	.L439
ARM GAS  /tmp/ccPv3rzq.s 			page 203


1885:src/display.c **** 	      x[9] = '-';
 6185              		.loc 1 1885 6 is_stmt 1 view .LVU1977
1885:src/display.c **** 	      x[9] = '-';
 6186              		.loc 1 1885 9 is_stmt 0 view .LVU1978
 6187 076a B8F1000F 		cmp	r8, #0
1886:src/display.c **** 	      exp = -exp;
 6188              		.loc 1 1886 8 is_stmt 1 view .LVU1979
1887:src/display.c **** 	    }
 6189              		.loc 1 1887 8 view .LVU1980
1891:src/display.c **** 	    x[10] = '0' + j;
 6190              		.loc 1 1891 8 is_stmt 0 view .LVU1981
 6191 076e 974B     		ldr	r3, .L679+4
1893:src/display.c **** 	  }
 6192              		.loc 1 1893 18 view .LVU1982
 6193 0770 9749     		ldr	r1, .L679+8
1886:src/display.c **** 	      exp = -exp;
 6194              		.loc 1 1886 13 view .LVU1983
 6195 0772 B6BF     		itet	lt
 6196 0774 2D22     		movlt	r2, #45
1890:src/display.c **** 	    j = exp / 1000;
 6197              		.loc 1 1890 13 view .LVU1984
 6198 0776 2022     		movge	r2, #32
1887:src/display.c **** 	    }
 6199              		.loc 1 1887 12 view .LVU1985
 6200 0778 C8F10008 		rsblt	r8, r8, #0
 6201              	.LVL700:
1887:src/display.c **** 	    }
 6202              		.loc 1 1887 12 view .LVU1986
 6203 077c BA74     		strb	r2, [r7, #18]
1891:src/display.c **** 	    x[10] = '0' + j;
 6204              		.loc 1 1891 6 is_stmt 1 view .LVU1987
1891:src/display.c **** 	    x[10] = '0' + j;
 6205              		.loc 1 1891 8 is_stmt 0 view .LVU1988
 6206 077e A3FB0823 		umull	r2, r3, r3, r8
 6207 0782 9B09     		lsrs	r3, r3, #6
 6208              	.LVL701:
1892:src/display.c **** 	    exp -= 1000 * j;
 6209              		.loc 1 1892 6 is_stmt 1 view .LVU1989
1892:src/display.c **** 	    exp -= 1000 * j;
 6210              		.loc 1 1892 18 is_stmt 0 view .LVU1990
 6211 0784 03F13002 		add	r2, r3, #48
1893:src/display.c **** 	  }
 6212              		.loc 1 1893 10 view .LVU1991
 6213 0788 01FB0388 		mla	r8, r1, r3, r8
 6214              	.LVL702:
1892:src/display.c **** 	    exp -= 1000 * j;
 6215              		.loc 1 1892 12 view .LVU1992
 6216 078c FA74     		strb	r2, [r7, #19]
1893:src/display.c **** 	  }
 6217              		.loc 1 1893 6 is_stmt 1 view .LVU1993
 6218              	.LVL703:
 6219              	.L441:
1899:src/display.c **** 	  *x = 0;
 6220              		.loc 1 1899 4 view .LVU1994
 6221 078e 0B22     		movs	r2, #11
 6222 0790 2946     		mov	r1, r5
 6223 0792 07F10A00 		add	r0, r7, #10
ARM GAS  /tmp/ccPv3rzq.s 			page 204


 6224 0796 FFF7FEFF 		bl	xcopy
 6225              	.LVL704:
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6226              		.loc 1 1900 4 view .LVU1995
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6227              		.loc 1 1900 7 is_stmt 0 view .LVU1996
 6228 079a 0022     		movs	r2, #0
1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6229              		.loc 1 1901 4 view .LVU1997
 6230 079c 4046     		mov	r0, r8
 6231 079e 0121     		movs	r1, #1
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6232              		.loc 1 1900 7 view .LVU1998
 6233 07a0 7A72     		strb	r2, [r7, #9]
1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6234              		.loc 1 1901 4 is_stmt 1 view .LVU1999
 6235 07a2 FFF7FEFF 		bl	set_exp
 6236              	.LVL705:
1902:src/display.c **** 	}
 6237              		.loc 1 1902 4 view .LVU2000
1902:src/display.c **** 	}
 6238              		.loc 1 1902 4 is_stmt 0 view .LVU2001
 6239 07a6 A7EB0A0A 		sub	r10, r7, r10
 6240              	.LVL706:
1902:src/display.c **** 	}
 6241              		.loc 1 1902 6 view .LVU2002
 6242 07aa 0924     		movs	r4, #9
 6243              	.LVL707:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6244              		.loc 1 1905 11 is_stmt 1 view .LVU2003
 6245              	.L442:
1906:src/display.c **** 	  }
 6246              		.loc 1 1906 6 view .LVU2004
 6247              	.LBB431:
 6248              	.LBI431:
 308:src/display.c ****   if (sep == SEP_NONE)
 6249              		.loc 1 308 14 view .LVU2005
 6250              	.LBB432:
 309:src/display.c ****     return res;
 6251              		.loc 1 309 3 view .LVU2006
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6252              		.loc 1 311 3 view .LVU2007
 6253 07ac 2046     		mov	r0, r4
 6254 07ae 5946     		mov	r1, fp
 6255              	.LBE432:
 6256              	.LBE431:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6257              		.loc 1 1905 38 is_stmt 0 view .LVU2008
 6258 07b0 1B34     		adds	r4, r4, #27
 6259              	.LVL708:
 6260              	.LBB434:
 6261              	.LBB433:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6262              		.loc 1 1905 38 view .LVU2009
 6263 07b2 FFF7FEFF 		bl	set_separator.part.0
 6264              	.LVL709:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
ARM GAS  /tmp/ccPv3rzq.s 			page 205


 6265              		.loc 1 1905 38 view .LVU2010
 6266              	.LBE433:
 6267              	.LBE434:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6268              		.loc 1 1905 36 is_stmt 1 view .LVU2011
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6269              		.loc 1 1905 11 view .LVU2012
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6270              		.loc 1 1905 4 is_stmt 0 view .LVU2013
 6271 07b6 512C     		cmp	r4, #81
 6272 07b8 F8DD     		ble	.L442
 6273 07ba 6C1E     		subs	r4, r5, #1
 6274              	.LVL710:
 6275              	.L444:
1911:src/display.c **** 
 6276              		.loc 1 1911 4 is_stmt 1 view .LVU2014
 6277 07bc 4846     		mov	r0, r9
 6278 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1910:src/display.c **** 	  set_dig(j, x[i]);
 6279              		.loc 1 1910 33 is_stmt 0 view .LVU2015
 6280 07c2 09F10909 		add	r9, r9, #9
 6281              	.LVL711:
1911:src/display.c **** 
 6282              		.loc 1 1911 4 view .LVU2016
 6283 07c6 FFF7FEFF 		bl	set_dig
 6284              	.LVL712:
1910:src/display.c **** 	  set_dig(j, x[i]);
 6285              		.loc 1 1910 26 is_stmt 1 view .LVU2017
1910:src/display.c **** 	  set_dig(j, x[i]);
 6286              		.loc 1 1910 18 view .LVU2018
1910:src/display.c **** 	  set_dig(j, x[i]);
 6287              		.loc 1 1910 2 is_stmt 0 view .LVU2019
 6288 07ca B9F16C0F 		cmp	r9, #108
 6289 07ce F5D1     		bne	.L444
1913:src/display.c **** 	set_status(upper_str - negative);
 6290              		.loc 1 1913 2 is_stmt 1 view .LVU2020
1913:src/display.c **** 	set_status(upper_str - negative);
 6291              		.loc 1 1913 5 is_stmt 0 view .LVU2021
 6292 07d0 0023     		movs	r3, #0
1914:src/display.c ****       }
 6293              		.loc 1 1914 2 view .LVU2022
 6294 07d2 5046     		mov	r0, r10
1913:src/display.c **** 	set_status(upper_str - negative);
 6295              		.loc 1 1913 5 view .LVU2023
 6296 07d4 2B70     		strb	r3, [r5]
1914:src/display.c ****       }
 6297              		.loc 1 1914 2 is_stmt 1 view .LVU2024
 6298 07d6 FFF7FEFF 		bl	set_status
 6299              	.LVL713:
1915:src/display.c **** 
 6300              		.loc 1 1915 7 is_stmt 0 view .LVU2025
 6301 07da 9FE5     		b	.L423
 6302              	.LVL714:
 6303              	.L543:
1915:src/display.c **** 
 6304              		.loc 1 1915 7 view .LVU2026
 6305              	.LBE430:
ARM GAS  /tmp/ccPv3rzq.s 			page 206


 6306              	.LBE429:
 6307              	.LBB439:
 6308              	.LBB418:
 6309 07dc 1146     		mov	r1, r2
 6310              	.LVL715:
1915:src/display.c **** 
 6311              		.loc 1 1915 7 view .LVU2027
 6312 07de 5046     		mov	r0, r10
 6313 07e0 FFF7FEFF 		bl	set_separator.part.0
 6314              	.LVL716:
1915:src/display.c **** 
 6315              		.loc 1 1915 7 view .LVU2028
 6316 07e4 7B4B     		ldr	r3, .L679+12
 6317 07e6 0446     		mov	r4, r0
 6318              	.LVL717:
1915:src/display.c **** 
 6319              		.loc 1 1915 7 view .LVU2029
 6320 07e8 ABE6     		b	.L541
 6321              	.LVL718:
 6322              	.L510:
1915:src/display.c **** 
 6323              		.loc 1 1915 7 view .LVU2030
 6324              	.LBE418:
 6325              	.LBE439:
2206:src/display.c **** 	    odig++;
 6326              		.loc 1 2206 6 is_stmt 1 view .LVU2031
2207:src/display.c **** 	    *obp++ = '.';
 6327              		.loc 1 2207 6 view .LVU2032
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6328              		.loc 1 2208 6 view .LVU2033
2206:src/display.c **** 	    odig++;
 6329              		.loc 1 2206 13 is_stmt 0 view .LVU2034
 6330 07ea 42F63063 		movw	r3, #11824
 6331 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2209:src/display.c **** 	      *obp++ = '0';
 6332              		.loc 1 2209 6 is_stmt 1 view .LVU2035
 6333              	.LVL719:
2209:src/display.c **** 	      *obp++ = '0';
 6334              		.loc 1 2209 20 view .LVU2036
2209:src/display.c **** 	      *obp++ = '0';
 6335              		.loc 1 2209 6 is_stmt 0 view .LVU2037
 6336 07f2 731C     		adds	r3, r6, #1
 6337              	.LVL720:
2209:src/display.c **** 	      *obp++ = '0';
 6338              		.loc 1 2209 6 view .LVU2038
 6339 07f4 00F0DD80 		beq	.L673
 6340 07f8 C6F10102 		rsb	r2, r6, #1
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6341              		.loc 1 2208 10 view .LVU2039
 6342 07fc 0DF12600 		add	r0, sp, #38
 6343              	.LVL721:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6344              		.loc 1 2208 10 view .LVU2040
 6345 0800 079D     		ldr	r5, [sp, #28]
 6346 0802 3A44     		add	r2, r2, r7
 6347 0804 0346     		mov	r3, r0
 6348              	.LVL722:
ARM GAS  /tmp/ccPv3rzq.s 			page 207


2210:src/display.c **** 	      odig++;
 6349              		.loc 1 2210 15 view .LVU2041
 6350 0806 3021     		movs	r1, #48
 6351              	.LVL723:
 6352              	.L518:
2210:src/display.c **** 	      odig++;
 6353              		.loc 1 2210 8 is_stmt 1 discriminator 3 view .LVU2042
2210:src/display.c **** 	      odig++;
 6354              		.loc 1 2210 15 is_stmt 0 discriminator 3 view .LVU2043
 6355 0808 03F8011B 		strb	r1, [r3], #1
 6356              	.LVL724:
2211:src/display.c **** 	      dd--;
 6357              		.loc 1 2211 8 is_stmt 1 discriminator 3 view .LVU2044
2212:src/display.c **** 	    }
 6358              		.loc 1 2212 8 discriminator 3 view .LVU2045
2209:src/display.c **** 	      *obp++ = '0';
 6359              		.loc 1 2209 25 discriminator 3 view .LVU2046
2209:src/display.c **** 	      *obp++ = '0';
 6360              		.loc 1 2209 20 discriminator 3 view .LVU2047
2209:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2209 6 is_stmt 0 discriminator 3 view .LVU2048
 6362 080c 9342     		cmp	r3, r2
 6363 080e FBD1     		bne	.L518
 6364 0810 7319     		adds	r3, r6, r5
 6365              	.LVL725:
2209:src/display.c **** 	      *obp++ = '0';
 6366              		.loc 1 2209 6 discriminator 3 view .LVU2049
 6367 0812 6FEA0608 		mvn	r8, r6
 6368 0816 0133     		adds	r3, r3, #1
 6369 0818 8044     		add	r8, r8, r0
 6370 081a 7542     		rsbs	r5, r6, #0
 6371              	.L517:
 6372              	.LVL726:
2214:src/display.c **** 	      *obp++ = *p++;
 6373              		.loc 1 2214 12 is_stmt 1 view .LVU2050
2214:src/display.c **** 	      *obp++ = *p++;
 6374              		.loc 1 2214 15 is_stmt 0 view .LVU2051
 6375 081c 5A1E     		subs	r2, r3, #1
2214:src/display.c **** 	      *obp++ = *p++;
 6376              		.loc 1 2214 12 view .LVU2052
 6377 081e 002B     		cmp	r3, #0
2214:src/display.c **** 	      *obp++ = *p++;
 6378              		.loc 1 2214 15 view .LVU2053
 6379 0820 0792     		str	r2, [sp, #28]
2214:src/display.c **** 	      *obp++ = *p++;
 6380              		.loc 1 2214 12 view .LVU2054
 6381 0822 7FF76FAE 		ble	.L499
 6382 0826 4344     		add	r3, r3, r8
 6383 0828 581E     		subs	r0, r3, #1
 6384 082a 08F1FF38 		add	r8, r8, #-1
 6385              	.LVL727:
 6386              	.L519:
2215:src/display.c **** 	      odig++;
 6387              		.loc 1 2215 8 is_stmt 1 view .LVU2055
2215:src/display.c **** 	      odig++;
 6388              		.loc 1 2215 15 is_stmt 0 view .LVU2056
 6389 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccPv3rzq.s 			page 208


 6390              	.LVL728:
2215:src/display.c **** 	      odig++;
 6391              		.loc 1 2215 15 view .LVU2057
 6392 0832 08F8011F 		strb	r1, [r8, #1]!
2216:src/display.c **** 	    }
 6393              		.loc 1 2216 8 is_stmt 1 view .LVU2058
2214:src/display.c **** 	      *obp++ = *p++;
 6394              		.loc 1 2214 12 view .LVU2059
 6395 0836 8045     		cmp	r8, r0
 6396 0838 F9D1     		bne	.L519
 6397              	.LVL729:
2214:src/display.c **** 	      *obp++ = *p++;
 6398              		.loc 1 2214 12 is_stmt 0 view .LVU2060
 6399 083a 681C     		adds	r0, r5, #1
 6400 083c 4FF0FF31 		mov	r1, #-1
 6401 0840 1518     		adds	r5, r2, r0
 6402 0842 9846     		mov	r8, r3
 6403 0844 0791     		str	r1, [sp, #28]
 6404 0846 5DE6     		b	.L499
 6405              	.LVL730:
 6406              	.L522:
2232:src/display.c **** 	    odig++;
 6407              		.loc 1 2232 6 is_stmt 1 view .LVU2061
2232:src/display.c **** 	    odig++;
 6408              		.loc 1 2232 13 is_stmt 0 view .LVU2062
 6409 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6410 084c 8DF82430 		strb	r3, [sp, #36]
2233:src/display.c **** 	    dd--;
 6411              		.loc 1 2233 6 is_stmt 1 view .LVU2063
 6412              	.LVL731:
2234:src/display.c **** 	    exp--;
 6413              		.loc 1 2234 6 view .LVU2064
2234:src/display.c **** 	    exp--;
 6414              		.loc 1 2234 8 is_stmt 0 view .LVU2065
 6415 0850 013A     		subs	r2, r2, #1
2235:src/display.c **** 	  case -2:
 6416              		.loc 1 2235 6 is_stmt 1 view .LVU2066
2235:src/display.c **** 	  case -2:
 6417              		.loc 1 2235 9 is_stmt 0 view .LVU2067
 6418 0852 013E     		subs	r6, r6, #1
 6419              	.LVL732:
2235:src/display.c **** 	  case -2:
 6420              		.loc 1 2235 9 view .LVU2068
 6421 0854 0325     		movs	r5, #3
2232:src/display.c **** 	    odig++;
 6422              		.loc 1 2232 17 view .LVU2069
 6423 0856 0DF1590B 		add	fp, sp, #89
 6424              	.LVL733:
2232:src/display.c **** 	    odig++;
 6425              		.loc 1 2232 10 view .LVU2070
 6426 085a 0DF12501 		add	r1, sp, #37
 6427              	.LVL734:
 6428              	.L525:
2238:src/display.c **** 	    odig++;
 6429              		.loc 1 2238 6 is_stmt 1 view .LVU2071
2238:src/display.c **** 	    odig++;
 6430              		.loc 1 2238 13 is_stmt 0 view .LVU2072
ARM GAS  /tmp/ccPv3rzq.s 			page 209


 6431 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6432              	.LVL735:
2238:src/display.c **** 	    odig++;
 6433              		.loc 1 2238 13 view .LVU2073
 6434 0862 01F8013B 		strb	r3, [r1], #1
 6435              	.LVL736:
2239:src/display.c **** 	    dd--;
 6436              		.loc 1 2239 6 is_stmt 1 view .LVU2074
2240:src/display.c **** 	    exp--;
 6437              		.loc 1 2240 6 view .LVU2075
2240:src/display.c **** 	    exp--;
 6438              		.loc 1 2240 8 is_stmt 0 view .LVU2076
 6439 0866 013A     		subs	r2, r2, #1
2241:src/display.c **** 	  case 0:
 6440              		.loc 1 2241 6 is_stmt 1 view .LVU2077
2241:src/display.c **** 	  case 0:
 6441              		.loc 1 2241 9 is_stmt 0 view .LVU2078
 6442 0868 013E     		subs	r6, r6, #1
 6443              	.LVL737:
2241:src/display.c **** 	  case 0:
 6444              		.loc 1 2241 9 view .LVU2079
 6445 086a 2CE6     		b	.L489
 6446              	.LVL738:
 6447              	.L524:
2241:src/display.c **** 	  case 0:
 6448              		.loc 1 2241 9 view .LVU2080
 6449 086c 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 6450              		.loc 1 2229 16 view .LVU2081
 6451 086e 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6452              		.loc 1 1934 15 view .LVU2082
 6453 0870 3946     		mov	r1, r7
 6454 0872 F4E7     		b	.L525
 6455              	.LVL739:
 6456              	.L470:
2097:src/display.c **** 	    /* We might have push the fixed decimals off the
 6457              		.loc 1 2097 6 is_stmt 1 view .LVU2083
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6458              		.loc 1 2101 6 view .LVU2084
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6459              		.loc 1 2101 9 is_stmt 0 view .LVU2085
 6460 0874 0299     		ldr	r1, [sp, #8]
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6461              		.loc 1 2101 23 view .LVU2086
 6462 0876 9319     		adds	r3, r2, r6
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6463              		.loc 1 2101 9 view .LVU2087
 6464 0878 9942     		cmp	r1, r3
2102:src/display.c **** 	  }
 6465              		.loc 1 2102 8 is_stmt 1 view .LVU2088
2102:src/display.c **** 	  }
 6466              		.loc 1 2102 30 is_stmt 0 view .LVU2089
 6467 087a DFBF     		itttt	le
 6468 087c 029B     		ldrle	r3, [sp, #8]
 6469 087e 03F1FF32 		addle	r2, r3, #-1
2102:src/display.c **** 	  }
ARM GAS  /tmp/ccPv3rzq.s 			page 210


 6470              		.loc 1 2102 35 view .LVU2090
 6471 0882 921B     		suble	r2, r2, r6
2102:src/display.c **** 	  }
 6472              		.loc 1 2102 11 view .LVU2091
 6473 0884 0792     		strle	r2, [sp, #28]
 6474 0886 3146     		mov	r1, r6
 6475 0888 6AE4     		b	.L467
 6476              	.LVL740:
 6477              	.L495:
2141:src/display.c **** 	      odig++;
 6478              		.loc 1 2141 8 is_stmt 1 view .LVU2092
2141:src/display.c **** 	      odig++;
 6479              		.loc 1 2141 15 is_stmt 0 view .LVU2093
 6480 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6481 088e 8DF82410 		strb	r1, [sp, #36]
2142:src/display.c **** 	      dd--;
 6482              		.loc 1 2142 8 is_stmt 1 view .LVU2094
 6483              	.LVL741:
2143:src/display.c **** 	      exp--;
 6484              		.loc 1 2143 8 view .LVU2095
2143:src/display.c **** 	      exp--;
 6485              		.loc 1 2143 10 is_stmt 0 view .LVU2096
 6486 0892 013A     		subs	r2, r2, #1
2144:src/display.c **** 	    case -2:
 6487              		.loc 1 2144 8 is_stmt 1 view .LVU2097
2144:src/display.c **** 	    case -2:
 6488              		.loc 1 2144 11 is_stmt 0 view .LVU2098
 6489 0894 013E     		subs	r6, r6, #1
 6490              	.LVL742:
2144:src/display.c **** 	    case -2:
 6491              		.loc 1 2144 11 view .LVU2099
 6492 0896 0325     		movs	r5, #3
2141:src/display.c **** 	      odig++;
 6493              		.loc 1 2141 19 view .LVU2100
 6494 0898 0DF1590B 		add	fp, sp, #89
 6495              	.LVL743:
2141:src/display.c **** 	      odig++;
 6496              		.loc 1 2141 12 view .LVU2101
 6497 089c 0DF12501 		add	r1, sp, #37
 6498              	.LVL744:
 6499              	.L498:
2147:src/display.c **** 	      odig++;
 6500              		.loc 1 2147 8 is_stmt 1 view .LVU2102
2147:src/display.c **** 	      odig++;
 6501              		.loc 1 2147 15 is_stmt 0 view .LVU2103
 6502 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6503              	.LVL745:
2147:src/display.c **** 	      odig++;
 6504              		.loc 1 2147 15 view .LVU2104
 6505 08a4 01F8010B 		strb	r0, [r1], #1
 6506              	.LVL746:
2148:src/display.c **** 	      dd--;
 6507              		.loc 1 2148 8 is_stmt 1 view .LVU2105
2149:src/display.c **** 	      exp--;
 6508              		.loc 1 2149 8 view .LVU2106
2150:src/display.c **** 	    case 0:
 6509              		.loc 1 2150 8 view .LVU2107
ARM GAS  /tmp/ccPv3rzq.s 			page 211


2149:src/display.c **** 	      exp--;
 6510              		.loc 1 2149 10 is_stmt 0 view .LVU2108
 6511 08a8 013A     		subs	r2, r2, #1
 6512 08aa 0792     		str	r2, [sp, #28]
2150:src/display.c **** 	    case 0:
 6513              		.loc 1 2150 11 view .LVU2109
 6514 08ac 013E     		subs	r6, r6, #1
 6515              	.LVL747:
 6516              	.L494:
2152:src/display.c **** 	    };
 6517              		.loc 1 2152 8 is_stmt 1 view .LVU2110
2153:src/display.c **** 	    *obp++ = *p++;
 6518              		.loc 1 2153 7 view .LVU2111
2154:src/display.c **** 	    odig++;
 6519              		.loc 1 2154 6 view .LVU2112
2154:src/display.c **** 	    odig++;
 6520              		.loc 1 2154 17 is_stmt 0 view .LVU2113
 6521 08ae 5A46     		mov	r2, fp
 6522              	.LVL748:
2154:src/display.c **** 	    odig++;
 6523              		.loc 1 2154 13 view .LVU2114
 6524 08b0 8846     		mov	r8, r1
 6525 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6526              	.LVL749:
2154:src/display.c **** 	    odig++;
 6527              		.loc 1 2154 13 view .LVU2115
 6528 08b6 08F8020B 		strb	r0, [r8], #2
2155:src/display.c **** 	    *obp++ = '.';
 6529              		.loc 1 2155 6 is_stmt 1 view .LVU2116
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6530              		.loc 1 2156 6 view .LVU2117
 6531              	.LVL750:
2157:src/display.c **** 	      *obp++ = *p++;
 6532              		.loc 1 2157 6 is_stmt 0 view .LVU2118
 6533 08ba 012B     		cmp	r3, #1
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6534              		.loc 1 2156 13 view .LVU2119
 6535 08bc 4FF02E00 		mov	r0, #46
 6536 08c0 4870     		strb	r0, [r1, #1]
2157:src/display.c **** 	      *obp++ = *p++;
 6537              		.loc 1 2157 6 is_stmt 1 view .LVU2120
 6538              	.LVL751:
2157:src/display.c **** 	      *obp++ = *p++;
 6539              		.loc 1 2157 16 view .LVU2121
2157:src/display.c **** 	      *obp++ = *p++;
 6540              		.loc 1 2157 6 is_stmt 0 view .LVU2122
 6541 08c2 32DD     		ble	.L569
2157:src/display.c **** 	      *obp++ = *p++;
 6542              		.loc 1 2157 6 view .LVU2123
 6543 08c4 0131     		adds	r1, r1, #1
 6544 08c6 9B44     		add	fp, fp, r3
 6545              	.LVL752:
 6546              	.L500:
2158:src/display.c **** 	      odig++;
 6547              		.loc 1 2158 8 is_stmt 1 discriminator 3 view .LVU2124
2158:src/display.c **** 	      odig++;
 6548              		.loc 1 2158 15 is_stmt 0 discriminator 3 view .LVU2125
ARM GAS  /tmp/ccPv3rzq.s 			page 212


 6549 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6550              	.LVL753:
2158:src/display.c **** 	      odig++;
 6551              		.loc 1 2158 15 discriminator 3 view .LVU2126
 6552 08cc 01F8010F 		strb	r0, [r1, #1]!
2159:src/display.c **** 	    }
 6553              		.loc 1 2159 8 is_stmt 1 discriminator 3 view .LVU2127
2157:src/display.c **** 	      *obp++ = *p++;
 6554              		.loc 1 2157 25 discriminator 3 view .LVU2128
2157:src/display.c **** 	      *obp++ = *p++;
 6555              		.loc 1 2157 16 discriminator 3 view .LVU2129
2157:src/display.c **** 	      *obp++ = *p++;
 6556              		.loc 1 2157 6 is_stmt 0 discriminator 3 view .LVU2130
 6557 08d0 5A45     		cmp	r2, fp
 6558 08d2 F9D1     		bne	.L500
 6559 08d4 013B     		subs	r3, r3, #1
 6560              	.LVL754:
2157:src/display.c **** 	      *obp++ = *p++;
 6561              		.loc 1 2157 6 discriminator 3 view .LVU2131
 6562 08d6 9844     		add	r8, r8, r3
 6563 08d8 1D44     		add	r5, r5, r3
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6564              		.loc 1 2161 15 view .LVU2132
 6565 08da 4FF00109 		mov	r9, #1
 6566 08de 11E6     		b	.L499
 6567              	.LVL755:
 6568              	.L497:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6569              		.loc 1 2161 15 view .LVU2133
 6570 08e0 079A     		ldr	r2, [sp, #28]
2138:src/display.c **** 	    case -1:
 6571              		.loc 1 2138 24 view .LVU2134
 6572 08e2 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6573              		.loc 1 1934 15 view .LVU2135
 6574 08e4 3946     		mov	r1, r7
 6575 08e6 DBE7     		b	.L498
 6576              	.LVL756:
 6577              	.L537:
2283:src/display.c **** 	  }
 6578              		.loc 1 2283 8 is_stmt 1 view .LVU2136
 6579 08e8 2D21     		movs	r1, #45
 6580 08ea AAF10900 		sub	r0, r10, #9
 6581 08ee FFF7FEFF 		bl	set_dig
 6582              	.LVL757:
 6583 08f2 ECE4     		b	.L533
 6584              	.LVL758:
 6585              	.L672:
 6586              	.LBB440:
 6587              	.LBB437:
 6588              	.LBB435:
1850:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6589              		.loc 1 1850 4 view .LVU2137
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6590              		.loc 1 1853 4 view .LVU2138
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6591              		.loc 1 1853 14 is_stmt 0 view .LVU2139
ARM GAS  /tmp/ccPv3rzq.s 			page 213


 6592 08f4 07F1030A 		add	r10, r7, #3
 6593              	.LVL759:
1854:src/display.c **** 	  if (grouping) {
 6594              		.loc 1 1854 4 is_stmt 1 view .LVU2140
 6595 08f8 3749     		ldr	r1, .L679+16
 6596 08fa 0D22     		movs	r2, #13
 6597 08fc 5046     		mov	r0, r10
 6598 08fe FFF7FEFF 		bl	xcopy
 6599              	.LVL760:
1855:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6600              		.loc 1 1855 4 view .LVU2141
1856:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6601              		.loc 1 1856 6 view .LVU2142
 6602 0902 1322     		movs	r2, #19
 6603 0904 B918     		adds	r1, r7, r2
 6604 0906 07F11400 		add	r0, r7, #20
 6605 090a FFF7FEFF 		bl	xcopy
 6606              	.LVL761:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6607              		.loc 1 1857 6 view .LVU2143
1858:src/display.c **** 	  }
 6608              		.loc 1 1858 8 is_stmt 0 view .LVU2144
 6609 090e 07F11705 		add	r5, r7, #23
 6610              	.LVL762:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6611              		.loc 1 1857 24 view .LVU2145
 6612 0912 FE74     		strb	r6, [r7, #19]
1858:src/display.c **** 	  }
 6613              		.loc 1 1858 6 is_stmt 1 view .LVU2146
 6614              	.LVL763:
1871:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6615              		.loc 1 1871 4 view .LVU2147
1872:src/display.c **** 	}
 6616              		.loc 1 1872 4 view .LVU2148
1872:src/display.c **** 	}
 6617              		.loc 1 1872 6 is_stmt 0 view .LVU2149
 6618 0914 1B24     		movs	r4, #27
 6619              	.LVL764:
1872:src/display.c **** 	}
 6620              		.loc 1 1872 6 view .LVU2150
 6621              	.LBE435:
 6622 0916 49E7     		b	.L442
 6623              	.LVL765:
 6624              	.L668:
1872:src/display.c **** 	}
 6625              		.loc 1 1872 6 view .LVU2151
 6626              	.LBE437:
 6627              	.LBE440:
1971:src/display.c **** 	      return;
 6628              		.loc 1 1971 8 is_stmt 1 view .LVU2152
 6629 0918 5046     		mov	r0, r10
 6630 091a FFF7FEFF 		bl	set_x_hms
 6631              	.LVL766:
1972:src/display.c **** 	    }
 6632              		.loc 1 1972 8 view .LVU2153
 6633 091e FDE4     		b	.L423
 6634              	.LVL767:
ARM GAS  /tmp/ccPv3rzq.s 			page 214


 6635              	.L567:
2133:src/display.c **** 	  if (count != *display_digits)
 6636              		.loc 1 2133 4 is_stmt 0 view .LVU2154
 6637 0920 029B     		ldr	r3, [sp, #8]
 6638 0922 72E4     		b	.L490
 6639              	.LVL768:
 6640              	.L568:
2138:src/display.c **** 	    case -1:
 6641              		.loc 1 2138 24 view .LVU2155
 6642 0924 0125     		movs	r5, #1
 6643 0926 3946     		mov	r1, r7
 6644 0928 C1E7     		b	.L494
 6645              	.LVL769:
 6646              	.L569:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6647              		.loc 1 2161 15 view .LVU2156
 6648 092a 4FF00109 		mov	r9, #1
 6649 092e E9E5     		b	.L499
 6650              	.LVL770:
 6651              	.L473:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6652              		.loc 1 2111 4 is_stmt 1 view .LVU2157
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6653              		.loc 1 2111 7 is_stmt 0 view .LVU2158
 6654 0930 5B45     		cmp	r3, fp
 6655 0932 7FF42FAC 		bne	.L552
 6656 0936 4DE5     		b	.L553
 6657              	.LVL771:
 6658              	.L439:
 6659              	.LBB441:
 6660              	.LBB438:
1896:src/display.c **** 	    x[10] = '\0';
 6661              		.loc 1 1896 6 is_stmt 1 view .LVU2159
1897:src/display.c **** 	  }
 6662              		.loc 1 1897 6 view .LVU2160
1896:src/display.c **** 	    x[10] = '\0';
 6663              		.loc 1 1896 11 is_stmt 0 view .LVU2161
 6664 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6665 093a 28E7     		b	.L441
 6666              	.LVL772:
 6667              	.L671:
 6668              	.LBB436:
1821:src/display.c **** 
 6669              		.loc 1 1821 4 is_stmt 1 view .LVU2162
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6670              		.loc 1 1823 4 view .LVU2163
 6671 093c 2222     		movs	r2, #34
 6672 093e 0DF12501 		add	r1, sp, #37
 6673 0942 0AA8     		add	r0, sp, #40
 6674              	.LVL773:
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6675              		.loc 1 1823 4 is_stmt 0 view .LVU2164
 6676 0944 FFF7FEFF 		bl	xcopy
 6677              	.LVL774:
1824:src/display.c **** 	  x += 4;
 6678              		.loc 1 1824 4 is_stmt 1 view .LVU2165
 6679 0948 3846     		mov	r0, r7
ARM GAS  /tmp/ccPv3rzq.s 			page 215


 6680 094a 2449     		ldr	r1, .L679+20
 6681 094c 0422     		movs	r2, #4
 6682 094e FFF7FEFF 		bl	xcopy
 6683              	.LVL775:
1825:src/display.c **** 	  negative = 4;
 6684              		.loc 1 1825 4 view .LVU2166
1826:src/display.c **** #else
 6685              		.loc 1 1826 4 view .LVU2167
1825:src/display.c **** 	  negative = 4;
 6686              		.loc 1 1825 6 is_stmt 0 view .LVU2168
 6687 0952 0AAF     		add	r7, sp, #40
 6688              	.LVL776:
1826:src/display.c **** #else
 6689              		.loc 1 1826 13 view .LVU2169
 6690 0954 4FF0040A 		mov	r10, #4
 6691              	.LVL777:
1826:src/display.c **** #else
 6692              		.loc 1 1826 13 view .LVU2170
 6693              	.LBE436:
 6694 0958 DCE6     		b	.L435
 6695              	.LVL778:
 6696              	.L501:
1826:src/display.c **** #else
 6697              		.loc 1 1826 13 view .LVU2171
 6698              	.LBE438:
 6699              	.LBE441:
2177:src/display.c **** 	    odig++;
 6700              		.loc 1 2177 6 is_stmt 1 view .LVU2172
2178:src/display.c **** 	    *obp++ = '.';
 6701              		.loc 1 2178 6 view .LVU2173
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6702              		.loc 1 2179 6 view .LVU2174
2177:src/display.c **** 	    odig++;
 6703              		.loc 1 2177 13 is_stmt 0 view .LVU2175
 6704 095a 42F63062 		movw	r2, #11824
 6705 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2180:src/display.c **** 	      *obp++ = '0';
 6706              		.loc 1 2180 6 is_stmt 1 view .LVU2176
 6707              	.LVL779:
2180:src/display.c **** 	      *obp++ = '0';
 6708              		.loc 1 2180 20 view .LVU2177
2180:src/display.c **** 	      *obp++ = '0';
 6709              		.loc 1 2180 6 is_stmt 0 view .LVU2178
 6710 0962 721C     		adds	r2, r6, #1
 6711              	.LVL780:
2180:src/display.c **** 	      *obp++ = '0';
 6712              		.loc 1 2180 6 view .LVU2179
 6713 0964 2AD0     		beq	.L570
 6714 0966 C6F10101 		rsb	r1, r6, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6715              		.loc 1 2179 10 view .LVU2180
 6716 096a 0DF12600 		add	r0, sp, #38
 6717              	.LVL781:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6718              		.loc 1 2179 10 view .LVU2181
 6719 096e 3944     		add	r1, r1, r7
 6720 0970 0246     		mov	r2, r0
ARM GAS  /tmp/ccPv3rzq.s 			page 216


 6721              	.LVL782:
2181:src/display.c **** 	      odig++;
 6722              		.loc 1 2181 15 view .LVU2182
 6723 0972 3025     		movs	r5, #48
 6724              	.LVL783:
 6725              	.L508:
2181:src/display.c **** 	      odig++;
 6726              		.loc 1 2181 8 is_stmt 1 discriminator 3 view .LVU2183
2181:src/display.c **** 	      odig++;
 6727              		.loc 1 2181 15 is_stmt 0 discriminator 3 view .LVU2184
 6728 0974 02F8015B 		strb	r5, [r2], #1
 6729              	.LVL784:
2182:src/display.c **** 	    }
 6730              		.loc 1 2182 8 is_stmt 1 discriminator 3 view .LVU2185
2180:src/display.c **** 	      *obp++ = '0';
 6731              		.loc 1 2180 25 discriminator 3 view .LVU2186
2180:src/display.c **** 	      *obp++ = '0';
 6732              		.loc 1 2180 20 discriminator 3 view .LVU2187
2180:src/display.c **** 	      *obp++ = '0';
 6733              		.loc 1 2180 6 is_stmt 0 discriminator 3 view .LVU2188
 6734 0978 8A42     		cmp	r2, r1
 6735 097a FBD1     		bne	.L508
 6736 097c 6FEA0608 		mvn	r8, r6
 6737 0980 8044     		add	r8, r8, r0
 6738 0982 7542     		rsbs	r5, r6, #0
 6739              	.LVL785:
 6740              	.L507:
2184:src/display.c **** 	      *obp++ = *p++;
 6741              		.loc 1 2184 16 is_stmt 1 view .LVU2189
2184:src/display.c **** 	      *obp++ = *p++;
 6742              		.loc 1 2184 6 is_stmt 0 view .LVU2190
 6743 0984 002B     		cmp	r3, #0
 6744 0986 7FF7BDAD 		ble	.L499
 6745 098a 581E     		subs	r0, r3, #1
 6746 098c 4044     		add	r0, r0, r8
 6747 098e 08F1FF32 		add	r2, r8, #-1
 6748              	.LVL786:
 6749              	.L509:
2185:src/display.c **** 	      odig++;
 6750              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2191
2185:src/display.c **** 	      odig++;
 6751              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2192
 6752 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6753              	.LVL787:
2185:src/display.c **** 	      odig++;
 6754              		.loc 1 2185 15 discriminator 3 view .LVU2193
 6755 0996 02F8011F 		strb	r1, [r2, #1]!
2186:src/display.c **** 	    }
 6756              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2194
2184:src/display.c **** 	      *obp++ = *p++;
 6757              		.loc 1 2184 25 discriminator 3 view .LVU2195
 6758              	.LVL788:
2184:src/display.c **** 	      *obp++ = *p++;
 6759              		.loc 1 2184 16 discriminator 3 view .LVU2196
2184:src/display.c **** 	      *obp++ = *p++;
 6760              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2197
 6761 099a 9042     		cmp	r0, r2
ARM GAS  /tmp/ccPv3rzq.s 			page 217


 6762 099c F9D1     		bne	.L509
 6763              	.LVL789:
2184:src/display.c **** 	      *obp++ = *p++;
 6764              		.loc 1 2184 6 discriminator 3 view .LVU2198
 6765 099e 9844     		add	r8, r8, r3
 6766              	.LVL790:
2184:src/display.c **** 	      *obp++ = *p++;
 6767              		.loc 1 2184 6 discriminator 3 view .LVU2199
 6768 09a0 1D44     		add	r5, r5, r3
 6769 09a2 AFE5     		b	.L499
 6770              	.LVL791:
 6771              	.L670:
2127:src/display.c **** 
 6772              		.loc 1 2127 2 is_stmt 1 view .LVU2200
 6773 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 6774              		.loc 1 2127 9 is_stmt 0 view .LVU2201
 6775 09a8 0BEB0E03 		add	r3, fp, lr
 6776              	.LVL792:
2127:src/display.c **** 
 6777              		.loc 1 2127 45 is_stmt 1 view .LVU2202
2127:src/display.c **** 
 6778              		.loc 1 2127 2 is_stmt 0 view .LVU2203
 6779 09ac 51B1     		cbz	r1, .L674
2116:src/display.c **** 	      extra_digits = 0;
 6780              		.loc 1 2116 37 view .LVU2204
 6781 09ae 0225     		movs	r5, #2
 6782 09b0 07E4     		b	.L551
 6783              	.LVL793:
 6784              	.L673:
2116:src/display.c **** 	      extra_digits = 0;
 6785              		.loc 1 2116 37 view .LVU2205
 6786 09b2 079B     		ldr	r3, [sp, #28]
 6787              	.LVL794:
2207:src/display.c **** 	    *obp++ = '.';
 6788              		.loc 1 2207 10 view .LVU2206
 6789 09b4 0125     		movs	r5, #1
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6790              		.loc 1 2208 10 view .LVU2207
 6791 09b6 0DF12608 		add	r8, sp, #38
 6792              	.LVL795:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6793              		.loc 1 2208 10 view .LVU2208
 6794 09ba 2FE7     		b	.L517
 6795              	.LVL796:
 6796              	.L570:
2178:src/display.c **** 	    *obp++ = '.';
 6797              		.loc 1 2178 10 view .LVU2209
 6798 09bc 0125     		movs	r5, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6799              		.loc 1 2179 10 view .LVU2210
 6800 09be 0DF12608 		add	r8, sp, #38
 6801              	.LVL797:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6802              		.loc 1 2179 10 view .LVU2211
 6803 09c2 DFE7     		b	.L507
 6804              	.LVL798:
ARM GAS  /tmp/ccPv3rzq.s 			page 218


 6805              	.L674:
1934:src/display.c **** 	int odig = 0;
 6806              		.loc 1 1934 15 view .LVU2212
 6807 09c4 3946     		mov	r1, r7
 6808 09c6 7EE5     		b	.L489
 6809              	.L680:
 6810              		.align	2
 6811              	.L679:
 6812 09c8 00000000 		.word	.LANCHOR1
 6813 09cc D34D6210 		.word	274877907
 6814 09d0 18FCFFFF 		.word	-1000
 6815 09d4 00000000 		.word	.LANCHOR0
 6816 09d8 00000000 		.word	.LANCHOR11
 6817 09dc 00000000 		.word	.LANCHOR10
 6818              		.cfi_endproc
 6819              	.LFE27:
 6821              		.section	.text.set_x,"ax",%progbits
 6822              		.align	1
 6823              		.p2align 2,,3
 6824              		.syntax unified
 6825              		.thumb
 6826              		.thumb_func
 6827              		.fpu fpv4-sp-d16
 6829              	set_x:
 6830              	.LVL799:
 6831              	.LFB26:
1922:src/display.c **** 	decNumber z;
 6832              		.loc 1 1922 66 is_stmt 1 view -0
 6833              		.cfi_startproc
 6834              		@ args = 0, pretend = 0, frame = 40
 6835              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6836              		.loc 1 1923 2 view .LVU2214
1924:src/display.c **** 
 6837              		.loc 1 1924 2 view .LVU2215
1922:src/display.c **** 	decNumber z;
 6838              		.loc 1 1922 66 is_stmt 0 view .LVU2216
 6839 0000 30B5     		push	{r4, r5, lr}
 6840              		.cfi_def_cfa_offset 12
 6841              		.cfi_offset 4, -12
 6842              		.cfi_offset 5, -8
 6843              		.cfi_offset 14, -4
 6844 0002 8BB0     		sub	sp, sp, #44
 6845              		.cfi_def_cfa_offset 56
1924:src/display.c **** 
 6846              		.loc 1 1924 6 view .LVU2217
 6847 0004 0C23     		movs	r3, #12
1927:src/display.c **** 	else
 6848              		.loc 1 1927 4 view .LVU2218
 6849 0006 01AD     		add	r5, sp, #4
1922:src/display.c **** 	decNumber z;
 6850              		.loc 1 1922 66 view .LVU2219
 6851 0008 0C46     		mov	r4, r1
1924:src/display.c **** 
 6852              		.loc 1 1924 6 view .LVU2220
 6853 000a 0093     		str	r3, [sp]
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
ARM GAS  /tmp/ccPv3rzq.s 			page 219


 6854              		.loc 1 1926 2 is_stmt 1 view .LVU2221
1927:src/display.c **** 	else
 6855              		.loc 1 1927 4 is_stmt 0 view .LVU2222
 6856 000c 2946     		mov	r1, r5
 6857              	.LVL800:
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6858              		.loc 1 1926 5 view .LVU2223
 6859 000e 42B1     		cbz	r2, .L682
1927:src/display.c **** 	else
 6860              		.loc 1 1927 4 is_stmt 1 view .LVU2224
 6861 0010 FFF7FEFF 		bl	decimal128ToNumber
 6862              	.LVL801:
1930:src/display.c ****       }
 6863              		.loc 1 1930 2 view .LVU2225
 6864 0014 2146     		mov	r1, r4
 6865 0016 2846     		mov	r0, r5
 6866 0018 6A46     		mov	r2, sp
 6867 001a FFF7FEFF 		bl	set_x_dn
 6868              	.LVL802:
1931:src/display.c **** 
 6869              		.loc 1 1931 7 is_stmt 0 view .LVU2226
 6870 001e 0BB0     		add	sp, sp, #44
 6871              		.cfi_remember_state
 6872              		.cfi_def_cfa_offset 12
 6873              		@ sp needed
 6874 0020 30BD     		pop	{r4, r5, pc}
 6875              	.LVL803:
 6876              	.L682:
 6877              		.cfi_restore_state
1929:src/display.c **** 	set_x_dn(&z, res, &digits);
 6878              		.loc 1 1929 4 is_stmt 1 view .LVU2227
 6879 0022 FFF7FEFF 		bl	decimal64ToNumber
 6880              	.LVL804:
1930:src/display.c ****       }
 6881              		.loc 1 1930 2 view .LVU2228
 6882 0026 2146     		mov	r1, r4
 6883 0028 2846     		mov	r0, r5
 6884 002a 6A46     		mov	r2, sp
 6885 002c FFF7FEFF 		bl	set_x_dn
 6886              	.LVL805:
1931:src/display.c **** 
 6887              		.loc 1 1931 7 is_stmt 0 view .LVU2229
 6888 0030 0BB0     		add	sp, sp, #44
 6889              		.cfi_def_cfa_offset 12
 6890              		@ sp needed
 6891 0032 30BD     		pop	{r4, r5, pc}
1931:src/display.c **** 
 6892              		.loc 1 1931 7 view .LVU2230
 6893              		.cfi_endproc
 6894              	.LFE26:
 6896              		.section	.text.format_reg,"ax",%progbits
 6897              		.align	1
 6898              		.p2align 2,,3
 6899              		.global	format_reg
 6900              		.syntax unified
 6901              		.thumb
 6902              		.thumb_func
ARM GAS  /tmp/ccPv3rzq.s 			page 220


 6903              		.fpu fpv4-sp-d16
 6905              	format_reg:
 6906              	.LVL806:
 6907              	.LFB28:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6908              		.loc 1 2338 45 is_stmt 1 view -0
 6909              		.cfi_startproc
 6910              		@ args = 0, pretend = 0, frame = 40
 6911              		@ frame_needed = 0, uses_anonymous_args = 0
2339:src/display.c **** 
 6912              		.loc 1 2339 2 view .LVU2232
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6913              		.loc 1 2338 45 is_stmt 0 view .LVU2233
 6914 0000 30B5     		push	{r4, r5, lr}
 6915              		.cfi_def_cfa_offset 12
 6916              		.cfi_offset 4, -12
 6917              		.cfi_offset 5, -8
 6918              		.cfi_offset 14, -4
 6919 0002 8BB0     		sub	sp, sp, #44
 6920              		.cfi_def_cfa_offset 56
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6921              		.loc 1 2338 45 view .LVU2234
 6922 0004 0C46     		mov	r4, r1
 6923 0006 0546     		mov	r5, r0
2339:src/display.c **** 
 6924              		.loc 1 2339 28 view .LVU2235
 6925 0008 FFF7FEFF 		bl	get_reg_n
 6926              	.LVL807:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6927              		.loc 1 2341 6 view .LVU2236
 6928 000c 154B     		ldr	r3, .L692
 6929 000e 1B68     		ldr	r3, [r3]
 6930 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6931              	.LVL808:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6932              		.loc 1 2341 2 is_stmt 1 view .LVU2237
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6933              		.loc 1 2341 5 is_stmt 0 view .LVU2238
 6934 0014 D207     		lsls	r2, r2, #31
 6935 0016 1DD4     		bmi	.L690
2344:src/display.c **** 	  decNumber x;
 6936              		.loc 1 2344 7 is_stmt 1 view .LVU2239
2344:src/display.c **** 	  decNumber x;
 6937              		.loc 1 2344 10 is_stmt 0 view .LVU2240
 6938 0018 44B1     		cbz	r4, .L691
 6939              	.L688:
2355:src/display.c ****       }
 6940              		.loc 1 2355 4 is_stmt 1 view .LVU2241
2355:src/display.c ****       }
 6941              		.loc 1 2355 24 is_stmt 0 view .LVU2242
 6942 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2355:src/display.c ****       }
 6943              		.loc 1 2355 4 view .LVU2243
 6944 001e 2146     		mov	r1, r4
 6945 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6946 0024 FFF7FEFF 		bl	set_x
 6947              	.LVL809:
ARM GAS  /tmp/ccPv3rzq.s 			page 221


2356:src/display.c **** 
 6948              		.loc 1 2356 7 view .LVU2244
 6949 0028 0BB0     		add	sp, sp, #44
 6950              		.cfi_remember_state
 6951              		.cfi_def_cfa_offset 12
 6952              		@ sp needed
 6953 002a 30BD     		pop	{r4, r5, pc}
 6954              	.LVL810:
 6955              	.L691:
 6956              		.cfi_restore_state
2344:src/display.c **** 	  decNumber x;
 6957              		.loc 1 2344 32 discriminator 1 view .LVU2245
 6958 002c 0E4A     		ldr	r2, .L692+4
2344:src/display.c **** 	  decNumber x;
 6959              		.loc 1 2344 23 discriminator 1 view .LVU2246
 6960 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6961 0030 012A     		cmp	r2, #1
 6962 0032 F2D9     		bls	.L688
 6963              	.LVL811:
 6964              	.LBB445:
 6965              	.LBI445:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6966              		.loc 1 2338 12 is_stmt 1 view .LVU2247
 6967              	.LBB446:
 6968              	.LBB447:
2345:src/display.c **** 	  int s;
 6969              		.loc 1 2345 4 view .LVU2248
2346:src/display.c **** 	  unsigned long long int v;
 6970              		.loc 1 2346 4 view .LVU2249
2347:src/display.c **** 
 6971              		.loc 1 2347 4 view .LVU2250
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6972              		.loc 1 2349 4 view .LVU2251
 6973 0034 2946     		mov	r1, r5
 6974 0036 01A8     		add	r0, sp, #4
 6975              	.LVL812:
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6976              		.loc 1 2349 4 is_stmt 0 view .LVU2252
 6977 0038 FFF7FEFF 		bl	getRegister
 6978              	.LVL813:
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6979              		.loc 1 2350 4 is_stmt 1 view .LVU2253
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6980              		.loc 1 2350 8 is_stmt 0 view .LVU2254
 6981 003c 01A8     		add	r0, sp, #4
 6982 003e 6946     		mov	r1, sp
 6983 0040 FFF7FEFF 		bl	dn_to_ull
 6984              	.LVL814:
2351:src/display.c **** 	}
 6985              		.loc 1 2351 4 is_stmt 1 view .LVU2255
 6986 0044 009A     		ldr	r2, [sp]
 6987 0046 FFF7FEFF 		bl	build_value
 6988              	.LVL815:
2351:src/display.c **** 	}
 6989              		.loc 1 2351 4 is_stmt 0 view .LVU2256
 6990 004a 2246     		mov	r2, r4
 6991 004c FFF7FEFF 		bl	set_int_x
ARM GAS  /tmp/ccPv3rzq.s 			page 222


 6992              	.LVL816:
 6993              	.LBE447:
 6994              	.LBE446:
 6995              	.LBE445:
2356:src/display.c **** 
 6996              		.loc 1 2356 7 view .LVU2257
 6997 0050 0BB0     		add	sp, sp, #44
 6998              		.cfi_remember_state
 6999              		.cfi_def_cfa_offset 12
 7000              		@ sp needed
 7001 0052 30BD     		pop	{r4, r5, pc}
 7002              	.LVL817:
 7003              	.L690:
 7004              		.cfi_restore_state
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7005              		.loc 1 2342 4 is_stmt 1 view .LVU2258
 7006 0054 2846     		mov	r0, r5
 7007              	.LVL818:
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7008              		.loc 1 2342 4 is_stmt 0 view .LVU2259
 7009 0056 FFF7FEFF 		bl	get_reg_n_int
 7010              	.LVL819:
 7011 005a 2246     		mov	r2, r4
 7012 005c FFF7FEFF 		bl	set_int_x
 7013              	.LVL820:
2356:src/display.c **** 
 7014              		.loc 1 2356 7 view .LVU2260
 7015 0060 0BB0     		add	sp, sp, #44
 7016              		.cfi_def_cfa_offset 12
 7017              		@ sp needed
 7018 0062 30BD     		pop	{r4, r5, pc}
 7019              	.LVL821:
 7020              	.L693:
2356:src/display.c **** 
 7021              		.loc 1 2356 7 view .LVU2261
 7022              		.align	2
 7023              	.L692:
 7024 0064 00000000 		.word	main_ram
 7025 0068 00000000 		.word	StateWhileOn
 7026              		.cfi_endproc
 7027              	.LFE28:
 7029              		.section	.text.set_status_right,"ax",%progbits
 7030              		.align	1
 7031              		.p2align 2,,3
 7032              		.syntax unified
 7033              		.thumb
 7034              		.thumb_func
 7035              		.fpu fpv4-sp-d16
 7037              	set_status_right:
 7038              	.LVL822:
 7039              	.LFB48:
3524:src/display.c ****       static void set_status_top(const char *str) {
3525:src/display.c **** 	if (no_status_top) return;
3526:src/display.c **** 	if (State2.runmode) {
3527:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3528:src/display.c **** 	}
3529:src/display.c **** 	else {
ARM GAS  /tmp/ccPv3rzq.s 			page 223


3530:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3531:src/display.c **** 	}
3532:src/display.c ****       }
3533:src/display.c **** #ifdef TOP_ROW
3534:src/display.c ****       static void set_status_top_always(const char *str) {
3535:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3536:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3537:src/display.c ****       }
3538:src/display.c **** #endif
3539:src/display.c **** 
3540:src/display.c ****       /*
3541:src/display.c ****        *  Display messages (global function)
3542:src/display.c ****        */
3543:src/display.c ****       extern void message(const char *str1, const char *str2)
3544:src/display.c ****       {
3545:src/display.c **** 	State2.disp_freeze = 0;
3546:src/display.c **** 	State2.disp_small = 0;
3547:src/display.c **** 	WasDataEntry = 0;
3548:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3549:src/display.c **** 	  // Complete redraw necessary
3550:src/display.c **** 	  DispMsg = str1;
3551:src/display.c **** 	  display();
3552:src/display.c **** 	}
3553:src/display.c **** 	else {
3554:src/display.c **** 	  if ( str2 != NULL ) {
3555:src/display.c **** 	    reset_disp();
3556:src/display.c **** 	    ShowRPN = 0;
3557:src/display.c **** 	    set_annunciators();
3558:src/display.c **** 	    set_digits_string( str2, 0 );
3559:src/display.c **** 	  }
3560:src/display.c **** 	  set_status( str1 );
3561:src/display.c **** 	  finish_display();// message
3562:src/display.c **** 	}
3563:src/display.c ****       }
3564:src/display.c **** 
3565:src/display.c **** #ifdef INCLUDE_STOPWATCH
3566:src/display.c **** 
3567:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3568:src/display.c **** 	int j = SEGS_EXP_BASE;
3569:src/display.c **** 	for (; *exponent!=0; exponent++) {
3570:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3571:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3572:src/display.c **** 	}
3573:src/display.c ****       }
3574:src/display.c **** 
3575:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3576:src/display.c ****       {
3577:src/display.c **** 	reset_disp();
3578:src/display.c **** 	set_dot(DEG);
3579:src/display.c **** 	set_digits_string( str2, 0 );
3580:src/display.c **** 	State2.disp_small = force_small;
3581:src/display.c **** 	if( exponent!=NULL ) {
3582:src/display.c **** 	  stopwatch_exponent(exponent);
3583:src/display.c **** 	}
3584:src/display.c **** 	set_status( str1 );
3585:src/display.c **** 	finish_display();
3586:src/display.c ****       }
ARM GAS  /tmp/ccPv3rzq.s 			page 224


3587:src/display.c **** 
3588:src/display.c **** 
3589:src/display.c **** #endif // INCLUDE_STOPWATCH
3590:src/display.c **** 
3591:src/display.c ****       /* Display the right hand characters from the given string.
3592:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3593:src/display.c ****        * and reduce font size if required.
3594:src/display.c ****        */
3595:src/display.c ****       static void set_status_right(const char *str) {
 7040              		.loc 1 3595 53 is_stmt 1 view -0
 7041              		.cfi_startproc
 7042              		@ args = 0, pretend = 0, frame = 0
 7043              		@ frame_needed = 0, uses_anonymous_args = 0
3596:src/display.c **** 	unsigned int x = 0;
 7044              		.loc 1 3596 2 view .LVU2263
3597:src/display.c **** 	const char *p;
 7045              		.loc 1 3597 2 view .LVU2264
3598:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7046              		.loc 1 3598 2 view .LVU2265
3595:src/display.c **** 	unsigned int x = 0;
 7047              		.loc 1 3595 53 is_stmt 0 view .LVU2266
 7048 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7049              		.cfi_def_cfa_offset 28
 7050              		.cfi_offset 4, -28
 7051              		.cfi_offset 5, -24
 7052              		.cfi_offset 6, -20
 7053              		.cfi_offset 7, -16
 7054              		.cfi_offset 8, -12
 7055              		.cfi_offset 9, -8
 7056              		.cfi_offset 14, -4
 7057              		.loc 1 3598 23 view .LVU2267
 7058 0004 194B     		ldr	r3, .L709
 7059              		.loc 1 3598 41 view .LVU2268
 7060 0006 93F91630 		ldrsb	r3, [r3, #22]
 7061 000a 002B     		cmp	r3, #0
3595:src/display.c **** 	unsigned int x = 0;
 7062              		.loc 1 3595 53 view .LVU2269
 7063 000c 83B0     		sub	sp, sp, #12
 7064              		.cfi_def_cfa_offset 40
3595:src/display.c **** 	unsigned int x = 0;
 7065              		.loc 1 3595 53 view .LVU2270
 7066 000e 0646     		mov	r6, r0
 7067              		.loc 1 3598 41 view .LVU2271
 7068 0010 23DA     		bge	.L708
 7069              	.LVL823:
 7070              	.L695:
 7071              		.loc 1 3598 12 view .LVU2272
 7072 0012 4FF00108 		mov	r8, #1
3599:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7073              		.loc 1 3599 36 view .LVU2273
 7074 0016 4FF48077 		mov	r7, #256
 7075              	.L696:
 7076              	.LVL824:
3600:src/display.c **** 
3601:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7077              		.loc 1 3601 2 is_stmt 1 discriminator 4 view .LVU2274
 7078              		.loc 1 3601 14 discriminator 4 view .LVU2275
ARM GAS  /tmp/ccPv3rzq.s 			page 225


 7079              		.loc 1 3601 2 is_stmt 0 discriminator 4 view .LVU2276
 7080 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7081 001c 3446     		mov	r4, r6
 7082 001e 1BB1     		cbz	r3, .L697
 7083              	.LVL825:
 7084              	.L698:
 7085              		.loc 1 3601 30 is_stmt 1 discriminator 3 view .LVU2277
 7086              		.loc 1 3601 26 discriminator 3 view .LVU2278
 7087              		.loc 1 3601 14 discriminator 3 view .LVU2279
 7088              		.loc 1 3601 2 is_stmt 0 discriminator 3 view .LVU2280
 7089 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7090              	.LVL826:
 7091              		.loc 1 3601 2 discriminator 3 view .LVU2281
 7092 0024 002B     		cmp	r3, #0
 7093 0026 FBD1     		bne	.L698
 7094              	.L697:
3596:src/display.c **** 	const char *p;
 7095              		.loc 1 3596 15 view .LVU2282
 7096 0028 0025     		movs	r5, #0
 7097 002a 06E0     		b	.L699
 7098              	.LVL827:
 7099              	.L700:
 7100              	.LBB448:
3602:src/display.c **** 	while (--p >= str) {
3603:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7101              		.loc 1 3603 27 view .LVU2283
 7102 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3604:src/display.c **** 
3605:src/display.c **** 	  x += charlengths(c);
 7103              		.loc 1 3605 9 view .LVU2284
 7104 002e 3844     		add	r0, r0, r7
 7105 0030 FFF7FEFF 		bl	charlengths
 7106              	.LVL828:
 7107              		.loc 1 3605 6 view .LVU2285
 7108 0034 0544     		add	r5, r5, r0
 7109              	.LVL829:
3606:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7110              		.loc 1 3606 4 is_stmt 1 view .LVU2286
 7111              		.loc 1 3606 7 is_stmt 0 view .LVU2287
 7112 0036 4B2D     		cmp	r5, #75
 7113 0038 03D8     		bhi	.L701
 7114              	.LVL830:
 7115              	.L699:
3603:src/display.c **** 
 7116              		.loc 1 3603 4 is_stmt 1 view .LVU2288
3603:src/display.c **** 
 7117              		.loc 1 3603 4 is_stmt 0 view .LVU2289
 7118              	.LBE448:
3602:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7119              		.loc 1 3602 8 is_stmt 1 view .LVU2290
 7120 003a A146     		mov	r9, r4
 7121 003c 013C     		subs	r4, r4, #1
 7122              	.LVL831:
 7123              	.LBB449:
3605:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7124              		.loc 1 3605 4 view .LVU2291
3605:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
ARM GAS  /tmp/ccPv3rzq.s 			page 226


 7125              		.loc 1 3605 4 is_stmt 0 view .LVU2292
 7126              	.LBE449:
3602:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7127              		.loc 1 3602 8 view .LVU2293
 7128 003e A642     		cmp	r6, r4
 7129 0040 F4D9     		bls	.L700
 7130              	.LVL832:
 7131              	.L701:
3607:src/display.c **** 	    break;
3608:src/display.c **** 	}
3609:src/display.c **** 	set_status_sized(p+1, toolarge);
 7132              		.loc 1 3609 2 is_stmt 1 view .LVU2294
 7133              	.LBB450:
 7134              	.LBI450:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7135              		.loc 1 3379 19 view .LVU2295
 7136              	.LBB451:
3380:src/display.c ****       }
 7137              		.loc 1 3380 2 view .LVU2296
 7138 0042 40F24A23 		movw	r3, #586
 7139 0046 0093     		str	r3, [sp]
 7140 0048 4146     		mov	r1, r8
 7141 004a 4846     		mov	r0, r9
 7142 004c 8E23     		movs	r3, #142
 7143 004e 4A22     		movs	r2, #74
 7144 0050 FFF7FEFF 		bl	s_s_sized
 7145              	.LVL833:
3380:src/display.c ****       }
 7146              		.loc 1 3380 2 is_stmt 0 view .LVU2297
 7147              	.LBE451:
 7148              	.LBE450:
3610:src/display.c ****       }
 7149              		.loc 1 3610 7 view .LVU2298
 7150 0054 03B0     		add	sp, sp, #12
 7151              		.cfi_remember_state
 7152              		.cfi_def_cfa_offset 28
 7153              		@ sp needed
 7154 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7155              	.LVL834:
 7156              	.L708:
 7157              		.cfi_restore_state
 7158              	.LBB452:
 7159              	.LBI452:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7160              		.loc 1 3511 18 is_stmt 1 view .LVU2299
 7161              	.LBB453:
3512:src/display.c ****       }
 7162              		.loc 1 3512 2 view .LVU2300
3512:src/display.c ****       }
 7163              		.loc 1 3512 9 is_stmt 0 view .LVU2301
 7164 005a 0021     		movs	r1, #0
 7165 005c FFF7FEFF 		bl	pixel_length
 7166              	.LVL835:
3512:src/display.c ****       }
 7167              		.loc 1 3512 9 view .LVU2302
 7168              	.LBE453:
 7169              	.LBE452:
ARM GAS  /tmp/ccPv3rzq.s 			page 227


3598:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7170              		.loc 1 3598 41 view .LVU2303
 7171 0060 4B28     		cmp	r0, #75
 7172 0062 D6DC     		bgt	.L695
3598:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7173              		.loc 1 3598 12 view .LVU2304
 7174 0064 4FF00008 		mov	r8, #0
3599:src/display.c **** 
 7175              		.loc 1 3599 36 view .LVU2305
 7176 0068 4746     		mov	r7, r8
 7177 006a D6E7     		b	.L696
 7178              	.L710:
 7179              		.align	2
 7180              	.L709:
 7181 006c 00000000 		.word	StateWhileOn
 7182              		.cfi_endproc
 7183              	.LFE48:
 7185              		.section	.text.set_status_top.part.0,"ax",%progbits
 7186              		.align	1
 7187              		.p2align 2,,3
 7188              		.syntax unified
 7189              		.thumb
 7190              		.thumb_func
 7191              		.fpu fpv4-sp-d16
 7193              	set_status_top.part.0:
 7194              	.LVL836:
 7195              	.LFB57:
3524:src/display.c **** 	if (no_status_top) return;
 7196              		.loc 1 3524 19 is_stmt 1 view -0
 7197              		.cfi_startproc
 7198              		@ args = 0, pretend = 0, frame = 0
 7199              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7200              		.loc 1 3526 2 view .LVU2307
3524:src/display.c **** 	if (no_status_top) return;
 7201              		.loc 1 3524 19 is_stmt 0 view .LVU2308
 7202 0000 10B5     		push	{r4, lr}
 7203              		.cfi_def_cfa_offset 8
 7204              		.cfi_offset 4, -8
 7205              		.cfi_offset 14, -4
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7206              		.loc 1 3526 6 view .LVU2309
 7207 0002 184B     		ldr	r3, .L721
 7208 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7209              		.loc 1 3526 5 view .LVU2310
 7210 0006 13F04001 		ands	r1, r3, #64
3524:src/display.c **** 	if (no_status_top) return;
 7211              		.loc 1 3524 19 view .LVU2311
 7212 000a 82B0     		sub	sp, sp, #8
 7213              		.cfi_def_cfa_offset 16
3524:src/display.c **** 	if (no_status_top) return;
 7214              		.loc 1 3524 19 view .LVU2312
 7215 000c 0446     		mov	r4, r0
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7216              		.loc 1 3526 5 view .LVU2313
 7217 000e 0DD0     		beq	.L712
ARM GAS  /tmp/ccPv3rzq.s 			page 228


3527:src/display.c **** 	}
 7218              		.loc 1 3527 4 is_stmt 1 view .LVU2314
 7219 0010 1A06     		lsls	r2, r3, #24
 7220 0012 18D5     		bpl	.L719
 7221 0014 0121     		movs	r1, #1
 7222              	.LVL837:
 7223              	.L713:
 7224              	.LBB454:
 7225              	.LBI454:
3382:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7226              		.loc 1 3382 19 view .LVU2315
 7227              	.LBB455:
3383:src/display.c ****       }
 7228              		.loc 1 3383 2 view .LVU2316
 7229 0016 4FF45373 		mov	r3, #844
 7230 001a 0093     		str	r3, [sp]
 7231 001c 2046     		mov	r0, r4
 7232 001e 40F24A23 		movw	r3, #586
 7233 0022 2B22     		movs	r2, #43
 7234 0024 FFF7FEFF 		bl	s_s_sized
 7235              	.LVL838:
3383:src/display.c ****       }
 7236              		.loc 1 3383 2 is_stmt 0 view .LVU2317
 7237              	.LBE455:
 7238              	.LBE454:
3532:src/display.c **** #ifdef TOP_ROW
 7239              		.loc 1 3532 7 view .LVU2318
 7240 0028 02B0     		add	sp, sp, #8
 7241              		.cfi_remember_state
 7242              		.cfi_def_cfa_offset 8
 7243              		@ sp needed
 7244 002a 10BD     		pop	{r4, pc}
 7245              	.LVL839:
 7246              	.L712:
 7247              		.cfi_restore_state
3530:src/display.c **** 	}
 7248              		.loc 1 3530 4 is_stmt 1 view .LVU2319
 7249 002c 1B06     		lsls	r3, r3, #24
 7250 002e 12D5     		bpl	.L720
 7251 0030 0121     		movs	r1, #1
 7252              	.LVL840:
 7253              	.L715:
 7254              	.LBB456:
 7255              	.LBI456:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7256              		.loc 1 3379 19 view .LVU2320
 7257              	.LBB457:
3380:src/display.c ****       }
 7258              		.loc 1 3380 2 view .LVU2321
 7259 0032 40F24A23 		movw	r3, #586
 7260 0036 0093     		str	r3, [sp]
 7261 0038 2046     		mov	r0, r4
 7262 003a 8E23     		movs	r3, #142
 7263 003c 4A22     		movs	r2, #74
 7264 003e FFF7FEFF 		bl	s_s_sized
 7265              	.LVL841:
3380:src/display.c ****       }
ARM GAS  /tmp/ccPv3rzq.s 			page 229


 7266              		.loc 1 3380 2 is_stmt 0 view .LVU2322
 7267              	.LBE457:
 7268              	.LBE456:
3532:src/display.c **** #ifdef TOP_ROW
 7269              		.loc 1 3532 7 view .LVU2323
 7270 0042 02B0     		add	sp, sp, #8
 7271              		.cfi_remember_state
 7272              		.cfi_def_cfa_offset 8
 7273              		@ sp needed
 7274 0044 10BD     		pop	{r4, pc}
 7275              	.LVL842:
 7276              	.L719:
 7277              		.cfi_restore_state
 7278              	.LBB458:
 7279              	.LBI458:
3514:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7280              		.loc 1 3514 18 is_stmt 1 view .LVU2324
 7281              	.LBB459:
3515:src/display.c ****       }
 7282              		.loc 1 3515 2 view .LVU2325
3515:src/display.c ****       }
 7283              		.loc 1 3515 9 is_stmt 0 view .LVU2326
 7284 0046 0021     		movs	r1, #0
 7285 0048 FFF7FEFF 		bl	pixel_length
 7286              	.LVL843:
3515:src/display.c ****       }
 7287              		.loc 1 3515 9 view .LVU2327
 7288              	.LBE459:
 7289              	.LBE458:
3527:src/display.c **** 	}
 7290              		.loc 1 3527 4 view .LVU2328
 7291 004c 2C28     		cmp	r0, #44
 7292 004e D4BF     		ite	le
 7293 0050 0021     		movle	r1, #0
 7294 0052 0121     		movgt	r1, #1
 7295 0054 DFE7     		b	.L713
 7296              	.LVL844:
 7297              	.L720:
 7298              	.LBB460:
 7299              	.LBI460:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7300              		.loc 1 3511 18 is_stmt 1 view .LVU2329
 7301              	.LBB461:
3512:src/display.c ****       }
 7302              		.loc 1 3512 2 view .LVU2330
3512:src/display.c ****       }
 7303              		.loc 1 3512 9 is_stmt 0 view .LVU2331
 7304 0056 FFF7FEFF 		bl	pixel_length
 7305              	.LVL845:
3512:src/display.c ****       }
 7306              		.loc 1 3512 9 view .LVU2332
 7307              	.LBE461:
 7308              	.LBE460:
3530:src/display.c **** 	}
 7309              		.loc 1 3530 4 view .LVU2333
 7310 005a 4B28     		cmp	r0, #75
 7311 005c D4BF     		ite	le
ARM GAS  /tmp/ccPv3rzq.s 			page 230


 7312 005e 0021     		movle	r1, #0
 7313 0060 0121     		movgt	r1, #1
 7314 0062 E6E7     		b	.L715
 7315              	.L722:
 7316              		.align	2
 7317              	.L721:
 7318 0064 00000000 		.word	StateWhileOn
 7319              		.cfi_endproc
 7320              	.LFE57:
 7322              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7323              		.align	2
 7324              	.LC2:
 7325 0000 32630600 		.ascii	"2c\006\000"
 7326              		.align	2
 7327              	.LC3:
 7328 0004 07C63C00 		.ascii	"\007\306<\000"
 7329              		.align	2
 7330              	.LC4:
 7331 0008 07876900 		.ascii	"\007\207i\000"
 7332              		.align	2
 7333              	.LC5:
 7334 000c 07C67900 		.ascii	"\007\306y\000"
 7335              		.align	2
 7336              	.LC6:
 7337 0010 07950600 		.ascii	"\007\225\006\000"
 7338              		.align	2
 7339              	.LC7:
 7340 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7340      060600
 7341 001b 00       		.align	2
 7342              	.LC8:
 7343 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7343      060600
 7344 0023 00       		.align	2
 7345              	.LC9:
 7346 0024 07C74400 		.ascii	"\007\307D\000"
 7347              		.align	2
 7348              	.LC10:
 7349 0028 07872000 		.ascii	"\007\207 \000"
 7350              		.align	2
 7351              	.LC11:
 7352 002c 4C656E67 		.ascii	"Length:\000"
 7352      74683A00 
 7353              		.align	2
 7354              	.LC12:
 7355 0034 5265616C 		.ascii	"Real:\000"
 7355      3A00
 7356 003a 0000     		.align	2
 7357              	.LC13:
 7358 003c 416E676C 		.ascii	"Angle:\000"
 7358      653A00
 7359 0043 00       		.align	2
 7360              	.LC14:
 7361 0044 496D6167 		.ascii	"Imag:\000"
 7361      3A00
 7362 004a 0000     		.align	2
 7363              	.LC15:
ARM GAS  /tmp/ccPv3rzq.s 			page 231


 7364 004c 07876A00 		.ascii	"\007\207j\000"
 7365              		.align	2
 7366              	.LC16:
 7367 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7367      0700
 7368 0056 0000     		.align	2
 7369              	.LC17:
 7370 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7370      00
 7371 005d 000000   		.align	2
 7372              	.LC18:
 7373 0060 07C73C00 		.ascii	"\007\307<\000"
 7374              		.align	2
 7375              	.LC19:
 7376 0064 07C77900 		.ascii	"\007\307y\000"
 7377              		.align	2
 7378              	.LC21:
 7379 0068 07E43F00 		.ascii	"\007\344?\000"
 7380              		.section	.text.annunciators,"ax",%progbits
 7381              		.align	1
 7382              		.p2align 2,,3
 7383              		.syntax unified
 7384              		.thumb
 7385              		.thumb_func
 7386              		.fpu fpv4-sp-d16
 7388              	annunciators:
 7389              	.LFB16:
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7390              		.loc 1 533 36 is_stmt 1 view -0
 7391              		.cfi_startproc
 7392              		@ args = 0, pretend = 0, frame = 128
 7393              		@ frame_needed = 0, uses_anonymous_args = 0
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 7394              		.loc 1 535 7 view .LVU2335
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7395              		.loc 1 533 36 is_stmt 0 view .LVU2336
 7396 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7397              		.cfi_def_cfa_offset 28
 7398              		.cfi_offset 4, -28
 7399              		.cfi_offset 5, -24
 7400              		.cfi_offset 6, -20
 7401              		.cfi_offset 7, -16
 7402              		.cfi_offset 8, -12
 7403              		.cfi_offset 9, -8
 7404              		.cfi_offset 14, -4
 547:src/display.c **** #  endif
 7405              		.loc 1 547 38 view .LVU2337
 7406 0004 7F4C     		ldr	r4, .L885
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7407              		.loc 1 533 36 view .LVU2338
 7408 0006 A3B0     		sub	sp, sp, #140
 7409              		.cfi_def_cfa_offset 168
 7410              	.LVL846:
 536:src/display.c ****       int n;
 7411              		.loc 1 536 7 is_stmt 1 view .LVU2339
 537:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7412              		.loc 1 537 7 view .LVU2340
ARM GAS  /tmp/ccPv3rzq.s 			page 232


 538:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7413              		.loc 1 538 7 view .LVU2341
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7414              		.loc 1 539 7 view .LVU2342
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7415              		.loc 1 539 43 is_stmt 0 view .LVU2343
 7416 0008 FFF7FEFF 		bl	cur_shift
 7417              	.LVL847:
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7418              		.loc 1 539 18 view .LVU2344
 7419 000c 7E4B     		ldr	r3, .L885+4
 547:src/display.c **** #  endif
 7420              		.loc 1 547 38 view .LVU2345
 7421 000e 2268     		ldr	r2, [r4]
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7422              		.loc 1 539 18 view .LVU2346
 7423 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7424              	.LVL848:
 547:src/display.c **** #  endif
 7425              		.loc 1 547 7 is_stmt 1 view .LVU2347
 547:src/display.c **** #  endif
 7426              		.loc 1 547 38 is_stmt 0 view .LVU2348
 7427 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7428              		.loc 1 578 7 view .LVU2349
 7429 0018 0CAE     		add	r6, sp, #48
 7430              	.LVL849:
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7431              		.loc 1 578 7 view .LVU2350
 7432 001a 2A22     		movs	r2, #42
 7433 001c 0021     		movs	r1, #0
 7434 001e 3046     		mov	r0, r6
 7435 0020 FFF7FEFF 		bl	xset
 7436              	.LVL850:
 579:src/display.c ****       
 7437              		.loc 1 579 7 view .LVU2351
 7438 0024 2A22     		movs	r2, #42
 7439 0026 0021     		movs	r1, #0
 7440 0028 17A8     		add	r0, sp, #92
 7441              	.LVL851:
 579:src/display.c ****       
 7442              		.loc 1 579 7 view .LVU2352
 7443 002a FFF7FEFF 		bl	xset
 7444              	.LVL852:
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7445              		.loc 1 581 11 view .LVU2353
 7446 002e 2368     		ldr	r3, [r4]
 7447 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7448              		.loc 1 581 10 view .LVU2354
 7449 0034 D107     		lsls	r1, r2, #31
 547:src/display.c **** #  endif
 7450              		.loc 1 547 17 view .LVU2355
 7451 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7452              	.LVL853:
 550:src/display.c **** #  else
 7453              		.loc 1 550 7 is_stmt 1 view .LVU2356
ARM GAS  /tmp/ccPv3rzq.s 			page 233


 555:src/display.c **** #  else
 7454              		.loc 1 555 7 view .LVU2357
 565:src/display.c **** #else
 7455              		.loc 1 565 7 view .LVU2358
 573:src/display.c **** #else
 7456              		.loc 1 573 7 view .LVU2359
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7457              		.loc 1 578 7 view .LVU2360
 579:src/display.c ****       
 7458              		.loc 1 579 7 view .LVU2361
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7459              		.loc 1 581 7 view .LVU2362
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7460              		.loc 1 581 10 is_stmt 0 view .LVU2363
 7461 003a 00F1FD80 		bmi	.L867
 621:src/display.c **** #else
 7462              		.loc 1 621 12 is_stmt 1 view .LVU2364
 621:src/display.c **** #else
 7463              		.loc 1 621 15 is_stmt 0 view .LVU2365
 7464 003e 002F     		cmp	r7, #0
 7465 0040 00F09A80 		beq	.L868
 7466              	.L738:
 707:src/display.c **** 	  *p2++ = '\007';
 7467              		.loc 1 707 2 is_stmt 1 view .LVU2366
 707:src/display.c **** 	  *p2++ = '\007';
 7468              		.loc 1 707 6 is_stmt 0 view .LVU2367
 7469 0044 714D     		ldr	r5, .L885+8
 7470 0046 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 707:src/display.c **** 	  *p2++ = '\007';
 7471              		.loc 1 707 5 view .LVU2368
 7472 0048 9A07     		lsls	r2, r3, #30
 7473 004a 40F1B081 		bpl	.L747
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7474              		.loc 1 708 4 is_stmt 1 view .LVU2369
 7475              	.LVL854:
 709:src/display.c **** 	  *p2++ = shift_char;
 7476              		.loc 1 709 4 view .LVU2370
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7477              		.loc 1 708 10 is_stmt 0 view .LVU2371
 7478 004e 4EF20742 		movw	r2, #58375
 711:src/display.c **** 	}
 7479              		.loc 1 711 10 view .LVU2372
 7480 0052 1423     		movs	r3, #20
 710:src/display.c **** 	  *p2++ = '\024';
 7481              		.loc 1 710 10 view .LVU2373
 7482 0054 8DF85E80 		strb	r8, [sp, #94]
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7483              		.loc 1 708 10 view .LVU2374
 7484 0058 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 710:src/display.c **** 	  *p2++ = '\024';
 7485              		.loc 1 710 4 is_stmt 1 view .LVU2375
 7486              	.LVL855:
 711:src/display.c **** 	}
 7487              		.loc 1 711 4 view .LVU2376
 711:src/display.c **** 	}
 7488              		.loc 1 711 10 is_stmt 0 view .LVU2377
 7489 005c 8DF85F30 		strb	r3, [sp, #95]
ARM GAS  /tmp/ccPv3rzq.s 			page 234


 711:src/display.c **** 	}
 7490              		.loc 1 711 7 view .LVU2378
 7491 0060 0DF16008 		add	r8, sp, #96
 7492              	.LVL856:
 7493              	.L748:
 720:src/display.c **** 	  *p2++ = '\007';
 7494              		.loc 1 720 2 is_stmt 1 view .LVU2379
 720:src/display.c **** 	  *p2++ = '\007';
 7495              		.loc 1 720 6 is_stmt 0 view .LVU2380
 7496 0064 FFF7FEFF 		bl	get_trig_mode
 7497              	.LVL857:
 721:src/display.c **** 	  *p2++ = '\207';
 7498              		.loc 1 721 10 view .LVU2381
 7499 0068 0723     		movs	r3, #7
 720:src/display.c **** 	  *p2++ = '\007';
 7500              		.loc 1 720 5 view .LVU2382
 7501 006a 0228     		cmp	r0, #2
 722:src/display.c **** 	  *p2++ = '\007';	    
 7502              		.loc 1 722 10 view .LVU2383
 7503 006c 4FF08702 		mov	r2, #135
 721:src/display.c **** 	  *p2++ = '\207';
 7504              		.loc 1 721 10 view .LVU2384
 7505 0070 88F80030 		strb	r3, [r8]
 720:src/display.c **** 	  *p2++ = '\007';
 7506              		.loc 1 720 5 view .LVU2385
 7507 0074 00F02082 		beq	.L869
 726:src/display.c **** 	  *p2++ = '\207';
 7508              		.loc 1 726 4 is_stmt 1 view .LVU2386
 7509              	.LVL858:
 727:src/display.c **** 	  *p2++ = ' ';
 7510              		.loc 1 727 4 view .LVU2387
 728:src/display.c **** 	}
 7511              		.loc 1 728 10 is_stmt 0 view .LVU2388
 7512 0078 2023     		movs	r3, #32
 727:src/display.c **** 	  *p2++ = ' ';
 7513              		.loc 1 727 10 view .LVU2389
 7514 007a 88F80120 		strb	r2, [r8, #1]
 728:src/display.c **** 	}
 7515              		.loc 1 728 4 is_stmt 1 view .LVU2390
 728:src/display.c **** 	}
 7516              		.loc 1 728 10 is_stmt 0 view .LVU2391
 7517 007e 88F80230 		strb	r3, [r8, #2]
 728:src/display.c **** 	}
 7518              		.loc 1 728 7 view .LVU2392
 7519 0082 08F10308 		add	r8, r8, #3
 7520              	.LVL859:
 7521              	.L750:
 732:src/display.c **** 	p2 = scopy(p2, q);
 7522              		.loc 1 732 2 is_stmt 1 view .LVU2393
 732:src/display.c **** 	p2 = scopy(p2, q);
 7523              		.loc 1 732 7 is_stmt 0 view .LVU2394
 7524 0086 FFF7FEFF 		bl	is_dblmode
 7525              	.LVL860:
 732:src/display.c **** 	p2 = scopy(p2, q);
 7526              		.loc 1 732 34 view .LVU2395
 7527 008a 614B     		ldr	r3, .L885+12
 7528 008c 614A     		ldr	r2, .L885+16
ARM GAS  /tmp/ccPv3rzq.s 			page 235


 732:src/display.c **** 	p2 = scopy(p2, q);
 7529              		.loc 1 732 7 view .LVU2396
 7530 008e 0146     		mov	r1, r0
 7531              	.LVL861:
 733:src/display.c **** #else
 7532              		.loc 1 733 2 is_stmt 1 view .LVU2397
 733:src/display.c **** #else
 7533              		.loc 1 733 7 is_stmt 0 view .LVU2398
 7534 0090 0029     		cmp	r1, #0
 7535 0092 14BF     		ite	ne
 7536 0094 1146     		movne	r1, r2
 7537 0096 1946     		moveq	r1, r3
 7538              	.LVL862:
 733:src/display.c **** #else
 7539              		.loc 1 733 7 view .LVU2399
 7540 0098 4046     		mov	r0, r8
 7541 009a FFF7FEFF 		bl	scopy
 7542              	.LVL863:
 749:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7543              		.loc 1 749 16 view .LVU2400
 7544 009e 2368     		ldr	r3, [r4]
 7545 00a0 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7546 00a4 C1F30111 		ubfx	r1, r1, #4, #2
 7547              	.LVL864:
 749:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7548              		.loc 1 749 2 is_stmt 1 view .LVU2401
 7549 00a8 0129     		cmp	r1, #1
 7550 00aa 00F00C82 		beq	.L803
 7551 00ae 5A4B     		ldr	r3, .L885+20
 7552 00b0 5A4A     		ldr	r2, .L885+24
 7553 00b2 0229     		cmp	r1, #2
 7554 00b4 14BF     		ite	ne
 7555 00b6 1946     		movne	r1, r3
 7556 00b8 1146     		moveq	r1, r2
 7557              	.L752:
 7558              	.LVL865:
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7559              		.loc 1 766 2 view .LVU2402
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7560              		.loc 1 766 6 is_stmt 0 view .LVU2403
 7561 00ba 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7562              		.loc 1 766 5 view .LVU2404
 7563 00bc 5B07     		lsls	r3, r3, #29
 767:src/display.c **** 	} // no need to skip y display with arrow here
 7564              		.loc 1 767 4 is_stmt 1 view .LVU2405
 7565 00be 48BF     		it	mi
 7566 00c0 5749     		ldrmi	r1, .L885+28
 7567              	.LVL866:
 770:src/display.c **** 	}
 7568              		.loc 1 770 4 view .LVU2406
 770:src/display.c **** 	}
 7569              		.loc 1 770 9 is_stmt 0 view .LVU2407
 7570 00c2 FFF7FEFF 		bl	scopy
 7571              	.LVL867:
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7572              		.loc 1 774 2 is_stmt 1 view .LVU2408
ARM GAS  /tmp/ccPv3rzq.s 			page 236


 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7573              		.loc 1 774 18 is_stmt 0 view .LVU2409
 7574 00c6 2368     		ldr	r3, [r4]
 7575 00c8 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7576              		.loc 1 774 5 view .LVU2410
 7577 00cc 13F0060F 		tst	r3, #6
 7578 00d0 04D0     		beq	.L755
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7579              		.loc 1 774 32 discriminator 1 view .LVU2411
 7580 00d2 03F04102 		and	r2, r3, #65
 7581 00d6 412A     		cmp	r2, #65
 7582 00d8 00F01882 		beq	.L870
 7583              	.L755:
 784:src/display.c **** 	  q = "\007\307<";
 7584              		.loc 1 784 7 is_stmt 1 view .LVU2412
 784:src/display.c **** 	  q = "\007\307<";
 7585              		.loc 1 784 22 is_stmt 0 view .LVU2413
 7586 00dc DFF85091 		ldr	r9, .L885+44
 7587 00e0 D9F80020 		ldr	r2, [r9]
 784:src/display.c **** 	  q = "\007\307<";
 7588              		.loc 1 784 10 view .LVU2414
 7589 00e4 012A     		cmp	r2, #1
 7590 00e6 00F07481 		beq	.L758
 784:src/display.c **** 	  q = "\007\307<";
 7591              		.loc 1 784 43 discriminator 1 view .LVU2415
 7592 00ea 03F0C101 		and	r1, r3, #193
 7593 00ee C129     		cmp	r1, #193
 7594 00f0 00F06F81 		beq	.L758
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7595              		.loc 1 788 7 is_stmt 1 view .LVU2416
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7596              		.loc 1 788 11 is_stmt 0 view .LVU2417
 7597 00f4 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7598              		.loc 1 788 10 view .LVU2418
 7599 00f6 11F0C00F 		tst	r1, #192
 7600 00fa 00F06381 		beq	.L871
 7601              	.L761:
 789:src/display.c **** 	  p = scopy(p, q);
 7602              		.loc 1 789 4 is_stmt 1 view .LVU2419
 789:src/display.c **** 	  p = scopy(p, q);
 7603              		.loc 1 789 28 is_stmt 0 view .LVU2420
 7604 00fe 494A     		ldr	r2, .L885+32
 7605 0100 4949     		ldr	r1, .L885+36
 7606 0102 13F0200F 		tst	r3, #32
 7607              	.LVL868:
 790:src/display.c **** 	}
 7608              		.loc 1 790 4 is_stmt 1 view .LVU2421
 790:src/display.c **** 	}
 7609              		.loc 1 790 8 is_stmt 0 view .LVU2422
 7610 0106 08BF     		it	eq
 7611 0108 1146     		moveq	r1, r2
 7612              	.LVL869:
 790:src/display.c **** 	}
 7613              		.loc 1 790 8 view .LVU2423
 7614 010a 3046     		mov	r0, r6
ARM GAS  /tmp/ccPv3rzq.s 			page 237


 7615 010c FFF7FEFF 		bl	scopy
 7616              	.LVL870:
 790:src/display.c **** 	}
 7617              		.loc 1 790 8 view .LVU2424
 7618 0110 D9F80020 		ldr	r2, [r9]
 7619 0114 8046     		mov	r8, r0
 7620              	.LVL871:
 7621              	.L760:
 806:src/display.c **** 	    q = "\007\307y";
 7622              		.loc 1 806 4 is_stmt 1 view .LVU2425
 806:src/display.c **** 	    q = "\007\307y";
 7623              		.loc 1 806 7 is_stmt 0 view .LVU2426
 7624 0116 022A     		cmp	r2, #2
 7625 0118 00F0D781 		beq	.L872
 7626              	.L763:
 812:src/display.c **** 	  decNumber y;
 7627              		.loc 1 812 2 is_stmt 1 view .LVU2427
 812:src/display.c **** 	  decNumber y;
 7628              		.loc 1 812 6 is_stmt 0 view .LVU2428
 7629 011c AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 812:src/display.c **** 	  decNumber y;
 7630              		.loc 1 812 5 view .LVU2429
 7631 011e 5906     		lsls	r1, r3, #25
 7632 0120 60D5     		bpl	.L791
 7633              	.LBB472:
 813:src/display.c **** 	display_yreg:
 7634              		.loc 1 813 4 is_stmt 1 view .LVU2430
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7635              		.loc 1 820 4 view .LVU2431
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7636              		.loc 1 820 8 is_stmt 0 view .LVU2432
 7637 0122 2368     		ldr	r3, [r4]
 7638 0124 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7639              		.loc 1 820 7 view .LVU2433
 7640 0128 D207     		lsls	r2, r2, #31
 7641 012a 40F1E380 		bpl	.L765
 7642              	.L880:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7643              		.loc 1 821 6 is_stmt 1 view .LVU2434
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7644              		.loc 1 821 44 is_stmt 0 view .LVU2435
 7645 012e DFF80491 		ldr	r9, .L885+48
 7646 0132 D9F80030 		ldr	r3, [r9]
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7647              		.loc 1 821 6 view .LVU2436
 7648 0136 632B     		cmp	r3, #99
 7649 0138 00F32A82 		bgt	.L873
 7650              	.L766:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7651              		.loc 1 821 6 discriminator 5 view .LVU2437
 7652 013c 581C     		adds	r0, r3, #1
 7653              	.L770:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7654              		.loc 1 821 6 discriminator 6 view .LVU2438
 7655 013e FFF7FEFF 		bl	get_reg_n_int
 7656              	.LVL872:
ARM GAS  /tmp/ccPv3rzq.s 			page 238


 7657 0142 4246     		mov	r2, r8
 7658 0144 FFF7FEFF 		bl	set_int_x
 7659              	.LVL873:
 824:src/display.c **** 	  }
 7660              		.loc 1 824 6 is_stmt 1 discriminator 6 view .LVU2439
 7661              	.LBE472:
 913:src/display.c ****       set_status_top_always(buf2);
 7662              		.loc 1 913 7 discriminator 6 view .LVU2440
 913:src/display.c ****       set_status_top_always(buf2);
 7663              		.loc 1 913 11 is_stmt 0 discriminator 6 view .LVU2441
 7664 0148 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 913:src/display.c ****       set_status_top_always(buf2);
 7665              		.loc 1 913 10 discriminator 6 view .LVU2442
 7666 014a 5906     		lsls	r1, r3, #25
 7667 014c 4AD5     		bpl	.L791
 7668              	.LVL874:
 7669              	.L878:
 913:src/display.c ****       set_status_top_always(buf2);
 7670              		.loc 1 913 27 is_stmt 1 discriminator 1 view .LVU2443
 7671 014e 3046     		mov	r0, r6
 7672 0150 FFF7FEFF 		bl	set_status
 7673              	.LVL875:
 914:src/display.c ****       
 7674              		.loc 1 914 7 discriminator 1 view .LVU2444
 7675              	.LBB479:
 7676              	.LBI479:
3534:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 7677              		.loc 1 3534 19 discriminator 1 view .LVU2445
 7678              	.LBB480:
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7679              		.loc 1 3535 2 discriminator 1 view .LVU2446
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7680              		.loc 1 3535 6 is_stmt 0 discriminator 1 view .LVU2447
 7681 0154 354B     		ldr	r3, .L885+40
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7682              		.loc 1 3535 5 discriminator 1 view .LVU2448
 7683 0156 B3F90030 		ldrsh	r3, [r3]
 7684 015a 002B     		cmp	r3, #0
 7685 015c 40F0A581 		bne	.L790
 7686 0160 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
3536:src/display.c ****       }
 7687              		.loc 1 3536 2 is_stmt 1 view .LVU2449
 7688 0162 1B06     		lsls	r3, r3, #24
 7689 0164 40D4     		bmi	.L811
 7690              	.LVL876:
 7691              	.L879:
 7692              	.LBB481:
 7693              	.LBI481:
3514:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7694              		.loc 1 3514 18 view .LVU2450
 7695              	.LBB482:
3515:src/display.c ****       }
 7696              		.loc 1 3515 2 view .LVU2451
3515:src/display.c ****       }
 7697              		.loc 1 3515 9 is_stmt 0 view .LVU2452
 7698 0166 0021     		movs	r1, #0
 7699 0168 17A8     		add	r0, sp, #92
ARM GAS  /tmp/ccPv3rzq.s 			page 239


 7700              	.LVL877:
3515:src/display.c ****       }
 7701              		.loc 1 3515 9 view .LVU2453
 7702 016a FFF7FEFF 		bl	pixel_length
 7703              	.LVL878:
3515:src/display.c ****       }
 7704              		.loc 1 3515 9 view .LVU2454
 7705              	.LBE482:
 7706              	.LBE481:
3536:src/display.c ****       }
 7707              		.loc 1 3536 2 view .LVU2455
 7708 016e 2C28     		cmp	r0, #44
 7709 0170 D4BF     		ite	le
 7710 0172 0021     		movle	r1, #0
 7711 0174 0121     		movgt	r1, #1
 7712 0176 38E0     		b	.L793
 7713              	.LVL879:
 7714              	.L868:
3536:src/display.c ****       }
 7715              		.loc 1 3536 2 view .LVU2456
 7716              	.LBE480:
 7717              	.LBE479:
 621:src/display.c **** #else
 7718              		.loc 1 621 35 discriminator 1 view .LVU2457
 7719 0178 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 621:src/display.c **** #else
 7720              		.loc 1 621 32 discriminator 1 view .LVU2458
 7721 017c 03F04103 		and	r3, r3, #65
 7722 0180 412B     		cmp	r3, #65
 7723 0182 3FF45FAF 		beq	.L738
 642:src/display.c **** 	    *p2++ = shift_char;
 7724              		.loc 1 642 4 is_stmt 1 view .LVU2459
 642:src/display.c **** 	    *p2++ = shift_char;
 7725              		.loc 1 642 7 is_stmt 0 view .LVU2460
 7726 0186 B8F1200F 		cmp	r8, #32
 7727 018a 00F0CD81 		beq	.L739
 7728              	.L741:
 643:src/display.c **** 	    *p2++ = '\006';
 7729              		.loc 1 643 6 is_stmt 1 view .LVU2461
 7730              	.LVL880:
 644:src/display.c **** 	  }
 7731              		.loc 1 644 12 is_stmt 0 view .LVU2462
 7732 018e 0623     		movs	r3, #6
 643:src/display.c **** 	    *p2++ = '\006';
 7733              		.loc 1 643 12 view .LVU2463
 7734 0190 8DF85C80 		strb	r8, [sp, #92]
 644:src/display.c **** 	  }
 7735              		.loc 1 644 6 is_stmt 1 view .LVU2464
 7736              	.LVL881:
 644:src/display.c **** 	  }
 7737              		.loc 1 644 12 is_stmt 0 view .LVU2465
 7738 0194 8DF85D30 		strb	r3, [sp, #93]
 644:src/display.c **** 	  }
 7739              		.loc 1 644 9 view .LVU2466
 7740 0198 0DF15E00 		add	r0, sp, #94
 7741              	.LVL882:
 7742              	.L740:
ARM GAS  /tmp/ccPv3rzq.s 			page 240


 650:src/display.c **** 	  *p2++ = ' ';
 7743              		.loc 1 650 2 is_stmt 1 view .LVU2467
 650:src/display.c **** 	  *p2++ = ' ';
 7744              		.loc 1 650 6 is_stmt 0 view .LVU2468
 7745 019c 1B4D     		ldr	r5, .L885+8
 7746 019e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 650:src/display.c **** 	  *p2++ = ' ';
 7747              		.loc 1 650 5 view .LVU2469
 7748 01a0 9A07     		lsls	r2, r3, #30
 7749 01a2 00F19881 		bmi	.L874
 655:src/display.c **** 	  *p2++ = ' ';
 7750              		.loc 1 655 2 is_stmt 1 view .LVU2470
 655:src/display.c **** 	  *p2++ = ' ';
 7751              		.loc 1 655 5 is_stmt 0 view .LVU2471
 7752 01a6 5907     		lsls	r1, r3, #29
 7753 01a8 00F1C981 		bmi	.L875
 661:src/display.c **** 	  if (State2.wascomplex) {
 7754              		.loc 1 661 2 is_stmt 1 view .LVU2472
 661:src/display.c **** 	  if (State2.wascomplex) {
 7755              		.loc 1 661 5 is_stmt 0 view .LVU2473
 7756 01ac B8F1200F 		cmp	r8, #32
 7757 01b0 00F00082 		beq	.L876
 7758              	.L744:
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7759              		.loc 1 678 2 is_stmt 1 view .LVU2474
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7760              		.loc 1 678 16 is_stmt 0 view .LVU2475
 7761 01b4 2368     		ldr	r3, [r4]
 7762 01b6 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7763 01ba C3F30113 		ubfx	r3, r3, #4, #2
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7764              		.loc 1 678 2 view .LVU2476
 7765 01be 012B     		cmp	r3, #1
 7766 01c0 00F00B82 		beq	.L800
 7767 01c4 1449     		ldr	r1, .L885+20
 7768 01c6 154A     		ldr	r2, .L885+24
 7769 01c8 022B     		cmp	r3, #2
 7770 01ca 08BF     		it	eq
 7771 01cc 1146     		moveq	r1, r2
 7772              	.L746:
 7773              	.LVL883:
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7774              		.loc 1 692 2 is_stmt 1 view .LVU2477
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7775              		.loc 1 692 7 is_stmt 0 view .LVU2478
 7776 01ce FFF7FEFF 		bl	scopy
 7777              	.LVL884:
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7778              		.loc 1 692 7 view .LVU2479
 7779 01d2 0446     		mov	r4, r0
 7780              	.LVL885:
 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7781              		.loc 1 694 2 is_stmt 1 view .LVU2480
 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7782              		.loc 1 694 6 is_stmt 0 view .LVU2481
 7783 01d4 FFF7FEFF 		bl	get_trig_mode
 7784              	.LVL886:
ARM GAS  /tmp/ccPv3rzq.s 			page 241


 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7785              		.loc 1 694 5 view .LVU2482
 7786 01d8 0228     		cmp	r0, #2
 7787 01da 00F00282 		beq	.L877
 7788              	.LVL887:
 7789              	.L737:
 913:src/display.c ****       set_status_top_always(buf2);
 7790              		.loc 1 913 7 is_stmt 1 view .LVU2483
 913:src/display.c ****       set_status_top_always(buf2);
 7791              		.loc 1 913 11 is_stmt 0 view .LVU2484
 7792 01de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 913:src/display.c ****       set_status_top_always(buf2);
 7793              		.loc 1 913 10 view .LVU2485
 7794 01e0 5906     		lsls	r1, r3, #25
 7795 01e2 B4D4     		bmi	.L878
 7796              	.L791:
 7797              	.LBB487:
 7798              	.LBB485:
3536:src/display.c ****       }
 7799              		.loc 1 3536 2 is_stmt 1 view .LVU2486
 7800 01e4 1B06     		lsls	r3, r3, #24
 7801 01e6 BED5     		bpl	.L879
 7802              	.L811:
 7803 01e8 0121     		movs	r1, #1
 7804              	.L793:
 7805              	.LVL888:
 7806              	.LBB483:
 7807              	.LBI483:
3382:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7808              		.loc 1 3382 19 view .LVU2487
 7809              	.LBB484:
3383:src/display.c ****       }
 7810              		.loc 1 3383 2 view .LVU2488
 7811 01ea 4FF45373 		mov	r3, #844
 7812 01ee 0093     		str	r3, [sp]
 7813 01f0 17A8     		add	r0, sp, #92
 7814              	.LVL889:
3383:src/display.c ****       }
 7815              		.loc 1 3383 2 is_stmt 0 view .LVU2489
 7816 01f2 40F24A23 		movw	r3, #586
 7817 01f6 2B22     		movs	r2, #43
 7818 01f8 FFF7FEFF 		bl	s_s_sized
 7819              	.LVL890:
3383:src/display.c ****       }
 7820              		.loc 1 3383 2 view .LVU2490
 7821              	.LBE484:
 7822              	.LBE483:
 7823              	.LBE485:
 7824              	.LBE487:
 916:src/display.c **** #else
 7825              		.loc 1 916 5 view .LVU2491
 7826 01fc 23B0     		add	sp, sp, #140
 7827              		.cfi_remember_state
 7828              		.cfi_def_cfa_offset 28
 7829              		@ sp needed
 7830 01fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7831              	.L886:
ARM GAS  /tmp/ccPv3rzq.s 			page 242


 7832 0202 00BF     		.align	2
 7833              	.L885:
 7834 0204 00000000 		.word	main_ram
 7835 0208 00000000 		.word	.LANCHOR12
 7836 020c 00000000 		.word	StateWhileOn
 7837 0210 28000000 		.word	.LC10
 7838 0214 24000000 		.word	.LC9
 7839 0218 10000000 		.word	.LC6
 7840 021c 1C000000 		.word	.LC8
 7841 0220 58000000 		.word	.LC17
 7842 0224 08000000 		.word	.LC4
 7843 0228 4C000000 		.word	.LC15
 7844 022c 00000000 		.word	.LANCHOR15
 7845 0230 00000000 		.word	RectPolConv
 7846 0234 00000000 		.word	ShowRegister
 7847              	.LVL891:
 7848              	.L867:
 7849              		.cfi_restore_state
 591:src/display.c **** 	    *p2++ = '\006';
 7850              		.loc 1 591 6 is_stmt 1 view .LVU2492
 592:src/display.c **** 	  }
 7851              		.loc 1 592 12 is_stmt 0 view .LVU2493
 7852 0238 0623     		movs	r3, #6
 7853 023a 8DF85D30 		strb	r3, [sp, #93]
 591:src/display.c **** 	    *p2++ = '\006';
 7854              		.loc 1 591 12 view .LVU2494
 7855 023e 8DF85C80 		strb	r8, [sp, #92]
 592:src/display.c **** 	  }
 7856              		.loc 1 592 6 is_stmt 1 view .LVU2495
 7857              	.LVL892:
 595:src/display.c **** 	default:
 7858              		.loc 1 595 2 view .LVU2496
 595:src/display.c **** 	default:
 7859              		.loc 1 595 9 is_stmt 0 view .LVU2497
 7860 0242 FFF7FEFF 		bl	int_mode
 7861              	.LVL893:
 7862 0246 0138     		subs	r0, r0, #1
 7863 0248 C0B2     		uxtb	r0, r0
 7864 024a 0228     		cmp	r0, #2
 7865 024c 96BF     		itet	ls
 7866 024e C14B     		ldrls	r3, .L887
 7867 0250 C149     		ldrhi	r1, .L887+4
 7868 0252 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7869              	.LVL894:
 602:src/display.c **** 	*q++ = '\006';
 7870              		.loc 1 602 2 is_stmt 1 view .LVU2498
 602:src/display.c **** 	*q++ = '\006';
 7871              		.loc 1 602 6 is_stmt 0 view .LVU2499
 7872 0256 0DF15E00 		add	r0, sp, #94
 7873              	.LVL895:
 602:src/display.c **** 	*q++ = '\006';
 7874              		.loc 1 602 6 view .LVU2500
 7875 025a FFF7FEFF 		bl	scopy
 7876              	.LVL896:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7877              		.loc 1 603 7 view .LVU2501
 7878 025e 8046     		mov	r8, r0
ARM GAS  /tmp/ccPv3rzq.s 			page 243


 7879              	.LVL897:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7880              		.loc 1 603 7 view .LVU2502
 7881 0260 0623     		movs	r3, #6
 7882 0262 08F8013B 		strb	r3, [r8], #1
 602:src/display.c **** 	*q++ = '\006';
 7883              		.loc 1 602 6 view .LVU2503
 7884 0266 0546     		mov	r5, r0
 7885              	.LVL898:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7886              		.loc 1 603 2 is_stmt 1 view .LVU2504
 604:src/display.c **** 
 7887              		.loc 1 604 2 view .LVU2505
 604:src/display.c **** 
 7888              		.loc 1 604 7 is_stmt 0 view .LVU2506
 7889 0268 FFF7FEFF 		bl	word_size
 7890              	.LVL899:
 7891 026c 0222     		movs	r2, #2
 7892 026e 0146     		mov	r1, r0
 7893 0270 4046     		mov	r0, r8
 7894 0272 FFF7FEFF 		bl	num_arg_0
 7895              	.LVL900:
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7896              		.loc 1 606 19 view .LVU2507
 7897 0276 DFF80CC3 		ldr	ip, .L887+48
 7898 027a DCF80030 		ldr	r3, [ip]
 7899              	.LVL901:
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7900              		.loc 1 606 2 is_stmt 1 view .LVU2508
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7901              		.loc 1 606 5 is_stmt 0 view .LVU2509
 7902 027e 002B     		cmp	r3, #0
 7903 0280 40F39E80 		ble	.L865
 607:src/display.c **** 	  if (*q == '1')
 7904              		.loc 1 607 4 is_stmt 1 view .LVU2510
 607:src/display.c **** 	  if (*q == '1')
 7905              		.loc 1 607 10 is_stmt 0 view .LVU2511
 7906 0284 C3F10702 		rsb	r2, r3, #7
 7907 0288 5200     		lsls	r2, r2, #1
 607:src/display.c **** 	  if (*q == '1')
 7908              		.loc 1 607 6 view .LVU2512
 7909 028a 0292     		str	r2, [sp, #8]
 608:src/display.c **** 	    n += 2;
 7910              		.loc 1 608 4 is_stmt 1 view .LVU2513
 608:src/display.c **** 	    n += 2;
 7911              		.loc 1 608 7 is_stmt 0 view .LVU2514
 7912 028c 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 7913 028e 3129     		cmp	r1, #49
 609:src/display.c **** 	  if (q[1] == '1')
 7914              		.loc 1 609 6 is_stmt 1 view .LVU2515
 609:src/display.c **** 	  if (q[1] == '1')
 7915              		.loc 1 609 8 is_stmt 0 view .LVU2516
 7916 0290 04BF     		itt	eq
 7917 0292 0232     		addeq	r2, r2, #2
 7918 0294 0292     		streq	r2, [sp, #8]
 610:src/display.c **** 	    n += 2;
 7919              		.loc 1 610 4 is_stmt 1 view .LVU2517
ARM GAS  /tmp/ccPv3rzq.s 			page 244


 610:src/display.c **** 	    n += 2;
 7920              		.loc 1 610 7 is_stmt 0 view .LVU2518
 7921 0296 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 7922 0298 3129     		cmp	r1, #49
 7923 029a 00D1     		bne	.L730
 611:src/display.c **** 	  while (n-- > 0)
 7924              		.loc 1 611 6 is_stmt 1 view .LVU2519
 611:src/display.c **** 	  while (n-- > 0)
 7925              		.loc 1 611 8 is_stmt 0 view .LVU2520
 7926 029c 0232     		adds	r2, r2, #2
 7927              	.L730:
 612:src/display.c **** 	    *p2++ = '\006';
 7928              		.loc 1 612 10 is_stmt 1 view .LVU2521
 612:src/display.c **** 	    *p2++ = '\006';
 7929              		.loc 1 612 12 is_stmt 0 view .LVU2522
 7930 029e 511E     		subs	r1, r2, #1
 612:src/display.c **** 	    *p2++ = '\006';
 7931              		.loc 1 612 10 view .LVU2523
 7932 02a0 002A     		cmp	r2, #0
 612:src/display.c **** 	    *p2++ = '\006';
 7933              		.loc 1 612 12 view .LVU2524
 7934 02a2 0291     		str	r1, [sp, #8]
 612:src/display.c **** 	    *p2++ = '\006';
 7935              		.loc 1 612 10 view .LVU2525
 7936 02a4 40F39B81 		ble	.L863
 613:src/display.c **** 
 7937              		.loc 1 613 12 view .LVU2526
 7938 02a8 0621     		movs	r1, #6
 7939              	.L731:
 613:src/display.c **** 
 7940              		.loc 1 613 6 is_stmt 1 view .LVU2527
 7941              	.LVL902:
 613:src/display.c **** 
 7942              		.loc 1 613 12 is_stmt 0 view .LVU2528
 7943 02aa 00F8011B 		strb	r1, [r0], #1
 7944              	.LVL903:
 612:src/display.c **** 	    *p2++ = '\006';
 7945              		.loc 1 612 10 is_stmt 1 view .LVU2529
 612:src/display.c **** 	    *p2++ = '\006';
 7946              		.loc 1 612 12 is_stmt 0 view .LVU2530
 7947 02ae 029B     		ldr	r3, [sp, #8]
 7948 02b0 5A1E     		subs	r2, r3, #1
 612:src/display.c **** 	    *p2++ = '\006';
 7949              		.loc 1 612 10 view .LVU2531
 7950 02b2 002B     		cmp	r3, #0
 612:src/display.c **** 	    *p2++ = '\006';
 7951              		.loc 1 612 12 view .LVU2532
 7952 02b4 0292     		str	r2, [sp, #8]
 612:src/display.c **** 	    *p2++ = '\006';
 7953              		.loc 1 612 10 view .LVU2533
 7954 02b6 F8DC     		bgt	.L731
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7955              		.loc 1 615 4 is_stmt 1 view .LVU2534
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7956              		.loc 1 615 11 is_stmt 0 view .LVU2535
 7957 02b8 DCF80030 		ldr	r3, [ip]
 7958 02bc 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccPv3rzq.s 			page 245


 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7959              		.loc 1 615 27 is_stmt 1 view .LVU2536
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7960              		.loc 1 615 4 is_stmt 0 view .LVU2537
 7961 02be 002B     		cmp	r3, #0
 7962 02c0 7EDB     		blt	.L865
 7963              	.L794:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7964              		.loc 1 615 4 view .LVU2538
 7965 02c2 A64D     		ldr	r5, .L887+8
 7966              	.L736:
 616:src/display.c **** 	}
 7967              		.loc 1 616 6 is_stmt 1 view .LVU2539
 616:src/display.c **** 	}
 7968              		.loc 1 616 20 is_stmt 0 view .LVU2540
 7969 02c4 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 7970 02c6 C2F3C202 		ubfx	r2, r2, #3, #3
 616:src/display.c **** 	}
 7971              		.loc 1 616 12 view .LVU2541
 7972 02ca 9A42     		cmp	r2, r3
 7973 02cc 0CBF     		ite	eq
 7974 02ce 7C23     		moveq	r3, #124
 7975 02d0 2723     		movne	r3, #39
 7976              	.LVL904:
 616:src/display.c **** 	}
 7977              		.loc 1 616 12 view .LVU2542
 7978 02d2 00F8013B 		strb	r3, [r0], #1
 7979              	.LVL905:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7980              		.loc 1 615 35 is_stmt 1 view .LVU2543
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7981              		.loc 1 615 36 is_stmt 0 view .LVU2544
 7982 02d6 029B     		ldr	r3, [sp, #8]
 7983 02d8 013B     		subs	r3, r3, #1
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7984              		.loc 1 615 4 view .LVU2545
 7985 02da 002B     		cmp	r3, #0
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7986              		.loc 1 615 36 view .LVU2546
 7987 02dc 0293     		str	r3, [sp, #8]
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7988              		.loc 1 615 27 is_stmt 1 view .LVU2547
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7989              		.loc 1 615 4 is_stmt 0 view .LVU2548
 7990 02de F1DA     		bge	.L736
 7991              	.L734:
 618:src/display.c ****       }
 7992              		.loc 1 618 2 is_stmt 1 view .LVU2549
 618:src/display.c ****       }
 7993              		.loc 1 618 5 is_stmt 0 view .LVU2550
 7994 02e0 002F     		cmp	r7, #0
 7995 02e2 3FF47CAF 		beq	.L737
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 7996              		.loc 1 535 22 view .LVU2551
 7997 02e6 B046     		mov	r8, r6
 7998              	.LVL906:
 7999              	.L727:
ARM GAS  /tmp/ccPv3rzq.s 			page 246


 8000              	.LBB488:
 813:src/display.c **** 	display_yreg:
 8001              		.loc 1 813 4 is_stmt 1 view .LVU2552
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8002              		.loc 1 820 4 view .LVU2553
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8003              		.loc 1 820 8 is_stmt 0 view .LVU2554
 8004 02e8 2368     		ldr	r3, [r4]
 8005 02ea 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8006              		.loc 1 820 7 view .LVU2555
 8007 02ee D207     		lsls	r2, r2, #31
 8008 02f0 3FF51DAF 		bmi	.L880
 8009              	.L765:
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 8010              		.loc 1 827 4 is_stmt 1 view .LVU2556
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 8011              		.loc 1 827 35 is_stmt 0 view .LVU2557
 8012 02f4 B3F8AC27 		ldrh	r2, [r3, #1964]
 8013 02f8 40F2C113 		movw	r3, #449
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 8014              		.loc 1 827 7 view .LVU2558
 8015 02fc 1340     		ands	r3, r3, r2
 8016 02fe C12B     		cmp	r3, #193
 8017 0300 00F02281 		beq	.L881
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8018              		.loc 1 831 6 is_stmt 1 view .LVU2559
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8019              		.loc 1 831 36 is_stmt 0 view .LVU2560
 8020 0304 DFF88092 		ldr	r9, .L887+52
 8021 0308 D9F80010 		ldr	r1, [r9]
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8022              		.loc 1 831 6 view .LVU2561
 8023 030c 6329     		cmp	r1, #99
 8024 030e 00F3E780 		bgt	.L882
 8025              	.L774:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8026              		.loc 1 831 6 discriminator 3 view .LVU2562
 8027 0312 0131     		adds	r1, r1, #1
 8028              	.L778:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8029              		.loc 1 831 6 discriminator 4 view .LVU2563
 8030 0314 03AF     		add	r7, sp, #12
 8031              	.LVL907:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8032              		.loc 1 831 6 discriminator 4 view .LVU2564
 8033 0316 3846     		mov	r0, r7
 8034 0318 FFF7FEFF 		bl	getRegister
 8035              	.LVL908:
 8036              	.L773:
 841:src/display.c **** #ifdef INCLUDE_C_LOCK
 8037              		.loc 1 841 4 is_stmt 1 view .LVU2565
 841:src/display.c **** #ifdef INCLUDE_C_LOCK
 8038              		.loc 1 841 7 is_stmt 0 view .LVU2566
 8039 031c 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8040 0320 13F0700F 		tst	r3, #112
 8041 0324 40F09E80 		bne	.L780
ARM GAS  /tmp/ccPv3rzq.s 			page 247


 843:src/display.c **** #else
 8042              		.loc 1 843 6 is_stmt 1 view .LVU2567
 843:src/display.c **** #else
 8043              		.loc 1 843 19 is_stmt 0 view .LVU2568
 8044 0328 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 843:src/display.c **** #else
 8045              		.loc 1 843 9 view .LVU2569
 8046 032a 13F0010F 		tst	r3, #1
 843:src/display.c **** #else
 8047              		.loc 1 843 39 view .LVU2570
 8048 032e 2368     		ldr	r3, [r4]
 843:src/display.c **** #else
 8049              		.loc 1 843 9 view .LVU2571
 8050 0330 57D0     		beq	.L783
 843:src/display.c **** #else
 8051              		.loc 1 843 38 discriminator 1 view .LVU2572
 8052 0332 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 843:src/display.c **** #else
 8053              		.loc 1 843 33 discriminator 1 view .LVU2573
 8054 0336 02F04101 		and	r1, r2, #65
 8055 033a 4129     		cmp	r1, #65
 8056 033c 06D1     		bne	.L782
 843:src/display.c **** #else
 8057              		.loc 1 843 48 discriminator 2 view .LVU2574
 8058 033e 1206     		lsls	r2, r2, #24
 8059 0340 4FD5     		bpl	.L783
 843:src/display.c **** #else
 8060              		.loc 1 843 119 discriminator 3 view .LVU2575
 8061 0342 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 843:src/display.c **** #else
 8062              		.loc 1 843 80 discriminator 3 view .LVU2576
 8063 0346 12F0C00F 		tst	r2, #192
 8064 034a 4AD1     		bne	.L783
 8065              	.L782:
 8066              	.LBB473:
 847:src/display.c **** 
 8067              		.loc 1 847 8 is_stmt 1 view .LVU2577
 849:src/display.c **** 	      UState.nothousands = 1;
 8068              		.loc 1 849 8 is_stmt 0 view .LVU2578
 8069 034c 2A22     		movs	r2, #42
 8070 034e 0021     		movs	r1, #0
 8071 0350 3046     		mov	r0, r6
 847:src/display.c **** 
 8072              		.loc 1 847 44 view .LVU2579
 8073 0352 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8074 0356 DFF83482 		ldr	r8, .L887+56
 8075              	.LVL909:
 849:src/display.c **** 	      UState.nothousands = 1;
 8076              		.loc 1 849 8 view .LVU2580
 8077 035a FFF7FEFF 		bl	xset
 8078              	.LVL910:
 850:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8079              		.loc 1 850 27 view .LVU2581
 8080 035e 2268     		ldr	r2, [r4]
 8081 0360 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8082 0364 43F04003 		orr	r3, r3, #64
 8083 0368 82F8E737 		strb	r3, [r2, #2023]
ARM GAS  /tmp/ccPv3rzq.s 			page 248


 851:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8084              		.loc 1 851 8 view .LVU2582
 8085 036c 3146     		mov	r1, r6
 8086 036e 3846     		mov	r0, r7
 8087 0370 FFF7FEFF 		bl	set_x_hms
 8088              	.LVL911:
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8089              		.loc 1 852 27 view .LVU2583
 8090 0374 2368     		ldr	r3, [r4]
 8091 0376 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 847:src/display.c **** 
 8092              		.loc 1 847 44 view .LVU2584
 8093 037a C9F38019 		ubfx	r9, r9, #6, #1
 8094              	.LVL912:
 849:src/display.c **** 	      UState.nothousands = 1;
 8095              		.loc 1 849 8 is_stmt 1 view .LVU2585
 850:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8096              		.loc 1 850 8 view .LVU2586
 851:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8097              		.loc 1 851 8 view .LVU2587
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8098              		.loc 1 852 8 view .LVU2588
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8099              		.loc 1 852 27 is_stmt 0 view .LVU2589
 8100 037e 69F38612 		bfi	r2, r9, #6, #1
 8101 0382 83F8E727 		strb	r2, [r3, #2023]
 857:src/display.c **** 	      while (*p) {
 8102              		.loc 1 857 8 is_stmt 1 view .LVU2590
 8103              	.LVL913:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8104              		.loc 1 858 8 view .LVU2591
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8105              		.loc 1 858 14 view .LVU2592
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8106              		.loc 1 858 15 is_stmt 0 view .LVU2593
 8107 0386 4021     		movs	r1, #64
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8108              		.loc 1 852 27 view .LVU2594
 8109 0388 0522     		movs	r2, #5
 8110 038a 06E0     		b	.L785
 8111              	.LVL914:
 8112              	.L883:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8113              		.loc 1 858 15 view .LVU2595
 8114 038c 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8115              	.LVL915:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8116              		.loc 1 858 14 view .LVU2596
 8117 0390 0029     		cmp	r1, #0
 8118 0392 3FF424AF 		beq	.L737
 8119 0396 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8120              	.LVL916:
 8121              	.L785:
 859:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8122              		.loc 1 859 3 is_stmt 1 view .LVU2597
 8123 039a 3046     		mov	r0, r6
 8124 039c FFF7FEFF 		bl	replace_char
ARM GAS  /tmp/ccPv3rzq.s 			page 249


 8125              	.LVL917:
 860:src/display.c **** 		  goto skip;
 8126              		.loc 1 860 3 view .LVU2598
 860:src/display.c **** 		  goto skip;
 8127              		.loc 1 860 7 is_stmt 0 view .LVU2599
 8128 03a0 0121     		movs	r1, #1
 8129 03a2 3046     		mov	r0, r6
 8130 03a4 FFF7FEFF 		bl	pixel_length
 8131              	.LVL918:
 863:src/display.c **** 	      }
 8132              		.loc 1 863 3 is_stmt 1 view .LVU2600
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8133              		.loc 1 858 14 view .LVU2601
 860:src/display.c **** 		  goto skip;
 8134              		.loc 1 860 6 is_stmt 0 view .LVU2602
 8135 03a8 2C28     		cmp	r0, #44
 8136 03aa EFDC     		bgt	.L883
 8137 03ac 17E7     		b	.L737
 8138              	.LVL919:
 8139              	.L747:
 860:src/display.c **** 		  goto skip;
 8140              		.loc 1 860 6 view .LVU2603
 8141              	.LBE473:
 8142              	.LBE488:
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8143              		.loc 1 714 4 is_stmt 1 view .LVU2604
 715:src/display.c **** 	  *p2++ = shift_char;
 8144              		.loc 1 715 4 view .LVU2605
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8145              		.loc 1 714 10 is_stmt 0 view .LVU2606
 8146 03ae 4CF20773 		movw	r3, #50951
 716:src/display.c **** 	}
 8147              		.loc 1 716 10 view .LVU2607
 8148 03b2 8DF85E80 		strb	r8, [sp, #94]
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8149              		.loc 1 714 10 view .LVU2608
 8150 03b6 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 716:src/display.c **** 	}
 8151              		.loc 1 716 4 is_stmt 1 view .LVU2609
 8152              	.LVL920:
 716:src/display.c **** 	}
 8153              		.loc 1 716 7 is_stmt 0 view .LVU2610
 8154 03ba 0DF15F08 		add	r8, sp, #95
 8155              	.LVL921:
 716:src/display.c **** 	}
 8156              		.loc 1 716 7 view .LVU2611
 8157 03be 51E6     		b	.L748
 8158              	.LVL922:
 8159              	.L865:
 716:src/display.c **** 	}
 8160              		.loc 1 716 7 view .LVU2612
 8161 03c0 664D     		ldr	r5, .L887+8
 8162 03c2 8DE7     		b	.L734
 8163              	.LVL923:
 8164              	.L871:
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8165              		.loc 1 788 29 discriminator 1 view .LVU2613
ARM GAS  /tmp/ccPv3rzq.s 			page 250


 8166 03c4 03F04101 		and	r1, r3, #65
 8167 03c8 4129     		cmp	r1, #65
 8168 03ca 3FF498AE 		beq	.L761
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 8169              		.loc 1 535 22 view .LVU2614
 8170 03ce B046     		mov	r8, r6
 8171 03d0 A1E6     		b	.L760
 8172              	.L758:
 785:src/display.c **** 	  p = scopy(p, q);
 8173              		.loc 1 785 4 is_stmt 1 view .LVU2615
 8174              	.LVL924:
 786:src/display.c **** 	}
 8175              		.loc 1 786 4 view .LVU2616
 786:src/display.c **** 	}
 8176              		.loc 1 786 8 is_stmt 0 view .LVU2617
 8177 03d2 6349     		ldr	r1, .L887+12
 8178 03d4 3046     		mov	r0, r6
 8179 03d6 FFF7FEFF 		bl	scopy
 8180              	.LVL925:
 8181 03da D9F80020 		ldr	r2, [r9]
 8182 03de 8046     		mov	r8, r0
 8183              	.LVL926:
 786:src/display.c **** 	}
 8184              		.loc 1 786 6 view .LVU2618
 8185 03e0 99E6     		b	.L760
 8186              	.LVL927:
 8187              	.L783:
 8188              	.LBB489:
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8189              		.loc 1 867 6 is_stmt 1 view .LVU2619
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8190              		.loc 1 867 21 is_stmt 0 view .LVU2620
 8191 03e2 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8192              		.loc 1 867 9 view .LVU2621
 8193 03e6 9806     		lsls	r0, r3, #26
 8194 03e8 3CD5     		bpl	.L780
 869:src/display.c **** #endif
 8195              		.loc 1 869 6 view .LVU2622
 8196 03ea 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 869:src/display.c **** #endif
 8197              		.loc 1 869 3 view .LVU2623
 8198 03ec 13F00204 		ands	r4, r3, #2
 8199 03f0 38D1     		bne	.L780
 872:src/display.c **** #endif
 8200              		.loc 1 872 6 view .LVU2624
 8201 03f2 5C4B     		ldr	r3, .L887+16
 872:src/display.c **** #endif
 8202              		.loc 1 872 3 view .LVU2625
 8203 03f4 1B68     		ldr	r3, [r3]
 8204 03f6 012B     		cmp	r3, #1
 8205 03f8 34D0     		beq	.L780
 874:src/display.c **** 	      char ltgteq;
 8206              		.loc 1 874 6 view .LVU2626
 8207 03fa 4146     		mov	r1, r8
 8208 03fc 3846     		mov	r0, r7
 8209 03fe FFF7FEFF 		bl	set_x_fract
ARM GAS  /tmp/ccPv3rzq.s 			page 251


 8210              	.LVL928:
 874:src/display.c **** 	      char ltgteq;
 8211              		.loc 1 874 3 view .LVU2627
 8212 0402 78B3     		cbz	r0, .L780
 8213              	.LBB474:
 875:src/display.c **** 
 8214              		.loc 1 875 8 is_stmt 1 view .LVU2628
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8215              		.loc 1 877 8 view .LVU2629
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8216              		.loc 1 877 12 is_stmt 0 view .LVU2630
 8217 0404 2146     		mov	r1, r4
 8218 0406 3046     		mov	r0, r6
 8219 0408 FFF7FEFF 		bl	find_char
 8220              	.LVL929:
 8221 040c 0446     		mov	r4, r0
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8222              		.loc 1 877 10 view .LVU2631
 8223 040e 0238     		subs	r0, r0, #2
 8224              	.LVL930:
 879:src/display.c **** 	      switch (ltgteq) {
 8225              		.loc 1 879 8 is_stmt 1 view .LVU2632
 879:src/display.c **** 	      switch (ltgteq) {
 8226              		.loc 1 879 15 is_stmt 0 view .LVU2633
 8227 0410 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8228              	.LVL931:
 880:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8229              		.loc 1 880 8 is_stmt 1 view .LVU2634
 8230 0414 B9F1470F 		cmp	r9, #71
 8231 0418 00F0F080 		beq	.L809
 882:src/display.c **** 	      }
 8232              		.loc 1 882 25 is_stmt 0 view .LVU2635
 8233 041c B9F14C0F 		cmp	r9, #76
 8234 0420 08BF     		it	eq
 8235 0422 4FF03C09 		moveq	r9, #60
 8236              	.LVL932:
 8237              	.L787:
 884:src/display.c **** 	      q[2] = ltgteq;
 8238              		.loc 1 884 8 is_stmt 1 view .LVU2636
 8239 0426 5049     		ldr	r1, .L887+20
 8240 0428 FFF7FEFF 		bl	scopy
 8241              	.LVL933:
 885:src/display.c **** 
 8242              		.loc 1 885 8 view .LVU2637
 885:src/display.c **** 
 8243              		.loc 1 885 13 is_stmt 0 view .LVU2638
 8244 042c 84F80090 		strb	r9, [r4]
 887:src/display.c **** 		goto skip;
 8245              		.loc 1 887 8 is_stmt 1 view .LVU2639
 887:src/display.c **** 		goto skip;
 8246              		.loc 1 887 12 is_stmt 0 view .LVU2640
 8247 0430 0121     		movs	r1, #1
 8248 0432 3046     		mov	r0, r6
 8249 0434 FFF7FEFF 		bl	pixel_length
 8250              	.LVL934:
 887:src/display.c **** 		goto skip;
 8251              		.loc 1 887 11 view .LVU2641
ARM GAS  /tmp/ccPv3rzq.s 			page 252


 8252 0438 2C28     		cmp	r0, #44
 8253 043a 7FF7D0AE 		ble	.L737
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8254              		.loc 1 890 8 is_stmt 1 view .LVU2642
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8255              		.loc 1 890 14 is_stmt 0 view .LVU2643
 8256 043e 4FF00009 		mov	r9, #0
 8257              	.LVL935:
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8258              		.loc 1 890 14 view .LVU2644
 8259 0442 04F8039C 		strb	r9, [r4, #-3]
 891:src/display.c **** 		goto skip;
 8260              		.loc 1 891 8 is_stmt 1 view .LVU2645
 891:src/display.c **** 		goto skip;
 8261              		.loc 1 891 12 is_stmt 0 view .LVU2646
 8262 0446 0121     		movs	r1, #1
 8263 0448 3046     		mov	r0, r6
 8264 044a FFF7FEFF 		bl	pixel_length
 8265              	.LVL936:
 891:src/display.c **** 		goto skip;
 8266              		.loc 1 891 11 view .LVU2647
 8267 044e 2C28     		cmp	r0, #44
 8268 0450 7FF7C5AE 		ble	.L737
 894:src/display.c **** 	    }
 8269              		.loc 1 894 8 is_stmt 1 view .LVU2648
 894:src/display.c **** 	    }
 8270              		.loc 1 894 39 is_stmt 0 view .LVU2649
 8271 0454 A8EB0602 		sub	r2, r8, r6
 894:src/display.c **** 	    }
 8272              		.loc 1 894 8 view .LVU2650
 8273 0458 4946     		mov	r1, r9
 8274 045a C2F12A02 		rsb	r2, r2, #42
 8275 045e 4046     		mov	r0, r8
 8276 0460 FFF7FEFF 		bl	xset
 8277              	.LVL937:
 8278              	.L780:
 894:src/display.c **** 	    }
 8279              		.loc 1 894 8 view .LVU2651
 8280              	.LBE474:
 897:src/display.c **** 	    int extra_pixels;
 8281              		.loc 1 897 4 is_stmt 1 view .LVU2652
 897:src/display.c **** 	    int extra_pixels;
 8282              		.loc 1 897 10 is_stmt 0 view .LVU2653
 8283 0464 0C23     		movs	r3, #12
 8284 0466 0293     		str	r3, [sp, #8]
 897:src/display.c **** 	    int extra_pixels;
 8285              		.loc 1 897 27 is_stmt 1 view .LVU2654
 8286 0468 0FE0     		b	.L789
 8287              	.LVL938:
 8288              	.L884:
 8289              	.LBB475:
 905:src/display.c **** 
 8290              		.loc 1 905 6 is_stmt 0 view .LVU2655
 8291 046a 029A     		ldr	r2, [sp, #8]
 8292 046c 0A32     		adds	r2, r2, #10
 8293 046e FFF7FEFF 		bl	xset
 8294              	.LVL939:
ARM GAS  /tmp/ccPv3rzq.s 			page 253


 907:src/display.c **** 	  }
 8295              		.loc 1 907 6 is_stmt 1 view .LVU2656
 907:src/display.c **** 	  }
 8296              		.loc 1 907 30 is_stmt 0 view .LVU2657
 8297 0472 B4F14802 		subs	r2, r4, #72
 907:src/display.c **** 	  }
 8298              		.loc 1 907 8 view .LVU2658
 8299 0476 029B     		ldr	r3, [sp, #8]
 907:src/display.c **** 	  }
 8300              		.loc 1 907 30 view .LVU2659
 8301 0478 48BF     		it	mi
 8302 047a A4F14502 		submi	r2, r4, #69
 907:src/display.c **** 	  }
 8303              		.loc 1 907 8 view .LVU2660
 8304 047e A3EBA203 		sub	r3, r3, r2, asr #2
 8305              	.LBE475:
 897:src/display.c **** 	    int extra_pixels;
 8306              		.loc 1 897 4 view .LVU2661
 8307 0482 012B     		cmp	r3, #1
 8308              	.LBB476:
 907:src/display.c **** 	  }
 8309              		.loc 1 907 8 view .LVU2662
 8310 0484 0293     		str	r3, [sp, #8]
 8311              	.LBE476:
 897:src/display.c **** 	    int extra_pixels;
 8312              		.loc 1 897 27 is_stmt 1 view .LVU2663
 897:src/display.c **** 	    int extra_pixels;
 8313              		.loc 1 897 4 is_stmt 0 view .LVU2664
 8314 0486 7FF7AAAE 		ble	.L737
 8315              	.LVL940:
 8316              	.L789:
 8317              	.LBB477:
 898:src/display.c **** 
 8318              		.loc 1 898 6 is_stmt 1 view .LVU2665
 900:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8319              		.loc 1 900 6 view .LVU2666
 8320 048a 02AA     		add	r2, sp, #8
 8321 048c 4146     		mov	r1, r8
 8322 048e 3846     		mov	r0, r7
 8323 0490 FFF7FEFF 		bl	set_x_dn
 8324              	.LVL941:
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8325              		.loc 1 901 6 view .LVU2667
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8326              		.loc 1 901 21 is_stmt 0 view .LVU2668
 8327 0494 0121     		movs	r1, #1
 8328 0496 3046     		mov	r0, r6
 8329 0498 FFF7FEFF 		bl	pixel_length
 8330              	.LVL942:
 905:src/display.c **** 
 8331              		.loc 1 905 6 is_stmt 1 view .LVU2669
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8332              		.loc 1 901 21 is_stmt 0 view .LVU2670
 8333 049c 0446     		mov	r4, r0
 8334              	.LVL943:
 902:src/display.c **** 	      break;
 8335              		.loc 1 902 6 is_stmt 1 view .LVU2671
ARM GAS  /tmp/ccPv3rzq.s 			page 254


 902:src/display.c **** 	      break;
 8336              		.loc 1 902 9 is_stmt 0 view .LVU2672
 8337 049e 4B2C     		cmp	r4, #75
 905:src/display.c **** 
 8338              		.loc 1 905 6 view .LVU2673
 8339 04a0 4FF00001 		mov	r1, #0
 8340 04a4 4046     		mov	r0, r8
 8341              	.LVL944:
 902:src/display.c **** 	      break;
 8342              		.loc 1 902 9 view .LVU2674
 8343 04a6 E0DC     		bgt	.L884
 8344              	.LVL945:
 902:src/display.c **** 	      break;
 8345              		.loc 1 902 9 view .LVU2675
 8346              	.LBE477:
 8347 04a8 99E6     		b	.L737
 8348              	.LVL946:
 8349              	.L790:
 902:src/display.c **** 	      break;
 8350              		.loc 1 902 9 view .LVU2676
 8351              	.LBE489:
 8352              	.LBB490:
 8353              	.LBB486:
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8354              		.loc 1 3535 22 view .LVU2677
 8355 04aa AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8356 04ac 5A06     		lsls	r2, r3, #25
 8357 04ae 7FF599AE 		bpl	.L791
 8358              	.LBE486:
 8359              	.LBE490:
 916:src/display.c **** #else
 8360              		.loc 1 916 5 view .LVU2678
 8361 04b2 23B0     		add	sp, sp, #140
 8362              		.cfi_remember_state
 8363              		.cfi_def_cfa_offset 28
 8364              		@ sp needed
 8365 04b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8366              	.LVL947:
 8367              	.L869:
 8368              		.cfi_restore_state
 721:src/display.c **** 	  *p2++ = '\207';
 8369              		.loc 1 721 4 is_stmt 1 view .LVU2679
 722:src/display.c **** 	  *p2++ = '\007';	    
 8370              		.loc 1 722 4 view .LVU2680
 723:src/display.c **** 	}
 8371              		.loc 1 723 10 is_stmt 0 view .LVU2681
 8372 04b8 88F80230 		strb	r3, [r8, #2]
 722:src/display.c **** 	  *p2++ = '\007';	    
 8373              		.loc 1 722 10 view .LVU2682
 8374 04bc 88F80120 		strb	r2, [r8, #1]
 723:src/display.c **** 	}
 8375              		.loc 1 723 4 is_stmt 1 view .LVU2683
 723:src/display.c **** 	}
 8376              		.loc 1 723 7 is_stmt 0 view .LVU2684
 8377 04c0 08F10308 		add	r8, r8, #3
 8378              	.LVL948:
 723:src/display.c **** 	}
ARM GAS  /tmp/ccPv3rzq.s 			page 255


 8379              		.loc 1 723 7 view .LVU2685
 8380 04c4 DFE5     		b	.L750
 8381              	.LVL949:
 8382              	.L803:
 755:src/display.c **** #endif
 8383              		.loc 1 755 19 view .LVU2686
 8384 04c6 2949     		ldr	r1, .L887+24
 8385 04c8 F7E5     		b	.L752
 8386              	.LVL950:
 8387              	.L872:
 807:src/display.c **** 	    p = scopy(p, q);
 8388              		.loc 1 807 6 is_stmt 1 view .LVU2687
 808:src/display.c **** 	    //	    goto no_copy;
 8389              		.loc 1 808 6 view .LVU2688
 808:src/display.c **** 	    //	    goto no_copy;
 8390              		.loc 1 808 10 is_stmt 0 view .LVU2689
 8391 04ca 4046     		mov	r0, r8
 8392 04cc 2849     		ldr	r1, .L887+28
 8393 04ce FFF7FEFF 		bl	scopy
 8394              	.LVL951:
 8395 04d2 8046     		mov	r8, r0
 8396              	.LVL952:
 808:src/display.c **** 	    //	    goto no_copy;
 8397              		.loc 1 808 10 view .LVU2690
 8398 04d4 22E6     		b	.L763
 8399              	.LVL953:
 8400              	.L874:
 651:src/display.c **** 	  *p2 = '\024';
 8401              		.loc 1 651 4 is_stmt 1 view .LVU2691
 651:src/display.c **** 	  *p2 = '\024';
 8402              		.loc 1 651 10 is_stmt 0 view .LVU2692
 8403 04d6 2022     		movs	r2, #32
 652:src/display.c **** 	  goto skip;
 8404              		.loc 1 652 8 view .LVU2693
 8405 04d8 1423     		movs	r3, #20
 651:src/display.c **** 	  *p2 = '\024';
 8406              		.loc 1 651 10 view .LVU2694
 8407 04da 0270     		strb	r2, [r0]
 652:src/display.c **** 	  goto skip;
 8408              		.loc 1 652 4 is_stmt 1 view .LVU2695
 652:src/display.c **** 	  goto skip;
 8409              		.loc 1 652 8 is_stmt 0 view .LVU2696
 8410 04dc 4370     		strb	r3, [r0, #1]
 653:src/display.c **** 	}
 8411              		.loc 1 653 4 is_stmt 1 view .LVU2697
 8412 04de 7EE6     		b	.L737
 8413              	.LVL954:
 8414              	.L882:
 8415              	.LBB491:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8416              		.loc 1 831 77 is_stmt 0 discriminator 2 view .LVU2698
 8417 04e0 FFF7FEFF 		bl	stack_size
 8418              	.LVL955:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8419              		.loc 1 831 64 discriminator 2 view .LVU2699
 8420 04e4 D9F80010 		ldr	r1, [r9]
 8421 04e8 6330     		adds	r0, r0, #99
ARM GAS  /tmp/ccPv3rzq.s 			page 256


 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8422              		.loc 1 831 48 discriminator 2 view .LVU2700
 8423 04ea 8842     		cmp	r0, r1
 8424 04ec FFF611AF 		blt	.L774
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8425              		.loc 1 832 13 view .LVU2701
 8426 04f0 FFF7FEFF 		bl	get_cmdline
 8427              	.LVL956:
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8428              		.loc 1 832 9 view .LVU2702
 8429 04f4 0028     		cmp	r0, #0
 8430 04f6 79D0     		beq	.L776
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8431              		.loc 1 832 27 discriminator 1 view .LVU2703
 8432 04f8 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8433 04fa 002B     		cmp	r3, #0
 8434 04fc 76D1     		bne	.L776
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8435              		.loc 1 833 9 view .LVU2704
 8436 04fe 17B1     		cbz	r7, .L777
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8437              		.loc 1 833 30 discriminator 1 view .LVU2705
 8438 0500 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8439              		.loc 1 833 12 discriminator 1 view .LVU2706
 8440 0502 5906     		lsls	r1, r3, #25
 8441 0504 72D5     		bpl	.L776
 8442              	.L777:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8443              		.loc 1 831 6 discriminator 5 view .LVU2707
 8444 0506 D9F80010 		ldr	r1, [r9]
 8445 050a 03E7     		b	.L778
 8446              	.LVL957:
 8447              	.L870:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8448              		.loc 1 831 6 discriminator 5 view .LVU2708
 8449              	.LBE491:
 775:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8450              		.loc 1 775 4 is_stmt 1 view .LVU2709
 776:src/display.c **** 	  }
 8451              		.loc 1 776 6 view .LVU2710
 779:src/display.c **** 	  }
 8452              		.loc 1 779 6 view .LVU2711
 775:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8453              		.loc 1 775 7 is_stmt 0 view .LVU2712
 8454 050c 1806     		lsls	r0, r3, #24
 776:src/display.c **** 	  }
 8455              		.loc 1 776 33 view .LVU2713
 8456 050e 4BBF     		itete	mi
 8457 0510 184A     		ldrmi	r2, .L887+32
 779:src/display.c **** 	  }
 8458              		.loc 1 779 31 view .LVU2714
 8459 0512 194A     		ldrpl	r2, .L887+36
 776:src/display.c **** 	  }
 8460              		.loc 1 776 33 view .LVU2715
 8461 0514 1949     		ldrmi	r1, .L887+40
 779:src/display.c **** 	  }
ARM GAS  /tmp/ccPv3rzq.s 			page 257


 8462              		.loc 1 779 31 view .LVU2716
 8463 0516 1A49     		ldrpl	r1, .L887+44
 8464 0518 13F0020F 		tst	r3, #2
 8465 051c 08BF     		it	eq
 8466 051e 1146     		moveq	r1, r2
 8467              	.LVL958:
 781:src/display.c **** 	  goto skip;
 8468              		.loc 1 781 4 is_stmt 1 view .LVU2717
 8469 0520 3046     		mov	r0, r6
 8470 0522 FFF7FEFF 		bl	scopy
 8471              	.LVL959:
 782:src/display.c **** 	}
 8472              		.loc 1 782 4 view .LVU2718
 8473 0526 5AE6     		b	.L737
 8474              	.LVL960:
 8475              	.L739:
 642:src/display.c **** 	    *p2++ = shift_char;
 8476              		.loc 1 642 30 is_stmt 0 discriminator 1 view .LVU2719
 8477 0528 FFF7FEFF 		bl	is_dblmode
 8478              	.LVL961:
 642:src/display.c **** 	    *p2++ = shift_char;
 8479              		.loc 1 642 26 discriminator 1 view .LVU2720
 8480 052c 0028     		cmp	r0, #0
 8481 052e 3FF42EAE 		beq	.L741
 647:src/display.c **** 	  }
 8482              		.loc 1 647 6 is_stmt 1 view .LVU2721
 8483              	.LVL962:
 647:src/display.c **** 	  }
 8484              		.loc 1 647 12 is_stmt 0 view .LVU2722
 8485 0532 4423     		movs	r3, #68
 8486 0534 8DF85C30 		strb	r3, [sp, #92]
 647:src/display.c **** 	  }
 8487              		.loc 1 647 9 view .LVU2723
 8488 0538 0DF15D00 		add	r0, sp, #93
 8489              	.LVL963:
 647:src/display.c **** 	  }
 8490              		.loc 1 647 9 view .LVU2724
 8491 053c 2EE6     		b	.L740
 8492              	.L875:
 656:src/display.c **** 	  *p2 = '\015';
 8493              		.loc 1 656 4 is_stmt 1 view .LVU2725
 8494              	.LVL964:
 656:src/display.c **** 	  *p2 = '\015';
 8495              		.loc 1 656 10 is_stmt 0 view .LVU2726
 8496 053e 2022     		movs	r2, #32
 657:src/display.c **** 	  goto skip;
 8497              		.loc 1 657 8 view .LVU2727
 8498 0540 0D23     		movs	r3, #13
 656:src/display.c **** 	  *p2 = '\015';
 8499              		.loc 1 656 10 view .LVU2728
 8500 0542 0270     		strb	r2, [r0]
 657:src/display.c **** 	  goto skip;
 8501              		.loc 1 657 4 is_stmt 1 view .LVU2729
 657:src/display.c **** 	  goto skip;
 8502              		.loc 1 657 8 is_stmt 0 view .LVU2730
 8503 0544 4370     		strb	r3, [r0, #1]
 658:src/display.c **** 	}
ARM GAS  /tmp/ccPv3rzq.s 			page 258


 8504              		.loc 1 658 4 is_stmt 1 view .LVU2731
 8505 0546 4AE6     		b	.L737
 8506              	.LVL965:
 8507              	.L881:
 8508              	.LBB492:
 828:src/display.c **** 	  }
 8509              		.loc 1 828 6 view .LVU2732
 8510 0548 03AF     		add	r7, sp, #12
 8511              	.LVL966:
 828:src/display.c **** 	  }
 8512              		.loc 1 828 6 is_stmt 0 view .LVU2733
 8513 054a 3846     		mov	r0, r7
 8514 054c 6F21     		movs	r1, #111
 8515 054e FFF7FEFF 		bl	getRegister
 8516              	.LVL967:
 8517 0552 E3E6     		b	.L773
 8518              	.L888:
 8519              		.align	2
 8520              	.L887:
 8521 0554 00000000 		.word	.LANCHOR13
 8522 0558 00000000 		.word	.LC2
 8523 055c 00000000 		.word	StateWhileOn
 8524 0560 60000000 		.word	.LC18
 8525 0564 00000000 		.word	RectPolConv
 8526 0568 68000000 		.word	.LC21
 8527 056c 14000000 		.word	.LC7
 8528 0570 64000000 		.word	.LC19
 8529 0574 3C000000 		.word	.LC13
 8530 0578 44000000 		.word	.LC14
 8531 057c 2C000000 		.word	.LC11
 8532 0580 34000000 		.word	.LC12
 8533 0584 00000000 		.word	IntMaxWindow
 8534 0588 00000000 		.word	ShowRegister
 8535 058c 00000000 		.word	.LANCHOR14
 8536              	.LVL968:
 8537              	.L873:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8538              		.loc 1 821 85 discriminator 2 view .LVU2734
 8539 0590 FFF7FEFF 		bl	stack_size
 8540              	.LVL969:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8541              		.loc 1 821 72 discriminator 2 view .LVU2735
 8542 0594 D9F80030 		ldr	r3, [r9]
 8543 0598 6330     		adds	r0, r0, #99
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8544              		.loc 1 821 56 discriminator 2 view .LVU2736
 8545 059a 9842     		cmp	r0, r3
 8546 059c FFF6CEAD 		blt	.L766
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8547              		.loc 1 821 101 discriminator 4 view .LVU2737
 8548 05a0 FFF7FEFF 		bl	get_cmdline
 8549              	.LVL970:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8550              		.loc 1 821 98 discriminator 4 view .LVU2738
 8551 05a4 18B1     		cbz	r0, .L769
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8552              		.loc 1 822 7 view .LVU2739
ARM GAS  /tmp/ccPv3rzq.s 			page 259


 8553 05a6 37B3     		cbz	r7, .L768
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8554              		.loc 1 822 28 discriminator 1 view .LVU2740
 8555 05a8 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8556              		.loc 1 822 10 discriminator 1 view .LVU2741
 8557 05aa 5806     		lsls	r0, r3, #25
 8558 05ac 23D4     		bmi	.L768
 8559              	.L769:
 8560 05ae D9F80030 		ldr	r3, [r9]
 8561 05b2 C3E5     		b	.L766
 8562              	.LVL971:
 8563              	.L876:
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8564              		.loc 1 822 10 discriminator 1 view .LVU2742
 8565              	.LBE492:
 661:src/display.c **** 	  if (State2.wascomplex) {
 8566              		.loc 1 661 28 discriminator 1 view .LVU2743
 8567 05b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 661:src/display.c **** 	  if (State2.wascomplex) {
 8568              		.loc 1 661 24 discriminator 1 view .LVU2744
 8569 05b6 13F0C00F 		tst	r3, #192
 8570 05ba 1AD1     		bne	.L798
 661:src/display.c **** 	  if (State2.wascomplex) {
 8571              		.loc 1 661 60 discriminator 2 view .LVU2745
 8572 05bc 114B     		ldr	r3, .L889
 8573 05be 1B68     		ldr	r3, [r3]
 661:src/display.c **** 	  if (State2.wascomplex) {
 8574              		.loc 1 661 46 discriminator 2 view .LVU2746
 8575 05c0 002B     		cmp	r3, #0
 8576 05c2 3FF4F7AD 		beq	.L744
 662:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8577              		.loc 1 662 4 is_stmt 1 view .LVU2747
 665:src/display.c **** 	    if (RectPolConv == 1) {
 8578              		.loc 1 665 9 view .LVU2748
 666:src/display.c **** 	      q = "\007\306<";
 8579              		.loc 1 666 6 view .LVU2749
 670:src/display.c **** 	    }
 8580              		.loc 1 670 10 is_stmt 0 view .LVU2750
 8581 05c6 1049     		ldr	r1, .L889+4
 8582 05c8 104A     		ldr	r2, .L889+8
 8583 05ca 012B     		cmp	r3, #1
 8584 05cc 18BF     		it	ne
 8585 05ce 1146     		movne	r1, r2
 8586              	.L745:
 8587              	.LVL972:
 673:src/display.c **** 
 8588              		.loc 1 673 4 is_stmt 1 view .LVU2751
 673:src/display.c **** 
 8589              		.loc 1 673 8 is_stmt 0 view .LVU2752
 8590 05d0 3046     		mov	r0, r6
 8591              	.LVL973:
 673:src/display.c **** 
 8592              		.loc 1 673 8 view .LVU2753
 8593 05d2 FFF7FEFF 		bl	scopy
 8594              	.LVL974:
 673:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 260


 8595              		.loc 1 673 8 view .LVU2754
 8596 05d6 8046     		mov	r8, r0
 8597              	.LVL975:
 675:src/display.c **** 	}
 8598              		.loc 1 675 4 is_stmt 1 view .LVU2755
 8599 05d8 86E6     		b	.L727
 8600              	.LVL976:
 8601              	.L800:
 684:src/display.c **** #endif
 8602              		.loc 1 684 19 is_stmt 0 view .LVU2756
 8603 05da 0D49     		ldr	r1, .L889+12
 8604 05dc F7E5     		b	.L746
 8605              	.LVL977:
 8606              	.L863:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8607              		.loc 1 615 4 is_stmt 1 view .LVU2757
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8608              		.loc 1 615 11 is_stmt 0 view .LVU2758
 8609 05de 0293     		str	r3, [sp, #8]
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8610              		.loc 1 615 27 is_stmt 1 view .LVU2759
 8611 05e0 6FE6     		b	.L794
 8612              	.LVL978:
 8613              	.L877:
 695:src/display.c **** 	}
 8614              		.loc 1 695 4 view .LVU2760
 8615 05e2 0C49     		ldr	r1, .L889+16
 8616 05e4 2046     		mov	r0, r4
 8617 05e6 FFF7FEFF 		bl	scopy
 8618              	.LVL979:
 8619 05ea F8E5     		b	.L737
 8620              	.LVL980:
 8621              	.L776:
 695:src/display.c **** 	}
 8622              		.loc 1 695 4 is_stmt 0 view .LVU2761
 8623 05ec D9F80010 		ldr	r1, [r9]
 8624 05f0 8FE6     		b	.L774
 8625              	.LVL981:
 8626              	.L798:
 663:src/display.c **** 	  }
 8627              		.loc 1 663 8 view .LVU2762
 8628 05f2 0949     		ldr	r1, .L889+20
 8629 05f4 ECE7     		b	.L745
 8630              	.LVL982:
 8631              	.L768:
 8632              	.LBB493:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8633              		.loc 1 821 6 discriminator 7 view .LVU2763
 8634 05f6 D9F80000 		ldr	r0, [r9]
 8635 05fa A0E5     		b	.L770
 8636              	.LVL983:
 8637              	.L809:
 8638              	.LBB478:
 881:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8639              		.loc 1 881 25 view .LVU2764
 8640 05fc 4FF03E09 		mov	r9, #62
 8641              	.LVL984:
ARM GAS  /tmp/ccPv3rzq.s 			page 261


 881:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8642              		.loc 1 881 25 view .LVU2765
 8643 0600 11E7     		b	.L787
 8644              	.L890:
 8645 0602 00BF     		.align	2
 8646              	.L889:
 8647 0604 00000000 		.word	RectPolConv
 8648 0608 04000000 		.word	.LC3
 8649 060c 0C000000 		.word	.LC5
 8650 0610 14000000 		.word	.LC7
 8651 0614 50000000 		.word	.LC16
 8652 0618 08000000 		.word	.LC4
 8653              	.LBE478:
 8654              	.LBE493:
 8655              		.cfi_endproc
 8656              	.LFE16:
 8658              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8659              		.align	2
 8660              	.LC22:
 8661 0000 0D00     		.ascii	"\015\000"
 8662 0002 0000     		.align	2
 8663              	.LC23:
 8664 0004 060600   		.ascii	"\006\006\000"
 8665 0007 00       		.align	2
 8666              	.LC25:
 8667 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8667      492C2057 
 8667      77414C74 
 8667      4500
 8668 0016 0000     		.align	2
 8669              	.LC26:
 8670 0018 48595000 		.ascii	"HYP\000"
 8671              		.align	2
 8672              	.LC27:
 8673 001c 7F060600 		.ascii	"\177\006\006\000"
 8674              		.align	2
 8675              	.LC30:
 8676 0020 3020746F 		.ascii	"0 to 255\000"
 8676      20323535 
 8676      00
 8677 0029 000000   		.align	2
 8678              	.LC31:
 8679 002c 46726565 		.ascii	"Free:\000"
 8679      3A00
 8680 0032 0000     		.align	2
 8681              	.LC32:
 8682 0034 202C2046 		.ascii	" , FL. \000"
 8682      4C2E2000 
 8683              		.align	2
 8684              	.LC33:
 8685 003c 52656773 		.ascii	"Regs:\000"
 8685      3A00
 8686 0042 0000     		.align	2
 8687              	.LC34:
 8688 0044 20910606 		.ascii	" \221\006\006+\000"
 8688      2B00
 8689 004a 0000     		.align	2
ARM GAS  /tmp/ccPv3rzq.s 			page 262


 8690              	.LC35:
 8691 004c 202C204C 		.ascii	" , Loc. \000"
 8691      6F632E20 
 8691      00
 8692 0055 000000   		.align	2
 8693              	.LC36:
 8694 0058 464C2000 		.ascii	"FL \000"
 8695              		.align	2
 8696              	.LC37:
 8697 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8697      06413A44 
 8697      064C494A 
 8697      4B00
 8698 006a 0000     		.align	2
 8699              	.LC38:
 8700 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8700      302D2E31 
 8700      3500
 8701 0076 0000     		.align	2
 8702              	.LC39:
 8703 0078 43414C4C 		.ascii	"CALLS\000"
 8703      5300
 8704 007e 0000     		.align	2
 8705              	.LC40:
 8706 0080 52656720 		.ascii	"Reg \000"
 8706      00
 8707 0085 000000   		.align	2
 8708              	.LC41:
 8709 0088 00       		.ascii	"\000"
 8710 0089 000000   		.align	2
 8711              	.LC42:
 8712 008c 202D2D2D 		.ascii	" ---\000"
 8712      00
 8713 0091 000000   		.align	2
 8714              	.LC29:
 8715 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8715      093E0A00 
 8716              		.align	2
 8717              	.LC28:
 8718 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8718      41424344 
 8718      4C494A4B 
 8718      00
 8719              		.section	.text.display,"ax",%progbits
 8720              		.align	1
 8721              		.p2align 2,,3
 8722              		.global	display
 8723              		.syntax unified
 8724              		.thumb
 8725              		.thumb_func
 8726              		.fpu fpv4-sp-d16
 8728              	display:
 8729              	.LFB33:
2585:src/display.c **** 	int i, j;
 8730              		.loc 1 2585 26 is_stmt 1 view -0
 8731              		.cfi_startproc
 8732              		@ args = 0, pretend = 0, frame = 160
ARM GAS  /tmp/ccPv3rzq.s 			page 263


 8733              		@ frame_needed = 0, uses_anonymous_args = 0
2586:src/display.c **** 	char buf[40], *bp = buf;
 8734              		.loc 1 2586 2 view .LVU2767
2587:src/display.c **** 	const char *p;
 8735              		.loc 1 2587 2 view .LVU2768
2585:src/display.c **** 	int i, j;
 8736              		.loc 1 2585 26 is_stmt 0 view .LVU2769
 8737 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8738              		.cfi_def_cfa_offset 36
 8739              		.cfi_offset 4, -36
 8740              		.cfi_offset 5, -32
 8741              		.cfi_offset 6, -28
 8742              		.cfi_offset 7, -24
 8743              		.cfi_offset 8, -20
 8744              		.cfi_offset 9, -16
 8745              		.cfi_offset 10, -12
 8746              		.cfi_offset 11, -8
 8747              		.cfi_offset 14, -4
2590:src/display.c **** 	int skip = 0;
 8748              		.loc 1 2590 24 view .LVU2770
 8749 0004 BE4C     		ldr	r4, .L1225
2595:src/display.c **** 	if (State2.disp_freeze) {
 8750              		.loc 1 2595 16 view .LVU2771
 8751 0006 BF4F     		ldr	r7, .L1225+4
2590:src/display.c **** 	int skip = 0;
 8752              		.loc 1 2590 24 view .LVU2772
 8753 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
2585:src/display.c **** 	int i, j;
 8754              		.loc 1 2585 26 view .LVU2773
 8755 000c A9B0     		sub	sp, sp, #164
 8756              		.cfi_def_cfa_offset 200
 8757              	.LVL985:
2588:src/display.c **** 	int annuc = 0;
 8758              		.loc 1 2588 2 is_stmt 1 view .LVU2774
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8759              		.loc 1 2589 2 view .LVU2775
2590:src/display.c **** 	int skip = 0;
 8760              		.loc 1 2590 2 view .LVU2776
2591:src/display.c **** 	int x_disp = 0;
 8761              		.loc 1 2591 2 view .LVU2777
2592:src/display.c **** 	const int shift = cur_shift();
 8762              		.loc 1 2592 2 view .LVU2778
2593:src/display.c **** 
 8763              		.loc 1 2593 2 view .LVU2779
2593:src/display.c **** 
 8764              		.loc 1 2593 20 is_stmt 0 view .LVU2780
 8765 000e FFF7FEFF 		bl	cur_shift
 8766              	.LVL986:
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8767              		.loc 1 2596 6 view .LVU2781
 8768 0012 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
2595:src/display.c **** 	if (State2.disp_freeze) {
 8769              		.loc 1 2595 16 view .LVU2782
 8770 0014 0021     		movs	r1, #0
 8771              	.LVL987:
2595:src/display.c **** 	if (State2.disp_freeze) {
 8772              		.loc 1 2595 2 is_stmt 1 view .LVU2783
ARM GAS  /tmp/ccPv3rzq.s 			page 264


2596:src/display.c **** 	  State2.disp_freeze = 0;
 8773              		.loc 1 2596 5 is_stmt 0 view .LVU2784
 8774 0016 12F01005 		ands	r5, r2, #16
2595:src/display.c **** 	if (State2.disp_freeze) {
 8775              		.loc 1 2595 16 view .LVU2785
 8776 001a 3980     		strh	r1, [r7]	@ movhi
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8777              		.loc 1 2596 2 is_stmt 1 view .LVU2786
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8778              		.loc 1 2596 5 is_stmt 0 view .LVU2787
 8779 001c 40F0A380 		bne	.L1184
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8780              		.loc 1 2606 2 is_stmt 1 view .LVU2788
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8781              		.loc 1 2606 6 is_stmt 0 view .LVU2789
 8782 0020 DFF81083 		ldr	r8, .L1225+52
 8783 0024 D8F80060 		ldr	r6, [r8]
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8784              		.loc 1 2606 5 view .LVU2790
 8785 0028 002E     		cmp	r6, #0
 8786 002a 5BD1     		bne	.L1185
2620:src/display.c **** #  endif
 8787              		.loc 1 2620 2 is_stmt 1 view .LVU2791
2620:src/display.c **** #  endif
 8788              		.loc 1 2620 33 is_stmt 0 view .LVU2792
 8789 002c DFF800B3 		ldr	fp, .L1225+48
 8790 0030 0090     		str	r0, [sp]
 8791 0032 DBF80020 		ldr	r2, [fp]
 8792 0036 92F8EA57 		ldrb	r5, [r2, #2026]	@ zero_extendqisi2
2626:src/display.c **** 
 8793              		.loc 1 2626 2 view .LVU2793
 8794 003a FFF7FEFF 		bl	reset_disp
 8795              	.LVL988:
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8796              		.loc 1 2629 2 view .LVU2794
 8797 003e 2822     		movs	r2, #40
 8798 0040 1EA8     		add	r0, sp, #120
 8799              	.LVL989:
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8800              		.loc 1 2629 2 view .LVU2795
 8801 0042 3146     		mov	r1, r6
 8802 0044 FFF7FEFF 		bl	xset
 8803              	.LVL990:
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8804              		.loc 1 2635 6 view .LVU2796
 8805 0048 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8806              		.loc 1 2635 5 view .LVU2797
 8807 004a 009B     		ldr	r3, [sp]
 8808 004c 12F0100F 		tst	r2, #16
2620:src/display.c **** #  endif
 8809              		.loc 1 2620 12 view .LVU2798
 8810 0050 C5F38005 		ubfx	r5, r5, #2, #1
 8811              	.LVL991:
2626:src/display.c **** 
 8812              		.loc 1 2626 2 is_stmt 1 view .LVU2799
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
ARM GAS  /tmp/ccPv3rzq.s 			page 265


 8813              		.loc 1 2629 2 view .LVU2800
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8814              		.loc 1 2635 2 view .LVU2801
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8815              		.loc 1 2635 5 is_stmt 0 view .LVU2802
 8816 0054 40F07281 		bne	.L1186
2643:src/display.c **** 	  if (yreg_enabled) {
 8817              		.loc 1 2643 9 is_stmt 1 view .LVU2803
2643:src/display.c **** 	  if (yreg_enabled) {
 8818              		.loc 1 2643 13 is_stmt 0 view .LVU2804
 8819 0058 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
2643:src/display.c **** 	  if (yreg_enabled) {
 8820              		.loc 1 2643 12 view .LVU2805
 8821 005a 4807     		lsls	r0, r1, #29
 8822 005c 00F08D80 		beq	.L898
2644:src/display.c **** 	    set_status_top(S_SURE);
 8823              		.loc 1 2644 4 is_stmt 1 view .LVU2806
2644:src/display.c **** 	    set_status_top(S_SURE);
 8824              		.loc 1 2644 7 is_stmt 0 view .LVU2807
 8825 0060 002D     		cmp	r5, #0
 8826 0062 00F09A81 		beq	.L899
2645:src/display.c **** 	    no_status_top = 1;
 8827              		.loc 1 2645 6 is_stmt 1 view .LVU2808
 8828              	.LVL992:
 8829              	.LBB555:
 8830              	.LBI555:
3524:src/display.c **** 	if (no_status_top) return;
 8831              		.loc 1 3524 19 view .LVU2809
 8832              	.LBB556:
3525:src/display.c **** 	if (State2.runmode) {
 8833              		.loc 1 3525 2 view .LVU2810
3525:src/display.c **** 	if (State2.runmode) {
 8834              		.loc 1 3525 5 is_stmt 0 view .LVU2811
 8835 0066 B7F90030 		ldrsh	r3, [r7]
 8836 006a 13B9     		cbnz	r3, .L901
 8837 006c A648     		ldr	r0, .L1225+8
 8838 006e FFF7FEFF 		bl	set_status_top.part.0
 8839              	.LVL993:
 8840              	.L901:
3525:src/display.c **** 	if (State2.runmode) {
 8841              		.loc 1 3525 5 view .LVU2812
 8842              	.LBE556:
 8843              	.LBE555:
2646:src/display.c **** 	    annuc = 1;
 8844              		.loc 1 2646 6 is_stmt 1 view .LVU2813
2646:src/display.c **** 	    annuc = 1;
 8845              		.loc 1 2646 20 is_stmt 0 view .LVU2814
 8846 0072 0126     		movs	r6, #1
 8847 0074 3E80     		strh	r6, [r7]	@ movhi
2647:src/display.c **** 	  }
 8848              		.loc 1 2647 6 is_stmt 1 view .LVU2815
 8849              	.LVL994:
2870:src/display.c ****       nostk:
 8850              		.loc 1 2870 2 view .LVU2816
 8851 0076 FFF7FEFF 		bl	show_stack
 8852              	.LVL995:
2872:src/display.c **** 	if (!skip) {
ARM GAS  /tmp/ccPv3rzq.s 			page 266


 8853              		.loc 1 2872 2 view .LVU2817
 8854 007a A44B     		ldr	r3, .L1225+12
 8855 007c DFF8B8A2 		ldr	r10, .L1225+56
 8856 0080 0093     		str	r3, [sp]
 8857 0082 FFF7FEFF 		bl	show_flags
 8858              	.LVL996:
2873:src/display.c **** 	  if (State2.runmode) {
 8859              		.loc 1 2873 2 view .LVU2818
 8860              	.L902:
2874:src/display.c **** 	  only_update_x:
 8861              		.loc 1 2874 4 view .LVU2819
2874:src/display.c **** 	  only_update_x:
 8862              		.loc 1 2874 8 is_stmt 0 view .LVU2820
 8863 0086 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2874:src/display.c **** 	  only_update_x:
 8864              		.loc 1 2874 7 view .LVU2821
 8865 0088 11F04005 		ands	r5, r1, #64
 8866 008c 33D1     		bne	.L895
 8867              	.LBB557:
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8868              		.loc 1 2914 6 is_stmt 1 view .LVU2822
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8869              		.loc 1 2914 24 is_stmt 0 view .LVU2823
 8870 008e DBF80030 		ldr	r3, [fp]
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8871              		.loc 1 2914 19 view .LVU2824
 8872 0092 B3F8E097 		ldrh	r9, [r3, #2016]
 8873              	.LVL997:
2915:src/display.c **** 	    const int n = nLIB(pc);
 8874              		.loc 1 2915 6 is_stmt 1 view .LVU2825
2915:src/display.c **** 	    const int n = nLIB(pc);
 8875              		.loc 1 2915 25 is_stmt 0 view .LVU2826
 8876 0096 4846     		mov	r0, r9
 8877 0098 FFF7FEFF 		bl	user_pc
 8878              	.LVL998:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8879              		.loc 1 2917 6 view .LVU2827
 8880 009c 2822     		movs	r2, #40
 8881 009e 2946     		mov	r1, r5
2915:src/display.c **** 	    const int n = nLIB(pc);
 8882              		.loc 1 2915 25 view .LVU2828
 8883 00a0 8346     		mov	fp, r0
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8884              		.loc 1 2917 6 view .LVU2829
 8885 00a2 1EA8     		add	r0, sp, #120
 8886              	.LVL999:
2916:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8887              		.loc 1 2916 6 is_stmt 1 view .LVU2830
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8888              		.loc 1 2917 6 is_stmt 0 view .LVU2831
 8889 00a4 FFF7FEFF 		bl	xset
 8890              	.LVL1000:
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8891              		.loc 1 2918 6 view .LVU2832
 8892 00a8 994B     		ldr	r3, .L1225+16
2916:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8893              		.loc 1 2916 20 view .LVU2833
ARM GAS  /tmp/ccPv3rzq.s 			page 267


 8894 00aa 4FEA9939 		lsr	r9, r9, #14
 8895              	.LVL1001:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8896              		.loc 1 2917 6 is_stmt 1 view .LVU2834
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8897              		.loc 1 2918 6 view .LVU2835
 8898 00ae 1868     		ldr	r0, [r3]
 8899 00b0 2A46     		mov	r2, r5
 8900 00b2 0121     		movs	r1, #1
 8901 00b4 FFF7FEFF 		bl	set_exp
 8902              	.LVL1002:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8903              		.loc 1 2919 6 view .LVU2836
 8904 00b8 B9F1000F 		cmp	r9, #0
 8905 00bc 40F0C881 		bne	.L1187
 8906 00c0 9449     		ldr	r1, .L1225+20
 8907              	.L1031:
 8908 00c2 954D     		ldr	r5, .L1225+24
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8909              		.loc 1 2919 6 is_stmt 0 discriminator 4 view .LVU2837
 8910 00c4 1EA8     		add	r0, sp, #120
 8911 00c6 FFF7FEFF 		bl	scopy_spc
 8912              	.LVL1003:
2920:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 8913              		.loc 1 2920 21 discriminator 4 view .LVU2838
 8914 00ca 09F00102 		and	r2, r9, #1
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8915              		.loc 1 2919 6 discriminator 4 view .LVU2839
 8916 00ce 5946     		mov	r1, fp
 8917 00d0 0332     		adds	r2, r2, #3
 8918 00d2 FFF7FEFF 		bl	num_arg_0
 8919              	.LVL1004:
2921:src/display.c **** #if 0
 8920              		.loc 1 2921 6 is_stmt 1 discriminator 4 view .LVU2840
 8921 00d6 1EA8     		add	r0, sp, #120
 8922 00d8 0921     		movs	r1, #9
 8923 00da FFF7FEFF 		bl	set_digits_string
 8924              	.LVL1005:
 8925              	.L1181:
2921:src/display.c **** #if 0
 8926              		.loc 1 2921 6 is_stmt 0 discriminator 4 view .LVU2841
 8927              	.LBE557:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8928              		.loc 1 2942 2 is_stmt 1 discriminator 4 view .LVU2842
 8929 00de FFF7FEFF 		bl	set_annunciators
 8930              	.LVL1006:
2943:src/display.c **** 	  ShowRPN = 0;
 8931              		.loc 1 2943 2 discriminator 4 view .LVU2843
 8932 00e2 AFE0     		b	.L897
 8933              	.LVL1007:
 8934              	.L1185:
2607:src/display.c **** 
 8935              		.loc 1 2607 4 view .LVU2844
 8936 00e4 FFF7FEFF 		bl	wait_for_display
 8937              	.LVL1008:
2613:src/display.c **** 	  goto only_update_x;
 8938              		.loc 1 2613 4 view .LVU2845
ARM GAS  /tmp/ccPv3rzq.s 			page 268


 8939 00e8 DFF84CA2 		ldr	r10, .L1225+56
 8940 00ec FFF7FEFF 		bl	reset_7_segment
 8941              	.LVL1009:
2614:src/display.c **** 	}
 8942              		.loc 1 2614 4 view .LVU2846
 8943 00f0 864B     		ldr	r3, .L1225+12
 8944 00f2 0093     		str	r3, [sp]
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8945              		.loc 1 2589 6 is_stmt 0 view .LVU2847
 8946 00f4 2E46     		mov	r6, r5
 8947              	.LVL1010:
 8948              	.L895:
2876:src/display.c **** 	    if (p == NULL || cata) {
 8949              		.loc 1 2876 6 is_stmt 1 view .LVU2848
2876:src/display.c **** 	    if (p == NULL || cata) {
 8950              		.loc 1 2876 10 is_stmt 0 view .LVU2849
 8951 00f6 FFF7FEFF 		bl	get_cmdline
 8952              	.LVL1011:
2877:src/display.c **** 	      if (ShowRegister != -1) {
 8953              		.loc 1 2877 6 is_stmt 1 view .LVU2850
2877:src/display.c **** 	      if (ShowRegister != -1) {
 8954              		.loc 1 2877 9 is_stmt 0 view .LVU2851
 8955 00fa 0546     		mov	r5, r0
 8956 00fc 10B1     		cbz	r0, .L989
2877:src/display.c **** 	      if (ShowRegister != -1) {
 8957              		.loc 1 2877 20 discriminator 1 view .LVU2852
 8958 00fe B9F1000F 		cmp	r9, #0
 8959 0102 78D0     		beq	.L990
 8960              	.L989:
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 8961              		.loc 1 2878 8 is_stmt 1 view .LVU2853
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 8962              		.loc 1 2878 25 is_stmt 0 view .LVU2854
 8963 0104 844D     		ldr	r5, .L1225+24
 8964 0106 2868     		ldr	r0, [r5]
 8965              	.LVL1012:
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 8966              		.loc 1 2878 11 view .LVU2855
 8967 0108 411C     		adds	r1, r0, #1
 8968 010a 00F03C81 		beq	.L991
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8969              		.loc 1 2880 3 is_stmt 1 view .LVU2856
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8970              		.loc 1 2880 8 is_stmt 0 view .LVU2857
 8971 010e DFF82092 		ldr	r9, .L1225+48
 8972 0112 D9F80020 		ldr	r2, [r9]
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8973              		.loc 1 2880 34 view .LVU2858
 8974 0116 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8975              		.loc 1 2880 6 view .LVU2859
 8976 011a 03F0C703 		and	r3, r3, #199
 8977 011e C12B     		cmp	r3, #193
 8978 0120 00F0CC80 		beq	.L1188
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8979              		.loc 1 2896 5 is_stmt 1 view .LVU2860
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/ccPv3rzq.s 			page 269


 8980              		.loc 1 2896 41 is_stmt 0 view .LVU2861
 8981 0124 6428     		cmp	r0, #100
 8982 0126 00F07D81 		beq	.L1189
 8983              	.L997:
2897:src/display.c **** 		}
 8984              		.loc 1 2897 5 is_stmt 1 view .LVU2862
 8985 012a 0021     		movs	r1, #0
 8986 012c FFF7FEFF 		bl	format_reg
 8987              	.LVL1013:
2910:src/display.c **** 	      goto finish;
 8988              		.loc 1 2910 6 view .LVU2863
2910:src/display.c **** 	      goto finish;
 8989              		.loc 1 2910 9 is_stmt 0 view .LVU2864
 8990 0130 D8F80030 		ldr	r3, [r8]
 8991 0134 002B     		cmp	r3, #0
 8992 0136 D2D0     		beq	.L1181
 8993              	.LVL1014:
 8994              	.L995:
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 8995              		.loc 1 2961 2 is_stmt 1 view .LVU2865
2962:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8996              		.loc 1 2962 2 view .LVU2866
2963:src/display.c **** 	State2.invalid_disp = 0;
 8997              		.loc 1 2963 2 view .LVU2867
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 8998              		.loc 1 2961 17 is_stmt 0 view .LVU2868
 8999 0138 6369     		ldr	r3, [r4, #20]
2967:src/display.c **** 	State2.disp_small = 0;
 9000              		.loc 1 2967 11 view .LVU2869
 9001 013a 0099     		ldr	r1, [sp]
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9002              		.loc 1 2961 17 view .LVU2870
 9003 013c 23F02173 		bic	r3, r3, #42205184
 9004 0140 23F48053 		bic	r3, r3, #4096
2963:src/display.c **** 	State2.invalid_disp = 0;
 9005              		.loc 1 2963 15 view .LVU2871
 9006 0144 0022     		movs	r2, #0
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9007              		.loc 1 2961 17 view .LVU2872
 9008 0146 6361     		str	r3, [r4, #20]
2965:src/display.c **** 	DispMsg = CNULL;
 9009              		.loc 1 2965 15 view .LVU2873
 9010 0148 6423     		movs	r3, #100
2963:src/display.c **** 	State2.invalid_disp = 0;
 9011              		.loc 1 2963 15 view .LVU2874
 9012 014a 6274     		strb	r2, [r4, #17]
2964:src/display.c **** 	ShowRegister = regX_idx;
 9013              		.loc 1 2964 2 is_stmt 1 view .LVU2875
2965:src/display.c **** 	DispMsg = CNULL;
 9014              		.loc 1 2965 2 view .LVU2876
2966:src/display.c **** 	DispPlot = 0;
 9015              		.loc 1 2966 10 is_stmt 0 view .LVU2877
 9016 014c CAF80020 		str	r2, [r10]
2967:src/display.c **** 	State2.disp_small = 0;
 9017              		.loc 1 2967 11 view .LVU2878
 9018 0150 0A80     		strh	r2, [r1]	@ movhi
2965:src/display.c **** 	DispMsg = CNULL;
ARM GAS  /tmp/ccPv3rzq.s 			page 270


 9019              		.loc 1 2965 15 view .LVU2879
 9020 0152 2B60     		str	r3, [r5]
2966:src/display.c **** 	DispPlot = 0;
 9021              		.loc 1 2966 2 is_stmt 1 view .LVU2880
2967:src/display.c **** 	State2.disp_small = 0;
 9022              		.loc 1 2967 2 view .LVU2881
2968:src/display.c **** 	if (WasDataEntry) {
 9023              		.loc 1 2968 2 view .LVU2882
2969:src/display.c **** 	  finish_7_segment();
 9024              		.loc 1 2969 2 view .LVU2883
 9025              	.L1041:
2970:src/display.c **** 	  lcd_refresh();
 9026              		.loc 1 2970 4 view .LVU2884
 9027 0154 FFF7FEFF 		bl	finish_7_segment
 9028              	.LVL1015:
2971:src/display.c **** 	}
 9029              		.loc 1 2971 4 view .LVU2885
 9030 0158 704B     		ldr	r3, .L1225+28
 9031 015a 9847     		blx	r3
 9032              	.LVL1016:
 9033              	.L1038:
2976:src/display.c **** #ifdef CONSOLE
 9034              		.loc 1 2976 2 view .LVU2886
2976:src/display.c **** #ifdef CONSOLE
 9035              		.loc 1 2976 16 is_stmt 0 view .LVU2887
 9036 015c 0023     		movs	r3, #0
 9037 015e 3B80     		strh	r3, [r7]	@ movhi
2980:src/display.c **** #else
 9038              		.loc 1 2980 7 view .LVU2888
 9039 0160 29B0     		add	sp, sp, #164
 9040              		.cfi_remember_state
 9041              		.cfi_def_cfa_offset 36
 9042              		@ sp needed
 9043 0162 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9044              	.LVL1017:
 9045              	.L1184:
 9046              		.cfi_restore_state
2597:src/display.c **** 	  State2.disp_temp = 1;
 9047              		.loc 1 2597 4 is_stmt 1 view .LVU2889
2598:src/display.c **** #ifdef CONSOLE
 9048              		.loc 1 2598 4 view .LVU2890
2602:src/display.c **** 	  return;
 9049              		.loc 1 2602 12 is_stmt 0 view .LVU2891
 9050 0166 6E4B     		ldr	r3, .L1225+32
2597:src/display.c **** 	  State2.disp_temp = 1;
 9051              		.loc 1 2597 23 view .LVU2892
 9052 0168 22F03002 		bic	r2, r2, #48
 9053 016c 42F02002 		orr	r2, r2, #32
 9054 0170 E275     		strb	r2, [r4, #23]
2602:src/display.c **** 	  return;
 9055              		.loc 1 2602 4 is_stmt 1 view .LVU2893
2602:src/display.c **** 	  return;
 9056              		.loc 1 2602 12 is_stmt 0 view .LVU2894
 9057 0172 1960     		str	r1, [r3]
2603:src/display.c **** 	}
 9058              		.loc 1 2603 4 is_stmt 1 view .LVU2895
2980:src/display.c **** #else
ARM GAS  /tmp/ccPv3rzq.s 			page 271


 9059              		.loc 1 2980 7 is_stmt 0 view .LVU2896
 9060 0174 29B0     		add	sp, sp, #164
 9061              		.cfi_remember_state
 9062              		.cfi_def_cfa_offset 36
 9063              		@ sp needed
 9064 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9065              	.LVL1018:
 9066              	.L898:
 9067              		.cfi_restore_state
2652:src/display.c **** 	  bp = scopy(bp, "HYP");
 9068              		.loc 1 2652 9 is_stmt 1 view .LVU2897
2652:src/display.c **** 	  bp = scopy(bp, "HYP");
 9069              		.loc 1 2652 12 is_stmt 0 view .LVU2898
 9070 017a 9106     		lsls	r1, r2, #26
 9071 017c 00F11981 		bmi	.L1190
2664:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9072              		.loc 1 2664 9 is_stmt 1 view .LVU2899
2664:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9073              		.loc 1 2664 12 is_stmt 0 view .LVU2900
 9074 0180 D007     		lsls	r0, r2, #31
 9075 0182 00F16A81 		bmi	.L1191
2679:src/display.c **** 	  /* Commands with arguments */
 9076              		.loc 1 2679 9 is_stmt 1 view .LVU2901
2679:src/display.c **** 	  /* Commands with arguments */
 9077              		.loc 1 2679 13 is_stmt 0 view .LVU2902
 9078 0186 A07D     		ldrb	r0, [r4, #22]	@ zero_extendqisi2
2679:src/display.c **** 	  /* Commands with arguments */
 9079              		.loc 1 2679 12 view .LVU2903
 9080 0188 8106     		lsls	r1, r0, #26
 9081 018a 40F11D81 		bpl	.L910
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9082              		.loc 1 2682 4 is_stmt 1 view .LVU2904
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9083              		.loc 1 2682 8 is_stmt 0 view .LVU2905
 9084 018e E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9085              		.loc 1 2682 7 view .LVU2906
 9086 0190 4D2A     		cmp	r2, #77
 9087 0192 00F0A281 		beq	.L911
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9088              		.loc 1 2682 28 discriminator 1 view .LVU2907
 9089 0196 02F16C01 		add	r1, r2, #108
 9090 019a C9B2     		uxtb	r1, r1
 9091 019c 0129     		cmp	r1, #1
 9092 019e 40F29C81 		bls	.L911
2587:src/display.c **** 	const char *p;
 9093              		.loc 1 2587 17 view .LVU2908
 9094 01a2 1EA8     		add	r0, sp, #120
 9095              	.LVL1019:
 9096              	.L912:
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9097              		.loc 1 2685 4 is_stmt 1 view .LVU2909
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9098              		.loc 1 2685 35 is_stmt 0 view .LVU2910
 9099 01a4 4FF0060C 		mov	ip, #6
 9100 01a8 5E49     		ldr	r1, .L1225+36
 9101 01aa 0093     		str	r3, [sp]
ARM GAS  /tmp/ccPv3rzq.s 			page 272


 9102 01ac 0CEB0212 		add	r2, ip, r2, lsl #4
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9103              		.loc 1 2685 9 view .LVU2911
 9104 01b0 1144     		add	r1, r1, r2
 9105 01b2 FFF7FEFF 		bl	scopy
 9106              	.LVL1020:
2686:src/display.c **** 	  if (State2.dot) {
 9107              		.loc 1 2686 4 is_stmt 1 view .LVU2912
2686:src/display.c **** 	  if (State2.dot) {
 9108              		.loc 1 2686 9 is_stmt 0 view .LVU2913
 9109 01b6 5C4A     		ldr	r2, .L1225+40
 9110 01b8 94F915C0 		ldrsb	ip, [r4, #21]
 9111 01bc 5B49     		ldr	r1, .L1225+44
 9112 01be 11EA2C01 		ands	r1, r1, ip, asr #32
 9113 01c2 38BF     		it	cc
 9114 01c4 1146     		movcc	r1, r2
 9115 01c6 FFF7FEFF 		bl	scopy
 9116              	.LVL1021:
2687:src/display.c **** 	    *bp++ = 's';
 9117              		.loc 1 2687 8 view .LVU2914
 9118 01ca 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 9119              	.LVL1022:
2687:src/display.c **** 	    *bp++ = 's';
 9120              		.loc 1 2687 4 is_stmt 1 view .LVU2915
2687:src/display.c **** 	    *bp++ = 's';
 9121              		.loc 1 2687 7 is_stmt 0 view .LVU2916
 9122 01cc 009B     		ldr	r3, [sp]
 9123 01ce 12F0400F 		tst	r2, #64
 9124 01d2 00F08A81 		beq	.L914
2688:src/display.c **** 	    *bp++ = '_';
 9125              		.loc 1 2688 6 is_stmt 1 view .LVU2917
 9126              	.LVL1023:
2688:src/display.c **** 	    *bp++ = '_';
 9127              		.loc 1 2688 12 is_stmt 0 view .LVU2918
 9128 01d6 7322     		movs	r2, #115
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9129              		.loc 1 2689 12 view .LVU2919
 9130 01d8 5F23     		movs	r3, #95
2688:src/display.c **** 	    *bp++ = '_';
 9131              		.loc 1 2688 12 view .LVU2920
 9132 01da 0270     		strb	r2, [r0]
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9133              		.loc 1 2689 6 is_stmt 1 view .LVU2921
 9134              	.LVL1024:
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9135              		.loc 1 2689 12 is_stmt 0 view .LVU2922
 9136 01dc 4370     		strb	r3, [r0, #1]
 9137              	.LVL1025:
 9138              	.L938:
2792:src/display.c **** 	    set_status_top(buf);
 9139              		.loc 1 2792 4 is_stmt 1 view .LVU2923
2792:src/display.c **** 	    set_status_top(buf);
 9140              		.loc 1 2792 7 is_stmt 0 view .LVU2924
 9141 01de 002D     		cmp	r5, #0
 9142 01e0 00F00481 		beq	.L905
 9143              	.L1173:
2793:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccPv3rzq.s 			page 273


 9144              		.loc 1 2793 6 is_stmt 1 view .LVU2925
 9145              	.LVL1026:
 9146              	.LBB558:
 9147              	.LBI558:
3524:src/display.c **** 	if (no_status_top) return;
 9148              		.loc 1 3524 19 view .LVU2926
 9149              	.LBB559:
3525:src/display.c **** 	if (State2.runmode) {
 9150              		.loc 1 3525 2 view .LVU2927
3525:src/display.c **** 	if (State2.runmode) {
 9151              		.loc 1 3525 5 is_stmt 0 view .LVU2928
 9152 01e4 B7F90030 		ldrsh	r3, [r7]
 9153 01e8 002B     		cmp	r3, #0
 9154 01ea 7FF442AF 		bne	.L901
 9155              	.LBE559:
 9156              	.LBE558:
 9157              	.LBB560:
 9158              	.LBB561:
 9159 01ee 1EA8     		add	r0, sp, #120
 9160              	.LVL1027:
3525:src/display.c **** 	if (State2.runmode) {
 9161              		.loc 1 3525 5 view .LVU2929
 9162 01f0 FFF7FEFF 		bl	set_status_top.part.0
 9163              	.LVL1028:
3525:src/display.c **** 	if (State2.runmode) {
 9164              		.loc 1 3525 5 view .LVU2930
 9165 01f4 3DE7     		b	.L901
 9166              	.LVL1029:
 9167              	.L990:
3525:src/display.c **** 	if (State2.runmode) {
 9168              		.loc 1 3525 5 view .LVU2931
 9169              	.LBE561:
 9170              	.LBE560:
2907:src/display.c **** 	      x_disp = 1;
 9171              		.loc 1 2907 8 is_stmt 1 view .LVU2932
 9172              	.LBB562:
 9173              	.LBI562:
1254:src/display.c ****       int i;
 9174              		.loc 1 1254 17 view .LVU2933
 9175              	.LBB563:
1255:src/display.c ****       int gotdot = -1;
 9176              		.loc 1 1255 7 view .LVU2934
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9177              		.loc 1 1256 7 view .LVU2935
1258:src/display.c **** #endif
 9178              		.loc 1 1258 7 view .LVU2936
1262:src/display.c **** #endif
 9179              		.loc 1 1262 7 view .LVU2937
1265:src/display.c **** 	SET_MANT_SIGN;
 9180              		.loc 1 1265 7 view .LVU2938
1265:src/display.c **** 	SET_MANT_SIGN;
 9181              		.loc 1 1265 10 is_stmt 0 view .LVU2939
 9182 01f6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9183 01f8 2D2B     		cmp	r3, #45
 9184 01fa 00F09881 		beq	.L1192
 9185              	.LVL1030:
 9186              	.L1000:
ARM GAS  /tmp/ccPv3rzq.s 			page 274


1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9187              		.loc 1 1270 7 is_stmt 1 view .LVU2940
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9188              		.loc 1 1270 11 is_stmt 0 view .LVU2941
 9189 01fe 4C4B     		ldr	r3, .L1225+48
 9190 0200 1B68     		ldr	r3, [r3]
 9191 0202 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9192              		.loc 1 1270 10 view .LVU2942
 9193 0206 13F0010B 		ands	fp, r3, #1
 9194 020a 00F03681 		beq	.L1001
 9195              	.LVL1031:
1271:src/display.c **** 	  set_dig(i, *p);
 9196              		.loc 1 1271 12 is_stmt 1 view .LVU2943
 9197 020e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1271:src/display.c **** 	  set_dig(i, *p);
 9198              		.loc 1 1271 8 is_stmt 0 view .LVU2944
 9199 0210 4FF00009 		mov	r9, #0
1271:src/display.c **** 	  set_dig(i, *p);
 9200              		.loc 1 1271 2 view .LVU2945
 9201 0214 41B1     		cbz	r1, .L1003
 9202              	.LVL1032:
 9203              	.L1002:
1272:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9204              		.loc 1 1272 4 is_stmt 1 view .LVU2946
 9205 0216 4846     		mov	r0, r9
 9206 0218 FFF7FEFF 		bl	set_dig
 9207              	.LVL1033:
1273:src/display.c **** 	}
 9208              		.loc 1 1273 4 view .LVU2947
1271:src/display.c **** 	  set_dig(i, *p);
 9209              		.loc 1 1271 12 is_stmt 0 view .LVU2948
 9210 021c 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9211              	.LVL1034:
1273:src/display.c **** 	}
 9212              		.loc 1 1273 6 view .LVU2949
 9213 0220 09F10909 		add	r9, r9, #9
 9214              	.LVL1035:
1271:src/display.c **** 	  set_dig(i, *p);
 9215              		.loc 1 1271 24 is_stmt 1 view .LVU2950
1271:src/display.c **** 	  set_dig(i, *p);
 9216              		.loc 1 1271 12 view .LVU2951
1271:src/display.c **** 	  set_dig(i, *p);
 9217              		.loc 1 1271 2 is_stmt 0 view .LVU2952
 9218 0224 0029     		cmp	r1, #0
 9219 0226 F6D1     		bne	.L1002
 9220              	.LVL1036:
 9221              	.L1003:
1275:src/display.c ****       } else {
 9222              		.loc 1 1275 2 is_stmt 1 view .LVU2953
 9223 0228 FFF7FEFF 		bl	carry_overflow
 9224              	.LVL1037:
1275:src/display.c ****       } else {
 9225              		.loc 1 1275 2 is_stmt 0 view .LVU2954
 9226              	.LBE563:
 9227              	.LBE562:
2910:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccPv3rzq.s 			page 275


 9228              		.loc 1 2910 6 is_stmt 1 view .LVU2955
2910:src/display.c **** 	      goto finish;
 9229              		.loc 1 2910 9 is_stmt 0 view .LVU2956
 9230 022c D8F80030 		ldr	r3, [r8]
 9231 0230 394D     		ldr	r5, .L1225+24
 9232 0232 002B     		cmp	r3, #0
 9233 0234 80D1     		bne	.L995
 9234              	.LVL1038:
 9235              	.L996:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9236              		.loc 1 2942 2 is_stmt 1 view .LVU2957
 9237 0236 FFF7FEFF 		bl	set_annunciators
 9238              	.LVL1039:
2943:src/display.c **** 	  ShowRPN = 0;
 9239              		.loc 1 2943 2 view .LVU2958
2943:src/display.c **** 	  ShowRPN = 0;
 9240              		.loc 1 2943 50 is_stmt 0 view .LVU2959
 9241 023a DAF80030 		ldr	r3, [r10]
 9242 023e 002B     		cmp	r3, #0
 9243 0240 00F0E080 		beq	.L1193
 9244              	.LVL1040:
 9245              	.L897:
2944:src/display.c **** 	  dot(RPN, 0);
 9246              		.loc 1 2944 4 is_stmt 1 view .LVU2960
2944:src/display.c **** 	  dot(RPN, 0);
 9247              		.loc 1 2944 12 is_stmt 0 view .LVU2961
 9248 0244 DFF8D890 		ldr	r9, .L1225+32
 9249 0248 0023     		movs	r3, #0
 9250              	.LBB589:
 9251              	.LBB590:
 285:src/display.c **** }
 9252              		.loc 1 285 8 view .LVU2962
 9253 024a 8D20     		movs	r0, #141
 9254              	.LBE590:
 9255              	.LBE589:
2944:src/display.c **** 	  dot(RPN, 0);
 9256              		.loc 1 2944 12 view .LVU2963
 9257 024c C9F80030 		str	r3, [r9]
2945:src/display.c **** 	}
 9258              		.loc 1 2945 4 is_stmt 1 view .LVU2964
 9259              	.LVL1041:
 9260              	.LBB592:
 9261              	.LBI589:
 283:src/display.c ****   if (on)	set_dot(n);
 9262              		.loc 1 283 6 view .LVU2965
 9263              	.LBB591:
 284:src/display.c ****   else	clr_dot(n);
 9264              		.loc 1 284 3 view .LVU2966
 285:src/display.c **** }
 9265              		.loc 1 285 8 view .LVU2967
 9266 0250 FFF7FEFF 		bl	clr_dot
 9267              	.LVL1042:
 9268              	.L1032:
 285:src/display.c **** }
 9269              		.loc 1 285 8 is_stmt 0 view .LVU2968
 9270              	.LBE591:
 9271              	.LBE592:
ARM GAS  /tmp/ccPv3rzq.s 			page 276


2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9272              		.loc 1 2948 2 is_stmt 1 view .LVU2969
2949:src/display.c **** 
 9273              		.loc 1 2949 4 is_stmt 0 view .LVU2970
 9274 0254 D9F80030 		ldr	r3, [r9]
 9275 0258 002B     		cmp	r3, #0
 9276 025a 4ED1     		bne	.L1057
2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9277              		.loc 1 2948 31 view .LVU2971
 9278 025c A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9279 025e 12F04003 		ands	r3, r2, #64
 9280 0262 08D0     		beq	.L1033
2949:src/display.c **** 
 9281              		.loc 1 2949 8 view .LVU2972
 9282 0264 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2949:src/display.c **** 
 9283              		.loc 1 2949 4 view .LVU2973
 9284 0266 1B07     		lsls	r3, r3, #28
 9285 0268 40F18B80 		bpl	.L1059
2949:src/display.c **** 
 9286              		.loc 1 2949 30 discriminator 3 view .LVU2974
 9287 026c 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9288 026e 012B     		cmp	r3, #1
 9289 0270 01D0     		beq	.L1033
2949:src/display.c **** 
 9290              		.loc 1 2949 60 discriminator 5 view .LVU2975
 9291 0272 C2F38003 		ubfx	r3, r2, #2, #1
 9292              	.L1033:
2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9293              		.loc 1 2948 19 discriminator 9 view .LVU2976
 9294 0276 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9295 0278 63F34512 		bfi	r2, r3, #5, #1
 9296 027c E275     		strb	r2, [r4, #23]
2952:src/display.c **** 	  annunciators();
 9297              		.loc 1 2952 2 is_stmt 1 discriminator 9 view .LVU2977
2952:src/display.c **** 	  annunciators();
 9298              		.loc 1 2952 5 is_stmt 0 discriminator 9 view .LVU2978
 9299 027e 002E     		cmp	r6, #0
 9300 0280 36D0     		beq	.L1034
2952:src/display.c **** 	  annunciators();
 9301              		.loc 1 2952 36 discriminator 1 view .LVU2979
 9302 0282 D3B2     		uxtb	r3, r2
2952:src/display.c **** 	  annunciators();
 9303              		.loc 1 2952 13 discriminator 1 view .LVU2980
 9304 0284 03F02103 		and	r3, r3, #33
 9305 0288 202B     		cmp	r3, #32
 9306 028a 31D0     		beq	.L1034
 9307              	.L1035:
2953:src/display.c ****  	State2.hms = 0;
 9308              		.loc 1 2953 4 is_stmt 1 view .LVU2981
 9309 028c FFF7FEFF 		bl	annunciators
 9310              	.LVL1043:
 9311              	.L1036:
2954:src/display.c **** #else
 9312              		.loc 1 2954 3 view .LVU2982
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9313              		.loc 1 2961 17 is_stmt 0 view .LVU2983
ARM GAS  /tmp/ccPv3rzq.s 			page 277


 9314 0290 6369     		ldr	r3, [r4, #20]
2967:src/display.c **** 	State2.disp_small = 0;
 9315              		.loc 1 2967 11 view .LVU2984
 9316 0292 0098     		ldr	r0, [sp]
 9317 0294 D8F80010 		ldr	r1, [r8]
 9318              	.LDL1:
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9319              		.loc 1 2961 2 is_stmt 1 view .LVU2985
2962:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9320              		.loc 1 2962 2 view .LVU2986
2963:src/display.c **** 	State2.invalid_disp = 0;
 9321              		.loc 1 2963 2 view .LVU2987
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9322              		.loc 1 2961 17 is_stmt 0 view .LVU2988
 9323 0298 23F06173 		bic	r3, r3, #58982400
 9324 029c 23F48053 		bic	r3, r3, #4096
2963:src/display.c **** 	State2.invalid_disp = 0;
 9325              		.loc 1 2963 15 view .LVU2989
 9326 02a0 0022     		movs	r2, #0
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9327              		.loc 1 2961 17 view .LVU2990
 9328 02a2 6361     		str	r3, [r4, #20]
2965:src/display.c **** 	DispMsg = CNULL;
 9329              		.loc 1 2965 15 view .LVU2991
 9330 02a4 6423     		movs	r3, #100
2963:src/display.c **** 	State2.invalid_disp = 0;
 9331              		.loc 1 2963 15 view .LVU2992
 9332 02a6 6274     		strb	r2, [r4, #17]
2964:src/display.c **** 	ShowRegister = regX_idx;
 9333              		.loc 1 2964 2 is_stmt 1 view .LVU2993
2965:src/display.c **** 	DispMsg = CNULL;
 9334              		.loc 1 2965 2 view .LVU2994
2966:src/display.c **** 	DispPlot = 0;
 9335              		.loc 1 2966 10 is_stmt 0 view .LVU2995
 9336 02a8 CAF80020 		str	r2, [r10]
2967:src/display.c **** 	State2.disp_small = 0;
 9337              		.loc 1 2967 11 view .LVU2996
 9338 02ac 0280     		strh	r2, [r0]	@ movhi
2965:src/display.c **** 	DispMsg = CNULL;
 9339              		.loc 1 2965 15 view .LVU2997
 9340 02ae 2B60     		str	r3, [r5]
2966:src/display.c **** 	DispPlot = 0;
 9341              		.loc 1 2966 2 is_stmt 1 view .LVU2998
2967:src/display.c **** 	State2.disp_small = 0;
 9342              		.loc 1 2967 2 view .LVU2999
2968:src/display.c **** 	if (WasDataEntry) {
 9343              		.loc 1 2968 2 view .LVU3000
2969:src/display.c **** 	  finish_7_segment();
 9344              		.loc 1 2969 2 view .LVU3001
2969:src/display.c **** 	  finish_7_segment();
 9345              		.loc 1 2969 5 is_stmt 0 view .LVU3002
 9346 02b0 0029     		cmp	r1, #0
 9347 02b2 7FF44FAF 		bne	.L1041
2974:src/display.c **** 	}
 9348              		.loc 1 2974 4 is_stmt 1 view .LVU3003
 9349 02b6 FFF7FEFF 		bl	finish_display
 9350              	.LVL1044:
ARM GAS  /tmp/ccPv3rzq.s 			page 278


 9351 02ba 4FE7     		b	.L1038
 9352              	.LVL1045:
 9353              	.L1188:
2881:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9354              		.loc 1 2881 5 view .LVU3004
2881:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9355              		.loc 1 2881 10 is_stmt 0 view .LVU3005
 9356 02bc 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
2881:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9357              		.loc 1 2881 8 view .LVU3006
 9358 02c0 DA07     		lsls	r2, r3, #31
 9359 02c2 00F1FE80 		bmi	.L1194
 9360              	.L993:
2885:src/display.c **** 		    State2.hms = 0;
 9361              		.loc 1 2885 5 is_stmt 1 view .LVU3007
2885:src/display.c **** 		    State2.hms = 0;
 9362              		.loc 1 2885 9 is_stmt 0 view .LVU3008
 9363 02c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2885:src/display.c **** 		    State2.hms = 0;
 9364              		.loc 1 2885 8 view .LVU3009
 9365 02c8 13F00101 		ands	r1, r3, #1
 9366 02cc 00F0B780 		beq	.L994
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9367              		.loc 1 2886 7 is_stmt 1 view .LVU3010
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9368              		.loc 1 2886 18 is_stmt 0 view .LVU3011
 9369 02d0 6FF30003 		bfc	r3, #0, #1
2887:src/display.c **** 		    State2.hms = 1;
 9370              		.loc 1 2887 7 view .LVU3012
 9371 02d4 0021     		movs	r1, #0
 9372 02d6 6E20     		movs	r0, #110
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9373              		.loc 1 2886 18 view .LVU3013
 9374 02d8 E375     		strb	r3, [r4, #23]
2887:src/display.c **** 		    State2.hms = 1;
 9375              		.loc 1 2887 7 is_stmt 1 view .LVU3014
 9376 02da FFF7FEFF 		bl	format_reg
 9377              	.LVL1046:
2888:src/display.c **** 		  }
 9378              		.loc 1 2888 7 view .LVU3015
2888:src/display.c **** 		  }
 9379              		.loc 1 2888 18 is_stmt 0 view .LVU3016
 9380 02de E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2910:src/display.c **** 	      goto finish;
 9381              		.loc 1 2910 9 view .LVU3017
 9382 02e0 D8F80020 		ldr	r2, [r8]
2888:src/display.c **** 		  }
 9383              		.loc 1 2888 18 view .LVU3018
 9384 02e4 43F00103 		orr	r3, r3, #1
 9385 02e8 E375     		strb	r3, [r4, #23]
 9386              	.LVL1047:
2910:src/display.c **** 	      goto finish;
 9387              		.loc 1 2910 6 is_stmt 1 view .LVU3019
2910:src/display.c **** 	      goto finish;
 9388              		.loc 1 2910 9 is_stmt 0 view .LVU3020
 9389 02ea 002A     		cmp	r2, #0
 9390 02ec A3D0     		beq	.L996
ARM GAS  /tmp/ccPv3rzq.s 			page 279


 9391 02ee 23E7     		b	.L995
 9392              	.LVL1048:
 9393              	.L1034:
2952:src/display.c **** 	  annunciators();
 9394              		.loc 1 2952 52 discriminator 3 view .LVU3021
 9395 02f0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9396 02f2 13F0C00F 		tst	r3, #192
 9397 02f6 CBD0     		beq	.L1036
 9398 02f8 C8E7     		b	.L1035
 9399              	.L1057:
 9400 02fa 0023     		movs	r3, #0
 9401 02fc BBE7     		b	.L1033
 9402              	.L1226:
 9403 02fe 00BF     		.align	2
 9404              	.L1225:
 9405 0300 00000000 		.word	StateWhileOn
 9406 0304 00000000 		.word	.LANCHOR15
 9407 0308 00000000 		.word	.LANCHOR18
 9408 030c 00000000 		.word	DispPlot
 9409 0310 00000000 		.word	ProgFree
 9410 0314 00000000 		.word	.LANCHOR16
 9411 0318 00000000 		.word	ShowRegister
 9412 031c 31020008 		.word	134218289
 9413 0320 00000000 		.word	ShowRPN
 9414 0324 00000000 		.word	argcmds
 9415 0328 04000000 		.word	.LC23
 9416 032c 00000000 		.word	.LC22
 9417 0330 00000000 		.word	main_ram
 9418 0334 00000000 		.word	WasDataEntry
 9419 0338 00000000 		.word	DispMsg
 9420              	.LVL1049:
 9421              	.L1186:
 9422              	.LBB593:
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9423              		.loc 1 2636 4 is_stmt 1 view .LVU3022
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9424              		.loc 1 2636 9 is_stmt 0 view .LVU3023
 9425 033c A44B     		ldr	r3, .L1227
 9426 033e CDF85E60 		str	r6, [sp, #94]	@ unaligned
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9427              		.loc 1 2637 4 is_stmt 1 view .LVU3024
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9428              		.loc 1 2636 9 is_stmt 0 view .LVU3025
 9429 0342 93E80700 		ldm	r3, {r0, r1, r2}
 9430 0346 15AB     		add	r3, sp, #84
 9431 0348 03C3     		stmia	r3!, {r0, r1}
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9432              		.loc 1 2637 4 view .LVU3026
 9433 034a 3146     		mov	r1, r6
 9434 034c A148     		ldr	r0, .L1227+4
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9435              		.loc 1 2636 9 view .LVU3027
 9436 034e 1A80     		strh	r2, [r3]	@ movhi
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9437              		.loc 1 2637 4 view .LVU3028
 9438 0350 FFF7FEFF 		bl	set_digits_string
 9439              	.LVL1050:
ARM GAS  /tmp/ccPv3rzq.s 			page 280


2638:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
 9440              		.loc 1 2638 4 is_stmt 1 view .LVU3029
 9441              	.LBB594:
 9442              	.LBI594:
 339:src/display.c ****   if (res) *res++ = ch;
 9443              		.loc 1 339 14 view .LVU3030
 9444              	.LBB595:
 340:src/display.c ****   else	set_dig(base, ch);
 9445              		.loc 1 340 3 view .LVU3031
 341:src/display.c ****   return res;
 9446              		.loc 1 341 8 view .LVU3032
 9447 0354 7221     		movs	r1, #114
 9448 0356 6C20     		movs	r0, #108
 9449 0358 FFF7FEFF 		bl	set_dig
 9450              	.LVL1051:
 342:src/display.c **** }
 9451              		.loc 1 342 3 view .LVU3033
 342:src/display.c **** }
 9452              		.loc 1 342 3 is_stmt 0 view .LVU3034
 9453              	.LBE595:
 9454              	.LBE594:
2639:src/display.c **** 	  set_status(vers);
 9455              		.loc 1 2639 4 is_stmt 1 view .LVU3035
 9456 035c 9E49     		ldr	r1, .L1227+8
 9457 035e DFF8A0A2 		ldr	r10, .L1227+48
 9458 0362 9E4D     		ldr	r5, .L1227+12
 9459 0364 0422     		movs	r2, #4
 9460 0366 0DF15D00 		add	r0, sp, #93
 9461 036a FFF7FEFF 		bl	xcopy
 9462              	.LVL1052:
2640:src/display.c **** 	  skip = 1;
 9463              		.loc 1 2640 4 view .LVU3036
 9464 036e 15A8     		add	r0, sp, #84
 9465 0370 FFF7FEFF 		bl	set_status
 9466              	.LVL1053:
2641:src/display.c **** 	  goto nostk;
 9467              		.loc 1 2641 4 view .LVU3037
2642:src/display.c **** 	} else if (State2.confirm) {
 9468              		.loc 1 2642 4 view .LVU3038
2642:src/display.c **** 	} else if (State2.confirm) {
 9469              		.loc 1 2642 4 is_stmt 0 view .LVU3039
 9470              	.LBE593:
2872:src/display.c **** 	if (!skip) {
 9471              		.loc 1 2872 2 is_stmt 1 view .LVU3040
 9472 0374 9A4B     		ldr	r3, .L1227+16
 9473 0376 0093     		str	r3, [sp]
 9474 0378 FFF7FEFF 		bl	show_flags
 9475              	.LVL1054:
2873:src/display.c **** 	  if (State2.runmode) {
 9476              		.loc 1 2873 2 view .LVU3041
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9477              		.loc 1 2942 2 view .LVU3042
 9478 037c FFF7FEFF 		bl	set_annunciators
 9479              	.LVL1055:
2943:src/display.c **** 	  ShowRPN = 0;
 9480              		.loc 1 2943 2 view .LVU3043
 9481 0380 60E7     		b	.L897
ARM GAS  /tmp/ccPv3rzq.s 			page 281


 9482              	.LVL1056:
 9483              	.L1059:
2943:src/display.c **** 	  ShowRPN = 0;
 9484              		.loc 1 2943 2 is_stmt 0 view .LVU3044
 9485 0382 0123     		movs	r3, #1
 9486 0384 77E7     		b	.L1033
 9487              	.LVL1057:
 9488              	.L991:
2905:src/display.c **** 	    } else {
 9489              		.loc 1 2905 3 is_stmt 1 view .LVU3045
 9490 0386 9748     		ldr	r0, .L1227+20
 9491 0388 2421     		movs	r1, #36
 9492 038a FFF7FEFF 		bl	set_digits_string
 9493              	.LVL1058:
2910:src/display.c **** 	      goto finish;
 9494              		.loc 1 2910 6 view .LVU3046
2910:src/display.c **** 	      goto finish;
 9495              		.loc 1 2910 9 is_stmt 0 view .LVU3047
 9496 038e D8F80030 		ldr	r3, [r8]
 9497 0392 002B     		cmp	r3, #0
 9498 0394 3FF4A3AE 		beq	.L1181
 9499 0398 CEE6     		b	.L995
 9500              	.LVL1059:
 9501              	.L899:
2650:src/display.c **** 	  }
 9502              		.loc 1 2650 6 is_stmt 1 view .LVU3048
 9503 039a 914B     		ldr	r3, .L1227+16
 9504 039c 9248     		ldr	r0, .L1227+24
 9505 039e 0093     		str	r3, [sp]
 9506 03a0 DFF85CA2 		ldr	r10, .L1227+48
 9507 03a4 FFF7FEFF 		bl	set_status
 9508              	.LVL1060:
2870:src/display.c ****       nostk:
 9509              		.loc 1 2870 2 view .LVU3049
 9510 03a8 FFF7FEFF 		bl	show_stack
 9511              	.LVL1061:
2872:src/display.c **** 	if (!skip) {
 9512              		.loc 1 2872 2 view .LVU3050
 9513 03ac FFF7FEFF 		bl	show_flags
 9514              	.LVL1062:
2873:src/display.c **** 	  if (State2.runmode) {
 9515              		.loc 1 2873 2 view .LVU3051
 9516 03b0 69E6     		b	.L902
 9517              	.L1190:
2653:src/display.c **** 	  if (! State2.dot)
 9518              		.loc 1 2653 4 view .LVU3052
2653:src/display.c **** 	  if (! State2.dot)
 9519              		.loc 1 2653 9 is_stmt 0 view .LVU3053
 9520 03b2 8E49     		ldr	r1, .L1227+28
 9521 03b4 1EA8     		add	r0, sp, #120
 9522              	.LVL1063:
2653:src/display.c **** 	  if (! State2.dot)
 9523              		.loc 1 2653 9 view .LVU3054
 9524 03b6 FFF7FEFF 		bl	scopy
 9525              	.LVL1064:
2654:src/display.c **** 	    *bp++ = '\235';
 9526              		.loc 1 2654 8 view .LVU3055
ARM GAS  /tmp/ccPv3rzq.s 			page 282


 9527 03ba 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9528              	.LVL1065:
2654:src/display.c **** 	    *bp++ = '\235';
 9529              		.loc 1 2654 4 is_stmt 1 view .LVU3056
2654:src/display.c **** 	    *bp++ = '\235';
 9530              		.loc 1 2654 7 is_stmt 0 view .LVU3057
 9531 03bc 5B06     		lsls	r3, r3, #25
 9532 03be 3FF50EAF 		bmi	.L938
2655:src/display.c **** 	  if (yreg_enabled) {
 9533              		.loc 1 2655 6 is_stmt 1 view .LVU3058
 9534              	.LVL1066:
2655:src/display.c **** 	  if (yreg_enabled) {
 9535              		.loc 1 2655 12 is_stmt 0 view .LVU3059
 9536 03c2 9D23     		movs	r3, #157
 9537 03c4 0370     		strb	r3, [r0]
 9538 03c6 0AE7     		b	.L938
 9539              	.LVL1067:
 9540              	.L910:
2717:src/display.c **** 	  *bp++ = 'x';
 9541              		.loc 1 2717 9 is_stmt 1 view .LVU3060
2717:src/display.c **** 	  *bp++ = 'x';
 9542              		.loc 1 2717 19 is_stmt 0 view .LVU3061
 9543 03c8 E17B     		ldrb	r1, [r4, #15]	@ zero_extendqisi2
2717:src/display.c **** 	  *bp++ = 'x';
 9544              		.loc 1 2717 12 view .LVU3062
 9545 03ca 0729     		cmp	r1, #7
 9546 03cc 00F05781 		beq	.L921
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9547              		.loc 1 2718 4 is_stmt 1 view .LVU3063
 9548              	.LVL1068:
2719:src/display.c **** 	  *bp++ = '_';
 9549              		.loc 1 2719 33 is_stmt 0 view .LVU3064
 9550 03d0 874B     		ldr	r3, .L1227+32
2719:src/display.c **** 	  *bp++ = '_';
 9551              		.loc 1 2719 10 view .LVU3065
 9552 03d2 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 9553 03d4 8DF87930 		strb	r3, [sp, #121]
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9554              		.loc 1 2718 10 view .LVU3066
 9555 03d8 7822     		movs	r2, #120
2720:src/display.c **** 	  *bp++ = '?';
 9556              		.loc 1 2720 10 view .LVU3067
 9557 03da 43F65F73 		movw	r3, #16223
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9558              		.loc 1 2718 10 view .LVU3068
 9559 03de 8DF87820 		strb	r2, [sp, #120]
2719:src/display.c **** 	  *bp++ = '_';
 9560              		.loc 1 2719 4 is_stmt 1 view .LVU3069
 9561              	.LVL1069:
2720:src/display.c **** 	  *bp++ = '?';
 9562              		.loc 1 2720 4 view .LVU3070
2721:src/display.c **** 	  if (yreg_enabled) {
 9563              		.loc 1 2721 4 view .LVU3071
2720:src/display.c **** 	  *bp++ = '?';
 9564              		.loc 1 2720 10 is_stmt 0 view .LVU3072
 9565 03e2 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2722:src/display.c **** 	    set_status_top(buf);
ARM GAS  /tmp/ccPv3rzq.s 			page 283


 9566              		.loc 1 2722 4 is_stmt 1 view .LVU3073
2722:src/display.c **** 	    set_status_top(buf);
 9567              		.loc 1 2722 7 is_stmt 0 view .LVU3074
 9568 03e6 002D     		cmp	r5, #0
 9569 03e8 7FF4FCAE 		bne	.L1173
 9570              	.LVL1070:
 9571              	.L905:
2662:src/display.c **** 	  }
 9572              		.loc 1 2662 6 is_stmt 1 view .LVU3075
 9573 03ec 1EA8     		add	r0, sp, #120
 9574 03ee FFF7FEFF 		bl	set_status
 9575              	.LVL1071:
2870:src/display.c ****       nostk:
 9576              		.loc 1 2870 2 view .LVU3076
 9577 03f2 7B4B     		ldr	r3, .L1227+16
 9578 03f4 0093     		str	r3, [sp]
 9579 03f6 DFF808A2 		ldr	r10, .L1227+48
 9580 03fa FFF7FEFF 		bl	show_stack
 9581              	.LVL1072:
2872:src/display.c **** 	if (!skip) {
 9582              		.loc 1 2872 2 view .LVU3077
 9583 03fe FFF7FEFF 		bl	show_flags
 9584              	.LVL1073:
2873:src/display.c **** 	  if (State2.runmode) {
 9585              		.loc 1 2873 2 view .LVU3078
 9586 0402 40E6     		b	.L902
 9587              	.LVL1074:
 9588              	.L1193:
2943:src/display.c **** 	  ShowRPN = 0;
 9589              		.loc 1 2943 69 is_stmt 0 discriminator 3 view .LVU3079
 9590 0404 009B     		ldr	r3, [sp]
 9591 0406 B3F90030 		ldrsh	r3, [r3]
 9592 040a 002B     		cmp	r3, #0
 9593 040c 7FF41AAF 		bne	.L897
2943:src/display.c **** 	  ShowRPN = 0;
 9594              		.loc 1 2943 81 discriminator 4 view .LVU3080
 9595 0410 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9596 0412 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9597 0414 03F00403 		and	r3, r3, #4
 9598 0418 1343     		orrs	r3, r3, r2
 9599 041a 7FF413AF 		bne	.L897
 9600 041e DFF8E491 		ldr	r9, .L1227+52
 9601 0422 17E7     		b	.L1032
 9602              	.LVL1075:
 9603              	.L1189:
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9604              		.loc 1 2896 44 discriminator 1 view .LVU3081
 9605 0424 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9606              		.loc 1 2896 41 discriminator 1 view .LVU3082
 9607 0426 11F00101 		ands	r1, r1, #1
 9608 042a 7FF47EAE 		bne	.L997
 9609              	.LVL1076:
2897:src/display.c **** 		}
 9610              		.loc 1 2897 5 is_stmt 1 view .LVU3083
 9611 042e FFF7FEFF 		bl	format_reg
 9612              	.LVL1077:
ARM GAS  /tmp/ccPv3rzq.s 			page 284


2910:src/display.c **** 	      goto finish;
 9613              		.loc 1 2910 6 view .LVU3084
2910:src/display.c **** 	      goto finish;
 9614              		.loc 1 2910 9 is_stmt 0 view .LVU3085
 9615 0432 D8F80030 		ldr	r3, [r8]
 9616 0436 002B     		cmp	r3, #0
 9617 0438 3FF4FDAE 		beq	.L996
 9618 043c 7CE6     		b	.L995
 9619              	.LVL1078:
 9620              	.L994:
2891:src/display.c **** 		  }
 9621              		.loc 1 2891 7 is_stmt 1 view .LVU3086
 9622 043e 6E20     		movs	r0, #110
 9623 0440 FFF7FEFF 		bl	format_reg
 9624              	.LVL1079:
2910:src/display.c **** 	      goto finish;
 9625              		.loc 1 2910 6 view .LVU3087
2910:src/display.c **** 	      goto finish;
 9626              		.loc 1 2910 9 is_stmt 0 view .LVU3088
 9627 0444 D8F80030 		ldr	r3, [r8]
 9628 0448 002B     		cmp	r3, #0
 9629 044a 3FF4F4AE 		beq	.L996
 9630 044e 73E6     		b	.L995
 9631              	.LVL1080:
 9632              	.L1187:
 9633              	.LBB596:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9634              		.loc 1 2919 6 discriminator 1 view .LVU3089
 9635 0450 6849     		ldr	r1, .L1227+36
 9636 0452 09EB8903 		add	r3, r9, r9, lsl #2
 9637 0456 1944     		add	r1, r1, r3
 9638 0458 33E6     		b	.L1031
 9639              	.LVL1081:
 9640              	.L1191:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9641              		.loc 1 2919 6 discriminator 1 view .LVU3090
 9642              	.LBE596:
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9643              		.loc 1 2666 4 is_stmt 1 view .LVU3091
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9644              		.loc 1 2666 9 is_stmt 0 view .LVU3092
 9645 045a 2E22     		movs	r2, #46
 9646 045c 6649     		ldr	r1, .L1227+40
 9647 045e 1EA8     		add	r0, sp, #120
 9648              	.LVL1082:
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9649              		.loc 1 2666 9 view .LVU3093
 9650 0460 FFF7FEFF 		bl	scopy_char
 9651              	.LVL1083:
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9652              		.loc 1 2667 14 view .LVU3094
 9653 0464 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9654              		.loc 1 2666 9 view .LVU3095
 9655 0466 0346     		mov	r3, r0
 9656              	.LVL1084:
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
ARM GAS  /tmp/ccPv3rzq.s 			page 285


 9657              		.loc 1 2667 4 is_stmt 1 view .LVU3096
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9658              		.loc 1 2667 7 is_stmt 0 view .LVU3097
 9659 0468 002A     		cmp	r2, #0
 9660 046a 40F02F81 		bne	.L1195
 9661              	.L908:
2670:src/display.c **** 	  if (yreg_enabled) {
 9662              		.loc 1 2670 4 is_stmt 1 view .LVU3098
 9663              	.LVL1085:
2670:src/display.c **** 	  if (yreg_enabled) {
 9664              		.loc 1 2670 10 is_stmt 0 view .LVU3099
 9665 046e 5F22     		movs	r2, #95
 9666 0470 1A70     		strb	r2, [r3]
2671:src/display.c **** 	    set_status_top(buf);
 9667              		.loc 1 2671 4 is_stmt 1 view .LVU3100
2671:src/display.c **** 	    set_status_top(buf);
 9668              		.loc 1 2671 7 is_stmt 0 view .LVU3101
 9669 0472 002D     		cmp	r5, #0
 9670 0474 7FF4B6AE 		bne	.L1173
2671:src/display.c **** 	    set_status_top(buf);
 9671              		.loc 1 2671 7 view .LVU3102
 9672 0478 B8E7     		b	.L905
 9673              	.LVL1086:
 9674              	.L1001:
 9675              	.LBB597:
 9676              	.LBB583:
1277:src/display.c **** 
 9677              		.loc 1 1277 2 is_stmt 1 view .LVU3103
 9678 047a FFF7FEFF 		bl	set_separator_decimal_modes
 9679              	.LVL1087:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9680              		.loc 1 1279 2 view .LVU3104
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9681              		.loc 1 1281 2 view .LVU3105
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9682              		.loc 1 1281 5 is_stmt 0 view .LVU3106
 9683 047e A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9684              	.LBB564:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9685              		.loc 1 1288 15 view .LVU3107
 9686 0480 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9687              	.LBE564:
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9688              		.loc 1 1281 5 view .LVU3108
 9689 0482 012B     		cmp	r3, #1
 9690 0484 40F22781 		bls	.L1004
 9691              	.LVL1088:
 9692              	.LBB565:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9693              		.loc 1 1288 14 is_stmt 1 view .LVU3109
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9694              		.loc 1 1288 4 is_stmt 0 view .LVU3110
 9695 0488 0029     		cmp	r1, #0
 9696 048a 00F0B881 		beq	.L1050
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9697              		.loc 1 1288 10 view .LVU3111
 9698 048e 5A46     		mov	r2, fp
ARM GAS  /tmp/ccPv3rzq.s 			page 286


 9699 0490 AC46     		mov	ip, r5
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9700              		.loc 1 1288 4 view .LVU3112
 9701 0492 0846     		mov	r0, r1
 9702              	.LBE565:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9703              		.loc 1 1256 11 view .LVU3113
 9704 0494 4FF0FF3E 		mov	lr, #-1
 9705 0498 04E0     		b	.L1007
 9706              	.LVL1089:
 9707              	.L1006:
 9708              	.LBB566:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9709              		.loc 1 1288 28 is_stmt 1 view .LVU3114
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9710              		.loc 1 1288 15 is_stmt 0 view .LVU3115
 9711 049a 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9712              		.loc 1 1288 29 view .LVU3116
 9713 049e 0132     		adds	r2, r2, #1
 9714              	.LVL1090:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9715              		.loc 1 1288 14 is_stmt 1 view .LVU3117
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9716              		.loc 1 1288 4 is_stmt 0 view .LVU3118
 9717 04a0 0028     		cmp	r0, #0
 9718 04a2 49D0     		beq	.L1196
 9719              	.LVL1091:
 9720              	.L1007:
1289:src/display.c **** 	      gotdot = j;
 9721              		.loc 1 1289 6 is_stmt 1 view .LVU3119
1289:src/display.c **** 	      gotdot = j;
 9722              		.loc 1 1289 9 is_stmt 0 view .LVU3120
 9723 04a4 2E28     		cmp	r0, #46
 9724 04a6 F8D1     		bne	.L1006
1290:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9725              		.loc 1 1290 8 is_stmt 1 view .LVU3121
 9726              	.LVL1092:
1292:src/display.c **** #  endif
 9727              		.loc 1 1292 8 view .LVU3122
1289:src/display.c **** 	      gotdot = j;
 9728              		.loc 1 1289 22 is_stmt 0 view .LVU3123
 9729 04a8 BEF1FF3F 		cmp	lr, #-1
 9730 04ac F5D1     		bne	.L1006
1292:src/display.c **** #  endif
 9731              		.loc 1 1292 29 view .LVU3124
 9732 04ae 9CF801B0 		ldrb	fp, [ip, #1]	@ zero_extendqisi2
 9733 04b2 ABF12E0B 		sub	fp, fp, #46
 9734 04b6 BBFA8BFB 		clz	fp, fp
1292:src/display.c **** #  endif
 9735              		.loc 1 1292 19 view .LVU3125
 9736 04ba 9646     		mov	lr, r2
1292:src/display.c **** #  endif
 9737              		.loc 1 1292 29 view .LVU3126
 9738 04bc 4FEA5B1B 		lsr	fp, fp, #5
 9739              	.LVL1093:
1292:src/display.c **** #  endif
ARM GAS  /tmp/ccPv3rzq.s 			page 287


 9740              		.loc 1 1292 29 view .LVU3127
 9741 04c0 EBE7     		b	.L1006
 9742              	.LVL1094:
 9743              	.L1194:
1292:src/display.c **** #  endif
 9744              		.loc 1 1292 29 view .LVU3128
 9745              	.LBE566:
 9746              	.LBE583:
 9747              	.LBE597:
2882:src/display.c **** 		    SET_POLAR_READY;
 9748              		.loc 1 2882 7 is_stmt 1 view .LVU3129
 9749 04c2 0020     		movs	r0, #0
 9750 04c4 FFF7FEFF 		bl	op_r2p
 9751              	.LVL1095:
2883:src/display.c **** 		  }
 9752              		.loc 1 2883 7 view .LVU3130
 9753 04c8 D9F80030 		ldr	r3, [r9]
 9754 04cc 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 9755 04d0 6FF30002 		bfc	r2, #0, #1
 9756 04d4 83F8AD27 		strb	r2, [r3, #1965]
 9757 04d8 F5E6     		b	.L993
 9758              	.LVL1096:
 9759              	.L911:
2683:src/display.c **** #endif
 9760              		.loc 1 2683 11 is_stmt 0 view .LVU3131
 9761 04da 4849     		ldr	r1, .L1227+44
 9762 04dc 0093     		str	r3, [sp]
2683:src/display.c **** #endif
 9763              		.loc 1 2683 6 is_stmt 1 view .LVU3132
2683:src/display.c **** #endif
 9764              		.loc 1 2683 11 is_stmt 0 view .LVU3133
 9765 04de 1EA8     		add	r0, sp, #120
 9766              	.LVL1097:
2683:src/display.c **** #endif
 9767              		.loc 1 2683 11 view .LVU3134
 9768 04e0 FFF7FEFF 		bl	scopy
 9769              	.LVL1098:
2683:src/display.c **** #endif
 9770              		.loc 1 2683 11 view .LVU3135
 9771 04e4 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9772 04e6 009B     		ldr	r3, [sp]
 9773 04e8 5CE6     		b	.L912
 9774              	.L914:
2690:src/display.c **** 	    *bp++ = '\021';
 9775              		.loc 1 2690 11 is_stmt 1 view .LVU3136
2690:src/display.c **** 	    *bp++ = '\021';
 9776              		.loc 1 2690 14 is_stmt 0 view .LVU3137
 9777 04ea 012B     		cmp	r3, #1
 9778 04ec 00F00481 		beq	.L1197
2697:src/display.c **** 	      *bp++ = '.';
 9779              		.loc 1 2697 6 is_stmt 1 view .LVU3138
2697:src/display.c **** 	      *bp++ = '.';
 9780              		.loc 1 2697 10 is_stmt 0 view .LVU3139
 9781 04f0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2697:src/display.c **** 	      *bp++ = '.';
 9782              		.loc 1 2697 9 view .LVU3140
 9783 04f2 DA07     		lsls	r2, r3, #31
ARM GAS  /tmp/ccPv3rzq.s 			page 288


2698:src/display.c **** 	    if (State2.numdigit > 0) {
 9784              		.loc 1 2698 8 is_stmt 1 view .LVU3141
 9785              	.LVL1099:
2698:src/display.c **** 	    if (State2.numdigit > 0) {
 9786              		.loc 1 2698 14 is_stmt 0 view .LVU3142
 9787 04f4 44BF     		itt	mi
 9788 04f6 2E23     		movmi	r3, #46
 9789 04f8 00F8013B 		strbmi	r3, [r0], #1
 9790              	.LVL1100:
2699:src/display.c **** 	      if (State2.shuffle)
 9791              		.loc 1 2699 6 is_stmt 1 view .LVU3143
2699:src/display.c **** 	      if (State2.shuffle)
 9792              		.loc 1 2699 16 is_stmt 0 view .LVU3144
 9793 04fc E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2699:src/display.c **** 	      if (State2.shuffle)
 9794              		.loc 1 2699 9 view .LVU3145
 9795 04fe 9AB1     		cbz	r2, .L918
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9796              		.loc 1 2700 8 is_stmt 1 view .LVU3146
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9797              		.loc 1 2700 12 is_stmt 0 view .LVU3147
 9798 0500 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9799              		.loc 1 2700 11 view .LVU3148
 9800 0502 9B07     		lsls	r3, r3, #30
 9801 0504 40F17D81 		bpl	.L919
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9802              		.loc 1 2701 3 is_stmt 1 view .LVU3149
 9803              	.LVL1101:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9804              		.loc 1 2701 17 is_stmt 0 view .LVU3150
 9805 0508 2289     		ldrh	r2, [r4, #8]
 9806              	.LVL1102:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9807              		.loc 1 2701 34 is_stmt 1 view .LVU3151
 9808 050a DFF8FCC0 		ldr	ip, .L1227+56
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9809              		.loc 1 2701 10 is_stmt 0 view .LVU3152
 9810 050e 0023     		movs	r3, #0
 9811              	.LVL1103:
 9812              	.L920:
2702:src/display.c **** 	      else
 9813              		.loc 1 2702 5 is_stmt 1 discriminator 3 view .LVU3153
2702:src/display.c **** 	      else
 9814              		.loc 1 2702 24 is_stmt 0 discriminator 3 view .LVU3154
 9815 0510 02F00301 		and	r1, r2, #3
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9816              		.loc 1 2701 54 discriminator 3 view .LVU3155
 9817 0514 0133     		adds	r3, r3, #1
 9818              	.LVL1104:
2702:src/display.c **** 	      else
 9819              		.loc 1 2702 11 discriminator 3 view .LVU3156
 9820 0516 1CF80110 		ldrb	r1, [ip, r1]	@ zero_extendqisi2
 9821 051a 00F8011B 		strb	r1, [r0], #1
 9822              	.LVL1105:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9823              		.loc 1 2701 53 is_stmt 1 discriminator 3 view .LVU3157
ARM GAS  /tmp/ccPv3rzq.s 			page 289


2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9824              		.loc 1 2701 42 is_stmt 0 discriminator 3 view .LVU3158
 9825 051e E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9826              		.loc 1 2701 3 discriminator 3 view .LVU3159
 9827 0520 9942     		cmp	r1, r3
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9828              		.loc 1 2701 60 discriminator 3 view .LVU3160
 9829 0522 4FEAA202 		asr	r2, r2, #2
 9830              	.LVL1106:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9831              		.loc 1 2701 34 is_stmt 1 discriminator 3 view .LVU3161
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9832              		.loc 1 2701 3 is_stmt 0 discriminator 3 view .LVU3162
 9833 0526 F3DC     		bgt	.L920
 9834              	.LVL1107:
 9835              	.L918:
2707:src/display.c **** 	  }
 9836              		.loc 1 2707 6 is_stmt 1 view .LVU3163
2707:src/display.c **** 	  }
 9837              		.loc 1 2707 12 is_stmt 0 view .LVU3164
 9838 0528 5F23     		movs	r3, #95
 9839 052a 0370     		strb	r3, [r0]
 9840 052c 57E6     		b	.L938
 9841              	.LVL1108:
 9842              	.L1192:
 9843              	.LBB598:
 9844              	.LBB584:
1266:src/display.c **** 	p++;
 9845              		.loc 1 1266 2 is_stmt 1 view .LVU3165
 9846              	.LBB567:
 9847              	.LBI567:
 244:src/display.c **** {
 9848              		.loc 1 244 13 view .LVU3166
 9849              	.LBB568:
 246:src/display.c **** }
 9850              		.loc 1 246 3 view .LVU3167
 9851 052e 8120     		movs	r0, #129
 9852              	.LVL1109:
 246:src/display.c **** }
 9853              		.loc 1 246 3 is_stmt 0 view .LVU3168
 9854 0530 FFF7FEFF 		bl	set_dot
 9855              	.LVL1110:
 9856              	.LBE568:
 9857              	.LBE567:
1267:src/display.c ****       }
 9858              		.loc 1 1267 2 is_stmt 1 view .LVU3169
1267:src/display.c ****       }
 9859              		.loc 1 1267 3 is_stmt 0 view .LVU3170
 9860 0534 0135     		adds	r5, r5, #1
 9861              	.LVL1111:
1267:src/display.c ****       }
 9862              		.loc 1 1267 3 view .LVU3171
 9863 0536 62E6     		b	.L1000
 9864              	.LVL1112:
 9865              	.L1196:
 9866              	.LBB569:
ARM GAS  /tmp/ccPv3rzq.s 			page 290


1296:src/display.c **** 	  if (j > 0) {
 9867              		.loc 1 1296 4 is_stmt 1 view .LVU3172
1296:src/display.c **** 	  if (j > 0) {
 9868              		.loc 1 1296 24 is_stmt 0 view .LVU3173
 9869 0538 0BF10C0C 		add	ip, fp, #12
1296:src/display.c **** 	  if (j > 0) {
 9870              		.loc 1 1296 6 view .LVU3174
 9871 053c A2EB0C02 		sub	r2, r2, ip
 9872              	.LVL1113:
1297:src/display.c **** 	    p += j + 1;
 9873              		.loc 1 1297 4 is_stmt 1 view .LVU3175
1297:src/display.c **** 	    p += j + 1;
 9874              		.loc 1 1297 7 is_stmt 0 view .LVU3176
 9875 0540 002A     		cmp	r2, #0
 9876 0542 40F3DE80 		ble	.L1051
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9877              		.loc 1 1298 6 is_stmt 1 view .LVU3177
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9878              		.loc 1 1298 8 is_stmt 0 view .LVU3178
 9879 0546 511C     		adds	r1, r2, #1
1300:src/display.c **** 	      gotdot = 0;
 9880              		.loc 1 1300 9 view .LVU3179
 9881 0548 7245     		cmp	r2, lr
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9882              		.loc 1 1298 8 view .LVU3180
 9883 054a 0D44     		add	r5, r5, r1
 9884              	.LVL1114:
1299:src/display.c **** 	    if (gotdot <= j) {
 9885              		.loc 1 1299 6 is_stmt 1 view .LVU3181
1300:src/display.c **** 	      gotdot = 0;
 9886              		.loc 1 1300 6 view .LVU3182
1300:src/display.c **** 	      gotdot = 0;
 9887              		.loc 1 1300 9 is_stmt 0 view .LVU3183
 9888 054c C0F2DE80 		blt	.L1009
1301:src/display.c **** 	      if (double_dot)
 9889              		.loc 1 1301 8 is_stmt 1 view .LVU3184
 9890              	.LVL1115:
1302:src/display.c **** 		p++;
 9891              		.loc 1 1302 8 view .LVU3185
1302:src/display.c **** 		p++;
 9892              		.loc 1 1302 11 is_stmt 0 view .LVU3186
 9893 0550 BBF1000F 		cmp	fp, #0
 9894 0554 00F05081 		beq	.L1052
1303:src/display.c **** 	    }
 9895              		.loc 1 1303 3 is_stmt 1 view .LVU3187
1303:src/display.c **** 	    }
 9896              		.loc 1 1303 4 is_stmt 0 view .LVU3188
 9897 0558 0135     		adds	r5, r5, #1
 9898              	.LVL1116:
1299:src/display.c **** 	    if (gotdot <= j) {
 9899              		.loc 1 1299 8 view .LVU3189
 9900 055a 4FF0090B 		mov	fp, #9
 9901              	.LVL1117:
 9902              	.L1010:
1312:src/display.c **** 	    overflow_to_left = 1;
 9903              		.loc 1 1312 6 is_stmt 1 view .LVU3190
 9904 055e 3C21     		movs	r1, #60
ARM GAS  /tmp/ccPv3rzq.s 			page 291


 9905              	.LVL1118:
1312:src/display.c **** 	    overflow_to_left = 1;
 9906              		.loc 1 1312 6 is_stmt 0 view .LVU3191
 9907 0560 0020     		movs	r0, #0
 9908 0562 FFF7FEFF 		bl	set_dig
 9909              	.LVL1119:
1313:src/display.c **** 	  }
 9910              		.loc 1 1313 6 is_stmt 1 view .LVU3192
1313:src/display.c **** 	  }
 9911              		.loc 1 1313 6 is_stmt 0 view .LVU3193
 9912 0566 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 9913              		.loc 1 1313 6 view .LVU3194
 9914              	.LBE569:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9915              		.loc 1 1319 9 is_stmt 1 view .LVU3195
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9916              		.loc 1 1319 2 is_stmt 0 view .LVU3196
 9917 0568 4FF00009 		mov	r9, #0
 9918 056c 0029     		cmp	r1, #0
 9919 056e 7FD0     		beq	.L1183
 9920              	.LVL1120:
 9921              	.L1042:
 9922              	.LBB570:
1313:src/display.c **** 	  }
 9923              		.loc 1 1313 23 view .LVU3197
 9924 0570 0123     		movs	r3, #1
 9925 0572 0293     		str	r3, [sp, #8]
 9926 0574 11E0     		b	.L1019
 9927              	.LVL1121:
 9928              	.L1198:
1313:src/display.c **** 	  }
 9929              		.loc 1 1313 23 view .LVU3198
 9930              	.LBE570:
1325:src/display.c **** 	      gotdot = i;
 9931              		.loc 1 1325 6 is_stmt 1 view .LVU3199
1325:src/display.c **** 	      gotdot = i;
 9932              		.loc 1 1325 9 is_stmt 0 view .LVU3200
 9933 0576 B9F1FF3F 		cmp	r9, #-1
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9934              		.loc 1 1329 9 view .LVU3201
 9935 057a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1325:src/display.c **** 	      gotdot = i;
 9936              		.loc 1 1325 9 view .LVU3202
 9937 057c 1AD0     		beq	.L1013
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9938              		.loc 1 1329 6 is_stmt 1 view .LVU3203
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9939              		.loc 1 1329 9 is_stmt 0 view .LVU3204
 9940 057e 2E2B     		cmp	r3, #46
 9941 0580 24D0     		beq	.L1040
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9942              		.loc 1 1329 25 view .LVU3205
 9943 0582 D945     		cmp	r9, fp
 9944 0584 18D0     		beq	.L1016
 9945              	.L1015:
1336:src/display.c **** 		i += segs_per_digit;
ARM GAS  /tmp/ccPv3rzq.s 			page 292


 9946              		.loc 1 1336 3 is_stmt 1 view .LVU3206
 9947 0586 5846     		mov	r0, fp
 9948 0588 2F21     		movs	r1, #47
 9949 058a FFF7FEFF 		bl	set_dig
 9950              	.LVL1122:
1337:src/display.c **** 	      }
 9951              		.loc 1 1337 3 view .LVU3207
1337:src/display.c **** 	      }
 9952              		.loc 1 1337 5 is_stmt 0 view .LVU3208
 9953 058e 0BF1090B 		add	fp, fp, #9
 9954              	.LVL1123:
1337:src/display.c **** 	      }
 9955              		.loc 1 1337 5 view .LVU3209
 9956 0592 2B46     		mov	r3, r5
 9957              	.LVL1124:
 9958              	.L1017:
1323:src/display.c **** 	  if (*p == '.') {
 9959              		.loc 1 1323 11 is_stmt 1 view .LVU3210
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9960              		.loc 1 1319 9 is_stmt 0 view .LVU3211
 9961 0594 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1323:src/display.c **** 	  if (*p == '.') {
 9962              		.loc 1 1323 12 view .LVU3212
 9963 0596 0135     		adds	r5, r5, #1
 9964              	.LVL1125:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9965              		.loc 1 1319 9 is_stmt 1 view .LVU3213
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9966              		.loc 1 1319 2 is_stmt 0 view .LVU3214
 9967 0598 C1B3     		cbz	r1, .L1020
 9968              	.LVL1126:
 9969              	.L1019:
1321:src/display.c **** #endif
 9970              		.loc 1 1321 9 view .LVU3215
 9971 059a A1F14403 		sub	r3, r1, #68
 9972 059e 012B     		cmp	r3, #1
 9973 05a0 34D9     		bls	.L1020
1324:src/display.c **** 	    if (gotdot < 0)
 9974              		.loc 1 1324 4 is_stmt 1 view .LVU3216
1324:src/display.c **** 	    if (gotdot < 0)
 9975              		.loc 1 1324 7 is_stmt 0 view .LVU3217
 9976 05a2 2E29     		cmp	r1, #46
 9977 05a4 E7D0     		beq	.L1198
1358:src/display.c **** 	      i += segs_per_digit;
 9978              		.loc 1 1358 8 is_stmt 1 view .LVU3218
 9979 05a6 5846     		mov	r0, fp
 9980 05a8 FFF7FEFF 		bl	set_dig
 9981              	.LVL1127:
1359:src/display.c **** 	    }
 9982              		.loc 1 1359 8 view .LVU3219
1359:src/display.c **** 	    }
 9983              		.loc 1 1359 10 is_stmt 0 view .LVU3220
 9984 05ac 0BF1090B 		add	fp, fp, #9
 9985              	.LVL1128:
1359:src/display.c **** 	    }
 9986              		.loc 1 1359 10 view .LVU3221
 9987 05b0 2B46     		mov	r3, r5
ARM GAS  /tmp/ccPv3rzq.s 			page 293


 9988 05b2 EFE7     		b	.L1017
 9989              	.L1013:
1326:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 9990              		.loc 1 1326 8 is_stmt 1 view .LVU3222
 9991              	.LVL1129:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9992              		.loc 1 1329 6 view .LVU3223
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9993              		.loc 1 1329 9 is_stmt 0 view .LVU3224
 9994 05b4 2E2B     		cmp	r3, #46
 9995 05b6 08D0     		beq	.L1199
 9996              	.LVL1130:
 9997              	.L1016:
1340:src/display.c **** 		  i += segs_per_digit;
 9998              		.loc 1 1340 3 is_stmt 1 view .LVU3225
1340:src/display.c **** 		  i += segs_per_digit;
 9999              		.loc 1 1340 6 is_stmt 0 view .LVU3226
 10000 05b8 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10001 05ba 012B     		cmp	r3, #1
 10002 05bc 40F29380 		bls	.L1018
1341:src/display.c **** 		}
 10003              		.loc 1 1341 5 is_stmt 1 view .LVU3227
 10004              	.LVL1131:
1341:src/display.c **** 		}
 10005              		.loc 1 1341 5 is_stmt 0 view .LVU3228
 10006 05c0 D946     		mov	r9, fp
 10007 05c2 2B46     		mov	r3, r5
1341:src/display.c **** 		}
 10008              		.loc 1 1341 7 view .LVU3229
 10009 05c4 0BF1090B 		add	fp, fp, #9
 10010              	.LVL1132:
1341:src/display.c **** 		}
 10011              		.loc 1 1341 7 view .LVU3230
 10012 05c8 E4E7     		b	.L1017
 10013              	.LVL1133:
 10014              	.L1199:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10015              		.loc 1 1329 9 view .LVU3231
 10016 05ca D946     		mov	r9, fp
 10017              	.LVL1134:
 10018              	.L1040:
1330:src/display.c **** 		p++;
 10019              		.loc 1 1330 8 is_stmt 1 view .LVU3232
1331:src/display.c **** 	      }
 10020              		.loc 1 1331 3 view .LVU3233
1331:src/display.c **** 	      }
 10021              		.loc 1 1331 4 is_stmt 0 view .LVU3234
 10022 05cc 0135     		adds	r5, r5, #1
 10023              	.LVL1135:
1331:src/display.c **** 	      }
 10024              		.loc 1 1331 4 view .LVU3235
 10025 05ce DAE7     		b	.L1015
 10026              	.L1228:
 10027              		.align	2
 10028              	.L1227:
 10029 05d0 0C000000 		.word	.LANCHOR14+12
 10030 05d4 08000000 		.word	.LC25
ARM GAS  /tmp/ccPv3rzq.s 			page 294


 10031 05d8 00000000 		.word	.LANCHOR17
 10032 05dc 00000000 		.word	ShowRegister
 10033 05e0 00000000 		.word	DispPlot
 10034 05e4 8C000000 		.word	.LC42
 10035 05e8 00000000 		.word	.LANCHOR18
 10036 05ec 18000000 		.word	.LC26
 10037 05f0 94000000 		.word	.LC29
 10038 05f4 00000000 		.word	.LANCHOR19
 10039 05f8 56040000 		.word	argcmds+1110
 10040 05fc 1C000000 		.word	.LC27
 10041 0600 00000000 		.word	DispMsg
 10042 0604 00000000 		.word	ShowRPN
 10043 0608 9C000000 		.word	.LC28
 10044              	.L1020:
1368:src/display.c **** 	    gotdot = i;
 10045              		.loc 1 1368 4 is_stmt 1 view .LVU3236
1368:src/display.c **** 	    gotdot = i;
 10046              		.loc 1 1368 7 is_stmt 0 view .LVU3237
 10047 060c B9F1FF3F 		cmp	r9, #-1
 10048 0610 08BF     		it	eq
 10049 0612 D946     		moveq	r9, fp
 10050              	.LVL1136:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10051              		.loc 1 1370 4 is_stmt 1 view .LVU3238
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10052              		.loc 1 1371 6 view .LVU3239
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10053              		.loc 1 1371 13 is_stmt 0 view .LVU3240
 10054 0614 A9F11B09 		sub	r9, r9, #27
 10055              	.LVL1137:
1372:src/display.c **** 	      break;
 10056              		.loc 1 1372 6 is_stmt 1 view .LVU3241
1372:src/display.c **** 	      break;
 10057              		.loc 1 1372 9 is_stmt 0 view .LVU3242
 10058 0618 B9F1000F 		cmp	r9, #0
 10059 061c 11DD     		ble	.L1005
1372:src/display.c **** 	      break;
 10060              		.loc 1 1372 9 view .LVU3243
 10061 061e 0196     		str	r6, [sp, #4]
 10062 0620 4E46     		mov	r6, r9
 10063              	.LVL1138:
1372:src/display.c **** 	      break;
 10064              		.loc 1 1372 9 view .LVU3244
 10065 0622 A946     		mov	r9, r5
 10066              	.LVL1139:
1372:src/display.c **** 	      break;
 10067              		.loc 1 1372 9 view .LVU3245
 10068 0624 029D     		ldr	r5, [sp, #8]
 10069              	.LVL1140:
 10070              	.L1024:
1375:src/display.c **** 	      break;
 10071              		.loc 1 1375 6 is_stmt 1 view .LVU3246
1378:src/display.c **** 	  }
 10072              		.loc 1 1378 6 view .LVU3247
 10073              	.LBB571:
 10074              	.LBB572:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
ARM GAS  /tmp/ccPv3rzq.s 			page 295


 10075              		.loc 1 311 3 view .LVU3248
 10076 0626 3046     		mov	r0, r6
 10077              	.LBE572:
 10078              	.LBE571:
1375:src/display.c **** 	      break;
 10079              		.loc 1 1375 9 is_stmt 0 view .LVU3249
 10080 0628 0DB1     		cbz	r5, .L1025
 10081              	.LVL1141:
1375:src/display.c **** 	      break;
 10082              		.loc 1 1375 27 view .LVU3250
 10083 062a 092E     		cmp	r6, #9
 10084 062c 07D0     		beq	.L1170
 10085              	.L1025:
1378:src/display.c **** 	  }
 10086              		.loc 1 1378 6 view .LVU3251
 10087 062e BB4B     		ldr	r3, .L1229
 10088 0630 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10089              	.LVL1142:
 10090              	.LBB574:
 10091              	.LBI571:
 308:src/display.c ****   if (sep == SEP_NONE)
 10092              		.loc 1 308 14 is_stmt 1 view .LVU3252
 10093              	.LBB573:
 309:src/display.c ****     return res;
 10094              		.loc 1 309 3 view .LVU3253
 309:src/display.c ****     return res;
 10095              		.loc 1 309 6 is_stmt 0 view .LVU3254
 10096 0632 09B1     		cbz	r1, .L1026
 10097 0634 FFF7FEFF 		bl	set_separator.part.0
 10098              	.LVL1143:
 10099              	.L1026:
 309:src/display.c ****     return res;
 10100              		.loc 1 309 6 view .LVU3255
 10101              	.LBE573:
 10102              	.LBE574:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10103              		.loc 1 1370 4 is_stmt 1 view .LVU3256
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10104              		.loc 1 1371 6 view .LVU3257
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10105              		.loc 1 1371 13 is_stmt 0 view .LVU3258
 10106 0638 1B3E     		subs	r6, r6, #27
 10107              	.LVL1144:
1372:src/display.c **** 	      break;
 10108              		.loc 1 1372 6 is_stmt 1 view .LVU3259
1372:src/display.c **** 	      break;
 10109              		.loc 1 1372 9 is_stmt 0 view .LVU3260
 10110 063a 002E     		cmp	r6, #0
 10111 063c F3DC     		bgt	.L1024
 10112              	.L1170:
1372:src/display.c **** 	      break;
 10113              		.loc 1 1372 9 view .LVU3261
 10114 063e 019E     		ldr	r6, [sp, #4]
 10115              	.LVL1145:
1372:src/display.c **** 	      break;
 10116              		.loc 1 1372 9 view .LVU3262
 10117 0640 4D46     		mov	r5, r9
ARM GAS  /tmp/ccPv3rzq.s 			page 296


 10118              	.LVL1146:
 10119              	.L1005:
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10120              		.loc 1 1382 4 is_stmt 1 view .LVU3263
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10121              		.loc 1 1382 8 is_stmt 0 view .LVU3264
 10122 0642 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10123              		.loc 1 1382 7 view .LVU3265
 10124 0644 A2F14401 		sub	r1, r2, #68
 10125 0648 0129     		cmp	r1, #1
 10126 064a 11D8     		bhi	.L1183
 10127              	.LBB575:
1386:src/display.c **** #  endif
 10128              		.loc 1 1386 6 is_stmt 1 view .LVU3266
 10129              	.LVL1147:
1389:src/display.c **** 	      flags |= 2;
 10130              		.loc 1 1389 6 view .LVU3267
1390:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10131              		.loc 1 1390 14 is_stmt 0 view .LVU3268
 10132 064c 442A     		cmp	r2, #68
 10133 064e 14BF     		ite	ne
 10134 0650 4FF00C09 		movne	r9, #12
 10135 0654 4FF00E09 		moveq	r9, #14
 10136              	.LVL1148:
1391:src/display.c **** 	      flags |= 16;
 10137              		.loc 1 1391 6 is_stmt 1 view .LVU3269
1391:src/display.c **** 	      flags |= 16;
 10138              		.loc 1 1391 9 is_stmt 0 view .LVU3270
 10139 0658 BBF15A0F 		cmp	fp, #90
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10140              		.loc 1 1392 8 is_stmt 1 view .LVU3271
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10141              		.loc 1 1392 14 is_stmt 0 view .LVU3272
 10142 065c C8BF     		it	gt
 10143 065e 49F01009 		orrgt	r9, r9, #16
 10144              	.LVL1149:
1393:src/display.c **** 	  }
 10145              		.loc 1 1393 6 is_stmt 1 view .LVU3273
 10146 0662 681C     		adds	r0, r5, #1
 10147 0664 FFF7FEFF 		bl	s_to_i
 10148              	.LVL1150:
 10149 0668 4946     		mov	r1, r9
 10150 066a 0022     		movs	r2, #0
 10151 066c FFF7FEFF 		bl	set_exp
 10152              	.LVL1151:
 10153              	.L1183:
1393:src/display.c **** 	  }
 10154              		.loc 1 1393 6 is_stmt 0 view .LVU3274
 10155              	.LBE575:
 10156              	.LBE584:
 10157              	.LBE598:
2910:src/display.c **** 	      goto finish;
 10158              		.loc 1 2910 6 is_stmt 1 view .LVU3275
2910:src/display.c **** 	      goto finish;
 10159              		.loc 1 2910 9 is_stmt 0 view .LVU3276
 10160 0670 D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccPv3rzq.s 			page 297


 10161 0674 AA4D     		ldr	r5, .L1229+4
 10162 0676 002B     		cmp	r3, #0
 10163 0678 3FF4DDAD 		beq	.L996
 10164 067c 5CE5     		b	.L995
 10165              	.LVL1152:
 10166              	.L921:
2730:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10167              		.loc 1 2730 9 is_stmt 1 view .LVU3277
2730:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10168              		.loc 1 2730 12 is_stmt 0 view .LVU3278
 10169 067e B9F1000F 		cmp	r9, #0
 10170 0682 54D1     		bne	.L1200
2785:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10171              		.loc 1 2785 9 is_stmt 1 view .LVU3279
2785:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10172              		.loc 1 2785 12 is_stmt 0 view .LVU3280
 10173 0684 1107     		lsls	r1, r2, #28
 10174 0686 00F1A180 		bmi	.L1201
2800:src/display.c **** 	  show_status();
 10175              		.loc 1 2800 9 is_stmt 1 view .LVU3281
2800:src/display.c **** 	  show_status();
 10176              		.loc 1 2800 19 is_stmt 0 view .LVU3282
 10177 068a 94F80CA0 		ldrb	r10, [r4, #12]	@ zero_extendqisi2
2800:src/display.c **** 	  show_status();
 10178              		.loc 1 2800 12 view .LVU3283
 10179 068e BAF1000F 		cmp	r10, #0
 10180 0692 40F0BA80 		bne	.L1202
2803:src/display.c **** 	  show_label();
 10181              		.loc 1 2803 9 is_stmt 1 view .LVU3284
2803:src/display.c **** 	  show_label();
 10182              		.loc 1 2803 13 is_stmt 0 view .LVU3285
 10183 0696 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
2803:src/display.c **** 	  show_label();
 10184              		.loc 1 2803 12 view .LVU3286
 10185 0698 5107     		lsls	r1, r2, #29
 10186 069a 00F14F81 		bmi	.L1203
2806:src/display.c **** 	  show_registers();
 10187              		.loc 1 2806 9 is_stmt 1 view .LVU3287
2806:src/display.c **** 	  show_registers();
 10188              		.loc 1 2806 12 is_stmt 0 view .LVU3288
 10189 069e 1207     		lsls	r2, r2, #28
 10190 06a0 00F1A081 		bmi	.L1204
2816:src/display.c **** 	  if (DispMsg) { 
 10191              		.loc 1 2816 9 is_stmt 1 view .LVU3289
2816:src/display.c **** 	  if (DispMsg) { 
 10192              		.loc 1 2816 12 is_stmt 0 view .LVU3290
 10193 06a4 4206     		lsls	r2, r0, #25
 10194 06a6 40F1C081 		bpl	.L972
2817:src/display.c **** 	    set_status(DispMsg);
 10195              		.loc 1 2817 4 is_stmt 1 view .LVU3291
2817:src/display.c **** 	    set_status(DispMsg);
 10196              		.loc 1 2817 8 is_stmt 0 view .LVU3292
 10197 06aa DFF88CA2 		ldr	r10, .L1229+28
 10198 06ae DAF80010 		ldr	r1, [r10]
2817:src/display.c **** 	    set_status(DispMsg);
 10199              		.loc 1 2817 7 view .LVU3293
 10200 06b2 0029     		cmp	r1, #0
ARM GAS  /tmp/ccPv3rzq.s 			page 298


 10201 06b4 00F0D381 		beq	.L973
2818:src/display.c **** 	  } else if (DispPlot) {
 10202              		.loc 1 2818 6 is_stmt 1 view .LVU3294
 10203 06b8 0846     		mov	r0, r1
 10204 06ba FFF7FEFF 		bl	set_status
 10205              	.LVL1153:
2870:src/display.c ****       nostk:
 10206              		.loc 1 2870 2 view .LVU3295
 10207 06be 994B     		ldr	r3, .L1229+8
 10208 06c0 0093     		str	r3, [sp]
 10209 06c2 FFF7FEFF 		bl	show_stack
 10210              	.LVL1154:
2872:src/display.c **** 	if (!skip) {
 10211              		.loc 1 2872 2 view .LVU3296
 10212 06c6 FFF7FEFF 		bl	show_flags
 10213              	.LVL1155:
2873:src/display.c **** 	  if (State2.runmode) {
 10214              		.loc 1 2873 2 view .LVU3297
 10215 06ca DCE4     		b	.L902
 10216              	.LVL1156:
 10217              	.L1195:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10218              		.loc 1 2668 6 view .LVU3298
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10219              		.loc 1 2668 11 is_stmt 0 view .LVU3299
 10220 06cc 2189     		ldrh	r1, [r4, #8]
 10221 06ce FFF7FEFF 		bl	num_arg_0
 10222              	.LVL1157:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10223              		.loc 1 2668 11 view .LVU3300
 10224 06d2 0346     		mov	r3, r0
 10225              	.LVL1158:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10226              		.loc 1 2668 11 view .LVU3301
 10227 06d4 CBE6     		b	.L908
 10228              	.LVL1159:
 10229              	.L1004:
 10230              	.LBB599:
 10231              	.LBB585:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10232              		.loc 1 1319 9 is_stmt 1 view .LVU3302
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10233              		.loc 1 1319 2 is_stmt 0 view .LVU3303
 10234 06d6 0029     		cmp	r1, #0
 10235 06d8 00F09180 		beq	.L1050
1262:src/display.c **** #endif
 10236              		.loc 1 1262 11 view .LVU3304
 10237 06dc CDF808B0 		str	fp, [sp, #8]
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10238              		.loc 1 1256 11 view .LVU3305
 10239 06e0 4FF0FF39 		mov	r9, #-1
 10240              	.LVL1160:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10241              		.loc 1 1256 11 view .LVU3306
 10242 06e4 59E7     		b	.L1019
 10243              	.LVL1161:
 10244              	.L1018:
ARM GAS  /tmp/ccPv3rzq.s 			page 299


1344:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10245              		.loc 1 1344 5 is_stmt 1 view .LVU3307
 10246              	.LBB576:
 10247              	.LBI576:
 293:src/display.c ****   if (res) {
 10248              		.loc 1 293 14 view .LVU3308
 10249              	.LBB577:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10250              		.loc 1 294 3 view .LVU3309
 10251 06e6 904B     		ldr	r3, .L1229+12
 10252 06e8 ABF10900 		sub	r0, fp, #9
 10253              	.LVL1162:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10254              		.loc 1 294 3 is_stmt 0 view .LVU3310
 10255 06ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10256 06ee FFF7FEFF 		bl	set_decimal.part.0
 10257              	.LVL1163:
 301:src/display.c **** }
 10258              		.loc 1 301 3 is_stmt 1 view .LVU3311
 301:src/display.c **** }
 10259              		.loc 1 301 10 is_stmt 0 view .LVU3312
 10260 06f2 D946     		mov	r9, fp
 10261 06f4 2B46     		mov	r3, r5
 10262 06f6 4DE7     		b	.L1017
 10263              	.LVL1164:
 10264              	.L1197:
 301:src/display.c **** }
 10265              		.loc 1 301 10 view .LVU3313
 10266              	.LBE577:
 10267              	.LBE576:
 10268              	.LBE585:
 10269              	.LBE599:
2691:src/display.c **** 	    *bp++ = '_';
 10270              		.loc 1 2691 6 is_stmt 1 view .LVU3314
2691:src/display.c **** 	    *bp++ = '_';
 10271              		.loc 1 2691 12 is_stmt 0 view .LVU3315
 10272 06f8 1122     		movs	r2, #17
2692:src/display.c **** 	  } else {
 10273              		.loc 1 2692 12 view .LVU3316
 10274 06fa 5F23     		movs	r3, #95
2691:src/display.c **** 	    *bp++ = '_';
 10275              		.loc 1 2691 12 view .LVU3317
 10276 06fc 0270     		strb	r2, [r0]
2692:src/display.c **** 	  } else {
 10277              		.loc 1 2692 6 is_stmt 1 view .LVU3318
 10278              	.LVL1165:
2692:src/display.c **** 	  } else {
 10279              		.loc 1 2692 12 is_stmt 0 view .LVU3319
 10280 06fe 4370     		strb	r3, [r0, #1]
 10281 0700 6DE5     		b	.L938
 10282              	.LVL1166:
 10283              	.L1051:
 10284              	.LBB600:
 10285              	.LBB586:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10286              		.loc 1 1279 4 view .LVU3320
 10287 0702 8346     		mov	fp, r0
ARM GAS  /tmp/ccPv3rzq.s 			page 300


1262:src/display.c **** #endif
 10288              		.loc 1 1262 11 view .LVU3321
 10289 0704 0290     		str	r0, [sp, #8]
 10290              	.LBB578:
1315:src/display.c **** 	}
 10291              		.loc 1 1315 16 view .LVU3322
 10292 0706 4FF0FF39 		mov	r9, #-1
 10293 070a 46E7     		b	.L1019
 10294              	.LVL1167:
 10295              	.L1009:
1305:src/display.c **** 	      gotdot = 0;
 10296              		.loc 1 1305 11 is_stmt 1 view .LVU3323
1305:src/display.c **** 	      gotdot = 0;
 10297              		.loc 1 1305 14 is_stmt 0 view .LVU3324
 10298 070c 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10299              	.LVL1168:
1305:src/display.c **** 	      gotdot = 0;
 10300              		.loc 1 1305 14 view .LVU3325
 10301 070e 2E2A     		cmp	r2, #46
 10302 0710 00F0F480 		beq	.L1205
 10303              	.LVL1169:
1312:src/display.c **** 	    overflow_to_left = 1;
 10304              		.loc 1 1312 6 is_stmt 1 view .LVU3326
 10305 0714 3C21     		movs	r1, #60
 10306              	.LVL1170:
1312:src/display.c **** 	    overflow_to_left = 1;
 10307              		.loc 1 1312 6 is_stmt 0 view .LVU3327
 10308 0716 FFF7FEFF 		bl	set_dig
 10309              	.LVL1171:
1313:src/display.c **** 	  }
 10310              		.loc 1 1313 6 is_stmt 1 view .LVU3328
1313:src/display.c **** 	  }
 10311              		.loc 1 1313 6 is_stmt 0 view .LVU3329
 10312 071a 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 10313              		.loc 1 1313 6 view .LVU3330
 10314              	.LBE578:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10315              		.loc 1 1319 9 is_stmt 1 view .LVU3331
 10316              	.LBB579:
1299:src/display.c **** 	    if (gotdot <= j) {
 10317              		.loc 1 1299 8 is_stmt 0 view .LVU3332
 10318 071c 4FF0090B 		mov	fp, #9
 10319              	.LBE579:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10320              		.loc 1 1319 2 view .LVU3333
 10321 0720 0029     		cmp	r1, #0
 10322 0722 8ED0     		beq	.L1005
 10323              	.LBB580:
1311:src/display.c **** 	    set_dig(0, '<');
 10324              		.loc 1 1311 18 view .LVU3334
 10325 0724 4FF0FF39 		mov	r9, #-1
1299:src/display.c **** 	    if (gotdot <= j) {
 10326              		.loc 1 1299 8 view .LVU3335
 10327 0728 4FF0090B 		mov	fp, #9
 10328 072c 20E7     		b	.L1042
 10329              	.LVL1172:
ARM GAS  /tmp/ccPv3rzq.s 			page 301


 10330              	.L1200:
1299:src/display.c **** 	    if (gotdot <= j) {
 10331              		.loc 1 1299 8 view .LVU3336
 10332              	.LBE580:
 10333              	.LBE586:
 10334              	.LBE600:
 10335              	.LBB601:
2731:src/display.c **** 	  char b2[16];
 10336              		.loc 1 2731 4 is_stmt 1 view .LVU3337
2731:src/display.c **** 	  char b2[16];
 10337              		.loc 1 2731 45 is_stmt 0 view .LVU3338
 10338 072e DBF80030 		ldr	r3, [fp]
 10339 0732 B3F8DC07 		ldrh	r0, [r3, #2012]
2731:src/display.c **** 	  char b2[16];
 10340              		.loc 1 2731 22 view .LVU3339
 10341 0736 C0F34610 		ubfx	r0, r0, #5, #7
 10342 073a FFF7FEFF 		bl	current_catalogue
 10343              	.LVL1173:
2735:src/display.c **** 	  p = catcmd(op, b2);
 10344              		.loc 1 2735 9 view .LVU3340
 10345 073e 7B49     		ldr	r1, .L1229+16
2731:src/display.c **** 	  char b2[16];
 10346              		.loc 1 2731 22 view .LVU3341
 10347 0740 0646     		mov	r6, r0
 10348              	.LVL1174:
2732:src/display.c **** 	  const char *p;
 10349              		.loc 1 2732 4 is_stmt 1 view .LVU3342
2733:src/display.c **** 
 10350              		.loc 1 2733 4 view .LVU3343
2735:src/display.c **** 	  p = catcmd(op, b2);
 10351              		.loc 1 2735 4 view .LVU3344
2735:src/display.c **** 	  p = catcmd(op, b2);
 10352              		.loc 1 2735 9 is_stmt 0 view .LVU3345
 10353 0742 1EA8     		add	r0, sp, #120
 10354              	.LVL1175:
2735:src/display.c **** 	  p = catcmd(op, b2);
 10355              		.loc 1 2735 9 view .LVU3346
 10356 0744 FFF7FEFF 		bl	scopy
 10357              	.LVL1176:
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10358              		.loc 1 2736 8 view .LVU3347
 10359 0748 08A9     		add	r1, sp, #32
2735:src/display.c **** 	  p = catcmd(op, b2);
 10360              		.loc 1 2735 9 view .LVU3348
 10361 074a 8246     		mov	r10, r0
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10362              		.loc 1 2736 8 view .LVU3349
 10363 074c 3046     		mov	r0, r6
 10364              	.LVL1177:
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10365              		.loc 1 2736 4 is_stmt 1 view .LVU3350
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10366              		.loc 1 2736 8 is_stmt 0 view .LVU3351
 10367 074e FFF7FEFF 		bl	catcmd
 10368              	.LVL1178:
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10369              		.loc 1 2737 7 view .LVU3352
ARM GAS  /tmp/ccPv3rzq.s 			page 302


 10370 0752 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10371 0754 142B     		cmp	r3, #20
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10372              		.loc 1 2736 8 view .LVU3353
 10373 0756 0146     		mov	r1, r0
 10374              	.LVL1179:
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10375              		.loc 1 2737 4 is_stmt 1 view .LVU3354
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10376              		.loc 1 2737 7 is_stmt 0 view .LVU3355
 10377 0758 05D0     		beq	.L923
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10378              		.loc 1 2737 29 discriminator 1 view .LVU3356
 10379 075a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10380 075c 9807     		lsls	r0, r3, #30
 10381              	.LVL1180:
2738:src/display.c **** 	  bp = scopy(bp, p);
 10382              		.loc 1 2738 6 is_stmt 1 discriminator 1 view .LVU3357
2738:src/display.c **** 	  bp = scopy(bp, p);
 10383              		.loc 1 2738 12 is_stmt 0 discriminator 1 view .LVU3358
 10384 075e 44BF     		itt	mi
 10385 0760 1423     		movmi	r3, #20
 10386 0762 0AF8013B 		strbmi	r3, [r10], #1
 10387              	.LVL1181:
 10388              	.L923:
2739:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10389              		.loc 1 2739 4 is_stmt 1 view .LVU3359
2739:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10390              		.loc 1 2739 9 is_stmt 0 view .LVU3360
 10391 0766 5046     		mov	r0, r10
 10392 0768 FFF7FEFF 		bl	scopy
 10393              	.LVL1182:
2740:src/display.c **** 	    // State2.disp_small = 1;
 10394              		.loc 1 2740 4 is_stmt 1 view .LVU3361
2740:src/display.c **** 	    // State2.disp_small = 1;
 10395              		.loc 1 2740 7 is_stmt 0 view .LVU3362
 10396 076c A9F11003 		sub	r3, r9, #16
 10397 0770 012B     		cmp	r3, #1
 10398 0772 40F2B180 		bls	.L1206
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10399              		.loc 1 2747 11 is_stmt 1 view .LVU3363
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10400              		.loc 1 2747 15 is_stmt 0 view .LVU3364
 10401 0776 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10402              		.loc 1 2747 14 view .LVU3365
 10403 0778 13F04003 		ands	r3, r3, #64
 10404 077c 08D0     		beq	.L1046
2748:src/display.c **** 	      decNumber x, r;
 10405              		.loc 1 2748 6 is_stmt 1 view .LVU3366
2748:src/display.c **** 	      decNumber x, r;
 10406              		.loc 1 2748 9 is_stmt 0 view .LVU3367
 10407 077e B9F1120F 		cmp	r9, #18
 10408 0782 00F01C82 		beq	.L1207
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10409              		.loc 1 2768 13 is_stmt 1 view .LVU3368
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
ARM GAS  /tmp/ccPv3rzq.s 			page 303


 10410              		.loc 1 2768 46 is_stmt 0 view .LVU3369
 10411 0786 A6F58873 		sub	r3, r6, #272
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10412              		.loc 1 2768 16 view .LVU3370
 10413 078a 0D2B     		cmp	r3, #13
 10414 078c 40F2FF81 		bls	.L1208
 10415              	.L1046:
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10416              		.loc 1 2768 16 view .LVU3371
 10417              	.LBE601:
2591:src/display.c **** 	int x_disp = 0;
 10418              		.loc 1 2591 6 view .LVU3372
 10419 0790 4FF0000A 		mov	r10, #0
 10420              	.LVL1183:
 10421              	.L927:
 10422              	.LBB611:
2777:src/display.c **** 	    set_status_top(buf);
 10423              		.loc 1 2777 4 is_stmt 1 view .LVU3373
2777:src/display.c **** 	    set_status_top(buf);
 10424              		.loc 1 2777 7 is_stmt 0 view .LVU3374
 10425 0794 002D     		cmp	r5, #0
 10426 0796 00F0BB80 		beq	.L932
2778:src/display.c **** 	    no_status_top = 1;
 10427              		.loc 1 2778 6 is_stmt 1 view .LVU3375
 10428              	.LVL1184:
 10429              	.LBB602:
 10430              	.LBI602:
3524:src/display.c **** 	if (no_status_top) return;
 10431              		.loc 1 3524 19 view .LVU3376
 10432              	.LBB603:
3525:src/display.c **** 	if (State2.runmode) {
 10433              		.loc 1 3525 2 view .LVU3377
3525:src/display.c **** 	if (State2.runmode) {
 10434              		.loc 1 3525 5 is_stmt 0 view .LVU3378
 10435 079a B7F90030 		ldrsh	r3, [r7]
 10436 079e 13B9     		cbnz	r3, .L933
 10437 07a0 1EA8     		add	r0, sp, #120
 10438              	.LVL1185:
3525:src/display.c **** 	if (State2.runmode) {
 10439              		.loc 1 3525 5 view .LVU3379
 10440 07a2 FFF7FEFF 		bl	set_status_top.part.0
 10441              	.LVL1186:
 10442              	.L933:
3525:src/display.c **** 	if (State2.runmode) {
 10443              		.loc 1 3525 5 view .LVU3380
 10444              	.LBE603:
 10445              	.LBE602:
2779:src/display.c **** 	    annuc = 1;
 10446              		.loc 1 2779 6 is_stmt 1 view .LVU3381
2779:src/display.c **** 	    annuc = 1;
 10447              		.loc 1 2779 20 is_stmt 0 view .LVU3382
 10448 07a6 0123     		movs	r3, #1
2780:src/display.c **** 	  }
 10449              		.loc 1 2780 12 view .LVU3383
 10450 07a8 2E46     		mov	r6, r5
2779:src/display.c **** 	    annuc = 1;
 10451              		.loc 1 2779 20 view .LVU3384
ARM GAS  /tmp/ccPv3rzq.s 			page 304


 10452 07aa 3B80     		strh	r3, [r7]	@ movhi
2780:src/display.c **** 	  }
 10453              		.loc 1 2780 6 is_stmt 1 view .LVU3385
 10454              	.LVL1187:
 10455              	.L934:
2780:src/display.c **** 	  }
 10456              		.loc 1 2780 6 is_stmt 0 view .LVU3386
 10457              	.LBE611:
2870:src/display.c ****       nostk:
 10458              		.loc 1 2870 2 is_stmt 1 view .LVU3387
 10459 07ac FFF7FEFF 		bl	show_stack
 10460              	.LVL1188:
 10461              	.LDL2:
2872:src/display.c **** 	if (!skip) {
 10462              		.loc 1 2872 2 view .LVU3388
 10463 07b0 FFF7FEFF 		bl	show_flags
 10464              	.LVL1189:
2873:src/display.c **** 	  if (State2.runmode) {
 10465              		.loc 1 2873 2 view .LVU3389
2873:src/display.c **** 	  if (State2.runmode) {
 10466              		.loc 1 2873 5 is_stmt 0 view .LVU3390
 10467 07b4 BAF1000F 		cmp	r10, #0
 10468 07b8 00F04B81 		beq	.L1179
 10469              	.LVL1190:
 10470              	.L935:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10471              		.loc 1 2942 2 is_stmt 1 view .LVU3391
 10472 07bc FFF7FEFF 		bl	set_annunciators
 10473              	.LVL1191:
2943:src/display.c **** 	  ShowRPN = 0;
 10474              		.loc 1 2943 2 view .LVU3392
 10475 07c0 584B     		ldr	r3, .L1229+8
 10476 07c2 DFF874A1 		ldr	r10, .L1229+28
 10477 07c6 564D     		ldr	r5, .L1229+4
 10478 07c8 0093     		str	r3, [sp]
 10479 07ca 3BE5     		b	.L897
 10480              	.LVL1192:
 10481              	.L1201:
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10482              		.loc 1 2786 4 view .LVU3393
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10483              		.loc 1 2786 42 is_stmt 0 view .LVU3394
 10484 07cc E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10485 07ce 5849     		ldr	r1, .L1229+20
 10486 07d0 0423     		movs	r3, #4
 10487 07d2 03EB0213 		add	r3, r3, r2, lsl #4
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10488              		.loc 1 2786 9 view .LVU3395
 10489 07d6 1944     		add	r1, r1, r3
 10490 07d8 2722     		movs	r2, #39
 10491 07da 1EA8     		add	r0, sp, #120
 10492              	.LVL1193:
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10493              		.loc 1 2786 9 view .LVU3396
 10494 07dc FFF7FEFF 		bl	scopy_char
 10495              	.LVL1194:
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
ARM GAS  /tmp/ccPv3rzq.s 			page 305


 10496              		.loc 1 2787 7 view .LVU3397
 10497 07e0 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10498              	.LVL1195:
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
 10499              		.loc 1 2787 4 is_stmt 1 view .LVU3398
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
 10500              		.loc 1 2787 7 is_stmt 0 view .LVU3399
 10501 07e2 002B     		cmp	r3, #0
 10502 07e4 3FF4FBAC 		beq	.L938
2788:src/display.c **** 	    if (State2.numdigit > 1)
 10503              		.loc 1 2788 6 is_stmt 1 view .LVU3400
 10504              	.LVL1196:
2788:src/display.c **** 	    if (State2.numdigit > 1)
 10505              		.loc 1 2788 14 is_stmt 0 view .LVU3401
 10506 07e8 2389     		ldrh	r3, [r4, #8]
 10507 07ea 0370     		strb	r3, [r0]
2789:src/display.c **** 	      *bp++ = State2.digval2;
 10508              		.loc 1 2789 6 is_stmt 1 view .LVU3402
2789:src/display.c **** 	      *bp++ = State2.digval2;
 10509              		.loc 1 2789 9 is_stmt 0 view .LVU3403
 10510 07ec E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10511 07ee 012B     		cmp	r3, #1
2790:src/display.c **** 	  }
 10512              		.loc 1 2790 8 is_stmt 1 view .LVU3404
 10513              	.LVL1197:
2790:src/display.c **** 	  }
 10514              		.loc 1 2790 22 is_stmt 0 view .LVU3405
 10515 07f0 84BF     		itt	hi
 10516 07f2 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2790:src/display.c **** 	  }
 10517              		.loc 1 2790 14 view .LVU3406
 10518 07f4 4370     		strbhi	r3, [r0, #1]
 10519 07f6 F2E4     		b	.L938
 10520              	.LVL1198:
 10521              	.L1052:
 10522              	.LBB612:
 10523              	.LBB587:
 10524              	.LBB581:
1299:src/display.c **** 	    if (gotdot <= j) {
 10525              		.loc 1 1299 8 view .LVU3407
 10526 07f8 4FF0090B 		mov	fp, #9
 10527 07fc AFE6     		b	.L1010
 10528              	.LVL1199:
 10529              	.L1050:
1299:src/display.c **** 	    if (gotdot <= j) {
 10530              		.loc 1 1299 8 view .LVU3408
 10531              	.LBE581:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10532              		.loc 1 1279 4 view .LVU3409
 10533 07fe 8B46     		mov	fp, r1
 10534 0800 1FE7     		b	.L1005
 10535              	.LVL1200:
 10536              	.L919:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10537              		.loc 1 1279 4 view .LVU3410
 10538              	.LBE587:
 10539              	.LBE612:
ARM GAS  /tmp/ccPv3rzq.s 			page 306


2704:src/display.c **** 	    }
 10540              		.loc 1 2704 3 is_stmt 1 view .LVU3411
2704:src/display.c **** 	    }
 10541              		.loc 1 2704 8 is_stmt 0 view .LVU3412
 10542 0802 2189     		ldrh	r1, [r4, #8]
 10543 0804 FFF7FEFF 		bl	num_arg_0
 10544              	.LVL1201:
2704:src/display.c **** 	    }
 10545              		.loc 1 2704 8 view .LVU3413
 10546 0808 8EE6     		b	.L918
 10547              	.LVL1202:
 10548              	.L1202:
2801:src/display.c **** 	  skip = 1;
 10549              		.loc 1 2801 4 is_stmt 1 view .LVU3414
 10550              	.LBB613:
 10551              	.LBI613:
2359:src/display.c **** 	int i, n;
 10552              		.loc 1 2359 19 view .LVU3415
 10553              	.LBB614:
2360:src/display.c **** 	int j = SEGS_EXP_BASE;
 10554              		.loc 1 2360 2 view .LVU3416
2361:src/display.c **** 	const int status = State2.status - 3;
 10555              		.loc 1 2361 2 view .LVU3417
2362:src/display.c **** 	char buf[16], *p = buf;
 10556              		.loc 1 2362 2 view .LVU3418
2366:src/display.c **** 	  set_status("Free:");
 10557              		.loc 1 2366 5 is_stmt 0 view .LVU3419
 10558 080a BAF1010F 		cmp	r10, #1
2362:src/display.c **** 	char buf[16], *p = buf;
 10559              		.loc 1 2362 12 view .LVU3420
 10560 080e AAF10303 		sub	r3, r10, #3
 10561              	.LVL1203:
2363:src/display.c **** 	unsigned int pc;
 10562              		.loc 1 2363 2 is_stmt 1 view .LVU3421
2364:src/display.c **** 
 10563              		.loc 1 2364 2 view .LVU3422
2366:src/display.c **** 	  set_status("Free:");
 10564              		.loc 1 2366 2 view .LVU3423
2366:src/display.c **** 	  set_status("Free:");
 10565              		.loc 1 2366 5 is_stmt 0 view .LVU3424
 10566 0812 00F09E81 		beq	.L1209
2374:src/display.c **** 	  /* Top line */
 10567              		.loc 1 2374 7 is_stmt 1 view .LVU3425
2374:src/display.c **** 	  /* Top line */
 10568              		.loc 1 2374 10 is_stmt 0 view .LVU3426
 10569 0816 5A1C     		adds	r2, r3, #1
 10570 0818 00F01582 		beq	.L1210
 10571              	.LBB615:
2391:src/display.c **** 	  int end;
 10572              		.loc 1 2391 4 is_stmt 1 view .LVU3427
2392:src/display.c **** 	  int group = 10;
 10573              		.loc 1 2392 4 view .LVU3428
2393:src/display.c **** 	  int start = 0;
 10574              		.loc 1 2393 4 view .LVU3429
 10575              	.LVL1204:
2394:src/display.c **** 		
 10576              		.loc 1 2394 4 view .LVU3430
ARM GAS  /tmp/ccPv3rzq.s 			page 307


2396:src/display.c **** 	    base = 10 * status;
 10577              		.loc 1 2396 4 view .LVU3431
2396:src/display.c **** 	    base = 10 * status;
 10578              		.loc 1 2396 7 is_stmt 0 view .LVU3432
 10579 081c 092B     		cmp	r3, #9
 10580 081e 40F35B81 		ble	.L1211
2406:src/display.c **** 	    base = regX_idx;
 10581              		.loc 1 2406 9 is_stmt 1 view .LVU3433
2406:src/display.c **** 	    base = regX_idx;
 10582              		.loc 1 2406 12 is_stmt 0 view .LVU3434
 10583 0822 0A2B     		cmp	r3, #10
 10584 0824 00F0F581 		beq	.L1212
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10585              		.loc 1 2414 6 is_stmt 1 view .LVU3435
 10586              	.LVL1205:
2415:src/display.c **** 	    set_status("FL.00-.15");
 10587              		.loc 1 2415 6 view .LVU3436
2416:src/display.c **** 	  }
 10588              		.loc 1 2416 6 view .LVU3437
 10589 0828 4248     		ldr	r0, .L1229+24
 10590 082a FFF7FEFF 		bl	set_status
 10591              	.LVL1206:
2415:src/display.c **** 	    set_status("FL.00-.15");
 10592              		.loc 1 2415 10 is_stmt 0 view .LVU3438
 10593 082e 7F23     		movs	r3, #127
 10594 0830 0293     		str	r3, [sp, #8]
2394:src/display.c **** 		
 10595              		.loc 1 2394 8 view .LVU3439
 10596 0832 4FF0000A 		mov	r10, #0
 10597              	.LVL1207:
2393:src/display.c **** 	  int start = 0;
 10598              		.loc 1 2393 8 view .LVU3440
 10599 0836 4FF00A09 		mov	r9, #10
 10600              	.LVL1208:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10601              		.loc 1 2414 11 view .LVU3441
 10602 083a 7023     		movs	r3, #112
 10603              	.LVL1209:
 10604              	.L947:
2418:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10605              		.loc 1 2418 4 is_stmt 1 view .LVU3442
2418:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10606              		.loc 1 2418 6 is_stmt 0 view .LVU3443
 10607 083c 0AEBCA05 		add	r5, r10, r10, lsl #3
 10608              	.LVL1210:
2419:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10609              		.loc 1 2419 4 is_stmt 1 view .LVU3444
 10610              	.LBB616:
 10611              	.LBI616:
 293:src/display.c ****   if (res) {
 10612              		.loc 1 293 14 view .LVU3445
 10613              	.LBE616:
 10614              	.LBE615:
 10615              	.LBE614:
 10616              	.LBE613:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10617              		.loc 1 294 3 view .LVU3446
ARM GAS  /tmp/ccPv3rzq.s 			page 308


 10618              	.LBB654:
 10619              	.LBB642:
 10620              	.LBB634:
 10621              	.LBB619:
 10622              	.LBB617:
 10623              	.LBI617:
 293:src/display.c ****   if (res) {
 10624              		.loc 1 293 14 view .LVU3447
 10625              	.LBB618:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10626              		.loc 1 297 5 view .LVU3448
 10627 0840 E81D     		adds	r0, r5, #7
 10628 0842 0093     		str	r3, [sp]
 10629 0844 FFF7FEFF 		bl	set_dot
 10630              	.LVL1211:
 298:src/display.c ****       set_dot(posn+8);
 10631              		.loc 1 298 5 view .LVU3449
 301:src/display.c **** }
 10632              		.loc 1 301 3 view .LVU3450
 301:src/display.c **** }
 10633              		.loc 1 301 3 is_stmt 0 view .LVU3451
 10634              	.LBE618:
 10635              	.LBE617:
 10636              	.LBE619:
 10637              	.LBE634:
 10638              	.LBE642:
 10639              	.LBE654:
 301:src/display.c **** }
 10640              		.loc 1 301 3 is_stmt 1 view .LVU3452
 10641              	.LBB655:
 10642              	.LBB643:
 10643              	.LBB635:
2420:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10644              		.loc 1 2420 4 view .LVU3453
 10645 0848 009B     		ldr	r3, [sp]
 10646 084a 0496     		str	r6, [sp, #16]
 10647 084c CAEB4901 		rsb	r1, r10, r9, lsl #1
 10648 0850 CA18     		adds	r2, r1, r3
 10649 0852 0392     		str	r2, [sp, #12]
2421:src/display.c **** 	    int k = i + base - start;
 10650              		.loc 1 2421 30 is_stmt 0 view .LVU3454
 10651 0854 0AEB0902 		add	r2, r10, r9
 10652 0858 9944     		add	r9, r9, r3
 10653              	.LVL1212:
2421:src/display.c **** 	    int k = i + base - start;
 10654              		.loc 1 2421 30 view .LVU3455
 10655 085a A3EB0A03 		sub	r3, r3, r10
 10656 085e 029E     		ldr	r6, [sp, #8]
 10657 0860 0092     		str	r2, [sp]
2420:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10658              		.loc 1 2420 6 view .LVU3456
 10659 0862 0935     		adds	r5, r5, #9
 10660              	.LVL1213:
2421:src/display.c **** 	    int k = i + base - start;
 10661              		.loc 1 2421 4 is_stmt 1 view .LVU3457
2421:src/display.c **** 	    int k = i + base - start;
 10662              		.loc 1 2421 20 view .LVU3458
ARM GAS  /tmp/ccPv3rzq.s 			page 309


 10663 0864 0193     		str	r3, [sp, #4]
 10664 0866 12E0     		b	.L951
 10665              	.LVL1214:
 10666              	.L949:
 10667              	.LBB620:
2431:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10668              		.loc 1 2431 6 view .LVU3459
 10669 0868 2846     		mov	r0, r5
 10670 086a FFF7FEFF 		bl	set_dig
 10671              	.LVL1215:
2432:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10672              		.loc 1 2432 6 view .LVU3460
 10673              	.LBB621:
 10674              	.LBI621:
 293:src/display.c ****   if (res) {
 10675              		.loc 1 293 14 view .LVU3461
 10676              	.LBE621:
 10677              	.LBE620:
 10678              	.LBE635:
 10679              	.LBE643:
 10680              	.LBE655:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10681              		.loc 1 294 3 view .LVU3462
 10682              	.LBB656:
 10683              	.LBB644:
 10684              	.LBB636:
 10685              	.LBB629:
 10686              	.LBB624:
 10687              	.LBB622:
 10688              	.LBI622:
 293:src/display.c ****   if (res) {
 10689              		.loc 1 293 14 view .LVU3463
 10690              	.LBB623:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10691              		.loc 1 297 5 view .LVU3464
 10692 086e E81D     		adds	r0, r5, #7
 10693 0870 FFF7FEFF 		bl	set_dot
 10694              	.LVL1216:
 298:src/display.c ****       set_dot(posn+8);
 10695              		.loc 1 298 5 view .LVU3465
 301:src/display.c **** }
 10696              		.loc 1 301 3 view .LVU3466
 301:src/display.c **** }
 10697              		.loc 1 301 3 is_stmt 0 view .LVU3467
 10698              	.LBE623:
 10699              	.LBE622:
 10700              	.LBE624:
 10701              	.LBE629:
 10702              	.LBE636:
 10703              	.LBE644:
 10704              	.LBE656:
 301:src/display.c **** }
 10705              		.loc 1 301 3 is_stmt 1 view .LVU3468
 10706              	.LBB657:
 10707              	.LBB645:
 10708              	.LBB637:
 10709              	.LBB630:
ARM GAS  /tmp/ccPv3rzq.s 			page 310


2433:src/display.c **** 	    if (i == 4) {
 10710              		.loc 1 2433 6 view .LVU3469
2434:src/display.c **** 	      set_dig(j, 8);
 10711              		.loc 1 2434 9 is_stmt 0 view .LVU3470
 10712 0874 BAF1040F 		cmp	r10, #4
2433:src/display.c **** 	    if (i == 4) {
 10713              		.loc 1 2433 8 view .LVU3471
 10714 0878 05F10900 		add	r0, r5, #9
 10715              	.LVL1217:
2434:src/display.c **** 	      set_dig(j, 8);
 10716              		.loc 1 2434 6 is_stmt 1 view .LVU3472
2434:src/display.c **** 	      set_dig(j, 8);
 10717              		.loc 1 2434 9 is_stmt 0 view .LVU3473
 10718 087c 23D0     		beq	.L1213
2433:src/display.c **** 	    if (i == 4) {
 10719              		.loc 1 2433 8 view .LVU3474
 10720 087e 0546     		mov	r5, r0
 10721              	.LVL1218:
 10722              	.L950:
2433:src/display.c **** 	    if (i == 4) {
 10723              		.loc 1 2433 8 view .LVU3475
 10724              	.LBE630:
2421:src/display.c **** 	    int k = i + base - start;
 10725              		.loc 1 2421 39 is_stmt 1 view .LVU3476
2421:src/display.c **** 	    int k = i + base - start;
 10726              		.loc 1 2421 4 is_stmt 0 view .LVU3477
 10727 0880 009B     		ldr	r3, [sp]
2421:src/display.c **** 	    int k = i + base - start;
 10728              		.loc 1 2421 40 view .LVU3478
 10729 0882 0AF1010A 		add	r10, r10, #1
 10730              	.LVL1219:
2421:src/display.c **** 	    int k = i + base - start;
 10731              		.loc 1 2421 20 is_stmt 1 view .LVU3479
2421:src/display.c **** 	    int k = i + base - start;
 10732              		.loc 1 2421 4 is_stmt 0 view .LVU3480
 10733 0886 5345     		cmp	r3, r10
 10734 0888 09F10109 		add	r9, r9, #1
 10735 088c 74D0     		beq	.L1214
 10736              	.L951:
 10737              	.LBB631:
2422:src/display.c **** 	    int l = get_user_flag(k);
 10738              		.loc 1 2422 6 is_stmt 1 view .LVU3481
 10739              	.LVL1220:
2423:src/display.c **** 	    k += group;
 10740              		.loc 1 2423 6 view .LVU3482
2423:src/display.c **** 	    k += group;
 10741              		.loc 1 2423 14 is_stmt 0 view .LVU3483
 10742 088e 019B     		ldr	r3, [sp, #4]
 10743 0890 03EB0A00 		add	r0, r3, r10
 10744 0894 FFF7FEFF 		bl	get_user_flag
 10745              	.LVL1221:
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10746              		.loc 1 2425 9 view .LVU3484
 10747 0898 B145     		cmp	r9, r6
2423:src/display.c **** 	    k += group;
 10748              		.loc 1 2423 14 view .LVU3485
 10749 089a 0146     		mov	r1, r0
ARM GAS  /tmp/ccPv3rzq.s 			page 311


 10750              	.LVL1222:
2424:src/display.c **** 	    if (end >= k) {
 10751              		.loc 1 2424 6 is_stmt 1 view .LVU3486
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10752              		.loc 1 2425 6 view .LVU3487
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10753              		.loc 1 2425 9 is_stmt 0 view .LVU3488
 10754 089c E4DC     		bgt	.L949
2426:src/display.c **** 	      k += group;
 10755              		.loc 1 2426 8 is_stmt 1 view .LVU3489
 10756 089e 0290     		str	r0, [sp, #8]
2426:src/display.c **** 	      k += group;
 10757              		.loc 1 2426 14 is_stmt 0 view .LVU3490
 10758 08a0 4846     		mov	r0, r9
 10759              	.LVL1223:
2426:src/display.c **** 	      k += group;
 10760              		.loc 1 2426 14 view .LVU3491
 10761 08a2 FFF7FEFF 		bl	get_user_flag
 10762              	.LVL1224:
2426:src/display.c **** 	      k += group;
 10763              		.loc 1 2426 14 view .LVU3492
 10764 08a6 039B     		ldr	r3, [sp, #12]
2426:src/display.c **** 	      k += group;
 10765              		.loc 1 2426 10 view .LVU3493
 10766 08a8 0299     		ldr	r1, [sp, #8]
 10767 08aa 03EB0A02 		add	r2, r3, r10
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10768              		.loc 1 2428 11 view .LVU3494
 10769 08ae 9642     		cmp	r6, r2
2426:src/display.c **** 	      k += group;
 10770              		.loc 1 2426 10 view .LVU3495
 10771 08b0 41EA4001 		orr	r1, r1, r0, lsl #1
 10772              	.LVL1225:
2427:src/display.c **** 	      if (end >= k)
 10773              		.loc 1 2427 8 is_stmt 1 view .LVU3496
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10774              		.loc 1 2428 8 view .LVU3497
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10775              		.loc 1 2428 11 is_stmt 0 view .LVU3498
 10776 08b4 D8DB     		blt	.L949
2429:src/display.c **** 	    }
 10777              		.loc 1 2429 3 is_stmt 1 view .LVU3499
2429:src/display.c **** 	    }
 10778              		.loc 1 2429 9 is_stmt 0 view .LVU3500
 10779 08b6 1046     		mov	r0, r2
 10780 08b8 0291     		str	r1, [sp, #8]
 10781 08ba FFF7FEFF 		bl	get_user_flag
 10782              	.LVL1226:
2429:src/display.c **** 	    }
 10783              		.loc 1 2429 5 view .LVU3501
 10784 08be 0299     		ldr	r1, [sp, #8]
 10785 08c0 41EA8001 		orr	r1, r1, r0, lsl #2
 10786              	.LVL1227:
2429:src/display.c **** 	    }
 10787              		.loc 1 2429 5 view .LVU3502
 10788 08c4 D0E7     		b	.L949
 10789              	.LVL1228:
ARM GAS  /tmp/ccPv3rzq.s 			page 312


 10790              	.L1213:
2435:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10791              		.loc 1 2435 8 is_stmt 1 view .LVU3503
 10792 08c6 0821     		movs	r1, #8
 10793 08c8 FFF7FEFF 		bl	set_dig
 10794              	.LVL1229:
2436:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10795              		.loc 1 2436 8 view .LVU3504
 10796              	.LBB625:
 10797              	.LBI625:
 293:src/display.c ****   if (res) {
 10798              		.loc 1 293 14 view .LVU3505
 10799              	.LBE625:
 10800              	.LBE631:
 10801              	.LBE637:
 10802              	.LBE645:
 10803              	.LBE657:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10804              		.loc 1 294 3 view .LVU3506
 10805              	.LBB658:
 10806              	.LBB646:
 10807              	.LBB638:
 10808              	.LBB632:
 10809              	.LBB628:
 10810              	.LBB626:
 10811              	.LBI626:
 293:src/display.c ****   if (res) {
 10812              		.loc 1 293 14 view .LVU3507
 10813              	.LBB627:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10814              		.loc 1 297 5 view .LVU3508
 10815 08cc 05F11000 		add	r0, r5, #16
 10816 08d0 FFF7FEFF 		bl	set_dot
 10817              	.LVL1230:
 298:src/display.c ****       set_dot(posn+8);
 10818              		.loc 1 298 5 view .LVU3509
 301:src/display.c **** }
 10819              		.loc 1 301 3 view .LVU3510
 301:src/display.c **** }
 10820              		.loc 1 301 3 is_stmt 0 view .LVU3511
 10821              	.LBE627:
 10822              	.LBE626:
 10823              	.LBE628:
 10824              	.LBE632:
 10825              	.LBE638:
 10826              	.LBE646:
 10827              	.LBE658:
 301:src/display.c **** }
 10828              		.loc 1 301 3 is_stmt 1 view .LVU3512
 10829              	.LBB659:
 10830              	.LBB647:
 10831              	.LBB639:
 10832              	.LBB633:
2437:src/display.c **** 	    }
 10833              		.loc 1 2437 8 view .LVU3513
2437:src/display.c **** 	    }
 10834              		.loc 1 2437 10 is_stmt 0 view .LVU3514
ARM GAS  /tmp/ccPv3rzq.s 			page 313


 10835 08d4 1235     		adds	r5, r5, #18
 10836              	.LVL1231:
2437:src/display.c **** 	    }
 10837              		.loc 1 2437 10 view .LVU3515
 10838 08d6 D3E7     		b	.L950
 10839              	.LVL1232:
 10840              	.L1206:
2437:src/display.c **** 	    }
 10841              		.loc 1 2437 10 view .LVU3516
 10842              	.LBE633:
 10843              	.LBE639:
 10844              	.LBE647:
 10845              	.LBE659:
 10846              	.LBB660:
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10847              		.loc 1 2742 6 is_stmt 1 view .LVU3517
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10848              		.loc 1 2742 9 is_stmt 0 view .LVU3518
 10849 08d8 B6F5274F 		cmp	r6, #42752
 10850 08dc 7BD0     		beq	.L925
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10851              		.loc 1 2742 41 discriminator 1 view .LVU3519
 10852 08de B6F5284F 		cmp	r6, #43008
 10853 08e2 78D0     		beq	.L925
2745:src/display.c **** 	    skip = 1;
 10854              		.loc 1 2745 8 is_stmt 1 view .LVU3520
2745:src/display.c **** 	    skip = 1;
 10855              		.loc 1 2745 14 is_stmt 0 view .LVU3521
 10856 08e4 0021     		movs	r1, #0
 10857 08e6 06F07F00 		and	r0, r6, #127
 10858 08ea FFF7FEFF 		bl	get_const
 10859              	.LVL1233:
2745:src/display.c **** 	    skip = 1;
 10860              		.loc 1 2745 8 view .LVU3522
 10861 08ee 0022     		movs	r2, #0
 10862 08f0 1146     		mov	r1, r2
 10863 08f2 FFF7FEFF 		bl	set_x
 10864              	.LVL1234:
2746:src/display.c **** 	  } else if (State2.runmode) {
 10865              		.loc 1 2746 11 view .LVU3523
 10866 08f6 4FF0010A 		mov	r10, #1
 10867 08fa 4BE7     		b	.L927
 10868              	.LVL1235:
 10869              	.L1205:
2746:src/display.c **** 	  } else if (State2.runmode) {
 10870              		.loc 1 2746 11 view .LVU3524
 10871              	.LBE660:
 10872              	.LBB661:
 10873              	.LBB588:
 10874              	.LBB582:
1306:src/display.c **** 	      p++;
 10875              		.loc 1 1306 8 is_stmt 1 view .LVU3525
1307:src/display.c **** 	      if (!double_dot)
 10876              		.loc 1 1307 8 view .LVU3526
1309:src/display.c **** 	    }
 10877              		.loc 1 1309 5 is_stmt 0 view .LVU3527
 10878 08fc BBF1000F 		cmp	fp, #0
ARM GAS  /tmp/ccPv3rzq.s 			page 314


1307:src/display.c **** 	      if (!double_dot)
 10879              		.loc 1 1307 9 view .LVU3528
 10880 0900 05F10105 		add	r5, r5, #1
 10881              	.LVL1236:
1308:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10882              		.loc 1 1308 8 is_stmt 1 view .LVU3529
1309:src/display.c **** 	    }
 10883              		.loc 1 1309 5 is_stmt 0 view .LVU3530
 10884 0904 14BF     		ite	ne
 10885 0906 4FF0090B 		movne	fp, #9
 10886 090a 4FF0120B 		moveq	fp, #18
 10887 090e 26E6     		b	.L1010
 10888              	.LVL1237:
 10889              	.L932:
1309:src/display.c **** 	    }
 10890              		.loc 1 1309 5 view .LVU3531
 10891              	.LBE582:
 10892              	.LBE588:
 10893              	.LBE661:
 10894              	.LBB662:
2783:src/display.c **** 	  }
 10895              		.loc 1 2783 6 is_stmt 1 view .LVU3532
 10896 0910 1EA8     		add	r0, sp, #120
 10897 0912 FFF7FEFF 		bl	set_status
 10898              	.LVL1238:
 10899              	.LBE662:
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10900              		.loc 1 2589 6 is_stmt 0 view .LVU3533
 10901 0916 2E46     		mov	r6, r5
 10902 0918 48E7     		b	.L934
 10903              	.L1230:
 10904 091a 00BF     		.align	2
 10905              	.L1229:
 10906 091c 00000000 		.word	.LANCHOR0
 10907 0920 00000000 		.word	ShowRegister
 10908 0924 00000000 		.word	DispPlot
 10909 0928 00000000 		.word	.LANCHOR1
 10910 092c 1C000000 		.word	.LC27
 10911 0930 00000000 		.word	multicmds
 10912 0934 6C000000 		.word	.LC38
 10913 0938 00000000 		.word	DispMsg
 10914              	.LVL1239:
 10915              	.L1203:
2804:src/display.c **** 	  skip = 1;
 10916              		.loc 1 2804 4 is_stmt 1 view .LVU3534
 10917              	.LBB663:
 10918              	.LBI663:
2461:src/display.c **** 	char buf[16];
 10919              		.loc 1 2461 19 view .LVU3535
 10920              	.LBB664:
2462:src/display.c **** 	unsigned short int pc = State2.digval;
 10921              		.loc 1 2462 2 view .LVU3536
2463:src/display.c **** 	unsigned int op = getprog(pc);
 10922              		.loc 1 2463 2 view .LVU3537
2463:src/display.c **** 	unsigned int op = getprog(pc);
 10923              		.loc 1 2463 21 is_stmt 0 view .LVU3538
 10924 093c B4F80890 		ldrh	r9, [r4, #8]
ARM GAS  /tmp/ccPv3rzq.s 			page 315


 10925              	.LVL1240:
2464:src/display.c **** 	int n = nLIB(pc);
 10926              		.loc 1 2464 2 is_stmt 1 view .LVU3539
2469:src/display.c **** 
 10927              		.loc 1 2469 27 is_stmt 0 view .LVU3540
 10928 0940 DFF8F4B3 		ldr	fp, .L1231+60
2464:src/display.c **** 	int n = nLIB(pc);
 10929              		.loc 1 2464 20 view .LVU3541
 10930 0944 4846     		mov	r0, r9
 10931 0946 FFF7FEFF 		bl	getprog
 10932              	.LVL1241:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10933              		.loc 1 2468 2 view .LVU3542
 10934 094a 15A9     		add	r1, sp, #84
2464:src/display.c **** 	int n = nLIB(pc);
 10935              		.loc 1 2464 20 view .LVU3543
 10936 094c 0546     		mov	r5, r0
 10937              	.LVL1242:
2465:src/display.c **** 	unsigned short int lblpc;
 10938              		.loc 1 2465 2 is_stmt 1 view .LVU3544
2466:src/display.c **** 
 10939              		.loc 1 2466 2 view .LVU3545
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10940              		.loc 1 2468 2 view .LVU3546
 10941 094e FFF7FEFF 		bl	prt
 10942              	.LVL1243:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10943              		.loc 1 2468 2 is_stmt 0 view .LVU3547
 10944 0952 FFF7FEFF 		bl	set_status
 10945              	.LVL1244:
2469:src/display.c **** 
 10946              		.loc 1 2469 2 is_stmt 1 view .LVU3548
2469:src/display.c **** 
 10947              		.loc 1 2469 27 is_stmt 0 view .LVU3549
 10948 0956 4FEA9930 		lsr	r0, r9, #14
 10949 095a 00EB8000 		add	r0, r0, r0, lsl #2
2469:src/display.c **** 
 10950              		.loc 1 2469 2 view .LVU3550
 10951 095e 5844     		add	r0, r0, fp
 10952 0960 5146     		mov	r1, r10
 10953 0962 FFF7FEFF 		bl	set_digits_string
 10954              	.LVL1245:
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10955              		.loc 1 2471 2 is_stmt 1 view .LVU3551
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10956              		.loc 1 2471 5 is_stmt 0 view .LVU3552
 10957 0966 15F4704F 		tst	r5, #61440
 10958 096a 40F0DC80 		bne	.L1215
 10959              	.LVL1246:
 10960              	.L1180:
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10961              		.loc 1 2471 5 view .LVU3553
 10962              	.LBE664:
 10963              	.LBE663:
2870:src/display.c ****       nostk:
 10964              		.loc 1 2870 2 is_stmt 1 view .LVU3554
 10965 096e FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccPv3rzq.s 			page 316


 10966              	.LVL1247:
2872:src/display.c **** 	if (!skip) {
 10967              		.loc 1 2872 2 view .LVU3555
 10968 0972 FFF7FEFF 		bl	show_flags
 10969              	.LVL1248:
2873:src/display.c **** 	  if (State2.runmode) {
 10970              		.loc 1 2873 2 view .LVU3556
 10971 0976 21E7     		b	.L935
 10972              	.LVL1249:
 10973              	.L1214:
2873:src/display.c **** 	  if (State2.runmode) {
 10974              		.loc 1 2873 2 is_stmt 0 view .LVU3557
 10975 0978 049E     		ldr	r6, [sp, #16]
 10976              	.LVL1250:
 10977              	.L942:
 10978              	.LBB667:
 10979              	.LBB648:
2442:src/display.c **** 	pc = state_pc();
 10980              		.loc 1 2442 2 is_stmt 1 view .LVU3558
2443:src/display.c **** 	if (isXROM(pc))
 10981              		.loc 1 2443 2 view .LVU3559
2443:src/display.c **** 	if (isXROM(pc))
 10982              		.loc 1 2443 7 is_stmt 0 view .LVU3560
 10983 097a DBF80030 		ldr	r3, [fp]
2443:src/display.c **** 	if (isXROM(pc))
 10984              		.loc 1 2443 5 view .LVU3561
 10985 097e B3F8E0B7 		ldrh	fp, [r3, #2016]
 10986              	.LVL1251:
2444:src/display.c **** 	  pc = 1;
 10987              		.loc 1 2444 2 is_stmt 1 view .LVU3562
2444:src/display.c **** 	  pc = 1;
 10988              		.loc 1 2444 6 is_stmt 0 view .LVU3563
 10989 0982 4FEA9B33 		lsr	r3, fp, #14
2445:src/display.c **** 	for (n=i=0; i<4; i++) {
 10990              		.loc 1 2445 7 view .LVU3564
 10991 0986 032B     		cmp	r3, #3
 10992 0988 08BF     		it	eq
 10993 098a 4FF0010B 		moveq	fp, #1
 10994              	.LVL1252:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10995              		.loc 1 2446 2 is_stmt 1 view .LVU3565
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10996              		.loc 1 2446 14 view .LVU3566
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10997              		.loc 1 2446 8 is_stmt 0 view .LVU3567
 10998 098e 4FF00009 		mov	r9, #0
 10999 0992 6425     		movs	r5, #100
2442:src/display.c **** 	pc = state_pc();
 11000              		.loc 1 2442 4 view .LVU3568
 11001 0994 4FF06C0A 		mov	r10, #108
 11002              	.LVL1253:
 11003              	.L955:
2447:src/display.c **** 	    if (++n == 4) {
 11004              		.loc 1 2447 4 is_stmt 1 view .LVU3569
2447:src/display.c **** 	    if (++n == 4) {
 11005              		.loc 1 2447 8 is_stmt 0 view .LVU3570
 11006 0998 0222     		movs	r2, #2
ARM GAS  /tmp/ccPv3rzq.s 			page 317


 11007 099a 2946     		mov	r1, r5
 11008 099c 5846     		mov	r0, fp
 11009 099e FFF7FEFF 		bl	find_label_from
 11010              	.LVL1254:
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11011              		.loc 1 2448 6 is_stmt 1 view .LVU3571
2447:src/display.c **** 	    if (++n == 4) {
 11012              		.loc 1 2447 7 is_stmt 0 view .LVU3572
 11013 09a2 58B1     		cbz	r0, .L953
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11014              		.loc 1 2448 9 view .LVU3573
 11015 09a4 09F10109 		add	r9, r9, #1
 11016              	.LVL1255:
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11017              		.loc 1 2452 8 is_stmt 1 view .LVU3574
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11018              		.loc 1 2448 9 is_stmt 0 view .LVU3575
 11019 09a8 B9F1040F 		cmp	r9, #4
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11020              		.loc 1 2452 8 view .LVU3576
 11021 09ac A5F12301 		sub	r1, r5, #35
 11022 09b0 5046     		mov	r0, r10
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11023              		.loc 1 2448 9 view .LVU3577
 11024 09b2 07D0     		beq	.L1216
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11025              		.loc 1 2452 8 view .LVU3578
 11026 09b4 FFF7FEFF 		bl	set_dig
 11027              	.LVL1256:
2453:src/display.c **** 	    }
 11028              		.loc 1 2453 8 is_stmt 1 view .LVU3579
2453:src/display.c **** 	    }
 11029              		.loc 1 2453 10 is_stmt 0 view .LVU3580
 11030 09b8 0AF1070A 		add	r10, r10, #7
 11031              	.LVL1257:
 11032              	.L953:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11033              		.loc 1 2446 19 is_stmt 1 view .LVU3581
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11034              		.loc 1 2446 14 view .LVU3582
 11035 09bc 0135     		adds	r5, r5, #1
 11036              	.LVL1258:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11037              		.loc 1 2446 2 is_stmt 0 view .LVU3583
 11038 09be 682D     		cmp	r5, #104
 11039 09c0 EAD1     		bne	.L955
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11040              		.loc 1 2446 2 view .LVU3584
 11041 09c2 D4E7     		b	.L1180
 11042              	.LVL1259:
 11043              	.L1216:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11044              		.loc 1 2449 8 is_stmt 1 view .LVU3585
 11045 09c4 4C21     		movs	r1, #76
 11046 09c6 7320     		movs	r0, #115
 11047              	.LVL1260:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
ARM GAS  /tmp/ccPv3rzq.s 			page 318


 11048              		.loc 1 2449 8 is_stmt 0 view .LVU3586
 11049 09c8 FFF7FEFF 		bl	set_dig
 11050              	.LVL1261:
2450:src/display.c **** 	    } else {
 11051              		.loc 1 2450 8 is_stmt 1 view .LVU3587
 11052 09cc 4C21     		movs	r1, #76
 11053 09ce 7A20     		movs	r0, #122
 11054 09d0 FFF7FEFF 		bl	set_dig
 11055              	.LVL1262:
 11056 09d4 F2E7     		b	.L953
 11057              	.LVL1263:
 11058              	.L925:
2450:src/display.c **** 	    } else {
 11059              		.loc 1 2450 8 is_stmt 0 view .LVU3588
 11060              	.LBE648:
 11061              	.LBE667:
 11062              	.LBB668:
2743:src/display.c **** 	    else
 11063              		.loc 1 2743 8 is_stmt 1 view .LVU3589
 11064 09d6 C948     		ldr	r0, .L1231
 11065 09d8 0021     		movs	r1, #0
 11066 09da FFF7FEFF 		bl	set_digits_string
 11067              	.LVL1264:
2746:src/display.c **** 	  } else if (State2.runmode) {
 11068              		.loc 1 2746 11 is_stmt 0 view .LVU3590
 11069 09de 4FF0010A 		mov	r10, #1
2743:src/display.c **** 	    else
 11070              		.loc 1 2743 8 view .LVU3591
 11071 09e2 D7E6     		b	.L927
 11072              	.LVL1265:
 11073              	.L1204:
2743:src/display.c **** 	    else
 11074              		.loc 1 2743 8 view .LVU3592
 11075              	.LBE668:
2807:src/display.c **** 	  skip = 1;
 11076              		.loc 1 2807 4 is_stmt 1 view .LVU3593
 11077              	.LBB669:
 11078              	.LBI669:
2486:src/display.c **** 	char buf[16], *bp;
 11079              		.loc 1 2486 19 view .LVU3594
 11080              	.LBB670:
2487:src/display.c **** 	int n = State2.digval;
 11081              		.loc 1 2487 2 view .LVU3595
2488:src/display.c **** 	
 11082              		.loc 1 2488 2 view .LVU3596
2488:src/display.c **** 	
 11083              		.loc 1 2488 6 is_stmt 0 view .LVU3597
 11084 09e4 B4F80890 		ldrh	r9, [r4, #8]
 11085              	.LVL1266:
2495:src/display.c **** 	  n;
 11086              		.loc 1 2495 2 is_stmt 1 view .LVU3598
 11087 09e8 0093     		str	r3, [sp]
2495:src/display.c **** 	  n;
 11088              		.loc 1 2495 54 is_stmt 0 view .LVU3599
 11089 09ea C507     		lsls	r5, r0, #31
 11090 09ec 4CBF     		ite	mi
 11091 09ee 09F17005 		addmi	r5, r9, #112
ARM GAS  /tmp/ccPv3rzq.s 			page 319


2488:src/display.c **** 	
 11092              		.loc 1 2488 6 view .LVU3600
 11093 09f2 4D46     		movpl	r5, r9
 11094              	.LVL1267:
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11095              		.loc 1 2499 2 is_stmt 1 view .LVU3601
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11096              		.loc 1 2499 5 is_stmt 0 view .LVU3602
 11097 09f4 10F00401 		ands	r1, r0, #4
 11098 09f8 4BD0     		beq	.L963
2500:src/display.c **** 	}
 11099              		.loc 1 2500 4 is_stmt 1 view .LVU3603
2500:src/display.c **** 	}
 11100              		.loc 1 2500 15 is_stmt 0 view .LVU3604
 11101 09fa 15A9     		add	r1, sp, #84
 11102 09fc 2846     		mov	r0, r5
 11103 09fe FFF7FEFF 		bl	alpha_rcl_s
 11104              	.LVL1268:
2500:src/display.c **** 	}
 11105              		.loc 1 2500 4 view .LVU3605
 11106 0a02 FFF7FEFF 		bl	set_status
 11107              	.LVL1269:
 11108 0a06 009B     		ldr	r3, [sp]
 11109              	.LVL1270:
 11110              	.L964:
2522:src/display.c ****       }
 11111              		.loc 1 2522 2 is_stmt 1 view .LVU3606
 11112 0a08 0093     		str	r3, [sp]
 11113 0a0a 2846     		mov	r0, r5
 11114 0a0c 0021     		movs	r1, #0
 11115 0a0e FFF7FEFF 		bl	format_reg
 11116              	.LVL1271:
 11117              	.LBE670:
 11118              	.LBE669:
2808:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 11119              		.loc 1 2808 4 view .LVU3607
2809:src/display.c **** 	    annunciators();
 11120              		.loc 1 2809 4 view .LVU3608
2809:src/display.c **** 	    annunciators();
 11121              		.loc 1 2809 7 is_stmt 0 view .LVU3609
 11122 0a12 009B     		ldr	r3, [sp]
 11123 0a14 002B     		cmp	r3, #0
 11124 0a16 39D1     		bne	.L970
2809:src/display.c **** 	    annunciators();
 11125              		.loc 1 2809 25 discriminator 1 view .LVU3610
 11126 0a18 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 11127 0a1a 012B     		cmp	r3, #1
 11128 0a1c 30D0     		beq	.L1217
 11129              	.L971:
2870:src/display.c ****       nostk:
 11130              		.loc 1 2870 2 is_stmt 1 view .LVU3611
 11131 0a1e FFF7FEFF 		bl	show_stack
 11132              	.LVL1272:
2872:src/display.c **** 	if (!skip) {
 11133              		.loc 1 2872 2 view .LVU3612
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11134              		.loc 1 2589 6 is_stmt 0 view .LVU3613
ARM GAS  /tmp/ccPv3rzq.s 			page 320


 11135 0a22 0026     		movs	r6, #0
2872:src/display.c **** 	if (!skip) {
 11136              		.loc 1 2872 2 view .LVU3614
 11137 0a24 FFF7FEFF 		bl	show_flags
 11138              	.LVL1273:
2873:src/display.c **** 	  if (State2.runmode) {
 11139              		.loc 1 2873 2 is_stmt 1 view .LVU3615
 11140 0a28 C8E6     		b	.L935
 11141              	.LVL1274:
 11142              	.L972:
2860:src/display.c **** 	  if (i > 0)
 11143              		.loc 1 2860 4 view .LVU3616
2860:src/display.c **** 	  if (i > 0)
 11144              		.loc 1 2860 8 is_stmt 0 view .LVU3617
 11145 0a2a DBF80030 		ldr	r3, [fp]
 11146 0a2e B3F8E007 		ldrh	r0, [r3, #2016]
 11147              	.LVL1275:
2861:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11148              		.loc 1 2861 4 is_stmt 1 view .LVU3618
2861:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11149              		.loc 1 2861 7 is_stmt 0 view .LVU3619
 11150 0a32 0028     		cmp	r0, #0
 11151 0a34 00F0A780 		beq	.L986
2862:src/display.c **** 	  else
 11152              		.loc 1 2862 6 is_stmt 1 view .LVU3620
 11153 0a38 FFF7FEFF 		bl	getprog
 11154              	.LVL1276:
2862:src/display.c **** 	  else
 11155              		.loc 1 2862 6 is_stmt 0 view .LVU3621
 11156 0a3c 1EA9     		add	r1, sp, #120
 11157              	.LVL1277:
2862:src/display.c **** 	  else
 11158              		.loc 1 2862 6 view .LVU3622
 11159 0a3e FFF7FEFF 		bl	prt
 11160              	.LVL1278:
2862:src/display.c **** 	  else
 11161              		.loc 1 2862 6 view .LVU3623
 11162 0a42 FFF7FEFF 		bl	set_status
 11163              	.LVL1279:
 11164              	.L987:
2865:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11165              		.loc 1 2865 4 is_stmt 1 view .LVU3624
 11166 0a46 8920     		movs	r0, #137
 11167 0a48 FFF7FEFF 		bl	set_dot
 11168              	.LVL1280:
2867:src/display.c **** 	  goto nostk;
 11169              		.loc 1 2867 6 view .LVU3625
2868:src/display.c **** 	}
 11170              		.loc 1 2868 4 view .LVU3626
2872:src/display.c **** 	if (!skip) {
 11171              		.loc 1 2872 2 view .LVU3627
2867:src/display.c **** 	  goto nostk;
 11172              		.loc 1 2867 12 is_stmt 0 view .LVU3628
 11173 0a4c 0126     		movs	r6, #1
2872:src/display.c **** 	if (!skip) {
 11174              		.loc 1 2872 2 view .LVU3629
 11175 0a4e FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/ccPv3rzq.s 			page 321


 11176              	.LVL1281:
 11177              	.L1179:
2873:src/display.c **** 	  if (State2.runmode) {
 11178              		.loc 1 2873 2 is_stmt 1 view .LVU3630
 11179 0a52 AB4B     		ldr	r3, .L1231+4
 11180 0a54 DFF8E4A2 		ldr	r10, .L1231+64
 11181 0a58 0093     		str	r3, [sp]
 11182 0a5a FFF714BB 		b	.L902
 11183              	.LVL1282:
 11184              	.L973:
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11185              		.loc 1 2819 11 view .LVU3631
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11186              		.loc 1 2819 15 is_stmt 0 view .LVU3632
 11187 0a5e A84A     		ldr	r2, .L1231+4
 11188 0a60 0092     		str	r2, [sp]
 11189 0a62 B2F90020 		ldrsh	r2, [r2]
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11190              		.loc 1 2819 14 view .LVU3633
 11191 0a66 002A     		cmp	r2, #0
 11192 0a68 40F01281 		bne	.L1218
2821:src/display.c **** 	    bp = scopy(buf, Alpha);
 11193              		.loc 1 2821 11 is_stmt 1 view .LVU3634
2821:src/display.c **** 	    bp = scopy(buf, Alpha);
 11194              		.loc 1 2821 14 is_stmt 0 view .LVU3635
 11195 0a6c 0007     		lsls	r0, r0, #28
 11196 0a6e 00F16781 		bmi	.L1219
 11197              	.LVL1283:
2870:src/display.c ****       nostk:
 11198              		.loc 1 2870 2 is_stmt 1 view .LVU3636
 11199 0a72 FFF7FEFF 		bl	show_stack
 11200              	.LVL1284:
2872:src/display.c **** 	if (!skip) {
 11201              		.loc 1 2872 2 view .LVU3637
2853:src/display.c **** 	  }
 11202              		.loc 1 2853 12 is_stmt 0 view .LVU3638
 11203 0a76 0126     		movs	r6, #1
2872:src/display.c **** 	if (!skip) {
 11204              		.loc 1 2872 2 view .LVU3639
 11205 0a78 FFF7FEFF 		bl	show_flags
 11206              	.LVL1285:
2873:src/display.c **** 	  if (State2.runmode) {
 11207              		.loc 1 2873 2 is_stmt 1 view .LVU3640
 11208 0a7c FFF703BB 		b	.L902
 11209              	.LVL1286:
 11210              	.L1217:
2809:src/display.c **** 	    annunciators();
 11211              		.loc 1 2809 56 is_stmt 0 discriminator 2 view .LVU3641
 11212 0a80 DBF80030 		ldr	r3, [fp]
 11213 0a84 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11214 0a88 D907     		lsls	r1, r3, #31
 11215 0a8a C8D5     		bpl	.L971
 11216              	.L970:
2810:src/display.c **** 	  }
 11217              		.loc 1 2810 6 is_stmt 1 view .LVU3642
 11218 0a8c FFF7FEFF 		bl	annunciators
 11219              	.LVL1287:
ARM GAS  /tmp/ccPv3rzq.s 			page 322


 11220 0a90 6DE7     		b	.L1180
 11221              	.LVL1288:
 11222              	.L963:
 11223              	.LBB673:
 11224              	.LBB671:
2503:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11225              		.loc 1 2503 4 view .LVU3643
 11226 0a92 0DF1540A 		add	r10, sp, #84
 11227 0a96 1022     		movs	r2, #16
 11228 0a98 5046     		mov	r0, r10
 11229 0a9a FFF7FEFF 		bl	xset
 11230              	.LVL1289:
2507:src/display.c **** #endif
 11231              		.loc 1 2507 4 view .LVU3644
2507:src/display.c **** #endif
 11232              		.loc 1 2507 9 is_stmt 0 view .LVU3645
 11233 0a9e 9949     		ldr	r1, .L1231+8
 11234 0aa0 5046     		mov	r0, r10
 11235 0aa2 FFF7FEFF 		bl	scopy_spc
 11236              	.LVL1290:
2509:src/display.c **** 	    *bp++ = '.';
 11237              		.loc 1 2509 8 view .LVU3646
 11238 0aa6 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 11239              	.LVL1291:
2509:src/display.c **** 	    *bp++ = '.';
 11240              		.loc 1 2509 4 is_stmt 1 view .LVU3647
2509:src/display.c **** 	    *bp++ = '.';
 11241              		.loc 1 2509 7 is_stmt 0 view .LVU3648
 11242 0aa8 009B     		ldr	r3, [sp]
 11243 0aaa 12F0010F 		tst	r2, #1
 11244 0aae 00F0C080 		beq	.L965
2510:src/display.c **** 	    if (n >= 100) {
 11245              		.loc 1 2510 6 is_stmt 1 view .LVU3649
 11246              	.LVL1292:
2510:src/display.c **** 	    if (n >= 100) {
 11247              		.loc 1 2510 12 is_stmt 0 view .LVU3650
 11248 0ab2 2E22     		movs	r2, #46
2511:src/display.c **** 	      *bp++ = '1';
 11249              		.loc 1 2511 9 view .LVU3651
 11250 0ab4 B9F1630F 		cmp	r9, #99
2510:src/display.c **** 	    if (n >= 100) {
 11251              		.loc 1 2510 12 view .LVU3652
 11252 0ab8 0270     		strb	r2, [r0]
2511:src/display.c **** 	      *bp++ = '1';
 11253              		.loc 1 2511 6 is_stmt 1 view .LVU3653
2511:src/display.c **** 	      *bp++ = '1';
 11254              		.loc 1 2511 9 is_stmt 0 view .LVU3654
 11255 0aba 00F3B580 		bgt	.L966
2510:src/display.c **** 	    if (n >= 100) {
 11256              		.loc 1 2510 9 view .LVU3655
 11257 0abe 0130     		adds	r0, r0, #1
 11258              	.LVL1293:
 11259              	.L967:
2517:src/display.c **** 	  else
 11260              		.loc 1 2517 11 view .LVU3656
 11261 0ac0 4946     		mov	r1, r9
 11262 0ac2 0222     		movs	r2, #2
ARM GAS  /tmp/ccPv3rzq.s 			page 323


 11263 0ac4 0093     		str	r3, [sp]
 11264              	.LVL1294:
2517:src/display.c **** 	  else
 11265              		.loc 1 2517 6 is_stmt 1 view .LVU3657
2517:src/display.c **** 	  else
 11266              		.loc 1 2517 11 is_stmt 0 view .LVU3658
 11267 0ac6 FFF7FEFF 		bl	num_arg_0
 11268              	.LVL1295:
2517:src/display.c **** 	  else
 11269              		.loc 1 2517 11 view .LVU3659
 11270 0aca 009B     		ldr	r3, [sp]
 11271              	.LVL1296:
 11272              	.L969:
2517:src/display.c **** 	  else
 11273              		.loc 1 2517 11 view .LVU3660
 11274 0acc 0093     		str	r3, [sp]
2520:src/display.c **** 	}
 11275              		.loc 1 2520 4 is_stmt 1 view .LVU3661
 11276 0ace 5046     		mov	r0, r10
 11277 0ad0 FFF7FEFF 		bl	set_status
 11278              	.LVL1297:
 11279 0ad4 009B     		ldr	r3, [sp]
 11280 0ad6 97E7     		b	.L964
 11281              	.LVL1298:
 11282              	.L1211:
2520:src/display.c **** 	}
 11283              		.loc 1 2520 4 is_stmt 0 view .LVU3662
 11284              	.LBE671:
 11285              	.LBE673:
 11286              	.LBB674:
 11287              	.LBB649:
 11288              	.LBB640:
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11289              		.loc 1 2397 6 is_stmt 1 view .LVU3663
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11290              		.loc 1 2397 11 is_stmt 0 view .LVU3664
 11291 0ad8 4FF00A09 		mov	r9, #10
 11292              	.LVL1299:
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11293              		.loc 1 2397 11 view .LVU3665
 11294 0adc 09FB03F3 		mul	r3, r9, r3
 11295              	.LVL1300:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11296              		.loc 1 2398 6 is_stmt 1 view .LVU3666
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11297              		.loc 1 2398 28 is_stmt 0 view .LVU3667
 11298 0ae0 462B     		cmp	r3, #70
 11299 0ae2 9A46     		mov	r10, r3
 11300 0ae4 A8BF     		it	ge
 11301 0ae6 4FF0460A 		movge	r10, #70
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11302              		.loc 1 2398 10 view .LVU3668
 11303 0aea 0AF11D05 		add	r5, r10, #29
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11304              		.loc 1 2399 10 view .LVU3669
 11305 0aee 8649     		ldr	r1, .L1231+12
2398:src/display.c **** 	    p = scopy(buf, "FL ");
ARM GAS  /tmp/ccPv3rzq.s 			page 324


 11306              		.loc 1 2398 28 view .LVU3670
 11307 0af0 0093     		str	r3, [sp]
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11308              		.loc 1 2399 10 view .LVU3671
 11309 0af2 15A8     		add	r0, sp, #84
 11310              	.LVL1301:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11311              		.loc 1 2398 10 view .LVU3672
 11312 0af4 0295     		str	r5, [sp, #8]
 11313              	.LVL1302:
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11314              		.loc 1 2399 6 is_stmt 1 view .LVU3673
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11315              		.loc 1 2399 10 is_stmt 0 view .LVU3674
 11316 0af6 FFF7FEFF 		bl	scopy
 11317              	.LVL1303:
2400:src/display.c **** 	    *p++ = '-';
 11318              		.loc 1 2400 6 is_stmt 1 view .LVU3675
2400:src/display.c **** 	    *p++ = '-';
 11319              		.loc 1 2400 10 is_stmt 0 view .LVU3676
 11320 0afa 009B     		ldr	r3, [sp]
 11321 0afc 0222     		movs	r2, #2
 11322 0afe 1946     		mov	r1, r3
 11323 0b00 FFF7FEFF 		bl	num_arg_0
 11324              	.LVL1304:
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11325              		.loc 1 2401 6 is_stmt 1 view .LVU3677
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11326              		.loc 1 2401 11 is_stmt 0 view .LVU3678
 11327 0b04 2D22     		movs	r2, #45
 11328 0b06 00F8012B 		strb	r2, [r0], #1
 11329              	.LVL1305:
2402:src/display.c **** 	    *p = '\0';
 11330              		.loc 1 2402 6 is_stmt 1 view .LVU3679
2402:src/display.c **** 	    *p = '\0';
 11331              		.loc 1 2402 10 is_stmt 0 view .LVU3680
 11332 0b0a 2946     		mov	r1, r5
 11333 0b0c 0222     		movs	r2, #2
 11334 0b0e FFF7FEFF 		bl	num_arg_0
 11335              	.LVL1306:
2402:src/display.c **** 	    *p = '\0';
 11336              		.loc 1 2402 10 view .LVU3681
 11337 0b12 0146     		mov	r1, r0
 11338              	.LVL1307:
2403:src/display.c **** 	    set_status(buf);
 11339              		.loc 1 2403 6 is_stmt 1 view .LVU3682
2403:src/display.c **** 	    set_status(buf);
 11340              		.loc 1 2403 9 is_stmt 0 view .LVU3683
 11341 0b14 4FF0000A 		mov	r10, #0
2404:src/display.c **** 	  }
 11342              		.loc 1 2404 6 view .LVU3684
 11343 0b18 15A8     		add	r0, sp, #84
 11344              	.LVL1308:
2403:src/display.c **** 	    set_status(buf);
 11345              		.loc 1 2403 9 view .LVU3685
 11346 0b1a 81F800A0 		strb	r10, [r1]
2404:src/display.c **** 	  }
ARM GAS  /tmp/ccPv3rzq.s 			page 325


 11347              		.loc 1 2404 6 is_stmt 1 view .LVU3686
 11348 0b1e FFF7FEFF 		bl	set_status
 11349              	.LVL1309:
2404:src/display.c **** 	  }
 11350              		.loc 1 2404 6 is_stmt 0 view .LVU3687
 11351 0b22 009B     		ldr	r3, [sp]
 11352 0b24 8AE6     		b	.L947
 11353              	.LVL1310:
 11354              	.L1215:
2404:src/display.c **** 	  }
 11355              		.loc 1 2404 6 view .LVU3688
 11356              	.LBE640:
 11357              	.LBE649:
 11358              	.LBE674:
 11359              	.LBB675:
 11360              	.LBB665:
2472:src/display.c **** 	  if (lblpc != pc) {
 11361              		.loc 1 2472 4 is_stmt 1 view .LVU3689
2472:src/display.c **** 	  if (lblpc != pc) {
 11362              		.loc 1 2472 12 is_stmt 0 view .LVU3690
 11363 0b26 2846     		mov	r0, r5
 11364 0b28 5146     		mov	r1, r10
 11365 0b2a FFF7FEFF 		bl	findmultilbl
 11366              	.LVL1311:
2472:src/display.c **** 	  if (lblpc != pc) {
 11367              		.loc 1 2472 10 view .LVU3691
 11368 0b2e 85B2     		uxth	r5, r0
 11369              	.LVL1312:
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11370              		.loc 1 2473 7 view .LVU3692
 11371 0b30 A945     		cmp	r9, r5
2472:src/display.c **** 	  if (lblpc != pc) {
 11372              		.loc 1 2472 10 view .LVU3693
 11373 0b32 0090     		str	r0, [sp]
 11374              	.LVL1313:
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11375              		.loc 1 2473 4 is_stmt 1 view .LVU3694
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11376              		.loc 1 2473 7 is_stmt 0 view .LVU3695
 11377 0b34 3FF41BAF 		beq	.L1180
2474:src/display.c **** 	    n = nLIB(lblpc);
 11378              		.loc 1 2474 6 is_stmt 1 view .LVU3696
 11379 0b38 7448     		ldr	r0, .L1231+16
 11380 0b3a 3F21     		movs	r1, #63
 11381 0b3c FFF7FEFF 		bl	set_digits_string
 11382              	.LVL1314:
2475:src/display.c **** 	    if (n == REGION_RAM)
 11383              		.loc 1 2475 6 view .LVU3697
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11384              		.loc 1 2476 6 view .LVU3698
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11385              		.loc 1 2476 9 is_stmt 0 view .LVU3699
 11386 0b40 AA0B     		lsrs	r2, r5, #14
 11387              	.LVL1315:
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11388              		.loc 1 2476 9 view .LVU3700
 11389 0b42 40F03B81 		bne	.L960
ARM GAS  /tmp/ccPv3rzq.s 			page 326


2477:src/display.c **** 	    else {
 11390              		.loc 1 2477 8 is_stmt 1 view .LVU3701
 11391 0b46 009B     		ldr	r3, [sp]
 11392 0b48 0121     		movs	r1, #1
 11393 0b4a 98B2     		uxth	r0, r3
 11394 0b4c FFF7FEFF 		bl	set_exp
 11395              	.LVL1316:
2477:src/display.c **** 	    else {
 11396              		.loc 1 2477 8 is_stmt 0 view .LVU3702
 11397 0b50 0DE7     		b	.L1180
 11398              	.LVL1317:
 11399              	.L1209:
2477:src/display.c **** 	    else {
 11400              		.loc 1 2477 8 view .LVU3703
 11401              	.LBE665:
 11402              	.LBE675:
 11403              	.LBB676:
 11404              	.LBB650:
2367:src/display.c **** 	  p = num_arg(buf, free_mem());
 11405              		.loc 1 2367 4 is_stmt 1 view .LVU3704
 11406 0b52 6F48     		ldr	r0, .L1231+20
 11407 0b54 FFF7FEFF 		bl	set_status
 11408              	.LVL1318:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11409              		.loc 1 2368 4 view .LVU3705
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11410              		.loc 1 2368 21 is_stmt 0 view .LVU3706
 11411 0b58 FFF7FEFF 		bl	free_mem
 11412              	.LVL1319:
 11413 0b5c 0146     		mov	r1, r0
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11414              		.loc 1 2368 8 view .LVU3707
 11415 0b5e 15A8     		add	r0, sp, #84
 11416              	.LVL1320:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11417              		.loc 1 2368 8 view .LVU3708
 11418 0b60 FFF7FEFF 		bl	num_arg
 11419              	.LVL1321:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11420              		.loc 1 2369 4 is_stmt 1 view .LVU3709
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11421              		.loc 1 2369 8 is_stmt 0 view .LVU3710
 11422 0b64 6B49     		ldr	r1, .L1231+24
 11423 0b66 FFF7FEFF 		bl	scopy
 11424              	.LVL1322:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11425              		.loc 1 2369 8 view .LVU3711
 11426 0b6a 0546     		mov	r5, r0
 11427              	.LVL1323:
2370:src/display.c **** 	  *p = '\0';
 11428              		.loc 1 2370 4 is_stmt 1 view .LVU3712
2370:src/display.c **** 	  *p = '\0';
 11429              		.loc 1 2370 19 is_stmt 0 view .LVU3713
 11430 0b6c FFF7FEFF 		bl	free_flash
 11431              	.LVL1324:
2370:src/display.c **** 	  *p = '\0';
 11432              		.loc 1 2370 19 view .LVU3714
ARM GAS  /tmp/ccPv3rzq.s 			page 327


 11433 0b70 0146     		mov	r1, r0
2370:src/display.c **** 	  *p = '\0';
 11434              		.loc 1 2370 8 view .LVU3715
 11435 0b72 2846     		mov	r0, r5
 11436 0b74 FFF7FEFF 		bl	num_arg
 11437              	.LVL1325:
 11438 0b78 0346     		mov	r3, r0
 11439              	.LVL1326:
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11440              		.loc 1 2371 4 is_stmt 1 view .LVU3716
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11441              		.loc 1 2371 7 is_stmt 0 view .LVU3717
 11442 0b7a 0021     		movs	r1, #0
2372:src/display.c **** 	}
 11443              		.loc 1 2372 4 view .LVU3718
 11444 0b7c 15A8     		add	r0, sp, #84
 11445              	.LVL1327:
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11446              		.loc 1 2371 7 view .LVU3719
 11447 0b7e 1970     		strb	r1, [r3]
2372:src/display.c **** 	}
 11448              		.loc 1 2372 4 is_stmt 1 view .LVU3720
 11449 0b80 FFF7FEFF 		bl	set_digits_string
 11450              	.LVL1328:
2372:src/display.c **** 	}
 11451              		.loc 1 2372 4 is_stmt 0 view .LVU3721
 11452 0b84 F9E6     		b	.L942
 11453              	.LVL1329:
 11454              	.L986:
2372:src/display.c **** 	}
 11455              		.loc 1 2372 4 view .LVU3722
 11456              	.LBE650:
 11457              	.LBE676:
2864:src/display.c **** 	  set_dot(STO_annun);
 11458              		.loc 1 2864 6 is_stmt 1 view .LVU3723
 11459 0b86 6448     		ldr	r0, .L1231+28
 11460              	.LVL1330:
2864:src/display.c **** 	  set_dot(STO_annun);
 11461              		.loc 1 2864 6 is_stmt 0 view .LVU3724
 11462 0b88 FFF7FEFF 		bl	set_status
 11463              	.LVL1331:
2864:src/display.c **** 	  set_dot(STO_annun);
 11464              		.loc 1 2864 6 view .LVU3725
 11465 0b8c 5BE7     		b	.L987
 11466              	.LVL1332:
 11467              	.L1208:
 11468              	.LBB677:
 11469              	.LBB604:
2769:src/display.c **** 	      copyreg(&z, x);
 11470              		.loc 1 2769 8 is_stmt 1 view .LVU3726
2769:src/display.c **** 	      copyreg(&z, x);
 11471              		.loc 1 2769 27 is_stmt 0 view .LVU3727
 11472 0b8e 634B     		ldr	r3, .L1231+32
 11473 0b90 D3F800A0 		ldr	r10, [r3]
 11474              	.LVL1333:
2770:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11475              		.loc 1 2770 8 is_stmt 1 view .LVU3728
ARM GAS  /tmp/ccPv3rzq.s 			page 328


 11476 0b94 15A8     		add	r0, sp, #84
 11477 0b96 5146     		mov	r1, r10
 11478 0b98 FFF7FEFF 		bl	copyreg
 11479              	.LVL1334:
2771:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11480              		.loc 1 2771 8 view .LVU3729
 11481 0b9c F0B2     		uxtb	r0, r6
 11482 0b9e FFF7FEFF 		bl	sigma_val
 11483              	.LVL1335:
2772:src/display.c **** 	      copyreg(x, &z);
 11484              		.loc 1 2772 8 view .LVU3730
 11485 0ba2 FFF7FEFF 		bl	is_dblmode
 11486              	.LVL1336:
 11487 0ba6 0021     		movs	r1, #0
 11488 0ba8 0246     		mov	r2, r0
 11489 0baa 5046     		mov	r0, r10
 11490 0bac FFF7FEFF 		bl	set_x
 11491              	.LVL1337:
2773:src/display.c **** 	      skip = 1;
 11492              		.loc 1 2773 8 view .LVU3731
 11493 0bb0 5046     		mov	r0, r10
 11494 0bb2 15A9     		add	r1, sp, #84
 11495 0bb4 FFF7FEFF 		bl	copyreg
 11496              	.LVL1338:
2774:src/display.c **** 	    }
 11497              		.loc 1 2774 8 view .LVU3732
2774:src/display.c **** 	    }
 11498              		.loc 1 2774 13 is_stmt 0 view .LVU3733
 11499 0bb8 4FF0010A 		mov	r10, #1
 11500              	.LVL1339:
2774:src/display.c **** 	    }
 11501              		.loc 1 2774 13 view .LVU3734
 11502 0bbc EAE5     		b	.L927
 11503              	.LVL1340:
 11504              	.L1207:
2774:src/display.c **** 	    }
 11505              		.loc 1 2774 13 view .LVU3735
 11506              	.LBE604:
 11507              	.LBB605:
2749:src/display.c **** 	      decimal64 z;
 11508              		.loc 1 2749 8 is_stmt 1 view .LVU3736
2750:src/display.c **** 
 11509              		.loc 1 2750 8 view .LVU3737
2752:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11510              		.loc 1 2752 8 view .LVU3738
 11511 0bbe 0CA8     		add	r0, sp, #48
 11512 0bc0 FFF7FEFF 		bl	getX
 11513              	.LVL1341:
2753:src/display.c **** 		const unsigned int f = argKIND(op);
 11514              		.loc 1 2753 8 view .LVU3739
2753:src/display.c **** 		const unsigned int f = argKIND(op);
 11515              		.loc 1 2753 11 is_stmt 0 view .LVU3740
 11516 0bc4 C6F30723 		ubfx	r3, r6, #8, #8
 11517 0bc8 022B     		cmp	r3, #2
 11518 0bca 40F0EE80 		bne	.L929
 11519              	.LBB606:
2754:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
ARM GAS  /tmp/ccPv3rzq.s 			page 329


 11520              		.loc 1 2754 3 is_stmt 1 view .LVU3741
2754:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11521              		.loc 1 2754 22 is_stmt 0 view .LVU3742
 11522 0bce F6B2     		uxtb	r6, r6
 11523              	.LVL1342:
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11524              		.loc 1 2755 3 is_stmt 1 view .LVU3743
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11525              		.loc 1 2755 6 is_stmt 0 view .LVU3744
 11526 0bd0 9B2E     		cmp	r6, #155
 11527              	.LBB607:
2758:src/display.c **** 		}
 11528              		.loc 1 2758 5 view .LVU3745
 11529 0bd2 0DF1540A 		add	r10, sp, #84
 11530              	.LBE607:
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11531              		.loc 1 2755 6 view .LVU3746
 11532 0bd6 00F2E480 		bhi	.L930
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11533              		.loc 1 2755 28 discriminator 1 view .LVU3747
 11534 0bda 1823     		movs	r3, #24
 11535 0bdc 504A     		ldr	r2, .L1231+36
 11536 0bde 03FB06F3 		mul	r3, r3, r6
 11537 0be2 D358     		ldr	r3, [r2, r3]
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11538              		.loc 1 2755 23 discriminator 1 view .LVU3748
 11539 0be4 002B     		cmp	r3, #0
 11540 0be6 00F0DC80 		beq	.L930
 11541              	.LBB608:
2756:src/display.c **** 		  update_speed(0);
 11542              		.loc 1 2756 5 is_stmt 1 view .LVU3749
 11543              	.LVL1343:
2757:src/display.c **** 		  fp(&r, &x);
 11544              		.loc 1 2757 20 view .LVU3750
2758:src/display.c **** 		}
 11545              		.loc 1 2758 5 view .LVU3751
 11546 0bea 0CA9     		add	r1, sp, #48
 11547 0bec 5046     		mov	r0, r10
 11548 0bee 9847     		blx	r3
 11549              	.LVL1344:
 11550              	.L931:
2758:src/display.c **** 		}
 11551              		.loc 1 2758 5 is_stmt 0 view .LVU3752
 11552              	.LBE608:
 11553              	.LBE606:
2764:src/display.c **** 	      packed_from_number(&z, &r);
 11554              		.loc 1 2764 8 is_stmt 1 discriminator 1 view .LVU3753
 11555 0bf0 4C4A     		ldr	r2, .L1231+40
 11556 0bf2 5146     		mov	r1, r10
 11557 0bf4 5046     		mov	r0, r10
 11558 0bf6 FFF7FEFF 		bl	decNumberNormalize
 11559              	.LVL1345:
2765:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11560              		.loc 1 2765 8 discriminator 1 view .LVU3754
 11561 0bfa 5146     		mov	r1, r10
 11562 0bfc 06A8     		add	r0, sp, #24
 11563 0bfe FFF7FEFF 		bl	packed_from_number
ARM GAS  /tmp/ccPv3rzq.s 			page 330


 11564              	.LVL1346:
2766:src/display.c **** 	      skip = 1;
 11565              		.loc 1 2766 8 discriminator 1 view .LVU3755
 11566 0c02 0022     		movs	r2, #0
 11567 0c04 06A8     		add	r0, sp, #24
 11568 0c06 1146     		mov	r1, r2
 11569 0c08 FFF7FEFF 		bl	set_x
 11570              	.LVL1347:
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11571              		.loc 1 2767 8 discriminator 1 view .LVU3756
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11572              		.loc 1 2767 13 is_stmt 0 discriminator 1 view .LVU3757
 11573 0c0c 4FF0010A 		mov	r10, #1
 11574              	.LBE605:
 11575 0c10 C0E5     		b	.L927
 11576              	.LVL1348:
 11577              	.L1212:
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11578              		.loc 1 2767 13 discriminator 1 view .LVU3758
 11579              	.LBE677:
 11580              	.LBB678:
 11581              	.LBB651:
 11582              	.LBB641:
2407:src/display.c **** 	    end = regK_idx;
 11583              		.loc 1 2407 6 is_stmt 1 view .LVU3759
2408:src/display.c **** 	    start = 3;
 11584              		.loc 1 2408 6 view .LVU3760
2409:src/display.c **** 	    group = 4;
 11585              		.loc 1 2409 6 view .LVU3761
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11586              		.loc 1 2410 6 view .LVU3762
2411:src/display.c **** 	  }
 11587              		.loc 1 2411 6 view .LVU3763
 11588 0c12 4548     		ldr	r0, .L1231+44
 11589 0c14 FFF7FEFF 		bl	set_status
 11590              	.LVL1349:
2408:src/display.c **** 	    start = 3;
 11591              		.loc 1 2408 10 is_stmt 0 view .LVU3764
 11592 0c18 6F23     		movs	r3, #111
 11593 0c1a 0293     		str	r3, [sp, #8]
2409:src/display.c **** 	    group = 4;
 11594              		.loc 1 2409 12 view .LVU3765
 11595 0c1c 4FF0030A 		mov	r10, #3
 11596              	.LVL1350:
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11597              		.loc 1 2410 12 view .LVU3766
 11598 0c20 4FF00409 		mov	r9, #4
 11599              	.LVL1351:
2407:src/display.c **** 	    end = regK_idx;
 11600              		.loc 1 2407 11 view .LVU3767
 11601 0c24 6423     		movs	r3, #100
 11602 0c26 09E6     		b	.L947
 11603              	.LVL1352:
 11604              	.L966:
2407:src/display.c **** 	    end = regK_idx;
 11605              		.loc 1 2407 11 view .LVU3768
 11606              	.LBE641:
ARM GAS  /tmp/ccPv3rzq.s 			page 331


 11607              	.LBE651:
 11608              	.LBE678:
 11609              	.LBB679:
 11610              	.LBB672:
2512:src/display.c **** 	      n -= 100;
 11611              		.loc 1 2512 8 is_stmt 1 view .LVU3769
2512:src/display.c **** 	      n -= 100;
 11612              		.loc 1 2512 14 is_stmt 0 view .LVU3770
 11613 0c28 3122     		movs	r2, #49
 11614 0c2a 4270     		strb	r2, [r0, #1]
2513:src/display.c **** 	    }
 11615              		.loc 1 2513 8 is_stmt 1 view .LVU3771
2513:src/display.c **** 	    }
 11616              		.loc 1 2513 10 is_stmt 0 view .LVU3772
 11617 0c2c A9F16409 		sub	r9, r9, #100
 11618              	.LVL1353:
2512:src/display.c **** 	      n -= 100;
 11619              		.loc 1 2512 11 view .LVU3773
 11620 0c30 0230     		adds	r0, r0, #2
 11621              	.LVL1354:
 11622              	.L965:
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11623              		.loc 1 2516 4 is_stmt 1 view .LVU3774
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11624              		.loc 1 2516 7 is_stmt 0 view .LVU3775
 11625 0c32 B9F1630F 		cmp	r9, #99
 11626 0c36 7FF743AF 		ble	.L967
2519:src/display.c **** 	  set_status(buf);
 11627              		.loc 1 2519 6 is_stmt 1 view .LVU3776
 11628              	.LVL1355:
2519:src/display.c **** 	  set_status(buf);
 11629              		.loc 1 2519 22 is_stmt 0 view .LVU3777
 11630 0c3a 3C4A     		ldr	r2, .L1231+48
 11631 0c3c 9144     		add	r9, r9, r2
 11632              	.LVL1356:
2519:src/display.c **** 	  set_status(buf);
 11633              		.loc 1 2519 12 view .LVU3778
 11634 0c3e 19F8642C 		ldrb	r2, [r9, #-100]	@ zero_extendqisi2
 11635 0c42 0270     		strb	r2, [r0]
 11636 0c44 42E7     		b	.L969
 11637              	.LVL1357:
 11638              	.L1210:
2519:src/display.c **** 	  set_status(buf);
 11639              		.loc 1 2519 12 view .LVU3779
 11640              	.LBE672:
 11641              	.LBE679:
 11642              	.LBB680:
 11643              	.LBB652:
2376:src/display.c **** 	  if (SizeStatRegs)
 11644              		.loc 1 2376 4 is_stmt 1 view .LVU3780
2376:src/display.c **** 	  if (SizeStatRegs)
 11645              		.loc 1 2376 8 is_stmt 0 view .LVU3781
 11646 0c46 0DF1540A 		add	r10, sp, #84
 11647              	.LVL1358:
2376:src/display.c **** 	  if (SizeStatRegs)
 11648              		.loc 1 2376 8 view .LVU3782
 11649 0c4a 3949     		ldr	r1, .L1231+52
ARM GAS  /tmp/ccPv3rzq.s 			page 332


 11650 0c4c 5046     		mov	r0, r10
 11651 0c4e FFF7FEFF 		bl	scopy
 11652              	.LVL1359:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11653              		.loc 1 2377 8 view .LVU3783
 11654 0c52 384A     		ldr	r2, .L1231+56
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11655              		.loc 1 2377 7 view .LVU3784
 11656 0c54 1268     		ldr	r2, [r2]
2376:src/display.c **** 	  if (SizeStatRegs)
 11657              		.loc 1 2376 8 view .LVU3785
 11658 0c56 0346     		mov	r3, r0
 11659              	.LVL1360:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11660              		.loc 1 2377 4 is_stmt 1 view .LVU3786
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11661              		.loc 1 2377 7 is_stmt 0 view .LVU3787
 11662 0c58 002A     		cmp	r2, #0
 11663 0c5a 40F0C380 		bne	.L1220
 11664              	.L944:
2379:src/display.c **** 	  set_status(buf);
 11665              		.loc 1 2379 4 is_stmt 1 view .LVU3788
2379:src/display.c **** 	  set_status(buf);
 11666              		.loc 1 2379 7 is_stmt 0 view .LVU3789
 11667 0c5e 0022     		movs	r2, #0
 11668 0c60 1A70     		strb	r2, [r3]
2380:src/display.c **** 
 11669              		.loc 1 2380 4 is_stmt 1 view .LVU3790
 11670 0c62 5046     		mov	r0, r10
 11671              	.LVL1361:
2380:src/display.c **** 
 11672              		.loc 1 2380 4 is_stmt 0 view .LVU3791
 11673 0c64 FFF7FEFF 		bl	set_status
 11674              	.LVL1362:
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11675              		.loc 1 2383 4 is_stmt 1 view .LVU3792
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11676              		.loc 1 2383 8 is_stmt 0 view .LVU3793
 11677 0c68 FFF7FEFF 		bl	global_regs
 11678              	.LVL1363:
 11679 0c6c 0146     		mov	r1, r0
 11680 0c6e 5046     		mov	r0, r10
 11681 0c70 FFF7FEFF 		bl	num_arg
 11682              	.LVL1364:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11683              		.loc 1 2384 8 view .LVU3794
 11684 0c74 DBF80020 		ldr	r2, [fp]
 11685 0c78 B2F8DE27 		ldrh	r2, [r2, #2014]
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11686              		.loc 1 2384 7 view .LVU3795
 11687 0c7c 1504     		lsls	r5, r2, #16
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11688              		.loc 1 2383 8 view .LVU3796
 11689 0c7e 0346     		mov	r3, r0
 11690              	.LVL1365:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11691              		.loc 1 2384 4 is_stmt 1 view .LVU3797
ARM GAS  /tmp/ccPv3rzq.s 			page 333


2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11692              		.loc 1 2384 7 is_stmt 0 view .LVU3798
 11693 0c80 00F1A480 		bmi	.L1221
 11694              	.L945:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11695              		.loc 1 2388 4 is_stmt 1 view .LVU3799
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11696              		.loc 1 2388 7 is_stmt 0 view .LVU3800
 11697 0c84 0021     		movs	r1, #0
2389:src/display.c **** 	} else {
 11698              		.loc 1 2389 4 view .LVU3801
 11699 0c86 5046     		mov	r0, r10
 11700              	.LVL1366:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11701              		.loc 1 2388 7 view .LVU3802
 11702 0c88 1970     		strb	r1, [r3]
2389:src/display.c **** 	} else {
 11703              		.loc 1 2389 4 is_stmt 1 view .LVU3803
 11704 0c8a FFF7FEFF 		bl	set_digits_string
 11705              	.LVL1367:
2389:src/display.c **** 	} else {
 11706              		.loc 1 2389 4 is_stmt 0 view .LVU3804
 11707 0c8e 74E6     		b	.L942
 11708              	.LVL1368:
 11709              	.L1218:
2389:src/display.c **** 	} else {
 11710              		.loc 1 2389 4 view .LVU3805
 11711              	.LBE652:
 11712              	.LBE680:
2820:src/display.c **** 	  } else if (State2.alphas) {
 11713              		.loc 1 2820 6 is_stmt 1 view .LVU3806
2820:src/display.c **** 	  } else if (State2.alphas) {
 11714              		.loc 1 2820 48 is_stmt 0 view .LVU3807
 11715 0c90 501E     		subs	r0, r2, #1
 11716 0c92 0191     		str	r1, [sp, #4]
 11717 0c94 FFF7FEFF 		bl	get_reg_n
 11718              	.LVL1369:
 11719              	.LBB681:
 11720              	.LBI681:
3348:src/display.c **** 	int glen = *graphic++;
 11721              		.loc 1 3348 19 is_stmt 1 view .LVU3808
 11722              	.LBB682:
3349:src/display.c **** 	int i, j;
 11723              		.loc 1 3349 2 view .LVU3809
3349:src/display.c **** 	int i, j;
 11724              		.loc 1 3349 6 is_stmt 0 view .LVU3810
 11725 0c98 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 11726              	.LVL1370:
3350:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11727              		.loc 1 3350 2 is_stmt 1 view .LVU3811
3356:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11728              		.loc 1 3356 2 view .LVU3812
3356:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11729              		.loc 1 3356 5 is_stmt 0 view .LVU3813
 11730 0c9a 4BB3     		cbz	r3, .L975
3357:src/display.c **** 
 11731              		.loc 1 3357 2 is_stmt 1 view .LVU3814
ARM GAS  /tmp/ccPv3rzq.s 			page 334


 11732              	.LVL1371:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11733              		.loc 1 3359 2 view .LVU3815
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11734              		.loc 1 3359 12 view .LVU3816
 11735 0c9c 421C     		adds	r2, r0, #1
 11736 0c9e 0292     		str	r2, [sp, #8]
 11737 0ca0 4A2B     		cmp	r3, #74
 11738 0ca2 D4BF     		ite	le
 11739 0ca4 D218     		addle	r2, r2, r3
 11740 0ca6 4A32     		addgt	r2, r2, #74
 11741 0ca8 CDE90369 		strd	r6, r9, [sp, #12]
 11742 0cac CDF814A0 		str	r10, [sp, #20]
 11743 0cb0 9146     		mov	r9, r2
 11744              	.LVL1372:
 11745              	.L976:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11746              		.loc 1 3360 14 view .LVU3817
 11747 0cb2 019B     		ldr	r3, [sp, #4]
 11748 0cb4 029E     		ldr	r6, [sp, #8]
 11749 0cb6 0121     		movs	r1, #1
 11750 0cb8 01FA03F5 		lsl	r5, r1, r3
 11751 0cbc 03F1940A 		add	r10, r3, #148
 11752 0cc0 05E0     		b	.L979
 11753              	.LVL1373:
 11754              	.L1223:
 11755              	.LBB683:
 11756              	.LBB684:
 284:src/display.c ****   else	clr_dot(n);
 11757              		.loc 1 284 11 is_stmt 0 view .LVU3818
 11758 0cc2 FFF7FEFF 		bl	set_dot
 11759              	.LVL1374:
 11760              	.L978:
 284:src/display.c ****   else	clr_dot(n);
 11761              		.loc 1 284 11 view .LVU3819
 11762              	.LBE684:
 11763              	.LBE683:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11764              		.loc 1 3360 23 is_stmt 1 view .LVU3820
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11765              		.loc 1 3360 14 view .LVU3821
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11766              		.loc 1 3360 4 is_stmt 0 view .LVU3822
 11767 0cc6 B145     		cmp	r9, r6
 11768 0cc8 0AF1060A 		add	r10, r10, #6
 11769 0ccc 07D0     		beq	.L1222
 11770              	.LVL1375:
 11771              	.L979:
3365:src/display.c **** #endif
 11772              		.loc 1 3365 6 is_stmt 1 view .LVU3823
 11773              	.LBB687:
 11774              	.LBI683:
 283:src/display.c ****   if (on)	set_dot(n);
 11775              		.loc 1 283 6 view .LVU3824
 11776              	.LBB685:
 284:src/display.c ****   else	clr_dot(n);
 11777              		.loc 1 284 3 view .LVU3825
ARM GAS  /tmp/ccPv3rzq.s 			page 335


 284:src/display.c ****   else	clr_dot(n);
 11778              		.loc 1 284 11 view .LVU3826
 285:src/display.c **** }
 11779              		.loc 1 285 8 view .LVU3827
 11780              	.LBE685:
 11781              	.LBE687:
3365:src/display.c **** #endif
 11782              		.loc 1 3365 37 is_stmt 0 view .LVU3828
 11783 0cce 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11784              	.LVL1376:
 11785              	.LBB688:
 11786              	.LBB686:
 284:src/display.c ****   else	clr_dot(n);
 11787              		.loc 1 284 6 view .LVU3829
 11788 0cd2 2B42     		tst	r3, r5
 284:src/display.c ****   else	clr_dot(n);
 11789              		.loc 1 284 11 view .LVU3830
 11790 0cd4 5046     		mov	r0, r10
 284:src/display.c ****   else	clr_dot(n);
 11791              		.loc 1 284 6 view .LVU3831
 11792 0cd6 F4D1     		bne	.L1223
 285:src/display.c **** }
 11793              		.loc 1 285 8 view .LVU3832
 11794 0cd8 FFF7FEFF 		bl	clr_dot
 11795              	.LVL1377:
 11796 0cdc F3E7     		b	.L978
 11797              	.LVL1378:
 11798              	.L1222:
 285:src/display.c **** }
 11799              		.loc 1 285 8 view .LVU3833
 11800              	.LBE686:
 11801              	.LBE688:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11802              		.loc 1 3359 17 is_stmt 1 view .LVU3834
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11803              		.loc 1 3359 18 is_stmt 0 view .LVU3835
 11804 0cde 019B     		ldr	r3, [sp, #4]
 11805 0ce0 0133     		adds	r3, r3, #1
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11806              		.loc 1 3359 2 view .LVU3836
 11807 0ce2 062B     		cmp	r3, #6
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11808              		.loc 1 3359 18 view .LVU3837
 11809 0ce4 0193     		str	r3, [sp, #4]
 11810              	.LVL1379:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11811              		.loc 1 3359 12 is_stmt 1 view .LVU3838
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11812              		.loc 1 3359 2 is_stmt 0 view .LVU3839
 11813 0ce6 E4D1     		bne	.L976
 11814 0ce8 DDE90369 		ldrd	r6, r9, [sp, #12]
 11815              	.LVL1380:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11816              		.loc 1 3359 2 view .LVU3840
 11817 0cec DDF814A0 		ldr	r10, [sp, #20]
 11818              	.LVL1381:
 11819              	.L975:
ARM GAS  /tmp/ccPv3rzq.s 			page 336


3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11820              		.loc 1 3359 2 view .LVU3841
 11821              	.LBE682:
 11822              	.LBE681:
2870:src/display.c ****       nostk:
 11823              		.loc 1 2870 2 is_stmt 1 view .LVU3842
 11824 0cf0 FFF7FEFF 		bl	show_stack
 11825              	.LVL1382:
2872:src/display.c **** 	if (!skip) {
 11826              		.loc 1 2872 2 view .LVU3843
 11827 0cf4 FFF7FEFF 		bl	show_flags
 11828              	.LVL1383:
2873:src/display.c **** 	  if (State2.runmode) {
 11829              		.loc 1 2873 2 view .LVU3844
 11830 0cf8 FFF7C5B9 		b	.L902
 11831              	.L1232:
 11832              		.align	2
 11833              	.L1231:
 11834 0cfc 20000000 		.word	.LC30
 11835 0d00 00000000 		.word	DispPlot
 11836 0d04 80000000 		.word	.LC40
 11837 0d08 58000000 		.word	.LC36
 11838 0d0c 78000000 		.word	.LC39
 11839 0d10 2C000000 		.word	.LC31
 11840 0d14 34000000 		.word	.LC32
 11841 0d18 88000000 		.word	.LC41
 11842 0d1c 00000000 		.word	StackBase
 11843 0d20 00000000 		.word	monfuncs
 11844 0d24 00000000 		.word	Ctx
 11845 0d28 5C000000 		.word	.LC37
 11846 0d2c 9C000000 		.word	.LC28
 11847 0d30 3C000000 		.word	.LC33
 11848 0d34 00000000 		.word	SizeStatRegs
 11849 0d38 00000000 		.word	.LANCHOR19
 11850 0d3c 00000000 		.word	DispMsg
 11851              	.LVL1384:
 11852              	.L1219:
2822:src/display.c **** 	    j = State2.alpha_pos;
 11853              		.loc 1 2822 6 view .LVU3845
2822:src/display.c **** 	    j = State2.alpha_pos;
 11854              		.loc 1 2822 22 is_stmt 0 view .LVU3846
 11855 0d40 DBF80010 		ldr	r1, [fp]
2822:src/display.c **** 	    j = State2.alpha_pos;
 11856              		.loc 1 2822 11 view .LVU3847
 11857 0d44 1EA8     		add	r0, sp, #120
 11858              	.LVL1385:
2822:src/display.c **** 	    j = State2.alpha_pos;
 11859              		.loc 1 2822 11 view .LVU3848
 11860 0d46 01F5F661 		add	r1, r1, #1968
 11861 0d4a CDE90132 		strd	r3, r2, [sp, #4]
 11862 0d4e FFF7FEFF 		bl	scopy
 11863              	.LVL1386:
2823:src/display.c **** 	    if (j != 0) {
 11864              		.loc 1 2823 16 view .LVU3849
 11865 0d52 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 11866              	.LVL1387:
2823:src/display.c **** 	    if (j != 0) {
ARM GAS  /tmp/ccPv3rzq.s 			page 337


 11867              		.loc 1 2823 6 is_stmt 1 view .LVU3850
2824:src/display.c **** 	      i = slen(buf);
 11868              		.loc 1 2824 6 view .LVU3851
2824:src/display.c **** 	      i = slen(buf);
 11869              		.loc 1 2824 9 is_stmt 0 view .LVU3852
 11870 0d54 019B     		ldr	r3, [sp, #4]
 11871 0d56 0029     		cmp	r1, #0
 11872 0d58 49D1     		bne	.L1224
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11873              		.loc 1 2837 8 is_stmt 1 view .LVU3853
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11874              		.loc 1 2837 11 is_stmt 0 view .LVU3854
 11875 0d5a 2BB1     		cbz	r3, .L984
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11876              		.loc 1 2837 31 discriminator 1 view .LVU3855
 11877 0d5c 25B9     		cbnz	r5, .L984
2838:src/display.c **** 		*bp++ = '\0';
 11878              		.loc 1 2838 3 is_stmt 1 view .LVU3856
 11879              	.LVL1388:
2838:src/display.c **** 		*bp++ = '\0';
 11880              		.loc 1 2838 23 is_stmt 0 view .LVU3857
 11881 0d5e 03F11002 		add	r2, r3, #16
2839:src/display.c **** 	      }
 11882              		.loc 1 2839 9 view .LVU3858
 11883 0d62 0021     		movs	r1, #0
 11884              	.LVL1389:
2838:src/display.c **** 		*bp++ = '\0';
 11885              		.loc 1 2838 9 view .LVU3859
 11886 0d64 0270     		strb	r2, [r0]
 11887              	.LVL1390:
2839:src/display.c **** 	      }
 11888              		.loc 1 2839 3 is_stmt 1 view .LVU3860
2839:src/display.c **** 	      }
 11889              		.loc 1 2839 9 is_stmt 0 view .LVU3861
 11890 0d66 4170     		strb	r1, [r0, #1]
 11891              	.LVL1391:
 11892              	.L984:
2841:src/display.c **** 	    }
 11893              		.loc 1 2841 8 view .LVU3862
 11894 0d68 1EA8     		add	r0, sp, #120
 11895 0d6a 0193     		str	r3, [sp, #4]
2841:src/display.c **** 	    }
 11896              		.loc 1 2841 8 is_stmt 1 view .LVU3863
 11897 0d6c FFF7FEFF 		bl	set_status_right
 11898              	.LVL1392:
 11899 0d70 019B     		ldr	r3, [sp, #4]
 11900              	.L983:
2843:src/display.c **** 	      bp = buf;
 11901              		.loc 1 2843 6 view .LVU3864
2843:src/display.c **** 	      bp = buf;
 11902              		.loc 1 2843 9 is_stmt 0 view .LVU3865
 11903 0d72 002B     		cmp	r3, #0
 11904 0d74 BCD0     		beq	.L975
2843:src/display.c **** 	      bp = buf;
 11905              		.loc 1 2843 27 discriminator 1 view .LVU3866
 11906 0d76 002D     		cmp	r5, #0
 11907 0d78 BAD0     		beq	.L975
ARM GAS  /tmp/ccPv3rzq.s 			page 338


2844:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11908              		.loc 1 2844 8 is_stmt 1 view .LVU3867
 11909              	.LVL1393:
2845:src/display.c **** 	      *bp++ = '\0';
 11910              		.loc 1 2845 8 view .LVU3868
2845:src/display.c **** 	      *bp++ = '\0';
 11911              		.loc 1 2845 28 is_stmt 0 view .LVU3869
 11912 0d7a 1033     		adds	r3, r3, #16
 11913              	.LBB689:
 11914              	.LBB690:
3525:src/display.c **** 	if (State2.runmode) {
 11915              		.loc 1 3525 5 view .LVU3870
 11916 0d7c B7F90020 		ldrsh	r2, [r7]
 11917              	.LBE690:
 11918              	.LBE689:
2845:src/display.c **** 	      *bp++ = '\0';
 11919              		.loc 1 2845 14 view .LVU3871
 11920 0d80 8DF87830 		strb	r3, [sp, #120]
2846:src/display.c **** 	      set_status_top(buf);
 11921              		.loc 1 2846 8 is_stmt 1 view .LVU3872
 11922              	.LVL1394:
2846:src/display.c **** 	      set_status_top(buf);
 11923              		.loc 1 2846 14 is_stmt 0 view .LVU3873
 11924 0d84 0023     		movs	r3, #0
 11925 0d86 8DF87930 		strb	r3, [sp, #121]
2847:src/display.c **** 	      no_status_top = 1;
 11926              		.loc 1 2847 8 is_stmt 1 view .LVU3874
 11927              	.LVL1395:
 11928              	.LBB692:
 11929              	.LBI689:
3524:src/display.c **** 	if (no_status_top) return;
 11930              		.loc 1 3524 19 view .LVU3875
 11931              	.LBB691:
3525:src/display.c **** 	if (State2.runmode) {
 11932              		.loc 1 3525 2 view .LVU3876
3525:src/display.c **** 	if (State2.runmode) {
 11933              		.loc 1 3525 5 is_stmt 0 view .LVU3877
 11934 0d8a 12B9     		cbnz	r2, .L985
 11935 0d8c 1EA8     		add	r0, sp, #120
 11936              	.LVL1396:
3525:src/display.c **** 	if (State2.runmode) {
 11937              		.loc 1 3525 5 view .LVU3878
 11938 0d8e FFF7FEFF 		bl	set_status_top.part.0
 11939              	.LVL1397:
 11940              	.L985:
3525:src/display.c **** 	if (State2.runmode) {
 11941              		.loc 1 3525 5 view .LVU3879
 11942              	.LBE691:
 11943              	.LBE692:
2848:src/display.c **** 	      //annuc = 1;
 11944              		.loc 1 2848 8 is_stmt 1 view .LVU3880
2848:src/display.c **** 	      //annuc = 1;
 11945              		.loc 1 2848 22 is_stmt 0 view .LVU3881
 11946 0d92 0123     		movs	r3, #1
 11947 0d94 3B80     		strh	r3, [r7]	@ movhi
2870:src/display.c ****       nostk:
 11948              		.loc 1 2870 2 is_stmt 1 view .LVU3882
ARM GAS  /tmp/ccPv3rzq.s 			page 339


 11949 0d96 FFF7FEFF 		bl	show_stack
 11950              	.LVL1398:
2872:src/display.c **** 	if (!skip) {
 11951              		.loc 1 2872 2 view .LVU3883
 11952 0d9a FFF7FEFF 		bl	show_flags
 11953              	.LVL1399:
2873:src/display.c **** 	  if (State2.runmode) {
 11954              		.loc 1 2873 2 view .LVU3884
 11955 0d9e FFF772B9 		b	.L902
 11956              	.LVL1400:
 11957              	.L930:
 11958              	.LBB693:
 11959              	.LBB610:
 11960              	.LBB609:
2761:src/display.c **** 	      } else
 11961              		.loc 1 2761 5 view .LVU3885
 11962 0da2 5046     		mov	r0, r10
 11963 0da4 FFF7FEFF 		bl	set_NaN
 11964              	.LVL1401:
 11965 0da8 22E7     		b	.L931
 11966              	.LVL1402:
 11967              	.L929:
2761:src/display.c **** 	      } else
 11968              		.loc 1 2761 5 is_stmt 0 view .LVU3886
 11969              	.LBE609:
2763:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11970              		.loc 1 2763 3 is_stmt 1 view .LVU3887
 11971 0daa 0DF1540A 		add	r10, sp, #84
 11972 0dae 0CAA     		add	r2, sp, #48
 11973 0db0 06F07F01 		and	r1, r6, #127
 11974 0db4 5046     		mov	r0, r10
 11975 0db6 FFF7FEFF 		bl	do_conv
 11976              	.LVL1403:
 11977 0dba 19E7     		b	.L931
 11978              	.LVL1404:
 11979              	.L960:
2763:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11980              		.loc 1 2763 3 is_stmt 0 view .LVU3888
 11981              	.LBE610:
 11982              	.LBE693:
 11983              	.LBB694:
 11984              	.LBB666:
2479:src/display.c **** 	    }
 11985              		.loc 1 2479 8 is_stmt 1 view .LVU3889
2479:src/display.c **** 	    }
 11986              		.loc 1 2479 37 is_stmt 0 view .LVU3890
 11987 0dbc 02EB8202 		add	r2, r2, r2, lsl #2
 11988              	.LVL1405:
2479:src/display.c **** 	    }
 11989              		.loc 1 2479 8 view .LVU3891
 11990 0dc0 0BEB0200 		add	r0, fp, r2
 11991 0dc4 5146     		mov	r1, r10
 11992 0dc6 FFF7FEFF 		bl	set_exp_digits_string
 11993              	.LVL1406:
2479:src/display.c **** 	    }
 11994              		.loc 1 2479 8 view .LVU3892
 11995              	.LBE666:
ARM GAS  /tmp/ccPv3rzq.s 			page 340


 11996              	.LBE694:
2870:src/display.c ****       nostk:
 11997              		.loc 1 2870 2 is_stmt 1 view .LVU3893
 11998 0dca D0E5     		b	.L1180
 11999              	.LVL1407:
 12000              	.L1221:
 12001              	.LBB695:
 12002              	.LBB653:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 12003              		.loc 1 2385 6 view .LVU3894
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 12004              		.loc 1 2385 10 is_stmt 0 view .LVU3895
 12005 0dcc 1649     		ldr	r1, .L1233
 12006 0dce FFF7FEFF 		bl	scopy
 12007              	.LVL1408:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 12008              		.loc 1 2385 10 view .LVU3896
 12009 0dd2 0546     		mov	r5, r0
 12010              	.LVL1409:
2386:src/display.c **** 	  }
 12011              		.loc 1 2386 6 is_stmt 1 view .LVU3897
2386:src/display.c **** 	  }
 12012              		.loc 1 2386 21 is_stmt 0 view .LVU3898
 12013 0dd4 FFF7FEFF 		bl	local_regs
 12014              	.LVL1410:
2386:src/display.c **** 	  }
 12015              		.loc 1 2386 21 view .LVU3899
 12016 0dd8 0146     		mov	r1, r0
2386:src/display.c **** 	  }
 12017              		.loc 1 2386 10 view .LVU3900
 12018 0dda 2846     		mov	r0, r5
 12019 0ddc FFF7FEFF 		bl	num_arg
 12020              	.LVL1411:
 12021 0de0 0346     		mov	r3, r0
 12022              	.LVL1412:
2386:src/display.c **** 	  }
 12023              		.loc 1 2386 10 view .LVU3901
 12024 0de2 4FE7     		b	.L945
 12025              	.L1220:
2378:src/display.c **** 	  *p = '\0';
 12026              		.loc 1 2378 6 is_stmt 1 view .LVU3902
2378:src/display.c **** 	  *p = '\0';
 12027              		.loc 1 2378 10 is_stmt 0 view .LVU3903
 12028 0de4 1149     		ldr	r1, .L1233+4
 12029 0de6 FFF7FEFF 		bl	scopy
 12030              	.LVL1413:
2378:src/display.c **** 	  *p = '\0';
 12031              		.loc 1 2378 10 view .LVU3904
 12032 0dea 0346     		mov	r3, r0
 12033              	.LVL1414:
2378:src/display.c **** 	  *p = '\0';
 12034              		.loc 1 2378 10 view .LVU3905
 12035 0dec 37E7     		b	.L944
 12036              	.LVL1415:
 12037              	.L1224:
2378:src/display.c **** 	  *p = '\0';
 12038              		.loc 1 2378 10 view .LVU3906
ARM GAS  /tmp/ccPv3rzq.s 			page 341


 12039              	.LBE653:
 12040              	.LBE695:
2825:src/display.c **** 	      j *= 6;
 12041              		.loc 1 2825 8 is_stmt 1 view .LVU3907
2825:src/display.c **** 	      j *= 6;
 12042              		.loc 1 2825 12 is_stmt 0 view .LVU3908
 12043 0dee 1EA8     		add	r0, sp, #120
 12044              	.LVL1416:
2825:src/display.c **** 	      j *= 6;
 12045              		.loc 1 2825 12 view .LVU3909
 12046 0df0 0391     		str	r1, [sp, #12]
 12047 0df2 FFF7FEFF 		bl	slen
 12048              	.LVL1417:
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12049              		.loc 1 2826 8 is_stmt 1 view .LVU3910
2827:src/display.c **** 		{
 12050              		.loc 1 2827 8 view .LVU3911
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12051              		.loc 1 2826 10 is_stmt 0 view .LVU3912
 12052 0df6 0399     		ldr	r1, [sp, #12]
2827:src/display.c **** 		{
 12053              		.loc 1 2827 11 view .LVU3913
 12054 0df8 019B     		ldr	r3, [sp, #4]
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12055              		.loc 1 2826 10 view .LVU3914
 12056 0dfa 01EB4101 		add	r1, r1, r1, lsl #1
2827:src/display.c **** 		{
 12057              		.loc 1 2827 15 view .LVU3915
 12058 0dfe A0EB4100 		sub	r0, r0, r1, lsl #1
 12059              	.LVL1418:
2827:src/display.c **** 		{
 12060              		.loc 1 2827 11 view .LVU3916
 12061 0e02 1328     		cmp	r0, #19
 12062 0e04 09DD     		ble	.L982
2829:src/display.c **** 		  set_status_right(buf);
 12063              		.loc 1 2829 5 is_stmt 1 view .LVU3917
2829:src/display.c **** 		  set_status_right(buf);
 12064              		.loc 1 2829 20 is_stmt 0 view .LVU3918
 12065 0e06 28AB     		add	r3, sp, #160
 12066 0e08 1918     		adds	r1, r3, r0
 12067 0e0a 029A     		ldr	r2, [sp, #8]
 12068 0e0c 01F8282C 		strb	r2, [r1, #-40]
2830:src/display.c **** 		}
 12069              		.loc 1 2830 5 is_stmt 1 view .LVU3919
 12070 0e10 1EA8     		add	r0, sp, #120
 12071 0e12 FFF7FEFF 		bl	set_status_right
 12072              	.LVL1419:
 12073 0e16 019B     		ldr	r3, [sp, #4]
 12074 0e18 ABE7     		b	.L983
 12075              	.L982:
2833:src/display.c **** 	      }
 12076              		.loc 1 2833 3 is_stmt 0 view .LVU3920
 12077 0e1a 1EA8     		add	r0, sp, #120
 12078 0e1c 0193     		str	r3, [sp, #4]
2833:src/display.c **** 	      }
 12079              		.loc 1 2833 3 is_stmt 1 view .LVU3921
 12080 0e1e FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccPv3rzq.s 			page 342


 12081              	.LVL1420:
 12082 0e22 019B     		ldr	r3, [sp, #4]
 12083 0e24 A5E7     		b	.L983
 12084              	.L1234:
 12085 0e26 00BF     		.align	2
 12086              	.L1233:
 12087 0e28 4C000000 		.word	.LC35
 12088 0e2c 44000000 		.word	.LC34
 12089              		.cfi_endproc
 12090              	.LFE33:
 12092              		.section	.text.frozen_display,"ax",%progbits
 12093              		.align	1
 12094              		.p2align 2,,3
 12095              		.global	frozen_display
 12096              		.syntax unified
 12097              		.thumb
 12098              		.thumb_func
 12099              		.fpu fpv4-sp-d16
 12101              	frozen_display:
 12102              	.LFB34:
3342:src/display.c **** 	State2.disp_freeze = 0;
 12103              		.loc 1 3342 7 view -0
 12104              		.cfi_startproc
 12105              		@ args = 0, pretend = 0, frame = 0
 12106              		@ frame_needed = 0, uses_anonymous_args = 0
3343:src/display.c **** 	display();
 12107              		.loc 1 3343 2 view .LVU3923
3342:src/display.c **** 	State2.disp_freeze = 0;
 12108              		.loc 1 3342 7 is_stmt 0 view .LVU3924
 12109 0000 10B5     		push	{r4, lr}
 12110              		.cfi_def_cfa_offset 8
 12111              		.cfi_offset 4, -8
 12112              		.cfi_offset 14, -4
3343:src/display.c **** 	display();
 12113              		.loc 1 3343 21 view .LVU3925
 12114 0002 064C     		ldr	r4, .L1237
 12115 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12116 0006 6FF30413 		bfc	r3, #4, #1
 12117 000a E375     		strb	r3, [r4, #23]
3344:src/display.c **** 	State2.disp_freeze = 1;
 12118              		.loc 1 3344 2 is_stmt 1 view .LVU3926
 12119 000c FFF7FEFF 		bl	display
 12120              	.LVL1421:
3345:src/display.c ****       }
 12121              		.loc 1 3345 2 view .LVU3927
3345:src/display.c ****       }
 12122              		.loc 1 3345 21 is_stmt 0 view .LVU3928
 12123 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12124 0012 43F01003 		orr	r3, r3, #16
 12125 0016 E375     		strb	r3, [r4, #23]
3346:src/display.c **** 
 12126              		.loc 1 3346 7 view .LVU3929
 12127 0018 10BD     		pop	{r4, pc}
 12128              	.L1238:
 12129 001a 00BF     		.align	2
 12130              	.L1237:
 12131 001c 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccPv3rzq.s 			page 343


 12132              		.cfi_endproc
 12133              	.LFE34:
 12135              		.section	.text.message,"ax",%progbits
 12136              		.align	1
 12137              		.p2align 2,,3
 12138              		.global	message
 12139              		.syntax unified
 12140              		.thumb
 12141              		.thumb_func
 12142              		.fpu fpv4-sp-d16
 12144              	message:
 12145              	.LVL1422:
 12146              	.LFB45:
3544:src/display.c **** 	State2.disp_freeze = 0;
 12147              		.loc 1 3544 7 is_stmt 1 view -0
 12148              		.cfi_startproc
 12149              		@ args = 0, pretend = 0, frame = 0
 12150              		@ frame_needed = 0, uses_anonymous_args = 0
3545:src/display.c **** 	State2.disp_small = 0;
 12151              		.loc 1 3545 2 view .LVU3931
3546:src/display.c **** 	WasDataEntry = 0;
 12152              		.loc 1 3546 2 view .LVU3932
3546:src/display.c **** 	WasDataEntry = 0;
 12153              		.loc 1 3546 20 is_stmt 0 view .LVU3933
 12154 0000 174A     		ldr	r2, .L1249
3544:src/display.c **** 	State2.disp_freeze = 0;
 12155              		.loc 1 3544 7 view .LVU3934
 12156 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12157              		.cfi_def_cfa_offset 24
 12158              		.cfi_offset 3, -24
 12159              		.cfi_offset 4, -20
 12160              		.cfi_offset 5, -16
 12161              		.cfi_offset 6, -12
 12162              		.cfi_offset 7, -8
 12163              		.cfi_offset 14, -4
3546:src/display.c **** 	WasDataEntry = 0;
 12164              		.loc 1 3546 20 view .LVU3935
 12165 0004 D38A     		ldrh	r3, [r2, #22]
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12166              		.loc 1 3547 15 view .LVU3936
 12167 0006 174E     		ldr	r6, .L1249+4
3546:src/display.c **** 	WasDataEntry = 0;
 12168              		.loc 1 3546 20 view .LVU3937
 12169 0008 23F48453 		bic	r3, r3, #4224
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12170              		.loc 1 3547 15 view .LVU3938
 12171 000c 0027     		movs	r7, #0
3546:src/display.c **** 	WasDataEntry = 0;
 12172              		.loc 1 3546 20 view .LVU3939
 12173 000e D382     		strh	r3, [r2, #22]	@ movhi
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12174              		.loc 1 3547 2 is_stmt 1 view .LVU3940
3548:src/display.c **** 	  // Complete redraw necessary
 12175              		.loc 1 3548 5 is_stmt 0 view .LVU3941
 12176 0010 9B05     		lsls	r3, r3, #22
3544:src/display.c **** 	State2.disp_freeze = 0;
 12177              		.loc 1 3544 7 view .LVU3942
ARM GAS  /tmp/ccPv3rzq.s 			page 344


 12178 0012 0546     		mov	r5, r0
 12179 0014 0C46     		mov	r4, r1
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12180              		.loc 1 3547 15 view .LVU3943
 12181 0016 3760     		str	r7, [r6]
3548:src/display.c **** 	  // Complete redraw necessary
 12182              		.loc 1 3548 2 is_stmt 1 view .LVU3944
3548:src/display.c **** 	  // Complete redraw necessary
 12183              		.loc 1 3548 5 is_stmt 0 view .LVU3945
 12184 0018 12D5     		bpl	.L1240
3548:src/display.c **** 	  // Complete redraw necessary
 12185              		.loc 1 3548 27 discriminator 1 view .LVU3946
 12186 001a D1B1     		cbz	r1, .L1248
 12187              	.L1241:
3555:src/display.c **** 	    ShowRPN = 0;
 12188              		.loc 1 3555 6 is_stmt 1 view .LVU3947
 12189 001c FFF7FEFF 		bl	reset_disp
 12190              	.LVL1423:
3556:src/display.c **** 	    set_annunciators();
 12191              		.loc 1 3556 6 view .LVU3948
3556:src/display.c **** 	    set_annunciators();
 12192              		.loc 1 3556 14 is_stmt 0 view .LVU3949
 12193 0020 114B     		ldr	r3, .L1249+8
 12194 0022 0026     		movs	r6, #0
 12195 0024 1E60     		str	r6, [r3]
3557:src/display.c **** 	    set_digits_string( str2, 0 );
 12196              		.loc 1 3557 6 is_stmt 1 view .LVU3950
 12197 0026 FFF7FEFF 		bl	set_annunciators
 12198              	.LVL1424:
3558:src/display.c **** 	  }
 12199              		.loc 1 3558 6 view .LVU3951
 12200 002a 3146     		mov	r1, r6
 12201 002c 2046     		mov	r0, r4
 12202 002e FFF7FEFF 		bl	set_digits_string
 12203              	.LVL1425:
3560:src/display.c **** 	  finish_display();// message
 12204              		.loc 1 3560 4 view .LVU3952
 12205 0032 2846     		mov	r0, r5
 12206 0034 FFF7FEFF 		bl	set_status
 12207              	.LVL1426:
3561:src/display.c **** 	}
 12208              		.loc 1 3561 4 view .LVU3953
3563:src/display.c **** 
 12209              		.loc 1 3563 7 is_stmt 0 view .LVU3954
 12210 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12211              		.cfi_remember_state
 12212              		.cfi_restore 14
 12213              		.cfi_restore 7
 12214              		.cfi_restore 6
 12215              		.cfi_restore 5
 12216              		.cfi_restore 4
 12217              		.cfi_restore 3
 12218              		.cfi_def_cfa_offset 0
 12219              	.LVL1427:
3561:src/display.c **** 	}
 12220              		.loc 1 3561 4 view .LVU3955
 12221 003c FFF7FEBF 		b	finish_display
ARM GAS  /tmp/ccPv3rzq.s 			page 345


 12222              	.LVL1428:
 12223              	.L1240:
 12224              		.cfi_restore_state
3554:src/display.c **** 	    reset_disp();
 12225              		.loc 1 3554 4 is_stmt 1 view .LVU3956
3554:src/display.c **** 	    reset_disp();
 12226              		.loc 1 3554 7 is_stmt 0 view .LVU3957
 12227 0040 0029     		cmp	r1, #0
 12228 0042 EBD1     		bne	.L1241
3560:src/display.c **** 	  finish_display();// message
 12229              		.loc 1 3560 4 is_stmt 1 view .LVU3958
 12230 0044 2846     		mov	r0, r5
 12231              	.LVL1429:
3560:src/display.c **** 	  finish_display();// message
 12232              		.loc 1 3560 4 is_stmt 0 view .LVU3959
 12233 0046 FFF7FEFF 		bl	set_status
 12234              	.LVL1430:
3561:src/display.c **** 	}
 12235              		.loc 1 3561 4 is_stmt 1 view .LVU3960
3563:src/display.c **** 
 12236              		.loc 1 3563 7 is_stmt 0 view .LVU3961
 12237 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12238              		.cfi_remember_state
 12239              		.cfi_restore 14
 12240              		.cfi_restore 7
 12241              		.cfi_restore 6
 12242              		.cfi_restore 5
 12243              		.cfi_restore 4
 12244              		.cfi_restore 3
 12245              		.cfi_def_cfa_offset 0
 12246              	.LVL1431:
3561:src/display.c **** 	}
 12247              		.loc 1 3561 4 view .LVU3962
 12248 004e FFF7FEBF 		b	finish_display
 12249              	.LVL1432:
 12250              	.L1248:
 12251              		.cfi_restore_state
3550:src/display.c **** 	  display();
 12252              		.loc 1 3550 4 is_stmt 1 view .LVU3963
3550:src/display.c **** 	  display();
 12253              		.loc 1 3550 12 is_stmt 0 view .LVU3964
 12254 0052 064B     		ldr	r3, .L1249+12
 12255 0054 1860     		str	r0, [r3]
3551:src/display.c **** 	}
 12256              		.loc 1 3551 4 is_stmt 1 view .LVU3965
3563:src/display.c **** 
 12257              		.loc 1 3563 7 is_stmt 0 view .LVU3966
 12258 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12259              		.cfi_restore 14
 12260              		.cfi_restore 7
 12261              		.cfi_restore 6
 12262              		.cfi_restore 5
 12263              		.cfi_restore 4
 12264              		.cfi_restore 3
 12265              		.cfi_def_cfa_offset 0
3551:src/display.c **** 	}
 12266              		.loc 1 3551 4 view .LVU3967
ARM GAS  /tmp/ccPv3rzq.s 			page 346


 12267 005a FFF7FEBF 		b	display
 12268              	.LVL1433:
 12269              	.L1250:
3551:src/display.c **** 	}
 12270              		.loc 1 3551 4 view .LVU3968
 12271 005e 00BF     		.align	2
 12272              	.L1249:
 12273 0060 00000000 		.word	StateWhileOn
 12274 0064 00000000 		.word	WasDataEntry
 12275 0068 00000000 		.word	ShowRPN
 12276 006c 00000000 		.word	DispMsg
 12277              		.cfi_endproc
 12278              	.LFE45:
 12280              		.section	.text.error_message,"ax",%progbits
 12281              		.align	1
 12282              		.p2align 2,,3
 12283              		.global	error_message
 12284              		.syntax unified
 12285              		.thumb
 12286              		.thumb_func
 12287              		.fpu fpv4-sp-d16
 12289              	error_message:
 12290              	.LVL1434:
 12291              	.LFB1:
 117:src/display.c **** #define MSG1(top) top "\0"
 12292              		.loc 1 117 1 is_stmt 1 view -0
 12293              		.cfi_startproc
 12294              		@ args = 0, pretend = 0, frame = 0
 12295              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/display.c ****     {
 12296              		.loc 1 122 3 view .LVU3970
 183:src/display.c ****     const char *p = error_table[e];
 12297              		.loc 1 183 3 view .LVU3971
 183:src/display.c ****     const char *p = error_table[e];
 12298              		.loc 1 183 21 is_stmt 0 view .LVU3972
 12299 0000 334B     		ldr	r3, .L1277
 12300 0002 1B68     		ldr	r3, [r3]
 12301 0004 0343     		orrs	r3, r0, r3
 12302 0006 00D1     		bne	.L1273
 12303 0008 7047     		bx	lr
 12304              	.L1273:
 12305              	.LBB696:
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12306              		.loc 1 184 5 is_stmt 1 view .LVU3973
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12307              		.loc 1 184 17 is_stmt 0 view .LVU3974
 12308 000a 324B     		ldr	r3, .L1277+4
 12309              	.LBE696:
 117:src/display.c **** #define MSG1(top) top "\0"
 12310              		.loc 1 117 1 view .LVU3975
 12311 000c 70B5     		push	{r4, r5, r6, lr}
 12312              		.cfi_def_cfa_offset 16
 12313              		.cfi_offset 4, -16
 12314              		.cfi_offset 5, -12
 12315              		.cfi_offset 6, -8
 12316              		.cfi_offset 14, -4
 12317              	.LBB708:
ARM GAS  /tmp/ccPv3rzq.s 			page 347


 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12318              		.loc 1 184 17 view .LVU3976
 12319 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12320              	.LVL1435:
 185:src/display.c ****     if (*q == '\0')
 12321              		.loc 1 185 5 is_stmt 1 view .LVU3977
 12322 0012 0446     		mov	r4, r0
 185:src/display.c ****     if (*q == '\0')
 12323              		.loc 1 185 21 is_stmt 0 view .LVU3978
 12324 0014 0021     		movs	r1, #0
 12325 0016 3046     		mov	r0, r6
 12326              	.LVL1436:
 185:src/display.c ****     if (*q == '\0')
 12327              		.loc 1 185 21 view .LVU3979
 12328 0018 FFF7FEFF 		bl	find_char
 12329              	.LVL1437:
 186:src/display.c ****       q = S7_ERROR;
 12330              		.loc 1 186 5 is_stmt 1 view .LVU3980
 186:src/display.c ****       q = S7_ERROR;
 12331              		.loc 1 186 9 is_stmt 0 view .LVU3981
 12332 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 186:src/display.c ****       q = S7_ERROR;
 12333              		.loc 1 186 8 view .LVU3982
 12334 001e 002B     		cmp	r3, #0
 12335 0020 3CD0     		beq	.L1262
 188:src/display.c ****       DispMsg = p;
 12336              		.loc 1 188 8 view .LVU3983
 12337 0022 582B     		cmp	r3, #88
 185:src/display.c ****     if (*q == '\0')
 12338              		.loc 1 185 17 view .LVU3984
 12339 0024 00F10105 		add	r5, r0, #1
 12340              	.LVL1438:
 188:src/display.c ****       DispMsg = p;
 12341              		.loc 1 188 5 is_stmt 1 view .LVU3985
 188:src/display.c ****       DispMsg = p;
 12342              		.loc 1 188 8 is_stmt 0 view .LVU3986
 12343 0028 39D1     		bne	.L1254
 189:src/display.c ****       frozen_display();
 12344              		.loc 1 189 7 is_stmt 1 view .LVU3987
 12345              	.LBB697:
 12346              	.LBB698:
3343:src/display.c **** 	display();
 12347              		.loc 1 3343 21 is_stmt 0 view .LVU3988
 12348 002a 2B4C     		ldr	r4, .L1277+8
 12349              	.LVL1439:
3343:src/display.c **** 	display();
 12350              		.loc 1 3343 21 view .LVU3989
 12351              	.LBE698:
 12352              	.LBE697:
 189:src/display.c ****       frozen_display();
 12353              		.loc 1 189 15 view .LVU3990
 12354 002c 2B4A     		ldr	r2, .L1277+12
 12355              	.LBB702:
 12356              	.LBB699:
3343:src/display.c **** 	display();
 12357              		.loc 1 3343 21 view .LVU3991
 12358 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccPv3rzq.s 			page 348


 12359              	.LBE699:
 12360              	.LBE702:
 189:src/display.c ****       frozen_display();
 12361              		.loc 1 189 15 view .LVU3992
 12362 0030 1660     		str	r6, [r2]
 190:src/display.c ****     }
 12363              		.loc 1 190 7 is_stmt 1 view .LVU3993
 12364              	.LBB703:
 12365              	.LBI697:
3341:src/display.c ****       {
 12366              		.loc 1 3341 12 view .LVU3994
 12367              	.LBB700:
3343:src/display.c **** 	display();
 12368              		.loc 1 3343 2 view .LVU3995
3343:src/display.c **** 	display();
 12369              		.loc 1 3343 21 is_stmt 0 view .LVU3996
 12370 0032 6FF30413 		bfc	r3, #4, #1
 12371 0036 E375     		strb	r3, [r4, #23]
3344:src/display.c **** 	State2.disp_freeze = 1;
 12372              		.loc 1 3344 2 is_stmt 1 view .LVU3997
 12373 0038 FFF7FEFF 		bl	display
 12374              	.LVL1440:
3345:src/display.c ****       }
 12375              		.loc 1 3345 2 view .LVU3998
 12376              	.LBE700:
 12377              	.LBE703:
 201:src/display.c ****       if (*q == 'X')
 12378              		.loc 1 201 5 view .LVU3999
 12379              	.LBB704:
 12380              	.LBB701:
3345:src/display.c ****       }
 12381              		.loc 1 3345 21 is_stmt 0 view .LVU4000
 12382 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12383 003e 43F01003 		orr	r3, r3, #16
 12384 0042 E375     		strb	r3, [r4, #23]
 12385              	.LBE701:
 12386              	.LBE704:
 201:src/display.c ****       if (*q == 'X')
 12387              		.loc 1 201 9 view .LVU4001
 12388 0044 264B     		ldr	r3, .L1277+16
 201:src/display.c ****       if (*q == 'X')
 12389              		.loc 1 201 8 view .LVU4002
 12390 0046 1B68     		ldr	r3, [r3]
 12391 0048 002B     		cmp	r3, #0
 12392 004a 38D0     		beq	.L1251
 12393              	.LVL1441:
 12394              	.L1276:
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 12395              		.loc 1 202 7 is_stmt 1 view .LVU4003
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 12396              		.loc 1 202 10 is_stmt 0 view .LVU4004
 12397 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12398 004e 582B     		cmp	r3, #88
 12399 0050 36D0     		beq	.L1274
 205:src/display.c **** 	print_line(p, 0);
 12400              		.loc 1 205 2 is_stmt 1 view .LVU4005
 12401 0052 0020     		movs	r0, #0
ARM GAS  /tmp/ccPv3rzq.s 			page 349


 12402 0054 FFF7FEFF 		bl	print_tab
 12403              	.LVL1442:
 206:src/display.c **** 	print(' ');
 12404              		.loc 1 206 2 view .LVU4006
 12405 0058 3046     		mov	r0, r6
 12406 005a 0021     		movs	r1, #0
 12407 005c FFF7FEFF 		bl	print_line
 12408              	.LVL1443:
 207:src/display.c **** 	while (*q != '\0') {
 12409              		.loc 1 207 2 view .LVU4007
 12410 0060 2020     		movs	r0, #32
 12411 0062 FFF7FEFF 		bl	print
 12412              	.LVL1444:
 208:src/display.c **** 	  int c = *q;
 12413              		.loc 1 208 2 view .LVU4008
 208:src/display.c **** 	  int c = *q;
 12414              		.loc 1 208 8 view .LVU4009
 208:src/display.c **** 	  int c = *q;
 12415              		.loc 1 208 9 is_stmt 0 view .LVU4010
 12416 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 208:src/display.c **** 	  int c = *q;
 12417              		.loc 1 208 8 view .LVU4011
 12418 0068 73B9     		cbnz	r3, .L1258
 12419              	.L1261:
 217:src/display.c ****       }
 12420              		.loc 1 217 2 is_stmt 1 view .LVU4012
 12421              	.LBE708:
 222:src/display.c **** 
 12422              		.loc 1 222 1 is_stmt 0 view .LVU4013
 12423 006a BDE87040 		pop	{r4, r5, r6, lr}
 12424              		.cfi_remember_state
 12425              		.cfi_restore 14
 12426              		.cfi_restore 6
 12427              		.cfi_restore 5
 12428              		.cfi_restore 4
 12429              		.cfi_def_cfa_offset 0
 12430              	.LVL1445:
 12431              	.LBB709:
 217:src/display.c ****       }
 12432              		.loc 1 217 2 view .LVU4014
 12433 006e 0020     		movs	r0, #0
 12434 0070 FFF7FEBF 		b	print_advance
 12435              	.LVL1446:
 12436              	.L1275:
 12437              		.cfi_restore_state
 12438              	.LBB705:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12439              		.loc 1 212 4 view .LVU4015
 12440 0074 FFF7FEFF 		bl	print
 12441              	.LVL1447:
 213:src/display.c **** 	    ++q;
 12442              		.loc 1 213 4 is_stmt 1 view .LVU4016
 214:src/display.c **** 	  ++q;
 12443              		.loc 1 214 6 view .LVU4017
 213:src/display.c **** 	    ++q;
 12444              		.loc 1 213 7 is_stmt 0 view .LVU4018
 12445 0078 6D2C     		cmp	r4, #109
ARM GAS  /tmp/ccPv3rzq.s 			page 350


 214:src/display.c **** 	  ++q;
 12446              		.loc 1 214 6 view .LVU4019
 12447 007a 0CBF     		ite	eq
 12448 007c 691C     		addeq	r1, r5, #1
 12449              	.LVL1448:
 214:src/display.c **** 	  ++q;
 12450              		.loc 1 214 6 view .LVU4020
 12451 007e 2946     		movne	r1, r5
 12452              	.LVL1449:
 12453              	.L1260:
 215:src/display.c **** 	}
 12454              		.loc 1 215 4 is_stmt 1 view .LVU4021
 12455              	.LBE705:
 208:src/display.c **** 	  int c = *q;
 12456              		.loc 1 208 9 is_stmt 0 view .LVU4022
 12457 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12458              	.LBB706:
 215:src/display.c **** 	}
 12459              		.loc 1 215 4 view .LVU4023
 12460 0082 4D1C     		adds	r5, r1, #1
 12461              	.LVL1450:
 215:src/display.c **** 	}
 12462              		.loc 1 215 4 view .LVU4024
 12463              	.LBE706:
 208:src/display.c **** 	  int c = *q;
 12464              		.loc 1 208 8 is_stmt 1 view .LVU4025
 12465 0084 002B     		cmp	r3, #0
 12466 0086 F0D0     		beq	.L1261
 12467              	.LVL1451:
 12468              	.L1258:
 12469              	.LBB707:
 209:src/display.c **** 	  if (c >= 'A')
 12470              		.loc 1 209 4 view .LVU4026
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12471              		.loc 1 210 4 view .LVU4027
 211:src/display.c **** 	  print(c);
 12472              		.loc 1 211 6 view .LVU4028
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12473              		.loc 1 212 4 view .LVU4029
 12474 0088 43F06004 		orr	r4, r3, #96
 12475              	.LVL1452:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12476              		.loc 1 212 4 view .LVU4030
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12477              		.loc 1 210 7 is_stmt 0 view .LVU4031
 12478 008c 402B     		cmp	r3, #64
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12479              		.loc 1 212 4 view .LVU4032
 12480 008e 2046     		mov	r0, r4
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12481              		.loc 1 210 7 view .LVU4033
 12482 0090 F0DC     		bgt	.L1275
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12483              		.loc 1 212 4 view .LVU4034
 12484 0092 1846     		mov	r0, r3
 12485 0094 FFF7FEFF 		bl	print
 12486              	.LVL1453:
ARM GAS  /tmp/ccPv3rzq.s 			page 351


 213:src/display.c **** 	    ++q;
 12487              		.loc 1 213 4 is_stmt 1 view .LVU4035
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12488              		.loc 1 212 4 is_stmt 0 view .LVU4036
 12489 0098 2946     		mov	r1, r5
 12490 009a F1E7     		b	.L1260
 12491              	.LVL1454:
 12492              	.L1262:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12493              		.loc 1 212 4 view .LVU4037
 12494              	.LBE707:
 187:src/display.c ****     if (*q == 'X') {
 12495              		.loc 1 187 9 view .LVU4038
 12496 009c 114D     		ldr	r5, .L1277+20
 12497              	.L1254:
 12498              	.LVL1455:
 197:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12499              		.loc 1 197 7 is_stmt 1 view .LVU4039
 12500 009e 2946     		mov	r1, r5
 12501 00a0 3046     		mov	r0, r6
 12502 00a2 FFF7FEFF 		bl	message
 12503              	.LVL1456:
 198:src/display.c ****     }
 12504              		.loc 1 198 7 view .LVU4040
 198:src/display.c ****     }
 12505              		.loc 1 198 26 is_stmt 0 view .LVU4041
 12506 00a6 0C4B     		ldr	r3, .L1277+8
 198:src/display.c ****     }
 12507              		.loc 1 198 31 view .LVU4042
 12508 00a8 003C     		subs	r4, r4, #0
 198:src/display.c ****     }
 12509              		.loc 1 198 26 view .LVU4043
 12510 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 198:src/display.c ****     }
 12511              		.loc 1 198 31 view .LVU4044
 12512 00ac 18BF     		it	ne
 12513 00ae 0124     		movne	r4, #1
 12514              	.LVL1457:
 198:src/display.c ****     }
 12515              		.loc 1 198 26 view .LVU4045
 12516 00b0 64F30412 		bfi	r2, r4, #4, #1
 12517 00b4 DA75     		strb	r2, [r3, #23]
 201:src/display.c ****       if (*q == 'X')
 12518              		.loc 1 201 5 is_stmt 1 view .LVU4046
 201:src/display.c ****       if (*q == 'X')
 12519              		.loc 1 201 9 is_stmt 0 view .LVU4047
 12520 00b6 0A4B     		ldr	r3, .L1277+16
 201:src/display.c ****       if (*q == 'X')
 12521              		.loc 1 201 8 view .LVU4048
 12522 00b8 1B68     		ldr	r3, [r3]
 12523 00ba 002B     		cmp	r3, #0
 12524 00bc C6D1     		bne	.L1276
 12525              	.LVL1458:
 12526              	.L1251:
 201:src/display.c ****       if (*q == 'X')
 12527              		.loc 1 201 8 view .LVU4049
 12528              	.LBE709:
ARM GAS  /tmp/ccPv3rzq.s 			page 352


 222:src/display.c **** 
 12529              		.loc 1 222 1 view .LVU4050
 12530 00be 70BD     		pop	{r4, r5, r6, pc}
 12531              	.LVL1459:
 12532              	.L1274:
 12533              	.LBB710:
 203:src/display.c ****       else {
 12534              		.loc 1 203 2 is_stmt 1 view .LVU4051
 12535 00c0 3146     		mov	r1, r6
 12536 00c2 0022     		movs	r2, #0
 12537              	.LBE710:
 222:src/display.c **** 
 12538              		.loc 1 222 1 is_stmt 0 view .LVU4052
 12539 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12540              		.cfi_restore 14
 12541              		.cfi_restore 6
 12542              		.cfi_restore 5
 12543              		.cfi_restore 4
 12544              		.cfi_def_cfa_offset 0
 12545              	.LVL1460:
 12546              	.LBB711:
 203:src/display.c ****       else {
 12547              		.loc 1 203 2 view .LVU4053
 12548 00c8 6420     		movs	r0, #100
 12549 00ca FFF7FEBF 		b	print_reg
 12550              	.LVL1461:
 12551              	.L1278:
 203:src/display.c ****       else {
 12552              		.loc 1 203 2 view .LVU4054
 12553 00ce 00BF     		.align	2
 12554              	.L1277:
 12555 00d0 00000000 		.word	Running
 12556 00d4 00000000 		.word	.LANCHOR21
 12557 00d8 00000000 		.word	StateWhileOn
 12558 00dc 00000000 		.word	DispMsg
 12559 00e0 00000000 		.word	Tracing
 12560 00e4 00000000 		.word	.LANCHOR20
 12561              	.LBE711:
 12562              		.cfi_endproc
 12563              	.LFE1:
 12565              		.section	.text.stopwatch_message,"ax",%progbits
 12566              		.align	1
 12567              		.p2align 2,,3
 12568              		.global	stopwatch_message
 12569              		.syntax unified
 12570              		.thumb
 12571              		.thumb_func
 12572              		.fpu fpv4-sp-d16
 12574              	stopwatch_message:
 12575              	.LVL1462:
 12576              	.LFB47:
3576:src/display.c **** 	reset_disp();
 12577              		.loc 1 3576 7 is_stmt 1 view -0
 12578              		.cfi_startproc
 12579              		@ args = 0, pretend = 0, frame = 0
 12580              		@ frame_needed = 0, uses_anonymous_args = 0
3577:src/display.c **** 	set_dot(DEG);
ARM GAS  /tmp/ccPv3rzq.s 			page 353


 12581              		.loc 1 3577 2 view .LVU4056
3576:src/display.c **** 	reset_disp();
 12582              		.loc 1 3576 7 is_stmt 0 view .LVU4057
 12583 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12584              		.cfi_def_cfa_offset 24
 12585              		.cfi_offset 3, -24
 12586              		.cfi_offset 4, -20
 12587              		.cfi_offset 5, -16
 12588              		.cfi_offset 6, -12
 12589              		.cfi_offset 7, -8
 12590              		.cfi_offset 14, -4
3576:src/display.c **** 	reset_disp();
 12591              		.loc 1 3576 7 view .LVU4058
 12592 0002 1446     		mov	r4, r2
 12593 0004 0F46     		mov	r7, r1
 12594 0006 1D46     		mov	r5, r3
 12595 0008 0646     		mov	r6, r0
3577:src/display.c **** 	set_dot(DEG);
 12596              		.loc 1 3577 2 view .LVU4059
 12597 000a FFF7FEFF 		bl	reset_disp
 12598              	.LVL1463:
3578:src/display.c **** 	set_digits_string( str2, 0 );
 12599              		.loc 1 3578 2 is_stmt 1 view .LVU4060
 12600 000e 8C20     		movs	r0, #140
 12601 0010 FFF7FEFF 		bl	set_dot
 12602              	.LVL1464:
3579:src/display.c **** 	State2.disp_small = force_small;
 12603              		.loc 1 3579 2 view .LVU4061
 12604 0014 3846     		mov	r0, r7
 12605 0016 0021     		movs	r1, #0
 12606 0018 FFF7FEFF 		bl	set_digits_string
 12607              	.LVL1465:
3580:src/display.c **** 	if( exponent!=NULL ) {
 12608              		.loc 1 3580 2 view .LVU4062
3580:src/display.c **** 	if( exponent!=NULL ) {
 12609              		.loc 1 3580 20 is_stmt 0 view .LVU4063
 12610 001c 0B4B     		ldr	r3, .L1290
 12611 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12612 0020 64F3C712 		bfi	r2, r4, #7, #1
 12613              	.LVL1466:
3580:src/display.c **** 	if( exponent!=NULL ) {
 12614              		.loc 1 3580 20 view .LVU4064
 12615 0024 9A75     		strb	r2, [r3, #22]
3581:src/display.c **** 	  stopwatch_exponent(exponent);
 12616              		.loc 1 3581 2 is_stmt 1 view .LVU4065
3581:src/display.c **** 	  stopwatch_exponent(exponent);
 12617              		.loc 1 3581 4 is_stmt 0 view .LVU4066
 12618 0026 55B1     		cbz	r5, .L1280
 12619              	.LVL1467:
 12620              	.LBB712:
 12621              	.LBB713:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12622              		.loc 1 3569 9 is_stmt 1 view .LVU4067
 12623 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12624              		.loc 1 3569 2 is_stmt 0 view .LVU4068
 12625 002a 41B1     		cbz	r1, .L1280
ARM GAS  /tmp/ccPv3rzq.s 			page 354


3568:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12626              		.loc 1 3568 6 view .LVU4069
 12627 002c 6C24     		movs	r4, #108
 12628              	.LVL1468:
 12629              	.L1281:
3570:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12630              		.loc 1 3570 4 is_stmt 1 view .LVU4070
 12631              	.LBB714:
 12632              	.LBI714:
 339:src/display.c ****   if (res) *res++ = ch;
 12633              		.loc 1 339 14 view .LVU4071
 12634              	.LBB715:
 340:src/display.c ****   else	set_dig(base, ch);
 12635              		.loc 1 340 3 view .LVU4072
 341:src/display.c ****   return res;
 12636              		.loc 1 341 8 view .LVU4073
 12637 002e 2046     		mov	r0, r4
 12638 0030 FFF7FEFF 		bl	set_dig
 12639              	.LVL1469:
 342:src/display.c **** }
 12640              		.loc 1 342 3 view .LVU4074
 342:src/display.c **** }
 12641              		.loc 1 342 3 is_stmt 0 view .LVU4075
 12642              	.LBE715:
 12643              	.LBE714:
3571:src/display.c **** 	}
 12644              		.loc 1 3571 4 is_stmt 1 view .LVU4076
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12645              		.loc 1 3569 9 is_stmt 0 view .LVU4077
 12646 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12647              	.LVL1470:
3571:src/display.c **** 	}
 12648              		.loc 1 3571 6 view .LVU4078
 12649 0038 0734     		adds	r4, r4, #7
 12650              	.LVL1471:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12651              		.loc 1 3569 23 is_stmt 1 view .LVU4079
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12652              		.loc 1 3569 9 view .LVU4080
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12653              		.loc 1 3569 2 is_stmt 0 view .LVU4081
 12654 003a 0029     		cmp	r1, #0
 12655 003c F7D1     		bne	.L1281
 12656              	.LVL1472:
 12657              	.L1280:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12658              		.loc 1 3569 2 view .LVU4082
 12659              	.LBE713:
 12660              	.LBE712:
3584:src/display.c **** 	finish_display();
 12661              		.loc 1 3584 2 is_stmt 1 view .LVU4083
 12662 003e 3046     		mov	r0, r6
 12663 0040 FFF7FEFF 		bl	set_status
 12664              	.LVL1473:
3585:src/display.c ****       }
 12665              		.loc 1 3585 2 view .LVU4084
3586:src/display.c **** 
ARM GAS  /tmp/ccPv3rzq.s 			page 355


 12666              		.loc 1 3586 7 is_stmt 0 view .LVU4085
 12667 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12668              		.cfi_restore 14
 12669              		.cfi_restore 7
 12670              		.cfi_restore 6
 12671              		.cfi_restore 5
 12672              		.cfi_restore 4
 12673              		.cfi_restore 3
 12674              		.cfi_def_cfa_offset 0
 12675              	.LVL1474:
3585:src/display.c ****       }
 12676              		.loc 1 3585 2 view .LVU4086
 12677 0048 FFF7FEBF 		b	finish_display
 12678              	.LVL1475:
 12679              	.L1291:
 12680              		.align	2
 12681              	.L1290:
 12682 004c 00000000 		.word	StateWhileOn
 12683              		.cfi_endproc
 12684              	.LFE47:
 12686              		.section	.rodata.str1.4,"aMS",%progbits,1
 12687              		.align	2
 12688              	.LC43:
 12689 0000 06316306 		.ascii	"\0061c\006\006\000"
 12689      0600
 12690 0006 0000     		.align	2
 12691              	.LC44:
 12692 0008 756E0600 		.ascii	"un\006\000"
 12693              		.align	2
 12694              	.LC45:
 12695 000c 736D00   		.ascii	"sm\000"
 12696              		.set	CSWTCH.356,CSWTCH.354
 12697              		.global	DIGITS
 12698              		.comm	IntMaxWindow,4,4
 12699              		.comm	JustDisplayed,4,4
 12700              		.comm	ShowRPN,4,4
 12701              		.global	no_status_top
 12702              		.comm	DispPlot,2,2
 12703              		.comm	DispMsg,4,4
 12704              		.global	SvnRevision
 12705              		.section	.rodata
 12706              		.align	2
 12707              		.set	.LANCHOR14,. + 0
 12708              	.LC20:
 12709 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12709      22002E00 
 12709      00
 12710 0009 000000   		.space	3
 12711              	.LC24:
 12712 000c 33344306 		.ascii	"34C\0063.3\222T\000"
 12712      332E3392 
 12712      5400
 12713 0016 00000000 		.space	4
 12714 001a 0000     		.space	2
 12715              	.LC46:
 12716 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12716      696E6700 
ARM GAS  /tmp/ccPv3rzq.s 			page 356


 12716      50726F47 
 12716      72614D6D 
 12716      00
 12717 002d 000000   		.space	3
 12718              	.LC47:
 12719 0030 446F6D61 		.ascii	"Domain\000\000"
 12719      696E0000 
 12720              	.LC48:
 12721 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12721      74696D65 
 12721      006F7220 
 12721      64417445 
 12721      00
 12722 0049 000000   		.space	3
 12723              	.LC49:
 12724 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12724      66696E65 
 12724      64004F70 
 12724      2D434F64 
 12724      4500
 12725 005e 0000     		.space	2
 12726              	.LC50:
 12727 0060 2B9F0000 		.ascii	"+\237\000\000"
 12728              	.LC51:
 12729 0064 2D9F0000 		.ascii	"-\237\000\000"
 12730              	.LC52:
 12731 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12731      75636800 
 12731      4C416245 
 12731      4C00
 12732 0076 0000     		.space	2
 12733              	.LC53:
 12734 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12734      67616C00 
 12734      4F504572 
 12734      4174696F 
 12734      6E00
 12735 008a 0000     		.space	2
 12736              	.LC54:
 12737 008c 4F757420 		.ascii	"Out of range\000\000"
 12737      6F662072 
 12737      616E6765 
 12737      0000
 12738 009a 0000     		.space	2
 12739              	.LC55:
 12740 009c 42616420 		.ascii	"Bad digit\000\000"
 12740      64696769 
 12740      740000
 12741 00a7 00       		.space	1
 12742              	.LC56:
 12743 00a8 546F6F20 		.ascii	"Too long\000\000"
 12743      6C6F6E67 
 12743      0000
 12744 00b2 0000     		.space	2
 12745              	.LC57:
 12746 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12746      69730046 
ARM GAS  /tmp/ccPv3rzq.s 			page 357


 12746      754C4C00 
 12747              	.LC58:
 12748 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12748      6B00434C 
 12748      41534800 
 12749              	.LC59:
 12750 00cc 42616420 		.ascii	"Bad mode\000\000"
 12750      6D6F6465 
 12750      0000
 12751 00d6 0000     		.space	2
 12752              	.LC60:
 12753 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12753      06060673 
 12753      697A6500 
 12753      746F6F20 
 12753      534D6D41 
 12754 00ef 00       		.space	1
 12755              	.LC61:
 12756 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12756      66657700 
 12756      64417441 
 12756      20506F69 
 12756      6E745300 
 12757              	.LC62:
 12758 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12758      6C696400 
 12758      50617261 
 12758      4D6D4574 
 12758      457200
 12759 0117 00       		.space	1
 12760              	.LC63:
 12761 0118 492F4F00 		.ascii	"I/O\000\000"
 12761      00
 12762 011d 000000   		.space	3
 12763              	.LC64:
 12764 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12764      6C696400 
 12764      64417441 
 12764      00
 12765 012d 000000   		.space	3
 12766              	.LC65:
 12767 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12767      65005072 
 12767      6F744563 
 12767      74456400 
 12768              	.LC66:
 12769 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12769      6F6F7400 
 12769      466F756E 
 12769      6400
 12770 014e 0000     		.space	2
 12771              	.LC67:
 12772 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12772      6978004D 
 12772      6D49534D 
 12772      6D417443 
 12772      4800
ARM GAS  /tmp/ccPv3rzq.s 			page 358


 12773 0162 0000     		.space	2
 12774              	.LC68:
 12775 0164 53696E67 		.ascii	"Singular\000\000"
 12775      756C6172 
 12775      0000
 12776 016e 0000     		.space	2
 12777              	.LC69:
 12778 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12778      68206973 
 12778      0046754C 
 12778      4C00
 12779 017e 0000     		.space	2
 12780              	.LC70:
 12781 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12781      72797374 
 12781      616C0049 
 12781      6E537461 
 12781      4C4C4564 
 12782 0195 000000   		.space	3
 12783              	.LC71:
 12784 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12784      6576656E 
 12784      20726567 
 12784      00666F72 
 12784      20436F4D 
 12785 01b2 0000     		.space	2
 12786              	.LC72:
 12787 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12787      5800
 12788              		.section	.bss.DecimalMode,"aw",%nobits
 12789              		.set	.LANCHOR1,. + 0
 12792              	DecimalMode:
 12793 0000 00       		.space	1
 12794              		.section	.bss.SeparatorMode,"aw",%nobits
 12795              		.set	.LANCHOR0,. + 0
 12798              	SeparatorMode:
 12799 0000 00       		.space	1
 12800              		.section	.bss.no_status_top,"aw",%nobits
 12801              		.align	1
 12802              		.set	.LANCHOR15,. + 0
 12805              	no_status_top:
 12806 0000 0000     		.space	2
 12807              		.section	.rodata.CSWTCH.354,"a"
 12808              		.align	2
 12809              		.set	.LANCHOR8,. + 0
 12812              	CSWTCH.354:
 12813 0000 02000000 		.word	2
 12814 0004 08000000 		.word	8
 12815 0008 0A000000 		.word	10
 12816 000c 10000000 		.word	16
 12817              		.section	.rodata.CSWTCH.380,"a"
 12818              		.align	2
 12819              		.set	.LANCHOR13,. + 0
 12822              	CSWTCH.380:
 12823 0000 00000000 		.word	.LC43
 12824 0004 08000000 		.word	.LC44
 12825 0008 0C000000 		.word	.LC45
ARM GAS  /tmp/ccPv3rzq.s 			page 359


 12826              		.section	.rodata.DIGITS,"a"
 12827              		.align	2
 12828              		.set	.LANCHOR9,. + 0
 12831              	DIGITS:
 12832 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12832      34353637 
 12832      38394142 
 12832      43444546 
 12832      00
 12833              		.section	.rodata.S7_ERROR,"a"
 12834              		.align	2
 12835              		.set	.LANCHOR20,. + 0
 12838              	S7_ERROR:
 12839 0000 4572726F 		.ascii	"Error\000"
 12839      7200
 12840              		.section	.rodata.S7_INF,"a"
 12841              		.align	2
 12842              		.set	.LANCHOR4,. + 0
 12845              	S7_INF:
 12846 0000 496E6669 		.ascii	"Infinity\000"
 12846      6E697479 
 12846      00
 12847              		.section	.rodata.S7_NaN,"a"
 12848              		.align	2
 12849              		.set	.LANCHOR3,. + 0
 12852              	S7_NaN:
 12853 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12853      6E754D6D 
 12853      45726963 
 12853      00
 12854              		.section	.rodata.S7_STEP,"a"
 12855              		.align	2
 12856              		.set	.LANCHOR16,. + 0
 12859              	S7_STEP:
 12860 0000 53744550 		.ascii	"StEP \000"
 12860      2000
 12861              		.section	.rodata.S7_fract_EQ,"a"
 12862              		.align	2
 12863              		.set	.LANCHOR6,. + 0
 12866              	S7_fract_EQ:
 12867 0000 203D2000 		.ascii	" = \000"
 12868              		.section	.rodata.S7_fract_GT,"a"
 12869              		.align	2
 12870              		.set	.LANCHOR7,. + 0
 12873              	S7_fract_GT:
 12874 0000 20477400 		.ascii	" Gt\000"
 12875              		.section	.rodata.S7_fract_LT,"a"
 12876              		.align	2
 12877              		.set	.LANCHOR5,. + 0
 12880              	S7_fract_LT:
 12881 0000 204C7400 		.ascii	" Lt\000"
 12882              		.section	.rodata.S_SURE,"a"
 12883              		.align	2
 12884              		.set	.LANCHOR18,. + 0
 12887              	S_SURE:
 12888 0000 53757265 		.ascii	"Sure?\000"
 12888      3F00
ARM GAS  /tmp/ccPv3rzq.s 			page 360


 12889              		.section	.rodata.SvnRevision,"a"
 12890              		.align	2
 12891              		.set	.LANCHOR17,. + 0
 12894              	SvnRevision:
 12895 0000 38362020 		.ascii	"86  "
 12896              		.section	.rodata.digtbl,"a"
 12897              		.align	2
 12898              		.set	.LANCHOR2,. + 0
 12901              	digtbl:
 12902 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12902      02421252 
 12902      2D000000 
 12902      00000000 
 12902      00
 12903 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12903      00000017 
 12903      01000000 
 12903      00
 12904 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12904      28000000 
 12904      0020664B 
 12904      00000010 
 12905 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12905      5E5B3973 
 12905      77497F7B 
 12905      00000612 
 12905      0300787D 
 12906 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12906      673D240F 
 12906      75266C6D 
 12906      6F7C7914 
 12906      73362F00 
 12907 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12907      161F7674 
 12907      6735040F 
 12907      75266915 
 12907      177C7914 
 12908 0076 000F003B 		.ascii	"\000\017\000;"
 12909              		.section	.rodata.error_table.9326,"a"
 12910              		.align	2
 12911              		.set	.LANCHOR21,. + 0
 12914              	error_table.9326:
 12915 0000 1C000000 		.word	.LC46
 12916 0004 30000000 		.word	.LC47
 12917 0008 38000000 		.word	.LC48
 12918 000c 4C000000 		.word	.LC49
 12919 0010 60000000 		.word	.LC50
 12920 0014 64000000 		.word	.LC51
 12921 0018 68000000 		.word	.LC52
 12922 001c 78000000 		.word	.LC53
 12923 0020 8C000000 		.word	.LC54
 12924 0024 9C000000 		.word	.LC55
 12925 0028 A8000000 		.word	.LC56
 12926 002c B4000000 		.word	.LC57
 12927 0030 C0000000 		.word	.LC58
 12928 0034 CC000000 		.word	.LC59
 12929 0038 D8000000 		.word	.LC60
ARM GAS  /tmp/ccPv3rzq.s 			page 361


 12930 003c F0000000 		.word	.LC61
 12931 0040 04010000 		.word	.LC62
 12932 0044 18010000 		.word	.LC63
 12933 0048 20010000 		.word	.LC64
 12934 004c 30010000 		.word	.LC65
 12935 0050 40010000 		.word	.LC66
 12936 0054 50010000 		.word	.LC67
 12937 0058 64010000 		.word	.LC68
 12938 005c 70010000 		.word	.LC69
 12939 0060 80010000 		.word	.LC70
 12940 0064 98010000 		.word	.LC71
 12941 0068 B4010000 		.word	.LC72
 12942              		.section	.rodata.libname,"a"
 12943              		.align	2
 12944              		.set	.LANCHOR19,. + 0
 12947              	libname:
 12948 0000 72414D6D 		.ascii	"rAMm\000"
 12948      00
 12949 0005 4C696220 		.ascii	"Lib \000"
 12949      00
 12950 000a 42757020 		.ascii	"Bup \000"
 12950      00
 12951 000f 726F4D6D 		.ascii	"roMm\000"
 12951      00
 12952              		.section	.rodata.shift_chars.9433,"a"
 12953              		.align	2
 12954              		.set	.LANCHOR12,. + 0
 12957              	shift_chars.9433:
 12958 0000 20111213 		.ascii	" \021\022\023"
 12959              		.section	.rodata.small_dots.9634,"a"
 12960              		.align	2
 12961              		.set	.LANCHOR11,. + 0
 12964              	small_dots.9634:
 12965 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12965      07E12C06 
 12965      07E12C06 
 12965      06
 12966              		.section	.rodata.small_minus.9633,"a"
 12967              		.align	2
 12968              		.set	.LANCHOR10,. + 0
 12971              	small_minus.9633:
 12972 0000 07C22D06 		.ascii	"\007\302-\006"
 12973              		.text
 12974              	.Letext0:
 12975              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 12976              		.file 3 "dmcp/dmcp.h"
 12977              		.file 4 "src/decNumber/decContext.h"
 12978              		.file 5 "src/decNumber/decNumber.h"
 12979              		.file 6 "src/decNumber/decimal64.h"
 12980              		.file 7 "src/decNumber/decimal128.h"
 12981              		.file 8 "src/xeq.h"
 12982              		.file 9 "src/data.h"
 12983              		.file 10 "src/storage.h"
 12984              		.file 11 "src/display.h"
 12985              		.file 12 "src/consts.h"
 12986              		.file 13 "src/stats.h"
 12987              		.file 14 "src/revision.h"
ARM GAS  /tmp/ccPv3rzq.s 			page 362


 12988              		.file 15 "src/printer.h"
 12989              		.file 16 "src/charset7.h"
 12990              		.file 17 "src/lcd.h"
 12991              		.file 18 "src/decn.h"
 12992              		.file 19 "src/alpha.h"
 12993              		.file 20 "src/int.h"
ARM GAS  /tmp/ccPv3rzq.s 			page 363


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccPv3rzq.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccPv3rzq.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccPv3rzq.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccPv3rzq.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccPv3rzq.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccPv3rzq.s:220    .text.set_dig:000000000000002c $d
     /tmp/ccPv3rzq.s:225    .text.hms_render:0000000000000000 $t
     /tmp/ccPv3rzq.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/ccPv3rzq.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/ccPv3rzq.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccPv3rzq.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccPv3rzq.s:559    .text.hms_step:0000000000000000 $t
     /tmp/ccPv3rzq.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/ccPv3rzq.s:627    .text.hms_step:0000000000000034 $d
     /tmp/ccPv3rzq.s:632    .text.s_s_sized:0000000000000000 $t
     /tmp/ccPv3rzq.s:639    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccPv3rzq.s:1046   .text.s_s_sized:0000000000000178 $d
     /tmp/ccPv3rzq.s:1052   .text.set_exp:0000000000000000 $t
     /tmp/ccPv3rzq.s:1059   .text.set_exp:0000000000000000 set_exp
     /tmp/ccPv3rzq.s:1345   .text.set_exp:00000000000000f8 $d
     /tmp/ccPv3rzq.s:1351   .text.set_annunciators:0000000000000000 $t
     /tmp/ccPv3rzq.s:1358   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccPv3rzq.s:1652   .text.set_annunciators:00000000000000bc $d
     /tmp/ccPv3rzq.s:1662   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccPv3rzq.s:1669   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccPv3rzq.s:1716   .text.set_decimal.part.0:0000000000000000 $t
     /tmp/ccPv3rzq.s:1723   .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/ccPv3rzq.s:1770   .text.set_digits_string:0000000000000000 $t
     /tmp/ccPv3rzq.s:1777   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccPv3rzq.s:1889   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccPv3rzq.s:1893   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccPv3rzq.s:1900   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccPv3rzq.s:2023   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/ccPv3rzq.s:2030   .text.set_x_hms:0000000000000000 $t
     /tmp/ccPv3rzq.s:2037   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccPv3rzq.s:2558   .text.set_x_hms:00000000000001c4 $d
     /tmp/ccPv3rzq.s:2567   .text.set_x_fract:0000000000000000 $t
     /tmp/ccPv3rzq.s:2574   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccPv3rzq.s:3003   .text.set_x_fract:0000000000000194 $d
     /tmp/ccPv3rzq.s:3017   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccPv3rzq.s:3018   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccPv3rzq.s:3021   .text.carry_overflow:0000000000000000 $t
     /tmp/ccPv3rzq.s:3028   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccPv3rzq.s:3158   .text.carry_overflow:000000000000006c $d
     /tmp/ccPv3rzq.s:3167   .text.set_int_x:0000000000000000 $t
     /tmp/ccPv3rzq.s:3174   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccPv3rzq.s:3932   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.354:0000000000000000 CSWTCH.356
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccPv3rzq.s:3944   .text.set_int_x:0000000000000360 $t
     /tmp/ccPv3rzq.s:4044   .text.set_int_x:00000000000003b8 $d
     /tmp/ccPv3rzq.s:4050   .text.getdig:0000000000000000 $t
     /tmp/ccPv3rzq.s:4058   .text.getdig:0000000000000000 getdig
     /tmp/ccPv3rzq.s:4078   .text.getdig:0000000000000008 $d
     /tmp/ccPv3rzq.s:4083   .text.dot:0000000000000000 $t
ARM GAS  /tmp/ccPv3rzq.s 			page 364


     /tmp/ccPv3rzq.s:4091   .text.dot:0000000000000000 dot
     /tmp/ccPv3rzq.s:4114   .text.std_round_fix:0000000000000000 $t
     /tmp/ccPv3rzq.s:4122   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccPv3rzq.s:4279   .text.std_round_fix:0000000000000078 $d
     /tmp/ccPv3rzq.s:4284   .text.pixel_length:0000000000000000 $t
     /tmp/ccPv3rzq.s:4292   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccPv3rzq.s:4383   .text.set_status:0000000000000000 $t
     /tmp/ccPv3rzq.s:4390   .text.set_status:0000000000000000 set_status
     /tmp/ccPv3rzq.s:4463   .text.set_status:0000000000000038 $d
     /tmp/ccPv3rzq.s:4468   .text.set_x_dn:0000000000000000 $t
     /tmp/ccPv3rzq.s:4476   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccPv3rzq.s:5268   .text.set_x_dn:0000000000000364 $d
     /tmp/ccPv3rzq.s:5276   .text.set_x_dn:0000000000000378 $t
     /tmp/ccPv3rzq.s:5429   .text.set_x_dn:0000000000000424 $d
     /tmp/ccPv3rzq.s:5435   .text.set_x_dn:000000000000042e $t
     /tmp/ccPv3rzq.s:5461   .text.set_x_dn:000000000000045a $d
     /tmp/ccPv3rzq.s:5467   .text.set_x_dn:0000000000000464 $t
     /tmp/ccPv3rzq.s:6078   .text.set_x_dn:00000000000006ec $d
     /tmp/ccPv3rzq.s:6092   .text.set_x_dn:0000000000000700 $t
     /tmp/ccPv3rzq.s:6812   .text.set_x_dn:00000000000009c8 $d
     /tmp/ccPv3rzq.s:6822   .text.set_x:0000000000000000 $t
     /tmp/ccPv3rzq.s:6829   .text.set_x:0000000000000000 set_x
     /tmp/ccPv3rzq.s:6897   .text.format_reg:0000000000000000 $t
     /tmp/ccPv3rzq.s:6905   .text.format_reg:0000000000000000 format_reg
     /tmp/ccPv3rzq.s:7024   .text.format_reg:0000000000000064 $d
     /tmp/ccPv3rzq.s:7030   .text.set_status_right:0000000000000000 $t
     /tmp/ccPv3rzq.s:7037   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccPv3rzq.s:7181   .text.set_status_right:000000000000006c $d
     /tmp/ccPv3rzq.s:7186   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccPv3rzq.s:7193   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccPv3rzq.s:7318   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccPv3rzq.s:7323   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccPv3rzq.s:7381   .text.annunciators:0000000000000000 $t
     /tmp/ccPv3rzq.s:7388   .text.annunciators:0000000000000000 annunciators
     /tmp/ccPv3rzq.s:7834   .text.annunciators:0000000000000204 $d
     /tmp/ccPv3rzq.s:7852   .text.annunciators:0000000000000238 $t
     /tmp/ccPv3rzq.s:8521   .text.annunciators:0000000000000554 $d
     /tmp/ccPv3rzq.s:8539   .text.annunciators:0000000000000590 $t
     /tmp/ccPv3rzq.s:8647   .text.annunciators:0000000000000604 $d
     /tmp/ccPv3rzq.s:8659   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccPv3rzq.s:8720   .text.display:0000000000000000 $t
     /tmp/ccPv3rzq.s:8728   .text.display:0000000000000000 display
     /tmp/ccPv3rzq.s:9405   .text.display:0000000000000300 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000004 DispMsg
     /tmp/ccPv3rzq.s:9425   .text.display:000000000000033c $t
     /tmp/ccPv3rzq.s:10029  .text.display:00000000000005d0 $d
     /tmp/ccPv3rzq.s:10047  .text.display:000000000000060c $t
     /tmp/ccPv3rzq.s:10906  .text.display:000000000000091c $d
     /tmp/ccPv3rzq.s:10924  .text.display:000000000000093c $t
     /tmp/ccPv3rzq.s:11834  .text.display:0000000000000cfc $d
     /tmp/ccPv3rzq.s:11855  .text.display:0000000000000d40 $t
     /tmp/ccPv3rzq.s:12087  .text.display:0000000000000e28 $d
     /tmp/ccPv3rzq.s:12093  .text.frozen_display:0000000000000000 $t
     /tmp/ccPv3rzq.s:12101  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccPv3rzq.s:12131  .text.frozen_display:000000000000001c $d
ARM GAS  /tmp/ccPv3rzq.s 			page 365


     /tmp/ccPv3rzq.s:12136  .text.message:0000000000000000 $t
     /tmp/ccPv3rzq.s:12144  .text.message:0000000000000000 message
     /tmp/ccPv3rzq.s:12273  .text.message:0000000000000060 $d
     /tmp/ccPv3rzq.s:12281  .text.error_message:0000000000000000 $t
     /tmp/ccPv3rzq.s:12289  .text.error_message:0000000000000000 error_message
     /tmp/ccPv3rzq.s:12555  .text.error_message:00000000000000d0 $d
     /tmp/ccPv3rzq.s:12566  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccPv3rzq.s:12574  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccPv3rzq.s:12682  .text.stopwatch_message:000000000000004c $d
     /tmp/ccPv3rzq.s:12687  .rodata.str1.4:0000000000000000 $d
     /tmp/ccPv3rzq.s:12812  .rodata.CSWTCH.354:0000000000000000 CSWTCH.354
     /tmp/ccPv3rzq.s:12831  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccPv3rzq.s:12805  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccPv3rzq.s:12894  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccPv3rzq.s:12706  .rodata:0000000000000000 $d
     /tmp/ccPv3rzq.s:12792  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccPv3rzq.s:12793  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccPv3rzq.s:12798  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccPv3rzq.s:12799  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccPv3rzq.s:12801  .bss.no_status_top:0000000000000000 $d
     /tmp/ccPv3rzq.s:12808  .rodata.CSWTCH.354:0000000000000000 $d
     /tmp/ccPv3rzq.s:12818  .rodata.CSWTCH.380:0000000000000000 $d
     /tmp/ccPv3rzq.s:12822  .rodata.CSWTCH.380:0000000000000000 CSWTCH.380
     /tmp/ccPv3rzq.s:12827  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccPv3rzq.s:12834  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccPv3rzq.s:12838  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccPv3rzq.s:12841  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccPv3rzq.s:12845  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccPv3rzq.s:12848  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccPv3rzq.s:12852  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccPv3rzq.s:12855  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccPv3rzq.s:12859  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccPv3rzq.s:12862  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccPv3rzq.s:12866  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccPv3rzq.s:12869  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccPv3rzq.s:12873  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccPv3rzq.s:12876  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccPv3rzq.s:12880  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccPv3rzq.s:12883  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccPv3rzq.s:12887  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccPv3rzq.s:12890  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccPv3rzq.s:12897  .rodata.digtbl:0000000000000000 $d
     /tmp/ccPv3rzq.s:12901  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccPv3rzq.s:12910  .rodata.error_table.9326:0000000000000000 $d
     /tmp/ccPv3rzq.s:12914  .rodata.error_table.9326:0000000000000000 error_table.9326
     /tmp/ccPv3rzq.s:12943  .rodata.libname:0000000000000000 $d
     /tmp/ccPv3rzq.s:12947  .rodata.libname:0000000000000000 libname
     /tmp/ccPv3rzq.s:12953  .rodata.shift_chars.9433:0000000000000000 $d
     /tmp/ccPv3rzq.s:12957  .rodata.shift_chars.9433:0000000000000000 shift_chars.9433
     /tmp/ccPv3rzq.s:12960  .rodata.small_dots.9634:0000000000000000 $d
     /tmp/ccPv3rzq.s:12964  .rodata.small_dots.9634:0000000000000000 small_dots.9634
     /tmp/ccPv3rzq.s:12967  .rodata.small_minus.9633:0000000000000000 $d
     /tmp/ccPv3rzq.s:12971  .rodata.small_minus.9633:0000000000000000 small_minus.9633

UNDEFINED SYMBOLS
main_ram
ARM GAS  /tmp/ccPv3rzq.s 			page 366


set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
get_trig_mode
draw_dot
get_user_flag
StateWhileOn
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
ARM GAS  /tmp/ccPv3rzq.s 			page 367


dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
reset_7_segment
finish_7_segment
finish_display
ProgFree
argcmds
WasDataEntry
scopy_char
op_r2p
current_catalogue
catcmd
get_const
multicmds
getprog
prt
find_label_from
alpha_rcl_s
findmultilbl
free_mem
free_flash
copyreg
sigma_val
getX
packed_from_number
global_regs
StackBase
monfuncs
SizeStatRegs
set_NaN
do_conv
local_regs
slen
print_tab
print_line
print
print_advance
print_reg
Running
Tracing

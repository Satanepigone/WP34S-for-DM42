ARM GAS  /tmp/ccAnlOT7.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccAnlOT7.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status(const char *);
  38:src/display.c **** static void set_status_right(const char *);
  39:src/display.c **** static void set_status_graphic(const unsigned char *);
  40:src/display.c **** 
  41:src/display.c **** const char *DispMsg; // What to display in message area
  42:src/display.c **** 
  43:src/display.c **** short int DispPlot;
  44:src/display.c **** #ifndef REALBUILD
  45:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  46:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  47:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  48:src/display.c **** char forceDispPlot;
  49:src/display.c **** #endif
  50:src/display.c **** 
  51:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  52:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  53:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  54:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  55:src/display.c **** 
  56:src/display.c **** /* Message strings
  57:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  58:src/display.c ****  * are for the upper dot matrix line.
  59:src/display.c ****  */
  60:src/display.c **** static const char S_SURE[] = "Sure?";
  61:src/display.c **** 
  62:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  63:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  64:src/display.c **** #ifndef REALBUILD
  65:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  66:src/display.c **** #endif
  67:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  68:src/display.c **** #ifndef REALBUILD
  69:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  70:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  71:src/display.c **** #endif
  72:src/display.c **** 
  73:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  74:src/display.c **** #ifndef REALBUILD
  75:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  76:src/display.c **** #endif
  77:src/display.c **** 
  78:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  79:src/display.c **** static const char S7_fract_LT[] = " Lt";
  80:src/display.c **** static const char S7_fract_GT[] = " Gt";
  81:src/display.c **** 
  82:src/display.c **** static const char libname[][5] = {
  83:src/display.c **** 	"rAMm", "Lib ", "Bup ",
  84:src/display.c **** #ifndef REALBUILD
  85:src/display.c **** 	"roMm"
  86:src/display.c **** #endif
  87:src/display.c **** };
ARM GAS  /tmp/ccAnlOT7.s 			page 3


  88:src/display.c **** 
  89:src/display.c **** #ifndef REALBUILD
  90:src/display.c **** static const char libname_text[][10] = {
  91:src/display.c **** 	" R a m ", " L i b ", " B u p ",	" R o m "
  92:src/display.c **** };
  93:src/display.c **** static const char libname_shorttext[][5] = {
  94:src/display.c **** 	"Ram", "Lib", "Bup", "Rom"
  95:src/display.c **** };
  96:src/display.c **** #endif
  97:src/display.c **** 
  98:src/display.c **** 
  99:src/display.c **** /* Set the separator and decimal mode globals
 100:src/display.c ****  */
 101:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 101 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 102:src/display.c **** 	// Separators used by various modes
 103:src/display.c **** 	if (UState.fraccomma) {
  34              		.loc 1 103 2 view .LVU1
  35              		.loc 1 103 6 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 104:src/display.c **** 		SeparatorMode = SEP_DOT;
  37              		.loc 1 104 17 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  39              		.loc 1 103 6 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  42              		.loc 1 103 5 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 101:src/display.c **** 	// Separators used by various modes
  44              		.loc 1 101 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  49              		.loc 1 103 5 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 104 3 is_stmt 1 view .LVU8
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 105 15 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 106:src/display.c **** 	}
 107:src/display.c **** 	else {
 108:src/display.c **** 		SeparatorMode = SEP_COMMA;
 109:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 110:src/display.c **** 	}
 111:src/display.c **** 	if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 111 7 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 105 15 view .LVU11
ARM GAS  /tmp/ccAnlOT7.s 			page 4


  57 0018 0124     		movs	r4, #1
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 104 17 view .LVU12
  59 001a 0225     		movs	r5, #2
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 105 15 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 111 5 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 104 17 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 105:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 105 3 is_stmt 1 view .LVU16
  67              		.loc 1 111 2 view .LVU17
  68              		.loc 1 111 5 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 111 62 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 112:src/display.c **** 		SeparatorMode = SEP_NONE;
  75              		.loc 1 112 3 is_stmt 1 view .LVU20
  76              		.loc 1 112 17 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 113:src/display.c **** }
  80              		.loc 1 113 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  89              		.loc 1 108 3 is_stmt 1 view .LVU23
 109:src/display.c **** 	}
  90              		.loc 1 109 15 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  92              		.loc 1 111 7 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 109:src/display.c **** 	}
  94              		.loc 1 109 15 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  96              		.loc 1 108 17 view .LVU27
  97 0038 0125     		movs	r5, #1
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  98              		.loc 1 111 5 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 100              		.loc 1 108 17 view .LVU29
ARM GAS  /tmp/ccAnlOT7.s 			page 5


 101 003c 0D70     		strb	r5, [r1]
 109:src/display.c **** 	}
 102              		.loc 1 109 3 is_stmt 1 view .LVU30
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 103              		.loc 1 111 2 view .LVU31
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 104              		.loc 1 111 5 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
 107              		.loc 1 111 19 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 113 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 114:src/display.c **** 
 115:src/display.c **** 
 116:src/display.c **** /* Table of error messages.
 117:src/display.c ****  * These consist of a double string.  The first is displayed in the
 118:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 119:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 120:src/display.c ****  */
 121:src/display.c **** void error_message(const unsigned int e) 
 122:src/display.c **** {
 123:src/display.c **** #define MSG1(top) top "\0"
 124:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 125:src/display.c **** 
 126:src/display.c **** 	// NB: this MUST be in the same order as the error #defines in errors.h
 127:src/display.c **** 	static const char *const error_table[] = 
 128:src/display.c **** 	{
 129:src/display.c **** 		// manually get the order correct!
 130:src/display.c **** 		MSG2("Running", "ProGraMm"),
 131:src/display.c **** 		MSG1("Domain"),
 132:src/display.c **** 		MSG2("Bad time", "or dAtE"),
 133:src/display.c **** 		MSG2("Undefined", "Op-COdE"),
ARM GAS  /tmp/ccAnlOT7.s 			page 6


 134:src/display.c **** 		MSG1("+\237"),
 135:src/display.c **** 		MSG1("-\237"),
 136:src/display.c **** 		MSG2("No such", "LAbEL"),
 137:src/display.c **** 		MSG2("Illegal", "OPErAtion"),
 138:src/display.c **** 		MSG1("Out of range"),
 139:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 140:src/display.c **** 		MSG2("Bad digit", "1"),
 141:src/display.c **** 		MSG2("Too long", "1"),
 142:src/display.c **** #else
 143:src/display.c **** 		MSG1("Bad digit"),
 144:src/display.c **** 		MSG1("Too long"),
 145:src/display.c **** #endif
 146:src/display.c **** 		MSG2("RAM is", "FuLL"),
 147:src/display.c **** 		MSG2("Stack", "CLASH"),
 148:src/display.c **** 		MSG1("Bad mode"),
 149:src/display.c **** 		MSG2("Word\006\006\006size", "too SMmALL"),
 150:src/display.c **** 		MSG2("Too few", "dAtA PointS"),
 151:src/display.c **** 		MSG2("Invalid", "ParaMmEtEr"),
 152:src/display.c **** 		MSG1("I/O"),
 153:src/display.c **** 		MSG2("Invalid", "dAtA"),
 154:src/display.c **** 		MSG2("Write", "ProtEctEd"),
 155:src/display.c **** 		MSG2("No root", "Found"),
 156:src/display.c **** 		MSG2("Matrix", "MmISMmAtCH"),
 157:src/display.c **** 		MSG1("Singular"),
 158:src/display.c **** 		MSG2("Flash is", "FuLL"),
 159:src/display.c **** 		MSG2("No crystal", "InStaLLEd"),
 160:src/display.c **** #ifndef SHIFT_EXPONENT
 161:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 162:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 163:src/display.c **** 		MSG2("Too\007\304 small", "1"),
 164:src/display.c **** #     else
 165:src/display.c **** 		MSG2("Too small", "1"),
 166:src/display.c **** #     endif
 167:src/display.c **** 		MSG2("Too big", "1"),
 168:src/display.c **** #  else
 169:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 170:src/display.c **** 		MSG1("Too\007\304 small"),
 171:src/display.c **** #     else
 172:src/display.c **** 		MSG1("Too small"),
 173:src/display.c **** #     endif
 174:src/display.c **** 		MSG1("Too big"),
 175:src/display.c **** #  endif
 176:src/display.c **** #endif
 177:src/display.c **** 		MSG2("\004 \035", "X"),		// Integral ~
 178:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 179:src/display.c **** 		MSG2("Interrupted", "X"),
 180:src/display.c **** #endif
 181:src/display.c **** 	};
 182:src/display.c **** #undef MSG1
 183:src/display.c **** #undef MSG2
 184:src/display.c **** #ifndef REALBUILD
 185:src/display.c **** 	static const char *const error_table_text[] =
 186:src/display.c **** 	{
 187:src/display.c **** 		" P r o g r a m ",
 188:src/display.c **** 		"",
 189:src/display.c **** 		" o r   d a t e ",
 190:src/display.c **** 		" O p - c o d e ",
ARM GAS  /tmp/ccAnlOT7.s 			page 7


 191:src/display.c **** 		"",
 192:src/display.c **** 		"",
 193:src/display.c **** 		" L a b e l ",
 194:src/display.c **** 		" O p e r a t i o n ",
 195:src/display.c **** 		"",
 196:src/display.c **** 		"",
 197:src/display.c **** 		"",
 198:src/display.c **** 		" F u l l ",
 199:src/display.c **** 		" C l a s h ",
 200:src/display.c **** 		"",
 201:src/display.c **** 		" T o o   s m a l l ",
 202:src/display.c **** 		" D a t a   p o i n t s ",
 203:src/display.c **** 		" P a r a m e t e r ",
 204:src/display.c **** 		"",
 205:src/display.c **** 		" D a t a ",
 206:src/display.c **** 		" P r o t e c t e d ",
 207:src/display.c **** 		" F o u n d ",
 208:src/display.c **** 		" M i s m a t c h ",
 209:src/display.c **** 		"",
 210:src/display.c **** 		" F u l l ",
 211:src/display.c **** 		" I n s t a l l e d ",
 212:src/display.c **** #ifndef SHIFT_EXPONENT
 213:src/display.c **** 		"",
 214:src/display.c **** 		"",
 215:src/display.c **** #endif
 216:src/display.c **** 		"",
 217:src/display.c **** 	};
 218:src/display.c **** #endif
 219:src/display.c **** 
 220:src/display.c **** 	if (e != ERR_NONE || Running) {
 221:src/display.c **** 		const char *p = error_table[e];
 222:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 223:src/display.c **** 		if (*q == '\0')
 224:src/display.c **** 			q = S7_ERROR;
 225:src/display.c **** 		if (*q == 'X') {
 226:src/display.c **** 			DispMsg = p;
 227:src/display.c **** 			frozen_display();
 228:src/display.c **** 		}
 229:src/display.c **** 		else {
 230:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 231:src/display.c **** 			if (*q == '1')
 232:src/display.c **** 				q = CNULL;
 233:src/display.c **** #endif
 234:src/display.c **** 			message(p, q);
 235:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 236:src/display.c **** #ifndef REALBUILD
 237:src/display.c **** 			scopy(LastDisplayedNumber, error_table_text[e]);
 238:src/display.c **** #endif
 239:src/display.c **** 		}
 240:src/display.c **** #ifdef INFRARED
 241:src/display.c **** 		if (Tracing) {
 242:src/display.c **** 			if (*q == 'X')
 243:src/display.c **** 				print_reg(regX_idx, p, 0);
 244:src/display.c **** 			else {
 245:src/display.c **** 				print_tab(0);
 246:src/display.c **** 				print_line(p, 0);
 247:src/display.c **** 				print(' ');
ARM GAS  /tmp/ccAnlOT7.s 			page 8


 248:src/display.c **** 				while (*q != '\0') {
 249:src/display.c **** 					int c = *q;
 250:src/display.c **** 					if (c >= 'A')
 251:src/display.c **** 						c |= 0x60; // ASCII lower case
 252:src/display.c **** 					print(c);
 253:src/display.c **** 					if (c == 'm' /* || c == 'w' */)
 254:src/display.c **** 						++q;
 255:src/display.c **** 					++q;
 256:src/display.c **** 				}
 257:src/display.c **** 				print_advance( 0 );
 258:src/display.c **** 			}
 259:src/display.c **** 		}
 260:src/display.c **** #endif
 261:src/display.c **** 	}
 262:src/display.c **** }
 263:src/display.c **** 
 264:src/display.c **** 
 265:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 266:src/display.c ****  * display.
 267:src/display.c ****  */
 268:src/display.c **** #define D_TOP 64
 269:src/display.c **** #define D_TL 32
 270:src/display.c **** #define D_TR 8
 271:src/display.c **** #define D_MIDDLE 16
 272:src/display.c **** #define D_BL 4
 273:src/display.c **** #define D_BR 1
 274:src/display.c **** #define D_BOTTOM 2
 275:src/display.c **** 
 276:src/display.c **** #include "charset7.h"
 277:src/display.c **** 
 278:src/display.c **** #ifndef REALBUILD
 279:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 280:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 281:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 282:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 283:src/display.c **** 
 284:src/display.c **** static void set_mant_sign_dot()
 285:src/display.c **** {
 286:src/display.c **** 	LastDisplayedNumber[0]='-';
 287:src/display.c **** 	set_dot(MANT_SIGN);
 288:src/display.c **** }
 289:src/display.c **** 
 290:src/display.c **** static void clr_mant_sign_dot()
 291:src/display.c **** {
 292:src/display.c **** 	LastDisplayedNumber[0]=' ';
 293:src/display.c **** 	clr_dot(MANT_SIGN);
 294:src/display.c **** }
 295:src/display.c **** 
 296:src/display.c **** static void set_exp_sign_dot()
 297:src/display.c **** {
 298:src/display.c **** 	LastDisplayedExponent[0]='-';
 299:src/display.c **** 	set_dot(EXP_SIGN);
 300:src/display.c **** }
 301:src/display.c **** 
 302:src/display.c **** static void clr_exp_sign_dot()
 303:src/display.c **** {
 304:src/display.c **** 	LastDisplayedExponent[0]=' ';
ARM GAS  /tmp/ccAnlOT7.s 			page 9


 305:src/display.c **** 	clr_dot(EXP_SIGN);
 306:src/display.c **** }
 307:src/display.c **** 
 308:src/display.c **** #else
 309:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 310:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 311:src/display.c **** 
 312:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 313:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 314:src/display.c **** 
 315:src/display.c **** #endif
 316:src/display.c **** 
 317:src/display.c **** #ifndef REALBUILD
 318:src/display.c **** int getdig(int ch)
 319:src/display.c **** #else
 320:src/display.c **** static int getdig(int ch)
 321:src/display.c **** #endif
 322:src/display.c **** {
 323:src/display.c **** 	// perform index lookup
 324:src/display.c **** 	return digtbl[ch&0xff];
 325:src/display.c **** }
 326:src/display.c **** 
 327:src/display.c **** void dot(int n, int on) {
 328:src/display.c **** 	if (on)	set_dot(n);
 329:src/display.c **** 	else	clr_dot(n);
 330:src/display.c **** }
 331:src/display.c **** 
 332:src/display.c **** 
 333:src/display.c **** /* Set the decimal point *after* the indicated digit
 334:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 335:src/display.c ****  * of decimal.
 336:src/display.c ****  */
 337:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 338:src/display.c **** 	if (res) {
 339:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 340:src/display.c **** 	} else {
 341:src/display.c **** 		set_dot(posn+7);
 342:src/display.c **** 		if (decimal != DECIMAL_DOT)
 343:src/display.c **** 			set_dot(posn+8);
 344:src/display.c **** #ifndef REALBUILD
 345:src/display.c **** 	LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 346:src/display.c **** #endif
 347:src/display.c **** 	}
 348:src/display.c **** 	return res;
 349:src/display.c **** }
 350:src/display.c **** 
 351:src/display.c **** /* Set the digit group separator *before* the specified digit.
 352:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 353:src/display.c ****  * sep argument.
 354:src/display.c ****  */
 355:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 356:src/display.c **** 	if (sep == SEP_NONE)
 357:src/display.c **** 		return res;
 358:src/display.c **** 	if (res) {
 359:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 360:src/display.c **** 		else *res++ = '.';
 361:src/display.c **** 	} else {
ARM GAS  /tmp/ccAnlOT7.s 			page 10


 362:src/display.c **** 		posn -= SEGS_PER_DIGIT;
 363:src/display.c **** 		set_dot(posn+7);
 364:src/display.c **** 		if (sep == SEP_COMMA)
 365:src/display.c **** 			set_dot(posn+8);
 366:src/display.c **** #ifndef REALBUILD
 367:src/display.c **** 		LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 368:src/display.c **** #endif
 369:src/display.c **** 	}
 370:src/display.c **** 	return res;
 371:src/display.c **** }
 372:src/display.c **** 
 373:src/display.c **** /* Set a digit in positions [base, base+6] */
 374:src/display.c **** static void set_dig(int base, int ch)
 375:src/display.c **** {
 136              		.loc 1 375 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 376:src/display.c **** 	int i;
 140              		.loc 1 376 2 view .LVU36
 377:src/display.c **** 	int c = getdig(ch);
 141              		.loc 1 377 2 view .LVU37
 142              	.LBB128:
 143              	.LBI128:
 318:src/display.c **** #else
 144              		.loc 1 318 5 view .LVU38
 145              	.LBB129:
 324:src/display.c **** }
 146              		.loc 1 324 2 view .LVU39
 324:src/display.c **** }
 147              		.loc 1 324 15 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 324:src/display.c **** }
 149              		.loc 1 324 18 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE129:
 152              	.LBE128:
 378:src/display.c **** #ifndef REALBUILD
 379:src/display.c **** 	if(base<SEGS_EXP_BASE)
 153              		.loc 1 379 4 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 375:src/display.c **** 	int i;
 155              		.loc 1 375 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB131:
 163              	.LBB130:
 324:src/display.c **** }
 164              		.loc 1 324 15 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 324:src/display.c **** }
 167              		.loc 1 324 15 view .LVU45
ARM GAS  /tmp/ccAnlOT7.s 			page 11


 168              	.LBE130:
 169              	.LBE131:
 170              		.loc 1 379 2 is_stmt 1 view .LVU46
 171              		.loc 1 379 4 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 380:src/display.c **** 		LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 380 3 is_stmt 1 view .LVU48
 174              		.loc 1 380 28 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 380 37 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 380 28 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 380 37 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 380 37 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 381:src/display.c **** 	else
 382:src/display.c **** 		LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 383:src/display.c **** #endif
 384:src/display.c **** 	for (i=6; i>=0; i--)
 385:src/display.c **** 	{
 386:src/display.c **** //		dot(base, c & (1 << i));
 387:src/display.c **** 		if (c & (1 << i))
 388:src/display.c **** 			set_dot(base);
 196              		.loc 1 388 4 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 389:src/display.c **** 		else
 390:src/display.c **** 			clr_dot(base);
 391:src/display.c **** 		base++;
 199              		.loc 1 391 3 is_stmt 1 view .LVU55
 384:src/display.c **** 	{
 200              		.loc 1 384 18 view .LVU56
 384:src/display.c **** 	{
 201              		.loc 1 384 2 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 384:src/display.c **** 	{
 204              		.loc 1 384 2 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 388:src/display.c **** 		else
 208              		.loc 1 388 4 is_stmt 1 view .LVU59
ARM GAS  /tmp/ccAnlOT7.s 			page 12


 390:src/display.c **** 		base++;
 209              		.loc 1 390 4 view .LVU60
 387:src/display.c **** 			set_dot(base);
 210              		.loc 1 387 7 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 387:src/display.c **** 			set_dot(base);
 212              		.loc 1 387 6 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 387:src/display.c **** 			set_dot(base);
 216              		.loc 1 387 3 is_stmt 1 view .LVU63
 387:src/display.c **** 			set_dot(base);
 217              		.loc 1 387 6 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 390:src/display.c **** 		base++;
 219              		.loc 1 390 4 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 391 3 is_stmt 1 view .LVU66
 384:src/display.c **** 	{
 223              		.loc 1 384 18 view .LVU67
 384:src/display.c **** 	{
 224              		.loc 1 384 2 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 384:src/display.c **** 	{
 227              		.loc 1 384 2 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 392:src/display.c **** 	}
 393:src/display.c **** }
 231              		.loc 1 393 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 382:src/display.c **** #endif
 235              		.loc 1 382 3 is_stmt 1 view .LVU71
 382:src/display.c **** #endif
 236              		.loc 1 382 45 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 382:src/display.c **** #endif
 238              		.loc 1 382 51 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 382:src/display.c **** #endif
 240              		.loc 1 382 30 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 382:src/display.c **** #endif
 242              		.loc 1 382 45 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 382:src/display.c **** #endif
 246              		.loc 1 382 51 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
ARM GAS  /tmp/ccAnlOT7.s 			page 13


 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 394:src/display.c **** 
 395:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 396:src/display.c **** 	if (res) *res++ = ch;
 397:src/display.c **** 	else	set_dig(base, ch);
 398:src/display.c **** 	return res;
 399:src/display.c **** }
 400:src/display.c **** 
 401:src/display.c **** 
 402:src/display.c **** static void set_digits_string(const char *msg, int j) {
 403:src/display.c **** 	for (; *msg != '\0'; msg++) {
 404:src/display.c **** 		if (*msg == '.' || *msg == ',')
 405:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 406:src/display.c **** 		else {
 407:src/display.c **** 			set_dig_s(j, *msg, CNULL);
 408:src/display.c **** 			j += SEGS_PER_DIGIT;
 409:src/display.c **** 		}
 410:src/display.c **** 	}
 411:src/display.c **** }
 412:src/display.c **** 
 413:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 414:src/display.c **** 	int i;
 415:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 416:src/display.c **** 
 417:src/display.c **** 	for (i=0; i<n && msg[i] != '\0'; i++)
 418:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** /* Force the exponent display
 422:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 423:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 424:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 425:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 426:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 427:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 428:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 429:src/display.c ****  */
ARM GAS  /tmp/ccAnlOT7.s 			page 14


 430:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 431:src/display.c **** 	union {
 432:src/display.c **** 		char buf[4];
 433:src/display.c **** 		int i;
 434:src/display.c **** 	} u;
 435:src/display.c **** 	int negative;
 436:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 437:src/display.c **** 	int thousands;
 438:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 439:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
 440:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 441:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
 442:src/display.c **** #  else
 443:src/display.c **** 	const int show_large_exponent = 1;
 444:src/display.c **** #  endif
 445:src/display.c **** #else
 446:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 447:src/display.c **** 	int thousands;
 448:src/display.c **** #  endif
 449:src/display.c **** 	const int show_large_exponent = 0;
 450:src/display.c **** #endif
 451:src/display.c **** 
 452:src/display.c **** 	negative = flags & 2;
 453:src/display.c **** 	if (exp < 0) {
 454:src/display.c **** 		negative = 1;
 455:src/display.c **** 		exp = -exp;
 456:src/display.c **** 	}
 457:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 458:src/display.c **** 	thousands = exp / 1000;
 459:src/display.c **** #endif
 460:src/display.c **** 	if (res) {
 461:src/display.c **** #ifdef INCLUDE_YREG_CODE
 462:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 463:src/display.c **** 		if (thousands != 0) {
 464:src/display.c **** #else
 465:src/display.c **** 		if (exp > 999) {
 466:src/display.c **** #endif
 467:src/display.c **** 			if (!negative) *res++ = ':'; // Separator for large +ve exponents
 468:src/display.c **** 			// No exponent separator for large -ve exponents
 469:src/display.c **** 		}
 470:src/display.c **** 		else *res++ = 'e'; // Normal separator
 471:src/display.c **** #else
 472:src/display.c **** 		*res++ = 'e';
 473:src/display.c **** #endif
 474:src/display.c **** 		if (negative) *res++ = '-';
 475:src/display.c **** 	}
 476:src/display.c **** 	else {
 477:src/display.c **** 		if (negative) SET_EXP_SIGN;
 478:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 479:src/display.c **** 		if (thousands != 0) {
 480:src/display.c **** #else
 481:src/display.c **** 		if (exp > 999) {
 482:src/display.c **** #endif
 483:src/display.c **** 			if (!show_large_exponent
 484:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 485:src/display.c **** 			                         && (flags & 8) == 0
 486:src/display.c **** #endif
ARM GAS  /tmp/ccAnlOT7.s 			page 15


 487:src/display.c **** 			                                            ) {
 488:src/display.c **** #ifdef REALBUILD
 489:src/display.c **** 				u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 490:src/display.c **** #else
 491:src/display.c **** 				scopy(u.buf, "HIG"); // More portable code
 492:src/display.c **** #endif
 493:src/display.c **** 				goto no_number;
 494:src/display.c **** 			}
 495:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 496:src/display.c **** 			else {
 497:src/display.c **** 				exp -= thousands * 1000;
 498:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 499:src/display.c **** 				if (flags & 16) {
 500:src/display.c **** 					// Cut off the last three digits of the mantissa.
 501:src/display.c **** 					int i;
 502:src/display.c **** 
 503:src/display.c **** 					for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 504:src/display.c **** 						// Clear digits and separators
 505:src/display.c **** 						clr_dot(i);
 506:src/display.c **** 					set_dig(9 * SEGS_PER_DIGIT, '>');
 507:src/display.c **** 				}
 508:src/display.c **** #  endif
 509:src/display.c **** 				if (negative) {
 510:src/display.c **** 					CLR_EXP_SIGN;
 511:src/display.c **** 					set_dig(10 * SEGS_PER_DIGIT, '-');
 512:src/display.c **** 				}
 513:src/display.c **** 				set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 514:src/display.c **** 				flags = 1;
 515:src/display.c **** 			}
 516:src/display.c **** #endif
 517:src/display.c **** 		}
 518:src/display.c **** 	}
 519:src/display.c **** #ifdef REALBUILD
 520:src/display.c **** 	u.i = 0; // Smaller ARM code
 521:src/display.c **** #else
 522:src/display.c **** 	xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 523:src/display.c **** #endif
 524:src/display.c **** 	if (flags & 5) {
 525:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 526:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 527:src/display.c **** 		if (flags & 4) { // Pad exponent with spaces instead of zeros
 528:src/display.c **** 			int i;
 529:src/display.c **** 
 530:src/display.c **** 			for (i = 0; i < 2; ++i) {
 531:src/display.c **** 				if (u.buf[i] == '0')
 532:src/display.c **** 					u.buf[i] = ' ';
 533:src/display.c **** 				else
 534:src/display.c **** 					break;
 535:src/display.c **** 			}
 536:src/display.c **** 			if (i != 0 && negative) {
 537:src/display.c **** 				// Move minus sign to right in front of exponent
 538:src/display.c **** 				CLR_EXP_SIGN;
 539:src/display.c **** 				u.buf[i - 1] = '-';
 540:src/display.c **** 			}
 541:src/display.c **** 		}
 542:src/display.c **** #endif
 543:src/display.c **** 	}
ARM GAS  /tmp/ccAnlOT7.s 			page 16


 544:src/display.c **** 	else
 545:src/display.c **** 		num_arg(u.buf, exp);
 546:src/display.c **** no_number:
 547:src/display.c **** 	set_exp_digits_string(u.buf, res);
 548:src/display.c **** }
 549:src/display.c **** 
 550:src/display.c **** static void carry_overflow(void) {
 551:src/display.c **** 	const int base = SEGS_EXP_BASE;
 552:src/display.c **** 	int c;
 553:src/display.c **** 	unsigned int b;
 554:src/display.c **** 
 555:src/display.c **** 	// Figure out the base
 556:src/display.c **** 	switch (State2.smode) {
 557:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 558:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
 559:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
 560:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
 561:src/display.c **** 	default:	b = UState.int_base+1;	break;
 562:src/display.c **** 	}
 563:src/display.c **** 
 564:src/display.c **** 	// Display the base as the first exponent digit
 565:src/display.c **** 	if (b > 10 && b < 16)
 566:src/display.c **** 		SET_EXP_SIGN;
 567:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 568:src/display.c **** 	set_dig(base, c);
 569:src/display.c **** 
 570:src/display.c **** 	// Carry and overflow are the next two exponent digits if they are set
 571:src/display.c **** 	if (get_carry())
 572:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 573:src/display.c **** 	if (get_overflow())
 574:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 575:src/display.c **** }
 576:src/display.c **** 
 577:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res);
 578:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res);
 579:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 580:src/display.c **** // replace_char() isn't used or implemented unless HMS Y register display is enabled
 581:src/display.c **** static void replace_char(char *a, char b, char c) { }
 582:src/display.c **** #endif
 583:src/display.c **** 
 584:src/display.c **** /* Display the annunicator text line.
 585:src/display.c ****  * Care needs to be taken to keep things aligned.
 586:src/display.c ****  * Spaces are 5 pixels wide, \006 is a single pixel space.
 587:src/display.c ****  */
 588:src/display.c **** static void annunciators(void) {
 589:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 590:src/display.c **** 	char buf[42], *p = buf, *q="";
 591:src/display.c **** 	int n;
 592:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 593:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 594:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 595:src/display.c **** 	// that's set to 0 will be optimized away. This way it's easier to make a
 596:src/display.c **** 	// feature run-time configurable if needed.
 597:src/display.c **** #ifdef INCLUDE_YREG_CODE
 598:src/display.c **** #  ifdef YREG_ALWAYS_ON
 599:src/display.c **** 	const int yreg_enabled = 1;
 600:src/display.c **** #  else
ARM GAS  /tmp/ccAnlOT7.s 			page 17


 601:src/display.c **** 	const int yreg_enabled = UState.show_y;
 602:src/display.c **** #  endif
 603:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 604:src/display.c **** 	const int yreg_hms = 1;
 605:src/display.c **** #  else
 606:src/display.c **** 	const int yreg_hms = 0;
 607:src/display.c **** #  endif
 608:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 609:src/display.c **** 	const int yreg_fract = 1;
 610:src/display.c **** #  else
 611:src/display.c **** 	const int yreg_fract = 0;
 612:src/display.c **** #  endif
 613:src/display.c **** #else
 614:src/display.c **** 	const int yreg_enabled = 0;
 615:src/display.c **** 	const int yreg_hms = 0;
 616:src/display.c **** 	const int yreg_fract = 0;
 617:src/display.c **** #endif
 618:src/display.c **** #ifdef RP_PREFIX
 619:src/display.c **** 	const int rp_prefix = 1;
 620:src/display.c **** #else
 621:src/display.c **** 	const int rp_prefix = 0;
 622:src/display.c **** 	const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 623:src/display.c **** #endif
 624:src/display.c **** // Indicates whether font escape code is compiled in.
 625:src/display.c **** // This variable will always be set at compile time.
 626:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 627:src/display.c **** 	const int has_FONT_ESCAPE = 1;
 628:src/display.c **** #else
 629:src/display.c **** 	const int has_FONT_ESCAPE = 0;
 630:src/display.c **** #endif
 631:src/display.c **** 
 632:src/display.c **** 	xset(buf, '\0', sizeof(buf));
 633:src/display.c **** 
 634:src/display.c **** 	if (is_intmode()) {
 635:src/display.c **** #ifdef SHOW_STACK_SIZE
 636:src/display.c **** 		if (shift_char == ' ') {
 637:src/display.c **** 			*p++ = '\007';
 638:src/display.c **** 			*p++ = '\346';
 639:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 640:src/display.c **** 		}
 641:src/display.c **** 		else
 642:src/display.c **** #endif
 643:src/display.c **** 		{
 644:src/display.c **** 			*p++ = shift_char;
 645:src/display.c **** 			*p++ = '\006';
 646:src/display.c **** 		}
 647:src/display.c **** 
 648:src/display.c **** 		switch(int_mode()) {
 649:src/display.c **** 		default:
 650:src/display.c **** 		case MODE_2COMP:	q = "2c\006";		break;
 651:src/display.c **** 		case MODE_UNSIGNED:	q = "un\006";		break;
 652:src/display.c **** 		case MODE_1COMP:	q = "\0061c\006\006";	break;
 653:src/display.c **** 		case MODE_SGNMANT:	q = "sm";		break;
 654:src/display.c **** 		}
 655:src/display.c **** 		q = scopy(p, q);
 656:src/display.c **** 		*q++ = '\006';
 657:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
ARM GAS  /tmp/ccAnlOT7.s 			page 18


 658:src/display.c **** 
 659:src/display.c **** 		if (IntMaxWindow > 0) {
 660:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 661:src/display.c **** 			if (*q == '1')
 662:src/display.c **** 				n += 2;
 663:src/display.c **** 			if (q[1] == '1')
 664:src/display.c **** 				n += 2;
 665:src/display.c **** 			while (n-- > 0)
 666:src/display.c **** 				*p++ = '\006';
 667:src/display.c **** 
 668:src/display.c **** 			for (n = IntMaxWindow; n >= 0; n--)
 669:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 670:src/display.c **** 		}
 671:src/display.c **** 	}
 672:src/display.c **** 	else if (!yreg_enabled
 673:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 674:src/display.c **** 		 || shift_char != ' ' || State2.cmplx
 675:src/display.c **** #endif
 676:src/display.c **** 		 ) {
 677:src/display.c **** // The stack size indicator is displayed on the right if date mode indication is enabled
 678:src/display.c **** // because the 'D' in small font doesn't look good next to the date mode indicator.
 679:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 680:src/display.c **** 		if (shift_char == ' ') {
 681:src/display.c **** 			*p++ = '\007';
 682:src/display.c **** 			*p++ = '\342';
 683:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 684:src/display.c **** 			*p++ = '\007';
 685:src/display.c **** 			*p++ = '\344';
 686:src/display.c **** 			*p++ = (is_dblmode() ? 'D' : ' ');
 687:src/display.c **** 		}
 688:src/display.c **** 		else
 689:src/display.c **** #endif
 690:src/display.c **** 		if (shift_char != ' ' || !is_dblmode()) {
 691:src/display.c **** 			*p++ = shift_char;
 692:src/display.c **** 			*p++ = '\006';
 693:src/display.c **** 		}
 694:src/display.c **** 		else {
 695:src/display.c **** 			*p++ = 'D';
 696:src/display.c **** 		}
 697:src/display.c **** 
 698:src/display.c **** 		if (State2.cmplx) {
 699:src/display.c **** 			*p++ = ' ';
 700:src/display.c **** 			*p = '\024';
 701:src/display.c **** 			goto skip;
 702:src/display.c **** 		}
 703:src/display.c **** 		if (State2.arrow) {
 704:src/display.c **** 			*p++ = ' ';
 705:src/display.c **** 			*p = '\015';
 706:src/display.c **** 			goto skip;
 707:src/display.c **** 		}
 708:src/display.c **** 
 709:src/display.c **** 		if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 710:src/display.c **** 			if (State2.wascomplex) {
 711:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 712:src/display.c **** 			}
 713:src/display.c **** 			else if (rp_prefix) {
 714:src/display.c **** 				if (RectPolConv == 1) {
ARM GAS  /tmp/ccAnlOT7.s 			page 19


 715:src/display.c **** 					q = "\007\306<";
 716:src/display.c **** 				}
 717:src/display.c **** 				else {
 718:src/display.c **** 					q = "\007\306y";
 719:src/display.c **** 				}
 720:src/display.c **** 			}
 721:src/display.c **** 			p = scopy(buf, q);
 722:src/display.c **** 
 723:src/display.c **** 			goto display_yreg;
 724:src/display.c **** 		}
 725:src/display.c **** 
 726:src/display.c **** 		switch (UState.date_mode) {
 727:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 728:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 729:src/display.c **** 		case DATE_DMY:	q = "d.my\006\006";	break;
 730:src/display.c **** #endif
 731:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 732:src/display.c **** 		case DATE_YMD:	q = "y.md\006\006";	break;
 733:src/display.c **** #endif
 734:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 735:src/display.c **** 		case DATE_MDY:	q = "m.dy\006\006";	break;
 736:src/display.c **** #endif
 737:src/display.c **** #endif
 738:src/display.c **** 		default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 739:src/display.c **** 		}
 740:src/display.c **** 		p = scopy(p, q);
 741:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 742:src/display.c **** 		if (get_trig_mode() == TRIG_GRAD) {
 743:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 744:src/display.c **** 		}
 745:src/display.c **** #else
 746:src/display.c **** 		p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 747:src/display.c **** 		*p++ = '\007';
 748:src/display.c **** 		*p++ = '\342';
 749:src/display.c **** 		*p =  (UState.stack_depth ? ':' : '.');
 750:src/display.c **** #endif
 751:src/display.c **** 	}
 752:src/display.c **** 	else { // yreg_enabled
 753:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 754:src/display.c **** 		if (State2.cmplx) {
 755:src/display.c **** 			*p++ = '\007';
 756:src/display.c **** 			*p++ = '\344';
 757:src/display.c **** 			*p++ = shift_char;
 758:src/display.c **** 			q = "\024";
 759:src/display.c **** 		}
 760:src/display.c **** 		else if (shift_char != ' ') {
 761:src/display.c **** 			*p++ = '\007';
 762:src/display.c **** 			*p++ = '\307';
 763:src/display.c **** 			*p++ = shift_char;
 764:src/display.c **** 			goto no_copy;
 765:src/display.c **** 		}
 766:src/display.c **** 		else
 767:src/display.c **** #endif
 768:src/display.c **** 		if (State2.wascomplex) {
 769:src/display.c **** 			q = "\007\207i";
 770:src/display.c **** 		}
 771:src/display.c **** 		else if (rp_prefix && RectPolConv == 1) {
ARM GAS  /tmp/ccAnlOT7.s 			page 20


 772:src/display.c **** 			q = "\007\307<";
 773:src/display.c **** 		}
 774:src/display.c **** 		else if (rp_prefix && RectPolConv == 2) {
 775:src/display.c **** 			q = "\007\307y";
 776:src/display.c **** 		}
 777:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 778:src/display.c **** 		else if (get_trig_mode() == TRIG_GRAD) {
 779:src/display.c **** 			q = "\007\207\007";
 780:src/display.c **** 		}
 781:src/display.c **** #endif
 782:src/display.c **** 		else {
 783:src/display.c **** #ifndef SHOW_STACK_SIZE
 784:src/display.c **** 			q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 785:src/display.c **** #else
 786:src/display.c **** 			if (is_dblmode()) {
 787:src/display.c **** 				*p++ = '\007';
 788:src/display.c **** 				*p++ = '\342';
 789:src/display.c **** 				*p++ = (UState.stack_depth ? ':' : '.');
 790:src/display.c **** 				q = "\007\345D";
 791:src/display.c **** 			}
 792:src/display.c **** 			else {
 793:src/display.c **** 				q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 794:src/display.c **** 			}
 795:src/display.c **** #endif
 796:src/display.c **** 		}
 797:src/display.c **** 		p = scopy(p, q);
 798:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 799:src/display.c **** 	no_copy:
 800:src/display.c **** #endif
 801:src/display.c **** 
 802:src/display.c **** 		if (State2.arrow) {
 803:src/display.c **** 			scopy(p, "\007\204\006\015");
 804:src/display.c **** 		} else if (State2.runmode) {
 805:src/display.c **** 			decNumber y;
 806:src/display.c **** display_yreg:
 807:src/display.c **** 			/* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 808:src/display.c **** 			 * ShowRegister+1 would contain the complex component, however if the register being
 809:src/display.c **** 			 * examined is on the stack and there is a command line present, the stack will be lifted
 810:src/display.c **** 			 * after we execute so we need to show ShowRegister instead.
 811:src/display.c **** 			 */
 812:src/display.c **** 			getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 813:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 814:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 815:src/display.c **** 			if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 816:src/display.c **** 				if (yreg_hms && State2.hms) {
 817:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 818:src/display.c **** 
 819:src/display.c **** 					xset(buf, '\0', sizeof(buf));
 820:src/display.c **** 					UState.nothousands = 1;
 821:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 822:src/display.c **** 					UState.nothousands = saved_nothousands;
 823:src/display.c **** 					// First replace the '@' character with the degree symbol
 824:src/display.c **** 					// Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow space
 825:src/display.c **** 					// then remove the second symbol (") and the overflow or underflow signs,
 826:src/display.c **** 					// then remove the fractional part of the seconds.
 827:src/display.c **** 					p = "@\005 \006\"\0.\0";
 828:src/display.c **** 					while (*p) {
ARM GAS  /tmp/ccAnlOT7.s 			page 21


 829:src/display.c **** 						replace_char(buf, p[0], p[1]);
 830:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 831:src/display.c **** 							goto skip;
 832:src/display.c **** 						}
 833:src/display.c **** 						p += 2;
 834:src/display.c **** 					}
 835:src/display.c **** 					goto skip;
 836:src/display.c **** 				}
 837:src/display.c **** 				if (yreg_fract && UState.fract
 838:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 839:src/display.c **** 				    && !State2.cmplx
 840:src/display.c **** #endif
 841:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 842:src/display.c **** 				    && !(rp_prefix && RectPolConv == 1)
 843:src/display.c **** #endif
 844:src/display.c **** 				    && set_x_fract(&y, p)) {
 845:src/display.c **** 					char ltgteq;
 846:src/display.c **** 
 847:src/display.c **** 					q = find_char(buf, '\0') - 2;
 848:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 849:src/display.c **** 					ltgteq = *q;
 850:src/display.c **** 					switch (ltgteq) {
 851:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 852:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 853:src/display.c **** 					}
 854:src/display.c **** 					scopy(q, "\007\344?");
 855:src/display.c **** 					q[2] = ltgteq;
 856:src/display.c **** 
 857:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 858:src/display.c **** 						goto skip;
 859:src/display.c **** 					}
 860:src/display.c **** 					q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 861:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 862:src/display.c **** 						goto skip;
 863:src/display.c **** 					}
 864:src/display.c **** 					xset(p, '\0', sizeof(buf) - (p - buf));
 865:src/display.c **** 				}
 866:src/display.c **** 			}
 867:src/display.c **** 			for (n=DISPLAY_DIGITS; n>1; ) {
 868:src/display.c **** 				int extra_pixels;
 869:src/display.c **** 
 870:src/display.c **** 				set_x_dn(&y, p, &n);
 871:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 872:src/display.c **** 				if (extra_pixels <= 0)
 873:src/display.c **** 					break;
 874:src/display.c **** 
 875:src/display.c **** 				xset(p, '\0', n+10);
 876:src/display.c **** 
 877:src/display.c **** 				n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 878:src/display.c **** 			}
 879:src/display.c **** 		}
 880:src/display.c **** 	}
 881:src/display.c **** 
 882:src/display.c **** skip:	set_status(buf);
 883:src/display.c **** }
 884:src/display.c **** 
 885:src/display.c **** static void disp_x(const char *p) {
ARM GAS  /tmp/ccAnlOT7.s 			page 22


 886:src/display.c **** 	int i;
 887:src/display.c **** 	int gotdot = -1;
 888:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 889:src/display.c **** 	const
 890:src/display.c **** #endif
 891:src/display.c **** 	      int segs_per_digit = SEGS_PER_DIGIT;
 892:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 893:src/display.c **** 	int overflow_to_left = 0;
 894:src/display.c **** #endif
 895:src/display.c **** 
 896:src/display.c **** 	if (*p == '-') {
 897:src/display.c **** 		SET_MANT_SIGN;
 898:src/display.c **** 		p++;
 899:src/display.c **** 	}
 900:src/display.c **** 
 901:src/display.c **** 	if (is_intmode()) {
 902:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 903:src/display.c **** 			set_dig(i, *p);
 904:src/display.c **** 			i += SEGS_PER_DIGIT;
 905:src/display.c **** 		}
 906:src/display.c **** 		carry_overflow();
 907:src/display.c **** 	} else {
 908:src/display.c **** 		set_separator_decimal_modes();
 909:src/display.c **** 
 910:src/display.c **** 		i = 0;
 911:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 912:src/display.c **** 		if ( CmdLineDot > 1 ) {
 913:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 914:src/display.c **** 			const
 915:src/display.c **** #  endif
 916:src/display.c **** 			      int double_dot = 0;
 917:src/display.c **** 			int j;
 918:src/display.c **** 
 919:src/display.c **** 			for (j=0; p[j] != '\0'; j++) {
 920:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 921:src/display.c **** 					gotdot = j;
 922:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 923:src/display.c **** 					double_dot = (p[j+1] == '.');
 924:src/display.c **** #  endif
 925:src/display.c **** 				}
 926:src/display.c **** 			}
 927:src/display.c **** 			j -= DISPLAY_DIGITS + double_dot;
 928:src/display.c **** 			if (j > 0) {
 929:src/display.c **** 				p += j + 1;
 930:src/display.c **** 				i = SEGS_PER_DIGIT;
 931:src/display.c **** 				if (gotdot <= j) {
 932:src/display.c **** 					gotdot = 0;
 933:src/display.c **** 					if (double_dot)
 934:src/display.c **** 						p++;
 935:src/display.c **** 				}
 936:src/display.c **** 				else if (*p == '.') {
 937:src/display.c **** 					gotdot = 0;
 938:src/display.c **** 					p++;
 939:src/display.c **** 					if (!double_dot)
 940:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 941:src/display.c **** 				}
 942:src/display.c **** 				else gotdot = -1;
ARM GAS  /tmp/ccAnlOT7.s 			page 23


 943:src/display.c **** 				set_dig(0, '<');
 944:src/display.c **** 				overflow_to_left = 1;
 945:src/display.c **** 			}
 946:src/display.c **** 			else gotdot = -1;
 947:src/display.c **** 		}
 948:src/display.c **** #endif
 949:src/display.c **** 
 950:src/display.c **** 		for (; *p != '\0' && *p != 'E'
 951:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 952:src/display.c **** 		                               && *p != 'D'
 953:src/display.c **** #endif
 954:src/display.c **** 		                                           ; p++) {
 955:src/display.c **** 			if (*p == '.') {
 956:src/display.c **** 				if (gotdot < 0)
 957:src/display.c **** 					gotdot = i;
 958:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 959:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 960:src/display.c **** 				if ( *(p+1) == '.' || ( i != gotdot ) ) {
 961:src/display.c **** 					if ( *(p+1) == '.' ) {
 962:src/display.c **** 						p++;
 963:src/display.c **** 					}
 964:src/display.c **** #  else
 965:src/display.c **** 				if ( i != gotdot ) {
 966:src/display.c **** #  endif
 967:src/display.c **** 					set_dig(i, '/'); // put in a fraction separator
 968:src/display.c **** 					i += segs_per_digit;
 969:src/display.c **** 				}
 970:src/display.c **** 				else {
 971:src/display.c **** 					if ( CmdLineDot > 1 ) {
 972:src/display.c **** 						i += segs_per_digit;
 973:src/display.c **** 					}
 974:src/display.c **** 					else {
 975:src/display.c **** 						set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
 976:src/display.c **** //						i += SEGS_PER_DIGIT;
 977:src/display.c **** 					}
 978:src/display.c **** 				}
 979:src/display.c **** #else
 980:src/display.c **** 				if (i > 0)
 981:src/display.c **** 					set_decimal(i - segs_per_digit, DecimalMode, CNULL);
 982:src/display.c **** 				else {
 983:src/display.c **** 					set_dig(i, '0');
 984:src/display.c **** 					set_decimal(i, DecimalMode, CNULL);
 985:src/display.c **** 					i += segs_per_digit;
 986:src/display.c **** 				}
 987:src/display.c **** #endif
 988:src/display.c **** 			} else {
 989:src/display.c **** 				set_dig(i, *p);
 990:src/display.c **** 				i += segs_per_digit;
 991:src/display.c **** 			}
 992:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 993:src/display.c **** 			if (i == SEGS_EXP_BASE)
 994:src/display.c **** 				segs_per_digit = SEGS_PER_EXP_DIGIT;
 995:src/display.c **** #endif
 996:src/display.c **** 		}
 997:src/display.c **** 
 998:src/display.c **** 		/* Implement a floating comma */
 999:src/display.c **** 		if (gotdot < 0)
ARM GAS  /tmp/ccAnlOT7.s 			page 24


1000:src/display.c **** 			gotdot = i;
1001:src/display.c **** 		for (;;) {
1002:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
1003:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
1004:src/display.c **** 				break;
1005:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1006:src/display.c **** 			if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1007:src/display.c **** 				break;
1008:src/display.c **** #endif
1009:src/display.c **** 			set_separator(gotdot, SeparatorMode, CNULL);
1010:src/display.c **** 		}
1011:src/display.c **** 
1012:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1013:src/display.c **** 		if (*p == 'E' || *p == 'D') {
1014:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1015:src/display.c **** 			int flags = 8;
1016:src/display.c **** #  else
1017:src/display.c **** 			int flags = 12;
1018:src/display.c **** #  endif
1019:src/display.c **** 
1020:src/display.c **** 			if (*p == 'D')
1021:src/display.c **** 				flags |= 2;
1022:src/display.c **** 			if (i > 10 * SEGS_PER_DIGIT)
1023:src/display.c **** 				flags |= 16;
1024:src/display.c **** 			set_exp(s_to_i(p+1), flags, CNULL);
1025:src/display.c **** 		}
1026:src/display.c **** #else
1027:src/display.c **** 		if (*p == 'E') {
1028:src/display.c **** 			p++;
1029:src/display.c **** 			// set_exp() takes care of setting the exponent sign
1030:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1031:src/display.c **** 			set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1032:src/display.c **** #  else
1033:src/display.c **** 			set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1034:src/display.c **** #  endif
1035:src/display.c **** 		} 
1036:src/display.c **** #endif
1037:src/display.c **** 	}
1038:src/display.c **** }
1039:src/display.c **** 
1040:src/display.c **** const char DIGITS[] = "0123456789ABCDEF";
1041:src/display.c **** 
1042:src/display.c **** static void set_int_x(const long long int value, char *res) {
1043:src/display.c **** 	const int ws = word_size();
1044:src/display.c **** 	unsigned int b;
1045:src/display.c **** 	long long int vs = value;
1046:src/display.c **** 	unsigned long long int v;
1047:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1048:src/display.c **** 	int i, j, k;
1049:src/display.c **** 	int sign = 0;
1050:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1051:src/display.c **** 
1052:src/display.c **** 	switch (State2.smode) {
1053:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1054:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1055:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1056:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
ARM GAS  /tmp/ccAnlOT7.s 			page 25


1057:src/display.c **** 	default:	b = int_base();	break;
1058:src/display.c **** 	}
1059:src/display.c **** 
1060:src/display.c **** 	if (!res) {
1061:src/display.c **** 		IntMaxWindow = 0;
1062:src/display.c **** 		carry_overflow();
1063:src/display.c **** 	}
1064:src/display.c **** 
1065:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1066:src/display.c **** 		v = extract_value(value, &sign);
1067:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1068:src/display.c **** 			v = value;
1069:src/display.c **** 		if (v == 0) {
1070:src/display.c **** 			if (sign)
1071:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1072:src/display.c **** 			set_dig_s(dig, '0', res);
1073:src/display.c **** 			return;
1074:src/display.c **** 		} else
1075:src/display.c **** 			for (i=0; v != 0; i++) {
1076:src/display.c **** 				const int r = v % b;
1077:src/display.c **** 				v /= b;
1078:src/display.c **** 				buf[i] = DIGITS[r];
1079:src/display.c **** 			}
1080:src/display.c **** 	} else {
1081:src/display.c **** 		// Truncate down to the current word size and then sign extend it back
1082:src/display.c **** 		if (ws < 64) {
1083:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
1084:src/display.c **** 			vs &= mask;
1085:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
1086:src/display.c **** 				vs |= ~mask;
1087:src/display.c **** 		}
1088:src/display.c **** 
1089:src/display.c **** 		if (!UState.leadzero && vs == 0) {
1090:src/display.c **** 			set_dig_s(dig, '0', res);
1091:src/display.c **** 			return;
1092:src/display.c **** 		} else if (!UState.leadzero) {
1093:src/display.c **** 			v = (unsigned long long int)vs;
1094:src/display.c **** 			for (i=0; v != 0; i++) {
1095:src/display.c **** 				const int r = v % b;
1096:src/display.c **** 				v /= b;
1097:src/display.c **** 				buf[i] = DIGITS[r];
1098:src/display.c **** 			}
1099:src/display.c **** 		} else {
1100:src/display.c **** 			int n;
1101:src/display.c **** 			const unsigned int b1 = b >> 1;
1102:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1103:src/display.c **** 			v = (unsigned long long int)vs;
1104:src/display.c **** 
1105:src/display.c **** 			n = (ws + fac) / (fac+1);
1106:src/display.c **** 			for (i=0; i<n; i++) {
1107:src/display.c **** 				const int r = v % b;
1108:src/display.c **** 				v /= b;
1109:src/display.c **** 				buf[i] = DIGITS[r];
1110:src/display.c **** 			}
1111:src/display.c **** 		}
1112:src/display.c **** 	}
1113:src/display.c **** 
ARM GAS  /tmp/ccAnlOT7.s 			page 26


1114:src/display.c **** 	/* At this point i is the number of digits in the output */
1115:src/display.c **** 	if (res) {
1116:src/display.c **** 		if (sign) *res++ = '-';
1117:src/display.c **** 		while (--i >= 0)
1118:src/display.c **** 			*res++ = buf[i];
1119:src/display.c **** 	} else {
1120:src/display.c **** #if 0
1121:src/display.c **** 		set_separator_decimal_modes();
1122:src/display.c **** 
1123:src/display.c **** 		// Allows configuration of digit grouping per base
1124:src/display.c **** 		static const char grouping[] = 
1125:src/display.c **** 			{       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1126:src/display.c **** 		      //	   2     3     4     5     6     7     8
1127:src/display.c **** 		          0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1128:src/display.c **** 		      //     9    10    11    12    13    14    15    16
1129:src/display.c **** 		const int shift = SeparatorMode == SEP_NONE ? 12 
1130:src/display.c **** 			        : grouping[b - 2] >> 4;
1131:src/display.c **** 		const int group = SeparatorMode == SEP_NONE ? 16
1132:src/display.c **** 				: (grouping[b - 2] & 0xf);
1133:src/display.c **** #else
1134:src/display.c **** 		// Less flexible but shorter
1135:src/display.c **** 		const int shift = b == 2 ? 8 : 12;
1136:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
1137:src/display.c **** 				: b == 16 ? 2 : 3;
1138:src/display.c **** 		set_separator_decimal_modes();
1139:src/display.c **** #endif
1140:src/display.c **** 		IntMaxWindow = (i - 1) / shift;
1141:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
1142:src/display.c **** 			State2.window = 0;
1143:src/display.c **** 		buf[i] = '\0';
1144:src/display.c **** 
1145:src/display.c **** 		j = State2.window * shift;	// digits at a time
1146:src/display.c **** 		for (k = 0; k < 12; k++)
1147:src/display.c **** 			if (buf[j + k] == '\0')
1148:src/display.c **** 				break;
1149:src/display.c **** 		for (i=0; --k >= 0; i++) {
1150:src/display.c **** 			int ch = buf[j++];
1151:src/display.c **** 			if (i >= shift)
1152:src/display.c **** 				ch -= 030;
1153:src/display.c **** 			set_dig(dig, ch);
1154:src/display.c **** 			if ((j % group) == 0 && k != 0)
1155:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
1156:src/display.c **** 			dig -= SEGS_PER_DIGIT;
1157:src/display.c **** 		}
1158:src/display.c **** 		if (sign) {
1159:src/display.c **** 			if (dig >= 0)
1160:src/display.c **** 				set_dig(dig, '-');
1161:src/display.c **** 			else	SET_MANT_SIGN;
1162:src/display.c **** 		}
1163:src/display.c **** 	}
1164:src/display.c **** }
1165:src/display.c **** 
1166:src/display.c **** /* Handle special cases.
1167:src/display.c ****  * return non-zero if the number is special.
1168:src/display.c ****  */
1169:src/display.c **** static int check_special_dn(const decNumber *x, char *res) {
1170:src/display.c **** 	if (decNumberIsSpecial(x)) {
ARM GAS  /tmp/ccAnlOT7.s 			page 27


1171:src/display.c **** 		if (decNumberIsNaN(x)) {
1172:src/display.c **** 			if (res) {
1173:src/display.c **** 				scopy(res, "NaN");
1174:src/display.c **** 			} else {
1175:src/display.c **** 				set_digits_string(S7_NaN, 0);
1176:src/display.c **** #ifndef REALBUILD
1177:src/display.c **** 				scopy(LastDisplayedNumber, S7_NaN_Text);
1178:src/display.c **** 				forceDispPlot=0;
1179:src/display.c **** #endif
1180:src/display.c **** 			}
1181:src/display.c **** 			return 1;
1182:src/display.c **** 		} else {
1183:src/display.c **** 			if (decNumberIsNegative(x)) {
1184:src/display.c **** 				if (res) *res++ = '-';
1185:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
1186:src/display.c **** 			}
1187:src/display.c **** 			if (res)
1188:src/display.c **** 				*res++ = '\237';
1189:src/display.c **** 			else {
1190:src/display.c **** 				set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1191:src/display.c **** #ifndef REALBUILD
1192:src/display.c **** 				if (decNumberIsNegative(x)) {
1193:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1194:src/display.c **** 				}
1195:src/display.c **** 				else {
1196:src/display.c **** 					scopy(LastDisplayedNumber, S7_INF_Text);
1197:src/display.c **** 				}
1198:src/display.c **** 				forceDispPlot=0;
1199:src/display.c **** #endif
1200:src/display.c **** 			}
1201:src/display.c **** 			return 1;
1202:src/display.c **** 		}
1203:src/display.c **** 	}
1204:src/display.c **** 	return 0;
1205:src/display.c **** }
1206:src/display.c **** 
1207:src/display.c **** 
1208:src/display.c **** /* Extract the two lowest integral digits from the number
1209:src/display.c ****  */
1210:src/display.c **** static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1211:src/display.c **** 	decNumber n;
1212:src/display.c **** 
1213:src/display.c **** 	decNumberMod(&n, x, &const_100);
1214:src/display.c **** 	*v = dn_to_int(&n);
1215:src/display.c **** 	dn_mulpow10(&n, x, -2);
1216:src/display.c **** 	decNumberTrunc(res, &n);
1217:src/display.c **** }
1218:src/display.c **** 
1219:src/display.c **** static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1219 81 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1220:src/display.c **** 	char b[32];
 276              		.loc 1 1220 2 view .LVU78
1221:src/display.c **** 	int i, j;
 277              		.loc 1 1221 2 view .LVU79
ARM GAS  /tmp/ccAnlOT7.s 			page 28


1222:src/display.c **** 
1223:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1223 2 view .LVU80
 279              		.loc 1 1223 12 view .LVU81
1219:src/display.c **** 	char b[32];
 280              		.loc 1 1219 81 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1224:src/display.c **** 		if (v == 0)
1225:src/display.c **** 			b[i] = spaces?' ':'0';
1226:src/display.c **** 		else {
1227:src/display.c **** 			j = v % 10;
 290              		.loc 1 1227 10 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1219:src/display.c **** 	char b[32];
 292              		.loc 1 1219 81 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1219:src/display.c **** 	char b[32];
 295              		.loc 1 1219 81 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1223:src/display.c **** 		if (v == 0)
 298              		.loc 1 1223 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1224:src/display.c **** 		if (v == 0)
 302              		.loc 1 1224 3 is_stmt 1 view .LVU87
 303              		.loc 1 1227 4 view .LVU88
 304              		.loc 1 1227 10 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1228:src/display.c **** 			v /= 10;
 311              		.loc 1 1228 4 is_stmt 1 view .LVU90
1229:src/display.c **** 			b[i] = j + '0';
 312              		.loc 1 1229 13 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1223:src/display.c **** 		if (v == 0)
 315              		.loc 1 1223 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1224:src/display.c **** 			b[i] = spaces?' ':'0';
 317              		.loc 1 1224 6 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1223:src/display.c **** 		if (v == 0)
ARM GAS  /tmp/ccAnlOT7.s 			page 29


 319              		.loc 1 1223 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1229 9 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1228:src/display.c **** 			b[i] = j + '0';
 323              		.loc 1 1228 6 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1229 4 is_stmt 1 view .LVU97
1223:src/display.c **** 		if (v == 0)
 327              		.loc 1 1223 17 view .LVU98
1223:src/display.c **** 		if (v == 0)
 328              		.loc 1 1223 12 view .LVU99
1223:src/display.c **** 		if (v == 0)
 329              		.loc 1 1223 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1223:src/display.c **** 		if (v == 0)
 335              		.loc 1 1223 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1223:src/display.c **** 		if (v == 0)
 341              		.loc 1 1223 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1224:src/display.c **** 			b[i] = spaces?' ':'0';
 345              		.loc 1 1224 6 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1225:src/display.c **** 		else {
 349              		.loc 1 1225 4 is_stmt 1 view .LVU104
1223:src/display.c **** 		if (v == 0)
 350              		.loc 1 1223 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1223:src/display.c **** 		if (v == 0)
 353              		.loc 1 1223 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1225:src/display.c **** 		else {
 355              		.loc 1 1225 9 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1223:src/display.c **** 		if (v == 0)
 358              		.loc 1 1223 17 is_stmt 1 view .LVU108
1223:src/display.c **** 		if (v == 0)
 359              		.loc 1 1223 12 view .LVU109
1223:src/display.c **** 		if (v == 0)
 360              		.loc 1 1223 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
ARM GAS  /tmp/ccAnlOT7.s 			page 30


 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1223:src/display.c **** 		if (v == 0)
 364              		.loc 1 1223 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1230:src/display.c **** 		}
1231:src/display.c **** 	}
1232:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1232 2 is_stmt 1 view .LVU112
 371              		.loc 1 1232 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1233:src/display.c **** 		b[0] = '0';
1234:src/display.c **** 
1235:src/display.c **** 	/* Copy across and appropriately leading space things
1236:src/display.c **** 	 */
1237:src/display.c **** 	j = *jin;
 374              		.loc 1 1237 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1232:src/display.c **** 		b[0] = '0';
 376              		.loc 1 1232 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1233:src/display.c **** 		b[0] = '0';
 378              		.loc 1 1233 3 is_stmt 1 view .LVU116
1233:src/display.c **** 		b[0] = '0';
 379              		.loc 1 1233 8 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1237 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1238:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1238 2 view .LVU119
 386              		.loc 1 1238 8 view .LVU120
1237:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1237 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1238 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1239:src/display.c **** 		str = set_dig_s(j, b[i], str);
 394              		.loc 1 1239 3 is_stmt 1 view .LVU123
 395              	.LBB132:
 396              	.LBB133:
 396:src/display.c **** 	else	set_dig(base, ch);
 397              		.loc 1 396 11 view .LVU124
 398              	.LBE133:
 399              	.LBE132:
 400              		.loc 1 1239 23 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB137:
ARM GAS  /tmp/ccAnlOT7.s 			page 31


 403              	.LBB134:
 396:src/display.c **** 	else	set_dig(base, ch);
 404              		.loc 1 396 15 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 396:src/display.c **** 	else	set_dig(base, ch);
 407              		.loc 1 396 15 view .LVU127
 408              	.LBE134:
 409              	.LBI132:
 395:src/display.c **** 	if (res) *res++ = ch;
 410              		.loc 1 395 14 is_stmt 1 view .LVU128
 411              	.LBB135:
 396:src/display.c **** 	else	set_dig(base, ch);
 412              		.loc 1 396 2 view .LVU129
 396:src/display.c **** 	else	set_dig(base, ch);
 413              		.loc 1 396 5 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 396:src/display.c **** 	else	set_dig(base, ch);
 416              		.loc 1 396 18 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 396:src/display.c **** 	else	set_dig(base, ch);
 419              		.loc 1 396 15 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 398:src/display.c **** }
 423              		.loc 1 398 2 is_stmt 1 view .LVU133
 398:src/display.c **** }
 424              		.loc 1 398 2 is_stmt 0 view .LVU134
 425              	.LBE135:
 426              	.LBE137:
1240:src/display.c **** 		j += SEGS_PER_DIGIT;
 427              		.loc 1 1240 3 is_stmt 1 view .LVU135
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 428              		.loc 1 1238 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1240 5 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 434              		.loc 1 1238 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1241:src/display.c **** 	}
1242:src/display.c **** 	*jin = j;
 436              		.loc 1 1242 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1242 2 is_stmt 1 view .LVU140
 440              		.loc 1 1242 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1243:src/display.c **** 	return str;
1244:src/display.c **** }
 443              		.loc 1 1244 1 view .LVU142
ARM GAS  /tmp/ccAnlOT7.s 			page 32


 444 0092 2846     		mov	r0, r5
1242:src/display.c **** 	return str;
 445              		.loc 1 1242 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1243:src/display.c **** 	return str;
 447              		.loc 1 1243 2 is_stmt 1 view .LVU144
 448              		.loc 1 1244 1 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB138:
 458              	.LBB136:
 397:src/display.c **** 	return res;
 459              		.loc 1 397 7 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 397:src/display.c **** 	return res;
 463              		.loc 1 397 7 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE136:
 470              	.LBE138:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 413:src/display.c **** 	int i;
 485              		.loc 1 413 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 414:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 489              		.loc 1 414 2 view .LVU149
 415:src/display.c **** 
 490              		.loc 1 415 2 view .LVU150
 413:src/display.c **** 	int i;
 491              		.loc 1 413 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
ARM GAS  /tmp/ccAnlOT7.s 			page 33


 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 415:src/display.c **** 
 500              		.loc 1 415 32 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 417 2 is_stmt 1 view .LVU153
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 417 12 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB139:
 513              	.LBB140:
 397:src/display.c **** 	return res;
 514              		.loc 1 397 7 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 396:src/display.c **** 	else	set_dig(base, ch);
 519              		.loc 1 396 18 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 396:src/display.c **** 	else	set_dig(base, ch);
 522              		.loc 1 396 18 view .LVU157
 523              	.LBE140:
 524              	.LBE139:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 417 2 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB146:
 528              	.LBB141:
 396:src/display.c **** 	else	set_dig(base, ch);
 529              		.loc 1 396 15 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 398:src/display.c **** }
 532              		.loc 1 398 2 is_stmt 1 view .LVU160
 398:src/display.c **** }
 533              		.loc 1 398 2 is_stmt 0 view .LVU161
 534              	.LBE141:
 535              	.LBE146:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 417 35 is_stmt 1 view .LVU162
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 417 12 view .LVU163
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 417 2 is_stmt 0 view .LVU164
ARM GAS  /tmp/ccAnlOT7.s 			page 34


 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 418:src/display.c **** }
 542              		.loc 1 418 3 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB147:
 544              	.LBB142:
 396:src/display.c **** 	else	set_dig(base, ch);
 545              		.loc 1 396 11 discriminator 3 view .LVU166
 396:src/display.c **** 	else	set_dig(base, ch);
 546              		.loc 1 396 11 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE142:
 548              	.LBE147:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 417 22 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB148:
 553              	.LBB143:
 396:src/display.c **** 	else	set_dig(base, ch);
 554              		.loc 1 396 15 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 396:src/display.c **** 	else	set_dig(base, ch);
 557              		.loc 1 396 15 discriminator 3 view .LVU170
 558              	.LBE143:
 559              	.LBI139:
 395:src/display.c **** 	if (res) *res++ = ch;
 560              		.loc 1 395 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB144:
 396:src/display.c **** 	else	set_dig(base, ch);
 562              		.loc 1 396 2 discriminator 3 view .LVU172
 563              	.LBE144:
 564              	.LBE148:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 417 16 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB149:
 569              	.LBB145:
 396:src/display.c **** 	else	set_dig(base, ch);
 570              		.loc 1 396 5 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 397:src/display.c **** 	return res;
 573              		.loc 1 397 7 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 398:src/display.c **** }
 578              		.loc 1 398 2 view .LVU176
 398:src/display.c **** }
 579              		.loc 1 398 2 is_stmt 0 view .LVU177
 580              	.LBE145:
 581              	.LBE149:
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccAnlOT7.s 			page 35


 582              		.loc 1 417 35 is_stmt 1 view .LVU178
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 417 12 view .LVU179
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 417 2 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 419:src/display.c **** 
 589              		.loc 1 419 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 419:src/display.c **** 
 591              		.loc 1 419 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1210:src/display.c **** 	decNumber n;
 606              		.loc 1 1210 69 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1211:src/display.c **** 
 610              		.loc 1 1211 2 view .LVU184
1213:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1213 2 view .LVU185
1210:src/display.c **** 	decNumber n;
 612              		.loc 1 1210 69 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1210:src/display.c **** 	decNumber n;
 621              		.loc 1 1210 69 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1213:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1213 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1213:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1213 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
ARM GAS  /tmp/ccAnlOT7.s 			page 36


1210:src/display.c **** 	decNumber n;
 630              		.loc 1 1210 69 view .LVU190
 631 000c 0D46     		mov	r5, r1
1213:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1213 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1214 2 is_stmt 1 view .LVU192
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1214 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1215:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1215 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1214 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1215:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1215 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1216:src/display.c **** }
 649              		.loc 1 1216 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1217:src/display.c **** 
 654              		.loc 1 1217 1 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1217:src/display.c **** 
 661              		.loc 1 1217 1 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.set_status_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	set_status_sized:
 677              	.LVL56:
 678              	.LFB37:
ARM GAS  /tmp/ccAnlOT7.s 			page 37


1245:src/display.c **** 
1246:src/display.c **** 
1247:src/display.c **** /* Display the number in H.MS mode.
1248:src/display.c ****  * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1249:src/display.c ****  */
1250:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res) {
1251:src/display.c **** 	decNumber x, y, a, t, u;
1252:src/display.c **** 	int j=0;
1253:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1254:src/display.c **** 	unsigned int hr, min, sec, fs;
1255:src/display.c **** 
1256:src/display.c **** 	if (check_special_dn(rgx, res)) {
1257:src/display.c **** 		if (decNumberIsInfinite(rgx))
1258:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
1259:src/display.c **** 		return;
1260:src/display.c **** 	}
1261:src/display.c **** 
1262:src/display.c **** 	set_separator_decimal_modes();
1263:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1264:src/display.c **** 	dn_abs(&a, rgx);
1265:src/display.c **** 	if (decNumberIsNegative(&x)) {
1266:src/display.c **** 		if (res != NULL)
1267:src/display.c **** 			*res++ += '-';
1268:src/display.c **** 		else
1269:src/display.c **** 			SET_MANT_SIGN;
1270:src/display.c **** 		dn_minus(&x, &x);
1271:src/display.c **** 	}
1272:src/display.c **** 
1273:src/display.c **** 	decNumberHR2HMS(&y, &x);
1274:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1275:src/display.c **** 	decNumberRound(&u, &t);
1276:src/display.c **** 
1277:src/display.c **** 	hms_step(&t, &u, &fs);
1278:src/display.c **** 	hms_step(&u, &t, &sec);
1279:src/display.c **** 	hms_step(&t, &u, &min);
1280:src/display.c **** 	hr = dn_to_int(&t);
1281:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1282:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1283:src/display.c **** 
1284:src/display.c **** 	// degrees
1285:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1286:src/display.c **** 	res = set_dig_s(j, '@', res);
1287:src/display.c **** 	j += SEGS_PER_DIGIT;
1288:src/display.c **** 
1289:src/display.c **** 	// minutes
1290:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1291:src/display.c **** 	res = set_dig_s(j, '\'', res);
1292:src/display.c **** 	j += SEGS_PER_DIGIT;
1293:src/display.c **** 
1294:src/display.c **** 	// seconds
1295:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1296:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1297:src/display.c **** 
1298:src/display.c **** 	// Fractional seconds
1299:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1300:src/display.c **** 
1301:src/display.c **** 	// We're now pointing at the exponent's first digit...
ARM GAS  /tmp/ccAnlOT7.s 			page 38


1302:src/display.c **** 	res = set_dig_s(j, '"', res);
1303:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1304:src/display.c **** 
1305:src/display.c **** 	// Check for values too big or small
1306:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1307:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
1308:src/display.c **** 	} else if (! dn_eq0(&a)) {
1309:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
1310:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
1311:src/display.c **** 		}
1312:src/display.c **** 	}
1313:src/display.c **** }
1314:src/display.c **** 
1315:src/display.c **** 
1316:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res) {
1317:src/display.c **** 	decNumber x, w, n, d, t;
1318:src/display.c **** 	char buf[32], *p = buf;
1319:src/display.c **** 	int j;
1320:src/display.c **** 
1321:src/display.c **** 	if (check_special_dn(rgx, res))
1322:src/display.c **** 		return 1;
1323:src/display.c **** 	dn_abs(&x, rgx);
1324:src/display.c **** 	if (dn_ge(&x, &const_100000))
1325:src/display.c **** 		return 0;
1326:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1327:src/display.c **** 		return 0;
1328:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1329:src/display.c **** 		if (res != NULL)
1330:src/display.c **** 			*res++ += '-';
1331:src/display.c **** 		else
1332:src/display.c **** 			SET_MANT_SIGN;
1333:src/display.c **** 	}
1334:src/display.c **** 	decNumberFrac(&w, &x);
1335:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1336:src/display.c **** 
1337:src/display.c **** 	dn_divide(&t, &n, &d);
1338:src/display.c **** 	dn_compare(&t, &t, &w);
1339:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1340:src/display.c **** 
1341:src/display.c **** 	if (dn_eq(&n, &d)) {
1342:src/display.c **** 		dn_inc(&w);
1343:src/display.c **** 		decNumberZero(&n);
1344:src/display.c **** 	}
1345:src/display.c **** 
1346:src/display.c **** 	if (!UState.improperfrac) {
1347:src/display.c **** 		if (!dn_eq0(&w)) {
1348:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
1349:src/display.c **** 			*p++ = ' ';
1350:src/display.c **** 		}
1351:src/display.c **** 	} else {
1352:src/display.c **** 		dn_multiply(&x, &w, &d);
1353:src/display.c **** 		dn_add(&n, &n, &x);
1354:src/display.c **** 	}
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1356:src/display.c **** 	*p++ = '/';
1357:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1358:src/display.c **** 	*p = '\0';
ARM GAS  /tmp/ccAnlOT7.s 			page 39


1359:src/display.c **** 	if ((p - 12) > buf) {
1360:src/display.c **** 		p -= 12;
1361:src/display.c **** 		*p = '<';
1362:src/display.c **** 	} else	p = buf;
1363:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1364:src/display.c **** 		res = set_dig_s(j, *p, res);
1365:src/display.c **** 		j += SEGS_PER_DIGIT;
1366:src/display.c **** 	}
1367:src/display.c **** 
1368:src/display.c **** 	if (dn_eq0(&t))
1369:src/display.c **** 		p = (char *)S7_fract_EQ;
1370:src/display.c **** 	else if (decNumberIsNegative(&t))
1371:src/display.c **** 		p = (char *)S7_fract_LT;
1372:src/display.c **** 	else
1373:src/display.c **** 		p = (char *)S7_fract_GT;
1374:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1375:src/display.c **** 		res = set_dig_s(j, *p, res);
1376:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
1377:src/display.c **** 	}
1378:src/display.c **** 	return 1;
1379:src/display.c **** }
1380:src/display.c **** 
1381:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1382:src/display.c **** enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1383:src/display.c **** 	decNumber c;
1384:src/display.c **** 	int true_exp, x=0;
1385:src/display.c **** 	int min_pos_exp, max_neg_exp;
1386:src/display.c **** 
1387:src/display.c **** 	if ( mode != MODE_STD ) {
1388:src/display.c **** 		min_pos_exp = 9;
1389:src/display.c **** 		max_neg_exp = -5;
1390:src/display.c **** 	}
1391:src/display.c **** 	else {
1392:src/display.c **** 		min_pos_exp = 12;
1393:src/display.c **** 		max_neg_exp = -1 - dispdigs;
1394:src/display.c **** 	}
1395:src/display.c **** 
1396:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1397:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1398:src/display.c **** 
1399:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1400:src/display.c **** 		x = *dd;
1401:src/display.c **** 	}
1402:src/display.c **** 
1403:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1404:src/display.c **** 		// decimals needed; *dd adjusted to provide correct number
1405:src/display.c **** 		*dd += -true_exp;
1406:src/display.c **** 		return MODE_FIX;
1407:src/display.c **** 	}
1408:src/display.c **** 
1409:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1410:src/display.c **** 		return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1411:src/display.c **** 	}
1412:src/display.c **** 	else {
1413:src/display.c **** 		return MODE_STD;
1414:src/display.c **** 	}
1415:src/display.c ****  }
ARM GAS  /tmp/ccAnlOT7.s 			page 40


1416:src/display.c **** #else
1417:src/display.c **** enum display_modes std_round_fix(const decNumber *z) {
1418:src/display.c **** 	decNumber b, c;
1419:src/display.c **** 
1420:src/display.c **** 	dn_1(&b);
1421:src/display.c **** 	b.exponent -= UState.dispdigs;
1422:src/display.c **** 	dn_abs(&c, z);
1423:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1424:src/display.c **** 		return MODE_FIX;
1425:src/display.c **** 	return MODE_STD;
1426:src/display.c **** }
1427:src/display.c **** #endif
1428:src/display.c **** 
1429:src/display.c **** /* SHOW display mode
1430:src/display.c ****  * in double precision show left or right part
1431:src/display.c ****  * 4 + 12 + 3 or 6 + 10 + 4 version
1432:src/display.c ****  */
1433:src/display.c **** static void show_x(char *x, int exp) {
1434:src/display.c **** 	const int dbl = is_dblmode();
1435:src/display.c **** 	char *p;
1436:src/display.c **** 	int i, j;
1437:src/display.c **** 	char *upper_str;
1438:src/display.c **** 	enum separator_modes separator_mode;
1439:src/display.c **** 	char decimal_mark;
1440:src/display.c **** 	char thousands_sep;
1441:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1442:src/display.c **** 	const int grouping = 0;
1443:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1444:src/display.c **** 	const int grouping = !UState.nothousands;
1445:src/display.c **** #else
1446:src/display.c **** 	const int grouping = 1;
1447:src/display.c **** #endif
1448:src/display.c **** 	int negative;
1449:src/display.c **** 
1450:src/display.c **** 	if (x[0] == '-') {
1451:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1452:src/display.c **** 		static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1453:src/display.c **** 
1454:src/display.c **** 		xcopy(x + 4, x + 1, 34);
1455:src/display.c **** 		xcopy(x, small_minus, 4);
1456:src/display.c **** 		x += 4;
1457:src/display.c **** 		negative = 4;
1458:src/display.c **** #else
1459:src/display.c **** 		++x;
1460:src/display.c **** 		negative = 1;
1461:src/display.c **** #endif
1462:src/display.c **** 	}
1463:src/display.c **** 	else negative = 0;
1464:src/display.c **** 
1465:src/display.c **** 	p = find_char(x, '\0');
1466:src/display.c **** 	xset(p, '0', 34 - (p - x));
1467:src/display.c **** 
1468:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1469:src/display.c **** 		separator_mode = SEP_COMMA;
1470:src/display.c **** 		decimal_mark = '.';
1471:src/display.c **** 		thousands_sep = ',';
1472:src/display.c **** 	}
ARM GAS  /tmp/ccAnlOT7.s 			page 41


1473:src/display.c **** 	else {
1474:src/display.c **** 		separator_mode = SEP_DOT;
1475:src/display.c **** 		decimal_mark = ',';
1476:src/display.c **** 		thousands_sep = '.';
1477:src/display.c **** 	}
1478:src/display.c **** 
1479:src/display.c **** 	if (State2.window) { // right half in double precision mode
1480:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1481:src/display.c **** 		static const char small_dots[13] = { '\007', '\341', ',', '\006',
1482:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1483:src/display.c **** 
1484:src/display.c **** 		upper_str = x + 3;
1485:src/display.c **** 		xcopy(upper_str, small_dots, 13);
1486:src/display.c **** 		if (grouping) {
1487:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1488:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
1489:src/display.c **** 			x += 3 + 13 + 7;
1490:src/display.c **** 		}
1491:src/display.c **** 		else x += 3 + 13 + 6;
1492:src/display.c **** #else
1493:src/display.c **** 		upper_str = x + 13;
1494:src/display.c **** 		xset(upper_str, '.', 3);
1495:src/display.c **** 		if (grouping) {
1496:src/display.c **** 			xcopy(upper_str + 7, upper_str + 6, 19);
1497:src/display.c **** 			upper_str[6] = thousands_sep;
1498:src/display.c **** 			x += 13 + 3 + 7;
1499:src/display.c **** 		}
1500:src/display.c **** 		else x += 13 + 3 + 6;
1501:src/display.c **** #endif
1502:src/display.c **** 		negative = 0;
1503:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
1504:src/display.c **** 	}
1505:src/display.c **** 	else {
1506:src/display.c **** 		upper_str = x;
1507:src/display.c **** 		xcopy(x + 2, x + 1, 16);
1508:src/display.c **** 		x[1] = decimal_mark;
1509:src/display.c **** 		if (grouping) {
1510:src/display.c **** 			xcopy(x + 6, x + 5, 13);
1511:src/display.c **** 			x[5] = thousands_sep;
1512:src/display.c **** 			x += 9;
1513:src/display.c **** 		}
1514:src/display.c **** 		else x += 8;
1515:src/display.c **** 		if (dbl) {
1516:src/display.c **** 			if (exp < 0) {
1517:src/display.c **** 				x[9] = '-';
1518:src/display.c **** 				exp = -exp;
1519:src/display.c **** 			}
1520:src/display.c **** 			else
1521:src/display.c **** 				x[9] = ' ';
1522:src/display.c **** 			j = exp / 1000;
1523:src/display.c **** 			x[10] = '0' + j;
1524:src/display.c **** 			exp -= 1000 * j;
1525:src/display.c **** 		}
1526:src/display.c **** 		else {
1527:src/display.c **** 			x[9] = '\0';
1528:src/display.c **** 			x[10] = '\0';
1529:src/display.c **** 		}
ARM GAS  /tmp/ccAnlOT7.s 			page 42


1530:src/display.c **** 		xcopy(x + 1, x, 11);
1531:src/display.c **** 		*x = 0;
1532:src/display.c **** 		set_exp(exp, 1, CNULL);
1533:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
1534:src/display.c **** 	}
1535:src/display.c **** 	if (grouping) {
1536:src/display.c **** 		for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1537:src/display.c **** 			set_separator(i, separator_mode, CNULL);
1538:src/display.c **** 		}
1539:src/display.c **** 	}
1540:src/display.c **** 
1541:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1542:src/display.c **** 		set_dig(j, x[i]);
1543:src/display.c **** 
1544:src/display.c **** 	*x = '\0';
1545:src/display.c **** 	set_status(upper_str - negative);
1546:src/display.c **** }
1547:src/display.c **** 
1548:src/display.c **** 
1549:src/display.c **** /* Display the X register in the numeric portion of the display.
1550:src/display.c ****  * We have to account for the various display modes and numbers of
1551:src/display.c ****  * digits.
1552:src/display.c ****  */
1553:src/display.c **** static void set_x(const REGISTER *rgx, char *res, int dbl) {
1554:src/display.c **** 	decNumber z;
1555:src/display.c **** 	int digits = DISPLAY_DIGITS;
1556:src/display.c **** 
1557:src/display.c **** 	if (dbl)
1558:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
1559:src/display.c **** 	else
1560:src/display.c **** 		decimal64ToNumber(&(rgx->s), &z);
1561:src/display.c **** 	set_x_dn(&z, res, &digits);
1562:src/display.c **** }
1563:src/display.c **** 
1564:src/display.c **** void set_x_dn(decNumber *z, char *res, int *display_digits) {
1565:src/display.c **** 	char x[50], *obp = x;
1566:src/display.c **** 	int odig = 0;
1567:src/display.c **** 	int show_exp = 0;
1568:src/display.c **** 	int j;
1569:src/display.c **** 	char mantissa[64];
1570:src/display.c **** 	int exp = 0;
1571:src/display.c **** 	char *p = mantissa;
1572:src/display.c **** 	char *r;
1573:src/display.c **** 	const char *q;
1574:src/display.c **** 	int count, i;
1575:src/display.c **** 	int extra_digits = 0;
1576:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1577:src/display.c **** 	int dd;
1578:src/display.c **** 	int dispdigs;
1579:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1580:src/display.c **** #else
1581:src/display.c **** 	int dd = UState.dispdigs;
1582:src/display.c **** 	int mode = UState.dispmode;
1583:src/display.c **** #endif
1584:src/display.c **** 	int c;
1585:src/display.c **** 	int negative = 0;
1586:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccAnlOT7.s 			page 43


1587:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1588:src/display.c **** 	const int show_large_exponent = 0;
1589:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1590:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1591:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1592:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1593:src/display.c **** #else
1594:src/display.c **** 	const int show_large_exponent = 1;
1595:src/display.c **** #endif
1596:src/display.c **** 
1597:src/display.c **** 	set_separator_decimal_modes();
1598:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1599:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1600:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
1601:src/display.c **** 			if (State2.hms) {
1602:src/display.c **** 				set_x_hms(z, res);
1603:src/display.c ****  				return;
1604:src/display.c **** 			}
1605:src/display.c **** 			else if (UState.fract) {
1606:src/display.c **** 				if (set_x_fract(z, res))
1607:src/display.c **** 					return;
1608:src/display.c **** 			}
1609:src/display.c **** 		}
1610:src/display.c **** 	}		
1611:src/display.c **** #else
1612:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1613:src/display.c **** 		if (State2.hms) {
1614:src/display.c **** 			set_x_hms(z, res);
1615:src/display.c **** 			State2.hms = 0;
1616:src/display.c **** 			return;
1617:src/display.c **** 		} else if (UState.fract) {
1618:src/display.c **** 			if (set_x_fract(z, res))
1619:src/display.c **** 				return;
1620:src/display.c **** 		}
1621:src/display.c **** 	}
1622:src/display.c **** #endif
1623:src/display.c **** 
1624:src/display.c **** 	if (check_special_dn(z, res))
1625:src/display.c **** 		return;
1626:src/display.c **** 
1627:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1628:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
1629:src/display.c **** 		exp = z->exponent + z->digits - 1;
1630:src/display.c **** 		z->exponent = 0;
1631:src/display.c **** 	}
1632:src/display.c **** 
1633:src/display.c **** 	xset(x, '\0', sizeof(x));
1634:src/display.c **** 
1635:src/display.c **** 	if (dn_eq0(z)) {
1636:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1637:src/display.c **** 			x[0] = '-';
1638:src/display.c **** 			x[1] = '0';
1639:src/display.c **** 		} else
1640:src/display.c **** 			x[0] = '0';
1641:src/display.c **** 	} else
1642:src/display.c **** 		decNumberToString(z, x);
1643:src/display.c **** 
ARM GAS  /tmp/ccAnlOT7.s 			page 44


1644:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1645:src/display.c **** 		show_x(x, exp);
1646:src/display.c **** 		return;
1647:src/display.c **** 	}
1648:src/display.c **** 
1649:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1650:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1651:src/display.c **** 		//  ALL mode: fill the display
1652:src/display.c **** 		dd = *display_digits - 1;
1653:src/display.c **** 	else
1654:src/display.c **** 		dd = dispdigs;
1655:src/display.c **** 
1656:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1657:src/display.c **** 		int orig_mode = mode;
1658:src/display.c **** 
1659:src/display.c **** 		mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1660:src/display.c **** 		if (orig_mode != MODE_SIG0)
1661:src/display.c **** 			// allow zeros to be trimmed
1662:src/display.c **** 			trimzeros = 1;
1663:src/display.c **** 		if (orig_mode == MODE_STD)
1664:src/display.c **** 			dd = *display_digits - 1;
1665:src/display.c ****  	}
1666:src/display.c **** #else
1667:src/display.c **** 	if (mode == MODE_STD) {
1668:src/display.c **** 		mode = std_round_fix(z);
1669:src/display.c **** 		trimzeros = 1;
1670:src/display.c **** 		dd = *display_digits - 1;
1671:src/display.c **** 	} else if (dd >= *display_digits)
1672:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
1673:src/display.c **** 		dd = *display_digits - 1;
1674:src/display.c **** #endif
1675:src/display.c **** 
1676:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
1677:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
1678:src/display.c **** 
1679:src/display.c **** 	q = find_char(x, 'E');
1680:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1681:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
1682:src/display.c **** 	if (q == NULL) exp = 0;
1683:src/display.c **** 	else {
1684:src/display.c **** 		exp = s_to_i(q+1);
1685:src/display.c **** 		if (*q == 'D') exp = -exp;
1686:src/display.c **** 	}
1687:src/display.c **** #else
1688:src/display.c **** 	if (q == NULL) exp = 0;
1689:src/display.c **** 	else exp = s_to_i(q+1);
1690:src/display.c **** #endif
1691:src/display.c **** 
1692:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
1693:src/display.c **** 	for (q=x; *q == ' '; q++);
1694:src/display.c **** 	if (!res) {
1695:src/display.c **** 		CLR_EXP_SIGN;
1696:src/display.c **** 		CLR_MANT_SIGN;
1697:src/display.c **** 	}
1698:src/display.c **** 	if (*q == '-') {
1699:src/display.c **** 		negative = 1;
1700:src/display.c **** 		q++;
ARM GAS  /tmp/ccAnlOT7.s 			page 45


1701:src/display.c **** 	} else if (*q == '+')
1702:src/display.c **** 		q++;
1703:src/display.c **** 	for (; *q == '0'; q++);
1704:src/display.c **** 	if (*q == '.') {
1705:src/display.c **** 		do
1706:src/display.c **** 			exp--;
1707:src/display.c **** 		while (*++q == '0');
1708:src/display.c **** 		while (*q >= '0' && *q <= '9')
1709:src/display.c **** 			*p++ = *q++;
1710:src/display.c **** 	} else {
1711:src/display.c **** 		if (*q >= '0' && *q <= '9')
1712:src/display.c **** 			*p++ = *q++;
1713:src/display.c **** 		while (*q >= '0' && *q <= '9') {
1714:src/display.c **** 			*p++ = *q++;
1715:src/display.c **** 			exp++;
1716:src/display.c **** 		}
1717:src/display.c **** 		if (*q == '.') {
1718:src/display.c **** 			q++;
1719:src/display.c **** 			while (*q >= '0' && *q <= '9')
1720:src/display.c **** 				*p++ = *q++;
1721:src/display.c **** 		}
1722:src/display.c **** 	}
1723:src/display.c **** 
1724:src/display.c **** 	if (mode == MODE_FIX) {
1725:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
1726:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
1727:src/display.c **** 		else {
1728:src/display.c **** 			extra_digits = exp;
1729:src/display.c **** 			/* We might have push the fixed decimals off the
1730:src/display.c **** 			 * screen so adjust if so.
1731:src/display.c **** 			 */
1732:src/display.c **** 			if (extra_digits + dd > (*display_digits - 1))
1733:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
1734:src/display.c **** 		}
1735:src/display.c **** 	}
1736:src/display.c **** 
1737:src/display.c **** 	// Round the mantissa to the number of digits desired
1738:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
1739:src/display.c **** 	if (*p >= '5') {	// Round up
1740:src/display.c **** 		*p = '0';
1741:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
1742:src/display.c **** 		if (r == p) {   // Special case 9.9999999
1743:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
1744:src/display.c **** 			mantissa[0] = '1';
1745:src/display.c **** 			exp++;
1746:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
1747:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
1748:src/display.c **** 				extra_digits = 0;
1749:src/display.c **** 			}
1750:src/display.c **** 		} else {
1751:src/display.c **** 			while (*--p == '9')
1752:src/display.c **** 				*p = '0';
1753:src/display.c **** 			(*p)++;
1754:src/display.c **** 		}
1755:src/display.c **** 	}
1756:src/display.c **** 
1757:src/display.c **** 	// Zap what is left
ARM GAS  /tmp/ccAnlOT7.s 			page 46


1758:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
1759:src/display.c **** 
1760:src/display.c **** 	p = mantissa;
1761:src/display.c **** 	switch (mode) {
1762:src/display.c **** 	default:
1763:src/display.c **** 	case MODE_STD:   
1764:src/display.c **** 		for (count = *display_digits; mantissa[count] == '0'; count--);
1765:src/display.c **** 		if (count != *display_digits)
1766:src/display.c **** 			count++;
1767:src/display.c **** 		// Too big or too small to fit on display
1768:src/display.c **** 		if (exp >= *display_digits || exp < (count - *display_digits)) {
1769:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
1770:src/display.c **** 			case -1:
1771:src/display.c **** 			case 2:
1772:src/display.c **** 				*obp++ = *p++;
1773:src/display.c **** 				odig++;
1774:src/display.c **** 				dd--;
1775:src/display.c **** 				exp--;
1776:src/display.c **** 			case -2:
1777:src/display.c **** 			case 1:
1778:src/display.c **** 				*obp++ = *p++;
1779:src/display.c **** 				odig++;
1780:src/display.c **** 				dd--;
1781:src/display.c **** 				exp--;
1782:src/display.c **** 			case 0:
1783:src/display.c **** 				;
1784:src/display.c **** 			};
1785:src/display.c **** 			*obp++ = *p++;
1786:src/display.c **** 			odig++;
1787:src/display.c **** 			*obp++ = '.';
1788:src/display.c **** 			for (i=1; i<count; i++) {
1789:src/display.c **** 				*obp++ = *p++;
1790:src/display.c **** 				odig++;
1791:src/display.c **** 			}
1792:src/display.c **** 			show_exp = 1;
1793:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
1794:src/display.c **** 			for(i=0; i<=exp; i++) {
1795:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1796:src/display.c **** 					*obp++ = ',';
1797:src/display.c **** 				*obp++ = *p++;
1798:src/display.c **** 				odig++;
1799:src/display.c **** 			}
1800:src/display.c **** 			*obp++ = '.';
1801:src/display.c **** 			if (count > (exp + 1)) {
1802:src/display.c **** 				for (i=exp+1; i<count; i++) {
1803:src/display.c **** 					*obp++ = *p++;
1804:src/display.c **** 					odig++;
1805:src/display.c **** 				}
1806:src/display.c **** 			}
1807:src/display.c **** 		} else {		// All digits to right of decimal point
1808:src/display.c **** 			*obp++ = '0';
1809:src/display.c **** 			odig++;
1810:src/display.c **** 			*obp++ = '.';
1811:src/display.c **** 			for (i=exp+1; i<0; i++) {
1812:src/display.c **** 				*obp++ = '0';
1813:src/display.c **** 				odig++;
1814:src/display.c **** 			}
ARM GAS  /tmp/ccAnlOT7.s 			page 47


1815:src/display.c **** 			for (i=0; i<count; i++) {
1816:src/display.c **** 				*obp++ = *p++;
1817:src/display.c **** 				odig++;
1818:src/display.c **** 			}
1819:src/display.c **** 		}
1820:src/display.c **** 		break;
1821:src/display.c **** 
1822:src/display.c **** 	case MODE_FIX:
1823:src/display.c **** 		j = 0;
1824:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
1825:src/display.c **** 			for (i=0; i<=exp; i++) {
1826:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1827:src/display.c **** 					*obp++ = ',';
1828:src/display.c **** 				*obp++ = *p++;
1829:src/display.c **** 				odig++;
1830:src/display.c **** 			}
1831:src/display.c **** 			*obp++ = '.';
1832:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
1833:src/display.c **** 				*obp++ = *p++;
1834:src/display.c **** 				odig++;
1835:src/display.c **** 			}
1836:src/display.c **** 		} else {		// All digits to right of decimal point
1837:src/display.c **** 			*obp++ = '0';
1838:src/display.c **** 			odig++;
1839:src/display.c **** 			*obp++ = '.';
1840:src/display.c **** 			for (i=exp+1; i<0; i++) {
1841:src/display.c **** 				*obp++ = '0';
1842:src/display.c **** 				odig++;
1843:src/display.c **** 				dd--;
1844:src/display.c **** 			}
1845:src/display.c **** 			while (dd-- > 0) {
1846:src/display.c **** 				*obp++ = *p++;
1847:src/display.c **** 				odig++;
1848:src/display.c **** 			}
1849:src/display.c **** 		}
1850:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
1851:src/display.c **** 		if (trimzeros)
1852:src/display.c **** 			while (obp > x && obp[-1] == '0') {
1853:src/display.c **** 				obp--;
1854:src/display.c **** 				odig--;
1855:src/display.c **** 			}
1856:src/display.c **** #endif			
1857:src/display.c **** 		break;
1858:src/display.c **** 
1859:src/display.c **** 	case MODE_ENG:
1860:src/display.c **** 		switch (exp % 3) {
1861:src/display.c **** 		case -1:
1862:src/display.c **** 		case 2:
1863:src/display.c **** 			*obp++ = *p++;
1864:src/display.c **** 			odig++;
1865:src/display.c **** 			dd--;
1866:src/display.c **** 			exp--;
1867:src/display.c **** 		case -2:
1868:src/display.c **** 		case 1:
1869:src/display.c **** 			*obp++ = *p++;
1870:src/display.c **** 			odig++;
1871:src/display.c **** 			dd--;
ARM GAS  /tmp/ccAnlOT7.s 			page 48


1872:src/display.c **** 			exp--;
1873:src/display.c **** 		case 0:
1874:src/display.c **** 			;
1875:src/display.c **** 		};
1876:src/display.c **** 	// Falling through
1877:src/display.c **** 
1878:src/display.c **** 	case MODE_SCI:
1879:src/display.c **** 		*obp++ = *p++;
1880:src/display.c **** 		odig++;
1881:src/display.c **** 		*obp++ = '.';
1882:src/display.c **** 		dd--;
1883:src/display.c **** 		while (dd-- >= 0) {
1884:src/display.c **** 			*obp++ = *p++;
1885:src/display.c **** 			odig++;
1886:src/display.c **** 		}
1887:src/display.c **** 		show_exp = 1;
1888:src/display.c **** 	}
1889:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1890:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
1891:src/display.c **** 		while (obp > x && obp[-1] == '0') {
1892:src/display.c **** 			obp--;
1893:src/display.c **** 			odig--;
1894:src/display.c **** 		}
1895:src/display.c **** #endif	
1896:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
1897:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
1898:src/display.c **** 		set_x_dn(z, res, display_digits);
1899:src/display.c **** 		return;
1900:src/display.c **** 	}
1901:src/display.c **** 	/* Finally, send the output to the display */
1902:src/display.c **** 	*obp = '\0';
1903:src/display.c **** 	if (odig > *display_digits)
1904:src/display.c **** 		odig = *display_digits;
1905:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
1906:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
1907:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
1908:src/display.c **** 	if (negative) {
1909:src/display.c **** 		if (res) *res++ = '-';
1910:src/display.c **** 		else {
1911:src/display.c **** 			if (j == 0)
1912:src/display.c **** 				SET_MANT_SIGN;
1913:src/display.c **** 			else
1914:src/display.c **** 				set_dig(j - SEGS_PER_DIGIT, '-');
1915:src/display.c **** 		}
1916:src/display.c **** 	}
1917:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
1918:src/display.c **** 		if (c == '.') {
1919:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1920:src/display.c **** 		} else if (c == ',') {
1921:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
1922:src/display.c **** 		} else {
1923:src/display.c **** 			res = set_dig_s(j, c, res);
1924:src/display.c **** 			j += SEGS_PER_DIGIT;
1925:src/display.c **** 		}
1926:src/display.c **** 	}
1927:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
1928:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
ARM GAS  /tmp/ccAnlOT7.s 			page 49


1929:src/display.c **** 		if ( !res ) {
1930:src/display.c **** 				set_exp(exp, 4, res);
1931:src/display.c **** 		}
1932:src/display.c **** 		else {
1933:src/display.c **** 			set_exp(exp, 0, res);
1934:src/display.c **** 		}
1935:src/display.c **** 	}
1936:src/display.c **** #else
1937:src/display.c **** 	if (show_exp)
1938:src/display.c **** 		set_exp(exp, 0, res);
1939:src/display.c **** #endif
1940:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
1941:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
1942:src/display.c **** 	*display_digits = odig;
1943:src/display.c **** }
1944:src/display.c **** 
1945:src/display.c **** #if defined(QTGUI) || defined(IOS)
1946:src/display.c **** void format_display(char *buf) {
1947:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
1948:src/display.c **** 	{
1949:src/display.c **** 		const char *p = get_cmdline();
1950:src/display.c **** 		if (p == NULL) {
1951:src/display.c **** 			format_reg(regX_idx, buf);
1952:src/display.c **** 		} else {
1953:src/display.c **** 			scopy(buf, p);
1954:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
1955:src/display.c **** 			if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
1956:src/display.c **** 				scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
1957:src/display.c **** 				buf[CmdLineEex] = 'E';
1958:src/display.c **** 				buf[CmdLineEex+1] = '-';
1959:src/display.c **** 			}
1960:src/display.c **** #  endif
1961:src/display.c **** 		}
1962:src/display.c **** 	}
1963:src/display.c **** 	else {
1964:src/display.c **** 		buf[0]=0;
1965:src/display.c **** 	}
1966:src/display.c **** }
1967:src/display.c **** #endif
1968:src/display.c **** 
1969:src/display.c **** void format_reg(int index, char *buf) {
1970:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
1971:src/display.c **** 
1972:src/display.c **** 	if (is_intmode())
1973:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
1974:src/display.c **** #ifndef HP16C_MODE_CHANGE
1975:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
1976:src/display.c **** 		decNumber x;
1977:src/display.c **** 		int s;
1978:src/display.c **** 		unsigned long long int v;
1979:src/display.c **** 
1980:src/display.c **** 		getRegister(&x, index);
1981:src/display.c **** 		v = dn_to_ull(&x, &s);
1982:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
1983:src/display.c **** 	}
1984:src/display.c **** #endif
1985:src/display.c **** 	else
ARM GAS  /tmp/ccAnlOT7.s 			page 50


1986:src/display.c **** 		set_x(r, buf, UState.mode_double);
1987:src/display.c **** }
1988:src/display.c **** 
1989:src/display.c **** /* Display the status screen */
1990:src/display.c **** static void show_status(void) {
1991:src/display.c **** 	int i, n;
1992:src/display.c **** 	int j = SEGS_EXP_BASE;
1993:src/display.c **** 	const int status = State2.status - 3;
1994:src/display.c **** 	char buf[16], *p = buf;
1995:src/display.c **** 	unsigned int pc;
1996:src/display.c **** 
1997:src/display.c **** 	if (status == -2) {
1998:src/display.c **** 		set_status("Free:");
1999:src/display.c **** 		p = num_arg(buf, free_mem());
2000:src/display.c **** 		p = scopy(p, " , FL. ");
2001:src/display.c **** 		p = num_arg(p, free_flash());
2002:src/display.c **** 		*p = '\0';
2003:src/display.c **** 		set_digits_string(buf, 0);
2004:src/display.c **** 	}
2005:src/display.c **** 	else if (status == -1) {
2006:src/display.c **** 		/* Top line */
2007:src/display.c **** 		p = scopy(buf, "Regs:");
2008:src/display.c **** 		if (SizeStatRegs)
2009:src/display.c **** 			p = scopy(p, " \221\006\006+");
2010:src/display.c **** 		*p = '\0';
2011:src/display.c **** 		set_status(buf);
2012:src/display.c **** 
2013:src/display.c **** 		/* Bottom line */
2014:src/display.c **** 		p = num_arg(buf, global_regs());
2015:src/display.c **** 		if (LocalRegs < 0) {
2016:src/display.c **** 			p = scopy(p, " , Loc. ");
2017:src/display.c **** 			p = num_arg(p, local_regs());
2018:src/display.c **** 		}
2019:src/display.c **** 		*p = '\0';
2020:src/display.c **** 		set_digits_string(buf, 0);
2021:src/display.c **** 	} else {
2022:src/display.c **** 		int base;
2023:src/display.c **** 		int end;
2024:src/display.c **** 		int group = 10;
2025:src/display.c **** 		int start = 0;
2026:src/display.c **** 		
2027:src/display.c **** 		if (status <= 9) {
2028:src/display.c **** 			base = 10 * status;
2029:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
2030:src/display.c **** 			p = scopy(buf, "FL ");
2031:src/display.c **** 			p = num_arg_0(p, base, 2);
2032:src/display.c **** 			*p++ = '-';
2033:src/display.c **** 			p = num_arg_0(p, end, 2);
2034:src/display.c **** 			*p = '\0';
2035:src/display.c **** 			set_status(buf);
2036:src/display.c **** 		}
2037:src/display.c **** 		else if (status == 10) {
2038:src/display.c **** 			base = regX_idx;
2039:src/display.c **** 			end = regK_idx;
2040:src/display.c **** 			start = 3;
2041:src/display.c **** 			group = 4;
2042:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
ARM GAS  /tmp/ccAnlOT7.s 			page 51


2043:src/display.c **** 		}
2044:src/display.c **** 		else { // status == 11
2045:src/display.c **** 			base = LOCAL_FLAG_BASE;
2046:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
2047:src/display.c **** 			set_status("FL.00-.15");
2048:src/display.c **** 		}
2049:src/display.c **** 		j = start * SEGS_PER_DIGIT;
2050:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
2051:src/display.c **** 		j += SEGS_PER_DIGIT;
2052:src/display.c **** 		for (i = start; i < group + start; i++) {
2053:src/display.c **** 			int k = i + base - start;
2054:src/display.c **** 			int l = get_user_flag(k);
2055:src/display.c **** 			k += group;
2056:src/display.c **** 			if (end >= k) {
2057:src/display.c **** 				l |= (get_user_flag(k) << 1);
2058:src/display.c **** 				k += group;
2059:src/display.c **** 				if (end >= k)
2060:src/display.c **** 					l |= (get_user_flag(k) << 2);
2061:src/display.c **** 			}
2062:src/display.c **** 			set_dig(j, l);
2063:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
2064:src/display.c **** 			j += SEGS_PER_DIGIT;
2065:src/display.c **** 			if (i == 4) {
2066:src/display.c **** 				set_dig(j, 8);
2067:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
2068:src/display.c **** 				j += SEGS_PER_DIGIT;
2069:src/display.c **** 			}
2070:src/display.c **** 		}
2071:src/display.c **** 	}
2072:src/display.c **** 
2073:src/display.c **** 	j = SEGS_EXP_BASE;
2074:src/display.c **** 	pc = state_pc();
2075:src/display.c **** 	if (isXROM(pc))
2076:src/display.c **** 		pc = 1;
2077:src/display.c **** 	for (n=i=0; i<4; i++) {
2078:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2079:src/display.c **** 			if (++n == 4) {
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2081:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2082:src/display.c **** 			} else {
2083:src/display.c **** 				set_dig(j, 'A'+i);
2084:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
2085:src/display.c **** 			}
2086:src/display.c **** 		}
2087:src/display.c **** 	}
2088:src/display.c **** }
2089:src/display.c **** 
2090:src/display.c **** 
2091:src/display.c **** /* Display the list of alpha labels */
2092:src/display.c **** static void show_label(void) {
2093:src/display.c **** 	char buf[16];
2094:src/display.c **** 	unsigned short int pc = State2.digval;
2095:src/display.c **** 	unsigned int op = getprog(pc);
2096:src/display.c **** 	int n = nLIB(pc);
2097:src/display.c **** 	unsigned short int lblpc;
2098:src/display.c **** 
2099:src/display.c **** 	set_status(prt((opcode)op, buf));
ARM GAS  /tmp/ccAnlOT7.s 			page 52


2100:src/display.c **** 	set_digits_string(libname[n], 0);
2101:src/display.c **** #ifndef REALBUILD
2102:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2103:src/display.c **** #endif
2104:src/display.c **** 
2105:src/display.c **** 	if (op & OP_DBL) {
2106:src/display.c **** 		lblpc = findmultilbl(op, 0);
2107:src/display.c **** 		if (lblpc != pc) {
2108:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2109:src/display.c **** 			n = nLIB(lblpc);
2110:src/display.c **** 			if (n == REGION_RAM)
2111:src/display.c **** 				set_exp(lblpc, 1, CNULL);
2112:src/display.c **** 			else {
2113:src/display.c **** 				set_exp_digits_string(libname[n], CNULL);
2114:src/display.c **** #ifndef REALBUILD
2115:src/display.c **** 				scopy(LastDisplayedNumber, libname_text[n]);
2116:src/display.c **** #endif
2117:src/display.c **** 			}
2118:src/display.c **** 		}
2119:src/display.c **** 	}
2120:src/display.c **** }
2121:src/display.c **** 
2122:src/display.c **** /* Display a list of register contents */
2123:src/display.c **** static void show_registers(void) {
2124:src/display.c **** 	char buf[16], *bp;
2125:src/display.c **** 	int n = State2.digval;
2126:src/display.c **** 	
2127:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2128:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2129:src/display.c **** 			State2.local   ? LOCAL_REG_BASE + n : 
2130:src/display.c **** 			n;
2131:src/display.c **** #else
2132:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2133:src/display.c **** 			n;
2134:src/display.c **** #endif
2135:src/display.c **** 
2136:src/display.c **** 	if (State2.disp_as_alpha) {
2137:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
2138:src/display.c **** 	}
2139:src/display.c **** 	else {
2140:src/display.c **** 		xset(buf, '\0', 16);
2141:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2142:src/display.c **** 		bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2143:src/display.c **** #else
2144:src/display.c **** 		bp = scopy_spc(buf, "Reg ");
2145:src/display.c **** #endif
2146:src/display.c **** 		if (State2.local) {
2147:src/display.c **** 			*bp++ = '.';
2148:src/display.c **** 			if (n >= 100) {
2149:src/display.c **** 				*bp++ = '1';
2150:src/display.c **** 				n -= 100;
2151:src/display.c **** 			}
2152:src/display.c **** 		}
2153:src/display.c **** 		if (n < 100)
2154:src/display.c **** 			bp = num_arg_0(bp, n, 2);
2155:src/display.c **** 		else
2156:src/display.c **** 			*bp++ = REGNAMES[n - regX_idx];
ARM GAS  /tmp/ccAnlOT7.s 			page 53


2157:src/display.c **** 		set_status(buf);
2158:src/display.c **** 	}
2159:src/display.c **** 	format_reg(reg, CNULL);
2160:src/display.c **** }
2161:src/display.c **** 
2162:src/display.c **** 
2163:src/display.c **** static void set_annunciators(void)
2164:src/display.c **** {
2165:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2166:src/display.c **** 
2167:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2168:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2169:src/display.c **** 	 * browsing constants.
2170:src/display.c **** 	 */
2171:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2172:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2173:src/display.c **** #else
2174:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2175:src/display.c **** #endif
2176:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2177:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2178:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2179:src/display.c **** 	set_IO_annunciator();
2180:src/display.c **** 
2181:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2182:src/display.c **** 	 */
2183:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2184:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2185:src/display.c **** }
2186:src/display.c **** 
2187:src/display.c **** 
2188:src/display.c **** /*
2189:src/display.c ****  *  Toggle the little "=" sign
2190:src/display.c ****  */
2191:src/display.c **** void set_IO_annunciator(void) {
2192:src/display.c **** #ifndef DM42
2193:src/display.c ****     int on = SerialOn
2194:src/display.c **** #endif
2195:src/display.c **** #ifdef DM42
2196:src/display.c ****     int on = 0
2197:src/display.c **** #endif
2198:src/display.c **** #ifdef REALBUILD
2199:src/display.c **** 	  || DebugFlag
2200:src/display.c **** #endif
2201:src/display.c **** #ifdef INFRARED
2202:src/display.c **** 	  || PrinterColumn != 0
2203:src/display.c **** #endif
2204:src/display.c **** 	;
2205:src/display.c **** 
2206:src/display.c **** 	if (on != IoAnnunciator) {
2207:src/display.c **** 		dot(LIT_EQ, on);
2208:src/display.c **** 		IoAnnunciator = on;
2209:src/display.c **** 		finish_display(); //LIT_EQ
2210:src/display.c **** 	}
2211:src/display.c **** }
2212:src/display.c **** 
2213:src/display.c **** /*
ARM GAS  /tmp/ccAnlOT7.s 			page 54


2214:src/display.c ****  *  Update the display
2215:src/display.c ****  */
2216:src/display.c **** void display(void) {
2217:src/display.c **** 	int i, j;
2218:src/display.c **** 	char buf[40], *bp = buf;
2219:src/display.c **** 	const char *p;
2220:src/display.c **** 	int annuc = 0;
2221:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2222:src/display.c **** 	int skip = 0;
2223:src/display.c **** 	int x_disp = 0;
2224:src/display.c **** 	const int shift = cur_shift();
2225:src/display.c **** 
2226:src/display.c **** 
2227:src/display.c **** 
2228:src/display.c **** 	if (State2.disp_freeze) {
2229:src/display.c **** 		State2.disp_freeze = 0;
2230:src/display.c **** 		State2.disp_temp = 1;
2231:src/display.c **** #ifdef CONSOLE
2232:src/display.c **** 		JustDisplayed = 1;
2233:src/display.c **** #endif
2234:src/display.c **** 		ShowRPN = 0;
2235:src/display.c **** 		return;
2236:src/display.c **** 	}
2237:src/display.c **** 
2238:src/display.c **** 	if (WasDataEntry) {
2239:src/display.c **** #if defined(QTGUI) || defined(IOS)
2240:src/display.c **** 		xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2241:src/display.c **** 		LastDisplayedNumber[NUMBER_LENGTH]=0;
2242:src/display.c **** 		xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2243:src/display.c **** 		LastDisplayedExponent[EXPONENT_LENGTH]=0;
2244:src/display.c **** #endif
2245:src/display.c **** 		wait_for_display(); // Normally called from reset_disp()
2246:src/display.c **** 
2247:src/display.c **** 		// Erase 7-segment display
2248:src/display.c **** 		for (i = 0; i <= EXP_SIGN; ++i) {
2249:src/display.c **** 			clr_dot(i);
2250:src/display.c **** 		}
2251:src/display.c **** 		goto only_update_x;
2252:src/display.c **** 	}
2253:src/display.c **** 
2254:src/display.c **** 	// Clear display
2255:src/display.c **** 	reset_disp();
2256:src/display.c **** 
2257:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2258:src/display.c **** 	if (State2.cmplx  && !cata) {
2259:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
2260:src/display.c **** 		set_status(buf);
2261:src/display.c **** 	}
2262:src/display.c **** 	if (State2.version) {
2263:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2264:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
2265:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2266:src/display.c **** #ifndef REALBUILD
2267:src/display.c **** 		scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2268:src/display.c **** 		scopy(LastDisplayedExponent, " ");
2269:src/display.c **** #endif
2270:src/display.c **** 		xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
ARM GAS  /tmp/ccAnlOT7.s 			page 55


2271:src/display.c **** 		set_status(vers);
2272:src/display.c **** 		skip = 1;
2273:src/display.c **** 		goto nostk;
2274:src/display.c **** 	} else if (State2.confirm) {
2275:src/display.c **** 		set_status(S_SURE);
2276:src/display.c **** 	} else if (State2.hyp) {
2277:src/display.c **** 		bp = scopy(bp, "HYP");
2278:src/display.c **** 		if (! State2.dot)
2279:src/display.c **** 			*bp++ = '\235';
2280:src/display.c **** 		set_status(buf);
2281:src/display.c **** 	} else if (State2.gtodot) {
2282:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2283:src/display.c **** 		bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2284:src/display.c **** 		if (State2.numdigit > 0)
2285:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2286:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
2287:src/display.c **** 			*bp++ = '_';
2288:src/display.c **** 		set_status(buf);
2289:src/display.c **** 	} else if (State2.rarg) {
2290:src/display.c **** 		/* Commands with arguments */
2291:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2292:src/display.c **** 		if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2293:src/display.c **** 			bp = scopy(bp, "\177\006\006");
2294:src/display.c **** #endif
2295:src/display.c **** 		bp = scopy(bp, argcmds[CmdBase].cmd);
2296:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
2297:src/display.c **** 		if (State2.dot) {
2298:src/display.c **** 			*bp++ = 's';
2299:src/display.c **** 			*bp++ = '_';
2300:src/display.c **** 		} else if (shift == SHIFT_F) {
2301:src/display.c **** 			*bp++ = '\021';
2302:src/display.c **** 			*bp++ = '_';
2303:src/display.c **** 		} else {
2304:src/display.c **** 			/* const int maxdigits = State2.shuffle ? 4 
2305:src/display.c **** 						: State2.ind ? 2 
2306:src/display.c **** 						: num_arg_digits(CmdBase); */
2307:src/display.c **** 			if (State2.local)
2308:src/display.c **** 				*bp++ = '.';
2309:src/display.c **** 			if (State2.numdigit > 0) {
2310:src/display.c **** 				if (State2.shuffle)
2311:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2312:src/display.c **** 						*bp++ = REGNAMES[j & 3];
2313:src/display.c **** 				else
2314:src/display.c **** 					bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2315:src/display.c **** 			}
2316:src/display.c **** 			// for (i = State2.numdigit; i < maxdigits; i++)
2317:src/display.c **** 				*bp++ = '_';
2318:src/display.c **** 		}
2319:src/display.c **** 		set_status(buf);
2320:src/display.c **** 	} else if (State2.test != TST_NONE) {
2321:src/display.c **** 		*bp++ = 'x';
2322:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
2323:src/display.c **** 		*bp++ = '_';
2324:src/display.c **** 		*bp++ = '?';
2325:src/display.c **** 		set_status(buf);
2326:src/display.c **** 	} else if (cata) {
2327:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
ARM GAS  /tmp/ccAnlOT7.s 			page 56


2328:src/display.c **** 		char b2[16];
2329:src/display.c **** 		const char *p;
2330:src/display.c **** 
2331:src/display.c **** 		bp = scopy(bp, "\177\006\006");
2332:src/display.c **** 		p = catcmd(op, b2);
2333:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
2334:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
2335:src/display.c **** 		bp = scopy(bp, p);
2336:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2337:src/display.c **** 			// State2.disp_small = 1;
2338:src/display.c **** 			if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2339:src/display.c **** 				set_digits_string("0 to 255", 0);
2340:src/display.c **** 			else
2341:src/display.c **** 				set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2342:src/display.c **** 			skip = 1;
2343:src/display.c **** 		} else if (State2.runmode) {
2344:src/display.c **** 			if (cata == CATALOGUE_CONV) {
2345:src/display.c **** 				decNumber x, r;
2346:src/display.c **** 				decimal64 z;
2347:src/display.c **** 
2348:src/display.c **** 				getX(&x);
2349:src/display.c **** 				if (opKIND(op) == KIND_MON) {
2350:src/display.c **** 					const unsigned int f = argKIND(op);
2351:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2352:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2353:src/display.c **** 						update_speed(0);
2354:src/display.c **** 						fp(&r, &x);
2355:src/display.c **** 					}
2356:src/display.c **** 					else
2357:src/display.c **** 						set_NaN(&r);
2358:src/display.c **** 				} else
2359:src/display.c **** 					do_conv(&r, op & RARG_MASK, &x);
2360:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
2361:src/display.c **** 				packed_from_number(&z, &r);
2362:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
2363:src/display.c **** 				skip = 1;
2364:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2365:src/display.c **** 				REGISTER z, *const x = StackBase;
2366:src/display.c **** 				copyreg(&z, x);
2367:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
2368:src/display.c **** 				set_x(x, CNULL, is_dblmode());
2369:src/display.c **** 				copyreg(x, &z);
2370:src/display.c **** 				skip = 1;
2371:src/display.c **** 			}
2372:src/display.c **** 		}
2373:src/display.c **** 		set_status(buf);
2374:src/display.c **** 	} else if (State2.multi) {
2375:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2376:src/display.c **** 		if (State2.numdigit > 0) {
2377:src/display.c **** 			*bp++ = (char) State2.digval;
2378:src/display.c **** 			if (State2.numdigit > 1)
2379:src/display.c **** 				*bp++ = State2.digval2;
2380:src/display.c **** 		}
2381:src/display.c **** 		set_status(buf);
2382:src/display.c **** 	} else if (State2.status) {
2383:src/display.c **** 		show_status();
2384:src/display.c **** 		skip = 1;
ARM GAS  /tmp/ccAnlOT7.s 			page 57


2385:src/display.c **** 	} else if (State2.labellist) {
2386:src/display.c **** 		show_label();
2387:src/display.c **** 		skip = 1;
2388:src/display.c **** 	} else if (State2.registerlist) {
2389:src/display.c **** 		show_registers();
2390:src/display.c **** 		skip = 1;
2391:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2392:src/display.c **** 			annunciators();
2393:src/display.c **** 		}
2394:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2395:src/display.c **** 	} else if (State2.disp_as_alpha) {
2396:src/display.c **** 		set_status(alpha_rcl_s(regX_idx, buf));
2397:src/display.c **** #endif
2398:src/display.c **** 	} else if (State2.runmode) {
2399:src/display.c **** 	  if (DispMsg) { 
2400:src/display.c **** 			set_status(DispMsg);
2401:src/display.c **** 		} else if (DispPlot) {
2402:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2403:src/display.c **** 		} else if (State2.alphas) {
2404:src/display.c **** #if 0
2405:src/display.c **** 			set_digits_string("AlpHA", 0);
2406:src/display.c **** #endif
2407:src/display.c **** 			bp = scopy(buf, Alpha);
2408:src/display.c **** 			j = State2.alpha_pos;
2409:src/display.c **** 			if (j != 0) {
2410:src/display.c **** 				i = slen(buf);
2411:src/display.c **** 				//				print_debug(200,i);
2412:src/display.c **** 				j *= 6;
2413:src/display.c **** 				//print_debug(201,j);
2414:src/display.c **** 				if ( i - j >= 12 ) {
2415:src/display.c **** 					buf[ (i - j) ] = '\0';
2416:src/display.c **** 					set_status_right(buf);
2417:src/display.c **** 				}
2418:src/display.c **** 				else {
2419:src/display.c **** 					set_status(buf);
2420:src/display.c **** 				}
2421:src/display.c **** 			} else {
2422:src/display.c **** 				if (shift != SHIFT_N) {
2423:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
2424:src/display.c **** 					*bp++ = '\0';
2425:src/display.c **** 				}
2426:src/display.c **** 				set_status_right(buf);
2427:src/display.c **** 			}
2428:src/display.c **** 		} else {
2429:src/display.c **** 			annuc = 1;
2430:src/display.c **** 		}
2431:src/display.c **** 	} else {
2432:src/display.c **** #ifndef DM42
2433:src/display.c **** 	        show_progtrace(buf);
2434:src/display.c **** #endif
2435:src/display.c **** 		i = state_pc();
2436:src/display.c **** 		if (i > 0)
2437:src/display.c **** 			set_status(prt(getprog(i), buf));
2438:src/display.c **** 		else
2439:src/display.c **** 			set_status("");
2440:src/display.c **** 		set_dot(STO_annun);
2441:src/display.c **** #if 0
ARM GAS  /tmp/ccAnlOT7.s 			page 58


2442:src/display.c **** 		if (State2.smode == SDISP_SHOW) {
2443:src/display.c **** 			unsigned short int crc;
2444:src/display.c **** 			crc = checksum_program();
2445:src/display.c **** 			j = SEGS_PER_DIGIT * 0;
2446:src/display.c **** 			for (i=0; i<4; i++) {
2447:src/display.c **** 				set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2448:src/display.c **** 				crc >>= 4;
2449:src/display.c **** 				j += SEGS_PER_DIGIT;
2450:src/display.c **** 			}
2451:src/display.c **** 			skip = 1;
2452:src/display.c **** 		}
2453:src/display.c **** 		else
2454:src/display.c **** #endif
2455:src/display.c **** 		if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2456:src/display.c **** 			annuc = 1;
2457:src/display.c **** 		goto nostk;
2458:src/display.c **** 	}
2459:src/display.c **** 	show_stack();
2460:src/display.c **** nostk:	show_flags();
2461:src/display.c **** 	if (!skip) {
2462:src/display.c **** 		if (State2.runmode) {
2463:src/display.c **** only_update_x:
2464:src/display.c **** 			p = get_cmdline();
2465:src/display.c **** 			if (p == NULL || cata) {
2466:src/display.c **** 				if (ShowRegister != -1) {
2467:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
2468:src/display.c **** 					format_reg(ShowRegister, CNULL);
2469:src/display.c **** 				}
2470:src/display.c **** 				else
2471:src/display.c **** 					set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2472:src/display.c **** 			} else {
2473:src/display.c **** 				disp_x(p);
2474:src/display.c **** 				x_disp = 1;
2475:src/display.c **** 			}
2476:src/display.c **** 			if (WasDataEntry) {
2477:src/display.c **** 				goto finish;
2478:src/display.c **** 			}
2479:src/display.c **** 		} else {
2480:src/display.c **** 			unsigned int pc = state_pc();
2481:src/display.c **** 			unsigned int upc = user_pc(pc);
2482:src/display.c **** 			const int n = nLIB(pc);
2483:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2484:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2485:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2486:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2487:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
2488:src/display.c **** #ifndef REALBUILD
2489:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2490:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2491:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2492:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2493:src/display.c ****       { // allow local declaration of b and l in C (not C++) on VisualStudio
2494:src/display.c **** 			  char *b=buf;
2495:src/display.c **** 			  char *l=LastDisplayedNumber;
2496:src/display.c **** 			  *l++=' ';
2497:src/display.c **** 			  while(*b) {
2498:src/display.c **** 				  *l++=*b++;
ARM GAS  /tmp/ccAnlOT7.s 			page 59


2499:src/display.c **** 				  *l++=' ';
2500:src/display.c **** 			  }
2501:src/display.c **** 			  *l=0;
2502:src/display.c ****       }
2503:src/display.c **** #endif
2504:src/display.c **** 		}
2505:src/display.c **** 	}
2506:src/display.c **** 	set_annunciators();
2507:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2508:src/display.c **** 		ShowRPN = 0;
2509:src/display.c **** 		dot(RPN, 0);
2510:src/display.c **** 	}
2511:src/display.c **** 	// disp_temp disables the <- key
2512:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2513:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2514:src/display.c **** 
2515:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2516:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2517:src/display.c ****  		annunciators();
2518:src/display.c ****  	State2.hms = 0;
2519:src/display.c **** #else
2520:src/display.c **** 
2521:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2522:src/display.c **** 		annunciators();
2523:src/display.c **** 	
2524:src/display.c **** 
2525:src/display.c **** 
2526:src/display.c **** #endif
2527:src/display.c **** 
2528:src/display.c **** finish:
2529:src/display.c **** 	State2.version = 0;
2530:src/display.c **** 	State2.disp_as_alpha = 0;
2531:src/display.c **** 	State2.smode = SDISP_NORMAL;
2532:src/display.c **** 	State2.invalid_disp = 0;
2533:src/display.c **** 	ShowRegister = regX_idx;
2534:src/display.c **** 	DispMsg = CNULL;
2535:src/display.c **** 	DispPlot = 0;
2536:src/display.c **** 	State2.disp_small = 0;
2537:src/display.c **** 	finish_display();
2538:src/display.c **** #ifdef CONSOLE
2539:src/display.c **** 	JustDisplayed = 1;
2540:src/display.c **** #endif
2541:src/display.c **** }
2542:src/display.c **** 
2543:src/display.c **** /*
2544:src/display.c ****  *  Frozen display will revert to normal only after another call to display();
2545:src/display.c ****  */
2546:src/display.c **** void frozen_display()
2547:src/display.c **** {
2548:src/display.c **** 	State2.disp_freeze = 0;
2549:src/display.c **** 	display();
2550:src/display.c **** 	State2.disp_freeze = 1;
2551:src/display.c **** }
2552:src/display.c **** 
2553:src/display.c **** static void set_status_graphic(const unsigned char *graphic) {
2554:src/display.c **** 	int glen = *graphic++;
2555:src/display.c **** 	int i, j;
ARM GAS  /tmp/ccAnlOT7.s 			page 60


2556:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2557:src/display.c **** 	unsigned long long int mat[6];
2558:src/display.c **** 
2559:src/display.c **** 	xset(mat, 0, sizeof(mat));
2560:src/display.c **** #endif
2561:src/display.c **** #ifndef REALBUILD
2562:src/display.c **** 	forceDispPlot=1;
2563:src/display.c **** #endif
2564:src/display.c **** 	if (glen <= 0)			return;
2565:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2566:src/display.c **** 
2567:src/display.c **** 	for (i=0; i<6; i++)
2568:src/display.c **** 		for (j=1; j<=glen; j++) {
2569:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2570:src/display.c **** 			if (graphic[j] & (1 << i))
2571:src/display.c **** 				mat[i] |= 1LL << j;
2572:src/display.c **** #else
2573:src/display.c **** 			dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2574:src/display.c **** #endif
2575:src/display.c **** 		}
2576:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2577:src/display.c **** 	set_status_grob(mat);
2578:src/display.c **** #endif
2579:src/display.c **** }
2580:src/display.c **** 
2581:src/display.c **** 
2582:src/display.c **** /* Take the given string and display as much of it as possible on the top
2583:src/display.c ****  * line of the display.  The font size is set by the smallp parameter.
2584:src/display.c ****  * We allow character to go one pixel beyond the display since the rightmost
2585:src/display.c ****  * column is almost always blank.
2586:src/display.c ****  */
2587:src/display.c **** static void set_status_sized(const char *str, int smallp) {
 679              		.loc 1 2587 59 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 544
 682              		@ frame_needed = 0, uses_anonymous_args = 0
2588:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 2588 2 view .LVU201
2589:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2590:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2591:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 2591 2 view .LVU202
2592:src/display.c **** #endif
2593:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 2593 2 view .LVU203
2594:src/display.c **** 	int i, j;
 686              		.loc 1 2594 2 view .LVU204
2595:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 2595 2 view .LVU205
2587:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 2587 59 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
ARM GAS  /tmp/ccAnlOT7.s 			page 61


 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
2596:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2597:src/display.c **** 	unsigned long long int mat[6];
2598:src/display.c **** 
2599:src/display.c **** 	xset(mat, 0, sizeof(mat));
2600:src/display.c **** #endif
2601:src/display.c **** #ifndef REALBUILD
2602:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 2602 2 view .LVU207
 701 0004 634C     		ldr	r4, .L113
2587:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 2587 59 view .LVU208
 703 0006 ADF5097D 		sub	sp, sp, #548
 704              		.cfi_def_cfa_offset 584
2595:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 2595 34 view .LVU209
 706 000a 0B1E     		subs	r3, r1, #0
 707 000c 0293     		str	r3, [sp, #8]
2587:src/display.c **** 	unsigned short int posns[257];
 708              		.loc 1 2587 59 view .LVU210
 709 000e 0090     		str	r0, [sp]
2595:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 2595 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713 0016 0023     		moveq	r3, #0
 714              		.loc 1 2602 2 view .LVU212
 715 0018 0146     		mov	r1, r0
 716              	.LVL57:
 717              		.loc 1 2602 2 view .LVU213
 718 001a 2046     		mov	r0, r4
 719              	.LVL58:
2595:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 720              		.loc 1 2595 34 view .LVU214
 721 001c 0393     		str	r3, [sp, #12]
 722              	.LVL59:
 723              		.loc 1 2602 2 is_stmt 1 view .LVU215
 724 001e FFF7FEFF 		bl	scopy
 725              	.LVL60:
2603:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2604:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 726              		.loc 1 2604 2 view .LVU216
 727              		.loc 1 2604 14 view .LVU217
 728              		.loc 1 2604 31 is_stmt 0 view .LVU218
 729 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 730              		.loc 1 2604 2 view .LVU219
 731 0024 13B9     		cbnz	r3, .L70
 732 0026 07E0     		b	.L68
 733              	.LVL61:
 734              	.L69:
 735              		.loc 1 2604 14 is_stmt 1 discriminator 1 view .LVU220
 736 0028 0134     		adds	r4, r4, #1
 737              		.loc 1 2604 2 is_stmt 0 discriminator 1 view .LVU221
ARM GAS  /tmp/ccAnlOT7.s 			page 62


 738 002a 2BB1     		cbz	r3, .L68
 739              	.L70:
 740              	.LVL62:
2605:src/display.c **** 		if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 741              		.loc 1 2605 3 is_stmt 1 view .LVU222
 742              		.loc 1 2605 6 is_stmt 0 view .LVU223
 743 002c 072B     		cmp	r3, #7
 744              		.loc 1 2605 38 view .LVU224
 745 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 746              		.loc 1 2605 6 view .LVU225
 747 0030 FAD1     		bne	.L69
 748              		.loc 1 2605 38 discriminator 1 view .LVU226
 749 0032 002B     		cmp	r3, #0
 750 0034 40F0A180 		bne	.L109
 751              	.LVL63:
 752              	.L68:
2606:src/display.c **** 			scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2607:src/display.c **** 			if (LastDisplayedText[i] != '\0')
2608:src/display.c **** 				++i;
2609:src/display.c **** 		}
2610:src/display.c **** 		else {
2611:src/display.c **** 			++i;
2612:src/display.c **** 		}
2613:src/display.c **** 	}
2614:src/display.c **** #endif
2615:src/display.c **** 	forceDispPlot=0;
 753              		.loc 1 2615 2 is_stmt 1 view .LVU227
2616:src/display.c **** #endif
2617:src/display.c **** #ifdef RP_PREFIX
2618:src/display.c **** 	RectPolConv = 0;
 754              		.loc 1 2618 14 is_stmt 0 view .LVU228
 755 0038 574B     		ldr	r3, .L113+4
2615:src/display.c **** #endif
 756              		.loc 1 2615 15 view .LVU229
 757 003a 584A     		ldr	r2, .L113+8
 758 003c 0027     		movs	r7, #0
 759              		.loc 1 2618 14 view .LVU230
 760 003e 1F60     		str	r7, [r3]
2619:src/display.c **** #endif
2620:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2621:src/display.c **** 	findlengths(posns, smallp);
2622:src/display.c **** #endif
2623:src/display.c **** 	while (*str != '\0' && x <= BITMAP_WIDTH+1)  {
 761              		.loc 1 2623 9 view .LVU231
 762 0040 009B     		ldr	r3, [sp]
2615:src/display.c **** #endif
 763              		.loc 1 2615 15 view .LVU232
 764 0042 1770     		strb	r7, [r2]
2618:src/display.c **** #endif
 765              		.loc 1 2618 2 is_stmt 1 view .LVU233
 766              		.loc 1 2623 2 view .LVU234
 767              	.LVL64:
 768              		.loc 1 2623 8 view .LVU235
 769              		.loc 1 2623 9 is_stmt 0 view .LVU236
 770 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
2624:src/display.c **** 		int c;
2625:src/display.c **** 		int width;
ARM GAS  /tmp/ccAnlOT7.s 			page 63


2626:src/display.c **** 		unsigned char cmap[6];
2627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2628:src/display.c **** 		int real_width;
2629:src/display.c **** 		int current_smallp;
2630:src/display.c **** 
2631:src/display.c **** 		// A 007 byte followed by a mode byte changes the way the following character is printed.
2632:src/display.c **** 		// Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2633:src/display.c **** 		// Bits 6-5: 00 -> don't change font
2634:src/display.c **** 		//           01 -> (not used)
2635:src/display.c **** 		//           10 -> use big font
2636:src/display.c **** 		//           11 -> use small font
2637:src/display.c **** 		// Bits 4-0: character will be considered this wide
2638:src/display.c **** 		if (str[0] == '\007') {
2639:src/display.c **** 			width = str[1] & 0x1F;
2640:src/display.c **** 			switch (str[1] & 0x60) {
2641:src/display.c **** 			default:
2642:src/display.c **** 			case 0x00:	current_smallp = smallp;
2643:src/display.c **** 					break;
2644:src/display.c **** 			case 0x40:	current_smallp = 0;
2645:src/display.c **** 					break;
2646:src/display.c **** 			case 0x60:	current_smallp = 1;
2647:src/display.c **** 					break;
2648:src/display.c **** 			}
2649:src/display.c **** 			c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
2650:src/display.c **** 			str += 3;
2651:src/display.c **** 
2652:src/display.c **** 			real_width = charlengths(c);
2653:src/display.c **** 		} else {
2654:src/display.c **** 			c = (unsigned char) *str++ + offset;
2655:src/display.c **** 			real_width = width = charlengths(c);
2656:src/display.c **** 			current_smallp = smallp;
2657:src/display.c **** 		}
2658:src/display.c **** 
2659:src/display.c **** 		if (x + real_width > BITMAP_WIDTH+1)
2660:src/display.c **** 			break;
2661:src/display.c **** 
2662:src/display.c **** 		if (posns_state != current_smallp) {
2663:src/display.c **** 			findlengths(posns, current_smallp);
2664:src/display.c **** 			posns_state = current_smallp;
2665:src/display.c **** 		}
2666:src/display.c **** 		unpackchar(c, cmap, current_smallp, posns);
2667:src/display.c **** #else
2668:src/display.c **** 		c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
2669:src/display.c **** 
2670:src/display.c **** 		//cmap = &charset[c][0];
2671:src/display.c **** 		width = charlengths(c);
2672:src/display.c **** 
2673:src/display.c **** 		if (x + width > BITMAP_WIDTH+1)
2674:src/display.c **** 			break;
2675:src/display.c **** 
2676:src/display.c **** 		/* Decode the packed character bytes */
2677:src/display.c **** 		unpackchar(c, cmap, smallp, posns);
2678:src/display.c **** #endif
2679:src/display.c **** 
2680:src/display.c **** 		for (i=0; i<6; i++)
2681:src/display.c **** 			for (j=0; j<width; j++) {
2682:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
ARM GAS  /tmp/ccAnlOT7.s 			page 64


2683:src/display.c **** 					break;
2684:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2685:src/display.c **** 				if (cmap[i] & (1 << j))
2686:src/display.c **** 					mat[i] |= 1LL << (x+j);
2687:src/display.c **** #else
2688:src/display.c **** 				dot((x+j)*6+i+MATRIX_BASE, (cmap[i] & (1 << j))?1:0);
2689:src/display.c **** #endif
2690:src/display.c **** 			}
2691:src/display.c **** 		x += width;
2692:src/display.c **** 	}
2693:src/display.c **** 
2694:src/display.c **** 
2695:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2696:src/display.c **** 	set_status_grob(mat);
2697:src/display.c **** #else
2698:src/display.c **** 	for (i=MATRIX_BASE + 6*x; i<MAX_DOTS; i++)
 771              		.loc 1 2698 8 view .LVU237
 772 0046 8E24     		movs	r4, #142
2623:src/display.c **** 		int c;
 773              		.loc 1 2623 8 view .LVU238
 774 0048 002D     		cmp	r5, #0
 775 004a 7ED0     		beq	.L66
 776              	.LBB150:
2638:src/display.c **** 			width = str[1] & 0x1F;
 777              		.loc 1 2638 6 view .LVU239
 778 004c 072D     		cmp	r5, #7
 779              	.LBE150:
2591:src/display.c **** #endif
 780              		.loc 1 2591 6 view .LVU240
 781 004e 4FF0FF04 		mov	r4, #255
 782              	.LVL65:
 783              	.LBB159:
2624:src/display.c **** 		int width;
 784              		.loc 1 2624 3 is_stmt 1 view .LVU241
2625:src/display.c **** 		unsigned char cmap[6];
 785              		.loc 1 2625 3 view .LVU242
2626:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 786              		.loc 1 2626 3 view .LVU243
2628:src/display.c **** 		int current_smallp;
 787              		.loc 1 2628 3 view .LVU244
2629:src/display.c **** 
 788              		.loc 1 2629 3 view .LVU245
2638:src/display.c **** 			width = str[1] & 0x1F;
 789              		.loc 1 2638 3 view .LVU246
2638:src/display.c **** 			width = str[1] & 0x1F;
 790              		.loc 1 2638 6 is_stmt 0 view .LVU247
 791 0052 64D1     		bne	.L71
 792              	.L111:
2639:src/display.c **** 			switch (str[1] & 0x60) {
 793              		.loc 1 2639 4 is_stmt 1 view .LVU248
2639:src/display.c **** 			switch (str[1] & 0x60) {
 794              		.loc 1 2639 15 is_stmt 0 view .LVU249
 795 0054 009B     		ldr	r3, [sp]
 796              	.LVL66:
2639:src/display.c **** 			switch (str[1] & 0x60) {
 797              		.loc 1 2639 15 view .LVU250
 798 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 65


 799 0058 06F06003 		and	r3, r6, #96
2640:src/display.c **** 			default:
 800              		.loc 1 2640 4 view .LVU251
 801 005c 402B     		cmp	r3, #64
2639:src/display.c **** 			switch (str[1] & 0x60) {
 802              		.loc 1 2639 10 view .LVU252
 803 005e 06F01F06 		and	r6, r6, #31
 804              	.LVL67:
2640:src/display.c **** 			default:
 805              		.loc 1 2640 4 is_stmt 1 view .LVU253
 806 0062 00F08580 		beq	.L72
 807 0066 602B     		cmp	r3, #96
 808 0068 7BD0     		beq	.L73
 809              	.LVL68:
2649:src/display.c **** 			str += 3;
 810              		.loc 1 2649 4 view .LVU254
2649:src/display.c **** 			str += 3;
 811              		.loc 1 2649 8 is_stmt 0 view .LVU255
 812 006a 009B     		ldr	r3, [sp]
 813 006c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
2649:src/display.c **** 			str += 3;
 814              		.loc 1 2649 55 view .LVU256
 815 006e 029B     		ldr	r3, [sp, #8]
 816 0070 002B     		cmp	r3, #0
 817 0072 00F08C80 		beq	.L92
 818 0076 05F58075 		add	r5, r5, #256
 819 007a 9A46     		mov	r10, r3
 820              	.LVL69:
 821              	.L75:
2650:src/display.c **** 
 822              		.loc 1 2650 4 is_stmt 1 discriminator 4 view .LVU257
2652:src/display.c **** 		} else {
 823              		.loc 1 2652 17 is_stmt 0 discriminator 4 view .LVU258
 824 007c 2846     		mov	r0, r5
 825 007e FFF7FEFF 		bl	charlengths
 826              	.LVL70:
2650:src/display.c **** 
 827              		.loc 1 2650 8 discriminator 4 view .LVU259
 828 0082 009B     		ldr	r3, [sp]
2659:src/display.c **** 			break;
 829              		.loc 1 2659 9 discriminator 4 view .LVU260
 830 0084 3844     		add	r0, r0, r7
2650:src/display.c **** 
 831              		.loc 1 2650 8 discriminator 4 view .LVU261
 832 0086 0333     		adds	r3, r3, #3
2659:src/display.c **** 			break;
 833              		.loc 1 2659 6 discriminator 4 view .LVU262
 834 0088 4B28     		cmp	r0, #75
2650:src/display.c **** 
 835              		.loc 1 2650 8 discriminator 4 view .LVU263
 836 008a 0093     		str	r3, [sp]
 837              	.LVL71:
2652:src/display.c **** 		} else {
 838              		.loc 1 2652 4 is_stmt 1 discriminator 4 view .LVU264
2659:src/display.c **** 			break;
 839              		.loc 1 2659 3 discriminator 4 view .LVU265
2659:src/display.c **** 			break;
ARM GAS  /tmp/ccAnlOT7.s 			page 66


 840              		.loc 1 2659 6 is_stmt 0 discriminator 4 view .LVU266
 841 008c 55D8     		bhi	.L87
 842              	.L112:
2662:src/display.c **** 			findlengths(posns, current_smallp);
 843              		.loc 1 2662 3 is_stmt 1 view .LVU267
2662:src/display.c **** 			findlengths(posns, current_smallp);
 844              		.loc 1 2662 6 is_stmt 0 view .LVU268
 845 008e A245     		cmp	r10, r4
2663:src/display.c **** 			posns_state = current_smallp;
 846              		.loc 1 2663 4 view .LVU269
 847 0090 07AB     		add	r3, sp, #28
 848              	.LVL72:
2662:src/display.c **** 			findlengths(posns, current_smallp);
 849              		.loc 1 2662 6 view .LVU270
 850 0092 05D0     		beq	.L78
2663:src/display.c **** 			posns_state = current_smallp;
 851              		.loc 1 2663 4 is_stmt 1 view .LVU271
 852 0094 1846     		mov	r0, r3
 853 0096 5146     		mov	r1, r10
 854 0098 0193     		str	r3, [sp, #4]
 855 009a FFF7FEFF 		bl	findlengths
 856              	.LVL73:
 857 009e 019B     		ldr	r3, [sp, #4]
2664:src/display.c **** 		}
 858              		.loc 1 2664 4 view .LVU272
 859              	.LVL74:
 860              	.L78:
2666:src/display.c **** #else
 861              		.loc 1 2666 3 view .LVU273
 862 00a0 2846     		mov	r0, r5
 863 00a2 05A9     		add	r1, sp, #20
 864 00a4 5246     		mov	r2, r10
 865 00a6 07EB4708 		add	r8, r7, r7, lsl #1
 866 00aa FFF7FEFF 		bl	unpackchar
 867              	.LVL75:
2680:src/display.c **** 			for (j=0; j<width; j++) {
 868              		.loc 1 2680 3 view .LVU274
2680:src/display.c **** 			for (j=0; j<width; j++) {
 869              		.loc 1 2680 13 view .LVU275
 870 00ae 4FEA4808 		lsl	r8, r8, #1
 871 00b2 05AD     		add	r5, sp, #20
 872              	.LVL76:
2680:src/display.c **** 			for (j=0; j<width; j++) {
 873              		.loc 1 2680 13 is_stmt 0 view .LVU276
 874 00b4 A8F5DE78 		sub	r8, r8, #444
2666:src/display.c **** #else
 875              		.loc 1 2666 3 view .LVU277
 876 00b8 40F24A24 		movw	r4, #586
 877              	.LVL77:
 878              	.L79:
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 879              		.loc 1 2681 14 is_stmt 1 view .LVU278
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 880              		.loc 1 2681 4 is_stmt 0 view .LVU279
 881 00bc 002E     		cmp	r6, #0
 882 00be 1FDD     		ble	.L85
2682:src/display.c **** 					break;
ARM GAS  /tmp/ccAnlOT7.s 			page 67


 883              		.loc 1 2682 5 is_stmt 1 view .LVU280
2682:src/display.c **** 					break;
 884              		.loc 1 2682 8 is_stmt 0 view .LVU281
 885 00c0 492F     		cmp	r7, #73
 886 00c2 1DD8     		bhi	.L85
 887 00c4 08EB0409 		add	r9, r8, r4
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 888              		.loc 1 2681 10 view .LVU282
 889 00c8 4FF0000B 		mov	fp, #0
 890 00cc 09E0     		b	.L80
 891              	.LVL78:
 892              	.L110:
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 893              		.loc 1 2681 24 view .LVU283
 894 00ce 0BF1010B 		add	fp, fp, #1
 895              	.LVL79:
 896              	.LBB151:
 897              	.LBB152:
 328:src/display.c **** 	else	clr_dot(n);
 898              		.loc 1 328 10 view .LVU284
 899 00d2 FFF7FEFF 		bl	set_dot
 900              	.LVL80:
 328:src/display.c **** 	else	clr_dot(n);
 901              		.loc 1 328 10 view .LVU285
 902              	.LBE152:
 903              	.LBE151:
2682:src/display.c **** 					break;
 904              		.loc 1 2682 5 is_stmt 1 view .LVU286
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 905              		.loc 1 2681 23 view .LVU287
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 906              		.loc 1 2681 14 view .LVU288
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 907              		.loc 1 2681 4 is_stmt 0 view .LVU289
 908 00d6 5E45     		cmp	r6, fp
 909 00d8 09F10609 		add	r9, r9, #6
 910 00dc 10D0     		beq	.L85
 911              	.L84:
2682:src/display.c **** 					break;
 912              		.loc 1 2682 8 view .LVU290
 913 00de 4C45     		cmp	r4, r9
 914 00e0 0ED0     		beq	.L85
 915              	.LVL81:
 916              	.L80:
2688:src/display.c **** #endif
 917              		.loc 1 2688 5 is_stmt 1 discriminator 2 view .LVU291
 918              	.LBB156:
 919              	.LBI151:
 327:src/display.c **** 	if (on)	set_dot(n);
 920              		.loc 1 327 6 discriminator 2 view .LVU292
 921              	.LBB153:
 328:src/display.c **** 	else	clr_dot(n);
 922              		.loc 1 328 2 discriminator 2 view .LVU293
 328:src/display.c **** 	else	clr_dot(n);
 923              		.loc 1 328 10 discriminator 2 view .LVU294
 329:src/display.c **** }
 924              		.loc 1 329 7 discriminator 2 view .LVU295
ARM GAS  /tmp/ccAnlOT7.s 			page 68


 925              	.LBE153:
 926              	.LBE156:
2688:src/display.c **** #endif
 927              		.loc 1 2688 37 is_stmt 0 discriminator 2 view .LVU296
 928 00e2 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
2688:src/display.c **** #endif
 929              		.loc 1 2688 52 discriminator 2 view .LVU297
 930 00e4 41FA0BF1 		asr	r1, r1, fp
 931              	.LBB157:
 932              	.LBB154:
 328:src/display.c **** 	else	clr_dot(n);
 933              		.loc 1 328 5 discriminator 2 view .LVU298
 934 00e8 11F0010F 		tst	r1, #1
 328:src/display.c **** 	else	clr_dot(n);
 935              		.loc 1 328 10 discriminator 2 view .LVU299
 936 00ec 4846     		mov	r0, r9
 328:src/display.c **** 	else	clr_dot(n);
 937              		.loc 1 328 5 discriminator 2 view .LVU300
 938 00ee EED1     		bne	.L110
 939              	.LBE154:
 940              	.LBE157:
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 941              		.loc 1 2681 24 view .LVU301
 942 00f0 0BF1010B 		add	fp, fp, #1
 943              	.LVL82:
 944              	.LBB158:
 945              	.LBB155:
 329:src/display.c **** }
 946              		.loc 1 329 7 view .LVU302
 947 00f4 FFF7FEFF 		bl	clr_dot
 948              	.LVL83:
 329:src/display.c **** }
 949              		.loc 1 329 7 view .LVU303
 950              	.LBE155:
 951              	.LBE158:
2682:src/display.c **** 					break;
 952              		.loc 1 2682 5 is_stmt 1 view .LVU304
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 953              		.loc 1 2681 23 view .LVU305
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 954              		.loc 1 2681 14 view .LVU306
2681:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 955              		.loc 1 2681 4 is_stmt 0 view .LVU307
 956 00f8 5E45     		cmp	r6, fp
 957 00fa 09F10609 		add	r9, r9, #6
 958 00fe EED1     		bne	.L84
 959              	.LVL84:
 960              	.L85:
2680:src/display.c **** 			for (j=0; j<width; j++) {
 961              		.loc 1 2680 18 is_stmt 1 view .LVU308
2680:src/display.c **** 			for (j=0; j<width; j++) {
 962              		.loc 1 2680 13 view .LVU309
 963 0100 0134     		adds	r4, r4, #1
 964              	.LVL85:
2680:src/display.c **** 			for (j=0; j<width; j++) {
 965              		.loc 1 2680 3 is_stmt 0 view .LVU310
 966 0102 B4F5147F 		cmp	r4, #592
ARM GAS  /tmp/ccAnlOT7.s 			page 69


 967 0106 05F10105 		add	r5, r5, #1
 968 010a D7D1     		bne	.L79
2691:src/display.c **** 	}
 969              		.loc 1 2691 3 is_stmt 1 view .LVU311
 970              	.LBE159:
2623:src/display.c **** 		int c;
 971              		.loc 1 2623 9 is_stmt 0 view .LVU312
 972 010c 009B     		ldr	r3, [sp]
 973 010e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 974              	.LBB160:
2691:src/display.c **** 	}
 975              		.loc 1 2691 5 view .LVU313
 976 0110 3744     		add	r7, r7, r6
 977              	.LVL86:
2691:src/display.c **** 	}
 978              		.loc 1 2691 5 view .LVU314
 979              	.LBE160:
2623:src/display.c **** 		int c;
 980              		.loc 1 2623 8 is_stmt 1 view .LVU315
 981 0112 95B1     		cbz	r5, .L87
2623:src/display.c **** 		int c;
 982              		.loc 1 2623 22 is_stmt 0 discriminator 1 view .LVU316
 983 0114 4B2F     		cmp	r7, #75
 984 0116 10D8     		bhi	.L87
 985              	.LBB161:
2638:src/display.c **** 			width = str[1] & 0x1F;
 986              		.loc 1 2638 6 view .LVU317
 987 0118 072D     		cmp	r5, #7
 988              	.LBE161:
 989 011a 5446     		mov	r4, r10
 990              	.LVL87:
 991              	.LBB162:
2624:src/display.c **** 		int width;
 992              		.loc 1 2624 3 is_stmt 1 view .LVU318
2625:src/display.c **** 		unsigned char cmap[6];
 993              		.loc 1 2625 3 view .LVU319
2626:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 994              		.loc 1 2626 3 view .LVU320
2628:src/display.c **** 		int current_smallp;
 995              		.loc 1 2628 3 view .LVU321
2629:src/display.c **** 
 996              		.loc 1 2629 3 view .LVU322
2638:src/display.c **** 			width = str[1] & 0x1F;
 997              		.loc 1 2638 3 view .LVU323
2638:src/display.c **** 			width = str[1] & 0x1F;
 998              		.loc 1 2638 6 is_stmt 0 view .LVU324
 999 011c 9AD0     		beq	.L111
 1000              	.LVL88:
 1001              	.L71:
2654:src/display.c **** 			real_width = width = charlengths(c);
 1002              		.loc 1 2654 4 is_stmt 1 view .LVU325
2654:src/display.c **** 			real_width = width = charlengths(c);
 1003              		.loc 1 2654 6 is_stmt 0 view .LVU326
 1004 011e 039B     		ldr	r3, [sp, #12]
 1005              	.LVL89:
2654:src/display.c **** 			real_width = width = charlengths(c);
 1006              		.loc 1 2654 6 view .LVU327
ARM GAS  /tmp/ccAnlOT7.s 			page 70


 1007 0120 1D44     		add	r5, r5, r3
2655:src/display.c **** 			current_smallp = smallp;
 1008              		.loc 1 2655 25 view .LVU328
 1009 0122 2846     		mov	r0, r5
 1010 0124 FFF7FEFF 		bl	charlengths
 1011              	.LVL90:
2654:src/display.c **** 			real_width = width = charlengths(c);
 1012              		.loc 1 2654 28 view .LVU329
 1013 0128 009B     		ldr	r3, [sp]
2655:src/display.c **** 			current_smallp = smallp;
 1014              		.loc 1 2655 23 view .LVU330
 1015 012a DDF808A0 		ldr	r10, [sp, #8]
 1016 012e 0646     		mov	r6, r0
2659:src/display.c **** 			break;
 1017              		.loc 1 2659 9 view .LVU331
 1018 0130 3844     		add	r0, r0, r7
2654:src/display.c **** 			real_width = width = charlengths(c);
 1019              		.loc 1 2654 28 view .LVU332
 1020 0132 0133     		adds	r3, r3, #1
2659:src/display.c **** 			break;
 1021              		.loc 1 2659 6 view .LVU333
 1022 0134 4B28     		cmp	r0, #75
2654:src/display.c **** 			real_width = width = charlengths(c);
 1023              		.loc 1 2654 28 view .LVU334
 1024 0136 0093     		str	r3, [sp]
 1025              	.LVL91:
2655:src/display.c **** 			current_smallp = smallp;
 1026              		.loc 1 2655 4 is_stmt 1 view .LVU335
2656:src/display.c **** 		}
 1027              		.loc 1 2656 4 view .LVU336
2659:src/display.c **** 			break;
 1028              		.loc 1 2659 3 view .LVU337
2659:src/display.c **** 			break;
 1029              		.loc 1 2659 6 is_stmt 0 view .LVU338
 1030 0138 A9D9     		bls	.L112
 1031              	.LVL92:
 1032              	.L87:
2659:src/display.c **** 			break;
 1033              		.loc 1 2659 6 view .LVU339
 1034              	.LBE162:
 1035              		.loc 1 2698 2 is_stmt 1 view .LVU340
 1036              		.loc 1 2698 24 is_stmt 0 view .LVU341
 1037 013a 07EB4704 		add	r4, r7, r7, lsl #1
 1038 013e 6400     		lsls	r4, r4, #1
 1039              		.loc 1 2698 21 view .LVU342
 1040 0140 8E34     		adds	r4, r4, #142
 1041              	.LVL93:
 1042              		.loc 1 2698 28 is_stmt 1 view .LVU343
 1043              		.loc 1 2698 2 is_stmt 0 view .LVU344
 1044 0142 40F24923 		movw	r3, #585
 1045              	.LVL94:
 1046              		.loc 1 2698 2 view .LVU345
 1047 0146 9C42     		cmp	r4, r3
 1048 0148 07DC     		bgt	.L62
 1049              	.LVL95:
 1050              	.L66:
 1051              		.loc 1 2698 2 discriminator 3 view .LVU346
ARM GAS  /tmp/ccAnlOT7.s 			page 71


 1052 014a 40F24A25 		movw	r5, #586
 1053              	.L88:
 1054              	.LVL96:
2699:src/display.c **** 		clr_dot(i);
 1055              		.loc 1 2699 3 is_stmt 1 discriminator 3 view .LVU347
 1056 014e 2046     		mov	r0, r4
2698:src/display.c **** 		clr_dot(i);
 1057              		.loc 1 2698 41 is_stmt 0 discriminator 3 view .LVU348
 1058 0150 0134     		adds	r4, r4, #1
 1059              	.LVL97:
 1060              		.loc 1 2699 3 discriminator 3 view .LVU349
 1061 0152 FFF7FEFF 		bl	clr_dot
 1062              	.LVL98:
2698:src/display.c **** 		clr_dot(i);
 1063              		.loc 1 2698 40 is_stmt 1 discriminator 3 view .LVU350
2698:src/display.c **** 		clr_dot(i);
 1064              		.loc 1 2698 28 discriminator 3 view .LVU351
2698:src/display.c **** 		clr_dot(i);
 1065              		.loc 1 2698 2 is_stmt 0 discriminator 3 view .LVU352
 1066 0156 AC42     		cmp	r4, r5
 1067 0158 F9D1     		bne	.L88
 1068              	.L62:
2700:src/display.c **** #endif
2701:src/display.c **** }
 1069              		.loc 1 2701 1 view .LVU353
 1070 015a 0DF5097D 		add	sp, sp, #548
 1071              		.cfi_remember_state
 1072              		.cfi_def_cfa_offset 36
 1073              	.LVL99:
 1074              		.loc 1 2701 1 view .LVU354
 1075              		@ sp needed
 1076 015e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1077              	.LVL100:
 1078              	.L73:
 1079              		.cfi_restore_state
 1080              	.LBB163:
2646:src/display.c **** 					break;
 1081              		.loc 1 2646 15 is_stmt 1 view .LVU355
2647:src/display.c **** 			}
 1082              		.loc 1 2647 6 view .LVU356
2649:src/display.c **** 			str += 3;
 1083              		.loc 1 2649 4 view .LVU357
2649:src/display.c **** 			str += 3;
 1084              		.loc 1 2649 8 is_stmt 0 view .LVU358
 1085 0162 009B     		ldr	r3, [sp]
 1086 0164 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
2646:src/display.c **** 					break;
 1087              		.loc 1 2646 30 view .LVU359
 1088 0166 4FF0010A 		mov	r10, #1
 1089 016a 00F58075 		add	r5, r0, #256
 1090 016e 85E7     		b	.L75
 1091              	.LVL101:
 1092              	.L72:
2644:src/display.c **** 					break;
 1093              		.loc 1 2644 15 is_stmt 1 view .LVU360
2645:src/display.c **** 			case 0x60:	current_smallp = 1;
 1094              		.loc 1 2645 6 view .LVU361
ARM GAS  /tmp/ccAnlOT7.s 			page 72


2649:src/display.c **** 			str += 3;
 1095              		.loc 1 2649 4 view .LVU362
2649:src/display.c **** 			str += 3;
 1096              		.loc 1 2649 8 is_stmt 0 view .LVU363
 1097 0170 009B     		ldr	r3, [sp]
2644:src/display.c **** 					break;
 1098              		.loc 1 2644 30 view .LVU364
 1099 0172 4FF0000A 		mov	r10, #0
2649:src/display.c **** 			str += 3;
 1100              		.loc 1 2649 8 view .LVU365
 1101 0176 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1102 0178 80E7     		b	.L75
 1103              	.LVL102:
 1104              	.L109:
2649:src/display.c **** 			str += 3;
 1105              		.loc 1 2649 8 view .LVU366
 1106              	.LBE163:
2606:src/display.c **** 			if (LastDisplayedText[i] != '\0')
 1107              		.loc 1 2606 4 is_stmt 1 view .LVU367
 1108 017a A11C     		adds	r1, r4, #2
 1109 017c 2046     		mov	r0, r4
 1110 017e FFF7FEFF 		bl	scopy
 1111              	.LVL103:
2607:src/display.c **** 				++i;
 1112              		.loc 1 2607 4 view .LVU368
2607:src/display.c **** 				++i;
 1113              		.loc 1 2607 7 is_stmt 0 view .LVU369
 1114 0182 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1115 0184 002B     		cmp	r3, #0
 1116 0186 3FF457AF 		beq	.L68
 1117 018a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1118 018c 4CE7     		b	.L69
 1119              	.LVL104:
 1120              	.L92:
 1121              	.LBB164:
2607:src/display.c **** 				++i;
 1122              		.loc 1 2607 7 view .LVU370
 1123 018e DDF808A0 		ldr	r10, [sp, #8]
 1124 0192 73E7     		b	.L75
 1125              	.L114:
 1126              		.align	2
 1127              	.L113:
 1128 0194 00000000 		.word	LastDisplayedText
 1129 0198 00000000 		.word	RectPolConv
 1130 019c 00000000 		.word	forceDispPlot
 1131              	.LBE164:
 1132              		.cfi_endproc
 1133              	.LFE37:
 1135              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1136              		.align	2
 1137              	.LC0:
 1138 0000 48494700 		.ascii	"HIG\000"
 1139              		.section	.text.set_exp,"ax",%progbits
 1140              		.align	1
 1141              		.p2align 2,,3
 1142              		.syntax unified
 1143              		.thumb
ARM GAS  /tmp/ccAnlOT7.s 			page 73


 1144              		.thumb_func
 1145              		.fpu fpv4-sp-d16
 1147              	set_exp:
 1148              	.LVL105:
 1149              	.LFB14:
 430:src/display.c **** 	union {
 1150              		.loc 1 430 52 is_stmt 1 view -0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 431:src/display.c **** 		char buf[4];
 1154              		.loc 1 431 2 view .LVU372
 435:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1155              		.loc 1 435 2 view .LVU373
 449:src/display.c **** #endif
 1156              		.loc 1 449 2 view .LVU374
 452:src/display.c **** 	if (exp < 0) {
 1157              		.loc 1 452 2 view .LVU375
 430:src/display.c **** 	union {
 1158              		.loc 1 430 52 is_stmt 0 view .LVU376
 1159 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1160              		.cfi_def_cfa_offset 20
 1161              		.cfi_offset 4, -20
 1162              		.cfi_offset 5, -16
 1163              		.cfi_offset 6, -12
 1164              		.cfi_offset 7, -8
 1165              		.cfi_offset 14, -4
 453:src/display.c **** 		negative = 1;
 1166              		.loc 1 453 5 view .LVU377
 1167 0002 051E     		subs	r5, r0, #0
 430:src/display.c **** 	union {
 1168              		.loc 1 430 52 view .LVU378
 1169 0004 83B0     		sub	sp, sp, #12
 1170              		.cfi_def_cfa_offset 32
 430:src/display.c **** 	union {
 1171              		.loc 1 430 52 view .LVU379
 1172 0006 0F46     		mov	r7, r1
 1173              	.LVL106:
 453:src/display.c **** 		negative = 1;
 1174              		.loc 1 453 2 is_stmt 1 view .LVU380
 430:src/display.c **** 	union {
 1175              		.loc 1 430 52 is_stmt 0 view .LVU381
 1176 0008 1446     		mov	r4, r2
 453:src/display.c **** 		negative = 1;
 1177              		.loc 1 453 5 view .LVU382
 1178 000a 0ADB     		blt	.L139
 452:src/display.c **** 	if (exp < 0) {
 1179              		.loc 1 452 11 view .LVU383
 1180 000c 01F00203 		and	r3, r1, #2
 1181              	.LVL107:
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1182              		.loc 1 460 2 is_stmt 1 view .LVU384
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1183              		.loc 1 460 5 is_stmt 0 view .LVU385
 1184 0010 A2B3     		cbz	r2, .L120
 465:src/display.c **** #endif
 1185              		.loc 1 465 3 is_stmt 1 view .LVU386
ARM GAS  /tmp/ccAnlOT7.s 			page 74


 465:src/display.c **** #endif
 1186              		.loc 1 465 6 is_stmt 0 view .LVU387
 1187 0012 B5F57A7F 		cmp	r5, #1000
 1188 0016 2ADB     		blt	.L121
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1189              		.loc 1 467 4 is_stmt 1 view .LVU388
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1190              		.loc 1 467 7 is_stmt 0 view .LVU389
 1191 0018 73BB     		cbnz	r3, .L126
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1192              		.loc 1 467 19 is_stmt 1 discriminator 1 view .LVU390
 1193              	.LVL108:
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1194              		.loc 1 467 26 is_stmt 0 discriminator 1 view .LVU391
 1195 001a 3A23     		movs	r3, #58
 1196              	.LVL109:
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 1197              		.loc 1 467 26 discriminator 1 view .LVU392
 1198 001c 04F8013B 		strb	r3, [r4], #1
 1199              	.LVL110:
 474:src/display.c **** 	}
 1200              		.loc 1 474 3 is_stmt 1 discriminator 1 view .LVU393
 1201 0020 08E0     		b	.L122
 1202              	.LVL111:
 1203              	.L139:
 454:src/display.c **** 		exp = -exp;
 1204              		.loc 1 454 3 view .LVU394
 455:src/display.c **** 	}
 1205              		.loc 1 455 3 view .LVU395
 455:src/display.c **** 	}
 1206              		.loc 1 455 7 is_stmt 0 view .LVU396
 1207 0022 6E42     		rsbs	r6, r5, #0
 1208              	.LVL112:
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1209              		.loc 1 460 2 is_stmt 1 view .LVU397
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1210              		.loc 1 460 5 is_stmt 0 view .LVU398
 1211 0024 AAB3     		cbz	r2, .L117
 465:src/display.c **** #endif
 1212              		.loc 1 465 3 is_stmt 1 view .LVU399
 465:src/display.c **** #endif
 1213              		.loc 1 465 6 is_stmt 0 view .LVU400
 1214 0026 15F57A7F 		cmn	r5, #1000
 1215 002a 2DDC     		bgt	.L140
 1216              	.LVL113:
 1217              	.L118:
 474:src/display.c **** 	}
 1218              		.loc 1 474 17 is_stmt 1 discriminator 1 view .LVU401
 474:src/display.c **** 	}
 1219              		.loc 1 474 24 is_stmt 0 discriminator 1 view .LVU402
 1220 002c 2D23     		movs	r3, #45
 1221 002e 04F8013B 		strb	r3, [r4], #1
 1222              	.LVL114:
 474:src/display.c **** 	}
 1223              		.loc 1 474 24 discriminator 1 view .LVU403
 1224 0032 3546     		mov	r5, r6
 1225              	.LVL115:
ARM GAS  /tmp/ccAnlOT7.s 			page 75


 1226              	.L122:
 522:src/display.c **** #endif
 1227              		.loc 1 522 2 is_stmt 1 view .LVU404
 1228 0034 01AE     		add	r6, sp, #4
 1229 0036 0021     		movs	r1, #0
 1230 0038 3046     		mov	r0, r6
 1231 003a 0422     		movs	r2, #4
 1232 003c FFF7FEFF 		bl	xset
 1233              	.LVL116:
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1234              		.loc 1 524 2 view .LVU405
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1235              		.loc 1 524 5 is_stmt 0 view .LVU406
 1236 0040 17F0050F 		tst	r7, #5
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1237              		.loc 1 525 3 view .LVU407
 1238 0044 2946     		mov	r1, r5
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1239              		.loc 1 524 5 view .LVU408
 1240 0046 09D0     		beq	.L125
 1241              	.LVL117:
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1242              		.loc 1 525 3 is_stmt 1 view .LVU409
 1243 0048 0322     		movs	r2, #3
 1244 004a 3046     		mov	r0, r6
 1245 004c FFF7FEFF 		bl	num_arg_0
 1246              	.LVL118:
 1247              	.L124:
 547:src/display.c **** }
 1248              		.loc 1 547 2 view .LVU410
 1249 0050 2146     		mov	r1, r4
 1250 0052 3046     		mov	r0, r6
 1251 0054 FFF7FEFF 		bl	set_exp_digits_string
 1252              	.LVL119:
 548:src/display.c **** 
 1253              		.loc 1 548 1 is_stmt 0 view .LVU411
 1254 0058 03B0     		add	sp, sp, #12
 1255              		.cfi_remember_state
 1256              		.cfi_def_cfa_offset 20
 1257              		@ sp needed
 1258 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1259              	.LVL120:
 1260              	.L125:
 1261              		.cfi_restore_state
 545:src/display.c **** no_number:
 1262              		.loc 1 545 3 is_stmt 1 view .LVU412
 1263 005c 3046     		mov	r0, r6
 1264 005e FFF7FEFF 		bl	num_arg
 1265              	.LVL121:
 547:src/display.c **** }
 1266              		.loc 1 547 2 view .LVU413
 1267 0062 2146     		mov	r1, r4
 1268 0064 3046     		mov	r0, r6
 1269 0066 FFF7FEFF 		bl	set_exp_digits_string
 1270              	.LVL122:
 548:src/display.c **** 
 1271              		.loc 1 548 1 is_stmt 0 view .LVU414
ARM GAS  /tmp/ccAnlOT7.s 			page 76


 1272 006a 03B0     		add	sp, sp, #12
 1273              		.cfi_remember_state
 1274              		.cfi_def_cfa_offset 20
 1275              		@ sp needed
 1276 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1277              	.LVL123:
 1278              	.L121:
 1279              		.cfi_restore_state
 470:src/display.c **** #else
 1280              		.loc 1 470 8 is_stmt 1 view .LVU415
 470:src/display.c **** #else
 1281              		.loc 1 470 15 is_stmt 0 view .LVU416
 1282 006e 6522     		movs	r2, #101
 1283              	.LVL124:
 470:src/display.c **** #else
 1284              		.loc 1 470 15 view .LVU417
 1285 0070 04F8012B 		strb	r2, [r4], #1
 1286              	.LVL125:
 474:src/display.c **** 	}
 1287              		.loc 1 474 3 is_stmt 1 view .LVU418
 474:src/display.c **** 	}
 1288              		.loc 1 474 6 is_stmt 0 view .LVU419
 1289 0074 002B     		cmp	r3, #0
 1290 0076 DDD0     		beq	.L122
 1291              	.L126:
 474:src/display.c **** 	}
 1292              		.loc 1 474 6 view .LVU420
 1293 0078 2E46     		mov	r6, r5
 1294 007a D7E7     		b	.L118
 1295              	.LVL126:
 1296              	.L120:
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1297              		.loc 1 477 3 is_stmt 1 view .LVU421
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1298              		.loc 1 477 6 is_stmt 0 view .LVU422
 1299 007c 43B9     		cbnz	r3, .L141
 1300              	.LVL127:
 1301              	.L123:
 481:src/display.c **** #endif
 1302              		.loc 1 481 3 is_stmt 1 view .LVU423
 481:src/display.c **** #endif
 1303              		.loc 1 481 6 is_stmt 0 view .LVU424
 1304 007e B5F57A7F 		cmp	r5, #1000
 1305 0082 0EDA     		bge	.L142
 481:src/display.c **** #endif
 1306              		.loc 1 481 6 view .LVU425
 1307 0084 0024     		movs	r4, #0
 1308              	.LVL128:
 481:src/display.c **** #endif
 1309              		.loc 1 481 6 view .LVU426
 1310 0086 D5E7     		b	.L122
 1311              	.LVL129:
 1312              	.L140:
 470:src/display.c **** #else
 1313              		.loc 1 470 8 is_stmt 1 view .LVU427
 470:src/display.c **** #else
 1314              		.loc 1 470 15 is_stmt 0 view .LVU428
ARM GAS  /tmp/ccAnlOT7.s 			page 77


 1315 0088 6523     		movs	r3, #101
 1316 008a 04F8013B 		strb	r3, [r4], #1
 1317              	.LVL130:
 474:src/display.c **** 	}
 1318              		.loc 1 474 3 is_stmt 1 view .LVU429
 1319 008e CDE7     		b	.L118
 1320              	.LVL131:
 1321              	.L141:
 474:src/display.c **** 	}
 1322              		.loc 1 474 3 is_stmt 0 view .LVU430
 1323 0090 2E46     		mov	r6, r5
 1324              	.LVL132:
 1325              	.L117:
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1326              		.loc 1 477 17 is_stmt 1 view .LVU431
 1327              	.LBB165:
 1328              	.LBI165:
 296:src/display.c **** {
 1329              		.loc 1 296 13 view .LVU432
 1330              	.LBB166:
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1331              		.loc 1 298 2 view .LVU433
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1332              		.loc 1 298 26 is_stmt 0 view .LVU434
 1333 0092 074B     		ldr	r3, .L143
 1334 0094 2D22     		movs	r2, #45
 1335              	.LVL133:
 299:src/display.c **** }
 1336              		.loc 1 299 2 view .LVU435
 1337 0096 8220     		movs	r0, #130
 298:src/display.c **** 	set_dot(EXP_SIGN);
 1338              		.loc 1 298 26 view .LVU436
 1339 0098 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 1340              		.loc 1 299 2 is_stmt 1 view .LVU437
 300:src/display.c **** 
 1341              		.loc 1 300 1 is_stmt 0 view .LVU438
 1342 009a 3546     		mov	r5, r6
 299:src/display.c **** }
 1343              		.loc 1 299 2 view .LVU439
 1344 009c FFF7FEFF 		bl	set_dot
 1345              	.LVL134:
 300:src/display.c **** 
 1346              		.loc 1 300 1 view .LVU440
 1347 00a0 EDE7     		b	.L123
 1348              	.LVL135:
 1349              	.L142:
 300:src/display.c **** 
 1350              		.loc 1 300 1 view .LVU441
 1351              	.LBE166:
 1352              	.LBE165:
 483:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1353              		.loc 1 483 4 is_stmt 1 view .LVU442
 491:src/display.c **** #endif
 1354              		.loc 1 491 5 view .LVU443
 1355 00a2 01AE     		add	r6, sp, #4
 1356 00a4 0349     		ldr	r1, .L143+4
ARM GAS  /tmp/ccAnlOT7.s 			page 78


 1357 00a6 3046     		mov	r0, r6
 1358 00a8 FFF7FEFF 		bl	scopy
 1359              	.LVL136:
 493:src/display.c **** 			}
 1360              		.loc 1 493 5 view .LVU444
 1361 00ac 0024     		movs	r4, #0
 1362              	.LVL137:
 493:src/display.c **** 			}
 1363              		.loc 1 493 5 is_stmt 0 view .LVU445
 1364 00ae CFE7     		b	.L124
 1365              	.L144:
 1366              		.align	2
 1367              	.L143:
 1368 00b0 00000000 		.word	LastDisplayedExponent
 1369 00b4 00000000 		.word	.LC0
 1370              		.cfi_endproc
 1371              	.LFE14:
 1373              		.section	.text.set_separator.part.0,"ax",%progbits
 1374              		.align	1
 1375              		.p2align 2,,3
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1379              		.fpu fpv4-sp-d16
 1381              	set_separator.part.0:
 1382              	.LVL138:
 1383              	.LFB43:
 355:src/display.c **** 	if (sep == SEP_NONE)
 1384              		.loc 1 355 14 is_stmt 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 362:src/display.c **** 		set_dot(posn+7);
 1388              		.loc 1 362 3 view .LVU447
 355:src/display.c **** 	if (sep == SEP_NONE)
 1389              		.loc 1 355 14 is_stmt 0 view .LVU448
 1390 0000 70B5     		push	{r4, r5, r6, lr}
 1391              		.cfi_def_cfa_offset 16
 1392              		.cfi_offset 4, -16
 1393              		.cfi_offset 5, -12
 1394              		.cfi_offset 6, -8
 1395              		.cfi_offset 14, -4
 355:src/display.c **** 	if (sep == SEP_NONE)
 1396              		.loc 1 355 14 view .LVU449
 1397 0002 0546     		mov	r5, r0
 1398 0004 0E46     		mov	r6, r1
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1399              		.loc 1 363 3 view .LVU450
 1400 0006 0238     		subs	r0, r0, #2
 1401              	.LVL139:
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1402              		.loc 1 363 3 view .LVU451
 1403 0008 FFF7FEFF 		bl	set_dot
 1404              	.LVL140:
 364:src/display.c **** 			set_dot(posn+8);
 1405              		.loc 1 364 6 view .LVU452
 1406 000c 012E     		cmp	r6, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 79


 362:src/display.c **** 		set_dot(posn+7);
 1407              		.loc 1 362 8 view .LVU453
 1408 000e A5F10904 		sub	r4, r5, #9
 1409              	.LVL141:
 363:src/display.c **** 		if (sep == SEP_COMMA)
 1410              		.loc 1 363 3 is_stmt 1 view .LVU454
 364:src/display.c **** 			set_dot(posn+8);
 1411              		.loc 1 364 3 view .LVU455
 364:src/display.c **** 			set_dot(posn+8);
 1412              		.loc 1 364 6 is_stmt 0 view .LVU456
 1413 0012 0CD0     		beq	.L149
 367:src/display.c **** #endif
 1414              		.loc 1 367 37 view .LVU457
 1415 0014 2E21     		movs	r1, #46
 1416              	.L146:
 367:src/display.c **** #endif
 1417              		.loc 1 367 28 view .LVU458
 1418 0016 084B     		ldr	r3, .L150
 367:src/display.c **** #endif
 1419              		.loc 1 367 37 view .LVU459
 1420 0018 084A     		ldr	r2, .L150+4
 367:src/display.c **** #endif
 1421              		.loc 1 367 28 view .LVU460
 1422 001a 83FB0403 		smull	r0, r3, r3, r4
 1423 001e E417     		asrs	r4, r4, #31
 1424              	.LVL142:
 367:src/display.c **** #endif
 1425              		.loc 1 367 28 view .LVU461
 1426 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 367:src/display.c **** #endif
 1427              		.loc 1 367 33 view .LVU462
 1428 0024 0134     		adds	r4, r4, #1
 371:src/display.c **** 
 1429              		.loc 1 371 1 view .LVU463
 1430 0026 0020     		movs	r0, #0
 367:src/display.c **** #endif
 1431              		.loc 1 367 37 view .LVU464
 1432 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1433              	.LVL143:
 371:src/display.c **** 
 1434              		.loc 1 371 1 view .LVU465
 1435 002c 70BD     		pop	{r4, r5, r6, pc}
 1436              	.LVL144:
 1437              	.L149:
 365:src/display.c **** #ifndef REALBUILD
 1438              		.loc 1 365 4 is_stmt 1 view .LVU466
 1439 002e 681E     		subs	r0, r5, #1
 1440 0030 FFF7FEFF 		bl	set_dot
 1441              	.LVL145:
 367:src/display.c **** #endif
 1442              		.loc 1 367 3 view .LVU467
 367:src/display.c **** #endif
 1443              		.loc 1 367 37 is_stmt 0 view .LVU468
 1444 0034 2C21     		movs	r1, #44
 1445 0036 EEE7     		b	.L146
 1446              	.L151:
 1447              		.align	2
ARM GAS  /tmp/ccAnlOT7.s 			page 80


 1448              	.L150:
 1449 0038 398EE338 		.word	954437177
 1450 003c 00000000 		.word	LastDisplayedNumber
 1451              		.cfi_endproc
 1452              	.LFE43:
 1454              		.section	.text.set_decimal,"ax",%progbits
 1455              		.align	1
 1456              		.p2align 2,,3
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	set_decimal:
 1463              	.LVL146:
 1464              	.LFB8:
 337:src/display.c **** 	if (res) {
 1465              		.loc 1 337 87 is_stmt 1 view -0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 8
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1469              		.loc 1 338 2 view .LVU470
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1470              		.loc 1 338 5 is_stmt 0 view .LVU471
 1471 0000 3AB1     		cbz	r2, .L153
 339:src/display.c **** 	} else {
 1472              		.loc 1 339 3 is_stmt 1 view .LVU472
 339:src/display.c **** 	} else {
 1473              		.loc 1 339 10 is_stmt 0 view .LVU473
 1474 0002 0029     		cmp	r1, #0
 339:src/display.c **** 	} else {
 1475              		.loc 1 339 7 view .LVU474
 1476 0004 1046     		mov	r0, r2
 1477              	.LVL147:
 339:src/display.c **** 	} else {
 1478              		.loc 1 339 10 view .LVU475
 1479 0006 0CBF     		ite	eq
 1480 0008 2E23     		moveq	r3, #46
 1481 000a 2C23     		movne	r3, #44
 1482 000c 00F8013B 		strb	r3, [r0], #1
 1483              	.LVL148:
 349:src/display.c **** 
 1484              		.loc 1 349 1 view .LVU476
 1485 0010 7047     		bx	lr
 1486              	.LVL149:
 1487              	.L153:
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1488              		.loc 1 341 3 is_stmt 1 view .LVU477
 337:src/display.c **** 	if (res) {
 1489              		.loc 1 337 87 is_stmt 0 view .LVU478
 1490 0012 10B5     		push	{r4, lr}
 1491              		.cfi_def_cfa_offset 8
 1492              		.cfi_offset 4, -8
 1493              		.cfi_offset 14, -4
 1494 0014 82B0     		sub	sp, sp, #8
 1495              		.cfi_def_cfa_offset 16
 1496 0016 0446     		mov	r4, r0
ARM GAS  /tmp/ccAnlOT7.s 			page 81


 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1497              		.loc 1 341 3 view .LVU479
 1498 0018 0730     		adds	r0, r0, #7
 1499              	.LVL150:
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1500              		.loc 1 341 3 view .LVU480
 1501 001a 0191     		str	r1, [sp, #4]
 1502 001c FFF7FEFF 		bl	set_dot
 1503              	.LVL151:
 342:src/display.c **** 			set_dot(posn+8);
 1504              		.loc 1 342 3 is_stmt 1 view .LVU481
 342:src/display.c **** 			set_dot(posn+8);
 1505              		.loc 1 342 6 is_stmt 0 view .LVU482
 1506 0020 0199     		ldr	r1, [sp, #4]
 1507 0022 69B9     		cbnz	r1, .L162
 1508              	.LBB169:
 1509              	.LBB170:
 345:src/display.c **** #endif
 1510              		.loc 1 345 35 view .LVU483
 1511 0024 2E22     		movs	r2, #46
 1512              	.L156:
 345:src/display.c **** #endif
 1513              		.loc 1 345 27 view .LVU484
 1514 0026 0948     		ldr	r0, .L163
 345:src/display.c **** #endif
 1515              		.loc 1 345 35 view .LVU485
 1516 0028 094B     		ldr	r3, .L163+4
 345:src/display.c **** #endif
 1517              		.loc 1 345 27 view .LVU486
 1518 002a 80FB0410 		smull	r1, r0, r0, r4
 1519 002e E417     		asrs	r4, r4, #31
 1520              	.LVL152:
 345:src/display.c **** #endif
 1521              		.loc 1 345 27 view .LVU487
 1522 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 345:src/display.c **** #endif
 1523              		.loc 1 345 32 view .LVU488
 1524 0034 0134     		adds	r4, r4, #1
 345:src/display.c **** #endif
 1525              		.loc 1 345 35 view .LVU489
 1526 0036 0020     		movs	r0, #0
 1527 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1528              	.LVL153:
 348:src/display.c **** }
 1529              		.loc 1 348 2 is_stmt 1 view .LVU490
 348:src/display.c **** }
 1530              		.loc 1 348 2 is_stmt 0 view .LVU491
 1531              	.LBE170:
 1532              	.LBE169:
 348:src/display.c **** }
 1533              		.loc 1 348 2 is_stmt 1 view .LVU492
 349:src/display.c **** 
 1534              		.loc 1 349 1 is_stmt 0 view .LVU493
 1535 003c 02B0     		add	sp, sp, #8
 1536              		.cfi_remember_state
 1537              		.cfi_def_cfa_offset 8
 1538              		@ sp needed
ARM GAS  /tmp/ccAnlOT7.s 			page 82


 1539 003e 10BD     		pop	{r4, pc}
 1540              	.LVL154:
 1541              	.L162:
 1542              		.cfi_restore_state
 343:src/display.c **** #ifndef REALBUILD
 1543              		.loc 1 343 4 is_stmt 1 view .LVU494
 1544 0040 04F10800 		add	r0, r4, #8
 1545 0044 FFF7FEFF 		bl	set_dot
 1546              	.LVL155:
 1547              	.LBB172:
 1548              	.LBI169:
 337:src/display.c **** 	if (res) {
 1549              		.loc 1 337 14 view .LVU495
 1550              	.LBB171:
 345:src/display.c **** #endif
 1551              		.loc 1 345 2 view .LVU496
 345:src/display.c **** #endif
 1552              		.loc 1 345 35 is_stmt 0 view .LVU497
 1553 0048 2C22     		movs	r2, #44
 1554 004a ECE7     		b	.L156
 1555              	.L164:
 1556              		.align	2
 1557              	.L163:
 1558 004c 398EE338 		.word	954437177
 1559 0050 00000000 		.word	LastDisplayedNumber
 1560              	.LBE171:
 1561              	.LBE172:
 1562              		.cfi_endproc
 1563              	.LFE8:
 1565              		.section	.text.set_digits_string,"ax",%progbits
 1566              		.align	1
 1567              		.p2align 2,,3
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1571              		.fpu fpv4-sp-d16
 1573              	set_digits_string:
 1574              	.LVL156:
 1575              	.LFB12:
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1576              		.loc 1 402 55 is_stmt 1 view -0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1580              		.loc 1 403 2 view .LVU499
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1581              		.loc 1 402 55 is_stmt 0 view .LVU500
 1582 0000 38B5     		push	{r3, r4, r5, lr}
 1583              		.cfi_def_cfa_offset 16
 1584              		.cfi_offset 3, -16
 1585              		.cfi_offset 4, -12
 1586              		.cfi_offset 5, -8
 1587              		.cfi_offset 14, -4
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1588              		.loc 1 403 9 view .LVU501
 1589 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 83


 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1590              		.loc 1 403 9 is_stmt 1 view .LVU502
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1591              		.loc 1 403 2 is_stmt 0 view .LVU503
 1592 0004 E3B1     		cbz	r3, .L165
 1593 0006 0546     		mov	r5, r0
 1594 0008 0C46     		mov	r4, r1
 1595 000a 06E0     		b	.L169
 1596              	.LVL157:
 1597              	.L167:
 1598              	.LBB173:
 1599              	.LBB174:
 397:src/display.c **** 	return res;
 1600              		.loc 1 397 7 view .LVU504
 1601 000c 2046     		mov	r0, r4
 1602 000e FFF7FEFF 		bl	set_dig
 1603              	.LVL158:
 398:src/display.c **** }
 1604              		.loc 1 398 2 is_stmt 1 view .LVU505
 398:src/display.c **** }
 1605              		.loc 1 398 2 is_stmt 0 view .LVU506
 1606              	.LBE174:
 1607              	.LBE173:
 408:src/display.c **** 		}
 1608              		.loc 1 408 4 is_stmt 1 view .LVU507
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1609              		.loc 1 403 9 is_stmt 0 view .LVU508
 1610 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1611              	.LVL159:
 408:src/display.c **** 		}
 1612              		.loc 1 408 6 view .LVU509
 1613 0016 0934     		adds	r4, r4, #9
 1614              	.LVL160:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1615              		.loc 1 403 23 is_stmt 1 view .LVU510
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1616              		.loc 1 403 9 view .LVU511
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1617              		.loc 1 403 2 is_stmt 0 view .LVU512
 1618 0018 93B1     		cbz	r3, .L165
 1619              	.LVL161:
 1620              	.L169:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1621              		.loc 1 404 3 is_stmt 1 view .LVU513
 405:src/display.c **** 		else {
 1622              		.loc 1 405 4 view .LVU514
 407:src/display.c **** 			j += SEGS_PER_DIGIT;
 1623              		.loc 1 407 4 view .LVU515
 1624              	.LBB177:
 1625              	.LBI173:
 395:src/display.c **** 	if (res) *res++ = ch;
 1626              		.loc 1 395 14 view .LVU516
 1627              	.LBB175:
 396:src/display.c **** 	else	set_dig(base, ch);
 1628              		.loc 1 396 2 view .LVU517
 397:src/display.c **** 	return res;
 1629              		.loc 1 397 7 view .LVU518
ARM GAS  /tmp/ccAnlOT7.s 			page 84


 1630              	.LBE175:
 1631              	.LBE177:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1632              		.loc 1 404 19 is_stmt 0 view .LVU519
 1633 001a 03F0FD02 		and	r2, r3, #253
 1634 001e 2C2A     		cmp	r2, #44
 405:src/display.c **** 		else {
 1635              		.loc 1 405 4 view .LVU520
 1636 0020 A4F10900 		sub	r0, r4, #9
 1637 0024 4FF00002 		mov	r2, #0
 1638              	.LBB178:
 1639              	.LBB176:
 397:src/display.c **** 	return res;
 1640              		.loc 1 397 7 view .LVU521
 1641 0028 1946     		mov	r1, r3
 1642              	.LBE176:
 1643              	.LBE178:
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1644              		.loc 1 404 19 view .LVU522
 1645 002a EFD1     		bne	.L167
 405:src/display.c **** 		else {
 1646              		.loc 1 405 4 view .LVU523
 1647 002c B3F12E01 		subs	r1, r3, #46
 1648 0030 18BF     		it	ne
 1649 0032 0121     		movne	r1, #1
 1650 0034 FFF7FEFF 		bl	set_decimal
 1651              	.LVL162:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1652              		.loc 1 403 23 is_stmt 1 view .LVU524
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1653              		.loc 1 403 9 view .LVU525
 1654 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1655              	.LVL163:
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1656              		.loc 1 403 2 is_stmt 0 view .LVU526
 1657 003c 002B     		cmp	r3, #0
 1658 003e ECD1     		bne	.L169
 1659              	.LVL164:
 1660              	.L165:
 411:src/display.c **** 
 1661              		.loc 1 411 1 view .LVU527
 1662 0040 38BD     		pop	{r3, r4, r5, pc}
 1663              		.cfi_endproc
 1664              	.LFE12:
 1666 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1667              		.align	2
 1668              	.LC1:
 1669 0000 4E614E00 		.ascii	"NaN\000"
 1670              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1671              		.align	1
 1672              		.p2align 2,,3
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1676              		.fpu fpv4-sp-d16
 1678              	check_special_dn.isra.0:
 1679              	.LVL165:
ARM GAS  /tmp/ccAnlOT7.s 			page 85


 1680              	.LFB45:
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1681              		.loc 1 1169 12 is_stmt 1 view -0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 0
 1684              		@ frame_needed = 0, uses_anonymous_args = 0
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1685              		.loc 1 1170 2 view .LVU529
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1686              		.loc 1 1169 12 is_stmt 0 view .LVU530
 1687 0000 38B5     		push	{r3, r4, r5, lr}
 1688              		.cfi_def_cfa_offset 16
 1689              		.cfi_offset 3, -16
 1690              		.cfi_offset 4, -12
 1691              		.cfi_offset 5, -8
 1692              		.cfi_offset 14, -4
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1693              		.loc 1 1170 6 view .LVU531
 1694 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1695              		.loc 1 1169 12 view .LVU532
 1696 0004 0546     		mov	r5, r0
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
 1697              		.loc 1 1170 5 view .LVU533
 1698 0006 13F07000 		ands	r0, r3, #112
 1699 000a 09D0     		beq	.L175
1171:src/display.c **** 			if (res) {
 1700              		.loc 1 1171 3 is_stmt 1 view .LVU534
1171:src/display.c **** 			if (res) {
 1701              		.loc 1 1171 6 is_stmt 0 view .LVU535
 1702 000c 13F0300F 		tst	r3, #48
 1703 0010 0C46     		mov	r4, r1
 1704 0012 06D0     		beq	.L177
 1705              	.LVL166:
 1706              	.LBB181:
 1707              	.LBI181:
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1708              		.loc 1 1169 12 is_stmt 1 view .LVU536
 1709              	.LBB182:
1172:src/display.c **** 				scopy(res, "NaN");
 1710              		.loc 1 1172 4 view .LVU537
1172:src/display.c **** 				scopy(res, "NaN");
 1711              		.loc 1 1172 7 is_stmt 0 view .LVU538
 1712 0014 89B1     		cbz	r1, .L178
1173:src/display.c **** 			} else {
 1713              		.loc 1 1173 5 is_stmt 1 view .LVU539
 1714 0016 0846     		mov	r0, r1
 1715 0018 1849     		ldr	r1, .L191
 1716              	.LVL167:
1173:src/display.c **** 			} else {
 1717              		.loc 1 1173 5 is_stmt 0 view .LVU540
 1718 001a FFF7FEFF 		bl	scopy
 1719              	.LVL168:
1173:src/display.c **** 			} else {
 1720              		.loc 1 1173 5 view .LVU541
 1721 001e 0120     		movs	r0, #1
 1722              	.LVL169:
ARM GAS  /tmp/ccAnlOT7.s 			page 86


 1723              	.L175:
1173:src/display.c **** 			} else {
 1724              		.loc 1 1173 5 view .LVU542
 1725              	.LBE182:
 1726              	.LBE181:
1205:src/display.c **** 
 1727              		.loc 1 1205 1 view .LVU543
 1728 0020 38BD     		pop	{r3, r4, r5, pc}
 1729              	.LVL170:
 1730              	.L177:
1183:src/display.c **** 				if (res) *res++ = '-';
 1731              		.loc 1 1183 4 is_stmt 1 view .LVU544
1183:src/display.c **** 				if (res) *res++ = '-';
 1732              		.loc 1 1183 7 is_stmt 0 view .LVU545
 1733 0022 1B06     		lsls	r3, r3, #24
 1734 0024 04D4     		bmi	.L190
1187:src/display.c **** 				*res++ = '\237';
 1735              		.loc 1 1187 4 is_stmt 1 view .LVU546
1187:src/display.c **** 				*res++ = '\237';
 1736              		.loc 1 1187 7 is_stmt 0 view .LVU547
 1737 0026 B9B1     		cbz	r1, .L182
 1738              	.LVL171:
 1739              	.L181:
1188:src/display.c **** 			else {
 1740              		.loc 1 1188 5 is_stmt 1 view .LVU548
1188:src/display.c **** 			else {
 1741              		.loc 1 1188 12 is_stmt 0 view .LVU549
 1742 0028 9F23     		movs	r3, #159
 1743 002a 2370     		strb	r3, [r4]
1201:src/display.c **** 		}
 1744              		.loc 1 1201 11 view .LVU550
 1745 002c 0120     		movs	r0, #1
1205:src/display.c **** 
 1746              		.loc 1 1205 1 view .LVU551
 1747 002e 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL172:
 1749              	.L190:
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1750              		.loc 1 1184 5 is_stmt 1 view .LVU552
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1751              		.loc 1 1184 8 is_stmt 0 view .LVU553
 1752 0030 71B1     		cbz	r1, .L180
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1753              		.loc 1 1184 14 is_stmt 1 view .LVU554
 1754              	.LVL173:
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1755              		.loc 1 1184 21 is_stmt 0 view .LVU555
 1756 0032 2D23     		movs	r3, #45
 1757 0034 04F8013B 		strb	r3, [r4], #1
 1758              	.LVL174:
1187:src/display.c **** 				*res++ = '\237';
 1759              		.loc 1 1187 4 is_stmt 1 view .LVU556
 1760 0038 F6E7     		b	.L181
 1761              	.LVL175:
 1762              	.L178:
 1763              	.LBB184:
 1764              	.LBB183:
ARM GAS  /tmp/ccAnlOT7.s 			page 87


1175:src/display.c **** #ifndef REALBUILD
 1765              		.loc 1 1175 5 view .LVU557
 1766 003a 1148     		ldr	r0, .L191+4
 1767 003c FFF7FEFF 		bl	set_digits_string
 1768              	.LVL176:
1177:src/display.c **** 				forceDispPlot=0;
 1769              		.loc 1 1177 5 view .LVU558
 1770 0040 1049     		ldr	r1, .L191+8
 1771 0042 1148     		ldr	r0, .L191+12
 1772 0044 FFF7FEFF 		bl	scopy
 1773              	.LVL177:
1178:src/display.c **** #endif
 1774              		.loc 1 1178 5 view .LVU559
1178:src/display.c **** #endif
 1775              		.loc 1 1178 18 is_stmt 0 view .LVU560
 1776 0048 104B     		ldr	r3, .L191+16
 1777 004a 1C70     		strb	r4, [r3]
 1778 004c 0120     		movs	r0, #1
 1779              	.LBE183:
 1780              	.LBE184:
1205:src/display.c **** 
 1781              		.loc 1 1205 1 view .LVU561
 1782 004e 38BD     		pop	{r3, r4, r5, pc}
 1783              	.LVL178:
 1784              	.L180:
1185:src/display.c **** 			}
 1785              		.loc 1 1185 10 is_stmt 1 view .LVU562
 1786 0050 2D21     		movs	r1, #45
 1787              	.LVL179:
1185:src/display.c **** 			}
 1788              		.loc 1 1185 10 is_stmt 0 view .LVU563
 1789 0052 0920     		movs	r0, #9
 1790 0054 FFF7FEFF 		bl	set_dig
 1791              	.LVL180:
1187:src/display.c **** 				*res++ = '\237';
 1792              		.loc 1 1187 4 is_stmt 1 view .LVU564
 1793              	.L182:
1190:src/display.c **** #ifndef REALBUILD
 1794              		.loc 1 1190 5 view .LVU565
 1795 0058 1221     		movs	r1, #18
 1796 005a 0D48     		ldr	r0, .L191+20
 1797 005c FFF7FEFF 		bl	set_digits_string
 1798              	.LVL181:
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1799              		.loc 1 1192 5 view .LVU566
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1800              		.loc 1 1192 8 is_stmt 0 view .LVU567
 1801 0060 95F90030 		ldrsb	r3, [r5]
1196:src/display.c **** 				}
 1802              		.loc 1 1196 6 view .LVU568
 1803 0064 0848     		ldr	r0, .L191+12
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1804              		.loc 1 1192 8 view .LVU569
 1805 0066 002B     		cmp	r3, #0
1193:src/display.c **** 				}
 1806              		.loc 1 1193 6 is_stmt 1 view .LVU570
 1807 0068 B4BF     		ite	lt
ARM GAS  /tmp/ccAnlOT7.s 			page 88


 1808 006a 0A49     		ldrlt	r1, .L191+24
1196:src/display.c **** 				}
 1809              		.loc 1 1196 6 view .LVU571
 1810 006c 0A49     		ldrge	r1, .L191+28
 1811 006e FFF7FEFF 		bl	scopy
 1812              	.LVL182:
1198:src/display.c **** #endif
 1813              		.loc 1 1198 5 view .LVU572
1198:src/display.c **** #endif
 1814              		.loc 1 1198 18 is_stmt 0 view .LVU573
 1815 0072 064B     		ldr	r3, .L191+16
 1816 0074 0022     		movs	r2, #0
 1817 0076 1A70     		strb	r2, [r3]
1201:src/display.c **** 		}
 1818              		.loc 1 1201 11 view .LVU574
 1819 0078 0120     		movs	r0, #1
1205:src/display.c **** 
 1820              		.loc 1 1205 1 view .LVU575
 1821 007a 38BD     		pop	{r3, r4, r5, pc}
 1822              	.L192:
 1823              		.align	2
 1824              	.L191:
 1825 007c 00000000 		.word	.LC1
 1826 0080 00000000 		.word	.LANCHOR3
 1827 0084 00000000 		.word	.LANCHOR4
 1828 0088 00000000 		.word	LastDisplayedNumber
 1829 008c 00000000 		.word	forceDispPlot
 1830 0090 00000000 		.word	.LANCHOR5
 1831 0094 00000000 		.word	.LANCHOR6
 1832 0098 00000000 		.word	.LANCHOR7
 1833              		.cfi_endproc
 1834              	.LFE45:
 1836              		.section	.text.set_x_hms,"ax",%progbits
 1837              		.align	1
 1838              		.p2align 2,,3
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	set_x_hms:
 1845              	.LVL183:
 1846              	.LFB22:
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1847              		.loc 1 1250 56 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 200
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
1251:src/display.c **** 	int j=0;
 1851              		.loc 1 1251 2 view .LVU577
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1852              		.loc 1 1252 2 view .LVU578
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1853              		.loc 1 1250 56 is_stmt 0 view .LVU579
 1854 0000 30B5     		push	{r4, r5, lr}
 1855              		.cfi_def_cfa_offset 12
 1856              		.cfi_offset 4, -12
 1857              		.cfi_offset 5, -8
ARM GAS  /tmp/ccAnlOT7.s 			page 89


 1858              		.cfi_offset 14, -4
 1859 0002 B5B0     		sub	sp, sp, #212
 1860              		.cfi_def_cfa_offset 224
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1861              		.loc 1 1250 56 view .LVU580
 1862 0004 0446     		mov	r4, r0
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1863              		.loc 1 1252 6 view .LVU581
 1864 0006 0023     		movs	r3, #0
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1865              		.loc 1 1256 6 view .LVU582
 1866 0008 0830     		adds	r0, r0, #8
 1867              	.LVL184:
1250:src/display.c **** 	decNumber x, y, a, t, u;
 1868              		.loc 1 1250 56 view .LVU583
 1869 000a 0D46     		mov	r5, r1
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1870              		.loc 1 1252 6 view .LVU584
 1871 000c 0393     		str	r3, [sp, #12]
1253:src/display.c **** 	unsigned int hr, min, sec, fs;
 1872              		.loc 1 1253 2 is_stmt 1 view .LVU585
 1873              	.LVL185:
1254:src/display.c **** 
 1874              		.loc 1 1254 2 view .LVU586
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1875              		.loc 1 1256 2 view .LVU587
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1876              		.loc 1 1256 6 is_stmt 0 view .LVU588
 1877 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1878              	.LVL186:
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1879              		.loc 1 1256 5 view .LVU589
 1880 0012 48B1     		cbz	r0, .L194
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1881              		.loc 1 1257 3 is_stmt 1 view .LVU590
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1882              		.loc 1 1257 6 is_stmt 0 view .LVU591
 1883 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1884 0016 5B06     		lsls	r3, r3, #25
 1885 0018 04D5     		bpl	.L193
1258:src/display.c **** 		return;
 1886              		.loc 1 1258 4 is_stmt 1 view .LVU592
 1887              	.LVL187:
 1888              	.LBB185:
 1889              	.LBI185:
 395:src/display.c **** 	if (res) *res++ = ch;
 1890              		.loc 1 395 14 view .LVU593
 1891              	.LBB186:
 396:src/display.c **** 	else	set_dig(base, ch);
 1892              		.loc 1 396 2 view .LVU594
 396:src/display.c **** 	else	set_dig(base, ch);
 1893              		.loc 1 396 5 is_stmt 0 view .LVU595
 1894 001a 002D     		cmp	r5, #0
 1895 001c 00F0B580 		beq	.L197
 396:src/display.c **** 	else	set_dig(base, ch);
 1896              		.loc 1 396 11 is_stmt 1 view .LVU596
 1897              	.LVL188:
ARM GAS  /tmp/ccAnlOT7.s 			page 90


 396:src/display.c **** 	else	set_dig(base, ch);
 1898              		.loc 1 396 18 is_stmt 0 view .LVU597
 1899 0020 6F23     		movs	r3, #111
 1900 0022 2B70     		strb	r3, [r5]
 1901              	.LVL189:
 1902              	.L193:
 396:src/display.c **** 	else	set_dig(base, ch);
 1903              		.loc 1 396 18 view .LVU598
 1904              	.LBE186:
 1905              	.LBE185:
1313:src/display.c **** 
 1906              		.loc 1 1313 1 view .LVU599
 1907 0024 35B0     		add	sp, sp, #212
 1908              		.cfi_remember_state
 1909              		.cfi_def_cfa_offset 12
 1910              		@ sp needed
 1911 0026 30BD     		pop	{r4, r5, pc}
 1912              	.LVL190:
 1913              	.L194:
 1914              		.cfi_restore_state
1262:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1915              		.loc 1 1262 2 is_stmt 1 view .LVU600
 1916 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1917              	.LVL191:
1263:src/display.c **** 	dn_abs(&a, rgx);
 1918              		.loc 1 1263 2 view .LVU601
 1919 002c 624A     		ldr	r2, .L224
 1920 002e 2146     		mov	r1, r4
 1921 0030 07A8     		add	r0, sp, #28
 1922 0032 FFF7FEFF 		bl	decNumberMod
 1923              	.LVL192:
1264:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1924              		.loc 1 1264 2 view .LVU602
 1925 0036 2146     		mov	r1, r4
 1926 0038 19A8     		add	r0, sp, #100
 1927 003a FFF7FEFF 		bl	dn_abs
 1928              	.LVL193:
1265:src/display.c **** 		if (res != NULL)
 1929              		.loc 1 1265 2 view .LVU603
1265:src/display.c **** 		if (res != NULL)
 1930              		.loc 1 1265 5 is_stmt 0 view .LVU604
 1931 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1932 0042 002B     		cmp	r3, #0
 1933 0044 72DB     		blt	.L222
 1934              	.L198:
1273:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1935              		.loc 1 1273 2 is_stmt 1 view .LVU605
 1936 0046 07A9     		add	r1, sp, #28
 1937 0048 10A8     		add	r0, sp, #64
 1938 004a FFF7FEFF 		bl	decNumberHR2HMS
 1939              	.LVL194:
1274:src/display.c **** 	decNumberRound(&u, &t);
 1940              		.loc 1 1274 2 view .LVU606
 1941 004e 0622     		movs	r2, #6
 1942 0050 10A9     		add	r1, sp, #64
 1943 0052 22A8     		add	r0, sp, #136
 1944 0054 FFF7FEFF 		bl	dn_mulpow10
ARM GAS  /tmp/ccAnlOT7.s 			page 91


 1945              	.LVL195:
1275:src/display.c **** 
 1946              		.loc 1 1275 2 view .LVU607
 1947 0058 22A9     		add	r1, sp, #136
 1948 005a 2BA8     		add	r0, sp, #172
 1949 005c FFF7FEFF 		bl	decNumberRound
 1950              	.LVL196:
1277:src/display.c **** 	hms_step(&u, &t, &sec);
 1951              		.loc 1 1277 2 view .LVU608
 1952 0060 2BA9     		add	r1, sp, #172
 1953 0062 22A8     		add	r0, sp, #136
 1954 0064 06AA     		add	r2, sp, #24
 1955 0066 FFF7FEFF 		bl	hms_step
 1956              	.LVL197:
1278:src/display.c **** 	hms_step(&t, &u, &min);
 1957              		.loc 1 1278 2 view .LVU609
 1958 006a 22A9     		add	r1, sp, #136
 1959 006c 2BA8     		add	r0, sp, #172
 1960 006e 05AA     		add	r2, sp, #20
 1961 0070 FFF7FEFF 		bl	hms_step
 1962              	.LVL198:
1279:src/display.c **** 	hr = dn_to_int(&t);
 1963              		.loc 1 1279 2 view .LVU610
 1964 0074 04AA     		add	r2, sp, #16
 1965 0076 2BA9     		add	r1, sp, #172
 1966 0078 22A8     		add	r0, sp, #136
 1967 007a FFF7FEFF 		bl	hms_step
 1968              	.LVL199:
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1969              		.loc 1 1280 2 view .LVU611
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1970              		.loc 1 1280 7 is_stmt 0 view .LVU612
 1971 007e 22A8     		add	r0, sp, #136
 1972 0080 FFF7FEFF 		bl	dn_to_int
 1973              	.LVL200:
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1974              		.loc 1 1281 33 view .LVU613
 1975 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1976              		.loc 1 1281 5 view .LVU614
 1977 0088 3B2A     		cmp	r2, #59
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1978              		.loc 1 1281 19 is_stmt 1 view .LVU615
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1979              		.loc 1 1281 23 is_stmt 0 view .LVU616
 1980 008a 82BF     		ittt	hi
 1981 008c 3C3A     		subhi	r2, r2, #60
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1982              		.loc 1 1281 33 view .LVU617
 1983 008e 0133     		addhi	r3, r3, #1
 1984 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1282:src/display.c **** 
 1985              		.loc 1 1282 2 is_stmt 1 view .LVU618
1282:src/display.c **** 
 1986              		.loc 1 1282 5 is_stmt 0 view .LVU619
 1987 0094 3B2B     		cmp	r3, #59
 1988 0096 02D9     		bls	.L203
ARM GAS  /tmp/ccAnlOT7.s 			page 92


1282:src/display.c **** 
 1989              		.loc 1 1282 19 is_stmt 1 discriminator 1 view .LVU620
1282:src/display.c **** 
 1990              		.loc 1 1282 23 is_stmt 0 discriminator 1 view .LVU621
 1991 0098 3C3B     		subs	r3, r3, #60
 1992 009a 0493     		str	r3, [sp, #16]
1282:src/display.c **** 
 1993              		.loc 1 1282 30 is_stmt 1 discriminator 1 view .LVU622
1282:src/display.c **** 
 1994              		.loc 1 1282 32 is_stmt 0 discriminator 1 view .LVU623
 1995 009c 0130     		adds	r0, r0, #1
 1996              	.LVL201:
 1997              	.L203:
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
 1998              		.loc 1 1285 2 is_stmt 1 view .LVU624
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
 1999              		.loc 1 1285 8 is_stmt 0 view .LVU625
 2000 009e 0123     		movs	r3, #1
 2001 00a0 0093     		str	r3, [sp]
 2002 00a2 2946     		mov	r1, r5
 2003 00a4 03AA     		add	r2, sp, #12
 2004 00a6 0423     		movs	r3, #4
 2005 00a8 FFF7FEFF 		bl	hms_render
 2006              	.LVL202:
1286:src/display.c **** 	j += SEGS_PER_DIGIT;
 2007              		.loc 1 1286 2 is_stmt 1 view .LVU626
 2008              	.LBB188:
 2009              	.LBI188:
 395:src/display.c **** 	if (res) *res++ = ch;
 2010              		.loc 1 395 14 view .LVU627
 2011              	.LBB189:
 396:src/display.c **** 	else	set_dig(base, ch);
 2012              		.loc 1 396 2 view .LVU628
 396:src/display.c **** 	else	set_dig(base, ch);
 2013              		.loc 1 396 5 is_stmt 0 view .LVU629
 2014 00ac 0446     		mov	r4, r0
 2015              	.LVL203:
 396:src/display.c **** 	else	set_dig(base, ch);
 2016              		.loc 1 396 5 view .LVU630
 2017 00ae 0028     		cmp	r0, #0
 2018 00b0 76D0     		beq	.L204
 396:src/display.c **** 	else	set_dig(base, ch);
 2019              		.loc 1 396 11 is_stmt 1 view .LVU631
 396:src/display.c **** 	else	set_dig(base, ch);
 2020              		.loc 1 396 15 is_stmt 0 view .LVU632
 2021 00b2 0146     		mov	r1, r0
 2022              	.LVL204:
 396:src/display.c **** 	else	set_dig(base, ch);
 2023              		.loc 1 396 18 view .LVU633
 2024 00b4 4023     		movs	r3, #64
 2025 00b6 01F8013B 		strb	r3, [r1], #1
 2026              	.LVL205:
 2027              	.L205:
 398:src/display.c **** }
 2028              		.loc 1 398 2 is_stmt 1 view .LVU634
 398:src/display.c **** }
 2029              		.loc 1 398 2 is_stmt 0 view .LVU635
ARM GAS  /tmp/ccAnlOT7.s 			page 93


 2030              	.LBE189:
 2031              	.LBE188:
1287:src/display.c **** 
 2032              		.loc 1 1287 2 is_stmt 1 view .LVU636
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2033              		.loc 1 1290 8 is_stmt 0 view .LVU637
 2034 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2035 00be 0122     		movs	r2, #1
1287:src/display.c **** 
 2036              		.loc 1 1287 4 view .LVU638
 2037 00c0 03F10904 		add	r4, r3, #9
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2038              		.loc 1 1290 8 view .LVU639
 2039 00c4 0092     		str	r2, [sp]
 2040 00c6 0223     		movs	r3, #2
 2041 00c8 03AA     		add	r2, sp, #12
1287:src/display.c **** 
 2042              		.loc 1 1287 4 view .LVU640
 2043 00ca 0394     		str	r4, [sp, #12]
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2044              		.loc 1 1290 2 is_stmt 1 view .LVU641
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2045              		.loc 1 1290 8 is_stmt 0 view .LVU642
 2046 00cc FFF7FEFF 		bl	hms_render
 2047              	.LVL206:
1291:src/display.c **** 	j += SEGS_PER_DIGIT;
 2048              		.loc 1 1291 2 is_stmt 1 view .LVU643
 2049              	.LBB191:
 2050              	.LBI191:
 395:src/display.c **** 	if (res) *res++ = ch;
 2051              		.loc 1 395 14 view .LVU644
 2052              	.LBB192:
 396:src/display.c **** 	else	set_dig(base, ch);
 2053              		.loc 1 396 2 view .LVU645
 396:src/display.c **** 	else	set_dig(base, ch);
 2054              		.loc 1 396 5 is_stmt 0 view .LVU646
 2055 00d0 0446     		mov	r4, r0
 2056 00d2 0028     		cmp	r0, #0
 2057 00d4 5ED0     		beq	.L206
 396:src/display.c **** 	else	set_dig(base, ch);
 2058              		.loc 1 396 11 is_stmt 1 view .LVU647
 396:src/display.c **** 	else	set_dig(base, ch);
 2059              		.loc 1 396 15 is_stmt 0 view .LVU648
 2060 00d6 0146     		mov	r1, r0
 2061              	.LVL207:
 396:src/display.c **** 	else	set_dig(base, ch);
 2062              		.loc 1 396 18 view .LVU649
 2063 00d8 2723     		movs	r3, #39
 2064 00da 01F8013B 		strb	r3, [r1], #1
 2065              	.LVL208:
 2066              	.L207:
 398:src/display.c **** }
 2067              		.loc 1 398 2 is_stmt 1 view .LVU650
 398:src/display.c **** }
 2068              		.loc 1 398 2 is_stmt 0 view .LVU651
 2069              	.LBE192:
 2070              	.LBE191:
ARM GAS  /tmp/ccAnlOT7.s 			page 94


1292:src/display.c **** 
 2071              		.loc 1 1292 2 is_stmt 1 view .LVU652
1292:src/display.c **** 
 2072              		.loc 1 1292 4 is_stmt 0 view .LVU653
 2073 00de 039B     		ldr	r3, [sp, #12]
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2074              		.loc 1 1295 8 view .LVU654
 2075 00e0 0598     		ldr	r0, [sp, #20]
 2076 00e2 0122     		movs	r2, #1
1292:src/display.c **** 
 2077              		.loc 1 1292 4 view .LVU655
 2078 00e4 03F10904 		add	r4, r3, #9
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2079              		.loc 1 1295 8 view .LVU656
 2080 00e8 0092     		str	r2, [sp]
 2081 00ea 0223     		movs	r3, #2
 2082 00ec 03AA     		add	r2, sp, #12
1292:src/display.c **** 
 2083              		.loc 1 1292 4 view .LVU657
 2084 00ee 0394     		str	r4, [sp, #12]
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2085              		.loc 1 1295 2 is_stmt 1 view .LVU658
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2086              		.loc 1 1295 8 is_stmt 0 view .LVU659
 2087 00f0 FFF7FEFF 		bl	hms_render
 2088              	.LVL209:
1296:src/display.c **** 
 2089              		.loc 1 1296 8 view .LVU660
 2090 00f4 3149     		ldr	r1, .L224+4
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2091              		.loc 1 1295 8 view .LVU661
 2092 00f6 0246     		mov	r2, r0
 2093              	.LVL210:
1296:src/display.c **** 
 2094              		.loc 1 1296 2 is_stmt 1 view .LVU662
1296:src/display.c **** 
 2095              		.loc 1 1296 8 is_stmt 0 view .LVU663
 2096 00f8 0398     		ldr	r0, [sp, #12]
 2097              	.LVL211:
1296:src/display.c **** 
 2098              		.loc 1 1296 8 view .LVU664
 2099 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2100 00fc 0938     		subs	r0, r0, #9
 2101 00fe FFF7FEFF 		bl	set_decimal
 2102              	.LVL212:
1299:src/display.c **** 
 2103              		.loc 1 1299 8 view .LVU665
 2104 0102 0023     		movs	r3, #0
1296:src/display.c **** 
 2105              		.loc 1 1296 8 view .LVU666
 2106 0104 0146     		mov	r1, r0
 2107              	.LVL213:
1299:src/display.c **** 
 2108              		.loc 1 1299 2 is_stmt 1 view .LVU667
1299:src/display.c **** 
 2109              		.loc 1 1299 8 is_stmt 0 view .LVU668
 2110 0106 0093     		str	r3, [sp]
ARM GAS  /tmp/ccAnlOT7.s 			page 95


 2111 0108 0698     		ldr	r0, [sp, #24]
 2112              	.LVL214:
1299:src/display.c **** 
 2113              		.loc 1 1299 8 view .LVU669
 2114 010a 03AA     		add	r2, sp, #12
 2115 010c 0223     		movs	r3, #2
 2116 010e FFF7FEFF 		bl	hms_render
 2117              	.LVL215:
1302:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2118              		.loc 1 1302 2 is_stmt 1 view .LVU670
 2119              	.LBB194:
 2120              	.LBI194:
 395:src/display.c **** 	if (res) *res++ = ch;
 2121              		.loc 1 395 14 view .LVU671
 2122              	.LBB195:
 396:src/display.c **** 	else	set_dig(base, ch);
 2123              		.loc 1 396 2 view .LVU672
 396:src/display.c **** 	else	set_dig(base, ch);
 2124              		.loc 1 396 5 is_stmt 0 view .LVU673
 2125 0112 0446     		mov	r4, r0
 2126 0114 78B3     		cbz	r0, .L208
 396:src/display.c **** 	else	set_dig(base, ch);
 2127              		.loc 1 396 11 is_stmt 1 view .LVU674
 2128              	.LVL216:
 396:src/display.c **** 	else	set_dig(base, ch);
 2129              		.loc 1 396 18 is_stmt 0 view .LVU675
 2130 0116 2223     		movs	r3, #34
 2131 0118 0370     		strb	r3, [r0]
 2132              	.LVL217:
 398:src/display.c **** }
 2133              		.loc 1 398 2 is_stmt 1 view .LVU676
 398:src/display.c **** }
 2134              		.loc 1 398 2 is_stmt 0 view .LVU677
 2135              	.LBE195:
 2136              	.LBE194:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2137              		.loc 1 1306 2 is_stmt 1 view .LVU678
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2138              		.loc 1 1306 6 is_stmt 0 view .LVU679
 2139 011a 2749     		ldr	r1, .L224
 2140 011c 19A8     		add	r0, sp, #100
 2141              	.LVL218:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2142              		.loc 1 1306 6 view .LVU680
 2143 011e FFF7FEFF 		bl	dn_lt
 2144              	.LVL219:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2145              		.loc 1 1306 5 view .LVU681
 2146 0122 78B9     		cbnz	r0, .L223
1307:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2147              		.loc 1 1307 3 is_stmt 1 view .LVU682
 2148              	.LVL220:
 2149              	.LBB198:
 2150              	.LBI198:
 395:src/display.c **** 	if (res) *res++ = ch;
 2151              		.loc 1 395 14 view .LVU683
 2152              	.LBB199:
ARM GAS  /tmp/ccAnlOT7.s 			page 96


 396:src/display.c **** 	else	set_dig(base, ch);
 2153              		.loc 1 396 2 view .LVU684
 396:src/display.c **** 	else	set_dig(base, ch);
 2154              		.loc 1 396 11 view .LVU685
 396:src/display.c **** 	else	set_dig(base, ch);
 2155              		.loc 1 396 18 is_stmt 0 view .LVU686
 2156 0124 6F23     		movs	r3, #111
 2157 0126 6370     		strb	r3, [r4, #1]
 2158              	.LBE199:
 2159              	.LBE198:
1313:src/display.c **** 
 2160              		.loc 1 1313 1 view .LVU687
 2161 0128 35B0     		add	sp, sp, #212
 2162              		.cfi_remember_state
 2163              		.cfi_def_cfa_offset 12
 2164              		@ sp needed
 2165 012a 30BD     		pop	{r4, r5, pc}
 2166              	.LVL221:
 2167              	.L222:
 2168              		.cfi_restore_state
1266:src/display.c **** 			*res++ += '-';
 2169              		.loc 1 1266 3 is_stmt 1 view .LVU688
1266:src/display.c **** 			*res++ += '-';
 2170              		.loc 1 1266 6 is_stmt 0 view .LVU689
 2171 012c E5B1     		cbz	r5, .L199
1267:src/display.c **** 		else
 2172              		.loc 1 1267 4 is_stmt 1 view .LVU690
1267:src/display.c **** 		else
 2173              		.loc 1 1267 8 is_stmt 0 view .LVU691
 2174 012e 2B46     		mov	r3, r5
 2175              	.LVL222:
1267:src/display.c **** 		else
 2176              		.loc 1 1267 11 view .LVU692
 2177 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2178              	.LVL223:
1267:src/display.c **** 		else
 2179              		.loc 1 1267 11 view .LVU693
 2180 0134 2D32     		adds	r2, r2, #45
 2181 0136 2A70     		strb	r2, [r5]
1267:src/display.c **** 		else
 2182              		.loc 1 1267 8 view .LVU694
 2183 0138 1D46     		mov	r5, r3
 2184              	.LVL224:
 2185              	.L200:
1270:src/display.c **** 	}
 2186              		.loc 1 1270 3 is_stmt 1 view .LVU695
 2187 013a 07A9     		add	r1, sp, #28
 2188 013c 0846     		mov	r0, r1
 2189 013e FFF7FEFF 		bl	dn_minus
 2190              	.LVL225:
 2191 0142 80E7     		b	.L198
 2192              	.LVL226:
 2193              	.L223:
 2194              	.LBB200:
 2195              	.LBB196:
 396:src/display.c **** 	else	set_dig(base, ch);
 2196              		.loc 1 396 15 is_stmt 0 view .LVU696
ARM GAS  /tmp/ccAnlOT7.s 			page 97


 2197 0144 0134     		adds	r4, r4, #1
 2198              	.LVL227:
 2199              	.L211:
 396:src/display.c **** 	else	set_dig(base, ch);
 2200              		.loc 1 396 15 view .LVU697
 2201              	.LBE196:
 2202              	.LBE200:
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2203              		.loc 1 1308 9 is_stmt 1 view .LVU698
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2204              		.loc 1 1308 15 is_stmt 0 view .LVU699
 2205 0146 19A8     		add	r0, sp, #100
 2206 0148 FFF7FEFF 		bl	dn_eq0
 2207              	.LVL228:
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2208              		.loc 1 1308 12 view .LVU700
 2209 014c 0028     		cmp	r0, #0
 2210 014e 7FF469AF 		bne	.L193
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2211              		.loc 1 1309 3 is_stmt 1 view .LVU701
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2212              		.loc 1 1309 7 is_stmt 0 view .LVU702
 2213 0152 1B48     		ldr	r0, .L224+8
 2214 0154 19A9     		add	r1, sp, #100
 2215 0156 FFF7FEFF 		bl	dn_lt
 2216              	.LVL229:
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2217              		.loc 1 1309 6 view .LVU703
 2218 015a 0028     		cmp	r0, #0
 2219 015c 7FF462AF 		bne	.L193
1310:src/display.c **** 		}
 2220              		.loc 1 1310 4 is_stmt 1 view .LVU704
 2221              	.LVL230:
 2222              	.LBB201:
 2223              	.LBI201:
 395:src/display.c **** 	if (res) *res++ = ch;
 2224              		.loc 1 395 14 view .LVU705
 2225              	.LBB202:
 396:src/display.c **** 	else	set_dig(base, ch);
 2226              		.loc 1 396 2 view .LVU706
 396:src/display.c **** 	else	set_dig(base, ch);
 2227              		.loc 1 396 5 is_stmt 0 view .LVU707
 2228 0160 24B3     		cbz	r4, .L213
 396:src/display.c **** 	else	set_dig(base, ch);
 2229              		.loc 1 396 11 is_stmt 1 view .LVU708
 2230              	.LVL231:
 396:src/display.c **** 	else	set_dig(base, ch);
 2231              		.loc 1 396 18 is_stmt 0 view .LVU709
 2232 0162 7523     		movs	r3, #117
 2233 0164 2370     		strb	r3, [r4]
 2234 0166 5DE7     		b	.L193
 2235              	.LVL232:
 2236              	.L199:
 396:src/display.c **** 	else	set_dig(base, ch);
 2237              		.loc 1 396 18 view .LVU710
 2238              	.LBE202:
 2239              	.LBE201:
ARM GAS  /tmp/ccAnlOT7.s 			page 98


1269:src/display.c **** 		dn_minus(&x, &x);
 2240              		.loc 1 1269 4 is_stmt 1 view .LVU711
 2241              	.LBB204:
 2242              	.LBI204:
 284:src/display.c **** {
 2243              		.loc 1 284 13 view .LVU712
 2244              	.LBB205:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2245              		.loc 1 286 2 view .LVU713
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2246              		.loc 1 286 24 is_stmt 0 view .LVU714
 2247 0168 164B     		ldr	r3, .L224+12
 2248 016a 2D22     		movs	r2, #45
 287:src/display.c **** }
 2249              		.loc 1 287 2 view .LVU715
 2250 016c 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2251              		.loc 1 286 24 view .LVU716
 2252 016e 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 2253              		.loc 1 287 2 is_stmt 1 view .LVU717
 2254 0170 FFF7FEFF 		bl	set_dot
 2255              	.LVL233:
 288:src/display.c **** 
 2256              		.loc 1 288 1 is_stmt 0 view .LVU718
 2257 0174 E1E7     		b	.L200
 2258              	.LVL234:
 2259              	.L208:
 288:src/display.c **** 
 2260              		.loc 1 288 1 view .LVU719
 2261              	.LBE205:
 2262              	.LBE204:
 2263              	.LBB206:
 2264              	.LBB197:
 397:src/display.c **** 	return res;
 2265              		.loc 1 397 7 is_stmt 1 view .LVU720
 2266 0176 0398     		ldr	r0, [sp, #12]
 2267              	.LVL235:
 397:src/display.c **** 	return res;
 2268              		.loc 1 397 7 is_stmt 0 view .LVU721
 2269 0178 2221     		movs	r1, #34
 2270 017a FFF7FEFF 		bl	set_dig
 2271              	.LVL236:
 398:src/display.c **** }
 2272              		.loc 1 398 2 is_stmt 1 view .LVU722
 398:src/display.c **** }
 2273              		.loc 1 398 2 is_stmt 0 view .LVU723
 2274              	.LBE197:
 2275              	.LBE206:
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2276              		.loc 1 1306 2 is_stmt 1 view .LVU724
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2277              		.loc 1 1306 6 is_stmt 0 view .LVU725
 2278 017e 0E49     		ldr	r1, .L224
 2279 0180 19A8     		add	r0, sp, #100
 2280 0182 FFF7FEFF 		bl	dn_lt
 2281              	.LVL237:
ARM GAS  /tmp/ccAnlOT7.s 			page 99


1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2282              		.loc 1 1306 5 view .LVU726
 2283 0186 0028     		cmp	r0, #0
 2284 0188 DDD1     		bne	.L211
 2285              	.LVL238:
 2286              	.L197:
 2287              	.LBB207:
 2288              	.LBB187:
 397:src/display.c **** 	return res;
 2289              		.loc 1 397 7 is_stmt 1 view .LVU727
 2290 018a 6F21     		movs	r1, #111
 2291 018c 7A20     		movs	r0, #122
 2292 018e FFF7FEFF 		bl	set_dig
 2293              	.LVL239:
 2294              	.LBE187:
 2295              	.LBE207:
1259:src/display.c **** 	}
 2296              		.loc 1 1259 3 view .LVU728
 2297 0192 47E7     		b	.L193
 2298              	.LVL240:
 2299              	.L206:
 2300              	.LBB208:
 2301              	.LBB193:
 397:src/display.c **** 	return res;
 2302              		.loc 1 397 7 view .LVU729
 2303 0194 2721     		movs	r1, #39
 2304 0196 0398     		ldr	r0, [sp, #12]
 2305              	.LVL241:
 397:src/display.c **** 	return res;
 2306              		.loc 1 397 7 is_stmt 0 view .LVU730
 2307 0198 FFF7FEFF 		bl	set_dig
 2308              	.LVL242:
 397:src/display.c **** 	return res;
 2309              		.loc 1 397 7 view .LVU731
 2310 019c 2146     		mov	r1, r4
 2311 019e 9EE7     		b	.L207
 2312              	.LVL243:
 2313              	.L204:
 397:src/display.c **** 	return res;
 2314              		.loc 1 397 7 view .LVU732
 2315              	.LBE193:
 2316              	.LBE208:
 2317              	.LBB209:
 2318              	.LBB190:
 397:src/display.c **** 	return res;
 2319              		.loc 1 397 7 is_stmt 1 view .LVU733
 2320 01a0 4021     		movs	r1, #64
 2321 01a2 0398     		ldr	r0, [sp, #12]
 2322              	.LVL244:
 397:src/display.c **** 	return res;
 2323              		.loc 1 397 7 is_stmt 0 view .LVU734
 2324 01a4 FFF7FEFF 		bl	set_dig
 2325              	.LVL245:
 397:src/display.c **** 	return res;
 2326              		.loc 1 397 7 view .LVU735
 2327 01a8 2146     		mov	r1, r4
 2328 01aa 86E7     		b	.L205
ARM GAS  /tmp/ccAnlOT7.s 			page 100


 2329              	.LVL246:
 2330              	.L213:
 397:src/display.c **** 	return res;
 2331              		.loc 1 397 7 view .LVU736
 2332              	.LBE190:
 2333              	.LBE209:
 2334              	.LBB210:
 2335              	.LBB203:
 397:src/display.c **** 	return res;
 2336              		.loc 1 397 7 is_stmt 1 view .LVU737
 2337 01ac 7521     		movs	r1, #117
 2338 01ae 7A20     		movs	r0, #122
 2339 01b0 FFF7FEFF 		bl	set_dig
 2340              	.LVL247:
 2341 01b4 36E7     		b	.L193
 2342              	.L225:
 2343 01b6 00BF     		.align	2
 2344              	.L224:
 2345 01b8 00000000 		.word	const_9000
 2346 01bc 00000000 		.word	.LANCHOR1
 2347 01c0 00000000 		.word	const_hms_threshold
 2348 01c4 00000000 		.word	LastDisplayedNumber
 2349              	.LBE203:
 2350              	.LBE210:
 2351              		.cfi_endproc
 2352              	.LFE22:
 2354              		.section	.text.set_x_fract,"ax",%progbits
 2355              		.align	1
 2356              		.p2align 2,,3
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu fpv4-sp-d16
 2362              	set_x_fract:
 2363              	.LVL248:
 2364              	.LFB23:
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2365              		.loc 1 1316 57 view -0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 216
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
1317:src/display.c **** 	char buf[32], *p = buf;
 2369              		.loc 1 1317 2 view .LVU739
1318:src/display.c **** 	int j;
 2370              		.loc 1 1318 2 view .LVU740
1319:src/display.c **** 
 2371              		.loc 1 1319 2 view .LVU741
1321:src/display.c **** 		return 1;
 2372              		.loc 1 1321 2 view .LVU742
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2373              		.loc 1 1316 57 is_stmt 0 view .LVU743
 2374 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2375              		.cfi_def_cfa_offset 20
 2376              		.cfi_offset 4, -20
 2377              		.cfi_offset 5, -16
 2378              		.cfi_offset 6, -12
 2379              		.cfi_offset 7, -8
ARM GAS  /tmp/ccAnlOT7.s 			page 101


 2380              		.cfi_offset 14, -4
 2381 0002 0646     		mov	r6, r0
 2382 0004 B7B0     		sub	sp, sp, #220
 2383              		.cfi_def_cfa_offset 240
1321:src/display.c **** 		return 1;
 2384              		.loc 1 1321 6 view .LVU744
 2385 0006 0830     		adds	r0, r0, #8
 2386              	.LVL249:
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2387              		.loc 1 1316 57 view .LVU745
 2388 0008 0C46     		mov	r4, r1
1321:src/display.c **** 		return 1;
 2389              		.loc 1 1321 6 view .LVU746
 2390 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2391              	.LVL250:
1321:src/display.c **** 		return 1;
 2392              		.loc 1 1321 5 view .LVU747
 2393 000e 18B1     		cbz	r0, .L257
 2394              	.LVL251:
 2395              	.L246:
1322:src/display.c **** 	dn_abs(&x, rgx);
 2396              		.loc 1 1322 10 view .LVU748
 2397 0010 0125     		movs	r5, #1
 2398              	.L226:
1379:src/display.c **** 
 2399              		.loc 1 1379 1 view .LVU749
 2400 0012 2846     		mov	r0, r5
 2401 0014 37B0     		add	sp, sp, #220
 2402              		.cfi_remember_state
 2403              		.cfi_def_cfa_offset 20
 2404              		@ sp needed
 2405 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2406              	.LVL252:
 2407              	.L257:
 2408              		.cfi_restore_state
 2409              	.LBB219:
 2410              	.LBI219:
1316:src/display.c **** 	decNumber x, w, n, d, t;
 2411              		.loc 1 1316 12 is_stmt 1 view .LVU750
 2412              	.LBB220:
1323:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2413              		.loc 1 1323 2 view .LVU751
 2414 0018 3146     		mov	r1, r6
 2415 001a 0546     		mov	r5, r0
 2416 001c 09A8     		add	r0, sp, #36
 2417 001e FFF7FEFF 		bl	dn_abs
 2418              	.LVL253:
1324:src/display.c **** 		return 0;
 2419              		.loc 1 1324 2 view .LVU752
1324:src/display.c **** 		return 0;
 2420              		.loc 1 1324 6 is_stmt 0 view .LVU753
 2421 0022 5D49     		ldr	r1, .L262
 2422 0024 09A8     		add	r0, sp, #36
 2423 0026 FFF7FEFF 		bl	dn_lt
 2424              	.LVL254:
1324:src/display.c **** 		return 0;
 2425              		.loc 1 1324 5 view .LVU754
ARM GAS  /tmp/ccAnlOT7.s 			page 102


 2426 002a 0028     		cmp	r0, #0
 2427 002c F1D0     		beq	.L226
1326:src/display.c **** 		return 0;
 2428              		.loc 1 1326 2 is_stmt 1 view .LVU755
1326:src/display.c **** 		return 0;
 2429              		.loc 1 1326 6 is_stmt 0 view .LVU756
 2430 002e 5B49     		ldr	r1, .L262+4
 2431 0030 09A8     		add	r0, sp, #36
 2432 0032 FFF7FEFF 		bl	dn_lt
 2433              	.LVL255:
1326:src/display.c **** 		return 0;
 2434              		.loc 1 1326 5 view .LVU757
 2435 0036 0746     		mov	r7, r0
 2436 0038 0028     		cmp	r0, #0
 2437 003a EAD1     		bne	.L226
1328:src/display.c **** 		if (res != NULL)
 2438              		.loc 1 1328 2 is_stmt 1 view .LVU758
1328:src/display.c **** 		if (res != NULL)
 2439              		.loc 1 1328 5 is_stmt 0 view .LVU759
 2440 003c 96F90830 		ldrsb	r3, [r6, #8]
 2441 0040 002B     		cmp	r3, #0
 2442 0042 C0F28680 		blt	.L258
 2443              	.LVL256:
 2444              	.L231:
1334:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2445              		.loc 1 1334 2 is_stmt 1 view .LVU760
 2446 0046 09A9     		add	r1, sp, #36
 2447 0048 12A8     		add	r0, sp, #72
 2448 004a FFF7FEFF 		bl	decNumberFrac
 2449              	.LVL257:
1335:src/display.c **** 
 2450              		.loc 1 1335 2 view .LVU761
 2451 004e 12AA     		add	r2, sp, #72
 2452 0050 24A9     		add	r1, sp, #144
 2453 0052 1BA8     		add	r0, sp, #108
 2454 0054 FFF7FEFF 		bl	decNumber2Fraction
 2455              	.LVL258:
1337:src/display.c **** 	dn_compare(&t, &t, &w);
 2456              		.loc 1 1337 2 view .LVU762
 2457 0058 24AA     		add	r2, sp, #144
 2458 005a 1BA9     		add	r1, sp, #108
 2459 005c 2DA8     		add	r0, sp, #180
 2460 005e FFF7FEFF 		bl	dn_divide
 2461              	.LVL259:
1338:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2462              		.loc 1 1338 2 view .LVU763
 2463 0062 2DA9     		add	r1, sp, #180
 2464 0064 12AA     		add	r2, sp, #72
 2465 0066 0846     		mov	r0, r1
 2466 0068 FFF7FEFF 		bl	dn_compare
 2467              	.LVL260:
1339:src/display.c **** 
 2468              		.loc 1 1339 2 view .LVU764
 2469 006c 09A9     		add	r1, sp, #36
 2470 006e 12A8     		add	r0, sp, #72
 2471 0070 FFF7FEFF 		bl	decNumberTrunc
 2472              	.LVL261:
ARM GAS  /tmp/ccAnlOT7.s 			page 103


1341:src/display.c **** 		dn_inc(&w);
 2473              		.loc 1 1341 2 view .LVU765
1341:src/display.c **** 		dn_inc(&w);
 2474              		.loc 1 1341 6 is_stmt 0 view .LVU766
 2475 0074 24A9     		add	r1, sp, #144
 2476 0076 1BA8     		add	r0, sp, #108
 2477 0078 FFF7FEFF 		bl	dn_eq
 2478              	.LVL262:
1341:src/display.c **** 		dn_inc(&w);
 2479              		.loc 1 1341 5 view .LVU767
 2480 007c 0028     		cmp	r0, #0
 2481 007e 70D1     		bne	.L259
 2482              	.L233:
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2483              		.loc 1 1346 2 is_stmt 1 view .LVU768
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2484              		.loc 1 1346 6 is_stmt 0 view .LVU769
 2485 0080 474B     		ldr	r3, .L262+8
 2486 0082 1B68     		ldr	r3, [r3]
 2487 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1346:src/display.c **** 		if (!dn_eq0(&w)) {
 2488              		.loc 1 1346 5 view .LVU770
 2489 0088 DB06     		lsls	r3, r3, #27
 2490 008a 55D4     		bmi	.L234
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2491              		.loc 1 1347 3 is_stmt 1 view .LVU771
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2492              		.loc 1 1347 8 is_stmt 0 view .LVU772
 2493 008c 12A8     		add	r0, sp, #72
 2494 008e FFF7FEFF 		bl	dn_eq0
 2495              	.LVL263:
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2496              		.loc 1 1347 6 view .LVU773
 2497 0092 0028     		cmp	r0, #0
 2498 0094 6CD0     		beq	.L260
1318:src/display.c **** 	int j;
 2499              		.loc 1 1318 17 view .LVU774
 2500 0096 01AE     		add	r6, sp, #4
 2501              	.LVL264:
1318:src/display.c **** 	int j;
 2502              		.loc 1 1318 17 view .LVU775
 2503 0098 3546     		mov	r5, r6
 2504              	.L235:
 2505              	.LVL265:
1355:src/display.c **** 	*p++ = '/';
 2506              		.loc 1 1355 2 is_stmt 1 view .LVU776
1355:src/display.c **** 	*p++ = '/';
 2507              		.loc 1 1355 17 is_stmt 0 view .LVU777
 2508 009a 1BA8     		add	r0, sp, #108
 2509 009c FFF7FEFF 		bl	dn_to_int
 2510              	.LVL266:
 2511 00a0 0146     		mov	r1, r0
1355:src/display.c **** 	*p++ = '/';
 2512              		.loc 1 1355 6 view .LVU778
 2513 00a2 2846     		mov	r0, r5
 2514 00a4 FFF7FEFF 		bl	num_arg
 2515              	.LVL267:
ARM GAS  /tmp/ccAnlOT7.s 			page 104


1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2516              		.loc 1 1356 2 is_stmt 1 view .LVU779
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2517              		.loc 1 1356 4 is_stmt 0 view .LVU780
 2518 00a8 0546     		mov	r5, r0
 2519              	.LVL268:
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2520              		.loc 1 1356 7 view .LVU781
 2521 00aa 2F23     		movs	r3, #47
 2522 00ac 05F8013B 		strb	r3, [r5], #1
 2523              	.LVL269:
1357:src/display.c **** 	*p = '\0';
 2524              		.loc 1 1357 2 is_stmt 1 view .LVU782
1357:src/display.c **** 	*p = '\0';
 2525              		.loc 1 1357 17 is_stmt 0 view .LVU783
 2526 00b0 24A8     		add	r0, sp, #144
 2527 00b2 FFF7FEFF 		bl	dn_to_int
 2528              	.LVL270:
 2529 00b6 0146     		mov	r1, r0
1357:src/display.c **** 	*p = '\0';
 2530              		.loc 1 1357 6 view .LVU784
 2531 00b8 2846     		mov	r0, r5
 2532 00ba FFF7FEFF 		bl	num_arg
 2533              	.LVL271:
1358:src/display.c **** 	if ((p - 12) > buf) {
 2534              		.loc 1 1358 2 is_stmt 1 view .LVU785
1358:src/display.c **** 	if ((p - 12) > buf) {
 2535              		.loc 1 1358 5 is_stmt 0 view .LVU786
 2536 00be 0546     		mov	r5, r0
 2537 00c0 0023     		movs	r3, #0
 2538 00c2 05F80C39 		strb	r3, [r5], #-12
1359:src/display.c **** 		p -= 12;
 2539              		.loc 1 1359 2 is_stmt 1 view .LVU787
1359:src/display.c **** 		p -= 12;
 2540              		.loc 1 1359 5 is_stmt 0 view .LVU788
 2541 00c6 B542     		cmp	r5, r6
 2542 00c8 32D8     		bhi	.L236
 2543 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2544              	.LVL272:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2545              		.loc 1 1363 12 is_stmt 1 view .LVU789
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2546              		.loc 1 1363 2 is_stmt 0 view .LVU790
 2547 00ce 51B1     		cbz	r1, .L238
1362:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2548              		.loc 1 1362 11 view .LVU791
 2549 00d0 3546     		mov	r5, r6
 2550              	.LVL273:
 2551              	.L241:
1364:src/display.c **** 		j += SEGS_PER_DIGIT;
 2552              		.loc 1 1364 3 is_stmt 1 view .LVU792
 2553              	.LBB221:
 2554              	.LBI221:
 395:src/display.c **** 	if (res) *res++ = ch;
 2555              		.loc 1 395 14 view .LVU793
 2556              	.LBB222:
 396:src/display.c **** 	else	set_dig(base, ch);
ARM GAS  /tmp/ccAnlOT7.s 			page 105


 2557              		.loc 1 396 2 view .LVU794
 396:src/display.c **** 	else	set_dig(base, ch);
 2558              		.loc 1 396 11 view .LVU795
 396:src/display.c **** 	else	set_dig(base, ch);
 2559              		.loc 1 396 15 is_stmt 0 view .LVU796
 2560 00d2 2346     		mov	r3, r4
 2561              	.LVL274:
 396:src/display.c **** 	else	set_dig(base, ch);
 2562              		.loc 1 396 5 view .LVU797
 2563 00d4 34B3     		cbz	r4, .L239
 2564              	.LVL275:
 396:src/display.c **** 	else	set_dig(base, ch);
 2565              		.loc 1 396 18 view .LVU798
 2566 00d6 03F8011B 		strb	r1, [r3], #1
 2567              	.LVL276:
 396:src/display.c **** 	else	set_dig(base, ch);
 2568              		.loc 1 396 15 view .LVU799
 2569 00da 1C46     		mov	r4, r3
 2570              	.LVL277:
 2571              	.L240:
 398:src/display.c **** }
 2572              		.loc 1 398 2 is_stmt 1 view .LVU800
 398:src/display.c **** }
 2573              		.loc 1 398 2 is_stmt 0 view .LVU801
 2574              	.LBE222:
 2575              	.LBE221:
1365:src/display.c **** 	}
 2576              		.loc 1 1365 3 is_stmt 1 view .LVU802
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2577              		.loc 1 1363 12 is_stmt 0 view .LVU803
 2578 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2579              	.LVL278:
1365:src/display.c **** 	}
 2580              		.loc 1 1365 5 view .LVU804
 2581 00e0 0937     		adds	r7, r7, #9
 2582              	.LVL279:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2583              		.loc 1 1363 24 is_stmt 1 view .LVU805
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2584              		.loc 1 1363 12 view .LVU806
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2585              		.loc 1 1363 2 is_stmt 0 view .LVU807
 2586 00e2 0029     		cmp	r1, #0
 2587 00e4 F5D1     		bne	.L241
 2588              	.LVL280:
 2589              	.L238:
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2590              		.loc 1 1368 2 is_stmt 1 view .LVU808
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2591              		.loc 1 1368 6 is_stmt 0 view .LVU809
 2592 00e6 2DA8     		add	r0, sp, #180
 2593 00e8 FFF7FEFF 		bl	dn_eq0
 2594              	.LVL281:
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
 2595              		.loc 1 1368 5 view .LVU810
 2596 00ec F0B9     		cbnz	r0, .L249
1370:src/display.c **** 		p = (char *)S7_fract_LT;
ARM GAS  /tmp/ccAnlOT7.s 			page 106


 2597              		.loc 1 1370 7 is_stmt 1 view .LVU811
1370:src/display.c **** 		p = (char *)S7_fract_LT;
 2598              		.loc 1 1370 10 is_stmt 0 view .LVU812
 2599 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1373:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2600              		.loc 1 1373 5 view .LVU813
 2601 00f2 2C4D     		ldr	r5, .L262+12
 2602 00f4 2C4B     		ldr	r3, .L262+16
 2603 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2604 00fa 38BF     		it	cc
 2605 00fc 1D46     		movcc	r5, r3
 2606              	.L242:
 2607              	.LVL282:
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2608              		.loc 1 1374 26 is_stmt 1 view .LVU814
 2609              	.LBB225:
 2610              	.LBB223:
 396:src/display.c **** 	else	set_dig(base, ch);
 2611              		.loc 1 396 15 is_stmt 0 view .LVU815
 2612 00fe 6C26     		movs	r6, #108
 2613 0100 2021     		movs	r1, #32
 2614 0102 08E0     		b	.L245
 2615              	.LVL283:
 2616              	.L261:
 396:src/display.c **** 	else	set_dig(base, ch);
 2617              		.loc 1 396 15 view .LVU816
 2618              	.LBE223:
 2619              	.LBE225:
 2620              	.LBB226:
 2621              	.LBB227:
 396:src/display.c **** 	else	set_dig(base, ch);
 2622              		.loc 1 396 18 view .LVU817
 2623 0104 03F8011B 		strb	r1, [r3], #1
 2624              	.LVL284:
 396:src/display.c **** 	else	set_dig(base, ch);
 2625              		.loc 1 396 15 view .LVU818
 2626 0108 1C46     		mov	r4, r3
 2627              	.LVL285:
 2628              	.L244:
 398:src/display.c **** }
 2629              		.loc 1 398 2 is_stmt 1 view .LVU819
 398:src/display.c **** }
 2630              		.loc 1 398 2 is_stmt 0 view .LVU820
 2631              	.LBE227:
 2632              	.LBE226:
1376:src/display.c **** 	}
 2633              		.loc 1 1376 3 is_stmt 1 view .LVU821
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2634              		.loc 1 1374 26 is_stmt 0 view .LVU822
 2635 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2636              	.LVL286:
1376:src/display.c **** 	}
 2637              		.loc 1 1376 5 view .LVU823
 2638 010e 0736     		adds	r6, r6, #7
 2639              	.LVL287:
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2640              		.loc 1 1374 38 is_stmt 1 view .LVU824
ARM GAS  /tmp/ccAnlOT7.s 			page 107


1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2641              		.loc 1 1374 26 view .LVU825
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
 2642              		.loc 1 1374 2 is_stmt 0 view .LVU826
 2643 0110 0029     		cmp	r1, #0
 2644 0112 3FF47DAF 		beq	.L246
 2645              	.LVL288:
 2646              	.L245:
1375:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
 2647              		.loc 1 1375 3 is_stmt 1 view .LVU827
 2648              	.LBB229:
 2649              	.LBI226:
 395:src/display.c **** 	if (res) *res++ = ch;
 2650              		.loc 1 395 14 view .LVU828
 2651              	.LBB228:
 396:src/display.c **** 	else	set_dig(base, ch);
 2652              		.loc 1 396 2 view .LVU829
 396:src/display.c **** 	else	set_dig(base, ch);
 2653              		.loc 1 396 11 view .LVU830
 396:src/display.c **** 	else	set_dig(base, ch);
 2654              		.loc 1 396 15 is_stmt 0 view .LVU831
 2655 0116 2346     		mov	r3, r4
 2656              	.LVL289:
 396:src/display.c **** 	else	set_dig(base, ch);
 2657              		.loc 1 396 5 view .LVU832
 2658 0118 002C     		cmp	r4, #0
 2659 011a F3D1     		bne	.L261
 2660              	.LVL290:
 397:src/display.c **** 	return res;
 2661              		.loc 1 397 7 is_stmt 1 view .LVU833
 2662 011c 3046     		mov	r0, r6
 2663 011e FFF7FEFF 		bl	set_dig
 2664              	.LVL291:
 397:src/display.c **** 	return res;
 2665              		.loc 1 397 7 is_stmt 0 view .LVU834
 2666 0122 F2E7     		b	.L244
 2667              	.LVL292:
 2668              	.L239:
 397:src/display.c **** 	return res;
 2669              		.loc 1 397 7 view .LVU835
 2670              	.LBE228:
 2671              	.LBE229:
 2672              	.LBB230:
 2673              	.LBB224:
 397:src/display.c **** 	return res;
 2674              		.loc 1 397 7 is_stmt 1 view .LVU836
 2675 0124 3846     		mov	r0, r7
 2676 0126 FFF7FEFF 		bl	set_dig
 2677              	.LVL293:
 397:src/display.c **** 	return res;
 2678              		.loc 1 397 7 is_stmt 0 view .LVU837
 2679 012a D7E7     		b	.L240
 2680              	.LVL294:
 2681              	.L249:
 397:src/display.c **** 	return res;
 2682              		.loc 1 397 7 view .LVU838
 2683              	.LBE224:
ARM GAS  /tmp/ccAnlOT7.s 			page 108


 2684              	.LBE230:
1369:src/display.c **** 	else if (decNumberIsNegative(&t))
 2685              		.loc 1 1369 5 view .LVU839
 2686 012c 1F4D     		ldr	r5, .L262+20
 2687 012e E6E7     		b	.L242
 2688              	.LVL295:
 2689              	.L236:
1360:src/display.c **** 		*p = '<';
 2690              		.loc 1 1360 3 is_stmt 1 view .LVU840
1361:src/display.c **** 	} else	p = buf;
 2691              		.loc 1 1361 3 view .LVU841
1361:src/display.c **** 	} else	p = buf;
 2692              		.loc 1 1361 6 is_stmt 0 view .LVU842
 2693 0130 3C21     		movs	r1, #60
 2694 0132 00F80C1C 		strb	r1, [r0, #-12]
 2695              	.LVL296:
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
 2696              		.loc 1 1363 12 is_stmt 1 view .LVU843
 2697 0136 CCE7     		b	.L241
 2698              	.LVL297:
 2699              	.L234:
1352:src/display.c **** 		dn_add(&n, &n, &x);
 2700              		.loc 1 1352 3 view .LVU844
 2701 0138 12A9     		add	r1, sp, #72
 2702 013a 24AA     		add	r2, sp, #144
 2703 013c 09A8     		add	r0, sp, #36
 2704 013e FFF7FEFF 		bl	dn_multiply
 2705              	.LVL298:
1353:src/display.c **** 	}
 2706              		.loc 1 1353 3 view .LVU845
 2707 0142 1BA9     		add	r1, sp, #108
 2708 0144 09AA     		add	r2, sp, #36
 2709 0146 0846     		mov	r0, r1
1318:src/display.c **** 	int j;
 2710              		.loc 1 1318 17 is_stmt 0 view .LVU846
 2711 0148 01AE     		add	r6, sp, #4
 2712              	.LVL299:
1353:src/display.c **** 	}
 2713              		.loc 1 1353 3 view .LVU847
 2714 014a FFF7FEFF 		bl	dn_add
 2715              	.LVL300:
1318:src/display.c **** 	int j;
 2716              		.loc 1 1318 17 view .LVU848
 2717 014e 3546     		mov	r5, r6
 2718 0150 A3E7     		b	.L235
 2719              	.LVL301:
 2720              	.L258:
1329:src/display.c **** 			*res++ += '-';
 2721              		.loc 1 1329 3 is_stmt 1 view .LVU849
1329:src/display.c **** 			*res++ += '-';
 2722              		.loc 1 1329 6 is_stmt 0 view .LVU850
 2723 0152 D4B1     		cbz	r4, .L232
1330:src/display.c **** 		else
 2724              		.loc 1 1330 4 is_stmt 1 view .LVU851
1330:src/display.c **** 		else
 2725              		.loc 1 1330 8 is_stmt 0 view .LVU852
 2726 0154 2346     		mov	r3, r4
ARM GAS  /tmp/ccAnlOT7.s 			page 109


 2727              	.LVL302:
1330:src/display.c **** 		else
 2728              		.loc 1 1330 11 view .LVU853
 2729 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2730              	.LVL303:
1330:src/display.c **** 		else
 2731              		.loc 1 1330 11 view .LVU854
 2732 015a 2D32     		adds	r2, r2, #45
 2733 015c 2270     		strb	r2, [r4]
1330:src/display.c **** 		else
 2734              		.loc 1 1330 8 view .LVU855
 2735 015e 1C46     		mov	r4, r3
 2736              	.LVL304:
1330:src/display.c **** 		else
 2737              		.loc 1 1330 8 view .LVU856
 2738 0160 71E7     		b	.L231
 2739              	.LVL305:
 2740              	.L259:
1342:src/display.c **** 		decNumberZero(&n);
 2741              		.loc 1 1342 3 is_stmt 1 view .LVU857
 2742 0162 12A8     		add	r0, sp, #72
 2743 0164 FFF7FEFF 		bl	dn_inc
 2744              	.LVL306:
1343:src/display.c **** 	}
 2745              		.loc 1 1343 3 view .LVU858
 2746 0168 1BA8     		add	r0, sp, #108
 2747 016a FFF7FEFF 		bl	decNumberZero
 2748              	.LVL307:
 2749 016e 87E7     		b	.L233
 2750              	.L260:
1348:src/display.c **** 			*p++ = ' ';
 2751              		.loc 1 1348 4 view .LVU859
1348:src/display.c **** 			*p++ = ' ';
 2752              		.loc 1 1348 19 is_stmt 0 view .LVU860
 2753 0170 12A8     		add	r0, sp, #72
 2754 0172 FFF7FEFF 		bl	dn_to_int
 2755              	.LVL308:
1348:src/display.c **** 			*p++ = ' ';
 2756              		.loc 1 1348 8 view .LVU861
 2757 0176 01AE     		add	r6, sp, #4
 2758              	.LVL309:
1348:src/display.c **** 			*p++ = ' ';
 2759              		.loc 1 1348 19 view .LVU862
 2760 0178 0146     		mov	r1, r0
1348:src/display.c **** 			*p++ = ' ';
 2761              		.loc 1 1348 8 view .LVU863
 2762 017a 3046     		mov	r0, r6
 2763 017c FFF7FEFF 		bl	num_arg
 2764              	.LVL310:
1349:src/display.c **** 		}
 2765              		.loc 1 1349 4 is_stmt 1 view .LVU864
1349:src/display.c **** 		}
 2766              		.loc 1 1349 6 is_stmt 0 view .LVU865
 2767 0180 0546     		mov	r5, r0
 2768              	.LVL311:
1349:src/display.c **** 		}
 2769              		.loc 1 1349 9 view .LVU866
ARM GAS  /tmp/ccAnlOT7.s 			page 110


 2770 0182 2023     		movs	r3, #32
 2771 0184 05F8013B 		strb	r3, [r5], #1
 2772              	.LVL312:
1349:src/display.c **** 		}
 2773              		.loc 1 1349 9 view .LVU867
 2774 0188 87E7     		b	.L235
 2775              	.LVL313:
 2776              	.L232:
1332:src/display.c **** 	}
 2777              		.loc 1 1332 4 is_stmt 1 view .LVU868
 2778              	.LBB231:
 2779              	.LBI231:
 284:src/display.c **** {
 2780              		.loc 1 284 13 view .LVU869
 2781              	.LBB232:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2782              		.loc 1 286 2 view .LVU870
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2783              		.loc 1 286 24 is_stmt 0 view .LVU871
 2784 018a 094B     		ldr	r3, .L262+24
 2785 018c 2D22     		movs	r2, #45
 287:src/display.c **** }
 2786              		.loc 1 287 2 view .LVU872
 2787 018e 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 2788              		.loc 1 286 24 view .LVU873
 2789 0190 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 2790              		.loc 1 287 2 is_stmt 1 view .LVU874
 2791 0192 FFF7FEFF 		bl	set_dot
 2792              	.LVL314:
 288:src/display.c **** 
 2793              		.loc 1 288 1 is_stmt 0 view .LVU875
 2794 0196 56E7     		b	.L231
 2795              	.L263:
 2796              		.align	2
 2797              	.L262:
 2798 0198 00000000 		.word	const_100000
 2799 019c 00000000 		.word	const_0_0001
 2800 01a0 00000000 		.word	main_ram
 2801 01a4 00000000 		.word	.LANCHOR8
 2802 01a8 00000000 		.word	.LANCHOR10
 2803 01ac 00000000 		.word	.LANCHOR9
 2804 01b0 00000000 		.word	LastDisplayedNumber
 2805              	.LBE232:
 2806              	.LBE231:
 2807              	.LBE220:
 2808              	.LBE219:
 2809              		.cfi_endproc
 2810              	.LFE23:
 2812              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2813              		.align	2
 2814              	.LC2:
 2815 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2815      36376F39 
 2815      44313233 
 2815      34356800 
ARM GAS  /tmp/ccAnlOT7.s 			page 111


 2816              		.section	.text.carry_overflow,"ax",%progbits
 2817              		.align	1
 2818              		.p2align 2,,3
 2819              		.syntax unified
 2820              		.thumb
 2821              		.thumb_func
 2822              		.fpu fpv4-sp-d16
 2824              	carry_overflow:
 2825              	.LFB15:
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2826              		.loc 1 550 34 is_stmt 1 view -0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 0
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 551:src/display.c **** 	int c;
 2830              		.loc 1 551 2 view .LVU877
 2831              	.LVL315:
 552:src/display.c **** 	unsigned int b;
 2832              		.loc 1 552 2 view .LVU878
 553:src/display.c **** 
 2833              		.loc 1 553 2 view .LVU879
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2834              		.loc 1 556 2 view .LVU880
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2835              		.loc 1 550 34 is_stmt 0 view .LVU881
 2836 0000 10B5     		push	{r4, lr}
 2837              		.cfi_def_cfa_offset 8
 2838              		.cfi_offset 4, -8
 2839              		.cfi_offset 14, -4
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2840              		.loc 1 556 16 view .LVU882
 2841 0002 1B4B     		ldr	r3, .L277
 2842 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2843 0006 023B     		subs	r3, r3, #2
 2844 0008 DBB2     		uxtb	r3, r3
 2845 000a 032B     		cmp	r3, #3
 2846 000c 14D8     		bhi	.L265
 2847 000e 194A     		ldr	r2, .L277+4
 2848 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2849              	.LVL316:
 565:src/display.c **** 		SET_EXP_SIGN;
 2850              		.loc 1 565 2 is_stmt 1 view .LVU883
 565:src/display.c **** 		SET_EXP_SIGN;
 2851              		.loc 1 565 13 is_stmt 0 view .LVU884
 2852 0014 A4F10B03 		sub	r3, r4, #11
 565:src/display.c **** 		SET_EXP_SIGN;
 2853              		.loc 1 565 5 view .LVU885
 2854 0018 042B     		cmp	r3, #4
 2855 001a 17D9     		bls	.L274
 2856              	.L267:
 567:src/display.c **** 	set_dig(base, c);
 2857              		.loc 1 567 2 is_stmt 1 view .LVU886
 2858              	.LVL317:
 568:src/display.c **** 
 2859              		.loc 1 568 2 view .LVU887
 567:src/display.c **** 	set_dig(base, c);
 2860              		.loc 1 567 23 is_stmt 0 view .LVU888
ARM GAS  /tmp/ccAnlOT7.s 			page 112


 2861 001c 164B     		ldr	r3, .L277+8
 2862 001e 1C44     		add	r4, r4, r3
 2863              	.LVL318:
 568:src/display.c **** 
 2864              		.loc 1 568 2 view .LVU889
 2865 0020 6C20     		movs	r0, #108
 2866 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2867 0026 FFF7FEFF 		bl	set_dig
 2868              	.LVL319:
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2869              		.loc 1 571 2 is_stmt 1 view .LVU890
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2870              		.loc 1 571 6 is_stmt 0 view .LVU891
 2871 002a FFF7FEFF 		bl	get_carry
 2872              	.LVL320:
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2873              		.loc 1 571 5 view .LVU892
 2874 002e D0B9     		cbnz	r0, .L275
 2875              	.L268:
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2876              		.loc 1 573 2 is_stmt 1 view .LVU893
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2877              		.loc 1 573 6 is_stmt 0 view .LVU894
 2878 0030 FFF7FEFF 		bl	get_overflow
 2879              	.LVL321:
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2880              		.loc 1 573 5 view .LVU895
 2881 0034 88B9     		cbnz	r0, .L276
 575:src/display.c **** 
 2882              		.loc 1 575 1 view .LVU896
 2883 0036 10BD     		pop	{r4, pc}
 2884              	.LVL322:
 2885              	.L265:
 561:src/display.c **** 	}
 2886              		.loc 1 561 11 is_stmt 1 view .LVU897
 561:src/display.c **** 	}
 2887              		.loc 1 561 21 is_stmt 0 view .LVU898
 2888 0038 104B     		ldr	r3, .L277+12
 2889 003a 1B68     		ldr	r3, [r3]
 2890 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2891 0040 2409     		lsrs	r4, r4, #4
 561:src/display.c **** 	}
 2892              		.loc 1 561 30 view .LVU899
 2893 0042 0134     		adds	r4, r4, #1
 2894              	.LVL323:
 561:src/display.c **** 	}
 2895              		.loc 1 561 34 is_stmt 1 view .LVU900
 565:src/display.c **** 		SET_EXP_SIGN;
 2896              		.loc 1 565 2 view .LVU901
 565:src/display.c **** 		SET_EXP_SIGN;
 2897              		.loc 1 565 13 is_stmt 0 view .LVU902
 2898 0044 A4F10B03 		sub	r3, r4, #11
 565:src/display.c **** 		SET_EXP_SIGN;
 2899              		.loc 1 565 5 view .LVU903
 2900 0048 042B     		cmp	r3, #4
 2901 004a E7D8     		bhi	.L267
 2902              	.L274:
ARM GAS  /tmp/ccAnlOT7.s 			page 113


 566:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 2903              		.loc 1 566 3 is_stmt 1 view .LVU904
 2904              	.LBB239:
 2905              	.LBI239:
 296:src/display.c **** {
 2906              		.loc 1 296 13 view .LVU905
 2907              	.LBB240:
 298:src/display.c **** 	set_dot(EXP_SIGN);
 2908              		.loc 1 298 2 view .LVU906
 298:src/display.c **** 	set_dot(EXP_SIGN);
 2909              		.loc 1 298 26 is_stmt 0 view .LVU907
 2910 004c 0C4B     		ldr	r3, .L277+16
 2911 004e 2D22     		movs	r2, #45
 299:src/display.c **** }
 2912              		.loc 1 299 2 view .LVU908
 2913 0050 8220     		movs	r0, #130
 298:src/display.c **** 	set_dot(EXP_SIGN);
 2914              		.loc 1 298 26 view .LVU909
 2915 0052 1A70     		strb	r2, [r3]
 299:src/display.c **** }
 2916              		.loc 1 299 2 is_stmt 1 view .LVU910
 2917 0054 FFF7FEFF 		bl	set_dot
 2918              	.LVL324:
 300:src/display.c **** 
 2919              		.loc 1 300 1 is_stmt 0 view .LVU911
 2920 0058 E0E7     		b	.L267
 2921              	.LVL325:
 2922              	.L276:
 300:src/display.c **** 
 2923              		.loc 1 300 1 view .LVU912
 2924              	.LBE240:
 2925              	.LBE239:
 2926              	.LBB241:
 2927              	.LBI241:
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2928              		.loc 1 550 13 is_stmt 1 view .LVU913
 2929              	.LBB242:
 574:src/display.c **** }
 2930              		.loc 1 574 3 view .LVU914
 2931              	.LBE242:
 2932              	.LBE241:
 575:src/display.c **** 
 2933              		.loc 1 575 1 is_stmt 0 view .LVU915
 2934 005a BDE81040 		pop	{r4, lr}
 2935              		.cfi_remember_state
 2936              		.cfi_restore 14
 2937              		.cfi_restore 4
 2938              		.cfi_def_cfa_offset 0
 2939              	.LVL326:
 2940              	.LBB244:
 2941              	.LBB243:
 574:src/display.c **** }
 2942              		.loc 1 574 3 view .LVU916
 2943 005e 6F21     		movs	r1, #111
 2944 0060 7A20     		movs	r0, #122
 2945 0062 FFF7FEBF 		b	set_dig
 2946              	.LVL327:
ARM GAS  /tmp/ccAnlOT7.s 			page 114


 2947              	.L275:
 2948              		.cfi_restore_state
 574:src/display.c **** }
 2949              		.loc 1 574 3 view .LVU917
 2950              	.LBE243:
 2951              	.LBE244:
 572:src/display.c **** 	if (get_overflow())
 2952              		.loc 1 572 3 is_stmt 1 view .LVU918
 2953 0066 6321     		movs	r1, #99
 2954 0068 7320     		movs	r0, #115
 2955 006a FFF7FEFF 		bl	set_dig
 2956              	.LVL328:
 2957 006e DFE7     		b	.L268
 2958              	.L278:
 2959              		.align	2
 2960              	.L277:
 2961 0070 00000000 		.word	StateWhileOn
 2962 0074 00000000 		.word	.LANCHOR11
 2963 0078 00000000 		.word	.LC2
 2964 007c 00000000 		.word	main_ram
 2965 0080 00000000 		.word	LastDisplayedExponent
 2966              		.cfi_endproc
 2967              	.LFE15:
 2969              		.global	__aeabi_uldivmod
 2970              		.section	.text.set_int_x,"ax",%progbits
 2971              		.align	1
 2972              		.p2align 2,,3
 2973              		.syntax unified
 2974              		.thumb
 2975              		.thumb_func
 2976              		.fpu fpv4-sp-d16
 2978              	set_int_x:
 2979              	.LVL329:
 2980              	.LFB18:
1042:src/display.c **** 	const int ws = word_size();
 2981              		.loc 1 1042 61 view -0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 88
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
1042:src/display.c **** 	const int ws = word_size();
 2985              		.loc 1 1042 61 is_stmt 0 view .LVU920
 2986 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2987              		.cfi_def_cfa_offset 36
 2988              		.cfi_offset 4, -36
 2989              		.cfi_offset 5, -32
 2990              		.cfi_offset 6, -28
 2991              		.cfi_offset 7, -24
 2992              		.cfi_offset 8, -20
 2993              		.cfi_offset 9, -16
 2994              		.cfi_offset 10, -12
 2995              		.cfi_offset 11, -8
 2996              		.cfi_offset 14, -4
 2997 0004 97B0     		sub	sp, sp, #92
 2998              		.cfi_def_cfa_offset 128
1042:src/display.c **** 	const int ws = word_size();
 2999              		.loc 1 1042 61 view .LVU921
 3000 0006 9246     		mov	r10, r2
ARM GAS  /tmp/ccAnlOT7.s 			page 115


 3001 0008 8046     		mov	r8, r0
 3002 000a 8946     		mov	r9, r1
1043:src/display.c **** 	unsigned int b;
 3003              		.loc 1 1043 2 is_stmt 1 view .LVU922
1043:src/display.c **** 	unsigned int b;
 3004              		.loc 1 1043 17 is_stmt 0 view .LVU923
 3005 000c FFF7FEFF 		bl	word_size
 3006              	.LVL330:
1043:src/display.c **** 	unsigned int b;
 3007              		.loc 1 1043 17 view .LVU924
 3008 0010 CD4B     		ldr	r3, .L368
 3009 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3010 0014 023B     		subs	r3, r3, #2
 3011 0016 DBB2     		uxtb	r3, r3
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3012              		.loc 1 1049 6 view .LVU925
 3013 0018 0022     		movs	r2, #0
 3014 001a 032B     		cmp	r3, #3
1043:src/display.c **** 	unsigned int b;
 3015              		.loc 1 1043 17 view .LVU926
 3016 001c 8346     		mov	fp, r0
 3017              	.LVL331:
1044:src/display.c **** 	long long int vs = value;
 3018              		.loc 1 1044 2 is_stmt 1 view .LVU927
1045:src/display.c **** 	unsigned long long int v;
 3019              		.loc 1 1045 2 view .LVU928
1046:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3020              		.loc 1 1046 2 view .LVU929
1047:src/display.c **** 	int i, j, k;
 3021              		.loc 1 1047 2 view .LVU930
1048:src/display.c **** 	int sign = 0;
 3022              		.loc 1 1048 2 view .LVU931
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3023              		.loc 1 1049 2 view .LVU932
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3024              		.loc 1 1049 6 is_stmt 0 view .LVU933
 3025 001e 0492     		str	r2, [sp, #16]
1050:src/display.c **** 
 3026              		.loc 1 1050 2 is_stmt 1 view .LVU934
 3027              	.LVL332:
1052:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3028              		.loc 1 1052 2 view .LVU935
 3029 0020 00F24481 		bhi	.L280
 3030 0024 C94A     		ldr	r2, .L368+4
 3031 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3032              	.LVL333:
1060:src/display.c **** 		IntMaxWindow = 0;
 3033              		.loc 1 1060 2 view .LVU936
1060:src/display.c **** 		IntMaxWindow = 0;
 3034              		.loc 1 1060 5 is_stmt 0 view .LVU937
 3035 002a BAF1000F 		cmp	r10, #0
 3036 002e 00F04481 		beq	.L359
 3037              	.LVL334:
 3038              	.L282:
1065:src/display.c **** 		v = extract_value(value, &sign);
 3039              		.loc 1 1065 2 is_stmt 1 view .LVU938
1065:src/display.c **** 		v = extract_value(value, &sign);
ARM GAS  /tmp/ccAnlOT7.s 			page 116


 3040              		.loc 1 1065 24 is_stmt 0 view .LVU939
 3041 0032 6B1E     		subs	r3, r5, #1
1065:src/display.c **** 		v = extract_value(value, &sign);
 3042              		.loc 1 1065 30 view .LVU940
 3043 0034 47F67574 		movw	r4, #32629
 3044 0038 1C41     		asrs	r4, r4, r3
1065:src/display.c **** 		v = extract_value(value, &sign);
 3045              		.loc 1 1065 5 view .LVU941
 3046 003a 14F00104 		ands	r4, r4, #1
 3047 003e 40F0F080 		bne	.L360
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3048              		.loc 1 1082 3 is_stmt 1 view .LVU942
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3049              		.loc 1 1082 6 is_stmt 0 view .LVU943
 3050 0042 BBF13F0F 		cmp	fp, #63
 3051 0046 18DC     		bgt	.L293
 3052              	.LBB245:
1083:src/display.c **** 			vs &= mask;
 3053              		.loc 1 1083 4 is_stmt 1 view .LVU944
1083:src/display.c **** 			vs &= mask;
 3054              		.loc 1 1083 36 is_stmt 0 view .LVU945
 3055 0048 0121     		movs	r1, #1
 3056 004a ABF12006 		sub	r6, fp, #32
 3057 004e CBF12000 		rsb	r0, fp, #32
 3058 0052 21FA00F0 		lsr	r0, r1, r0
 3059 0056 01FA06F3 		lsl	r3, r1, r6
 3060 005a 01FA0BF2 		lsl	r2, r1, fp
 3061 005e 0343     		orrs	r3, r3, r0
 3062              	.LVL335:
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3063              		.loc 1 1084 4 is_stmt 1 view .LVU946
1083:src/display.c **** 			vs &= mask;
 3064              		.loc 1 1083 24 is_stmt 0 view .LVU947
 3065 0060 12F1FF30 		adds	r0, r2, #-1
 3066 0064 43F1FF31 		adc	r1, r3, #-1
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3067              		.loc 1 1084 7 view .LVU948
 3068 0068 00EA0800 		and	r0, r0, r8
 3069 006c 01EA0901 		and	r1, r1, r9
 3070              	.LVL336:
1085:src/display.c **** 				vs |= ~mask;
 3071              		.loc 1 1085 7 view .LVU949
 3072 0070 0A2D     		cmp	r5, #10
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3073              		.loc 1 1084 7 view .LVU950
 3074 0072 8046     		mov	r8, r0
 3075              	.LVL337:
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3076              		.loc 1 1084 7 view .LVU951
 3077 0074 8946     		mov	r9, r1
1085:src/display.c **** 				vs |= ~mask;
 3078              		.loc 1 1085 4 is_stmt 1 view .LVU952
1085:src/display.c **** 				vs |= ~mask;
 3079              		.loc 1 1085 7 is_stmt 0 view .LVU953
 3080 0076 00F02681 		beq	.L361
 3081              	.LVL338:
 3082              	.L293:
ARM GAS  /tmp/ccAnlOT7.s 			page 117


1085:src/display.c **** 				vs |= ~mask;
 3083              		.loc 1 1085 7 view .LVU954
 3084              	.LBE245:
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3085              		.loc 1 1089 3 is_stmt 1 view .LVU955
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3086              		.loc 1 1089 7 is_stmt 0 view .LVU956
 3087 007a B54B     		ldr	r3, .L368+8
 3088 007c 1B68     		ldr	r3, [r3]
 3089 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3090              		.loc 1 1089 6 view .LVU957
 3091 0082 9907     		lsls	r1, r3, #30
 3092 0084 3FD5     		bpl	.L322
1092:src/display.c **** 			v = (unsigned long long int)vs;
 3093              		.loc 1 1092 10 is_stmt 1 view .LVU958
 3094              	.LBB246:
1100:src/display.c **** 			const unsigned int b1 = b >> 1;
 3095              		.loc 1 1100 4 view .LVU959
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3096              		.loc 1 1101 4 view .LVU960
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3097              		.loc 1 1101 23 is_stmt 0 view .LVU961
 3098 0086 6A08     		lsrs	r2, r5, #1
 3099              	.LVL339:
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3100              		.loc 1 1102 4 is_stmt 1 view .LVU962
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3101              		.loc 1 1102 41 is_stmt 0 view .LVU963
 3102 0088 12F00A0F 		tst	r2, #10
 3103 008c 14BF     		ite	ne
 3104 008e 0123     		movne	r3, #1
 3105 0090 0023     		moveq	r3, #0
1102:src/display.c **** 			v = (unsigned long long int)vs;
 3106              		.loc 1 1102 68 view .LVU964
 3107 0092 12F00C0F 		tst	r2, #12
 3108 0096 18BF     		it	ne
 3109 0098 43F00203 		orrne	r3, r3, #2
 3110              	.LVL340:
 3111              	.L299:
1103:src/display.c **** 
 3112              		.loc 1 1103 4 is_stmt 1 discriminator 4 view .LVU965
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3113              		.loc 1 1105 12 is_stmt 0 discriminator 4 view .LVU966
 3114 009c 0BEB0306 		add	r6, fp, r3
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3115              		.loc 1 1105 25 discriminator 4 view .LVU967
 3116 00a0 0133     		adds	r3, r3, #1
 3117              	.LVL341:
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3118              		.loc 1 1105 19 discriminator 4 view .LVU968
 3119 00a2 B6FBF3F6 		udiv	r6, r6, r3
1106:src/display.c **** 				const int r = v % b;
 3120              		.loc 1 1106 4 discriminator 4 view .LVU969
 3121 00a6 002E     		cmp	r6, #0
1103:src/display.c **** 
 3122              		.loc 1 1103 6 discriminator 4 view .LVU970
ARM GAS  /tmp/ccAnlOT7.s 			page 118


 3123 00a8 4046     		mov	r0, r8
 3124 00aa 4946     		mov	r1, r9
 3125              	.LVL342:
1105:src/display.c **** 			for (i=0; i<n; i++) {
 3126              		.loc 1 1105 4 is_stmt 1 discriminator 4 view .LVU971
1106:src/display.c **** 				const int r = v % b;
 3127              		.loc 1 1106 4 discriminator 4 view .LVU972
1106:src/display.c **** 				const int r = v % b;
 3128              		.loc 1 1106 14 discriminator 4 view .LVU973
1106:src/display.c **** 				const int r = v % b;
 3129              		.loc 1 1106 4 is_stmt 0 discriminator 4 view .LVU974
 3130 00ac 40F36D81 		ble	.L323
 3131 00b0 05AC     		add	r4, sp, #20
 3132 00b2 DFF8A8B2 		ldr	fp, .L368+20
 3133              	.LVL343:
1106:src/display.c **** 				const int r = v % b;
 3134              		.loc 1 1106 4 discriminator 4 view .LVU975
 3135 00b6 3719     		adds	r7, r6, r4
 3136              	.LVL344:
 3137              	.L300:
 3138              	.LBB247:
1107:src/display.c **** 				v /= b;
 3139              		.loc 1 1107 5 is_stmt 1 discriminator 3 view .LVU976
 3140 00b8 2A46     		mov	r2, r5
 3141 00ba 0023     		movs	r3, #0
 3142 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 3143              	.LVL345:
1108:src/display.c **** 				buf[i] = DIGITS[r];
 3144              		.loc 1 1108 5 discriminator 3 view .LVU977
1109:src/display.c **** 			}
 3145              		.loc 1 1109 12 is_stmt 0 discriminator 3 view .LVU978
 3146 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3147 00c4 04F8013B 		strb	r3, [r4], #1
 3148              	.LVL346:
1109:src/display.c **** 			}
 3149              		.loc 1 1109 5 is_stmt 1 discriminator 3 view .LVU979
 3150              	.LBE247:
1106:src/display.c **** 				const int r = v % b;
 3151              		.loc 1 1106 19 discriminator 3 view .LVU980
1106:src/display.c **** 				const int r = v % b;
 3152              		.loc 1 1106 14 discriminator 3 view .LVU981
1106:src/display.c **** 				const int r = v % b;
 3153              		.loc 1 1106 4 is_stmt 0 discriminator 3 view .LVU982
 3154 00c8 BC42     		cmp	r4, r7
 3155 00ca F5D1     		bne	.L300
 3156 00cc 06F1FF39 		add	r9, r6, #-1
1106:src/display.c **** 				const int r = v % b;
 3157              		.loc 1 1106 4 view .LVU983
 3158 00d0 3446     		mov	r4, r6
 3159              	.LVL347:
 3160              	.L292:
1106:src/display.c **** 				const int r = v % b;
 3161              		.loc 1 1106 4 view .LVU984
 3162              	.LBE246:
1115:src/display.c **** 		if (sign) *res++ = '-';
 3163              		.loc 1 1115 2 is_stmt 1 view .LVU985
1115:src/display.c **** 		if (sign) *res++ = '-';
ARM GAS  /tmp/ccAnlOT7.s 			page 119


 3164              		.loc 1 1115 5 is_stmt 0 view .LVU986
 3165 00d2 BAF1000F 		cmp	r10, #0
 3166 00d6 41D0     		beq	.L301
 3167              	.LVL348:
 3168              	.L362:
1116:src/display.c **** 		while (--i >= 0)
 3169              		.loc 1 1116 3 is_stmt 1 view .LVU987
1116:src/display.c **** 		while (--i >= 0)
 3170              		.loc 1 1116 6 is_stmt 0 view .LVU988
 3171 00d8 049B     		ldr	r3, [sp, #16]
 3172 00da 13B1     		cbz	r3, .L302
1116:src/display.c **** 		while (--i >= 0)
 3173              		.loc 1 1116 13 is_stmt 1 discriminator 1 view .LVU989
 3174              	.LVL349:
1116:src/display.c **** 		while (--i >= 0)
 3175              		.loc 1 1116 20 is_stmt 0 discriminator 1 view .LVU990
 3176 00dc 2D23     		movs	r3, #45
 3177 00de 0AF8013B 		strb	r3, [r10], #1
 3178              	.LVL350:
 3179              	.L302:
1117:src/display.c **** 			*res++ = buf[i];
 3180              		.loc 1 1117 9 is_stmt 1 view .LVU991
1117:src/display.c **** 			*res++ = buf[i];
 3181              		.loc 1 1117 9 is_stmt 0 view .LVU992
 3182 00e2 B9F1FF3F 		cmp	r9, #-1
 3183 00e6 0BD0     		beq	.L279
 3184 00e8 09F10103 		add	r3, r9, #1
 3185 00ec 05A9     		add	r1, sp, #20
 3186 00ee 0AF1FF3A 		add	r10, r10, #-1
 3187 00f2 0B44     		add	r3, r3, r1
 3188              	.LVL351:
 3189              	.L304:
1118:src/display.c **** 	} else {
 3190              		.loc 1 1118 4 is_stmt 1 view .LVU993
1118:src/display.c **** 	} else {
 3191              		.loc 1 1118 11 is_stmt 0 view .LVU994
 3192 00f4 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3193              	.LVL352:
1118:src/display.c **** 	} else {
 3194              		.loc 1 1118 11 view .LVU995
 3195 00f8 0AF8012F 		strb	r2, [r10, #1]!
 3196              	.LVL353:
1117:src/display.c **** 			*res++ = buf[i];
 3197              		.loc 1 1117 9 is_stmt 1 view .LVU996
1117:src/display.c **** 			*res++ = buf[i];
 3198              		.loc 1 1117 9 is_stmt 0 view .LVU997
 3199 00fc 9942     		cmp	r1, r3
 3200 00fe F9D1     		bne	.L304
 3201              	.LVL354:
 3202              	.L279:
1164:src/display.c **** 
 3203              		.loc 1 1164 1 view .LVU998
 3204 0100 17B0     		add	sp, sp, #92
 3205              		.cfi_remember_state
 3206              		.cfi_def_cfa_offset 36
 3207              		@ sp needed
 3208 0102 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccAnlOT7.s 			page 120


 3209              	.LVL355:
 3210              	.L322:
 3211              		.cfi_restore_state
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3212              		.loc 1 1089 24 discriminator 1 view .LVU999
 3213 0106 58EA0903 		orrs	r3, r8, r9
 3214 010a 00F0C680 		beq	.L287
1092:src/display.c **** 			v = (unsigned long long int)vs;
 3215              		.loc 1 1092 10 is_stmt 1 view .LVU1000
1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3216              		.loc 1 1093 4 view .LVU1001
 3217 010e 2A46     		mov	r2, r5
1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3218              		.loc 1 1093 6 is_stmt 0 view .LVU1002
 3219 0110 4746     		mov	r7, r8
 3220 0112 0023     		movs	r3, #0
 3221 0114 0DF11408 		add	r8, sp, #20
 3222 0118 DFF840B2 		ldr	fp, .L368+20
 3223              	.LVL356:
1093:src/display.c **** 			for (i=0; v != 0; i++) {
 3224              		.loc 1 1093 6 view .LVU1003
 3225 011c 0095     		str	r5, [sp]
 3226 011e 4E46     		mov	r6, r9
1094:src/display.c **** 				const int r = v % b;
 3227              		.loc 1 1094 4 is_stmt 1 view .LVU1004
 3228              	.LVL357:
1094:src/display.c **** 				const int r = v % b;
 3229              		.loc 1 1094 14 view .LVU1005
 3230 0120 4546     		mov	r5, r8
 3231              	.LVL358:
1094:src/display.c **** 				const int r = v % b;
 3232              		.loc 1 1094 14 is_stmt 0 view .LVU1006
 3233 0122 9946     		mov	r9, r3
 3234 0124 9046     		mov	r8, r2
 3235              	.LVL359:
 3236              	.L298:
 3237              	.LBB248:
1095:src/display.c **** 				v /= b;
 3238              		.loc 1 1095 5 is_stmt 1 discriminator 3 view .LVU1007
 3239 0126 3846     		mov	r0, r7
 3240 0128 3146     		mov	r1, r6
 3241 012a 4246     		mov	r2, r8
 3242 012c 4B46     		mov	r3, r9
 3243 012e FFF7FEFF 		bl	__aeabi_uldivmod
 3244              	.LVL360:
 3245 0132 3346     		mov	r3, r6
 3246 0134 9446     		mov	ip, r2
 3247              	.LVL361:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3248              		.loc 1 1096 5 discriminator 3 view .LVU1008
 3249              	.LBE248:
1094:src/display.c **** 				const int r = v % b;
 3250              		.loc 1 1094 4 is_stmt 0 discriminator 3 view .LVU1009
 3251 0136 4B45     		cmp	r3, r9
 3252 0138 3A46     		mov	r2, r7
 3253              	.LVL362:
1094:src/display.c **** 				const int r = v % b;
ARM GAS  /tmp/ccAnlOT7.s 			page 121


 3254              		.loc 1 1094 4 discriminator 3 view .LVU1010
 3255 013a 08BF     		it	eq
 3256 013c 4245     		cmpeq	r2, r8
 3257              	.LBB249:
1097:src/display.c **** 			}
 3258              		.loc 1 1097 12 discriminator 3 view .LVU1011
 3259 013e 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3260              	.LVL363:
1097:src/display.c **** 			}
 3261              		.loc 1 1097 12 discriminator 3 view .LVU1012
 3262 0142 05F8017B 		strb	r7, [r5], #1
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3263              		.loc 1 1096 7 discriminator 3 view .LVU1013
 3264 0146 0E46     		mov	r6, r1
 3265              	.LVL364:
1097:src/display.c **** 			}
 3266              		.loc 1 1097 5 is_stmt 1 discriminator 3 view .LVU1014
 3267              	.LBE249:
1094:src/display.c **** 				const int r = v % b;
 3268              		.loc 1 1094 22 discriminator 3 view .LVU1015
 3269              	.LBB250:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3270              		.loc 1 1096 7 is_stmt 0 discriminator 3 view .LVU1016
 3271 0148 0746     		mov	r7, r0
 3272 014a 2146     		mov	r1, r4
 3273              	.LVL365:
1096:src/display.c **** 				buf[i] = DIGITS[r];
 3274              		.loc 1 1096 7 discriminator 3 view .LVU1017
 3275              	.LBE250:
1094:src/display.c **** 				const int r = v % b;
 3276              		.loc 1 1094 23 discriminator 3 view .LVU1018
 3277 014c 04F10104 		add	r4, r4, #1
 3278              	.LVL366:
1094:src/display.c **** 				const int r = v % b;
 3279              		.loc 1 1094 14 is_stmt 1 discriminator 3 view .LVU1019
1094:src/display.c **** 				const int r = v % b;
 3280              		.loc 1 1094 4 is_stmt 0 discriminator 3 view .LVU1020
 3281 0150 E9D2     		bcs	.L298
 3282 0152 009D     		ldr	r5, [sp]
 3283 0154 8946     		mov	r9, r1
1115:src/display.c **** 		if (sign) *res++ = '-';
 3284              		.loc 1 1115 2 is_stmt 1 view .LVU1021
1115:src/display.c **** 		if (sign) *res++ = '-';
 3285              		.loc 1 1115 5 is_stmt 0 view .LVU1022
 3286 0156 BAF1000F 		cmp	r10, #0
 3287 015a BDD1     		bne	.L362
 3288              	.LVL367:
 3289              	.L301:
 3290              	.LBB251:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3291              		.loc 1 1135 3 is_stmt 1 view .LVU1023
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3292              		.loc 1 1135 32 is_stmt 0 view .LVU1024
 3293 015c 022D     		cmp	r5, #2
 3294 015e 00F0D880 		beq	.L363
 3295              	.LVL368:
1136:src/display.c **** 				: b == 16 ? 2 : 3;
ARM GAS  /tmp/ccAnlOT7.s 			page 122


 3296              		.loc 1 1136 3 is_stmt 1 view .LVU1025
1136:src/display.c **** 				: b == 16 ? 2 : 3;
 3297              		.loc 1 1136 29 is_stmt 0 view .LVU1026
 3298 0162 042D     		cmp	r5, #4
 3299 0164 00F00881 		beq	.L364
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3300              		.loc 1 1135 32 view .LVU1027
 3301 0168 102D     		cmp	r5, #16
 3302 016a 0CBF     		ite	eq
 3303 016c 0225     		moveq	r5, #2
 3304 016e 0325     		movne	r5, #3
 3305 0170 0C27     		movs	r7, #12
 3306              	.LVL369:
 3307              	.L306:
1138:src/display.c **** #endif
 3308              		.loc 1 1138 3 is_stmt 1 view .LVU1028
 3309 0172 FFF7FEFF 		bl	set_separator_decimal_modes
 3310              	.LVL370:
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3311              		.loc 1 1140 3 view .LVU1029
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3312              		.loc 1 1140 26 is_stmt 0 view .LVU1030
 3313 0176 99FBF7F3 		sdiv	r3, r9, r7
1141:src/display.c **** 			State2.window = 0;
 3314              		.loc 1 1141 25 view .LVU1031
 3315 017a 734A     		ldr	r2, .L368
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3316              		.loc 1 1140 16 view .LVU1032
 3317 017c 7549     		ldr	r1, .L368+12
1141:src/display.c **** 			State2.window = 0;
 3318              		.loc 1 1141 25 view .LVU1033
 3319 017e 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3320              		.loc 1 1140 16 view .LVU1034
 3321 0180 0B60     		str	r3, [r1]
1141:src/display.c **** 			State2.window = 0;
 3322              		.loc 1 1141 3 is_stmt 1 view .LVU1035
1141:src/display.c **** 			State2.window = 0;
 3323              		.loc 1 1141 7 is_stmt 0 view .LVU1036
 3324 0182 C2F3C208 		ubfx	r8, r2, #3, #3
1141:src/display.c **** 			State2.window = 0;
 3325              		.loc 1 1141 6 view .LVU1037
 3326 0186 4345     		cmp	r3, r8
 3327 0188 C0F2D780 		blt	.L308
 3328 018c 07FB08F8 		mul	r8, r7, r8
 3329              	.L309:
1143:src/display.c **** 
 3330              		.loc 1 1143 3 is_stmt 1 view .LVU1038
1143:src/display.c **** 
 3331              		.loc 1 1143 10 is_stmt 0 view .LVU1039
 3332 0190 16AB     		add	r3, sp, #88
 3333 0192 16AA     		add	r2, sp, #88
 3334 0194 1C44     		add	r4, r4, r3
 3335              	.LVL371:
1143:src/display.c **** 
 3336              		.loc 1 1143 10 view .LVU1040
 3337 0196 02EB0806 		add	r6, r2, r8
ARM GAS  /tmp/ccAnlOT7.s 			page 123


 3338 019a 0023     		movs	r3, #0
 3339 019c 453E     		subs	r6, r6, #69
 3340 019e 04F8443C 		strb	r3, [r4, #-68]
1145:src/display.c **** 		for (k = 0; k < 12; k++)
 3341              		.loc 1 1145 3 is_stmt 1 view .LVU1041
 3342              	.LVL372:
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3343              		.loc 1 1146 3 view .LVU1042
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3344              		.loc 1 1146 15 view .LVU1043
1143:src/display.c **** 
 3345              		.loc 1 1143 10 is_stmt 0 view .LVU1044
 3346 01a2 3246     		mov	r2, r6
 3347              	.LVL373:
 3348              	.L311:
1147:src/display.c **** 				break;
 3349              		.loc 1 1147 4 is_stmt 1 view .LVU1045
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3350              		.loc 1 1146 23 view .LVU1046
1147:src/display.c **** 				break;
 3351              		.loc 1 1147 7 is_stmt 0 view .LVU1047
 3352 01a4 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3353 01a8 0029     		cmp	r1, #0
 3354 01aa 00F0D980 		beq	.L310
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3355              		.loc 1 1146 24 discriminator 2 view .LVU1048
 3356 01ae 0133     		adds	r3, r3, #1
 3357              	.LVL374:
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3358              		.loc 1 1146 15 is_stmt 1 discriminator 2 view .LVU1049
1146:src/display.c **** 			if (buf[j + k] == '\0')
 3359              		.loc 1 1146 3 is_stmt 0 discriminator 2 view .LVU1050
 3360 01b0 0C2B     		cmp	r3, #12
 3361 01b2 F7D1     		bne	.L311
1149:src/display.c **** 			int ch = buf[j++];
 3362              		.loc 1 1149 3 view .LVU1051
 3363 01b4 4FF00B09 		mov	r9, #11
 3364              	.LVL375:
 3365              	.L312:
1149:src/display.c **** 			int ch = buf[j++];
 3366              		.loc 1 1149 3 view .LVU1052
 3367 01b8 08F10108 		add	r8, r8, #1
 3368 01bc C844     		add	r8, r8, r9
 3369 01be 4C46     		mov	r4, r9
 3370 01c0 4FF0630B 		mov	fp, #99
 3371 01c4 09E0     		b	.L317
 3372              	.LVL376:
 3373              	.L365:
 3374              	.LBB252:
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3375              		.loc 1 1155 5 view .LVU1053
 3376 01c6 644B     		ldr	r3, .L368+16
 3377 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3378              	.LVL377:
 3379              	.LBB253:
 3380              	.LBI253:
 355:src/display.c **** 	if (sep == SEP_NONE)
ARM GAS  /tmp/ccAnlOT7.s 			page 124


 3381              		.loc 1 355 14 is_stmt 1 view .LVU1054
 3382              	.LBB254:
 356:src/display.c **** 		return res;
 3383              		.loc 1 356 2 view .LVU1055
 356:src/display.c **** 		return res;
 3384              		.loc 1 356 5 is_stmt 0 view .LVU1056
 3385 01ca 09B1     		cbz	r1, .L315
 356:src/display.c **** 		return res;
 3386              		.loc 1 356 5 view .LVU1057
 3387 01cc FFF7FEFF 		bl	set_separator.part.0
 3388              	.LVL378:
 3389              	.L315:
 356:src/display.c **** 		return res;
 3390              		.loc 1 356 5 view .LVU1058
 3391              	.LBE254:
 3392              	.LBE253:
1156:src/display.c **** 		}
 3393              		.loc 1 1156 4 is_stmt 1 discriminator 2 view .LVU1059
 3394              	.LBE252:
1149:src/display.c **** 			int ch = buf[j++];
 3395              		.loc 1 1149 3 is_stmt 0 discriminator 2 view .LVU1060
 3396 01d0 013C     		subs	r4, r4, #1
1149:src/display.c **** 			int ch = buf[j++];
 3397              		.loc 1 1149 3 discriminator 2 view .LVU1061
 3398 01d2 621C     		adds	r2, r4, #1
 3399              	.LBB257:
1156:src/display.c **** 		}
 3400              		.loc 1 1156 8 discriminator 2 view .LVU1062
 3401 01d4 ABF1090B 		sub	fp, fp, #9
 3402              	.LVL379:
1156:src/display.c **** 		}
 3403              		.loc 1 1156 8 discriminator 2 view .LVU1063
 3404              	.LBE257:
1149:src/display.c **** 			int ch = buf[j++];
 3405              		.loc 1 1149 23 is_stmt 1 discriminator 2 view .LVU1064
1149:src/display.c **** 			int ch = buf[j++];
 3406              		.loc 1 1149 13 discriminator 2 view .LVU1065
1149:src/display.c **** 			int ch = buf[j++];
 3407              		.loc 1 1149 3 is_stmt 0 discriminator 2 view .LVU1066
 3408 01d8 16D0     		beq	.L321
 3409              	.LVL380:
 3410              	.L317:
 3411              	.LBB258:
1150:src/display.c **** 			if (i >= shift)
 3412              		.loc 1 1150 4 is_stmt 1 view .LVU1067
1152:src/display.c **** 			set_dig(dig, ch);
 3413              		.loc 1 1152 5 view .LVU1068
1150:src/display.c **** 			if (i >= shift)
 3414              		.loc 1 1150 8 is_stmt 0 view .LVU1069
 3415 01da 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1151:src/display.c **** 				ch -= 030;
 3416              		.loc 1 1151 7 view .LVU1070
 3417 01de A9EB0402 		sub	r2, r9, r4
 3418 01e2 BA42     		cmp	r2, r7
 3419 01e4 A8EB040A 		sub	r10, r8, r4
 3420              	.LVL381:
1151:src/display.c **** 				ch -= 030;
ARM GAS  /tmp/ccAnlOT7.s 			page 125


 3421              		.loc 1 1151 4 is_stmt 1 view .LVU1071
1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3422              		.loc 1 1153 4 is_stmt 0 view .LVU1072
 3423 01e8 5846     		mov	r0, fp
1152:src/display.c **** 			set_dig(dig, ch);
 3424              		.loc 1 1152 8 view .LVU1073
 3425 01ea A8BF     		it	ge
 3426 01ec 1839     		subge	r1, r1, #24
 3427              	.LVL382:
1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3428              		.loc 1 1153 4 is_stmt 1 view .LVU1074
 3429 01ee FFF7FEFF 		bl	set_dig
 3430              	.LVL383:
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3431              		.loc 1 1154 4 view .LVU1075
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3432              		.loc 1 1154 11 is_stmt 0 view .LVU1076
 3433 01f2 9AFBF5F3 		sdiv	r3, r10, r5
 3434 01f6 05FB13A3 		mls	r3, r5, r3, r10
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3435              		.loc 1 1154 7 view .LVU1077
 3436 01fa 002B     		cmp	r3, #0
 3437 01fc E8D1     		bne	.L315
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3438              		.loc 1 1155 5 is_stmt 1 discriminator 1 view .LVU1078
 3439              	.LBB256:
 3440              	.LBB255:
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 3441              		.loc 1 358 2 discriminator 1 view .LVU1079
 3442 01fe 5846     		mov	r0, fp
 3443              	.LBE255:
 3444              	.LBE256:
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3445              		.loc 1 1154 25 is_stmt 0 discriminator 1 view .LVU1080
 3446 0200 002C     		cmp	r4, #0
 3447 0202 E0D1     		bne	.L365
1156:src/display.c **** 		}
 3448              		.loc 1 1156 4 is_stmt 1 view .LVU1081
1156:src/display.c **** 		}
 3449              		.loc 1 1156 8 is_stmt 0 view .LVU1082
 3450 0204 ABF1090B 		sub	fp, fp, #9
 3451              	.LVL384:
1156:src/display.c **** 		}
 3452              		.loc 1 1156 8 view .LVU1083
 3453              	.LBE258:
1149:src/display.c **** 			int ch = buf[j++];
 3454              		.loc 1 1149 23 is_stmt 1 view .LVU1084
1149:src/display.c **** 			int ch = buf[j++];
 3455              		.loc 1 1149 13 view .LVU1085
 3456              	.L321:
1158:src/display.c **** 			if (dig >= 0)
 3457              		.loc 1 1158 3 view .LVU1086
1158:src/display.c **** 			if (dig >= 0)
 3458              		.loc 1 1158 6 is_stmt 0 view .LVU1087
 3459 0208 049B     		ldr	r3, [sp, #16]
 3460 020a 002B     		cmp	r3, #0
 3461 020c 3FF478AF 		beq	.L279
ARM GAS  /tmp/ccAnlOT7.s 			page 126


1159:src/display.c **** 				set_dig(dig, '-');
 3462              		.loc 1 1159 4 is_stmt 1 view .LVU1088
1159:src/display.c **** 				set_dig(dig, '-');
 3463              		.loc 1 1159 7 is_stmt 0 view .LVU1089
 3464 0210 BBF1000F 		cmp	fp, #0
 3465 0214 C0F2B280 		blt	.L366
 3466              	.LVL385:
 3467              	.L320:
1160:src/display.c **** 			else	SET_MANT_SIGN;
 3468              		.loc 1 1160 5 is_stmt 1 view .LVU1090
 3469 0218 5846     		mov	r0, fp
 3470 021a 2D21     		movs	r1, #45
 3471 021c FFF7FEFF 		bl	set_dig
 3472              	.LVL386:
 3473 0220 6EE7     		b	.L279
 3474              	.LVL387:
 3475              	.L360:
1160:src/display.c **** 			else	SET_MANT_SIGN;
 3476              		.loc 1 1160 5 is_stmt 0 view .LVU1091
 3477              	.LBE251:
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3478              		.loc 1 1066 3 is_stmt 1 view .LVU1092
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3479              		.loc 1 1066 7 is_stmt 0 view .LVU1093
 3480 0222 04AA     		add	r2, sp, #16
 3481 0224 4046     		mov	r0, r8
 3482 0226 4946     		mov	r1, r9
 3483 0228 FFF7FEFF 		bl	extract_value
 3484              	.LVL388:
 3485 022c 0646     		mov	r6, r0
 3486 022e 0F46     		mov	r7, r1
 3487              	.LVL389:
1067:src/display.c **** 			v = value;
 3488              		.loc 1 1067 3 is_stmt 1 view .LVU1094
1067:src/display.c **** 			v = value;
 3489              		.loc 1 1067 7 is_stmt 0 view .LVU1095
 3490 0230 FFF7FEFF 		bl	int_mode
 3491              	.LVL390:
1067:src/display.c **** 			v = value;
 3492              		.loc 1 1067 6 view .LVU1096
 3493 0234 58BB     		cbnz	r0, .L284
1067:src/display.c **** 			v = value;
 3494              		.loc 1 1067 32 discriminator 1 view .LVU1097
 3495 0236 049B     		ldr	r3, [sp, #16]
 3496 0238 012B     		cmp	r3, #1
 3497 023a 28D1     		bne	.L284
1067:src/display.c **** 			v = value;
 3498              		.loc 1 1067 45 discriminator 2 view .LVU1098
 3499 023c 56EA0703 		orrs	r3, r6, r7
 3500 0240 6AD0     		beq	.L367
 3501              	.LVL391:
 3502              	.L285:
1067:src/display.c **** 			v = value;
 3503              		.loc 1 1067 45 discriminator 2 view .LVU1099
 3504 0242 DFF818B1 		ldr	fp, .L368+20
 3505              	.LVL392:
1042:src/display.c **** 	const int ws = word_size();
ARM GAS  /tmp/ccAnlOT7.s 			page 127


 3506              		.loc 1 1042 61 discriminator 3 view .LVU1100
 3507 0246 CDF80CA0 		str	r10, [sp, #12]
 3508 024a 0023     		movs	r3, #0
 3509 024c D946     		mov	r9, fp
 3510 024e 0DF11408 		add	r8, sp, #20
 3511 0252 0024     		movs	r4, #0
 3512 0254 AA46     		mov	r10, r5
 3513              	.LVL393:
1042:src/display.c **** 	const int ws = word_size();
 3514              		.loc 1 1042 61 discriminator 3 view .LVU1101
 3515 0256 9B46     		mov	fp, r3
 3516              	.L291:
 3517              	.LVL394:
 3518              	.LBB261:
1076:src/display.c **** 				v /= b;
 3519              		.loc 1 1076 5 is_stmt 1 discriminator 3 view .LVU1102
 3520 0258 3046     		mov	r0, r6
 3521 025a 3946     		mov	r1, r7
 3522 025c 5246     		mov	r2, r10
 3523 025e 5B46     		mov	r3, fp
 3524 0260 FFF7FEFF 		bl	__aeabi_uldivmod
 3525              	.LVL395:
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3526              		.loc 1 1077 5 discriminator 3 view .LVU1103
 3527 0264 CDE90067 		strd	r6, [sp]
1078:src/display.c **** 			}
 3528              		.loc 1 1078 12 is_stmt 0 discriminator 3 view .LVU1104
 3529 0268 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
 3530 026c 08F8013B 		strb	r3, [r8], #1
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3531              		.loc 1 1077 7 discriminator 3 view .LVU1105
 3532 0270 0F46     		mov	r7, r1
 3533              	.LVL396:
1078:src/display.c **** 			}
 3534              		.loc 1 1078 5 is_stmt 1 discriminator 3 view .LVU1106
 3535              	.LBE261:
1075:src/display.c **** 				const int r = v % b;
 3536              		.loc 1 1075 22 discriminator 3 view .LVU1107
1075:src/display.c **** 				const int r = v % b;
 3537              		.loc 1 1075 4 is_stmt 0 discriminator 3 view .LVU1108
 3538 0272 DDE90012 		ldrd	r1, [sp]
 3539              	.LVL397:
1075:src/display.c **** 				const int r = v % b;
 3540              		.loc 1 1075 4 discriminator 3 view .LVU1109
 3541 0276 5A45     		cmp	r2, fp
 3542 0278 08BF     		it	eq
 3543 027a 5145     		cmpeq	r1, r10
 3544 027c 2346     		mov	r3, r4
 3545              	.LVL398:
 3546              	.LBB262:
1077:src/display.c **** 				buf[i] = DIGITS[r];
 3547              		.loc 1 1077 7 discriminator 3 view .LVU1110
 3548 027e 0646     		mov	r6, r0
 3549              	.LBE262:
1075:src/display.c **** 				const int r = v % b;
 3550              		.loc 1 1075 23 discriminator 3 view .LVU1111
 3551 0280 04F10104 		add	r4, r4, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 128


 3552              	.LVL399:
1075:src/display.c **** 				const int r = v % b;
 3553              		.loc 1 1075 14 is_stmt 1 discriminator 3 view .LVU1112
1075:src/display.c **** 				const int r = v % b;
 3554              		.loc 1 1075 4 is_stmt 0 discriminator 3 view .LVU1113
 3555 0284 E8D2     		bcs	.L291
 3556 0286 DDF80CA0 		ldr	r10, [sp, #12]
 3557 028a 9946     		mov	r9, r3
 3558 028c 21E7     		b	.L292
 3559              	.LVL400:
 3560              	.L284:
1069:src/display.c **** 			if (sign)
 3561              		.loc 1 1069 3 is_stmt 1 view .LVU1114
1069:src/display.c **** 			if (sign)
 3562              		.loc 1 1069 6 is_stmt 0 view .LVU1115
 3563 028e 56EA0703 		orrs	r3, r6, r7
 3564 0292 D6D1     		bne	.L285
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3565              		.loc 1 1070 4 is_stmt 1 view .LVU1116
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3566              		.loc 1 1070 7 is_stmt 0 view .LVU1117
 3567 0294 049B     		ldr	r3, [sp, #16]
 3568 0296 002B     		cmp	r3, #0
 3569 0298 43D1     		bne	.L286
 3570              	.LVL401:
 3571              	.L287:
1072:src/display.c **** 			return;
 3572              		.loc 1 1072 4 is_stmt 1 view .LVU1118
 3573              	.LBB263:
 3574              	.LBI263:
 395:src/display.c **** 	if (res) *res++ = ch;
 3575              		.loc 1 395 14 view .LVU1119
 3576              	.LBB264:
 396:src/display.c **** 	else	set_dig(base, ch);
 3577              		.loc 1 396 2 view .LVU1120
 396:src/display.c **** 	else	set_dig(base, ch);
 3578              		.loc 1 396 5 is_stmt 0 view .LVU1121
 3579 029a BAF1000F 		cmp	r10, #0
 3580 029e 47D0     		beq	.L289
 3581              	.LVL402:
 3582              	.L288:
 396:src/display.c **** 	else	set_dig(base, ch);
 3583              		.loc 1 396 11 is_stmt 1 view .LVU1122
 396:src/display.c **** 	else	set_dig(base, ch);
 3584              		.loc 1 396 18 is_stmt 0 view .LVU1123
 3585 02a0 3023     		movs	r3, #48
 3586 02a2 8AF80030 		strb	r3, [r10]
 3587              	.LBE264:
 3588              	.LBE263:
1164:src/display.c **** 
 3589              		.loc 1 1164 1 view .LVU1124
 3590 02a6 17B0     		add	sp, sp, #92
 3591              		.cfi_remember_state
 3592              		.cfi_def_cfa_offset 36
 3593              		@ sp needed
 3594 02a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3595              	.LVL403:
ARM GAS  /tmp/ccAnlOT7.s 			page 129


 3596              	.L280:
 3597              		.cfi_restore_state
1057:src/display.c **** 	}
 3598              		.loc 1 1057 11 is_stmt 1 view .LVU1125
1057:src/display.c **** 	}
 3599              		.loc 1 1057 15 is_stmt 0 view .LVU1126
 3600 02ac FFF7FEFF 		bl	int_base
 3601              	.LVL404:
1057:src/display.c **** 	}
 3602              		.loc 1 1057 15 view .LVU1127
 3603 02b0 0546     		mov	r5, r0
 3604              	.LVL405:
1057:src/display.c **** 	}
 3605              		.loc 1 1057 27 is_stmt 1 view .LVU1128
1060:src/display.c **** 		IntMaxWindow = 0;
 3606              		.loc 1 1060 2 view .LVU1129
1060:src/display.c **** 		IntMaxWindow = 0;
 3607              		.loc 1 1060 5 is_stmt 0 view .LVU1130
 3608 02b2 BAF1000F 		cmp	r10, #0
 3609 02b6 7FF4BCAE 		bne	.L282
 3610              	.LVL406:
 3611              	.L359:
1061:src/display.c **** 		carry_overflow();
 3612              		.loc 1 1061 3 is_stmt 1 view .LVU1131
1061:src/display.c **** 		carry_overflow();
 3613              		.loc 1 1061 16 is_stmt 0 view .LVU1132
 3614 02ba 264B     		ldr	r3, .L368+12
 3615 02bc C3F800A0 		str	r10, [r3]
1062:src/display.c **** 	}
 3616              		.loc 1 1062 3 is_stmt 1 view .LVU1133
 3617 02c0 FFF7FEFF 		bl	carry_overflow
 3618              	.LVL407:
 3619 02c4 B5E6     		b	.L282
 3620              	.LVL408:
 3621              	.L361:
 3622              	.LBB266:
1085:src/display.c **** 				vs |= ~mask;
 3623              		.loc 1 1085 36 is_stmt 0 discriminator 1 view .LVU1134
 3624 02c6 0BF1FF31 		add	r1, fp, #-1
1085:src/display.c **** 				vs |= ~mask;
 3625              		.loc 1 1085 16 discriminator 1 view .LVU1135
 3626 02ca CBF12106 		rsb	r6, fp, #33
 3627 02ce C840     		lsrs	r0, r0, r1
 3628 02d0 09FA06F6 		lsl	r6, r9, r6
 3629 02d4 2039     		subs	r1, r1, #32
 3630 02d6 40EA0600 		orr	r0, r0, r6
 3631 02da 5CBF     		itt	pl
 3632 02dc 49FA01F1 		asrpl	r1, r9, r1
 3633 02e0 0843     		orrpl	r0, r0, r1
 3634 02e2 00F00106 		and	r6, r0, #1
 3635 02e6 0027     		movs	r7, #0
 3636 02e8 56EA0701 		orrs	r1, r6, r7
 3637 02ec 08D0     		beq	.L294
1086:src/display.c **** 		}
 3638              		.loc 1 1086 5 is_stmt 1 view .LVU1136
1086:src/display.c **** 		}
 3639              		.loc 1 1086 8 is_stmt 0 view .LVU1137
ARM GAS  /tmp/ccAnlOT7.s 			page 130


 3640 02ee 5042     		rsbs	r0, r2, #0
 3641 02f0 63EB4301 		sbc	r1, r3, r3, lsl #1
 3642 02f4 40EA0802 		orr	r2, r0, r8
 3643              	.LVL409:
1086:src/display.c **** 		}
 3644              		.loc 1 1086 8 view .LVU1138
 3645 02f8 41EA0903 		orr	r3, r1, r9
 3646              	.LVL410:
1086:src/display.c **** 		}
 3647              		.loc 1 1086 8 view .LVU1139
 3648 02fc 9046     		mov	r8, r2
 3649              	.LVL411:
1086:src/display.c **** 		}
 3650              		.loc 1 1086 8 view .LVU1140
 3651 02fe 9946     		mov	r9, r3
 3652              	.L294:
1086:src/display.c **** 		}
 3653              		.loc 1 1086 8 view .LVU1141
 3654              	.LBE266:
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3655              		.loc 1 1089 3 is_stmt 1 view .LVU1142
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3656              		.loc 1 1089 7 is_stmt 0 view .LVU1143
 3657 0300 134B     		ldr	r3, .L368+8
 3658 0302 1B68     		ldr	r3, [r3]
 3659 0304 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1089:src/display.c **** 			set_dig_s(dig, '0', res);
 3660              		.loc 1 1089 6 view .LVU1144
 3661 0308 9B07     		lsls	r3, r3, #30
 3662 030a 7FF5FCAE 		bpl	.L322
 3663 030e 0223     		movs	r3, #2
 3664 0310 C4E6     		b	.L299
 3665              	.LVL412:
 3666              	.L363:
 3667              	.LBB267:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3668              		.loc 1 1135 32 view .LVU1145
 3669 0312 0827     		movs	r7, #8
1137:src/display.c **** 		set_separator_decimal_modes();
 3670              		.loc 1 1137 5 view .LVU1146
 3671 0314 0425     		movs	r5, #4
 3672 0316 2CE7     		b	.L306
 3673              	.LVL413:
 3674              	.L367:
1137:src/display.c **** 		set_separator_decimal_modes();
 3675              		.loc 1 1137 5 view .LVU1147
 3676              	.LBE267:
1068:src/display.c **** 		if (v == 0) {
 3677              		.loc 1 1068 4 is_stmt 1 view .LVU1148
1068:src/display.c **** 		if (v == 0) {
 3678              		.loc 1 1068 6 is_stmt 0 view .LVU1149
 3679 0318 4646     		mov	r6, r8
 3680              	.LVL414:
1068:src/display.c **** 		if (v == 0) {
 3681              		.loc 1 1068 6 view .LVU1150
 3682 031a 4F46     		mov	r7, r9
 3683              	.LVL415:
ARM GAS  /tmp/ccAnlOT7.s 			page 131


1069:src/display.c **** 			if (sign)
 3684              		.loc 1 1069 3 is_stmt 1 view .LVU1151
1069:src/display.c **** 			if (sign)
 3685              		.loc 1 1069 6 is_stmt 0 view .LVU1152
 3686 031c 56EA0703 		orrs	r3, r6, r7
 3687 0320 8FD1     		bne	.L285
 3688              	.LVL416:
 3689              	.L286:
1071:src/display.c **** 			set_dig_s(dig, '0', res);
 3690              		.loc 1 1071 5 is_stmt 1 view .LVU1153
 3691              	.LBB268:
 3692              	.LBI268:
 395:src/display.c **** 	if (res) *res++ = ch;
 3693              		.loc 1 395 14 view .LVU1154
 3694              	.LBB269:
 396:src/display.c **** 	else	set_dig(base, ch);
 3695              		.loc 1 396 2 view .LVU1155
 396:src/display.c **** 	else	set_dig(base, ch);
 3696              		.loc 1 396 5 is_stmt 0 view .LVU1156
 3697 0322 BAF1000F 		cmp	r10, #0
 3698 0326 BBD1     		bne	.L288
 397:src/display.c **** 	return res;
 3699              		.loc 1 397 7 is_stmt 1 view .LVU1157
 3700 0328 2D21     		movs	r1, #45
 3701 032a 5A20     		movs	r0, #90
 3702 032c FFF7FEFF 		bl	set_dig
 3703              	.LVL417:
 397:src/display.c **** 	return res;
 3704              		.loc 1 397 7 is_stmt 0 view .LVU1158
 3705              	.LBE269:
 3706              	.LBE268:
1072:src/display.c **** 			return;
 3707              		.loc 1 1072 4 is_stmt 1 view .LVU1159
 3708              	.LBB270:
 395:src/display.c **** 	if (res) *res++ = ch;
 3709              		.loc 1 395 14 view .LVU1160
 3710              	.LBB265:
 396:src/display.c **** 	else	set_dig(base, ch);
 3711              		.loc 1 396 2 view .LVU1161
 3712              	.L289:
 397:src/display.c **** 	return res;
 3713              		.loc 1 397 7 view .LVU1162
 3714 0330 3021     		movs	r1, #48
 3715 0332 6320     		movs	r0, #99
 3716 0334 FFF7FEFF 		bl	set_dig
 3717              	.LVL418:
 3718 0338 E2E6     		b	.L279
 3719              	.LVL419:
 3720              	.L308:
 397:src/display.c **** 	return res;
 3721              		.loc 1 397 7 is_stmt 0 view .LVU1163
 3722              	.LBE265:
 3723              	.LBE270:
 3724              	.LBB271:
1142:src/display.c **** 		buf[i] = '\0';
 3725              		.loc 1 1142 4 is_stmt 1 view .LVU1164
1142:src/display.c **** 		buf[i] = '\0';
ARM GAS  /tmp/ccAnlOT7.s 			page 132


 3726              		.loc 1 1142 18 is_stmt 0 view .LVU1165
 3727 033a 034B     		ldr	r3, .L368
 3728 033c 6FF3C502 		bfc	r2, #3, #3
 3729 0340 1A75     		strb	r2, [r3, #20]
 3730 0342 4FF00008 		mov	r8, #0
 3731 0346 23E7     		b	.L309
 3732              	.L369:
 3733              		.align	2
 3734              	.L368:
 3735 0348 00000000 		.word	StateWhileOn
 3736 034c 00000000 		.word	CSWTCH.306
 3737 0350 00000000 		.word	main_ram
 3738 0354 00000000 		.word	IntMaxWindow
 3739 0358 00000000 		.word	.LANCHOR0
 3740 035c 00000000 		.word	.LANCHOR12
 3741              	.LVL420:
 3742              	.L310:
1149:src/display.c **** 			int ch = buf[j++];
 3743              		.loc 1 1149 13 is_stmt 1 discriminator 1 view .LVU1166
1149:src/display.c **** 			int ch = buf[j++];
 3744              		.loc 1 1149 3 is_stmt 0 discriminator 1 view .LVU1167
 3745 0360 03F1FF39 		add	r9, r3, #-1
 3746              	.LVL421:
1149:src/display.c **** 			int ch = buf[j++];
 3747              		.loc 1 1149 3 discriminator 1 view .LVU1168
 3748 0364 002B     		cmp	r3, #0
 3749 0366 7FF427AF 		bne	.L312
1158:src/display.c **** 			if (dig >= 0)
 3750              		.loc 1 1158 3 is_stmt 1 view .LVU1169
1158:src/display.c **** 			if (dig >= 0)
 3751              		.loc 1 1158 6 is_stmt 0 view .LVU1170
 3752 036a 049B     		ldr	r3, [sp, #16]
 3753 036c 002B     		cmp	r3, #0
 3754 036e 3FF4C7AE 		beq	.L279
 3755 0372 4FF0630B 		mov	fp, #99
 3756 0376 4FE7     		b	.L320
 3757              	.LVL422:
 3758              	.L364:
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3759              		.loc 1 1135 32 view .LVU1171
 3760 0378 0C27     		movs	r7, #12
 3761 037a FAE6     		b	.L306
 3762              	.LVL423:
 3763              	.L366:
1161:src/display.c **** 		}
 3764              		.loc 1 1161 9 is_stmt 1 view .LVU1172
 3765              	.LBB259:
 3766              	.LBI259:
 284:src/display.c **** {
 3767              		.loc 1 284 13 view .LVU1173
 3768              	.LBB260:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3769              		.loc 1 286 2 view .LVU1174
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3770              		.loc 1 286 24 is_stmt 0 view .LVU1175
 3771 037c 044B     		ldr	r3, .L370
 3772 037e 2D22     		movs	r2, #45
ARM GAS  /tmp/ccAnlOT7.s 			page 133


 287:src/display.c **** }
 3773              		.loc 1 287 2 view .LVU1176
 3774 0380 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 3775              		.loc 1 286 24 view .LVU1177
 3776 0382 1A70     		strb	r2, [r3]
 287:src/display.c **** }
 3777              		.loc 1 287 2 is_stmt 1 view .LVU1178
 3778 0384 FFF7FEFF 		bl	set_dot
 3779              	.LVL424:
 288:src/display.c **** 
 3780              		.loc 1 288 1 is_stmt 0 view .LVU1179
 3781 0388 BAE6     		b	.L279
 3782              	.LVL425:
 3783              	.L323:
 288:src/display.c **** 
 3784              		.loc 1 288 1 view .LVU1180
 3785              	.LBE260:
 3786              	.LBE259:
 3787              	.LBE271:
 3788              	.LBB272:
1106:src/display.c **** 				const int r = v % b;
 3789              		.loc 1 1106 4 view .LVU1181
 3790 038a 4FF0FF39 		mov	r9, #-1
 3791 038e A0E6     		b	.L292
 3792              	.L371:
 3793              		.align	2
 3794              	.L370:
 3795 0390 00000000 		.word	LastDisplayedNumber
 3796              	.LBE272:
 3797              		.cfi_endproc
 3798              	.LFE18:
 3800              		.section	.text.set_annunciators,"ax",%progbits
 3801              		.align	1
 3802              		.p2align 2,,3
 3803              		.syntax unified
 3804              		.thumb
 3805              		.thumb_func
 3806              		.fpu fpv4-sp-d16
 3808              	set_annunciators:
 3809              	.LFB32:
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3810              		.loc 1 2164 1 is_stmt 1 view -0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
2165:src/display.c **** 
 3814              		.loc 1 2165 2 view .LVU1183
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3815              		.loc 1 2164 1 is_stmt 0 view .LVU1184
 3816 0000 70B5     		push	{r4, r5, r6, lr}
 3817              		.cfi_def_cfa_offset 16
 3818              		.cfi_offset 4, -16
 3819              		.cfi_offset 5, -12
 3820              		.cfi_offset 6, -8
 3821              		.cfi_offset 14, -4
2174:src/display.c **** #endif
ARM GAS  /tmp/ccAnlOT7.s 			page 134


 3822              		.loc 1 2174 11 view .LVU1185
 3823 0002 344E     		ldr	r6, .L398
2165:src/display.c **** 
 3824              		.loc 1 2165 29 view .LVU1186
 3825 0004 FFF7FEFF 		bl	get_trig_mode
 3826              	.LVL426:
2174:src/display.c **** #endif
 3827              		.loc 1 2174 11 view .LVU1187
 3828 0008 3368     		ldr	r3, [r6]
2174:src/display.c **** #endif
 3829              		.loc 1 2174 2 view .LVU1188
 3830 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3831 000e 012B     		cmp	r3, #1
2165:src/display.c **** 
 3832              		.loc 1 2165 29 view .LVU1189
 3833 0010 0446     		mov	r4, r0
 3834              	.LVL427:
2174:src/display.c **** #endif
 3835              		.loc 1 2174 2 is_stmt 1 view .LVU1190
 3836              	.LBB291:
 3837              	.LBB292:
 328:src/display.c **** 	else	clr_dot(n);
 3838              		.loc 1 328 10 is_stmt 0 view .LVU1191
 3839 0012 4FF08800 		mov	r0, #136
 3840              	.LBE292:
 3841              	.LBE291:
2174:src/display.c **** #endif
 3842              		.loc 1 2174 2 view .LVU1192
 3843 0016 03D8     		bhi	.L373
2174:src/display.c **** #endif
 3844              		.loc 1 2174 30 discriminator 1 view .LVU1193
 3845 0018 2F4B     		ldr	r3, .L398+4
2174:src/display.c **** #endif
 3846              		.loc 1 2174 2 discriminator 1 view .LVU1194
 3847 001a 1B68     		ldr	r3, [r3]
 3848 001c 002B     		cmp	r3, #0
 3849 001e 56D0     		beq	.L394
 3850              	.L373:
 3851              	.LVL428:
 3852              	.LBB295:
 3853              	.LBI291:
 327:src/display.c **** 	if (on)	set_dot(n);
 3854              		.loc 1 327 6 is_stmt 1 view .LVU1195
 3855              	.LBB293:
 328:src/display.c **** 	else	clr_dot(n);
 3856              		.loc 1 328 2 view .LVU1196
 329:src/display.c **** }
 3857              		.loc 1 329 7 view .LVU1197
 3858 0020 FFF7FEFF 		bl	clr_dot
 3859              	.LVL429:
 3860              	.L374:
 329:src/display.c **** }
 3861              		.loc 1 329 7 is_stmt 0 view .LVU1198
 3862              	.LBE293:
 3863              	.LBE295:
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3864              		.loc 1 2176 2 is_stmt 1 view .LVU1199
ARM GAS  /tmp/ccAnlOT7.s 			page 135


2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3865              		.loc 1 2176 19 is_stmt 0 view .LVU1200
 3866 0024 2D4D     		ldr	r5, .L398+8
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3867              		.loc 1 2176 2 view .LVU1201
 3868 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3869              	.LBB296:
 3870              	.LBB297:
 328:src/display.c **** 	else	clr_dot(n);
 3871              		.loc 1 328 10 view .LVU1202
 3872 0028 8620     		movs	r0, #134
 3873              	.LBE297:
 3874              	.LBE296:
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3875              		.loc 1 2176 2 view .LVU1203
 3876 002a 23B9     		cbnz	r3, .L375
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3877              		.loc 1 2176 47 discriminator 2 view .LVU1204
 3878 002c 6A69     		ldr	r2, [r5, #20]
 3879 002e 2C4B     		ldr	r3, .L398+12
 3880 0030 1340     		ands	r3, r3, r2
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3881              		.loc 1 2176 2 discriminator 2 view .LVU1205
 3882 0032 002B     		cmp	r3, #0
 3883 0034 48D0     		beq	.L395
 3884              	.L375:
 3885              	.LBB300:
 3886              	.LBB298:
 328:src/display.c **** 	else	clr_dot(n);
 3887              		.loc 1 328 10 is_stmt 1 view .LVU1206
 3888 0036 FFF7FEFF 		bl	set_dot
 3889              	.LVL430:
 3890              	.L376:
 3891              	.LBE298:
 3892              	.LBE300:
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3893              		.loc 1 2177 2 view .LVU1207
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3894              		.loc 1 2177 31 is_stmt 0 view .LVU1208
 3895 003a 2A4A     		ldr	r2, .L398+16
 3896 003c 6B69     		ldr	r3, [r5, #20]
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3897              		.loc 1 2177 2 view .LVU1209
 3898 003e 1A42     		tst	r2, r3
 3899              	.LBB301:
 3900              	.LBB302:
 328:src/display.c **** 	else	clr_dot(n);
 3901              		.loc 1 328 10 view .LVU1210
 3902 0040 4FF08500 		mov	r0, #133
 3903              	.LBE302:
 3904              	.LBE301:
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3905              		.loc 1 2177 2 view .LVU1211
 3906 0044 02D0     		beq	.L377
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3907              		.loc 1 2177 48 discriminator 1 view .LVU1212
 3908 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 136


2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3909              		.loc 1 2177 2 discriminator 1 view .LVU1213
 3910 0048 DA06     		lsls	r2, r3, #27
 3911 004a 3AD4     		bmi	.L378
 3912              	.L377:
 3913              	.LVL431:
 3914              	.LBB305:
 3915              	.LBI301:
 327:src/display.c **** 	if (on)	set_dot(n);
 3916              		.loc 1 327 6 is_stmt 1 view .LVU1214
 3917              	.LBB303:
 328:src/display.c **** 	else	clr_dot(n);
 3918              		.loc 1 328 2 view .LVU1215
 329:src/display.c **** }
 3919              		.loc 1 329 7 view .LVU1216
 3920 004c FFF7FEFF 		bl	clr_dot
 3921              	.LVL432:
 3922              	.L379:
 329:src/display.c **** }
 3923              		.loc 1 329 7 is_stmt 0 view .LVU1217
 3924              	.LBE303:
 3925              	.LBE305:
2178:src/display.c **** 	set_IO_annunciator();
 3926              		.loc 1 2178 2 is_stmt 1 view .LVU1218
 3927 0050 6820     		movs	r0, #104
 3928 0052 FFF7FEFF 		bl	get_user_flag
 3929              	.LVL433:
 3930              	.LBB306:
 3931              	.LBI306:
 327:src/display.c **** 	if (on)	set_dot(n);
 3932              		.loc 1 327 6 view .LVU1219
 3933              	.LBB307:
 328:src/display.c **** 	else	clr_dot(n);
 3934              		.loc 1 328 2 view .LVU1220
 328:src/display.c **** 	else	clr_dot(n);
 3935              		.loc 1 328 5 is_stmt 0 view .LVU1221
 3936 0056 28B3     		cbz	r0, .L380
 328:src/display.c **** 	else	clr_dot(n);
 3937              		.loc 1 328 10 is_stmt 1 view .LVU1222
 3938              	.LBE307:
 3939              	.LBE306:
 3940              	.LBB311:
 3941              	.LBB312:
2206:src/display.c **** 		dot(LIT_EQ, on);
 3942              		.loc 1 2206 9 is_stmt 0 view .LVU1223
 3943 0058 234D     		ldr	r5, .L398+20
 3944              	.LBE312:
 3945              	.LBE311:
 3946              	.LBB320:
 3947              	.LBB308:
 328:src/display.c **** 	else	clr_dot(n);
 3948              		.loc 1 328 10 view .LVU1224
 3949 005a 8320     		movs	r0, #131
 3950              	.LVL434:
 328:src/display.c **** 	else	clr_dot(n);
 3951              		.loc 1 328 10 view .LVU1225
 3952 005c FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccAnlOT7.s 			page 137


 3953              	.LVL435:
 328:src/display.c **** 	else	clr_dot(n);
 3954              		.loc 1 328 10 view .LVU1226
 3955              	.LBE308:
 3956              	.LBE320:
2179:src/display.c **** 
 3957              		.loc 1 2179 2 is_stmt 1 view .LVU1227
 3958              	.LBB321:
 3959              	.LBI311:
2191:src/display.c **** #ifndef DM42
 3960              		.loc 1 2191 6 view .LVU1228
 3961              	.LBB317:
2196:src/display.c **** #endif
 3962              		.loc 1 2196 5 view .LVU1229
2206:src/display.c **** 		dot(LIT_EQ, on);
 3963              		.loc 1 2206 2 view .LVU1230
2206:src/display.c **** 		dot(LIT_EQ, on);
 3964              		.loc 1 2206 5 is_stmt 0 view .LVU1231
 3965 0060 2B68     		ldr	r3, [r5]
 3966 0062 33BB     		cbnz	r3, .L396
 3967              	.L382:
 3968              	.LBE317:
 3969              	.LBE321:
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3970              		.loc 1 2183 2 is_stmt 1 view .LVU1232
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3971              		.loc 1 2183 11 is_stmt 0 view .LVU1233
 3972 0064 3368     		ldr	r3, [r6]
 3973 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3974 006a 03F00103 		and	r3, r3, #1
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3975              		.loc 1 2183 2 view .LVU1234
 3976 006e 2343     		orrs	r3, r3, r4
 3977 0070 13F0FF0F 		tst	r3, #255
 3978              	.LBB322:
 3979              	.LBB323:
 328:src/display.c **** 	else	clr_dot(n);
 3980              		.loc 1 328 10 view .LVU1235
 3981 0074 4FF08C00 		mov	r0, #140
 3982              	.LBE323:
 3983              	.LBE322:
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3984              		.loc 1 2183 2 view .LVU1236
 3985 0078 06D1     		bne	.L397
 3986              	.LVL436:
 3987              	.LBB326:
 3988              	.LBI322:
 327:src/display.c **** 	if (on)	set_dot(n);
 3989              		.loc 1 327 6 is_stmt 1 view .LVU1237
 3990              	.LBB324:
 328:src/display.c **** 	else	clr_dot(n);
 3991              		.loc 1 328 2 view .LVU1238
 328:src/display.c **** 	else	clr_dot(n);
 3992              		.loc 1 328 10 view .LVU1239
 3993 007a FFF7FEFF 		bl	set_dot
 3994              	.LVL437:
 328:src/display.c **** 	else	clr_dot(n);
ARM GAS  /tmp/ccAnlOT7.s 			page 138


 3995              		.loc 1 328 10 is_stmt 0 view .LVU1240
 3996              	.LBE324:
 3997              	.LBE326:
2184:src/display.c **** }
 3998              		.loc 1 2184 2 is_stmt 1 view .LVU1241
 3999              	.L385:
 4000              	.LBB327:
 4001              	.LBI327:
 327:src/display.c **** 	if (on)	set_dot(n);
 4002              		.loc 1 327 6 view .LVU1242
 4003              	.LBB328:
 328:src/display.c **** 	else	clr_dot(n);
 4004              		.loc 1 328 2 view .LVU1243
 329:src/display.c **** }
 4005              		.loc 1 329 7 view .LVU1244
 4006              	.LBE328:
 4007              	.LBE327:
2185:src/display.c **** 
 4008              		.loc 1 2185 1 is_stmt 0 view .LVU1245
 4009 007e BDE87040 		pop	{r4, r5, r6, lr}
 4010              		.cfi_remember_state
 4011              		.cfi_restore 14
 4012              		.cfi_restore 6
 4013              		.cfi_restore 5
 4014              		.cfi_restore 4
 4015              		.cfi_def_cfa_offset 0
 4016              	.LVL438:
 4017              	.LBB332:
 4018              	.LBB329:
 329:src/display.c **** }
 4019              		.loc 1 329 7 view .LVU1246
 4020 0082 8B20     		movs	r0, #139
 4021 0084 FFF7FEBF 		b	clr_dot
 4022              	.LVL439:
 4023              	.L397:
 4024              		.cfi_restore_state
 329:src/display.c **** }
 4025              		.loc 1 329 7 view .LVU1247
 4026              	.LBE329:
 4027              	.LBE332:
 4028              	.LBB333:
 327:src/display.c **** 	if (on)	set_dot(n);
 4029              		.loc 1 327 6 is_stmt 1 view .LVU1248
 4030              	.LBB325:
 328:src/display.c **** 	else	clr_dot(n);
 4031              		.loc 1 328 2 view .LVU1249
 329:src/display.c **** }
 4032              		.loc 1 329 7 view .LVU1250
 4033 0088 FFF7FEFF 		bl	clr_dot
 4034              	.LVL440:
 329:src/display.c **** }
 4035              		.loc 1 329 7 is_stmt 0 view .LVU1251
 4036              	.LBE325:
 4037              	.LBE333:
2184:src/display.c **** }
 4038              		.loc 1 2184 2 is_stmt 1 view .LVU1252
2184:src/display.c **** }
ARM GAS  /tmp/ccAnlOT7.s 			page 139


 4039              		.loc 1 2184 11 is_stmt 0 view .LVU1253
 4040 008c 3368     		ldr	r3, [r6]
 4041 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2184:src/display.c **** }
 4042              		.loc 1 2184 2 view .LVU1254
 4043 0092 DB07     		lsls	r3, r3, #31
 4044 0094 F3D4     		bmi	.L385
2184:src/display.c **** }
 4045              		.loc 1 2184 2 discriminator 1 view .LVU1255
 4046 0096 012C     		cmp	r4, #1
 4047 0098 F1D1     		bne	.L385
 4048              	.LVL441:
 4049              	.LBB334:
 327:src/display.c **** 	if (on)	set_dot(n);
 4050              		.loc 1 327 6 is_stmt 1 view .LVU1256
 4051              	.LBB330:
 328:src/display.c **** 	else	clr_dot(n);
 4052              		.loc 1 328 2 view .LVU1257
 328:src/display.c **** 	else	clr_dot(n);
 4053              		.loc 1 328 10 view .LVU1258
 4054              	.LBE330:
 4055              	.LBE334:
2185:src/display.c **** 
 4056              		.loc 1 2185 1 is_stmt 0 view .LVU1259
 4057 009a BDE87040 		pop	{r4, r5, r6, lr}
 4058              		.cfi_remember_state
 4059              		.cfi_restore 14
 4060              		.cfi_restore 6
 4061              		.cfi_restore 5
 4062              		.cfi_restore 4
 4063              		.cfi_def_cfa_offset 0
 4064              	.LVL442:
 4065              	.LBB335:
 4066              	.LBB331:
 328:src/display.c **** 	else	clr_dot(n);
 4067              		.loc 1 328 10 view .LVU1260
 4068 009e 8B20     		movs	r0, #139
 4069 00a0 FFF7FEBF 		b	set_dot
 4070              	.LVL443:
 4071              	.L380:
 4072              		.cfi_restore_state
 328:src/display.c **** 	else	clr_dot(n);
 4073              		.loc 1 328 10 view .LVU1261
 4074              	.LBE331:
 4075              	.LBE335:
 4076              	.LBB336:
 4077              	.LBB309:
 329:src/display.c **** }
 4078              		.loc 1 329 7 is_stmt 1 view .LVU1262
 4079              	.LBE309:
 4080              	.LBE336:
 4081              	.LBB337:
 4082              	.LBB318:
2206:src/display.c **** 		dot(LIT_EQ, on);
 4083              		.loc 1 2206 9 is_stmt 0 view .LVU1263
 4084 00a4 104D     		ldr	r5, .L398+20
 4085              	.LBE318:
ARM GAS  /tmp/ccAnlOT7.s 			page 140


 4086              	.LBE337:
 4087              	.LBB338:
 4088              	.LBB310:
 329:src/display.c **** }
 4089              		.loc 1 329 7 view .LVU1264
 4090 00a6 8320     		movs	r0, #131
 4091              	.LVL444:
 329:src/display.c **** }
 4092              		.loc 1 329 7 view .LVU1265
 4093 00a8 FFF7FEFF 		bl	clr_dot
 4094              	.LVL445:
 329:src/display.c **** }
 4095              		.loc 1 329 7 view .LVU1266
 4096              	.LBE310:
 4097              	.LBE338:
2179:src/display.c **** 
 4098              		.loc 1 2179 2 is_stmt 1 view .LVU1267
 4099              	.LBB339:
2191:src/display.c **** #ifndef DM42
 4100              		.loc 1 2191 6 view .LVU1268
 4101              	.LBB319:
2196:src/display.c **** #endif
 4102              		.loc 1 2196 5 view .LVU1269
2206:src/display.c **** 		dot(LIT_EQ, on);
 4103              		.loc 1 2206 2 view .LVU1270
2206:src/display.c **** 		dot(LIT_EQ, on);
 4104              		.loc 1 2206 5 is_stmt 0 view .LVU1271
 4105 00ac 2B68     		ldr	r3, [r5]
 4106 00ae 002B     		cmp	r3, #0
 4107 00b0 D8D0     		beq	.L382
 4108              	.L396:
 4109              	.LBB313:
 4110              	.LBI313:
2191:src/display.c **** #ifndef DM42
 4111              		.loc 1 2191 6 is_stmt 1 view .LVU1272
 4112              	.LBB314:
2207:src/display.c **** 		IoAnnunciator = on;
 4113              		.loc 1 2207 3 view .LVU1273
 4114              	.LVL446:
 4115              	.LBB315:
 4116              	.LBI315:
 327:src/display.c **** 	if (on)	set_dot(n);
 4117              		.loc 1 327 6 view .LVU1274
 4118              	.LBB316:
 328:src/display.c **** 	else	clr_dot(n);
 4119              		.loc 1 328 2 view .LVU1275
 329:src/display.c **** }
 4120              		.loc 1 329 7 view .LVU1276
 4121 00b2 8420     		movs	r0, #132
 4122 00b4 FFF7FEFF 		bl	clr_dot
 4123              	.LVL447:
 329:src/display.c **** }
 4124              		.loc 1 329 7 is_stmt 0 view .LVU1277
 4125              	.LBE316:
 4126              	.LBE315:
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4127              		.loc 1 2208 3 is_stmt 1 view .LVU1278
ARM GAS  /tmp/ccAnlOT7.s 			page 141


2208:src/display.c **** 		finish_display(); //LIT_EQ
 4128              		.loc 1 2208 17 is_stmt 0 view .LVU1279
 4129 00b8 0023     		movs	r3, #0
 4130 00ba 2B60     		str	r3, [r5]
2209:src/display.c **** 	}
 4131              		.loc 1 2209 3 is_stmt 1 view .LVU1280
 4132 00bc FFF7FEFF 		bl	finish_display
 4133              	.LVL448:
2211:src/display.c **** 
 4134              		.loc 1 2211 1 is_stmt 0 view .LVU1281
 4135 00c0 D0E7     		b	.L382
 4136              	.LVL449:
 4137              	.L378:
2211:src/display.c **** 
 4138              		.loc 1 2211 1 view .LVU1282
 4139              	.LBE314:
 4140              	.LBE313:
 4141              	.LBE319:
 4142              	.LBE339:
 4143              	.LBB340:
 327:src/display.c **** 	if (on)	set_dot(n);
 4144              		.loc 1 327 6 is_stmt 1 view .LVU1283
 4145              	.LBB304:
 328:src/display.c **** 	else	clr_dot(n);
 4146              		.loc 1 328 2 view .LVU1284
 328:src/display.c **** 	else	clr_dot(n);
 4147              		.loc 1 328 10 view .LVU1285
 4148 00c2 FFF7FEFF 		bl	set_dot
 4149              	.LVL450:
 4150 00c6 C3E7     		b	.L379
 4151              	.LVL451:
 4152              	.L395:
 328:src/display.c **** 	else	clr_dot(n);
 4153              		.loc 1 328 10 is_stmt 0 view .LVU1286
 4154              	.LBE304:
 4155              	.LBE340:
 4156              	.LBB341:
 4157              	.LBI296:
 327:src/display.c **** 	if (on)	set_dot(n);
 4158              		.loc 1 327 6 is_stmt 1 view .LVU1287
 4159              	.LBB299:
 328:src/display.c **** 	else	clr_dot(n);
 4160              		.loc 1 328 2 view .LVU1288
 329:src/display.c **** }
 4161              		.loc 1 329 7 view .LVU1289
 4162 00c8 FFF7FEFF 		bl	clr_dot
 4163              	.LVL452:
 4164 00cc B5E7     		b	.L376
 4165              	.LVL453:
 4166              	.L394:
 329:src/display.c **** }
 4167              		.loc 1 329 7 is_stmt 0 view .LVU1290
 4168              	.LBE299:
 4169              	.LBE341:
 4170              	.LBB342:
 327:src/display.c **** 	if (on)	set_dot(n);
 4171              		.loc 1 327 6 is_stmt 1 view .LVU1291
ARM GAS  /tmp/ccAnlOT7.s 			page 142


 4172              	.LBB294:
 328:src/display.c **** 	else	clr_dot(n);
 4173              		.loc 1 328 2 view .LVU1292
 328:src/display.c **** 	else	clr_dot(n);
 4174              		.loc 1 328 10 view .LVU1293
 4175 00ce FFF7FEFF 		bl	set_dot
 4176              	.LVL454:
 4177 00d2 A7E7     		b	.L374
 4178              	.L399:
 4179              		.align	2
 4180              	.L398:
 4181 00d4 00000000 		.word	main_ram
 4182 00d8 00000000 		.word	Running
 4183 00dc 00000000 		.word	StateWhileOn
 4184 00e0 07000800 		.word	524295
 4185 00e4 00080800 		.word	526336
 4186 00e8 00000000 		.word	IoAnnunciator
 4187              	.LBE294:
 4188              	.LBE342:
 4189              		.cfi_endproc
 4190              	.LFE32:
 4192              		.section	.text.getdig,"ax",%progbits
 4193              		.align	1
 4194              		.p2align 2,,3
 4195              		.global	getdig
 4196              		.syntax unified
 4197              		.thumb
 4198              		.thumb_func
 4199              		.fpu fpv4-sp-d16
 4201              	getdig:
 4202              	.LVL455:
 4203              	.LFB6:
 322:src/display.c **** 	// perform index lookup
 4204              		.loc 1 322 1 view -0
 4205              		.cfi_startproc
 4206              		@ args = 0, pretend = 0, frame = 0
 4207              		@ frame_needed = 0, uses_anonymous_args = 0
 4208              		@ link register save eliminated.
 324:src/display.c **** }
 4209              		.loc 1 324 2 view .LVU1295
 324:src/display.c **** }
 4210              		.loc 1 324 15 is_stmt 0 view .LVU1296
 4211 0000 014B     		ldr	r3, .L401
 324:src/display.c **** }
 4212              		.loc 1 324 18 view .LVU1297
 4213 0002 C0B2     		uxtb	r0, r0
 4214              	.LVL456:
 325:src/display.c **** 
 4215              		.loc 1 325 1 view .LVU1298
 4216 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4217 0006 7047     		bx	lr
 4218              	.L402:
 4219              		.align	2
 4220              	.L401:
 4221 0008 00000000 		.word	.LANCHOR2
 4222              		.cfi_endproc
 4223              	.LFE6:
ARM GAS  /tmp/ccAnlOT7.s 			page 143


 4225              		.section	.text.dot,"ax",%progbits
 4226              		.align	1
 4227              		.p2align 2,,3
 4228              		.global	dot
 4229              		.syntax unified
 4230              		.thumb
 4231              		.thumb_func
 4232              		.fpu fpv4-sp-d16
 4234              	dot:
 4235              	.LVL457:
 4236              	.LFB7:
 327:src/display.c **** 	if (on)	set_dot(n);
 4237              		.loc 1 327 25 is_stmt 1 view -0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 0
 4240              		@ frame_needed = 0, uses_anonymous_args = 0
 4241              		@ link register save eliminated.
 328:src/display.c **** 	else	clr_dot(n);
 4242              		.loc 1 328 2 view .LVU1300
 328:src/display.c **** 	else	clr_dot(n);
 4243              		.loc 1 328 5 is_stmt 0 view .LVU1301
 4244 0000 09B1     		cbz	r1, .L404
 328:src/display.c **** 	else	clr_dot(n);
 4245              		.loc 1 328 10 is_stmt 1 discriminator 1 view .LVU1302
 4246 0002 FFF7FEBF 		b	set_dot
 4247              	.LVL458:
 4248              	.L404:
 329:src/display.c **** }
 4249              		.loc 1 329 7 view .LVU1303
 4250 0006 FFF7FEBF 		b	clr_dot
 4251              	.LVL459:
 329:src/display.c **** }
 4252              		.loc 1 329 7 is_stmt 0 view .LVU1304
 4253              		.cfi_endproc
 4254              	.LFE7:
 4256 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4257              		.align	1
 4258              		.p2align 2,,3
 4259              		.global	std_round_fix
 4260              		.syntax unified
 4261              		.thumb
 4262              		.thumb_func
 4263              		.fpu fpv4-sp-d16
 4265              	std_round_fix:
 4266              	.LVL460:
 4267              	.LFB24:
1417:src/display.c **** 	decNumber b, c;
 4268              		.loc 1 1417 54 is_stmt 1 view -0
 4269              		.cfi_startproc
 4270              		@ args = 0, pretend = 0, frame = 80
 4271              		@ frame_needed = 0, uses_anonymous_args = 0
1418:src/display.c **** 
 4272              		.loc 1 1418 2 view .LVU1306
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
 4273              		.loc 1 1420 2 view .LVU1307
1417:src/display.c **** 	decNumber b, c;
 4274              		.loc 1 1417 54 is_stmt 0 view .LVU1308
ARM GAS  /tmp/ccAnlOT7.s 			page 144


 4275 0000 00B5     		push	{lr}
 4276              		.cfi_def_cfa_offset 4
 4277              		.cfi_offset 14, -4
 4278 0002 95B0     		sub	sp, sp, #84
 4279              		.cfi_def_cfa_offset 88
1417:src/display.c **** 	decNumber b, c;
 4280              		.loc 1 1417 54 view .LVU1309
 4281 0004 0146     		mov	r1, r0
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
 4282              		.loc 1 1420 2 view .LVU1310
 4283 0006 02A8     		add	r0, sp, #8
 4284              	.LVL461:
1417:src/display.c **** 	decNumber b, c;
 4285              		.loc 1 1417 54 view .LVU1311
 4286 0008 0191     		str	r1, [sp, #4]
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
 4287              		.loc 1 1420 2 view .LVU1312
 4288 000a FFF7FEFF 		bl	dn_1
 4289              	.LVL462:
1421:src/display.c **** 	dn_abs(&c, z);
 4290              		.loc 1 1421 2 is_stmt 1 view .LVU1313
1421:src/display.c **** 	dn_abs(&c, z);
 4291              		.loc 1 1421 22 is_stmt 0 view .LVU1314
 4292 000e 0F4A     		ldr	r2, .L410
1421:src/display.c **** 	dn_abs(&c, z);
 4293              		.loc 1 1421 13 view .LVU1315
 4294 0010 039B     		ldr	r3, [sp, #12]
1421:src/display.c **** 	dn_abs(&c, z);
 4295              		.loc 1 1421 22 view .LVU1316
 4296 0012 1268     		ldr	r2, [r2]
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4297              		.loc 1 1422 2 view .LVU1317
 4298 0014 0199     		ldr	r1, [sp, #4]
1421:src/display.c **** 	dn_abs(&c, z);
 4299              		.loc 1 1421 22 view .LVU1318
 4300 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4301 001a 02F00F02 		and	r2, r2, #15
1421:src/display.c **** 	dn_abs(&c, z);
 4302              		.loc 1 1421 13 view .LVU1319
 4303 001e 9B1A     		subs	r3, r3, r2
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4304              		.loc 1 1422 2 view .LVU1320
 4305 0020 0BA8     		add	r0, sp, #44
1421:src/display.c **** 	dn_abs(&c, z);
 4306              		.loc 1 1421 13 view .LVU1321
 4307 0022 0393     		str	r3, [sp, #12]
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4308              		.loc 1 1422 2 is_stmt 1 view .LVU1322
 4309 0024 FFF7FEFF 		bl	dn_abs
 4310              	.LVL463:
1423:src/display.c **** 		return MODE_FIX;
 4311              		.loc 1 1423 2 view .LVU1323
1423:src/display.c **** 		return MODE_FIX;
 4312              		.loc 1 1423 6 is_stmt 0 view .LVU1324
 4313 0028 0BA9     		add	r1, sp, #44
 4314 002a 02A8     		add	r0, sp, #8
 4315 002c FFF7FEFF 		bl	dn_lt
ARM GAS  /tmp/ccAnlOT7.s 			page 145


 4316              	.LVL464:
1423:src/display.c **** 		return MODE_FIX;
 4317              		.loc 1 1423 5 view .LVU1325
 4318 0030 10B9     		cbnz	r0, .L409
1426:src/display.c **** #endif
 4319              		.loc 1 1426 1 view .LVU1326
 4320 0032 15B0     		add	sp, sp, #84
 4321              		.cfi_remember_state
 4322              		.cfi_def_cfa_offset 4
 4323              		@ sp needed
 4324 0034 5DF804FB 		ldr	pc, [sp], #4
 4325              	.LVL465:
 4326              	.L409:
 4327              		.cfi_restore_state
1423:src/display.c **** 		return MODE_FIX;
 4328              		.loc 1 1423 23 discriminator 1 view .LVU1327
 4329 0038 0549     		ldr	r1, .L410+4
 4330 003a 0BA8     		add	r0, sp, #44
 4331 003c FFF7FEFF 		bl	dn_lt
 4332              	.LVL466:
1424:src/display.c **** 	return MODE_STD;
 4333              		.loc 1 1424 10 discriminator 1 view .LVU1328
 4334 0040 0038     		subs	r0, r0, #0
 4335 0042 18BF     		it	ne
 4336 0044 0120     		movne	r0, #1
1426:src/display.c **** #endif
 4337              		.loc 1 1426 1 discriminator 1 view .LVU1329
 4338 0046 15B0     		add	sp, sp, #84
 4339              		.cfi_def_cfa_offset 4
 4340              		@ sp needed
 4341 0048 5DF804FB 		ldr	pc, [sp], #4
 4342              	.LVL467:
 4343              	.L411:
1426:src/display.c **** #endif
 4344              		.loc 1 1426 1 discriminator 1 view .LVU1330
 4345              		.align	2
 4346              	.L410:
 4347 004c 00000000 		.word	main_ram
 4348 0050 00000000 		.word	const_1
 4349              		.cfi_endproc
 4350              	.LFE24:
 4352              		.section	.text.set_IO_annunciator,"ax",%progbits
 4353              		.align	1
 4354              		.p2align 2,,3
 4355              		.global	set_IO_annunciator
 4356              		.syntax unified
 4357              		.thumb
 4358              		.thumb_func
 4359              		.fpu fpv4-sp-d16
 4361              	set_IO_annunciator:
 4362              	.LFB33:
2191:src/display.c **** #ifndef DM42
 4363              		.loc 1 2191 31 is_stmt 1 view -0
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 0
 4366              		@ frame_needed = 0, uses_anonymous_args = 0
2196:src/display.c **** #endif
ARM GAS  /tmp/ccAnlOT7.s 			page 146


 4367              		.loc 1 2196 5 view .LVU1332
 4368              	.LVL468:
2206:src/display.c **** 		dot(LIT_EQ, on);
 4369              		.loc 1 2206 2 view .LVU1333
2191:src/display.c **** #ifndef DM42
 4370              		.loc 1 2191 31 is_stmt 0 view .LVU1334
 4371 0000 10B5     		push	{r4, lr}
 4372              		.cfi_def_cfa_offset 8
 4373              		.cfi_offset 4, -8
 4374              		.cfi_offset 14, -4
2206:src/display.c **** 		dot(LIT_EQ, on);
 4375              		.loc 1 2206 9 view .LVU1335
 4376 0002 064C     		ldr	r4, .L416
2206:src/display.c **** 		dot(LIT_EQ, on);
 4377              		.loc 1 2206 5 view .LVU1336
 4378 0004 2368     		ldr	r3, [r4]
 4379 0006 03B9     		cbnz	r3, .L415
2211:src/display.c **** 
 4380              		.loc 1 2211 1 view .LVU1337
 4381 0008 10BD     		pop	{r4, pc}
 4382              	.L415:
 4383              	.LBB347:
 4384              	.LBI347:
2191:src/display.c **** #ifndef DM42
 4385              		.loc 1 2191 6 is_stmt 1 view .LVU1338
 4386              	.LBB348:
2207:src/display.c **** 		IoAnnunciator = on;
 4387              		.loc 1 2207 3 view .LVU1339
 4388              	.LVL469:
 4389              	.LBB349:
 4390              	.LBI349:
 327:src/display.c **** 	if (on)	set_dot(n);
 4391              		.loc 1 327 6 view .LVU1340
 4392              	.LBB350:
 328:src/display.c **** 	else	clr_dot(n);
 4393              		.loc 1 328 2 view .LVU1341
 329:src/display.c **** }
 4394              		.loc 1 329 7 view .LVU1342
 4395 000a 8420     		movs	r0, #132
 4396 000c FFF7FEFF 		bl	clr_dot
 4397              	.LVL470:
 329:src/display.c **** }
 4398              		.loc 1 329 7 is_stmt 0 view .LVU1343
 4399              	.LBE350:
 4400              	.LBE349:
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4401              		.loc 1 2208 3 is_stmt 1 view .LVU1344
2208:src/display.c **** 		finish_display(); //LIT_EQ
 4402              		.loc 1 2208 17 is_stmt 0 view .LVU1345
 4403 0010 0023     		movs	r3, #0
 4404 0012 2360     		str	r3, [r4]
2209:src/display.c **** 	}
 4405              		.loc 1 2209 3 is_stmt 1 view .LVU1346
 4406              	.LBE348:
 4407              	.LBE347:
2211:src/display.c **** 
 4408              		.loc 1 2211 1 is_stmt 0 view .LVU1347
ARM GAS  /tmp/ccAnlOT7.s 			page 147


 4409 0014 BDE81040 		pop	{r4, lr}
 4410              		.cfi_restore 14
 4411              		.cfi_restore 4
 4412              		.cfi_def_cfa_offset 0
 4413              	.LBB352:
 4414              	.LBB351:
2209:src/display.c **** 	}
 4415              		.loc 1 2209 3 view .LVU1348
 4416 0018 FFF7FEBF 		b	finish_display
 4417              	.LVL471:
 4418              	.L417:
 4419              		.align	2
 4420              	.L416:
 4421 001c 00000000 		.word	IoAnnunciator
 4422              	.LBE351:
 4423              	.LBE352:
 4424              		.cfi_endproc
 4425              	.LFE33:
 4427              		.section	.text.pixel_length,"ax",%progbits
 4428              		.align	1
 4429              		.p2align 2,,3
 4430              		.global	pixel_length
 4431              		.syntax unified
 4432              		.thumb
 4433              		.thumb_func
 4434              		.fpu fpv4-sp-d16
 4436              	pixel_length:
 4437              	.LVL472:
 4438              	.LFB38:
2702:src/display.c **** 
2703:src/display.c **** 
2704:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2705:src/display.c ****  */
2706:src/display.c **** int pixel_length(const char *s, int smallp)
2707:src/display.c **** {
 4439              		.loc 1 2707 1 is_stmt 1 view -0
 4440              		.cfi_startproc
 4441              		@ args = 0, pretend = 0, frame = 0
 4442              		@ frame_needed = 0, uses_anonymous_args = 0
2708:src/display.c **** 	int len = 0;
 4443              		.loc 1 2708 2 view .LVU1350
2709:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4444              		.loc 1 2709 2 view .LVU1351
2707:src/display.c **** 	int len = 0;
 4445              		.loc 1 2707 1 is_stmt 0 view .LVU1352
 4446 0000 70B5     		push	{r4, r5, r6, lr}
 4447              		.cfi_def_cfa_offset 16
 4448              		.cfi_offset 4, -16
 4449              		.cfi_offset 5, -12
 4450              		.cfi_offset 6, -8
 4451              		.cfi_offset 14, -4
2707:src/display.c **** 	int len = 0;
 4452              		.loc 1 2707 1 view .LVU1353
 4453 0002 0446     		mov	r4, r0
2710:src/display.c **** 	while (*s != '\0') {
 4454              		.loc 1 2710 9 view .LVU1354
 4455 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 148


 4456              	.LVL473:
2709:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4457              		.loc 1 2709 34 view .LVU1355
 4458 0006 0E1E     		subs	r6, r1, #0
 4459 0008 18BF     		it	ne
 4460 000a 4FF48076 		movne	r6, #256
 4461              	.LVL474:
 4462              		.loc 1 2710 2 is_stmt 1 view .LVU1356
 4463              		.loc 1 2710 8 view .LVU1357
 4464 000e A0B1     		cbz	r0, .L425
2708:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4465              		.loc 1 2708 6 is_stmt 0 view .LVU1358
 4466 0010 0025     		movs	r5, #0
 4467 0012 06E0     		b	.L423
 4468              	.LVL475:
 4469              	.L421:
2711:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2712:src/display.c **** 		if (s[0] == '\007') {
2713:src/display.c **** 			len += s[1] & 0x1F;
2714:src/display.c **** 			s += 3;
2715:src/display.c **** 			continue;
2716:src/display.c **** 		}
2717:src/display.c **** #endif
2718:src/display.c **** 		len += charlengths( (unsigned char) *s++ + offset );
 4470              		.loc 1 2718 10 view .LVU1359
 4471 0014 3044     		add	r0, r0, r6
 4472 0016 FFF7FEFF 		bl	charlengths
 4473              	.LVL476:
 4474              		.loc 1 2718 41 view .LVU1360
 4475 001a 0134     		adds	r4, r4, #1
 4476              	.LVL477:
 4477              		.loc 1 2718 7 view .LVU1361
 4478 001c 0544     		add	r5, r5, r0
 4479              	.LVL478:
2710:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4480              		.loc 1 2710 8 is_stmt 1 view .LVU1362
2710:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4481              		.loc 1 2710 9 is_stmt 0 view .LVU1363
 4482 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2710:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4483              		.loc 1 2710 8 view .LVU1364
 4484 0020 48B1     		cbz	r0, .L418
 4485              	.LVL479:
 4486              	.L423:
2712:src/display.c **** 			len += s[1] & 0x1F;
 4487              		.loc 1 2712 3 is_stmt 1 view .LVU1365
 4488              		.loc 1 2718 3 view .LVU1366
2712:src/display.c **** 			len += s[1] & 0x1F;
 4489              		.loc 1 2712 6 is_stmt 0 view .LVU1367
 4490 0022 0728     		cmp	r0, #7
 4491 0024 F6D1     		bne	.L421
2713:src/display.c **** 			s += 3;
 4492              		.loc 1 2713 4 is_stmt 1 view .LVU1368
2713:src/display.c **** 			s += 3;
 4493              		.loc 1 2713 16 is_stmt 0 view .LVU1369
 4494 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
2710:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccAnlOT7.s 			page 149


 4495              		.loc 1 2710 9 view .LVU1370
 4496 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
2713:src/display.c **** 			s += 3;
 4497              		.loc 1 2713 16 view .LVU1371
 4498 002a 03F01F03 		and	r3, r3, #31
2714:src/display.c **** 			continue;
 4499              		.loc 1 2714 6 view .LVU1372
 4500 002e 0334     		adds	r4, r4, #3
 4501              	.LVL480:
2713:src/display.c **** 			s += 3;
 4502              		.loc 1 2713 8 view .LVU1373
 4503 0030 1D44     		add	r5, r5, r3
 4504              	.LVL481:
2714:src/display.c **** 			continue;
 4505              		.loc 1 2714 4 is_stmt 1 view .LVU1374
2715:src/display.c **** 		}
 4506              		.loc 1 2715 4 view .LVU1375
2710:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4507              		.loc 1 2710 8 view .LVU1376
 4508 0032 0028     		cmp	r0, #0
 4509 0034 F5D1     		bne	.L423
 4510              	.L418:
2719:src/display.c **** 	}
2720:src/display.c **** 	return len;
2721:src/display.c **** }
 4511              		.loc 1 2721 1 is_stmt 0 view .LVU1377
 4512 0036 2846     		mov	r0, r5
 4513 0038 70BD     		pop	{r4, r5, r6, pc}
 4514              	.LVL482:
 4515              	.L425:
2708:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4516              		.loc 1 2708 6 view .LVU1378
 4517 003a 0546     		mov	r5, r0
2720:src/display.c **** }
 4518              		.loc 1 2720 2 is_stmt 1 view .LVU1379
 4519              		.loc 1 2721 1 is_stmt 0 view .LVU1380
 4520 003c 2846     		mov	r0, r5
 4521 003e 70BD     		pop	{r4, r5, r6, pc}
 4522              		.loc 1 2721 1 view .LVU1381
 4523              		.cfi_endproc
 4524              	.LFE38:
 4526              		.section	.text.set_status,"ax",%progbits
 4527              		.align	1
 4528              		.p2align 2,,3
 4529              		.syntax unified
 4530              		.thumb
 4531              		.thumb_func
 4532              		.fpu fpv4-sp-d16
 4534              	set_status:
 4535              	.LVL483:
 4536              	.LFB40:
2722:src/display.c **** 
2723:src/display.c **** 
2724:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2725:src/display.c ****  * If this is larger than the display, return true.
2726:src/display.c ****  */
2727:src/display.c **** static int string_too_large(const char *s) {
ARM GAS  /tmp/ccAnlOT7.s 			page 150


2728:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
2729:src/display.c **** }
2730:src/display.c **** 
2731:src/display.c **** 
2732:src/display.c **** /* Display the given string on the screen.
2733:src/display.c ****  */
2734:src/display.c **** static void set_status(const char *str) {
 4537              		.loc 1 2734 41 is_stmt 1 view -0
 4538              		.cfi_startproc
 4539              		@ args = 0, pretend = 0, frame = 0
 4540              		@ frame_needed = 0, uses_anonymous_args = 0
2735:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4541              		.loc 1 2735 2 view .LVU1383
 4542              		.loc 1 2735 24 is_stmt 0 view .LVU1384
 4543 0000 0C4B     		ldr	r3, .L433
 4544              		.loc 1 2735 2 view .LVU1385
 4545 0002 93F91630 		ldrsb	r3, [r3, #22]
 4546 0006 002B     		cmp	r3, #0
2734:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4547              		.loc 1 2734 41 view .LVU1386
 4548 0008 10B5     		push	{r4, lr}
 4549              		.cfi_def_cfa_offset 8
 4550              		.cfi_offset 4, -8
 4551              		.cfi_offset 14, -4
2734:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4552              		.loc 1 2734 41 view .LVU1387
 4553 000a 0446     		mov	r4, r0
 4554              		.loc 1 2735 2 view .LVU1388
 4555 000c 05DA     		bge	.L432
 4556 000e 2046     		mov	r0, r4
 4557              		.loc 1 2735 2 view .LVU1389
 4558 0010 0121     		movs	r1, #1
2736:src/display.c **** }
 4559              		.loc 1 2736 1 view .LVU1390
 4560 0012 BDE81040 		pop	{r4, lr}
 4561              		.cfi_remember_state
 4562              		.cfi_restore 14
 4563              		.cfi_restore 4
 4564              		.cfi_def_cfa_offset 0
2735:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4565              		.loc 1 2735 2 view .LVU1391
 4566 0016 FFF7FEBF 		b	set_status_sized
 4567              	.LVL484:
 4568              	.L432:
 4569              		.cfi_restore_state
 4570              	.LBB353:
 4571              	.LBI353:
2727:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4572              		.loc 1 2727 12 is_stmt 1 view .LVU1392
 4573              	.LBB354:
2728:src/display.c **** }
 4574              		.loc 1 2728 2 view .LVU1393
2728:src/display.c **** }
 4575              		.loc 1 2728 9 is_stmt 0 view .LVU1394
 4576 001a 0021     		movs	r1, #0
 4577 001c FFF7FEFF 		bl	pixel_length
 4578              	.LVL485:
ARM GAS  /tmp/ccAnlOT7.s 			page 151


2728:src/display.c **** }
 4579              		.loc 1 2728 9 view .LVU1395
 4580              	.LBE354:
 4581              	.LBE353:
2735:src/display.c **** }
 4582              		.loc 1 2735 2 view .LVU1396
 4583 0020 4B28     		cmp	r0, #75
 4584 0022 D8BF     		it	le
 4585 0024 0021     		movle	r1, #0
 4586 0026 2046     		mov	r0, r4
 4587 0028 C8BF     		it	gt
 4588 002a 0121     		movgt	r1, #1
 4589              		.loc 1 2736 1 view .LVU1397
 4590 002c BDE81040 		pop	{r4, lr}
 4591              		.cfi_restore 14
 4592              		.cfi_restore 4
 4593              		.cfi_def_cfa_offset 0
 4594              	.LVL486:
2735:src/display.c **** }
 4595              		.loc 1 2735 2 view .LVU1398
 4596 0030 FFF7FEBF 		b	set_status_sized
 4597              	.LVL487:
 4598              	.L434:
2735:src/display.c **** }
 4599              		.loc 1 2735 2 view .LVU1399
 4600              		.align	2
 4601              	.L433:
 4602 0034 00000000 		.word	StateWhileOn
 4603              		.cfi_endproc
 4604              	.LFE40:
 4606              		.section	.text.set_x_dn,"ax",%progbits
 4607              		.align	1
 4608              		.p2align 2,,3
 4609              		.global	set_x_dn
 4610              		.syntax unified
 4611              		.thumb
 4612              		.thumb_func
 4613              		.fpu fpv4-sp-d16
 4615              	set_x_dn:
 4616              	.LVL488:
 4617              	.LFB27:
1564:src/display.c **** 	char x[50], *obp = x;
 4618              		.loc 1 1564 61 is_stmt 1 view -0
 4619              		.cfi_startproc
 4620              		@ args = 0, pretend = 0, frame = 136
 4621              		@ frame_needed = 0, uses_anonymous_args = 0
1565:src/display.c **** 	int odig = 0;
 4622              		.loc 1 1565 2 view .LVU1401
1564:src/display.c **** 	char x[50], *obp = x;
 4623              		.loc 1 1564 61 is_stmt 0 view .LVU1402
 4624 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4625              		.cfi_def_cfa_offset 36
 4626              		.cfi_offset 4, -36
 4627              		.cfi_offset 5, -32
 4628              		.cfi_offset 6, -28
 4629              		.cfi_offset 7, -24
 4630              		.cfi_offset 8, -20
ARM GAS  /tmp/ccAnlOT7.s 			page 152


 4631              		.cfi_offset 9, -16
 4632              		.cfi_offset 10, -12
 4633              		.cfi_offset 11, -8
 4634              		.cfi_offset 14, -4
1581:src/display.c **** 	int mode = UState.dispmode;
 4635              		.loc 1 1581 11 view .LVU1403
 4636 0004 C84B     		ldr	r3, .L670
 4637 0006 1B68     		ldr	r3, [r3]
1564:src/display.c **** 	char x[50], *obp = x;
 4638              		.loc 1 1564 61 view .LVU1404
 4639 0008 A3B0     		sub	sp, sp, #140
 4640              		.cfi_def_cfa_offset 176
 4641              	.LVL489:
1566:src/display.c **** 	int show_exp = 0;
 4642              		.loc 1 1566 2 is_stmt 1 view .LVU1405
1567:src/display.c **** 	int j;
 4643              		.loc 1 1567 2 view .LVU1406
1568:src/display.c **** 	char mantissa[64];
 4644              		.loc 1 1568 2 view .LVU1407
1569:src/display.c **** 	int exp = 0;
 4645              		.loc 1 1569 2 view .LVU1408
1570:src/display.c **** 	char *p = mantissa;
 4646              		.loc 1 1570 2 view .LVU1409
1571:src/display.c **** 	char *r;
 4647              		.loc 1 1571 2 view .LVU1410
1572:src/display.c **** 	const char *q;
 4648              		.loc 1 1572 2 view .LVU1411
1573:src/display.c **** 	int count, i;
 4649              		.loc 1 1573 2 view .LVU1412
1574:src/display.c **** 	int extra_digits = 0;
 4650              		.loc 1 1574 2 view .LVU1413
1575:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4651              		.loc 1 1575 2 view .LVU1414
1581:src/display.c **** 	int mode = UState.dispmode;
 4652              		.loc 1 1581 2 view .LVU1415
1581:src/display.c **** 	int mode = UState.dispmode;
 4653              		.loc 1 1581 17 is_stmt 0 view .LVU1416
 4654 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1582:src/display.c **** #endif
 4655              		.loc 1 1582 19 view .LVU1417
 4656 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1564:src/display.c **** 	char x[50], *obp = x;
 4657              		.loc 1 1564 61 view .LVU1418
 4658 0012 0092     		str	r2, [sp]
 4659 0014 0C46     		mov	r4, r1
 4660 0016 0646     		mov	r6, r0
1581:src/display.c **** 	int mode = UState.dispmode;
 4661              		.loc 1 1581 17 view .LVU1419
 4662 0018 05F00F05 		and	r5, r5, #15
 4663              	.LVL490:
1582:src/display.c **** #endif
 4664              		.loc 1 1582 2 is_stmt 1 view .LVU1420
1582:src/display.c **** #endif
 4665              		.loc 1 1582 19 is_stmt 0 view .LVU1421
 4666 001c BF09     		lsrs	r7, r7, #6
 4667              	.LVL491:
1584:src/display.c **** 	int negative = 0;
ARM GAS  /tmp/ccAnlOT7.s 			page 153


 4668              		.loc 1 1584 2 is_stmt 1 view .LVU1422
1585:src/display.c **** 	int trimzeros = 0;
 4669              		.loc 1 1585 2 view .LVU1423
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4670              		.loc 1 1586 2 view .LVU1424
1588:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4671              		.loc 1 1588 2 view .LVU1425
1597:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4672              		.loc 1 1597 2 view .LVU1426
 4673 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4674              	.LVL492:
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4675              		.loc 1 1599 2 view .LVU1427
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4676              		.loc 1 1599 5 is_stmt 0 view .LVU1428
 4677 0022 002C     		cmp	r4, #0
 4678 0024 00F08A81 		beq	.L436
 4679              	.L439:
1624:src/display.c **** 		return;
 4680              		.loc 1 1624 2 is_stmt 1 view .LVU1429
1624:src/display.c **** 		return;
 4681              		.loc 1 1624 6 is_stmt 0 view .LVU1430
 4682 0028 2146     		mov	r1, r4
 4683 002a 06F10800 		add	r0, r6, #8
 4684 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4685              	.LVL493:
1624:src/display.c **** 		return;
 4686              		.loc 1 1624 5 view .LVU1431
 4687 0032 8346     		mov	fp, r0
 4688 0034 0028     		cmp	r0, #0
 4689 0036 40F06F81 		bne	.L435
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4690              		.loc 1 1627 2 is_stmt 1 view .LVU1432
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4691              		.loc 1 1627 12 is_stmt 0 view .LVU1433
 4692 003a DFF8F092 		ldr	r9, .L670+4
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4693              		.loc 1 1627 5 view .LVU1434
 4694 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4695 0042 012B     		cmp	r3, #1
 4696 0044 00F0AF82 		beq	.L651
1570:src/display.c **** 	char *p = mantissa;
 4697              		.loc 1 1570 6 view .LVU1435
 4698 0048 0190     		str	r0, [sp, #4]
 4699              	.LVL494:
 4700              	.L442:
1633:src/display.c **** 
 4701              		.loc 1 1633 2 is_stmt 1 view .LVU1436
 4702 004a 0DF11408 		add	r8, sp, #20
 4703              	.LVL495:
1633:src/display.c **** 
 4704              		.loc 1 1633 2 is_stmt 0 view .LVU1437
 4705 004e 4046     		mov	r0, r8
 4706 0050 3222     		movs	r2, #50
 4707 0052 0021     		movs	r1, #0
 4708 0054 FFF7FEFF 		bl	xset
 4709              	.LVL496:
ARM GAS  /tmp/ccAnlOT7.s 			page 154


1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4710              		.loc 1 1635 2 is_stmt 1 view .LVU1438
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4711              		.loc 1 1635 6 is_stmt 0 view .LVU1439
 4712 0058 3046     		mov	r0, r6
 4713 005a FFF7FEFF 		bl	dn_eq0
 4714              	.LVL497:
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4715              		.loc 1 1635 5 view .LVU1440
 4716 005e 0028     		cmp	r0, #0
 4717 0060 00F05D81 		beq	.L443
1636:src/display.c **** 			x[0] = '-';
 4718              		.loc 1 1636 3 is_stmt 1 view .LVU1441
1636:src/display.c **** 			x[0] = '-';
 4719              		.loc 1 1636 6 is_stmt 0 view .LVU1442
 4720 0064 96F90830 		ldrsb	r3, [r6, #8]
 4721 0068 002B     		cmp	r3, #0
 4722 006a C0F2C182 		blt	.L652
 4723              	.L444:
1640:src/display.c **** 	} else
 4724              		.loc 1 1640 4 is_stmt 1 view .LVU1443
1640:src/display.c **** 	} else
 4725              		.loc 1 1640 9 is_stmt 0 view .LVU1444
 4726 006e 3023     		movs	r3, #48
 4727 0070 8DF81430 		strb	r3, [sp, #20]
 4728              	.L445:
1644:src/display.c **** 		show_x(x, exp);
 4729              		.loc 1 1644 2 is_stmt 1 view .LVU1445
1644:src/display.c **** 		show_x(x, exp);
 4730              		.loc 1 1644 12 is_stmt 0 view .LVU1446
 4731 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1644:src/display.c **** 		show_x(x, exp);
 4732              		.loc 1 1644 5 view .LVU1447
 4733 0078 BAF1010F 		cmp	r10, #1
 4734 007c 00F0F082 		beq	.L653
1667:src/display.c **** 		mode = std_round_fix(z);
 4735              		.loc 1 1667 2 is_stmt 1 view .LVU1448
1667:src/display.c **** 		mode = std_round_fix(z);
 4736              		.loc 1 1667 5 is_stmt 0 view .LVU1449
 4737 0080 002F     		cmp	r7, #0
 4738 0082 00F0FD81 		beq	.L654
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4739              		.loc 1 1671 19 view .LVU1450
 4740 0086 009B     		ldr	r3, [sp]
 4741 0088 1B68     		ldr	r3, [r3]
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4742              		.loc 1 1671 12 view .LVU1451
 4743 008a AB42     		cmp	r3, r5
1581:src/display.c **** 	int mode = UState.dispmode;
 4744              		.loc 1 1581 6 view .LVU1452
 4745 008c AA46     		mov	r10, r5
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4746              		.loc 1 1671 9 is_stmt 1 view .LVU1453
1673:src/display.c **** #endif
 4747              		.loc 1 1673 3 view .LVU1454
1673:src/display.c **** #endif
 4748              		.loc 1 1673 6 is_stmt 0 view .LVU1455
ARM GAS  /tmp/ccAnlOT7.s 			page 155


 4749 008e D8BF     		it	le
 4750 0090 03F1FF3A 		addle	r10, r3, #-1
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4751              		.loc 1 1586 6 view .LVU1456
 4752 0094 0023     		movs	r3, #0
 4753 0096 0193     		str	r3, [sp, #4]
 4754              	.LVL498:
 4755              	.L458:
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4756              		.loc 1 1676 2 is_stmt 1 view .LVU1457
 4757 0098 0DF14809 		add	r9, sp, #72
 4758              	.LVL499:
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4759              		.loc 1 1676 2 is_stmt 0 view .LVU1458
 4760 009c 3021     		movs	r1, #48
 4761 009e 4846     		mov	r0, r9
 4762 00a0 3F22     		movs	r2, #63
 4763 00a2 FFF7FEFF 		bl	xset
 4764              	.LVL500:
1677:src/display.c **** 
 4765              		.loc 1 1677 2 is_stmt 1 view .LVU1459
1677:src/display.c **** 
 4766              		.loc 1 1677 31 is_stmt 0 view .LVU1460
 4767 00a6 0023     		movs	r3, #0
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4768              		.loc 1 1679 6 view .LVU1461
 4769 00a8 4521     		movs	r1, #69
 4770 00aa 4046     		mov	r0, r8
1677:src/display.c **** 
 4771              		.loc 1 1677 31 view .LVU1462
 4772 00ac 8DF88730 		strb	r3, [sp, #135]
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4773              		.loc 1 1679 2 is_stmt 1 view .LVU1463
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4774              		.loc 1 1679 6 is_stmt 0 view .LVU1464
 4775 00b0 FFF7FEFF 		bl	find_char
 4776              	.LVL501:
1688:src/display.c **** 	else exp = s_to_i(q+1);
 4777              		.loc 1 1688 2 is_stmt 1 view .LVU1465
1688:src/display.c **** 	else exp = s_to_i(q+1);
 4778              		.loc 1 1688 5 is_stmt 0 view .LVU1466
 4779 00b4 0028     		cmp	r0, #0
 4780 00b6 00F05C81 		beq	.L559
1689:src/display.c **** #endif
 4781              		.loc 1 1689 7 is_stmt 1 view .LVU1467
1689:src/display.c **** #endif
 4782              		.loc 1 1689 13 is_stmt 0 view .LVU1468
 4783 00ba 0130     		adds	r0, r0, #1
 4784              	.LVL502:
1689:src/display.c **** #endif
 4785              		.loc 1 1689 13 view .LVU1469
 4786 00bc FFF7FEFF 		bl	s_to_i
 4787              	.LVL503:
1689:src/display.c **** #endif
 4788              		.loc 1 1689 13 view .LVU1470
 4789 00c0 0546     		mov	r5, r0
 4790              	.LVL504:
ARM GAS  /tmp/ccAnlOT7.s 			page 156


 4791              	.L459:
1693:src/display.c **** 	if (!res) {
 4792              		.loc 1 1693 2 is_stmt 1 view .LVU1471
1693:src/display.c **** 	if (!res) {
 4793              		.loc 1 1693 12 view .LVU1472
1693:src/display.c **** 	if (!res) {
 4794              		.loc 1 1693 2 is_stmt 0 view .LVU1473
 4795 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4796 00c6 202B     		cmp	r3, #32
1693:src/display.c **** 	if (!res) {
 4797              		.loc 1 1693 8 view .LVU1474
 4798 00c8 4646     		mov	r6, r8
 4799              	.LVL505:
1693:src/display.c **** 	if (!res) {
 4800              		.loc 1 1693 2 view .LVU1475
 4801 00ca 03D1     		bne	.L460
 4802              	.LVL506:
 4803              	.L461:
1693:src/display.c **** 	if (!res) {
 4804              		.loc 1 1693 27 is_stmt 1 discriminator 3 view .LVU1476
1693:src/display.c **** 	if (!res) {
 4805              		.loc 1 1693 23 discriminator 3 view .LVU1477
1693:src/display.c **** 	if (!res) {
 4806              		.loc 1 1693 12 discriminator 3 view .LVU1478
1693:src/display.c **** 	if (!res) {
 4807              		.loc 1 1693 2 is_stmt 0 discriminator 3 view .LVU1479
 4808 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4809              	.LVL507:
1693:src/display.c **** 	if (!res) {
 4810              		.loc 1 1693 2 discriminator 3 view .LVU1480
 4811 00d0 202B     		cmp	r3, #32
 4812 00d2 FBD0     		beq	.L461
 4813              	.LVL508:
 4814              	.L460:
1694:src/display.c **** 		CLR_EXP_SIGN;
 4815              		.loc 1 1694 2 is_stmt 1 view .LVU1481
1694:src/display.c **** 		CLR_EXP_SIGN;
 4816              		.loc 1 1694 5 is_stmt 0 view .LVU1482
 4817 00d4 002C     		cmp	r4, #0
 4818 00d6 00F09682 		beq	.L655
 4819              	.L462:
1698:src/display.c **** 		negative = 1;
 4820              		.loc 1 1698 2 is_stmt 1 view .LVU1483
1698:src/display.c **** 		negative = 1;
 4821              		.loc 1 1698 6 is_stmt 0 view .LVU1484
 4822 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1698:src/display.c **** 		negative = 1;
 4823              		.loc 1 1698 5 view .LVU1485
 4824 00dc 2D2B     		cmp	r3, #45
 4825 00de 00F0CA81 		beq	.L656
1701:src/display.c **** 		q++;
 4826              		.loc 1 1701 9 is_stmt 1 view .LVU1486
1701:src/display.c **** 		q++;
 4827              		.loc 1 1701 12 is_stmt 0 view .LVU1487
 4828 00e2 2B2B     		cmp	r3, #43
 4829 00e4 00F06E82 		beq	.L657
1585:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccAnlOT7.s 			page 157


 4830              		.loc 1 1585 6 view .LVU1488
 4831 00e8 4FF0000E 		mov	lr, #0
 4832              	.LVL509:
 4833              	.L464:
1703:src/display.c **** 	if (*q == '.') {
 4834              		.loc 1 1703 9 is_stmt 1 discriminator 1 view .LVU1489
1703:src/display.c **** 	if (*q == '.') {
 4835              		.loc 1 1703 2 is_stmt 0 discriminator 1 view .LVU1490
 4836 00ec 302B     		cmp	r3, #48
 4837 00ee 03D1     		bne	.L466
 4838              	.LVL510:
 4839              	.L465:
1703:src/display.c **** 	if (*q == '.') {
 4840              		.loc 1 1703 24 is_stmt 1 discriminator 2 view .LVU1491
1703:src/display.c **** 	if (*q == '.') {
 4841              		.loc 1 1703 20 discriminator 2 view .LVU1492
1703:src/display.c **** 	if (*q == '.') {
 4842              		.loc 1 1703 9 discriminator 2 view .LVU1493
 4843 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4844              	.LVL511:
1703:src/display.c **** 	if (*q == '.') {
 4845              		.loc 1 1703 2 is_stmt 0 discriminator 2 view .LVU1494
 4846 00f4 302B     		cmp	r3, #48
 4847 00f6 FBD0     		beq	.L465
 4848              	.LVL512:
 4849              	.L466:
1704:src/display.c **** 		do
 4850              		.loc 1 1704 2 is_stmt 1 view .LVU1495
1704:src/display.c **** 		do
 4851              		.loc 1 1704 5 is_stmt 0 view .LVU1496
 4852 00f8 2E2B     		cmp	r3, #46
 4853 00fa 00F0A681 		beq	.L658
1711:src/display.c **** 			*p++ = *q++;
 4854              		.loc 1 1711 3 is_stmt 1 view .LVU1497
1711:src/display.c **** 			*p++ = *q++;
 4855              		.loc 1 1711 6 is_stmt 0 view .LVU1498
 4856 00fe A3F13002 		sub	r2, r3, #48
 4857 0102 092A     		cmp	r2, #9
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4858              		.loc 1 1712 4 is_stmt 1 view .LVU1499
 4859              	.LVL513:
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4860              		.loc 1 1712 13 is_stmt 0 view .LVU1500
 4861 0104 9CBF     		itt	ls
 4862 0106 0136     		addls	r6, r6, #1
 4863              	.LVL514:
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4864              		.loc 1 1712 9 view .LVU1501
 4865 0108 8DF84830 		strbls	r3, [sp, #72]
1713:src/display.c **** 			*p++ = *q++;
 4866              		.loc 1 1713 10 view .LVU1502
 4867 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
1713:src/display.c **** 			*p++ = *q++;
 4868              		.loc 1 1713 9 view .LVU1503
 4869 010e A2F13003 		sub	r3, r2, #48
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4870              		.loc 1 1712 6 view .LVU1504
ARM GAS  /tmp/ccAnlOT7.s 			page 158


 4871 0112 94BF     		ite	ls
 4872 0114 0DF14901 		addls	r1, sp, #73
1571:src/display.c **** 	char *r;
 4873              		.loc 1 1571 8 view .LVU1505
 4874 0118 4946     		movhi	r1, r9
 4875              	.LVL515:
1713:src/display.c **** 			*p++ = *q++;
 4876              		.loc 1 1713 9 is_stmt 1 view .LVU1506
 4877 011a 092B     		cmp	r3, #9
 4878 011c 0CD8     		bhi	.L472
 4879 011e A81B     		subs	r0, r5, r6
 4880 0120 731C     		adds	r3, r6, #1
 4881              	.L473:
 4882              	.LVL516:
1714:src/display.c **** 			exp++;
 4883              		.loc 1 1714 4 view .LVU1507
1714:src/display.c **** 			exp++;
 4884              		.loc 1 1714 9 is_stmt 0 view .LVU1508
 4885 0122 01F8012B 		strb	r2, [r1], #1
 4886              	.LVL517:
1714:src/display.c **** 			exp++;
 4887              		.loc 1 1714 13 view .LVU1509
 4888 0126 1E46     		mov	r6, r3
 4889              	.LVL518:
1715:src/display.c **** 		}
 4890              		.loc 1 1715 4 is_stmt 1 view .LVU1510
 4891 0128 C518     		adds	r5, r0, r3
 4892              	.LVL519:
1713:src/display.c **** 			*p++ = *q++;
 4893              		.loc 1 1713 9 view .LVU1511
1713:src/display.c **** 			*p++ = *q++;
 4894              		.loc 1 1713 10 is_stmt 0 view .LVU1512
 4895 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4896              	.LVL520:
1713:src/display.c **** 			*p++ = *q++;
 4897              		.loc 1 1713 9 view .LVU1513
 4898 012e A2F1300C 		sub	ip, r2, #48
 4899 0132 BCF1090F 		cmp	ip, #9
 4900 0136 F4D9     		bls	.L473
 4901              	.LVL521:
 4902              	.L472:
1717:src/display.c **** 			q++;
 4903              		.loc 1 1717 3 is_stmt 1 view .LVU1514
1717:src/display.c **** 			q++;
 4904              		.loc 1 1717 6 is_stmt 0 view .LVU1515
 4905 0138 2E2A     		cmp	r2, #46
 4906 013a 00F04882 		beq	.L659
 4907              	.LVL522:
 4908              	.L469:
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4909              		.loc 1 1724 2 is_stmt 1 view .LVU1516
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4910              		.loc 1 1725 11 is_stmt 0 view .LVU1517
 4911 013e 009B     		ldr	r3, [sp]
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4912              		.loc 1 1724 5 view .LVU1518
 4913 0140 012F     		cmp	r7, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 159


1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4914              		.loc 1 1725 11 view .LVU1519
 4915 0142 1E68     		ldr	r6, [r3]
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4916              		.loc 1 1724 5 view .LVU1520
 4917 0144 00F06F81 		beq	.L660
 4918 0148 0022     		movs	r2, #0
 4919              	.LVL523:
 4920              	.L475:
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4921              		.loc 1 1738 2 is_stmt 1 view .LVU1521
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4922              		.loc 1 1738 20 is_stmt 0 view .LVU1522
 4923 014a 5244     		add	r2, r2, r10
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4924              		.loc 1 1738 35 view .LVU1523
 4925 014c 501C     		adds	r0, r2, #1
1738:src/display.c **** 	if (*p >= '5') {	// Round up
 4926              		.loc 1 1738 4 view .LVU1524
 4927 014e 09EB0003 		add	r3, r9, r0
 4928              	.LVL524:
1739:src/display.c **** 		*p = '0';
 4929              		.loc 1 1739 2 is_stmt 1 view .LVU1525
1739:src/display.c **** 		*p = '0';
 4930              		.loc 1 1739 6 is_stmt 0 view .LVU1526
 4931 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
1739:src/display.c **** 		*p = '0';
 4932              		.loc 1 1739 5 view .LVU1527
 4933 0156 3429     		cmp	r1, #52
 4934 0158 21D9     		bls	.L479
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4935              		.loc 1 1740 3 is_stmt 1 view .LVU1528
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4936              		.loc 1 1740 6 is_stmt 0 view .LVU1529
 4937 015a 3021     		movs	r1, #48
 4938 015c 09F80010 		strb	r1, [r9, r0]
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4939              		.loc 1 1741 3 is_stmt 1 view .LVU1530
 4940              	.LVL525:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4941              		.loc 1 1741 22 view .LVU1531
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4942              		.loc 1 1741 3 is_stmt 0 view .LVU1532
 4943 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4944 0164 3929     		cmp	r1, #57
 4945 0166 40F0A683 		bne	.L480
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4946              		.loc 1 1741 10 view .LVU1533
 4947 016a 4946     		mov	r1, r9
 4948              	.LVL526:
 4949              	.L481:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4950              		.loc 1 1741 37 is_stmt 1 discriminator 3 view .LVU1534
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4951              		.loc 1 1741 33 discriminator 3 view .LVU1535
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4952              		.loc 1 1741 22 discriminator 3 view .LVU1536
ARM GAS  /tmp/ccAnlOT7.s 			page 160


1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4953              		.loc 1 1741 3 is_stmt 0 discriminator 3 view .LVU1537
 4954 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4955              	.LVL527:
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4956              		.loc 1 1741 3 discriminator 3 view .LVU1538
 4957 0170 BCF1390F 		cmp	ip, #57
 4958 0174 FAD0     		beq	.L481
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4959              		.loc 1 1742 3 is_stmt 1 view .LVU1539
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4960              		.loc 1 1742 6 is_stmt 0 view .LVU1540
 4961 0176 8B42     		cmp	r3, r1
 4962 0178 00F0FD80 		beq	.L661
 4963              	.LVL528:
 4964              	.L551:
1751:src/display.c **** 				*p = '0';
 4965              		.loc 1 1751 10 is_stmt 1 view .LVU1541
1751:src/display.c **** 				*p = '0';
 4966              		.loc 1 1751 11 is_stmt 0 view .LVU1542
 4967 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
1751:src/display.c **** 				*p = '0';
 4968              		.loc 1 1751 10 view .LVU1543
 4969 0180 3929     		cmp	r1, #57
 4970 0182 4A44     		add	r2, r2, r9
 4971              	.LVL529:
1751:src/display.c **** 				*p = '0';
 4972              		.loc 1 1751 10 view .LVU1544
 4973 0184 07D1     		bne	.L484
1752:src/display.c **** 			(*p)++;
 4974              		.loc 1 1752 8 view .LVU1545
 4975 0186 4FF0300C 		mov	ip, #48
 4976              	.L483:
1752:src/display.c **** 			(*p)++;
 4977              		.loc 1 1752 5 is_stmt 1 view .LVU1546
1752:src/display.c **** 			(*p)++;
 4978              		.loc 1 1752 8 is_stmt 0 view .LVU1547
 4979 018a 82F800C0 		strb	ip, [r2]
1751:src/display.c **** 				*p = '0';
 4980              		.loc 1 1751 10 is_stmt 1 view .LVU1548
 4981              	.LVL530:
1751:src/display.c **** 				*p = '0';
 4982              		.loc 1 1751 11 is_stmt 0 view .LVU1549
 4983 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 4984              	.LVL531:
1751:src/display.c **** 				*p = '0';
 4985              		.loc 1 1751 10 view .LVU1550
 4986 0192 3929     		cmp	r1, #57
 4987 0194 F9D0     		beq	.L483
 4988              	.L484:
1753:src/display.c **** 		}
 4989              		.loc 1 1753 4 is_stmt 1 view .LVU1551
1753:src/display.c **** 		}
 4990              		.loc 1 1753 8 is_stmt 0 view .LVU1552
 4991 0196 0131     		adds	r1, r1, #1
 4992 0198 1170     		strb	r1, [r2]
 4993              	.LVL532:
ARM GAS  /tmp/ccAnlOT7.s 			page 161


 4994              	.L648:
1753:src/display.c **** 		}
 4995              		.loc 1 1753 8 view .LVU1553
 4996 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 4997              	.L479:
1758:src/display.c **** 
 4998              		.loc 1 1758 2 is_stmt 1 view .LVU1554
 4999              	.LVL533:
1758:src/display.c **** 
 5000              		.loc 1 1758 45 view .LVU1555
1758:src/display.c **** 
 5001              		.loc 1 1758 2 is_stmt 0 view .LVU1556
 5002 019e 29B1     		cbz	r1, .L490
 5003              	.LVL534:
 5004              	.L550:
1758:src/display.c **** 
 5005              		.loc 1 1758 62 view .LVU1557
 5006 01a0 3021     		movs	r1, #48
 5007              	.L491:
1758:src/display.c **** 
 5008              		.loc 1 1758 68 is_stmt 1 discriminator 3 view .LVU1558
1758:src/display.c **** 
 5009              		.loc 1 1758 57 discriminator 3 view .LVU1559
 5010              	.LVL535:
1758:src/display.c **** 
 5011              		.loc 1 1758 62 is_stmt 0 discriminator 3 view .LVU1560
 5012 01a2 03F8011B 		strb	r1, [r3], #1
 5013              	.LVL536:
1758:src/display.c **** 
 5014              		.loc 1 1758 45 is_stmt 1 discriminator 3 view .LVU1561
1758:src/display.c **** 
 5015              		.loc 1 1758 2 is_stmt 0 discriminator 3 view .LVU1562
 5016 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5017 01a8 002A     		cmp	r2, #0
 5018 01aa FAD1     		bne	.L491
 5019              	.L490:
1760:src/display.c **** 	switch (mode) {
 5020              		.loc 1 1760 2 is_stmt 1 view .LVU1563
 5021              	.LVL537:
1761:src/display.c **** 	default:
 5022              		.loc 1 1761 2 view .LVU1564
 5023 01ac 022F     		cmp	r7, #2
 5024 01ae 5AD0     		beq	.L573
 5025 01b0 032F     		cmp	r7, #3
 5026 01b2 00F00481 		beq	.L493
 5027 01b6 012F     		cmp	r7, #1
 5028 01b8 00F0B681 		beq	.L494
1764:src/display.c **** 		if (count != *display_digits)
 5029              		.loc 1 1764 3 view .LVU1565
 5030              	.LVL538:
1764:src/display.c **** 		if (count != *display_digits)
 5031              		.loc 1 1764 33 view .LVU1566
1764:src/display.c **** 		if (count != *display_digits)
 5032              		.loc 1 1764 41 is_stmt 0 view .LVU1567
 5033 01bc 22AB     		add	r3, sp, #136
 5034 01be 3344     		add	r3, r3, r6
1764:src/display.c **** 		if (count != *display_digits)
ARM GAS  /tmp/ccAnlOT7.s 			page 162


 5035              		.loc 1 1764 3 view .LVU1568
 5036 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5037 01c4 302B     		cmp	r3, #48
 5038 01c6 40F06783 		bne	.L567
 5039 01ca 711E     		subs	r1, r6, #1
 5040 01cc 4944     		add	r1, r1, r9
1764:src/display.c **** 		if (count != *display_digits)
 5041              		.loc 1 1764 14 view .LVU1569
 5042 01ce 3346     		mov	r3, r6
 5043              	.LVL539:
 5044              	.L496:
1764:src/display.c **** 		if (count != *display_digits)
 5045              		.loc 1 1764 65 is_stmt 1 discriminator 3 view .LVU1570
1764:src/display.c **** 		if (count != *display_digits)
 5046              		.loc 1 1764 57 discriminator 3 view .LVU1571
1764:src/display.c **** 		if (count != *display_digits)
 5047              		.loc 1 1764 41 is_stmt 0 discriminator 3 view .LVU1572
 5048 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
1764:src/display.c **** 		if (count != *display_digits)
 5049              		.loc 1 1764 3 discriminator 3 view .LVU1573
 5050 01d4 3028     		cmp	r0, #48
 5051 01d6 1A46     		mov	r2, r3
1764:src/display.c **** 		if (count != *display_digits)
 5052              		.loc 1 1764 62 discriminator 3 view .LVU1574
 5053 01d8 03F1FF33 		add	r3, r3, #-1
 5054              	.LVL540:
1764:src/display.c **** 		if (count != *display_digits)
 5055              		.loc 1 1764 33 is_stmt 1 discriminator 3 view .LVU1575
1764:src/display.c **** 		if (count != *display_digits)
 5056              		.loc 1 1764 3 is_stmt 0 discriminator 3 view .LVU1576
 5057 01dc F8D0     		beq	.L496
1765:src/display.c **** 			count++;
 5058              		.loc 1 1765 3 is_stmt 1 view .LVU1577
1765:src/display.c **** 			count++;
 5059              		.loc 1 1765 6 is_stmt 0 view .LVU1578
 5060 01de 9E42     		cmp	r6, r3
 5061 01e0 08BF     		it	eq
 5062 01e2 1A46     		moveq	r2, r3
 5063              	.LVL541:
 5064              	.L495:
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5065              		.loc 1 1768 3 is_stmt 1 view .LVU1579
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5066              		.loc 1 1768 6 is_stmt 0 view .LVU1580
 5067 01e4 B542     		cmp	r5, r6
 5068 01e6 80F20381 		bge	.L497
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5069              		.loc 1 1768 46 discriminator 1 view .LVU1581
 5070 01ea 931B     		subs	r3, r2, r6
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5071              		.loc 1 1768 30 discriminator 1 view .LVU1582
 5072 01ec AB42     		cmp	r3, r5
 5073 01ee 00F3FF80 		bgt	.L497
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
 5074              		.loc 1 1793 10 is_stmt 1 view .LVU1583
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
 5075              		.loc 1 1793 13 is_stmt 0 view .LVU1584
ARM GAS  /tmp/ccAnlOT7.s 			page 163


 5076 01f2 002D     		cmp	r5, #0
 5077 01f4 C0F27583 		blt	.L505
 5078 01f8 6B1C     		adds	r3, r5, #1
1795:src/display.c **** 					*obp++ = ',';
 5079              		.loc 1 1795 28 view .LVU1585
 5080 01fa DFF834A1 		ldr	r10, .L670+8
 5081 01fe 0293     		str	r3, [sp, #8]
 5082 0200 09EB0300 		add	r0, r9, r3
1760:src/display.c **** 	switch (mode) {
 5083              		.loc 1 1760 4 view .LVU1586
 5084 0204 CC46     		mov	ip, r9
1565:src/display.c **** 	int odig = 0;
 5085              		.loc 1 1565 15 view .LVU1587
 5086 0206 4146     		mov	r1, r8
 5087 0208 0192     		str	r2, [sp, #4]
 5088              	.LVL542:
1565:src/display.c **** 	int odig = 0;
 5089              		.loc 1 1565 15 view .LVU1588
 5090 020a 05E0     		b	.L506
 5091              	.LVL543:
 5092              	.L509:
1796:src/display.c **** 				*obp++ = *p++;
 5093              		.loc 1 1796 6 is_stmt 1 view .LVU1589
1795:src/display.c **** 					*obp++ = ',';
 5094              		.loc 1 1795 15 is_stmt 0 view .LVU1590
 5095 020c 022F     		cmp	r7, #2
1796:src/display.c **** 				*obp++ = *p++;
 5096              		.loc 1 1796 13 view .LVU1591
 5097 020e 05BF     		ittet	eq
 5098 0210 2C23     		moveq	r3, #44
 5099 0212 4B70     		strbeq	r3, [r1, #1]
1797:src/display.c **** 				odig++;
 5100              		.loc 1 1797 9 view .LVU1592
 5101 0214 0131     		addne	r1, r1, #1
 5102              	.LVL544:
1796:src/display.c **** 				*obp++ = *p++;
 5103              		.loc 1 1796 10 view .LVU1593
 5104 0216 0231     		addeq	r1, r1, #2
 5105              	.LVL545:
 5106              	.L506:
1797:src/display.c **** 				odig++;
 5107              		.loc 1 1797 5 is_stmt 1 discriminator 2 view .LVU1594
1797:src/display.c **** 				odig++;
 5108              		.loc 1 1797 12 is_stmt 0 discriminator 2 view .LVU1595
 5109 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5110              	.LVL546:
1795:src/display.c **** 					*obp++ = ',';
 5111              		.loc 1 1795 5 is_stmt 1 discriminator 2 view .LVU1596
1797:src/display.c **** 				odig++;
 5112              		.loc 1 1797 12 is_stmt 0 discriminator 2 view .LVU1597
 5113 021c 0B70     		strb	r3, [r1]
1798:src/display.c **** 			}
 5114              		.loc 1 1798 5 is_stmt 1 discriminator 2 view .LVU1598
 5115              	.LVL547:
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5116              		.loc 1 1794 21 discriminator 2 view .LVU1599
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
ARM GAS  /tmp/ccAnlOT7.s 			page 164


 5117              		.loc 1 1794 13 discriminator 2 view .LVU1600
1795:src/display.c **** 					*obp++ = ',';
 5118              		.loc 1 1795 28 is_stmt 0 discriminator 2 view .LVU1601
 5119 021e A9EB0C03 		sub	r3, r9, ip
 5120 0222 2B44     		add	r3, r3, r5
 5121 0224 8AFB0327 		smull	r2, r7, r10, r3
 5122 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5123 022c 07EB4707 		add	r7, r7, r7, lsl #1
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5124              		.loc 1 1794 4 discriminator 2 view .LVU1602
 5125 0230 6045     		cmp	r0, ip
1795:src/display.c **** 					*obp++ = ',';
 5126              		.loc 1 1795 28 discriminator 2 view .LVU1603
 5127 0232 A3EB0707 		sub	r7, r3, r7
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5128              		.loc 1 1794 4 discriminator 2 view .LVU1604
 5129 0236 E9D1     		bne	.L509
 5130 0238 019A     		ldr	r2, [sp, #4]
 5131 023a 029F     		ldr	r7, [sp, #8]
1800:src/display.c **** 			if (count > (exp + 1)) {
 5132              		.loc 1 1800 4 is_stmt 1 view .LVU1605
1800:src/display.c **** 			if (count > (exp + 1)) {
 5133              		.loc 1 1800 11 is_stmt 0 view .LVU1606
 5134 023c 2E23     		movs	r3, #46
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5135              		.loc 1 1801 7 view .LVU1607
 5136 023e BA42     		cmp	r2, r7
1800:src/display.c **** 			if (count > (exp + 1)) {
 5137              		.loc 1 1800 11 view .LVU1608
 5138 0240 4B70     		strb	r3, [r1, #1]
1800:src/display.c **** 			if (count > (exp + 1)) {
 5139              		.loc 1 1800 8 view .LVU1609
 5140 0242 01F10203 		add	r3, r1, #2
 5141              	.LVL548:
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5142              		.loc 1 1801 4 is_stmt 1 view .LVU1610
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5143              		.loc 1 1801 7 is_stmt 0 view .LVU1611
 5144 0246 2BDD     		ble	.L503
 5145 0248 A2EB050C 		sub	ip, r2, r5
 5146              	.LVL549:
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5147              		.loc 1 1801 7 view .LVU1612
 5148 024c 8C44     		add	ip, ip, r1
 5149 024e 0131     		adds	r1, r1, #1
 5150              	.LVL550:
 5151              	.L510:
1803:src/display.c **** 					odig++;
 5152              		.loc 1 1803 6 is_stmt 1 discriminator 3 view .LVU1613
1803:src/display.c **** 					odig++;
 5153              		.loc 1 1803 13 is_stmt 0 discriminator 3 view .LVU1614
 5154 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5155              	.LVL551:
1803:src/display.c **** 					odig++;
 5156              		.loc 1 1803 13 discriminator 3 view .LVU1615
 5157 0254 01F8017F 		strb	r7, [r1, #1]!
1804:src/display.c **** 				}
ARM GAS  /tmp/ccAnlOT7.s 			page 165


 5158              		.loc 1 1804 6 is_stmt 1 discriminator 3 view .LVU1616
1802:src/display.c **** 					*obp++ = *p++;
 5159              		.loc 1 1802 28 discriminator 3 view .LVU1617
1802:src/display.c **** 					*obp++ = *p++;
 5160              		.loc 1 1802 19 discriminator 3 view .LVU1618
1802:src/display.c **** 					*obp++ = *p++;
 5161              		.loc 1 1802 5 is_stmt 0 discriminator 3 view .LVU1619
 5162 0258 8C45     		cmp	ip, r1
 5163 025a F9D1     		bne	.L510
 5164 025c E943     		mvns	r1, r5
 5165 025e 1144     		add	r1, r1, r2
 5166 0260 0B44     		add	r3, r3, r1
 5167              	.LVL552:
1804:src/display.c **** 				}
 5168              		.loc 1 1804 10 view .LVU1620
 5169 0262 1746     		mov	r7, r2
 5170 0264 1CE0     		b	.L503
 5171              	.LVL553:
 5172              	.L573:
1860:src/display.c **** 		case -1:
 5173              		.loc 1 1860 15 view .LVU1621
 5174 0266 0127     		movs	r7, #1
 5175              	.LVL554:
 5176              	.L649:
1860:src/display.c **** 		case -1:
 5177              		.loc 1 1860 15 view .LVU1622
 5178 0268 4146     		mov	r1, r8
 5179              	.LVL555:
 5180              	.L492:
1874:src/display.c **** 		};
 5181              		.loc 1 1874 4 is_stmt 1 view .LVU1623
1875:src/display.c **** 	// Falling through
 5182              		.loc 1 1875 4 view .LVU1624
1879:src/display.c **** 		odig++;
 5183              		.loc 1 1879 3 view .LVU1625
1879:src/display.c **** 		odig++;
 5184              		.loc 1 1879 14 is_stmt 0 view .LVU1626
 5185 026a 4A46     		mov	r2, r9
 5186              	.LVL556:
1879:src/display.c **** 		odig++;
 5187              		.loc 1 1879 10 view .LVU1627
 5188 026c 0B46     		mov	r3, r1
 5189 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5190              	.LVL557:
1879:src/display.c **** 		odig++;
 5191              		.loc 1 1879 10 view .LVU1628
 5192 0272 03F8020B 		strb	r0, [r3], #2
1880:src/display.c **** 		*obp++ = '.';
 5193              		.loc 1 1880 3 is_stmt 1 view .LVU1629
1881:src/display.c **** 		dd--;
 5194              		.loc 1 1881 3 view .LVU1630
 5195              	.LVL558:
1883:src/display.c **** 			*obp++ = *p++;
 5196              		.loc 1 1883 9 is_stmt 0 view .LVU1631
 5197 0276 BAF1000F 		cmp	r10, #0
1881:src/display.c **** 		dd--;
 5198              		.loc 1 1881 10 view .LVU1632
ARM GAS  /tmp/ccAnlOT7.s 			page 166


 5199 027a 4FF02E00 		mov	r0, #46
 5200 027e 4870     		strb	r0, [r1, #1]
1882:src/display.c **** 		while (dd-- >= 0) {
 5201              		.loc 1 1882 3 is_stmt 1 view .LVU1633
1883:src/display.c **** 			*obp++ = *p++;
 5202              		.loc 1 1883 3 view .LVU1634
1883:src/display.c **** 			*obp++ = *p++;
 5203              		.loc 1 1883 9 view .LVU1635
1883:src/display.c **** 			*obp++ = *p++;
 5204              		.loc 1 1883 9 is_stmt 0 view .LVU1636
 5205 0280 40F30F83 		ble	.L570
1883:src/display.c **** 			*obp++ = *p++;
 5206              		.loc 1 1883 9 view .LVU1637
 5207 0284 0AF10100 		add	r0, r10, #1
 5208 0288 0131     		adds	r1, r1, #1
 5209 028a 8144     		add	r9, r9, r0
 5210              	.LVL559:
 5211              	.L533:
1884:src/display.c **** 			odig++;
 5212              		.loc 1 1884 4 is_stmt 1 view .LVU1638
1884:src/display.c **** 			odig++;
 5213              		.loc 1 1884 11 is_stmt 0 view .LVU1639
 5214 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5215              	.LVL560:
1884:src/display.c **** 			odig++;
 5216              		.loc 1 1884 11 view .LVU1640
 5217 0290 01F8010F 		strb	r0, [r1, #1]!
1885:src/display.c **** 		}
 5218              		.loc 1 1885 4 is_stmt 1 view .LVU1641
1883:src/display.c **** 			*obp++ = *p++;
 5219              		.loc 1 1883 9 view .LVU1642
1883:src/display.c **** 			*obp++ = *p++;
 5220              		.loc 1 1883 9 is_stmt 0 view .LVU1643
 5221 0294 4A45     		cmp	r2, r9
 5222 0296 F9D1     		bne	.L533
 5223 0298 5344     		add	r3, r3, r10
 5224 029a 5744     		add	r7, r7, r10
1887:src/display.c **** 	}
 5225              		.loc 1 1887 12 view .LVU1644
 5226 029c 4FF0010B 		mov	fp, #1
 5227              	.LVL561:
 5228              	.L503:
1896:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
 5229              		.loc 1 1896 2 is_stmt 1 view .LVU1645
1902:src/display.c **** 	if (odig > *display_digits)
 5230              		.loc 1 1902 2 view .LVU1646
 5231 02a0 B742     		cmp	r7, r6
 5232 02a2 A8BF     		it	ge
 5233 02a4 3746     		movge	r7, r6
 5234              	.LVL562:
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5235              		.loc 1 1905 23 is_stmt 0 view .LVU1647
 5236 02a6 F61B     		subs	r6, r6, r7
1902:src/display.c **** 	if (odig > *display_digits)
 5237              		.loc 1 1902 7 view .LVU1648
 5238 02a8 0022     		movs	r2, #0
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
ARM GAS  /tmp/ccAnlOT7.s 			page 167


 5239              		.loc 1 1905 4 view .LVU1649
 5240 02aa 06EBC606 		add	r6, r6, r6, lsl #3
1902:src/display.c **** 	if (odig > *display_digits)
 5241              		.loc 1 1902 7 view .LVU1650
 5242 02ae 1A70     		strb	r2, [r3]
1903:src/display.c **** 		odig = *display_digits;
 5243              		.loc 1 1903 2 is_stmt 1 view .LVU1651
 5244              	.LVL563:
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5245              		.loc 1 1905 2 view .LVU1652
1906:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5246              		.loc 1 1906 2 view .LVU1653
1908:src/display.c **** 		if (res) *res++ = '-';
 5247              		.loc 1 1908 2 view .LVU1654
1908:src/display.c **** 		if (res) *res++ = '-';
 5248              		.loc 1 1908 5 is_stmt 0 view .LVU1655
 5249 02b0 BEF1000F 		cmp	lr, #0
 5250 02b4 05D0     		beq	.L534
1909:src/display.c **** 		else {
 5251              		.loc 1 1909 3 is_stmt 1 view .LVU1656
1909:src/display.c **** 		else {
 5252              		.loc 1 1909 6 is_stmt 0 view .LVU1657
 5253 02b6 002C     		cmp	r4, #0
 5254 02b8 00F0B281 		beq	.L535
1909:src/display.c **** 		else {
 5255              		.loc 1 1909 12 is_stmt 1 discriminator 1 view .LVU1658
 5256              	.LVL564:
1909:src/display.c **** 		else {
 5257              		.loc 1 1909 19 is_stmt 0 discriminator 1 view .LVU1659
 5258 02bc 2D22     		movs	r2, #45
 5259 02be 04F8012B 		strb	r2, [r4], #1
 5260              	.LVL565:
 5261              	.L534:
1917:src/display.c **** 		if (c == '.') {
 5262              		.loc 1 1917 12 is_stmt 1 discriminator 1 view .LVU1660
1917:src/display.c **** 		if (c == '.') {
 5263              		.loc 1 1917 18 is_stmt 0 discriminator 1 view .LVU1661
 5264 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5265              	.LVL566:
1917:src/display.c **** 		if (c == '.') {
 5266              		.loc 1 1917 2 discriminator 1 view .LVU1662
 5267 02c6 E2B1     		cbz	r2, .L536
1917:src/display.c **** 		if (c == '.') {
 5268              		.loc 1 1917 31 view .LVU1663
 5269 02c8 6B2E     		cmp	r6, #107
 5270 02ca 1ADC     		bgt	.L536
 5271              	.LVL567:
 5272              	.L537:
 5273              	.LBB371:
 5274              	.LBB372:
 360:src/display.c **** 	} else {
 5275              		.loc 1 360 15 view .LVU1664
 5276 02cc 3946     		mov	r1, r7
 5277              	.LBE372:
 5278              	.LBE371:
1921:src/display.c **** 		} else {
 5279              		.loc 1 1921 10 view .LVU1665
ARM GAS  /tmp/ccAnlOT7.s 			page 168


 5280 02ce DFF864A0 		ldr	r10, .L670+12
1919:src/display.c **** 		} else if (c == ',') {
 5281              		.loc 1 1919 10 view .LVU1666
 5282 02d2 DFF86490 		ldr	r9, .L670+16
 5283              	.LBB376:
 5284              	.LBB373:
 360:src/display.c **** 	} else {
 5285              		.loc 1 360 15 view .LVU1667
 5286 02d6 1F46     		mov	r7, r3
 5287              	.LVL568:
 360:src/display.c **** 	} else {
 5288              		.loc 1 360 15 view .LVU1668
 5289 02d8 0B46     		mov	r3, r1
 5290              	.LVL569:
 5291              	.L546:
 360:src/display.c **** 	} else {
 5292              		.loc 1 360 15 view .LVU1669
 5293              	.LBE373:
 5294              	.LBE376:
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5295              		.loc 1 1918 3 is_stmt 1 view .LVU1670
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5296              		.loc 1 1918 6 is_stmt 0 view .LVU1671
 5297 02da 2E2A     		cmp	r2, #46
 5298 02dc 00F0DB80 		beq	.L662
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5299              		.loc 1 1920 10 is_stmt 1 view .LVU1672
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5300              		.loc 1 1920 13 is_stmt 0 view .LVU1673
 5301 02e0 2C2A     		cmp	r2, #44
 5302 02e2 00F0E880 		beq	.L663
1923:src/display.c **** 			j += SEGS_PER_DIGIT;
 5303              		.loc 1 1923 4 is_stmt 1 view .LVU1674
 5304              	.LVL570:
 5305              	.LBB377:
 5306              	.LBI377:
 395:src/display.c **** 	if (res) *res++ = ch;
 5307              		.loc 1 395 14 view .LVU1675
 5308              	.LBB378:
 396:src/display.c **** 	else	set_dig(base, ch);
 5309              		.loc 1 396 2 view .LVU1676
 396:src/display.c **** 	else	set_dig(base, ch);
 5310              		.loc 1 396 5 is_stmt 0 view .LVU1677
 5311 02e6 002C     		cmp	r4, #0
 5312 02e8 00F0F280 		beq	.L544
 396:src/display.c **** 	else	set_dig(base, ch);
 5313              		.loc 1 396 11 is_stmt 1 view .LVU1678
 5314              	.LVL571:
 396:src/display.c **** 	else	set_dig(base, ch);
 5315              		.loc 1 396 18 is_stmt 0 view .LVU1679
 5316 02ec 04F8012B 		strb	r2, [r4], #1
 5317              	.LVL572:
 5318              	.L545:
 398:src/display.c **** }
 5319              		.loc 1 398 2 is_stmt 1 view .LVU1680
 398:src/display.c **** }
 5320              		.loc 1 398 2 is_stmt 0 view .LVU1681
ARM GAS  /tmp/ccAnlOT7.s 			page 169


 5321              	.LBE378:
 5322              	.LBE377:
1924:src/display.c **** 		}
 5323              		.loc 1 1924 4 is_stmt 1 view .LVU1682
1917:src/display.c **** 		if (c == '.') {
 5324              		.loc 1 1917 18 is_stmt 0 view .LVU1683
 5325 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5326              	.LVL573:
1924:src/display.c **** 		}
 5327              		.loc 1 1924 6 view .LVU1684
 5328 02f4 0936     		adds	r6, r6, #9
 5329              	.LVL574:
1917:src/display.c **** 		if (c == '.') {
 5330              		.loc 1 1917 53 is_stmt 1 view .LVU1685
1917:src/display.c **** 		if (c == '.') {
 5331              		.loc 1 1917 12 view .LVU1686
1917:src/display.c **** 		if (c == '.') {
 5332              		.loc 1 1917 2 is_stmt 0 view .LVU1687
 5333 02f6 0AB1     		cbz	r2, .L645
1917:src/display.c **** 		if (c == '.') {
 5334              		.loc 1 1917 31 discriminator 3 view .LVU1688
 5335 02f8 6B2E     		cmp	r6, #107
 5336 02fa EEDD     		ble	.L546
 5337              	.L645:
1917:src/display.c **** 		if (c == '.') {
 5338              		.loc 1 1917 31 discriminator 3 view .LVU1689
 5339 02fc 1A46     		mov	r2, r3
 5340              	.LVL575:
1917:src/display.c **** 		if (c == '.') {
 5341              		.loc 1 1917 31 discriminator 3 view .LVU1690
 5342 02fe 3B46     		mov	r3, r7
 5343 0300 1746     		mov	r7, r2
 5344              	.LVL576:
 5345              	.L536:
1937:src/display.c **** 		set_exp(exp, 0, res);
 5346              		.loc 1 1937 2 is_stmt 1 view .LVU1691
1937:src/display.c **** 		set_exp(exp, 0, res);
 5347              		.loc 1 1937 5 is_stmt 0 view .LVU1692
 5348 0302 BBF1000F 		cmp	fp, #0
 5349 0306 40F0F880 		bne	.L664
 5350              	.L547:
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5351              		.loc 1 1940 2 is_stmt 1 view .LVU1693
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5352              		.loc 1 1940 5 is_stmt 0 view .LVU1694
 5353 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5354 030e 2E2B     		cmp	r3, #46
 5355 0310 00F0E580 		beq	.L665
 5356              	.L548:
1942:src/display.c **** }
 5357              		.loc 1 1942 2 is_stmt 1 view .LVU1695
1942:src/display.c **** }
 5358              		.loc 1 1942 18 is_stmt 0 view .LVU1696
 5359 0314 009B     		ldr	r3, [sp]
 5360 0316 1F60     		str	r7, [r3]
 5361              	.LVL577:
 5362              	.L435:
ARM GAS  /tmp/ccAnlOT7.s 			page 170


1943:src/display.c **** 
 5363              		.loc 1 1943 1 view .LVU1697
 5364 0318 23B0     		add	sp, sp, #140
 5365              		.cfi_remember_state
 5366              		.cfi_def_cfa_offset 36
 5367              	.LVL578:
1943:src/display.c **** 
 5368              		.loc 1 1943 1 view .LVU1698
 5369              		@ sp needed
 5370 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5371              	.LVL579:
 5372              	.L443:
 5373              		.cfi_restore_state
1642:src/display.c **** 
 5374              		.loc 1 1642 3 is_stmt 1 view .LVU1699
 5375 031e 4146     		mov	r1, r8
 5376 0320 3046     		mov	r0, r6
 5377 0322 FFF7FEFF 		bl	decNumberToString
 5378              	.LVL580:
 5379 0326 A5E6     		b	.L445
 5380              	.L671:
 5381              		.align	2
 5382              	.L670:
 5383 0328 00000000 		.word	main_ram
 5384 032c 00000000 		.word	StateWhileOn
 5385 0330 56555555 		.word	1431655766
 5386 0334 00000000 		.word	.LANCHOR0
 5387 0338 00000000 		.word	.LANCHOR1
 5388              	.LVL581:
 5389              	.L436:
1600:src/display.c **** 			if (State2.hms) {
 5390              		.loc 1 1600 3 view .LVU1700
1600:src/display.c **** 			if (State2.hms) {
 5391              		.loc 1 1600 24 is_stmt 0 view .LVU1701
 5392 033c C14B     		ldr	r3, .L672
 5393 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1600:src/display.c **** 			if (State2.hms) {
 5394              		.loc 1 1600 21 view .LVU1702
 5395 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1600:src/display.c **** 			if (State2.hms) {
 5396              		.loc 1 1600 24 view .LVU1703
 5397 0342 01F00201 		and	r1, r1, #2
1600:src/display.c **** 			if (State2.hms) {
 5398              		.loc 1 1600 21 view .LVU1704
 5399 0346 1143     		orrs	r1, r1, r2
 5400 0348 7FF46EAE 		bne	.L439
1601:src/display.c **** 				set_x_hms(z, res);
 5401              		.loc 1 1601 4 is_stmt 1 view .LVU1705
1601:src/display.c **** 				set_x_hms(z, res);
 5402              		.loc 1 1601 8 is_stmt 0 view .LVU1706
 5403 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1601:src/display.c **** 				set_x_hms(z, res);
 5404              		.loc 1 1601 7 view .LVU1707
 5405 034e DA07     		lsls	r2, r3, #31
 5406 0350 00F19E82 		bmi	.L666
1605:src/display.c **** 				if (set_x_fract(z, res))
 5407              		.loc 1 1605 9 is_stmt 1 view .LVU1708
ARM GAS  /tmp/ccAnlOT7.s 			page 171


1605:src/display.c **** 				if (set_x_fract(z, res))
 5408              		.loc 1 1605 13 is_stmt 0 view .LVU1709
 5409 0354 BC4B     		ldr	r3, .L672+4
 5410 0356 1B68     		ldr	r3, [r3]
 5411 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1605:src/display.c **** 				if (set_x_fract(z, res))
 5412              		.loc 1 1605 12 view .LVU1710
 5413 035c 9B06     		lsls	r3, r3, #26
 5414 035e 7FF563AE 		bpl	.L439
1606:src/display.c **** 					return;
 5415              		.loc 1 1606 5 is_stmt 1 view .LVU1711
1606:src/display.c **** 					return;
 5416              		.loc 1 1606 9 is_stmt 0 view .LVU1712
 5417 0362 2146     		mov	r1, r4
 5418 0364 3046     		mov	r0, r6
 5419 0366 FFF7FEFF 		bl	set_x_fract
 5420              	.LVL582:
1606:src/display.c **** 					return;
 5421              		.loc 1 1606 8 view .LVU1713
 5422 036a 0028     		cmp	r0, #0
 5423 036c 3FF45CAE 		beq	.L439
 5424 0370 D2E7     		b	.L435
 5425              	.LVL583:
 5426              	.L559:
1688:src/display.c **** 	else exp = s_to_i(q+1);
 5427              		.loc 1 1688 21 view .LVU1714
 5428 0372 0546     		mov	r5, r0
 5429 0374 A5E6     		b	.L459
 5430              	.LVL584:
 5431              	.L661:
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 5432              		.loc 1 1742 6 view .LVU1715
 5433 0376 4A46     		mov	r2, r9
1743:src/display.c **** 			mantissa[0] = '1';
 5434              		.loc 1 1743 39 view .LVU1716
 5435 0378 4FF0300C 		mov	ip, #48
 5436              	.LVL585:
 5437              	.L485:
1743:src/display.c **** 			mantissa[0] = '1';
 5438              		.loc 1 1743 45 is_stmt 1 discriminator 3 view .LVU1717
1743:src/display.c **** 			mantissa[0] = '1';
 5439              		.loc 1 1743 34 discriminator 3 view .LVU1718
1743:src/display.c **** 			mantissa[0] = '1';
 5440              		.loc 1 1743 39 is_stmt 0 discriminator 3 view .LVU1719
 5441 037c 02F801CB 		strb	ip, [r2], #1
 5442              	.LVL586:
1743:src/display.c **** 			mantissa[0] = '1';
 5443              		.loc 1 1743 23 is_stmt 1 discriminator 3 view .LVU1720
1743:src/display.c **** 			mantissa[0] = '1';
 5444              		.loc 1 1743 4 is_stmt 0 discriminator 3 view .LVU1721
 5445 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5446 0382 3929     		cmp	r1, #57
 5447 0384 FAD0     		beq	.L485
 5448              	.LVL587:
 5449              	.L552:
1744:src/display.c **** 			exp++;
 5450              		.loc 1 1744 4 is_stmt 1 view .LVU1722
ARM GAS  /tmp/ccAnlOT7.s 			page 172


1744:src/display.c **** 			exp++;
 5451              		.loc 1 1744 16 is_stmt 0 view .LVU1723
 5452 0386 3122     		movs	r2, #49
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5453              		.loc 1 1746 7 view .LVU1724
 5454 0388 012F     		cmp	r7, #1
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5455              		.loc 1 1745 7 view .LVU1725
 5456 038a 05F10105 		add	r5, r5, #1
 5457              	.LVL588:
1744:src/display.c **** 			exp++;
 5458              		.loc 1 1744 16 view .LVU1726
 5459 038e 8DF84820 		strb	r2, [sp, #72]
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5460              		.loc 1 1745 4 is_stmt 1 view .LVU1727
 5461              	.LVL589:
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5462              		.loc 1 1746 4 view .LVU1728
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5463              		.loc 1 1746 7 is_stmt 0 view .LVU1729
 5464 0392 7FF402AF 		bne	.L648
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5465              		.loc 1 1746 25 discriminator 1 view .LVU1730
 5466 0396 AE42     		cmp	r6, r5
 5467 0398 00F3C180 		bgt	.L487
1747:src/display.c **** 				extra_digits = 0;
 5468              		.loc 1 1747 5 is_stmt 1 view .LVU1731
1747:src/display.c **** 				extra_digits = 0;
 5469              		.loc 1 1747 25 is_stmt 0 view .LVU1732
 5470 039c AA4B     		ldr	r3, .L672+4
 5471              	.LVL590:
1747:src/display.c **** 				extra_digits = 0;
 5472              		.loc 1 1747 25 view .LVU1733
 5473 039e 1B68     		ldr	r3, [r3]
 5474 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1747:src/display.c **** 				extra_digits = 0;
 5475              		.loc 1 1747 34 view .LVU1734
 5476 03a4 D806     		lsls	r0, r3, #27
 5477              	.LVL591:
1747:src/display.c **** 				extra_digits = 0;
 5478              		.loc 1 1747 34 view .LVU1735
 5479 03a6 40F1C082 		bpl	.L667
 5480              	.LVL592:
1758:src/display.c **** 
 5481              		.loc 1 1758 2 is_stmt 1 view .LVU1736
1758:src/display.c **** 
 5482              		.loc 1 1758 40 is_stmt 0 view .LVU1737
 5483 03aa 0AF10102 		add	r2, r10, #1
1758:src/display.c **** 
 5484              		.loc 1 1758 9 view .LVU1738
 5485 03ae 09EB0203 		add	r3, r9, r2
 5486              	.LVL593:
1758:src/display.c **** 
 5487              		.loc 1 1758 45 is_stmt 1 view .LVU1739
1758:src/display.c **** 
 5488              		.loc 1 1758 2 is_stmt 0 view .LVU1740
 5489 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 173


1747:src/display.c **** 				extra_digits = 0;
 5490              		.loc 1 1747 34 view .LVU1741
 5491 03b6 0327     		movs	r7, #3
1758:src/display.c **** 
 5492              		.loc 1 1758 2 view .LVU1742
 5493 03b8 002A     		cmp	r2, #0
 5494 03ba 7FF4F1AE 		bne	.L550
 5495              	.LVL594:
 5496              	.L493:
1860:src/display.c **** 		case -1:
 5497              		.loc 1 1860 3 is_stmt 1 view .LVU1743
1860:src/display.c **** 		case -1:
 5498              		.loc 1 1860 15 is_stmt 0 view .LVU1744
 5499 03be A34B     		ldr	r3, .L672+8
 5500 03c0 83FB0523 		smull	r2, r3, r3, r5
 5501 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5502 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5503 03cc EB1A     		subs	r3, r5, r3
 5504 03ce 0233     		adds	r3, r3, #2
 5505 03d0 042B     		cmp	r3, #4
 5506 03d2 3FF648AF 		bhi	.L573
 5507 03d6 01A2     		adr	r2, .L530
 5508 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5509              		.p2align 2
 5510              	.L530:
 5511 03dc 0B050000 		.word	.L574+1
 5512 03e0 A7070000 		.word	.L529+1
 5513 03e4 67020000 		.word	.L573+1
 5514 03e8 0B050000 		.word	.L574+1
 5515 03ec A7070000 		.word	.L529+1
 5516              	.LVL595:
 5517              		.p2align 1
 5518              	.L497:
1769:src/display.c **** 			case -1:
 5519              		.loc 1 1769 4 is_stmt 1 view .LVU1745
1769:src/display.c **** 			case -1:
 5520              		.loc 1 1769 30 is_stmt 0 view .LVU1746
 5521 03f0 9549     		ldr	r1, .L672+4
1769:src/display.c **** 			case -1:
 5522              		.loc 1 1769 17 view .LVU1747
 5523 03f2 964B     		ldr	r3, .L672+8
1769:src/display.c **** 			case -1:
 5524              		.loc 1 1769 30 view .LVU1748
 5525 03f4 0968     		ldr	r1, [r1]
1769:src/display.c **** 			case -1:
 5526              		.loc 1 1769 17 view .LVU1749
 5527 03f6 83FB0503 		smull	r0, r3, r3, r5
1769:src/display.c **** 			case -1:
 5528              		.loc 1 1769 30 view .LVU1750
 5529 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
1769:src/display.c **** 			case -1:
 5530              		.loc 1 1769 17 view .LVU1751
 5531 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5532 0402 03EB4303 		add	r3, r3, r3, lsl #1
1769:src/display.c **** 			case -1:
 5533              		.loc 1 1769 30 view .LVU1752
 5534 0406 C1F30011 		ubfx	r1, r1, #4, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 174


1769:src/display.c **** 			case -1:
 5535              		.loc 1 1769 17 view .LVU1753
 5536 040a EB1A     		subs	r3, r5, r3
1769:src/display.c **** 			case -1:
 5537              		.loc 1 1769 22 view .LVU1754
 5538 040c 03FB01F3 		mul	r3, r3, r1
 5539 0410 0233     		adds	r3, r3, #2
 5540 0412 042B     		cmp	r3, #4
 5541 0414 00F24282 		bhi	.L568
 5542 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5543              	.L501:
 5544 041c DC01     		.2byte	(.L569-.L501)/2
 5545 041e FD01     		.2byte	(.L500-.L501)/2
 5546 0420 4002     		.2byte	(.L568-.L501)/2
 5547 0422 DC01     		.2byte	(.L569-.L501)/2
 5548 0424 FD01     		.2byte	(.L500-.L501)/2
 5549              	.LVL596:
 5550              		.p2align 1
 5551              	.L660:
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5552              		.loc 1 1725 3 is_stmt 1 view .LVU1755
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5553              		.loc 1 1725 6 is_stmt 0 view .LVU1756
 5554 0426 AE42     		cmp	r6, r5
 5555 0428 04DD     		ble	.L476
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5556              		.loc 1 1725 44 discriminator 1 view .LVU1757
 5557 042a CAF10003 		rsb	r3, r10, #0
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5558              		.loc 1 1725 35 discriminator 1 view .LVU1758
 5559 042e AB42     		cmp	r3, r5
 5560 0430 40F3C681 		ble	.L477
 5561              	.L476:
1726:src/display.c **** 		else {
 5562              		.loc 1 1726 4 is_stmt 1 view .LVU1759
1726:src/display.c **** 		else {
 5563              		.loc 1 1726 24 is_stmt 0 view .LVU1760
 5564 0434 844B     		ldr	r3, .L672+4
 5565 0436 1B68     		ldr	r3, [r3]
 5566 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1726:src/display.c **** 		else {
 5567              		.loc 1 1726 33 view .LVU1761
 5568 043c 13F0100F 		tst	r3, #16
 5569 0440 14BF     		ite	ne
 5570 0442 0327     		movne	r7, #3
 5571              	.LVL597:
1726:src/display.c **** 		else {
 5572              		.loc 1 1726 33 view .LVU1762
 5573 0444 0227     		moveq	r7, #2
 5574 0446 0022     		movs	r2, #0
 5575 0448 7FE6     		b	.L475
 5576              	.LVL598:
 5577              	.L658:
1726:src/display.c **** 		else {
 5578              		.loc 1 1726 33 view .LVU1763
 5579 044a 013D     		subs	r5, r5, #1
 5580 044c 7219     		adds	r2, r6, r5
ARM GAS  /tmp/ccAnlOT7.s 			page 175


 5581              	.L468:
1705:src/display.c **** 			exp--;
 5582              		.loc 1 1705 3 is_stmt 1 discriminator 1 view .LVU1764
1706:src/display.c **** 		while (*++q == '0');
 5583              		.loc 1 1706 4 discriminator 1 view .LVU1765
 5584 044e 951B     		subs	r5, r2, r6
 5585              	.LVL599:
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5586              		.loc 1 1707 9 discriminator 1 view .LVU1766
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5587              		.loc 1 1707 10 is_stmt 0 discriminator 1 view .LVU1767
 5588 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5589              	.LVL600:
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5590              		.loc 1 1707 3 discriminator 1 view .LVU1768
 5591 0454 302B     		cmp	r3, #48
 5592 0456 FAD0     		beq	.L468
1708:src/display.c **** 			*p++ = *q++;
 5593              		.loc 1 1708 9 is_stmt 1 view .LVU1769
 5594 0458 A3F13002 		sub	r2, r3, #48
 5595 045c 092A     		cmp	r2, #9
 5596 045e 3FF66EAE 		bhi	.L469
1571:src/display.c **** 	char *r;
 5597              		.loc 1 1571 8 is_stmt 0 view .LVU1770
 5598 0462 4A46     		mov	r2, r9
 5599              	.LVL601:
 5600              	.L470:
1709:src/display.c **** 	} else {
 5601              		.loc 1 1709 4 is_stmt 1 view .LVU1771
1709:src/display.c **** 	} else {
 5602              		.loc 1 1709 9 is_stmt 0 view .LVU1772
 5603 0464 02F8013B 		strb	r3, [r2], #1
 5604              	.LVL602:
1708:src/display.c **** 			*p++ = *q++;
 5605              		.loc 1 1708 9 is_stmt 1 view .LVU1773
1708:src/display.c **** 			*p++ = *q++;
 5606              		.loc 1 1708 10 is_stmt 0 view .LVU1774
 5607 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1708:src/display.c **** 			*p++ = *q++;
 5608              		.loc 1 1708 9 view .LVU1775
 5609 046c A3F13001 		sub	r1, r3, #48
 5610 0470 0929     		cmp	r1, #9
 5611 0472 F7D9     		bls	.L470
 5612 0474 63E6     		b	.L469
 5613              	.LVL603:
 5614              	.L656:
1699:src/display.c **** 		q++;
 5615              		.loc 1 1699 3 is_stmt 1 view .LVU1776
1700:src/display.c **** 	} else if (*q == '+')
 5616              		.loc 1 1700 3 view .LVU1777
1699:src/display.c **** 		q++;
 5617              		.loc 1 1699 12 is_stmt 0 view .LVU1778
 5618 0476 4FF0010E 		mov	lr, #1
 5619 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1700:src/display.c **** 	} else if (*q == '+')
 5620              		.loc 1 1700 4 view .LVU1779
 5621 047c 7644     		add	r6, r6, lr
ARM GAS  /tmp/ccAnlOT7.s 			page 176


 5622              	.LVL604:
1700:src/display.c **** 	} else if (*q == '+')
 5623              		.loc 1 1700 4 view .LVU1780
 5624 047e 35E6     		b	.L464
 5625              	.LVL605:
 5626              	.L654:
1668:src/display.c **** 		trimzeros = 1;
 5627              		.loc 1 1668 3 is_stmt 1 view .LVU1781
1668:src/display.c **** 		trimzeros = 1;
 5628              		.loc 1 1668 10 is_stmt 0 view .LVU1782
 5629 0480 3046     		mov	r0, r6
 5630 0482 FFF7FEFF 		bl	std_round_fix
 5631              	.LVL606:
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5632              		.loc 1 1670 6 view .LVU1783
 5633 0486 009B     		ldr	r3, [sp]
 5634 0488 1D68     		ldr	r5, [r3]
1669:src/display.c **** 		dd = *display_digits - 1;
 5635              		.loc 1 1669 13 view .LVU1784
 5636 048a 0123     		movs	r3, #1
1668:src/display.c **** 		trimzeros = 1;
 5637              		.loc 1 1668 10 view .LVU1785
 5638 048c 0746     		mov	r7, r0
 5639              	.LVL607:
1669:src/display.c **** 		dd = *display_digits - 1;
 5640              		.loc 1 1669 3 is_stmt 1 view .LVU1786
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5641              		.loc 1 1670 3 view .LVU1787
1670:src/display.c **** 	} else if (dd >= *display_digits)
 5642              		.loc 1 1670 6 is_stmt 0 view .LVU1788
 5643 048e 05F1FF3A 		add	r10, r5, #-1
 5644              	.LVL608:
1669:src/display.c **** 		dd = *display_digits - 1;
 5645              		.loc 1 1669 13 view .LVU1789
 5646 0492 0193     		str	r3, [sp, #4]
 5647              	.LVL609:
1669:src/display.c **** 		dd = *display_digits - 1;
 5648              		.loc 1 1669 13 view .LVU1790
 5649 0494 00E6     		b	.L458
 5650              	.LVL610:
 5651              	.L662:
1919:src/display.c **** 		} else if (c == ',') {
 5652              		.loc 1 1919 4 is_stmt 1 view .LVU1791
1919:src/display.c **** 		} else if (c == ',') {
 5653              		.loc 1 1919 10 is_stmt 0 view .LVU1792
 5654 0496 2246     		mov	r2, r4
 5655              	.LVL611:
1919:src/display.c **** 		} else if (c == ',') {
 5656              		.loc 1 1919 10 view .LVU1793
 5657 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5658 049c 0193     		str	r3, [sp, #4]
 5659 049e A6F10900 		sub	r0, r6, #9
 5660 04a2 FFF7FEFF 		bl	set_decimal
 5661              	.LVL612:
 5662 04a6 019B     		ldr	r3, [sp, #4]
 5663 04a8 0446     		mov	r4, r0
 5664              	.LVL613:
ARM GAS  /tmp/ccAnlOT7.s 			page 177


 5665              	.L540:
1917:src/display.c **** 		if (c == '.') {
 5666              		.loc 1 1917 53 is_stmt 1 view .LVU1794
1917:src/display.c **** 		if (c == '.') {
 5667              		.loc 1 1917 12 view .LVU1795
1917:src/display.c **** 		if (c == '.') {
 5668              		.loc 1 1917 18 is_stmt 0 view .LVU1796
 5669 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5670              	.LVL614:
1917:src/display.c **** 		if (c == '.') {
 5671              		.loc 1 1917 2 view .LVU1797
 5672 04ae 002A     		cmp	r2, #0
 5673 04b0 7FF413AF 		bne	.L546
 5674 04b4 22E7     		b	.L645
 5675              	.L663:
1921:src/display.c **** 		} else {
 5676              		.loc 1 1921 4 is_stmt 1 view .LVU1798
1921:src/display.c **** 		} else {
 5677              		.loc 1 1921 10 is_stmt 0 view .LVU1799
 5678 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5679              	.LVL615:
 5680              	.LBB380:
 5681              	.LBI371:
 355:src/display.c **** 	if (sep == SEP_NONE)
 5682              		.loc 1 355 14 is_stmt 1 view .LVU1800
 5683              	.LBB374:
 356:src/display.c **** 		return res;
 5684              		.loc 1 356 2 view .LVU1801
 356:src/display.c **** 		return res;
 5685              		.loc 1 356 5 is_stmt 0 view .LVU1802
 5686 04ba 0029     		cmp	r1, #0
 5687 04bc F5D0     		beq	.L540
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5688              		.loc 1 358 2 is_stmt 1 view .LVU1803
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5689              		.loc 1 358 5 is_stmt 0 view .LVU1804
 5690 04be 002C     		cmp	r4, #0
 5691 04c0 00F0F281 		beq	.L542
 359:src/display.c **** 		else *res++ = '.';
 5692              		.loc 1 359 3 is_stmt 1 view .LVU1805
 359:src/display.c **** 		else *res++ = '.';
 5693              		.loc 1 359 6 is_stmt 0 view .LVU1806
 5694 04c4 0129     		cmp	r1, #1
 359:src/display.c **** 		else *res++ = '.';
 5695              		.loc 1 359 25 is_stmt 1 view .LVU1807
 5696              	.LVL616:
 360:src/display.c **** 	} else {
 5697              		.loc 1 360 8 view .LVU1808
 360:src/display.c **** 	} else {
 5698              		.loc 1 360 15 is_stmt 0 view .LVU1809
 5699 04c6 18BF     		it	ne
 5700 04c8 2E22     		movne	r2, #46
 5701              	.LVL617:
 360:src/display.c **** 	} else {
 5702              		.loc 1 360 15 view .LVU1810
 5703 04ca 04F8012B 		strb	r2, [r4], #1
 5704              	.LVL618:
ARM GAS  /tmp/ccAnlOT7.s 			page 178


 360:src/display.c **** 	} else {
 5705              		.loc 1 360 15 view .LVU1811
 5706 04ce ECE7     		b	.L540
 5707              	.LVL619:
 5708              	.L544:
 360:src/display.c **** 	} else {
 5709              		.loc 1 360 15 view .LVU1812
 5710              	.LBE374:
 5711              	.LBE380:
 5712              	.LBB381:
 5713              	.LBB379:
 397:src/display.c **** 	return res;
 5714              		.loc 1 397 7 view .LVU1813
 5715 04d0 1146     		mov	r1, r2
 5716 04d2 3046     		mov	r0, r6
 5717 04d4 0193     		str	r3, [sp, #4]
 397:src/display.c **** 	return res;
 5718              		.loc 1 397 7 is_stmt 1 view .LVU1814
 5719 04d6 FFF7FEFF 		bl	set_dig
 5720              	.LVL620:
 397:src/display.c **** 	return res;
 5721              		.loc 1 397 7 is_stmt 0 view .LVU1815
 5722 04da 019B     		ldr	r3, [sp, #4]
 5723 04dc 08E7     		b	.L545
 5724              	.LVL621:
 5725              	.L665:
 397:src/display.c **** 	return res;
 5726              		.loc 1 397 7 view .LVU1816
 5727              	.LBE379:
 5728              	.LBE381:
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5729              		.loc 1 1940 21 discriminator 1 view .LVU1817
 5730 04de 002C     		cmp	r4, #0
 5731 04e0 7FF418AF 		bne	.L548
1941:src/display.c **** 	*display_digits = odig;
 5732              		.loc 1 1941 3 is_stmt 1 view .LVU1818
1941:src/display.c **** 	*display_digits = odig;
 5733              		.loc 1 1941 32 is_stmt 0 view .LVU1819
 5734 04e4 009B     		ldr	r3, [sp]
 5735 04e6 1868     		ldr	r0, [r3]
1941:src/display.c **** 	*display_digits = odig;
 5736              		.loc 1 1941 3 view .LVU1820
 5737 04e8 594B     		ldr	r3, .L672+12
1941:src/display.c **** 	*display_digits = odig;
 5738              		.loc 1 1941 32 view .LVU1821
 5739 04ea 0138     		subs	r0, r0, #1
1941:src/display.c **** 	*display_digits = odig;
 5740              		.loc 1 1941 3 view .LVU1822
 5741 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5742 04ee 2246     		mov	r2, r4
 5743 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5744 04f4 FFF7FEFF 		bl	set_decimal
 5745              	.LVL622:
 5746 04f8 0CE7     		b	.L548
 5747              	.L664:
1938:src/display.c **** #endif
 5748              		.loc 1 1938 3 view .LVU1823
ARM GAS  /tmp/ccAnlOT7.s 			page 179


 5749 04fa 2846     		mov	r0, r5
 5750 04fc 2246     		mov	r2, r4
 5751 04fe 0021     		movs	r1, #0
 5752 0500 0193     		str	r3, [sp, #4]
1938:src/display.c **** #endif
 5753              		.loc 1 1938 3 is_stmt 1 view .LVU1824
 5754 0502 FFF7FEFF 		bl	set_exp
 5755              	.LVL623:
 5756 0506 019B     		ldr	r3, [sp, #4]
 5757 0508 FFE6     		b	.L547
 5758              	.LVL624:
 5759              	.L574:
1860:src/display.c **** 		case -1:
 5760              		.loc 1 1860 15 is_stmt 0 view .LVU1825
 5761 050a 0227     		movs	r7, #2
 5762 050c 4146     		mov	r1, r8
 5763              	.LVL625:
 5764              	.L531:
1869:src/display.c **** 			odig++;
 5765              		.loc 1 1869 4 is_stmt 1 view .LVU1826
1869:src/display.c **** 			odig++;
 5766              		.loc 1 1869 11 is_stmt 0 view .LVU1827
 5767 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5768              	.LVL626:
1869:src/display.c **** 			odig++;
 5769              		.loc 1 1869 11 view .LVU1828
 5770 0512 01F8013B 		strb	r3, [r1], #1
 5771              	.LVL627:
1870:src/display.c **** 			dd--;
 5772              		.loc 1 1870 4 is_stmt 1 view .LVU1829
1871:src/display.c **** 			exp--;
 5773              		.loc 1 1871 4 view .LVU1830
1871:src/display.c **** 			exp--;
 5774              		.loc 1 1871 6 is_stmt 0 view .LVU1831
 5775 0516 0AF1FF3A 		add	r10, r10, #-1
 5776              	.LVL628:
1872:src/display.c **** 		case 0:
 5777              		.loc 1 1872 4 is_stmt 1 view .LVU1832
1872:src/display.c **** 		case 0:
 5778              		.loc 1 1872 7 is_stmt 0 view .LVU1833
 5779 051a 013D     		subs	r5, r5, #1
 5780              	.LVL629:
1872:src/display.c **** 		case 0:
 5781              		.loc 1 1872 7 view .LVU1834
 5782 051c A5E6     		b	.L492
 5783              	.LVL630:
 5784              	.L487:
1758:src/display.c **** 
 5785              		.loc 1 1758 2 is_stmt 1 view .LVU1835
1758:src/display.c **** 
 5786              		.loc 1 1758 45 view .LVU1836
1758:src/display.c **** 
 5787              		.loc 1 1758 2 is_stmt 0 view .LVU1837
 5788 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5789 0522 002A     		cmp	r2, #0
 5790 0524 7FF43CAE 		bne	.L550
 5791              	.LVL631:
ARM GAS  /tmp/ccAnlOT7.s 			page 180


 5792              	.L494:
1823:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
 5793              		.loc 1 1823 3 is_stmt 1 view .LVU1838
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5794              		.loc 1 1824 3 view .LVU1839
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5795              		.loc 1 1824 6 is_stmt 0 view .LVU1840
 5796 0528 002D     		cmp	r5, #0
 5797 052a C0F21081 		blt	.L514
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
 5798              		.loc 1 1824 6 view .LVU1841
 5799 052e 6B1C     		adds	r3, r5, #1
1826:src/display.c **** 					*obp++ = ',';
 5800              		.loc 1 1826 28 view .LVU1842
 5801 0530 DFF818C1 		ldr	ip, .L672+8
 5802 0534 0293     		str	r3, [sp, #8]
 5803 0536 09EB0300 		add	r0, r9, r3
1760:src/display.c **** 	switch (mode) {
 5804              		.loc 1 1760 4 view .LVU1843
 5805 053a 4F46     		mov	r7, r9
1565:src/display.c **** 	int odig = 0;
 5806              		.loc 1 1565 15 view .LVU1844
 5807 053c 4146     		mov	r1, r8
 5808 053e 0394     		str	r4, [sp, #12]
 5809 0540 05E0     		b	.L515
 5810              	.LVL632:
 5811              	.L518:
1827:src/display.c **** 				*obp++ = *p++;
 5812              		.loc 1 1827 6 is_stmt 1 view .LVU1845
1826:src/display.c **** 					*obp++ = ',';
 5813              		.loc 1 1826 15 is_stmt 0 view .LVU1846
 5814 0542 022A     		cmp	r2, #2
1827:src/display.c **** 				*obp++ = *p++;
 5815              		.loc 1 1827 13 view .LVU1847
 5816 0544 05BF     		ittet	eq
 5817 0546 2C23     		moveq	r3, #44
 5818 0548 4B70     		strbeq	r3, [r1, #1]
1828:src/display.c **** 				odig++;
 5819              		.loc 1 1828 9 view .LVU1848
 5820 054a 0131     		addne	r1, r1, #1
 5821              	.LVL633:
1827:src/display.c **** 				*obp++ = *p++;
 5822              		.loc 1 1827 10 view .LVU1849
 5823 054c 0231     		addeq	r1, r1, #2
 5824              	.LVL634:
 5825              	.L515:
1828:src/display.c **** 				odig++;
 5826              		.loc 1 1828 5 is_stmt 1 discriminator 2 view .LVU1850
1828:src/display.c **** 				odig++;
 5827              		.loc 1 1828 12 is_stmt 0 discriminator 2 view .LVU1851
 5828 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5829              	.LVL635:
1826:src/display.c **** 					*obp++ = ',';
 5830              		.loc 1 1826 5 is_stmt 1 discriminator 2 view .LVU1852
1828:src/display.c **** 				odig++;
 5831              		.loc 1 1828 12 is_stmt 0 discriminator 2 view .LVU1853
 5832 0552 0B70     		strb	r3, [r1]
ARM GAS  /tmp/ccAnlOT7.s 			page 181


1829:src/display.c **** 			}
 5833              		.loc 1 1829 5 is_stmt 1 discriminator 2 view .LVU1854
 5834              	.LVL636:
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5835              		.loc 1 1825 22 discriminator 2 view .LVU1855
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5836              		.loc 1 1825 14 discriminator 2 view .LVU1856
1826:src/display.c **** 					*obp++ = ',';
 5837              		.loc 1 1826 28 is_stmt 0 discriminator 2 view .LVU1857
 5838 0554 A9EB0703 		sub	r3, r9, r7
 5839 0558 2B44     		add	r3, r3, r5
 5840 055a 8CFB0342 		smull	r4, r2, ip, r3
 5841 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5842 0562 02EB4202 		add	r2, r2, r2, lsl #1
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5843              		.loc 1 1825 4 discriminator 2 view .LVU1858
 5844 0566 B842     		cmp	r0, r7
1826:src/display.c **** 					*obp++ = ',';
 5845              		.loc 1 1826 28 discriminator 2 view .LVU1859
 5846 0568 A3EB0202 		sub	r2, r3, r2
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5847              		.loc 1 1825 4 discriminator 2 view .LVU1860
 5848 056c E9D1     		bne	.L518
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5849              		.loc 1 1831 11 view .LVU1861
 5850 056e 2E23     		movs	r3, #46
1832:src/display.c **** 				*obp++ = *p++;
 5851              		.loc 1 1832 4 view .LVU1862
 5852 0570 BAF1000F 		cmp	r10, #0
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5853              		.loc 1 1831 11 view .LVU1863
 5854 0574 4B70     		strb	r3, [r1, #1]
 5855 0576 039C     		ldr	r4, [sp, #12]
 5856 0578 029F     		ldr	r7, [sp, #8]
 5857              	.LVL637:
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5858              		.loc 1 1831 4 is_stmt 1 view .LVU1864
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5859              		.loc 1 1831 8 is_stmt 0 view .LVU1865
 5860 057a 01F10203 		add	r3, r1, #2
 5861              	.LVL638:
1832:src/display.c **** 				*obp++ = *p++;
 5862              		.loc 1 1832 4 is_stmt 1 view .LVU1866
1832:src/display.c **** 				*obp++ = *p++;
 5863              		.loc 1 1832 14 view .LVU1867
1832:src/display.c **** 				*obp++ = *p++;
 5864              		.loc 1 1832 4 is_stmt 0 view .LVU1868
 5865 057e 0CDD     		ble	.L519
 5866 0580 0131     		adds	r1, r1, #1
 5867 0582 00EB0A07 		add	r7, r0, r10
 5868              	.LVL639:
 5869              	.L520:
1833:src/display.c **** 				odig++;
 5870              		.loc 1 1833 5 is_stmt 1 discriminator 4 view .LVU1869
1833:src/display.c **** 				odig++;
 5871              		.loc 1 1833 12 is_stmt 0 discriminator 4 view .LVU1870
 5872 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 182


 5873              	.LVL640:
1833:src/display.c **** 				odig++;
 5874              		.loc 1 1833 12 discriminator 4 view .LVU1871
 5875 058a 01F8012F 		strb	r2, [r1, #1]!
1834:src/display.c **** 			}
 5876              		.loc 1 1834 5 is_stmt 1 discriminator 4 view .LVU1872
1832:src/display.c **** 				*obp++ = *p++;
 5877              		.loc 1 1832 41 discriminator 4 view .LVU1873
1832:src/display.c **** 				*obp++ = *p++;
 5878              		.loc 1 1832 14 discriminator 4 view .LVU1874
1832:src/display.c **** 				*obp++ = *p++;
 5879              		.loc 1 1832 4 is_stmt 0 discriminator 4 view .LVU1875
 5880 058e 8742     		cmp	r7, r0
 5881 0590 F9D1     		bne	.L520
 5882 0592 029A     		ldr	r2, [sp, #8]
 5883 0594 5244     		add	r2, r2, r10
 5884 0596 5344     		add	r3, r3, r10
 5885              	.LVL641:
1832:src/display.c **** 				*obp++ = *p++;
 5886              		.loc 1 1832 4 discriminator 4 view .LVU1876
 5887 0598 1746     		mov	r7, r2
 5888              	.LVL642:
 5889              	.L519:
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5890              		.loc 1 1851 3 is_stmt 1 view .LVU1877
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5891              		.loc 1 1851 6 is_stmt 0 view .LVU1878
 5892 059a 019A     		ldr	r2, [sp, #4]
 5893 059c 002A     		cmp	r2, #0
 5894 059e 40F0C480 		bne	.L525
1567:src/display.c **** 	int j;
 5895              		.loc 1 1567 6 view .LVU1879
 5896 05a2 9346     		mov	fp, r2
 5897 05a4 7CE6     		b	.L503
 5898              	.LVL643:
 5899              	.L651:
1628:src/display.c **** 		exp = z->exponent + z->digits - 1;
 5900              		.loc 1 1628 3 is_stmt 1 view .LVU1880
 5901 05a6 2B4A     		ldr	r2, .L672+16
 5902 05a8 3146     		mov	r1, r6
 5903 05aa 3046     		mov	r0, r6
 5904 05ac FFF7FEFF 		bl	decNumberNormalize
 5905              	.LVL644:
1629:src/display.c **** 		z->exponent = 0;
 5906              		.loc 1 1629 3 view .LVU1881
1629:src/display.c **** 		z->exponent = 0;
 5907              		.loc 1 1629 21 is_stmt 0 view .LVU1882
 5908 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5909 05b4 03EB020A 		add	r10, r3, r2
1629:src/display.c **** 		z->exponent = 0;
 5910              		.loc 1 1629 7 view .LVU1883
 5911 05b8 0AF1FF33 		add	r3, r10, #-1
1630:src/display.c **** 	}
 5912              		.loc 1 1630 15 view .LVU1884
 5913 05bc C6F804B0 		str	fp, [r6, #4]
1629:src/display.c **** 		z->exponent = 0;
 5914              		.loc 1 1629 7 view .LVU1885
ARM GAS  /tmp/ccAnlOT7.s 			page 183


 5915 05c0 0193     		str	r3, [sp, #4]
 5916              	.LVL645:
1630:src/display.c **** 	}
 5917              		.loc 1 1630 3 is_stmt 1 view .LVU1886
 5918 05c2 42E5     		b	.L442
 5919              	.LVL646:
 5920              	.L657:
1702:src/display.c **** 	for (; *q == '0'; q++);
 5921              		.loc 1 1702 3 view .LVU1887
1702:src/display.c **** 	for (; *q == '0'; q++);
 5922              		.loc 1 1702 3 is_stmt 0 view .LVU1888
 5923 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1585:src/display.c **** 	int trimzeros = 0;
 5924              		.loc 1 1585 6 view .LVU1889
 5925 05c6 4FF0000E 		mov	lr, #0
1702:src/display.c **** 	for (; *q == '0'; q++);
 5926              		.loc 1 1702 4 view .LVU1890
 5927 05ca 0136     		adds	r6, r6, #1
 5928              	.LVL647:
1702:src/display.c **** 	for (; *q == '0'; q++);
 5929              		.loc 1 1702 4 view .LVU1891
 5930 05cc 8EE5     		b	.L464
 5931              	.LVL648:
 5932              	.L659:
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5933              		.loc 1 1718 4 is_stmt 1 view .LVU1892
1719:src/display.c **** 				*p++ = *q++;
 5934              		.loc 1 1719 11 is_stmt 0 view .LVU1893
 5935 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1719:src/display.c **** 				*p++ = *q++;
 5936              		.loc 1 1719 10 view .LVU1894
 5937 05d0 A3F13002 		sub	r2, r3, #48
 5938 05d4 092A     		cmp	r2, #9
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5939              		.loc 1 1718 5 view .LVU1895
 5940 05d6 06F10106 		add	r6, r6, #1
 5941              	.LVL649:
1719:src/display.c **** 				*p++ = *q++;
 5942              		.loc 1 1719 4 is_stmt 1 view .LVU1896
1719:src/display.c **** 				*p++ = *q++;
 5943              		.loc 1 1719 10 view .LVU1897
 5944 05da 3FF6B0AD 		bhi	.L469
 5945              	.LVL650:
 5946              	.L474:
1720:src/display.c **** 		}
 5947              		.loc 1 1720 5 view .LVU1898
1720:src/display.c **** 		}
 5948              		.loc 1 1720 10 is_stmt 0 view .LVU1899
 5949 05de 01F8013B 		strb	r3, [r1], #1
 5950              	.LVL651:
1719:src/display.c **** 				*p++ = *q++;
 5951              		.loc 1 1719 10 is_stmt 1 view .LVU1900
1719:src/display.c **** 				*p++ = *q++;
 5952              		.loc 1 1719 11 is_stmt 0 view .LVU1901
 5953 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1719:src/display.c **** 				*p++ = *q++;
 5954              		.loc 1 1719 10 view .LVU1902
ARM GAS  /tmp/ccAnlOT7.s 			page 184


 5955 05e6 A3F13002 		sub	r2, r3, #48
 5956 05ea 092A     		cmp	r2, #9
 5957 05ec F7D9     		bls	.L474
 5958 05ee A6E5     		b	.L469
 5959              	.LVL652:
 5960              	.L652:
1636:src/display.c **** 			x[0] = '-';
 5961              		.loc 1 1636 33 discriminator 1 view .LVU1903
 5962 05f0 6B20     		movs	r0, #107
 5963 05f2 FFF7FEFF 		bl	get_user_flag
 5964              	.LVL653:
1636:src/display.c **** 			x[0] = '-';
 5965              		.loc 1 1636 30 discriminator 1 view .LVU1904
 5966 05f6 0028     		cmp	r0, #0
 5967 05f8 3FF439AD 		beq	.L444
1637:src/display.c **** 			x[1] = '0';
 5968              		.loc 1 1637 4 is_stmt 1 view .LVU1905
1638:src/display.c **** 		} else
 5969              		.loc 1 1638 4 view .LVU1906
1637:src/display.c **** 			x[1] = '0';
 5970              		.loc 1 1637 9 is_stmt 0 view .LVU1907
 5971 05fc 43F22D03 		movw	r3, #12333
 5972 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1638:src/display.c **** 		} else
 5973              		.loc 1 1638 9 view .LVU1908
 5974 0604 36E5     		b	.L445
 5975              	.LVL654:
 5976              	.L655:
1695:src/display.c **** 		CLR_MANT_SIGN;
 5977              		.loc 1 1695 3 is_stmt 1 view .LVU1909
 5978              	.LBB382:
 5979              	.LBI382:
 302:src/display.c **** {
 5980              		.loc 1 302 13 view .LVU1910
 5981              	.LBB383:
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5982              		.loc 1 304 2 view .LVU1911
 305:src/display.c **** }
 5983              		.loc 1 305 2 view .LVU1912
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5984              		.loc 1 304 26 is_stmt 0 view .LVU1913
 5985 0606 144B     		ldr	r3, .L672+20
 5986 0608 2022     		movs	r2, #32
 305:src/display.c **** }
 5987              		.loc 1 305 2 view .LVU1914
 5988 060a 8220     		movs	r0, #130
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 5989              		.loc 1 304 26 view .LVU1915
 5990 060c 1A70     		strb	r2, [r3]
 305:src/display.c **** }
 5991              		.loc 1 305 2 view .LVU1916
 5992 060e FFF7FEFF 		bl	clr_dot
 5993              	.LVL655:
 5994              	.LBE383:
 5995              	.LBE382:
1696:src/display.c **** 	}
 5996              		.loc 1 1696 3 is_stmt 1 view .LVU1917
ARM GAS  /tmp/ccAnlOT7.s 			page 185


 5997              	.LBB384:
 5998              	.LBI384:
 290:src/display.c **** {
 5999              		.loc 1 290 13 view .LVU1918
 6000              	.LBB385:
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 6001              		.loc 1 292 2 view .LVU1919
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 6002              		.loc 1 292 24 is_stmt 0 view .LVU1920
 6003 0612 124B     		ldr	r3, .L672+24
 6004 0614 2022     		movs	r2, #32
 293:src/display.c **** }
 6005              		.loc 1 293 2 view .LVU1921
 6006 0616 8120     		movs	r0, #129
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 6007              		.loc 1 292 24 view .LVU1922
 6008 0618 1A70     		strb	r2, [r3]
 293:src/display.c **** }
 6009              		.loc 1 293 2 is_stmt 1 view .LVU1923
 6010 061a FFF7FEFF 		bl	clr_dot
 6011              	.LVL656:
 294:src/display.c **** 
 6012              		.loc 1 294 1 is_stmt 0 view .LVU1924
 6013 061e 5CE5     		b	.L462
 6014              	.LVL657:
 6015              	.L535:
 294:src/display.c **** 
 6016              		.loc 1 294 1 view .LVU1925
 6017              	.LBE385:
 6018              	.LBE384:
1911:src/display.c **** 				SET_MANT_SIGN;
 6019              		.loc 1 1911 4 is_stmt 1 view .LVU1926
 6020 0620 0193     		str	r3, [sp, #4]
1911:src/display.c **** 				SET_MANT_SIGN;
 6021              		.loc 1 1911 7 is_stmt 0 view .LVU1927
 6022 0622 002E     		cmp	r6, #0
 6023 0624 40F00281 		bne	.L538
1912:src/display.c **** 			else
 6024              		.loc 1 1912 5 is_stmt 1 view .LVU1928
 6025              	.LBB386:
 6026              	.LBI386:
 284:src/display.c **** {
 6027              		.loc 1 284 13 view .LVU1929
 6028              	.LBB387:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6029              		.loc 1 286 2 view .LVU1930
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6030              		.loc 1 286 24 is_stmt 0 view .LVU1931
 6031 0628 0C4A     		ldr	r2, .L672+24
 6032 062a 2D21     		movs	r1, #45
 287:src/display.c **** }
 6033              		.loc 1 287 2 view .LVU1932
 6034 062c 8120     		movs	r0, #129
 286:src/display.c **** 	set_dot(MANT_SIGN);
 6035              		.loc 1 286 24 view .LVU1933
 6036 062e 1170     		strb	r1, [r2]
 287:src/display.c **** }
ARM GAS  /tmp/ccAnlOT7.s 			page 186


 6037              		.loc 1 287 2 is_stmt 1 view .LVU1934
 6038 0630 FFF7FEFF 		bl	set_dot
 6039              	.LVL658:
 287:src/display.c **** }
 6040              		.loc 1 287 2 is_stmt 0 view .LVU1935
 6041              	.LBE387:
 6042              	.LBE386:
1917:src/display.c **** 		if (c == '.') {
 6043              		.loc 1 1917 12 is_stmt 1 view .LVU1936
1917:src/display.c **** 		if (c == '.') {
 6044              		.loc 1 1917 18 is_stmt 0 view .LVU1937
 6045 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6046              	.LVL659:
1917:src/display.c **** 		if (c == '.') {
 6047              		.loc 1 1917 2 view .LVU1938
 6048 0638 019B     		ldr	r3, [sp, #4]
 6049 063a 002A     		cmp	r2, #0
 6050 063c 7FF446AE 		bne	.L537
 6051 0640 5FE6     		b	.L536
 6052              	.L673:
 6053 0642 00BF     		.align	2
 6054              	.L672:
 6055 0644 00000000 		.word	StateWhileOn
 6056 0648 00000000 		.word	main_ram
 6057 064c 56555555 		.word	1431655766
 6058 0650 00000000 		.word	.LANCHOR1
 6059 0654 00000000 		.word	Ctx
 6060 0658 00000000 		.word	LastDisplayedExponent
 6061 065c 00000000 		.word	LastDisplayedNumber
 6062              	.LVL660:
 6063              	.L653:
1645:src/display.c **** 		return;
 6064              		.loc 1 1645 3 is_stmt 1 view .LVU1939
 6065              	.LBB388:
 6066              	.LBI388:
1433:src/display.c **** 	const int dbl = is_dblmode();
 6067              		.loc 1 1433 13 view .LVU1940
 6068              	.LBB389:
1434:src/display.c **** 	char *p;
 6069              		.loc 1 1434 2 view .LVU1941
1434:src/display.c **** 	char *p;
 6070              		.loc 1 1434 18 is_stmt 0 view .LVU1942
 6071 0660 FFF7FEFF 		bl	is_dblmode
 6072              	.LVL661:
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6073              		.loc 1 1450 5 view .LVU1943
 6074 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6075 0668 2D2B     		cmp	r3, #45
1434:src/display.c **** 	char *p;
 6076              		.loc 1 1434 18 view .LVU1944
 6077 066a 0446     		mov	r4, r0
 6078              	.LVL662:
1435:src/display.c **** 	int i, j;
 6079              		.loc 1 1435 2 is_stmt 1 view .LVU1945
1436:src/display.c **** 	char *upper_str;
 6080              		.loc 1 1436 2 view .LVU1946
1437:src/display.c **** 	enum separator_modes separator_mode;
ARM GAS  /tmp/ccAnlOT7.s 			page 187


 6081              		.loc 1 1437 2 view .LVU1947
1438:src/display.c **** 	char decimal_mark;
 6082              		.loc 1 1438 2 view .LVU1948
1439:src/display.c **** 	char thousands_sep;
 6083              		.loc 1 1439 2 view .LVU1949
1440:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6084              		.loc 1 1440 2 view .LVU1950
1446:src/display.c **** #endif
 6085              		.loc 1 1446 2 view .LVU1951
1448:src/display.c **** 
 6086              		.loc 1 1448 2 view .LVU1952
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6087              		.loc 1 1450 2 view .LVU1953
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6088              		.loc 1 1450 5 is_stmt 0 view .LVU1954
 6089 066c 00F02A81 		beq	.L668
1463:src/display.c **** 
 6090              		.loc 1 1463 16 view .LVU1955
 6091 0670 0026     		movs	r6, #0
 6092              	.LVL663:
 6093              	.L447:
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6094              		.loc 1 1465 2 is_stmt 1 view .LVU1956
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6095              		.loc 1 1465 6 is_stmt 0 view .LVU1957
 6096 0672 0021     		movs	r1, #0
 6097 0674 4046     		mov	r0, r8
 6098 0676 FFF7FEFF 		bl	find_char
 6099              	.LVL664:
1466:src/display.c **** 
 6100              		.loc 1 1466 2 is_stmt 1 view .LVU1958
1466:src/display.c **** 
 6101              		.loc 1 1466 23 is_stmt 0 view .LVU1959
 6102 067a A0EB0802 		sub	r2, r0, r8
1466:src/display.c **** 
 6103              		.loc 1 1466 2 view .LVU1960
 6104 067e C2F12202 		rsb	r2, r2, #34
 6105 0682 3021     		movs	r1, #48
 6106 0684 FFF7FEFF 		bl	xset
 6107              	.LVL665:
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6108              		.loc 1 1468 2 is_stmt 1 view .LVU1961
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6109              		.loc 1 1468 18 is_stmt 0 view .LVU1962
 6110 0688 B14A     		ldr	r2, .L674
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6111              		.loc 1 1479 6 view .LVU1963
 6112 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1468:src/display.c **** 		separator_mode = SEP_COMMA;
 6113              		.loc 1 1468 5 view .LVU1964
 6114 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1476:src/display.c **** 	}
 6115              		.loc 1 1476 17 view .LVU1965
 6116 0690 002A     		cmp	r2, #0
 6117 0692 15BF     		itete	ne
 6118 0694 4FF0020A 		movne	r10, #2
 6119 0698 2C27     		moveq	r7, #44
ARM GAS  /tmp/ccAnlOT7.s 			page 188


 6120 069a 2E27     		movne	r7, #46
 6121              	.LVL666:
1476:src/display.c **** 	}
 6122              		.loc 1 1476 17 view .LVU1966
 6123 069c 2E25     		moveq	r5, #46
 6124 069e 18BF     		it	ne
 6125 06a0 2C25     		movne	r5, #44
 6126              	.LVL667:
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6127              		.loc 1 1479 2 is_stmt 1 view .LVU1967
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6128              		.loc 1 1479 5 is_stmt 0 view .LVU1968
 6129 06a2 13F0380F 		tst	r3, #56
 6130 06a6 40F0C880 		bne	.L669
1506:src/display.c **** 		xcopy(x + 2, x + 1, 16);
 6131              		.loc 1 1506 3 is_stmt 1 view .LVU1969
 6132              	.LVL668:
1507:src/display.c **** 		x[1] = decimal_mark;
 6133              		.loc 1 1507 3 view .LVU1970
 6134 06aa 1022     		movs	r2, #16
 6135 06ac 08F10101 		add	r1, r8, #1
 6136 06b0 08F10200 		add	r0, r8, #2
 6137 06b4 FFF7FEFF 		bl	xcopy
 6138              	.LVL669:
1508:src/display.c **** 		if (grouping) {
 6139              		.loc 1 1508 3 view .LVU1971
1510:src/display.c **** 			x[5] = thousands_sep;
 6140              		.loc 1 1510 4 is_stmt 0 view .LVU1972
 6141 06b8 0D22     		movs	r2, #13
 6142 06ba 08F10501 		add	r1, r8, #5
 6143 06be 08F10600 		add	r0, r8, #6
1508:src/display.c **** 		if (grouping) {
 6144              		.loc 1 1508 8 view .LVU1973
 6145 06c2 88F80150 		strb	r5, [r8, #1]
1509:src/display.c **** 			xcopy(x + 6, x + 5, 13);
 6146              		.loc 1 1509 3 is_stmt 1 view .LVU1974
1510:src/display.c **** 			x[5] = thousands_sep;
 6147              		.loc 1 1510 4 view .LVU1975
 6148 06c6 FFF7FEFF 		bl	xcopy
 6149              	.LVL670:
1511:src/display.c **** 			x += 9;
 6150              		.loc 1 1511 4 view .LVU1976
1512:src/display.c **** 		}
 6151              		.loc 1 1512 6 is_stmt 0 view .LVU1977
 6152 06ca 08F10905 		add	r5, r8, #9
 6153              	.LVL671:
1511:src/display.c **** 			x += 9;
 6154              		.loc 1 1511 9 view .LVU1978
 6155 06ce 88F80570 		strb	r7, [r8, #5]
1512:src/display.c **** 		}
 6156              		.loc 1 1512 4 is_stmt 1 view .LVU1979
 6157              	.LVL672:
1515:src/display.c **** 			if (exp < 0) {
 6158              		.loc 1 1515 3 view .LVU1980
1515:src/display.c **** 			if (exp < 0) {
 6159              		.loc 1 1515 6 is_stmt 0 view .LVU1981
 6160 06d2 002C     		cmp	r4, #0
ARM GAS  /tmp/ccAnlOT7.s 			page 189


 6161 06d4 00F0F380 		beq	.L451
1516:src/display.c **** 				x[9] = '-';
 6162              		.loc 1 1516 4 is_stmt 1 view .LVU1982
1516:src/display.c **** 				x[9] = '-';
 6163              		.loc 1 1516 7 is_stmt 0 view .LVU1983
 6164 06d8 019B     		ldr	r3, [sp, #4]
1524:src/display.c **** 		}
 6165              		.loc 1 1524 16 view .LVU1984
 6166 06da 9E49     		ldr	r1, .L674+4
1516:src/display.c **** 				x[9] = '-';
 6167              		.loc 1 1516 7 view .LVU1985
 6168 06dc 002B     		cmp	r3, #0
1517:src/display.c **** 				exp = -exp;
 6169              		.loc 1 1517 5 is_stmt 1 view .LVU1986
1518:src/display.c **** 			}
 6170              		.loc 1 1518 5 view .LVU1987
1518:src/display.c **** 			}
 6171              		.loc 1 1518 9 is_stmt 0 view .LVU1988
 6172 06de BCBF     		itt	lt
 6173 06e0 5B42     		rsblt	r3, r3, #0
 6174 06e2 0193     		strlt	r3, [sp, #4]
 6175              	.LVL673:
1522:src/display.c **** 			x[10] = '0' + j;
 6176              		.loc 1 1522 6 view .LVU1989
 6177 06e4 0198     		ldr	r0, [sp, #4]
 6178 06e6 9C4B     		ldr	r3, .L674+8
1517:src/display.c **** 				exp = -exp;
 6179              		.loc 1 1517 10 view .LVU1990
 6180 06e8 B4BF     		ite	lt
 6181 06ea 2D22     		movlt	r2, #45
1521:src/display.c **** 			j = exp / 1000;
 6182              		.loc 1 1521 10 view .LVU1991
 6183 06ec 2022     		movge	r2, #32
 6184 06ee 88F81220 		strb	r2, [r8, #18]
1522:src/display.c **** 			x[10] = '0' + j;
 6185              		.loc 1 1522 4 is_stmt 1 view .LVU1992
1522:src/display.c **** 			x[10] = '0' + j;
 6186              		.loc 1 1522 6 is_stmt 0 view .LVU1993
 6187 06f2 0246     		mov	r2, r0
 6188 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6189 06f8 9B09     		lsrs	r3, r3, #6
 6190              	.LVL674:
1523:src/display.c **** 			exp -= 1000 * j;
 6191              		.loc 1 1523 4 is_stmt 1 view .LVU1994
1523:src/display.c **** 			exp -= 1000 * j;
 6192              		.loc 1 1523 16 is_stmt 0 view .LVU1995
 6193 06fa 03F13002 		add	r2, r3, #48
1524:src/display.c **** 		}
 6194              		.loc 1 1524 8 view .LVU1996
 6195 06fe 01FB0303 		mla	r3, r1, r3, r0
 6196              	.LVL675:
1524:src/display.c **** 		}
 6197              		.loc 1 1524 8 view .LVU1997
 6198 0702 0193     		str	r3, [sp, #4]
 6199              	.LVL676:
1523:src/display.c **** 			exp -= 1000 * j;
 6200              		.loc 1 1523 10 view .LVU1998
ARM GAS  /tmp/ccAnlOT7.s 			page 190


 6201 0704 88F81320 		strb	r2, [r8, #19]
1524:src/display.c **** 		}
 6202              		.loc 1 1524 4 is_stmt 1 view .LVU1999
 6203              	.LVL677:
 6204              	.L453:
1530:src/display.c **** 		*x = 0;
 6205              		.loc 1 1530 3 view .LVU2000
 6206 0708 0B22     		movs	r2, #11
 6207 070a 2946     		mov	r1, r5
 6208 070c 08F10A00 		add	r0, r8, #10
 6209 0710 FFF7FEFF 		bl	xcopy
 6210              	.LVL678:
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6211              		.loc 1 1531 3 view .LVU2001
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6212              		.loc 1 1531 6 is_stmt 0 view .LVU2002
 6213 0714 0022     		movs	r2, #0
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6214              		.loc 1 1532 3 view .LVU2003
 6215 0716 0198     		ldr	r0, [sp, #4]
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
 6216              		.loc 1 1531 6 view .LVU2004
 6217 0718 88F80920 		strb	r2, [r8, #9]
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6218              		.loc 1 1532 3 is_stmt 1 view .LVU2005
 6219 071c 0121     		movs	r1, #1
 6220 071e FFF7FEFF 		bl	set_exp
 6221              	.LVL679:
1533:src/display.c **** 	}
 6222              		.loc 1 1533 3 view .LVU2006
1533:src/display.c **** 	}
 6223              		.loc 1 1533 3 is_stmt 0 view .LVU2007
 6224 0722 A8EB0606 		sub	r6, r8, r6
 6225              	.LVL680:
1533:src/display.c **** 	}
 6226              		.loc 1 1533 5 view .LVU2008
 6227 0726 0924     		movs	r4, #9
 6228              	.LVL681:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6229              		.loc 1 1536 10 is_stmt 1 view .LVU2009
 6230 0728 9AE0     		b	.L454
 6231              	.LVL682:
 6232              	.L525:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6233              		.loc 1 1536 10 is_stmt 0 view .LVU2010
 6234              	.LBE389:
 6235              	.LBE388:
1852:src/display.c **** 				obp--;
 6236              		.loc 1 1852 10 is_stmt 1 view .LVU2011
 6237 072a 4345     		cmp	r3, r8
 6238 072c 88BF     		it	hi
 6239 072e 1A46     		movhi	r2, r3
 6240 0730 7FF6B6AD 		bls	.L503
 6241              	.L527:
1853:src/display.c **** 				odig--;
 6242              		.loc 1 1853 5 discriminator 1 view .LVU2012
 6243 0734 1346     		mov	r3, r2
ARM GAS  /tmp/ccAnlOT7.s 			page 191


 6244              	.LVL683:
1853:src/display.c **** 				odig--;
 6245              		.loc 1 1853 5 is_stmt 0 discriminator 1 view .LVU2013
 6246 0736 013A     		subs	r2, r2, #1
 6247              	.LVL684:
1854:src/display.c **** 			}
 6248              		.loc 1 1854 5 is_stmt 1 discriminator 1 view .LVU2014
1852:src/display.c **** 				obp--;
 6249              		.loc 1 1852 19 is_stmt 0 discriminator 1 view .LVU2015
 6250 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6251 073c 3029     		cmp	r1, #48
 6252 073e 7FF4AFAD 		bne	.L503
1852:src/display.c **** 				obp--;
 6253              		.loc 1 1852 10 view .LVU2016
 6254 0742 9045     		cmp	r8, r2
1854:src/display.c **** 			}
 6255              		.loc 1 1854 9 view .LVU2017
 6256 0744 07F1FF37 		add	r7, r7, #-1
 6257              	.LVL685:
1852:src/display.c **** 				obp--;
 6258              		.loc 1 1852 10 is_stmt 1 view .LVU2018
 6259 0748 F4D1     		bne	.L527
 6260 074a 4346     		mov	r3, r8
 6261 074c A8E5     		b	.L503
 6262              	.LVL686:
 6263              	.L514:
1837:src/display.c **** 			odig++;
 6264              		.loc 1 1837 4 view .LVU2019
1838:src/display.c **** 			*obp++ = '.';
 6265              		.loc 1 1838 4 view .LVU2020
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6266              		.loc 1 1839 4 view .LVU2021
1837:src/display.c **** 			odig++;
 6267              		.loc 1 1837 11 is_stmt 0 view .LVU2022
 6268 074e 42F63063 		movw	r3, #11824
 6269 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
1840:src/display.c **** 				*obp++ = '0';
 6270              		.loc 1 1840 4 is_stmt 1 view .LVU2023
 6271              	.LVL687:
1840:src/display.c **** 				*obp++ = '0';
 6272              		.loc 1 1840 18 view .LVU2024
1840:src/display.c **** 				*obp++ = '0';
 6273              		.loc 1 1840 4 is_stmt 0 view .LVU2025
 6274 0756 6B1C     		adds	r3, r5, #1
 6275              	.LVL688:
1840:src/display.c **** 				*obp++ = '0';
 6276              		.loc 1 1840 4 view .LVU2026
 6277 0758 00F0F280 		beq	.L572
 6278 075c C5F10101 		rsb	r1, r5, #1
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6279              		.loc 1 1839 8 view .LVU2027
 6280 0760 0DF11603 		add	r3, sp, #22
 6281              	.LVL689:
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6282              		.loc 1 1839 8 view .LVU2028
 6283 0764 4144     		add	r1, r1, r8
 6284 0766 1A46     		mov	r2, r3
ARM GAS  /tmp/ccAnlOT7.s 			page 192


1841:src/display.c **** 				odig++;
 6285              		.loc 1 1841 12 view .LVU2029
 6286 0768 3020     		movs	r0, #48
 6287              	.LVL690:
 6288              	.L523:
1841:src/display.c **** 				odig++;
 6289              		.loc 1 1841 5 is_stmt 1 discriminator 3 view .LVU2030
1841:src/display.c **** 				odig++;
 6290              		.loc 1 1841 12 is_stmt 0 discriminator 3 view .LVU2031
 6291 076a 02F8010B 		strb	r0, [r2], #1
 6292              	.LVL691:
1842:src/display.c **** 				dd--;
 6293              		.loc 1 1842 5 is_stmt 1 discriminator 3 view .LVU2032
1843:src/display.c **** 			}
 6294              		.loc 1 1843 5 discriminator 3 view .LVU2033
1840:src/display.c **** 				*obp++ = '0';
 6295              		.loc 1 1840 23 discriminator 3 view .LVU2034
1840:src/display.c **** 				*obp++ = '0';
 6296              		.loc 1 1840 18 discriminator 3 view .LVU2035
1840:src/display.c **** 				*obp++ = '0';
 6297              		.loc 1 1840 4 is_stmt 0 discriminator 3 view .LVU2036
 6298 076e 8A42     		cmp	r2, r1
 6299 0770 FBD1     		bne	.L523
 6300 0772 AA44     		add	r10, r10, r5
 6301 0774 EA43     		mvns	r2, r5
 6302              	.LVL692:
1840:src/display.c **** 				*obp++ = '0';
 6303              		.loc 1 1840 4 discriminator 3 view .LVU2037
 6304 0776 0AF1010A 		add	r10, r10, #1
 6305 077a 1344     		add	r3, r3, r2
 6306 077c 6F42     		rsbs	r7, r5, #0
 6307              	.L522:
 6308              	.LVL693:
1845:src/display.c **** 				*obp++ = *p++;
 6309              		.loc 1 1845 10 is_stmt 1 view .LVU2038
 6310 077e BAF1000F 		cmp	r10, #0
1845:src/display.c **** 				*obp++ = *p++;
 6311              		.loc 1 1845 13 is_stmt 0 view .LVU2039
 6312 0782 0AF1FF32 		add	r2, r10, #-1
 6313              	.LVL694:
1845:src/display.c **** 				*obp++ = *p++;
 6314              		.loc 1 1845 10 view .LVU2040
 6315 0786 7FF708AF 		ble	.L519
 6316 078a 9A44     		add	r10, r10, r3
 6317 078c 0AF1FF30 		add	r0, r10, #-1
 6318 0790 013B     		subs	r3, r3, #1
 6319              	.LVL695:
 6320              	.L524:
1846:src/display.c **** 				odig++;
 6321              		.loc 1 1846 5 is_stmt 1 view .LVU2041
1846:src/display.c **** 				odig++;
 6322              		.loc 1 1846 12 is_stmt 0 view .LVU2042
 6323 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6324              	.LVL696:
1846:src/display.c **** 				odig++;
 6325              		.loc 1 1846 12 view .LVU2043
 6326 0796 03F8011F 		strb	r1, [r3, #1]!
ARM GAS  /tmp/ccAnlOT7.s 			page 193


1847:src/display.c **** 			}
 6327              		.loc 1 1847 5 is_stmt 1 view .LVU2044
1845:src/display.c **** 				*obp++ = *p++;
 6328              		.loc 1 1845 10 view .LVU2045
1845:src/display.c **** 				*obp++ = *p++;
 6329              		.loc 1 1845 10 is_stmt 0 view .LVU2046
 6330 079a 8342     		cmp	r3, r0
 6331 079c F9D1     		bne	.L524
 6332              	.LVL697:
1845:src/display.c **** 				*obp++ = *p++;
 6333              		.loc 1 1845 10 view .LVU2047
 6334 079e 0137     		adds	r7, r7, #1
 6335 07a0 1744     		add	r7, r7, r2
 6336 07a2 5346     		mov	r3, r10
 6337 07a4 F9E6     		b	.L519
 6338              	.LVL698:
 6339              	.L529:
1863:src/display.c **** 			odig++;
 6340              		.loc 1 1863 4 is_stmt 1 view .LVU2048
1863:src/display.c **** 			odig++;
 6341              		.loc 1 1863 11 is_stmt 0 view .LVU2049
 6342 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6343 07aa 8DF81430 		strb	r3, [sp, #20]
1864:src/display.c **** 			dd--;
 6344              		.loc 1 1864 4 is_stmt 1 view .LVU2050
 6345              	.LVL699:
1865:src/display.c **** 			exp--;
 6346              		.loc 1 1865 4 view .LVU2051
1865:src/display.c **** 			exp--;
 6347              		.loc 1 1865 6 is_stmt 0 view .LVU2052
 6348 07ae 0AF1FF3A 		add	r10, r10, #-1
 6349              	.LVL700:
1866:src/display.c **** 		case -2:
 6350              		.loc 1 1866 4 is_stmt 1 view .LVU2053
1866:src/display.c **** 		case -2:
 6351              		.loc 1 1866 7 is_stmt 0 view .LVU2054
 6352 07b2 013D     		subs	r5, r5, #1
 6353              	.LVL701:
1866:src/display.c **** 		case -2:
 6354              		.loc 1 1866 7 view .LVU2055
 6355 07b4 0327     		movs	r7, #3
1863:src/display.c **** 			odig++;
 6356              		.loc 1 1863 15 view .LVU2056
 6357 07b6 0DF14909 		add	r9, sp, #73
 6358              	.LVL702:
1863:src/display.c **** 			odig++;
 6359              		.loc 1 1863 8 view .LVU2057
 6360 07ba 0DF11501 		add	r1, sp, #21
 6361              	.LVL703:
1863:src/display.c **** 			odig++;
 6362              		.loc 1 1863 8 view .LVU2058
 6363 07be A6E6     		b	.L531
 6364              	.LVL704:
 6365              	.L477:
1728:src/display.c **** 			/* We might have push the fixed decimals off the
 6366              		.loc 1 1728 4 is_stmt 1 view .LVU2059
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
ARM GAS  /tmp/ccAnlOT7.s 			page 194


 6367              		.loc 1 1732 4 view .LVU2060
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6368              		.loc 1 1732 21 is_stmt 0 view .LVU2061
 6369 07c0 05EB0A03 		add	r3, r5, r10
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6370              		.loc 1 1732 7 view .LVU2062
 6371 07c4 9E42     		cmp	r6, r3
1733:src/display.c **** 		}
 6372              		.loc 1 1733 5 is_stmt 1 view .LVU2063
1733:src/display.c **** 		}
 6373              		.loc 1 1733 27 is_stmt 0 view .LVU2064
 6374 07c6 DCBF     		itt	le
 6375 07c8 06F1FF3A 		addle	r10, r6, #-1
 6376              	.LVL705:
1733:src/display.c **** 		}
 6377              		.loc 1 1733 8 view .LVU2065
 6378 07cc AAEB050A 		suble	r10, r10, r5
 6379              	.LVL706:
1733:src/display.c **** 		}
 6380              		.loc 1 1733 8 view .LVU2066
 6381 07d0 2A46     		mov	r2, r5
 6382 07d2 BAE4     		b	.L475
 6383              	.LVL707:
 6384              	.L569:
1769:src/display.c **** 			case -1:
 6385              		.loc 1 1769 22 view .LVU2067
 6386 07d4 0227     		movs	r7, #2
 6387 07d6 4046     		mov	r0, r8
 6388              	.LVL708:
 6389              	.L502:
1778:src/display.c **** 				odig++;
 6390              		.loc 1 1778 5 is_stmt 1 view .LVU2068
1778:src/display.c **** 				odig++;
 6391              		.loc 1 1778 12 is_stmt 0 view .LVU2069
 6392 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6393              	.LVL709:
1778:src/display.c **** 				odig++;
 6394              		.loc 1 1778 12 view .LVU2070
 6395 07dc 00F8013B 		strb	r3, [r0], #1
 6396              	.LVL710:
1779:src/display.c **** 				dd--;
 6397              		.loc 1 1779 5 is_stmt 1 view .LVU2071
1780:src/display.c **** 				exp--;
 6398              		.loc 1 1780 5 view .LVU2072
1781:src/display.c **** 			case 0:
 6399              		.loc 1 1781 5 view .LVU2073
1781:src/display.c **** 			case 0:
 6400              		.loc 1 1781 8 is_stmt 0 view .LVU2074
 6401 07e0 013D     		subs	r5, r5, #1
 6402              	.LVL711:
 6403              	.L499:
1783:src/display.c **** 			};
 6404              		.loc 1 1783 5 is_stmt 1 view .LVU2075
1784:src/display.c **** 			*obp++ = *p++;
 6405              		.loc 1 1784 5 view .LVU2076
1785:src/display.c **** 			odig++;
 6406              		.loc 1 1785 4 view .LVU2077
ARM GAS  /tmp/ccAnlOT7.s 			page 195


1785:src/display.c **** 			odig++;
 6407              		.loc 1 1785 15 is_stmt 0 view .LVU2078
 6408 07e2 4946     		mov	r1, r9
 6409              	.LVL712:
1785:src/display.c **** 			odig++;
 6410              		.loc 1 1785 11 view .LVU2079
 6411 07e4 0346     		mov	r3, r0
 6412 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6413              	.LVL713:
1785:src/display.c **** 			odig++;
 6414              		.loc 1 1785 11 view .LVU2080
 6415 07ea 03F802CB 		strb	ip, [r3], #2
1786:src/display.c **** 			*obp++ = '.';
 6416              		.loc 1 1786 4 is_stmt 1 view .LVU2081
1787:src/display.c **** 			for (i=1; i<count; i++) {
 6417              		.loc 1 1787 4 view .LVU2082
 6418              	.LVL714:
1788:src/display.c **** 				*obp++ = *p++;
 6419              		.loc 1 1788 4 is_stmt 0 view .LVU2083
 6420 07ee 012A     		cmp	r2, #1
1787:src/display.c **** 			for (i=1; i<count; i++) {
 6421              		.loc 1 1787 11 view .LVU2084
 6422 07f0 4FF02E0C 		mov	ip, #46
 6423 07f4 80F801C0 		strb	ip, [r0, #1]
1788:src/display.c **** 				*obp++ = *p++;
 6424              		.loc 1 1788 4 is_stmt 1 view .LVU2085
 6425              	.LVL715:
1788:src/display.c **** 				*obp++ = *p++;
 6426              		.loc 1 1788 14 view .LVU2086
1788:src/display.c **** 				*obp++ = *p++;
 6427              		.loc 1 1788 4 is_stmt 0 view .LVU2087
 6428 07f8 53DD     		ble	.L570
1788:src/display.c **** 				*obp++ = *p++;
 6429              		.loc 1 1788 4 view .LVU2088
 6430 07fa 0130     		adds	r0, r0, #1
 6431 07fc 9144     		add	r9, r9, r2
 6432              	.LVL716:
 6433              	.L504:
1789:src/display.c **** 				odig++;
 6434              		.loc 1 1789 5 is_stmt 1 discriminator 3 view .LVU2089
1789:src/display.c **** 				odig++;
 6435              		.loc 1 1789 12 is_stmt 0 discriminator 3 view .LVU2090
 6436 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6437              	.LVL717:
1789:src/display.c **** 				odig++;
 6438              		.loc 1 1789 12 discriminator 3 view .LVU2091
 6439 0802 00F801CF 		strb	ip, [r0, #1]!
1790:src/display.c **** 			}
 6440              		.loc 1 1790 5 is_stmt 1 discriminator 3 view .LVU2092
1788:src/display.c **** 				*obp++ = *p++;
 6441              		.loc 1 1788 23 discriminator 3 view .LVU2093
1788:src/display.c **** 				*obp++ = *p++;
 6442              		.loc 1 1788 14 discriminator 3 view .LVU2094
1788:src/display.c **** 				*obp++ = *p++;
 6443              		.loc 1 1788 4 is_stmt 0 discriminator 3 view .LVU2095
 6444 0806 4945     		cmp	r1, r9
 6445 0808 F9D1     		bne	.L504
ARM GAS  /tmp/ccAnlOT7.s 			page 196


 6446 080a 013A     		subs	r2, r2, #1
 6447              	.LVL718:
1788:src/display.c **** 				*obp++ = *p++;
 6448              		.loc 1 1788 4 discriminator 3 view .LVU2096
 6449 080c 1344     		add	r3, r3, r2
 6450 080e 1744     		add	r7, r7, r2
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6451              		.loc 1 1792 13 view .LVU2097
 6452 0810 4FF0010B 		mov	fp, #1
 6453 0814 44E5     		b	.L503
 6454              	.LVL719:
 6455              	.L500:
1772:src/display.c **** 				odig++;
 6456              		.loc 1 1772 5 is_stmt 1 view .LVU2098
1772:src/display.c **** 				odig++;
 6457              		.loc 1 1772 12 is_stmt 0 view .LVU2099
 6458 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6459 081a 8DF81430 		strb	r3, [sp, #20]
1773:src/display.c **** 				dd--;
 6460              		.loc 1 1773 5 is_stmt 1 view .LVU2100
 6461              	.LVL720:
1774:src/display.c **** 				exp--;
 6462              		.loc 1 1774 5 view .LVU2101
1775:src/display.c **** 			case -2:
 6463              		.loc 1 1775 5 view .LVU2102
1775:src/display.c **** 			case -2:
 6464              		.loc 1 1775 8 is_stmt 0 view .LVU2103
 6465 081e 013D     		subs	r5, r5, #1
 6466              	.LVL721:
1775:src/display.c **** 			case -2:
 6467              		.loc 1 1775 8 view .LVU2104
 6468 0820 0327     		movs	r7, #3
1772:src/display.c **** 				odig++;
 6469              		.loc 1 1772 16 view .LVU2105
 6470 0822 0DF14909 		add	r9, sp, #73
 6471              	.LVL722:
1772:src/display.c **** 				odig++;
 6472              		.loc 1 1772 9 view .LVU2106
 6473 0826 0DF11500 		add	r0, sp, #21
 6474              	.LVL723:
1772:src/display.c **** 				odig++;
 6475              		.loc 1 1772 9 view .LVU2107
 6476 082a D5E7     		b	.L502
 6477              	.LVL724:
 6478              	.L538:
1914:src/display.c **** 		}
 6479              		.loc 1 1914 5 is_stmt 1 view .LVU2108
 6480 082c 2D21     		movs	r1, #45
 6481 082e A6F10900 		sub	r0, r6, #9
 6482 0832 FFF7FEFF 		bl	set_dig
 6483              	.LVL725:
 6484 0836 019B     		ldr	r3, [sp, #4]
 6485 0838 43E5     		b	.L534
 6486              	.LVL726:
 6487              	.L669:
 6488              	.LBB398:
 6489              	.LBB396:
ARM GAS  /tmp/ccAnlOT7.s 			page 197


 6490              	.LBB390:
1481:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6491              		.loc 1 1481 3 view .LVU2109
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6492              		.loc 1 1484 3 view .LVU2110
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6493              		.loc 1 1484 13 is_stmt 0 view .LVU2111
 6494 083a 08F10306 		add	r6, r8, #3
 6495              	.LVL727:
1485:src/display.c **** 		if (grouping) {
 6496              		.loc 1 1485 3 is_stmt 1 view .LVU2112
 6497 083e 4749     		ldr	r1, .L674+12
 6498 0840 0D22     		movs	r2, #13
 6499 0842 3046     		mov	r0, r6
 6500 0844 FFF7FEFF 		bl	xcopy
 6501              	.LVL728:
1486:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6502              		.loc 1 1486 3 view .LVU2113
1487:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
 6503              		.loc 1 1487 4 view .LVU2114
 6504 0848 1322     		movs	r2, #19
 6505 084a 08EB0201 		add	r1, r8, r2
 6506 084e 08F11400 		add	r0, r8, #20
 6507 0852 FFF7FEFF 		bl	xcopy
 6508              	.LVL729:
1488:src/display.c **** 			x += 3 + 13 + 7;
 6509              		.loc 1 1488 4 view .LVU2115
1489:src/display.c **** 		}
 6510              		.loc 1 1489 6 is_stmt 0 view .LVU2116
 6511 0856 08F11705 		add	r5, r8, #23
 6512              	.LVL730:
1488:src/display.c **** 			x += 3 + 13 + 7;
 6513              		.loc 1 1488 22 view .LVU2117
 6514 085a 88F81370 		strb	r7, [r8, #19]
1489:src/display.c **** 		}
 6515              		.loc 1 1489 4 is_stmt 1 view .LVU2118
 6516              	.LVL731:
1502:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
 6517              		.loc 1 1502 3 view .LVU2119
1503:src/display.c **** 	}
 6518              		.loc 1 1503 3 view .LVU2120
1503:src/display.c **** 	}
 6519              		.loc 1 1503 5 is_stmt 0 view .LVU2121
 6520 085e 1B24     		movs	r4, #27
 6521              	.LVL732:
 6522              	.L454:
1503:src/display.c **** 	}
 6523              		.loc 1 1503 5 view .LVU2122
 6524              	.LBE390:
1537:src/display.c **** 		}
 6525              		.loc 1 1537 4 is_stmt 1 view .LVU2123
 6526              	.LBB391:
 6527              	.LBI391:
 355:src/display.c **** 	if (sep == SEP_NONE)
 6528              		.loc 1 355 14 view .LVU2124
 6529              	.LBB392:
 356:src/display.c **** 		return res;
ARM GAS  /tmp/ccAnlOT7.s 			page 198


 6530              		.loc 1 356 2 view .LVU2125
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 6531              		.loc 1 358 2 view .LVU2126
 6532 0860 2046     		mov	r0, r4
 6533 0862 5146     		mov	r1, r10
 6534              	.LBE392:
 6535              	.LBE391:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6536              		.loc 1 1536 37 is_stmt 0 view .LVU2127
 6537 0864 1B34     		adds	r4, r4, #27
 6538              	.LVL733:
 6539              	.LBB394:
 6540              	.LBB393:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6541              		.loc 1 1536 37 view .LVU2128
 6542 0866 FFF7FEFF 		bl	set_separator.part.0
 6543              	.LVL734:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6544              		.loc 1 1536 37 view .LVU2129
 6545              	.LBE393:
 6546              	.LBE394:
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6547              		.loc 1 1536 35 is_stmt 1 view .LVU2130
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6548              		.loc 1 1536 10 view .LVU2131
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6549              		.loc 1 1536 3 is_stmt 0 view .LVU2132
 6550 086a 512C     		cmp	r4, #81
 6551 086c F8DD     		ble	.L454
 6552 086e 6C1E     		subs	r4, r5, #1
 6553              	.LVL735:
 6554              	.L456:
1542:src/display.c **** 
 6555              		.loc 1 1542 3 is_stmt 1 view .LVU2133
 6556 0870 5846     		mov	r0, fp
 6557 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1541:src/display.c **** 		set_dig(j, x[i]);
 6558              		.loc 1 1541 33 is_stmt 0 view .LVU2134
 6559 0876 0BF1090B 		add	fp, fp, #9
 6560              	.LVL736:
1542:src/display.c **** 
 6561              		.loc 1 1542 3 view .LVU2135
 6562 087a FFF7FEFF 		bl	set_dig
 6563              	.LVL737:
1541:src/display.c **** 		set_dig(j, x[i]);
 6564              		.loc 1 1541 26 is_stmt 1 view .LVU2136
1541:src/display.c **** 		set_dig(j, x[i]);
 6565              		.loc 1 1541 18 view .LVU2137
1541:src/display.c **** 		set_dig(j, x[i]);
 6566              		.loc 1 1541 2 is_stmt 0 view .LVU2138
 6567 087e BBF16C0F 		cmp	fp, #108
 6568 0882 F5D1     		bne	.L456
1544:src/display.c **** 	set_status(upper_str - negative);
 6569              		.loc 1 1544 2 is_stmt 1 view .LVU2139
1544:src/display.c **** 	set_status(upper_str - negative);
 6570              		.loc 1 1544 5 is_stmt 0 view .LVU2140
 6571 0884 0023     		movs	r3, #0
ARM GAS  /tmp/ccAnlOT7.s 			page 199


1545:src/display.c **** }
 6572              		.loc 1 1545 2 view .LVU2141
 6573 0886 3046     		mov	r0, r6
1544:src/display.c **** 	set_status(upper_str - negative);
 6574              		.loc 1 1544 5 view .LVU2142
 6575 0888 2B70     		strb	r3, [r5]
1545:src/display.c **** }
 6576              		.loc 1 1545 2 is_stmt 1 view .LVU2143
 6577 088a FFF7FEFF 		bl	set_status
 6578              	.LVL738:
1546:src/display.c **** 
 6579              		.loc 1 1546 1 is_stmt 0 view .LVU2144
 6580 088e 43E5     		b	.L435
 6581              	.LVL739:
 6582              	.L666:
1546:src/display.c **** 
 6583              		.loc 1 1546 1 view .LVU2145
 6584              	.LBE396:
 6585              	.LBE398:
1602:src/display.c ****  				return;
 6586              		.loc 1 1602 5 is_stmt 1 view .LVU2146
 6587 0890 3046     		mov	r0, r6
 6588 0892 FFF7FEFF 		bl	set_x_hms
 6589              	.LVL740:
1603:src/display.c **** 			}
 6590              		.loc 1 1603 6 view .LVU2147
 6591 0896 3FE5     		b	.L435
 6592              	.LVL741:
 6593              	.L567:
1764:src/display.c **** 		if (count != *display_digits)
 6594              		.loc 1 1764 14 is_stmt 0 view .LVU2148
 6595 0898 3246     		mov	r2, r6
 6596 089a A3E4     		b	.L495
 6597              	.LVL742:
 6598              	.L568:
1769:src/display.c **** 			case -1:
 6599              		.loc 1 1769 22 view .LVU2149
 6600 089c 0127     		movs	r7, #1
 6601 089e 4046     		mov	r0, r8
 6602 08a0 9FE7     		b	.L499
 6603              	.LVL743:
 6604              	.L570:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6605              		.loc 1 1792 13 view .LVU2150
 6606 08a2 4FF0010B 		mov	fp, #1
 6607 08a6 FBE4     		b	.L503
 6608              	.LVL744:
 6609              	.L542:
 6610              	.LBB399:
 6611              	.LBB375:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6612              		.loc 1 1792 13 view .LVU2151
 6613 08a8 3046     		mov	r0, r6
 6614 08aa 0193     		str	r3, [sp, #4]
 6615 08ac FFF7FEFF 		bl	set_separator.part.0
 6616              	.LVL745:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
ARM GAS  /tmp/ccAnlOT7.s 			page 200


 6617              		.loc 1 1792 13 view .LVU2152
 6618 08b0 019B     		ldr	r3, [sp, #4]
 6619 08b2 0446     		mov	r4, r0
 6620              	.LVL746:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6621              		.loc 1 1792 13 view .LVU2153
 6622 08b4 F9E5     		b	.L540
 6623              	.LVL747:
 6624              	.L480:
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6625              		.loc 1 1792 13 view .LVU2154
 6626              	.LBE375:
 6627              	.LBE399:
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6628              		.loc 1 1742 3 is_stmt 1 view .LVU2155
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6629              		.loc 1 1742 6 is_stmt 0 view .LVU2156
 6630 08b6 4B45     		cmp	r3, r9
 6631 08b8 7FF460AC 		bne	.L551
 6632 08bc 63E5     		b	.L552
 6633              	.LVL748:
 6634              	.L451:
 6635              	.LBB400:
 6636              	.LBB397:
1527:src/display.c **** 			x[10] = '\0';
 6637              		.loc 1 1527 4 is_stmt 1 view .LVU2157
1528:src/display.c **** 		}
 6638              		.loc 1 1528 4 view .LVU2158
1527:src/display.c **** 			x[10] = '\0';
 6639              		.loc 1 1527 9 is_stmt 0 view .LVU2159
 6640 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6641 08c2 21E7     		b	.L453
 6642              	.LVL749:
 6643              	.L668:
 6644              	.LBB395:
1452:src/display.c **** 
 6645              		.loc 1 1452 3 is_stmt 1 view .LVU2160
1454:src/display.c **** 		xcopy(x, small_minus, 4);
 6646              		.loc 1 1454 3 view .LVU2161
 6647 08c4 2222     		movs	r2, #34
 6648 08c6 0DF11501 		add	r1, sp, #21
 6649 08ca 06A8     		add	r0, sp, #24
 6650              	.LVL750:
1454:src/display.c **** 		xcopy(x, small_minus, 4);
 6651              		.loc 1 1454 3 is_stmt 0 view .LVU2162
 6652 08cc FFF7FEFF 		bl	xcopy
 6653              	.LVL751:
1455:src/display.c **** 		x += 4;
 6654              		.loc 1 1455 3 is_stmt 1 view .LVU2163
 6655 08d0 4046     		mov	r0, r8
 6656 08d2 2349     		ldr	r1, .L674+16
 6657 08d4 0422     		movs	r2, #4
 6658 08d6 FFF7FEFF 		bl	xcopy
 6659              	.LVL752:
1456:src/display.c **** 		negative = 4;
 6660              		.loc 1 1456 3 view .LVU2164
1457:src/display.c **** #else
ARM GAS  /tmp/ccAnlOT7.s 			page 201


 6661              		.loc 1 1457 3 view .LVU2165
1456:src/display.c **** 		negative = 4;
 6662              		.loc 1 1456 5 is_stmt 0 view .LVU2166
 6663 08da 0DF11808 		add	r8, sp, #24
 6664              	.LVL753:
1457:src/display.c **** #else
 6665              		.loc 1 1457 12 view .LVU2167
 6666 08de 0426     		movs	r6, #4
 6667              	.LVL754:
1457:src/display.c **** #else
 6668              		.loc 1 1457 12 view .LVU2168
 6669              	.LBE395:
 6670 08e0 C7E6     		b	.L447
 6671              	.LVL755:
 6672              	.L505:
1457:src/display.c **** #else
 6673              		.loc 1 1457 12 view .LVU2169
 6674              	.LBE397:
 6675              	.LBE400:
1808:src/display.c **** 			odig++;
 6676              		.loc 1 1808 4 is_stmt 1 view .LVU2170
1809:src/display.c **** 			*obp++ = '.';
 6677              		.loc 1 1809 4 view .LVU2171
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6678              		.loc 1 1810 4 view .LVU2172
1808:src/display.c **** 			odig++;
 6679              		.loc 1 1808 11 is_stmt 0 view .LVU2173
 6680 08e2 42F63063 		movw	r3, #11824
1811:src/display.c **** 				*obp++ = '0';
 6681              		.loc 1 1811 4 view .LVU2174
 6682 08e6 691C     		adds	r1, r5, #1
1808:src/display.c **** 			odig++;
 6683              		.loc 1 1808 11 view .LVU2175
 6684 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
1811:src/display.c **** 				*obp++ = '0';
 6685              		.loc 1 1811 4 is_stmt 1 view .LVU2176
 6686              	.LVL756:
1811:src/display.c **** 				*obp++ = '0';
 6687              		.loc 1 1811 18 view .LVU2177
1811:src/display.c **** 				*obp++ = '0';
 6688              		.loc 1 1811 4 is_stmt 0 view .LVU2178
 6689 08ec 2CD0     		beq	.L571
 6690 08ee C5F10100 		rsb	r0, r5, #1
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6691              		.loc 1 1810 8 view .LVU2179
 6692 08f2 0DF11603 		add	r3, sp, #22
 6693              	.LVL757:
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6694              		.loc 1 1810 8 view .LVU2180
 6695 08f6 4044     		add	r0, r0, r8
 6696 08f8 1946     		mov	r1, r3
 6697              	.LVL758:
1812:src/display.c **** 				odig++;
 6698              		.loc 1 1812 12 view .LVU2181
 6699 08fa 3027     		movs	r7, #48
 6700              	.LVL759:
 6701              	.L512:
ARM GAS  /tmp/ccAnlOT7.s 			page 202


1812:src/display.c **** 				odig++;
 6702              		.loc 1 1812 5 is_stmt 1 discriminator 3 view .LVU2182
1812:src/display.c **** 				odig++;
 6703              		.loc 1 1812 12 is_stmt 0 discriminator 3 view .LVU2183
 6704 08fc 01F8017B 		strb	r7, [r1], #1
 6705              	.LVL760:
1813:src/display.c **** 			}
 6706              		.loc 1 1813 5 is_stmt 1 discriminator 3 view .LVU2184
1811:src/display.c **** 				*obp++ = '0';
 6707              		.loc 1 1811 23 discriminator 3 view .LVU2185
1811:src/display.c **** 				*obp++ = '0';
 6708              		.loc 1 1811 18 discriminator 3 view .LVU2186
1811:src/display.c **** 				*obp++ = '0';
 6709              		.loc 1 1811 4 is_stmt 0 discriminator 3 view .LVU2187
 6710 0900 8142     		cmp	r1, r0
 6711 0902 FBD1     		bne	.L512
 6712 0904 E943     		mvns	r1, r5
 6713              	.LVL761:
1811:src/display.c **** 				*obp++ = '0';
 6714              		.loc 1 1811 4 discriminator 3 view .LVU2188
 6715 0906 0B44     		add	r3, r3, r1
 6716 0908 6F42     		rsbs	r7, r5, #0
 6717              	.L511:
 6718              	.LVL762:
1815:src/display.c **** 				*obp++ = *p++;
 6719              		.loc 1 1815 14 is_stmt 1 view .LVU2189
1815:src/display.c **** 				*obp++ = *p++;
 6720              		.loc 1 1815 4 is_stmt 0 view .LVU2190
 6721 090a 002A     		cmp	r2, #0
 6722 090c 7FF7C8AC 		ble	.L503
 6723 0910 02F1FF3C 		add	ip, r2, #-1
 6724 0914 9C44     		add	ip, ip, r3
 6725 0916 591E     		subs	r1, r3, #1
 6726              	.LVL763:
 6727              	.L513:
1816:src/display.c **** 				odig++;
 6728              		.loc 1 1816 5 is_stmt 1 discriminator 3 view .LVU2191
1816:src/display.c **** 				odig++;
 6729              		.loc 1 1816 12 is_stmt 0 discriminator 3 view .LVU2192
 6730 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6731              	.LVL764:
1816:src/display.c **** 				odig++;
 6732              		.loc 1 1816 12 discriminator 3 view .LVU2193
 6733 091c 01F8010F 		strb	r0, [r1, #1]!
1817:src/display.c **** 			}
 6734              		.loc 1 1817 5 is_stmt 1 discriminator 3 view .LVU2194
1815:src/display.c **** 				*obp++ = *p++;
 6735              		.loc 1 1815 23 discriminator 3 view .LVU2195
 6736              	.LVL765:
1815:src/display.c **** 				*obp++ = *p++;
 6737              		.loc 1 1815 14 discriminator 3 view .LVU2196
1815:src/display.c **** 				*obp++ = *p++;
 6738              		.loc 1 1815 4 is_stmt 0 discriminator 3 view .LVU2197
 6739 0920 8C45     		cmp	ip, r1
 6740 0922 F9D1     		bne	.L513
 6741              	.LVL766:
1815:src/display.c **** 				*obp++ = *p++;
ARM GAS  /tmp/ccAnlOT7.s 			page 203


 6742              		.loc 1 1815 4 discriminator 3 view .LVU2198
 6743 0924 1344     		add	r3, r3, r2
 6744              	.LVL767:
1815:src/display.c **** 				*obp++ = *p++;
 6745              		.loc 1 1815 4 discriminator 3 view .LVU2199
 6746 0926 1744     		add	r7, r7, r2
 6747 0928 BAE4     		b	.L503
 6748              	.LVL768:
 6749              	.L667:
1758:src/display.c **** 
 6750              		.loc 1 1758 2 is_stmt 1 view .LVU2200
1758:src/display.c **** 
 6751              		.loc 1 1758 40 is_stmt 0 view .LVU2201
 6752 092a 0AF10102 		add	r2, r10, #1
1758:src/display.c **** 
 6753              		.loc 1 1758 9 view .LVU2202
 6754 092e 09EB0203 		add	r3, r9, r2
 6755              	.LVL769:
1758:src/display.c **** 
 6756              		.loc 1 1758 45 is_stmt 1 view .LVU2203
1758:src/display.c **** 
 6757              		.loc 1 1758 2 is_stmt 0 view .LVU2204
 6758 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6759 0936 002A     		cmp	r2, #0
 6760 0938 3FF496AC 		beq	.L649
1747:src/display.c **** 				extra_digits = 0;
 6761              		.loc 1 1747 34 view .LVU2205
 6762 093c 0227     		movs	r7, #2
 6763 093e 2FE4     		b	.L550
 6764              	.LVL770:
 6765              	.L572:
1838:src/display.c **** 			*obp++ = '.';
 6766              		.loc 1 1838 8 view .LVU2206
 6767 0940 0127     		movs	r7, #1
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6768              		.loc 1 1839 8 view .LVU2207
 6769 0942 0DF11603 		add	r3, sp, #22
 6770              	.LVL771:
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6771              		.loc 1 1839 8 view .LVU2208
 6772 0946 1AE7     		b	.L522
 6773              	.LVL772:
 6774              	.L571:
1809:src/display.c **** 			*obp++ = '.';
 6775              		.loc 1 1809 8 view .LVU2209
 6776 0948 0127     		movs	r7, #1
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6777              		.loc 1 1810 8 view .LVU2210
 6778 094a 0DF11603 		add	r3, sp, #22
 6779              	.LVL773:
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6780              		.loc 1 1810 8 view .LVU2211
 6781 094e DCE7     		b	.L511
 6782              	.L675:
 6783              		.align	2
 6784              	.L674:
 6785 0950 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccAnlOT7.s 			page 204


 6786 0954 18FCFFFF 		.word	-1000
 6787 0958 D34D6210 		.word	274877907
 6788 095c 00000000 		.word	.LANCHOR14
 6789 0960 00000000 		.word	.LANCHOR13
 6790              		.cfi_endproc
 6791              	.LFE27:
 6793              		.section	.text.set_x,"ax",%progbits
 6794              		.align	1
 6795              		.p2align 2,,3
 6796              		.syntax unified
 6797              		.thumb
 6798              		.thumb_func
 6799              		.fpu fpv4-sp-d16
 6801              	set_x:
 6802              	.LVL774:
 6803              	.LFB26:
1553:src/display.c **** 	decNumber z;
 6804              		.loc 1 1553 60 is_stmt 1 view -0
 6805              		.cfi_startproc
 6806              		@ args = 0, pretend = 0, frame = 40
 6807              		@ frame_needed = 0, uses_anonymous_args = 0
1554:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6808              		.loc 1 1554 2 view .LVU2213
1555:src/display.c **** 
 6809              		.loc 1 1555 2 view .LVU2214
1553:src/display.c **** 	decNumber z;
 6810              		.loc 1 1553 60 is_stmt 0 view .LVU2215
 6811 0000 30B5     		push	{r4, r5, lr}
 6812              		.cfi_def_cfa_offset 12
 6813              		.cfi_offset 4, -12
 6814              		.cfi_offset 5, -8
 6815              		.cfi_offset 14, -4
 6816 0002 8BB0     		sub	sp, sp, #44
 6817              		.cfi_def_cfa_offset 56
1555:src/display.c **** 
 6818              		.loc 1 1555 6 view .LVU2216
 6819 0004 0C23     		movs	r3, #12
1558:src/display.c **** 	else
 6820              		.loc 1 1558 3 view .LVU2217
 6821 0006 01AD     		add	r5, sp, #4
1553:src/display.c **** 	decNumber z;
 6822              		.loc 1 1553 60 view .LVU2218
 6823 0008 0C46     		mov	r4, r1
1555:src/display.c **** 
 6824              		.loc 1 1555 6 view .LVU2219
 6825 000a 0093     		str	r3, [sp]
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6826              		.loc 1 1557 2 is_stmt 1 view .LVU2220
1558:src/display.c **** 	else
 6827              		.loc 1 1558 3 is_stmt 0 view .LVU2221
 6828 000c 2946     		mov	r1, r5
 6829              	.LVL775:
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6830              		.loc 1 1557 5 view .LVU2222
 6831 000e 42B1     		cbz	r2, .L677
1558:src/display.c **** 	else
 6832              		.loc 1 1558 3 is_stmt 1 view .LVU2223
ARM GAS  /tmp/ccAnlOT7.s 			page 205


 6833 0010 FFF7FEFF 		bl	decimal128ToNumber
 6834              	.LVL776:
1561:src/display.c **** }
 6835              		.loc 1 1561 2 view .LVU2224
 6836 0014 2146     		mov	r1, r4
 6837 0016 2846     		mov	r0, r5
 6838 0018 6A46     		mov	r2, sp
 6839 001a FFF7FEFF 		bl	set_x_dn
 6840              	.LVL777:
1562:src/display.c **** 
 6841              		.loc 1 1562 1 is_stmt 0 view .LVU2225
 6842 001e 0BB0     		add	sp, sp, #44
 6843              		.cfi_remember_state
 6844              		.cfi_def_cfa_offset 12
 6845              		@ sp needed
 6846 0020 30BD     		pop	{r4, r5, pc}
 6847              	.LVL778:
 6848              	.L677:
 6849              		.cfi_restore_state
1560:src/display.c **** 	set_x_dn(&z, res, &digits);
 6850              		.loc 1 1560 3 is_stmt 1 view .LVU2226
 6851 0022 FFF7FEFF 		bl	decimal64ToNumber
 6852              	.LVL779:
1561:src/display.c **** }
 6853              		.loc 1 1561 2 view .LVU2227
 6854 0026 2146     		mov	r1, r4
 6855 0028 2846     		mov	r0, r5
 6856 002a 6A46     		mov	r2, sp
 6857 002c FFF7FEFF 		bl	set_x_dn
 6858              	.LVL780:
1562:src/display.c **** 
 6859              		.loc 1 1562 1 is_stmt 0 view .LVU2228
 6860 0030 0BB0     		add	sp, sp, #44
 6861              		.cfi_def_cfa_offset 12
 6862              		@ sp needed
 6863 0032 30BD     		pop	{r4, r5, pc}
1562:src/display.c **** 
 6864              		.loc 1 1562 1 view .LVU2229
 6865              		.cfi_endproc
 6866              	.LFE26:
 6868              		.section	.text.format_reg,"ax",%progbits
 6869              		.align	1
 6870              		.p2align 2,,3
 6871              		.global	format_reg
 6872              		.syntax unified
 6873              		.thumb
 6874              		.thumb_func
 6875              		.fpu fpv4-sp-d16
 6877              	format_reg:
 6878              	.LVL781:
 6879              	.LFB28:
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6880              		.loc 1 1969 39 is_stmt 1 view -0
 6881              		.cfi_startproc
 6882              		@ args = 0, pretend = 0, frame = 40
 6883              		@ frame_needed = 0, uses_anonymous_args = 0
1970:src/display.c **** 
ARM GAS  /tmp/ccAnlOT7.s 			page 206


 6884              		.loc 1 1970 2 view .LVU2231
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6885              		.loc 1 1969 39 is_stmt 0 view .LVU2232
 6886 0000 30B5     		push	{r4, r5, lr}
 6887              		.cfi_def_cfa_offset 12
 6888              		.cfi_offset 4, -12
 6889              		.cfi_offset 5, -8
 6890              		.cfi_offset 14, -4
 6891 0002 8BB0     		sub	sp, sp, #44
 6892              		.cfi_def_cfa_offset 56
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6893              		.loc 1 1969 39 view .LVU2233
 6894 0004 0C46     		mov	r4, r1
 6895 0006 0546     		mov	r5, r0
1970:src/display.c **** 
 6896              		.loc 1 1970 28 view .LVU2234
 6897 0008 FFF7FEFF 		bl	get_reg_n
 6898              	.LVL782:
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6899              		.loc 1 1972 6 view .LVU2235
 6900 000c 154B     		ldr	r3, .L687
 6901 000e 1B68     		ldr	r3, [r3]
 6902 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6903              	.LVL783:
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6904              		.loc 1 1972 2 is_stmt 1 view .LVU2236
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6905              		.loc 1 1972 5 is_stmt 0 view .LVU2237
 6906 0014 D207     		lsls	r2, r2, #31
 6907 0016 1DD4     		bmi	.L685
1975:src/display.c **** 		decNumber x;
 6908              		.loc 1 1975 7 is_stmt 1 view .LVU2238
1975:src/display.c **** 		decNumber x;
 6909              		.loc 1 1975 10 is_stmt 0 view .LVU2239
 6910 0018 44B1     		cbz	r4, .L686
 6911              	.L683:
1986:src/display.c **** }
 6912              		.loc 1 1986 3 is_stmt 1 view .LVU2240
1986:src/display.c **** }
 6913              		.loc 1 1986 23 is_stmt 0 view .LVU2241
 6914 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1986:src/display.c **** }
 6915              		.loc 1 1986 3 view .LVU2242
 6916 001e 2146     		mov	r1, r4
 6917 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6918 0024 FFF7FEFF 		bl	set_x
 6919              	.LVL784:
1987:src/display.c **** 
 6920              		.loc 1 1987 1 view .LVU2243
 6921 0028 0BB0     		add	sp, sp, #44
 6922              		.cfi_remember_state
 6923              		.cfi_def_cfa_offset 12
 6924              		@ sp needed
 6925 002a 30BD     		pop	{r4, r5, pc}
 6926              	.LVL785:
 6927              	.L686:
 6928              		.cfi_restore_state
ARM GAS  /tmp/ccAnlOT7.s 			page 207


1975:src/display.c **** 		decNumber x;
 6929              		.loc 1 1975 32 discriminator 1 view .LVU2244
 6930 002c 0E4A     		ldr	r2, .L687+4
1975:src/display.c **** 		decNumber x;
 6931              		.loc 1 1975 23 discriminator 1 view .LVU2245
 6932 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6933 0030 012A     		cmp	r2, #1
 6934 0032 F2D9     		bls	.L683
 6935              	.LVL786:
 6936              	.LBB404:
 6937              	.LBI404:
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6938              		.loc 1 1969 6 is_stmt 1 view .LVU2246
 6939              	.LBB405:
 6940              	.LBB406:
1976:src/display.c **** 		int s;
 6941              		.loc 1 1976 3 view .LVU2247
1977:src/display.c **** 		unsigned long long int v;
 6942              		.loc 1 1977 3 view .LVU2248
1978:src/display.c **** 
 6943              		.loc 1 1978 3 view .LVU2249
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
 6944              		.loc 1 1980 3 view .LVU2250
 6945 0034 2946     		mov	r1, r5
 6946 0036 01A8     		add	r0, sp, #4
 6947              	.LVL787:
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
 6948              		.loc 1 1980 3 is_stmt 0 view .LVU2251
 6949 0038 FFF7FEFF 		bl	getRegister
 6950              	.LVL788:
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6951              		.loc 1 1981 3 is_stmt 1 view .LVU2252
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6952              		.loc 1 1981 7 is_stmt 0 view .LVU2253
 6953 003c 01A8     		add	r0, sp, #4
 6954 003e 6946     		mov	r1, sp
 6955 0040 FFF7FEFF 		bl	dn_to_ull
 6956              	.LVL789:
1982:src/display.c **** 	}
 6957              		.loc 1 1982 3 is_stmt 1 view .LVU2254
 6958 0044 009A     		ldr	r2, [sp]
 6959 0046 FFF7FEFF 		bl	build_value
 6960              	.LVL790:
1982:src/display.c **** 	}
 6961              		.loc 1 1982 3 is_stmt 0 view .LVU2255
 6962 004a 2246     		mov	r2, r4
 6963 004c FFF7FEFF 		bl	set_int_x
 6964              	.LVL791:
 6965              	.LBE406:
 6966              	.LBE405:
 6967              	.LBE404:
1987:src/display.c **** 
 6968              		.loc 1 1987 1 view .LVU2256
 6969 0050 0BB0     		add	sp, sp, #44
 6970              		.cfi_remember_state
 6971              		.cfi_def_cfa_offset 12
 6972              		@ sp needed
ARM GAS  /tmp/ccAnlOT7.s 			page 208


 6973 0052 30BD     		pop	{r4, r5, pc}
 6974              	.LVL792:
 6975              	.L685:
 6976              		.cfi_restore_state
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6977              		.loc 1 1973 3 is_stmt 1 view .LVU2257
 6978 0054 2846     		mov	r0, r5
 6979              	.LVL793:
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6980              		.loc 1 1973 3 is_stmt 0 view .LVU2258
 6981 0056 FFF7FEFF 		bl	get_reg_n_int
 6982              	.LVL794:
 6983 005a 2246     		mov	r2, r4
 6984 005c FFF7FEFF 		bl	set_int_x
 6985              	.LVL795:
1987:src/display.c **** 
 6986              		.loc 1 1987 1 view .LVU2259
 6987 0060 0BB0     		add	sp, sp, #44
 6988              		.cfi_def_cfa_offset 12
 6989              		@ sp needed
 6990 0062 30BD     		pop	{r4, r5, pc}
 6991              	.LVL796:
 6992              	.L688:
1987:src/display.c **** 
 6993              		.loc 1 1987 1 view .LVU2260
 6994              		.align	2
 6995              	.L687:
 6996 0064 00000000 		.word	main_ram
 6997 0068 00000000 		.word	StateWhileOn
 6998              		.cfi_endproc
 6999              	.LFE28:
 7001              		.section	.text.set_status_right,"ax",%progbits
 7002              		.align	1
 7003              		.p2align 2,,3
 7004              		.syntax unified
 7005              		.thumb
 7006              		.thumb_func
 7007              		.fpu fpv4-sp-d16
 7009              	set_status_right:
 7010              	.LVL797:
 7011              	.LFB42:
2737:src/display.c **** 
2738:src/display.c **** 
2739:src/display.c **** /*
2740:src/display.c ****  *  Display messages (global function)
2741:src/display.c ****  */
2742:src/display.c **** extern void message(const char *str1, const char *str2)
2743:src/display.c **** {
2744:src/display.c **** 	State2.disp_freeze = 0;
2745:src/display.c **** 	State2.disp_small = 0;
2746:src/display.c **** 	WasDataEntry = 0;
2747:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
2748:src/display.c **** 		// Complete redraw necessary
2749:src/display.c **** 		DispMsg = str1;
2750:src/display.c **** 		display();
2751:src/display.c **** 	}
2752:src/display.c **** 	else {
ARM GAS  /tmp/ccAnlOT7.s 			page 209


2753:src/display.c **** 		if ( str2 != NULL ) {
2754:src/display.c **** 			reset_disp();
2755:src/display.c **** 			ShowRPN = 0;
2756:src/display.c **** 			set_annunciators();
2757:src/display.c **** 			set_digits_string( str2, 0 );
2758:src/display.c **** 		}
2759:src/display.c **** 		set_status( str1 );
2760:src/display.c **** 		finish_display();// message
2761:src/display.c **** 	}
2762:src/display.c **** }
2763:src/display.c **** 
2764:src/display.c **** #ifdef INCLUDE_STOPWATCH
2765:src/display.c **** 
2766:src/display.c **** static void stopwatch_exponent(const char* exponent) {
2767:src/display.c **** 	int j = SEGS_EXP_BASE;
2768:src/display.c **** 	for (; *exponent!=0; exponent++) {
2769:src/display.c **** 		set_dig_s(j, *exponent, CNULL);
2770:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
2771:src/display.c **** 	}
2772:src/display.c **** }
2773:src/display.c **** 
2774:src/display.c **** void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
2775:src/display.c **** {
2776:src/display.c **** #ifndef REALBUILD
2777:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2778:src/display.c **** #endif
2779:src/display.c **** 	reset_disp();
2780:src/display.c **** 	set_dot(DEG);
2781:src/display.c **** 	set_digits_string( str2, 0 );
2782:src/display.c **** 	State2.disp_small = force_small;
2783:src/display.c **** 	if( exponent!=NULL ) {
2784:src/display.c **** 		stopwatch_exponent(exponent);
2785:src/display.c **** 	}
2786:src/display.c **** 	set_status( str1 );
2787:src/display.c **** 	finish_display();
2788:src/display.c **** }
2789:src/display.c **** 
2790:src/display.c **** 
2791:src/display.c **** #endif // INCLUDE_STOPWATCH
2792:src/display.c **** 
2793:src/display.c **** /* Display the right hand characters from the given string.
2794:src/display.c ****  * Trying to fit as many as possible into the bitmap area,
2795:src/display.c ****  * and reduce font size if required.
2796:src/display.c ****  */
2797:src/display.c **** static void set_status_right(const char *str) {
 7012              		.loc 1 2797 47 is_stmt 1 view -0
 7013              		.cfi_startproc
 7014              		@ args = 0, pretend = 0, frame = 0
 7015              		@ frame_needed = 0, uses_anonymous_args = 0
2798:src/display.c **** 	unsigned int x = 0;
 7016              		.loc 1 2798 2 view .LVU2262
2799:src/display.c **** 	const char *p;
 7017              		.loc 1 2799 2 view .LVU2263
2800:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7018              		.loc 1 2800 2 view .LVU2264
2797:src/display.c **** 	unsigned int x = 0;
 7019              		.loc 1 2797 47 is_stmt 0 view .LVU2265
ARM GAS  /tmp/ccAnlOT7.s 			page 210


 7020 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7021              		.cfi_def_cfa_offset 32
 7022              		.cfi_offset 3, -32
 7023              		.cfi_offset 4, -28
 7024              		.cfi_offset 5, -24
 7025              		.cfi_offset 6, -20
 7026              		.cfi_offset 7, -16
 7027              		.cfi_offset 8, -12
 7028              		.cfi_offset 9, -8
 7029              		.cfi_offset 14, -4
 7030              		.loc 1 2800 23 view .LVU2266
 7031 0004 164B     		ldr	r3, .L703
 7032              		.loc 1 2800 41 view .LVU2267
 7033 0006 93F91630 		ldrsb	r3, [r3, #22]
 7034 000a 002B     		cmp	r3, #0
2797:src/display.c **** 	unsigned int x = 0;
 7035              		.loc 1 2797 47 view .LVU2268
 7036 000c 0646     		mov	r6, r0
 7037              		.loc 1 2800 41 view .LVU2269
 7038 000e 1DDA     		bge	.L702
 7039              	.LVL798:
 7040              	.L690:
 7041              		.loc 1 2800 12 view .LVU2270
 7042 0010 4FF00108 		mov	r8, #1
2801:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7043              		.loc 1 2801 36 view .LVU2271
 7044 0014 4FF48077 		mov	r7, #256
 7045              	.L691:
 7046              	.LVL799:
2802:src/display.c **** 
2803:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7047              		.loc 1 2803 2 is_stmt 1 discriminator 4 view .LVU2272
 7048              		.loc 1 2803 14 discriminator 4 view .LVU2273
 7049              		.loc 1 2803 2 is_stmt 0 discriminator 4 view .LVU2274
 7050 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7051 001a 3446     		mov	r4, r6
 7052 001c 1BB1     		cbz	r3, .L692
 7053              	.LVL800:
 7054              	.L693:
 7055              		.loc 1 2803 30 is_stmt 1 discriminator 3 view .LVU2275
 7056              		.loc 1 2803 26 discriminator 3 view .LVU2276
 7057              		.loc 1 2803 14 discriminator 3 view .LVU2277
 7058              		.loc 1 2803 2 is_stmt 0 discriminator 3 view .LVU2278
 7059 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7060              	.LVL801:
 7061              		.loc 1 2803 2 discriminator 3 view .LVU2279
 7062 0022 002B     		cmp	r3, #0
 7063 0024 FBD1     		bne	.L693
 7064              	.L692:
2798:src/display.c **** 	const char *p;
 7065              		.loc 1 2798 15 view .LVU2280
 7066 0026 0025     		movs	r5, #0
 7067 0028 06E0     		b	.L694
 7068              	.LVL802:
 7069              	.L695:
 7070              	.LBB407:
2804:src/display.c **** 	while (--p >= str) {
ARM GAS  /tmp/ccAnlOT7.s 			page 211


2805:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7071              		.loc 1 2805 26 view .LVU2281
 7072 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2806:src/display.c **** 
2807:src/display.c **** 		x += charlengths(c);
 7073              		.loc 1 2807 8 view .LVU2282
 7074 002c 3844     		add	r0, r0, r7
 7075 002e FFF7FEFF 		bl	charlengths
 7076              	.LVL803:
 7077              		.loc 1 2807 5 view .LVU2283
 7078 0032 0544     		add	r5, r5, r0
 7079              	.LVL804:
2808:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7080              		.loc 1 2808 3 is_stmt 1 view .LVU2284
 7081              		.loc 1 2808 6 is_stmt 0 view .LVU2285
 7082 0034 4B2D     		cmp	r5, #75
 7083 0036 03D8     		bhi	.L696
 7084              	.LVL805:
 7085              	.L694:
2805:src/display.c **** 
 7086              		.loc 1 2805 3 is_stmt 1 view .LVU2286
2805:src/display.c **** 
 7087              		.loc 1 2805 3 is_stmt 0 view .LVU2287
 7088              	.LBE407:
2804:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7089              		.loc 1 2804 8 is_stmt 1 view .LVU2288
 7090 0038 A146     		mov	r9, r4
 7091 003a 013C     		subs	r4, r4, #1
 7092              	.LVL806:
 7093              	.LBB408:
2807:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7094              		.loc 1 2807 3 view .LVU2289
2807:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7095              		.loc 1 2807 3 is_stmt 0 view .LVU2290
 7096              	.LBE408:
2804:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7097              		.loc 1 2804 8 view .LVU2291
 7098 003c A642     		cmp	r6, r4
 7099 003e F4D9     		bls	.L695
 7100              	.LVL807:
 7101              	.L696:
2809:src/display.c **** 			break;
2810:src/display.c **** 	}
2811:src/display.c **** 	set_status_sized(p+1, toolarge);
 7102              		.loc 1 2811 2 is_stmt 1 view .LVU2292
 7103 0040 4146     		mov	r1, r8
 7104 0042 4846     		mov	r0, r9
2812:src/display.c **** }
 7105              		.loc 1 2812 1 is_stmt 0 view .LVU2293
 7106 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7107              		.cfi_remember_state
 7108              		.cfi_restore 14
 7109              		.cfi_restore 9
 7110              		.cfi_restore 8
 7111              		.cfi_restore 7
 7112              		.cfi_restore 6
 7113              		.cfi_restore 5
ARM GAS  /tmp/ccAnlOT7.s 			page 212


 7114              		.cfi_restore 4
 7115              		.cfi_restore 3
 7116              		.cfi_def_cfa_offset 0
 7117              	.LVL808:
2811:src/display.c **** }
 7118              		.loc 1 2811 2 view .LVU2294
 7119 0048 FFF7FEBF 		b	set_status_sized
 7120              	.LVL809:
 7121              	.L702:
 7122              		.cfi_restore_state
 7123              	.LBB409:
 7124              	.LBI409:
2727:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7125              		.loc 1 2727 12 is_stmt 1 view .LVU2295
 7126              	.LBB410:
2728:src/display.c **** }
 7127              		.loc 1 2728 2 view .LVU2296
2728:src/display.c **** }
 7128              		.loc 1 2728 9 is_stmt 0 view .LVU2297
 7129 004c 0021     		movs	r1, #0
 7130 004e FFF7FEFF 		bl	pixel_length
 7131              	.LVL810:
2728:src/display.c **** }
 7132              		.loc 1 2728 9 view .LVU2298
 7133              	.LBE410:
 7134              	.LBE409:
2800:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7135              		.loc 1 2800 41 view .LVU2299
 7136 0052 4B28     		cmp	r0, #75
 7137 0054 DCDC     		bgt	.L690
2800:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7138              		.loc 1 2800 12 view .LVU2300
 7139 0056 4FF00008 		mov	r8, #0
2801:src/display.c **** 
 7140              		.loc 1 2801 36 view .LVU2301
 7141 005a 4746     		mov	r7, r8
 7142 005c DCE7     		b	.L691
 7143              	.L704:
 7144 005e 00BF     		.align	2
 7145              	.L703:
 7146 0060 00000000 		.word	StateWhileOn
 7147              		.cfi_endproc
 7148              	.LFE42:
 7150              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7151              		.align	2
 7152              	.LC3:
 7153 0000 32630600 		.ascii	"2c\006\000"
 7154              		.align	2
 7155              	.LC4:
 7156 0004 07C63C00 		.ascii	"\007\306<\000"
 7157              		.align	2
 7158              	.LC5:
 7159 0008 07876900 		.ascii	"\007\207i\000"
 7160              		.align	2
 7161              	.LC6:
 7162 000c 07C67900 		.ascii	"\007\306y\000"
 7163              		.align	2
ARM GAS  /tmp/ccAnlOT7.s 			page 213


 7164              	.LC7:
 7165 0010 07950600 		.ascii	"\007\225\006\000"
 7166              		.align	2
 7167              	.LC8:
 7168 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7168      060600
 7169 001b 00       		.align	2
 7170              	.LC9:
 7171 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7171      060600
 7172 0023 00       		.align	2
 7173              	.LC10:
 7174 0024 1400     		.ascii	"\024\000"
 7175 0026 0000     		.align	2
 7176              	.LC11:
 7177 0028 07C77900 		.ascii	"\007\307y\000"
 7178              		.align	2
 7179              	.LC12:
 7180 002c 07870700 		.ascii	"\007\207\007\000"
 7181              		.align	2
 7182              	.LC13:
 7183 0030 07C74400 		.ascii	"\007\307D\000"
 7184              		.align	2
 7185              	.LC14:
 7186 0034 07C73C00 		.ascii	"\007\307<\000"
 7187              		.align	2
 7188              	.LC15:
 7189 0038 07872000 		.ascii	"\007\207 \000"
 7190              		.align	2
 7191              	.LC16:
 7192 003c 06060788 		.ascii	"\006\006\007\210\007\000"
 7192      0700
 7193 0042 0000     		.align	2
 7194              	.LC17:
 7195 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7195      00
 7196 0049 000000   		.align	2
 7197              	.LC19:
 7198 004c 07E43F00 		.ascii	"\007\344?\000"
 7199              		.section	.text.annunciators,"ax",%progbits
 7200              		.align	1
 7201              		.p2align 2,,3
 7202              		.syntax unified
 7203              		.thumb
 7204              		.thumb_func
 7205              		.fpu fpv4-sp-d16
 7207              	annunciators:
 7208              	.LFB16:
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7209              		.loc 1 588 32 is_stmt 1 view -0
 7210              		.cfi_startproc
 7211              		@ args = 0, pretend = 0, frame = 88
 7212              		@ frame_needed = 0, uses_anonymous_args = 0
 590:src/display.c **** 	int n;
 7213              		.loc 1 590 2 view .LVU2303
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7214              		.loc 1 588 32 is_stmt 0 view .LVU2304
ARM GAS  /tmp/ccAnlOT7.s 			page 214


 7215 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7216              		.cfi_def_cfa_offset 28
 7217              		.cfi_offset 4, -28
 7218              		.cfi_offset 5, -24
 7219              		.cfi_offset 6, -20
 7220              		.cfi_offset 7, -16
 7221              		.cfi_offset 8, -12
 7222              		.cfi_offset 9, -8
 7223              		.cfi_offset 14, -4
 601:src/display.c **** #  endif
 7224              		.loc 1 601 33 view .LVU2305
 7225 0004 DFF83C83 		ldr	r8, .L803+60
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7226              		.loc 1 588 32 view .LVU2306
 7227 0008 97B0     		sub	sp, sp, #92
 7228              		.cfi_def_cfa_offset 120
 7229              	.LVL811:
 591:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 7230              		.loc 1 591 2 is_stmt 1 view .LVU2307
 592:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 7231              		.loc 1 592 2 view .LVU2308
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7232              		.loc 1 593 2 view .LVU2309
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7233              		.loc 1 593 38 is_stmt 0 view .LVU2310
 7234 000a FFF7FEFF 		bl	cur_shift
 7235              	.LVL812:
 601:src/display.c **** #  endif
 7236              		.loc 1 601 33 view .LVU2311
 7237 000e D8F80030 		ldr	r3, [r8]
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7238              		.loc 1 593 13 view .LVU2312
 7239 0012 BD4A     		ldr	r2, .L803
 601:src/display.c **** #  endif
 7240              		.loc 1 601 33 view .LVU2313
 7241 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7242              		.loc 1 593 13 view .LVU2314
 7243 0018 165C     		ldrb	r6, [r2, r0]	@ zero_extendqisi2
 7244              	.LVL813:
 601:src/display.c **** #  endif
 7245              		.loc 1 601 2 is_stmt 1 view .LVU2315
 632:src/display.c **** 
 7246              		.loc 1 632 2 is_stmt 0 view .LVU2316
 7247 001a 0BAD     		add	r5, sp, #44
 7248              	.LVL814:
 632:src/display.c **** 
 7249              		.loc 1 632 2 view .LVU2317
 7250 001c 0021     		movs	r1, #0
 7251 001e 2846     		mov	r0, r5
 7252 0020 2A22     		movs	r2, #42
 601:src/display.c **** #  endif
 7253              		.loc 1 601 33 view .LVU2318
 7254 0022 C3F38007 		ubfx	r7, r3, #2, #1
 7255              	.LVL815:
 604:src/display.c **** #  else
 7256              		.loc 1 604 2 is_stmt 1 view .LVU2319
ARM GAS  /tmp/ccAnlOT7.s 			page 215


 609:src/display.c **** #  else
 7257              		.loc 1 609 2 view .LVU2320
 619:src/display.c **** #else
 7258              		.loc 1 619 2 view .LVU2321
 627:src/display.c **** #else
 7259              		.loc 1 627 2 view .LVU2322
 632:src/display.c **** 
 7260              		.loc 1 632 2 view .LVU2323
 7261 0026 FFF7FEFF 		bl	xset
 7262              	.LVL816:
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7263              		.loc 1 634 2 view .LVU2324
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7264              		.loc 1 634 6 is_stmt 0 view .LVU2325
 7265 002a D8F80030 		ldr	r3, [r8]
 7266 002e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 7267              		.loc 1 634 5 view .LVU2326
 7268 0032 D907     		lsls	r1, r3, #31
 7269 0034 00F1BA80 		bmi	.L792
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7270              		.loc 1 672 7 is_stmt 1 view .LVU2327
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7271              		.loc 1 672 10 is_stmt 0 view .LVU2328
 7272 0038 87BB     		cbnz	r7, .L717
 690:src/display.c **** 			*p++ = shift_char;
 7273              		.loc 1 690 3 is_stmt 1 view .LVU2329
 690:src/display.c **** 			*p++ = shift_char;
 7274              		.loc 1 690 6 is_stmt 0 view .LVU2330
 7275 003a 202E     		cmp	r6, #32
 7276 003c 00F05181 		beq	.L718
 7277              	.L720:
 691:src/display.c **** 			*p++ = '\006';
 7278              		.loc 1 691 4 is_stmt 1 view .LVU2331
 7279              	.LVL817:
 692:src/display.c **** 		}
 7280              		.loc 1 692 9 is_stmt 0 view .LVU2332
 7281 0040 0623     		movs	r3, #6
 691:src/display.c **** 			*p++ = '\006';
 7282              		.loc 1 691 9 view .LVU2333
 7283 0042 8DF82C60 		strb	r6, [sp, #44]
 692:src/display.c **** 		}
 7284              		.loc 1 692 4 is_stmt 1 view .LVU2334
 7285              	.LVL818:
 692:src/display.c **** 		}
 7286              		.loc 1 692 9 is_stmt 0 view .LVU2335
 7287 0046 8DF82D30 		strb	r3, [sp, #45]
 692:src/display.c **** 		}
 7288              		.loc 1 692 6 view .LVU2336
 7289 004a 0DF12E00 		add	r0, sp, #46
 7290              	.LVL819:
 7291              	.L719:
 698:src/display.c **** 			*p++ = ' ';
 7292              		.loc 1 698 3 is_stmt 1 view .LVU2337
 698:src/display.c **** 			*p++ = ' ';
 7293              		.loc 1 698 7 is_stmt 0 view .LVU2338
 7294 004e AF4C     		ldr	r4, .L803+4
ARM GAS  /tmp/ccAnlOT7.s 			page 216


 7295 0050 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 698:src/display.c **** 			*p++ = ' ';
 7296              		.loc 1 698 6 view .LVU2339
 7297 0052 9A07     		lsls	r2, r3, #30
 7298 0054 00F12181 		bmi	.L793
 703:src/display.c **** 			*p++ = ' ';
 7299              		.loc 1 703 3 is_stmt 1 view .LVU2340
 703:src/display.c **** 			*p++ = ' ';
 7300              		.loc 1 703 6 is_stmt 0 view .LVU2341
 7301 0058 5907     		lsls	r1, r3, #29
 7302 005a 00F11981 		bmi	.L794
 709:src/display.c **** 			if (State2.wascomplex) {
 7303              		.loc 1 709 3 is_stmt 1 view .LVU2342
 709:src/display.c **** 			if (State2.wascomplex) {
 7304              		.loc 1 709 6 is_stmt 0 view .LVU2343
 7305 005e 202E     		cmp	r6, #32
 7306 0060 00F0A481 		beq	.L795
 7307              	.L723:
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7308              		.loc 1 726 3 is_stmt 1 view .LVU2344
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7309              		.loc 1 726 17 is_stmt 0 view .LVU2345
 7310 0064 D8F80030 		ldr	r3, [r8]
 7311 0068 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7312 006c C3F30113 		ubfx	r3, r3, #4, #2
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7313              		.loc 1 726 3 view .LVU2346
 7314 0070 012B     		cmp	r3, #1
 7315 0072 00F0C081 		beq	.L751
 7316 0076 A649     		ldr	r1, .L803+8
 7317 0078 A64A     		ldr	r2, .L803+12
 7318 007a 022B     		cmp	r3, #2
 7319 007c 08BF     		it	eq
 7320 007e 1146     		moveq	r1, r2
 7321              	.L726:
 7322              	.LVL820:
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7323              		.loc 1 740 3 is_stmt 1 view .LVU2347
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7324              		.loc 1 740 7 is_stmt 0 view .LVU2348
 7325 0080 FFF7FEFF 		bl	scopy
 7326              	.LVL821:
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7327              		.loc 1 740 7 view .LVU2349
 7328 0084 0446     		mov	r4, r0
 7329              	.LVL822:
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7330              		.loc 1 742 3 is_stmt 1 view .LVU2350
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7331              		.loc 1 742 7 is_stmt 0 view .LVU2351
 7332 0086 FFF7FEFF 		bl	get_trig_mode
 7333              	.LVL823:
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7334              		.loc 1 742 6 view .LVU2352
 7335 008a 0228     		cmp	r0, #2
 7336 008c 00F03781 		beq	.L796
 7337              	.LVL824:
ARM GAS  /tmp/ccAnlOT7.s 			page 217


 7338              	.L709:
 882:src/display.c **** }
 7339              		.loc 1 882 7 is_stmt 1 view .LVU2353
 7340 0090 2846     		mov	r0, r5
 7341 0092 FFF7FEFF 		bl	set_status
 7342              	.LVL825:
 883:src/display.c **** 
 7343              		.loc 1 883 1 is_stmt 0 view .LVU2354
 7344 0096 17B0     		add	sp, sp, #92
 7345              		.cfi_remember_state
 7346              		.cfi_def_cfa_offset 28
 7347              		@ sp needed
 7348 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7349              	.LVL826:
 7350              	.L717:
 7351              		.cfi_restore_state
 754:src/display.c **** 			*p++ = '\007';
 7352              		.loc 1 754 3 is_stmt 1 view .LVU2355
 754:src/display.c **** 			*p++ = '\007';
 7353              		.loc 1 754 7 is_stmt 0 view .LVU2356
 7354 009c 9B4C     		ldr	r4, .L803+4
 7355 009e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 754:src/display.c **** 			*p++ = '\007';
 7356              		.loc 1 754 6 view .LVU2357
 7357 00a0 9A07     		lsls	r2, r3, #30
 7358 00a2 00F1DB80 		bmi	.L797
 760:src/display.c **** 			*p++ = '\007';
 7359              		.loc 1 760 8 is_stmt 1 view .LVU2358
 760:src/display.c **** 			*p++ = '\007';
 7360              		.loc 1 760 11 is_stmt 0 view .LVU2359
 7361 00a6 202E     		cmp	r6, #32
 7362 00a8 00F00181 		beq	.L729
 7363              	.L730:
 761:src/display.c **** 			*p++ = '\307';
 7364              		.loc 1 761 4 is_stmt 1 view .LVU2360
 7365              	.LVL827:
 762:src/display.c **** 			*p++ = shift_char;
 7366              		.loc 1 762 4 view .LVU2361
 761:src/display.c **** 			*p++ = '\307';
 7367              		.loc 1 761 9 is_stmt 0 view .LVU2362
 7368 00ac 4CF20772 		movw	r2, #50951
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7369              		.loc 1 802 6 view .LVU2363
 7370 00b0 5807     		lsls	r0, r3, #29
 763:src/display.c **** 			goto no_copy;
 7371              		.loc 1 763 9 view .LVU2364
 7372 00b2 8DF82E60 		strb	r6, [sp, #46]
 761:src/display.c **** 			*p++ = '\307';
 7373              		.loc 1 761 9 view .LVU2365
 7374 00b6 ADF82C20 		strh	r2, [sp, #44]	@ movhi
 763:src/display.c **** 			goto no_copy;
 7375              		.loc 1 763 4 is_stmt 1 view .LVU2366
 7376              	.LVL828:
 764:src/display.c **** 		}
 7377              		.loc 1 764 4 view .LVU2367
 763:src/display.c **** 			goto no_copy;
 7378              		.loc 1 763 6 is_stmt 0 view .LVU2368
ARM GAS  /tmp/ccAnlOT7.s 			page 218


 7379 00ba 0DF12F06 		add	r6, sp, #47
 7380              	.LVL829:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7381              		.loc 1 802 3 is_stmt 1 view .LVU2369
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7382              		.loc 1 802 6 is_stmt 0 view .LVU2370
 7383 00be 00F1DD80 		bmi	.L798
 7384              	.LVL830:
 7385              	.L731:
 804:src/display.c **** 			decNumber y;
 7386              		.loc 1 804 10 is_stmt 1 view .LVU2371
 804:src/display.c **** 			decNumber y;
 7387              		.loc 1 804 14 is_stmt 0 view .LVU2372
 7388 00c2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 804:src/display.c **** 			decNumber y;
 7389              		.loc 1 804 13 view .LVU2373
 7390 00c4 5906     		lsls	r1, r3, #25
 7391 00c6 E3D5     		bpl	.L709
 7392              	.L725:
 7393              	.LBB411:
 805:src/display.c **** display_yreg:
 7394              		.loc 1 805 4 is_stmt 1 view .LVU2374
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7395              		.loc 1 812 4 view .LVU2375
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7396              		.loc 1 812 34 is_stmt 0 view .LVU2376
 7397 00c8 DFF87C92 		ldr	r9, .L803+64
 7398 00cc D9F80010 		ldr	r1, [r9]
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7399              		.loc 1 812 4 view .LVU2377
 7400 00d0 6329     		cmp	r1, #99
 7401 00d2 00F37E81 		bgt	.L799
 7402              	.L732:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7403              		.loc 1 812 4 discriminator 5 view .LVU2378
 7404 00d6 0131     		adds	r1, r1, #1
 7405              	.L736:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7406              		.loc 1 812 4 discriminator 6 view .LVU2379
 7407 00d8 02A8     		add	r0, sp, #8
 7408 00da FFF7FEFF 		bl	getRegister
 7409              	.LVL831:
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 7410              		.loc 1 815 4 is_stmt 1 discriminator 6 view .LVU2380
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 7411              		.loc 1 815 7 is_stmt 0 discriminator 6 view .LVU2381
 7412 00de 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7413 00e2 11F07001 		ands	r1, r1, #112
 7414 00e6 3FD1     		bne	.L738
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7415              		.loc 1 816 5 is_stmt 1 view .LVU2382
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7416              		.loc 1 816 18 is_stmt 0 view .LVU2383
 7417 00e8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7418              		.loc 1 816 8 view .LVU2384
 7419 00ea 13F0010F 		tst	r3, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 219


 7420              	.LBB412:
 817:src/display.c **** 
 7421              		.loc 1 817 42 view .LVU2385
 7422 00ee D8F80030 		ldr	r3, [r8]
 7423              	.LBE412:
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7424              		.loc 1 816 8 view .LVU2386
 7425 00f2 40F02B81 		bne	.L800
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7426              		.loc 1 837 5 is_stmt 1 view .LVU2387
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7427              		.loc 1 837 20 is_stmt 0 view .LVU2388
 7428 00f6 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7429              		.loc 1 837 8 view .LVU2389
 7430 00fa 9B06     		lsls	r3, r3, #26
 7431 00fc 34D5     		bpl	.L738
 839:src/display.c **** #endif
 7432              		.loc 1 839 12 view .LVU2390
 7433 00fe 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 839:src/display.c **** #endif
 7434              		.loc 1 839 9 view .LVU2391
 7435 0100 13F00204 		ands	r4, r3, #2
 7436 0104 30D1     		bne	.L738
 842:src/display.c **** #endif
 7437              		.loc 1 842 12 view .LVU2392
 7438 0106 844B     		ldr	r3, .L803+16
 842:src/display.c **** #endif
 7439              		.loc 1 842 9 view .LVU2393
 7440 0108 1B68     		ldr	r3, [r3]
 7441 010a 012B     		cmp	r3, #1
 7442 010c 2CD0     		beq	.L738
 844:src/display.c **** 					char ltgteq;
 7443              		.loc 1 844 12 view .LVU2394
 7444 010e 3146     		mov	r1, r6
 7445 0110 02A8     		add	r0, sp, #8
 7446 0112 FFF7FEFF 		bl	set_x_fract
 7447              	.LVL832:
 844:src/display.c **** 					char ltgteq;
 7448              		.loc 1 844 9 view .LVU2395
 7449 0116 38B3     		cbz	r0, .L738
 7450              	.LBB413:
 845:src/display.c **** 
 7451              		.loc 1 845 6 is_stmt 1 view .LVU2396
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7452              		.loc 1 847 6 view .LVU2397
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7453              		.loc 1 847 10 is_stmt 0 view .LVU2398
 7454 0118 2146     		mov	r1, r4
 7455 011a 2846     		mov	r0, r5
 7456 011c FFF7FEFF 		bl	find_char
 7457              	.LVL833:
 7458 0120 0446     		mov	r4, r0
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7459              		.loc 1 847 8 view .LVU2399
 7460 0122 0238     		subs	r0, r0, #2
 7461              	.LVL834:
ARM GAS  /tmp/ccAnlOT7.s 			page 220


 849:src/display.c **** 					switch (ltgteq) {
 7462              		.loc 1 849 6 is_stmt 1 view .LVU2400
 849:src/display.c **** 					switch (ltgteq) {
 7463              		.loc 1 849 13 is_stmt 0 view .LVU2401
 7464 0124 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7465              	.LVL835:
 850:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 7466              		.loc 1 850 6 is_stmt 1 view .LVU2402
 7467 0128 472F     		cmp	r7, #71
 7468 012a 00F07681 		beq	.L758
 852:src/display.c **** 					}
 7469              		.loc 1 852 23 is_stmt 0 view .LVU2403
 7470 012e 4C2F     		cmp	r7, #76
 7471 0130 08BF     		it	eq
 7472 0132 3C27     		moveq	r7, #60
 7473              	.LVL836:
 7474              	.L743:
 854:src/display.c **** 					q[2] = ltgteq;
 7475              		.loc 1 854 6 is_stmt 1 view .LVU2404
 7476 0134 7949     		ldr	r1, .L803+20
 7477 0136 FFF7FEFF 		bl	scopy
 7478              	.LVL837:
 855:src/display.c **** 
 7479              		.loc 1 855 6 view .LVU2405
 855:src/display.c **** 
 7480              		.loc 1 855 11 is_stmt 0 view .LVU2406
 7481 013a 2770     		strb	r7, [r4]
 857:src/display.c **** 						goto skip;
 7482              		.loc 1 857 6 is_stmt 1 view .LVU2407
 857:src/display.c **** 						goto skip;
 7483              		.loc 1 857 10 is_stmt 0 view .LVU2408
 7484 013c 0121     		movs	r1, #1
 7485 013e 2846     		mov	r0, r5
 7486 0140 FFF7FEFF 		bl	pixel_length
 7487              	.LVL838:
 857:src/display.c **** 						goto skip;
 7488              		.loc 1 857 9 view .LVU2409
 7489 0144 4B28     		cmp	r0, #75
 7490 0146 A3DD     		ble	.L709
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7491              		.loc 1 860 6 is_stmt 1 view .LVU2410
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7492              		.loc 1 860 12 is_stmt 0 view .LVU2411
 7493 0148 0027     		movs	r7, #0
 7494              	.LVL839:
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7495              		.loc 1 860 12 view .LVU2412
 7496 014a 04F8037C 		strb	r7, [r4, #-3]
 861:src/display.c **** 						goto skip;
 7497              		.loc 1 861 6 is_stmt 1 view .LVU2413
 861:src/display.c **** 						goto skip;
 7498              		.loc 1 861 10 is_stmt 0 view .LVU2414
 7499 014e 0121     		movs	r1, #1
 7500 0150 2846     		mov	r0, r5
 7501 0152 FFF7FEFF 		bl	pixel_length
 7502              	.LVL840:
 861:src/display.c **** 						goto skip;
ARM GAS  /tmp/ccAnlOT7.s 			page 221


 7503              		.loc 1 861 9 view .LVU2415
 7504 0156 4B28     		cmp	r0, #75
 7505 0158 9ADD     		ble	.L709
 864:src/display.c **** 				}
 7506              		.loc 1 864 6 is_stmt 1 view .LVU2416
 864:src/display.c **** 				}
 7507              		.loc 1 864 37 is_stmt 0 view .LVU2417
 7508 015a 721B     		subs	r2, r6, r5
 864:src/display.c **** 				}
 7509              		.loc 1 864 6 view .LVU2418
 7510 015c 3946     		mov	r1, r7
 7511 015e C2F12A02 		rsb	r2, r2, #42
 7512 0162 3046     		mov	r0, r6
 7513 0164 FFF7FEFF 		bl	xset
 7514              	.LVL841:
 7515              	.L738:
 864:src/display.c **** 				}
 7516              		.loc 1 864 6 view .LVU2419
 7517              	.LBE413:
 867:src/display.c **** 				int extra_pixels;
 7518              		.loc 1 867 4 is_stmt 1 view .LVU2420
 867:src/display.c **** 				int extra_pixels;
 7519              		.loc 1 867 10 is_stmt 0 view .LVU2421
 7520 0168 0C23     		movs	r3, #12
 7521 016a 0193     		str	r3, [sp, #4]
 867:src/display.c **** 				int extra_pixels;
 7522              		.loc 1 867 27 is_stmt 1 view .LVU2422
 7523 016c 0EE0     		b	.L745
 7524              	.LVL842:
 7525              	.L801:
 7526              	.LBB414:
 875:src/display.c **** 
 7527              		.loc 1 875 5 is_stmt 0 view .LVU2423
 7528 016e 019A     		ldr	r2, [sp, #4]
 7529 0170 0A32     		adds	r2, r2, #10
 7530 0172 FFF7FEFF 		bl	xset
 7531              	.LVL843:
 877:src/display.c **** 			}
 7532              		.loc 1 877 5 is_stmt 1 view .LVU2424
 877:src/display.c **** 			}
 7533              		.loc 1 877 29 is_stmt 0 view .LVU2425
 7534 0176 B4F14802 		subs	r2, r4, #72
 877:src/display.c **** 			}
 7535              		.loc 1 877 7 view .LVU2426
 7536 017a 019B     		ldr	r3, [sp, #4]
 877:src/display.c **** 			}
 7537              		.loc 1 877 29 view .LVU2427
 7538 017c 48BF     		it	mi
 7539 017e A4F14502 		submi	r2, r4, #69
 877:src/display.c **** 			}
 7540              		.loc 1 877 7 view .LVU2428
 7541 0182 A3EBA203 		sub	r3, r3, r2, asr #2
 7542              	.LBE414:
 867:src/display.c **** 				int extra_pixels;
 7543              		.loc 1 867 4 view .LVU2429
 7544 0186 012B     		cmp	r3, #1
 7545              	.LBB415:
ARM GAS  /tmp/ccAnlOT7.s 			page 222


 877:src/display.c **** 			}
 7546              		.loc 1 877 7 view .LVU2430
 7547 0188 0193     		str	r3, [sp, #4]
 7548              	.LBE415:
 867:src/display.c **** 				int extra_pixels;
 7549              		.loc 1 867 27 is_stmt 1 view .LVU2431
 867:src/display.c **** 				int extra_pixels;
 7550              		.loc 1 867 4 is_stmt 0 view .LVU2432
 7551 018a 81DD     		ble	.L709
 7552              	.LVL844:
 7553              	.L745:
 7554              	.LBB416:
 868:src/display.c **** 
 7555              		.loc 1 868 5 is_stmt 1 view .LVU2433
 870:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7556              		.loc 1 870 5 view .LVU2434
 7557 018c 01AA     		add	r2, sp, #4
 7558 018e 3146     		mov	r1, r6
 7559 0190 02A8     		add	r0, sp, #8
 7560 0192 FFF7FEFF 		bl	set_x_dn
 7561              	.LVL845:
 871:src/display.c **** 				if (extra_pixels <= 0)
 7562              		.loc 1 871 5 view .LVU2435
 871:src/display.c **** 				if (extra_pixels <= 0)
 7563              		.loc 1 871 20 is_stmt 0 view .LVU2436
 7564 0196 0121     		movs	r1, #1
 7565 0198 2846     		mov	r0, r5
 7566 019a FFF7FEFF 		bl	pixel_length
 7567              	.LVL846:
 875:src/display.c **** 
 7568              		.loc 1 875 5 is_stmt 1 view .LVU2437
 871:src/display.c **** 				if (extra_pixels <= 0)
 7569              		.loc 1 871 20 is_stmt 0 view .LVU2438
 7570 019e 0446     		mov	r4, r0
 7571              	.LVL847:
 872:src/display.c **** 					break;
 7572              		.loc 1 872 5 is_stmt 1 view .LVU2439
 872:src/display.c **** 					break;
 7573              		.loc 1 872 8 is_stmt 0 view .LVU2440
 7574 01a0 4B2C     		cmp	r4, #75
 875:src/display.c **** 
 7575              		.loc 1 875 5 view .LVU2441
 7576 01a2 4FF00001 		mov	r1, #0
 7577 01a6 3046     		mov	r0, r6
 7578              	.LVL848:
 872:src/display.c **** 					break;
 7579              		.loc 1 872 8 view .LVU2442
 7580 01a8 E1DC     		bgt	.L801
 7581              	.LVL849:
 872:src/display.c **** 					break;
 7582              		.loc 1 872 8 view .LVU2443
 7583              	.LBE416:
 7584 01aa 71E7     		b	.L709
 7585              	.LVL850:
 7586              	.L792:
 872:src/display.c **** 					break;
 7587              		.loc 1 872 8 view .LVU2444
ARM GAS  /tmp/ccAnlOT7.s 			page 223


 7588              	.LBE411:
 644:src/display.c **** 			*p++ = '\006';
 7589              		.loc 1 644 4 is_stmt 1 view .LVU2445
 645:src/display.c **** 		}
 7590              		.loc 1 645 9 is_stmt 0 view .LVU2446
 7591 01ac 0623     		movs	r3, #6
 7592 01ae 8DF82D30 		strb	r3, [sp, #45]
 644:src/display.c **** 			*p++ = '\006';
 7593              		.loc 1 644 9 view .LVU2447
 7594 01b2 8DF82C60 		strb	r6, [sp, #44]
 645:src/display.c **** 		}
 7595              		.loc 1 645 4 is_stmt 1 view .LVU2448
 7596              	.LVL851:
 648:src/display.c **** 		default:
 7597              		.loc 1 648 3 view .LVU2449
 648:src/display.c **** 		default:
 7598              		.loc 1 648 10 is_stmt 0 view .LVU2450
 7599 01b6 FFF7FEFF 		bl	int_mode
 7600              	.LVL852:
 7601 01ba 0138     		subs	r0, r0, #1
 7602 01bc C0B2     		uxtb	r0, r0
 7603 01be 0228     		cmp	r0, #2
 7604 01c0 96BF     		itet	ls
 7605 01c2 574B     		ldrls	r3, .L803+24
 7606 01c4 5749     		ldrhi	r1, .L803+28
 7607 01c6 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7608              	.LVL853:
 655:src/display.c **** 		*q++ = '\006';
 7609              		.loc 1 655 3 is_stmt 1 view .LVU2451
 655:src/display.c **** 		*q++ = '\006';
 7610              		.loc 1 655 7 is_stmt 0 view .LVU2452
 7611 01ca 0DF12E00 		add	r0, sp, #46
 7612              	.LVL854:
 655:src/display.c **** 		*q++ = '\006';
 7613              		.loc 1 655 7 view .LVU2453
 7614 01ce FFF7FEFF 		bl	scopy
 7615              	.LVL855:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7616              		.loc 1 656 8 view .LVU2454
 7617 01d2 0646     		mov	r6, r0
 7618              	.LVL856:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7619              		.loc 1 656 8 view .LVU2455
 7620 01d4 0623     		movs	r3, #6
 7621 01d6 06F8013B 		strb	r3, [r6], #1
 655:src/display.c **** 		*q++ = '\006';
 7622              		.loc 1 655 7 view .LVU2456
 7623 01da 0446     		mov	r4, r0
 7624              	.LVL857:
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7625              		.loc 1 656 3 is_stmt 1 view .LVU2457
 657:src/display.c **** 
 7626              		.loc 1 657 3 view .LVU2458
 657:src/display.c **** 
 7627              		.loc 1 657 7 is_stmt 0 view .LVU2459
 7628 01dc FFF7FEFF 		bl	word_size
 7629              	.LVL858:
ARM GAS  /tmp/ccAnlOT7.s 			page 224


 7630 01e0 0146     		mov	r1, r0
 7631 01e2 3046     		mov	r0, r6
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7632              		.loc 1 659 20 view .LVU2460
 7633 01e4 504E     		ldr	r6, .L803+32
 7634              	.LVL859:
 657:src/display.c **** 
 7635              		.loc 1 657 7 view .LVU2461
 7636 01e6 0222     		movs	r2, #2
 7637 01e8 FFF7FEFF 		bl	num_arg_0
 7638              	.LVL860:
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7639              		.loc 1 659 20 view .LVU2462
 7640 01ec 3368     		ldr	r3, [r6]
 7641              	.LVL861:
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7642              		.loc 1 659 3 is_stmt 1 view .LVU2463
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7643              		.loc 1 659 6 is_stmt 0 view .LVU2464
 7644 01ee 002B     		cmp	r3, #0
 7645 01f0 7FF74EAF 		ble	.L709
 660:src/display.c **** 			if (*q == '1')
 7646              		.loc 1 660 4 is_stmt 1 view .LVU2465
 660:src/display.c **** 			if (*q == '1')
 7647              		.loc 1 660 10 is_stmt 0 view .LVU2466
 7648 01f4 C3F10702 		rsb	r2, r3, #7
 7649 01f8 5200     		lsls	r2, r2, #1
 660:src/display.c **** 			if (*q == '1')
 7650              		.loc 1 660 6 view .LVU2467
 7651 01fa 0192     		str	r2, [sp, #4]
 661:src/display.c **** 				n += 2;
 7652              		.loc 1 661 4 is_stmt 1 view .LVU2468
 661:src/display.c **** 				n += 2;
 7653              		.loc 1 661 7 is_stmt 0 view .LVU2469
 7654 01fc 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7655 01fe 3129     		cmp	r1, #49
 662:src/display.c **** 			if (q[1] == '1')
 7656              		.loc 1 662 5 is_stmt 1 view .LVU2470
 662:src/display.c **** 			if (q[1] == '1')
 7657              		.loc 1 662 7 is_stmt 0 view .LVU2471
 7658 0200 04BF     		itt	eq
 7659 0202 0232     		addeq	r2, r2, #2
 7660 0204 0192     		streq	r2, [sp, #4]
 663:src/display.c **** 				n += 2;
 7661              		.loc 1 663 4 is_stmt 1 view .LVU2472
 663:src/display.c **** 				n += 2;
 7662              		.loc 1 663 7 is_stmt 0 view .LVU2473
 7663 0206 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7664 0208 3129     		cmp	r1, #49
 664:src/display.c **** 			while (n-- > 0)
 7665              		.loc 1 664 5 is_stmt 1 view .LVU2474
 664:src/display.c **** 			while (n-- > 0)
 7666              		.loc 1 664 7 is_stmt 0 view .LVU2475
 7667 020a 08BF     		it	eq
 7668 020c 0232     		addeq	r2, r2, #2
 665:src/display.c **** 				*p++ = '\006';
 7669              		.loc 1 665 10 is_stmt 1 view .LVU2476
ARM GAS  /tmp/ccAnlOT7.s 			page 225


 665:src/display.c **** 				*p++ = '\006';
 7670              		.loc 1 665 12 is_stmt 0 view .LVU2477
 7671 020e 511E     		subs	r1, r2, #1
 665:src/display.c **** 				*p++ = '\006';
 7672              		.loc 1 665 10 view .LVU2478
 7673 0210 002A     		cmp	r2, #0
 665:src/display.c **** 				*p++ = '\006';
 7674              		.loc 1 665 12 view .LVU2479
 7675 0212 0191     		str	r1, [sp, #4]
 665:src/display.c **** 				*p++ = '\006';
 7676              		.loc 1 665 10 view .LVU2480
 7677 0214 40F3F180 		ble	.L712
 666:src/display.c **** 
 7678              		.loc 1 666 10 view .LVU2481
 7679 0218 0621     		movs	r1, #6
 7680              	.L713:
 666:src/display.c **** 
 7681              		.loc 1 666 5 is_stmt 1 view .LVU2482
 7682              	.LVL862:
 666:src/display.c **** 
 7683              		.loc 1 666 10 is_stmt 0 view .LVU2483
 7684 021a 00F8011B 		strb	r1, [r0], #1
 7685              	.LVL863:
 665:src/display.c **** 				*p++ = '\006';
 7686              		.loc 1 665 10 is_stmt 1 view .LVU2484
 665:src/display.c **** 				*p++ = '\006';
 7687              		.loc 1 665 12 is_stmt 0 view .LVU2485
 7688 021e 019B     		ldr	r3, [sp, #4]
 7689 0220 5A1E     		subs	r2, r3, #1
 665:src/display.c **** 				*p++ = '\006';
 7690              		.loc 1 665 10 view .LVU2486
 7691 0222 002B     		cmp	r3, #0
 665:src/display.c **** 				*p++ = '\006';
 7692              		.loc 1 665 12 view .LVU2487
 7693 0224 0192     		str	r2, [sp, #4]
 665:src/display.c **** 				*p++ = '\006';
 7694              		.loc 1 665 10 view .LVU2488
 7695 0226 F8DC     		bgt	.L713
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7696              		.loc 1 668 4 is_stmt 1 view .LVU2489
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7697              		.loc 1 668 11 is_stmt 0 view .LVU2490
 7698 0228 3368     		ldr	r3, [r6]
 7699 022a 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7700              		.loc 1 668 27 is_stmt 1 view .LVU2491
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7701              		.loc 1 668 4 is_stmt 0 view .LVU2492
 7702 022c 002B     		cmp	r3, #0
 7703 022e FFF62FAF 		blt	.L709
 7704              	.L746:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7705              		.loc 1 668 4 view .LVU2493
 7706 0232 364C     		ldr	r4, .L803+4
 7707              	.LVL864:
 7708              	.L716:
 669:src/display.c **** 		}
ARM GAS  /tmp/ccAnlOT7.s 			page 226


 7709              		.loc 1 669 5 is_stmt 1 view .LVU2494
 669:src/display.c **** 		}
 7710              		.loc 1 669 18 is_stmt 0 view .LVU2495
 7711 0234 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7712 0236 C2F3C202 		ubfx	r2, r2, #3, #3
 669:src/display.c **** 		}
 7713              		.loc 1 669 10 view .LVU2496
 7714 023a 9A42     		cmp	r2, r3
 7715 023c 0CBF     		ite	eq
 7716 023e 7C23     		moveq	r3, #124
 7717 0240 2723     		movne	r3, #39
 7718              	.LVL865:
 669:src/display.c **** 		}
 7719              		.loc 1 669 10 view .LVU2497
 7720 0242 00F8013B 		strb	r3, [r0], #1
 7721              	.LVL866:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7722              		.loc 1 668 35 is_stmt 1 view .LVU2498
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7723              		.loc 1 668 36 is_stmt 0 view .LVU2499
 7724 0246 019B     		ldr	r3, [sp, #4]
 7725 0248 013B     		subs	r3, r3, #1
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7726              		.loc 1 668 4 view .LVU2500
 7727 024a 002B     		cmp	r3, #0
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7728              		.loc 1 668 36 view .LVU2501
 7729 024c 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7730              		.loc 1 668 27 is_stmt 1 view .LVU2502
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7731              		.loc 1 668 4 is_stmt 0 view .LVU2503
 7732 024e F1DA     		bge	.L716
 882:src/display.c **** }
 7733              		.loc 1 882 7 is_stmt 1 view .LVU2504
 7734 0250 2846     		mov	r0, r5
 7735              	.LVL867:
 882:src/display.c **** }
 7736              		.loc 1 882 7 is_stmt 0 view .LVU2505
 7737 0252 FFF7FEFF 		bl	set_status
 7738              	.LVL868:
 883:src/display.c **** 
 7739              		.loc 1 883 1 view .LVU2506
 7740 0256 17B0     		add	sp, sp, #92
 7741              		.cfi_remember_state
 7742              		.cfi_def_cfa_offset 28
 7743              		@ sp needed
 7744 0258 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7745              	.LVL869:
 7746              	.L797:
 7747              		.cfi_restore_state
 755:src/display.c **** 			*p++ = '\344';
 7748              		.loc 1 755 4 is_stmt 1 view .LVU2507
 756:src/display.c **** 			*p++ = shift_char;
 7749              		.loc 1 756 4 view .LVU2508
 755:src/display.c **** 			*p++ = '\344';
 7750              		.loc 1 755 9 is_stmt 0 view .LVU2509
ARM GAS  /tmp/ccAnlOT7.s 			page 227


 7751 025c 4EF20743 		movw	r3, #58375
 758:src/display.c **** 		}
 7752              		.loc 1 758 6 view .LVU2510
 7753 0260 3249     		ldr	r1, .L803+36
 757:src/display.c **** 			q = "\024";
 7754              		.loc 1 757 9 view .LVU2511
 7755 0262 8DF82E60 		strb	r6, [sp, #46]
 755:src/display.c **** 			*p++ = '\344';
 7756              		.loc 1 755 9 view .LVU2512
 7757 0266 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 757:src/display.c **** 			q = "\024";
 7758              		.loc 1 757 4 is_stmt 1 view .LVU2513
 7759              	.LVL870:
 758:src/display.c **** 		}
 7760              		.loc 1 758 4 view .LVU2514
 757:src/display.c **** 			q = "\024";
 7761              		.loc 1 757 6 is_stmt 0 view .LVU2515
 7762 026a 0DF12F00 		add	r0, sp, #47
 7763              	.LVL871:
 7764              	.L728:
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7765              		.loc 1 797 3 is_stmt 1 view .LVU2516
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7766              		.loc 1 797 7 is_stmt 0 view .LVU2517
 7767 026e FFF7FEFF 		bl	scopy
 7768              	.LVL872:
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7769              		.loc 1 797 7 view .LVU2518
 7770 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 7771 0274 0646     		mov	r6, r0
 7772              	.LVL873:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7773              		.loc 1 802 3 is_stmt 1 view .LVU2519
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7774              		.loc 1 802 6 is_stmt 0 view .LVU2520
 7775 0276 5807     		lsls	r0, r3, #29
 7776              	.LVL874:
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 7777              		.loc 1 802 6 view .LVU2521
 7778 0278 7FF523AF 		bpl	.L731
 7779              	.L798:
 803:src/display.c **** 		} else if (State2.runmode) {
 7780              		.loc 1 803 4 is_stmt 1 view .LVU2522
 7781 027c 2C49     		ldr	r1, .L803+40
 7782 027e 3046     		mov	r0, r6
 7783 0280 FFF7FEFF 		bl	scopy
 7784              	.LVL875:
 882:src/display.c **** }
 7785              		.loc 1 882 7 view .LVU2523
 7786 0284 2846     		mov	r0, r5
 7787 0286 FFF7FEFF 		bl	set_status
 7788              	.LVL876:
 883:src/display.c **** 
 7789              		.loc 1 883 1 is_stmt 0 view .LVU2524
 7790 028a 17B0     		add	sp, sp, #92
 7791              		.cfi_remember_state
 7792              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccAnlOT7.s 			page 228


 7793              		@ sp needed
 7794 028c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7795              	.LVL877:
 7796              	.L794:
 7797              		.cfi_restore_state
 704:src/display.c **** 			*p = '\015';
 7798              		.loc 1 704 4 is_stmt 1 view .LVU2525
 704:src/display.c **** 			*p = '\015';
 7799              		.loc 1 704 9 is_stmt 0 view .LVU2526
 7800 0290 2022     		movs	r2, #32
 705:src/display.c **** 			goto skip;
 7801              		.loc 1 705 7 view .LVU2527
 7802 0292 0D23     		movs	r3, #13
 704:src/display.c **** 			*p = '\015';
 7803              		.loc 1 704 9 view .LVU2528
 7804 0294 0270     		strb	r2, [r0]
 705:src/display.c **** 			goto skip;
 7805              		.loc 1 705 4 is_stmt 1 view .LVU2529
 705:src/display.c **** 			goto skip;
 7806              		.loc 1 705 7 is_stmt 0 view .LVU2530
 7807 0296 4370     		strb	r3, [r0, #1]
 706:src/display.c **** 		}
 7808              		.loc 1 706 4 is_stmt 1 view .LVU2531
 7809 0298 FAE6     		b	.L709
 7810              	.LVL878:
 7811              	.L793:
 699:src/display.c **** 			*p = '\024';
 7812              		.loc 1 699 4 view .LVU2532
 699:src/display.c **** 			*p = '\024';
 7813              		.loc 1 699 9 is_stmt 0 view .LVU2533
 7814 029a 2022     		movs	r2, #32
 700:src/display.c **** 			goto skip;
 7815              		.loc 1 700 7 view .LVU2534
 7816 029c 1423     		movs	r3, #20
 699:src/display.c **** 			*p = '\024';
 7817              		.loc 1 699 9 view .LVU2535
 7818 029e 0270     		strb	r2, [r0]
 700:src/display.c **** 			goto skip;
 7819              		.loc 1 700 4 is_stmt 1 view .LVU2536
 700:src/display.c **** 			goto skip;
 7820              		.loc 1 700 7 is_stmt 0 view .LVU2537
 7821 02a0 4370     		strb	r3, [r0, #1]
 701:src/display.c **** 		}
 7822              		.loc 1 701 4 is_stmt 1 view .LVU2538
 882:src/display.c **** }
 7823              		.loc 1 882 7 view .LVU2539
 7824 02a2 2846     		mov	r0, r5
 7825              	.LVL879:
 882:src/display.c **** }
 7826              		.loc 1 882 7 is_stmt 0 view .LVU2540
 7827 02a4 FFF7FEFF 		bl	set_status
 7828              	.LVL880:
 883:src/display.c **** 
 7829              		.loc 1 883 1 view .LVU2541
 7830 02a8 17B0     		add	sp, sp, #92
 7831              		.cfi_remember_state
 7832              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccAnlOT7.s 			page 229


 7833              		@ sp needed
 7834 02aa BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7835              	.LVL881:
 7836              	.L729:
 7837              		.cfi_restore_state
 768:src/display.c **** 			q = "\007\207i";
 7838              		.loc 1 768 3 is_stmt 1 view .LVU2542
 768:src/display.c **** 			q = "\007\207i";
 7839              		.loc 1 768 7 is_stmt 0 view .LVU2543
 7840 02ae 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 768:src/display.c **** 			q = "\007\207i";
 7841              		.loc 1 768 6 view .LVU2544
 7842 02b0 13F0C00F 		tst	r3, #192
 7843 02b4 20D1     		bne	.L753
 771:src/display.c **** 			q = "\007\307<";
 7844              		.loc 1 771 8 is_stmt 1 view .LVU2545
 771:src/display.c **** 			q = "\007\307<";
 7845              		.loc 1 771 22 is_stmt 0 view .LVU2546
 7846 02b6 184B     		ldr	r3, .L803+16
 7847 02b8 1B68     		ldr	r3, [r3]
 771:src/display.c **** 			q = "\007\307<";
 7848              		.loc 1 771 11 view .LVU2547
 7849 02ba 012B     		cmp	r3, #1
 7850 02bc 00F0A480 		beq	.L754
 774:src/display.c **** 			q = "\007\307y";
 7851              		.loc 1 774 8 is_stmt 1 view .LVU2548
 774:src/display.c **** 			q = "\007\307y";
 7852              		.loc 1 774 11 is_stmt 0 view .LVU2549
 7853 02c0 022B     		cmp	r3, #2
 7854 02c2 00F09E80 		beq	.L755
 778:src/display.c **** 			q = "\007\207\007";
 7855              		.loc 1 778 8 is_stmt 1 view .LVU2550
 778:src/display.c **** 			q = "\007\207\007";
 7856              		.loc 1 778 12 is_stmt 0 view .LVU2551
 7857 02c6 FFF7FEFF 		bl	get_trig_mode
 7858              	.LVL882:
 778:src/display.c **** 			q = "\007\207\007";
 7859              		.loc 1 778 11 view .LVU2552
 7860 02ca 0228     		cmp	r0, #2
 7861 02cc 00F0A280 		beq	.L756
 784:src/display.c **** #else
 7862              		.loc 1 784 4 is_stmt 1 view .LVU2553
 784:src/display.c **** #else
 7863              		.loc 1 784 9 is_stmt 0 view .LVU2554
 7864 02d0 FFF7FEFF 		bl	is_dblmode
 7865              	.LVL883:
 784:src/display.c **** #else
 7866              		.loc 1 784 36 view .LVU2555
 7867 02d4 174B     		ldr	r3, .L803+44
 7868 02d6 1849     		ldr	r1, .L803+48
 7869 02d8 0028     		cmp	r0, #0
 7870 02da 18BF     		it	ne
 7871 02dc 1946     		movne	r1, r3
 7872 02de 2846     		mov	r0, r5
 7873 02e0 C5E7     		b	.L728
 7874              	.L718:
 690:src/display.c **** 			*p++ = shift_char;
ARM GAS  /tmp/ccAnlOT7.s 			page 230


 7875              		.loc 1 690 29 discriminator 1 view .LVU2556
 7876 02e2 FFF7FEFF 		bl	is_dblmode
 7877              	.LVL884:
 690:src/display.c **** 			*p++ = shift_char;
 7878              		.loc 1 690 25 discriminator 1 view .LVU2557
 7879 02e6 0028     		cmp	r0, #0
 7880 02e8 3FF4AAAE 		beq	.L720
 695:src/display.c **** 		}
 7881              		.loc 1 695 4 is_stmt 1 view .LVU2558
 7882              	.LVL885:
 695:src/display.c **** 		}
 7883              		.loc 1 695 9 is_stmt 0 view .LVU2559
 7884 02ec 4423     		movs	r3, #68
 7885 02ee 8DF82C30 		strb	r3, [sp, #44]
 695:src/display.c **** 		}
 7886              		.loc 1 695 6 view .LVU2560
 7887 02f2 0DF12D00 		add	r0, sp, #45
 7888              	.LVL886:
 695:src/display.c **** 		}
 7889              		.loc 1 695 6 view .LVU2561
 7890 02f6 AAE6     		b	.L719
 7891              	.LVL887:
 7892              	.L753:
 769:src/display.c **** 		}
 7893              		.loc 1 769 6 view .LVU2562
 7894 02f8 1049     		ldr	r1, .L803+52
 590:src/display.c **** 	int n;
 7895              		.loc 1 590 17 view .LVU2563
 7896 02fa 2846     		mov	r0, r5
 7897 02fc B7E7     		b	.L728
 7898              	.LVL888:
 7899              	.L796:
 743:src/display.c **** 		}
 7900              		.loc 1 743 4 is_stmt 1 view .LVU2564
 7901 02fe 1049     		ldr	r1, .L803+56
 7902 0300 2046     		mov	r0, r4
 7903 0302 FFF7FEFF 		bl	scopy
 7904              	.LVL889:
 7905 0306 C3E6     		b	.L709
 7906              	.L804:
 7907              		.align	2
 7908              	.L803:
 7909 0308 00000000 		.word	.LANCHOR15
 7910 030c 00000000 		.word	StateWhileOn
 7911 0310 10000000 		.word	.LC7
 7912 0314 1C000000 		.word	.LC9
 7913 0318 00000000 		.word	RectPolConv
 7914 031c 4C000000 		.word	.LC19
 7915 0320 00000000 		.word	.LANCHOR16
 7916 0324 00000000 		.word	.LC3
 7917 0328 00000000 		.word	IntMaxWindow
 7918 032c 24000000 		.word	.LC10
 7919 0330 44000000 		.word	.LC17
 7920 0334 30000000 		.word	.LC13
 7921 0338 38000000 		.word	.LC15
 7922 033c 08000000 		.word	.LC5
 7923 0340 3C000000 		.word	.LC16
ARM GAS  /tmp/ccAnlOT7.s 			page 231


 7924 0344 00000000 		.word	main_ram
 7925 0348 00000000 		.word	ShowRegister
 7926              	.LVL890:
 7927              	.L800:
 7928              	.LBB419:
 7929              	.LBB417:
 817:src/display.c **** 
 7930              		.loc 1 817 6 view .LVU2565
 819:src/display.c **** 					UState.nothousands = 1;
 7931              		.loc 1 819 6 is_stmt 0 view .LVU2566
 7932 034c 2A22     		movs	r2, #42
 7933 034e 2846     		mov	r0, r5
 817:src/display.c **** 
 7934              		.loc 1 817 42 view .LVU2567
 7935 0350 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 7936              	.LVL891:
 817:src/display.c **** 
 7937              		.loc 1 817 42 view .LVU2568
 7938 0354 324C     		ldr	r4, .L805
 819:src/display.c **** 					UState.nothousands = 1;
 7939              		.loc 1 819 6 view .LVU2569
 7940 0356 FFF7FEFF 		bl	xset
 7941              	.LVL892:
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7942              		.loc 1 820 25 view .LVU2570
 7943 035a D8F80020 		ldr	r2, [r8]
 7944 035e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7945 0362 43F04003 		orr	r3, r3, #64
 7946 0366 82F8E737 		strb	r3, [r2, #2023]
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 7947              		.loc 1 821 6 view .LVU2571
 7948 036a 2946     		mov	r1, r5
 7949 036c 02A8     		add	r0, sp, #8
 7950 036e FFF7FEFF 		bl	set_x_hms
 7951              	.LVL893:
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7952              		.loc 1 822 25 view .LVU2572
 7953 0372 D8F80030 		ldr	r3, [r8]
 7954 0376 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 817:src/display.c **** 
 7955              		.loc 1 817 42 view .LVU2573
 7956 037a C6F38016 		ubfx	r6, r6, #6, #1
 7957              	.LVL894:
 819:src/display.c **** 					UState.nothousands = 1;
 7958              		.loc 1 819 6 is_stmt 1 view .LVU2574
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7959              		.loc 1 820 6 view .LVU2575
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 7960              		.loc 1 821 6 view .LVU2576
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7961              		.loc 1 822 6 view .LVU2577
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7962              		.loc 1 822 25 is_stmt 0 view .LVU2578
 7963 037e 66F38612 		bfi	r2, r6, #6, #1
 7964 0382 83F8E727 		strb	r2, [r3, #2023]
 827:src/display.c **** 					while (*p) {
 7965              		.loc 1 827 6 is_stmt 1 view .LVU2579
ARM GAS  /tmp/ccAnlOT7.s 			page 232


 7966              	.LVL895:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7967              		.loc 1 828 6 view .LVU2580
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7968              		.loc 1 828 12 view .LVU2581
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7969              		.loc 1 828 13 is_stmt 0 view .LVU2582
 7970 0386 4021     		movs	r1, #64
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 7971              		.loc 1 822 25 view .LVU2583
 7972 0388 0522     		movs	r2, #5
 7973 038a 05E0     		b	.L741
 7974              	.LVL896:
 7975              	.L802:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7976              		.loc 1 828 13 view .LVU2584
 7977 038c 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 7978              	.LVL897:
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7979              		.loc 1 828 12 view .LVU2585
 7980 0390 0029     		cmp	r1, #0
 7981 0392 3FF47DAE 		beq	.L709
 7982 0396 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 7983              	.LVL898:
 7984              	.L741:
 829:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7985              		.loc 1 829 7 is_stmt 1 view .LVU2586
 7986 0398 2846     		mov	r0, r5
 7987 039a FFF7FEFF 		bl	replace_char
 7988              	.LVL899:
 830:src/display.c **** 							goto skip;
 7989              		.loc 1 830 7 view .LVU2587
 830:src/display.c **** 							goto skip;
 7990              		.loc 1 830 11 is_stmt 0 view .LVU2588
 7991 039e 0121     		movs	r1, #1
 7992 03a0 2846     		mov	r0, r5
 7993 03a2 FFF7FEFF 		bl	pixel_length
 7994              	.LVL900:
 833:src/display.c **** 					}
 7995              		.loc 1 833 7 is_stmt 1 view .LVU2589
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7996              		.loc 1 828 12 view .LVU2590
 830:src/display.c **** 							goto skip;
 7997              		.loc 1 830 10 is_stmt 0 view .LVU2591
 7998 03a6 4B28     		cmp	r0, #75
 7999 03a8 F0DC     		bgt	.L802
 8000 03aa 71E6     		b	.L709
 8001              	.LVL901:
 8002              	.L795:
 830:src/display.c **** 							goto skip;
 8003              		.loc 1 830 10 view .LVU2592
 8004              	.LBE417:
 8005              	.LBE419:
 709:src/display.c **** 			if (State2.wascomplex) {
 8006              		.loc 1 709 29 discriminator 1 view .LVU2593
 8007 03ac 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 709:src/display.c **** 			if (State2.wascomplex) {
ARM GAS  /tmp/ccAnlOT7.s 			page 233


 8008              		.loc 1 709 25 discriminator 1 view .LVU2594
 8009 03ae 13F0C00F 		tst	r3, #192
 8010 03b2 24D1     		bne	.L749
 709:src/display.c **** 			if (State2.wascomplex) {
 8011              		.loc 1 709 61 discriminator 2 view .LVU2595
 8012 03b4 1B4B     		ldr	r3, .L805+4
 8013 03b6 1B68     		ldr	r3, [r3]
 709:src/display.c **** 			if (State2.wascomplex) {
 8014              		.loc 1 709 47 discriminator 2 view .LVU2596
 8015 03b8 002B     		cmp	r3, #0
 8016 03ba 3FF453AE 		beq	.L723
 710:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8017              		.loc 1 710 4 is_stmt 1 view .LVU2597
 713:src/display.c **** 				if (RectPolConv == 1) {
 8018              		.loc 1 713 9 view .LVU2598
 714:src/display.c **** 					q = "\007\306<";
 8019              		.loc 1 714 5 view .LVU2599
 718:src/display.c **** 				}
 8020              		.loc 1 718 8 is_stmt 0 view .LVU2600
 8021 03be 1A49     		ldr	r1, .L805+8
 8022 03c0 1A4A     		ldr	r2, .L805+12
 8023 03c2 012B     		cmp	r3, #1
 8024 03c4 18BF     		it	ne
 8025 03c6 1146     		movne	r1, r2
 8026              	.L724:
 8027              	.LVL902:
 721:src/display.c **** 
 8028              		.loc 1 721 4 is_stmt 1 view .LVU2601
 721:src/display.c **** 
 8029              		.loc 1 721 8 is_stmt 0 view .LVU2602
 8030 03c8 2846     		mov	r0, r5
 8031              	.LVL903:
 721:src/display.c **** 
 8032              		.loc 1 721 8 view .LVU2603
 8033 03ca FFF7FEFF 		bl	scopy
 8034              	.LVL904:
 721:src/display.c **** 
 8035              		.loc 1 721 8 view .LVU2604
 8036 03ce 0646     		mov	r6, r0
 8037              	.LVL905:
 723:src/display.c **** 		}
 8038              		.loc 1 723 4 is_stmt 1 view .LVU2605
 8039 03d0 7AE6     		b	.L725
 8040              	.LVL906:
 8041              	.L799:
 8042              	.LBB420:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8043              		.loc 1 812 75 is_stmt 0 discriminator 2 view .LVU2606
 8044 03d2 FFF7FEFF 		bl	stack_size
 8045              	.LVL907:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8046              		.loc 1 812 62 discriminator 2 view .LVU2607
 8047 03d6 D9F80010 		ldr	r1, [r9]
 8048 03da 6330     		adds	r0, r0, #99
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8049              		.loc 1 812 46 discriminator 2 view .LVU2608
 8050 03dc 8842     		cmp	r0, r1
ARM GAS  /tmp/ccAnlOT7.s 			page 234


 8051 03de FFF67AAE 		blt	.L732
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8052              		.loc 1 812 91 discriminator 4 view .LVU2609
 8053 03e2 FFF7FEFF 		bl	get_cmdline
 8054              	.LVL908:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8055              		.loc 1 812 88 discriminator 4 view .LVU2610
 8056 03e6 18B1     		cbz	r0, .L735
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8057              		.loc 1 813 7 view .LVU2611
 8058 03e8 8FB1     		cbz	r7, .L734
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8059              		.loc 1 813 28 discriminator 1 view .LVU2612
 8060 03ea E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8061              		.loc 1 813 10 discriminator 1 view .LVU2613
 8062 03ec 5A06     		lsls	r2, r3, #25
 8063 03ee 0ED4     		bmi	.L734
 8064              	.L735:
 8065 03f0 D9F80010 		ldr	r1, [r9]
 8066 03f4 6FE6     		b	.L732
 8067              	.LVL909:
 8068              	.L751:
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8069              		.loc 1 813 10 discriminator 1 view .LVU2614
 8070              	.LBE420:
 732:src/display.c **** #endif
 8071              		.loc 1 732 20 view .LVU2615
 8072 03f6 0E49     		ldr	r1, .L805+16
 8073 03f8 42E6     		b	.L726
 8074              	.LVL910:
 8075              	.L712:
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8076              		.loc 1 668 4 is_stmt 1 view .LVU2616
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8077              		.loc 1 668 11 is_stmt 0 view .LVU2617
 8078 03fa 0193     		str	r3, [sp, #4]
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8079              		.loc 1 668 27 is_stmt 1 view .LVU2618
 8080 03fc 19E7     		b	.L746
 8081              	.LVL911:
 8082              	.L749:
 711:src/display.c **** 			}
 8083              		.loc 1 711 7 is_stmt 0 view .LVU2619
 8084 03fe 0D49     		ldr	r1, .L805+20
 8085 0400 E2E7     		b	.L724
 8086              	.LVL912:
 8087              	.L755:
 775:src/display.c **** 		}
 8088              		.loc 1 775 6 view .LVU2620
 8089 0402 0D49     		ldr	r1, .L805+24
 590:src/display.c **** 	int n;
 8090              		.loc 1 590 17 view .LVU2621
 8091 0404 2846     		mov	r0, r5
 8092 0406 32E7     		b	.L728
 8093              	.L754:
 772:src/display.c **** 		}
ARM GAS  /tmp/ccAnlOT7.s 			page 235


 8094              		.loc 1 772 6 view .LVU2622
 8095 0408 0C49     		ldr	r1, .L805+28
 590:src/display.c **** 	int n;
 8096              		.loc 1 590 17 view .LVU2623
 8097 040a 2846     		mov	r0, r5
 8098 040c 2FE7     		b	.L728
 8099              	.LVL913:
 8100              	.L734:
 8101              	.LBB421:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8102              		.loc 1 812 4 discriminator 7 view .LVU2624
 8103 040e D9F80010 		ldr	r1, [r9]
 8104 0412 61E6     		b	.L736
 8105              	.LVL914:
 8106              	.L756:
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8107              		.loc 1 812 4 discriminator 7 view .LVU2625
 8108              	.LBE421:
 779:src/display.c **** 		}
 8109              		.loc 1 779 6 view .LVU2626
 8110 0414 0A49     		ldr	r1, .L805+32
 590:src/display.c **** 	int n;
 8111              		.loc 1 590 17 view .LVU2627
 8112 0416 2846     		mov	r0, r5
 8113 0418 29E7     		b	.L728
 8114              	.LVL915:
 8115              	.L758:
 8116              	.LBB422:
 8117              	.LBB418:
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8118              		.loc 1 851 23 view .LVU2628
 8119 041a 3E27     		movs	r7, #62
 8120              	.LVL916:
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8121              		.loc 1 851 23 view .LVU2629
 8122 041c 8AE6     		b	.L743
 8123              	.L806:
 8124 041e 00BF     		.align	2
 8125              	.L805:
 8126 0420 00000000 		.word	.LANCHOR17
 8127 0424 00000000 		.word	RectPolConv
 8128 0428 04000000 		.word	.LC4
 8129 042c 0C000000 		.word	.LC6
 8130 0430 14000000 		.word	.LC8
 8131 0434 08000000 		.word	.LC5
 8132 0438 28000000 		.word	.LC11
 8133 043c 34000000 		.word	.LC14
 8134 0440 2C000000 		.word	.LC12
 8135              	.LBE418:
 8136              	.LBE422:
 8137              		.cfi_endproc
 8138              	.LFE16:
 8140              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8141              		.align	2
 8142              	.LC20:
 8143 0000 0D00     		.ascii	"\015\000"
 8144 0002 0000     		.align	2
ARM GAS  /tmp/ccAnlOT7.s 			page 236


 8145              	.LC21:
 8146 0004 060600   		.ascii	"\006\006\000"
 8147 0007 00       		.align	2
 8148              	.LC23:
 8149 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8149      492C2057 
 8149      77414C74 
 8149      4500
 8150 0016 0000     		.align	2
 8151              	.LC24:
 8152 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8152      2055204C 
 8152      20492C20 
 8152      20572041 
 8152      204C2054 
 8153 0032 0000     		.align	2
 8154              	.LC25:
 8155 0034 2000     		.ascii	" \000"
 8156 0036 0000     		.align	2
 8157              	.LC26:
 8158 0038 48595000 		.ascii	"HYP\000"
 8159              		.align	2
 8160              	.LC29:
 8161 003c 7F060600 		.ascii	"\177\006\006\000"
 8162              		.align	2
 8163              	.LC30:
 8164 0040 3020746F 		.ascii	"0 to 255\000"
 8164      20323535 
 8164      00
 8165 0049 000000   		.align	2
 8166              	.LC31:
 8167 004c 46726565 		.ascii	"Free:\000"
 8167      3A00
 8168 0052 0000     		.align	2
 8169              	.LC32:
 8170 0054 202C2046 		.ascii	" , FL. \000"
 8170      4C2E2000 
 8171              		.align	2
 8172              	.LC33:
 8173 005c 52656773 		.ascii	"Regs:\000"
 8173      3A00
 8174 0062 0000     		.align	2
 8175              	.LC34:
 8176 0064 20910606 		.ascii	" \221\006\006+\000"
 8176      2B00
 8177 006a 0000     		.align	2
 8178              	.LC35:
 8179 006c 202C204C 		.ascii	" , Loc. \000"
 8179      6F632E20 
 8179      00
 8180 0075 000000   		.align	2
 8181              	.LC36:
 8182 0078 464C2000 		.ascii	"FL \000"
 8183              		.align	2
 8184              	.LC37:
 8185 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8185      06413A44 
ARM GAS  /tmp/ccAnlOT7.s 			page 237


 8185      064C494A 
 8185      4B00
 8186 008a 0000     		.align	2
 8187              	.LC38:
 8188 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8188      302D2E31 
 8188      3500
 8189 0096 0000     		.align	2
 8190              	.LC39:
 8191 0098 43414C4C 		.ascii	"CALLS\000"
 8191      5300
 8192 009e 0000     		.align	2
 8193              	.LC40:
 8194 00a0 52656720 		.ascii	"Reg \000"
 8194      00
 8195 00a5 000000   		.align	2
 8196              	.LC41:
 8197 00a8 00       		.ascii	"\000"
 8198 00a9 000000   		.align	2
 8199              	.LC42:
 8200 00ac 202D2D2D 		.ascii	" ---\000"
 8200      00
 8201 00b1 000000   		.align	2
 8202              	.LC28:
 8203 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8203      093E0A00 
 8204              		.align	2
 8205              	.LC27:
 8206 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8206      41424344 
 8206      4C494A4B 
 8206      00
 8207              		.section	.text.display,"ax",%progbits
 8208              		.align	1
 8209              		.p2align 2,,3
 8210              		.global	display
 8211              		.syntax unified
 8212              		.thumb
 8213              		.thumb_func
 8214              		.fpu fpv4-sp-d16
 8216              	display:
 8217              	.LFB34:
2216:src/display.c **** 	int i, j;
 8218              		.loc 1 2216 20 is_stmt 1 view -0
 8219              		.cfi_startproc
 8220              		@ args = 0, pretend = 0, frame = 160
 8221              		@ frame_needed = 0, uses_anonymous_args = 0
2217:src/display.c **** 	char buf[40], *bp = buf;
 8222              		.loc 1 2217 2 view .LVU2631
2218:src/display.c **** 	const char *p;
 8223              		.loc 1 2218 2 view .LVU2632
2216:src/display.c **** 	int i, j;
 8224              		.loc 1 2216 20 is_stmt 0 view .LVU2633
 8225 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8226              		.cfi_def_cfa_offset 36
 8227              		.cfi_offset 4, -36
 8228              		.cfi_offset 5, -32
ARM GAS  /tmp/ccAnlOT7.s 			page 238


 8229              		.cfi_offset 6, -28
 8230              		.cfi_offset 7, -24
 8231              		.cfi_offset 8, -20
 8232              		.cfi_offset 9, -16
 8233              		.cfi_offset 10, -12
 8234              		.cfi_offset 11, -8
 8235              		.cfi_offset 14, -4
2221:src/display.c **** 	int skip = 0;
 8236              		.loc 1 2221 24 view .LVU2634
 8237 0004 BE4C     		ldr	r4, .L1099
2216:src/display.c **** 	int i, j;
 8238              		.loc 1 2216 20 view .LVU2635
 8239 0006 A9B0     		sub	sp, sp, #164
 8240              		.cfi_def_cfa_offset 200
 8241              	.LVL917:
2219:src/display.c **** 	int annuc = 0;
 8242              		.loc 1 2219 2 is_stmt 1 view .LVU2636
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8243              		.loc 1 2220 2 view .LVU2637
2221:src/display.c **** 	int skip = 0;
 8244              		.loc 1 2221 2 view .LVU2638
2221:src/display.c **** 	int skip = 0;
 8245              		.loc 1 2221 24 is_stmt 0 view .LVU2639
 8246 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8247              	.LVL918:
2222:src/display.c **** 	int x_disp = 0;
 8248              		.loc 1 2222 2 is_stmt 1 view .LVU2640
2223:src/display.c **** 	const int shift = cur_shift();
 8249              		.loc 1 2223 2 view .LVU2641
2224:src/display.c **** 
 8250              		.loc 1 2224 2 view .LVU2642
2224:src/display.c **** 
 8251              		.loc 1 2224 20 is_stmt 0 view .LVU2643
 8252 000c FFF7FEFF 		bl	cur_shift
 8253              	.LVL919:
2228:src/display.c **** 		State2.disp_freeze = 0;
 8254              		.loc 1 2228 6 view .LVU2644
 8255 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8256              	.LVL920:
2228:src/display.c **** 		State2.disp_freeze = 0;
 8257              		.loc 1 2228 2 is_stmt 1 view .LVU2645
2228:src/display.c **** 		State2.disp_freeze = 0;
 8258              		.loc 1 2228 5 is_stmt 0 view .LVU2646
 8259 0012 13F01006 		ands	r6, r3, #16
 8260 0016 40F08780 		bne	.L1058
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8261              		.loc 1 2238 2 is_stmt 1 view .LVU2647
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8262              		.loc 1 2238 6 is_stmt 0 view .LVU2648
 8263 001a BA4F     		ldr	r7, .L1099+4
 8264 001c 3D68     		ldr	r5, [r7]
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8265              		.loc 1 2238 5 view .LVU2649
 8266 001e 002D     		cmp	r5, #0
 8267 0020 4BD1     		bne	.L1059
2255:src/display.c **** 
 8268              		.loc 1 2255 2 is_stmt 1 view .LVU2650
ARM GAS  /tmp/ccAnlOT7.s 			page 239


 8269 0022 8246     		mov	r10, r0
 8270 0024 FFF7FEFF 		bl	reset_disp
 8271              	.LVL921:
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
 8272              		.loc 1 2257 2 view .LVU2651
 8273 0028 1EA8     		add	r0, sp, #120
 8274              	.LVL922:
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
 8275              		.loc 1 2257 2 is_stmt 0 view .LVU2652
 8276 002a 2822     		movs	r2, #40
 8277 002c 2946     		mov	r1, r5
 8278 002e FFF7FEFF 		bl	xset
 8279              	.LVL923:
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8280              		.loc 1 2258 2 is_stmt 1 view .LVU2653
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8281              		.loc 1 2258 6 is_stmt 0 view .LVU2654
 8282 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8283              		.loc 1 2258 5 view .LVU2655
 8284 0034 9E07     		lsls	r6, r3, #30
 8285 0036 03D5     		bpl	.L942
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8286              		.loc 1 2258 20 discriminator 1 view .LVU2656
 8287 0038 B9F1000F 		cmp	r9, #0
 8288 003c 00F0EC80 		beq	.L1060
 8289              	.L942:
2218:src/display.c **** 	const char *p;
 8290              		.loc 1 2218 17 view .LVU2657
 8291 0040 0DF17808 		add	r8, sp, #120
 8292              	.LVL924:
 8293              	.L813:
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8294              		.loc 1 2262 2 is_stmt 1 view .LVU2658
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8295              		.loc 1 2262 5 is_stmt 0 view .LVU2659
 8296 0044 D806     		lsls	r0, r3, #27
 8297 0046 00F17581 		bmi	.L1061
2274:src/display.c **** 		set_status(S_SURE);
 8298              		.loc 1 2274 9 is_stmt 1 view .LVU2660
2274:src/display.c **** 		set_status(S_SURE);
 8299              		.loc 1 2274 13 is_stmt 0 view .LVU2661
 8300 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2274:src/display.c **** 		set_status(S_SURE);
 8301              		.loc 1 2274 12 view .LVU2662
 8302 004c 5107     		lsls	r1, r2, #29
 8303 004e 40F0F480 		bne	.L1062
2276:src/display.c **** 		bp = scopy(bp, "HYP");
 8304              		.loc 1 2276 9 is_stmt 1 view .LVU2663
2276:src/display.c **** 		bp = scopy(bp, "HYP");
 8305              		.loc 1 2276 12 is_stmt 0 view .LVU2664
 8306 0052 9A06     		lsls	r2, r3, #26
 8307 0054 00F1C280 		bmi	.L1063
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8308              		.loc 1 2281 9 is_stmt 1 view .LVU2665
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8309              		.loc 1 2281 12 is_stmt 0 view .LVU2666
ARM GAS  /tmp/ccAnlOT7.s 			page 240


 8310 0058 DE07     		lsls	r6, r3, #31
 8311 005a 00F1AE81 		bmi	.L1064
2289:src/display.c **** 		/* Commands with arguments */
 8312              		.loc 1 2289 9 is_stmt 1 view .LVU2667
2289:src/display.c **** 		/* Commands with arguments */
 8313              		.loc 1 2289 13 is_stmt 0 view .LVU2668
 8314 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2289:src/display.c **** 		/* Commands with arguments */
 8315              		.loc 1 2289 12 view .LVU2669
 8316 0060 8806     		lsls	r0, r1, #26
 8317 0062 00F10582 		bmi	.L1065
2320:src/display.c **** 		*bp++ = 'x';
 8318              		.loc 1 2320 9 is_stmt 1 view .LVU2670
2320:src/display.c **** 		*bp++ = 'x';
 8319              		.loc 1 2320 19 is_stmt 0 view .LVU2671
 8320 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2320:src/display.c **** 		*bp++ = 'x';
 8321              		.loc 1 2320 12 view .LVU2672
 8322 0068 072A     		cmp	r2, #7
 8323 006a 40F0E481 		bne	.L1066
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8324              		.loc 1 2326 9 is_stmt 1 view .LVU2673
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8325              		.loc 1 2326 12 is_stmt 0 view .LVU2674
 8326 006e B9F1000F 		cmp	r9, #0
 8327 0072 40F00F83 		bne	.L1067
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8328              		.loc 1 2374 9 is_stmt 1 view .LVU2675
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8329              		.loc 1 2374 12 is_stmt 0 view .LVU2676
 8330 0076 1A07     		lsls	r2, r3, #28
 8331 0078 00F16083 		bmi	.L1068
2382:src/display.c **** 		show_status();
 8332              		.loc 1 2382 9 is_stmt 1 view .LVU2677
2382:src/display.c **** 		show_status();
 8333              		.loc 1 2382 19 is_stmt 0 view .LVU2678
 8334 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2382:src/display.c **** 		show_status();
 8335              		.loc 1 2382 12 view .LVU2679
 8336 007e 002B     		cmp	r3, #0
 8337 0080 40F0E583 		bne	.L1069
2385:src/display.c **** 		show_label();
 8338              		.loc 1 2385 9 is_stmt 1 view .LVU2680
2385:src/display.c **** 		show_label();
 8339              		.loc 1 2385 13 is_stmt 0 view .LVU2681
 8340 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2385:src/display.c **** 		show_label();
 8341              		.loc 1 2385 12 view .LVU2682
 8342 0086 5E07     		lsls	r6, r3, #29
 8343 0088 00F1AC83 		bmi	.L1070
2388:src/display.c **** 		show_registers();
 8344              		.loc 1 2388 9 is_stmt 1 view .LVU2683
2388:src/display.c **** 		show_registers();
 8345              		.loc 1 2388 12 is_stmt 0 view .LVU2684
 8346 008c 1807     		lsls	r0, r3, #28
 8347 008e 00F1D484 		bmi	.L1071
2398:src/display.c **** 	  if (DispMsg) { 
ARM GAS  /tmp/ccAnlOT7.s 			page 241


 8348              		.loc 1 2398 9 is_stmt 1 view .LVU2685
2398:src/display.c **** 	  if (DispMsg) { 
 8349              		.loc 1 2398 12 is_stmt 0 view .LVU2686
 8350 0092 4806     		lsls	r0, r1, #25
 8351 0094 40F1B284 		bpl	.L878
2399:src/display.c **** 			set_status(DispMsg);
 8352              		.loc 1 2399 4 is_stmt 1 view .LVU2687
2399:src/display.c **** 			set_status(DispMsg);
 8353              		.loc 1 2399 8 is_stmt 0 view .LVU2688
 8354 0098 9B4E     		ldr	r6, .L1099+8
 8355 009a D6F800B0 		ldr	fp, [r6]
2399:src/display.c **** 			set_status(DispMsg);
 8356              		.loc 1 2399 7 view .LVU2689
 8357 009e BBF1000F 		cmp	fp, #0
 8358 00a2 00F08184 		beq	.L879
2400:src/display.c **** 		} else if (DispPlot) {
 8359              		.loc 1 2400 4 is_stmt 1 view .LVU2690
 8360 00a6 5846     		mov	r0, fp
 8361 00a8 FFF7FEFF 		bl	set_status
 8362              	.LVL925:
2459:src/display.c **** nostk:	show_flags();
 8363              		.loc 1 2459 2 view .LVU2691
 8364 00ac DFF87882 		ldr	r8, .L1099+40
 8365              	.LVL926:
2459:src/display.c **** nostk:	show_flags();
 8366              		.loc 1 2459 2 is_stmt 0 view .LVU2692
 8367 00b0 FFF7FEFF 		bl	show_stack
 8368              	.LVL927:
2460:src/display.c **** 	if (!skip) {
 8369              		.loc 1 2460 8 is_stmt 1 view .LVU2693
 8370 00b4 FFF7FEFF 		bl	show_flags
 8371              	.LVL928:
2461:src/display.c **** 		if (State2.runmode) {
 8372              		.loc 1 2461 2 view .LVU2694
 8373 00b8 C9E0     		b	.L817
 8374              	.LVL929:
 8375              	.L1059:
2245:src/display.c **** 
 8376              		.loc 1 2245 3 view .LVU2695
 8377 00ba FFF7FEFF 		bl	wait_for_display
 8378              	.LVL930:
2248:src/display.c **** 			clr_dot(i);
 8379              		.loc 1 2248 3 view .LVU2696
2248:src/display.c **** 			clr_dot(i);
 8380              		.loc 1 2248 15 view .LVU2697
 8381              	.L811:
2249:src/display.c **** 		}
 8382              		.loc 1 2249 4 discriminator 3 view .LVU2698
 8383 00be 3046     		mov	r0, r6
2248:src/display.c **** 			clr_dot(i);
 8384              		.loc 1 2248 30 is_stmt 0 discriminator 3 view .LVU2699
 8385 00c0 0136     		adds	r6, r6, #1
 8386              	.LVL931:
2249:src/display.c **** 		}
 8387              		.loc 1 2249 4 discriminator 3 view .LVU2700
 8388 00c2 FFF7FEFF 		bl	clr_dot
 8389              	.LVL932:
ARM GAS  /tmp/ccAnlOT7.s 			page 242


2248:src/display.c **** 			clr_dot(i);
 8390              		.loc 1 2248 30 is_stmt 1 discriminator 3 view .LVU2701
2248:src/display.c **** 			clr_dot(i);
 8391              		.loc 1 2248 15 discriminator 3 view .LVU2702
2248:src/display.c **** 			clr_dot(i);
 8392              		.loc 1 2248 3 is_stmt 0 discriminator 3 view .LVU2703
 8393 00c6 832E     		cmp	r6, #131
 8394 00c8 F9D1     		bne	.L811
 8395 00ca 8F4E     		ldr	r6, .L1099+8
 8396              	.LVL933:
2248:src/display.c **** 			clr_dot(i);
 8397              		.loc 1 2248 3 discriminator 3 view .LVU2704
 8398 00cc DFF85882 		ldr	r8, .L1099+40
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8399              		.loc 1 2220 6 view .LVU2705
 8400 00d0 0025     		movs	r5, #0
 8401              	.LVL934:
 8402              	.L812:
2464:src/display.c **** 			if (p == NULL || cata) {
 8403              		.loc 1 2464 4 is_stmt 1 view .LVU2706
2464:src/display.c **** 			if (p == NULL || cata) {
 8404              		.loc 1 2464 8 is_stmt 0 view .LVU2707
 8405 00d2 FFF7FEFF 		bl	get_cmdline
 8406              	.LVL935:
2465:src/display.c **** 				if (ShowRegister != -1) {
 8407              		.loc 1 2465 4 is_stmt 1 view .LVU2708
2465:src/display.c **** 				if (ShowRegister != -1) {
 8408              		.loc 1 2465 7 is_stmt 0 view .LVU2709
 8409 00d6 8246     		mov	r10, r0
 8410 00d8 10B1     		cbz	r0, .L893
2465:src/display.c **** 				if (ShowRegister != -1) {
 8411              		.loc 1 2465 18 discriminator 1 view .LVU2710
 8412 00da B9F1000F 		cmp	r9, #0
 8413 00de 2ED0     		beq	.L894
 8414              	.L893:
2466:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8415              		.loc 1 2466 5 is_stmt 1 view .LVU2711
2466:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8416              		.loc 1 2466 22 is_stmt 0 view .LVU2712
 8417 00e0 DFF84892 		ldr	r9, .L1099+44
 8418              	.LVL936:
2466:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8419              		.loc 1 2466 22 view .LVU2713
 8420 00e4 D9F80000 		ldr	r0, [r9]
 8421              	.LVL937:
2466:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8422              		.loc 1 2466 8 view .LVU2714
 8423 00e8 421C     		adds	r2, r0, #1
 8424 00ea 00F05081 		beq	.L895
2467:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8425              		.loc 1 2467 6 is_stmt 1 view .LVU2715
2467:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8426              		.loc 1 2467 42 is_stmt 0 view .LVU2716
 8427 00ee 6428     		cmp	r0, #100
 8428 00f0 00F08780 		beq	.L1072
 8429              	.L896:
2468:src/display.c **** 				}
ARM GAS  /tmp/ccAnlOT7.s 			page 243


 8430              		.loc 1 2468 6 is_stmt 1 view .LVU2717
 8431 00f4 0021     		movs	r1, #0
 8432 00f6 FFF7FEFF 		bl	format_reg
 8433              	.LVL938:
2476:src/display.c **** 				goto finish;
 8434              		.loc 1 2476 4 view .LVU2718
2476:src/display.c **** 				goto finish;
 8435              		.loc 1 2476 7 is_stmt 0 view .LVU2719
 8436 00fa 3B68     		ldr	r3, [r7]
 8437 00fc 002B     		cmp	r3, #0
 8438 00fe 00F0FC80 		beq	.L1055
 8439              	.LVL939:
 8440              	.L899:
2529:src/display.c **** 	State2.disp_as_alpha = 0;
 8441              		.loc 1 2529 2 is_stmt 1 view .LVU2720
2530:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8442              		.loc 1 2530 2 view .LVU2721
2531:src/display.c **** 	State2.invalid_disp = 0;
 8443              		.loc 1 2531 2 view .LVU2722
2529:src/display.c **** 	State2.disp_as_alpha = 0;
 8444              		.loc 1 2529 17 is_stmt 0 view .LVU2723
 8445 0102 6369     		ldr	r3, [r4, #20]
 8446 0104 23F02173 		bic	r3, r3, #42205184
 8447 0108 23F48053 		bic	r3, r3, #4096
2531:src/display.c **** 	State2.invalid_disp = 0;
 8448              		.loc 1 2531 15 view .LVU2724
 8449 010c 0022     		movs	r2, #0
2529:src/display.c **** 	State2.disp_as_alpha = 0;
 8450              		.loc 1 2529 17 view .LVU2725
 8451 010e 6361     		str	r3, [r4, #20]
2533:src/display.c **** 	DispMsg = CNULL;
 8452              		.loc 1 2533 15 view .LVU2726
 8453 0110 6423     		movs	r3, #100
2531:src/display.c **** 	State2.invalid_disp = 0;
 8454              		.loc 1 2531 15 view .LVU2727
 8455 0112 6274     		strb	r2, [r4, #17]
2532:src/display.c **** 	ShowRegister = regX_idx;
 8456              		.loc 1 2532 2 is_stmt 1 view .LVU2728
2533:src/display.c **** 	DispMsg = CNULL;
 8457              		.loc 1 2533 2 view .LVU2729
2534:src/display.c **** 	DispPlot = 0;
 8458              		.loc 1 2534 10 is_stmt 0 view .LVU2730
 8459 0114 3260     		str	r2, [r6]
2535:src/display.c **** 	State2.disp_small = 0;
 8460              		.loc 1 2535 11 view .LVU2731
 8461 0116 A8F80020 		strh	r2, [r8]	@ movhi
2533:src/display.c **** 	DispMsg = CNULL;
 8462              		.loc 1 2533 15 view .LVU2732
 8463 011a C9F80030 		str	r3, [r9]
2534:src/display.c **** 	DispPlot = 0;
 8464              		.loc 1 2534 2 is_stmt 1 view .LVU2733
2535:src/display.c **** 	State2.disp_small = 0;
 8465              		.loc 1 2535 2 view .LVU2734
2536:src/display.c **** 	finish_display();
 8466              		.loc 1 2536 2 view .LVU2735
2537:src/display.c **** #ifdef CONSOLE
 8467              		.loc 1 2537 2 view .LVU2736
ARM GAS  /tmp/ccAnlOT7.s 			page 244


 8468 011e FFF7FEFF 		bl	finish_display
 8469              	.LVL940:
2541:src/display.c **** 
 8470              		.loc 1 2541 1 is_stmt 0 view .LVU2737
 8471 0122 29B0     		add	sp, sp, #164
 8472              		.cfi_remember_state
 8473              		.cfi_def_cfa_offset 36
 8474              		@ sp needed
 8475 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8476              	.LVL941:
 8477              	.L1058:
 8478              		.cfi_restore_state
2229:src/display.c **** 		State2.disp_temp = 1;
 8479              		.loc 1 2229 3 is_stmt 1 view .LVU2738
2230:src/display.c **** #ifdef CONSOLE
 8480              		.loc 1 2230 3 view .LVU2739
2234:src/display.c **** 		return;
 8481              		.loc 1 2234 11 is_stmt 0 view .LVU2740
 8482 0128 784A     		ldr	r2, .L1099+12
2229:src/display.c **** 		State2.disp_temp = 1;
 8483              		.loc 1 2229 22 view .LVU2741
 8484 012a 23F03003 		bic	r3, r3, #48
 8485 012e 43F02003 		orr	r3, r3, #32
2234:src/display.c **** 		return;
 8486              		.loc 1 2234 11 view .LVU2742
 8487 0132 0021     		movs	r1, #0
2229:src/display.c **** 		State2.disp_temp = 1;
 8488              		.loc 1 2229 22 view .LVU2743
 8489 0134 E375     		strb	r3, [r4, #23]
2234:src/display.c **** 		return;
 8490              		.loc 1 2234 3 is_stmt 1 view .LVU2744
2234:src/display.c **** 		return;
 8491              		.loc 1 2234 11 is_stmt 0 view .LVU2745
 8492 0136 1160     		str	r1, [r2]
2235:src/display.c **** 	}
 8493              		.loc 1 2235 3 is_stmt 1 view .LVU2746
2541:src/display.c **** 
 8494              		.loc 1 2541 1 is_stmt 0 view .LVU2747
 8495 0138 29B0     		add	sp, sp, #164
 8496              		.cfi_remember_state
 8497              		.cfi_def_cfa_offset 36
 8498              		@ sp needed
 8499 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8500              	.LVL942:
 8501              	.L894:
 8502              		.cfi_restore_state
2473:src/display.c **** 				x_disp = 1;
 8503              		.loc 1 2473 5 is_stmt 1 view .LVU2748
 8504              	.LBB466:
 8505              	.LBI466:
 885:src/display.c **** 	int i;
 8506              		.loc 1 885 13 view .LVU2749
 8507              	.LBB467:
 886:src/display.c **** 	int gotdot = -1;
 8508              		.loc 1 886 2 view .LVU2750
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8509              		.loc 1 887 2 view .LVU2751
ARM GAS  /tmp/ccAnlOT7.s 			page 245


 889:src/display.c **** #endif
 8510              		.loc 1 889 2 view .LVU2752
 893:src/display.c **** #endif
 8511              		.loc 1 893 2 view .LVU2753
 896:src/display.c **** 		SET_MANT_SIGN;
 8512              		.loc 1 896 2 view .LVU2754
 896:src/display.c **** 		SET_MANT_SIGN;
 8513              		.loc 1 896 5 is_stmt 0 view .LVU2755
 8514 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8515 0140 2D2B     		cmp	r3, #45
 8516 0142 00F03E82 		beq	.L1073
 8517              	.LVL943:
 8518              	.L900:
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8519              		.loc 1 901 2 is_stmt 1 view .LVU2756
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8520              		.loc 1 901 6 is_stmt 0 view .LVU2757
 8521 0146 724B     		ldr	r3, .L1099+16
 8522 0148 1B68     		ldr	r3, [r3]
 8523 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8524              		.loc 1 901 5 view .LVU2758
 8525 014e 13F00109 		ands	r9, r3, #1
 8526              	.LVL944:
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8527              		.loc 1 901 5 view .LVU2759
 8528 0152 00F0AC81 		beq	.L901
 8529              	.LVL945:
 902:src/display.c **** 			set_dig(i, *p);
 8530              		.loc 1 902 13 is_stmt 1 view .LVU2760
 8531 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 902:src/display.c **** 			set_dig(i, *p);
 8532              		.loc 1 902 9 is_stmt 0 view .LVU2761
 8533 015a 4FF00009 		mov	r9, #0
 902:src/display.c **** 			set_dig(i, *p);
 8534              		.loc 1 902 3 view .LVU2762
 8535 015e 41B1     		cbz	r1, .L905
 8536              	.LVL946:
 8537              	.L902:
 903:src/display.c **** 			i += SEGS_PER_DIGIT;
 8538              		.loc 1 903 4 is_stmt 1 view .LVU2763
 8539 0160 4846     		mov	r0, r9
 8540 0162 FFF7FEFF 		bl	set_dig
 8541              	.LVL947:
 904:src/display.c **** 		}
 8542              		.loc 1 904 4 view .LVU2764
 902:src/display.c **** 			set_dig(i, *p);
 8543              		.loc 1 902 13 is_stmt 0 view .LVU2765
 8544 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8545              	.LVL948:
 904:src/display.c **** 		}
 8546              		.loc 1 904 6 view .LVU2766
 8547 016a 09F10909 		add	r9, r9, #9
 8548              	.LVL949:
 902:src/display.c **** 			set_dig(i, *p);
 8549              		.loc 1 902 25 is_stmt 1 view .LVU2767
 902:src/display.c **** 			set_dig(i, *p);
ARM GAS  /tmp/ccAnlOT7.s 			page 246


 8550              		.loc 1 902 13 view .LVU2768
 902:src/display.c **** 			set_dig(i, *p);
 8551              		.loc 1 902 3 is_stmt 0 view .LVU2769
 8552 016e 0029     		cmp	r1, #0
 8553 0170 F6D1     		bne	.L902
 8554              	.LVL950:
 8555              	.L905:
 906:src/display.c **** 	} else {
 8556              		.loc 1 906 3 is_stmt 1 view .LVU2770
 8557 0172 FFF7FEFF 		bl	carry_overflow
 8558              	.LVL951:
 906:src/display.c **** 	} else {
 8559              		.loc 1 906 3 is_stmt 0 view .LVU2771
 8560              	.LBE467:
 8561              	.LBE466:
2476:src/display.c **** 				goto finish;
 8562              		.loc 1 2476 4 is_stmt 1 view .LVU2772
2476:src/display.c **** 				goto finish;
 8563              		.loc 1 2476 7 is_stmt 0 view .LVU2773
 8564 0176 3B68     		ldr	r3, [r7]
 8565 0178 DFF8B091 		ldr	r9, .L1099+44
 8566 017c 002B     		cmp	r3, #0
 8567 017e C0D1     		bne	.L899
 8568              	.LVL952:
 8569              	.L904:
2506:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8570              		.loc 1 2506 2 is_stmt 1 view .LVU2774
 8571 0180 FFF7FEFF 		bl	set_annunciators
 8572              	.LVL953:
2507:src/display.c **** 		ShowRPN = 0;
 8573              		.loc 1 2507 2 view .LVU2775
2507:src/display.c **** 		ShowRPN = 0;
 8574              		.loc 1 2507 50 is_stmt 0 view .LVU2776
 8575 0184 3368     		ldr	r3, [r6]
 8576 0186 002B     		cmp	r3, #0
 8577 0188 00F00981 		beq	.L1074
 8578              	.LVL954:
 8579              	.L815:
2508:src/display.c **** 		dot(RPN, 0);
 8580              		.loc 1 2508 3 is_stmt 1 view .LVU2777
2508:src/display.c **** 		dot(RPN, 0);
 8581              		.loc 1 2508 11 is_stmt 0 view .LVU2778
 8582 018c 5F4F     		ldr	r7, .L1099+12
 8583 018e 0023     		movs	r3, #0
 8584              	.LBB490:
 8585              	.LBB491:
 329:src/display.c **** }
 8586              		.loc 1 329 7 view .LVU2779
 8587 0190 8D20     		movs	r0, #141
 8588              	.LBE491:
 8589              	.LBE490:
2508:src/display.c **** 		dot(RPN, 0);
 8590              		.loc 1 2508 11 view .LVU2780
 8591 0192 3B60     		str	r3, [r7]
2509:src/display.c **** 	}
 8592              		.loc 1 2509 3 is_stmt 1 view .LVU2781
 8593              	.LVL955:
ARM GAS  /tmp/ccAnlOT7.s 			page 247


 8594              	.LBB493:
 8595              	.LBI490:
 327:src/display.c **** 	if (on)	set_dot(n);
 8596              		.loc 1 327 6 view .LVU2782
 8597              	.LBB492:
 328:src/display.c **** 	else	clr_dot(n);
 8598              		.loc 1 328 2 view .LVU2783
 329:src/display.c **** }
 8599              		.loc 1 329 7 view .LVU2784
 8600 0194 FFF7FEFF 		bl	clr_dot
 8601              	.LVL956:
 8602              	.L932:
 329:src/display.c **** }
 8603              		.loc 1 329 7 is_stmt 0 view .LVU2785
 8604              	.LBE492:
 8605              	.LBE493:
2512:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8606              		.loc 1 2512 2 is_stmt 1 view .LVU2786
2513:src/display.c **** 
 8607              		.loc 1 2513 14 is_stmt 0 view .LVU2787
 8608 0198 3B68     		ldr	r3, [r7]
 8609 019a 002B     		cmp	r3, #0
 8610 019c 4BD1     		bne	.L950
2512:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8611              		.loc 1 2512 31 view .LVU2788
 8612 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8613 01a0 12F04003 		ands	r3, r2, #64
 8614 01a4 08D0     		beq	.L933
2513:src/display.c **** 
 8615              		.loc 1 2513 18 view .LVU2789
 8616 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2513:src/display.c **** 
 8617              		.loc 1 2513 14 view .LVU2790
 8618 01a8 1B07     		lsls	r3, r3, #28
 8619 01aa 40F1EE80 		bpl	.L952
2513:src/display.c **** 
 8620              		.loc 1 2513 40 discriminator 3 view .LVU2791
 8621 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8622 01b0 012B     		cmp	r3, #1
 8623 01b2 01D0     		beq	.L933
2513:src/display.c **** 
 8624              		.loc 1 2513 70 discriminator 5 view .LVU2792
 8625 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8626              	.L933:
2512:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8627              		.loc 1 2512 19 discriminator 9 view .LVU2793
 8628 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8629 01ba 63F34512 		bfi	r2, r3, #5, #1
 8630 01be E275     		strb	r2, [r4, #23]
2516:src/display.c ****  		annunciators();
 8631              		.loc 1 2516 2 is_stmt 1 discriminator 9 view .LVU2794
2516:src/display.c ****  		annunciators();
 8632              		.loc 1 2516 5 is_stmt 0 discriminator 9 view .LVU2795
 8633 01c0 002D     		cmp	r5, #0
 8634 01c2 33D0     		beq	.L934
2516:src/display.c ****  		annunciators();
 8635              		.loc 1 2516 36 discriminator 1 view .LVU2796
ARM GAS  /tmp/ccAnlOT7.s 			page 248


 8636 01c4 D3B2     		uxtb	r3, r2
2516:src/display.c ****  		annunciators();
 8637              		.loc 1 2516 13 discriminator 1 view .LVU2797
 8638 01c6 03F02103 		and	r3, r3, #33
 8639 01ca 202B     		cmp	r3, #32
 8640 01cc 2ED0     		beq	.L934
 8641              	.L935:
2517:src/display.c ****  	State2.hms = 0;
 8642              		.loc 1 2517 4 is_stmt 1 view .LVU2798
 8643 01ce FFF7FEFF 		bl	annunciators
 8644              	.LVL957:
 8645              	.L936:
2518:src/display.c **** #else
 8646              		.loc 1 2518 3 view .LVU2799
2518:src/display.c **** #else
 8647              		.loc 1 2518 14 is_stmt 0 view .LVU2800
 8648 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8649 01d4 6FF30003 		bfc	r3, #0, #1
 8650 01d8 E375     		strb	r3, [r4, #23]
 8651 01da 92E7     		b	.L899
 8652              	.LVL958:
 8653              	.L1063:
2277:src/display.c **** 		if (! State2.dot)
 8654              		.loc 1 2277 3 is_stmt 1 view .LVU2801
2277:src/display.c **** 		if (! State2.dot)
 8655              		.loc 1 2277 8 is_stmt 0 view .LVU2802
 8656 01dc 4D49     		ldr	r1, .L1099+20
 8657 01de 4046     		mov	r0, r8
 8658 01e0 FFF7FEFF 		bl	scopy
 8659              	.LVL959:
2278:src/display.c **** 			*bp++ = '\235';
 8660              		.loc 1 2278 7 view .LVU2803
 8661 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8662              	.LVL960:
2278:src/display.c **** 			*bp++ = '\235';
 8663              		.loc 1 2278 3 is_stmt 1 view .LVU2804
2278:src/display.c **** 			*bp++ = '\235';
 8664              		.loc 1 2278 6 is_stmt 0 view .LVU2805
 8665 01e6 5B06     		lsls	r3, r3, #25
 8666 01e8 40F1FD80 		bpl	.L819
 8667              	.LVL961:
 8668              	.L1050:
2278:src/display.c **** 			*bp++ = '\235';
 8669              		.loc 1 2278 6 view .LVU2806
 8670 01ec 464E     		ldr	r6, .L1099+8
 8671 01ee DFF83881 		ldr	r8, .L1099+40
 8672              	.L820:
2280:src/display.c **** 	} else if (State2.gtodot) {
 8673              		.loc 1 2280 3 is_stmt 1 view .LVU2807
 8674 01f2 1EA8     		add	r0, sp, #120
 8675 01f4 FFF7FEFF 		bl	set_status
 8676              	.LVL962:
2459:src/display.c **** nostk:	show_flags();
 8677              		.loc 1 2459 2 view .LVU2808
 8678 01f8 FFF7FEFF 		bl	show_stack
 8679              	.LVL963:
2460:src/display.c **** 	if (!skip) {
ARM GAS  /tmp/ccAnlOT7.s 			page 249


 8680              		.loc 1 2460 8 view .LVU2809
 8681 01fc FFF7FEFF 		bl	show_flags
 8682              	.LVL964:
2461:src/display.c **** 		if (State2.runmode) {
 8683              		.loc 1 2461 2 view .LVU2810
 8684 0200 25E0     		b	.L817
 8685              	.LVL965:
 8686              	.L1072:
2467:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8687              		.loc 1 2467 45 is_stmt 0 discriminator 1 view .LVU2811
 8688 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2467:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8689              		.loc 1 2467 42 discriminator 1 view .LVU2812
 8690 0204 13F00101 		ands	r1, r3, #1
 8691 0208 7FF474AF 		bne	.L896
 8692              	.LVL966:
2468:src/display.c **** 				}
 8693              		.loc 1 2468 6 is_stmt 1 view .LVU2813
 8694 020c FFF7FEFF 		bl	format_reg
 8695              	.LVL967:
2476:src/display.c **** 				goto finish;
 8696              		.loc 1 2476 4 view .LVU2814
2476:src/display.c **** 				goto finish;
 8697              		.loc 1 2476 7 is_stmt 0 view .LVU2815
 8698 0210 3B68     		ldr	r3, [r7]
 8699 0212 002B     		cmp	r3, #0
 8700 0214 B4D0     		beq	.L904
 8701 0216 74E7     		b	.L899
 8702              	.LVL968:
 8703              	.L1060:
2259:src/display.c **** 		set_status(buf);
 8704              		.loc 1 2259 3 is_stmt 1 view .LVU2816
2259:src/display.c **** 		set_status(buf);
 8705              		.loc 1 2259 9 is_stmt 0 view .LVU2817
 8706 0218 1423     		movs	r3, #20
2260:src/display.c **** 	}
 8707              		.loc 1 2260 3 view .LVU2818
 8708 021a 1EA8     		add	r0, sp, #120
2259:src/display.c **** 		set_status(buf);
 8709              		.loc 1 2259 9 view .LVU2819
 8710 021c 8DF87830 		strb	r3, [sp, #120]
2260:src/display.c **** 	}
 8711              		.loc 1 2260 3 is_stmt 1 view .LVU2820
2259:src/display.c **** 		set_status(buf);
 8712              		.loc 1 2259 6 is_stmt 0 view .LVU2821
 8713 0220 0DF17908 		add	r8, sp, #121
 8714              	.LVL969:
2260:src/display.c **** 	}
 8715              		.loc 1 2260 3 view .LVU2822
 8716 0224 FFF7FEFF 		bl	set_status
 8717              	.LVL970:
 8718 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8719 022a 0BE7     		b	.L813
 8720              	.LVL971:
 8721              	.L934:
2516:src/display.c ****  		annunciators();
 8722              		.loc 1 2516 52 discriminator 3 view .LVU2823
ARM GAS  /tmp/ccAnlOT7.s 			page 250


 8723 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8724 022e 13F0C00F 		tst	r3, #192
 8725 0232 CED0     		beq	.L936
 8726 0234 CBE7     		b	.L935
 8727              	.L950:
 8728 0236 0023     		movs	r3, #0
 8729 0238 BEE7     		b	.L933
 8730              	.LVL972:
 8731              	.L1062:
2275:src/display.c **** 	} else if (State2.hyp) {
 8732              		.loc 1 2275 3 is_stmt 1 view .LVU2824
 8733 023a 3748     		ldr	r0, .L1099+24
 8734 023c 324E     		ldr	r6, .L1099+8
 8735 023e DFF8E880 		ldr	r8, .L1099+40
 8736              	.LVL973:
2275:src/display.c **** 	} else if (State2.hyp) {
 8737              		.loc 1 2275 3 is_stmt 0 view .LVU2825
 8738 0242 FFF7FEFF 		bl	set_status
 8739              	.LVL974:
2459:src/display.c **** nostk:	show_flags();
 8740              		.loc 1 2459 2 is_stmt 1 view .LVU2826
 8741 0246 FFF7FEFF 		bl	show_stack
 8742              	.LVL975:
2460:src/display.c **** 	if (!skip) {
 8743              		.loc 1 2460 8 view .LVU2827
 8744 024a FFF7FEFF 		bl	show_flags
 8745              	.LVL976:
2461:src/display.c **** 		if (State2.runmode) {
 8746              		.loc 1 2461 2 view .LVU2828
 8747              	.L817:
2462:src/display.c **** only_update_x:
 8748              		.loc 1 2462 3 view .LVU2829
2462:src/display.c **** only_update_x:
 8749              		.loc 1 2462 7 is_stmt 0 view .LVU2830
 8750 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2462:src/display.c **** only_update_x:
 8751              		.loc 1 2462 6 view .LVU2831
 8752 0250 13F0400A 		ands	r10, r3, #64
 8753 0254 7FF43DAF 		bne	.L812
 8754              	.LBB494:
2480:src/display.c **** 			unsigned int upc = user_pc(pc);
 8755              		.loc 1 2480 4 is_stmt 1 view .LVU2832
2480:src/display.c **** 			unsigned int upc = user_pc(pc);
 8756              		.loc 1 2480 22 is_stmt 0 view .LVU2833
 8757 0258 2D4B     		ldr	r3, .L1099+16
2484:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8758              		.loc 1 2484 4 view .LVU2834
 8759 025a DFF8D490 		ldr	r9, .L1099+48
 8760              	.LVL977:
2480:src/display.c **** 			unsigned int upc = user_pc(pc);
 8761              		.loc 1 2480 22 view .LVU2835
 8762 025e 1B68     		ldr	r3, [r3]
2480:src/display.c **** 			unsigned int upc = user_pc(pc);
 8763              		.loc 1 2480 17 view .LVU2836
 8764 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8765              	.LVL978:
2481:src/display.c **** 			const int n = nLIB(pc);
ARM GAS  /tmp/ccAnlOT7.s 			page 251


 8766              		.loc 1 2481 4 is_stmt 1 view .LVU2837
2481:src/display.c **** 			const int n = nLIB(pc);
 8767              		.loc 1 2481 23 is_stmt 0 view .LVU2838
 8768 0264 3846     		mov	r0, r7
 8769 0266 FFF7FEFF 		bl	user_pc
 8770              	.LVL979:
2483:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8771              		.loc 1 2483 4 view .LVU2839
 8772 026a 2822     		movs	r2, #40
 8773 026c 5146     		mov	r1, r10
2481:src/display.c **** 			const int n = nLIB(pc);
 8774              		.loc 1 2481 23 view .LVU2840
 8775 026e 8346     		mov	fp, r0
2483:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8776              		.loc 1 2483 4 view .LVU2841
 8777 0270 1EA8     		add	r0, sp, #120
 8778 0272 FFF7FEFF 		bl	xset
 8779              	.LVL980:
2482:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8780              		.loc 1 2482 18 view .LVU2842
 8781 0276 BF0B     		lsrs	r7, r7, #14
 8782              	.LVL981:
2482:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8783              		.loc 1 2482 4 is_stmt 1 view .LVU2843
2483:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8784              		.loc 1 2483 4 view .LVU2844
2484:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8785              		.loc 1 2484 4 view .LVU2845
 8786 0278 D9F80000 		ldr	r0, [r9]
 8787 027c 5246     		mov	r2, r10
 8788 027e 0121     		movs	r1, #1
 8789 0280 FFF7FEFF 		bl	set_exp
 8790              	.LVL982:
2485:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8791              		.loc 1 2485 4 view .LVU2846
 8792 0284 002F     		cmp	r7, #0
 8793 0286 40F0B480 		bne	.L1075
 8794 028a 2449     		ldr	r1, .L1099+28
 8795 028c 1EA8     		add	r0, sp, #120
 8796 028e FFF7FEFF 		bl	scopy_spc
 8797              	.LVL983:
 8798 0292 0322     		movs	r2, #3
 8799 0294 5946     		mov	r1, fp
 8800 0296 FFF7FEFF 		bl	num_arg_0
 8801              	.LVL984:
2487:src/display.c **** #ifndef REALBUILD
 8802              		.loc 1 2487 4 view .LVU2847
 8803 029a 0921     		movs	r1, #9
 8804 029c 1EA8     		add	r0, sp, #120
 8805 029e FFF7FEFF 		bl	set_digits_string
 8806              	.LVL985:
2489:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8807              		.loc 1 2489 4 view .LVU2848
 8808 02a2 3946     		mov	r1, r7
 8809 02a4 2822     		movs	r2, #40
 8810 02a6 1EA8     		add	r0, sp, #120
 8811 02a8 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccAnlOT7.s 			page 252


 8812              	.LVL986:
2490:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8813              		.loc 1 2490 4 view .LVU2849
 8814 02ac 3A46     		mov	r2, r7
 8815 02ae 0121     		movs	r1, #1
 8816 02b0 D9F80000 		ldr	r0, [r9]
 8817 02b4 FFF7FEFF 		bl	set_exp
 8818              	.LVL987:
2491:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8819              		.loc 1 2491 4 view .LVU2850
 8820 02b8 1949     		ldr	r1, .L1099+32
2485:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8821              		.loc 1 2485 4 is_stmt 0 view .LVU2851
 8822 02ba 0327     		movs	r7, #3
 8823              	.LVL988:
 8824              	.L938:
2491:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8825              		.loc 1 2491 4 discriminator 4 view .LVU2852
 8826 02bc 1EA8     		add	r0, sp, #120
 8827 02be FFF7FEFF 		bl	scopy_spc
 8828              	.LVL989:
 8829 02c2 3A46     		mov	r2, r7
 8830 02c4 5946     		mov	r1, fp
 8831 02c6 FFF7FEFF 		bl	num_arg_0
 8832              	.LVL990:
 8833              	.LBB495:
2494:src/display.c **** 			  char *l=LastDisplayedNumber;
 8834              		.loc 1 2494 6 is_stmt 1 discriminator 4 view .LVU2853
2495:src/display.c **** 			  *l++=' ';
 8835              		.loc 1 2495 6 discriminator 4 view .LVU2854
2496:src/display.c **** 			  while(*b) {
 8836              		.loc 1 2496 6 discriminator 4 view .LVU2855
2496:src/display.c **** 			  while(*b) {
 8837              		.loc 1 2496 10 is_stmt 0 discriminator 4 view .LVU2856
 8838 02ca 164B     		ldr	r3, .L1099+36
2497:src/display.c **** 				  *l++=*b++;
 8839              		.loc 1 2497 12 discriminator 4 view .LVU2857
 8840 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2496:src/display.c **** 			  while(*b) {
 8841              		.loc 1 2496 10 discriminator 4 view .LVU2858
 8842 02d0 2027     		movs	r7, #32
 8843 02d2 1F70     		strb	r7, [r3]
2497:src/display.c **** 				  *l++=*b++;
 8844              		.loc 1 2497 6 is_stmt 1 discriminator 4 view .LVU2859
2497:src/display.c **** 				  *l++=*b++;
 8845              		.loc 1 2497 11 discriminator 4 view .LVU2860
 8846 02d4 0029     		cmp	r1, #0
 8847 02d6 00F04782 		beq	.L949
 8848 02da 0333     		adds	r3, r3, #3
 8849 02dc 1EA8     		add	r0, sp, #120
 8850              	.LVL991:
 8851              	.L931:
2498:src/display.c **** 				  *l++=' ';
 8852              		.loc 1 2498 7 view .LVU2861
2498:src/display.c **** 				  *l++=' ';
 8853              		.loc 1 2498 11 is_stmt 0 view .LVU2862
 8854 02de 03F8021C 		strb	r1, [r3, #-2]
ARM GAS  /tmp/ccAnlOT7.s 			page 253


2499:src/display.c **** 			  }
 8855              		.loc 1 2499 7 is_stmt 1 view .LVU2863
 8856              	.LVL992:
2497:src/display.c **** 				  *l++=*b++;
 8857              		.loc 1 2497 12 is_stmt 0 view .LVU2864
 8858 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8859              	.LVL993:
2499:src/display.c **** 			  }
 8860              		.loc 1 2499 11 view .LVU2865
 8861 02e6 03F8017C 		strb	r7, [r3, #-1]
2497:src/display.c **** 				  *l++=*b++;
 8862              		.loc 1 2497 11 is_stmt 1 view .LVU2866
 8863 02ea 1A46     		mov	r2, r3
 8864 02ec 0233     		adds	r3, r3, #2
 8865              	.LVL994:
2497:src/display.c **** 				  *l++=*b++;
 8866              		.loc 1 2497 11 is_stmt 0 view .LVU2867
 8867 02ee 0029     		cmp	r1, #0
 8868 02f0 F5D1     		bne	.L931
 8869              	.LVL995:
 8870              	.L930:
2501:src/display.c ****       }
 8871              		.loc 1 2501 6 is_stmt 1 view .LVU2868
2501:src/display.c ****       }
 8872              		.loc 1 2501 8 is_stmt 0 view .LVU2869
 8873 02f2 0023     		movs	r3, #0
 8874 02f4 DFF83490 		ldr	r9, .L1099+44
 8875 02f8 1370     		strb	r3, [r2]
 8876              	.LVL996:
2501:src/display.c ****       }
 8877              		.loc 1 2501 8 view .LVU2870
 8878              	.LBE495:
 8879              	.LBE494:
2506:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8880              		.loc 1 2506 2 is_stmt 1 view .LVU2871
 8881              	.L1055:
2506:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8882              		.loc 1 2506 2 is_stmt 0 view .LVU2872
 8883 02fa FFF7FEFF 		bl	set_annunciators
 8884              	.LVL997:
2507:src/display.c **** 		ShowRPN = 0;
 8885              		.loc 1 2507 2 is_stmt 1 view .LVU2873
 8886 02fe 45E7     		b	.L815
 8887              	.L1100:
 8888              		.align	2
 8889              	.L1099:
 8890 0300 00000000 		.word	StateWhileOn
 8891 0304 00000000 		.word	WasDataEntry
 8892 0308 00000000 		.word	DispMsg
 8893 030c 00000000 		.word	ShowRPN
 8894 0310 00000000 		.word	main_ram
 8895 0314 38000000 		.word	.LC26
 8896 0318 00000000 		.word	.LANCHOR20
 8897 031c 00000000 		.word	.LANCHOR24
 8898 0320 00000000 		.word	.LANCHOR18
 8899 0324 00000000 		.word	LastDisplayedNumber
 8900 0328 00000000 		.word	DispPlot
ARM GAS  /tmp/ccAnlOT7.s 			page 254


 8901 032c 00000000 		.word	ShowRegister
 8902 0330 00000000 		.word	ProgFree
 8903              	.LVL998:
 8904              	.L1061:
 8905              	.LBB497:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8906              		.loc 1 2263 3 view .LVU2874
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8907              		.loc 1 2263 8 is_stmt 0 view .LVU2875
 8908 0334 C14B     		ldr	r3, .L1101
 8909 0336 C24E     		ldr	r6, .L1101+4
 8910 0338 DFF85083 		ldr	r8, .L1101+80
 8911              	.LVL999:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8912              		.loc 1 2263 8 view .LVU2876
 8913 033c DFF85093 		ldr	r9, .L1101+84
 8914              	.LVL1000:
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8915              		.loc 1 2263 8 view .LVU2877
 8916 0340 93E80700 		ldm	r3, {r0, r1, r2}
 8917 0344 15AB     		add	r3, sp, #84
 8918 0346 03C3     		stmia	r3!, {r0, r1}
 8919 0348 0021     		movs	r1, #0
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8920              		.loc 1 2264 3 view .LVU2878
 8921 034a BE48     		ldr	r0, .L1101+8
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8922              		.loc 1 2263 8 view .LVU2879
 8923 034c 1A80     		strh	r2, [r3]	@ movhi
 8924 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8925              		.loc 1 2264 3 is_stmt 1 view .LVU2880
 8926 0352 FFF7FEFF 		bl	set_digits_string
 8927              	.LVL1001:
2265:src/display.c **** #ifndef REALBUILD
 8928              		.loc 1 2265 3 view .LVU2881
 8929              	.LBB498:
 8930              	.LBI498:
 395:src/display.c **** 	if (res) *res++ = ch;
 8931              		.loc 1 395 14 view .LVU2882
 8932              	.LBB499:
 396:src/display.c **** 	else	set_dig(base, ch);
 8933              		.loc 1 396 2 view .LVU2883
 397:src/display.c **** 	return res;
 8934              		.loc 1 397 7 view .LVU2884
 8935 0356 7221     		movs	r1, #114
 8936 0358 6C20     		movs	r0, #108
 8937 035a FFF7FEFF 		bl	set_dig
 8938              	.LVL1002:
 398:src/display.c **** }
 8939              		.loc 1 398 2 view .LVU2885
 398:src/display.c **** }
 8940              		.loc 1 398 2 is_stmt 0 view .LVU2886
 8941              	.LBE499:
 8942              	.LBE498:
2267:src/display.c **** 		scopy(LastDisplayedExponent, " ");
 8943              		.loc 1 2267 3 is_stmt 1 view .LVU2887
ARM GAS  /tmp/ccAnlOT7.s 			page 255


 8944 035e BA49     		ldr	r1, .L1101+12
 8945 0360 BA48     		ldr	r0, .L1101+16
 8946 0362 FFF7FEFF 		bl	scopy
 8947              	.LVL1003:
2268:src/display.c **** #endif
 8948              		.loc 1 2268 3 view .LVU2888
 8949 0366 BA49     		ldr	r1, .L1101+20
 8950 0368 BA48     		ldr	r0, .L1101+24
 8951 036a FFF7FEFF 		bl	scopy
 8952              	.LVL1004:
2270:src/display.c **** 		set_status(vers);
 8953              		.loc 1 2270 3 view .LVU2889
 8954 036e BA49     		ldr	r1, .L1101+28
 8955 0370 0422     		movs	r2, #4
 8956 0372 0DF15D00 		add	r0, sp, #93
 8957 0376 FFF7FEFF 		bl	xcopy
 8958              	.LVL1005:
2271:src/display.c **** 		skip = 1;
 8959              		.loc 1 2271 3 view .LVU2890
 8960 037a 15A8     		add	r0, sp, #84
 8961 037c FFF7FEFF 		bl	set_status
 8962              	.LVL1006:
2272:src/display.c **** 		goto nostk;
 8963              		.loc 1 2272 3 view .LVU2891
2273:src/display.c **** 	} else if (State2.confirm) {
 8964              		.loc 1 2273 3 view .LVU2892
2273:src/display.c **** 	} else if (State2.confirm) {
 8965              		.loc 1 2273 3 is_stmt 0 view .LVU2893
 8966              	.LBE497:
2460:src/display.c **** 	if (!skip) {
 8967              		.loc 1 2460 8 is_stmt 1 view .LVU2894
 8968 0380 FFF7FEFF 		bl	show_flags
 8969              	.LVL1007:
2461:src/display.c **** 		if (State2.runmode) {
 8970              		.loc 1 2461 2 view .LVU2895
2506:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8971              		.loc 1 2506 2 view .LVU2896
 8972 0384 FFF7FEFF 		bl	set_annunciators
 8973              	.LVL1008:
2507:src/display.c **** 		ShowRPN = 0;
 8974              		.loc 1 2507 2 view .LVU2897
 8975 0388 00E7     		b	.L815
 8976              	.LVL1009:
 8977              	.L952:
2507:src/display.c **** 		ShowRPN = 0;
 8978              		.loc 1 2507 2 is_stmt 0 view .LVU2898
 8979 038a 0123     		movs	r3, #1
 8980 038c 14E7     		b	.L933
 8981              	.LVL1010:
 8982              	.L895:
2471:src/display.c **** 			} else {
 8983              		.loc 1 2471 6 is_stmt 1 view .LVU2899
 8984 038e B348     		ldr	r0, .L1101+32
 8985 0390 2421     		movs	r1, #36
 8986 0392 FFF7FEFF 		bl	set_digits_string
 8987              	.LVL1011:
2476:src/display.c **** 				goto finish;
ARM GAS  /tmp/ccAnlOT7.s 			page 256


 8988              		.loc 1 2476 4 view .LVU2900
2476:src/display.c **** 				goto finish;
 8989              		.loc 1 2476 7 is_stmt 0 view .LVU2901
 8990 0396 3B68     		ldr	r3, [r7]
 8991 0398 002B     		cmp	r3, #0
 8992 039a AED0     		beq	.L1055
 8993 039c B1E6     		b	.L899
 8994              	.LVL1012:
 8995              	.L1074:
2507:src/display.c **** 		ShowRPN = 0;
 8996              		.loc 1 2507 69 discriminator 3 view .LVU2902
 8997 039e B8F90030 		ldrsh	r3, [r8]
 8998 03a2 002B     		cmp	r3, #0
 8999 03a4 7FF4F2AE 		bne	.L815
2507:src/display.c **** 		ShowRPN = 0;
 9000              		.loc 1 2507 81 discriminator 4 view .LVU2903
 9001 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9002 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9003 03ac 03F00403 		and	r3, r3, #4
 9004 03b0 1343     		orrs	r3, r3, r2
 9005 03b2 7FF4EBAE 		bne	.L815
 9006 03b6 AA4F     		ldr	r7, .L1101+36
 9007 03b8 EEE6     		b	.L932
 9008              	.LVL1013:
 9009              	.L1064:
2283:src/display.c **** 		if (State2.numdigit > 0)
 9010              		.loc 1 2283 3 is_stmt 1 view .LVU2904
2283:src/display.c **** 		if (State2.numdigit > 0)
 9011              		.loc 1 2283 8 is_stmt 0 view .LVU2905
 9012 03ba 2E22     		movs	r2, #46
 9013 03bc A949     		ldr	r1, .L1101+40
 9014 03be 4046     		mov	r0, r8
 9015 03c0 FFF7FEFF 		bl	scopy_char
 9016              	.LVL1014:
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9017              		.loc 1 2284 13 view .LVU2906
 9018 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2283:src/display.c **** 		if (State2.numdigit > 0)
 9019              		.loc 1 2283 8 view .LVU2907
 9020 03c6 0346     		mov	r3, r0
 9021              	.LVL1015:
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9022              		.loc 1 2284 3 is_stmt 1 view .LVU2908
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9023              		.loc 1 2284 6 is_stmt 0 view .LVU2909
 9024 03c8 002A     		cmp	r2, #0
 9025 03ca 4CD1     		bne	.L1076
 9026              	.L822:
2287:src/display.c **** 		set_status(buf);
 9027              		.loc 1 2287 4 is_stmt 1 view .LVU2910
 9028              	.LVL1016:
2287:src/display.c **** 		set_status(buf);
 9029              		.loc 1 2287 10 is_stmt 0 view .LVU2911
 9030 03cc 5F22     		movs	r2, #95
 9031 03ce 1A70     		strb	r2, [r3]
2288:src/display.c **** 	} else if (State2.rarg) {
 9032              		.loc 1 2288 3 is_stmt 1 view .LVU2912
ARM GAS  /tmp/ccAnlOT7.s 			page 257


 9033              	.LVL1017:
 9034              	.L838:
 9035              	.LBB500:
2373:src/display.c **** 	} else if (State2.multi) {
 9036              		.loc 1 2373 3 view .LVU2913
 9037 03d0 1EA8     		add	r0, sp, #120
 9038 03d2 FFF7FEFF 		bl	set_status
 9039              	.LVL1018:
2373:src/display.c **** 	} else if (State2.multi) {
 9040              		.loc 1 2373 3 is_stmt 0 view .LVU2914
 9041              	.LBE500:
2459:src/display.c **** nostk:	show_flags();
 9042              		.loc 1 2459 2 is_stmt 1 view .LVU2915
 9043 03d6 9A4E     		ldr	r6, .L1101+4
 9044 03d8 DFF8B082 		ldr	r8, .L1101+80
 9045 03dc FFF7FEFF 		bl	show_stack
 9046              	.LVL1019:
2460:src/display.c **** 	if (!skip) {
 9047              		.loc 1 2460 8 view .LVU2916
 9048 03e0 FFF7FEFF 		bl	show_flags
 9049              	.LVL1020:
2461:src/display.c **** 		if (State2.runmode) {
 9050              		.loc 1 2461 2 view .LVU2917
 9051 03e4 33E7     		b	.L817
 9052              	.LVL1021:
 9053              	.L819:
2279:src/display.c **** 		set_status(buf);
 9054              		.loc 1 2279 4 view .LVU2918
2279:src/display.c **** 		set_status(buf);
 9055              		.loc 1 2279 10 is_stmt 0 view .LVU2919
 9056 03e6 9D23     		movs	r3, #157
 9057 03e8 954E     		ldr	r6, .L1101+4
 9058 03ea DFF8A082 		ldr	r8, .L1101+80
 9059 03ee 0370     		strb	r3, [r0]
 9060 03f0 FFE6     		b	.L820
 9061              	.LVL1022:
 9062              	.L1075:
 9063              	.LBB509:
2485:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9064              		.loc 1 2485 4 discriminator 1 view .LVU2920
 9065 03f2 9D49     		ldr	r1, .L1101+44
 9066 03f4 07EB8703 		add	r3, r7, r7, lsl #2
2486:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
 9067              		.loc 1 2486 19 discriminator 1 view .LVU2921
 9068 03f8 07F00107 		and	r7, r7, #1
 9069              	.LVL1023:
2485:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9070              		.loc 1 2485 4 discriminator 1 view .LVU2922
 9071 03fc 1944     		add	r1, r1, r3
 9072 03fe 1EA8     		add	r0, sp, #120
 9073 0400 0337     		adds	r7, r7, #3
 9074 0402 0193     		str	r3, [sp, #4]
 9075 0404 FFF7FEFF 		bl	scopy_spc
 9076              	.LVL1024:
 9077 0408 3A46     		mov	r2, r7
 9078 040a 5946     		mov	r1, fp
 9079 040c FFF7FEFF 		bl	num_arg_0
ARM GAS  /tmp/ccAnlOT7.s 			page 258


 9080              	.LVL1025:
2487:src/display.c **** #ifndef REALBUILD
 9081              		.loc 1 2487 4 is_stmt 1 discriminator 1 view .LVU2923
 9082 0410 0921     		movs	r1, #9
 9083 0412 1EA8     		add	r0, sp, #120
 9084 0414 FFF7FEFF 		bl	set_digits_string
 9085              	.LVL1026:
2489:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 9086              		.loc 1 2489 4 discriminator 1 view .LVU2924
 9087 0418 2822     		movs	r2, #40
 9088 041a 5146     		mov	r1, r10
 9089 041c 1EA8     		add	r0, sp, #120
 9090 041e FFF7FEFF 		bl	xset
 9091              	.LVL1027:
2490:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9092              		.loc 1 2490 4 discriminator 1 view .LVU2925
 9093 0422 0121     		movs	r1, #1
 9094 0424 D9F80000 		ldr	r0, [r9]
 9095 0428 5246     		mov	r2, r10
 9096 042a FFF7FEFF 		bl	set_exp
 9097              	.LVL1028:
2491:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9098              		.loc 1 2491 4 discriminator 1 view .LVU2926
 9099 042e 8F49     		ldr	r1, .L1101+48
 9100 0430 019B     		ldr	r3, [sp, #4]
 9101 0432 1944     		add	r1, r1, r3
 9102 0434 42E7     		b	.L938
 9103              	.LVL1029:
 9104              	.L1066:
2491:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9105              		.loc 1 2491 4 is_stmt 0 discriminator 1 view .LVU2927
 9106              	.LBE509:
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9107              		.loc 1 2321 3 is_stmt 1 view .LVU2928
2322:src/display.c **** 		*bp++ = '_';
 9108              		.loc 1 2322 32 is_stmt 0 view .LVU2929
 9109 0436 8E4B     		ldr	r3, .L1101+52
 9110 0438 814E     		ldr	r6, .L1101+4
2322:src/display.c **** 		*bp++ = '_';
 9111              		.loc 1 2322 9 view .LVU2930
 9112 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9113 043c 88F80130 		strb	r3, [r8, #1]
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9114              		.loc 1 2321 9 view .LVU2931
 9115 0440 7823     		movs	r3, #120
2323:src/display.c **** 		*bp++ = '?';
 9116              		.loc 1 2323 9 view .LVU2932
 9117 0442 5F22     		movs	r2, #95
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9118              		.loc 1 2321 9 view .LVU2933
 9119 0444 88F80030 		strb	r3, [r8]
2322:src/display.c **** 		*bp++ = '_';
 9120              		.loc 1 2322 3 is_stmt 1 view .LVU2934
 9121              	.LVL1030:
2323:src/display.c **** 		*bp++ = '?';
 9122              		.loc 1 2323 3 view .LVU2935
2324:src/display.c **** 		set_status(buf);
ARM GAS  /tmp/ccAnlOT7.s 			page 259


 9123              		.loc 1 2324 9 is_stmt 0 view .LVU2936
 9124 0448 3F23     		movs	r3, #63
2323:src/display.c **** 		*bp++ = '?';
 9125              		.loc 1 2323 9 view .LVU2937
 9126 044a 88F80220 		strb	r2, [r8, #2]
2324:src/display.c **** 		set_status(buf);
 9127              		.loc 1 2324 3 is_stmt 1 view .LVU2938
 9128              	.LVL1031:
2324:src/display.c **** 		set_status(buf);
 9129              		.loc 1 2324 9 is_stmt 0 view .LVU2939
 9130 044e 88F80330 		strb	r3, [r8, #3]
2325:src/display.c **** 	} else if (cata) {
 9131              		.loc 1 2325 3 is_stmt 1 view .LVU2940
 9132 0452 1EA8     		add	r0, sp, #120
 9133 0454 DFF83482 		ldr	r8, .L1101+80
 9134              	.LVL1032:
2325:src/display.c **** 	} else if (cata) {
 9135              		.loc 1 2325 3 is_stmt 0 view .LVU2941
 9136 0458 FFF7FEFF 		bl	set_status
 9137              	.LVL1033:
2459:src/display.c **** nostk:	show_flags();
 9138              		.loc 1 2459 2 is_stmt 1 view .LVU2942
 9139 045c FFF7FEFF 		bl	show_stack
 9140              	.LVL1034:
2460:src/display.c **** 	if (!skip) {
 9141              		.loc 1 2460 8 view .LVU2943
 9142 0460 FFF7FEFF 		bl	show_flags
 9143              	.LVL1035:
2461:src/display.c **** 		if (State2.runmode) {
 9144              		.loc 1 2461 2 view .LVU2944
 9145 0464 F3E6     		b	.L817
 9146              	.LVL1036:
 9147              	.L1076:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9148              		.loc 1 2285 4 view .LVU2945
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9149              		.loc 1 2285 9 is_stmt 0 view .LVU2946
 9150 0466 2189     		ldrh	r1, [r4, #8]
 9151 0468 FFF7FEFF 		bl	num_arg_0
 9152              	.LVL1037:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9153              		.loc 1 2285 9 view .LVU2947
 9154 046c 0346     		mov	r3, r0
 9155              	.LVL1038:
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9156              		.loc 1 2285 9 view .LVU2948
 9157 046e ADE7     		b	.L822
 9158              	.LVL1039:
 9159              	.L1065:
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9160              		.loc 1 2295 3 is_stmt 1 view .LVU2949
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9161              		.loc 1 2295 34 is_stmt 0 view .LVU2950
 9162 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9163 0472 8049     		ldr	r1, .L1101+56
 9164 0474 0623     		movs	r3, #6
 9165 0476 03EB0213 		add	r3, r3, r2, lsl #4
ARM GAS  /tmp/ccAnlOT7.s 			page 260


2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9166              		.loc 1 2295 8 view .LVU2951
 9167 047a 1944     		add	r1, r1, r3
 9168 047c 4046     		mov	r0, r8
 9169 047e FFF7FEFF 		bl	scopy
 9170              	.LVL1040:
2296:src/display.c **** 		if (State2.dot) {
 9171              		.loc 1 2296 3 is_stmt 1 view .LVU2952
2296:src/display.c **** 		if (State2.dot) {
 9172              		.loc 1 2296 8 is_stmt 0 view .LVU2953
 9173 0482 7D4A     		ldr	r2, .L1101+60
 9174 0484 7D4B     		ldr	r3, .L1101+64
 9175 0486 94F91510 		ldrsb	r1, [r4, #21]
 9176 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9177 048e 38BF     		it	cc
 9178 0490 1946     		movcc	r1, r3
 9179 0492 FFF7FEFF 		bl	scopy
 9180              	.LVL1041:
2297:src/display.c **** 			*bp++ = 's';
 9181              		.loc 1 2297 7 view .LVU2954
 9182 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9183              	.LVL1042:
2297:src/display.c **** 			*bp++ = 's';
 9184              		.loc 1 2297 3 is_stmt 1 view .LVU2955
2297:src/display.c **** 			*bp++ = 's';
 9185              		.loc 1 2297 6 is_stmt 0 view .LVU2956
 9186 0498 5A06     		lsls	r2, r3, #25
 9187 049a 40F19A80 		bpl	.L825
2298:src/display.c **** 			*bp++ = '_';
 9188              		.loc 1 2298 4 is_stmt 1 view .LVU2957
 9189              	.LVL1043:
2298:src/display.c **** 			*bp++ = '_';
 9190              		.loc 1 2298 10 is_stmt 0 view .LVU2958
 9191 049e 7322     		movs	r2, #115
 9192              	.LVL1044:
 9193              	.L1049:
2302:src/display.c **** 		} else {
 9194              		.loc 1 2302 10 view .LVU2959
 9195 04a0 5F23     		movs	r3, #95
 9196 04a2 674E     		ldr	r6, .L1101+4
 9197 04a4 DFF8E481 		ldr	r8, .L1101+80
2301:src/display.c **** 			*bp++ = '_';
 9198              		.loc 1 2301 10 view .LVU2960
 9199 04a8 0270     		strb	r2, [r0]
2302:src/display.c **** 		} else {
 9200              		.loc 1 2302 4 is_stmt 1 view .LVU2961
2302:src/display.c **** 		} else {
 9201              		.loc 1 2302 10 is_stmt 0 view .LVU2962
 9202 04aa 4370     		strb	r3, [r0, #1]
 9203 04ac A1E6     		b	.L820
 9204              	.LVL1045:
 9205              	.L901:
 9206              	.LBB510:
 9207              	.LBB483:
 908:src/display.c **** 
 9208              		.loc 1 908 3 is_stmt 1 view .LVU2963
 9209 04ae FFF7FEFF 		bl	set_separator_decimal_modes
ARM GAS  /tmp/ccAnlOT7.s 			page 261


 9210              	.LVL1046:
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9211              		.loc 1 910 3 view .LVU2964
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9212              		.loc 1 912 3 view .LVU2965
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9213              		.loc 1 912 6 is_stmt 0 view .LVU2966
 9214 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9215              	.LBB468:
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9216              		.loc 1 919 15 view .LVU2967
 9217 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9218              	.LBE468:
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9219              		.loc 1 912 6 view .LVU2968
 9220 04b8 012B     		cmp	r3, #1
 9221 04ba 40F2B780 		bls	.L906
 9222              	.LVL1047:
 9223              	.LBB469:
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9224              		.loc 1 919 14 is_stmt 1 view .LVU2969
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9225              		.loc 1 919 4 is_stmt 0 view .LVU2970
 9226 04be BCF1000F 		cmp	ip, #0
 9227 04c2 72D0     		beq	.L907
 9228 04c4 0AF10103 		add	r3, r10, #1
 9229 04c8 6046     		mov	r0, ip
 9230              	.LBE469:
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9231              		.loc 1 887 6 view .LVU2971
 9232 04ca 4FF0FF31 		mov	r1, #-1
 9233 04ce 6FEA0A0E 		mvn	lr, r10
 9234              	.LVL1048:
 9235              	.L909:
 9236              	.LBB470:
 920:src/display.c **** 					gotdot = j;
 9237              		.loc 1 920 8 view .LVU2972
 9238 04d2 2E28     		cmp	r0, #46
 9239 04d4 0EEB0302 		add	r2, lr, r3
 9240              	.LVL1049:
 920:src/display.c **** 					gotdot = j;
 9241              		.loc 1 920 5 is_stmt 1 view .LVU2973
 920:src/display.c **** 					gotdot = j;
 9242              		.loc 1 920 8 is_stmt 0 view .LVU2974
 9243 04d8 03D1     		bne	.L908
 920:src/display.c **** 					gotdot = j;
 9244              		.loc 1 920 21 view .LVU2975
 9245 04da B1F1FF3F 		cmp	r1, #-1
 9246 04de 08BF     		it	eq
 9247 04e0 1146     		moveq	r1, r2
 9248              	.LVL1050:
 9249              	.L908:
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9250              		.loc 1 919 28 is_stmt 1 view .LVU2976
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9251              		.loc 1 919 14 view .LVU2977
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
ARM GAS  /tmp/ccAnlOT7.s 			page 262


 9252              		.loc 1 919 15 is_stmt 0 view .LVU2978
 9253 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9254              		.loc 1 919 4 view .LVU2979
 9255 04e6 0028     		cmp	r0, #0
 9256 04e8 F3D1     		bne	.L909
 927:src/display.c **** 			if (j > 0) {
 9257              		.loc 1 927 4 is_stmt 1 view .LVU2980
 927:src/display.c **** 			if (j > 0) {
 9258              		.loc 1 927 6 is_stmt 0 view .LVU2981
 9259 04ea A2F10B03 		sub	r3, r2, #11
 9260              	.LVL1051:
 928:src/display.c **** 				p += j + 1;
 9261              		.loc 1 928 4 is_stmt 1 view .LVU2982
 928:src/display.c **** 				p += j + 1;
 9262              		.loc 1 928 7 is_stmt 0 view .LVU2983
 9263 04ee 002B     		cmp	r3, #0
 9264 04f0 40F34C81 		ble	.L1077
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9265              		.loc 1 929 5 is_stmt 1 view .LVU2984
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9266              		.loc 1 929 7 is_stmt 0 view .LVU2985
 9267 04f4 0A3A     		subs	r2, r2, #10
 931:src/display.c **** 					gotdot = 0;
 9268              		.loc 1 931 8 view .LVU2986
 9269 04f6 8B42     		cmp	r3, r1
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 9270              		.loc 1 929 7 view .LVU2987
 9271 04f8 9244     		add	r10, r10, r2
 9272              	.LVL1052:
 930:src/display.c **** 				if (gotdot <= j) {
 9273              		.loc 1 930 5 is_stmt 1 view .LVU2988
 931:src/display.c **** 					gotdot = 0;
 9274              		.loc 1 931 5 view .LVU2989
 931:src/display.c **** 					gotdot = 0;
 9275              		.loc 1 931 8 is_stmt 0 view .LVU2990
 9276 04fa 80F26581 		bge	.L946
 936:src/display.c **** 					gotdot = 0;
 9277              		.loc 1 936 10 is_stmt 1 view .LVU2991
 936:src/display.c **** 					gotdot = 0;
 9278              		.loc 1 936 13 is_stmt 0 view .LVU2992
 9279 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9280              	.LVL1053:
 936:src/display.c **** 					gotdot = 0;
 9281              		.loc 1 936 13 view .LVU2993
 9282 0502 2E2B     		cmp	r3, #46
 9283 0504 00F0E282 		beq	.L1078
 9284              	.LVL1054:
 943:src/display.c **** 				overflow_to_left = 1;
 9285              		.loc 1 943 5 is_stmt 1 view .LVU2994
 9286 0508 3C21     		movs	r1, #60
 9287 050a FFF7FEFF 		bl	set_dig
 9288              	.LVL1055:
 944:src/display.c **** 			}
 9289              		.loc 1 944 5 view .LVU2995
 944:src/display.c **** 			}
 9290              		.loc 1 944 5 is_stmt 0 view .LVU2996
ARM GAS  /tmp/ccAnlOT7.s 			page 263


 9291 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 944:src/display.c **** 			}
 9292              		.loc 1 944 5 view .LVU2997
 9293              	.LBE470:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9294              		.loc 1 950 10 is_stmt 1 view .LVU2998
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9295              		.loc 1 950 3 is_stmt 0 view .LVU2999
 9296 0512 BCF1000F 		cmp	ip, #0
 9297 0516 48D0     		beq	.L907
 9298              	.LBB471:
 942:src/display.c **** 				set_dig(0, '<');
 9299              		.loc 1 942 17 view .LVU3000
 9300 0518 4FF0FF33 		mov	r3, #-1
 930:src/display.c **** 				if (gotdot <= j) {
 9301              		.loc 1 930 7 view .LVU3001
 9302 051c 4FF0090B 		mov	fp, #9
 9303              	.LVL1056:
 9304              	.L940:
 944:src/display.c **** 			}
 9305              		.loc 1 944 22 view .LVU3002
 9306 0520 4FF00109 		mov	r9, #1
 9307              	.LVL1057:
 9308              	.L919:
 944:src/display.c **** 			}
 9309              		.loc 1 944 22 view .LVU3003
 9310              	.LBE471:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9311              		.loc 1 975 7 view .LVU3004
 9312 0524 0195     		str	r5, [sp, #4]
 9313 0526 1D46     		mov	r5, r3
 9314              	.LVL1058:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9315              		.loc 1 975 7 view .LVU3005
 9316 0528 3346     		mov	r3, r6
 9317 052a 6246     		mov	r2, ip
 9318 052c 5646     		mov	r6, r10
 9319 052e 9A46     		mov	r10, r3
 9320 0530 08E0     		b	.L917
 9321              	.LVL1059:
 9322              	.L1079:
 965:src/display.c **** #  endif
 9323              		.loc 1 965 8 view .LVU3006
 9324 0532 5D45     		cmp	r5, fp
 9325 0534 11D0     		beq	.L914
 9326              	.LVL1060:
 9327              	.L913:
 989:src/display.c **** 				i += segs_per_digit;
 9328              		.loc 1 989 5 view .LVU3007
 9329 0536 FFF7FEFF 		bl	set_dig
 9330              	.LVL1061:
 990:src/display.c **** 			}
 9331              		.loc 1 990 5 is_stmt 1 view .LVU3008
 990:src/display.c **** 			}
 9332              		.loc 1 990 7 is_stmt 0 view .LVU3009
 9333 053a 0BF1090B 		add	fp, fp, #9
 9334              	.LVL1062:
ARM GAS  /tmp/ccAnlOT7.s 			page 264


 9335              	.L915:
 954:src/display.c **** 			if (*p == '.') {
 9336              		.loc 1 954 48 is_stmt 1 view .LVU3010
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9337              		.loc 1 950 10 view .LVU3011
 9338 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9339              	.LVL1063:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9340              		.loc 1 950 3 is_stmt 0 view .LVU3012
 9341 0542 8AB1     		cbz	r2, .L1051
 9342              	.LVL1064:
 9343              	.L917:
 955:src/display.c **** 				if (gotdot < 0)
 9344              		.loc 1 955 4 is_stmt 1 view .LVU3013
 956:src/display.c **** 					gotdot = i;
 9345              		.loc 1 956 5 view .LVU3014
 989:src/display.c **** 				i += segs_per_digit;
 9346              		.loc 1 989 5 view .LVU3015
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9347              		.loc 1 950 21 is_stmt 0 view .LVU3016
 9348 0544 452A     		cmp	r2, #69
 989:src/display.c **** 				i += segs_per_digit;
 9349              		.loc 1 989 5 view .LVU3017
 9350 0546 1146     		mov	r1, r2
 9351 0548 5846     		mov	r0, fp
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9352              		.loc 1 950 21 view .LVU3018
 9353 054a 0DD0     		beq	.L1051
 955:src/display.c **** 				if (gotdot < 0)
 9354              		.loc 1 955 7 view .LVU3019
 9355 054c 2E2A     		cmp	r2, #46
 9356 054e F2D1     		bne	.L913
 965:src/display.c **** #  endif
 9357              		.loc 1 965 5 is_stmt 1 view .LVU3020
 967:src/display.c **** 					i += segs_per_digit;
 9358              		.loc 1 967 6 view .LVU3021
 9359              	.LVL1065:
 971:src/display.c **** 						i += segs_per_digit;
 9360              		.loc 1 971 6 view .LVU3022
 956:src/display.c **** 					gotdot = i;
 9361              		.loc 1 956 8 is_stmt 0 view .LVU3023
 9362 0550 002D     		cmp	r5, #0
 967:src/display.c **** 					i += segs_per_digit;
 9363              		.loc 1 967 6 view .LVU3024
 9364 0552 5846     		mov	r0, fp
 9365 0554 4FF02F01 		mov	r1, #47
 956:src/display.c **** 					gotdot = i;
 9366              		.loc 1 956 8 view .LVU3025
 9367 0558 EBDA     		bge	.L1079
 9368              	.L914:
 972:src/display.c **** 					}
 9369              		.loc 1 972 7 is_stmt 1 view .LVU3026
 9370              	.LVL1066:
 971:src/display.c **** 						i += segs_per_digit;
 9371              		.loc 1 971 9 is_stmt 0 view .LVU3027
 9372 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9373 055c 012A     		cmp	r2, #1
ARM GAS  /tmp/ccAnlOT7.s 			page 265


 9374 055e 5CD9     		bls	.L916
 9375 0560 5D46     		mov	r5, fp
 972:src/display.c **** 					}
 9376              		.loc 1 972 9 view .LVU3028
 9377 0562 0BF1090B 		add	fp, fp, #9
 9378              	.LVL1067:
 972:src/display.c **** 					}
 9379              		.loc 1 972 9 view .LVU3029
 9380 0566 EAE7     		b	.L915
 9381              	.LVL1068:
 9382              	.L1051:
 999:src/display.c **** 			gotdot = i;
 9383              		.loc 1 999 3 is_stmt 1 view .LVU3030
 9384 0568 2B46     		mov	r3, r5
 999:src/display.c **** 			gotdot = i;
 9385              		.loc 1 999 6 is_stmt 0 view .LVU3031
 9386 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9387 056e 28BF     		it	cs
 9388 0570 5B46     		movcs	r3, fp
 9389              	.LVL1069:
1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9390              		.loc 1 1001 3 is_stmt 1 view .LVU3032
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9391              		.loc 1 1002 4 view .LVU3033
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9392              		.loc 1 1002 11 is_stmt 0 view .LVU3034
 9393 0572 A3F11B0B 		sub	fp, r3, #27
 9394              	.LVL1070:
1003:src/display.c **** 				break;
 9395              		.loc 1 1003 4 is_stmt 1 view .LVU3035
 9396 0576 5246     		mov	r2, r10
1003:src/display.c **** 				break;
 9397              		.loc 1 1003 7 is_stmt 0 view .LVU3036
 9398 0578 BBF1000F 		cmp	fp, #0
 9399 057c B246     		mov	r10, r6
 9400 057e 019D     		ldr	r5, [sp, #4]
 9401 0580 1646     		mov	r6, r2
 9402              	.LVL1071:
1003:src/display.c **** 				break;
 9403              		.loc 1 1003 7 view .LVU3037
 9404 0582 12DD     		ble	.L907
 9405 0584 4B46     		mov	r3, r9
 9406 0586 A946     		mov	r9, r5
 9407 0588 1D46     		mov	r5, r3
 9408              	.L923:
1006:src/display.c **** 				break;
 9409              		.loc 1 1006 4 is_stmt 1 view .LVU3038
1009:src/display.c **** 		}
 9410              		.loc 1 1009 4 view .LVU3039
 9411              	.LBB472:
 9412              	.LBB473:
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 9413              		.loc 1 358 2 view .LVU3040
 9414 058a 5846     		mov	r0, fp
 9415              	.LBE473:
 9416              	.LBE472:
1006:src/display.c **** 				break;
ARM GAS  /tmp/ccAnlOT7.s 			page 266


 9417              		.loc 1 1006 7 is_stmt 0 view .LVU3041
 9418 058c 15B1     		cbz	r5, .L924
 9419              	.LVL1072:
1006:src/display.c **** 				break;
 9420              		.loc 1 1006 25 view .LVU3042
 9421 058e BBF1090F 		cmp	fp, #9
 9422 0592 09D0     		beq	.L1046
 9423              	.L924:
1009:src/display.c **** 		}
 9424              		.loc 1 1009 4 view .LVU3043
 9425 0594 3A4B     		ldr	r3, .L1101+68
 9426 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9427              	.LVL1073:
 9428              	.LBB475:
 9429              	.LBI472:
 355:src/display.c **** 	if (sep == SEP_NONE)
 9430              		.loc 1 355 14 is_stmt 1 view .LVU3044
 9431              	.LBB474:
 356:src/display.c **** 		return res;
 9432              		.loc 1 356 2 view .LVU3045
 356:src/display.c **** 		return res;
 9433              		.loc 1 356 5 is_stmt 0 view .LVU3046
 9434 0598 09B1     		cbz	r1, .L925
 9435 059a FFF7FEFF 		bl	set_separator.part.0
 9436              	.LVL1074:
 9437              	.L925:
 356:src/display.c **** 		return res;
 9438              		.loc 1 356 5 view .LVU3047
 9439              	.LBE474:
 9440              	.LBE475:
1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9441              		.loc 1 1001 3 is_stmt 1 view .LVU3048
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9442              		.loc 1 1002 4 view .LVU3049
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9443              		.loc 1 1002 11 is_stmt 0 view .LVU3050
 9444 059e ABF11B0B 		sub	fp, fp, #27
 9445              	.LVL1075:
1003:src/display.c **** 				break;
 9446              		.loc 1 1003 4 is_stmt 1 view .LVU3051
1003:src/display.c **** 				break;
 9447              		.loc 1 1003 7 is_stmt 0 view .LVU3052
 9448 05a2 BBF1000F 		cmp	fp, #0
 9449 05a6 F0DC     		bgt	.L923
 9450              	.L1046:
1003:src/display.c **** 				break;
 9451              		.loc 1 1003 7 view .LVU3053
 9452 05a8 4D46     		mov	r5, r9
 9453              	.LVL1076:
 9454              	.L907:
1027:src/display.c **** 			p++;
 9455              		.loc 1 1027 3 is_stmt 1 view .LVU3054
1027:src/display.c **** 			p++;
 9456              		.loc 1 1027 6 is_stmt 0 view .LVU3055
 9457 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9458 05ae 452B     		cmp	r3, #69
 9459 05b0 00F0DC80 		beq	.L1080
ARM GAS  /tmp/ccAnlOT7.s 			page 267


 9460              	.L1057:
 9461              	.LVL1077:
1027:src/display.c **** 			p++;
 9462              		.loc 1 1027 6 view .LVU3056
 9463              	.LBE483:
 9464              	.LBE510:
2476:src/display.c **** 				goto finish;
 9465              		.loc 1 2476 4 is_stmt 1 view .LVU3057
2476:src/display.c **** 				goto finish;
 9466              		.loc 1 2476 7 is_stmt 0 view .LVU3058
 9467 05b4 3B68     		ldr	r3, [r7]
 9468 05b6 DFF8D890 		ldr	r9, .L1101+84
 9469 05ba 002B     		cmp	r3, #0
 9470 05bc 3FF4E0AD 		beq	.L904
 9471 05c0 9FE5     		b	.L899
 9472              	.LVL1078:
 9473              	.L1073:
 9474              	.LBB511:
 9475              	.LBB484:
 897:src/display.c **** 		p++;
 9476              		.loc 1 897 3 is_stmt 1 view .LVU3059
 9477              	.LBB476:
 9478              	.LBI476:
 284:src/display.c **** {
 9479              		.loc 1 284 13 view .LVU3060
 9480              	.LBB477:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9481              		.loc 1 286 2 view .LVU3061
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9482              		.loc 1 286 24 is_stmt 0 view .LVU3062
 9483 05c2 224A     		ldr	r2, .L1101+16
 287:src/display.c **** }
 9484              		.loc 1 287 2 view .LVU3063
 9485 05c4 8120     		movs	r0, #129
 9486              	.LVL1079:
 286:src/display.c **** 	set_dot(MANT_SIGN);
 9487              		.loc 1 286 24 view .LVU3064
 9488 05c6 1370     		strb	r3, [r2]
 287:src/display.c **** }
 9489              		.loc 1 287 2 is_stmt 1 view .LVU3065
 9490              	.LBE477:
 9491              	.LBE476:
 898:src/display.c **** 	}
 9492              		.loc 1 898 4 is_stmt 0 view .LVU3066
 9493 05c8 0AF1010A 		add	r10, r10, #1
 9494              	.LVL1080:
 9495              	.LBB479:
 9496              	.LBB478:
 287:src/display.c **** }
 9497              		.loc 1 287 2 view .LVU3067
 9498 05cc FFF7FEFF 		bl	set_dot
 9499              	.LVL1081:
 9500              	.LBE478:
 9501              	.LBE479:
 898:src/display.c **** 	}
 9502              		.loc 1 898 3 is_stmt 1 view .LVU3068
 898:src/display.c **** 	}
ARM GAS  /tmp/ccAnlOT7.s 			page 268


 9503              		.loc 1 898 3 is_stmt 0 view .LVU3069
 9504 05d0 B9E5     		b	.L900
 9505              	.LVL1082:
 9506              	.L825:
 898:src/display.c **** 	}
 9507              		.loc 1 898 3 view .LVU3070
 9508              	.LBE484:
 9509              	.LBE511:
2300:src/display.c **** 			*bp++ = '\021';
 9510              		.loc 1 2300 10 is_stmt 1 view .LVU3071
2300:src/display.c **** 			*bp++ = '\021';
 9511              		.loc 1 2300 13 is_stmt 0 view .LVU3072
 9512 05d2 BAF1010F 		cmp	r10, #1
 9513 05d6 00F0D780 		beq	.L1081
2307:src/display.c **** 				*bp++ = '.';
 9514              		.loc 1 2307 4 is_stmt 1 view .LVU3073
2307:src/display.c **** 				*bp++ = '.';
 9515              		.loc 1 2307 8 is_stmt 0 view .LVU3074
 9516 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2307:src/display.c **** 				*bp++ = '.';
 9517              		.loc 1 2307 7 view .LVU3075
 9518 05dc DB07     		lsls	r3, r3, #31
2308:src/display.c **** 			if (State2.numdigit > 0) {
 9519              		.loc 1 2308 5 is_stmt 1 view .LVU3076
 9520              	.LVL1083:
2308:src/display.c **** 			if (State2.numdigit > 0) {
 9521              		.loc 1 2308 11 is_stmt 0 view .LVU3077
 9522 05de 44BF     		itt	mi
 9523 05e0 2E23     		movmi	r3, #46
 9524 05e2 00F8013B 		strbmi	r3, [r0], #1
 9525              	.LVL1084:
2309:src/display.c **** 				if (State2.shuffle)
 9526              		.loc 1 2309 4 is_stmt 1 view .LVU3078
2309:src/display.c **** 				if (State2.shuffle)
 9527              		.loc 1 2309 14 is_stmt 0 view .LVU3079
 9528 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2309:src/display.c **** 				if (State2.shuffle)
 9529              		.loc 1 2309 7 view .LVU3080
 9530 05e8 8AB1     		cbz	r2, .L828
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9531              		.loc 1 2310 5 is_stmt 1 view .LVU3081
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9532              		.loc 1 2310 9 is_stmt 0 view .LVU3082
 9533 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9534              		.loc 1 2310 8 view .LVU3083
 9535 05ec 9E07     		lsls	r6, r3, #30
 9536 05ee 40F1D781 		bpl	.L829
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9537              		.loc 1 2311 6 is_stmt 1 view .LVU3084
 9538              	.LVL1085:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9539              		.loc 1 2311 20 is_stmt 0 view .LVU3085
 9540 05f2 2289     		ldrh	r2, [r4, #8]
 9541              	.LVL1086:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9542              		.loc 1 2311 37 is_stmt 1 view .LVU3086
ARM GAS  /tmp/ccAnlOT7.s 			page 269


 9543 05f4 2349     		ldr	r1, .L1101+72
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9544              		.loc 1 2311 13 is_stmt 0 view .LVU3087
 9545 05f6 0023     		movs	r3, #0
 9546              	.LVL1087:
 9547              	.L830:
2312:src/display.c **** 				else
 9548              		.loc 1 2312 7 is_stmt 1 discriminator 3 view .LVU3088
2312:src/display.c **** 				else
 9549              		.loc 1 2312 26 is_stmt 0 discriminator 3 view .LVU3089
 9550 05f8 02F00306 		and	r6, r2, #3
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9551              		.loc 1 2311 57 discriminator 3 view .LVU3090
 9552 05fc 0133     		adds	r3, r3, #1
 9553              	.LVL1088:
2312:src/display.c **** 				else
 9554              		.loc 1 2312 13 discriminator 3 view .LVU3091
 9555 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9556 0600 00F8016B 		strb	r6, [r0], #1
 9557              	.LVL1089:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9558              		.loc 1 2311 56 is_stmt 1 discriminator 3 view .LVU3092
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9559              		.loc 1 2311 45 is_stmt 0 discriminator 3 view .LVU3093
 9560 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9561              		.loc 1 2311 6 discriminator 3 view .LVU3094
 9562 0606 9E42     		cmp	r6, r3
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9563              		.loc 1 2311 63 discriminator 3 view .LVU3095
 9564 0608 4FEAA202 		asr	r2, r2, #2
 9565              	.LVL1090:
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9566              		.loc 1 2311 37 is_stmt 1 discriminator 3 view .LVU3096
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9567              		.loc 1 2311 6 is_stmt 0 discriminator 3 view .LVU3097
 9568 060c F4DC     		bgt	.L830
 9569              	.LVL1091:
 9570              	.L828:
2317:src/display.c **** 		}
 9571              		.loc 1 2317 5 is_stmt 1 view .LVU3098
2317:src/display.c **** 		}
 9572              		.loc 1 2317 11 is_stmt 0 view .LVU3099
 9573 060e 5F23     		movs	r3, #95
 9574 0610 0B4E     		ldr	r6, .L1101+4
 9575 0612 DFF87880 		ldr	r8, .L1101+80
 9576 0616 0370     		strb	r3, [r0]
 9577 0618 EBE5     		b	.L820
 9578              	.LVL1092:
 9579              	.L916:
 9580              	.LBB512:
 9581              	.LBB485:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9582              		.loc 1 975 7 is_stmt 1 view .LVU3100
 9583 061a 1B4B     		ldr	r3, .L1101+76
 9584 061c 0022     		movs	r2, #0
 9585 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccAnlOT7.s 			page 270


 9586 0620 ABF10900 		sub	r0, fp, #9
 9587              	.LVL1093:
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 9588              		.loc 1 975 7 is_stmt 0 view .LVU3101
 9589 0624 FFF7FEFF 		bl	set_decimal
 9590              	.LVL1094:
 9591 0628 5D46     		mov	r5, fp
 9592 062a 88E7     		b	.L915
 9593              	.LVL1095:
 9594              	.L906:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9595              		.loc 1 950 10 is_stmt 1 view .LVU3102
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9596              		.loc 1 950 3 is_stmt 0 view .LVU3103
 9597 062c BCF1000F 		cmp	ip, #0
 9598 0630 BBD0     		beq	.L907
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9599              		.loc 1 910 5 view .LVU3104
 9600 0632 CB46     		mov	fp, r9
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9601              		.loc 1 887 6 view .LVU3105
 9602 0634 4FF0FF33 		mov	r3, #-1
 9603 0638 74E7     		b	.L919
 9604              	.L1102:
 9605 063a 00BF     		.align	2
 9606              	.L1101:
 9607 063c 0C000000 		.word	.LANCHOR17+12
 9608 0640 00000000 		.word	DispMsg
 9609 0644 08000000 		.word	.LC23
 9610 0648 18000000 		.word	.LC24
 9611 064c 00000000 		.word	LastDisplayedNumber
 9612 0650 34000000 		.word	.LC25
 9613 0654 00000000 		.word	LastDisplayedExponent
 9614 0658 00000000 		.word	.LANCHOR19
 9615 065c AC000000 		.word	.LC42
 9616 0660 00000000 		.word	ShowRPN
 9617 0664 56040000 		.word	argcmds+1110
 9618 0668 00000000 		.word	.LANCHOR21
 9619 066c 00000000 		.word	.LANCHOR23
 9620 0670 B4000000 		.word	.LC28
 9621 0674 00000000 		.word	argcmds
 9622 0678 00000000 		.word	.LC20
 9623 067c 04000000 		.word	.LC21
 9624 0680 00000000 		.word	.LANCHOR0
 9625 0684 BC000000 		.word	.LC27
 9626 0688 00000000 		.word	.LANCHOR1
 9627 068c 00000000 		.word	DispPlot
 9628 0690 00000000 		.word	ShowRegister
 9629              	.LVL1096:
 9630              	.L1067:
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9631              		.loc 1 887 6 view .LVU3106
 9632              	.LBE485:
 9633              	.LBE512:
 9634              	.LBB513:
2327:src/display.c **** 		char b2[16];
 9635              		.loc 1 2327 3 is_stmt 1 view .LVU3107
ARM GAS  /tmp/ccAnlOT7.s 			page 271


2327:src/display.c **** 		char b2[16];
 9636              		.loc 1 2327 44 is_stmt 0 view .LVU3108
 9637 0694 CC4B     		ldr	r3, .L1103
 9638 0696 1B68     		ldr	r3, [r3]
 9639 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
2327:src/display.c **** 		char b2[16];
 9640              		.loc 1 2327 21 view .LVU3109
 9641 069c C0F34610 		ubfx	r0, r0, #5, #7
 9642 06a0 FFF7FEFF 		bl	current_catalogue
 9643              	.LVL1097:
2331:src/display.c **** 		p = catcmd(op, b2);
 9644              		.loc 1 2331 8 view .LVU3110
 9645 06a4 C949     		ldr	r1, .L1103+4
2327:src/display.c **** 		char b2[16];
 9646              		.loc 1 2327 21 view .LVU3111
 9647 06a6 8246     		mov	r10, r0
 9648              	.LVL1098:
2328:src/display.c **** 		const char *p;
 9649              		.loc 1 2328 3 is_stmt 1 view .LVU3112
2329:src/display.c **** 
 9650              		.loc 1 2329 3 view .LVU3113
2331:src/display.c **** 		p = catcmd(op, b2);
 9651              		.loc 1 2331 3 view .LVU3114
2331:src/display.c **** 		p = catcmd(op, b2);
 9652              		.loc 1 2331 8 is_stmt 0 view .LVU3115
 9653 06a8 4046     		mov	r0, r8
 9654              	.LVL1099:
2331:src/display.c **** 		p = catcmd(op, b2);
 9655              		.loc 1 2331 8 view .LVU3116
 9656 06aa FFF7FEFF 		bl	scopy
 9657              	.LVL1100:
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9658              		.loc 1 2332 7 view .LVU3117
 9659 06ae 08A9     		add	r1, sp, #32
2331:src/display.c **** 		p = catcmd(op, b2);
 9660              		.loc 1 2331 8 view .LVU3118
 9661 06b0 0646     		mov	r6, r0
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9662              		.loc 1 2332 7 view .LVU3119
 9663 06b2 5046     		mov	r0, r10
 9664              	.LVL1101:
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9665              		.loc 1 2332 3 is_stmt 1 view .LVU3120
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9666              		.loc 1 2332 7 is_stmt 0 view .LVU3121
 9667 06b4 FFF7FEFF 		bl	catcmd
 9668              	.LVL1102:
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9669              		.loc 1 2333 6 view .LVU3122
 9670 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9671 06ba 142B     		cmp	r3, #20
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9672              		.loc 1 2332 7 view .LVU3123
 9673 06bc 0146     		mov	r1, r0
 9674              	.LVL1103:
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9675              		.loc 1 2333 3 is_stmt 1 view .LVU3124
ARM GAS  /tmp/ccAnlOT7.s 			page 272


2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9676              		.loc 1 2333 6 is_stmt 0 view .LVU3125
 9677 06be 05D0     		beq	.L833
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9678              		.loc 1 2333 28 discriminator 1 view .LVU3126
 9679 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9680 06c2 9807     		lsls	r0, r3, #30
 9681              	.LVL1104:
2334:src/display.c **** 		bp = scopy(bp, p);
 9682              		.loc 1 2334 4 is_stmt 1 discriminator 1 view .LVU3127
2334:src/display.c **** 		bp = scopy(bp, p);
 9683              		.loc 1 2334 10 is_stmt 0 discriminator 1 view .LVU3128
 9684 06c4 44BF     		itt	mi
 9685 06c6 1423     		movmi	r3, #20
 9686 06c8 06F8013B 		strbmi	r3, [r6], #1
 9687              	.LVL1105:
 9688              	.L833:
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9689              		.loc 1 2335 3 is_stmt 1 view .LVU3129
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9690              		.loc 1 2335 8 is_stmt 0 view .LVU3130
 9691 06cc 3046     		mov	r0, r6
 9692 06ce FFF7FEFF 		bl	scopy
 9693              	.LVL1106:
2336:src/display.c **** 			// State2.disp_small = 1;
 9694              		.loc 1 2336 3 is_stmt 1 view .LVU3131
2336:src/display.c **** 			// State2.disp_small = 1;
 9695              		.loc 1 2336 6 is_stmt 0 view .LVU3132
 9696 06d2 A9F11003 		sub	r3, r9, #16
 9697 06d6 012B     		cmp	r3, #1
 9698 06d8 5DD9     		bls	.L1082
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9699              		.loc 1 2343 10 is_stmt 1 view .LVU3133
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9700              		.loc 1 2343 14 is_stmt 0 view .LVU3134
 9701 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9702              		.loc 1 2343 13 view .LVU3135
 9703 06dc 5906     		lsls	r1, r3, #25
 9704 06de 7FF577AE 		bpl	.L838
2344:src/display.c **** 				decNumber x, r;
 9705              		.loc 1 2344 4 is_stmt 1 view .LVU3136
2344:src/display.c **** 				decNumber x, r;
 9706              		.loc 1 2344 7 is_stmt 0 view .LVU3137
 9707 06e2 B9F1120F 		cmp	r9, #18
 9708 06e6 00F00682 		beq	.L1083
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9709              		.loc 1 2364 11 is_stmt 1 view .LVU3138
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9710              		.loc 1 2364 44 is_stmt 0 view .LVU3139
 9711 06ea AAF58873 		sub	r3, r10, #272
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
 9712              		.loc 1 2364 14 view .LVU3140
 9713 06ee 0D2B     		cmp	r3, #13
 9714 06f0 3FF66EAE 		bhi	.L838
 9715              	.LBB501:
2365:src/display.c **** 				copyreg(&z, x);
ARM GAS  /tmp/ccAnlOT7.s 			page 273


 9716              		.loc 1 2365 5 is_stmt 1 discriminator 3 view .LVU3141
2365:src/display.c **** 				copyreg(&z, x);
 9717              		.loc 1 2365 24 is_stmt 0 discriminator 3 view .LVU3142
 9718 06f4 B64B     		ldr	r3, .L1103+8
 9719 06f6 1E68     		ldr	r6, [r3]
 9720              	.LVL1107:
2366:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
 9721              		.loc 1 2366 5 is_stmt 1 discriminator 3 view .LVU3143
 9722 06f8 15A8     		add	r0, sp, #84
 9723 06fa 3146     		mov	r1, r6
 9724 06fc FFF7FEFF 		bl	copyreg
 9725              	.LVL1108:
2367:src/display.c **** 				set_x(x, CNULL, is_dblmode());
 9726              		.loc 1 2367 5 discriminator 3 view .LVU3144
 9727 0700 5FFA8AF0 		uxtb	r0, r10
 9728 0704 FFF7FEFF 		bl	sigma_val
 9729              	.LVL1109:
2368:src/display.c **** 				copyreg(x, &z);
 9730              		.loc 1 2368 5 discriminator 3 view .LVU3145
 9731 0708 FFF7FEFF 		bl	is_dblmode
 9732              	.LVL1110:
 9733 070c 0021     		movs	r1, #0
 9734 070e 0246     		mov	r2, r0
 9735 0710 3046     		mov	r0, r6
 9736 0712 FFF7FEFF 		bl	set_x
 9737              	.LVL1111:
2369:src/display.c **** 				skip = 1;
 9738              		.loc 1 2369 5 discriminator 3 view .LVU3146
 9739 0716 15A9     		add	r1, sp, #84
 9740 0718 3046     		mov	r0, r6
 9741 071a FFF7FEFF 		bl	copyreg
 9742              	.LVL1112:
2370:src/display.c **** 			}
 9743              		.loc 1 2370 5 discriminator 3 view .LVU3147
2370:src/display.c **** 			}
 9744              		.loc 1 2370 5 is_stmt 0 discriminator 3 view .LVU3148
 9745              	.LBE501:
2373:src/display.c **** 	} else if (State2.multi) {
 9746              		.loc 1 2373 3 is_stmt 1 discriminator 3 view .LVU3149
 9747 071e 1EA8     		add	r0, sp, #120
 9748 0720 FFF7FEFF 		bl	set_status
 9749              	.LVL1113:
2373:src/display.c **** 	} else if (State2.multi) {
 9750              		.loc 1 2373 3 is_stmt 0 discriminator 3 view .LVU3150
 9751              	.LBE513:
2459:src/display.c **** nostk:	show_flags();
 9752              		.loc 1 2459 2 is_stmt 1 discriminator 3 view .LVU3151
 9753 0724 FFF7FEFF 		bl	show_stack
 9754              	.LVL1114:
2460:src/display.c **** 	if (!skip) {
 9755              		.loc 1 2460 8 discriminator 3 view .LVU3152
 9756 0728 FFF7FEFF 		bl	show_flags
 9757              	.LVL1115:
2461:src/display.c **** 		if (State2.runmode) {
 9758              		.loc 1 2461 2 discriminator 3 view .LVU3153
 9759              	.L837:
2506:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
ARM GAS  /tmp/ccAnlOT7.s 			page 274


 9760              		.loc 1 2506 2 view .LVU3154
 9761 072c FFF7FEFF 		bl	set_annunciators
 9762              	.LVL1116:
2507:src/display.c **** 		ShowRPN = 0;
 9763              		.loc 1 2507 2 view .LVU3155
 9764 0730 A84E     		ldr	r6, .L1103+12
 9765 0732 DFF8BC82 		ldr	r8, .L1103+40
 9766 0736 DFF8BC92 		ldr	r9, .L1103+44
 9767 073a 27E5     		b	.L815
 9768              	.LVL1117:
 9769              	.L1068:
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9770              		.loc 1 2375 3 view .LVU3156
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9771              		.loc 1 2375 41 is_stmt 0 view .LVU3157
 9772 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9773 073e A649     		ldr	r1, .L1103+16
 9774 0740 0423     		movs	r3, #4
 9775 0742 03EB0213 		add	r3, r3, r2, lsl #4
2375:src/display.c **** 		if (State2.numdigit > 0) {
 9776              		.loc 1 2375 8 view .LVU3158
 9777 0746 1944     		add	r1, r1, r3
 9778 0748 4046     		mov	r0, r8
 9779 074a 2722     		movs	r2, #39
 9780 074c FFF7FEFF 		bl	scopy_char
 9781              	.LVL1118:
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9782              		.loc 1 2376 6 view .LVU3159
 9783 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9784              	.LVL1119:
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9785              		.loc 1 2376 3 is_stmt 1 view .LVU3160
2376:src/display.c **** 			*bp++ = (char) State2.digval;
 9786              		.loc 1 2376 6 is_stmt 0 view .LVU3161
 9787 0752 002B     		cmp	r3, #0
 9788 0754 3FF44AAD 		beq	.L1050
2377:src/display.c **** 			if (State2.numdigit > 1)
 9789              		.loc 1 2377 4 is_stmt 1 view .LVU3162
 9790              	.LVL1120:
2377:src/display.c **** 			if (State2.numdigit > 1)
 9791              		.loc 1 2377 12 is_stmt 0 view .LVU3163
 9792 0758 2389     		ldrh	r3, [r4, #8]
 9793 075a 0370     		strb	r3, [r0]
2378:src/display.c **** 				*bp++ = State2.digval2;
 9794              		.loc 1 2378 4 is_stmt 1 view .LVU3164
2378:src/display.c **** 				*bp++ = State2.digval2;
 9795              		.loc 1 2378 7 is_stmt 0 view .LVU3165
 9796 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9797 075e 012B     		cmp	r3, #1
2379:src/display.c **** 		}
 9798              		.loc 1 2379 5 is_stmt 1 view .LVU3166
 9799              	.LVL1121:
2379:src/display.c **** 		}
 9800              		.loc 1 2379 19 is_stmt 0 view .LVU3167
 9801 0760 84BF     		itt	hi
 9802 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2379:src/display.c **** 		}
ARM GAS  /tmp/ccAnlOT7.s 			page 275


 9803              		.loc 1 2379 11 view .LVU3168
 9804 0764 4370     		strbhi	r3, [r0, #1]
 9805 0766 41E5     		b	.L1050
 9806              	.LVL1122:
 9807              	.L949:
 9808              	.LBB514:
 9809              	.LBB496:
2496:src/display.c **** 			  while(*b) {
 9810              		.loc 1 2496 8 view .LVU3169
 9811 0768 5A1C     		adds	r2, r3, #1
 9812 076a C2E5     		b	.L930
 9813              	.LVL1123:
 9814              	.L1080:
2496:src/display.c **** 			  while(*b) {
 9815              		.loc 1 2496 8 view .LVU3170
 9816              	.LBE496:
 9817              	.LBE514:
 9818              	.LBB515:
 9819              	.LBB486:
1028:src/display.c **** 			// set_exp() takes care of setting the exponent sign
 9820              		.loc 1 1028 4 is_stmt 1 view .LVU3171
1033:src/display.c **** #  endif
 9821              		.loc 1 1033 4 view .LVU3172
 9822 076c 0AF10100 		add	r0, r10, #1
 9823              	.LVL1124:
1033:src/display.c **** #  endif
 9824              		.loc 1 1033 4 is_stmt 0 view .LVU3173
 9825 0770 FFF7FEFF 		bl	s_to_i
 9826              	.LVL1125:
1033:src/display.c **** #  endif
 9827              		.loc 1 1033 4 view .LVU3174
 9828 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9829 0778 2D2B     		cmp	r3, #45
 9830 077a 0CBF     		ite	eq
 9831 077c 0621     		moveq	r1, #6
 9832 077e 0421     		movne	r1, #4
 9833 0780 0022     		movs	r2, #0
 9834 0782 FFF7FEFF 		bl	set_exp
 9835              	.LVL1126:
 9836 0786 15E7     		b	.L1057
 9837              	.LVL1127:
 9838              	.L1081:
1033:src/display.c **** #  endif
 9839              		.loc 1 1033 4 view .LVU3175
 9840              	.LBE486:
 9841              	.LBE515:
2301:src/display.c **** 			*bp++ = '_';
 9842              		.loc 1 2301 4 is_stmt 1 view .LVU3176
2301:src/display.c **** 			*bp++ = '_';
 9843              		.loc 1 2301 10 is_stmt 0 view .LVU3177
 9844 0788 1122     		movs	r2, #17
 9845 078a 89E6     		b	.L1049
 9846              	.LVL1128:
 9847              	.L1077:
 9848              	.LBB516:
 9849              	.LBB487:
 893:src/display.c **** #endif
ARM GAS  /tmp/ccAnlOT7.s 			page 276


 9850              		.loc 1 893 6 view .LVU3178
 9851 078c 8146     		mov	r9, r0
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9852              		.loc 1 910 5 view .LVU3179
 9853 078e 8346     		mov	fp, r0
 9854              	.LBB480:
 946:src/display.c **** 		}
 9855              		.loc 1 946 16 view .LVU3180
 9856 0790 4FF0FF33 		mov	r3, #-1
 9857              	.LVL1129:
 946:src/display.c **** 		}
 9858              		.loc 1 946 16 view .LVU3181
 9859 0794 C6E6     		b	.L919
 9860              	.LVL1130:
 9861              	.L1082:
 946:src/display.c **** 		}
 9862              		.loc 1 946 16 view .LVU3182
 9863              	.LBE480:
 9864              	.LBE487:
 9865              	.LBE516:
 9866              	.LBB517:
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9867              		.loc 1 2338 4 is_stmt 1 view .LVU3183
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9868              		.loc 1 2338 7 is_stmt 0 view .LVU3184
 9869 0796 BAF5274F 		cmp	r10, #42752
 9870 079a 00F09C81 		beq	.L835
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
 9871              		.loc 1 2338 39 discriminator 1 view .LVU3185
 9872 079e BAF5284F 		cmp	r10, #43008
 9873 07a2 00F09881 		beq	.L835
2341:src/display.c **** 			skip = 1;
 9874              		.loc 1 2341 5 is_stmt 1 view .LVU3186
2341:src/display.c **** 			skip = 1;
 9875              		.loc 1 2341 11 is_stmt 0 view .LVU3187
 9876 07a6 0AF07F00 		and	r0, r10, #127
 9877 07aa 0021     		movs	r1, #0
 9878 07ac FFF7FEFF 		bl	get_const
 9879              	.LVL1131:
2341:src/display.c **** 			skip = 1;
 9880              		.loc 1 2341 5 view .LVU3188
 9881 07b0 0022     		movs	r2, #0
 9882              	.LVL1132:
 9883              	.L1053:
 9884              	.LBB502:
2362:src/display.c **** 				skip = 1;
 9885              		.loc 1 2362 5 discriminator 1 view .LVU3189
 9886 07b2 1146     		mov	r1, r2
 9887 07b4 FFF7FEFF 		bl	set_x
 9888              	.LVL1133:
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9889              		.loc 1 2363 5 is_stmt 1 discriminator 1 view .LVU3190
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9890              		.loc 1 2363 5 is_stmt 0 discriminator 1 view .LVU3191
 9891              	.LBE502:
2373:src/display.c **** 	} else if (State2.multi) {
 9892              		.loc 1 2373 3 is_stmt 1 discriminator 1 view .LVU3192
ARM GAS  /tmp/ccAnlOT7.s 			page 277


 9893 07b8 1EA8     		add	r0, sp, #120
 9894 07ba FFF7FEFF 		bl	set_status
 9895              	.LVL1134:
 9896              	.L1054:
2373:src/display.c **** 	} else if (State2.multi) {
 9897              		.loc 1 2373 3 is_stmt 0 discriminator 1 view .LVU3193
 9898              	.LBE517:
2459:src/display.c **** nostk:	show_flags();
 9899              		.loc 1 2459 2 is_stmt 1 discriminator 1 view .LVU3194
 9900 07be FFF7FEFF 		bl	show_stack
 9901              	.LVL1135:
2460:src/display.c **** 	if (!skip) {
 9902              		.loc 1 2460 8 discriminator 1 view .LVU3195
 9903 07c2 FFF7FEFF 		bl	show_flags
 9904              	.LVL1136:
2461:src/display.c **** 		if (State2.runmode) {
 9905              		.loc 1 2461 2 discriminator 1 view .LVU3196
 9906 07c6 B1E7     		b	.L837
 9907              	.LVL1137:
 9908              	.L946:
 9909              	.LBB518:
 9910              	.LBB488:
 9911              	.LBB481:
 930:src/display.c **** 				if (gotdot <= j) {
 9912              		.loc 1 930 7 is_stmt 0 view .LVU3197
 9913 07c8 4FF0090B 		mov	fp, #9
 9914              	.LVL1138:
 9915              	.L911:
 943:src/display.c **** 				overflow_to_left = 1;
 9916              		.loc 1 943 5 is_stmt 1 view .LVU3198
 9917 07cc 3C21     		movs	r1, #60
 9918 07ce 0020     		movs	r0, #0
 9919 07d0 FFF7FEFF 		bl	set_dig
 9920              	.LVL1139:
 944:src/display.c **** 			}
 9921              		.loc 1 944 5 view .LVU3199
 944:src/display.c **** 			}
 9922              		.loc 1 944 5 is_stmt 0 view .LVU3200
 9923 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 944:src/display.c **** 			}
 9924              		.loc 1 944 5 view .LVU3201
 9925              	.LBE481:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9926              		.loc 1 950 10 is_stmt 1 view .LVU3202
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9927              		.loc 1 950 3 is_stmt 0 view .LVU3203
 9928 07d8 0023     		movs	r3, #0
 9929 07da BCF1000F 		cmp	ip, #0
 9930 07de 7FF49FAE 		bne	.L940
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9931              		.loc 1 950 3 view .LVU3204
 9932 07e2 E7E6     		b	.L1057
 9933              	.LVL1140:
 9934              	.L1070:
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9935              		.loc 1 950 3 view .LVU3205
 9936              	.LBE488:
ARM GAS  /tmp/ccAnlOT7.s 			page 278


 9937              	.LBE518:
2386:src/display.c **** 		skip = 1;
 9938              		.loc 1 2386 3 is_stmt 1 view .LVU3206
 9939              	.LBB519:
 9940              	.LBI519:
2092:src/display.c **** 	char buf[16];
 9941              		.loc 1 2092 13 view .LVU3207
 9942              	.LBB520:
2093:src/display.c **** 	unsigned short int pc = State2.digval;
 9943              		.loc 1 2093 2 view .LVU3208
2094:src/display.c **** 	unsigned int op = getprog(pc);
 9944              		.loc 1 2094 2 view .LVU3209
2094:src/display.c **** 	unsigned int op = getprog(pc);
 9945              		.loc 1 2094 21 is_stmt 0 view .LVU3210
 9946 07e4 B4F80890 		ldrh	r9, [r4, #8]
 9947              	.LVL1141:
2095:src/display.c **** 	int n = nLIB(pc);
 9948              		.loc 1 2095 2 is_stmt 1 view .LVU3211
2100:src/display.c **** #ifndef REALBUILD
 9949              		.loc 1 2100 27 is_stmt 0 view .LVU3212
 9950 07e8 DFF80C82 		ldr	r8, .L1103+48
 9951              	.LVL1142:
2102:src/display.c **** #endif
 9952              		.loc 1 2102 41 view .LVU3213
 9953 07ec 7B4F     		ldr	r7, .L1103+20
2095:src/display.c **** 	int n = nLIB(pc);
 9954              		.loc 1 2095 20 view .LVU3214
 9955 07ee 4846     		mov	r0, r9
 9956 07f0 FFF7FEFF 		bl	getprog
 9957              	.LVL1143:
 9958 07f4 4FEA9936 		lsr	r6, r9, #14
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9959              		.loc 1 2099 2 view .LVU3215
 9960 07f8 15A9     		add	r1, sp, #84
2095:src/display.c **** 	int n = nLIB(pc);
 9961              		.loc 1 2095 20 view .LVU3216
 9962 07fa 8246     		mov	r10, r0
 9963              	.LVL1144:
2096:src/display.c **** 	unsigned short int lblpc;
 9964              		.loc 1 2096 2 is_stmt 1 view .LVU3217
2097:src/display.c **** 
 9965              		.loc 1 2097 2 view .LVU3218
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9966              		.loc 1 2099 2 view .LVU3219
2100:src/display.c **** #ifndef REALBUILD
 9967              		.loc 1 2100 27 is_stmt 0 view .LVU3220
 9968 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9969              		.loc 1 2099 2 view .LVU3221
 9970 0800 FFF7FEFF 		bl	prt
 9971              	.LVL1145:
2099:src/display.c **** 	set_digits_string(libname[n], 0);
 9972              		.loc 1 2099 2 view .LVU3222
 9973 0804 FFF7FEFF 		bl	set_status
 9974              	.LVL1146:
2100:src/display.c **** #ifndef REALBUILD
 9975              		.loc 1 2100 2 is_stmt 1 view .LVU3223
ARM GAS  /tmp/ccAnlOT7.s 			page 279


 9976 0808 08EB0600 		add	r0, r8, r6
 9977 080c 0021     		movs	r1, #0
 9978 080e FFF7FEFF 		bl	set_digits_string
 9979              	.LVL1147:
2102:src/display.c **** #endif
 9980              		.loc 1 2102 2 view .LVU3224
 9981 0812 7348     		ldr	r0, .L1103+24
 9982 0814 07EB4601 		add	r1, r7, r6, lsl #1
 9983 0818 FFF7FEFF 		bl	scopy
 9984              	.LVL1148:
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9985              		.loc 1 2105 2 view .LVU3225
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9986              		.loc 1 2105 5 is_stmt 0 view .LVU3226
 9987 081c 1AF4704F 		tst	r10, #61440
 9988 0820 CDD0     		beq	.L1054
2106:src/display.c **** 		if (lblpc != pc) {
 9989              		.loc 1 2106 3 is_stmt 1 view .LVU3227
2106:src/display.c **** 		if (lblpc != pc) {
 9990              		.loc 1 2106 11 is_stmt 0 view .LVU3228
 9991 0822 5046     		mov	r0, r10
 9992 0824 0021     		movs	r1, #0
 9993 0826 FFF7FEFF 		bl	findmultilbl
 9994              	.LVL1149:
2106:src/display.c **** 		if (lblpc != pc) {
 9995              		.loc 1 2106 9 view .LVU3229
 9996 082a 86B2     		uxth	r6, r0
 9997              	.LVL1150:
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9998              		.loc 1 2107 3 is_stmt 1 view .LVU3230
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9999              		.loc 1 2107 6 is_stmt 0 view .LVU3231
 10000 082c B145     		cmp	r9, r6
2106:src/display.c **** 		if (lblpc != pc) {
 10001              		.loc 1 2106 11 view .LVU3232
 10002 082e 8246     		mov	r10, r0
 10003              	.LVL1151:
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10004              		.loc 1 2107 6 view .LVU3233
 10005 0830 C5D0     		beq	.L1054
2108:src/display.c **** 			n = nLIB(lblpc);
 10006              		.loc 1 2108 4 is_stmt 1 view .LVU3234
 10007 0832 6C48     		ldr	r0, .L1103+28
 10008 0834 3F21     		movs	r1, #63
 10009 0836 FFF7FEFF 		bl	set_digits_string
 10010              	.LVL1152:
2109:src/display.c **** 			if (n == REGION_RAM)
 10011              		.loc 1 2109 4 view .LVU3235
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10012              		.loc 1 2110 4 view .LVU3236
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10013              		.loc 1 2110 7 is_stmt 0 view .LVU3237
 10014 083a B60B     		lsrs	r6, r6, #14
 10015              	.LVL1153:
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 10016              		.loc 1 2110 7 view .LVU3238
 10017 083c 40F07D81 		bne	.L866
ARM GAS  /tmp/ccAnlOT7.s 			page 280


2111:src/display.c **** 			else {
 10018              		.loc 1 2111 5 is_stmt 1 view .LVU3239
 10019 0840 3246     		mov	r2, r6
 10020 0842 1FFA8AF0 		uxth	r0, r10
 10021 0846 0121     		movs	r1, #1
 10022 0848 FFF7FEFF 		bl	set_exp
 10023              	.LVL1154:
 10024 084c B7E7     		b	.L1054
 10025              	.LVL1155:
 10026              	.L1069:
2111:src/display.c **** 			else {
 10027              		.loc 1 2111 5 is_stmt 0 view .LVU3240
 10028              	.LBE520:
 10029              	.LBE519:
2383:src/display.c **** 		skip = 1;
 10030              		.loc 1 2383 3 is_stmt 1 view .LVU3241
 10031              	.LBB522:
 10032              	.LBI522:
1990:src/display.c **** 	int i, n;
 10033              		.loc 1 1990 13 view .LVU3242
 10034              	.LBB523:
1991:src/display.c **** 	int j = SEGS_EXP_BASE;
 10035              		.loc 1 1991 2 view .LVU3243
1992:src/display.c **** 	const int status = State2.status - 3;
 10036              		.loc 1 1992 2 view .LVU3244
1993:src/display.c **** 	char buf[16], *p = buf;
 10037              		.loc 1 1993 2 view .LVU3245
1997:src/display.c **** 		set_status("Free:");
 10038              		.loc 1 1997 5 is_stmt 0 view .LVU3246
 10039 084e 012B     		cmp	r3, #1
1993:src/display.c **** 	char buf[16], *p = buf;
 10040              		.loc 1 1993 12 view .LVU3247
 10041 0850 A3F10307 		sub	r7, r3, #3
 10042              	.LVL1156:
1994:src/display.c **** 	unsigned int pc;
 10043              		.loc 1 1994 2 is_stmt 1 view .LVU3248
1995:src/display.c **** 
 10044              		.loc 1 1995 2 view .LVU3249
1997:src/display.c **** 		set_status("Free:");
 10045              		.loc 1 1997 2 view .LVU3250
1997:src/display.c **** 		set_status("Free:");
 10046              		.loc 1 1997 5 is_stmt 0 view .LVU3251
 10047 0854 00F01782 		beq	.L1084
2005:src/display.c **** 		/* Top line */
 10048              		.loc 1 2005 7 is_stmt 1 view .LVU3252
2005:src/display.c **** 		/* Top line */
 10049              		.loc 1 2005 10 is_stmt 0 view .LVU3253
 10050 0858 7B1C     		adds	r3, r7, #1
 10051 085a 00F07782 		beq	.L1085
 10052              	.LBB524:
2022:src/display.c **** 		int end;
 10053              		.loc 1 2022 3 is_stmt 1 view .LVU3254
2023:src/display.c **** 		int group = 10;
 10054              		.loc 1 2023 3 view .LVU3255
2024:src/display.c **** 		int start = 0;
 10055              		.loc 1 2024 3 view .LVU3256
 10056              	.LVL1157:
ARM GAS  /tmp/ccAnlOT7.s 			page 281


2025:src/display.c **** 		
 10057              		.loc 1 2025 3 view .LVU3257
2027:src/display.c **** 			base = 10 * status;
 10058              		.loc 1 2027 3 view .LVU3258
2027:src/display.c **** 			base = 10 * status;
 10059              		.loc 1 2027 6 is_stmt 0 view .LVU3259
 10060 085e 092F     		cmp	r7, #9
 10061 0860 40F32C82 		ble	.L1086
2037:src/display.c **** 			base = regX_idx;
 10062              		.loc 1 2037 8 is_stmt 1 view .LVU3260
2037:src/display.c **** 			base = regX_idx;
 10063              		.loc 1 2037 11 is_stmt 0 view .LVU3261
 10064 0864 0A2F     		cmp	r7, #10
 10065 0866 00F0FE81 		beq	.L1087
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10066              		.loc 1 2045 4 is_stmt 1 view .LVU3262
 10067              	.LVL1158:
2046:src/display.c **** 			set_status("FL.00-.15");
 10068              		.loc 1 2046 4 view .LVU3263
2047:src/display.c **** 		}
 10069              		.loc 1 2047 4 view .LVU3264
 10070 086a 5F48     		ldr	r0, .L1103+32
 10071 086c 4FF00A0A 		mov	r10, #10
 10072 0870 FFF7FEFF 		bl	set_status
 10073              	.LVL1159:
2024:src/display.c **** 		int start = 0;
 10074              		.loc 1 2024 7 is_stmt 0 view .LVU3265
 10075 0874 5646     		mov	r6, r10
2025:src/display.c **** 		
 10076              		.loc 1 2025 7 view .LVU3266
 10077 0876 4FF0000B 		mov	fp, #0
2047:src/display.c **** 		}
 10078              		.loc 1 2047 4 view .LVU3267
 10079 087a 0222     		movs	r2, #2
 10080 087c 4FF00908 		mov	r8, #9
 10081              	.LVL1160:
2047:src/display.c **** 		}
 10082              		.loc 1 2047 4 view .LVU3268
 10083 0880 0720     		movs	r0, #7
2046:src/display.c **** 			set_status("FL.00-.15");
 10084              		.loc 1 2046 8 view .LVU3269
 10085 0882 4FF07F09 		mov	r9, #127
 10086              	.LVL1161:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10087              		.loc 1 2045 9 view .LVU3270
 10088 0886 7027     		movs	r7, #112
 10089              	.LVL1162:
 10090              	.L852:
2049:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
 10091              		.loc 1 2049 3 is_stmt 1 view .LVU3271
2050:src/display.c **** 		j += SEGS_PER_DIGIT;
 10092              		.loc 1 2050 3 view .LVU3272
 10093              	.LBB525:
 10094              	.LBI525:
 337:src/display.c **** 	if (res) {
 10095              		.loc 1 337 14 view .LVU3273
 10096              	.LBB526:
ARM GAS  /tmp/ccAnlOT7.s 			page 282


 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10097              		.loc 1 338 2 view .LVU3274
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10098              		.loc 1 341 3 view .LVU3275
 10099 0888 0192     		str	r2, [sp, #4]
 10100 088a FFF7FEFF 		bl	set_dot
 10101              	.LVL1163:
 342:src/display.c **** 			set_dot(posn+8);
 10102              		.loc 1 342 3 view .LVU3276
 10103              	.LBB527:
 10104              	.LBI527:
 337:src/display.c **** 	if (res) {
 10105              		.loc 1 337 14 view .LVU3277
 10106              	.LBB528:
 345:src/display.c **** #endif
 10107              		.loc 1 345 2 view .LVU3278
 345:src/display.c **** #endif
 10108              		.loc 1 345 35 is_stmt 0 view .LVU3279
 10109 088e 019A     		ldr	r2, [sp, #4]
 10110 0890 534B     		ldr	r3, .L1103+24
 10111 0892 2E21     		movs	r1, #46
 10112 0894 9954     		strb	r1, [r3, r2]
 348:src/display.c **** }
 10113              		.loc 1 348 2 is_stmt 1 view .LVU3280
 10114              	.LVL1164:
 348:src/display.c **** }
 10115              		.loc 1 348 2 is_stmt 0 view .LVU3281
 10116              	.LBE528:
 10117              	.LBE527:
 348:src/display.c **** }
 10118              		.loc 1 348 2 is_stmt 1 view .LVU3282
 348:src/display.c **** }
 10119              		.loc 1 348 2 is_stmt 0 view .LVU3283
 10120              	.LBE526:
 10121              	.LBE525:
2051:src/display.c **** 		for (i = start; i < group + start; i++) {
 10122              		.loc 1 2051 3 is_stmt 1 view .LVU3284
2052:src/display.c **** 			int k = i + base - start;
 10123              		.loc 1 2052 3 view .LVU3285
2052:src/display.c **** 			int k = i + base - start;
 10124              		.loc 1 2052 19 view .LVU3286
 10125 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10126 089a D319     		adds	r3, r2, r7
 10127 089c 0293     		str	r3, [sp, #8]
 10128 089e A7EB0B03 		sub	r3, r7, fp
 10129 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10130              	.LBB529:
 10131              	.LBB530:
 10132              	.LBB531:
 10133              	.LBB532:
 10134              	.LBB533:
 345:src/display.c **** #endif
 10135              		.loc 1 345 35 is_stmt 0 view .LVU3287
 10136 08a6 0191     		str	r1, [sp, #4]
 10137 08a8 3E44     		add	r6, r6, r7
 10138              	.LVL1165:
 10139              	.L857:
ARM GAS  /tmp/ccAnlOT7.s 			page 283


 345:src/display.c **** #endif
 10140              		.loc 1 345 35 view .LVU3288
 10141              	.LBE533:
 10142              	.LBE532:
 10143              	.LBE531:
 10144              	.LBE530:
2053:src/display.c **** 			int l = get_user_flag(k);
 10145              		.loc 1 2053 4 is_stmt 1 view .LVU3289
2054:src/display.c **** 			k += group;
 10146              		.loc 1 2054 4 view .LVU3290
2054:src/display.c **** 			k += group;
 10147              		.loc 1 2054 12 is_stmt 0 view .LVU3291
 10148 08aa 039B     		ldr	r3, [sp, #12]
 10149 08ac 03EB0B00 		add	r0, r3, fp
 10150 08b0 FFF7FEFF 		bl	get_user_flag
 10151              	.LVL1166:
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10152              		.loc 1 2056 7 view .LVU3292
 10153 08b4 4E45     		cmp	r6, r9
2054:src/display.c **** 			k += group;
 10154              		.loc 1 2054 12 view .LVU3293
 10155 08b6 0546     		mov	r5, r0
 10156              	.LVL1167:
2055:src/display.c **** 			if (end >= k) {
 10157              		.loc 1 2055 4 is_stmt 1 view .LVU3294
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10158              		.loc 1 2056 4 view .LVU3295
2064:src/display.c **** 			if (i == 4) {
 10159              		.loc 1 2064 6 is_stmt 0 view .LVU3296
 10160 08b8 08F10907 		add	r7, r8, #9
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10161              		.loc 1 2056 7 view .LVU3297
 10162 08bc 3FDD     		ble	.L1088
 10163              	.LVL1168:
 10164              	.L854:
2062:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
 10165              		.loc 1 2062 4 is_stmt 1 view .LVU3298
 10166 08be 2946     		mov	r1, r5
 10167 08c0 4046     		mov	r0, r8
 10168 08c2 FFF7FEFF 		bl	set_dig
 10169              	.LVL1169:
2063:src/display.c **** 			j += SEGS_PER_DIGIT;
 10170              		.loc 1 2063 4 view .LVU3299
 10171              	.LBB543:
 10172              	.LBI530:
 337:src/display.c **** 	if (res) {
 10173              		.loc 1 337 14 view .LVU3300
 10174              	.LBB540:
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10175              		.loc 1 338 2 view .LVU3301
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10176              		.loc 1 341 3 view .LVU3302
 10177 08c6 08F10700 		add	r0, r8, #7
 10178 08ca FFF7FEFF 		bl	set_dot
 10179              	.LVL1170:
 342:src/display.c **** 			set_dot(posn+8);
 10180              		.loc 1 342 3 view .LVU3303
ARM GAS  /tmp/ccAnlOT7.s 			page 284


 10181              	.LBB537:
 10182              	.LBI532:
 337:src/display.c **** 	if (res) {
 10183              		.loc 1 337 14 view .LVU3304
 10184              	.LBB534:
 345:src/display.c **** #endif
 10185              		.loc 1 345 2 view .LVU3305
 345:src/display.c **** #endif
 10186              		.loc 1 345 2 is_stmt 0 view .LVU3306
 10187              	.LBE534:
 10188              	.LBE537:
 10189              	.LBE540:
 10190              	.LBE543:
 10191              	.LBE529:
2052:src/display.c **** 			int k = i + base - start;
 10192              		.loc 1 2052 38 is_stmt 1 view .LVU3307
 10193              	.LBB554:
 10194              	.LBB544:
 10195              	.LBB541:
 10196              	.LBB538:
 10197              	.LBB535:
 345:src/display.c **** #endif
 10198              		.loc 1 345 27 is_stmt 0 view .LVU3308
 10199 08ce 474B     		ldr	r3, .L1103+36
 345:src/display.c **** #endif
 10200              		.loc 1 345 35 view .LVU3309
 10201 08d0 0199     		ldr	r1, [sp, #4]
 345:src/display.c **** #endif
 10202              		.loc 1 345 27 view .LVU3310
 10203 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10204 08d6 5208     		lsrs	r2, r2, #1
 345:src/display.c **** #endif
 10205              		.loc 1 345 35 view .LVU3311
 10206 08d8 414B     		ldr	r3, .L1103+24
 345:src/display.c **** #endif
 10207              		.loc 1 345 32 view .LVU3312
 10208 08da 0132     		adds	r2, r2, #1
 10209              	.LBE535:
 10210              	.LBE538:
 10211              	.LBE541:
 10212              	.LBE544:
2065:src/display.c **** 				set_dig(j, 8);
 10213              		.loc 1 2065 7 view .LVU3313
 10214 08dc BBF1040F 		cmp	fp, #4
 10215              	.LBB545:
 10216              	.LBB542:
 10217              	.LBB539:
 10218              	.LBB536:
 345:src/display.c **** #endif
 10219              		.loc 1 345 35 view .LVU3314
 10220 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 348:src/display.c **** }
 10221              		.loc 1 348 2 is_stmt 1 view .LVU3315
 10222              	.LVL1171:
 348:src/display.c **** }
 10223              		.loc 1 348 2 is_stmt 0 view .LVU3316
 10224              	.LBE536:
ARM GAS  /tmp/ccAnlOT7.s 			page 285


 10225              	.LBE539:
 348:src/display.c **** }
 10226              		.loc 1 348 2 is_stmt 1 view .LVU3317
 348:src/display.c **** }
 10227              		.loc 1 348 2 is_stmt 0 view .LVU3318
 10228              	.LBE542:
 10229              	.LBE545:
2064:src/display.c **** 			if (i == 4) {
 10230              		.loc 1 2064 4 is_stmt 1 view .LVU3319
2065:src/display.c **** 				set_dig(j, 8);
 10231              		.loc 1 2065 4 view .LVU3320
 10232              	.LBE554:
2052:src/display.c **** 			int k = i + base - start;
 10233              		.loc 1 2052 39 is_stmt 0 view .LVU3321
 10234 08e4 0BF1010B 		add	fp, fp, #1
 10235              	.LVL1172:
2052:src/display.c **** 			int k = i + base - start;
 10236              		.loc 1 2052 19 is_stmt 1 view .LVU3322
 10237              	.LBB555:
2065:src/display.c **** 				set_dig(j, 8);
 10238              		.loc 1 2065 7 is_stmt 0 view .LVU3323
 10239 08e8 42D0     		beq	.L1089
2065:src/display.c **** 				set_dig(j, 8);
 10240              		.loc 1 2065 7 view .LVU3324
 10241              	.LBE555:
2052:src/display.c **** 			int k = i + base - start;
 10242              		.loc 1 2052 3 view .LVU3325
 10243 08ea D345     		cmp	fp, r10
 10244 08ec 06F10106 		add	r6, r6, #1
 10245 08f0 01D0     		beq	.L1090
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10246              		.loc 1 2045 9 view .LVU3326
 10247 08f2 B846     		mov	r8, r7
 10248 08f4 D9E7     		b	.L857
 10249              	.L1090:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10250              		.loc 1 2045 9 view .LVU3327
 10251 08f6 049D     		ldr	r5, [sp, #16]
 10252              	.LVL1173:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10253              		.loc 1 2045 9 view .LVU3328
 10254 08f8 334F     		ldr	r7, .L1103
 10255              	.LVL1174:
 10256              	.L847:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10257              		.loc 1 2045 9 view .LVU3329
 10258              	.LBE524:
2073:src/display.c **** 	pc = state_pc();
 10259              		.loc 1 2073 2 is_stmt 1 view .LVU3330
2074:src/display.c **** 	if (isXROM(pc))
 10260              		.loc 1 2074 2 view .LVU3331
2074:src/display.c **** 	if (isXROM(pc))
 10261              		.loc 1 2074 7 is_stmt 0 view .LVU3332
 10262 08fa 3B68     		ldr	r3, [r7]
2074:src/display.c **** 	if (isXROM(pc))
 10263              		.loc 1 2074 5 view .LVU3333
 10264 08fc B3F8E077 		ldrh	r7, [r3, #2016]
ARM GAS  /tmp/ccAnlOT7.s 			page 286


 10265              	.LVL1175:
2075:src/display.c **** 		pc = 1;
 10266              		.loc 1 2075 2 is_stmt 1 view .LVU3334
2075:src/display.c **** 		pc = 1;
 10267              		.loc 1 2075 6 is_stmt 0 view .LVU3335
 10268 0900 BB0B     		lsrs	r3, r7, #14
2076:src/display.c **** 	for (n=i=0; i<4; i++) {
 10269              		.loc 1 2076 6 view .LVU3336
 10270 0902 032B     		cmp	r3, #3
 10271 0904 08BF     		it	eq
 10272 0906 0127     		moveq	r7, #1
 10273              	.LVL1176:
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10274              		.loc 1 2077 2 is_stmt 1 view .LVU3337
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10275              		.loc 1 2077 14 view .LVU3338
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10276              		.loc 1 2077 8 is_stmt 0 view .LVU3339
 10277 0908 4FF00009 		mov	r9, #0
 10278 090c 6426     		movs	r6, #100
2073:src/display.c **** 	pc = state_pc();
 10279              		.loc 1 2073 4 view .LVU3340
 10280 090e 4FF06C08 		mov	r8, #108
 10281              	.LVL1177:
 10282              	.L861:
2078:src/display.c **** 			if (++n == 4) {
 10283              		.loc 1 2078 3 is_stmt 1 view .LVU3341
2078:src/display.c **** 			if (++n == 4) {
 10284              		.loc 1 2078 7 is_stmt 0 view .LVU3342
 10285 0912 0222     		movs	r2, #2
 10286 0914 3146     		mov	r1, r6
 10287 0916 3846     		mov	r0, r7
 10288 0918 FFF7FEFF 		bl	find_label_from
 10289              	.LVL1178:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10290              		.loc 1 2079 4 is_stmt 1 view .LVU3343
2078:src/display.c **** 			if (++n == 4) {
 10291              		.loc 1 2078 6 is_stmt 0 view .LVU3344
 10292 091c 58B1     		cbz	r0, .L859
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10293              		.loc 1 2079 7 view .LVU3345
 10294 091e 09F10109 		add	r9, r9, #1
 10295              	.LVL1179:
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10296              		.loc 1 2083 5 is_stmt 1 view .LVU3346
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10297              		.loc 1 2079 7 is_stmt 0 view .LVU3347
 10298 0922 B9F1040F 		cmp	r9, #4
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10299              		.loc 1 2083 5 view .LVU3348
 10300 0926 A6F12301 		sub	r1, r6, #35
 10301 092a 4046     		mov	r0, r8
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10302              		.loc 1 2079 7 view .LVU3349
 10303 092c 17D0     		beq	.L1091
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10304              		.loc 1 2083 5 view .LVU3350
ARM GAS  /tmp/ccAnlOT7.s 			page 287


 10305 092e FFF7FEFF 		bl	set_dig
 10306              	.LVL1180:
2084:src/display.c **** 			}
 10307              		.loc 1 2084 5 is_stmt 1 view .LVU3351
2084:src/display.c **** 			}
 10308              		.loc 1 2084 7 is_stmt 0 view .LVU3352
 10309 0932 08F10708 		add	r8, r8, #7
 10310              	.LVL1181:
 10311              	.L859:
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10312              		.loc 1 2077 19 is_stmt 1 view .LVU3353
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10313              		.loc 1 2077 14 view .LVU3354
 10314 0936 0136     		adds	r6, r6, #1
 10315              	.LVL1182:
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10316              		.loc 1 2077 2 is_stmt 0 view .LVU3355
 10317 0938 682E     		cmp	r6, #104
 10318 093a EAD1     		bne	.L861
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10319              		.loc 1 2077 2 view .LVU3356
 10320 093c 3FE7     		b	.L1054
 10321              	.LVL1183:
 10322              	.L1088:
 10323              	.LBB558:
 10324              	.LBB556:
2057:src/display.c **** 				k += group;
 10325              		.loc 1 2057 5 is_stmt 1 view .LVU3357
2057:src/display.c **** 				k += group;
 10326              		.loc 1 2057 11 is_stmt 0 view .LVU3358
 10327 093e 3046     		mov	r0, r6
 10328              	.LVL1184:
2057:src/display.c **** 				k += group;
 10329              		.loc 1 2057 11 view .LVU3359
 10330 0940 FFF7FEFF 		bl	get_user_flag
 10331              	.LVL1185:
 10332 0944 029B     		ldr	r3, [sp, #8]
 10333 0946 03EB0B02 		add	r2, r3, fp
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10334              		.loc 1 2059 8 view .LVU3360
 10335 094a 4A45     		cmp	r2, r9
2057:src/display.c **** 				k += group;
 10336              		.loc 1 2057 7 view .LVU3361
 10337 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10338              	.LVL1186:
2058:src/display.c **** 				if (end >= k)
 10339              		.loc 1 2058 5 is_stmt 1 view .LVU3362
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10340              		.loc 1 2059 5 view .LVU3363
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10341              		.loc 1 2059 8 is_stmt 0 view .LVU3364
 10342 0950 B5DC     		bgt	.L854
2060:src/display.c **** 			}
 10343              		.loc 1 2060 6 is_stmt 1 view .LVU3365
2060:src/display.c **** 			}
 10344              		.loc 1 2060 12 is_stmt 0 view .LVU3366
 10345 0952 1046     		mov	r0, r2
ARM GAS  /tmp/ccAnlOT7.s 			page 288


 10346 0954 FFF7FEFF 		bl	get_user_flag
 10347              	.LVL1187:
2060:src/display.c **** 			}
 10348              		.loc 1 2060 8 view .LVU3367
 10349 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10350              	.LVL1188:
2060:src/display.c **** 			}
 10351              		.loc 1 2060 8 view .LVU3368
 10352 095c AFE7     		b	.L854
 10353              	.LVL1189:
 10354              	.L1091:
2060:src/display.c **** 			}
 10355              		.loc 1 2060 8 view .LVU3369
 10356              	.LBE556:
 10357              	.LBE558:
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10358              		.loc 1 2080 5 is_stmt 1 view .LVU3370
 10359 095e 4C21     		movs	r1, #76
 10360 0960 7320     		movs	r0, #115
 10361              	.LVL1190:
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10362              		.loc 1 2080 5 is_stmt 0 view .LVU3371
 10363 0962 FFF7FEFF 		bl	set_dig
 10364              	.LVL1191:
2081:src/display.c **** 			} else {
 10365              		.loc 1 2081 5 is_stmt 1 view .LVU3372
 10366 0966 4C21     		movs	r1, #76
 10367 0968 7A20     		movs	r0, #122
 10368 096a FFF7FEFF 		bl	set_dig
 10369              	.LVL1192:
 10370 096e E2E7     		b	.L859
 10371              	.LVL1193:
 10372              	.L1089:
 10373              	.LBB559:
 10374              	.LBB557:
2066:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
 10375              		.loc 1 2066 5 view .LVU3373
 10376 0970 0821     		movs	r1, #8
 10377 0972 3846     		mov	r0, r7
 10378 0974 FFF7FEFF 		bl	set_dig
 10379              	.LVL1194:
2067:src/display.c **** 				j += SEGS_PER_DIGIT;
 10380              		.loc 1 2067 5 view .LVU3374
 10381              	.LBB546:
 10382              	.LBI546:
 337:src/display.c **** 	if (res) {
 10383              		.loc 1 337 14 view .LVU3375
 10384              	.LBB547:
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10385              		.loc 1 338 2 view .LVU3376
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10386              		.loc 1 341 3 view .LVU3377
 10387 0978 08F11000 		add	r0, r8, #16
 10388 097c FFF7FEFF 		bl	set_dot
 10389              	.LVL1195:
 342:src/display.c **** 			set_dot(posn+8);
 10390              		.loc 1 342 3 view .LVU3378
ARM GAS  /tmp/ccAnlOT7.s 			page 289


 10391              	.LBB548:
 10392              	.LBI548:
 337:src/display.c **** 	if (res) {
 10393              		.loc 1 337 14 view .LVU3379
 10394              	.LBB549:
 345:src/display.c **** #endif
 10395              		.loc 1 345 2 view .LVU3380
 345:src/display.c **** #endif
 10396              		.loc 1 345 27 is_stmt 0 view .LVU3381
 10397 0980 1A4B     		ldr	r3, .L1103+36
 345:src/display.c **** #endif
 10398              		.loc 1 345 35 view .LVU3382
 10399 0982 0199     		ldr	r1, [sp, #4]
 345:src/display.c **** #endif
 10400              		.loc 1 345 27 view .LVU3383
 10401 0984 A3FB0723 		umull	r2, r3, r3, r7
 10402 0988 5B08     		lsrs	r3, r3, #1
 345:src/display.c **** #endif
 10403              		.loc 1 345 35 view .LVU3384
 10404 098a 154A     		ldr	r2, .L1103+24
 345:src/display.c **** #endif
 10405              		.loc 1 345 32 view .LVU3385
 10406 098c 0133     		adds	r3, r3, #1
 10407              	.LBE549:
 10408              	.LBE548:
 10409              	.LBE547:
 10410              	.LBE546:
2068:src/display.c **** 			}
 10411              		.loc 1 2068 7 view .LVU3386
 10412 098e 08F11207 		add	r7, r8, #18
 10413              	.LVL1196:
 10414              	.LBB553:
 10415              	.LBB552:
 10416              	.LBB551:
 10417              	.LBB550:
 345:src/display.c **** #endif
 10418              		.loc 1 345 35 view .LVU3387
 10419 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 348:src/display.c **** }
 10420              		.loc 1 348 2 is_stmt 1 view .LVU3388
 10421              	.LVL1197:
 348:src/display.c **** }
 10422              		.loc 1 348 2 is_stmt 0 view .LVU3389
 10423              	.LBE550:
 10424              	.LBE551:
 348:src/display.c **** }
 10425              		.loc 1 348 2 is_stmt 1 view .LVU3390
 348:src/display.c **** }
 10426              		.loc 1 348 2 is_stmt 0 view .LVU3391
 10427              	.LBE552:
 10428              	.LBE553:
2068:src/display.c **** 			}
 10429              		.loc 1 2068 5 is_stmt 1 view .LVU3392
2068:src/display.c **** 			}
 10430              		.loc 1 2068 5 is_stmt 0 view .LVU3393
 10431              	.LBE557:
2052:src/display.c **** 			int k = i + base - start;
ARM GAS  /tmp/ccAnlOT7.s 			page 290


 10432              		.loc 1 2052 38 is_stmt 1 view .LVU3394
2052:src/display.c **** 			int k = i + base - start;
 10433              		.loc 1 2052 19 view .LVU3395
 10434 0996 0136     		adds	r6, r6, #1
2052:src/display.c **** 			int k = i + base - start;
 10435              		.loc 1 2052 39 is_stmt 0 view .LVU3396
 10436 0998 4FF0050B 		mov	fp, #5
 10437              	.LVL1198:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10438              		.loc 1 2045 9 view .LVU3397
 10439 099c B846     		mov	r8, r7
 10440 099e 84E7     		b	.L857
 10441              	.LVL1199:
 10442              	.L829:
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10443              		.loc 1 2045 9 view .LVU3398
 10444              	.LBE559:
 10445              	.LBE523:
 10446              	.LBE522:
2314:src/display.c **** 			}
 10447              		.loc 1 2314 6 is_stmt 1 view .LVU3399
2314:src/display.c **** 			}
 10448              		.loc 1 2314 11 is_stmt 0 view .LVU3400
 10449 09a0 2189     		ldrh	r1, [r4, #8]
 10450 09a2 FFF7FEFF 		bl	num_arg_0
 10451              	.LVL1200:
2314:src/display.c **** 			}
 10452              		.loc 1 2314 11 view .LVU3401
 10453 09a6 32E6     		b	.L828
 10454              	.LVL1201:
 10455              	.L879:
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10456              		.loc 1 2401 10 is_stmt 1 view .LVU3402
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10457              		.loc 1 2401 14 is_stmt 0 view .LVU3403
 10458 09a8 DFF84480 		ldr	r8, .L1103+40
 10459              	.LVL1202:
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10460              		.loc 1 2401 14 view .LVU3404
 10461 09ac B8F90030 		ldrsh	r3, [r8]
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10462              		.loc 1 2401 13 view .LVU3405
 10463 09b0 002B     		cmp	r3, #0
 10464 09b2 40F01381 		bne	.L1092
2403:src/display.c **** #if 0
 10465              		.loc 1 2403 10 is_stmt 1 view .LVU3406
2403:src/display.c **** #if 0
 10466              		.loc 1 2403 13 is_stmt 0 view .LVU3407
 10467 09b6 0907     		lsls	r1, r1, #28
 10468 09b8 00F1D880 		bmi	.L1093
 10469              	.LVL1203:
2459:src/display.c **** nostk:	show_flags();
 10470              		.loc 1 2459 2 is_stmt 1 view .LVU3408
 10471 09bc FFF7FEFF 		bl	show_stack
 10472              	.LVL1204:
2460:src/display.c **** 	if (!skip) {
 10473              		.loc 1 2460 8 view .LVU3409
ARM GAS  /tmp/ccAnlOT7.s 			page 291


2429:src/display.c **** 		}
 10474              		.loc 1 2429 10 is_stmt 0 view .LVU3410
 10475 09c0 0125     		movs	r5, #1
2460:src/display.c **** 	if (!skip) {
 10476              		.loc 1 2460 8 view .LVU3411
 10477 09c2 FFF7FEFF 		bl	show_flags
 10478              	.LVL1205:
2461:src/display.c **** 		if (State2.runmode) {
 10479              		.loc 1 2461 2 is_stmt 1 view .LVU3412
 10480 09c6 42E4     		b	.L817
 10481              	.L1104:
 10482              		.align	2
 10483              	.L1103:
 10484 09c8 00000000 		.word	main_ram
 10485 09cc 3C000000 		.word	.LC29
 10486 09d0 00000000 		.word	StackBase
 10487 09d4 00000000 		.word	DispMsg
 10488 09d8 00000000 		.word	multicmds
 10489 09dc 00000000 		.word	.LANCHOR22
 10490 09e0 00000000 		.word	LastDisplayedNumber
 10491 09e4 98000000 		.word	.LC39
 10492 09e8 8C000000 		.word	.LC38
 10493 09ec 398EE338 		.word	954437177
 10494 09f0 00000000 		.word	DispPlot
 10495 09f4 00000000 		.word	ShowRegister
 10496 09f8 00000000 		.word	.LANCHOR21
 10497              	.LVL1206:
 10498              	.L878:
2435:src/display.c **** 		if (i > 0)
 10499              		.loc 1 2435 3 view .LVU3413
2435:src/display.c **** 		if (i > 0)
 10500              		.loc 1 2435 7 is_stmt 0 view .LVU3414
 10501 09fc C44B     		ldr	r3, .L1105
 10502 09fe 1B68     		ldr	r3, [r3]
 10503 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10504              	.LVL1207:
2436:src/display.c **** 			set_status(prt(getprog(i), buf));
 10505              		.loc 1 2436 3 is_stmt 1 view .LVU3415
2436:src/display.c **** 			set_status(prt(getprog(i), buf));
 10506              		.loc 1 2436 6 is_stmt 0 view .LVU3416
 10507 0a04 0028     		cmp	r0, #0
 10508 0a06 72D0     		beq	.L889
2437:src/display.c **** 		else
 10509              		.loc 1 2437 4 is_stmt 1 view .LVU3417
 10510 0a08 FFF7FEFF 		bl	getprog
 10511              	.LVL1208:
2437:src/display.c **** 		else
 10512              		.loc 1 2437 4 is_stmt 0 view .LVU3418
 10513 0a0c 1EA9     		add	r1, sp, #120
 10514 0a0e FFF7FEFF 		bl	prt
 10515              	.LVL1209:
 10516 0a12 FFF7FEFF 		bl	set_status
 10517              	.LVL1210:
 10518              	.L890:
2440:src/display.c **** #if 0
 10519              		.loc 1 2440 3 is_stmt 1 view .LVU3419
 10520 0a16 8920     		movs	r0, #137
ARM GAS  /tmp/ccAnlOT7.s 			page 292


 10521 0a18 FFF7FEFF 		bl	set_dot
 10522              	.LVL1211:
2455:src/display.c **** 			annuc = 1;
 10523              		.loc 1 2455 3 view .LVU3420
2455:src/display.c **** 			annuc = 1;
 10524              		.loc 1 2455 7 is_stmt 0 view .LVU3421
 10525 0a1c FFF7FEFF 		bl	cur_shift
 10526              	.LVL1212:
2455:src/display.c **** 			annuc = 1;
 10527              		.loc 1 2455 46 view .LVU3422
 10528 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10529 0a22 03F00603 		and	r3, r3, #6
 10530 0a26 1843     		orrs	r0, r0, r3
 10531 0a28 10F0FF0F 		tst	r0, #255
 10532 0a2c 46D1     		bne	.L891
2460:src/display.c **** 	if (!skip) {
 10533              		.loc 1 2460 8 is_stmt 1 view .LVU3423
 10534 0a2e FFF7FEFF 		bl	show_flags
 10535              	.LVL1213:
2461:src/display.c **** 		if (State2.runmode) {
 10536              		.loc 1 2461 2 view .LVU3424
 10537 0a32 B84E     		ldr	r6, .L1105+4
 10538 0a34 DFF81083 		ldr	r8, .L1105+56
 10539              	.LVL1214:
2461:src/display.c **** 		if (State2.runmode) {
 10540              		.loc 1 2461 2 is_stmt 0 view .LVU3425
 10541 0a38 09E4     		b	.L817
 10542              	.LVL1215:
 10543              	.L1071:
2389:src/display.c **** 		skip = 1;
 10544              		.loc 1 2389 3 is_stmt 1 view .LVU3426
 10545              	.LBB563:
 10546              	.LBI563:
2123:src/display.c **** 	char buf[16], *bp;
 10547              		.loc 1 2123 13 view .LVU3427
 10548              	.LBB564:
2124:src/display.c **** 	int n = State2.digval;
 10549              		.loc 1 2124 2 view .LVU3428
2125:src/display.c **** 	
 10550              		.loc 1 2125 2 view .LVU3429
2125:src/display.c **** 	
 10551              		.loc 1 2125 6 is_stmt 0 view .LVU3430
 10552 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10553              	.LVL1216:
2132:src/display.c **** 			n;
 10554              		.loc 1 2132 2 is_stmt 1 view .LVU3431
2132:src/display.c **** 			n;
 10555              		.loc 1 2132 54 is_stmt 0 view .LVU3432
 10556 0a3e CA07     		lsls	r2, r1, #31
 10557 0a40 4CBF     		ite	mi
 10558 0a42 08F17007 		addmi	r7, r8, #112
2125:src/display.c **** 	
 10559              		.loc 1 2125 6 view .LVU3433
 10560 0a46 4746     		movpl	r7, r8
 10561              	.LVL1217:
2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10562              		.loc 1 2136 2 is_stmt 1 view .LVU3434
ARM GAS  /tmp/ccAnlOT7.s 			page 293


2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10563              		.loc 1 2136 5 is_stmt 0 view .LVU3435
 10564 0a48 11F00401 		ands	r1, r1, #4
 10565 0a4c 1AD0     		beq	.L869
2137:src/display.c **** 	}
 10566              		.loc 1 2137 3 is_stmt 1 view .LVU3436
2137:src/display.c **** 	}
 10567              		.loc 1 2137 14 is_stmt 0 view .LVU3437
 10568 0a4e 15A9     		add	r1, sp, #84
 10569 0a50 3846     		mov	r0, r7
 10570 0a52 FFF7FEFF 		bl	alpha_rcl_s
 10571              	.LVL1218:
2137:src/display.c **** 	}
 10572              		.loc 1 2137 3 view .LVU3438
 10573 0a56 FFF7FEFF 		bl	set_status
 10574              	.LVL1219:
 10575              	.L870:
2159:src/display.c **** }
 10576              		.loc 1 2159 2 is_stmt 1 view .LVU3439
 10577 0a5a 3846     		mov	r0, r7
 10578 0a5c 0021     		movs	r1, #0
 10579 0a5e FFF7FEFF 		bl	format_reg
 10580              	.LVL1220:
 10581              	.LBE564:
 10582              	.LBE563:
2390:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10583              		.loc 1 2390 3 view .LVU3440
2391:src/display.c **** 			annunciators();
 10584              		.loc 1 2391 3 view .LVU3441
2391:src/display.c **** 			annunciators();
 10585              		.loc 1 2391 6 is_stmt 0 view .LVU3442
 10586 0a62 BAF1000F 		cmp	r10, #0
 10587 0a66 0AD1     		bne	.L876
2391:src/display.c **** 			annunciators();
 10588              		.loc 1 2391 24 discriminator 1 view .LVU3443
 10589 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10590 0a6a 012B     		cmp	r3, #1
 10591 0a6c 7FF4A7AE 		bne	.L1054
2391:src/display.c **** 			annunciators();
 10592              		.loc 1 2391 55 discriminator 2 view .LVU3444
 10593 0a70 A74B     		ldr	r3, .L1105
 10594 0a72 1B68     		ldr	r3, [r3]
 10595 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10596 0a78 DE07     		lsls	r6, r3, #31
 10597 0a7a 7FF5A0AE 		bpl	.L1054
 10598              	.L876:
2392:src/display.c **** 		}
 10599              		.loc 1 2392 4 is_stmt 1 view .LVU3445
 10600 0a7e FFF7FEFF 		bl	annunciators
 10601              	.LVL1221:
2459:src/display.c **** nostk:	show_flags();
 10602              		.loc 1 2459 2 view .LVU3446
 10603 0a82 9CE6     		b	.L1054
 10604              	.LVL1222:
 10605              	.L869:
 10606              	.LBB567:
 10607              	.LBB565:
ARM GAS  /tmp/ccAnlOT7.s 			page 294


2140:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10608              		.loc 1 2140 3 view .LVU3447
 10609 0a84 15AE     		add	r6, sp, #84
 10610 0a86 1022     		movs	r2, #16
 10611 0a88 3046     		mov	r0, r6
 10612 0a8a FFF7FEFF 		bl	xset
 10613              	.LVL1223:
2144:src/display.c **** #endif
 10614              		.loc 1 2144 3 view .LVU3448
2144:src/display.c **** #endif
 10615              		.loc 1 2144 8 is_stmt 0 view .LVU3449
 10616 0a8e A249     		ldr	r1, .L1105+8
 10617 0a90 3046     		mov	r0, r6
 10618 0a92 FFF7FEFF 		bl	scopy_spc
 10619              	.LVL1224:
2146:src/display.c **** 			*bp++ = '.';
 10620              		.loc 1 2146 7 view .LVU3450
 10621 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10622              	.LVL1225:
2146:src/display.c **** 			*bp++ = '.';
 10623              		.loc 1 2146 3 is_stmt 1 view .LVU3451
2146:src/display.c **** 			*bp++ = '.';
 10624              		.loc 1 2146 6 is_stmt 0 view .LVU3452
 10625 0a98 DB07     		lsls	r3, r3, #31
 10626 0a9a 40F1DA80 		bpl	.L871
2147:src/display.c **** 			if (n >= 100) {
 10627              		.loc 1 2147 4 is_stmt 1 view .LVU3453
 10628              	.LVL1226:
2147:src/display.c **** 			if (n >= 100) {
 10629              		.loc 1 2147 10 is_stmt 0 view .LVU3454
 10630 0a9e 2E23     		movs	r3, #46
2148:src/display.c **** 				*bp++ = '1';
 10631              		.loc 1 2148 7 view .LVU3455
 10632 0aa0 B8F1630F 		cmp	r8, #99
2147:src/display.c **** 			if (n >= 100) {
 10633              		.loc 1 2147 10 view .LVU3456
 10634 0aa4 0370     		strb	r3, [r0]
2148:src/display.c **** 				*bp++ = '1';
 10635              		.loc 1 2148 4 is_stmt 1 view .LVU3457
2148:src/display.c **** 				*bp++ = '1';
 10636              		.loc 1 2148 7 is_stmt 0 view .LVU3458
 10637 0aa6 00F3CF80 		bgt	.L872
2147:src/display.c **** 			if (n >= 100) {
 10638              		.loc 1 2147 7 view .LVU3459
 10639 0aaa 0130     		adds	r0, r0, #1
 10640              	.LVL1227:
 10641              	.L873:
2154:src/display.c **** 		else
 10642              		.loc 1 2154 4 is_stmt 1 view .LVU3460
2154:src/display.c **** 		else
 10643              		.loc 1 2154 9 is_stmt 0 view .LVU3461
 10644 0aac 4146     		mov	r1, r8
 10645 0aae 0222     		movs	r2, #2
 10646 0ab0 FFF7FEFF 		bl	num_arg_0
 10647              	.LVL1228:
 10648              	.L875:
2157:src/display.c **** 	}
ARM GAS  /tmp/ccAnlOT7.s 			page 295


 10649              		.loc 1 2157 3 is_stmt 1 view .LVU3462
 10650 0ab4 3046     		mov	r0, r6
 10651 0ab6 FFF7FEFF 		bl	set_status
 10652              	.LVL1229:
 10653 0aba CEE7     		b	.L870
 10654              	.LVL1230:
 10655              	.L891:
2157:src/display.c **** 	}
 10656              		.loc 1 2157 3 is_stmt 0 view .LVU3463
 10657              	.LBE565:
 10658              	.LBE567:
2456:src/display.c **** 		goto nostk;
 10659              		.loc 1 2456 4 is_stmt 1 view .LVU3464
2460:src/display.c **** 	if (!skip) {
 10660              		.loc 1 2460 8 view .LVU3465
 10661 0abc FFF7FEFF 		bl	show_flags
 10662              	.LVL1231:
2461:src/display.c **** 		if (State2.runmode) {
 10663              		.loc 1 2461 2 view .LVU3466
 10664 0ac0 944E     		ldr	r6, .L1105+4
 10665 0ac2 DFF88482 		ldr	r8, .L1105+56
 10666              	.LVL1232:
2456:src/display.c **** 		goto nostk;
 10667              		.loc 1 2456 10 is_stmt 0 view .LVU3467
 10668 0ac6 0125     		movs	r5, #1
 10669 0ac8 FFF7C1BB 		b	.L817
 10670              	.LVL1233:
 10671              	.L1078:
 10672              	.LBB568:
 10673              	.LBB489:
 10674              	.LBB482:
 937:src/display.c **** 					p++;
 10675              		.loc 1 937 6 is_stmt 1 view .LVU3468
 938:src/display.c **** 					if (!double_dot)
 10676              		.loc 1 938 6 view .LVU3469
 938:src/display.c **** 					if (!double_dot)
 10677              		.loc 1 938 7 is_stmt 0 view .LVU3470
 10678 0acc 0AF1010A 		add	r10, r10, #1
 10679              	.LVL1234:
 939:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 10680              		.loc 1 939 6 is_stmt 1 view .LVU3471
 940:src/display.c **** 				}
 10681              		.loc 1 940 7 view .LVU3472
 940:src/display.c **** 				}
 10682              		.loc 1 940 9 is_stmt 0 view .LVU3473
 10683 0ad0 4FF0120B 		mov	fp, #18
 10684 0ad4 7AE6     		b	.L911
 10685              	.LVL1235:
 10686              	.L835:
 940:src/display.c **** 				}
 10687              		.loc 1 940 9 view .LVU3474
 10688              	.LBE482:
 10689              	.LBE489:
 10690              	.LBE568:
 10691              	.LBB569:
2339:src/display.c **** 			else
 10692              		.loc 1 2339 5 is_stmt 1 view .LVU3475
ARM GAS  /tmp/ccAnlOT7.s 			page 296


 10693 0ad6 0021     		movs	r1, #0
 10694 0ad8 9048     		ldr	r0, .L1105+12
 10695 0ada FFF7FEFF 		bl	set_digits_string
 10696              	.LVL1236:
2373:src/display.c **** 	} else if (State2.multi) {
 10697              		.loc 1 2373 3 view .LVU3476
 10698 0ade 1EA8     		add	r0, sp, #120
 10699 0ae0 FFF7FEFF 		bl	set_status
 10700              	.LVL1237:
2373:src/display.c **** 	} else if (State2.multi) {
 10701              		.loc 1 2373 3 is_stmt 0 view .LVU3477
 10702              	.LBE569:
2459:src/display.c **** nostk:	show_flags();
 10703              		.loc 1 2459 2 is_stmt 1 view .LVU3478
 10704 0ae4 FFF7FEFF 		bl	show_stack
 10705              	.LVL1238:
2460:src/display.c **** 	if (!skip) {
 10706              		.loc 1 2460 8 view .LVU3479
 10707 0ae8 FFF7FEFF 		bl	show_flags
 10708              	.LVL1239:
2461:src/display.c **** 		if (State2.runmode) {
 10709              		.loc 1 2461 2 view .LVU3480
 10710 0aec 1EE6     		b	.L837
 10711              	.LVL1240:
 10712              	.L889:
2439:src/display.c **** 		set_dot(STO_annun);
 10713              		.loc 1 2439 4 view .LVU3481
 10714 0aee 8C48     		ldr	r0, .L1105+16
 10715              	.LVL1241:
2439:src/display.c **** 		set_dot(STO_annun);
 10716              		.loc 1 2439 4 is_stmt 0 view .LVU3482
 10717 0af0 FFF7FEFF 		bl	set_status
 10718              	.LVL1242:
2439:src/display.c **** 		set_dot(STO_annun);
 10719              		.loc 1 2439 4 view .LVU3483
 10720 0af4 8FE7     		b	.L890
 10721              	.LVL1243:
 10722              	.L1083:
 10723              	.LBB570:
 10724              	.LBB507:
2345:src/display.c **** 				decimal64 z;
 10725              		.loc 1 2345 5 is_stmt 1 view .LVU3484
2346:src/display.c **** 
 10726              		.loc 1 2346 5 view .LVU3485
2348:src/display.c **** 				if (opKIND(op) == KIND_MON) {
 10727              		.loc 1 2348 5 view .LVU3486
 10728 0af6 0CA8     		add	r0, sp, #48
 10729 0af8 FFF7FEFF 		bl	getX
 10730              	.LVL1244:
2349:src/display.c **** 					const unsigned int f = argKIND(op);
 10731              		.loc 1 2349 5 view .LVU3487
2349:src/display.c **** 					const unsigned int f = argKIND(op);
 10732              		.loc 1 2349 8 is_stmt 0 view .LVU3488
 10733 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10734 0b00 022B     		cmp	r3, #2
 10735 0b02 2BD1     		bne	.L840
 10736              	.LBB503:
ARM GAS  /tmp/ccAnlOT7.s 			page 297


2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10737              		.loc 1 2350 6 is_stmt 1 view .LVU3489
2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10738              		.loc 1 2350 25 is_stmt 0 view .LVU3490
 10739 0b04 5FFA8AFA 		uxtb	r10, r10
 10740              	.LVL1245:
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10741              		.loc 1 2351 6 is_stmt 1 view .LVU3491
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10742              		.loc 1 2351 9 is_stmt 0 view .LVU3492
 10743 0b08 BAF1980F 		cmp	r10, #152
 10744              	.LBB504:
2354:src/display.c **** 					}
 10745              		.loc 1 2354 7 view .LVU3493
 10746 0b0c 15AE     		add	r6, sp, #84
 10747              	.LBE504:
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10748              		.loc 1 2351 9 view .LVU3494
 10749 0b0e 21D8     		bhi	.L841
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10750              		.loc 1 2351 31 discriminator 1 view .LVU3495
 10751 0b10 1823     		movs	r3, #24
 10752 0b12 844A     		ldr	r2, .L1105+20
 10753 0b14 03FB0AF3 		mul	r3, r3, r10
 10754 0b18 D358     		ldr	r3, [r2, r3]
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10755              		.loc 1 2351 26 discriminator 1 view .LVU3496
 10756 0b1a DBB1     		cbz	r3, .L841
 10757              	.LBB505:
2352:src/display.c **** 						update_speed(0);
 10758              		.loc 1 2352 7 is_stmt 1 view .LVU3497
 10759              	.LVL1246:
2353:src/display.c **** 						fp(&r, &x);
 10760              		.loc 1 2353 22 view .LVU3498
2354:src/display.c **** 					}
 10761              		.loc 1 2354 7 view .LVU3499
 10762 0b1c 0CA9     		add	r1, sp, #48
 10763 0b1e 3046     		mov	r0, r6
 10764 0b20 9847     		blx	r3
 10765              	.LVL1247:
 10766              	.L842:
2354:src/display.c **** 					}
 10767              		.loc 1 2354 7 is_stmt 0 view .LVU3500
 10768              	.LBE505:
 10769              	.LBE503:
2360:src/display.c **** 				packed_from_number(&z, &r);
 10770              		.loc 1 2360 5 is_stmt 1 discriminator 1 view .LVU3501
 10771 0b22 814A     		ldr	r2, .L1105+24
 10772 0b24 3146     		mov	r1, r6
 10773 0b26 3046     		mov	r0, r6
 10774 0b28 FFF7FEFF 		bl	decNumberNormalize
 10775              	.LVL1248:
2361:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
 10776              		.loc 1 2361 5 discriminator 1 view .LVU3502
 10777 0b2c 06A8     		add	r0, sp, #24
 10778 0b2e 3146     		mov	r1, r6
 10779 0b30 FFF7FEFF 		bl	packed_from_number
ARM GAS  /tmp/ccAnlOT7.s 			page 298


 10780              	.LVL1249:
2362:src/display.c **** 				skip = 1;
 10781              		.loc 1 2362 5 discriminator 1 view .LVU3503
 10782 0b34 0022     		movs	r2, #0
 10783 0b36 06A8     		add	r0, sp, #24
 10784 0b38 3BE6     		b	.L1053
 10785              	.LVL1250:
 10786              	.L866:
2362:src/display.c **** 				skip = 1;
 10787              		.loc 1 2362 5 is_stmt 0 discriminator 1 view .LVU3504
 10788              	.LBE507:
 10789              	.LBE570:
 10790              	.LBB571:
 10791              	.LBB521:
2113:src/display.c **** #ifndef REALBUILD
 10792              		.loc 1 2113 5 is_stmt 1 view .LVU3505
2113:src/display.c **** #ifndef REALBUILD
 10793              		.loc 1 2113 34 is_stmt 0 view .LVU3506
 10794 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2113:src/display.c **** #ifndef REALBUILD
 10795              		.loc 1 2113 5 view .LVU3507
 10796 0b3e 4044     		add	r0, r0, r8
 10797 0b40 0021     		movs	r1, #0
 10798 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10799              	.LVL1251:
2115:src/display.c **** #endif
 10800              		.loc 1 2115 5 is_stmt 1 view .LVU3508
2115:src/display.c **** #endif
 10801              		.loc 1 2115 44 is_stmt 0 view .LVU3509
 10802 0b46 0A21     		movs	r1, #10
2115:src/display.c **** #endif
 10803              		.loc 1 2115 5 view .LVU3510
 10804 0b48 01FB0671 		mla	r1, r1, r6, r7
 10805 0b4c 7748     		ldr	r0, .L1105+28
 10806 0b4e FFF7FEFF 		bl	scopy
 10807              	.LVL1252:
2115:src/display.c **** #endif
 10808              		.loc 1 2115 5 view .LVU3511
 10809              	.LBE521:
 10810              	.LBE571:
2459:src/display.c **** nostk:	show_flags();
 10811              		.loc 1 2459 2 is_stmt 1 view .LVU3512
 10812 0b52 34E6     		b	.L1054
 10813              	.LVL1253:
 10814              	.L841:
 10815              	.LBB572:
 10816              	.LBB508:
 10817              	.LBB506:
2357:src/display.c **** 				} else
 10818              		.loc 1 2357 7 view .LVU3513
 10819 0b54 3046     		mov	r0, r6
 10820 0b56 FFF7FEFF 		bl	set_NaN
 10821              	.LVL1254:
 10822 0b5a E2E7     		b	.L842
 10823              	.LVL1255:
 10824              	.L840:
2357:src/display.c **** 				} else
ARM GAS  /tmp/ccAnlOT7.s 			page 299


 10825              		.loc 1 2357 7 is_stmt 0 view .LVU3514
 10826              	.LBE506:
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10827              		.loc 1 2359 6 is_stmt 1 view .LVU3515
 10828 0b5c 15AE     		add	r6, sp, #84
 10829 0b5e 0CAA     		add	r2, sp, #48
 10830 0b60 0AF07F01 		and	r1, r10, #127
 10831 0b64 3046     		mov	r0, r6
 10832 0b66 FFF7FEFF 		bl	do_conv
 10833              	.LVL1256:
 10834 0b6a DAE7     		b	.L842
 10835              	.LVL1257:
 10836              	.L1093:
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10837              		.loc 1 2359 6 is_stmt 0 view .LVU3516
 10838              	.LBE508:
 10839              	.LBE572:
2407:src/display.c **** 			j = State2.alpha_pos;
 10840              		.loc 1 2407 4 is_stmt 1 view .LVU3517
2407:src/display.c **** 			j = State2.alpha_pos;
 10841              		.loc 1 2407 20 is_stmt 0 view .LVU3518
 10842 0b6c 684A     		ldr	r2, .L1105
 10843 0b6e 0193     		str	r3, [sp, #4]
 10844 0b70 1168     		ldr	r1, [r2]
2407:src/display.c **** 			j = State2.alpha_pos;
 10845              		.loc 1 2407 9 view .LVU3519
 10846 0b72 1EA8     		add	r0, sp, #120
 10847 0b74 01F5F661 		add	r1, r1, #1968
 10848 0b78 FFF7FEFF 		bl	scopy
 10849              	.LVL1258:
2408:src/display.c **** 			if (j != 0) {
 10850              		.loc 1 2408 14 view .LVU3520
 10851 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10852              	.LVL1259:
2408:src/display.c **** 			if (j != 0) {
 10853              		.loc 1 2408 4 is_stmt 1 view .LVU3521
2409:src/display.c **** 				i = slen(buf);
 10854              		.loc 1 2409 4 view .LVU3522
2409:src/display.c **** 				i = slen(buf);
 10855              		.loc 1 2409 7 is_stmt 0 view .LVU3523
 10856 0b80 BBF1000F 		cmp	fp, #0
 10857 0b84 12D1     		bne	.L1094
2422:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10858              		.loc 1 2422 5 is_stmt 1 view .LVU3524
2422:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10859              		.loc 1 2422 8 is_stmt 0 view .LVU3525
 10860 0b86 BAF1000F 		cmp	r10, #0
 10861 0b8a 05D0     		beq	.L888
2423:src/display.c **** 					*bp++ = '\0';
 10862              		.loc 1 2423 6 is_stmt 1 view .LVU3526
 10863              	.LVL1260:
2423:src/display.c **** 					*bp++ = '\0';
 10864              		.loc 1 2423 26 is_stmt 0 view .LVU3527
 10865 0b8c 0AF1100A 		add	r10, r10, #16
2423:src/display.c **** 					*bp++ = '\0';
 10866              		.loc 1 2423 12 view .LVU3528
 10867 0b90 80F800A0 		strb	r10, [r0]
ARM GAS  /tmp/ccAnlOT7.s 			page 300


2424:src/display.c **** 				}
 10868              		.loc 1 2424 6 is_stmt 1 view .LVU3529
 10869              	.LVL1261:
2424:src/display.c **** 				}
 10870              		.loc 1 2424 12 is_stmt 0 view .LVU3530
 10871 0b94 80F801B0 		strb	fp, [r0, #1]
 10872              	.LVL1262:
 10873              	.L888:
2426:src/display.c **** 			}
 10874              		.loc 1 2426 5 is_stmt 1 view .LVU3531
 10875 0b98 1EA8     		add	r0, sp, #120
 10876 0b9a FFF7FEFF 		bl	set_status_right
 10877              	.LVL1263:
2459:src/display.c **** nostk:	show_flags();
 10878              		.loc 1 2459 2 view .LVU3532
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10879              		.loc 1 2220 6 is_stmt 0 view .LVU3533
 10880 0b9e 0025     		movs	r5, #0
2459:src/display.c **** nostk:	show_flags();
 10881              		.loc 1 2459 2 view .LVU3534
 10882 0ba0 FFF7FEFF 		bl	show_stack
 10883              	.LVL1264:
2460:src/display.c **** 	if (!skip) {
 10884              		.loc 1 2460 8 is_stmt 1 view .LVU3535
 10885 0ba4 FFF7FEFF 		bl	show_flags
 10886              	.LVL1265:
2461:src/display.c **** 		if (State2.runmode) {
 10887              		.loc 1 2461 2 view .LVU3536
 10888 0ba8 FFF751BB 		b	.L817
 10889              	.LVL1266:
 10890              	.L1094:
2410:src/display.c **** 				//				print_debug(200,i);
 10891              		.loc 1 2410 5 view .LVU3537
2410:src/display.c **** 				//				print_debug(200,i);
 10892              		.loc 1 2410 9 is_stmt 0 view .LVU3538
 10893 0bac 1EA8     		add	r0, sp, #120
 10894              	.LVL1267:
2410:src/display.c **** 				//				print_debug(200,i);
 10895              		.loc 1 2410 9 view .LVU3539
 10896 0bae FFF7FEFF 		bl	slen
 10897              	.LVL1268:
2412:src/display.c **** 				//print_debug(201,j);
 10898              		.loc 1 2412 5 is_stmt 1 view .LVU3540
2414:src/display.c **** 					buf[ (i - j) ] = '\0';
 10899              		.loc 1 2414 5 view .LVU3541
2412:src/display.c **** 				//print_debug(201,j);
 10900              		.loc 1 2412 7 is_stmt 0 view .LVU3542
 10901 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 10902              	.LVL1269:
2414:src/display.c **** 					buf[ (i - j) ] = '\0';
 10903              		.loc 1 2414 12 view .LVU3543
 10904 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
 10905              	.LVL1270:
2414:src/display.c **** 					buf[ (i - j) ] = '\0';
 10906              		.loc 1 2414 8 view .LVU3544
 10907 0bba 0B28     		cmp	r0, #11
 10908 0bbc 7FF719AB 		ble	.L820
ARM GAS  /tmp/ccAnlOT7.s 			page 301


2415:src/display.c **** 					set_status_right(buf);
 10909              		.loc 1 2415 6 is_stmt 1 view .LVU3545
2415:src/display.c **** 					set_status_right(buf);
 10910              		.loc 1 2415 21 is_stmt 0 view .LVU3546
 10911 0bc0 28AB     		add	r3, sp, #160
 10912 0bc2 1A18     		adds	r2, r3, r0
 10913 0bc4 019B     		ldr	r3, [sp, #4]
 10914 0bc6 02F8283C 		strb	r3, [r2, #-40]
2416:src/display.c **** 				}
 10915              		.loc 1 2416 6 is_stmt 1 view .LVU3547
 10916 0bca 1EA8     		add	r0, sp, #120
 10917 0bcc FFF7FEFF 		bl	set_status_right
 10918              	.LVL1271:
2459:src/display.c **** nostk:	show_flags();
 10919              		.loc 1 2459 2 view .LVU3548
 10920 0bd0 FFF7FEFF 		bl	show_stack
 10921              	.LVL1272:
2460:src/display.c **** 	if (!skip) {
 10922              		.loc 1 2460 8 view .LVU3549
 10923 0bd4 FFF7FEFF 		bl	show_flags
 10924              	.LVL1273:
2461:src/display.c **** 		if (State2.runmode) {
 10925              		.loc 1 2461 2 view .LVU3550
 10926 0bd8 FFF739BB 		b	.L817
 10927              	.L1092:
2402:src/display.c **** 		} else if (State2.alphas) {
 10928              		.loc 1 2402 4 view .LVU3551
2402:src/display.c **** 		} else if (State2.alphas) {
 10929              		.loc 1 2402 46 is_stmt 0 view .LVU3552
 10930 0bdc 581E     		subs	r0, r3, #1
 10931 0bde FFF7FEFF 		bl	get_reg_n
 10932              	.LVL1274:
 10933              	.LBB573:
 10934              	.LBI573:
2553:src/display.c **** 	int glen = *graphic++;
 10935              		.loc 1 2553 13 is_stmt 1 view .LVU3553
 10936              	.LBB574:
2554:src/display.c **** 	int i, j;
 10937              		.loc 1 2554 2 view .LVU3554
2562:src/display.c **** #endif
 10938              		.loc 1 2562 15 is_stmt 0 view .LVU3555
 10939 0be2 5349     		ldr	r1, .L1105+32
2554:src/display.c **** 	int i, j;
 10940              		.loc 1 2554 6 view .LVU3556
 10941 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 10942              	.LVL1275:
2555:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10943              		.loc 1 2555 2 is_stmt 1 view .LVU3557
2562:src/display.c **** #endif
 10944              		.loc 1 2562 2 view .LVU3558
2562:src/display.c **** #endif
 10945              		.loc 1 2562 15 is_stmt 0 view .LVU3559
 10946 0be6 0123     		movs	r3, #1
 10947 0be8 0B70     		strb	r3, [r1]
2564:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10948              		.loc 1 2564 2 is_stmt 1 view .LVU3560
2564:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
ARM GAS  /tmp/ccAnlOT7.s 			page 302


 10949              		.loc 1 2564 5 is_stmt 0 view .LVU3561
 10950 0bea 3AB3     		cbz	r2, .L881
2565:src/display.c **** 
 10951              		.loc 1 2565 2 is_stmt 1 view .LVU3562
 10952              	.LVL1276:
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 10953              		.loc 1 2567 2 view .LVU3563
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 10954              		.loc 1 2567 12 view .LVU3564
 10955 0bec C118     		adds	r1, r0, r3
 10956 0bee 0391     		str	r1, [sp, #12]
 10957 0bf0 4A2A     		cmp	r2, #74
 10958 0bf2 D4BF     		ite	le
 10959 0bf4 8918     		addle	r1, r1, r2
 10960 0bf6 4A31     		addgt	r1, r1, #74
 10961 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 10962 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 10963              	.LVL1277:
 10964              	.L882:
2568:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10965              		.loc 1 2568 13 view .LVU3565
 10966 0c00 029B     		ldr	r3, [sp, #8]
 10967 0c02 039E     		ldr	r6, [sp, #12]
 10968 0c04 03FA0BFA 		lsl	r10, r3, fp
 10969 0c08 0BF19405 		add	r5, fp, #148
 10970 0c0c 06E0     		b	.L885
 10971              	.LVL1278:
 10972              	.L1096:
 10973              	.LBB575:
 10974              	.LBB576:
 328:src/display.c **** 	else	clr_dot(n);
 10975              		.loc 1 328 10 is_stmt 0 view .LVU3566
 10976 0c0e FFF7FEFF 		bl	set_dot
 10977              	.LVL1279:
 10978              	.L884:
 328:src/display.c **** 	else	clr_dot(n);
 10979              		.loc 1 328 10 view .LVU3567
 10980              	.LBE576:
 10981              	.LBE575:
2568:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10982              		.loc 1 2568 22 is_stmt 1 view .LVU3568
2568:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10983              		.loc 1 2568 13 view .LVU3569
2568:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10984              		.loc 1 2568 3 is_stmt 0 view .LVU3570
 10985 0c12 019B     		ldr	r3, [sp, #4]
 10986 0c14 9E42     		cmp	r6, r3
 10987 0c16 05F10605 		add	r5, r5, #6
 10988 0c1a 08D0     		beq	.L1095
 10989              	.LVL1280:
 10990              	.L885:
2573:src/display.c **** #endif
 10991              		.loc 1 2573 4 is_stmt 1 view .LVU3571
 10992              	.LBB579:
 10993              	.LBI575:
 327:src/display.c **** 	if (on)	set_dot(n);
 10994              		.loc 1 327 6 view .LVU3572
ARM GAS  /tmp/ccAnlOT7.s 			page 303


 10995              	.LBB577:
 328:src/display.c **** 	else	clr_dot(n);
 10996              		.loc 1 328 2 view .LVU3573
 328:src/display.c **** 	else	clr_dot(n);
 10997              		.loc 1 328 10 view .LVU3574
 329:src/display.c **** }
 10998              		.loc 1 329 7 view .LVU3575
 10999              	.LBE577:
 11000              	.LBE579:
2573:src/display.c **** #endif
 11001              		.loc 1 2573 35 is_stmt 0 view .LVU3576
 11002 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11003              	.LVL1281:
 11004              	.LBB580:
 11005              	.LBB578:
 328:src/display.c **** 	else	clr_dot(n);
 11006              		.loc 1 328 5 view .LVU3577
 11007 0c20 13EA0A0F 		tst	r3, r10
 328:src/display.c **** 	else	clr_dot(n);
 11008              		.loc 1 328 10 view .LVU3578
 11009 0c24 2846     		mov	r0, r5
 328:src/display.c **** 	else	clr_dot(n);
 11010              		.loc 1 328 5 view .LVU3579
 11011 0c26 F2D1     		bne	.L1096
 329:src/display.c **** }
 11012              		.loc 1 329 7 view .LVU3580
 11013 0c28 FFF7FEFF 		bl	clr_dot
 11014              	.LVL1282:
 11015 0c2c F1E7     		b	.L884
 11016              	.LVL1283:
 11017              	.L1095:
 329:src/display.c **** }
 11018              		.loc 1 329 7 view .LVU3581
 11019              	.LBE578:
 11020              	.LBE580:
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 11021              		.loc 1 2567 17 is_stmt 1 view .LVU3582
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 11022              		.loc 1 2567 18 is_stmt 0 view .LVU3583
 11023 0c2e 0BF1010B 		add	fp, fp, #1
 11024              	.LVL1284:
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 11025              		.loc 1 2567 12 is_stmt 1 view .LVU3584
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 11026              		.loc 1 2567 2 is_stmt 0 view .LVU3585
 11027 0c32 BBF1060F 		cmp	fp, #6
 11028 0c36 E3D1     		bne	.L882
 11029 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 11030              	.LVL1285:
 11031              	.L881:
2567:src/display.c **** 		for (j=1; j<=glen; j++) {
 11032              		.loc 1 2567 2 view .LVU3586
 11033              	.LBE574:
 11034              	.LBE573:
2459:src/display.c **** nostk:	show_flags();
 11035              		.loc 1 2459 2 is_stmt 1 view .LVU3587
 11036 0c3c FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccAnlOT7.s 			page 304


 11037              	.LVL1286:
2460:src/display.c **** 	if (!skip) {
 11038              		.loc 1 2460 8 view .LVU3588
 11039 0c40 FFF7FEFF 		bl	show_flags
 11040              	.LVL1287:
2461:src/display.c **** 		if (State2.runmode) {
 11041              		.loc 1 2461 2 view .LVU3589
 11042 0c44 FFF703BB 		b	.L817
 11043              	.LVL1288:
 11044              	.L872:
 11045              	.LBB581:
 11046              	.LBB566:
2149:src/display.c **** 				n -= 100;
 11047              		.loc 1 2149 5 view .LVU3590
2149:src/display.c **** 				n -= 100;
 11048              		.loc 1 2149 11 is_stmt 0 view .LVU3591
 11049 0c48 3123     		movs	r3, #49
 11050 0c4a 4370     		strb	r3, [r0, #1]
2150:src/display.c **** 			}
 11051              		.loc 1 2150 5 is_stmt 1 view .LVU3592
2150:src/display.c **** 			}
 11052              		.loc 1 2150 7 is_stmt 0 view .LVU3593
 11053 0c4c A8F16408 		sub	r8, r8, #100
 11054              	.LVL1289:
2149:src/display.c **** 				n -= 100;
 11055              		.loc 1 2149 8 view .LVU3594
 11056 0c50 0230     		adds	r0, r0, #2
 11057              	.LVL1290:
 11058              	.L871:
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11059              		.loc 1 2153 3 is_stmt 1 view .LVU3595
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11060              		.loc 1 2153 6 is_stmt 0 view .LVU3596
 11061 0c52 B8F1630F 		cmp	r8, #99
 11062 0c56 7FF729AF 		ble	.L873
2156:src/display.c **** 		set_status(buf);
 11063              		.loc 1 2156 4 is_stmt 1 view .LVU3597
 11064              	.LVL1291:
2156:src/display.c **** 		set_status(buf);
 11065              		.loc 1 2156 20 is_stmt 0 view .LVU3598
 11066 0c5a 364B     		ldr	r3, .L1105+36
 11067 0c5c 9844     		add	r8, r8, r3
 11068              	.LVL1292:
2156:src/display.c **** 		set_status(buf);
 11069              		.loc 1 2156 10 view .LVU3599
 11070 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11071 0c62 0370     		strb	r3, [r0]
 11072 0c64 26E7     		b	.L875
 11073              	.LVL1293:
 11074              	.L1087:
2156:src/display.c **** 		set_status(buf);
 11075              		.loc 1 2156 10 view .LVU3600
 11076              	.LBE566:
 11077              	.LBE581:
 11078              	.LBB582:
 11079              	.LBB562:
 11080              	.LBB560:
ARM GAS  /tmp/ccAnlOT7.s 			page 305


2038:src/display.c **** 			end = regK_idx;
 11081              		.loc 1 2038 4 is_stmt 1 view .LVU3601
2039:src/display.c **** 			start = 3;
 11082              		.loc 1 2039 4 view .LVU3602
2040:src/display.c **** 			group = 4;
 11083              		.loc 1 2040 4 view .LVU3603
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11084              		.loc 1 2041 4 view .LVU3604
2042:src/display.c **** 		}
 11085              		.loc 1 2042 4 view .LVU3605
 11086 0c66 3448     		ldr	r0, .L1105+40
 11087 0c68 FFF7FEFF 		bl	set_status
 11088              	.LVL1294:
 11089 0c6c 4FF0070A 		mov	r10, #7
 11090 0c70 0822     		movs	r2, #8
 11091 0c72 4FF02408 		mov	r8, #36
 11092              	.LVL1295:
2042:src/display.c **** 		}
 11093              		.loc 1 2042 4 is_stmt 0 view .LVU3606
 11094 0c76 2220     		movs	r0, #34
2040:src/display.c **** 			group = 4;
 11095              		.loc 1 2040 10 view .LVU3607
 11096 0c78 4FF0030B 		mov	fp, #3
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11097              		.loc 1 2041 10 view .LVU3608
 11098 0c7c 0426     		movs	r6, #4
2039:src/display.c **** 			start = 3;
 11099              		.loc 1 2039 8 view .LVU3609
 11100 0c7e 4FF06F09 		mov	r9, #111
 11101              	.LVL1296:
2038:src/display.c **** 			end = regK_idx;
 11102              		.loc 1 2038 9 view .LVU3610
 11103 0c82 6427     		movs	r7, #100
 11104              	.LVL1297:
2038:src/display.c **** 			end = regK_idx;
 11105              		.loc 1 2038 9 view .LVU3611
 11106 0c84 00E6     		b	.L852
 11107              	.LVL1298:
 11108              	.L1084:
2038:src/display.c **** 			end = regK_idx;
 11109              		.loc 1 2038 9 view .LVU3612
 11110              	.LBE560:
1998:src/display.c **** 		p = num_arg(buf, free_mem());
 11111              		.loc 1 1998 3 is_stmt 1 view .LVU3613
 11112 0c86 2D48     		ldr	r0, .L1105+44
 11113 0c88 214F     		ldr	r7, .L1105
 11114              	.LVL1299:
1998:src/display.c **** 		p = num_arg(buf, free_mem());
 11115              		.loc 1 1998 3 is_stmt 0 view .LVU3614
 11116 0c8a FFF7FEFF 		bl	set_status
 11117              	.LVL1300:
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11118              		.loc 1 1999 3 is_stmt 1 view .LVU3615
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11119              		.loc 1 1999 20 is_stmt 0 view .LVU3616
 11120 0c8e FFF7FEFF 		bl	free_mem
 11121              	.LVL1301:
ARM GAS  /tmp/ccAnlOT7.s 			page 306


 11122 0c92 0146     		mov	r1, r0
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11123              		.loc 1 1999 7 view .LVU3617
 11124 0c94 15A8     		add	r0, sp, #84
 11125              	.LVL1302:
1999:src/display.c **** 		p = scopy(p, " , FL. ");
 11126              		.loc 1 1999 7 view .LVU3618
 11127 0c96 FFF7FEFF 		bl	num_arg
 11128              	.LVL1303:
2000:src/display.c **** 		p = num_arg(p, free_flash());
 11129              		.loc 1 2000 3 is_stmt 1 view .LVU3619
2000:src/display.c **** 		p = num_arg(p, free_flash());
 11130              		.loc 1 2000 7 is_stmt 0 view .LVU3620
 11131 0c9a 2949     		ldr	r1, .L1105+48
 11132 0c9c FFF7FEFF 		bl	scopy
 11133              	.LVL1304:
2000:src/display.c **** 		p = num_arg(p, free_flash());
 11134              		.loc 1 2000 7 view .LVU3621
 11135 0ca0 0646     		mov	r6, r0
 11136              	.LVL1305:
2001:src/display.c **** 		*p = '\0';
 11137              		.loc 1 2001 3 is_stmt 1 view .LVU3622
2001:src/display.c **** 		*p = '\0';
 11138              		.loc 1 2001 18 is_stmt 0 view .LVU3623
 11139 0ca2 FFF7FEFF 		bl	free_flash
 11140              	.LVL1306:
2001:src/display.c **** 		*p = '\0';
 11141              		.loc 1 2001 18 view .LVU3624
 11142 0ca6 0146     		mov	r1, r0
2001:src/display.c **** 		*p = '\0';
 11143              		.loc 1 2001 7 view .LVU3625
 11144 0ca8 3046     		mov	r0, r6
 11145 0caa FFF7FEFF 		bl	num_arg
 11146              	.LVL1307:
 11147 0cae 0346     		mov	r3, r0
 11148              	.LVL1308:
2002:src/display.c **** 		set_digits_string(buf, 0);
 11149              		.loc 1 2002 3 is_stmt 1 view .LVU3626
2002:src/display.c **** 		set_digits_string(buf, 0);
 11150              		.loc 1 2002 6 is_stmt 0 view .LVU3627
 11151 0cb0 0021     		movs	r1, #0
2003:src/display.c **** 	}
 11152              		.loc 1 2003 3 view .LVU3628
 11153 0cb2 15A8     		add	r0, sp, #84
 11154              	.LVL1309:
2002:src/display.c **** 		set_digits_string(buf, 0);
 11155              		.loc 1 2002 6 view .LVU3629
 11156 0cb4 1970     		strb	r1, [r3]
2003:src/display.c **** 	}
 11157              		.loc 1 2003 3 is_stmt 1 view .LVU3630
 11158 0cb6 FFF7FEFF 		bl	set_digits_string
 11159              	.LVL1310:
2003:src/display.c **** 	}
 11160              		.loc 1 2003 3 is_stmt 0 view .LVU3631
 11161 0cba 1EE6     		b	.L847
 11162              	.LVL1311:
 11163              	.L1086:
ARM GAS  /tmp/ccAnlOT7.s 			page 307


 11164              	.LBB561:
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11165              		.loc 1 2028 4 is_stmt 1 view .LVU3632
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11166              		.loc 1 2028 9 is_stmt 0 view .LVU3633
 11167 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11168              	.LVL1312:
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11169              		.loc 1 2028 9 view .LVU3634
 11170 0cc0 7F00     		lsls	r7, r7, #1
 11171              	.LVL1313:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11172              		.loc 1 2029 4 is_stmt 1 view .LVU3635
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11173              		.loc 1 2029 26 is_stmt 0 view .LVU3636
 11174 0cc2 462F     		cmp	r7, #70
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11175              		.loc 1 2030 8 view .LVU3637
 11176 0cc4 1F49     		ldr	r1, .L1105+52
 11177 0cc6 15A8     		add	r0, sp, #84
 11178              	.LVL1314:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11179              		.loc 1 2029 26 view .LVU3638
 11180 0cc8 B946     		mov	r9, r7
 11181              	.LVL1315:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11182              		.loc 1 2029 26 view .LVU3639
 11183 0cca A8BF     		it	ge
 11184 0ccc 4FF04609 		movge	r9, #70
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11185              		.loc 1 2030 8 view .LVU3640
 11186 0cd0 FFF7FEFF 		bl	scopy
 11187              	.LVL1316:
2031:src/display.c **** 			*p++ = '-';
 11188              		.loc 1 2031 8 view .LVU3641
 11189 0cd4 3946     		mov	r1, r7
 11190 0cd6 0222     		movs	r2, #2
 11191 0cd8 FFF7FEFF 		bl	num_arg_0
 11192              	.LVL1317:
2029:src/display.c **** 			p = scopy(buf, "FL ");
 11193              		.loc 1 2029 8 view .LVU3642
 11194 0cdc 09F11D09 		add	r9, r9, #29
 11195              	.LVL1318:
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
 11196              		.loc 1 2030 4 is_stmt 1 view .LVU3643
2031:src/display.c **** 			*p++ = '-';
 11197              		.loc 1 2031 4 view .LVU3644
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
 11198              		.loc 1 2032 4 view .LVU3645
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
 11199              		.loc 1 2032 9 is_stmt 0 view .LVU3646
 11200 0ce0 2D23     		movs	r3, #45
 11201 0ce2 00F8013B 		strb	r3, [r0], #1
 11202              	.LVL1319:
2033:src/display.c **** 			*p = '\0';
 11203              		.loc 1 2033 4 is_stmt 1 view .LVU3647
2033:src/display.c **** 			*p = '\0';
ARM GAS  /tmp/ccAnlOT7.s 			page 308


 11204              		.loc 1 2033 8 is_stmt 0 view .LVU3648
 11205 0ce6 4946     		mov	r1, r9
 11206 0ce8 0222     		movs	r2, #2
 11207 0cea FFF7FEFF 		bl	num_arg_0
 11208              	.LVL1320:
2033:src/display.c **** 			*p = '\0';
 11209              		.loc 1 2033 8 view .LVU3649
 11210 0cee 0246     		mov	r2, r0
 11211              	.LVL1321:
2034:src/display.c **** 			set_status(buf);
 11212              		.loc 1 2034 4 is_stmt 1 view .LVU3650
2034:src/display.c **** 			set_status(buf);
 11213              		.loc 1 2034 7 is_stmt 0 view .LVU3651
 11214 0cf0 4FF0000B 		mov	fp, #0
2035:src/display.c **** 		}
 11215              		.loc 1 2035 4 view .LVU3652
 11216 0cf4 15A8     		add	r0, sp, #84
 11217              	.LVL1322:
2034:src/display.c **** 			set_status(buf);
 11218              		.loc 1 2034 7 view .LVU3653
 11219 0cf6 82F800B0 		strb	fp, [r2]
2035:src/display.c **** 		}
 11220              		.loc 1 2035 4 is_stmt 1 view .LVU3654
 11221 0cfa 4FF00A0A 		mov	r10, #10
 11222 0cfe FFF7FEFF 		bl	set_status
 11223              	.LVL1323:
2024:src/display.c **** 		int start = 0;
 11224              		.loc 1 2024 7 is_stmt 0 view .LVU3655
 11225 0d02 5646     		mov	r6, r10
 11226 0d04 0222     		movs	r2, #2
 11227 0d06 4FF00908 		mov	r8, #9
 11228              	.LVL1324:
2024:src/display.c **** 		int start = 0;
 11229              		.loc 1 2024 7 view .LVU3656
 11230 0d0a 0720     		movs	r0, #7
 11231 0d0c BCE5     		b	.L852
 11232              	.L1106:
 11233 0d0e 00BF     		.align	2
 11234              	.L1105:
 11235 0d10 00000000 		.word	main_ram
 11236 0d14 00000000 		.word	DispMsg
 11237 0d18 A0000000 		.word	.LC40
 11238 0d1c 40000000 		.word	.LC30
 11239 0d20 A8000000 		.word	.LC41
 11240 0d24 00000000 		.word	monfuncs
 11241 0d28 00000000 		.word	Ctx
 11242 0d2c 00000000 		.word	LastDisplayedNumber
 11243 0d30 00000000 		.word	forceDispPlot
 11244 0d34 BC000000 		.word	.LC27
 11245 0d38 7C000000 		.word	.LC37
 11246 0d3c 4C000000 		.word	.LC31
 11247 0d40 54000000 		.word	.LC32
 11248 0d44 78000000 		.word	.LC36
 11249 0d48 00000000 		.word	DispPlot
 11250              	.LVL1325:
 11251              	.L1085:
2024:src/display.c **** 		int start = 0;
ARM GAS  /tmp/ccAnlOT7.s 			page 309


 11252              		.loc 1 2024 7 view .LVU3657
 11253              	.LBE561:
2007:src/display.c **** 		if (SizeStatRegs)
 11254              		.loc 1 2007 3 is_stmt 1 view .LVU3658
2007:src/display.c **** 		if (SizeStatRegs)
 11255              		.loc 1 2007 7 is_stmt 0 view .LVU3659
 11256 0d4c 15AE     		add	r6, sp, #84
 11257              	.LVL1326:
2007:src/display.c **** 		if (SizeStatRegs)
 11258              		.loc 1 2007 7 view .LVU3660
 11259 0d4e 1849     		ldr	r1, .L1107
 11260 0d50 3046     		mov	r0, r6
 11261 0d52 FFF7FEFF 		bl	scopy
 11262              	.LVL1327:
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11263              		.loc 1 2008 7 view .LVU3661
 11264 0d56 174A     		ldr	r2, .L1107+4
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11265              		.loc 1 2008 6 view .LVU3662
 11266 0d58 1268     		ldr	r2, [r2]
2007:src/display.c **** 		if (SizeStatRegs)
 11267              		.loc 1 2007 7 view .LVU3663
 11268 0d5a 0346     		mov	r3, r0
 11269              	.LVL1328:
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11270              		.loc 1 2008 3 is_stmt 1 view .LVU3664
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11271              		.loc 1 2008 6 is_stmt 0 view .LVU3665
 11272 0d5c BAB9     		cbnz	r2, .L1097
 11273              	.L849:
2010:src/display.c **** 		set_status(buf);
 11274              		.loc 1 2010 3 is_stmt 1 view .LVU3666
2010:src/display.c **** 		set_status(buf);
 11275              		.loc 1 2010 6 is_stmt 0 view .LVU3667
 11276 0d5e 0022     		movs	r2, #0
 11277 0d60 1A70     		strb	r2, [r3]
2011:src/display.c **** 
 11278              		.loc 1 2011 3 is_stmt 1 view .LVU3668
 11279 0d62 3046     		mov	r0, r6
 11280              	.LVL1329:
2011:src/display.c **** 
 11281              		.loc 1 2011 3 is_stmt 0 view .LVU3669
 11282 0d64 FFF7FEFF 		bl	set_status
 11283              	.LVL1330:
2014:src/display.c **** 		if (LocalRegs < 0) {
 11284              		.loc 1 2014 3 is_stmt 1 view .LVU3670
2014:src/display.c **** 		if (LocalRegs < 0) {
 11285              		.loc 1 2014 7 is_stmt 0 view .LVU3671
 11286 0d68 FFF7FEFF 		bl	global_regs
 11287              	.LVL1331:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11288              		.loc 1 2015 7 view .LVU3672
 11289 0d6c 124F     		ldr	r7, .L1107+8
 11290              	.LVL1332:
2014:src/display.c **** 		if (LocalRegs < 0) {
 11291              		.loc 1 2014 7 view .LVU3673
 11292 0d6e 0146     		mov	r1, r0
ARM GAS  /tmp/ccAnlOT7.s 			page 310


 11293 0d70 3046     		mov	r0, r6
 11294 0d72 FFF7FEFF 		bl	num_arg
 11295              	.LVL1333:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11296              		.loc 1 2015 7 view .LVU3674
 11297 0d76 3A68     		ldr	r2, [r7]
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11298              		.loc 1 2015 6 view .LVU3675
 11299 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11300 0d7c 002A     		cmp	r2, #0
2014:src/display.c **** 		if (LocalRegs < 0) {
 11301              		.loc 1 2014 7 view .LVU3676
 11302 0d7e 0346     		mov	r3, r0
 11303              	.LVL1334:
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11304              		.loc 1 2015 3 is_stmt 1 view .LVU3677
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
 11305              		.loc 1 2015 6 is_stmt 0 view .LVU3678
 11306 0d80 0ADB     		blt	.L1098
 11307              	.LVL1335:
 11308              	.L850:
2019:src/display.c **** 		set_digits_string(buf, 0);
 11309              		.loc 1 2019 3 is_stmt 1 view .LVU3679
2019:src/display.c **** 		set_digits_string(buf, 0);
 11310              		.loc 1 2019 6 is_stmt 0 view .LVU3680
 11311 0d82 0021     		movs	r1, #0
2020:src/display.c **** 	} else {
 11312              		.loc 1 2020 3 view .LVU3681
 11313 0d84 3046     		mov	r0, r6
 11314              	.LVL1336:
2019:src/display.c **** 		set_digits_string(buf, 0);
 11315              		.loc 1 2019 6 view .LVU3682
 11316 0d86 1970     		strb	r1, [r3]
2020:src/display.c **** 	} else {
 11317              		.loc 1 2020 3 is_stmt 1 view .LVU3683
 11318 0d88 FFF7FEFF 		bl	set_digits_string
 11319              	.LVL1337:
2020:src/display.c **** 	} else {
 11320              		.loc 1 2020 3 is_stmt 0 view .LVU3684
 11321 0d8c B5E5     		b	.L847
 11322              	.LVL1338:
 11323              	.L1097:
2009:src/display.c **** 		*p = '\0';
 11324              		.loc 1 2009 4 is_stmt 1 view .LVU3685
2009:src/display.c **** 		*p = '\0';
 11325              		.loc 1 2009 8 is_stmt 0 view .LVU3686
 11326 0d8e 0B49     		ldr	r1, .L1107+12
 11327 0d90 FFF7FEFF 		bl	scopy
 11328              	.LVL1339:
2009:src/display.c **** 		*p = '\0';
 11329              		.loc 1 2009 8 view .LVU3687
 11330 0d94 0346     		mov	r3, r0
 11331              	.LVL1340:
2009:src/display.c **** 		*p = '\0';
 11332              		.loc 1 2009 8 view .LVU3688
 11333 0d96 E2E7     		b	.L849
 11334              	.LVL1341:
ARM GAS  /tmp/ccAnlOT7.s 			page 311


 11335              	.L1098:
2016:src/display.c **** 			p = num_arg(p, local_regs());
 11336              		.loc 1 2016 4 is_stmt 1 view .LVU3689
2016:src/display.c **** 			p = num_arg(p, local_regs());
 11337              		.loc 1 2016 8 is_stmt 0 view .LVU3690
 11338 0d98 0949     		ldr	r1, .L1107+16
 11339 0d9a FFF7FEFF 		bl	scopy
 11340              	.LVL1342:
2016:src/display.c **** 			p = num_arg(p, local_regs());
 11341              		.loc 1 2016 8 view .LVU3691
 11342 0d9e 8046     		mov	r8, r0
 11343              	.LVL1343:
2017:src/display.c **** 		}
 11344              		.loc 1 2017 4 is_stmt 1 view .LVU3692
2017:src/display.c **** 		}
 11345              		.loc 1 2017 19 is_stmt 0 view .LVU3693
 11346 0da0 FFF7FEFF 		bl	local_regs
 11347              	.LVL1344:
2017:src/display.c **** 		}
 11348              		.loc 1 2017 19 view .LVU3694
 11349 0da4 0146     		mov	r1, r0
2017:src/display.c **** 		}
 11350              		.loc 1 2017 8 view .LVU3695
 11351 0da6 4046     		mov	r0, r8
 11352 0da8 FFF7FEFF 		bl	num_arg
 11353              	.LVL1345:
 11354 0dac 0346     		mov	r3, r0
 11355              	.LVL1346:
2017:src/display.c **** 		}
 11356              		.loc 1 2017 8 view .LVU3696
 11357 0dae E8E7     		b	.L850
 11358              	.L1108:
 11359              		.align	2
 11360              	.L1107:
 11361 0db0 5C000000 		.word	.LC33
 11362 0db4 00000000 		.word	SizeStatRegs
 11363 0db8 00000000 		.word	main_ram
 11364 0dbc 64000000 		.word	.LC34
 11365 0dc0 6C000000 		.word	.LC35
 11366              	.LBE562:
 11367              	.LBE582:
 11368              		.cfi_endproc
 11369              	.LFE34:
 11371              		.section	.text.frozen_display,"ax",%progbits
 11372              		.align	1
 11373              		.p2align 2,,3
 11374              		.global	frozen_display
 11375              		.syntax unified
 11376              		.thumb
 11377              		.thumb_func
 11378              		.fpu fpv4-sp-d16
 11380              	frozen_display:
 11381              	.LFB35:
2547:src/display.c **** 	State2.disp_freeze = 0;
 11382              		.loc 1 2547 1 is_stmt 1 view -0
 11383              		.cfi_startproc
 11384              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccAnlOT7.s 			page 312


 11385              		@ frame_needed = 0, uses_anonymous_args = 0
2548:src/display.c **** 	display();
 11386              		.loc 1 2548 2 view .LVU3698
2547:src/display.c **** 	State2.disp_freeze = 0;
 11387              		.loc 1 2547 1 is_stmt 0 view .LVU3699
 11388 0000 10B5     		push	{r4, lr}
 11389              		.cfi_def_cfa_offset 8
 11390              		.cfi_offset 4, -8
 11391              		.cfi_offset 14, -4
2548:src/display.c **** 	display();
 11392              		.loc 1 2548 21 view .LVU3700
 11393 0002 064C     		ldr	r4, .L1111
 11394 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11395 0006 6FF30413 		bfc	r3, #4, #1
 11396 000a E375     		strb	r3, [r4, #23]
2549:src/display.c **** 	State2.disp_freeze = 1;
 11397              		.loc 1 2549 2 is_stmt 1 view .LVU3701
 11398 000c FFF7FEFF 		bl	display
 11399              	.LVL1347:
2550:src/display.c **** }
 11400              		.loc 1 2550 2 view .LVU3702
2550:src/display.c **** }
 11401              		.loc 1 2550 21 is_stmt 0 view .LVU3703
 11402 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11403 0012 43F01003 		orr	r3, r3, #16
 11404 0016 E375     		strb	r3, [r4, #23]
2551:src/display.c **** 
 11405              		.loc 1 2551 1 view .LVU3704
 11406 0018 10BD     		pop	{r4, pc}
 11407              	.L1112:
 11408 001a 00BF     		.align	2
 11409              	.L1111:
 11410 001c 00000000 		.word	StateWhileOn
 11411              		.cfi_endproc
 11412              	.LFE35:
 11414              		.section	.text.message,"ax",%progbits
 11415              		.align	1
 11416              		.p2align 2,,3
 11417              		.global	message
 11418              		.syntax unified
 11419              		.thumb
 11420              		.thumb_func
 11421              		.fpu fpv4-sp-d16
 11423              	message:
 11424              	.LVL1348:
 11425              	.LFB41:
2743:src/display.c **** 	State2.disp_freeze = 0;
 11426              		.loc 1 2743 1 is_stmt 1 view -0
 11427              		.cfi_startproc
 11428              		@ args = 0, pretend = 0, frame = 0
 11429              		@ frame_needed = 0, uses_anonymous_args = 0
2744:src/display.c **** 	State2.disp_small = 0;
 11430              		.loc 1 2744 2 view .LVU3706
2745:src/display.c **** 	WasDataEntry = 0;
 11431              		.loc 1 2745 2 view .LVU3707
2745:src/display.c **** 	WasDataEntry = 0;
 11432              		.loc 1 2745 20 is_stmt 0 view .LVU3708
ARM GAS  /tmp/ccAnlOT7.s 			page 313


 11433 0000 174A     		ldr	r2, .L1123
2743:src/display.c **** 	State2.disp_freeze = 0;
 11434              		.loc 1 2743 1 view .LVU3709
 11435 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11436              		.cfi_def_cfa_offset 24
 11437              		.cfi_offset 3, -24
 11438              		.cfi_offset 4, -20
 11439              		.cfi_offset 5, -16
 11440              		.cfi_offset 6, -12
 11441              		.cfi_offset 7, -8
 11442              		.cfi_offset 14, -4
2745:src/display.c **** 	WasDataEntry = 0;
 11443              		.loc 1 2745 20 view .LVU3710
 11444 0004 D38A     		ldrh	r3, [r2, #22]
2746:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11445              		.loc 1 2746 15 view .LVU3711
 11446 0006 174E     		ldr	r6, .L1123+4
2745:src/display.c **** 	WasDataEntry = 0;
 11447              		.loc 1 2745 20 view .LVU3712
 11448 0008 23F48453 		bic	r3, r3, #4224
2746:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11449              		.loc 1 2746 15 view .LVU3713
 11450 000c 0027     		movs	r7, #0
2745:src/display.c **** 	WasDataEntry = 0;
 11451              		.loc 1 2745 20 view .LVU3714
 11452 000e D382     		strh	r3, [r2, #22]	@ movhi
2746:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11453              		.loc 1 2746 2 is_stmt 1 view .LVU3715
2747:src/display.c **** 		// Complete redraw necessary
 11454              		.loc 1 2747 5 is_stmt 0 view .LVU3716
 11455 0010 9B05     		lsls	r3, r3, #22
2743:src/display.c **** 	State2.disp_freeze = 0;
 11456              		.loc 1 2743 1 view .LVU3717
 11457 0012 0546     		mov	r5, r0
 11458 0014 0C46     		mov	r4, r1
2746:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11459              		.loc 1 2746 15 view .LVU3718
 11460 0016 3760     		str	r7, [r6]
2747:src/display.c **** 		// Complete redraw necessary
 11461              		.loc 1 2747 2 is_stmt 1 view .LVU3719
2747:src/display.c **** 		// Complete redraw necessary
 11462              		.loc 1 2747 5 is_stmt 0 view .LVU3720
 11463 0018 12D5     		bpl	.L1114
2747:src/display.c **** 		// Complete redraw necessary
 11464              		.loc 1 2747 27 discriminator 1 view .LVU3721
 11465 001a D1B1     		cbz	r1, .L1122
 11466              	.L1115:
2754:src/display.c **** 			ShowRPN = 0;
 11467              		.loc 1 2754 4 is_stmt 1 view .LVU3722
 11468 001c FFF7FEFF 		bl	reset_disp
 11469              	.LVL1349:
2755:src/display.c **** 			set_annunciators();
 11470              		.loc 1 2755 4 view .LVU3723
2755:src/display.c **** 			set_annunciators();
 11471              		.loc 1 2755 12 is_stmt 0 view .LVU3724
 11472 0020 114B     		ldr	r3, .L1123+8
 11473 0022 0026     		movs	r6, #0
ARM GAS  /tmp/ccAnlOT7.s 			page 314


 11474 0024 1E60     		str	r6, [r3]
2756:src/display.c **** 			set_digits_string( str2, 0 );
 11475              		.loc 1 2756 4 is_stmt 1 view .LVU3725
 11476 0026 FFF7FEFF 		bl	set_annunciators
 11477              	.LVL1350:
2757:src/display.c **** 		}
 11478              		.loc 1 2757 4 view .LVU3726
 11479 002a 3146     		mov	r1, r6
 11480 002c 2046     		mov	r0, r4
 11481 002e FFF7FEFF 		bl	set_digits_string
 11482              	.LVL1351:
2759:src/display.c **** 		finish_display();// message
 11483              		.loc 1 2759 3 view .LVU3727
 11484 0032 2846     		mov	r0, r5
 11485 0034 FFF7FEFF 		bl	set_status
 11486              	.LVL1352:
2760:src/display.c **** 	}
 11487              		.loc 1 2760 3 view .LVU3728
2762:src/display.c **** 
 11488              		.loc 1 2762 1 is_stmt 0 view .LVU3729
 11489 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11490              		.cfi_remember_state
 11491              		.cfi_restore 14
 11492              		.cfi_restore 7
 11493              		.cfi_restore 6
 11494              		.cfi_restore 5
 11495              		.cfi_restore 4
 11496              		.cfi_restore 3
 11497              		.cfi_def_cfa_offset 0
 11498              	.LVL1353:
2760:src/display.c **** 	}
 11499              		.loc 1 2760 3 view .LVU3730
 11500 003c FFF7FEBF 		b	finish_display
 11501              	.LVL1354:
 11502              	.L1114:
 11503              		.cfi_restore_state
2753:src/display.c **** 			reset_disp();
 11504              		.loc 1 2753 3 is_stmt 1 view .LVU3731
2753:src/display.c **** 			reset_disp();
 11505              		.loc 1 2753 6 is_stmt 0 view .LVU3732
 11506 0040 0029     		cmp	r1, #0
 11507 0042 EBD1     		bne	.L1115
2759:src/display.c **** 		finish_display();// message
 11508              		.loc 1 2759 3 is_stmt 1 view .LVU3733
 11509 0044 2846     		mov	r0, r5
 11510              	.LVL1355:
2759:src/display.c **** 		finish_display();// message
 11511              		.loc 1 2759 3 is_stmt 0 view .LVU3734
 11512 0046 FFF7FEFF 		bl	set_status
 11513              	.LVL1356:
2760:src/display.c **** 	}
 11514              		.loc 1 2760 3 is_stmt 1 view .LVU3735
2762:src/display.c **** 
 11515              		.loc 1 2762 1 is_stmt 0 view .LVU3736
 11516 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11517              		.cfi_remember_state
 11518              		.cfi_restore 14
ARM GAS  /tmp/ccAnlOT7.s 			page 315


 11519              		.cfi_restore 7
 11520              		.cfi_restore 6
 11521              		.cfi_restore 5
 11522              		.cfi_restore 4
 11523              		.cfi_restore 3
 11524              		.cfi_def_cfa_offset 0
 11525              	.LVL1357:
2760:src/display.c **** 	}
 11526              		.loc 1 2760 3 view .LVU3737
 11527 004e FFF7FEBF 		b	finish_display
 11528              	.LVL1358:
 11529              	.L1122:
 11530              		.cfi_restore_state
2749:src/display.c **** 		display();
 11531              		.loc 1 2749 3 is_stmt 1 view .LVU3738
2749:src/display.c **** 		display();
 11532              		.loc 1 2749 11 is_stmt 0 view .LVU3739
 11533 0052 064B     		ldr	r3, .L1123+12
 11534 0054 1860     		str	r0, [r3]
2750:src/display.c **** 	}
 11535              		.loc 1 2750 3 is_stmt 1 view .LVU3740
2762:src/display.c **** 
 11536              		.loc 1 2762 1 is_stmt 0 view .LVU3741
 11537 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11538              		.cfi_restore 14
 11539              		.cfi_restore 7
 11540              		.cfi_restore 6
 11541              		.cfi_restore 5
 11542              		.cfi_restore 4
 11543              		.cfi_restore 3
 11544              		.cfi_def_cfa_offset 0
2750:src/display.c **** 	}
 11545              		.loc 1 2750 3 view .LVU3742
 11546 005a FFF7FEBF 		b	display
 11547              	.LVL1359:
 11548              	.L1124:
2750:src/display.c **** 	}
 11549              		.loc 1 2750 3 view .LVU3743
 11550 005e 00BF     		.align	2
 11551              	.L1123:
 11552 0060 00000000 		.word	StateWhileOn
 11553 0064 00000000 		.word	WasDataEntry
 11554 0068 00000000 		.word	ShowRPN
 11555 006c 00000000 		.word	DispMsg
 11556              		.cfi_endproc
 11557              	.LFE41:
 11559              		.section	.text.error_message,"ax",%progbits
 11560              		.align	1
 11561              		.p2align 2,,3
 11562              		.global	error_message
 11563              		.syntax unified
 11564              		.thumb
 11565              		.thumb_func
 11566              		.fpu fpv4-sp-d16
 11568              	error_message:
 11569              	.LVL1360:
 11570              	.LFB1:
ARM GAS  /tmp/ccAnlOT7.s 			page 316


 122:src/display.c **** #define MSG1(top) top "\0"
 11571              		.loc 1 122 1 is_stmt 1 view -0
 11572              		.cfi_startproc
 11573              		@ args = 0, pretend = 0, frame = 0
 11574              		@ frame_needed = 0, uses_anonymous_args = 0
 127:src/display.c **** 	{
 11575              		.loc 1 127 2 view .LVU3745
 185:src/display.c **** 	{
 11576              		.loc 1 185 2 view .LVU3746
 220:src/display.c **** 		const char *p = error_table[e];
 11577              		.loc 1 220 2 view .LVU3747
 122:src/display.c **** #define MSG1(top) top "\0"
 11578              		.loc 1 122 1 is_stmt 0 view .LVU3748
 11579 0000 38B5     		push	{r3, r4, r5, lr}
 11580              		.cfi_def_cfa_offset 16
 11581              		.cfi_offset 3, -16
 11582              		.cfi_offset 4, -12
 11583              		.cfi_offset 5, -8
 11584              		.cfi_offset 14, -4
 220:src/display.c **** 		const char *p = error_table[e];
 11585              		.loc 1 220 20 view .LVU3749
 11586 0002 1A4B     		ldr	r3, .L1136
 11587 0004 1B68     		ldr	r3, [r3]
 11588 0006 0343     		orrs	r3, r0, r3
 11589 0008 2CD0     		beq	.L1125
 11590              	.LBB583:
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11591              		.loc 1 221 3 is_stmt 1 view .LVU3750
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11592              		.loc 1 221 15 is_stmt 0 view .LVU3751
 11593 000a 194B     		ldr	r3, .L1136+4
 11594 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11595              	.LVL1361:
 222:src/display.c **** 		if (*q == '\0')
 11596              		.loc 1 222 3 is_stmt 1 view .LVU3752
 11597 0010 0446     		mov	r4, r0
 222:src/display.c **** 		if (*q == '\0')
 11598              		.loc 1 222 19 is_stmt 0 view .LVU3753
 11599 0012 0021     		movs	r1, #0
 11600 0014 2846     		mov	r0, r5
 11601              	.LVL1362:
 222:src/display.c **** 		if (*q == '\0')
 11602              		.loc 1 222 19 view .LVU3754
 11603 0016 FFF7FEFF 		bl	find_char
 11604              	.LVL1363:
 223:src/display.c **** 			q = S7_ERROR;
 11605              		.loc 1 223 3 is_stmt 1 view .LVU3755
 223:src/display.c **** 			q = S7_ERROR;
 11606              		.loc 1 223 7 is_stmt 0 view .LVU3756
 11607 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 223:src/display.c **** 			q = S7_ERROR;
 11608              		.loc 1 223 6 view .LVU3757
 11609 001c 9BB9     		cbnz	r3, .L1134
 224:src/display.c **** 		if (*q == 'X') {
 11610              		.loc 1 224 6 view .LVU3758
 11611 001e 1549     		ldr	r1, .L1136+8
 11612              	.L1127:
ARM GAS  /tmp/ccAnlOT7.s 			page 317


 11613              	.LVL1364:
 234:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 11614              		.loc 1 234 4 is_stmt 1 view .LVU3759
 11615 0020 2846     		mov	r0, r5
 11616 0022 FFF7FEFF 		bl	message
 11617              	.LVL1365:
 235:src/display.c **** #ifndef REALBUILD
 11618              		.loc 1 235 4 view .LVU3760
 235:src/display.c **** #ifndef REALBUILD
 11619              		.loc 1 235 23 is_stmt 0 view .LVU3761
 11620 0026 144B     		ldr	r3, .L1136+12
 237:src/display.c **** #endif
 11621              		.loc 1 237 4 view .LVU3762
 11622 0028 1449     		ldr	r1, .L1136+16
 235:src/display.c **** #ifndef REALBUILD
 11623              		.loc 1 235 23 view .LVU3763
 11624 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 237:src/display.c **** #endif
 11625              		.loc 1 237 4 view .LVU3764
 11626 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11627 0030 1348     		ldr	r0, .L1136+20
 235:src/display.c **** #ifndef REALBUILD
 11628              		.loc 1 235 28 view .LVU3765
 11629 0032 003C     		subs	r4, r4, #0
 235:src/display.c **** #ifndef REALBUILD
 11630              		.loc 1 235 28 view .LVU3766
 11631 0034 18BF     		it	ne
 11632 0036 0124     		movne	r4, #1
 11633              	.LVL1366:
 235:src/display.c **** #ifndef REALBUILD
 11634              		.loc 1 235 23 view .LVU3767
 11635 0038 64F30412 		bfi	r2, r4, #4, #1
 11636 003c DA75     		strb	r2, [r3, #23]
 237:src/display.c **** #endif
 11637              		.loc 1 237 4 is_stmt 1 view .LVU3768
 11638              	.LBE583:
 262:src/display.c **** 
 11639              		.loc 1 262 1 is_stmt 0 view .LVU3769
 11640 003e BDE83840 		pop	{r3, r4, r5, lr}
 11641              		.cfi_remember_state
 11642              		.cfi_restore 14
 11643              		.cfi_restore 5
 11644              		.cfi_restore 4
 11645              		.cfi_restore 3
 11646              		.cfi_def_cfa_offset 0
 11647              	.LVL1367:
 11648              	.LBB590:
 237:src/display.c **** #endif
 11649              		.loc 1 237 4 view .LVU3770
 11650 0042 FFF7FEBF 		b	scopy
 11651              	.LVL1368:
 11652              	.L1134:
 11653              		.cfi_restore_state
 225:src/display.c **** 			DispMsg = p;
 11654              		.loc 1 225 3 is_stmt 1 view .LVU3771
 225:src/display.c **** 			DispMsg = p;
 11655              		.loc 1 225 6 is_stmt 0 view .LVU3772
ARM GAS  /tmp/ccAnlOT7.s 			page 318


 11656 0046 582B     		cmp	r3, #88
 11657 0048 0DD1     		bne	.L1135
 226:src/display.c **** 			frozen_display();
 11658              		.loc 1 226 4 is_stmt 1 view .LVU3773
 11659              	.LBB584:
 11660              	.LBB585:
2548:src/display.c **** 	display();
 11661              		.loc 1 2548 21 is_stmt 0 view .LVU3774
 11662 004a 0B4C     		ldr	r4, .L1136+12
 11663              	.LVL1369:
2548:src/display.c **** 	display();
 11664              		.loc 1 2548 21 view .LVU3775
 11665              	.LBE585:
 11666              	.LBE584:
 226:src/display.c **** 			frozen_display();
 11667              		.loc 1 226 12 view .LVU3776
 11668 004c 0D4A     		ldr	r2, .L1136+24
 11669              	.LBB588:
 11670              	.LBB586:
2548:src/display.c **** 	display();
 11671              		.loc 1 2548 21 view .LVU3777
 11672 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11673              	.LBE586:
 11674              	.LBE588:
 226:src/display.c **** 			frozen_display();
 11675              		.loc 1 226 12 view .LVU3778
 11676 0050 1560     		str	r5, [r2]
 227:src/display.c **** 		}
 11677              		.loc 1 227 4 is_stmt 1 view .LVU3779
 11678              	.LBB589:
 11679              	.LBI584:
2546:src/display.c **** {
 11680              		.loc 1 2546 6 view .LVU3780
 11681              	.LBB587:
2548:src/display.c **** 	display();
 11682              		.loc 1 2548 2 view .LVU3781
2548:src/display.c **** 	display();
 11683              		.loc 1 2548 21 is_stmt 0 view .LVU3782
 11684 0052 6FF30413 		bfc	r3, #4, #1
 11685 0056 E375     		strb	r3, [r4, #23]
2549:src/display.c **** 	State2.disp_freeze = 1;
 11686              		.loc 1 2549 2 is_stmt 1 view .LVU3783
 11687 0058 FFF7FEFF 		bl	display
 11688              	.LVL1370:
2550:src/display.c **** }
 11689              		.loc 1 2550 2 view .LVU3784
2550:src/display.c **** }
 11690              		.loc 1 2550 21 is_stmt 0 view .LVU3785
 11691 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11692 005e 43F01003 		orr	r3, r3, #16
 11693 0062 E375     		strb	r3, [r4, #23]
 11694              	.LVL1371:
 11695              	.L1125:
2550:src/display.c **** }
 11696              		.loc 1 2550 21 view .LVU3786
 11697              	.LBE587:
 11698              	.LBE589:
ARM GAS  /tmp/ccAnlOT7.s 			page 319


 11699              	.LBE590:
 262:src/display.c **** 
 11700              		.loc 1 262 1 view .LVU3787
 11701 0064 38BD     		pop	{r3, r4, r5, pc}
 11702              	.LVL1372:
 11703              	.L1135:
 11704              	.LBB591:
 222:src/display.c **** 		if (*q == '\0')
 11705              		.loc 1 222 15 view .LVU3788
 11706 0066 411C     		adds	r1, r0, #1
 11707 0068 DAE7     		b	.L1127
 11708              	.L1137:
 11709 006a 00BF     		.align	2
 11710              	.L1136:
 11711 006c 00000000 		.word	Running
 11712 0070 00000000 		.word	.LANCHOR26
 11713 0074 00000000 		.word	.LANCHOR25
 11714 0078 00000000 		.word	StateWhileOn
 11715 007c 00000000 		.word	.LANCHOR27
 11716 0080 00000000 		.word	LastDisplayedNumber
 11717 0084 00000000 		.word	DispMsg
 11718              	.LBE591:
 11719              		.cfi_endproc
 11720              	.LFE1:
 11722              		.section	.rodata.str1.4,"aMS",%progbits,1
 11723              		.align	2
 11724              	.LC43:
 11725 0000 06316306 		.ascii	"\0061c\006\006\000"
 11725      0600
 11726 0006 0000     		.align	2
 11727              	.LC44:
 11728 0008 756E0600 		.ascii	"un\006\000"
 11729              		.align	2
 11730              	.LC45:
 11731 000c 736D00   		.ascii	"sm\000"
 11732              		.set	CSWTCH.306,CSWTCH.304
 11733 000f 00       		.align	2
 11734              	.LC46:
 11735 0010 20502072 		.ascii	" P r o g r a m \000"
 11735      206F2067 
 11735      20722061 
 11735      206D2000 
 11736              		.align	2
 11737              	.LC47:
 11738 0020 206F2072 		.ascii	" o r   d a t e \000"
 11738      20202064 
 11738      20612074 
 11738      20652000 
 11739              		.align	2
 11740              	.LC48:
 11741 0030 204F2070 		.ascii	" O p - c o d e \000"
 11741      202D2063 
 11741      206F2064 
 11741      20652000 
 11742              		.align	2
 11743              	.LC49:
 11744 0040 204C2061 		.ascii	" L a b e l \000"
ARM GAS  /tmp/ccAnlOT7.s 			page 320


 11744      20622065 
 11744      206C2000 
 11745              		.align	2
 11746              	.LC50:
 11747 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11747      20652072 
 11747      20612074 
 11747      2069206F 
 11747      206E2000 
 11748              		.align	2
 11749              	.LC51:
 11750 0060 20462075 		.ascii	" F u l l \000"
 11750      206C206C 
 11750      2000
 11751 006a 0000     		.align	2
 11752              	.LC52:
 11753 006c 2043206C 		.ascii	" C l a s h \000"
 11753      20612073 
 11753      20682000 
 11754              		.align	2
 11755              	.LC53:
 11756 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11756      206F2020 
 11756      2073206D 
 11756      2061206C 
 11756      206C2000 
 11757              		.align	2
 11758              	.LC54:
 11759 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11759      20742061 
 11759      20202070 
 11759      206F2069 
 11759      206E2074 
 11760              		.align	2
 11761              	.LC55:
 11762 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11762      20722061 
 11762      206D2065 
 11762      20742065 
 11762      20722000 
 11763              		.align	2
 11764              	.LC56:
 11765 00b8 20442061 		.ascii	" D a t a \000"
 11765      20742061 
 11765      2000
 11766 00c2 0000     		.align	2
 11767              	.LC57:
 11768 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11768      206F2074 
 11768      20652063 
 11768      20742065 
 11768      20642000 
 11769              		.align	2
 11770              	.LC58:
 11771 00d8 2046206F 		.ascii	" F o u n d \000"
 11771      2075206E 
 11771      20642000 
ARM GAS  /tmp/ccAnlOT7.s 			page 321


 11772              		.align	2
 11773              	.LC59:
 11774 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11774      2073206D 
 11774      20612074 
 11774      20632068 
 11774      2000
 11775 00f6 0000     		.align	2
 11776              	.LC60:
 11777 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11777      20732074 
 11777      2061206C 
 11777      206C2065 
 11777      20642000 
 11778              		.global	DIGITS
 11779              		.comm	IoAnnunciator,4,4
 11780              		.comm	IntMaxWindow,4,4
 11781              		.comm	JustDisplayed,4,4
 11782              		.comm	ShowRPN,4,4
 11783              		.comm	forceDispPlot,1,1
 11784              		.comm	LastDisplayedExponent,5,4
 11785              		.comm	LastDisplayedNumber,26,4
 11786              		.comm	LastDisplayedText,31,4
 11787              		.comm	DispPlot,2,2
 11788              		.comm	DispMsg,4,4
 11789              		.global	SvnRevision
 11790              		.section	.rodata
 11791              		.align	2
 11792              		.set	.LANCHOR17,. + 0
 11793              	.LC18:
 11794 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11794      22002E00 
 11794      00
 11795 0009 000000   		.space	3
 11796              	.LC22:
 11797 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11797      332E3306 
 11797      0600
 11798 0016 00000000 		.space	4
 11799 001a 0000     		.space	2
 11800              	.LC61:
 11801 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11801      696E6700 
 11801      50726F47 
 11801      72614D6D 
 11801      00
 11802 002d 000000   		.space	3
 11803              	.LC62:
 11804 0030 446F6D61 		.ascii	"Domain\000\000"
 11804      696E0000 
 11805              	.LC63:
 11806 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11806      74696D65 
 11806      006F7220 
 11806      64417445 
 11806      00
 11807 0049 000000   		.space	3
ARM GAS  /tmp/ccAnlOT7.s 			page 322


 11808              	.LC64:
 11809 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11809      66696E65 
 11809      64004F70 
 11809      2D434F64 
 11809      4500
 11810 005e 0000     		.space	2
 11811              	.LC65:
 11812 0060 2B9F0000 		.ascii	"+\237\000\000"
 11813              	.LC66:
 11814 0064 2D9F0000 		.ascii	"-\237\000\000"
 11815              	.LC67:
 11816 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11816      75636800 
 11816      4C416245 
 11816      4C00
 11817 0076 0000     		.space	2
 11818              	.LC68:
 11819 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11819      67616C00 
 11819      4F504572 
 11819      4174696F 
 11819      6E00
 11820 008a 0000     		.space	2
 11821              	.LC69:
 11822 008c 4F757420 		.ascii	"Out of range\000\000"
 11822      6F662072 
 11822      616E6765 
 11822      0000
 11823 009a 0000     		.space	2
 11824              	.LC70:
 11825 009c 42616420 		.ascii	"Bad digit\000\000"
 11825      64696769 
 11825      740000
 11826 00a7 00       		.space	1
 11827              	.LC71:
 11828 00a8 546F6F20 		.ascii	"Too long\000\000"
 11828      6C6F6E67 
 11828      0000
 11829 00b2 0000     		.space	2
 11830              	.LC72:
 11831 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11831      69730046 
 11831      754C4C00 
 11832              	.LC73:
 11833 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11833      6B00434C 
 11833      41534800 
 11834              	.LC74:
 11835 00cc 42616420 		.ascii	"Bad mode\000\000"
 11835      6D6F6465 
 11835      0000
 11836 00d6 0000     		.space	2
 11837              	.LC75:
 11838 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11838      06060673 
 11838      697A6500 
ARM GAS  /tmp/ccAnlOT7.s 			page 323


 11838      746F6F20 
 11838      534D6D41 
 11839 00ef 00       		.space	1
 11840              	.LC76:
 11841 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11841      66657700 
 11841      64417441 
 11841      20506F69 
 11841      6E745300 
 11842              	.LC77:
 11843 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 11843      6C696400 
 11843      50617261 
 11843      4D6D4574 
 11843      457200
 11844 0117 00       		.space	1
 11845              	.LC78:
 11846 0118 492F4F00 		.ascii	"I/O\000\000"
 11846      00
 11847 011d 000000   		.space	3
 11848              	.LC79:
 11849 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11849      6C696400 
 11849      64417441 
 11849      00
 11850 012d 000000   		.space	3
 11851              	.LC80:
 11852 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11852      65005072 
 11852      6F744563 
 11852      74456400 
 11853              	.LC81:
 11854 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11854      6F6F7400 
 11854      466F756E 
 11854      6400
 11855 014e 0000     		.space	2
 11856              	.LC82:
 11857 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11857      6978004D 
 11857      6D49534D 
 11857      6D417443 
 11857      4800
 11858 0162 0000     		.space	2
 11859              	.LC83:
 11860 0164 53696E67 		.ascii	"Singular\000\000"
 11860      756C6172 
 11860      0000
 11861 016e 0000     		.space	2
 11862              	.LC84:
 11863 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11863      68206973 
 11863      0046754C 
 11863      4C00
 11864 017e 0000     		.space	2
 11865              	.LC85:
 11866 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
ARM GAS  /tmp/ccAnlOT7.s 			page 324


 11866      72797374 
 11866      616C0049 
 11866      6E537461 
 11866      4C4C4564 
 11867 0195 000000   		.space	3
 11868              	.LC86:
 11869 0198 04201D00 		.ascii	"\004 \035\000X\000"
 11869      5800
 11870              		.section	.bss.DecimalMode,"aw",%nobits
 11871              		.set	.LANCHOR1,. + 0
 11874              	DecimalMode:
 11875 0000 00       		.space	1
 11876              		.section	.bss.SeparatorMode,"aw",%nobits
 11877              		.set	.LANCHOR0,. + 0
 11880              	SeparatorMode:
 11881 0000 00       		.space	1
 11882              		.section	.rodata.CSWTCH.304,"a"
 11883              		.align	2
 11884              		.set	.LANCHOR11,. + 0
 11887              	CSWTCH.304:
 11888 0000 02000000 		.word	2
 11889 0004 08000000 		.word	8
 11890 0008 0A000000 		.word	10
 11891 000c 10000000 		.word	16
 11892              		.section	.rodata.CSWTCH.326,"a"
 11893              		.align	2
 11894              		.set	.LANCHOR16,. + 0
 11897              	CSWTCH.326:
 11898 0000 00000000 		.word	.LC43
 11899 0004 08000000 		.word	.LC44
 11900 0008 0C000000 		.word	.LC45
 11901              		.section	.rodata.DIGITS,"a"
 11902              		.align	2
 11903              		.set	.LANCHOR12,. + 0
 11906              	DIGITS:
 11907 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 11907      34353637 
 11907      38394142 
 11907      43444546 
 11907      00
 11908              		.section	.rodata.S7_ERROR,"a"
 11909              		.align	2
 11910              		.set	.LANCHOR25,. + 0
 11913              	S7_ERROR:
 11914 0000 4572726F 		.ascii	"Error\000"
 11914      7200
 11915              		.section	.rodata.S7_INF,"a"
 11916              		.align	2
 11917              		.set	.LANCHOR5,. + 0
 11920              	S7_INF:
 11921 0000 496E6669 		.ascii	"Infinity\000"
 11921      6E697479 
 11921      00
 11922              		.section	.rodata.S7_INF_Text,"a"
 11923              		.align	2
 11924              		.set	.LANCHOR7,. + 0
 11927              	S7_INF_Text:
ARM GAS  /tmp/ccAnlOT7.s 			page 325


 11928 0000 2049206E 		.ascii	" I n f i n i t y \000"
 11928      20662069 
 11928      206E2069 
 11928      20742079 
 11928      2000
 11929              		.section	.rodata.S7_NEG_INF_Text,"a"
 11930              		.align	2
 11931              		.set	.LANCHOR6,. + 0
 11934              	S7_NEG_INF_Text:
 11935 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 11935      20662069 
 11935      206E2069 
 11935      20742079 
 11935      2000
 11936              		.section	.rodata.S7_NaN,"a"
 11937              		.align	2
 11938              		.set	.LANCHOR3,. + 0
 11941              	S7_NaN:
 11942 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 11942      6E754D6D 
 11942      45726963 
 11942      00
 11943              		.section	.rodata.S7_NaN_Text,"a"
 11944              		.align	2
 11945              		.set	.LANCHOR4,. + 0
 11948              	S7_NaN_Text:
 11949 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 11949      20742020 
 11949      206E2075 
 11949      206D2065 
 11949      20722069 
 11950              		.section	.rodata.S7_STEP,"a"
 11951              		.align	2
 11952              		.set	.LANCHOR24,. + 0
 11955              	S7_STEP:
 11956 0000 53744550 		.ascii	"StEP \000"
 11956      2000
 11957              		.section	.rodata.S7_STEP_ShortText,"a"
 11958              		.align	2
 11959              		.set	.LANCHOR18,. + 0
 11962              	S7_STEP_ShortText:
 11963 0000 53544550 		.ascii	"STEP\000"
 11963      00
 11964              		.section	.rodata.S7_fract_EQ,"a"
 11965              		.align	2
 11966              		.set	.LANCHOR9,. + 0
 11969              	S7_fract_EQ:
 11970 0000 203D2000 		.ascii	" = \000"
 11971              		.section	.rodata.S7_fract_GT,"a"
 11972              		.align	2
 11973              		.set	.LANCHOR10,. + 0
 11976              	S7_fract_GT:
 11977 0000 20477400 		.ascii	" Gt\000"
 11978              		.section	.rodata.S7_fract_LT,"a"
 11979              		.align	2
 11980              		.set	.LANCHOR8,. + 0
 11983              	S7_fract_LT:
ARM GAS  /tmp/ccAnlOT7.s 			page 326


 11984 0000 204C7400 		.ascii	" Lt\000"
 11985              		.section	.rodata.S_SURE,"a"
 11986              		.align	2
 11987              		.set	.LANCHOR20,. + 0
 11990              	S_SURE:
 11991 0000 53757265 		.ascii	"Sure?\000"
 11991      3F00
 11992              		.section	.rodata.SvnRevision,"a"
 11993              		.align	2
 11994              		.set	.LANCHOR19,. + 0
 11997              	SvnRevision:
 11998 0000 30202020 		.ascii	"0   "
 11999              		.section	.rodata.digtbl,"a"
 12000              		.align	2
 12001              		.set	.LANCHOR2,. + 0
 12004              	digtbl:
 12005 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12005      02421252 
 12005      2D000000 
 12005      00000000 
 12005      00
 12006 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12006      00000017 
 12006      01000000 
 12006      00
 12007 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12007      28000000 
 12007      0020664B 
 12007      00000010 
 12008 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12008      5E5B3973 
 12008      77497F7B 
 12008      00000612 
 12008      0300787D 
 12009 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12009      673D240F 
 12009      75266C6D 
 12009      6F7C7914 
 12009      73362F00 
 12010 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12010      161F7674 
 12010      6735040F 
 12010      75266915 
 12010      177C7914 
 12011 0076 000F003B 		.ascii	"\000\017\000;"
 12012              		.section	.rodata.error_table.8478,"a"
 12013              		.align	2
 12014              		.set	.LANCHOR26,. + 0
 12017              	error_table.8478:
 12018 0000 1C000000 		.word	.LC61
 12019 0004 30000000 		.word	.LC62
 12020 0008 38000000 		.word	.LC63
 12021 000c 4C000000 		.word	.LC64
 12022 0010 60000000 		.word	.LC65
 12023 0014 64000000 		.word	.LC66
 12024 0018 68000000 		.word	.LC67
 12025 001c 78000000 		.word	.LC68
ARM GAS  /tmp/ccAnlOT7.s 			page 327


 12026 0020 8C000000 		.word	.LC69
 12027 0024 9C000000 		.word	.LC70
 12028 0028 A8000000 		.word	.LC71
 12029 002c B4000000 		.word	.LC72
 12030 0030 C0000000 		.word	.LC73
 12031 0034 CC000000 		.word	.LC74
 12032 0038 D8000000 		.word	.LC75
 12033 003c F0000000 		.word	.LC76
 12034 0040 04010000 		.word	.LC77
 12035 0044 18010000 		.word	.LC78
 12036 0048 20010000 		.word	.LC79
 12037 004c 30010000 		.word	.LC80
 12038 0050 40010000 		.word	.LC81
 12039 0054 50010000 		.word	.LC82
 12040 0058 64010000 		.word	.LC83
 12041 005c 70010000 		.word	.LC84
 12042 0060 80010000 		.word	.LC85
 12043 0064 98010000 		.word	.LC86
 12044              		.section	.rodata.error_table_text.8479,"a"
 12045              		.align	2
 12046              		.set	.LANCHOR27,. + 0
 12049              	error_table_text.8479:
 12050 0000 10000000 		.word	.LC46
 12051 0004 A8000000 		.word	.LC41
 12052 0008 20000000 		.word	.LC47
 12053 000c 30000000 		.word	.LC48
 12054 0010 A8000000 		.word	.LC41
 12055 0014 A8000000 		.word	.LC41
 12056 0018 40000000 		.word	.LC49
 12057 001c 4C000000 		.word	.LC50
 12058 0020 A8000000 		.word	.LC41
 12059 0024 A8000000 		.word	.LC41
 12060 0028 A8000000 		.word	.LC41
 12061 002c 60000000 		.word	.LC51
 12062 0030 6C000000 		.word	.LC52
 12063 0034 A8000000 		.word	.LC41
 12064 0038 78000000 		.word	.LC53
 12065 003c 8C000000 		.word	.LC54
 12066 0040 A4000000 		.word	.LC55
 12067 0044 A8000000 		.word	.LC41
 12068 0048 B8000000 		.word	.LC56
 12069 004c C4000000 		.word	.LC57
 12070 0050 D8000000 		.word	.LC58
 12071 0054 E4000000 		.word	.LC59
 12072 0058 A8000000 		.word	.LC41
 12073 005c 60000000 		.word	.LC51
 12074 0060 F8000000 		.word	.LC60
 12075 0064 A8000000 		.word	.LC41
 12076              		.section	.rodata.libname,"a"
 12077              		.align	2
 12078              		.set	.LANCHOR21,. + 0
 12081              	libname:
 12082 0000 72414D6D 		.ascii	"rAMm\000"
 12082      00
 12083 0005 4C696220 		.ascii	"Lib \000"
 12083      00
 12084 000a 42757020 		.ascii	"Bup \000"
ARM GAS  /tmp/ccAnlOT7.s 			page 328


 12084      00
 12085 000f 726F4D6D 		.ascii	"roMm\000"
 12085      00
 12086              		.section	.rodata.libname_shorttext,"a"
 12087              		.align	2
 12088              		.set	.LANCHOR23,. + 0
 12091              	libname_shorttext:
 12092 0000 52616D00 		.ascii	"Ram\000"
 12093 0004 00       		.space	1
 12094 0005 4C696200 		.ascii	"Lib\000"
 12095 0009 00       		.space	1
 12096 000a 42757000 		.ascii	"Bup\000"
 12097 000e 00       		.space	1
 12098 000f 526F6D00 		.ascii	"Rom\000"
 12099 0013 00       		.space	1
 12100              		.section	.rodata.libname_text,"a"
 12101              		.align	2
 12102              		.set	.LANCHOR22,. + 0
 12105              	libname_text:
 12106 0000 20522061 		.ascii	" R a m \000"
 12106      206D2000 
 12107 0008 0000     		.space	2
 12108 000a 204C2069 		.ascii	" L i b \000"
 12108      20622000 
 12109 0012 0000     		.space	2
 12110 0014 20422075 		.ascii	" B u p \000"
 12110      20702000 
 12111 001c 0000     		.space	2
 12112 001e 2052206F 		.ascii	" R o m \000"
 12112      206D2000 
 12113 0026 0000     		.space	2
 12114              		.section	.rodata.shift_chars.8575,"a"
 12115              		.align	2
 12116              		.set	.LANCHOR15,. + 0
 12119              	shift_chars.8575:
 12120 0000 20111213 		.ascii	" \021\022\023"
 12121              		.section	.rodata.small_dots.8762,"a"
 12122              		.align	2
 12123              		.set	.LANCHOR14,. + 0
 12126              	small_dots.8762:
 12127 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12127      07E12C06 
 12127      07E12C06 
 12127      06
 12128              		.section	.rodata.small_minus.8761,"a"
 12129              		.align	2
 12130              		.set	.LANCHOR13,. + 0
 12133              	small_minus.8761:
 12134 0000 07C22D06 		.ascii	"\007\302-\006"
 12135              		.text
 12136              	.Letext0:
 12137              		.file 2 "src/decNumber/decContext.h"
 12138              		.file 3 "src/decNumber/decNumber.h"
 12139              		.file 4 "src/decNumber/decimal64.h"
 12140              		.file 5 "src/decNumber/decimal128.h"
 12141              		.file 6 "src/xeq.h"
 12142              		.file 7 "src/data.h"
ARM GAS  /tmp/ccAnlOT7.s 			page 329


 12143              		.file 8 "src/storage.h"
 12144              		.file 9 "src/display.h"
 12145              		.file 10 "src/consts.h"
 12146              		.file 11 "src/stats.h"
 12147              		.file 12 "src/revision.h"
 12148              		.file 13 "src/charset7.h"
 12149              		.file 14 "src/lcd.h"
 12150              		.file 15 "src/decn.h"
 12151              		.file 16 "src/alpha.h"
 12152              		.file 17 "src/int.h"
ARM GAS  /tmp/ccAnlOT7.s 			page 330


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccAnlOT7.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccAnlOT7.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccAnlOT7.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccAnlOT7.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccAnlOT7.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccAnlOT7.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccAnlOT7.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccAnlOT7.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccAnlOT7.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccAnlOT7.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccAnlOT7.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccAnlOT7.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccAnlOT7.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccAnlOT7.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccAnlOT7.s:669    .text.set_status_sized:0000000000000000 $t
     /tmp/ccAnlOT7.s:676    .text.set_status_sized:0000000000000000 set_status_sized
     /tmp/ccAnlOT7.s:1128   .text.set_status_sized:0000000000000194 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccAnlOT7.s:1136   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:1140   .text.set_exp:0000000000000000 $t
     /tmp/ccAnlOT7.s:1147   .text.set_exp:0000000000000000 set_exp
     /tmp/ccAnlOT7.s:1368   .text.set_exp:00000000000000b0 $d
     /tmp/ccAnlOT7.s:1374   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccAnlOT7.s:1381   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccAnlOT7.s:1449   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccAnlOT7.s:1455   .text.set_decimal:0000000000000000 $t
     /tmp/ccAnlOT7.s:1462   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccAnlOT7.s:1558   .text.set_decimal:000000000000004c $d
     /tmp/ccAnlOT7.s:1566   .text.set_digits_string:0000000000000000 $t
     /tmp/ccAnlOT7.s:1573   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccAnlOT7.s:1667   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:1671   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccAnlOT7.s:1678   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccAnlOT7.s:1825   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccAnlOT7.s:1837   .text.set_x_hms:0000000000000000 $t
     /tmp/ccAnlOT7.s:1844   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccAnlOT7.s:2345   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccAnlOT7.s:2355   .text.set_x_fract:0000000000000000 $t
     /tmp/ccAnlOT7.s:2362   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccAnlOT7.s:2798   .text.set_x_fract:0000000000000198 $d
     /tmp/ccAnlOT7.s:2813   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:2814   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccAnlOT7.s:2817   .text.carry_overflow:0000000000000000 $t
     /tmp/ccAnlOT7.s:2824   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccAnlOT7.s:2961   .text.carry_overflow:0000000000000070 $d
     /tmp/ccAnlOT7.s:2971   .text.set_int_x:0000000000000000 $t
     /tmp/ccAnlOT7.s:2978   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccAnlOT7.s:3735   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.304:0000000000000000 CSWTCH.306
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccAnlOT7.s:3745   .text.set_int_x:0000000000000360 $t
     /tmp/ccAnlOT7.s:3795   .text.set_int_x:0000000000000390 $d
ARM GAS  /tmp/ccAnlOT7.s 			page 331


     /tmp/ccAnlOT7.s:3801   .text.set_annunciators:0000000000000000 $t
     /tmp/ccAnlOT7.s:3808   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccAnlOT7.s:4181   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccAnlOT7.s:4193   .text.getdig:0000000000000000 $t
     /tmp/ccAnlOT7.s:4201   .text.getdig:0000000000000000 getdig
     /tmp/ccAnlOT7.s:4221   .text.getdig:0000000000000008 $d
     /tmp/ccAnlOT7.s:4226   .text.dot:0000000000000000 $t
     /tmp/ccAnlOT7.s:4234   .text.dot:0000000000000000 dot
     /tmp/ccAnlOT7.s:4257   .text.std_round_fix:0000000000000000 $t
     /tmp/ccAnlOT7.s:4265   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccAnlOT7.s:4347   .text.std_round_fix:000000000000004c $d
     /tmp/ccAnlOT7.s:4353   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccAnlOT7.s:4361   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccAnlOT7.s:4421   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccAnlOT7.s:4428   .text.pixel_length:0000000000000000 $t
     /tmp/ccAnlOT7.s:4436   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccAnlOT7.s:4527   .text.set_status:0000000000000000 $t
     /tmp/ccAnlOT7.s:4534   .text.set_status:0000000000000000 set_status
     /tmp/ccAnlOT7.s:4602   .text.set_status:0000000000000034 $d
     /tmp/ccAnlOT7.s:4607   .text.set_x_dn:0000000000000000 $t
     /tmp/ccAnlOT7.s:4615   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccAnlOT7.s:5383   .text.set_x_dn:0000000000000328 $d
     /tmp/ccAnlOT7.s:5392   .text.set_x_dn:000000000000033c $t
     /tmp/ccAnlOT7.s:5511   .text.set_x_dn:00000000000003dc $d
     /tmp/ccAnlOT7.s:5517   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccAnlOT7.s:5544   .text.set_x_dn:000000000000041c $d
     /tmp/ccAnlOT7.s:5550   .text.set_x_dn:0000000000000426 $t
     /tmp/ccAnlOT7.s:6055   .text.set_x_dn:0000000000000644 $d
     /tmp/ccAnlOT7.s:6071   .text.set_x_dn:0000000000000660 $t
     /tmp/ccAnlOT7.s:6785   .text.set_x_dn:0000000000000950 $d
     /tmp/ccAnlOT7.s:6794   .text.set_x:0000000000000000 $t
     /tmp/ccAnlOT7.s:6801   .text.set_x:0000000000000000 set_x
     /tmp/ccAnlOT7.s:6869   .text.format_reg:0000000000000000 $t
     /tmp/ccAnlOT7.s:6877   .text.format_reg:0000000000000000 format_reg
     /tmp/ccAnlOT7.s:6996   .text.format_reg:0000000000000064 $d
     /tmp/ccAnlOT7.s:7002   .text.set_status_right:0000000000000000 $t
     /tmp/ccAnlOT7.s:7009   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccAnlOT7.s:7146   .text.set_status_right:0000000000000060 $d
     /tmp/ccAnlOT7.s:7151   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:7200   .text.annunciators:0000000000000000 $t
     /tmp/ccAnlOT7.s:7207   .text.annunciators:0000000000000000 annunciators
     /tmp/ccAnlOT7.s:7909   .text.annunciators:0000000000000308 $d
     /tmp/ccAnlOT7.s:7932   .text.annunciators:000000000000034c $t
     /tmp/ccAnlOT7.s:8126   .text.annunciators:0000000000000420 $d
     /tmp/ccAnlOT7.s:8141   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:8208   .text.display:0000000000000000 $t
     /tmp/ccAnlOT7.s:8216   .text.display:0000000000000000 display
     /tmp/ccAnlOT7.s:8890   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccAnlOT7.s:8908   .text.display:0000000000000334 $t
     /tmp/ccAnlOT7.s:9607   .text.display:000000000000063c $d
     /tmp/ccAnlOT7.s:9637   .text.display:0000000000000694 $t
     /tmp/ccAnlOT7.s:10484  .text.display:00000000000009c8 $d
     /tmp/ccAnlOT7.s:10501  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccAnlOT7.s 			page 332


     /tmp/ccAnlOT7.s:11235  .text.display:0000000000000d10 $d
     /tmp/ccAnlOT7.s:11256  .text.display:0000000000000d4c $t
     /tmp/ccAnlOT7.s:11361  .text.display:0000000000000db0 $d
     /tmp/ccAnlOT7.s:11372  .text.frozen_display:0000000000000000 $t
     /tmp/ccAnlOT7.s:11380  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccAnlOT7.s:11410  .text.frozen_display:000000000000001c $d
     /tmp/ccAnlOT7.s:11415  .text.message:0000000000000000 $t
     /tmp/ccAnlOT7.s:11423  .text.message:0000000000000000 message
     /tmp/ccAnlOT7.s:11552  .text.message:0000000000000060 $d
     /tmp/ccAnlOT7.s:11560  .text.error_message:0000000000000000 $t
     /tmp/ccAnlOT7.s:11568  .text.error_message:0000000000000000 error_message
     /tmp/ccAnlOT7.s:11711  .text.error_message:000000000000006c $d
     /tmp/ccAnlOT7.s:11723  .rodata.str1.4:0000000000000000 $d
     /tmp/ccAnlOT7.s:11887  .rodata.CSWTCH.304:0000000000000000 CSWTCH.304
     /tmp/ccAnlOT7.s:11906  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccAnlOT7.s:11997  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccAnlOT7.s:11791  .rodata:0000000000000000 $d
     /tmp/ccAnlOT7.s:11874  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccAnlOT7.s:11875  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccAnlOT7.s:11880  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccAnlOT7.s:11881  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccAnlOT7.s:11883  .rodata.CSWTCH.304:0000000000000000 $d
     /tmp/ccAnlOT7.s:11893  .rodata.CSWTCH.326:0000000000000000 $d
     /tmp/ccAnlOT7.s:11897  .rodata.CSWTCH.326:0000000000000000 CSWTCH.326
     /tmp/ccAnlOT7.s:11902  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccAnlOT7.s:11909  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccAnlOT7.s:11913  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccAnlOT7.s:11916  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccAnlOT7.s:11920  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccAnlOT7.s:11923  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccAnlOT7.s:11927  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccAnlOT7.s:11930  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccAnlOT7.s:11934  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccAnlOT7.s:11937  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccAnlOT7.s:11941  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccAnlOT7.s:11944  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccAnlOT7.s:11948  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccAnlOT7.s:11951  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccAnlOT7.s:11955  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccAnlOT7.s:11958  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccAnlOT7.s:11962  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccAnlOT7.s:11965  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccAnlOT7.s:11969  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccAnlOT7.s:11972  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccAnlOT7.s:11976  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccAnlOT7.s:11979  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccAnlOT7.s:11983  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccAnlOT7.s:11986  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccAnlOT7.s:11990  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccAnlOT7.s:11993  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccAnlOT7.s:12000  .rodata.digtbl:0000000000000000 $d
     /tmp/ccAnlOT7.s:12004  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccAnlOT7.s:12013  .rodata.error_table.8478:0000000000000000 $d
     /tmp/ccAnlOT7.s:12017  .rodata.error_table.8478:0000000000000000 error_table.8478
     /tmp/ccAnlOT7.s:12045  .rodata.error_table_text.8479:0000000000000000 $d
     /tmp/ccAnlOT7.s:12049  .rodata.error_table_text.8479:0000000000000000 error_table_text.8479
ARM GAS  /tmp/ccAnlOT7.s 			page 333


     /tmp/ccAnlOT7.s:12077  .rodata.libname:0000000000000000 $d
     /tmp/ccAnlOT7.s:12081  .rodata.libname:0000000000000000 libname
     /tmp/ccAnlOT7.s:12087  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccAnlOT7.s:12091  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccAnlOT7.s:12101  .rodata.libname_text:0000000000000000 $d
     /tmp/ccAnlOT7.s:12105  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccAnlOT7.s:12115  .rodata.shift_chars.8575:0000000000000000 $d
     /tmp/ccAnlOT7.s:12119  .rodata.shift_chars.8575:0000000000000000 shift_chars.8575
     /tmp/ccAnlOT7.s:12122  .rodata.small_dots.8762:0000000000000000 $d
     /tmp/ccAnlOT7.s:12126  .rodata.small_dots.8762:0000000000000000 small_dots.8762
     /tmp/ccAnlOT7.s:12129  .rodata.small_minus.8761:0000000000000000 $d
     /tmp/ccAnlOT7.s:12133  .rodata.small_minus.8761:0000000000000000 small_minus.8761

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccAnlOT7.s 			page 334


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccAnlOT7.s 			page 335


SizeStatRegs

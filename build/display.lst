ARM GAS  /tmp/ccPzxiH4.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #ifdef DM42
  18:src/display.c **** #include "dmcp.h"
  19:src/display.c **** #endif
  20:src/display.c **** 
  21:src/display.c **** #define DM42SAFE
  22:src/display.c **** 
  23:src/display.c **** #include "features.h"
  24:src/display.c **** #include "xeq.h" 
  25:src/display.c **** #include "storage.h"
  26:src/display.c **** #include "display.h"
  27:src/display.c **** #include "lcd.h"
  28:src/display.c **** #include "int.h"
  29:src/display.c **** #include "consts.h"
  30:src/display.c **** #include "alpha.h"
ARM GAS  /tmp/ccPzxiH4.s 			page 2


  31:src/display.c **** #include "stats.h"
  32:src/display.c **** #include "decn.h"
  33:src/display.c **** #include "revision.h"
  34:src/display.c **** #ifdef INFRARED
  35:src/display.c **** #include "printer.h"
  36:src/display.c **** #endif
  37:src/display.c **** #ifndef DM42
  38:src/display.c **** #include "serial.h"
  39:src/display.c **** #endif
  40:src/display.c **** #undef DM42SAFE
  41:src/display.c **** 
  42:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  43:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  44:src/display.c **** 
  45:src/display.c **** static void set_status_sized(const char *, int);
  46:src/display.c **** static void set_status_sized_top(const char *, int);
  47:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  48:src/display.c **** 
  49:src/display.c **** static void set_status(const char *);
  50:src/display.c **** static void set_status_top(const char *);
  51:src/display.c **** #ifdef TOP_ROW
  52:src/display.c **** static void set_status_top_always(const char *);
  53:src/display.c **** #endif
  54:src/display.c **** 
  55:src/display.c **** static void set_status_right(const char *);
  56:src/display.c **** static void set_status_graphic(const unsigned char *);
  57:src/display.c **** 
  58:src/display.c **** static void set_int_x(const long long int value, char *res);
  59:src/display.c **** 
  60:src/display.c **** const char *DispMsg; // What to display in message area
  61:src/display.c **** 
  62:src/display.c **** short int DispPlot;
  63:src/display.c **** short int no_status_top = 0;
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** //FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  79:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  80:src/display.c **** 
  81:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  82:src/display.c **** static const char S7_fract_LT[] = " Lt";
  83:src/display.c **** static const char S7_fract_GT[] = " Gt";
  84:src/display.c **** 
  85:src/display.c **** static const char libname[][5] = {
  86:src/display.c ****   "rAMm", "Lib ", "Bup ",
  87:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccPzxiH4.s 			page 3


  88:src/display.c ****   "roMm"
  89:src/display.c **** #endif
  90:src/display.c **** };
  91:src/display.c **** 
  92:src/display.c **** 
  93:src/display.c **** 
  94:src/display.c **** /* Set the separator and decimal mode globals
  95:src/display.c ****  */
  96:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 96 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  97:src/display.c ****   // Separators used by various modes
  98:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 98 3 view .LVU1
  35              		.loc 1 98 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
  99:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 99 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 98 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 98 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
  96:src/display.c ****   // Separators used by various modes
  44              		.loc 1 96 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 98 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 99 5 is_stmt 1 view .LVU8
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 100 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 101:src/display.c ****   }
 102:src/display.c ****   else {
 103:src/display.c ****     SeparatorMode = SEP_COMMA;
 104:src/display.c ****     DecimalMode = DECIMAL_DOT;
 105:src/display.c ****   }
 106:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 106 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 100 17 view .LVU11
  57 0018 0124     		movs	r4, #1
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 99 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccPzxiH4.s 			page 4


  60              		.loc 1 100 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 106 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 99 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 100 5 is_stmt 1 view .LVU16
  67              		.loc 1 106 3 view .LVU17
  68              		.loc 1 106 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 106 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 107:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 107 5 is_stmt 1 view .LVU20
  76              		.loc 1 107 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 108:src/display.c **** }
  80              		.loc 1 108 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 103 5 is_stmt 1 view .LVU23
 104:src/display.c ****   }
  90              		.loc 1 104 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 106 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 104:src/display.c ****   }
  94              		.loc 1 104 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 103 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 106 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 103 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 104:src/display.c ****   }
 102              		.loc 1 104 5 is_stmt 1 view .LVU30
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 106 3 view .LVU31
ARM GAS  /tmp/ccPzxiH4.s 			page 5


 106:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 106 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 106 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 108 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Table of error messages.
 112:src/display.c ****  * These consist of a double string.  The first is displayed in the
 113:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 114:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 115:src/display.c ****  */
 116:src/display.c **** void error_message(const unsigned int e) 
 117:src/display.c **** {
 118:src/display.c **** #define MSG1(top) top "\0"
 119:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 120:src/display.c **** 
 121:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 122:src/display.c ****   static const char *const error_table[] = 
 123:src/display.c ****     {
 124:src/display.c ****       // manually get the order correct!
 125:src/display.c ****       MSG2("Running", "ProGraMm"),
 126:src/display.c ****       MSG1("Domain"),
 127:src/display.c ****       MSG2("Bad time", "or dAtE"),
 128:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 129:src/display.c ****       MSG1("+\237"),
 130:src/display.c ****       MSG1("-\237"),
 131:src/display.c ****       MSG2("No such", "LAbEL"),
 132:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 133:src/display.c ****       MSG1("Out of range"),
ARM GAS  /tmp/ccPzxiH4.s 			page 6


 134:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 135:src/display.c ****       MSG2("Bad digit", "1"),
 136:src/display.c ****       MSG2("Too long", "1"),
 137:src/display.c **** #else
 138:src/display.c ****       MSG1("Bad digit"),
 139:src/display.c ****       MSG1("Too long"),
 140:src/display.c **** #endif
 141:src/display.c ****       MSG2("RAM is", "FuLL"),
 142:src/display.c ****       MSG2("Stack", "CLASH"),
 143:src/display.c ****       MSG1("Bad mode"),
 144:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 145:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 146:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 147:src/display.c ****       MSG1("I/O"),
 148:src/display.c ****       MSG2("Invalid", "dAtA"),
 149:src/display.c ****       MSG2("Write", "ProtEctEd"),
 150:src/display.c ****       MSG2("No root", "Found"),
 151:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 152:src/display.c ****       MSG1("Singular"),
 153:src/display.c ****       MSG2("Flash is", "FuLL"),
 154:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 155:src/display.c **** #ifndef SHIFT_EXPONENT
 156:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 157:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 158:src/display.c ****       MSG2("Too\007\304 small", "1"),
 159:src/display.c **** #     else
 160:src/display.c ****       MSG2("Too small", "1"),
 161:src/display.c **** #     endif
 162:src/display.c ****       MSG2("Too big", "1"),
 163:src/display.c **** #  else
 164:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 165:src/display.c ****       MSG1("Too\007\304 small"),
 166:src/display.c **** #     else
 167:src/display.c ****       MSG1("Too small"),
 168:src/display.c **** #     endif
 169:src/display.c ****       MSG1("Too big"),
 170:src/display.c **** #  endif
 171:src/display.c **** #endif
 172:src/display.c **** #ifdef INCLUDE_C_LOCK
 173:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 174:src/display.c **** #endif
 175:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 176:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 177:src/display.c ****       MSG2("Interrupted", "X"),
 178:src/display.c **** #endif
 179:src/display.c ****     };
 180:src/display.c **** #undef MSG1
 181:src/display.c **** #undef MSG2
 182:src/display.c **** 
 183:src/display.c ****   if (e != ERR_NONE || Running) {
 184:src/display.c ****     const char *p = error_table[e];
 185:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 186:src/display.c ****     if (*q == '\0')
 187:src/display.c ****       q = S7_ERROR;
 188:src/display.c ****     if (*q == 'X') {
 189:src/display.c ****       DispMsg = p;
 190:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccPzxiH4.s 			page 7


 191:src/display.c ****     }
 192:src/display.c ****     else {
 193:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 194:src/display.c ****       if (*q == '1')
 195:src/display.c **** 	q = CNULL;
 196:src/display.c **** #endif
 197:src/display.c ****       message(p, q);
 198:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 199:src/display.c ****     }
 200:src/display.c **** #ifdef INFRARED
 201:src/display.c ****     if (Tracing) {
 202:src/display.c ****       if (*q == 'X')
 203:src/display.c **** 	print_reg(regX_idx, p, 0);
 204:src/display.c ****       else {
 205:src/display.c **** 	print_tab(0);
 206:src/display.c **** 	print_line(p, 0);
 207:src/display.c **** 	print(' ');
 208:src/display.c **** 	while (*q != '\0') {
 209:src/display.c **** 	  int c = *q;
 210:src/display.c **** 	  if (c >= 'A')
 211:src/display.c **** 	    c |= 0x60; // ASCII lower case
 212:src/display.c **** 	  print(c);
 213:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 214:src/display.c **** 	    ++q;
 215:src/display.c **** 	  ++q;
 216:src/display.c **** 	}
 217:src/display.c **** 	print_advance( 0 );
 218:src/display.c ****       }
 219:src/display.c ****     }
 220:src/display.c **** #endif
 221:src/display.c ****   }
 222:src/display.c **** }
 223:src/display.c **** 
 224:src/display.c **** 
 225:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 226:src/display.c ****  * display.
 227:src/display.c ****  */
 228:src/display.c **** #define D_TOP 64
 229:src/display.c **** #define D_TL 32
 230:src/display.c **** #define D_TR 8
 231:src/display.c **** #define D_MIDDLE 16
 232:src/display.c **** #define D_BL 4
 233:src/display.c **** #define D_BR 1
 234:src/display.c **** #define D_BOTTOM 2
 235:src/display.c **** 
 236:src/display.c **** #include "charset7.h"
 237:src/display.c **** 
 238:src/display.c **** #ifndef REALBUILD
 239:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 240:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 241:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 242:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 243:src/display.c **** 
 244:src/display.c **** static void set_mant_sign_dot()
 245:src/display.c **** {
 246:src/display.c ****   set_dot(MANT_SIGN);
 247:src/display.c **** }
ARM GAS  /tmp/ccPzxiH4.s 			page 8


 248:src/display.c **** 
 249:src/display.c **** static void clr_mant_sign_dot()
 250:src/display.c **** {
 251:src/display.c ****   clr_dot(MANT_SIGN);
 252:src/display.c **** }
 253:src/display.c **** 
 254:src/display.c **** static void set_exp_sign_dot()
 255:src/display.c **** {
 256:src/display.c ****   set_dot(EXP_SIGN);
 257:src/display.c **** }
 258:src/display.c **** 
 259:src/display.c **** static void clr_exp_sign_dot()
 260:src/display.c **** {
 261:src/display.c ****   clr_dot(EXP_SIGN);
 262:src/display.c **** }
 263:src/display.c **** 
 264:src/display.c **** #else
 265:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 266:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 267:src/display.c **** 
 268:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 269:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 270:src/display.c **** 
 271:src/display.c **** #endif
 272:src/display.c **** 
 273:src/display.c **** #ifndef REALBUILD
 274:src/display.c **** int getdig(int ch)
 275:src/display.c **** #else
 276:src/display.c ****   static int getdig(int ch)
 277:src/display.c **** #endif
 278:src/display.c **** {
 279:src/display.c ****   // perform index lookup
 280:src/display.c ****   return digtbl[ch&0xff];
 281:src/display.c **** }
 282:src/display.c **** 
 283:src/display.c **** void dot(int n, int on) {
 284:src/display.c ****   if (on)	set_dot(n);
 285:src/display.c ****   else	clr_dot(n);
 286:src/display.c **** }
 287:src/display.c **** 
 288:src/display.c **** 
 289:src/display.c **** /* Set the decimal point *after* the indicated digit
 290:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 291:src/display.c ****  * of decimal.
 292:src/display.c ****  */
 293:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 294:src/display.c ****   if (res) {
 295:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 296:src/display.c ****   } else {
 297:src/display.c ****     set_dot(posn+7);
 298:src/display.c ****     if (decimal != DECIMAL_DOT)
 299:src/display.c ****       set_dot(posn+8);
 300:src/display.c ****   }
 301:src/display.c ****   return res;
 302:src/display.c **** }
 303:src/display.c **** 
 304:src/display.c **** /* Set the digit group separator *before* the specified digit.
ARM GAS  /tmp/ccPzxiH4.s 			page 9


 305:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 306:src/display.c ****  * sep argument.
 307:src/display.c ****  */
 308:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 309:src/display.c ****   if (sep == SEP_NONE)
 310:src/display.c ****     return res;
 311:src/display.c ****   if (res) {
 312:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 313:src/display.c ****     else *res++ = '.';
 314:src/display.c ****   } else {
 315:src/display.c ****     posn -= SEGS_PER_DIGIT;
 316:src/display.c ****     set_dot(posn+7);
 317:src/display.c ****     if (sep == SEP_COMMA)
 318:src/display.c ****       set_dot(posn+8);
 319:src/display.c ****   }
 320:src/display.c ****   return res;
 321:src/display.c **** }
 322:src/display.c **** 
 323:src/display.c **** /* Set a digit in positions [base, base+6] */
 324:src/display.c **** static void set_dig(int base, int ch)
 325:src/display.c **** {
 136              		.loc 1 325 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 326:src/display.c ****   int i;
 140              		.loc 1 326 3 view .LVU36
 327:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 327 3 view .LVU37
 142              	.LBB158:
 143              	.LBI158:
 274:src/display.c **** #else
 144              		.loc 1 274 5 view .LVU38
 145              	.LBB159:
 280:src/display.c **** }
 146              		.loc 1 280 3 view .LVU39
 280:src/display.c **** }
 147              		.loc 1 280 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 280:src/display.c **** }
 149              		.loc 1 280 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 280:src/display.c **** }
 152              		.loc 1 280 19 view .LVU42
 153              	.LBE159:
 154              	.LBE158:
 325:src/display.c ****   int i;
 155              		.loc 1 325 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB161:
 163              	.LBB160:
ARM GAS  /tmp/ccPzxiH4.s 			page 10


 280:src/display.c **** }
 164              		.loc 1 280 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 280:src/display.c **** }
 167              		.loc 1 280 16 view .LVU45
 168              	.LBE160:
 169              	.LBE161:
 328:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 328 3 is_stmt 1 view .LVU46
 171              		.loc 1 328 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 328 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 329:src/display.c ****     {
 330:src/display.c ****       //		dot(base, c & (1 << i));
 331:src/display.c ****       if (c & (1 << i))
 332:src/display.c **** 	set_dot(base);
 178              		.loc 1 332 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 333:src/display.c ****       else
 334:src/display.c **** 	clr_dot(base);
 335:src/display.c ****       base++;
 181              		.loc 1 335 7 is_stmt 1 view .LVU50
 328:src/display.c ****     {
 182              		.loc 1 328 19 view .LVU51
 328:src/display.c ****     {
 183              		.loc 1 328 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 328:src/display.c ****     {
 186              		.loc 1 328 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
 189              	.L19:
 332:src/display.c ****       else
 190              		.loc 1 332 2 is_stmt 1 view .LVU54
 334:src/display.c ****       base++;
 191              		.loc 1 334 2 view .LVU55
 331:src/display.c **** 	set_dot(base);
 192              		.loc 1 331 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 331:src/display.c **** 	set_dot(base);
 194              		.loc 1 331 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 331:src/display.c **** 	set_dot(base);
 198              		.loc 1 331 7 is_stmt 1 view .LVU58
 331:src/display.c **** 	set_dot(base);
 199              		.loc 1 331 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 334:src/display.c ****       base++;
ARM GAS  /tmp/ccPzxiH4.s 			page 11


 201              		.loc 1 334 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 335 7 is_stmt 1 view .LVU61
 328:src/display.c ****     {
 205              		.loc 1 328 19 view .LVU62
 328:src/display.c ****     {
 206              		.loc 1 328 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
 328:src/display.c ****     {
 209              		.loc 1 328 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 336:src/display.c ****     }
 337:src/display.c **** }
 213              		.loc 1 337 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 337 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE10:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB21:
 338:src/display.c **** 
 339:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 340:src/display.c ****   if (res) *res++ = ch;
 341:src/display.c ****   else	set_dig(base, ch);
 342:src/display.c ****   return res;
 343:src/display.c **** }
 344:src/display.c **** 
 345:src/display.c **** 
 346:src/display.c **** static void set_digits_string(const char *msg, int j) {
 347:src/display.c ****   for (; *msg != '\0'; msg++) {
 348:src/display.c ****     if (*msg == '.' || *msg == ',')
 349:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 350:src/display.c ****     else {
 351:src/display.c ****       set_dig_s(j, *msg, CNULL);
 352:src/display.c ****       j += SEGS_PER_DIGIT;
 353:src/display.c ****     }
 354:src/display.c ****   }
 355:src/display.c **** }
 356:src/display.c **** 
 357:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
ARM GAS  /tmp/ccPzxiH4.s 			page 12


 358:src/display.c ****   int i;
 359:src/display.c ****   const int n = res == NULL ? 3 : 4;
 360:src/display.c **** 
 361:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 362:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 363:src/display.c **** }
 364:src/display.c **** 
 365:src/display.c **** /* Force the exponent display
 366:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 367:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 368:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 369:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 370:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 371:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 372:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 373:src/display.c ****  */
 374:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 375:src/display.c ****   union {
 376:src/display.c ****     char buf[4];
 377:src/display.c ****     int i;
 378:src/display.c ****   } u;
 379:src/display.c ****   int negative;
 380:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 381:src/display.c ****   int thousands;
 382:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 383:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 384:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 385:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 386:src/display.c **** #  else
 387:src/display.c ****   const int show_large_exponent = 1;
 388:src/display.c **** #  endif
 389:src/display.c **** #else
 390:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 391:src/display.c ****   int thousands;
 392:src/display.c **** #  endif
 393:src/display.c ****   const int show_large_exponent = 0;
 394:src/display.c **** #endif
 395:src/display.c **** 
 396:src/display.c ****   negative = flags & 2;
 397:src/display.c ****   if (exp < 0) {
 398:src/display.c ****     negative = 1;
 399:src/display.c ****     exp = -exp;
 400:src/display.c ****   }
 401:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 402:src/display.c ****   thousands = exp / 1000;
 403:src/display.c **** #endif
 404:src/display.c ****   if (res) {
 405:src/display.c **** #ifdef INCLUDE_YREG_CODE
 406:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 407:src/display.c ****     if (thousands != 0) {
 408:src/display.c **** #else
 409:src/display.c ****       if (exp > 999) {
 410:src/display.c **** #endif
 411:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 412:src/display.c **** 	// No exponent separator for large -ve exponents
 413:src/display.c ****       }
 414:src/display.c ****       else *res++ = 'e'; // Normal separator
ARM GAS  /tmp/ccPzxiH4.s 			page 13


 415:src/display.c **** #else
 416:src/display.c ****       *res++ = 'e';
 417:src/display.c **** #endif
 418:src/display.c ****       if (negative) *res++ = '-';
 419:src/display.c ****     }
 420:src/display.c ****     else {
 421:src/display.c ****       if (negative) SET_EXP_SIGN;
 422:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 423:src/display.c ****       if (thousands != 0) {
 424:src/display.c **** #else
 425:src/display.c **** 	if (exp > 999) {
 426:src/display.c **** #endif
 427:src/display.c **** 	  if (!show_large_exponent
 428:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 429:src/display.c **** 	      && (flags & 8) == 0
 430:src/display.c **** #endif
 431:src/display.c **** 	      ) {
 432:src/display.c **** #ifdef REALBUILD
 433:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 434:src/display.c **** #else
 435:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 436:src/display.c **** #endif
 437:src/display.c **** 	    goto no_number;
 438:src/display.c **** 	  }
 439:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 440:src/display.c **** 	  else {
 441:src/display.c **** 	    exp -= thousands * 1000;
 442:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 443:src/display.c **** 	    if (flags & 16) {
 444:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 445:src/display.c **** 	      int i;
 446:src/display.c **** 
 447:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 448:src/display.c **** 		// Clear digits and separators
 449:src/display.c **** 		clr_dot(i);
 450:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 451:src/display.c **** 	    }
 452:src/display.c **** #  endif
 453:src/display.c **** 	    if (negative) {
 454:src/display.c **** 	      CLR_EXP_SIGN;
 455:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 456:src/display.c **** 	    }
 457:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 458:src/display.c **** 	    flags = 1;
 459:src/display.c **** 	  }
 460:src/display.c **** #endif
 461:src/display.c **** 	}
 462:src/display.c ****       }
 463:src/display.c **** #ifdef REALBUILD
 464:src/display.c ****       u.i = 0; // Smaller ARM code
 465:src/display.c **** #else
 466:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 467:src/display.c **** #endif
 468:src/display.c ****       if (flags & 5) {
 469:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 470:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 471:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
ARM GAS  /tmp/ccPzxiH4.s 			page 14


 472:src/display.c **** 	  int i;
 473:src/display.c **** 
 474:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 475:src/display.c **** 	    if (u.buf[i] == '0')
 476:src/display.c **** 	      u.buf[i] = ' ';
 477:src/display.c **** 	    else
 478:src/display.c **** 	      break;
 479:src/display.c **** 	  }
 480:src/display.c **** 	  if (i != 0 && negative) {
 481:src/display.c **** 	    // Move minus sign to right in front of exponent
 482:src/display.c **** 	    CLR_EXP_SIGN;
 483:src/display.c **** 	    u.buf[i - 1] = '-';
 484:src/display.c **** 	  }
 485:src/display.c **** 	}
 486:src/display.c **** #endif
 487:src/display.c ****       }
 488:src/display.c ****       else
 489:src/display.c **** 	num_arg(u.buf, exp);
 490:src/display.c ****     no_number:
 491:src/display.c ****       set_exp_digits_string(u.buf, res);
 492:src/display.c ****     }
 493:src/display.c **** 
 494:src/display.c ****     static void carry_overflow(void) {
 495:src/display.c ****       const int base = SEGS_EXP_BASE;
 496:src/display.c ****       int c;
 497:src/display.c ****       unsigned int b;
 498:src/display.c **** 
 499:src/display.c ****       // Figure out the base
 500:src/display.c ****       switch (State2.smode) {
 501:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 502:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 503:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 504:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 505:src/display.c ****       default:	b = UState.int_base+1;	break;
 506:src/display.c ****       }
 507:src/display.c **** 
 508:src/display.c ****       // Display the base as the first exponent digit
 509:src/display.c ****       if (b > 10 && b < 16)
 510:src/display.c **** 	SET_EXP_SIGN;
 511:src/display.c ****       c = "B34567o9D12345h"[b-2];
 512:src/display.c ****       set_dig(base, c);
 513:src/display.c **** 
 514:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 515:src/display.c ****       if (get_carry())
 516:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 517:src/display.c ****       if (get_overflow())
 518:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 519:src/display.c ****     }
 520:src/display.c **** 
 521:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 522:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 523:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 524:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 525:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 526:src/display.c **** #endif
 527:src/display.c **** 
 528:src/display.c ****     /* Display the annunicator text line.
ARM GAS  /tmp/ccPzxiH4.s 			page 15


 529:src/display.c ****      * Care needs to be taken to keep things aligned.
 530:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 531:src/display.c ****      */
 532:src/display.c **** #ifdef TOP_ROW
 533:src/display.c ****     static void annunciators(void) {
 534:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 535:src/display.c ****       char buf[42], *p = buf, *q="";
 536:src/display.c ****       char buf2[42], *p2 = buf2;
 537:src/display.c ****       int n;
 538:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 539:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 540:src/display.c ****       // Constant variables and code branches depending on a constant variable
 541:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 542:src/display.c ****       // feature run-time configurable if needed.
 543:src/display.c **** #ifdef INCLUDE_YREG_CODE
 544:src/display.c **** #  ifdef YREG_ALWAYS_ON
 545:src/display.c ****       const int yreg_enabled = 1;
 546:src/display.c **** #  else
 547:src/display.c ****       const int yreg_enabled = UState.show_y;
 548:src/display.c **** #  endif
 549:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 550:src/display.c ****       const int yreg_hms = 1;
 551:src/display.c **** #  else
 552:src/display.c ****       const int yreg_hms = 0;
 553:src/display.c **** #  endif
 554:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 555:src/display.c ****       const int yreg_fract = 1;
 556:src/display.c **** #  else
 557:src/display.c ****       const int yreg_fract = 0;
 558:src/display.c **** #  endif
 559:src/display.c **** #else
 560:src/display.c ****       const int yreg_enabled = 0;
 561:src/display.c ****       const int yreg_hms = 0;
 562:src/display.c ****       const int yreg_fract = 0;
 563:src/display.c **** #endif
 564:src/display.c **** #ifdef RP_PREFIX
 565:src/display.c ****       const int rp_prefix = 1;
 566:src/display.c **** #else
 567:src/display.c ****       const int rp_prefix = 0;
 568:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 569:src/display.c **** #endif
 570:src/display.c ****       // Indicates whether font escape code is compiled in.
 571:src/display.c ****       // This variable will always be set at compile time.
 572:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 573:src/display.c ****       const int has_FONT_ESCAPE = 1;
 574:src/display.c **** #else
 575:src/display.c ****       const int has_FONT_ESCAPE = 0;
 576:src/display.c **** #endif
 577:src/display.c **** 
 578:src/display.c ****       xset(buf, '\0', sizeof(buf));
 579:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 580:src/display.c ****       
 581:src/display.c ****       if (is_intmode()) {
 582:src/display.c **** #ifdef SHOW_STACK_SIZE
 583:src/display.c **** 	if (shift_char == ' ') {
 584:src/display.c **** 	  *p2++ = '\007';
 585:src/display.c **** 	  *p2++ = '\346';
ARM GAS  /tmp/ccPzxiH4.s 			page 16


 586:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 587:src/display.c **** 	}
 588:src/display.c **** 	else
 589:src/display.c **** #endif
 590:src/display.c **** 	  {
 591:src/display.c **** 	    *p2++ = shift_char;
 592:src/display.c **** 	    *p2++ = '\006';
 593:src/display.c **** 	  }
 594:src/display.c **** 
 595:src/display.c **** 	switch(int_mode()) {
 596:src/display.c **** 	default:
 597:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 598:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 599:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 600:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 601:src/display.c **** 	}
 602:src/display.c **** 	q = scopy(p2, q);
 603:src/display.c **** 	*q++ = '\006';
 604:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 605:src/display.c **** 
 606:src/display.c **** 	if (IntMaxWindow > 0) {
 607:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 608:src/display.c **** 	  if (*q == '1')
 609:src/display.c **** 	    n += 2;
 610:src/display.c **** 	  if (q[1] == '1')
 611:src/display.c **** 	    n += 2;
 612:src/display.c **** 	  while (n-- > 0)
 613:src/display.c **** 	    *p2++ = '\006';
 614:src/display.c **** 
 615:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 616:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 617:src/display.c **** 	}
 618:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 619:src/display.c ****       }
 620:src/display.c **** #ifdef INCLUDE_C_LOCK
 621:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 622:src/display.c **** #else
 623:src/display.c ****       else if (!yreg_enabled
 624:src/display.c **** #endif
 625:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 626:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 627:src/display.c **** #endif
 628:src/display.c **** 	       ) {
 629:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 630:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 631:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 632:src/display.c **** 	if (shift_char == ' ') {
 633:src/display.c **** 	  *p2++ = '\007';
 634:src/display.c **** 	  *p2++ = '\342';
 635:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 636:src/display.c **** 	  *p2++ = '\007';
 637:src/display.c **** 	  *p2++ = '\344';
 638:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 639:src/display.c **** 	}
 640:src/display.c **** 	else
 641:src/display.c **** #endif
 642:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
ARM GAS  /tmp/ccPzxiH4.s 			page 17


 643:src/display.c **** 	    *p2++ = shift_char;
 644:src/display.c **** 	    *p2++ = '\006';
 645:src/display.c **** 	  }
 646:src/display.c **** 	  else {
 647:src/display.c **** 	    *p2++ = 'D';
 648:src/display.c **** 	  }
 649:src/display.c **** 
 650:src/display.c **** 	if (State2.cmplx) {
 651:src/display.c **** 	  *p2++ = ' ';
 652:src/display.c **** 	  *p2 = '\024';
 653:src/display.c **** 	  goto skip;
 654:src/display.c **** 	}
 655:src/display.c **** 	if (State2.arrow) {
 656:src/display.c **** 	  *p2++ = ' ';
 657:src/display.c **** 	  *p2 = '\015';
 658:src/display.c **** 	  goto skip;
 659:src/display.c **** 	}
 660:src/display.c **** 
 661:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 662:src/display.c **** 	  if (State2.wascomplex) {
 663:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 664:src/display.c **** 	  }
 665:src/display.c **** 	  else if (rp_prefix) {
 666:src/display.c **** 	    if (RectPolConv == 1) {
 667:src/display.c **** 	      q = "\007\306<";
 668:src/display.c **** 	    }
 669:src/display.c **** 	    else {
 670:src/display.c **** 	      q = "\007\306y";
 671:src/display.c **** 	    }
 672:src/display.c **** 	  }
 673:src/display.c **** 	  p = scopy(buf, q);
 674:src/display.c **** 
 675:src/display.c **** 	  goto display_yreg;
 676:src/display.c **** 	}
 677:src/display.c **** 
 678:src/display.c **** 	switch (UState.date_mode) {
 679:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 680:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 681:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 682:src/display.c **** #endif
 683:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 684:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 685:src/display.c **** #endif
 686:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 687:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 688:src/display.c **** #endif
 689:src/display.c **** #endif
 690:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 691:src/display.c **** 	}
 692:src/display.c **** 	p2 = scopy(p2, q);
 693:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 694:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 695:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 696:src/display.c **** 	}
 697:src/display.c **** #else
 698:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 699:src/display.c **** 	*p2++ = '\007';
ARM GAS  /tmp/ccPzxiH4.s 			page 18


 700:src/display.c **** 	*p2++ = '\342';
 701:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 702:src/display.c **** #endif
 703:src/display.c ****       }
 704:src/display.c ****       else { // yreg_enabled
 705:src/display.c **** 	// do top-related things first
 706:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 707:src/display.c **** 	if (State2.cmplx) {
 708:src/display.c **** 	  *p2++ = '\007';
 709:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 710:src/display.c **** 	  *p2++ = shift_char;
 711:src/display.c **** 	  *p2++ = '\024';
 712:src/display.c **** 	}
 713:src/display.c **** 	else {// if (shift_char != ' ') {
 714:src/display.c **** 	  *p2++ = '\007';
 715:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 716:src/display.c **** 	  *p2++ = shift_char;
 717:src/display.c **** 	}
 718:src/display.c **** #endif
 719:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 720:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 721:src/display.c **** 	  *p2++ = '\007';
 722:src/display.c **** 	  *p2++ = '\207';
 723:src/display.c **** 	  *p2++ = '\007';	    
 724:src/display.c **** 	}
 725:src/display.c **** 	else {
 726:src/display.c **** 	  *p2++ = '\007';
 727:src/display.c **** 	  *p2++ = '\207';
 728:src/display.c **** 	  *p2++ = ' ';
 729:src/display.c **** 	}
 730:src/display.c **** #endif
 731:src/display.c **** #ifndef SHOW_STACK_SIZE
 732:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 733:src/display.c **** 	p2 = scopy(p2, q);
 734:src/display.c **** #else
 735:src/display.c **** 	if (is_dblmode()) {
 736:src/display.c **** 	  *p2++ = '\007';
 737:src/display.c **** 	  *p2++ = '\342';
 738:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 739:src/display.c **** 	  *p2++ = '\007';
 740:src/display.c **** 	  *p2++ = '\345';
 741:src/display.c **** 	  *p2++ = 'D';
 742:src/display.c **** 	}
 743:src/display.c **** 	else {
 744:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 745:src/display.c **** 	  p2 = scopy(p2, q);
 746:src/display.c **** 	}
 747:src/display.c **** #endif
 748:src/display.c **** 
 749:src/display.c **** 	switch (UState.date_mode) {
 750:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 751:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 752:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 753:src/display.c **** #endif
 754:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 755:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 756:src/display.c **** #endif
ARM GAS  /tmp/ccPzxiH4.s 			page 19


 757:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 758:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 759:src/display.c **** #endif
 760:src/display.c **** #endif
 761:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 762:src/display.c **** 	}
 763:src/display.c **** 	  
 764:src/display.c **** 	//      no_copy:
 765:src/display.c **** 	// display either arrow or datemode
 766:src/display.c **** 	if (State2.arrow) {
 767:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 768:src/display.c **** 	} // no need to skip y display with arrow here
 769:src/display.c **** 	else {
 770:src/display.c **** 	  p2 = scopy(p2, q);
 771:src/display.c **** 	}
 772:src/display.c **** 	// now do the annotations, if any, for the middle row:
 773:src/display.c **** #ifdef INCLUDE_C_LOCK
 774:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 775:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 776:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 777:src/display.c **** 	  }
 778:src/display.c **** 	  else {
 779:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 780:src/display.c **** 	  }
 781:src/display.c **** 	  scopy(p, q);
 782:src/display.c **** 	  goto skip;
 783:src/display.c **** 	}
 784:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 785:src/display.c **** 	  q = "\007\307<";
 786:src/display.c **** 	  p = scopy(p, q);
 787:src/display.c **** 	}
 788:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 789:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 790:src/display.c **** 	  p = scopy(p, q);
 791:src/display.c **** 	}
 792:src/display.c **** #else
 793:src/display.c **** 	
 794:src/display.c **** 	if (State2.wascomplex) {
 795:src/display.c **** 	  q = "\007\207i";
 796:src/display.c **** 	  p = scopy(p, q);
 797:src/display.c **** 	  //	    goto no_copy;
 798:src/display.c **** 	}
 799:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 800:src/display.c **** 	  q = "\007\307<";
 801:src/display.c **** 	  p = scopy(p, q);
 802:src/display.c **** 	  //	    goto no_copy;
 803:src/display.c **** 	}
 804:src/display.c **** 	else
 805:src/display.c **** #endif
 806:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 807:src/display.c **** 	    q = "\007\307y";
 808:src/display.c **** 	    p = scopy(p, q);
 809:src/display.c **** 	    //	    goto no_copy;
 810:src/display.c **** 	  }
 811:src/display.c ****       
 812:src/display.c **** 	if (State2.runmode) {
 813:src/display.c **** 	  decNumber y;
ARM GAS  /tmp/ccPzxiH4.s 			page 20


 814:src/display.c **** 	display_yreg:
 815:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 816:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 817:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 818:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 819:src/display.c **** 	   */
 820:src/display.c **** 	  if (is_intmode()) {
 821:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 822:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 823:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 824:src/display.c **** 	    goto skip;
 825:src/display.c **** 	  }
 826:src/display.c **** #ifdef INCLUDE_C_LOCK
 827:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 828:src/display.c **** 	    getRegister(&y, regK_idx);
 829:src/display.c **** 	  }
 830:src/display.c **** 	  else {
 831:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 832:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 833:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 834:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 835:src/display.c **** 	  }
 836:src/display.c **** #else
 837:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 838:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 839:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 840:src/display.c **** #endif
 841:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 842:src/display.c **** #ifdef INCLUDE_C_LOCK
 843:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 844:src/display.c **** #else
 845:src/display.c **** 	    if (yreg_hms && State2.hms) {
 846:src/display.c **** #endif
 847:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 848:src/display.c **** 
 849:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 850:src/display.c **** 	      UState.nothousands = 1;
 851:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 852:src/display.c **** 	      UState.nothousands = saved_nothousands;
 853:src/display.c **** 	      // First replace the '@' character with the degree symbol
 854:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 855:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 856:src/display.c **** 	      // then remove the fractional part of the seconds.
 857:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 858:src/display.c **** 	      while (*p) {
 859:src/display.c **** 		replace_char(buf, p[0], p[1]);
 860:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 861:src/display.c **** 		  goto skip;
 862:src/display.c **** 		}
 863:src/display.c **** 		p += 2;
 864:src/display.c **** 	      }
 865:src/display.c **** 	      goto skip;
 866:src/display.c **** 	    }
 867:src/display.c **** 	    if (yreg_fract && UState.fract
 868:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 869:src/display.c **** 		&& !State2.cmplx
 870:src/display.c **** #endif
ARM GAS  /tmp/ccPzxiH4.s 			page 21


 871:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 872:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 873:src/display.c **** #endif
 874:src/display.c **** 		&& set_x_fract(&y, p)) {
 875:src/display.c **** 	      char ltgteq;
 876:src/display.c **** 
 877:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 878:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 879:src/display.c **** 	      ltgteq = *q;
 880:src/display.c **** 	      switch (ltgteq) {
 881:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 882:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 883:src/display.c **** 	      }
 884:src/display.c **** 	      scopy(q, "\007\344?");
 885:src/display.c **** 	      q[2] = ltgteq;
 886:src/display.c **** 
 887:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 888:src/display.c **** 		goto skip;
 889:src/display.c **** 	      }
 890:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 891:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 892:src/display.c **** 		goto skip;
 893:src/display.c **** 	      }
 894:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 895:src/display.c **** 	    }
 896:src/display.c **** 	  }
 897:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 898:src/display.c **** 	    int extra_pixels;
 899:src/display.c **** 
 900:src/display.c **** 	    set_x_dn(&y, p, &n);
 901:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 902:src/display.c **** 	    if (extra_pixels <= 0)
 903:src/display.c **** 	      break;
 904:src/display.c **** 
 905:src/display.c **** 	    xset(p, '\0', n+10);
 906:src/display.c **** 
 907:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 908:src/display.c **** 	  }
 909:src/display.c **** 	}
 910:src/display.c ****       }
 911:src/display.c ****       
 912:src/display.c ****     skip:
 913:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 914:src/display.c ****       set_status_top_always(buf2);
 915:src/display.c ****       
 916:src/display.c ****     }
 917:src/display.c **** #else
 918:src/display.c ****     static void annunciators(void) {
 919:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 920:src/display.c ****       char buf[42], *p = buf, *q="";
 921:src/display.c ****       int n;
 922:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 923:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 924:src/display.c ****       // Constant variables and code branches depending on a constant variable
 925:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 926:src/display.c ****       // feature run-time configurable if needed.
 927:src/display.c **** #ifdef INCLUDE_YREG_CODE
ARM GAS  /tmp/ccPzxiH4.s 			page 22


 928:src/display.c **** #  ifdef YREG_ALWAYS_ON
 929:src/display.c ****       const int yreg_enabled = 1;
 930:src/display.c **** #  else
 931:src/display.c ****       const int yreg_enabled = UState.show_y;
 932:src/display.c **** #  endif
 933:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 934:src/display.c ****       const int yreg_hms = 1;
 935:src/display.c **** #  else
 936:src/display.c ****       const int yreg_hms = 0;
 937:src/display.c **** #  endif
 938:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 939:src/display.c ****       const int yreg_fract = 1;
 940:src/display.c **** #  else
 941:src/display.c ****       const int yreg_fract = 0;
 942:src/display.c **** #  endif
 943:src/display.c **** #else
 944:src/display.c ****       const int yreg_enabled = 0;
 945:src/display.c ****       const int yreg_hms = 0;
 946:src/display.c ****       const int yreg_fract = 0;
 947:src/display.c **** #endif
 948:src/display.c **** #ifdef RP_PREFIX
 949:src/display.c ****       const int rp_prefix = 1;
 950:src/display.c **** #else
 951:src/display.c ****       const int rp_prefix = 0;
 952:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 953:src/display.c **** #endif
 954:src/display.c ****       // Indicates whether font escape code is compiled in.
 955:src/display.c ****       // This variable will always be set at compile time.
 956:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 957:src/display.c ****       const int has_FONT_ESCAPE = 1;
 958:src/display.c **** #else
 959:src/display.c ****       const int has_FONT_ESCAPE = 0;
 960:src/display.c **** #endif
 961:src/display.c **** 
 962:src/display.c ****       xset(buf, '\0', sizeof(buf));
 963:src/display.c ****       
 964:src/display.c ****       if (is_intmode()) {
 965:src/display.c **** #ifdef SHOW_STACK_SIZE
 966:src/display.c **** 	if (shift_char == ' ') {
 967:src/display.c **** 	  *p++ = '\007';
 968:src/display.c **** 	  *p++ = '\346';
 969:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 970:src/display.c **** 	}
 971:src/display.c **** 	else
 972:src/display.c **** #endif
 973:src/display.c **** 	  {
 974:src/display.c **** 	    *p++ = shift_char;
 975:src/display.c **** 	    *p++ = '\006';
 976:src/display.c **** 	  }
 977:src/display.c **** 
 978:src/display.c **** 	switch(int_mode()) {
 979:src/display.c **** 	default:
 980:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 981:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 982:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 983:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 984:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 23


 985:src/display.c **** 	q = scopy(p, q);
 986:src/display.c **** 	*q++ = '\006';
 987:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 988:src/display.c **** 
 989:src/display.c **** 	if (IntMaxWindow > 0) {
 990:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 991:src/display.c **** 	  if (*q == '1')
 992:src/display.c **** 	    n += 2;
 993:src/display.c **** 	  if (q[1] == '1')
 994:src/display.c **** 	    n += 2;
 995:src/display.c **** 	  while (n-- > 0)
 996:src/display.c **** 	    *p++ = '\006';
 997:src/display.c **** 
 998:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 999:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1000:src/display.c **** 	}
1001:src/display.c ****       }
1002:src/display.c **** #ifdef INCLUDE_C_LOCK
1003:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1004:src/display.c **** #else
1005:src/display.c ****       else if (!yreg_enabled
1006:src/display.c **** #endif
1007:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1008:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1009:src/display.c **** #endif
1010:src/display.c **** 	       ) {
1011:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1012:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1013:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1014:src/display.c **** 	if (shift_char == ' ') {
1015:src/display.c **** 	  *p++ = '\007';
1016:src/display.c **** 	  *p++ = '\342';
1017:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1018:src/display.c **** 	  *p++ = '\007';
1019:src/display.c **** 	  *p++ = '\344';
1020:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1021:src/display.c **** 	}
1022:src/display.c **** 	else
1023:src/display.c **** #endif
1024:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1025:src/display.c **** 	    *p++ = shift_char;
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 	  }
1028:src/display.c **** 	  else {
1029:src/display.c **** 	    *p++ = 'D';
1030:src/display.c **** 	  }
1031:src/display.c **** 
1032:src/display.c **** 	if (State2.cmplx) {
1033:src/display.c **** 	  *p++ = ' ';
1034:src/display.c **** 	  *p = '\024';
1035:src/display.c **** 	  goto skip;
1036:src/display.c **** 	}
1037:src/display.c **** 	if (State2.arrow) {
1038:src/display.c **** 	  *p++ = ' ';
1039:src/display.c **** 	  *p = '\015';
1040:src/display.c **** 	  goto skip;
1041:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 24


1042:src/display.c **** 
1043:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1044:src/display.c **** 	  if (State2.wascomplex) {
1045:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1046:src/display.c **** 	  }
1047:src/display.c **** 	  else if (rp_prefix) {
1048:src/display.c **** 	    if (RectPolConv == 1) {
1049:src/display.c **** 	      q = "\007\306<";
1050:src/display.c **** 	    }
1051:src/display.c **** 	    else {
1052:src/display.c **** 	      q = "\007\306y";
1053:src/display.c **** 	    }
1054:src/display.c **** 	  }
1055:src/display.c **** 	  p = scopy(buf, q);
1056:src/display.c **** 
1057:src/display.c **** 	  goto display_yreg;
1058:src/display.c **** 	}
1059:src/display.c **** 
1060:src/display.c **** 	switch (UState.date_mode) {
1061:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1062:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1063:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1064:src/display.c **** #endif
1065:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1066:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1067:src/display.c **** #endif
1068:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1069:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1070:src/display.c **** #endif
1071:src/display.c **** #endif
1072:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1073:src/display.c **** 	}
1074:src/display.c **** 	p = scopy(p, q);
1075:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1076:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1077:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1078:src/display.c **** 	}
1079:src/display.c **** #else
1080:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1081:src/display.c **** 	*p++ = '\007';
1082:src/display.c **** 	*p++ = '\342';
1083:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1084:src/display.c **** #endif
1085:src/display.c ****       }
1086:src/display.c ****       else { // yreg_enabled
1087:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1088:src/display.c **** 	if (State2.cmplx) {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\344';
1091:src/display.c **** 	  *p++ = shift_char;
1092:src/display.c **** 	  q = "\024";
1093:src/display.c **** 	}
1094:src/display.c **** 	else if (shift_char != ' ') {
1095:src/display.c **** 	  *p++ = '\007';
1096:src/display.c **** 	  *p++ = '\307';
1097:src/display.c **** 	  *p++ = shift_char;
1098:src/display.c **** 	  goto no_copy;
ARM GAS  /tmp/ccPzxiH4.s 			page 25


1099:src/display.c **** 	}
1100:src/display.c **** 	else
1101:src/display.c **** #endif
1102:src/display.c **** #ifdef INCLUDE_C_LOCK
1103:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1104:src/display.c **** 			if ( POLAR_DISPLAY ) {
1105:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1106:src/display.c **** 			}
1107:src/display.c **** 			else {
1108:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1109:src/display.c **** 			}
1110:src/display.c **** 			scopy(p, q);
1111:src/display.c **** 			goto skip;
1112:src/display.c **** 		}
1113:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1114:src/display.c **** 			q = "\007\307<";
1115:src/display.c **** 		}
1116:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1117:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1118:src/display.c **** 		}
1119:src/display.c **** #else
1120:src/display.c **** 	  if (State2.wascomplex) {
1121:src/display.c **** 	    q = "\007\207i";
1122:src/display.c **** 	  }
1123:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1124:src/display.c **** 	    q = "\007\307<";
1125:src/display.c **** 	  }
1126:src/display.c **** #endif
1127:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1128:src/display.c **** 	    q = "\007\307y";
1129:src/display.c **** 	  }
1130:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1131:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1132:src/display.c **** 	    q = "\007\207\007";
1133:src/display.c **** 	  }
1134:src/display.c **** #endif
1135:src/display.c **** 	  else {
1136:src/display.c **** #ifndef SHOW_STACK_SIZE
1137:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1138:src/display.c **** #else
1139:src/display.c **** 	    if (is_dblmode()) {
1140:src/display.c **** 	      *p++ = '\007';
1141:src/display.c **** 	      *p++ = '\342';
1142:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1143:src/display.c **** 	      q = "\007\345D";
1144:src/display.c **** 	    }
1145:src/display.c **** 	    else {
1146:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1147:src/display.c **** 	    }
1148:src/display.c **** #endif
1149:src/display.c **** 	  }
1150:src/display.c **** 	p = scopy(p, q);
1151:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1152:src/display.c ****       no_copy:
1153:src/display.c **** #endif
1154:src/display.c **** 
1155:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccPzxiH4.s 			page 26


1156:src/display.c **** 	  scopy(p, "\007\204\006\015");
1157:src/display.c **** 	} else if (State2.runmode) {
1158:src/display.c **** 	  decNumber y;
1159:src/display.c **** 	display_yreg:
1160:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1161:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1162:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1163:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1164:src/display.c **** 	   */
1165:src/display.c **** #ifdef INCLUDE_C_LOCK
1166:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1167:src/display.c **** 		    getRegister(&y, regK_idx);
1168:src/display.c **** 		  }
1169:src/display.c **** 		  else {
1170:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1171:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1172:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1173:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1174:src/display.c **** 		  }
1175:src/display.c **** #else
1176:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1177:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1178:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1179:src/display.c **** #endif
1180:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1181:src/display.c **** #ifdef INCLUDE_C_LOCK
1182:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1183:src/display.c **** #else
1184:src/display.c **** 	    if (yreg_hms && State2.hms) {
1185:src/display.c **** #endif
1186:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1187:src/display.c **** 
1188:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1189:src/display.c **** 	      UState.nothousands = 1;
1190:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1191:src/display.c **** 	      UState.nothousands = saved_nothousands;
1192:src/display.c **** 	      // First replace the '@' character with the degree symbol
1193:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1194:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1195:src/display.c **** 	      // then remove the fractional part of the seconds.
1196:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1197:src/display.c **** 	      while (*p) {
1198:src/display.c **** 		replace_char(buf, p[0], p[1]);
1199:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1200:src/display.c **** 		  goto skip;
1201:src/display.c **** 		}
1202:src/display.c **** 		p += 2;
1203:src/display.c **** 	      }
1204:src/display.c **** 	      goto skip;
1205:src/display.c **** 	    }
1206:src/display.c **** 	    if (yreg_fract && UState.fract
1207:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1208:src/display.c **** 		&& !State2.cmplx
1209:src/display.c **** #endif
1210:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1211:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1212:src/display.c **** #endif
ARM GAS  /tmp/ccPzxiH4.s 			page 27


1213:src/display.c **** 		&& set_x_fract(&y, p)) {
1214:src/display.c **** 	      char ltgteq;
1215:src/display.c **** 
1216:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1217:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1218:src/display.c **** 	      ltgteq = *q;
1219:src/display.c **** 	      switch (ltgteq) {
1220:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1221:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1222:src/display.c **** 	      }
1223:src/display.c **** 	      scopy(q, "\007\344?");
1224:src/display.c **** 	      q[2] = ltgteq;
1225:src/display.c **** 
1226:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1227:src/display.c **** 		goto skip;
1228:src/display.c **** 	      }
1229:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1230:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1231:src/display.c **** 		goto skip;
1232:src/display.c **** 	      }
1233:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1234:src/display.c **** 	    }
1235:src/display.c **** 	  }
1236:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1237:src/display.c **** 	    int extra_pixels;
1238:src/display.c **** 
1239:src/display.c **** 	    set_x_dn(&y, p, &n);
1240:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1241:src/display.c **** 	    if (extra_pixels <= 0)
1242:src/display.c **** 	      break;
1243:src/display.c **** 
1244:src/display.c **** 	    xset(p, '\0', n+10);
1245:src/display.c **** 
1246:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1247:src/display.c **** 	  }
1248:src/display.c **** 	}
1249:src/display.c ****       }
1250:src/display.c ****       
1251:src/display.c ****     skip:	set_status_top(buf);
1252:src/display.c ****     }
1253:src/display.c **** #endif //top_row
1254:src/display.c ****     static void disp_x(const char *p) {
1255:src/display.c ****       int i;
1256:src/display.c ****       int gotdot = -1;
1257:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1258:src/display.c ****       const
1259:src/display.c **** #endif
1260:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1261:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1262:src/display.c ****       int overflow_to_left = 0;
1263:src/display.c **** #endif
1264:src/display.c **** 
1265:src/display.c ****       if (*p == '-') {
1266:src/display.c **** 	SET_MANT_SIGN;
1267:src/display.c **** 	p++;
1268:src/display.c ****       }
1269:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 28


1270:src/display.c ****       if (is_intmode()) {
1271:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1272:src/display.c **** 	  set_dig(i, *p);
1273:src/display.c **** 	  i += SEGS_PER_DIGIT;
1274:src/display.c **** 	}
1275:src/display.c **** 	carry_overflow();
1276:src/display.c ****       } else {
1277:src/display.c **** 	set_separator_decimal_modes();
1278:src/display.c **** 
1279:src/display.c **** 	i = 0;
1280:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1281:src/display.c **** 	if ( CmdLineDot > 1 ) {
1282:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	  const
1284:src/display.c **** #  endif
1285:src/display.c **** 	    int double_dot = 0;
1286:src/display.c **** 	  int j;
1287:src/display.c **** 
1288:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1289:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1290:src/display.c **** 	      gotdot = j;
1291:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1292:src/display.c **** 	      double_dot = (p[j+1] == '.');
1293:src/display.c **** #  endif
1294:src/display.c **** 	    }
1295:src/display.c **** 	  }
1296:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1297:src/display.c **** 	  if (j > 0) {
1298:src/display.c **** 	    p += j + 1;
1299:src/display.c **** 	    i = SEGS_PER_DIGIT;
1300:src/display.c **** 	    if (gotdot <= j) {
1301:src/display.c **** 	      gotdot = 0;
1302:src/display.c **** 	      if (double_dot)
1303:src/display.c **** 		p++;
1304:src/display.c **** 	    }
1305:src/display.c **** 	    else if (*p == '.') {
1306:src/display.c **** 	      gotdot = 0;
1307:src/display.c **** 	      p++;
1308:src/display.c **** 	      if (!double_dot)
1309:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1310:src/display.c **** 	    }
1311:src/display.c **** 	    else gotdot = -1;
1312:src/display.c **** 	    set_dig(0, '<');
1313:src/display.c **** 	    overflow_to_left = 1;
1314:src/display.c **** 	  }
1315:src/display.c **** 	  else gotdot = -1;
1316:src/display.c **** 	}
1317:src/display.c **** #endif
1318:src/display.c **** 
1319:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1320:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1321:src/display.c **** 	       && *p != 'D'
1322:src/display.c **** #endif
1323:src/display.c **** 	       ; p++) {
1324:src/display.c **** 	  if (*p == '.') {
1325:src/display.c **** 	    if (gotdot < 0)
1326:src/display.c **** 	      gotdot = i;
ARM GAS  /tmp/ccPzxiH4.s 			page 29


1327:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1328:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1329:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1330:src/display.c **** 	      if ( *(p+1) == '.' ) {
1331:src/display.c **** 		p++;
1332:src/display.c **** 	      }
1333:src/display.c **** #  else
1334:src/display.c **** 	      if ( i != gotdot ) {
1335:src/display.c **** #  endif
1336:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1337:src/display.c **** 		i += segs_per_digit;
1338:src/display.c **** 	      }
1339:src/display.c **** 	      else {
1340:src/display.c **** 		if ( CmdLineDot > 1 ) {
1341:src/display.c **** 		  i += segs_per_digit;
1342:src/display.c **** 		}
1343:src/display.c **** 		else {
1344:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1345:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1346:src/display.c **** 		}
1347:src/display.c **** 	      }
1348:src/display.c **** #else
1349:src/display.c **** 	      if (i > 0)
1350:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1351:src/display.c **** 	      else {
1352:src/display.c **** 		set_dig(i, '0');
1353:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1354:src/display.c **** 		i += segs_per_digit;
1355:src/display.c **** 	      }
1356:src/display.c **** #endif
1357:src/display.c **** 	    } else {
1358:src/display.c **** 	      set_dig(i, *p);
1359:src/display.c **** 	      i += segs_per_digit;
1360:src/display.c **** 	    }
1361:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1362:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1363:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1364:src/display.c **** #endif
1365:src/display.c **** 	  }
1366:src/display.c **** 
1367:src/display.c **** 	  /* Implement a floating comma */
1368:src/display.c **** 	  if (gotdot < 0)
1369:src/display.c **** 	    gotdot = i;
1370:src/display.c **** 	  for (;;) {
1371:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1372:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1373:src/display.c **** 	      break;
1374:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1375:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1376:src/display.c **** 	      break;
1377:src/display.c **** #endif
1378:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1379:src/display.c **** 	  }
1380:src/display.c **** 
1381:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1382:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1383:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
ARM GAS  /tmp/ccPzxiH4.s 			page 30


1384:src/display.c **** 	    int flags = 8;
1385:src/display.c **** #  else
1386:src/display.c **** 	    int flags = 12;
1387:src/display.c **** #  endif
1388:src/display.c **** 
1389:src/display.c **** 	    if (*p == 'D')
1390:src/display.c **** 	      flags |= 2;
1391:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1392:src/display.c **** 	      flags |= 16;
1393:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1394:src/display.c **** 	  }
1395:src/display.c **** #else
1396:src/display.c **** 	  if (*p == 'E') {
1397:src/display.c **** 	    p++;
1398:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1399:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1400:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1401:src/display.c **** #  else
1402:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1403:src/display.c **** #  endif
1404:src/display.c **** 	  } 
1405:src/display.c **** #endif
1406:src/display.c **** 	}
1407:src/display.c ****       }
1408:src/display.c **** 
1409:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1410:src/display.c **** 
1411:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1412:src/display.c **** 	const int ws = word_size();
1413:src/display.c **** 	unsigned int b;
1414:src/display.c **** 	long long int vs = value;
1415:src/display.c **** 	unsigned long long int v;
1416:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1417:src/display.c **** 	int i, j, k;
1418:src/display.c **** 	int sign = 0;
1419:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1420:src/display.c **** 
1421:src/display.c **** 	switch (State2.smode) {
1422:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1423:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1424:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1425:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1426:src/display.c **** 	default:	b = int_base();	break;
1427:src/display.c **** 	}
1428:src/display.c **** 
1429:src/display.c **** 	if (!res) {
1430:src/display.c **** 	  IntMaxWindow = 0;
1431:src/display.c **** 	  carry_overflow();
1432:src/display.c **** 	}
1433:src/display.c **** 
1434:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1435:src/display.c **** 	  v = extract_value(value, &sign);
1436:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1437:src/display.c **** 	    v = value;
1438:src/display.c **** 	  if (v == 0) {
1439:src/display.c **** 	    if (sign)
1440:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
ARM GAS  /tmp/ccPzxiH4.s 			page 31


1441:src/display.c **** 	    set_dig_s(dig, '0', res);
1442:src/display.c **** 	    return;
1443:src/display.c **** 	  } else
1444:src/display.c **** 	    for (i=0; v != 0; i++) {
1445:src/display.c **** 	      const int r = v % b;
1446:src/display.c **** 	      v /= b;
1447:src/display.c **** 	      buf[i] = DIGITS[r];
1448:src/display.c **** 	    }
1449:src/display.c **** 	} else {
1450:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1451:src/display.c **** 	  if (ws < 64) {
1452:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1453:src/display.c **** 	    vs &= mask;
1454:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1455:src/display.c **** 	      vs |= ~mask;
1456:src/display.c **** 	  }
1457:src/display.c **** 
1458:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1459:src/display.c **** 	    set_dig_s(dig, '0', res);
1460:src/display.c **** 	    return;
1461:src/display.c **** 	  } else if (!UState.leadzero) {
1462:src/display.c **** 	    v = (unsigned long long int)vs;
1463:src/display.c **** 	    for (i=0; v != 0; i++) {
1464:src/display.c **** 	      const int r = v % b;
1465:src/display.c **** 	      v /= b;
1466:src/display.c **** 	      buf[i] = DIGITS[r];
1467:src/display.c **** 	    }
1468:src/display.c **** 	  } else {
1469:src/display.c **** 	    int n;
1470:src/display.c **** 	    const unsigned int b1 = b >> 1;
1471:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1472:src/display.c **** 	    v = (unsigned long long int)vs;
1473:src/display.c **** 
1474:src/display.c **** 	    n = (ws + fac) / (fac+1);
1475:src/display.c **** 	    for (i=0; i<n; i++) {
1476:src/display.c **** 	      const int r = v % b;
1477:src/display.c **** 	      v /= b;
1478:src/display.c **** 	      buf[i] = DIGITS[r];
1479:src/display.c **** 	    }
1480:src/display.c **** 	  }
1481:src/display.c **** 	}
1482:src/display.c **** #ifdef BIGGER_DISPLAY
1483:src/display.c **** #define MAX_INT_Y_DIG 13
1484:src/display.c **** #else
1485:src/display.c **** #define MAX_INT_Y_DIG 7
1486:src/display.c **** #endif
1487:src/display.c **** 	/* At this point i is the number of digits in the output */
1488:src/display.c **** 	int nd = i;
1489:src/display.c **** 	if (res) {
1490:src/display.c **** 	  if (sign) *res++ = '-';
1491:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1492:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1493:src/display.c **** 	      *res++ = buf[i];
1494:src/display.c **** 	    *res++ = '.';
1495:src/display.c **** 	    *res++ = '.';
1496:src/display.c **** 	  }
1497:src/display.c **** 	  else {
ARM GAS  /tmp/ccPzxiH4.s 			page 32


1498:src/display.c **** 	    while (--i >= 0)
1499:src/display.c **** 	      *res++ = buf[i];
1500:src/display.c **** 	  }
1501:src/display.c **** 	} else {
1502:src/display.c **** #if 0
1503:src/display.c **** 	  set_separator_decimal_modes();
1504:src/display.c **** 
1505:src/display.c **** 	  // Allows configuration of digit grouping per base
1506:src/display.c **** 	  static const char grouping[] = 
1507:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1508:src/display.c **** 		    //	   2     3     4     5     6     7     8
1509:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1510:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1511:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1512:src/display.c **** 	    : grouping[b - 2] >> 4;
1513:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1514:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1515:src/display.c **** #else
1516:src/display.c **** 	  // Less flexible but shorter
1517:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1518:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1519:src/display.c **** 	    : b == 16 ? 2 : 3;
1520:src/display.c **** 	  set_separator_decimal_modes();
1521:src/display.c **** #endif
1522:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1523:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1524:src/display.c **** 	    State2.window = 0;
1525:src/display.c **** 	  buf[i] = '\0';
1526:src/display.c **** 
1527:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1528:src/display.c **** 	  for (k = 0; k < 12; k++)
1529:src/display.c **** 	    if (buf[j + k] == '\0')
1530:src/display.c **** 	      break;
1531:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1532:src/display.c **** 	    int ch = buf[j++];
1533:src/display.c **** 	    if (i >= shift)
1534:src/display.c **** 	      ch -= 030;
1535:src/display.c **** 	    set_dig(dig, ch);
1536:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1537:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1538:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1539:src/display.c **** 	  }
1540:src/display.c **** 	  if (sign) {
1541:src/display.c **** 	    if (dig >= 0)
1542:src/display.c **** 	      set_dig(dig, '-');
1543:src/display.c **** 	    else	SET_MANT_SIGN;
1544:src/display.c **** 	  }
1545:src/display.c **** 	}
1546:src/display.c ****       }
1547:src/display.c **** 
1548:src/display.c ****       /* Handle special cases.
1549:src/display.c ****        * return non-zero if the number is special.
1550:src/display.c ****        */
1551:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1552:src/display.c **** 	if (decNumberIsSpecial(x)) {
1553:src/display.c **** 	  if (decNumberIsNaN(x)) {
1554:src/display.c **** 	    if (res) {
ARM GAS  /tmp/ccPzxiH4.s 			page 33


1555:src/display.c **** 	      scopy(res, "NaN");
1556:src/display.c **** 	    } else {
1557:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1558:src/display.c **** 	    }
1559:src/display.c **** 	    return 1;
1560:src/display.c **** 	  } else {
1561:src/display.c **** 	    if (decNumberIsNegative(x)) {
1562:src/display.c **** 	      if (res) *res++ = '-';
1563:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1564:src/display.c **** 	    }
1565:src/display.c **** 	    if (res)
1566:src/display.c **** 	      *res++ = '\237';
1567:src/display.c **** 	    else {
1568:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1569:src/display.c **** 	    }
1570:src/display.c **** 	    return 1;
1571:src/display.c **** 	  }
1572:src/display.c **** 	}
1573:src/display.c **** 	return 0;
1574:src/display.c ****       }
1575:src/display.c **** 
1576:src/display.c **** 
1577:src/display.c ****       /* Extract the two lowest integral digits from the number
1578:src/display.c ****        */
1579:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1580:src/display.c **** 	decNumber n;
1581:src/display.c **** 
1582:src/display.c **** 	decNumberMod(&n, x, &const_100);
1583:src/display.c **** 	*v = dn_to_int(&n);
1584:src/display.c **** 	dn_mulpow10(&n, x, -2);
1585:src/display.c **** 	decNumberTrunc(res, &n);
1586:src/display.c ****       }
1587:src/display.c **** 
1588:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1588 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1589:src/display.c **** 	char b[32];
 239              		.loc 1 1589 2 view .LVU68
1590:src/display.c **** 	int i, j;
 240              		.loc 1 1590 2 view .LVU69
1591:src/display.c **** 
1592:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1592 2 view .LVU70
 242              		.loc 1 1592 12 view .LVU71
1588:src/display.c **** 	char b[32];
 243              		.loc 1 1588 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPzxiH4.s 			page 34


1593:src/display.c **** 	  if (v == 0)
1594:src/display.c **** 	    b[i] = spaces?' ':'0';
1595:src/display.c **** 	  else {
1596:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1596 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1588:src/display.c **** 	char b[32];
 255              		.loc 1 1588 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
1588:src/display.c **** 	char b[32];
 258              		.loc 1 1588 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1592:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1592 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1593:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1593 4 is_stmt 1 view .LVU77
 266              		.loc 1 1596 6 view .LVU78
 267              		.loc 1 1596 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1597:src/display.c **** 	    v /= 10;
 274              		.loc 1 1597 6 is_stmt 1 view .LVU80
1598:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1598 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1592:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1592 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1593 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1592:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1592 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1598 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1597:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1597 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1598 6 is_stmt 1 view .LVU87
1592:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1592 17 view .LVU88
1592:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1592 12 view .LVU89
1592:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1592 2 is_stmt 0 view .LVU90
ARM GAS  /tmp/ccPzxiH4.s 			page 35


 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1592:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1592 2 view .LVU91
 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1592:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1592 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1593 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1594:src/display.c **** 	  else {
 312              		.loc 1 1594 6 is_stmt 1 view .LVU94
1592:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1592 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
 315              	.LVL21:
1592:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1592 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1594:src/display.c **** 	  else {
 318              		.loc 1 1594 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1592:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1592 17 is_stmt 1 view .LVU98
1592:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1592 12 view .LVU99
1592:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1592 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1592:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1592 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1599:src/display.c **** 	  }
1600:src/display.c **** 	}
1601:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1601 2 is_stmt 1 view .LVU102
 334              		.loc 1 1601 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
ARM GAS  /tmp/ccPzxiH4.s 			page 36


 336              	.LVL25:
1602:src/display.c **** 	  b[0] = '0';
1603:src/display.c **** 
1604:src/display.c **** 	/* Copy across and appropriately leading space things
1605:src/display.c **** 	 */
1606:src/display.c **** 	j = *jin;
 337              		.loc 1 1606 4 view .LVU104
 338 005a D7F80090 		ldr	r9, [r7]
1601:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1601 5 view .LVU105
 340 005e 202B     		cmp	r3, #32
1602:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1602 4 is_stmt 1 view .LVU106
1602:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1602 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1606 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1607:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1607 2 view .LVU109
 349              		.loc 1 1607 8 view .LVU110
1606:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1606 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
 353              		.loc 1 1607 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1608:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1608 4 is_stmt 1 view .LVU113
 358              	.LBB162:
 359              	.LBB163:
 340:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 340 12 view .LVU114
 361              	.LBE163:
 362              	.LBE162:
 363              		.loc 1 1608 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB167:
 366              	.LBB164:
 340:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 340 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 340:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 340 16 view .LVU117
 371              	.LBE164:
 372              	.LBI162:
 339:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 339 14 is_stmt 1 view .LVU118
 374              	.LBB165:
 340:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 340 3 view .LVU119
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccPzxiH4.s 			page 37


 376              		.loc 1 340 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 340:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 340 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
 340:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 340 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
 384              	.LVL31:
 385              	.L34:
 342:src/display.c **** }
 386              		.loc 1 342 3 is_stmt 1 view .LVU123
 342:src/display.c **** }
 387              		.loc 1 342 3 is_stmt 0 view .LVU124
 388              	.LBE165:
 389              	.LBE167:
1609:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1609 4 is_stmt 1 view .LVU125
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1607 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1609 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1607 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1610:src/display.c **** 	}
1611:src/display.c **** 	*jin = j;
 399              		.loc 1 1611 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1611 2 is_stmt 1 view .LVU130
 403              		.loc 1 1611 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1612:src/display.c **** 	return str;
1613:src/display.c ****       }
 406              		.loc 1 1613 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1611:src/display.c **** 	return str;
 408              		.loc 1 1611 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1612:src/display.c **** 	return str;
 410              		.loc 1 1612 2 is_stmt 1 view .LVU134
 411              		.loc 1 1613 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
ARM GAS  /tmp/ccPzxiH4.s 			page 38


 420              	.LBB168:
 421              	.LBB166:
 341:src/display.c ****   return res;
 422              		.loc 1 341 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
 341:src/display.c ****   return res;
 426              		.loc 1 341 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE166:
 433              	.LBE168:
 434              		.cfi_endproc
 435              	.LFE21:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
 447              	.LFB13:
 357:src/display.c ****   int i;
 448              		.loc 1 357 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 358 3 view .LVU139
 359:src/display.c **** 
 453              		.loc 1 359 3 view .LVU140
 357:src/display.c ****   int i;
 454              		.loc 1 357 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 359:src/display.c **** 
 463              		.loc 1 359 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 361 3 is_stmt 1 view .LVU143
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccPzxiH4.s 			page 39


 470              		.loc 1 361 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB169:
 476              	.LBB170:
 341:src/display.c ****   return res;
 477              		.loc 1 341 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 340:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 340 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 340:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 340 19 view .LVU147
 486              	.LBE170:
 487              	.LBE169:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 361 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB176:
 491              	.LBB171:
 340:src/display.c ****   else	set_dig(base, ch);
 492              		.loc 1 340 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 342:src/display.c **** }
 495              		.loc 1 342 3 is_stmt 1 view .LVU150
 342:src/display.c **** }
 496              		.loc 1 342 3 is_stmt 0 view .LVU151
 497              	.LBE171:
 498              	.LBE176:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 361 36 is_stmt 1 view .LVU152
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 361 13 view .LVU153
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 361 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 362:src/display.c **** }
 505              		.loc 1 362 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB177:
 507              	.LBB172:
 340:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 340 12 discriminator 3 view .LVU156
 340:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 340 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE172:
 511              	.LBE177:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 361 23 discriminator 3 view .LVU158
ARM GAS  /tmp/ccPzxiH4.s 			page 40


 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB178:
 516              	.LBB173:
 340:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 340 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
 519              	.LVL44:
 340:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 340 16 discriminator 3 view .LVU160
 521              	.LBE173:
 522              	.LBI169:
 339:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 339 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB174:
 340:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 340 3 discriminator 3 view .LVU162
 526              	.LBE174:
 527              	.LBE178:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 361 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB179:
 532              	.LBB175:
 340:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 340 6 discriminator 4 view .LVU164
 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 341:src/display.c ****   return res;
 536              		.loc 1 341 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 342:src/display.c **** }
 541              		.loc 1 342 3 view .LVU166
 342:src/display.c **** }
 542              		.loc 1 342 3 is_stmt 0 view .LVU167
 543              	.LBE175:
 544              	.LBE179:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 361 36 is_stmt 1 view .LVU168
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 361 13 view .LVU169
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 361 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 363:src/display.c **** 
 552              		.loc 1 363 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 363:src/display.c **** 
 554              		.loc 1 363 1 view .LVU172
 555              		.cfi_endproc
ARM GAS  /tmp/ccPzxiH4.s 			page 41


 556              	.LFE13:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
 568              	.LFB20:
1579:src/display.c **** 	decNumber n;
 569              		.loc 1 1579 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1580:src/display.c **** 
 573              		.loc 1 1580 2 view .LVU174
1582:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1582 2 view .LVU175
1579:src/display.c **** 	decNumber n;
 575              		.loc 1 1579 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1579:src/display.c **** 	decNumber n;
 584              		.loc 1 1579 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1582:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1582 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1582:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1582 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1579:src/display.c **** 	decNumber n;
 593              		.loc 1 1579 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1582:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1582 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1583 2 is_stmt 1 view .LVU182
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1583 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1584:src/display.c **** 	decNumberTrunc(res, &n);
ARM GAS  /tmp/ccPzxiH4.s 			page 42


 603              		.loc 1 1584 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1583 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1584:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1584 2 is_stmt 1 view .LVU186
 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
 611              	.LVL53:
1585:src/display.c ****       }
 612              		.loc 1 1585 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1586:src/display.c **** 
 617              		.loc 1 1586 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1586:src/display.c **** 
 624              		.loc 1 1586 7 view .LVU189
 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE20:
 631              		.section	.text.set_exp,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	set_exp:
 640              	.LVL56:
 641              	.LFB14:
 374:src/display.c ****   union {
 642              		.loc 1 374 52 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 375:src/display.c ****     char buf[4];
 646              		.loc 1 375 3 view .LVU191
 379:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 647              		.loc 1 379 3 view .LVU192
 381:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 648              		.loc 1 381 3 view .LVU193
 387:src/display.c **** #  endif
 649              		.loc 1 387 3 view .LVU194
 396:src/display.c ****   if (exp < 0) {
 650              		.loc 1 396 3 view .LVU195
ARM GAS  /tmp/ccPzxiH4.s 			page 43


 374:src/display.c ****   union {
 651              		.loc 1 374 52 is_stmt 0 view .LVU196
 652 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 653              		.cfi_def_cfa_offset 20
 654              		.cfi_offset 4, -20
 655              		.cfi_offset 5, -16
 656              		.cfi_offset 6, -12
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 397:src/display.c ****     negative = 1;
 659              		.loc 1 397 6 view .LVU197
 660 0002 051E     		subs	r5, r0, #0
 374:src/display.c ****   union {
 661              		.loc 1 374 52 view .LVU198
 662 0004 83B0     		sub	sp, sp, #12
 663              		.cfi_def_cfa_offset 32
 374:src/display.c ****   union {
 664              		.loc 1 374 52 view .LVU199
 665 0006 0E46     		mov	r6, r1
 666              	.LVL57:
 397:src/display.c ****     negative = 1;
 667              		.loc 1 397 3 is_stmt 1 view .LVU200
 397:src/display.c ****     negative = 1;
 668              		.loc 1 397 6 is_stmt 0 view .LVU201
 669 0008 5BDB     		blt	.L91
 402:src/display.c **** #endif
 670              		.loc 1 402 13 view .LVU202
 671 000a 3B4B     		ldr	r3, .L93
 672 000c EC17     		asrs	r4, r5, #31
 673 000e 83FB0513 		smull	r1, r3, r3, r5
 674              	.LVL58:
 402:src/display.c **** #endif
 675              		.loc 1 402 13 view .LVU203
 676 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 396:src/display.c ****   if (exp < 0) {
 677              		.loc 1 396 12 view .LVU204
 678 0016 06F00207 		and	r7, r6, #2
 679              	.LVL59:
 402:src/display.c **** #endif
 680              		.loc 1 402 3 is_stmt 1 view .LVU205
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 681              		.loc 1 404 3 view .LVU206
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 682              		.loc 1 404 6 is_stmt 0 view .LVU207
 683 001a 002A     		cmp	r2, #0
 684 001c 60D0     		beq	.L64
 407:src/display.c **** #else
 685              		.loc 1 407 5 is_stmt 1 view .LVU208
 407:src/display.c **** #else
 686              		.loc 1 407 8 is_stmt 0 view .LVU209
 687 001e 2CB1     		cbz	r4, .L65
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 688              		.loc 1 411 2 is_stmt 1 view .LVU210
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 689              		.loc 1 411 5 is_stmt 0 view .LVU211
 690 0020 57B9     		cbnz	r7, .L62
 411:src/display.c **** 	// No exponent separator for large -ve exponents
ARM GAS  /tmp/ccPzxiH4.s 			page 44


 691              		.loc 1 411 17 is_stmt 1 discriminator 1 view .LVU212
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 692              		.loc 1 411 21 is_stmt 0 discriminator 1 view .LVU213
 693 0022 1446     		mov	r4, r2
 694              	.LVL60:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 695              		.loc 1 411 24 discriminator 1 view .LVU214
 696 0024 3A23     		movs	r3, #58
 697              	.LVL61:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 698              		.loc 1 411 24 discriminator 1 view .LVU215
 699 0026 04F8013B 		strb	r3, [r4], #1
 700              	.LVL62:
 418:src/display.c ****     }
 701              		.loc 1 418 7 is_stmt 1 discriminator 1 view .LVU216
 702 002a 09E0     		b	.L66
 703              	.LVL63:
 704              	.L65:
 414:src/display.c **** #else
 705              		.loc 1 414 12 view .LVU217
 414:src/display.c **** #else
 706              		.loc 1 414 16 is_stmt 0 view .LVU218
 707 002c 1446     		mov	r4, r2
 708              	.LVL64:
 414:src/display.c **** #else
 709              		.loc 1 414 19 view .LVU219
 710 002e 6523     		movs	r3, #101
 711              	.LVL65:
 414:src/display.c **** #else
 712              		.loc 1 414 19 view .LVU220
 713 0030 04F8013B 		strb	r3, [r4], #1
 714              	.LVL66:
 418:src/display.c ****     }
 715              		.loc 1 418 7 is_stmt 1 view .LVU221
 418:src/display.c ****     }
 716              		.loc 1 418 10 is_stmt 0 view .LVU222
 717 0034 27B1     		cbz	r7, .L66
 414:src/display.c **** #else
 718              		.loc 1 414 16 view .LVU223
 719 0036 2246     		mov	r2, r4
 720              	.LVL67:
 721              	.L62:
 418:src/display.c ****     }
 722              		.loc 1 418 21 is_stmt 1 discriminator 1 view .LVU224
 418:src/display.c ****     }
 723              		.loc 1 418 25 is_stmt 0 discriminator 1 view .LVU225
 724 0038 1446     		mov	r4, r2
 725              	.LVL68:
 418:src/display.c ****     }
 726              		.loc 1 418 28 discriminator 1 view .LVU226
 727 003a 2D23     		movs	r3, #45
 728 003c 04F8013B 		strb	r3, [r4], #1
 729              	.LVL69:
 730              	.L66:
 466:src/display.c **** #endif
 731              		.loc 1 466 7 is_stmt 1 view .LVU227
 732 0040 01AF     		add	r7, sp, #4
ARM GAS  /tmp/ccPzxiH4.s 			page 45


 733 0042 3846     		mov	r0, r7
 734 0044 0422     		movs	r2, #4
 735 0046 0021     		movs	r1, #0
 736 0048 FFF7FEFF 		bl	xset
 737              	.LVL70:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 738              		.loc 1 468 7 view .LVU228
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 739              		.loc 1 468 10 is_stmt 0 view .LVU229
 740 004c 16F0050F 		tst	r6, #5
 741 0050 2CD1     		bne	.L71
 742              	.L73:
 489:src/display.c ****     no_number:
 743              		.loc 1 489 2 is_stmt 1 view .LVU230
 744 0052 2946     		mov	r1, r5
 745 0054 3846     		mov	r0, r7
 746 0056 FFF7FEFF 		bl	num_arg
 747              	.LVL71:
 491:src/display.c ****     }
 748              		.loc 1 491 7 view .LVU231
 749 005a 2146     		mov	r1, r4
 750 005c 3846     		mov	r0, r7
 751 005e FFF7FEFF 		bl	set_exp_digits_string
 752              	.LVL72:
 492:src/display.c **** 
 753              		.loc 1 492 5 is_stmt 0 view .LVU232
 754 0062 03B0     		add	sp, sp, #12
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 20
 757              		@ sp needed
 758 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 759              	.LVL73:
 760              	.L74:
 761              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
 762              		.loc 1 398 14 view .LVU233
 763 0066 0127     		movs	r7, #1
 764              	.LVL74:
 765              	.L61:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 766              		.loc 1 421 21 is_stmt 1 view .LVU234
 767              	.LBB180:
 768              	.LBI180:
 254:src/display.c **** {
 769              		.loc 1 254 13 view .LVU235
 770              	.LBB181:
 256:src/display.c **** }
 771              		.loc 1 256 3 view .LVU236
 772 0068 8220     		movs	r0, #130
 773 006a FFF7FEFF 		bl	set_dot
 774              	.LVL75:
 775              	.L67:
 256:src/display.c **** }
 776              		.loc 1 256 3 is_stmt 0 view .LVU237
 777              	.LBE181:
 778              	.LBE180:
 423:src/display.c **** #else
ARM GAS  /tmp/ccPzxiH4.s 			page 46


 779              		.loc 1 423 7 is_stmt 1 view .LVU238
 423:src/display.c **** #else
 780              		.loc 1 423 10 is_stmt 0 view .LVU239
 781 006e 002C     		cmp	r4, #0
 782 0070 E6D0     		beq	.L66
 427:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 783              		.loc 1 427 4 is_stmt 1 view .LVU240
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 784              		.loc 1 441 6 view .LVU241
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 785              		.loc 1 441 23 is_stmt 0 view .LVU242
 786 0072 224B     		ldr	r3, .L93+4
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 787              		.loc 1 441 10 view .LVU243
 788 0074 03FB0455 		mla	r5, r3, r4, r5
 789              	.LVL76:
 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 790              		.loc 1 443 6 is_stmt 1 view .LVU244
 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 791              		.loc 1 443 9 is_stmt 0 view .LVU245
 792 0078 F306     		lsls	r3, r6, #27
 793 007a 0AD5     		bpl	.L68
 794              	.LBB182:
 447:src/display.c **** 		// Clear digits and separators
 795              		.loc 1 447 15 view .LVU246
 796 007c 4F26     		movs	r6, #79
 797              	.LVL77:
 798              	.L69:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 799              		.loc 1 449 3 is_stmt 1 discriminator 3 view .LVU247
 800 007e 3046     		mov	r0, r6
 447:src/display.c **** 		// Clear digits and separators
 801              		.loc 1 447 66 is_stmt 0 discriminator 3 view .LVU248
 802 0080 0136     		adds	r6, r6, #1
 803              	.LVL78:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 804              		.loc 1 449 3 discriminator 3 view .LVU249
 805 0082 FFF7FEFF 		bl	clr_dot
 806              	.LVL79:
 447:src/display.c **** 		// Clear digits and separators
 807              		.loc 1 447 66 is_stmt 1 discriminator 3 view .LVU250
 447:src/display.c **** 		// Clear digits and separators
 808              		.loc 1 447 41 discriminator 3 view .LVU251
 447:src/display.c **** 		// Clear digits and separators
 809              		.loc 1 447 8 is_stmt 0 discriminator 3 view .LVU252
 810 0086 632E     		cmp	r6, #99
 811 0088 F9D1     		bne	.L69
 450:src/display.c **** 	    }
 812              		.loc 1 450 8 is_stmt 1 view .LVU253
 813 008a 3E21     		movs	r1, #62
 814 008c 5120     		movs	r0, #81
 815 008e FFF7FEFF 		bl	set_dig
 816              	.LVL80:
 817              	.L68:
 450:src/display.c **** 	    }
 818              		.loc 1 450 8 is_stmt 0 view .LVU254
 819              	.LBE182:
ARM GAS  /tmp/ccPzxiH4.s 			page 47


 453:src/display.c **** 	      CLR_EXP_SIGN;
 820              		.loc 1 453 6 is_stmt 1 view .LVU255
 453:src/display.c **** 	      CLR_EXP_SIGN;
 821              		.loc 1 453 9 is_stmt 0 view .LVU256
 822 0092 47BB     		cbnz	r7, .L92
 823              	.L70:
 457:src/display.c **** 	    flags = 1;
 824              		.loc 1 457 6 is_stmt 1 view .LVU257
 825 0094 04F13001 		add	r1, r4, #48
 826 0098 6320     		movs	r0, #99
 466:src/display.c **** #endif
 827              		.loc 1 466 7 is_stmt 0 view .LVU258
 828 009a 01AF     		add	r7, sp, #4
 457:src/display.c **** 	    flags = 1;
 829              		.loc 1 457 6 view .LVU259
 830 009c FFF7FEFF 		bl	set_dig
 831              	.LVL81:
 458:src/display.c **** 	  }
 832              		.loc 1 458 6 is_stmt 1 view .LVU260
 466:src/display.c **** #endif
 833              		.loc 1 466 7 view .LVU261
 834 00a0 3846     		mov	r0, r7
 835 00a2 0422     		movs	r2, #4
 836 00a4 0021     		movs	r1, #0
 837 00a6 FFF7FEFF 		bl	xset
 838              	.LVL82:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 839              		.loc 1 468 7 view .LVU262
 466:src/display.c **** #endif
 840              		.loc 1 466 7 is_stmt 0 view .LVU263
 841 00aa 0024     		movs	r4, #0
 842              	.LVL83:
 843              	.L71:
 469:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 844              		.loc 1 469 2 is_stmt 1 view .LVU264
 845 00ac 2946     		mov	r1, r5
 846 00ae 0322     		movs	r2, #3
 847 00b0 3846     		mov	r0, r7
 848 00b2 FFF7FEFF 		bl	num_arg_0
 849              	.LVL84:
 491:src/display.c ****     }
 850              		.loc 1 491 7 view .LVU265
 851 00b6 2146     		mov	r1, r4
 852 00b8 3846     		mov	r0, r7
 853 00ba FFF7FEFF 		bl	set_exp_digits_string
 854              	.LVL85:
 492:src/display.c **** 
 855              		.loc 1 492 5 is_stmt 0 view .LVU266
 856 00be 03B0     		add	sp, sp, #12
 857              		.cfi_remember_state
 858              		.cfi_def_cfa_offset 20
 859              		@ sp needed
 860 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 861              	.LVL86:
 862              	.L91:
 863              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
ARM GAS  /tmp/ccPzxiH4.s 			page 48


 864              		.loc 1 398 5 is_stmt 1 view .LVU267
 399:src/display.c ****   }
 865              		.loc 1 399 5 view .LVU268
 402:src/display.c **** #endif
 866              		.loc 1 402 13 is_stmt 0 view .LVU269
 867 00c2 0D4C     		ldr	r4, .L93
 399:src/display.c ****   }
 868              		.loc 1 399 9 view .LVU270
 869 00c4 6D42     		rsbs	r5, r5, #0
 870              	.LVL87:
 402:src/display.c **** #endif
 871              		.loc 1 402 3 is_stmt 1 view .LVU271
 402:src/display.c **** #endif
 872              		.loc 1 402 13 is_stmt 0 view .LVU272
 873 00c6 A4FB0534 		umull	r3, r4, r4, r5
 874 00ca A409     		lsrs	r4, r4, #6
 875              	.LVL88:
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 876              		.loc 1 404 3 is_stmt 1 view .LVU273
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 877              		.loc 1 404 6 is_stmt 0 view .LVU274
 878 00cc 002A     		cmp	r2, #0
 879 00ce CAD0     		beq	.L74
 407:src/display.c **** #else
 880              		.loc 1 407 5 is_stmt 1 view .LVU275
 407:src/display.c **** #else
 881              		.loc 1 407 8 is_stmt 0 view .LVU276
 882 00d0 002C     		cmp	r4, #0
 883 00d2 B1D1     		bne	.L62
 414:src/display.c **** #else
 884              		.loc 1 414 12 is_stmt 1 view .LVU277
 414:src/display.c **** #else
 885              		.loc 1 414 16 is_stmt 0 view .LVU278
 886 00d4 1446     		mov	r4, r2
 887              	.LVL89:
 414:src/display.c **** #else
 888              		.loc 1 414 19 view .LVU279
 889 00d6 6523     		movs	r3, #101
 890 00d8 04F8013B 		strb	r3, [r4], #1
 891              	.LVL90:
 418:src/display.c ****     }
 892              		.loc 1 418 7 is_stmt 1 view .LVU280
 414:src/display.c **** #else
 893              		.loc 1 414 16 is_stmt 0 view .LVU281
 894 00dc 2246     		mov	r2, r4
 895 00de ABE7     		b	.L62
 896              	.LVL91:
 897              	.L64:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 898              		.loc 1 421 7 is_stmt 1 view .LVU282
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 899              		.loc 1 421 10 is_stmt 0 view .LVU283
 900 00e0 002F     		cmp	r7, #0
 901 00e2 C4D0     		beq	.L67
 902 00e4 C0E7     		b	.L61
 903              	.LVL92:
 904              	.L92:
ARM GAS  /tmp/ccPzxiH4.s 			page 49


 454:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 905              		.loc 1 454 8 is_stmt 1 view .LVU284
 906              	.LBB183:
 907              	.LBI183:
 259:src/display.c **** {
 908              		.loc 1 259 13 view .LVU285
 909              	.LBB184:
 261:src/display.c **** }
 910              		.loc 1 261 3 view .LVU286
 911 00e6 8220     		movs	r0, #130
 912 00e8 FFF7FEFF 		bl	clr_dot
 913              	.LVL93:
 914              	.LBE184:
 915              	.LBE183:
 455:src/display.c **** 	    }
 916              		.loc 1 455 8 view .LVU287
 917 00ec 2D21     		movs	r1, #45
 918 00ee 5A20     		movs	r0, #90
 919 00f0 FFF7FEFF 		bl	set_dig
 920              	.LVL94:
 921 00f4 CEE7     		b	.L70
 922              	.L94:
 923 00f6 00BF     		.align	2
 924              	.L93:
 925 00f8 D34D6210 		.word	274877907
 926 00fc 18FCFFFF 		.word	-1000
 927              		.cfi_endproc
 928              	.LFE14:
 930              		.section	.text.set_annunciators,"ax",%progbits
 931              		.align	1
 932              		.p2align 2,,3
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu fpv4-sp-d16
 938              	set_annunciators:
 939              	.LFB32:
1614:src/display.c **** 
1615:src/display.c **** 
1616:src/display.c ****       /* Display the number in H.MS mode.
1617:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1618:src/display.c ****        */
1619:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1620:src/display.c **** 	decNumber x, y, a, t, u;
1621:src/display.c **** 	int j=0;
1622:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1623:src/display.c **** 	unsigned int hr, min, sec, fs;
1624:src/display.c **** 
1625:src/display.c **** 	if (check_special_dn(rgx, res)) {
1626:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1627:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1628:src/display.c **** 	  return;
1629:src/display.c **** 	}
1630:src/display.c **** 
1631:src/display.c **** 	set_separator_decimal_modes();
1632:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1633:src/display.c **** 	dn_abs(&a, rgx);
ARM GAS  /tmp/ccPzxiH4.s 			page 50


1634:src/display.c **** 	if (decNumberIsNegative(&x)) {
1635:src/display.c **** 	  if (res != NULL)
1636:src/display.c **** 	    *res++ += '-';
1637:src/display.c **** 	  else
1638:src/display.c **** 	    SET_MANT_SIGN;
1639:src/display.c **** 	  dn_minus(&x, &x);
1640:src/display.c **** 	}
1641:src/display.c **** 
1642:src/display.c **** 	decNumberHR2HMS(&y, &x);
1643:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1644:src/display.c **** 	decNumberRound(&u, &t);
1645:src/display.c **** 
1646:src/display.c **** 	hms_step(&t, &u, &fs);
1647:src/display.c **** 	hms_step(&u, &t, &sec);
1648:src/display.c **** 	hms_step(&t, &u, &min);
1649:src/display.c **** 	hr = dn_to_int(&t);
1650:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1651:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1652:src/display.c **** 
1653:src/display.c **** 	// degrees
1654:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1655:src/display.c **** 	res = set_dig_s(j, '@', res);
1656:src/display.c **** 	j += SEGS_PER_DIGIT;
1657:src/display.c **** 
1658:src/display.c **** 	// minutes
1659:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1660:src/display.c **** 	res = set_dig_s(j, '\'', res);
1661:src/display.c **** 	j += SEGS_PER_DIGIT;
1662:src/display.c **** 
1663:src/display.c **** 	// seconds
1664:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1665:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1666:src/display.c **** 
1667:src/display.c **** 	// Fractional seconds
1668:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1669:src/display.c **** 
1670:src/display.c **** 	// We're now pointing at the exponent's first digit...
1671:src/display.c **** 	res = set_dig_s(j, '"', res);
1672:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1673:src/display.c **** 
1674:src/display.c **** 	// Check for values too big or small
1675:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1676:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1677:src/display.c **** 	} else if (! dn_eq0(&a)) {
1678:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1679:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1680:src/display.c **** 	  }
1681:src/display.c **** 	}
1682:src/display.c ****       }
1683:src/display.c **** 
1684:src/display.c **** 
1685:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1686:src/display.c **** 	decNumber x, w, n, d, t;
1687:src/display.c **** 	char buf[32], *p = buf;
1688:src/display.c **** 	int j;
1689:src/display.c **** 
1690:src/display.c **** 	if (check_special_dn(rgx, res))
ARM GAS  /tmp/ccPzxiH4.s 			page 51


1691:src/display.c **** 	  return 1;
1692:src/display.c **** 	dn_abs(&x, rgx);
1693:src/display.c **** 	if (dn_ge(&x, &const_100000))
1694:src/display.c **** 	  return 0;
1695:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1696:src/display.c **** 	  return 0;
1697:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1698:src/display.c **** 	  if (res != NULL)
1699:src/display.c **** 	    *res++ += '-';
1700:src/display.c **** 	  else
1701:src/display.c **** 	    SET_MANT_SIGN;
1702:src/display.c **** 	}
1703:src/display.c **** 	decNumberFrac(&w, &x);
1704:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1705:src/display.c **** 
1706:src/display.c **** 	dn_divide(&t, &n, &d);
1707:src/display.c **** 	dn_compare(&t, &t, &w);
1708:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1709:src/display.c **** 
1710:src/display.c **** 	if (dn_eq(&n, &d)) {
1711:src/display.c **** 	  dn_inc(&w);
1712:src/display.c **** 	  decNumberZero(&n);
1713:src/display.c **** 	}
1714:src/display.c **** 
1715:src/display.c **** 	if (!UState.improperfrac) {
1716:src/display.c **** 	  if (!dn_eq0(&w)) {
1717:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1718:src/display.c **** 	    *p++ = ' ';
1719:src/display.c **** 	  }
1720:src/display.c **** 	} else {
1721:src/display.c **** 	  dn_multiply(&x, &w, &d);
1722:src/display.c **** 	  dn_add(&n, &n, &x);
1723:src/display.c **** 	}
1724:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1725:src/display.c **** 	*p++ = '/';
1726:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1727:src/display.c **** 	*p = '\0';
1728:src/display.c **** 	if ((p - 12) > buf) {
1729:src/display.c **** 	  p -= 12;
1730:src/display.c **** 	  *p = '<';
1731:src/display.c **** 	} else	p = buf;
1732:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
1734:src/display.c **** 	  j += SEGS_PER_DIGIT;
1735:src/display.c **** 	}
1736:src/display.c **** 
1737:src/display.c **** 	if (dn_eq0(&t))
1738:src/display.c **** 	  p = (char *)S7_fract_EQ;
1739:src/display.c **** 	else if (decNumberIsNegative(&t))
1740:src/display.c **** 	  p = (char *)S7_fract_LT;
1741:src/display.c **** 	else
1742:src/display.c **** 	  p = (char *)S7_fract_GT;
1743:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1744:src/display.c **** 	  res = set_dig_s(j, *p, res);
1745:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1746:src/display.c **** 	}
1747:src/display.c **** 	return 1;
ARM GAS  /tmp/ccPzxiH4.s 			page 52


1748:src/display.c ****       }
1749:src/display.c **** 
1750:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1751:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1752:src/display.c **** 	decNumber c;
1753:src/display.c **** 	int true_exp, x=0;
1754:src/display.c **** 	int min_pos_exp, max_neg_exp;
1755:src/display.c **** 
1756:src/display.c **** 	if ( mode != MODE_STD ) {
1757:src/display.c **** 	  min_pos_exp = 9;
1758:src/display.c **** 	  max_neg_exp = -5;
1759:src/display.c **** 	}
1760:src/display.c **** 	else {
1761:src/display.c **** 	  min_pos_exp = 12;
1762:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1763:src/display.c **** 	}
1764:src/display.c **** 
1765:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1766:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1767:src/display.c **** 
1768:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1769:src/display.c **** 	  x = *dd;
1770:src/display.c **** 	}
1771:src/display.c **** 
1772:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1773:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1774:src/display.c **** 	  *dd += -true_exp;
1775:src/display.c **** 	  return MODE_FIX;
1776:src/display.c **** 	}
1777:src/display.c **** 
1778:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1779:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1780:src/display.c **** 	}
1781:src/display.c **** 	else {
1782:src/display.c **** 	  return MODE_STD;
1783:src/display.c **** 	}
1784:src/display.c ****       }
1785:src/display.c **** #else
1786:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1787:src/display.c **** 	decNumber b, c;
1788:src/display.c **** 
1789:src/display.c **** 	dn_1(&b);
1790:src/display.c **** 	b.exponent -= UState.dispdigs;
1791:src/display.c **** 	dn_abs(&c, z);
1792:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1793:src/display.c **** 	  return MODE_FIX;
1794:src/display.c **** 	return MODE_STD;
1795:src/display.c ****       }
1796:src/display.c **** #endif
1797:src/display.c **** 
1798:src/display.c ****       /* SHOW display mode
1799:src/display.c ****        * in double precision show left or right part
1800:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1801:src/display.c ****        */
1802:src/display.c ****       static void show_x(char *x, int exp) {
1803:src/display.c **** 	const int dbl = is_dblmode();
1804:src/display.c **** 	char *p;
ARM GAS  /tmp/ccPzxiH4.s 			page 53


1805:src/display.c **** 	int i, j;
1806:src/display.c **** 	char *upper_str;
1807:src/display.c **** 	enum separator_modes separator_mode;
1808:src/display.c **** 	char decimal_mark;
1809:src/display.c **** 	char thousands_sep;
1810:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1811:src/display.c **** 	const int grouping = 0;
1812:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1813:src/display.c **** 	const int grouping = !UState.nothousands;
1814:src/display.c **** #else
1815:src/display.c **** 	const int grouping = 1;
1816:src/display.c **** #endif
1817:src/display.c **** 	int negative;
1818:src/display.c **** 
1819:src/display.c **** 	if (x[0] == '-') {
1820:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1821:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1822:src/display.c **** 
1823:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1824:src/display.c **** 	  xcopy(x, small_minus, 4);
1825:src/display.c **** 	  x += 4;
1826:src/display.c **** 	  negative = 4;
1827:src/display.c **** #else
1828:src/display.c **** 	  ++x;
1829:src/display.c **** 	  negative = 1;
1830:src/display.c **** #endif
1831:src/display.c **** 	}
1832:src/display.c **** 	else negative = 0;
1833:src/display.c **** 
1834:src/display.c **** 	p = find_char(x, '\0');
1835:src/display.c **** 	xset(p, '0', 34 - (p - x));
1836:src/display.c **** 
1837:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1838:src/display.c **** 	  separator_mode = SEP_COMMA;
1839:src/display.c **** 	  decimal_mark = '.';
1840:src/display.c **** 	  thousands_sep = ',';
1841:src/display.c **** 	}
1842:src/display.c **** 	else {
1843:src/display.c **** 	  separator_mode = SEP_DOT;
1844:src/display.c **** 	  decimal_mark = ',';
1845:src/display.c **** 	  thousands_sep = '.';
1846:src/display.c **** 	}
1847:src/display.c **** 
1848:src/display.c **** 	if (State2.window) { // right half in double precision mode
1849:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1850:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1851:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1852:src/display.c **** 
1853:src/display.c **** 	  upper_str = x + 3;
1854:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1855:src/display.c **** 	  if (grouping) {
1856:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1857:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1858:src/display.c **** 	    x += 3 + 13 + 7;
1859:src/display.c **** 	  }
1860:src/display.c **** 	  else x += 3 + 13 + 6;
1861:src/display.c **** #else
ARM GAS  /tmp/ccPzxiH4.s 			page 54


1862:src/display.c **** 	  upper_str = x + 13;
1863:src/display.c **** 	  xset(upper_str, '.', 3);
1864:src/display.c **** 	  if (grouping) {
1865:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1866:src/display.c **** 	    upper_str[6] = thousands_sep;
1867:src/display.c **** 	    x += 13 + 3 + 7;
1868:src/display.c **** 	  }
1869:src/display.c **** 	  else x += 13 + 3 + 6;
1870:src/display.c **** #endif
1871:src/display.c **** 	  negative = 0;
1872:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1873:src/display.c **** 	}
1874:src/display.c **** 	else {
1875:src/display.c **** 	  upper_str = x;
1876:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1877:src/display.c **** 	  x[1] = decimal_mark;
1878:src/display.c **** 	  if (grouping) {
1879:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1880:src/display.c **** 	    x[5] = thousands_sep;
1881:src/display.c **** 	    x += 9;
1882:src/display.c **** 	  }
1883:src/display.c **** 	  else x += 8;
1884:src/display.c **** 	  if (dbl) {
1885:src/display.c **** 	    if (exp < 0) {
1886:src/display.c **** 	      x[9] = '-';
1887:src/display.c **** 	      exp = -exp;
1888:src/display.c **** 	    }
1889:src/display.c **** 	    else
1890:src/display.c **** 	      x[9] = ' ';
1891:src/display.c **** 	    j = exp / 1000;
1892:src/display.c **** 	    x[10] = '0' + j;
1893:src/display.c **** 	    exp -= 1000 * j;
1894:src/display.c **** 	  }
1895:src/display.c **** 	  else {
1896:src/display.c **** 	    x[9] = '\0';
1897:src/display.c **** 	    x[10] = '\0';
1898:src/display.c **** 	  }
1899:src/display.c **** 	  xcopy(x + 1, x, 11);
1900:src/display.c **** 	  *x = 0;
1901:src/display.c **** 	  set_exp(exp, 1, CNULL);
1902:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1903:src/display.c **** 	}
1904:src/display.c **** 	if (grouping) {
1905:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1906:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1907:src/display.c **** 	  }
1908:src/display.c **** 	}
1909:src/display.c **** 
1910:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1911:src/display.c **** 	  set_dig(j, x[i]);
1912:src/display.c **** 
1913:src/display.c **** 	*x = '\0';
1914:src/display.c **** 	set_status(upper_str - negative);
1915:src/display.c ****       }
1916:src/display.c **** 
1917:src/display.c **** 
1918:src/display.c ****       /* Display the X register in the numeric portion of the display.
ARM GAS  /tmp/ccPzxiH4.s 			page 55


1919:src/display.c ****        * We have to account for the various display modes and numbers of
1920:src/display.c ****        * digits.
1921:src/display.c ****        */
1922:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1923:src/display.c **** 	decNumber z;
1924:src/display.c **** 	int digits = DISPLAY_DIGITS;
1925:src/display.c **** 
1926:src/display.c **** 	if (dbl)
1927:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1928:src/display.c **** 	else
1929:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1930:src/display.c **** 	set_x_dn(&z, res, &digits);
1931:src/display.c ****       }
1932:src/display.c **** 
1933:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1934:src/display.c **** 	char x[50], *obp = x;
1935:src/display.c **** 	int odig = 0;
1936:src/display.c **** 	int show_exp = 0;
1937:src/display.c **** 	int j;
1938:src/display.c **** 	char mantissa[64];
1939:src/display.c **** 	int exp = 0;
1940:src/display.c **** 	char *p = mantissa;
1941:src/display.c **** 	char *r;
1942:src/display.c **** 	const char *q;
1943:src/display.c **** 	int count, i;
1944:src/display.c **** 	int extra_digits = 0;
1945:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1946:src/display.c **** 	int dd;
1947:src/display.c **** 	int dispdigs;
1948:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1949:src/display.c **** #else
1950:src/display.c **** 	int dd = UState.dispdigs;
1951:src/display.c **** 	int mode = UState.dispmode;
1952:src/display.c **** #endif
1953:src/display.c **** 	int c;
1954:src/display.c **** 	int negative = 0;
1955:src/display.c **** 	int trimzeros = 0;
1956:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1957:src/display.c **** 	const int show_large_exponent = 0;
1958:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1959:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1960:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1961:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1962:src/display.c **** #else
1963:src/display.c **** 	const int show_large_exponent = 1;
1964:src/display.c **** #endif
1965:src/display.c **** 
1966:src/display.c **** 	set_separator_decimal_modes();
1967:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1968:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1969:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1970:src/display.c **** 	    if (State2.hms) {
1971:src/display.c **** 	      set_x_hms(z, res);
1972:src/display.c **** 	      return;
1973:src/display.c **** 	    }
1974:src/display.c **** 	    else if (UState.fract) {
1975:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/ccPzxiH4.s 			page 56


1976:src/display.c **** 		return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	  }
1979:src/display.c **** 	}		
1980:src/display.c **** #else
1981:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1982:src/display.c **** 	  if (State2.hms) {
1983:src/display.c **** 	    set_x_hms(z, res);
1984:src/display.c **** 	    State2.hms = 0;
1985:src/display.c **** 	    return;
1986:src/display.c **** 	  } else if (UState.fract) {
1987:src/display.c **** 	    if (set_x_fract(z, res))
1988:src/display.c **** 	      return;
1989:src/display.c **** 	  }
1990:src/display.c **** 	}
1991:src/display.c **** #endif
1992:src/display.c **** 
1993:src/display.c **** 	if (check_special_dn(z, res))
1994:src/display.c **** 	  return;
1995:src/display.c **** 
1996:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1997:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1998:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1999:src/display.c **** 	  z->exponent = 0;
2000:src/display.c **** 	}
2001:src/display.c **** 
2002:src/display.c **** 	xset(x, '\0', sizeof(x));
2003:src/display.c **** 
2004:src/display.c **** 	if (dn_eq0(z)) {
2005:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2006:src/display.c **** 	    x[0] = '-';
2007:src/display.c **** 	    x[1] = '0';
2008:src/display.c **** 	  } else
2009:src/display.c **** 	    x[0] = '0';
2010:src/display.c **** 	} else
2011:src/display.c **** 	  decNumberToString(z, x);
2012:src/display.c **** 
2013:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2014:src/display.c **** 	  show_x(x, exp);
2015:src/display.c **** 	  return;
2016:src/display.c **** 	}
2017:src/display.c **** 
2018:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2019:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2020:src/display.c **** 	  //  ALL mode: fill the display
2021:src/display.c **** 	  dd = *display_digits - 1;
2022:src/display.c **** 	else
2023:src/display.c **** 	  dd = dispdigs;
2024:src/display.c **** 
2025:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2026:src/display.c **** 	  int orig_mode = mode;
2027:src/display.c **** 
2028:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2029:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2030:src/display.c **** 	    // allow zeros to be trimmed
2031:src/display.c **** 	    trimzeros = 1;
2032:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/ccPzxiH4.s 			page 57


2033:src/display.c **** 	    dd = *display_digits - 1;
2034:src/display.c ****  	}
2035:src/display.c **** #else
2036:src/display.c **** 	if (mode == MODE_STD) {
2037:src/display.c **** 	  mode = std_round_fix(z);
2038:src/display.c **** 	  trimzeros = 1;
2039:src/display.c **** 	  dd = *display_digits - 1;
2040:src/display.c **** 	} else if (dd >= *display_digits)
2041:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2042:src/display.c **** 	  dd = *display_digits - 1;
2043:src/display.c **** #endif
2044:src/display.c **** 
2045:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2046:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2047:src/display.c **** 
2048:src/display.c **** 	q = find_char(x, 'E');
2049:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2050:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2051:src/display.c **** 	if (q == NULL) exp = 0;
2052:src/display.c **** 	else {
2053:src/display.c **** 	  exp = s_to_i(q+1);
2054:src/display.c **** 	  if (*q == 'D') exp = -exp;
2055:src/display.c **** 	}
2056:src/display.c **** #else
2057:src/display.c **** 	if (q == NULL) exp = 0;
2058:src/display.c **** 	else exp = s_to_i(q+1);
2059:src/display.c **** #endif
2060:src/display.c **** 
2061:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2062:src/display.c **** 	for (q=x; *q == ' '; q++);
2063:src/display.c **** 	if (!res) {
2064:src/display.c **** 	  CLR_EXP_SIGN;
2065:src/display.c **** 	  CLR_MANT_SIGN;
2066:src/display.c **** 	}
2067:src/display.c **** 	if (*q == '-') {
2068:src/display.c **** 	  negative = 1;
2069:src/display.c **** 	  q++;
2070:src/display.c **** 	} else if (*q == '+')
2071:src/display.c **** 	  q++;
2072:src/display.c **** 	for (; *q == '0'; q++);
2073:src/display.c **** 	if (*q == '.') {
2074:src/display.c **** 	  do
2075:src/display.c **** 	    exp--;
2076:src/display.c **** 	  while (*++q == '0');
2077:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2078:src/display.c **** 	    *p++ = *q++;
2079:src/display.c **** 	} else {
2080:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2081:src/display.c **** 	    *p++ = *q++;
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2083:src/display.c **** 	    *p++ = *q++;
2084:src/display.c **** 	    exp++;
2085:src/display.c **** 	  }
2086:src/display.c **** 	  if (*q == '.') {
2087:src/display.c **** 	    q++;
2088:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2089:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/ccPzxiH4.s 			page 58


2090:src/display.c **** 	  }
2091:src/display.c **** 	}
2092:src/display.c **** 
2093:src/display.c **** 	if (mode == MODE_FIX) {
2094:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2095:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2096:src/display.c **** 	  else {
2097:src/display.c **** 	    extra_digits = exp;
2098:src/display.c **** 	    /* We might have push the fixed decimals off the
2099:src/display.c **** 	     * screen so adjust if so.
2100:src/display.c **** 	     */
2101:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2102:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2103:src/display.c **** 	  }
2104:src/display.c **** 	}
2105:src/display.c **** 
2106:src/display.c **** 	// Round the mantissa to the number of digits desired
2107:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2108:src/display.c **** 	if (*p >= '5') {	// Round up
2109:src/display.c **** 	  *p = '0';
2110:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2111:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2112:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2113:src/display.c **** 	    mantissa[0] = '1';
2114:src/display.c **** 	    exp++;
2115:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2116:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2117:src/display.c **** 	      extra_digits = 0;
2118:src/display.c **** 	    }
2119:src/display.c **** 	  } else {
2120:src/display.c **** 	    while (*--p == '9')
2121:src/display.c **** 	      *p = '0';
2122:src/display.c **** 	    (*p)++;
2123:src/display.c **** 	  }
2124:src/display.c **** 	}
2125:src/display.c **** 
2126:src/display.c **** 	// Zap what is left
2127:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2128:src/display.c **** 
2129:src/display.c **** 	p = mantissa;
2130:src/display.c **** 	switch (mode) {
2131:src/display.c **** 	default:
2132:src/display.c **** 	case MODE_STD:   
2133:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2134:src/display.c **** 	  if (count != *display_digits)
2135:src/display.c **** 	    count++;
2136:src/display.c **** 	  // Too big or too small to fit on display
2137:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2138:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2139:src/display.c **** 	    case -1:
2140:src/display.c **** 	    case 2:
2141:src/display.c **** 	      *obp++ = *p++;
2142:src/display.c **** 	      odig++;
2143:src/display.c **** 	      dd--;
2144:src/display.c **** 	      exp--;
2145:src/display.c **** 	    case -2:
2146:src/display.c **** 	    case 1:
ARM GAS  /tmp/ccPzxiH4.s 			page 59


2147:src/display.c **** 	      *obp++ = *p++;
2148:src/display.c **** 	      odig++;
2149:src/display.c **** 	      dd--;
2150:src/display.c **** 	      exp--;
2151:src/display.c **** 	    case 0:
2152:src/display.c **** 	      ;
2153:src/display.c **** 	    };
2154:src/display.c **** 	    *obp++ = *p++;
2155:src/display.c **** 	    odig++;
2156:src/display.c **** 	    *obp++ = '.';
2157:src/display.c **** 	    for (i=1; i<count; i++) {
2158:src/display.c **** 	      *obp++ = *p++;
2159:src/display.c **** 	      odig++;
2160:src/display.c **** 	    }
2161:src/display.c **** 	    show_exp = 1;
2162:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2163:src/display.c **** 	    for(i=0; i<=exp; i++) {
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2165:src/display.c **** 		*obp++ = ',';
2166:src/display.c **** 	      *obp++ = *p++;
2167:src/display.c **** 	      odig++;
2168:src/display.c **** 	    }
2169:src/display.c **** 	    *obp++ = '.';
2170:src/display.c **** 	    if (count > (exp + 1)) {
2171:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2172:src/display.c **** 		*obp++ = *p++;
2173:src/display.c **** 		odig++;
2174:src/display.c **** 	      }
2175:src/display.c **** 	    }
2176:src/display.c **** 	  } else {		// All digits to right of decimal point
2177:src/display.c **** 	    *obp++ = '0';
2178:src/display.c **** 	    odig++;
2179:src/display.c **** 	    *obp++ = '.';
2180:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2181:src/display.c **** 	      *obp++ = '0';
2182:src/display.c **** 	      odig++;
2183:src/display.c **** 	    }
2184:src/display.c **** 	    for (i=0; i<count; i++) {
2185:src/display.c **** 	      *obp++ = *p++;
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	  }
2189:src/display.c **** 	  break;
2190:src/display.c **** 
2191:src/display.c **** 	case MODE_FIX:
2192:src/display.c **** 	  j = 0;
2193:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2194:src/display.c **** 	    for (i=0; i<=exp; i++) {
2195:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2196:src/display.c **** 		*obp++ = ',';
2197:src/display.c **** 	      *obp++ = *p++;
2198:src/display.c **** 	      odig++;
2199:src/display.c **** 	    }
2200:src/display.c **** 	    *obp++ = '.';
2201:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2202:src/display.c **** 	      *obp++ = *p++;
2203:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccPzxiH4.s 			page 60


2204:src/display.c **** 	    }
2205:src/display.c **** 	  } else {		// All digits to right of decimal point
2206:src/display.c **** 	    *obp++ = '0';
2207:src/display.c **** 	    odig++;
2208:src/display.c **** 	    *obp++ = '.';
2209:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2210:src/display.c **** 	      *obp++ = '0';
2211:src/display.c **** 	      odig++;
2212:src/display.c **** 	      dd--;
2213:src/display.c **** 	    }
2214:src/display.c **** 	    while (dd-- > 0) {
2215:src/display.c **** 	      *obp++ = *p++;
2216:src/display.c **** 	      odig++;
2217:src/display.c **** 	    }
2218:src/display.c **** 	  }
2219:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2220:src/display.c **** 	  if (trimzeros)
2221:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2222:src/display.c **** 	      obp--;
2223:src/display.c **** 	      odig--;
2224:src/display.c **** 	    }
2225:src/display.c **** #endif			
2226:src/display.c **** 	  break;
2227:src/display.c **** 
2228:src/display.c **** 	case MODE_ENG:
2229:src/display.c **** 	  switch (exp % 3) {
2230:src/display.c **** 	  case -1:
2231:src/display.c **** 	  case 2:
2232:src/display.c **** 	    *obp++ = *p++;
2233:src/display.c **** 	    odig++;
2234:src/display.c **** 	    dd--;
2235:src/display.c **** 	    exp--;
2236:src/display.c **** 	  case -2:
2237:src/display.c **** 	  case 1:
2238:src/display.c **** 	    *obp++ = *p++;
2239:src/display.c **** 	    odig++;
2240:src/display.c **** 	    dd--;
2241:src/display.c **** 	    exp--;
2242:src/display.c **** 	  case 0:
2243:src/display.c **** 	    ;
2244:src/display.c **** 	  };
2245:src/display.c **** 	  // Falling through
2246:src/display.c **** 
2247:src/display.c **** 	case MODE_SCI:
2248:src/display.c **** 	  *obp++ = *p++;
2249:src/display.c **** 	  odig++;
2250:src/display.c **** 	  *obp++ = '.';
2251:src/display.c **** 	  dd--;
2252:src/display.c **** 	  while (dd-- >= 0) {
2253:src/display.c **** 	    *obp++ = *p++;
2254:src/display.c **** 	    odig++;
2255:src/display.c **** 	  }
2256:src/display.c **** 	  show_exp = 1;
2257:src/display.c **** 	}
2258:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2259:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2260:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
ARM GAS  /tmp/ccPzxiH4.s 			page 61


2261:src/display.c **** 	    obp--;
2262:src/display.c **** 	    odig--;
2263:src/display.c **** 	  }
2264:src/display.c **** #endif	
2265:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2266:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2267:src/display.c **** 	  set_x_dn(z, res, display_digits);
2268:src/display.c **** 	  return;
2269:src/display.c **** 	}
2270:src/display.c **** 	/* Finally, send the output to the display */
2271:src/display.c **** 	*obp = '\0';
2272:src/display.c **** 	if (odig > *display_digits)
2273:src/display.c **** 	  odig = *display_digits;
2274:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2275:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2276:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2277:src/display.c **** 	if (negative) {
2278:src/display.c **** 	  if (res) *res++ = '-';
2279:src/display.c **** 	  else {
2280:src/display.c **** 	    if (j == 0)
2281:src/display.c **** 	      SET_MANT_SIGN;
2282:src/display.c **** 	    else
2283:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2284:src/display.c **** 	  }
2285:src/display.c **** 	}
2286:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2287:src/display.c **** 	  if (c == '.') {
2288:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2289:src/display.c **** 	  } else if (c == ',') {
2290:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2291:src/display.c **** 	  } else {
2292:src/display.c **** 	    res = set_dig_s(j, c, res);
2293:src/display.c **** 	    j += SEGS_PER_DIGIT;
2294:src/display.c **** 	  }
2295:src/display.c **** 	}
2296:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2297:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2298:src/display.c **** 	  if ( !res ) {
2299:src/display.c **** 	    set_exp(exp, 4, res);
2300:src/display.c **** 	  }
2301:src/display.c **** 	  else {
2302:src/display.c **** 	    set_exp(exp, 0, res);
2303:src/display.c **** 	  }
2304:src/display.c **** 	}
2305:src/display.c **** #else
2306:src/display.c **** 	if (show_exp)
2307:src/display.c **** 	  set_exp(exp, 0, res);
2308:src/display.c **** #endif
2309:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2310:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2311:src/display.c **** 	*display_digits = odig;
2312:src/display.c ****       }
2313:src/display.c **** 
2314:src/display.c **** #if defined(QTGUI) || defined(IOS)
2315:src/display.c ****       void format_display(char *buf) {
2316:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2317:src/display.c **** 	  {
ARM GAS  /tmp/ccPzxiH4.s 			page 62


2318:src/display.c **** 	    const char *p = get_cmdline();
2319:src/display.c **** 	    if (p == NULL) {
2320:src/display.c **** 	      format_reg(regX_idx, buf);
2321:src/display.c **** 	    } else {
2322:src/display.c **** 	      scopy(buf, p);
2323:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2324:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2325:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2326:src/display.c **** 		buf[CmdLineEex] = 'E';
2327:src/display.c **** 		buf[CmdLineEex+1] = '-';
2328:src/display.c **** 	      }
2329:src/display.c **** #  endif
2330:src/display.c **** 	    }
2331:src/display.c **** 	  }
2332:src/display.c **** 	else {
2333:src/display.c **** 	  buf[0]=0;
2334:src/display.c **** 	}
2335:src/display.c ****       }
2336:src/display.c **** #endif
2337:src/display.c **** 
2338:src/display.c ****       void format_reg(int index, char *buf) {
2339:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2340:src/display.c **** 
2341:src/display.c **** 	if (is_intmode())
2342:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2343:src/display.c **** #ifndef HP16C_MODE_CHANGE
2344:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2345:src/display.c **** 	  decNumber x;
2346:src/display.c **** 	  int s;
2347:src/display.c **** 	  unsigned long long int v;
2348:src/display.c **** 
2349:src/display.c **** 	  getRegister(&x, index);
2350:src/display.c **** 	  v = dn_to_ull(&x, &s);
2351:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2352:src/display.c **** 	}
2353:src/display.c **** #endif
2354:src/display.c **** 	else
2355:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2356:src/display.c ****       }
2357:src/display.c **** 
2358:src/display.c ****       /* Display the status screen */
2359:src/display.c ****       static void show_status(void) {
2360:src/display.c **** 	int i, n;
2361:src/display.c **** 	int j = SEGS_EXP_BASE;
2362:src/display.c **** 	const int status = State2.status - 3;
2363:src/display.c **** 	char buf[16], *p = buf;
2364:src/display.c **** 	unsigned int pc;
2365:src/display.c **** 
2366:src/display.c **** 	if (status == -2) {
2367:src/display.c **** 	  set_status("Free:");
2368:src/display.c **** 	  p = num_arg(buf, free_mem());
2369:src/display.c **** 	  p = scopy(p, " , FL. ");
2370:src/display.c **** 	  p = num_arg(p, free_flash());
2371:src/display.c **** 	  *p = '\0';
2372:src/display.c **** 	  set_digits_string(buf, 0);
2373:src/display.c **** 	}
2374:src/display.c **** 	else if (status == -1) {
ARM GAS  /tmp/ccPzxiH4.s 			page 63


2375:src/display.c **** 	  /* Top line */
2376:src/display.c **** 	  p = scopy(buf, "Regs:");
2377:src/display.c **** 	  if (SizeStatRegs)
2378:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2379:src/display.c **** 	  *p = '\0';
2380:src/display.c **** 	  set_status(buf);
2381:src/display.c **** 
2382:src/display.c **** 	  /* Bottom line */
2383:src/display.c **** 	  p = num_arg(buf, global_regs());
2384:src/display.c **** 	  if (LocalRegs < 0) {
2385:src/display.c **** 	    p = scopy(p, " , Loc. ");
2386:src/display.c **** 	    p = num_arg(p, local_regs());
2387:src/display.c **** 	  }
2388:src/display.c **** 	  *p = '\0';
2389:src/display.c **** 	  set_digits_string(buf, 0);
2390:src/display.c **** 	} else {
2391:src/display.c **** 	  int base;
2392:src/display.c **** 	  int end;
2393:src/display.c **** 	  int group = 10;
2394:src/display.c **** 	  int start = 0;
2395:src/display.c **** 		
2396:src/display.c **** 	  if (status <= 9) {
2397:src/display.c **** 	    base = 10 * status;
2398:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2399:src/display.c **** 	    p = scopy(buf, "FL ");
2400:src/display.c **** 	    p = num_arg_0(p, base, 2);
2401:src/display.c **** 	    *p++ = '-';
2402:src/display.c **** 	    p = num_arg_0(p, end, 2);
2403:src/display.c **** 	    *p = '\0';
2404:src/display.c **** 	    set_status(buf);
2405:src/display.c **** 	  }
2406:src/display.c **** 	  else if (status == 10) {
2407:src/display.c **** 	    base = regX_idx;
2408:src/display.c **** 	    end = regK_idx;
2409:src/display.c **** 	    start = 3;
2410:src/display.c **** 	    group = 4;
2411:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2412:src/display.c **** 	  }
2413:src/display.c **** 	  else { // status == 11
2414:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2415:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2416:src/display.c **** 	    set_status("FL.00-.15");
2417:src/display.c **** 	  }
2418:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2419:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2420:src/display.c **** 	  j += SEGS_PER_DIGIT;
2421:src/display.c **** 	  for (i = start; i < group + start; i++) {
2422:src/display.c **** 	    int k = i + base - start;
2423:src/display.c **** 	    int l = get_user_flag(k);
2424:src/display.c **** 	    k += group;
2425:src/display.c **** 	    if (end >= k) {
2426:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2427:src/display.c **** 	      k += group;
2428:src/display.c **** 	      if (end >= k)
2429:src/display.c **** 		l |= (get_user_flag(k) << 2);
2430:src/display.c **** 	    }
2431:src/display.c **** 	    set_dig(j, l);
ARM GAS  /tmp/ccPzxiH4.s 			page 64


2432:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2433:src/display.c **** 	    j += SEGS_PER_DIGIT;
2434:src/display.c **** 	    if (i == 4) {
2435:src/display.c **** 	      set_dig(j, 8);
2436:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	      j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    }
2439:src/display.c **** 	  }
2440:src/display.c **** 	}
2441:src/display.c **** 
2442:src/display.c **** 	j = SEGS_EXP_BASE;
2443:src/display.c **** 	pc = state_pc();
2444:src/display.c **** 	if (isXROM(pc))
2445:src/display.c **** 	  pc = 1;
2446:src/display.c **** 	for (n=i=0; i<4; i++) {
2447:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2448:src/display.c **** 	    if (++n == 4) {
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2451:src/display.c **** 	    } else {
2452:src/display.c **** 	      set_dig(j, 'A'+i);
2453:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2454:src/display.c **** 	    }
2455:src/display.c **** 	  }
2456:src/display.c **** 	}
2457:src/display.c ****       }
2458:src/display.c **** 
2459:src/display.c **** 
2460:src/display.c ****       /* Display the list of alpha labels */
2461:src/display.c ****       static void show_label(void) {
2462:src/display.c **** 	char buf[16];
2463:src/display.c **** 	unsigned short int pc = State2.digval;
2464:src/display.c **** 	unsigned int op = getprog(pc);
2465:src/display.c **** 	int n = nLIB(pc);
2466:src/display.c **** 	unsigned short int lblpc;
2467:src/display.c **** 
2468:src/display.c **** 	set_status(prt((opcode)op, buf));
2469:src/display.c **** 	set_digits_string(libname[n], 0);
2470:src/display.c **** 
2471:src/display.c **** 	if (op & OP_DBL) {
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2473:src/display.c **** 	  if (lblpc != pc) {
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2475:src/display.c **** 	    n = nLIB(lblpc);
2476:src/display.c **** 	    if (n == REGION_RAM)
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2478:src/display.c **** 	    else {
2479:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2480:src/display.c **** 	    }
2481:src/display.c **** 	  }
2482:src/display.c **** 	}
2483:src/display.c ****       }
2484:src/display.c **** 
2485:src/display.c ****       /* Display a list of register contents */
2486:src/display.c ****       static void show_registers(void) {
2487:src/display.c **** 	char buf[16], *bp;
2488:src/display.c **** 	int n = State2.digval;
ARM GAS  /tmp/ccPzxiH4.s 			page 65


2489:src/display.c **** 	
2490:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2491:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2492:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2493:src/display.c **** 	  n;
2494:src/display.c **** #else
2495:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2496:src/display.c **** 	  n;
2497:src/display.c **** #endif
2498:src/display.c **** 
2499:src/display.c **** 	if (State2.disp_as_alpha) {
2500:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2501:src/display.c **** 	}
2502:src/display.c **** 	else {
2503:src/display.c **** 	  xset(buf, '\0', 16);
2504:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2505:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2506:src/display.c **** #else
2507:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2508:src/display.c **** #endif
2509:src/display.c **** 	  if (State2.local) {
2510:src/display.c **** 	    *bp++ = '.';
2511:src/display.c **** 	    if (n >= 100) {
2512:src/display.c **** 	      *bp++ = '1';
2513:src/display.c **** 	      n -= 100;
2514:src/display.c **** 	    }
2515:src/display.c **** 	  }
2516:src/display.c **** 	  if (n < 100)
2517:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2518:src/display.c **** 	  else
2519:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2520:src/display.c **** 	  set_status(buf);
2521:src/display.c **** 	}
2522:src/display.c **** 	format_reg(reg, CNULL);
2523:src/display.c ****       }
2524:src/display.c **** 
2525:src/display.c **** 
2526:src/display.c ****       static void set_annunciators(void)
2527:src/display.c ****       {
 940              		.loc 1 2527 7 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
2528:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 944              		.loc 1 2528 2 view .LVU289
2527:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 945              		.loc 1 2527 7 is_stmt 0 view .LVU290
 946 0000 70B5     		push	{r4, r5, r6, lr}
 947              		.cfi_def_cfa_offset 16
 948              		.cfi_offset 4, -16
 949              		.cfi_offset 5, -12
 950              		.cfi_offset 6, -8
 951              		.cfi_offset 14, -4
 952              		.loc 1 2528 29 view .LVU291
 953 0002 FFF7FEFF 		bl	get_trig_mode
 954              	.LVL95:
2529:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 66


2530:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2531:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2532:src/display.c **** 	 * browsing constants.
2533:src/display.c **** 	 */
2534:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2535:src/display.c **** 	//	dot(BEG, UState.stack_depth && ! Running);
2536:src/display.c **** 	draw_dot(BEG);
2537:src/display.c **** #else
2538:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2539:src/display.c **** #endif
2540:src/display.c **** #ifdef INCLUDE_C_LOCK
2541:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
 955              		.loc 1 2541 14 view .LVU292
 956 0006 2E4E     		ldr	r6, .L122
2528:src/display.c **** 
 957              		.loc 1 2528 29 view .LVU293
 958 0008 0446     		mov	r4, r0
2536:src/display.c **** #else
 959              		.loc 1 2536 2 view .LVU294
 960 000a 8820     		movs	r0, #136
 961              	.LVL96:
2536:src/display.c **** #else
 962              		.loc 1 2536 2 is_stmt 1 view .LVU295
 963 000c FFF7FEFF 		bl	draw_dot
 964              	.LVL97:
 965              		.loc 1 2541 2 view .LVU296
 966              		.loc 1 2541 14 is_stmt 0 view .LVU297
 967 0010 3368     		ldr	r3, [r6]
 968 0012 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 969              		.loc 1 2541 2 view .LVU298
 970 0016 5507     		lsls	r5, r2, #29
 971              	.LBB185:
 972              	.LBB186:
 284:src/display.c ****   else	clr_dot(n);
 973              		.loc 1 284 11 view .LVU299
 974 0018 4FF08400 		mov	r0, #132
 975              	.LBE186:
 976              	.LBE185:
 977              		.loc 1 2541 2 view .LVU300
 978 001c 03D5     		bpl	.L96
 979              		.loc 1 2541 14 discriminator 1 view .LVU301
 980 001e 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 981              		.loc 1 2541 2 discriminator 1 view .LVU302
 982 0022 5907     		lsls	r1, r3, #29
 983 0024 48D4     		bmi	.L119
 984              	.L96:
 985              	.LVL98:
 986              	.LBB189:
 987              	.LBI185:
 283:src/display.c ****   if (on)	set_dot(n);
 988              		.loc 1 283 6 is_stmt 1 view .LVU303
 989              	.LBB187:
 284:src/display.c ****   else	clr_dot(n);
 990              		.loc 1 284 3 view .LVU304
 285:src/display.c **** }
 991              		.loc 1 285 8 view .LVU305
 992 0026 FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccPzxiH4.s 			page 67


 993              	.LVL99:
 994              	.L97:
 285:src/display.c **** }
 995              		.loc 1 285 8 is_stmt 0 view .LVU306
 996              	.LBE187:
 997              	.LBE189:
2542:src/display.c **** #endif
2543:src/display.c **** 
2544:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
 998              		.loc 1 2544 2 is_stmt 1 view .LVU307
 999              		.loc 1 2544 19 is_stmt 0 view .LVU308
 1000 002a 264D     		ldr	r5, .L122+4
 1001              		.loc 1 2544 2 view .LVU309
 1002 002c AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 1003              	.LBB190:
 1004              	.LBB191:
 284:src/display.c ****   else	clr_dot(n);
 1005              		.loc 1 284 11 view .LVU310
 1006 002e 8620     		movs	r0, #134
 1007              	.LBE191:
 1008              	.LBE190:
 1009              		.loc 1 2544 2 view .LVU311
 1010 0030 23B9     		cbnz	r3, .L98
 1011              		.loc 1 2544 47 discriminator 2 view .LVU312
 1012 0032 6A69     		ldr	r2, [r5, #20]
 1013 0034 244B     		ldr	r3, .L122+8
 1014 0036 1340     		ands	r3, r3, r2
 1015              		.loc 1 2544 2 discriminator 2 view .LVU313
 1016 0038 002B     		cmp	r3, #0
 1017 003a 3AD0     		beq	.L120
 1018              	.L98:
 1019              	.LBB194:
 1020              	.LBB192:
 284:src/display.c ****   else	clr_dot(n);
 1021              		.loc 1 284 11 is_stmt 1 view .LVU314
 1022 003c FFF7FEFF 		bl	set_dot
 1023              	.LVL100:
 1024              	.L99:
 1025              	.LBE192:
 1026              	.LBE194:
2545:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1027              		.loc 1 2545 2 view .LVU315
 1028              		.loc 1 2545 31 is_stmt 0 view .LVU316
 1029 0040 224A     		ldr	r2, .L122+12
 1030 0042 6B69     		ldr	r3, [r5, #20]
 1031              		.loc 1 2545 2 view .LVU317
 1032 0044 1A42     		tst	r2, r3
 1033              	.LBB195:
 1034              	.LBB196:
 284:src/display.c ****   else	clr_dot(n);
 1035              		.loc 1 284 11 view .LVU318
 1036 0046 4FF08500 		mov	r0, #133
 1037              	.LBE196:
 1038              	.LBE195:
 1039              		.loc 1 2545 2 view .LVU319
 1040 004a 02D0     		beq	.L100
 1041              		.loc 1 2545 48 discriminator 1 view .LVU320
ARM GAS  /tmp/ccPzxiH4.s 			page 68


 1042 004c AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 1043              		.loc 1 2545 2 discriminator 1 view .LVU321
 1044 004e DA06     		lsls	r2, r3, #27
 1045 0050 2CD4     		bmi	.L101
 1046              	.L100:
 1047              	.LVL101:
 1048              	.LBB199:
 1049              	.LBI195:
 283:src/display.c ****   if (on)	set_dot(n);
 1050              		.loc 1 283 6 is_stmt 1 view .LVU322
 1051              	.LBB197:
 284:src/display.c ****   else	clr_dot(n);
 1052              		.loc 1 284 3 view .LVU323
 285:src/display.c **** }
 1053              		.loc 1 285 8 view .LVU324
 1054 0052 FFF7FEFF 		bl	clr_dot
 1055              	.LVL102:
 1056              	.L102:
 285:src/display.c **** }
 1057              		.loc 1 285 8 is_stmt 0 view .LVU325
 1058              	.LBE197:
 1059              	.LBE199:
2546:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1060              		.loc 1 2546 2 is_stmt 1 view .LVU326
 1061 0056 6820     		movs	r0, #104
 1062 0058 FFF7FEFF 		bl	get_user_flag
 1063              	.LVL103:
 1064              	.LBB200:
 1065              	.LBI200:
 283:src/display.c ****   if (on)	set_dot(n);
 1066              		.loc 1 283 6 view .LVU327
 1067              	.LBB201:
 284:src/display.c ****   else	clr_dot(n);
 1068              		.loc 1 284 3 view .LVU328
 284:src/display.c ****   else	clr_dot(n);
 1069              		.loc 1 284 6 is_stmt 0 view .LVU329
 1070 005c 10B3     		cbz	r0, .L103
 284:src/display.c ****   else	clr_dot(n);
 1071              		.loc 1 284 11 is_stmt 1 view .LVU330
 1072 005e 8320     		movs	r0, #131
 1073              	.LVL104:
 284:src/display.c ****   else	clr_dot(n);
 1074              		.loc 1 284 11 is_stmt 0 view .LVU331
 1075 0060 FFF7FEFF 		bl	set_dot
 1076              	.LVL105:
 1077              	.L104:
 284:src/display.c ****   else	clr_dot(n);
 1078              		.loc 1 284 11 view .LVU332
 1079              	.LBE201:
 1080              	.LBE200:
2547:src/display.c **** 	//	set_IO_annunciator();
2548:src/display.c **** 
2549:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2550:src/display.c **** 	 */
2551:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
 1081              		.loc 1 2551 2 is_stmt 1 view .LVU333
 1082              		.loc 1 2551 11 is_stmt 0 view .LVU334
ARM GAS  /tmp/ccPzxiH4.s 			page 69


 1083 0064 3368     		ldr	r3, [r6]
 1084 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 1085 006a 03F00103 		and	r3, r3, #1
 1086              		.loc 1 2551 2 view .LVU335
 1087 006e 2343     		orrs	r3, r3, r4
 1088 0070 13F0FF0F 		tst	r3, #255
 1089              	.LBB203:
 1090              	.LBB204:
 284:src/display.c ****   else	clr_dot(n);
 1091              		.loc 1 284 11 view .LVU336
 1092 0074 4FF08C00 		mov	r0, #140
 1093              	.LBE204:
 1094              	.LBE203:
 1095              		.loc 1 2551 2 view .LVU337
 1096 0078 06D1     		bne	.L121
 1097              	.LVL106:
 1098              	.LBB207:
 1099              	.LBI203:
 283:src/display.c ****   if (on)	set_dot(n);
 1100              		.loc 1 283 6 is_stmt 1 view .LVU338
 1101              	.LBB205:
 284:src/display.c ****   else	clr_dot(n);
 1102              		.loc 1 284 3 view .LVU339
 284:src/display.c ****   else	clr_dot(n);
 1103              		.loc 1 284 11 view .LVU340
 1104 007a FFF7FEFF 		bl	set_dot
 1105              	.LVL107:
 284:src/display.c ****   else	clr_dot(n);
 1106              		.loc 1 284 11 is_stmt 0 view .LVU341
 1107              	.LBE205:
 1108              	.LBE207:
2552:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1109              		.loc 1 2552 2 is_stmt 1 view .LVU342
 1110              	.L107:
 1111              	.LBB208:
 1112              	.LBI208:
 283:src/display.c ****   if (on)	set_dot(n);
 1113              		.loc 1 283 6 view .LVU343
 1114              	.LBB209:
 284:src/display.c ****   else	clr_dot(n);
 1115              		.loc 1 284 3 view .LVU344
 285:src/display.c **** }
 1116              		.loc 1 285 8 view .LVU345
 1117              	.LBE209:
 1118              	.LBE208:
2553:src/display.c ****       }
 1119              		.loc 1 2553 7 is_stmt 0 view .LVU346
 1120 007e BDE87040 		pop	{r4, r5, r6, lr}
 1121              		.cfi_remember_state
 1122              		.cfi_restore 14
 1123              		.cfi_restore 6
 1124              		.cfi_restore 5
 1125              		.cfi_restore 4
 1126              		.cfi_def_cfa_offset 0
 1127              	.LVL108:
 1128              	.LBB213:
 1129              	.LBB210:
ARM GAS  /tmp/ccPzxiH4.s 			page 70


 285:src/display.c **** }
 1130              		.loc 1 285 8 view .LVU347
 1131 0082 8B20     		movs	r0, #139
 1132 0084 FFF7FEBF 		b	clr_dot
 1133              	.LVL109:
 1134              	.L121:
 1135              		.cfi_restore_state
 285:src/display.c **** }
 1136              		.loc 1 285 8 view .LVU348
 1137              	.LBE210:
 1138              	.LBE213:
 1139              	.LBB214:
 283:src/display.c ****   if (on)	set_dot(n);
 1140              		.loc 1 283 6 is_stmt 1 view .LVU349
 1141              	.LBB206:
 284:src/display.c ****   else	clr_dot(n);
 1142              		.loc 1 284 3 view .LVU350
 285:src/display.c **** }
 1143              		.loc 1 285 8 view .LVU351
 1144 0088 FFF7FEFF 		bl	clr_dot
 1145              	.LVL110:
 285:src/display.c **** }
 1146              		.loc 1 285 8 is_stmt 0 view .LVU352
 1147              	.LBE206:
 1148              	.LBE214:
2552:src/display.c ****       }
 1149              		.loc 1 2552 2 is_stmt 1 view .LVU353
2552:src/display.c ****       }
 1150              		.loc 1 2552 11 is_stmt 0 view .LVU354
 1151 008c 3368     		ldr	r3, [r6]
 1152 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2552:src/display.c ****       }
 1153              		.loc 1 2552 2 view .LVU355
 1154 0092 DB07     		lsls	r3, r3, #31
 1155 0094 F3D4     		bmi	.L107
2552:src/display.c ****       }
 1156              		.loc 1 2552 2 discriminator 1 view .LVU356
 1157 0096 012C     		cmp	r4, #1
 1158 0098 F1D1     		bne	.L107
 1159              	.LVL111:
 1160              	.LBB215:
 283:src/display.c ****   if (on)	set_dot(n);
 1161              		.loc 1 283 6 is_stmt 1 view .LVU357
 1162              	.LBB211:
 284:src/display.c ****   else	clr_dot(n);
 1163              		.loc 1 284 3 view .LVU358
 284:src/display.c ****   else	clr_dot(n);
 1164              		.loc 1 284 11 view .LVU359
 1165              	.LBE211:
 1166              	.LBE215:
 1167              		.loc 1 2553 7 is_stmt 0 view .LVU360
 1168 009a BDE87040 		pop	{r4, r5, r6, lr}
 1169              		.cfi_remember_state
 1170              		.cfi_restore 14
 1171              		.cfi_restore 6
 1172              		.cfi_restore 5
 1173              		.cfi_restore 4
ARM GAS  /tmp/ccPzxiH4.s 			page 71


 1174              		.cfi_def_cfa_offset 0
 1175              	.LVL112:
 1176              	.LBB216:
 1177              	.LBB212:
 284:src/display.c ****   else	clr_dot(n);
 1178              		.loc 1 284 11 view .LVU361
 1179 009e 8B20     		movs	r0, #139
 1180 00a0 FFF7FEBF 		b	set_dot
 1181              	.LVL113:
 1182              	.L103:
 1183              		.cfi_restore_state
 284:src/display.c ****   else	clr_dot(n);
 1184              		.loc 1 284 11 view .LVU362
 1185              	.LBE212:
 1186              	.LBE216:
 1187              	.LBB217:
 1188              	.LBB202:
 285:src/display.c **** }
 1189              		.loc 1 285 8 is_stmt 1 view .LVU363
 1190 00a4 8320     		movs	r0, #131
 1191              	.LVL114:
 285:src/display.c **** }
 1192              		.loc 1 285 8 is_stmt 0 view .LVU364
 1193 00a6 FFF7FEFF 		bl	clr_dot
 1194              	.LVL115:
 1195 00aa DBE7     		b	.L104
 1196              	.LVL116:
 1197              	.L101:
 285:src/display.c **** }
 1198              		.loc 1 285 8 view .LVU365
 1199              	.LBE202:
 1200              	.LBE217:
 1201              	.LBB218:
 283:src/display.c ****   if (on)	set_dot(n);
 1202              		.loc 1 283 6 is_stmt 1 view .LVU366
 1203              	.LBB198:
 284:src/display.c ****   else	clr_dot(n);
 1204              		.loc 1 284 3 view .LVU367
 284:src/display.c ****   else	clr_dot(n);
 1205              		.loc 1 284 11 view .LVU368
 1206 00ac FFF7FEFF 		bl	set_dot
 1207              	.LVL117:
 1208 00b0 D1E7     		b	.L102
 1209              	.LVL118:
 1210              	.L120:
 284:src/display.c ****   else	clr_dot(n);
 1211              		.loc 1 284 11 is_stmt 0 view .LVU369
 1212              	.LBE198:
 1213              	.LBE218:
 1214              	.LBB219:
 1215              	.LBI190:
 283:src/display.c ****   if (on)	set_dot(n);
 1216              		.loc 1 283 6 is_stmt 1 view .LVU370
 1217              	.LBB193:
 284:src/display.c ****   else	clr_dot(n);
 1218              		.loc 1 284 3 view .LVU371
 285:src/display.c **** }
ARM GAS  /tmp/ccPzxiH4.s 			page 72


 1219              		.loc 1 285 8 view .LVU372
 1220 00b2 FFF7FEFF 		bl	clr_dot
 1221              	.LVL119:
 1222 00b6 C3E7     		b	.L99
 1223              	.LVL120:
 1224              	.L119:
 285:src/display.c **** }
 1225              		.loc 1 285 8 is_stmt 0 view .LVU373
 1226              	.LBE193:
 1227              	.LBE219:
 1228              	.LBB220:
 283:src/display.c ****   if (on)	set_dot(n);
 1229              		.loc 1 283 6 is_stmt 1 view .LVU374
 1230              	.LBB188:
 284:src/display.c ****   else	clr_dot(n);
 1231              		.loc 1 284 3 view .LVU375
 284:src/display.c ****   else	clr_dot(n);
 1232              		.loc 1 284 11 view .LVU376
 1233 00b8 FFF7FEFF 		bl	set_dot
 1234              	.LVL121:
 1235 00bc B5E7     		b	.L97
 1236              	.L123:
 1237 00be 00BF     		.align	2
 1238              	.L122:
 1239 00c0 00000000 		.word	main_ram
 1240 00c4 00000000 		.word	StateWhileOn
 1241 00c8 07000800 		.word	524295
 1242 00cc 00080800 		.word	526336
 1243              	.LBE188:
 1244              	.LBE220:
 1245              		.cfi_endproc
 1246              	.LFE32:
 1248              		.section	.text.set_separator.part.0,"ax",%progbits
 1249              		.align	1
 1250              		.p2align 2,,3
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu fpv4-sp-d16
 1256              	set_separator.part.0:
 1257              	.LVL122:
 1258              	.LFB48:
 308:src/display.c ****   if (sep == SEP_NONE)
 1259              		.loc 1 308 14 view -0
 1260              		.cfi_startproc
 1261              		@ args = 0, pretend = 0, frame = 0
 1262              		@ frame_needed = 0, uses_anonymous_args = 0
 315:src/display.c ****     set_dot(posn+7);
 1263              		.loc 1 315 5 view .LVU378
 308:src/display.c ****   if (sep == SEP_NONE)
 1264              		.loc 1 308 14 is_stmt 0 view .LVU379
 1265 0000 38B5     		push	{r3, r4, r5, lr}
 1266              		.cfi_def_cfa_offset 16
 1267              		.cfi_offset 3, -16
 1268              		.cfi_offset 4, -12
 1269              		.cfi_offset 5, -8
 1270              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPzxiH4.s 			page 73


 308:src/display.c ****   if (sep == SEP_NONE)
 1271              		.loc 1 308 14 view .LVU380
 1272 0002 0D46     		mov	r5, r1
 1273 0004 0446     		mov	r4, r0
 1274              	.LVL123:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1275              		.loc 1 316 5 is_stmt 1 view .LVU381
 1276 0006 0238     		subs	r0, r0, #2
 1277              	.LVL124:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1278              		.loc 1 316 5 is_stmt 0 view .LVU382
 1279 0008 FFF7FEFF 		bl	set_dot
 1280              	.LVL125:
 317:src/display.c ****       set_dot(posn+8);
 1281              		.loc 1 317 5 is_stmt 1 view .LVU383
 317:src/display.c ****       set_dot(posn+8);
 1282              		.loc 1 317 8 is_stmt 0 view .LVU384
 1283 000c 012D     		cmp	r5, #1
 1284 000e 01D0     		beq	.L127
 1285              	.LVL126:
 321:src/display.c **** 
 1286              		.loc 1 321 1 view .LVU385
 1287 0010 0020     		movs	r0, #0
 1288 0012 38BD     		pop	{r3, r4, r5, pc}
 1289              	.LVL127:
 1290              	.L127:
 318:src/display.c ****   }
 1291              		.loc 1 318 7 is_stmt 1 view .LVU386
 1292 0014 601E     		subs	r0, r4, #1
 1293 0016 FFF7FEFF 		bl	set_dot
 1294              	.LVL128:
 321:src/display.c **** 
 1295              		.loc 1 321 1 is_stmt 0 view .LVU387
 1296 001a 0020     		movs	r0, #0
 1297 001c 38BD     		pop	{r3, r4, r5, pc}
 321:src/display.c **** 
 1298              		.loc 1 321 1 view .LVU388
 1299              		.cfi_endproc
 1300              	.LFE48:
 1302 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 1303              		.align	1
 1304              		.p2align 2,,3
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1308              		.fpu fpv4-sp-d16
 1310              	set_decimal.part.0:
 1311              	.LVL129:
 1312              	.LFB49:
 293:src/display.c ****   if (res) {
 1313              		.loc 1 293 14 is_stmt 1 view -0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1317              		.loc 1 297 5 view .LVU390
 293:src/display.c ****   if (res) {
ARM GAS  /tmp/ccPzxiH4.s 			page 74


 1318              		.loc 1 293 14 is_stmt 0 view .LVU391
 1319 0000 38B5     		push	{r3, r4, r5, lr}
 1320              		.cfi_def_cfa_offset 16
 1321              		.cfi_offset 3, -16
 1322              		.cfi_offset 4, -12
 1323              		.cfi_offset 5, -8
 1324              		.cfi_offset 14, -4
 293:src/display.c ****   if (res) {
 1325              		.loc 1 293 14 view .LVU392
 1326 0002 0446     		mov	r4, r0
 1327 0004 0D46     		mov	r5, r1
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1328              		.loc 1 297 5 view .LVU393
 1329 0006 0730     		adds	r0, r0, #7
 1330              	.LVL130:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1331              		.loc 1 297 5 view .LVU394
 1332 0008 FFF7FEFF 		bl	set_dot
 1333              	.LVL131:
 298:src/display.c ****       set_dot(posn+8);
 1334              		.loc 1 298 5 is_stmt 1 view .LVU395
 298:src/display.c ****       set_dot(posn+8);
 1335              		.loc 1 298 8 is_stmt 0 view .LVU396
 1336 000c 0DB9     		cbnz	r5, .L134
 1337              	.LVL132:
 301:src/display.c **** }
 1338              		.loc 1 301 3 is_stmt 1 view .LVU397
 302:src/display.c **** 
 1339              		.loc 1 302 1 is_stmt 0 view .LVU398
 1340 000e 0020     		movs	r0, #0
 1341 0010 38BD     		pop	{r3, r4, r5, pc}
 1342              	.LVL133:
 1343              	.L134:
 299:src/display.c ****   }
 1344              		.loc 1 299 7 is_stmt 1 view .LVU399
 1345 0012 04F10800 		add	r0, r4, #8
 1346 0016 FFF7FEFF 		bl	set_dot
 1347              	.LVL134:
 301:src/display.c **** }
 1348              		.loc 1 301 3 view .LVU400
 302:src/display.c **** 
 1349              		.loc 1 302 1 is_stmt 0 view .LVU401
 1350 001a 0020     		movs	r0, #0
 1351 001c 38BD     		pop	{r3, r4, r5, pc}
 302:src/display.c **** 
 1352              		.loc 1 302 1 view .LVU402
 1353              		.cfi_endproc
 1354              	.LFE49:
 1356 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1357              		.align	1
 1358              		.p2align 2,,3
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu fpv4-sp-d16
 1364              	set_digits_string:
 1365              	.LVL135:
ARM GAS  /tmp/ccPzxiH4.s 			page 75


 1366              	.LFB12:
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1367              		.loc 1 346 55 is_stmt 1 view -0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1371              		.loc 1 347 3 view .LVU404
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1372              		.loc 1 346 55 is_stmt 0 view .LVU405
 1373 0000 38B5     		push	{r3, r4, r5, lr}
 1374              		.cfi_def_cfa_offset 16
 1375              		.cfi_offset 3, -16
 1376              		.cfi_offset 4, -12
 1377              		.cfi_offset 5, -8
 1378              		.cfi_offset 14, -4
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1379              		.loc 1 347 10 view .LVU406
 1380 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1381              		.loc 1 347 10 is_stmt 1 view .LVU407
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1382              		.loc 1 347 3 is_stmt 0 view .LVU408
 1383 0004 D3B1     		cbz	r3, .L135
 1384 0006 0546     		mov	r5, r0
 1385 0008 0C46     		mov	r4, r1
 1386 000a 06E0     		b	.L139
 1387              	.LVL136:
 1388              	.L137:
 1389              	.LBB221:
 1390              	.LBB222:
 341:src/display.c ****   return res;
 1391              		.loc 1 341 8 view .LVU409
 1392 000c 2046     		mov	r0, r4
 1393              	.LVL137:
 341:src/display.c ****   return res;
 1394              		.loc 1 341 8 view .LVU410
 1395 000e FFF7FEFF 		bl	set_dig
 1396              	.LVL138:
 342:src/display.c **** }
 1397              		.loc 1 342 3 is_stmt 1 view .LVU411
 342:src/display.c **** }
 1398              		.loc 1 342 3 is_stmt 0 view .LVU412
 1399              	.LBE222:
 1400              	.LBE221:
 352:src/display.c ****     }
 1401              		.loc 1 352 7 is_stmt 1 view .LVU413
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1402              		.loc 1 347 10 is_stmt 0 view .LVU414
 1403 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1404              	.LVL139:
 352:src/display.c ****     }
 1405              		.loc 1 352 9 view .LVU415
 1406 0016 0934     		adds	r4, r4, #9
 1407              	.LVL140:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1408              		.loc 1 347 24 is_stmt 1 view .LVU416
ARM GAS  /tmp/ccPzxiH4.s 			page 76


 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1409              		.loc 1 347 10 view .LVU417
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1410              		.loc 1 347 3 is_stmt 0 view .LVU418
 1411 0018 83B1     		cbz	r3, .L135
 1412              	.LVL141:
 1413              	.L139:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1414              		.loc 1 348 5 is_stmt 1 view .LVU419
 349:src/display.c ****     else {
 1415              		.loc 1 349 7 view .LVU420
 1416              	.LBB225:
 1417              	.LBI225:
 293:src/display.c ****   if (res) {
 1418              		.loc 1 293 14 view .LVU421
 1419              	.LBB226:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1420              		.loc 1 294 3 view .LVU422
 1421              	.LBE226:
 1422              	.LBE225:
 351:src/display.c ****       j += SEGS_PER_DIGIT;
 1423              		.loc 1 351 7 view .LVU423
 1424              	.LBB229:
 1425              	.LBI221:
 339:src/display.c ****   if (res) *res++ = ch;
 1426              		.loc 1 339 14 view .LVU424
 1427              	.LBB223:
 340:src/display.c ****   else	set_dig(base, ch);
 1428              		.loc 1 340 3 view .LVU425
 341:src/display.c ****   return res;
 1429              		.loc 1 341 8 view .LVU426
 1430              	.LBE223:
 1431              	.LBE229:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1432              		.loc 1 348 21 is_stmt 0 view .LVU427
 1433 001a 03F0FD02 		and	r2, r3, #253
 1434 001e 2C2A     		cmp	r2, #44
 1435              	.LBB230:
 1436              	.LBB227:
 1437 0020 A4F10900 		sub	r0, r4, #9
 1438              	.LVL142:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1439              		.loc 1 348 21 view .LVU428
 1440              	.LBE227:
 1441              	.LBE230:
 1442              	.LBB231:
 1443              	.LBB224:
 341:src/display.c ****   return res;
 1444              		.loc 1 341 8 view .LVU429
 1445 0024 1946     		mov	r1, r3
 1446              	.LBE224:
 1447              	.LBE231:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1448              		.loc 1 348 21 view .LVU430
 1449 0026 F1D1     		bne	.L137
 1450              	.LBB232:
 1451              	.LBB228:
ARM GAS  /tmp/ccPzxiH4.s 			page 77


 1452 0028 B3F12E01 		subs	r1, r3, #46
 1453 002c 18BF     		it	ne
 1454 002e 0121     		movne	r1, #1
 1455 0030 FFF7FEFF 		bl	set_decimal.part.0
 1456              	.LVL143:
 301:src/display.c **** }
 1457              		.loc 1 301 3 is_stmt 1 view .LVU431
 301:src/display.c **** }
 1458              		.loc 1 301 3 is_stmt 0 view .LVU432
 1459              	.LBE228:
 1460              	.LBE232:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1461              		.loc 1 347 24 is_stmt 1 view .LVU433
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1462              		.loc 1 347 10 view .LVU434
 1463 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1464              	.LVL144:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1465              		.loc 1 347 3 is_stmt 0 view .LVU435
 1466 0038 002B     		cmp	r3, #0
 1467 003a EED1     		bne	.L139
 1468              	.LVL145:
 1469              	.L135:
 355:src/display.c **** 
 1470              		.loc 1 355 1 view .LVU436
 1471 003c 38BD     		pop	{r3, r4, r5, pc}
 1472              		.cfi_endproc
 1473              	.LFE12:
 1475 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1476              		.align	2
 1477              	.LC0:
 1478 0000 4E614E00 		.ascii	"NaN\000"
 1479              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1480              		.align	1
 1481              		.p2align 2,,3
 1482              		.syntax unified
 1483              		.thumb
 1484              		.thumb_func
 1485              		.fpu fpv4-sp-d16
 1487              	check_special_dn.isra.0:
 1488              	.LVL146:
 1489              	.LFB50:
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1490              		.loc 1 1551 18 is_stmt 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1494              		.loc 1 1552 2 view .LVU438
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1495              		.loc 1 1552 5 is_stmt 0 view .LVU439
 1496 0000 10F07002 		ands	r2, r0, #112
 1497 0004 0BD0     		beq	.L153
1553:src/display.c **** 	    if (res) {
 1498              		.loc 1 1553 4 is_stmt 1 view .LVU440
1553:src/display.c **** 	    if (res) {
 1499              		.loc 1 1553 7 is_stmt 0 view .LVU441
ARM GAS  /tmp/ccPzxiH4.s 			page 78


 1500 0006 10F0300F 		tst	r0, #48
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1501              		.loc 1 1551 18 view .LVU442
 1502 000a 08B5     		push	{r3, lr}
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 3, -8
 1505              		.cfi_offset 14, -4
 1506 000c 0B46     		mov	r3, r1
1553:src/display.c **** 	    if (res) {
 1507              		.loc 1 1553 7 view .LVU443
 1508 000e 08D0     		beq	.L147
 1509              	.LVL147:
 1510              	.LBB235:
 1511              	.LBI235:
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1512              		.loc 1 1551 18 is_stmt 1 view .LVU444
 1513              	.LBB236:
1554:src/display.c **** 	      scopy(res, "NaN");
 1514              		.loc 1 1554 6 view .LVU445
1554:src/display.c **** 	      scopy(res, "NaN");
 1515              		.loc 1 1554 9 is_stmt 0 view .LVU446
 1516 0010 99B1     		cbz	r1, .L148
1555:src/display.c **** 	    } else {
 1517              		.loc 1 1555 8 is_stmt 1 view .LVU447
 1518 0012 0846     		mov	r0, r1
 1519 0014 1049     		ldr	r1, .L162
 1520              	.LVL148:
1555:src/display.c **** 	    } else {
 1521              		.loc 1 1555 8 is_stmt 0 view .LVU448
 1522 0016 FFF7FEFF 		bl	scopy
 1523              	.LVL149:
1555:src/display.c **** 	    } else {
 1524              		.loc 1 1555 8 view .LVU449
 1525 001a 0120     		movs	r0, #1
 1526              	.LBE236:
 1527              	.LBE235:
1574:src/display.c **** 
 1528              		.loc 1 1574 7 view .LVU450
 1529 001c 08BD     		pop	{r3, pc}
 1530              	.LVL150:
 1531              	.L153:
 1532              		.cfi_def_cfa_offset 0
 1533              		.cfi_restore 3
 1534              		.cfi_restore 14
1573:src/display.c ****       }
 1535              		.loc 1 1573 9 view .LVU451
 1536 001e 1046     		mov	r0, r2
1574:src/display.c **** 
 1537              		.loc 1 1574 7 view .LVU452
 1538 0020 7047     		bx	lr
 1539              	.L147:
 1540              		.cfi_def_cfa_offset 8
 1541              		.cfi_offset 3, -8
 1542              		.cfi_offset 14, -4
1561:src/display.c **** 	      if (res) *res++ = '-';
 1543              		.loc 1 1561 6 is_stmt 1 view .LVU453
1561:src/display.c **** 	      if (res) *res++ = '-';
ARM GAS  /tmp/ccPzxiH4.s 			page 79


 1544              		.loc 1 1561 9 is_stmt 0 view .LVU454
 1545 0022 0206     		lsls	r2, r0, #24
 1546 0024 04D4     		bmi	.L161
1565:src/display.c **** 	      *res++ = '\237';
 1547              		.loc 1 1565 6 is_stmt 1 view .LVU455
1565:src/display.c **** 	      *res++ = '\237';
 1548              		.loc 1 1565 9 is_stmt 0 view .LVU456
 1549 0026 89B1     		cbz	r1, .L152
 1550              	.LVL151:
 1551              	.L151:
1566:src/display.c **** 	    else {
 1552              		.loc 1 1566 8 is_stmt 1 view .LVU457
1566:src/display.c **** 	    else {
 1553              		.loc 1 1566 15 is_stmt 0 view .LVU458
 1554 0028 9F22     		movs	r2, #159
 1555 002a 1A70     		strb	r2, [r3]
1570:src/display.c **** 	  }
 1556              		.loc 1 1570 13 view .LVU459
 1557 002c 0120     		movs	r0, #1
1574:src/display.c **** 
 1558              		.loc 1 1574 7 view .LVU460
 1559 002e 08BD     		pop	{r3, pc}
 1560              	.LVL152:
 1561              	.L161:
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1562              		.loc 1 1562 8 is_stmt 1 view .LVU461
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1563              		.loc 1 1562 11 is_stmt 0 view .LVU462
 1564 0030 41B1     		cbz	r1, .L150
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1565              		.loc 1 1562 17 is_stmt 1 view .LVU463
 1566              	.LVL153:
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1567              		.loc 1 1562 24 is_stmt 0 view .LVU464
 1568 0032 2D22     		movs	r2, #45
 1569 0034 03F8012B 		strb	r2, [r3], #1
 1570              	.LVL154:
1565:src/display.c **** 	      *res++ = '\237';
 1571              		.loc 1 1565 6 is_stmt 1 view .LVU465
 1572 0038 F6E7     		b	.L151
 1573              	.LVL155:
 1574              	.L148:
 1575              	.LBB238:
 1576              	.LBB237:
1557:src/display.c **** 	    }
 1577              		.loc 1 1557 8 view .LVU466
 1578 003a 0848     		ldr	r0, .L162+4
 1579 003c FFF7FEFF 		bl	set_digits_string
 1580              	.LVL156:
1557:src/display.c **** 	    }
 1581              		.loc 1 1557 8 is_stmt 0 view .LVU467
 1582 0040 0120     		movs	r0, #1
 1583              	.LBE237:
 1584              	.LBE238:
1574:src/display.c **** 
 1585              		.loc 1 1574 7 view .LVU468
 1586 0042 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccPzxiH4.s 			page 80


 1587              	.LVL157:
 1588              	.L150:
1563:src/display.c **** 	    }
 1589              		.loc 1 1563 13 is_stmt 1 view .LVU469
 1590 0044 2D21     		movs	r1, #45
 1591              	.LVL158:
1563:src/display.c **** 	    }
 1592              		.loc 1 1563 13 is_stmt 0 view .LVU470
 1593 0046 0920     		movs	r0, #9
 1594 0048 FFF7FEFF 		bl	set_dig
 1595              	.LVL159:
1565:src/display.c **** 	      *res++ = '\237';
 1596              		.loc 1 1565 6 is_stmt 1 view .LVU471
 1597              	.L152:
1568:src/display.c **** 	    }
 1598              		.loc 1 1568 8 view .LVU472
 1599 004c 0448     		ldr	r0, .L162+8
 1600 004e 1221     		movs	r1, #18
 1601 0050 FFF7FEFF 		bl	set_digits_string
 1602              	.LVL160:
1570:src/display.c **** 	  }
 1603              		.loc 1 1570 13 is_stmt 0 view .LVU473
 1604 0054 0120     		movs	r0, #1
1574:src/display.c **** 
 1605              		.loc 1 1574 7 view .LVU474
 1606 0056 08BD     		pop	{r3, pc}
 1607              	.L163:
 1608              		.align	2
 1609              	.L162:
 1610 0058 00000000 		.word	.LC0
 1611 005c 00000000 		.word	.LANCHOR3
 1612 0060 00000000 		.word	.LANCHOR4
 1613              		.cfi_endproc
 1614              	.LFE50:
 1616              		.section	.text.set_x_hms,"ax",%progbits
 1617              		.align	1
 1618              		.p2align 2,,3
 1619              		.syntax unified
 1620              		.thumb
 1621              		.thumb_func
 1622              		.fpu fpv4-sp-d16
 1624              	set_x_hms:
 1625              	.LVL161:
 1626              	.LFB22:
1619:src/display.c **** 	decNumber x, y, a, t, u;
 1627              		.loc 1 1619 62 is_stmt 1 view -0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 200
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
1620:src/display.c **** 	int j=0;
 1631              		.loc 1 1620 2 view .LVU476
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1632              		.loc 1 1621 2 view .LVU477
1619:src/display.c **** 	decNumber x, y, a, t, u;
 1633              		.loc 1 1619 62 is_stmt 0 view .LVU478
 1634 0000 30B5     		push	{r4, r5, lr}
 1635              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccPzxiH4.s 			page 81


 1636              		.cfi_offset 4, -12
 1637              		.cfi_offset 5, -8
 1638              		.cfi_offset 14, -4
 1639 0002 B5B0     		sub	sp, sp, #212
 1640              		.cfi_def_cfa_offset 224
1619:src/display.c **** 	decNumber x, y, a, t, u;
 1641              		.loc 1 1619 62 view .LVU479
 1642 0004 0446     		mov	r4, r0
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1643              		.loc 1 1621 6 view .LVU480
 1644 0006 0023     		movs	r3, #0
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1645              		.loc 1 1625 6 view .LVU481
 1646 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1647              	.LVL162:
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1648              		.loc 1 1621 6 view .LVU482
 1649 000a 0393     		str	r3, [sp, #12]
1622:src/display.c **** 	unsigned int hr, min, sec, fs;
 1650              		.loc 1 1622 2 is_stmt 1 view .LVU483
 1651              	.LVL163:
1623:src/display.c **** 
 1652              		.loc 1 1623 2 view .LVU484
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1653              		.loc 1 1625 2 view .LVU485
1619:src/display.c **** 	decNumber x, y, a, t, u;
 1654              		.loc 1 1619 62 is_stmt 0 view .LVU486
 1655 000c 0D46     		mov	r5, r1
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1656              		.loc 1 1625 6 view .LVU487
 1657 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1658              	.LVL164:
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1659              		.loc 1 1625 5 view .LVU488
 1660 0012 48B1     		cbz	r0, .L165
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1661              		.loc 1 1626 4 is_stmt 1 view .LVU489
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1662              		.loc 1 1626 7 is_stmt 0 view .LVU490
 1663 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1664 0016 5B06     		lsls	r3, r3, #25
 1665 0018 04D5     		bpl	.L164
1627:src/display.c **** 	  return;
 1666              		.loc 1 1627 6 is_stmt 1 view .LVU491
 1667              	.LVL165:
 1668              	.LBB239:
 1669              	.LBI239:
 339:src/display.c ****   if (res) *res++ = ch;
 1670              		.loc 1 339 14 view .LVU492
 1671              	.LBB240:
 340:src/display.c ****   else	set_dig(base, ch);
 1672              		.loc 1 340 3 view .LVU493
 340:src/display.c ****   else	set_dig(base, ch);
 1673              		.loc 1 340 6 is_stmt 0 view .LVU494
 1674 001a 002D     		cmp	r5, #0
 1675 001c 00F0BB80 		beq	.L168
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccPzxiH4.s 			page 82


 1676              		.loc 1 340 12 is_stmt 1 view .LVU495
 1677              	.LVL166:
 340:src/display.c ****   else	set_dig(base, ch);
 1678              		.loc 1 340 19 is_stmt 0 view .LVU496
 1679 0020 6F23     		movs	r3, #111
 1680 0022 2B70     		strb	r3, [r5]
 1681              	.LVL167:
 1682              	.L164:
 340:src/display.c ****   else	set_dig(base, ch);
 1683              		.loc 1 340 19 view .LVU497
 1684              	.LBE240:
 1685              	.LBE239:
1682:src/display.c **** 
 1686              		.loc 1 1682 7 view .LVU498
 1687 0024 35B0     		add	sp, sp, #212
 1688              		.cfi_remember_state
 1689              		.cfi_def_cfa_offset 12
 1690              		@ sp needed
 1691 0026 30BD     		pop	{r4, r5, pc}
 1692              	.LVL168:
 1693              	.L165:
 1694              		.cfi_restore_state
1631:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1695              		.loc 1 1631 2 is_stmt 1 view .LVU499
 1696 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1697              	.LVL169:
1632:src/display.c **** 	dn_abs(&a, rgx);
 1698              		.loc 1 1632 2 view .LVU500
 1699 002c 654A     		ldr	r2, .L199
 1700 002e 2146     		mov	r1, r4
 1701 0030 07A8     		add	r0, sp, #28
 1702 0032 FFF7FEFF 		bl	decNumberMod
 1703              	.LVL170:
1633:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1704              		.loc 1 1633 2 view .LVU501
 1705 0036 2146     		mov	r1, r4
 1706 0038 19A8     		add	r0, sp, #100
 1707 003a FFF7FEFF 		bl	dn_abs
 1708              	.LVL171:
1634:src/display.c **** 	  if (res != NULL)
 1709              		.loc 1 1634 2 view .LVU502
1634:src/display.c **** 	  if (res != NULL)
 1710              		.loc 1 1634 5 is_stmt 0 view .LVU503
 1711 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1712 0042 002B     		cmp	r3, #0
 1713 0044 75DB     		blt	.L197
 1714              	.L169:
1642:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1715              		.loc 1 1642 2 is_stmt 1 view .LVU504
 1716 0046 07A9     		add	r1, sp, #28
 1717 0048 10A8     		add	r0, sp, #64
 1718 004a FFF7FEFF 		bl	decNumberHR2HMS
 1719              	.LVL172:
1643:src/display.c **** 	decNumberRound(&u, &t);
 1720              		.loc 1 1643 2 view .LVU505
 1721 004e 0622     		movs	r2, #6
 1722 0050 10A9     		add	r1, sp, #64
ARM GAS  /tmp/ccPzxiH4.s 			page 83


 1723 0052 22A8     		add	r0, sp, #136
 1724 0054 FFF7FEFF 		bl	dn_mulpow10
 1725              	.LVL173:
1644:src/display.c **** 
 1726              		.loc 1 1644 2 view .LVU506
 1727 0058 22A9     		add	r1, sp, #136
 1728 005a 2BA8     		add	r0, sp, #172
 1729 005c FFF7FEFF 		bl	decNumberRound
 1730              	.LVL174:
1646:src/display.c **** 	hms_step(&u, &t, &sec);
 1731              		.loc 1 1646 2 view .LVU507
 1732 0060 2BA9     		add	r1, sp, #172
 1733 0062 22A8     		add	r0, sp, #136
 1734 0064 06AA     		add	r2, sp, #24
 1735 0066 FFF7FEFF 		bl	hms_step
 1736              	.LVL175:
1647:src/display.c **** 	hms_step(&t, &u, &min);
 1737              		.loc 1 1647 2 view .LVU508
 1738 006a 22A9     		add	r1, sp, #136
 1739 006c 2BA8     		add	r0, sp, #172
 1740 006e 05AA     		add	r2, sp, #20
 1741 0070 FFF7FEFF 		bl	hms_step
 1742              	.LVL176:
1648:src/display.c **** 	hr = dn_to_int(&t);
 1743              		.loc 1 1648 2 view .LVU509
 1744 0074 04AA     		add	r2, sp, #16
 1745 0076 2BA9     		add	r1, sp, #172
 1746 0078 22A8     		add	r0, sp, #136
 1747 007a FFF7FEFF 		bl	hms_step
 1748              	.LVL177:
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1749              		.loc 1 1649 2 view .LVU510
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1750              		.loc 1 1649 7 is_stmt 0 view .LVU511
 1751 007e 22A8     		add	r0, sp, #136
 1752 0080 FFF7FEFF 		bl	dn_to_int
 1753              	.LVL178:
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1754              		.loc 1 1650 33 view .LVU512
 1755 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1756              		.loc 1 1650 5 view .LVU513
 1757 0088 3B2A     		cmp	r2, #59
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1758              		.loc 1 1650 19 is_stmt 1 view .LVU514
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1759              		.loc 1 1650 23 is_stmt 0 view .LVU515
 1760 008a 82BF     		ittt	hi
 1761 008c 3C3A     		subhi	r2, r2, #60
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1762              		.loc 1 1650 33 view .LVU516
 1763 008e 0133     		addhi	r3, r3, #1
 1764 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1651:src/display.c **** 
 1765              		.loc 1 1651 2 is_stmt 1 view .LVU517
1651:src/display.c **** 
 1766              		.loc 1 1651 5 is_stmt 0 view .LVU518
ARM GAS  /tmp/ccPzxiH4.s 			page 84


 1767 0094 3B2B     		cmp	r3, #59
 1768 0096 02D9     		bls	.L174
1651:src/display.c **** 
 1769              		.loc 1 1651 19 is_stmt 1 discriminator 1 view .LVU519
1651:src/display.c **** 
 1770              		.loc 1 1651 23 is_stmt 0 discriminator 1 view .LVU520
 1771 0098 3C3B     		subs	r3, r3, #60
 1772 009a 0493     		str	r3, [sp, #16]
1651:src/display.c **** 
 1773              		.loc 1 1651 30 is_stmt 1 discriminator 1 view .LVU521
1651:src/display.c **** 
 1774              		.loc 1 1651 32 is_stmt 0 discriminator 1 view .LVU522
 1775 009c 0130     		adds	r0, r0, #1
 1776              	.LVL179:
 1777              	.L174:
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 1778              		.loc 1 1654 2 is_stmt 1 view .LVU523
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 1779              		.loc 1 1654 8 is_stmt 0 view .LVU524
 1780 009e 0123     		movs	r3, #1
 1781 00a0 0093     		str	r3, [sp]
 1782 00a2 2946     		mov	r1, r5
 1783 00a4 03AA     		add	r2, sp, #12
 1784 00a6 0423     		movs	r3, #4
 1785 00a8 FFF7FEFF 		bl	hms_render
 1786              	.LVL180:
1655:src/display.c **** 	j += SEGS_PER_DIGIT;
 1787              		.loc 1 1655 2 is_stmt 1 view .LVU525
 1788              	.LBB242:
 1789              	.LBI242:
 339:src/display.c ****   if (res) *res++ = ch;
 1790              		.loc 1 339 14 view .LVU526
 1791              	.LBB243:
 340:src/display.c ****   else	set_dig(base, ch);
 1792              		.loc 1 340 3 view .LVU527
 340:src/display.c ****   else	set_dig(base, ch);
 1793              		.loc 1 340 6 is_stmt 0 view .LVU528
 1794 00ac 0446     		mov	r4, r0
 1795              	.LVL181:
 340:src/display.c ****   else	set_dig(base, ch);
 1796              		.loc 1 340 6 view .LVU529
 1797 00ae 0028     		cmp	r0, #0
 1798 00b0 7CD0     		beq	.L175
 340:src/display.c ****   else	set_dig(base, ch);
 1799              		.loc 1 340 12 is_stmt 1 view .LVU530
 340:src/display.c ****   else	set_dig(base, ch);
 1800              		.loc 1 340 16 is_stmt 0 view .LVU531
 1801 00b2 0146     		mov	r1, r0
 1802              	.LVL182:
 340:src/display.c ****   else	set_dig(base, ch);
 1803              		.loc 1 340 19 view .LVU532
 1804 00b4 4023     		movs	r3, #64
 1805 00b6 01F8013B 		strb	r3, [r1], #1
 1806              	.LVL183:
 1807              	.L176:
 342:src/display.c **** }
 1808              		.loc 1 342 3 is_stmt 1 view .LVU533
ARM GAS  /tmp/ccPzxiH4.s 			page 85


 342:src/display.c **** }
 1809              		.loc 1 342 3 is_stmt 0 view .LVU534
 1810              	.LBE243:
 1811              	.LBE242:
1656:src/display.c **** 
 1812              		.loc 1 1656 2 is_stmt 1 view .LVU535
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1813              		.loc 1 1659 8 is_stmt 0 view .LVU536
 1814 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1815 00be 0122     		movs	r2, #1
1656:src/display.c **** 
 1816              		.loc 1 1656 4 view .LVU537
 1817 00c0 03F10904 		add	r4, r3, #9
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1818              		.loc 1 1659 8 view .LVU538
 1819 00c4 0092     		str	r2, [sp]
 1820 00c6 0223     		movs	r3, #2
 1821 00c8 03AA     		add	r2, sp, #12
1656:src/display.c **** 
 1822              		.loc 1 1656 4 view .LVU539
 1823 00ca 0394     		str	r4, [sp, #12]
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1824              		.loc 1 1659 2 is_stmt 1 view .LVU540
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1825              		.loc 1 1659 8 is_stmt 0 view .LVU541
 1826 00cc FFF7FEFF 		bl	hms_render
 1827              	.LVL184:
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
 1828              		.loc 1 1660 2 is_stmt 1 view .LVU542
 1829              	.LBB245:
 1830              	.LBI245:
 339:src/display.c ****   if (res) *res++ = ch;
 1831              		.loc 1 339 14 view .LVU543
 1832              	.LBB246:
 340:src/display.c ****   else	set_dig(base, ch);
 1833              		.loc 1 340 3 view .LVU544
 340:src/display.c ****   else	set_dig(base, ch);
 1834              		.loc 1 340 6 is_stmt 0 view .LVU545
 1835 00d0 0446     		mov	r4, r0
 1836 00d2 0028     		cmp	r0, #0
 1837 00d4 64D0     		beq	.L177
 340:src/display.c ****   else	set_dig(base, ch);
 1838              		.loc 1 340 12 is_stmt 1 view .LVU546
 340:src/display.c ****   else	set_dig(base, ch);
 1839              		.loc 1 340 16 is_stmt 0 view .LVU547
 1840 00d6 0146     		mov	r1, r0
 1841              	.LVL185:
 340:src/display.c ****   else	set_dig(base, ch);
 1842              		.loc 1 340 19 view .LVU548
 1843 00d8 2723     		movs	r3, #39
 1844 00da 01F8013B 		strb	r3, [r1], #1
 1845              	.LVL186:
 1846              	.L178:
 342:src/display.c **** }
 1847              		.loc 1 342 3 is_stmt 1 view .LVU549
 342:src/display.c **** }
 1848              		.loc 1 342 3 is_stmt 0 view .LVU550
ARM GAS  /tmp/ccPzxiH4.s 			page 86


 1849              	.LBE246:
 1850              	.LBE245:
1661:src/display.c **** 
 1851              		.loc 1 1661 2 is_stmt 1 view .LVU551
1661:src/display.c **** 
 1852              		.loc 1 1661 4 is_stmt 0 view .LVU552
 1853 00de 039B     		ldr	r3, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1854              		.loc 1 1664 8 view .LVU553
 1855 00e0 0598     		ldr	r0, [sp, #20]
 1856 00e2 0122     		movs	r2, #1
1661:src/display.c **** 
 1857              		.loc 1 1661 4 view .LVU554
 1858 00e4 03F10904 		add	r4, r3, #9
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1859              		.loc 1 1664 8 view .LVU555
 1860 00e8 0092     		str	r2, [sp]
 1861 00ea 0223     		movs	r3, #2
 1862 00ec 03AA     		add	r2, sp, #12
1661:src/display.c **** 
 1863              		.loc 1 1661 4 view .LVU556
 1864 00ee 0394     		str	r4, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1865              		.loc 1 1664 2 is_stmt 1 view .LVU557
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1866              		.loc 1 1664 8 is_stmt 0 view .LVU558
 1867 00f0 FFF7FEFF 		bl	hms_render
 1868              	.LVL187:
1665:src/display.c **** 
 1869              		.loc 1 1665 2 is_stmt 1 view .LVU559
1665:src/display.c **** 
 1870              		.loc 1 1665 8 is_stmt 0 view .LVU560
 1871 00f4 344B     		ldr	r3, .L199+4
 1872 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1873              	.LVL188:
 1874              	.LBB248:
 1875              	.LBI248:
 293:src/display.c ****   if (res) {
 1876              		.loc 1 293 14 is_stmt 1 view .LVU561
 1877              	.LBB249:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1878              		.loc 1 294 3 view .LVU562
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1879              		.loc 1 294 6 is_stmt 0 view .LVU563
 1880 00f8 0028     		cmp	r0, #0
 1881 00fa 38D0     		beq	.L179
 295:src/display.c ****   } else {
 1882              		.loc 1 295 5 is_stmt 1 view .LVU564
 295:src/display.c ****   } else {
 1883              		.loc 1 295 12 is_stmt 0 view .LVU565
 1884 00fc 0029     		cmp	r1, #0
 295:src/display.c ****   } else {
 1885              		.loc 1 295 9 view .LVU566
 1886 00fe 0146     		mov	r1, r0
 1887              	.LVL189:
 295:src/display.c ****   } else {
 1888              		.loc 1 295 12 view .LVU567
ARM GAS  /tmp/ccPzxiH4.s 			page 87


 1889 0100 0CBF     		ite	eq
 1890 0102 2E23     		moveq	r3, #46
 1891 0104 2C23     		movne	r3, #44
 1892 0106 01F8013B 		strb	r3, [r1], #1
 1893              	.LVL190:
 1894              	.L181:
 301:src/display.c **** }
 1895              		.loc 1 301 3 is_stmt 1 view .LVU568
 301:src/display.c **** }
 1896              		.loc 1 301 3 is_stmt 0 view .LVU569
 1897              	.LBE249:
 1898              	.LBE248:
1668:src/display.c **** 
 1899              		.loc 1 1668 2 is_stmt 1 view .LVU570
1668:src/display.c **** 
 1900              		.loc 1 1668 8 is_stmt 0 view .LVU571
 1901 010a 0023     		movs	r3, #0
 1902 010c 0093     		str	r3, [sp]
 1903 010e 0698     		ldr	r0, [sp, #24]
 1904 0110 03AA     		add	r2, sp, #12
 1905 0112 0223     		movs	r3, #2
 1906 0114 FFF7FEFF 		bl	hms_render
 1907              	.LVL191:
1671:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 1908              		.loc 1 1671 2 is_stmt 1 view .LVU572
 1909              	.LBB251:
 1910              	.LBI251:
 339:src/display.c ****   if (res) *res++ = ch;
 1911              		.loc 1 339 14 view .LVU573
 1912              	.LBB252:
 340:src/display.c ****   else	set_dig(base, ch);
 1913              		.loc 1 340 3 view .LVU574
 340:src/display.c ****   else	set_dig(base, ch);
 1914              		.loc 1 340 6 is_stmt 0 view .LVU575
 1915 0118 0446     		mov	r4, r0
 1916 011a 90B3     		cbz	r0, .L182
 340:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 340 12 is_stmt 1 view .LVU576
 1918              	.LVL192:
 340:src/display.c ****   else	set_dig(base, ch);
 1919              		.loc 1 340 19 is_stmt 0 view .LVU577
 1920 011c 2223     		movs	r3, #34
 1921 011e 0370     		strb	r3, [r0]
 1922              	.LVL193:
 342:src/display.c **** }
 1923              		.loc 1 342 3 is_stmt 1 view .LVU578
 342:src/display.c **** }
 1924              		.loc 1 342 3 is_stmt 0 view .LVU579
 1925              	.LBE252:
 1926              	.LBE251:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1927              		.loc 1 1675 2 is_stmt 1 view .LVU580
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1928              		.loc 1 1675 6 is_stmt 0 view .LVU581
 1929 0120 2849     		ldr	r1, .L199
 1930 0122 19A8     		add	r0, sp, #100
 1931              	.LVL194:
ARM GAS  /tmp/ccPzxiH4.s 			page 88


1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1932              		.loc 1 1675 6 view .LVU582
 1933 0124 FFF7FEFF 		bl	dn_lt
 1934              	.LVL195:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1935              		.loc 1 1675 5 view .LVU583
 1936 0128 78B9     		cbnz	r0, .L198
1676:src/display.c **** 	} else if (! dn_eq0(&a)) {
 1937              		.loc 1 1676 4 is_stmt 1 view .LVU584
 1938              	.LVL196:
 1939              	.LBB255:
 1940              	.LBI255:
 339:src/display.c ****   if (res) *res++ = ch;
 1941              		.loc 1 339 14 view .LVU585
 1942              	.LBB256:
 340:src/display.c ****   else	set_dig(base, ch);
 1943              		.loc 1 340 3 view .LVU586
 340:src/display.c ****   else	set_dig(base, ch);
 1944              		.loc 1 340 12 view .LVU587
 340:src/display.c ****   else	set_dig(base, ch);
 1945              		.loc 1 340 19 is_stmt 0 view .LVU588
 1946 012a 6F23     		movs	r3, #111
 1947 012c 6370     		strb	r3, [r4, #1]
 1948              	.LBE256:
 1949              	.LBE255:
1682:src/display.c **** 
 1950              		.loc 1 1682 7 view .LVU589
 1951 012e 35B0     		add	sp, sp, #212
 1952              		.cfi_remember_state
 1953              		.cfi_def_cfa_offset 12
 1954              		@ sp needed
 1955 0130 30BD     		pop	{r4, r5, pc}
 1956              	.LVL197:
 1957              	.L197:
 1958              		.cfi_restore_state
1635:src/display.c **** 	    *res++ += '-';
 1959              		.loc 1 1635 4 is_stmt 1 view .LVU590
1635:src/display.c **** 	    *res++ += '-';
 1960              		.loc 1 1635 7 is_stmt 0 view .LVU591
 1961 0132 15B3     		cbz	r5, .L170
1636:src/display.c **** 	  else
 1962              		.loc 1 1636 6 is_stmt 1 view .LVU592
1636:src/display.c **** 	  else
 1963              		.loc 1 1636 10 is_stmt 0 view .LVU593
 1964 0134 2B46     		mov	r3, r5
 1965              	.LVL198:
1636:src/display.c **** 	  else
 1966              		.loc 1 1636 13 view .LVU594
 1967 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1968              	.LVL199:
1636:src/display.c **** 	  else
 1969              		.loc 1 1636 13 view .LVU595
 1970 013a 2D32     		adds	r2, r2, #45
 1971 013c 2A70     		strb	r2, [r5]
1636:src/display.c **** 	  else
 1972              		.loc 1 1636 10 view .LVU596
 1973 013e 1D46     		mov	r5, r3
ARM GAS  /tmp/ccPzxiH4.s 			page 89


 1974              	.LVL200:
 1975              	.L171:
1639:src/display.c **** 	}
 1976              		.loc 1 1639 4 is_stmt 1 view .LVU597
 1977 0140 07A9     		add	r1, sp, #28
 1978 0142 0846     		mov	r0, r1
 1979 0144 FFF7FEFF 		bl	dn_minus
 1980              	.LVL201:
 1981 0148 7DE7     		b	.L169
 1982              	.LVL202:
 1983              	.L198:
 1984              	.LBB257:
 1985              	.LBB253:
 340:src/display.c ****   else	set_dig(base, ch);
 1986              		.loc 1 340 16 is_stmt 0 view .LVU598
 1987 014a 0134     		adds	r4, r4, #1
 1988              	.LVL203:
 1989              	.L185:
 340:src/display.c ****   else	set_dig(base, ch);
 1990              		.loc 1 340 16 view .LVU599
 1991              	.LBE253:
 1992              	.LBE257:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1993              		.loc 1 1677 9 is_stmt 1 view .LVU600
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1994              		.loc 1 1677 15 is_stmt 0 view .LVU601
 1995 014c 19A8     		add	r0, sp, #100
 1996 014e FFF7FEFF 		bl	dn_eq0
 1997              	.LVL204:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1998              		.loc 1 1677 12 view .LVU602
 1999 0152 0028     		cmp	r0, #0
 2000 0154 7FF466AF 		bne	.L164
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2001              		.loc 1 1678 4 is_stmt 1 view .LVU603
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2002              		.loc 1 1678 8 is_stmt 0 view .LVU604
 2003 0158 1C48     		ldr	r0, .L199+8
 2004 015a 19A9     		add	r1, sp, #100
 2005 015c FFF7FEFF 		bl	dn_lt
 2006              	.LVL205:
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2007              		.loc 1 1678 7 view .LVU605
 2008 0160 0028     		cmp	r0, #0
 2009 0162 7FF45FAF 		bne	.L164
1679:src/display.c **** 	  }
 2010              		.loc 1 1679 6 is_stmt 1 view .LVU606
 2011              	.LVL206:
 2012              	.LBB258:
 2013              	.LBI258:
 339:src/display.c ****   if (res) *res++ = ch;
 2014              		.loc 1 339 14 view .LVU607
 2015              	.LBB259:
 340:src/display.c ****   else	set_dig(base, ch);
 2016              		.loc 1 340 3 view .LVU608
 340:src/display.c ****   else	set_dig(base, ch);
 2017              		.loc 1 340 6 is_stmt 0 view .LVU609
ARM GAS  /tmp/ccPzxiH4.s 			page 90


 2018 0166 3CB3     		cbz	r4, .L187
 340:src/display.c ****   else	set_dig(base, ch);
 2019              		.loc 1 340 12 is_stmt 1 view .LVU610
 2020              	.LVL207:
 340:src/display.c ****   else	set_dig(base, ch);
 2021              		.loc 1 340 19 is_stmt 0 view .LVU611
 2022 0168 7523     		movs	r3, #117
 2023 016a 2370     		strb	r3, [r4]
 2024 016c 5AE7     		b	.L164
 2025              	.LVL208:
 2026              	.L179:
 340:src/display.c ****   else	set_dig(base, ch);
 2027              		.loc 1 340 19 view .LVU612
 2028              	.LBE259:
 2029              	.LBE258:
1665:src/display.c **** 
 2030              		.loc 1 1665 8 view .LVU613
 2031 016e 0398     		ldr	r0, [sp, #12]
 2032              	.LVL209:
 2033              	.LBB261:
 2034              	.LBB250:
1665:src/display.c **** 
 2035              		.loc 1 1665 8 view .LVU614
 2036 0170 0938     		subs	r0, r0, #9
 2037 0172 FFF7FEFF 		bl	set_decimal.part.0
 2038              	.LVL210:
1665:src/display.c **** 
 2039              		.loc 1 1665 8 view .LVU615
 2040 0176 0146     		mov	r1, r0
 2041 0178 C7E7     		b	.L181
 2042              	.LVL211:
 2043              	.L170:
1665:src/display.c **** 
 2044              		.loc 1 1665 8 view .LVU616
 2045              	.LBE250:
 2046              	.LBE261:
1638:src/display.c **** 	  dn_minus(&x, &x);
 2047              		.loc 1 1638 6 is_stmt 1 view .LVU617
 2048              	.LBB262:
 2049              	.LBI262:
 244:src/display.c **** {
 2050              		.loc 1 244 13 view .LVU618
 2051              	.LBB263:
 246:src/display.c **** }
 2052              		.loc 1 246 3 view .LVU619
 2053 017a 8120     		movs	r0, #129
 2054 017c FFF7FEFF 		bl	set_dot
 2055              	.LVL212:
 247:src/display.c **** 
 2056              		.loc 1 247 1 is_stmt 0 view .LVU620
 2057 0180 DEE7     		b	.L171
 2058              	.LVL213:
 2059              	.L182:
 247:src/display.c **** 
 2060              		.loc 1 247 1 view .LVU621
 2061              	.LBE263:
 2062              	.LBE262:
ARM GAS  /tmp/ccPzxiH4.s 			page 91


 2063              	.LBB264:
 2064              	.LBB254:
 341:src/display.c ****   return res;
 2065              		.loc 1 341 8 is_stmt 1 view .LVU622
 2066 0182 0398     		ldr	r0, [sp, #12]
 2067              	.LVL214:
 341:src/display.c ****   return res;
 2068              		.loc 1 341 8 is_stmt 0 view .LVU623
 2069 0184 2221     		movs	r1, #34
 2070 0186 FFF7FEFF 		bl	set_dig
 2071              	.LVL215:
 342:src/display.c **** }
 2072              		.loc 1 342 3 is_stmt 1 view .LVU624
 342:src/display.c **** }
 2073              		.loc 1 342 3 is_stmt 0 view .LVU625
 2074              	.LBE254:
 2075              	.LBE264:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2076              		.loc 1 1675 2 is_stmt 1 view .LVU626
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2077              		.loc 1 1675 6 is_stmt 0 view .LVU627
 2078 018a 0E49     		ldr	r1, .L199
 2079 018c 19A8     		add	r0, sp, #100
 2080 018e FFF7FEFF 		bl	dn_lt
 2081              	.LVL216:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2082              		.loc 1 1675 5 view .LVU628
 2083 0192 0028     		cmp	r0, #0
 2084 0194 DAD1     		bne	.L185
 2085              	.LVL217:
 2086              	.L168:
 2087              	.LBB265:
 2088              	.LBB241:
 341:src/display.c ****   return res;
 2089              		.loc 1 341 8 is_stmt 1 view .LVU629
 2090 0196 6F21     		movs	r1, #111
 2091 0198 7A20     		movs	r0, #122
 2092 019a FFF7FEFF 		bl	set_dig
 2093              	.LVL218:
 2094              	.LBE241:
 2095              	.LBE265:
1628:src/display.c **** 	}
 2096              		.loc 1 1628 4 view .LVU630
 2097 019e 41E7     		b	.L164
 2098              	.LVL219:
 2099              	.L177:
 2100              	.LBB266:
 2101              	.LBB247:
 341:src/display.c ****   return res;
 2102              		.loc 1 341 8 view .LVU631
 2103 01a0 2721     		movs	r1, #39
 2104 01a2 0398     		ldr	r0, [sp, #12]
 2105              	.LVL220:
 341:src/display.c ****   return res;
 2106              		.loc 1 341 8 is_stmt 0 view .LVU632
 2107 01a4 FFF7FEFF 		bl	set_dig
 2108              	.LVL221:
ARM GAS  /tmp/ccPzxiH4.s 			page 92


 341:src/display.c ****   return res;
 2109              		.loc 1 341 8 view .LVU633
 2110 01a8 2146     		mov	r1, r4
 2111 01aa 98E7     		b	.L178
 2112              	.LVL222:
 2113              	.L175:
 341:src/display.c ****   return res;
 2114              		.loc 1 341 8 view .LVU634
 2115              	.LBE247:
 2116              	.LBE266:
 2117              	.LBB267:
 2118              	.LBB244:
 341:src/display.c ****   return res;
 2119              		.loc 1 341 8 is_stmt 1 view .LVU635
 2120 01ac 4021     		movs	r1, #64
 2121 01ae 0398     		ldr	r0, [sp, #12]
 2122              	.LVL223:
 341:src/display.c ****   return res;
 2123              		.loc 1 341 8 is_stmt 0 view .LVU636
 2124 01b0 FFF7FEFF 		bl	set_dig
 2125              	.LVL224:
 341:src/display.c ****   return res;
 2126              		.loc 1 341 8 view .LVU637
 2127 01b4 2146     		mov	r1, r4
 2128 01b6 80E7     		b	.L176
 2129              	.LVL225:
 2130              	.L187:
 341:src/display.c ****   return res;
 2131              		.loc 1 341 8 view .LVU638
 2132              	.LBE244:
 2133              	.LBE267:
 2134              	.LBB268:
 2135              	.LBB260:
 341:src/display.c ****   return res;
 2136              		.loc 1 341 8 is_stmt 1 view .LVU639
 2137 01b8 7521     		movs	r1, #117
 2138 01ba 7A20     		movs	r0, #122
 2139 01bc FFF7FEFF 		bl	set_dig
 2140              	.LVL226:
 2141 01c0 30E7     		b	.L164
 2142              	.L200:
 2143 01c2 00BF     		.align	2
 2144              	.L199:
 2145 01c4 00000000 		.word	const_9000
 2146 01c8 00000000 		.word	.LANCHOR1
 2147 01cc 00000000 		.word	const_hms_threshold
 2148              	.LBE260:
 2149              	.LBE268:
 2150              		.cfi_endproc
 2151              	.LFE22:
 2153              		.section	.text.set_x_fract,"ax",%progbits
 2154              		.align	1
 2155              		.p2align 2,,3
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2159              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccPzxiH4.s 			page 93


 2161              	set_x_fract:
 2162              	.LVL227:
 2163              	.LFB23:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2164              		.loc 1 1685 63 view -0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 216
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/display.c **** 	char buf[32], *p = buf;
 2168              		.loc 1 1686 2 view .LVU641
1687:src/display.c **** 	int j;
 2169              		.loc 1 1687 2 view .LVU642
1688:src/display.c **** 
 2170              		.loc 1 1688 2 view .LVU643
1690:src/display.c **** 	  return 1;
 2171              		.loc 1 1690 2 view .LVU644
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2172              		.loc 1 1685 63 is_stmt 0 view .LVU645
 2173 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2174              		.cfi_def_cfa_offset 20
 2175              		.cfi_offset 4, -20
 2176              		.cfi_offset 5, -16
 2177              		.cfi_offset 6, -12
 2178              		.cfi_offset 7, -8
 2179              		.cfi_offset 14, -4
 2180 0002 0646     		mov	r6, r0
 2181 0004 B7B0     		sub	sp, sp, #220
 2182              		.cfi_def_cfa_offset 240
1690:src/display.c **** 	  return 1;
 2183              		.loc 1 1690 6 view .LVU646
 2184 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2185              	.LVL228:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2186              		.loc 1 1685 63 view .LVU647
 2187 0008 0C46     		mov	r4, r1
1690:src/display.c **** 	  return 1;
 2188              		.loc 1 1690 6 view .LVU648
 2189 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2190              	.LVL229:
1690:src/display.c **** 	  return 1;
 2191              		.loc 1 1690 5 view .LVU649
 2192 000e 18B1     		cbz	r0, .L232
 2193              	.LVL230:
 2194              	.L221:
1691:src/display.c **** 	dn_abs(&x, rgx);
 2195              		.loc 1 1691 11 view .LVU650
 2196 0010 0125     		movs	r5, #1
 2197              	.L201:
1748:src/display.c **** 
 2198              		.loc 1 1748 7 view .LVU651
 2199 0012 2846     		mov	r0, r5
 2200 0014 37B0     		add	sp, sp, #220
 2201              		.cfi_remember_state
 2202              		.cfi_def_cfa_offset 20
 2203              		@ sp needed
 2204 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2205              	.LVL231:
ARM GAS  /tmp/ccPzxiH4.s 			page 94


 2206              	.L232:
 2207              		.cfi_restore_state
 2208              	.LBB277:
 2209              	.LBI277:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2210              		.loc 1 1685 18 is_stmt 1 view .LVU652
 2211              	.LBB278:
1692:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2212              		.loc 1 1692 2 view .LVU653
 2213 0018 3146     		mov	r1, r6
 2214 001a 0546     		mov	r5, r0
 2215 001c 09A8     		add	r0, sp, #36
 2216 001e FFF7FEFF 		bl	dn_abs
 2217              	.LVL232:
1693:src/display.c **** 	  return 0;
 2218              		.loc 1 1693 2 view .LVU654
1693:src/display.c **** 	  return 0;
 2219              		.loc 1 1693 6 is_stmt 0 view .LVU655
 2220 0022 5C49     		ldr	r1, .L237
 2221 0024 09A8     		add	r0, sp, #36
 2222 0026 FFF7FEFF 		bl	dn_lt
 2223              	.LVL233:
1693:src/display.c **** 	  return 0;
 2224              		.loc 1 1693 5 view .LVU656
 2225 002a 0028     		cmp	r0, #0
 2226 002c F1D0     		beq	.L201
1695:src/display.c **** 	  return 0;
 2227              		.loc 1 1695 2 is_stmt 1 view .LVU657
1695:src/display.c **** 	  return 0;
 2228              		.loc 1 1695 6 is_stmt 0 view .LVU658
 2229 002e 5A49     		ldr	r1, .L237+4
 2230 0030 09A8     		add	r0, sp, #36
 2231 0032 FFF7FEFF 		bl	dn_lt
 2232              	.LVL234:
1695:src/display.c **** 	  return 0;
 2233              		.loc 1 1695 5 view .LVU659
 2234 0036 0746     		mov	r7, r0
 2235 0038 0028     		cmp	r0, #0
 2236 003a EAD1     		bne	.L201
1697:src/display.c **** 	  if (res != NULL)
 2237              		.loc 1 1697 2 is_stmt 1 view .LVU660
1697:src/display.c **** 	  if (res != NULL)
 2238              		.loc 1 1697 5 is_stmt 0 view .LVU661
 2239 003c 96F90830 		ldrsb	r3, [r6, #8]
 2240 0040 002B     		cmp	r3, #0
 2241 0042 C0F28680 		blt	.L233
 2242              	.LVL235:
 2243              	.L206:
1703:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2244              		.loc 1 1703 2 is_stmt 1 view .LVU662
 2245 0046 09A9     		add	r1, sp, #36
 2246 0048 12A8     		add	r0, sp, #72
 2247 004a FFF7FEFF 		bl	decNumberFrac
 2248              	.LVL236:
1704:src/display.c **** 
 2249              		.loc 1 1704 2 view .LVU663
 2250 004e 12AA     		add	r2, sp, #72
ARM GAS  /tmp/ccPzxiH4.s 			page 95


 2251 0050 24A9     		add	r1, sp, #144
 2252 0052 1BA8     		add	r0, sp, #108
 2253 0054 FFF7FEFF 		bl	decNumber2Fraction
 2254              	.LVL237:
1706:src/display.c **** 	dn_compare(&t, &t, &w);
 2255              		.loc 1 1706 2 view .LVU664
 2256 0058 24AA     		add	r2, sp, #144
 2257 005a 1BA9     		add	r1, sp, #108
 2258 005c 2DA8     		add	r0, sp, #180
 2259 005e FFF7FEFF 		bl	dn_divide
 2260              	.LVL238:
1707:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2261              		.loc 1 1707 2 view .LVU665
 2262 0062 2DA9     		add	r1, sp, #180
 2263 0064 12AA     		add	r2, sp, #72
 2264 0066 0846     		mov	r0, r1
 2265 0068 FFF7FEFF 		bl	dn_compare
 2266              	.LVL239:
1708:src/display.c **** 
 2267              		.loc 1 1708 2 view .LVU666
 2268 006c 09A9     		add	r1, sp, #36
 2269 006e 12A8     		add	r0, sp, #72
 2270 0070 FFF7FEFF 		bl	decNumberTrunc
 2271              	.LVL240:
1710:src/display.c **** 	  dn_inc(&w);
 2272              		.loc 1 1710 2 view .LVU667
1710:src/display.c **** 	  dn_inc(&w);
 2273              		.loc 1 1710 6 is_stmt 0 view .LVU668
 2274 0074 24A9     		add	r1, sp, #144
 2275 0076 1BA8     		add	r0, sp, #108
 2276 0078 FFF7FEFF 		bl	dn_eq
 2277              	.LVL241:
1710:src/display.c **** 	  dn_inc(&w);
 2278              		.loc 1 1710 5 view .LVU669
 2279 007c 0028     		cmp	r0, #0
 2280 007e 70D1     		bne	.L234
 2281              	.L208:
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2282              		.loc 1 1715 2 is_stmt 1 view .LVU670
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2283              		.loc 1 1715 6 is_stmt 0 view .LVU671
 2284 0080 464B     		ldr	r3, .L237+8
 2285 0082 1B68     		ldr	r3, [r3]
 2286 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2287              		.loc 1 1715 5 view .LVU672
 2288 0088 DB06     		lsls	r3, r3, #27
 2289 008a 55D4     		bmi	.L209
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2290              		.loc 1 1716 4 is_stmt 1 view .LVU673
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2291              		.loc 1 1716 9 is_stmt 0 view .LVU674
 2292 008c 12A8     		add	r0, sp, #72
 2293 008e FFF7FEFF 		bl	dn_eq0
 2294              	.LVL242:
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2295              		.loc 1 1716 7 view .LVU675
ARM GAS  /tmp/ccPzxiH4.s 			page 96


 2296 0092 0028     		cmp	r0, #0
 2297 0094 6CD0     		beq	.L235
1687:src/display.c **** 	int j;
 2298              		.loc 1 1687 17 view .LVU676
 2299 0096 01AE     		add	r6, sp, #4
 2300              	.LVL243:
1687:src/display.c **** 	int j;
 2301              		.loc 1 1687 17 view .LVU677
 2302 0098 3546     		mov	r5, r6
 2303              	.L210:
 2304              	.LVL244:
1724:src/display.c **** 	*p++ = '/';
 2305              		.loc 1 1724 2 is_stmt 1 view .LVU678
1724:src/display.c **** 	*p++ = '/';
 2306              		.loc 1 1724 17 is_stmt 0 view .LVU679
 2307 009a 1BA8     		add	r0, sp, #108
 2308 009c FFF7FEFF 		bl	dn_to_int
 2309              	.LVL245:
 2310 00a0 0146     		mov	r1, r0
1724:src/display.c **** 	*p++ = '/';
 2311              		.loc 1 1724 6 view .LVU680
 2312 00a2 2846     		mov	r0, r5
 2313 00a4 FFF7FEFF 		bl	num_arg
 2314              	.LVL246:
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2315              		.loc 1 1725 2 is_stmt 1 view .LVU681
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2316              		.loc 1 1725 4 is_stmt 0 view .LVU682
 2317 00a8 0546     		mov	r5, r0
 2318              	.LVL247:
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2319              		.loc 1 1725 7 view .LVU683
 2320 00aa 2F23     		movs	r3, #47
 2321 00ac 05F8013B 		strb	r3, [r5], #1
 2322              	.LVL248:
1726:src/display.c **** 	*p = '\0';
 2323              		.loc 1 1726 2 is_stmt 1 view .LVU684
1726:src/display.c **** 	*p = '\0';
 2324              		.loc 1 1726 17 is_stmt 0 view .LVU685
 2325 00b0 24A8     		add	r0, sp, #144
 2326 00b2 FFF7FEFF 		bl	dn_to_int
 2327              	.LVL249:
 2328 00b6 0146     		mov	r1, r0
1726:src/display.c **** 	*p = '\0';
 2329              		.loc 1 1726 6 view .LVU686
 2330 00b8 2846     		mov	r0, r5
 2331 00ba FFF7FEFF 		bl	num_arg
 2332              	.LVL250:
1727:src/display.c **** 	if ((p - 12) > buf) {
 2333              		.loc 1 1727 2 is_stmt 1 view .LVU687
1727:src/display.c **** 	if ((p - 12) > buf) {
 2334              		.loc 1 1727 5 is_stmt 0 view .LVU688
 2335 00be 0546     		mov	r5, r0
 2336 00c0 0023     		movs	r3, #0
 2337 00c2 05F80C39 		strb	r3, [r5], #-12
1728:src/display.c **** 	  p -= 12;
 2338              		.loc 1 1728 2 is_stmt 1 view .LVU689
ARM GAS  /tmp/ccPzxiH4.s 			page 97


1728:src/display.c **** 	  p -= 12;
 2339              		.loc 1 1728 5 is_stmt 0 view .LVU690
 2340 00c6 B542     		cmp	r5, r6
 2341 00c8 32D8     		bhi	.L211
 2342 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2343              	.LVL251:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2344              		.loc 1 1732 12 is_stmt 1 view .LVU691
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2345              		.loc 1 1732 2 is_stmt 0 view .LVU692
 2346 00ce 51B1     		cbz	r1, .L213
1731:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2347              		.loc 1 1731 11 view .LVU693
 2348 00d0 3546     		mov	r5, r6
 2349              	.LVL252:
 2350              	.L216:
1733:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2351              		.loc 1 1733 4 is_stmt 1 view .LVU694
 2352              	.LBB279:
 2353              	.LBI279:
 339:src/display.c ****   if (res) *res++ = ch;
 2354              		.loc 1 339 14 view .LVU695
 2355              	.LBB280:
 340:src/display.c ****   else	set_dig(base, ch);
 2356              		.loc 1 340 3 view .LVU696
 340:src/display.c ****   else	set_dig(base, ch);
 2357              		.loc 1 340 12 view .LVU697
 340:src/display.c ****   else	set_dig(base, ch);
 2358              		.loc 1 340 16 is_stmt 0 view .LVU698
 2359 00d2 2346     		mov	r3, r4
 2360              	.LVL253:
 340:src/display.c ****   else	set_dig(base, ch);
 2361              		.loc 1 340 6 view .LVU699
 2362 00d4 34B3     		cbz	r4, .L214
 2363              	.LVL254:
 340:src/display.c ****   else	set_dig(base, ch);
 2364              		.loc 1 340 19 view .LVU700
 2365 00d6 03F8011B 		strb	r1, [r3], #1
 2366              	.LVL255:
 340:src/display.c ****   else	set_dig(base, ch);
 2367              		.loc 1 340 16 view .LVU701
 2368 00da 1C46     		mov	r4, r3
 2369              	.LVL256:
 2370              	.L215:
 342:src/display.c **** }
 2371              		.loc 1 342 3 is_stmt 1 view .LVU702
 342:src/display.c **** }
 2372              		.loc 1 342 3 is_stmt 0 view .LVU703
 2373              	.LBE280:
 2374              	.LBE279:
1734:src/display.c **** 	}
 2375              		.loc 1 1734 4 is_stmt 1 view .LVU704
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2376              		.loc 1 1732 12 is_stmt 0 view .LVU705
 2377 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2378              	.LVL257:
1734:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 98


 2379              		.loc 1 1734 6 view .LVU706
 2380 00e0 0937     		adds	r7, r7, #9
 2381              	.LVL258:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2382              		.loc 1 1732 24 is_stmt 1 view .LVU707
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2383              		.loc 1 1732 12 view .LVU708
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2384              		.loc 1 1732 2 is_stmt 0 view .LVU709
 2385 00e2 0029     		cmp	r1, #0
 2386 00e4 F5D1     		bne	.L216
 2387              	.LVL259:
 2388              	.L213:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2389              		.loc 1 1737 2 is_stmt 1 view .LVU710
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2390              		.loc 1 1737 6 is_stmt 0 view .LVU711
 2391 00e6 2DA8     		add	r0, sp, #180
 2392 00e8 FFF7FEFF 		bl	dn_eq0
 2393              	.LVL260:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2394              		.loc 1 1737 5 view .LVU712
 2395 00ec F0B9     		cbnz	r0, .L224
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
 2396              		.loc 1 1739 7 is_stmt 1 view .LVU713
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
 2397              		.loc 1 1739 10 is_stmt 0 view .LVU714
 2398 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1742:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2399              		.loc 1 1742 6 view .LVU715
 2400 00f2 2B4D     		ldr	r5, .L237+12
 2401 00f4 2B4B     		ldr	r3, .L237+16
 2402 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2403 00fa 38BF     		it	cc
 2404 00fc 1D46     		movcc	r5, r3
 2405              	.L217:
 2406              	.LVL261:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2407              		.loc 1 1743 26 is_stmt 1 view .LVU716
 2408              	.LBB283:
 2409              	.LBB281:
 340:src/display.c ****   else	set_dig(base, ch);
 2410              		.loc 1 340 16 is_stmt 0 view .LVU717
 2411 00fe 6C26     		movs	r6, #108
 2412 0100 2021     		movs	r1, #32
 2413 0102 08E0     		b	.L220
 2414              	.LVL262:
 2415              	.L236:
 340:src/display.c ****   else	set_dig(base, ch);
 2416              		.loc 1 340 16 view .LVU718
 2417              	.LBE281:
 2418              	.LBE283:
 2419              	.LBB284:
 2420              	.LBB285:
 340:src/display.c ****   else	set_dig(base, ch);
 2421              		.loc 1 340 19 view .LVU719
 2422 0104 03F8011B 		strb	r1, [r3], #1
ARM GAS  /tmp/ccPzxiH4.s 			page 99


 2423              	.LVL263:
 340:src/display.c ****   else	set_dig(base, ch);
 2424              		.loc 1 340 16 view .LVU720
 2425 0108 1C46     		mov	r4, r3
 2426              	.LVL264:
 2427              	.L219:
 342:src/display.c **** }
 2428              		.loc 1 342 3 is_stmt 1 view .LVU721
 342:src/display.c **** }
 2429              		.loc 1 342 3 is_stmt 0 view .LVU722
 2430              	.LBE285:
 2431              	.LBE284:
1745:src/display.c **** 	}
 2432              		.loc 1 1745 4 is_stmt 1 view .LVU723
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2433              		.loc 1 1743 26 is_stmt 0 view .LVU724
 2434 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2435              	.LVL265:
1745:src/display.c **** 	}
 2436              		.loc 1 1745 6 view .LVU725
 2437 010e 0736     		adds	r6, r6, #7
 2438              	.LVL266:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2439              		.loc 1 1743 38 is_stmt 1 view .LVU726
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2440              		.loc 1 1743 26 view .LVU727
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2441              		.loc 1 1743 2 is_stmt 0 view .LVU728
 2442 0110 0029     		cmp	r1, #0
 2443 0112 3FF47DAF 		beq	.L221
 2444              	.LVL267:
 2445              	.L220:
1744:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2446              		.loc 1 1744 4 is_stmt 1 view .LVU729
 2447              	.LBB287:
 2448              	.LBI284:
 339:src/display.c ****   if (res) *res++ = ch;
 2449              		.loc 1 339 14 view .LVU730
 2450              	.LBB286:
 340:src/display.c ****   else	set_dig(base, ch);
 2451              		.loc 1 340 3 view .LVU731
 340:src/display.c ****   else	set_dig(base, ch);
 2452              		.loc 1 340 12 view .LVU732
 340:src/display.c ****   else	set_dig(base, ch);
 2453              		.loc 1 340 16 is_stmt 0 view .LVU733
 2454 0116 2346     		mov	r3, r4
 2455              	.LVL268:
 340:src/display.c ****   else	set_dig(base, ch);
 2456              		.loc 1 340 6 view .LVU734
 2457 0118 002C     		cmp	r4, #0
 2458 011a F3D1     		bne	.L236
 2459              	.LVL269:
 341:src/display.c ****   return res;
 2460              		.loc 1 341 8 is_stmt 1 view .LVU735
 2461 011c 3046     		mov	r0, r6
 2462 011e FFF7FEFF 		bl	set_dig
 2463              	.LVL270:
ARM GAS  /tmp/ccPzxiH4.s 			page 100


 341:src/display.c ****   return res;
 2464              		.loc 1 341 8 is_stmt 0 view .LVU736
 2465 0122 F2E7     		b	.L219
 2466              	.LVL271:
 2467              	.L214:
 341:src/display.c ****   return res;
 2468              		.loc 1 341 8 view .LVU737
 2469              	.LBE286:
 2470              	.LBE287:
 2471              	.LBB288:
 2472              	.LBB282:
 341:src/display.c ****   return res;
 2473              		.loc 1 341 8 is_stmt 1 view .LVU738
 2474 0124 3846     		mov	r0, r7
 2475 0126 FFF7FEFF 		bl	set_dig
 2476              	.LVL272:
 341:src/display.c ****   return res;
 2477              		.loc 1 341 8 is_stmt 0 view .LVU739
 2478 012a D7E7     		b	.L215
 2479              	.LVL273:
 2480              	.L224:
 341:src/display.c ****   return res;
 2481              		.loc 1 341 8 view .LVU740
 2482              	.LBE282:
 2483              	.LBE288:
1738:src/display.c **** 	else if (decNumberIsNegative(&t))
 2484              		.loc 1 1738 6 view .LVU741
 2485 012c 1E4D     		ldr	r5, .L237+20
 2486 012e E6E7     		b	.L217
 2487              	.LVL274:
 2488              	.L211:
1729:src/display.c **** 	  *p = '<';
 2489              		.loc 1 1729 4 is_stmt 1 view .LVU742
1730:src/display.c **** 	} else	p = buf;
 2490              		.loc 1 1730 4 view .LVU743
1730:src/display.c **** 	} else	p = buf;
 2491              		.loc 1 1730 7 is_stmt 0 view .LVU744
 2492 0130 3C21     		movs	r1, #60
 2493 0132 00F80C1C 		strb	r1, [r0, #-12]
 2494              	.LVL275:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2495              		.loc 1 1732 12 is_stmt 1 view .LVU745
 2496 0136 CCE7     		b	.L216
 2497              	.LVL276:
 2498              	.L209:
1721:src/display.c **** 	  dn_add(&n, &n, &x);
 2499              		.loc 1 1721 4 view .LVU746
 2500 0138 12A9     		add	r1, sp, #72
 2501 013a 24AA     		add	r2, sp, #144
 2502 013c 09A8     		add	r0, sp, #36
 2503 013e FFF7FEFF 		bl	dn_multiply
 2504              	.LVL277:
1722:src/display.c **** 	}
 2505              		.loc 1 1722 4 view .LVU747
 2506 0142 1BA9     		add	r1, sp, #108
 2507 0144 09AA     		add	r2, sp, #36
 2508 0146 0846     		mov	r0, r1
ARM GAS  /tmp/ccPzxiH4.s 			page 101


1687:src/display.c **** 	int j;
 2509              		.loc 1 1687 17 is_stmt 0 view .LVU748
 2510 0148 01AE     		add	r6, sp, #4
 2511              	.LVL278:
1722:src/display.c **** 	}
 2512              		.loc 1 1722 4 view .LVU749
 2513 014a FFF7FEFF 		bl	dn_add
 2514              	.LVL279:
1687:src/display.c **** 	int j;
 2515              		.loc 1 1687 17 view .LVU750
 2516 014e 3546     		mov	r5, r6
 2517 0150 A3E7     		b	.L210
 2518              	.LVL280:
 2519              	.L233:
1698:src/display.c **** 	    *res++ += '-';
 2520              		.loc 1 1698 4 is_stmt 1 view .LVU751
1698:src/display.c **** 	    *res++ += '-';
 2521              		.loc 1 1698 7 is_stmt 0 view .LVU752
 2522 0152 D4B1     		cbz	r4, .L207
1699:src/display.c **** 	  else
 2523              		.loc 1 1699 6 is_stmt 1 view .LVU753
1699:src/display.c **** 	  else
 2524              		.loc 1 1699 10 is_stmt 0 view .LVU754
 2525 0154 2346     		mov	r3, r4
 2526              	.LVL281:
1699:src/display.c **** 	  else
 2527              		.loc 1 1699 13 view .LVU755
 2528 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2529              	.LVL282:
1699:src/display.c **** 	  else
 2530              		.loc 1 1699 13 view .LVU756
 2531 015a 2D32     		adds	r2, r2, #45
 2532 015c 2270     		strb	r2, [r4]
1699:src/display.c **** 	  else
 2533              		.loc 1 1699 10 view .LVU757
 2534 015e 1C46     		mov	r4, r3
 2535              	.LVL283:
1699:src/display.c **** 	  else
 2536              		.loc 1 1699 10 view .LVU758
 2537 0160 71E7     		b	.L206
 2538              	.LVL284:
 2539              	.L234:
1711:src/display.c **** 	  decNumberZero(&n);
 2540              		.loc 1 1711 4 is_stmt 1 view .LVU759
 2541 0162 12A8     		add	r0, sp, #72
 2542 0164 FFF7FEFF 		bl	dn_inc
 2543              	.LVL285:
1712:src/display.c **** 	}
 2544              		.loc 1 1712 4 view .LVU760
 2545 0168 1BA8     		add	r0, sp, #108
 2546 016a FFF7FEFF 		bl	decNumberZero
 2547              	.LVL286:
 2548 016e 87E7     		b	.L208
 2549              	.L235:
1717:src/display.c **** 	    *p++ = ' ';
 2550              		.loc 1 1717 6 view .LVU761
1717:src/display.c **** 	    *p++ = ' ';
ARM GAS  /tmp/ccPzxiH4.s 			page 102


 2551              		.loc 1 1717 21 is_stmt 0 view .LVU762
 2552 0170 12A8     		add	r0, sp, #72
 2553 0172 FFF7FEFF 		bl	dn_to_int
 2554              	.LVL287:
1717:src/display.c **** 	    *p++ = ' ';
 2555              		.loc 1 1717 10 view .LVU763
 2556 0176 01AE     		add	r6, sp, #4
 2557              	.LVL288:
1717:src/display.c **** 	    *p++ = ' ';
 2558              		.loc 1 1717 21 view .LVU764
 2559 0178 0146     		mov	r1, r0
1717:src/display.c **** 	    *p++ = ' ';
 2560              		.loc 1 1717 10 view .LVU765
 2561 017a 3046     		mov	r0, r6
 2562 017c FFF7FEFF 		bl	num_arg
 2563              	.LVL289:
1718:src/display.c **** 	  }
 2564              		.loc 1 1718 6 is_stmt 1 view .LVU766
1718:src/display.c **** 	  }
 2565              		.loc 1 1718 8 is_stmt 0 view .LVU767
 2566 0180 0546     		mov	r5, r0
 2567              	.LVL290:
1718:src/display.c **** 	  }
 2568              		.loc 1 1718 11 view .LVU768
 2569 0182 2023     		movs	r3, #32
 2570 0184 05F8013B 		strb	r3, [r5], #1
 2571              	.LVL291:
1718:src/display.c **** 	  }
 2572              		.loc 1 1718 11 view .LVU769
 2573 0188 87E7     		b	.L210
 2574              	.LVL292:
 2575              	.L207:
1701:src/display.c **** 	}
 2576              		.loc 1 1701 6 is_stmt 1 view .LVU770
 2577              	.LBB289:
 2578              	.LBI289:
 244:src/display.c **** {
 2579              		.loc 1 244 13 view .LVU771
 2580              	.LBB290:
 246:src/display.c **** }
 2581              		.loc 1 246 3 view .LVU772
 2582 018a 8120     		movs	r0, #129
 2583 018c FFF7FEFF 		bl	set_dot
 2584              	.LVL293:
 247:src/display.c **** 
 2585              		.loc 1 247 1 is_stmt 0 view .LVU773
 2586 0190 59E7     		b	.L206
 2587              	.L238:
 2588 0192 00BF     		.align	2
 2589              	.L237:
 2590 0194 00000000 		.word	const_100000
 2591 0198 00000000 		.word	const_0_0001
 2592 019c 00000000 		.word	main_ram
 2593 01a0 00000000 		.word	.LANCHOR5
 2594 01a4 00000000 		.word	.LANCHOR7
 2595 01a8 00000000 		.word	.LANCHOR6
 2596              	.LBE290:
ARM GAS  /tmp/ccPzxiH4.s 			page 103


 2597              	.LBE289:
 2598              	.LBE278:
 2599              	.LBE277:
 2600              		.cfi_endproc
 2601              	.LFE23:
 2603              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2604              		.align	2
 2605              	.LC1:
 2606 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2606      36376F39 
 2606      44313233 
 2606      34356800 
 2607              		.section	.text.carry_overflow,"ax",%progbits
 2608              		.align	1
 2609              		.p2align 2,,3
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2613              		.fpu fpv4-sp-d16
 2615              	carry_overflow:
 2616              	.LFB15:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 2617              		.loc 1 494 38 is_stmt 1 view -0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
 495:src/display.c ****       int c;
 2621              		.loc 1 495 7 view .LVU775
 2622              	.LVL294:
 496:src/display.c ****       unsigned int b;
 2623              		.loc 1 496 7 view .LVU776
 497:src/display.c **** 
 2624              		.loc 1 497 7 view .LVU777
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2625              		.loc 1 500 7 view .LVU778
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 2626              		.loc 1 494 38 is_stmt 0 view .LVU779
 2627 0000 10B5     		push	{r4, lr}
 2628              		.cfi_def_cfa_offset 8
 2629              		.cfi_offset 4, -8
 2630              		.cfi_offset 14, -4
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2631              		.loc 1 500 21 view .LVU780
 2632 0002 1A4B     		ldr	r3, .L252
 2633 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2634 0006 023B     		subs	r3, r3, #2
 2635 0008 DBB2     		uxtb	r3, r3
 2636 000a 032B     		cmp	r3, #3
 2637 000c 14D8     		bhi	.L240
 2638 000e 184A     		ldr	r2, .L252+4
 2639 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2640              	.LVL295:
 509:src/display.c **** 	SET_EXP_SIGN;
 2641              		.loc 1 509 7 is_stmt 1 view .LVU781
 509:src/display.c **** 	SET_EXP_SIGN;
 2642              		.loc 1 509 18 is_stmt 0 view .LVU782
 2643 0014 A4F10B03 		sub	r3, r4, #11
ARM GAS  /tmp/ccPzxiH4.s 			page 104


 509:src/display.c **** 	SET_EXP_SIGN;
 2644              		.loc 1 509 10 view .LVU783
 2645 0018 042B     		cmp	r3, #4
 2646 001a 17D9     		bls	.L249
 2647              	.L242:
 511:src/display.c ****       set_dig(base, c);
 2648              		.loc 1 511 7 is_stmt 1 view .LVU784
 2649              	.LVL296:
 512:src/display.c **** 
 2650              		.loc 1 512 7 view .LVU785
 511:src/display.c ****       set_dig(base, c);
 2651              		.loc 1 511 28 is_stmt 0 view .LVU786
 2652 001c 154B     		ldr	r3, .L252+8
 2653 001e 1C44     		add	r4, r4, r3
 2654              	.LVL297:
 512:src/display.c **** 
 2655              		.loc 1 512 7 view .LVU787
 2656 0020 6C20     		movs	r0, #108
 2657 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2658 0026 FFF7FEFF 		bl	set_dig
 2659              	.LVL298:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2660              		.loc 1 515 7 is_stmt 1 view .LVU788
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2661              		.loc 1 515 11 is_stmt 0 view .LVU789
 2662 002a FFF7FEFF 		bl	get_carry
 2663              	.LVL299:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2664              		.loc 1 515 10 view .LVU790
 2665 002e B8B9     		cbnz	r0, .L250
 2666              	.L243:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2667              		.loc 1 517 7 is_stmt 1 view .LVU791
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2668              		.loc 1 517 11 is_stmt 0 view .LVU792
 2669 0030 FFF7FEFF 		bl	get_overflow
 2670              	.LVL300:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2671              		.loc 1 517 10 view .LVU793
 2672 0034 70B9     		cbnz	r0, .L251
 519:src/display.c **** 
 2673              		.loc 1 519 5 view .LVU794
 2674 0036 10BD     		pop	{r4, pc}
 2675              	.LVL301:
 2676              	.L240:
 505:src/display.c ****       }
 2677              		.loc 1 505 16 is_stmt 1 view .LVU795
 505:src/display.c ****       }
 2678              		.loc 1 505 26 is_stmt 0 view .LVU796
 2679 0038 0F4B     		ldr	r3, .L252+12
 2680 003a 1B68     		ldr	r3, [r3]
 2681 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2682 0040 2409     		lsrs	r4, r4, #4
 505:src/display.c ****       }
 2683              		.loc 1 505 35 view .LVU797
 2684 0042 0134     		adds	r4, r4, #1
 2685              	.LVL302:
ARM GAS  /tmp/ccPzxiH4.s 			page 105


 505:src/display.c ****       }
 2686              		.loc 1 505 39 is_stmt 1 view .LVU798
 509:src/display.c **** 	SET_EXP_SIGN;
 2687              		.loc 1 509 7 view .LVU799
 509:src/display.c **** 	SET_EXP_SIGN;
 2688              		.loc 1 509 18 is_stmt 0 view .LVU800
 2689 0044 A4F10B03 		sub	r3, r4, #11
 509:src/display.c **** 	SET_EXP_SIGN;
 2690              		.loc 1 509 10 view .LVU801
 2691 0048 042B     		cmp	r3, #4
 2692 004a E7D8     		bhi	.L242
 2693              	.L249:
 510:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2694              		.loc 1 510 2 is_stmt 1 view .LVU802
 2695              	.LBB297:
 2696              	.LBI297:
 254:src/display.c **** {
 2697              		.loc 1 254 13 view .LVU803
 2698              	.LBB298:
 256:src/display.c **** }
 2699              		.loc 1 256 3 view .LVU804
 2700 004c 8220     		movs	r0, #130
 2701 004e FFF7FEFF 		bl	set_dot
 2702              	.LVL303:
 257:src/display.c **** 
 2703              		.loc 1 257 1 is_stmt 0 view .LVU805
 2704 0052 E3E7     		b	.L242
 2705              	.LVL304:
 2706              	.L251:
 257:src/display.c **** 
 2707              		.loc 1 257 1 view .LVU806
 2708              	.LBE298:
 2709              	.LBE297:
 2710              	.LBB299:
 2711              	.LBI299:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 2712              		.loc 1 494 17 is_stmt 1 view .LVU807
 2713              	.LBB300:
 518:src/display.c ****     }
 2714              		.loc 1 518 2 view .LVU808
 2715              	.LBE300:
 2716              	.LBE299:
 519:src/display.c **** 
 2717              		.loc 1 519 5 is_stmt 0 view .LVU809
 2718 0054 BDE81040 		pop	{r4, lr}
 2719              		.cfi_remember_state
 2720              		.cfi_restore 14
 2721              		.cfi_restore 4
 2722              		.cfi_def_cfa_offset 0
 2723              	.LVL305:
 2724              	.LBB302:
 2725              	.LBB301:
 518:src/display.c ****     }
 2726              		.loc 1 518 2 view .LVU810
 2727 0058 6F21     		movs	r1, #111
 2728 005a 7A20     		movs	r0, #122
 2729 005c FFF7FEBF 		b	set_dig
ARM GAS  /tmp/ccPzxiH4.s 			page 106


 2730              	.LVL306:
 2731              	.L250:
 2732              		.cfi_restore_state
 518:src/display.c ****     }
 2733              		.loc 1 518 2 view .LVU811
 2734              	.LBE301:
 2735              	.LBE302:
 516:src/display.c ****       if (get_overflow())
 2736              		.loc 1 516 2 is_stmt 1 view .LVU812
 2737 0060 6321     		movs	r1, #99
 2738 0062 7320     		movs	r0, #115
 2739 0064 FFF7FEFF 		bl	set_dig
 2740              	.LVL307:
 2741 0068 E2E7     		b	.L243
 2742              	.L253:
 2743 006a 00BF     		.align	2
 2744              	.L252:
 2745 006c 00000000 		.word	StateWhileOn
 2746 0070 00000000 		.word	.LANCHOR8
 2747 0074 00000000 		.word	.LC1
 2748 0078 00000000 		.word	main_ram
 2749              		.cfi_endproc
 2750              	.LFE15:
 2752              		.global	__aeabi_uldivmod
 2753              		.section	.text.set_int_x,"ax",%progbits
 2754              		.align	1
 2755              		.p2align 2,,3
 2756              		.syntax unified
 2757              		.thumb
 2758              		.thumb_func
 2759              		.fpu fpv4-sp-d16
 2761              	set_int_x:
 2762              	.LVL308:
 2763              	.LFB18:
1411:src/display.c **** 	const int ws = word_size();
 2764              		.loc 1 1411 67 view -0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 80
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/display.c **** 	const int ws = word_size();
 2768              		.loc 1 1411 67 is_stmt 0 view .LVU814
 2769 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2770              		.cfi_def_cfa_offset 36
 2771              		.cfi_offset 4, -36
 2772              		.cfi_offset 5, -32
 2773              		.cfi_offset 6, -28
 2774              		.cfi_offset 7, -24
 2775              		.cfi_offset 8, -20
 2776              		.cfi_offset 9, -16
 2777              		.cfi_offset 10, -12
 2778              		.cfi_offset 11, -8
 2779              		.cfi_offset 14, -4
 2780 0004 95B0     		sub	sp, sp, #84
 2781              		.cfi_def_cfa_offset 120
1411:src/display.c **** 	const int ws = word_size();
 2782              		.loc 1 1411 67 view .LVU815
 2783 0006 0646     		mov	r6, r0
ARM GAS  /tmp/ccPzxiH4.s 			page 107


 2784 0008 0092     		str	r2, [sp]
 2785 000a 0F46     		mov	r7, r1
1412:src/display.c **** 	unsigned int b;
 2786              		.loc 1 1412 2 is_stmt 1 view .LVU816
1412:src/display.c **** 	unsigned int b;
 2787              		.loc 1 1412 17 is_stmt 0 view .LVU817
 2788 000c FFF7FEFF 		bl	word_size
 2789              	.LVL309:
1412:src/display.c **** 	unsigned int b;
 2790              		.loc 1 1412 17 view .LVU818
 2791 0010 B94B     		ldr	r3, .L346
 2792 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2793 0014 023B     		subs	r3, r3, #2
 2794 0016 DBB2     		uxtb	r3, r3
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2795              		.loc 1 1418 6 view .LVU819
 2796 0018 0022     		movs	r2, #0
 2797 001a 032B     		cmp	r3, #3
1412:src/display.c **** 	unsigned int b;
 2798              		.loc 1 1412 17 view .LVU820
 2799 001c 8346     		mov	fp, r0
 2800              	.LVL310:
1413:src/display.c **** 	long long int vs = value;
 2801              		.loc 1 1413 2 is_stmt 1 view .LVU821
1414:src/display.c **** 	unsigned long long int v;
 2802              		.loc 1 1414 2 view .LVU822
1415:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2803              		.loc 1 1415 2 view .LVU823
1416:src/display.c **** 	int i, j, k;
 2804              		.loc 1 1416 2 view .LVU824
1417:src/display.c **** 	int sign = 0;
 2805              		.loc 1 1417 2 view .LVU825
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2806              		.loc 1 1418 2 view .LVU826
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2807              		.loc 1 1418 6 is_stmt 0 view .LVU827
 2808 001e 0292     		str	r2, [sp, #8]
1419:src/display.c **** 
 2809              		.loc 1 1419 2 is_stmt 1 view .LVU828
 2810              	.LVL311:
1421:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2811              		.loc 1 1421 2 view .LVU829
 2812 0020 00F24281 		bhi	.L255
 2813 0024 B54A     		ldr	r2, .L346+4
 2814 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 2815              	.LVL312:
1429:src/display.c **** 	  IntMaxWindow = 0;
 2816              		.loc 1 1429 2 view .LVU830
1429:src/display.c **** 	  IntMaxWindow = 0;
 2817              		.loc 1 1429 5 is_stmt 0 view .LVU831
 2818 002a 009B     		ldr	r3, [sp]
 2819 002c 002B     		cmp	r3, #0
 2820 002e 00F04281 		beq	.L337
 2821              	.LVL313:
 2822              	.L257:
1434:src/display.c **** 	  v = extract_value(value, &sign);
 2823              		.loc 1 1434 2 is_stmt 1 view .LVU832
ARM GAS  /tmp/ccPzxiH4.s 			page 108


1434:src/display.c **** 	  v = extract_value(value, &sign);
 2824              		.loc 1 1434 24 is_stmt 0 view .LVU833
 2825 0032 6B1E     		subs	r3, r5, #1
1434:src/display.c **** 	  v = extract_value(value, &sign);
 2826              		.loc 1 1434 30 view .LVU834
 2827 0034 47F67574 		movw	r4, #32629
 2828 0038 1C41     		asrs	r4, r4, r3
1434:src/display.c **** 	  v = extract_value(value, &sign);
 2829              		.loc 1 1434 5 view .LVU835
 2830 003a 14F00104 		ands	r4, r4, #1
 2831 003e 40F0F280 		bne	.L338
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2832              		.loc 1 1451 4 is_stmt 1 view .LVU836
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2833              		.loc 1 1451 7 is_stmt 0 view .LVU837
 2834 0042 BBF13F0F 		cmp	fp, #63
 2835 0046 16DC     		bgt	.L268
 2836              	.LBB303:
1452:src/display.c **** 	    vs &= mask;
 2837              		.loc 1 1452 6 is_stmt 1 view .LVU838
1452:src/display.c **** 	    vs &= mask;
 2838              		.loc 1 1452 38 is_stmt 0 view .LVU839
 2839 0048 0121     		movs	r1, #1
 2840 004a ABF1200C 		sub	ip, fp, #32
 2841 004e CBF12000 		rsb	r0, fp, #32
 2842 0052 21FA00F0 		lsr	r0, r1, r0
 2843 0056 01FA0CF3 		lsl	r3, r1, ip
 2844 005a 01FA0BF2 		lsl	r2, r1, fp
 2845 005e 0343     		orrs	r3, r3, r0
 2846              	.LVL314:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2847              		.loc 1 1453 6 is_stmt 1 view .LVU840
1452:src/display.c **** 	    vs &= mask;
 2848              		.loc 1 1452 26 is_stmt 0 view .LVU841
 2849 0060 12F1FF30 		adds	r0, r2, #-1
 2850 0064 43F1FF31 		adc	r1, r3, #-1
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2851              		.loc 1 1453 9 view .LVU842
 2852 0068 3040     		ands	r0, r0, r6
 2853 006a 3940     		ands	r1, r1, r7
 2854              	.LVL315:
1454:src/display.c **** 	      vs |= ~mask;
 2855              		.loc 1 1454 9 view .LVU843
 2856 006c 0A2D     		cmp	r5, #10
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2857              		.loc 1 1453 9 view .LVU844
 2858 006e 0646     		mov	r6, r0
 2859              	.LVL316:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2860              		.loc 1 1453 9 view .LVU845
 2861 0070 0F46     		mov	r7, r1
1454:src/display.c **** 	      vs |= ~mask;
 2862              		.loc 1 1454 6 is_stmt 1 view .LVU846
1454:src/display.c **** 	      vs |= ~mask;
 2863              		.loc 1 1454 9 is_stmt 0 view .LVU847
 2864 0072 00F04D81 		beq	.L339
 2865              	.LVL317:
ARM GAS  /tmp/ccPzxiH4.s 			page 109


 2866              	.L268:
1454:src/display.c **** 	      vs |= ~mask;
 2867              		.loc 1 1454 9 view .LVU848
 2868              	.LBE303:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 2869              		.loc 1 1458 4 is_stmt 1 view .LVU849
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 2870              		.loc 1 1458 8 is_stmt 0 view .LVU850
 2871 0076 A24B     		ldr	r3, .L346+8
 2872 0078 1B68     		ldr	r3, [r3]
 2873 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 2874              		.loc 1 1458 7 view .LVU851
 2875 007e 9807     		lsls	r0, r3, #30
 2876 0080 46D5     		bpl	.L299
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 2877              		.loc 1 1461 11 is_stmt 1 view .LVU852
 2878              	.LBB304:
1469:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2879              		.loc 1 1469 6 view .LVU853
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2880              		.loc 1 1470 6 view .LVU854
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2881              		.loc 1 1470 25 is_stmt 0 view .LVU855
 2882 0082 6A08     		lsrs	r2, r5, #1
 2883              	.LVL318:
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 2884              		.loc 1 1471 6 is_stmt 1 view .LVU856
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 2885              		.loc 1 1471 43 is_stmt 0 view .LVU857
 2886 0084 12F00A0F 		tst	r2, #10
 2887 0088 14BF     		ite	ne
 2888 008a 0123     		movne	r3, #1
 2889 008c 0023     		moveq	r3, #0
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 2890              		.loc 1 1471 70 view .LVU858
 2891 008e 12F00C0F 		tst	r2, #12
 2892 0092 18BF     		it	ne
 2893 0094 43F00203 		orrne	r3, r3, #2
 2894              	.LVL319:
 2895              	.L274:
1472:src/display.c **** 
 2896              		.loc 1 1472 6 is_stmt 1 discriminator 4 view .LVU859
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 2897              		.loc 1 1474 14 is_stmt 0 discriminator 4 view .LVU860
 2898 0098 0BEB0308 		add	r8, fp, r3
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 2899              		.loc 1 1474 27 discriminator 4 view .LVU861
 2900 009c 0133     		adds	r3, r3, #1
 2901              	.LVL320:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 2902              		.loc 1 1474 21 discriminator 4 view .LVU862
 2903 009e B8FBF3F8 		udiv	r8, r8, r3
1475:src/display.c **** 	      const int r = v % b;
 2904              		.loc 1 1475 6 discriminator 4 view .LVU863
 2905 00a2 B8F1000F 		cmp	r8, #0
1472:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 110


 2906              		.loc 1 1472 8 discriminator 4 view .LVU864
 2907 00a6 3046     		mov	r0, r6
 2908 00a8 3946     		mov	r1, r7
 2909              	.LVL321:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 2910              		.loc 1 1474 6 is_stmt 1 discriminator 4 view .LVU865
1475:src/display.c **** 	      const int r = v % b;
 2911              		.loc 1 1475 6 discriminator 4 view .LVU866
1475:src/display.c **** 	      const int r = v % b;
 2912              		.loc 1 1475 16 discriminator 4 view .LVU867
1475:src/display.c **** 	      const int r = v % b;
 2913              		.loc 1 1475 6 is_stmt 0 discriminator 4 view .LVU868
 2914 00aa 40F38781 		ble	.L300
 2915 00ae 03AC     		add	r4, sp, #12
 2916 00b0 DFF858B2 		ldr	fp, .L346+20
 2917              	.LVL322:
1475:src/display.c **** 	      const int r = v % b;
 2918              		.loc 1 1475 6 discriminator 4 view .LVU869
 2919 00b4 08EB0406 		add	r6, r8, r4
 2920              	.LVL323:
 2921              	.L275:
 2922              	.LBB305:
1476:src/display.c **** 	      v /= b;
 2923              		.loc 1 1476 8 is_stmt 1 discriminator 3 view .LVU870
 2924 00b8 2A46     		mov	r2, r5
 2925 00ba 0023     		movs	r3, #0
 2926 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 2927              	.LVL324:
1477:src/display.c **** 	      buf[i] = DIGITS[r];
 2928              		.loc 1 1477 8 discriminator 3 view .LVU871
1478:src/display.c **** 	    }
 2929              		.loc 1 1478 15 is_stmt 0 discriminator 3 view .LVU872
 2930 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 2931 00c4 04F8013B 		strb	r3, [r4], #1
 2932              	.LVL325:
1478:src/display.c **** 	    }
 2933              		.loc 1 1478 8 is_stmt 1 discriminator 3 view .LVU873
 2934              	.LBE305:
1475:src/display.c **** 	      const int r = v % b;
 2935              		.loc 1 1475 21 discriminator 3 view .LVU874
1475:src/display.c **** 	      const int r = v % b;
 2936              		.loc 1 1475 16 discriminator 3 view .LVU875
1475:src/display.c **** 	      const int r = v % b;
 2937              		.loc 1 1475 6 is_stmt 0 discriminator 3 view .LVU876
 2938 00c8 B442     		cmp	r4, r6
 2939 00ca F5D1     		bne	.L275
 2940 00cc 08F1FF33 		add	r3, r8, #-1
1475:src/display.c **** 	      const int r = v % b;
 2941              		.loc 1 1475 6 view .LVU877
 2942 00d0 4446     		mov	r4, r8
 2943              	.LVL326:
 2944              	.L267:
1475:src/display.c **** 	      const int r = v % b;
 2945              		.loc 1 1475 6 view .LVU878
 2946              	.LBE304:
1488:src/display.c **** 	if (res) {
 2947              		.loc 1 1488 2 is_stmt 1 view .LVU879
ARM GAS  /tmp/ccPzxiH4.s 			page 111


1489:src/display.c **** 	  if (sign) *res++ = '-';
 2948              		.loc 1 1489 2 view .LVU880
1489:src/display.c **** 	  if (sign) *res++ = '-';
 2949              		.loc 1 1489 5 is_stmt 0 view .LVU881
 2950 00d2 0099     		ldr	r1, [sp]
 2951 00d4 0029     		cmp	r1, #0
 2952 00d6 41D0     		beq	.L276
 2953              	.L340:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2954              		.loc 1 1490 4 is_stmt 1 view .LVU882
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2955              		.loc 1 1490 7 is_stmt 0 view .LVU883
 2956 00d8 029A     		ldr	r2, [sp, #8]
 2957 00da 2AB1     		cbz	r2, .L277
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2958              		.loc 1 1490 14 is_stmt 1 discriminator 1 view .LVU884
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2959              		.loc 1 1490 18 is_stmt 0 discriminator 1 view .LVU885
 2960 00dc 8A46     		mov	r10, r1
 2961              	.LVL327:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2962              		.loc 1 1490 21 discriminator 1 view .LVU886
 2963 00de 2D22     		movs	r2, #45
 2964 00e0 0AF8012B 		strb	r2, [r10], #1
 2965              	.LVL328:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2966              		.loc 1 1490 18 discriminator 1 view .LVU887
 2967 00e4 CDF800A0 		str	r10, [sp]
 2968              	.LVL329:
 2969              	.L277:
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2970              		.loc 1 1491 4 is_stmt 1 view .LVU888
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2971              		.loc 1 1491 7 is_stmt 0 view .LVU889
 2972 00e8 072C     		cmp	r4, #7
 2973 00ea 00F3EA80 		bgt	.L278
1498:src/display.c **** 	      *res++ = buf[i];
 2974              		.loc 1 1498 12 is_stmt 1 view .LVU890
 2975              	.LVL330:
1498:src/display.c **** 	      *res++ = buf[i];
 2976              		.loc 1 1498 12 is_stmt 0 view .LVU891
 2977 00ee 591C     		adds	r1, r3, #1
 2978 00f0 0BD0     		beq	.L254
 2979 00f2 0099     		ldr	r1, [sp]
 2980 00f4 03AA     		add	r2, sp, #12
 2981 00f6 1A44     		add	r2, r2, r3
 2982 00f8 01F1FF3A 		add	r10, r1, #-1
 2983 00fc 0B44     		add	r3, r3, r1
 2984              	.LVL331:
 2985              	.L281:
1499:src/display.c **** 	  }
 2986              		.loc 1 1499 8 is_stmt 1 view .LVU892
1499:src/display.c **** 	  }
 2987              		.loc 1 1499 20 is_stmt 0 view .LVU893
 2988 00fe 12F80119 		ldrb	r1, [r2], #-1	@ zero_extendqisi2
 2989              	.LVL332:
1499:src/display.c **** 	  }
ARM GAS  /tmp/ccPzxiH4.s 			page 112


 2990              		.loc 1 1499 15 view .LVU894
 2991 0102 0AF8011F 		strb	r1, [r10, #1]!
 2992              	.LVL333:
1498:src/display.c **** 	      *res++ = buf[i];
 2993              		.loc 1 1498 12 is_stmt 1 view .LVU895
1498:src/display.c **** 	      *res++ = buf[i];
 2994              		.loc 1 1498 12 is_stmt 0 view .LVU896
 2995 0106 9A45     		cmp	r10, r3
 2996 0108 F9D1     		bne	.L281
 2997              	.LVL334:
 2998              	.L254:
1546:src/display.c **** 
 2999              		.loc 1 1546 7 view .LVU897
 3000 010a 15B0     		add	sp, sp, #84
 3001              		.cfi_remember_state
 3002              		.cfi_def_cfa_offset 36
 3003              		@ sp needed
 3004 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3005              	.LVL335:
 3006              	.L299:
 3007              		.cfi_restore_state
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3008              		.loc 1 1458 25 discriminator 1 view .LVU898
 3009 0110 56EA0703 		orrs	r3, r6, r7
 3010 0114 00F0BE80 		beq	.L262
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 3011              		.loc 1 1461 11 is_stmt 1 view .LVU899
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3012              		.loc 1 1462 6 view .LVU900
 3013 0118 DFF8F0B1 		ldr	fp, .L346+20
 3014              	.LVL336:
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3015              		.loc 1 1462 8 is_stmt 0 view .LVU901
 3016 011c B046     		mov	r8, r6
 3017 011e A946     		mov	r9, r5
 3018 0120 3E46     		mov	r6, r7
1463:src/display.c **** 	      const int r = v % b;
 3019              		.loc 1 1463 6 is_stmt 1 view .LVU902
 3020              	.LVL337:
1463:src/display.c **** 	      const int r = v % b;
 3021              		.loc 1 1463 16 view .LVU903
 3022 0122 4FF0000A 		mov	r10, #0
 3023 0126 03AF     		add	r7, sp, #12
 3024              	.LVL338:
 3025              	.L273:
 3026              	.LBB306:
1464:src/display.c **** 	      v /= b;
 3027              		.loc 1 1464 8 discriminator 3 view .LVU904
 3028 0128 4046     		mov	r0, r8
 3029 012a 3146     		mov	r1, r6
 3030 012c 4A46     		mov	r2, r9
 3031 012e 5346     		mov	r3, r10
 3032 0130 FFF7FEFF 		bl	__aeabi_uldivmod
 3033              	.LVL339:
 3034 0134 3346     		mov	r3, r6
 3035 0136 9446     		mov	ip, r2
 3036              	.LVL340:
ARM GAS  /tmp/ccPzxiH4.s 			page 113


1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3037              		.loc 1 1465 8 discriminator 3 view .LVU905
 3038              	.LBE306:
1463:src/display.c **** 	      const int r = v % b;
 3039              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU906
 3040 0138 5345     		cmp	r3, r10
 3041 013a 4246     		mov	r2, r8
 3042              	.LVL341:
 3043              	.LBB307:
1466:src/display.c **** 	    }
 3044              		.loc 1 1466 15 discriminator 3 view .LVU907
 3045 013c 1BF80CC0 		ldrb	ip, [fp, ip]	@ zero_extendqisi2
 3046              	.LVL342:
1466:src/display.c **** 	    }
 3047              		.loc 1 1466 15 discriminator 3 view .LVU908
 3048 0140 07F801CB 		strb	ip, [r7], #1
 3049              	.LBE307:
1463:src/display.c **** 	      const int r = v % b;
 3050              		.loc 1 1463 6 discriminator 3 view .LVU909
 3051 0144 08BF     		it	eq
 3052 0146 4A45     		cmpeq	r2, r9
 3053              	.LBB308:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3054              		.loc 1 1465 10 discriminator 3 view .LVU910
 3055 0148 0E46     		mov	r6, r1
 3056              	.LVL343:
1466:src/display.c **** 	    }
 3057              		.loc 1 1466 8 is_stmt 1 discriminator 3 view .LVU911
 3058              	.LBE308:
1463:src/display.c **** 	      const int r = v % b;
 3059              		.loc 1 1463 24 discriminator 3 view .LVU912
 3060              	.LBB309:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3061              		.loc 1 1465 10 is_stmt 0 discriminator 3 view .LVU913
 3062 014a 8046     		mov	r8, r0
 3063 014c 2146     		mov	r1, r4
 3064              	.LVL344:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3065              		.loc 1 1465 10 discriminator 3 view .LVU914
 3066              	.LBE309:
1463:src/display.c **** 	      const int r = v % b;
 3067              		.loc 1 1463 25 discriminator 3 view .LVU915
 3068 014e 04F10104 		add	r4, r4, #1
 3069              	.LVL345:
1463:src/display.c **** 	      const int r = v % b;
 3070              		.loc 1 1463 16 is_stmt 1 discriminator 3 view .LVU916
1463:src/display.c **** 	      const int r = v % b;
 3071              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU917
 3072 0152 E9D2     		bcs	.L273
 3073 0154 0B46     		mov	r3, r1
1488:src/display.c **** 	if (res) {
 3074              		.loc 1 1488 2 is_stmt 1 view .LVU918
 3075              	.LVL346:
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3076              		.loc 1 1489 2 view .LVU919
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3077              		.loc 1 1489 5 is_stmt 0 view .LVU920
ARM GAS  /tmp/ccPzxiH4.s 			page 114


 3078 0156 0099     		ldr	r1, [sp]
 3079 0158 0029     		cmp	r1, #0
 3080 015a BDD1     		bne	.L340
 3081              	.LVL347:
 3082              	.L276:
 3083              	.LBB310:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3084              		.loc 1 1517 4 is_stmt 1 view .LVU921
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3085              		.loc 1 1517 33 is_stmt 0 view .LVU922
 3086 015c 022D     		cmp	r5, #2
 3087 015e 00F0FE80 		beq	.L341
 3088              	.LVL348:
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3089              		.loc 1 1518 4 is_stmt 1 view .LVU923
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3090              		.loc 1 1518 30 is_stmt 0 view .LVU924
 3091 0162 042D     		cmp	r5, #4
 3092 0164 00F02481 		beq	.L342
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3093              		.loc 1 1517 33 view .LVU925
 3094 0168 102D     		cmp	r5, #16
 3095 016a 0CBF     		ite	eq
 3096 016c 0225     		moveq	r5, #2
 3097 016e 0325     		movne	r5, #3
 3098 0170 0C27     		movs	r7, #12
 3099              	.LVL349:
 3100              	.L283:
1520:src/display.c **** #endif
 3101              		.loc 1 1520 4 is_stmt 1 view .LVU926
 3102 0172 0093     		str	r3, [sp]
 3103              	.LVL350:
1520:src/display.c **** #endif
 3104              		.loc 1 1520 4 is_stmt 0 view .LVU927
 3105 0174 FFF7FEFF 		bl	set_separator_decimal_modes
 3106              	.LVL351:
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3107              		.loc 1 1522 4 is_stmt 1 view .LVU928
1523:src/display.c **** 	    State2.window = 0;
 3108              		.loc 1 1523 26 is_stmt 0 view .LVU929
 3109 0178 5F4A     		ldr	r2, .L346
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3110              		.loc 1 1522 17 view .LVU930
 3111 017a 6249     		ldr	r1, .L346+12
1523:src/display.c **** 	    State2.window = 0;
 3112              		.loc 1 1523 26 view .LVU931
 3113 017c 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3114              		.loc 1 1522 27 view .LVU932
 3115 017e 009B     		ldr	r3, [sp]
 3116 0180 93FBF7F3 		sdiv	r3, r3, r7
1523:src/display.c **** 	    State2.window = 0;
 3117              		.loc 1 1523 8 view .LVU933
 3118 0184 C2F3C208 		ubfx	r8, r2, #3, #3
1523:src/display.c **** 	    State2.window = 0;
 3119              		.loc 1 1523 7 view .LVU934
 3120 0188 4345     		cmp	r3, r8
ARM GAS  /tmp/ccPzxiH4.s 			page 115


1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3121              		.loc 1 1522 17 view .LVU935
 3122 018a 0B60     		str	r3, [r1]
1523:src/display.c **** 	    State2.window = 0;
 3123              		.loc 1 1523 4 is_stmt 1 view .LVU936
1523:src/display.c **** 	    State2.window = 0;
 3124              		.loc 1 1523 7 is_stmt 0 view .LVU937
 3125 018c C0F2EA80 		blt	.L285
 3126 0190 07FB08F8 		mul	r8, r7, r8
 3127              	.L286:
1525:src/display.c **** 
 3128              		.loc 1 1525 4 is_stmt 1 view .LVU938
1525:src/display.c **** 
 3129              		.loc 1 1525 11 is_stmt 0 view .LVU939
 3130 0194 14AB     		add	r3, sp, #80
 3131 0196 14AA     		add	r2, sp, #80
 3132 0198 1C44     		add	r4, r4, r3
 3133              	.LVL352:
1525:src/display.c **** 
 3134              		.loc 1 1525 11 view .LVU940
 3135 019a 02EB0806 		add	r6, r2, r8
 3136 019e 0023     		movs	r3, #0
 3137 01a0 453E     		subs	r6, r6, #69
 3138 01a2 04F8443C 		strb	r3, [r4, #-68]
1527:src/display.c **** 	  for (k = 0; k < 12; k++)
 3139              		.loc 1 1527 4 is_stmt 1 view .LVU941
 3140              	.LVL353:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3141              		.loc 1 1528 4 view .LVU942
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3142              		.loc 1 1528 16 view .LVU943
1525:src/display.c **** 
 3143              		.loc 1 1525 11 is_stmt 0 view .LVU944
 3144 01a6 3246     		mov	r2, r6
 3145              	.LVL354:
 3146              	.L288:
1529:src/display.c **** 	      break;
 3147              		.loc 1 1529 6 is_stmt 1 view .LVU945
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3148              		.loc 1 1528 24 view .LVU946
1529:src/display.c **** 	      break;
 3149              		.loc 1 1529 9 is_stmt 0 view .LVU947
 3150 01a8 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3151 01ac 0029     		cmp	r1, #0
 3152 01ae 00F0E080 		beq	.L287
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3153              		.loc 1 1528 25 discriminator 2 view .LVU948
 3154 01b2 0133     		adds	r3, r3, #1
 3155              	.LVL355:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3156              		.loc 1 1528 16 is_stmt 1 discriminator 2 view .LVU949
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3157              		.loc 1 1528 4 is_stmt 0 discriminator 2 view .LVU950
 3158 01b4 0C2B     		cmp	r3, #12
 3159 01b6 F7D1     		bne	.L288
1531:src/display.c **** 	    int ch = buf[j++];
 3160              		.loc 1 1531 4 view .LVU951
ARM GAS  /tmp/ccPzxiH4.s 			page 116


 3161 01b8 4FF00B09 		mov	r9, #11
 3162              	.LVL356:
 3163              	.L289:
1531:src/display.c **** 	    int ch = buf[j++];
 3164              		.loc 1 1531 4 view .LVU952
 3165 01bc 08F10108 		add	r8, r8, #1
 3166 01c0 C844     		add	r8, r8, r9
 3167 01c2 4C46     		mov	r4, r9
 3168 01c4 4FF0630B 		mov	fp, #99
 3169 01c8 09E0     		b	.L294
 3170              	.LVL357:
 3171              	.L343:
 3172              	.LBB311:
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3173              		.loc 1 1537 8 view .LVU953
 3174 01ca 4F4B     		ldr	r3, .L346+16
 3175 01cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3176              	.LVL358:
 3177              	.LBB312:
 3178              	.LBI312:
 308:src/display.c ****   if (sep == SEP_NONE)
 3179              		.loc 1 308 14 is_stmt 1 view .LVU954
 3180              	.LBB313:
 309:src/display.c ****     return res;
 3181              		.loc 1 309 3 view .LVU955
 309:src/display.c ****     return res;
 3182              		.loc 1 309 6 is_stmt 0 view .LVU956
 3183 01ce 09B1     		cbz	r1, .L292
 309:src/display.c ****     return res;
 3184              		.loc 1 309 6 view .LVU957
 3185 01d0 FFF7FEFF 		bl	set_separator.part.0
 3186              	.LVL359:
 3187              	.L292:
 309:src/display.c ****     return res;
 3188              		.loc 1 309 6 view .LVU958
 3189              	.LBE313:
 3190              	.LBE312:
1538:src/display.c **** 	  }
 3191              		.loc 1 1538 6 is_stmt 1 discriminator 2 view .LVU959
 3192              	.LBE311:
1531:src/display.c **** 	    int ch = buf[j++];
 3193              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU960
 3194 01d4 013C     		subs	r4, r4, #1
1531:src/display.c **** 	    int ch = buf[j++];
 3195              		.loc 1 1531 4 discriminator 2 view .LVU961
 3196 01d6 621C     		adds	r2, r4, #1
 3197              	.LBB316:
1538:src/display.c **** 	  }
 3198              		.loc 1 1538 10 discriminator 2 view .LVU962
 3199 01d8 ABF1090B 		sub	fp, fp, #9
 3200              	.LVL360:
1538:src/display.c **** 	  }
 3201              		.loc 1 1538 10 discriminator 2 view .LVU963
 3202              	.LBE316:
1531:src/display.c **** 	    int ch = buf[j++];
 3203              		.loc 1 1531 24 is_stmt 1 discriminator 2 view .LVU964
1531:src/display.c **** 	    int ch = buf[j++];
ARM GAS  /tmp/ccPzxiH4.s 			page 117


 3204              		.loc 1 1531 14 discriminator 2 view .LVU965
1531:src/display.c **** 	    int ch = buf[j++];
 3205              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU966
 3206 01dc 16D0     		beq	.L298
 3207              	.LVL361:
 3208              	.L294:
 3209              	.LBB317:
1532:src/display.c **** 	    if (i >= shift)
 3210              		.loc 1 1532 6 is_stmt 1 view .LVU967
1534:src/display.c **** 	    set_dig(dig, ch);
 3211              		.loc 1 1534 8 view .LVU968
1532:src/display.c **** 	    if (i >= shift)
 3212              		.loc 1 1532 10 is_stmt 0 view .LVU969
 3213 01de 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1533:src/display.c **** 	      ch -= 030;
 3214              		.loc 1 1533 9 view .LVU970
 3215 01e2 A9EB0402 		sub	r2, r9, r4
 3216 01e6 BA42     		cmp	r2, r7
 3217 01e8 A8EB040A 		sub	r10, r8, r4
 3218              	.LVL362:
1533:src/display.c **** 	      ch -= 030;
 3219              		.loc 1 1533 6 is_stmt 1 view .LVU971
1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3220              		.loc 1 1535 6 is_stmt 0 view .LVU972
 3221 01ec 5846     		mov	r0, fp
1534:src/display.c **** 	    set_dig(dig, ch);
 3222              		.loc 1 1534 11 view .LVU973
 3223 01ee A8BF     		it	ge
 3224 01f0 1839     		subge	r1, r1, #24
 3225              	.LVL363:
1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3226              		.loc 1 1535 6 is_stmt 1 view .LVU974
 3227 01f2 FFF7FEFF 		bl	set_dig
 3228              	.LVL364:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3229              		.loc 1 1536 6 view .LVU975
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3230              		.loc 1 1536 13 is_stmt 0 view .LVU976
 3231 01f6 9AFBF5F3 		sdiv	r3, r10, r5
 3232 01fa 05FB13A3 		mls	r3, r5, r3, r10
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3233              		.loc 1 1536 9 view .LVU977
 3234 01fe 002B     		cmp	r3, #0
 3235 0200 E8D1     		bne	.L292
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3236              		.loc 1 1537 8 is_stmt 1 discriminator 1 view .LVU978
 3237              	.LBB315:
 3238              	.LBB314:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3239              		.loc 1 311 3 discriminator 1 view .LVU979
 3240 0202 5846     		mov	r0, fp
 3241              	.LBE314:
 3242              	.LBE315:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3243              		.loc 1 1536 27 is_stmt 0 discriminator 1 view .LVU980
 3244 0204 002C     		cmp	r4, #0
 3245 0206 E0D1     		bne	.L343
ARM GAS  /tmp/ccPzxiH4.s 			page 118


1538:src/display.c **** 	  }
 3246              		.loc 1 1538 6 is_stmt 1 view .LVU981
1538:src/display.c **** 	  }
 3247              		.loc 1 1538 10 is_stmt 0 view .LVU982
 3248 0208 ABF1090B 		sub	fp, fp, #9
 3249              	.LVL365:
1538:src/display.c **** 	  }
 3250              		.loc 1 1538 10 view .LVU983
 3251              	.LBE317:
1531:src/display.c **** 	    int ch = buf[j++];
 3252              		.loc 1 1531 24 is_stmt 1 view .LVU984
1531:src/display.c **** 	    int ch = buf[j++];
 3253              		.loc 1 1531 14 view .LVU985
 3254              	.L298:
1540:src/display.c **** 	    if (dig >= 0)
 3255              		.loc 1 1540 4 view .LVU986
1540:src/display.c **** 	    if (dig >= 0)
 3256              		.loc 1 1540 7 is_stmt 0 view .LVU987
 3257 020c 029B     		ldr	r3, [sp, #8]
 3258 020e 002B     		cmp	r3, #0
 3259 0210 3FF47BAF 		beq	.L254
1541:src/display.c **** 	      set_dig(dig, '-');
 3260              		.loc 1 1541 6 is_stmt 1 view .LVU988
1541:src/display.c **** 	      set_dig(dig, '-');
 3261              		.loc 1 1541 9 is_stmt 0 view .LVU989
 3262 0214 BBF1000F 		cmp	fp, #0
 3263 0218 C0F2CC80 		blt	.L344
 3264              	.LVL366:
 3265              	.L297:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3266              		.loc 1 1542 8 is_stmt 1 view .LVU990
 3267 021c 5846     		mov	r0, fp
 3268 021e 2D21     		movs	r1, #45
 3269 0220 FFF7FEFF 		bl	set_dig
 3270              	.LVL367:
 3271 0224 71E7     		b	.L254
 3272              	.LVL368:
 3273              	.L338:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3274              		.loc 1 1542 8 is_stmt 0 view .LVU991
 3275              	.LBE310:
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3276              		.loc 1 1435 4 is_stmt 1 view .LVU992
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3277              		.loc 1 1435 8 is_stmt 0 view .LVU993
 3278 0226 02AA     		add	r2, sp, #8
 3279 0228 3046     		mov	r0, r6
 3280 022a 3946     		mov	r1, r7
 3281 022c FFF7FEFF 		bl	extract_value
 3282              	.LVL369:
 3283 0230 8046     		mov	r8, r0
 3284 0232 8946     		mov	r9, r1
 3285              	.LVL370:
1436:src/display.c **** 	    v = value;
 3286              		.loc 1 1436 4 is_stmt 1 view .LVU994
1436:src/display.c **** 	    v = value;
 3287              		.loc 1 1436 8 is_stmt 0 view .LVU995
ARM GAS  /tmp/ccPzxiH4.s 			page 119


 3288 0234 FFF7FEFF 		bl	int_mode
 3289              	.LVL371:
1436:src/display.c **** 	    v = value;
 3290              		.loc 1 1436 7 view .LVU996
 3291 0238 28BB     		cbnz	r0, .L259
1436:src/display.c **** 	    v = value;
 3292              		.loc 1 1436 33 discriminator 1 view .LVU997
 3293 023a 029B     		ldr	r3, [sp, #8]
 3294 023c 012B     		cmp	r3, #1
 3295 023e 22D1     		bne	.L259
1436:src/display.c **** 	    v = value;
 3296              		.loc 1 1436 46 discriminator 2 view .LVU998
 3297 0240 58EA0903 		orrs	r3, r8, r9
 3298 0244 00F0A180 		beq	.L345
 3299              	.LVL372:
 3300              	.L260:
1436:src/display.c **** 	    v = value;
 3301              		.loc 1 1436 46 discriminator 2 view .LVU999
 3302 0248 DFF8C0B0 		ldr	fp, .L346+20
 3303              	.LVL373:
1411:src/display.c **** 	const int ws = word_size();
 3304              		.loc 1 1411 67 discriminator 3 view .LVU1000
 3305 024c 0195     		str	r5, [sp, #4]
 3306 024e 2E46     		mov	r6, r5
 3307 0250 0027     		movs	r7, #0
 3308 0252 0DF10C0A 		add	r10, sp, #12
 3309 0256 0024     		movs	r4, #0
 3310 0258 5D46     		mov	r5, fp
 3311              	.LVL374:
 3312              	.L266:
 3313              	.LBB320:
1445:src/display.c **** 	      v /= b;
 3314              		.loc 1 1445 8 is_stmt 1 discriminator 3 view .LVU1001
 3315 025a 4046     		mov	r0, r8
 3316 025c 4946     		mov	r1, r9
 3317 025e 3246     		mov	r2, r6
 3318 0260 3B46     		mov	r3, r7
 3319 0262 FFF7FEFF 		bl	__aeabi_uldivmod
 3320              	.LVL375:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3321              		.loc 1 1446 8 discriminator 3 view .LVU1002
 3322 0266 CC46     		mov	ip, r9
 3323 0268 C346     		mov	fp, r8
 3324              	.LBE320:
1444:src/display.c **** 	      const int r = v % b;
 3325              		.loc 1 1444 6 is_stmt 0 discriminator 3 view .LVU1003
 3326 026a BC45     		cmp	ip, r7
 3327              	.LBB321:
1447:src/display.c **** 	    }
 3328              		.loc 1 1447 15 discriminator 3 view .LVU1004
 3329 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3330 026e 0AF8013B 		strb	r3, [r10], #1
 3331              	.LBE321:
1444:src/display.c **** 	      const int r = v % b;
 3332              		.loc 1 1444 6 discriminator 3 view .LVU1005
 3333 0272 08BF     		it	eq
 3334 0274 B345     		cmpeq	fp, r6
ARM GAS  /tmp/ccPzxiH4.s 			page 120


 3335 0276 2346     		mov	r3, r4
 3336              	.LBB322:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3337              		.loc 1 1446 10 discriminator 3 view .LVU1006
 3338 0278 8046     		mov	r8, r0
 3339              	.LVL376:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3340              		.loc 1 1446 10 discriminator 3 view .LVU1007
 3341 027a 8946     		mov	r9, r1
 3342              	.LVL377:
1447:src/display.c **** 	    }
 3343              		.loc 1 1447 8 is_stmt 1 discriminator 3 view .LVU1008
 3344              	.LBE322:
1444:src/display.c **** 	      const int r = v % b;
 3345              		.loc 1 1444 24 discriminator 3 view .LVU1009
1444:src/display.c **** 	      const int r = v % b;
 3346              		.loc 1 1444 25 is_stmt 0 discriminator 3 view .LVU1010
 3347 027c 04F10104 		add	r4, r4, #1
 3348              	.LVL378:
1444:src/display.c **** 	      const int r = v % b;
 3349              		.loc 1 1444 16 is_stmt 1 discriminator 3 view .LVU1011
1444:src/display.c **** 	      const int r = v % b;
 3350              		.loc 1 1444 6 is_stmt 0 discriminator 3 view .LVU1012
 3351 0280 EBD2     		bcs	.L266
 3352 0282 019D     		ldr	r5, [sp, #4]
 3353 0284 25E7     		b	.L267
 3354              	.LVL379:
 3355              	.L259:
1438:src/display.c **** 	    if (sign)
 3356              		.loc 1 1438 4 is_stmt 1 view .LVU1013
1438:src/display.c **** 	    if (sign)
 3357              		.loc 1 1438 7 is_stmt 0 view .LVU1014
 3358 0286 58EA0903 		orrs	r3, r8, r9
 3359 028a DDD1     		bne	.L260
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3360              		.loc 1 1439 6 is_stmt 1 view .LVU1015
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3361              		.loc 1 1439 9 is_stmt 0 view .LVU1016
 3362 028c 029B     		ldr	r3, [sp, #8]
 3363 028e 002B     		cmp	r3, #0
 3364 0290 40F08180 		bne	.L261
 3365              	.LVL380:
 3366              	.L262:
1441:src/display.c **** 	    return;
 3367              		.loc 1 1441 6 is_stmt 1 view .LVU1017
 3368              	.LBB323:
 3369              	.LBI323:
 339:src/display.c ****   if (res) *res++ = ch;
 3370              		.loc 1 339 14 view .LVU1018
 3371              	.LBB324:
 340:src/display.c ****   else	set_dig(base, ch);
 3372              		.loc 1 340 3 view .LVU1019
 340:src/display.c ****   else	set_dig(base, ch);
 3373              		.loc 1 340 6 is_stmt 0 view .LVU1020
 3374 0294 009B     		ldr	r3, [sp]
 3375 0296 002B     		cmp	r3, #0
 3376 0298 00F08580 		beq	.L264
ARM GAS  /tmp/ccPzxiH4.s 			page 121


 3377              	.LVL381:
 3378              	.L263:
 340:src/display.c ****   else	set_dig(base, ch);
 3379              		.loc 1 340 12 is_stmt 1 view .LVU1021
 340:src/display.c ****   else	set_dig(base, ch);
 3380              		.loc 1 340 19 is_stmt 0 view .LVU1022
 3381 029c 009A     		ldr	r2, [sp]
 3382 029e 3023     		movs	r3, #48
 3383 02a0 1370     		strb	r3, [r2]
 3384              	.LBE324:
 3385              	.LBE323:
1546:src/display.c **** 
 3386              		.loc 1 1546 7 view .LVU1023
 3387 02a2 15B0     		add	sp, sp, #84
 3388              		.cfi_remember_state
 3389              		.cfi_def_cfa_offset 36
 3390              	.LVL382:
1546:src/display.c **** 
 3391              		.loc 1 1546 7 view .LVU1024
 3392              		@ sp needed
 3393 02a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3394              	.LVL383:
 3395              	.L255:
 3396              		.cfi_restore_state
1426:src/display.c **** 	}
 3397              		.loc 1 1426 11 is_stmt 1 view .LVU1025
1426:src/display.c **** 	}
 3398              		.loc 1 1426 15 is_stmt 0 view .LVU1026
 3399 02a8 FFF7FEFF 		bl	int_base
 3400              	.LVL384:
1429:src/display.c **** 	  IntMaxWindow = 0;
 3401              		.loc 1 1429 5 view .LVU1027
 3402 02ac 009B     		ldr	r3, [sp]
1426:src/display.c **** 	}
 3403              		.loc 1 1426 15 view .LVU1028
 3404 02ae 0546     		mov	r5, r0
 3405              	.LVL385:
1426:src/display.c **** 	}
 3406              		.loc 1 1426 27 is_stmt 1 view .LVU1029
1429:src/display.c **** 	  IntMaxWindow = 0;
 3407              		.loc 1 1429 2 view .LVU1030
1429:src/display.c **** 	  IntMaxWindow = 0;
 3408              		.loc 1 1429 5 is_stmt 0 view .LVU1031
 3409 02b0 002B     		cmp	r3, #0
 3410 02b2 7FF4BEAE 		bne	.L257
 3411              	.LVL386:
 3412              	.L337:
1430:src/display.c **** 	  carry_overflow();
 3413              		.loc 1 1430 4 is_stmt 1 view .LVU1032
1430:src/display.c **** 	  carry_overflow();
 3414              		.loc 1 1430 17 is_stmt 0 view .LVU1033
 3415 02b6 134B     		ldr	r3, .L346+12
 3416 02b8 009A     		ldr	r2, [sp]
 3417 02ba 1A60     		str	r2, [r3]
1431:src/display.c **** 	}
 3418              		.loc 1 1431 4 is_stmt 1 view .LVU1034
 3419 02bc FFF7FEFF 		bl	carry_overflow
ARM GAS  /tmp/ccPzxiH4.s 			page 122


 3420              	.LVL387:
 3421 02c0 B7E6     		b	.L257
 3422              	.LVL388:
 3423              	.L278:
1492:src/display.c **** 	      *res++ = buf[i];
 3424              		.loc 1 1492 12 view .LVU1035
1492:src/display.c **** 	      *res++ = buf[i];
 3425              		.loc 1 1492 24 is_stmt 0 view .LVU1036
 3426 02c2 0098     		ldr	r0, [sp]
 3427 02c4 03AA     		add	r2, sp, #12
 3428 02c6 D118     		adds	r1, r2, r3
 3429 02c8 E51F     		subs	r5, r4, #7
 3430 02ca 0246     		mov	r2, r0
 3431 02cc C618     		adds	r6, r0, r3
 3432              	.LVL389:
 3433              	.L280:
1493:src/display.c **** 	    *res++ = '.';
 3434              		.loc 1 1493 8 is_stmt 1 view .LVU1037
1493:src/display.c **** 	    *res++ = '.';
 3435              		.loc 1 1493 20 is_stmt 0 view .LVU1038
 3436 02ce 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
 3437              	.LVL390:
1493:src/display.c **** 	    *res++ = '.';
 3438              		.loc 1 1493 15 view .LVU1039
 3439 02d2 02F8010B 		strb	r0, [r2], #1
 3440              	.LVL391:
1492:src/display.c **** 	      *res++ = buf[i];
 3441              		.loc 1 1492 12 is_stmt 1 view .LVU1040
1492:src/display.c **** 	      *res++ = buf[i];
 3442              		.loc 1 1492 12 is_stmt 0 view .LVU1041
 3443 02d6 B01A     		subs	r0, r6, r2
 3444 02d8 8542     		cmp	r5, r0
 3445 02da F8DD     		ble	.L280
 3446 02dc 03F10802 		add	r2, r3, #8
 3447              	.LVL392:
1492:src/display.c **** 	      *res++ = buf[i];
 3448              		.loc 1 1492 12 view .LVU1042
 3449 02e0 0099     		ldr	r1, [sp]
 3450              	.LVL393:
1492:src/display.c **** 	      *res++ = buf[i];
 3451              		.loc 1 1492 12 view .LVU1043
 3452 02e2 141B     		subs	r4, r2, r4
 3453              	.LVL394:
1492:src/display.c **** 	      *res++ = buf[i];
 3454              		.loc 1 1492 12 view .LVU1044
 3455 02e4 9D42     		cmp	r5, r3
 3456 02e6 C8BF     		it	gt
 3457 02e8 0124     		movgt	r4, #1
 3458 02ea 0A19     		adds	r2, r1, r4
1494:src/display.c **** 	    *res++ = '.';
 3459              		.loc 1 1494 6 is_stmt 1 view .LVU1045
 3460              	.LVL395:
1494:src/display.c **** 	    *res++ = '.';
 3461              		.loc 1 1494 13 is_stmt 0 view .LVU1046
 3462 02ec 2E23     		movs	r3, #46
 3463 02ee 0B55     		strb	r3, [r1, r4]
1495:src/display.c **** 	  }
ARM GAS  /tmp/ccPzxiH4.s 			page 123


 3464              		.loc 1 1495 6 is_stmt 1 view .LVU1047
 3465              	.LVL396:
1495:src/display.c **** 	  }
 3466              		.loc 1 1495 13 is_stmt 0 view .LVU1048
 3467 02f0 5370     		strb	r3, [r2, #1]
1546:src/display.c **** 
 3468              		.loc 1 1546 7 view .LVU1049
 3469 02f2 15B0     		add	sp, sp, #84
 3470              		.cfi_remember_state
 3471              		.cfi_def_cfa_offset 36
 3472              		@ sp needed
 3473 02f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3474              	.LVL397:
 3475              	.L347:
1546:src/display.c **** 
 3476              		.loc 1 1546 7 view .LVU1050
 3477              		.align	2
 3478              	.L346:
 3479 02f8 00000000 		.word	StateWhileOn
 3480 02fc 00000000 		.word	CSWTCH.353
 3481 0300 00000000 		.word	main_ram
 3482 0304 00000000 		.word	IntMaxWindow
 3483 0308 00000000 		.word	.LANCHOR0
 3484 030c 00000000 		.word	.LANCHOR9
 3485              	.LVL398:
 3486              	.L339:
 3487              		.cfi_restore_state
 3488              	.LBB326:
1454:src/display.c **** 	      vs |= ~mask;
 3489              		.loc 1 1454 38 discriminator 1 view .LVU1051
 3490 0310 0BF1FF31 		add	r1, fp, #-1
1454:src/display.c **** 	      vs |= ~mask;
 3491              		.loc 1 1454 18 discriminator 1 view .LVU1052
 3492 0314 CBF1210C 		rsb	ip, fp, #33
 3493 0318 C840     		lsrs	r0, r0, r1
 3494 031a 07FA0CFC 		lsl	ip, r7, ip
 3495 031e 2039     		subs	r1, r1, #32
 3496 0320 40EA0C00 		orr	r0, r0, ip
 3497 0324 5CBF     		itt	pl
 3498 0326 47FA01F1 		asrpl	r1, r7, r1
 3499 032a 0843     		orrpl	r0, r0, r1
 3500 032c 00F00108 		and	r8, r0, #1
 3501 0330 4FF00009 		mov	r9, #0
 3502 0334 58EA0901 		orrs	r1, r8, r9
 3503 0338 08D0     		beq	.L269
1455:src/display.c **** 	  }
 3504              		.loc 1 1455 8 is_stmt 1 view .LVU1053
1455:src/display.c **** 	  }
 3505              		.loc 1 1455 11 is_stmt 0 view .LVU1054
 3506 033a 5042     		rsbs	r0, r2, #0
 3507 033c 63EB4301 		sbc	r1, r3, r3, lsl #1
 3508 0340 40EA0602 		orr	r2, r0, r6
 3509              	.LVL399:
1455:src/display.c **** 	  }
 3510              		.loc 1 1455 11 view .LVU1055
 3511 0344 41EA0703 		orr	r3, r1, r7
 3512              	.LVL400:
ARM GAS  /tmp/ccPzxiH4.s 			page 124


1455:src/display.c **** 	  }
 3513              		.loc 1 1455 11 view .LVU1056
 3514 0348 1646     		mov	r6, r2
 3515              	.LVL401:
1455:src/display.c **** 	  }
 3516              		.loc 1 1455 11 view .LVU1057
 3517 034a 1F46     		mov	r7, r3
 3518              	.L269:
1455:src/display.c **** 	  }
 3519              		.loc 1 1455 11 view .LVU1058
 3520              	.LBE326:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3521              		.loc 1 1458 4 is_stmt 1 view .LVU1059
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3522              		.loc 1 1458 8 is_stmt 0 view .LVU1060
 3523 034c 1D4B     		ldr	r3, .L348
 3524 034e 1B68     		ldr	r3, [r3]
 3525 0350 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3526              		.loc 1 1458 7 view .LVU1061
 3527 0354 9B07     		lsls	r3, r3, #30
 3528 0356 7FF5DBAE 		bpl	.L299
 3529 035a 0223     		movs	r3, #2
 3530 035c 9CE6     		b	.L274
 3531              	.LVL402:
 3532              	.L341:
 3533              	.LBB327:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3534              		.loc 1 1517 33 view .LVU1062
 3535 035e 0827     		movs	r7, #8
1519:src/display.c **** 	  set_separator_decimal_modes();
 3536              		.loc 1 1519 6 view .LVU1063
 3537 0360 0425     		movs	r5, #4
 3538 0362 06E7     		b	.L283
 3539              	.LVL403:
 3540              	.L285:
1524:src/display.c **** 	  buf[i] = '\0';
 3541              		.loc 1 1524 6 is_stmt 1 view .LVU1064
1524:src/display.c **** 	  buf[i] = '\0';
 3542              		.loc 1 1524 20 is_stmt 0 view .LVU1065
 3543 0364 184B     		ldr	r3, .L348+4
 3544 0366 6FF3C502 		bfc	r2, #3, #3
 3545 036a 1A75     		strb	r2, [r3, #20]
 3546 036c 4FF00008 		mov	r8, #0
 3547 0370 10E7     		b	.L286
 3548              	.LVL404:
 3549              	.L287:
1531:src/display.c **** 	    int ch = buf[j++];
 3550              		.loc 1 1531 14 is_stmt 1 discriminator 1 view .LVU1066
1531:src/display.c **** 	    int ch = buf[j++];
 3551              		.loc 1 1531 4 is_stmt 0 discriminator 1 view .LVU1067
 3552 0372 03F1FF39 		add	r9, r3, #-1
 3553              	.LVL405:
1531:src/display.c **** 	    int ch = buf[j++];
 3554              		.loc 1 1531 4 discriminator 1 view .LVU1068
 3555 0376 002B     		cmp	r3, #0
 3556 0378 7FF420AF 		bne	.L289
ARM GAS  /tmp/ccPzxiH4.s 			page 125


1540:src/display.c **** 	    if (dig >= 0)
 3557              		.loc 1 1540 4 is_stmt 1 view .LVU1069
1540:src/display.c **** 	    if (dig >= 0)
 3558              		.loc 1 1540 7 is_stmt 0 view .LVU1070
 3559 037c 029B     		ldr	r3, [sp, #8]
 3560 037e 002B     		cmp	r3, #0
 3561 0380 3FF4C3AE 		beq	.L254
 3562 0384 4FF0630B 		mov	fp, #99
 3563 0388 48E7     		b	.L297
 3564              	.LVL406:
 3565              	.L345:
1540:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1540 7 view .LVU1071
 3567              	.LBE327:
1437:src/display.c **** 	  if (v == 0) {
 3568              		.loc 1 1437 6 is_stmt 1 view .LVU1072
1437:src/display.c **** 	  if (v == 0) {
 3569              		.loc 1 1437 8 is_stmt 0 view .LVU1073
 3570 038a B046     		mov	r8, r6
 3571              	.LVL407:
1437:src/display.c **** 	  if (v == 0) {
 3572              		.loc 1 1437 8 view .LVU1074
 3573 038c B946     		mov	r9, r7
 3574              	.LVL408:
1438:src/display.c **** 	    if (sign)
 3575              		.loc 1 1438 4 is_stmt 1 view .LVU1075
1438:src/display.c **** 	    if (sign)
 3576              		.loc 1 1438 7 is_stmt 0 view .LVU1076
 3577 038e 58EA0903 		orrs	r3, r8, r9
 3578 0392 7FF459AF 		bne	.L260
 3579              	.LVL409:
 3580              	.L261:
1440:src/display.c **** 	    set_dig_s(dig, '0', res);
 3581              		.loc 1 1440 8 is_stmt 1 view .LVU1077
 3582              	.LBB328:
 3583              	.LBI328:
 339:src/display.c ****   if (res) *res++ = ch;
 3584              		.loc 1 339 14 view .LVU1078
 3585              	.LBB329:
 340:src/display.c ****   else	set_dig(base, ch);
 3586              		.loc 1 340 3 view .LVU1079
 340:src/display.c ****   else	set_dig(base, ch);
 3587              		.loc 1 340 6 is_stmt 0 view .LVU1080
 3588 0396 009B     		ldr	r3, [sp]
 3589 0398 002B     		cmp	r3, #0
 3590 039a 7FF47FAF 		bne	.L263
 341:src/display.c ****   return res;
 3591              		.loc 1 341 8 is_stmt 1 view .LVU1081
 3592 039e 2D21     		movs	r1, #45
 3593 03a0 5A20     		movs	r0, #90
 3594 03a2 FFF7FEFF 		bl	set_dig
 3595              	.LVL410:
 341:src/display.c ****   return res;
 3596              		.loc 1 341 8 is_stmt 0 view .LVU1082
 3597              	.LBE329:
 3598              	.LBE328:
1441:src/display.c **** 	    return;
ARM GAS  /tmp/ccPzxiH4.s 			page 126


 3599              		.loc 1 1441 6 is_stmt 1 view .LVU1083
 3600              	.LBB330:
 339:src/display.c ****   if (res) *res++ = ch;
 3601              		.loc 1 339 14 view .LVU1084
 3602              	.LBB325:
 340:src/display.c ****   else	set_dig(base, ch);
 3603              		.loc 1 340 3 view .LVU1085
 3604              	.L264:
 341:src/display.c ****   return res;
 3605              		.loc 1 341 8 view .LVU1086
 3606 03a6 3021     		movs	r1, #48
 3607 03a8 6320     		movs	r0, #99
 3608 03aa FFF7FEFF 		bl	set_dig
 3609              	.LVL411:
 3610 03ae ACE6     		b	.L254
 3611              	.LVL412:
 3612              	.L342:
 341:src/display.c ****   return res;
 3613              		.loc 1 341 8 is_stmt 0 view .LVU1087
 3614              	.LBE325:
 3615              	.LBE330:
 3616              	.LBB331:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3617              		.loc 1 1517 33 view .LVU1088
 3618 03b0 0C27     		movs	r7, #12
 3619 03b2 DEE6     		b	.L283
 3620              	.LVL413:
 3621              	.L344:
1543:src/display.c **** 	  }
 3622              		.loc 1 1543 11 is_stmt 1 view .LVU1089
 3623              	.LBB318:
 3624              	.LBI318:
 244:src/display.c **** {
 3625              		.loc 1 244 13 view .LVU1090
 3626              	.LBB319:
 246:src/display.c **** }
 3627              		.loc 1 246 3 view .LVU1091
 3628 03b4 8120     		movs	r0, #129
 3629 03b6 FFF7FEFF 		bl	set_dot
 3630              	.LVL414:
 247:src/display.c **** 
 3631              		.loc 1 247 1 is_stmt 0 view .LVU1092
 3632 03ba A6E6     		b	.L254
 3633              	.LVL415:
 3634              	.L300:
 247:src/display.c **** 
 3635              		.loc 1 247 1 view .LVU1093
 3636              	.LBE319:
 3637              	.LBE318:
 3638              	.LBE331:
 3639              	.LBB332:
1475:src/display.c **** 	      const int r = v % b;
 3640              		.loc 1 1475 6 view .LVU1094
 3641 03bc 4FF0FF33 		mov	r3, #-1
 3642              	.LVL416:
1475:src/display.c **** 	      const int r = v % b;
 3643              		.loc 1 1475 6 view .LVU1095
ARM GAS  /tmp/ccPzxiH4.s 			page 127


 3644 03c0 87E6     		b	.L267
 3645              	.L349:
 3646 03c2 00BF     		.align	2
 3647              	.L348:
 3648 03c4 00000000 		.word	main_ram
 3649 03c8 00000000 		.word	StateWhileOn
 3650              	.LBE332:
 3651              		.cfi_endproc
 3652              	.LFE18:
 3654              		.section	.text.s_s_sized.constprop.0,"ax",%progbits
 3655              		.align	1
 3656              		.p2align 2,,3
 3657              		.syntax unified
 3658              		.thumb
 3659              		.thumb_func
 3660              		.fpu fpv4-sp-d16
 3662              	s_s_sized.constprop.0:
 3663              	.LVL417:
 3664              	.LFB56:
2554:src/display.c **** 
2555:src/display.c **** 
2556:src/display.c ****       /*
2557:src/display.c ****        *  Toggle the little "=" sign
2558:src/display.c ****        */
2559:src/display.c **** /*       void set_IO_annunciator(void) { */
2560:src/display.c **** /* #ifndef DM42 */
2561:src/display.c **** /* 	int on = SerialOn */
2562:src/display.c **** /* #endif */
2563:src/display.c **** /* #ifdef DM42 */
2564:src/display.c **** /* 	  int on = 0 */
2565:src/display.c **** /* #endif */
2566:src/display.c **** /* #ifdef REALBUILD */
2567:src/display.c **** /* 	  || DebugFlag */
2568:src/display.c **** /* #endif */
2569:src/display.c **** /* #ifdef INFRARED */
2570:src/display.c **** /* 	  || PrinterColumn != 0 */
2571:src/display.c **** /* #endif */
2572:src/display.c **** /* 	  ; */
2573:src/display.c **** 
2574:src/display.c **** /* 	if (on != IoAnnunciator) { */
2575:src/display.c **** /* 	  dot(LIT_EQ, on); */
2576:src/display.c **** /* 	  IoAnnunciator = on; */
2577:src/display.c **** /* 	  finish_display(); //LIT_EQ */
2578:src/display.c **** /* 	} */
2579:src/display.c **** /*       } */
2580:src/display.c **** 
2581:src/display.c **** #ifdef TOP_ROW
2582:src/display.c ****       /*
2583:src/display.c ****        *  Update the display
2584:src/display.c ****        */
2585:src/display.c ****       void display(void) {
2586:src/display.c **** 	int i, j;
2587:src/display.c **** 	char buf[40], *bp = buf;
2588:src/display.c **** 	const char *p;
2589:src/display.c **** 	int annuc = 0;
2590:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2591:src/display.c **** 	int skip = 0;
ARM GAS  /tmp/ccPzxiH4.s 			page 128


2592:src/display.c **** 	int x_disp = 0;
2593:src/display.c **** 	const int shift = cur_shift();
2594:src/display.c **** 
2595:src/display.c **** 	no_status_top = 0;
2596:src/display.c **** 	if (State2.disp_freeze) {
2597:src/display.c **** 	  State2.disp_freeze = 0;
2598:src/display.c **** 	  State2.disp_temp = 1;
2599:src/display.c **** #ifdef CONSOLE
2600:src/display.c **** 	  JustDisplayed = 1;
2601:src/display.c **** #endif
2602:src/display.c **** 	  ShowRPN = 0;
2603:src/display.c **** 	  return;
2604:src/display.c **** 	}
2605:src/display.c **** 
2606:src/display.c **** 	if (WasDataEntry) {
2607:src/display.c **** 	  reset_7_segment();
2608:src/display.c **** 	  goto only_update_x;
2609:src/display.c **** 	}
2610:src/display.c **** #ifdef INCLUDE_YREG_CODE
2611:src/display.c **** #  ifdef YREG_ALWAYS_ON
2612:src/display.c **** 	const int yreg_enabled = 1;
2613:src/display.c **** #  else
2614:src/display.c **** 	const int yreg_enabled = UState.show_y;
2615:src/display.c **** #  endif
2616:src/display.c **** #else
2617:src/display.c **** 	const int yreg_enabled = 0;
2618:src/display.c **** #endif
2619:src/display.c **** 	// Clear display
2620:src/display.c **** 	reset_disp();
2621:src/display.c **** 
2622:src/display.c **** 	
2623:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2624:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2625:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2626:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2627:src/display.c **** 	/*   set_status(buf); */
2628:src/display.c **** 	/* } */
2629:src/display.c **** 	if (State2.version) {
2630:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2631:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2632:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2633:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2634:src/display.c **** 	  set_status(vers);
2635:src/display.c **** 	  skip = 1;
2636:src/display.c **** 	  goto nostk;
2637:src/display.c **** 	} else if (State2.confirm) {
2638:src/display.c **** 	  if (yreg_enabled) {
2639:src/display.c **** 	    set_status_top(S_SURE);
2640:src/display.c **** 	    no_status_top = 1;
2641:src/display.c **** 	    annuc = 1;
2642:src/display.c **** 	  }
2643:src/display.c **** 	  else {
2644:src/display.c **** 	    set_status(S_SURE);
2645:src/display.c **** 	  }
2646:src/display.c **** 	} else if (State2.hyp) {
2647:src/display.c **** 	  bp = scopy(bp, "HYP");
2648:src/display.c **** 	  if (! State2.dot)
ARM GAS  /tmp/ccPzxiH4.s 			page 129


2649:src/display.c **** 	    *bp++ = '\235';
2650:src/display.c **** 	  if (yreg_enabled) {
2651:src/display.c **** 	    set_status_top(buf);
2652:src/display.c **** 	    no_status_top = 1;
2653:src/display.c **** 	    annuc = 1;
2654:src/display.c **** 	  }
2655:src/display.c **** 	  else {
2656:src/display.c **** 	    set_status(buf);
2657:src/display.c **** 	  }
2658:src/display.c **** 	} else if (State2.gtodot) {
2659:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2660:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2661:src/display.c **** 	  if (State2.numdigit > 0)
2662:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2663:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2664:src/display.c **** 	  *bp++ = '_';
2665:src/display.c **** 	  if (yreg_enabled) {
2666:src/display.c **** 	    set_status_top(buf);
2667:src/display.c **** 	    no_status_top = 1;
2668:src/display.c **** 	    annuc = 1;
2669:src/display.c **** 	  }
2670:src/display.c **** 	  else {
2671:src/display.c **** 	    set_status(buf);
2672:src/display.c **** 	  }
2673:src/display.c **** 	} else if (State2.rarg) {
2674:src/display.c **** 	  /* Commands with arguments */
2675:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2676:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2677:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2678:src/display.c **** #endif
2679:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2680:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2681:src/display.c **** 	  if (State2.dot) {
2682:src/display.c **** 	    *bp++ = 's';
2683:src/display.c **** 	    *bp++ = '_';
2684:src/display.c **** 	  } else if (shift == SHIFT_F) {
2685:src/display.c **** 	    *bp++ = '\021';
2686:src/display.c **** 	    *bp++ = '_';
2687:src/display.c **** 	  } else {
2688:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2689:src/display.c **** 	       : State2.ind ? 2 
2690:src/display.c **** 	       : num_arg_digits(CmdBase); */
2691:src/display.c **** 	    if (State2.local)
2692:src/display.c **** 	      *bp++ = '.';
2693:src/display.c **** 	    if (State2.numdigit > 0) {
2694:src/display.c **** 	      if (State2.shuffle)
2695:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2696:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2697:src/display.c **** 	      else
2698:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2699:src/display.c **** 	    }
2700:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2701:src/display.c **** 	    *bp++ = '_';
2702:src/display.c **** 	  }
2703:src/display.c **** 	  if (yreg_enabled) {
2704:src/display.c **** 	    set_status_top(buf);
2705:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccPzxiH4.s 			page 130


2706:src/display.c **** 	    annuc = 1;
2707:src/display.c **** 	  }
2708:src/display.c **** 	  else {
2709:src/display.c **** 	    set_status(buf);
2710:src/display.c **** 	  }
2711:src/display.c **** 	} else if (State2.test != TST_NONE) {
2712:src/display.c **** 	  *bp++ = 'x';
2713:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2714:src/display.c **** 	  *bp++ = '_';
2715:src/display.c **** 	  *bp++ = '?';
2716:src/display.c **** 	  if (yreg_enabled) {
2717:src/display.c **** 	    set_status_top(buf);
2718:src/display.c **** 	    no_status_top = 1;
2719:src/display.c **** 	    annuc = 1;
2720:src/display.c **** 	  }
2721:src/display.c **** 	  else {
2722:src/display.c **** 	    set_status(buf);
2723:src/display.c **** 	  }
2724:src/display.c **** 	} else if (cata) {
2725:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2726:src/display.c **** 	  char b2[16];
2727:src/display.c **** 	  const char *p;
2728:src/display.c **** 
2729:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2730:src/display.c **** 	  p = catcmd(op, b2);
2731:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2732:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2733:src/display.c **** 	  bp = scopy(bp, p);
2734:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2735:src/display.c **** 	    // State2.disp_small = 1;
2736:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2737:src/display.c **** 	      set_digits_string("0 to 255", 0);
2738:src/display.c **** 	    else
2739:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2740:src/display.c **** 	    skip = 1;
2741:src/display.c **** 	  } else if (State2.runmode) {
2742:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2743:src/display.c **** 	      decNumber x, r;
2744:src/display.c **** 	      decimal64 z;
2745:src/display.c **** 
2746:src/display.c **** 	      getX(&x);
2747:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2748:src/display.c **** 		const unsigned int f = argKIND(op);
2749:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2750:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2751:src/display.c **** 		  update_speed(0);
2752:src/display.c **** 		  fp(&r, &x);
2753:src/display.c **** 		}
2754:src/display.c **** 		else
2755:src/display.c **** 		  set_NaN(&r);
2756:src/display.c **** 	      } else
2757:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2758:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2759:src/display.c **** 	      packed_from_number(&z, &r);
2760:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2761:src/display.c **** 	      skip = 1;
2762:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
ARM GAS  /tmp/ccPzxiH4.s 			page 131


2763:src/display.c **** 	      REGISTER z, *const x = StackBase;
2764:src/display.c **** 	      copyreg(&z, x);
2765:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2766:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2767:src/display.c **** 	      copyreg(x, &z);
2768:src/display.c **** 	      skip = 1;
2769:src/display.c **** 	    }
2770:src/display.c **** 	  }
2771:src/display.c **** 	  if (yreg_enabled) {
2772:src/display.c **** 	    set_status_top(buf);
2773:src/display.c **** 	    no_status_top = 1;
2774:src/display.c **** 	    annuc = 1;
2775:src/display.c **** 	  }
2776:src/display.c **** 	  else {
2777:src/display.c **** 	    set_status(buf);
2778:src/display.c **** 	  }
2779:src/display.c **** 	} else if (State2.multi) {
2780:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2781:src/display.c **** 	  if (State2.numdigit > 0) {
2782:src/display.c **** 	    *bp++ = (char) State2.digval;
2783:src/display.c **** 	    if (State2.numdigit > 1)
2784:src/display.c **** 	      *bp++ = State2.digval2;
2785:src/display.c **** 	  }
2786:src/display.c **** 	  if (yreg_enabled) {
2787:src/display.c **** 	    set_status_top(buf);
2788:src/display.c **** 	    no_status_top = 1;
2789:src/display.c **** 	    annuc = 1;
2790:src/display.c **** 	  }
2791:src/display.c **** 	  else {
2792:src/display.c **** 	    set_status(buf);
2793:src/display.c **** 	  }
2794:src/display.c **** 	} else if (State2.status) {
2795:src/display.c **** 	  show_status();
2796:src/display.c **** 	  skip = 1;
2797:src/display.c **** 	} else if (State2.labellist) {
2798:src/display.c **** 	  show_label();
2799:src/display.c **** 	  skip = 1;
2800:src/display.c **** 	} else if (State2.registerlist) {
2801:src/display.c **** 	  show_registers();
2802:src/display.c **** 	  skip = 1;
2803:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2804:src/display.c **** 	    annunciators();
2805:src/display.c **** 	  }
2806:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2807:src/display.c **** 	} else if (State2.disp_as_alpha) {
2808:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2809:src/display.c **** #endif
2810:src/display.c **** 	} else if (State2.runmode) {
2811:src/display.c **** 	  if (DispMsg) { 
2812:src/display.c **** 	    set_status_top(DispMsg);
2813:src/display.c **** 	    no_status_top = 1;// experiment
2814:src/display.c **** 	    annuc = 1;
2815:src/display.c **** 	  } else if (DispPlot) {
2816:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2817:src/display.c **** 	  } else if (State2.alphas) {
2818:src/display.c **** 	    bp = scopy(buf, Alpha);
2819:src/display.c **** 	    j = State2.alpha_pos;
ARM GAS  /tmp/ccPzxiH4.s 			page 132


2820:src/display.c **** 	    if (j != 0) {
2821:src/display.c **** 	      i = slen(buf);
2822:src/display.c **** 	      j *= 6;
2823:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2824:src/display.c **** 		{
2825:src/display.c **** 		  buf[ (i - j) ] = '\0';
2826:src/display.c **** 		  set_status_right(buf);
2827:src/display.c **** 		}
2828:src/display.c **** 	      else {
2829:src/display.c **** 		set_status(buf);
2830:src/display.c **** 	      }
2831:src/display.c **** 	    }
2832:src/display.c **** 	    else {
2833:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2834:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2835:src/display.c **** 		*bp++ = '\0';
2836:src/display.c **** 	      }
2837:src/display.c **** 	      set_status_right(buf);
2838:src/display.c **** 	    }
2839:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2840:src/display.c **** 	      bp = buf;
2841:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2842:src/display.c **** 	      *bp++ = '\0';
2843:src/display.c **** 	      set_status_top(buf);
2844:src/display.c **** 	      no_status_top = 1;
2845:src/display.c **** 	      //annuc = 1;
2846:src/display.c **** 	    }
2847:src/display.c **** 	  }
2848:src/display.c **** 	  else {
2849:src/display.c **** 	    annuc = 1;
2850:src/display.c **** 	  }
2851:src/display.c **** 	}
2852:src/display.c **** 	else {
2853:src/display.c **** 	  i = state_pc();
2854:src/display.c **** 	  if (i > 0)
2855:src/display.c **** 	    set_status(prt(getprog(i), buf));
2856:src/display.c **** 	  else
2857:src/display.c **** 	    set_status("");
2858:src/display.c **** 	  set_dot(STO_annun);
2859:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2860:src/display.c **** 	    annuc = 1;
2861:src/display.c **** 	  goto nostk;
2862:src/display.c **** 	}
2863:src/display.c ****       nostk:
2864:src/display.c **** 	if (!skip) {
2865:src/display.c **** 	  if (State2.runmode) {
2866:src/display.c **** 	  only_update_x:
2867:src/display.c **** 	    p = get_cmdline();
2868:src/display.c **** 	    if (p == NULL || cata) {
2869:src/display.c **** 	      if (ShowRegister != -1) {
2870:src/display.c **** #ifdef INCLUDE_C_LOCK
2871:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2872:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2873:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2874:src/display.c **** 		    SET_POLAR_READY;
2875:src/display.c **** 		  }
2876:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
ARM GAS  /tmp/ccPzxiH4.s 			page 133


2877:src/display.c **** 		    State2.hms = 0;
2878:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2879:src/display.c **** 		    State2.hms = 1;
2880:src/display.c **** 		  }
2881:src/display.c **** 		  else {
2882:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2883:src/display.c **** 		  }
2884:src/display.c **** 		  x_disp = 1;
2885:src/display.c **** 		}
2886:src/display.c **** 		else {
2887:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2888:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2889:src/display.c **** 		}
2890:src/display.c **** #else		
2891:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2892:src/display.c **** 		format_reg(ShowRegister, CNULL);
2893:src/display.c **** #endif
2894:src/display.c **** 	      }
2895:src/display.c **** 	      else
2896:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2897:src/display.c **** 	    } else {
2898:src/display.c **** 	      disp_x(p);
2899:src/display.c **** 	      x_disp = 1;
2900:src/display.c **** 	    }
2901:src/display.c **** 	    if (WasDataEntry) {
2902:src/display.c **** 	      goto finish;
2903:src/display.c **** 	    }
2904:src/display.c **** 	  } else {
2905:src/display.c **** 	    unsigned int pc = state_pc();
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
2907:src/display.c **** 	    const int n = nLIB(pc);
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2912:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2913:src/display.c **** #if 0
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** #endif
2931:src/display.c **** 	  }
2932:src/display.c **** 	}
2933:src/display.c **** 	set_annunciators();
ARM GAS  /tmp/ccPzxiH4.s 			page 134


2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2935:src/display.c **** 	  ShowRPN = 0;
2936:src/display.c **** 	  dot(RPN, 0);
2937:src/display.c **** 	}
2938:src/display.c **** 	// disp_temp disables the <- key
2939:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2940:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2941:src/display.c **** 
2942:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2943:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms || DispMsg != NULL)) || State2.wascomplex) // make
2944:src/display.c **** 	  annunciators(); // still displays y-reg as dispmsg is now in top row
2945:src/display.c ****  	State2.hms = 0;
2946:src/display.c **** #else
2947:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2948:src/display.c **** 	  annunciators();
2949:src/display.c **** #endif
2950:src/display.c **** 
2951:src/display.c ****       finish:
2952:src/display.c **** 	State2.version = 0;
2953:src/display.c **** 	State2.disp_as_alpha = 0;
2954:src/display.c **** 	State2.smode = SDISP_NORMAL;
2955:src/display.c **** 	State2.invalid_disp = 0;
2956:src/display.c **** 	ShowRegister = regX_idx;
2957:src/display.c **** 	DispMsg = CNULL;
2958:src/display.c **** 	DispPlot = 0;
2959:src/display.c **** 	State2.disp_small = 0;
2960:src/display.c **** 	if (WasDataEntry) {
2961:src/display.c **** 	  finish_7_segment();
2962:src/display.c **** 	  lcd_refresh();
2963:src/display.c **** 	}
2964:src/display.c **** 	else {
2965:src/display.c **** 	  finish_display();
2966:src/display.c **** 	}
2967:src/display.c **** 	no_status_top = 0;
2968:src/display.c **** #ifdef CONSOLE
2969:src/display.c **** 	JustDisplayed = 1;
2970:src/display.c **** #endif
2971:src/display.c ****       }
2972:src/display.c **** #else
2973:src/display.c ****       /*
2974:src/display.c ****        *  Update the display
2975:src/display.c ****        */
2976:src/display.c ****       void display(void) {
2977:src/display.c **** 	int i, j;
2978:src/display.c **** 	char buf[40], *bp = buf;
2979:src/display.c **** 	const char *p;
2980:src/display.c **** 	int annuc = 0;
2981:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2982:src/display.c **** 	int skip = 0;
2983:src/display.c **** 	int x_disp = 0;
2984:src/display.c **** 	const int shift = cur_shift();
2985:src/display.c **** 
2986:src/display.c **** 
2987:src/display.c **** 
2988:src/display.c **** 	if (State2.disp_freeze) {
2989:src/display.c **** 	  State2.disp_freeze = 0;
2990:src/display.c **** 	  State2.disp_temp = 1;
ARM GAS  /tmp/ccPzxiH4.s 			page 135


2991:src/display.c **** #ifdef CONSOLE
2992:src/display.c **** 	  JustDisplayed = 1;
2993:src/display.c **** #endif
2994:src/display.c **** 	  ShowRPN = 0;
2995:src/display.c **** 	  return;
2996:src/display.c **** 	}
2997:src/display.c **** 
2998:src/display.c **** 	if (WasDataEntry) {
2999:src/display.c **** 	  reset_7_segment();
3000:src/display.c **** 	  goto only_update_x;
3001:src/display.c **** 	}
3002:src/display.c **** 
3003:src/display.c **** 	// Clear display
3004:src/display.c **** 	reset_disp();
3005:src/display.c **** 
3006:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3007:src/display.c **** 	if (State2.cmplx  && !cata) {
3008:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3009:src/display.c **** 	  set_status(buf);
3010:src/display.c **** 	}
3011:src/display.c **** 	if (State2.version) {
3012:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3013:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3014:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3015:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3016:src/display.c **** 	  set_status(vers);
3017:src/display.c **** 	  skip = 1;
3018:src/display.c **** 	  goto nostk;
3019:src/display.c **** 	} else if (State2.confirm) {
3020:src/display.c **** 	  set_status(S_SURE);
3021:src/display.c **** 	} else if (State2.hyp) {
3022:src/display.c **** 	  bp = scopy(bp, "HYP");
3023:src/display.c **** 	  if (! State2.dot)
3024:src/display.c **** 	    *bp++ = '\235';
3025:src/display.c **** 	  set_status(buf);
3026:src/display.c **** 	} else if (State2.gtodot) {
3027:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3028:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3029:src/display.c **** 	  if (State2.numdigit > 0)
3030:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3031:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3032:src/display.c **** 	  *bp++ = '_';
3033:src/display.c **** 	  set_status(buf);
3034:src/display.c **** 	} else if (State2.rarg) {
3035:src/display.c **** 	  /* Commands with arguments */
3036:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3037:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3038:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3039:src/display.c **** #endif
3040:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3041:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3042:src/display.c **** 	  if (State2.dot) {
3043:src/display.c **** 	    *bp++ = 's';
3044:src/display.c **** 	    *bp++ = '_';
3045:src/display.c **** 	  } else if (shift == SHIFT_F) {
3046:src/display.c **** 	    *bp++ = '\021';
3047:src/display.c **** 	    *bp++ = '_';
ARM GAS  /tmp/ccPzxiH4.s 			page 136


3048:src/display.c **** 	  } else {
3049:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3050:src/display.c **** 	       : State2.ind ? 2 
3051:src/display.c **** 	       : num_arg_digits(CmdBase); */
3052:src/display.c **** 	    if (State2.local)
3053:src/display.c **** 	      *bp++ = '.';
3054:src/display.c **** 	    if (State2.numdigit > 0) {
3055:src/display.c **** 	      if (State2.shuffle)
3056:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3057:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3058:src/display.c **** 	      else
3059:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3060:src/display.c **** 	    }
3061:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3062:src/display.c **** 	    *bp++ = '_';
3063:src/display.c **** 	  }
3064:src/display.c **** 	  set_status(buf);
3065:src/display.c **** 	} else if (State2.test != TST_NONE) {
3066:src/display.c **** 	  *bp++ = 'x';
3067:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3068:src/display.c **** 	  *bp++ = '_';
3069:src/display.c **** 	  *bp++ = '?';
3070:src/display.c **** 	  set_status(buf);
3071:src/display.c **** 	} else if (cata) {
3072:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3073:src/display.c **** 	  char b2[16];
3074:src/display.c **** 	  const char *p;
3075:src/display.c **** 
3076:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3077:src/display.c **** 	  p = catcmd(op, b2);
3078:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3079:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3080:src/display.c **** 	  bp = scopy(bp, p);
3081:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3082:src/display.c **** 	    // State2.disp_small = 1;
3083:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3084:src/display.c **** 	      set_digits_string("0 to 255", 0);
3085:src/display.c **** 	    else
3086:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3087:src/display.c **** 	    skip = 1;
3088:src/display.c **** 	  } else if (State2.runmode) {
3089:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3090:src/display.c **** 	      decNumber x, r;
3091:src/display.c **** 	      decimal64 z;
3092:src/display.c **** 
3093:src/display.c **** 	      getX(&x);
3094:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3095:src/display.c **** 		const unsigned int f = argKIND(op);
3096:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3097:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3098:src/display.c **** 		  update_speed(0);
3099:src/display.c **** 		  fp(&r, &x);
3100:src/display.c **** 		}
3101:src/display.c **** 		else
3102:src/display.c **** 		  set_NaN(&r);
3103:src/display.c **** 	      } else
3104:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
ARM GAS  /tmp/ccPzxiH4.s 			page 137


3105:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3106:src/display.c **** 	      packed_from_number(&z, &r);
3107:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3108:src/display.c **** 	      skip = 1;
3109:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3110:src/display.c **** 	      REGISTER z, *const x = StackBase;
3111:src/display.c **** 	      copyreg(&z, x);
3112:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3113:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3114:src/display.c **** 	      copyreg(x, &z);
3115:src/display.c **** 	      skip = 1;
3116:src/display.c **** 	    }
3117:src/display.c **** 	  }
3118:src/display.c **** 	  set_status(buf);
3119:src/display.c **** 	} else if (State2.multi) {
3120:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3121:src/display.c **** 	  if (State2.numdigit > 0) {
3122:src/display.c **** 	    *bp++ = (char) State2.digval;
3123:src/display.c **** 	    if (State2.numdigit > 1)
3124:src/display.c **** 	      *bp++ = State2.digval2;
3125:src/display.c **** 	  }
3126:src/display.c **** 	  set_status(buf);
3127:src/display.c **** 	} else if (State2.status) {
3128:src/display.c **** 	  show_status();
3129:src/display.c **** 	  skip = 1;
3130:src/display.c **** 	} else if (State2.labellist) {
3131:src/display.c **** 	  show_label();
3132:src/display.c **** 	  skip = 1;
3133:src/display.c **** 	} else if (State2.registerlist) {
3134:src/display.c **** 	  show_registers();
3135:src/display.c **** 	  skip = 1;
3136:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3137:src/display.c **** 	    annunciators();
3138:src/display.c **** 	  }
3139:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3140:src/display.c **** 	} else if (State2.disp_as_alpha) {
3141:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3142:src/display.c **** #endif
3143:src/display.c **** 	} else if (State2.runmode) {
3144:src/display.c **** 	  if (DispMsg) { 
3145:src/display.c **** 	    set_status(DispMsg);
3146:src/display.c **** 	  } else if (DispPlot) {
3147:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3148:src/display.c **** 	  } else if (State2.alphas) {
3149:src/display.c **** #if 0
3150:src/display.c **** 	    set_digits_string("AlpHA", 0);
3151:src/display.c **** #endif
3152:src/display.c **** 	    bp = scopy(buf, Alpha);
3153:src/display.c **** 	    j = State2.alpha_pos;
3154:src/display.c **** 	    if (j != 0) {
3155:src/display.c **** 	      i = slen(buf);
3156:src/display.c **** 	      //				
3157:src/display.c **** 	      j *= 6;
3158:src/display.c **** #ifdef BIGGER_DISPLAY
3159:src/display.c **** 	      if ( i - j >= 20 )
3160:src/display.c **** #else
3161:src/display.c **** 	      if ( i - j >= 12 )
ARM GAS  /tmp/ccPzxiH4.s 			page 138


3162:src/display.c **** #endif
3163:src/display.c **** 		{
3164:src/display.c **** 		buf[ (i - j) ] = '\0';
3165:src/display.c **** 		set_status_right(buf);
3166:src/display.c **** 		}
3167:src/display.c **** 	      else {
3168:src/display.c **** 		set_status(buf);
3169:src/display.c **** 	      }
3170:src/display.c **** 	    } else {
3171:src/display.c **** 	      if (shift != SHIFT_N) {
3172:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3173:src/display.c **** 		*bp++ = '\0';
3174:src/display.c **** 	      }
3175:src/display.c **** 	      set_status_right(buf);
3176:src/display.c **** 	    }
3177:src/display.c **** 	  } else {
3178:src/display.c **** 	    annuc = 1;
3179:src/display.c **** 	  }
3180:src/display.c **** 	} else {
3181:src/display.c **** 	  i = state_pc();
3182:src/display.c **** 	  if (i > 0)
3183:src/display.c **** 	    set_status(prt(getprog(i), buf));
3184:src/display.c **** 	  else
3185:src/display.c **** 	    set_status("");
3186:src/display.c **** 	  set_dot(STO_annun);
3187:src/display.c **** #if 0
3188:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3189:src/display.c **** 	    unsigned short int crc;
3190:src/display.c **** 	    crc = checksum_program();
3191:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3192:src/display.c **** 	    for (i=0; i<4; i++) {
3193:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3194:src/display.c **** 	      crc >>= 4;
3195:src/display.c **** 	      j += SEGS_PER_DIGIT;
3196:src/display.c **** 	    }
3197:src/display.c **** 	    skip = 1;
3198:src/display.c **** 	  }
3199:src/display.c **** 	  else
3200:src/display.c **** #endif
3201:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3202:src/display.c **** 	      annuc = 1;
3203:src/display.c **** 	  goto nostk;
3204:src/display.c **** 	}
3205:src/display.c ****       nostk:
3206:src/display.c **** 	if (!skip) {
3207:src/display.c **** 	  if (State2.runmode) {
3208:src/display.c **** 	  only_update_x:
3209:src/display.c **** 	    p = get_cmdline();
3210:src/display.c **** 	    if (p == NULL || cata) {
3211:src/display.c **** 	      if (ShowRegister != -1) {
3212:src/display.c **** #ifdef INCLUDE_C_LOCK
3213:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3214:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3215:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3216:src/display.c **** 		    SET_POLAR_READY;
3217:src/display.c **** 		  }
3218:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
ARM GAS  /tmp/ccPzxiH4.s 			page 139


3219:src/display.c **** 		    State2.hms = 0;
3220:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3221:src/display.c **** 		    State2.hms = 1;
3222:src/display.c **** 		  }
3223:src/display.c **** 		  else {
3224:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3225:src/display.c **** 		  }
3226:src/display.c **** 		  x_disp = 1;
3227:src/display.c **** 		}
3228:src/display.c **** 		else {
3229:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3230:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3231:src/display.c **** 		}
3232:src/display.c **** #else
3233:src/display.c **** 
3234:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3235:src/display.c **** 		format_reg(ShowRegister, CNULL);
3236:src/display.c **** #endif
3237:src/display.c **** 	      }
3238:src/display.c **** 	      else
3239:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3240:src/display.c **** 	    } else {
3241:src/display.c **** 	      disp_x(p);
3242:src/display.c **** 	      x_disp = 1;
3243:src/display.c **** 	    }
3244:src/display.c **** 	    if (WasDataEntry) {
3245:src/display.c **** 	      goto finish;
3246:src/display.c **** 	    }
3247:src/display.c **** 	  } else {
3248:src/display.c **** 	    unsigned int pc = state_pc();
3249:src/display.c **** 	    unsigned int upc = user_pc(pc);
3250:src/display.c **** 	    const int n = nLIB(pc);
3251:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3252:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3253:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3254:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3255:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3256:src/display.c **** #if 0
3257:src/display.c **** #ifndef REALBUILD
3258:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3259:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3260:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3261:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3262:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3263:src/display.c **** 	      char *b=buf;
3264:src/display.c **** 	      char *l=LastDisplayedNumber;
3265:src/display.c **** 	      *l++=' ';
3266:src/display.c **** 	      while(*b) {
3267:src/display.c **** 		*l++=*b++;
3268:src/display.c **** 		*l++=' ';
3269:src/display.c **** 	      }
3270:src/display.c **** 	      *l=0;
3271:src/display.c **** 	    }
3272:src/display.c **** #endif
3273:src/display.c **** #endif
3274:src/display.c **** 	  }
3275:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 140


3276:src/display.c **** 	set_annunciators();
3277:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3278:src/display.c **** 	  ShowRPN = 0;
3279:src/display.c **** 	  dot(RPN, 0);
3280:src/display.c **** 	}
3281:src/display.c **** 	// disp_temp disables the <- key
3282:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3283:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3284:src/display.c **** 
3285:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3286:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3287:src/display.c **** 	  annunciators();
3288:src/display.c ****  	State2.hms = 0;
3289:src/display.c **** #else
3290:src/display.c **** 
3291:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3292:src/display.c **** 	  annunciators();
3293:src/display.c **** 	
3294:src/display.c **** 
3295:src/display.c **** 
3296:src/display.c **** #endif
3297:src/display.c **** 
3298:src/display.c ****       finish:
3299:src/display.c **** 	State2.version = 0;
3300:src/display.c **** 	State2.disp_as_alpha = 0;
3301:src/display.c **** 	State2.smode = SDISP_NORMAL;
3302:src/display.c **** 	State2.invalid_disp = 0;
3303:src/display.c **** 	ShowRegister = regX_idx;
3304:src/display.c **** 	DispMsg = CNULL;
3305:src/display.c **** 	DispPlot = 0;
3306:src/display.c **** 	State2.disp_small = 0;
3307:src/display.c **** 	if (WasDataEntry) {
3308:src/display.c **** 	  finish_7_segment();
3309:src/display.c **** 	  lcd_refresh();
3310:src/display.c **** 	}
3311:src/display.c **** 	else {
3312:src/display.c **** 	  finish_display();
3313:src/display.c **** 	}
3314:src/display.c **** #ifdef CONSOLE
3315:src/display.c **** 	JustDisplayed = 1;
3316:src/display.c **** #endif
3317:src/display.c ****       }
3318:src/display.c **** #endif
3319:src/display.c ****       /*
3320:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3321:src/display.c ****        */
3322:src/display.c ****       void frozen_display()
3323:src/display.c ****       {
3324:src/display.c **** 	State2.disp_freeze = 0;
3325:src/display.c **** 	display();
3326:src/display.c **** 	State2.disp_freeze = 1;
3327:src/display.c ****       }
3328:src/display.c **** 
3329:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3330:src/display.c **** 	int glen = *graphic++;
3331:src/display.c **** 	int i, j;
3332:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccPzxiH4.s 			page 141


3333:src/display.c **** 	unsigned long long int mat[6];
3334:src/display.c **** 
3335:src/display.c **** 	xset(mat, 0, sizeof(mat));
3336:src/display.c **** #endif
3337:src/display.c **** 	if (glen <= 0)			return;
3338:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3339:src/display.c **** 
3340:src/display.c **** 	for (i=0; i<6; i++)
3341:src/display.c **** 	  for (j=1; j<=glen; j++) {
3342:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3343:src/display.c **** 	    if (graphic[j] & (1 << i))
3344:src/display.c **** 	      mat[i] |= 1LL << j;
3345:src/display.c **** #else
3346:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3347:src/display.c **** #endif
3348:src/display.c **** 	  }
3349:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3350:src/display.c **** 	set_status_grob(mat);
3351:src/display.c **** #endif
3352:src/display.c ****       }
3353:src/display.c **** 
3354:src/display.c **** 
3355:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3356:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3357:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3358:src/display.c ****        * column is almost always blank.
3359:src/display.c ****        */
3360:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3361:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3362:src/display.c ****       }
3363:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3364:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3365:src/display.c ****       }
3366:src/display.c **** 
3367:src/display.c ****       
3368:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 3665              		.loc 1 3368 19 is_stmt 1 view -0
 3666              		.cfi_startproc
 3667              		@ args = 0, pretend = 0, frame = 544
 3668              		@ frame_needed = 0, uses_anonymous_args = 0
3369:src/display.c **** 	unsigned short int posns[257];
 3669              		.loc 1 3369 2 view .LVU1097
3370:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3371:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3372:src/display.c **** 	int posns_state = 255;
 3670              		.loc 1 3372 2 view .LVU1098
3373:src/display.c **** #endif
3374:src/display.c **** 	unsigned int x = 0;
 3671              		.loc 1 3374 2 view .LVU1099
3375:src/display.c **** 	int i, j;
 3672              		.loc 1 3375 2 view .LVU1100
3376:src/display.c **** 	const int offset = smallp ? 256 : 0;
 3673              		.loc 1 3376 2 view .LVU1101
3368:src/display.c **** 	unsigned short int posns[257];
 3674              		.loc 1 3368 19 is_stmt 0 view .LVU1102
 3675 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3676              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccPzxiH4.s 			page 142


 3677              		.cfi_offset 4, -36
 3678              		.cfi_offset 5, -32
 3679              		.cfi_offset 6, -28
 3680              		.cfi_offset 7, -24
 3681              		.cfi_offset 8, -20
 3682              		.cfi_offset 9, -16
 3683              		.cfi_offset 10, -12
 3684              		.cfi_offset 11, -8
 3685              		.cfi_offset 14, -4
3377:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3378:src/display.c **** 	unsigned long long int mat[6];
3379:src/display.c **** 
3380:src/display.c **** 	xset(mat, 0, sizeof(mat));
3381:src/display.c **** #endif
3382:src/display.c **** #ifdef RP_PREFIX
3383:src/display.c **** 	RectPolConv = 0;
 3686              		.loc 1 3383 14 view .LVU1103
 3687 0004 544B     		ldr	r3, .L388
 3688 0006 0027     		movs	r7, #0
3368:src/display.c **** 	unsigned short int posns[257];
 3689              		.loc 1 3368 19 view .LVU1104
 3690 0008 ADF5097D 		sub	sp, sp, #548
 3691              		.cfi_def_cfa_offset 584
 3692              		.loc 1 3383 14 view .LVU1105
 3693 000c 1F60     		str	r7, [r3]
3384:src/display.c **** #endif
3385:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3386:src/display.c **** 	findlengths(posns, smallp);
3387:src/display.c **** #endif
3388:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 3694              		.loc 1 3388 9 view .LVU1106
 3695 000e 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
3368:src/display.c **** 	unsigned short int posns[257];
 3696              		.loc 1 3368 19 view .LVU1107
 3697 0010 0090     		str	r0, [sp]
3376:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3698              		.loc 1 3376 34 view .LVU1108
 3699 0012 0B1E     		subs	r3, r1, #0
 3700 0014 0293     		str	r3, [sp, #8]
 3701 0016 14BF     		ite	ne
 3702 0018 4FF48073 		movne	r3, #256
 3703 001c 3B46     		moveq	r3, r7
 3704 001e 0393     		str	r3, [sp, #12]
 3705              	.LVL418:
3383:src/display.c **** #endif
 3706              		.loc 1 3383 2 is_stmt 1 view .LVU1109
 3707              		.loc 1 3388 2 view .LVU1110
 3708              		.loc 1 3388 8 view .LVU1111
 3709 0020 002D     		cmp	r5, #0
 3710 0022 00F09680 		beq	.L374
 3711              	.LBB333:
3389:src/display.c **** 	  int c;
3390:src/display.c **** 	  int width;
3391:src/display.c **** 	  unsigned char cmap[6];
3392:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3393:src/display.c **** 	  int real_width;
3394:src/display.c **** 	  int current_smallp;
ARM GAS  /tmp/ccPzxiH4.s 			page 143


3395:src/display.c **** 
3396:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3397:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3398:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3399:src/display.c **** 	  //           01 -> (not used)
3400:src/display.c **** 	  //           10 -> use big font
3401:src/display.c **** 	  //           11 -> use small font
3402:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3403:src/display.c **** 	  if (str[0] == '\007') {
 3712              		.loc 1 3403 7 is_stmt 0 view .LVU1112
 3713 0026 072D     		cmp	r5, #7
 3714              	.LBE333:
3372:src/display.c **** #endif
 3715              		.loc 1 3372 6 view .LVU1113
 3716 0028 4FF0FF04 		mov	r4, #255
 3717              	.LVL419:
 3718              	.LBB342:
3389:src/display.c **** 	  int c;
 3719              		.loc 1 3389 4 is_stmt 1 view .LVU1114
3390:src/display.c **** 	  unsigned char cmap[6];
 3720              		.loc 1 3390 4 view .LVU1115
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3721              		.loc 1 3391 4 view .LVU1116
3393:src/display.c **** 	  int current_smallp;
 3722              		.loc 1 3393 4 view .LVU1117
3394:src/display.c **** 
 3723              		.loc 1 3394 4 view .LVU1118
 3724              		.loc 1 3403 4 view .LVU1119
 3725              		.loc 1 3403 7 is_stmt 0 view .LVU1120
 3726 002c 62D1     		bne	.L353
 3727              	.LVL420:
 3728              	.L386:
3404:src/display.c **** 	    width = str[1] & 0x1F;
 3729              		.loc 1 3404 6 is_stmt 1 view .LVU1121
 3730              		.loc 1 3404 17 is_stmt 0 view .LVU1122
 3731 002e 009B     		ldr	r3, [sp]
 3732 0030 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 3733 0032 06F06003 		and	r3, r6, #96
3405:src/display.c **** 	    switch (str[1] & 0x60) {
 3734              		.loc 1 3405 6 view .LVU1123
 3735 0036 402B     		cmp	r3, #64
3404:src/display.c **** 	    width = str[1] & 0x1F;
 3736              		.loc 1 3404 12 view .LVU1124
 3737 0038 06F01F06 		and	r6, r6, #31
 3738              	.LVL421:
 3739              		.loc 1 3405 6 is_stmt 1 view .LVU1125
 3740 003c 7AD0     		beq	.L354
 3741 003e 602B     		cmp	r3, #96
 3742 0040 7DD0     		beq	.L355
 3743              	.LVL422:
3406:src/display.c **** 	    default:
3407:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x40:	current_smallp = 0;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    case 0x60:	current_smallp = 1;
3412:src/display.c **** 	      break;
ARM GAS  /tmp/ccPzxiH4.s 			page 144


3413:src/display.c **** 	    }
3414:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 3744              		.loc 1 3414 6 view .LVU1126
 3745              		.loc 1 3414 10 is_stmt 0 view .LVU1127
 3746 0042 009B     		ldr	r3, [sp]
 3747 0044 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 3748              		.loc 1 3414 57 view .LVU1128
 3749 0046 029B     		ldr	r3, [sp, #8]
 3750 0048 002B     		cmp	r3, #0
 3751 004a 7FD0     		beq	.L375
 3752 004c 05F58075 		add	r5, r5, #256
 3753 0050 9A46     		mov	r10, r3
 3754              	.LVL423:
 3755              	.L357:
3415:src/display.c **** 	    str += 3;
 3756              		.loc 1 3415 6 is_stmt 1 view .LVU1129
3416:src/display.c **** 
3417:src/display.c **** 	    real_width = charlengths(c);
 3757              		.loc 1 3417 19 is_stmt 0 view .LVU1130
 3758 0052 2846     		mov	r0, r5
 3759 0054 FFF7FEFF 		bl	charlengths
 3760              	.LVL424:
3415:src/display.c **** 	    str += 3;
 3761              		.loc 1 3415 10 view .LVU1131
 3762 0058 009B     		ldr	r3, [sp]
3418:src/display.c **** 	  } else {
3419:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3420:src/display.c **** 	    real_width = width = charlengths(c);
3421:src/display.c **** 	    current_smallp = smallp;
3422:src/display.c **** 	  }
3423:src/display.c **** 
3424:src/display.c **** 	  if (x + real_width > b_w + 1)
 3763              		.loc 1 3424 10 view .LVU1132
 3764 005a 3844     		add	r0, r0, r7
3415:src/display.c **** 
 3765              		.loc 1 3415 10 view .LVU1133
 3766 005c 0333     		adds	r3, r3, #3
 3767              		.loc 1 3424 7 view .LVU1134
 3768 005e 2C28     		cmp	r0, #44
3415:src/display.c **** 
 3769              		.loc 1 3415 10 view .LVU1135
 3770 0060 0093     		str	r3, [sp]
 3771              	.LVL425:
3417:src/display.c **** 	  } else {
 3772              		.loc 1 3417 6 is_stmt 1 view .LVU1136
 3773              		.loc 1 3424 4 view .LVU1137
 3774              		.loc 1 3424 7 is_stmt 0 view .LVU1138
 3775 0062 55D8     		bhi	.L369
 3776              	.L387:
3425:src/display.c **** 	    break;
3426:src/display.c **** 
3427:src/display.c **** 	  if (posns_state != current_smallp) {
 3777              		.loc 1 3427 4 is_stmt 1 view .LVU1139
 3778              		.loc 1 3427 7 is_stmt 0 view .LVU1140
 3779 0064 A245     		cmp	r10, r4
3428:src/display.c **** 	    findlengths(posns, current_smallp);
 3780              		.loc 1 3428 6 view .LVU1141
ARM GAS  /tmp/ccPzxiH4.s 			page 145


 3781 0066 07AB     		add	r3, sp, #28
 3782              	.LVL426:
3427:src/display.c **** 	    findlengths(posns, current_smallp);
 3783              		.loc 1 3427 7 view .LVU1142
 3784 0068 05D0     		beq	.L360
 3785              		.loc 1 3428 6 is_stmt 1 view .LVU1143
 3786 006a 1846     		mov	r0, r3
 3787 006c 5146     		mov	r1, r10
 3788 006e 0193     		str	r3, [sp, #4]
 3789 0070 FFF7FEFF 		bl	findlengths
 3790              	.LVL427:
 3791 0074 019B     		ldr	r3, [sp, #4]
3429:src/display.c **** 	    posns_state = current_smallp;
 3792              		.loc 1 3429 6 view .LVU1144
 3793              	.LVL428:
 3794              	.L360:
3430:src/display.c **** 	  }
3431:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 3795              		.loc 1 3431 4 view .LVU1145
 3796 0076 2846     		mov	r0, r5
 3797 0078 05A9     		add	r1, sp, #20
 3798 007a 5246     		mov	r2, r10
 3799 007c 07EB4708 		add	r8, r7, r7, lsl #1
 3800 0080 FFF7FEFF 		bl	unpackchar
 3801              	.LVL429:
3432:src/display.c **** #else
3433:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3434:src/display.c **** 
3435:src/display.c **** 	  //cmap = &charset[c][0];
3436:src/display.c **** 	  width = charlengths(c);
3437:src/display.c **** 
3438:src/display.c **** 	  if (x + width > b_w+1)
3439:src/display.c **** 	    break;
3440:src/display.c **** 
3441:src/display.c **** 	  /* Decode the packed character bytes */
3442:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3443:src/display.c **** #endif
3444:src/display.c **** 
3445:src/display.c **** 	  for (i=0; i<6; i++)
 3802              		.loc 1 3445 4 view .LVU1146
 3803              		.loc 1 3445 14 view .LVU1147
 3804 0084 4FEA4808 		lsl	r8, r8, #1
 3805 0088 05AD     		add	r5, sp, #20
 3806              	.LVL430:
 3807              		.loc 1 3445 14 is_stmt 0 view .LVU1148
 3808 008a A8F58178 		sub	r8, r8, #258
3431:src/display.c **** #else
 3809              		.loc 1 3431 4 view .LVU1149
 3810 008e 4FF4C874 		mov	r4, #400
 3811              	.LVL431:
 3812              	.L361:
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3813              		.loc 1 3446 16 is_stmt 1 view .LVU1150
 3814              		.loc 1 3446 6 is_stmt 0 view .LVU1151
 3815 0092 002E     		cmp	r6, #0
 3816 0094 1FDD     		ble	.L367
3447:src/display.c **** 	      if (x+j >= b_w)
ARM GAS  /tmp/ccPzxiH4.s 			page 146


 3817              		.loc 1 3447 8 is_stmt 1 view .LVU1152
 3818              		.loc 1 3447 11 is_stmt 0 view .LVU1153
 3819 0096 2A2F     		cmp	r7, #42
 3820 0098 1DD8     		bhi	.L367
 3821 009a 08EB0409 		add	r9, r8, r4
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3822              		.loc 1 3446 12 view .LVU1154
 3823 009e 4FF0000B 		mov	fp, #0
 3824 00a2 09E0     		b	.L362
 3825              	.LVL432:
 3826              	.L385:
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3827              		.loc 1 3446 26 view .LVU1155
 3828 00a4 0BF1010B 		add	fp, fp, #1
 3829              	.LVL433:
 3830              	.LBB334:
 3831              	.LBB335:
 284:src/display.c ****   else	clr_dot(n);
 3832              		.loc 1 284 11 view .LVU1156
 3833 00a8 FFF7FEFF 		bl	set_dot
 3834              	.LVL434:
 284:src/display.c ****   else	clr_dot(n);
 3835              		.loc 1 284 11 view .LVU1157
 3836              	.LBE335:
 3837              	.LBE334:
 3838              		.loc 1 3447 8 is_stmt 1 view .LVU1158
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3839              		.loc 1 3446 25 view .LVU1159
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3840              		.loc 1 3446 16 view .LVU1160
3446:src/display.c **** 	    for (j=0; j<width; j++) {
 3841              		.loc 1 3446 6 is_stmt 0 view .LVU1161
 3842 00ac B345     		cmp	fp, r6
 3843 00ae 09F10609 		add	r9, r9, #6
 3844 00b2 10D0     		beq	.L367
 3845              	.L366:
 3846              		.loc 1 3447 11 view .LVU1162
 3847 00b4 A145     		cmp	r9, r4
 3848 00b6 0ED0     		beq	.L367
 3849              	.LVL435:
 3850              	.L362:
3448:src/display.c **** 		break;
3449:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3450:src/display.c **** 	      if (cmap[i] & (1 << j))
3451:src/display.c **** 		mat[i] |= 1LL << (x+j);
3452:src/display.c **** #else
3453:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 3851              		.loc 1 3453 8 is_stmt 1 view .LVU1163
 3852              	.LBB339:
 3853              	.LBI334:
 283:src/display.c ****   if (on)	set_dot(n);
 3854              		.loc 1 283 6 view .LVU1164
 3855              	.LBB336:
 284:src/display.c ****   else	clr_dot(n);
 3856              		.loc 1 284 3 view .LVU1165
 284:src/display.c ****   else	clr_dot(n);
 3857              		.loc 1 284 11 view .LVU1166
ARM GAS  /tmp/ccPzxiH4.s 			page 147


 285:src/display.c **** }
 3858              		.loc 1 285 8 view .LVU1167
 3859              	.LBE336:
 3860              	.LBE339:
 3861              		.loc 1 3453 32 is_stmt 0 view .LVU1168
 3862 00b8 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 3863              		.loc 1 3453 47 view .LVU1169
 3864 00ba 41FA0BF1 		asr	r1, r1, fp
 3865              	.LBB340:
 3866              	.LBB337:
 284:src/display.c ****   else	clr_dot(n);
 3867              		.loc 1 284 6 view .LVU1170
 3868 00be 11F0010F 		tst	r1, #1
 284:src/display.c ****   else	clr_dot(n);
 3869              		.loc 1 284 11 view .LVU1171
 3870 00c2 4846     		mov	r0, r9
 284:src/display.c ****   else	clr_dot(n);
 3871              		.loc 1 284 6 view .LVU1172
 3872 00c4 EED1     		bne	.L385
 3873              	.LBE337:
 3874              	.LBE340:
3446:src/display.c **** 	      if (x+j >= b_w)
 3875              		.loc 1 3446 26 view .LVU1173
 3876 00c6 0BF1010B 		add	fp, fp, #1
 3877              	.LVL436:
 3878              	.LBB341:
 3879              	.LBB338:
 285:src/display.c **** }
 3880              		.loc 1 285 8 view .LVU1174
 3881 00ca FFF7FEFF 		bl	clr_dot
 3882              	.LVL437:
 285:src/display.c **** }
 3883              		.loc 1 285 8 view .LVU1175
 3884              	.LBE338:
 3885              	.LBE341:
3447:src/display.c **** 		break;
 3886              		.loc 1 3447 8 is_stmt 1 view .LVU1176
3446:src/display.c **** 	      if (x+j >= b_w)
 3887              		.loc 1 3446 25 view .LVU1177
3446:src/display.c **** 	      if (x+j >= b_w)
 3888              		.loc 1 3446 16 view .LVU1178
3446:src/display.c **** 	      if (x+j >= b_w)
 3889              		.loc 1 3446 6 is_stmt 0 view .LVU1179
 3890 00ce B345     		cmp	fp, r6
 3891 00d0 09F10609 		add	r9, r9, #6
 3892 00d4 EED1     		bne	.L366
 3893              	.LVL438:
 3894              	.L367:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 3895              		.loc 1 3445 19 is_stmt 1 view .LVU1180
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 3896              		.loc 1 3445 14 view .LVU1181
 3897 00d6 0134     		adds	r4, r4, #1
 3898              	.LVL439:
3445:src/display.c **** 	    for (j=0; j<width; j++) {
 3899              		.loc 1 3445 4 is_stmt 0 view .LVU1182
 3900 00d8 B4F5CB7F 		cmp	r4, #406
ARM GAS  /tmp/ccPzxiH4.s 			page 148


 3901 00dc 05F10105 		add	r5, r5, #1
 3902 00e0 D7D1     		bne	.L361
3454:src/display.c **** #endif
3455:src/display.c **** 	    }
3456:src/display.c **** 	  x += width;
 3903              		.loc 1 3456 4 is_stmt 1 view .LVU1183
 3904              	.LBE342:
3388:src/display.c **** 	  int c;
 3905              		.loc 1 3388 9 is_stmt 0 view .LVU1184
 3906 00e2 009B     		ldr	r3, [sp]
 3907 00e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3908              	.LBB343:
 3909              		.loc 1 3456 6 view .LVU1185
 3910 00e6 3744     		add	r7, r7, r6
 3911              	.LVL440:
 3912              		.loc 1 3456 6 view .LVU1186
 3913              	.LBE343:
3388:src/display.c **** 	  int c;
 3914              		.loc 1 3388 8 is_stmt 1 view .LVU1187
 3915 00e8 95B1     		cbz	r5, .L369
3388:src/display.c **** 	  int c;
 3916              		.loc 1 3388 22 is_stmt 0 view .LVU1188
 3917 00ea 2C2F     		cmp	r7, #44
 3918 00ec 10D8     		bhi	.L369
 3919              	.LBB344:
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3920              		.loc 1 3403 7 view .LVU1189
 3921 00ee 072D     		cmp	r5, #7
 3922              	.LBE344:
 3923 00f0 5446     		mov	r4, r10
 3924              	.LVL441:
 3925              	.LBB345:
3389:src/display.c **** 	  int width;
 3926              		.loc 1 3389 4 is_stmt 1 view .LVU1190
3390:src/display.c **** 	  unsigned char cmap[6];
 3927              		.loc 1 3390 4 view .LVU1191
3391:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3928              		.loc 1 3391 4 view .LVU1192
3393:src/display.c **** 	  int current_smallp;
 3929              		.loc 1 3393 4 view .LVU1193
3394:src/display.c **** 
 3930              		.loc 1 3394 4 view .LVU1194
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3931              		.loc 1 3403 4 view .LVU1195
3403:src/display.c **** 	    width = str[1] & 0x1F;
 3932              		.loc 1 3403 7 is_stmt 0 view .LVU1196
 3933 00f2 9CD0     		beq	.L386
 3934              	.LVL442:
 3935              	.L353:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 3936              		.loc 1 3419 6 is_stmt 1 view .LVU1197
3419:src/display.c **** 	    real_width = width = charlengths(c);
 3937              		.loc 1 3419 8 is_stmt 0 view .LVU1198
 3938 00f4 039B     		ldr	r3, [sp, #12]
 3939 00f6 1D44     		add	r5, r5, r3
3420:src/display.c **** 	    current_smallp = smallp;
 3940              		.loc 1 3420 27 view .LVU1199
ARM GAS  /tmp/ccPzxiH4.s 			page 149


 3941 00f8 2846     		mov	r0, r5
 3942 00fa FFF7FEFF 		bl	charlengths
 3943              	.LVL443:
3419:src/display.c **** 	    real_width = width = charlengths(c);
 3944              		.loc 1 3419 30 view .LVU1200
 3945 00fe 009B     		ldr	r3, [sp]
3420:src/display.c **** 	    current_smallp = smallp;
 3946              		.loc 1 3420 25 view .LVU1201
 3947 0100 DDF808A0 		ldr	r10, [sp, #8]
 3948 0104 0646     		mov	r6, r0
3424:src/display.c **** 	    break;
 3949              		.loc 1 3424 10 view .LVU1202
 3950 0106 3844     		add	r0, r0, r7
3419:src/display.c **** 	    real_width = width = charlengths(c);
 3951              		.loc 1 3419 30 view .LVU1203
 3952 0108 0133     		adds	r3, r3, #1
3424:src/display.c **** 	    break;
 3953              		.loc 1 3424 7 view .LVU1204
 3954 010a 2C28     		cmp	r0, #44
3419:src/display.c **** 	    real_width = width = charlengths(c);
 3955              		.loc 1 3419 30 view .LVU1205
 3956 010c 0093     		str	r3, [sp]
 3957              	.LVL444:
3420:src/display.c **** 	    current_smallp = smallp;
 3958              		.loc 1 3420 6 is_stmt 1 view .LVU1206
3421:src/display.c **** 	  }
 3959              		.loc 1 3421 6 view .LVU1207
3424:src/display.c **** 	    break;
 3960              		.loc 1 3424 4 view .LVU1208
3424:src/display.c **** 	    break;
 3961              		.loc 1 3424 7 is_stmt 0 view .LVU1209
 3962 010e A9D9     		bls	.L387
 3963              	.LVL445:
 3964              	.L369:
3424:src/display.c **** 	    break;
 3965              		.loc 1 3424 7 view .LVU1210
 3966              	.LBE345:
3457:src/display.c **** 	}
3458:src/display.c **** 
3459:src/display.c **** 
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	set_status_grob(mat);
3462:src/display.c **** #else
3463:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 3967              		.loc 1 3463 2 is_stmt 1 view .LVU1211
 3968              		.loc 1 3463 16 is_stmt 0 view .LVU1212
 3969 0110 07EB4704 		add	r4, r7, r7, lsl #1
 3970 0114 6400     		lsls	r4, r4, #1
 3971              		.loc 1 3463 13 view .LVU1213
 3972 0116 8E34     		adds	r4, r4, #142
 3973              	.LVL446:
 3974              		.loc 1 3463 20 is_stmt 1 view .LVU1214
 3975              		.loc 1 3463 2 is_stmt 0 view .LVU1215
 3976 0118 B4F5C87F 		cmp	r4, #400
 3977 011c 06DA     		bge	.L350
 3978              	.LVL447:
 3979              	.L371:
ARM GAS  /tmp/ccPzxiH4.s 			page 150


3464:src/display.c **** 	  clr_dot(i);
 3980              		.loc 1 3464 4 is_stmt 1 view .LVU1216
 3981 011e 2046     		mov	r0, r4
3463:src/display.c **** 	  clr_dot(i);
 3982              		.loc 1 3463 28 is_stmt 0 view .LVU1217
 3983 0120 0134     		adds	r4, r4, #1
 3984              	.LVL448:
 3985              		.loc 1 3464 4 view .LVU1218
 3986 0122 FFF7FEFF 		bl	clr_dot
 3987              	.LVL449:
3463:src/display.c **** 	  clr_dot(i);
 3988              		.loc 1 3463 27 is_stmt 1 view .LVU1219
3463:src/display.c **** 	  clr_dot(i);
 3989              		.loc 1 3463 20 view .LVU1220
3463:src/display.c **** 	  clr_dot(i);
 3990              		.loc 1 3463 2 is_stmt 0 view .LVU1221
 3991 0126 B4F5C87F 		cmp	r4, #400
 3992 012a F8D1     		bne	.L371
 3993              	.L350:
3465:src/display.c **** #endif
3466:src/display.c ****       }
 3994              		.loc 1 3466 7 view .LVU1222
 3995 012c 0DF5097D 		add	sp, sp, #548
 3996              		.cfi_remember_state
 3997              		.cfi_def_cfa_offset 36
 3998              	.LVL450:
 3999              		.loc 1 3466 7 view .LVU1223
 4000              		@ sp needed
 4001 0130 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4002              	.LVL451:
 4003              	.L354:
 4004              		.cfi_restore_state
 4005              	.LBB346:
3409:src/display.c **** 	      break;
 4006              		.loc 1 3409 17 is_stmt 1 view .LVU1224
3410:src/display.c **** 	    case 0x60:	current_smallp = 1;
 4007              		.loc 1 3410 8 view .LVU1225
3414:src/display.c **** 	    str += 3;
 4008              		.loc 1 3414 6 view .LVU1226
3414:src/display.c **** 	    str += 3;
 4009              		.loc 1 3414 10 is_stmt 0 view .LVU1227
 4010 0134 009B     		ldr	r3, [sp]
3409:src/display.c **** 	      break;
 4011              		.loc 1 3409 32 view .LVU1228
 4012 0136 4FF0000A 		mov	r10, #0
3414:src/display.c **** 	    str += 3;
 4013              		.loc 1 3414 10 view .LVU1229
 4014 013a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 4015 013c 89E7     		b	.L357
 4016              	.LVL452:
 4017              	.L355:
3411:src/display.c **** 	      break;
 4018              		.loc 1 3411 17 is_stmt 1 view .LVU1230
3412:src/display.c **** 	    }
 4019              		.loc 1 3412 8 view .LVU1231
3414:src/display.c **** 	    str += 3;
 4020              		.loc 1 3414 6 view .LVU1232
ARM GAS  /tmp/ccPzxiH4.s 			page 151


3414:src/display.c **** 	    str += 3;
 4021              		.loc 1 3414 10 is_stmt 0 view .LVU1233
 4022 013e 009B     		ldr	r3, [sp]
 4023 0140 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
3411:src/display.c **** 	      break;
 4024              		.loc 1 3411 32 view .LVU1234
 4025 0142 4FF0010A 		mov	r10, #1
 4026 0146 00F58075 		add	r5, r0, #256
 4027 014a 82E7     		b	.L357
 4028              	.LVL453:
 4029              	.L375:
3411:src/display.c **** 	      break;
 4030              		.loc 1 3411 32 view .LVU1235
 4031 014c DDF808A0 		ldr	r10, [sp, #8]
 4032 0150 7FE7     		b	.L357
 4033              	.LVL454:
 4034              	.L374:
3411:src/display.c **** 	      break;
 4035              		.loc 1 3411 32 view .LVU1236
 4036              	.LBE346:
3463:src/display.c **** 	  clr_dot(i);
 4037              		.loc 1 3463 8 view .LVU1237
 4038 0152 8E24     		movs	r4, #142
 4039 0154 E3E7     		b	.L371
 4040              	.L389:
 4041 0156 00BF     		.align	2
 4042              	.L388:
 4043 0158 00000000 		.word	RectPolConv
 4044              		.cfi_endproc
 4045              	.LFE56:
 4047              		.section	.text.getdig,"ax",%progbits
 4048              		.align	1
 4049              		.p2align 2,,3
 4050              		.global	getdig
 4051              		.syntax unified
 4052              		.thumb
 4053              		.thumb_func
 4054              		.fpu fpv4-sp-d16
 4056              	getdig:
 4057              	.LVL455:
 4058              	.LFB6:
 278:src/display.c ****   // perform index lookup
 4059              		.loc 1 278 1 is_stmt 1 view -0
 4060              		.cfi_startproc
 4061              		@ args = 0, pretend = 0, frame = 0
 4062              		@ frame_needed = 0, uses_anonymous_args = 0
 4063              		@ link register save eliminated.
 280:src/display.c **** }
 4064              		.loc 1 280 3 view .LVU1239
 280:src/display.c **** }
 4065              		.loc 1 280 16 is_stmt 0 view .LVU1240
 4066 0000 014B     		ldr	r3, .L391
 280:src/display.c **** }
 4067              		.loc 1 280 19 view .LVU1241
 4068 0002 C0B2     		uxtb	r0, r0
 4069              	.LVL456:
 281:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 152


 4070              		.loc 1 281 1 view .LVU1242
 4071 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4072 0006 7047     		bx	lr
 4073              	.L392:
 4074              		.align	2
 4075              	.L391:
 4076 0008 00000000 		.word	.LANCHOR2
 4077              		.cfi_endproc
 4078              	.LFE6:
 4080              		.section	.text.dot,"ax",%progbits
 4081              		.align	1
 4082              		.p2align 2,,3
 4083              		.global	dot
 4084              		.syntax unified
 4085              		.thumb
 4086              		.thumb_func
 4087              		.fpu fpv4-sp-d16
 4089              	dot:
 4090              	.LVL457:
 4091              	.LFB7:
 283:src/display.c ****   if (on)	set_dot(n);
 4092              		.loc 1 283 25 is_stmt 1 view -0
 4093              		.cfi_startproc
 4094              		@ args = 0, pretend = 0, frame = 0
 4095              		@ frame_needed = 0, uses_anonymous_args = 0
 4096              		@ link register save eliminated.
 284:src/display.c ****   else	clr_dot(n);
 4097              		.loc 1 284 3 view .LVU1244
 284:src/display.c ****   else	clr_dot(n);
 4098              		.loc 1 284 6 is_stmt 0 view .LVU1245
 4099 0000 09B1     		cbz	r1, .L394
 284:src/display.c ****   else	clr_dot(n);
 4100              		.loc 1 284 11 is_stmt 1 discriminator 1 view .LVU1246
 4101 0002 FFF7FEBF 		b	set_dot
 4102              	.LVL458:
 4103              	.L394:
 285:src/display.c **** }
 4104              		.loc 1 285 8 view .LVU1247
 4105 0006 FFF7FEBF 		b	clr_dot
 4106              	.LVL459:
 285:src/display.c **** }
 4107              		.loc 1 285 8 is_stmt 0 view .LVU1248
 4108              		.cfi_endproc
 4109              	.LFE7:
 4111 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4112              		.align	1
 4113              		.p2align 2,,3
 4114              		.global	std_round_fix
 4115              		.syntax unified
 4116              		.thumb
 4117              		.thumb_func
 4118              		.fpu fpv4-sp-d16
 4120              	std_round_fix:
 4121              	.LVL460:
 4122              	.LFB24:
1751:src/display.c **** 	decNumber c;
 4123              		.loc 1 1751 93 is_stmt 1 view -0
ARM GAS  /tmp/ccPzxiH4.s 			page 153


 4124              		.cfi_startproc
 4125              		@ args = 0, pretend = 0, frame = 40
 4126              		@ frame_needed = 0, uses_anonymous_args = 0
1751:src/display.c **** 	decNumber c;
 4127              		.loc 1 1751 93 is_stmt 0 view .LVU1250
 4128 0000 70B5     		push	{r4, r5, r6, lr}
 4129              		.cfi_def_cfa_offset 16
 4130              		.cfi_offset 4, -16
 4131              		.cfi_offset 5, -12
 4132              		.cfi_offset 6, -8
 4133              		.cfi_offset 14, -4
 4134 0002 0E46     		mov	r6, r1
1752:src/display.c **** 	int true_exp, x=0;
 4135              		.loc 1 1752 2 is_stmt 1 view .LVU1251
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4136              		.loc 1 1753 2 view .LVU1252
 4137              	.LVL461:
1754:src/display.c **** 
 4138              		.loc 1 1754 2 view .LVU1253
1756:src/display.c **** 	  min_pos_exp = 9;
 4139              		.loc 1 1756 2 view .LVU1254
1751:src/display.c **** 	decNumber c;
 4140              		.loc 1 1751 93 is_stmt 0 view .LVU1255
 4141 0004 8AB0     		sub	sp, sp, #40
 4142              		.cfi_def_cfa_offset 56
1756:src/display.c **** 	  min_pos_exp = 9;
 4143              		.loc 1 1756 5 view .LVU1256
 4144 0006 92B9     		cbnz	r2, .L396
1761:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4145              		.loc 1 1761 4 is_stmt 1 view .LVU1257
 4146              	.LVL462:
1762:src/display.c **** 	}
 4147              		.loc 1 1762 4 view .LVU1258
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4148              		.loc 1 1765 2 view .LVU1259
 4149 0008 0146     		mov	r1, r0
 4150              	.LVL463:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4151              		.loc 1 1765 2 is_stmt 0 view .LVU1260
 4152 000a 01A8     		add	r0, sp, #4
 4153              	.LVL464:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4154              		.loc 1 1765 2 view .LVU1261
 4155 000c 1D46     		mov	r5, r3
 4156 000e FFF7FEFF 		bl	dn_abs
 4157              	.LVL465:
1766:src/display.c **** 
 4158              		.loc 1 1766 2 is_stmt 1 view .LVU1262
1766:src/display.c **** 
 4159              		.loc 1 1766 24 is_stmt 0 view .LVU1263
 4160 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4161 0016 1844     		add	r0, r0, r3
 4162              	.LVL466:
1768:src/display.c **** 	  x = *dd;
 4163              		.loc 1 1768 2 is_stmt 1 view .LVU1264
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4164              		.loc 1 1772 2 view .LVU1265
ARM GAS  /tmp/ccPzxiH4.s 			page 154


1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4165              		.loc 1 1772 5 is_stmt 0 view .LVU1266
 4166 0018 0138     		subs	r0, r0, #1
 4167 001a 1AD5     		bpl	.L400
1762:src/display.c **** 	}
 4168              		.loc 1 1762 16 view .LVU1267
 4169 001c EB43     		mvns	r3, r5
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4170              		.loc 1 1772 21 view .LVU1268
 4171 001e 8342     		cmp	r3, r0
 4172 0020 17DA     		bge	.L400
 4173              	.LVL467:
 4174              	.L402:
1774:src/display.c **** 	  return MODE_FIX;
 4175              		.loc 1 1774 4 is_stmt 1 view .LVU1269
1774:src/display.c **** 	  return MODE_FIX;
 4176              		.loc 1 1774 8 is_stmt 0 view .LVU1270
 4177 0022 3368     		ldr	r3, [r6]
 4178 0024 181A     		subs	r0, r3, r0
 4179 0026 3060     		str	r0, [r6]
1775:src/display.c **** 	}
 4180              		.loc 1 1775 4 is_stmt 1 view .LVU1271
1775:src/display.c **** 	}
 4181              		.loc 1 1775 11 is_stmt 0 view .LVU1272
 4182 0028 0120     		movs	r0, #1
1784:src/display.c **** #else
 4183              		.loc 1 1784 7 view .LVU1273
 4184 002a 0AB0     		add	sp, sp, #40
 4185              		.cfi_remember_state
 4186              		.cfi_def_cfa_offset 16
 4187              		@ sp needed
 4188 002c 70BD     		pop	{r4, r5, r6, pc}
 4189              	.LVL468:
 4190              	.L396:
 4191              		.cfi_restore_state
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4192              		.loc 1 1765 2 is_stmt 1 view .LVU1274
 4193 002e 0146     		mov	r1, r0
 4194              	.LVL469:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4195              		.loc 1 1765 2 is_stmt 0 view .LVU1275
 4196 0030 01A8     		add	r0, sp, #4
 4197              	.LVL470:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4198              		.loc 1 1765 2 view .LVU1276
 4199 0032 1446     		mov	r4, r2
 4200 0034 FFF7FEFF 		bl	dn_abs
 4201              	.LVL471:
1766:src/display.c **** 
 4202              		.loc 1 1766 2 is_stmt 1 view .LVU1277
1766:src/display.c **** 
 4203              		.loc 1 1766 24 is_stmt 0 view .LVU1278
 4204 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1768:src/display.c **** 	  x = *dd;
 4205              		.loc 1 1768 5 view .LVU1279
 4206 003c 052C     		cmp	r4, #5
1766:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 155


 4207              		.loc 1 1766 24 view .LVU1280
 4208 003e 1344     		add	r3, r3, r2
1766:src/display.c **** 
 4209              		.loc 1 1766 11 view .LVU1281
 4210 0040 03F1FF30 		add	r0, r3, #-1
 4211              	.LVL472:
1768:src/display.c **** 	  x = *dd;
 4212              		.loc 1 1768 2 is_stmt 1 view .LVU1282
1768:src/display.c **** 	  x = *dd;
 4213              		.loc 1 1768 5 is_stmt 0 view .LVU1283
 4214 0044 15D1     		bne	.L404
1769:src/display.c **** 	}
 4215              		.loc 1 1769 4 is_stmt 1 view .LVU1284
1769:src/display.c **** 	}
 4216              		.loc 1 1769 6 is_stmt 0 view .LVU1285
 4217 0046 3268     		ldr	r2, [r6]
 4218              	.LVL473:
 4219              	.L399:
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4220              		.loc 1 1772 2 is_stmt 1 view .LVU1286
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4221              		.loc 1 1772 5 is_stmt 0 view .LVU1287
 4222 0048 8242     		cmp	r2, r0
 4223 004a 05DC     		bgt	.L408
1778:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4224              		.loc 1 1778 53 discriminator 2 view .LVU1288
 4225 004c 0333     		adds	r3, r3, #3
 4226 004e 0C2B     		cmp	r3, #12
 4227 0050 04D8     		bhi	.L403
 4228              	.LVL474:
 4229              	.L400:
1782:src/display.c **** 	}
 4230              		.loc 1 1782 11 view .LVU1289
 4231 0052 0020     		movs	r0, #0
1784:src/display.c **** #else
 4232              		.loc 1 1784 7 view .LVU1290
 4233 0054 0AB0     		add	sp, sp, #40
 4234              		.cfi_remember_state
 4235              		.cfi_def_cfa_offset 16
 4236              		@ sp needed
 4237 0056 70BD     		pop	{r4, r5, r6, pc}
 4238              	.LVL475:
 4239              	.L408:
 4240              		.cfi_restore_state
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4241              		.loc 1 1772 21 view .LVU1291
 4242 0058 031D     		adds	r3, r0, #4
 4243 005a E2DA     		bge	.L402
 4244              	.L403:
 4245              	.LBB349:
 4246              	.LBI349:
1751:src/display.c **** 	decNumber c;
 4247              		.loc 1 1751 26 is_stmt 1 view .LVU1292
 4248              	.LVL476:
 4249              	.LBB350:
1779:src/display.c **** 	}
 4250              		.loc 1 1779 4 view .LVU1293
ARM GAS  /tmp/ccPzxiH4.s 			page 156


1779:src/display.c **** 	}
 4251              		.loc 1 1779 24 is_stmt 0 view .LVU1294
 4252 005c 064B     		ldr	r3, .L409
 4253 005e 1B68     		ldr	r3, [r3]
 4254 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1779:src/display.c **** 	}
 4255              		.loc 1 1779 33 view .LVU1295
 4256 0064 13F0100F 		tst	r3, #16
 4257 0068 14BF     		ite	ne
 4258 006a 0320     		movne	r0, #3
 4259 006c 0220     		moveq	r0, #2
 4260              	.LBE350:
 4261              	.LBE349:
1784:src/display.c **** #else
 4262              		.loc 1 1784 7 view .LVU1296
 4263 006e 0AB0     		add	sp, sp, #40
 4264              		.cfi_remember_state
 4265              		.cfi_def_cfa_offset 16
 4266              		@ sp needed
 4267 0070 70BD     		pop	{r4, r5, r6, pc}
 4268              	.LVL477:
 4269              	.L404:
 4270              		.cfi_restore_state
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4271              		.loc 1 1753 16 view .LVU1297
 4272 0072 0022     		movs	r2, #0
 4273 0074 E8E7     		b	.L399
 4274              	.L410:
 4275 0076 00BF     		.align	2
 4276              	.L409:
 4277 0078 00000000 		.word	main_ram
 4278              		.cfi_endproc
 4279              	.LFE24:
 4281              		.section	.text.pixel_length,"ax",%progbits
 4282              		.align	1
 4283              		.p2align 2,,3
 4284              		.global	pixel_length
 4285              		.syntax unified
 4286              		.thumb
 4287              		.thumb_func
 4288              		.fpu fpv4-sp-d16
 4290              	pixel_length:
 4291              	.LVL478:
 4292              	.LFB39:
3467:src/display.c **** 
3468:src/display.c **** 
3469:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3470:src/display.c ****        */
3471:src/display.c ****       int pixel_length(const char *s, int smallp)
3472:src/display.c ****       {
 4293              		.loc 1 3472 7 is_stmt 1 view -0
 4294              		.cfi_startproc
 4295              		@ args = 0, pretend = 0, frame = 0
 4296              		@ frame_needed = 0, uses_anonymous_args = 0
3473:src/display.c **** 	int len = 0;
 4297              		.loc 1 3473 2 view .LVU1299
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
ARM GAS  /tmp/ccPzxiH4.s 			page 157


 4298              		.loc 1 3474 2 view .LVU1300
3472:src/display.c **** 	int len = 0;
 4299              		.loc 1 3472 7 is_stmt 0 view .LVU1301
 4300 0000 70B5     		push	{r4, r5, r6, lr}
 4301              		.cfi_def_cfa_offset 16
 4302              		.cfi_offset 4, -16
 4303              		.cfi_offset 5, -12
 4304              		.cfi_offset 6, -8
 4305              		.cfi_offset 14, -4
3472:src/display.c **** 	int len = 0;
 4306              		.loc 1 3472 7 view .LVU1302
 4307 0002 0446     		mov	r4, r0
3475:src/display.c **** 	while (*s != '\0') {
 4308              		.loc 1 3475 9 view .LVU1303
 4309 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4310              	.LVL479:
3474:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4311              		.loc 1 3474 34 view .LVU1304
 4312 0006 0E1E     		subs	r6, r1, #0
 4313 0008 18BF     		it	ne
 4314 000a 4FF48076 		movne	r6, #256
 4315              	.LVL480:
 4316              		.loc 1 3475 2 is_stmt 1 view .LVU1305
 4317              		.loc 1 3475 8 view .LVU1306
 4318 000e A0B1     		cbz	r0, .L418
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4319              		.loc 1 3473 6 is_stmt 0 view .LVU1307
 4320 0010 0025     		movs	r5, #0
 4321 0012 06E0     		b	.L416
 4322              	.LVL481:
 4323              	.L414:
3476:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3477:src/display.c **** 	  if (s[0] == '\007') {
3478:src/display.c **** 	    len += s[1] & 0x1F;
3479:src/display.c **** 	    s += 3;
3480:src/display.c **** 	    continue;
3481:src/display.c **** 	  }
3482:src/display.c **** #endif
3483:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4324              		.loc 1 3483 11 view .LVU1308
 4325 0014 3044     		add	r0, r0, r6
 4326 0016 FFF7FEFF 		bl	charlengths
 4327              	.LVL482:
 4328              		.loc 1 3483 42 view .LVU1309
 4329 001a 0134     		adds	r4, r4, #1
 4330              	.LVL483:
 4331              		.loc 1 3483 8 view .LVU1310
 4332 001c 0544     		add	r5, r5, r0
 4333              	.LVL484:
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4334              		.loc 1 3475 8 is_stmt 1 view .LVU1311
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4335              		.loc 1 3475 9 is_stmt 0 view .LVU1312
 4336 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4337              		.loc 1 3475 8 view .LVU1313
 4338 0020 48B1     		cbz	r0, .L411
ARM GAS  /tmp/ccPzxiH4.s 			page 158


 4339              	.LVL485:
 4340              	.L416:
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4341              		.loc 1 3477 4 is_stmt 1 view .LVU1314
 4342              		.loc 1 3483 4 view .LVU1315
3477:src/display.c **** 	    len += s[1] & 0x1F;
 4343              		.loc 1 3477 7 is_stmt 0 view .LVU1316
 4344 0022 0728     		cmp	r0, #7
 4345 0024 F6D1     		bne	.L414
3478:src/display.c **** 	    s += 3;
 4346              		.loc 1 3478 6 is_stmt 1 view .LVU1317
3478:src/display.c **** 	    s += 3;
 4347              		.loc 1 3478 18 is_stmt 0 view .LVU1318
 4348 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4349              		.loc 1 3475 9 view .LVU1319
 4350 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3478:src/display.c **** 	    s += 3;
 4351              		.loc 1 3478 18 view .LVU1320
 4352 002a 03F01F03 		and	r3, r3, #31
3479:src/display.c **** 	    continue;
 4353              		.loc 1 3479 8 view .LVU1321
 4354 002e 0334     		adds	r4, r4, #3
 4355              	.LVL486:
3478:src/display.c **** 	    s += 3;
 4356              		.loc 1 3478 10 view .LVU1322
 4357 0030 1D44     		add	r5, r5, r3
 4358              	.LVL487:
3479:src/display.c **** 	    continue;
 4359              		.loc 1 3479 6 is_stmt 1 view .LVU1323
3480:src/display.c **** 	  }
 4360              		.loc 1 3480 6 view .LVU1324
3475:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4361              		.loc 1 3475 8 view .LVU1325
 4362 0032 0028     		cmp	r0, #0
 4363 0034 F5D1     		bne	.L416
 4364              	.L411:
3484:src/display.c **** 	}
3485:src/display.c **** 	return len;
3486:src/display.c ****       }
 4365              		.loc 1 3486 7 is_stmt 0 view .LVU1326
 4366 0036 2846     		mov	r0, r5
 4367 0038 70BD     		pop	{r4, r5, r6, pc}
 4368              	.LVL488:
 4369              	.L418:
3473:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4370              		.loc 1 3473 6 view .LVU1327
 4371 003a 0546     		mov	r5, r0
3485:src/display.c ****       }
 4372              		.loc 1 3485 2 is_stmt 1 view .LVU1328
 4373              		.loc 1 3486 7 is_stmt 0 view .LVU1329
 4374 003c 2846     		mov	r0, r5
 4375 003e 70BD     		pop	{r4, r5, r6, pc}
 4376              		.loc 1 3486 7 view .LVU1330
 4377              		.cfi_endproc
 4378              	.LFE39:
 4380              		.section	.text.set_status,"ax",%progbits
ARM GAS  /tmp/ccPzxiH4.s 			page 159


 4381              		.align	1
 4382              		.p2align 2,,3
 4383              		.syntax unified
 4384              		.thumb
 4385              		.thumb_func
 4386              		.fpu fpv4-sp-d16
 4388              	set_status:
 4389              	.LVL489:
 4390              	.LFB42:
3487:src/display.c **** 
3488:src/display.c **** 
3489:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3490:src/display.c ****        * If this is larger than the display, return true.
3491:src/display.c ****        */
3492:src/display.c ****       static int string_too_large(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3494:src/display.c ****       }
3495:src/display.c ****       static int string_too_large_top(const char *s) {
3496:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3497:src/display.c ****       }
3498:src/display.c **** 
3499:src/display.c **** 
3500:src/display.c ****       /* Display the given string on the screen.
3501:src/display.c ****        */
3502:src/display.c ****       static void set_status(const char *str) {
 4391              		.loc 1 3502 47 is_stmt 1 view -0
 4392              		.cfi_startproc
 4393              		@ args = 0, pretend = 0, frame = 0
 4394              		@ frame_needed = 0, uses_anonymous_args = 0
3503:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4395              		.loc 1 3503 2 view .LVU1332
 4396              		.loc 1 3503 24 is_stmt 0 view .LVU1333
 4397 0000 0C4B     		ldr	r3, .L426
 4398              		.loc 1 3503 2 view .LVU1334
 4399 0002 93F91630 		ldrsb	r3, [r3, #22]
 4400 0006 002B     		cmp	r3, #0
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4401              		.loc 1 3502 47 view .LVU1335
 4402 0008 10B5     		push	{r4, lr}
 4403              		.cfi_def_cfa_offset 8
 4404              		.cfi_offset 4, -8
 4405              		.cfi_offset 14, -4
3502:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4406              		.loc 1 3502 47 view .LVU1336
 4407 000a 0446     		mov	r4, r0
 4408              		.loc 1 3503 2 view .LVU1337
 4409 000c 05DA     		bge	.L425
 4410              	.LBB351:
 4411              	.LBB352:
3361:src/display.c ****       }
 4412              		.loc 1 3361 2 view .LVU1338
 4413 000e 2046     		mov	r0, r4
3361:src/display.c ****       }
 4414              		.loc 1 3361 2 view .LVU1339
 4415              	.LBE352:
 4416              	.LBE351:
 4417              		.loc 1 3503 2 view .LVU1340
ARM GAS  /tmp/ccPzxiH4.s 			page 160


 4418 0010 0121     		movs	r1, #1
 4419              	.LVL490:
 4420              	.LBB358:
 4421              	.LBI351:
3360:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4422              		.loc 1 3360 19 is_stmt 1 view .LVU1341
 4423              	.LBB353:
3361:src/display.c ****       }
 4424              		.loc 1 3361 2 view .LVU1342
 4425              	.LBE353:
 4426              	.LBE358:
3504:src/display.c ****       }
 4427              		.loc 1 3504 7 is_stmt 0 view .LVU1343
 4428 0012 BDE81040 		pop	{r4, lr}
 4429              		.cfi_remember_state
 4430              		.cfi_restore 14
 4431              		.cfi_restore 4
 4432              		.cfi_def_cfa_offset 0
 4433              	.LBB359:
 4434              	.LBB354:
3361:src/display.c ****       }
 4435              		.loc 1 3361 2 view .LVU1344
 4436 0016 FFF7FEBF 		b	s_s_sized.constprop.0
 4437              	.LVL491:
 4438              	.L425:
 4439              		.cfi_restore_state
3361:src/display.c ****       }
 4440              		.loc 1 3361 2 view .LVU1345
 4441              	.LBE354:
 4442              	.LBE359:
 4443              	.LBB360:
 4444              	.LBI360:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4445              		.loc 1 3492 18 is_stmt 1 view .LVU1346
 4446              	.LBB361:
3493:src/display.c ****       }
 4447              		.loc 1 3493 2 view .LVU1347
3493:src/display.c ****       }
 4448              		.loc 1 3493 9 is_stmt 0 view .LVU1348
 4449 001a 0021     		movs	r1, #0
 4450 001c FFF7FEFF 		bl	pixel_length
 4451              	.LVL492:
3493:src/display.c ****       }
 4452              		.loc 1 3493 9 view .LVU1349
 4453              	.LBE361:
 4454              	.LBE360:
3503:src/display.c ****       }
 4455              		.loc 1 3503 2 view .LVU1350
 4456 0020 2C28     		cmp	r0, #44
 4457 0022 D8BF     		it	le
 4458 0024 0021     		movle	r1, #0
 4459              	.LBB362:
 4460              	.LBB355:
3361:src/display.c ****       }
 4461              		.loc 1 3361 2 view .LVU1351
 4462 0026 2046     		mov	r0, r4
 4463              	.LBE355:
ARM GAS  /tmp/ccPzxiH4.s 			page 161


 4464              	.LBE362:
3503:src/display.c ****       }
 4465              		.loc 1 3503 2 view .LVU1352
 4466 0028 C8BF     		it	gt
 4467 002a 0121     		movgt	r1, #1
 4468              	.LVL493:
 4469              	.LBB363:
3360:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4470              		.loc 1 3360 19 is_stmt 1 view .LVU1353
 4471              	.LBB356:
3361:src/display.c ****       }
 4472              		.loc 1 3361 2 view .LVU1354
 4473              	.LBE356:
 4474              	.LBE363:
 4475              		.loc 1 3504 7 is_stmt 0 view .LVU1355
 4476 002c BDE81040 		pop	{r4, lr}
 4477              		.cfi_restore 14
 4478              		.cfi_restore 4
 4479              		.cfi_def_cfa_offset 0
 4480              	.LVL494:
 4481              	.LBB364:
 4482              	.LBB357:
3361:src/display.c ****       }
 4483              		.loc 1 3361 2 view .LVU1356
 4484 0030 FFF7FEBF 		b	s_s_sized.constprop.0
 4485              	.LVL495:
 4486              	.L427:
3361:src/display.c ****       }
 4487              		.loc 1 3361 2 view .LVU1357
 4488              		.align	2
 4489              	.L426:
 4490 0034 00000000 		.word	StateWhileOn
 4491              	.LBE357:
 4492              	.LBE364:
 4493              		.cfi_endproc
 4494              	.LFE42:
 4496              		.section	.text.set_x_dn,"ax",%progbits
 4497              		.align	1
 4498              		.p2align 2,,3
 4499              		.global	set_x_dn
 4500              		.syntax unified
 4501              		.thumb
 4502              		.thumb_func
 4503              		.fpu fpv4-sp-d16
 4505              	set_x_dn:
 4506              	.LVL496:
 4507              	.LFB27:
1933:src/display.c **** 	char x[50], *obp = x;
 4508              		.loc 1 1933 67 is_stmt 1 view -0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 152
 4511              		@ frame_needed = 0, uses_anonymous_args = 0
1934:src/display.c **** 	int odig = 0;
 4512              		.loc 1 1934 2 view .LVU1359
1933:src/display.c **** 	char x[50], *obp = x;
 4513              		.loc 1 1933 67 is_stmt 0 view .LVU1360
 4514 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/ccPzxiH4.s 			page 162


 4515              		.cfi_def_cfa_offset 36
 4516              		.cfi_offset 4, -36
 4517              		.cfi_offset 5, -32
 4518              		.cfi_offset 6, -28
 4519              		.cfi_offset 7, -24
 4520              		.cfi_offset 8, -20
 4521              		.cfi_offset 9, -16
 4522              		.cfi_offset 10, -12
 4523              		.cfi_offset 11, -8
 4524              		.cfi_offset 14, -4
 4525 0004 A7B0     		sub	sp, sp, #156
 4526              		.cfi_def_cfa_offset 192
 4527              	.LVL497:
1935:src/display.c **** 	int show_exp = 0;
 4528              		.loc 1 1935 2 is_stmt 1 view .LVU1361
1936:src/display.c **** 	int j;
 4529              		.loc 1 1936 2 view .LVU1362
1937:src/display.c **** 	char mantissa[64];
 4530              		.loc 1 1937 2 view .LVU1363
1938:src/display.c **** 	int exp = 0;
 4531              		.loc 1 1938 2 view .LVU1364
1939:src/display.c **** 	char *p = mantissa;
 4532              		.loc 1 1939 2 view .LVU1365
1940:src/display.c **** 	char *r;
 4533              		.loc 1 1940 2 view .LVU1366
1941:src/display.c **** 	const char *q;
 4534              		.loc 1 1941 2 view .LVU1367
1942:src/display.c **** 	int count, i;
 4535              		.loc 1 1942 2 view .LVU1368
1943:src/display.c **** 	int extra_digits = 0;
 4536              		.loc 1 1943 2 view .LVU1369
1944:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4537              		.loc 1 1944 2 view .LVU1370
1946:src/display.c **** 	int dispdigs;
 4538              		.loc 1 1946 2 view .LVU1371
1947:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4539              		.loc 1 1947 2 view .LVU1372
1948:src/display.c **** #else
 4540              		.loc 1 1948 2 view .LVU1373
1933:src/display.c **** 	char x[50], *obp = x;
 4541              		.loc 1 1933 67 is_stmt 0 view .LVU1374
 4542 0006 8246     		mov	r10, r0
1948:src/display.c **** #else
 4543              		.loc 1 1948 13 view .LVU1375
 4544 0008 08A8     		add	r0, sp, #32
 4545              	.LVL498:
1933:src/display.c **** 	char x[50], *obp = x;
 4546              		.loc 1 1933 67 view .LVU1376
 4547 000a 0C46     		mov	r4, r1
 4548 000c 0192     		str	r2, [sp, #4]
1948:src/display.c **** #else
 4549              		.loc 1 1948 13 view .LVU1377
 4550 000e FFF7FEFF 		bl	get_dispmode_digs
 4551              	.LVL499:
1948:src/display.c **** #else
 4552              		.loc 1 1948 13 view .LVU1378
 4553 0012 0546     		mov	r5, r0
ARM GAS  /tmp/ccPzxiH4.s 			page 163


 4554              	.LVL500:
1953:src/display.c **** 	int negative = 0;
 4555              		.loc 1 1953 2 is_stmt 1 view .LVU1379
1954:src/display.c **** 	int trimzeros = 0;
 4556              		.loc 1 1954 2 view .LVU1380
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4557              		.loc 1 1955 2 view .LVU1381
1963:src/display.c **** #endif
 4558              		.loc 1 1963 2 view .LVU1382
1966:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4559              		.loc 1 1966 2 view .LVU1383
 4560 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4561              	.LVL501:
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4562              		.loc 1 1968 2 view .LVU1384
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4563              		.loc 1 1968 5 is_stmt 0 view .LVU1385
 4564 0018 002C     		cmp	r4, #0
 4565 001a 00F08781 		beq	.L429
 4566              	.L432:
1993:src/display.c **** 	  return;
 4567              		.loc 1 1993 2 is_stmt 1 view .LVU1386
1993:src/display.c **** 	  return;
 4568              		.loc 1 1993 6 is_stmt 0 view .LVU1387
 4569 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4570 0022 2146     		mov	r1, r4
 4571 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4572              	.LVL502:
1993:src/display.c **** 	  return;
 4573              		.loc 1 1993 5 view .LVU1388
 4574 0028 8146     		mov	r9, r0
 4575 002a 0028     		cmp	r0, #0
 4576 002c 40F07681 		bne	.L428
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4577              		.loc 1 1996 2 is_stmt 1 view .LVU1389
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4578              		.loc 1 1996 12 is_stmt 0 view .LVU1390
 4579 0030 CC4E     		ldr	r6, .L680
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4580              		.loc 1 1996 5 view .LVU1391
 4581 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4582 0034 012B     		cmp	r3, #1
 4583 0036 00F0FB82 		beq	.L657
1939:src/display.c **** 	char *p = mantissa;
 4584              		.loc 1 1939 6 view .LVU1392
 4585 003a 8046     		mov	r8, r0
 4586              	.LVL503:
 4587              	.L435:
2002:src/display.c **** 
 4588              		.loc 1 2002 2 is_stmt 1 view .LVU1393
 4589 003c 09AF     		add	r7, sp, #36
 4590              	.LVL504:
2002:src/display.c **** 
 4591              		.loc 1 2002 2 is_stmt 0 view .LVU1394
 4592 003e 3846     		mov	r0, r7
 4593 0040 3222     		movs	r2, #50
 4594 0042 0021     		movs	r1, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 164


 4595 0044 FFF7FEFF 		bl	xset
 4596              	.LVL505:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4597              		.loc 1 2004 2 is_stmt 1 view .LVU1395
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4598              		.loc 1 2004 6 is_stmt 0 view .LVU1396
 4599 0048 5046     		mov	r0, r10
 4600 004a FFF7FEFF 		bl	dn_eq0
 4601              	.LVL506:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4602              		.loc 1 2004 5 view .LVU1397
 4603 004e 0028     		cmp	r0, #0
 4604 0050 00F06781 		beq	.L436
2005:src/display.c **** 	    x[0] = '-';
 4605              		.loc 1 2005 4 is_stmt 1 view .LVU1398
2005:src/display.c **** 	    x[0] = '-';
 4606              		.loc 1 2005 7 is_stmt 0 view .LVU1399
 4607 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4608 0058 002B     		cmp	r3, #0
 4609 005a C0F21083 		blt	.L658
 4610              	.L437:
2009:src/display.c **** 	} else
 4611              		.loc 1 2009 6 is_stmt 1 view .LVU1400
2009:src/display.c **** 	} else
 4612              		.loc 1 2009 11 is_stmt 0 view .LVU1401
 4613 005e 3023     		movs	r3, #48
 4614 0060 8DF82430 		strb	r3, [sp, #36]
 4615              	.L438:
2013:src/display.c **** 	  show_x(x, exp);
 4616              		.loc 1 2013 2 is_stmt 1 view .LVU1402
2013:src/display.c **** 	  show_x(x, exp);
 4617              		.loc 1 2013 12 is_stmt 0 view .LVU1403
 4618 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2013:src/display.c **** 	  show_x(x, exp);
 4619              		.loc 1 2013 5 view .LVU1404
 4620 0068 BBF1010F 		cmp	fp, #1
 4621 006c 00F04883 		beq	.L659
2019:src/display.c **** 	  //  ALL mode: fill the display
 4622              		.loc 1 2019 2 is_stmt 1 view .LVU1405
2019:src/display.c **** 	  //  ALL mode: fill the display
 4623              		.loc 1 2019 5 is_stmt 0 view .LVU1406
 4624 0070 002D     		cmp	r5, #0
 4625 0072 40F08181 		bne	.L660
2021:src/display.c **** 	else
 4626              		.loc 1 2021 4 is_stmt 1 view .LVU1407
2021:src/display.c **** 	else
 4627              		.loc 1 2021 25 is_stmt 0 view .LVU1408
 4628 0076 019E     		ldr	r6, [sp, #4]
 4629              	.LBB386:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4630              		.loc 1 2028 11 view .LVU1409
 4631 0078 089B     		ldr	r3, [sp, #32]
 4632              	.LBE386:
2021:src/display.c **** 	else
 4633              		.loc 1 2021 25 view .LVU1410
 4634 007a 3168     		ldr	r1, [r6]
 4635              	.LBB387:
ARM GAS  /tmp/ccPzxiH4.s 			page 165


2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4636              		.loc 1 2028 11 view .LVU1411
 4637 007c 2A46     		mov	r2, r5
 4638 007e 5046     		mov	r0, r10
 4639              	.LBE387:
2021:src/display.c **** 	else
 4640              		.loc 1 2021 25 view .LVU1412
 4641 0080 4D1E     		subs	r5, r1, #1
 4642              	.LVL507:
 4643              	.LBB388:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4644              		.loc 1 2028 11 view .LVU1413
 4645 0082 07A9     		add	r1, sp, #28
 4646              	.LBE388:
2021:src/display.c **** 	else
 4647              		.loc 1 2021 7 view .LVU1414
 4648 0084 0795     		str	r5, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 4649              		.loc 1 2025 2 is_stmt 1 view .LVU1415
 4650              	.LBB389:
2026:src/display.c **** 
 4651              		.loc 1 2026 4 view .LVU1416
 4652              	.LVL508:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4653              		.loc 1 2028 4 view .LVU1417
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4654              		.loc 1 2028 11 is_stmt 0 view .LVU1418
 4655 0086 FFF7FEFF 		bl	std_round_fix
 4656              	.LVL509:
2033:src/display.c ****  	}
 4657              		.loc 1 2033 27 view .LVU1419
 4658 008a 3368     		ldr	r3, [r6]
 4659 008c 013B     		subs	r3, r3, #1
2033:src/display.c ****  	}
 4660              		.loc 1 2033 9 view .LVU1420
 4661 008e 0793     		str	r3, [sp, #28]
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4662              		.loc 1 2031 16 view .LVU1421
 4663 0090 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4664              		.loc 1 2028 11 view .LVU1422
 4665 0092 0546     		mov	r5, r0
 4666              	.LVL510:
2029:src/display.c **** 	    // allow zeros to be trimmed
 4667              		.loc 1 2029 4 is_stmt 1 view .LVU1423
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4668              		.loc 1 2031 6 view .LVU1424
2032:src/display.c **** 	    dd = *display_digits - 1;
 4669              		.loc 1 2032 4 view .LVU1425
2033:src/display.c ****  	}
 4670              		.loc 1 2033 6 view .LVU1426
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4671              		.loc 1 2031 16 is_stmt 0 view .LVU1427
 4672 0094 0493     		str	r3, [sp, #16]
 4673              	.LVL511:
 4674              	.L559:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
ARM GAS  /tmp/ccPzxiH4.s 			page 166


 4675              		.loc 1 2031 16 view .LVU1428
 4676              	.LBE389:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4677              		.loc 1 2045 2 is_stmt 1 view .LVU1429
 4678 0096 0DF1580B 		add	fp, sp, #88
 4679              	.LVL512:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4680              		.loc 1 2045 2 is_stmt 0 view .LVU1430
 4681 009a 3F22     		movs	r2, #63
 4682 009c 3021     		movs	r1, #48
 4683 009e 5846     		mov	r0, fp
 4684 00a0 FFF7FEFF 		bl	xset
 4685              	.LVL513:
2046:src/display.c **** 
 4686              		.loc 1 2046 2 is_stmt 1 view .LVU1431
2046:src/display.c **** 
 4687              		.loc 1 2046 31 is_stmt 0 view .LVU1432
 4688 00a4 0023     		movs	r3, #0
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4689              		.loc 1 2048 6 view .LVU1433
 4690 00a6 4521     		movs	r1, #69
 4691 00a8 3846     		mov	r0, r7
2046:src/display.c **** 
 4692              		.loc 1 2046 31 view .LVU1434
 4693 00aa 8DF89730 		strb	r3, [sp, #151]
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4694              		.loc 1 2048 2 is_stmt 1 view .LVU1435
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4695              		.loc 1 2048 6 is_stmt 0 view .LVU1436
 4696 00ae FFF7FEFF 		bl	find_char
 4697              	.LVL514:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4698              		.loc 1 2050 2 is_stmt 1 view .LVU1437
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4699              		.loc 1 2050 5 is_stmt 0 view .LVU1438
 4700 00b2 0646     		mov	r6, r0
 4701 00b4 0028     		cmp	r0, #0
 4702 00b6 00F06D81 		beq	.L661
 4703              	.L454:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4704              		.loc 1 2053 4 is_stmt 1 view .LVU1439
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4705              		.loc 1 2053 10 is_stmt 0 view .LVU1440
 4706 00ba 701C     		adds	r0, r6, #1
 4707              	.LVL515:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4708              		.loc 1 2053 10 view .LVU1441
 4709 00bc FFF7FEFF 		bl	s_to_i
 4710              	.LVL516:
2054:src/display.c **** 	}
 4711              		.loc 1 2054 7 view .LVU1442
 4712 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4713 00c2 442B     		cmp	r3, #68
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4714              		.loc 1 2053 10 view .LVU1443
 4715 00c4 0646     		mov	r6, r0
 4716              	.LVL517:
ARM GAS  /tmp/ccPzxiH4.s 			page 167


2054:src/display.c **** 	}
 4717              		.loc 1 2054 4 is_stmt 1 view .LVU1444
2054:src/display.c **** 	}
 4718              		.loc 1 2054 19 view .LVU1445
2054:src/display.c **** 	}
 4719              		.loc 1 2054 23 is_stmt 0 view .LVU1446
 4720 00c6 08BF     		it	eq
 4721 00c8 4642     		rsbeq	r6, r0, #0
 4722              	.LVL518:
 4723              	.L455:
2062:src/display.c **** 	if (!res) {
 4724              		.loc 1 2062 2 is_stmt 1 view .LVU1447
2062:src/display.c **** 	if (!res) {
 4725              		.loc 1 2062 12 view .LVU1448
2062:src/display.c **** 	if (!res) {
 4726              		.loc 1 2062 2 is_stmt 0 view .LVU1449
 4727 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4728 00ce 202B     		cmp	r3, #32
2062:src/display.c **** 	if (!res) {
 4729              		.loc 1 2062 8 view .LVU1450
 4730 00d0 B846     		mov	r8, r7
2062:src/display.c **** 	if (!res) {
 4731              		.loc 1 2062 2 view .LVU1451
 4732 00d2 03D1     		bne	.L456
 4733              	.LVL519:
 4734              	.L457:
2062:src/display.c **** 	if (!res) {
 4735              		.loc 1 2062 27 is_stmt 1 discriminator 3 view .LVU1452
2062:src/display.c **** 	if (!res) {
 4736              		.loc 1 2062 23 discriminator 3 view .LVU1453
2062:src/display.c **** 	if (!res) {
 4737              		.loc 1 2062 12 discriminator 3 view .LVU1454
2062:src/display.c **** 	if (!res) {
 4738              		.loc 1 2062 2 is_stmt 0 discriminator 3 view .LVU1455
 4739 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4740              	.LVL520:
2062:src/display.c **** 	if (!res) {
 4741              		.loc 1 2062 2 discriminator 3 view .LVU1456
 4742 00d8 202B     		cmp	r3, #32
 4743 00da FBD0     		beq	.L457
 4744              	.LVL521:
 4745              	.L456:
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4746              		.loc 1 2063 2 is_stmt 1 view .LVU1457
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4747              		.loc 1 2063 5 is_stmt 0 view .LVU1458
 4748 00dc 002C     		cmp	r4, #0
 4749 00de 00F0D982 		beq	.L662
 4750              	.L458:
2067:src/display.c **** 	  negative = 1;
 4751              		.loc 1 2067 2 is_stmt 1 view .LVU1459
2067:src/display.c **** 	  negative = 1;
 4752              		.loc 1 2067 6 is_stmt 0 view .LVU1460
 4753 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2067:src/display.c **** 	  negative = 1;
 4754              		.loc 1 2067 5 view .LVU1461
 4755 00e6 2D2B     		cmp	r3, #45
ARM GAS  /tmp/ccPzxiH4.s 			page 168


 4756 00e8 00F0E481 		beq	.L663
2070:src/display.c **** 	  q++;
 4757              		.loc 1 2070 9 is_stmt 1 view .LVU1462
2070:src/display.c **** 	  q++;
 4758              		.loc 1 2070 12 is_stmt 0 view .LVU1463
 4759 00ec 2B2B     		cmp	r3, #43
 4760 00ee 00F0BF82 		beq	.L664
1954:src/display.c **** 	int trimzeros = 0;
 4761              		.loc 1 1954 6 view .LVU1464
 4762 00f2 0022     		movs	r2, #0
 4763 00f4 0392     		str	r2, [sp, #12]
 4764              	.LVL522:
 4765              	.L460:
2072:src/display.c **** 	if (*q == '.') {
 4766              		.loc 1 2072 9 is_stmt 1 discriminator 1 view .LVU1465
2072:src/display.c **** 	if (*q == '.') {
 4767              		.loc 1 2072 2 is_stmt 0 discriminator 1 view .LVU1466
 4768 00f6 302B     		cmp	r3, #48
 4769 00f8 03D1     		bne	.L462
 4770              	.LVL523:
 4771              	.L461:
2072:src/display.c **** 	if (*q == '.') {
 4772              		.loc 1 2072 24 is_stmt 1 discriminator 2 view .LVU1467
2072:src/display.c **** 	if (*q == '.') {
 4773              		.loc 1 2072 20 discriminator 2 view .LVU1468
2072:src/display.c **** 	if (*q == '.') {
 4774              		.loc 1 2072 9 discriminator 2 view .LVU1469
 4775 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4776              	.LVL524:
2072:src/display.c **** 	if (*q == '.') {
 4777              		.loc 1 2072 2 is_stmt 0 discriminator 2 view .LVU1470
 4778 00fe 302B     		cmp	r3, #48
 4779 0100 FBD0     		beq	.L461
 4780              	.LVL525:
 4781              	.L462:
2073:src/display.c **** 	  do
 4782              		.loc 1 2073 2 is_stmt 1 view .LVU1471
2073:src/display.c **** 	  do
 4783              		.loc 1 2073 5 is_stmt 0 view .LVU1472
 4784 0102 2E2B     		cmp	r3, #46
 4785 0104 00F0BE81 		beq	.L665
2080:src/display.c **** 	    *p++ = *q++;
 4786              		.loc 1 2080 4 is_stmt 1 view .LVU1473
2080:src/display.c **** 	    *p++ = *q++;
 4787              		.loc 1 2080 7 is_stmt 0 view .LVU1474
 4788 0108 A3F13002 		sub	r2, r3, #48
 4789 010c 092A     		cmp	r2, #9
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4790              		.loc 1 2081 6 is_stmt 1 view .LVU1475
 4791              	.LVL526:
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4792              		.loc 1 2081 15 is_stmt 0 view .LVU1476
 4793 010e 9CBF     		itt	ls
 4794 0110 08F10108 		addls	r8, r8, #1
 4795              	.LVL527:
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4796              		.loc 1 2081 11 view .LVU1477
ARM GAS  /tmp/ccPzxiH4.s 			page 169


 4797 0114 8DF85830 		strbls	r3, [sp, #88]
2082:src/display.c **** 	    *p++ = *q++;
 4798              		.loc 1 2082 11 view .LVU1478
 4799 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2082:src/display.c **** 	    *p++ = *q++;
 4800              		.loc 1 2082 10 view .LVU1479
 4801 011c A2F13003 		sub	r3, r2, #48
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4802              		.loc 1 2081 8 view .LVU1480
 4803 0120 94BF     		ite	ls
 4804 0122 0DF15901 		addls	r1, sp, #89
1940:src/display.c **** 	char *r;
 4805              		.loc 1 1940 8 view .LVU1481
 4806 0126 5946     		movhi	r1, fp
 4807              	.LVL528:
2082:src/display.c **** 	    *p++ = *q++;
 4808              		.loc 1 2082 10 is_stmt 1 view .LVU1482
 4809 0128 092B     		cmp	r3, #9
 4810 012a 0ED8     		bhi	.L468
 4811 012c A6EB0800 		sub	r0, r6, r8
 4812 0130 08F10103 		add	r3, r8, #1
 4813              	.L469:
 4814              	.LVL529:
2083:src/display.c **** 	    exp++;
 4815              		.loc 1 2083 6 view .LVU1483
2083:src/display.c **** 	    exp++;
 4816              		.loc 1 2083 11 is_stmt 0 view .LVU1484
 4817 0134 01F8012B 		strb	r2, [r1], #1
 4818              	.LVL530:
2083:src/display.c **** 	    exp++;
 4819              		.loc 1 2083 15 view .LVU1485
 4820 0138 9846     		mov	r8, r3
 4821              	.LVL531:
2084:src/display.c **** 	  }
 4822              		.loc 1 2084 6 is_stmt 1 view .LVU1486
 4823 013a C618     		adds	r6, r0, r3
 4824              	.LVL532:
2082:src/display.c **** 	    *p++ = *q++;
 4825              		.loc 1 2082 10 view .LVU1487
2082:src/display.c **** 	    *p++ = *q++;
 4826              		.loc 1 2082 11 is_stmt 0 view .LVU1488
 4827 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4828              	.LVL533:
2082:src/display.c **** 	    *p++ = *q++;
 4829              		.loc 1 2082 10 view .LVU1489
 4830 0140 A2F1300C 		sub	ip, r2, #48
 4831 0144 BCF1090F 		cmp	ip, #9
 4832 0148 F4D9     		bls	.L469
 4833              	.LVL534:
 4834              	.L468:
2086:src/display.c **** 	    q++;
 4835              		.loc 1 2086 4 is_stmt 1 view .LVU1490
2086:src/display.c **** 	    q++;
 4836              		.loc 1 2086 7 is_stmt 0 view .LVU1491
 4837 014a 2E2A     		cmp	r2, #46
 4838 014c 00F07E82 		beq	.L666
 4839              	.LVL535:
ARM GAS  /tmp/ccPzxiH4.s 			page 170


 4840              	.L465:
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4841              		.loc 1 2093 2 is_stmt 1 view .LVU1492
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4842              		.loc 1 2094 12 is_stmt 0 view .LVU1493
 4843 0150 019B     		ldr	r3, [sp, #4]
 4844 0152 079A     		ldr	r2, [sp, #28]
 4845 0154 1B68     		ldr	r3, [r3]
 4846 0156 0293     		str	r3, [sp, #8]
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4847              		.loc 1 2093 5 view .LVU1494
 4848 0158 012D     		cmp	r5, #1
 4849 015a 00F08381 		beq	.L471
 4850              	.LVL536:
 4851              	.L656:
2095:src/display.c **** 	  else {
 4852              		.loc 1 2095 35 view .LVU1495
 4853 015e 0021     		movs	r1, #0
 4854              	.LVL537:
 4855              	.L472:
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4856              		.loc 1 2107 2 is_stmt 1 view .LVU1496
 4857 0160 02F1010E 		add	lr, r2, #1
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4858              		.loc 1 2107 35 is_stmt 0 view .LVU1497
 4859 0164 7144     		add	r1, r1, lr
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4860              		.loc 1 2107 4 view .LVU1498
 4861 0166 0BEB0103 		add	r3, fp, r1
 4862              	.LVL538:
2108:src/display.c **** 	  *p = '0';
 4863              		.loc 1 2108 2 is_stmt 1 view .LVU1499
2108:src/display.c **** 	  *p = '0';
 4864              		.loc 1 2108 6 is_stmt 0 view .LVU1500
 4865 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2108:src/display.c **** 	  *p = '0';
 4866              		.loc 1 2108 5 view .LVU1501
 4867 016e 3428     		cmp	r0, #52
 4868 0170 26D9     		bls	.L477
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4869              		.loc 1 2109 4 is_stmt 1 view .LVU1502
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4870              		.loc 1 2109 7 is_stmt 0 view .LVU1503
 4871 0172 3020     		movs	r0, #48
 4872 0174 0BF80100 		strb	r0, [fp, r1]
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4873              		.loc 1 2110 4 is_stmt 1 view .LVU1504
 4874              	.LVL539:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4875              		.loc 1 2110 23 view .LVU1505
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4876              		.loc 1 2110 4 is_stmt 0 view .LVU1506
 4877 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 4878 017c 3928     		cmp	r0, #57
 4879 017e 40F0D783 		bne	.L478
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4880              		.loc 1 2110 11 view .LVU1507
ARM GAS  /tmp/ccPzxiH4.s 			page 171


 4881 0182 5846     		mov	r0, fp
 4882              	.LVL540:
 4883              	.L479:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4884              		.loc 1 2110 38 is_stmt 1 discriminator 3 view .LVU1508
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4885              		.loc 1 2110 34 discriminator 3 view .LVU1509
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4886              		.loc 1 2110 23 discriminator 3 view .LVU1510
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4887              		.loc 1 2110 4 is_stmt 0 discriminator 3 view .LVU1511
 4888 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 4889              	.LVL541:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4890              		.loc 1 2110 4 discriminator 3 view .LVU1512
 4891 0188 BCF1390F 		cmp	ip, #57
 4892 018c FAD0     		beq	.L479
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4893              		.loc 1 2111 4 is_stmt 1 view .LVU1513
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4894              		.loc 1 2111 7 is_stmt 0 view .LVU1514
 4895 018e 8342     		cmp	r3, r0
 4896 0190 00F01681 		beq	.L667
 4897              	.LVL542:
 4898              	.L557:
2120:src/display.c **** 	      *p = '0';
 4899              		.loc 1 2120 12 is_stmt 1 view .LVU1515
2120:src/display.c **** 	      *p = '0';
 4900              		.loc 1 2120 13 is_stmt 0 view .LVU1516
 4901 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2120:src/display.c **** 	      *p = '0';
 4902              		.loc 1 2120 12 view .LVU1517
 4903 0198 BCF1390F 		cmp	ip, #57
 4904 019c 03F1FF30 		add	r0, r3, #-1
 4905              	.LVL543:
2120:src/display.c **** 	      *p = '0';
 4906              		.loc 1 2120 12 view .LVU1518
 4907 01a0 08D1     		bne	.L482
2121:src/display.c **** 	    (*p)++;
 4908              		.loc 1 2121 11 view .LVU1519
 4909 01a2 4FF0300E 		mov	lr, #48
 4910              	.L481:
2121:src/display.c **** 	    (*p)++;
 4911              		.loc 1 2121 8 is_stmt 1 view .LVU1520
2121:src/display.c **** 	    (*p)++;
 4912              		.loc 1 2121 11 is_stmt 0 view .LVU1521
 4913 01a6 80F800E0 		strb	lr, [r0]
2120:src/display.c **** 	      *p = '0';
 4914              		.loc 1 2120 12 is_stmt 1 view .LVU1522
 4915              	.LVL544:
2120:src/display.c **** 	      *p = '0';
 4916              		.loc 1 2120 13 is_stmt 0 view .LVU1523
 4917 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 4918              	.LVL545:
2120:src/display.c **** 	      *p = '0';
 4919              		.loc 1 2120 12 view .LVU1524
 4920 01ae BCF1390F 		cmp	ip, #57
ARM GAS  /tmp/ccPzxiH4.s 			page 172


 4921 01b2 F8D0     		beq	.L481
 4922              	.L482:
2122:src/display.c **** 	  }
 4923              		.loc 1 2122 6 is_stmt 1 view .LVU1525
2122:src/display.c **** 	  }
 4924              		.loc 1 2122 10 is_stmt 0 view .LVU1526
 4925 01b4 0CF1010C 		add	ip, ip, #1
 4926 01b8 80F800C0 		strb	ip, [r0]
 4927              	.LVL546:
 4928              	.L655:
2122:src/display.c **** 	  }
 4929              		.loc 1 2122 10 view .LVU1527
 4930 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 4931              	.L477:
2127:src/display.c **** 
 4932              		.loc 1 2127 2 is_stmt 1 view .LVU1528
 4933              	.LVL547:
2127:src/display.c **** 
 4934              		.loc 1 2127 45 view .LVU1529
2127:src/display.c **** 
 4935              		.loc 1 2127 2 is_stmt 0 view .LVU1530
 4936 01c0 28B1     		cbz	r0, .L488
 4937              	.LVL548:
 4938              	.L556:
2127:src/display.c **** 
 4939              		.loc 1 2127 62 view .LVU1531
 4940 01c2 3020     		movs	r0, #48
 4941              	.L489:
2127:src/display.c **** 
 4942              		.loc 1 2127 68 is_stmt 1 discriminator 3 view .LVU1532
2127:src/display.c **** 
 4943              		.loc 1 2127 57 discriminator 3 view .LVU1533
 4944              	.LVL549:
2127:src/display.c **** 
 4945              		.loc 1 2127 62 is_stmt 0 discriminator 3 view .LVU1534
 4946 01c4 03F8010B 		strb	r0, [r3], #1
 4947              	.LVL550:
2127:src/display.c **** 
 4948              		.loc 1 2127 45 is_stmt 1 discriminator 3 view .LVU1535
2127:src/display.c **** 
 4949              		.loc 1 2127 2 is_stmt 0 discriminator 3 view .LVU1536
 4950 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4951 01ca 0029     		cmp	r1, #0
 4952 01cc FAD1     		bne	.L489
 4953              	.L488:
2129:src/display.c **** 	switch (mode) {
 4954              		.loc 1 2129 2 is_stmt 1 view .LVU1537
 4955              	.LVL551:
2130:src/display.c **** 	default:
 4956              		.loc 1 2130 2 view .LVU1538
 4957 01ce 022D     		cmp	r5, #2
 4958 01d0 00F07681 		beq	.L526
 4959 01d4 032D     		cmp	r5, #3
 4960 01d6 00F01881 		beq	.L491
 4961 01da 012D     		cmp	r5, #1
 4962 01dc 00F0F081 		beq	.L492
2133:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/ccPzxiH4.s 			page 173


 4963              		.loc 1 2133 4 view .LVU1539
 4964              	.LVL552:
2133:src/display.c **** 	  if (count != *display_digits)
 4965              		.loc 1 2133 34 view .LVU1540
2133:src/display.c **** 	  if (count != *display_digits)
 4966              		.loc 1 2133 42 is_stmt 0 view .LVU1541
 4967 01e0 0298     		ldr	r0, [sp, #8]
 4968 01e2 26AB     		add	r3, sp, #152
 4969 01e4 0344     		add	r3, r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4970              		.loc 1 2133 4 view .LVU1542
 4971 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 4972 01ea 302B     		cmp	r3, #48
 4973 01ec 40F09883 		bne	.L572
 4974 01f0 411E     		subs	r1, r0, #1
 4975 01f2 5944     		add	r1, r1, fp
 4976              	.LVL553:
 4977              	.L496:
2133:src/display.c **** 	  if (count != *display_digits)
 4978              		.loc 1 2133 66 is_stmt 1 discriminator 3 view .LVU1543
2133:src/display.c **** 	  if (count != *display_digits)
 4979              		.loc 1 2133 58 discriminator 3 view .LVU1544
2133:src/display.c **** 	  if (count != *display_digits)
 4980              		.loc 1 2133 42 is_stmt 0 discriminator 3 view .LVU1545
 4981 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2133:src/display.c **** 	  if (count != *display_digits)
 4982              		.loc 1 2133 4 discriminator 3 view .LVU1546
 4983 01f8 302D     		cmp	r5, #48
 4984 01fa 0346     		mov	r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4985              		.loc 1 2133 63 discriminator 3 view .LVU1547
 4986 01fc 00F1FF30 		add	r0, r0, #-1
 4987              	.LVL554:
2133:src/display.c **** 	  if (count != *display_digits)
 4988              		.loc 1 2133 34 is_stmt 1 discriminator 3 view .LVU1548
2133:src/display.c **** 	  if (count != *display_digits)
 4989              		.loc 1 2133 4 is_stmt 0 discriminator 3 view .LVU1549
 4990 0200 F8D0     		beq	.L496
2134:src/display.c **** 	    count++;
 4991              		.loc 1 2134 4 is_stmt 1 view .LVU1550
2134:src/display.c **** 	    count++;
 4992              		.loc 1 2134 7 is_stmt 0 view .LVU1551
 4993 0202 0299     		ldr	r1, [sp, #8]
 4994 0204 8842     		cmp	r0, r1
 4995 0206 08BF     		it	eq
 4996 0208 0B46     		moveq	r3, r1
 4997              	.LVL555:
 4998              	.L495:
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4999              		.loc 1 2137 4 is_stmt 1 view .LVU1552
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5000              		.loc 1 2137 7 is_stmt 0 view .LVU1553
 5001 020a 0299     		ldr	r1, [sp, #8]
 5002 020c 8E42     		cmp	r6, r1
 5003 020e 80F20E81 		bge	.L497
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5004              		.loc 1 2137 47 discriminator 1 view .LVU1554
ARM GAS  /tmp/ccPzxiH4.s 			page 174


 5005 0212 591A     		subs	r1, r3, r1
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5006              		.loc 1 2137 31 discriminator 1 view .LVU1555
 5007 0214 B142     		cmp	r1, r6
 5008 0216 00F30A81 		bgt	.L497
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5009              		.loc 1 2162 11 is_stmt 1 view .LVU1556
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5010              		.loc 1 2162 14 is_stmt 0 view .LVU1557
 5011 021a 002E     		cmp	r6, #0
 5012 021c C0F29D83 		blt	.L506
 5013 0220 721C     		adds	r2, r6, #1
2164:src/display.c **** 		*obp++ = ',';
 5014              		.loc 1 2164 31 view .LVU1558
 5015 0222 DFF84CE1 		ldr	lr, .L680+12
 5016 0226 0592     		str	r2, [sp, #20]
 5017 0228 0BEB0200 		add	r0, fp, r2
2129:src/display.c **** 	switch (mode) {
 5018              		.loc 1 2129 4 view .LVU1559
 5019 022c DC46     		mov	ip, fp
1934:src/display.c **** 	int odig = 0;
 5020              		.loc 1 1934 15 view .LVU1560
 5021 022e 3946     		mov	r1, r7
 5022 0230 05E0     		b	.L507
 5023              	.LVL556:
 5024              	.L510:
2165:src/display.c **** 	      *obp++ = *p++;
 5025              		.loc 1 2165 3 is_stmt 1 view .LVU1561
2164:src/display.c **** 		*obp++ = ',';
 5026              		.loc 1 2164 18 is_stmt 0 view .LVU1562
 5027 0232 022D     		cmp	r5, #2
2165:src/display.c **** 	      *obp++ = *p++;
 5028              		.loc 1 2165 10 view .LVU1563
 5029 0234 05BF     		ittet	eq
 5030 0236 2C22     		moveq	r2, #44
 5031 0238 4A70     		strbeq	r2, [r1, #1]
2166:src/display.c **** 	      odig++;
 5032              		.loc 1 2166 12 view .LVU1564
 5033 023a 0131     		addne	r1, r1, #1
 5034              	.LVL557:
2165:src/display.c **** 	      *obp++ = *p++;
 5035              		.loc 1 2165 7 view .LVU1565
 5036 023c 0231     		addeq	r1, r1, #2
 5037              	.LVL558:
 5038              	.L507:
2166:src/display.c **** 	      odig++;
 5039              		.loc 1 2166 8 is_stmt 1 discriminator 2 view .LVU1566
2166:src/display.c **** 	      odig++;
 5040              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1567
 5041 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5042              	.LVL559:
2164:src/display.c **** 		*obp++ = ',';
 5043              		.loc 1 2164 8 is_stmt 1 discriminator 2 view .LVU1568
2166:src/display.c **** 	      odig++;
 5044              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1569
 5045 0242 0A70     		strb	r2, [r1]
2167:src/display.c **** 	    }
ARM GAS  /tmp/ccPzxiH4.s 			page 175


 5046              		.loc 1 2167 8 is_stmt 1 discriminator 2 view .LVU1570
 5047              	.LVL560:
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5048              		.loc 1 2163 23 discriminator 2 view .LVU1571
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5049              		.loc 1 2163 15 discriminator 2 view .LVU1572
2164:src/display.c **** 		*obp++ = ',';
 5050              		.loc 1 2164 31 is_stmt 0 discriminator 2 view .LVU1573
 5051 0244 ABEB0C02 		sub	r2, fp, ip
 5052 0248 3244     		add	r2, r2, r6
 5053 024a 8EFB0285 		smull	r8, r5, lr, r2
 5054 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5055 0252 05EB4505 		add	r5, r5, r5, lsl #1
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5056              		.loc 1 2163 6 discriminator 2 view .LVU1574
 5057 0256 6045     		cmp	r0, ip
2164:src/display.c **** 		*obp++ = ',';
 5058              		.loc 1 2164 31 discriminator 2 view .LVU1575
 5059 0258 A2EB0505 		sub	r5, r2, r5
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5060              		.loc 1 2163 6 discriminator 2 view .LVU1576
 5061 025c E9D1     		bne	.L510
 5062 025e 059D     		ldr	r5, [sp, #20]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5063              		.loc 1 2169 6 is_stmt 1 view .LVU1577
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5064              		.loc 1 2169 13 is_stmt 0 view .LVU1578
 5065 0260 2E22     		movs	r2, #46
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5066              		.loc 1 2170 9 view .LVU1579
 5067 0262 AB42     		cmp	r3, r5
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5068              		.loc 1 2169 13 view .LVU1580
 5069 0264 4A70     		strb	r2, [r1, #1]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5070              		.loc 1 2169 10 view .LVU1581
 5071 0266 01F10208 		add	r8, r1, #2
 5072              	.LVL561:
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5073              		.loc 1 2170 6 is_stmt 1 view .LVU1582
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5074              		.loc 1 2170 9 is_stmt 0 view .LVU1583
 5075 026a 40F34B81 		ble	.L504
 5076 026e 9A1B     		subs	r2, r3, r6
 5077 0270 0A44     		add	r2, r2, r1
 5078 0272 0131     		adds	r1, r1, #1
 5079              	.LVL562:
 5080              	.L511:
2172:src/display.c **** 		odig++;
 5081              		.loc 1 2172 3 is_stmt 1 discriminator 3 view .LVU1584
2172:src/display.c **** 		odig++;
 5082              		.loc 1 2172 10 is_stmt 0 discriminator 3 view .LVU1585
 5083 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5084              	.LVL563:
2172:src/display.c **** 		odig++;
 5085              		.loc 1 2172 10 discriminator 3 view .LVU1586
 5086 0278 01F8015F 		strb	r5, [r1, #1]!
ARM GAS  /tmp/ccPzxiH4.s 			page 176


2173:src/display.c **** 	      }
 5087              		.loc 1 2173 3 is_stmt 1 discriminator 3 view .LVU1587
2171:src/display.c **** 		*obp++ = *p++;
 5088              		.loc 1 2171 31 discriminator 3 view .LVU1588
2171:src/display.c **** 		*obp++ = *p++;
 5089              		.loc 1 2171 22 discriminator 3 view .LVU1589
2171:src/display.c **** 		*obp++ = *p++;
 5090              		.loc 1 2171 8 is_stmt 0 discriminator 3 view .LVU1590
 5091 027c 9142     		cmp	r1, r2
 5092 027e F9D1     		bne	.L511
 5093 0280 F243     		mvns	r2, r6
 5094 0282 1A44     		add	r2, r2, r3
 5095 0284 9044     		add	r8, r8, r2
 5096              	.LVL564:
2173:src/display.c **** 	      }
 5097              		.loc 1 2173 7 view .LVU1591
 5098 0286 1D46     		mov	r5, r3
 5099 0288 3CE1     		b	.L504
 5100              	.LVL565:
 5101              	.L576:
2173:src/display.c **** 	      }
 5102              		.loc 1 2173 7 view .LVU1592
 5103 028a B846     		mov	r8, r7
 5104              	.LVL566:
 5105              	.L533:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5106              		.loc 1 2265 2 is_stmt 1 view .LVU1593
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5107              		.loc 1 2265 5 is_stmt 0 view .LVU1594
 5108 028c 029B     		ldr	r3, [sp, #8]
 5109 028e 0A2B     		cmp	r3, #10
 5110 0290 02DD     		ble	.L536
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5111              		.loc 1 2265 50 discriminator 1 view .LVU1595
 5112 0292 002C     		cmp	r4, #0
 5113 0294 00F00E82 		beq	.L668
 5114              	.L536:
2271:src/display.c **** 	if (odig > *display_digits)
 5115              		.loc 1 2271 2 is_stmt 1 view .LVU1596
 5116 0298 029B     		ldr	r3, [sp, #8]
 5117 029a 9D42     		cmp	r5, r3
 5118 029c A8BF     		it	ge
 5119 029e 1D46     		movge	r5, r3
 5120              	.LVL567:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5121              		.loc 1 2274 23 is_stmt 0 view .LVU1597
 5122 02a0 A3EB050A 		sub	r10, r3, r5
 5123              	.LVL568:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5124              		.loc 1 2274 23 view .LVU1598
 5125 02a4 1A46     		mov	r2, r3
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5126              		.loc 1 2274 4 view .LVU1599
 5127 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2271:src/display.c **** 	if (odig > *display_digits)
 5128              		.loc 1 2271 7 view .LVU1600
 5129 02aa 0023     		movs	r3, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 177


2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5130              		.loc 1 2275 5 view .LVU1601
 5131 02ac 9A45     		cmp	r10, r3
2271:src/display.c **** 	if (odig > *display_digits)
 5132              		.loc 1 2271 7 view .LVU1602
 5133 02ae 88F80030 		strb	r3, [r8]
2272:src/display.c **** 	  odig = *display_digits;
 5134              		.loc 1 2272 2 is_stmt 1 view .LVU1603
 5135              	.LVL569:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5136              		.loc 1 2274 2 view .LVU1604
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5137              		.loc 1 2275 2 view .LVU1605
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5138              		.loc 1 2275 5 is_stmt 0 view .LVU1606
 5139 02b2 04DD     		ble	.L537
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5140              		.loc 1 2275 35 discriminator 1 view .LVU1607
 5141 02b4 16F57A7F 		cmn	r6, #1000
2276:src/display.c **** 	if (negative) {
 5142              		.loc 1 2276 4 is_stmt 1 discriminator 1 view .LVU1608
2276:src/display.c **** 	if (negative) {
 5143              		.loc 1 2276 6 is_stmt 0 discriminator 1 view .LVU1609
 5144 02b8 D8BF     		it	le
 5145 02ba AAF1090A 		suble	r10, r10, #9
 5146              	.LVL570:
 5147              	.L537:
2277:src/display.c **** 	  if (res) *res++ = '-';
 5148              		.loc 1 2277 2 is_stmt 1 view .LVU1610
2277:src/display.c **** 	  if (res) *res++ = '-';
 5149              		.loc 1 2277 5 is_stmt 0 view .LVU1611
 5150 02be 039B     		ldr	r3, [sp, #12]
 5151 02c0 2BB1     		cbz	r3, .L538
2278:src/display.c **** 	  else {
 5152              		.loc 1 2278 4 is_stmt 1 view .LVU1612
2278:src/display.c **** 	  else {
 5153              		.loc 1 2278 7 is_stmt 0 view .LVU1613
 5154 02c2 002C     		cmp	r4, #0
 5155 02c4 00F00582 		beq	.L539
2278:src/display.c **** 	  else {
 5156              		.loc 1 2278 13 is_stmt 1 discriminator 1 view .LVU1614
 5157              	.LVL571:
2278:src/display.c **** 	  else {
 5158              		.loc 1 2278 20 is_stmt 0 discriminator 1 view .LVU1615
 5159 02c8 2D23     		movs	r3, #45
 5160 02ca 04F8013B 		strb	r3, [r4], #1
 5161              	.LVL572:
 5162              	.L538:
2286:src/display.c **** 	  if (c == '.') {
 5163              		.loc 1 2286 12 is_stmt 1 discriminator 1 view .LVU1616
2286:src/display.c **** 	  if (c == '.') {
 5164              		.loc 1 2286 18 is_stmt 0 discriminator 1 view .LVU1617
 5165 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5166              	.LVL573:
2286:src/display.c **** 	  if (c == '.') {
 5167              		.loc 1 2286 2 discriminator 1 view .LVU1618
 5168 02d2 C1B1     		cbz	r1, .L540
ARM GAS  /tmp/ccPzxiH4.s 			page 178


2286:src/display.c **** 	  if (c == '.') {
 5169              		.loc 1 2286 31 view .LVU1619
 5170 02d4 BAF16B0F 		cmp	r10, #107
 5171 02d8 15DC     		bgt	.L540
 5172              	.LVL574:
 5173              	.L541:
2290:src/display.c **** 	  } else {
 5174              		.loc 1 2290 12 view .LVU1620
 5175 02da 234B     		ldr	r3, .L680+4
2288:src/display.c **** 	  } else if (c == ',') {
 5176              		.loc 1 2288 12 view .LVU1621
 5177 02dc DFF894B0 		ldr	fp, .L680+16
 5178              	.LVL575:
 5179              	.L552:
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5180              		.loc 1 2287 4 is_stmt 1 view .LVU1622
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5181              		.loc 1 2287 7 is_stmt 0 view .LVU1623
 5182 02e0 2E29     		cmp	r1, #46
 5183 02e2 00F02481 		beq	.L669
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5184              		.loc 1 2289 11 is_stmt 1 view .LVU1624
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5185              		.loc 1 2289 14 is_stmt 0 view .LVU1625
 5186 02e6 2C29     		cmp	r1, #44
 5187 02e8 00F04B81 		beq	.L670
2292:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5188              		.loc 1 2292 6 is_stmt 1 view .LVU1626
 5189              	.LVL576:
 5190              	.LBB390:
 5191              	.LBI390:
 339:src/display.c ****   if (res) *res++ = ch;
 5192              		.loc 1 339 14 view .LVU1627
 5193              	.LBB391:
 340:src/display.c ****   else	set_dig(base, ch);
 5194              		.loc 1 340 3 view .LVU1628
 340:src/display.c ****   else	set_dig(base, ch);
 5195              		.loc 1 340 6 is_stmt 0 view .LVU1629
 5196 02ec 002C     		cmp	r4, #0
 5197 02ee 00F05D81 		beq	.L550
 340:src/display.c ****   else	set_dig(base, ch);
 5198              		.loc 1 340 12 is_stmt 1 view .LVU1630
 5199              	.LVL577:
 340:src/display.c ****   else	set_dig(base, ch);
 5200              		.loc 1 340 19 is_stmt 0 view .LVU1631
 5201 02f2 04F8011B 		strb	r1, [r4], #1
 5202              	.LVL578:
 5203              	.L551:
 342:src/display.c **** }
 5204              		.loc 1 342 3 is_stmt 1 view .LVU1632
 342:src/display.c **** }
 5205              		.loc 1 342 3 is_stmt 0 view .LVU1633
 5206              	.LBE391:
 5207              	.LBE390:
2293:src/display.c **** 	  }
 5208              		.loc 1 2293 6 is_stmt 1 view .LVU1634
2286:src/display.c **** 	  if (c == '.') {
ARM GAS  /tmp/ccPzxiH4.s 			page 179


 5209              		.loc 1 2286 18 is_stmt 0 view .LVU1635
 5210 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5211              	.LVL579:
2293:src/display.c **** 	  }
 5212              		.loc 1 2293 8 view .LVU1636
 5213 02fa 0AF1090A 		add	r10, r10, #9
 5214              	.LVL580:
2286:src/display.c **** 	  if (c == '.') {
 5215              		.loc 1 2286 53 is_stmt 1 view .LVU1637
2286:src/display.c **** 	  if (c == '.') {
 5216              		.loc 1 2286 12 view .LVU1638
2286:src/display.c **** 	  if (c == '.') {
 5217              		.loc 1 2286 2 is_stmt 0 view .LVU1639
 5218 02fe 11B1     		cbz	r1, .L540
2286:src/display.c **** 	  if (c == '.') {
 5219              		.loc 1 2286 31 discriminator 3 view .LVU1640
 5220 0300 BAF16B0F 		cmp	r10, #107
 5221 0304 ECDD     		ble	.L552
 5222              	.LVL581:
 5223              	.L540:
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5224              		.loc 1 2306 2 is_stmt 1 view .LVU1641
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5225              		.loc 1 2306 5 is_stmt 0 view .LVU1642
 5226 0306 B9F1000F 		cmp	r9, #0
 5227 030a 40F02381 		bne	.L671
 5228              	.L553:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5229              		.loc 1 2309 2 is_stmt 1 view .LVU1643
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5230              		.loc 1 2309 5 is_stmt 0 view .LVU1644
 5231 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5232 0312 2E2B     		cmp	r3, #46
 5233 0314 00F02881 		beq	.L672
 5234              	.LVL582:
 5235              	.L554:
2311:src/display.c ****       }
 5236              		.loc 1 2311 2 is_stmt 1 view .LVU1645
2311:src/display.c ****       }
 5237              		.loc 1 2311 18 is_stmt 0 view .LVU1646
 5238 0318 019B     		ldr	r3, [sp, #4]
 5239 031a 1D60     		str	r5, [r3]
 5240              	.LVL583:
 5241              	.L428:
2312:src/display.c **** 
 5242              		.loc 1 2312 7 view .LVU1647
 5243 031c 27B0     		add	sp, sp, #156
 5244              		.cfi_remember_state
 5245              		.cfi_def_cfa_offset 36
 5246              		@ sp needed
 5247 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5248              	.LVL584:
 5249              	.L436:
 5250              		.cfi_restore_state
2011:src/display.c **** 
 5251              		.loc 1 2011 4 is_stmt 1 view .LVU1648
 5252 0322 3946     		mov	r1, r7
ARM GAS  /tmp/ccPzxiH4.s 			page 180


 5253 0324 5046     		mov	r0, r10
 5254 0326 FFF7FEFF 		bl	decNumberToString
 5255              	.LVL585:
 5256 032a 9BE6     		b	.L438
 5257              	.LVL586:
 5258              	.L429:
1969:src/display.c **** 	    if (State2.hms) {
 5259              		.loc 1 1969 4 view .LVU1649
1969:src/display.c **** 	    if (State2.hms) {
 5260              		.loc 1 1969 25 is_stmt 0 view .LVU1650
 5261 032c 0D4B     		ldr	r3, .L680
 5262 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5263              		.loc 1 1969 22 view .LVU1651
 5264 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5265              		.loc 1 1969 25 view .LVU1652
 5266 0332 01F00201 		and	r1, r1, #2
1969:src/display.c **** 	    if (State2.hms) {
 5267              		.loc 1 1969 22 view .LVU1653
 5268 0336 1143     		orrs	r1, r1, r2
 5269 0338 7FF471AE 		bne	.L432
1970:src/display.c **** 	      set_x_hms(z, res);
 5270              		.loc 1 1970 6 is_stmt 1 view .LVU1654
1970:src/display.c **** 	      set_x_hms(z, res);
 5271              		.loc 1 1970 10 is_stmt 0 view .LVU1655
 5272 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1970:src/display.c **** 	      set_x_hms(z, res);
 5273              		.loc 1 1970 9 view .LVU1656
 5274 033e DE07     		lsls	r6, r3, #31
 5275 0340 00F1EA82 		bmi	.L673
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5276              		.loc 1 1974 11 is_stmt 1 view .LVU1657
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5277              		.loc 1 1974 15 is_stmt 0 view .LVU1658
 5278 0344 094B     		ldr	r3, .L680+8
 5279 0346 1B68     		ldr	r3, [r3]
 5280 0348 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5281              		.loc 1 1974 14 view .LVU1659
 5282 034c 9806     		lsls	r0, r3, #26
 5283 034e 7FF566AE 		bpl	.L432
1975:src/display.c **** 		return;
 5284              		.loc 1 1975 8 is_stmt 1 view .LVU1660
1975:src/display.c **** 		return;
 5285              		.loc 1 1975 12 is_stmt 0 view .LVU1661
 5286 0352 2146     		mov	r1, r4
 5287 0354 5046     		mov	r0, r10
 5288 0356 FFF7FEFF 		bl	set_x_fract
 5289              	.LVL587:
1975:src/display.c **** 		return;
 5290              		.loc 1 1975 11 view .LVU1662
 5291 035a 0028     		cmp	r0, #0
 5292 035c 3FF45FAE 		beq	.L432
 5293 0360 DCE7     		b	.L428
 5294              	.L681:
 5295 0362 00BF     		.align	2
ARM GAS  /tmp/ccPzxiH4.s 			page 181


 5296              	.L680:
 5297 0364 00000000 		.word	StateWhileOn
 5298 0368 00000000 		.word	.LANCHOR0
 5299 036c 00000000 		.word	main_ram
 5300 0370 56555555 		.word	1431655766
 5301 0374 00000000 		.word	.LANCHOR1
 5302              	.LVL588:
 5303              	.L660:
2019:src/display.c **** 	  //  ALL mode: fill the display
 5304              		.loc 1 2019 38 discriminator 1 view .LVU1663
 5305 0378 019B     		ldr	r3, [sp, #4]
 5306 037a 1A68     		ldr	r2, [r3]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5307              		.loc 1 2019 35 discriminator 1 view .LVU1664
 5308 037c 089B     		ldr	r3, [sp, #32]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5309              		.loc 1 2019 23 discriminator 1 view .LVU1665
 5310 037e 9A42     		cmp	r2, r3
 5311 0380 11DD     		ble	.L451
2023:src/display.c **** 
 5312              		.loc 1 2023 4 is_stmt 1 view .LVU1666
2025:src/display.c **** 	  int orig_mode = mode;
 5313              		.loc 1 2025 23 is_stmt 0 view .LVU1667
 5314 0382 042D     		cmp	r5, #4
2023:src/display.c **** 
 5315              		.loc 1 2023 7 view .LVU1668
 5316 0384 0793     		str	r3, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5317              		.loc 1 2025 2 is_stmt 1 view .LVU1669
2025:src/display.c **** 	  int orig_mode = mode;
 5318              		.loc 1 2025 23 is_stmt 0 view .LVU1670
 5319 0386 12D0     		beq	.L452
 5320              	.L674:
2025:src/display.c **** 	  int orig_mode = mode;
 5321              		.loc 1 2025 43 discriminator 2 view .LVU1671
 5322 0388 052D     		cmp	r5, #5
 5323 038a 00F08A81 		beq	.L453
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5324              		.loc 1 1955 6 view .LVU1672
 5325 038e 0023     		movs	r3, #0
 5326 0390 0493     		str	r3, [sp, #16]
 5327 0392 80E6     		b	.L559
 5328              	.LVL589:
 5329              	.L661:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5330              		.loc 1 2050 17 is_stmt 1 discriminator 1 view .LVU1673
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5331              		.loc 1 2050 21 is_stmt 0 discriminator 1 view .LVU1674
 5332 0394 4421     		movs	r1, #68
 5333 0396 3846     		mov	r0, r7
 5334              	.LVL590:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5335              		.loc 1 2050 21 discriminator 1 view .LVU1675
 5336 0398 FFF7FEFF 		bl	find_char
 5337              	.LVL591:
2051:src/display.c **** 	else {
 5338              		.loc 1 2051 2 is_stmt 1 discriminator 1 view .LVU1676
ARM GAS  /tmp/ccPzxiH4.s 			page 182


2051:src/display.c **** 	else {
 5339              		.loc 1 2051 5 is_stmt 0 discriminator 1 view .LVU1677
 5340 039c 0646     		mov	r6, r0
 5341 039e 0028     		cmp	r0, #0
 5342 03a0 3FF493AE 		beq	.L455
 5343 03a4 89E6     		b	.L454
 5344              	.LVL592:
 5345              	.L451:
2021:src/display.c **** 	else
 5346              		.loc 1 2021 4 is_stmt 1 view .LVU1678
2021:src/display.c **** 	else
 5347              		.loc 1 2021 25 is_stmt 0 view .LVU1679
 5348 03a6 013A     		subs	r2, r2, #1
2025:src/display.c **** 	  int orig_mode = mode;
 5349              		.loc 1 2025 23 view .LVU1680
 5350 03a8 042D     		cmp	r5, #4
2021:src/display.c **** 	else
 5351              		.loc 1 2021 7 view .LVU1681
 5352 03aa 0792     		str	r2, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5353              		.loc 1 2025 2 is_stmt 1 view .LVU1682
2025:src/display.c **** 	  int orig_mode = mode;
 5354              		.loc 1 2025 23 is_stmt 0 view .LVU1683
 5355 03ac ECD1     		bne	.L674
 5356              	.L452:
 5357              	.LBB393:
2026:src/display.c **** 
 5358              		.loc 1 2026 4 is_stmt 1 view .LVU1684
 5359              	.LVL593:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5360              		.loc 1 2028 4 view .LVU1685
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5361              		.loc 1 2028 11 is_stmt 0 view .LVU1686
 5362 03ae 2A46     		mov	r2, r5
 5363 03b0 07A9     		add	r1, sp, #28
 5364 03b2 5046     		mov	r0, r10
 5365 03b4 FFF7FEFF 		bl	std_round_fix
 5366              	.LVL594:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5367              		.loc 1 2031 16 view .LVU1687
 5368 03b8 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5369              		.loc 1 2028 11 view .LVU1688
 5370 03ba 0546     		mov	r5, r0
 5371              	.LVL595:
2029:src/display.c **** 	    // allow zeros to be trimmed
 5372              		.loc 1 2029 4 is_stmt 1 view .LVU1689
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5373              		.loc 1 2031 6 view .LVU1690
2032:src/display.c **** 	    dd = *display_digits - 1;
 5374              		.loc 1 2032 4 view .LVU1691
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5375              		.loc 1 2031 16 is_stmt 0 view .LVU1692
 5376 03bc 0493     		str	r3, [sp, #16]
 5377 03be 6AE6     		b	.L559
 5378              	.LVL596:
 5379              	.L667:
ARM GAS  /tmp/ccPzxiH4.s 			page 183


2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5380              		.loc 1 2031 16 view .LVU1693
 5381              	.LBE393:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5382              		.loc 1 2111 7 view .LVU1694
 5383 03c0 5846     		mov	r0, fp
 5384              	.LVL597:
2112:src/display.c **** 	    mantissa[0] = '1';
 5385              		.loc 1 2112 41 view .LVU1695
 5386 03c2 4FF03008 		mov	r8, #48
 5387              	.L483:
 5388              	.LVL598:
2112:src/display.c **** 	    mantissa[0] = '1';
 5389              		.loc 1 2112 47 is_stmt 1 discriminator 3 view .LVU1696
2112:src/display.c **** 	    mantissa[0] = '1';
 5390              		.loc 1 2112 36 discriminator 3 view .LVU1697
2112:src/display.c **** 	    mantissa[0] = '1';
 5391              		.loc 1 2112 41 is_stmt 0 discriminator 3 view .LVU1698
 5392 03c6 00F8018B 		strb	r8, [r0], #1
 5393              	.LVL599:
2112:src/display.c **** 	    mantissa[0] = '1';
 5394              		.loc 1 2112 25 is_stmt 1 discriminator 3 view .LVU1699
2112:src/display.c **** 	    mantissa[0] = '1';
 5395              		.loc 1 2112 6 is_stmt 0 discriminator 3 view .LVU1700
 5396 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5397 03ce BCF1390F 		cmp	ip, #57
 5398 03d2 F8D0     		beq	.L483
 5399              	.LVL600:
 5400              	.L558:
2113:src/display.c **** 	    exp++;
 5401              		.loc 1 2113 6 is_stmt 1 view .LVU1701
2113:src/display.c **** 	    exp++;
 5402              		.loc 1 2113 18 is_stmt 0 view .LVU1702
 5403 03d4 3120     		movs	r0, #49
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5404              		.loc 1 2115 9 view .LVU1703
 5405 03d6 012D     		cmp	r5, #1
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5406              		.loc 1 2114 9 view .LVU1704
 5407 03d8 06F10106 		add	r6, r6, #1
 5408              	.LVL601:
2113:src/display.c **** 	    exp++;
 5409              		.loc 1 2113 18 view .LVU1705
 5410 03dc 8DF85800 		strb	r0, [sp, #88]
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5411              		.loc 1 2114 6 is_stmt 1 view .LVU1706
 5412              	.LVL602:
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5413              		.loc 1 2115 6 view .LVU1707
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5414              		.loc 1 2115 9 is_stmt 0 view .LVU1708
 5415 03e0 7FF4ECAE 		bne	.L655
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5416              		.loc 1 2115 27 discriminator 1 view .LVU1709
 5417 03e4 0298     		ldr	r0, [sp, #8]
 5418 03e6 8642     		cmp	r6, r0
 5419 03e8 C0F2E580 		blt	.L485
ARM GAS  /tmp/ccPzxiH4.s 			page 184


2116:src/display.c **** 	      extra_digits = 0;
 5420              		.loc 1 2116 8 is_stmt 1 view .LVU1710
2116:src/display.c **** 	      extra_digits = 0;
 5421              		.loc 1 2116 28 is_stmt 0 view .LVU1711
 5422 03ec BF4B     		ldr	r3, .L682
 5423              	.LVL603:
2116:src/display.c **** 	      extra_digits = 0;
 5424              		.loc 1 2116 28 view .LVU1712
 5425 03ee 1B68     		ldr	r3, [r3]
 5426 03f0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2116:src/display.c **** 	      extra_digits = 0;
 5427              		.loc 1 2116 37 view .LVU1713
 5428 03f4 D906     		lsls	r1, r3, #27
 5429              	.LVL604:
2116:src/display.c **** 	      extra_digits = 0;
 5430              		.loc 1 2116 37 view .LVU1714
 5431 03f6 40F1D582 		bpl	.L675
 5432              	.LVL605:
2127:src/display.c **** 
 5433              		.loc 1 2127 2 is_stmt 1 view .LVU1715
 5434 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 5435              		.loc 1 2127 9 is_stmt 0 view .LVU1716
 5436 03fe 0BEB0E03 		add	r3, fp, lr
 5437              	.LVL606:
2127:src/display.c **** 
 5438              		.loc 1 2127 45 is_stmt 1 view .LVU1717
2116:src/display.c **** 	      extra_digits = 0;
 5439              		.loc 1 2116 37 is_stmt 0 view .LVU1718
 5440 0402 0325     		movs	r5, #3
2127:src/display.c **** 
 5441              		.loc 1 2127 2 view .LVU1719
 5442 0404 0029     		cmp	r1, #0
 5443 0406 7FF4DCAE 		bne	.L556
 5444              	.LVL607:
 5445              	.L491:
2229:src/display.c **** 	  case -1:
 5446              		.loc 1 2229 4 is_stmt 1 view .LVU1720
2229:src/display.c **** 	  case -1:
 5447              		.loc 1 2229 16 is_stmt 0 view .LVU1721
 5448 040a B94B     		ldr	r3, .L682+4
 5449 040c 83FB0613 		smull	r1, r3, r3, r6
 5450 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5451 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5452 0418 F31A     		subs	r3, r6, r3
 5453 041a 0233     		adds	r3, r3, #2
 5454 041c 042B     		cmp	r3, #4
 5455 041e 4FD8     		bhi	.L526
 5456 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5457              	.L528:
 5458 0424 2402     		.2byte	(.L529-.L528)/2
 5459 0426 1202     		.2byte	(.L527-.L528)/2
 5460 0428 4E00     		.2byte	(.L526-.L528)/2
 5461 042a 2402     		.2byte	(.L529-.L528)/2
 5462 042c 1202     		.2byte	(.L527-.L528)/2
 5463              	.LVL608:
 5464              		.p2align 1
ARM GAS  /tmp/ccPzxiH4.s 			page 185


 5465              	.L497:
2138:src/display.c **** 	    case -1:
 5466              		.loc 1 2138 6 is_stmt 1 view .LVU1722
2138:src/display.c **** 	    case -1:
 5467              		.loc 1 2138 32 is_stmt 0 view .LVU1723
 5468 042e AF48     		ldr	r0, .L682
2138:src/display.c **** 	    case -1:
 5469              		.loc 1 2138 19 view .LVU1724
 5470 0430 AF49     		ldr	r1, .L682+4
2138:src/display.c **** 	    case -1:
 5471              		.loc 1 2138 32 view .LVU1725
 5472 0432 0068     		ldr	r0, [r0]
2138:src/display.c **** 	    case -1:
 5473              		.loc 1 2138 19 view .LVU1726
 5474 0434 81FB0651 		smull	r5, r1, r1, r6
2138:src/display.c **** 	    case -1:
 5475              		.loc 1 2138 32 view .LVU1727
 5476 0438 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2138:src/display.c **** 	    case -1:
 5477              		.loc 1 2138 19 view .LVU1728
 5478 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5479 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5480 0444 711A     		subs	r1, r6, r1
2138:src/display.c **** 	    case -1:
 5481              		.loc 1 2138 32 view .LVU1729
 5482 0446 C0F30010 		ubfx	r0, r0, #4, #1
2138:src/display.c **** 	    case -1:
 5483              		.loc 1 2138 24 view .LVU1730
 5484 044a 01FB00F1 		mul	r1, r1, r0
 5485 044e 0231     		adds	r1, r1, #2
 5486 0450 0429     		cmp	r1, #4
 5487 0452 00F26782 		bhi	.L573
 5488 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5489              	.L501:
 5490 045a 4302     		.2byte	(.L502-.L501)/2
 5491 045c 1802     		.2byte	(.L500-.L501)/2
 5492 045e 6502     		.2byte	(.L573-.L501)/2
 5493 0460 4302     		.2byte	(.L502-.L501)/2
 5494 0462 1802     		.2byte	(.L500-.L501)/2
 5495              	.LVL609:
 5496              		.p2align 1
 5497              	.L471:
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5498              		.loc 1 2094 4 is_stmt 1 view .LVU1731
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5499              		.loc 1 2094 7 is_stmt 0 view .LVU1732
 5500 0464 B342     		cmp	r3, r6
 5501 0466 03DD     		ble	.L474
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5502              		.loc 1 2094 45 discriminator 1 view .LVU1733
 5503 0468 5342     		rsbs	r3, r2, #0
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5504              		.loc 1 2094 36 discriminator 1 view .LVU1734
 5505 046a B342     		cmp	r3, r6
 5506 046c 40F30282 		ble	.L475
 5507              	.L474:
2095:src/display.c **** 	  else {
ARM GAS  /tmp/ccPzxiH4.s 			page 186


 5508              		.loc 1 2095 6 is_stmt 1 view .LVU1735
2095:src/display.c **** 	  else {
 5509              		.loc 1 2095 26 is_stmt 0 view .LVU1736
 5510 0470 9E4B     		ldr	r3, .L682
 5511 0472 1B68     		ldr	r3, [r3]
 5512 0474 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2095:src/display.c **** 	  else {
 5513              		.loc 1 2095 35 view .LVU1737
 5514 0478 13F0100F 		tst	r3, #16
 5515 047c 14BF     		ite	ne
 5516 047e 0325     		movne	r5, #3
 5517              	.LVL610:
2095:src/display.c **** 	  else {
 5518              		.loc 1 2095 35 view .LVU1738
 5519 0480 0225     		moveq	r5, #2
 5520 0482 6CE6     		b	.L656
 5521              	.LVL611:
 5522              	.L665:
2095:src/display.c **** 	  else {
 5523              		.loc 1 2095 35 view .LVU1739
 5524 0484 013E     		subs	r6, r6, #1
 5525 0486 08EB0602 		add	r2, r8, r6
 5526              	.L464:
2074:src/display.c **** 	    exp--;
 5527              		.loc 1 2074 4 is_stmt 1 discriminator 1 view .LVU1740
2075:src/display.c **** 	  while (*++q == '0');
 5528              		.loc 1 2075 6 discriminator 1 view .LVU1741
 5529 048a A2EB0806 		sub	r6, r2, r8
 5530              	.LVL612:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5531              		.loc 1 2076 10 discriminator 1 view .LVU1742
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5532              		.loc 1 2076 11 is_stmt 0 discriminator 1 view .LVU1743
 5533 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5534              	.LVL613:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5535              		.loc 1 2076 4 discriminator 1 view .LVU1744
 5536 0492 302B     		cmp	r3, #48
 5537 0494 F9D0     		beq	.L464
2077:src/display.c **** 	    *p++ = *q++;
 5538              		.loc 1 2077 10 is_stmt 1 view .LVU1745
 5539 0496 A3F13002 		sub	r2, r3, #48
 5540 049a 092A     		cmp	r2, #9
 5541 049c 3FF658AE 		bhi	.L465
1940:src/display.c **** 	char *r;
 5542              		.loc 1 1940 8 is_stmt 0 view .LVU1746
 5543 04a0 5A46     		mov	r2, fp
 5544              	.LVL614:
 5545              	.L466:
2078:src/display.c **** 	} else {
 5546              		.loc 1 2078 6 is_stmt 1 view .LVU1747
2078:src/display.c **** 	} else {
 5547              		.loc 1 2078 11 is_stmt 0 view .LVU1748
 5548 04a2 02F8013B 		strb	r3, [r2], #1
 5549              	.LVL615:
2077:src/display.c **** 	    *p++ = *q++;
 5550              		.loc 1 2077 10 is_stmt 1 view .LVU1749
ARM GAS  /tmp/ccPzxiH4.s 			page 187


2077:src/display.c **** 	    *p++ = *q++;
 5551              		.loc 1 2077 11 is_stmt 0 view .LVU1750
 5552 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2077:src/display.c **** 	    *p++ = *q++;
 5553              		.loc 1 2077 10 view .LVU1751
 5554 04aa A3F13001 		sub	r1, r3, #48
 5555 04ae 0929     		cmp	r1, #9
 5556 04b0 F7D9     		bls	.L466
 5557 04b2 4DE6     		b	.L465
 5558              	.LVL616:
 5559              	.L663:
2068:src/display.c **** 	  q++;
 5560              		.loc 1 2068 4 is_stmt 1 view .LVU1752
2069:src/display.c **** 	} else if (*q == '+')
 5561              		.loc 1 2069 4 view .LVU1753
2068:src/display.c **** 	  q++;
 5562              		.loc 1 2068 13 is_stmt 0 view .LVU1754
 5563 04b4 0122     		movs	r2, #1
 5564 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5565 04ba 0392     		str	r2, [sp, #12]
2069:src/display.c **** 	} else if (*q == '+')
 5566              		.loc 1 2069 5 view .LVU1755
 5567 04bc 9044     		add	r8, r8, r2
 5568              	.LVL617:
2069:src/display.c **** 	} else if (*q == '+')
 5569              		.loc 1 2069 5 view .LVU1756
 5570 04be 1AE6     		b	.L460
 5571              	.LVL618:
 5572              	.L526:
2069:src/display.c **** 	} else if (*q == '+')
 5573              		.loc 1 2069 5 view .LVU1757
 5574 04c0 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 5575              		.loc 1 2229 16 view .LVU1758
 5576 04c2 0125     		movs	r5, #1
1934:src/display.c **** 	int odig = 0;
 5577              		.loc 1 1934 15 view .LVU1759
 5578 04c4 3946     		mov	r1, r7
 5579              	.LVL619:
 5580              	.L494:
2243:src/display.c **** 	  };
 5581              		.loc 1 2243 6 is_stmt 1 view .LVU1760
2244:src/display.c **** 	  // Falling through
 5582              		.loc 1 2244 5 view .LVU1761
2248:src/display.c **** 	  odig++;
 5583              		.loc 1 2248 4 view .LVU1762
2248:src/display.c **** 	  odig++;
 5584              		.loc 1 2248 15 is_stmt 0 view .LVU1763
 5585 04c6 5B46     		mov	r3, fp
 5586              	.LVL620:
2248:src/display.c **** 	  odig++;
 5587              		.loc 1 2248 11 view .LVU1764
 5588 04c8 8846     		mov	r8, r1
 5589 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5590              	.LVL621:
2248:src/display.c **** 	  odig++;
 5591              		.loc 1 2248 11 view .LVU1765
ARM GAS  /tmp/ccPzxiH4.s 			page 188


 5592 04ce 08F8020B 		strb	r0, [r8], #2
2249:src/display.c **** 	  *obp++ = '.';
 5593              		.loc 1 2249 4 is_stmt 1 view .LVU1766
2250:src/display.c **** 	  dd--;
 5594              		.loc 1 2250 4 view .LVU1767
 5595              	.LVL622:
2250:src/display.c **** 	  dd--;
 5596              		.loc 1 2250 11 is_stmt 0 view .LVU1768
 5597 04d2 4FF02E0C 		mov	ip, #46
2252:src/display.c **** 	    *obp++ = *p++;
 5598              		.loc 1 2252 13 view .LVU1769
 5599 04d6 901E     		subs	r0, r2, #2
2252:src/display.c **** 	    *obp++ = *p++;
 5600              		.loc 1 2252 10 view .LVU1770
 5601 04d8 002A     		cmp	r2, #0
2250:src/display.c **** 	  dd--;
 5602              		.loc 1 2250 11 view .LVU1771
 5603 04da 81F801C0 		strb	ip, [r1, #1]
2251:src/display.c **** 	  while (dd-- >= 0) {
 5604              		.loc 1 2251 4 is_stmt 1 view .LVU1772
2252:src/display.c **** 	    *obp++ = *p++;
 5605              		.loc 1 2252 4 view .LVU1773
2252:src/display.c **** 	    *obp++ = *p++;
 5606              		.loc 1 2252 10 view .LVU1774
2252:src/display.c **** 	    *obp++ = *p++;
 5607              		.loc 1 2252 13 is_stmt 0 view .LVU1775
 5608 04de 0790     		str	r0, [sp, #28]
2252:src/display.c **** 	    *obp++ = *p++;
 5609              		.loc 1 2252 10 view .LVU1776
 5610 04e0 40F32382 		ble	.L574
2252:src/display.c **** 	    *obp++ = *p++;
 5611              		.loc 1 2252 10 view .LVU1777
 5612 04e4 501C     		adds	r0, r2, #1
 5613 04e6 0131     		adds	r1, r1, #1
 5614 04e8 8344     		add	fp, fp, r0
 5615              	.LVL623:
 5616              	.L532:
2253:src/display.c **** 	    odig++;
 5617              		.loc 1 2253 6 is_stmt 1 view .LVU1778
2253:src/display.c **** 	    odig++;
 5618              		.loc 1 2253 13 is_stmt 0 view .LVU1779
 5619 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5620              	.LVL624:
2253:src/display.c **** 	    odig++;
 5621              		.loc 1 2253 13 view .LVU1780
 5622 04ee 01F8010F 		strb	r0, [r1, #1]!
2254:src/display.c **** 	  }
 5623              		.loc 1 2254 6 is_stmt 1 view .LVU1781
2252:src/display.c **** 	    *obp++ = *p++;
 5624              		.loc 1 2252 10 view .LVU1782
 5625 04f2 5B45     		cmp	r3, fp
 5626 04f4 F9D1     		bne	.L532
 5627 04f6 6FF00103 		mvn	r3, #1
 5628              	.LVL625:
2252:src/display.c **** 	    *obp++ = *p++;
 5629              		.loc 1 2252 10 is_stmt 0 view .LVU1783
 5630 04fa 9044     		add	r8, r8, r2
ARM GAS  /tmp/ccPzxiH4.s 			page 189


 5631 04fc 1544     		add	r5, r5, r2
 5632 04fe 0793     		str	r3, [sp, #28]
2256:src/display.c **** 	}
 5633              		.loc 1 2256 13 view .LVU1784
 5634 0500 4FF00109 		mov	r9, #1
 5635              	.L504:
 5636              	.LVL626:
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5637              		.loc 1 2259 2 is_stmt 1 view .LVU1785
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5638              		.loc 1 2259 5 is_stmt 0 view .LVU1786
 5639 0504 049B     		ldr	r3, [sp, #16]
 5640 0506 002B     		cmp	r3, #0
 5641 0508 3FF4C0AE 		beq	.L533
2260:src/display.c **** 	    obp--;
 5642              		.loc 1 2260 10 is_stmt 1 view .LVU1787
 5643 050c B845     		cmp	r8, r7
 5644 050e 7FF6BDAE 		bls	.L533
 5645 0512 4346     		mov	r3, r8
 5646 0514 04E0     		b	.L534
 5647              	.LVL627:
 5648              	.L535:
2260:src/display.c **** 	    obp--;
 5649              		.loc 1 2260 10 is_stmt 0 view .LVU1788
 5650 0516 9F42     		cmp	r7, r3
2262:src/display.c **** 	  }
 5651              		.loc 1 2262 10 view .LVU1789
 5652 0518 05F1FF35 		add	r5, r5, #-1
 5653              	.LVL628:
2260:src/display.c **** 	    obp--;
 5654              		.loc 1 2260 10 is_stmt 1 view .LVU1790
 5655 051c 3FF4B5AE 		beq	.L576
 5656              	.LVL629:
 5657              	.L534:
2261:src/display.c **** 	    odig--;
 5658              		.loc 1 2261 6 discriminator 1 view .LVU1791
 5659 0520 9846     		mov	r8, r3
 5660              	.LVL630:
2261:src/display.c **** 	    odig--;
 5661              		.loc 1 2261 6 is_stmt 0 discriminator 1 view .LVU1792
 5662 0522 013B     		subs	r3, r3, #1
 5663              	.LVL631:
2262:src/display.c **** 	  }
 5664              		.loc 1 2262 6 is_stmt 1 discriminator 1 view .LVU1793
2260:src/display.c **** 	    obp--;
 5665              		.loc 1 2260 19 is_stmt 0 discriminator 1 view .LVU1794
 5666 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5667 0528 302A     		cmp	r2, #48
 5668 052a F4D0     		beq	.L535
2260:src/display.c **** 	    obp--;
 5669              		.loc 1 2260 19 discriminator 1 view .LVU1795
 5670 052c AEE6     		b	.L533
 5671              	.LVL632:
 5672              	.L669:
2288:src/display.c **** 	  } else if (c == ',') {
 5673              		.loc 1 2288 6 is_stmt 1 view .LVU1796
2288:src/display.c **** 	  } else if (c == ',') {
ARM GAS  /tmp/ccPzxiH4.s 			page 190


 5674              		.loc 1 2288 12 is_stmt 0 view .LVU1797
 5675 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5676              	.LVL633:
 5677              	.LBB394:
 5678              	.LBI394:
 293:src/display.c ****   if (res) {
 5679              		.loc 1 293 14 is_stmt 1 view .LVU1798
 5680              	.LBB395:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5681              		.loc 1 294 3 view .LVU1799
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5682              		.loc 1 294 6 is_stmt 0 view .LVU1800
 5683 0532 002C     		cmp	r4, #0
 5684 0534 33D0     		beq	.L544
 295:src/display.c ****   } else {
 5685              		.loc 1 295 5 is_stmt 1 view .LVU1801
 295:src/display.c ****   } else {
 5686              		.loc 1 295 12 is_stmt 0 view .LVU1802
 5687 0536 0029     		cmp	r1, #0
 5688              	.LVL634:
 295:src/display.c ****   } else {
 5689              		.loc 1 295 12 view .LVU1803
 5690 0538 0CBF     		ite	eq
 5691 053a 2E22     		moveq	r2, #46
 5692 053c 2C22     		movne	r2, #44
 5693 053e 04F8012B 		strb	r2, [r4], #1
 5694              	.LVL635:
 5695              	.L546:
 295:src/display.c ****   } else {
 5696              		.loc 1 295 12 view .LVU1804
 5697              	.LBE395:
 5698              	.LBE394:
2286:src/display.c **** 	  if (c == '.') {
 5699              		.loc 1 2286 53 is_stmt 1 view .LVU1805
2286:src/display.c **** 	  if (c == '.') {
 5700              		.loc 1 2286 12 view .LVU1806
2286:src/display.c **** 	  if (c == '.') {
 5701              		.loc 1 2286 18 is_stmt 0 view .LVU1807
 5702 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5703              	.LVL636:
2286:src/display.c **** 	  if (c == '.') {
 5704              		.loc 1 2286 2 view .LVU1808
 5705 0546 0029     		cmp	r1, #0
 5706 0548 7FF4CAAE 		bne	.L552
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5707              		.loc 1 2306 2 is_stmt 1 view .LVU1809
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5708              		.loc 1 2306 5 is_stmt 0 view .LVU1810
 5709 054c B9F1000F 		cmp	r9, #0
 5710 0550 3FF4DDAE 		beq	.L553
 5711              	.LVL637:
 5712              	.L671:
2307:src/display.c **** #endif
 5713              		.loc 1 2307 4 is_stmt 1 view .LVU1811
 5714 0554 3046     		mov	r0, r6
 5715 0556 2246     		mov	r2, r4
 5716 0558 0021     		movs	r1, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 191


 5717              	.LVL638:
2307:src/display.c **** #endif
 5718              		.loc 1 2307 4 is_stmt 0 view .LVU1812
 5719 055a FFF7FEFF 		bl	set_exp
 5720              	.LVL639:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5721              		.loc 1 2309 2 is_stmt 1 view .LVU1813
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5722              		.loc 1 2309 5 is_stmt 0 view .LVU1814
 5723 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5724 0562 2E2B     		cmp	r3, #46
 5725 0564 7FF4D8AE 		bne	.L554
 5726              	.L672:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5727              		.loc 1 2309 21 discriminator 1 view .LVU1815
 5728 0568 002C     		cmp	r4, #0
 5729 056a 7FF4D5AE 		bne	.L554
2310:src/display.c **** 	*display_digits = odig;
 5730              		.loc 1 2310 4 is_stmt 1 view .LVU1816
 5731              	.LVL640:
 5732              	.LBB397:
 5733              	.LBI397:
 293:src/display.c ****   if (res) {
 5734              		.loc 1 293 14 view .LVU1817
 5735              	.LBB398:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5736              		.loc 1 294 3 view .LVU1818
 5737              	.LBE398:
 5738              	.LBE397:
2310:src/display.c **** 	*display_digits = odig;
 5739              		.loc 1 2310 33 is_stmt 0 view .LVU1819
 5740 056e 019B     		ldr	r3, [sp, #4]
 5741 0570 1868     		ldr	r0, [r3]
2310:src/display.c **** 	*display_digits = odig;
 5742              		.loc 1 2310 4 view .LVU1820
 5743 0572 604B     		ldr	r3, .L682+8
2310:src/display.c **** 	*display_digits = odig;
 5744              		.loc 1 2310 33 view .LVU1821
 5745 0574 0138     		subs	r0, r0, #1
 5746              	.LBB400:
 5747              	.LBB399:
 5748 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5749 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5750 057c FFF7FEFF 		bl	set_decimal.part.0
 5751              	.LVL641:
 301:src/display.c **** }
 5752              		.loc 1 301 3 is_stmt 1 view .LVU1822
 301:src/display.c **** }
 5753              		.loc 1 301 10 is_stmt 0 view .LVU1823
 5754 0580 CAE6     		b	.L554
 5755              	.LVL642:
 5756              	.L670:
 301:src/display.c **** }
 5757              		.loc 1 301 10 view .LVU1824
 5758              	.LBE399:
 5759              	.LBE400:
2290:src/display.c **** 	  } else {
ARM GAS  /tmp/ccPzxiH4.s 			page 192


 5760              		.loc 1 2290 6 is_stmt 1 view .LVU1825
2290:src/display.c **** 	  } else {
 5761              		.loc 1 2290 12 is_stmt 0 view .LVU1826
 5762 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5763              	.LVL643:
 5764              	.LBB401:
 5765              	.LBI401:
 308:src/display.c ****   if (sep == SEP_NONE)
 5766              		.loc 1 308 14 is_stmt 1 view .LVU1827
 5767              	.LBB402:
 309:src/display.c ****     return res;
 5768              		.loc 1 309 3 view .LVU1828
 309:src/display.c ****     return res;
 5769              		.loc 1 309 6 is_stmt 0 view .LVU1829
 5770 0584 002A     		cmp	r2, #0
 5771 0586 DCD0     		beq	.L546
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5772              		.loc 1 311 3 is_stmt 1 view .LVU1830
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5773              		.loc 1 311 6 is_stmt 0 view .LVU1831
 5774 0588 002C     		cmp	r4, #0
 5775 058a 00F02781 		beq	.L548
 312:src/display.c ****     else *res++ = '.';
 5776              		.loc 1 312 5 is_stmt 1 view .LVU1832
 312:src/display.c ****     else *res++ = '.';
 5777              		.loc 1 312 8 is_stmt 0 view .LVU1833
 5778 058e 012A     		cmp	r2, #1
 312:src/display.c ****     else *res++ = '.';
 5779              		.loc 1 312 27 is_stmt 1 view .LVU1834
 5780              	.LVL644:
 313:src/display.c ****   } else {
 5781              		.loc 1 313 17 is_stmt 0 view .LVU1835
 5782 0590 16BF     		itet	ne
 5783 0592 2E22     		movne	r2, #46
 5784              	.LVL645:
 312:src/display.c ****     else *res++ = '.';
 5785              		.loc 1 312 34 view .LVU1836
 5786 0594 04F8011B 		strbeq	r1, [r4], #1
 5787              	.LVL646:
 313:src/display.c ****   } else {
 5788              		.loc 1 313 10 is_stmt 1 view .LVU1837
 313:src/display.c ****   } else {
 5789              		.loc 1 313 17 is_stmt 0 view .LVU1838
 5790 0598 04F8012B 		strbne	r2, [r4], #1
 5791              	.LVL647:
 313:src/display.c ****   } else {
 5792              		.loc 1 313 17 view .LVU1839
 5793 059c D1E7     		b	.L546
 5794              	.LVL648:
 5795              	.L544:
 313:src/display.c ****   } else {
 5796              		.loc 1 313 17 view .LVU1840
 5797              	.LBE402:
 5798              	.LBE401:
 5799              	.LBB404:
 5800              	.LBB396:
 5801 059e AAF10900 		sub	r0, r10, #9
ARM GAS  /tmp/ccPzxiH4.s 			page 193


 5802 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5803              	.LVL649:
 313:src/display.c ****   } else {
 5804              		.loc 1 313 17 view .LVU1841
 5805 05a6 544B     		ldr	r3, .L682+12
 5806 05a8 0446     		mov	r4, r0
 5807              	.LVL650:
 313:src/display.c ****   } else {
 5808              		.loc 1 313 17 view .LVU1842
 5809 05aa CAE7     		b	.L546
 5810              	.LVL651:
 5811              	.L550:
 313:src/display.c ****   } else {
 5812              		.loc 1 313 17 view .LVU1843
 5813              	.LBE396:
 5814              	.LBE404:
 5815              	.LBB405:
 5816              	.LBB392:
 341:src/display.c ****   return res;
 5817              		.loc 1 341 8 is_stmt 1 view .LVU1844
 5818 05ac 5046     		mov	r0, r10
 5819 05ae FFF7FEFF 		bl	set_dig
 5820              	.LVL652:
 341:src/display.c ****   return res;
 5821              		.loc 1 341 8 is_stmt 0 view .LVU1845
 5822 05b2 514B     		ldr	r3, .L682+12
 5823 05b4 9FE6     		b	.L551
 5824              	.LVL653:
 5825              	.L485:
 341:src/display.c ****   return res;
 5826              		.loc 1 341 8 view .LVU1846
 5827              	.LBE392:
 5828              	.LBE405:
2127:src/display.c **** 
 5829              		.loc 1 2127 2 is_stmt 1 view .LVU1847
2127:src/display.c **** 
 5830              		.loc 1 2127 45 view .LVU1848
2127:src/display.c **** 
 5831              		.loc 1 2127 2 is_stmt 0 view .LVU1849
 5832 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
 5833 05ba 0029     		cmp	r1, #0
 5834 05bc 7FF401AE 		bne	.L556
 5835              	.LVL654:
 5836              	.L492:
2192:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5837              		.loc 1 2192 4 is_stmt 1 view .LVU1850
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5838              		.loc 1 2193 4 view .LVU1851
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5839              		.loc 1 2193 7 is_stmt 0 view .LVU1852
 5840 05c0 002E     		cmp	r6, #0
 5841 05c2 C0F21281 		blt	.L515
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5842              		.loc 1 2193 7 view .LVU1853
 5843 05c6 731C     		adds	r3, r6, #1
2195:src/display.c **** 		*obp++ = ',';
 5844              		.loc 1 2195 31 view .LVU1854
ARM GAS  /tmp/ccPzxiH4.s 			page 194


 5845 05c8 DFF824E1 		ldr	lr, .L682+4
 5846 05cc 0593     		str	r3, [sp, #20]
 5847 05ce 0BEB030C 		add	ip, fp, r3
2129:src/display.c **** 	switch (mode) {
 5848              		.loc 1 2129 4 view .LVU1855
 5849 05d2 5D46     		mov	r5, fp
1934:src/display.c **** 	int odig = 0;
 5850              		.loc 1 1934 15 view .LVU1856
 5851 05d4 3846     		mov	r0, r7
 5852 05d6 05E0     		b	.L516
 5853              	.LVL655:
 5854              	.L519:
2196:src/display.c **** 	      *obp++ = *p++;
 5855              		.loc 1 2196 3 is_stmt 1 view .LVU1857
2195:src/display.c **** 		*obp++ = ',';
 5856              		.loc 1 2195 18 is_stmt 0 view .LVU1858
 5857 05d8 0229     		cmp	r1, #2
2196:src/display.c **** 	      *obp++ = *p++;
 5858              		.loc 1 2196 10 view .LVU1859
 5859 05da 05BF     		ittet	eq
 5860 05dc 2C23     		moveq	r3, #44
 5861 05de 4370     		strbeq	r3, [r0, #1]
2197:src/display.c **** 	      odig++;
 5862              		.loc 1 2197 12 view .LVU1860
 5863 05e0 0130     		addne	r0, r0, #1
 5864              	.LVL656:
2196:src/display.c **** 	      *obp++ = *p++;
 5865              		.loc 1 2196 7 view .LVU1861
 5866 05e2 0230     		addeq	r0, r0, #2
 5867              	.LVL657:
 5868              	.L516:
2197:src/display.c **** 	      odig++;
 5869              		.loc 1 2197 8 is_stmt 1 discriminator 2 view .LVU1862
2197:src/display.c **** 	      odig++;
 5870              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1863
 5871 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 5872              	.LVL658:
2195:src/display.c **** 		*obp++ = ',';
 5873              		.loc 1 2195 8 is_stmt 1 discriminator 2 view .LVU1864
2197:src/display.c **** 	      odig++;
 5874              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1865
 5875 05e8 0370     		strb	r3, [r0]
2198:src/display.c **** 	    }
 5876              		.loc 1 2198 8 is_stmt 1 discriminator 2 view .LVU1866
 5877              	.LVL659:
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5878              		.loc 1 2194 24 discriminator 2 view .LVU1867
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5879              		.loc 1 2194 16 discriminator 2 view .LVU1868
2195:src/display.c **** 		*obp++ = ',';
 5880              		.loc 1 2195 31 is_stmt 0 discriminator 2 view .LVU1869
 5881 05ea ABEB0503 		sub	r3, fp, r5
 5882 05ee 3344     		add	r3, r3, r6
 5883 05f0 8EFB0381 		smull	r8, r1, lr, r3
 5884 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 5885 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
ARM GAS  /tmp/ccPzxiH4.s 			page 195


 5886              		.loc 1 2194 6 discriminator 2 view .LVU1870
 5887 05fc AC45     		cmp	ip, r5
2195:src/display.c **** 		*obp++ = ',';
 5888              		.loc 1 2195 31 discriminator 2 view .LVU1871
 5889 05fe A3EB0101 		sub	r1, r3, r1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5890              		.loc 1 2194 6 discriminator 2 view .LVU1872
 5891 0602 E9D1     		bne	.L519
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5892              		.loc 1 2200 13 view .LVU1873
 5893 0604 2E23     		movs	r3, #46
2201:src/display.c **** 	      *obp++ = *p++;
 5894              		.loc 1 2201 6 view .LVU1874
 5895 0606 002A     		cmp	r2, #0
 5896 0608 059D     		ldr	r5, [sp, #20]
 5897              	.LVL660:
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5898              		.loc 1 2200 6 is_stmt 1 view .LVU1875
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5899              		.loc 1 2200 13 is_stmt 0 view .LVU1876
 5900 060a 4370     		strb	r3, [r0, #1]
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5901              		.loc 1 2200 10 view .LVU1877
 5902 060c 00F10208 		add	r8, r0, #2
 5903              	.LVL661:
2201:src/display.c **** 	      *obp++ = *p++;
 5904              		.loc 1 2201 6 is_stmt 1 view .LVU1878
2201:src/display.c **** 	      *obp++ = *p++;
 5905              		.loc 1 2201 16 view .LVU1879
2201:src/display.c **** 	      *obp++ = *p++;
 5906              		.loc 1 2201 6 is_stmt 0 view .LVU1880
 5907 0610 7FF778AF 		ble	.L504
 5908 0614 0130     		adds	r0, r0, #1
 5909 0616 0CEB0201 		add	r1, ip, r2
 5910              	.LVL662:
 5911              	.L520:
2202:src/display.c **** 	      odig++;
 5912              		.loc 1 2202 8 is_stmt 1 discriminator 4 view .LVU1881
2202:src/display.c **** 	      odig++;
 5913              		.loc 1 2202 15 is_stmt 0 discriminator 4 view .LVU1882
 5914 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5915              	.LVL663:
2202:src/display.c **** 	      odig++;
 5916              		.loc 1 2202 15 discriminator 4 view .LVU1883
 5917 061e 00F8013F 		strb	r3, [r0, #1]!
2203:src/display.c **** 	    }
 5918              		.loc 1 2203 8 is_stmt 1 discriminator 4 view .LVU1884
2201:src/display.c **** 	      *obp++ = *p++;
 5919              		.loc 1 2201 43 discriminator 4 view .LVU1885
2201:src/display.c **** 	      *obp++ = *p++;
 5920              		.loc 1 2201 16 discriminator 4 view .LVU1886
2201:src/display.c **** 	      *obp++ = *p++;
 5921              		.loc 1 2201 6 is_stmt 0 discriminator 4 view .LVU1887
 5922 0622 8C45     		cmp	ip, r1
 5923 0624 F9D1     		bne	.L520
 5924 0626 059B     		ldr	r3, [sp, #20]
 5925 0628 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccPzxiH4.s 			page 196


 5926 062a 9044     		add	r8, r8, r2
 5927              	.LVL664:
2201:src/display.c **** 	      *obp++ = *p++;
 5928              		.loc 1 2201 6 discriminator 4 view .LVU1888
 5929 062c 1D46     		mov	r5, r3
 5930 062e 69E7     		b	.L504
 5931              	.LVL665:
 5932              	.L657:
1997:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5933              		.loc 1 1997 4 is_stmt 1 view .LVU1889
 5934 0630 324A     		ldr	r2, .L682+16
 5935 0632 5146     		mov	r1, r10
 5936 0634 5046     		mov	r0, r10
 5937 0636 FFF7FEFF 		bl	decNumberNormalize
 5938              	.LVL666:
1998:src/display.c **** 	  z->exponent = 0;
 5939              		.loc 1 1998 4 view .LVU1890
1998:src/display.c **** 	  z->exponent = 0;
 5940              		.loc 1 1998 22 is_stmt 0 view .LVU1891
 5941 063a DAE90023 		ldrd	r2, r3, [r10]
 5942 063e 03EB0208 		add	r8, r3, r2
1999:src/display.c **** 	}
 5943              		.loc 1 1999 16 view .LVU1892
 5944 0642 CAF80490 		str	r9, [r10, #4]
1998:src/display.c **** 	  z->exponent = 0;
 5945              		.loc 1 1998 8 view .LVU1893
 5946 0646 08F1FF38 		add	r8, r8, #-1
 5947              	.LVL667:
1999:src/display.c **** 	}
 5948              		.loc 1 1999 4 is_stmt 1 view .LVU1894
 5949 064a F7E4     		b	.L435
 5950              	.LVL668:
 5951              	.L666:
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5952              		.loc 1 2087 6 view .LVU1895
2088:src/display.c **** 	      *p++ = *q++;
 5953              		.loc 1 2088 13 is_stmt 0 view .LVU1896
 5954 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5955              		.loc 1 2088 12 view .LVU1897
 5956 0650 A3F13002 		sub	r2, r3, #48
 5957 0654 092A     		cmp	r2, #9
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5958              		.loc 1 2087 7 view .LVU1898
 5959 0656 08F10108 		add	r8, r8, #1
 5960              	.LVL669:
2088:src/display.c **** 	      *p++ = *q++;
 5961              		.loc 1 2088 6 is_stmt 1 view .LVU1899
2088:src/display.c **** 	      *p++ = *q++;
 5962              		.loc 1 2088 12 view .LVU1900
 5963 065a 3FF679AD 		bhi	.L465
 5964              	.LVL670:
 5965              	.L470:
2089:src/display.c **** 	  }
 5966              		.loc 1 2089 8 view .LVU1901
2089:src/display.c **** 	  }
 5967              		.loc 1 2089 13 is_stmt 0 view .LVU1902
ARM GAS  /tmp/ccPzxiH4.s 			page 197


 5968 065e 01F8013B 		strb	r3, [r1], #1
 5969              	.LVL671:
2088:src/display.c **** 	      *p++ = *q++;
 5970              		.loc 1 2088 12 is_stmt 1 view .LVU1903
2088:src/display.c **** 	      *p++ = *q++;
 5971              		.loc 1 2088 13 is_stmt 0 view .LVU1904
 5972 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5973              		.loc 1 2088 12 view .LVU1905
 5974 0666 A3F13002 		sub	r2, r3, #48
 5975 066a 092A     		cmp	r2, #9
 5976 066c F7D9     		bls	.L470
 5977 066e 6FE5     		b	.L465
 5978              	.LVL672:
 5979              	.L664:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5980              		.loc 1 2071 4 is_stmt 1 view .LVU1906
1954:src/display.c **** 	int trimzeros = 0;
 5981              		.loc 1 1954 6 is_stmt 0 view .LVU1907
 5982 0670 0022     		movs	r2, #0
 5983 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5984 0676 0392     		str	r2, [sp, #12]
2071:src/display.c **** 	for (; *q == '0'; q++);
 5985              		.loc 1 2071 5 view .LVU1908
 5986 0678 08F10108 		add	r8, r8, #1
 5987              	.LVL673:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5988              		.loc 1 2071 5 view .LVU1909
 5989 067c 3BE5     		b	.L460
 5990              	.LVL674:
 5991              	.L658:
2005:src/display.c **** 	    x[0] = '-';
 5992              		.loc 1 2005 34 discriminator 1 view .LVU1910
 5993 067e 6B20     		movs	r0, #107
 5994 0680 FFF7FEFF 		bl	get_user_flag
 5995              	.LVL675:
2005:src/display.c **** 	    x[0] = '-';
 5996              		.loc 1 2005 31 discriminator 1 view .LVU1911
 5997 0684 0028     		cmp	r0, #0
 5998 0686 3FF4EAAC 		beq	.L437
2006:src/display.c **** 	    x[1] = '0';
 5999              		.loc 1 2006 6 is_stmt 1 view .LVU1912
2007:src/display.c **** 	  } else
 6000              		.loc 1 2007 6 view .LVU1913
2006:src/display.c **** 	    x[1] = '0';
 6001              		.loc 1 2006 11 is_stmt 0 view .LVU1914
 6002 068a 43F22D03 		movw	r3, #12333
 6003 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
2007:src/display.c **** 	  } else
 6004              		.loc 1 2007 11 view .LVU1915
 6005 0692 E7E4     		b	.L438
 6006              	.LVL676:
 6007              	.L662:
2064:src/display.c **** 	  CLR_MANT_SIGN;
 6008              		.loc 1 2064 4 is_stmt 1 view .LVU1916
 6009              	.LBB406:
 6010              	.LBI406:
ARM GAS  /tmp/ccPzxiH4.s 			page 198


 259:src/display.c **** {
 6011              		.loc 1 259 13 view .LVU1917
 6012              	.LBB407:
 261:src/display.c **** }
 6013              		.loc 1 261 3 view .LVU1918
 6014 0694 8220     		movs	r0, #130
 6015 0696 FFF7FEFF 		bl	clr_dot
 6016              	.LVL677:
 6017              	.LBE407:
 6018              	.LBE406:
2065:src/display.c **** 	}
 6019              		.loc 1 2065 4 view .LVU1919
 6020              	.LBB408:
 6021              	.LBI408:
 249:src/display.c **** {
 6022              		.loc 1 249 13 view .LVU1920
 6023              	.LBB409:
 251:src/display.c **** }
 6024              		.loc 1 251 3 view .LVU1921
 6025 069a 8120     		movs	r0, #129
 6026 069c FFF7FEFF 		bl	clr_dot
 6027              	.LVL678:
 252:src/display.c **** 
 6028              		.loc 1 252 1 is_stmt 0 view .LVU1922
 6029 06a0 1FE5     		b	.L458
 6030              	.LVL679:
 6031              	.L453:
 252:src/display.c **** 
 6032              		.loc 1 252 1 view .LVU1923
 6033              	.LBE409:
 6034              	.LBE408:
 6035              	.LBB410:
2026:src/display.c **** 
 6036              		.loc 1 2026 4 is_stmt 1 view .LVU1924
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6037              		.loc 1 2028 4 view .LVU1925
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6038              		.loc 1 2028 11 is_stmt 0 view .LVU1926
 6039 06a2 2A46     		mov	r2, r5
 6040 06a4 07A9     		add	r1, sp, #28
 6041 06a6 5046     		mov	r0, r10
 6042 06a8 FFF7FEFF 		bl	std_round_fix
 6043              	.LVL680:
 6044              	.LBE410:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6045              		.loc 1 1955 6 view .LVU1927
 6046 06ac 0023     		movs	r3, #0
 6047              	.LBB411:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6048              		.loc 1 2028 11 view .LVU1928
 6049 06ae 0546     		mov	r5, r0
 6050              	.LVL681:
2029:src/display.c **** 	    // allow zeros to be trimmed
 6051              		.loc 1 2029 4 is_stmt 1 view .LVU1929
 6052              	.LBE411:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6053              		.loc 1 1955 6 is_stmt 0 view .LVU1930
ARM GAS  /tmp/ccPzxiH4.s 			page 199


 6054 06b0 0493     		str	r3, [sp, #16]
 6055 06b2 F0E4     		b	.L559
 6056              	.LVL682:
 6057              	.L668:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6058              		.loc 1 2265 72 discriminator 2 view .LVU1931
 6059 06b4 06F2E732 		addw	r2, r6, #999
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6060              		.loc 1 2265 58 discriminator 2 view .LVU1932
 6061 06b8 40F2CE73 		movw	r3, #1998
 6062 06bc 9A42     		cmp	r2, r3
 6063 06be 7FF6EBAD 		bls	.L536
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6064              		.loc 1 2266 4 is_stmt 1 view .LVU1933
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6065              		.loc 1 2266 20 is_stmt 0 view .LVU1934
 6066 06c2 019A     		ldr	r2, [sp, #4]
 6067 06c4 0A23     		movs	r3, #10
2267:src/display.c **** 	  return;
 6068              		.loc 1 2267 4 view .LVU1935
 6069 06c6 2146     		mov	r1, r4
 6070 06c8 5046     		mov	r0, r10
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6071              		.loc 1 2266 20 view .LVU1936
 6072 06ca 1360     		str	r3, [r2]
2267:src/display.c **** 	  return;
 6073              		.loc 1 2267 4 is_stmt 1 view .LVU1937
 6074 06cc FFF7FEFF 		bl	set_x_dn
 6075              	.LVL683:
2268:src/display.c **** 	}
 6076              		.loc 1 2268 4 view .LVU1938
 6077 06d0 24E6     		b	.L428
 6078              	.LVL684:
 6079              	.L539:
2280:src/display.c **** 	      SET_MANT_SIGN;
 6080              		.loc 1 2280 6 view .LVU1939
2280:src/display.c **** 	      SET_MANT_SIGN;
 6081              		.loc 1 2280 9 is_stmt 0 view .LVU1940
 6082 06d2 BAF1000F 		cmp	r10, #0
 6083 06d6 40F00781 		bne	.L542
2281:src/display.c **** 	    else
 6084              		.loc 1 2281 8 is_stmt 1 view .LVU1941
 6085              	.LBB412:
 6086              	.LBI412:
 244:src/display.c **** {
 6087              		.loc 1 244 13 view .LVU1942
 6088              	.LBB413:
 246:src/display.c **** }
 6089              		.loc 1 246 3 view .LVU1943
 6090 06da 8120     		movs	r0, #129
 6091 06dc FFF7FEFF 		bl	set_dot
 6092              	.LVL685:
 246:src/display.c **** }
 6093              		.loc 1 246 3 is_stmt 0 view .LVU1944
 6094              	.LBE413:
 6095              	.LBE412:
2286:src/display.c **** 	  if (c == '.') {
ARM GAS  /tmp/ccPzxiH4.s 			page 200


 6096              		.loc 1 2286 12 is_stmt 1 view .LVU1945
2286:src/display.c **** 	  if (c == '.') {
 6097              		.loc 1 2286 18 is_stmt 0 view .LVU1946
 6098 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6099              	.LVL686:
2286:src/display.c **** 	  if (c == '.') {
 6100              		.loc 1 2286 2 view .LVU1947
 6101 06e4 0029     		cmp	r1, #0
 6102 06e6 7FF4F8AD 		bne	.L541
 6103 06ea 0CE6     		b	.L540
 6104              	.L683:
 6105              		.align	2
 6106              	.L682:
 6107 06ec 00000000 		.word	main_ram
 6108 06f0 56555555 		.word	1431655766
 6109 06f4 00000000 		.word	.LANCHOR1
 6110 06f8 00000000 		.word	.LANCHOR0
 6111 06fc 00000000 		.word	Ctx
 6112              	.LVL687:
 6113              	.L659:
2014:src/display.c **** 	  return;
 6114              		.loc 1 2014 4 is_stmt 1 view .LVU1948
 6115              	.LBB414:
 6116              	.LBI414:
1802:src/display.c **** 	const int dbl = is_dblmode();
 6117              		.loc 1 1802 19 view .LVU1949
 6118              	.LBB415:
1803:src/display.c **** 	char *p;
 6119              		.loc 1 1803 2 view .LVU1950
1803:src/display.c **** 	char *p;
 6120              		.loc 1 1803 18 is_stmt 0 view .LVU1951
 6121 0700 FFF7FEFF 		bl	is_dblmode
 6122              	.LVL688:
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6123              		.loc 1 1819 5 view .LVU1952
 6124 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6125 0708 2D2B     		cmp	r3, #45
1803:src/display.c **** 	char *p;
 6126              		.loc 1 1803 18 view .LVU1953
 6127 070a 0446     		mov	r4, r0
 6128              	.LVL689:
1804:src/display.c **** 	int i, j;
 6129              		.loc 1 1804 2 is_stmt 1 view .LVU1954
1805:src/display.c **** 	char *upper_str;
 6130              		.loc 1 1805 2 view .LVU1955
1806:src/display.c **** 	enum separator_modes separator_mode;
 6131              		.loc 1 1806 2 view .LVU1956
1807:src/display.c **** 	char decimal_mark;
 6132              		.loc 1 1807 2 view .LVU1957
1808:src/display.c **** 	char thousands_sep;
 6133              		.loc 1 1808 2 view .LVU1958
1809:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6134              		.loc 1 1809 2 view .LVU1959
1815:src/display.c **** #endif
 6135              		.loc 1 1815 2 view .LVU1960
1817:src/display.c **** 
 6136              		.loc 1 1817 2 view .LVU1961
ARM GAS  /tmp/ccPzxiH4.s 			page 201


1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6137              		.loc 1 1819 2 view .LVU1962
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6138              		.loc 1 1819 5 is_stmt 0 view .LVU1963
 6139 070c 00F01681 		beq	.L676
1832:src/display.c **** 
 6140              		.loc 1 1832 16 view .LVU1964
 6141 0710 4FF0000A 		mov	r10, #0
 6142              	.LVL690:
 6143              	.L440:
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6144              		.loc 1 1834 2 is_stmt 1 view .LVU1965
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6145              		.loc 1 1834 6 is_stmt 0 view .LVU1966
 6146 0714 0021     		movs	r1, #0
 6147 0716 3846     		mov	r0, r7
 6148 0718 FFF7FEFF 		bl	find_char
 6149              	.LVL691:
1835:src/display.c **** 
 6150              		.loc 1 1835 2 is_stmt 1 view .LVU1967
1835:src/display.c **** 
 6151              		.loc 1 1835 23 is_stmt 0 view .LVU1968
 6152 071c C21B     		subs	r2, r0, r7
1835:src/display.c **** 
 6153              		.loc 1 1835 2 view .LVU1969
 6154 071e C2F12202 		rsb	r2, r2, #34
 6155 0722 3021     		movs	r1, #48
 6156 0724 FFF7FEFF 		bl	xset
 6157              	.LVL692:
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6158              		.loc 1 1837 2 is_stmt 1 view .LVU1970
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6159              		.loc 1 1837 18 is_stmt 0 view .LVU1971
 6160 0728 A74A     		ldr	r2, .L684
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6161              		.loc 1 1848 6 view .LVU1972
 6162 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6163              		.loc 1 1837 5 view .LVU1973
 6164 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1845:src/display.c **** 	}
 6165              		.loc 1 1845 18 view .LVU1974
 6166 072e 002A     		cmp	r2, #0
 6167 0730 15BF     		itete	ne
 6168 0732 4FF0020B 		movne	fp, #2
 6169 0736 2C26     		moveq	r6, #44
 6170 0738 2E26     		movne	r6, #46
 6171              	.LVL693:
1845:src/display.c **** 	}
 6172              		.loc 1 1845 18 view .LVU1975
 6173 073a 2E25     		moveq	r5, #46
 6174              	.LVL694:
1845:src/display.c **** 	}
 6175              		.loc 1 1845 18 view .LVU1976
 6176 073c 18BF     		it	ne
 6177 073e 2C25     		movne	r5, #44
 6178              	.LVL695:
ARM GAS  /tmp/ccPzxiH4.s 			page 202


1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6179              		.loc 1 1848 2 is_stmt 1 view .LVU1977
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6180              		.loc 1 1848 5 is_stmt 0 view .LVU1978
 6181 0740 13F0380F 		tst	r3, #56
 6182 0744 40F0D680 		bne	.L677
1875:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6183              		.loc 1 1875 4 is_stmt 1 view .LVU1979
 6184              	.LVL696:
1876:src/display.c **** 	  x[1] = decimal_mark;
 6185              		.loc 1 1876 4 view .LVU1980
 6186 0748 1022     		movs	r2, #16
 6187 074a 791C     		adds	r1, r7, #1
 6188 074c B81C     		adds	r0, r7, #2
 6189 074e FFF7FEFF 		bl	xcopy
 6190              	.LVL697:
1877:src/display.c **** 	  if (grouping) {
 6191              		.loc 1 1877 4 view .LVU1981
1879:src/display.c **** 	    x[5] = thousands_sep;
 6192              		.loc 1 1879 6 is_stmt 0 view .LVU1982
 6193 0752 0D22     		movs	r2, #13
 6194 0754 791D     		adds	r1, r7, #5
 6195 0756 B81D     		adds	r0, r7, #6
1877:src/display.c **** 	  if (grouping) {
 6196              		.loc 1 1877 9 view .LVU1983
 6197 0758 7D70     		strb	r5, [r7, #1]
1878:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6198              		.loc 1 1878 4 is_stmt 1 view .LVU1984
1879:src/display.c **** 	    x[5] = thousands_sep;
 6199              		.loc 1 1879 6 view .LVU1985
 6200 075a FFF7FEFF 		bl	xcopy
 6201              	.LVL698:
1880:src/display.c **** 	    x += 9;
 6202              		.loc 1 1880 6 view .LVU1986
1881:src/display.c **** 	  }
 6203              		.loc 1 1881 8 is_stmt 0 view .LVU1987
 6204 075e 07F10905 		add	r5, r7, #9
 6205              	.LVL699:
1880:src/display.c **** 	    x += 9;
 6206              		.loc 1 1880 11 view .LVU1988
 6207 0762 7E71     		strb	r6, [r7, #5]
1881:src/display.c **** 	  }
 6208              		.loc 1 1881 6 is_stmt 1 view .LVU1989
 6209              	.LVL700:
1884:src/display.c **** 	    if (exp < 0) {
 6210              		.loc 1 1884 4 view .LVU1990
1884:src/display.c **** 	    if (exp < 0) {
 6211              		.loc 1 1884 7 is_stmt 0 view .LVU1991
 6212 0764 002C     		cmp	r4, #0
 6213 0766 00F0E780 		beq	.L444
1885:src/display.c **** 	      x[9] = '-';
 6214              		.loc 1 1885 6 is_stmt 1 view .LVU1992
1885:src/display.c **** 	      x[9] = '-';
 6215              		.loc 1 1885 9 is_stmt 0 view .LVU1993
 6216 076a B8F1000F 		cmp	r8, #0
1886:src/display.c **** 	      exp = -exp;
 6217              		.loc 1 1886 8 is_stmt 1 view .LVU1994
ARM GAS  /tmp/ccPzxiH4.s 			page 203


1887:src/display.c **** 	    }
 6218              		.loc 1 1887 8 view .LVU1995
1891:src/display.c **** 	    x[10] = '0' + j;
 6219              		.loc 1 1891 8 is_stmt 0 view .LVU1996
 6220 076e 974B     		ldr	r3, .L684+4
1893:src/display.c **** 	  }
 6221              		.loc 1 1893 18 view .LVU1997
 6222 0770 9749     		ldr	r1, .L684+8
1886:src/display.c **** 	      exp = -exp;
 6223              		.loc 1 1886 13 view .LVU1998
 6224 0772 B6BF     		itet	lt
 6225 0774 2D22     		movlt	r2, #45
1890:src/display.c **** 	    j = exp / 1000;
 6226              		.loc 1 1890 13 view .LVU1999
 6227 0776 2022     		movge	r2, #32
1887:src/display.c **** 	    }
 6228              		.loc 1 1887 12 view .LVU2000
 6229 0778 C8F10008 		rsblt	r8, r8, #0
 6230              	.LVL701:
1887:src/display.c **** 	    }
 6231              		.loc 1 1887 12 view .LVU2001
 6232 077c BA74     		strb	r2, [r7, #18]
1891:src/display.c **** 	    x[10] = '0' + j;
 6233              		.loc 1 1891 6 is_stmt 1 view .LVU2002
1891:src/display.c **** 	    x[10] = '0' + j;
 6234              		.loc 1 1891 8 is_stmt 0 view .LVU2003
 6235 077e A3FB0823 		umull	r2, r3, r3, r8
 6236 0782 9B09     		lsrs	r3, r3, #6
 6237              	.LVL702:
1892:src/display.c **** 	    exp -= 1000 * j;
 6238              		.loc 1 1892 6 is_stmt 1 view .LVU2004
1892:src/display.c **** 	    exp -= 1000 * j;
 6239              		.loc 1 1892 18 is_stmt 0 view .LVU2005
 6240 0784 03F13002 		add	r2, r3, #48
1893:src/display.c **** 	  }
 6241              		.loc 1 1893 10 view .LVU2006
 6242 0788 01FB0388 		mla	r8, r1, r3, r8
 6243              	.LVL703:
1892:src/display.c **** 	    exp -= 1000 * j;
 6244              		.loc 1 1892 12 view .LVU2007
 6245 078c FA74     		strb	r2, [r7, #19]
1893:src/display.c **** 	  }
 6246              		.loc 1 1893 6 is_stmt 1 view .LVU2008
 6247              	.LVL704:
 6248              	.L446:
1899:src/display.c **** 	  *x = 0;
 6249              		.loc 1 1899 4 view .LVU2009
 6250 078e 0B22     		movs	r2, #11
 6251 0790 2946     		mov	r1, r5
 6252 0792 07F10A00 		add	r0, r7, #10
 6253 0796 FFF7FEFF 		bl	xcopy
 6254              	.LVL705:
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6255              		.loc 1 1900 4 view .LVU2010
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6256              		.loc 1 1900 7 is_stmt 0 view .LVU2011
 6257 079a 0022     		movs	r2, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 204


1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6258              		.loc 1 1901 4 view .LVU2012
 6259 079c 4046     		mov	r0, r8
 6260 079e 0121     		movs	r1, #1
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6261              		.loc 1 1900 7 view .LVU2013
 6262 07a0 7A72     		strb	r2, [r7, #9]
1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6263              		.loc 1 1901 4 is_stmt 1 view .LVU2014
 6264 07a2 FFF7FEFF 		bl	set_exp
 6265              	.LVL706:
1902:src/display.c **** 	}
 6266              		.loc 1 1902 4 view .LVU2015
1902:src/display.c **** 	}
 6267              		.loc 1 1902 4 is_stmt 0 view .LVU2016
 6268 07a6 A7EB0A0A 		sub	r10, r7, r10
 6269              	.LVL707:
1902:src/display.c **** 	}
 6270              		.loc 1 1902 6 view .LVU2017
 6271 07aa 0924     		movs	r4, #9
 6272              	.LVL708:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6273              		.loc 1 1905 11 is_stmt 1 view .LVU2018
 6274              	.L447:
1906:src/display.c **** 	  }
 6275              		.loc 1 1906 6 view .LVU2019
 6276              	.LBB416:
 6277              	.LBI416:
 308:src/display.c ****   if (sep == SEP_NONE)
 6278              		.loc 1 308 14 view .LVU2020
 6279              	.LBB417:
 309:src/display.c ****     return res;
 6280              		.loc 1 309 3 view .LVU2021
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6281              		.loc 1 311 3 view .LVU2022
 6282 07ac 2046     		mov	r0, r4
 6283 07ae 5946     		mov	r1, fp
 6284              	.LBE417:
 6285              	.LBE416:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6286              		.loc 1 1905 38 is_stmt 0 view .LVU2023
 6287 07b0 1B34     		adds	r4, r4, #27
 6288              	.LVL709:
 6289              	.LBB419:
 6290              	.LBB418:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6291              		.loc 1 1905 38 view .LVU2024
 6292 07b2 FFF7FEFF 		bl	set_separator.part.0
 6293              	.LVL710:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6294              		.loc 1 1905 38 view .LVU2025
 6295              	.LBE418:
 6296              	.LBE419:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6297              		.loc 1 1905 36 is_stmt 1 view .LVU2026
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6298              		.loc 1 1905 11 view .LVU2027
ARM GAS  /tmp/ccPzxiH4.s 			page 205


1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6299              		.loc 1 1905 4 is_stmt 0 view .LVU2028
 6300 07b6 512C     		cmp	r4, #81
 6301 07b8 F8DD     		ble	.L447
 6302 07ba 6C1E     		subs	r4, r5, #1
 6303              	.LVL711:
 6304              	.L449:
1911:src/display.c **** 
 6305              		.loc 1 1911 4 is_stmt 1 view .LVU2029
 6306 07bc 4846     		mov	r0, r9
 6307 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1910:src/display.c **** 	  set_dig(j, x[i]);
 6308              		.loc 1 1910 33 is_stmt 0 view .LVU2030
 6309 07c2 09F10909 		add	r9, r9, #9
 6310              	.LVL712:
1911:src/display.c **** 
 6311              		.loc 1 1911 4 view .LVU2031
 6312 07c6 FFF7FEFF 		bl	set_dig
 6313              	.LVL713:
1910:src/display.c **** 	  set_dig(j, x[i]);
 6314              		.loc 1 1910 26 is_stmt 1 view .LVU2032
1910:src/display.c **** 	  set_dig(j, x[i]);
 6315              		.loc 1 1910 18 view .LVU2033
1910:src/display.c **** 	  set_dig(j, x[i]);
 6316              		.loc 1 1910 2 is_stmt 0 view .LVU2034
 6317 07ca B9F16C0F 		cmp	r9, #108
 6318 07ce F5D1     		bne	.L449
1913:src/display.c **** 	set_status(upper_str - negative);
 6319              		.loc 1 1913 2 is_stmt 1 view .LVU2035
1913:src/display.c **** 	set_status(upper_str - negative);
 6320              		.loc 1 1913 5 is_stmt 0 view .LVU2036
 6321 07d0 0023     		movs	r3, #0
1914:src/display.c ****       }
 6322              		.loc 1 1914 2 view .LVU2037
 6323 07d2 5046     		mov	r0, r10
1913:src/display.c **** 	set_status(upper_str - negative);
 6324              		.loc 1 1913 5 view .LVU2038
 6325 07d4 2B70     		strb	r3, [r5]
1914:src/display.c ****       }
 6326              		.loc 1 1914 2 is_stmt 1 view .LVU2039
 6327 07d6 FFF7FEFF 		bl	set_status
 6328              	.LVL714:
1915:src/display.c **** 
 6329              		.loc 1 1915 7 is_stmt 0 view .LVU2040
 6330 07da 9FE5     		b	.L428
 6331              	.LVL715:
 6332              	.L548:
1915:src/display.c **** 
 6333              		.loc 1 1915 7 view .LVU2041
 6334              	.LBE415:
 6335              	.LBE414:
 6336              	.LBB424:
 6337              	.LBB403:
 6338 07dc 1146     		mov	r1, r2
 6339              	.LVL716:
1915:src/display.c **** 
 6340              		.loc 1 1915 7 view .LVU2042
ARM GAS  /tmp/ccPzxiH4.s 			page 206


 6341 07de 5046     		mov	r0, r10
 6342 07e0 FFF7FEFF 		bl	set_separator.part.0
 6343              	.LVL717:
1915:src/display.c **** 
 6344              		.loc 1 1915 7 view .LVU2043
 6345 07e4 7B4B     		ldr	r3, .L684+12
 6346 07e6 0446     		mov	r4, r0
 6347              	.LVL718:
1915:src/display.c **** 
 6348              		.loc 1 1915 7 view .LVU2044
 6349 07e8 ABE6     		b	.L546
 6350              	.LVL719:
 6351              	.L515:
1915:src/display.c **** 
 6352              		.loc 1 1915 7 view .LVU2045
 6353              	.LBE403:
 6354              	.LBE424:
2206:src/display.c **** 	    odig++;
 6355              		.loc 1 2206 6 is_stmt 1 view .LVU2046
2207:src/display.c **** 	    *obp++ = '.';
 6356              		.loc 1 2207 6 view .LVU2047
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6357              		.loc 1 2208 6 view .LVU2048
2206:src/display.c **** 	    odig++;
 6358              		.loc 1 2206 13 is_stmt 0 view .LVU2049
 6359 07ea 42F63063 		movw	r3, #11824
 6360 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2209:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2209 6 is_stmt 1 view .LVU2050
 6362              	.LVL720:
2209:src/display.c **** 	      *obp++ = '0';
 6363              		.loc 1 2209 20 view .LVU2051
2209:src/display.c **** 	      *obp++ = '0';
 6364              		.loc 1 2209 6 is_stmt 0 view .LVU2052
 6365 07f2 731C     		adds	r3, r6, #1
 6366              	.LVL721:
2209:src/display.c **** 	      *obp++ = '0';
 6367              		.loc 1 2209 6 view .LVU2053
 6368 07f4 00F0DD80 		beq	.L678
 6369 07f8 C6F10102 		rsb	r2, r6, #1
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6370              		.loc 1 2208 10 view .LVU2054
 6371 07fc 0DF12600 		add	r0, sp, #38
 6372              	.LVL722:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6373              		.loc 1 2208 10 view .LVU2055
 6374 0800 079D     		ldr	r5, [sp, #28]
 6375 0802 3A44     		add	r2, r2, r7
 6376 0804 0346     		mov	r3, r0
 6377              	.LVL723:
2210:src/display.c **** 	      odig++;
 6378              		.loc 1 2210 15 view .LVU2056
 6379 0806 3021     		movs	r1, #48
 6380              	.LVL724:
 6381              	.L523:
2210:src/display.c **** 	      odig++;
 6382              		.loc 1 2210 8 is_stmt 1 discriminator 3 view .LVU2057
ARM GAS  /tmp/ccPzxiH4.s 			page 207


2210:src/display.c **** 	      odig++;
 6383              		.loc 1 2210 15 is_stmt 0 discriminator 3 view .LVU2058
 6384 0808 03F8011B 		strb	r1, [r3], #1
 6385              	.LVL725:
2211:src/display.c **** 	      dd--;
 6386              		.loc 1 2211 8 is_stmt 1 discriminator 3 view .LVU2059
2212:src/display.c **** 	    }
 6387              		.loc 1 2212 8 discriminator 3 view .LVU2060
2209:src/display.c **** 	      *obp++ = '0';
 6388              		.loc 1 2209 25 discriminator 3 view .LVU2061
2209:src/display.c **** 	      *obp++ = '0';
 6389              		.loc 1 2209 20 discriminator 3 view .LVU2062
2209:src/display.c **** 	      *obp++ = '0';
 6390              		.loc 1 2209 6 is_stmt 0 discriminator 3 view .LVU2063
 6391 080c 9342     		cmp	r3, r2
 6392 080e FBD1     		bne	.L523
 6393 0810 7319     		adds	r3, r6, r5
 6394              	.LVL726:
2209:src/display.c **** 	      *obp++ = '0';
 6395              		.loc 1 2209 6 discriminator 3 view .LVU2064
 6396 0812 6FEA0608 		mvn	r8, r6
 6397 0816 0133     		adds	r3, r3, #1
 6398 0818 8044     		add	r8, r8, r0
 6399 081a 7542     		rsbs	r5, r6, #0
 6400              	.L522:
 6401              	.LVL727:
2214:src/display.c **** 	      *obp++ = *p++;
 6402              		.loc 1 2214 12 is_stmt 1 view .LVU2065
2214:src/display.c **** 	      *obp++ = *p++;
 6403              		.loc 1 2214 15 is_stmt 0 view .LVU2066
 6404 081c 5A1E     		subs	r2, r3, #1
2214:src/display.c **** 	      *obp++ = *p++;
 6405              		.loc 1 2214 12 view .LVU2067
 6406 081e 002B     		cmp	r3, #0
2214:src/display.c **** 	      *obp++ = *p++;
 6407              		.loc 1 2214 15 view .LVU2068
 6408 0820 0792     		str	r2, [sp, #28]
2214:src/display.c **** 	      *obp++ = *p++;
 6409              		.loc 1 2214 12 view .LVU2069
 6410 0822 7FF76FAE 		ble	.L504
 6411 0826 4344     		add	r3, r3, r8
 6412 0828 581E     		subs	r0, r3, #1
 6413 082a 08F1FF38 		add	r8, r8, #-1
 6414              	.LVL728:
 6415              	.L524:
2215:src/display.c **** 	      odig++;
 6416              		.loc 1 2215 8 is_stmt 1 view .LVU2070
2215:src/display.c **** 	      odig++;
 6417              		.loc 1 2215 15 is_stmt 0 view .LVU2071
 6418 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6419              	.LVL729:
2215:src/display.c **** 	      odig++;
 6420              		.loc 1 2215 15 view .LVU2072
 6421 0832 08F8011F 		strb	r1, [r8, #1]!
2216:src/display.c **** 	    }
 6422              		.loc 1 2216 8 is_stmt 1 view .LVU2073
2214:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccPzxiH4.s 			page 208


 6423              		.loc 1 2214 12 view .LVU2074
 6424 0836 8045     		cmp	r8, r0
 6425 0838 F9D1     		bne	.L524
 6426              	.LVL730:
2214:src/display.c **** 	      *obp++ = *p++;
 6427              		.loc 1 2214 12 is_stmt 0 view .LVU2075
 6428 083a 681C     		adds	r0, r5, #1
 6429 083c 4FF0FF31 		mov	r1, #-1
 6430 0840 1518     		adds	r5, r2, r0
 6431 0842 9846     		mov	r8, r3
 6432 0844 0791     		str	r1, [sp, #28]
 6433 0846 5DE6     		b	.L504
 6434              	.LVL731:
 6435              	.L527:
2232:src/display.c **** 	    odig++;
 6436              		.loc 1 2232 6 is_stmt 1 view .LVU2076
2232:src/display.c **** 	    odig++;
 6437              		.loc 1 2232 13 is_stmt 0 view .LVU2077
 6438 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6439 084c 8DF82430 		strb	r3, [sp, #36]
2233:src/display.c **** 	    dd--;
 6440              		.loc 1 2233 6 is_stmt 1 view .LVU2078
 6441              	.LVL732:
2234:src/display.c **** 	    exp--;
 6442              		.loc 1 2234 6 view .LVU2079
2234:src/display.c **** 	    exp--;
 6443              		.loc 1 2234 8 is_stmt 0 view .LVU2080
 6444 0850 013A     		subs	r2, r2, #1
2235:src/display.c **** 	  case -2:
 6445              		.loc 1 2235 6 is_stmt 1 view .LVU2081
2235:src/display.c **** 	  case -2:
 6446              		.loc 1 2235 9 is_stmt 0 view .LVU2082
 6447 0852 013E     		subs	r6, r6, #1
 6448              	.LVL733:
2235:src/display.c **** 	  case -2:
 6449              		.loc 1 2235 9 view .LVU2083
 6450 0854 0325     		movs	r5, #3
2232:src/display.c **** 	    odig++;
 6451              		.loc 1 2232 17 view .LVU2084
 6452 0856 0DF1590B 		add	fp, sp, #89
 6453              	.LVL734:
2232:src/display.c **** 	    odig++;
 6454              		.loc 1 2232 10 view .LVU2085
 6455 085a 0DF12501 		add	r1, sp, #37
 6456              	.LVL735:
 6457              	.L530:
2238:src/display.c **** 	    odig++;
 6458              		.loc 1 2238 6 is_stmt 1 view .LVU2086
2238:src/display.c **** 	    odig++;
 6459              		.loc 1 2238 13 is_stmt 0 view .LVU2087
 6460 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6461              	.LVL736:
2238:src/display.c **** 	    odig++;
 6462              		.loc 1 2238 13 view .LVU2088
 6463 0862 01F8013B 		strb	r3, [r1], #1
 6464              	.LVL737:
2239:src/display.c **** 	    dd--;
ARM GAS  /tmp/ccPzxiH4.s 			page 209


 6465              		.loc 1 2239 6 is_stmt 1 view .LVU2089
2240:src/display.c **** 	    exp--;
 6466              		.loc 1 2240 6 view .LVU2090
2240:src/display.c **** 	    exp--;
 6467              		.loc 1 2240 8 is_stmt 0 view .LVU2091
 6468 0866 013A     		subs	r2, r2, #1
2241:src/display.c **** 	  case 0:
 6469              		.loc 1 2241 6 is_stmt 1 view .LVU2092
2241:src/display.c **** 	  case 0:
 6470              		.loc 1 2241 9 is_stmt 0 view .LVU2093
 6471 0868 013E     		subs	r6, r6, #1
 6472              	.LVL738:
2241:src/display.c **** 	  case 0:
 6473              		.loc 1 2241 9 view .LVU2094
 6474 086a 2CE6     		b	.L494
 6475              	.LVL739:
 6476              	.L529:
2241:src/display.c **** 	  case 0:
 6477              		.loc 1 2241 9 view .LVU2095
 6478 086c 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 6479              		.loc 1 2229 16 view .LVU2096
 6480 086e 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6481              		.loc 1 1934 15 view .LVU2097
 6482 0870 3946     		mov	r1, r7
 6483 0872 F4E7     		b	.L530
 6484              	.LVL740:
 6485              	.L475:
2097:src/display.c **** 	    /* We might have push the fixed decimals off the
 6486              		.loc 1 2097 6 is_stmt 1 view .LVU2098
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6487              		.loc 1 2101 6 view .LVU2099
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6488              		.loc 1 2101 9 is_stmt 0 view .LVU2100
 6489 0874 0299     		ldr	r1, [sp, #8]
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6490              		.loc 1 2101 23 view .LVU2101
 6491 0876 9319     		adds	r3, r2, r6
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6492              		.loc 1 2101 9 view .LVU2102
 6493 0878 9942     		cmp	r1, r3
2102:src/display.c **** 	  }
 6494              		.loc 1 2102 8 is_stmt 1 view .LVU2103
2102:src/display.c **** 	  }
 6495              		.loc 1 2102 30 is_stmt 0 view .LVU2104
 6496 087a DFBF     		itttt	le
 6497 087c 029B     		ldrle	r3, [sp, #8]
 6498 087e 03F1FF32 		addle	r2, r3, #-1
2102:src/display.c **** 	  }
 6499              		.loc 1 2102 35 view .LVU2105
 6500 0882 921B     		suble	r2, r2, r6
2102:src/display.c **** 	  }
 6501              		.loc 1 2102 11 view .LVU2106
 6502 0884 0792     		strle	r2, [sp, #28]
 6503 0886 3146     		mov	r1, r6
 6504 0888 6AE4     		b	.L472
ARM GAS  /tmp/ccPzxiH4.s 			page 210


 6505              	.LVL741:
 6506              	.L500:
2141:src/display.c **** 	      odig++;
 6507              		.loc 1 2141 8 is_stmt 1 view .LVU2107
2141:src/display.c **** 	      odig++;
 6508              		.loc 1 2141 15 is_stmt 0 view .LVU2108
 6509 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6510 088e 8DF82410 		strb	r1, [sp, #36]
2142:src/display.c **** 	      dd--;
 6511              		.loc 1 2142 8 is_stmt 1 view .LVU2109
 6512              	.LVL742:
2143:src/display.c **** 	      exp--;
 6513              		.loc 1 2143 8 view .LVU2110
2143:src/display.c **** 	      exp--;
 6514              		.loc 1 2143 10 is_stmt 0 view .LVU2111
 6515 0892 013A     		subs	r2, r2, #1
2144:src/display.c **** 	    case -2:
 6516              		.loc 1 2144 8 is_stmt 1 view .LVU2112
2144:src/display.c **** 	    case -2:
 6517              		.loc 1 2144 11 is_stmt 0 view .LVU2113
 6518 0894 013E     		subs	r6, r6, #1
 6519              	.LVL743:
2144:src/display.c **** 	    case -2:
 6520              		.loc 1 2144 11 view .LVU2114
 6521 0896 0325     		movs	r5, #3
2141:src/display.c **** 	      odig++;
 6522              		.loc 1 2141 19 view .LVU2115
 6523 0898 0DF1590B 		add	fp, sp, #89
 6524              	.LVL744:
2141:src/display.c **** 	      odig++;
 6525              		.loc 1 2141 12 view .LVU2116
 6526 089c 0DF12501 		add	r1, sp, #37
 6527              	.LVL745:
 6528              	.L503:
2147:src/display.c **** 	      odig++;
 6529              		.loc 1 2147 8 is_stmt 1 view .LVU2117
2147:src/display.c **** 	      odig++;
 6530              		.loc 1 2147 15 is_stmt 0 view .LVU2118
 6531 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6532              	.LVL746:
2147:src/display.c **** 	      odig++;
 6533              		.loc 1 2147 15 view .LVU2119
 6534 08a4 01F8010B 		strb	r0, [r1], #1
 6535              	.LVL747:
2148:src/display.c **** 	      dd--;
 6536              		.loc 1 2148 8 is_stmt 1 view .LVU2120
2149:src/display.c **** 	      exp--;
 6537              		.loc 1 2149 8 view .LVU2121
2150:src/display.c **** 	    case 0:
 6538              		.loc 1 2150 8 view .LVU2122
2149:src/display.c **** 	      exp--;
 6539              		.loc 1 2149 10 is_stmt 0 view .LVU2123
 6540 08a8 013A     		subs	r2, r2, #1
 6541 08aa 0792     		str	r2, [sp, #28]
2150:src/display.c **** 	    case 0:
 6542              		.loc 1 2150 11 view .LVU2124
 6543 08ac 013E     		subs	r6, r6, #1
ARM GAS  /tmp/ccPzxiH4.s 			page 211


 6544              	.LVL748:
 6545              	.L499:
2152:src/display.c **** 	    };
 6546              		.loc 1 2152 8 is_stmt 1 view .LVU2125
2153:src/display.c **** 	    *obp++ = *p++;
 6547              		.loc 1 2153 7 view .LVU2126
2154:src/display.c **** 	    odig++;
 6548              		.loc 1 2154 6 view .LVU2127
2154:src/display.c **** 	    odig++;
 6549              		.loc 1 2154 17 is_stmt 0 view .LVU2128
 6550 08ae 5A46     		mov	r2, fp
 6551              	.LVL749:
2154:src/display.c **** 	    odig++;
 6552              		.loc 1 2154 13 view .LVU2129
 6553 08b0 8846     		mov	r8, r1
 6554 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6555              	.LVL750:
2154:src/display.c **** 	    odig++;
 6556              		.loc 1 2154 13 view .LVU2130
 6557 08b6 08F8020B 		strb	r0, [r8], #2
2155:src/display.c **** 	    *obp++ = '.';
 6558              		.loc 1 2155 6 is_stmt 1 view .LVU2131
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6559              		.loc 1 2156 6 view .LVU2132
 6560              	.LVL751:
2157:src/display.c **** 	      *obp++ = *p++;
 6561              		.loc 1 2157 6 is_stmt 0 view .LVU2133
 6562 08ba 012B     		cmp	r3, #1
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6563              		.loc 1 2156 13 view .LVU2134
 6564 08bc 4FF02E00 		mov	r0, #46
 6565 08c0 4870     		strb	r0, [r1, #1]
2157:src/display.c **** 	      *obp++ = *p++;
 6566              		.loc 1 2157 6 is_stmt 1 view .LVU2135
 6567              	.LVL752:
2157:src/display.c **** 	      *obp++ = *p++;
 6568              		.loc 1 2157 16 view .LVU2136
2157:src/display.c **** 	      *obp++ = *p++;
 6569              		.loc 1 2157 6 is_stmt 0 view .LVU2137
 6570 08c2 32DD     		ble	.L574
2157:src/display.c **** 	      *obp++ = *p++;
 6571              		.loc 1 2157 6 view .LVU2138
 6572 08c4 0131     		adds	r1, r1, #1
 6573 08c6 9B44     		add	fp, fp, r3
 6574              	.LVL753:
 6575              	.L505:
2158:src/display.c **** 	      odig++;
 6576              		.loc 1 2158 8 is_stmt 1 discriminator 3 view .LVU2139
2158:src/display.c **** 	      odig++;
 6577              		.loc 1 2158 15 is_stmt 0 discriminator 3 view .LVU2140
 6578 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6579              	.LVL754:
2158:src/display.c **** 	      odig++;
 6580              		.loc 1 2158 15 discriminator 3 view .LVU2141
 6581 08cc 01F8010F 		strb	r0, [r1, #1]!
2159:src/display.c **** 	    }
 6582              		.loc 1 2159 8 is_stmt 1 discriminator 3 view .LVU2142
ARM GAS  /tmp/ccPzxiH4.s 			page 212


2157:src/display.c **** 	      *obp++ = *p++;
 6583              		.loc 1 2157 25 discriminator 3 view .LVU2143
2157:src/display.c **** 	      *obp++ = *p++;
 6584              		.loc 1 2157 16 discriminator 3 view .LVU2144
2157:src/display.c **** 	      *obp++ = *p++;
 6585              		.loc 1 2157 6 is_stmt 0 discriminator 3 view .LVU2145
 6586 08d0 5A45     		cmp	r2, fp
 6587 08d2 F9D1     		bne	.L505
 6588 08d4 013B     		subs	r3, r3, #1
 6589              	.LVL755:
2157:src/display.c **** 	      *obp++ = *p++;
 6590              		.loc 1 2157 6 discriminator 3 view .LVU2146
 6591 08d6 9844     		add	r8, r8, r3
 6592 08d8 1D44     		add	r5, r5, r3
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6593              		.loc 1 2161 15 view .LVU2147
 6594 08da 4FF00109 		mov	r9, #1
 6595 08de 11E6     		b	.L504
 6596              	.LVL756:
 6597              	.L502:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6598              		.loc 1 2161 15 view .LVU2148
 6599 08e0 079A     		ldr	r2, [sp, #28]
2138:src/display.c **** 	    case -1:
 6600              		.loc 1 2138 24 view .LVU2149
 6601 08e2 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6602              		.loc 1 1934 15 view .LVU2150
 6603 08e4 3946     		mov	r1, r7
 6604 08e6 DBE7     		b	.L503
 6605              	.LVL757:
 6606              	.L542:
2283:src/display.c **** 	  }
 6607              		.loc 1 2283 8 is_stmt 1 view .LVU2151
 6608 08e8 2D21     		movs	r1, #45
 6609 08ea AAF10900 		sub	r0, r10, #9
 6610 08ee FFF7FEFF 		bl	set_dig
 6611              	.LVL758:
 6612 08f2 ECE4     		b	.L538
 6613              	.LVL759:
 6614              	.L677:
 6615              	.LBB425:
 6616              	.LBB422:
 6617              	.LBB420:
1850:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6618              		.loc 1 1850 4 view .LVU2152
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6619              		.loc 1 1853 4 view .LVU2153
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6620              		.loc 1 1853 14 is_stmt 0 view .LVU2154
 6621 08f4 07F1030A 		add	r10, r7, #3
 6622              	.LVL760:
1854:src/display.c **** 	  if (grouping) {
 6623              		.loc 1 1854 4 is_stmt 1 view .LVU2155
 6624 08f8 3749     		ldr	r1, .L684+16
 6625 08fa 0D22     		movs	r2, #13
 6626 08fc 5046     		mov	r0, r10
ARM GAS  /tmp/ccPzxiH4.s 			page 213


 6627 08fe FFF7FEFF 		bl	xcopy
 6628              	.LVL761:
1855:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6629              		.loc 1 1855 4 view .LVU2156
1856:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6630              		.loc 1 1856 6 view .LVU2157
 6631 0902 1322     		movs	r2, #19
 6632 0904 B918     		adds	r1, r7, r2
 6633 0906 07F11400 		add	r0, r7, #20
 6634 090a FFF7FEFF 		bl	xcopy
 6635              	.LVL762:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6636              		.loc 1 1857 6 view .LVU2158
1858:src/display.c **** 	  }
 6637              		.loc 1 1858 8 is_stmt 0 view .LVU2159
 6638 090e 07F11705 		add	r5, r7, #23
 6639              	.LVL763:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6640              		.loc 1 1857 24 view .LVU2160
 6641 0912 FE74     		strb	r6, [r7, #19]
1858:src/display.c **** 	  }
 6642              		.loc 1 1858 6 is_stmt 1 view .LVU2161
 6643              	.LVL764:
1871:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6644              		.loc 1 1871 4 view .LVU2162
1872:src/display.c **** 	}
 6645              		.loc 1 1872 4 view .LVU2163
1872:src/display.c **** 	}
 6646              		.loc 1 1872 6 is_stmt 0 view .LVU2164
 6647 0914 1B24     		movs	r4, #27
 6648              	.LVL765:
1872:src/display.c **** 	}
 6649              		.loc 1 1872 6 view .LVU2165
 6650              	.LBE420:
 6651 0916 49E7     		b	.L447
 6652              	.LVL766:
 6653              	.L673:
1872:src/display.c **** 	}
 6654              		.loc 1 1872 6 view .LVU2166
 6655              	.LBE422:
 6656              	.LBE425:
1971:src/display.c **** 	      return;
 6657              		.loc 1 1971 8 is_stmt 1 view .LVU2167
 6658 0918 5046     		mov	r0, r10
 6659 091a FFF7FEFF 		bl	set_x_hms
 6660              	.LVL767:
1972:src/display.c **** 	    }
 6661              		.loc 1 1972 8 view .LVU2168
 6662 091e FDE4     		b	.L428
 6663              	.LVL768:
 6664              	.L572:
2133:src/display.c **** 	  if (count != *display_digits)
 6665              		.loc 1 2133 4 is_stmt 0 view .LVU2169
 6666 0920 029B     		ldr	r3, [sp, #8]
 6667 0922 72E4     		b	.L495
 6668              	.LVL769:
 6669              	.L573:
ARM GAS  /tmp/ccPzxiH4.s 			page 214


2138:src/display.c **** 	    case -1:
 6670              		.loc 1 2138 24 view .LVU2170
 6671 0924 0125     		movs	r5, #1
 6672 0926 3946     		mov	r1, r7
 6673 0928 C1E7     		b	.L499
 6674              	.LVL770:
 6675              	.L574:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6676              		.loc 1 2161 15 view .LVU2171
 6677 092a 4FF00109 		mov	r9, #1
 6678 092e E9E5     		b	.L504
 6679              	.LVL771:
 6680              	.L478:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6681              		.loc 1 2111 4 is_stmt 1 view .LVU2172
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6682              		.loc 1 2111 7 is_stmt 0 view .LVU2173
 6683 0930 5B45     		cmp	r3, fp
 6684 0932 7FF42FAC 		bne	.L557
 6685 0936 4DE5     		b	.L558
 6686              	.LVL772:
 6687              	.L444:
 6688              	.LBB426:
 6689              	.LBB423:
1896:src/display.c **** 	    x[10] = '\0';
 6690              		.loc 1 1896 6 is_stmt 1 view .LVU2174
1897:src/display.c **** 	  }
 6691              		.loc 1 1897 6 view .LVU2175
1896:src/display.c **** 	    x[10] = '\0';
 6692              		.loc 1 1896 11 is_stmt 0 view .LVU2176
 6693 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6694 093a 28E7     		b	.L446
 6695              	.LVL773:
 6696              	.L676:
 6697              	.LBB421:
1821:src/display.c **** 
 6698              		.loc 1 1821 4 is_stmt 1 view .LVU2177
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6699              		.loc 1 1823 4 view .LVU2178
 6700 093c 2222     		movs	r2, #34
 6701 093e 0DF12501 		add	r1, sp, #37
 6702 0942 0AA8     		add	r0, sp, #40
 6703              	.LVL774:
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6704              		.loc 1 1823 4 is_stmt 0 view .LVU2179
 6705 0944 FFF7FEFF 		bl	xcopy
 6706              	.LVL775:
1824:src/display.c **** 	  x += 4;
 6707              		.loc 1 1824 4 is_stmt 1 view .LVU2180
 6708 0948 3846     		mov	r0, r7
 6709 094a 2449     		ldr	r1, .L684+20
 6710 094c 0422     		movs	r2, #4
 6711 094e FFF7FEFF 		bl	xcopy
 6712              	.LVL776:
1825:src/display.c **** 	  negative = 4;
 6713              		.loc 1 1825 4 view .LVU2181
1826:src/display.c **** #else
ARM GAS  /tmp/ccPzxiH4.s 			page 215


 6714              		.loc 1 1826 4 view .LVU2182
1825:src/display.c **** 	  negative = 4;
 6715              		.loc 1 1825 6 is_stmt 0 view .LVU2183
 6716 0952 0AAF     		add	r7, sp, #40
 6717              	.LVL777:
1826:src/display.c **** #else
 6718              		.loc 1 1826 13 view .LVU2184
 6719 0954 4FF0040A 		mov	r10, #4
 6720              	.LVL778:
1826:src/display.c **** #else
 6721              		.loc 1 1826 13 view .LVU2185
 6722              	.LBE421:
 6723 0958 DCE6     		b	.L440
 6724              	.LVL779:
 6725              	.L506:
1826:src/display.c **** #else
 6726              		.loc 1 1826 13 view .LVU2186
 6727              	.LBE423:
 6728              	.LBE426:
2177:src/display.c **** 	    odig++;
 6729              		.loc 1 2177 6 is_stmt 1 view .LVU2187
2178:src/display.c **** 	    *obp++ = '.';
 6730              		.loc 1 2178 6 view .LVU2188
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6731              		.loc 1 2179 6 view .LVU2189
2177:src/display.c **** 	    odig++;
 6732              		.loc 1 2177 13 is_stmt 0 view .LVU2190
 6733 095a 42F63062 		movw	r2, #11824
 6734 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2180:src/display.c **** 	      *obp++ = '0';
 6735              		.loc 1 2180 6 is_stmt 1 view .LVU2191
 6736              	.LVL780:
2180:src/display.c **** 	      *obp++ = '0';
 6737              		.loc 1 2180 20 view .LVU2192
2180:src/display.c **** 	      *obp++ = '0';
 6738              		.loc 1 2180 6 is_stmt 0 view .LVU2193
 6739 0962 721C     		adds	r2, r6, #1
 6740              	.LVL781:
2180:src/display.c **** 	      *obp++ = '0';
 6741              		.loc 1 2180 6 view .LVU2194
 6742 0964 2AD0     		beq	.L575
 6743 0966 C6F10101 		rsb	r1, r6, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6744              		.loc 1 2179 10 view .LVU2195
 6745 096a 0DF12600 		add	r0, sp, #38
 6746              	.LVL782:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6747              		.loc 1 2179 10 view .LVU2196
 6748 096e 3944     		add	r1, r1, r7
 6749 0970 0246     		mov	r2, r0
 6750              	.LVL783:
2181:src/display.c **** 	      odig++;
 6751              		.loc 1 2181 15 view .LVU2197
 6752 0972 3025     		movs	r5, #48
 6753              	.LVL784:
 6754              	.L513:
2181:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccPzxiH4.s 			page 216


 6755              		.loc 1 2181 8 is_stmt 1 discriminator 3 view .LVU2198
2181:src/display.c **** 	      odig++;
 6756              		.loc 1 2181 15 is_stmt 0 discriminator 3 view .LVU2199
 6757 0974 02F8015B 		strb	r5, [r2], #1
 6758              	.LVL785:
2182:src/display.c **** 	    }
 6759              		.loc 1 2182 8 is_stmt 1 discriminator 3 view .LVU2200
2180:src/display.c **** 	      *obp++ = '0';
 6760              		.loc 1 2180 25 discriminator 3 view .LVU2201
2180:src/display.c **** 	      *obp++ = '0';
 6761              		.loc 1 2180 20 discriminator 3 view .LVU2202
2180:src/display.c **** 	      *obp++ = '0';
 6762              		.loc 1 2180 6 is_stmt 0 discriminator 3 view .LVU2203
 6763 0978 8A42     		cmp	r2, r1
 6764 097a FBD1     		bne	.L513
 6765 097c 6FEA0608 		mvn	r8, r6
 6766 0980 8044     		add	r8, r8, r0
 6767 0982 7542     		rsbs	r5, r6, #0
 6768              	.LVL786:
 6769              	.L512:
2184:src/display.c **** 	      *obp++ = *p++;
 6770              		.loc 1 2184 16 is_stmt 1 view .LVU2204
2184:src/display.c **** 	      *obp++ = *p++;
 6771              		.loc 1 2184 6 is_stmt 0 view .LVU2205
 6772 0984 002B     		cmp	r3, #0
 6773 0986 7FF7BDAD 		ble	.L504
 6774 098a 581E     		subs	r0, r3, #1
 6775 098c 4044     		add	r0, r0, r8
 6776 098e 08F1FF32 		add	r2, r8, #-1
 6777              	.LVL787:
 6778              	.L514:
2185:src/display.c **** 	      odig++;
 6779              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2206
2185:src/display.c **** 	      odig++;
 6780              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2207
 6781 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6782              	.LVL788:
2185:src/display.c **** 	      odig++;
 6783              		.loc 1 2185 15 discriminator 3 view .LVU2208
 6784 0996 02F8011F 		strb	r1, [r2, #1]!
2186:src/display.c **** 	    }
 6785              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2209
2184:src/display.c **** 	      *obp++ = *p++;
 6786              		.loc 1 2184 25 discriminator 3 view .LVU2210
 6787              	.LVL789:
2184:src/display.c **** 	      *obp++ = *p++;
 6788              		.loc 1 2184 16 discriminator 3 view .LVU2211
2184:src/display.c **** 	      *obp++ = *p++;
 6789              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2212
 6790 099a 9042     		cmp	r0, r2
 6791 099c F9D1     		bne	.L514
 6792              	.LVL790:
2184:src/display.c **** 	      *obp++ = *p++;
 6793              		.loc 1 2184 6 discriminator 3 view .LVU2213
 6794 099e 9844     		add	r8, r8, r3
 6795              	.LVL791:
2184:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccPzxiH4.s 			page 217


 6796              		.loc 1 2184 6 discriminator 3 view .LVU2214
 6797 09a0 1D44     		add	r5, r5, r3
 6798 09a2 AFE5     		b	.L504
 6799              	.LVL792:
 6800              	.L675:
2127:src/display.c **** 
 6801              		.loc 1 2127 2 is_stmt 1 view .LVU2215
 6802 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 6803              		.loc 1 2127 9 is_stmt 0 view .LVU2216
 6804 09a8 0BEB0E03 		add	r3, fp, lr
 6805              	.LVL793:
2127:src/display.c **** 
 6806              		.loc 1 2127 45 is_stmt 1 view .LVU2217
2127:src/display.c **** 
 6807              		.loc 1 2127 2 is_stmt 0 view .LVU2218
 6808 09ac 51B1     		cbz	r1, .L679
2116:src/display.c **** 	      extra_digits = 0;
 6809              		.loc 1 2116 37 view .LVU2219
 6810 09ae 0225     		movs	r5, #2
 6811 09b0 07E4     		b	.L556
 6812              	.LVL794:
 6813              	.L678:
2116:src/display.c **** 	      extra_digits = 0;
 6814              		.loc 1 2116 37 view .LVU2220
 6815 09b2 079B     		ldr	r3, [sp, #28]
 6816              	.LVL795:
2207:src/display.c **** 	    *obp++ = '.';
 6817              		.loc 1 2207 10 view .LVU2221
 6818 09b4 0125     		movs	r5, #1
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6819              		.loc 1 2208 10 view .LVU2222
 6820 09b6 0DF12608 		add	r8, sp, #38
 6821              	.LVL796:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6822              		.loc 1 2208 10 view .LVU2223
 6823 09ba 2FE7     		b	.L522
 6824              	.LVL797:
 6825              	.L575:
2178:src/display.c **** 	    *obp++ = '.';
 6826              		.loc 1 2178 10 view .LVU2224
 6827 09bc 0125     		movs	r5, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6828              		.loc 1 2179 10 view .LVU2225
 6829 09be 0DF12608 		add	r8, sp, #38
 6830              	.LVL798:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6831              		.loc 1 2179 10 view .LVU2226
 6832 09c2 DFE7     		b	.L512
 6833              	.LVL799:
 6834              	.L679:
1934:src/display.c **** 	int odig = 0;
 6835              		.loc 1 1934 15 view .LVU2227
 6836 09c4 3946     		mov	r1, r7
 6837 09c6 7EE5     		b	.L494
 6838              	.L685:
 6839              		.align	2
ARM GAS  /tmp/ccPzxiH4.s 			page 218


 6840              	.L684:
 6841 09c8 00000000 		.word	.LANCHOR1
 6842 09cc D34D6210 		.word	274877907
 6843 09d0 18FCFFFF 		.word	-1000
 6844 09d4 00000000 		.word	.LANCHOR0
 6845 09d8 00000000 		.word	.LANCHOR11
 6846 09dc 00000000 		.word	.LANCHOR10
 6847              		.cfi_endproc
 6848              	.LFE27:
 6850              		.section	.text.set_x,"ax",%progbits
 6851              		.align	1
 6852              		.p2align 2,,3
 6853              		.syntax unified
 6854              		.thumb
 6855              		.thumb_func
 6856              		.fpu fpv4-sp-d16
 6858              	set_x:
 6859              	.LVL800:
 6860              	.LFB26:
1922:src/display.c **** 	decNumber z;
 6861              		.loc 1 1922 66 is_stmt 1 view -0
 6862              		.cfi_startproc
 6863              		@ args = 0, pretend = 0, frame = 40
 6864              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6865              		.loc 1 1923 2 view .LVU2229
1924:src/display.c **** 
 6866              		.loc 1 1924 2 view .LVU2230
1922:src/display.c **** 	decNumber z;
 6867              		.loc 1 1922 66 is_stmt 0 view .LVU2231
 6868 0000 30B5     		push	{r4, r5, lr}
 6869              		.cfi_def_cfa_offset 12
 6870              		.cfi_offset 4, -12
 6871              		.cfi_offset 5, -8
 6872              		.cfi_offset 14, -4
 6873 0002 8BB0     		sub	sp, sp, #44
 6874              		.cfi_def_cfa_offset 56
1924:src/display.c **** 
 6875              		.loc 1 1924 6 view .LVU2232
 6876 0004 0C23     		movs	r3, #12
1927:src/display.c **** 	else
 6877              		.loc 1 1927 4 view .LVU2233
 6878 0006 01AD     		add	r5, sp, #4
1922:src/display.c **** 	decNumber z;
 6879              		.loc 1 1922 66 view .LVU2234
 6880 0008 0C46     		mov	r4, r1
1924:src/display.c **** 
 6881              		.loc 1 1924 6 view .LVU2235
 6882 000a 0093     		str	r3, [sp]
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6883              		.loc 1 1926 2 is_stmt 1 view .LVU2236
1927:src/display.c **** 	else
 6884              		.loc 1 1927 4 is_stmt 0 view .LVU2237
 6885 000c 2946     		mov	r1, r5
 6886              	.LVL801:
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6887              		.loc 1 1926 5 view .LVU2238
ARM GAS  /tmp/ccPzxiH4.s 			page 219


 6888 000e 42B1     		cbz	r2, .L687
1927:src/display.c **** 	else
 6889              		.loc 1 1927 4 is_stmt 1 view .LVU2239
 6890 0010 FFF7FEFF 		bl	decimal128ToNumber
 6891              	.LVL802:
1930:src/display.c ****       }
 6892              		.loc 1 1930 2 view .LVU2240
 6893 0014 2146     		mov	r1, r4
 6894 0016 2846     		mov	r0, r5
 6895 0018 6A46     		mov	r2, sp
 6896 001a FFF7FEFF 		bl	set_x_dn
 6897              	.LVL803:
1931:src/display.c **** 
 6898              		.loc 1 1931 7 is_stmt 0 view .LVU2241
 6899 001e 0BB0     		add	sp, sp, #44
 6900              		.cfi_remember_state
 6901              		.cfi_def_cfa_offset 12
 6902              		@ sp needed
 6903 0020 30BD     		pop	{r4, r5, pc}
 6904              	.LVL804:
 6905              	.L687:
 6906              		.cfi_restore_state
1929:src/display.c **** 	set_x_dn(&z, res, &digits);
 6907              		.loc 1 1929 4 is_stmt 1 view .LVU2242
 6908 0022 FFF7FEFF 		bl	decimal64ToNumber
 6909              	.LVL805:
1930:src/display.c ****       }
 6910              		.loc 1 1930 2 view .LVU2243
 6911 0026 2146     		mov	r1, r4
 6912 0028 2846     		mov	r0, r5
 6913 002a 6A46     		mov	r2, sp
 6914 002c FFF7FEFF 		bl	set_x_dn
 6915              	.LVL806:
1931:src/display.c **** 
 6916              		.loc 1 1931 7 is_stmt 0 view .LVU2244
 6917 0030 0BB0     		add	sp, sp, #44
 6918              		.cfi_def_cfa_offset 12
 6919              		@ sp needed
 6920 0032 30BD     		pop	{r4, r5, pc}
1931:src/display.c **** 
 6921              		.loc 1 1931 7 view .LVU2245
 6922              		.cfi_endproc
 6923              	.LFE26:
 6925              		.section	.text.format_reg,"ax",%progbits
 6926              		.align	1
 6927              		.p2align 2,,3
 6928              		.global	format_reg
 6929              		.syntax unified
 6930              		.thumb
 6931              		.thumb_func
 6932              		.fpu fpv4-sp-d16
 6934              	format_reg:
 6935              	.LVL807:
 6936              	.LFB28:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6937              		.loc 1 2338 45 is_stmt 1 view -0
 6938              		.cfi_startproc
ARM GAS  /tmp/ccPzxiH4.s 			page 220


 6939              		@ args = 0, pretend = 0, frame = 40
 6940              		@ frame_needed = 0, uses_anonymous_args = 0
2339:src/display.c **** 
 6941              		.loc 1 2339 2 view .LVU2247
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6942              		.loc 1 2338 45 is_stmt 0 view .LVU2248
 6943 0000 30B5     		push	{r4, r5, lr}
 6944              		.cfi_def_cfa_offset 12
 6945              		.cfi_offset 4, -12
 6946              		.cfi_offset 5, -8
 6947              		.cfi_offset 14, -4
 6948 0002 8BB0     		sub	sp, sp, #44
 6949              		.cfi_def_cfa_offset 56
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6950              		.loc 1 2338 45 view .LVU2249
 6951 0004 0C46     		mov	r4, r1
 6952 0006 0546     		mov	r5, r0
2339:src/display.c **** 
 6953              		.loc 1 2339 28 view .LVU2250
 6954 0008 FFF7FEFF 		bl	get_reg_n
 6955              	.LVL808:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6956              		.loc 1 2341 6 view .LVU2251
 6957 000c 154B     		ldr	r3, .L697
 6958 000e 1B68     		ldr	r3, [r3]
 6959 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6960              	.LVL809:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6961              		.loc 1 2341 2 is_stmt 1 view .LVU2252
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6962              		.loc 1 2341 5 is_stmt 0 view .LVU2253
 6963 0014 D207     		lsls	r2, r2, #31
 6964 0016 1DD4     		bmi	.L695
2344:src/display.c **** 	  decNumber x;
 6965              		.loc 1 2344 7 is_stmt 1 view .LVU2254
2344:src/display.c **** 	  decNumber x;
 6966              		.loc 1 2344 10 is_stmt 0 view .LVU2255
 6967 0018 44B1     		cbz	r4, .L696
 6968              	.L693:
2355:src/display.c ****       }
 6969              		.loc 1 2355 4 is_stmt 1 view .LVU2256
2355:src/display.c ****       }
 6970              		.loc 1 2355 24 is_stmt 0 view .LVU2257
 6971 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2355:src/display.c ****       }
 6972              		.loc 1 2355 4 view .LVU2258
 6973 001e 2146     		mov	r1, r4
 6974 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6975 0024 FFF7FEFF 		bl	set_x
 6976              	.LVL810:
2356:src/display.c **** 
 6977              		.loc 1 2356 7 view .LVU2259
 6978 0028 0BB0     		add	sp, sp, #44
 6979              		.cfi_remember_state
 6980              		.cfi_def_cfa_offset 12
 6981              		@ sp needed
 6982 002a 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccPzxiH4.s 			page 221


 6983              	.LVL811:
 6984              	.L696:
 6985              		.cfi_restore_state
2344:src/display.c **** 	  decNumber x;
 6986              		.loc 1 2344 32 discriminator 1 view .LVU2260
 6987 002c 0E4A     		ldr	r2, .L697+4
2344:src/display.c **** 	  decNumber x;
 6988              		.loc 1 2344 23 discriminator 1 view .LVU2261
 6989 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6990 0030 012A     		cmp	r2, #1
 6991 0032 F2D9     		bls	.L693
 6992              	.LVL812:
 6993              	.LBB430:
 6994              	.LBI430:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6995              		.loc 1 2338 12 is_stmt 1 view .LVU2262
 6996              	.LBB431:
 6997              	.LBB432:
2345:src/display.c **** 	  int s;
 6998              		.loc 1 2345 4 view .LVU2263
2346:src/display.c **** 	  unsigned long long int v;
 6999              		.loc 1 2346 4 view .LVU2264
2347:src/display.c **** 
 7000              		.loc 1 2347 4 view .LVU2265
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7001              		.loc 1 2349 4 view .LVU2266
 7002 0034 2946     		mov	r1, r5
 7003 0036 01A8     		add	r0, sp, #4
 7004              	.LVL813:
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7005              		.loc 1 2349 4 is_stmt 0 view .LVU2267
 7006 0038 FFF7FEFF 		bl	getRegister
 7007              	.LVL814:
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7008              		.loc 1 2350 4 is_stmt 1 view .LVU2268
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7009              		.loc 1 2350 8 is_stmt 0 view .LVU2269
 7010 003c 01A8     		add	r0, sp, #4
 7011 003e 6946     		mov	r1, sp
 7012 0040 FFF7FEFF 		bl	dn_to_ull
 7013              	.LVL815:
2351:src/display.c **** 	}
 7014              		.loc 1 2351 4 is_stmt 1 view .LVU2270
 7015 0044 009A     		ldr	r2, [sp]
 7016 0046 FFF7FEFF 		bl	build_value
 7017              	.LVL816:
2351:src/display.c **** 	}
 7018              		.loc 1 2351 4 is_stmt 0 view .LVU2271
 7019 004a 2246     		mov	r2, r4
 7020 004c FFF7FEFF 		bl	set_int_x
 7021              	.LVL817:
 7022              	.LBE432:
 7023              	.LBE431:
 7024              	.LBE430:
2356:src/display.c **** 
 7025              		.loc 1 2356 7 view .LVU2272
 7026 0050 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccPzxiH4.s 			page 222


 7027              		.cfi_remember_state
 7028              		.cfi_def_cfa_offset 12
 7029              		@ sp needed
 7030 0052 30BD     		pop	{r4, r5, pc}
 7031              	.LVL818:
 7032              	.L695:
 7033              		.cfi_restore_state
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7034              		.loc 1 2342 4 is_stmt 1 view .LVU2273
 7035 0054 2846     		mov	r0, r5
 7036              	.LVL819:
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7037              		.loc 1 2342 4 is_stmt 0 view .LVU2274
 7038 0056 FFF7FEFF 		bl	get_reg_n_int
 7039              	.LVL820:
 7040 005a 2246     		mov	r2, r4
 7041 005c FFF7FEFF 		bl	set_int_x
 7042              	.LVL821:
2356:src/display.c **** 
 7043              		.loc 1 2356 7 view .LVU2275
 7044 0060 0BB0     		add	sp, sp, #44
 7045              		.cfi_def_cfa_offset 12
 7046              		@ sp needed
 7047 0062 30BD     		pop	{r4, r5, pc}
 7048              	.LVL822:
 7049              	.L698:
2356:src/display.c **** 
 7050              		.loc 1 2356 7 view .LVU2276
 7051              		.align	2
 7052              	.L697:
 7053 0064 00000000 		.word	main_ram
 7054 0068 00000000 		.word	StateWhileOn
 7055              		.cfi_endproc
 7056              	.LFE28:
 7058              		.section	.text.set_status_right,"ax",%progbits
 7059              		.align	1
 7060              		.p2align 2,,3
 7061              		.syntax unified
 7062              		.thumb
 7063              		.thumb_func
 7064              		.fpu fpv4-sp-d16
 7066              	set_status_right:
 7067              	.LVL823:
 7068              	.LFB47:
3505:src/display.c ****       static void set_status_top(const char *str) {
3506:src/display.c **** 	if (no_status_top) return;
3507:src/display.c **** 	if (State2.runmode) {
3508:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3509:src/display.c **** 	}
3510:src/display.c **** 	else {
3511:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3512:src/display.c **** 	}
3513:src/display.c ****       }
3514:src/display.c **** #ifdef TOP_ROW
3515:src/display.c ****       static void set_status_top_always(const char *str) {
3516:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3517:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/ccPzxiH4.s 			page 223


3518:src/display.c ****       }
3519:src/display.c **** #endif
3520:src/display.c **** 
3521:src/display.c ****       /*
3522:src/display.c ****        *  Display messages (global function)
3523:src/display.c ****        */
3524:src/display.c ****       extern void message(const char *str1, const char *str2)
3525:src/display.c ****       {
3526:src/display.c **** 	State2.disp_freeze = 0;
3527:src/display.c **** 	State2.disp_small = 0;
3528:src/display.c **** 	WasDataEntry = 0;
3529:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3530:src/display.c **** 	  // Complete redraw necessary
3531:src/display.c **** 	  DispMsg = str1;
3532:src/display.c **** 	  display();
3533:src/display.c **** 	}
3534:src/display.c **** 	else {
3535:src/display.c **** 	  if ( str2 != NULL ) {
3536:src/display.c **** 	    reset_disp();
3537:src/display.c **** 	    ShowRPN = 0;
3538:src/display.c **** 	    set_annunciators();
3539:src/display.c **** 	    set_digits_string( str2, 0 );
3540:src/display.c **** 	  }
3541:src/display.c **** 	  set_status( str1 );
3542:src/display.c **** 	  finish_display();// message
3543:src/display.c **** 	}
3544:src/display.c ****       }
3545:src/display.c **** 
3546:src/display.c **** #ifdef INCLUDE_STOPWATCH
3547:src/display.c **** 
3548:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3549:src/display.c **** 	int j = SEGS_EXP_BASE;
3550:src/display.c **** 	for (; *exponent!=0; exponent++) {
3551:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3552:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3553:src/display.c **** 	}
3554:src/display.c ****       }
3555:src/display.c **** 
3556:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3557:src/display.c ****       {
3558:src/display.c **** 	reset_disp();
3559:src/display.c **** 	set_dot(DEG);
3560:src/display.c **** 	set_digits_string( str2, 0 );
3561:src/display.c **** 	State2.disp_small = force_small;
3562:src/display.c **** 	if( exponent!=NULL ) {
3563:src/display.c **** 	  stopwatch_exponent(exponent);
3564:src/display.c **** 	}
3565:src/display.c **** 	set_status( str1 );
3566:src/display.c **** 	finish_display();
3567:src/display.c ****       }
3568:src/display.c **** 
3569:src/display.c **** 
3570:src/display.c **** #endif // INCLUDE_STOPWATCH
3571:src/display.c **** 
3572:src/display.c ****       /* Display the right hand characters from the given string.
3573:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3574:src/display.c ****        * and reduce font size if required.
ARM GAS  /tmp/ccPzxiH4.s 			page 224


3575:src/display.c ****        */
3576:src/display.c ****       static void set_status_right(const char *str) {
 7069              		.loc 1 3576 53 is_stmt 1 view -0
 7070              		.cfi_startproc
 7071              		@ args = 0, pretend = 0, frame = 0
 7072              		@ frame_needed = 0, uses_anonymous_args = 0
3577:src/display.c **** 	unsigned int x = 0;
 7073              		.loc 1 3577 2 view .LVU2278
3578:src/display.c **** 	const char *p;
 7074              		.loc 1 3578 2 view .LVU2279
3579:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7075              		.loc 1 3579 2 view .LVU2280
3576:src/display.c **** 	unsigned int x = 0;
 7076              		.loc 1 3576 53 is_stmt 0 view .LVU2281
 7077 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7078              		.cfi_def_cfa_offset 32
 7079              		.cfi_offset 3, -32
 7080              		.cfi_offset 4, -28
 7081              		.cfi_offset 5, -24
 7082              		.cfi_offset 6, -20
 7083              		.cfi_offset 7, -16
 7084              		.cfi_offset 8, -12
 7085              		.cfi_offset 9, -8
 7086              		.cfi_offset 14, -4
 7087              		.loc 1 3579 23 view .LVU2282
 7088 0004 164B     		ldr	r3, .L713
 7089              		.loc 1 3579 41 view .LVU2283
 7090 0006 93F91630 		ldrsb	r3, [r3, #22]
 7091 000a 002B     		cmp	r3, #0
3576:src/display.c **** 	unsigned int x = 0;
 7092              		.loc 1 3576 53 view .LVU2284
 7093 000c 0646     		mov	r6, r0
 7094              		.loc 1 3579 41 view .LVU2285
 7095 000e 1DDA     		bge	.L712
 7096              	.LVL824:
 7097              	.L700:
 7098              		.loc 1 3579 12 view .LVU2286
 7099 0010 4FF00108 		mov	r8, #1
3580:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7100              		.loc 1 3580 36 view .LVU2287
 7101 0014 4FF48077 		mov	r7, #256
 7102              	.L701:
 7103              	.LVL825:
3581:src/display.c **** 
3582:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7104              		.loc 1 3582 2 is_stmt 1 discriminator 4 view .LVU2288
 7105              		.loc 1 3582 14 discriminator 4 view .LVU2289
 7106              		.loc 1 3582 2 is_stmt 0 discriminator 4 view .LVU2290
 7107 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7108 001a 3446     		mov	r4, r6
 7109 001c 1BB1     		cbz	r3, .L702
 7110              	.LVL826:
 7111              	.L703:
 7112              		.loc 1 3582 30 is_stmt 1 discriminator 3 view .LVU2291
 7113              		.loc 1 3582 26 discriminator 3 view .LVU2292
 7114              		.loc 1 3582 14 discriminator 3 view .LVU2293
 7115              		.loc 1 3582 2 is_stmt 0 discriminator 3 view .LVU2294
ARM GAS  /tmp/ccPzxiH4.s 			page 225


 7116 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7117              	.LVL827:
 7118              		.loc 1 3582 2 discriminator 3 view .LVU2295
 7119 0022 002B     		cmp	r3, #0
 7120 0024 FBD1     		bne	.L703
 7121              	.L702:
3577:src/display.c **** 	const char *p;
 7122              		.loc 1 3577 15 view .LVU2296
 7123 0026 0025     		movs	r5, #0
 7124 0028 06E0     		b	.L704
 7125              	.LVL828:
 7126              	.L705:
 7127              	.LBB433:
3583:src/display.c **** 	while (--p >= str) {
3584:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7128              		.loc 1 3584 27 view .LVU2297
 7129 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3585:src/display.c **** 
3586:src/display.c **** 	  x += charlengths(c);
 7130              		.loc 1 3586 9 view .LVU2298
 7131 002c 3844     		add	r0, r0, r7
 7132 002e FFF7FEFF 		bl	charlengths
 7133              	.LVL829:
 7134              		.loc 1 3586 6 view .LVU2299
 7135 0032 0544     		add	r5, r5, r0
 7136              	.LVL830:
3587:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7137              		.loc 1 3587 4 is_stmt 1 view .LVU2300
 7138              		.loc 1 3587 7 is_stmt 0 view .LVU2301
 7139 0034 2C2D     		cmp	r5, #44
 7140 0036 03D8     		bhi	.L706
 7141              	.LVL831:
 7142              	.L704:
3584:src/display.c **** 
 7143              		.loc 1 3584 4 is_stmt 1 view .LVU2302
3584:src/display.c **** 
 7144              		.loc 1 3584 4 is_stmt 0 view .LVU2303
 7145              	.LBE433:
3583:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7146              		.loc 1 3583 8 is_stmt 1 view .LVU2304
 7147 0038 A146     		mov	r9, r4
 7148 003a 013C     		subs	r4, r4, #1
 7149              	.LVL832:
 7150              	.LBB434:
3586:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7151              		.loc 1 3586 4 view .LVU2305
3586:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7152              		.loc 1 3586 4 is_stmt 0 view .LVU2306
 7153              	.LBE434:
3583:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7154              		.loc 1 3583 8 view .LVU2307
 7155 003c A642     		cmp	r6, r4
 7156 003e F4D9     		bls	.L705
 7157              	.LVL833:
 7158              	.L706:
3588:src/display.c **** 	    break;
3589:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 226


3590:src/display.c **** 	set_status_sized(p+1, toolarge);
 7159              		.loc 1 3590 2 is_stmt 1 view .LVU2308
 7160              	.LBB435:
 7161              	.LBI435:
3360:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7162              		.loc 1 3360 19 view .LVU2309
 7163              	.LBB436:
3361:src/display.c ****       }
 7164              		.loc 1 3361 2 view .LVU2310
 7165 0040 4146     		mov	r1, r8
 7166 0042 4846     		mov	r0, r9
 7167              	.LBE436:
 7168              	.LBE435:
3591:src/display.c ****       }
 7169              		.loc 1 3591 7 is_stmt 0 view .LVU2311
 7170 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7171              		.cfi_remember_state
 7172              		.cfi_restore 14
 7173              		.cfi_restore 9
 7174              		.cfi_restore 8
 7175              		.cfi_restore 7
 7176              		.cfi_restore 6
 7177              		.cfi_restore 5
 7178              		.cfi_restore 4
 7179              		.cfi_restore 3
 7180              		.cfi_def_cfa_offset 0
 7181              	.LVL834:
 7182              	.LBB438:
 7183              	.LBB437:
3361:src/display.c ****       }
 7184              		.loc 1 3361 2 view .LVU2312
 7185 0048 FFF7FEBF 		b	s_s_sized.constprop.0
 7186              	.LVL835:
 7187              	.L712:
 7188              		.cfi_restore_state
3361:src/display.c ****       }
 7189              		.loc 1 3361 2 view .LVU2313
 7190              	.LBE437:
 7191              	.LBE438:
 7192              	.LBB439:
 7193              	.LBI439:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7194              		.loc 1 3492 18 is_stmt 1 view .LVU2314
 7195              	.LBB440:
3493:src/display.c ****       }
 7196              		.loc 1 3493 2 view .LVU2315
3493:src/display.c ****       }
 7197              		.loc 1 3493 9 is_stmt 0 view .LVU2316
 7198 004c 0021     		movs	r1, #0
 7199 004e FFF7FEFF 		bl	pixel_length
 7200              	.LVL836:
3493:src/display.c ****       }
 7201              		.loc 1 3493 9 view .LVU2317
 7202              	.LBE440:
 7203              	.LBE439:
3579:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7204              		.loc 1 3579 41 view .LVU2318
ARM GAS  /tmp/ccPzxiH4.s 			page 227


 7205 0052 2C28     		cmp	r0, #44
 7206 0054 DCDC     		bgt	.L700
3579:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7207              		.loc 1 3579 12 view .LVU2319
 7208 0056 4FF00008 		mov	r8, #0
3580:src/display.c **** 
 7209              		.loc 1 3580 36 view .LVU2320
 7210 005a 4746     		mov	r7, r8
 7211 005c DCE7     		b	.L701
 7212              	.L714:
 7213 005e 00BF     		.align	2
 7214              	.L713:
 7215 0060 00000000 		.word	StateWhileOn
 7216              		.cfi_endproc
 7217              	.LFE47:
 7219              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7220              		.align	2
 7221              	.LC2:
 7222 0000 32630600 		.ascii	"2c\006\000"
 7223              		.align	2
 7224              	.LC3:
 7225 0004 07C63C00 		.ascii	"\007\306<\000"
 7226              		.align	2
 7227              	.LC4:
 7228 0008 07876900 		.ascii	"\007\207i\000"
 7229              		.align	2
 7230              	.LC5:
 7231 000c 07C67900 		.ascii	"\007\306y\000"
 7232              		.align	2
 7233              	.LC6:
 7234 0010 07950600 		.ascii	"\007\225\006\000"
 7235              		.align	2
 7236              	.LC7:
 7237 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7237      060600
 7238 001b 00       		.align	2
 7239              	.LC8:
 7240 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7240      060600
 7241 0023 00       		.align	2
 7242              	.LC9:
 7243 0024 4C656E67 		.ascii	"Length:\000"
 7243      74683A00 
 7244              		.align	2
 7245              	.LC10:
 7246 002c 5265616C 		.ascii	"Real:\000"
 7246      3A00
 7247 0032 0000     		.align	2
 7248              	.LC11:
 7249 0034 416E676C 		.ascii	"Angle:\000"
 7249      653A00
 7250 003b 00       		.align	2
 7251              	.LC12:
 7252 003c 496D6167 		.ascii	"Imag:\000"
 7252      3A00
 7253 0042 0000     		.align	2
 7254              	.LC13:
ARM GAS  /tmp/ccPzxiH4.s 			page 228


 7255 0044 1400     		.ascii	"\024\000"
 7256 0046 0000     		.align	2
 7257              	.LC14:
 7258 0048 07C77900 		.ascii	"\007\307y\000"
 7259              		.align	2
 7260              	.LC15:
 7261 004c 07C73C00 		.ascii	"\007\307<\000"
 7262              		.align	2
 7263              	.LC16:
 7264 0050 07870700 		.ascii	"\007\207\007\000"
 7265              		.align	2
 7266              	.LC17:
 7267 0054 07876A00 		.ascii	"\007\207j\000"
 7268              		.align	2
 7269              	.LC18:
 7270 0058 07C74400 		.ascii	"\007\307D\000"
 7271              		.align	2
 7272              	.LC19:
 7273 005c 07872000 		.ascii	"\007\207 \000"
 7274              		.align	2
 7275              	.LC20:
 7276 0060 06060788 		.ascii	"\006\006\007\210\007\000"
 7276      0700
 7277 0066 0000     		.align	2
 7278              	.LC21:
 7279 0068 0784060D 		.ascii	"\007\204\006\015\000"
 7279      00
 7280 006d 000000   		.align	2
 7281              	.LC23:
 7282 0070 07E43F00 		.ascii	"\007\344?\000"
 7283              		.section	.text.annunciators,"ax",%progbits
 7284              		.align	1
 7285              		.p2align 2,,3
 7286              		.syntax unified
 7287              		.thumb
 7288              		.thumb_func
 7289              		.fpu fpv4-sp-d16
 7291              	annunciators:
 7292              	.LFB16:
 918:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7293              		.loc 1 918 36 is_stmt 1 view -0
 7294              		.cfi_startproc
 7295              		@ args = 0, pretend = 0, frame = 88
 7296              		@ frame_needed = 0, uses_anonymous_args = 0
 920:src/display.c ****       int n;
 7297              		.loc 1 920 7 view .LVU2322
 918:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7298              		.loc 1 918 36 is_stmt 0 view .LVU2323
 7299 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7300              		.cfi_def_cfa_offset 28
 7301              		.cfi_offset 4, -28
 7302              		.cfi_offset 5, -24
 7303              		.cfi_offset 6, -20
 7304              		.cfi_offset 7, -16
 7305              		.cfi_offset 8, -12
 7306              		.cfi_offset 9, -8
 7307              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPzxiH4.s 			page 229


 931:src/display.c **** #  endif
 7308              		.loc 1 931 38 view .LVU2324
 7309 0004 DFF85483 		ldr	r8, .L870+52
 918:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7310              		.loc 1 918 36 view .LVU2325
 7311 0008 97B0     		sub	sp, sp, #92
 7312              		.cfi_def_cfa_offset 120
 7313              	.LVL837:
 921:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7314              		.loc 1 921 7 is_stmt 1 view .LVU2326
 922:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7315              		.loc 1 922 7 view .LVU2327
 923:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7316              		.loc 1 923 7 view .LVU2328
 923:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7317              		.loc 1 923 43 is_stmt 0 view .LVU2329
 7318 000a FFF7FEFF 		bl	cur_shift
 7319              	.LVL838:
 931:src/display.c **** #  endif
 7320              		.loc 1 931 38 view .LVU2330
 7321 000e D8F80020 		ldr	r2, [r8]
 923:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7322              		.loc 1 923 18 view .LVU2331
 7323 0012 C54B     		ldr	r3, .L870
 931:src/display.c **** #  endif
 7324              		.loc 1 931 38 view .LVU2332
 7325 0014 92F8EA67 		ldrb	r6, [r2, #2026]	@ zero_extendqisi2
 923:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7326              		.loc 1 923 18 view .LVU2333
 7327 0018 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 7328              	.LVL839:
 931:src/display.c **** #  endif
 7329              		.loc 1 931 7 is_stmt 1 view .LVU2334
 962:src/display.c ****       
 7330              		.loc 1 962 7 is_stmt 0 view .LVU2335
 7331 001a 0BAD     		add	r5, sp, #44
 7332              	.LVL840:
 962:src/display.c ****       
 7333              		.loc 1 962 7 view .LVU2336
 7334 001c 2A22     		movs	r2, #42
 7335 001e 2846     		mov	r0, r5
 7336 0020 0021     		movs	r1, #0
 7337 0022 FFF7FEFF 		bl	xset
 7338              	.LVL841:
 964:src/display.c **** #ifdef SHOW_STACK_SIZE
 7339              		.loc 1 964 11 view .LVU2337
 7340 0026 D8F80030 		ldr	r3, [r8]
 7341 002a 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 964:src/display.c **** #ifdef SHOW_STACK_SIZE
 7342              		.loc 1 964 10 view .LVU2338
 7343 002e D407     		lsls	r4, r2, #31
 931:src/display.c **** #  endif
 7344              		.loc 1 931 38 view .LVU2339
 7345 0030 C6F38006 		ubfx	r6, r6, #2, #1
 7346              	.LVL842:
 934:src/display.c **** #  else
 7347              		.loc 1 934 7 is_stmt 1 view .LVU2340
ARM GAS  /tmp/ccPzxiH4.s 			page 230


 939:src/display.c **** #  else
 7348              		.loc 1 939 7 view .LVU2341
 949:src/display.c **** #else
 7349              		.loc 1 949 7 view .LVU2342
 957:src/display.c **** #else
 7350              		.loc 1 957 7 view .LVU2343
 962:src/display.c ****       
 7351              		.loc 1 962 7 view .LVU2344
 964:src/display.c **** #ifdef SHOW_STACK_SIZE
 7352              		.loc 1 964 7 view .LVU2345
 964:src/display.c **** #ifdef SHOW_STACK_SIZE
 7353              		.loc 1 964 10 is_stmt 0 view .LVU2346
 7354 0034 00F1E880 		bmi	.L856
1003:src/display.c **** #else
 7355              		.loc 1 1003 12 is_stmt 1 view .LVU2347
1003:src/display.c **** #else
 7356              		.loc 1 1003 15 is_stmt 0 view .LVU2348
 7357 0038 002E     		cmp	r6, #0
 7358 003a 00F0B080 		beq	.L857
 7359              	.L728:
1088:src/display.c **** 	  *p++ = '\007';
 7360              		.loc 1 1088 2 is_stmt 1 view .LVU2349
1088:src/display.c **** 	  *p++ = '\007';
 7361              		.loc 1 1088 6 is_stmt 0 view .LVU2350
 7362 003e BB4C     		ldr	r4, .L870+4
 7363 0040 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
1088:src/display.c **** 	  *p++ = '\007';
 7364              		.loc 1 1088 5 view .LVU2351
 7365 0042 9107     		lsls	r1, r2, #30
 7366 0044 40F14481 		bpl	.L739
1089:src/display.c **** 	  *p++ = '\344';
 7367              		.loc 1 1089 4 is_stmt 1 view .LVU2352
 7368              	.LVL843:
1090:src/display.c **** 	  *p++ = shift_char;
 7369              		.loc 1 1090 4 view .LVU2353
1089:src/display.c **** 	  *p++ = '\344';
 7370              		.loc 1 1089 9 is_stmt 0 view .LVU2354
 7371 0048 4EF20743 		movw	r3, #58375
1092:src/display.c **** 	}
 7372              		.loc 1 1092 6 view .LVU2355
 7373 004c B849     		ldr	r1, .L870+8
1091:src/display.c **** 	  q = "\024";
 7374              		.loc 1 1091 9 view .LVU2356
 7375 004e 8DF82E70 		strb	r7, [sp, #46]
1089:src/display.c **** 	  *p++ = '\344';
 7376              		.loc 1 1089 9 view .LVU2357
 7377 0052 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1091:src/display.c **** 	  q = "\024";
 7378              		.loc 1 1091 4 is_stmt 1 view .LVU2358
 7379              	.LVL844:
1092:src/display.c **** 	}
 7380              		.loc 1 1092 4 view .LVU2359
1091:src/display.c **** 	  q = "\024";
 7381              		.loc 1 1091 6 is_stmt 0 view .LVU2360
 7382 0056 0DF12F00 		add	r0, sp, #47
 7383              	.LVL845:
 7384              	.L740:
ARM GAS  /tmp/ccPzxiH4.s 			page 231


 7385              	.L742:
1150:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7386              		.loc 1 1150 2 is_stmt 1 view .LVU2361
1150:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7387              		.loc 1 1150 6 is_stmt 0 view .LVU2362
 7388 005a FFF7FEFF 		bl	scopy
 7389              	.LVL846:
1150:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7390              		.loc 1 1150 6 view .LVU2363
 7391 005e 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 7392 0060 0746     		mov	r7, r0
 7393              	.LVL847:
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7394              		.loc 1 1155 2 is_stmt 1 view .LVU2364
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7395              		.loc 1 1155 5 is_stmt 0 view .LVU2365
 7396 0062 5007     		lsls	r0, r2, #29
 7397              	.LVL848:
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7398              		.loc 1 1155 5 view .LVU2366
 7399 0064 00F15A81 		bmi	.L858
 7400              	.L751:
1157:src/display.c **** 	  decNumber y;
 7401              		.loc 1 1157 9 is_stmt 1 view .LVU2367
1157:src/display.c **** 	  decNumber y;
 7402              		.loc 1 1157 13 is_stmt 0 view .LVU2368
 7403 0068 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
1157:src/display.c **** 	  decNumber y;
 7404              		.loc 1 1157 12 view .LVU2369
 7405 006a 5906     		lsls	r1, r3, #25
 7406 006c 40F11E81 		bpl	.L752
 7407              	.L737:
 7408              	.LBB455:
1158:src/display.c **** 	display_yreg:
 7409              		.loc 1 1158 4 is_stmt 1 view .LVU2370
1166:src/display.c **** 		    getRegister(&y, regK_idx);
 7410              		.loc 1 1166 5 view .LVU2371
1166:src/display.c **** 		    getRegister(&y, regK_idx);
 7411              		.loc 1 1166 10 is_stmt 0 view .LVU2372
 7412 0070 D8F80030 		ldr	r3, [r8]
 7413 0074 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1166:src/display.c **** 		    getRegister(&y, regK_idx);
 7414              		.loc 1 1166 8 view .LVU2373
 7415 0078 5207     		lsls	r2, r2, #29
 7416 007a 06D5     		bpl	.L753
1166:src/display.c **** 		    getRegister(&y, regK_idx);
 7417              		.loc 1 1166 36 discriminator 1 view .LVU2374
 7418 007c 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 7419 0080 03F01C03 		and	r3, r3, #28
 7420 0084 0C2B     		cmp	r3, #12
 7421 0086 00F02F82 		beq	.L859
 7422              	.L753:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7423              		.loc 1 1170 7 is_stmt 1 view .LVU2375
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7424              		.loc 1 1170 37 is_stmt 0 view .LVU2376
 7425 008a DFF8D492 		ldr	r9, .L870+56
ARM GAS  /tmp/ccPzxiH4.s 			page 232


 7426 008e D9F80010 		ldr	r1, [r9]
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7427              		.loc 1 1170 7 view .LVU2377
 7428 0092 6329     		cmp	r1, #99
 7429 0094 00F3F881 		bgt	.L860
 7430              	.L755:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7431              		.loc 1 1170 7 discriminator 3 view .LVU2378
 7432 0098 0131     		adds	r1, r1, #1
 7433              	.L759:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7434              		.loc 1 1170 7 discriminator 4 view .LVU2379
 7435 009a 02AE     		add	r6, sp, #8
 7436 009c 3046     		mov	r0, r6
 7437 009e FFF7FEFF 		bl	getRegister
 7438              	.LVL849:
 7439              	.L754:
1180:src/display.c **** #ifdef INCLUDE_C_LOCK
 7440              		.loc 1 1180 4 is_stmt 1 view .LVU2380
1180:src/display.c **** #ifdef INCLUDE_C_LOCK
 7441              		.loc 1 1180 7 is_stmt 0 view .LVU2381
 7442 00a2 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 7443 00a6 13F0700F 		tst	r3, #112
 7444 00aa 44D1     		bne	.L761
1182:src/display.c **** #else
 7445              		.loc 1 1182 7 is_stmt 1 view .LVU2382
1182:src/display.c **** #else
 7446              		.loc 1 1182 20 is_stmt 0 view .LVU2383
 7447 00ac E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1182:src/display.c **** #else
 7448              		.loc 1 1182 10 view .LVU2384
 7449 00ae 13F0010F 		tst	r3, #1
1182:src/display.c **** #else
 7450              		.loc 1 1182 40 view .LVU2385
 7451 00b2 D8F80030 		ldr	r3, [r8]
1182:src/display.c **** #else
 7452              		.loc 1 1182 10 view .LVU2386
 7453 00b6 40F0A581 		bne	.L861
 7454              	.L764:
1206:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7455              		.loc 1 1206 6 is_stmt 1 view .LVU2387
1206:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7456              		.loc 1 1206 21 is_stmt 0 view .LVU2388
 7457 00ba 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1206:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7458              		.loc 1 1206 9 view .LVU2389
 7459 00be 9B06     		lsls	r3, r3, #26
 7460 00c0 39D5     		bpl	.L761
1208:src/display.c **** #endif
 7461              		.loc 1 1208 6 view .LVU2390
 7462 00c2 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1208:src/display.c **** #endif
 7463              		.loc 1 1208 3 view .LVU2391
 7464 00c4 13F00204 		ands	r4, r3, #2
 7465 00c8 35D1     		bne	.L761
1211:src/display.c **** #endif
 7466              		.loc 1 1211 6 view .LVU2392
ARM GAS  /tmp/ccPzxiH4.s 			page 233


 7467 00ca 9A4B     		ldr	r3, .L870+12
1211:src/display.c **** #endif
 7468              		.loc 1 1211 3 view .LVU2393
 7469 00cc 1B68     		ldr	r3, [r3]
 7470 00ce 012B     		cmp	r3, #1
 7471 00d0 31D0     		beq	.L761
1213:src/display.c **** 	      char ltgteq;
 7472              		.loc 1 1213 6 view .LVU2394
 7473 00d2 3946     		mov	r1, r7
 7474 00d4 3046     		mov	r0, r6
 7475 00d6 FFF7FEFF 		bl	set_x_fract
 7476              	.LVL850:
1213:src/display.c **** 	      char ltgteq;
 7477              		.loc 1 1213 3 view .LVU2395
 7478 00da 60B3     		cbz	r0, .L761
 7479              	.LBB456:
1214:src/display.c **** 
 7480              		.loc 1 1214 8 is_stmt 1 view .LVU2396
1216:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7481              		.loc 1 1216 8 view .LVU2397
1216:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7482              		.loc 1 1216 12 is_stmt 0 view .LVU2398
 7483 00dc 2146     		mov	r1, r4
 7484 00de 2846     		mov	r0, r5
 7485 00e0 FFF7FEFF 		bl	find_char
 7486              	.LVL851:
 7487 00e4 0446     		mov	r4, r0
1216:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7488              		.loc 1 1216 10 view .LVU2399
 7489 00e6 0238     		subs	r0, r0, #2
 7490              	.LVL852:
1218:src/display.c **** 	      switch (ltgteq) {
 7491              		.loc 1 1218 8 is_stmt 1 view .LVU2400
1218:src/display.c **** 	      switch (ltgteq) {
 7492              		.loc 1 1218 15 is_stmt 0 view .LVU2401
 7493 00e8 14F8028C 		ldrb	r8, [r4, #-2]	@ zero_extendqisi2
 7494              	.LVL853:
1219:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7495              		.loc 1 1219 8 is_stmt 1 view .LVU2402
 7496 00ec B8F1470F 		cmp	r8, #71
 7497 00f0 00F01882 		beq	.L796
1221:src/display.c **** 	      }
 7498              		.loc 1 1221 25 is_stmt 0 view .LVU2403
 7499 00f4 B8F14C0F 		cmp	r8, #76
 7500 00f8 08BF     		it	eq
 7501 00fa 4FF03C08 		moveq	r8, #60
 7502              	.LVL854:
 7503              	.L768:
1223:src/display.c **** 	      q[2] = ltgteq;
 7504              		.loc 1 1223 8 is_stmt 1 view .LVU2404
 7505 00fe 8E49     		ldr	r1, .L870+16
 7506 0100 FFF7FEFF 		bl	scopy
 7507              	.LVL855:
1224:src/display.c **** 
 7508              		.loc 1 1224 8 view .LVU2405
1224:src/display.c **** 
 7509              		.loc 1 1224 13 is_stmt 0 view .LVU2406
ARM GAS  /tmp/ccPzxiH4.s 			page 234


 7510 0104 84F80080 		strb	r8, [r4]
1226:src/display.c **** 		goto skip;
 7511              		.loc 1 1226 8 is_stmt 1 view .LVU2407
1226:src/display.c **** 		goto skip;
 7512              		.loc 1 1226 12 is_stmt 0 view .LVU2408
 7513 0108 0121     		movs	r1, #1
 7514 010a 2846     		mov	r0, r5
 7515 010c FFF7FEFF 		bl	pixel_length
 7516              	.LVL856:
1226:src/display.c **** 		goto skip;
 7517              		.loc 1 1226 11 view .LVU2409
 7518 0110 2C28     		cmp	r0, #44
 7519 0112 31DD     		ble	.L719
1229:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7520              		.loc 1 1229 8 is_stmt 1 view .LVU2410
1229:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7521              		.loc 1 1229 14 is_stmt 0 view .LVU2411
 7522 0114 4FF00008 		mov	r8, #0
 7523              	.LVL857:
1229:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7524              		.loc 1 1229 14 view .LVU2412
 7525 0118 04F8038C 		strb	r8, [r4, #-3]
1230:src/display.c **** 		goto skip;
 7526              		.loc 1 1230 8 is_stmt 1 view .LVU2413
1230:src/display.c **** 		goto skip;
 7527              		.loc 1 1230 12 is_stmt 0 view .LVU2414
 7528 011c 0121     		movs	r1, #1
 7529 011e 2846     		mov	r0, r5
 7530 0120 FFF7FEFF 		bl	pixel_length
 7531              	.LVL858:
1230:src/display.c **** 		goto skip;
 7532              		.loc 1 1230 11 view .LVU2415
 7533 0124 2C28     		cmp	r0, #44
 7534 0126 27DD     		ble	.L719
1233:src/display.c **** 	    }
 7535              		.loc 1 1233 8 is_stmt 1 view .LVU2416
1233:src/display.c **** 	    }
 7536              		.loc 1 1233 39 is_stmt 0 view .LVU2417
 7537 0128 7A1B     		subs	r2, r7, r5
1233:src/display.c **** 	    }
 7538              		.loc 1 1233 8 view .LVU2418
 7539 012a 4146     		mov	r1, r8
 7540 012c C2F12A02 		rsb	r2, r2, #42
 7541 0130 3846     		mov	r0, r7
 7542 0132 FFF7FEFF 		bl	xset
 7543              	.LVL859:
 7544              	.L761:
1233:src/display.c **** 	    }
 7545              		.loc 1 1233 8 view .LVU2419
 7546              	.LBE456:
1236:src/display.c **** 	    int extra_pixels;
 7547              		.loc 1 1236 4 is_stmt 1 view .LVU2420
1236:src/display.c **** 	    int extra_pixels;
 7548              		.loc 1 1236 10 is_stmt 0 view .LVU2421
 7549 0136 0C23     		movs	r3, #12
 7550 0138 0193     		str	r3, [sp, #4]
1236:src/display.c **** 	    int extra_pixels;
ARM GAS  /tmp/ccPzxiH4.s 			page 235


 7551              		.loc 1 1236 27 is_stmt 1 view .LVU2422
 7552 013a 0EE0     		b	.L770
 7553              	.LVL860:
 7554              	.L862:
 7555              	.LBB457:
1244:src/display.c **** 
 7556              		.loc 1 1244 6 is_stmt 0 view .LVU2423
 7557 013c 019A     		ldr	r2, [sp, #4]
 7558 013e 0A32     		adds	r2, r2, #10
 7559 0140 FFF7FEFF 		bl	xset
 7560              	.LVL861:
1246:src/display.c **** 	  }
 7561              		.loc 1 1246 6 is_stmt 1 view .LVU2424
1246:src/display.c **** 	  }
 7562              		.loc 1 1246 30 is_stmt 0 view .LVU2425
 7563 0144 B4F12902 		subs	r2, r4, #41
1246:src/display.c **** 	  }
 7564              		.loc 1 1246 8 view .LVU2426
 7565 0148 019B     		ldr	r3, [sp, #4]
1246:src/display.c **** 	  }
 7566              		.loc 1 1246 30 view .LVU2427
 7567 014a 48BF     		it	mi
 7568 014c A4F12602 		submi	r2, r4, #38
1246:src/display.c **** 	  }
 7569              		.loc 1 1246 8 view .LVU2428
 7570 0150 A3EBA203 		sub	r3, r3, r2, asr #2
 7571              	.LBE457:
1236:src/display.c **** 	    int extra_pixels;
 7572              		.loc 1 1236 4 view .LVU2429
 7573 0154 012B     		cmp	r3, #1
 7574              	.LBB458:
1246:src/display.c **** 	  }
 7575              		.loc 1 1246 8 view .LVU2430
 7576 0156 0193     		str	r3, [sp, #4]
 7577              	.LBE458:
1236:src/display.c **** 	    int extra_pixels;
 7578              		.loc 1 1236 27 is_stmt 1 view .LVU2431
1236:src/display.c **** 	    int extra_pixels;
 7579              		.loc 1 1236 4 is_stmt 0 view .LVU2432
 7580 0158 0EDD     		ble	.L719
 7581              	.LVL862:
 7582              	.L770:
 7583              	.LBB459:
1237:src/display.c **** 
 7584              		.loc 1 1237 6 is_stmt 1 view .LVU2433
1239:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
 7585              		.loc 1 1239 6 view .LVU2434
 7586 015a 01AA     		add	r2, sp, #4
 7587 015c 3946     		mov	r1, r7
 7588 015e 3046     		mov	r0, r6
 7589 0160 FFF7FEFF 		bl	set_x_dn
 7590              	.LVL863:
1240:src/display.c **** 	    if (extra_pixels <= 0)
 7591              		.loc 1 1240 6 view .LVU2435
1240:src/display.c **** 	    if (extra_pixels <= 0)
 7592              		.loc 1 1240 21 is_stmt 0 view .LVU2436
 7593 0164 0121     		movs	r1, #1
ARM GAS  /tmp/ccPzxiH4.s 			page 236


 7594 0166 2846     		mov	r0, r5
 7595 0168 FFF7FEFF 		bl	pixel_length
 7596              	.LVL864:
1244:src/display.c **** 
 7597              		.loc 1 1244 6 is_stmt 1 view .LVU2437
1240:src/display.c **** 	    if (extra_pixels <= 0)
 7598              		.loc 1 1240 21 is_stmt 0 view .LVU2438
 7599 016c 0446     		mov	r4, r0
 7600              	.LVL865:
1241:src/display.c **** 	      break;
 7601              		.loc 1 1241 6 is_stmt 1 view .LVU2439
1241:src/display.c **** 	      break;
 7602              		.loc 1 1241 9 is_stmt 0 view .LVU2440
 7603 016e 2C2C     		cmp	r4, #44
1244:src/display.c **** 
 7604              		.loc 1 1244 6 view .LVU2441
 7605 0170 4FF00001 		mov	r1, #0
 7606 0174 3846     		mov	r0, r7
 7607              	.LVL866:
1241:src/display.c **** 	      break;
 7608              		.loc 1 1241 9 view .LVU2442
 7609 0176 E1DC     		bgt	.L862
 7610              	.LVL867:
 7611              	.L719:
1241:src/display.c **** 	      break;
 7612              		.loc 1 1241 9 view .LVU2443
 7613              	.LBE459:
 7614              	.LBE455:
1251:src/display.c ****     }
 7615              		.loc 1 1251 11 is_stmt 1 view .LVU2444
 7616              	.LBB462:
 7617              	.LBI462:
3505:src/display.c **** 	if (no_status_top) return;
 7618              		.loc 1 3505 19 view .LVU2445
 7619              	.LBB463:
3506:src/display.c **** 	if (State2.runmode) {
 7620              		.loc 1 3506 2 view .LVU2446
3506:src/display.c **** 	if (State2.runmode) {
 7621              		.loc 1 3506 6 is_stmt 0 view .LVU2447
 7622 0178 704B     		ldr	r3, .L870+20
3506:src/display.c **** 	if (State2.runmode) {
 7623              		.loc 1 3506 5 view .LVU2448
 7624 017a B3F90010 		ldrsh	r1, [r3]
 7625 017e 59B9     		cbnz	r1, .L715
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7626              		.loc 1 3507 2 is_stmt 1 view .LVU2449
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7627              		.loc 1 3507 6 is_stmt 0 view .LVU2450
 7628 0180 6A4B     		ldr	r3, .L870+4
 7629 0182 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3507:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7630              		.loc 1 3507 5 view .LVU2451
 7631 0184 5806     		lsls	r0, r3, #25
 7632 0186 40F19780 		bpl	.L773
3508:src/display.c **** 	}
 7633              		.loc 1 3508 4 is_stmt 1 view .LVU2452
 7634 018a 1A06     		lsls	r2, r3, #24
ARM GAS  /tmp/ccPzxiH4.s 			page 237


 7635 018c 40F19880 		bpl	.L855
 7636              	.L799:
3511:src/display.c **** 	}
 7637              		.loc 1 3511 4 is_stmt 0 view .LVU2453
 7638 0190 0121     		movs	r1, #1
 7639              	.L775:
 7640              	.LVL868:
 7641              	.LBB464:
 7642              	.LBI464:
3360:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7643              		.loc 1 3360 19 is_stmt 1 view .LVU2454
 7644              	.LBB465:
3361:src/display.c ****       }
 7645              		.loc 1 3361 2 view .LVU2455
 7646 0192 2846     		mov	r0, r5
 7647 0194 FFF7FEFF 		bl	s_s_sized.constprop.0
 7648              	.LVL869:
 7649              	.L715:
3361:src/display.c ****       }
 7650              		.loc 1 3361 2 is_stmt 0 view .LVU2456
 7651              	.LBE465:
 7652              	.LBE464:
 7653              	.LBE463:
 7654              	.LBE462:
1252:src/display.c **** #endif //top_row
 7655              		.loc 1 1252 5 view .LVU2457
 7656 0198 17B0     		add	sp, sp, #92
 7657              		.cfi_remember_state
 7658              		.cfi_def_cfa_offset 28
 7659              		@ sp needed
 7660 019a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7661              	.LVL870:
 7662              	.L857:
 7663              		.cfi_restore_state
1003:src/display.c **** #else
 7664              		.loc 1 1003 36 discriminator 1 view .LVU2458
 7665 019e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1003:src/display.c **** #else
 7666              		.loc 1 1003 32 discriminator 1 view .LVU2459
 7667 01a2 5007     		lsls	r0, r2, #29
 7668 01a4 00F1A980 		bmi	.L863
 7669              	.L729:
1024:src/display.c **** 	    *p++ = shift_char;
 7670              		.loc 1 1024 4 is_stmt 1 view .LVU2460
1024:src/display.c **** 	    *p++ = shift_char;
 7671              		.loc 1 1024 7 is_stmt 0 view .LVU2461
 7672 01a8 202F     		cmp	r7, #32
 7673 01aa 00F00E81 		beq	.L730
 7674              	.L732:
1025:src/display.c **** 	    *p++ = '\006';
 7675              		.loc 1 1025 6 is_stmt 1 view .LVU2462
 7676              	.LVL871:
1026:src/display.c **** 	  }
 7677              		.loc 1 1026 11 is_stmt 0 view .LVU2463
 7678 01ae 0623     		movs	r3, #6
1025:src/display.c **** 	    *p++ = '\006';
 7679              		.loc 1 1025 11 view .LVU2464
ARM GAS  /tmp/ccPzxiH4.s 			page 238


 7680 01b0 8DF82C70 		strb	r7, [sp, #44]
1026:src/display.c **** 	  }
 7681              		.loc 1 1026 6 is_stmt 1 view .LVU2465
 7682              	.LVL872:
1026:src/display.c **** 	  }
 7683              		.loc 1 1026 11 is_stmt 0 view .LVU2466
 7684 01b4 8DF82D30 		strb	r3, [sp, #45]
1026:src/display.c **** 	  }
 7685              		.loc 1 1026 8 view .LVU2467
 7686 01b8 0DF12E00 		add	r0, sp, #46
 7687              	.LVL873:
 7688              	.L731:
1032:src/display.c **** 	  *p++ = ' ';
 7689              		.loc 1 1032 2 is_stmt 1 view .LVU2468
1032:src/display.c **** 	  *p++ = ' ';
 7690              		.loc 1 1032 6 is_stmt 0 view .LVU2469
 7691 01bc 5B4C     		ldr	r4, .L870+4
 7692 01be 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1032:src/display.c **** 	  *p++ = ' ';
 7693              		.loc 1 1032 5 view .LVU2470
 7694 01c0 9A07     		lsls	r2, r3, #30
 7695 01c2 00F1CF80 		bmi	.L864
1037:src/display.c **** 	  *p++ = ' ';
 7696              		.loc 1 1037 2 is_stmt 1 view .LVU2471
1037:src/display.c **** 	  *p++ = ' ';
 7697              		.loc 1 1037 5 is_stmt 0 view .LVU2472
 7698 01c6 5B07     		lsls	r3, r3, #29
 7699 01c8 00F1FA80 		bmi	.L865
1043:src/display.c **** 	  if (State2.wascomplex) {
 7700              		.loc 1 1043 2 is_stmt 1 view .LVU2473
1043:src/display.c **** 	  if (State2.wascomplex) {
 7701              		.loc 1 1043 5 is_stmt 0 view .LVU2474
 7702 01cc 202F     		cmp	r7, #32
 7703 01ce 00F07481 		beq	.L866
 7704              	.L735:
1060:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7705              		.loc 1 1060 2 is_stmt 1 view .LVU2475
1060:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7706              		.loc 1 1060 16 is_stmt 0 view .LVU2476
 7707 01d2 D8F80030 		ldr	r3, [r8]
 7708 01d6 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7709 01da C1F30111 		ubfx	r1, r1, #4, #2
1060:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7710              		.loc 1 1060 2 view .LVU2477
 7711 01de 0129     		cmp	r1, #1
 7712 01e0 00F07E81 		beq	.L786
 7713 01e4 564B     		ldr	r3, .L870+24
 7714 01e6 574A     		ldr	r2, .L870+28
 7715 01e8 0229     		cmp	r1, #2
 7716 01ea 14BF     		ite	ne
 7717 01ec 1946     		movne	r1, r3
 7718 01ee 1146     		moveq	r1, r2
 7719              	.L738:
 7720              	.LVL874:
1074:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7721              		.loc 1 1074 2 is_stmt 1 view .LVU2478
1074:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
ARM GAS  /tmp/ccPzxiH4.s 			page 239


 7722              		.loc 1 1074 6 is_stmt 0 view .LVU2479
 7723 01f0 FFF7FEFF 		bl	scopy
 7724              	.LVL875:
1074:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7725              		.loc 1 1074 6 view .LVU2480
 7726 01f4 0446     		mov	r4, r0
 7727              	.LVL876:
1076:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7728              		.loc 1 1076 2 is_stmt 1 view .LVU2481
1076:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7729              		.loc 1 1076 6 is_stmt 0 view .LVU2482
 7730 01f6 FFF7FEFF 		bl	get_trig_mode
 7731              	.LVL877:
1076:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7732              		.loc 1 1076 5 view .LVU2483
 7733 01fa 0228     		cmp	r0, #2
 7734 01fc BCD1     		bne	.L719
1077:src/display.c **** 	}
 7735              		.loc 1 1077 4 is_stmt 1 view .LVU2484
 7736 01fe 5249     		ldr	r1, .L870+32
 7737 0200 2046     		mov	r0, r4
 7738 0202 FFF7FEFF 		bl	scopy
 7739              	.LVL878:
 7740 0206 B7E7     		b	.L719
 7741              	.LVL879:
 7742              	.L856:
 974:src/display.c **** 	    *p++ = '\006';
 7743              		.loc 1 974 6 view .LVU2485
 975:src/display.c **** 	  }
 7744              		.loc 1 975 11 is_stmt 0 view .LVU2486
 7745 0208 0623     		movs	r3, #6
 7746 020a 8DF82D30 		strb	r3, [sp, #45]
 974:src/display.c **** 	    *p++ = '\006';
 7747              		.loc 1 974 11 view .LVU2487
 7748 020e 8DF82C70 		strb	r7, [sp, #44]
 975:src/display.c **** 	  }
 7749              		.loc 1 975 6 is_stmt 1 view .LVU2488
 7750              	.LVL880:
 978:src/display.c **** 	default:
 7751              		.loc 1 978 2 view .LVU2489
 978:src/display.c **** 	default:
 7752              		.loc 1 978 9 is_stmt 0 view .LVU2490
 7753 0212 FFF7FEFF 		bl	int_mode
 7754              	.LVL881:
 7755 0216 0138     		subs	r0, r0, #1
 7756 0218 C0B2     		uxtb	r0, r0
 7757 021a 0228     		cmp	r0, #2
 7758 021c 96BF     		itet	ls
 7759 021e 4B4B     		ldrls	r3, .L870+36
 7760 0220 4B49     		ldrhi	r1, .L870+40
 7761 0222 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7762              	.LVL882:
 985:src/display.c **** 	*q++ = '\006';
 7763              		.loc 1 985 2 is_stmt 1 view .LVU2491
 985:src/display.c **** 	*q++ = '\006';
 7764              		.loc 1 985 6 is_stmt 0 view .LVU2492
 7765 0226 0DF12E00 		add	r0, sp, #46
ARM GAS  /tmp/ccPzxiH4.s 			page 240


 7766              	.LVL883:
 985:src/display.c **** 	*q++ = '\006';
 7767              		.loc 1 985 6 view .LVU2493
 7768 022a FFF7FEFF 		bl	scopy
 7769              	.LVL884:
 986:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7770              		.loc 1 986 7 view .LVU2494
 7771 022e 0646     		mov	r6, r0
 7772 0230 0623     		movs	r3, #6
 7773 0232 06F8013B 		strb	r3, [r6], #1
 985:src/display.c **** 	*q++ = '\006';
 7774              		.loc 1 985 6 view .LVU2495
 7775 0236 0446     		mov	r4, r0
 7776              	.LVL885:
 986:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7777              		.loc 1 986 2 is_stmt 1 view .LVU2496
 987:src/display.c **** 
 7778              		.loc 1 987 2 view .LVU2497
 987:src/display.c **** 
 7779              		.loc 1 987 6 is_stmt 0 view .LVU2498
 7780 0238 FFF7FEFF 		bl	word_size
 7781              	.LVL886:
 7782 023c 0146     		mov	r1, r0
 7783 023e 3046     		mov	r0, r6
 989:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7784              		.loc 1 989 19 view .LVU2499
 7785 0240 444E     		ldr	r6, .L870+44
 7786              	.LVL887:
 987:src/display.c **** 
 7787              		.loc 1 987 6 view .LVU2500
 7788 0242 0222     		movs	r2, #2
 7789 0244 FFF7FEFF 		bl	num_arg_0
 7790              	.LVL888:
 989:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7791              		.loc 1 989 19 view .LVU2501
 7792 0248 3368     		ldr	r3, [r6]
 7793              	.LVL889:
 989:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7794              		.loc 1 989 2 is_stmt 1 view .LVU2502
 989:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7795              		.loc 1 989 5 is_stmt 0 view .LVU2503
 7796 024a 002B     		cmp	r3, #0
 7797 024c 94DD     		ble	.L719
 990:src/display.c **** 	  if (*q == '1')
 7798              		.loc 1 990 4 is_stmt 1 view .LVU2504
 990:src/display.c **** 	  if (*q == '1')
 7799              		.loc 1 990 10 is_stmt 0 view .LVU2505
 7800 024e C3F10702 		rsb	r2, r3, #7
 7801 0252 5200     		lsls	r2, r2, #1
 990:src/display.c **** 	  if (*q == '1')
 7802              		.loc 1 990 6 view .LVU2506
 7803 0254 0192     		str	r2, [sp, #4]
 991:src/display.c **** 	    n += 2;
 7804              		.loc 1 991 4 is_stmt 1 view .LVU2507
 991:src/display.c **** 	    n += 2;
 7805              		.loc 1 991 7 is_stmt 0 view .LVU2508
 7806 0256 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccPzxiH4.s 			page 241


 7807 0258 3129     		cmp	r1, #49
 992:src/display.c **** 	  if (q[1] == '1')
 7808              		.loc 1 992 6 is_stmt 1 view .LVU2509
 992:src/display.c **** 	  if (q[1] == '1')
 7809              		.loc 1 992 8 is_stmt 0 view .LVU2510
 7810 025a 04BF     		itt	eq
 7811 025c 0232     		addeq	r2, r2, #2
 7812 025e 0192     		streq	r2, [sp, #4]
 993:src/display.c **** 	    n += 2;
 7813              		.loc 1 993 4 is_stmt 1 view .LVU2511
 993:src/display.c **** 	    n += 2;
 7814              		.loc 1 993 7 is_stmt 0 view .LVU2512
 7815 0260 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7816 0262 3129     		cmp	r1, #49
 7817 0264 00D1     		bne	.L721
 994:src/display.c **** 	  while (n-- > 0)
 7818              		.loc 1 994 6 is_stmt 1 view .LVU2513
 994:src/display.c **** 	  while (n-- > 0)
 7819              		.loc 1 994 8 is_stmt 0 view .LVU2514
 7820 0266 0232     		adds	r2, r2, #2
 7821              	.L721:
 995:src/display.c **** 	    *p++ = '\006';
 7822              		.loc 1 995 10 is_stmt 1 view .LVU2515
 995:src/display.c **** 	    *p++ = '\006';
 7823              		.loc 1 995 12 is_stmt 0 view .LVU2516
 7824 0268 511E     		subs	r1, r2, #1
 995:src/display.c **** 	    *p++ = '\006';
 7825              		.loc 1 995 10 view .LVU2517
 7826 026a 002A     		cmp	r2, #0
 995:src/display.c **** 	    *p++ = '\006';
 7827              		.loc 1 995 12 view .LVU2518
 7828 026c 0191     		str	r1, [sp, #4]
 995:src/display.c **** 	    *p++ = '\006';
 7829              		.loc 1 995 10 view .LVU2519
 7830 026e 40F33981 		ble	.L852
 996:src/display.c **** 
 7831              		.loc 1 996 11 view .LVU2520
 7832 0272 0621     		movs	r1, #6
 7833              	.L722:
 996:src/display.c **** 
 7834              		.loc 1 996 6 is_stmt 1 view .LVU2521
 7835              	.LVL890:
 996:src/display.c **** 
 7836              		.loc 1 996 11 is_stmt 0 view .LVU2522
 7837 0274 00F8011B 		strb	r1, [r0], #1
 7838              	.LVL891:
 995:src/display.c **** 	    *p++ = '\006';
 7839              		.loc 1 995 10 is_stmt 1 view .LVU2523
 995:src/display.c **** 	    *p++ = '\006';
 7840              		.loc 1 995 12 is_stmt 0 view .LVU2524
 7841 0278 019B     		ldr	r3, [sp, #4]
 7842 027a 5A1E     		subs	r2, r3, #1
 995:src/display.c **** 	    *p++ = '\006';
 7843              		.loc 1 995 10 view .LVU2525
 7844 027c 002B     		cmp	r3, #0
 995:src/display.c **** 	    *p++ = '\006';
 7845              		.loc 1 995 12 view .LVU2526
ARM GAS  /tmp/ccPzxiH4.s 			page 242


 7846 027e 0192     		str	r2, [sp, #4]
 995:src/display.c **** 	    *p++ = '\006';
 7847              		.loc 1 995 10 view .LVU2527
 7848 0280 F8DC     		bgt	.L722
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7849              		.loc 1 998 4 is_stmt 1 view .LVU2528
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7850              		.loc 1 998 11 is_stmt 0 view .LVU2529
 7851 0282 3368     		ldr	r3, [r6]
 7852 0284 0193     		str	r3, [sp, #4]
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7853              		.loc 1 998 27 is_stmt 1 view .LVU2530
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7854              		.loc 1 998 4 is_stmt 0 view .LVU2531
 7855 0286 002B     		cmp	r3, #0
 7856 0288 FFF676AF 		blt	.L719
 7857              	.L780:
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7858              		.loc 1 998 4 view .LVU2532
 7859 028c 274C     		ldr	r4, .L870+4
 7860              	.LVL892:
 7861              	.L727:
 999:src/display.c **** 	}
 7862              		.loc 1 999 6 is_stmt 1 view .LVU2533
 999:src/display.c **** 	}
 7863              		.loc 1 999 19 is_stmt 0 view .LVU2534
 7864 028e 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7865 0290 C2F3C202 		ubfx	r2, r2, #3, #3
 999:src/display.c **** 	}
 7866              		.loc 1 999 11 view .LVU2535
 7867 0294 9A42     		cmp	r2, r3
 7868 0296 0CBF     		ite	eq
 7869 0298 7C23     		moveq	r3, #124
 7870 029a 2723     		movne	r3, #39
 7871              	.LVL893:
 999:src/display.c **** 	}
 7872              		.loc 1 999 11 view .LVU2536
 7873 029c 00F8013B 		strb	r3, [r0], #1
 7874              	.LVL894:
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7875              		.loc 1 998 35 is_stmt 1 view .LVU2537
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7876              		.loc 1 998 36 is_stmt 0 view .LVU2538
 7877 02a0 019B     		ldr	r3, [sp, #4]
 7878 02a2 013B     		subs	r3, r3, #1
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7879              		.loc 1 998 4 view .LVU2539
 7880 02a4 002B     		cmp	r3, #0
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7881              		.loc 1 998 36 view .LVU2540
 7882 02a6 0193     		str	r3, [sp, #4]
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7883              		.loc 1 998 27 is_stmt 1 view .LVU2541
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7884              		.loc 1 998 4 is_stmt 0 view .LVU2542
 7885 02a8 F1DA     		bge	.L727
 7886 02aa 65E7     		b	.L719
ARM GAS  /tmp/ccPzxiH4.s 			page 243


 7887              	.LVL895:
 7888              	.L752:
1251:src/display.c ****     }
 7889              		.loc 1 1251 11 is_stmt 1 view .LVU2543
 7890              	.LBB469:
3505:src/display.c **** 	if (no_status_top) return;
 7891              		.loc 1 3505 19 view .LVU2544
 7892              	.LBB468:
3506:src/display.c **** 	if (State2.runmode) {
 7893              		.loc 1 3506 2 view .LVU2545
3506:src/display.c **** 	if (State2.runmode) {
 7894              		.loc 1 3506 6 is_stmt 0 view .LVU2546
 7895 02ac 234A     		ldr	r2, .L870+20
3506:src/display.c **** 	if (State2.runmode) {
 7896              		.loc 1 3506 5 view .LVU2547
 7897 02ae B2F90020 		ldrsh	r2, [r2]
 7898 02b2 002A     		cmp	r2, #0
 7899 02b4 7FF470AF 		bne	.L715
 7900              	.LVL896:
 7901              	.L773:
3511:src/display.c **** 	}
 7902              		.loc 1 3511 4 is_stmt 1 view .LVU2548
 7903 02b8 1B06     		lsls	r3, r3, #24
 7904 02ba 3FF569AF 		bmi	.L799
 7905              	.LVL897:
 7906              	.LBB466:
 7907              	.LBI466:
3492:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7908              		.loc 1 3492 18 view .LVU2549
 7909              	.LBB467:
3493:src/display.c ****       }
 7910              		.loc 1 3493 2 view .LVU2550
3493:src/display.c ****       }
 7911              		.loc 1 3493 9 is_stmt 0 view .LVU2551
 7912 02be 0021     		movs	r1, #0
 7913              	.LVL898:
 7914              	.L855:
3493:src/display.c ****       }
 7915              		.loc 1 3493 9 view .LVU2552
 7916 02c0 2846     		mov	r0, r5
 7917 02c2 FFF7FEFF 		bl	pixel_length
 7918              	.LVL899:
 7919              	.LBE467:
 7920              	.LBE466:
3511:src/display.c **** 	}
 7921              		.loc 1 3511 4 view .LVU2553
 7922 02c6 2C28     		cmp	r0, #44
 7923 02c8 D4BF     		ite	le
 7924 02ca 0021     		movle	r1, #0
 7925 02cc 0121     		movgt	r1, #1
 7926 02ce 60E7     		b	.L775
 7927              	.LVL900:
 7928              	.L739:
3511:src/display.c **** 	}
 7929              		.loc 1 3511 4 view .LVU2554
 7930              	.LBE468:
 7931              	.LBE469:
ARM GAS  /tmp/ccPzxiH4.s 			page 244


1094:src/display.c **** 	  *p++ = '\007';
 7932              		.loc 1 1094 7 is_stmt 1 view .LVU2555
1094:src/display.c **** 	  *p++ = '\007';
 7933              		.loc 1 1094 10 is_stmt 0 view .LVU2556
 7934 02d0 202F     		cmp	r7, #32
 7935 02d2 18D1     		bne	.L867
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 7936              		.loc 1 1103 3 is_stmt 1 view .LVU2557
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 7937              		.loc 1 1103 9 is_stmt 0 view .LVU2558
 7938 02d4 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 7939              		.loc 1 1103 6 view .LVU2559
 7940 02d8 12F00800 		ands	r0, r2, #8
 7941 02dc 47D1     		bne	.L743
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 7942              		.loc 1 1103 19 discriminator 2 view .LVU2560
 7943 02de 93F8EB17 		ldrb	r1, [r3, #2027]	@ zero_extendqisi2
 7944 02e2 0F07     		lsls	r7, r1, #28
 7945              	.LVL901:
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 7946              		.loc 1 1103 19 discriminator 2 view .LVU2561
 7947 02e4 43D4     		bmi	.L743
1113:src/display.c **** 			q = "\007\307<";
 7948              		.loc 1 1113 8 is_stmt 1 view .LVU2562
1113:src/display.c **** 			q = "\007\307<";
 7949              		.loc 1 1113 23 is_stmt 0 view .LVU2563
 7950 02e6 1349     		ldr	r1, .L870+12
 7951 02e8 0968     		ldr	r1, [r1]
1113:src/display.c **** 			q = "\007\307<";
 7952              		.loc 1 1113 11 view .LVU2564
 7953 02ea 0129     		cmp	r1, #1
 7954 02ec 00F0E280 		beq	.L801
1113:src/display.c **** 			q = "\007\307<";
 7955              		.loc 1 1113 44 discriminator 1 view .LVU2565
 7956 02f0 5707     		lsls	r7, r2, #29
 7957 02f2 79D5     		bpl	.L749
 7958 02f4 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 7959 02f8 45E0     		b	.L781
 7960              	.LVL902:
 7961              	.L863:
1003:src/display.c **** #else
 7962              		.loc 1 1003 36 discriminator 2 view .LVU2566
 7963 02fa 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1003:src/display.c **** #else
 7964              		.loc 1 1003 35 discriminator 2 view .LVU2567
 7965 02fe 5107     		lsls	r1, r2, #29
 7966 0300 3FF59DAE 		bmi	.L728
 7967 0304 50E7     		b	.L729
 7968              	.L867:
1095:src/display.c **** 	  *p++ = '\307';
 7969              		.loc 1 1095 4 is_stmt 1 view .LVU2568
 7970              	.LVL903:
1096:src/display.c **** 	  *p++ = shift_char;
 7971              		.loc 1 1096 4 view .LVU2569
1095:src/display.c **** 	  *p++ = '\307';
 7972              		.loc 1 1095 9 is_stmt 0 view .LVU2570
ARM GAS  /tmp/ccPzxiH4.s 			page 245


 7973 0306 4CF20773 		movw	r3, #50951
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7974              		.loc 1 1155 5 view .LVU2571
 7975 030a 5007     		lsls	r0, r2, #29
1097:src/display.c **** 	  goto no_copy;
 7976              		.loc 1 1097 9 view .LVU2572
 7977 030c 8DF82E70 		strb	r7, [sp, #46]
1095:src/display.c **** 	  *p++ = '\307';
 7978              		.loc 1 1095 9 view .LVU2573
 7979 0310 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1097:src/display.c **** 	  goto no_copy;
 7980              		.loc 1 1097 4 is_stmt 1 view .LVU2574
 7981              	.LVL904:
1098:src/display.c **** 	}
 7982              		.loc 1 1098 4 view .LVU2575
1097:src/display.c **** 	  goto no_copy;
 7983              		.loc 1 1097 6 is_stmt 0 view .LVU2576
 7984 0314 0DF12F07 		add	r7, sp, #47
 7985              	.LVL905:
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7986              		.loc 1 1155 2 is_stmt 1 view .LVU2577
1155:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7987              		.loc 1 1155 5 is_stmt 0 view .LVU2578
 7988 0318 7FF5A6AE 		bpl	.L751
 7989              	.LVL906:
 7990              	.L858:
1156:src/display.c **** 	} else if (State2.runmode) {
 7991              		.loc 1 1156 4 is_stmt 1 view .LVU2579
 7992 031c 0E49     		ldr	r1, .L870+48
 7993 031e 3846     		mov	r0, r7
 7994 0320 FFF7FEFF 		bl	scopy
 7995              	.LVL907:
 7996 0324 28E7     		b	.L719
 7997              	.L871:
 7998 0326 00BF     		.align	2
 7999              	.L870:
 8000 0328 00000000 		.word	.LANCHOR12
 8001 032c 00000000 		.word	StateWhileOn
 8002 0330 44000000 		.word	.LC13
 8003 0334 00000000 		.word	RectPolConv
 8004 0338 70000000 		.word	.LC23
 8005 033c 00000000 		.word	.LANCHOR15
 8006 0340 10000000 		.word	.LC6
 8007 0344 1C000000 		.word	.LC8
 8008 0348 60000000 		.word	.LC20
 8009 034c 00000000 		.word	.LANCHOR13
 8010 0350 00000000 		.word	.LC2
 8011 0354 00000000 		.word	IntMaxWindow
 8012 0358 68000000 		.word	.LC21
 8013 035c 00000000 		.word	main_ram
 8014 0360 00000000 		.word	ShowRegister
 8015              	.LVL908:
 8016              	.L864:
1033:src/display.c **** 	  *p = '\024';
 8017              		.loc 1 1033 4 view .LVU2580
1033:src/display.c **** 	  *p = '\024';
 8018              		.loc 1 1033 9 is_stmt 0 view .LVU2581
ARM GAS  /tmp/ccPzxiH4.s 			page 246


 8019 0364 2022     		movs	r2, #32
1034:src/display.c **** 	  goto skip;
 8020              		.loc 1 1034 7 view .LVU2582
 8021 0366 1423     		movs	r3, #20
1033:src/display.c **** 	  *p = '\024';
 8022              		.loc 1 1033 9 view .LVU2583
 8023 0368 0270     		strb	r2, [r0]
1034:src/display.c **** 	  goto skip;
 8024              		.loc 1 1034 4 is_stmt 1 view .LVU2584
1034:src/display.c **** 	  goto skip;
 8025              		.loc 1 1034 7 is_stmt 0 view .LVU2585
 8026 036a 4370     		strb	r3, [r0, #1]
1035:src/display.c **** 	}
 8027              		.loc 1 1035 4 is_stmt 1 view .LVU2586
 8028 036c 04E7     		b	.L719
 8029              	.LVL909:
 8030              	.L743:
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8031              		.loc 1 1103 33 is_stmt 0 discriminator 3 view .LVU2587
 8032 036e 5107     		lsls	r1, r2, #29
 8033 0370 36D5     		bpl	.L745
1103:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8034              		.loc 1 1103 36 discriminator 4 view .LVU2588
 8035 0372 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 8036 0376 5A07     		lsls	r2, r3, #29
 8037 0378 00F1BC80 		bmi	.L868
1113:src/display.c **** 			q = "\007\307<";
 8038              		.loc 1 1113 8 is_stmt 1 view .LVU2589
1113:src/display.c **** 			q = "\007\307<";
 8039              		.loc 1 1113 23 is_stmt 0 view .LVU2590
 8040 037c 6B4A     		ldr	r2, .L872
 8041 037e 1168     		ldr	r1, [r2]
1113:src/display.c **** 			q = "\007\307<";
 8042              		.loc 1 1113 11 view .LVU2591
 8043 0380 0129     		cmp	r1, #1
 8044 0382 00F09780 		beq	.L801
 8045              	.L781:
1113:src/display.c **** 			q = "\007\307<";
 8046              		.loc 1 1113 57 discriminator 2 view .LVU2592
 8047 0386 03F00C02 		and	r2, r3, #12
 8048 038a 0C2A     		cmp	r2, #12
 8049 038c 00F09280 		beq	.L801
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8050              		.loc 1 1116 8 is_stmt 1 view .LVU2593
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8051              		.loc 1 1116 12 is_stmt 0 view .LVU2594
 8052 0390 207D     		ldrb	r0, [r4, #20]	@ zero_extendqisi2
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8053              		.loc 1 1116 33 view .LVU2595
 8054 0392 03F00402 		and	r2, r3, #4
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8055              		.loc 1 1116 12 view .LVU2596
 8056 0396 20F03F00 		bic	r0, r0, #63
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8057              		.loc 1 1116 33 view .LVU2597
 8058 039a 0243     		orrs	r2, r0, r2
 8059 039c 2AD1     		bne	.L778
ARM GAS  /tmp/ccPzxiH4.s 			page 247


 8060              	.L777:
1127:src/display.c **** 	    q = "\007\307y";
 8061              		.loc 1 1127 9 is_stmt 1 view .LVU2598
1127:src/display.c **** 	    q = "\007\307y";
 8062              		.loc 1 1127 12 is_stmt 0 view .LVU2599
 8063 039e 0229     		cmp	r1, #2
 8064 03a0 00F0BA80 		beq	.L793
1131:src/display.c **** 	    q = "\007\207\007";
 8065              		.loc 1 1131 9 is_stmt 1 view .LVU2600
1131:src/display.c **** 	    q = "\007\207\007";
 8066              		.loc 1 1131 13 is_stmt 0 view .LVU2601
 8067 03a4 FFF7FEFF 		bl	get_trig_mode
 8068              	.LVL910:
1131:src/display.c **** 	    q = "\007\207\007";
 8069              		.loc 1 1131 12 view .LVU2602
 8070 03a8 0228     		cmp	r0, #2
 8071 03aa 00F0B880 		beq	.L794
1137:src/display.c **** #else
 8072              		.loc 1 1137 6 is_stmt 1 view .LVU2603
1137:src/display.c **** #else
 8073              		.loc 1 1137 11 is_stmt 0 view .LVU2604
 8074 03ae FFF7FEFF 		bl	is_dblmode
 8075              	.LVL911:
1137:src/display.c **** #else
 8076              		.loc 1 1137 38 view .LVU2605
 8077 03b2 5F4B     		ldr	r3, .L872+4
 8078 03b4 5F49     		ldr	r1, .L872+8
 8079 03b6 0028     		cmp	r0, #0
 8080 03b8 18BF     		it	ne
 8081 03ba 1946     		movne	r1, r3
 8082 03bc 2846     		mov	r0, r5
 8083 03be 4CE6     		b	.L740
 8084              	.LVL912:
 8085              	.L865:
1038:src/display.c **** 	  *p = '\015';
 8086              		.loc 1 1038 4 is_stmt 1 view .LVU2606
1038:src/display.c **** 	  *p = '\015';
 8087              		.loc 1 1038 9 is_stmt 0 view .LVU2607
 8088 03c0 2022     		movs	r2, #32
1039:src/display.c **** 	  goto skip;
 8089              		.loc 1 1039 7 view .LVU2608
 8090 03c2 0D23     		movs	r3, #13
1038:src/display.c **** 	  *p = '\015';
 8091              		.loc 1 1038 9 view .LVU2609
 8092 03c4 0270     		strb	r2, [r0]
1039:src/display.c **** 	  goto skip;
 8093              		.loc 1 1039 4 is_stmt 1 view .LVU2610
1039:src/display.c **** 	  goto skip;
 8094              		.loc 1 1039 7 is_stmt 0 view .LVU2611
 8095 03c6 4370     		strb	r3, [r0, #1]
1040:src/display.c **** 	}
 8096              		.loc 1 1040 4 is_stmt 1 view .LVU2612
 8097 03c8 D6E6     		b	.L719
 8098              	.LVL913:
 8099              	.L730:
1024:src/display.c **** 	    *p++ = shift_char;
 8100              		.loc 1 1024 30 is_stmt 0 discriminator 1 view .LVU2613
ARM GAS  /tmp/ccPzxiH4.s 			page 248


 8101 03ca FFF7FEFF 		bl	is_dblmode
 8102              	.LVL914:
1024:src/display.c **** 	    *p++ = shift_char;
 8103              		.loc 1 1024 26 discriminator 1 view .LVU2614
 8104 03ce 0028     		cmp	r0, #0
 8105 03d0 3FF4EDAE 		beq	.L732
1029:src/display.c **** 	  }
 8106              		.loc 1 1029 6 is_stmt 1 view .LVU2615
 8107              	.LVL915:
1029:src/display.c **** 	  }
 8108              		.loc 1 1029 11 is_stmt 0 view .LVU2616
 8109 03d4 4423     		movs	r3, #68
 8110 03d6 8DF82C30 		strb	r3, [sp, #44]
1029:src/display.c **** 	  }
 8111              		.loc 1 1029 8 view .LVU2617
 8112 03da 0DF12D00 		add	r0, sp, #45
 8113              	.LVL916:
1029:src/display.c **** 	  }
 8114              		.loc 1 1029 8 view .LVU2618
 8115 03de EDE6     		b	.L731
 8116              	.LVL917:
 8117              	.L745:
1113:src/display.c **** 			q = "\007\307<";
 8118              		.loc 1 1113 8 is_stmt 1 view .LVU2619
1113:src/display.c **** 			q = "\007\307<";
 8119              		.loc 1 1113 23 is_stmt 0 view .LVU2620
 8120 03e0 524A     		ldr	r2, .L872
 8121 03e2 1168     		ldr	r1, [r2]
1113:src/display.c **** 			q = "\007\307<";
 8122              		.loc 1 1113 11 view .LVU2621
 8123 03e4 0129     		cmp	r1, #1
 8124 03e6 65D0     		beq	.L801
 8125              	.L749:
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8126              		.loc 1 1116 8 is_stmt 1 view .LVU2622
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8127              		.loc 1 1116 12 is_stmt 0 view .LVU2623
 8128 03e8 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
1116:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8129              		.loc 1 1116 11 view .LVU2624
 8130 03ea 12F0C00F 		tst	r2, #192
 8131 03ee D6D0     		beq	.L777
 8132 03f0 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 8133              	.L778:
1117:src/display.c **** 		}
 8134              		.loc 1 1117 4 is_stmt 1 view .LVU2625
1117:src/display.c **** 		}
 8135              		.loc 1 1117 28 is_stmt 0 view .LVU2626
 8136 03f4 5048     		ldr	r0, .L872+12
 8137 03f6 5149     		ldr	r1, .L872+16
 8138 03f8 13F0020F 		tst	r3, #2
 8139 03fc 08BF     		it	eq
 8140 03fe 0146     		moveq	r1, r0
 8141 0400 2846     		mov	r0, r5
 8142 0402 2AE6     		b	.L740
 8143              	.LVL918:
 8144              	.L861:
ARM GAS  /tmp/ccPzxiH4.s 			page 249


 8145              	.LBB470:
1182:src/display.c **** #else
 8146              		.loc 1 1182 40 discriminator 1 view .LVU2627
 8147 0404 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1182:src/display.c **** #else
 8148              		.loc 1 1182 34 discriminator 1 view .LVU2628
 8149 0408 5007     		lsls	r0, r2, #29
 8150 040a 0CD5     		bpl	.L763
1182:src/display.c **** #else
 8151              		.loc 1 1182 40 discriminator 2 view .LVU2629
 8152 040c 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1182:src/display.c **** #else
 8153              		.loc 1 1182 39 discriminator 2 view .LVU2630
 8154 0410 5107     		lsls	r1, r2, #29
 8155 0412 08D5     		bpl	.L763
1182:src/display.c **** #else
 8156              		.loc 1 1182 63 discriminator 5 view .LVU2631
 8157 0414 1207     		lsls	r2, r2, #28
 8158 0416 7FF550AE 		bpl	.L764
1182:src/display.c **** #else
 8159              		.loc 1 1182 120 discriminator 6 view .LVU2632
 8160 041a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
1182:src/display.c **** #else
 8161              		.loc 1 1182 81 discriminator 6 view .LVU2633
 8162 041e 12F0C00F 		tst	r2, #192
 8163 0422 7FF44AAE 		bne	.L764
 8164              	.L763:
 8165              	.LBB460:
1186:src/display.c **** 
 8166              		.loc 1 1186 8 is_stmt 1 view .LVU2634
1188:src/display.c **** 	      UState.nothousands = 1;
 8167              		.loc 1 1188 8 is_stmt 0 view .LVU2635
 8168 0426 2A22     		movs	r2, #42
 8169 0428 0021     		movs	r1, #0
 8170 042a 2846     		mov	r0, r5
1186:src/display.c **** 
 8171              		.loc 1 1186 44 view .LVU2636
 8172 042c 93F8E777 		ldrb	r7, [r3, #2023]	@ zero_extendqisi2
 8173              	.LVL919:
1186:src/display.c **** 
 8174              		.loc 1 1186 44 view .LVU2637
 8175 0430 434C     		ldr	r4, .L872+20
1188:src/display.c **** 	      UState.nothousands = 1;
 8176              		.loc 1 1188 8 view .LVU2638
 8177 0432 FFF7FEFF 		bl	xset
 8178              	.LVL920:
1189:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8179              		.loc 1 1189 27 view .LVU2639
 8180 0436 D8F80020 		ldr	r2, [r8]
 8181 043a 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8182 043e 43F04003 		orr	r3, r3, #64
 8183 0442 82F8E737 		strb	r3, [r2, #2023]
1190:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8184              		.loc 1 1190 8 view .LVU2640
 8185 0446 2946     		mov	r1, r5
 8186 0448 3046     		mov	r0, r6
 8187 044a FFF7FEFF 		bl	set_x_hms
ARM GAS  /tmp/ccPzxiH4.s 			page 250


 8188              	.LVL921:
1191:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8189              		.loc 1 1191 27 view .LVU2641
 8190 044e D8F80030 		ldr	r3, [r8]
 8191 0452 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
1186:src/display.c **** 
 8192              		.loc 1 1186 44 view .LVU2642
 8193 0456 C7F38017 		ubfx	r7, r7, #6, #1
 8194              	.LVL922:
1188:src/display.c **** 	      UState.nothousands = 1;
 8195              		.loc 1 1188 8 is_stmt 1 view .LVU2643
1189:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8196              		.loc 1 1189 8 view .LVU2644
1190:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8197              		.loc 1 1190 8 view .LVU2645
1191:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8198              		.loc 1 1191 8 view .LVU2646
1191:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8199              		.loc 1 1191 27 is_stmt 0 view .LVU2647
 8200 045a 67F38612 		bfi	r2, r7, #6, #1
 8201 045e 83F8E727 		strb	r2, [r3, #2023]
1196:src/display.c **** 	      while (*p) {
 8202              		.loc 1 1196 8 is_stmt 1 view .LVU2648
 8203              	.LVL923:
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8204              		.loc 1 1197 8 view .LVU2649
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8205              		.loc 1 1197 14 view .LVU2650
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8206              		.loc 1 1197 15 is_stmt 0 view .LVU2651
 8207 0462 4021     		movs	r1, #64
1191:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8208              		.loc 1 1191 27 view .LVU2652
 8209 0464 0522     		movs	r2, #5
 8210 0466 05E0     		b	.L766
 8211              	.LVL924:
 8212              	.L869:
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8213              		.loc 1 1197 15 view .LVU2653
 8214 0468 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8215              	.LVL925:
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8216              		.loc 1 1197 14 view .LVU2654
 8217 046c 0029     		cmp	r1, #0
 8218 046e 3FF483AE 		beq	.L719
 8219 0472 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8220              	.LVL926:
 8221              	.L766:
1198:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8222              		.loc 1 1198 3 is_stmt 1 view .LVU2655
 8223 0474 2846     		mov	r0, r5
 8224 0476 FFF7FEFF 		bl	replace_char
 8225              	.LVL927:
1199:src/display.c **** 		  goto skip;
 8226              		.loc 1 1199 3 view .LVU2656
1199:src/display.c **** 		  goto skip;
 8227              		.loc 1 1199 7 is_stmt 0 view .LVU2657
ARM GAS  /tmp/ccPzxiH4.s 			page 251


 8228 047a 0121     		movs	r1, #1
 8229 047c 2846     		mov	r0, r5
 8230 047e FFF7FEFF 		bl	pixel_length
 8231              	.LVL928:
1202:src/display.c **** 	      }
 8232              		.loc 1 1202 3 is_stmt 1 view .LVU2658
1197:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8233              		.loc 1 1197 14 view .LVU2659
1199:src/display.c **** 		  goto skip;
 8234              		.loc 1 1199 6 is_stmt 0 view .LVU2660
 8235 0482 2C28     		cmp	r0, #44
 8236 0484 F0DC     		bgt	.L869
 8237 0486 77E6     		b	.L719
 8238              	.LVL929:
 8239              	.L860:
1199:src/display.c **** 		  goto skip;
 8240              		.loc 1 1199 6 view .LVU2661
 8241              	.LBE460:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8242              		.loc 1 1170 78 discriminator 2 view .LVU2662
 8243 0488 FFF7FEFF 		bl	stack_size
 8244              	.LVL930:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8245              		.loc 1 1170 65 discriminator 2 view .LVU2663
 8246 048c D9F80010 		ldr	r1, [r9]
 8247 0490 6330     		adds	r0, r0, #99
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8248              		.loc 1 1170 49 discriminator 2 view .LVU2664
 8249 0492 8842     		cmp	r0, r1
 8250 0494 FFF600AE 		blt	.L755
1171:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8251              		.loc 1 1171 14 view .LVU2665
 8252 0498 FFF7FEFF 		bl	get_cmdline
 8253              	.LVL931:
1171:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8254              		.loc 1 1171 10 view .LVU2666
 8255 049c 0028     		cmp	r0, #0
 8256 049e 38D0     		beq	.L757
1171:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8257              		.loc 1 1171 28 discriminator 1 view .LVU2667
 8258 04a0 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 8259 04a2 002B     		cmp	r3, #0
 8260 04a4 35D1     		bne	.L757
1172:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8261              		.loc 1 1172 10 view .LVU2668
 8262 04a6 16B1     		cbz	r6, .L758
1172:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8263              		.loc 1 1172 31 discriminator 1 view .LVU2669
 8264 04a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1172:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8265              		.loc 1 1172 13 discriminator 1 view .LVU2670
 8266 04aa 5E06     		lsls	r6, r3, #25
 8267 04ac 31D5     		bpl	.L757
 8268              	.L758:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8269              		.loc 1 1170 7 discriminator 5 view .LVU2671
 8270 04ae D9F80010 		ldr	r1, [r9]
ARM GAS  /tmp/ccPzxiH4.s 			page 252


 8271 04b2 F2E5     		b	.L759
 8272              	.LVL932:
 8273              	.L801:
1170:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8274              		.loc 1 1170 7 discriminator 5 view .LVU2672
 8275              	.LBE470:
1114:src/display.c **** 		}
 8276              		.loc 1 1114 6 view .LVU2673
 8277 04b4 2349     		ldr	r1, .L872+24
 920:src/display.c ****       int n;
 8278              		.loc 1 920 22 view .LVU2674
 8279 04b6 2846     		mov	r0, r5
 8280 04b8 CFE5     		b	.L740
 8281              	.LVL933:
 8282              	.L866:
1043:src/display.c **** 	  if (State2.wascomplex) {
 8283              		.loc 1 1043 28 discriminator 1 view .LVU2675
 8284 04ba 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1043:src/display.c **** 	  if (State2.wascomplex) {
 8285              		.loc 1 1043 24 discriminator 1 view .LVU2676
 8286 04bc 13F0C00F 		tst	r3, #192
 8287 04c0 25D1     		bne	.L784
1043:src/display.c **** 	  if (State2.wascomplex) {
 8288              		.loc 1 1043 60 discriminator 2 view .LVU2677
 8289 04c2 1A4B     		ldr	r3, .L872
 8290 04c4 1B68     		ldr	r3, [r3]
1043:src/display.c **** 	  if (State2.wascomplex) {
 8291              		.loc 1 1043 46 discriminator 2 view .LVU2678
 8292 04c6 002B     		cmp	r3, #0
 8293 04c8 3FF483AE 		beq	.L735
1044:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8294              		.loc 1 1044 4 is_stmt 1 view .LVU2679
1047:src/display.c **** 	    if (RectPolConv == 1) {
 8295              		.loc 1 1047 9 view .LVU2680
1048:src/display.c **** 	      q = "\007\306<";
 8296              		.loc 1 1048 6 view .LVU2681
1052:src/display.c **** 	    }
 8297              		.loc 1 1052 10 is_stmt 0 view .LVU2682
 8298 04cc 1E49     		ldr	r1, .L872+28
 8299 04ce 1F4A     		ldr	r2, .L872+32
 8300 04d0 012B     		cmp	r3, #1
 8301 04d2 18BF     		it	ne
 8302 04d4 1146     		movne	r1, r2
 8303              	.L736:
 8304              	.LVL934:
1055:src/display.c **** 
 8305              		.loc 1 1055 4 is_stmt 1 view .LVU2683
1055:src/display.c **** 
 8306              		.loc 1 1055 8 is_stmt 0 view .LVU2684
 8307 04d6 2846     		mov	r0, r5
 8308              	.LVL935:
1055:src/display.c **** 
 8309              		.loc 1 1055 8 view .LVU2685
 8310 04d8 FFF7FEFF 		bl	scopy
 8311              	.LVL936:
1055:src/display.c **** 
 8312              		.loc 1 1055 8 view .LVU2686
ARM GAS  /tmp/ccPzxiH4.s 			page 253


 8313 04dc 0746     		mov	r7, r0
 8314              	.LVL937:
1057:src/display.c **** 	}
 8315              		.loc 1 1057 4 is_stmt 1 view .LVU2687
 8316 04de C7E5     		b	.L737
 8317              	.LVL938:
 8318              	.L786:
1066:src/display.c **** #endif
 8319              		.loc 1 1066 19 is_stmt 0 view .LVU2688
 8320 04e0 1B49     		ldr	r1, .L872+36
 8321 04e2 85E6     		b	.L738
 8322              	.LVL939:
 8323              	.L852:
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8324              		.loc 1 998 4 is_stmt 1 view .LVU2689
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8325              		.loc 1 998 11 is_stmt 0 view .LVU2690
 8326 04e4 0193     		str	r3, [sp, #4]
 998:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8327              		.loc 1 998 27 is_stmt 1 view .LVU2691
 8328 04e6 D1E6     		b	.L780
 8329              	.LVL940:
 8330              	.L859:
 8331              	.LBB471:
1167:src/display.c **** 		  }
 8332              		.loc 1 1167 7 view .LVU2692
 8333 04e8 02AE     		add	r6, sp, #8
 8334 04ea 3046     		mov	r0, r6
 8335 04ec 6F21     		movs	r1, #111
 8336 04ee FFF7FEFF 		bl	getRegister
 8337              	.LVL941:
 8338 04f2 D6E5     		b	.L754
 8339              	.LVL942:
 8340              	.L868:
1167:src/display.c **** 		  }
 8341              		.loc 1 1167 7 is_stmt 0 view .LVU2693
 8342              	.LBE471:
1104:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
 8343              		.loc 1 1104 4 is_stmt 1 view .LVU2694
1105:src/display.c **** 			}
 8344              		.loc 1 1105 5 view .LVU2695
1108:src/display.c **** 			}
 8345              		.loc 1 1108 5 view .LVU2696
1104:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
 8346              		.loc 1 1104 7 is_stmt 0 view .LVU2697
 8347 04f4 1B07     		lsls	r3, r3, #28
1105:src/display.c **** 			}
 8348              		.loc 1 1105 32 view .LVU2698
 8349 04f6 47BF     		ittee	mi
 8350 04f8 164B     		ldrmi	r3, .L872+40
 8351 04fa 1749     		ldrmi	r1, .L872+44
1108:src/display.c **** 			}
 8352              		.loc 1 1108 30 view .LVU2699
 8353 04fc 174B     		ldrpl	r3, .L872+48
 8354 04fe 1849     		ldrpl	r1, .L872+52
 8355 0500 0028     		cmp	r0, #0
 8356 0502 18BF     		it	ne
ARM GAS  /tmp/ccPzxiH4.s 			page 254


 8357 0504 1946     		movne	r1, r3
 8358              	.LVL943:
1110:src/display.c **** 			goto skip;
 8359              		.loc 1 1110 4 is_stmt 1 view .LVU2700
 8360 0506 2846     		mov	r0, r5
 8361 0508 FFF7FEFF 		bl	scopy
 8362              	.LVL944:
1111:src/display.c **** 		}
 8363              		.loc 1 1111 4 view .LVU2701
 8364 050c 34E6     		b	.L719
 8365              	.LVL945:
 8366              	.L784:
1045:src/display.c **** 	  }
 8367              		.loc 1 1045 8 is_stmt 0 view .LVU2702
 8368 050e 0A49     		ldr	r1, .L872+12
 8369 0510 E1E7     		b	.L736
 8370              	.LVL946:
 8371              	.L757:
1045:src/display.c **** 	  }
 8372              		.loc 1 1045 8 view .LVU2703
 8373 0512 D9F80010 		ldr	r1, [r9]
 8374 0516 BFE5     		b	.L755
 8375              	.LVL947:
 8376              	.L793:
1128:src/display.c **** 	  }
 8377              		.loc 1 1128 8 view .LVU2704
 8378 0518 1249     		ldr	r1, .L872+56
 920:src/display.c ****       int n;
 8379              		.loc 1 920 22 view .LVU2705
 8380 051a 2846     		mov	r0, r5
 8381 051c 9DE5     		b	.L740
 8382              	.L794:
1132:src/display.c **** 	  }
 8383              		.loc 1 1132 8 view .LVU2706
 8384 051e 1249     		ldr	r1, .L872+60
 920:src/display.c ****       int n;
 8385              		.loc 1 920 22 view .LVU2707
 8386 0520 2846     		mov	r0, r5
 8387 0522 9AE5     		b	.L740
 8388              	.LVL948:
 8389              	.L796:
 8390              	.LBB472:
 8391              	.LBB461:
1220:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8392              		.loc 1 1220 25 view .LVU2708
 8393 0524 4FF03E08 		mov	r8, #62
 8394              	.LVL949:
1220:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8395              		.loc 1 1220 25 view .LVU2709
 8396 0528 E9E5     		b	.L768
 8397              	.L873:
 8398 052a 00BF     		.align	2
 8399              	.L872:
 8400 052c 00000000 		.word	RectPolConv
 8401 0530 58000000 		.word	.LC18
 8402 0534 5C000000 		.word	.LC19
 8403 0538 08000000 		.word	.LC4
ARM GAS  /tmp/ccPzxiH4.s 			page 255


 8404 053c 54000000 		.word	.LC17
 8405 0540 00000000 		.word	.LANCHOR14
 8406 0544 4C000000 		.word	.LC15
 8407 0548 04000000 		.word	.LC3
 8408 054c 0C000000 		.word	.LC5
 8409 0550 14000000 		.word	.LC7
 8410 0554 24000000 		.word	.LC9
 8411 0558 34000000 		.word	.LC11
 8412 055c 2C000000 		.word	.LC10
 8413 0560 3C000000 		.word	.LC12
 8414 0564 48000000 		.word	.LC14
 8415 0568 50000000 		.word	.LC16
 8416              	.LBE461:
 8417              	.LBE472:
 8418              		.cfi_endproc
 8419              	.LFE16:
 8421              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8422              		.align	2
 8423              	.LC24:
 8424 0000 0D00     		.ascii	"\015\000"
 8425 0002 0000     		.align	2
 8426              	.LC25:
 8427 0004 060600   		.ascii	"\006\006\000"
 8428 0007 00       		.align	2
 8429              	.LC27:
 8430 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8430      492C2057 
 8430      77414C74 
 8430      4500
 8431 0016 0000     		.align	2
 8432              	.LC28:
 8433 0018 48595000 		.ascii	"HYP\000"
 8434              		.align	2
 8435              	.LC29:
 8436 001c 7F060600 		.ascii	"\177\006\006\000"
 8437              		.align	2
 8438              	.LC32:
 8439 0020 3020746F 		.ascii	"0 to 255\000"
 8439      20323535 
 8439      00
 8440 0029 000000   		.align	2
 8441              	.LC33:
 8442 002c 46726565 		.ascii	"Free:\000"
 8442      3A00
 8443 0032 0000     		.align	2
 8444              	.LC34:
 8445 0034 202C2046 		.ascii	" , FL. \000"
 8445      4C2E2000 
 8446              		.align	2
 8447              	.LC35:
 8448 003c 52656773 		.ascii	"Regs:\000"
 8448      3A00
 8449 0042 0000     		.align	2
 8450              	.LC36:
 8451 0044 20910606 		.ascii	" \221\006\006+\000"
 8451      2B00
 8452 004a 0000     		.align	2
ARM GAS  /tmp/ccPzxiH4.s 			page 256


 8453              	.LC37:
 8454 004c 202C204C 		.ascii	" , Loc. \000"
 8454      6F632E20 
 8454      00
 8455 0055 000000   		.align	2
 8456              	.LC38:
 8457 0058 464C2000 		.ascii	"FL \000"
 8458              		.align	2
 8459              	.LC39:
 8460 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8460      06413A44 
 8460      064C494A 
 8460      4B00
 8461 006a 0000     		.align	2
 8462              	.LC40:
 8463 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8463      302D2E31 
 8463      3500
 8464 0076 0000     		.align	2
 8465              	.LC41:
 8466 0078 43414C4C 		.ascii	"CALLS\000"
 8466      5300
 8467 007e 0000     		.align	2
 8468              	.LC42:
 8469 0080 52656720 		.ascii	"Reg \000"
 8469      00
 8470 0085 000000   		.align	2
 8471              	.LC43:
 8472 0088 00       		.ascii	"\000"
 8473 0089 000000   		.align	2
 8474              	.LC44:
 8475 008c 202D2D2D 		.ascii	" ---\000"
 8475      00
 8476 0091 000000   		.align	2
 8477              	.LC31:
 8478 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8478      093E0A00 
 8479              		.align	2
 8480              	.LC30:
 8481 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8481      41424344 
 8481      4C494A4B 
 8481      00
 8482              		.section	.text.display,"ax",%progbits
 8483              		.align	1
 8484              		.p2align 2,,3
 8485              		.global	display
 8486              		.syntax unified
 8487              		.thumb
 8488              		.thumb_func
 8489              		.fpu fpv4-sp-d16
 8491              	display:
 8492              	.LFB33:
2976:src/display.c **** 	int i, j;
 8493              		.loc 1 2976 26 is_stmt 1 view -0
 8494              		.cfi_startproc
 8495              		@ args = 0, pretend = 0, frame = 152
ARM GAS  /tmp/ccPzxiH4.s 			page 257


 8496              		@ frame_needed = 0, uses_anonymous_args = 0
2977:src/display.c **** 	char buf[40], *bp = buf;
 8497              		.loc 1 2977 2 view .LVU2711
2978:src/display.c **** 	const char *p;
 8498              		.loc 1 2978 2 view .LVU2712
2976:src/display.c **** 	int i, j;
 8499              		.loc 1 2976 26 is_stmt 0 view .LVU2713
 8500 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8501              		.cfi_def_cfa_offset 36
 8502              		.cfi_offset 4, -36
 8503              		.cfi_offset 5, -32
 8504              		.cfi_offset 6, -28
 8505              		.cfi_offset 7, -24
 8506              		.cfi_offset 8, -20
 8507              		.cfi_offset 9, -16
 8508              		.cfi_offset 10, -12
 8509              		.cfi_offset 11, -8
 8510              		.cfi_offset 14, -4
 8511 0004 2DED028B 		vpush.64	{d8}
 8512              		.cfi_def_cfa_offset 44
 8513              		.cfi_offset 80, -44
 8514              		.cfi_offset 81, -40
2981:src/display.c **** 	int skip = 0;
 8515              		.loc 1 2981 24 view .LVU2714
 8516 0008 AF4C     		ldr	r4, .L1178
2976:src/display.c **** 	int i, j;
 8517              		.loc 1 2976 26 view .LVU2715
 8518 000a A7B0     		sub	sp, sp, #156
 8519              		.cfi_def_cfa_offset 200
 8520              	.LVL950:
2979:src/display.c **** 	int annuc = 0;
 8521              		.loc 1 2979 2 is_stmt 1 view .LVU2716
2980:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8522              		.loc 1 2980 2 view .LVU2717
2981:src/display.c **** 	int skip = 0;
 8523              		.loc 1 2981 2 view .LVU2718
2981:src/display.c **** 	int skip = 0;
 8524              		.loc 1 2981 24 is_stmt 0 view .LVU2719
 8525 000c 94F80E80 		ldrb	r8, [r4, #14]	@ zero_extendqisi2
 8526              	.LVL951:
2982:src/display.c **** 	int x_disp = 0;
 8527              		.loc 1 2982 2 is_stmt 1 view .LVU2720
2983:src/display.c **** 	const int shift = cur_shift();
 8528              		.loc 1 2983 2 view .LVU2721
2984:src/display.c **** 
 8529              		.loc 1 2984 2 view .LVU2722
2984:src/display.c **** 
 8530              		.loc 1 2984 20 is_stmt 0 view .LVU2723
 8531 0010 FFF7FEFF 		bl	cur_shift
 8532              	.LVL952:
2988:src/display.c **** 	  State2.disp_freeze = 0;
 8533              		.loc 1 2988 6 view .LVU2724
 8534 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8535              	.LVL953:
2988:src/display.c **** 	  State2.disp_freeze = 0;
 8536              		.loc 1 2988 2 is_stmt 1 view .LVU2725
2988:src/display.c **** 	  State2.disp_freeze = 0;
ARM GAS  /tmp/ccPzxiH4.s 			page 258


 8537              		.loc 1 2988 5 is_stmt 0 view .LVU2726
 8538 0016 13F01007 		ands	r7, r3, #16
 8539 001a 40F09480 		bne	.L1137
2998:src/display.c **** 	  reset_7_segment();
 8540              		.loc 1 2998 2 is_stmt 1 view .LVU2727
2998:src/display.c **** 	  reset_7_segment();
 8541              		.loc 1 2998 6 is_stmt 0 view .LVU2728
 8542 001e AB4E     		ldr	r6, .L1178+4
 8543 0020 3568     		ldr	r5, [r6]
2998:src/display.c **** 	  reset_7_segment();
 8544              		.loc 1 2998 5 view .LVU2729
 8545 0022 002D     		cmp	r5, #0
 8546 0024 4CD1     		bne	.L1138
3004:src/display.c **** 
 8547              		.loc 1 3004 2 is_stmt 1 view .LVU2730
 8548 0026 8246     		mov	r10, r0
 8549 0028 FFF7FEFF 		bl	reset_disp
 8550              	.LVL954:
3006:src/display.c **** 	if (State2.cmplx  && !cata) {
 8551              		.loc 1 3006 2 view .LVU2731
 8552 002c 1CA8     		add	r0, sp, #112
 8553              	.LVL955:
3006:src/display.c **** 	if (State2.cmplx  && !cata) {
 8554              		.loc 1 3006 2 is_stmt 0 view .LVU2732
 8555 002e 2822     		movs	r2, #40
 8556 0030 2946     		mov	r1, r5
 8557 0032 FFF7FEFF 		bl	xset
 8558              	.LVL956:
3007:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8559              		.loc 1 3007 2 is_stmt 1 view .LVU2733
3007:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8560              		.loc 1 3007 6 is_stmt 0 view .LVU2734
 8561 0036 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
3007:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8562              		.loc 1 3007 5 view .LVU2735
 8563 0038 9F07     		lsls	r7, r3, #30
 8564 003a 03D5     		bpl	.L1016
3007:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8565              		.loc 1 3007 20 discriminator 1 view .LVU2736
 8566 003c B8F1000F 		cmp	r8, #0
 8567 0040 00F0B780 		beq	.L1139
 8568              	.L1016:
2978:src/display.c **** 	const char *p;
 8569              		.loc 1 2978 17 view .LVU2737
 8570 0044 0DF17009 		add	r9, sp, #112
 8571              	.LVL957:
 8572              	.L879:
3011:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8573              		.loc 1 3011 2 is_stmt 1 view .LVU2738
3011:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8574              		.loc 1 3011 5 is_stmt 0 view .LVU2739
 8575 0048 D806     		lsls	r0, r3, #27
 8576 004a 00F19081 		bmi	.L1140
3019:src/display.c **** 	  set_status(S_SURE);
 8577              		.loc 1 3019 9 is_stmt 1 view .LVU2740
3019:src/display.c **** 	  set_status(S_SURE);
 8578              		.loc 1 3019 13 is_stmt 0 view .LVU2741
ARM GAS  /tmp/ccPzxiH4.s 			page 259


 8579 004e 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
3019:src/display.c **** 	  set_status(S_SURE);
 8580              		.loc 1 3019 12 view .LVU2742
 8581 0050 5107     		lsls	r1, r2, #29
 8582 0052 40F0B880 		bne	.L1141
3021:src/display.c **** 	  bp = scopy(bp, "HYP");
 8583              		.loc 1 3021 9 is_stmt 1 view .LVU2743
3021:src/display.c **** 	  bp = scopy(bp, "HYP");
 8584              		.loc 1 3021 12 is_stmt 0 view .LVU2744
 8585 0056 9A06     		lsls	r2, r3, #26
 8586 0058 00F19D80 		bmi	.L1142
3026:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8587              		.loc 1 3026 9 is_stmt 1 view .LVU2745
3026:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8588              		.loc 1 3026 12 is_stmt 0 view .LVU2746
 8589 005c D907     		lsls	r1, r3, #31
 8590 005e 00F1DB81 		bmi	.L1143
3034:src/display.c **** 	  /* Commands with arguments */
 8591              		.loc 1 3034 9 is_stmt 1 view .LVU2747
3034:src/display.c **** 	  /* Commands with arguments */
 8592              		.loc 1 3034 13 is_stmt 0 view .LVU2748
 8593 0062 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
3034:src/display.c **** 	  /* Commands with arguments */
 8594              		.loc 1 3034 12 view .LVU2749
 8595 0064 8A06     		lsls	r2, r1, #26
 8596 0066 40F1B381 		bpl	.L889
3037:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8597              		.loc 1 3037 4 is_stmt 1 view .LVU2750
3037:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8598              		.loc 1 3037 8 is_stmt 0 view .LVU2751
 8599 006a E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
3037:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8600              		.loc 1 3037 7 view .LVU2752
 8601 006c 4D2B     		cmp	r3, #77
 8602 006e 00F03782 		beq	.L890
3037:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8603              		.loc 1 3037 28 discriminator 1 view .LVU2753
 8604 0072 03F16C02 		add	r2, r3, #108
 8605 0076 D2B2     		uxtb	r2, r2
 8606 0078 012A     		cmp	r2, #1
 8607 007a 40F23182 		bls	.L890
 8608              	.L891:
3040:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8609              		.loc 1 3040 4 is_stmt 1 view .LVU2754
3040:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8610              		.loc 1 3040 35 is_stmt 0 view .LVU2755
 8611 007e 0622     		movs	r2, #6
 8612 0080 9349     		ldr	r1, .L1178+8
 8613 0082 02EB0313 		add	r3, r2, r3, lsl #4
3040:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8614              		.loc 1 3040 9 view .LVU2756
 8615 0086 1944     		add	r1, r1, r3
 8616 0088 4846     		mov	r0, r9
 8617 008a FFF7FEFF 		bl	scopy
 8618              	.LVL958:
3041:src/display.c **** 	  if (State2.dot) {
 8619              		.loc 1 3041 4 is_stmt 1 view .LVU2757
ARM GAS  /tmp/ccPzxiH4.s 			page 260


3041:src/display.c **** 	  if (State2.dot) {
 8620              		.loc 1 3041 9 is_stmt 0 view .LVU2758
 8621 008e 914B     		ldr	r3, .L1178+12
 8622 0090 94F91510 		ldrsb	r1, [r4, #21]
 8623 0094 904A     		ldr	r2, .L1178+16
 8624 0096 12EA2101 		ands	r1, r2, r1, asr #32
 8625 009a 38BF     		it	cc
 8626 009c 1946     		movcc	r1, r3
 8627 009e FFF7FEFF 		bl	scopy
 8628              	.LVL959:
3042:src/display.c **** 	    *bp++ = 's';
 8629              		.loc 1 3042 8 view .LVU2759
 8630 00a2 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8631              	.LVL960:
3042:src/display.c **** 	    *bp++ = 's';
 8632              		.loc 1 3042 4 is_stmt 1 view .LVU2760
3042:src/display.c **** 	    *bp++ = 's';
 8633              		.loc 1 3042 7 is_stmt 0 view .LVU2761
 8634 00a4 5B06     		lsls	r3, r3, #25
 8635 00a6 40F14882 		bpl	.L893
3043:src/display.c **** 	    *bp++ = '_';
 8636              		.loc 1 3043 6 is_stmt 1 view .LVU2762
 8637              	.LVL961:
3043:src/display.c **** 	    *bp++ = '_';
 8638              		.loc 1 3043 12 is_stmt 0 view .LVU2763
 8639 00aa 7322     		movs	r2, #115
 8640              	.LVL962:
 8641              	.L1132:
3047:src/display.c **** 	  } else {
 8642              		.loc 1 3047 12 view .LVU2764
 8643 00ac 5F23     		movs	r3, #95
 8644 00ae 8B4F     		ldr	r7, .L1178+20
 8645 00b0 DFF84892 		ldr	r9, .L1178+52
3046:src/display.c **** 	    *bp++ = '_';
 8646              		.loc 1 3046 12 view .LVU2765
 8647 00b4 0270     		strb	r2, [r0]
3047:src/display.c **** 	  } else {
 8648              		.loc 1 3047 6 is_stmt 1 view .LVU2766
3047:src/display.c **** 	  } else {
 8649              		.loc 1 3047 12 is_stmt 0 view .LVU2767
 8650 00b6 4370     		strb	r3, [r0, #1]
 8651              	.L886:
3025:src/display.c **** 	} else if (State2.gtodot) {
 8652              		.loc 1 3025 4 is_stmt 1 view .LVU2768
 8653 00b8 1CA8     		add	r0, sp, #112
 8654 00ba FFF7FEFF 		bl	set_status
 8655              	.LVL963:
3206:src/display.c **** 	  if (State2.runmode) {
 8656              		.loc 1 3206 2 view .LVU2769
 8657 00be 88E0     		b	.L883
 8658              	.LVL964:
 8659              	.L1138:
2999:src/display.c **** 	  goto only_update_x;
 8660              		.loc 1 2999 4 view .LVU2770
 8661 00c0 FFF7FEFF 		bl	reset_7_segment
 8662              	.LVL965:
3000:src/display.c **** 	}
ARM GAS  /tmp/ccPzxiH4.s 			page 261


 8663              		.loc 1 3000 4 view .LVU2771
2980:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8664              		.loc 1 2980 6 is_stmt 0 view .LVU2772
 8665 00c4 3D46     		mov	r5, r7
 8666 00c6 DFF83492 		ldr	r9, .L1178+52
 8667 00ca 844F     		ldr	r7, .L1178+20
 8668              	.LVL966:
 8669              	.L878:
3209:src/display.c **** 	    if (p == NULL || cata) {
 8670              		.loc 1 3209 6 is_stmt 1 view .LVU2773
3209:src/display.c **** 	    if (p == NULL || cata) {
 8671              		.loc 1 3209 10 is_stmt 0 view .LVU2774
 8672 00cc FFF7FEFF 		bl	get_cmdline
 8673              	.LVL967:
3210:src/display.c **** 	      if (ShowRegister != -1) {
 8674              		.loc 1 3210 6 is_stmt 1 view .LVU2775
3210:src/display.c **** 	      if (ShowRegister != -1) {
 8675              		.loc 1 3210 9 is_stmt 0 view .LVU2776
 8676 00d0 8346     		mov	fp, r0
 8677 00d2 18B1     		cbz	r0, .L961
3210:src/display.c **** 	      if (ShowRegister != -1) {
 8678              		.loc 1 3210 20 discriminator 1 view .LVU2777
 8679 00d4 B8F1000F 		cmp	r8, #0
 8680 00d8 00F02581 		beq	.L962
 8681              	.LVL968:
 8682              	.L961:
3211:src/display.c **** #ifdef INCLUDE_C_LOCK
 8683              		.loc 1 3211 8 is_stmt 1 view .LVU2778
3211:src/display.c **** #ifdef INCLUDE_C_LOCK
 8684              		.loc 1 3211 25 is_stmt 0 view .LVU2779
 8685 00dc DFF82082 		ldr	r8, .L1178+56
 8686 00e0 D8F80000 		ldr	r0, [r8]
 8687              	.LVL969:
3211:src/display.c **** #ifdef INCLUDE_C_LOCK
 8688              		.loc 1 3211 11 view .LVU2780
 8689 00e4 431C     		adds	r3, r0, #1
 8690 00e6 00F06681 		beq	.L963
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8691              		.loc 1 3213 3 is_stmt 1 view .LVU2781
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8692              		.loc 1 3213 8 is_stmt 0 view .LVU2782
 8693 00ea 7D49     		ldr	r1, .L1178+24
 8694 00ec 0B68     		ldr	r3, [r1]
 8695 00ee 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8696              		.loc 1 3213 6 view .LVU2783
 8697 00f2 5107     		lsls	r1, r2, #29
 8698 00f4 07D5     		bpl	.L964
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8699              		.loc 1 3213 17 discriminator 1 view .LVU2784
 8700 00f6 93F8DEC7 		ldrb	ip, [r3, #2014]	@ zero_extendqisi2
 8701 00fa 0CF00C0E 		and	lr, ip, #12
 8702 00fe BEF10C0F 		cmp	lr, #12
 8703 0102 00F09B81 		beq	.L1144
 8704              	.L964:
3229:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8705              		.loc 1 3229 5 is_stmt 1 view .LVU2785
ARM GAS  /tmp/ccPzxiH4.s 			page 262


3229:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8706              		.loc 1 3229 41 is_stmt 0 view .LVU2786
 8707 0106 6428     		cmp	r0, #100
 8708 0108 2AD0     		beq	.L1145
 8709              	.L969:
3230:src/display.c **** 		}
 8710              		.loc 1 3230 5 is_stmt 1 view .LVU2787
 8711 010a 0021     		movs	r1, #0
 8712 010c FFF7FEFF 		bl	format_reg
 8713              	.LVL970:
3244:src/display.c **** 	      goto finish;
 8714              		.loc 1 3244 6 view .LVU2788
3244:src/display.c **** 	      goto finish;
 8715              		.loc 1 3244 9 is_stmt 0 view .LVU2789
 8716 0110 3368     		ldr	r3, [r6]
 8717 0112 002B     		cmp	r3, #0
 8718 0114 00F09180 		beq	.L1134
 8719              	.LVL971:
 8720              	.L967:
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 8721              		.loc 1 3299 2 is_stmt 1 view .LVU2790
3300:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8722              		.loc 1 3300 2 view .LVU2791
3301:src/display.c **** 	State2.invalid_disp = 0;
 8723              		.loc 1 3301 2 view .LVU2792
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 8724              		.loc 1 3299 17 is_stmt 0 view .LVU2793
 8725 0118 6369     		ldr	r3, [r4, #20]
 8726 011a 23F02173 		bic	r3, r3, #42205184
 8727 011e 23F48053 		bic	r3, r3, #4096
3301:src/display.c **** 	State2.invalid_disp = 0;
 8728              		.loc 1 3301 15 view .LVU2794
 8729 0122 0022     		movs	r2, #0
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 8730              		.loc 1 3299 17 view .LVU2795
 8731 0124 6361     		str	r3, [r4, #20]
3303:src/display.c **** 	DispMsg = CNULL;
 8732              		.loc 1 3303 15 view .LVU2796
 8733 0126 6423     		movs	r3, #100
3301:src/display.c **** 	State2.invalid_disp = 0;
 8734              		.loc 1 3301 15 view .LVU2797
 8735 0128 6274     		strb	r2, [r4, #17]
3302:src/display.c **** 	ShowRegister = regX_idx;
 8736              		.loc 1 3302 2 is_stmt 1 view .LVU2798
3303:src/display.c **** 	DispMsg = CNULL;
 8737              		.loc 1 3303 2 view .LVU2799
3304:src/display.c **** 	DispPlot = 0;
 8738              		.loc 1 3304 10 is_stmt 0 view .LVU2800
 8739 012a 3A60     		str	r2, [r7]
3305:src/display.c **** 	State2.disp_small = 0;
 8740              		.loc 1 3305 11 view .LVU2801
 8741 012c A9F80020 		strh	r2, [r9]	@ movhi
3303:src/display.c **** 	DispMsg = CNULL;
 8742              		.loc 1 3303 15 view .LVU2802
 8743 0130 C8F80030 		str	r3, [r8]
3304:src/display.c **** 	DispPlot = 0;
 8744              		.loc 1 3304 2 is_stmt 1 view .LVU2803
ARM GAS  /tmp/ccPzxiH4.s 			page 263


3305:src/display.c **** 	State2.disp_small = 0;
 8745              		.loc 1 3305 2 view .LVU2804
3306:src/display.c **** 	if (WasDataEntry) {
 8746              		.loc 1 3306 2 view .LVU2805
3307:src/display.c **** 	  finish_7_segment();
 8747              		.loc 1 3307 2 view .LVU2806
 8748              	.L1013:
3308:src/display.c **** 	  lcd_refresh();
 8749              		.loc 1 3308 4 view .LVU2807
 8750 0134 FFF7FEFF 		bl	finish_7_segment
 8751              	.LVL972:
3309:src/display.c **** 	}
 8752              		.loc 1 3309 4 view .LVU2808
 8753 0138 6A4B     		ldr	r3, .L1178+28
 8754 013a 9847     		blx	r3
 8755              	.LVL973:
3317:src/display.c **** #endif
 8756              		.loc 1 3317 7 is_stmt 0 view .LVU2809
 8757 013c 27B0     		add	sp, sp, #156
 8758              		.cfi_remember_state
 8759              		.cfi_def_cfa_offset 44
 8760              		@ sp needed
 8761 013e BDEC028B 		vldm	sp!, {d8}
 8762              		.cfi_restore 80
 8763              		.cfi_restore 81
 8764              		.cfi_def_cfa_offset 36
 8765 0142 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8766              	.LVL974:
 8767              	.L1137:
 8768              		.cfi_restore_state
2989:src/display.c **** 	  State2.disp_temp = 1;
 8769              		.loc 1 2989 4 is_stmt 1 view .LVU2810
2990:src/display.c **** #ifdef CONSOLE
 8770              		.loc 1 2990 4 view .LVU2811
2994:src/display.c **** 	  return;
 8771              		.loc 1 2994 12 is_stmt 0 view .LVU2812
 8772 0146 684A     		ldr	r2, .L1178+32
2989:src/display.c **** 	  State2.disp_temp = 1;
 8773              		.loc 1 2989 23 view .LVU2813
 8774 0148 23F03003 		bic	r3, r3, #48
 8775 014c 43F02003 		orr	r3, r3, #32
2994:src/display.c **** 	  return;
 8776              		.loc 1 2994 12 view .LVU2814
 8777 0150 0021     		movs	r1, #0
2989:src/display.c **** 	  State2.disp_temp = 1;
 8778              		.loc 1 2989 23 view .LVU2815
 8779 0152 E375     		strb	r3, [r4, #23]
2994:src/display.c **** 	  return;
 8780              		.loc 1 2994 4 is_stmt 1 view .LVU2816
2994:src/display.c **** 	  return;
 8781              		.loc 1 2994 12 is_stmt 0 view .LVU2817
 8782 0154 1160     		str	r1, [r2]
2995:src/display.c **** 	}
 8783              		.loc 1 2995 4 is_stmt 1 view .LVU2818
3317:src/display.c **** #endif
 8784              		.loc 1 3317 7 is_stmt 0 view .LVU2819
 8785 0156 27B0     		add	sp, sp, #156
ARM GAS  /tmp/ccPzxiH4.s 			page 264


 8786              		.cfi_remember_state
 8787              		.cfi_def_cfa_offset 44
 8788              		@ sp needed
 8789 0158 BDEC028B 		vldm	sp!, {d8}
 8790              		.cfi_restore 80
 8791              		.cfi_restore 81
 8792              		.cfi_def_cfa_offset 36
 8793 015c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8794              	.LVL975:
 8795              	.L1145:
 8796              		.cfi_restore_state
3229:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8797              		.loc 1 3229 44 discriminator 1 view .LVU2820
 8798 0160 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
3229:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8799              		.loc 1 3229 41 discriminator 1 view .LVU2821
 8800 0162 11F00101 		ands	r1, r1, #1
 8801 0166 D0D1     		bne	.L969
 8802              	.LVL976:
3230:src/display.c **** 		}
 8803              		.loc 1 3230 5 is_stmt 1 view .LVU2822
 8804 0168 FFF7FEFF 		bl	format_reg
 8805              	.LVL977:
3244:src/display.c **** 	      goto finish;
 8806              		.loc 1 3244 6 view .LVU2823
3244:src/display.c **** 	      goto finish;
 8807              		.loc 1 3244 9 is_stmt 0 view .LVU2824
 8808 016c 3368     		ldr	r3, [r6]
 8809 016e 002B     		cmp	r3, #0
 8810 0170 D2D1     		bne	.L967
 8811              	.LVL978:
 8812              	.L968:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8813              		.loc 1 3276 2 is_stmt 1 view .LVU2825
 8814 0172 FFF7FEFF 		bl	set_annunciators
 8815              	.LVL979:
3277:src/display.c **** 	  ShowRPN = 0;
 8816              		.loc 1 3277 2 view .LVU2826
3277:src/display.c **** 	  ShowRPN = 0;
 8817              		.loc 1 3277 50 is_stmt 0 view .LVU2827
 8818 0176 3B68     		ldr	r3, [r7]
 8819 0178 002B     		cmp	r3, #0
 8820 017a 60D1     		bne	.L881
3277:src/display.c **** 	  ShowRPN = 0;
 8821              		.loc 1 3277 69 discriminator 3 view .LVU2828
 8822 017c B9F90030 		ldrsh	r3, [r9]
 8823 0180 002B     		cmp	r3, #0
 8824 0182 5CD1     		bne	.L881
3277:src/display.c **** 	  ShowRPN = 0;
 8825              		.loc 1 3277 81 discriminator 4 view .LVU2829
 8826 0184 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 8827 0186 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 8828 0188 03F00403 		and	r3, r3, #4
 8829 018c 1343     		orrs	r3, r3, r2
 8830 018e 56D1     		bne	.L881
 8831 0190 DFF854A1 		ldr	r10, .L1178+32
 8832 0194 5BE0     		b	.L1004
ARM GAS  /tmp/ccPzxiH4.s 			page 265


 8833              	.LVL980:
 8834              	.L1142:
3022:src/display.c **** 	  if (! State2.dot)
 8835              		.loc 1 3022 4 is_stmt 1 view .LVU2830
3022:src/display.c **** 	  if (! State2.dot)
 8836              		.loc 1 3022 9 is_stmt 0 view .LVU2831
 8837 0196 5549     		ldr	r1, .L1178+36
 8838 0198 4846     		mov	r0, r9
 8839 019a FFF7FEFF 		bl	scopy
 8840              	.LVL981:
3023:src/display.c **** 	    *bp++ = '\235';
 8841              		.loc 1 3023 8 view .LVU2832
 8842 019e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8843              	.LVL982:
3023:src/display.c **** 	    *bp++ = '\235';
 8844              		.loc 1 3023 4 is_stmt 1 view .LVU2833
3023:src/display.c **** 	    *bp++ = '\235';
 8845              		.loc 1 3023 7 is_stmt 0 view .LVU2834
 8846 01a0 5F06     		lsls	r7, r3, #25
 8847 01a2 00F18081 		bmi	.L1133
3024:src/display.c **** 	  set_status(buf);
 8848              		.loc 1 3024 6 is_stmt 1 view .LVU2835
 8849              	.LVL983:
3024:src/display.c **** 	  set_status(buf);
 8850              		.loc 1 3024 12 is_stmt 0 view .LVU2836
 8851 01a6 9D23     		movs	r3, #157
 8852 01a8 4C4F     		ldr	r7, .L1178+20
 8853 01aa DFF85091 		ldr	r9, .L1178+52
 8854 01ae 0370     		strb	r3, [r0]
 8855 01b0 82E7     		b	.L886
 8856              	.LVL984:
 8857              	.L1139:
3008:src/display.c **** 	  set_status(buf);
 8858              		.loc 1 3008 4 is_stmt 1 view .LVU2837
3008:src/display.c **** 	  set_status(buf);
 8859              		.loc 1 3008 10 is_stmt 0 view .LVU2838
 8860 01b2 1423     		movs	r3, #20
3009:src/display.c **** 	}
 8861              		.loc 1 3009 4 view .LVU2839
 8862 01b4 1CA8     		add	r0, sp, #112
3008:src/display.c **** 	  set_status(buf);
 8863              		.loc 1 3008 10 view .LVU2840
 8864 01b6 8DF87030 		strb	r3, [sp, #112]
3009:src/display.c **** 	}
 8865              		.loc 1 3009 4 is_stmt 1 view .LVU2841
3008:src/display.c **** 	  set_status(buf);
 8866              		.loc 1 3008 7 is_stmt 0 view .LVU2842
 8867 01ba 0DF17109 		add	r9, sp, #113
 8868              	.LVL985:
3009:src/display.c **** 	}
 8869              		.loc 1 3009 4 view .LVU2843
 8870 01be FFF7FEFF 		bl	set_status
 8871              	.LVL986:
 8872 01c2 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8873 01c4 40E7     		b	.L879
 8874              	.L1141:
3020:src/display.c **** 	} else if (State2.hyp) {
ARM GAS  /tmp/ccPzxiH4.s 			page 266


 8875              		.loc 1 3020 4 is_stmt 1 view .LVU2844
 8876 01c6 4A48     		ldr	r0, .L1178+40
 8877 01c8 444F     		ldr	r7, .L1178+20
 8878 01ca DFF83091 		ldr	r9, .L1178+52
 8879              	.LVL987:
3020:src/display.c **** 	} else if (State2.hyp) {
 8880              		.loc 1 3020 4 is_stmt 0 view .LVU2845
 8881 01ce FFF7FEFF 		bl	set_status
 8882              	.LVL988:
3206:src/display.c **** 	  if (State2.runmode) {
 8883              		.loc 1 3206 2 is_stmt 1 view .LVU2846
 8884              	.L883:
3207:src/display.c **** 	  only_update_x:
 8885              		.loc 1 3207 4 view .LVU2847
3207:src/display.c **** 	  only_update_x:
 8886              		.loc 1 3207 8 is_stmt 0 view .LVU2848
 8887 01d2 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
3207:src/display.c **** 	  only_update_x:
 8888              		.loc 1 3207 7 view .LVU2849
 8889 01d4 11F0400A 		ands	r10, r1, #64
 8890 01d8 7FF478AF 		bne	.L878
 8891              	.LBB518:
3248:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8892              		.loc 1 3248 6 is_stmt 1 view .LVU2850
3248:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8893              		.loc 1 3248 24 is_stmt 0 view .LVU2851
 8894 01dc 404B     		ldr	r3, .L1178+24
 8895 01de 1B68     		ldr	r3, [r3]
3248:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8896              		.loc 1 3248 19 view .LVU2852
 8897 01e0 B3F8E087 		ldrh	r8, [r3, #2016]
 8898              	.LVL989:
3249:src/display.c **** 	    const int n = nLIB(pc);
 8899              		.loc 1 3249 6 is_stmt 1 view .LVU2853
3249:src/display.c **** 	    const int n = nLIB(pc);
 8900              		.loc 1 3249 25 is_stmt 0 view .LVU2854
 8901 01e4 4046     		mov	r0, r8
 8902 01e6 FFF7FEFF 		bl	user_pc
 8903              	.LVL990:
3251:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8904              		.loc 1 3251 6 view .LVU2855
 8905 01ea 2822     		movs	r2, #40
3249:src/display.c **** 	    const int n = nLIB(pc);
 8906              		.loc 1 3249 25 view .LVU2856
 8907 01ec 8346     		mov	fp, r0
3251:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8908              		.loc 1 3251 6 view .LVU2857
 8909 01ee 5146     		mov	r1, r10
 8910 01f0 1CA8     		add	r0, sp, #112
 8911 01f2 FFF7FEFF 		bl	xset
 8912              	.LVL991:
3252:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8913              		.loc 1 3252 6 view .LVU2858
 8914 01f6 3F49     		ldr	r1, .L1178+44
3249:src/display.c **** 	    const int n = nLIB(pc);
 8915              		.loc 1 3249 25 view .LVU2859
 8916 01f8 08EE10BA 		vmov	s16, fp	@ int
ARM GAS  /tmp/ccPzxiH4.s 			page 267


 8917              	.LVL992:
3250:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8918              		.loc 1 3250 6 is_stmt 1 view .LVU2860
3252:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8919              		.loc 1 3252 6 is_stmt 0 view .LVU2861
 8920 01fc 0868     		ldr	r0, [r1]
3250:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8921              		.loc 1 3250 20 view .LVU2862
 8922 01fe 4FEA983B 		lsr	fp, r8, #14
 8923              	.LVL993:
3251:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8924              		.loc 1 3251 6 is_stmt 1 view .LVU2863
3252:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8925              		.loc 1 3252 6 view .LVU2864
 8926 0202 5246     		mov	r2, r10
 8927 0204 0121     		movs	r1, #1
 8928 0206 FFF7FEFF 		bl	set_exp
 8929              	.LVL994:
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8930              		.loc 1 3253 6 view .LVU2865
 8931 020a BBF1000F 		cmp	fp, #0
 8932 020e 00F0DD80 		beq	.L1026
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8933              		.loc 1 3253 6 is_stmt 0 discriminator 1 view .LVU2866
 8934 0212 3949     		ldr	r1, .L1178+48
 8935 0214 0BEB8B02 		add	r2, fp, fp, lsl #2
 8936 0218 1144     		add	r1, r1, r2
 8937              	.L1003:
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8938              		.loc 1 3253 6 discriminator 4 view .LVU2867
 8939 021a 1CA8     		add	r0, sp, #112
 8940 021c FFF7FEFF 		bl	scopy_spc
 8941              	.LVL995:
3254:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 8942              		.loc 1 3254 21 discriminator 4 view .LVU2868
 8943 0220 0BF00102 		and	r2, fp, #1
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8944              		.loc 1 3253 6 discriminator 4 view .LVU2869
 8945 0224 18EE101A 		vmov	r1, s16	@ int
 8946 0228 0332     		adds	r2, r2, #3
 8947 022a FFF7FEFF 		bl	num_arg_0
 8948              	.LVL996:
3255:src/display.c **** #if 0
 8949              		.loc 1 3255 6 is_stmt 1 discriminator 4 view .LVU2870
 8950 022e 1CA8     		add	r0, sp, #112
 8951 0230 0921     		movs	r1, #9
 8952 0232 DFF8CC80 		ldr	r8, .L1178+56
 8953              	.LVL997:
3255:src/display.c **** #if 0
 8954              		.loc 1 3255 6 is_stmt 0 discriminator 4 view .LVU2871
 8955 0236 FFF7FEFF 		bl	set_digits_string
 8956              	.LVL998:
 8957              	.L1134:
3255:src/display.c **** #if 0
 8958              		.loc 1 3255 6 discriminator 4 view .LVU2872
 8959              	.LBE518:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
ARM GAS  /tmp/ccPzxiH4.s 			page 268


 8960              		.loc 1 3276 2 is_stmt 1 discriminator 4 view .LVU2873
 8961 023a FFF7FEFF 		bl	set_annunciators
 8962              	.LVL999:
3277:src/display.c **** 	  ShowRPN = 0;
 8963              		.loc 1 3277 2 discriminator 4 view .LVU2874
 8964              	.L881:
3278:src/display.c **** 	  dot(RPN, 0);
 8965              		.loc 1 3278 4 view .LVU2875
3278:src/display.c **** 	  dot(RPN, 0);
 8966              		.loc 1 3278 12 is_stmt 0 view .LVU2876
 8967 023e DFF8A8A0 		ldr	r10, .L1178+32
 8968 0242 0023     		movs	r3, #0
 8969              	.LBB519:
 8970              	.LBB520:
 285:src/display.c **** }
 8971              		.loc 1 285 8 view .LVU2877
 8972 0244 8D20     		movs	r0, #141
 8973              	.LBE520:
 8974              	.LBE519:
3278:src/display.c **** 	  dot(RPN, 0);
 8975              		.loc 1 3278 12 view .LVU2878
 8976 0246 CAF80030 		str	r3, [r10]
3279:src/display.c **** 	}
 8977              		.loc 1 3279 4 is_stmt 1 view .LVU2879
 8978              	.LVL1000:
 8979              	.LBB522:
 8980              	.LBI519:
 283:src/display.c ****   if (on)	set_dot(n);
 8981              		.loc 1 283 6 view .LVU2880
 8982              	.LBB521:
 284:src/display.c ****   else	clr_dot(n);
 8983              		.loc 1 284 3 view .LVU2881
 285:src/display.c **** }
 8984              		.loc 1 285 8 view .LVU2882
 8985 024a FFF7FEFF 		bl	clr_dot
 8986              	.LVL1001:
 8987              	.L1004:
 285:src/display.c **** }
 8988              		.loc 1 285 8 is_stmt 0 view .LVU2883
 8989              	.LBE521:
 8990              	.LBE522:
3282:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8991              		.loc 1 3282 2 is_stmt 1 view .LVU2884
3283:src/display.c **** 
 8992              		.loc 1 3283 4 is_stmt 0 view .LVU2885
 8993 024e DAF80030 		ldr	r3, [r10]
 8994 0252 002B     		cmp	r3, #0
 8995 0254 36D1     		bne	.L1027
3282:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8996              		.loc 1 3282 31 view .LVU2886
 8997 0256 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8998 0258 12F04003 		ands	r3, r2, #64
 8999 025c 08D0     		beq	.L1005
3283:src/display.c **** 
 9000              		.loc 1 3283 8 view .LVU2887
 9001 025e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3283:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 269


 9002              		.loc 1 3283 4 view .LVU2888
 9003 0260 1B07     		lsls	r3, r3, #28
 9004 0262 40F1B180 		bpl	.L1029
3283:src/display.c **** 
 9005              		.loc 1 3283 30 discriminator 3 view .LVU2889
 9006 0266 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9007 0268 012B     		cmp	r3, #1
 9008 026a 01D0     		beq	.L1005
3283:src/display.c **** 
 9009              		.loc 1 3283 60 discriminator 5 view .LVU2890
 9010 026c C2F38003 		ubfx	r3, r2, #2, #1
 9011              	.L1005:
3282:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9012              		.loc 1 3282 19 discriminator 9 view .LVU2891
 9013 0270 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9014 0272 63F34512 		bfi	r2, r3, #5, #1
 9015 0276 E275     		strb	r2, [r4, #23]
3286:src/display.c **** 	  annunciators();
 9016              		.loc 1 3286 2 is_stmt 1 discriminator 9 view .LVU2892
3286:src/display.c **** 	  annunciators();
 9017              		.loc 1 3286 5 is_stmt 0 discriminator 9 view .LVU2893
 9018 0278 FDB1     		cbz	r5, .L1006
3286:src/display.c **** 	  annunciators();
 9019              		.loc 1 3286 36 discriminator 1 view .LVU2894
 9020 027a D3B2     		uxtb	r3, r2
3286:src/display.c **** 	  annunciators();
 9021              		.loc 1 3286 13 discriminator 1 view .LVU2895
 9022 027c 03F02103 		and	r3, r3, #33
 9023 0280 202B     		cmp	r3, #32
 9024 0282 1AD0     		beq	.L1006
 9025              	.L1007:
3287:src/display.c ****  	State2.hms = 0;
 9026              		.loc 1 3287 4 is_stmt 1 view .LVU2896
 9027 0284 FFF7FEFF 		bl	annunciators
 9028              	.LVL1002:
 9029              	.L1008:
3288:src/display.c **** #else
 9030              		.loc 1 3288 3 view .LVU2897
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 9031              		.loc 1 3299 17 is_stmt 0 view .LVU2898
 9032 0288 6369     		ldr	r3, [r4, #20]
 9033 028a 3168     		ldr	r1, [r6]
 9034              	.LDL1:
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 9035              		.loc 1 3299 2 is_stmt 1 view .LVU2899
3300:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9036              		.loc 1 3300 2 view .LVU2900
3301:src/display.c **** 	State2.invalid_disp = 0;
 9037              		.loc 1 3301 2 view .LVU2901
3299:src/display.c **** 	State2.disp_as_alpha = 0;
 9038              		.loc 1 3299 17 is_stmt 0 view .LVU2902
 9039 028c 23F06173 		bic	r3, r3, #58982400
 9040 0290 23F48053 		bic	r3, r3, #4096
3301:src/display.c **** 	State2.invalid_disp = 0;
 9041              		.loc 1 3301 15 view .LVU2903
 9042 0294 0022     		movs	r2, #0
3299:src/display.c **** 	State2.disp_as_alpha = 0;
ARM GAS  /tmp/ccPzxiH4.s 			page 270


 9043              		.loc 1 3299 17 view .LVU2904
 9044 0296 6361     		str	r3, [r4, #20]
3303:src/display.c **** 	DispMsg = CNULL;
 9045              		.loc 1 3303 15 view .LVU2905
 9046 0298 6423     		movs	r3, #100
3301:src/display.c **** 	State2.invalid_disp = 0;
 9047              		.loc 1 3301 15 view .LVU2906
 9048 029a 6274     		strb	r2, [r4, #17]
3302:src/display.c **** 	ShowRegister = regX_idx;
 9049              		.loc 1 3302 2 is_stmt 1 view .LVU2907
3303:src/display.c **** 	DispMsg = CNULL;
 9050              		.loc 1 3303 2 view .LVU2908
3304:src/display.c **** 	DispPlot = 0;
 9051              		.loc 1 3304 10 is_stmt 0 view .LVU2909
 9052 029c 3A60     		str	r2, [r7]
3305:src/display.c **** 	State2.disp_small = 0;
 9053              		.loc 1 3305 11 view .LVU2910
 9054 029e A9F80020 		strh	r2, [r9]	@ movhi
3303:src/display.c **** 	DispMsg = CNULL;
 9055              		.loc 1 3303 15 view .LVU2911
 9056 02a2 C8F80030 		str	r3, [r8]
3304:src/display.c **** 	DispPlot = 0;
 9057              		.loc 1 3304 2 is_stmt 1 view .LVU2912
3305:src/display.c **** 	State2.disp_small = 0;
 9058              		.loc 1 3305 2 view .LVU2913
3306:src/display.c **** 	if (WasDataEntry) {
 9059              		.loc 1 3306 2 view .LVU2914
3307:src/display.c **** 	  finish_7_segment();
 9060              		.loc 1 3307 2 view .LVU2915
3307:src/display.c **** 	  finish_7_segment();
 9061              		.loc 1 3307 5 is_stmt 0 view .LVU2916
 9062 02a6 0029     		cmp	r1, #0
 9063 02a8 7FF444AF 		bne	.L1013
3312:src/display.c **** 	}
 9064              		.loc 1 3312 4 is_stmt 1 view .LVU2917
 9065 02ac FFF7FEFF 		bl	finish_display
 9066              	.LVL1003:
3317:src/display.c **** #endif
 9067              		.loc 1 3317 7 is_stmt 0 view .LVU2918
 9068 02b0 27B0     		add	sp, sp, #156
 9069              		.cfi_remember_state
 9070              		.cfi_def_cfa_offset 44
 9071              		@ sp needed
 9072 02b2 BDEC028B 		vldm	sp!, {d8}
 9073              		.cfi_restore 80
 9074              		.cfi_restore 81
 9075              		.cfi_def_cfa_offset 36
 9076 02b6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9077              	.L1006:
 9078              		.cfi_restore_state
3286:src/display.c **** 	  annunciators();
 9079              		.loc 1 3286 52 discriminator 3 view .LVU2919
 9080 02ba 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9081 02bc 13F0C00F 		tst	r3, #192
 9082 02c0 E2D0     		beq	.L1008
 9083 02c2 DFE7     		b	.L1007
 9084              	.L1027:
ARM GAS  /tmp/ccPzxiH4.s 			page 271


 9085 02c4 0023     		movs	r3, #0
 9086 02c6 D3E7     		b	.L1005
 9087              	.L1179:
 9088              		.align	2
 9089              	.L1178:
 9090 02c8 00000000 		.word	StateWhileOn
 9091 02cc 00000000 		.word	WasDataEntry
 9092 02d0 00000000 		.word	argcmds
 9093 02d4 04000000 		.word	.LC25
 9094 02d8 00000000 		.word	.LC24
 9095 02dc 00000000 		.word	DispMsg
 9096 02e0 00000000 		.word	main_ram
 9097 02e4 31020008 		.word	134218289
 9098 02e8 00000000 		.word	ShowRPN
 9099 02ec 18000000 		.word	.LC28
 9100 02f0 00000000 		.word	.LANCHOR18
 9101 02f4 00000000 		.word	ProgFree
 9102 02f8 00000000 		.word	.LANCHOR19
 9103 02fc 00000000 		.word	DispPlot
 9104 0300 00000000 		.word	ShowRegister
 9105              	.LVL1004:
 9106              	.L947:
3146:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 9107              		.loc 1 3146 11 is_stmt 1 view .LVU2920
3146:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 9108              		.loc 1 3146 15 is_stmt 0 view .LVU2921
 9109 0304 DFF86093 		ldr	r9, .L1180+48
 9110              	.LVL1005:
3146:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 9111              		.loc 1 3146 15 view .LVU2922
 9112 0308 B9F90030 		ldrsh	r3, [r9]
3146:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 9113              		.loc 1 3146 14 view .LVU2923
 9114 030c 002B     		cmp	r3, #0
 9115 030e 40F0AD84 		bne	.L1146
3148:src/display.c **** #if 0
 9116              		.loc 1 3148 11 is_stmt 1 view .LVU2924
3148:src/display.c **** #if 0
 9117              		.loc 1 3148 14 is_stmt 0 view .LVU2925
 9118 0312 0A07     		lsls	r2, r1, #28
 9119 0314 00F1EC84 		bmi	.L1147
 9120              	.LVL1006:
3209:src/display.c **** 	    if (p == NULL || cata) {
 9121              		.loc 1 3209 6 is_stmt 1 view .LVU2926
3209:src/display.c **** 	    if (p == NULL || cata) {
 9122              		.loc 1 3209 10 is_stmt 0 view .LVU2927
 9123 0318 FFF7FEFF 		bl	get_cmdline
 9124              	.LVL1007:
3210:src/display.c **** 	      if (ShowRegister != -1) {
 9125              		.loc 1 3210 6 is_stmt 1 view .LVU2928
3178:src/display.c **** 	  }
 9126              		.loc 1 3178 12 is_stmt 0 view .LVU2929
 9127 031c 0125     		movs	r5, #1
3210:src/display.c **** 	      if (ShowRegister != -1) {
 9128              		.loc 1 3210 9 view .LVU2930
 9129 031e 8346     		mov	fp, r0
 9130 0320 0028     		cmp	r0, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 272


 9131 0322 3FF4DBAE 		beq	.L961
 9132              	.LVL1008:
 9133              	.L962:
3241:src/display.c **** 	      x_disp = 1;
 9134              		.loc 1 3241 8 is_stmt 1 view .LVU2931
 9135              	.LBB523:
 9136              	.LBI523:
1254:src/display.c ****       int i;
 9137              		.loc 1 1254 17 view .LVU2932
 9138              	.LBB524:
1255:src/display.c ****       int gotdot = -1;
 9139              		.loc 1 1255 7 view .LVU2933
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9140              		.loc 1 1256 7 view .LVU2934
1258:src/display.c **** #endif
 9141              		.loc 1 1258 7 view .LVU2935
1262:src/display.c **** #endif
 9142              		.loc 1 1262 7 view .LVU2936
1265:src/display.c **** 	SET_MANT_SIGN;
 9143              		.loc 1 1265 7 view .LVU2937
1265:src/display.c **** 	SET_MANT_SIGN;
 9144              		.loc 1 1265 10 is_stmt 0 view .LVU2938
 9145 0326 9BF80020 		ldrb	r2, [fp]	@ zero_extendqisi2
 9146 032a 2D2A     		cmp	r2, #45
 9147 032c 00F02981 		beq	.L1148
 9148              	.LVL1009:
 9149              	.L972:
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9150              		.loc 1 1270 7 is_stmt 1 view .LVU2939
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9151              		.loc 1 1270 11 is_stmt 0 view .LVU2940
 9152 0330 C14A     		ldr	r2, .L1180
 9153 0332 1268     		ldr	r2, [r2]
 9154 0334 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9155              		.loc 1 1270 10 view .LVU2941
 9156 0338 12F0010A 		ands	r10, r2, #1
 9157 033c 00F0D780 		beq	.L973
 9158              	.LVL1010:
1271:src/display.c **** 	  set_dig(i, *p);
 9159              		.loc 1 1271 12 is_stmt 1 view .LVU2942
 9160 0340 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
1271:src/display.c **** 	  set_dig(i, *p);
 9161              		.loc 1 1271 8 is_stmt 0 view .LVU2943
 9162 0344 4FF00008 		mov	r8, #0
1271:src/display.c **** 	  set_dig(i, *p);
 9163              		.loc 1 1271 2 view .LVU2944
 9164 0348 41B1     		cbz	r1, .L975
 9165              	.LVL1011:
 9166              	.L974:
1272:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9167              		.loc 1 1272 4 is_stmt 1 view .LVU2945
 9168 034a 4046     		mov	r0, r8
 9169 034c FFF7FEFF 		bl	set_dig
 9170              	.LVL1012:
1273:src/display.c **** 	}
 9171              		.loc 1 1273 4 view .LVU2946
ARM GAS  /tmp/ccPzxiH4.s 			page 273


1271:src/display.c **** 	  set_dig(i, *p);
 9172              		.loc 1 1271 12 is_stmt 0 view .LVU2947
 9173 0350 1BF8011F 		ldrb	r1, [fp, #1]!	@ zero_extendqisi2
 9174              	.LVL1013:
1273:src/display.c **** 	}
 9175              		.loc 1 1273 6 view .LVU2948
 9176 0354 08F10908 		add	r8, r8, #9
 9177              	.LVL1014:
1271:src/display.c **** 	  set_dig(i, *p);
 9178              		.loc 1 1271 24 is_stmt 1 view .LVU2949
1271:src/display.c **** 	  set_dig(i, *p);
 9179              		.loc 1 1271 12 view .LVU2950
1271:src/display.c **** 	  set_dig(i, *p);
 9180              		.loc 1 1271 2 is_stmt 0 view .LVU2951
 9181 0358 0029     		cmp	r1, #0
 9182 035a F6D1     		bne	.L974
 9183              	.LVL1015:
 9184              	.L975:
1275:src/display.c ****       } else {
 9185              		.loc 1 1275 2 is_stmt 1 view .LVU2952
 9186 035c FFF7FEFF 		bl	carry_overflow
 9187              	.LVL1016:
1275:src/display.c ****       } else {
 9188              		.loc 1 1275 2 is_stmt 0 view .LVU2953
 9189              	.LBE524:
 9190              	.LBE523:
3244:src/display.c **** 	      goto finish;
 9191              		.loc 1 3244 6 is_stmt 1 view .LVU2954
3244:src/display.c **** 	      goto finish;
 9192              		.loc 1 3244 9 is_stmt 0 view .LVU2955
 9193 0360 3368     		ldr	r3, [r6]
 9194 0362 DFF80883 		ldr	r8, .L1180+52
 9195 0366 002B     		cmp	r3, #0
 9196 0368 3FF403AF 		beq	.L968
 9197 036c D4E6     		b	.L967
 9198              	.LVL1017:
 9199              	.L1140:
 9200              	.LBB551:
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9201              		.loc 1 3012 4 is_stmt 1 view .LVU2956
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9202              		.loc 1 3012 9 is_stmt 0 view .LVU2957
 9203 036e B34B     		ldr	r3, .L1180+4
 9204 0370 B34F     		ldr	r7, .L1180+8
 9205 0372 DFF8F492 		ldr	r9, .L1180+48
 9206              	.LVL1018:
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9207              		.loc 1 3012 9 view .LVU2958
 9208 0376 DFF8F482 		ldr	r8, .L1180+52
 9209              	.LVL1019:
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9210              		.loc 1 3012 9 view .LVU2959
 9211 037a 93E80700 		ldm	r3, {r0, r1, r2}
 9212 037e 13AB     		add	r3, sp, #76
 9213 0380 03C3     		stmia	r3!, {r0, r1}
 9214 0382 23F8022B 		strh	r2, [r3], #2	@ movhi
 9215 0386 0021     		movs	r1, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 274


 9216 0388 120C     		lsrs	r2, r2, #16
3013:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9217              		.loc 1 3013 4 view .LVU2960
 9218 038a AE48     		ldr	r0, .L1180+12
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9219              		.loc 1 3012 9 view .LVU2961
 9220 038c 1A70     		strb	r2, [r3]
 9221 038e CDF85710 		str	r1, [sp, #87]	@ unaligned
3013:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9222              		.loc 1 3013 4 is_stmt 1 view .LVU2962
 9223 0392 FFF7FEFF 		bl	set_digits_string
 9224              	.LVL1020:
3014:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
 9225              		.loc 1 3014 4 view .LVU2963
 9226              	.LBB552:
 9227              	.LBI552:
 339:src/display.c ****   if (res) *res++ = ch;
 9228              		.loc 1 339 14 view .LVU2964
 9229              	.LBB553:
 340:src/display.c ****   else	set_dig(base, ch);
 9230              		.loc 1 340 3 view .LVU2965
 341:src/display.c ****   return res;
 9231              		.loc 1 341 8 view .LVU2966
 9232 0396 7221     		movs	r1, #114
 9233 0398 6C20     		movs	r0, #108
 9234 039a FFF7FEFF 		bl	set_dig
 9235              	.LVL1021:
 342:src/display.c **** }
 9236              		.loc 1 342 3 view .LVU2967
 342:src/display.c **** }
 9237              		.loc 1 342 3 is_stmt 0 view .LVU2968
 9238              	.LBE553:
 9239              	.LBE552:
3015:src/display.c **** 	  set_status(vers);
 9240              		.loc 1 3015 4 is_stmt 1 view .LVU2969
 9241 039e AA49     		ldr	r1, .L1180+16
 9242 03a0 0422     		movs	r2, #4
 9243 03a2 0DF15600 		add	r0, sp, #86
 9244 03a6 FFF7FEFF 		bl	xcopy
 9245              	.LVL1022:
3016:src/display.c **** 	  skip = 1;
 9246              		.loc 1 3016 4 view .LVU2970
 9247 03aa 13A8     		add	r0, sp, #76
 9248 03ac FFF7FEFF 		bl	set_status
 9249              	.LVL1023:
3017:src/display.c **** 	  goto nostk;
 9250              		.loc 1 3017 4 view .LVU2971
3018:src/display.c **** 	} else if (State2.confirm) {
 9251              		.loc 1 3018 4 view .LVU2972
3018:src/display.c **** 	} else if (State2.confirm) {
 9252              		.loc 1 3018 4 is_stmt 0 view .LVU2973
 9253              	.LBE551:
3206:src/display.c **** 	  if (State2.runmode) {
 9254              		.loc 1 3206 2 is_stmt 1 view .LVU2974
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9255              		.loc 1 3276 2 view .LVU2975
 9256 03b0 FFF7FEFF 		bl	set_annunciators
ARM GAS  /tmp/ccPzxiH4.s 			page 275


 9257              	.LVL1024:
3277:src/display.c **** 	  ShowRPN = 0;
 9258              		.loc 1 3277 2 view .LVU2976
 9259 03b4 43E7     		b	.L881
 9260              	.LVL1025:
 9261              	.L963:
3239:src/display.c **** 	    } else {
 9262              		.loc 1 3239 3 view .LVU2977
 9263 03b6 A548     		ldr	r0, .L1180+20
 9264 03b8 2421     		movs	r1, #36
 9265 03ba FFF7FEFF 		bl	set_digits_string
 9266              	.LVL1026:
3244:src/display.c **** 	      goto finish;
 9267              		.loc 1 3244 6 view .LVU2978
3244:src/display.c **** 	      goto finish;
 9268              		.loc 1 3244 9 is_stmt 0 view .LVU2979
 9269 03be 3368     		ldr	r3, [r6]
 9270 03c0 002B     		cmp	r3, #0
 9271 03c2 3FF43AAF 		beq	.L1134
 9272 03c6 A7E6     		b	.L967
 9273              	.LVL1027:
 9274              	.L1029:
3244:src/display.c **** 	      goto finish;
 9275              		.loc 1 3244 9 view .LVU2980
 9276 03c8 0123     		movs	r3, #1
 9277 03ca 51E7     		b	.L1005
 9278              	.LVL1028:
 9279              	.L1026:
 9280              	.LBB554:
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9281              		.loc 1 3253 6 view .LVU2981
 9282 03cc A049     		ldr	r1, .L1180+24
 9283 03ce 24E7     		b	.L1003
 9284              	.LVL1029:
 9285              	.L889:
3253:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9286              		.loc 1 3253 6 view .LVU2982
 9287              	.LBE554:
3065:src/display.c **** 	  *bp++ = 'x';
 9288              		.loc 1 3065 9 is_stmt 1 view .LVU2983
3065:src/display.c **** 	  *bp++ = 'x';
 9289              		.loc 1 3065 19 is_stmt 0 view .LVU2984
 9290 03d0 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
3065:src/display.c **** 	  *bp++ = 'x';
 9291              		.loc 1 3065 12 view .LVU2985
 9292 03d2 072A     		cmp	r2, #7
 9293 03d4 6BD1     		bne	.L1149
3071:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9294              		.loc 1 3071 9 is_stmt 1 view .LVU2986
3071:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9295              		.loc 1 3071 12 is_stmt 0 view .LVU2987
 9296 03d6 B8F1000F 		cmp	r8, #0
 9297 03da 40F08E81 		bne	.L1150
3119:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9298              		.loc 1 3119 9 is_stmt 1 view .LVU2988
3119:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9299              		.loc 1 3119 12 is_stmt 0 view .LVU2989
ARM GAS  /tmp/ccPzxiH4.s 			page 276


 9300 03de 1807     		lsls	r0, r3, #28
 9301 03e0 4ED4     		bmi	.L1151
3127:src/display.c **** 	  show_status();
 9302              		.loc 1 3127 9 is_stmt 1 view .LVU2990
3127:src/display.c **** 	  show_status();
 9303              		.loc 1 3127 19 is_stmt 0 view .LVU2991
 9304 03e2 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
3127:src/display.c **** 	  show_status();
 9305              		.loc 1 3127 12 view .LVU2992
 9306 03e4 002B     		cmp	r3, #0
 9307 03e6 40F0E881 		bne	.L1152
3130:src/display.c **** 	  show_label();
 9308              		.loc 1 3130 9 is_stmt 1 view .LVU2993
3130:src/display.c **** 	  show_label();
 9309              		.loc 1 3130 13 is_stmt 0 view .LVU2994
 9310 03ea E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3130:src/display.c **** 	  show_label();
 9311              		.loc 1 3130 12 view .LVU2995
 9312 03ec 5F07     		lsls	r7, r3, #29
 9313 03ee 00F1A782 		bmi	.L1153
3133:src/display.c **** 	  show_registers();
 9314              		.loc 1 3133 9 is_stmt 1 view .LVU2996
3133:src/display.c **** 	  show_registers();
 9315              		.loc 1 3133 12 is_stmt 0 view .LVU2997
 9316 03f2 1807     		lsls	r0, r3, #28
 9317 03f4 00F10483 		bmi	.L1154
3143:src/display.c **** 	  if (DispMsg) { 
 9318              		.loc 1 3143 9 is_stmt 1 view .LVU2998
3143:src/display.c **** 	  if (DispMsg) { 
 9319              		.loc 1 3143 12 is_stmt 0 view .LVU2999
 9320 03f8 4806     		lsls	r0, r1, #25
 9321 03fa 40F12E83 		bpl	.L946
3144:src/display.c **** 	    set_status(DispMsg);
 9322              		.loc 1 3144 4 is_stmt 1 view .LVU3000
3144:src/display.c **** 	    set_status(DispMsg);
 9323              		.loc 1 3144 8 is_stmt 0 view .LVU3001
 9324 03fe 904F     		ldr	r7, .L1180+8
 9325 0400 D7F800B0 		ldr	fp, [r7]
3144:src/display.c **** 	    set_status(DispMsg);
 9326              		.loc 1 3144 7 view .LVU3002
 9327 0404 BBF1000F 		cmp	fp, #0
 9328 0408 3FF47CAF 		beq	.L947
3145:src/display.c **** 	  } else if (DispPlot) {
 9329              		.loc 1 3145 6 is_stmt 1 view .LVU3003
 9330 040c 5846     		mov	r0, fp
 9331 040e FFF7FEFF 		bl	set_status
 9332              	.LVL1030:
3206:src/display.c **** 	  if (State2.runmode) {
 9333              		.loc 1 3206 2 view .LVU3004
 9334 0412 DFF85492 		ldr	r9, .L1180+48
 9335              	.LVL1031:
3206:src/display.c **** 	  if (State2.runmode) {
 9336              		.loc 1 3206 2 is_stmt 0 view .LVU3005
 9337 0416 DCE6     		b	.L883
 9338              	.LVL1032:
 9339              	.L1143:
3028:src/display.c **** 	  if (State2.numdigit > 0)
ARM GAS  /tmp/ccPzxiH4.s 			page 277


 9340              		.loc 1 3028 4 is_stmt 1 view .LVU3006
3028:src/display.c **** 	  if (State2.numdigit > 0)
 9341              		.loc 1 3028 9 is_stmt 0 view .LVU3007
 9342 0418 2E22     		movs	r2, #46
 9343 041a 8E49     		ldr	r1, .L1180+28
 9344 041c 4846     		mov	r0, r9
 9345 041e FFF7FEFF 		bl	scopy_char
 9346              	.LVL1033:
3029:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9347              		.loc 1 3029 14 view .LVU3008
 9348 0422 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3028:src/display.c **** 	  if (State2.numdigit > 0)
 9349              		.loc 1 3028 9 view .LVU3009
 9350 0424 0346     		mov	r3, r0
 9351              	.LVL1034:
3029:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9352              		.loc 1 3029 4 is_stmt 1 view .LVU3010
3029:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9353              		.loc 1 3029 7 is_stmt 0 view .LVU3011
 9354 0426 002A     		cmp	r2, #0
 9355 0428 55D1     		bne	.L1155
 9356              	.L888:
3032:src/display.c **** 	  set_status(buf);
 9357              		.loc 1 3032 4 is_stmt 1 view .LVU3012
 9358              	.LVL1035:
3032:src/display.c **** 	  set_status(buf);
 9359              		.loc 1 3032 10 is_stmt 0 view .LVU3013
 9360 042a 5F22     		movs	r2, #95
 9361 042c 1A70     		strb	r2, [r3]
3033:src/display.c **** 	} else if (State2.rarg) {
 9362              		.loc 1 3033 4 is_stmt 1 view .LVU3014
 9363 042e 1CA8     		add	r0, sp, #112
 9364              	.LVL1036:
3033:src/display.c **** 	} else if (State2.rarg) {
 9365              		.loc 1 3033 4 is_stmt 0 view .LVU3015
 9366 0430 FFF7FEFF 		bl	set_status
 9367              	.LVL1037:
3206:src/display.c **** 	  if (State2.runmode) {
 9368              		.loc 1 3206 2 is_stmt 1 view .LVU3016
 9369 0434 824F     		ldr	r7, .L1180+8
 9370 0436 DFF83092 		ldr	r9, .L1180+48
 9371 043a CAE6     		b	.L883
 9372              	.LVL1038:
 9373              	.L1144:
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9374              		.loc 1 3213 34 is_stmt 0 discriminator 2 view .LVU3017
 9375 043c 1207     		lsls	r2, r2, #28
 9376 043e 3FF562AE 		bmi	.L964
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9377              		.loc 1 3213 49 discriminator 3 view .LVU3018
 9378 0442 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
3213:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9379              		.loc 1 3213 37 discriminator 3 view .LVU3019
 9380 0446 13F0080A 		ands	r10, r3, #8
 9381 044a 7FF45CAE 		bne	.L964
3214:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9382              		.loc 1 3214 5 is_stmt 1 view .LVU3020
ARM GAS  /tmp/ccPzxiH4.s 			page 278


3214:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9383              		.loc 1 3214 8 is_stmt 0 view .LVU3021
 9384 044e 1CF0100F 		tst	ip, #16
 9385 0452 40F04882 		bne	.L1156
 9386              	.L965:
3218:src/display.c **** 		    State2.hms = 0;
 9387              		.loc 1 3218 5 is_stmt 1 view .LVU3022
3218:src/display.c **** 		    State2.hms = 0;
 9388              		.loc 1 3218 9 is_stmt 0 view .LVU3023
 9389 0456 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3218:src/display.c **** 		    State2.hms = 0;
 9390              		.loc 1 3218 8 view .LVU3024
 9391 0458 13F00101 		ands	r1, r3, #1
 9392 045c 00F0A581 		beq	.L966
3219:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9393              		.loc 1 3219 7 is_stmt 1 view .LVU3025
3219:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9394              		.loc 1 3219 18 is_stmt 0 view .LVU3026
 9395 0460 6FF30003 		bfc	r3, #0, #1
3220:src/display.c **** 		    State2.hms = 1;
 9396              		.loc 1 3220 7 view .LVU3027
 9397 0464 0021     		movs	r1, #0
 9398 0466 6E20     		movs	r0, #110
3219:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9399              		.loc 1 3219 18 view .LVU3028
 9400 0468 E375     		strb	r3, [r4, #23]
3220:src/display.c **** 		    State2.hms = 1;
 9401              		.loc 1 3220 7 is_stmt 1 view .LVU3029
 9402 046a FFF7FEFF 		bl	format_reg
 9403              	.LVL1039:
3221:src/display.c **** 		  }
 9404              		.loc 1 3221 7 view .LVU3030
3221:src/display.c **** 		  }
 9405              		.loc 1 3221 18 is_stmt 0 view .LVU3031
 9406 046e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3244:src/display.c **** 	      goto finish;
 9407              		.loc 1 3244 9 view .LVU3032
 9408 0470 3268     		ldr	r2, [r6]
3221:src/display.c **** 		  }
 9409              		.loc 1 3221 18 view .LVU3033
 9410 0472 43F00103 		orr	r3, r3, #1
 9411 0476 E375     		strb	r3, [r4, #23]
 9412              	.LVL1040:
3244:src/display.c **** 	      goto finish;
 9413              		.loc 1 3244 6 is_stmt 1 view .LVU3034
3244:src/display.c **** 	      goto finish;
 9414              		.loc 1 3244 9 is_stmt 0 view .LVU3035
 9415 0478 002A     		cmp	r2, #0
 9416 047a 3FF47AAE 		beq	.L968
 9417 047e 4BE6     		b	.L967
 9418              	.LVL1041:
 9419              	.L1151:
3120:src/display.c **** 	  if (State2.numdigit > 0) {
 9420              		.loc 1 3120 4 is_stmt 1 view .LVU3036
3120:src/display.c **** 	  if (State2.numdigit > 0) {
 9421              		.loc 1 3120 42 is_stmt 0 view .LVU3037
 9422 0480 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
ARM GAS  /tmp/ccPzxiH4.s 			page 279


 9423 0482 7549     		ldr	r1, .L1180+32
 9424 0484 0423     		movs	r3, #4
 9425 0486 03EB0213 		add	r3, r3, r2, lsl #4
3120:src/display.c **** 	  if (State2.numdigit > 0) {
 9426              		.loc 1 3120 9 view .LVU3038
 9427 048a 1944     		add	r1, r1, r3
 9428 048c 4846     		mov	r0, r9
 9429 048e 2722     		movs	r2, #39
 9430 0490 FFF7FEFF 		bl	scopy_char
 9431              	.LVL1042:
3121:src/display.c **** 	    *bp++ = (char) State2.digval;
 9432              		.loc 1 3121 7 view .LVU3039
 9433 0494 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9434              	.LVL1043:
3121:src/display.c **** 	    *bp++ = (char) State2.digval;
 9435              		.loc 1 3121 4 is_stmt 1 view .LVU3040
3121:src/display.c **** 	    *bp++ = (char) State2.digval;
 9436              		.loc 1 3121 7 is_stmt 0 view .LVU3041
 9437 0496 33B1     		cbz	r3, .L1133
3122:src/display.c **** 	    if (State2.numdigit > 1)
 9438              		.loc 1 3122 6 is_stmt 1 view .LVU3042
 9439              	.LVL1044:
3122:src/display.c **** 	    if (State2.numdigit > 1)
 9440              		.loc 1 3122 14 is_stmt 0 view .LVU3043
 9441 0498 2389     		ldrh	r3, [r4, #8]
 9442 049a 0370     		strb	r3, [r0]
3123:src/display.c **** 	      *bp++ = State2.digval2;
 9443              		.loc 1 3123 6 is_stmt 1 view .LVU3044
3123:src/display.c **** 	      *bp++ = State2.digval2;
 9444              		.loc 1 3123 9 is_stmt 0 view .LVU3045
 9445 049c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9446 049e 012B     		cmp	r3, #1
3124:src/display.c **** 	  }
 9447              		.loc 1 3124 8 is_stmt 1 view .LVU3046
 9448              	.LVL1045:
3124:src/display.c **** 	  }
 9449              		.loc 1 3124 22 is_stmt 0 view .LVU3047
 9450 04a0 84BF     		itt	hi
 9451 04a2 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
3124:src/display.c **** 	  }
 9452              		.loc 1 3124 14 view .LVU3048
 9453 04a4 4370     		strbhi	r3, [r0, #1]
 9454              	.LVL1046:
 9455              	.L1133:
3124:src/display.c **** 	  }
 9456              		.loc 1 3124 14 view .LVU3049
 9457 04a6 664F     		ldr	r7, .L1180+8
 9458 04a8 DFF8BC91 		ldr	r9, .L1180+48
 9459 04ac 04E6     		b	.L886
 9460              	.LVL1047:
 9461              	.L1149:
3066:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9462              		.loc 1 3066 4 is_stmt 1 view .LVU3050
3067:src/display.c **** 	  *bp++ = '_';
 9463              		.loc 1 3067 33 is_stmt 0 view .LVU3051
 9464 04ae 6B4B     		ldr	r3, .L1180+36
 9465 04b0 634F     		ldr	r7, .L1180+8
ARM GAS  /tmp/ccPzxiH4.s 			page 280


3067:src/display.c **** 	  *bp++ = '_';
 9466              		.loc 1 3067 10 view .LVU3052
 9467 04b2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9468 04b4 89F80130 		strb	r3, [r9, #1]
3066:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9469              		.loc 1 3066 10 view .LVU3053
 9470 04b8 7823     		movs	r3, #120
 9471 04ba 89F80030 		strb	r3, [r9]
3067:src/display.c **** 	  *bp++ = '_';
 9472              		.loc 1 3067 4 is_stmt 1 view .LVU3054
 9473              	.LVL1048:
3068:src/display.c **** 	  *bp++ = '?';
 9474              		.loc 1 3068 4 view .LVU3055
3068:src/display.c **** 	  *bp++ = '?';
 9475              		.loc 1 3068 10 is_stmt 0 view .LVU3056
 9476 04be 5F22     		movs	r2, #95
3069:src/display.c **** 	  set_status(buf);
 9477              		.loc 1 3069 10 view .LVU3057
 9478 04c0 3F23     		movs	r3, #63
3068:src/display.c **** 	  *bp++ = '?';
 9479              		.loc 1 3068 10 view .LVU3058
 9480 04c2 89F80220 		strb	r2, [r9, #2]
3069:src/display.c **** 	  set_status(buf);
 9481              		.loc 1 3069 4 is_stmt 1 view .LVU3059
 9482              	.LVL1049:
3069:src/display.c **** 	  set_status(buf);
 9483              		.loc 1 3069 10 is_stmt 0 view .LVU3060
 9484 04c6 89F80330 		strb	r3, [r9, #3]
3070:src/display.c **** 	} else if (cata) {
 9485              		.loc 1 3070 4 is_stmt 1 view .LVU3061
 9486 04ca 1CA8     		add	r0, sp, #112
 9487 04cc FFF7FEFF 		bl	set_status
 9488              	.LVL1050:
3206:src/display.c **** 	  if (State2.runmode) {
 9489              		.loc 1 3206 2 view .LVU3062
 9490 04d0 DFF89491 		ldr	r9, .L1180+48
 9491              	.LVL1051:
3206:src/display.c **** 	  if (State2.runmode) {
 9492              		.loc 1 3206 2 is_stmt 0 view .LVU3063
 9493 04d4 7DE6     		b	.L883
 9494              	.LVL1052:
 9495              	.L1155:
3030:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9496              		.loc 1 3030 6 is_stmt 1 view .LVU3064
3030:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9497              		.loc 1 3030 11 is_stmt 0 view .LVU3065
 9498 04d6 2189     		ldrh	r1, [r4, #8]
 9499 04d8 FFF7FEFF 		bl	num_arg_0
 9500              	.LVL1053:
3030:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9501              		.loc 1 3030 11 view .LVU3066
 9502 04dc 0346     		mov	r3, r0
 9503              	.LVL1054:
3030:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9504              		.loc 1 3030 11 view .LVU3067
 9505 04de A4E7     		b	.L888
 9506              	.LVL1055:
ARM GAS  /tmp/ccPzxiH4.s 			page 281


 9507              	.L890:
3038:src/display.c **** #endif
 9508              		.loc 1 3038 6 is_stmt 1 view .LVU3068
3038:src/display.c **** #endif
 9509              		.loc 1 3038 11 is_stmt 0 view .LVU3069
 9510 04e0 4846     		mov	r0, r9
 9511 04e2 5F49     		ldr	r1, .L1180+40
 9512 04e4 FFF7FEFF 		bl	scopy
 9513              	.LVL1056:
 9514 04e8 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 9515 04ea 8146     		mov	r9, r0
 9516              	.LVL1057:
3038:src/display.c **** #endif
 9517              		.loc 1 3038 11 view .LVU3070
 9518 04ec C7E5     		b	.L891
 9519              	.LVL1058:
 9520              	.L973:
 9521              	.LBB555:
 9522              	.LBB544:
1277:src/display.c **** 
 9523              		.loc 1 1277 2 is_stmt 1 view .LVU3071
 9524 04ee FFF7FEFF 		bl	set_separator_decimal_modes
 9525              	.LVL1059:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9526              		.loc 1 1279 2 view .LVU3072
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9527              		.loc 1 1281 2 view .LVU3073
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9528              		.loc 1 1281 5 is_stmt 0 view .LVU3074
 9529 04f2 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9530              	.LBB525:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9531              		.loc 1 1288 15 view .LVU3075
 9532 04f4 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 9533              	.LBE525:
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9534              		.loc 1 1281 5 view .LVU3076
 9535 04f8 012A     		cmp	r2, #1
 9536 04fa 40F2F480 		bls	.L976
 9537              	.LVL1060:
 9538              	.LBB526:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9539              		.loc 1 1288 14 is_stmt 1 view .LVU3077
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9540              		.loc 1 1288 4 is_stmt 0 view .LVU3078
 9541 04fe 0029     		cmp	r1, #0
 9542 0500 00F04A82 		beq	.L1020
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9543              		.loc 1 1288 10 view .LVU3079
 9544 0504 D446     		mov	ip, r10
 9545 0506 DE46     		mov	lr, fp
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9546              		.loc 1 1288 4 view .LVU3080
 9547 0508 0846     		mov	r0, r1
 9548              	.LBE526:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9549              		.loc 1 1256 11 view .LVU3081
ARM GAS  /tmp/ccPzxiH4.s 			page 282


 9550 050a 4FF0FF38 		mov	r8, #-1
 9551 050e 05E0     		b	.L979
 9552              	.LVL1061:
 9553              	.L978:
 9554              	.LBB527:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9555              		.loc 1 1288 28 is_stmt 1 view .LVU3082
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9556              		.loc 1 1288 15 is_stmt 0 view .LVU3083
 9557 0510 1EF8010F 		ldrb	r0, [lr, #1]!	@ zero_extendqisi2
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9558              		.loc 1 1288 29 view .LVU3084
 9559 0514 0CF1010C 		add	ip, ip, #1
 9560              	.LVL1062:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9561              		.loc 1 1288 14 is_stmt 1 view .LVU3085
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9562              		.loc 1 1288 4 is_stmt 0 view .LVU3086
 9563 0518 0028     		cmp	r0, #0
 9564 051a 38D0     		beq	.L1157
 9565              	.LVL1063:
 9566              	.L979:
1289:src/display.c **** 	      gotdot = j;
 9567              		.loc 1 1289 6 is_stmt 1 view .LVU3087
1289:src/display.c **** 	      gotdot = j;
 9568              		.loc 1 1289 9 is_stmt 0 view .LVU3088
 9569 051c 2E28     		cmp	r0, #46
 9570 051e F7D1     		bne	.L978
1290:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9571              		.loc 1 1290 8 is_stmt 1 view .LVU3089
 9572              	.LVL1064:
1292:src/display.c **** #  endif
 9573              		.loc 1 1292 8 view .LVU3090
1289:src/display.c **** 	      gotdot = j;
 9574              		.loc 1 1289 22 is_stmt 0 view .LVU3091
 9575 0520 B8F1FF3F 		cmp	r8, #-1
 9576 0524 F4D1     		bne	.L978
1292:src/display.c **** #  endif
 9577              		.loc 1 1292 29 view .LVU3092
 9578 0526 9EF801A0 		ldrb	r10, [lr, #1]	@ zero_extendqisi2
 9579 052a AAF12E0A 		sub	r10, r10, #46
 9580 052e BAFA8AFA 		clz	r10, r10
1292:src/display.c **** #  endif
 9581              		.loc 1 1292 19 view .LVU3093
 9582 0532 E046     		mov	r8, ip
1292:src/display.c **** #  endif
 9583              		.loc 1 1292 29 view .LVU3094
 9584 0534 4FEA5A1A 		lsr	r10, r10, #5
 9585              	.LVL1065:
1292:src/display.c **** #  endif
 9586              		.loc 1 1292 29 view .LVU3095
 9587 0538 EAE7     		b	.L978
 9588              	.LVL1066:
 9589              	.L893:
1292:src/display.c **** #  endif
 9590              		.loc 1 1292 29 view .LVU3096
 9591              	.LBE527:
ARM GAS  /tmp/ccPzxiH4.s 			page 283


 9592              	.LBE544:
 9593              	.LBE555:
3045:src/display.c **** 	    *bp++ = '\021';
 9594              		.loc 1 3045 11 is_stmt 1 view .LVU3097
3045:src/display.c **** 	    *bp++ = '\021';
 9595              		.loc 1 3045 14 is_stmt 0 view .LVU3098
 9596 053a BAF1010F 		cmp	r10, #1
 9597 053e 00F0DA80 		beq	.L1158
3052:src/display.c **** 	      *bp++ = '.';
 9598              		.loc 1 3052 6 is_stmt 1 view .LVU3099
3052:src/display.c **** 	      *bp++ = '.';
 9599              		.loc 1 3052 10 is_stmt 0 view .LVU3100
 9600 0542 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3052:src/display.c **** 	      *bp++ = '.';
 9601              		.loc 1 3052 9 view .LVU3101
 9602 0544 DF07     		lsls	r7, r3, #31
3053:src/display.c **** 	    if (State2.numdigit > 0) {
 9603              		.loc 1 3053 8 is_stmt 1 view .LVU3102
 9604              	.LVL1067:
3053:src/display.c **** 	    if (State2.numdigit > 0) {
 9605              		.loc 1 3053 14 is_stmt 0 view .LVU3103
 9606 0546 44BF     		itt	mi
 9607 0548 2E23     		movmi	r3, #46
 9608 054a 00F8013B 		strbmi	r3, [r0], #1
 9609              	.LVL1068:
3054:src/display.c **** 	      if (State2.shuffle)
 9610              		.loc 1 3054 6 is_stmt 1 view .LVU3104
3054:src/display.c **** 	      if (State2.shuffle)
 9611              		.loc 1 3054 16 is_stmt 0 view .LVU3105
 9612 054e E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3054:src/display.c **** 	      if (State2.shuffle)
 9613              		.loc 1 3054 9 view .LVU3106
 9614 0550 8AB1     		cbz	r2, .L896
3055:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9615              		.loc 1 3055 8 is_stmt 1 view .LVU3107
3055:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9616              		.loc 1 3055 12 is_stmt 0 view .LVU3108
 9617 0552 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3055:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9618              		.loc 1 3055 11 view .LVU3109
 9619 0554 9907     		lsls	r1, r3, #30
 9620 0556 40F1EF81 		bpl	.L897
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9621              		.loc 1 3056 3 is_stmt 1 view .LVU3110
 9622              	.LVL1069:
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9623              		.loc 1 3056 17 is_stmt 0 view .LVU3111
 9624 055a 2289     		ldrh	r2, [r4, #8]
 9625              	.LVL1070:
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9626              		.loc 1 3056 34 is_stmt 1 view .LVU3112
 9627 055c 414F     		ldr	r7, .L1180+44
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9628              		.loc 1 3056 10 is_stmt 0 view .LVU3113
 9629 055e 0023     		movs	r3, #0
 9630              	.LVL1071:
 9631              	.L898:
ARM GAS  /tmp/ccPzxiH4.s 			page 284


3057:src/display.c **** 	      else
 9632              		.loc 1 3057 5 is_stmt 1 discriminator 3 view .LVU3114
3057:src/display.c **** 	      else
 9633              		.loc 1 3057 24 is_stmt 0 discriminator 3 view .LVU3115
 9634 0560 02F00301 		and	r1, r2, #3
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9635              		.loc 1 3056 54 discriminator 3 view .LVU3116
 9636 0564 0133     		adds	r3, r3, #1
 9637              	.LVL1072:
3057:src/display.c **** 	      else
 9638              		.loc 1 3057 11 discriminator 3 view .LVU3117
 9639 0566 795C     		ldrb	r1, [r7, r1]	@ zero_extendqisi2
 9640 0568 00F8011B 		strb	r1, [r0], #1
 9641              	.LVL1073:
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9642              		.loc 1 3056 53 is_stmt 1 discriminator 3 view .LVU3118
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9643              		.loc 1 3056 42 is_stmt 0 discriminator 3 view .LVU3119
 9644 056c E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9645              		.loc 1 3056 3 discriminator 3 view .LVU3120
 9646 056e 9942     		cmp	r1, r3
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9647              		.loc 1 3056 60 discriminator 3 view .LVU3121
 9648 0570 4FEAA202 		asr	r2, r2, #2
 9649              	.LVL1074:
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9650              		.loc 1 3056 34 is_stmt 1 discriminator 3 view .LVU3122
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9651              		.loc 1 3056 3 is_stmt 0 discriminator 3 view .LVU3123
 9652 0574 F4DC     		bgt	.L898
 9653              	.LVL1075:
 9654              	.L896:
3062:src/display.c **** 	  }
 9655              		.loc 1 3062 6 is_stmt 1 view .LVU3124
3062:src/display.c **** 	  }
 9656              		.loc 1 3062 12 is_stmt 0 view .LVU3125
 9657 0576 5F23     		movs	r3, #95
 9658 0578 314F     		ldr	r7, .L1180+8
 9659 057a DFF8EC90 		ldr	r9, .L1180+48
 9660 057e 0370     		strb	r3, [r0]
 9661 0580 9AE5     		b	.L886
 9662              	.LVL1076:
 9663              	.L1148:
 9664              	.LBB556:
 9665              	.LBB545:
1266:src/display.c **** 	p++;
 9666              		.loc 1 1266 2 is_stmt 1 view .LVU3126
 9667              	.LBB528:
 9668              	.LBI528:
 244:src/display.c **** {
 9669              		.loc 1 244 13 view .LVU3127
 9670              	.LBB529:
 246:src/display.c **** }
 9671              		.loc 1 246 3 view .LVU3128
 9672 0582 8120     		movs	r0, #129
 9673              	.LVL1077:
ARM GAS  /tmp/ccPzxiH4.s 			page 285


 246:src/display.c **** }
 9674              		.loc 1 246 3 is_stmt 0 view .LVU3129
 9675 0584 FFF7FEFF 		bl	set_dot
 9676              	.LVL1078:
 9677              	.LBE529:
 9678              	.LBE528:
1267:src/display.c ****       }
 9679              		.loc 1 1267 2 is_stmt 1 view .LVU3130
1267:src/display.c ****       }
 9680              		.loc 1 1267 3 is_stmt 0 view .LVU3131
 9681 0588 0BF1010B 		add	fp, fp, #1
 9682              	.LVL1079:
1267:src/display.c ****       }
 9683              		.loc 1 1267 3 view .LVU3132
 9684 058c D0E6     		b	.L972
 9685              	.LVL1080:
 9686              	.L1157:
 9687              	.LBB530:
1296:src/display.c **** 	  if (j > 0) {
 9688              		.loc 1 1296 4 is_stmt 1 view .LVU3133
1296:src/display.c **** 	  if (j > 0) {
 9689              		.loc 1 1296 24 is_stmt 0 view .LVU3134
 9690 058e 0AF10C0E 		add	lr, r10, #12
1296:src/display.c **** 	  if (j > 0) {
 9691              		.loc 1 1296 6 view .LVU3135
 9692 0592 ACEB0E0C 		sub	ip, ip, lr
 9693              	.LVL1081:
1297:src/display.c **** 	    p += j + 1;
 9694              		.loc 1 1297 4 is_stmt 1 view .LVU3136
1297:src/display.c **** 	    p += j + 1;
 9695              		.loc 1 1297 7 is_stmt 0 view .LVU3137
 9696 0596 BCF1000F 		cmp	ip, #0
 9697 059a 40F3EE80 		ble	.L1021
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9698              		.loc 1 1298 6 is_stmt 1 view .LVU3138
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9699              		.loc 1 1298 8 is_stmt 0 view .LVU3139
 9700 059e 0CF10101 		add	r1, ip, #1
1300:src/display.c **** 	      gotdot = 0;
 9701              		.loc 1 1300 9 view .LVU3140
 9702 05a2 C445     		cmp	ip, r8
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9703              		.loc 1 1298 8 view .LVU3141
 9704 05a4 8B44     		add	fp, fp, r1
 9705              	.LVL1082:
1299:src/display.c **** 	    if (gotdot <= j) {
 9706              		.loc 1 1299 6 is_stmt 1 view .LVU3142
1300:src/display.c **** 	      gotdot = 0;
 9707              		.loc 1 1300 6 view .LVU3143
1300:src/display.c **** 	      gotdot = 0;
 9708              		.loc 1 1300 9 is_stmt 0 view .LVU3144
 9709 05a6 C0F2ED80 		blt	.L981
1301:src/display.c **** 	      if (double_dot)
 9710              		.loc 1 1301 8 is_stmt 1 view .LVU3145
 9711              	.LVL1083:
1302:src/display.c **** 		p++;
 9712              		.loc 1 1302 8 view .LVU3146
ARM GAS  /tmp/ccPzxiH4.s 			page 286


1302:src/display.c **** 		p++;
 9713              		.loc 1 1302 11 is_stmt 0 view .LVU3147
 9714 05aa BAF1000F 		cmp	r10, #0
 9715 05ae 00F0C081 		beq	.L1022
1303:src/display.c **** 	    }
 9716              		.loc 1 1303 3 is_stmt 1 view .LVU3148
1303:src/display.c **** 	    }
 9717              		.loc 1 1303 4 is_stmt 0 view .LVU3149
 9718 05b2 0BF1010B 		add	fp, fp, #1
 9719              	.LVL1084:
1299:src/display.c **** 	    if (gotdot <= j) {
 9720              		.loc 1 1299 8 view .LVU3150
 9721 05b6 4FF0090A 		mov	r10, #9
 9722              	.L982:
 9723              	.LVL1085:
1312:src/display.c **** 	    overflow_to_left = 1;
 9724              		.loc 1 1312 6 is_stmt 1 view .LVU3151
 9725 05ba 3C21     		movs	r1, #60
 9726 05bc 0020     		movs	r0, #0
 9727 05be FFF7FEFF 		bl	set_dig
 9728              	.LVL1086:
1313:src/display.c **** 	  }
 9729              		.loc 1 1313 6 view .LVU3152
1313:src/display.c **** 	  }
 9730              		.loc 1 1313 6 is_stmt 0 view .LVU3153
 9731 05c2 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 9732              		.loc 1 1313 6 view .LVU3154
 9733              	.LBE530:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9734              		.loc 1 1319 9 is_stmt 1 view .LVU3155
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9735              		.loc 1 1319 2 is_stmt 0 view .LVU3156
 9736 05c6 4FF00008 		mov	r8, #0
 9737 05ca 0029     		cmp	r1, #0
 9738 05cc 00F08480 		beq	.L1136
 9739              	.LVL1087:
 9740              	.L1014:
 9741              	.LBB531:
1313:src/display.c **** 	  }
 9742              		.loc 1 1313 23 view .LVU3157
 9743 05d0 0123     		movs	r3, #1
 9744 05d2 0193     		str	r3, [sp, #4]
 9745 05d4 13E0     		b	.L991
 9746              	.LVL1088:
 9747              	.L1159:
1313:src/display.c **** 	  }
 9748              		.loc 1 1313 23 view .LVU3158
 9749              	.LBE531:
1325:src/display.c **** 	      gotdot = i;
 9750              		.loc 1 1325 6 is_stmt 1 view .LVU3159
1325:src/display.c **** 	      gotdot = i;
 9751              		.loc 1 1325 9 is_stmt 0 view .LVU3160
 9752 05d6 B8F1FF3F 		cmp	r8, #-1
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9753              		.loc 1 1329 9 view .LVU3161
 9754 05da 9BF80130 		ldrb	r3, [fp, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccPzxiH4.s 			page 287


1325:src/display.c **** 	      gotdot = i;
 9755              		.loc 1 1325 9 view .LVU3162
 9756 05de 1BD0     		beq	.L985
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9757              		.loc 1 1329 6 is_stmt 1 view .LVU3163
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9758              		.loc 1 1329 9 is_stmt 0 view .LVU3164
 9759 05e0 2E2B     		cmp	r3, #46
 9760 05e2 25D0     		beq	.L1012
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9761              		.loc 1 1329 25 view .LVU3165
 9762 05e4 C245     		cmp	r10, r8
 9763 05e6 19D0     		beq	.L988
 9764              	.L987:
1336:src/display.c **** 		i += segs_per_digit;
 9765              		.loc 1 1336 3 is_stmt 1 view .LVU3166
 9766 05e8 5046     		mov	r0, r10
 9767 05ea 2F21     		movs	r1, #47
 9768 05ec FFF7FEFF 		bl	set_dig
 9769              	.LVL1089:
1337:src/display.c **** 	      }
 9770              		.loc 1 1337 3 view .LVU3167
1337:src/display.c **** 	      }
 9771              		.loc 1 1337 5 is_stmt 0 view .LVU3168
 9772 05f0 0AF1090A 		add	r10, r10, #9
 9773              	.LVL1090:
1337:src/display.c **** 	      }
 9774              		.loc 1 1337 5 view .LVU3169
 9775 05f4 5B46     		mov	r3, fp
 9776              	.LVL1091:
 9777              	.L989:
1323:src/display.c **** 	  if (*p == '.') {
 9778              		.loc 1 1323 11 is_stmt 1 view .LVU3170
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9779              		.loc 1 1319 9 is_stmt 0 view .LVU3171
 9780 05f6 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1323:src/display.c **** 	  if (*p == '.') {
 9781              		.loc 1 1323 12 view .LVU3172
 9782 05f8 0BF1010B 		add	fp, fp, #1
 9783              	.LVL1092:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9784              		.loc 1 1319 9 is_stmt 1 view .LVU3173
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9785              		.loc 1 1319 2 is_stmt 0 view .LVU3174
 9786 05fc C1B3     		cbz	r1, .L992
 9787              	.LVL1093:
 9788              	.L991:
1321:src/display.c **** #endif
 9789              		.loc 1 1321 9 view .LVU3175
 9790 05fe A1F14403 		sub	r3, r1, #68
 9791 0602 012B     		cmp	r3, #1
 9792 0604 34D9     		bls	.L992
1324:src/display.c **** 	    if (gotdot < 0)
 9793              		.loc 1 1324 4 is_stmt 1 view .LVU3176
1324:src/display.c **** 	    if (gotdot < 0)
 9794              		.loc 1 1324 7 is_stmt 0 view .LVU3177
 9795 0606 2E29     		cmp	r1, #46
ARM GAS  /tmp/ccPzxiH4.s 			page 288


 9796 0608 E5D0     		beq	.L1159
1358:src/display.c **** 	      i += segs_per_digit;
 9797              		.loc 1 1358 8 is_stmt 1 view .LVU3178
 9798 060a 5046     		mov	r0, r10
 9799 060c FFF7FEFF 		bl	set_dig
 9800              	.LVL1094:
1359:src/display.c **** 	    }
 9801              		.loc 1 1359 8 view .LVU3179
1359:src/display.c **** 	    }
 9802              		.loc 1 1359 10 is_stmt 0 view .LVU3180
 9803 0610 0AF1090A 		add	r10, r10, #9
 9804              	.LVL1095:
1359:src/display.c **** 	    }
 9805              		.loc 1 1359 10 view .LVU3181
 9806 0614 5B46     		mov	r3, fp
 9807 0616 EEE7     		b	.L989
 9808              	.L985:
1326:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 9809              		.loc 1 1326 8 is_stmt 1 view .LVU3182
 9810              	.LVL1096:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9811              		.loc 1 1329 6 view .LVU3183
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9812              		.loc 1 1329 9 is_stmt 0 view .LVU3184
 9813 0618 2E2B     		cmp	r3, #46
 9814 061a 08D0     		beq	.L1160
 9815              	.LVL1097:
 9816              	.L988:
1340:src/display.c **** 		  i += segs_per_digit;
 9817              		.loc 1 1340 3 is_stmt 1 view .LVU3185
1340:src/display.c **** 		  i += segs_per_digit;
 9818              		.loc 1 1340 6 is_stmt 0 view .LVU3186
 9819 061c A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9820 061e 012B     		cmp	r3, #1
 9821 0620 40F2A280 		bls	.L990
1341:src/display.c **** 		}
 9822              		.loc 1 1341 5 is_stmt 1 view .LVU3187
 9823              	.LVL1098:
1341:src/display.c **** 		}
 9824              		.loc 1 1341 5 is_stmt 0 view .LVU3188
 9825 0624 D046     		mov	r8, r10
 9826 0626 5B46     		mov	r3, fp
1341:src/display.c **** 		}
 9827              		.loc 1 1341 7 view .LVU3189
 9828 0628 0AF1090A 		add	r10, r10, #9
 9829              	.LVL1099:
1341:src/display.c **** 		}
 9830              		.loc 1 1341 7 view .LVU3190
 9831 062c E3E7     		b	.L989
 9832              	.LVL1100:
 9833              	.L1160:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9834              		.loc 1 1329 9 view .LVU3191
 9835 062e D046     		mov	r8, r10
 9836              	.LVL1101:
 9837              	.L1012:
1330:src/display.c **** 		p++;
ARM GAS  /tmp/ccPzxiH4.s 			page 289


 9838              		.loc 1 1330 8 is_stmt 1 view .LVU3192
1331:src/display.c **** 	      }
 9839              		.loc 1 1331 3 view .LVU3193
1331:src/display.c **** 	      }
 9840              		.loc 1 1331 4 is_stmt 0 view .LVU3194
 9841 0630 0BF1010B 		add	fp, fp, #1
 9842              	.LVL1102:
1331:src/display.c **** 	      }
 9843              		.loc 1 1331 4 view .LVU3195
 9844 0634 D8E7     		b	.L987
 9845              	.L1181:
 9846 0636 00BF     		.align	2
 9847              	.L1180:
 9848 0638 00000000 		.word	main_ram
 9849 063c 0C000000 		.word	.LANCHOR14+12
 9850 0640 00000000 		.word	DispMsg
 9851 0644 08000000 		.word	.LC27
 9852 0648 00000000 		.word	.LANCHOR17
 9853 064c 8C000000 		.word	.LC44
 9854 0650 00000000 		.word	.LANCHOR16
 9855 0654 56040000 		.word	argcmds+1110
 9856 0658 00000000 		.word	multicmds
 9857 065c 94000000 		.word	.LC31
 9858 0660 1C000000 		.word	.LC29
 9859 0664 9C000000 		.word	.LC30
 9860 0668 00000000 		.word	DispPlot
 9861 066c 00000000 		.word	ShowRegister
 9862              	.L992:
1368:src/display.c **** 	    gotdot = i;
 9863              		.loc 1 1368 4 is_stmt 1 view .LVU3196
1368:src/display.c **** 	    gotdot = i;
 9864              		.loc 1 1368 7 is_stmt 0 view .LVU3197
 9865 0670 B8F1FF3F 		cmp	r8, #-1
 9866 0674 08BF     		it	eq
 9867 0676 D046     		moveq	r8, r10
 9868              	.LVL1103:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9869              		.loc 1 1370 4 is_stmt 1 view .LVU3198
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9870              		.loc 1 1371 6 view .LVU3199
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9871              		.loc 1 1371 13 is_stmt 0 view .LVU3200
 9872 0678 A8F11B08 		sub	r8, r8, #27
 9873              	.LVL1104:
1372:src/display.c **** 	      break;
 9874              		.loc 1 1372 6 is_stmt 1 view .LVU3201
1372:src/display.c **** 	      break;
 9875              		.loc 1 1372 9 is_stmt 0 view .LVU3202
 9876 067c B8F1000F 		cmp	r8, #0
 9877 0680 11DD     		ble	.L977
1372:src/display.c **** 	      break;
 9878              		.loc 1 1372 9 view .LVU3203
 9879 0682 0097     		str	r7, [sp]
 9880 0684 4746     		mov	r7, r8
 9881 0686 A846     		mov	r8, r5
 9882              	.LVL1105:
1372:src/display.c **** 	      break;
ARM GAS  /tmp/ccPzxiH4.s 			page 290


 9883              		.loc 1 1372 9 view .LVU3204
 9884 0688 019D     		ldr	r5, [sp, #4]
 9885              	.L996:
1375:src/display.c **** 	      break;
 9886              		.loc 1 1375 6 is_stmt 1 view .LVU3205
1378:src/display.c **** 	  }
 9887              		.loc 1 1378 6 view .LVU3206
 9888              	.LBB532:
 9889              	.LBB533:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9890              		.loc 1 311 3 view .LVU3207
 9891 068a 3846     		mov	r0, r7
 9892              	.LBE533:
 9893              	.LBE532:
1375:src/display.c **** 	      break;
 9894              		.loc 1 1375 9 is_stmt 0 view .LVU3208
 9895 068c 0DB1     		cbz	r5, .L997
 9896              	.LVL1106:
1375:src/display.c **** 	      break;
 9897              		.loc 1 1375 27 view .LVU3209
 9898 068e 092F     		cmp	r7, #9
 9899 0690 07D0     		beq	.L1129
 9900              	.L997:
1378:src/display.c **** 	  }
 9901              		.loc 1 1378 6 view .LVU3210
 9902 0692 D04B     		ldr	r3, .L1182
 9903 0694 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9904              	.LVL1107:
 9905              	.LBB535:
 9906              	.LBI532:
 308:src/display.c ****   if (sep == SEP_NONE)
 9907              		.loc 1 308 14 is_stmt 1 view .LVU3211
 9908              	.LBB534:
 309:src/display.c ****     return res;
 9909              		.loc 1 309 3 view .LVU3212
 309:src/display.c ****     return res;
 9910              		.loc 1 309 6 is_stmt 0 view .LVU3213
 9911 0696 09B1     		cbz	r1, .L998
 9912 0698 FFF7FEFF 		bl	set_separator.part.0
 9913              	.LVL1108:
 9914              	.L998:
 309:src/display.c ****     return res;
 9915              		.loc 1 309 6 view .LVU3214
 9916              	.LBE534:
 9917              	.LBE535:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9918              		.loc 1 1370 4 is_stmt 1 view .LVU3215
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9919              		.loc 1 1371 6 view .LVU3216
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9920              		.loc 1 1371 13 is_stmt 0 view .LVU3217
 9921 069c 1B3F     		subs	r7, r7, #27
 9922              	.LVL1109:
1372:src/display.c **** 	      break;
 9923              		.loc 1 1372 6 is_stmt 1 view .LVU3218
1372:src/display.c **** 	      break;
 9924              		.loc 1 1372 9 is_stmt 0 view .LVU3219
ARM GAS  /tmp/ccPzxiH4.s 			page 291


 9925 069e 002F     		cmp	r7, #0
 9926 06a0 F3DC     		bgt	.L996
 9927              	.L1129:
1372:src/display.c **** 	      break;
 9928              		.loc 1 1372 9 view .LVU3220
 9929 06a2 009F     		ldr	r7, [sp]
 9930              	.LVL1110:
1372:src/display.c **** 	      break;
 9931              		.loc 1 1372 9 view .LVU3221
 9932 06a4 4546     		mov	r5, r8
 9933              	.LVL1111:
 9934              	.L977:
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9935              		.loc 1 1382 4 is_stmt 1 view .LVU3222
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9936              		.loc 1 1382 8 is_stmt 0 view .LVU3223
 9937 06a6 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9938              		.loc 1 1382 7 view .LVU3224
 9939 06aa A1F14400 		sub	r0, r1, #68
 9940 06ae 0128     		cmp	r0, #1
 9941 06b0 12D8     		bhi	.L1136
 9942              	.LBB536:
1386:src/display.c **** #  endif
 9943              		.loc 1 1386 6 is_stmt 1 view .LVU3225
 9944              	.LVL1112:
1389:src/display.c **** 	      flags |= 2;
 9945              		.loc 1 1389 6 view .LVU3226
1390:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 9946              		.loc 1 1390 14 is_stmt 0 view .LVU3227
 9947 06b2 4429     		cmp	r1, #68
 9948 06b4 14BF     		ite	ne
 9949 06b6 4FF00C08 		movne	r8, #12
 9950 06ba 4FF00E08 		moveq	r8, #14
 9951              	.LVL1113:
1391:src/display.c **** 	      flags |= 16;
 9952              		.loc 1 1391 6 is_stmt 1 view .LVU3228
1391:src/display.c **** 	      flags |= 16;
 9953              		.loc 1 1391 9 is_stmt 0 view .LVU3229
 9954 06be BAF15A0F 		cmp	r10, #90
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 9955              		.loc 1 1392 8 is_stmt 1 view .LVU3230
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 9956              		.loc 1 1392 14 is_stmt 0 view .LVU3231
 9957 06c2 C8BF     		it	gt
 9958 06c4 48F01008 		orrgt	r8, r8, #16
 9959              	.LVL1114:
1393:src/display.c **** 	  }
 9960              		.loc 1 1393 6 is_stmt 1 view .LVU3232
 9961 06c8 0BF10100 		add	r0, fp, #1
 9962 06cc FFF7FEFF 		bl	s_to_i
 9963              	.LVL1115:
 9964 06d0 4146     		mov	r1, r8
 9965 06d2 0022     		movs	r2, #0
 9966 06d4 FFF7FEFF 		bl	set_exp
 9967              	.LVL1116:
 9968              	.L1136:
ARM GAS  /tmp/ccPzxiH4.s 			page 292


1393:src/display.c **** 	  }
 9969              		.loc 1 1393 6 is_stmt 0 view .LVU3233
 9970              	.LBE536:
 9971              	.LBE545:
 9972              	.LBE556:
3244:src/display.c **** 	      goto finish;
 9973              		.loc 1 3244 6 is_stmt 1 view .LVU3234
3244:src/display.c **** 	      goto finish;
 9974              		.loc 1 3244 9 is_stmt 0 view .LVU3235
 9975 06d8 3368     		ldr	r3, [r6]
 9976 06da DFF81883 		ldr	r8, .L1182+32
 9977 06de 002B     		cmp	r3, #0
 9978 06e0 3FF447AD 		beq	.L968
 9979 06e4 18E5     		b	.L967
 9980              	.LVL1117:
 9981              	.L976:
 9982              	.LBB557:
 9983              	.LBB546:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9984              		.loc 1 1319 9 is_stmt 1 view .LVU3236
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9985              		.loc 1 1319 2 is_stmt 0 view .LVU3237
 9986 06e6 0029     		cmp	r1, #0
 9987 06e8 00F05681 		beq	.L1020
1262:src/display.c **** #endif
 9988              		.loc 1 1262 11 view .LVU3238
 9989 06ec CDF804A0 		str	r10, [sp, #4]
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9990              		.loc 1 1256 11 view .LVU3239
 9991 06f0 4FF0FF38 		mov	r8, #-1
 9992              	.LVL1118:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9993              		.loc 1 1256 11 view .LVU3240
 9994 06f4 83E7     		b	.L991
 9995              	.LVL1119:
 9996              	.L1158:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9997              		.loc 1 1256 11 view .LVU3241
 9998              	.LBE546:
 9999              	.LBE557:
3046:src/display.c **** 	    *bp++ = '_';
 10000              		.loc 1 3046 6 is_stmt 1 view .LVU3242
3046:src/display.c **** 	    *bp++ = '_';
 10001              		.loc 1 3046 12 is_stmt 0 view .LVU3243
 10002 06f6 1122     		movs	r2, #17
 10003 06f8 D8E4     		b	.L1132
 10004              	.LVL1120:
 10005              	.L1150:
 10006              	.LBB558:
3072:src/display.c **** 	  char b2[16];
 10007              		.loc 1 3072 4 is_stmt 1 view .LVU3244
3072:src/display.c **** 	  char b2[16];
 10008              		.loc 1 3072 45 is_stmt 0 view .LVU3245
 10009 06fa B74B     		ldr	r3, .L1182+4
 10010 06fc 1B68     		ldr	r3, [r3]
 10011 06fe B3F8DC07 		ldrh	r0, [r3, #2012]
3072:src/display.c **** 	  char b2[16];
ARM GAS  /tmp/ccPzxiH4.s 			page 293


 10012              		.loc 1 3072 22 view .LVU3246
 10013 0702 C0F34610 		ubfx	r0, r0, #5, #7
 10014 0706 FFF7FEFF 		bl	current_catalogue
 10015              	.LVL1121:
3076:src/display.c **** 	  p = catcmd(op, b2);
 10016              		.loc 1 3076 9 view .LVU3247
 10017 070a B449     		ldr	r1, .L1182+8
3072:src/display.c **** 	  char b2[16];
 10018              		.loc 1 3072 22 view .LVU3248
 10019 070c 0746     		mov	r7, r0
 10020              	.LVL1122:
3073:src/display.c **** 	  const char *p;
 10021              		.loc 1 3073 4 is_stmt 1 view .LVU3249
3074:src/display.c **** 
 10022              		.loc 1 3074 4 view .LVU3250
3076:src/display.c **** 	  p = catcmd(op, b2);
 10023              		.loc 1 3076 4 view .LVU3251
3076:src/display.c **** 	  p = catcmd(op, b2);
 10024              		.loc 1 3076 9 is_stmt 0 view .LVU3252
 10025 070e 4846     		mov	r0, r9
 10026              	.LVL1123:
3076:src/display.c **** 	  p = catcmd(op, b2);
 10027              		.loc 1 3076 9 view .LVU3253
 10028 0710 FFF7FEFF 		bl	scopy
 10029              	.LVL1124:
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10030              		.loc 1 3077 8 view .LVU3254
 10031 0714 06A9     		add	r1, sp, #24
3076:src/display.c **** 	  p = catcmd(op, b2);
 10032              		.loc 1 3076 9 view .LVU3255
 10033 0716 8146     		mov	r9, r0
 10034              	.LVL1125:
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10035              		.loc 1 3077 8 view .LVU3256
 10036 0718 3846     		mov	r0, r7
 10037              	.LVL1126:
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10038              		.loc 1 3077 4 is_stmt 1 view .LVU3257
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10039              		.loc 1 3077 8 is_stmt 0 view .LVU3258
 10040 071a FFF7FEFF 		bl	catcmd
 10041              	.LVL1127:
3078:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10042              		.loc 1 3078 7 view .LVU3259
 10043 071e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10044 0720 142B     		cmp	r3, #20
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10045              		.loc 1 3077 8 view .LVU3260
 10046 0722 0146     		mov	r1, r0
 10047              	.LVL1128:
3078:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10048              		.loc 1 3078 4 is_stmt 1 view .LVU3261
3078:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10049              		.loc 1 3078 7 is_stmt 0 view .LVU3262
 10050 0724 05D0     		beq	.L901
3078:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10051              		.loc 1 3078 29 discriminator 1 view .LVU3263
ARM GAS  /tmp/ccPzxiH4.s 			page 294


 10052 0726 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10053 0728 9A07     		lsls	r2, r3, #30
3079:src/display.c **** 	  bp = scopy(bp, p);
 10054              		.loc 1 3079 6 is_stmt 1 discriminator 1 view .LVU3264
 10055              	.LVL1129:
3079:src/display.c **** 	  bp = scopy(bp, p);
 10056              		.loc 1 3079 12 is_stmt 0 discriminator 1 view .LVU3265
 10057 072a 44BF     		itt	mi
 10058 072c 1423     		movmi	r3, #20
 10059 072e 09F8013B 		strbmi	r3, [r9], #1
 10060              	.LVL1130:
 10061              	.L901:
3080:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10062              		.loc 1 3080 4 is_stmt 1 view .LVU3266
3080:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10063              		.loc 1 3080 9 is_stmt 0 view .LVU3267
 10064 0732 4846     		mov	r0, r9
 10065              	.LVL1131:
3080:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10066              		.loc 1 3080 9 view .LVU3268
 10067 0734 FFF7FEFF 		bl	scopy
 10068              	.LVL1132:
3081:src/display.c **** 	    // State2.disp_small = 1;
 10069              		.loc 1 3081 4 is_stmt 1 view .LVU3269
3081:src/display.c **** 	    // State2.disp_small = 1;
 10070              		.loc 1 3081 7 is_stmt 0 view .LVU3270
 10071 0738 A8F11003 		sub	r3, r8, #16
 10072 073c 012B     		cmp	r3, #1
 10073 073e 40F2DE80 		bls	.L1161
3088:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10074              		.loc 1 3088 11 is_stmt 1 view .LVU3271
3088:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10075              		.loc 1 3088 15 is_stmt 0 view .LVU3272
 10076 0742 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3088:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10077              		.loc 1 3088 14 view .LVU3273
 10078 0744 5B06     		lsls	r3, r3, #25
 10079 0746 08D5     		bpl	.L906
3089:src/display.c **** 	      decNumber x, r;
 10080              		.loc 1 3089 6 is_stmt 1 view .LVU3274
3089:src/display.c **** 	      decNumber x, r;
 10081              		.loc 1 3089 9 is_stmt 0 view .LVU3275
 10082 0748 B8F1120F 		cmp	r8, #18
 10083 074c 00F06482 		beq	.L1162
3109:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10084              		.loc 1 3109 13 is_stmt 1 view .LVU3276
3109:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10085              		.loc 1 3109 46 is_stmt 0 view .LVU3277
 10086 0750 A7F58873 		sub	r3, r7, #272
3109:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10087              		.loc 1 3109 16 view .LVU3278
 10088 0754 0D2B     		cmp	r3, #13
 10089 0756 40F20D82 		bls	.L1163
 10090              	.L906:
3118:src/display.c **** 	} else if (State2.multi) {
 10091              		.loc 1 3118 4 is_stmt 1 view .LVU3279
 10092 075a 1CA8     		add	r0, sp, #112
ARM GAS  /tmp/ccPzxiH4.s 			page 295


 10093 075c FFF7FEFF 		bl	set_status
 10094              	.LVL1133:
3118:src/display.c **** 	} else if (State2.multi) {
 10095              		.loc 1 3118 4 is_stmt 0 view .LVU3280
 10096              	.LBE558:
3206:src/display.c **** 	  if (State2.runmode) {
 10097              		.loc 1 3206 2 is_stmt 1 view .LVU3281
 10098 0760 9F4F     		ldr	r7, .L1182+12
 10099              	.LVL1134:
3206:src/display.c **** 	  if (State2.runmode) {
 10100              		.loc 1 3206 2 is_stmt 0 view .LVU3282
 10101 0762 DFF89492 		ldr	r9, .L1182+36
 10102 0766 34E5     		b	.L883
 10103              	.LVL1135:
 10104              	.L990:
 10105              	.LBB567:
 10106              	.LBB547:
1344:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10107              		.loc 1 1344 5 is_stmt 1 view .LVU3283
 10108              	.LBB537:
 10109              	.LBI537:
 293:src/display.c ****   if (res) {
 10110              		.loc 1 293 14 view .LVU3284
 10111              	.LBB538:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10112              		.loc 1 294 3 view .LVU3285
 10113 0768 9E4B     		ldr	r3, .L1182+16
 10114 076a AAF10900 		sub	r0, r10, #9
 10115              	.LVL1136:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10116              		.loc 1 294 3 is_stmt 0 view .LVU3286
 10117 076e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10118 0770 FFF7FEFF 		bl	set_decimal.part.0
 10119              	.LVL1137:
 301:src/display.c **** }
 10120              		.loc 1 301 3 is_stmt 1 view .LVU3287
 301:src/display.c **** }
 10121              		.loc 1 301 10 is_stmt 0 view .LVU3288
 10122 0774 D046     		mov	r8, r10
 10123 0776 5B46     		mov	r3, fp
 10124 0778 3DE7     		b	.L989
 10125              	.LVL1138:
 10126              	.L1021:
 301:src/display.c **** }
 10127              		.loc 1 301 10 view .LVU3289
 10128              	.LBE538:
 10129              	.LBE537:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10130              		.loc 1 1279 4 view .LVU3290
 10131 077a 8246     		mov	r10, r0
1262:src/display.c **** #endif
 10132              		.loc 1 1262 11 view .LVU3291
 10133 077c 0190     		str	r0, [sp, #4]
 10134              	.LBB539:
1315:src/display.c **** 	}
 10135              		.loc 1 1315 16 view .LVU3292
 10136 077e 4FF0FF38 		mov	r8, #-1
ARM GAS  /tmp/ccPzxiH4.s 			page 296


 10137              	.LVL1139:
1315:src/display.c **** 	}
 10138              		.loc 1 1315 16 view .LVU3293
 10139 0782 3CE7     		b	.L991
 10140              	.LVL1140:
 10141              	.L981:
1305:src/display.c **** 	      gotdot = 0;
 10142              		.loc 1 1305 11 is_stmt 1 view .LVU3294
1305:src/display.c **** 	      gotdot = 0;
 10143              		.loc 1 1305 14 is_stmt 0 view .LVU3295
 10144 0784 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 10145 0788 2E29     		cmp	r1, #46
 10146 078a 00F01881 		beq	.L1164
 10147              	.LVL1141:
1312:src/display.c **** 	    overflow_to_left = 1;
 10148              		.loc 1 1312 6 is_stmt 1 view .LVU3296
 10149 078e 3C21     		movs	r1, #60
 10150 0790 FFF7FEFF 		bl	set_dig
 10151              	.LVL1142:
1313:src/display.c **** 	  }
 10152              		.loc 1 1313 6 view .LVU3297
1313:src/display.c **** 	  }
 10153              		.loc 1 1313 6 is_stmt 0 view .LVU3298
 10154 0794 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 10155              		.loc 1 1313 6 view .LVU3299
 10156              	.LBE539:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10157              		.loc 1 1319 9 is_stmt 1 view .LVU3300
 10158              	.LBB540:
1299:src/display.c **** 	    if (gotdot <= j) {
 10159              		.loc 1 1299 8 is_stmt 0 view .LVU3301
 10160 0798 4FF0090A 		mov	r10, #9
 10161              	.LBE540:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10162              		.loc 1 1319 2 view .LVU3302
 10163 079c 0029     		cmp	r1, #0
 10164 079e 82D0     		beq	.L977
 10165              	.LBB541:
1311:src/display.c **** 	    set_dig(0, '<');
 10166              		.loc 1 1311 18 view .LVU3303
 10167 07a0 4FF0FF38 		mov	r8, #-1
1299:src/display.c **** 	    if (gotdot <= j) {
 10168              		.loc 1 1299 8 view .LVU3304
 10169 07a4 4FF0090A 		mov	r10, #9
 10170 07a8 12E7     		b	.L1014
 10171              	.LVL1143:
 10172              	.L966:
1299:src/display.c **** 	    if (gotdot <= j) {
 10173              		.loc 1 1299 8 view .LVU3305
 10174              	.LBE541:
 10175              	.LBE547:
 10176              	.LBE567:
3224:src/display.c **** 		  }
 10177              		.loc 1 3224 7 is_stmt 1 view .LVU3306
 10178 07aa 6E20     		movs	r0, #110
 10179 07ac FFF7FEFF 		bl	format_reg
ARM GAS  /tmp/ccPzxiH4.s 			page 297


 10180              	.LVL1144:
3244:src/display.c **** 	      goto finish;
 10181              		.loc 1 3244 6 view .LVU3307
3244:src/display.c **** 	      goto finish;
 10182              		.loc 1 3244 9 is_stmt 0 view .LVU3308
 10183 07b0 3368     		ldr	r3, [r6]
 10184 07b2 002B     		cmp	r3, #0
 10185 07b4 3FF4DDAC 		beq	.L968
 10186 07b8 AEE4     		b	.L967
 10187              	.LVL1145:
 10188              	.L1152:
3128:src/display.c **** 	  skip = 1;
 10189              		.loc 1 3128 4 is_stmt 1 view .LVU3309
 10190              	.LBB568:
 10191              	.LBI568:
2359:src/display.c **** 	int i, n;
 10192              		.loc 1 2359 19 view .LVU3310
 10193              	.LBB569:
2360:src/display.c **** 	int j = SEGS_EXP_BASE;
 10194              		.loc 1 2360 2 view .LVU3311
2361:src/display.c **** 	const int status = State2.status - 3;
 10195              		.loc 1 2361 2 view .LVU3312
2362:src/display.c **** 	char buf[16], *p = buf;
 10196              		.loc 1 2362 2 view .LVU3313
2366:src/display.c **** 	  set_status("Free:");
 10197              		.loc 1 2366 5 is_stmt 0 view .LVU3314
 10198 07ba 012B     		cmp	r3, #1
2362:src/display.c **** 	char buf[16], *p = buf;
 10199              		.loc 1 2362 12 view .LVU3315
 10200 07bc A3F10309 		sub	r9, r3, #3
 10201              	.LVL1146:
2363:src/display.c **** 	unsigned int pc;
 10202              		.loc 1 2363 2 is_stmt 1 view .LVU3316
2364:src/display.c **** 
 10203              		.loc 1 2364 2 view .LVU3317
2366:src/display.c **** 	  set_status("Free:");
 10204              		.loc 1 2366 2 view .LVU3318
2366:src/display.c **** 	  set_status("Free:");
 10205              		.loc 1 2366 5 is_stmt 0 view .LVU3319
 10206 07c0 00F08781 		beq	.L1165
2374:src/display.c **** 	  /* Top line */
 10207              		.loc 1 2374 7 is_stmt 1 view .LVU3320
2374:src/display.c **** 	  /* Top line */
 10208              		.loc 1 2374 10 is_stmt 0 view .LVU3321
 10209 07c4 B9F1FF3F 		cmp	r9, #-1
 10210 07c8 00F00182 		beq	.L1166
 10211              	.LBB570:
2391:src/display.c **** 	  int end;
 10212              		.loc 1 2391 4 is_stmt 1 view .LVU3322
2392:src/display.c **** 	  int group = 10;
 10213              		.loc 1 2392 4 view .LVU3323
2393:src/display.c **** 	  int start = 0;
 10214              		.loc 1 2393 4 view .LVU3324
 10215              	.LVL1147:
2394:src/display.c **** 		
 10216              		.loc 1 2394 4 view .LVU3325
2396:src/display.c **** 	    base = 10 * status;
ARM GAS  /tmp/ccPzxiH4.s 			page 298


 10217              		.loc 1 2396 4 view .LVU3326
2396:src/display.c **** 	    base = 10 * status;
 10218              		.loc 1 2396 7 is_stmt 0 view .LVU3327
 10219 07cc B9F1090F 		cmp	r9, #9
 10220 07d0 40F39A81 		ble	.L1167
2406:src/display.c **** 	    base = regX_idx;
 10221              		.loc 1 2406 9 is_stmt 1 view .LVU3328
2406:src/display.c **** 	    base = regX_idx;
 10222              		.loc 1 2406 12 is_stmt 0 view .LVU3329
 10223 07d4 B9F10A0F 		cmp	r9, #10
 10224 07d8 00F0E981 		beq	.L1168
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10225              		.loc 1 2414 6 is_stmt 1 view .LVU3330
 10226              	.LVL1148:
2415:src/display.c **** 	    set_status("FL.00-.15");
 10227              		.loc 1 2415 6 view .LVU3331
2416:src/display.c **** 	  }
 10228              		.loc 1 2416 6 view .LVU3332
 10229 07dc 0A23     		movs	r3, #10
 10230 07de 1F46     		mov	r7, r3
 10231 07e0 8148     		ldr	r0, .L1182+20
 10232 07e2 0093     		str	r3, [sp]
2393:src/display.c **** 	  int start = 0;
 10233              		.loc 1 2393 8 is_stmt 0 view .LVU3333
 10234 07e4 B846     		mov	r8, r7
 10235              	.LVL1149:
2416:src/display.c **** 	  }
 10236              		.loc 1 2416 6 view .LVU3334
 10237 07e6 FFF7FEFF 		bl	set_status
 10238              	.LVL1150:
2394:src/display.c **** 		
 10239              		.loc 1 2394 8 view .LVU3335
 10240 07ea 4FF0000B 		mov	fp, #0
2416:src/display.c **** 	  }
 10241              		.loc 1 2416 6 view .LVU3336
 10242 07ee 0720     		movs	r0, #7
 10243 07f0 0927     		movs	r7, #9
2415:src/display.c **** 	    set_status("FL.00-.15");
 10244              		.loc 1 2415 10 view .LVU3337
 10245 07f2 4FF07F0A 		mov	r10, #127
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10246              		.loc 1 2414 11 view .LVU3338
 10247 07f6 4FF07009 		mov	r9, #112
 10248              	.LVL1151:
 10249              	.L920:
2418:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10250              		.loc 1 2418 4 is_stmt 1 view .LVU3339
2419:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10251              		.loc 1 2419 4 view .LVU3340
 10252              	.LBB571:
 10253              	.LBI571:
 293:src/display.c ****   if (res) {
 10254              		.loc 1 293 14 view .LVU3341
 10255              	.LBE571:
 10256              	.LBE570:
 10257              	.LBE569:
 10258              	.LBE568:
ARM GAS  /tmp/ccPzxiH4.s 			page 299


 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10259              		.loc 1 294 3 view .LVU3342
 10260              	.LBB611:
 10261              	.LBB600:
 10262              	.LBB591:
 10263              	.LBB574:
 10264              	.LBB572:
 10265              	.LBI572:
 293:src/display.c ****   if (res) {
 10266              		.loc 1 293 14 view .LVU3343
 10267              	.LBB573:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10268              		.loc 1 297 5 view .LVU3344
 10269 07fa FFF7FEFF 		bl	set_dot
 10270              	.LVL1152:
 298:src/display.c ****       set_dot(posn+8);
 10271              		.loc 1 298 5 view .LVU3345
 301:src/display.c **** }
 10272              		.loc 1 301 3 view .LVU3346
 301:src/display.c **** }
 10273              		.loc 1 301 3 is_stmt 0 view .LVU3347
 10274              	.LBE573:
 10275              	.LBE572:
 10276              	.LBE574:
 10277              	.LBE591:
 10278              	.LBE600:
 10279              	.LBE611:
 301:src/display.c **** }
 10280              		.loc 1 301 3 is_stmt 1 view .LVU3348
 10281              	.LBB612:
 10282              	.LBB601:
 10283              	.LBB592:
2420:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10284              		.loc 1 2420 4 view .LVU3349
2421:src/display.c **** 	    int k = i + base - start;
 10285              		.loc 1 2421 4 view .LVU3350
2421:src/display.c **** 	    int k = i + base - start;
 10286              		.loc 1 2421 20 view .LVU3351
 10287 07fe CBEB4802 		rsb	r2, fp, r8, lsl #1
 10288 0802 02EB0903 		add	r3, r2, r9
 10289 0806 C844     		add	r8, r8, r9
 10290              	.LVL1153:
2421:src/display.c **** 	    int k = i + base - start;
 10291              		.loc 1 2421 20 is_stmt 0 view .LVU3352
 10292 0808 0295     		str	r5, [sp, #8]
 10293 080a A9EB0B09 		sub	r9, r9, fp
 10294 080e 5D46     		mov	r5, fp
 10295 0810 DDF800B0 		ldr	fp, [sp]
 10296              	.LVL1154:
2421:src/display.c **** 	    int k = i + base - start;
 10297              		.loc 1 2421 20 view .LVU3353
 10298 0814 0193     		str	r3, [sp, #4]
 10299              	.LVL1155:
 10300              	.L925:
 10301              	.LBB575:
2422:src/display.c **** 	    int l = get_user_flag(k);
 10302              		.loc 1 2422 6 is_stmt 1 view .LVU3354
ARM GAS  /tmp/ccPzxiH4.s 			page 300


2423:src/display.c **** 	    k += group;
 10303              		.loc 1 2423 6 view .LVU3355
2423:src/display.c **** 	    k += group;
 10304              		.loc 1 2423 14 is_stmt 0 view .LVU3356
 10305 0816 09EB0500 		add	r0, r9, r5
 10306 081a FFF7FEFF 		bl	get_user_flag
 10307              	.LVL1156:
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10308              		.loc 1 2425 9 view .LVU3357
 10309 081e D045     		cmp	r8, r10
2423:src/display.c **** 	    k += group;
 10310              		.loc 1 2423 14 view .LVU3358
 10311 0820 0146     		mov	r1, r0
 10312              	.LVL1157:
2424:src/display.c **** 	    if (end >= k) {
 10313              		.loc 1 2424 6 is_stmt 1 view .LVU3359
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10314              		.loc 1 2425 6 view .LVU3360
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10315              		.loc 1 2425 9 is_stmt 0 view .LVU3361
 10316 0822 3FDD     		ble	.L1169
 10317              	.LVL1158:
 10318              	.L922:
2431:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10319              		.loc 1 2431 6 is_stmt 1 view .LVU3362
 10320 0824 3846     		mov	r0, r7
 10321 0826 FFF7FEFF 		bl	set_dig
 10322              	.LVL1159:
2432:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10323              		.loc 1 2432 6 view .LVU3363
 10324              	.LBB576:
 10325              	.LBI576:
 293:src/display.c ****   if (res) {
 10326              		.loc 1 293 14 view .LVU3364
 10327              	.LBE576:
 10328              	.LBE575:
 10329              	.LBE592:
 10330              	.LBE601:
 10331              	.LBE612:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10332              		.loc 1 294 3 view .LVU3365
 10333              	.LBB613:
 10334              	.LBB602:
 10335              	.LBB593:
 10336              	.LBB584:
 10337              	.LBB579:
 10338              	.LBB577:
 10339              	.LBI577:
 293:src/display.c ****   if (res) {
 10340              		.loc 1 293 14 view .LVU3366
 10341              	.LBB578:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10342              		.loc 1 297 5 view .LVU3367
 10343 082a F81D     		adds	r0, r7, #7
 10344 082c FFF7FEFF 		bl	set_dot
 10345              	.LVL1160:
 298:src/display.c ****       set_dot(posn+8);
ARM GAS  /tmp/ccPzxiH4.s 			page 301


 10346              		.loc 1 298 5 view .LVU3368
 301:src/display.c **** }
 10347              		.loc 1 301 3 view .LVU3369
 301:src/display.c **** }
 10348              		.loc 1 301 3 is_stmt 0 view .LVU3370
 10349              	.LBE578:
 10350              	.LBE577:
 10351              	.LBE579:
 10352              	.LBE584:
 10353              	.LBE593:
 10354              	.LBE602:
 10355              	.LBE613:
 301:src/display.c **** }
 10356              		.loc 1 301 3 is_stmt 1 view .LVU3371
 10357              	.LBB614:
 10358              	.LBB603:
 10359              	.LBB594:
 10360              	.LBB585:
2433:src/display.c **** 	    if (i == 4) {
 10361              		.loc 1 2433 6 view .LVU3372
2433:src/display.c **** 	    if (i == 4) {
 10362              		.loc 1 2433 6 is_stmt 0 view .LVU3373
 10363              	.LBE585:
2421:src/display.c **** 	    int k = i + base - start;
 10364              		.loc 1 2421 39 is_stmt 1 view .LVU3374
 10365              	.LBB586:
2434:src/display.c **** 	      set_dig(j, 8);
 10366              		.loc 1 2434 9 is_stmt 0 view .LVU3375
 10367 0830 042D     		cmp	r5, #4
2433:src/display.c **** 	    if (i == 4) {
 10368              		.loc 1 2433 8 view .LVU3376
 10369 0832 07F10900 		add	r0, r7, #9
 10370              	.LVL1161:
2434:src/display.c **** 	      set_dig(j, 8);
 10371              		.loc 1 2434 6 is_stmt 1 view .LVU3377
 10372              	.LBE586:
2421:src/display.c **** 	    int k = i + base - start;
 10373              		.loc 1 2421 40 is_stmt 0 view .LVU3378
 10374 0836 05F10105 		add	r5, r5, #1
 10375              	.LVL1162:
2421:src/display.c **** 	    int k = i + base - start;
 10376              		.loc 1 2421 20 is_stmt 1 view .LVU3379
 10377              	.LBB587:
2434:src/display.c **** 	      set_dig(j, 8);
 10378              		.loc 1 2434 9 is_stmt 0 view .LVU3380
 10379 083a 46D0     		beq	.L1170
 10380              	.LBE587:
2421:src/display.c **** 	    int k = i + base - start;
 10381              		.loc 1 2421 4 view .LVU3381
 10382 083c 5D45     		cmp	r5, fp
 10383 083e 08F10108 		add	r8, r8, #1
 10384 0842 01D0     		beq	.L1171
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10385              		.loc 1 2414 11 view .LVU3382
 10386 0844 0746     		mov	r7, r0
 10387 0846 E6E7     		b	.L925
 10388              	.L1171:
ARM GAS  /tmp/ccPzxiH4.s 			page 302


2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10389              		.loc 1 2414 11 view .LVU3383
 10390 0848 029D     		ldr	r5, [sp, #8]
 10391              	.LVL1163:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10392              		.loc 1 2414 11 view .LVU3384
 10393 084a 634F     		ldr	r7, .L1182+4
 10394              	.LVL1164:
 10395              	.L915:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10396              		.loc 1 2414 11 view .LVU3385
 10397              	.LBE594:
2442:src/display.c **** 	pc = state_pc();
 10398              		.loc 1 2442 2 is_stmt 1 view .LVU3386
2443:src/display.c **** 	if (isXROM(pc))
 10399              		.loc 1 2443 2 view .LVU3387
2443:src/display.c **** 	if (isXROM(pc))
 10400              		.loc 1 2443 7 is_stmt 0 view .LVU3388
 10401 084c 3B68     		ldr	r3, [r7]
2443:src/display.c **** 	if (isXROM(pc))
 10402              		.loc 1 2443 5 view .LVU3389
 10403 084e B3F8E087 		ldrh	r8, [r3, #2016]
 10404              	.LVL1165:
2444:src/display.c **** 	  pc = 1;
 10405              		.loc 1 2444 2 is_stmt 1 view .LVU3390
2444:src/display.c **** 	  pc = 1;
 10406              		.loc 1 2444 6 is_stmt 0 view .LVU3391
 10407 0852 4FEA9833 		lsr	r3, r8, #14
2445:src/display.c **** 	for (n=i=0; i<4; i++) {
 10408              		.loc 1 2445 7 view .LVU3392
 10409 0856 032B     		cmp	r3, #3
 10410 0858 08BF     		it	eq
 10411 085a 4FF00108 		moveq	r8, #1
 10412              	.LVL1166:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10413              		.loc 1 2446 2 is_stmt 1 view .LVU3393
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10414              		.loc 1 2446 14 view .LVU3394
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10415              		.loc 1 2446 8 is_stmt 0 view .LVU3395
 10416 085e 4FF00009 		mov	r9, #0
 10417 0862 6427     		movs	r7, #100
2442:src/display.c **** 	pc = state_pc();
 10418              		.loc 1 2442 4 view .LVU3396
 10419 0864 4FF06C0A 		mov	r10, #108
 10420              	.LVL1167:
 10421              	.L929:
2447:src/display.c **** 	    if (++n == 4) {
 10422              		.loc 1 2447 4 is_stmt 1 view .LVU3397
2447:src/display.c **** 	    if (++n == 4) {
 10423              		.loc 1 2447 8 is_stmt 0 view .LVU3398
 10424 0868 0222     		movs	r2, #2
 10425 086a 3946     		mov	r1, r7
 10426 086c 4046     		mov	r0, r8
 10427 086e FFF7FEFF 		bl	find_label_from
 10428              	.LVL1168:
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
ARM GAS  /tmp/ccPzxiH4.s 			page 303


 10429              		.loc 1 2448 6 is_stmt 1 view .LVU3399
2447:src/display.c **** 	    if (++n == 4) {
 10430              		.loc 1 2447 7 is_stmt 0 view .LVU3400
 10431 0872 60B1     		cbz	r0, .L927
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10432              		.loc 1 2448 9 view .LVU3401
 10433 0874 09F10109 		add	r9, r9, #1
 10434              	.LVL1169:
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10435              		.loc 1 2452 8 is_stmt 1 view .LVU3402
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10436              		.loc 1 2448 9 is_stmt 0 view .LVU3403
 10437 0878 B9F1040F 		cmp	r9, #4
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10438              		.loc 1 2452 8 view .LVU3404
 10439 087c A7F12301 		sub	r1, r7, #35
 10440 0880 5046     		mov	r0, r10
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10441              		.loc 1 2448 9 view .LVU3405
 10442 0882 00F08B80 		beq	.L1172
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10443              		.loc 1 2452 8 view .LVU3406
 10444 0886 FFF7FEFF 		bl	set_dig
 10445              	.LVL1170:
2453:src/display.c **** 	    }
 10446              		.loc 1 2453 8 is_stmt 1 view .LVU3407
2453:src/display.c **** 	    }
 10447              		.loc 1 2453 10 is_stmt 0 view .LVU3408
 10448 088a 0AF1070A 		add	r10, r10, #7
 10449              	.LVL1171:
 10450              	.L927:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10451              		.loc 1 2446 19 is_stmt 1 view .LVU3409
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10452              		.loc 1 2446 14 view .LVU3410
 10453 088e 0137     		adds	r7, r7, #1
 10454              	.LVL1172:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10455              		.loc 1 2446 2 is_stmt 0 view .LVU3411
 10456 0890 682F     		cmp	r7, #104
 10457 0892 E9D1     		bne	.L929
 10458              	.LVL1173:
 10459              	.L905:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10460              		.loc 1 2446 2 view .LVU3412
 10461              	.LBE603:
 10462              	.LBE614:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10463              		.loc 1 3276 2 is_stmt 1 view .LVU3413
 10464 0894 FFF7FEFF 		bl	set_annunciators
 10465              	.LVL1174:
3277:src/display.c **** 	  ShowRPN = 0;
 10466              		.loc 1 3277 2 view .LVU3414
 10467 0898 514F     		ldr	r7, .L1182+12
 10468 089a DFF85C91 		ldr	r9, .L1182+36
 10469 089e DFF85481 		ldr	r8, .L1182+32
 10470 08a2 CCE4     		b	.L881
ARM GAS  /tmp/ccPzxiH4.s 			page 304


 10471              	.LVL1175:
 10472              	.L1169:
 10473              	.LBB615:
 10474              	.LBB604:
 10475              	.LBB595:
 10476              	.LBB588:
2426:src/display.c **** 	      k += group;
 10477              		.loc 1 2426 8 view .LVU3415
 10478 08a4 0090     		str	r0, [sp]
2426:src/display.c **** 	      k += group;
 10479              		.loc 1 2426 14 is_stmt 0 view .LVU3416
 10480 08a6 4046     		mov	r0, r8
 10481              	.LVL1176:
2426:src/display.c **** 	      k += group;
 10482              		.loc 1 2426 14 view .LVU3417
 10483 08a8 FFF7FEFF 		bl	get_user_flag
 10484              	.LVL1177:
2426:src/display.c **** 	      k += group;
 10485              		.loc 1 2426 14 view .LVU3418
 10486 08ac 019B     		ldr	r3, [sp, #4]
2426:src/display.c **** 	      k += group;
 10487              		.loc 1 2426 10 view .LVU3419
 10488 08ae 0099     		ldr	r1, [sp]
 10489 08b0 5A19     		adds	r2, r3, r5
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10490              		.loc 1 2428 11 view .LVU3420
 10491 08b2 9245     		cmp	r10, r2
2426:src/display.c **** 	      k += group;
 10492              		.loc 1 2426 10 view .LVU3421
 10493 08b4 41EA4001 		orr	r1, r1, r0, lsl #1
 10494              	.LVL1178:
2427:src/display.c **** 	      if (end >= k)
 10495              		.loc 1 2427 8 is_stmt 1 view .LVU3422
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10496              		.loc 1 2428 8 view .LVU3423
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10497              		.loc 1 2428 11 is_stmt 0 view .LVU3424
 10498 08b8 B4DB     		blt	.L922
2429:src/display.c **** 	    }
 10499              		.loc 1 2429 3 is_stmt 1 view .LVU3425
2429:src/display.c **** 	    }
 10500              		.loc 1 2429 9 is_stmt 0 view .LVU3426
 10501 08ba 1046     		mov	r0, r2
 10502 08bc 0091     		str	r1, [sp]
 10503 08be FFF7FEFF 		bl	get_user_flag
 10504              	.LVL1179:
2429:src/display.c **** 	    }
 10505              		.loc 1 2429 5 view .LVU3427
 10506 08c2 0099     		ldr	r1, [sp]
 10507 08c4 41EA8001 		orr	r1, r1, r0, lsl #2
 10508              	.LVL1180:
2429:src/display.c **** 	    }
 10509              		.loc 1 2429 5 view .LVU3428
 10510 08c8 ACE7     		b	.L922
 10511              	.LVL1181:
 10512              	.L1170:
2435:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
ARM GAS  /tmp/ccPzxiH4.s 			page 305


 10513              		.loc 1 2435 8 is_stmt 1 view .LVU3429
 10514 08ca 0821     		movs	r1, #8
 10515 08cc FFF7FEFF 		bl	set_dig
 10516              	.LVL1182:
2436:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10517              		.loc 1 2436 8 view .LVU3430
 10518              	.LBB580:
 10519              	.LBI580:
 293:src/display.c ****   if (res) {
 10520              		.loc 1 293 14 view .LVU3431
 10521              	.LBE580:
 10522              	.LBE588:
 10523              	.LBE595:
 10524              	.LBE604:
 10525              	.LBE615:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10526              		.loc 1 294 3 view .LVU3432
 10527              	.LBB616:
 10528              	.LBB605:
 10529              	.LBB596:
 10530              	.LBB589:
 10531              	.LBB583:
 10532              	.LBB581:
 10533              	.LBI581:
 293:src/display.c ****   if (res) {
 10534              		.loc 1 293 14 view .LVU3433
 10535              	.LBB582:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10536              		.loc 1 297 5 view .LVU3434
 10537 08d0 07F11000 		add	r0, r7, #16
 10538 08d4 FFF7FEFF 		bl	set_dot
 10539              	.LVL1183:
 298:src/display.c ****       set_dot(posn+8);
 10540              		.loc 1 298 5 view .LVU3435
 301:src/display.c **** }
 10541              		.loc 1 301 3 view .LVU3436
 301:src/display.c **** }
 10542              		.loc 1 301 3 is_stmt 0 view .LVU3437
 10543              	.LBE582:
 10544              	.LBE581:
 10545              	.LBE583:
 10546              	.LBE589:
 10547              	.LBE596:
 10548              	.LBE605:
 10549              	.LBE616:
 301:src/display.c **** }
 10550              		.loc 1 301 3 is_stmt 1 view .LVU3438
 10551              	.LBB617:
 10552              	.LBB606:
 10553              	.LBB597:
 10554              	.LBB590:
2437:src/display.c **** 	    }
 10555              		.loc 1 2437 8 view .LVU3439
2437:src/display.c **** 	    }
 10556              		.loc 1 2437 10 is_stmt 0 view .LVU3440
 10557 08d8 07F11200 		add	r0, r7, #18
 10558              	.LVL1184:
ARM GAS  /tmp/ccPzxiH4.s 			page 306


2437:src/display.c **** 	    }
 10559              		.loc 1 2437 10 view .LVU3441
 10560              	.LBE590:
2421:src/display.c **** 	    int k = i + base - start;
 10561              		.loc 1 2421 39 is_stmt 1 view .LVU3442
2421:src/display.c **** 	    int k = i + base - start;
 10562              		.loc 1 2421 20 view .LVU3443
2421:src/display.c **** 	    int k = i + base - start;
 10563              		.loc 1 2421 20 is_stmt 0 view .LVU3444
 10564 08dc 08F10108 		add	r8, r8, #1
2421:src/display.c **** 	    int k = i + base - start;
 10565              		.loc 1 2421 40 view .LVU3445
 10566 08e0 0525     		movs	r5, #5
 10567              	.LVL1185:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10568              		.loc 1 2414 11 view .LVU3446
 10569 08e2 0746     		mov	r7, r0
 10570 08e4 97E7     		b	.L925
 10571              	.LVL1186:
 10572              	.L1156:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10573              		.loc 1 2414 11 view .LVU3447
 10574              	.LBE597:
 10575              	.LBE606:
 10576              	.LBE617:
3215:src/display.c **** 		    SET_POLAR_READY;
 10577              		.loc 1 3215 7 is_stmt 1 view .LVU3448
 10578 08e6 5046     		mov	r0, r10
 10579 08e8 FFF7FEFF 		bl	op_r2p
 10580              	.LVL1187:
3216:src/display.c **** 		  }
 10581              		.loc 1 3216 7 view .LVU3449
 10582 08ec 3A49     		ldr	r1, .L1182+4
 10583 08ee 0B68     		ldr	r3, [r1]
 10584 08f0 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 10585 08f4 6AF30412 		bfi	r2, r10, #4, #1
 10586 08f8 83F8DE27 		strb	r2, [r3, #2014]
 10587 08fc ABE5     		b	.L965
 10588              	.LVL1188:
 10589              	.L1161:
 10590              	.LBB618:
3083:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10591              		.loc 1 3083 6 view .LVU3450
3083:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10592              		.loc 1 3083 9 is_stmt 0 view .LVU3451
 10593 08fe B7F5274F 		cmp	r7, #42752
 10594 0902 54D0     		beq	.L903
3083:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10595              		.loc 1 3083 41 discriminator 1 view .LVU3452
 10596 0904 B7F5284F 		cmp	r7, #43008
 10597 0908 51D0     		beq	.L903
3086:src/display.c **** 	    skip = 1;
 10598              		.loc 1 3086 8 is_stmt 1 view .LVU3453
3086:src/display.c **** 	    skip = 1;
 10599              		.loc 1 3086 14 is_stmt 0 view .LVU3454
 10600 090a 07F07F00 		and	r0, r7, #127
 10601 090e 0021     		movs	r1, #0
ARM GAS  /tmp/ccPzxiH4.s 			page 307


 10602 0910 FFF7FEFF 		bl	get_const
 10603              	.LVL1189:
3086:src/display.c **** 	    skip = 1;
 10604              		.loc 1 3086 8 view .LVU3455
 10605 0914 0022     		movs	r2, #0
 10606 0916 1146     		mov	r1, r2
 10607 0918 FFF7FEFF 		bl	set_x
 10608              	.LVL1190:
3118:src/display.c **** 	} else if (State2.multi) {
 10609              		.loc 1 3118 4 is_stmt 1 view .LVU3456
 10610 091c 1CA8     		add	r0, sp, #112
 10611 091e FFF7FEFF 		bl	set_status
 10612              	.LVL1191:
3118:src/display.c **** 	} else if (State2.multi) {
 10613              		.loc 1 3118 4 is_stmt 0 view .LVU3457
 10614              	.LBE618:
3206:src/display.c **** 	  if (State2.runmode) {
 10615              		.loc 1 3206 2 is_stmt 1 view .LVU3458
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10616              		.loc 1 3276 2 view .LVU3459
 10617 0922 2F4F     		ldr	r7, .L1182+12
 10618              	.LVL1192:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10619              		.loc 1 3276 2 is_stmt 0 view .LVU3460
 10620 0924 DFF8D090 		ldr	r9, .L1182+36
 10621 0928 DFF8C880 		ldr	r8, .L1182+32
 10622              	.LVL1193:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10623              		.loc 1 3276 2 view .LVU3461
 10624 092c FFF7FEFF 		bl	set_annunciators
 10625              	.LVL1194:
3277:src/display.c **** 	  ShowRPN = 0;
 10626              		.loc 1 3277 2 is_stmt 1 view .LVU3462
 10627 0930 85E4     		b	.L881
 10628              	.LVL1195:
 10629              	.L1022:
 10630              	.LBB619:
 10631              	.LBB548:
 10632              	.LBB542:
1299:src/display.c **** 	    if (gotdot <= j) {
 10633              		.loc 1 1299 8 is_stmt 0 view .LVU3463
 10634 0932 4FF0090A 		mov	r10, #9
 10635 0936 40E6     		b	.L982
 10636              	.LVL1196:
 10637              	.L897:
1299:src/display.c **** 	    if (gotdot <= j) {
 10638              		.loc 1 1299 8 view .LVU3464
 10639              	.LBE542:
 10640              	.LBE548:
 10641              	.LBE619:
3059:src/display.c **** 	    }
 10642              		.loc 1 3059 3 is_stmt 1 view .LVU3465
3059:src/display.c **** 	    }
 10643              		.loc 1 3059 8 is_stmt 0 view .LVU3466
 10644 0938 2189     		ldrh	r1, [r4, #8]
 10645 093a FFF7FEFF 		bl	num_arg_0
 10646              	.LVL1197:
ARM GAS  /tmp/ccPzxiH4.s 			page 308


3059:src/display.c **** 	    }
 10647              		.loc 1 3059 8 view .LVU3467
 10648 093e 1AE6     		b	.L896
 10649              	.LVL1198:
 10650              	.L1153:
3131:src/display.c **** 	  skip = 1;
 10651              		.loc 1 3131 4 is_stmt 1 view .LVU3468
 10652              	.LBB620:
 10653              	.LBI620:
2461:src/display.c **** 	char buf[16];
 10654              		.loc 1 2461 19 view .LVU3469
 10655              	.LBB621:
2462:src/display.c **** 	unsigned short int pc = State2.digval;
 10656              		.loc 1 2462 2 view .LVU3470
2463:src/display.c **** 	unsigned int op = getprog(pc);
 10657              		.loc 1 2463 2 view .LVU3471
2463:src/display.c **** 	unsigned int op = getprog(pc);
 10658              		.loc 1 2463 21 is_stmt 0 view .LVU3472
 10659 0940 B4F80890 		ldrh	r9, [r4, #8]
 10660              	.LVL1199:
2464:src/display.c **** 	int n = nLIB(pc);
 10661              		.loc 1 2464 2 is_stmt 1 view .LVU3473
2469:src/display.c **** 
 10662              		.loc 1 2469 27 is_stmt 0 view .LVU3474
 10663 0944 DFF8B480 		ldr	r8, .L1182+40
 10664              	.LVL1200:
2464:src/display.c **** 	int n = nLIB(pc);
 10665              		.loc 1 2464 20 view .LVU3475
 10666 0948 4846     		mov	r0, r9
 10667 094a FFF7FEFF 		bl	getprog
 10668              	.LVL1201:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10669              		.loc 1 2468 2 view .LVU3476
 10670 094e 13A9     		add	r1, sp, #76
2464:src/display.c **** 	int n = nLIB(pc);
 10671              		.loc 1 2464 20 view .LVU3477
 10672 0950 0746     		mov	r7, r0
 10673              	.LVL1202:
2465:src/display.c **** 	unsigned short int lblpc;
 10674              		.loc 1 2465 2 is_stmt 1 view .LVU3478
2466:src/display.c **** 
 10675              		.loc 1 2466 2 view .LVU3479
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10676              		.loc 1 2468 2 view .LVU3480
 10677 0952 FFF7FEFF 		bl	prt
 10678              	.LVL1203:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 10679              		.loc 1 2468 2 is_stmt 0 view .LVU3481
 10680 0956 FFF7FEFF 		bl	set_status
 10681              	.LVL1204:
2469:src/display.c **** 
 10682              		.loc 1 2469 2 is_stmt 1 view .LVU3482
2469:src/display.c **** 
 10683              		.loc 1 2469 27 is_stmt 0 view .LVU3483
 10684 095a 4FEA9933 		lsr	r3, r9, #14
 10685 095e 03EB8303 		add	r3, r3, r3, lsl #2
2469:src/display.c **** 
ARM GAS  /tmp/ccPzxiH4.s 			page 309


 10686              		.loc 1 2469 2 view .LVU3484
 10687 0962 08EB0300 		add	r0, r8, r3
 10688 0966 0021     		movs	r1, #0
 10689 0968 FFF7FEFF 		bl	set_digits_string
 10690              	.LVL1205:
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10691              		.loc 1 2471 2 is_stmt 1 view .LVU3485
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10692              		.loc 1 2471 5 is_stmt 0 view .LVU3486
 10693 096c 17F4704F 		tst	r7, #61440
 10694 0970 90D0     		beq	.L905
2472:src/display.c **** 	  if (lblpc != pc) {
 10695              		.loc 1 2472 4 is_stmt 1 view .LVU3487
2472:src/display.c **** 	  if (lblpc != pc) {
 10696              		.loc 1 2472 12 is_stmt 0 view .LVU3488
 10697 0972 3846     		mov	r0, r7
 10698 0974 0021     		movs	r1, #0
 10699 0976 FFF7FEFF 		bl	findmultilbl
 10700              	.LVL1206:
2472:src/display.c **** 	  if (lblpc != pc) {
 10701              		.loc 1 2472 10 view .LVU3489
 10702 097a 87B2     		uxth	r7, r0
 10703              	.LVL1207:
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10704              		.loc 1 2473 4 is_stmt 1 view .LVU3490
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10705              		.loc 1 2473 7 is_stmt 0 view .LVU3491
 10706 097c B945     		cmp	r9, r7
 10707 097e 89D0     		beq	.L905
2474:src/display.c **** 	    n = nLIB(lblpc);
 10708              		.loc 1 2474 6 is_stmt 1 view .LVU3492
 10709 0980 1A48     		ldr	r0, .L1182+24
 10710 0982 3F21     		movs	r1, #63
 10711 0984 FFF7FEFF 		bl	set_digits_string
 10712              	.LVL1208:
2475:src/display.c **** 	    if (n == REGION_RAM)
 10713              		.loc 1 2475 6 view .LVU3493
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10714              		.loc 1 2476 6 view .LVU3494
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10715              		.loc 1 2476 9 is_stmt 0 view .LVU3495
 10716 0988 BA0B     		lsrs	r2, r7, #14
 10717              	.LVL1209:
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10718              		.loc 1 2476 9 view .LVU3496
 10719 098a 40F0A981 		bne	.L934
2477:src/display.c **** 	    else {
 10720              		.loc 1 2477 8 is_stmt 1 view .LVU3497
 10721 098e 3846     		mov	r0, r7
 10722 0990 0121     		movs	r1, #1
 10723 0992 FFF7FEFF 		bl	set_exp
 10724              	.LVL1210:
2477:src/display.c **** 	    else {
 10725              		.loc 1 2477 8 is_stmt 0 view .LVU3498
 10726 0996 7DE7     		b	.L905
 10727              	.LVL1211:
 10728              	.L1020:
ARM GAS  /tmp/ccPzxiH4.s 			page 310


2477:src/display.c **** 	    else {
 10729              		.loc 1 2477 8 view .LVU3499
 10730              	.LBE621:
 10731              	.LBE620:
 10732              	.LBB623:
 10733              	.LBB549:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10734              		.loc 1 1279 4 view .LVU3500
 10735 0998 8A46     		mov	r10, r1
 10736 099a 84E6     		b	.L977
 10737              	.LVL1212:
 10738              	.L1172:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10739              		.loc 1 1279 4 view .LVU3501
 10740              	.LBE549:
 10741              	.LBE623:
 10742              	.LBB624:
 10743              	.LBB607:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10744              		.loc 1 2449 8 is_stmt 1 view .LVU3502
 10745 099c 4C21     		movs	r1, #76
 10746 099e 7320     		movs	r0, #115
 10747              	.LVL1213:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10748              		.loc 1 2449 8 is_stmt 0 view .LVU3503
 10749 09a0 FFF7FEFF 		bl	set_dig
 10750              	.LVL1214:
2450:src/display.c **** 	    } else {
 10751              		.loc 1 2450 8 is_stmt 1 view .LVU3504
 10752 09a4 4C21     		movs	r1, #76
 10753 09a6 7A20     		movs	r0, #122
 10754 09a8 FFF7FEFF 		bl	set_dig
 10755              	.LVL1215:
 10756 09ac 6FE7     		b	.L927
 10757              	.LVL1216:
 10758              	.L903:
2450:src/display.c **** 	    } else {
 10759              		.loc 1 2450 8 is_stmt 0 view .LVU3505
 10760              	.LBE607:
 10761              	.LBE624:
 10762              	.LBB625:
3084:src/display.c **** 	    else
 10763              		.loc 1 3084 8 is_stmt 1 view .LVU3506
 10764 09ae 1048     		ldr	r0, .L1182+28
 10765 09b0 0021     		movs	r1, #0
 10766 09b2 FFF7FEFF 		bl	set_digits_string
 10767              	.LVL1217:
3118:src/display.c **** 	} else if (State2.multi) {
 10768              		.loc 1 3118 4 view .LVU3507
 10769 09b6 1CA8     		add	r0, sp, #112
 10770 09b8 FFF7FEFF 		bl	set_status
 10771              	.LVL1218:
3118:src/display.c **** 	} else if (State2.multi) {
 10772              		.loc 1 3118 4 is_stmt 0 view .LVU3508
 10773              	.LBE625:
3206:src/display.c **** 	  if (State2.runmode) {
 10774              		.loc 1 3206 2 is_stmt 1 view .LVU3509
ARM GAS  /tmp/ccPzxiH4.s 			page 311


 10775 09bc 6AE7     		b	.L905
 10776              	.LVL1219:
 10777              	.L1164:
 10778              	.LBB626:
 10779              	.LBB550:
 10780              	.LBB543:
1306:src/display.c **** 	      p++;
 10781              		.loc 1 1306 8 view .LVU3510
1307:src/display.c **** 	      if (!double_dot)
 10782              		.loc 1 1307 8 view .LVU3511
1309:src/display.c **** 	    }
 10783              		.loc 1 1309 5 is_stmt 0 view .LVU3512
 10784 09be BAF1000F 		cmp	r10, #0
1307:src/display.c **** 	      if (!double_dot)
 10785              		.loc 1 1307 9 view .LVU3513
 10786 09c2 0BF1010B 		add	fp, fp, #1
 10787              	.LVL1220:
1308:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10788              		.loc 1 1308 8 is_stmt 1 view .LVU3514
1309:src/display.c **** 	    }
 10789              		.loc 1 1309 5 is_stmt 0 view .LVU3515
 10790 09c6 14BF     		ite	ne
 10791 09c8 4FF0090A 		movne	r10, #9
 10792 09cc 4FF0120A 		moveq	r10, #18
 10793 09d0 F3E5     		b	.L982
 10794              	.L1183:
 10795 09d2 00BF     		.align	2
 10796              	.L1182:
 10797 09d4 00000000 		.word	.LANCHOR0
 10798 09d8 00000000 		.word	main_ram
 10799 09dc 1C000000 		.word	.LC29
 10800 09e0 00000000 		.word	DispMsg
 10801 09e4 00000000 		.word	.LANCHOR1
 10802 09e8 6C000000 		.word	.LC40
 10803 09ec 78000000 		.word	.LC41
 10804 09f0 20000000 		.word	.LC32
 10805 09f4 00000000 		.word	ShowRegister
 10806 09f8 00000000 		.word	DispPlot
 10807 09fc 00000000 		.word	.LANCHOR19
 10808              	.LVL1221:
 10809              	.L1154:
1309:src/display.c **** 	    }
 10810              		.loc 1 1309 5 view .LVU3516
 10811              	.LBE543:
 10812              	.LBE550:
 10813              	.LBE626:
3134:src/display.c **** 	  skip = 1;
 10814              		.loc 1 3134 4 is_stmt 1 view .LVU3517
 10815              	.LBB627:
 10816              	.LBI627:
2486:src/display.c **** 	char buf[16], *bp;
 10817              		.loc 1 2486 19 view .LVU3518
 10818              	.LBB628:
2487:src/display.c **** 	int n = State2.digval;
 10819              		.loc 1 2487 2 view .LVU3519
2488:src/display.c **** 	
 10820              		.loc 1 2488 2 view .LVU3520
ARM GAS  /tmp/ccPzxiH4.s 			page 312


2488:src/display.c **** 	
 10821              		.loc 1 2488 6 is_stmt 0 view .LVU3521
 10822 0a00 B4F80890 		ldrh	r9, [r4, #8]
 10823              	.LVL1222:
2495:src/display.c **** 	  n;
 10824              		.loc 1 2495 2 is_stmt 1 view .LVU3522
2495:src/display.c **** 	  n;
 10825              		.loc 1 2495 54 is_stmt 0 view .LVU3523
 10826 0a04 CA07     		lsls	r2, r1, #31
 10827 0a06 4CBF     		ite	mi
 10828 0a08 09F17007 		addmi	r7, r9, #112
2488:src/display.c **** 	
 10829              		.loc 1 2488 6 view .LVU3524
 10830 0a0c 4F46     		movpl	r7, r9
 10831              	.LVL1223:
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10832              		.loc 1 2499 2 is_stmt 1 view .LVU3525
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10833              		.loc 1 2499 5 is_stmt 0 view .LVU3526
 10834 0a0e 11F00401 		ands	r1, r1, #4
 10835 0a12 43D0     		beq	.L937
2500:src/display.c **** 	}
 10836              		.loc 1 2500 4 is_stmt 1 view .LVU3527
2500:src/display.c **** 	}
 10837              		.loc 1 2500 15 is_stmt 0 view .LVU3528
 10838 0a14 13A9     		add	r1, sp, #76
 10839 0a16 3846     		mov	r0, r7
 10840 0a18 FFF7FEFF 		bl	alpha_rcl_s
 10841              	.LVL1224:
2500:src/display.c **** 	}
 10842              		.loc 1 2500 4 view .LVU3529
 10843 0a1c FFF7FEFF 		bl	set_status
 10844              	.LVL1225:
 10845              	.L938:
2522:src/display.c ****       }
 10846              		.loc 1 2522 2 is_stmt 1 view .LVU3530
 10847 0a20 3846     		mov	r0, r7
 10848 0a22 0021     		movs	r1, #0
 10849 0a24 FFF7FEFF 		bl	format_reg
 10850              	.LVL1226:
 10851              	.LBE628:
 10852              	.LBE627:
3135:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10853              		.loc 1 3135 4 view .LVU3531
3136:src/display.c **** 	    annunciators();
 10854              		.loc 1 3136 4 view .LVU3532
3136:src/display.c **** 	    annunciators();
 10855              		.loc 1 3136 7 is_stmt 0 view .LVU3533
 10856 0a28 BAF1000F 		cmp	r10, #0
 10857 0a2c 0AD1     		bne	.L944
3136:src/display.c **** 	    annunciators();
 10858              		.loc 1 3136 25 discriminator 1 view .LVU3534
 10859 0a2e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10860 0a30 012B     		cmp	r3, #1
 10861 0a32 7FF42FAF 		bne	.L905
3136:src/display.c **** 	    annunciators();
 10862              		.loc 1 3136 56 discriminator 2 view .LVU3535
ARM GAS  /tmp/ccPzxiH4.s 			page 313


 10863 0a36 C54B     		ldr	r3, .L1184
 10864 0a38 1B68     		ldr	r3, [r3]
 10865 0a3a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10866 0a3e DF07     		lsls	r7, r3, #31
 10867              	.LVL1227:
3136:src/display.c **** 	    annunciators();
 10868              		.loc 1 3136 56 discriminator 2 view .LVU3536
 10869 0a40 7FF528AF 		bpl	.L905
 10870              	.L944:
3137:src/display.c **** 	  }
 10871              		.loc 1 3137 6 is_stmt 1 view .LVU3537
 10872 0a44 FFF7FEFF 		bl	annunciators
 10873              	.LVL1228:
3206:src/display.c **** 	  if (State2.runmode) {
 10874              		.loc 1 3206 2 view .LVU3538
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10875              		.loc 1 3276 2 view .LVU3539
 10876 0a48 C14F     		ldr	r7, .L1184+4
 10877 0a4a DFF84093 		ldr	r9, .L1184+64
 10878 0a4e DFF84083 		ldr	r8, .L1184+68
 10879 0a52 FFF7FEFF 		bl	set_annunciators
 10880              	.LVL1229:
3277:src/display.c **** 	  ShowRPN = 0;
 10881              		.loc 1 3277 2 view .LVU3540
 10882 0a56 FFF7F2BB 		b	.L881
 10883              	.LVL1230:
 10884              	.L946:
3181:src/display.c **** 	  if (i > 0)
 10885              		.loc 1 3181 4 view .LVU3541
3181:src/display.c **** 	  if (i > 0)
 10886              		.loc 1 3181 8 is_stmt 0 view .LVU3542
 10887 0a5a BC4B     		ldr	r3, .L1184
 10888 0a5c 1B68     		ldr	r3, [r3]
 10889 0a5e B3F8E007 		ldrh	r0, [r3, #2016]
 10890              	.LVL1231:
3182:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10891              		.loc 1 3182 4 is_stmt 1 view .LVU3543
3182:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10892              		.loc 1 3182 7 is_stmt 0 view .LVU3544
 10893 0a62 0028     		cmp	r0, #0
 10894 0a64 00F09F80 		beq	.L958
3183:src/display.c **** 	  else
 10895              		.loc 1 3183 6 is_stmt 1 view .LVU3545
 10896 0a68 FFF7FEFF 		bl	getprog
 10897              	.LVL1232:
3183:src/display.c **** 	  else
 10898              		.loc 1 3183 6 is_stmt 0 view .LVU3546
 10899 0a6c 1CA9     		add	r1, sp, #112
 10900 0a6e FFF7FEFF 		bl	prt
 10901              	.LVL1233:
 10902 0a72 FFF7FEFF 		bl	set_status
 10903              	.LVL1234:
 10904              	.L959:
3186:src/display.c **** #if 0
 10905              		.loc 1 3186 4 is_stmt 1 view .LVU3547
 10906 0a76 8920     		movs	r0, #137
 10907 0a78 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccPzxiH4.s 			page 314


 10908              	.LVL1235:
3201:src/display.c **** 	      annuc = 1;
 10909              		.loc 1 3201 6 view .LVU3548
3201:src/display.c **** 	      annuc = 1;
 10910              		.loc 1 3201 10 is_stmt 0 view .LVU3549
 10911 0a7c FFF7FEFF 		bl	cur_shift
 10912              	.LVL1236:
3201:src/display.c **** 	      annuc = 1;
 10913              		.loc 1 3201 49 view .LVU3550
 10914 0a80 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10915 0a82 B34F     		ldr	r7, .L1184+4
 10916 0a84 DFF80493 		ldr	r9, .L1184+64
 10917              	.LVL1237:
3201:src/display.c **** 	      annuc = 1;
 10918              		.loc 1 3201 49 view .LVU3551
 10919 0a88 03F00603 		and	r3, r3, #6
 10920 0a8c 40EA0305 		orr	r5, r0, r3
 10921 0a90 EDB2     		uxtb	r5, r5
 10922 0a92 003D     		subs	r5, r5, #0
 10923 0a94 18BF     		it	ne
 10924 0a96 0125     		movne	r5, #1
 10925 0a98 FFF79BBB 		b	.L883
 10926              	.LVL1238:
 10927              	.L937:
 10928              	.LBB631:
 10929              	.LBB629:
2503:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10930              		.loc 1 2503 4 is_stmt 1 view .LVU3552
 10931 0a9c 0DF14C08 		add	r8, sp, #76
 10932              	.LVL1239:
2503:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10933              		.loc 1 2503 4 is_stmt 0 view .LVU3553
 10934 0aa0 1022     		movs	r2, #16
 10935 0aa2 4046     		mov	r0, r8
 10936 0aa4 FFF7FEFF 		bl	xset
 10937              	.LVL1240:
2507:src/display.c **** #endif
 10938              		.loc 1 2507 4 is_stmt 1 view .LVU3554
2507:src/display.c **** #endif
 10939              		.loc 1 2507 9 is_stmt 0 view .LVU3555
 10940 0aa8 AA49     		ldr	r1, .L1184+8
 10941 0aaa 4046     		mov	r0, r8
 10942 0aac FFF7FEFF 		bl	scopy_spc
 10943              	.LVL1241:
2509:src/display.c **** 	    *bp++ = '.';
 10944              		.loc 1 2509 8 view .LVU3556
 10945 0ab0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10946              	.LVL1242:
2509:src/display.c **** 	    *bp++ = '.';
 10947              		.loc 1 2509 4 is_stmt 1 view .LVU3557
2509:src/display.c **** 	    *bp++ = '.';
 10948              		.loc 1 2509 7 is_stmt 0 view .LVU3558
 10949 0ab2 DB07     		lsls	r3, r3, #31
 10950 0ab4 55D5     		bpl	.L939
2510:src/display.c **** 	    if (n >= 100) {
 10951              		.loc 1 2510 6 is_stmt 1 view .LVU3559
 10952              	.LVL1243:
ARM GAS  /tmp/ccPzxiH4.s 			page 315


2510:src/display.c **** 	    if (n >= 100) {
 10953              		.loc 1 2510 12 is_stmt 0 view .LVU3560
 10954 0ab6 2E23     		movs	r3, #46
2511:src/display.c **** 	      *bp++ = '1';
 10955              		.loc 1 2511 9 view .LVU3561
 10956 0ab8 B9F1630F 		cmp	r9, #99
2510:src/display.c **** 	    if (n >= 100) {
 10957              		.loc 1 2510 12 view .LVU3562
 10958 0abc 0370     		strb	r3, [r0]
2511:src/display.c **** 	      *bp++ = '1';
 10959              		.loc 1 2511 6 is_stmt 1 view .LVU3563
2511:src/display.c **** 	      *bp++ = '1';
 10960              		.loc 1 2511 9 is_stmt 0 view .LVU3564
 10961 0abe 4BDC     		bgt	.L940
2510:src/display.c **** 	    if (n >= 100) {
 10962              		.loc 1 2510 9 view .LVU3565
 10963 0ac0 0130     		adds	r0, r0, #1
 10964              	.LVL1244:
 10965              	.L941:
2517:src/display.c **** 	  else
 10966              		.loc 1 2517 6 is_stmt 1 view .LVU3566
2517:src/display.c **** 	  else
 10967              		.loc 1 2517 11 is_stmt 0 view .LVU3567
 10968 0ac2 4946     		mov	r1, r9
 10969 0ac4 0222     		movs	r2, #2
 10970 0ac6 FFF7FEFF 		bl	num_arg_0
 10971              	.LVL1245:
 10972              	.L943:
2520:src/display.c **** 	}
 10973              		.loc 1 2520 4 is_stmt 1 view .LVU3568
 10974 0aca 4046     		mov	r0, r8
 10975 0acc FFF7FEFF 		bl	set_status
 10976              	.LVL1246:
 10977 0ad0 A6E7     		b	.L938
 10978              	.LVL1247:
 10979              	.L1165:
2520:src/display.c **** 	}
 10980              		.loc 1 2520 4 is_stmt 0 view .LVU3569
 10981              	.LBE629:
 10982              	.LBE631:
 10983              	.LBB632:
 10984              	.LBB608:
2367:src/display.c **** 	  p = num_arg(buf, free_mem());
 10985              		.loc 1 2367 4 is_stmt 1 view .LVU3570
 10986 0ad2 A148     		ldr	r0, .L1184+12
 10987 0ad4 9D4F     		ldr	r7, .L1184
 10988 0ad6 FFF7FEFF 		bl	set_status
 10989              	.LVL1248:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 10990              		.loc 1 2368 4 view .LVU3571
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 10991              		.loc 1 2368 21 is_stmt 0 view .LVU3572
 10992 0ada FFF7FEFF 		bl	free_mem
 10993              	.LVL1249:
 10994 0ade 0146     		mov	r1, r0
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 10995              		.loc 1 2368 8 view .LVU3573
ARM GAS  /tmp/ccPzxiH4.s 			page 316


 10996 0ae0 13A8     		add	r0, sp, #76
 10997              	.LVL1250:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 10998              		.loc 1 2368 8 view .LVU3574
 10999 0ae2 FFF7FEFF 		bl	num_arg
 11000              	.LVL1251:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11001              		.loc 1 2369 4 is_stmt 1 view .LVU3575
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11002              		.loc 1 2369 8 is_stmt 0 view .LVU3576
 11003 0ae6 9D49     		ldr	r1, .L1184+16
 11004 0ae8 FFF7FEFF 		bl	scopy
 11005              	.LVL1252:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11006              		.loc 1 2369 8 view .LVU3577
 11007 0aec 8046     		mov	r8, r0
 11008              	.LVL1253:
2370:src/display.c **** 	  *p = '\0';
 11009              		.loc 1 2370 4 is_stmt 1 view .LVU3578
2370:src/display.c **** 	  *p = '\0';
 11010              		.loc 1 2370 19 is_stmt 0 view .LVU3579
 11011 0aee FFF7FEFF 		bl	free_flash
 11012              	.LVL1254:
2370:src/display.c **** 	  *p = '\0';
 11013              		.loc 1 2370 19 view .LVU3580
 11014 0af2 0146     		mov	r1, r0
2370:src/display.c **** 	  *p = '\0';
 11015              		.loc 1 2370 8 view .LVU3581
 11016 0af4 4046     		mov	r0, r8
 11017 0af6 FFF7FEFF 		bl	num_arg
 11018              	.LVL1255:
 11019 0afa 0346     		mov	r3, r0
 11020              	.LVL1256:
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11021              		.loc 1 2371 4 is_stmt 1 view .LVU3582
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11022              		.loc 1 2371 7 is_stmt 0 view .LVU3583
 11023 0afc 0021     		movs	r1, #0
2372:src/display.c **** 	}
 11024              		.loc 1 2372 4 view .LVU3584
 11025 0afe 13A8     		add	r0, sp, #76
 11026              	.LVL1257:
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11027              		.loc 1 2371 7 view .LVU3585
 11028 0b00 1970     		strb	r1, [r3]
2372:src/display.c **** 	}
 11029              		.loc 1 2372 4 is_stmt 1 view .LVU3586
 11030 0b02 FFF7FEFF 		bl	set_digits_string
 11031              	.LVL1258:
2372:src/display.c **** 	}
 11032              		.loc 1 2372 4 is_stmt 0 view .LVU3587
 11033 0b06 A1E6     		b	.L915
 11034              	.LVL1259:
 11035              	.L1167:
 11036              	.LBB598:
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11037              		.loc 1 2397 6 is_stmt 1 view .LVU3588
ARM GAS  /tmp/ccPzxiH4.s 			page 317


2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11038              		.loc 1 2397 11 is_stmt 0 view .LVU3589
 11039 0b08 4FF00A0B 		mov	fp, #10
 11040 0b0c 0BFB09F9 		mul	r9, fp, r9
 11041              	.LVL1260:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11042              		.loc 1 2398 6 is_stmt 1 view .LVU3590
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11043              		.loc 1 2398 28 is_stmt 0 view .LVU3591
 11044 0b10 B9F1460F 		cmp	r9, #70
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11045              		.loc 1 2399 10 view .LVU3592
 11046 0b14 9249     		ldr	r1, .L1184+20
 11047 0b16 13A8     		add	r0, sp, #76
 11048              	.LVL1261:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11049              		.loc 1 2398 28 view .LVU3593
 11050 0b18 CA46     		mov	r10, r9
 11051 0b1a A8BF     		it	ge
 11052 0b1c 4FF0460A 		movge	r10, #70
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11053              		.loc 1 2399 10 view .LVU3594
 11054 0b20 FFF7FEFF 		bl	scopy
 11055              	.LVL1262:
2400:src/display.c **** 	    *p++ = '-';
 11056              		.loc 1 2400 10 view .LVU3595
 11057 0b24 4946     		mov	r1, r9
 11058 0b26 0222     		movs	r2, #2
 11059 0b28 FFF7FEFF 		bl	num_arg_0
 11060              	.LVL1263:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11061              		.loc 1 2398 10 view .LVU3596
 11062 0b2c 0AF11D0A 		add	r10, r10, #29
 11063              	.LVL1264:
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11064              		.loc 1 2399 6 is_stmt 1 view .LVU3597
2400:src/display.c **** 	    *p++ = '-';
 11065              		.loc 1 2400 6 view .LVU3598
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11066              		.loc 1 2401 6 view .LVU3599
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11067              		.loc 1 2401 11 is_stmt 0 view .LVU3600
 11068 0b30 2D23     		movs	r3, #45
 11069 0b32 00F8013B 		strb	r3, [r0], #1
 11070              	.LVL1265:
2402:src/display.c **** 	    *p = '\0';
 11071              		.loc 1 2402 6 is_stmt 1 view .LVU3601
2402:src/display.c **** 	    *p = '\0';
 11072              		.loc 1 2402 10 is_stmt 0 view .LVU3602
 11073 0b36 5146     		mov	r1, r10
 11074 0b38 0222     		movs	r2, #2
 11075 0b3a FFF7FEFF 		bl	num_arg_0
 11076              	.LVL1266:
2402:src/display.c **** 	    *p = '\0';
 11077              		.loc 1 2402 10 view .LVU3603
 11078 0b3e 0246     		mov	r2, r0
 11079              	.LVL1267:
ARM GAS  /tmp/ccPzxiH4.s 			page 318


2403:src/display.c **** 	    set_status(buf);
 11080              		.loc 1 2403 6 is_stmt 1 view .LVU3604
2403:src/display.c **** 	    set_status(buf);
 11081              		.loc 1 2403 9 is_stmt 0 view .LVU3605
 11082 0b40 0027     		movs	r7, #0
2404:src/display.c **** 	  }
 11083              		.loc 1 2404 6 view .LVU3606
 11084 0b42 13A8     		add	r0, sp, #76
 11085              	.LVL1268:
2403:src/display.c **** 	    set_status(buf);
 11086              		.loc 1 2403 9 view .LVU3607
 11087 0b44 1770     		strb	r7, [r2]
2404:src/display.c **** 	  }
 11088              		.loc 1 2404 6 is_stmt 1 view .LVU3608
 11089 0b46 CDF800B0 		str	fp, [sp]
 11090 0b4a D846     		mov	r8, fp
 11091              	.LVL1269:
2404:src/display.c **** 	  }
 11092              		.loc 1 2404 6 is_stmt 0 view .LVU3609
 11093 0b4c FFF7FEFF 		bl	set_status
 11094              	.LVL1270:
2394:src/display.c **** 		
 11095              		.loc 1 2394 8 view .LVU3610
 11096 0b50 BB46     		mov	fp, r7
 11097 0b52 0720     		movs	r0, #7
 11098 0b54 0927     		movs	r7, #9
 11099 0b56 50E6     		b	.L920
 11100              	.LVL1271:
 11101              	.L940:
2394:src/display.c **** 		
 11102              		.loc 1 2394 8 view .LVU3611
 11103              	.LBE598:
 11104              	.LBE608:
 11105              	.LBE632:
 11106              	.LBB633:
 11107              	.LBB630:
2512:src/display.c **** 	      n -= 100;
 11108              		.loc 1 2512 8 is_stmt 1 view .LVU3612
2512:src/display.c **** 	      n -= 100;
 11109              		.loc 1 2512 14 is_stmt 0 view .LVU3613
 11110 0b58 3123     		movs	r3, #49
 11111 0b5a 4370     		strb	r3, [r0, #1]
2513:src/display.c **** 	    }
 11112              		.loc 1 2513 8 is_stmt 1 view .LVU3614
2513:src/display.c **** 	    }
 11113              		.loc 1 2513 10 is_stmt 0 view .LVU3615
 11114 0b5c A9F16409 		sub	r9, r9, #100
 11115              	.LVL1272:
2512:src/display.c **** 	      n -= 100;
 11116              		.loc 1 2512 11 view .LVU3616
 11117 0b60 0230     		adds	r0, r0, #2
 11118              	.LVL1273:
 11119              	.L939:
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11120              		.loc 1 2516 4 is_stmt 1 view .LVU3617
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11121              		.loc 1 2516 7 is_stmt 0 view .LVU3618
ARM GAS  /tmp/ccPzxiH4.s 			page 319


 11122 0b62 B9F1630F 		cmp	r9, #99
 11123 0b66 ACDD     		ble	.L941
2519:src/display.c **** 	  set_status(buf);
 11124              		.loc 1 2519 6 is_stmt 1 view .LVU3619
 11125              	.LVL1274:
2519:src/display.c **** 	  set_status(buf);
 11126              		.loc 1 2519 22 is_stmt 0 view .LVU3620
 11127 0b68 7E4B     		ldr	r3, .L1184+24
 11128 0b6a 9944     		add	r9, r9, r3
 11129              	.LVL1275:
2519:src/display.c **** 	  set_status(buf);
 11130              		.loc 1 2519 12 view .LVU3621
 11131 0b6c 19F8643C 		ldrb	r3, [r9, #-100]	@ zero_extendqisi2
 11132 0b70 0370     		strb	r3, [r0]
 11133 0b72 AAE7     		b	.L943
 11134              	.LVL1276:
 11135              	.L1163:
2519:src/display.c **** 	  set_status(buf);
 11136              		.loc 1 2519 12 view .LVU3622
 11137              	.LBE630:
 11138              	.LBE633:
 11139              	.LBB634:
 11140              	.LBB559:
3110:src/display.c **** 	      copyreg(&z, x);
 11141              		.loc 1 3110 8 is_stmt 1 discriminator 3 view .LVU3623
3110:src/display.c **** 	      copyreg(&z, x);
 11142              		.loc 1 3110 27 is_stmt 0 discriminator 3 view .LVU3624
 11143 0b74 7C4B     		ldr	r3, .L1184+28
 11144 0b76 D3F80080 		ldr	r8, [r3]
 11145              	.LVL1277:
3111:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11146              		.loc 1 3111 8 is_stmt 1 discriminator 3 view .LVU3625
 11147 0b7a 13A8     		add	r0, sp, #76
 11148 0b7c 4146     		mov	r1, r8
 11149 0b7e FFF7FEFF 		bl	copyreg
 11150              	.LVL1278:
3112:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11151              		.loc 1 3112 8 discriminator 3 view .LVU3626
 11152 0b82 F8B2     		uxtb	r0, r7
 11153 0b84 FFF7FEFF 		bl	sigma_val
 11154              	.LVL1279:
3113:src/display.c **** 	      copyreg(x, &z);
 11155              		.loc 1 3113 8 discriminator 3 view .LVU3627
 11156 0b88 FFF7FEFF 		bl	is_dblmode
 11157              	.LVL1280:
 11158 0b8c 0021     		movs	r1, #0
 11159 0b8e 0246     		mov	r2, r0
 11160 0b90 4046     		mov	r0, r8
 11161 0b92 FFF7FEFF 		bl	set_x
 11162              	.LVL1281:
3114:src/display.c **** 	      skip = 1;
 11163              		.loc 1 3114 8 discriminator 3 view .LVU3628
 11164 0b96 4046     		mov	r0, r8
 11165 0b98 13A9     		add	r1, sp, #76
 11166 0b9a FFF7FEFF 		bl	copyreg
 11167              	.LVL1282:
3115:src/display.c **** 	    }
ARM GAS  /tmp/ccPzxiH4.s 			page 320


 11168              		.loc 1 3115 8 discriminator 3 view .LVU3629
3115:src/display.c **** 	    }
 11169              		.loc 1 3115 8 is_stmt 0 discriminator 3 view .LVU3630
 11170              	.LBE559:
3118:src/display.c **** 	} else if (State2.multi) {
 11171              		.loc 1 3118 4 is_stmt 1 discriminator 3 view .LVU3631
 11172 0b9e 1CA8     		add	r0, sp, #112
 11173 0ba0 FFF7FEFF 		bl	set_status
 11174              	.LVL1283:
3118:src/display.c **** 	} else if (State2.multi) {
 11175              		.loc 1 3118 4 is_stmt 0 discriminator 3 view .LVU3632
 11176              	.LBE634:
3206:src/display.c **** 	  if (State2.runmode) {
 11177              		.loc 1 3206 2 is_stmt 1 discriminator 3 view .LVU3633
 11178 0ba4 76E6     		b	.L905
 11179              	.LVL1284:
 11180              	.L958:
3185:src/display.c **** 	  set_dot(STO_annun);
 11181              		.loc 1 3185 6 view .LVU3634
 11182 0ba6 7148     		ldr	r0, .L1184+32
 11183              	.LVL1285:
3185:src/display.c **** 	  set_dot(STO_annun);
 11184              		.loc 1 3185 6 is_stmt 0 view .LVU3635
 11185 0ba8 FFF7FEFF 		bl	set_status
 11186              	.LVL1286:
3185:src/display.c **** 	  set_dot(STO_annun);
 11187              		.loc 1 3185 6 view .LVU3636
 11188 0bac 63E7     		b	.L959
 11189              	.LVL1287:
 11190              	.L1168:
 11191              	.LBB635:
 11192              	.LBB609:
 11193              	.LBB599:
2407:src/display.c **** 	    end = regK_idx;
 11194              		.loc 1 2407 6 is_stmt 1 view .LVU3637
2408:src/display.c **** 	    start = 3;
 11195              		.loc 1 2408 6 view .LVU3638
2409:src/display.c **** 	    group = 4;
 11196              		.loc 1 2409 6 view .LVU3639
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11197              		.loc 1 2410 6 view .LVU3640
2411:src/display.c **** 	  }
 11198              		.loc 1 2411 6 view .LVU3641
 11199 0bae 7048     		ldr	r0, .L1184+36
 11200 0bb0 FFF7FEFF 		bl	set_status
 11201              	.LVL1288:
 11202 0bb4 0723     		movs	r3, #7
 11203 0bb6 0093     		str	r3, [sp]
 11204 0bb8 2220     		movs	r0, #34
 11205 0bba 2427     		movs	r7, #36
2409:src/display.c **** 	    group = 4;
 11206              		.loc 1 2409 12 is_stmt 0 view .LVU3642
 11207 0bbc 4FF0030B 		mov	fp, #3
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11208              		.loc 1 2410 12 view .LVU3643
 11209 0bc0 4FF00408 		mov	r8, #4
 11210              	.LVL1289:
ARM GAS  /tmp/ccPzxiH4.s 			page 321


2408:src/display.c **** 	    start = 3;
 11211              		.loc 1 2408 10 view .LVU3644
 11212 0bc4 4FF06F0A 		mov	r10, #111
2407:src/display.c **** 	    end = regK_idx;
 11213              		.loc 1 2407 11 view .LVU3645
 11214 0bc8 4FF06409 		mov	r9, #100
 11215              	.LVL1290:
2407:src/display.c **** 	    end = regK_idx;
 11216              		.loc 1 2407 11 view .LVU3646
 11217 0bcc 15E6     		b	.L920
 11218              	.LVL1291:
 11219              	.L1166:
2407:src/display.c **** 	    end = regK_idx;
 11220              		.loc 1 2407 11 view .LVU3647
 11221              	.LBE599:
2376:src/display.c **** 	  if (SizeStatRegs)
 11222              		.loc 1 2376 4 is_stmt 1 view .LVU3648
2376:src/display.c **** 	  if (SizeStatRegs)
 11223              		.loc 1 2376 8 is_stmt 0 view .LVU3649
 11224 0bce 0DF14C08 		add	r8, sp, #76
 11225              	.LVL1292:
2376:src/display.c **** 	  if (SizeStatRegs)
 11226              		.loc 1 2376 8 view .LVU3650
 11227 0bd2 6849     		ldr	r1, .L1184+40
 11228 0bd4 4046     		mov	r0, r8
 11229 0bd6 FFF7FEFF 		bl	scopy
 11230              	.LVL1293:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11231              		.loc 1 2377 8 view .LVU3651
 11232 0bda 674A     		ldr	r2, .L1184+44
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11233              		.loc 1 2377 7 view .LVU3652
 11234 0bdc 1268     		ldr	r2, [r2]
2376:src/display.c **** 	  if (SizeStatRegs)
 11235              		.loc 1 2376 8 view .LVU3653
 11236 0bde 0346     		mov	r3, r0
 11237              	.LVL1294:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11238              		.loc 1 2377 4 is_stmt 1 view .LVU3654
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11239              		.loc 1 2377 7 is_stmt 0 view .LVU3655
 11240 0be0 002A     		cmp	r2, #0
 11241 0be2 40F0AD80 		bne	.L1173
 11242              	.L917:
2379:src/display.c **** 	  set_status(buf);
 11243              		.loc 1 2379 4 is_stmt 1 view .LVU3656
2379:src/display.c **** 	  set_status(buf);
 11244              		.loc 1 2379 7 is_stmt 0 view .LVU3657
 11245 0be6 0022     		movs	r2, #0
 11246 0be8 1A70     		strb	r2, [r3]
2380:src/display.c **** 
 11247              		.loc 1 2380 4 is_stmt 1 view .LVU3658
 11248 0bea 4046     		mov	r0, r8
 11249              	.LVL1295:
2380:src/display.c **** 
 11250              		.loc 1 2380 4 is_stmt 0 view .LVU3659
 11251 0bec FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccPzxiH4.s 			page 322


 11252              	.LVL1296:
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11253              		.loc 1 2383 4 is_stmt 1 view .LVU3660
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11254              		.loc 1 2383 8 is_stmt 0 view .LVU3661
 11255 0bf0 FFF7FEFF 		bl	global_regs
 11256              	.LVL1297:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11257              		.loc 1 2384 8 view .LVU3662
 11258 0bf4 554F     		ldr	r7, .L1184
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11259              		.loc 1 2383 8 view .LVU3663
 11260 0bf6 0146     		mov	r1, r0
 11261 0bf8 4046     		mov	r0, r8
 11262 0bfa FFF7FEFF 		bl	num_arg
 11263              	.LVL1298:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11264              		.loc 1 2384 8 view .LVU3664
 11265 0bfe 3A68     		ldr	r2, [r7]
 11266 0c00 B2F8DE27 		ldrh	r2, [r2, #2014]
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11267              		.loc 1 2384 7 view .LVU3665
 11268 0c04 1204     		lsls	r2, r2, #16
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11269              		.loc 1 2383 8 view .LVU3666
 11270 0c06 0346     		mov	r3, r0
 11271              	.LVL1299:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11272              		.loc 1 2384 4 is_stmt 1 view .LVU3667
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11273              		.loc 1 2384 7 is_stmt 0 view .LVU3668
 11274 0c08 00F18E80 		bmi	.L1174
 11275              	.LVL1300:
 11276              	.L918:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11277              		.loc 1 2388 4 is_stmt 1 view .LVU3669
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11278              		.loc 1 2388 7 is_stmt 0 view .LVU3670
 11279 0c0c 0021     		movs	r1, #0
2389:src/display.c **** 	} else {
 11280              		.loc 1 2389 4 view .LVU3671
 11281 0c0e 4046     		mov	r0, r8
 11282              	.LVL1301:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11283              		.loc 1 2388 7 view .LVU3672
 11284 0c10 1970     		strb	r1, [r3]
2389:src/display.c **** 	} else {
 11285              		.loc 1 2389 4 is_stmt 1 view .LVU3673
 11286 0c12 FFF7FEFF 		bl	set_digits_string
 11287              	.LVL1302:
2389:src/display.c **** 	} else {
 11288              		.loc 1 2389 4 is_stmt 0 view .LVU3674
 11289 0c16 19E6     		b	.L915
 11290              	.LVL1303:
 11291              	.L1162:
2389:src/display.c **** 	} else {
 11292              		.loc 1 2389 4 view .LVU3675
ARM GAS  /tmp/ccPzxiH4.s 			page 323


 11293              	.LBE609:
 11294              	.LBE635:
 11295              	.LBB636:
 11296              	.LBB560:
3090:src/display.c **** 	      decimal64 z;
 11297              		.loc 1 3090 8 is_stmt 1 view .LVU3676
3091:src/display.c **** 
 11298              		.loc 1 3091 8 view .LVU3677
3093:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11299              		.loc 1 3093 8 view .LVU3678
 11300 0c18 0AA8     		add	r0, sp, #40
 11301 0c1a FFF7FEFF 		bl	getX
 11302              	.LVL1304:
3094:src/display.c **** 		const unsigned int f = argKIND(op);
 11303              		.loc 1 3094 8 view .LVU3679
3094:src/display.c **** 		const unsigned int f = argKIND(op);
 11304              		.loc 1 3094 11 is_stmt 0 view .LVU3680
 11305 0c1e C7F30723 		ubfx	r3, r7, #8, #8
 11306 0c22 022B     		cmp	r3, #2
 11307 0c24 53D1     		bne	.L908
 11308              	.LBB561:
3095:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11309              		.loc 1 3095 3 is_stmt 1 view .LVU3681
3095:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11310              		.loc 1 3095 22 is_stmt 0 view .LVU3682
 11311 0c26 FFB2     		uxtb	r7, r7
 11312              	.LVL1305:
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11313              		.loc 1 3096 3 is_stmt 1 view .LVU3683
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11314              		.loc 1 3096 6 is_stmt 0 view .LVU3684
 11315 0c28 9B2F     		cmp	r7, #155
 11316              	.LBB562:
3099:src/display.c **** 		}
 11317              		.loc 1 3099 5 view .LVU3685
 11318 0c2a 0DF14C08 		add	r8, sp, #76
 11319              	.LVL1306:
3099:src/display.c **** 		}
 11320              		.loc 1 3099 5 view .LVU3686
 11321              	.LBE562:
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11322              		.loc 1 3096 6 view .LVU3687
 11323 0c2e 00F2C580 		bhi	.L909
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11324              		.loc 1 3096 28 discriminator 1 view .LVU3688
 11325 0c32 1823     		movs	r3, #24
 11326 0c34 514A     		ldr	r2, .L1184+48
 11327 0c36 03FB07F3 		mul	r3, r3, r7
 11328 0c3a D358     		ldr	r3, [r2, r3]
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11329              		.loc 1 3096 23 discriminator 1 view .LVU3689
 11330 0c3c 002B     		cmp	r3, #0
 11331 0c3e 00F0BD80 		beq	.L909
 11332              	.LBB563:
3097:src/display.c **** 		  update_speed(0);
 11333              		.loc 1 3097 5 is_stmt 1 view .LVU3690
 11334              	.LVL1307:
ARM GAS  /tmp/ccPzxiH4.s 			page 324


3098:src/display.c **** 		  fp(&r, &x);
 11335              		.loc 1 3098 20 view .LVU3691
3099:src/display.c **** 		}
 11336              		.loc 1 3099 5 view .LVU3692
 11337 0c42 0AA9     		add	r1, sp, #40
 11338 0c44 4046     		mov	r0, r8
 11339 0c46 9847     		blx	r3
 11340              	.LVL1308:
 11341              	.L910:
3099:src/display.c **** 		}
 11342              		.loc 1 3099 5 is_stmt 0 view .LVU3693
 11343              	.LBE563:
 11344              	.LBE561:
3105:src/display.c **** 	      packed_from_number(&z, &r);
 11345              		.loc 1 3105 8 is_stmt 1 discriminator 1 view .LVU3694
 11346 0c48 4D4A     		ldr	r2, .L1184+52
 11347 0c4a 4146     		mov	r1, r8
 11348 0c4c 4046     		mov	r0, r8
 11349 0c4e FFF7FEFF 		bl	decNumberNormalize
 11350              	.LVL1309:
3106:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11351              		.loc 1 3106 8 discriminator 1 view .LVU3695
 11352 0c52 4146     		mov	r1, r8
 11353 0c54 04A8     		add	r0, sp, #16
 11354 0c56 FFF7FEFF 		bl	packed_from_number
 11355              	.LVL1310:
3107:src/display.c **** 	      skip = 1;
 11356              		.loc 1 3107 8 discriminator 1 view .LVU3696
 11357 0c5a 0022     		movs	r2, #0
 11358 0c5c 04A8     		add	r0, sp, #16
 11359 0c5e 1146     		mov	r1, r2
 11360 0c60 FFF7FEFF 		bl	set_x
 11361              	.LVL1311:
3108:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11362              		.loc 1 3108 8 discriminator 1 view .LVU3697
3108:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11363              		.loc 1 3108 8 is_stmt 0 discriminator 1 view .LVU3698
 11364              	.LBE560:
3118:src/display.c **** 	} else if (State2.multi) {
 11365              		.loc 1 3118 4 is_stmt 1 discriminator 1 view .LVU3699
 11366 0c64 1CA8     		add	r0, sp, #112
 11367 0c66 FFF7FEFF 		bl	set_status
 11368              	.LVL1312:
3118:src/display.c **** 	} else if (State2.multi) {
 11369              		.loc 1 3118 4 is_stmt 0 discriminator 1 view .LVU3700
 11370              	.LBE636:
3206:src/display.c **** 	  if (State2.runmode) {
 11371              		.loc 1 3206 2 is_stmt 1 discriminator 1 view .LVU3701
 11372 0c6a 13E6     		b	.L905
 11373              	.LVL1313:
 11374              	.L1146:
3147:src/display.c **** 	  } else if (State2.alphas) {
 11375              		.loc 1 3147 6 view .LVU3702
3147:src/display.c **** 	  } else if (State2.alphas) {
 11376              		.loc 1 3147 48 is_stmt 0 view .LVU3703
 11377 0c6c 581E     		subs	r0, r3, #1
 11378 0c6e FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccPzxiH4.s 			page 325


 11379              	.LVL1314:
 11380              	.LBB637:
 11381              	.LBI637:
3329:src/display.c **** 	int glen = *graphic++;
 11382              		.loc 1 3329 19 is_stmt 1 view .LVU3704
 11383              	.LBB638:
3330:src/display.c **** 	int i, j;
 11384              		.loc 1 3330 2 view .LVU3705
3330:src/display.c **** 	int i, j;
 11385              		.loc 1 3330 6 is_stmt 0 view .LVU3706
 11386 0c72 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 11387              	.LVL1315:
3331:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11388              		.loc 1 3331 2 is_stmt 1 view .LVU3707
3337:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11389              		.loc 1 3337 2 view .LVU3708
3337:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11390              		.loc 1 3337 5 is_stmt 0 view .LVU3709
 11391 0c74 002B     		cmp	r3, #0
 11392 0c76 3FF4ACAA 		beq	.L883
3338:src/display.c **** 
 11393              		.loc 1 3338 2 is_stmt 1 view .LVU3710
 11394              	.LVL1316:
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11395              		.loc 1 3340 2 view .LVU3711
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11396              		.loc 1 3340 12 view .LVU3712
 11397 0c7a 421C     		adds	r2, r0, #1
 11398 0c7c 0092     		str	r2, [sp]
 11399 0c7e 2B2B     		cmp	r3, #43
 11400 0c80 D4BF     		ite	le
 11401 0c82 D218     		addle	r2, r2, r3
 11402 0c84 2B32     		addgt	r2, r2, #43
 11403 0c86 CDE90158 		strd	r5, r8, [sp, #4]
 11404 0c8a 0397     		str	r7, [sp, #12]
 11405 0c8c 5D46     		mov	r5, fp
 11406 0c8e 9346     		mov	fp, r2
 11407              	.LVL1317:
 11408              	.L950:
3341:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11409              		.loc 1 3341 14 view .LVU3713
 11410 0c90 0123     		movs	r3, #1
 11411 0c92 DDF80080 		ldr	r8, [sp]
 11412 0c96 03FA05FA 		lsl	r10, r3, r5
 11413 0c9a 05F19407 		add	r7, r5, #148
 11414 0c9e 05E0     		b	.L953
 11415              	.LVL1318:
 11416              	.L1176:
 11417              	.LBB639:
 11418              	.LBB640:
 284:src/display.c ****   else	clr_dot(n);
 11419              		.loc 1 284 11 is_stmt 0 view .LVU3714
 11420 0ca0 FFF7FEFF 		bl	set_dot
 11421              	.LVL1319:
 11422              	.L952:
 284:src/display.c ****   else	clr_dot(n);
 11423              		.loc 1 284 11 view .LVU3715
ARM GAS  /tmp/ccPzxiH4.s 			page 326


 11424              	.LBE640:
 11425              	.LBE639:
3341:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11426              		.loc 1 3341 23 is_stmt 1 view .LVU3716
3341:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11427              		.loc 1 3341 14 view .LVU3717
3341:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11428              		.loc 1 3341 4 is_stmt 0 view .LVU3718
 11429 0ca4 C345     		cmp	fp, r8
 11430 0ca6 07F10607 		add	r7, r7, #6
 11431 0caa 08D0     		beq	.L1175
 11432              	.LVL1320:
 11433              	.L953:
3346:src/display.c **** #endif
 11434              		.loc 1 3346 6 is_stmt 1 view .LVU3719
 11435              	.LBB643:
 11436              	.LBI639:
 283:src/display.c ****   if (on)	set_dot(n);
 11437              		.loc 1 283 6 view .LVU3720
 11438              	.LBB641:
 284:src/display.c ****   else	clr_dot(n);
 11439              		.loc 1 284 3 view .LVU3721
 284:src/display.c ****   else	clr_dot(n);
 11440              		.loc 1 284 11 view .LVU3722
 285:src/display.c **** }
 11441              		.loc 1 285 8 view .LVU3723
 11442              	.LBE641:
 11443              	.LBE643:
3346:src/display.c **** #endif
 11444              		.loc 1 3346 37 is_stmt 0 view .LVU3724
 11445 0cac 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 11446              	.LVL1321:
 11447              	.LBB644:
 11448              	.LBB642:
 284:src/display.c ****   else	clr_dot(n);
 11449              		.loc 1 284 6 view .LVU3725
 11450 0cb0 13EA0A0F 		tst	r3, r10
 284:src/display.c ****   else	clr_dot(n);
 11451              		.loc 1 284 11 view .LVU3726
 11452 0cb4 3846     		mov	r0, r7
 284:src/display.c ****   else	clr_dot(n);
 11453              		.loc 1 284 6 view .LVU3727
 11454 0cb6 F3D1     		bne	.L1176
 285:src/display.c **** }
 11455              		.loc 1 285 8 view .LVU3728
 11456 0cb8 FFF7FEFF 		bl	clr_dot
 11457              	.LVL1322:
 11458 0cbc F2E7     		b	.L952
 11459              	.LVL1323:
 11460              	.L1175:
 285:src/display.c **** }
 11461              		.loc 1 285 8 view .LVU3729
 11462              	.LBE642:
 11463              	.LBE644:
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11464              		.loc 1 3340 17 is_stmt 1 view .LVU3730
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
ARM GAS  /tmp/ccPzxiH4.s 			page 327


 11465              		.loc 1 3340 18 is_stmt 0 view .LVU3731
 11466 0cbe 0135     		adds	r5, r5, #1
 11467              	.LVL1324:
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11468              		.loc 1 3340 12 is_stmt 1 view .LVU3732
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11469              		.loc 1 3340 2 is_stmt 0 view .LVU3733
 11470 0cc0 062D     		cmp	r5, #6
 11471 0cc2 E5D1     		bne	.L950
 11472 0cc4 DDE90158 		ldrd	r5, r8, [sp, #4]
 11473              	.LVL1325:
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11474              		.loc 1 3340 2 view .LVU3734
 11475 0cc8 039F     		ldr	r7, [sp, #12]
 11476 0cca FFF782BA 		b	.L883
 11477              	.LVL1326:
 11478              	.L908:
3340:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11479              		.loc 1 3340 2 view .LVU3735
 11480              	.LBE638:
 11481              	.LBE637:
 11482              	.LBB645:
 11483              	.LBB565:
3104:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11484              		.loc 1 3104 3 is_stmt 1 view .LVU3736
 11485 0cce 0DF14C08 		add	r8, sp, #76
 11486              	.LVL1327:
3104:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11487              		.loc 1 3104 3 is_stmt 0 view .LVU3737
 11488 0cd2 0AAA     		add	r2, sp, #40
 11489 0cd4 07F07F01 		and	r1, r7, #127
 11490 0cd8 4046     		mov	r0, r8
 11491 0cda FFF7FEFF 		bl	do_conv
 11492              	.LVL1328:
 11493 0cde B3E7     		b	.L910
 11494              	.LVL1329:
 11495              	.L934:
3104:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11496              		.loc 1 3104 3 view .LVU3738
 11497              	.LBE565:
 11498              	.LBE645:
 11499              	.LBB646:
 11500              	.LBB622:
2479:src/display.c **** 	    }
 11501              		.loc 1 2479 8 is_stmt 1 view .LVU3739
2479:src/display.c **** 	    }
 11502              		.loc 1 2479 37 is_stmt 0 view .LVU3740
 11503 0ce0 02EB8202 		add	r2, r2, r2, lsl #2
 11504              	.LVL1330:
2479:src/display.c **** 	    }
 11505              		.loc 1 2479 8 view .LVU3741
 11506 0ce4 08EB0200 		add	r0, r8, r2
 11507 0ce8 0021     		movs	r1, #0
 11508 0cea FFF7FEFF 		bl	set_exp_digits_string
 11509              	.LVL1331:
2479:src/display.c **** 	    }
 11510              		.loc 1 2479 8 view .LVU3742
ARM GAS  /tmp/ccPzxiH4.s 			page 328


 11511              	.LBE622:
 11512              	.LBE646:
3276:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 11513              		.loc 1 3276 2 is_stmt 1 view .LVU3743
 11514 0cee D1E5     		b	.L905
 11515              	.LVL1332:
 11516              	.L1147:
3152:src/display.c **** 	    j = State2.alpha_pos;
 11517              		.loc 1 3152 6 view .LVU3744
3152:src/display.c **** 	    j = State2.alpha_pos;
 11518              		.loc 1 3152 22 is_stmt 0 view .LVU3745
 11519 0cf0 164A     		ldr	r2, .L1184
 11520 0cf2 0093     		str	r3, [sp]
 11521 0cf4 1168     		ldr	r1, [r2]
3152:src/display.c **** 	    j = State2.alpha_pos;
 11522              		.loc 1 3152 11 view .LVU3746
 11523 0cf6 1CA8     		add	r0, sp, #112
 11524 0cf8 01F5F661 		add	r1, r1, #1968
 11525 0cfc FFF7FEFF 		bl	scopy
 11526              	.LVL1333:
3153:src/display.c **** 	    if (j != 0) {
 11527              		.loc 1 3153 16 view .LVU3747
 11528 0d00 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 11529              	.LVL1334:
3153:src/display.c **** 	    if (j != 0) {
 11530              		.loc 1 3153 6 is_stmt 1 view .LVU3748
3154:src/display.c **** 	      i = slen(buf);
 11531              		.loc 1 3154 6 view .LVU3749
3154:src/display.c **** 	      i = slen(buf);
 11532              		.loc 1 3154 9 is_stmt 0 view .LVU3750
 11533 0d04 BBF1000F 		cmp	fp, #0
 11534 0d08 44D1     		bne	.L1177
3171:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11535              		.loc 1 3171 8 is_stmt 1 view .LVU3751
3171:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11536              		.loc 1 3171 11 is_stmt 0 view .LVU3752
 11537 0d0a BAF1000F 		cmp	r10, #0
 11538 0d0e 05D0     		beq	.L957
3172:src/display.c **** 		*bp++ = '\0';
 11539              		.loc 1 3172 3 is_stmt 1 view .LVU3753
 11540              	.LVL1335:
3172:src/display.c **** 		*bp++ = '\0';
 11541              		.loc 1 3172 23 is_stmt 0 view .LVU3754
 11542 0d10 0AF1100A 		add	r10, r10, #16
3172:src/display.c **** 		*bp++ = '\0';
 11543              		.loc 1 3172 9 view .LVU3755
 11544 0d14 80F800A0 		strb	r10, [r0]
3173:src/display.c **** 	      }
 11545              		.loc 1 3173 3 is_stmt 1 view .LVU3756
 11546              	.LVL1336:
3173:src/display.c **** 	      }
 11547              		.loc 1 3173 9 is_stmt 0 view .LVU3757
 11548 0d18 80F801B0 		strb	fp, [r0, #1]
 11549              	.LVL1337:
 11550              	.L957:
3175:src/display.c **** 	    }
 11551              		.loc 1 3175 8 is_stmt 1 view .LVU3758
ARM GAS  /tmp/ccPzxiH4.s 			page 329


 11552 0d1c 1CA8     		add	r0, sp, #112
 11553 0d1e FFF7FEFF 		bl	set_status_right
 11554              	.LVL1338:
3206:src/display.c **** 	  if (State2.runmode) {
 11555              		.loc 1 3206 2 view .LVU3759
2980:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11556              		.loc 1 2980 6 is_stmt 0 view .LVU3760
 11557 0d22 0025     		movs	r5, #0
 11558 0d24 FFF755BA 		b	.L883
 11559              	.LVL1339:
 11560              	.L1174:
 11561              	.LBB647:
 11562              	.LBB610:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 11563              		.loc 1 2385 6 is_stmt 1 view .LVU3761
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 11564              		.loc 1 2385 10 is_stmt 0 view .LVU3762
 11565 0d28 1649     		ldr	r1, .L1184+56
 11566 0d2a FFF7FEFF 		bl	scopy
 11567              	.LVL1340:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 11568              		.loc 1 2385 10 view .LVU3763
 11569 0d2e 8146     		mov	r9, r0
 11570              	.LVL1341:
2386:src/display.c **** 	  }
 11571              		.loc 1 2386 6 is_stmt 1 view .LVU3764
2386:src/display.c **** 	  }
 11572              		.loc 1 2386 21 is_stmt 0 view .LVU3765
 11573 0d30 FFF7FEFF 		bl	local_regs
 11574              	.LVL1342:
2386:src/display.c **** 	  }
 11575              		.loc 1 2386 21 view .LVU3766
 11576 0d34 0146     		mov	r1, r0
2386:src/display.c **** 	  }
 11577              		.loc 1 2386 10 view .LVU3767
 11578 0d36 4846     		mov	r0, r9
 11579 0d38 FFF7FEFF 		bl	num_arg
 11580              	.LVL1343:
 11581 0d3c 0346     		mov	r3, r0
 11582              	.LVL1344:
2386:src/display.c **** 	  }
 11583              		.loc 1 2386 10 view .LVU3768
 11584 0d3e 65E7     		b	.L918
 11585              	.LVL1345:
 11586              	.L1173:
2378:src/display.c **** 	  *p = '\0';
 11587              		.loc 1 2378 6 is_stmt 1 view .LVU3769
2378:src/display.c **** 	  *p = '\0';
 11588              		.loc 1 2378 10 is_stmt 0 view .LVU3770
 11589 0d40 1149     		ldr	r1, .L1184+60
 11590 0d42 FFF7FEFF 		bl	scopy
 11591              	.LVL1346:
2378:src/display.c **** 	  *p = '\0';
 11592              		.loc 1 2378 10 view .LVU3771
 11593 0d46 0346     		mov	r3, r0
 11594              	.LVL1347:
2378:src/display.c **** 	  *p = '\0';
ARM GAS  /tmp/ccPzxiH4.s 			page 330


 11595              		.loc 1 2378 10 view .LVU3772
 11596 0d48 4DE7     		b	.L917
 11597              	.L1185:
 11598 0d4a 00BF     		.align	2
 11599              	.L1184:
 11600 0d4c 00000000 		.word	main_ram
 11601 0d50 00000000 		.word	DispMsg
 11602 0d54 80000000 		.word	.LC42
 11603 0d58 2C000000 		.word	.LC33
 11604 0d5c 34000000 		.word	.LC34
 11605 0d60 58000000 		.word	.LC38
 11606 0d64 9C000000 		.word	.LC30
 11607 0d68 00000000 		.word	StackBase
 11608 0d6c 88000000 		.word	.LC43
 11609 0d70 5C000000 		.word	.LC39
 11610 0d74 3C000000 		.word	.LC35
 11611 0d78 00000000 		.word	SizeStatRegs
 11612 0d7c 00000000 		.word	monfuncs
 11613 0d80 00000000 		.word	Ctx
 11614 0d84 4C000000 		.word	.LC37
 11615 0d88 44000000 		.word	.LC36
 11616 0d8c 00000000 		.word	DispPlot
 11617 0d90 00000000 		.word	ShowRegister
 11618              	.LVL1348:
 11619              	.L1177:
2378:src/display.c **** 	  *p = '\0';
 11620              		.loc 1 2378 10 view .LVU3773
 11621              	.LBE610:
 11622              	.LBE647:
3155:src/display.c **** 	      //				
 11623              		.loc 1 3155 8 is_stmt 1 view .LVU3774
3155:src/display.c **** 	      //				
 11624              		.loc 1 3155 12 is_stmt 0 view .LVU3775
 11625 0d94 1CA8     		add	r0, sp, #112
 11626              	.LVL1349:
3155:src/display.c **** 	      //				
 11627              		.loc 1 3155 12 view .LVU3776
 11628 0d96 FFF7FEFF 		bl	slen
 11629              	.LVL1350:
3157:src/display.c **** #ifdef BIGGER_DISPLAY
 11630              		.loc 1 3157 8 is_stmt 1 view .LVU3777
3161:src/display.c **** #endif
 11631              		.loc 1 3161 8 view .LVU3778
3157:src/display.c **** #ifdef BIGGER_DISPLAY
 11632              		.loc 1 3157 10 is_stmt 0 view .LVU3779
 11633 0d9a 0BEB4B0B 		add	fp, fp, fp, lsl #1
 11634              	.LVL1351:
3161:src/display.c **** #endif
 11635              		.loc 1 3161 15 view .LVU3780
 11636 0d9e A0EB4B00 		sub	r0, r0, fp, lsl #1
 11637              	.LVL1352:
3161:src/display.c **** #endif
 11638              		.loc 1 3161 11 view .LVU3781
 11639 0da2 0B28     		cmp	r0, #11
 11640 0da4 7FF788A9 		ble	.L886
3164:src/display.c **** 		set_status_right(buf);
 11641              		.loc 1 3164 3 is_stmt 1 view .LVU3782
ARM GAS  /tmp/ccPzxiH4.s 			page 331


3164:src/display.c **** 		set_status_right(buf);
 11642              		.loc 1 3164 18 is_stmt 0 view .LVU3783
 11643 0da8 26AB     		add	r3, sp, #152
 11644 0daa 1A18     		adds	r2, r3, r0
 11645 0dac 009B     		ldr	r3, [sp]
 11646 0dae 02F8283C 		strb	r3, [r2, #-40]
3165:src/display.c **** 		}
 11647              		.loc 1 3165 3 is_stmt 1 view .LVU3784
 11648 0db2 1CA8     		add	r0, sp, #112
 11649 0db4 FFF7FEFF 		bl	set_status_right
 11650              	.LVL1353:
3206:src/display.c **** 	  if (State2.runmode) {
 11651              		.loc 1 3206 2 view .LVU3785
 11652 0db8 FFF70BBA 		b	.L883
 11653              	.LVL1354:
 11654              	.L909:
 11655              	.LBB648:
 11656              	.LBB566:
 11657              	.LBB564:
3102:src/display.c **** 	      } else
 11658              		.loc 1 3102 5 view .LVU3786
 11659 0dbc 4046     		mov	r0, r8
 11660 0dbe FFF7FEFF 		bl	set_NaN
 11661              	.LVL1355:
 11662 0dc2 41E7     		b	.L910
 11663              	.LBE564:
 11664              	.LBE566:
 11665              	.LBE648:
 11666              		.cfi_endproc
 11667              	.LFE33:
 11669              		.section	.text.frozen_display,"ax",%progbits
 11670              		.align	1
 11671              		.p2align 2,,3
 11672              		.global	frozen_display
 11673              		.syntax unified
 11674              		.thumb
 11675              		.thumb_func
 11676              		.fpu fpv4-sp-d16
 11678              	frozen_display:
 11679              	.LFB34:
3323:src/display.c **** 	State2.disp_freeze = 0;
 11680              		.loc 1 3323 7 view -0
 11681              		.cfi_startproc
 11682              		@ args = 0, pretend = 0, frame = 0
 11683              		@ frame_needed = 0, uses_anonymous_args = 0
3324:src/display.c **** 	display();
 11684              		.loc 1 3324 2 view .LVU3788
3323:src/display.c **** 	State2.disp_freeze = 0;
 11685              		.loc 1 3323 7 is_stmt 0 view .LVU3789
 11686 0000 10B5     		push	{r4, lr}
 11687              		.cfi_def_cfa_offset 8
 11688              		.cfi_offset 4, -8
 11689              		.cfi_offset 14, -4
3324:src/display.c **** 	display();
 11690              		.loc 1 3324 21 view .LVU3790
 11691 0002 064C     		ldr	r4, .L1188
 11692 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccPzxiH4.s 			page 332


 11693 0006 6FF30413 		bfc	r3, #4, #1
 11694 000a E375     		strb	r3, [r4, #23]
3325:src/display.c **** 	State2.disp_freeze = 1;
 11695              		.loc 1 3325 2 is_stmt 1 view .LVU3791
 11696 000c FFF7FEFF 		bl	display
 11697              	.LVL1356:
3326:src/display.c ****       }
 11698              		.loc 1 3326 2 view .LVU3792
3326:src/display.c ****       }
 11699              		.loc 1 3326 21 is_stmt 0 view .LVU3793
 11700 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11701 0012 43F01003 		orr	r3, r3, #16
 11702 0016 E375     		strb	r3, [r4, #23]
3327:src/display.c **** 
 11703              		.loc 1 3327 7 view .LVU3794
 11704 0018 10BD     		pop	{r4, pc}
 11705              	.L1189:
 11706 001a 00BF     		.align	2
 11707              	.L1188:
 11708 001c 00000000 		.word	StateWhileOn
 11709              		.cfi_endproc
 11710              	.LFE34:
 11712              		.section	.text.message,"ax",%progbits
 11713              		.align	1
 11714              		.p2align 2,,3
 11715              		.global	message
 11716              		.syntax unified
 11717              		.thumb
 11718              		.thumb_func
 11719              		.fpu fpv4-sp-d16
 11721              	message:
 11722              	.LVL1357:
 11723              	.LFB44:
3525:src/display.c **** 	State2.disp_freeze = 0;
 11724              		.loc 1 3525 7 is_stmt 1 view -0
 11725              		.cfi_startproc
 11726              		@ args = 0, pretend = 0, frame = 0
 11727              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	State2.disp_small = 0;
 11728              		.loc 1 3526 2 view .LVU3796
3527:src/display.c **** 	WasDataEntry = 0;
 11729              		.loc 1 3527 2 view .LVU3797
3527:src/display.c **** 	WasDataEntry = 0;
 11730              		.loc 1 3527 20 is_stmt 0 view .LVU3798
 11731 0000 174A     		ldr	r2, .L1200
3525:src/display.c **** 	State2.disp_freeze = 0;
 11732              		.loc 1 3525 7 view .LVU3799
 11733 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11734              		.cfi_def_cfa_offset 24
 11735              		.cfi_offset 3, -24
 11736              		.cfi_offset 4, -20
 11737              		.cfi_offset 5, -16
 11738              		.cfi_offset 6, -12
 11739              		.cfi_offset 7, -8
 11740              		.cfi_offset 14, -4
3527:src/display.c **** 	WasDataEntry = 0;
 11741              		.loc 1 3527 20 view .LVU3800
ARM GAS  /tmp/ccPzxiH4.s 			page 333


 11742 0004 D38A     		ldrh	r3, [r2, #22]
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11743              		.loc 1 3528 15 view .LVU3801
 11744 0006 174E     		ldr	r6, .L1200+4
3527:src/display.c **** 	WasDataEntry = 0;
 11745              		.loc 1 3527 20 view .LVU3802
 11746 0008 23F48453 		bic	r3, r3, #4224
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11747              		.loc 1 3528 15 view .LVU3803
 11748 000c 0027     		movs	r7, #0
3527:src/display.c **** 	WasDataEntry = 0;
 11749              		.loc 1 3527 20 view .LVU3804
 11750 000e D382     		strh	r3, [r2, #22]	@ movhi
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11751              		.loc 1 3528 2 is_stmt 1 view .LVU3805
3529:src/display.c **** 	  // Complete redraw necessary
 11752              		.loc 1 3529 5 is_stmt 0 view .LVU3806
 11753 0010 9B05     		lsls	r3, r3, #22
3525:src/display.c **** 	State2.disp_freeze = 0;
 11754              		.loc 1 3525 7 view .LVU3807
 11755 0012 0546     		mov	r5, r0
 11756 0014 0C46     		mov	r4, r1
3528:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11757              		.loc 1 3528 15 view .LVU3808
 11758 0016 3760     		str	r7, [r6]
3529:src/display.c **** 	  // Complete redraw necessary
 11759              		.loc 1 3529 2 is_stmt 1 view .LVU3809
3529:src/display.c **** 	  // Complete redraw necessary
 11760              		.loc 1 3529 5 is_stmt 0 view .LVU3810
 11761 0018 12D5     		bpl	.L1191
3529:src/display.c **** 	  // Complete redraw necessary
 11762              		.loc 1 3529 27 discriminator 1 view .LVU3811
 11763 001a D1B1     		cbz	r1, .L1199
 11764              	.L1192:
3536:src/display.c **** 	    ShowRPN = 0;
 11765              		.loc 1 3536 6 is_stmt 1 view .LVU3812
 11766 001c FFF7FEFF 		bl	reset_disp
 11767              	.LVL1358:
3537:src/display.c **** 	    set_annunciators();
 11768              		.loc 1 3537 6 view .LVU3813
3537:src/display.c **** 	    set_annunciators();
 11769              		.loc 1 3537 14 is_stmt 0 view .LVU3814
 11770 0020 114B     		ldr	r3, .L1200+8
 11771 0022 0026     		movs	r6, #0
 11772 0024 1E60     		str	r6, [r3]
3538:src/display.c **** 	    set_digits_string( str2, 0 );
 11773              		.loc 1 3538 6 is_stmt 1 view .LVU3815
 11774 0026 FFF7FEFF 		bl	set_annunciators
 11775              	.LVL1359:
3539:src/display.c **** 	  }
 11776              		.loc 1 3539 6 view .LVU3816
 11777 002a 3146     		mov	r1, r6
 11778 002c 2046     		mov	r0, r4
 11779 002e FFF7FEFF 		bl	set_digits_string
 11780              	.LVL1360:
3541:src/display.c **** 	  finish_display();// message
 11781              		.loc 1 3541 4 view .LVU3817
ARM GAS  /tmp/ccPzxiH4.s 			page 334


 11782 0032 2846     		mov	r0, r5
 11783 0034 FFF7FEFF 		bl	set_status
 11784              	.LVL1361:
3542:src/display.c **** 	}
 11785              		.loc 1 3542 4 view .LVU3818
3544:src/display.c **** 
 11786              		.loc 1 3544 7 is_stmt 0 view .LVU3819
 11787 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11788              		.cfi_remember_state
 11789              		.cfi_restore 14
 11790              		.cfi_restore 7
 11791              		.cfi_restore 6
 11792              		.cfi_restore 5
 11793              		.cfi_restore 4
 11794              		.cfi_restore 3
 11795              		.cfi_def_cfa_offset 0
 11796              	.LVL1362:
3542:src/display.c **** 	}
 11797              		.loc 1 3542 4 view .LVU3820
 11798 003c FFF7FEBF 		b	finish_display
 11799              	.LVL1363:
 11800              	.L1191:
 11801              		.cfi_restore_state
3535:src/display.c **** 	    reset_disp();
 11802              		.loc 1 3535 4 is_stmt 1 view .LVU3821
3535:src/display.c **** 	    reset_disp();
 11803              		.loc 1 3535 7 is_stmt 0 view .LVU3822
 11804 0040 0029     		cmp	r1, #0
 11805 0042 EBD1     		bne	.L1192
3541:src/display.c **** 	  finish_display();// message
 11806              		.loc 1 3541 4 is_stmt 1 view .LVU3823
 11807 0044 2846     		mov	r0, r5
 11808              	.LVL1364:
3541:src/display.c **** 	  finish_display();// message
 11809              		.loc 1 3541 4 is_stmt 0 view .LVU3824
 11810 0046 FFF7FEFF 		bl	set_status
 11811              	.LVL1365:
3542:src/display.c **** 	}
 11812              		.loc 1 3542 4 is_stmt 1 view .LVU3825
3544:src/display.c **** 
 11813              		.loc 1 3544 7 is_stmt 0 view .LVU3826
 11814 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11815              		.cfi_remember_state
 11816              		.cfi_restore 14
 11817              		.cfi_restore 7
 11818              		.cfi_restore 6
 11819              		.cfi_restore 5
 11820              		.cfi_restore 4
 11821              		.cfi_restore 3
 11822              		.cfi_def_cfa_offset 0
 11823              	.LVL1366:
3542:src/display.c **** 	}
 11824              		.loc 1 3542 4 view .LVU3827
 11825 004e FFF7FEBF 		b	finish_display
 11826              	.LVL1367:
 11827              	.L1199:
 11828              		.cfi_restore_state
ARM GAS  /tmp/ccPzxiH4.s 			page 335


3531:src/display.c **** 	  display();
 11829              		.loc 1 3531 4 is_stmt 1 view .LVU3828
3531:src/display.c **** 	  display();
 11830              		.loc 1 3531 12 is_stmt 0 view .LVU3829
 11831 0052 064B     		ldr	r3, .L1200+12
 11832 0054 1860     		str	r0, [r3]
3532:src/display.c **** 	}
 11833              		.loc 1 3532 4 is_stmt 1 view .LVU3830
3544:src/display.c **** 
 11834              		.loc 1 3544 7 is_stmt 0 view .LVU3831
 11835 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11836              		.cfi_restore 14
 11837              		.cfi_restore 7
 11838              		.cfi_restore 6
 11839              		.cfi_restore 5
 11840              		.cfi_restore 4
 11841              		.cfi_restore 3
 11842              		.cfi_def_cfa_offset 0
3532:src/display.c **** 	}
 11843              		.loc 1 3532 4 view .LVU3832
 11844 005a FFF7FEBF 		b	display
 11845              	.LVL1368:
 11846              	.L1201:
3532:src/display.c **** 	}
 11847              		.loc 1 3532 4 view .LVU3833
 11848 005e 00BF     		.align	2
 11849              	.L1200:
 11850 0060 00000000 		.word	StateWhileOn
 11851 0064 00000000 		.word	WasDataEntry
 11852 0068 00000000 		.word	ShowRPN
 11853 006c 00000000 		.word	DispMsg
 11854              		.cfi_endproc
 11855              	.LFE44:
 11857              		.section	.text.error_message,"ax",%progbits
 11858              		.align	1
 11859              		.p2align 2,,3
 11860              		.global	error_message
 11861              		.syntax unified
 11862              		.thumb
 11863              		.thumb_func
 11864              		.fpu fpv4-sp-d16
 11866              	error_message:
 11867              	.LVL1369:
 11868              	.LFB1:
 117:src/display.c **** #define MSG1(top) top "\0"
 11869              		.loc 1 117 1 is_stmt 1 view -0
 11870              		.cfi_startproc
 11871              		@ args = 0, pretend = 0, frame = 0
 11872              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/display.c ****     {
 11873              		.loc 1 122 3 view .LVU3835
 183:src/display.c ****     const char *p = error_table[e];
 11874              		.loc 1 183 3 view .LVU3836
 183:src/display.c ****     const char *p = error_table[e];
 11875              		.loc 1 183 21 is_stmt 0 view .LVU3837
 11876 0000 334B     		ldr	r3, .L1228
 11877 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccPzxiH4.s 			page 336


 11878 0004 0343     		orrs	r3, r0, r3
 11879 0006 00D1     		bne	.L1224
 11880 0008 7047     		bx	lr
 11881              	.L1224:
 11882              	.LBB649:
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11883              		.loc 1 184 5 is_stmt 1 view .LVU3838
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11884              		.loc 1 184 17 is_stmt 0 view .LVU3839
 11885 000a 324B     		ldr	r3, .L1228+4
 11886              	.LBE649:
 117:src/display.c **** #define MSG1(top) top "\0"
 11887              		.loc 1 117 1 view .LVU3840
 11888 000c 70B5     		push	{r4, r5, r6, lr}
 11889              		.cfi_def_cfa_offset 16
 11890              		.cfi_offset 4, -16
 11891              		.cfi_offset 5, -12
 11892              		.cfi_offset 6, -8
 11893              		.cfi_offset 14, -4
 11894              	.LBB661:
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11895              		.loc 1 184 17 view .LVU3841
 11896 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 11897              	.LVL1370:
 185:src/display.c ****     if (*q == '\0')
 11898              		.loc 1 185 5 is_stmt 1 view .LVU3842
 11899 0012 0446     		mov	r4, r0
 185:src/display.c ****     if (*q == '\0')
 11900              		.loc 1 185 21 is_stmt 0 view .LVU3843
 11901 0014 0021     		movs	r1, #0
 11902 0016 3046     		mov	r0, r6
 11903              	.LVL1371:
 185:src/display.c ****     if (*q == '\0')
 11904              		.loc 1 185 21 view .LVU3844
 11905 0018 FFF7FEFF 		bl	find_char
 11906              	.LVL1372:
 186:src/display.c ****       q = S7_ERROR;
 11907              		.loc 1 186 5 is_stmt 1 view .LVU3845
 186:src/display.c ****       q = S7_ERROR;
 11908              		.loc 1 186 9 is_stmt 0 view .LVU3846
 11909 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 186:src/display.c ****       q = S7_ERROR;
 11910              		.loc 1 186 8 view .LVU3847
 11911 001e 002B     		cmp	r3, #0
 11912 0020 3CD0     		beq	.L1213
 188:src/display.c ****       DispMsg = p;
 11913              		.loc 1 188 8 view .LVU3848
 11914 0022 582B     		cmp	r3, #88
 185:src/display.c ****     if (*q == '\0')
 11915              		.loc 1 185 17 view .LVU3849
 11916 0024 00F10105 		add	r5, r0, #1
 11917              	.LVL1373:
 188:src/display.c ****       DispMsg = p;
 11918              		.loc 1 188 5 is_stmt 1 view .LVU3850
 188:src/display.c ****       DispMsg = p;
 11919              		.loc 1 188 8 is_stmt 0 view .LVU3851
 11920 0028 39D1     		bne	.L1205
ARM GAS  /tmp/ccPzxiH4.s 			page 337


 189:src/display.c ****       frozen_display();
 11921              		.loc 1 189 7 is_stmt 1 view .LVU3852
 11922              	.LBB650:
 11923              	.LBB651:
3324:src/display.c **** 	display();
 11924              		.loc 1 3324 21 is_stmt 0 view .LVU3853
 11925 002a 2B4C     		ldr	r4, .L1228+8
 11926              	.LVL1374:
3324:src/display.c **** 	display();
 11927              		.loc 1 3324 21 view .LVU3854
 11928              	.LBE651:
 11929              	.LBE650:
 189:src/display.c ****       frozen_display();
 11930              		.loc 1 189 15 view .LVU3855
 11931 002c 2B4A     		ldr	r2, .L1228+12
 11932              	.LBB655:
 11933              	.LBB652:
3324:src/display.c **** 	display();
 11934              		.loc 1 3324 21 view .LVU3856
 11935 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11936              	.LBE652:
 11937              	.LBE655:
 189:src/display.c ****       frozen_display();
 11938              		.loc 1 189 15 view .LVU3857
 11939 0030 1660     		str	r6, [r2]
 190:src/display.c ****     }
 11940              		.loc 1 190 7 is_stmt 1 view .LVU3858
 11941              	.LBB656:
 11942              	.LBI650:
3322:src/display.c ****       {
 11943              		.loc 1 3322 12 view .LVU3859
 11944              	.LBB653:
3324:src/display.c **** 	display();
 11945              		.loc 1 3324 2 view .LVU3860
3324:src/display.c **** 	display();
 11946              		.loc 1 3324 21 is_stmt 0 view .LVU3861
 11947 0032 6FF30413 		bfc	r3, #4, #1
 11948 0036 E375     		strb	r3, [r4, #23]
3325:src/display.c **** 	State2.disp_freeze = 1;
 11949              		.loc 1 3325 2 is_stmt 1 view .LVU3862
 11950 0038 FFF7FEFF 		bl	display
 11951              	.LVL1375:
3326:src/display.c ****       }
 11952              		.loc 1 3326 2 view .LVU3863
 11953              	.LBE653:
 11954              	.LBE656:
 201:src/display.c ****       if (*q == 'X')
 11955              		.loc 1 201 5 view .LVU3864
 11956              	.LBB657:
 11957              	.LBB654:
3326:src/display.c ****       }
 11958              		.loc 1 3326 21 is_stmt 0 view .LVU3865
 11959 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11960 003e 43F01003 		orr	r3, r3, #16
 11961 0042 E375     		strb	r3, [r4, #23]
 11962              	.LBE654:
 11963              	.LBE657:
ARM GAS  /tmp/ccPzxiH4.s 			page 338


 201:src/display.c ****       if (*q == 'X')
 11964              		.loc 1 201 9 view .LVU3866
 11965 0044 264B     		ldr	r3, .L1228+16
 201:src/display.c ****       if (*q == 'X')
 11966              		.loc 1 201 8 view .LVU3867
 11967 0046 1B68     		ldr	r3, [r3]
 11968 0048 002B     		cmp	r3, #0
 11969 004a 38D0     		beq	.L1202
 11970              	.LVL1376:
 11971              	.L1227:
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 11972              		.loc 1 202 7 is_stmt 1 view .LVU3868
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 11973              		.loc 1 202 10 is_stmt 0 view .LVU3869
 11974 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 11975 004e 582B     		cmp	r3, #88
 11976 0050 36D0     		beq	.L1225
 205:src/display.c **** 	print_line(p, 0);
 11977              		.loc 1 205 2 is_stmt 1 view .LVU3870
 11978 0052 0020     		movs	r0, #0
 11979 0054 FFF7FEFF 		bl	print_tab
 11980              	.LVL1377:
 206:src/display.c **** 	print(' ');
 11981              		.loc 1 206 2 view .LVU3871
 11982 0058 3046     		mov	r0, r6
 11983 005a 0021     		movs	r1, #0
 11984 005c FFF7FEFF 		bl	print_line
 11985              	.LVL1378:
 207:src/display.c **** 	while (*q != '\0') {
 11986              		.loc 1 207 2 view .LVU3872
 11987 0060 2020     		movs	r0, #32
 11988 0062 FFF7FEFF 		bl	print
 11989              	.LVL1379:
 208:src/display.c **** 	  int c = *q;
 11990              		.loc 1 208 2 view .LVU3873
 208:src/display.c **** 	  int c = *q;
 11991              		.loc 1 208 8 view .LVU3874
 208:src/display.c **** 	  int c = *q;
 11992              		.loc 1 208 9 is_stmt 0 view .LVU3875
 11993 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 208:src/display.c **** 	  int c = *q;
 11994              		.loc 1 208 8 view .LVU3876
 11995 0068 73B9     		cbnz	r3, .L1209
 11996              	.L1212:
 217:src/display.c ****       }
 11997              		.loc 1 217 2 is_stmt 1 view .LVU3877
 11998              	.LBE661:
 222:src/display.c **** 
 11999              		.loc 1 222 1 is_stmt 0 view .LVU3878
 12000 006a BDE87040 		pop	{r4, r5, r6, lr}
 12001              		.cfi_remember_state
 12002              		.cfi_restore 14
 12003              		.cfi_restore 6
 12004              		.cfi_restore 5
 12005              		.cfi_restore 4
 12006              		.cfi_def_cfa_offset 0
 12007              	.LVL1380:
ARM GAS  /tmp/ccPzxiH4.s 			page 339


 12008              	.LBB662:
 217:src/display.c ****       }
 12009              		.loc 1 217 2 view .LVU3879
 12010 006e 0020     		movs	r0, #0
 12011 0070 FFF7FEBF 		b	print_advance
 12012              	.LVL1381:
 12013              	.L1226:
 12014              		.cfi_restore_state
 12015              	.LBB658:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12016              		.loc 1 212 4 view .LVU3880
 12017 0074 FFF7FEFF 		bl	print
 12018              	.LVL1382:
 213:src/display.c **** 	    ++q;
 12019              		.loc 1 213 4 is_stmt 1 view .LVU3881
 214:src/display.c **** 	  ++q;
 12020              		.loc 1 214 6 view .LVU3882
 213:src/display.c **** 	    ++q;
 12021              		.loc 1 213 7 is_stmt 0 view .LVU3883
 12022 0078 6D2C     		cmp	r4, #109
 214:src/display.c **** 	  ++q;
 12023              		.loc 1 214 6 view .LVU3884
 12024 007a 0CBF     		ite	eq
 12025 007c 691C     		addeq	r1, r5, #1
 12026              	.LVL1383:
 214:src/display.c **** 	  ++q;
 12027              		.loc 1 214 6 view .LVU3885
 12028 007e 2946     		movne	r1, r5
 12029              	.LVL1384:
 12030              	.L1211:
 215:src/display.c **** 	}
 12031              		.loc 1 215 4 is_stmt 1 view .LVU3886
 12032              	.LBE658:
 208:src/display.c **** 	  int c = *q;
 12033              		.loc 1 208 9 is_stmt 0 view .LVU3887
 12034 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12035              	.LBB659:
 215:src/display.c **** 	}
 12036              		.loc 1 215 4 view .LVU3888
 12037 0082 4D1C     		adds	r5, r1, #1
 12038              	.LVL1385:
 215:src/display.c **** 	}
 12039              		.loc 1 215 4 view .LVU3889
 12040              	.LBE659:
 208:src/display.c **** 	  int c = *q;
 12041              		.loc 1 208 8 is_stmt 1 view .LVU3890
 12042 0084 002B     		cmp	r3, #0
 12043 0086 F0D0     		beq	.L1212
 12044              	.LVL1386:
 12045              	.L1209:
 12046              	.LBB660:
 209:src/display.c **** 	  if (c >= 'A')
 12047              		.loc 1 209 4 view .LVU3891
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12048              		.loc 1 210 4 view .LVU3892
 211:src/display.c **** 	  print(c);
 12049              		.loc 1 211 6 view .LVU3893
ARM GAS  /tmp/ccPzxiH4.s 			page 340


 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12050              		.loc 1 212 4 view .LVU3894
 12051 0088 43F06004 		orr	r4, r3, #96
 12052              	.LVL1387:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12053              		.loc 1 212 4 view .LVU3895
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12054              		.loc 1 210 7 is_stmt 0 view .LVU3896
 12055 008c 402B     		cmp	r3, #64
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12056              		.loc 1 212 4 view .LVU3897
 12057 008e 2046     		mov	r0, r4
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12058              		.loc 1 210 7 view .LVU3898
 12059 0090 F0DC     		bgt	.L1226
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12060              		.loc 1 212 4 view .LVU3899
 12061 0092 1846     		mov	r0, r3
 12062 0094 FFF7FEFF 		bl	print
 12063              	.LVL1388:
 213:src/display.c **** 	    ++q;
 12064              		.loc 1 213 4 is_stmt 1 view .LVU3900
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12065              		.loc 1 212 4 is_stmt 0 view .LVU3901
 12066 0098 2946     		mov	r1, r5
 12067 009a F1E7     		b	.L1211
 12068              	.LVL1389:
 12069              	.L1213:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12070              		.loc 1 212 4 view .LVU3902
 12071              	.LBE660:
 187:src/display.c ****     if (*q == 'X') {
 12072              		.loc 1 187 9 view .LVU3903
 12073 009c 114D     		ldr	r5, .L1228+20
 12074              	.L1205:
 12075              	.LVL1390:
 197:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12076              		.loc 1 197 7 is_stmt 1 view .LVU3904
 12077 009e 2946     		mov	r1, r5
 12078 00a0 3046     		mov	r0, r6
 12079 00a2 FFF7FEFF 		bl	message
 12080              	.LVL1391:
 198:src/display.c ****     }
 12081              		.loc 1 198 7 view .LVU3905
 198:src/display.c ****     }
 12082              		.loc 1 198 26 is_stmt 0 view .LVU3906
 12083 00a6 0C4B     		ldr	r3, .L1228+8
 198:src/display.c ****     }
 12084              		.loc 1 198 31 view .LVU3907
 12085 00a8 003C     		subs	r4, r4, #0
 198:src/display.c ****     }
 12086              		.loc 1 198 26 view .LVU3908
 12087 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 198:src/display.c ****     }
 12088              		.loc 1 198 31 view .LVU3909
 12089 00ac 18BF     		it	ne
 12090 00ae 0124     		movne	r4, #1
ARM GAS  /tmp/ccPzxiH4.s 			page 341


 12091              	.LVL1392:
 198:src/display.c ****     }
 12092              		.loc 1 198 26 view .LVU3910
 12093 00b0 64F30412 		bfi	r2, r4, #4, #1
 12094 00b4 DA75     		strb	r2, [r3, #23]
 201:src/display.c ****       if (*q == 'X')
 12095              		.loc 1 201 5 is_stmt 1 view .LVU3911
 201:src/display.c ****       if (*q == 'X')
 12096              		.loc 1 201 9 is_stmt 0 view .LVU3912
 12097 00b6 0A4B     		ldr	r3, .L1228+16
 201:src/display.c ****       if (*q == 'X')
 12098              		.loc 1 201 8 view .LVU3913
 12099 00b8 1B68     		ldr	r3, [r3]
 12100 00ba 002B     		cmp	r3, #0
 12101 00bc C6D1     		bne	.L1227
 12102              	.LVL1393:
 12103              	.L1202:
 201:src/display.c ****       if (*q == 'X')
 12104              		.loc 1 201 8 view .LVU3914
 12105              	.LBE662:
 222:src/display.c **** 
 12106              		.loc 1 222 1 view .LVU3915
 12107 00be 70BD     		pop	{r4, r5, r6, pc}
 12108              	.LVL1394:
 12109              	.L1225:
 12110              	.LBB663:
 203:src/display.c ****       else {
 12111              		.loc 1 203 2 is_stmt 1 view .LVU3916
 12112 00c0 3146     		mov	r1, r6
 12113 00c2 0022     		movs	r2, #0
 12114              	.LBE663:
 222:src/display.c **** 
 12115              		.loc 1 222 1 is_stmt 0 view .LVU3917
 12116 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12117              		.cfi_restore 14
 12118              		.cfi_restore 6
 12119              		.cfi_restore 5
 12120              		.cfi_restore 4
 12121              		.cfi_def_cfa_offset 0
 12122              	.LVL1395:
 12123              	.LBB664:
 203:src/display.c ****       else {
 12124              		.loc 1 203 2 view .LVU3918
 12125 00c8 6420     		movs	r0, #100
 12126 00ca FFF7FEBF 		b	print_reg
 12127              	.LVL1396:
 12128              	.L1229:
 203:src/display.c ****       else {
 12129              		.loc 1 203 2 view .LVU3919
 12130 00ce 00BF     		.align	2
 12131              	.L1228:
 12132 00d0 00000000 		.word	Running
 12133 00d4 00000000 		.word	.LANCHOR21
 12134 00d8 00000000 		.word	StateWhileOn
 12135 00dc 00000000 		.word	DispMsg
 12136 00e0 00000000 		.word	Tracing
 12137 00e4 00000000 		.word	.LANCHOR20
ARM GAS  /tmp/ccPzxiH4.s 			page 342


 12138              	.LBE664:
 12139              		.cfi_endproc
 12140              	.LFE1:
 12142              		.section	.text.stopwatch_message,"ax",%progbits
 12143              		.align	1
 12144              		.p2align 2,,3
 12145              		.global	stopwatch_message
 12146              		.syntax unified
 12147              		.thumb
 12148              		.thumb_func
 12149              		.fpu fpv4-sp-d16
 12151              	stopwatch_message:
 12152              	.LVL1397:
 12153              	.LFB46:
3557:src/display.c **** 	reset_disp();
 12154              		.loc 1 3557 7 is_stmt 1 view -0
 12155              		.cfi_startproc
 12156              		@ args = 0, pretend = 0, frame = 0
 12157              		@ frame_needed = 0, uses_anonymous_args = 0
3558:src/display.c **** 	set_dot(DEG);
 12158              		.loc 1 3558 2 view .LVU3921
3557:src/display.c **** 	reset_disp();
 12159              		.loc 1 3557 7 is_stmt 0 view .LVU3922
 12160 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12161              		.cfi_def_cfa_offset 24
 12162              		.cfi_offset 3, -24
 12163              		.cfi_offset 4, -20
 12164              		.cfi_offset 5, -16
 12165              		.cfi_offset 6, -12
 12166              		.cfi_offset 7, -8
 12167              		.cfi_offset 14, -4
3557:src/display.c **** 	reset_disp();
 12168              		.loc 1 3557 7 view .LVU3923
 12169 0002 1446     		mov	r4, r2
 12170 0004 0F46     		mov	r7, r1
 12171 0006 1D46     		mov	r5, r3
 12172 0008 0646     		mov	r6, r0
3558:src/display.c **** 	set_dot(DEG);
 12173              		.loc 1 3558 2 view .LVU3924
 12174 000a FFF7FEFF 		bl	reset_disp
 12175              	.LVL1398:
3559:src/display.c **** 	set_digits_string( str2, 0 );
 12176              		.loc 1 3559 2 is_stmt 1 view .LVU3925
 12177 000e 8C20     		movs	r0, #140
 12178 0010 FFF7FEFF 		bl	set_dot
 12179              	.LVL1399:
3560:src/display.c **** 	State2.disp_small = force_small;
 12180              		.loc 1 3560 2 view .LVU3926
 12181 0014 3846     		mov	r0, r7
 12182 0016 0021     		movs	r1, #0
 12183 0018 FFF7FEFF 		bl	set_digits_string
 12184              	.LVL1400:
3561:src/display.c **** 	if( exponent!=NULL ) {
 12185              		.loc 1 3561 2 view .LVU3927
3561:src/display.c **** 	if( exponent!=NULL ) {
 12186              		.loc 1 3561 20 is_stmt 0 view .LVU3928
 12187 001c 0B4B     		ldr	r3, .L1241
ARM GAS  /tmp/ccPzxiH4.s 			page 343


 12188 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12189 0020 64F3C712 		bfi	r2, r4, #7, #1
 12190              	.LVL1401:
3561:src/display.c **** 	if( exponent!=NULL ) {
 12191              		.loc 1 3561 20 view .LVU3929
 12192 0024 9A75     		strb	r2, [r3, #22]
3562:src/display.c **** 	  stopwatch_exponent(exponent);
 12193              		.loc 1 3562 2 is_stmt 1 view .LVU3930
3562:src/display.c **** 	  stopwatch_exponent(exponent);
 12194              		.loc 1 3562 4 is_stmt 0 view .LVU3931
 12195 0026 55B1     		cbz	r5, .L1231
 12196              	.LVL1402:
 12197              	.LBB665:
 12198              	.LBB666:
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12199              		.loc 1 3550 9 is_stmt 1 view .LVU3932
 12200 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12201              		.loc 1 3550 2 is_stmt 0 view .LVU3933
 12202 002a 41B1     		cbz	r1, .L1231
3549:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12203              		.loc 1 3549 6 view .LVU3934
 12204 002c 6C24     		movs	r4, #108
 12205              	.LVL1403:
 12206              	.L1232:
3551:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12207              		.loc 1 3551 4 is_stmt 1 view .LVU3935
 12208              	.LBB667:
 12209              	.LBI667:
 339:src/display.c ****   if (res) *res++ = ch;
 12210              		.loc 1 339 14 view .LVU3936
 12211              	.LBB668:
 340:src/display.c ****   else	set_dig(base, ch);
 12212              		.loc 1 340 3 view .LVU3937
 341:src/display.c ****   return res;
 12213              		.loc 1 341 8 view .LVU3938
 12214 002e 2046     		mov	r0, r4
 12215 0030 FFF7FEFF 		bl	set_dig
 12216              	.LVL1404:
 342:src/display.c **** }
 12217              		.loc 1 342 3 view .LVU3939
 342:src/display.c **** }
 12218              		.loc 1 342 3 is_stmt 0 view .LVU3940
 12219              	.LBE668:
 12220              	.LBE667:
3552:src/display.c **** 	}
 12221              		.loc 1 3552 4 is_stmt 1 view .LVU3941
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12222              		.loc 1 3550 9 is_stmt 0 view .LVU3942
 12223 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12224              	.LVL1405:
3552:src/display.c **** 	}
 12225              		.loc 1 3552 6 view .LVU3943
 12226 0038 0734     		adds	r4, r4, #7
 12227              	.LVL1406:
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12228              		.loc 1 3550 23 is_stmt 1 view .LVU3944
ARM GAS  /tmp/ccPzxiH4.s 			page 344


3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12229              		.loc 1 3550 9 view .LVU3945
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12230              		.loc 1 3550 2 is_stmt 0 view .LVU3946
 12231 003a 0029     		cmp	r1, #0
 12232 003c F7D1     		bne	.L1232
 12233              	.LVL1407:
 12234              	.L1231:
3550:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12235              		.loc 1 3550 2 view .LVU3947
 12236              	.LBE666:
 12237              	.LBE665:
3565:src/display.c **** 	finish_display();
 12238              		.loc 1 3565 2 is_stmt 1 view .LVU3948
 12239 003e 3046     		mov	r0, r6
 12240 0040 FFF7FEFF 		bl	set_status
 12241              	.LVL1408:
3566:src/display.c ****       }
 12242              		.loc 1 3566 2 view .LVU3949
3567:src/display.c **** 
 12243              		.loc 1 3567 7 is_stmt 0 view .LVU3950
 12244 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12245              		.cfi_restore 14
 12246              		.cfi_restore 7
 12247              		.cfi_restore 6
 12248              		.cfi_restore 5
 12249              		.cfi_restore 4
 12250              		.cfi_restore 3
 12251              		.cfi_def_cfa_offset 0
 12252              	.LVL1409:
3566:src/display.c ****       }
 12253              		.loc 1 3566 2 view .LVU3951
 12254 0048 FFF7FEBF 		b	finish_display
 12255              	.LVL1410:
 12256              	.L1242:
 12257              		.align	2
 12258              	.L1241:
 12259 004c 00000000 		.word	StateWhileOn
 12260              		.cfi_endproc
 12261              	.LFE46:
 12263              		.section	.rodata.str1.4,"aMS",%progbits,1
 12264              		.align	2
 12265              	.LC45:
 12266 0000 06316306 		.ascii	"\0061c\006\006\000"
 12266      0600
 12267 0006 0000     		.align	2
 12268              	.LC46:
 12269 0008 756E0600 		.ascii	"un\006\000"
 12270              		.align	2
 12271              	.LC47:
 12272 000c 736D00   		.ascii	"sm\000"
 12273              		.set	CSWTCH.353,CSWTCH.351
 12274              		.global	DIGITS
 12275              		.comm	IntMaxWindow,4,4
 12276              		.comm	JustDisplayed,4,4
 12277              		.comm	ShowRPN,4,4
 12278              		.global	no_status_top
ARM GAS  /tmp/ccPzxiH4.s 			page 345


 12279              		.comm	DispPlot,2,2
 12280              		.comm	DispMsg,4,4
 12281              		.global	SvnRevision
 12282              		.section	.rodata
 12283              		.align	2
 12284              		.set	.LANCHOR14,. + 0
 12285              	.LC22:
 12286 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12286      22002E00 
 12286      00
 12287 0009 000000   		.space	3
 12288              	.LC26:
 12289 000c 33345306 		.ascii	"34S\0063.3\222TC\000"
 12289      332E3392 
 12289      544300
 12290 0017 00000000 		.space	4
 12291 001b 00       		.space	1
 12292              	.LC48:
 12293 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12293      696E6700 
 12293      50726F47 
 12293      72614D6D 
 12293      00
 12294 002d 000000   		.space	3
 12295              	.LC49:
 12296 0030 446F6D61 		.ascii	"Domain\000\000"
 12296      696E0000 
 12297              	.LC50:
 12298 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12298      74696D65 
 12298      006F7220 
 12298      64417445 
 12298      00
 12299 0049 000000   		.space	3
 12300              	.LC51:
 12301 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12301      66696E65 
 12301      64004F70 
 12301      2D434F64 
 12301      4500
 12302 005e 0000     		.space	2
 12303              	.LC52:
 12304 0060 2B9F0000 		.ascii	"+\237\000\000"
 12305              	.LC53:
 12306 0064 2D9F0000 		.ascii	"-\237\000\000"
 12307              	.LC54:
 12308 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12308      75636800 
 12308      4C416245 
 12308      4C00
 12309 0076 0000     		.space	2
 12310              	.LC55:
 12311 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12311      67616C00 
 12311      4F504572 
 12311      4174696F 
 12311      6E00
ARM GAS  /tmp/ccPzxiH4.s 			page 346


 12312 008a 0000     		.space	2
 12313              	.LC56:
 12314 008c 4F757420 		.ascii	"Out of range\000\000"
 12314      6F662072 
 12314      616E6765 
 12314      0000
 12315 009a 0000     		.space	2
 12316              	.LC57:
 12317 009c 42616420 		.ascii	"Bad digit\000\000"
 12317      64696769 
 12317      740000
 12318 00a7 00       		.space	1
 12319              	.LC58:
 12320 00a8 546F6F20 		.ascii	"Too long\000\000"
 12320      6C6F6E67 
 12320      0000
 12321 00b2 0000     		.space	2
 12322              	.LC59:
 12323 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12323      69730046 
 12323      754C4C00 
 12324              	.LC60:
 12325 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12325      6B00434C 
 12325      41534800 
 12326              	.LC61:
 12327 00cc 42616420 		.ascii	"Bad mode\000\000"
 12327      6D6F6465 
 12327      0000
 12328 00d6 0000     		.space	2
 12329              	.LC62:
 12330 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12330      06060673 
 12330      697A6500 
 12330      746F6F20 
 12330      534D6D41 
 12331 00ef 00       		.space	1
 12332              	.LC63:
 12333 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12333      66657700 
 12333      64417441 
 12333      20506F69 
 12333      6E745300 
 12334              	.LC64:
 12335 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12335      6C696400 
 12335      50617261 
 12335      4D6D4574 
 12335      457200
 12336 0117 00       		.space	1
 12337              	.LC65:
 12338 0118 492F4F00 		.ascii	"I/O\000\000"
 12338      00
 12339 011d 000000   		.space	3
 12340              	.LC66:
 12341 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12341      6C696400 
ARM GAS  /tmp/ccPzxiH4.s 			page 347


 12341      64417441 
 12341      00
 12342 012d 000000   		.space	3
 12343              	.LC67:
 12344 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12344      65005072 
 12344      6F744563 
 12344      74456400 
 12345              	.LC68:
 12346 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12346      6F6F7400 
 12346      466F756E 
 12346      6400
 12347 014e 0000     		.space	2
 12348              	.LC69:
 12349 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12349      6978004D 
 12349      6D49534D 
 12349      6D417443 
 12349      4800
 12350 0162 0000     		.space	2
 12351              	.LC70:
 12352 0164 53696E67 		.ascii	"Singular\000\000"
 12352      756C6172 
 12352      0000
 12353 016e 0000     		.space	2
 12354              	.LC71:
 12355 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12355      68206973 
 12355      0046754C 
 12355      4C00
 12356 017e 0000     		.space	2
 12357              	.LC72:
 12358 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12358      72797374 
 12358      616C0049 
 12358      6E537461 
 12358      4C4C4564 
 12359 0195 000000   		.space	3
 12360              	.LC73:
 12361 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12361      6576656E 
 12361      20726567 
 12361      00666F72 
 12361      20436F4D 
 12362 01b2 0000     		.space	2
 12363              	.LC74:
 12364 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12364      5800
 12365              		.section	.bss.DecimalMode,"aw",%nobits
 12366              		.set	.LANCHOR1,. + 0
 12369              	DecimalMode:
 12370 0000 00       		.space	1
 12371              		.section	.bss.SeparatorMode,"aw",%nobits
 12372              		.set	.LANCHOR0,. + 0
 12375              	SeparatorMode:
 12376 0000 00       		.space	1
ARM GAS  /tmp/ccPzxiH4.s 			page 348


 12377              		.section	.bss.no_status_top,"aw",%nobits
 12378              		.align	1
 12379              		.set	.LANCHOR15,. + 0
 12382              	no_status_top:
 12383 0000 0000     		.space	2
 12384              		.section	.rodata.CSWTCH.351,"a"
 12385              		.align	2
 12386              		.set	.LANCHOR8,. + 0
 12389              	CSWTCH.351:
 12390 0000 02000000 		.word	2
 12391 0004 08000000 		.word	8
 12392 0008 0A000000 		.word	10
 12393 000c 10000000 		.word	16
 12394              		.section	.rodata.CSWTCH.376,"a"
 12395              		.align	2
 12396              		.set	.LANCHOR13,. + 0
 12399              	CSWTCH.376:
 12400 0000 00000000 		.word	.LC45
 12401 0004 08000000 		.word	.LC46
 12402 0008 0C000000 		.word	.LC47
 12403              		.section	.rodata.DIGITS,"a"
 12404              		.align	2
 12405              		.set	.LANCHOR9,. + 0
 12408              	DIGITS:
 12409 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12409      34353637 
 12409      38394142 
 12409      43444546 
 12409      00
 12410              		.section	.rodata.S7_ERROR,"a"
 12411              		.align	2
 12412              		.set	.LANCHOR20,. + 0
 12415              	S7_ERROR:
 12416 0000 4572726F 		.ascii	"Error\000"
 12416      7200
 12417              		.section	.rodata.S7_INF,"a"
 12418              		.align	2
 12419              		.set	.LANCHOR4,. + 0
 12422              	S7_INF:
 12423 0000 496E6669 		.ascii	"Infinity\000"
 12423      6E697479 
 12423      00
 12424              		.section	.rodata.S7_NaN,"a"
 12425              		.align	2
 12426              		.set	.LANCHOR3,. + 0
 12429              	S7_NaN:
 12430 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12430      6E754D6D 
 12430      45726963 
 12430      00
 12431              		.section	.rodata.S7_STEP,"a"
 12432              		.align	2
 12433              		.set	.LANCHOR16,. + 0
 12436              	S7_STEP:
 12437 0000 53744550 		.ascii	"StEP \000"
 12437      2000
 12438              		.section	.rodata.S7_fract_EQ,"a"
ARM GAS  /tmp/ccPzxiH4.s 			page 349


 12439              		.align	2
 12440              		.set	.LANCHOR6,. + 0
 12443              	S7_fract_EQ:
 12444 0000 203D2000 		.ascii	" = \000"
 12445              		.section	.rodata.S7_fract_GT,"a"
 12446              		.align	2
 12447              		.set	.LANCHOR7,. + 0
 12450              	S7_fract_GT:
 12451 0000 20477400 		.ascii	" Gt\000"
 12452              		.section	.rodata.S7_fract_LT,"a"
 12453              		.align	2
 12454              		.set	.LANCHOR5,. + 0
 12457              	S7_fract_LT:
 12458 0000 204C7400 		.ascii	" Lt\000"
 12459              		.section	.rodata.S_SURE,"a"
 12460              		.align	2
 12461              		.set	.LANCHOR18,. + 0
 12464              	S_SURE:
 12465 0000 53757265 		.ascii	"Sure?\000"
 12465      3F00
 12466              		.section	.rodata.SvnRevision,"a"
 12467              		.align	2
 12468              		.set	.LANCHOR17,. + 0
 12471              	SvnRevision:
 12472 0000 39322020 		.ascii	"92  "
 12473              		.section	.rodata.digtbl,"a"
 12474              		.align	2
 12475              		.set	.LANCHOR2,. + 0
 12478              	digtbl:
 12479 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12479      02421252 
 12479      2D000000 
 12479      00000000 
 12479      00
 12480 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12480      00000017 
 12480      01000000 
 12480      00
 12481 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12481      28000000 
 12481      0020664B 
 12481      00000010 
 12482 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12482      5E5B3973 
 12482      77497F7B 
 12482      00000612 
 12482      0300787D 
 12483 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12483      673D240F 
 12483      75266C6D 
 12483      6F7C7914 
 12483      73362F00 
 12484 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12484      161F7674 
 12484      6735040F 
 12484      75266915 
 12484      177C7914 
ARM GAS  /tmp/ccPzxiH4.s 			page 350


 12485 0076 000F003B 		.ascii	"\000\017\000;"
 12486              		.section	.rodata.error_table.9304,"a"
 12487              		.align	2
 12488              		.set	.LANCHOR21,. + 0
 12491              	error_table.9304:
 12492 0000 1C000000 		.word	.LC48
 12493 0004 30000000 		.word	.LC49
 12494 0008 38000000 		.word	.LC50
 12495 000c 4C000000 		.word	.LC51
 12496 0010 60000000 		.word	.LC52
 12497 0014 64000000 		.word	.LC53
 12498 0018 68000000 		.word	.LC54
 12499 001c 78000000 		.word	.LC55
 12500 0020 8C000000 		.word	.LC56
 12501 0024 9C000000 		.word	.LC57
 12502 0028 A8000000 		.word	.LC58
 12503 002c B4000000 		.word	.LC59
 12504 0030 C0000000 		.word	.LC60
 12505 0034 CC000000 		.word	.LC61
 12506 0038 D8000000 		.word	.LC62
 12507 003c F0000000 		.word	.LC63
 12508 0040 04010000 		.word	.LC64
 12509 0044 18010000 		.word	.LC65
 12510 0048 20010000 		.word	.LC66
 12511 004c 30010000 		.word	.LC67
 12512 0050 40010000 		.word	.LC68
 12513 0054 50010000 		.word	.LC69
 12514 0058 64010000 		.word	.LC70
 12515 005c 70010000 		.word	.LC71
 12516 0060 80010000 		.word	.LC72
 12517 0064 98010000 		.word	.LC73
 12518 0068 B4010000 		.word	.LC74
 12519              		.section	.rodata.libname,"a"
 12520              		.align	2
 12521              		.set	.LANCHOR19,. + 0
 12524              	libname:
 12525 0000 72414D6D 		.ascii	"rAMm\000"
 12525      00
 12526 0005 4C696220 		.ascii	"Lib \000"
 12526      00
 12527 000a 42757020 		.ascii	"Bup \000"
 12527      00
 12528 000f 726F4D6D 		.ascii	"roMm\000"
 12528      00
 12529              		.section	.rodata.shift_chars.9409,"a"
 12530              		.align	2
 12531              		.set	.LANCHOR12,. + 0
 12534              	shift_chars.9409:
 12535 0000 20111213 		.ascii	" \021\022\023"
 12536              		.section	.rodata.small_dots.9607,"a"
 12537              		.align	2
 12538              		.set	.LANCHOR11,. + 0
 12541              	small_dots.9607:
 12542 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12542      07E12C06 
 12542      07E12C06 
 12542      06
ARM GAS  /tmp/ccPzxiH4.s 			page 351


 12543              		.section	.rodata.small_minus.9606,"a"
 12544              		.align	2
 12545              		.set	.LANCHOR10,. + 0
 12548              	small_minus.9606:
 12549 0000 07C22D06 		.ascii	"\007\302-\006"
 12550              		.text
 12551              	.Letext0:
 12552              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 12553              		.file 3 "dmcp/dmcp.h"
 12554              		.file 4 "src/decNumber/decContext.h"
 12555              		.file 5 "src/decNumber/decNumber.h"
 12556              		.file 6 "src/decNumber/decimal64.h"
 12557              		.file 7 "src/decNumber/decimal128.h"
 12558              		.file 8 "src/xeq.h"
 12559              		.file 9 "src/data.h"
 12560              		.file 10 "src/storage.h"
 12561              		.file 11 "src/display.h"
 12562              		.file 12 "src/consts.h"
 12563              		.file 13 "src/stats.h"
 12564              		.file 14 "src/revision.h"
 12565              		.file 15 "src/printer.h"
 12566              		.file 16 "src/charset7.h"
 12567              		.file 17 "src/lcd.h"
 12568              		.file 18 "src/decn.h"
 12569              		.file 19 "src/alpha.h"
 12570              		.file 20 "src/int.h"
ARM GAS  /tmp/ccPzxiH4.s 			page 352


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccPzxiH4.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccPzxiH4.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccPzxiH4.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccPzxiH4.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccPzxiH4.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccPzxiH4.s:220    .text.set_dig:000000000000002c $d
     /tmp/ccPzxiH4.s:225    .text.hms_render:0000000000000000 $t
     /tmp/ccPzxiH4.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/ccPzxiH4.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/ccPzxiH4.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccPzxiH4.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccPzxiH4.s:559    .text.hms_step:0000000000000000 $t
     /tmp/ccPzxiH4.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/ccPzxiH4.s:627    .text.hms_step:0000000000000034 $d
     /tmp/ccPzxiH4.s:632    .text.set_exp:0000000000000000 $t
     /tmp/ccPzxiH4.s:639    .text.set_exp:0000000000000000 set_exp
     /tmp/ccPzxiH4.s:925    .text.set_exp:00000000000000f8 $d
     /tmp/ccPzxiH4.s:931    .text.set_annunciators:0000000000000000 $t
     /tmp/ccPzxiH4.s:938    .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccPzxiH4.s:1239   .text.set_annunciators:00000000000000c0 $d
     /tmp/ccPzxiH4.s:1249   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccPzxiH4.s:1256   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccPzxiH4.s:1303   .text.set_decimal.part.0:0000000000000000 $t
     /tmp/ccPzxiH4.s:1310   .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/ccPzxiH4.s:1357   .text.set_digits_string:0000000000000000 $t
     /tmp/ccPzxiH4.s:1364   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccPzxiH4.s:1476   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccPzxiH4.s:1480   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccPzxiH4.s:1487   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccPzxiH4.s:1610   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/ccPzxiH4.s:1617   .text.set_x_hms:0000000000000000 $t
     /tmp/ccPzxiH4.s:1624   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccPzxiH4.s:2145   .text.set_x_hms:00000000000001c4 $d
     /tmp/ccPzxiH4.s:2154   .text.set_x_fract:0000000000000000 $t
     /tmp/ccPzxiH4.s:2161   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccPzxiH4.s:2590   .text.set_x_fract:0000000000000194 $d
     /tmp/ccPzxiH4.s:2604   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccPzxiH4.s:2605   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccPzxiH4.s:2608   .text.carry_overflow:0000000000000000 $t
     /tmp/ccPzxiH4.s:2615   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccPzxiH4.s:2745   .text.carry_overflow:000000000000006c $d
     /tmp/ccPzxiH4.s:2754   .text.set_int_x:0000000000000000 $t
     /tmp/ccPzxiH4.s:2761   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccPzxiH4.s:3479   .text.set_int_x:00000000000002f8 $d
               .rodata.CSWTCH.351:0000000000000000 CSWTCH.353
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccPzxiH4.s:3490   .text.set_int_x:0000000000000310 $t
     /tmp/ccPzxiH4.s:3648   .text.set_int_x:00000000000003c4 $d
     /tmp/ccPzxiH4.s:3655   .text.s_s_sized.constprop.0:0000000000000000 $t
     /tmp/ccPzxiH4.s:3662   .text.s_s_sized.constprop.0:0000000000000000 s_s_sized.constprop.0
     /tmp/ccPzxiH4.s:4043   .text.s_s_sized.constprop.0:0000000000000158 $d
     /tmp/ccPzxiH4.s:4048   .text.getdig:0000000000000000 $t
     /tmp/ccPzxiH4.s:4056   .text.getdig:0000000000000000 getdig
     /tmp/ccPzxiH4.s:4076   .text.getdig:0000000000000008 $d
     /tmp/ccPzxiH4.s:4081   .text.dot:0000000000000000 $t
ARM GAS  /tmp/ccPzxiH4.s 			page 353


     /tmp/ccPzxiH4.s:4089   .text.dot:0000000000000000 dot
     /tmp/ccPzxiH4.s:4112   .text.std_round_fix:0000000000000000 $t
     /tmp/ccPzxiH4.s:4120   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccPzxiH4.s:4277   .text.std_round_fix:0000000000000078 $d
     /tmp/ccPzxiH4.s:4282   .text.pixel_length:0000000000000000 $t
     /tmp/ccPzxiH4.s:4290   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccPzxiH4.s:4381   .text.set_status:0000000000000000 $t
     /tmp/ccPzxiH4.s:4388   .text.set_status:0000000000000000 set_status
     /tmp/ccPzxiH4.s:4490   .text.set_status:0000000000000034 $d
     /tmp/ccPzxiH4.s:4497   .text.set_x_dn:0000000000000000 $t
     /tmp/ccPzxiH4.s:4505   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccPzxiH4.s:5297   .text.set_x_dn:0000000000000364 $d
     /tmp/ccPzxiH4.s:5305   .text.set_x_dn:0000000000000378 $t
     /tmp/ccPzxiH4.s:5458   .text.set_x_dn:0000000000000424 $d
     /tmp/ccPzxiH4.s:5464   .text.set_x_dn:000000000000042e $t
     /tmp/ccPzxiH4.s:5490   .text.set_x_dn:000000000000045a $d
     /tmp/ccPzxiH4.s:5496   .text.set_x_dn:0000000000000464 $t
     /tmp/ccPzxiH4.s:6107   .text.set_x_dn:00000000000006ec $d
     /tmp/ccPzxiH4.s:6121   .text.set_x_dn:0000000000000700 $t
     /tmp/ccPzxiH4.s:6841   .text.set_x_dn:00000000000009c8 $d
     /tmp/ccPzxiH4.s:6851   .text.set_x:0000000000000000 $t
     /tmp/ccPzxiH4.s:6858   .text.set_x:0000000000000000 set_x
     /tmp/ccPzxiH4.s:6926   .text.format_reg:0000000000000000 $t
     /tmp/ccPzxiH4.s:6934   .text.format_reg:0000000000000000 format_reg
     /tmp/ccPzxiH4.s:7053   .text.format_reg:0000000000000064 $d
     /tmp/ccPzxiH4.s:7059   .text.set_status_right:0000000000000000 $t
     /tmp/ccPzxiH4.s:7066   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccPzxiH4.s:7215   .text.set_status_right:0000000000000060 $d
     /tmp/ccPzxiH4.s:7220   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccPzxiH4.s:7284   .text.annunciators:0000000000000000 $t
     /tmp/ccPzxiH4.s:7291   .text.annunciators:0000000000000000 annunciators
     /tmp/ccPzxiH4.s:8000   .text.annunciators:0000000000000328 $d
     /tmp/ccPzxiH4.s:8019   .text.annunciators:0000000000000364 $t
     /tmp/ccPzxiH4.s:8400   .text.annunciators:000000000000052c $d
     /tmp/ccPzxiH4.s:8422   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccPzxiH4.s:8483   .text.display:0000000000000000 $t
     /tmp/ccPzxiH4.s:8491   .text.display:0000000000000000 display
     /tmp/ccPzxiH4.s:9090   .text.display:00000000000002c8 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccPzxiH4.s:9109   .text.display:0000000000000304 $t
     /tmp/ccPzxiH4.s:9848   .text.display:0000000000000638 $d
     /tmp/ccPzxiH4.s:9865   .text.display:0000000000000670 $t
     /tmp/ccPzxiH4.s:10797  .text.display:00000000000009d4 $d
     /tmp/ccPzxiH4.s:10822  .text.display:0000000000000a00 $t
     /tmp/ccPzxiH4.s:11600  .text.display:0000000000000d4c $d
     /tmp/ccPzxiH4.s:11625  .text.display:0000000000000d94 $t
     /tmp/ccPzxiH4.s:11670  .text.frozen_display:0000000000000000 $t
     /tmp/ccPzxiH4.s:11678  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccPzxiH4.s:11708  .text.frozen_display:000000000000001c $d
     /tmp/ccPzxiH4.s:11713  .text.message:0000000000000000 $t
     /tmp/ccPzxiH4.s:11721  .text.message:0000000000000000 message
     /tmp/ccPzxiH4.s:11850  .text.message:0000000000000060 $d
     /tmp/ccPzxiH4.s:11858  .text.error_message:0000000000000000 $t
     /tmp/ccPzxiH4.s:11866  .text.error_message:0000000000000000 error_message
     /tmp/ccPzxiH4.s:12132  .text.error_message:00000000000000d0 $d
ARM GAS  /tmp/ccPzxiH4.s 			page 354


     /tmp/ccPzxiH4.s:12143  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccPzxiH4.s:12151  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccPzxiH4.s:12259  .text.stopwatch_message:000000000000004c $d
     /tmp/ccPzxiH4.s:12264  .rodata.str1.4:0000000000000000 $d
     /tmp/ccPzxiH4.s:12389  .rodata.CSWTCH.351:0000000000000000 CSWTCH.351
     /tmp/ccPzxiH4.s:12408  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccPzxiH4.s:12382  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccPzxiH4.s:12471  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccPzxiH4.s:12283  .rodata:0000000000000000 $d
     /tmp/ccPzxiH4.s:12369  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccPzxiH4.s:12370  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccPzxiH4.s:12375  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccPzxiH4.s:12376  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccPzxiH4.s:12378  .bss.no_status_top:0000000000000000 $d
     /tmp/ccPzxiH4.s:12385  .rodata.CSWTCH.351:0000000000000000 $d
     /tmp/ccPzxiH4.s:12395  .rodata.CSWTCH.376:0000000000000000 $d
     /tmp/ccPzxiH4.s:12399  .rodata.CSWTCH.376:0000000000000000 CSWTCH.376
     /tmp/ccPzxiH4.s:12404  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccPzxiH4.s:12411  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccPzxiH4.s:12415  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccPzxiH4.s:12418  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccPzxiH4.s:12422  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccPzxiH4.s:12425  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccPzxiH4.s:12429  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccPzxiH4.s:12432  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccPzxiH4.s:12436  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccPzxiH4.s:12439  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccPzxiH4.s:12443  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccPzxiH4.s:12446  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccPzxiH4.s:12450  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccPzxiH4.s:12453  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccPzxiH4.s:12457  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccPzxiH4.s:12460  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccPzxiH4.s:12464  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccPzxiH4.s:12467  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccPzxiH4.s:12474  .rodata.digtbl:0000000000000000 $d
     /tmp/ccPzxiH4.s:12478  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccPzxiH4.s:12487  .rodata.error_table.9304:0000000000000000 $d
     /tmp/ccPzxiH4.s:12491  .rodata.error_table.9304:0000000000000000 error_table.9304
     /tmp/ccPzxiH4.s:12520  .rodata.libname:0000000000000000 $d
     /tmp/ccPzxiH4.s:12524  .rodata.libname:0000000000000000 libname
     /tmp/ccPzxiH4.s:12530  .rodata.shift_chars.9409:0000000000000000 $d
     /tmp/ccPzxiH4.s:12534  .rodata.shift_chars.9409:0000000000000000 shift_chars.9409
     /tmp/ccPzxiH4.s:12537  .rodata.small_dots.9607:0000000000000000 $d
     /tmp/ccPzxiH4.s:12541  .rodata.small_dots.9607:0000000000000000 small_dots.9607
     /tmp/ccPzxiH4.s:12544  .rodata.small_minus.9606:0000000000000000 $d
     /tmp/ccPzxiH4.s:12548  .rodata.small_minus.9606:0000000000000000 small_minus.9606

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
ARM GAS  /tmp/ccPzxiH4.s 			page 355


const_100
xset
num_arg
num_arg_0
get_trig_mode
draw_dot
get_user_flag
StateWhileOn
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
charlengths
findlengths
unpackchar
RectPolConv
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
ARM GAS  /tmp/ccPzxiH4.s 			page 356


stack_size
get_cmdline
reset_disp
reset_7_segment
finish_7_segment
user_pc
scopy_spc
finish_display
WasDataEntry
argcmds
ProgFree
scopy_char
multicmds
current_catalogue
catcmd
find_label_from
op_r2p
get_const
getprog
prt
findmultilbl
alpha_rcl_s
free_mem
free_flash
copyreg
sigma_val
global_regs
getX
packed_from_number
do_conv
local_regs
StackBase
SizeStatRegs
monfuncs
slen
set_NaN
print_tab
print_line
print
print_advance
print_reg
Running
Tracing

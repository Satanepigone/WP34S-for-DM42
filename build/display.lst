ARM GAS  /tmp/ccadPcKu.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccadPcKu.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** 
  43:src/display.c **** static void set_status_right(const char *);
  44:src/display.c **** static void set_status_graphic(const unsigned char *);
  45:src/display.c **** 
  46:src/display.c **** static void set_int_x(const long long int value, char *res);
  47:src/display.c **** 
  48:src/display.c **** const char *DispMsg; // What to display in message area
  49:src/display.c **** 
  50:src/display.c **** short int DispPlot;
  51:src/display.c **** short int no_status_top = 0;
  52:src/display.c **** 
  53:src/display.c **** #ifndef REALBUILD
  54:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  55:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  56:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  57:src/display.c **** char forceDispPlot;
  58:src/display.c **** #endif
  59:src/display.c **** 
  60:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  61:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  62:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  63:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  64:src/display.c **** 
  65:src/display.c **** /* Message strings
  66:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  67:src/display.c ****  * are for the upper dot matrix line.
  68:src/display.c ****  */
  69:src/display.c **** static const char S_SURE[] = "Sure?";
  70:src/display.c **** 
  71:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  72:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  73:src/display.c **** #ifndef REALBUILD
  74:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  75:src/display.c **** #endif
  76:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  77:src/display.c **** #ifndef REALBUILD
  78:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  79:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  80:src/display.c **** #endif
  81:src/display.c **** 
  82:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  83:src/display.c **** #ifndef REALBUILD
  84:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
ARM GAS  /tmp/ccadPcKu.s 			page 3


  88:src/display.c **** static const char S7_fract_LT[] = " Lt";
  89:src/display.c **** static const char S7_fract_GT[] = " Gt";
  90:src/display.c **** 
  91:src/display.c **** static const char libname[][5] = {
  92:src/display.c ****   "rAMm", "Lib ", "Bup ",
  93:src/display.c **** #ifndef REALBUILD
  94:src/display.c ****   "roMm"
  95:src/display.c **** #endif
  96:src/display.c **** };
  97:src/display.c **** 
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c **** static const char libname_text[][10] = {
 100:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 101:src/display.c **** };
 102:src/display.c **** static const char libname_shorttext[][5] = {
 103:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 104:src/display.c **** };
 105:src/display.c **** #endif
 106:src/display.c **** 
 107:src/display.c **** 
 108:src/display.c **** /* Set the separator and decimal mode globals
 109:src/display.c ****  */
 110:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 110 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 111:src/display.c ****   // Separators used by various modes
 112:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 112 3 view .LVU1
  35              		.loc 1 112 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 113:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 113 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 112 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 112 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 110:src/display.c ****   // Separators used by various modes
  44              		.loc 1 110 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 112 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 113 5 is_stmt 1 view .LVU8
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 114 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 115:src/display.c ****   }
ARM GAS  /tmp/ccadPcKu.s 			page 4


 116:src/display.c ****   else {
 117:src/display.c ****     SeparatorMode = SEP_COMMA;
 118:src/display.c ****     DecimalMode = DECIMAL_DOT;
 119:src/display.c ****   }
 120:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 120 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 114 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 113:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 113 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 114 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 120 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 113:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 113 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 114 5 is_stmt 1 view .LVU16
  67              		.loc 1 120 3 view .LVU17
  68              		.loc 1 120 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 120 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 121:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 121 5 is_stmt 1 view .LVU20
  76              		.loc 1 121 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 122:src/display.c **** }
  80              		.loc 1 122 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 117 5 is_stmt 1 view .LVU23
 118:src/display.c ****   }
  90              		.loc 1 118 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 120:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 120 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 118:src/display.c ****   }
  94              		.loc 1 118 17 view .LVU26
ARM GAS  /tmp/ccadPcKu.s 			page 5


  95 0036 2070     		strb	r0, [r4]
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 117 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 120:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 120 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 117 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 118:src/display.c ****   }
 102              		.loc 1 118 5 is_stmt 1 view .LVU30
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 120 3 view .LVU31
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 120 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 120 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 122 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 123:src/display.c **** 
 124:src/display.c **** 
 125:src/display.c **** /* Table of error messages.
 126:src/display.c ****  * These consist of a double string.  The first is displayed in the
 127:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 128:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 129:src/display.c ****  */
 130:src/display.c **** void error_message(const unsigned int e) 
 131:src/display.c **** {
 132:src/display.c **** #define MSG1(top) top "\0"
 133:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
ARM GAS  /tmp/ccadPcKu.s 			page 6


 134:src/display.c **** 
 135:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 136:src/display.c ****   static const char *const error_table[] = 
 137:src/display.c ****     {
 138:src/display.c ****       // manually get the order correct!
 139:src/display.c ****       MSG2("Running", "ProGraMm"),
 140:src/display.c ****       MSG1("Domain"),
 141:src/display.c ****       MSG2("Bad time", "or dAtE"),
 142:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 143:src/display.c ****       MSG1("+\237"),
 144:src/display.c ****       MSG1("-\237"),
 145:src/display.c ****       MSG2("No such", "LAbEL"),
 146:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 147:src/display.c ****       MSG1("Out of range"),
 148:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 149:src/display.c ****       MSG2("Bad digit", "1"),
 150:src/display.c ****       MSG2("Too long", "1"),
 151:src/display.c **** #else
 152:src/display.c ****       MSG1("Bad digit"),
 153:src/display.c ****       MSG1("Too long"),
 154:src/display.c **** #endif
 155:src/display.c ****       MSG2("RAM is", "FuLL"),
 156:src/display.c ****       MSG2("Stack", "CLASH"),
 157:src/display.c ****       MSG1("Bad mode"),
 158:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 159:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 160:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 161:src/display.c ****       MSG1("I/O"),
 162:src/display.c ****       MSG2("Invalid", "dAtA"),
 163:src/display.c ****       MSG2("Write", "ProtEctEd"),
 164:src/display.c ****       MSG2("No root", "Found"),
 165:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 166:src/display.c ****       MSG1("Singular"),
 167:src/display.c ****       MSG2("Flash is", "FuLL"),
 168:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 169:src/display.c **** #ifndef SHIFT_EXPONENT
 170:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 171:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 172:src/display.c ****       MSG2("Too\007\304 small", "1"),
 173:src/display.c **** #     else
 174:src/display.c ****       MSG2("Too small", "1"),
 175:src/display.c **** #     endif
 176:src/display.c ****       MSG2("Too big", "1"),
 177:src/display.c **** #  else
 178:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 179:src/display.c ****       MSG1("Too\007\304 small"),
 180:src/display.c **** #     else
 181:src/display.c ****       MSG1("Too small"),
 182:src/display.c **** #     endif
 183:src/display.c ****       MSG1("Too big"),
 184:src/display.c **** #  endif
 185:src/display.c **** #endif
 186:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 187:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 188:src/display.c ****       MSG2("Interrupted", "X"),
 189:src/display.c **** #endif
 190:src/display.c ****     };
ARM GAS  /tmp/ccadPcKu.s 			page 7


 191:src/display.c **** #undef MSG1
 192:src/display.c **** #undef MSG2
 193:src/display.c **** #ifndef REALBUILD
 194:src/display.c ****   static const char *const error_table_text[] =
 195:src/display.c ****     {
 196:src/display.c ****       " P r o g r a m ",
 197:src/display.c ****       "",
 198:src/display.c ****       " o r   d a t e ",
 199:src/display.c ****       " O p - c o d e ",
 200:src/display.c ****       "",
 201:src/display.c ****       "",
 202:src/display.c ****       " L a b e l ",
 203:src/display.c ****       " O p e r a t i o n ",
 204:src/display.c ****       "",
 205:src/display.c ****       "",
 206:src/display.c ****       "",
 207:src/display.c ****       " F u l l ",
 208:src/display.c ****       " C l a s h ",
 209:src/display.c ****       "",
 210:src/display.c ****       " T o o   s m a l l ",
 211:src/display.c ****       " D a t a   p o i n t s ",
 212:src/display.c ****       " P a r a m e t e r ",
 213:src/display.c ****       "",
 214:src/display.c ****       " D a t a ",
 215:src/display.c ****       " P r o t e c t e d ",
 216:src/display.c ****       " F o u n d ",
 217:src/display.c ****       " M i s m a t c h ",
 218:src/display.c ****       "",
 219:src/display.c ****       " F u l l ",
 220:src/display.c ****       " I n s t a l l e d ",
 221:src/display.c **** #ifndef SHIFT_EXPONENT
 222:src/display.c ****       "",
 223:src/display.c ****       "",
 224:src/display.c **** #endif
 225:src/display.c ****       "",
 226:src/display.c ****     };
 227:src/display.c **** #endif
 228:src/display.c **** 
 229:src/display.c ****   if (e != ERR_NONE || Running) {
 230:src/display.c ****     const char *p = error_table[e];
 231:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 232:src/display.c ****     if (*q == '\0')
 233:src/display.c ****       q = S7_ERROR;
 234:src/display.c ****     if (*q == 'X') {
 235:src/display.c ****       DispMsg = p;
 236:src/display.c ****       frozen_display();
 237:src/display.c ****     }
 238:src/display.c ****     else {
 239:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 240:src/display.c ****       if (*q == '1')
 241:src/display.c **** 	q = CNULL;
 242:src/display.c **** #endif
 243:src/display.c ****       message(p, q);
 244:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 245:src/display.c **** #ifndef REALBUILD
 246:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 247:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 8


 248:src/display.c ****     }
 249:src/display.c **** #ifdef INFRARED
 250:src/display.c ****     if (Tracing) {
 251:src/display.c ****       if (*q == 'X')
 252:src/display.c **** 	print_reg(regX_idx, p, 0);
 253:src/display.c ****       else {
 254:src/display.c **** 	print_tab(0);
 255:src/display.c **** 	print_line(p, 0);
 256:src/display.c **** 	print(' ');
 257:src/display.c **** 	while (*q != '\0') {
 258:src/display.c **** 	  int c = *q;
 259:src/display.c **** 	  if (c >= 'A')
 260:src/display.c **** 	    c |= 0x60; // ASCII lower case
 261:src/display.c **** 	  print(c);
 262:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 263:src/display.c **** 	    ++q;
 264:src/display.c **** 	  ++q;
 265:src/display.c **** 	}
 266:src/display.c **** 	print_advance( 0 );
 267:src/display.c ****       }
 268:src/display.c ****     }
 269:src/display.c **** #endif
 270:src/display.c ****   }
 271:src/display.c **** }
 272:src/display.c **** 
 273:src/display.c **** 
 274:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 275:src/display.c ****  * display.
 276:src/display.c ****  */
 277:src/display.c **** #define D_TOP 64
 278:src/display.c **** #define D_TL 32
 279:src/display.c **** #define D_TR 8
 280:src/display.c **** #define D_MIDDLE 16
 281:src/display.c **** #define D_BL 4
 282:src/display.c **** #define D_BR 1
 283:src/display.c **** #define D_BOTTOM 2
 284:src/display.c **** 
 285:src/display.c **** #include "charset7.h"
 286:src/display.c **** 
 287:src/display.c **** #ifndef REALBUILD
 288:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 289:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 290:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 291:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 292:src/display.c **** 
 293:src/display.c **** static void set_mant_sign_dot()
 294:src/display.c **** {
 295:src/display.c ****   LastDisplayedNumber[0]='-';
 296:src/display.c ****   set_dot(MANT_SIGN);
 297:src/display.c **** }
 298:src/display.c **** 
 299:src/display.c **** static void clr_mant_sign_dot()
 300:src/display.c **** {
 301:src/display.c ****   LastDisplayedNumber[0]=' ';
 302:src/display.c ****   clr_dot(MANT_SIGN);
 303:src/display.c **** }
 304:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 9


 305:src/display.c **** static void set_exp_sign_dot()
 306:src/display.c **** {
 307:src/display.c ****   LastDisplayedExponent[0]='-';
 308:src/display.c ****   set_dot(EXP_SIGN);
 309:src/display.c **** }
 310:src/display.c **** 
 311:src/display.c **** static void clr_exp_sign_dot()
 312:src/display.c **** {
 313:src/display.c ****   LastDisplayedExponent[0]=' ';
 314:src/display.c ****   clr_dot(EXP_SIGN);
 315:src/display.c **** }
 316:src/display.c **** 
 317:src/display.c **** #else
 318:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 319:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 320:src/display.c **** 
 321:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 322:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #endif
 325:src/display.c **** 
 326:src/display.c **** #ifndef REALBUILD
 327:src/display.c **** int getdig(int ch)
 328:src/display.c **** #else
 329:src/display.c ****   static int getdig(int ch)
 330:src/display.c **** #endif
 331:src/display.c **** {
 332:src/display.c ****   // perform index lookup
 333:src/display.c ****   return digtbl[ch&0xff];
 334:src/display.c **** }
 335:src/display.c **** 
 336:src/display.c **** void dot(int n, int on) {
 337:src/display.c ****   if (on)	set_dot(n);
 338:src/display.c ****   else	clr_dot(n);
 339:src/display.c **** }
 340:src/display.c **** 
 341:src/display.c **** 
 342:src/display.c **** /* Set the decimal point *after* the indicated digit
 343:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 344:src/display.c ****  * of decimal.
 345:src/display.c ****  */
 346:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 347:src/display.c ****   if (res) {
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 349:src/display.c ****   } else {
 350:src/display.c ****     set_dot(posn+7);
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 352:src/display.c ****       set_dot(posn+8);
 353:src/display.c **** #ifndef REALBUILD
 354:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 355:src/display.c **** #endif
 356:src/display.c ****   }
 357:src/display.c ****   return res;
 358:src/display.c **** }
 359:src/display.c **** 
 360:src/display.c **** /* Set the digit group separator *before* the specified digit.
 361:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
ARM GAS  /tmp/ccadPcKu.s 			page 10


 362:src/display.c ****  * sep argument.
 363:src/display.c ****  */
 364:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 365:src/display.c ****   if (sep == SEP_NONE)
 366:src/display.c ****     return res;
 367:src/display.c ****   if (res) {
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 369:src/display.c ****     else *res++ = '.';
 370:src/display.c ****   } else {
 371:src/display.c ****     posn -= SEGS_PER_DIGIT;
 372:src/display.c ****     set_dot(posn+7);
 373:src/display.c ****     if (sep == SEP_COMMA)
 374:src/display.c ****       set_dot(posn+8);
 375:src/display.c **** #ifndef REALBUILD
 376:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 377:src/display.c **** #endif
 378:src/display.c ****   }
 379:src/display.c ****   return res;
 380:src/display.c **** }
 381:src/display.c **** 
 382:src/display.c **** /* Set a digit in positions [base, base+6] */
 383:src/display.c **** static void set_dig(int base, int ch)
 384:src/display.c **** {
 136              		.loc 1 384 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 385:src/display.c ****   int i;
 140              		.loc 1 385 3 view .LVU36
 386:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 386 3 view .LVU37
 142              	.LBB168:
 143              	.LBI168:
 327:src/display.c **** #else
 144              		.loc 1 327 5 view .LVU38
 145              	.LBB169:
 333:src/display.c **** }
 146              		.loc 1 333 3 view .LVU39
 333:src/display.c **** }
 147              		.loc 1 333 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 333:src/display.c **** }
 149              		.loc 1 333 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE169:
 152              	.LBE168:
 387:src/display.c **** #ifndef REALBUILD
 388:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 388 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 384:src/display.c ****   int i;
 155              		.loc 1 384 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
ARM GAS  /tmp/ccadPcKu.s 			page 11


 161              		.cfi_offset 14, -4
 162              	.LBB171:
 163              	.LBB170:
 333:src/display.c **** }
 164              		.loc 1 333 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 333:src/display.c **** }
 167              		.loc 1 333 16 view .LVU45
 168              	.LBE170:
 169              	.LBE171:
 170              		.loc 1 388 3 is_stmt 1 view .LVU46
 171              		.loc 1 388 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 389:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 389 5 is_stmt 1 view .LVU48
 174              		.loc 1 389 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 389 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 389 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 389 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 389 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 390:src/display.c ****   else
 391:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 392:src/display.c **** #endif
 393:src/display.c ****   for (i=6; i>=0; i--)
 394:src/display.c ****     {
 395:src/display.c ****       //		dot(base, c & (1 << i));
 396:src/display.c ****       if (c & (1 << i))
 397:src/display.c **** 	set_dot(base);
 196              		.loc 1 397 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 398:src/display.c ****       else
 399:src/display.c **** 	clr_dot(base);
 400:src/display.c ****       base++;
 199              		.loc 1 400 7 is_stmt 1 view .LVU55
 393:src/display.c ****     {
 200              		.loc 1 393 19 view .LVU56
 393:src/display.c ****     {
 201              		.loc 1 393 3 is_stmt 0 view .LVU57
ARM GAS  /tmp/ccadPcKu.s 			page 12


 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 393:src/display.c ****     {
 204              		.loc 1 393 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 397:src/display.c ****       else
 208              		.loc 1 397 2 is_stmt 1 view .LVU59
 399:src/display.c ****       base++;
 209              		.loc 1 399 2 view .LVU60
 396:src/display.c **** 	set_dot(base);
 210              		.loc 1 396 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 396:src/display.c **** 	set_dot(base);
 212              		.loc 1 396 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 396:src/display.c **** 	set_dot(base);
 216              		.loc 1 396 7 is_stmt 1 view .LVU63
 396:src/display.c **** 	set_dot(base);
 217              		.loc 1 396 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 399:src/display.c ****       base++;
 219              		.loc 1 399 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 400 7 is_stmt 1 view .LVU66
 393:src/display.c ****     {
 223              		.loc 1 393 19 view .LVU67
 393:src/display.c ****     {
 224              		.loc 1 393 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 393:src/display.c ****     {
 227              		.loc 1 393 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 401:src/display.c ****     }
 402:src/display.c **** }
 231              		.loc 1 402 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 391:src/display.c **** #endif
 235              		.loc 1 391 5 is_stmt 1 view .LVU71
 391:src/display.c **** #endif
 236              		.loc 1 391 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 391:src/display.c **** #endif
 238              		.loc 1 391 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 391:src/display.c **** #endif
 240              		.loc 1 391 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
ARM GAS  /tmp/ccadPcKu.s 			page 13


 391:src/display.c **** #endif
 242              		.loc 1 391 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 391:src/display.c **** #endif
 246              		.loc 1 391 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 403:src/display.c **** 
 404:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 405:src/display.c ****   if (res) *res++ = ch;
 406:src/display.c ****   else	set_dig(base, ch);
 407:src/display.c ****   return res;
 408:src/display.c **** }
 409:src/display.c **** 
 410:src/display.c **** 
 411:src/display.c **** static void set_digits_string(const char *msg, int j) {
 412:src/display.c ****   for (; *msg != '\0'; msg++) {
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 414:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 415:src/display.c ****     else {
 416:src/display.c ****       set_dig_s(j, *msg, CNULL);
 417:src/display.c ****       j += SEGS_PER_DIGIT;
 418:src/display.c ****     }
 419:src/display.c ****   }
 420:src/display.c **** }
 421:src/display.c **** 
 422:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 423:src/display.c ****   int i;
 424:src/display.c ****   const int n = res == NULL ? 3 : 4;
 425:src/display.c **** 
 426:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 428:src/display.c **** }
 429:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 14


 430:src/display.c **** /* Force the exponent display
 431:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 432:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 433:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 434:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 435:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 436:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 437:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 438:src/display.c ****  */
 439:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 440:src/display.c ****   union {
 441:src/display.c ****     char buf[4];
 442:src/display.c ****     int i;
 443:src/display.c ****   } u;
 444:src/display.c ****   int negative;
 445:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 446:src/display.c ****   int thousands;
 447:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 448:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 449:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 450:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 451:src/display.c **** #  else
 452:src/display.c ****   const int show_large_exponent = 1;
 453:src/display.c **** #  endif
 454:src/display.c **** #else
 455:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 456:src/display.c ****   int thousands;
 457:src/display.c **** #  endif
 458:src/display.c ****   const int show_large_exponent = 0;
 459:src/display.c **** #endif
 460:src/display.c **** 
 461:src/display.c ****   negative = flags & 2;
 462:src/display.c ****   if (exp < 0) {
 463:src/display.c ****     negative = 1;
 464:src/display.c ****     exp = -exp;
 465:src/display.c ****   }
 466:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 467:src/display.c ****   thousands = exp / 1000;
 468:src/display.c **** #endif
 469:src/display.c ****   if (res) {
 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 471:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 472:src/display.c ****     if (thousands != 0) {
 473:src/display.c **** #else
 474:src/display.c ****       if (exp > 999) {
 475:src/display.c **** #endif
 476:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 478:src/display.c ****       }
 479:src/display.c ****       else *res++ = 'e'; // Normal separator
 480:src/display.c **** #else
 481:src/display.c ****       *res++ = 'e';
 482:src/display.c **** #endif
 483:src/display.c ****       if (negative) *res++ = '-';
 484:src/display.c ****     }
 485:src/display.c ****     else {
 486:src/display.c ****       if (negative) SET_EXP_SIGN;
ARM GAS  /tmp/ccadPcKu.s 			page 15


 487:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 488:src/display.c ****       if (thousands != 0) {
 489:src/display.c **** #else
 490:src/display.c **** 	if (exp > 999) {
 491:src/display.c **** #endif
 492:src/display.c **** 	  if (!show_large_exponent
 493:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 494:src/display.c **** 	      && (flags & 8) == 0
 495:src/display.c **** #endif
 496:src/display.c **** 	      ) {
 497:src/display.c **** #ifdef REALBUILD
 498:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 499:src/display.c **** #else
 500:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 501:src/display.c **** #endif
 502:src/display.c **** 	    goto no_number;
 503:src/display.c **** 	  }
 504:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 505:src/display.c **** 	  else {
 506:src/display.c **** 	    exp -= thousands * 1000;
 507:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 508:src/display.c **** 	    if (flags & 16) {
 509:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 510:src/display.c **** 	      int i;
 511:src/display.c **** 
 512:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 513:src/display.c **** 		// Clear digits and separators
 514:src/display.c **** 		clr_dot(i);
 515:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 516:src/display.c **** 	    }
 517:src/display.c **** #  endif
 518:src/display.c **** 	    if (negative) {
 519:src/display.c **** 	      CLR_EXP_SIGN;
 520:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 521:src/display.c **** 	    }
 522:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 523:src/display.c **** 	    flags = 1;
 524:src/display.c **** 	  }
 525:src/display.c **** #endif
 526:src/display.c **** 	}
 527:src/display.c ****       }
 528:src/display.c **** #ifdef REALBUILD
 529:src/display.c ****       u.i = 0; // Smaller ARM code
 530:src/display.c **** #else
 531:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 532:src/display.c **** #endif
 533:src/display.c ****       if (flags & 5) {
 534:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 535:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 536:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 537:src/display.c **** 	  int i;
 538:src/display.c **** 
 539:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 540:src/display.c **** 	    if (u.buf[i] == '0')
 541:src/display.c **** 	      u.buf[i] = ' ';
 542:src/display.c **** 	    else
 543:src/display.c **** 	      break;
ARM GAS  /tmp/ccadPcKu.s 			page 16


 544:src/display.c **** 	  }
 545:src/display.c **** 	  if (i != 0 && negative) {
 546:src/display.c **** 	    // Move minus sign to right in front of exponent
 547:src/display.c **** 	    CLR_EXP_SIGN;
 548:src/display.c **** 	    u.buf[i - 1] = '-';
 549:src/display.c **** 	  }
 550:src/display.c **** 	}
 551:src/display.c **** #endif
 552:src/display.c ****       }
 553:src/display.c ****       else
 554:src/display.c **** 	num_arg(u.buf, exp);
 555:src/display.c ****     no_number:
 556:src/display.c ****       set_exp_digits_string(u.buf, res);
 557:src/display.c ****     }
 558:src/display.c **** 
 559:src/display.c ****     static void carry_overflow(void) {
 560:src/display.c ****       const int base = SEGS_EXP_BASE;
 561:src/display.c ****       int c;
 562:src/display.c ****       unsigned int b;
 563:src/display.c **** 
 564:src/display.c ****       // Figure out the base
 565:src/display.c ****       switch (State2.smode) {
 566:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 567:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 568:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 569:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 570:src/display.c ****       default:	b = UState.int_base+1;	break;
 571:src/display.c ****       }
 572:src/display.c **** 
 573:src/display.c ****       // Display the base as the first exponent digit
 574:src/display.c ****       if (b > 10 && b < 16)
 575:src/display.c **** 	SET_EXP_SIGN;
 576:src/display.c ****       c = "B34567o9D12345h"[b-2];
 577:src/display.c ****       set_dig(base, c);
 578:src/display.c **** 
 579:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 580:src/display.c ****       if (get_carry())
 581:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 582:src/display.c ****       if (get_overflow())
 583:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 584:src/display.c ****     }
 585:src/display.c **** 
 586:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 587:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 588:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 589:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 590:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 591:src/display.c **** #endif
 592:src/display.c **** 
 593:src/display.c ****     /* Display the annunicator text line.
 594:src/display.c ****      * Care needs to be taken to keep things aligned.
 595:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 596:src/display.c ****      */
 597:src/display.c **** #ifdef TOP_ROW
 598:src/display.c ****     static void annunciators(void) {
 599:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 600:src/display.c ****       char buf[42], *p = buf, *q="";
ARM GAS  /tmp/ccadPcKu.s 			page 17


 601:src/display.c ****       char buf2[42], *p2 = buf2;
 602:src/display.c ****       int n;
 603:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 604:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 606:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 607:src/display.c ****       // feature run-time configurable if needed.
 608:src/display.c **** #ifdef INCLUDE_YREG_CODE
 609:src/display.c **** #  ifdef YREG_ALWAYS_ON
 610:src/display.c ****       const int yreg_enabled = 1;
 611:src/display.c **** #  else
 612:src/display.c ****       const int yreg_enabled = UState.show_y;
 613:src/display.c **** #  endif
 614:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 615:src/display.c ****       const int yreg_hms = 1;
 616:src/display.c **** #  else
 617:src/display.c ****       const int yreg_hms = 0;
 618:src/display.c **** #  endif
 619:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 620:src/display.c ****       const int yreg_fract = 1;
 621:src/display.c **** #  else
 622:src/display.c ****       const int yreg_fract = 0;
 623:src/display.c **** #  endif
 624:src/display.c **** #else
 625:src/display.c ****       const int yreg_enabled = 0;
 626:src/display.c ****       const int yreg_hms = 0;
 627:src/display.c ****       const int yreg_fract = 0;
 628:src/display.c **** #endif
 629:src/display.c **** #ifdef RP_PREFIX
 630:src/display.c ****       const int rp_prefix = 1;
 631:src/display.c **** #else
 632:src/display.c ****       const int rp_prefix = 0;
 633:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 634:src/display.c **** #endif
 635:src/display.c ****       // Indicates whether font escape code is compiled in.
 636:src/display.c ****       // This variable will always be set at compile time.
 637:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 638:src/display.c ****       const int has_FONT_ESCAPE = 1;
 639:src/display.c **** #else
 640:src/display.c ****       const int has_FONT_ESCAPE = 0;
 641:src/display.c **** #endif
 642:src/display.c **** 
 643:src/display.c ****       xset(buf, '\0', sizeof(buf));
 644:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 645:src/display.c ****       
 646:src/display.c ****       if (is_intmode()) {
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
 648:src/display.c **** 	if (shift_char == ' ') {
 649:src/display.c **** 	  *p2++ = '\007';
 650:src/display.c **** 	  *p2++ = '\346';
 651:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 652:src/display.c **** 	}
 653:src/display.c **** 	else
 654:src/display.c **** #endif
 655:src/display.c **** 	  {
 656:src/display.c **** 	    *p2++ = shift_char;
 657:src/display.c **** 	    *p2++ = '\006';
ARM GAS  /tmp/ccadPcKu.s 			page 18


 658:src/display.c **** 	  }
 659:src/display.c **** 
 660:src/display.c **** 	switch(int_mode()) {
 661:src/display.c **** 	default:
 662:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 663:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 664:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 665:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 666:src/display.c **** 	}
 667:src/display.c **** 	q = scopy(p2, q);
 668:src/display.c **** 	*q++ = '\006';
 669:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 670:src/display.c **** 
 671:src/display.c **** 	if (IntMaxWindow > 0) {
 672:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 673:src/display.c **** 	  if (*q == '1')
 674:src/display.c **** 	    n += 2;
 675:src/display.c **** 	  if (q[1] == '1')
 676:src/display.c **** 	    n += 2;
 677:src/display.c **** 	  while (n-- > 0)
 678:src/display.c **** 	    *p2++ = '\006';
 679:src/display.c **** 
 680:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 682:src/display.c **** 	}
 683:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 684:src/display.c ****       }
 685:src/display.c ****       else if (!yreg_enabled
 686:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 687:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 688:src/display.c **** #endif
 689:src/display.c **** 	       ) {
 690:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 691:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 692:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 693:src/display.c **** 	if (shift_char == ' ') {
 694:src/display.c **** 	  *p2++ = '\007';
 695:src/display.c **** 	  *p2++ = '\342';
 696:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\344';
 699:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 700:src/display.c **** 	}
 701:src/display.c **** 	else
 702:src/display.c **** #endif
 703:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 704:src/display.c **** 	    *p2++ = shift_char;
 705:src/display.c **** 	    *p2++ = '\006';
 706:src/display.c **** 	  }
 707:src/display.c **** 	  else {
 708:src/display.c **** 	    *p2++ = 'D';
 709:src/display.c **** 	  }
 710:src/display.c **** 
 711:src/display.c **** 	if (State2.cmplx) {
 712:src/display.c **** 	  *p2++ = ' ';
 713:src/display.c **** 	  *p2 = '\024';
 714:src/display.c **** 	  goto skip;
ARM GAS  /tmp/ccadPcKu.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	if (State2.arrow) {
 717:src/display.c **** 	  *p2++ = ' ';
 718:src/display.c **** 	  *p2 = '\015';
 719:src/display.c **** 	  goto skip;
 720:src/display.c **** 	}
 721:src/display.c **** 
 722:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 723:src/display.c **** 	  if (State2.wascomplex) {
 724:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 725:src/display.c **** 	  }
 726:src/display.c **** 	  else if (rp_prefix) {
 727:src/display.c **** 	    if (RectPolConv == 1) {
 728:src/display.c **** 	      q = "\007\306<";
 729:src/display.c **** 	    }
 730:src/display.c **** 	    else {
 731:src/display.c **** 	      q = "\007\306y";
 732:src/display.c **** 	    }
 733:src/display.c **** 	  }
 734:src/display.c **** 	  p = scopy(buf, q);
 735:src/display.c **** 
 736:src/display.c **** 	  goto display_yreg;
 737:src/display.c **** 	}
 738:src/display.c **** 
 739:src/display.c **** 	switch (UState.date_mode) {
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 741:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 742:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 743:src/display.c **** #endif
 744:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 745:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 748:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #endif
 751:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 752:src/display.c **** 	}
 753:src/display.c **** 	p2 = scopy(p2, q);
 754:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 755:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 756:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 757:src/display.c **** 	}
 758:src/display.c **** #else
 759:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 760:src/display.c **** 	*p2++ = '\007';
 761:src/display.c **** 	*p2++ = '\342';
 762:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 763:src/display.c **** #endif
 764:src/display.c ****       }
 765:src/display.c ****       else { // yreg_enabled
 766:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 767:src/display.c **** 	if (State2.cmplx) {
 768:src/display.c **** 	  *p2++ = '\007';
 769:src/display.c **** 	  *p2++ = '\344';
 770:src/display.c **** 	  *p2++ = shift_char;
 771:src/display.c **** 	  q = "\024";
ARM GAS  /tmp/ccadPcKu.s 			page 20


 772:src/display.c **** 	}
 773:src/display.c **** 	else if (shift_char != ' ') {
 774:src/display.c **** 	  *p2++ = '\007';
 775:src/display.c **** 	  *p2++ = '\307';
 776:src/display.c **** 	  *p2++ = shift_char;
 777:src/display.c **** 	  goto no_copy;
 778:src/display.c **** 	}
 779:src/display.c **** 	else
 780:src/display.c **** #endif
 781:src/display.c **** 	  if (State2.wascomplex) {
 782:src/display.c **** 	    q = "\007\207i";
 783:src/display.c **** 	    p = scopy(p, q);
 784:src/display.c **** 	    goto no_copy;
 785:src/display.c **** 	  }
 786:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 787:src/display.c **** 	    q = "\007\307<";
 788:src/display.c **** 	    p = scopy(p, q);
 789:src/display.c **** 	    goto no_copy;
 790:src/display.c **** 	  }
 791:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 792:src/display.c **** 	    q = "\007\307y";
 793:src/display.c **** 	    p = scopy(p, q);
 794:src/display.c **** 	    goto no_copy;
 795:src/display.c **** 	  }
 796:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 797:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
 798:src/display.c **** 	  q = "\007\207\007";
 799:src/display.c **** 	}
 800:src/display.c **** #endif
 801:src/display.c **** 	else {
 802:src/display.c **** #ifndef SHOW_STACK_SIZE
 803:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 804:src/display.c **** #else
 805:src/display.c **** 	  if (is_dblmode()) {
 806:src/display.c **** 	    *p++ = '\007';
 807:src/display.c **** 	    *p++ = '\342';
 808:src/display.c **** 	    *p++ = (UState.stack_depth ? ':' : '.');
 809:src/display.c **** 	    q = "\007\345D";
 810:src/display.c **** 	  }
 811:src/display.c **** 	  else {
 812:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 813:src/display.c **** 	  }
 814:src/display.c **** #endif
 815:src/display.c **** 	}
 816:src/display.c **** 	p2 = scopy(p2, q);
 817:src/display.c **** 
 818:src/display.c ****       no_copy:
 819:src/display.c **** 
 820:src/display.c **** 	if (State2.arrow) {
 821:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 822:src/display.c **** 	} // no need to skip y display with arrow here
 823:src/display.c **** 	if (State2.runmode) {
 824:src/display.c **** 	  decNumber y;
 825:src/display.c **** 	display_yreg:
 826:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 827:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 828:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
ARM GAS  /tmp/ccadPcKu.s 			page 21


 829:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 830:src/display.c **** 	   */
 831:src/display.c **** 	  if (is_intmode()) {
 832:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 833:src/display.c **** 	    goto skip;
 834:src/display.c **** 	  }
 835:src/display.c **** 		      
 836:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 837:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 838:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 839:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 840:src/display.c **** 	    if (yreg_hms && State2.hms) {
 841:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 842:src/display.c **** 
 843:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 844:src/display.c **** 	      UState.nothousands = 1;
 845:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 846:src/display.c **** 	      UState.nothousands = saved_nothousands;
 847:src/display.c **** 	      // First replace the '@' character with the degree symbol
 848:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 849:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 850:src/display.c **** 	      // then remove the fractional part of the seconds.
 851:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 852:src/display.c **** 	      while (*p) {
 853:src/display.c **** 		replace_char(buf, p[0], p[1]);
 854:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 855:src/display.c **** 		  goto skip;
 856:src/display.c **** 		}
 857:src/display.c **** 		p += 2;
 858:src/display.c **** 	      }
 859:src/display.c **** 	      goto skip;
 860:src/display.c **** 	    }
 861:src/display.c **** 	    if (yreg_fract && UState.fract
 862:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 863:src/display.c **** 		&& !State2.cmplx
 864:src/display.c **** #endif
 865:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 866:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 867:src/display.c **** #endif
 868:src/display.c **** 		&& set_x_fract(&y, p)) {
 869:src/display.c **** 	      char ltgteq;
 870:src/display.c **** 
 871:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 872:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 873:src/display.c **** 	      ltgteq = *q;
 874:src/display.c **** 	      switch (ltgteq) {
 875:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 876:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 877:src/display.c **** 	      }
 878:src/display.c **** 	      scopy(q, "\007\344?");
 879:src/display.c **** 	      q[2] = ltgteq;
 880:src/display.c **** 
 881:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 882:src/display.c **** 		goto skip;
 883:src/display.c **** 	      }
 884:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 885:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
ARM GAS  /tmp/ccadPcKu.s 			page 22


 886:src/display.c **** 		goto skip;
 887:src/display.c **** 	      }
 888:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 889:src/display.c **** 	    }
 890:src/display.c **** 	  }
 891:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 892:src/display.c **** 	    int extra_pixels;
 893:src/display.c **** 
 894:src/display.c **** 	    set_x_dn(&y, p, &n);
 895:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 896:src/display.c **** 	    if (extra_pixels <= 0)
 897:src/display.c **** 	      break;
 898:src/display.c **** 
 899:src/display.c **** 	    xset(p, '\0', n+10);
 900:src/display.c **** 
 901:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 902:src/display.c **** 	  }
 903:src/display.c **** 	}
 904:src/display.c ****       }
 905:src/display.c ****       
 906:src/display.c ****     skip:	set_status(buf);
 907:src/display.c ****       set_status_top(buf2);
 908:src/display.c ****       
 909:src/display.c ****     }
 910:src/display.c **** #else
 911:src/display.c ****     static void annunciators(void) {
 912:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 913:src/display.c ****       char buf[42], *p = buf, *q="";
 914:src/display.c ****       int n;
 915:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 916:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 917:src/display.c ****       // Constant variables and code branches depending on a constant variable
 918:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 919:src/display.c ****       // feature run-time configurable if needed.
 920:src/display.c **** #ifdef INCLUDE_YREG_CODE
 921:src/display.c **** #  ifdef YREG_ALWAYS_ON
 922:src/display.c ****       const int yreg_enabled = 1;
 923:src/display.c **** #  else
 924:src/display.c ****       const int yreg_enabled = UState.show_y;
 925:src/display.c **** #  endif
 926:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 927:src/display.c ****       const int yreg_hms = 1;
 928:src/display.c **** #  else
 929:src/display.c ****       const int yreg_hms = 0;
 930:src/display.c **** #  endif
 931:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 932:src/display.c ****       const int yreg_fract = 1;
 933:src/display.c **** #  else
 934:src/display.c ****       const int yreg_fract = 0;
 935:src/display.c **** #  endif
 936:src/display.c **** #else
 937:src/display.c ****       const int yreg_enabled = 0;
 938:src/display.c ****       const int yreg_hms = 0;
 939:src/display.c ****       const int yreg_fract = 0;
 940:src/display.c **** #endif
 941:src/display.c **** #ifdef RP_PREFIX
 942:src/display.c ****       const int rp_prefix = 1;
ARM GAS  /tmp/ccadPcKu.s 			page 23


 943:src/display.c **** #else
 944:src/display.c ****       const int rp_prefix = 0;
 945:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 946:src/display.c **** #endif
 947:src/display.c ****       // Indicates whether font escape code is compiled in.
 948:src/display.c ****       // This variable will always be set at compile time.
 949:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 950:src/display.c ****       const int has_FONT_ESCAPE = 1;
 951:src/display.c **** #else
 952:src/display.c ****       const int has_FONT_ESCAPE = 0;
 953:src/display.c **** #endif
 954:src/display.c **** 
 955:src/display.c ****       xset(buf, '\0', sizeof(buf));
 956:src/display.c **** #ifdef TOP_ROW
 957:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 958:src/display.c **** #endif
 959:src/display.c ****       
 960:src/display.c ****       if (is_intmode()) {
 961:src/display.c **** #ifdef SHOW_STACK_SIZE
 962:src/display.c **** 	if (shift_char == ' ') {
 963:src/display.c **** 	  *p++ = '\007';
 964:src/display.c **** 	  *p++ = '\346';
 965:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 966:src/display.c **** 	}
 967:src/display.c **** 	else
 968:src/display.c **** #endif
 969:src/display.c **** 	  {
 970:src/display.c **** 	    *p++ = shift_char;
 971:src/display.c **** 	    *p++ = '\006';
 972:src/display.c **** 	  }
 973:src/display.c **** 
 974:src/display.c **** 	switch(int_mode()) {
 975:src/display.c **** 	default:
 976:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 977:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 978:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 979:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 980:src/display.c **** 	}
 981:src/display.c **** 	q = scopy(p, q);
 982:src/display.c **** 	*q++ = '\006';
 983:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 984:src/display.c **** 
 985:src/display.c **** 	if (IntMaxWindow > 0) {
 986:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 987:src/display.c **** 	  if (*q == '1')
 988:src/display.c **** 	    n += 2;
 989:src/display.c **** 	  if (q[1] == '1')
 990:src/display.c **** 	    n += 2;
 991:src/display.c **** 	  while (n-- > 0)
 992:src/display.c **** 	    *p++ = '\006';
 993:src/display.c **** 
 994:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 995:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 996:src/display.c **** 	}
 997:src/display.c ****       }
 998:src/display.c ****       else if (!yreg_enabled
 999:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccadPcKu.s 			page 24


1000:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1001:src/display.c **** #endif
1002:src/display.c **** 	       ) {
1003:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1004:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1005:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1006:src/display.c **** 	if (shift_char == ' ') {
1007:src/display.c **** 	  *p++ = '\007';
1008:src/display.c **** 	  *p++ = '\342';
1009:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1010:src/display.c **** 	  *p++ = '\007';
1011:src/display.c **** 	  *p++ = '\344';
1012:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1013:src/display.c **** 	}
1014:src/display.c **** 	else
1015:src/display.c **** #endif
1016:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1017:src/display.c **** 	    *p++ = shift_char;
1018:src/display.c **** 	    *p++ = '\006';
1019:src/display.c **** 	  }
1020:src/display.c **** 	  else {
1021:src/display.c **** 	    *p++ = 'D';
1022:src/display.c **** 	  }
1023:src/display.c **** 
1024:src/display.c **** 	if (State2.cmplx) {
1025:src/display.c **** 	  *p++ = ' ';
1026:src/display.c **** 	  *p = '\024';
1027:src/display.c **** 	  goto skip;
1028:src/display.c **** 	}
1029:src/display.c **** 	if (State2.arrow) {
1030:src/display.c **** 	  *p++ = ' ';
1031:src/display.c **** 	  *p = '\015';
1032:src/display.c **** 	  goto skip;
1033:src/display.c **** 	}
1034:src/display.c **** 
1035:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1036:src/display.c **** 	  if (State2.wascomplex) {
1037:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1038:src/display.c **** 	  }
1039:src/display.c **** 	  else if (rp_prefix) {
1040:src/display.c **** 	    if (RectPolConv == 1) {
1041:src/display.c **** 	      q = "\007\306<";
1042:src/display.c **** 	    }
1043:src/display.c **** 	    else {
1044:src/display.c **** 	      q = "\007\306y";
1045:src/display.c **** 	    }
1046:src/display.c **** 	  }
1047:src/display.c **** 	  p = scopy(buf, q);
1048:src/display.c **** 
1049:src/display.c **** 	  goto display_yreg;
1050:src/display.c **** 	}
1051:src/display.c **** 
1052:src/display.c **** 	switch (UState.date_mode) {
1053:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1054:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1055:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1056:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 25


1057:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1058:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1059:src/display.c **** #endif
1060:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1061:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1062:src/display.c **** #endif
1063:src/display.c **** #endif
1064:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1065:src/display.c **** 	}
1066:src/display.c **** 	p = scopy(p, q);
1067:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1068:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1069:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1070:src/display.c **** 	}
1071:src/display.c **** #else
1072:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1073:src/display.c **** 	*p++ = '\007';
1074:src/display.c **** 	*p++ = '\342';
1075:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1076:src/display.c **** #endif
1077:src/display.c ****       }
1078:src/display.c ****       else { // yreg_enabled
1079:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1080:src/display.c **** 	if (State2.cmplx) {
1081:src/display.c **** 	  *p++ = '\007';
1082:src/display.c **** 	  *p++ = '\344';
1083:src/display.c **** 	  *p++ = shift_char;
1084:src/display.c **** 	  q = "\024";
1085:src/display.c **** 	}
1086:src/display.c **** 	else if (shift_char != ' ') {
1087:src/display.c **** 	  *p++ = '\007';
1088:src/display.c **** 	  *p++ = '\307';
1089:src/display.c **** 	  *p++ = shift_char;
1090:src/display.c **** 	  goto no_copy;
1091:src/display.c **** 	}
1092:src/display.c **** 	else
1093:src/display.c **** #endif
1094:src/display.c **** 	  if (State2.wascomplex) {
1095:src/display.c **** 	    q = "\007\207i";
1096:src/display.c **** 	  }
1097:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1098:src/display.c **** 	    q = "\007\307<";
1099:src/display.c **** 	  }
1100:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1101:src/display.c **** 	    q = "\007\307y";
1102:src/display.c **** 	  }
1103:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1104:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1105:src/display.c **** 	    q = "\007\207\007";
1106:src/display.c **** 	  }
1107:src/display.c **** #endif
1108:src/display.c **** 	  else {
1109:src/display.c **** #ifndef SHOW_STACK_SIZE
1110:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1111:src/display.c **** #else
1112:src/display.c **** 	    if (is_dblmode()) {
1113:src/display.c **** 	      *p++ = '\007';
ARM GAS  /tmp/ccadPcKu.s 			page 26


1114:src/display.c **** 	      *p++ = '\342';
1115:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1116:src/display.c **** 	      q = "\007\345D";
1117:src/display.c **** 	    }
1118:src/display.c **** 	    else {
1119:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1120:src/display.c **** 	    }
1121:src/display.c **** #endif
1122:src/display.c **** 	  }
1123:src/display.c **** 	p = scopy(p, q);
1124:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1125:src/display.c ****       no_copy:
1126:src/display.c **** #endif
1127:src/display.c **** 
1128:src/display.c **** 	if (State2.arrow) {
1129:src/display.c **** 	  scopy(p, "\007\204\006\015");
1130:src/display.c **** 	} else if (State2.runmode) {
1131:src/display.c **** 	  decNumber y;
1132:src/display.c **** 	display_yreg:
1133:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1134:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1135:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1136:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1137:src/display.c **** 	   */
1138:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1139:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1140:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1141:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1142:src/display.c **** 	    if (yreg_hms && State2.hms) {
1143:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1144:src/display.c **** 
1145:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1146:src/display.c **** 	      UState.nothousands = 1;
1147:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1148:src/display.c **** 	      UState.nothousands = saved_nothousands;
1149:src/display.c **** 	      // First replace the '@' character with the degree symbol
1150:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1151:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1152:src/display.c **** 	      // then remove the fractional part of the seconds.
1153:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1154:src/display.c **** 	      while (*p) {
1155:src/display.c **** 		replace_char(buf, p[0], p[1]);
1156:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1157:src/display.c **** 		  goto skip;
1158:src/display.c **** 		}
1159:src/display.c **** 		p += 2;
1160:src/display.c **** 	      }
1161:src/display.c **** 	      goto skip;
1162:src/display.c **** 	    }
1163:src/display.c **** 	    if (yreg_fract && UState.fract
1164:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1165:src/display.c **** 		&& !State2.cmplx
1166:src/display.c **** #endif
1167:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1168:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1169:src/display.c **** #endif
1170:src/display.c **** 		&& set_x_fract(&y, p)) {
ARM GAS  /tmp/ccadPcKu.s 			page 27


1171:src/display.c **** 	      char ltgteq;
1172:src/display.c **** 
1173:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1174:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1175:src/display.c **** 	      ltgteq = *q;
1176:src/display.c **** 	      switch (ltgteq) {
1177:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1178:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1179:src/display.c **** 	      }
1180:src/display.c **** 	      scopy(q, "\007\344?");
1181:src/display.c **** 	      q[2] = ltgteq;
1182:src/display.c **** 
1183:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1184:src/display.c **** 		goto skip;
1185:src/display.c **** 	      }
1186:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1187:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1188:src/display.c **** 		goto skip;
1189:src/display.c **** 	      }
1190:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1191:src/display.c **** 	    }
1192:src/display.c **** 	  }
1193:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1194:src/display.c **** 	    int extra_pixels;
1195:src/display.c **** 
1196:src/display.c **** 	    set_x_dn(&y, p, &n);
1197:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1198:src/display.c **** 	    if (extra_pixels <= 0)
1199:src/display.c **** 	      break;
1200:src/display.c **** 
1201:src/display.c **** 	    xset(p, '\0', n+10);
1202:src/display.c **** 
1203:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1204:src/display.c **** 	  }
1205:src/display.c **** 	}
1206:src/display.c ****       }
1207:src/display.c ****       
1208:src/display.c ****     skip:	set_status_top(buf);
1209:src/display.c ****     }
1210:src/display.c **** #endif //top_row
1211:src/display.c ****     static void disp_x(const char *p) {
1212:src/display.c ****       int i;
1213:src/display.c ****       int gotdot = -1;
1214:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1215:src/display.c ****       const
1216:src/display.c **** #endif
1217:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1218:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1219:src/display.c ****       int overflow_to_left = 0;
1220:src/display.c **** #endif
1221:src/display.c **** 
1222:src/display.c ****       if (*p == '-') {
1223:src/display.c **** 	SET_MANT_SIGN;
1224:src/display.c **** 	p++;
1225:src/display.c ****       }
1226:src/display.c **** 
1227:src/display.c ****       if (is_intmode()) {
ARM GAS  /tmp/ccadPcKu.s 			page 28


1228:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1229:src/display.c **** 	  set_dig(i, *p);
1230:src/display.c **** 	  i += SEGS_PER_DIGIT;
1231:src/display.c **** 	}
1232:src/display.c **** 	carry_overflow();
1233:src/display.c ****       } else {
1234:src/display.c **** 	set_separator_decimal_modes();
1235:src/display.c **** 
1236:src/display.c **** 	i = 0;
1237:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1238:src/display.c **** 	if ( CmdLineDot > 1 ) {
1239:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1240:src/display.c **** 	  const
1241:src/display.c **** #  endif
1242:src/display.c **** 	    int double_dot = 0;
1243:src/display.c **** 	  int j;
1244:src/display.c **** 
1245:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1246:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1247:src/display.c **** 	      gotdot = j;
1248:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1249:src/display.c **** 	      double_dot = (p[j+1] == '.');
1250:src/display.c **** #  endif
1251:src/display.c **** 	    }
1252:src/display.c **** 	  }
1253:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1254:src/display.c **** 	  if (j > 0) {
1255:src/display.c **** 	    p += j + 1;
1256:src/display.c **** 	    i = SEGS_PER_DIGIT;
1257:src/display.c **** 	    if (gotdot <= j) {
1258:src/display.c **** 	      gotdot = 0;
1259:src/display.c **** 	      if (double_dot)
1260:src/display.c **** 		p++;
1261:src/display.c **** 	    }
1262:src/display.c **** 	    else if (*p == '.') {
1263:src/display.c **** 	      gotdot = 0;
1264:src/display.c **** 	      p++;
1265:src/display.c **** 	      if (!double_dot)
1266:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1267:src/display.c **** 	    }
1268:src/display.c **** 	    else gotdot = -1;
1269:src/display.c **** 	    set_dig(0, '<');
1270:src/display.c **** 	    overflow_to_left = 1;
1271:src/display.c **** 	  }
1272:src/display.c **** 	  else gotdot = -1;
1273:src/display.c **** 	}
1274:src/display.c **** #endif
1275:src/display.c **** 
1276:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1277:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1278:src/display.c **** 	       && *p != 'D'
1279:src/display.c **** #endif
1280:src/display.c **** 	       ; p++) {
1281:src/display.c **** 	  if (*p == '.') {
1282:src/display.c **** 	    if (gotdot < 0)
1283:src/display.c **** 	      gotdot = i;
1284:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
ARM GAS  /tmp/ccadPcKu.s 			page 29


1285:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1286:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1287:src/display.c **** 	      if ( *(p+1) == '.' ) {
1288:src/display.c **** 		p++;
1289:src/display.c **** 	      }
1290:src/display.c **** #  else
1291:src/display.c **** 	      if ( i != gotdot ) {
1292:src/display.c **** #  endif
1293:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1294:src/display.c **** 		i += segs_per_digit;
1295:src/display.c **** 	      }
1296:src/display.c **** 	      else {
1297:src/display.c **** 		if ( CmdLineDot > 1 ) {
1298:src/display.c **** 		  i += segs_per_digit;
1299:src/display.c **** 		}
1300:src/display.c **** 		else {
1301:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1302:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1303:src/display.c **** 		}
1304:src/display.c **** 	      }
1305:src/display.c **** #else
1306:src/display.c **** 	      if (i > 0)
1307:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1308:src/display.c **** 	      else {
1309:src/display.c **** 		set_dig(i, '0');
1310:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1311:src/display.c **** 		i += segs_per_digit;
1312:src/display.c **** 	      }
1313:src/display.c **** #endif
1314:src/display.c **** 	    } else {
1315:src/display.c **** 	      set_dig(i, *p);
1316:src/display.c **** 	      i += segs_per_digit;
1317:src/display.c **** 	    }
1318:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1319:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1320:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1321:src/display.c **** #endif
1322:src/display.c **** 	  }
1323:src/display.c **** 
1324:src/display.c **** 	  /* Implement a floating comma */
1325:src/display.c **** 	  if (gotdot < 0)
1326:src/display.c **** 	    gotdot = i;
1327:src/display.c **** 	  for (;;) {
1328:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1329:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1330:src/display.c **** 	      break;
1331:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1332:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1333:src/display.c **** 	      break;
1334:src/display.c **** #endif
1335:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1336:src/display.c **** 	  }
1337:src/display.c **** 
1338:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1339:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1340:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1341:src/display.c **** 	    int flags = 8;
ARM GAS  /tmp/ccadPcKu.s 			page 30


1342:src/display.c **** #  else
1343:src/display.c **** 	    int flags = 12;
1344:src/display.c **** #  endif
1345:src/display.c **** 
1346:src/display.c **** 	    if (*p == 'D')
1347:src/display.c **** 	      flags |= 2;
1348:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1349:src/display.c **** 	      flags |= 16;
1350:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1351:src/display.c **** 	  }
1352:src/display.c **** #else
1353:src/display.c **** 	  if (*p == 'E') {
1354:src/display.c **** 	    p++;
1355:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1356:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1357:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1358:src/display.c **** #  else
1359:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1360:src/display.c **** #  endif
1361:src/display.c **** 	  } 
1362:src/display.c **** #endif
1363:src/display.c **** 	}
1364:src/display.c ****       }
1365:src/display.c **** 
1366:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1367:src/display.c **** 
1368:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1369:src/display.c **** 	const int ws = word_size();
1370:src/display.c **** 	unsigned int b;
1371:src/display.c **** 	long long int vs = value;
1372:src/display.c **** 	unsigned long long int v;
1373:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1374:src/display.c **** 	int i, j, k;
1375:src/display.c **** 	int sign = 0;
1376:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1377:src/display.c **** 
1378:src/display.c **** 	switch (State2.smode) {
1379:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1380:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1381:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1382:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1383:src/display.c **** 	default:	b = int_base();	break;
1384:src/display.c **** 	}
1385:src/display.c **** 
1386:src/display.c **** 	if (!res) {
1387:src/display.c **** 	  IntMaxWindow = 0;
1388:src/display.c **** 	  carry_overflow();
1389:src/display.c **** 	}
1390:src/display.c **** 
1391:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1392:src/display.c **** 	  v = extract_value(value, &sign);
1393:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1394:src/display.c **** 	    v = value;
1395:src/display.c **** 	  if (v == 0) {
1396:src/display.c **** 	    if (sign)
1397:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1398:src/display.c **** 	    set_dig_s(dig, '0', res);
ARM GAS  /tmp/ccadPcKu.s 			page 31


1399:src/display.c **** 	    return;
1400:src/display.c **** 	  } else
1401:src/display.c **** 	    for (i=0; v != 0; i++) {
1402:src/display.c **** 	      const int r = v % b;
1403:src/display.c **** 	      v /= b;
1404:src/display.c **** 	      buf[i] = DIGITS[r];
1405:src/display.c **** 	    }
1406:src/display.c **** 	} else {
1407:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1408:src/display.c **** 	  if (ws < 64) {
1409:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1410:src/display.c **** 	    vs &= mask;
1411:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1412:src/display.c **** 	      vs |= ~mask;
1413:src/display.c **** 	  }
1414:src/display.c **** 
1415:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1416:src/display.c **** 	    set_dig_s(dig, '0', res);
1417:src/display.c **** 	    return;
1418:src/display.c **** 	  } else if (!UState.leadzero) {
1419:src/display.c **** 	    v = (unsigned long long int)vs;
1420:src/display.c **** 	    for (i=0; v != 0; i++) {
1421:src/display.c **** 	      const int r = v % b;
1422:src/display.c **** 	      v /= b;
1423:src/display.c **** 	      buf[i] = DIGITS[r];
1424:src/display.c **** 	    }
1425:src/display.c **** 	  } else {
1426:src/display.c **** 	    int n;
1427:src/display.c **** 	    const unsigned int b1 = b >> 1;
1428:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1429:src/display.c **** 	    v = (unsigned long long int)vs;
1430:src/display.c **** 
1431:src/display.c **** 	    n = (ws + fac) / (fac+1);
1432:src/display.c **** 	    for (i=0; i<n; i++) {
1433:src/display.c **** 	      const int r = v % b;
1434:src/display.c **** 	      v /= b;
1435:src/display.c **** 	      buf[i] = DIGITS[r];
1436:src/display.c **** 	    }
1437:src/display.c **** 	  }
1438:src/display.c **** 	}
1439:src/display.c **** #ifdef BIGGER_DISPLAY
1440:src/display.c **** #define MAX_INT_Y_DIG 13
1441:src/display.c **** #else
1442:src/display.c **** #define MAX_INT_Y_DIG 7
1443:src/display.c **** #endif
1444:src/display.c **** 	/* At this point i is the number of digits in the output */
1445:src/display.c **** 	int nd = i;
1446:src/display.c **** 	if (res) {
1447:src/display.c **** 	  if (sign) *res++ = '-';
1448:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1449:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1450:src/display.c **** 	      *res++ = buf[i];
1451:src/display.c **** 	    *res++ = '.';
1452:src/display.c **** 	    *res++ = '.';
1453:src/display.c **** 	  }
1454:src/display.c **** 	  else {
1455:src/display.c **** 	    while (--i >= 0)
ARM GAS  /tmp/ccadPcKu.s 			page 32


1456:src/display.c **** 	      *res++ = buf[i];
1457:src/display.c **** 	  }
1458:src/display.c **** 	} else {
1459:src/display.c **** #if 0
1460:src/display.c **** 	  set_separator_decimal_modes();
1461:src/display.c **** 
1462:src/display.c **** 	  // Allows configuration of digit grouping per base
1463:src/display.c **** 	  static const char grouping[] = 
1464:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1465:src/display.c **** 		    //	   2     3     4     5     6     7     8
1466:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1467:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1468:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1469:src/display.c **** 	    : grouping[b - 2] >> 4;
1470:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1471:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1472:src/display.c **** #else
1473:src/display.c **** 	  // Less flexible but shorter
1474:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1475:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1476:src/display.c **** 	    : b == 16 ? 2 : 3;
1477:src/display.c **** 	  set_separator_decimal_modes();
1478:src/display.c **** #endif
1479:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1480:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1481:src/display.c **** 	    State2.window = 0;
1482:src/display.c **** 	  buf[i] = '\0';
1483:src/display.c **** 
1484:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1485:src/display.c **** 	  for (k = 0; k < 12; k++)
1486:src/display.c **** 	    if (buf[j + k] == '\0')
1487:src/display.c **** 	      break;
1488:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1489:src/display.c **** 	    int ch = buf[j++];
1490:src/display.c **** 	    if (i >= shift)
1491:src/display.c **** 	      ch -= 030;
1492:src/display.c **** 	    set_dig(dig, ch);
1493:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1494:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1495:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1496:src/display.c **** 	  }
1497:src/display.c **** 	  if (sign) {
1498:src/display.c **** 	    if (dig >= 0)
1499:src/display.c **** 	      set_dig(dig, '-');
1500:src/display.c **** 	    else	SET_MANT_SIGN;
1501:src/display.c **** 	  }
1502:src/display.c **** 	}
1503:src/display.c ****       }
1504:src/display.c **** 
1505:src/display.c ****       /* Handle special cases.
1506:src/display.c ****        * return non-zero if the number is special.
1507:src/display.c ****        */
1508:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1509:src/display.c **** 	if (decNumberIsSpecial(x)) {
1510:src/display.c **** 	  if (decNumberIsNaN(x)) {
1511:src/display.c **** 	    if (res) {
1512:src/display.c **** 	      scopy(res, "NaN");
ARM GAS  /tmp/ccadPcKu.s 			page 33


1513:src/display.c **** 	    } else {
1514:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1515:src/display.c **** #ifndef REALBUILD
1516:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1517:src/display.c **** 	      forceDispPlot=0;
1518:src/display.c **** #endif
1519:src/display.c **** 	    }
1520:src/display.c **** 	    return 1;
1521:src/display.c **** 	  } else {
1522:src/display.c **** 	    if (decNumberIsNegative(x)) {
1523:src/display.c **** 	      if (res) *res++ = '-';
1524:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1525:src/display.c **** 	    }
1526:src/display.c **** 	    if (res)
1527:src/display.c **** 	      *res++ = '\237';
1528:src/display.c **** 	    else {
1529:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1530:src/display.c **** #ifndef REALBUILD
1531:src/display.c **** 	      if (decNumberIsNegative(x)) {
1532:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1533:src/display.c **** 	      }
1534:src/display.c **** 	      else {
1535:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1536:src/display.c **** 	      }
1537:src/display.c **** 	      forceDispPlot=0;
1538:src/display.c **** #endif
1539:src/display.c **** 	    }
1540:src/display.c **** 	    return 1;
1541:src/display.c **** 	  }
1542:src/display.c **** 	}
1543:src/display.c **** 	return 0;
1544:src/display.c ****       }
1545:src/display.c **** 
1546:src/display.c **** 
1547:src/display.c ****       /* Extract the two lowest integral digits from the number
1548:src/display.c ****        */
1549:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1550:src/display.c **** 	decNumber n;
1551:src/display.c **** 
1552:src/display.c **** 	decNumberMod(&n, x, &const_100);
1553:src/display.c **** 	*v = dn_to_int(&n);
1554:src/display.c **** 	dn_mulpow10(&n, x, -2);
1555:src/display.c **** 	decNumberTrunc(res, &n);
1556:src/display.c ****       }
1557:src/display.c **** 
1558:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1558 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1559:src/display.c **** 	char b[32];
 276              		.loc 1 1559 2 view .LVU78
1560:src/display.c **** 	int i, j;
 277              		.loc 1 1560 2 view .LVU79
1561:src/display.c **** 
1562:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1562 2 view .LVU80
ARM GAS  /tmp/ccadPcKu.s 			page 34


 279              		.loc 1 1562 12 view .LVU81
1558:src/display.c **** 	char b[32];
 280              		.loc 1 1558 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1563:src/display.c **** 	  if (v == 0)
1564:src/display.c **** 	    b[i] = spaces?' ':'0';
1565:src/display.c **** 	  else {
1566:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1566 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1558:src/display.c **** 	char b[32];
 292              		.loc 1 1558 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1558:src/display.c **** 	char b[32];
 295              		.loc 1 1558 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1562:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1562 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1563:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1563 4 is_stmt 1 view .LVU87
 303              		.loc 1 1566 6 view .LVU88
 304              		.loc 1 1566 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1567:src/display.c **** 	    v /= 10;
 311              		.loc 1 1567 6 is_stmt 1 view .LVU90
1568:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1568 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1562:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1562 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1563:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1563 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1562:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1562 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1568 11 view .LVU95
ARM GAS  /tmp/ccadPcKu.s 			page 35


 322 0028 0CF8014B 		strb	r4, [ip], #1
1567:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1567 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1568 6 is_stmt 1 view .LVU97
1562:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1562 17 view .LVU98
1562:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1562 12 view .LVU99
1562:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1562 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1562:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1562 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1562:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1562 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1563:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1563 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1564:src/display.c **** 	  else {
 349              		.loc 1 1564 6 is_stmt 1 view .LVU104
1562:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1562 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1562:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1562 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1564:src/display.c **** 	  else {
 355              		.loc 1 1564 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1562:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1562 17 is_stmt 1 view .LVU108
1562:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1562 12 view .LVU109
1562:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1562 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1562:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/ccadPcKu.s 			page 36


 364              		.loc 1 1562 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1569:src/display.c **** 	  }
1570:src/display.c **** 	}
1571:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1571 2 is_stmt 1 view .LVU112
 371              		.loc 1 1571 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1572:src/display.c **** 	  b[0] = '0';
1573:src/display.c **** 
1574:src/display.c **** 	/* Copy across and appropriately leading space things
1575:src/display.c **** 	 */
1576:src/display.c **** 	j = *jin;
 374              		.loc 1 1576 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1571:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1571 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1572:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1572 4 is_stmt 1 view .LVU116
1572:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1572 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1576 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1577:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1577 2 view .LVU119
 386              		.loc 1 1577 8 view .LVU120
1576:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1576 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1577 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1578:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1578 4 is_stmt 1 view .LVU123
 395              	.LBB172:
 396              	.LBB173:
 405:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 405 12 view .LVU124
 398              	.LBE173:
 399              	.LBE172:
 400              		.loc 1 1578 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB177:
 403              	.LBB174:
 405:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 405 16 view .LVU126
ARM GAS  /tmp/ccadPcKu.s 			page 37


 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 405:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 405 16 view .LVU127
 408              	.LBE174:
 409              	.LBI172:
 404:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 404 14 is_stmt 1 view .LVU128
 411              	.LBB175:
 405:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 405 3 view .LVU129
 405:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 405 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 405:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 405 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 405:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 405 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 407:src/display.c **** }
 423              		.loc 1 407 3 is_stmt 1 view .LVU133
 407:src/display.c **** }
 424              		.loc 1 407 3 is_stmt 0 view .LVU134
 425              	.LBE175:
 426              	.LBE177:
1579:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1579 4 is_stmt 1 view .LVU135
1577:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1577 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1579 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1577:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1577 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1580:src/display.c **** 	}
1581:src/display.c **** 	*jin = j;
 436              		.loc 1 1581 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1581 2 is_stmt 1 view .LVU140
 440              		.loc 1 1581 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1582:src/display.c **** 	return str;
1583:src/display.c ****       }
 443              		.loc 1 1583 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1581:src/display.c **** 	return str;
 445              		.loc 1 1581 7 view .LVU143
ARM GAS  /tmp/ccadPcKu.s 			page 38


 446 0094 3E60     		str	r6, [r7]
1582:src/display.c **** 	return str;
 447              		.loc 1 1582 2 is_stmt 1 view .LVU144
 448              		.loc 1 1583 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB178:
 458              	.LBB176:
 406:src/display.c ****   return res;
 459              		.loc 1 406 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 406:src/display.c ****   return res;
 463              		.loc 1 406 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE176:
 470              	.LBE178:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 422:src/display.c ****   int i;
 485              		.loc 1 422 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 423 3 view .LVU149
 424:src/display.c **** 
 490              		.loc 1 424 3 view .LVU150
 422:src/display.c ****   int i;
 491              		.loc 1 422 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
ARM GAS  /tmp/ccadPcKu.s 			page 39


 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 424:src/display.c **** 
 500              		.loc 1 424 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 426 3 is_stmt 1 view .LVU153
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 426 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB179:
 513              	.LBB180:
 406:src/display.c ****   return res;
 514              		.loc 1 406 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 405:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 405 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 405:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 405 19 view .LVU157
 523              	.LBE180:
 524              	.LBE179:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 426 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB186:
 528              	.LBB181:
 405:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 405 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 407:src/display.c **** }
 532              		.loc 1 407 3 is_stmt 1 view .LVU160
 407:src/display.c **** }
 533              		.loc 1 407 3 is_stmt 0 view .LVU161
 534              	.LBE181:
 535              	.LBE186:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 426 36 is_stmt 1 view .LVU162
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 426 13 view .LVU163
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 426 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
ARM GAS  /tmp/ccadPcKu.s 			page 40


 427:src/display.c **** }
 542              		.loc 1 427 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB187:
 544              	.LBB182:
 405:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 405 12 discriminator 3 view .LVU166
 405:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 405 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE182:
 548              	.LBE187:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 426 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB188:
 553              	.LBB183:
 405:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 405 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 405:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 405 16 discriminator 3 view .LVU170
 558              	.LBE183:
 559              	.LBI179:
 404:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 404 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB184:
 405:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 405 3 discriminator 3 view .LVU172
 563              	.LBE184:
 564              	.LBE188:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 426 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB189:
 569              	.LBB185:
 405:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 405 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 406:src/display.c ****   return res;
 573              		.loc 1 406 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 407:src/display.c **** }
 578              		.loc 1 407 3 view .LVU176
 407:src/display.c **** }
 579              		.loc 1 407 3 is_stmt 0 view .LVU177
 580              	.LBE185:
 581              	.LBE189:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 426 36 is_stmt 1 view .LVU178
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 426 13 view .LVU179
ARM GAS  /tmp/ccadPcKu.s 			page 41


 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 426 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 428:src/display.c **** 
 589              		.loc 1 428 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 428:src/display.c **** 
 591              		.loc 1 428 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1549:src/display.c **** 	decNumber n;
 606              		.loc 1 1549 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1550:src/display.c **** 
 610              		.loc 1 1550 2 view .LVU184
1552:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1552 2 view .LVU185
1549:src/display.c **** 	decNumber n;
 612              		.loc 1 1549 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1549:src/display.c **** 	decNumber n;
 621              		.loc 1 1549 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1552:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1552 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1552:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1552 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1549:src/display.c **** 	decNumber n;
 630              		.loc 1 1549 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
ARM GAS  /tmp/ccadPcKu.s 			page 42


1552:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1552 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1553:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1553 2 is_stmt 1 view .LVU192
1553:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1553 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1554:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1554 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1553:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1553 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1554:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1554 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1555:src/display.c ****       }
 649              		.loc 1 1555 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1556:src/display.c **** 
 654              		.loc 1 1556 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1556:src/display.c **** 
 661              		.loc 1 1556 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1584:src/display.c **** 
1585:src/display.c **** 
1586:src/display.c ****       /* Display the number in H.MS mode.
ARM GAS  /tmp/ccadPcKu.s 			page 43


1587:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1588:src/display.c ****        */
1589:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1590:src/display.c **** 	decNumber x, y, a, t, u;
1591:src/display.c **** 	int j=0;
1592:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1593:src/display.c **** 	unsigned int hr, min, sec, fs;
1594:src/display.c **** 
1595:src/display.c **** 	if (check_special_dn(rgx, res)) {
1596:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1597:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1598:src/display.c **** 	  return;
1599:src/display.c **** 	}
1600:src/display.c **** 
1601:src/display.c **** 	set_separator_decimal_modes();
1602:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1603:src/display.c **** 	dn_abs(&a, rgx);
1604:src/display.c **** 	if (decNumberIsNegative(&x)) {
1605:src/display.c **** 	  if (res != NULL)
1606:src/display.c **** 	    *res++ += '-';
1607:src/display.c **** 	  else
1608:src/display.c **** 	    SET_MANT_SIGN;
1609:src/display.c **** 	  dn_minus(&x, &x);
1610:src/display.c **** 	}
1611:src/display.c **** 
1612:src/display.c **** 	decNumberHR2HMS(&y, &x);
1613:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1614:src/display.c **** 	decNumberRound(&u, &t);
1615:src/display.c **** 
1616:src/display.c **** 	hms_step(&t, &u, &fs);
1617:src/display.c **** 	hms_step(&u, &t, &sec);
1618:src/display.c **** 	hms_step(&t, &u, &min);
1619:src/display.c **** 	hr = dn_to_int(&t);
1620:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1621:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1622:src/display.c **** 
1623:src/display.c **** 	// degrees
1624:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1625:src/display.c **** 	res = set_dig_s(j, '@', res);
1626:src/display.c **** 	j += SEGS_PER_DIGIT;
1627:src/display.c **** 
1628:src/display.c **** 	// minutes
1629:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1630:src/display.c **** 	res = set_dig_s(j, '\'', res);
1631:src/display.c **** 	j += SEGS_PER_DIGIT;
1632:src/display.c **** 
1633:src/display.c **** 	// seconds
1634:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1635:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1636:src/display.c **** 
1637:src/display.c **** 	// Fractional seconds
1638:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1639:src/display.c **** 
1640:src/display.c **** 	// We're now pointing at the exponent's first digit...
1641:src/display.c **** 	res = set_dig_s(j, '"', res);
1642:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1643:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 44


1644:src/display.c **** 	// Check for values too big or small
1645:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1646:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1647:src/display.c **** 	} else if (! dn_eq0(&a)) {
1648:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1649:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1650:src/display.c **** 	  }
1651:src/display.c **** 	}
1652:src/display.c ****       }
1653:src/display.c **** 
1654:src/display.c **** 
1655:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1656:src/display.c **** 	decNumber x, w, n, d, t;
1657:src/display.c **** 	char buf[32], *p = buf;
1658:src/display.c **** 	int j;
1659:src/display.c **** 
1660:src/display.c **** 	if (check_special_dn(rgx, res))
1661:src/display.c **** 	  return 1;
1662:src/display.c **** 	dn_abs(&x, rgx);
1663:src/display.c **** 	if (dn_ge(&x, &const_100000))
1664:src/display.c **** 	  return 0;
1665:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1666:src/display.c **** 	  return 0;
1667:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1668:src/display.c **** 	  if (res != NULL)
1669:src/display.c **** 	    *res++ += '-';
1670:src/display.c **** 	  else
1671:src/display.c **** 	    SET_MANT_SIGN;
1672:src/display.c **** 	}
1673:src/display.c **** 	decNumberFrac(&w, &x);
1674:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1675:src/display.c **** 
1676:src/display.c **** 	dn_divide(&t, &n, &d);
1677:src/display.c **** 	dn_compare(&t, &t, &w);
1678:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1679:src/display.c **** 
1680:src/display.c **** 	if (dn_eq(&n, &d)) {
1681:src/display.c **** 	  dn_inc(&w);
1682:src/display.c **** 	  decNumberZero(&n);
1683:src/display.c **** 	}
1684:src/display.c **** 
1685:src/display.c **** 	if (!UState.improperfrac) {
1686:src/display.c **** 	  if (!dn_eq0(&w)) {
1687:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1688:src/display.c **** 	    *p++ = ' ';
1689:src/display.c **** 	  }
1690:src/display.c **** 	} else {
1691:src/display.c **** 	  dn_multiply(&x, &w, &d);
1692:src/display.c **** 	  dn_add(&n, &n, &x);
1693:src/display.c **** 	}
1694:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1695:src/display.c **** 	*p++ = '/';
1696:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1697:src/display.c **** 	*p = '\0';
1698:src/display.c **** 	if ((p - 12) > buf) {
1699:src/display.c **** 	  p -= 12;
1700:src/display.c **** 	  *p = '<';
ARM GAS  /tmp/ccadPcKu.s 			page 45


1701:src/display.c **** 	} else	p = buf;
1702:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1703:src/display.c **** 	  res = set_dig_s(j, *p, res);
1704:src/display.c **** 	  j += SEGS_PER_DIGIT;
1705:src/display.c **** 	}
1706:src/display.c **** 
1707:src/display.c **** 	if (dn_eq0(&t))
1708:src/display.c **** 	  p = (char *)S7_fract_EQ;
1709:src/display.c **** 	else if (decNumberIsNegative(&t))
1710:src/display.c **** 	  p = (char *)S7_fract_LT;
1711:src/display.c **** 	else
1712:src/display.c **** 	  p = (char *)S7_fract_GT;
1713:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1714:src/display.c **** 	  res = set_dig_s(j, *p, res);
1715:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1716:src/display.c **** 	}
1717:src/display.c **** 	return 1;
1718:src/display.c ****       }
1719:src/display.c **** 
1720:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1721:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1722:src/display.c **** 	decNumber c;
1723:src/display.c **** 	int true_exp, x=0;
1724:src/display.c **** 	int min_pos_exp, max_neg_exp;
1725:src/display.c **** 
1726:src/display.c **** 	if ( mode != MODE_STD ) {
1727:src/display.c **** 	  min_pos_exp = 9;
1728:src/display.c **** 	  max_neg_exp = -5;
1729:src/display.c **** 	}
1730:src/display.c **** 	else {
1731:src/display.c **** 	  min_pos_exp = 12;
1732:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1733:src/display.c **** 	}
1734:src/display.c **** 
1735:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1736:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1737:src/display.c **** 
1738:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1739:src/display.c **** 	  x = *dd;
1740:src/display.c **** 	}
1741:src/display.c **** 
1742:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1743:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1744:src/display.c **** 	  *dd += -true_exp;
1745:src/display.c **** 	  return MODE_FIX;
1746:src/display.c **** 	}
1747:src/display.c **** 
1748:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1749:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1750:src/display.c **** 	}
1751:src/display.c **** 	else {
1752:src/display.c **** 	  return MODE_STD;
1753:src/display.c **** 	}
1754:src/display.c ****       }
1755:src/display.c **** #else
1756:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1757:src/display.c **** 	decNumber b, c;
ARM GAS  /tmp/ccadPcKu.s 			page 46


1758:src/display.c **** 
1759:src/display.c **** 	dn_1(&b);
1760:src/display.c **** 	b.exponent -= UState.dispdigs;
1761:src/display.c **** 	dn_abs(&c, z);
1762:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1763:src/display.c **** 	  return MODE_FIX;
1764:src/display.c **** 	return MODE_STD;
1765:src/display.c ****       }
1766:src/display.c **** #endif
1767:src/display.c **** 
1768:src/display.c ****       /* SHOW display mode
1769:src/display.c ****        * in double precision show left or right part
1770:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1771:src/display.c ****        */
1772:src/display.c ****       static void show_x(char *x, int exp) {
1773:src/display.c **** 	const int dbl = is_dblmode();
1774:src/display.c **** 	char *p;
1775:src/display.c **** 	int i, j;
1776:src/display.c **** 	char *upper_str;
1777:src/display.c **** 	enum separator_modes separator_mode;
1778:src/display.c **** 	char decimal_mark;
1779:src/display.c **** 	char thousands_sep;
1780:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1781:src/display.c **** 	const int grouping = 0;
1782:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1783:src/display.c **** 	const int grouping = !UState.nothousands;
1784:src/display.c **** #else
1785:src/display.c **** 	const int grouping = 1;
1786:src/display.c **** #endif
1787:src/display.c **** 	int negative;
1788:src/display.c **** 
1789:src/display.c **** 	if (x[0] == '-') {
1790:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1791:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1792:src/display.c **** 
1793:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1794:src/display.c **** 	  xcopy(x, small_minus, 4);
1795:src/display.c **** 	  x += 4;
1796:src/display.c **** 	  negative = 4;
1797:src/display.c **** #else
1798:src/display.c **** 	  ++x;
1799:src/display.c **** 	  negative = 1;
1800:src/display.c **** #endif
1801:src/display.c **** 	}
1802:src/display.c **** 	else negative = 0;
1803:src/display.c **** 
1804:src/display.c **** 	p = find_char(x, '\0');
1805:src/display.c **** 	xset(p, '0', 34 - (p - x));
1806:src/display.c **** 
1807:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1808:src/display.c **** 	  separator_mode = SEP_COMMA;
1809:src/display.c **** 	  decimal_mark = '.';
1810:src/display.c **** 	  thousands_sep = ',';
1811:src/display.c **** 	}
1812:src/display.c **** 	else {
1813:src/display.c **** 	  separator_mode = SEP_DOT;
1814:src/display.c **** 	  decimal_mark = ',';
ARM GAS  /tmp/ccadPcKu.s 			page 47


1815:src/display.c **** 	  thousands_sep = '.';
1816:src/display.c **** 	}
1817:src/display.c **** 
1818:src/display.c **** 	if (State2.window) { // right half in double precision mode
1819:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1820:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1821:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1822:src/display.c **** 
1823:src/display.c **** 	  upper_str = x + 3;
1824:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1825:src/display.c **** 	  if (grouping) {
1826:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1827:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1828:src/display.c **** 	    x += 3 + 13 + 7;
1829:src/display.c **** 	  }
1830:src/display.c **** 	  else x += 3 + 13 + 6;
1831:src/display.c **** #else
1832:src/display.c **** 	  upper_str = x + 13;
1833:src/display.c **** 	  xset(upper_str, '.', 3);
1834:src/display.c **** 	  if (grouping) {
1835:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1836:src/display.c **** 	    upper_str[6] = thousands_sep;
1837:src/display.c **** 	    x += 13 + 3 + 7;
1838:src/display.c **** 	  }
1839:src/display.c **** 	  else x += 13 + 3 + 6;
1840:src/display.c **** #endif
1841:src/display.c **** 	  negative = 0;
1842:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1843:src/display.c **** 	}
1844:src/display.c **** 	else {
1845:src/display.c **** 	  upper_str = x;
1846:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1847:src/display.c **** 	  x[1] = decimal_mark;
1848:src/display.c **** 	  if (grouping) {
1849:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1850:src/display.c **** 	    x[5] = thousands_sep;
1851:src/display.c **** 	    x += 9;
1852:src/display.c **** 	  }
1853:src/display.c **** 	  else x += 8;
1854:src/display.c **** 	  if (dbl) {
1855:src/display.c **** 	    if (exp < 0) {
1856:src/display.c **** 	      x[9] = '-';
1857:src/display.c **** 	      exp = -exp;
1858:src/display.c **** 	    }
1859:src/display.c **** 	    else
1860:src/display.c **** 	      x[9] = ' ';
1861:src/display.c **** 	    j = exp / 1000;
1862:src/display.c **** 	    x[10] = '0' + j;
1863:src/display.c **** 	    exp -= 1000 * j;
1864:src/display.c **** 	  }
1865:src/display.c **** 	  else {
1866:src/display.c **** 	    x[9] = '\0';
1867:src/display.c **** 	    x[10] = '\0';
1868:src/display.c **** 	  }
1869:src/display.c **** 	  xcopy(x + 1, x, 11);
1870:src/display.c **** 	  *x = 0;
1871:src/display.c **** 	  set_exp(exp, 1, CNULL);
ARM GAS  /tmp/ccadPcKu.s 			page 48


1872:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1873:src/display.c **** 	}
1874:src/display.c **** 	if (grouping) {
1875:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1876:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1877:src/display.c **** 	  }
1878:src/display.c **** 	}
1879:src/display.c **** 
1880:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1881:src/display.c **** 	  set_dig(j, x[i]);
1882:src/display.c **** 
1883:src/display.c **** 	*x = '\0';
1884:src/display.c **** 	set_status(upper_str - negative);
1885:src/display.c ****       }
1886:src/display.c **** 
1887:src/display.c **** 
1888:src/display.c ****       /* Display the X register in the numeric portion of the display.
1889:src/display.c ****        * We have to account for the various display modes and numbers of
1890:src/display.c ****        * digits.
1891:src/display.c ****        */
1892:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1893:src/display.c **** 	decNumber z;
1894:src/display.c **** 	int digits = DISPLAY_DIGITS;
1895:src/display.c **** 
1896:src/display.c **** 	if (dbl)
1897:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1898:src/display.c **** 	else
1899:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1900:src/display.c **** 	set_x_dn(&z, res, &digits);
1901:src/display.c ****       }
1902:src/display.c **** 
1903:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1904:src/display.c **** 	char x[50], *obp = x;
1905:src/display.c **** 	int odig = 0;
1906:src/display.c **** 	int show_exp = 0;
1907:src/display.c **** 	int j;
1908:src/display.c **** 	char mantissa[64];
1909:src/display.c **** 	int exp = 0;
1910:src/display.c **** 	char *p = mantissa;
1911:src/display.c **** 	char *r;
1912:src/display.c **** 	const char *q;
1913:src/display.c **** 	int count, i;
1914:src/display.c **** 	int extra_digits = 0;
1915:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1916:src/display.c **** 	int dd;
1917:src/display.c **** 	int dispdigs;
1918:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1919:src/display.c **** #else
1920:src/display.c **** 	int dd = UState.dispdigs;
1921:src/display.c **** 	int mode = UState.dispmode;
1922:src/display.c **** #endif
1923:src/display.c **** 	int c;
1924:src/display.c **** 	int negative = 0;
1925:src/display.c **** 	int trimzeros = 0;
1926:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1927:src/display.c **** 	const int show_large_exponent = 0;
1928:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
ARM GAS  /tmp/ccadPcKu.s 			page 49


1929:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1930:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1931:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1932:src/display.c **** #else
1933:src/display.c **** 	const int show_large_exponent = 1;
1934:src/display.c **** #endif
1935:src/display.c **** 
1936:src/display.c **** 	set_separator_decimal_modes();
1937:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1938:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1939:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1940:src/display.c **** 	    if (State2.hms) {
1941:src/display.c **** 	      set_x_hms(z, res);
1942:src/display.c **** 	      return;
1943:src/display.c **** 	    }
1944:src/display.c **** 	    else if (UState.fract) {
1945:src/display.c **** 	      if (set_x_fract(z, res))
1946:src/display.c **** 		return;
1947:src/display.c **** 	    }
1948:src/display.c **** 	  }
1949:src/display.c **** 	}		
1950:src/display.c **** #else
1951:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1952:src/display.c **** 	  if (State2.hms) {
1953:src/display.c **** 	    set_x_hms(z, res);
1954:src/display.c **** 	    State2.hms = 0;
1955:src/display.c **** 	    return;
1956:src/display.c **** 	  } else if (UState.fract) {
1957:src/display.c **** 	    if (set_x_fract(z, res))
1958:src/display.c **** 	      return;
1959:src/display.c **** 	  }
1960:src/display.c **** 	}
1961:src/display.c **** #endif
1962:src/display.c **** 
1963:src/display.c **** 	if (check_special_dn(z, res))
1964:src/display.c **** 	  return;
1965:src/display.c **** 
1966:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1967:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1968:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1969:src/display.c **** 	  z->exponent = 0;
1970:src/display.c **** 	}
1971:src/display.c **** 
1972:src/display.c **** 	xset(x, '\0', sizeof(x));
1973:src/display.c **** 
1974:src/display.c **** 	if (dn_eq0(z)) {
1975:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1976:src/display.c **** 	    x[0] = '-';
1977:src/display.c **** 	    x[1] = '0';
1978:src/display.c **** 	  } else
1979:src/display.c **** 	    x[0] = '0';
1980:src/display.c **** 	} else
1981:src/display.c **** 	  decNumberToString(z, x);
1982:src/display.c **** 
1983:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1984:src/display.c **** 	  show_x(x, exp);
1985:src/display.c **** 	  return;
ARM GAS  /tmp/ccadPcKu.s 			page 50


1986:src/display.c **** 	}
1987:src/display.c **** 
1988:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1989:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1990:src/display.c **** 	  //  ALL mode: fill the display
1991:src/display.c **** 	  dd = *display_digits - 1;
1992:src/display.c **** 	else
1993:src/display.c **** 	  dd = dispdigs;
1994:src/display.c **** 
1995:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1996:src/display.c **** 	  int orig_mode = mode;
1997:src/display.c **** 
1998:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1999:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2000:src/display.c **** 	    // allow zeros to be trimmed
2001:src/display.c **** 	    trimzeros = 1;
2002:src/display.c **** 	  if (orig_mode == MODE_STD)
2003:src/display.c **** 	    dd = *display_digits - 1;
2004:src/display.c ****  	}
2005:src/display.c **** #else
2006:src/display.c **** 	if (mode == MODE_STD) {
2007:src/display.c **** 	  mode = std_round_fix(z);
2008:src/display.c **** 	  trimzeros = 1;
2009:src/display.c **** 	  dd = *display_digits - 1;
2010:src/display.c **** 	} else if (dd >= *display_digits)
2011:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2012:src/display.c **** 	  dd = *display_digits - 1;
2013:src/display.c **** #endif
2014:src/display.c **** 
2015:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2016:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2017:src/display.c **** 
2018:src/display.c **** 	q = find_char(x, 'E');
2019:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2020:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2021:src/display.c **** 	if (q == NULL) exp = 0;
2022:src/display.c **** 	else {
2023:src/display.c **** 	  exp = s_to_i(q+1);
2024:src/display.c **** 	  if (*q == 'D') exp = -exp;
2025:src/display.c **** 	}
2026:src/display.c **** #else
2027:src/display.c **** 	if (q == NULL) exp = 0;
2028:src/display.c **** 	else exp = s_to_i(q+1);
2029:src/display.c **** #endif
2030:src/display.c **** 
2031:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2032:src/display.c **** 	for (q=x; *q == ' '; q++);
2033:src/display.c **** 	if (!res) {
2034:src/display.c **** 	  CLR_EXP_SIGN;
2035:src/display.c **** 	  CLR_MANT_SIGN;
2036:src/display.c **** 	}
2037:src/display.c **** 	if (*q == '-') {
2038:src/display.c **** 	  negative = 1;
2039:src/display.c **** 	  q++;
2040:src/display.c **** 	} else if (*q == '+')
2041:src/display.c **** 	  q++;
2042:src/display.c **** 	for (; *q == '0'; q++);
ARM GAS  /tmp/ccadPcKu.s 			page 51


2043:src/display.c **** 	if (*q == '.') {
2044:src/display.c **** 	  do
2045:src/display.c **** 	    exp--;
2046:src/display.c **** 	  while (*++q == '0');
2047:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2048:src/display.c **** 	    *p++ = *q++;
2049:src/display.c **** 	} else {
2050:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2051:src/display.c **** 	    *p++ = *q++;
2052:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2053:src/display.c **** 	    *p++ = *q++;
2054:src/display.c **** 	    exp++;
2055:src/display.c **** 	  }
2056:src/display.c **** 	  if (*q == '.') {
2057:src/display.c **** 	    q++;
2058:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2059:src/display.c **** 	      *p++ = *q++;
2060:src/display.c **** 	  }
2061:src/display.c **** 	}
2062:src/display.c **** 
2063:src/display.c **** 	if (mode == MODE_FIX) {
2064:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2065:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2066:src/display.c **** 	  else {
2067:src/display.c **** 	    extra_digits = exp;
2068:src/display.c **** 	    /* We might have push the fixed decimals off the
2069:src/display.c **** 	     * screen so adjust if so.
2070:src/display.c **** 	     */
2071:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2072:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2073:src/display.c **** 	  }
2074:src/display.c **** 	}
2075:src/display.c **** 
2076:src/display.c **** 	// Round the mantissa to the number of digits desired
2077:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2078:src/display.c **** 	if (*p >= '5') {	// Round up
2079:src/display.c **** 	  *p = '0';
2080:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2081:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2082:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2083:src/display.c **** 	    mantissa[0] = '1';
2084:src/display.c **** 	    exp++;
2085:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2086:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2087:src/display.c **** 	      extra_digits = 0;
2088:src/display.c **** 	    }
2089:src/display.c **** 	  } else {
2090:src/display.c **** 	    while (*--p == '9')
2091:src/display.c **** 	      *p = '0';
2092:src/display.c **** 	    (*p)++;
2093:src/display.c **** 	  }
2094:src/display.c **** 	}
2095:src/display.c **** 
2096:src/display.c **** 	// Zap what is left
2097:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2098:src/display.c **** 
2099:src/display.c **** 	p = mantissa;
ARM GAS  /tmp/ccadPcKu.s 			page 52


2100:src/display.c **** 	switch (mode) {
2101:src/display.c **** 	default:
2102:src/display.c **** 	case MODE_STD:   
2103:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2104:src/display.c **** 	  if (count != *display_digits)
2105:src/display.c **** 	    count++;
2106:src/display.c **** 	  // Too big or too small to fit on display
2107:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2108:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2109:src/display.c **** 	    case -1:
2110:src/display.c **** 	    case 2:
2111:src/display.c **** 	      *obp++ = *p++;
2112:src/display.c **** 	      odig++;
2113:src/display.c **** 	      dd--;
2114:src/display.c **** 	      exp--;
2115:src/display.c **** 	    case -2:
2116:src/display.c **** 	    case 1:
2117:src/display.c **** 	      *obp++ = *p++;
2118:src/display.c **** 	      odig++;
2119:src/display.c **** 	      dd--;
2120:src/display.c **** 	      exp--;
2121:src/display.c **** 	    case 0:
2122:src/display.c **** 	      ;
2123:src/display.c **** 	    };
2124:src/display.c **** 	    *obp++ = *p++;
2125:src/display.c **** 	    odig++;
2126:src/display.c **** 	    *obp++ = '.';
2127:src/display.c **** 	    for (i=1; i<count; i++) {
2128:src/display.c **** 	      *obp++ = *p++;
2129:src/display.c **** 	      odig++;
2130:src/display.c **** 	    }
2131:src/display.c **** 	    show_exp = 1;
2132:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2133:src/display.c **** 	    for(i=0; i<=exp; i++) {
2134:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2135:src/display.c **** 		*obp++ = ',';
2136:src/display.c **** 	      *obp++ = *p++;
2137:src/display.c **** 	      odig++;
2138:src/display.c **** 	    }
2139:src/display.c **** 	    *obp++ = '.';
2140:src/display.c **** 	    if (count > (exp + 1)) {
2141:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2142:src/display.c **** 		*obp++ = *p++;
2143:src/display.c **** 		odig++;
2144:src/display.c **** 	      }
2145:src/display.c **** 	    }
2146:src/display.c **** 	  } else {		// All digits to right of decimal point
2147:src/display.c **** 	    *obp++ = '0';
2148:src/display.c **** 	    odig++;
2149:src/display.c **** 	    *obp++ = '.';
2150:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2151:src/display.c **** 	      *obp++ = '0';
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	    }
2154:src/display.c **** 	    for (i=0; i<count; i++) {
2155:src/display.c **** 	      *obp++ = *p++;
2156:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccadPcKu.s 			page 53


2157:src/display.c **** 	    }
2158:src/display.c **** 	  }
2159:src/display.c **** 	  break;
2160:src/display.c **** 
2161:src/display.c **** 	case MODE_FIX:
2162:src/display.c **** 	  j = 0;
2163:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2164:src/display.c **** 	    for (i=0; i<=exp; i++) {
2165:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2166:src/display.c **** 		*obp++ = ',';
2167:src/display.c **** 	      *obp++ = *p++;
2168:src/display.c **** 	      odig++;
2169:src/display.c **** 	    }
2170:src/display.c **** 	    *obp++ = '.';
2171:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2172:src/display.c **** 	      *obp++ = *p++;
2173:src/display.c **** 	      odig++;
2174:src/display.c **** 	    }
2175:src/display.c **** 	  } else {		// All digits to right of decimal point
2176:src/display.c **** 	    *obp++ = '0';
2177:src/display.c **** 	    odig++;
2178:src/display.c **** 	    *obp++ = '.';
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2180:src/display.c **** 	      *obp++ = '0';
2181:src/display.c **** 	      odig++;
2182:src/display.c **** 	      dd--;
2183:src/display.c **** 	    }
2184:src/display.c **** 	    while (dd-- > 0) {
2185:src/display.c **** 	      *obp++ = *p++;
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	  }
2189:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2190:src/display.c **** 	  if (trimzeros)
2191:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2192:src/display.c **** 	      obp--;
2193:src/display.c **** 	      odig--;
2194:src/display.c **** 	    }
2195:src/display.c **** #endif			
2196:src/display.c **** 	  break;
2197:src/display.c **** 
2198:src/display.c **** 	case MODE_ENG:
2199:src/display.c **** 	  switch (exp % 3) {
2200:src/display.c **** 	  case -1:
2201:src/display.c **** 	  case 2:
2202:src/display.c **** 	    *obp++ = *p++;
2203:src/display.c **** 	    odig++;
2204:src/display.c **** 	    dd--;
2205:src/display.c **** 	    exp--;
2206:src/display.c **** 	  case -2:
2207:src/display.c **** 	  case 1:
2208:src/display.c **** 	    *obp++ = *p++;
2209:src/display.c **** 	    odig++;
2210:src/display.c **** 	    dd--;
2211:src/display.c **** 	    exp--;
2212:src/display.c **** 	  case 0:
2213:src/display.c **** 	    ;
ARM GAS  /tmp/ccadPcKu.s 			page 54


2214:src/display.c **** 	  };
2215:src/display.c **** 	  // Falling through
2216:src/display.c **** 
2217:src/display.c **** 	case MODE_SCI:
2218:src/display.c **** 	  *obp++ = *p++;
2219:src/display.c **** 	  odig++;
2220:src/display.c **** 	  *obp++ = '.';
2221:src/display.c **** 	  dd--;
2222:src/display.c **** 	  while (dd-- >= 0) {
2223:src/display.c **** 	    *obp++ = *p++;
2224:src/display.c **** 	    odig++;
2225:src/display.c **** 	  }
2226:src/display.c **** 	  show_exp = 1;
2227:src/display.c **** 	}
2228:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2229:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2230:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2231:src/display.c **** 	    obp--;
2232:src/display.c **** 	    odig--;
2233:src/display.c **** 	  }
2234:src/display.c **** #endif	
2235:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2236:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2237:src/display.c **** 	  set_x_dn(z, res, display_digits);
2238:src/display.c **** 	  return;
2239:src/display.c **** 	}
2240:src/display.c **** 	/* Finally, send the output to the display */
2241:src/display.c **** 	*obp = '\0';
2242:src/display.c **** 	if (odig > *display_digits)
2243:src/display.c **** 	  odig = *display_digits;
2244:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2245:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2246:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2247:src/display.c **** 	if (negative) {
2248:src/display.c **** 	  if (res) *res++ = '-';
2249:src/display.c **** 	  else {
2250:src/display.c **** 	    if (j == 0)
2251:src/display.c **** 	      SET_MANT_SIGN;
2252:src/display.c **** 	    else
2253:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2254:src/display.c **** 	  }
2255:src/display.c **** 	}
2256:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2257:src/display.c **** 	  if (c == '.') {
2258:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2259:src/display.c **** 	  } else if (c == ',') {
2260:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2261:src/display.c **** 	  } else {
2262:src/display.c **** 	    res = set_dig_s(j, c, res);
2263:src/display.c **** 	    j += SEGS_PER_DIGIT;
2264:src/display.c **** 	  }
2265:src/display.c **** 	}
2266:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2267:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2268:src/display.c **** 	  if ( !res ) {
2269:src/display.c **** 	    set_exp(exp, 4, res);
2270:src/display.c **** 	  }
ARM GAS  /tmp/ccadPcKu.s 			page 55


2271:src/display.c **** 	  else {
2272:src/display.c **** 	    set_exp(exp, 0, res);
2273:src/display.c **** 	  }
2274:src/display.c **** 	}
2275:src/display.c **** #else
2276:src/display.c **** 	if (show_exp)
2277:src/display.c **** 	  set_exp(exp, 0, res);
2278:src/display.c **** #endif
2279:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2280:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2281:src/display.c **** 	*display_digits = odig;
2282:src/display.c ****       }
2283:src/display.c **** 
2284:src/display.c **** #if defined(QTGUI) || defined(IOS)
2285:src/display.c ****       void format_display(char *buf) {
2286:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2287:src/display.c **** 	  {
2288:src/display.c **** 	    const char *p = get_cmdline();
2289:src/display.c **** 	    if (p == NULL) {
2290:src/display.c **** 	      format_reg(regX_idx, buf);
2291:src/display.c **** 	    } else {
2292:src/display.c **** 	      scopy(buf, p);
2293:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2294:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2295:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2296:src/display.c **** 		buf[CmdLineEex] = 'E';
2297:src/display.c **** 		buf[CmdLineEex+1] = '-';
2298:src/display.c **** 	      }
2299:src/display.c **** #  endif
2300:src/display.c **** 	    }
2301:src/display.c **** 	  }
2302:src/display.c **** 	else {
2303:src/display.c **** 	  buf[0]=0;
2304:src/display.c **** 	}
2305:src/display.c ****       }
2306:src/display.c **** #endif
2307:src/display.c **** 
2308:src/display.c ****       void format_reg(int index, char *buf) {
2309:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2310:src/display.c **** 
2311:src/display.c **** 	if (is_intmode())
2312:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2313:src/display.c **** #ifndef HP16C_MODE_CHANGE
2314:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2315:src/display.c **** 	  decNumber x;
2316:src/display.c **** 	  int s;
2317:src/display.c **** 	  unsigned long long int v;
2318:src/display.c **** 
2319:src/display.c **** 	  getRegister(&x, index);
2320:src/display.c **** 	  v = dn_to_ull(&x, &s);
2321:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2322:src/display.c **** 	}
2323:src/display.c **** #endif
2324:src/display.c **** 	else
2325:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2326:src/display.c ****       }
2327:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 56


2328:src/display.c ****       /* Display the status screen */
2329:src/display.c ****       static void show_status(void) {
2330:src/display.c **** 	int i, n;
2331:src/display.c **** 	int j = SEGS_EXP_BASE;
2332:src/display.c **** 	const int status = State2.status - 3;
2333:src/display.c **** 	char buf[16], *p = buf;
2334:src/display.c **** 	unsigned int pc;
2335:src/display.c **** 
2336:src/display.c **** 	if (status == -2) {
2337:src/display.c **** 	  set_status("Free:");
2338:src/display.c **** 	  p = num_arg(buf, free_mem());
2339:src/display.c **** 	  p = scopy(p, " , FL. ");
2340:src/display.c **** 	  p = num_arg(p, free_flash());
2341:src/display.c **** 	  *p = '\0';
2342:src/display.c **** 	  set_digits_string(buf, 0);
2343:src/display.c **** 	}
2344:src/display.c **** 	else if (status == -1) {
2345:src/display.c **** 	  /* Top line */
2346:src/display.c **** 	  p = scopy(buf, "Regs:");
2347:src/display.c **** 	  if (SizeStatRegs)
2348:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2349:src/display.c **** 	  *p = '\0';
2350:src/display.c **** 	  set_status(buf);
2351:src/display.c **** 
2352:src/display.c **** 	  /* Bottom line */
2353:src/display.c **** 	  p = num_arg(buf, global_regs());
2354:src/display.c **** 	  if (LocalRegs < 0) {
2355:src/display.c **** 	    p = scopy(p, " , Loc. ");
2356:src/display.c **** 	    p = num_arg(p, local_regs());
2357:src/display.c **** 	  }
2358:src/display.c **** 	  *p = '\0';
2359:src/display.c **** 	  set_digits_string(buf, 0);
2360:src/display.c **** 	} else {
2361:src/display.c **** 	  int base;
2362:src/display.c **** 	  int end;
2363:src/display.c **** 	  int group = 10;
2364:src/display.c **** 	  int start = 0;
2365:src/display.c **** 		
2366:src/display.c **** 	  if (status <= 9) {
2367:src/display.c **** 	    base = 10 * status;
2368:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2369:src/display.c **** 	    p = scopy(buf, "FL ");
2370:src/display.c **** 	    p = num_arg_0(p, base, 2);
2371:src/display.c **** 	    *p++ = '-';
2372:src/display.c **** 	    p = num_arg_0(p, end, 2);
2373:src/display.c **** 	    *p = '\0';
2374:src/display.c **** 	    set_status(buf);
2375:src/display.c **** 	  }
2376:src/display.c **** 	  else if (status == 10) {
2377:src/display.c **** 	    base = regX_idx;
2378:src/display.c **** 	    end = regK_idx;
2379:src/display.c **** 	    start = 3;
2380:src/display.c **** 	    group = 4;
2381:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2382:src/display.c **** 	  }
2383:src/display.c **** 	  else { // status == 11
2384:src/display.c **** 	    base = LOCAL_FLAG_BASE;
ARM GAS  /tmp/ccadPcKu.s 			page 57


2385:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2386:src/display.c **** 	    set_status("FL.00-.15");
2387:src/display.c **** 	  }
2388:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2389:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2390:src/display.c **** 	  j += SEGS_PER_DIGIT;
2391:src/display.c **** 	  for (i = start; i < group + start; i++) {
2392:src/display.c **** 	    int k = i + base - start;
2393:src/display.c **** 	    int l = get_user_flag(k);
2394:src/display.c **** 	    k += group;
2395:src/display.c **** 	    if (end >= k) {
2396:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2397:src/display.c **** 	      k += group;
2398:src/display.c **** 	      if (end >= k)
2399:src/display.c **** 		l |= (get_user_flag(k) << 2);
2400:src/display.c **** 	    }
2401:src/display.c **** 	    set_dig(j, l);
2402:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2403:src/display.c **** 	    j += SEGS_PER_DIGIT;
2404:src/display.c **** 	    if (i == 4) {
2405:src/display.c **** 	      set_dig(j, 8);
2406:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2407:src/display.c **** 	      j += SEGS_PER_DIGIT;
2408:src/display.c **** 	    }
2409:src/display.c **** 	  }
2410:src/display.c **** 	}
2411:src/display.c **** 
2412:src/display.c **** 	j = SEGS_EXP_BASE;
2413:src/display.c **** 	pc = state_pc();
2414:src/display.c **** 	if (isXROM(pc))
2415:src/display.c **** 	  pc = 1;
2416:src/display.c **** 	for (n=i=0; i<4; i++) {
2417:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2418:src/display.c **** 	    if (++n == 4) {
2419:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2420:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2421:src/display.c **** 	    } else {
2422:src/display.c **** 	      set_dig(j, 'A'+i);
2423:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2424:src/display.c **** 	    }
2425:src/display.c **** 	  }
2426:src/display.c **** 	}
2427:src/display.c ****       }
2428:src/display.c **** 
2429:src/display.c **** 
2430:src/display.c ****       /* Display the list of alpha labels */
2431:src/display.c ****       static void show_label(void) {
2432:src/display.c **** 	char buf[16];
2433:src/display.c **** 	unsigned short int pc = State2.digval;
2434:src/display.c **** 	unsigned int op = getprog(pc);
2435:src/display.c **** 	int n = nLIB(pc);
2436:src/display.c **** 	unsigned short int lblpc;
2437:src/display.c **** 
2438:src/display.c **** 	set_status(prt((opcode)op, buf));
2439:src/display.c **** 	set_digits_string(libname[n], 0);
2440:src/display.c **** #ifndef REALBUILD
2441:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
ARM GAS  /tmp/ccadPcKu.s 			page 58


2442:src/display.c **** #endif
2443:src/display.c **** 
2444:src/display.c **** 	if (op & OP_DBL) {
2445:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2446:src/display.c **** 	  if (lblpc != pc) {
2447:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2448:src/display.c **** 	    n = nLIB(lblpc);
2449:src/display.c **** 	    if (n == REGION_RAM)
2450:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2451:src/display.c **** 	    else {
2452:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2453:src/display.c **** #ifndef REALBUILD
2454:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2455:src/display.c **** #endif
2456:src/display.c **** 	    }
2457:src/display.c **** 	  }
2458:src/display.c **** 	}
2459:src/display.c ****       }
2460:src/display.c **** 
2461:src/display.c ****       /* Display a list of register contents */
2462:src/display.c ****       static void show_registers(void) {
2463:src/display.c **** 	char buf[16], *bp;
2464:src/display.c **** 	int n = State2.digval;
2465:src/display.c **** 	
2466:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2467:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2468:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2469:src/display.c **** 	  n;
2470:src/display.c **** #else
2471:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2472:src/display.c **** 	  n;
2473:src/display.c **** #endif
2474:src/display.c **** 
2475:src/display.c **** 	if (State2.disp_as_alpha) {
2476:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2477:src/display.c **** 	}
2478:src/display.c **** 	else {
2479:src/display.c **** 	  xset(buf, '\0', 16);
2480:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2481:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2482:src/display.c **** #else
2483:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2484:src/display.c **** #endif
2485:src/display.c **** 	  if (State2.local) {
2486:src/display.c **** 	    *bp++ = '.';
2487:src/display.c **** 	    if (n >= 100) {
2488:src/display.c **** 	      *bp++ = '1';
2489:src/display.c **** 	      n -= 100;
2490:src/display.c **** 	    }
2491:src/display.c **** 	  }
2492:src/display.c **** 	  if (n < 100)
2493:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2494:src/display.c **** 	  else
2495:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2496:src/display.c **** 	  set_status(buf);
2497:src/display.c **** 	}
2498:src/display.c **** 	format_reg(reg, CNULL);
ARM GAS  /tmp/ccadPcKu.s 			page 59


2499:src/display.c ****       }
2500:src/display.c **** 
2501:src/display.c **** 
2502:src/display.c ****       static void set_annunciators(void)
2503:src/display.c ****       {
2504:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2505:src/display.c **** 
2506:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2507:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2508:src/display.c **** 	 * browsing constants.
2509:src/display.c **** 	 */
2510:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2511:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2512:src/display.c **** #else
2513:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2514:src/display.c **** #endif
2515:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2516:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2517:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2518:src/display.c **** 	set_IO_annunciator();
2519:src/display.c **** 
2520:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2521:src/display.c **** 	 */
2522:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2523:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2524:src/display.c ****       }
2525:src/display.c **** 
2526:src/display.c **** 
2527:src/display.c ****       /*
2528:src/display.c ****        *  Toggle the little "=" sign
2529:src/display.c ****        */
2530:src/display.c ****       void set_IO_annunciator(void) {
2531:src/display.c **** #ifndef DM42
2532:src/display.c **** 	int on = SerialOn
2533:src/display.c **** #endif
2534:src/display.c **** #ifdef DM42
2535:src/display.c **** 	  int on = 0
2536:src/display.c **** #endif
2537:src/display.c **** #ifdef REALBUILD
2538:src/display.c **** 	  || DebugFlag
2539:src/display.c **** #endif
2540:src/display.c **** #ifdef INFRARED
2541:src/display.c **** 	  || PrinterColumn != 0
2542:src/display.c **** #endif
2543:src/display.c **** 	  ;
2544:src/display.c **** 
2545:src/display.c **** 	if (on != IoAnnunciator) {
2546:src/display.c **** 	  dot(LIT_EQ, on);
2547:src/display.c **** 	  IoAnnunciator = on;
2548:src/display.c **** 	  finish_display(); //LIT_EQ
2549:src/display.c **** 	}
2550:src/display.c ****       }
2551:src/display.c **** 
2552:src/display.c **** #ifdef TOP_ROW
2553:src/display.c ****       /*
2554:src/display.c ****        *  Update the display
2555:src/display.c ****        */
ARM GAS  /tmp/ccadPcKu.s 			page 60


2556:src/display.c ****       void display(void) {
2557:src/display.c **** 	int i, j;
2558:src/display.c **** 	char buf[40], *bp = buf;
2559:src/display.c **** 	const char *p;
2560:src/display.c **** 	int annuc = 0;
2561:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2562:src/display.c **** 	int skip = 0;
2563:src/display.c **** 	int x_disp = 0;
2564:src/display.c **** 	const int shift = cur_shift();
2565:src/display.c **** 
2566:src/display.c **** 	no_status_top = 0;
2567:src/display.c **** 	if (State2.disp_freeze) {
2568:src/display.c **** 	  State2.disp_freeze = 0;
2569:src/display.c **** 	  State2.disp_temp = 1;
2570:src/display.c **** #ifdef CONSOLE
2571:src/display.c **** 	  JustDisplayed = 1;
2572:src/display.c **** #endif
2573:src/display.c **** 	  ShowRPN = 0;
2574:src/display.c **** 	  return;
2575:src/display.c **** 	}
2576:src/display.c **** 
2577:src/display.c **** 	if (WasDataEntry) {
2578:src/display.c **** #if defined(QTGUI) || defined(IOS)
2579:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2580:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2581:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2582:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2583:src/display.c **** #endif
2584:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2585:src/display.c **** 
2586:src/display.c **** 	  // Erase 7-segment display
2587:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2588:src/display.c **** 	    clr_dot(i);
2589:src/display.c **** 	  }
2590:src/display.c **** 	  goto only_update_x;
2591:src/display.c **** 	}
2592:src/display.c **** 
2593:src/display.c **** 	// Clear display
2594:src/display.c **** 	reset_disp();
2595:src/display.c **** 
2596:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2597:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2598:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2599:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2600:src/display.c **** 	/*   set_status(buf); */
2601:src/display.c **** 	/* } */
2602:src/display.c **** 	if (State2.version) {
2603:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2604:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2605:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2606:src/display.c **** #ifndef REALBUILD
2607:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2608:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2609:src/display.c **** #endif
2610:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2611:src/display.c **** 	  set_status(vers);
2612:src/display.c **** 	  skip = 1;
ARM GAS  /tmp/ccadPcKu.s 			page 61


2613:src/display.c **** 	  goto nostk;
2614:src/display.c **** 	} else if (State2.confirm) {
2615:src/display.c **** 	  set_status_top(S_SURE);
2616:src/display.c **** 	  no_status_top = 1;
2617:src/display.c **** 	  annuc = State2.runmode;
2618:src/display.c **** 	} else if (State2.hyp) {
2619:src/display.c **** 	  bp = scopy(bp, "HYP");
2620:src/display.c **** 	  if (! State2.dot)
2621:src/display.c **** 	    *bp++ = '\235';
2622:src/display.c **** 	  set_status_top(buf);
2623:src/display.c **** 	  no_status_top = 1;
2624:src/display.c **** 	  annuc = State2.runmode;
2625:src/display.c **** 	} else if (State2.gtodot) {
2626:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2627:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2628:src/display.c **** 	  if (State2.numdigit > 0)
2629:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2630:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2631:src/display.c **** 	  *bp++ = '_';
2632:src/display.c **** 	  set_status_top(buf);
2633:src/display.c **** 	  no_status_top = 1;
2634:src/display.c **** 	  annuc = State2.runmode;
2635:src/display.c **** 	} else if (State2.rarg) {
2636:src/display.c **** 	  /* Commands with arguments */
2637:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2638:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2639:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2640:src/display.c **** #endif
2641:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2642:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2643:src/display.c **** 	  if (State2.dot) {
2644:src/display.c **** 	    *bp++ = 's';
2645:src/display.c **** 	    *bp++ = '_';
2646:src/display.c **** 	  } else if (shift == SHIFT_F) {
2647:src/display.c **** 	    *bp++ = '\021';
2648:src/display.c **** 	    *bp++ = '_';
2649:src/display.c **** 	  } else {
2650:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2651:src/display.c **** 	       : State2.ind ? 2 
2652:src/display.c **** 	       : num_arg_digits(CmdBase); */
2653:src/display.c **** 	    if (State2.local)
2654:src/display.c **** 	      *bp++ = '.';
2655:src/display.c **** 	    if (State2.numdigit > 0) {
2656:src/display.c **** 	      if (State2.shuffle)
2657:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2658:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2659:src/display.c **** 	      else
2660:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2661:src/display.c **** 	    }
2662:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2663:src/display.c **** 	    *bp++ = '_';
2664:src/display.c **** 	  }
2665:src/display.c **** 	  set_status_top(buf);
2666:src/display.c **** 	  no_status_top = 1;
2667:src/display.c **** 	  annuc = State2.runmode;
2668:src/display.c **** 	} else if (State2.test != TST_NONE) {
2669:src/display.c **** 	  *bp++ = 'x';
ARM GAS  /tmp/ccadPcKu.s 			page 62


2670:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2671:src/display.c **** 	  *bp++ = '_';
2672:src/display.c **** 	  *bp++ = '?';
2673:src/display.c **** 	  set_status_top(buf);
2674:src/display.c **** 	  no_status_top = 1;
2675:src/display.c **** 	  annuc = State2.runmode;
2676:src/display.c **** 	} else if (cata) {
2677:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2678:src/display.c **** 	  char b2[16];
2679:src/display.c **** 	  const char *p;
2680:src/display.c **** 
2681:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2682:src/display.c **** 	  p = catcmd(op, b2);
2683:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2684:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2685:src/display.c **** 	  bp = scopy(bp, p);
2686:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2687:src/display.c **** 	    // State2.disp_small = 1;
2688:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2689:src/display.c **** 	      set_digits_string("0 to 255", 0);
2690:src/display.c **** 	    else
2691:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2692:src/display.c **** 	    skip = 1;
2693:src/display.c **** 	  } else if (State2.runmode) {
2694:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2695:src/display.c **** 	      decNumber x, r;
2696:src/display.c **** 	      decimal64 z;
2697:src/display.c **** 
2698:src/display.c **** 	      getX(&x);
2699:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2700:src/display.c **** 		const unsigned int f = argKIND(op);
2701:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2702:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2703:src/display.c **** 		  update_speed(0);
2704:src/display.c **** 		  fp(&r, &x);
2705:src/display.c **** 		}
2706:src/display.c **** 		else
2707:src/display.c **** 		  set_NaN(&r);
2708:src/display.c **** 	      } else
2709:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2710:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2711:src/display.c **** 	      packed_from_number(&z, &r);
2712:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2713:src/display.c **** 	      skip = 1;
2714:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2715:src/display.c **** 	      REGISTER z, *const x = StackBase;
2716:src/display.c **** 	      copyreg(&z, x);
2717:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2718:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2719:src/display.c **** 	      copyreg(x, &z);
2720:src/display.c **** 	      skip = 1;
2721:src/display.c **** 	    }
2722:src/display.c **** 	  }
2723:src/display.c **** 	  set_status_top(buf);
2724:src/display.c **** 	  no_status_top = 1;
2725:src/display.c **** 	  annuc = State2.runmode;
2726:src/display.c **** 	} else if (State2.multi) {
ARM GAS  /tmp/ccadPcKu.s 			page 63


2727:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2728:src/display.c **** 	  if (State2.numdigit > 0) {
2729:src/display.c **** 	    *bp++ = (char) State2.digval;
2730:src/display.c **** 	    if (State2.numdigit > 1)
2731:src/display.c **** 	      *bp++ = State2.digval2;
2732:src/display.c **** 	  }
2733:src/display.c **** 	  set_status_top(buf);
2734:src/display.c **** 	  no_status_top = 1;
2735:src/display.c **** 	  annuc = State2.runmode;
2736:src/display.c **** 	} else if (State2.status) {
2737:src/display.c **** 	  show_status();
2738:src/display.c **** 	  skip = 1;
2739:src/display.c **** 	} else if (State2.labellist) {
2740:src/display.c **** 	  show_label();
2741:src/display.c **** 	  skip = 1;
2742:src/display.c **** 	} else if (State2.registerlist) {
2743:src/display.c **** 	  show_registers();
2744:src/display.c **** 	  skip = 1;
2745:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2746:src/display.c **** 	    annunciators();
2747:src/display.c **** 	  }
2748:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2749:src/display.c **** 	} else if (State2.disp_as_alpha) {
2750:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2751:src/display.c **** #endif
2752:src/display.c **** 	} else if (State2.runmode) {
2753:src/display.c **** 	  if (DispMsg) { 
2754:src/display.c **** 	    set_status(DispMsg);
2755:src/display.c **** 	  } else if (DispPlot) {
2756:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2757:src/display.c **** 	  } else if (State2.alphas) {
2758:src/display.c **** #if 0
2759:src/display.c **** 	    set_digits_string("AlpHA", 0);
2760:src/display.c **** #endif
2761:src/display.c **** 	    bp = scopy(buf, Alpha);
2762:src/display.c **** 	    j = State2.alpha_pos;
2763:src/display.c **** 	    if (j != 0) {
2764:src/display.c **** 	      i = slen(buf);
2765:src/display.c **** 	      //				
2766:src/display.c **** 	      j *= 6;
2767:src/display.c **** #ifdef BIGGER_DISPLAY
2768:src/display.c **** 	      if ( i - j >= 20 )
2769:src/display.c **** #else
2770:src/display.c **** 	      if ( i - j >= 12 )
2771:src/display.c **** #endif
2772:src/display.c **** 		{
2773:src/display.c **** 		buf[ (i - j) ] = '\0';
2774:src/display.c **** 		set_status_right(buf);
2775:src/display.c **** 		}
2776:src/display.c **** 	      else {
2777:src/display.c **** 		set_status(buf);
2778:src/display.c **** 	      }
2779:src/display.c **** 	    } else {
2780:src/display.c **** 	      if (shift != SHIFT_N) {
2781:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2782:src/display.c **** 		*bp++ = '\0';
2783:src/display.c **** 	      }
ARM GAS  /tmp/ccadPcKu.s 			page 64


2784:src/display.c **** 	      set_status_right(buf);
2785:src/display.c **** 	    }
2786:src/display.c **** 	  } else {
2787:src/display.c **** 	    annuc = 1;
2788:src/display.c **** 	  }
2789:src/display.c **** 	} else {
2790:src/display.c **** #ifndef DM42
2791:src/display.c **** 	  show_progtrace(buf);
2792:src/display.c **** #endif
2793:src/display.c **** 	  i = state_pc();
2794:src/display.c **** 	  if (i > 0)
2795:src/display.c **** 	    set_status(prt(getprog(i), buf));
2796:src/display.c **** 	  else
2797:src/display.c **** 	    set_status("");
2798:src/display.c **** 	  set_dot(STO_annun);
2799:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2800:src/display.c **** 	      annuc = 1;
2801:src/display.c **** 	  goto nostk;
2802:src/display.c **** 	}
2803:src/display.c **** 	show_stack();
2804:src/display.c ****       nostk:
2805:src/display.c **** 	show_flags();
2806:src/display.c **** 	if (!skip) {
2807:src/display.c **** 	  if (State2.runmode) {
2808:src/display.c **** 	  only_update_x:
2809:src/display.c **** 	    p = get_cmdline();
2810:src/display.c **** 	    if (p == NULL || cata) {
2811:src/display.c **** 	      if (ShowRegister != -1) {
2812:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2813:src/display.c **** 		format_reg(ShowRegister, CNULL);
2814:src/display.c **** 	      }
2815:src/display.c **** 	      else
2816:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2817:src/display.c **** 	    } else {
2818:src/display.c **** 	      disp_x(p);
2819:src/display.c **** 	      x_disp = 1;
2820:src/display.c **** 	    }
2821:src/display.c **** 	    if (WasDataEntry) {
2822:src/display.c **** 	      goto finish;
2823:src/display.c **** 	    }
2824:src/display.c **** 	  } else {
2825:src/display.c **** 	    unsigned int pc = state_pc();
2826:src/display.c **** 	    unsigned int upc = user_pc(pc);
2827:src/display.c **** 	    const int n = nLIB(pc);
2828:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2829:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2830:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2831:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2832:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2833:src/display.c **** #ifndef REALBUILD
2834:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2835:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2836:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2837:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2838:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2839:src/display.c **** 	      char *b=buf;
2840:src/display.c **** 	      char *l=LastDisplayedNumber;
ARM GAS  /tmp/ccadPcKu.s 			page 65


2841:src/display.c **** 	      *l++=' ';
2842:src/display.c **** 	      while(*b) {
2843:src/display.c **** 		*l++=*b++;
2844:src/display.c **** 		*l++=' ';
2845:src/display.c **** 	      }
2846:src/display.c **** 	      *l=0;
2847:src/display.c **** 	    }
2848:src/display.c **** #endif
2849:src/display.c **** 	  }
2850:src/display.c **** 	}
2851:src/display.c **** 	set_annunciators();
2852:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2853:src/display.c **** 	  ShowRPN = 0;
2854:src/display.c **** 	  dot(RPN, 0);
2855:src/display.c **** 	}
2856:src/display.c **** 	// disp_temp disables the <- key
2857:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2858:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2859:src/display.c **** 
2860:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2861:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2862:src/display.c **** 	  annunciators();
2863:src/display.c ****  	State2.hms = 0;
2864:src/display.c **** #else
2865:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2866:src/display.c **** 	  annunciators();
2867:src/display.c **** #endif
2868:src/display.c **** 
2869:src/display.c ****       finish:
2870:src/display.c **** 	State2.version = 0;
2871:src/display.c **** 	State2.disp_as_alpha = 0;
2872:src/display.c **** 	State2.smode = SDISP_NORMAL;
2873:src/display.c **** 	State2.invalid_disp = 0;
2874:src/display.c **** 	ShowRegister = regX_idx;
2875:src/display.c **** 	DispMsg = CNULL;
2876:src/display.c **** 	DispPlot = 0;
2877:src/display.c **** 	State2.disp_small = 0;
2878:src/display.c **** 	finish_display();
2879:src/display.c **** 	no_status_top = 0;
2880:src/display.c **** #ifdef CONSOLE
2881:src/display.c **** 	JustDisplayed = 1;
2882:src/display.c **** #endif
2883:src/display.c ****       }
2884:src/display.c **** #else
2885:src/display.c ****       /*
2886:src/display.c ****        *  Update the display
2887:src/display.c ****        */
2888:src/display.c ****       void display(void) {
2889:src/display.c **** 	int i, j;
2890:src/display.c **** 	char buf[40], *bp = buf;
2891:src/display.c **** 	const char *p;
2892:src/display.c **** 	int annuc = 0;
2893:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2894:src/display.c **** 	int skip = 0;
2895:src/display.c **** 	int x_disp = 0;
2896:src/display.c **** 	const int shift = cur_shift();
2897:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 66


2898:src/display.c **** 
2899:src/display.c **** 
2900:src/display.c **** 	if (State2.disp_freeze) {
2901:src/display.c **** 	  State2.disp_freeze = 0;
2902:src/display.c **** 	  State2.disp_temp = 1;
2903:src/display.c **** #ifdef CONSOLE
2904:src/display.c **** 	  JustDisplayed = 1;
2905:src/display.c **** #endif
2906:src/display.c **** 	  ShowRPN = 0;
2907:src/display.c **** 	  return;
2908:src/display.c **** 	}
2909:src/display.c **** 
2910:src/display.c **** 	if (WasDataEntry) {
2911:src/display.c **** #if defined(QTGUI) || defined(IOS)
2912:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2913:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2914:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2915:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2916:src/display.c **** #endif
2917:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2918:src/display.c **** 
2919:src/display.c **** 	  // Erase 7-segment display
2920:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2921:src/display.c **** 	    clr_dot(i);
2922:src/display.c **** 	  }
2923:src/display.c **** 	  goto only_update_x;
2924:src/display.c **** 	}
2925:src/display.c **** 
2926:src/display.c **** 	// Clear display
2927:src/display.c **** 	reset_disp();
2928:src/display.c **** 
2929:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2930:src/display.c **** 	if (State2.cmplx  && !cata) {
2931:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
2932:src/display.c **** 	  set_status(buf);
2933:src/display.c **** 	}
2934:src/display.c **** 	if (State2.version) {
2935:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2936:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2937:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2938:src/display.c **** #ifndef REALBUILD
2939:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2940:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2941:src/display.c **** #endif
2942:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2943:src/display.c **** 	  set_status(vers);
2944:src/display.c **** 	  skip = 1;
2945:src/display.c **** 	  goto nostk;
2946:src/display.c **** 	} else if (State2.confirm) {
2947:src/display.c **** 	  set_status(S_SURE);
2948:src/display.c **** 	} else if (State2.hyp) {
2949:src/display.c **** 	  bp = scopy(bp, "HYP");
2950:src/display.c **** 	  if (! State2.dot)
2951:src/display.c **** 	    *bp++ = '\235';
2952:src/display.c **** 	  set_status(buf);
2953:src/display.c **** 	} else if (State2.gtodot) {
2954:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
ARM GAS  /tmp/ccadPcKu.s 			page 67


2955:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2956:src/display.c **** 	  if (State2.numdigit > 0)
2957:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2958:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2959:src/display.c **** 	  *bp++ = '_';
2960:src/display.c **** 	  set_status(buf);
2961:src/display.c **** 	} else if (State2.rarg) {
2962:src/display.c **** 	  /* Commands with arguments */
2963:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2964:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2965:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2966:src/display.c **** #endif
2967:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2968:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2969:src/display.c **** 	  if (State2.dot) {
2970:src/display.c **** 	    *bp++ = 's';
2971:src/display.c **** 	    *bp++ = '_';
2972:src/display.c **** 	  } else if (shift == SHIFT_F) {
2973:src/display.c **** 	    *bp++ = '\021';
2974:src/display.c **** 	    *bp++ = '_';
2975:src/display.c **** 	  } else {
2976:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2977:src/display.c **** 	       : State2.ind ? 2 
2978:src/display.c **** 	       : num_arg_digits(CmdBase); */
2979:src/display.c **** 	    if (State2.local)
2980:src/display.c **** 	      *bp++ = '.';
2981:src/display.c **** 	    if (State2.numdigit > 0) {
2982:src/display.c **** 	      if (State2.shuffle)
2983:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2984:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2985:src/display.c **** 	      else
2986:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2987:src/display.c **** 	    }
2988:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2989:src/display.c **** 	    *bp++ = '_';
2990:src/display.c **** 	  }
2991:src/display.c **** 	  set_status(buf);
2992:src/display.c **** 	} else if (State2.test != TST_NONE) {
2993:src/display.c **** 	  *bp++ = 'x';
2994:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2995:src/display.c **** 	  *bp++ = '_';
2996:src/display.c **** 	  *bp++ = '?';
2997:src/display.c **** 	  set_status(buf);
2998:src/display.c **** 	} else if (cata) {
2999:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3000:src/display.c **** 	  char b2[16];
3001:src/display.c **** 	  const char *p;
3002:src/display.c **** 
3003:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3004:src/display.c **** 	  p = catcmd(op, b2);
3005:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3006:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3007:src/display.c **** 	  bp = scopy(bp, p);
3008:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3009:src/display.c **** 	    // State2.disp_small = 1;
3010:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3011:src/display.c **** 	      set_digits_string("0 to 255", 0);
ARM GAS  /tmp/ccadPcKu.s 			page 68


3012:src/display.c **** 	    else
3013:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3014:src/display.c **** 	    skip = 1;
3015:src/display.c **** 	  } else if (State2.runmode) {
3016:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3017:src/display.c **** 	      decNumber x, r;
3018:src/display.c **** 	      decimal64 z;
3019:src/display.c **** 
3020:src/display.c **** 	      getX(&x);
3021:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3022:src/display.c **** 		const unsigned int f = argKIND(op);
3023:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3024:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3025:src/display.c **** 		  update_speed(0);
3026:src/display.c **** 		  fp(&r, &x);
3027:src/display.c **** 		}
3028:src/display.c **** 		else
3029:src/display.c **** 		  set_NaN(&r);
3030:src/display.c **** 	      } else
3031:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3032:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3033:src/display.c **** 	      packed_from_number(&z, &r);
3034:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3035:src/display.c **** 	      skip = 1;
3036:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3037:src/display.c **** 	      REGISTER z, *const x = StackBase;
3038:src/display.c **** 	      copyreg(&z, x);
3039:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3040:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3041:src/display.c **** 	      copyreg(x, &z);
3042:src/display.c **** 	      skip = 1;
3043:src/display.c **** 	    }
3044:src/display.c **** 	  }
3045:src/display.c **** 	  set_status(buf);
3046:src/display.c **** 	} else if (State2.multi) {
3047:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3048:src/display.c **** 	  if (State2.numdigit > 0) {
3049:src/display.c **** 	    *bp++ = (char) State2.digval;
3050:src/display.c **** 	    if (State2.numdigit > 1)
3051:src/display.c **** 	      *bp++ = State2.digval2;
3052:src/display.c **** 	  }
3053:src/display.c **** 	  set_status(buf);
3054:src/display.c **** 	} else if (State2.status) {
3055:src/display.c **** 	  show_status();
3056:src/display.c **** 	  skip = 1;
3057:src/display.c **** 	} else if (State2.labellist) {
3058:src/display.c **** 	  show_label();
3059:src/display.c **** 	  skip = 1;
3060:src/display.c **** 	} else if (State2.registerlist) {
3061:src/display.c **** 	  show_registers();
3062:src/display.c **** 	  skip = 1;
3063:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3064:src/display.c **** 	    annunciators();
3065:src/display.c **** 	  }
3066:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3067:src/display.c **** 	} else if (State2.disp_as_alpha) {
3068:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
ARM GAS  /tmp/ccadPcKu.s 			page 69


3069:src/display.c **** #endif
3070:src/display.c **** 	} else if (State2.runmode) {
3071:src/display.c **** 	  if (DispMsg) { 
3072:src/display.c **** 	    set_status(DispMsg);
3073:src/display.c **** 	  } else if (DispPlot) {
3074:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3075:src/display.c **** 	  } else if (State2.alphas) {
3076:src/display.c **** #if 0
3077:src/display.c **** 	    set_digits_string("AlpHA", 0);
3078:src/display.c **** #endif
3079:src/display.c **** 	    bp = scopy(buf, Alpha);
3080:src/display.c **** 	    j = State2.alpha_pos;
3081:src/display.c **** 	    if (j != 0) {
3082:src/display.c **** 	      i = slen(buf);
3083:src/display.c **** 	      //				
3084:src/display.c **** 	      j *= 6;
3085:src/display.c **** #ifdef BIGGER_DISPLAY
3086:src/display.c **** 	      if ( i - j >= 20 )
3087:src/display.c **** #else
3088:src/display.c **** 	      if ( i - j >= 12 )
3089:src/display.c **** #endif
3090:src/display.c **** 		{
3091:src/display.c **** 		buf[ (i - j) ] = '\0';
3092:src/display.c **** 		set_status_right(buf);
3093:src/display.c **** 		}
3094:src/display.c **** 	      else {
3095:src/display.c **** 		set_status(buf);
3096:src/display.c **** 	      }
3097:src/display.c **** 	    } else {
3098:src/display.c **** 	      if (shift != SHIFT_N) {
3099:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3100:src/display.c **** 		*bp++ = '\0';
3101:src/display.c **** 	      }
3102:src/display.c **** 	      set_status_right(buf);
3103:src/display.c **** 	    }
3104:src/display.c **** 	  } else {
3105:src/display.c **** 	    annuc = 1;
3106:src/display.c **** 	  }
3107:src/display.c **** 	} else {
3108:src/display.c **** #ifndef DM42
3109:src/display.c **** 	  show_progtrace(buf);
3110:src/display.c **** #endif
3111:src/display.c **** 	  i = state_pc();
3112:src/display.c **** 	  if (i > 0)
3113:src/display.c **** 	    set_status(prt(getprog(i), buf));
3114:src/display.c **** 	  else
3115:src/display.c **** 	    set_status("");
3116:src/display.c **** 	  set_dot(STO_annun);
3117:src/display.c **** #if 0
3118:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3119:src/display.c **** 	    unsigned short int crc;
3120:src/display.c **** 	    crc = checksum_program();
3121:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3122:src/display.c **** 	    for (i=0; i<4; i++) {
3123:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3124:src/display.c **** 	      crc >>= 4;
3125:src/display.c **** 	      j += SEGS_PER_DIGIT;
ARM GAS  /tmp/ccadPcKu.s 			page 70


3126:src/display.c **** 	    }
3127:src/display.c **** 	    skip = 1;
3128:src/display.c **** 	  }
3129:src/display.c **** 	  else
3130:src/display.c **** #endif
3131:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3132:src/display.c **** 	      annuc = 1;
3133:src/display.c **** 	  goto nostk;
3134:src/display.c **** 	}
3135:src/display.c **** 	show_stack();
3136:src/display.c ****       nostk:	show_flags();
3137:src/display.c **** 	if (!skip) {
3138:src/display.c **** 	  if (State2.runmode) {
3139:src/display.c **** 	  only_update_x:
3140:src/display.c **** 	    p = get_cmdline();
3141:src/display.c **** 	    if (p == NULL || cata) {
3142:src/display.c **** 	      if (ShowRegister != -1) {
3143:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3144:src/display.c **** 		format_reg(ShowRegister, CNULL);
3145:src/display.c **** 	      }
3146:src/display.c **** 	      else
3147:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3148:src/display.c **** 	    } else {
3149:src/display.c **** 	      disp_x(p);
3150:src/display.c **** 	      x_disp = 1;
3151:src/display.c **** 	    }
3152:src/display.c **** 	    if (WasDataEntry) {
3153:src/display.c **** 	      goto finish;
3154:src/display.c **** 	    }
3155:src/display.c **** 	  } else {
3156:src/display.c **** 	    unsigned int pc = state_pc();
3157:src/display.c **** 	    unsigned int upc = user_pc(pc);
3158:src/display.c **** 	    const int n = nLIB(pc);
3159:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3160:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3161:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3162:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3163:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3164:src/display.c **** #ifndef REALBUILD
3165:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3166:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3167:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3168:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3169:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3170:src/display.c **** 	      char *b=buf;
3171:src/display.c **** 	      char *l=LastDisplayedNumber;
3172:src/display.c **** 	      *l++=' ';
3173:src/display.c **** 	      while(*b) {
3174:src/display.c **** 		*l++=*b++;
3175:src/display.c **** 		*l++=' ';
3176:src/display.c **** 	      }
3177:src/display.c **** 	      *l=0;
3178:src/display.c **** 	    }
3179:src/display.c **** #endif
3180:src/display.c **** 	  }
3181:src/display.c **** 	}
3182:src/display.c **** 	set_annunciators();
ARM GAS  /tmp/ccadPcKu.s 			page 71


3183:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3184:src/display.c **** 	  ShowRPN = 0;
3185:src/display.c **** 	  dot(RPN, 0);
3186:src/display.c **** 	}
3187:src/display.c **** 	// disp_temp disables the <- key
3188:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3189:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3190:src/display.c **** 
3191:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3192:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3193:src/display.c **** 	  annunciators();
3194:src/display.c ****  	State2.hms = 0;
3195:src/display.c **** #else
3196:src/display.c **** 
3197:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3198:src/display.c **** 	  annunciators();
3199:src/display.c **** 	
3200:src/display.c **** 
3201:src/display.c **** 
3202:src/display.c **** #endif
3203:src/display.c **** 
3204:src/display.c ****       finish:
3205:src/display.c **** 	State2.version = 0;
3206:src/display.c **** 	State2.disp_as_alpha = 0;
3207:src/display.c **** 	State2.smode = SDISP_NORMAL;
3208:src/display.c **** 	State2.invalid_disp = 0;
3209:src/display.c **** 	ShowRegister = regX_idx;
3210:src/display.c **** 	DispMsg = CNULL;
3211:src/display.c **** 	DispPlot = 0;
3212:src/display.c **** 	State2.disp_small = 0;
3213:src/display.c **** 	finish_display();
3214:src/display.c **** #ifdef CONSOLE
3215:src/display.c **** 	JustDisplayed = 1;
3216:src/display.c **** #endif
3217:src/display.c ****       }
3218:src/display.c **** #endif
3219:src/display.c ****       /*
3220:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3221:src/display.c ****        */
3222:src/display.c ****       void frozen_display()
3223:src/display.c ****       {
3224:src/display.c **** 	State2.disp_freeze = 0;
3225:src/display.c **** 	display();
3226:src/display.c **** 	State2.disp_freeze = 1;
3227:src/display.c ****       }
3228:src/display.c **** 
3229:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3230:src/display.c **** 	int glen = *graphic++;
3231:src/display.c **** 	int i, j;
3232:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3233:src/display.c **** 	unsigned long long int mat[6];
3234:src/display.c **** 
3235:src/display.c **** 	xset(mat, 0, sizeof(mat));
3236:src/display.c **** #endif
3237:src/display.c **** #ifndef REALBUILD
3238:src/display.c **** 	forceDispPlot=1;
3239:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 72


3240:src/display.c **** 	if (glen <= 0)			return;
3241:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3242:src/display.c **** 
3243:src/display.c **** 	for (i=0; i<6; i++)
3244:src/display.c **** 	  for (j=1; j<=glen; j++) {
3245:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3246:src/display.c **** 	    if (graphic[j] & (1 << i))
3247:src/display.c **** 	      mat[i] |= 1LL << j;
3248:src/display.c **** #else
3249:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3250:src/display.c **** #endif
3251:src/display.c **** 	  }
3252:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3253:src/display.c **** 	set_status_grob(mat);
3254:src/display.c **** #endif
3255:src/display.c ****       }
3256:src/display.c **** 
3257:src/display.c **** 
3258:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3259:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3260:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3261:src/display.c ****        * column is almost always blank.
3262:src/display.c ****        */
3263:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3264:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3265:src/display.c ****       }
3266:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3267:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3268:src/display.c ****       }
3269:src/display.c **** 
3270:src/display.c ****       
3271:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3271 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3272:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3272 2 view .LVU201
3273:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3274:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3275:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3275 2 view .LVU202
3276:src/display.c **** #endif
3277:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3277 2 view .LVU203
3278:src/display.c **** 	int i, j;
 686              		.loc 1 3278 2 view .LVU204
3279:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3279 2 view .LVU205
3271:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3271 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
ARM GAS  /tmp/ccadPcKu.s 			page 73


 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3280:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3281:src/display.c **** 	unsigned long long int mat[6];
3282:src/display.c **** 
3283:src/display.c **** 	xset(mat, 0, sizeof(mat));
3284:src/display.c **** #endif
3285:src/display.c **** #ifndef REALBUILD
3286:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3286 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3271:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3271 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3279:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3279 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3271:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3271 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3279:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3279 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3279:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3279 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3286 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3286 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3279:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3279 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3286 2 is_stmt 1 view .LVU216
3279:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3279 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3271:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3271 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3286 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3287:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3288:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3288 2 is_stmt 1 view .LVU220
 734              		.loc 1 3288 14 view .LVU221
ARM GAS  /tmp/ccadPcKu.s 			page 74


 735              		.loc 1 3288 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3288 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3288 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3288 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3289:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3289 4 is_stmt 1 view .LVU226
 749              		.loc 1 3289 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3289 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3289 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3289 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3290:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3291:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3292:src/display.c **** 	      ++i;
3293:src/display.c **** 	  }
3294:src/display.c **** 	  else {
3295:src/display.c **** 	    ++i;
3296:src/display.c **** 	  }
3297:src/display.c **** 	}
3298:src/display.c **** #endif
3299:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3299 2 is_stmt 1 view .LVU231
3300:src/display.c **** #endif
3301:src/display.c **** #ifdef RP_PREFIX
3302:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3302 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3299:src/display.c **** #endif
 763              		.loc 1 3299 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3302 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3303:src/display.c **** #endif
3304:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3305:src/display.c **** 	findlengths(posns, smallp);
3306:src/display.c **** #endif
3307:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3307 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3299:src/display.c **** #endif
 770              		.loc 1 3299 15 view .LVU236
ARM GAS  /tmp/ccadPcKu.s 			page 75


 771 0046 0B70     		strb	r3, [r1]
3302:src/display.c **** #endif
 772              		.loc 1 3302 2 is_stmt 1 view .LVU237
 773              		.loc 1 3307 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3307 8 view .LVU239
 776              		.loc 1 3307 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3307 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3277:src/display.c **** 	int i, j;
 781              		.loc 1 3277 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB190:
3308:src/display.c **** 	  int c;
3309:src/display.c **** 	  int width;
3310:src/display.c **** 	  unsigned char cmap[6];
3311:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3312:src/display.c **** 	  int real_width;
3313:src/display.c **** 	  int current_smallp;
3314:src/display.c **** 
3315:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3316:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3317:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3318:src/display.c **** 	  //           01 -> (not used)
3319:src/display.c **** 	  //           10 -> use big font
3320:src/display.c **** 	  //           11 -> use small font
3321:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3322:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3322 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE190:
3307:src/display.c **** 	  int c;
 787              		.loc 1 3307 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3275:src/display.c **** #endif
 790              		.loc 1 3275 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB199:
3308:src/display.c **** 	  int c;
 794              		.loc 1 3308 4 is_stmt 1 view .LVU246
3309:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3309 4 view .LVU247
3310:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3310 4 view .LVU248
3312:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3312 4 view .LVU249
3313:src/display.c **** 
 798              		.loc 1 3313 4 view .LVU250
 799              		.loc 1 3322 4 view .LVU251
 800              		.loc 1 3322 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
ARM GAS  /tmp/ccadPcKu.s 			page 76


3323:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3323 6 is_stmt 1 view .LVU253
 805              		.loc 1 3323 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3324:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3324 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3323:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3323 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3324 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3325:src/display.c **** 	    default:
3326:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3327:src/display.c **** 	      break;
3328:src/display.c **** 	    case 0x40:	current_smallp = 0;
3329:src/display.c **** 	      break;
3330:src/display.c **** 	    case 0x60:	current_smallp = 1;
3331:src/display.c **** 	      break;
3332:src/display.c **** 	    }
3333:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3333 6 view .LVU258
 820              		.loc 1 3333 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3333 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3334:src/display.c **** 	    str += 3;
 831              		.loc 1 3334 6 is_stmt 1 discriminator 4 view .LVU261
3335:src/display.c **** 
3336:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3336 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3334:src/display.c **** 	    str += 3;
 836              		.loc 1 3334 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3336 6 is_stmt 1 discriminator 4 view .LVU264
3337:src/display.c **** 	  } else {
3338:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3339:src/display.c **** 	    real_width = width = charlengths(c);
ARM GAS  /tmp/ccadPcKu.s 			page 77


3340:src/display.c **** 	    current_smallp = smallp;
3341:src/display.c **** 	  }
3342:src/display.c **** 
3343:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3343 4 discriminator 4 view .LVU265
 843              		.loc 1 3343 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3343 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3343 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3344:src/display.c **** 	    break;
3345:src/display.c **** 
3346:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3346 4 is_stmt 1 view .LVU269
 853              		.loc 1 3346 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3347:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3347 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3346:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3346 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3347 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3348:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3348 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3349:src/display.c **** 	  }
3350:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3350 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3351:src/display.c **** #else
3352:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3353:src/display.c **** 
3354:src/display.c **** 	  //cmap = &charset[c][0];
3355:src/display.c **** 	  width = charlengths(c);
3356:src/display.c **** 
3357:src/display.c **** 	  if (x + width > b_w+1)
3358:src/display.c **** 	    break;
3359:src/display.c **** 
3360:src/display.c **** 	  /* Decode the packed character bytes */
3361:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
ARM GAS  /tmp/ccadPcKu.s 			page 78


3362:src/display.c **** #endif
3363:src/display.c **** 
3364:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3364 4 view .LVU276
 877              		.loc 1 3364 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3364 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3365 16 is_stmt 1 view .LVU279
 889              		.loc 1 3365 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3366:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3366 8 is_stmt 1 view .LVU281
 893              		.loc 1 3366 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3365 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3365 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB191:
 907              	.LBB192:
 337:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 337 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 337:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 337 11 view .LVU286
 912              	.LBE192:
 913              	.LBE191:
 914              		.loc 1 3366 8 is_stmt 1 view .LVU287
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3365 25 view .LVU288
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3365 16 view .LVU289
3365:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3365 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
ARM GAS  /tmp/ccadPcKu.s 			page 79


 921              	.L85:
 922              		.loc 1 3366 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3367:src/display.c **** 		break;
3368:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3369:src/display.c **** 	      if (cmap[i] & (1 << j))
3370:src/display.c **** 		mat[i] |= 1LL << (x+j);
3371:src/display.c **** #else
3372:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3372 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB196:
 929              	.LBI191:
 336:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 336 6 discriminator 2 view .LVU293
 931              	.LBB193:
 337:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 337 3 discriminator 2 view .LVU294
 337:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 337 11 discriminator 2 view .LVU295
 338:src/display.c **** }
 934              		.loc 1 338 8 discriminator 2 view .LVU296
 935              	.LBE193:
 936              	.LBE196:
 937              		.loc 1 3372 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3372 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB197:
 942              	.LBB194:
 337:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 337 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 337:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 337 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 337:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 337 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE194:
 950              	.LBE197:
3365:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3365 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB198:
 955              	.LBB195:
 338:src/display.c **** }
 956              		.loc 1 338 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 338:src/display.c **** }
 959              		.loc 1 338 8 view .LVU304
 960              	.LBE195:
 961              	.LBE198:
ARM GAS  /tmp/ccadPcKu.s 			page 80


3366:src/display.c **** 		break;
 962              		.loc 1 3366 8 is_stmt 1 view .LVU305
3365:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3365 25 view .LVU306
3365:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3365 16 view .LVU307
3365:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3365 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3364:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3364 19 is_stmt 1 view .LVU309
3364:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3364 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3364:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3364 14 is_stmt 1 view .LVU311
3364:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3364 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3373:src/display.c **** #endif
3374:src/display.c **** 	    }
3375:src/display.c **** 	  x += width;
 980              		.loc 1 3375 4 is_stmt 1 view .LVU313
 981              	.LBE199:
3307:src/display.c **** 	  int c;
 982              		.loc 1 3307 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB200:
 986              		.loc 1 3375 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3375 6 view .LVU316
 990              	.LBE200:
3307:src/display.c **** 	  int c;
 991              		.loc 1 3307 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3307:src/display.c **** 	  int c;
 993              		.loc 1 3307 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3307:src/display.c **** 	  int c;
 996              		.loc 1 3307 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB201:
3322:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3322 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE201:
ARM GAS  /tmp/ccadPcKu.s 			page 81


 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB202:
3308:src/display.c **** 	  int width;
 1005              		.loc 1 3308 4 is_stmt 1 view .LVU321
3309:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3309 4 view .LVU322
3310:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3310 4 view .LVU323
3312:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3312 4 view .LVU324
3313:src/display.c **** 
 1009              		.loc 1 3313 4 view .LVU325
3322:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3322 4 view .LVU326
3322:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3322 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3338:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3338 6 is_stmt 1 view .LVU328
3338:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3338 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3339:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3339 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3338:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3338 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3339:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3339 6 is_stmt 1 view .LVU332
3339:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3339 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3339:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3339 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3343:src/display.c **** 	    break;
 1034              		.loc 1 3343 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3339:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3339 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3340:src/display.c **** 	  }
 1039              		.loc 1 3340 6 is_stmt 1 view .LVU337
3343:src/display.c **** 	    break;
 1040              		.loc 1 3343 4 view .LVU338
3343:src/display.c **** 	    break;
ARM GAS  /tmp/ccadPcKu.s 			page 82


 1041              		.loc 1 3343 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3343:src/display.c **** 	    break;
 1044              		.loc 1 3343 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3343:src/display.c **** 	    break;
 1049              		.loc 1 3343 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3343:src/display.c **** 	    break;
 1053              		.loc 1 3343 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3343:src/display.c **** 	    break;
 1057              		.loc 1 3343 7 view .LVU343
 1058              	.LBE202:
3376:src/display.c **** 	}
3377:src/display.c **** 
3378:src/display.c **** 
3379:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3380:src/display.c **** 	set_status_grob(mat);
3381:src/display.c **** #else
3382:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3382 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3382 20 view .LVU345
 1061              		.loc 1 3382 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3383:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3383 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3382:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3382 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3383 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3382:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3382 27 is_stmt 1 discriminator 3 view .LVU350
3382:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3382 20 discriminator 3 view .LVU351
3382:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3382 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3384:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 83


3385:src/display.c ****       }
 1081              		.loc 1 3385 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB203:
3330:src/display.c **** 	      break;
 1091              		.loc 1 3330 17 is_stmt 1 view .LVU354
3331:src/display.c **** 	    }
 1092              		.loc 1 3331 8 view .LVU355
3333:src/display.c **** 	    str += 3;
 1093              		.loc 1 3333 6 view .LVU356
3333:src/display.c **** 	    str += 3;
 1094              		.loc 1 3333 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3330:src/display.c **** 	      break;
 1097              		.loc 1 3330 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3328:src/display.c **** 	      break;
 1104              		.loc 1 3328 17 is_stmt 1 view .LVU359
3329:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3329 8 view .LVU360
3333:src/display.c **** 	    str += 3;
 1106              		.loc 1 3333 6 view .LVU361
3333:src/display.c **** 	    str += 3;
 1107              		.loc 1 3333 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3328:src/display.c **** 	      break;
 1110              		.loc 1 3328 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3328:src/display.c **** 	      break;
 1116              		.loc 1 3328 32 view .LVU364
 1117              	.LBE203:
3290:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3290 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3291:src/display.c **** 	      ++i;
 1123              		.loc 1 3291 6 view .LVU366
ARM GAS  /tmp/ccadPcKu.s 			page 84


3291:src/display.c **** 	      ++i;
 1124              		.loc 1 3291 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB204:
3291:src/display.c **** 	      ++i;
 1133              		.loc 1 3291 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3291:src/display.c **** 	      ++i;
 1136              		.loc 1 3291 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3291:src/display.c **** 	      ++i;
 1141              		.loc 1 3291 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE204:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 439:src/display.c ****   union {
 1169              		.loc 1 439 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 440:src/display.c ****     char buf[4];
 1173              		.loc 1 440 3 view .LVU372
 444:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 444 3 view .LVU373
 458:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 85


 1175              		.loc 1 458 3 view .LVU374
 461:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 461 3 view .LVU375
 439:src/display.c ****   union {
 1177              		.loc 1 439 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 462:src/display.c ****     negative = 1;
 1185              		.loc 1 462 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 439:src/display.c ****   union {
 1187              		.loc 1 439 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 439:src/display.c ****   union {
 1190              		.loc 1 439 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 462:src/display.c ****     negative = 1;
 1193              		.loc 1 462 3 is_stmt 1 view .LVU380
 439:src/display.c ****   union {
 1194              		.loc 1 439 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 462:src/display.c ****     negative = 1;
 1196              		.loc 1 462 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 461:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 461 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 469 3 is_stmt 1 view .LVU384
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 469 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 474:src/display.c **** #endif
 1204              		.loc 1 474 7 is_stmt 1 view .LVU386
 474:src/display.c **** #endif
 1205              		.loc 1 474 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 476 2 is_stmt 1 view .LVU388
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 476 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 476 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 476 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
ARM GAS  /tmp/ccadPcKu.s 			page 86


 1215              	.LVL110:
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 476 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 483:src/display.c ****     }
 1219              		.loc 1 483 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 463:src/display.c ****     exp = -exp;
 1223              		.loc 1 463 5 view .LVU394
 464:src/display.c ****   }
 1224              		.loc 1 464 5 view .LVU395
 464:src/display.c ****   }
 1225              		.loc 1 464 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 469 3 is_stmt 1 view .LVU397
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 469 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 474:src/display.c **** #endif
 1231              		.loc 1 474 7 is_stmt 1 view .LVU399
 474:src/display.c **** #endif
 1232              		.loc 1 474 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 483:src/display.c ****     }
 1237              		.loc 1 483 21 is_stmt 1 discriminator 1 view .LVU401
 483:src/display.c ****     }
 1238              		.loc 1 483 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 483:src/display.c ****     }
 1242              		.loc 1 483 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 531:src/display.c **** #endif
 1246              		.loc 1 531 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 533 7 view .LVU405
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 533 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 534:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
ARM GAS  /tmp/ccadPcKu.s 			page 87


 1256              		.loc 1 534 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 533 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 534:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 534 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 556:src/display.c ****     }
 1267              		.loc 1 556 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 557:src/display.c **** 
 1272              		.loc 1 557 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 554:src/display.c ****     no_number:
 1281              		.loc 1 554 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 556:src/display.c ****     }
 1285              		.loc 1 556 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 557:src/display.c **** 
 1290              		.loc 1 557 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 479:src/display.c **** #else
 1299              		.loc 1 479 12 is_stmt 1 view .LVU415
 479:src/display.c **** #else
 1300              		.loc 1 479 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 479:src/display.c **** #else
ARM GAS  /tmp/ccadPcKu.s 			page 88


 1303              		.loc 1 479 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 483:src/display.c ****     }
 1306              		.loc 1 483 7 is_stmt 1 view .LVU418
 483:src/display.c ****     }
 1307              		.loc 1 483 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 483:src/display.c ****     }
 1311              		.loc 1 483 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 486 7 is_stmt 1 view .LVU421
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 486 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 490:src/display.c **** #endif
 1321              		.loc 1 490 2 is_stmt 1 view .LVU423
 490:src/display.c **** #endif
 1322              		.loc 1 490 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 490:src/display.c **** #endif
 1325              		.loc 1 490 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 490:src/display.c **** #endif
 1328              		.loc 1 490 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 479:src/display.c **** #else
 1332              		.loc 1 479 12 is_stmt 1 view .LVU427
 479:src/display.c **** #else
 1333              		.loc 1 479 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 483:src/display.c ****     }
 1337              		.loc 1 483 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 483:src/display.c ****     }
 1341              		.loc 1 483 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 486 21 is_stmt 1 view .LVU431
ARM GAS  /tmp/ccadPcKu.s 			page 89


 1346              	.LBB205:
 1347              	.LBI205:
 305:src/display.c **** {
 1348              		.loc 1 305 13 view .LVU432
 1349              	.LBB206:
 307:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 307 3 view .LVU433
 307:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 307 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 308:src/display.c **** }
 1355              		.loc 1 308 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 307:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 307 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 308:src/display.c **** }
 1359              		.loc 1 308 3 is_stmt 1 view .LVU437
 309:src/display.c **** 
 1360              		.loc 1 309 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 308:src/display.c **** }
 1362              		.loc 1 308 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 309:src/display.c **** 
 1365              		.loc 1 309 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 309:src/display.c **** 
 1369              		.loc 1 309 1 view .LVU441
 1370              	.LBE206:
 1371              	.LBE205:
 492:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 492 4 is_stmt 1 view .LVU442
 500:src/display.c **** #endif
 1373              		.loc 1 500 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 502:src/display.c **** 	  }
 1379              		.loc 1 502 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 502:src/display.c **** 	  }
 1382              		.loc 1 502 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
ARM GAS  /tmp/ccadPcKu.s 			page 90


 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB47:
 364:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 364 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 371:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 371 5 view .LVU447
 364:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 364 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 364:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 364 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 372:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 372 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 372:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 372 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 373:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 373 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 371:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 371 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 372:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 372 5 is_stmt 1 view .LVU454
 373:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 373 5 view .LVU455
 373:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 373 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 376:src/display.c **** #endif
 1433              		.loc 1 376 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
ARM GAS  /tmp/ccadPcKu.s 			page 91


 376:src/display.c **** #endif
 1436              		.loc 1 376 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 376:src/display.c **** #endif
 1438              		.loc 1 376 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 376:src/display.c **** #endif
 1440              		.loc 1 376 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 376:src/display.c **** #endif
 1444              		.loc 1 376 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 376:src/display.c **** #endif
 1446              		.loc 1 376 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 380:src/display.c **** 
 1448              		.loc 1 380 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 376:src/display.c **** #endif
 1450              		.loc 1 376 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 380:src/display.c **** 
 1453              		.loc 1 380 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 374:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 374 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 376:src/display.c **** #endif
 1461              		.loc 1 376 5 view .LVU467
 376:src/display.c **** #endif
 1462              		.loc 1 376 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE47:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
ARM GAS  /tmp/ccadPcKu.s 			page 92


 346:src/display.c ****   if (res) {
 1484              		.loc 1 346 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 347 3 view .LVU470
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 347 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 348:src/display.c ****   } else {
 1491              		.loc 1 348 5 is_stmt 1 view .LVU472
 348:src/display.c ****   } else {
 1492              		.loc 1 348 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 348:src/display.c ****   } else {
 1494              		.loc 1 348 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 348:src/display.c ****   } else {
 1497              		.loc 1 348 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 358:src/display.c **** 
 1503              		.loc 1 358 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 350 5 is_stmt 1 view .LVU477
 346:src/display.c ****   if (res) {
 1508              		.loc 1 346 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 350 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 350 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 351:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 351 5 is_stmt 1 view .LVU481
 351:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 351 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
ARM GAS  /tmp/ccadPcKu.s 			page 93


 1527              	.LBB209:
 1528              	.LBB210:
 354:src/display.c **** #endif
 1529              		.loc 1 354 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 354:src/display.c **** #endif
 1532              		.loc 1 354 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 354:src/display.c **** #endif
 1534              		.loc 1 354 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 354:src/display.c **** #endif
 1536              		.loc 1 354 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 354:src/display.c **** #endif
 1540              		.loc 1 354 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 354:src/display.c **** #endif
 1542              		.loc 1 354 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 354:src/display.c **** #endif
 1544              		.loc 1 354 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 357:src/display.c **** }
 1548              		.loc 1 357 3 is_stmt 1 view .LVU490
 357:src/display.c **** }
 1549              		.loc 1 357 3 is_stmt 0 view .LVU491
 1550              	.LBE210:
 1551              	.LBE209:
 357:src/display.c **** }
 1552              		.loc 1 357 3 is_stmt 1 view .LVU492
 358:src/display.c **** 
 1553              		.loc 1 358 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 352:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 352 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB212:
 1567              	.LBI209:
 346:src/display.c ****   if (res) {
 1568              		.loc 1 346 14 view .LVU495
 1569              	.LBB211:
 354:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 94


 1570              		.loc 1 354 5 view .LVU496
 354:src/display.c **** #endif
 1571              		.loc 1 354 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE211:
 1580              	.LBE212:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 411:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 411 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 412 3 view .LVU499
 411:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 411 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 412 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 412 10 is_stmt 1 view .LVU502
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 412 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB213:
 1618              	.LBB214:
 406:src/display.c ****   return res;
 1619              		.loc 1 406 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
ARM GAS  /tmp/ccadPcKu.s 			page 95


 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 407:src/display.c **** }
 1623              		.loc 1 407 3 is_stmt 1 view .LVU505
 407:src/display.c **** }
 1624              		.loc 1 407 3 is_stmt 0 view .LVU506
 1625              	.LBE214:
 1626              	.LBE213:
 417:src/display.c ****     }
 1627              		.loc 1 417 7 is_stmt 1 view .LVU507
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 412 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 417:src/display.c ****     }
 1631              		.loc 1 417 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 412 24 is_stmt 1 view .LVU510
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 412 10 view .LVU511
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 412 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 413 5 is_stmt 1 view .LVU513
 414:src/display.c ****     else {
 1641              		.loc 1 414 7 view .LVU514
 416:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 416 7 view .LVU515
 1643              	.LBB217:
 1644              	.LBI213:
 404:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 404 14 view .LVU516
 1646              	.LBB215:
 405:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 405 3 view .LVU517
 406:src/display.c ****   return res;
 1648              		.loc 1 406 8 view .LVU518
 1649              	.LBE215:
 1650              	.LBE217:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 413 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 414:src/display.c ****     else {
 1654              		.loc 1 414 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB218:
 1658              	.LBB216:
 406:src/display.c ****   return res;
 1659              		.loc 1 406 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
ARM GAS  /tmp/ccadPcKu.s 			page 96


 1661              	.LBE216:
 1662              	.LBE218:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 413 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 414:src/display.c ****     else {
 1665              		.loc 1 414 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 412 24 is_stmt 1 view .LVU524
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 412 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 412 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 420:src/display.c **** 
 1680              		.loc 1 420 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB49:
1508:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1508 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1509:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1509 2 view .LVU529
1508:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1508 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
ARM GAS  /tmp/ccadPcKu.s 			page 97


 1711              		.cfi_offset 14, -4
1509:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1509 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1508:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1508 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1509:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1509 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1510:src/display.c **** 	    if (res) {
 1719              		.loc 1 1510 4 is_stmt 1 view .LVU534
1510:src/display.c **** 	    if (res) {
 1720              		.loc 1 1510 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB221:
 1726              	.LBI221:
1508:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1508 18 is_stmt 1 view .LVU536
 1728              	.LBB222:
1511:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1511 6 view .LVU537
1511:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1511 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1512:src/display.c **** 	    } else {
 1732              		.loc 1 1512 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1512:src/display.c **** 	    } else {
 1736              		.loc 1 1512 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1512:src/display.c **** 	    } else {
 1739              		.loc 1 1512 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1512:src/display.c **** 	    } else {
 1743              		.loc 1 1512 8 view .LVU542
 1744              	.LBE222:
 1745              	.LBE221:
1544:src/display.c **** 
 1746              		.loc 1 1544 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1522:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1522 6 is_stmt 1 view .LVU544
1522:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1522 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
ARM GAS  /tmp/ccadPcKu.s 			page 98


 1753 0024 04D4     		bmi	.L196
1526:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1526 6 is_stmt 1 view .LVU546
1526:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1526 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1527:src/display.c **** 	    else {
 1759              		.loc 1 1527 8 is_stmt 1 view .LVU548
1527:src/display.c **** 	    else {
 1760              		.loc 1 1527 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1540:src/display.c **** 	  }
 1763              		.loc 1 1540 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1544:src/display.c **** 
 1765              		.loc 1 1544 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1523:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1523 8 is_stmt 1 view .LVU552
1523:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1523 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1523:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1523 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1523:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1523 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1526:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1526 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB224:
 1783              	.LBB223:
1514:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1514 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1516:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1516 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1517:src/display.c **** #endif
 1793              		.loc 1 1517 8 view .LVU559
1517:src/display.c **** #endif
 1794              		.loc 1 1517 21 is_stmt 0 view .LVU560
ARM GAS  /tmp/ccadPcKu.s 			page 99


 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE223:
 1799              	.LBE224:
1544:src/display.c **** 
 1800              		.loc 1 1544 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1524:src/display.c **** 	    }
 1804              		.loc 1 1524 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1524:src/display.c **** 	    }
 1807              		.loc 1 1524 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1526:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1526 6 is_stmt 1 view .LVU564
 1812              	.L188:
1529:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1529 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1531:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1531 8 view .LVU566
1531:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1531 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1535:src/display.c **** 	      }
 1821              		.loc 1 1535 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1531:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1531 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1532:src/display.c **** 	      }
 1825              		.loc 1 1532 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1535:src/display.c **** 	      }
 1828              		.loc 1 1535 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1537:src/display.c **** #endif
 1832              		.loc 1 1537 8 view .LVU572
1537:src/display.c **** #endif
 1833              		.loc 1 1537 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1540:src/display.c **** 	  }
 1837              		.loc 1 1540 13 view .LVU574
ARM GAS  /tmp/ccadPcKu.s 			page 100


 1838 0078 0120     		movs	r0, #1
1544:src/display.c **** 
 1839              		.loc 1 1544 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE49:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1589:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1589 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1590:src/display.c **** 	int j=0;
 1870              		.loc 1 1590 2 view .LVU577
1591:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1591 2 view .LVU578
1589:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1589 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1589:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1589 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1591:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1591 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1595:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1595 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1589:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1589 62 view .LVU583
ARM GAS  /tmp/ccadPcKu.s 			page 101


 1888 000a 0D46     		mov	r5, r1
1591:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1591 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1592:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1592 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1593:src/display.c **** 
 1893              		.loc 1 1593 2 view .LVU586
1595:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1595 2 view .LVU587
1595:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1595 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1595:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1595 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1596:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1596 4 is_stmt 1 view .LVU590
1596:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1596 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1597:src/display.c **** 	  return;
 1905              		.loc 1 1597 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB225:
 1908              	.LBI225:
 404:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 404 14 view .LVU593
 1910              	.LBB226:
 405:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 405 3 view .LVU594
 405:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 405 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 405:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 405 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 405:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 405 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 405:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 405 19 view .LVU598
 1923              	.LBE226:
 1924              	.LBE225:
1652:src/display.c **** 
 1925              		.loc 1 1652 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccadPcKu.s 			page 102


 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1601:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1601 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1602:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1602 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1603:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1603 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1604:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1604 2 view .LVU603
1604:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1604 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1612:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1612 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1613:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1613 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1614:src/display.c **** 
 1965              		.loc 1 1614 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1616:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1616 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1617:src/display.c **** 	hms_step(&t, &u, &min);
ARM GAS  /tmp/ccadPcKu.s 			page 103


 1976              		.loc 1 1617 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1618:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1618 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1619:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1619 2 view .LVU611
1619:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1619 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1620:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1620 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1620:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1620 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1620:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1620 19 is_stmt 1 view .LVU615
1620:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1620 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1620:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1620 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1621:src/display.c **** 
 2004              		.loc 1 1621 2 is_stmt 1 view .LVU618
1621:src/display.c **** 
 2005              		.loc 1 1621 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1621:src/display.c **** 
 2008              		.loc 1 1621 19 is_stmt 1 discriminator 1 view .LVU620
1621:src/display.c **** 
 2009              		.loc 1 1621 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1621:src/display.c **** 
 2012              		.loc 1 1621 30 is_stmt 1 discriminator 1 view .LVU622
1621:src/display.c **** 
 2013              		.loc 1 1621 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1624:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1624 2 is_stmt 1 view .LVU624
ARM GAS  /tmp/ccadPcKu.s 			page 104


1624:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1624 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1625:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1625 2 is_stmt 1 view .LVU626
 2027              	.LBB228:
 2028              	.LBI228:
 404:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 404 14 view .LVU627
 2030              	.LBB229:
 405:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 405 3 view .LVU628
 405:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 405 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 405:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 405 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 405:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 405 12 is_stmt 1 view .LVU631
 405:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 405 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 405:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 405 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 407:src/display.c **** }
 2047              		.loc 1 407 3 is_stmt 1 view .LVU634
 407:src/display.c **** }
 2048              		.loc 1 407 3 is_stmt 0 view .LVU635
 2049              	.LBE229:
 2050              	.LBE228:
1626:src/display.c **** 
 2051              		.loc 1 1626 2 is_stmt 1 view .LVU636
1629:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1629 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1626:src/display.c **** 
 2055              		.loc 1 1626 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1629:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1629 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
ARM GAS  /tmp/ccadPcKu.s 			page 105


 2060 00c8 03AA     		add	r2, sp, #12
1626:src/display.c **** 
 2061              		.loc 1 1626 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1629:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1629 2 is_stmt 1 view .LVU641
1629:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1629 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1630:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1630 2 is_stmt 1 view .LVU643
 2068              	.LBB231:
 2069              	.LBI231:
 404:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 404 14 view .LVU644
 2071              	.LBB232:
 405:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 405 3 view .LVU645
 405:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 405 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 405:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 405 12 is_stmt 1 view .LVU647
 405:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 405 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 405:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 405 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 407:src/display.c **** }
 2086              		.loc 1 407 3 is_stmt 1 view .LVU650
 407:src/display.c **** }
 2087              		.loc 1 407 3 is_stmt 0 view .LVU651
 2088              	.LBE232:
 2089              	.LBE231:
1631:src/display.c **** 
 2090              		.loc 1 1631 2 is_stmt 1 view .LVU652
1631:src/display.c **** 
 2091              		.loc 1 1631 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1634:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1634 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1631:src/display.c **** 
 2096              		.loc 1 1631 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1634:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1634 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
ARM GAS  /tmp/ccadPcKu.s 			page 106


 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1631:src/display.c **** 
 2102              		.loc 1 1631 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1634:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1634 2 is_stmt 1 view .LVU658
1634:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1634 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1635:src/display.c **** 
 2108              		.loc 1 1635 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1634:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1634 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1635:src/display.c **** 
 2113              		.loc 1 1635 2 is_stmt 1 view .LVU662
1635:src/display.c **** 
 2114              		.loc 1 1635 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1635:src/display.c **** 
 2117              		.loc 1 1635 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1638:src/display.c **** 
 2122              		.loc 1 1638 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1635:src/display.c **** 
 2124              		.loc 1 1635 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1638:src/display.c **** 
 2127              		.loc 1 1638 2 is_stmt 1 view .LVU667
1638:src/display.c **** 
 2128              		.loc 1 1638 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1638:src/display.c **** 
 2132              		.loc 1 1638 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1641:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1641 2 is_stmt 1 view .LVU670
 2138              	.LBB234:
 2139              	.LBI234:
 404:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 404 14 view .LVU671
 2141              	.LBB235:
ARM GAS  /tmp/ccadPcKu.s 			page 107


 405:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 405 3 view .LVU672
 405:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 405 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 405:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 405 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 405:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 405 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 407:src/display.c **** }
 2152              		.loc 1 407 3 is_stmt 1 view .LVU676
 407:src/display.c **** }
 2153              		.loc 1 407 3 is_stmt 0 view .LVU677
 2154              	.LBE235:
 2155              	.LBE234:
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1645 2 is_stmt 1 view .LVU678
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1645 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1645 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1645 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1646:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1646 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB238:
 2169              	.LBI238:
 404:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 404 14 view .LVU683
 2171              	.LBB239:
 405:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 405 3 view .LVU684
 405:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 405 12 view .LVU685
 405:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 405 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE239:
 2178              	.LBE238:
1652:src/display.c **** 
 2179              		.loc 1 1652 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccadPcKu.s 			page 108


 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1605:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1605 4 is_stmt 1 view .LVU688
1605:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1605 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1606:src/display.c **** 	  else
 2191              		.loc 1 1606 6 is_stmt 1 view .LVU690
1606:src/display.c **** 	  else
 2192              		.loc 1 1606 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1606:src/display.c **** 	  else
 2195              		.loc 1 1606 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1606:src/display.c **** 	  else
 2198              		.loc 1 1606 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1606:src/display.c **** 	  else
 2201              		.loc 1 1606 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1609:src/display.c **** 	}
 2205              		.loc 1 1609 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB240:
 2214              	.LBB236:
 405:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 405 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 405:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 405 16 view .LVU697
 2220              	.LBE236:
 2221              	.LBE240:
1647:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1647 9 is_stmt 1 view .LVU698
1647:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1647 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1647:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
ARM GAS  /tmp/ccadPcKu.s 			page 109


 2227              		.loc 1 1647 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1648:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1648 4 is_stmt 1 view .LVU701
1648:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1648 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1648:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1648 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1649:src/display.c **** 	  }
 2239              		.loc 1 1649 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB241:
 2242              	.LBI241:
 404:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 404 14 view .LVU705
 2244              	.LBB242:
 405:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 405 3 view .LVU706
 405:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 405 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 405:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 405 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 405:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 405 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 405:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 405 19 view .LVU710
 2257              	.LBE242:
 2258              	.LBE241:
1608:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1608 6 is_stmt 1 view .LVU711
 2260              	.LBB244:
 2261              	.LBI244:
 293:src/display.c **** {
 2262              		.loc 1 293 13 view .LVU712
 2263              	.LBB245:
 295:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 295 3 view .LVU713
 295:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 295 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 296:src/display.c **** }
 2268              		.loc 1 296 3 view .LVU715
ARM GAS  /tmp/ccadPcKu.s 			page 110


 2269 016c 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 295 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 2272              		.loc 1 296 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 297:src/display.c **** 
 2275              		.loc 1 297 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 297:src/display.c **** 
 2279              		.loc 1 297 1 view .LVU719
 2280              	.LBE245:
 2281              	.LBE244:
 2282              	.LBB246:
 2283              	.LBB237:
 406:src/display.c ****   return res;
 2284              		.loc 1 406 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 406:src/display.c ****   return res;
 2287              		.loc 1 406 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 407:src/display.c **** }
 2291              		.loc 1 407 3 is_stmt 1 view .LVU722
 407:src/display.c **** }
 2292              		.loc 1 407 3 is_stmt 0 view .LVU723
 2293              	.LBE237:
 2294              	.LBE246:
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1645 2 is_stmt 1 view .LVU724
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1645 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1645:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1645 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB247:
 2307              	.LBB227:
 406:src/display.c ****   return res;
 2308              		.loc 1 406 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE227:
ARM GAS  /tmp/ccadPcKu.s 			page 111


 2314              	.LBE247:
1598:src/display.c **** 	}
 2315              		.loc 1 1598 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB248:
 2320              	.LBB233:
 406:src/display.c ****   return res;
 2321              		.loc 1 406 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 406:src/display.c ****   return res;
 2325              		.loc 1 406 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 406:src/display.c ****   return res;
 2328              		.loc 1 406 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 406:src/display.c ****   return res;
 2333              		.loc 1 406 8 view .LVU732
 2334              	.LBE233:
 2335              	.LBE248:
 2336              	.LBB249:
 2337              	.LBB230:
 406:src/display.c ****   return res;
 2338              		.loc 1 406 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 406:src/display.c ****   return res;
 2342              		.loc 1 406 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 406:src/display.c ****   return res;
 2345              		.loc 1 406 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 406:src/display.c ****   return res;
 2350              		.loc 1 406 8 view .LVU736
 2351              	.LBE230:
 2352              	.LBE249:
 2353              	.LBB250:
 2354              	.LBB243:
 406:src/display.c ****   return res;
 2355              		.loc 1 406 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
ARM GAS  /tmp/ccadPcKu.s 			page 112


 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE243:
 2369              	.LBE250:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1655:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1655 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1656:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1656 2 view .LVU739
1657:src/display.c **** 	int j;
 2389              		.loc 1 1657 2 view .LVU740
1658:src/display.c **** 
 2390              		.loc 1 1658 2 view .LVU741
1660:src/display.c **** 	  return 1;
 2391              		.loc 1 1660 2 view .LVU742
1655:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1655 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1660:src/display.c **** 	  return 1;
 2403              		.loc 1 1660 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1655:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1655 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1660:src/display.c **** 	  return 1;
 2408              		.loc 1 1660 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
ARM GAS  /tmp/ccadPcKu.s 			page 113


1660:src/display.c **** 	  return 1;
 2411              		.loc 1 1660 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1661:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1661 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1718:src/display.c **** 
 2418              		.loc 1 1718 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB259:
 2429              	.LBI259:
1655:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1655 18 is_stmt 1 view .LVU750
 2431              	.LBB260:
1662:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1662 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1663:src/display.c **** 	  return 0;
 2438              		.loc 1 1663 2 view .LVU752
1663:src/display.c **** 	  return 0;
 2439              		.loc 1 1663 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1663:src/display.c **** 	  return 0;
 2444              		.loc 1 1663 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1665:src/display.c **** 	  return 0;
 2447              		.loc 1 1665 2 is_stmt 1 view .LVU755
1665:src/display.c **** 	  return 0;
 2448              		.loc 1 1665 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1665:src/display.c **** 	  return 0;
 2453              		.loc 1 1665 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
ARM GAS  /tmp/ccadPcKu.s 			page 114


1667:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1667 2 is_stmt 1 view .LVU758
1667:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1667 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1673:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1673 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1674:src/display.c **** 
 2469              		.loc 1 1674 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1676:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1676 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1677:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1677 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1678:src/display.c **** 
 2487              		.loc 1 1678 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1680:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1680 2 view .LVU765
1680:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1680 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1680:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1680 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1685:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1685 2 is_stmt 1 view .LVU768
ARM GAS  /tmp/ccadPcKu.s 			page 115


1685:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1685 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1685:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1685 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1686:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1686 4 is_stmt 1 view .LVU771
1686:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1686 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1686:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1686 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1657:src/display.c **** 	int j;
 2518              		.loc 1 1657 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1657:src/display.c **** 	int j;
 2521              		.loc 1 1657 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1694:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1694 2 is_stmt 1 view .LVU776
1694:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1694 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1694:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1694 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1695:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1695 2 is_stmt 1 view .LVU779
1695:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1695 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1695:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1695 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1696:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1696 2 is_stmt 1 view .LVU782
1696:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1696 17 is_stmt 0 view .LVU783
ARM GAS  /tmp/ccadPcKu.s 			page 116


 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1696:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1696 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1697:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1697 2 is_stmt 1 view .LVU785
1697:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1697 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1698:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1698 2 is_stmt 1 view .LVU787
1698:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1698 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1702 12 is_stmt 1 view .LVU789
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1702 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1701:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1701 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1703:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1703 4 is_stmt 1 view .LVU792
 2572              	.LBB261:
 2573              	.LBI261:
 404:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 404 14 view .LVU793
 2575              	.LBB262:
 405:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 405 3 view .LVU794
 405:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 405 12 view .LVU795
 405:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 405 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 405:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 405 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 405:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 405 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
ARM GAS  /tmp/ccadPcKu.s 			page 117


 405:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 405 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 407:src/display.c **** }
 2591              		.loc 1 407 3 is_stmt 1 view .LVU800
 407:src/display.c **** }
 2592              		.loc 1 407 3 is_stmt 0 view .LVU801
 2593              	.LBE262:
 2594              	.LBE261:
1704:src/display.c **** 	}
 2595              		.loc 1 1704 4 is_stmt 1 view .LVU802
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1702 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1704:src/display.c **** 	}
 2599              		.loc 1 1704 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1702 24 is_stmt 1 view .LVU805
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1702 12 view .LVU806
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1702 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1707:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1707 2 is_stmt 1 view .LVU808
1707:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1707 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1707:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1707 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1709:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1709 7 is_stmt 1 view .LVU811
1709:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1709 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1712:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1712 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1713:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1713 26 is_stmt 1 view .LVU814
ARM GAS  /tmp/ccadPcKu.s 			page 118


 2628              	.LBB265:
 2629              	.LBB263:
 405:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 405 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 405:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 405 16 view .LVU816
 2637              	.LBE263:
 2638              	.LBE265:
 2639              	.LBB266:
 2640              	.LBB267:
 405:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 405 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 405:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 405 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 407:src/display.c **** }
 2648              		.loc 1 407 3 is_stmt 1 view .LVU819
 407:src/display.c **** }
 2649              		.loc 1 407 3 is_stmt 0 view .LVU820
 2650              	.LBE267:
 2651              	.LBE266:
1715:src/display.c **** 	}
 2652              		.loc 1 1715 4 is_stmt 1 view .LVU821
1713:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1713 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1715:src/display.c **** 	}
 2656              		.loc 1 1715 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1713:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1713 38 is_stmt 1 view .LVU824
1713:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1713 26 view .LVU825
1713:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1713 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1714:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1714 4 is_stmt 1 view .LVU827
 2667              	.LBB269:
 2668              	.LBI266:
 404:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 404 14 view .LVU828
 2670              	.LBB268:
ARM GAS  /tmp/ccadPcKu.s 			page 119


 405:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 405 3 view .LVU829
 405:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 405 12 view .LVU830
 405:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 405 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 405:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 405 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 406:src/display.c ****   return res;
 2680              		.loc 1 406 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 406:src/display.c ****   return res;
 2684              		.loc 1 406 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 406:src/display.c ****   return res;
 2688              		.loc 1 406 8 view .LVU835
 2689              	.LBE268:
 2690              	.LBE269:
 2691              	.LBB270:
 2692              	.LBB264:
 406:src/display.c ****   return res;
 2693              		.loc 1 406 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 406:src/display.c ****   return res;
 2697              		.loc 1 406 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 406:src/display.c ****   return res;
 2701              		.loc 1 406 8 view .LVU838
 2702              	.LBE264:
 2703              	.LBE270:
1708:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1708 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1699:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1699 4 is_stmt 1 view .LVU840
1700:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1700 4 view .LVU841
1700:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1700 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
ARM GAS  /tmp/ccadPcKu.s 			page 120


 2714              	.LVL297:
1702:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1702 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1691:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1691 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1692:src/display.c **** 	}
 2725              		.loc 1 1692 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1657:src/display.c **** 	int j;
 2729              		.loc 1 1657 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1692:src/display.c **** 	}
 2732              		.loc 1 1692 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1657:src/display.c **** 	int j;
 2735              		.loc 1 1657 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1668:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1668 4 is_stmt 1 view .LVU849
1668:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1668 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1669:src/display.c **** 	  else
 2743              		.loc 1 1669 6 is_stmt 1 view .LVU851
1669:src/display.c **** 	  else
 2744              		.loc 1 1669 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1669:src/display.c **** 	  else
 2747              		.loc 1 1669 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1669:src/display.c **** 	  else
 2750              		.loc 1 1669 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1669:src/display.c **** 	  else
 2753              		.loc 1 1669 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1669:src/display.c **** 	  else
 2756              		.loc 1 1669 10 view .LVU856
ARM GAS  /tmp/ccadPcKu.s 			page 121


 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1681:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1681 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1682:src/display.c **** 	}
 2764              		.loc 1 1682 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1687:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1687 6 view .LVU859
1687:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1687 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1687:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1687 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1687:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1687 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1687:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1687 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1688:src/display.c **** 	  }
 2784              		.loc 1 1688 6 is_stmt 1 view .LVU864
1688:src/display.c **** 	  }
 2785              		.loc 1 1688 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1688:src/display.c **** 	  }
 2788              		.loc 1 1688 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1688:src/display.c **** 	  }
 2792              		.loc 1 1688 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1671:src/display.c **** 	}
 2796              		.loc 1 1671 6 is_stmt 1 view .LVU868
 2797              	.LBB271:
 2798              	.LBI271:
 293:src/display.c **** {
 2799              		.loc 1 293 13 view .LVU869
 2800              	.LBB272:
ARM GAS  /tmp/ccadPcKu.s 			page 122


 295:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 295 3 view .LVU870
 295:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 295 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 296:src/display.c **** }
 2805              		.loc 1 296 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 295 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 2809              		.loc 1 296 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 297:src/display.c **** 
 2812              		.loc 1 297 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE272:
 2825              	.LBE271:
 2826              	.LBE260:
 2827              	.LBE259:
 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 559 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 560:src/display.c ****       int c;
ARM GAS  /tmp/ccadPcKu.s 			page 123


 2849              		.loc 1 560 7 view .LVU877
 2850              	.LVL316:
 561:src/display.c ****       unsigned int b;
 2851              		.loc 1 561 7 view .LVU878
 562:src/display.c **** 
 2852              		.loc 1 562 7 view .LVU879
 565:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 565 7 view .LVU880
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 559 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 565:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 565 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 574:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 574 7 is_stmt 1 view .LVU883
 574:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 574 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 574:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 574 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 576:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 576 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 577:src/display.c **** 
 2878              		.loc 1 577 7 view .LVU887
 576:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 576 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 577:src/display.c **** 
 2883              		.loc 1 577 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 580 7 is_stmt 1 view .LVU890
 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 580 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
ARM GAS  /tmp/ccadPcKu.s 			page 124


 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 580 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 582 7 is_stmt 1 view .LVU893
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 582 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 582 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 584:src/display.c **** 
 2901              		.loc 1 584 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 570:src/display.c ****       }
 2905              		.loc 1 570 16 is_stmt 1 view .LVU897
 570:src/display.c ****       }
 2906              		.loc 1 570 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 570:src/display.c ****       }
 2911              		.loc 1 570 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 570:src/display.c ****       }
 2914              		.loc 1 570 39 is_stmt 1 view .LVU900
 574:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 574 7 view .LVU901
 574:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 574 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 574:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 574 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 575:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 575 2 is_stmt 1 view .LVU904
 2923              	.LBB279:
 2924              	.LBI279:
 305:src/display.c **** {
 2925              		.loc 1 305 13 view .LVU905
 2926              	.LBB280:
 307:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 307 3 view .LVU906
 307:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 307 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 308:src/display.c **** }
 2931              		.loc 1 308 3 view .LVU908
ARM GAS  /tmp/ccadPcKu.s 			page 125


 2932 0050 8220     		movs	r0, #130
 307:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 307 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 308:src/display.c **** }
 2935              		.loc 1 308 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 309:src/display.c **** 
 2938              		.loc 1 309 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 309:src/display.c **** 
 2942              		.loc 1 309 1 view .LVU912
 2943              	.LBE280:
 2944              	.LBE279:
 2945              	.LBB281:
 2946              	.LBI281:
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 559 17 is_stmt 1 view .LVU913
 2948              	.LBB282:
 583:src/display.c ****     }
 2949              		.loc 1 583 2 view .LVU914
 2950              	.LBE282:
 2951              	.LBE281:
 584:src/display.c **** 
 2952              		.loc 1 584 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB284:
 2960              	.LBB283:
 583:src/display.c ****     }
 2961              		.loc 1 583 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 583:src/display.c ****     }
 2968              		.loc 1 583 2 view .LVU917
 2969              	.LBE283:
 2970              	.LBE284:
 581:src/display.c ****       if (get_overflow())
 2971              		.loc 1 581 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
ARM GAS  /tmp/ccadPcKu.s 			page 126


 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1368:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1368 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1368:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1368 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1368:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1368 67 view .LVU921
 3019 0006 1546     		mov	r5, r2
 3020 0008 0646     		mov	r6, r0
 3021 000a 0F46     		mov	r7, r1
1369:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1369 2 is_stmt 1 view .LVU922
1369:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1369 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1369:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1369 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L377
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1375:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
ARM GAS  /tmp/ccadPcKu.s 			page 127


 3031              		.loc 1 1375 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1369:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1369 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1370:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1370 2 is_stmt 1 view .LVU927
1371:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1371 2 view .LVU928
1372:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1372 2 view .LVU929
1373:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1373 2 view .LVU930
1374:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1374 2 view .LVU931
1375:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1375 2 view .LVU932
1375:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1375 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1376:src/display.c **** 
 3045              		.loc 1 1376 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1378:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1378 2 view .LVU935
 3048 0020 00F24181 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L377+4
 3050 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3051              	.LVL334:
1386:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1386 2 view .LVU936
1386:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1386 5 is_stmt 0 view .LVU937
 3054 002a 002D     		cmp	r5, #0
 3055 002c 00F04181 		beq	.L368
 3056              	.LVL335:
 3057              	.L288:
1391:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1391 2 is_stmt 1 view .LVU938
1391:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1391 24 is_stmt 0 view .LVU939
 3060 0030 0AF1FF33 		add	r3, r10, #-1
1391:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1391 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1391:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1391 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F380 		bne	.L369
1408:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1408 4 is_stmt 1 view .LVU942
1408:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1408 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
ARM GAS  /tmp/ccadPcKu.s 			page 128


 3070 0046 17DC     		bgt	.L299
 3071              	.LBB285:
1409:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1409 6 is_stmt 1 view .LVU944
1409:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1409 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF1200C 		sub	ip, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA0CF3 		lsl	r3, r1, ip
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1410:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1410 6 is_stmt 1 view .LVU946
1409:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1409 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1410:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1410 9 view .LVU948
 3087 0068 3040     		ands	r0, r0, r6
 3088 006a 3940     		ands	r1, r1, r7
 3089              	.LVL337:
1411:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1411 9 view .LVU949
 3091 006c BAF10A0F 		cmp	r10, #10
1410:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1410 9 view .LVU950
 3093 0070 0646     		mov	r6, r0
 3094              	.LVL338:
1410:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1410 9 view .LVU951
 3096 0072 0F46     		mov	r7, r1
1411:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1411 6 is_stmt 1 view .LVU952
1411:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1411 9 is_stmt 0 view .LVU953
 3099 0074 00F03D81 		beq	.L370
 3100              	.LVL339:
 3101              	.L299:
1411:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1411 9 view .LVU954
 3103              	.LBE285:
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1415 4 is_stmt 1 view .LVU955
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1415 8 is_stmt 0 view .LVU956
 3106 0078 B54B     		ldr	r3, .L377+8
 3107 007a 1B68     		ldr	r3, [r3]
 3108 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1415 7 view .LVU957
 3110 0080 9A07     		lsls	r2, r3, #30
 3111 0082 41D5     		bpl	.L330
1418:src/display.c **** 	    v = (unsigned long long int)vs;
ARM GAS  /tmp/ccadPcKu.s 			page 129


 3112              		.loc 1 1418 11 is_stmt 1 view .LVU958
 3113              	.LBB286:
1426:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1426 6 view .LVU959
1427:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1427 6 view .LVU960
1427:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1427 25 is_stmt 0 view .LVU961
 3117 0084 4FEA5A02 		lsr	r2, r10, #1
 3118              	.LVL340:
1428:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1428 6 is_stmt 1 view .LVU962
1428:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1428 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1428:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1428 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1429:src/display.c **** 
 3131              		.loc 1 1429 6 is_stmt 1 discriminator 4 view .LVU965
1431:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1431 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0308 		add	r8, fp, r3
1431:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1431 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1431:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1431 21 discriminator 4 view .LVU968
 3138 00a2 B8FBF3F8 		udiv	r8, r8, r3
1432:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1432 6 discriminator 4 view .LVU969
 3140 00a6 B8F1000F 		cmp	r8, #0
1429:src/display.c **** 
 3141              		.loc 1 1429 8 discriminator 4 view .LVU970
 3142 00aa 3046     		mov	r0, r6
 3143 00ac 3946     		mov	r1, r7
 3144              	.LVL343:
1431:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1431 6 is_stmt 1 discriminator 4 view .LVU971
1432:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1432 6 discriminator 4 view .LVU972
1432:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1432 16 discriminator 4 view .LVU973
1432:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1432 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ae 40F38381 		ble	.L331
 3150 00b2 05AC     		add	r4, sp, #20
 3151 00b4 DFF8A4B2 		ldr	fp, .L377+20
 3152              	.LVL344:
ARM GAS  /tmp/ccadPcKu.s 			page 130


1432:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1432 6 discriminator 4 view .LVU975
 3154 00b8 08EB0406 		add	r6, r8, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB287:
1433:src/display.c **** 	      v /= b;
 3158              		.loc 1 1433 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00bc 5246     		mov	r2, r10
 3160 00be 0023     		movs	r3, #0
 3161 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1434:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1434 8 discriminator 3 view .LVU977
1435:src/display.c **** 	    }
 3164              		.loc 1 1435 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c8 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1435:src/display.c **** 	    }
 3168              		.loc 1 1435 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE287:
1432:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1432 21 discriminator 3 view .LVU980
1432:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1432 16 discriminator 3 view .LVU981
1432:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1432 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00cc B442     		cmp	r4, r6
 3174 00ce F5D1     		bne	.L306
 3175 00d0 08F1FF31 		add	r1, r8, #-1
 3176              	.LVL348:
1432:src/display.c **** 	      const int r = v % b;
 3177              		.loc 1 1432 6 view .LVU983
 3178 00d4 4446     		mov	r4, r8
 3179              	.LVL349:
 3180              	.L298:
1432:src/display.c **** 	      const int r = v % b;
 3181              		.loc 1 1432 6 view .LVU984
 3182              	.LBE286:
1445:src/display.c **** 	if (res) {
 3183              		.loc 1 1445 2 is_stmt 1 view .LVU985
1446:src/display.c **** 	  if (sign) *res++ = '-';
 3184              		.loc 1 1446 2 view .LVU986
1446:src/display.c **** 	  if (sign) *res++ = '-';
 3185              		.loc 1 1446 5 is_stmt 0 view .LVU987
 3186 00d6 002D     		cmp	r5, #0
 3187 00d8 3ED0     		beq	.L307
 3188              	.LVL350:
 3189              	.L371:
1447:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3190              		.loc 1 1447 4 is_stmt 1 view .LVU988
1447:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3191              		.loc 1 1447 7 is_stmt 0 view .LVU989
 3192 00da 049B     		ldr	r3, [sp, #16]
 3193 00dc 13B1     		cbz	r3, .L308
1447:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
ARM GAS  /tmp/ccadPcKu.s 			page 131


 3194              		.loc 1 1447 14 is_stmt 1 discriminator 1 view .LVU990
 3195              	.LVL351:
1447:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3196              		.loc 1 1447 21 is_stmt 0 discriminator 1 view .LVU991
 3197 00de 2D23     		movs	r3, #45
 3198 00e0 05F8013B 		strb	r3, [r5], #1
 3199              	.LVL352:
 3200              	.L308:
1448:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3201              		.loc 1 1448 4 is_stmt 1 view .LVU992
1448:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3202              		.loc 1 1448 7 is_stmt 0 view .LVU993
 3203 00e4 0D2C     		cmp	r4, #13
 3204 00e6 00F3E980 		bgt	.L309
1455:src/display.c **** 	      *res++ = buf[i];
 3205              		.loc 1 1455 12 is_stmt 1 view .LVU994
 3206              	.LVL353:
1455:src/display.c **** 	      *res++ = buf[i];
 3207              		.loc 1 1455 12 is_stmt 0 view .LVU995
 3208 00ea 481C     		adds	r0, r1, #1
 3209 00ec 09D0     		beq	.L285
 3210 00ee 0131     		adds	r1, r1, #1
 3211 00f0 05AA     		add	r2, sp, #20
 3212 00f2 013D     		subs	r5, r5, #1
 3213 00f4 1144     		add	r1, r1, r2
 3214              	.LVL354:
 3215              	.L312:
1456:src/display.c **** 	  }
 3216              		.loc 1 1456 8 is_stmt 1 view .LVU996
1456:src/display.c **** 	  }
 3217              		.loc 1 1456 15 is_stmt 0 view .LVU997
 3218 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3219              	.LVL355:
1456:src/display.c **** 	  }
 3220              		.loc 1 1456 15 view .LVU998
 3221 00fa 05F8013F 		strb	r3, [r5, #1]!
 3222              	.LVL356:
1455:src/display.c **** 	      *res++ = buf[i];
 3223              		.loc 1 1455 12 is_stmt 1 view .LVU999
1455:src/display.c **** 	      *res++ = buf[i];
 3224              		.loc 1 1455 12 is_stmt 0 view .LVU1000
 3225 00fe 9142     		cmp	r1, r2
 3226 0100 F9D1     		bne	.L312
 3227              	.LVL357:
 3228              	.L285:
1503:src/display.c **** 
 3229              		.loc 1 1503 7 view .LVU1001
 3230 0102 17B0     		add	sp, sp, #92
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed
 3234 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3235              	.LVL358:
 3236              	.L330:
 3237              		.cfi_restore_state
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3238              		.loc 1 1415 25 discriminator 1 view .LVU1002
ARM GAS  /tmp/ccadPcKu.s 			page 132


 3239 0108 56EA0703 		orrs	r3, r6, r7
 3240 010c 00F0C480 		beq	.L293
1418:src/display.c **** 	    v = (unsigned long long int)vs;
 3241              		.loc 1 1418 11 is_stmt 1 view .LVU1003
1419:src/display.c **** 	    for (i=0; v != 0; i++) {
 3242              		.loc 1 1419 6 view .LVU1004
 3243 0110 DFF848B2 		ldr	fp, .L377+20
 3244              	.LVL359:
1419:src/display.c **** 	    for (i=0; v != 0; i++) {
 3245              		.loc 1 1419 6 is_stmt 0 view .LVU1005
 3246 0114 CDF800A0 		str	r10, [sp]
 3247 0118 0023     		movs	r3, #0
1419:src/display.c **** 	    for (i=0; v != 0; i++) {
 3248              		.loc 1 1419 8 view .LVU1006
 3249 011a B046     		mov	r8, r6
 3250 011c D946     		mov	r9, fp
 3251 011e 3E46     		mov	r6, r7
1420:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1420 6 is_stmt 1 view .LVU1007
 3253              	.LVL360:
1420:src/display.c **** 	      const int r = v % b;
 3254              		.loc 1 1420 16 view .LVU1008
 3255 0120 9B46     		mov	fp, r3
 3256 0122 05AF     		add	r7, sp, #20
 3257              	.LVL361:
 3258              	.L304:
 3259              	.LBB288:
1421:src/display.c **** 	      v /= b;
 3260              		.loc 1 1421 8 discriminator 3 view .LVU1009
 3261 0124 4046     		mov	r0, r8
 3262 0126 3146     		mov	r1, r6
 3263 0128 5246     		mov	r2, r10
 3264 012a 5B46     		mov	r3, fp
 3265 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3266              	.LVL362:
 3267 0130 3346     		mov	r3, r6
 3268 0132 9446     		mov	ip, r2
 3269              	.LVL363:
1422:src/display.c **** 	      buf[i] = DIGITS[r];
 3270              		.loc 1 1422 8 discriminator 3 view .LVU1010
 3271              	.LBE288:
1420:src/display.c **** 	      const int r = v % b;
 3272              		.loc 1 1420 6 is_stmt 0 discriminator 3 view .LVU1011
 3273 0134 5B45     		cmp	r3, fp
 3274 0136 4246     		mov	r2, r8
 3275              	.LVL364:
 3276              	.LBB289:
1423:src/display.c **** 	    }
 3277              		.loc 1 1423 15 discriminator 3 view .LVU1012
 3278 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3279              	.LVL365:
1423:src/display.c **** 	    }
 3280              		.loc 1 1423 15 discriminator 3 view .LVU1013
 3281 013c 07F801CB 		strb	ip, [r7], #1
 3282              	.LBE289:
1420:src/display.c **** 	      const int r = v % b;
 3283              		.loc 1 1420 6 discriminator 3 view .LVU1014
ARM GAS  /tmp/ccadPcKu.s 			page 133


 3284 0140 08BF     		it	eq
 3285 0142 5245     		cmpeq	r2, r10
 3286              	.LBB290:
1422:src/display.c **** 	      buf[i] = DIGITS[r];
 3287              		.loc 1 1422 10 discriminator 3 view .LVU1015
 3288 0144 0E46     		mov	r6, r1
 3289              	.LVL366:
1423:src/display.c **** 	    }
 3290              		.loc 1 1423 8 is_stmt 1 discriminator 3 view .LVU1016
 3291              	.LBE290:
1420:src/display.c **** 	      const int r = v % b;
 3292              		.loc 1 1420 24 discriminator 3 view .LVU1017
 3293              	.LBB291:
1422:src/display.c **** 	      buf[i] = DIGITS[r];
 3294              		.loc 1 1422 10 is_stmt 0 discriminator 3 view .LVU1018
 3295 0146 8046     		mov	r8, r0
 3296 0148 2146     		mov	r1, r4
 3297              	.LVL367:
1422:src/display.c **** 	      buf[i] = DIGITS[r];
 3298              		.loc 1 1422 10 discriminator 3 view .LVU1019
 3299              	.LBE291:
1420:src/display.c **** 	      const int r = v % b;
 3300              		.loc 1 1420 25 discriminator 3 view .LVU1020
 3301 014a 04F10104 		add	r4, r4, #1
 3302              	.LVL368:
1420:src/display.c **** 	      const int r = v % b;
 3303              		.loc 1 1420 16 is_stmt 1 discriminator 3 view .LVU1021
1420:src/display.c **** 	      const int r = v % b;
 3304              		.loc 1 1420 6 is_stmt 0 discriminator 3 view .LVU1022
 3305 014e E9D2     		bcs	.L304
 3306 0150 DDF800A0 		ldr	r10, [sp]
 3307              	.LVL369:
1445:src/display.c **** 	if (res) {
 3308              		.loc 1 1445 2 is_stmt 1 view .LVU1023
1446:src/display.c **** 	  if (sign) *res++ = '-';
 3309              		.loc 1 1446 2 view .LVU1024
1446:src/display.c **** 	  if (sign) *res++ = '-';
 3310              		.loc 1 1446 5 is_stmt 0 view .LVU1025
 3311 0154 002D     		cmp	r5, #0
 3312 0156 C0D1     		bne	.L371
 3313              	.LVL370:
 3314              	.L307:
 3315              	.LBB292:
1474:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3316              		.loc 1 1474 4 is_stmt 1 view .LVU1026
1474:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3317              		.loc 1 1474 33 is_stmt 0 view .LVU1027
 3318 0158 BAF1020F 		cmp	r10, #2
 3319 015c 00F0F080 		beq	.L372
 3320              	.LVL371:
1475:src/display.c **** 	    : b == 16 ? 2 : 3;
 3321              		.loc 1 1475 4 is_stmt 1 view .LVU1028
1475:src/display.c **** 	    : b == 16 ? 2 : 3;
 3322              		.loc 1 1475 30 is_stmt 0 view .LVU1029
 3323 0160 BAF1040F 		cmp	r10, #4
 3324 0164 00F01F81 		beq	.L373
1474:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
ARM GAS  /tmp/ccadPcKu.s 			page 134


 3325              		.loc 1 1474 33 view .LVU1030
 3326 0168 BAF1100F 		cmp	r10, #16
 3327 016c 0CBF     		ite	eq
 3328 016e 4FF0020A 		moveq	r10, #2
 3329 0172 4FF0030A 		movne	r10, #3
 3330 0176 0C26     		movs	r6, #12
 3331              	.LVL372:
 3332              	.L314:
1477:src/display.c **** #endif
 3333              		.loc 1 1477 4 is_stmt 1 view .LVU1031
 3334 0178 0091     		str	r1, [sp]
 3335 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3336              	.LVL373:
1479:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3337              		.loc 1 1479 4 view .LVU1032
1480:src/display.c **** 	    State2.window = 0;
 3338              		.loc 1 1480 26 is_stmt 0 view .LVU1033
 3339 017e 724B     		ldr	r3, .L377
1479:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3340              		.loc 1 1479 17 view .LVU1034
 3341 0180 744A     		ldr	r2, .L377+12
1480:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1480 26 view .LVU1035
 3343 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1479:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3344              		.loc 1 1479 27 view .LVU1036
 3345 0184 0099     		ldr	r1, [sp]
 3346 0186 91FBF6F1 		sdiv	r1, r1, r6
1480:src/display.c **** 	    State2.window = 0;
 3347              		.loc 1 1480 8 view .LVU1037
 3348 018a C3F3C207 		ubfx	r7, r3, #3, #3
1480:src/display.c **** 	    State2.window = 0;
 3349              		.loc 1 1480 7 view .LVU1038
 3350 018e B942     		cmp	r1, r7
1479:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3351              		.loc 1 1479 17 view .LVU1039
 3352 0190 1160     		str	r1, [r2]
1480:src/display.c **** 	    State2.window = 0;
 3353              		.loc 1 1480 4 is_stmt 1 view .LVU1040
1480:src/display.c **** 	    State2.window = 0;
 3354              		.loc 1 1480 7 is_stmt 0 view .LVU1041
 3355 0192 C0F2F680 		blt	.L316
 3356 0196 06FB07F7 		mul	r7, r6, r7
 3357              	.L317:
1482:src/display.c **** 
 3358              		.loc 1 1482 4 is_stmt 1 view .LVU1042
1482:src/display.c **** 
 3359              		.loc 1 1482 11 is_stmt 0 view .LVU1043
 3360 019a 16AB     		add	r3, sp, #88
 3361 019c 16AA     		add	r2, sp, #88
 3362 019e 1C44     		add	r4, r4, r3
 3363              	.LVL374:
1482:src/display.c **** 
 3364              		.loc 1 1482 11 view .LVU1044
 3365 01a0 D519     		adds	r5, r2, r7
 3366 01a2 0023     		movs	r3, #0
 3367 01a4 453D     		subs	r5, r5, #69
ARM GAS  /tmp/ccadPcKu.s 			page 135


 3368 01a6 04F8443C 		strb	r3, [r4, #-68]
1484:src/display.c **** 	  for (k = 0; k < 12; k++)
 3369              		.loc 1 1484 4 is_stmt 1 view .LVU1045
 3370              	.LVL375:
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3371              		.loc 1 1485 4 view .LVU1046
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3372              		.loc 1 1485 16 view .LVU1047
1482:src/display.c **** 
 3373              		.loc 1 1482 11 is_stmt 0 view .LVU1048
 3374 01aa 2A46     		mov	r2, r5
 3375              	.LVL376:
 3376              	.L319:
1486:src/display.c **** 	      break;
 3377              		.loc 1 1486 6 is_stmt 1 view .LVU1049
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1485 24 view .LVU1050
1486:src/display.c **** 	      break;
 3379              		.loc 1 1486 9 is_stmt 0 view .LVU1051
 3380 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3381 01b0 0029     		cmp	r1, #0
 3382 01b2 00F0EC80 		beq	.L318
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3383              		.loc 1 1485 25 discriminator 2 view .LVU1052
 3384 01b6 0133     		adds	r3, r3, #1
 3385              	.LVL377:
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3386              		.loc 1 1485 16 is_stmt 1 discriminator 2 view .LVU1053
1485:src/display.c **** 	    if (buf[j + k] == '\0')
 3387              		.loc 1 1485 4 is_stmt 0 discriminator 2 view .LVU1054
 3388 01b8 0C2B     		cmp	r3, #12
 3389 01ba F7D1     		bne	.L319
1488:src/display.c **** 	    int ch = buf[j++];
 3390              		.loc 1 1488 4 view .LVU1055
 3391 01bc 4FF00B08 		mov	r8, #11
 3392              	.LVL378:
 3393              	.L320:
1488:src/display.c **** 	    int ch = buf[j++];
 3394              		.loc 1 1488 4 view .LVU1056
 3395 01c0 0137     		adds	r7, r7, #1
 3396 01c2 4744     		add	r7, r7, r8
 3397 01c4 4446     		mov	r4, r8
 3398 01c6 4FF0630B 		mov	fp, #99
 3399 01ca 09E0     		b	.L325
 3400              	.LVL379:
 3401              	.L374:
 3402              	.LBB293:
1494:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3403              		.loc 1 1494 8 view .LVU1057
 3404 01cc 624B     		ldr	r3, .L377+16
 3405 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3406              	.LVL380:
 3407              	.LBB294:
 3408              	.LBI294:
 364:src/display.c ****   if (sep == SEP_NONE)
 3409              		.loc 1 364 14 is_stmt 1 view .LVU1058
 3410              	.LBB295:
ARM GAS  /tmp/ccadPcKu.s 			page 136


 365:src/display.c ****     return res;
 3411              		.loc 1 365 3 view .LVU1059
 365:src/display.c ****     return res;
 3412              		.loc 1 365 6 is_stmt 0 view .LVU1060
 3413 01d0 09B1     		cbz	r1, .L323
 365:src/display.c ****     return res;
 3414              		.loc 1 365 6 view .LVU1061
 3415 01d2 FFF7FEFF 		bl	set_separator.part.0
 3416              	.LVL381:
 3417              	.L323:
 365:src/display.c ****     return res;
 3418              		.loc 1 365 6 view .LVU1062
 3419              	.LBE295:
 3420              	.LBE294:
1495:src/display.c **** 	  }
 3421              		.loc 1 1495 6 is_stmt 1 discriminator 2 view .LVU1063
 3422              	.LBE293:
1488:src/display.c **** 	    int ch = buf[j++];
 3423              		.loc 1 1488 4 is_stmt 0 discriminator 2 view .LVU1064
 3424 01d6 013C     		subs	r4, r4, #1
1488:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1488 4 discriminator 2 view .LVU1065
 3426 01d8 621C     		adds	r2, r4, #1
 3427              	.LBB298:
1495:src/display.c **** 	  }
 3428              		.loc 1 1495 10 discriminator 2 view .LVU1066
 3429 01da ABF1090B 		sub	fp, fp, #9
 3430              	.LVL382:
1495:src/display.c **** 	  }
 3431              		.loc 1 1495 10 discriminator 2 view .LVU1067
 3432              	.LBE298:
1488:src/display.c **** 	    int ch = buf[j++];
 3433              		.loc 1 1488 24 is_stmt 1 discriminator 2 view .LVU1068
1488:src/display.c **** 	    int ch = buf[j++];
 3434              		.loc 1 1488 14 discriminator 2 view .LVU1069
1488:src/display.c **** 	    int ch = buf[j++];
 3435              		.loc 1 1488 4 is_stmt 0 discriminator 2 view .LVU1070
 3436 01de 16D0     		beq	.L329
 3437              	.LVL383:
 3438              	.L325:
 3439              	.LBB299:
1489:src/display.c **** 	    if (i >= shift)
 3440              		.loc 1 1489 6 is_stmt 1 view .LVU1071
1491:src/display.c **** 	    set_dig(dig, ch);
 3441              		.loc 1 1491 8 view .LVU1072
1489:src/display.c **** 	    if (i >= shift)
 3442              		.loc 1 1489 10 is_stmt 0 view .LVU1073
 3443 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1490:src/display.c **** 	      ch -= 030;
 3444              		.loc 1 1490 9 view .LVU1074
 3445 01e4 A8EB0402 		sub	r2, r8, r4
 3446 01e8 B242     		cmp	r2, r6
 3447 01ea A7EB0409 		sub	r9, r7, r4
 3448              	.LVL384:
1490:src/display.c **** 	      ch -= 030;
 3449              		.loc 1 1490 6 is_stmt 1 view .LVU1075
1492:src/display.c **** 	    if ((j % group) == 0 && k != 0)
ARM GAS  /tmp/ccadPcKu.s 			page 137


 3450              		.loc 1 1492 6 is_stmt 0 view .LVU1076
 3451 01ee 5846     		mov	r0, fp
1491:src/display.c **** 	    set_dig(dig, ch);
 3452              		.loc 1 1491 11 view .LVU1077
 3453 01f0 A8BF     		it	ge
 3454 01f2 1839     		subge	r1, r1, #24
 3455              	.LVL385:
1492:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3456              		.loc 1 1492 6 is_stmt 1 view .LVU1078
 3457 01f4 FFF7FEFF 		bl	set_dig
 3458              	.LVL386:
1493:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3459              		.loc 1 1493 6 view .LVU1079
1493:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3460              		.loc 1 1493 13 is_stmt 0 view .LVU1080
 3461 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3462 01fc 0AFB1393 		mls	r3, r10, r3, r9
1493:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3463              		.loc 1 1493 9 view .LVU1081
 3464 0200 002B     		cmp	r3, #0
 3465 0202 E8D1     		bne	.L323
1494:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3466              		.loc 1 1494 8 is_stmt 1 discriminator 1 view .LVU1082
 3467              	.LBB297:
 3468              	.LBB296:
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3469              		.loc 1 367 3 discriminator 1 view .LVU1083
 3470 0204 5846     		mov	r0, fp
 3471              	.LBE296:
 3472              	.LBE297:
1493:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3473              		.loc 1 1493 27 is_stmt 0 discriminator 1 view .LVU1084
 3474 0206 002C     		cmp	r4, #0
 3475 0208 E0D1     		bne	.L374
1495:src/display.c **** 	  }
 3476              		.loc 1 1495 6 is_stmt 1 view .LVU1085
1495:src/display.c **** 	  }
 3477              		.loc 1 1495 10 is_stmt 0 view .LVU1086
 3478 020a ABF1090B 		sub	fp, fp, #9
 3479              	.LVL387:
1495:src/display.c **** 	  }
 3480              		.loc 1 1495 10 view .LVU1087
 3481              	.LBE299:
1488:src/display.c **** 	    int ch = buf[j++];
 3482              		.loc 1 1488 24 is_stmt 1 view .LVU1088
1488:src/display.c **** 	    int ch = buf[j++];
 3483              		.loc 1 1488 14 view .LVU1089
 3484              	.L329:
1497:src/display.c **** 	    if (dig >= 0)
 3485              		.loc 1 1497 4 view .LVU1090
1497:src/display.c **** 	    if (dig >= 0)
 3486              		.loc 1 1497 7 is_stmt 0 view .LVU1091
 3487 020e 049B     		ldr	r3, [sp, #16]
 3488 0210 002B     		cmp	r3, #0
 3489 0212 3FF476AF 		beq	.L285
1498:src/display.c **** 	      set_dig(dig, '-');
 3490              		.loc 1 1498 6 is_stmt 1 view .LVU1092
ARM GAS  /tmp/ccadPcKu.s 			page 138


1498:src/display.c **** 	      set_dig(dig, '-');
 3491              		.loc 1 1498 9 is_stmt 0 view .LVU1093
 3492 0216 BBF1000F 		cmp	fp, #0
 3493 021a C0F2C680 		blt	.L375
 3494              	.LVL388:
 3495              	.L328:
1499:src/display.c **** 	    else	SET_MANT_SIGN;
 3496              		.loc 1 1499 8 is_stmt 1 view .LVU1094
 3497 021e 5846     		mov	r0, fp
 3498 0220 2D21     		movs	r1, #45
 3499 0222 FFF7FEFF 		bl	set_dig
 3500              	.LVL389:
 3501 0226 6CE7     		b	.L285
 3502              	.LVL390:
 3503              	.L369:
1499:src/display.c **** 	    else	SET_MANT_SIGN;
 3504              		.loc 1 1499 8 is_stmt 0 view .LVU1095
 3505              	.LBE292:
1392:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3506              		.loc 1 1392 4 is_stmt 1 view .LVU1096
1392:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3507              		.loc 1 1392 8 is_stmt 0 view .LVU1097
 3508 0228 04AA     		add	r2, sp, #16
 3509 022a 3046     		mov	r0, r6
 3510 022c 3946     		mov	r1, r7
 3511 022e FFF7FEFF 		bl	extract_value
 3512              	.LVL391:
 3513 0232 8046     		mov	r8, r0
 3514 0234 8946     		mov	r9, r1
 3515              	.LVL392:
1393:src/display.c **** 	    v = value;
 3516              		.loc 1 1393 4 is_stmt 1 view .LVU1098
1393:src/display.c **** 	    v = value;
 3517              		.loc 1 1393 8 is_stmt 0 view .LVU1099
 3518 0236 FFF7FEFF 		bl	int_mode
 3519              	.LVL393:
1393:src/display.c **** 	    v = value;
 3520              		.loc 1 1393 7 view .LVU1100
 3521 023a 38BB     		cbnz	r0, .L290
1393:src/display.c **** 	    v = value;
 3522              		.loc 1 1393 33 discriminator 1 view .LVU1101
 3523 023c 049B     		ldr	r3, [sp, #16]
 3524 023e 012B     		cmp	r3, #1
 3525 0240 24D1     		bne	.L290
1393:src/display.c **** 	    v = value;
 3526              		.loc 1 1393 46 discriminator 2 view .LVU1102
 3527 0242 58EA0903 		orrs	r3, r8, r9
 3528 0246 00F08B80 		beq	.L376
 3529              	.LVL394:
 3530              	.L291:
1393:src/display.c **** 	    v = value;
 3531              		.loc 1 1393 46 discriminator 2 view .LVU1103
 3532 024a DFF810B1 		ldr	fp, .L377+20
 3533              	.LVL395:
1368:src/display.c **** 	const int ws = word_size();
 3534              		.loc 1 1368 67 discriminator 3 view .LVU1104
 3535 024e 0395     		str	r5, [sp, #12]
ARM GAS  /tmp/ccadPcKu.s 			page 139


 3536 0250 05AB     		add	r3, sp, #20
 3537 0252 5D46     		mov	r5, fp
 3538              	.LVL396:
1368:src/display.c **** 	const int ws = word_size();
 3539              		.loc 1 1368 67 discriminator 3 view .LVU1105
 3540 0254 5646     		mov	r6, r10
 3541 0256 0027     		movs	r7, #0
 3542 0258 0024     		movs	r4, #0
 3543 025a 9B46     		mov	fp, r3
 3544              	.LVL397:
 3545              	.L297:
 3546              	.LBB302:
1402:src/display.c **** 	      v /= b;
 3547              		.loc 1 1402 8 is_stmt 1 discriminator 3 view .LVU1106
 3548 025c 4046     		mov	r0, r8
 3549 025e 4946     		mov	r1, r9
 3550 0260 3246     		mov	r2, r6
 3551 0262 3B46     		mov	r3, r7
 3552 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3553              	.LVL398:
1403:src/display.c **** 	      buf[i] = DIGITS[r];
 3554              		.loc 1 1403 8 discriminator 3 view .LVU1107
 3555 0268 CDE90089 		strd	r8, [sp]
1404:src/display.c **** 	    }
 3556              		.loc 1 1404 15 is_stmt 0 discriminator 3 view .LVU1108
 3557 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3558 026e 0BF8013B 		strb	r3, [fp], #1
 3559              	.LBE302:
1401:src/display.c **** 	      const int r = v % b;
 3560              		.loc 1 1401 6 discriminator 3 view .LVU1109
 3561 0272 DDE90023 		ldrd	r2, [sp]
 3562              	.LVL399:
1401:src/display.c **** 	      const int r = v % b;
 3563              		.loc 1 1401 6 discriminator 3 view .LVU1110
 3564 0276 BB42     		cmp	r3, r7
 3565 0278 08BF     		it	eq
 3566 027a B242     		cmpeq	r2, r6
 3567              	.LBB303:
1403:src/display.c **** 	      buf[i] = DIGITS[r];
 3568              		.loc 1 1403 10 discriminator 3 view .LVU1111
 3569 027c 8946     		mov	r9, r1
 3570              	.LVL400:
1404:src/display.c **** 	    }
 3571              		.loc 1 1404 8 is_stmt 1 discriminator 3 view .LVU1112
 3572              	.LBE303:
1401:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1401 24 discriminator 3 view .LVU1113
 3574              	.LBB304:
1403:src/display.c **** 	      buf[i] = DIGITS[r];
 3575              		.loc 1 1403 10 is_stmt 0 discriminator 3 view .LVU1114
 3576 027e 8046     		mov	r8, r0
 3577 0280 2146     		mov	r1, r4
 3578              	.LVL401:
1403:src/display.c **** 	      buf[i] = DIGITS[r];
 3579              		.loc 1 1403 10 discriminator 3 view .LVU1115
 3580              	.LBE304:
1401:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccadPcKu.s 			page 140


 3581              		.loc 1 1401 25 discriminator 3 view .LVU1116
 3582 0282 04F10104 		add	r4, r4, #1
 3583              	.LVL402:
1401:src/display.c **** 	      const int r = v % b;
 3584              		.loc 1 1401 16 is_stmt 1 discriminator 3 view .LVU1117
1401:src/display.c **** 	      const int r = v % b;
 3585              		.loc 1 1401 6 is_stmt 0 discriminator 3 view .LVU1118
 3586 0286 E9D2     		bcs	.L297
 3587 0288 039D     		ldr	r5, [sp, #12]
 3588 028a 24E7     		b	.L298
 3589              	.LVL403:
 3590              	.L290:
1395:src/display.c **** 	    if (sign)
 3591              		.loc 1 1395 4 is_stmt 1 view .LVU1119
1395:src/display.c **** 	    if (sign)
 3592              		.loc 1 1395 7 is_stmt 0 view .LVU1120
 3593 028c 58EA0903 		orrs	r3, r8, r9
 3594 0290 DBD1     		bne	.L291
1396:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3595              		.loc 1 1396 6 is_stmt 1 view .LVU1121
1396:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3596              		.loc 1 1396 9 is_stmt 0 view .LVU1122
 3597 0292 049B     		ldr	r3, [sp, #16]
 3598 0294 002B     		cmp	r3, #0
 3599 0296 69D1     		bne	.L292
 3600              	.LVL404:
 3601              	.L293:
1398:src/display.c **** 	    return;
 3602              		.loc 1 1398 6 is_stmt 1 view .LVU1123
 3603              	.LBB305:
 3604              	.LBI305:
 404:src/display.c ****   if (res) *res++ = ch;
 3605              		.loc 1 404 14 view .LVU1124
 3606              	.LBB306:
 405:src/display.c ****   else	set_dig(base, ch);
 3607              		.loc 1 405 3 view .LVU1125
 405:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 405 6 is_stmt 0 view .LVU1126
 3609 0298 002D     		cmp	r5, #0
 3610 029a 6DD0     		beq	.L295
 3611              	.LVL405:
 3612              	.L294:
 405:src/display.c ****   else	set_dig(base, ch);
 3613              		.loc 1 405 12 is_stmt 1 view .LVU1127
 405:src/display.c ****   else	set_dig(base, ch);
 3614              		.loc 1 405 19 is_stmt 0 view .LVU1128
 3615 029c 3023     		movs	r3, #48
 3616 029e 2B70     		strb	r3, [r5]
 3617              	.LBE306:
 3618              	.LBE305:
1503:src/display.c **** 
 3619              		.loc 1 1503 7 view .LVU1129
 3620 02a0 17B0     		add	sp, sp, #92
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 36
 3623              		@ sp needed
 3624 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccadPcKu.s 			page 141


 3625              	.LVL406:
 3626              	.L286:
 3627              		.cfi_restore_state
1383:src/display.c **** 	}
 3628              		.loc 1 1383 11 is_stmt 1 view .LVU1130
1383:src/display.c **** 	}
 3629              		.loc 1 1383 15 is_stmt 0 view .LVU1131
 3630 02a6 FFF7FEFF 		bl	int_base
 3631              	.LVL407:
1383:src/display.c **** 	}
 3632              		.loc 1 1383 15 view .LVU1132
 3633 02aa 8246     		mov	r10, r0
 3634              	.LVL408:
1383:src/display.c **** 	}
 3635              		.loc 1 1383 27 is_stmt 1 view .LVU1133
1386:src/display.c **** 	  IntMaxWindow = 0;
 3636              		.loc 1 1386 2 view .LVU1134
1386:src/display.c **** 	  IntMaxWindow = 0;
 3637              		.loc 1 1386 5 is_stmt 0 view .LVU1135
 3638 02ac 002D     		cmp	r5, #0
 3639 02ae 7FF4BFAE 		bne	.L288
 3640              	.LVL409:
 3641              	.L368:
1387:src/display.c **** 	  carry_overflow();
 3642              		.loc 1 1387 4 is_stmt 1 view .LVU1136
1387:src/display.c **** 	  carry_overflow();
 3643              		.loc 1 1387 17 is_stmt 0 view .LVU1137
 3644 02b2 284B     		ldr	r3, .L377+12
 3645 02b4 1D60     		str	r5, [r3]
1388:src/display.c **** 	}
 3646              		.loc 1 1388 4 is_stmt 1 view .LVU1138
 3647 02b6 FFF7FEFF 		bl	carry_overflow
 3648              	.LVL410:
 3649 02ba B9E6     		b	.L288
 3650              	.LVL411:
 3651              	.L309:
1449:src/display.c **** 	      *res++ = buf[i];
 3652              		.loc 1 1449 12 view .LVU1139
1449:src/display.c **** 	      *res++ = buf[i];
 3653              		.loc 1 1449 12 is_stmt 0 view .LVU1140
 3654 02bc 05AB     		add	r3, sp, #20
 3655 02be 5818     		adds	r0, r3, r1
1449:src/display.c **** 	      *res++ = buf[i];
 3656              		.loc 1 1449 24 view .LVU1141
 3657 02c0 A4F10D06 		sub	r6, r4, #13
 3658 02c4 6A1E     		subs	r2, r5, #1
 3659              	.LVL412:
 3660              	.L311:
1450:src/display.c **** 	    *res++ = '.';
 3661              		.loc 1 1450 8 is_stmt 1 view .LVU1142
1450:src/display.c **** 	    *res++ = '.';
 3662              		.loc 1 1450 20 is_stmt 0 view .LVU1143
 3663 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3664              	.LVL413:
1450:src/display.c **** 	    *res++ = '.';
 3665              		.loc 1 1450 15 view .LVU1144
 3666 02ca 02F8013F 		strb	r3, [r2, #1]!
ARM GAS  /tmp/ccadPcKu.s 			page 142


 3667              	.LVL414:
1449:src/display.c **** 	      *res++ = buf[i];
 3668              		.loc 1 1449 12 is_stmt 1 view .LVU1145
1449:src/display.c **** 	      *res++ = buf[i];
 3669              		.loc 1 1449 12 is_stmt 0 view .LVU1146
 3670 02ce D343     		mvns	r3, r2
 3671 02d0 0B44     		add	r3, r3, r1
 3672 02d2 2B44     		add	r3, r3, r5
 3673 02d4 9E42     		cmp	r6, r3
 3674 02d6 F6DD     		ble	.L311
 3675 02d8 01F10E03 		add	r3, r1, #14
 3676 02dc 1C1B     		subs	r4, r3, r4
 3677              	.LVL415:
1449:src/display.c **** 	      *res++ = buf[i];
 3678              		.loc 1 1449 12 view .LVU1147
 3679 02de 8E42     		cmp	r6, r1
 3680 02e0 C8BF     		it	gt
 3681 02e2 0124     		movgt	r4, #1
 3682 02e4 2A19     		adds	r2, r5, r4
 3683              	.LVL416:
1451:src/display.c **** 	    *res++ = '.';
 3684              		.loc 1 1451 6 is_stmt 1 view .LVU1148
1451:src/display.c **** 	    *res++ = '.';
 3685              		.loc 1 1451 13 is_stmt 0 view .LVU1149
 3686 02e6 2E23     		movs	r3, #46
 3687 02e8 2B55     		strb	r3, [r5, r4]
1452:src/display.c **** 	  }
 3688              		.loc 1 1452 6 is_stmt 1 view .LVU1150
 3689              	.LVL417:
1452:src/display.c **** 	  }
 3690              		.loc 1 1452 13 is_stmt 0 view .LVU1151
 3691 02ea 5370     		strb	r3, [r2, #1]
1503:src/display.c **** 
 3692              		.loc 1 1503 7 view .LVU1152
 3693 02ec 17B0     		add	sp, sp, #92
 3694              		.cfi_remember_state
 3695              		.cfi_def_cfa_offset 36
 3696              		@ sp needed
 3697 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3698              	.LVL418:
 3699              	.L370:
 3700              		.cfi_restore_state
 3701              	.LBB308:
1411:src/display.c **** 	      vs |= ~mask;
 3702              		.loc 1 1411 38 discriminator 1 view .LVU1153
 3703 02f2 0BF1FF31 		add	r1, fp, #-1
1411:src/display.c **** 	      vs |= ~mask;
 3704              		.loc 1 1411 18 discriminator 1 view .LVU1154
 3705 02f6 CBF1210C 		rsb	ip, fp, #33
 3706 02fa C840     		lsrs	r0, r0, r1
 3707 02fc 07FA0CFC 		lsl	ip, r7, ip
 3708 0300 2039     		subs	r1, r1, #32
 3709 0302 40EA0C00 		orr	r0, r0, ip
 3710 0306 5CBF     		itt	pl
 3711 0308 47FA01F1 		asrpl	r1, r7, r1
 3712 030c 0843     		orrpl	r0, r0, r1
 3713 030e 00F00108 		and	r8, r0, #1
ARM GAS  /tmp/ccadPcKu.s 			page 143


 3714 0312 4FF00009 		mov	r9, #0
 3715 0316 58EA0901 		orrs	r1, r8, r9
 3716 031a 08D0     		beq	.L300
1412:src/display.c **** 	  }
 3717              		.loc 1 1412 8 is_stmt 1 view .LVU1155
1412:src/display.c **** 	  }
 3718              		.loc 1 1412 11 is_stmt 0 view .LVU1156
 3719 031c 5042     		rsbs	r0, r2, #0
 3720 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3721 0322 40EA0602 		orr	r2, r0, r6
 3722              	.LVL419:
1412:src/display.c **** 	  }
 3723              		.loc 1 1412 11 view .LVU1157
 3724 0326 41EA0703 		orr	r3, r1, r7
 3725              	.LVL420:
1412:src/display.c **** 	  }
 3726              		.loc 1 1412 11 view .LVU1158
 3727 032a 1646     		mov	r6, r2
 3728              	.LVL421:
1412:src/display.c **** 	  }
 3729              		.loc 1 1412 11 view .LVU1159
 3730 032c 1F46     		mov	r7, r3
 3731              	.L300:
1412:src/display.c **** 	  }
 3732              		.loc 1 1412 11 view .LVU1160
 3733              	.LBE308:
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3734              		.loc 1 1415 4 is_stmt 1 view .LVU1161
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3735              		.loc 1 1415 8 is_stmt 0 view .LVU1162
 3736 032e 084B     		ldr	r3, .L377+8
 3737 0330 1B68     		ldr	r3, [r3]
 3738 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1415:src/display.c **** 	    set_dig_s(dig, '0', res);
 3739              		.loc 1 1415 7 view .LVU1163
 3740 0336 9B07     		lsls	r3, r3, #30
 3741 0338 7FF5E6AE 		bpl	.L330
 3742 033c 0223     		movs	r3, #2
 3743 033e ADE6     		b	.L305
 3744              	.LVL422:
 3745              	.L372:
 3746              	.LBB309:
1474:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1474 33 view .LVU1164
 3748 0340 0826     		movs	r6, #8
1476:src/display.c **** 	  set_separator_decimal_modes();
 3749              		.loc 1 1476 6 view .LVU1165
 3750 0342 4FF0040A 		mov	r10, #4
 3751 0346 17E7     		b	.L314
 3752              	.L378:
 3753              		.align	2
 3754              	.L377:
 3755 0348 00000000 		.word	StateWhileOn
 3756 034c 00000000 		.word	CSWTCH.315
 3757 0350 00000000 		.word	main_ram
 3758 0354 00000000 		.word	IntMaxWindow
 3759 0358 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccadPcKu.s 			page 144


 3760 035c 00000000 		.word	.LANCHOR12
 3761              	.LVL423:
 3762              	.L376:
1476:src/display.c **** 	  set_separator_decimal_modes();
 3763              		.loc 1 1476 6 view .LVU1166
 3764              	.LBE309:
1394:src/display.c **** 	  if (v == 0) {
 3765              		.loc 1 1394 6 is_stmt 1 view .LVU1167
1394:src/display.c **** 	  if (v == 0) {
 3766              		.loc 1 1394 8 is_stmt 0 view .LVU1168
 3767 0360 B046     		mov	r8, r6
 3768              	.LVL424:
1394:src/display.c **** 	  if (v == 0) {
 3769              		.loc 1 1394 8 view .LVU1169
 3770 0362 B946     		mov	r9, r7
 3771              	.LVL425:
1395:src/display.c **** 	    if (sign)
 3772              		.loc 1 1395 4 is_stmt 1 view .LVU1170
1395:src/display.c **** 	    if (sign)
 3773              		.loc 1 1395 7 is_stmt 0 view .LVU1171
 3774 0364 58EA0903 		orrs	r3, r8, r9
 3775 0368 7FF46FAF 		bne	.L291
 3776              	.LVL426:
 3777              	.L292:
1397:src/display.c **** 	    set_dig_s(dig, '0', res);
 3778              		.loc 1 1397 8 is_stmt 1 view .LVU1172
 3779              	.LBB310:
 3780              	.LBI310:
 404:src/display.c ****   if (res) *res++ = ch;
 3781              		.loc 1 404 14 view .LVU1173
 3782              	.LBB311:
 405:src/display.c ****   else	set_dig(base, ch);
 3783              		.loc 1 405 3 view .LVU1174
 405:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 405 6 is_stmt 0 view .LVU1175
 3785 036c 002D     		cmp	r5, #0
 3786 036e 95D1     		bne	.L294
 406:src/display.c ****   return res;
 3787              		.loc 1 406 8 is_stmt 1 view .LVU1176
 3788 0370 2D21     		movs	r1, #45
 3789 0372 5A20     		movs	r0, #90
 3790 0374 FFF7FEFF 		bl	set_dig
 3791              	.LVL427:
 406:src/display.c ****   return res;
 3792              		.loc 1 406 8 is_stmt 0 view .LVU1177
 3793              	.LBE311:
 3794              	.LBE310:
1398:src/display.c **** 	    return;
 3795              		.loc 1 1398 6 is_stmt 1 view .LVU1178
 3796              	.LBB312:
 404:src/display.c ****   if (res) *res++ = ch;
 3797              		.loc 1 404 14 view .LVU1179
 3798              	.LBB307:
 405:src/display.c ****   else	set_dig(base, ch);
 3799              		.loc 1 405 3 view .LVU1180
 3800              	.L295:
 406:src/display.c ****   return res;
ARM GAS  /tmp/ccadPcKu.s 			page 145


 3801              		.loc 1 406 8 view .LVU1181
 3802 0378 3021     		movs	r1, #48
 3803 037a 6320     		movs	r0, #99
 3804 037c FFF7FEFF 		bl	set_dig
 3805              	.LVL428:
 3806 0380 BFE6     		b	.L285
 3807              	.LVL429:
 3808              	.L316:
 406:src/display.c ****   return res;
 3809              		.loc 1 406 8 is_stmt 0 view .LVU1182
 3810              	.LBE307:
 3811              	.LBE312:
 3812              	.LBB313:
1481:src/display.c **** 	  buf[i] = '\0';
 3813              		.loc 1 1481 6 is_stmt 1 view .LVU1183
1481:src/display.c **** 	  buf[i] = '\0';
 3814              		.loc 1 1481 20 is_stmt 0 view .LVU1184
 3815 0382 0F4A     		ldr	r2, .L379
 3816 0384 6FF3C503 		bfc	r3, #3, #3
 3817 0388 1375     		strb	r3, [r2, #20]
 3818 038a 0027     		movs	r7, #0
 3819 038c 05E7     		b	.L317
 3820              	.LVL430:
 3821              	.L318:
1488:src/display.c **** 	    int ch = buf[j++];
 3822              		.loc 1 1488 14 is_stmt 1 discriminator 1 view .LVU1185
1488:src/display.c **** 	    int ch = buf[j++];
 3823              		.loc 1 1488 4 is_stmt 0 discriminator 1 view .LVU1186
 3824 038e 03F1FF38 		add	r8, r3, #-1
 3825              	.LVL431:
1488:src/display.c **** 	    int ch = buf[j++];
 3826              		.loc 1 1488 4 discriminator 1 view .LVU1187
 3827 0392 002B     		cmp	r3, #0
 3828 0394 7FF414AF 		bne	.L320
1497:src/display.c **** 	    if (dig >= 0)
 3829              		.loc 1 1497 4 is_stmt 1 view .LVU1188
1497:src/display.c **** 	    if (dig >= 0)
 3830              		.loc 1 1497 7 is_stmt 0 view .LVU1189
 3831 0398 049B     		ldr	r3, [sp, #16]
 3832 039a 002B     		cmp	r3, #0
 3833 039c 3FF4B1AE 		beq	.L285
 3834 03a0 4FF0630B 		mov	fp, #99
 3835 03a4 3BE7     		b	.L328
 3836              	.LVL432:
 3837              	.L373:
1474:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3838              		.loc 1 1474 33 view .LVU1190
 3839 03a6 0C26     		movs	r6, #12
 3840 03a8 E6E6     		b	.L314
 3841              	.LVL433:
 3842              	.L375:
1500:src/display.c **** 	  }
 3843              		.loc 1 1500 11 is_stmt 1 view .LVU1191
 3844              	.LBB300:
 3845              	.LBI300:
 293:src/display.c **** {
 3846              		.loc 1 293 13 view .LVU1192
ARM GAS  /tmp/ccadPcKu.s 			page 146


 3847              	.LBB301:
 295:src/display.c ****   set_dot(MANT_SIGN);
 3848              		.loc 1 295 3 view .LVU1193
 295:src/display.c ****   set_dot(MANT_SIGN);
 3849              		.loc 1 295 25 is_stmt 0 view .LVU1194
 3850 03aa 064B     		ldr	r3, .L379+4
 3851 03ac 2D22     		movs	r2, #45
 296:src/display.c **** }
 3852              		.loc 1 296 3 view .LVU1195
 3853 03ae 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 3854              		.loc 1 295 25 view .LVU1196
 3855 03b0 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 3856              		.loc 1 296 3 is_stmt 1 view .LVU1197
 3857 03b2 FFF7FEFF 		bl	set_dot
 3858              	.LVL434:
 297:src/display.c **** 
 3859              		.loc 1 297 1 is_stmt 0 view .LVU1198
 3860 03b6 A4E6     		b	.L285
 3861              	.LVL435:
 3862              	.L331:
 297:src/display.c **** 
 3863              		.loc 1 297 1 view .LVU1199
 3864              	.LBE301:
 3865              	.LBE300:
 3866              	.LBE313:
 3867              	.LBB314:
1432:src/display.c **** 	      const int r = v % b;
 3868              		.loc 1 1432 6 view .LVU1200
 3869 03b8 4FF0FF31 		mov	r1, #-1
 3870 03bc 8BE6     		b	.L298
 3871              	.L380:
 3872 03be 00BF     		.align	2
 3873              	.L379:
 3874 03c0 00000000 		.word	StateWhileOn
 3875 03c4 00000000 		.word	LastDisplayedNumber
 3876              	.LBE314:
 3877              		.cfi_endproc
 3878              	.LFE18:
 3880              		.section	.text.set_annunciators,"ax",%progbits
 3881              		.align	1
 3882              		.p2align 2,,3
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	set_annunciators:
 3889              	.LFB32:
2503:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3890              		.loc 1 2503 7 is_stmt 1 view -0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
2504:src/display.c **** 
 3894              		.loc 1 2504 2 view .LVU1202
2503:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
ARM GAS  /tmp/ccadPcKu.s 			page 147


 3895              		.loc 1 2503 7 is_stmt 0 view .LVU1203
 3896 0000 70B5     		push	{r4, r5, r6, lr}
 3897              		.cfi_def_cfa_offset 16
 3898              		.cfi_offset 4, -16
 3899              		.cfi_offset 5, -12
 3900              		.cfi_offset 6, -8
 3901              		.cfi_offset 14, -4
2513:src/display.c **** #endif
 3902              		.loc 1 2513 11 view .LVU1204
 3903 0002 344E     		ldr	r6, .L407
2504:src/display.c **** 
 3904              		.loc 1 2504 29 view .LVU1205
 3905 0004 FFF7FEFF 		bl	get_trig_mode
 3906              	.LVL436:
2513:src/display.c **** #endif
 3907              		.loc 1 2513 11 view .LVU1206
 3908 0008 3368     		ldr	r3, [r6]
2513:src/display.c **** #endif
 3909              		.loc 1 2513 2 view .LVU1207
 3910 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3911 000e 012B     		cmp	r3, #1
2504:src/display.c **** 
 3912              		.loc 1 2504 29 view .LVU1208
 3913 0010 0446     		mov	r4, r0
 3914              	.LVL437:
2513:src/display.c **** #endif
 3915              		.loc 1 2513 2 is_stmt 1 view .LVU1209
 3916              	.LBB333:
 3917              	.LBB334:
 337:src/display.c ****   else	clr_dot(n);
 3918              		.loc 1 337 11 is_stmt 0 view .LVU1210
 3919 0012 4FF08800 		mov	r0, #136
 3920              	.LBE334:
 3921              	.LBE333:
2513:src/display.c **** #endif
 3922              		.loc 1 2513 2 view .LVU1211
 3923 0016 03D8     		bhi	.L382
2513:src/display.c **** #endif
 3924              		.loc 1 2513 30 discriminator 1 view .LVU1212
 3925 0018 2F4B     		ldr	r3, .L407+4
2513:src/display.c **** #endif
 3926              		.loc 1 2513 2 discriminator 1 view .LVU1213
 3927 001a 1B68     		ldr	r3, [r3]
 3928 001c 002B     		cmp	r3, #0
 3929 001e 56D0     		beq	.L403
 3930              	.L382:
 3931              	.LVL438:
 3932              	.LBB337:
 3933              	.LBI333:
 336:src/display.c ****   if (on)	set_dot(n);
 3934              		.loc 1 336 6 is_stmt 1 view .LVU1214
 3935              	.LBB335:
 337:src/display.c ****   else	clr_dot(n);
 3936              		.loc 1 337 3 view .LVU1215
 338:src/display.c **** }
 3937              		.loc 1 338 8 view .LVU1216
 3938 0020 FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccadPcKu.s 			page 148


 3939              	.LVL439:
 3940              	.L383:
 338:src/display.c **** }
 3941              		.loc 1 338 8 is_stmt 0 view .LVU1217
 3942              	.LBE335:
 3943              	.LBE337:
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3944              		.loc 1 2515 2 is_stmt 1 view .LVU1218
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3945              		.loc 1 2515 19 is_stmt 0 view .LVU1219
 3946 0024 2D4D     		ldr	r5, .L407+8
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3947              		.loc 1 2515 2 view .LVU1220
 3948 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3949              	.LBB338:
 3950              	.LBB339:
 337:src/display.c ****   else	clr_dot(n);
 3951              		.loc 1 337 11 view .LVU1221
 3952 0028 8620     		movs	r0, #134
 3953              	.LBE339:
 3954              	.LBE338:
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3955              		.loc 1 2515 2 view .LVU1222
 3956 002a 23B9     		cbnz	r3, .L384
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3957              		.loc 1 2515 47 discriminator 2 view .LVU1223
 3958 002c 6A69     		ldr	r2, [r5, #20]
 3959 002e 2C4B     		ldr	r3, .L407+12
 3960 0030 1340     		ands	r3, r3, r2
2515:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3961              		.loc 1 2515 2 discriminator 2 view .LVU1224
 3962 0032 002B     		cmp	r3, #0
 3963 0034 48D0     		beq	.L404
 3964              	.L384:
 3965              	.LBB342:
 3966              	.LBB340:
 337:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 337 11 is_stmt 1 view .LVU1225
 3968 0036 FFF7FEFF 		bl	set_dot
 3969              	.LVL440:
 3970              	.L385:
 3971              	.LBE340:
 3972              	.LBE342:
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3973              		.loc 1 2516 2 view .LVU1226
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3974              		.loc 1 2516 31 is_stmt 0 view .LVU1227
 3975 003a 2A4A     		ldr	r2, .L407+16
 3976 003c 6B69     		ldr	r3, [r5, #20]
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3977              		.loc 1 2516 2 view .LVU1228
 3978 003e 1A42     		tst	r2, r3
 3979              	.LBB343:
 3980              	.LBB344:
 337:src/display.c ****   else	clr_dot(n);
 3981              		.loc 1 337 11 view .LVU1229
 3982 0040 4FF08500 		mov	r0, #133
ARM GAS  /tmp/ccadPcKu.s 			page 149


 3983              	.LBE344:
 3984              	.LBE343:
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3985              		.loc 1 2516 2 view .LVU1230
 3986 0044 02D0     		beq	.L386
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3987              		.loc 1 2516 48 discriminator 1 view .LVU1231
 3988 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2516:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3989              		.loc 1 2516 2 discriminator 1 view .LVU1232
 3990 0048 DA06     		lsls	r2, r3, #27
 3991 004a 3AD4     		bmi	.L387
 3992              	.L386:
 3993              	.LVL441:
 3994              	.LBB347:
 3995              	.LBI343:
 336:src/display.c ****   if (on)	set_dot(n);
 3996              		.loc 1 336 6 is_stmt 1 view .LVU1233
 3997              	.LBB345:
 337:src/display.c ****   else	clr_dot(n);
 3998              		.loc 1 337 3 view .LVU1234
 338:src/display.c **** }
 3999              		.loc 1 338 8 view .LVU1235
 4000 004c FFF7FEFF 		bl	clr_dot
 4001              	.LVL442:
 4002              	.L388:
 338:src/display.c **** }
 4003              		.loc 1 338 8 is_stmt 0 view .LVU1236
 4004              	.LBE345:
 4005              	.LBE347:
2517:src/display.c **** 	set_IO_annunciator();
 4006              		.loc 1 2517 2 is_stmt 1 view .LVU1237
 4007 0050 6820     		movs	r0, #104
 4008 0052 FFF7FEFF 		bl	get_user_flag
 4009              	.LVL443:
 4010              	.LBB348:
 4011              	.LBI348:
 336:src/display.c ****   if (on)	set_dot(n);
 4012              		.loc 1 336 6 view .LVU1238
 4013              	.LBB349:
 337:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 337 3 view .LVU1239
 337:src/display.c ****   else	clr_dot(n);
 4015              		.loc 1 337 6 is_stmt 0 view .LVU1240
 4016 0056 28B3     		cbz	r0, .L389
 337:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 337 11 is_stmt 1 view .LVU1241
 4018              	.LBE349:
 4019              	.LBE348:
 4020              	.LBB353:
 4021              	.LBB354:
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4022              		.loc 1 2545 9 is_stmt 0 view .LVU1242
 4023 0058 234D     		ldr	r5, .L407+20
 4024              	.LBE354:
 4025              	.LBE353:
 4026              	.LBB362:
ARM GAS  /tmp/ccadPcKu.s 			page 150


 4027              	.LBB350:
 337:src/display.c ****   else	clr_dot(n);
 4028              		.loc 1 337 11 view .LVU1243
 4029 005a 8320     		movs	r0, #131
 4030              	.LVL444:
 337:src/display.c ****   else	clr_dot(n);
 4031              		.loc 1 337 11 view .LVU1244
 4032 005c FFF7FEFF 		bl	set_dot
 4033              	.LVL445:
 337:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 337 11 view .LVU1245
 4035              	.LBE350:
 4036              	.LBE362:
2518:src/display.c **** 
 4037              		.loc 1 2518 2 is_stmt 1 view .LVU1246
 4038              	.LBB363:
 4039              	.LBI353:
2530:src/display.c **** #ifndef DM42
 4040              		.loc 1 2530 12 view .LVU1247
 4041              	.LBB359:
2535:src/display.c **** #endif
 4042              		.loc 1 2535 4 view .LVU1248
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4043              		.loc 1 2545 2 view .LVU1249
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4044              		.loc 1 2545 5 is_stmt 0 view .LVU1250
 4045 0060 2B68     		ldr	r3, [r5]
 4046 0062 33BB     		cbnz	r3, .L405
 4047              	.L391:
 4048              	.LBE359:
 4049              	.LBE363:
2522:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4050              		.loc 1 2522 2 is_stmt 1 view .LVU1251
2522:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4051              		.loc 1 2522 11 is_stmt 0 view .LVU1252
 4052 0064 3368     		ldr	r3, [r6]
 4053 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4054 006a 03F00103 		and	r3, r3, #1
2522:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4055              		.loc 1 2522 2 view .LVU1253
 4056 006e 2343     		orrs	r3, r3, r4
 4057 0070 13F0FF0F 		tst	r3, #255
 4058              	.LBB364:
 4059              	.LBB365:
 337:src/display.c ****   else	clr_dot(n);
 4060              		.loc 1 337 11 view .LVU1254
 4061 0074 4FF08C00 		mov	r0, #140
 4062              	.LBE365:
 4063              	.LBE364:
2522:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4064              		.loc 1 2522 2 view .LVU1255
 4065 0078 06D1     		bne	.L406
 4066              	.LVL446:
 4067              	.LBB368:
 4068              	.LBI364:
 336:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 336 6 is_stmt 1 view .LVU1256
ARM GAS  /tmp/ccadPcKu.s 			page 151


 4070              	.LBB366:
 337:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 337 3 view .LVU1257
 337:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 337 11 view .LVU1258
 4073 007a FFF7FEFF 		bl	set_dot
 4074              	.LVL447:
 337:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 337 11 is_stmt 0 view .LVU1259
 4076              	.LBE366:
 4077              	.LBE368:
2523:src/display.c ****       }
 4078              		.loc 1 2523 2 is_stmt 1 view .LVU1260
 4079              	.L394:
 4080              	.LBB369:
 4081              	.LBI369:
 336:src/display.c ****   if (on)	set_dot(n);
 4082              		.loc 1 336 6 view .LVU1261
 4083              	.LBB370:
 337:src/display.c ****   else	clr_dot(n);
 4084              		.loc 1 337 3 view .LVU1262
 338:src/display.c **** }
 4085              		.loc 1 338 8 view .LVU1263
 4086              	.LBE370:
 4087              	.LBE369:
2524:src/display.c **** 
 4088              		.loc 1 2524 7 is_stmt 0 view .LVU1264
 4089 007e BDE87040 		pop	{r4, r5, r6, lr}
 4090              		.cfi_remember_state
 4091              		.cfi_restore 14
 4092              		.cfi_restore 6
 4093              		.cfi_restore 5
 4094              		.cfi_restore 4
 4095              		.cfi_def_cfa_offset 0
 4096              	.LVL448:
 4097              	.LBB374:
 4098              	.LBB371:
 338:src/display.c **** }
 4099              		.loc 1 338 8 view .LVU1265
 4100 0082 8B20     		movs	r0, #139
 4101 0084 FFF7FEBF 		b	clr_dot
 4102              	.LVL449:
 4103              	.L406:
 4104              		.cfi_restore_state
 338:src/display.c **** }
 4105              		.loc 1 338 8 view .LVU1266
 4106              	.LBE371:
 4107              	.LBE374:
 4108              	.LBB375:
 336:src/display.c ****   if (on)	set_dot(n);
 4109              		.loc 1 336 6 is_stmt 1 view .LVU1267
 4110              	.LBB367:
 337:src/display.c ****   else	clr_dot(n);
 4111              		.loc 1 337 3 view .LVU1268
 338:src/display.c **** }
 4112              		.loc 1 338 8 view .LVU1269
 4113 0088 FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccadPcKu.s 			page 152


 4114              	.LVL450:
 338:src/display.c **** }
 4115              		.loc 1 338 8 is_stmt 0 view .LVU1270
 4116              	.LBE367:
 4117              	.LBE375:
2523:src/display.c ****       }
 4118              		.loc 1 2523 2 is_stmt 1 view .LVU1271
2523:src/display.c ****       }
 4119              		.loc 1 2523 11 is_stmt 0 view .LVU1272
 4120 008c 3368     		ldr	r3, [r6]
 4121 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2523:src/display.c ****       }
 4122              		.loc 1 2523 2 view .LVU1273
 4123 0092 DB07     		lsls	r3, r3, #31
 4124 0094 F3D4     		bmi	.L394
2523:src/display.c ****       }
 4125              		.loc 1 2523 2 discriminator 1 view .LVU1274
 4126 0096 012C     		cmp	r4, #1
 4127 0098 F1D1     		bne	.L394
 4128              	.LVL451:
 4129              	.LBB376:
 336:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 336 6 is_stmt 1 view .LVU1275
 4131              	.LBB372:
 337:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 337 3 view .LVU1276
 337:src/display.c ****   else	clr_dot(n);
 4133              		.loc 1 337 11 view .LVU1277
 4134              	.LBE372:
 4135              	.LBE376:
2524:src/display.c **** 
 4136              		.loc 1 2524 7 is_stmt 0 view .LVU1278
 4137 009a BDE87040 		pop	{r4, r5, r6, lr}
 4138              		.cfi_remember_state
 4139              		.cfi_restore 14
 4140              		.cfi_restore 6
 4141              		.cfi_restore 5
 4142              		.cfi_restore 4
 4143              		.cfi_def_cfa_offset 0
 4144              	.LVL452:
 4145              	.LBB377:
 4146              	.LBB373:
 337:src/display.c ****   else	clr_dot(n);
 4147              		.loc 1 337 11 view .LVU1279
 4148 009e 8B20     		movs	r0, #139
 4149 00a0 FFF7FEBF 		b	set_dot
 4150              	.LVL453:
 4151              	.L389:
 4152              		.cfi_restore_state
 337:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 337 11 view .LVU1280
 4154              	.LBE373:
 4155              	.LBE377:
 4156              	.LBB378:
 4157              	.LBB351:
 338:src/display.c **** }
 4158              		.loc 1 338 8 is_stmt 1 view .LVU1281
ARM GAS  /tmp/ccadPcKu.s 			page 153


 4159              	.LBE351:
 4160              	.LBE378:
 4161              	.LBB379:
 4162              	.LBB360:
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4163              		.loc 1 2545 9 is_stmt 0 view .LVU1282
 4164 00a4 104D     		ldr	r5, .L407+20
 4165              	.LBE360:
 4166              	.LBE379:
 4167              	.LBB380:
 4168              	.LBB352:
 338:src/display.c **** }
 4169              		.loc 1 338 8 view .LVU1283
 4170 00a6 8320     		movs	r0, #131
 4171              	.LVL454:
 338:src/display.c **** }
 4172              		.loc 1 338 8 view .LVU1284
 4173 00a8 FFF7FEFF 		bl	clr_dot
 4174              	.LVL455:
 338:src/display.c **** }
 4175              		.loc 1 338 8 view .LVU1285
 4176              	.LBE352:
 4177              	.LBE380:
2518:src/display.c **** 
 4178              		.loc 1 2518 2 is_stmt 1 view .LVU1286
 4179              	.LBB381:
2530:src/display.c **** #ifndef DM42
 4180              		.loc 1 2530 12 view .LVU1287
 4181              	.LBB361:
2535:src/display.c **** #endif
 4182              		.loc 1 2535 4 view .LVU1288
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4183              		.loc 1 2545 2 view .LVU1289
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4184              		.loc 1 2545 5 is_stmt 0 view .LVU1290
 4185 00ac 2B68     		ldr	r3, [r5]
 4186 00ae 002B     		cmp	r3, #0
 4187 00b0 D8D0     		beq	.L391
 4188              	.L405:
 4189              	.LBB355:
 4190              	.LBI355:
2530:src/display.c **** #ifndef DM42
 4191              		.loc 1 2530 12 is_stmt 1 view .LVU1291
 4192              	.LBB356:
2546:src/display.c **** 	  IoAnnunciator = on;
 4193              		.loc 1 2546 4 view .LVU1292
 4194              	.LVL456:
 4195              	.LBB357:
 4196              	.LBI357:
 336:src/display.c ****   if (on)	set_dot(n);
 4197              		.loc 1 336 6 view .LVU1293
 4198              	.LBB358:
 337:src/display.c ****   else	clr_dot(n);
 4199              		.loc 1 337 3 view .LVU1294
 338:src/display.c **** }
 4200              		.loc 1 338 8 view .LVU1295
 4201 00b2 8420     		movs	r0, #132
ARM GAS  /tmp/ccadPcKu.s 			page 154


 4202 00b4 FFF7FEFF 		bl	clr_dot
 4203              	.LVL457:
 338:src/display.c **** }
 4204              		.loc 1 338 8 is_stmt 0 view .LVU1296
 4205              	.LBE358:
 4206              	.LBE357:
2547:src/display.c **** 	  finish_display(); //LIT_EQ
 4207              		.loc 1 2547 4 is_stmt 1 view .LVU1297
2547:src/display.c **** 	  finish_display(); //LIT_EQ
 4208              		.loc 1 2547 18 is_stmt 0 view .LVU1298
 4209 00b8 0023     		movs	r3, #0
 4210 00ba 2B60     		str	r3, [r5]
2548:src/display.c **** 	}
 4211              		.loc 1 2548 4 is_stmt 1 view .LVU1299
 4212 00bc FFF7FEFF 		bl	finish_display
 4213              	.LVL458:
2550:src/display.c **** 
 4214              		.loc 1 2550 7 is_stmt 0 view .LVU1300
 4215 00c0 D0E7     		b	.L391
 4216              	.LVL459:
 4217              	.L387:
2550:src/display.c **** 
 4218              		.loc 1 2550 7 view .LVU1301
 4219              	.LBE356:
 4220              	.LBE355:
 4221              	.LBE361:
 4222              	.LBE381:
 4223              	.LBB382:
 336:src/display.c ****   if (on)	set_dot(n);
 4224              		.loc 1 336 6 is_stmt 1 view .LVU1302
 4225              	.LBB346:
 337:src/display.c ****   else	clr_dot(n);
 4226              		.loc 1 337 3 view .LVU1303
 337:src/display.c ****   else	clr_dot(n);
 4227              		.loc 1 337 11 view .LVU1304
 4228 00c2 FFF7FEFF 		bl	set_dot
 4229              	.LVL460:
 4230 00c6 C3E7     		b	.L388
 4231              	.LVL461:
 4232              	.L404:
 337:src/display.c ****   else	clr_dot(n);
 4233              		.loc 1 337 11 is_stmt 0 view .LVU1305
 4234              	.LBE346:
 4235              	.LBE382:
 4236              	.LBB383:
 4237              	.LBI338:
 336:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 336 6 is_stmt 1 view .LVU1306
 4239              	.LBB341:
 337:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 337 3 view .LVU1307
 338:src/display.c **** }
 4241              		.loc 1 338 8 view .LVU1308
 4242 00c8 FFF7FEFF 		bl	clr_dot
 4243              	.LVL462:
 4244 00cc B5E7     		b	.L385
 4245              	.LVL463:
ARM GAS  /tmp/ccadPcKu.s 			page 155


 4246              	.L403:
 338:src/display.c **** }
 4247              		.loc 1 338 8 is_stmt 0 view .LVU1309
 4248              	.LBE341:
 4249              	.LBE383:
 4250              	.LBB384:
 336:src/display.c ****   if (on)	set_dot(n);
 4251              		.loc 1 336 6 is_stmt 1 view .LVU1310
 4252              	.LBB336:
 337:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 337 3 view .LVU1311
 337:src/display.c ****   else	clr_dot(n);
 4254              		.loc 1 337 11 view .LVU1312
 4255 00ce FFF7FEFF 		bl	set_dot
 4256              	.LVL464:
 4257 00d2 A7E7     		b	.L383
 4258              	.L408:
 4259              		.align	2
 4260              	.L407:
 4261 00d4 00000000 		.word	main_ram
 4262 00d8 00000000 		.word	Running
 4263 00dc 00000000 		.word	StateWhileOn
 4264 00e0 07000800 		.word	524295
 4265 00e4 00080800 		.word	526336
 4266 00e8 00000000 		.word	IoAnnunciator
 4267              	.LBE336:
 4268              	.LBE384:
 4269              		.cfi_endproc
 4270              	.LFE32:
 4272              		.section	.text.getdig,"ax",%progbits
 4273              		.align	1
 4274              		.p2align 2,,3
 4275              		.global	getdig
 4276              		.syntax unified
 4277              		.thumb
 4278              		.thumb_func
 4279              		.fpu fpv4-sp-d16
 4281              	getdig:
 4282              	.LVL465:
 4283              	.LFB6:
 331:src/display.c ****   // perform index lookup
 4284              		.loc 1 331 1 view -0
 4285              		.cfi_startproc
 4286              		@ args = 0, pretend = 0, frame = 0
 4287              		@ frame_needed = 0, uses_anonymous_args = 0
 4288              		@ link register save eliminated.
 333:src/display.c **** }
 4289              		.loc 1 333 3 view .LVU1314
 333:src/display.c **** }
 4290              		.loc 1 333 16 is_stmt 0 view .LVU1315
 4291 0000 014B     		ldr	r3, .L410
 333:src/display.c **** }
 4292              		.loc 1 333 19 view .LVU1316
 4293 0002 C0B2     		uxtb	r0, r0
 4294              	.LVL466:
 334:src/display.c **** 
 4295              		.loc 1 334 1 view .LVU1317
ARM GAS  /tmp/ccadPcKu.s 			page 156


 4296 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4297 0006 7047     		bx	lr
 4298              	.L411:
 4299              		.align	2
 4300              	.L410:
 4301 0008 00000000 		.word	.LANCHOR2
 4302              		.cfi_endproc
 4303              	.LFE6:
 4305              		.section	.text.dot,"ax",%progbits
 4306              		.align	1
 4307              		.p2align 2,,3
 4308              		.global	dot
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv4-sp-d16
 4314              	dot:
 4315              	.LVL467:
 4316              	.LFB7:
 336:src/display.c ****   if (on)	set_dot(n);
 4317              		.loc 1 336 25 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 337:src/display.c ****   else	clr_dot(n);
 4322              		.loc 1 337 3 view .LVU1319
 337:src/display.c ****   else	clr_dot(n);
 4323              		.loc 1 337 6 is_stmt 0 view .LVU1320
 4324 0000 09B1     		cbz	r1, .L413
 337:src/display.c ****   else	clr_dot(n);
 4325              		.loc 1 337 11 is_stmt 1 discriminator 1 view .LVU1321
 4326 0002 FFF7FEBF 		b	set_dot
 4327              	.LVL468:
 4328              	.L413:
 338:src/display.c **** }
 4329              		.loc 1 338 8 view .LVU1322
 4330 0006 FFF7FEBF 		b	clr_dot
 4331              	.LVL469:
 338:src/display.c **** }
 4332              		.loc 1 338 8 is_stmt 0 view .LVU1323
 4333              		.cfi_endproc
 4334              	.LFE7:
 4336 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4337              		.align	1
 4338              		.p2align 2,,3
 4339              		.global	std_round_fix
 4340              		.syntax unified
 4341              		.thumb
 4342              		.thumb_func
 4343              		.fpu fpv4-sp-d16
 4345              	std_round_fix:
 4346              	.LVL470:
 4347              	.LFB24:
1756:src/display.c **** 	decNumber b, c;
 4348              		.loc 1 1756 60 is_stmt 1 view -0
 4349              		.cfi_startproc
ARM GAS  /tmp/ccadPcKu.s 			page 157


 4350              		@ args = 0, pretend = 0, frame = 80
 4351              		@ frame_needed = 0, uses_anonymous_args = 0
1757:src/display.c **** 
 4352              		.loc 1 1757 2 view .LVU1325
1759:src/display.c **** 	b.exponent -= UState.dispdigs;
 4353              		.loc 1 1759 2 view .LVU1326
1756:src/display.c **** 	decNumber b, c;
 4354              		.loc 1 1756 60 is_stmt 0 view .LVU1327
 4355 0000 00B5     		push	{lr}
 4356              		.cfi_def_cfa_offset 4
 4357              		.cfi_offset 14, -4
 4358 0002 95B0     		sub	sp, sp, #84
 4359              		.cfi_def_cfa_offset 88
1756:src/display.c **** 	decNumber b, c;
 4360              		.loc 1 1756 60 view .LVU1328
 4361 0004 0146     		mov	r1, r0
1759:src/display.c **** 	b.exponent -= UState.dispdigs;
 4362              		.loc 1 1759 2 view .LVU1329
 4363 0006 02A8     		add	r0, sp, #8
 4364              	.LVL471:
1756:src/display.c **** 	decNumber b, c;
 4365              		.loc 1 1756 60 view .LVU1330
 4366 0008 0191     		str	r1, [sp, #4]
1759:src/display.c **** 	b.exponent -= UState.dispdigs;
 4367              		.loc 1 1759 2 view .LVU1331
 4368 000a FFF7FEFF 		bl	dn_1
 4369              	.LVL472:
1760:src/display.c **** 	dn_abs(&c, z);
 4370              		.loc 1 1760 2 is_stmt 1 view .LVU1332
1760:src/display.c **** 	dn_abs(&c, z);
 4371              		.loc 1 1760 22 is_stmt 0 view .LVU1333
 4372 000e 0F4A     		ldr	r2, .L419
1760:src/display.c **** 	dn_abs(&c, z);
 4373              		.loc 1 1760 13 view .LVU1334
 4374 0010 039B     		ldr	r3, [sp, #12]
1760:src/display.c **** 	dn_abs(&c, z);
 4375              		.loc 1 1760 22 view .LVU1335
 4376 0012 1268     		ldr	r2, [r2]
1761:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4377              		.loc 1 1761 2 view .LVU1336
 4378 0014 0199     		ldr	r1, [sp, #4]
1760:src/display.c **** 	dn_abs(&c, z);
 4379              		.loc 1 1760 22 view .LVU1337
 4380 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4381 001a 02F00F02 		and	r2, r2, #15
1760:src/display.c **** 	dn_abs(&c, z);
 4382              		.loc 1 1760 13 view .LVU1338
 4383 001e 9B1A     		subs	r3, r3, r2
1761:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4384              		.loc 1 1761 2 view .LVU1339
 4385 0020 0BA8     		add	r0, sp, #44
1760:src/display.c **** 	dn_abs(&c, z);
 4386              		.loc 1 1760 13 view .LVU1340
 4387 0022 0393     		str	r3, [sp, #12]
1761:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4388              		.loc 1 1761 2 is_stmt 1 view .LVU1341
 4389 0024 FFF7FEFF 		bl	dn_abs
ARM GAS  /tmp/ccadPcKu.s 			page 158


 4390              	.LVL473:
1762:src/display.c **** 	  return MODE_FIX;
 4391              		.loc 1 1762 2 view .LVU1342
1762:src/display.c **** 	  return MODE_FIX;
 4392              		.loc 1 1762 6 is_stmt 0 view .LVU1343
 4393 0028 0BA9     		add	r1, sp, #44
 4394 002a 02A8     		add	r0, sp, #8
 4395 002c FFF7FEFF 		bl	dn_lt
 4396              	.LVL474:
1762:src/display.c **** 	  return MODE_FIX;
 4397              		.loc 1 1762 5 view .LVU1344
 4398 0030 10B9     		cbnz	r0, .L418
1765:src/display.c **** #endif
 4399              		.loc 1 1765 7 view .LVU1345
 4400 0032 15B0     		add	sp, sp, #84
 4401              		.cfi_remember_state
 4402              		.cfi_def_cfa_offset 4
 4403              		@ sp needed
 4404 0034 5DF804FB 		ldr	pc, [sp], #4
 4405              	.LVL475:
 4406              	.L418:
 4407              		.cfi_restore_state
1762:src/display.c **** 	  return MODE_FIX;
 4408              		.loc 1 1762 23 discriminator 1 view .LVU1346
 4409 0038 0549     		ldr	r1, .L419+4
 4410 003a 0BA8     		add	r0, sp, #44
 4411 003c FFF7FEFF 		bl	dn_lt
 4412              	.LVL476:
1763:src/display.c **** 	return MODE_STD;
 4413              		.loc 1 1763 11 discriminator 1 view .LVU1347
 4414 0040 0038     		subs	r0, r0, #0
 4415 0042 18BF     		it	ne
 4416 0044 0120     		movne	r0, #1
1765:src/display.c **** #endif
 4417              		.loc 1 1765 7 discriminator 1 view .LVU1348
 4418 0046 15B0     		add	sp, sp, #84
 4419              		.cfi_def_cfa_offset 4
 4420              		@ sp needed
 4421 0048 5DF804FB 		ldr	pc, [sp], #4
 4422              	.LVL477:
 4423              	.L420:
1765:src/display.c **** #endif
 4424              		.loc 1 1765 7 discriminator 1 view .LVU1349
 4425              		.align	2
 4426              	.L419:
 4427 004c 00000000 		.word	main_ram
 4428 0050 00000000 		.word	const_1
 4429              		.cfi_endproc
 4430              	.LFE24:
 4432              		.section	.text.set_IO_annunciator,"ax",%progbits
 4433              		.align	1
 4434              		.p2align 2,,3
 4435              		.global	set_IO_annunciator
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4439              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccadPcKu.s 			page 159


 4441              	set_IO_annunciator:
 4442              	.LFB33:
2530:src/display.c **** #ifndef DM42
 4443              		.loc 1 2530 37 is_stmt 1 view -0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 0
 4446              		@ frame_needed = 0, uses_anonymous_args = 0
2535:src/display.c **** #endif
 4447              		.loc 1 2535 4 view .LVU1351
 4448              	.LVL478:
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4449              		.loc 1 2545 2 view .LVU1352
2530:src/display.c **** #ifndef DM42
 4450              		.loc 1 2530 37 is_stmt 0 view .LVU1353
 4451 0000 10B5     		push	{r4, lr}
 4452              		.cfi_def_cfa_offset 8
 4453              		.cfi_offset 4, -8
 4454              		.cfi_offset 14, -4
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4455              		.loc 1 2545 9 view .LVU1354
 4456 0002 064C     		ldr	r4, .L425
2545:src/display.c **** 	  dot(LIT_EQ, on);
 4457              		.loc 1 2545 5 view .LVU1355
 4458 0004 2368     		ldr	r3, [r4]
 4459 0006 03B9     		cbnz	r3, .L424
2550:src/display.c **** 
 4460              		.loc 1 2550 7 view .LVU1356
 4461 0008 10BD     		pop	{r4, pc}
 4462              	.L424:
 4463              	.LBB389:
 4464              	.LBI389:
2530:src/display.c **** #ifndef DM42
 4465              		.loc 1 2530 12 is_stmt 1 view .LVU1357
 4466              	.LBB390:
2546:src/display.c **** 	  IoAnnunciator = on;
 4467              		.loc 1 2546 4 view .LVU1358
 4468              	.LVL479:
 4469              	.LBB391:
 4470              	.LBI391:
 336:src/display.c ****   if (on)	set_dot(n);
 4471              		.loc 1 336 6 view .LVU1359
 4472              	.LBB392:
 337:src/display.c ****   else	clr_dot(n);
 4473              		.loc 1 337 3 view .LVU1360
 338:src/display.c **** }
 4474              		.loc 1 338 8 view .LVU1361
 4475 000a 8420     		movs	r0, #132
 4476 000c FFF7FEFF 		bl	clr_dot
 4477              	.LVL480:
 338:src/display.c **** }
 4478              		.loc 1 338 8 is_stmt 0 view .LVU1362
 4479              	.LBE392:
 4480              	.LBE391:
2547:src/display.c **** 	  finish_display(); //LIT_EQ
 4481              		.loc 1 2547 4 is_stmt 1 view .LVU1363
2547:src/display.c **** 	  finish_display(); //LIT_EQ
 4482              		.loc 1 2547 18 is_stmt 0 view .LVU1364
ARM GAS  /tmp/ccadPcKu.s 			page 160


 4483 0010 0023     		movs	r3, #0
 4484 0012 2360     		str	r3, [r4]
2548:src/display.c **** 	}
 4485              		.loc 1 2548 4 is_stmt 1 view .LVU1365
 4486              	.LBE390:
 4487              	.LBE389:
2550:src/display.c **** 
 4488              		.loc 1 2550 7 is_stmt 0 view .LVU1366
 4489 0014 BDE81040 		pop	{r4, lr}
 4490              		.cfi_restore 14
 4491              		.cfi_restore 4
 4492              		.cfi_def_cfa_offset 0
 4493              	.LBB394:
 4494              	.LBB393:
2548:src/display.c **** 	}
 4495              		.loc 1 2548 4 view .LVU1367
 4496 0018 FFF7FEBF 		b	finish_display
 4497              	.LVL481:
 4498              	.L426:
 4499              		.align	2
 4500              	.L425:
 4501 001c 00000000 		.word	IoAnnunciator
 4502              	.LBE393:
 4503              	.LBE394:
 4504              		.cfi_endproc
 4505              	.LFE33:
 4507              		.section	.text.pixel_length,"ax",%progbits
 4508              		.align	1
 4509              		.p2align 2,,3
 4510              		.global	pixel_length
 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv4-sp-d16
 4516              	pixel_length:
 4517              	.LVL482:
 4518              	.LFB40:
3386:src/display.c **** 
3387:src/display.c **** 
3388:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3389:src/display.c ****        */
3390:src/display.c ****       int pixel_length(const char *s, int smallp)
3391:src/display.c ****       {
 4519              		.loc 1 3391 7 is_stmt 1 view -0
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 0
 4522              		@ frame_needed = 0, uses_anonymous_args = 0
3392:src/display.c **** 	int len = 0;
 4523              		.loc 1 3392 2 view .LVU1369
3393:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4524              		.loc 1 3393 2 view .LVU1370
3391:src/display.c **** 	int len = 0;
 4525              		.loc 1 3391 7 is_stmt 0 view .LVU1371
 4526 0000 70B5     		push	{r4, r5, r6, lr}
 4527              		.cfi_def_cfa_offset 16
 4528              		.cfi_offset 4, -16
 4529              		.cfi_offset 5, -12
ARM GAS  /tmp/ccadPcKu.s 			page 161


 4530              		.cfi_offset 6, -8
 4531              		.cfi_offset 14, -4
3391:src/display.c **** 	int len = 0;
 4532              		.loc 1 3391 7 view .LVU1372
 4533 0002 0446     		mov	r4, r0
3394:src/display.c **** 	while (*s != '\0') {
 4534              		.loc 1 3394 9 view .LVU1373
 4535 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4536              	.LVL483:
3393:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4537              		.loc 1 3393 34 view .LVU1374
 4538 0006 0E1E     		subs	r6, r1, #0
 4539 0008 18BF     		it	ne
 4540 000a 4FF48076 		movne	r6, #256
 4541              	.LVL484:
 4542              		.loc 1 3394 2 is_stmt 1 view .LVU1375
 4543              		.loc 1 3394 8 view .LVU1376
 4544 000e A0B1     		cbz	r0, .L434
3392:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4545              		.loc 1 3392 6 is_stmt 0 view .LVU1377
 4546 0010 0025     		movs	r5, #0
 4547 0012 06E0     		b	.L432
 4548              	.LVL485:
 4549              	.L430:
3395:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3396:src/display.c **** 	  if (s[0] == '\007') {
3397:src/display.c **** 	    len += s[1] & 0x1F;
3398:src/display.c **** 	    s += 3;
3399:src/display.c **** 	    continue;
3400:src/display.c **** 	  }
3401:src/display.c **** #endif
3402:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4550              		.loc 1 3402 11 view .LVU1378
 4551 0014 3044     		add	r0, r0, r6
 4552 0016 FFF7FEFF 		bl	charlengths
 4553              	.LVL486:
 4554              		.loc 1 3402 42 view .LVU1379
 4555 001a 0134     		adds	r4, r4, #1
 4556              	.LVL487:
 4557              		.loc 1 3402 8 view .LVU1380
 4558 001c 0544     		add	r5, r5, r0
 4559              	.LVL488:
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4560              		.loc 1 3394 8 is_stmt 1 view .LVU1381
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4561              		.loc 1 3394 9 is_stmt 0 view .LVU1382
 4562 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4563              		.loc 1 3394 8 view .LVU1383
 4564 0020 48B1     		cbz	r0, .L427
 4565              	.LVL489:
 4566              	.L432:
3396:src/display.c **** 	    len += s[1] & 0x1F;
 4567              		.loc 1 3396 4 is_stmt 1 view .LVU1384
 4568              		.loc 1 3402 4 view .LVU1385
3396:src/display.c **** 	    len += s[1] & 0x1F;
 4569              		.loc 1 3396 7 is_stmt 0 view .LVU1386
ARM GAS  /tmp/ccadPcKu.s 			page 162


 4570 0022 0728     		cmp	r0, #7
 4571 0024 F6D1     		bne	.L430
3397:src/display.c **** 	    s += 3;
 4572              		.loc 1 3397 6 is_stmt 1 view .LVU1387
3397:src/display.c **** 	    s += 3;
 4573              		.loc 1 3397 18 is_stmt 0 view .LVU1388
 4574 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4575              		.loc 1 3394 9 view .LVU1389
 4576 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3397:src/display.c **** 	    s += 3;
 4577              		.loc 1 3397 18 view .LVU1390
 4578 002a 03F01F03 		and	r3, r3, #31
3398:src/display.c **** 	    continue;
 4579              		.loc 1 3398 8 view .LVU1391
 4580 002e 0334     		adds	r4, r4, #3
 4581              	.LVL490:
3397:src/display.c **** 	    s += 3;
 4582              		.loc 1 3397 10 view .LVU1392
 4583 0030 1D44     		add	r5, r5, r3
 4584              	.LVL491:
3398:src/display.c **** 	    continue;
 4585              		.loc 1 3398 6 is_stmt 1 view .LVU1393
3399:src/display.c **** 	  }
 4586              		.loc 1 3399 6 view .LVU1394
3394:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4587              		.loc 1 3394 8 view .LVU1395
 4588 0032 0028     		cmp	r0, #0
 4589 0034 F5D1     		bne	.L432
 4590              	.L427:
3403:src/display.c **** 	}
3404:src/display.c **** 	return len;
3405:src/display.c ****       }
 4591              		.loc 1 3405 7 is_stmt 0 view .LVU1396
 4592 0036 2846     		mov	r0, r5
 4593 0038 70BD     		pop	{r4, r5, r6, pc}
 4594              	.LVL492:
 4595              	.L434:
3392:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4596              		.loc 1 3392 6 view .LVU1397
 4597 003a 0546     		mov	r5, r0
3404:src/display.c ****       }
 4598              		.loc 1 3404 2 is_stmt 1 view .LVU1398
 4599              		.loc 1 3405 7 is_stmt 0 view .LVU1399
 4600 003c 2846     		mov	r0, r5
 4601 003e 70BD     		pop	{r4, r5, r6, pc}
 4602              		.loc 1 3405 7 view .LVU1400
 4603              		.cfi_endproc
 4604              	.LFE40:
 4606              		.section	.text.set_status,"ax",%progbits
 4607              		.align	1
 4608              		.p2align 2,,3
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu fpv4-sp-d16
 4614              	set_status:
ARM GAS  /tmp/ccadPcKu.s 			page 163


 4615              	.LVL493:
 4616              	.LFB43:
3406:src/display.c **** 
3407:src/display.c **** 
3408:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3409:src/display.c ****        * If this is larger than the display, return true.
3410:src/display.c ****        */
3411:src/display.c ****       static int string_too_large(const char *s) {
3412:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3413:src/display.c ****       }
3414:src/display.c ****       static int string_too_large_top(const char *s) {
3415:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3416:src/display.c ****       }
3417:src/display.c **** 
3418:src/display.c **** 
3419:src/display.c ****       /* Display the given string on the screen.
3420:src/display.c ****        */
3421:src/display.c ****       static void set_status(const char *str) {
 4617              		.loc 1 3421 47 is_stmt 1 view -0
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 0
 4620              		@ frame_needed = 0, uses_anonymous_args = 0
3422:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4621              		.loc 1 3422 2 view .LVU1402
3421:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4622              		.loc 1 3421 47 is_stmt 0 view .LVU1403
 4623 0000 10B5     		push	{r4, lr}
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 4, -8
 4626              		.cfi_offset 14, -4
 4627              		.loc 1 3422 24 view .LVU1404
 4628 0002 0D4B     		ldr	r3, .L442
 4629              		.loc 1 3422 2 view .LVU1405
 4630 0004 93F91630 		ldrsb	r3, [r3, #22]
 4631 0008 002B     		cmp	r3, #0
3421:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4632              		.loc 1 3421 47 view .LVU1406
 4633 000a 82B0     		sub	sp, sp, #8
 4634              		.cfi_def_cfa_offset 16
3421:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4635              		.loc 1 3421 47 view .LVU1407
 4636 000c 0446     		mov	r4, r0
 4637              		.loc 1 3422 2 view .LVU1408
 4638 000e 0ADA     		bge	.L441
 4639 0010 0121     		movs	r1, #1
 4640              	.LVL494:
 4641              	.L438:
 4642              	.LBB395:
 4643              	.LBI395:
3263:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4644              		.loc 1 3263 19 is_stmt 1 discriminator 6 view .LVU1409
 4645              	.LBB396:
3264:src/display.c ****       }
 4646              		.loc 1 3264 2 discriminator 6 view .LVU1410
 4647 0012 40F24A23 		movw	r3, #586
 4648 0016 0093     		str	r3, [sp]
 4649 0018 2046     		mov	r0, r4
ARM GAS  /tmp/ccadPcKu.s 			page 164


 4650 001a 8E23     		movs	r3, #142
 4651 001c 4A22     		movs	r2, #74
 4652 001e FFF7FEFF 		bl	s_s_sized
 4653              	.LVL495:
3264:src/display.c ****       }
 4654              		.loc 1 3264 2 is_stmt 0 discriminator 6 view .LVU1411
 4655              	.LBE396:
 4656              	.LBE395:
3423:src/display.c ****       }
 4657              		.loc 1 3423 7 discriminator 6 view .LVU1412
 4658 0022 02B0     		add	sp, sp, #8
 4659              		.cfi_remember_state
 4660              		.cfi_def_cfa_offset 8
 4661              		@ sp needed
 4662 0024 10BD     		pop	{r4, pc}
 4663              	.LVL496:
 4664              	.L441:
 4665              		.cfi_restore_state
 4666              	.LBB397:
 4667              	.LBI397:
3411:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4668              		.loc 1 3411 18 is_stmt 1 view .LVU1413
 4669              	.LBB398:
3412:src/display.c ****       }
 4670              		.loc 1 3412 2 view .LVU1414
3412:src/display.c ****       }
 4671              		.loc 1 3412 9 is_stmt 0 view .LVU1415
 4672 0026 0021     		movs	r1, #0
 4673 0028 FFF7FEFF 		bl	pixel_length
 4674              	.LVL497:
3412:src/display.c ****       }
 4675              		.loc 1 3412 9 view .LVU1416
 4676              	.LBE398:
 4677              	.LBE397:
3422:src/display.c ****       }
 4678              		.loc 1 3422 2 view .LVU1417
 4679 002c 4B28     		cmp	r0, #75
 4680 002e D4BF     		ite	le
 4681 0030 0021     		movle	r1, #0
 4682 0032 0121     		movgt	r1, #1
 4683 0034 EDE7     		b	.L438
 4684              	.L443:
 4685 0036 00BF     		.align	2
 4686              	.L442:
 4687 0038 00000000 		.word	StateWhileOn
 4688              		.cfi_endproc
 4689              	.LFE43:
 4691              		.section	.text.set_x_dn,"ax",%progbits
 4692              		.align	1
 4693              		.p2align 2,,3
 4694              		.global	set_x_dn
 4695              		.syntax unified
 4696              		.thumb
 4697              		.thumb_func
 4698              		.fpu fpv4-sp-d16
 4700              	set_x_dn:
 4701              	.LVL498:
ARM GAS  /tmp/ccadPcKu.s 			page 165


 4702              	.LFB27:
1903:src/display.c **** 	char x[50], *obp = x;
 4703              		.loc 1 1903 67 is_stmt 1 view -0
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 136
 4706              		@ frame_needed = 0, uses_anonymous_args = 0
1904:src/display.c **** 	int odig = 0;
 4707              		.loc 1 1904 2 view .LVU1419
1903:src/display.c **** 	char x[50], *obp = x;
 4708              		.loc 1 1903 67 is_stmt 0 view .LVU1420
 4709 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4710              		.cfi_def_cfa_offset 36
 4711              		.cfi_offset 4, -36
 4712              		.cfi_offset 5, -32
 4713              		.cfi_offset 6, -28
 4714              		.cfi_offset 7, -24
 4715              		.cfi_offset 8, -20
 4716              		.cfi_offset 9, -16
 4717              		.cfi_offset 10, -12
 4718              		.cfi_offset 11, -8
 4719              		.cfi_offset 14, -4
1920:src/display.c **** 	int mode = UState.dispmode;
 4720              		.loc 1 1920 11 view .LVU1421
 4721 0004 C84B     		ldr	r3, .L679
 4722 0006 1B68     		ldr	r3, [r3]
1903:src/display.c **** 	char x[50], *obp = x;
 4723              		.loc 1 1903 67 view .LVU1422
 4724 0008 A3B0     		sub	sp, sp, #140
 4725              		.cfi_def_cfa_offset 176
 4726              	.LVL499:
1905:src/display.c **** 	int show_exp = 0;
 4727              		.loc 1 1905 2 is_stmt 1 view .LVU1423
1906:src/display.c **** 	int j;
 4728              		.loc 1 1906 2 view .LVU1424
1907:src/display.c **** 	char mantissa[64];
 4729              		.loc 1 1907 2 view .LVU1425
1908:src/display.c **** 	int exp = 0;
 4730              		.loc 1 1908 2 view .LVU1426
1909:src/display.c **** 	char *p = mantissa;
 4731              		.loc 1 1909 2 view .LVU1427
1910:src/display.c **** 	char *r;
 4732              		.loc 1 1910 2 view .LVU1428
1911:src/display.c **** 	const char *q;
 4733              		.loc 1 1911 2 view .LVU1429
1912:src/display.c **** 	int count, i;
 4734              		.loc 1 1912 2 view .LVU1430
1913:src/display.c **** 	int extra_digits = 0;
 4735              		.loc 1 1913 2 view .LVU1431
1914:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4736              		.loc 1 1914 2 view .LVU1432
1920:src/display.c **** 	int mode = UState.dispmode;
 4737              		.loc 1 1920 2 view .LVU1433
1920:src/display.c **** 	int mode = UState.dispmode;
 4738              		.loc 1 1920 17 is_stmt 0 view .LVU1434
 4739 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1921:src/display.c **** #endif
 4740              		.loc 1 1921 19 view .LVU1435
ARM GAS  /tmp/ccadPcKu.s 			page 166


 4741 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1903:src/display.c **** 	char x[50], *obp = x;
 4742              		.loc 1 1903 67 view .LVU1436
 4743 0012 0092     		str	r2, [sp]
 4744 0014 0C46     		mov	r4, r1
 4745 0016 0646     		mov	r6, r0
1920:src/display.c **** 	int mode = UState.dispmode;
 4746              		.loc 1 1920 17 view .LVU1437
 4747 0018 05F00F05 		and	r5, r5, #15
 4748              	.LVL500:
1921:src/display.c **** #endif
 4749              		.loc 1 1921 2 is_stmt 1 view .LVU1438
1921:src/display.c **** #endif
 4750              		.loc 1 1921 19 is_stmt 0 view .LVU1439
 4751 001c BF09     		lsrs	r7, r7, #6
 4752              	.LVL501:
1923:src/display.c **** 	int negative = 0;
 4753              		.loc 1 1923 2 is_stmt 1 view .LVU1440
1924:src/display.c **** 	int trimzeros = 0;
 4754              		.loc 1 1924 2 view .LVU1441
1925:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4755              		.loc 1 1925 2 view .LVU1442
1927:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4756              		.loc 1 1927 2 view .LVU1443
1936:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4757              		.loc 1 1936 2 view .LVU1444
 4758 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4759              	.LVL502:
1938:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4760              		.loc 1 1938 2 view .LVU1445
1938:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4761              		.loc 1 1938 5 is_stmt 0 view .LVU1446
 4762 0022 002C     		cmp	r4, #0
 4763 0024 00F08A81 		beq	.L445
 4764              	.L448:
1963:src/display.c **** 	  return;
 4765              		.loc 1 1963 2 is_stmt 1 view .LVU1447
1963:src/display.c **** 	  return;
 4766              		.loc 1 1963 6 is_stmt 0 view .LVU1448
 4767 0028 2146     		mov	r1, r4
 4768 002a 06F10800 		add	r0, r6, #8
 4769 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4770              	.LVL503:
1963:src/display.c **** 	  return;
 4771              		.loc 1 1963 5 view .LVU1449
 4772 0032 8346     		mov	fp, r0
 4773 0034 0028     		cmp	r0, #0
 4774 0036 40F06F81 		bne	.L444
1966:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4775              		.loc 1 1966 2 is_stmt 1 view .LVU1450
1966:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4776              		.loc 1 1966 12 is_stmt 0 view .LVU1451
 4777 003a DFF8F092 		ldr	r9, .L679+4
1966:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4778              		.loc 1 1966 5 view .LVU1452
 4779 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4780 0042 012B     		cmp	r3, #1
ARM GAS  /tmp/ccadPcKu.s 			page 167


 4781 0044 00F0AF82 		beq	.L660
1909:src/display.c **** 	char *p = mantissa;
 4782              		.loc 1 1909 6 view .LVU1453
 4783 0048 0190     		str	r0, [sp, #4]
 4784              	.LVL504:
 4785              	.L451:
1972:src/display.c **** 
 4786              		.loc 1 1972 2 is_stmt 1 view .LVU1454
 4787 004a 0DF11408 		add	r8, sp, #20
 4788              	.LVL505:
1972:src/display.c **** 
 4789              		.loc 1 1972 2 is_stmt 0 view .LVU1455
 4790 004e 4046     		mov	r0, r8
 4791 0050 3222     		movs	r2, #50
 4792 0052 0021     		movs	r1, #0
 4793 0054 FFF7FEFF 		bl	xset
 4794              	.LVL506:
1974:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4795              		.loc 1 1974 2 is_stmt 1 view .LVU1456
1974:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4796              		.loc 1 1974 6 is_stmt 0 view .LVU1457
 4797 0058 3046     		mov	r0, r6
 4798 005a FFF7FEFF 		bl	dn_eq0
 4799              	.LVL507:
1974:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4800              		.loc 1 1974 5 view .LVU1458
 4801 005e 0028     		cmp	r0, #0
 4802 0060 00F05D81 		beq	.L452
1975:src/display.c **** 	    x[0] = '-';
 4803              		.loc 1 1975 4 is_stmt 1 view .LVU1459
1975:src/display.c **** 	    x[0] = '-';
 4804              		.loc 1 1975 7 is_stmt 0 view .LVU1460
 4805 0064 96F90830 		ldrsb	r3, [r6, #8]
 4806 0068 002B     		cmp	r3, #0
 4807 006a C0F2C182 		blt	.L661
 4808              	.L453:
1979:src/display.c **** 	} else
 4809              		.loc 1 1979 6 is_stmt 1 view .LVU1461
1979:src/display.c **** 	} else
 4810              		.loc 1 1979 11 is_stmt 0 view .LVU1462
 4811 006e 3023     		movs	r3, #48
 4812 0070 8DF81430 		strb	r3, [sp, #20]
 4813              	.L454:
1983:src/display.c **** 	  show_x(x, exp);
 4814              		.loc 1 1983 2 is_stmt 1 view .LVU1463
1983:src/display.c **** 	  show_x(x, exp);
 4815              		.loc 1 1983 12 is_stmt 0 view .LVU1464
 4816 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1983:src/display.c **** 	  show_x(x, exp);
 4817              		.loc 1 1983 5 view .LVU1465
 4818 0078 BAF1010F 		cmp	r10, #1
 4819 007c 00F0F082 		beq	.L662
2006:src/display.c **** 	  mode = std_round_fix(z);
 4820              		.loc 1 2006 2 is_stmt 1 view .LVU1466
2006:src/display.c **** 	  mode = std_round_fix(z);
 4821              		.loc 1 2006 5 is_stmt 0 view .LVU1467
 4822 0080 002F     		cmp	r7, #0
ARM GAS  /tmp/ccadPcKu.s 			page 168


 4823 0082 00F0FD81 		beq	.L663
2010:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4824              		.loc 1 2010 19 view .LVU1468
 4825 0086 009B     		ldr	r3, [sp]
 4826 0088 1B68     		ldr	r3, [r3]
2010:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4827              		.loc 1 2010 12 view .LVU1469
 4828 008a AB42     		cmp	r3, r5
1920:src/display.c **** 	int mode = UState.dispmode;
 4829              		.loc 1 1920 6 view .LVU1470
 4830 008c AA46     		mov	r10, r5
2010:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4831              		.loc 1 2010 9 is_stmt 1 view .LVU1471
2012:src/display.c **** #endif
 4832              		.loc 1 2012 4 view .LVU1472
2012:src/display.c **** #endif
 4833              		.loc 1 2012 7 is_stmt 0 view .LVU1473
 4834 008e D8BF     		it	le
 4835 0090 03F1FF3A 		addle	r10, r3, #-1
1925:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4836              		.loc 1 1925 6 view .LVU1474
 4837 0094 0023     		movs	r3, #0
 4838 0096 0193     		str	r3, [sp, #4]
 4839              	.LVL508:
 4840              	.L467:
2015:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4841              		.loc 1 2015 2 is_stmt 1 view .LVU1475
 4842 0098 0DF14809 		add	r9, sp, #72
 4843              	.LVL509:
2015:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4844              		.loc 1 2015 2 is_stmt 0 view .LVU1476
 4845 009c 3021     		movs	r1, #48
 4846 009e 4846     		mov	r0, r9
 4847 00a0 3F22     		movs	r2, #63
 4848 00a2 FFF7FEFF 		bl	xset
 4849              	.LVL510:
2016:src/display.c **** 
 4850              		.loc 1 2016 2 is_stmt 1 view .LVU1477
2016:src/display.c **** 
 4851              		.loc 1 2016 31 is_stmt 0 view .LVU1478
 4852 00a6 0023     		movs	r3, #0
2018:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4853              		.loc 1 2018 6 view .LVU1479
 4854 00a8 4521     		movs	r1, #69
 4855 00aa 4046     		mov	r0, r8
2016:src/display.c **** 
 4856              		.loc 1 2016 31 view .LVU1480
 4857 00ac 8DF88730 		strb	r3, [sp, #135]
2018:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4858              		.loc 1 2018 2 is_stmt 1 view .LVU1481
2018:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4859              		.loc 1 2018 6 is_stmt 0 view .LVU1482
 4860 00b0 FFF7FEFF 		bl	find_char
 4861              	.LVL511:
2027:src/display.c **** 	else exp = s_to_i(q+1);
 4862              		.loc 1 2027 2 is_stmt 1 view .LVU1483
2027:src/display.c **** 	else exp = s_to_i(q+1);
ARM GAS  /tmp/ccadPcKu.s 			page 169


 4863              		.loc 1 2027 5 is_stmt 0 view .LVU1484
 4864 00b4 0028     		cmp	r0, #0
 4865 00b6 00F05C81 		beq	.L568
2028:src/display.c **** #endif
 4866              		.loc 1 2028 7 is_stmt 1 view .LVU1485
2028:src/display.c **** #endif
 4867              		.loc 1 2028 13 is_stmt 0 view .LVU1486
 4868 00ba 0130     		adds	r0, r0, #1
 4869              	.LVL512:
2028:src/display.c **** #endif
 4870              		.loc 1 2028 13 view .LVU1487
 4871 00bc FFF7FEFF 		bl	s_to_i
 4872              	.LVL513:
2028:src/display.c **** #endif
 4873              		.loc 1 2028 13 view .LVU1488
 4874 00c0 0546     		mov	r5, r0
 4875              	.LVL514:
 4876              	.L468:
2032:src/display.c **** 	if (!res) {
 4877              		.loc 1 2032 2 is_stmt 1 view .LVU1489
2032:src/display.c **** 	if (!res) {
 4878              		.loc 1 2032 12 view .LVU1490
2032:src/display.c **** 	if (!res) {
 4879              		.loc 1 2032 2 is_stmt 0 view .LVU1491
 4880 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4881 00c6 202B     		cmp	r3, #32
2032:src/display.c **** 	if (!res) {
 4882              		.loc 1 2032 8 view .LVU1492
 4883 00c8 4646     		mov	r6, r8
 4884              	.LVL515:
2032:src/display.c **** 	if (!res) {
 4885              		.loc 1 2032 2 view .LVU1493
 4886 00ca 03D1     		bne	.L469
 4887              	.LVL516:
 4888              	.L470:
2032:src/display.c **** 	if (!res) {
 4889              		.loc 1 2032 27 is_stmt 1 discriminator 3 view .LVU1494
2032:src/display.c **** 	if (!res) {
 4890              		.loc 1 2032 23 discriminator 3 view .LVU1495
2032:src/display.c **** 	if (!res) {
 4891              		.loc 1 2032 12 discriminator 3 view .LVU1496
2032:src/display.c **** 	if (!res) {
 4892              		.loc 1 2032 2 is_stmt 0 discriminator 3 view .LVU1497
 4893 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4894              	.LVL517:
2032:src/display.c **** 	if (!res) {
 4895              		.loc 1 2032 2 discriminator 3 view .LVU1498
 4896 00d0 202B     		cmp	r3, #32
 4897 00d2 FBD0     		beq	.L470
 4898              	.LVL518:
 4899              	.L469:
2033:src/display.c **** 	  CLR_EXP_SIGN;
 4900              		.loc 1 2033 2 is_stmt 1 view .LVU1499
2033:src/display.c **** 	  CLR_EXP_SIGN;
 4901              		.loc 1 2033 5 is_stmt 0 view .LVU1500
 4902 00d4 002C     		cmp	r4, #0
 4903 00d6 00F09682 		beq	.L664
ARM GAS  /tmp/ccadPcKu.s 			page 170


 4904              	.L471:
2037:src/display.c **** 	  negative = 1;
 4905              		.loc 1 2037 2 is_stmt 1 view .LVU1501
2037:src/display.c **** 	  negative = 1;
 4906              		.loc 1 2037 6 is_stmt 0 view .LVU1502
 4907 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2037:src/display.c **** 	  negative = 1;
 4908              		.loc 1 2037 5 view .LVU1503
 4909 00dc 2D2B     		cmp	r3, #45
 4910 00de 00F0CA81 		beq	.L665
2040:src/display.c **** 	  q++;
 4911              		.loc 1 2040 9 is_stmt 1 view .LVU1504
2040:src/display.c **** 	  q++;
 4912              		.loc 1 2040 12 is_stmt 0 view .LVU1505
 4913 00e2 2B2B     		cmp	r3, #43
 4914 00e4 00F06E82 		beq	.L666
1924:src/display.c **** 	int trimzeros = 0;
 4915              		.loc 1 1924 6 view .LVU1506
 4916 00e8 4FF0000E 		mov	lr, #0
 4917              	.LVL519:
 4918              	.L473:
2042:src/display.c **** 	if (*q == '.') {
 4919              		.loc 1 2042 9 is_stmt 1 discriminator 1 view .LVU1507
2042:src/display.c **** 	if (*q == '.') {
 4920              		.loc 1 2042 2 is_stmt 0 discriminator 1 view .LVU1508
 4921 00ec 302B     		cmp	r3, #48
 4922 00ee 03D1     		bne	.L475
 4923              	.LVL520:
 4924              	.L474:
2042:src/display.c **** 	if (*q == '.') {
 4925              		.loc 1 2042 24 is_stmt 1 discriminator 2 view .LVU1509
2042:src/display.c **** 	if (*q == '.') {
 4926              		.loc 1 2042 20 discriminator 2 view .LVU1510
2042:src/display.c **** 	if (*q == '.') {
 4927              		.loc 1 2042 9 discriminator 2 view .LVU1511
 4928 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4929              	.LVL521:
2042:src/display.c **** 	if (*q == '.') {
 4930              		.loc 1 2042 2 is_stmt 0 discriminator 2 view .LVU1512
 4931 00f4 302B     		cmp	r3, #48
 4932 00f6 FBD0     		beq	.L474
 4933              	.LVL522:
 4934              	.L475:
2043:src/display.c **** 	  do
 4935              		.loc 1 2043 2 is_stmt 1 view .LVU1513
2043:src/display.c **** 	  do
 4936              		.loc 1 2043 5 is_stmt 0 view .LVU1514
 4937 00f8 2E2B     		cmp	r3, #46
 4938 00fa 00F0A681 		beq	.L667
2050:src/display.c **** 	    *p++ = *q++;
 4939              		.loc 1 2050 4 is_stmt 1 view .LVU1515
2050:src/display.c **** 	    *p++ = *q++;
 4940              		.loc 1 2050 7 is_stmt 0 view .LVU1516
 4941 00fe A3F13002 		sub	r2, r3, #48
 4942 0102 092A     		cmp	r2, #9
2051:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4943              		.loc 1 2051 6 is_stmt 1 view .LVU1517
ARM GAS  /tmp/ccadPcKu.s 			page 171


 4944              	.LVL523:
2051:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4945              		.loc 1 2051 15 is_stmt 0 view .LVU1518
 4946 0104 9CBF     		itt	ls
 4947 0106 0136     		addls	r6, r6, #1
 4948              	.LVL524:
2051:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4949              		.loc 1 2051 11 view .LVU1519
 4950 0108 8DF84830 		strbls	r3, [sp, #72]
2052:src/display.c **** 	    *p++ = *q++;
 4951              		.loc 1 2052 11 view .LVU1520
 4952 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2052:src/display.c **** 	    *p++ = *q++;
 4953              		.loc 1 2052 10 view .LVU1521
 4954 010e A2F13003 		sub	r3, r2, #48
2051:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4955              		.loc 1 2051 8 view .LVU1522
 4956 0112 94BF     		ite	ls
 4957 0114 0DF14901 		addls	r1, sp, #73
1910:src/display.c **** 	char *r;
 4958              		.loc 1 1910 8 view .LVU1523
 4959 0118 4946     		movhi	r1, r9
 4960              	.LVL525:
2052:src/display.c **** 	    *p++ = *q++;
 4961              		.loc 1 2052 10 is_stmt 1 view .LVU1524
 4962 011a 092B     		cmp	r3, #9
 4963 011c 0CD8     		bhi	.L481
 4964 011e A81B     		subs	r0, r5, r6
 4965 0120 731C     		adds	r3, r6, #1
 4966              	.L482:
 4967              	.LVL526:
2053:src/display.c **** 	    exp++;
 4968              		.loc 1 2053 6 view .LVU1525
2053:src/display.c **** 	    exp++;
 4969              		.loc 1 2053 11 is_stmt 0 view .LVU1526
 4970 0122 01F8012B 		strb	r2, [r1], #1
 4971              	.LVL527:
2053:src/display.c **** 	    exp++;
 4972              		.loc 1 2053 15 view .LVU1527
 4973 0126 1E46     		mov	r6, r3
 4974              	.LVL528:
2054:src/display.c **** 	  }
 4975              		.loc 1 2054 6 is_stmt 1 view .LVU1528
 4976 0128 C518     		adds	r5, r0, r3
 4977              	.LVL529:
2052:src/display.c **** 	    *p++ = *q++;
 4978              		.loc 1 2052 10 view .LVU1529
2052:src/display.c **** 	    *p++ = *q++;
 4979              		.loc 1 2052 11 is_stmt 0 view .LVU1530
 4980 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4981              	.LVL530:
2052:src/display.c **** 	    *p++ = *q++;
 4982              		.loc 1 2052 10 view .LVU1531
 4983 012e A2F1300C 		sub	ip, r2, #48
 4984 0132 BCF1090F 		cmp	ip, #9
 4985 0136 F4D9     		bls	.L482
 4986              	.LVL531:
ARM GAS  /tmp/ccadPcKu.s 			page 172


 4987              	.L481:
2056:src/display.c **** 	    q++;
 4988              		.loc 1 2056 4 is_stmt 1 view .LVU1532
2056:src/display.c **** 	    q++;
 4989              		.loc 1 2056 7 is_stmt 0 view .LVU1533
 4990 0138 2E2A     		cmp	r2, #46
 4991 013a 00F04882 		beq	.L668
 4992              	.LVL532:
 4993              	.L478:
2063:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4994              		.loc 1 2063 2 is_stmt 1 view .LVU1534
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4995              		.loc 1 2064 12 is_stmt 0 view .LVU1535
 4996 013e 009B     		ldr	r3, [sp]
2063:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4997              		.loc 1 2063 5 view .LVU1536
 4998 0140 012F     		cmp	r7, #1
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4999              		.loc 1 2064 12 view .LVU1537
 5000 0142 1E68     		ldr	r6, [r3]
2063:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5001              		.loc 1 2063 5 view .LVU1538
 5002 0144 00F06F81 		beq	.L669
 5003 0148 0022     		movs	r2, #0
 5004              	.LVL533:
 5005              	.L484:
2077:src/display.c **** 	if (*p >= '5') {	// Round up
 5006              		.loc 1 2077 2 is_stmt 1 view .LVU1539
2077:src/display.c **** 	if (*p >= '5') {	// Round up
 5007              		.loc 1 2077 20 is_stmt 0 view .LVU1540
 5008 014a 5244     		add	r2, r2, r10
2077:src/display.c **** 	if (*p >= '5') {	// Round up
 5009              		.loc 1 2077 35 view .LVU1541
 5010 014c 501C     		adds	r0, r2, #1
2077:src/display.c **** 	if (*p >= '5') {	// Round up
 5011              		.loc 1 2077 4 view .LVU1542
 5012 014e 09EB0003 		add	r3, r9, r0
 5013              	.LVL534:
2078:src/display.c **** 	  *p = '0';
 5014              		.loc 1 2078 2 is_stmt 1 view .LVU1543
2078:src/display.c **** 	  *p = '0';
 5015              		.loc 1 2078 6 is_stmt 0 view .LVU1544
 5016 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2078:src/display.c **** 	  *p = '0';
 5017              		.loc 1 2078 5 view .LVU1545
 5018 0156 3429     		cmp	r1, #52
 5019 0158 21D9     		bls	.L488
2079:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5020              		.loc 1 2079 4 is_stmt 1 view .LVU1546
2079:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5021              		.loc 1 2079 7 is_stmt 0 view .LVU1547
 5022 015a 3021     		movs	r1, #48
 5023 015c 09F80010 		strb	r1, [r9, r0]
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5024              		.loc 1 2080 4 is_stmt 1 view .LVU1548
 5025              	.LVL535:
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
ARM GAS  /tmp/ccadPcKu.s 			page 173


 5026              		.loc 1 2080 23 view .LVU1549
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2080 4 is_stmt 0 view .LVU1550
 5028 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 5029 0164 3929     		cmp	r1, #57
 5030 0166 40F0A683 		bne	.L489
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5031              		.loc 1 2080 11 view .LVU1551
 5032 016a 4946     		mov	r1, r9
 5033              	.LVL536:
 5034              	.L490:
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5035              		.loc 1 2080 38 is_stmt 1 discriminator 3 view .LVU1552
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5036              		.loc 1 2080 34 discriminator 3 view .LVU1553
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5037              		.loc 1 2080 23 discriminator 3 view .LVU1554
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5038              		.loc 1 2080 4 is_stmt 0 discriminator 3 view .LVU1555
 5039 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 5040              	.LVL537:
2080:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5041              		.loc 1 2080 4 discriminator 3 view .LVU1556
 5042 0170 BCF1390F 		cmp	ip, #57
 5043 0174 FAD0     		beq	.L490
2081:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5044              		.loc 1 2081 4 is_stmt 1 view .LVU1557
2081:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5045              		.loc 1 2081 7 is_stmt 0 view .LVU1558
 5046 0176 8B42     		cmp	r3, r1
 5047 0178 00F0FD80 		beq	.L670
 5048              	.LVL538:
 5049              	.L560:
2090:src/display.c **** 	      *p = '0';
 5050              		.loc 1 2090 12 is_stmt 1 view .LVU1559
2090:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2090 13 is_stmt 0 view .LVU1560
 5052 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2090:src/display.c **** 	      *p = '0';
 5053              		.loc 1 2090 12 view .LVU1561
 5054 0180 3929     		cmp	r1, #57
 5055 0182 4A44     		add	r2, r2, r9
 5056              	.LVL539:
2090:src/display.c **** 	      *p = '0';
 5057              		.loc 1 2090 12 view .LVU1562
 5058 0184 07D1     		bne	.L493
2091:src/display.c **** 	    (*p)++;
 5059              		.loc 1 2091 11 view .LVU1563
 5060 0186 4FF0300C 		mov	ip, #48
 5061              	.L492:
2091:src/display.c **** 	    (*p)++;
 5062              		.loc 1 2091 8 is_stmt 1 view .LVU1564
2091:src/display.c **** 	    (*p)++;
 5063              		.loc 1 2091 11 is_stmt 0 view .LVU1565
 5064 018a 82F800C0 		strb	ip, [r2]
2090:src/display.c **** 	      *p = '0';
 5065              		.loc 1 2090 12 is_stmt 1 view .LVU1566
ARM GAS  /tmp/ccadPcKu.s 			page 174


 5066              	.LVL540:
2090:src/display.c **** 	      *p = '0';
 5067              		.loc 1 2090 13 is_stmt 0 view .LVU1567
 5068 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5069              	.LVL541:
2090:src/display.c **** 	      *p = '0';
 5070              		.loc 1 2090 12 view .LVU1568
 5071 0192 3929     		cmp	r1, #57
 5072 0194 F9D0     		beq	.L492
 5073              	.L493:
2092:src/display.c **** 	  }
 5074              		.loc 1 2092 6 is_stmt 1 view .LVU1569
2092:src/display.c **** 	  }
 5075              		.loc 1 2092 10 is_stmt 0 view .LVU1570
 5076 0196 0131     		adds	r1, r1, #1
 5077 0198 1170     		strb	r1, [r2]
 5078              	.LVL542:
 5079              	.L657:
2092:src/display.c **** 	  }
 5080              		.loc 1 2092 10 view .LVU1571
 5081 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5082              	.L488:
2097:src/display.c **** 
 5083              		.loc 1 2097 2 is_stmt 1 view .LVU1572
 5084              	.LVL543:
2097:src/display.c **** 
 5085              		.loc 1 2097 45 view .LVU1573
2097:src/display.c **** 
 5086              		.loc 1 2097 2 is_stmt 0 view .LVU1574
 5087 019e 29B1     		cbz	r1, .L499
 5088              	.LVL544:
 5089              	.L559:
2097:src/display.c **** 
 5090              		.loc 1 2097 62 view .LVU1575
 5091 01a0 3021     		movs	r1, #48
 5092              	.L500:
2097:src/display.c **** 
 5093              		.loc 1 2097 68 is_stmt 1 discriminator 3 view .LVU1576
2097:src/display.c **** 
 5094              		.loc 1 2097 57 discriminator 3 view .LVU1577
 5095              	.LVL545:
2097:src/display.c **** 
 5096              		.loc 1 2097 62 is_stmt 0 discriminator 3 view .LVU1578
 5097 01a2 03F8011B 		strb	r1, [r3], #1
 5098              	.LVL546:
2097:src/display.c **** 
 5099              		.loc 1 2097 45 is_stmt 1 discriminator 3 view .LVU1579
2097:src/display.c **** 
 5100              		.loc 1 2097 2 is_stmt 0 discriminator 3 view .LVU1580
 5101 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5102 01a8 002A     		cmp	r2, #0
 5103 01aa FAD1     		bne	.L500
 5104              	.L499:
2099:src/display.c **** 	switch (mode) {
 5105              		.loc 1 2099 2 is_stmt 1 view .LVU1581
 5106              	.LVL547:
2100:src/display.c **** 	default:
ARM GAS  /tmp/ccadPcKu.s 			page 175


 5107              		.loc 1 2100 2 view .LVU1582
 5108 01ac 022F     		cmp	r7, #2
 5109 01ae 5AD0     		beq	.L582
 5110 01b0 032F     		cmp	r7, #3
 5111 01b2 00F00481 		beq	.L502
 5112 01b6 012F     		cmp	r7, #1
 5113 01b8 00F0B681 		beq	.L503
2103:src/display.c **** 	  if (count != *display_digits)
 5114              		.loc 1 2103 4 view .LVU1583
 5115              	.LVL548:
2103:src/display.c **** 	  if (count != *display_digits)
 5116              		.loc 1 2103 34 view .LVU1584
2103:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2103 42 is_stmt 0 view .LVU1585
 5118 01bc 22AB     		add	r3, sp, #136
 5119 01be 3344     		add	r3, r3, r6
2103:src/display.c **** 	  if (count != *display_digits)
 5120              		.loc 1 2103 4 view .LVU1586
 5121 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5122 01c4 302B     		cmp	r3, #48
 5123 01c6 40F06783 		bne	.L576
 5124 01ca 711E     		subs	r1, r6, #1
 5125 01cc 4944     		add	r1, r1, r9
2103:src/display.c **** 	  if (count != *display_digits)
 5126              		.loc 1 2103 15 view .LVU1587
 5127 01ce 3346     		mov	r3, r6
 5128              	.LVL549:
 5129              	.L505:
2103:src/display.c **** 	  if (count != *display_digits)
 5130              		.loc 1 2103 66 is_stmt 1 discriminator 3 view .LVU1588
2103:src/display.c **** 	  if (count != *display_digits)
 5131              		.loc 1 2103 58 discriminator 3 view .LVU1589
2103:src/display.c **** 	  if (count != *display_digits)
 5132              		.loc 1 2103 42 is_stmt 0 discriminator 3 view .LVU1590
 5133 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2103:src/display.c **** 	  if (count != *display_digits)
 5134              		.loc 1 2103 4 discriminator 3 view .LVU1591
 5135 01d4 3028     		cmp	r0, #48
 5136 01d6 1A46     		mov	r2, r3
2103:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2103 63 discriminator 3 view .LVU1592
 5138 01d8 03F1FF33 		add	r3, r3, #-1
 5139              	.LVL550:
2103:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2103 34 is_stmt 1 discriminator 3 view .LVU1593
2103:src/display.c **** 	  if (count != *display_digits)
 5141              		.loc 1 2103 4 is_stmt 0 discriminator 3 view .LVU1594
 5142 01dc F8D0     		beq	.L505
2104:src/display.c **** 	    count++;
 5143              		.loc 1 2104 4 is_stmt 1 view .LVU1595
2104:src/display.c **** 	    count++;
 5144              		.loc 1 2104 7 is_stmt 0 view .LVU1596
 5145 01de 9E42     		cmp	r6, r3
 5146 01e0 08BF     		it	eq
 5147 01e2 1A46     		moveq	r2, r3
 5148              	.LVL551:
 5149              	.L504:
ARM GAS  /tmp/ccadPcKu.s 			page 176


2107:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5150              		.loc 1 2107 4 is_stmt 1 view .LVU1597
2107:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5151              		.loc 1 2107 7 is_stmt 0 view .LVU1598
 5152 01e4 B542     		cmp	r5, r6
 5153 01e6 80F20381 		bge	.L506
2107:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5154              		.loc 1 2107 47 discriminator 1 view .LVU1599
 5155 01ea 931B     		subs	r3, r2, r6
2107:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5156              		.loc 1 2107 31 discriminator 1 view .LVU1600
 5157 01ec AB42     		cmp	r3, r5
 5158 01ee 00F3FF80 		bgt	.L506
2132:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5159              		.loc 1 2132 11 is_stmt 1 view .LVU1601
2132:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5160              		.loc 1 2132 14 is_stmt 0 view .LVU1602
 5161 01f2 002D     		cmp	r5, #0
 5162 01f4 C0F27583 		blt	.L514
 5163 01f8 6B1C     		adds	r3, r5, #1
2134:src/display.c **** 		*obp++ = ',';
 5164              		.loc 1 2134 31 view .LVU1603
 5165 01fa DFF834A1 		ldr	r10, .L679+8
 5166 01fe 0293     		str	r3, [sp, #8]
 5167 0200 09EB0300 		add	r0, r9, r3
2099:src/display.c **** 	switch (mode) {
 5168              		.loc 1 2099 4 view .LVU1604
 5169 0204 CC46     		mov	ip, r9
1904:src/display.c **** 	int odig = 0;
 5170              		.loc 1 1904 15 view .LVU1605
 5171 0206 4146     		mov	r1, r8
 5172 0208 0192     		str	r2, [sp, #4]
 5173              	.LVL552:
1904:src/display.c **** 	int odig = 0;
 5174              		.loc 1 1904 15 view .LVU1606
 5175 020a 05E0     		b	.L515
 5176              	.LVL553:
 5177              	.L518:
2135:src/display.c **** 	      *obp++ = *p++;
 5178              		.loc 1 2135 3 is_stmt 1 view .LVU1607
2134:src/display.c **** 		*obp++ = ',';
 5179              		.loc 1 2134 18 is_stmt 0 view .LVU1608
 5180 020c 022F     		cmp	r7, #2
2135:src/display.c **** 	      *obp++ = *p++;
 5181              		.loc 1 2135 10 view .LVU1609
 5182 020e 05BF     		ittet	eq
 5183 0210 2C23     		moveq	r3, #44
 5184 0212 4B70     		strbeq	r3, [r1, #1]
2136:src/display.c **** 	      odig++;
 5185              		.loc 1 2136 12 view .LVU1610
 5186 0214 0131     		addne	r1, r1, #1
 5187              	.LVL554:
2135:src/display.c **** 	      *obp++ = *p++;
 5188              		.loc 1 2135 7 view .LVU1611
 5189 0216 0231     		addeq	r1, r1, #2
 5190              	.LVL555:
 5191              	.L515:
ARM GAS  /tmp/ccadPcKu.s 			page 177


2136:src/display.c **** 	      odig++;
 5192              		.loc 1 2136 8 is_stmt 1 discriminator 2 view .LVU1612
2136:src/display.c **** 	      odig++;
 5193              		.loc 1 2136 15 is_stmt 0 discriminator 2 view .LVU1613
 5194 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5195              	.LVL556:
2134:src/display.c **** 		*obp++ = ',';
 5196              		.loc 1 2134 8 is_stmt 1 discriminator 2 view .LVU1614
2136:src/display.c **** 	      odig++;
 5197              		.loc 1 2136 15 is_stmt 0 discriminator 2 view .LVU1615
 5198 021c 0B70     		strb	r3, [r1]
2137:src/display.c **** 	    }
 5199              		.loc 1 2137 8 is_stmt 1 discriminator 2 view .LVU1616
 5200              	.LVL557:
2133:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5201              		.loc 1 2133 23 discriminator 2 view .LVU1617
2133:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5202              		.loc 1 2133 15 discriminator 2 view .LVU1618
2134:src/display.c **** 		*obp++ = ',';
 5203              		.loc 1 2134 31 is_stmt 0 discriminator 2 view .LVU1619
 5204 021e A9EB0C03 		sub	r3, r9, ip
 5205 0222 2B44     		add	r3, r3, r5
 5206 0224 8AFB0327 		smull	r2, r7, r10, r3
 5207 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5208 022c 07EB4707 		add	r7, r7, r7, lsl #1
2133:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5209              		.loc 1 2133 6 discriminator 2 view .LVU1620
 5210 0230 6045     		cmp	r0, ip
2134:src/display.c **** 		*obp++ = ',';
 5211              		.loc 1 2134 31 discriminator 2 view .LVU1621
 5212 0232 A3EB0707 		sub	r7, r3, r7
2133:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5213              		.loc 1 2133 6 discriminator 2 view .LVU1622
 5214 0236 E9D1     		bne	.L518
 5215 0238 019A     		ldr	r2, [sp, #4]
 5216 023a 029F     		ldr	r7, [sp, #8]
2139:src/display.c **** 	    if (count > (exp + 1)) {
 5217              		.loc 1 2139 6 is_stmt 1 view .LVU1623
2139:src/display.c **** 	    if (count > (exp + 1)) {
 5218              		.loc 1 2139 13 is_stmt 0 view .LVU1624
 5219 023c 2E23     		movs	r3, #46
2140:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5220              		.loc 1 2140 9 view .LVU1625
 5221 023e BA42     		cmp	r2, r7
2139:src/display.c **** 	    if (count > (exp + 1)) {
 5222              		.loc 1 2139 13 view .LVU1626
 5223 0240 4B70     		strb	r3, [r1, #1]
2139:src/display.c **** 	    if (count > (exp + 1)) {
 5224              		.loc 1 2139 10 view .LVU1627
 5225 0242 01F10203 		add	r3, r1, #2
 5226              	.LVL558:
2140:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5227              		.loc 1 2140 6 is_stmt 1 view .LVU1628
2140:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5228              		.loc 1 2140 9 is_stmt 0 view .LVU1629
 5229 0246 2BDD     		ble	.L512
 5230 0248 A2EB050C 		sub	ip, r2, r5
ARM GAS  /tmp/ccadPcKu.s 			page 178


 5231              	.LVL559:
2140:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5232              		.loc 1 2140 9 view .LVU1630
 5233 024c 8C44     		add	ip, ip, r1
 5234 024e 0131     		adds	r1, r1, #1
 5235              	.LVL560:
 5236              	.L519:
2142:src/display.c **** 		odig++;
 5237              		.loc 1 2142 3 is_stmt 1 discriminator 3 view .LVU1631
2142:src/display.c **** 		odig++;
 5238              		.loc 1 2142 10 is_stmt 0 discriminator 3 view .LVU1632
 5239 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5240              	.LVL561:
2142:src/display.c **** 		odig++;
 5241              		.loc 1 2142 10 discriminator 3 view .LVU1633
 5242 0254 01F8017F 		strb	r7, [r1, #1]!
2143:src/display.c **** 	      }
 5243              		.loc 1 2143 3 is_stmt 1 discriminator 3 view .LVU1634
2141:src/display.c **** 		*obp++ = *p++;
 5244              		.loc 1 2141 31 discriminator 3 view .LVU1635
2141:src/display.c **** 		*obp++ = *p++;
 5245              		.loc 1 2141 22 discriminator 3 view .LVU1636
2141:src/display.c **** 		*obp++ = *p++;
 5246              		.loc 1 2141 8 is_stmt 0 discriminator 3 view .LVU1637
 5247 0258 8C45     		cmp	ip, r1
 5248 025a F9D1     		bne	.L519
 5249 025c E943     		mvns	r1, r5
 5250 025e 1144     		add	r1, r1, r2
 5251 0260 0B44     		add	r3, r3, r1
 5252              	.LVL562:
2143:src/display.c **** 	      }
 5253              		.loc 1 2143 7 view .LVU1638
 5254 0262 1746     		mov	r7, r2
 5255 0264 1CE0     		b	.L512
 5256              	.LVL563:
 5257              	.L582:
2199:src/display.c **** 	  case -1:
 5258              		.loc 1 2199 16 view .LVU1639
 5259 0266 0127     		movs	r7, #1
 5260              	.LVL564:
 5261              	.L658:
2199:src/display.c **** 	  case -1:
 5262              		.loc 1 2199 16 view .LVU1640
 5263 0268 4146     		mov	r1, r8
 5264              	.LVL565:
 5265              	.L501:
2213:src/display.c **** 	  };
 5266              		.loc 1 2213 6 is_stmt 1 view .LVU1641
2214:src/display.c **** 	  // Falling through
 5267              		.loc 1 2214 5 view .LVU1642
2218:src/display.c **** 	  odig++;
 5268              		.loc 1 2218 4 view .LVU1643
2218:src/display.c **** 	  odig++;
 5269              		.loc 1 2218 15 is_stmt 0 view .LVU1644
 5270 026a 4A46     		mov	r2, r9
 5271              	.LVL566:
2218:src/display.c **** 	  odig++;
ARM GAS  /tmp/ccadPcKu.s 			page 179


 5272              		.loc 1 2218 11 view .LVU1645
 5273 026c 0B46     		mov	r3, r1
 5274 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5275              	.LVL567:
2218:src/display.c **** 	  odig++;
 5276              		.loc 1 2218 11 view .LVU1646
 5277 0272 03F8020B 		strb	r0, [r3], #2
2219:src/display.c **** 	  *obp++ = '.';
 5278              		.loc 1 2219 4 is_stmt 1 view .LVU1647
2220:src/display.c **** 	  dd--;
 5279              		.loc 1 2220 4 view .LVU1648
 5280              	.LVL568:
2222:src/display.c **** 	    *obp++ = *p++;
 5281              		.loc 1 2222 10 is_stmt 0 view .LVU1649
 5282 0276 BAF1000F 		cmp	r10, #0
2220:src/display.c **** 	  dd--;
 5283              		.loc 1 2220 11 view .LVU1650
 5284 027a 4FF02E00 		mov	r0, #46
 5285 027e 4870     		strb	r0, [r1, #1]
2221:src/display.c **** 	  while (dd-- >= 0) {
 5286              		.loc 1 2221 4 is_stmt 1 view .LVU1651
2222:src/display.c **** 	    *obp++ = *p++;
 5287              		.loc 1 2222 4 view .LVU1652
2222:src/display.c **** 	    *obp++ = *p++;
 5288              		.loc 1 2222 10 view .LVU1653
2222:src/display.c **** 	    *obp++ = *p++;
 5289              		.loc 1 2222 10 is_stmt 0 view .LVU1654
 5290 0280 40F30F83 		ble	.L579
2222:src/display.c **** 	    *obp++ = *p++;
 5291              		.loc 1 2222 10 view .LVU1655
 5292 0284 0AF10100 		add	r0, r10, #1
 5293 0288 0131     		adds	r1, r1, #1
 5294 028a 8144     		add	r9, r9, r0
 5295              	.LVL569:
 5296              	.L542:
2223:src/display.c **** 	    odig++;
 5297              		.loc 1 2223 6 is_stmt 1 view .LVU1656
2223:src/display.c **** 	    odig++;
 5298              		.loc 1 2223 13 is_stmt 0 view .LVU1657
 5299 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5300              	.LVL570:
2223:src/display.c **** 	    odig++;
 5301              		.loc 1 2223 13 view .LVU1658
 5302 0290 01F8010F 		strb	r0, [r1, #1]!
2224:src/display.c **** 	  }
 5303              		.loc 1 2224 6 is_stmt 1 view .LVU1659
2222:src/display.c **** 	    *obp++ = *p++;
 5304              		.loc 1 2222 10 view .LVU1660
2222:src/display.c **** 	    *obp++ = *p++;
 5305              		.loc 1 2222 10 is_stmt 0 view .LVU1661
 5306 0294 4A45     		cmp	r2, r9
 5307 0296 F9D1     		bne	.L542
 5308 0298 5344     		add	r3, r3, r10
 5309 029a 5744     		add	r7, r7, r10
2226:src/display.c **** 	}
 5310              		.loc 1 2226 13 view .LVU1662
 5311 029c 4FF0010B 		mov	fp, #1
ARM GAS  /tmp/ccadPcKu.s 			page 180


 5312              	.LVL571:
 5313              	.L512:
2235:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5314              		.loc 1 2235 2 is_stmt 1 view .LVU1663
2241:src/display.c **** 	if (odig > *display_digits)
 5315              		.loc 1 2241 2 view .LVU1664
 5316 02a0 B742     		cmp	r7, r6
 5317 02a2 A8BF     		it	ge
 5318 02a4 3746     		movge	r7, r6
 5319              	.LVL572:
2244:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5320              		.loc 1 2244 23 is_stmt 0 view .LVU1665
 5321 02a6 F61B     		subs	r6, r6, r7
2241:src/display.c **** 	if (odig > *display_digits)
 5322              		.loc 1 2241 7 view .LVU1666
 5323 02a8 0022     		movs	r2, #0
2244:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5324              		.loc 1 2244 4 view .LVU1667
 5325 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2241:src/display.c **** 	if (odig > *display_digits)
 5326              		.loc 1 2241 7 view .LVU1668
 5327 02ae 1A70     		strb	r2, [r3]
2242:src/display.c **** 	  odig = *display_digits;
 5328              		.loc 1 2242 2 is_stmt 1 view .LVU1669
 5329              	.LVL573:
2244:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5330              		.loc 1 2244 2 view .LVU1670
2245:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5331              		.loc 1 2245 2 view .LVU1671
2247:src/display.c **** 	  if (res) *res++ = '-';
 5332              		.loc 1 2247 2 view .LVU1672
2247:src/display.c **** 	  if (res) *res++ = '-';
 5333              		.loc 1 2247 5 is_stmt 0 view .LVU1673
 5334 02b0 BEF1000F 		cmp	lr, #0
 5335 02b4 05D0     		beq	.L543
2248:src/display.c **** 	  else {
 5336              		.loc 1 2248 4 is_stmt 1 view .LVU1674
2248:src/display.c **** 	  else {
 5337              		.loc 1 2248 7 is_stmt 0 view .LVU1675
 5338 02b6 002C     		cmp	r4, #0
 5339 02b8 00F0B281 		beq	.L544
2248:src/display.c **** 	  else {
 5340              		.loc 1 2248 13 is_stmt 1 discriminator 1 view .LVU1676
 5341              	.LVL574:
2248:src/display.c **** 	  else {
 5342              		.loc 1 2248 20 is_stmt 0 discriminator 1 view .LVU1677
 5343 02bc 2D22     		movs	r2, #45
 5344 02be 04F8012B 		strb	r2, [r4], #1
 5345              	.LVL575:
 5346              	.L543:
2256:src/display.c **** 	  if (c == '.') {
 5347              		.loc 1 2256 12 is_stmt 1 discriminator 1 view .LVU1678
2256:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2256 18 is_stmt 0 discriminator 1 view .LVU1679
 5349 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5350              	.LVL576:
2256:src/display.c **** 	  if (c == '.') {
ARM GAS  /tmp/ccadPcKu.s 			page 181


 5351              		.loc 1 2256 2 discriminator 1 view .LVU1680
 5352 02c6 E2B1     		cbz	r2, .L545
2256:src/display.c **** 	  if (c == '.') {
 5353              		.loc 1 2256 31 view .LVU1681
 5354 02c8 6B2E     		cmp	r6, #107
 5355 02ca 1ADC     		bgt	.L545
 5356              	.LVL577:
 5357              	.L546:
 5358              	.LBB415:
 5359              	.LBB416:
 369:src/display.c ****   } else {
 5360              		.loc 1 369 17 view .LVU1682
 5361 02cc 3946     		mov	r1, r7
 5362              	.LBE416:
 5363              	.LBE415:
2260:src/display.c **** 	  } else {
 5364              		.loc 1 2260 12 view .LVU1683
 5365 02ce DFF864A0 		ldr	r10, .L679+12
2258:src/display.c **** 	  } else if (c == ',') {
 5366              		.loc 1 2258 12 view .LVU1684
 5367 02d2 DFF86490 		ldr	r9, .L679+16
 5368              	.LBB420:
 5369              	.LBB417:
 369:src/display.c ****   } else {
 5370              		.loc 1 369 17 view .LVU1685
 5371 02d6 1F46     		mov	r7, r3
 5372              	.LVL578:
 369:src/display.c ****   } else {
 5373              		.loc 1 369 17 view .LVU1686
 5374 02d8 0B46     		mov	r3, r1
 5375              	.LVL579:
 5376              	.L555:
 369:src/display.c ****   } else {
 5377              		.loc 1 369 17 view .LVU1687
 5378              	.LBE417:
 5379              	.LBE420:
2257:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5380              		.loc 1 2257 4 is_stmt 1 view .LVU1688
2257:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5381              		.loc 1 2257 7 is_stmt 0 view .LVU1689
 5382 02da 2E2A     		cmp	r2, #46
 5383 02dc 00F0DB80 		beq	.L671
2259:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5384              		.loc 1 2259 11 is_stmt 1 view .LVU1690
2259:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5385              		.loc 1 2259 14 is_stmt 0 view .LVU1691
 5386 02e0 2C2A     		cmp	r2, #44
 5387 02e2 00F0E880 		beq	.L672
2262:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5388              		.loc 1 2262 6 is_stmt 1 view .LVU1692
 5389              	.LVL580:
 5390              	.LBB421:
 5391              	.LBI421:
 404:src/display.c ****   if (res) *res++ = ch;
 5392              		.loc 1 404 14 view .LVU1693
 5393              	.LBB422:
 405:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccadPcKu.s 			page 182


 5394              		.loc 1 405 3 view .LVU1694
 405:src/display.c ****   else	set_dig(base, ch);
 5395              		.loc 1 405 6 is_stmt 0 view .LVU1695
 5396 02e6 002C     		cmp	r4, #0
 5397 02e8 00F0F280 		beq	.L553
 405:src/display.c ****   else	set_dig(base, ch);
 5398              		.loc 1 405 12 is_stmt 1 view .LVU1696
 5399              	.LVL581:
 405:src/display.c ****   else	set_dig(base, ch);
 5400              		.loc 1 405 19 is_stmt 0 view .LVU1697
 5401 02ec 04F8012B 		strb	r2, [r4], #1
 5402              	.LVL582:
 5403              	.L554:
 407:src/display.c **** }
 5404              		.loc 1 407 3 is_stmt 1 view .LVU1698
 407:src/display.c **** }
 5405              		.loc 1 407 3 is_stmt 0 view .LVU1699
 5406              	.LBE422:
 5407              	.LBE421:
2263:src/display.c **** 	  }
 5408              		.loc 1 2263 6 is_stmt 1 view .LVU1700
2256:src/display.c **** 	  if (c == '.') {
 5409              		.loc 1 2256 18 is_stmt 0 view .LVU1701
 5410 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5411              	.LVL583:
2263:src/display.c **** 	  }
 5412              		.loc 1 2263 8 view .LVU1702
 5413 02f4 0936     		adds	r6, r6, #9
 5414              	.LVL584:
2256:src/display.c **** 	  if (c == '.') {
 5415              		.loc 1 2256 53 is_stmt 1 view .LVU1703
2256:src/display.c **** 	  if (c == '.') {
 5416              		.loc 1 2256 12 view .LVU1704
2256:src/display.c **** 	  if (c == '.') {
 5417              		.loc 1 2256 2 is_stmt 0 view .LVU1705
 5418 02f6 0AB1     		cbz	r2, .L654
2256:src/display.c **** 	  if (c == '.') {
 5419              		.loc 1 2256 31 discriminator 3 view .LVU1706
 5420 02f8 6B2E     		cmp	r6, #107
 5421 02fa EEDD     		ble	.L555
 5422              	.L654:
2256:src/display.c **** 	  if (c == '.') {
 5423              		.loc 1 2256 31 discriminator 3 view .LVU1707
 5424 02fc 1A46     		mov	r2, r3
 5425              	.LVL585:
2256:src/display.c **** 	  if (c == '.') {
 5426              		.loc 1 2256 31 discriminator 3 view .LVU1708
 5427 02fe 3B46     		mov	r3, r7
 5428 0300 1746     		mov	r7, r2
 5429              	.LVL586:
 5430              	.L545:
2276:src/display.c **** 	  set_exp(exp, 0, res);
 5431              		.loc 1 2276 2 is_stmt 1 view .LVU1709
2276:src/display.c **** 	  set_exp(exp, 0, res);
 5432              		.loc 1 2276 5 is_stmt 0 view .LVU1710
 5433 0302 BBF1000F 		cmp	fp, #0
 5434 0306 40F0F880 		bne	.L673
ARM GAS  /tmp/ccadPcKu.s 			page 183


 5435              	.L556:
2279:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5436              		.loc 1 2279 2 is_stmt 1 view .LVU1711
2279:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5437              		.loc 1 2279 5 is_stmt 0 view .LVU1712
 5438 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5439 030e 2E2B     		cmp	r3, #46
 5440 0310 00F0E580 		beq	.L674
 5441              	.L557:
2281:src/display.c ****       }
 5442              		.loc 1 2281 2 is_stmt 1 view .LVU1713
2281:src/display.c ****       }
 5443              		.loc 1 2281 18 is_stmt 0 view .LVU1714
 5444 0314 009B     		ldr	r3, [sp]
 5445 0316 1F60     		str	r7, [r3]
 5446              	.LVL587:
 5447              	.L444:
2282:src/display.c **** 
 5448              		.loc 1 2282 7 view .LVU1715
 5449 0318 23B0     		add	sp, sp, #140
 5450              		.cfi_remember_state
 5451              		.cfi_def_cfa_offset 36
 5452              	.LVL588:
2282:src/display.c **** 
 5453              		.loc 1 2282 7 view .LVU1716
 5454              		@ sp needed
 5455 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5456              	.LVL589:
 5457              	.L452:
 5458              		.cfi_restore_state
1981:src/display.c **** 
 5459              		.loc 1 1981 4 is_stmt 1 view .LVU1717
 5460 031e 4146     		mov	r1, r8
 5461 0320 3046     		mov	r0, r6
 5462 0322 FFF7FEFF 		bl	decNumberToString
 5463              	.LVL590:
 5464 0326 A5E6     		b	.L454
 5465              	.L680:
 5466              		.align	2
 5467              	.L679:
 5468 0328 00000000 		.word	main_ram
 5469 032c 00000000 		.word	StateWhileOn
 5470 0330 56555555 		.word	1431655766
 5471 0334 00000000 		.word	.LANCHOR0
 5472 0338 00000000 		.word	.LANCHOR1
 5473              	.LVL591:
 5474              	.L445:
1939:src/display.c **** 	    if (State2.hms) {
 5475              		.loc 1 1939 4 view .LVU1718
1939:src/display.c **** 	    if (State2.hms) {
 5476              		.loc 1 1939 25 is_stmt 0 view .LVU1719
 5477 033c C14B     		ldr	r3, .L681
 5478 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1939:src/display.c **** 	    if (State2.hms) {
 5479              		.loc 1 1939 22 view .LVU1720
 5480 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1939:src/display.c **** 	    if (State2.hms) {
ARM GAS  /tmp/ccadPcKu.s 			page 184


 5481              		.loc 1 1939 25 view .LVU1721
 5482 0342 01F00201 		and	r1, r1, #2
1939:src/display.c **** 	    if (State2.hms) {
 5483              		.loc 1 1939 22 view .LVU1722
 5484 0346 1143     		orrs	r1, r1, r2
 5485 0348 7FF46EAE 		bne	.L448
1940:src/display.c **** 	      set_x_hms(z, res);
 5486              		.loc 1 1940 6 is_stmt 1 view .LVU1723
1940:src/display.c **** 	      set_x_hms(z, res);
 5487              		.loc 1 1940 10 is_stmt 0 view .LVU1724
 5488 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1940:src/display.c **** 	      set_x_hms(z, res);
 5489              		.loc 1 1940 9 view .LVU1725
 5490 034e DA07     		lsls	r2, r3, #31
 5491 0350 00F19E82 		bmi	.L675
1944:src/display.c **** 	      if (set_x_fract(z, res))
 5492              		.loc 1 1944 11 is_stmt 1 view .LVU1726
1944:src/display.c **** 	      if (set_x_fract(z, res))
 5493              		.loc 1 1944 15 is_stmt 0 view .LVU1727
 5494 0354 BC4B     		ldr	r3, .L681+4
 5495 0356 1B68     		ldr	r3, [r3]
 5496 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1944:src/display.c **** 	      if (set_x_fract(z, res))
 5497              		.loc 1 1944 14 view .LVU1728
 5498 035c 9B06     		lsls	r3, r3, #26
 5499 035e 7FF563AE 		bpl	.L448
1945:src/display.c **** 		return;
 5500              		.loc 1 1945 8 is_stmt 1 view .LVU1729
1945:src/display.c **** 		return;
 5501              		.loc 1 1945 12 is_stmt 0 view .LVU1730
 5502 0362 2146     		mov	r1, r4
 5503 0364 3046     		mov	r0, r6
 5504 0366 FFF7FEFF 		bl	set_x_fract
 5505              	.LVL592:
1945:src/display.c **** 		return;
 5506              		.loc 1 1945 11 view .LVU1731
 5507 036a 0028     		cmp	r0, #0
 5508 036c 3FF45CAE 		beq	.L448
 5509 0370 D2E7     		b	.L444
 5510              	.LVL593:
 5511              	.L568:
2027:src/display.c **** 	else exp = s_to_i(q+1);
 5512              		.loc 1 2027 21 view .LVU1732
 5513 0372 0546     		mov	r5, r0
 5514 0374 A5E6     		b	.L468
 5515              	.LVL594:
 5516              	.L670:
2081:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5517              		.loc 1 2081 7 view .LVU1733
 5518 0376 4A46     		mov	r2, r9
2082:src/display.c **** 	    mantissa[0] = '1';
 5519              		.loc 1 2082 41 view .LVU1734
 5520 0378 4FF0300C 		mov	ip, #48
 5521              	.LVL595:
 5522              	.L494:
2082:src/display.c **** 	    mantissa[0] = '1';
 5523              		.loc 1 2082 47 is_stmt 1 discriminator 3 view .LVU1735
ARM GAS  /tmp/ccadPcKu.s 			page 185


2082:src/display.c **** 	    mantissa[0] = '1';
 5524              		.loc 1 2082 36 discriminator 3 view .LVU1736
2082:src/display.c **** 	    mantissa[0] = '1';
 5525              		.loc 1 2082 41 is_stmt 0 discriminator 3 view .LVU1737
 5526 037c 02F801CB 		strb	ip, [r2], #1
 5527              	.LVL596:
2082:src/display.c **** 	    mantissa[0] = '1';
 5528              		.loc 1 2082 25 is_stmt 1 discriminator 3 view .LVU1738
2082:src/display.c **** 	    mantissa[0] = '1';
 5529              		.loc 1 2082 6 is_stmt 0 discriminator 3 view .LVU1739
 5530 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5531 0382 3929     		cmp	r1, #57
 5532 0384 FAD0     		beq	.L494
 5533              	.LVL597:
 5534              	.L561:
2083:src/display.c **** 	    exp++;
 5535              		.loc 1 2083 6 is_stmt 1 view .LVU1740
2083:src/display.c **** 	    exp++;
 5536              		.loc 1 2083 18 is_stmt 0 view .LVU1741
 5537 0386 3122     		movs	r2, #49
2085:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5538              		.loc 1 2085 9 view .LVU1742
 5539 0388 012F     		cmp	r7, #1
2084:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5540              		.loc 1 2084 9 view .LVU1743
 5541 038a 05F10105 		add	r5, r5, #1
 5542              	.LVL598:
2083:src/display.c **** 	    exp++;
 5543              		.loc 1 2083 18 view .LVU1744
 5544 038e 8DF84820 		strb	r2, [sp, #72]
2084:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5545              		.loc 1 2084 6 is_stmt 1 view .LVU1745
 5546              	.LVL599:
2085:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5547              		.loc 1 2085 6 view .LVU1746
2085:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5548              		.loc 1 2085 9 is_stmt 0 view .LVU1747
 5549 0392 7FF402AF 		bne	.L657
2085:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5550              		.loc 1 2085 27 discriminator 1 view .LVU1748
 5551 0396 AE42     		cmp	r6, r5
 5552 0398 00F3C180 		bgt	.L496
2086:src/display.c **** 	      extra_digits = 0;
 5553              		.loc 1 2086 8 is_stmt 1 view .LVU1749
2086:src/display.c **** 	      extra_digits = 0;
 5554              		.loc 1 2086 28 is_stmt 0 view .LVU1750
 5555 039c AA4B     		ldr	r3, .L681+4
 5556              	.LVL600:
2086:src/display.c **** 	      extra_digits = 0;
 5557              		.loc 1 2086 28 view .LVU1751
 5558 039e 1B68     		ldr	r3, [r3]
 5559 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2086:src/display.c **** 	      extra_digits = 0;
 5560              		.loc 1 2086 37 view .LVU1752
 5561 03a4 D806     		lsls	r0, r3, #27
 5562              	.LVL601:
2086:src/display.c **** 	      extra_digits = 0;
ARM GAS  /tmp/ccadPcKu.s 			page 186


 5563              		.loc 1 2086 37 view .LVU1753
 5564 03a6 40F1C082 		bpl	.L676
 5565              	.LVL602:
2097:src/display.c **** 
 5566              		.loc 1 2097 2 is_stmt 1 view .LVU1754
2097:src/display.c **** 
 5567              		.loc 1 2097 40 is_stmt 0 view .LVU1755
 5568 03aa 0AF10102 		add	r2, r10, #1
2097:src/display.c **** 
 5569              		.loc 1 2097 9 view .LVU1756
 5570 03ae 09EB0203 		add	r3, r9, r2
 5571              	.LVL603:
2097:src/display.c **** 
 5572              		.loc 1 2097 45 is_stmt 1 view .LVU1757
2097:src/display.c **** 
 5573              		.loc 1 2097 2 is_stmt 0 view .LVU1758
 5574 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2086:src/display.c **** 	      extra_digits = 0;
 5575              		.loc 1 2086 37 view .LVU1759
 5576 03b6 0327     		movs	r7, #3
2097:src/display.c **** 
 5577              		.loc 1 2097 2 view .LVU1760
 5578 03b8 002A     		cmp	r2, #0
 5579 03ba 7FF4F1AE 		bne	.L559
 5580              	.LVL604:
 5581              	.L502:
2199:src/display.c **** 	  case -1:
 5582              		.loc 1 2199 4 is_stmt 1 view .LVU1761
2199:src/display.c **** 	  case -1:
 5583              		.loc 1 2199 16 is_stmt 0 view .LVU1762
 5584 03be A34B     		ldr	r3, .L681+8
 5585 03c0 83FB0523 		smull	r2, r3, r3, r5
 5586 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5587 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5588 03cc EB1A     		subs	r3, r5, r3
 5589 03ce 0233     		adds	r3, r3, #2
 5590 03d0 042B     		cmp	r3, #4
 5591 03d2 3FF648AF 		bhi	.L582
 5592 03d6 01A2     		adr	r2, .L539
 5593 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5594              		.p2align 2
 5595              	.L539:
 5596 03dc 0B050000 		.word	.L583+1
 5597 03e0 A7070000 		.word	.L538+1
 5598 03e4 67020000 		.word	.L582+1
 5599 03e8 0B050000 		.word	.L583+1
 5600 03ec A7070000 		.word	.L538+1
 5601              	.LVL605:
 5602              		.p2align 1
 5603              	.L506:
2108:src/display.c **** 	    case -1:
 5604              		.loc 1 2108 6 is_stmt 1 view .LVU1763
2108:src/display.c **** 	    case -1:
 5605              		.loc 1 2108 32 is_stmt 0 view .LVU1764
 5606 03f0 9549     		ldr	r1, .L681+4
2108:src/display.c **** 	    case -1:
 5607              		.loc 1 2108 19 view .LVU1765
ARM GAS  /tmp/ccadPcKu.s 			page 187


 5608 03f2 964B     		ldr	r3, .L681+8
2108:src/display.c **** 	    case -1:
 5609              		.loc 1 2108 32 view .LVU1766
 5610 03f4 0968     		ldr	r1, [r1]
2108:src/display.c **** 	    case -1:
 5611              		.loc 1 2108 19 view .LVU1767
 5612 03f6 83FB0503 		smull	r0, r3, r3, r5
2108:src/display.c **** 	    case -1:
 5613              		.loc 1 2108 32 view .LVU1768
 5614 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2108:src/display.c **** 	    case -1:
 5615              		.loc 1 2108 19 view .LVU1769
 5616 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5617 0402 03EB4303 		add	r3, r3, r3, lsl #1
2108:src/display.c **** 	    case -1:
 5618              		.loc 1 2108 32 view .LVU1770
 5619 0406 C1F30011 		ubfx	r1, r1, #4, #1
2108:src/display.c **** 	    case -1:
 5620              		.loc 1 2108 19 view .LVU1771
 5621 040a EB1A     		subs	r3, r5, r3
2108:src/display.c **** 	    case -1:
 5622              		.loc 1 2108 24 view .LVU1772
 5623 040c 03FB01F3 		mul	r3, r3, r1
 5624 0410 0233     		adds	r3, r3, #2
 5625 0412 042B     		cmp	r3, #4
 5626 0414 00F24282 		bhi	.L577
 5627 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5628              	.L510:
 5629 041c DC01     		.2byte	(.L578-.L510)/2
 5630 041e FD01     		.2byte	(.L509-.L510)/2
 5631 0420 4002     		.2byte	(.L577-.L510)/2
 5632 0422 DC01     		.2byte	(.L578-.L510)/2
 5633 0424 FD01     		.2byte	(.L509-.L510)/2
 5634              	.LVL606:
 5635              		.p2align 1
 5636              	.L669:
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5637              		.loc 1 2064 4 is_stmt 1 view .LVU1773
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5638              		.loc 1 2064 7 is_stmt 0 view .LVU1774
 5639 0426 AE42     		cmp	r6, r5
 5640 0428 04DD     		ble	.L485
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5641              		.loc 1 2064 45 discriminator 1 view .LVU1775
 5642 042a CAF10003 		rsb	r3, r10, #0
2064:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5643              		.loc 1 2064 36 discriminator 1 view .LVU1776
 5644 042e AB42     		cmp	r3, r5
 5645 0430 40F3C681 		ble	.L486
 5646              	.L485:
2065:src/display.c **** 	  else {
 5647              		.loc 1 2065 6 is_stmt 1 view .LVU1777
2065:src/display.c **** 	  else {
 5648              		.loc 1 2065 26 is_stmt 0 view .LVU1778
 5649 0434 844B     		ldr	r3, .L681+4
 5650 0436 1B68     		ldr	r3, [r3]
 5651 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
ARM GAS  /tmp/ccadPcKu.s 			page 188


2065:src/display.c **** 	  else {
 5652              		.loc 1 2065 35 view .LVU1779
 5653 043c 13F0100F 		tst	r3, #16
 5654 0440 14BF     		ite	ne
 5655 0442 0327     		movne	r7, #3
 5656              	.LVL607:
2065:src/display.c **** 	  else {
 5657              		.loc 1 2065 35 view .LVU1780
 5658 0444 0227     		moveq	r7, #2
 5659 0446 0022     		movs	r2, #0
 5660 0448 7FE6     		b	.L484
 5661              	.LVL608:
 5662              	.L667:
2065:src/display.c **** 	  else {
 5663              		.loc 1 2065 35 view .LVU1781
 5664 044a 013D     		subs	r5, r5, #1
 5665 044c 7219     		adds	r2, r6, r5
 5666              	.L477:
2044:src/display.c **** 	    exp--;
 5667              		.loc 1 2044 4 is_stmt 1 discriminator 1 view .LVU1782
2045:src/display.c **** 	  while (*++q == '0');
 5668              		.loc 1 2045 6 discriminator 1 view .LVU1783
 5669 044e 951B     		subs	r5, r2, r6
 5670              	.LVL609:
2046:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5671              		.loc 1 2046 10 discriminator 1 view .LVU1784
2046:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5672              		.loc 1 2046 11 is_stmt 0 discriminator 1 view .LVU1785
 5673 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5674              	.LVL610:
2046:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5675              		.loc 1 2046 4 discriminator 1 view .LVU1786
 5676 0454 302B     		cmp	r3, #48
 5677 0456 FAD0     		beq	.L477
2047:src/display.c **** 	    *p++ = *q++;
 5678              		.loc 1 2047 10 is_stmt 1 view .LVU1787
 5679 0458 A3F13002 		sub	r2, r3, #48
 5680 045c 092A     		cmp	r2, #9
 5681 045e 3FF66EAE 		bhi	.L478
1910:src/display.c **** 	char *r;
 5682              		.loc 1 1910 8 is_stmt 0 view .LVU1788
 5683 0462 4A46     		mov	r2, r9
 5684              	.LVL611:
 5685              	.L479:
2048:src/display.c **** 	} else {
 5686              		.loc 1 2048 6 is_stmt 1 view .LVU1789
2048:src/display.c **** 	} else {
 5687              		.loc 1 2048 11 is_stmt 0 view .LVU1790
 5688 0464 02F8013B 		strb	r3, [r2], #1
 5689              	.LVL612:
2047:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2047 10 is_stmt 1 view .LVU1791
2047:src/display.c **** 	    *p++ = *q++;
 5691              		.loc 1 2047 11 is_stmt 0 view .LVU1792
 5692 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2047:src/display.c **** 	    *p++ = *q++;
 5693              		.loc 1 2047 10 view .LVU1793
ARM GAS  /tmp/ccadPcKu.s 			page 189


 5694 046c A3F13001 		sub	r1, r3, #48
 5695 0470 0929     		cmp	r1, #9
 5696 0472 F7D9     		bls	.L479
 5697 0474 63E6     		b	.L478
 5698              	.LVL613:
 5699              	.L665:
2038:src/display.c **** 	  q++;
 5700              		.loc 1 2038 4 is_stmt 1 view .LVU1794
2039:src/display.c **** 	} else if (*q == '+')
 5701              		.loc 1 2039 4 view .LVU1795
2038:src/display.c **** 	  q++;
 5702              		.loc 1 2038 13 is_stmt 0 view .LVU1796
 5703 0476 4FF0010E 		mov	lr, #1
 5704 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2039:src/display.c **** 	} else if (*q == '+')
 5705              		.loc 1 2039 5 view .LVU1797
 5706 047c 7644     		add	r6, r6, lr
 5707              	.LVL614:
2039:src/display.c **** 	} else if (*q == '+')
 5708              		.loc 1 2039 5 view .LVU1798
 5709 047e 35E6     		b	.L473
 5710              	.LVL615:
 5711              	.L663:
2007:src/display.c **** 	  trimzeros = 1;
 5712              		.loc 1 2007 4 is_stmt 1 view .LVU1799
2007:src/display.c **** 	  trimzeros = 1;
 5713              		.loc 1 2007 11 is_stmt 0 view .LVU1800
 5714 0480 3046     		mov	r0, r6
 5715 0482 FFF7FEFF 		bl	std_round_fix
 5716              	.LVL616:
2009:src/display.c **** 	} else if (dd >= *display_digits)
 5717              		.loc 1 2009 7 view .LVU1801
 5718 0486 009B     		ldr	r3, [sp]
 5719 0488 1D68     		ldr	r5, [r3]
2008:src/display.c **** 	  dd = *display_digits - 1;
 5720              		.loc 1 2008 14 view .LVU1802
 5721 048a 0123     		movs	r3, #1
2007:src/display.c **** 	  trimzeros = 1;
 5722              		.loc 1 2007 11 view .LVU1803
 5723 048c 0746     		mov	r7, r0
 5724              	.LVL617:
2008:src/display.c **** 	  dd = *display_digits - 1;
 5725              		.loc 1 2008 4 is_stmt 1 view .LVU1804
2009:src/display.c **** 	} else if (dd >= *display_digits)
 5726              		.loc 1 2009 4 view .LVU1805
2009:src/display.c **** 	} else if (dd >= *display_digits)
 5727              		.loc 1 2009 7 is_stmt 0 view .LVU1806
 5728 048e 05F1FF3A 		add	r10, r5, #-1
 5729              	.LVL618:
2008:src/display.c **** 	  dd = *display_digits - 1;
 5730              		.loc 1 2008 14 view .LVU1807
 5731 0492 0193     		str	r3, [sp, #4]
 5732              	.LVL619:
2008:src/display.c **** 	  dd = *display_digits - 1;
 5733              		.loc 1 2008 14 view .LVU1808
 5734 0494 00E6     		b	.L467
 5735              	.LVL620:
ARM GAS  /tmp/ccadPcKu.s 			page 190


 5736              	.L671:
2258:src/display.c **** 	  } else if (c == ',') {
 5737              		.loc 1 2258 6 is_stmt 1 view .LVU1809
2258:src/display.c **** 	  } else if (c == ',') {
 5738              		.loc 1 2258 12 is_stmt 0 view .LVU1810
 5739 0496 2246     		mov	r2, r4
 5740              	.LVL621:
2258:src/display.c **** 	  } else if (c == ',') {
 5741              		.loc 1 2258 12 view .LVU1811
 5742 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5743 049c 0193     		str	r3, [sp, #4]
 5744 049e A6F10900 		sub	r0, r6, #9
 5745 04a2 FFF7FEFF 		bl	set_decimal
 5746              	.LVL622:
 5747 04a6 019B     		ldr	r3, [sp, #4]
 5748 04a8 0446     		mov	r4, r0
 5749              	.LVL623:
 5750              	.L549:
2256:src/display.c **** 	  if (c == '.') {
 5751              		.loc 1 2256 53 is_stmt 1 view .LVU1812
2256:src/display.c **** 	  if (c == '.') {
 5752              		.loc 1 2256 12 view .LVU1813
2256:src/display.c **** 	  if (c == '.') {
 5753              		.loc 1 2256 18 is_stmt 0 view .LVU1814
 5754 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5755              	.LVL624:
2256:src/display.c **** 	  if (c == '.') {
 5756              		.loc 1 2256 2 view .LVU1815
 5757 04ae 002A     		cmp	r2, #0
 5758 04b0 7FF413AF 		bne	.L555
 5759 04b4 22E7     		b	.L654
 5760              	.L672:
2260:src/display.c **** 	  } else {
 5761              		.loc 1 2260 6 is_stmt 1 view .LVU1816
2260:src/display.c **** 	  } else {
 5762              		.loc 1 2260 12 is_stmt 0 view .LVU1817
 5763 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5764              	.LVL625:
 5765              	.LBB424:
 5766              	.LBI415:
 364:src/display.c ****   if (sep == SEP_NONE)
 5767              		.loc 1 364 14 is_stmt 1 view .LVU1818
 5768              	.LBB418:
 365:src/display.c ****     return res;
 5769              		.loc 1 365 3 view .LVU1819
 365:src/display.c ****     return res;
 5770              		.loc 1 365 6 is_stmt 0 view .LVU1820
 5771 04ba 0029     		cmp	r1, #0
 5772 04bc F5D0     		beq	.L549
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5773              		.loc 1 367 3 is_stmt 1 view .LVU1821
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5774              		.loc 1 367 6 is_stmt 0 view .LVU1822
 5775 04be 002C     		cmp	r4, #0
 5776 04c0 00F0F281 		beq	.L551
 368:src/display.c ****     else *res++ = '.';
 5777              		.loc 1 368 5 is_stmt 1 view .LVU1823
ARM GAS  /tmp/ccadPcKu.s 			page 191


 368:src/display.c ****     else *res++ = '.';
 5778              		.loc 1 368 8 is_stmt 0 view .LVU1824
 5779 04c4 0129     		cmp	r1, #1
 368:src/display.c ****     else *res++ = '.';
 5780              		.loc 1 368 27 is_stmt 1 view .LVU1825
 5781              	.LVL626:
 369:src/display.c ****   } else {
 5782              		.loc 1 369 10 view .LVU1826
 369:src/display.c ****   } else {
 5783              		.loc 1 369 17 is_stmt 0 view .LVU1827
 5784 04c6 18BF     		it	ne
 5785 04c8 2E22     		movne	r2, #46
 5786              	.LVL627:
 369:src/display.c ****   } else {
 5787              		.loc 1 369 17 view .LVU1828
 5788 04ca 04F8012B 		strb	r2, [r4], #1
 5789              	.LVL628:
 369:src/display.c ****   } else {
 5790              		.loc 1 369 17 view .LVU1829
 5791 04ce ECE7     		b	.L549
 5792              	.LVL629:
 5793              	.L553:
 369:src/display.c ****   } else {
 5794              		.loc 1 369 17 view .LVU1830
 5795              	.LBE418:
 5796              	.LBE424:
 5797              	.LBB425:
 5798              	.LBB423:
 406:src/display.c ****   return res;
 5799              		.loc 1 406 8 view .LVU1831
 5800 04d0 1146     		mov	r1, r2
 5801 04d2 3046     		mov	r0, r6
 5802 04d4 0193     		str	r3, [sp, #4]
 406:src/display.c ****   return res;
 5803              		.loc 1 406 8 is_stmt 1 view .LVU1832
 5804 04d6 FFF7FEFF 		bl	set_dig
 5805              	.LVL630:
 406:src/display.c ****   return res;
 5806              		.loc 1 406 8 is_stmt 0 view .LVU1833
 5807 04da 019B     		ldr	r3, [sp, #4]
 5808 04dc 08E7     		b	.L554
 5809              	.LVL631:
 5810              	.L674:
 406:src/display.c ****   return res;
 5811              		.loc 1 406 8 view .LVU1834
 5812              	.LBE423:
 5813              	.LBE425:
2279:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5814              		.loc 1 2279 21 discriminator 1 view .LVU1835
 5815 04de 002C     		cmp	r4, #0
 5816 04e0 7FF418AF 		bne	.L557
2280:src/display.c **** 	*display_digits = odig;
 5817              		.loc 1 2280 4 is_stmt 1 view .LVU1836
2280:src/display.c **** 	*display_digits = odig;
 5818              		.loc 1 2280 33 is_stmt 0 view .LVU1837
 5819 04e4 009B     		ldr	r3, [sp]
 5820 04e6 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccadPcKu.s 			page 192


2280:src/display.c **** 	*display_digits = odig;
 5821              		.loc 1 2280 4 view .LVU1838
 5822 04e8 594B     		ldr	r3, .L681+12
2280:src/display.c **** 	*display_digits = odig;
 5823              		.loc 1 2280 33 view .LVU1839
 5824 04ea 0138     		subs	r0, r0, #1
2280:src/display.c **** 	*display_digits = odig;
 5825              		.loc 1 2280 4 view .LVU1840
 5826 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5827 04ee 2246     		mov	r2, r4
 5828 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5829 04f4 FFF7FEFF 		bl	set_decimal
 5830              	.LVL632:
 5831 04f8 0CE7     		b	.L557
 5832              	.L673:
2277:src/display.c **** #endif
 5833              		.loc 1 2277 4 view .LVU1841
 5834 04fa 2846     		mov	r0, r5
 5835 04fc 2246     		mov	r2, r4
 5836 04fe 0021     		movs	r1, #0
 5837 0500 0193     		str	r3, [sp, #4]
2277:src/display.c **** #endif
 5838              		.loc 1 2277 4 is_stmt 1 view .LVU1842
 5839 0502 FFF7FEFF 		bl	set_exp
 5840              	.LVL633:
 5841 0506 019B     		ldr	r3, [sp, #4]
 5842 0508 FFE6     		b	.L556
 5843              	.LVL634:
 5844              	.L583:
2199:src/display.c **** 	  case -1:
 5845              		.loc 1 2199 16 is_stmt 0 view .LVU1843
 5846 050a 0227     		movs	r7, #2
 5847 050c 4146     		mov	r1, r8
 5848              	.LVL635:
 5849              	.L540:
2208:src/display.c **** 	    odig++;
 5850              		.loc 1 2208 6 is_stmt 1 view .LVU1844
2208:src/display.c **** 	    odig++;
 5851              		.loc 1 2208 13 is_stmt 0 view .LVU1845
 5852 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5853              	.LVL636:
2208:src/display.c **** 	    odig++;
 5854              		.loc 1 2208 13 view .LVU1846
 5855 0512 01F8013B 		strb	r3, [r1], #1
 5856              	.LVL637:
2209:src/display.c **** 	    dd--;
 5857              		.loc 1 2209 6 is_stmt 1 view .LVU1847
2210:src/display.c **** 	    exp--;
 5858              		.loc 1 2210 6 view .LVU1848
2210:src/display.c **** 	    exp--;
 5859              		.loc 1 2210 8 is_stmt 0 view .LVU1849
 5860 0516 0AF1FF3A 		add	r10, r10, #-1
 5861              	.LVL638:
2211:src/display.c **** 	  case 0:
 5862              		.loc 1 2211 6 is_stmt 1 view .LVU1850
2211:src/display.c **** 	  case 0:
 5863              		.loc 1 2211 9 is_stmt 0 view .LVU1851
ARM GAS  /tmp/ccadPcKu.s 			page 193


 5864 051a 013D     		subs	r5, r5, #1
 5865              	.LVL639:
2211:src/display.c **** 	  case 0:
 5866              		.loc 1 2211 9 view .LVU1852
 5867 051c A5E6     		b	.L501
 5868              	.LVL640:
 5869              	.L496:
2097:src/display.c **** 
 5870              		.loc 1 2097 2 is_stmt 1 view .LVU1853
2097:src/display.c **** 
 5871              		.loc 1 2097 45 view .LVU1854
2097:src/display.c **** 
 5872              		.loc 1 2097 2 is_stmt 0 view .LVU1855
 5873 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5874 0522 002A     		cmp	r2, #0
 5875 0524 7FF43CAE 		bne	.L559
 5876              	.LVL641:
 5877              	.L503:
2162:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5878              		.loc 1 2162 4 is_stmt 1 view .LVU1856
2163:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5879              		.loc 1 2163 4 view .LVU1857
2163:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5880              		.loc 1 2163 7 is_stmt 0 view .LVU1858
 5881 0528 002D     		cmp	r5, #0
 5882 052a C0F21081 		blt	.L523
2163:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5883              		.loc 1 2163 7 view .LVU1859
 5884 052e 6B1C     		adds	r3, r5, #1
2165:src/display.c **** 		*obp++ = ',';
 5885              		.loc 1 2165 31 view .LVU1860
 5886 0530 DFF818C1 		ldr	ip, .L681+8
 5887 0534 0293     		str	r3, [sp, #8]
 5888 0536 09EB0300 		add	r0, r9, r3
2099:src/display.c **** 	switch (mode) {
 5889              		.loc 1 2099 4 view .LVU1861
 5890 053a 4F46     		mov	r7, r9
1904:src/display.c **** 	int odig = 0;
 5891              		.loc 1 1904 15 view .LVU1862
 5892 053c 4146     		mov	r1, r8
 5893 053e 0394     		str	r4, [sp, #12]
 5894 0540 05E0     		b	.L524
 5895              	.LVL642:
 5896              	.L527:
2166:src/display.c **** 	      *obp++ = *p++;
 5897              		.loc 1 2166 3 is_stmt 1 view .LVU1863
2165:src/display.c **** 		*obp++ = ',';
 5898              		.loc 1 2165 18 is_stmt 0 view .LVU1864
 5899 0542 022A     		cmp	r2, #2
2166:src/display.c **** 	      *obp++ = *p++;
 5900              		.loc 1 2166 10 view .LVU1865
 5901 0544 05BF     		ittet	eq
 5902 0546 2C23     		moveq	r3, #44
 5903 0548 4B70     		strbeq	r3, [r1, #1]
2167:src/display.c **** 	      odig++;
 5904              		.loc 1 2167 12 view .LVU1866
 5905 054a 0131     		addne	r1, r1, #1
ARM GAS  /tmp/ccadPcKu.s 			page 194


 5906              	.LVL643:
2166:src/display.c **** 	      *obp++ = *p++;
 5907              		.loc 1 2166 7 view .LVU1867
 5908 054c 0231     		addeq	r1, r1, #2
 5909              	.LVL644:
 5910              	.L524:
2167:src/display.c **** 	      odig++;
 5911              		.loc 1 2167 8 is_stmt 1 discriminator 2 view .LVU1868
2167:src/display.c **** 	      odig++;
 5912              		.loc 1 2167 15 is_stmt 0 discriminator 2 view .LVU1869
 5913 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5914              	.LVL645:
2165:src/display.c **** 		*obp++ = ',';
 5915              		.loc 1 2165 8 is_stmt 1 discriminator 2 view .LVU1870
2167:src/display.c **** 	      odig++;
 5916              		.loc 1 2167 15 is_stmt 0 discriminator 2 view .LVU1871
 5917 0552 0B70     		strb	r3, [r1]
2168:src/display.c **** 	    }
 5918              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1872
 5919              	.LVL646:
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5920              		.loc 1 2164 24 discriminator 2 view .LVU1873
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5921              		.loc 1 2164 16 discriminator 2 view .LVU1874
2165:src/display.c **** 		*obp++ = ',';
 5922              		.loc 1 2165 31 is_stmt 0 discriminator 2 view .LVU1875
 5923 0554 A9EB0703 		sub	r3, r9, r7
 5924 0558 2B44     		add	r3, r3, r5
 5925 055a 8CFB0342 		smull	r4, r2, ip, r3
 5926 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5927 0562 02EB4202 		add	r2, r2, r2, lsl #1
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5928              		.loc 1 2164 6 discriminator 2 view .LVU1876
 5929 0566 B842     		cmp	r0, r7
2165:src/display.c **** 		*obp++ = ',';
 5930              		.loc 1 2165 31 discriminator 2 view .LVU1877
 5931 0568 A3EB0202 		sub	r2, r3, r2
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5932              		.loc 1 2164 6 discriminator 2 view .LVU1878
 5933 056c E9D1     		bne	.L527
2170:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5934              		.loc 1 2170 13 view .LVU1879
 5935 056e 2E23     		movs	r3, #46
2171:src/display.c **** 	      *obp++ = *p++;
 5936              		.loc 1 2171 6 view .LVU1880
 5937 0570 BAF1000F 		cmp	r10, #0
2170:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5938              		.loc 1 2170 13 view .LVU1881
 5939 0574 4B70     		strb	r3, [r1, #1]
 5940 0576 039C     		ldr	r4, [sp, #12]
 5941 0578 029F     		ldr	r7, [sp, #8]
 5942              	.LVL647:
2170:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5943              		.loc 1 2170 6 is_stmt 1 view .LVU1882
2170:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5944              		.loc 1 2170 10 is_stmt 0 view .LVU1883
 5945 057a 01F10203 		add	r3, r1, #2
ARM GAS  /tmp/ccadPcKu.s 			page 195


 5946              	.LVL648:
2171:src/display.c **** 	      *obp++ = *p++;
 5947              		.loc 1 2171 6 is_stmt 1 view .LVU1884
2171:src/display.c **** 	      *obp++ = *p++;
 5948              		.loc 1 2171 16 view .LVU1885
2171:src/display.c **** 	      *obp++ = *p++;
 5949              		.loc 1 2171 6 is_stmt 0 view .LVU1886
 5950 057e 0CDD     		ble	.L528
 5951 0580 0131     		adds	r1, r1, #1
 5952 0582 00EB0A07 		add	r7, r0, r10
 5953              	.LVL649:
 5954              	.L529:
2172:src/display.c **** 	      odig++;
 5955              		.loc 1 2172 8 is_stmt 1 discriminator 4 view .LVU1887
2172:src/display.c **** 	      odig++;
 5956              		.loc 1 2172 15 is_stmt 0 discriminator 4 view .LVU1888
 5957 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5958              	.LVL650:
2172:src/display.c **** 	      odig++;
 5959              		.loc 1 2172 15 discriminator 4 view .LVU1889
 5960 058a 01F8012F 		strb	r2, [r1, #1]!
2173:src/display.c **** 	    }
 5961              		.loc 1 2173 8 is_stmt 1 discriminator 4 view .LVU1890
2171:src/display.c **** 	      *obp++ = *p++;
 5962              		.loc 1 2171 43 discriminator 4 view .LVU1891
2171:src/display.c **** 	      *obp++ = *p++;
 5963              		.loc 1 2171 16 discriminator 4 view .LVU1892
2171:src/display.c **** 	      *obp++ = *p++;
 5964              		.loc 1 2171 6 is_stmt 0 discriminator 4 view .LVU1893
 5965 058e 8742     		cmp	r7, r0
 5966 0590 F9D1     		bne	.L529
 5967 0592 029A     		ldr	r2, [sp, #8]
 5968 0594 5244     		add	r2, r2, r10
 5969 0596 5344     		add	r3, r3, r10
 5970              	.LVL651:
2171:src/display.c **** 	      *obp++ = *p++;
 5971              		.loc 1 2171 6 discriminator 4 view .LVU1894
 5972 0598 1746     		mov	r7, r2
 5973              	.LVL652:
 5974              	.L528:
2190:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5975              		.loc 1 2190 4 is_stmt 1 view .LVU1895
2190:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5976              		.loc 1 2190 7 is_stmt 0 view .LVU1896
 5977 059a 019A     		ldr	r2, [sp, #4]
 5978 059c 002A     		cmp	r2, #0
 5979 059e 40F0C480 		bne	.L534
1906:src/display.c **** 	int j;
 5980              		.loc 1 1906 6 view .LVU1897
 5981 05a2 9346     		mov	fp, r2
 5982 05a4 7CE6     		b	.L512
 5983              	.LVL653:
 5984              	.L660:
1967:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5985              		.loc 1 1967 4 is_stmt 1 view .LVU1898
 5986 05a6 2B4A     		ldr	r2, .L681+16
 5987 05a8 3146     		mov	r1, r6
ARM GAS  /tmp/ccadPcKu.s 			page 196


 5988 05aa 3046     		mov	r0, r6
 5989 05ac FFF7FEFF 		bl	decNumberNormalize
 5990              	.LVL654:
1968:src/display.c **** 	  z->exponent = 0;
 5991              		.loc 1 1968 4 view .LVU1899
1968:src/display.c **** 	  z->exponent = 0;
 5992              		.loc 1 1968 22 is_stmt 0 view .LVU1900
 5993 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5994 05b4 03EB020A 		add	r10, r3, r2
1968:src/display.c **** 	  z->exponent = 0;
 5995              		.loc 1 1968 8 view .LVU1901
 5996 05b8 0AF1FF33 		add	r3, r10, #-1
1969:src/display.c **** 	}
 5997              		.loc 1 1969 16 view .LVU1902
 5998 05bc C6F804B0 		str	fp, [r6, #4]
1968:src/display.c **** 	  z->exponent = 0;
 5999              		.loc 1 1968 8 view .LVU1903
 6000 05c0 0193     		str	r3, [sp, #4]
 6001              	.LVL655:
1969:src/display.c **** 	}
 6002              		.loc 1 1969 4 is_stmt 1 view .LVU1904
 6003 05c2 42E5     		b	.L451
 6004              	.LVL656:
 6005              	.L666:
2041:src/display.c **** 	for (; *q == '0'; q++);
 6006              		.loc 1 2041 4 view .LVU1905
2041:src/display.c **** 	for (; *q == '0'; q++);
 6007              		.loc 1 2041 4 is_stmt 0 view .LVU1906
 6008 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1924:src/display.c **** 	int trimzeros = 0;
 6009              		.loc 1 1924 6 view .LVU1907
 6010 05c6 4FF0000E 		mov	lr, #0
2041:src/display.c **** 	for (; *q == '0'; q++);
 6011              		.loc 1 2041 5 view .LVU1908
 6012 05ca 0136     		adds	r6, r6, #1
 6013              	.LVL657:
2041:src/display.c **** 	for (; *q == '0'; q++);
 6014              		.loc 1 2041 5 view .LVU1909
 6015 05cc 8EE5     		b	.L473
 6016              	.LVL658:
 6017              	.L668:
2057:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6018              		.loc 1 2057 6 is_stmt 1 view .LVU1910
2058:src/display.c **** 	      *p++ = *q++;
 6019              		.loc 1 2058 13 is_stmt 0 view .LVU1911
 6020 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2058:src/display.c **** 	      *p++ = *q++;
 6021              		.loc 1 2058 12 view .LVU1912
 6022 05d0 A3F13002 		sub	r2, r3, #48
 6023 05d4 092A     		cmp	r2, #9
2057:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6024              		.loc 1 2057 7 view .LVU1913
 6025 05d6 06F10106 		add	r6, r6, #1
 6026              	.LVL659:
2058:src/display.c **** 	      *p++ = *q++;
 6027              		.loc 1 2058 6 is_stmt 1 view .LVU1914
2058:src/display.c **** 	      *p++ = *q++;
ARM GAS  /tmp/ccadPcKu.s 			page 197


 6028              		.loc 1 2058 12 view .LVU1915
 6029 05da 3FF6B0AD 		bhi	.L478
 6030              	.LVL660:
 6031              	.L483:
2059:src/display.c **** 	  }
 6032              		.loc 1 2059 8 view .LVU1916
2059:src/display.c **** 	  }
 6033              		.loc 1 2059 13 is_stmt 0 view .LVU1917
 6034 05de 01F8013B 		strb	r3, [r1], #1
 6035              	.LVL661:
2058:src/display.c **** 	      *p++ = *q++;
 6036              		.loc 1 2058 12 is_stmt 1 view .LVU1918
2058:src/display.c **** 	      *p++ = *q++;
 6037              		.loc 1 2058 13 is_stmt 0 view .LVU1919
 6038 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2058:src/display.c **** 	      *p++ = *q++;
 6039              		.loc 1 2058 12 view .LVU1920
 6040 05e6 A3F13002 		sub	r2, r3, #48
 6041 05ea 092A     		cmp	r2, #9
 6042 05ec F7D9     		bls	.L483
 6043 05ee A6E5     		b	.L478
 6044              	.LVL662:
 6045              	.L661:
1975:src/display.c **** 	    x[0] = '-';
 6046              		.loc 1 1975 34 discriminator 1 view .LVU1921
 6047 05f0 6B20     		movs	r0, #107
 6048 05f2 FFF7FEFF 		bl	get_user_flag
 6049              	.LVL663:
1975:src/display.c **** 	    x[0] = '-';
 6050              		.loc 1 1975 31 discriminator 1 view .LVU1922
 6051 05f6 0028     		cmp	r0, #0
 6052 05f8 3FF439AD 		beq	.L453
1976:src/display.c **** 	    x[1] = '0';
 6053              		.loc 1 1976 6 is_stmt 1 view .LVU1923
1977:src/display.c **** 	  } else
 6054              		.loc 1 1977 6 view .LVU1924
1976:src/display.c **** 	    x[1] = '0';
 6055              		.loc 1 1976 11 is_stmt 0 view .LVU1925
 6056 05fc 43F22D03 		movw	r3, #12333
 6057 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1977:src/display.c **** 	  } else
 6058              		.loc 1 1977 11 view .LVU1926
 6059 0604 36E5     		b	.L454
 6060              	.LVL664:
 6061              	.L664:
2034:src/display.c **** 	  CLR_MANT_SIGN;
 6062              		.loc 1 2034 4 is_stmt 1 view .LVU1927
 6063              	.LBB426:
 6064              	.LBI426:
 311:src/display.c **** {
 6065              		.loc 1 311 13 view .LVU1928
 6066              	.LBB427:
 313:src/display.c ****   clr_dot(EXP_SIGN);
 6067              		.loc 1 313 3 view .LVU1929
 314:src/display.c **** }
 6068              		.loc 1 314 3 view .LVU1930
 313:src/display.c ****   clr_dot(EXP_SIGN);
ARM GAS  /tmp/ccadPcKu.s 			page 198


 6069              		.loc 1 313 27 is_stmt 0 view .LVU1931
 6070 0606 144B     		ldr	r3, .L681+20
 6071 0608 2022     		movs	r2, #32
 314:src/display.c **** }
 6072              		.loc 1 314 3 view .LVU1932
 6073 060a 8220     		movs	r0, #130
 313:src/display.c ****   clr_dot(EXP_SIGN);
 6074              		.loc 1 313 27 view .LVU1933
 6075 060c 1A70     		strb	r2, [r3]
 314:src/display.c **** }
 6076              		.loc 1 314 3 view .LVU1934
 6077 060e FFF7FEFF 		bl	clr_dot
 6078              	.LVL665:
 6079              	.LBE427:
 6080              	.LBE426:
2035:src/display.c **** 	}
 6081              		.loc 1 2035 4 is_stmt 1 view .LVU1935
 6082              	.LBB428:
 6083              	.LBI428:
 299:src/display.c **** {
 6084              		.loc 1 299 13 view .LVU1936
 6085              	.LBB429:
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6086              		.loc 1 301 3 view .LVU1937
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6087              		.loc 1 301 25 is_stmt 0 view .LVU1938
 6088 0612 124B     		ldr	r3, .L681+24
 6089 0614 2022     		movs	r2, #32
 302:src/display.c **** }
 6090              		.loc 1 302 3 view .LVU1939
 6091 0616 8120     		movs	r0, #129
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6092              		.loc 1 301 25 view .LVU1940
 6093 0618 1A70     		strb	r2, [r3]
 302:src/display.c **** }
 6094              		.loc 1 302 3 is_stmt 1 view .LVU1941
 6095 061a FFF7FEFF 		bl	clr_dot
 6096              	.LVL666:
 303:src/display.c **** 
 6097              		.loc 1 303 1 is_stmt 0 view .LVU1942
 6098 061e 5CE5     		b	.L471
 6099              	.LVL667:
 6100              	.L544:
 303:src/display.c **** 
 6101              		.loc 1 303 1 view .LVU1943
 6102              	.LBE429:
 6103              	.LBE428:
2250:src/display.c **** 	      SET_MANT_SIGN;
 6104              		.loc 1 2250 6 is_stmt 1 view .LVU1944
 6105 0620 0193     		str	r3, [sp, #4]
2250:src/display.c **** 	      SET_MANT_SIGN;
 6106              		.loc 1 2250 9 is_stmt 0 view .LVU1945
 6107 0622 002E     		cmp	r6, #0
 6108 0624 40F00281 		bne	.L547
2251:src/display.c **** 	    else
 6109              		.loc 1 2251 8 is_stmt 1 view .LVU1946
 6110              	.LBB430:
ARM GAS  /tmp/ccadPcKu.s 			page 199


 6111              	.LBI430:
 293:src/display.c **** {
 6112              		.loc 1 293 13 view .LVU1947
 6113              	.LBB431:
 295:src/display.c ****   set_dot(MANT_SIGN);
 6114              		.loc 1 295 3 view .LVU1948
 295:src/display.c ****   set_dot(MANT_SIGN);
 6115              		.loc 1 295 25 is_stmt 0 view .LVU1949
 6116 0628 0C4A     		ldr	r2, .L681+24
 6117 062a 2D21     		movs	r1, #45
 296:src/display.c **** }
 6118              		.loc 1 296 3 view .LVU1950
 6119 062c 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 6120              		.loc 1 295 25 view .LVU1951
 6121 062e 1170     		strb	r1, [r2]
 296:src/display.c **** }
 6122              		.loc 1 296 3 is_stmt 1 view .LVU1952
 6123 0630 FFF7FEFF 		bl	set_dot
 6124              	.LVL668:
 296:src/display.c **** }
 6125              		.loc 1 296 3 is_stmt 0 view .LVU1953
 6126              	.LBE431:
 6127              	.LBE430:
2256:src/display.c **** 	  if (c == '.') {
 6128              		.loc 1 2256 12 is_stmt 1 view .LVU1954
2256:src/display.c **** 	  if (c == '.') {
 6129              		.loc 1 2256 18 is_stmt 0 view .LVU1955
 6130 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6131              	.LVL669:
2256:src/display.c **** 	  if (c == '.') {
 6132              		.loc 1 2256 2 view .LVU1956
 6133 0638 019B     		ldr	r3, [sp, #4]
 6134 063a 002A     		cmp	r2, #0
 6135 063c 7FF446AE 		bne	.L546
 6136 0640 5FE6     		b	.L545
 6137              	.L682:
 6138 0642 00BF     		.align	2
 6139              	.L681:
 6140 0644 00000000 		.word	StateWhileOn
 6141 0648 00000000 		.word	main_ram
 6142 064c 56555555 		.word	1431655766
 6143 0650 00000000 		.word	.LANCHOR1
 6144 0654 00000000 		.word	Ctx
 6145 0658 00000000 		.word	LastDisplayedExponent
 6146 065c 00000000 		.word	LastDisplayedNumber
 6147              	.LVL670:
 6148              	.L662:
1984:src/display.c **** 	  return;
 6149              		.loc 1 1984 4 is_stmt 1 view .LVU1957
 6150              	.LBB432:
 6151              	.LBI432:
1772:src/display.c **** 	const int dbl = is_dblmode();
 6152              		.loc 1 1772 19 view .LVU1958
 6153              	.LBB433:
1773:src/display.c **** 	char *p;
 6154              		.loc 1 1773 2 view .LVU1959
ARM GAS  /tmp/ccadPcKu.s 			page 200


1773:src/display.c **** 	char *p;
 6155              		.loc 1 1773 18 is_stmt 0 view .LVU1960
 6156 0660 FFF7FEFF 		bl	is_dblmode
 6157              	.LVL671:
1789:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6158              		.loc 1 1789 5 view .LVU1961
 6159 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6160 0668 2D2B     		cmp	r3, #45
1773:src/display.c **** 	char *p;
 6161              		.loc 1 1773 18 view .LVU1962
 6162 066a 0446     		mov	r4, r0
 6163              	.LVL672:
1774:src/display.c **** 	int i, j;
 6164              		.loc 1 1774 2 is_stmt 1 view .LVU1963
1775:src/display.c **** 	char *upper_str;
 6165              		.loc 1 1775 2 view .LVU1964
1776:src/display.c **** 	enum separator_modes separator_mode;
 6166              		.loc 1 1776 2 view .LVU1965
1777:src/display.c **** 	char decimal_mark;
 6167              		.loc 1 1777 2 view .LVU1966
1778:src/display.c **** 	char thousands_sep;
 6168              		.loc 1 1778 2 view .LVU1967
1779:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6169              		.loc 1 1779 2 view .LVU1968
1785:src/display.c **** #endif
 6170              		.loc 1 1785 2 view .LVU1969
1787:src/display.c **** 
 6171              		.loc 1 1787 2 view .LVU1970
1789:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6172              		.loc 1 1789 2 view .LVU1971
1789:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6173              		.loc 1 1789 5 is_stmt 0 view .LVU1972
 6174 066c 00F02A81 		beq	.L677
1802:src/display.c **** 
 6175              		.loc 1 1802 16 view .LVU1973
 6176 0670 0026     		movs	r6, #0
 6177              	.LVL673:
 6178              	.L456:
1804:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6179              		.loc 1 1804 2 is_stmt 1 view .LVU1974
1804:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6180              		.loc 1 1804 6 is_stmt 0 view .LVU1975
 6181 0672 0021     		movs	r1, #0
 6182 0674 4046     		mov	r0, r8
 6183 0676 FFF7FEFF 		bl	find_char
 6184              	.LVL674:
1805:src/display.c **** 
 6185              		.loc 1 1805 2 is_stmt 1 view .LVU1976
1805:src/display.c **** 
 6186              		.loc 1 1805 23 is_stmt 0 view .LVU1977
 6187 067a A0EB0802 		sub	r2, r0, r8
1805:src/display.c **** 
 6188              		.loc 1 1805 2 view .LVU1978
 6189 067e C2F12202 		rsb	r2, r2, #34
 6190 0682 3021     		movs	r1, #48
 6191 0684 FFF7FEFF 		bl	xset
 6192              	.LVL675:
ARM GAS  /tmp/ccadPcKu.s 			page 201


1807:src/display.c **** 	  separator_mode = SEP_COMMA;
 6193              		.loc 1 1807 2 is_stmt 1 view .LVU1979
1807:src/display.c **** 	  separator_mode = SEP_COMMA;
 6194              		.loc 1 1807 18 is_stmt 0 view .LVU1980
 6195 0688 B14A     		ldr	r2, .L683
1818:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6196              		.loc 1 1818 6 view .LVU1981
 6197 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1807:src/display.c **** 	  separator_mode = SEP_COMMA;
 6198              		.loc 1 1807 5 view .LVU1982
 6199 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1815:src/display.c **** 	}
 6200              		.loc 1 1815 18 view .LVU1983
 6201 0690 002A     		cmp	r2, #0
 6202 0692 15BF     		itete	ne
 6203 0694 4FF0020A 		movne	r10, #2
 6204 0698 2C27     		moveq	r7, #44
 6205 069a 2E27     		movne	r7, #46
 6206              	.LVL676:
1815:src/display.c **** 	}
 6207              		.loc 1 1815 18 view .LVU1984
 6208 069c 2E25     		moveq	r5, #46
 6209 069e 18BF     		it	ne
 6210 06a0 2C25     		movne	r5, #44
 6211              	.LVL677:
1818:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6212              		.loc 1 1818 2 is_stmt 1 view .LVU1985
1818:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6213              		.loc 1 1818 5 is_stmt 0 view .LVU1986
 6214 06a2 13F0380F 		tst	r3, #56
 6215 06a6 40F0C880 		bne	.L678
1845:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6216              		.loc 1 1845 4 is_stmt 1 view .LVU1987
 6217              	.LVL678:
1846:src/display.c **** 	  x[1] = decimal_mark;
 6218              		.loc 1 1846 4 view .LVU1988
 6219 06aa 1022     		movs	r2, #16
 6220 06ac 08F10101 		add	r1, r8, #1
 6221 06b0 08F10200 		add	r0, r8, #2
 6222 06b4 FFF7FEFF 		bl	xcopy
 6223              	.LVL679:
1847:src/display.c **** 	  if (grouping) {
 6224              		.loc 1 1847 4 view .LVU1989
1849:src/display.c **** 	    x[5] = thousands_sep;
 6225              		.loc 1 1849 6 is_stmt 0 view .LVU1990
 6226 06b8 0D22     		movs	r2, #13
 6227 06ba 08F10501 		add	r1, r8, #5
 6228 06be 08F10600 		add	r0, r8, #6
1847:src/display.c **** 	  if (grouping) {
 6229              		.loc 1 1847 9 view .LVU1991
 6230 06c2 88F80150 		strb	r5, [r8, #1]
1848:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6231              		.loc 1 1848 4 is_stmt 1 view .LVU1992
1849:src/display.c **** 	    x[5] = thousands_sep;
 6232              		.loc 1 1849 6 view .LVU1993
 6233 06c6 FFF7FEFF 		bl	xcopy
 6234              	.LVL680:
ARM GAS  /tmp/ccadPcKu.s 			page 202


1850:src/display.c **** 	    x += 9;
 6235              		.loc 1 1850 6 view .LVU1994
1851:src/display.c **** 	  }
 6236              		.loc 1 1851 8 is_stmt 0 view .LVU1995
 6237 06ca 08F10905 		add	r5, r8, #9
 6238              	.LVL681:
1850:src/display.c **** 	    x += 9;
 6239              		.loc 1 1850 11 view .LVU1996
 6240 06ce 88F80570 		strb	r7, [r8, #5]
1851:src/display.c **** 	  }
 6241              		.loc 1 1851 6 is_stmt 1 view .LVU1997
 6242              	.LVL682:
1854:src/display.c **** 	    if (exp < 0) {
 6243              		.loc 1 1854 4 view .LVU1998
1854:src/display.c **** 	    if (exp < 0) {
 6244              		.loc 1 1854 7 is_stmt 0 view .LVU1999
 6245 06d2 002C     		cmp	r4, #0
 6246 06d4 00F0F380 		beq	.L460
1855:src/display.c **** 	      x[9] = '-';
 6247              		.loc 1 1855 6 is_stmt 1 view .LVU2000
1855:src/display.c **** 	      x[9] = '-';
 6248              		.loc 1 1855 9 is_stmt 0 view .LVU2001
 6249 06d8 019B     		ldr	r3, [sp, #4]
1863:src/display.c **** 	  }
 6250              		.loc 1 1863 18 view .LVU2002
 6251 06da 9E49     		ldr	r1, .L683+4
1855:src/display.c **** 	      x[9] = '-';
 6252              		.loc 1 1855 9 view .LVU2003
 6253 06dc 002B     		cmp	r3, #0
1856:src/display.c **** 	      exp = -exp;
 6254              		.loc 1 1856 8 is_stmt 1 view .LVU2004
1857:src/display.c **** 	    }
 6255              		.loc 1 1857 8 view .LVU2005
1857:src/display.c **** 	    }
 6256              		.loc 1 1857 12 is_stmt 0 view .LVU2006
 6257 06de BCBF     		itt	lt
 6258 06e0 5B42     		rsblt	r3, r3, #0
 6259 06e2 0193     		strlt	r3, [sp, #4]
 6260              	.LVL683:
1861:src/display.c **** 	    x[10] = '0' + j;
 6261              		.loc 1 1861 8 view .LVU2007
 6262 06e4 0198     		ldr	r0, [sp, #4]
 6263 06e6 9C4B     		ldr	r3, .L683+8
1856:src/display.c **** 	      exp = -exp;
 6264              		.loc 1 1856 13 view .LVU2008
 6265 06e8 B4BF     		ite	lt
 6266 06ea 2D22     		movlt	r2, #45
1860:src/display.c **** 	    j = exp / 1000;
 6267              		.loc 1 1860 13 view .LVU2009
 6268 06ec 2022     		movge	r2, #32
 6269 06ee 88F81220 		strb	r2, [r8, #18]
1861:src/display.c **** 	    x[10] = '0' + j;
 6270              		.loc 1 1861 6 is_stmt 1 view .LVU2010
1861:src/display.c **** 	    x[10] = '0' + j;
 6271              		.loc 1 1861 8 is_stmt 0 view .LVU2011
 6272 06f2 0246     		mov	r2, r0
 6273 06f4 A3FB0223 		umull	r2, r3, r3, r2
ARM GAS  /tmp/ccadPcKu.s 			page 203


 6274 06f8 9B09     		lsrs	r3, r3, #6
 6275              	.LVL684:
1862:src/display.c **** 	    exp -= 1000 * j;
 6276              		.loc 1 1862 6 is_stmt 1 view .LVU2012
1862:src/display.c **** 	    exp -= 1000 * j;
 6277              		.loc 1 1862 18 is_stmt 0 view .LVU2013
 6278 06fa 03F13002 		add	r2, r3, #48
1863:src/display.c **** 	  }
 6279              		.loc 1 1863 10 view .LVU2014
 6280 06fe 01FB0303 		mla	r3, r1, r3, r0
 6281              	.LVL685:
1863:src/display.c **** 	  }
 6282              		.loc 1 1863 10 view .LVU2015
 6283 0702 0193     		str	r3, [sp, #4]
 6284              	.LVL686:
1862:src/display.c **** 	    exp -= 1000 * j;
 6285              		.loc 1 1862 12 view .LVU2016
 6286 0704 88F81320 		strb	r2, [r8, #19]
1863:src/display.c **** 	  }
 6287              		.loc 1 1863 6 is_stmt 1 view .LVU2017
 6288              	.LVL687:
 6289              	.L462:
1869:src/display.c **** 	  *x = 0;
 6290              		.loc 1 1869 4 view .LVU2018
 6291 0708 0B22     		movs	r2, #11
 6292 070a 2946     		mov	r1, r5
 6293 070c 08F10A00 		add	r0, r8, #10
 6294 0710 FFF7FEFF 		bl	xcopy
 6295              	.LVL688:
1870:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6296              		.loc 1 1870 4 view .LVU2019
1870:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6297              		.loc 1 1870 7 is_stmt 0 view .LVU2020
 6298 0714 0022     		movs	r2, #0
1871:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6299              		.loc 1 1871 4 view .LVU2021
 6300 0716 0198     		ldr	r0, [sp, #4]
1870:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6301              		.loc 1 1870 7 view .LVU2022
 6302 0718 88F80920 		strb	r2, [r8, #9]
1871:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6303              		.loc 1 1871 4 is_stmt 1 view .LVU2023
 6304 071c 0121     		movs	r1, #1
 6305 071e FFF7FEFF 		bl	set_exp
 6306              	.LVL689:
1872:src/display.c **** 	}
 6307              		.loc 1 1872 4 view .LVU2024
1872:src/display.c **** 	}
 6308              		.loc 1 1872 4 is_stmt 0 view .LVU2025
 6309 0722 A8EB0606 		sub	r6, r8, r6
 6310              	.LVL690:
1872:src/display.c **** 	}
 6311              		.loc 1 1872 6 view .LVU2026
 6312 0726 0924     		movs	r4, #9
 6313              	.LVL691:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6314              		.loc 1 1875 11 is_stmt 1 view .LVU2027
ARM GAS  /tmp/ccadPcKu.s 			page 204


 6315 0728 9AE0     		b	.L463
 6316              	.LVL692:
 6317              	.L534:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6318              		.loc 1 1875 11 is_stmt 0 view .LVU2028
 6319              	.LBE433:
 6320              	.LBE432:
2191:src/display.c **** 	      obp--;
 6321              		.loc 1 2191 12 is_stmt 1 view .LVU2029
 6322 072a 4345     		cmp	r3, r8
 6323 072c 88BF     		it	hi
 6324 072e 1A46     		movhi	r2, r3
 6325 0730 7FF6B6AD 		bls	.L512
 6326              	.L536:
2192:src/display.c **** 	      odig--;
 6327              		.loc 1 2192 8 discriminator 1 view .LVU2030
 6328 0734 1346     		mov	r3, r2
 6329              	.LVL693:
2192:src/display.c **** 	      odig--;
 6330              		.loc 1 2192 8 is_stmt 0 discriminator 1 view .LVU2031
 6331 0736 013A     		subs	r2, r2, #1
 6332              	.LVL694:
2193:src/display.c **** 	    }
 6333              		.loc 1 2193 8 is_stmt 1 discriminator 1 view .LVU2032
2191:src/display.c **** 	      obp--;
 6334              		.loc 1 2191 21 is_stmt 0 discriminator 1 view .LVU2033
 6335 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6336 073c 3029     		cmp	r1, #48
 6337 073e 7FF4AFAD 		bne	.L512
2191:src/display.c **** 	      obp--;
 6338              		.loc 1 2191 12 view .LVU2034
 6339 0742 9045     		cmp	r8, r2
2193:src/display.c **** 	    }
 6340              		.loc 1 2193 12 view .LVU2035
 6341 0744 07F1FF37 		add	r7, r7, #-1
 6342              	.LVL695:
2191:src/display.c **** 	      obp--;
 6343              		.loc 1 2191 12 is_stmt 1 view .LVU2036
 6344 0748 F4D1     		bne	.L536
 6345 074a 4346     		mov	r3, r8
 6346 074c A8E5     		b	.L512
 6347              	.LVL696:
 6348              	.L523:
2176:src/display.c **** 	    odig++;
 6349              		.loc 1 2176 6 view .LVU2037
2177:src/display.c **** 	    *obp++ = '.';
 6350              		.loc 1 2177 6 view .LVU2038
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6351              		.loc 1 2178 6 view .LVU2039
2176:src/display.c **** 	    odig++;
 6352              		.loc 1 2176 13 is_stmt 0 view .LVU2040
 6353 074e 42F63063 		movw	r3, #11824
 6354 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2179:src/display.c **** 	      *obp++ = '0';
 6355              		.loc 1 2179 6 is_stmt 1 view .LVU2041
 6356              	.LVL697:
2179:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccadPcKu.s 			page 205


 6357              		.loc 1 2179 20 view .LVU2042
2179:src/display.c **** 	      *obp++ = '0';
 6358              		.loc 1 2179 6 is_stmt 0 view .LVU2043
 6359 0756 6B1C     		adds	r3, r5, #1
 6360              	.LVL698:
2179:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2179 6 view .LVU2044
 6362 0758 00F0F280 		beq	.L581
 6363 075c C5F10101 		rsb	r1, r5, #1
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6364              		.loc 1 2178 10 view .LVU2045
 6365 0760 0DF11603 		add	r3, sp, #22
 6366              	.LVL699:
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6367              		.loc 1 2178 10 view .LVU2046
 6368 0764 4144     		add	r1, r1, r8
 6369 0766 1A46     		mov	r2, r3
2180:src/display.c **** 	      odig++;
 6370              		.loc 1 2180 15 view .LVU2047
 6371 0768 3020     		movs	r0, #48
 6372              	.LVL700:
 6373              	.L532:
2180:src/display.c **** 	      odig++;
 6374              		.loc 1 2180 8 is_stmt 1 discriminator 3 view .LVU2048
2180:src/display.c **** 	      odig++;
 6375              		.loc 1 2180 15 is_stmt 0 discriminator 3 view .LVU2049
 6376 076a 02F8010B 		strb	r0, [r2], #1
 6377              	.LVL701:
2181:src/display.c **** 	      dd--;
 6378              		.loc 1 2181 8 is_stmt 1 discriminator 3 view .LVU2050
2182:src/display.c **** 	    }
 6379              		.loc 1 2182 8 discriminator 3 view .LVU2051
2179:src/display.c **** 	      *obp++ = '0';
 6380              		.loc 1 2179 25 discriminator 3 view .LVU2052
2179:src/display.c **** 	      *obp++ = '0';
 6381              		.loc 1 2179 20 discriminator 3 view .LVU2053
2179:src/display.c **** 	      *obp++ = '0';
 6382              		.loc 1 2179 6 is_stmt 0 discriminator 3 view .LVU2054
 6383 076e 8A42     		cmp	r2, r1
 6384 0770 FBD1     		bne	.L532
 6385 0772 AA44     		add	r10, r10, r5
 6386 0774 EA43     		mvns	r2, r5
 6387              	.LVL702:
2179:src/display.c **** 	      *obp++ = '0';
 6388              		.loc 1 2179 6 discriminator 3 view .LVU2055
 6389 0776 0AF1010A 		add	r10, r10, #1
 6390 077a 1344     		add	r3, r3, r2
 6391 077c 6F42     		rsbs	r7, r5, #0
 6392              	.L531:
 6393              	.LVL703:
2184:src/display.c **** 	      *obp++ = *p++;
 6394              		.loc 1 2184 12 is_stmt 1 view .LVU2056
 6395 077e BAF1000F 		cmp	r10, #0
2184:src/display.c **** 	      *obp++ = *p++;
 6396              		.loc 1 2184 15 is_stmt 0 view .LVU2057
 6397 0782 0AF1FF32 		add	r2, r10, #-1
 6398              	.LVL704:
ARM GAS  /tmp/ccadPcKu.s 			page 206


2184:src/display.c **** 	      *obp++ = *p++;
 6399              		.loc 1 2184 12 view .LVU2058
 6400 0786 7FF708AF 		ble	.L528
 6401 078a 9A44     		add	r10, r10, r3
 6402 078c 0AF1FF30 		add	r0, r10, #-1
 6403 0790 013B     		subs	r3, r3, #1
 6404              	.LVL705:
 6405              	.L533:
2185:src/display.c **** 	      odig++;
 6406              		.loc 1 2185 8 is_stmt 1 view .LVU2059
2185:src/display.c **** 	      odig++;
 6407              		.loc 1 2185 15 is_stmt 0 view .LVU2060
 6408 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6409              	.LVL706:
2185:src/display.c **** 	      odig++;
 6410              		.loc 1 2185 15 view .LVU2061
 6411 0796 03F8011F 		strb	r1, [r3, #1]!
2186:src/display.c **** 	    }
 6412              		.loc 1 2186 8 is_stmt 1 view .LVU2062
2184:src/display.c **** 	      *obp++ = *p++;
 6413              		.loc 1 2184 12 view .LVU2063
2184:src/display.c **** 	      *obp++ = *p++;
 6414              		.loc 1 2184 12 is_stmt 0 view .LVU2064
 6415 079a 8342     		cmp	r3, r0
 6416 079c F9D1     		bne	.L533
 6417              	.LVL707:
2184:src/display.c **** 	      *obp++ = *p++;
 6418              		.loc 1 2184 12 view .LVU2065
 6419 079e 0137     		adds	r7, r7, #1
 6420 07a0 1744     		add	r7, r7, r2
 6421 07a2 5346     		mov	r3, r10
 6422 07a4 F9E6     		b	.L528
 6423              	.LVL708:
 6424              	.L538:
2202:src/display.c **** 	    odig++;
 6425              		.loc 1 2202 6 is_stmt 1 view .LVU2066
2202:src/display.c **** 	    odig++;
 6426              		.loc 1 2202 13 is_stmt 0 view .LVU2067
 6427 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6428 07aa 8DF81430 		strb	r3, [sp, #20]
2203:src/display.c **** 	    dd--;
 6429              		.loc 1 2203 6 is_stmt 1 view .LVU2068
 6430              	.LVL709:
2204:src/display.c **** 	    exp--;
 6431              		.loc 1 2204 6 view .LVU2069
2204:src/display.c **** 	    exp--;
 6432              		.loc 1 2204 8 is_stmt 0 view .LVU2070
 6433 07ae 0AF1FF3A 		add	r10, r10, #-1
 6434              	.LVL710:
2205:src/display.c **** 	  case -2:
 6435              		.loc 1 2205 6 is_stmt 1 view .LVU2071
2205:src/display.c **** 	  case -2:
 6436              		.loc 1 2205 9 is_stmt 0 view .LVU2072
 6437 07b2 013D     		subs	r5, r5, #1
 6438              	.LVL711:
2205:src/display.c **** 	  case -2:
 6439              		.loc 1 2205 9 view .LVU2073
ARM GAS  /tmp/ccadPcKu.s 			page 207


 6440 07b4 0327     		movs	r7, #3
2202:src/display.c **** 	    odig++;
 6441              		.loc 1 2202 17 view .LVU2074
 6442 07b6 0DF14909 		add	r9, sp, #73
 6443              	.LVL712:
2202:src/display.c **** 	    odig++;
 6444              		.loc 1 2202 10 view .LVU2075
 6445 07ba 0DF11501 		add	r1, sp, #21
 6446              	.LVL713:
2202:src/display.c **** 	    odig++;
 6447              		.loc 1 2202 10 view .LVU2076
 6448 07be A6E6     		b	.L540
 6449              	.LVL714:
 6450              	.L486:
2067:src/display.c **** 	    /* We might have push the fixed decimals off the
 6451              		.loc 1 2067 6 is_stmt 1 view .LVU2077
2071:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6452              		.loc 1 2071 6 view .LVU2078
2071:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6453              		.loc 1 2071 23 is_stmt 0 view .LVU2079
 6454 07c0 05EB0A03 		add	r3, r5, r10
2071:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6455              		.loc 1 2071 9 view .LVU2080
 6456 07c4 9E42     		cmp	r6, r3
2072:src/display.c **** 	  }
 6457              		.loc 1 2072 8 is_stmt 1 view .LVU2081
2072:src/display.c **** 	  }
 6458              		.loc 1 2072 30 is_stmt 0 view .LVU2082
 6459 07c6 DCBF     		itt	le
 6460 07c8 06F1FF3A 		addle	r10, r6, #-1
 6461              	.LVL715:
2072:src/display.c **** 	  }
 6462              		.loc 1 2072 11 view .LVU2083
 6463 07cc AAEB050A 		suble	r10, r10, r5
 6464              	.LVL716:
2072:src/display.c **** 	  }
 6465              		.loc 1 2072 11 view .LVU2084
 6466 07d0 2A46     		mov	r2, r5
 6467 07d2 BAE4     		b	.L484
 6468              	.LVL717:
 6469              	.L578:
2108:src/display.c **** 	    case -1:
 6470              		.loc 1 2108 24 view .LVU2085
 6471 07d4 0227     		movs	r7, #2
 6472 07d6 4046     		mov	r0, r8
 6473              	.LVL718:
 6474              	.L511:
2117:src/display.c **** 	      odig++;
 6475              		.loc 1 2117 8 is_stmt 1 view .LVU2086
2117:src/display.c **** 	      odig++;
 6476              		.loc 1 2117 15 is_stmt 0 view .LVU2087
 6477 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6478              	.LVL719:
2117:src/display.c **** 	      odig++;
 6479              		.loc 1 2117 15 view .LVU2088
 6480 07dc 00F8013B 		strb	r3, [r0], #1
 6481              	.LVL720:
ARM GAS  /tmp/ccadPcKu.s 			page 208


2118:src/display.c **** 	      dd--;
 6482              		.loc 1 2118 8 is_stmt 1 view .LVU2089
2119:src/display.c **** 	      exp--;
 6483              		.loc 1 2119 8 view .LVU2090
2120:src/display.c **** 	    case 0:
 6484              		.loc 1 2120 8 view .LVU2091
2120:src/display.c **** 	    case 0:
 6485              		.loc 1 2120 11 is_stmt 0 view .LVU2092
 6486 07e0 013D     		subs	r5, r5, #1
 6487              	.LVL721:
 6488              	.L508:
2122:src/display.c **** 	    };
 6489              		.loc 1 2122 8 is_stmt 1 view .LVU2093
2123:src/display.c **** 	    *obp++ = *p++;
 6490              		.loc 1 2123 7 view .LVU2094
2124:src/display.c **** 	    odig++;
 6491              		.loc 1 2124 6 view .LVU2095
2124:src/display.c **** 	    odig++;
 6492              		.loc 1 2124 17 is_stmt 0 view .LVU2096
 6493 07e2 4946     		mov	r1, r9
 6494              	.LVL722:
2124:src/display.c **** 	    odig++;
 6495              		.loc 1 2124 13 view .LVU2097
 6496 07e4 0346     		mov	r3, r0
 6497 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6498              	.LVL723:
2124:src/display.c **** 	    odig++;
 6499              		.loc 1 2124 13 view .LVU2098
 6500 07ea 03F802CB 		strb	ip, [r3], #2
2125:src/display.c **** 	    *obp++ = '.';
 6501              		.loc 1 2125 6 is_stmt 1 view .LVU2099
2126:src/display.c **** 	    for (i=1; i<count; i++) {
 6502              		.loc 1 2126 6 view .LVU2100
 6503              	.LVL724:
2127:src/display.c **** 	      *obp++ = *p++;
 6504              		.loc 1 2127 6 is_stmt 0 view .LVU2101
 6505 07ee 012A     		cmp	r2, #1
2126:src/display.c **** 	    for (i=1; i<count; i++) {
 6506              		.loc 1 2126 13 view .LVU2102
 6507 07f0 4FF02E0C 		mov	ip, #46
 6508 07f4 80F801C0 		strb	ip, [r0, #1]
2127:src/display.c **** 	      *obp++ = *p++;
 6509              		.loc 1 2127 6 is_stmt 1 view .LVU2103
 6510              	.LVL725:
2127:src/display.c **** 	      *obp++ = *p++;
 6511              		.loc 1 2127 16 view .LVU2104
2127:src/display.c **** 	      *obp++ = *p++;
 6512              		.loc 1 2127 6 is_stmt 0 view .LVU2105
 6513 07f8 53DD     		ble	.L579
2127:src/display.c **** 	      *obp++ = *p++;
 6514              		.loc 1 2127 6 view .LVU2106
 6515 07fa 0130     		adds	r0, r0, #1
 6516 07fc 9144     		add	r9, r9, r2
 6517              	.LVL726:
 6518              	.L513:
2128:src/display.c **** 	      odig++;
 6519              		.loc 1 2128 8 is_stmt 1 discriminator 3 view .LVU2107
ARM GAS  /tmp/ccadPcKu.s 			page 209


2128:src/display.c **** 	      odig++;
 6520              		.loc 1 2128 15 is_stmt 0 discriminator 3 view .LVU2108
 6521 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6522              	.LVL727:
2128:src/display.c **** 	      odig++;
 6523              		.loc 1 2128 15 discriminator 3 view .LVU2109
 6524 0802 00F801CF 		strb	ip, [r0, #1]!
2129:src/display.c **** 	    }
 6525              		.loc 1 2129 8 is_stmt 1 discriminator 3 view .LVU2110
2127:src/display.c **** 	      *obp++ = *p++;
 6526              		.loc 1 2127 25 discriminator 3 view .LVU2111
2127:src/display.c **** 	      *obp++ = *p++;
 6527              		.loc 1 2127 16 discriminator 3 view .LVU2112
2127:src/display.c **** 	      *obp++ = *p++;
 6528              		.loc 1 2127 6 is_stmt 0 discriminator 3 view .LVU2113
 6529 0806 4945     		cmp	r1, r9
 6530 0808 F9D1     		bne	.L513
 6531 080a 013A     		subs	r2, r2, #1
 6532              	.LVL728:
2127:src/display.c **** 	      *obp++ = *p++;
 6533              		.loc 1 2127 6 discriminator 3 view .LVU2114
 6534 080c 1344     		add	r3, r3, r2
 6535 080e 1744     		add	r7, r7, r2
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6536              		.loc 1 2131 15 view .LVU2115
 6537 0810 4FF0010B 		mov	fp, #1
 6538 0814 44E5     		b	.L512
 6539              	.LVL729:
 6540              	.L509:
2111:src/display.c **** 	      odig++;
 6541              		.loc 1 2111 8 is_stmt 1 view .LVU2116
2111:src/display.c **** 	      odig++;
 6542              		.loc 1 2111 15 is_stmt 0 view .LVU2117
 6543 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6544 081a 8DF81430 		strb	r3, [sp, #20]
2112:src/display.c **** 	      dd--;
 6545              		.loc 1 2112 8 is_stmt 1 view .LVU2118
 6546              	.LVL730:
2113:src/display.c **** 	      exp--;
 6547              		.loc 1 2113 8 view .LVU2119
2114:src/display.c **** 	    case -2:
 6548              		.loc 1 2114 8 view .LVU2120
2114:src/display.c **** 	    case -2:
 6549              		.loc 1 2114 11 is_stmt 0 view .LVU2121
 6550 081e 013D     		subs	r5, r5, #1
 6551              	.LVL731:
2114:src/display.c **** 	    case -2:
 6552              		.loc 1 2114 11 view .LVU2122
 6553 0820 0327     		movs	r7, #3
2111:src/display.c **** 	      odig++;
 6554              		.loc 1 2111 19 view .LVU2123
 6555 0822 0DF14909 		add	r9, sp, #73
 6556              	.LVL732:
2111:src/display.c **** 	      odig++;
 6557              		.loc 1 2111 12 view .LVU2124
 6558 0826 0DF11500 		add	r0, sp, #21
 6559              	.LVL733:
ARM GAS  /tmp/ccadPcKu.s 			page 210


2111:src/display.c **** 	      odig++;
 6560              		.loc 1 2111 12 view .LVU2125
 6561 082a D5E7     		b	.L511
 6562              	.LVL734:
 6563              	.L547:
2253:src/display.c **** 	  }
 6564              		.loc 1 2253 8 is_stmt 1 view .LVU2126
 6565 082c 2D21     		movs	r1, #45
 6566 082e A6F10900 		sub	r0, r6, #9
 6567 0832 FFF7FEFF 		bl	set_dig
 6568              	.LVL735:
 6569 0836 019B     		ldr	r3, [sp, #4]
 6570 0838 43E5     		b	.L543
 6571              	.LVL736:
 6572              	.L678:
 6573              	.LBB442:
 6574              	.LBB440:
 6575              	.LBB434:
1820:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6576              		.loc 1 1820 4 view .LVU2127
1823:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6577              		.loc 1 1823 4 view .LVU2128
1823:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6578              		.loc 1 1823 14 is_stmt 0 view .LVU2129
 6579 083a 08F10306 		add	r6, r8, #3
 6580              	.LVL737:
1824:src/display.c **** 	  if (grouping) {
 6581              		.loc 1 1824 4 is_stmt 1 view .LVU2130
 6582 083e 4749     		ldr	r1, .L683+12
 6583 0840 0D22     		movs	r2, #13
 6584 0842 3046     		mov	r0, r6
 6585 0844 FFF7FEFF 		bl	xcopy
 6586              	.LVL738:
1825:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6587              		.loc 1 1825 4 view .LVU2131
1826:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6588              		.loc 1 1826 6 view .LVU2132
 6589 0848 1322     		movs	r2, #19
 6590 084a 08EB0201 		add	r1, r8, r2
 6591 084e 08F11400 		add	r0, r8, #20
 6592 0852 FFF7FEFF 		bl	xcopy
 6593              	.LVL739:
1827:src/display.c **** 	    x += 3 + 13 + 7;
 6594              		.loc 1 1827 6 view .LVU2133
1828:src/display.c **** 	  }
 6595              		.loc 1 1828 8 is_stmt 0 view .LVU2134
 6596 0856 08F11705 		add	r5, r8, #23
 6597              	.LVL740:
1827:src/display.c **** 	    x += 3 + 13 + 7;
 6598              		.loc 1 1827 24 view .LVU2135
 6599 085a 88F81370 		strb	r7, [r8, #19]
1828:src/display.c **** 	  }
 6600              		.loc 1 1828 6 is_stmt 1 view .LVU2136
 6601              	.LVL741:
1841:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6602              		.loc 1 1841 4 view .LVU2137
1842:src/display.c **** 	}
ARM GAS  /tmp/ccadPcKu.s 			page 211


 6603              		.loc 1 1842 4 view .LVU2138
1842:src/display.c **** 	}
 6604              		.loc 1 1842 6 is_stmt 0 view .LVU2139
 6605 085e 1B24     		movs	r4, #27
 6606              	.LVL742:
 6607              	.L463:
1842:src/display.c **** 	}
 6608              		.loc 1 1842 6 view .LVU2140
 6609              	.LBE434:
1876:src/display.c **** 	  }
 6610              		.loc 1 1876 6 is_stmt 1 view .LVU2141
 6611              	.LBB435:
 6612              	.LBI435:
 364:src/display.c ****   if (sep == SEP_NONE)
 6613              		.loc 1 364 14 view .LVU2142
 6614              	.LBB436:
 365:src/display.c ****     return res;
 6615              		.loc 1 365 3 view .LVU2143
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6616              		.loc 1 367 3 view .LVU2144
 6617 0860 2046     		mov	r0, r4
 6618 0862 5146     		mov	r1, r10
 6619              	.LBE436:
 6620              	.LBE435:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6621              		.loc 1 1875 38 is_stmt 0 view .LVU2145
 6622 0864 1B34     		adds	r4, r4, #27
 6623              	.LVL743:
 6624              	.LBB438:
 6625              	.LBB437:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6626              		.loc 1 1875 38 view .LVU2146
 6627 0866 FFF7FEFF 		bl	set_separator.part.0
 6628              	.LVL744:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6629              		.loc 1 1875 38 view .LVU2147
 6630              	.LBE437:
 6631              	.LBE438:
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6632              		.loc 1 1875 36 is_stmt 1 view .LVU2148
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1875 11 view .LVU2149
1875:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1875 4 is_stmt 0 view .LVU2150
 6635 086a 512C     		cmp	r4, #81
 6636 086c F8DD     		ble	.L463
 6637 086e 6C1E     		subs	r4, r5, #1
 6638              	.LVL745:
 6639              	.L465:
1881:src/display.c **** 
 6640              		.loc 1 1881 4 is_stmt 1 view .LVU2151
 6641 0870 5846     		mov	r0, fp
 6642 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1880:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1880 33 is_stmt 0 view .LVU2152
 6644 0876 0BF1090B 		add	fp, fp, #9
 6645              	.LVL746:
ARM GAS  /tmp/ccadPcKu.s 			page 212


1881:src/display.c **** 
 6646              		.loc 1 1881 4 view .LVU2153
 6647 087a FFF7FEFF 		bl	set_dig
 6648              	.LVL747:
1880:src/display.c **** 	  set_dig(j, x[i]);
 6649              		.loc 1 1880 26 is_stmt 1 view .LVU2154
1880:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1880 18 view .LVU2155
1880:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1880 2 is_stmt 0 view .LVU2156
 6652 087e BBF16C0F 		cmp	fp, #108
 6653 0882 F5D1     		bne	.L465
1883:src/display.c **** 	set_status(upper_str - negative);
 6654              		.loc 1 1883 2 is_stmt 1 view .LVU2157
1883:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 1883 5 is_stmt 0 view .LVU2158
 6656 0884 0023     		movs	r3, #0
1884:src/display.c ****       }
 6657              		.loc 1 1884 2 view .LVU2159
 6658 0886 3046     		mov	r0, r6
1883:src/display.c **** 	set_status(upper_str - negative);
 6659              		.loc 1 1883 5 view .LVU2160
 6660 0888 2B70     		strb	r3, [r5]
1884:src/display.c ****       }
 6661              		.loc 1 1884 2 is_stmt 1 view .LVU2161
 6662 088a FFF7FEFF 		bl	set_status
 6663              	.LVL748:
1885:src/display.c **** 
 6664              		.loc 1 1885 7 is_stmt 0 view .LVU2162
 6665 088e 43E5     		b	.L444
 6666              	.LVL749:
 6667              	.L675:
1885:src/display.c **** 
 6668              		.loc 1 1885 7 view .LVU2163
 6669              	.LBE440:
 6670              	.LBE442:
1941:src/display.c **** 	      return;
 6671              		.loc 1 1941 8 is_stmt 1 view .LVU2164
 6672 0890 3046     		mov	r0, r6
 6673 0892 FFF7FEFF 		bl	set_x_hms
 6674              	.LVL750:
1942:src/display.c **** 	    }
 6675              		.loc 1 1942 8 view .LVU2165
 6676 0896 3FE5     		b	.L444
 6677              	.LVL751:
 6678              	.L576:
2103:src/display.c **** 	  if (count != *display_digits)
 6679              		.loc 1 2103 15 is_stmt 0 view .LVU2166
 6680 0898 3246     		mov	r2, r6
 6681 089a A3E4     		b	.L504
 6682              	.LVL752:
 6683              	.L577:
2108:src/display.c **** 	    case -1:
 6684              		.loc 1 2108 24 view .LVU2167
 6685 089c 0127     		movs	r7, #1
 6686 089e 4046     		mov	r0, r8
 6687 08a0 9FE7     		b	.L508
ARM GAS  /tmp/ccadPcKu.s 			page 213


 6688              	.LVL753:
 6689              	.L579:
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6690              		.loc 1 2131 15 view .LVU2168
 6691 08a2 4FF0010B 		mov	fp, #1
 6692 08a6 FBE4     		b	.L512
 6693              	.LVL754:
 6694              	.L551:
 6695              	.LBB443:
 6696              	.LBB419:
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6697              		.loc 1 2131 15 view .LVU2169
 6698 08a8 3046     		mov	r0, r6
 6699 08aa 0193     		str	r3, [sp, #4]
 6700 08ac FFF7FEFF 		bl	set_separator.part.0
 6701              	.LVL755:
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6702              		.loc 1 2131 15 view .LVU2170
 6703 08b0 019B     		ldr	r3, [sp, #4]
 6704 08b2 0446     		mov	r4, r0
 6705              	.LVL756:
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6706              		.loc 1 2131 15 view .LVU2171
 6707 08b4 F9E5     		b	.L549
 6708              	.LVL757:
 6709              	.L489:
2131:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6710              		.loc 1 2131 15 view .LVU2172
 6711              	.LBE419:
 6712              	.LBE443:
2081:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6713              		.loc 1 2081 4 is_stmt 1 view .LVU2173
2081:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6714              		.loc 1 2081 7 is_stmt 0 view .LVU2174
 6715 08b6 4B45     		cmp	r3, r9
 6716 08b8 7FF460AC 		bne	.L560
 6717 08bc 63E5     		b	.L561
 6718              	.LVL758:
 6719              	.L460:
 6720              	.LBB444:
 6721              	.LBB441:
1866:src/display.c **** 	    x[10] = '\0';
 6722              		.loc 1 1866 6 is_stmt 1 view .LVU2175
1867:src/display.c **** 	  }
 6723              		.loc 1 1867 6 view .LVU2176
1866:src/display.c **** 	    x[10] = '\0';
 6724              		.loc 1 1866 11 is_stmt 0 view .LVU2177
 6725 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6726 08c2 21E7     		b	.L462
 6727              	.LVL759:
 6728              	.L677:
 6729              	.LBB439:
1791:src/display.c **** 
 6730              		.loc 1 1791 4 is_stmt 1 view .LVU2178
1793:src/display.c **** 	  xcopy(x, small_minus, 4);
 6731              		.loc 1 1793 4 view .LVU2179
 6732 08c4 2222     		movs	r2, #34
ARM GAS  /tmp/ccadPcKu.s 			page 214


 6733 08c6 0DF11501 		add	r1, sp, #21
 6734 08ca 06A8     		add	r0, sp, #24
 6735              	.LVL760:
1793:src/display.c **** 	  xcopy(x, small_minus, 4);
 6736              		.loc 1 1793 4 is_stmt 0 view .LVU2180
 6737 08cc FFF7FEFF 		bl	xcopy
 6738              	.LVL761:
1794:src/display.c **** 	  x += 4;
 6739              		.loc 1 1794 4 is_stmt 1 view .LVU2181
 6740 08d0 4046     		mov	r0, r8
 6741 08d2 2349     		ldr	r1, .L683+16
 6742 08d4 0422     		movs	r2, #4
 6743 08d6 FFF7FEFF 		bl	xcopy
 6744              	.LVL762:
1795:src/display.c **** 	  negative = 4;
 6745              		.loc 1 1795 4 view .LVU2182
1796:src/display.c **** #else
 6746              		.loc 1 1796 4 view .LVU2183
1795:src/display.c **** 	  negative = 4;
 6747              		.loc 1 1795 6 is_stmt 0 view .LVU2184
 6748 08da 0DF11808 		add	r8, sp, #24
 6749              	.LVL763:
1796:src/display.c **** #else
 6750              		.loc 1 1796 13 view .LVU2185
 6751 08de 0426     		movs	r6, #4
 6752              	.LVL764:
1796:src/display.c **** #else
 6753              		.loc 1 1796 13 view .LVU2186
 6754              	.LBE439:
 6755 08e0 C7E6     		b	.L456
 6756              	.LVL765:
 6757              	.L514:
1796:src/display.c **** #else
 6758              		.loc 1 1796 13 view .LVU2187
 6759              	.LBE441:
 6760              	.LBE444:
2147:src/display.c **** 	    odig++;
 6761              		.loc 1 2147 6 is_stmt 1 view .LVU2188
2148:src/display.c **** 	    *obp++ = '.';
 6762              		.loc 1 2148 6 view .LVU2189
2149:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6763              		.loc 1 2149 6 view .LVU2190
2147:src/display.c **** 	    odig++;
 6764              		.loc 1 2147 13 is_stmt 0 view .LVU2191
 6765 08e2 42F63063 		movw	r3, #11824
2150:src/display.c **** 	      *obp++ = '0';
 6766              		.loc 1 2150 6 view .LVU2192
 6767 08e6 691C     		adds	r1, r5, #1
2147:src/display.c **** 	    odig++;
 6768              		.loc 1 2147 13 view .LVU2193
 6769 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2150:src/display.c **** 	      *obp++ = '0';
 6770              		.loc 1 2150 6 is_stmt 1 view .LVU2194
 6771              	.LVL766:
2150:src/display.c **** 	      *obp++ = '0';
 6772              		.loc 1 2150 20 view .LVU2195
2150:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccadPcKu.s 			page 215


 6773              		.loc 1 2150 6 is_stmt 0 view .LVU2196
 6774 08ec 2CD0     		beq	.L580
 6775 08ee C5F10100 		rsb	r0, r5, #1
2149:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6776              		.loc 1 2149 10 view .LVU2197
 6777 08f2 0DF11603 		add	r3, sp, #22
 6778              	.LVL767:
2149:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6779              		.loc 1 2149 10 view .LVU2198
 6780 08f6 4044     		add	r0, r0, r8
 6781 08f8 1946     		mov	r1, r3
 6782              	.LVL768:
2151:src/display.c **** 	      odig++;
 6783              		.loc 1 2151 15 view .LVU2199
 6784 08fa 3027     		movs	r7, #48
 6785              	.LVL769:
 6786              	.L521:
2151:src/display.c **** 	      odig++;
 6787              		.loc 1 2151 8 is_stmt 1 discriminator 3 view .LVU2200
2151:src/display.c **** 	      odig++;
 6788              		.loc 1 2151 15 is_stmt 0 discriminator 3 view .LVU2201
 6789 08fc 01F8017B 		strb	r7, [r1], #1
 6790              	.LVL770:
2152:src/display.c **** 	    }
 6791              		.loc 1 2152 8 is_stmt 1 discriminator 3 view .LVU2202
2150:src/display.c **** 	      *obp++ = '0';
 6792              		.loc 1 2150 25 discriminator 3 view .LVU2203
2150:src/display.c **** 	      *obp++ = '0';
 6793              		.loc 1 2150 20 discriminator 3 view .LVU2204
2150:src/display.c **** 	      *obp++ = '0';
 6794              		.loc 1 2150 6 is_stmt 0 discriminator 3 view .LVU2205
 6795 0900 8142     		cmp	r1, r0
 6796 0902 FBD1     		bne	.L521
 6797 0904 E943     		mvns	r1, r5
 6798              	.LVL771:
2150:src/display.c **** 	      *obp++ = '0';
 6799              		.loc 1 2150 6 discriminator 3 view .LVU2206
 6800 0906 0B44     		add	r3, r3, r1
 6801 0908 6F42     		rsbs	r7, r5, #0
 6802              	.L520:
 6803              	.LVL772:
2154:src/display.c **** 	      *obp++ = *p++;
 6804              		.loc 1 2154 16 is_stmt 1 view .LVU2207
2154:src/display.c **** 	      *obp++ = *p++;
 6805              		.loc 1 2154 6 is_stmt 0 view .LVU2208
 6806 090a 002A     		cmp	r2, #0
 6807 090c 7FF7C8AC 		ble	.L512
 6808 0910 02F1FF3C 		add	ip, r2, #-1
 6809 0914 9C44     		add	ip, ip, r3
 6810 0916 591E     		subs	r1, r3, #1
 6811              	.LVL773:
 6812              	.L522:
2155:src/display.c **** 	      odig++;
 6813              		.loc 1 2155 8 is_stmt 1 discriminator 3 view .LVU2209
2155:src/display.c **** 	      odig++;
 6814              		.loc 1 2155 15 is_stmt 0 discriminator 3 view .LVU2210
 6815 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccadPcKu.s 			page 216


 6816              	.LVL774:
2155:src/display.c **** 	      odig++;
 6817              		.loc 1 2155 15 discriminator 3 view .LVU2211
 6818 091c 01F8010F 		strb	r0, [r1, #1]!
2156:src/display.c **** 	    }
 6819              		.loc 1 2156 8 is_stmt 1 discriminator 3 view .LVU2212
2154:src/display.c **** 	      *obp++ = *p++;
 6820              		.loc 1 2154 25 discriminator 3 view .LVU2213
 6821              	.LVL775:
2154:src/display.c **** 	      *obp++ = *p++;
 6822              		.loc 1 2154 16 discriminator 3 view .LVU2214
2154:src/display.c **** 	      *obp++ = *p++;
 6823              		.loc 1 2154 6 is_stmt 0 discriminator 3 view .LVU2215
 6824 0920 8C45     		cmp	ip, r1
 6825 0922 F9D1     		bne	.L522
 6826              	.LVL776:
2154:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2154 6 discriminator 3 view .LVU2216
 6828 0924 1344     		add	r3, r3, r2
 6829              	.LVL777:
2154:src/display.c **** 	      *obp++ = *p++;
 6830              		.loc 1 2154 6 discriminator 3 view .LVU2217
 6831 0926 1744     		add	r7, r7, r2
 6832 0928 BAE4     		b	.L512
 6833              	.LVL778:
 6834              	.L676:
2097:src/display.c **** 
 6835              		.loc 1 2097 2 is_stmt 1 view .LVU2218
2097:src/display.c **** 
 6836              		.loc 1 2097 40 is_stmt 0 view .LVU2219
 6837 092a 0AF10102 		add	r2, r10, #1
2097:src/display.c **** 
 6838              		.loc 1 2097 9 view .LVU2220
 6839 092e 09EB0203 		add	r3, r9, r2
 6840              	.LVL779:
2097:src/display.c **** 
 6841              		.loc 1 2097 45 is_stmt 1 view .LVU2221
2097:src/display.c **** 
 6842              		.loc 1 2097 2 is_stmt 0 view .LVU2222
 6843 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6844 0936 002A     		cmp	r2, #0
 6845 0938 3FF496AC 		beq	.L658
2086:src/display.c **** 	      extra_digits = 0;
 6846              		.loc 1 2086 37 view .LVU2223
 6847 093c 0227     		movs	r7, #2
 6848 093e 2FE4     		b	.L559
 6849              	.LVL780:
 6850              	.L581:
2177:src/display.c **** 	    *obp++ = '.';
 6851              		.loc 1 2177 10 view .LVU2224
 6852 0940 0127     		movs	r7, #1
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6853              		.loc 1 2178 10 view .LVU2225
 6854 0942 0DF11603 		add	r3, sp, #22
 6855              	.LVL781:
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6856              		.loc 1 2178 10 view .LVU2226
ARM GAS  /tmp/ccadPcKu.s 			page 217


 6857 0946 1AE7     		b	.L531
 6858              	.LVL782:
 6859              	.L580:
2148:src/display.c **** 	    *obp++ = '.';
 6860              		.loc 1 2148 10 view .LVU2227
 6861 0948 0127     		movs	r7, #1
2149:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6862              		.loc 1 2149 10 view .LVU2228
 6863 094a 0DF11603 		add	r3, sp, #22
 6864              	.LVL783:
2149:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6865              		.loc 1 2149 10 view .LVU2229
 6866 094e DCE7     		b	.L520
 6867              	.L684:
 6868              		.align	2
 6869              	.L683:
 6870 0950 00000000 		.word	.LANCHOR1
 6871 0954 18FCFFFF 		.word	-1000
 6872 0958 D34D6210 		.word	274877907
 6873 095c 00000000 		.word	.LANCHOR14
 6874 0960 00000000 		.word	.LANCHOR13
 6875              		.cfi_endproc
 6876              	.LFE27:
 6878              		.section	.text.set_x,"ax",%progbits
 6879              		.align	1
 6880              		.p2align 2,,3
 6881              		.syntax unified
 6882              		.thumb
 6883              		.thumb_func
 6884              		.fpu fpv4-sp-d16
 6886              	set_x:
 6887              	.LVL784:
 6888              	.LFB26:
1892:src/display.c **** 	decNumber z;
 6889              		.loc 1 1892 66 is_stmt 1 view -0
 6890              		.cfi_startproc
 6891              		@ args = 0, pretend = 0, frame = 40
 6892              		@ frame_needed = 0, uses_anonymous_args = 0
1893:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6893              		.loc 1 1893 2 view .LVU2231
1894:src/display.c **** 
 6894              		.loc 1 1894 2 view .LVU2232
1892:src/display.c **** 	decNumber z;
 6895              		.loc 1 1892 66 is_stmt 0 view .LVU2233
 6896 0000 30B5     		push	{r4, r5, lr}
 6897              		.cfi_def_cfa_offset 12
 6898              		.cfi_offset 4, -12
 6899              		.cfi_offset 5, -8
 6900              		.cfi_offset 14, -4
 6901 0002 8BB0     		sub	sp, sp, #44
 6902              		.cfi_def_cfa_offset 56
1894:src/display.c **** 
 6903              		.loc 1 1894 6 view .LVU2234
 6904 0004 0C23     		movs	r3, #12
1897:src/display.c **** 	else
 6905              		.loc 1 1897 4 view .LVU2235
 6906 0006 01AD     		add	r5, sp, #4
ARM GAS  /tmp/ccadPcKu.s 			page 218


1892:src/display.c **** 	decNumber z;
 6907              		.loc 1 1892 66 view .LVU2236
 6908 0008 0C46     		mov	r4, r1
1894:src/display.c **** 
 6909              		.loc 1 1894 6 view .LVU2237
 6910 000a 0093     		str	r3, [sp]
1896:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6911              		.loc 1 1896 2 is_stmt 1 view .LVU2238
1897:src/display.c **** 	else
 6912              		.loc 1 1897 4 is_stmt 0 view .LVU2239
 6913 000c 2946     		mov	r1, r5
 6914              	.LVL785:
1896:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6915              		.loc 1 1896 5 view .LVU2240
 6916 000e 42B1     		cbz	r2, .L686
1897:src/display.c **** 	else
 6917              		.loc 1 1897 4 is_stmt 1 view .LVU2241
 6918 0010 FFF7FEFF 		bl	decimal128ToNumber
 6919              	.LVL786:
1900:src/display.c ****       }
 6920              		.loc 1 1900 2 view .LVU2242
 6921 0014 2146     		mov	r1, r4
 6922 0016 2846     		mov	r0, r5
 6923 0018 6A46     		mov	r2, sp
 6924 001a FFF7FEFF 		bl	set_x_dn
 6925              	.LVL787:
1901:src/display.c **** 
 6926              		.loc 1 1901 7 is_stmt 0 view .LVU2243
 6927 001e 0BB0     		add	sp, sp, #44
 6928              		.cfi_remember_state
 6929              		.cfi_def_cfa_offset 12
 6930              		@ sp needed
 6931 0020 30BD     		pop	{r4, r5, pc}
 6932              	.LVL788:
 6933              	.L686:
 6934              		.cfi_restore_state
1899:src/display.c **** 	set_x_dn(&z, res, &digits);
 6935              		.loc 1 1899 4 is_stmt 1 view .LVU2244
 6936 0022 FFF7FEFF 		bl	decimal64ToNumber
 6937              	.LVL789:
1900:src/display.c ****       }
 6938              		.loc 1 1900 2 view .LVU2245
 6939 0026 2146     		mov	r1, r4
 6940 0028 2846     		mov	r0, r5
 6941 002a 6A46     		mov	r2, sp
 6942 002c FFF7FEFF 		bl	set_x_dn
 6943              	.LVL790:
1901:src/display.c **** 
 6944              		.loc 1 1901 7 is_stmt 0 view .LVU2246
 6945 0030 0BB0     		add	sp, sp, #44
 6946              		.cfi_def_cfa_offset 12
 6947              		@ sp needed
 6948 0032 30BD     		pop	{r4, r5, pc}
1901:src/display.c **** 
 6949              		.loc 1 1901 7 view .LVU2247
 6950              		.cfi_endproc
 6951              	.LFE26:
ARM GAS  /tmp/ccadPcKu.s 			page 219


 6953              		.section	.text.format_reg,"ax",%progbits
 6954              		.align	1
 6955              		.p2align 2,,3
 6956              		.global	format_reg
 6957              		.syntax unified
 6958              		.thumb
 6959              		.thumb_func
 6960              		.fpu fpv4-sp-d16
 6962              	format_reg:
 6963              	.LVL791:
 6964              	.LFB28:
2308:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6965              		.loc 1 2308 45 is_stmt 1 view -0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 40
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
2309:src/display.c **** 
 6969              		.loc 1 2309 2 view .LVU2249
2308:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6970              		.loc 1 2308 45 is_stmt 0 view .LVU2250
 6971 0000 30B5     		push	{r4, r5, lr}
 6972              		.cfi_def_cfa_offset 12
 6973              		.cfi_offset 4, -12
 6974              		.cfi_offset 5, -8
 6975              		.cfi_offset 14, -4
 6976 0002 8BB0     		sub	sp, sp, #44
 6977              		.cfi_def_cfa_offset 56
2308:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6978              		.loc 1 2308 45 view .LVU2251
 6979 0004 0C46     		mov	r4, r1
 6980 0006 0546     		mov	r5, r0
2309:src/display.c **** 
 6981              		.loc 1 2309 28 view .LVU2252
 6982 0008 FFF7FEFF 		bl	get_reg_n
 6983              	.LVL792:
2311:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6984              		.loc 1 2311 6 view .LVU2253
 6985 000c 154B     		ldr	r3, .L696
 6986 000e 1B68     		ldr	r3, [r3]
 6987 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6988              	.LVL793:
2311:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6989              		.loc 1 2311 2 is_stmt 1 view .LVU2254
2311:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6990              		.loc 1 2311 5 is_stmt 0 view .LVU2255
 6991 0014 D207     		lsls	r2, r2, #31
 6992 0016 1DD4     		bmi	.L694
2314:src/display.c **** 	  decNumber x;
 6993              		.loc 1 2314 7 is_stmt 1 view .LVU2256
2314:src/display.c **** 	  decNumber x;
 6994              		.loc 1 2314 10 is_stmt 0 view .LVU2257
 6995 0018 44B1     		cbz	r4, .L695
 6996              	.L692:
2325:src/display.c ****       }
 6997              		.loc 1 2325 4 is_stmt 1 view .LVU2258
2325:src/display.c ****       }
 6998              		.loc 1 2325 24 is_stmt 0 view .LVU2259
ARM GAS  /tmp/ccadPcKu.s 			page 220


 6999 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2325:src/display.c ****       }
 7000              		.loc 1 2325 4 view .LVU2260
 7001 001e 2146     		mov	r1, r4
 7002 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7003 0024 FFF7FEFF 		bl	set_x
 7004              	.LVL794:
2326:src/display.c **** 
 7005              		.loc 1 2326 7 view .LVU2261
 7006 0028 0BB0     		add	sp, sp, #44
 7007              		.cfi_remember_state
 7008              		.cfi_def_cfa_offset 12
 7009              		@ sp needed
 7010 002a 30BD     		pop	{r4, r5, pc}
 7011              	.LVL795:
 7012              	.L695:
 7013              		.cfi_restore_state
2314:src/display.c **** 	  decNumber x;
 7014              		.loc 1 2314 32 discriminator 1 view .LVU2262
 7015 002c 0E4A     		ldr	r2, .L696+4
2314:src/display.c **** 	  decNumber x;
 7016              		.loc 1 2314 23 discriminator 1 view .LVU2263
 7017 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7018 0030 012A     		cmp	r2, #1
 7019 0032 F2D9     		bls	.L692
 7020              	.LVL796:
 7021              	.LBB448:
 7022              	.LBI448:
2308:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7023              		.loc 1 2308 12 is_stmt 1 view .LVU2264
 7024              	.LBB449:
 7025              	.LBB450:
2315:src/display.c **** 	  int s;
 7026              		.loc 1 2315 4 view .LVU2265
2316:src/display.c **** 	  unsigned long long int v;
 7027              		.loc 1 2316 4 view .LVU2266
2317:src/display.c **** 
 7028              		.loc 1 2317 4 view .LVU2267
2319:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7029              		.loc 1 2319 4 view .LVU2268
 7030 0034 2946     		mov	r1, r5
 7031 0036 01A8     		add	r0, sp, #4
 7032              	.LVL797:
2319:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7033              		.loc 1 2319 4 is_stmt 0 view .LVU2269
 7034 0038 FFF7FEFF 		bl	getRegister
 7035              	.LVL798:
2320:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7036              		.loc 1 2320 4 is_stmt 1 view .LVU2270
2320:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7037              		.loc 1 2320 8 is_stmt 0 view .LVU2271
 7038 003c 01A8     		add	r0, sp, #4
 7039 003e 6946     		mov	r1, sp
 7040 0040 FFF7FEFF 		bl	dn_to_ull
 7041              	.LVL799:
2321:src/display.c **** 	}
 7042              		.loc 1 2321 4 is_stmt 1 view .LVU2272
ARM GAS  /tmp/ccadPcKu.s 			page 221


 7043 0044 009A     		ldr	r2, [sp]
 7044 0046 FFF7FEFF 		bl	build_value
 7045              	.LVL800:
2321:src/display.c **** 	}
 7046              		.loc 1 2321 4 is_stmt 0 view .LVU2273
 7047 004a 2246     		mov	r2, r4
 7048 004c FFF7FEFF 		bl	set_int_x
 7049              	.LVL801:
 7050              	.LBE450:
 7051              	.LBE449:
 7052              	.LBE448:
2326:src/display.c **** 
 7053              		.loc 1 2326 7 view .LVU2274
 7054 0050 0BB0     		add	sp, sp, #44
 7055              		.cfi_remember_state
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0052 30BD     		pop	{r4, r5, pc}
 7059              	.LVL802:
 7060              	.L694:
 7061              		.cfi_restore_state
2312:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7062              		.loc 1 2312 4 is_stmt 1 view .LVU2275
 7063 0054 2846     		mov	r0, r5
 7064              	.LVL803:
2312:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7065              		.loc 1 2312 4 is_stmt 0 view .LVU2276
 7066 0056 FFF7FEFF 		bl	get_reg_n_int
 7067              	.LVL804:
 7068 005a 2246     		mov	r2, r4
 7069 005c FFF7FEFF 		bl	set_int_x
 7070              	.LVL805:
2326:src/display.c **** 
 7071              		.loc 1 2326 7 view .LVU2277
 7072 0060 0BB0     		add	sp, sp, #44
 7073              		.cfi_def_cfa_offset 12
 7074              		@ sp needed
 7075 0062 30BD     		pop	{r4, r5, pc}
 7076              	.LVL806:
 7077              	.L697:
2326:src/display.c **** 
 7078              		.loc 1 2326 7 view .LVU2278
 7079              		.align	2
 7080              	.L696:
 7081 0064 00000000 		.word	main_ram
 7082 0068 00000000 		.word	StateWhileOn
 7083              		.cfi_endproc
 7084              	.LFE28:
 7086              		.section	.text.set_status_right,"ax",%progbits
 7087              		.align	1
 7088              		.p2align 2,,3
 7089              		.syntax unified
 7090              		.thumb
 7091              		.thumb_func
 7092              		.fpu fpv4-sp-d16
 7094              	set_status_right:
 7095              	.LVL807:
ARM GAS  /tmp/ccadPcKu.s 			page 222


 7096              	.LFB46:
3424:src/display.c ****       static void set_status_top(const char *str) {
3425:src/display.c **** 	if (no_status_top) return;
3426:src/display.c **** 	if (State2.runmode) {
3427:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3428:src/display.c **** 	}
3429:src/display.c **** 	else {
3430:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3431:src/display.c **** 	}
3432:src/display.c ****       }
3433:src/display.c **** 
3434:src/display.c **** 
3435:src/display.c ****       /*
3436:src/display.c ****        *  Display messages (global function)
3437:src/display.c ****        */
3438:src/display.c ****       extern void message(const char *str1, const char *str2)
3439:src/display.c ****       {
3440:src/display.c **** 	State2.disp_freeze = 0;
3441:src/display.c **** 	State2.disp_small = 0;
3442:src/display.c **** 	WasDataEntry = 0;
3443:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3444:src/display.c **** 	  // Complete redraw necessary
3445:src/display.c **** 	  DispMsg = str1;
3446:src/display.c **** 	  display();
3447:src/display.c **** 	}
3448:src/display.c **** 	else {
3449:src/display.c **** 	  if ( str2 != NULL ) {
3450:src/display.c **** 	    reset_disp();
3451:src/display.c **** 	    ShowRPN = 0;
3452:src/display.c **** 	    set_annunciators();
3453:src/display.c **** 	    set_digits_string( str2, 0 );
3454:src/display.c **** 	  }
3455:src/display.c **** 	  set_status( str1 );
3456:src/display.c **** 	  finish_display();// message
3457:src/display.c **** 	}
3458:src/display.c ****       }
3459:src/display.c **** 
3460:src/display.c **** #ifdef INCLUDE_STOPWATCH
3461:src/display.c **** 
3462:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3463:src/display.c **** 	int j = SEGS_EXP_BASE;
3464:src/display.c **** 	for (; *exponent!=0; exponent++) {
3465:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3466:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3467:src/display.c **** 	}
3468:src/display.c ****       }
3469:src/display.c **** 
3470:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3471:src/display.c ****       {
3472:src/display.c **** #ifndef REALBUILD
3473:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3474:src/display.c **** #endif
3475:src/display.c **** 	reset_disp();
3476:src/display.c **** 	set_dot(DEG);
3477:src/display.c **** 	set_digits_string( str2, 0 );
3478:src/display.c **** 	State2.disp_small = force_small;
3479:src/display.c **** 	if( exponent!=NULL ) {
ARM GAS  /tmp/ccadPcKu.s 			page 223


3480:src/display.c **** 	  stopwatch_exponent(exponent);
3481:src/display.c **** 	}
3482:src/display.c **** 	set_status( str1 );
3483:src/display.c **** 	finish_display();
3484:src/display.c ****       }
3485:src/display.c **** 
3486:src/display.c **** 
3487:src/display.c **** #endif // INCLUDE_STOPWATCH
3488:src/display.c **** 
3489:src/display.c ****       /* Display the right hand characters from the given string.
3490:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3491:src/display.c ****        * and reduce font size if required.
3492:src/display.c ****        */
3493:src/display.c ****       static void set_status_right(const char *str) {
 7097              		.loc 1 3493 53 is_stmt 1 view -0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 0
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
3494:src/display.c **** 	unsigned int x = 0;
 7101              		.loc 1 3494 2 view .LVU2280
3495:src/display.c **** 	const char *p;
 7102              		.loc 1 3495 2 view .LVU2281
3496:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7103              		.loc 1 3496 2 view .LVU2282
3493:src/display.c **** 	unsigned int x = 0;
 7104              		.loc 1 3493 53 is_stmt 0 view .LVU2283
 7105 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7106              		.cfi_def_cfa_offset 28
 7107              		.cfi_offset 4, -28
 7108              		.cfi_offset 5, -24
 7109              		.cfi_offset 6, -20
 7110              		.cfi_offset 7, -16
 7111              		.cfi_offset 8, -12
 7112              		.cfi_offset 9, -8
 7113              		.cfi_offset 14, -4
 7114              		.loc 1 3496 23 view .LVU2284
 7115 0004 194B     		ldr	r3, .L713
 7116              		.loc 1 3496 41 view .LVU2285
 7117 0006 93F91630 		ldrsb	r3, [r3, #22]
 7118 000a 002B     		cmp	r3, #0
3493:src/display.c **** 	unsigned int x = 0;
 7119              		.loc 1 3493 53 view .LVU2286
 7120 000c 83B0     		sub	sp, sp, #12
 7121              		.cfi_def_cfa_offset 40
3493:src/display.c **** 	unsigned int x = 0;
 7122              		.loc 1 3493 53 view .LVU2287
 7123 000e 0646     		mov	r6, r0
 7124              		.loc 1 3496 41 view .LVU2288
 7125 0010 23DA     		bge	.L712
 7126              	.LVL808:
 7127              	.L699:
 7128              		.loc 1 3496 12 view .LVU2289
 7129 0012 4FF00108 		mov	r8, #1
3497:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7130              		.loc 1 3497 36 view .LVU2290
 7131 0016 4FF48077 		mov	r7, #256
 7132              	.L700:
ARM GAS  /tmp/ccadPcKu.s 			page 224


 7133              	.LVL809:
3498:src/display.c **** 
3499:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7134              		.loc 1 3499 2 is_stmt 1 discriminator 4 view .LVU2291
 7135              		.loc 1 3499 14 discriminator 4 view .LVU2292
 7136              		.loc 1 3499 2 is_stmt 0 discriminator 4 view .LVU2293
 7137 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7138 001c 3446     		mov	r4, r6
 7139 001e 1BB1     		cbz	r3, .L701
 7140              	.LVL810:
 7141              	.L702:
 7142              		.loc 1 3499 30 is_stmt 1 discriminator 3 view .LVU2294
 7143              		.loc 1 3499 26 discriminator 3 view .LVU2295
 7144              		.loc 1 3499 14 discriminator 3 view .LVU2296
 7145              		.loc 1 3499 2 is_stmt 0 discriminator 3 view .LVU2297
 7146 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7147              	.LVL811:
 7148              		.loc 1 3499 2 discriminator 3 view .LVU2298
 7149 0024 002B     		cmp	r3, #0
 7150 0026 FBD1     		bne	.L702
 7151              	.L701:
3494:src/display.c **** 	const char *p;
 7152              		.loc 1 3494 15 view .LVU2299
 7153 0028 0025     		movs	r5, #0
 7154 002a 06E0     		b	.L703
 7155              	.LVL812:
 7156              	.L704:
 7157              	.LBB451:
3500:src/display.c **** 	while (--p >= str) {
3501:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7158              		.loc 1 3501 27 view .LVU2300
 7159 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3502:src/display.c **** 
3503:src/display.c **** 	  x += charlengths(c);
 7160              		.loc 1 3503 9 view .LVU2301
 7161 002e 3844     		add	r0, r0, r7
 7162 0030 FFF7FEFF 		bl	charlengths
 7163              	.LVL813:
 7164              		.loc 1 3503 6 view .LVU2302
 7165 0034 0544     		add	r5, r5, r0
 7166              	.LVL814:
3504:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7167              		.loc 1 3504 4 is_stmt 1 view .LVU2303
 7168              		.loc 1 3504 7 is_stmt 0 view .LVU2304
 7169 0036 4B2D     		cmp	r5, #75
 7170 0038 03D8     		bhi	.L705
 7171              	.LVL815:
 7172              	.L703:
3501:src/display.c **** 
 7173              		.loc 1 3501 4 is_stmt 1 view .LVU2305
3501:src/display.c **** 
 7174              		.loc 1 3501 4 is_stmt 0 view .LVU2306
 7175              	.LBE451:
3500:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7176              		.loc 1 3500 8 is_stmt 1 view .LVU2307
 7177 003a A146     		mov	r9, r4
 7178 003c 013C     		subs	r4, r4, #1
ARM GAS  /tmp/ccadPcKu.s 			page 225


 7179              	.LVL816:
 7180              	.LBB452:
3503:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7181              		.loc 1 3503 4 view .LVU2308
3503:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7182              		.loc 1 3503 4 is_stmt 0 view .LVU2309
 7183              	.LBE452:
3500:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7184              		.loc 1 3500 8 view .LVU2310
 7185 003e A642     		cmp	r6, r4
 7186 0040 F4D9     		bls	.L704
 7187              	.LVL817:
 7188              	.L705:
3505:src/display.c **** 	    break;
3506:src/display.c **** 	}
3507:src/display.c **** 	set_status_sized(p+1, toolarge);
 7189              		.loc 1 3507 2 is_stmt 1 view .LVU2311
 7190              	.LBB453:
 7191              	.LBI453:
3263:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7192              		.loc 1 3263 19 view .LVU2312
 7193              	.LBB454:
3264:src/display.c ****       }
 7194              		.loc 1 3264 2 view .LVU2313
 7195 0042 40F24A23 		movw	r3, #586
 7196 0046 0093     		str	r3, [sp]
 7197 0048 4146     		mov	r1, r8
 7198 004a 4846     		mov	r0, r9
 7199 004c 8E23     		movs	r3, #142
 7200 004e 4A22     		movs	r2, #74
 7201 0050 FFF7FEFF 		bl	s_s_sized
 7202              	.LVL818:
3264:src/display.c ****       }
 7203              		.loc 1 3264 2 is_stmt 0 view .LVU2314
 7204              	.LBE454:
 7205              	.LBE453:
3508:src/display.c ****       }
 7206              		.loc 1 3508 7 view .LVU2315
 7207 0054 03B0     		add	sp, sp, #12
 7208              		.cfi_remember_state
 7209              		.cfi_def_cfa_offset 28
 7210              		@ sp needed
 7211 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7212              	.LVL819:
 7213              	.L712:
 7214              		.cfi_restore_state
 7215              	.LBB455:
 7216              	.LBI455:
3411:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7217              		.loc 1 3411 18 is_stmt 1 view .LVU2316
 7218              	.LBB456:
3412:src/display.c ****       }
 7219              		.loc 1 3412 2 view .LVU2317
3412:src/display.c ****       }
 7220              		.loc 1 3412 9 is_stmt 0 view .LVU2318
 7221 005a 0021     		movs	r1, #0
 7222 005c FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/ccadPcKu.s 			page 226


 7223              	.LVL820:
3412:src/display.c ****       }
 7224              		.loc 1 3412 9 view .LVU2319
 7225              	.LBE456:
 7226              	.LBE455:
3496:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7227              		.loc 1 3496 41 view .LVU2320
 7228 0060 4B28     		cmp	r0, #75
 7229 0062 D6DC     		bgt	.L699
3496:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7230              		.loc 1 3496 12 view .LVU2321
 7231 0064 4FF00008 		mov	r8, #0
3497:src/display.c **** 
 7232              		.loc 1 3497 36 view .LVU2322
 7233 0068 4746     		mov	r7, r8
 7234 006a D6E7     		b	.L700
 7235              	.L714:
 7236              		.align	2
 7237              	.L713:
 7238 006c 00000000 		.word	StateWhileOn
 7239              		.cfi_endproc
 7240              	.LFE46:
 7242              		.section	.text.set_status_top.part.0,"ax",%progbits
 7243              		.align	1
 7244              		.p2align 2,,3
 7245              		.syntax unified
 7246              		.thumb
 7247              		.thumb_func
 7248              		.fpu fpv4-sp-d16
 7250              	set_status_top.part.0:
 7251              	.LVL821:
 7252              	.LFB55:
3424:src/display.c **** 	if (no_status_top) return;
 7253              		.loc 1 3424 19 is_stmt 1 view -0
 7254              		.cfi_startproc
 7255              		@ args = 0, pretend = 0, frame = 0
 7256              		@ frame_needed = 0, uses_anonymous_args = 0
3426:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7257              		.loc 1 3426 2 view .LVU2324
3424:src/display.c **** 	if (no_status_top) return;
 7258              		.loc 1 3424 19 is_stmt 0 view .LVU2325
 7259 0000 10B5     		push	{r4, lr}
 7260              		.cfi_def_cfa_offset 8
 7261              		.cfi_offset 4, -8
 7262              		.cfi_offset 14, -4
3426:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7263              		.loc 1 3426 6 view .LVU2326
 7264 0002 184B     		ldr	r3, .L725
 7265 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3426:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7266              		.loc 1 3426 5 view .LVU2327
 7267 0006 13F04001 		ands	r1, r3, #64
3424:src/display.c **** 	if (no_status_top) return;
 7268              		.loc 1 3424 19 view .LVU2328
 7269 000a 82B0     		sub	sp, sp, #8
 7270              		.cfi_def_cfa_offset 16
3424:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/ccadPcKu.s 			page 227


 7271              		.loc 1 3424 19 view .LVU2329
 7272 000c 0446     		mov	r4, r0
3426:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7273              		.loc 1 3426 5 view .LVU2330
 7274 000e 0DD0     		beq	.L716
3427:src/display.c **** 	}
 7275              		.loc 1 3427 4 is_stmt 1 view .LVU2331
 7276 0010 1A06     		lsls	r2, r3, #24
 7277 0012 18D5     		bpl	.L723
 7278 0014 0121     		movs	r1, #1
 7279              	.LVL822:
 7280              	.L717:
 7281              	.LBB457:
 7282              	.LBI457:
3266:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7283              		.loc 1 3266 19 view .LVU2332
 7284              	.LBB458:
3267:src/display.c ****       }
 7285              		.loc 1 3267 2 view .LVU2333
 7286 0016 4FF45373 		mov	r3, #844
 7287 001a 0093     		str	r3, [sp]
 7288 001c 2046     		mov	r0, r4
 7289 001e 40F24A23 		movw	r3, #586
 7290 0022 2B22     		movs	r2, #43
 7291 0024 FFF7FEFF 		bl	s_s_sized
 7292              	.LVL823:
3267:src/display.c ****       }
 7293              		.loc 1 3267 2 is_stmt 0 view .LVU2334
 7294              	.LBE458:
 7295              	.LBE457:
3432:src/display.c **** 
 7296              		.loc 1 3432 7 view .LVU2335
 7297 0028 02B0     		add	sp, sp, #8
 7298              		.cfi_remember_state
 7299              		.cfi_def_cfa_offset 8
 7300              		@ sp needed
 7301 002a 10BD     		pop	{r4, pc}
 7302              	.LVL824:
 7303              	.L716:
 7304              		.cfi_restore_state
3430:src/display.c **** 	}
 7305              		.loc 1 3430 4 is_stmt 1 view .LVU2336
 7306 002c 1B06     		lsls	r3, r3, #24
 7307 002e 12D5     		bpl	.L724
 7308 0030 0121     		movs	r1, #1
 7309              	.LVL825:
 7310              	.L719:
 7311              	.LBB459:
 7312              	.LBI459:
3263:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7313              		.loc 1 3263 19 view .LVU2337
 7314              	.LBB460:
3264:src/display.c ****       }
 7315              		.loc 1 3264 2 view .LVU2338
 7316 0032 40F24A23 		movw	r3, #586
 7317 0036 0093     		str	r3, [sp]
 7318 0038 2046     		mov	r0, r4
ARM GAS  /tmp/ccadPcKu.s 			page 228


 7319 003a 8E23     		movs	r3, #142
 7320 003c 4A22     		movs	r2, #74
 7321 003e FFF7FEFF 		bl	s_s_sized
 7322              	.LVL826:
3264:src/display.c ****       }
 7323              		.loc 1 3264 2 is_stmt 0 view .LVU2339
 7324              	.LBE460:
 7325              	.LBE459:
3432:src/display.c **** 
 7326              		.loc 1 3432 7 view .LVU2340
 7327 0042 02B0     		add	sp, sp, #8
 7328              		.cfi_remember_state
 7329              		.cfi_def_cfa_offset 8
 7330              		@ sp needed
 7331 0044 10BD     		pop	{r4, pc}
 7332              	.LVL827:
 7333              	.L723:
 7334              		.cfi_restore_state
 7335              	.LBB461:
 7336              	.LBI461:
3414:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7337              		.loc 1 3414 18 is_stmt 1 view .LVU2341
 7338              	.LBB462:
3415:src/display.c ****       }
 7339              		.loc 1 3415 2 view .LVU2342
3415:src/display.c ****       }
 7340              		.loc 1 3415 9 is_stmt 0 view .LVU2343
 7341 0046 0021     		movs	r1, #0
 7342 0048 FFF7FEFF 		bl	pixel_length
 7343              	.LVL828:
3415:src/display.c ****       }
 7344              		.loc 1 3415 9 view .LVU2344
 7345              	.LBE462:
 7346              	.LBE461:
3427:src/display.c **** 	}
 7347              		.loc 1 3427 4 view .LVU2345
 7348 004c 2C28     		cmp	r0, #44
 7349 004e D4BF     		ite	le
 7350 0050 0021     		movle	r1, #0
 7351 0052 0121     		movgt	r1, #1
 7352 0054 DFE7     		b	.L717
 7353              	.LVL829:
 7354              	.L724:
 7355              	.LBB463:
 7356              	.LBI463:
3411:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7357              		.loc 1 3411 18 is_stmt 1 view .LVU2346
 7358              	.LBB464:
3412:src/display.c ****       }
 7359              		.loc 1 3412 2 view .LVU2347
3412:src/display.c ****       }
 7360              		.loc 1 3412 9 is_stmt 0 view .LVU2348
 7361 0056 FFF7FEFF 		bl	pixel_length
 7362              	.LVL830:
3412:src/display.c ****       }
 7363              		.loc 1 3412 9 view .LVU2349
 7364              	.LBE464:
ARM GAS  /tmp/ccadPcKu.s 			page 229


 7365              	.LBE463:
3430:src/display.c **** 	}
 7366              		.loc 1 3430 4 view .LVU2350
 7367 005a 4B28     		cmp	r0, #75
 7368 005c D4BF     		ite	le
 7369 005e 0021     		movle	r1, #0
 7370 0060 0121     		movgt	r1, #1
 7371 0062 E6E7     		b	.L719
 7372              	.L726:
 7373              		.align	2
 7374              	.L725:
 7375 0064 00000000 		.word	StateWhileOn
 7376              		.cfi_endproc
 7377              	.LFE55:
 7379              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7380              		.align	2
 7381              	.LC3:
 7382 0000 32630600 		.ascii	"2c\006\000"
 7383              		.align	2
 7384              	.LC4:
 7385 0004 07C63C00 		.ascii	"\007\306<\000"
 7386              		.align	2
 7387              	.LC5:
 7388 0008 07876900 		.ascii	"\007\207i\000"
 7389              		.align	2
 7390              	.LC6:
 7391 000c 07C67900 		.ascii	"\007\306y\000"
 7392              		.align	2
 7393              	.LC7:
 7394 0010 07950600 		.ascii	"\007\225\006\000"
 7395              		.align	2
 7396              	.LC8:
 7397 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7397      060600
 7398 001b 00       		.align	2
 7399              	.LC9:
 7400 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7400      060600
 7401 0023 00       		.align	2
 7402              	.LC10:
 7403 0024 1400     		.ascii	"\024\000"
 7404 0026 0000     		.align	2
 7405              	.LC11:
 7406 0028 07C74400 		.ascii	"\007\307D\000"
 7407              		.align	2
 7408              	.LC12:
 7409 002c 07870700 		.ascii	"\007\207\007\000"
 7410              		.align	2
 7411              	.LC13:
 7412 0030 07872000 		.ascii	"\007\207 \000"
 7413              		.align	2
 7414              	.LC14:
 7415 0034 06060788 		.ascii	"\006\006\007\210\007\000"
 7415      0700
 7416 003a 0000     		.align	2
 7417              	.LC15:
 7418 003c 07C73C00 		.ascii	"\007\307<\000"
ARM GAS  /tmp/ccadPcKu.s 			page 230


 7419              		.align	2
 7420              	.LC16:
 7421 0040 07C77900 		.ascii	"\007\307y\000"
 7422              		.align	2
 7423              	.LC17:
 7424 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7424      00
 7425 0049 000000   		.align	2
 7426              	.LC19:
 7427 004c 07E43F00 		.ascii	"\007\344?\000"
 7428              		.section	.text.annunciators,"ax",%progbits
 7429              		.align	1
 7430              		.p2align 2,,3
 7431              		.syntax unified
 7432              		.thumb
 7433              		.thumb_func
 7434              		.fpu fpv4-sp-d16
 7436              	annunciators:
 7437              	.LFB16:
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7438              		.loc 1 598 36 is_stmt 1 view -0
 7439              		.cfi_startproc
 7440              		@ args = 0, pretend = 0, frame = 128
 7441              		@ frame_needed = 0, uses_anonymous_args = 0
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 7442              		.loc 1 600 7 view .LVU2352
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7443              		.loc 1 598 36 is_stmt 0 view .LVU2353
 7444 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7445              		.cfi_def_cfa_offset 24
 7446              		.cfi_offset 4, -24
 7447              		.cfi_offset 5, -20
 7448              		.cfi_offset 6, -16
 7449              		.cfi_offset 7, -12
 7450              		.cfi_offset 8, -8
 7451              		.cfi_offset 14, -4
 612:src/display.c **** #  endif
 7452              		.loc 1 612 38 view .LVU2354
 7453 0004 BE4E     		ldr	r6, .L837
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7454              		.loc 1 598 36 view .LVU2355
 7455 0006 A0B0     		sub	sp, sp, #128
 7456              		.cfi_def_cfa_offset 152
 7457              	.LVL831:
 601:src/display.c ****       int n;
 7458              		.loc 1 601 7 is_stmt 1 view .LVU2356
 602:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7459              		.loc 1 602 7 view .LVU2357
 603:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7460              		.loc 1 603 7 view .LVU2358
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7461              		.loc 1 604 7 view .LVU2359
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7462              		.loc 1 604 43 is_stmt 0 view .LVU2360
 7463 0008 FFF7FEFF 		bl	cur_shift
 7464              	.LVL832:
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
ARM GAS  /tmp/ccadPcKu.s 			page 231


 7465              		.loc 1 604 18 view .LVU2361
 7466 000c BD4B     		ldr	r3, .L837+4
 612:src/display.c **** #  endif
 7467              		.loc 1 612 38 view .LVU2362
 7468 000e 3268     		ldr	r2, [r6]
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7469              		.loc 1 604 18 view .LVU2363
 7470 0010 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 7471              	.LVL833:
 612:src/display.c **** #  endif
 7472              		.loc 1 612 7 is_stmt 1 view .LVU2364
 612:src/display.c **** #  endif
 7473              		.loc 1 612 38 is_stmt 0 view .LVU2365
 7474 0012 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7475              		.loc 1 643 7 view .LVU2366
 7476 0016 0AAD     		add	r5, sp, #40
 7477              	.LVL834:
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7478              		.loc 1 643 7 view .LVU2367
 7479 0018 2A22     		movs	r2, #42
 7480 001a 0021     		movs	r1, #0
 7481 001c 2846     		mov	r0, r5
 7482 001e FFF7FEFF 		bl	xset
 7483              	.LVL835:
 644:src/display.c ****       
 7484              		.loc 1 644 7 view .LVU2368
 7485 0022 15A8     		add	r0, sp, #84
 7486              	.LVL836:
 644:src/display.c ****       
 7487              		.loc 1 644 7 view .LVU2369
 7488 0024 2A22     		movs	r2, #42
 7489 0026 0021     		movs	r1, #0
 7490 0028 FFF7FEFF 		bl	xset
 7491              	.LVL837:
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7492              		.loc 1 646 11 view .LVU2370
 7493 002c 3368     		ldr	r3, [r6]
 7494 002e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7495              		.loc 1 646 10 view .LVU2371
 7496 0032 D807     		lsls	r0, r3, #31
 612:src/display.c **** #  endif
 7497              		.loc 1 612 17 view .LVU2372
 7498 0034 C4F38004 		ubfx	r4, r4, #2, #1
 7499              	.LVL838:
 615:src/display.c **** #  else
 7500              		.loc 1 615 7 is_stmt 1 view .LVU2373
 620:src/display.c **** #  else
 7501              		.loc 1 620 7 view .LVU2374
 630:src/display.c **** #else
 7502              		.loc 1 630 7 view .LVU2375
 638:src/display.c **** #else
 7503              		.loc 1 638 7 view .LVU2376
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7504              		.loc 1 643 7 view .LVU2377
 644:src/display.c ****       
ARM GAS  /tmp/ccadPcKu.s 			page 232


 7505              		.loc 1 644 7 view .LVU2378
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7506              		.loc 1 646 7 view .LVU2379
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7507              		.loc 1 646 10 is_stmt 0 view .LVU2380
 7508 0038 00F1C380 		bmi	.L822
 685:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7509              		.loc 1 685 12 is_stmt 1 view .LVU2381
 685:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7510              		.loc 1 685 15 is_stmt 0 view .LVU2382
 7511 003c 74BB     		cbnz	r4, .L741
 703:src/display.c **** 	    *p2++ = shift_char;
 7512              		.loc 1 703 4 is_stmt 1 view .LVU2383
 703:src/display.c **** 	    *p2++ = shift_char;
 7513              		.loc 1 703 7 is_stmt 0 view .LVU2384
 7514 003e 202F     		cmp	r7, #32
 7515 0040 00F09481 		beq	.L742
 7516              	.L744:
 704:src/display.c **** 	    *p2++ = '\006';
 7517              		.loc 1 704 6 is_stmt 1 view .LVU2385
 7518              	.LVL839:
 705:src/display.c **** 	  }
 7519              		.loc 1 705 12 is_stmt 0 view .LVU2386
 7520 0044 0623     		movs	r3, #6
 704:src/display.c **** 	    *p2++ = '\006';
 7521              		.loc 1 704 12 view .LVU2387
 7522 0046 8DF85470 		strb	r7, [sp, #84]
 705:src/display.c **** 	  }
 7523              		.loc 1 705 6 is_stmt 1 view .LVU2388
 7524              	.LVL840:
 705:src/display.c **** 	  }
 7525              		.loc 1 705 12 is_stmt 0 view .LVU2389
 7526 004a 8DF85530 		strb	r3, [sp, #85]
 705:src/display.c **** 	  }
 7527              		.loc 1 705 9 view .LVU2390
 7528 004e 0DF15600 		add	r0, sp, #86
 7529              	.LVL841:
 7530              	.L743:
 711:src/display.c **** 	  *p2++ = ' ';
 7531              		.loc 1 711 2 is_stmt 1 view .LVU2391
 711:src/display.c **** 	  *p2++ = ' ';
 7532              		.loc 1 711 6 is_stmt 0 view .LVU2392
 7533 0052 AD4A     		ldr	r2, .L837+8
 7534 0054 537D     		ldrb	r3, [r2, #21]	@ zero_extendqisi2
 711:src/display.c **** 	  *p2++ = ' ';
 7535              		.loc 1 711 5 view .LVU2393
 7536 0056 9907     		lsls	r1, r3, #30
 7537 0058 00F13081 		bmi	.L823
 716:src/display.c **** 	  *p2++ = ' ';
 7538              		.loc 1 716 2 is_stmt 1 view .LVU2394
 716:src/display.c **** 	  *p2++ = ' ';
 7539              		.loc 1 716 5 is_stmt 0 view .LVU2395
 7540 005c 5B07     		lsls	r3, r3, #29
 7541 005e 00F12881 		bmi	.L824
 722:src/display.c **** 	  if (State2.wascomplex) {
 7542              		.loc 1 722 2 is_stmt 1 view .LVU2396
 722:src/display.c **** 	  if (State2.wascomplex) {
ARM GAS  /tmp/ccadPcKu.s 			page 233


 7543              		.loc 1 722 5 is_stmt 0 view .LVU2397
 7544 0062 202F     		cmp	r7, #32
 7545 0064 00F09D81 		beq	.L825
 7546              	.L747:
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7547              		.loc 1 739 2 is_stmt 1 view .LVU2398
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7548              		.loc 1 739 16 is_stmt 0 view .LVU2399
 7549 0068 3368     		ldr	r3, [r6]
 7550 006a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7551 006e C3F30113 		ubfx	r3, r3, #4, #2
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7552              		.loc 1 739 2 view .LVU2400
 7553 0072 012B     		cmp	r3, #1
 7554 0074 00F0D781 		beq	.L781
 7555 0078 A449     		ldr	r1, .L837+12
 7556 007a A54A     		ldr	r2, .L837+16
 7557 007c 022B     		cmp	r3, #2
 7558 007e 08BF     		it	eq
 7559 0080 1146     		moveq	r1, r2
 7560              	.L749:
 7561              	.LVL842:
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7562              		.loc 1 753 2 is_stmt 1 view .LVU2401
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7563              		.loc 1 753 7 is_stmt 0 view .LVU2402
 7564 0082 FFF7FEFF 		bl	scopy
 7565              	.LVL843:
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7566              		.loc 1 753 7 view .LVU2403
 7567 0086 0446     		mov	r4, r0
 7568              	.LVL844:
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7569              		.loc 1 755 2 is_stmt 1 view .LVU2404
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7570              		.loc 1 755 6 is_stmt 0 view .LVU2405
 7571 0088 FFF7FEFF 		bl	get_trig_mode
 7572              	.LVL845:
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7573              		.loc 1 755 5 view .LVU2406
 7574 008c 0228     		cmp	r0, #2
 7575 008e 40F0EE80 		bne	.L740
 756:src/display.c **** 	}
 7576              		.loc 1 756 4 is_stmt 1 view .LVU2407
 7577 0092 A049     		ldr	r1, .L837+20
 7578 0094 2046     		mov	r0, r4
 7579 0096 FFF7FEFF 		bl	scopy
 7580              	.LVL846:
 7581 009a E8E0     		b	.L740
 7582              	.LVL847:
 7583              	.L741:
 767:src/display.c **** 	  *p2++ = '\007';
 7584              		.loc 1 767 2 view .LVU2408
 767:src/display.c **** 	  *p2++ = '\007';
 7585              		.loc 1 767 6 is_stmt 0 view .LVU2409
 7586 009c DFF86882 		ldr	r8, .L837+8
 7587 00a0 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccadPcKu.s 			page 234


 767:src/display.c **** 	  *p2++ = '\007';
 7588              		.loc 1 767 5 view .LVU2410
 7589 00a4 9807     		lsls	r0, r3, #30
 7590 00a6 00F1EF80 		bmi	.L826
 773:src/display.c **** 	  *p2++ = '\007';
 7591              		.loc 1 773 7 is_stmt 1 view .LVU2411
 773:src/display.c **** 	  *p2++ = '\007';
 7592              		.loc 1 773 10 is_stmt 0 view .LVU2412
 7593 00aa 202F     		cmp	r7, #32
 7594 00ac 00F00D81 		beq	.L752
 774:src/display.c **** 	  *p2++ = '\307';
 7595              		.loc 1 774 4 is_stmt 1 view .LVU2413
 7596              	.LVL848:
 775:src/display.c **** 	  *p2++ = shift_char;
 7597              		.loc 1 775 4 view .LVU2414
 774:src/display.c **** 	  *p2++ = '\307';
 7598              		.loc 1 774 10 is_stmt 0 view .LVU2415
 7599 00b0 4CF20772 		movw	r2, #50951
 776:src/display.c **** 	  goto no_copy;
 7600              		.loc 1 776 10 view .LVU2416
 7601 00b4 8DF85670 		strb	r7, [sp, #86]
 774:src/display.c **** 	  *p2++ = '\307';
 7602              		.loc 1 774 10 view .LVU2417
 7603 00b8 ADF85420 		strh	r2, [sp, #84]	@ movhi
 776:src/display.c **** 	  goto no_copy;
 7604              		.loc 1 776 4 is_stmt 1 view .LVU2418
 7605              	.LVL849:
 777:src/display.c **** 	}
 7606              		.loc 1 777 4 view .LVU2419
 776:src/display.c **** 	  goto no_copy;
 7607              		.loc 1 776 7 is_stmt 0 view .LVU2420
 7608 00bc 0DF15700 		add	r0, sp, #87
 7609              	.LVL850:
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 7610              		.loc 1 600 22 view .LVU2421
 7611 00c0 2F46     		mov	r7, r5
 7612              	.LVL851:
 7613              	.L753:
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7614              		.loc 1 820 2 is_stmt 1 view .LVU2422
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7615              		.loc 1 820 5 is_stmt 0 view .LVU2423
 7616 00c2 5907     		lsls	r1, r3, #29
 7617 00c4 00F1F180 		bmi	.L827
 7618              	.LVL852:
 7619              	.L757:
 823:src/display.c **** 	  decNumber y;
 7620              		.loc 1 823 2 is_stmt 1 view .LVU2424
 823:src/display.c **** 	  decNumber y;
 7621              		.loc 1 823 6 is_stmt 0 view .LVU2425
 7622 00c8 98F81630 		ldrb	r3, [r8, #22]	@ zero_extendqisi2
 823:src/display.c **** 	  decNumber y;
 7623              		.loc 1 823 5 view .LVU2426
 7624 00cc 5A06     		lsls	r2, r3, #25
 7625 00ce 40F1CE80 		bpl	.L740
 7626              	.L731:
 7627              	.LBB465:
ARM GAS  /tmp/ccadPcKu.s 			page 235


 824:src/display.c **** 	display_yreg:
 7628              		.loc 1 824 4 is_stmt 1 view .LVU2427
 831:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7629              		.loc 1 831 4 view .LVU2428
 831:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7630              		.loc 1 831 8 is_stmt 0 view .LVU2429
 7631 00d2 3368     		ldr	r3, [r6]
 7632 00d4 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 831:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7633              		.loc 1 831 7 view .LVU2430
 7634 00d8 DB07     		lsls	r3, r3, #31
 7635 00da 00F15281 		bmi	.L828
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7636              		.loc 1 836 4 is_stmt 1 view .LVU2431
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7637              		.loc 1 836 34 is_stmt 0 view .LVU2432
 7638 00de DFF85C82 		ldr	r8, .L837+60
 7639 00e2 D8F80010 		ldr	r1, [r8]
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7640              		.loc 1 836 4 view .LVU2433
 7641 00e6 6329     		cmp	r1, #99
 7642 00e8 00F32C81 		bgt	.L829
 7643              	.LVL853:
 7644              	.L760:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7645              		.loc 1 836 4 discriminator 5 view .LVU2434
 7646 00ec 0131     		adds	r1, r1, #1
 7647              	.L764:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7648              		.loc 1 836 4 discriminator 6 view .LVU2435
 7649 00ee 01A8     		add	r0, sp, #4
 7650 00f0 FFF7FEFF 		bl	getRegister
 7651              	.LVL854:
 839:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7652              		.loc 1 839 4 is_stmt 1 discriminator 6 view .LVU2436
 839:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7653              		.loc 1 839 7 is_stmt 0 discriminator 6 view .LVU2437
 7654 00f4 9DF80C10 		ldrb	r1, [sp, #12]	@ zero_extendqisi2
 7655 00f8 11F07001 		ands	r1, r1, #112
 7656 00fc 3FD1     		bne	.L766
 840:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7657              		.loc 1 840 6 is_stmt 1 view .LVU2438
 840:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7658              		.loc 1 840 19 is_stmt 0 view .LVU2439
 7659 00fe 824B     		ldr	r3, .L837+8
 7660 0100 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 840:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7661              		.loc 1 840 9 view .LVU2440
 7662 0102 D007     		lsls	r0, r2, #31
 7663 0104 00F16081 		bmi	.L830
 861:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7664              		.loc 1 861 6 is_stmt 1 view .LVU2441
 861:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7665              		.loc 1 861 21 is_stmt 0 view .LVU2442
 7666 0108 3268     		ldr	r2, [r6]
 7667 010a 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
 861:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccadPcKu.s 			page 236


 7668              		.loc 1 861 9 view .LVU2443
 7669 010e 9206     		lsls	r2, r2, #26
 7670 0110 35D5     		bpl	.L766
 863:src/display.c **** #endif
 7671              		.loc 1 863 6 view .LVU2444
 7672 0112 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 863:src/display.c **** #endif
 7673              		.loc 1 863 3 view .LVU2445
 7674 0114 13F00204 		ands	r4, r3, #2
 7675 0118 31D1     		bne	.L766
 866:src/display.c **** #endif
 7676              		.loc 1 866 6 view .LVU2446
 7677 011a 7F4B     		ldr	r3, .L837+24
 866:src/display.c **** #endif
 7678              		.loc 1 866 3 view .LVU2447
 7679 011c 1B68     		ldr	r3, [r3]
 7680 011e 012B     		cmp	r3, #1
 7681 0120 2DD0     		beq	.L766
 868:src/display.c **** 	      char ltgteq;
 7682              		.loc 1 868 6 view .LVU2448
 7683 0122 3946     		mov	r1, r7
 7684 0124 01A8     		add	r0, sp, #4
 7685 0126 FFF7FEFF 		bl	set_x_fract
 7686              	.LVL855:
 868:src/display.c **** 	      char ltgteq;
 7687              		.loc 1 868 3 view .LVU2449
 7688 012a 40B3     		cbz	r0, .L766
 7689              	.LBB466:
 869:src/display.c **** 
 7690              		.loc 1 869 8 is_stmt 1 view .LVU2450
 871:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7691              		.loc 1 871 8 view .LVU2451
 871:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7692              		.loc 1 871 12 is_stmt 0 view .LVU2452
 7693 012c 2146     		mov	r1, r4
 7694 012e 2846     		mov	r0, r5
 7695 0130 FFF7FEFF 		bl	find_char
 7696              	.LVL856:
 7697 0134 0446     		mov	r4, r0
 871:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7698              		.loc 1 871 10 view .LVU2453
 7699 0136 0238     		subs	r0, r0, #2
 7700              	.LVL857:
 873:src/display.c **** 	      switch (ltgteq) {
 7701              		.loc 1 873 8 is_stmt 1 view .LVU2454
 873:src/display.c **** 	      switch (ltgteq) {
 7702              		.loc 1 873 15 is_stmt 0 view .LVU2455
 7703 0138 14F8026C 		ldrb	r6, [r4, #-2]	@ zero_extendqisi2
 7704              	.LVL858:
 874:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7705              		.loc 1 874 8 is_stmt 1 view .LVU2456
 7706 013c 472E     		cmp	r6, #71
 7707 013e 00F08281 		beq	.L785
 876:src/display.c **** 	      }
 7708              		.loc 1 876 25 is_stmt 0 view .LVU2457
 7709 0142 4C2E     		cmp	r6, #76
 7710 0144 08BF     		it	eq
ARM GAS  /tmp/ccadPcKu.s 			page 237


 7711 0146 3C26     		moveq	r6, #60
 7712              	.LVL859:
 7713              	.L771:
 878:src/display.c **** 	      q[2] = ltgteq;
 7714              		.loc 1 878 8 is_stmt 1 view .LVU2458
 7715 0148 7449     		ldr	r1, .L837+28
 7716 014a FFF7FEFF 		bl	scopy
 7717              	.LVL860:
 879:src/display.c **** 
 7718              		.loc 1 879 8 view .LVU2459
 879:src/display.c **** 
 7719              		.loc 1 879 13 is_stmt 0 view .LVU2460
 7720 014e 2670     		strb	r6, [r4]
 881:src/display.c **** 		goto skip;
 7721              		.loc 1 881 8 is_stmt 1 view .LVU2461
 881:src/display.c **** 		goto skip;
 7722              		.loc 1 881 12 is_stmt 0 view .LVU2462
 7723 0150 0121     		movs	r1, #1
 7724 0152 2846     		mov	r0, r5
 7725 0154 FFF7FEFF 		bl	pixel_length
 7726              	.LVL861:
 881:src/display.c **** 		goto skip;
 7727              		.loc 1 881 11 view .LVU2463
 7728 0158 2C28     		cmp	r0, #44
 7729 015a 40F38880 		ble	.L740
 884:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7730              		.loc 1 884 8 is_stmt 1 view .LVU2464
 884:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7731              		.loc 1 884 14 is_stmt 0 view .LVU2465
 7732 015e 0026     		movs	r6, #0
 7733              	.LVL862:
 884:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7734              		.loc 1 884 14 view .LVU2466
 7735 0160 04F8036C 		strb	r6, [r4, #-3]
 885:src/display.c **** 		goto skip;
 7736              		.loc 1 885 8 is_stmt 1 view .LVU2467
 885:src/display.c **** 		goto skip;
 7737              		.loc 1 885 12 is_stmt 0 view .LVU2468
 7738 0164 0121     		movs	r1, #1
 7739 0166 2846     		mov	r0, r5
 7740 0168 FFF7FEFF 		bl	pixel_length
 7741              	.LVL863:
 885:src/display.c **** 		goto skip;
 7742              		.loc 1 885 11 view .LVU2469
 7743 016c 2C28     		cmp	r0, #44
 7744 016e 7EDD     		ble	.L740
 888:src/display.c **** 	    }
 7745              		.loc 1 888 8 is_stmt 1 view .LVU2470
 888:src/display.c **** 	    }
 7746              		.loc 1 888 39 is_stmt 0 view .LVU2471
 7747 0170 7A1B     		subs	r2, r7, r5
 888:src/display.c **** 	    }
 7748              		.loc 1 888 8 view .LVU2472
 7749 0172 3146     		mov	r1, r6
 7750 0174 C2F12A02 		rsb	r2, r2, #42
 7751 0178 3846     		mov	r0, r7
 7752 017a FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccadPcKu.s 			page 238


 7753              	.LVL864:
 7754              	.L766:
 888:src/display.c **** 	    }
 7755              		.loc 1 888 8 view .LVU2473
 7756              	.LBE466:
 891:src/display.c **** 	    int extra_pixels;
 7757              		.loc 1 891 4 is_stmt 1 view .LVU2474
 891:src/display.c **** 	    int extra_pixels;
 7758              		.loc 1 891 10 is_stmt 0 view .LVU2475
 7759 017e 0C23     		movs	r3, #12
 7760 0180 0093     		str	r3, [sp]
 891:src/display.c **** 	    int extra_pixels;
 7761              		.loc 1 891 27 is_stmt 1 view .LVU2476
 7762 0182 0EE0     		b	.L773
 7763              	.LVL865:
 7764              	.L831:
 7765              	.LBB467:
 899:src/display.c **** 
 7766              		.loc 1 899 6 is_stmt 0 view .LVU2477
 7767 0184 009A     		ldr	r2, [sp]
 7768 0186 0A32     		adds	r2, r2, #10
 7769 0188 FFF7FEFF 		bl	xset
 7770              	.LVL866:
 901:src/display.c **** 	  }
 7771              		.loc 1 901 6 is_stmt 1 view .LVU2478
 901:src/display.c **** 	  }
 7772              		.loc 1 901 30 is_stmt 0 view .LVU2479
 7773 018c B4F14802 		subs	r2, r4, #72
 901:src/display.c **** 	  }
 7774              		.loc 1 901 8 view .LVU2480
 7775 0190 009B     		ldr	r3, [sp]
 901:src/display.c **** 	  }
 7776              		.loc 1 901 30 view .LVU2481
 7777 0192 48BF     		it	mi
 7778 0194 A4F14502 		submi	r2, r4, #69
 901:src/display.c **** 	  }
 7779              		.loc 1 901 8 view .LVU2482
 7780 0198 A3EBA203 		sub	r3, r3, r2, asr #2
 7781              	.LBE467:
 891:src/display.c **** 	    int extra_pixels;
 7782              		.loc 1 891 4 view .LVU2483
 7783 019c 012B     		cmp	r3, #1
 7784              	.LBB468:
 901:src/display.c **** 	  }
 7785              		.loc 1 901 8 view .LVU2484
 7786 019e 0093     		str	r3, [sp]
 7787              	.LBE468:
 891:src/display.c **** 	    int extra_pixels;
 7788              		.loc 1 891 27 is_stmt 1 view .LVU2485
 891:src/display.c **** 	    int extra_pixels;
 7789              		.loc 1 891 4 is_stmt 0 view .LVU2486
 7790 01a0 65DD     		ble	.L740
 7791              	.LVL867:
 7792              	.L773:
 7793              	.LBB469:
 892:src/display.c **** 
 7794              		.loc 1 892 6 is_stmt 1 view .LVU2487
ARM GAS  /tmp/ccadPcKu.s 			page 239


 894:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7795              		.loc 1 894 6 view .LVU2488
 7796 01a2 6A46     		mov	r2, sp
 7797 01a4 3946     		mov	r1, r7
 7798 01a6 01A8     		add	r0, sp, #4
 7799 01a8 FFF7FEFF 		bl	set_x_dn
 7800              	.LVL868:
 895:src/display.c **** 	    if (extra_pixels <= 0)
 7801              		.loc 1 895 6 view .LVU2489
 895:src/display.c **** 	    if (extra_pixels <= 0)
 7802              		.loc 1 895 21 is_stmt 0 view .LVU2490
 7803 01ac 0121     		movs	r1, #1
 7804 01ae 2846     		mov	r0, r5
 7805 01b0 FFF7FEFF 		bl	pixel_length
 7806              	.LVL869:
 899:src/display.c **** 
 7807              		.loc 1 899 6 is_stmt 1 view .LVU2491
 895:src/display.c **** 	    if (extra_pixels <= 0)
 7808              		.loc 1 895 21 is_stmt 0 view .LVU2492
 7809 01b4 0446     		mov	r4, r0
 7810              	.LVL870:
 896:src/display.c **** 	      break;
 7811              		.loc 1 896 6 is_stmt 1 view .LVU2493
 896:src/display.c **** 	      break;
 7812              		.loc 1 896 9 is_stmt 0 view .LVU2494
 7813 01b6 4B2C     		cmp	r4, #75
 899:src/display.c **** 
 7814              		.loc 1 899 6 view .LVU2495
 7815 01b8 4FF00001 		mov	r1, #0
 7816 01bc 3846     		mov	r0, r7
 7817              	.LVL871:
 896:src/display.c **** 	      break;
 7818              		.loc 1 896 9 view .LVU2496
 7819 01be E1DC     		bgt	.L831
 7820              	.LVL872:
 896:src/display.c **** 	      break;
 7821              		.loc 1 896 9 view .LVU2497
 7822              	.LBE469:
 7823 01c0 55E0     		b	.L740
 7824              	.LVL873:
 7825              	.L822:
 896:src/display.c **** 	      break;
 7826              		.loc 1 896 9 view .LVU2498
 7827              	.LBE465:
 656:src/display.c **** 	    *p2++ = '\006';
 7828              		.loc 1 656 6 is_stmt 1 view .LVU2499
 657:src/display.c **** 	  }
 7829              		.loc 1 657 12 is_stmt 0 view .LVU2500
 7830 01c2 0623     		movs	r3, #6
 7831 01c4 8DF85530 		strb	r3, [sp, #85]
 656:src/display.c **** 	    *p2++ = '\006';
 7832              		.loc 1 656 12 view .LVU2501
 7833 01c8 8DF85470 		strb	r7, [sp, #84]
 657:src/display.c **** 	  }
 7834              		.loc 1 657 6 is_stmt 1 view .LVU2502
 7835              	.LVL874:
 660:src/display.c **** 	default:
ARM GAS  /tmp/ccadPcKu.s 			page 240


 7836              		.loc 1 660 2 view .LVU2503
 660:src/display.c **** 	default:
 7837              		.loc 1 660 9 is_stmt 0 view .LVU2504
 7838 01cc FFF7FEFF 		bl	int_mode
 7839              	.LVL875:
 7840 01d0 0138     		subs	r0, r0, #1
 7841 01d2 C0B2     		uxtb	r0, r0
 7842 01d4 0228     		cmp	r0, #2
 7843 01d6 96BF     		itet	ls
 7844 01d8 514B     		ldrls	r3, .L837+32
 7845 01da 5249     		ldrhi	r1, .L837+36
 7846 01dc 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7847              	.LVL876:
 667:src/display.c **** 	*q++ = '\006';
 7848              		.loc 1 667 2 is_stmt 1 view .LVU2505
 667:src/display.c **** 	*q++ = '\006';
 7849              		.loc 1 667 6 is_stmt 0 view .LVU2506
 7850 01e0 0DF15600 		add	r0, sp, #86
 7851              	.LVL877:
 667:src/display.c **** 	*q++ = '\006';
 7852              		.loc 1 667 6 view .LVU2507
 7853 01e4 FFF7FEFF 		bl	scopy
 7854              	.LVL878:
 668:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7855              		.loc 1 668 7 view .LVU2508
 7856 01e8 8046     		mov	r8, r0
 7857 01ea 0623     		movs	r3, #6
 7858 01ec 08F8013B 		strb	r3, [r8], #1
 667:src/display.c **** 	*q++ = '\006';
 7859              		.loc 1 667 6 view .LVU2509
 7860 01f0 0746     		mov	r7, r0
 7861              	.LVL879:
 668:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7862              		.loc 1 668 2 is_stmt 1 view .LVU2510
 669:src/display.c **** 
 7863              		.loc 1 669 2 view .LVU2511
 669:src/display.c **** 
 7864              		.loc 1 669 7 is_stmt 0 view .LVU2512
 7865 01f2 FFF7FEFF 		bl	word_size
 7866              	.LVL880:
 7867 01f6 0222     		movs	r2, #2
 7868 01f8 0146     		mov	r1, r0
 7869 01fa 4046     		mov	r0, r8
 7870 01fc FFF7FEFF 		bl	num_arg_0
 7871              	.LVL881:
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7872              		.loc 1 671 19 view .LVU2513
 7873 0200 DFF83CC1 		ldr	ip, .L837+64
 7874 0204 DCF80030 		ldr	r3, [ip]
 7875              	.LVL882:
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7876              		.loc 1 671 2 is_stmt 1 view .LVU2514
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7877              		.loc 1 671 5 is_stmt 0 view .LVU2515
 7878 0208 002B     		cmp	r3, #0
 7879 020a 2FDD     		ble	.L737
 672:src/display.c **** 	  if (*q == '1')
ARM GAS  /tmp/ccadPcKu.s 			page 241


 7880              		.loc 1 672 4 is_stmt 1 view .LVU2516
 672:src/display.c **** 	  if (*q == '1')
 7881              		.loc 1 672 10 is_stmt 0 view .LVU2517
 7882 020c C3F10702 		rsb	r2, r3, #7
 7883 0210 5200     		lsls	r2, r2, #1
 672:src/display.c **** 	  if (*q == '1')
 7884              		.loc 1 672 6 view .LVU2518
 7885 0212 0092     		str	r2, [sp]
 673:src/display.c **** 	    n += 2;
 7886              		.loc 1 673 4 is_stmt 1 view .LVU2519
 673:src/display.c **** 	    n += 2;
 7887              		.loc 1 673 7 is_stmt 0 view .LVU2520
 7888 0214 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 7889 0216 3129     		cmp	r1, #49
 674:src/display.c **** 	  if (q[1] == '1')
 7890              		.loc 1 674 6 is_stmt 1 view .LVU2521
 674:src/display.c **** 	  if (q[1] == '1')
 7891              		.loc 1 674 8 is_stmt 0 view .LVU2522
 7892 0218 04BF     		itt	eq
 7893 021a 0232     		addeq	r2, r2, #2
 7894 021c 0092     		streq	r2, [sp]
 675:src/display.c **** 	    n += 2;
 7895              		.loc 1 675 4 is_stmt 1 view .LVU2523
 675:src/display.c **** 	    n += 2;
 7896              		.loc 1 675 7 is_stmt 0 view .LVU2524
 7897 021e B978     		ldrb	r1, [r7, #2]	@ zero_extendqisi2
 7898 0220 3129     		cmp	r1, #49
 676:src/display.c **** 	  while (n-- > 0)
 7899              		.loc 1 676 6 is_stmt 1 view .LVU2525
 676:src/display.c **** 	  while (n-- > 0)
 7900              		.loc 1 676 8 is_stmt 0 view .LVU2526
 7901 0222 08BF     		it	eq
 7902 0224 0232     		addeq	r2, r2, #2
 677:src/display.c **** 	    *p2++ = '\006';
 7903              		.loc 1 677 10 is_stmt 1 view .LVU2527
 677:src/display.c **** 	    *p2++ = '\006';
 7904              		.loc 1 677 12 is_stmt 0 view .LVU2528
 7905 0226 511E     		subs	r1, r2, #1
 677:src/display.c **** 	    *p2++ = '\006';
 7906              		.loc 1 677 10 view .LVU2529
 7907 0228 002A     		cmp	r2, #0
 677:src/display.c **** 	    *p2++ = '\006';
 7908              		.loc 1 677 12 view .LVU2530
 7909 022a 0091     		str	r1, [sp]
 677:src/display.c **** 	    *p2++ = '\006';
 7910              		.loc 1 677 10 view .LVU2531
 7911 022c 40F30081 		ble	.L735
 678:src/display.c **** 
 7912              		.loc 1 678 12 view .LVU2532
 7913 0230 0621     		movs	r1, #6
 7914              	.L736:
 678:src/display.c **** 
 7915              		.loc 1 678 6 is_stmt 1 view .LVU2533
 7916              	.LVL883:
 678:src/display.c **** 
 7917              		.loc 1 678 12 is_stmt 0 view .LVU2534
 7918 0232 00F8011B 		strb	r1, [r0], #1
ARM GAS  /tmp/ccadPcKu.s 			page 242


 7919              	.LVL884:
 677:src/display.c **** 	    *p2++ = '\006';
 7920              		.loc 1 677 10 is_stmt 1 view .LVU2535
 677:src/display.c **** 	    *p2++ = '\006';
 7921              		.loc 1 677 12 is_stmt 0 view .LVU2536
 7922 0236 009B     		ldr	r3, [sp]
 7923 0238 5A1E     		subs	r2, r3, #1
 677:src/display.c **** 	    *p2++ = '\006';
 7924              		.loc 1 677 10 view .LVU2537
 7925 023a 002B     		cmp	r3, #0
 677:src/display.c **** 	    *p2++ = '\006';
 7926              		.loc 1 677 12 view .LVU2538
 7927 023c 0092     		str	r2, [sp]
 677:src/display.c **** 	    *p2++ = '\006';
 7928              		.loc 1 677 10 view .LVU2539
 7929 023e F8DC     		bgt	.L736
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7930              		.loc 1 680 4 is_stmt 1 view .LVU2540
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7931              		.loc 1 680 11 is_stmt 0 view .LVU2541
 7932 0240 DCF80030 		ldr	r3, [ip]
 7933 0244 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7934              		.loc 1 680 27 is_stmt 1 view .LVU2542
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7935              		.loc 1 680 4 is_stmt 0 view .LVU2543
 7936 0246 002B     		cmp	r3, #0
 7937 0248 10DB     		blt	.L737
 7938              	.L775:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7939              		.loc 1 680 4 view .LVU2544
 7940 024a DFF8BC80 		ldr	r8, .L837+8
 7941              	.LVL885:
 7942              	.L739:
 681:src/display.c **** 	}
 7943              		.loc 1 681 6 is_stmt 1 view .LVU2545
 681:src/display.c **** 	}
 7944              		.loc 1 681 20 is_stmt 0 view .LVU2546
 7945 024e 98F81420 		ldrb	r2, [r8, #20]	@ zero_extendqisi2
 7946 0252 C2F3C202 		ubfx	r2, r2, #3, #3
 681:src/display.c **** 	}
 7947              		.loc 1 681 12 view .LVU2547
 7948 0256 9A42     		cmp	r2, r3
 7949 0258 0CBF     		ite	eq
 7950 025a 7C23     		moveq	r3, #124
 7951 025c 2723     		movne	r3, #39
 7952              	.LVL886:
 681:src/display.c **** 	}
 7953              		.loc 1 681 12 view .LVU2548
 7954 025e 00F8013B 		strb	r3, [r0], #1
 7955              	.LVL887:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7956              		.loc 1 680 35 is_stmt 1 view .LVU2549
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7957              		.loc 1 680 36 is_stmt 0 view .LVU2550
 7958 0262 009B     		ldr	r3, [sp]
 7959 0264 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccadPcKu.s 			page 243


 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7960              		.loc 1 680 4 view .LVU2551
 7961 0266 002B     		cmp	r3, #0
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7962              		.loc 1 680 36 view .LVU2552
 7963 0268 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7964              		.loc 1 680 27 is_stmt 1 view .LVU2553
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7965              		.loc 1 680 4 is_stmt 0 view .LVU2554
 7966 026a F0DA     		bge	.L739
 7967              	.L737:
 683:src/display.c ****       }
 7968              		.loc 1 683 2 is_stmt 1 view .LVU2555
 683:src/display.c ****       }
 7969              		.loc 1 683 5 is_stmt 0 view .LVU2556
 7970 026c 5CBB     		cbnz	r4, .L832
 7971              	.LVL888:
 7972              	.L740:
 906:src/display.c ****       set_status_top(buf2);
 7973              		.loc 1 906 11 is_stmt 1 view .LVU2557
 7974 026e 2846     		mov	r0, r5
 7975 0270 FFF7FEFF 		bl	set_status
 7976              	.LVL889:
 907:src/display.c ****       
 7977              		.loc 1 907 7 view .LVU2558
 7978              	.LBB472:
 7979              	.LBI472:
3424:src/display.c **** 	if (no_status_top) return;
 7980              		.loc 1 3424 19 view .LVU2559
 7981              	.LBB473:
3425:src/display.c **** 	if (State2.runmode) {
 7982              		.loc 1 3425 2 view .LVU2560
3425:src/display.c **** 	if (State2.runmode) {
 7983              		.loc 1 3425 6 is_stmt 0 view .LVU2561
 7984 0274 2C4B     		ldr	r3, .L837+40
3425:src/display.c **** 	if (State2.runmode) {
 7985              		.loc 1 3425 5 view .LVU2562
 7986 0276 B3F90030 		ldrsh	r3, [r3]
 7987 027a 13B9     		cbnz	r3, .L727
 7988 027c 15A8     		add	r0, sp, #84
 7989              	.LVL890:
3425:src/display.c **** 	if (State2.runmode) {
 7990              		.loc 1 3425 5 view .LVU2563
 7991 027e FFF7FEFF 		bl	set_status_top.part.0
 7992              	.LVL891:
 7993              	.L727:
3425:src/display.c **** 	if (State2.runmode) {
 7994              		.loc 1 3425 5 view .LVU2564
 7995              	.LBE473:
 7996              	.LBE472:
 909:src/display.c **** #else
 7997              		.loc 1 909 5 view .LVU2565
 7998 0282 20B0     		add	sp, sp, #128
 7999              		.cfi_remember_state
 8000              		.cfi_def_cfa_offset 24
 8001              		@ sp needed
ARM GAS  /tmp/ccadPcKu.s 			page 244


 8002 0284 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8003              	.LVL892:
 8004              	.L826:
 8005              		.cfi_restore_state
 768:src/display.c **** 	  *p2++ = '\344';
 8006              		.loc 1 768 4 is_stmt 1 view .LVU2566
 769:src/display.c **** 	  *p2++ = shift_char;
 8007              		.loc 1 769 4 view .LVU2567
 768:src/display.c **** 	  *p2++ = '\344';
 8008              		.loc 1 768 10 is_stmt 0 view .LVU2568
 8009 0288 4EF20743 		movw	r3, #58375
 771:src/display.c **** 	}
 8010              		.loc 1 771 6 view .LVU2569
 8011 028c 2749     		ldr	r1, .L837+44
 770:src/display.c **** 	  q = "\024";
 8012              		.loc 1 770 10 view .LVU2570
 8013 028e 8DF85670 		strb	r7, [sp, #86]
 768:src/display.c **** 	  *p2++ = '\344';
 8014              		.loc 1 768 10 view .LVU2571
 8015 0292 ADF85430 		strh	r3, [sp, #84]	@ movhi
 770:src/display.c **** 	  q = "\024";
 8016              		.loc 1 770 4 is_stmt 1 view .LVU2572
 8017              	.LVL893:
 771:src/display.c **** 	}
 8018              		.loc 1 771 4 view .LVU2573
 770:src/display.c **** 	  q = "\024";
 8019              		.loc 1 770 7 is_stmt 0 view .LVU2574
 8020 0296 0DF15700 		add	r0, sp, #87
 8021              	.LVL894:
 8022              	.L751:
 816:src/display.c **** 
 8023              		.loc 1 816 2 is_stmt 1 view .LVU2575
 816:src/display.c **** 
 8024              		.loc 1 816 7 is_stmt 0 view .LVU2576
 8025 029a FFF7FEFF 		bl	scopy
 8026              	.LVL895:
 816:src/display.c **** 
 8027              		.loc 1 816 7 view .LVU2577
 8028 029e 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
 8029              	.LVL896:
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8030              		.loc 1 820 5 view .LVU2578
 8031 02a2 5907     		lsls	r1, r3, #29
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 8032              		.loc 1 600 22 view .LVU2579
 8033 02a4 2F46     		mov	r7, r5
 8034              	.LVL897:
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8035              		.loc 1 820 2 is_stmt 1 view .LVU2580
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8036              		.loc 1 820 5 is_stmt 0 view .LVU2581
 8037 02a6 7FF50FAF 		bpl	.L757
 8038              	.L827:
 821:src/display.c **** 	} // no need to skip y display with arrow here
 8039              		.loc 1 821 4 is_stmt 1 view .LVU2582
 8040 02aa 2149     		ldr	r1, .L837+48
 8041 02ac FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccadPcKu.s 			page 245


 8042              	.LVL898:
 821:src/display.c **** 	} // no need to skip y display with arrow here
 8043              		.loc 1 821 4 is_stmt 0 view .LVU2583
 8044 02b0 0AE7     		b	.L757
 8045              	.LVL899:
 8046              	.L824:
 717:src/display.c **** 	  *p2 = '\015';
 8047              		.loc 1 717 4 is_stmt 1 view .LVU2584
 717:src/display.c **** 	  *p2 = '\015';
 8048              		.loc 1 717 10 is_stmt 0 view .LVU2585
 8049 02b2 2022     		movs	r2, #32
 718:src/display.c **** 	  goto skip;
 8050              		.loc 1 718 8 view .LVU2586
 8051 02b4 0D23     		movs	r3, #13
 717:src/display.c **** 	  *p2 = '\015';
 8052              		.loc 1 717 10 view .LVU2587
 8053 02b6 0270     		strb	r2, [r0]
 718:src/display.c **** 	  goto skip;
 8054              		.loc 1 718 4 is_stmt 1 view .LVU2588
 718:src/display.c **** 	  goto skip;
 8055              		.loc 1 718 8 is_stmt 0 view .LVU2589
 8056 02b8 4370     		strb	r3, [r0, #1]
 719:src/display.c **** 	}
 8057              		.loc 1 719 4 is_stmt 1 view .LVU2590
 8058 02ba D8E7     		b	.L740
 8059              	.LVL900:
 8060              	.L823:
 712:src/display.c **** 	  *p2 = '\024';
 8061              		.loc 1 712 4 view .LVU2591
 712:src/display.c **** 	  *p2 = '\024';
 8062              		.loc 1 712 10 is_stmt 0 view .LVU2592
 8063 02bc 2022     		movs	r2, #32
 713:src/display.c **** 	  goto skip;
 8064              		.loc 1 713 8 view .LVU2593
 8065 02be 1423     		movs	r3, #20
 712:src/display.c **** 	  *p2 = '\024';
 8066              		.loc 1 712 10 view .LVU2594
 8067 02c0 0270     		strb	r2, [r0]
 713:src/display.c **** 	  goto skip;
 8068              		.loc 1 713 4 is_stmt 1 view .LVU2595
 713:src/display.c **** 	  goto skip;
 8069              		.loc 1 713 8 is_stmt 0 view .LVU2596
 8070 02c2 4370     		strb	r3, [r0, #1]
 714:src/display.c **** 	}
 8071              		.loc 1 714 4 is_stmt 1 view .LVU2597
 8072 02c4 D3E7     		b	.L740
 8073              	.LVL901:
 8074              	.L832:
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 8075              		.loc 1 600 22 is_stmt 0 view .LVU2598
 8076 02c6 2F46     		mov	r7, r5
 8077              	.LVL902:
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 8078              		.loc 1 600 22 view .LVU2599
 8079 02c8 03E7     		b	.L731
 8080              	.LVL903:
 8081              	.L752:
ARM GAS  /tmp/ccadPcKu.s 			page 246


 781:src/display.c **** 	    q = "\007\207i";
 8082              		.loc 1 781 4 is_stmt 1 view .LVU2600
 781:src/display.c **** 	    q = "\007\207i";
 8083              		.loc 1 781 8 is_stmt 0 view .LVU2601
 8084 02ca 98F81430 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
 781:src/display.c **** 	    q = "\007\207i";
 8085              		.loc 1 781 7 view .LVU2602
 8086 02ce 13F0C00F 		tst	r3, #192
 8087 02d2 40F0AF80 		bne	.L833
 786:src/display.c **** 	    q = "\007\307<";
 8088              		.loc 1 786 9 is_stmt 1 view .LVU2603
 786:src/display.c **** 	    q = "\007\307<";
 8089              		.loc 1 786 23 is_stmt 0 view .LVU2604
 8090 02d6 104B     		ldr	r3, .L837+24
 8091 02d8 1B68     		ldr	r3, [r3]
 786:src/display.c **** 	    q = "\007\307<";
 8092              		.loc 1 786 12 view .LVU2605
 8093 02da 012B     		cmp	r3, #1
 8094 02dc 00F0B180 		beq	.L834
 791:src/display.c **** 	    q = "\007\307y";
 8095              		.loc 1 791 9 is_stmt 1 view .LVU2606
 791:src/display.c **** 	    q = "\007\307y";
 8096              		.loc 1 791 12 is_stmt 0 view .LVU2607
 8097 02e0 022B     		cmp	r3, #2
 8098 02e2 55D0     		beq	.L835
 797:src/display.c **** 	  q = "\007\207\007";
 8099              		.loc 1 797 9 is_stmt 1 view .LVU2608
 797:src/display.c **** 	  q = "\007\207\007";
 8100              		.loc 1 797 13 is_stmt 0 view .LVU2609
 8101 02e4 FFF7FEFF 		bl	get_trig_mode
 8102              	.LVL904:
 797:src/display.c **** 	  q = "\007\207\007";
 8103              		.loc 1 797 12 view .LVU2610
 8104 02e8 0228     		cmp	r0, #2
 8105 02ea 00F09E80 		beq	.L783
 803:src/display.c **** #else
 8106              		.loc 1 803 4 is_stmt 1 view .LVU2611
 803:src/display.c **** #else
 8107              		.loc 1 803 9 is_stmt 0 view .LVU2612
 8108 02ee FFF7FEFF 		bl	is_dblmode
 8109              	.LVL905:
 601:src/display.c ****       int n;
 8110              		.loc 1 601 23 view .LVU2613
 8111 02f2 104B     		ldr	r3, .L837+52
 8112 02f4 1049     		ldr	r1, .L837+56
 8113 02f6 0028     		cmp	r0, #0
 8114 02f8 18BF     		it	ne
 8115 02fa 1946     		movne	r1, r3
 8116 02fc 15A8     		add	r0, sp, #84
 8117              	.LVL906:
 601:src/display.c ****       int n;
 8118              		.loc 1 601 23 view .LVU2614
 8119 02fe CCE7     		b	.L751
 8120              	.L838:
 8121              		.align	2
 8122              	.L837:
 8123 0300 00000000 		.word	main_ram
ARM GAS  /tmp/ccadPcKu.s 			page 247


 8124 0304 00000000 		.word	.LANCHOR15
 8125 0308 00000000 		.word	StateWhileOn
 8126 030c 10000000 		.word	.LC7
 8127 0310 1C000000 		.word	.LC9
 8128 0314 34000000 		.word	.LC14
 8129 0318 00000000 		.word	RectPolConv
 8130 031c 4C000000 		.word	.LC19
 8131 0320 00000000 		.word	.LANCHOR16
 8132 0324 00000000 		.word	.LC3
 8133 0328 00000000 		.word	.LANCHOR18
 8134 032c 24000000 		.word	.LC10
 8135 0330 44000000 		.word	.LC17
 8136 0334 28000000 		.word	.LC11
 8137 0338 30000000 		.word	.LC13
 8138 033c 00000000 		.word	ShowRegister
 8139 0340 00000000 		.word	IntMaxWindow
 8140              	.LVL907:
 8141              	.L829:
 8142              	.LBB474:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8143              		.loc 1 836 75 discriminator 2 view .LVU2615
 8144 0344 FFF7FEFF 		bl	stack_size
 8145              	.LVL908:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8146              		.loc 1 836 62 discriminator 2 view .LVU2616
 8147 0348 D8F80010 		ldr	r1, [r8]
 8148 034c 6330     		adds	r0, r0, #99
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8149              		.loc 1 836 46 discriminator 2 view .LVU2617
 8150 034e 8842     		cmp	r0, r1
 8151 0350 FFF6CCAE 		blt	.L760
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8152              		.loc 1 836 91 discriminator 4 view .LVU2618
 8153 0354 FFF7FEFF 		bl	get_cmdline
 8154              	.LVL909:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8155              		.loc 1 836 88 discriminator 4 view .LVU2619
 8156 0358 28B1     		cbz	r0, .L763
 837:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8157              		.loc 1 837 7 view .LVU2620
 8158 035a 002C     		cmp	r4, #0
 8159 035c 6ED0     		beq	.L762
 837:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8160              		.loc 1 837 28 discriminator 1 view .LVU2621
 8161 035e 3B4B     		ldr	r3, .L839
 8162 0360 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 837:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8163              		.loc 1 837 10 discriminator 1 view .LVU2622
 8164 0362 5C06     		lsls	r4, r3, #25
 8165              	.LVL910:
 837:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8166              		.loc 1 837 10 discriminator 1 view .LVU2623
 8167 0364 6AD4     		bmi	.L762
 8168              	.L763:
 8169 0366 D8F80010 		ldr	r1, [r8]
 8170 036a BFE6     		b	.L760
 8171              	.LVL911:
ARM GAS  /tmp/ccadPcKu.s 			page 248


 8172              	.L742:
 837:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8173              		.loc 1 837 10 discriminator 1 view .LVU2624
 8174              	.LBE474:
 703:src/display.c **** 	    *p2++ = shift_char;
 8175              		.loc 1 703 30 discriminator 1 view .LVU2625
 8176 036c FFF7FEFF 		bl	is_dblmode
 8177              	.LVL912:
 703:src/display.c **** 	    *p2++ = shift_char;
 8178              		.loc 1 703 26 discriminator 1 view .LVU2626
 8179 0370 0028     		cmp	r0, #0
 8180 0372 3FF467AE 		beq	.L744
 708:src/display.c **** 	  }
 8181              		.loc 1 708 6 is_stmt 1 view .LVU2627
 8182              	.LVL913:
 708:src/display.c **** 	  }
 8183              		.loc 1 708 12 is_stmt 0 view .LVU2628
 8184 0376 4423     		movs	r3, #68
 8185 0378 8DF85430 		strb	r3, [sp, #84]
 708:src/display.c **** 	  }
 8186              		.loc 1 708 9 view .LVU2629
 8187 037c 0DF15500 		add	r0, sp, #85
 8188              	.LVL914:
 708:src/display.c **** 	  }
 8189              		.loc 1 708 9 view .LVU2630
 8190 0380 67E6     		b	.L743
 8191              	.LVL915:
 8192              	.L828:
 8193              	.LBB475:
 832:src/display.c **** 	    goto skip;
 8194              		.loc 1 832 6 is_stmt 1 view .LVU2631
 8195 0382 6520     		movs	r0, #101
 8196 0384 FFF7FEFF 		bl	get_reg_n_int
 8197              	.LVL916:
 8198 0388 3A46     		mov	r2, r7
 8199 038a FFF7FEFF 		bl	set_int_x
 8200              	.LVL917:
 833:src/display.c **** 	  }
 8201              		.loc 1 833 6 view .LVU2632
 8202 038e 6EE7     		b	.L740
 8203              	.LVL918:
 8204              	.L835:
 833:src/display.c **** 	  }
 8205              		.loc 1 833 6 is_stmt 0 view .LVU2633
 8206              	.LBE475:
 792:src/display.c **** 	    p = scopy(p, q);
 8207              		.loc 1 792 6 is_stmt 1 view .LVU2634
 793:src/display.c **** 	    goto no_copy;
 8208              		.loc 1 793 6 view .LVU2635
 793:src/display.c **** 	    goto no_copy;
 8209              		.loc 1 793 10 is_stmt 0 view .LVU2636
 8210 0390 2F49     		ldr	r1, .L839+4
 8211              	.LVL919:
 8212              	.L821:
 788:src/display.c **** 	    goto no_copy;
 8213              		.loc 1 788 10 view .LVU2637
 8214 0392 2846     		mov	r0, r5
ARM GAS  /tmp/ccadPcKu.s 			page 249


 8215 0394 FFF7FEFF 		bl	scopy
 8216              	.LVL920:
 8217 0398 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
 8218 039c 0746     		mov	r7, r0
 8219              	.LVL921:
 789:src/display.c **** 	  }
 8220              		.loc 1 789 6 is_stmt 1 view .LVU2638
 601:src/display.c ****       int n;
 8221              		.loc 1 601 23 is_stmt 0 view .LVU2639
 8222 039e 15A8     		add	r0, sp, #84
 8223              	.LVL922:
 789:src/display.c **** 	  }
 8224              		.loc 1 789 6 view .LVU2640
 8225 03a0 8FE6     		b	.L753
 8226              	.LVL923:
 8227              	.L825:
 722:src/display.c **** 	  if (State2.wascomplex) {
 8228              		.loc 1 722 28 discriminator 1 view .LVU2641
 8229 03a2 137D     		ldrb	r3, [r2, #20]	@ zero_extendqisi2
 722:src/display.c **** 	  if (State2.wascomplex) {
 8230              		.loc 1 722 24 discriminator 1 view .LVU2642
 8231 03a4 13F0C00F 		tst	r3, #192
 8232 03a8 46D1     		bne	.L779
 722:src/display.c **** 	  if (State2.wascomplex) {
 8233              		.loc 1 722 60 discriminator 2 view .LVU2643
 8234 03aa 2A4B     		ldr	r3, .L839+8
 8235 03ac 1B68     		ldr	r3, [r3]
 722:src/display.c **** 	  if (State2.wascomplex) {
 8236              		.loc 1 722 46 discriminator 2 view .LVU2644
 8237 03ae 002B     		cmp	r3, #0
 8238 03b0 3FF45AAE 		beq	.L747
 723:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8239              		.loc 1 723 4 is_stmt 1 view .LVU2645
 726:src/display.c **** 	    if (RectPolConv == 1) {
 8240              		.loc 1 726 9 view .LVU2646
 727:src/display.c **** 	      q = "\007\306<";
 8241              		.loc 1 727 6 view .LVU2647
 731:src/display.c **** 	    }
 8242              		.loc 1 731 10 is_stmt 0 view .LVU2648
 8243 03b4 2849     		ldr	r1, .L839+12
 8244 03b6 294A     		ldr	r2, .L839+16
 8245 03b8 012B     		cmp	r3, #1
 8246 03ba 18BF     		it	ne
 8247 03bc 1146     		movne	r1, r2
 8248              	.L748:
 8249              	.LVL924:
 734:src/display.c **** 
 8250              		.loc 1 734 4 is_stmt 1 view .LVU2649
 734:src/display.c **** 
 8251              		.loc 1 734 8 is_stmt 0 view .LVU2650
 8252 03be 2846     		mov	r0, r5
 8253              	.LVL925:
 734:src/display.c **** 
 8254              		.loc 1 734 8 view .LVU2651
 8255 03c0 FFF7FEFF 		bl	scopy
 8256              	.LVL926:
 734:src/display.c **** 
ARM GAS  /tmp/ccadPcKu.s 			page 250


 8257              		.loc 1 734 8 view .LVU2652
 8258 03c4 0746     		mov	r7, r0
 8259              	.LVL927:
 736:src/display.c **** 	}
 8260              		.loc 1 736 4 is_stmt 1 view .LVU2653
 8261 03c6 84E6     		b	.L731
 8262              	.LVL928:
 8263              	.L830:
 8264              	.LBB476:
 8265              	.LBB470:
 841:src/display.c **** 
 8266              		.loc 1 841 8 view .LVU2654
 841:src/display.c **** 
 8267              		.loc 1 841 44 is_stmt 0 view .LVU2655
 8268 03c8 3368     		ldr	r3, [r6]
 8269 03ca 254C     		ldr	r4, .L839+20
 8270 03cc 93F8E777 		ldrb	r7, [r3, #2023]	@ zero_extendqisi2
 8271              	.LVL929:
 843:src/display.c **** 	      UState.nothousands = 1;
 8272              		.loc 1 843 8 view .LVU2656
 8273 03d0 2A22     		movs	r2, #42
 8274 03d2 2846     		mov	r0, r5
 8275 03d4 FFF7FEFF 		bl	xset
 8276              	.LVL930:
 844:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8277              		.loc 1 844 27 view .LVU2657
 8278 03d8 3268     		ldr	r2, [r6]
 8279 03da 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8280 03de 43F04003 		orr	r3, r3, #64
 8281 03e2 82F8E737 		strb	r3, [r2, #2023]
 845:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8282              		.loc 1 845 8 view .LVU2658
 8283 03e6 2946     		mov	r1, r5
 8284 03e8 01A8     		add	r0, sp, #4
 8285 03ea FFF7FEFF 		bl	set_x_hms
 8286              	.LVL931:
 846:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8287              		.loc 1 846 27 view .LVU2659
 8288 03ee 3368     		ldr	r3, [r6]
 8289 03f0 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 841:src/display.c **** 
 8290              		.loc 1 841 44 view .LVU2660
 8291 03f4 C7F38017 		ubfx	r7, r7, #6, #1
 8292              	.LVL932:
 843:src/display.c **** 	      UState.nothousands = 1;
 8293              		.loc 1 843 8 is_stmt 1 view .LVU2661
 844:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8294              		.loc 1 844 8 view .LVU2662
 845:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8295              		.loc 1 845 8 view .LVU2663
 846:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8296              		.loc 1 846 8 view .LVU2664
 846:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8297              		.loc 1 846 27 is_stmt 0 view .LVU2665
 8298 03f8 67F38612 		bfi	r2, r7, #6, #1
 8299 03fc 83F8E727 		strb	r2, [r3, #2023]
 851:src/display.c **** 	      while (*p) {
ARM GAS  /tmp/ccadPcKu.s 			page 251


 8300              		.loc 1 851 8 is_stmt 1 view .LVU2666
 8301              	.LVL933:
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8302              		.loc 1 852 8 view .LVU2667
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8303              		.loc 1 852 14 view .LVU2668
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8304              		.loc 1 852 15 is_stmt 0 view .LVU2669
 8305 0400 4021     		movs	r1, #64
 846:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8306              		.loc 1 846 27 view .LVU2670
 8307 0402 0522     		movs	r2, #5
 8308 0404 05E0     		b	.L769
 8309              	.LVL934:
 8310              	.L836:
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8311              		.loc 1 852 15 view .LVU2671
 8312 0406 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8313              	.LVL935:
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8314              		.loc 1 852 14 view .LVU2672
 8315 040a 0029     		cmp	r1, #0
 8316 040c 3FF42FAF 		beq	.L740
 8317 0410 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8318              	.LVL936:
 8319              	.L769:
 853:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8320              		.loc 1 853 3 is_stmt 1 view .LVU2673
 8321 0412 2846     		mov	r0, r5
 8322 0414 FFF7FEFF 		bl	replace_char
 8323              	.LVL937:
 854:src/display.c **** 		  goto skip;
 8324              		.loc 1 854 3 view .LVU2674
 854:src/display.c **** 		  goto skip;
 8325              		.loc 1 854 7 is_stmt 0 view .LVU2675
 8326 0418 0121     		movs	r1, #1
 8327 041a 2846     		mov	r0, r5
 8328 041c FFF7FEFF 		bl	pixel_length
 8329              	.LVL938:
 857:src/display.c **** 	      }
 8330              		.loc 1 857 3 is_stmt 1 view .LVU2676
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8331              		.loc 1 852 14 view .LVU2677
 854:src/display.c **** 		  goto skip;
 8332              		.loc 1 854 6 is_stmt 0 view .LVU2678
 8333 0420 2C28     		cmp	r0, #44
 8334 0422 F0DC     		bgt	.L836
 8335 0424 23E7     		b	.L740
 8336              	.LVL939:
 8337              	.L781:
 854:src/display.c **** 		  goto skip;
 8338              		.loc 1 854 6 view .LVU2679
 8339              	.LBE470:
 8340              	.LBE476:
 745:src/display.c **** #endif
 8341              		.loc 1 745 19 view .LVU2680
 8342 0426 0F49     		ldr	r1, .L839+24
ARM GAS  /tmp/ccadPcKu.s 			page 252


 8343 0428 2BE6     		b	.L749
 8344              	.LVL940:
 8345              	.L783:
 798:src/display.c **** 	}
 8346              		.loc 1 798 6 view .LVU2681
 8347 042a 0F49     		ldr	r1, .L839+28
 601:src/display.c ****       int n;
 8348              		.loc 1 601 23 view .LVU2682
 8349 042c 15A8     		add	r0, sp, #84
 8350              	.LVL941:
 601:src/display.c ****       int n;
 8351              		.loc 1 601 23 view .LVU2683
 8352 042e 34E7     		b	.L751
 8353              	.LVL942:
 8354              	.L735:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8355              		.loc 1 680 4 is_stmt 1 view .LVU2684
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8356              		.loc 1 680 11 is_stmt 0 view .LVU2685
 8357 0430 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8358              		.loc 1 680 27 is_stmt 1 view .LVU2686
 8359 0432 0AE7     		b	.L775
 8360              	.LVL943:
 8361              	.L833:
 782:src/display.c **** 	    p = scopy(p, q);
 8362              		.loc 1 782 6 view .LVU2687
 783:src/display.c **** 	    goto no_copy;
 8363              		.loc 1 783 6 view .LVU2688
 783:src/display.c **** 	    goto no_copy;
 8364              		.loc 1 783 10 is_stmt 0 view .LVU2689
 8365 0434 0D49     		ldr	r1, .L839+32
 8366 0436 ACE7     		b	.L821
 8367              	.LVL944:
 8368              	.L779:
 724:src/display.c **** 	  }
 8369              		.loc 1 724 8 view .LVU2690
 8370 0438 0C49     		ldr	r1, .L839+32
 8371 043a C0E7     		b	.L748
 8372              	.LVL945:
 8373              	.L762:
 8374              	.LBB477:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8375              		.loc 1 836 4 discriminator 7 view .LVU2691
 8376 043c D8F80010 		ldr	r1, [r8]
 8377 0440 55E6     		b	.L764
 8378              	.LVL946:
 8379              	.L834:
 836:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8380              		.loc 1 836 4 discriminator 7 view .LVU2692
 8381              	.LBE477:
 787:src/display.c **** 	    p = scopy(p, q);
 8382              		.loc 1 787 6 is_stmt 1 view .LVU2693
 788:src/display.c **** 	    goto no_copy;
 8383              		.loc 1 788 6 view .LVU2694
 788:src/display.c **** 	    goto no_copy;
 8384              		.loc 1 788 10 is_stmt 0 view .LVU2695
ARM GAS  /tmp/ccadPcKu.s 			page 253


 8385 0442 0B49     		ldr	r1, .L839+36
 8386 0444 A5E7     		b	.L821
 8387              	.LVL947:
 8388              	.L785:
 8389              	.LBB478:
 8390              	.LBB471:
 875:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8391              		.loc 1 875 25 view .LVU2696
 8392 0446 3E26     		movs	r6, #62
 8393              	.LVL948:
 875:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8394              		.loc 1 875 25 view .LVU2697
 8395 0448 7EE6     		b	.L771
 8396              	.L840:
 8397 044a 00BF     		.align	2
 8398              	.L839:
 8399 044c 00000000 		.word	StateWhileOn
 8400 0450 40000000 		.word	.LC16
 8401 0454 00000000 		.word	RectPolConv
 8402 0458 04000000 		.word	.LC4
 8403 045c 0C000000 		.word	.LC6
 8404 0460 00000000 		.word	.LANCHOR17
 8405 0464 14000000 		.word	.LC8
 8406 0468 2C000000 		.word	.LC12
 8407 046c 08000000 		.word	.LC5
 8408 0470 3C000000 		.word	.LC15
 8409              	.LBE471:
 8410              	.LBE478:
 8411              		.cfi_endproc
 8412              	.LFE16:
 8414              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8415              		.align	2
 8416              	.LC20:
 8417 0000 0D00     		.ascii	"\015\000"
 8418 0002 0000     		.align	2
 8419              	.LC21:
 8420 0004 060600   		.ascii	"\006\006\000"
 8421 0007 00       		.align	2
 8422              	.LC23:
 8423 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8423      492C2057 
 8423      77414C74 
 8423      4500
 8424 0016 0000     		.align	2
 8425              	.LC24:
 8426 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8426      2055204C 
 8426      20492C20 
 8426      20572041 
 8426      204C2054 
 8427 0032 0000     		.align	2
 8428              	.LC25:
 8429 0034 2000     		.ascii	" \000"
 8430 0036 0000     		.align	2
 8431              	.LC26:
 8432 0038 48595000 		.ascii	"HYP\000"
 8433              		.align	2
ARM GAS  /tmp/ccadPcKu.s 			page 254


 8434              	.LC29:
 8435 003c 7F060600 		.ascii	"\177\006\006\000"
 8436              		.align	2
 8437              	.LC30:
 8438 0040 3020746F 		.ascii	"0 to 255\000"
 8438      20323535 
 8438      00
 8439 0049 000000   		.align	2
 8440              	.LC31:
 8441 004c 46726565 		.ascii	"Free:\000"
 8441      3A00
 8442 0052 0000     		.align	2
 8443              	.LC32:
 8444 0054 202C2046 		.ascii	" , FL. \000"
 8444      4C2E2000 
 8445              		.align	2
 8446              	.LC33:
 8447 005c 52656773 		.ascii	"Regs:\000"
 8447      3A00
 8448 0062 0000     		.align	2
 8449              	.LC34:
 8450 0064 20910606 		.ascii	" \221\006\006+\000"
 8450      2B00
 8451 006a 0000     		.align	2
 8452              	.LC35:
 8453 006c 202C204C 		.ascii	" , Loc. \000"
 8453      6F632E20 
 8453      00
 8454 0075 000000   		.align	2
 8455              	.LC36:
 8456 0078 464C2000 		.ascii	"FL \000"
 8457              		.align	2
 8458              	.LC37:
 8459 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8459      06413A44 
 8459      064C494A 
 8459      4B00
 8460 008a 0000     		.align	2
 8461              	.LC38:
 8462 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8462      302D2E31 
 8462      3500
 8463 0096 0000     		.align	2
 8464              	.LC39:
 8465 0098 43414C4C 		.ascii	"CALLS\000"
 8465      5300
 8466 009e 0000     		.align	2
 8467              	.LC40:
 8468 00a0 52656720 		.ascii	"Reg \000"
 8468      00
 8469 00a5 000000   		.align	2
 8470              	.LC41:
 8471 00a8 00       		.ascii	"\000"
 8472 00a9 000000   		.align	2
 8473              	.LC42:
 8474 00ac 202D2D2D 		.ascii	" ---\000"
 8474      00
ARM GAS  /tmp/ccadPcKu.s 			page 255


 8475 00b1 000000   		.align	2
 8476              	.LC28:
 8477 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8477      093E0A00 
 8478              		.align	2
 8479              	.LC27:
 8480 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8480      41424344 
 8480      4C494A4B 
 8480      00
 8481              		.section	.text.display,"ax",%progbits
 8482              		.align	1
 8483              		.p2align 2,,3
 8484              		.global	display
 8485              		.syntax unified
 8486              		.thumb
 8487              		.thumb_func
 8488              		.fpu fpv4-sp-d16
 8490              	display:
 8491              	.LFB34:
2556:src/display.c **** 	int i, j;
 8492              		.loc 1 2556 26 is_stmt 1 view -0
 8493              		.cfi_startproc
 8494              		@ args = 0, pretend = 0, frame = 160
 8495              		@ frame_needed = 0, uses_anonymous_args = 0
2557:src/display.c **** 	char buf[40], *bp = buf;
 8496              		.loc 1 2557 2 view .LVU2699
2558:src/display.c **** 	const char *p;
 8497              		.loc 1 2558 2 view .LVU2700
2556:src/display.c **** 	int i, j;
 8498              		.loc 1 2556 26 is_stmt 0 view .LVU2701
 8499 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8500              		.cfi_def_cfa_offset 36
 8501              		.cfi_offset 4, -36
 8502              		.cfi_offset 5, -32
 8503              		.cfi_offset 6, -28
 8504              		.cfi_offset 7, -24
 8505              		.cfi_offset 8, -20
 8506              		.cfi_offset 9, -16
 8507              		.cfi_offset 10, -12
 8508              		.cfi_offset 11, -8
 8509              		.cfi_offset 14, -4
2561:src/display.c **** 	int skip = 0;
 8510              		.loc 1 2561 24 view .LVU2702
 8511 0004 B94C     		ldr	r4, .L1140
2566:src/display.c **** 	if (State2.disp_freeze) {
 8512              		.loc 1 2566 16 view .LVU2703
 8513 0006 BA4E     		ldr	r6, .L1140+4
2561:src/display.c **** 	int skip = 0;
 8514              		.loc 1 2561 24 view .LVU2704
 8515 0008 94F80EB0 		ldrb	fp, [r4, #14]	@ zero_extendqisi2
2556:src/display.c **** 	int i, j;
 8516              		.loc 1 2556 26 view .LVU2705
 8517 000c A9B0     		sub	sp, sp, #164
 8518              		.cfi_def_cfa_offset 200
 8519              	.LVL949:
2559:src/display.c **** 	int annuc = 0;
ARM GAS  /tmp/ccadPcKu.s 			page 256


 8520              		.loc 1 2559 2 is_stmt 1 view .LVU2706
2560:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8521              		.loc 1 2560 2 view .LVU2707
2561:src/display.c **** 	int skip = 0;
 8522              		.loc 1 2561 2 view .LVU2708
2562:src/display.c **** 	int x_disp = 0;
 8523              		.loc 1 2562 2 view .LVU2709
2563:src/display.c **** 	const int shift = cur_shift();
 8524              		.loc 1 2563 2 view .LVU2710
2564:src/display.c **** 
 8525              		.loc 1 2564 2 view .LVU2711
2564:src/display.c **** 
 8526              		.loc 1 2564 20 is_stmt 0 view .LVU2712
 8527 000e FFF7FEFF 		bl	cur_shift
 8528              	.LVL950:
2567:src/display.c **** 	  State2.disp_freeze = 0;
 8529              		.loc 1 2567 6 view .LVU2713
 8530 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2566:src/display.c **** 	if (State2.disp_freeze) {
 8531              		.loc 1 2566 16 view .LVU2714
 8532 0014 0022     		movs	r2, #0
 8533              	.LVL951:
2566:src/display.c **** 	if (State2.disp_freeze) {
 8534              		.loc 1 2566 2 is_stmt 1 view .LVU2715
2567:src/display.c **** 	  State2.disp_freeze = 0;
 8535              		.loc 1 2567 5 is_stmt 0 view .LVU2716
 8536 0016 13F01007 		ands	r7, r3, #16
2566:src/display.c **** 	if (State2.disp_freeze) {
 8537              		.loc 1 2566 16 view .LVU2717
 8538 001a 3280     		strh	r2, [r6]	@ movhi
2567:src/display.c **** 	  State2.disp_freeze = 0;
 8539              		.loc 1 2567 2 is_stmt 1 view .LVU2718
2567:src/display.c **** 	  State2.disp_freeze = 0;
 8540              		.loc 1 2567 5 is_stmt 0 view .LVU2719
 8541 001c 40F0EB80 		bne	.L1102
2577:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8542              		.loc 1 2577 2 is_stmt 1 view .LVU2720
2577:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8543              		.loc 1 2577 6 is_stmt 0 view .LVU2721
 8544 0020 DFF8F4A2 		ldr	r10, .L1140+44
 8545 0024 DAF80050 		ldr	r5, [r10]
2577:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8546              		.loc 1 2577 5 view .LVU2722
 8547 0028 002D     		cmp	r5, #0
 8548 002a 7ED1     		bne	.L1103
2594:src/display.c **** 
 8549              		.loc 1 2594 2 is_stmt 1 view .LVU2723
 8550 002c 8146     		mov	r9, r0
 8551 002e FFF7FEFF 		bl	reset_disp
 8552              	.LVL952:
2596:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8553              		.loc 1 2596 2 view .LVU2724
 8554 0032 1EA8     		add	r0, sp, #120
 8555              	.LVL953:
2596:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8556              		.loc 1 2596 2 is_stmt 0 view .LVU2725
 8557 0034 2822     		movs	r2, #40
ARM GAS  /tmp/ccadPcKu.s 			page 257


 8558 0036 2946     		mov	r1, r5
 8559 0038 FFF7FEFF 		bl	xset
 8560              	.LVL954:
2602:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8561              		.loc 1 2602 2 is_stmt 1 view .LVU2726
2602:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8562              		.loc 1 2602 6 is_stmt 0 view .LVU2727
 8563 003c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2602:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8564              		.loc 1 2602 5 view .LVU2728
 8565 003e D806     		lsls	r0, r3, #27
 8566 0040 00F17081 		bmi	.L1104
2614:src/display.c **** 	  set_status_top(S_SURE);
 8567              		.loc 1 2614 9 is_stmt 1 view .LVU2729
2614:src/display.c **** 	  set_status_top(S_SURE);
 8568              		.loc 1 2614 13 is_stmt 0 view .LVU2730
 8569 0044 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2614:src/display.c **** 	  set_status_top(S_SURE);
 8570              		.loc 1 2614 12 view .LVU2731
 8571 0046 5107     		lsls	r1, r2, #29
 8572 0048 00F0DF80 		beq	.L849
2615:src/display.c **** 	  no_status_top = 1;
 8573              		.loc 1 2615 4 is_stmt 1 view .LVU2732
 8574              	.LVL955:
 8575              	.LBB536:
 8576              	.LBI536:
3424:src/display.c **** 	if (no_status_top) return;
 8577              		.loc 1 3424 19 view .LVU2733
 8578              	.LBB537:
3425:src/display.c **** 	if (State2.runmode) {
 8579              		.loc 1 3425 2 view .LVU2734
3425:src/display.c **** 	if (State2.runmode) {
 8580              		.loc 1 3425 5 is_stmt 0 view .LVU2735
 8581 004c B6F90030 		ldrsh	r3, [r6]
 8582 0050 13B9     		cbnz	r3, .L980
 8583 0052 A848     		ldr	r0, .L1140+8
 8584 0054 FFF7FEFF 		bl	set_status_top.part.0
 8585              	.LVL956:
 8586              	.L980:
3425:src/display.c **** 	if (State2.runmode) {
 8587              		.loc 1 3425 5 view .LVU2736
 8588              	.LBE537:
 8589              	.LBE536:
 8590              	.LBB538:
2724:src/display.c **** 	  annuc = State2.runmode;
 8591              		.loc 1 2724 4 is_stmt 1 view .LVU2737
 8592 0058 A74B     		ldr	r3, .L1140+12
2725:src/display.c **** 	} else if (State2.multi) {
 8593              		.loc 1 2725 18 is_stmt 0 view .LVU2738
 8594 005a A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
 8595 005c 0093     		str	r3, [sp]
 8596 005e A74F     		ldr	r7, .L1140+16
2724:src/display.c **** 	  annuc = State2.runmode;
 8597              		.loc 1 2724 18 view .LVU2739
 8598 0060 0123     		movs	r3, #1
2725:src/display.c **** 	} else if (State2.multi) {
 8599              		.loc 1 2725 10 view .LVU2740
ARM GAS  /tmp/ccadPcKu.s 			page 258


 8600 0062 C5F38015 		ubfx	r5, r5, #6, #1
2724:src/display.c **** 	  annuc = State2.runmode;
 8601              		.loc 1 2724 18 view .LVU2741
 8602 0066 3380     		strh	r3, [r6]	@ movhi
 8603              	.L1093:
2725:src/display.c **** 	} else if (State2.multi) {
 8604              		.loc 1 2725 4 is_stmt 1 view .LVU2742
 8605              	.LVL957:
2725:src/display.c **** 	} else if (State2.multi) {
 8606              		.loc 1 2725 4 is_stmt 0 view .LVU2743
 8607              	.LBE538:
2803:src/display.c ****       nostk:
 8608              		.loc 1 2803 2 is_stmt 1 view .LVU2744
 8609 0068 FFF7FEFF 		bl	show_stack
 8610              	.LVL958:
2805:src/display.c **** 	if (!skip) {
 8611              		.loc 1 2805 2 view .LVU2745
 8612 006c FFF7FEFF 		bl	show_flags
 8613              	.LVL959:
2806:src/display.c **** 	  if (State2.runmode) {
 8614              		.loc 1 2806 2 view .LVU2746
 8615              	.L851:
2807:src/display.c **** 	  only_update_x:
 8616              		.loc 1 2807 4 view .LVU2747
2807:src/display.c **** 	  only_update_x:
 8617              		.loc 1 2807 8 is_stmt 0 view .LVU2748
 8618 0070 94F81690 		ldrb	r9, [r4, #22]	@ zero_extendqisi2
2807:src/display.c **** 	  only_update_x:
 8619              		.loc 1 2807 7 view .LVU2749
 8620 0074 19F04009 		ands	r9, r9, #64
 8621 0078 63D1     		bne	.L846
 8622              	.LBB548:
2825:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8623              		.loc 1 2825 6 is_stmt 1 view .LVU2750
2825:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8624              		.loc 1 2825 24 is_stmt 0 view .LVU2751
 8625 007a A14B     		ldr	r3, .L1140+20
2829:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8626              		.loc 1 2829 6 view .LVU2752
 8627 007c DFF89CB2 		ldr	fp, .L1140+48
 8628              	.LVL960:
2825:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8629              		.loc 1 2825 24 view .LVU2753
 8630 0080 1B68     		ldr	r3, [r3]
2825:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8631              		.loc 1 2825 19 view .LVU2754
 8632 0082 B3F8E087 		ldrh	r8, [r3, #2016]
 8633              	.LVL961:
2826:src/display.c **** 	    const int n = nLIB(pc);
 8634              		.loc 1 2826 6 is_stmt 1 view .LVU2755
2826:src/display.c **** 	    const int n = nLIB(pc);
 8635              		.loc 1 2826 25 is_stmt 0 view .LVU2756
 8636 0086 4046     		mov	r0, r8
 8637 0088 FFF7FEFF 		bl	user_pc
 8638              	.LVL962:
2828:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8639              		.loc 1 2828 6 view .LVU2757
ARM GAS  /tmp/ccadPcKu.s 			page 259


 8640 008c 2822     		movs	r2, #40
2826:src/display.c **** 	    const int n = nLIB(pc);
 8641              		.loc 1 2826 25 view .LVU2758
 8642 008e 8446     		mov	ip, r0
2828:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8643              		.loc 1 2828 6 view .LVU2759
 8644 0090 4946     		mov	r1, r9
 8645 0092 1EA8     		add	r0, sp, #120
2827:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8646              		.loc 1 2827 20 view .LVU2760
 8647 0094 4FEA9838 		lsr	r8, r8, #14
 8648              	.LVL963:
2826:src/display.c **** 	    const int n = nLIB(pc);
 8649              		.loc 1 2826 25 view .LVU2761
 8650 0098 E246     		mov	r10, ip
 8651              	.LVL964:
2827:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8652              		.loc 1 2827 6 is_stmt 1 view .LVU2762
2828:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8653              		.loc 1 2828 6 view .LVU2763
 8654 009a FFF7FEFF 		bl	xset
 8655              	.LVL965:
2829:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8656              		.loc 1 2829 6 view .LVU2764
 8657 009e DBF80000 		ldr	r0, [fp]
 8658 00a2 4A46     		mov	r2, r9
 8659 00a4 0121     		movs	r1, #1
 8660 00a6 FFF7FEFF 		bl	set_exp
 8661              	.LVL966:
2830:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8662              		.loc 1 2830 6 view .LVU2765
 8663 00aa B8F1000F 		cmp	r8, #0
 8664 00ae 40F08081 		bne	.L1105
 8665 00b2 9449     		ldr	r1, .L1140+24
 8666 00b4 1EA8     		add	r0, sp, #120
 8667 00b6 FFF7FEFF 		bl	scopy_spc
 8668              	.LVL967:
 8669 00ba 0322     		movs	r2, #3
 8670 00bc 5146     		mov	r1, r10
 8671 00be FFF7FEFF 		bl	num_arg_0
 8672              	.LVL968:
2832:src/display.c **** #ifndef REALBUILD
 8673              		.loc 1 2832 6 view .LVU2766
 8674 00c2 0921     		movs	r1, #9
 8675 00c4 1EA8     		add	r0, sp, #120
 8676 00c6 FFF7FEFF 		bl	set_digits_string
 8677              	.LVL969:
2834:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8678              		.loc 1 2834 6 view .LVU2767
 8679 00ca 4146     		mov	r1, r8
 8680 00cc 2822     		movs	r2, #40
 8681 00ce 1EA8     		add	r0, sp, #120
 8682 00d0 FFF7FEFF 		bl	xset
 8683              	.LVL970:
2835:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8684              		.loc 1 2835 6 view .LVU2768
 8685 00d4 4246     		mov	r2, r8
ARM GAS  /tmp/ccadPcKu.s 			page 260


 8686 00d6 0121     		movs	r1, #1
 8687 00d8 DBF80000 		ldr	r0, [fp]
 8688 00dc FFF7FEFF 		bl	set_exp
 8689              	.LVL971:
2836:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8690              		.loc 1 2836 6 view .LVU2769
 8691 00e0 8949     		ldr	r1, .L1140+28
2830:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8692              		.loc 1 2830 6 is_stmt 0 view .LVU2770
 8693 00e2 4FF00308 		mov	r8, #3
 8694              	.LVL972:
 8695              	.L978:
2836:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8696              		.loc 1 2836 6 discriminator 4 view .LVU2771
 8697 00e6 1EA8     		add	r0, sp, #120
 8698 00e8 FFF7FEFF 		bl	scopy_spc
 8699              	.LVL973:
 8700 00ec 5146     		mov	r1, r10
 8701 00ee 4246     		mov	r2, r8
 8702 00f0 FFF7FEFF 		bl	num_arg_0
 8703              	.LVL974:
 8704              	.LBB549:
2839:src/display.c **** 	      char *l=LastDisplayedNumber;
 8705              		.loc 1 2839 8 is_stmt 1 discriminator 4 view .LVU2772
2840:src/display.c **** 	      *l++=' ';
 8706              		.loc 1 2840 8 discriminator 4 view .LVU2773
2841:src/display.c **** 	      while(*b) {
 8707              		.loc 1 2841 8 discriminator 4 view .LVU2774
2841:src/display.c **** 	      while(*b) {
 8708              		.loc 1 2841 12 is_stmt 0 discriminator 4 view .LVU2775
 8709 00f4 854B     		ldr	r3, .L1140+32
2842:src/display.c **** 		*l++=*b++;
 8710              		.loc 1 2842 14 discriminator 4 view .LVU2776
 8711 00f6 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2841:src/display.c **** 	      while(*b) {
 8712              		.loc 1 2841 12 discriminator 4 view .LVU2777
 8713 00fa 4FF0200C 		mov	ip, #32
 8714 00fe 83F800C0 		strb	ip, [r3]
2842:src/display.c **** 		*l++=*b++;
 8715              		.loc 1 2842 8 is_stmt 1 discriminator 4 view .LVU2778
2842:src/display.c **** 		*l++=*b++;
 8716              		.loc 1 2842 13 discriminator 4 view .LVU2779
 8717 0102 0029     		cmp	r1, #0
 8718 0104 00F0C382 		beq	.L991
 8719 0108 0333     		adds	r3, r3, #3
 8720 010a 1EA8     		add	r0, sp, #120
 8721              	.LVL975:
 8722              	.L972:
2843:src/display.c **** 		*l++=' ';
 8723              		.loc 1 2843 3 view .LVU2780
2843:src/display.c **** 		*l++=' ';
 8724              		.loc 1 2843 7 is_stmt 0 view .LVU2781
 8725 010c 03F8021C 		strb	r1, [r3, #-2]
2844:src/display.c **** 	      }
 8726              		.loc 1 2844 3 is_stmt 1 view .LVU2782
 8727              	.LVL976:
2842:src/display.c **** 		*l++=*b++;
ARM GAS  /tmp/ccadPcKu.s 			page 261


 8728              		.loc 1 2842 14 is_stmt 0 view .LVU2783
 8729 0110 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8730              	.LVL977:
2844:src/display.c **** 	      }
 8731              		.loc 1 2844 7 view .LVU2784
 8732 0114 03F801CC 		strb	ip, [r3, #-1]
2842:src/display.c **** 		*l++=*b++;
 8733              		.loc 1 2842 13 is_stmt 1 view .LVU2785
 8734 0118 1A46     		mov	r2, r3
 8735 011a 0233     		adds	r3, r3, #2
 8736              	.LVL978:
2842:src/display.c **** 		*l++=*b++;
 8737              		.loc 1 2842 13 is_stmt 0 view .LVU2786
 8738 011c 0029     		cmp	r1, #0
 8739 011e F5D1     		bne	.L972
 8740              	.LVL979:
 8741              	.L971:
2846:src/display.c **** 	    }
 8742              		.loc 1 2846 8 is_stmt 1 view .LVU2787
2846:src/display.c **** 	    }
 8743              		.loc 1 2846 10 is_stmt 0 view .LVU2788
 8744 0120 0023     		movs	r3, #0
 8745 0122 DFF8FC91 		ldr	r9, .L1140+52
 8746 0126 1370     		strb	r3, [r2]
 8747              	.LVL980:
2846:src/display.c **** 	    }
 8748              		.loc 1 2846 10 view .LVU2789
 8749              	.LBE549:
 8750              	.LBE548:
2851:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8751              		.loc 1 2851 2 is_stmt 1 view .LVU2790
 8752 0128 22E0     		b	.L1099
 8753              	.LVL981:
 8754              	.L1103:
2584:src/display.c **** 
 8755              		.loc 1 2584 4 view .LVU2791
 8756 012a FFF7FEFF 		bl	wait_for_display
 8757              	.LVL982:
2587:src/display.c **** 	    clr_dot(i);
 8758              		.loc 1 2587 4 view .LVU2792
2587:src/display.c **** 	    clr_dot(i);
 8759              		.loc 1 2587 16 view .LVU2793
 8760              	.L845:
2588:src/display.c **** 	  }
 8761              		.loc 1 2588 6 discriminator 3 view .LVU2794
 8762 012e 3846     		mov	r0, r7
2587:src/display.c **** 	    clr_dot(i);
 8763              		.loc 1 2587 31 is_stmt 0 discriminator 3 view .LVU2795
 8764 0130 0137     		adds	r7, r7, #1
 8765              	.LVL983:
2588:src/display.c **** 	  }
 8766              		.loc 1 2588 6 discriminator 3 view .LVU2796
 8767 0132 FFF7FEFF 		bl	clr_dot
 8768              	.LVL984:
2587:src/display.c **** 	    clr_dot(i);
 8769              		.loc 1 2587 31 is_stmt 1 discriminator 3 view .LVU2797
2587:src/display.c **** 	    clr_dot(i);
ARM GAS  /tmp/ccadPcKu.s 			page 262


 8770              		.loc 1 2587 16 discriminator 3 view .LVU2798
2587:src/display.c **** 	    clr_dot(i);
 8771              		.loc 1 2587 4 is_stmt 0 discriminator 3 view .LVU2799
 8772 0136 832F     		cmp	r7, #131
 8773 0138 F9D1     		bne	.L845
 8774 013a 6F4B     		ldr	r3, .L1140+12
 8775 013c 6F4F     		ldr	r7, .L1140+16
 8776              	.LVL985:
2587:src/display.c **** 	    clr_dot(i);
 8777              		.loc 1 2587 4 discriminator 3 view .LVU2800
 8778 013e 0093     		str	r3, [sp]
2560:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8779              		.loc 1 2560 6 view .LVU2801
 8780 0140 0025     		movs	r5, #0
 8781              	.LVL986:
 8782              	.L846:
2809:src/display.c **** 	    if (p == NULL || cata) {
 8783              		.loc 1 2809 6 is_stmt 1 view .LVU2802
2809:src/display.c **** 	    if (p == NULL || cata) {
 8784              		.loc 1 2809 10 is_stmt 0 view .LVU2803
 8785 0142 FFF7FEFF 		bl	get_cmdline
 8786              	.LVL987:
2810:src/display.c **** 	      if (ShowRegister != -1) {
 8787              		.loc 1 2810 6 is_stmt 1 view .LVU2804
2810:src/display.c **** 	      if (ShowRegister != -1) {
 8788              		.loc 1 2810 9 is_stmt 0 view .LVU2805
 8789 0146 8046     		mov	r8, r0
 8790 0148 10B1     		cbz	r0, .L935
2810:src/display.c **** 	      if (ShowRegister != -1) {
 8791              		.loc 1 2810 20 discriminator 1 view .LVU2806
 8792 014a BBF1000F 		cmp	fp, #0
 8793 014e 7FD0     		beq	.L936
 8794              	.L935:
2811:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8795              		.loc 1 2811 8 is_stmt 1 view .LVU2807
2811:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8796              		.loc 1 2811 25 is_stmt 0 view .LVU2808
 8797 0150 DFF8CC91 		ldr	r9, .L1140+52
 8798 0154 D9F80000 		ldr	r0, [r9]
 8799              	.LVL988:
2811:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8800              		.loc 1 2811 11 view .LVU2809
 8801 0158 421C     		adds	r2, r0, #1
 8802 015a 00F02081 		beq	.L937
2812:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8803              		.loc 1 2812 3 is_stmt 1 view .LVU2810
2812:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8804              		.loc 1 2812 39 is_stmt 0 view .LVU2811
 8805 015e 6428     		cmp	r0, #100
 8806 0160 00F0AF80 		beq	.L1106
 8807              	.L938:
2813:src/display.c **** 	      }
 8808              		.loc 1 2813 3 is_stmt 1 view .LVU2812
 8809 0164 0021     		movs	r1, #0
 8810 0166 FFF7FEFF 		bl	format_reg
 8811              	.LVL989:
2821:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccadPcKu.s 			page 263


 8812              		.loc 1 2821 6 view .LVU2813
2821:src/display.c **** 	      goto finish;
 8813              		.loc 1 2821 9 is_stmt 0 view .LVU2814
 8814 016a DAF80030 		ldr	r3, [r10]
 8815 016e 73BB     		cbnz	r3, .L940
 8816              	.LVL990:
 8817              	.L1099:
2851:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8818              		.loc 1 2851 2 view .LVU2815
 8819 0170 FFF7FEFF 		bl	set_annunciators
 8820              	.LVL991:
2852:src/display.c **** 	  ShowRPN = 0;
 8821              		.loc 1 2852 2 is_stmt 1 view .LVU2816
 8822              	.L848:
2853:src/display.c **** 	  dot(RPN, 0);
 8823              		.loc 1 2853 4 view .LVU2817
2853:src/display.c **** 	  dot(RPN, 0);
 8824              		.loc 1 2853 12 is_stmt 0 view .LVU2818
 8825 0174 DFF898A1 		ldr	r10, .L1140+36
 8826 0178 0023     		movs	r3, #0
 8827              	.LBB551:
 8828              	.LBB552:
 338:src/display.c **** }
 8829              		.loc 1 338 8 view .LVU2819
 8830 017a 8D20     		movs	r0, #141
 8831              	.LBE552:
 8832              	.LBE551:
2853:src/display.c **** 	  dot(RPN, 0);
 8833              		.loc 1 2853 12 view .LVU2820
 8834 017c CAF80030 		str	r3, [r10]
2854:src/display.c **** 	}
 8835              		.loc 1 2854 4 is_stmt 1 view .LVU2821
 8836              	.LVL992:
 8837              	.LBB554:
 8838              	.LBI551:
 336:src/display.c ****   if (on)	set_dot(n);
 8839              		.loc 1 336 6 view .LVU2822
 8840              	.LBB553:
 337:src/display.c ****   else	clr_dot(n);
 8841              		.loc 1 337 3 view .LVU2823
 338:src/display.c **** }
 8842              		.loc 1 338 8 view .LVU2824
 8843 0180 FFF7FEFF 		bl	clr_dot
 8844              	.LVL993:
 8845              	.L973:
 338:src/display.c **** }
 8846              		.loc 1 338 8 is_stmt 0 view .LVU2825
 8847              	.LBE553:
 8848              	.LBE554:
2857:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8849              		.loc 1 2857 2 is_stmt 1 view .LVU2826
2858:src/display.c **** 
 8850              		.loc 1 2858 4 is_stmt 0 view .LVU2827
 8851 0184 DAF80030 		ldr	r3, [r10]
 8852 0188 002B     		cmp	r3, #0
 8853 018a 40F0AC80 		bne	.L992
2857:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
ARM GAS  /tmp/ccadPcKu.s 			page 264


 8854              		.loc 1 2857 31 view .LVU2828
 8855 018e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8856 0190 12F04003 		ands	r3, r2, #64
 8857 0194 08D0     		beq	.L974
2858:src/display.c **** 
 8858              		.loc 1 2858 8 view .LVU2829
 8859 0196 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2858:src/display.c **** 
 8860              		.loc 1 2858 4 view .LVU2830
 8861 0198 1B07     		lsls	r3, r3, #28
 8862 019a 40F1EE80 		bpl	.L994
2858:src/display.c **** 
 8863              		.loc 1 2858 30 discriminator 3 view .LVU2831
 8864 019e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8865 01a0 012B     		cmp	r3, #1
 8866 01a2 01D0     		beq	.L974
2858:src/display.c **** 
 8867              		.loc 1 2858 60 discriminator 5 view .LVU2832
 8868 01a4 C2F38003 		ubfx	r3, r2, #2, #1
 8869              	.L974:
2857:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8870              		.loc 1 2857 19 discriminator 9 view .LVU2833
 8871 01a8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8872 01aa 63F34512 		bfi	r2, r3, #5, #1
 8873 01ae E275     		strb	r2, [r4, #23]
2861:src/display.c **** 	  annunciators();
 8874              		.loc 1 2861 2 is_stmt 1 discriminator 9 view .LVU2834
2861:src/display.c **** 	  annunciators();
 8875              		.loc 1 2861 5 is_stmt 0 discriminator 9 view .LVU2835
 8876 01b0 002D     		cmp	r5, #0
 8877 01b2 00F09280 		beq	.L975
2861:src/display.c **** 	  annunciators();
 8878              		.loc 1 2861 36 discriminator 1 view .LVU2836
 8879 01b6 D3B2     		uxtb	r3, r2
2861:src/display.c **** 	  annunciators();
 8880              		.loc 1 2861 13 discriminator 1 view .LVU2837
 8881 01b8 03F02103 		and	r3, r3, #33
 8882 01bc 202B     		cmp	r3, #32
 8883 01be 00F08C80 		beq	.L975
 8884              	.L976:
2862:src/display.c ****  	State2.hms = 0;
 8885              		.loc 1 2862 4 is_stmt 1 view .LVU2838
 8886 01c2 FFF7FEFF 		bl	annunciators
 8887              	.LVL994:
 8888              	.L977:
2863:src/display.c **** #else
 8889              		.loc 1 2863 3 view .LVU2839
2863:src/display.c **** #else
 8890              		.loc 1 2863 14 is_stmt 0 view .LVU2840
 8891 01c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8892 01c8 6FF30003 		bfc	r3, #0, #1
 8893 01cc E375     		strb	r3, [r4, #23]
 8894              	.L940:
2870:src/display.c **** 	State2.disp_as_alpha = 0;
 8895              		.loc 1 2870 2 is_stmt 1 view .LVU2841
2871:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8896              		.loc 1 2871 2 view .LVU2842
ARM GAS  /tmp/ccadPcKu.s 			page 265


2872:src/display.c **** 	State2.invalid_disp = 0;
 8897              		.loc 1 2872 2 view .LVU2843
2870:src/display.c **** 	State2.disp_as_alpha = 0;
 8898              		.loc 1 2870 17 is_stmt 0 view .LVU2844
 8899 01ce 6369     		ldr	r3, [r4, #20]
2876:src/display.c **** 	State2.disp_small = 0;
 8900              		.loc 1 2876 11 view .LVU2845
 8901 01d0 009A     		ldr	r2, [sp]
2870:src/display.c **** 	State2.disp_as_alpha = 0;
 8902              		.loc 1 2870 17 view .LVU2846
 8903 01d2 23F02173 		bic	r3, r3, #42205184
 8904 01d6 23F48053 		bic	r3, r3, #4096
2872:src/display.c **** 	State2.invalid_disp = 0;
 8905              		.loc 1 2872 15 view .LVU2847
 8906 01da 0025     		movs	r5, #0
2870:src/display.c **** 	State2.disp_as_alpha = 0;
 8907              		.loc 1 2870 17 view .LVU2848
 8908 01dc 6361     		str	r3, [r4, #20]
2874:src/display.c **** 	DispMsg = CNULL;
 8909              		.loc 1 2874 15 view .LVU2849
 8910 01de 6423     		movs	r3, #100
2872:src/display.c **** 	State2.invalid_disp = 0;
 8911              		.loc 1 2872 15 view .LVU2850
 8912 01e0 6574     		strb	r5, [r4, #17]
2873:src/display.c **** 	ShowRegister = regX_idx;
 8913              		.loc 1 2873 2 is_stmt 1 view .LVU2851
2874:src/display.c **** 	DispMsg = CNULL;
 8914              		.loc 1 2874 2 view .LVU2852
2875:src/display.c **** 	DispPlot = 0;
 8915              		.loc 1 2875 10 is_stmt 0 view .LVU2853
 8916 01e2 3D60     		str	r5, [r7]
2876:src/display.c **** 	State2.disp_small = 0;
 8917              		.loc 1 2876 11 view .LVU2854
 8918 01e4 1580     		strh	r5, [r2]	@ movhi
2874:src/display.c **** 	DispMsg = CNULL;
 8919              		.loc 1 2874 15 view .LVU2855
 8920 01e6 C9F80030 		str	r3, [r9]
2875:src/display.c **** 	DispPlot = 0;
 8921              		.loc 1 2875 2 is_stmt 1 view .LVU2856
2876:src/display.c **** 	State2.disp_small = 0;
 8922              		.loc 1 2876 2 view .LVU2857
2877:src/display.c **** 	finish_display();
 8923              		.loc 1 2877 2 view .LVU2858
2878:src/display.c **** 	no_status_top = 0;
 8924              		.loc 1 2878 2 view .LVU2859
 8925 01ea FFF7FEFF 		bl	finish_display
 8926              	.LVL995:
2879:src/display.c **** #ifdef CONSOLE
 8927              		.loc 1 2879 2 view .LVU2860
2879:src/display.c **** #ifdef CONSOLE
 8928              		.loc 1 2879 16 is_stmt 0 view .LVU2861
 8929 01ee 3580     		strh	r5, [r6]	@ movhi
2883:src/display.c **** #else
 8930              		.loc 1 2883 7 view .LVU2862
 8931 01f0 29B0     		add	sp, sp, #164
 8932              		.cfi_remember_state
 8933              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccadPcKu.s 			page 266


 8934              		@ sp needed
 8935 01f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8936              	.LVL996:
 8937              	.L1102:
 8938              		.cfi_restore_state
2568:src/display.c **** 	  State2.disp_temp = 1;
 8939              		.loc 1 2568 4 is_stmt 1 view .LVU2863
2569:src/display.c **** #ifdef CONSOLE
 8940              		.loc 1 2569 4 view .LVU2864
2573:src/display.c **** 	  return;
 8941              		.loc 1 2573 12 is_stmt 0 view .LVU2865
 8942 01f6 4649     		ldr	r1, .L1140+36
2568:src/display.c **** 	  State2.disp_temp = 1;
 8943              		.loc 1 2568 23 view .LVU2866
 8944 01f8 23F03003 		bic	r3, r3, #48
 8945 01fc 43F02003 		orr	r3, r3, #32
 8946 0200 E375     		strb	r3, [r4, #23]
2573:src/display.c **** 	  return;
 8947              		.loc 1 2573 4 is_stmt 1 view .LVU2867
2573:src/display.c **** 	  return;
 8948              		.loc 1 2573 12 is_stmt 0 view .LVU2868
 8949 0202 0A60     		str	r2, [r1]
2574:src/display.c **** 	}
 8950              		.loc 1 2574 4 is_stmt 1 view .LVU2869
2883:src/display.c **** #else
 8951              		.loc 1 2883 7 is_stmt 0 view .LVU2870
 8952 0204 29B0     		add	sp, sp, #164
 8953              		.cfi_remember_state
 8954              		.cfi_def_cfa_offset 36
 8955              		@ sp needed
 8956 0206 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8957              	.LVL997:
 8958              	.L849:
 8959              		.cfi_restore_state
2618:src/display.c **** 	  bp = scopy(bp, "HYP");
 8960              		.loc 1 2618 9 is_stmt 1 view .LVU2871
2618:src/display.c **** 	  bp = scopy(bp, "HYP");
 8961              		.loc 1 2618 12 is_stmt 0 view .LVU2872
 8962 020a 9A06     		lsls	r2, r3, #26
 8963 020c 00F1B780 		bmi	.L1107
2625:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8964              		.loc 1 2625 9 is_stmt 1 view .LVU2873
2625:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8965              		.loc 1 2625 12 is_stmt 0 view .LVU2874
 8966 0210 DF07     		lsls	r7, r3, #31
 8967 0212 00F14A81 		bmi	.L1108
2635:src/display.c **** 	  /* Commands with arguments */
 8968              		.loc 1 2635 9 is_stmt 1 view .LVU2875
2635:src/display.c **** 	  /* Commands with arguments */
 8969              		.loc 1 2635 13 is_stmt 0 view .LVU2876
 8970 0216 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2635:src/display.c **** 	  /* Commands with arguments */
 8971              		.loc 1 2635 12 view .LVU2877
 8972 0218 8806     		lsls	r0, r1, #26
 8973 021a 00F1B681 		bmi	.L1109
2668:src/display.c **** 	  *bp++ = 'x';
 8974              		.loc 1 2668 9 is_stmt 1 view .LVU2878
ARM GAS  /tmp/ccadPcKu.s 			page 267


2668:src/display.c **** 	  *bp++ = 'x';
 8975              		.loc 1 2668 19 is_stmt 0 view .LVU2879
 8976 021e E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2668:src/display.c **** 	  *bp++ = 'x';
 8977              		.loc 1 2668 12 view .LVU2880
 8978 0220 072A     		cmp	r2, #7
 8979 0222 00F01A81 		beq	.L868
2669:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 8980              		.loc 1 2669 4 is_stmt 1 view .LVU2881
 8981              	.LVL998:
2670:src/display.c **** 	  *bp++ = '_';
 8982              		.loc 1 2670 33 is_stmt 0 view .LVU2882
 8983 0226 3B49     		ldr	r1, .L1140+40
 8984              	.LBB555:
 8985              	.LBB556:
3425:src/display.c **** 	if (State2.runmode) {
 8986              		.loc 1 3425 5 view .LVU2883
 8987 0228 B6F90030 		ldrsh	r3, [r6]
 8988              	.LBE556:
 8989              	.LBE555:
2670:src/display.c **** 	  *bp++ = '_';
 8990              		.loc 1 2670 10 view .LVU2884
 8991 022c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8992 022e 8DF87920 		strb	r2, [sp, #121]
2669:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 8993              		.loc 1 2669 10 view .LVU2885
 8994 0232 7821     		movs	r1, #120
2671:src/display.c **** 	  *bp++ = '?';
 8995              		.loc 1 2671 10 view .LVU2886
 8996 0234 43F65F72 		movw	r2, #16223
2669:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 8997              		.loc 1 2669 10 view .LVU2887
 8998 0238 8DF87810 		strb	r1, [sp, #120]
2670:src/display.c **** 	  *bp++ = '_';
 8999              		.loc 1 2670 4 is_stmt 1 view .LVU2888
 9000              	.LVL999:
2671:src/display.c **** 	  *bp++ = '?';
 9001              		.loc 1 2671 4 view .LVU2889
2672:src/display.c **** 	  set_status_top(buf);
 9002              		.loc 1 2672 4 view .LVU2890
2671:src/display.c **** 	  *bp++ = '?';
 9003              		.loc 1 2671 10 is_stmt 0 view .LVU2891
 9004 023c ADF87A20 		strh	r2, [sp, #122]	@ movhi
2673:src/display.c **** 	  no_status_top = 1;
 9005              		.loc 1 2673 4 is_stmt 1 view .LVU2892
 9006              	.LVL1000:
 9007              	.LBB558:
 9008              	.LBI555:
3424:src/display.c **** 	if (no_status_top) return;
 9009              		.loc 1 3424 19 view .LVU2893
 9010              	.LBB557:
3425:src/display.c **** 	if (State2.runmode) {
 9011              		.loc 1 3425 2 view .LVU2894
3425:src/display.c **** 	if (State2.runmode) {
 9012              		.loc 1 3425 5 is_stmt 0 view .LVU2895
 9013 0240 002B     		cmp	r3, #0
 9014 0242 7FF409AF 		bne	.L980
ARM GAS  /tmp/ccadPcKu.s 			page 268


 9015 0246 0DEB0100 		add	r0, sp, r1
 9016 024a FFF7FEFF 		bl	set_status_top.part.0
 9017              	.LVL1001:
 9018 024e 03E7     		b	.L980
 9019              	.LVL1002:
 9020              	.L936:
3425:src/display.c **** 	if (State2.runmode) {
 9021              		.loc 1 3425 5 view .LVU2896
 9022              	.LBE557:
 9023              	.LBE558:
2818:src/display.c **** 	      x_disp = 1;
 9024              		.loc 1 2818 8 is_stmt 1 view .LVU2897
 9025              	.LBB559:
 9026              	.LBI559:
1211:src/display.c ****       int i;
 9027              		.loc 1 1211 17 view .LVU2898
 9028              	.LBB560:
1212:src/display.c ****       int gotdot = -1;
 9029              		.loc 1 1212 7 view .LVU2899
1213:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9030              		.loc 1 1213 7 view .LVU2900
1215:src/display.c **** #endif
 9031              		.loc 1 1215 7 view .LVU2901
1219:src/display.c **** #endif
 9032              		.loc 1 1219 7 view .LVU2902
1222:src/display.c **** 	SET_MANT_SIGN;
 9033              		.loc 1 1222 7 view .LVU2903
1222:src/display.c **** 	SET_MANT_SIGN;
 9034              		.loc 1 1222 10 is_stmt 0 view .LVU2904
 9035 0250 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 9036 0252 2D2A     		cmp	r2, #45
 9037 0254 00F0B481 		beq	.L1110
 9038              	.LVL1003:
 9039              	.L944:
1227:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9040              		.loc 1 1227 7 is_stmt 1 view .LVU2905
1227:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9041              		.loc 1 1227 11 is_stmt 0 view .LVU2906
 9042 0258 294A     		ldr	r2, .L1140+20
 9043 025a 1268     		ldr	r2, [r2]
 9044 025c 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1227:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9045              		.loc 1 1227 10 view .LVU2907
 9046 0260 12F00109 		ands	r9, r2, #1
 9047 0264 00F03381 		beq	.L945
 9048              	.LVL1004:
1228:src/display.c **** 	  set_dig(i, *p);
 9049              		.loc 1 1228 12 is_stmt 1 view .LVU2908
 9050 0268 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
1228:src/display.c **** 	  set_dig(i, *p);
 9051              		.loc 1 1228 8 is_stmt 0 view .LVU2909
 9052 026c 4FF00009 		mov	r9, #0
1228:src/display.c **** 	  set_dig(i, *p);
 9053              		.loc 1 1228 2 view .LVU2910
 9054 0270 41B1     		cbz	r1, .L947
 9055              	.LVL1005:
 9056              	.L946:
ARM GAS  /tmp/ccadPcKu.s 			page 269


1229:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9057              		.loc 1 1229 4 is_stmt 1 view .LVU2911
 9058 0272 4846     		mov	r0, r9
 9059 0274 FFF7FEFF 		bl	set_dig
 9060              	.LVL1006:
1230:src/display.c **** 	}
 9061              		.loc 1 1230 4 view .LVU2912
1228:src/display.c **** 	  set_dig(i, *p);
 9062              		.loc 1 1228 12 is_stmt 0 view .LVU2913
 9063 0278 18F8011F 		ldrb	r1, [r8, #1]!	@ zero_extendqisi2
 9064              	.LVL1007:
1230:src/display.c **** 	}
 9065              		.loc 1 1230 6 view .LVU2914
 9066 027c 09F10909 		add	r9, r9, #9
 9067              	.LVL1008:
1228:src/display.c **** 	  set_dig(i, *p);
 9068              		.loc 1 1228 24 is_stmt 1 view .LVU2915
1228:src/display.c **** 	  set_dig(i, *p);
 9069              		.loc 1 1228 12 view .LVU2916
1228:src/display.c **** 	  set_dig(i, *p);
 9070              		.loc 1 1228 2 is_stmt 0 view .LVU2917
 9071 0280 0029     		cmp	r1, #0
 9072 0282 F6D1     		bne	.L946
 9073              	.LVL1009:
 9074              	.L947:
1232:src/display.c ****       } else {
 9075              		.loc 1 1232 2 is_stmt 1 view .LVU2918
 9076 0284 FFF7FEFF 		bl	carry_overflow
 9077              	.LVL1010:
1232:src/display.c ****       } else {
 9078              		.loc 1 1232 2 is_stmt 0 view .LVU2919
 9079              	.LBE560:
 9080              	.LBE559:
2821:src/display.c **** 	      goto finish;
 9081              		.loc 1 2821 6 is_stmt 1 view .LVU2920
2821:src/display.c **** 	      goto finish;
 9082              		.loc 1 2821 9 is_stmt 0 view .LVU2921
 9083 0288 DAF80030 		ldr	r3, [r10]
 9084 028c 002B     		cmp	r3, #0
 9085 028e 40F0E180 		bne	.L1026
 9086              	.LVL1011:
 9087              	.L1095:
2821:src/display.c **** 	      goto finish;
 9088              		.loc 1 2821 9 view .LVU2922
 9089 0292 DFF88C90 		ldr	r9, .L1140+52
 9090              	.LVL1012:
 9091              	.L939:
2851:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9092              		.loc 1 2851 2 is_stmt 1 view .LVU2923
 9093 0296 FFF7FEFF 		bl	set_annunciators
 9094              	.LVL1013:
2852:src/display.c **** 	  ShowRPN = 0;
 9095              		.loc 1 2852 2 view .LVU2924
2852:src/display.c **** 	  ShowRPN = 0;
 9096              		.loc 1 2852 50 is_stmt 0 view .LVU2925
 9097 029a 3B68     		ldr	r3, [r7]
 9098 029c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccadPcKu.s 			page 270


 9099 029e 7FF469AF 		bne	.L848
2852:src/display.c **** 	  ShowRPN = 0;
 9100              		.loc 1 2852 69 discriminator 3 view .LVU2926
 9101 02a2 009B     		ldr	r3, [sp]
 9102 02a4 B3F90030 		ldrsh	r3, [r3]
 9103 02a8 002B     		cmp	r3, #0
 9104 02aa 7FF463AF 		bne	.L848
2852:src/display.c **** 	  ShowRPN = 0;
 9105              		.loc 1 2852 81 discriminator 4 view .LVU2927
 9106 02ae A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9107 02b0 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9108 02b2 03F00403 		and	r3, r3, #4
 9109 02b6 1343     		orrs	r3, r3, r2
 9110 02b8 7FF45CAF 		bne	.L848
 9111 02bc DFF850A0 		ldr	r10, .L1140+36
 9112 02c0 60E7     		b	.L973
 9113              	.LVL1014:
 9114              	.L1106:
2812:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9115              		.loc 1 2812 42 discriminator 1 view .LVU2928
 9116 02c2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2812:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9117              		.loc 1 2812 39 discriminator 1 view .LVU2929
 9118 02c4 13F00101 		ands	r1, r3, #1
 9119 02c8 7FF44CAF 		bne	.L938
 9120              	.LVL1015:
2813:src/display.c **** 	      }
 9121              		.loc 1 2813 3 is_stmt 1 view .LVU2930
 9122 02cc FFF7FEFF 		bl	format_reg
 9123              	.LVL1016:
2821:src/display.c **** 	      goto finish;
 9124              		.loc 1 2821 6 view .LVU2931
2821:src/display.c **** 	      goto finish;
 9125              		.loc 1 2821 9 is_stmt 0 view .LVU2932
 9126 02d0 DAF80030 		ldr	r3, [r10]
 9127 02d4 002B     		cmp	r3, #0
 9128 02d6 DED0     		beq	.L939
 9129 02d8 79E7     		b	.L940
 9130              	.LVL1017:
 9131              	.L975:
2861:src/display.c **** 	  annunciators();
 9132              		.loc 1 2861 52 discriminator 3 view .LVU2933
 9133 02da 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9134 02dc 13F0C00F 		tst	r3, #192
 9135 02e0 3FF471AF 		beq	.L977
 9136 02e4 6DE7     		b	.L976
 9137              	.L992:
 9138 02e6 0023     		movs	r3, #0
 9139 02e8 5EE7     		b	.L974
 9140              	.L1141:
 9141 02ea 00BF     		.align	2
 9142              	.L1140:
 9143 02ec 00000000 		.word	StateWhileOn
 9144 02f0 00000000 		.word	.LANCHOR18
 9145 02f4 00000000 		.word	.LANCHOR21
 9146 02f8 00000000 		.word	DispPlot
 9147 02fc 00000000 		.word	DispMsg
ARM GAS  /tmp/ccadPcKu.s 			page 271


 9148 0300 00000000 		.word	main_ram
 9149 0304 00000000 		.word	.LANCHOR25
 9150 0308 00000000 		.word	.LANCHOR19
 9151 030c 00000000 		.word	LastDisplayedNumber
 9152 0310 00000000 		.word	ShowRPN
 9153 0314 B4000000 		.word	.LC28
 9154 0318 00000000 		.word	WasDataEntry
 9155 031c 00000000 		.word	ProgFree
 9156 0320 00000000 		.word	ShowRegister
 9157              	.LVL1018:
 9158              	.L1104:
 9159              	.LBB581:
2603:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9160              		.loc 1 2603 4 is_stmt 1 view .LVU2934
2603:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9161              		.loc 1 2603 9 is_stmt 0 view .LVU2935
 9162 0324 C14B     		ldr	r3, .L1142
 9163 0326 CDF85E50 		str	r5, [sp, #94]	@ unaligned
2604:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9164              		.loc 1 2604 4 is_stmt 1 view .LVU2936
2603:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9165              		.loc 1 2603 9 is_stmt 0 view .LVU2937
 9166 032a 93E80700 		ldm	r3, {r0, r1, r2}
 9167 032e 15AB     		add	r3, sp, #84
 9168 0330 03C3     		stmia	r3!, {r0, r1}
2604:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9169              		.loc 1 2604 4 view .LVU2938
 9170 0332 2946     		mov	r1, r5
 9171 0334 BE48     		ldr	r0, .L1142+4
2603:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9172              		.loc 1 2603 9 view .LVU2939
 9173 0336 1A80     		strh	r2, [r3]	@ movhi
2604:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9174              		.loc 1 2604 4 view .LVU2940
 9175 0338 FFF7FEFF 		bl	set_digits_string
 9176              	.LVL1019:
2605:src/display.c **** #ifndef REALBUILD
 9177              		.loc 1 2605 4 is_stmt 1 view .LVU2941
 9178              	.LBB582:
 9179              	.LBI582:
 404:src/display.c ****   if (res) *res++ = ch;
 9180              		.loc 1 404 14 view .LVU2942
 9181              	.LBB583:
 405:src/display.c ****   else	set_dig(base, ch);
 9182              		.loc 1 405 3 view .LVU2943
 406:src/display.c ****   return res;
 9183              		.loc 1 406 8 view .LVU2944
 9184 033c 7221     		movs	r1, #114
 9185 033e 6C20     		movs	r0, #108
 9186 0340 FFF7FEFF 		bl	set_dig
 9187              	.LVL1020:
 407:src/display.c **** }
 9188              		.loc 1 407 3 view .LVU2945
 407:src/display.c **** }
 9189              		.loc 1 407 3 is_stmt 0 view .LVU2946
 9190              	.LBE583:
 9191              	.LBE582:
ARM GAS  /tmp/ccadPcKu.s 			page 272


2607:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9192              		.loc 1 2607 4 is_stmt 1 view .LVU2947
 9193 0344 BB49     		ldr	r1, .L1142+8
 9194 0346 BC48     		ldr	r0, .L1142+12
 9195 0348 BC4F     		ldr	r7, .L1142+16
 9196 034a DFF83093 		ldr	r9, .L1142+80
 9197 034e FFF7FEFF 		bl	scopy
 9198              	.LVL1021:
2608:src/display.c **** #endif
 9199              		.loc 1 2608 4 view .LVU2948
 9200 0352 BB49     		ldr	r1, .L1142+20
 9201 0354 BB48     		ldr	r0, .L1142+24
 9202 0356 FFF7FEFF 		bl	scopy
 9203              	.LVL1022:
2610:src/display.c **** 	  set_status(vers);
 9204              		.loc 1 2610 4 view .LVU2949
 9205 035a BB49     		ldr	r1, .L1142+28
 9206 035c 0422     		movs	r2, #4
 9207 035e 0DF15D00 		add	r0, sp, #93
 9208 0362 FFF7FEFF 		bl	xcopy
 9209              	.LVL1023:
2611:src/display.c **** 	  skip = 1;
 9210              		.loc 1 2611 4 view .LVU2950
 9211 0366 15A8     		add	r0, sp, #84
 9212 0368 FFF7FEFF 		bl	set_status
 9213              	.LVL1024:
2612:src/display.c **** 	  goto nostk;
 9214              		.loc 1 2612 4 view .LVU2951
2613:src/display.c **** 	} else if (State2.confirm) {
 9215              		.loc 1 2613 4 view .LVU2952
2613:src/display.c **** 	} else if (State2.confirm) {
 9216              		.loc 1 2613 4 is_stmt 0 view .LVU2953
 9217              	.LBE581:
2805:src/display.c **** 	if (!skip) {
 9218              		.loc 1 2805 2 is_stmt 1 view .LVU2954
 9219 036c B74B     		ldr	r3, .L1142+32
 9220 036e 0093     		str	r3, [sp]
 9221 0370 FFF7FEFF 		bl	show_flags
 9222              	.LVL1025:
2806:src/display.c **** 	  if (State2.runmode) {
 9223              		.loc 1 2806 2 view .LVU2955
2851:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9224              		.loc 1 2851 2 view .LVU2956
 9225 0374 FFF7FEFF 		bl	set_annunciators
 9226              	.LVL1026:
2852:src/display.c **** 	  ShowRPN = 0;
 9227              		.loc 1 2852 2 view .LVU2957
 9228 0378 FCE6     		b	.L848
 9229              	.LVL1027:
 9230              	.L994:
2852:src/display.c **** 	  ShowRPN = 0;
 9231              		.loc 1 2852 2 is_stmt 0 view .LVU2958
 9232 037a 0123     		movs	r3, #1
 9233 037c 14E7     		b	.L974
 9234              	.LVL1028:
 9235              	.L1107:
2619:src/display.c **** 	  if (! State2.dot)
ARM GAS  /tmp/ccadPcKu.s 			page 273


 9236              		.loc 1 2619 4 is_stmt 1 view .LVU2959
2619:src/display.c **** 	  if (! State2.dot)
 9237              		.loc 1 2619 9 is_stmt 0 view .LVU2960
 9238 037e B449     		ldr	r1, .L1142+36
 9239 0380 1EA8     		add	r0, sp, #120
 9240              	.LVL1029:
2619:src/display.c **** 	  if (! State2.dot)
 9241              		.loc 1 2619 9 view .LVU2961
 9242 0382 FFF7FEFF 		bl	scopy
 9243              	.LVL1030:
2620:src/display.c **** 	    *bp++ = '\235';
 9244              		.loc 1 2620 8 view .LVU2962
 9245 0386 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9246              	.LVL1031:
2620:src/display.c **** 	    *bp++ = '\235';
 9247              		.loc 1 2620 4 is_stmt 1 view .LVU2963
2620:src/display.c **** 	    *bp++ = '\235';
 9248              		.loc 1 2620 7 is_stmt 0 view .LVU2964
 9249 0388 5B06     		lsls	r3, r3, #25
 9250 038a 35D5     		bpl	.L1111
 9251              	.LVL1032:
 9252              	.L884:
2733:src/display.c **** 	  no_status_top = 1;
 9253              		.loc 1 2733 4 is_stmt 1 view .LVU2965
 9254              	.LBB584:
 9255              	.LBI584:
3424:src/display.c **** 	if (no_status_top) return;
 9256              		.loc 1 3424 19 view .LVU2966
 9257              	.LBB585:
3425:src/display.c **** 	if (State2.runmode) {
 9258              		.loc 1 3425 2 view .LVU2967
3425:src/display.c **** 	if (State2.runmode) {
 9259              		.loc 1 3425 5 is_stmt 0 view .LVU2968
 9260 038c B6F90030 		ldrsh	r3, [r6]
 9261 0390 002B     		cmp	r3, #0
 9262 0392 7FF461AE 		bne	.L980
 9263              	.LVL1033:
 9264              	.L1101:
3425:src/display.c **** 	if (State2.runmode) {
 9265              		.loc 1 3425 5 view .LVU2969
 9266 0396 1EA8     		add	r0, sp, #120
 9267 0398 FFF7FEFF 		bl	set_status_top.part.0
 9268              	.LVL1034:
 9269 039c 5CE6     		b	.L980
 9270              	.LVL1035:
 9271              	.L937:
3425:src/display.c **** 	if (State2.runmode) {
 9272              		.loc 1 3425 5 view .LVU2970
 9273              	.LBE585:
 9274              	.LBE584:
2816:src/display.c **** 	    } else {
 9275              		.loc 1 2816 3 is_stmt 1 view .LVU2971
 9276 039e AD48     		ldr	r0, .L1142+40
 9277 03a0 2421     		movs	r1, #36
 9278 03a2 FFF7FEFF 		bl	set_digits_string
 9279              	.LVL1036:
2821:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccadPcKu.s 			page 274


 9280              		.loc 1 2821 6 view .LVU2972
2821:src/display.c **** 	      goto finish;
 9281              		.loc 1 2821 9 is_stmt 0 view .LVU2973
 9282 03a6 DAF80030 		ldr	r3, [r10]
 9283 03aa 002B     		cmp	r3, #0
 9284 03ac 3FF4E0AE 		beq	.L1099
 9285 03b0 0DE7     		b	.L940
 9286              	.LVL1037:
 9287              	.L1105:
 9288              	.LBB586:
2830:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9289              		.loc 1 2830 6 discriminator 1 view .LVU2974
 9290 03b2 A949     		ldr	r1, .L1142+44
 9291 03b4 08EB8803 		add	r3, r8, r8, lsl #2
 9292 03b8 1944     		add	r1, r1, r3
 9293 03ba 1EA8     		add	r0, sp, #120
 9294 03bc 0193     		str	r3, [sp, #4]
 9295 03be FFF7FEFF 		bl	scopy_spc
 9296              	.LVL1038:
2831:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9297              		.loc 1 2831 21 discriminator 1 view .LVU2975
 9298 03c2 08F00103 		and	r3, r8, #1
2830:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9299              		.loc 1 2830 6 discriminator 1 view .LVU2976
 9300 03c6 03F10308 		add	r8, r3, #3
 9301              	.LVL1039:
2830:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9302              		.loc 1 2830 6 discriminator 1 view .LVU2977
 9303 03ca 4246     		mov	r2, r8
 9304 03cc 5146     		mov	r1, r10
 9305 03ce FFF7FEFF 		bl	num_arg_0
 9306              	.LVL1040:
2832:src/display.c **** #ifndef REALBUILD
 9307              		.loc 1 2832 6 is_stmt 1 discriminator 1 view .LVU2978
 9308 03d2 0921     		movs	r1, #9
 9309 03d4 1EA8     		add	r0, sp, #120
 9310 03d6 FFF7FEFF 		bl	set_digits_string
 9311              	.LVL1041:
2834:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9312              		.loc 1 2834 6 discriminator 1 view .LVU2979
 9313 03da 2822     		movs	r2, #40
 9314 03dc 4946     		mov	r1, r9
 9315 03de 1EA8     		add	r0, sp, #120
 9316 03e0 FFF7FEFF 		bl	xset
 9317              	.LVL1042:
2835:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9318              		.loc 1 2835 6 discriminator 1 view .LVU2980
 9319 03e4 0121     		movs	r1, #1
 9320 03e6 DBF80000 		ldr	r0, [fp]
 9321 03ea 4A46     		mov	r2, r9
 9322 03ec FFF7FEFF 		bl	set_exp
 9323              	.LVL1043:
2836:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9324              		.loc 1 2836 6 discriminator 1 view .LVU2981
 9325 03f0 9A49     		ldr	r1, .L1142+48
 9326 03f2 019B     		ldr	r3, [sp, #4]
 9327 03f4 1944     		add	r1, r1, r3
ARM GAS  /tmp/ccadPcKu.s 			page 275


 9328 03f6 76E6     		b	.L978
 9329              	.LVL1044:
 9330              	.L1111:
2836:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9331              		.loc 1 2836 6 is_stmt 0 discriminator 1 view .LVU2982
 9332              	.LBE586:
2621:src/display.c **** 	  set_status_top(buf);
 9333              		.loc 1 2621 6 is_stmt 1 view .LVU2983
2621:src/display.c **** 	  set_status_top(buf);
 9334              		.loc 1 2621 12 is_stmt 0 view .LVU2984
 9335 03f8 9D23     		movs	r3, #157
 9336 03fa 0370     		strb	r3, [r0]
 9337 03fc C6E7     		b	.L884
 9338              	.LVL1045:
 9339              	.L1096:
 9340              	.LBB587:
 9341              	.LBB575:
1325:src/display.c **** 	    gotdot = i;
 9342              		.loc 1 1325 4 is_stmt 1 view .LVU2985
 9343 03fe 2A46     		mov	r2, r5
1325:src/display.c **** 	    gotdot = i;
 9344              		.loc 1 1325 7 is_stmt 0 view .LVU2986
 9345 0400 32EA2202 		bics	r2, r2, r2, asr #32
 9346 0404 28BF     		it	cs
 9347 0406 5A46     		movcs	r2, fp
 9348              	.LVL1046:
1327:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9349              		.loc 1 1327 4 is_stmt 1 view .LVU2987
1328:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9350              		.loc 1 1328 6 view .LVU2988
1328:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9351              		.loc 1 1328 13 is_stmt 0 view .LVU2989
 9352 0408 A2F11B0B 		sub	fp, r2, #27
 9353              	.LVL1047:
1329:src/display.c **** 	      break;
 9354              		.loc 1 1329 6 is_stmt 1 view .LVU2990
 9355 040c 4346     		mov	r3, r8
1329:src/display.c **** 	      break;
 9356              		.loc 1 1329 9 is_stmt 0 view .LVU2991
 9357 040e BBF1000F 		cmp	fp, #0
 9358 0412 B846     		mov	r8, r7
 9359 0414 019D     		ldr	r5, [sp, #4]
 9360 0416 1F46     		mov	r7, r3
 9361              	.LVL1048:
1329:src/display.c **** 	      break;
 9362              		.loc 1 1329 9 view .LVU2992
 9363 0418 12DD     		ble	.L949
 9364 041a 4B46     		mov	r3, r9
 9365 041c A946     		mov	r9, r5
 9366 041e 1D46     		mov	r5, r3
 9367              	.L965:
1332:src/display.c **** 	      break;
 9368              		.loc 1 1332 6 is_stmt 1 view .LVU2993
1335:src/display.c **** 	  }
 9369              		.loc 1 1335 6 view .LVU2994
 9370              	.LBB561:
 9371              	.LBB562:
ARM GAS  /tmp/ccadPcKu.s 			page 276


 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9372              		.loc 1 367 3 view .LVU2995
 9373 0420 5846     		mov	r0, fp
 9374              	.LBE562:
 9375              	.LBE561:
1332:src/display.c **** 	      break;
 9376              		.loc 1 1332 9 is_stmt 0 view .LVU2996
 9377 0422 15B1     		cbz	r5, .L966
 9378              	.LVL1049:
1332:src/display.c **** 	      break;
 9379              		.loc 1 1332 27 view .LVU2997
 9380 0424 BBF1090F 		cmp	fp, #9
 9381 0428 09D0     		beq	.L1091
 9382              	.L966:
1335:src/display.c **** 	  }
 9383              		.loc 1 1335 6 view .LVU2998
 9384 042a 8D4B     		ldr	r3, .L1142+52
 9385 042c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9386              	.LVL1050:
 9387              	.LBB564:
 9388              	.LBI561:
 364:src/display.c ****   if (sep == SEP_NONE)
 9389              		.loc 1 364 14 is_stmt 1 view .LVU2999
 9390              	.LBB563:
 365:src/display.c ****     return res;
 9391              		.loc 1 365 3 view .LVU3000
 365:src/display.c ****     return res;
 9392              		.loc 1 365 6 is_stmt 0 view .LVU3001
 9393 042e 09B1     		cbz	r1, .L967
 9394 0430 FFF7FEFF 		bl	set_separator.part.0
 9395              	.LVL1051:
 9396              	.L967:
 365:src/display.c ****     return res;
 9397              		.loc 1 365 6 view .LVU3002
 9398              	.LBE563:
 9399              	.LBE564:
1327:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9400              		.loc 1 1327 4 is_stmt 1 view .LVU3003
1328:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9401              		.loc 1 1328 6 view .LVU3004
1328:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9402              		.loc 1 1328 13 is_stmt 0 view .LVU3005
 9403 0434 ABF11B0B 		sub	fp, fp, #27
 9404              	.LVL1052:
1329:src/display.c **** 	      break;
 9405              		.loc 1 1329 6 is_stmt 1 view .LVU3006
1329:src/display.c **** 	      break;
 9406              		.loc 1 1329 9 is_stmt 0 view .LVU3007
 9407 0438 BBF1000F 		cmp	fp, #0
 9408 043c F0DC     		bgt	.L965
 9409              	.L1091:
1329:src/display.c **** 	      break;
 9410              		.loc 1 1329 9 view .LVU3008
 9411 043e 4D46     		mov	r5, r9
 9412              	.LVL1053:
 9413              	.L949:
1353:src/display.c **** 	    p++;
ARM GAS  /tmp/ccadPcKu.s 			page 277


 9414              		.loc 1 1353 4 is_stmt 1 view .LVU3009
1353:src/display.c **** 	    p++;
 9415              		.loc 1 1353 7 is_stmt 0 view .LVU3010
 9416 0440 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
 9417 0444 452A     		cmp	r2, #69
 9418 0446 00F08081 		beq	.L1112
 9419              	.L968:
 9420              	.LVL1054:
1353:src/display.c **** 	    p++;
 9421              		.loc 1 1353 7 view .LVU3011
 9422              	.LBE575:
 9423              	.LBE587:
2821:src/display.c **** 	      goto finish;
 9424              		.loc 1 2821 6 is_stmt 1 view .LVU3012
2821:src/display.c **** 	      goto finish;
 9425              		.loc 1 2821 9 is_stmt 0 view .LVU3013
 9426 044a DAF80030 		ldr	r3, [r10]
 9427 044e 002B     		cmp	r3, #0
 9428 0450 3FF41FAF 		beq	.L1095
 9429              	.L1026:
 9430 0454 DFF82492 		ldr	r9, .L1142+80
 9431 0458 B9E6     		b	.L940
 9432              	.LVL1055:
 9433              	.L868:
2676:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9434              		.loc 1 2676 9 is_stmt 1 view .LVU3014
2676:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9435              		.loc 1 2676 12 is_stmt 0 view .LVU3015
 9436 045a BBF1000F 		cmp	fp, #0
 9437 045e 40F01881 		bne	.L1113
2726:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9438              		.loc 1 2726 9 is_stmt 1 view .LVU3016
2726:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9439              		.loc 1 2726 12 is_stmt 0 view .LVU3017
 9440 0462 1B07     		lsls	r3, r3, #28
 9441 0464 00F18981 		bmi	.L1114
2736:src/display.c **** 	  show_status();
 9442              		.loc 1 2736 9 is_stmt 1 view .LVU3018
2736:src/display.c **** 	  show_status();
 9443              		.loc 1 2736 19 is_stmt 0 view .LVU3019
 9444 0468 94F80C80 		ldrb	r8, [r4, #12]	@ zero_extendqisi2
2736:src/display.c **** 	  show_status();
 9445              		.loc 1 2736 12 view .LVU3020
 9446 046c B8F1000F 		cmp	r8, #0
 9447 0470 40F0E881 		bne	.L1115
2739:src/display.c **** 	  show_label();
 9448              		.loc 1 2739 9 is_stmt 1 view .LVU3021
2739:src/display.c **** 	  show_label();
 9449              		.loc 1 2739 13 is_stmt 0 view .LVU3022
 9450 0474 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2739:src/display.c **** 	  show_label();
 9451              		.loc 1 2739 12 view .LVU3023
 9452 0476 5F07     		lsls	r7, r3, #29
 9453 0478 00F1AC81 		bmi	.L1116
2742:src/display.c **** 	  show_registers();
 9454              		.loc 1 2742 9 is_stmt 1 view .LVU3024
2742:src/display.c **** 	  show_registers();
ARM GAS  /tmp/ccadPcKu.s 			page 278


 9455              		.loc 1 2742 12 is_stmt 0 view .LVU3025
 9456 047c 1807     		lsls	r0, r3, #28
 9457 047e 00F15982 		bmi	.L1117
2752:src/display.c **** 	  if (DispMsg) { 
 9458              		.loc 1 2752 9 is_stmt 1 view .LVU3026
2752:src/display.c **** 	  if (DispMsg) { 
 9459              		.loc 1 2752 12 is_stmt 0 view .LVU3027
 9460 0482 4806     		lsls	r0, r1, #25
 9461 0484 40F1EE82 		bpl	.L919
2753:src/display.c **** 	    set_status(DispMsg);
 9462              		.loc 1 2753 4 is_stmt 1 view .LVU3028
2753:src/display.c **** 	    set_status(DispMsg);
 9463              		.loc 1 2753 8 is_stmt 0 view .LVU3029
 9464 0488 6C4F     		ldr	r7, .L1142+16
 9465 048a D7F80080 		ldr	r8, [r7]
2753:src/display.c **** 	    set_status(DispMsg);
 9466              		.loc 1 2753 7 view .LVU3030
 9467 048e B8F1000F 		cmp	r8, #0
 9468 0492 00F01283 		beq	.L920
2754:src/display.c **** 	  } else if (DispPlot) {
 9469              		.loc 1 2754 6 is_stmt 1 view .LVU3031
 9470 0496 4046     		mov	r0, r8
 9471 0498 FFF7FEFF 		bl	set_status
 9472              	.LVL1056:
2803:src/display.c ****       nostk:
 9473              		.loc 1 2803 2 view .LVU3032
 9474 049c 6B4B     		ldr	r3, .L1142+32
 9475 049e 0093     		str	r3, [sp]
 9476 04a0 FFF7FEFF 		bl	show_stack
 9477              	.LVL1057:
2805:src/display.c **** 	if (!skip) {
 9478              		.loc 1 2805 2 view .LVU3033
 9479 04a4 FFF7FEFF 		bl	show_flags
 9480              	.LVL1058:
2806:src/display.c **** 	  if (State2.runmode) {
 9481              		.loc 1 2806 2 view .LVU3034
 9482 04a8 E2E5     		b	.L851
 9483              	.L1108:
2627:src/display.c **** 	  if (State2.numdigit > 0)
 9484              		.loc 1 2627 4 view .LVU3035
2627:src/display.c **** 	  if (State2.numdigit > 0)
 9485              		.loc 1 2627 9 is_stmt 0 view .LVU3036
 9486 04aa 2E22     		movs	r2, #46
 9487 04ac 6D49     		ldr	r1, .L1142+56
 9488 04ae 1EA8     		add	r0, sp, #120
 9489              	.LVL1059:
2627:src/display.c **** 	  if (State2.numdigit > 0)
 9490              		.loc 1 2627 9 view .LVU3037
 9491 04b0 FFF7FEFF 		bl	scopy_char
 9492              	.LVL1060:
2628:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9493              		.loc 1 2628 14 view .LVU3038
 9494 04b4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2627:src/display.c **** 	  if (State2.numdigit > 0)
 9495              		.loc 1 2627 9 view .LVU3039
 9496 04b6 0346     		mov	r3, r0
 9497              	.LVL1061:
ARM GAS  /tmp/ccadPcKu.s 			page 279


2628:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9498              		.loc 1 2628 4 is_stmt 1 view .LVU3040
2628:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9499              		.loc 1 2628 7 is_stmt 0 view .LVU3041
 9500 04b8 002A     		cmp	r2, #0
 9501 04ba 40F09280 		bne	.L1118
 9502              	.L856:
2631:src/display.c **** 	  set_status_top(buf);
 9503              		.loc 1 2631 4 is_stmt 1 view .LVU3042
 9504              	.LVL1062:
2631:src/display.c **** 	  set_status_top(buf);
 9505              		.loc 1 2631 10 is_stmt 0 view .LVU3043
 9506 04be 5F22     		movs	r2, #95
 9507 04c0 1A70     		strb	r2, [r3]
2632:src/display.c **** 	  no_status_top = 1;
 9508              		.loc 1 2632 4 is_stmt 1 view .LVU3044
 9509              	.LVL1063:
 9510              	.LBB588:
 9511              	.LBI588:
3424:src/display.c **** 	if (no_status_top) return;
 9512              		.loc 1 3424 19 view .LVU3045
 9513              	.LBB589:
3425:src/display.c **** 	if (State2.runmode) {
 9514              		.loc 1 3425 2 view .LVU3046
3425:src/display.c **** 	if (State2.runmode) {
 9515              		.loc 1 3425 5 is_stmt 0 view .LVU3047
 9516 04c2 B6F90030 		ldrsh	r3, [r6]
 9517 04c6 002B     		cmp	r3, #0
 9518 04c8 3FF465AF 		beq	.L1101
3425:src/display.c **** 	if (State2.runmode) {
 9519              		.loc 1 3425 5 view .LVU3048
 9520 04cc C4E5     		b	.L980
 9521              	.LVL1064:
 9522              	.L945:
3425:src/display.c **** 	if (State2.runmode) {
 9523              		.loc 1 3425 5 view .LVU3049
 9524              	.LBE589:
 9525              	.LBE588:
 9526              	.LBB590:
 9527              	.LBB576:
1234:src/display.c **** 
 9528              		.loc 1 1234 2 is_stmt 1 view .LVU3050
 9529 04ce FFF7FEFF 		bl	set_separator_decimal_modes
 9530              	.LVL1065:
1236:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9531              		.loc 1 1236 2 view .LVU3051
1238:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9532              		.loc 1 1238 2 view .LVU3052
1238:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9533              		.loc 1 1238 5 is_stmt 0 view .LVU3053
 9534 04d2 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9535              	.LBB565:
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9536              		.loc 1 1245 15 view .LVU3054
 9537 04d4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 9538              	.LBE565:
1238:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/ccadPcKu.s 			page 280


 9539              		.loc 1 1238 5 view .LVU3055
 9540 04d8 012A     		cmp	r2, #1
 9541 04da 40F2D180 		bls	.L948
 9542              	.LVL1066:
 9543              	.LBB566:
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9544              		.loc 1 1245 14 is_stmt 1 view .LVU3056
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9545              		.loc 1 1245 4 is_stmt 0 view .LVU3057
 9546 04de 002B     		cmp	r3, #0
 9547 04e0 AED0     		beq	.L949
 9548 04e2 08F10102 		add	r2, r8, #1
 9549 04e6 1846     		mov	r0, r3
 9550              	.LBE566:
1213:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9551              		.loc 1 1213 11 view .LVU3058
 9552 04e8 4FF0FF39 		mov	r9, #-1
 9553 04ec 6FEA080E 		mvn	lr, r8
 9554              	.LVL1067:
 9555              	.L951:
 9556              	.LBB567:
1246:src/display.c **** 	      gotdot = j;
 9557              		.loc 1 1246 9 view .LVU3059
 9558 04f0 2E28     		cmp	r0, #46
 9559 04f2 0EEB0201 		add	r1, lr, r2
 9560              	.LVL1068:
1246:src/display.c **** 	      gotdot = j;
 9561              		.loc 1 1246 6 is_stmt 1 view .LVU3060
1246:src/display.c **** 	      gotdot = j;
 9562              		.loc 1 1246 9 is_stmt 0 view .LVU3061
 9563 04f6 03D1     		bne	.L950
1246:src/display.c **** 	      gotdot = j;
 9564              		.loc 1 1246 22 view .LVU3062
 9565 04f8 B9F1FF3F 		cmp	r9, #-1
 9566 04fc 08BF     		it	eq
 9567 04fe 8946     		moveq	r9, r1
 9568              	.LVL1069:
 9569              	.L950:
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9570              		.loc 1 1245 28 is_stmt 1 view .LVU3063
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9571              		.loc 1 1245 14 view .LVU3064
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9572              		.loc 1 1245 15 is_stmt 0 view .LVU3065
 9573 0500 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
1245:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9574              		.loc 1 1245 4 view .LVU3066
 9575 0504 0028     		cmp	r0, #0
 9576 0506 F3D1     		bne	.L951
1253:src/display.c **** 	  if (j > 0) {
 9577              		.loc 1 1253 4 is_stmt 1 view .LVU3067
1253:src/display.c **** 	  if (j > 0) {
 9578              		.loc 1 1253 6 is_stmt 0 view .LVU3068
 9579 0508 A1F10B02 		sub	r2, r1, #11
 9580              	.LVL1070:
1254:src/display.c **** 	    p += j + 1;
 9581              		.loc 1 1254 4 is_stmt 1 view .LVU3069
ARM GAS  /tmp/ccadPcKu.s 			page 281


1254:src/display.c **** 	    p += j + 1;
 9582              		.loc 1 1254 7 is_stmt 0 view .LVU3070
 9583 050c 002A     		cmp	r2, #0
 9584 050e 40F35781 		ble	.L1119
1255:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9585              		.loc 1 1255 6 is_stmt 1 view .LVU3071
1255:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9586              		.loc 1 1255 8 is_stmt 0 view .LVU3072
 9587 0512 0A39     		subs	r1, r1, #10
1257:src/display.c **** 	      gotdot = 0;
 9588              		.loc 1 1257 9 view .LVU3073
 9589 0514 4A45     		cmp	r2, r9
1255:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9590              		.loc 1 1255 8 view .LVU3074
 9591 0516 8844     		add	r8, r8, r1
 9592              	.LVL1071:
1256:src/display.c **** 	    if (gotdot <= j) {
 9593              		.loc 1 1256 6 is_stmt 1 view .LVU3075
1257:src/display.c **** 	      gotdot = 0;
 9594              		.loc 1 1257 6 view .LVU3076
1257:src/display.c **** 	      gotdot = 0;
 9595              		.loc 1 1257 9 is_stmt 0 view .LVU3077
 9596 0518 80F24581 		bge	.L989
1262:src/display.c **** 	      gotdot = 0;
 9597              		.loc 1 1262 11 is_stmt 1 view .LVU3078
1262:src/display.c **** 	      gotdot = 0;
 9598              		.loc 1 1262 14 is_stmt 0 view .LVU3079
 9599 051c 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
 9600              	.LVL1072:
1262:src/display.c **** 	      gotdot = 0;
 9601              		.loc 1 1262 14 view .LVU3080
 9602 0520 2E2A     		cmp	r2, #46
 9603 0522 00F05281 		beq	.L1120
 9604              	.LVL1073:
1269:src/display.c **** 	    overflow_to_left = 1;
 9605              		.loc 1 1269 6 is_stmt 1 view .LVU3081
 9606 0526 3C21     		movs	r1, #60
 9607              	.LVL1074:
1269:src/display.c **** 	    overflow_to_left = 1;
 9608              		.loc 1 1269 6 is_stmt 0 view .LVU3082
 9609 0528 FFF7FEFF 		bl	set_dig
 9610              	.LVL1075:
1270:src/display.c **** 	  }
 9611              		.loc 1 1270 6 is_stmt 1 view .LVU3083
1270:src/display.c **** 	  }
 9612              		.loc 1 1270 6 is_stmt 0 view .LVU3084
 9613 052c 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1270:src/display.c **** 	  }
 9614              		.loc 1 1270 6 view .LVU3085
 9615              	.LBE567:
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9616              		.loc 1 1276 9 is_stmt 1 view .LVU3086
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9617              		.loc 1 1276 2 is_stmt 0 view .LVU3087
 9618 0530 002B     		cmp	r3, #0
 9619 0532 85D0     		beq	.L949
 9620              	.LBB568:
ARM GAS  /tmp/ccadPcKu.s 			page 282


1268:src/display.c **** 	    set_dig(0, '<');
 9621              		.loc 1 1268 18 view .LVU3088
 9622 0534 4FF0FF32 		mov	r2, #-1
1256:src/display.c **** 	    if (gotdot <= j) {
 9623              		.loc 1 1256 8 view .LVU3089
 9624 0538 4FF0090B 		mov	fp, #9
 9625              	.LVL1076:
 9626              	.L984:
1270:src/display.c **** 	  }
 9627              		.loc 1 1270 23 view .LVU3090
 9628 053c 4FF00109 		mov	r9, #1
 9629              	.LVL1077:
 9630              	.L955:
1270:src/display.c **** 	  }
 9631              		.loc 1 1270 23 view .LVU3091
 9632              	.LBE568:
1301:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9633              		.loc 1 1301 5 view .LVU3092
 9634 0540 0195     		str	r5, [sp, #4]
 9635 0542 1546     		mov	r5, r2
 9636              	.LVL1078:
1301:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9637              		.loc 1 1301 5 view .LVU3093
 9638 0544 1A46     		mov	r2, r3
 9639 0546 3B46     		mov	r3, r7
 9640 0548 4746     		mov	r7, r8
 9641 054a 9846     		mov	r8, r3
 9642 054c 0AE0     		b	.L960
 9643              	.LVL1079:
 9644              	.L1121:
1291:src/display.c **** #  endif
 9645              		.loc 1 1291 11 view .LVU3094
 9646 054e AB45     		cmp	fp, r5
 9647 0550 14D0     		beq	.L957
 9648              	.LVL1080:
 9649              	.L956:
1315:src/display.c **** 	      i += segs_per_digit;
 9650              		.loc 1 1315 8 view .LVU3095
 9651 0552 FFF7FEFF 		bl	set_dig
 9652              	.LVL1081:
1316:src/display.c **** 	    }
 9653              		.loc 1 1316 8 is_stmt 1 view .LVU3096
1316:src/display.c **** 	    }
 9654              		.loc 1 1316 10 is_stmt 0 view .LVU3097
 9655 0556 0BF1090B 		add	fp, fp, #9
 9656              	.LVL1082:
 9657              	.L958:
1280:src/display.c **** 	  if (*p == '.') {
 9658              		.loc 1 1280 11 is_stmt 1 view .LVU3098
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9659              		.loc 1 1276 9 view .LVU3099
 9660 055a 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
 9661              	.LVL1083:
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9662              		.loc 1 1276 2 is_stmt 0 view .LVU3100
 9663 055e 002A     		cmp	r2, #0
 9664 0560 3FF44DAF 		beq	.L1096
ARM GAS  /tmp/ccadPcKu.s 			page 283


 9665              	.LVL1084:
 9666              	.L960:
1281:src/display.c **** 	    if (gotdot < 0)
 9667              		.loc 1 1281 4 is_stmt 1 view .LVU3101
1282:src/display.c **** 	      gotdot = i;
 9668              		.loc 1 1282 6 view .LVU3102
1315:src/display.c **** 	      i += segs_per_digit;
 9669              		.loc 1 1315 8 view .LVU3103
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9670              		.loc 1 1276 20 is_stmt 0 view .LVU3104
 9671 0564 452A     		cmp	r2, #69
1315:src/display.c **** 	      i += segs_per_digit;
 9672              		.loc 1 1315 8 view .LVU3105
 9673 0566 1146     		mov	r1, r2
 9674 0568 5846     		mov	r0, fp
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9675              		.loc 1 1276 20 view .LVU3106
 9676 056a 3FF448AF 		beq	.L1096
1281:src/display.c **** 	    if (gotdot < 0)
 9677              		.loc 1 1281 7 view .LVU3107
 9678 056e 2E2A     		cmp	r2, #46
 9679 0570 EFD1     		bne	.L956
1291:src/display.c **** #  endif
 9680              		.loc 1 1291 8 is_stmt 1 view .LVU3108
1293:src/display.c **** 		i += segs_per_digit;
 9681              		.loc 1 1293 3 view .LVU3109
 9682              	.LVL1085:
1297:src/display.c **** 		  i += segs_per_digit;
 9683              		.loc 1 1297 3 view .LVU3110
1282:src/display.c **** 	      gotdot = i;
 9684              		.loc 1 1282 9 is_stmt 0 view .LVU3111
 9685 0572 002D     		cmp	r5, #0
1293:src/display.c **** 		i += segs_per_digit;
 9686              		.loc 1 1293 3 view .LVU3112
 9687 0574 5846     		mov	r0, fp
 9688 0576 4FF02F01 		mov	r1, #47
1282:src/display.c **** 	      gotdot = i;
 9689              		.loc 1 1282 9 view .LVU3113
 9690 057a E8DA     		bge	.L1121
 9691              	.L957:
1298:src/display.c **** 		}
 9692              		.loc 1 1298 5 is_stmt 1 view .LVU3114
 9693              	.LVL1086:
1297:src/display.c **** 		  i += segs_per_digit;
 9694              		.loc 1 1297 6 is_stmt 0 view .LVU3115
 9695 057c A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9696 057e 012A     		cmp	r2, #1
 9697 0580 26D9     		bls	.L959
 9698 0582 5D46     		mov	r5, fp
1298:src/display.c **** 		}
 9699              		.loc 1 1298 7 view .LVU3116
 9700 0584 0BF1090B 		add	fp, fp, #9
 9701              	.LVL1087:
1298:src/display.c **** 		}
 9702              		.loc 1 1298 7 view .LVU3117
 9703 0588 E7E7     		b	.L958
 9704              	.LVL1088:
ARM GAS  /tmp/ccadPcKu.s 			page 284


 9705              	.L1109:
1298:src/display.c **** 		}
 9706              		.loc 1 1298 7 view .LVU3118
 9707              	.LBE576:
 9708              	.LBE590:
2641:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9709              		.loc 1 2641 4 is_stmt 1 view .LVU3119
2641:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9710              		.loc 1 2641 35 is_stmt 0 view .LVU3120
 9711 058a E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9712 058c 3649     		ldr	r1, .L1142+60
 9713 058e 0623     		movs	r3, #6
 9714 0590 03EB0213 		add	r3, r3, r2, lsl #4
2641:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9715              		.loc 1 2641 9 view .LVU3121
 9716 0594 1944     		add	r1, r1, r3
 9717 0596 1EA8     		add	r0, sp, #120
 9718              	.LVL1089:
2641:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9719              		.loc 1 2641 9 view .LVU3122
 9720 0598 FFF7FEFF 		bl	scopy
 9721              	.LVL1090:
2642:src/display.c **** 	  if (State2.dot) {
 9722              		.loc 1 2642 4 is_stmt 1 view .LVU3123
2642:src/display.c **** 	  if (State2.dot) {
 9723              		.loc 1 2642 9 is_stmt 0 view .LVU3124
 9724 059c 334A     		ldr	r2, .L1142+64
 9725 059e 344B     		ldr	r3, .L1142+68
 9726 05a0 94F91510 		ldrsb	r1, [r4, #21]
 9727 05a4 12EA2101 		ands	r1, r2, r1, asr #32
 9728 05a8 38BF     		it	cc
 9729 05aa 1946     		movcc	r1, r3
 9730 05ac FFF7FEFF 		bl	scopy
 9731              	.LVL1091:
2643:src/display.c **** 	    *bp++ = 's';
 9732              		.loc 1 2643 8 view .LVU3125
 9733 05b0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9734              	.LVL1092:
2643:src/display.c **** 	    *bp++ = 's';
 9735              		.loc 1 2643 4 is_stmt 1 view .LVU3126
2643:src/display.c **** 	    *bp++ = 's';
 9736              		.loc 1 2643 7 is_stmt 0 view .LVU3127
 9737 05b2 5A06     		lsls	r2, r3, #25
 9738 05b4 1AD5     		bpl	.L860
2644:src/display.c **** 	    *bp++ = '_';
 9739              		.loc 1 2644 6 is_stmt 1 view .LVU3128
 9740              	.LVL1093:
2644:src/display.c **** 	    *bp++ = '_';
 9741              		.loc 1 2644 12 is_stmt 0 view .LVU3129
 9742 05b6 7322     		movs	r2, #115
2645:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9743              		.loc 1 2645 12 view .LVU3130
 9744 05b8 5F23     		movs	r3, #95
2644:src/display.c **** 	    *bp++ = '_';
 9745              		.loc 1 2644 12 view .LVU3131
 9746 05ba 0270     		strb	r2, [r0]
2645:src/display.c **** 	  } else if (shift == SHIFT_F) {
ARM GAS  /tmp/ccadPcKu.s 			page 285


 9747              		.loc 1 2645 6 is_stmt 1 view .LVU3132
 9748              	.LVL1094:
2645:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9749              		.loc 1 2645 12 is_stmt 0 view .LVU3133
 9750 05bc 4370     		strb	r3, [r0, #1]
 9751 05be E5E6     		b	.L884
 9752              	.LVL1095:
 9753              	.L1110:
 9754              	.LBB591:
 9755              	.LBB577:
1223:src/display.c **** 	p++;
 9756              		.loc 1 1223 2 is_stmt 1 view .LVU3134
 9757              	.LBB569:
 9758              	.LBI569:
 293:src/display.c **** {
 9759              		.loc 1 293 13 view .LVU3135
 9760              	.LBB570:
 295:src/display.c ****   set_dot(MANT_SIGN);
 9761              		.loc 1 295 3 view .LVU3136
 295:src/display.c ****   set_dot(MANT_SIGN);
 9762              		.loc 1 295 25 is_stmt 0 view .LVU3137
 9763 05c0 1D49     		ldr	r1, .L1142+12
 296:src/display.c **** }
 9764              		.loc 1 296 3 view .LVU3138
 9765 05c2 8120     		movs	r0, #129
 9766              	.LVL1096:
 295:src/display.c ****   set_dot(MANT_SIGN);
 9767              		.loc 1 295 25 view .LVU3139
 9768 05c4 0A70     		strb	r2, [r1]
 296:src/display.c **** }
 9769              		.loc 1 296 3 is_stmt 1 view .LVU3140
 9770              	.LBE570:
 9771              	.LBE569:
1224:src/display.c ****       }
 9772              		.loc 1 1224 3 is_stmt 0 view .LVU3141
 9773 05c6 08F10108 		add	r8, r8, #1
 9774              	.LVL1097:
 9775              	.LBB572:
 9776              	.LBB571:
 296:src/display.c **** }
 9777              		.loc 1 296 3 view .LVU3142
 9778 05ca FFF7FEFF 		bl	set_dot
 9779              	.LVL1098:
 9780              	.LBE571:
 9781              	.LBE572:
1224:src/display.c ****       }
 9782              		.loc 1 1224 2 is_stmt 1 view .LVU3143
1224:src/display.c ****       }
 9783              		.loc 1 1224 2 is_stmt 0 view .LVU3144
 9784 05ce 43E6     		b	.L944
 9785              	.LVL1099:
 9786              	.L959:
1301:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9787              		.loc 1 1301 5 is_stmt 1 view .LVU3145
 9788 05d0 284B     		ldr	r3, .L1142+72
 9789 05d2 0022     		movs	r2, #0
 9790 05d4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccadPcKu.s 			page 286


 9791 05d6 ABF10900 		sub	r0, fp, #9
 9792              	.LVL1100:
1301:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9793              		.loc 1 1301 5 is_stmt 0 view .LVU3146
 9794 05da FFF7FEFF 		bl	set_decimal
 9795              	.LVL1101:
 9796 05de 5D46     		mov	r5, fp
 9797 05e0 BBE7     		b	.L958
 9798              	.LVL1102:
 9799              	.L1118:
1301:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9800              		.loc 1 1301 5 view .LVU3147
 9801              	.LBE577:
 9802              	.LBE591:
2629:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9803              		.loc 1 2629 6 is_stmt 1 view .LVU3148
2629:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9804              		.loc 1 2629 11 is_stmt 0 view .LVU3149
 9805 05e2 2189     		ldrh	r1, [r4, #8]
 9806 05e4 FFF7FEFF 		bl	num_arg_0
 9807              	.LVL1103:
2629:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9808              		.loc 1 2629 11 view .LVU3150
 9809 05e8 0346     		mov	r3, r0
 9810              	.LVL1104:
2629:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9811              		.loc 1 2629 11 view .LVU3151
 9812 05ea 68E7     		b	.L856
 9813              	.L860:
2646:src/display.c **** 	    *bp++ = '\021';
 9814              		.loc 1 2646 11 is_stmt 1 view .LVU3152
2646:src/display.c **** 	    *bp++ = '\021';
 9815              		.loc 1 2646 14 is_stmt 0 view .LVU3153
 9816 05ec B9F1010F 		cmp	r9, #1
 9817 05f0 00F0BE80 		beq	.L1122
2653:src/display.c **** 	      *bp++ = '.';
 9818              		.loc 1 2653 6 is_stmt 1 view .LVU3154
2653:src/display.c **** 	      *bp++ = '.';
 9819              		.loc 1 2653 10 is_stmt 0 view .LVU3155
 9820 05f4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2653:src/display.c **** 	      *bp++ = '.';
 9821              		.loc 1 2653 9 view .LVU3156
 9822 05f6 DB07     		lsls	r3, r3, #31
2654:src/display.c **** 	    if (State2.numdigit > 0) {
 9823              		.loc 1 2654 8 is_stmt 1 view .LVU3157
 9824              	.LVL1105:
2654:src/display.c **** 	    if (State2.numdigit > 0) {
 9825              		.loc 1 2654 14 is_stmt 0 view .LVU3158
 9826 05f8 44BF     		itt	mi
 9827 05fa 2E23     		movmi	r3, #46
 9828 05fc 00F8013B 		strbmi	r3, [r0], #1
 9829              	.LVL1106:
2655:src/display.c **** 	      if (State2.shuffle)
 9830              		.loc 1 2655 6 is_stmt 1 view .LVU3159
2655:src/display.c **** 	      if (State2.shuffle)
 9831              		.loc 1 2655 16 is_stmt 0 view .LVU3160
 9832 0600 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
ARM GAS  /tmp/ccadPcKu.s 			page 287


2655:src/display.c **** 	      if (State2.shuffle)
 9833              		.loc 1 2655 9 view .LVU3161
 9834 0602 82B1     		cbz	r2, .L864
2656:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9835              		.loc 1 2656 8 is_stmt 1 view .LVU3162
2656:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9836              		.loc 1 2656 12 is_stmt 0 view .LVU3163
 9837 0604 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2656:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9838              		.loc 1 2656 11 view .LVU3164
 9839 0606 9F07     		lsls	r7, r3, #30
 9840 0608 40F19081 		bpl	.L865
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9841              		.loc 1 2657 3 is_stmt 1 view .LVU3165
 9842              	.LVL1107:
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9843              		.loc 1 2657 17 is_stmt 0 view .LVU3166
 9844 060c 2389     		ldrh	r3, [r4, #8]
 9845              	.LVL1108:
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9846              		.loc 1 2657 34 is_stmt 1 view .LVU3167
 9847 060e 1A4A     		ldr	r2, .L1142+76
 9848              	.LVL1109:
 9849              	.L866:
2658:src/display.c **** 	      else
 9850              		.loc 1 2658 5 discriminator 3 view .LVU3168
2658:src/display.c **** 	      else
 9851              		.loc 1 2658 24 is_stmt 0 discriminator 3 view .LVU3169
 9852 0610 03F00301 		and	r1, r3, #3
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9853              		.loc 1 2657 54 discriminator 3 view .LVU3170
 9854 0614 0135     		adds	r5, r5, #1
 9855              	.LVL1110:
2658:src/display.c **** 	      else
 9856              		.loc 1 2658 11 discriminator 3 view .LVU3171
 9857 0616 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 9858 0618 00F8011B 		strb	r1, [r0], #1
 9859              	.LVL1111:
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9860              		.loc 1 2657 53 is_stmt 1 discriminator 3 view .LVU3172
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9861              		.loc 1 2657 42 is_stmt 0 discriminator 3 view .LVU3173
 9862 061c E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9863              		.loc 1 2657 3 discriminator 3 view .LVU3174
 9864 061e A942     		cmp	r1, r5
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9865              		.loc 1 2657 60 discriminator 3 view .LVU3175
 9866 0620 4FEAA303 		asr	r3, r3, #2
 9867              	.LVL1112:
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9868              		.loc 1 2657 34 is_stmt 1 discriminator 3 view .LVU3176
2657:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9869              		.loc 1 2657 3 is_stmt 0 discriminator 3 view .LVU3177
 9870 0624 F4DC     		bgt	.L866
 9871              	.LVL1113:
 9872              	.L864:
ARM GAS  /tmp/ccadPcKu.s 			page 288


2663:src/display.c **** 	  }
 9873              		.loc 1 2663 6 is_stmt 1 view .LVU3178
2663:src/display.c **** 	  }
 9874              		.loc 1 2663 12 is_stmt 0 view .LVU3179
 9875 0626 5F23     		movs	r3, #95
 9876 0628 0370     		strb	r3, [r0]
 9877 062a AFE6     		b	.L884
 9878              	.L1143:
 9879              		.align	2
 9880              	.L1142:
 9881 062c 0C000000 		.word	.LANCHOR17+12
 9882 0630 08000000 		.word	.LC23
 9883 0634 18000000 		.word	.LC24
 9884 0638 00000000 		.word	LastDisplayedNumber
 9885 063c 00000000 		.word	DispMsg
 9886 0640 34000000 		.word	.LC25
 9887 0644 00000000 		.word	LastDisplayedExponent
 9888 0648 00000000 		.word	.LANCHOR20
 9889 064c 00000000 		.word	DispPlot
 9890 0650 38000000 		.word	.LC26
 9891 0654 AC000000 		.word	.LC42
 9892 0658 00000000 		.word	.LANCHOR22
 9893 065c 00000000 		.word	.LANCHOR24
 9894 0660 00000000 		.word	.LANCHOR0
 9895 0664 56040000 		.word	argcmds+1110
 9896 0668 00000000 		.word	argcmds
 9897 066c 00000000 		.word	.LC20
 9898 0670 04000000 		.word	.LC21
 9899 0674 00000000 		.word	.LANCHOR1
 9900 0678 BC000000 		.word	.LC27
 9901 067c 00000000 		.word	ShowRegister
 9902              	.LVL1114:
 9903              	.L948:
 9904              	.LBB592:
 9905              	.LBB578:
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9906              		.loc 1 1276 9 is_stmt 1 view .LVU3180
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9907              		.loc 1 1276 2 is_stmt 0 view .LVU3181
 9908 0680 002B     		cmp	r3, #0
 9909 0682 3FF4DDAE 		beq	.L949
1236:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9910              		.loc 1 1236 4 view .LVU3182
 9911 0686 CB46     		mov	fp, r9
 9912              	.LVL1115:
1213:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9913              		.loc 1 1213 11 view .LVU3183
 9914 0688 4FF0FF32 		mov	r2, #-1
 9915 068c 58E7     		b	.L955
 9916              	.LVL1116:
 9917              	.L991:
1213:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9918              		.loc 1 1213 11 view .LVU3184
 9919              	.LBE578:
 9920              	.LBE592:
 9921              	.LBB593:
 9922              	.LBB550:
ARM GAS  /tmp/ccadPcKu.s 			page 289


2841:src/display.c **** 	      while(*b) {
 9923              		.loc 1 2841 10 view .LVU3185
 9924 068e 5A1C     		adds	r2, r3, #1
 9925 0690 46E5     		b	.L971
 9926              	.LVL1117:
 9927              	.L1113:
2841:src/display.c **** 	      while(*b) {
 9928              		.loc 1 2841 10 view .LVU3186
 9929              	.LBE550:
 9930              	.LBE593:
 9931              	.LBB594:
2677:src/display.c **** 	  char b2[16];
 9932              		.loc 1 2677 4 is_stmt 1 view .LVU3187
2677:src/display.c **** 	  char b2[16];
 9933              		.loc 1 2677 45 is_stmt 0 view .LVU3188
 9934 0692 C24B     		ldr	r3, .L1144
 9935 0694 1B68     		ldr	r3, [r3]
 9936 0696 B3F8DC07 		ldrh	r0, [r3, #2012]
2677:src/display.c **** 	  char b2[16];
 9937              		.loc 1 2677 22 view .LVU3189
 9938 069a C0F34610 		ubfx	r0, r0, #5, #7
 9939 069e FFF7FEFF 		bl	current_catalogue
 9940              	.LVL1118:
2681:src/display.c **** 	  p = catcmd(op, b2);
 9941              		.loc 1 2681 9 view .LVU3190
 9942 06a2 BF49     		ldr	r1, .L1144+4
2677:src/display.c **** 	  char b2[16];
 9943              		.loc 1 2677 22 view .LVU3191
 9944 06a4 0546     		mov	r5, r0
 9945              	.LVL1119:
2678:src/display.c **** 	  const char *p;
 9946              		.loc 1 2678 4 is_stmt 1 view .LVU3192
2679:src/display.c **** 
 9947              		.loc 1 2679 4 view .LVU3193
2681:src/display.c **** 	  p = catcmd(op, b2);
 9948              		.loc 1 2681 4 view .LVU3194
2681:src/display.c **** 	  p = catcmd(op, b2);
 9949              		.loc 1 2681 9 is_stmt 0 view .LVU3195
 9950 06a6 1EA8     		add	r0, sp, #120
 9951              	.LVL1120:
2681:src/display.c **** 	  p = catcmd(op, b2);
 9952              		.loc 1 2681 9 view .LVU3196
 9953 06a8 FFF7FEFF 		bl	scopy
 9954              	.LVL1121:
2682:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9955              		.loc 1 2682 8 view .LVU3197
 9956 06ac 08A9     		add	r1, sp, #32
2681:src/display.c **** 	  p = catcmd(op, b2);
 9957              		.loc 1 2681 9 view .LVU3198
 9958 06ae 0746     		mov	r7, r0
2682:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9959              		.loc 1 2682 8 view .LVU3199
 9960 06b0 2846     		mov	r0, r5
 9961              	.LVL1122:
2682:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9962              		.loc 1 2682 4 is_stmt 1 view .LVU3200
2682:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/ccadPcKu.s 			page 290


 9963              		.loc 1 2682 8 is_stmt 0 view .LVU3201
 9964 06b2 FFF7FEFF 		bl	catcmd
 9965              	.LVL1123:
2683:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9966              		.loc 1 2683 7 view .LVU3202
 9967 06b6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9968 06b8 142B     		cmp	r3, #20
2682:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9969              		.loc 1 2682 8 view .LVU3203
 9970 06ba 0146     		mov	r1, r0
 9971              	.LVL1124:
2683:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9972              		.loc 1 2683 4 is_stmt 1 view .LVU3204
2683:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9973              		.loc 1 2683 7 is_stmt 0 view .LVU3205
 9974 06bc 05D0     		beq	.L871
2683:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9975              		.loc 1 2683 29 discriminator 1 view .LVU3206
 9976 06be 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9977 06c0 9807     		lsls	r0, r3, #30
 9978              	.LVL1125:
2684:src/display.c **** 	  bp = scopy(bp, p);
 9979              		.loc 1 2684 6 is_stmt 1 discriminator 1 view .LVU3207
2684:src/display.c **** 	  bp = scopy(bp, p);
 9980              		.loc 1 2684 12 is_stmt 0 discriminator 1 view .LVU3208
 9981 06c2 44BF     		itt	mi
 9982 06c4 1423     		movmi	r3, #20
 9983 06c6 07F8013B 		strbmi	r3, [r7], #1
 9984              	.LVL1126:
 9985              	.L871:
2685:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9986              		.loc 1 2685 4 is_stmt 1 view .LVU3209
2685:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9987              		.loc 1 2685 9 is_stmt 0 view .LVU3210
 9988 06ca 3846     		mov	r0, r7
 9989 06cc FFF7FEFF 		bl	scopy
 9990              	.LVL1127:
2686:src/display.c **** 	    // State2.disp_small = 1;
 9991              		.loc 1 2686 4 is_stmt 1 view .LVU3211
2686:src/display.c **** 	    // State2.disp_small = 1;
 9992              		.loc 1 2686 7 is_stmt 0 view .LVU3212
 9993 06d0 ABF11003 		sub	r3, fp, #16
 9994 06d4 012B     		cmp	r3, #1
 9995 06d6 40F25081 		bls	.L1123
2693:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9996              		.loc 1 2693 11 is_stmt 1 view .LVU3213
2693:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9997              		.loc 1 2693 15 is_stmt 0 view .LVU3214
 9998 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2693:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9999              		.loc 1 2693 14 view .LVU3215
 10000 06dc 5A06     		lsls	r2, r3, #25
 10001 06de 7FF555AE 		bpl	.L884
2694:src/display.c **** 	      decNumber x, r;
 10002              		.loc 1 2694 6 is_stmt 1 view .LVU3216
2694:src/display.c **** 	      decNumber x, r;
 10003              		.loc 1 2694 9 is_stmt 0 view .LVU3217
ARM GAS  /tmp/ccadPcKu.s 			page 291


 10004 06e2 BBF1120F 		cmp	fp, #18
 10005 06e6 00F0F882 		beq	.L1124
2714:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10006              		.loc 1 2714 13 is_stmt 1 view .LVU3218
2714:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10007              		.loc 1 2714 46 is_stmt 0 view .LVU3219
 10008 06ea A5F58873 		sub	r3, r5, #272
2714:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10009              		.loc 1 2714 16 view .LVU3220
 10010 06ee 0D2B     		cmp	r3, #13
 10011 06f0 3FF64CAE 		bhi	.L884
 10012              	.LBB539:
2715:src/display.c **** 	      copyreg(&z, x);
 10013              		.loc 1 2715 8 is_stmt 1 discriminator 3 view .LVU3221
2715:src/display.c **** 	      copyreg(&z, x);
 10014              		.loc 1 2715 27 is_stmt 0 discriminator 3 view .LVU3222
 10015 06f4 AB4B     		ldr	r3, .L1144+8
 10016 06f6 1F68     		ldr	r7, [r3]
 10017              	.LVL1128:
2716:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 10018              		.loc 1 2716 8 is_stmt 1 discriminator 3 view .LVU3223
 10019 06f8 15A8     		add	r0, sp, #84
 10020 06fa 3946     		mov	r1, r7
 10021 06fc FFF7FEFF 		bl	copyreg
 10022              	.LVL1129:
2717:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 10023              		.loc 1 2717 8 discriminator 3 view .LVU3224
 10024 0700 E8B2     		uxtb	r0, r5
 10025 0702 FFF7FEFF 		bl	sigma_val
 10026              	.LVL1130:
2718:src/display.c **** 	      copyreg(x, &z);
 10027              		.loc 1 2718 8 discriminator 3 view .LVU3225
 10028 0706 FFF7FEFF 		bl	is_dblmode
 10029              	.LVL1131:
 10030 070a 0021     		movs	r1, #0
 10031 070c 0246     		mov	r2, r0
 10032 070e 3846     		mov	r0, r7
 10033 0710 FFF7FEFF 		bl	set_x
 10034              	.LVL1132:
2719:src/display.c **** 	      skip = 1;
 10035              		.loc 1 2719 8 discriminator 3 view .LVU3226
 10036 0714 15A9     		add	r1, sp, #84
 10037 0716 3846     		mov	r0, r7
 10038 0718 FFF7FEFF 		bl	copyreg
 10039              	.LVL1133:
2720:src/display.c **** 	    }
 10040              		.loc 1 2720 8 discriminator 3 view .LVU3227
 10041              	.L875:
2720:src/display.c **** 	    }
 10042              		.loc 1 2720 8 is_stmt 0 discriminator 3 view .LVU3228
 10043              	.LBE539:
2723:src/display.c **** 	  no_status_top = 1;
 10044              		.loc 1 2723 4 is_stmt 1 view .LVU3229
 10045              	.LBB540:
 10046              	.LBI540:
3424:src/display.c **** 	if (no_status_top) return;
 10047              		.loc 1 3424 19 view .LVU3230
ARM GAS  /tmp/ccadPcKu.s 			page 292


 10048              	.LBB541:
3425:src/display.c **** 	if (State2.runmode) {
 10049              		.loc 1 3425 2 view .LVU3231
3425:src/display.c **** 	if (State2.runmode) {
 10050              		.loc 1 3425 5 is_stmt 0 view .LVU3232
 10051 071c B6F90030 		ldrsh	r3, [r6]
 10052 0720 13B9     		cbnz	r3, .L982
 10053 0722 1EA8     		add	r0, sp, #120
 10054              	.LVL1134:
3425:src/display.c **** 	if (State2.runmode) {
 10055              		.loc 1 3425 5 view .LVU3233
 10056 0724 FFF7FEFF 		bl	set_status_top.part.0
 10057              	.LVL1135:
3425:src/display.c **** 	if (State2.runmode) {
 10058              		.loc 1 3425 5 view .LVU3234
 10059              	.LBE541:
 10060              	.LBE540:
2724:src/display.c **** 	  annuc = State2.runmode;
 10061              		.loc 1 2724 4 is_stmt 1 view .LVU3235
 10062              	.L982:
2724:src/display.c **** 	  annuc = State2.runmode;
 10063              		.loc 1 2724 4 view .LVU3236
2725:src/display.c **** 	} else if (State2.multi) {
 10064              		.loc 1 2725 18 is_stmt 0 view .LVU3237
 10065 0728 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2724:src/display.c **** 	  annuc = State2.runmode;
 10066              		.loc 1 2724 18 view .LVU3238
 10067 072a 0123     		movs	r3, #1
2725:src/display.c **** 	} else if (State2.multi) {
 10068              		.loc 1 2725 10 view .LVU3239
 10069 072c C5F38015 		ubfx	r5, r5, #6, #1
2724:src/display.c **** 	  annuc = State2.runmode;
 10070              		.loc 1 2724 18 view .LVU3240
 10071 0730 3380     		strh	r3, [r6]	@ movhi
 10072              	.LVL1136:
 10073              	.L1098:
2725:src/display.c **** 	} else if (State2.multi) {
 10074              		.loc 1 2725 4 is_stmt 1 view .LVU3241
2725:src/display.c **** 	} else if (State2.multi) {
 10075              		.loc 1 2725 4 is_stmt 0 view .LVU3242
 10076              	.LBE594:
2803:src/display.c ****       nostk:
 10077              		.loc 1 2803 2 is_stmt 1 view .LVU3243
 10078 0732 FFF7FEFF 		bl	show_stack
 10079              	.LVL1137:
2805:src/display.c **** 	if (!skip) {
 10080              		.loc 1 2805 2 view .LVU3244
 10081 0736 FFF7FEFF 		bl	show_flags
 10082              	.LVL1138:
2806:src/display.c **** 	  if (State2.runmode) {
 10083              		.loc 1 2806 2 view .LVU3245
 10084              	.L881:
2851:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10085              		.loc 1 2851 2 view .LVU3246
 10086 073a FFF7FEFF 		bl	set_annunciators
 10087              	.LVL1139:
2852:src/display.c **** 	  ShowRPN = 0;
ARM GAS  /tmp/ccadPcKu.s 			page 293


 10088              		.loc 1 2852 2 view .LVU3247
 10089 073e 9A4B     		ldr	r3, .L1144+12
 10090 0740 9A4F     		ldr	r7, .L1144+16
 10091 0742 DFF88092 		ldr	r9, .L1144+40
 10092 0746 0093     		str	r3, [sp]
 10093 0748 14E5     		b	.L848
 10094              	.LVL1140:
 10095              	.L1112:
 10096              	.LBB595:
 10097              	.LBB579:
1354:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10098              		.loc 1 1354 6 view .LVU3248
1359:src/display.c **** #  endif
 10099              		.loc 1 1359 6 view .LVU3249
 10100 074a 08F10100 		add	r0, r8, #1
 10101              	.LVL1141:
1359:src/display.c **** #  endif
 10102              		.loc 1 1359 6 is_stmt 0 view .LVU3250
 10103 074e FFF7FEFF 		bl	s_to_i
 10104              	.LVL1142:
1359:src/display.c **** #  endif
 10105              		.loc 1 1359 6 view .LVU3251
 10106 0752 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 10107 0756 2D2B     		cmp	r3, #45
 10108 0758 0CBF     		ite	eq
 10109 075a 0621     		moveq	r1, #6
 10110 075c 0421     		movne	r1, #4
 10111 075e 0022     		movs	r2, #0
 10112 0760 FFF7FEFF 		bl	set_exp
 10113              	.LVL1143:
1359:src/display.c **** #  endif
 10114              		.loc 1 1359 6 view .LVU3252
 10115              	.LBE579:
 10116              	.LBE595:
2821:src/display.c **** 	      goto finish;
 10117              		.loc 1 2821 6 is_stmt 1 view .LVU3253
2821:src/display.c **** 	      goto finish;
 10118              		.loc 1 2821 9 is_stmt 0 view .LVU3254
 10119 0764 DAF80030 		ldr	r3, [r10]
 10120 0768 002B     		cmp	r3, #0
 10121 076a 3FF492AD 		beq	.L1095
 10122 076e 71E6     		b	.L1026
 10123              	.LVL1144:
 10124              	.L1122:
2647:src/display.c **** 	    *bp++ = '_';
 10125              		.loc 1 2647 6 is_stmt 1 view .LVU3255
2647:src/display.c **** 	    *bp++ = '_';
 10126              		.loc 1 2647 12 is_stmt 0 view .LVU3256
 10127 0770 1122     		movs	r2, #17
2648:src/display.c **** 	  } else {
 10128              		.loc 1 2648 12 view .LVU3257
 10129 0772 5F23     		movs	r3, #95
2647:src/display.c **** 	    *bp++ = '_';
 10130              		.loc 1 2647 12 view .LVU3258
 10131 0774 0270     		strb	r2, [r0]
2648:src/display.c **** 	  } else {
 10132              		.loc 1 2648 6 is_stmt 1 view .LVU3259
ARM GAS  /tmp/ccadPcKu.s 			page 294


 10133              	.LVL1145:
2648:src/display.c **** 	  } else {
 10134              		.loc 1 2648 12 is_stmt 0 view .LVU3260
 10135 0776 4370     		strb	r3, [r0, #1]
 10136 0778 08E6     		b	.L884
 10137              	.LVL1146:
 10138              	.L1114:
2727:src/display.c **** 	  if (State2.numdigit > 0) {
 10139              		.loc 1 2727 4 is_stmt 1 view .LVU3261
2727:src/display.c **** 	  if (State2.numdigit > 0) {
 10140              		.loc 1 2727 42 is_stmt 0 view .LVU3262
 10141 077a E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10142 077c 8C49     		ldr	r1, .L1144+20
 10143 077e 0423     		movs	r3, #4
 10144 0780 03EB0213 		add	r3, r3, r2, lsl #4
2727:src/display.c **** 	  if (State2.numdigit > 0) {
 10145              		.loc 1 2727 9 view .LVU3263
 10146 0784 1944     		add	r1, r1, r3
 10147 0786 2722     		movs	r2, #39
 10148 0788 1EA8     		add	r0, sp, #120
 10149              	.LVL1147:
2727:src/display.c **** 	  if (State2.numdigit > 0) {
 10150              		.loc 1 2727 9 view .LVU3264
 10151 078a FFF7FEFF 		bl	scopy_char
 10152              	.LVL1148:
2728:src/display.c **** 	    *bp++ = (char) State2.digval;
 10153              		.loc 1 2728 7 view .LVU3265
 10154 078e E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10155              	.LVL1149:
2728:src/display.c **** 	    *bp++ = (char) State2.digval;
 10156              		.loc 1 2728 4 is_stmt 1 view .LVU3266
2728:src/display.c **** 	    *bp++ = (char) State2.digval;
 10157              		.loc 1 2728 7 is_stmt 0 view .LVU3267
 10158 0790 002B     		cmp	r3, #0
 10159 0792 3FF4FBAD 		beq	.L884
2729:src/display.c **** 	    if (State2.numdigit > 1)
 10160              		.loc 1 2729 6 is_stmt 1 view .LVU3268
 10161              	.LVL1150:
2729:src/display.c **** 	    if (State2.numdigit > 1)
 10162              		.loc 1 2729 14 is_stmt 0 view .LVU3269
 10163 0796 2389     		ldrh	r3, [r4, #8]
 10164 0798 0370     		strb	r3, [r0]
2730:src/display.c **** 	      *bp++ = State2.digval2;
 10165              		.loc 1 2730 6 is_stmt 1 view .LVU3270
2730:src/display.c **** 	      *bp++ = State2.digval2;
 10166              		.loc 1 2730 9 is_stmt 0 view .LVU3271
 10167 079a E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10168 079c 012B     		cmp	r3, #1
2731:src/display.c **** 	  }
 10169              		.loc 1 2731 8 is_stmt 1 view .LVU3272
 10170              	.LVL1151:
2731:src/display.c **** 	  }
 10171              		.loc 1 2731 22 is_stmt 0 view .LVU3273
 10172 079e 84BF     		itt	hi
 10173 07a0 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2731:src/display.c **** 	  }
 10174              		.loc 1 2731 14 view .LVU3274
ARM GAS  /tmp/ccadPcKu.s 			page 295


 10175 07a2 4370     		strbhi	r3, [r0, #1]
 10176 07a4 F2E5     		b	.L884
 10177              	.LVL1152:
 10178              	.L989:
 10179              	.LBB596:
 10180              	.LBB580:
 10181              	.LBB573:
1256:src/display.c **** 	    if (gotdot <= j) {
 10182              		.loc 1 1256 8 view .LVU3275
 10183 07a6 4FF0090B 		mov	fp, #9
 10184              	.LVL1153:
 10185              	.L953:
1269:src/display.c **** 	    overflow_to_left = 1;
 10186              		.loc 1 1269 6 is_stmt 1 view .LVU3276
 10187 07aa 3C21     		movs	r1, #60
 10188              	.LVL1154:
1269:src/display.c **** 	    overflow_to_left = 1;
 10189              		.loc 1 1269 6 is_stmt 0 view .LVU3277
 10190 07ac 0020     		movs	r0, #0
 10191 07ae FFF7FEFF 		bl	set_dig
 10192              	.LVL1155:
1270:src/display.c **** 	  }
 10193              		.loc 1 1270 6 is_stmt 1 view .LVU3278
1270:src/display.c **** 	  }
 10194              		.loc 1 1270 6 is_stmt 0 view .LVU3279
 10195 07b2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1270:src/display.c **** 	  }
 10196              		.loc 1 1270 6 view .LVU3280
 10197              	.LBE573:
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10198              		.loc 1 1276 9 is_stmt 1 view .LVU3281
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10199              		.loc 1 1276 2 is_stmt 0 view .LVU3282
 10200 07b6 0022     		movs	r2, #0
 10201 07b8 002B     		cmp	r3, #0
 10202 07ba 7FF4BFAE 		bne	.L984
1276:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10203              		.loc 1 1276 2 view .LVU3283
 10204 07be 44E6     		b	.L968
 10205              	.LVL1156:
 10206              	.L1119:
1219:src/display.c **** #endif
 10207              		.loc 1 1219 11 view .LVU3284
 10208 07c0 8146     		mov	r9, r0
 10209              	.LVL1157:
1236:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10210              		.loc 1 1236 4 view .LVU3285
 10211 07c2 8346     		mov	fp, r0
 10212              	.LVL1158:
 10213              	.LBB574:
1272:src/display.c **** 	}
 10214              		.loc 1 1272 16 view .LVU3286
 10215 07c4 4FF0FF32 		mov	r2, #-1
 10216              	.LVL1159:
1272:src/display.c **** 	}
 10217              		.loc 1 1272 16 view .LVU3287
 10218 07c8 BAE6     		b	.L955
ARM GAS  /tmp/ccadPcKu.s 			page 296


 10219              	.LVL1160:
 10220              	.L1120:
1263:src/display.c **** 	      p++;
 10221              		.loc 1 1263 8 is_stmt 1 view .LVU3288
1264:src/display.c **** 	      if (!double_dot)
 10222              		.loc 1 1264 8 view .LVU3289
1264:src/display.c **** 	      if (!double_dot)
 10223              		.loc 1 1264 9 is_stmt 0 view .LVU3290
 10224 07ca 08F10108 		add	r8, r8, #1
 10225              	.LVL1161:
1265:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10226              		.loc 1 1265 8 is_stmt 1 view .LVU3291
1266:src/display.c **** 	    }
 10227              		.loc 1 1266 3 view .LVU3292
1266:src/display.c **** 	    }
 10228              		.loc 1 1266 5 is_stmt 0 view .LVU3293
 10229 07ce 4FF0120B 		mov	fp, #18
 10230              	.LVL1162:
1266:src/display.c **** 	    }
 10231              		.loc 1 1266 5 view .LVU3294
 10232 07d2 EAE7     		b	.L953
 10233              	.LVL1163:
 10234              	.L1116:
1266:src/display.c **** 	    }
 10235              		.loc 1 1266 5 view .LVU3295
 10236              	.LBE574:
 10237              	.LBE580:
 10238              	.LBE596:
2740:src/display.c **** 	  skip = 1;
 10239              		.loc 1 2740 4 is_stmt 1 view .LVU3296
 10240              	.LBB597:
 10241              	.LBI597:
2431:src/display.c **** 	char buf[16];
 10242              		.loc 1 2431 19 view .LVU3297
 10243              	.LBB598:
2432:src/display.c **** 	unsigned short int pc = State2.digval;
 10244              		.loc 1 2432 2 view .LVU3298
2433:src/display.c **** 	unsigned int op = getprog(pc);
 10245              		.loc 1 2433 2 view .LVU3299
2433:src/display.c **** 	unsigned int op = getprog(pc);
 10246              		.loc 1 2433 21 is_stmt 0 view .LVU3300
 10247 07d4 2789     		ldrh	r7, [r4, #8]
 10248              	.LVL1164:
2434:src/display.c **** 	int n = nLIB(pc);
 10249              		.loc 1 2434 2 is_stmt 1 view .LVU3301
2439:src/display.c **** #ifndef REALBUILD
 10250              		.loc 1 2439 27 is_stmt 0 view .LVU3302
 10251 07d6 DFF8F0B1 		ldr	fp, .L1144+44
 10252              	.LVL1165:
2441:src/display.c **** #endif
 10253              		.loc 1 2441 41 view .LVU3303
 10254 07da DFF8F0A1 		ldr	r10, .L1144+48
2434:src/display.c **** 	int n = nLIB(pc);
 10255              		.loc 1 2434 20 view .LVU3304
 10256 07de 3846     		mov	r0, r7
 10257 07e0 FFF7FEFF 		bl	getprog
 10258              	.LVL1166:
ARM GAS  /tmp/ccadPcKu.s 			page 297


 10259 07e4 4FEA9739 		lsr	r9, r7, #14
2438:src/display.c **** 	set_digits_string(libname[n], 0);
 10260              		.loc 1 2438 2 view .LVU3305
 10261 07e8 15A9     		add	r1, sp, #84
2439:src/display.c **** #ifndef REALBUILD
 10262              		.loc 1 2439 27 view .LVU3306
 10263 07ea 09EB8909 		add	r9, r9, r9, lsl #2
2434:src/display.c **** 	int n = nLIB(pc);
 10264              		.loc 1 2434 20 view .LVU3307
 10265 07ee 0090     		str	r0, [sp]
 10266              	.LVL1167:
2435:src/display.c **** 	unsigned short int lblpc;
 10267              		.loc 1 2435 2 is_stmt 1 view .LVU3308
2436:src/display.c **** 
 10268              		.loc 1 2436 2 view .LVU3309
2438:src/display.c **** 	set_digits_string(libname[n], 0);
 10269              		.loc 1 2438 2 view .LVU3310
 10270 07f0 FFF7FEFF 		bl	prt
 10271              	.LVL1168:
2438:src/display.c **** 	set_digits_string(libname[n], 0);
 10272              		.loc 1 2438 2 is_stmt 0 view .LVU3311
 10273 07f4 FFF7FEFF 		bl	set_status
 10274              	.LVL1169:
2439:src/display.c **** #ifndef REALBUILD
 10275              		.loc 1 2439 2 is_stmt 1 view .LVU3312
 10276 07f8 0BEB0900 		add	r0, fp, r9
 10277 07fc 4146     		mov	r1, r8
 10278 07fe FFF7FEFF 		bl	set_digits_string
 10279              	.LVL1170:
2441:src/display.c **** #endif
 10280              		.loc 1 2441 2 view .LVU3313
 10281 0802 6C48     		ldr	r0, .L1144+24
 10282 0804 0AEB4901 		add	r1, r10, r9, lsl #1
 10283 0808 FFF7FEFF 		bl	scopy
 10284              	.LVL1171:
2444:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10285              		.loc 1 2444 2 view .LVU3314
2444:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10286              		.loc 1 2444 5 is_stmt 0 view .LVU3315
 10287 080c 009B     		ldr	r3, [sp]
 10288 080e 13F4704F 		tst	r3, #61440
 10289 0812 8ED0     		beq	.L1098
2445:src/display.c **** 	  if (lblpc != pc) {
 10290              		.loc 1 2445 4 is_stmt 1 view .LVU3316
2445:src/display.c **** 	  if (lblpc != pc) {
 10291              		.loc 1 2445 12 is_stmt 0 view .LVU3317
 10292 0814 1846     		mov	r0, r3
 10293 0816 4146     		mov	r1, r8
 10294 0818 FFF7FEFF 		bl	findmultilbl
 10295              	.LVL1172:
2445:src/display.c **** 	  if (lblpc != pc) {
 10296              		.loc 1 2445 10 view .LVU3318
 10297 081c 83B2     		uxth	r3, r0
 10298              	.LVL1173:
2446:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10299              		.loc 1 2446 4 is_stmt 1 view .LVU3319
2446:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
ARM GAS  /tmp/ccadPcKu.s 			page 298


 10300              		.loc 1 2446 7 is_stmt 0 view .LVU3320
 10301 081e 9F42     		cmp	r7, r3
2445:src/display.c **** 	  if (lblpc != pc) {
 10302              		.loc 1 2445 12 view .LVU3321
 10303 0820 8146     		mov	r9, r0
2446:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10304              		.loc 1 2446 7 view .LVU3322
 10305 0822 0093     		str	r3, [sp]
 10306              	.LVL1174:
2446:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10307              		.loc 1 2446 7 view .LVU3323
 10308 0824 85D0     		beq	.L1098
2447:src/display.c **** 	    n = nLIB(lblpc);
 10309              		.loc 1 2447 6 is_stmt 1 view .LVU3324
 10310 0826 6448     		ldr	r0, .L1144+28
 10311 0828 3F21     		movs	r1, #63
 10312 082a FFF7FEFF 		bl	set_digits_string
 10313              	.LVL1175:
2448:src/display.c **** 	    if (n == REGION_RAM)
 10314              		.loc 1 2448 6 view .LVU3325
2449:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10315              		.loc 1 2449 6 view .LVU3326
2449:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10316              		.loc 1 2449 9 is_stmt 0 view .LVU3327
 10317 082e 009B     		ldr	r3, [sp]
 10318 0830 9F0B     		lsrs	r7, r3, #14
 10319              	.LVL1176:
2449:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10320              		.loc 1 2449 9 view .LVU3328
 10321 0832 40F03482 		bne	.L907
2450:src/display.c **** 	    else {
 10322              		.loc 1 2450 8 is_stmt 1 view .LVU3329
 10323 0836 3A46     		mov	r2, r7
 10324 0838 1FFA89F0 		uxth	r0, r9
 10325 083c 0121     		movs	r1, #1
 10326 083e FFF7FEFF 		bl	set_exp
 10327              	.LVL1177:
 10328 0842 76E7     		b	.L1098
 10329              	.LVL1178:
 10330              	.L1115:
2450:src/display.c **** 	    else {
 10331              		.loc 1 2450 8 is_stmt 0 view .LVU3330
 10332              	.LBE598:
 10333              	.LBE597:
2737:src/display.c **** 	  skip = 1;
 10334              		.loc 1 2737 4 is_stmt 1 view .LVU3331
 10335              	.LBB600:
 10336              	.LBI600:
2329:src/display.c **** 	int i, n;
 10337              		.loc 1 2329 19 view .LVU3332
 10338              	.LBB601:
2330:src/display.c **** 	int j = SEGS_EXP_BASE;
 10339              		.loc 1 2330 2 view .LVU3333
2331:src/display.c **** 	const int status = State2.status - 3;
 10340              		.loc 1 2331 2 view .LVU3334
2332:src/display.c **** 	char buf[16], *p = buf;
 10341              		.loc 1 2332 2 view .LVU3335
ARM GAS  /tmp/ccadPcKu.s 			page 299


2336:src/display.c **** 	  set_status("Free:");
 10342              		.loc 1 2336 5 is_stmt 0 view .LVU3336
 10343 0844 B8F1010F 		cmp	r8, #1
2332:src/display.c **** 	char buf[16], *p = buf;
 10344              		.loc 1 2332 12 view .LVU3337
 10345 0848 A8F10309 		sub	r9, r8, #3
 10346              	.LVL1179:
2333:src/display.c **** 	unsigned int pc;
 10347              		.loc 1 2333 2 is_stmt 1 view .LVU3338
2334:src/display.c **** 
 10348              		.loc 1 2334 2 view .LVU3339
2336:src/display.c **** 	  set_status("Free:");
 10349              		.loc 1 2336 2 view .LVU3340
2336:src/display.c **** 	  set_status("Free:");
 10350              		.loc 1 2336 5 is_stmt 0 view .LVU3341
 10351 084c 00F00B82 		beq	.L1125
2344:src/display.c **** 	  /* Top line */
 10352              		.loc 1 2344 7 is_stmt 1 view .LVU3342
2344:src/display.c **** 	  /* Top line */
 10353              		.loc 1 2344 10 is_stmt 0 view .LVU3343
 10354 0850 B9F1FF3F 		cmp	r9, #-1
 10355 0854 00F0E381 		beq	.L1126
 10356              	.LBB602:
2361:src/display.c **** 	  int end;
 10357              		.loc 1 2361 4 is_stmt 1 view .LVU3344
2362:src/display.c **** 	  int group = 10;
 10358              		.loc 1 2362 4 view .LVU3345
2363:src/display.c **** 	  int start = 0;
 10359              		.loc 1 2363 4 view .LVU3346
 10360              	.LVL1180:
2364:src/display.c **** 		
 10361              		.loc 1 2364 4 view .LVU3347
2366:src/display.c **** 	    base = 10 * status;
 10362              		.loc 1 2366 4 view .LVU3348
2366:src/display.c **** 	    base = 10 * status;
 10363              		.loc 1 2366 7 is_stmt 0 view .LVU3349
 10364 0858 B9F1090F 		cmp	r9, #9
 10365 085c 40F3BC81 		ble	.L1127
2376:src/display.c **** 	    base = regX_idx;
 10366              		.loc 1 2376 9 is_stmt 1 view .LVU3350
2376:src/display.c **** 	    base = regX_idx;
 10367              		.loc 1 2376 12 is_stmt 0 view .LVU3351
 10368 0860 B9F10A0F 		cmp	r9, #10
 10369 0864 00F01E81 		beq	.L1128
2384:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10370              		.loc 1 2384 6 is_stmt 1 view .LVU3352
 10371              	.LVL1181:
2385:src/display.c **** 	    set_status("FL.00-.15");
 10372              		.loc 1 2385 6 view .LVU3353
2386:src/display.c **** 	  }
 10373              		.loc 1 2386 6 view .LVU3354
 10374 0868 5448     		ldr	r0, .L1144+32
 10375 086a FFF7FEFF 		bl	set_status
 10376              	.LVL1182:
2364:src/display.c **** 		
 10377              		.loc 1 2364 8 is_stmt 0 view .LVU3355
 10378 086e 4FF0000B 		mov	fp, #0
ARM GAS  /tmp/ccadPcKu.s 			page 300


 10379              	.LVL1183:
2363:src/display.c **** 	  int start = 0;
 10380              		.loc 1 2363 8 view .LVU3356
 10381 0872 0A27     		movs	r7, #10
2385:src/display.c **** 	    set_status("FL.00-.15");
 10382              		.loc 1 2385 10 view .LVU3357
 10383 0874 4FF07F0A 		mov	r10, #127
2384:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10384              		.loc 1 2384 11 view .LVU3358
 10385 0878 4FF07009 		mov	r9, #112
 10386              	.LVL1184:
 10387              	.L894:
2388:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10388              		.loc 1 2388 4 is_stmt 1 view .LVU3359
2388:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10389              		.loc 1 2388 6 is_stmt 0 view .LVU3360
 10390 087c 0BEBCB08 		add	r8, fp, fp, lsl #3
 10391              	.LVL1185:
2389:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10392              		.loc 1 2389 4 is_stmt 1 view .LVU3361
 10393              	.LBB603:
 10394              	.LBI603:
 346:src/display.c ****   if (res) {
 10395              		.loc 1 346 14 view .LVU3362
 10396              	.LBB604:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10397              		.loc 1 347 3 view .LVU3363
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10398              		.loc 1 350 5 view .LVU3364
 10399              	.LBB605:
 10400              	.LBB606:
 354:src/display.c **** #endif
 10401              		.loc 1 354 35 is_stmt 0 view .LVU3365
 10402 0880 0BF10103 		add	r3, fp, #1
 10403              	.LBE606:
 10404              	.LBE605:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10405              		.loc 1 350 5 view .LVU3366
 10406 0884 08F10700 		add	r0, r8, #7
 10407              	.LBB609:
 10408              	.LBB607:
 354:src/display.c **** #endif
 10409              		.loc 1 354 35 view .LVU3367
 10410 0888 0093     		str	r3, [sp]
 10411              	.LBE607:
 10412              	.LBE609:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10413              		.loc 1 350 5 view .LVU3368
 10414 088a FFF7FEFF 		bl	set_dot
 10415              	.LVL1186:
 351:src/display.c ****       set_dot(posn+8);
 10416              		.loc 1 351 5 is_stmt 1 view .LVU3369
 10417              	.LBB610:
 10418              	.LBI605:
 346:src/display.c ****   if (res) {
 10419              		.loc 1 346 14 view .LVU3370
 10420              	.LBB608:
ARM GAS  /tmp/ccadPcKu.s 			page 301


 354:src/display.c **** #endif
 10421              		.loc 1 354 5 view .LVU3371
 354:src/display.c **** #endif
 10422              		.loc 1 354 38 is_stmt 0 view .LVU3372
 10423 088e 4949     		ldr	r1, .L1144+24
 10424 0890 009B     		ldr	r3, [sp]
 10425 0892 2E22     		movs	r2, #46
 10426 0894 01F81320 		strb	r2, [r1, r3, lsl #1]
 357:src/display.c **** }
 10427              		.loc 1 357 3 is_stmt 1 view .LVU3373
 10428              	.LVL1187:
 357:src/display.c **** }
 10429              		.loc 1 357 3 is_stmt 0 view .LVU3374
 10430              	.LBE608:
 10431              	.LBE610:
 357:src/display.c **** }
 10432              		.loc 1 357 3 is_stmt 1 view .LVU3375
 357:src/display.c **** }
 10433              		.loc 1 357 3 is_stmt 0 view .LVU3376
 10434              	.LBE604:
 10435              	.LBE603:
2390:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10436              		.loc 1 2390 4 is_stmt 1 view .LVU3377
 10437 0898 CBEB4701 		rsb	r1, fp, r7, lsl #1
 10438 089c 01EB0903 		add	r3, r1, r9
 10439 08a0 0293     		str	r3, [sp, #8]
2391:src/display.c **** 	    int k = i + base - start;
 10440              		.loc 1 2391 30 is_stmt 0 view .LVU3378
 10441 08a2 0BEB0703 		add	r3, fp, r7
 10442 08a6 0393     		str	r3, [sp, #12]
 10443 08a8 A9EB0B03 		sub	r3, r9, fp
 10444 08ac CDE90435 		strd	r3, r5, [sp, #16]
2390:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10445              		.loc 1 2390 6 view .LVU3379
 10446 08b0 08F10908 		add	r8, r8, #9
 10447              	.LVL1188:
2391:src/display.c **** 	    int k = i + base - start;
 10448              		.loc 1 2391 4 is_stmt 1 view .LVU3380
2391:src/display.c **** 	    int k = i + base - start;
 10449              		.loc 1 2391 20 view .LVU3381
 10450              	.LBB611:
 10451              	.LBB612:
 10452              	.LBB613:
 10453              	.LBB614:
 10454              	.LBB615:
 354:src/display.c **** #endif
 10455              		.loc 1 354 38 is_stmt 0 view .LVU3382
 10456 08b4 0192     		str	r2, [sp, #4]
 10457 08b6 4F44     		add	r7, r7, r9
 10458              	.LVL1189:
 354:src/display.c **** #endif
 10459              		.loc 1 354 38 view .LVU3383
 10460 08b8 1FE0     		b	.L898
 10461              	.LVL1190:
 10462              	.L896:
 354:src/display.c **** #endif
 10463              		.loc 1 354 38 view .LVU3384
ARM GAS  /tmp/ccadPcKu.s 			page 302


 10464              	.LBE615:
 10465              	.LBE614:
 10466              	.LBE613:
 10467              	.LBE612:
2401:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10468              		.loc 1 2401 6 is_stmt 1 view .LVU3385
 10469 08ba 2946     		mov	r1, r5
 10470 08bc 4046     		mov	r0, r8
 10471 08be FFF7FEFF 		bl	set_dig
 10472              	.LVL1191:
2402:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10473              		.loc 1 2402 6 view .LVU3386
 10474              	.LBB622:
 10475              	.LBI612:
 346:src/display.c ****   if (res) {
 10476              		.loc 1 346 14 view .LVU3387
 10477              	.LBB620:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10478              		.loc 1 347 3 view .LVU3388
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10479              		.loc 1 350 5 view .LVU3389
 10480 08c2 08F10700 		add	r0, r8, #7
 10481 08c6 FFF7FEFF 		bl	set_dot
 10482              	.LVL1192:
 351:src/display.c ****       set_dot(posn+8);
 10483              		.loc 1 351 5 view .LVU3390
 10484              	.LBB618:
 10485              	.LBI614:
 346:src/display.c ****   if (res) {
 10486              		.loc 1 346 14 view .LVU3391
 10487              	.LBB616:
 354:src/display.c **** #endif
 10488              		.loc 1 354 5 view .LVU3392
 354:src/display.c **** #endif
 10489              		.loc 1 354 30 is_stmt 0 view .LVU3393
 10490 08ca 3D4B     		ldr	r3, .L1144+36
 354:src/display.c **** #endif
 10491              		.loc 1 354 38 view .LVU3394
 10492 08cc 0199     		ldr	r1, [sp, #4]
 354:src/display.c **** #endif
 10493              		.loc 1 354 30 view .LVU3395
 10494 08ce A3FB0823 		umull	r2, r3, r3, r8
 10495 08d2 5B08     		lsrs	r3, r3, #1
 354:src/display.c **** #endif
 10496              		.loc 1 354 38 view .LVU3396
 10497 08d4 374A     		ldr	r2, .L1144+24
 354:src/display.c **** #endif
 10498              		.loc 1 354 35 view .LVU3397
 10499 08d6 0133     		adds	r3, r3, #1
 10500              	.LBE616:
 10501              	.LBE618:
 10502              	.LBE620:
 10503              	.LBE622:
2404:src/display.c **** 	      set_dig(j, 8);
 10504              		.loc 1 2404 9 view .LVU3398
 10505 08d8 BBF1040F 		cmp	fp, #4
 10506              	.LBB623:
ARM GAS  /tmp/ccadPcKu.s 			page 303


 10507              	.LBB621:
 10508              	.LBB619:
 10509              	.LBB617:
 354:src/display.c **** #endif
 10510              		.loc 1 354 38 view .LVU3399
 10511 08dc 02F81310 		strb	r1, [r2, r3, lsl #1]
 357:src/display.c **** }
 10512              		.loc 1 357 3 is_stmt 1 view .LVU3400
 10513              	.LVL1193:
 357:src/display.c **** }
 10514              		.loc 1 357 3 is_stmt 0 view .LVU3401
 10515              	.LBE617:
 10516              	.LBE619:
 357:src/display.c **** }
 10517              		.loc 1 357 3 is_stmt 1 view .LVU3402
 357:src/display.c **** }
 10518              		.loc 1 357 3 is_stmt 0 view .LVU3403
 10519              	.LBE621:
 10520              	.LBE623:
2403:src/display.c **** 	    if (i == 4) {
 10521              		.loc 1 2403 6 is_stmt 1 view .LVU3404
2404:src/display.c **** 	      set_dig(j, 8);
 10522              		.loc 1 2404 6 view .LVU3405
2404:src/display.c **** 	      set_dig(j, 8);
 10523              		.loc 1 2404 9 is_stmt 0 view .LVU3406
 10524 08e0 00F0A780 		beq	.L1129
2403:src/display.c **** 	    if (i == 4) {
 10525              		.loc 1 2403 8 view .LVU3407
 10526 08e4 C846     		mov	r8, r9
 10527              	.LVL1194:
 10528              	.L897:
2403:src/display.c **** 	    if (i == 4) {
 10529              		.loc 1 2403 8 view .LVU3408
 10530              	.LBE611:
2391:src/display.c **** 	    int k = i + base - start;
 10531              		.loc 1 2391 39 is_stmt 1 view .LVU3409
2391:src/display.c **** 	    int k = i + base - start;
 10532              		.loc 1 2391 40 is_stmt 0 view .LVU3410
 10533 08e6 009B     		ldr	r3, [sp]
2391:src/display.c **** 	    int k = i + base - start;
 10534              		.loc 1 2391 4 view .LVU3411
 10535 08e8 039A     		ldr	r2, [sp, #12]
 10536 08ea 9342     		cmp	r3, r2
 10537 08ec 07F10107 		add	r7, r7, #1
2391:src/display.c **** 	    int k = i + base - start;
 10538              		.loc 1 2391 40 view .LVU3412
 10539 08f0 9B46     		mov	fp, r3
 10540              	.LVL1195:
2391:src/display.c **** 	    int k = i + base - start;
 10541              		.loc 1 2391 20 is_stmt 1 view .LVU3413
2391:src/display.c **** 	    int k = i + base - start;
 10542              		.loc 1 2391 4 is_stmt 0 view .LVU3414
 10543 08f2 6DD0     		beq	.L1130
2391:src/display.c **** 	    int k = i + base - start;
 10544              		.loc 1 2391 4 view .LVU3415
 10545 08f4 009B     		ldr	r3, [sp]
2391:src/display.c **** 	    int k = i + base - start;
ARM GAS  /tmp/ccadPcKu.s 			page 304


 10546              		.loc 1 2391 4 view .LVU3416
 10547 08f6 0133     		adds	r3, r3, #1
 10548              	.LVL1196:
2391:src/display.c **** 	    int k = i + base - start;
 10549              		.loc 1 2391 4 view .LVU3417
 10550 08f8 0093     		str	r3, [sp]
 10551              	.LVL1197:
 10552              	.L898:
 10553              	.LBB632:
2392:src/display.c **** 	    int l = get_user_flag(k);
 10554              		.loc 1 2392 6 is_stmt 1 view .LVU3418
2393:src/display.c **** 	    k += group;
 10555              		.loc 1 2393 6 view .LVU3419
2393:src/display.c **** 	    k += group;
 10556              		.loc 1 2393 14 is_stmt 0 view .LVU3420
 10557 08fa 049B     		ldr	r3, [sp, #16]
 10558 08fc 03EB0B00 		add	r0, r3, fp
 10559 0900 FFF7FEFF 		bl	get_user_flag
 10560              	.LVL1198:
2395:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10561              		.loc 1 2395 9 view .LVU3421
 10562 0904 5745     		cmp	r7, r10
2393:src/display.c **** 	    k += group;
 10563              		.loc 1 2393 14 view .LVU3422
 10564 0906 0546     		mov	r5, r0
 10565              	.LVL1199:
2394:src/display.c **** 	    if (end >= k) {
 10566              		.loc 1 2394 6 is_stmt 1 view .LVU3423
2395:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10567              		.loc 1 2395 6 view .LVU3424
2403:src/display.c **** 	    if (i == 4) {
 10568              		.loc 1 2403 8 is_stmt 0 view .LVU3425
 10569 0908 08F10909 		add	r9, r8, #9
2395:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10570              		.loc 1 2395 9 view .LVU3426
 10571 090c D5DC     		bgt	.L896
2396:src/display.c **** 	      k += group;
 10572              		.loc 1 2396 8 is_stmt 1 view .LVU3427
2396:src/display.c **** 	      k += group;
 10573              		.loc 1 2396 14 is_stmt 0 view .LVU3428
 10574 090e 3846     		mov	r0, r7
 10575              	.LVL1200:
2396:src/display.c **** 	      k += group;
 10576              		.loc 1 2396 14 view .LVU3429
 10577 0910 FFF7FEFF 		bl	get_user_flag
 10578              	.LVL1201:
 10579 0914 029B     		ldr	r3, [sp, #8]
 10580 0916 5B44     		add	r3, r3, fp
2398:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10581              		.loc 1 2398 11 view .LVU3430
 10582 0918 9A45     		cmp	r10, r3
2396:src/display.c **** 	      k += group;
 10583              		.loc 1 2396 10 view .LVU3431
 10584 091a 45EA4005 		orr	r5, r5, r0, lsl #1
 10585              	.LVL1202:
2397:src/display.c **** 	      if (end >= k)
 10586              		.loc 1 2397 8 is_stmt 1 view .LVU3432
ARM GAS  /tmp/ccadPcKu.s 			page 305


2398:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10587              		.loc 1 2398 8 view .LVU3433
2398:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10588              		.loc 1 2398 11 is_stmt 0 view .LVU3434
 10589 091e CCDB     		blt	.L896
2399:src/display.c **** 	    }
 10590              		.loc 1 2399 3 is_stmt 1 view .LVU3435
2399:src/display.c **** 	    }
 10591              		.loc 1 2399 9 is_stmt 0 view .LVU3436
 10592 0920 1846     		mov	r0, r3
 10593 0922 FFF7FEFF 		bl	get_user_flag
 10594              	.LVL1203:
2399:src/display.c **** 	    }
 10595              		.loc 1 2399 5 view .LVU3437
 10596 0926 45EA8005 		orr	r5, r5, r0, lsl #2
 10597              	.LVL1204:
2399:src/display.c **** 	    }
 10598              		.loc 1 2399 5 view .LVU3438
 10599 092a C6E7     		b	.L896
 10600              	.LVL1205:
 10601              	.L865:
2399:src/display.c **** 	    }
 10602              		.loc 1 2399 5 view .LVU3439
 10603              	.LBE632:
 10604              	.LBE602:
 10605              	.LBE601:
 10606              	.LBE600:
2660:src/display.c **** 	    }
 10607              		.loc 1 2660 3 is_stmt 1 view .LVU3440
2660:src/display.c **** 	    }
 10608              		.loc 1 2660 8 is_stmt 0 view .LVU3441
 10609 092c 2189     		ldrh	r1, [r4, #8]
 10610 092e FFF7FEFF 		bl	num_arg_0
 10611              	.LVL1206:
2660:src/display.c **** 	    }
 10612              		.loc 1 2660 8 view .LVU3442
 10613 0932 78E6     		b	.L864
 10614              	.LVL1207:
 10615              	.L1117:
2743:src/display.c **** 	  skip = 1;
 10616              		.loc 1 2743 4 is_stmt 1 view .LVU3443
 10617              	.LBB641:
 10618              	.LBI641:
2462:src/display.c **** 	char buf[16], *bp;
 10619              		.loc 1 2462 19 view .LVU3444
 10620              	.LBB642:
2463:src/display.c **** 	int n = State2.digval;
 10621              		.loc 1 2463 2 view .LVU3445
2464:src/display.c **** 	
 10622              		.loc 1 2464 2 view .LVU3446
2464:src/display.c **** 	
 10623              		.loc 1 2464 6 is_stmt 0 view .LVU3447
 10624 0934 B4F808A0 		ldrh	r10, [r4, #8]
 10625              	.LVL1208:
2471:src/display.c **** 	  n;
 10626              		.loc 1 2471 2 is_stmt 1 view .LVU3448
2471:src/display.c **** 	  n;
ARM GAS  /tmp/ccadPcKu.s 			page 306


 10627              		.loc 1 2471 54 is_stmt 0 view .LVU3449
 10628 0938 CA07     		lsls	r2, r1, #31
 10629 093a 4CBF     		ite	mi
 10630 093c 0AF17008 		addmi	r8, r10, #112
2464:src/display.c **** 	
 10631              		.loc 1 2464 6 view .LVU3450
 10632 0940 D046     		movpl	r8, r10
 10633              	.LVL1209:
2475:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10634              		.loc 1 2475 2 is_stmt 1 view .LVU3451
2475:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10635              		.loc 1 2475 5 is_stmt 0 view .LVU3452
 10636 0942 11F00401 		ands	r1, r1, #4
 10637 0946 00F01B82 		beq	.L910
2476:src/display.c **** 	}
 10638              		.loc 1 2476 4 is_stmt 1 view .LVU3453
2476:src/display.c **** 	}
 10639              		.loc 1 2476 15 is_stmt 0 view .LVU3454
 10640 094a 15A9     		add	r1, sp, #84
 10641 094c 4046     		mov	r0, r8
 10642 094e FFF7FEFF 		bl	alpha_rcl_s
 10643              	.LVL1210:
2476:src/display.c **** 	}
 10644              		.loc 1 2476 4 view .LVU3455
 10645 0952 FFF7FEFF 		bl	set_status
 10646              	.LVL1211:
 10647              	.L911:
2498:src/display.c ****       }
 10648              		.loc 1 2498 2 is_stmt 1 view .LVU3456
 10649 0956 4046     		mov	r0, r8
 10650 0958 0021     		movs	r1, #0
 10651 095a FFF7FEFF 		bl	format_reg
 10652              	.LVL1212:
2498:src/display.c ****       }
 10653              		.loc 1 2498 2 is_stmt 0 view .LVU3457
 10654              	.LBE642:
 10655              	.LBE641:
2744:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10656              		.loc 1 2744 4 is_stmt 1 view .LVU3458
2745:src/display.c **** 	    annunciators();
 10657              		.loc 1 2745 4 view .LVU3459
2745:src/display.c **** 	    annunciators();
 10658              		.loc 1 2745 7 is_stmt 0 view .LVU3460
 10659 095e B9F1000F 		cmp	r9, #0
 10660 0962 40F0E581 		bne	.L917
2745:src/display.c **** 	    annunciators();
 10661              		.loc 1 2745 25 discriminator 1 view .LVU3461
 10662 0966 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10663 0968 012B     		cmp	r3, #1
 10664 096a 00F0DA81 		beq	.L1131
 10665              	.L918:
2803:src/display.c ****       nostk:
 10666              		.loc 1 2803 2 is_stmt 1 view .LVU3462
 10667 096e FFF7FEFF 		bl	show_stack
 10668              	.LVL1213:
2805:src/display.c **** 	if (!skip) {
 10669              		.loc 1 2805 2 view .LVU3463
ARM GAS  /tmp/ccadPcKu.s 			page 307


2560:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10670              		.loc 1 2560 6 is_stmt 0 view .LVU3464
 10671 0972 0025     		movs	r5, #0
2805:src/display.c **** 	if (!skip) {
 10672              		.loc 1 2805 2 view .LVU3465
 10673 0974 FFF7FEFF 		bl	show_flags
 10674              	.LVL1214:
2806:src/display.c **** 	  if (State2.runmode) {
 10675              		.loc 1 2806 2 is_stmt 1 view .LVU3466
 10676 0978 DFE6     		b	.L881
 10677              	.LVL1215:
 10678              	.L1123:
 10679              	.LBB645:
2688:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10680              		.loc 1 2688 6 view .LVU3467
2688:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10681              		.loc 1 2688 9 is_stmt 0 view .LVU3468
 10682 097a B5F5274F 		cmp	r5, #42752
 10683 097e 6CD0     		beq	.L873
2688:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10684              		.loc 1 2688 41 discriminator 1 view .LVU3469
 10685 0980 B5F5284F 		cmp	r5, #43008
 10686 0984 69D0     		beq	.L873
2691:src/display.c **** 	    skip = 1;
 10687              		.loc 1 2691 8 is_stmt 1 view .LVU3470
2691:src/display.c **** 	    skip = 1;
 10688              		.loc 1 2691 14 is_stmt 0 view .LVU3471
 10689 0986 05F07F00 		and	r0, r5, #127
 10690 098a 0021     		movs	r1, #0
 10691 098c FFF7FEFF 		bl	get_const
 10692              	.LVL1216:
2691:src/display.c **** 	    skip = 1;
 10693              		.loc 1 2691 8 view .LVU3472
 10694 0990 0022     		movs	r2, #0
 10695 0992 1146     		mov	r1, r2
 10696 0994 FFF7FEFF 		bl	set_x
 10697              	.LVL1217:
 10698 0998 C0E6     		b	.L875
 10699              	.L1145:
 10700 099a 00BF     		.align	2
 10701              	.L1144:
 10702 099c 00000000 		.word	main_ram
 10703 09a0 3C000000 		.word	.LC29
 10704 09a4 00000000 		.word	StackBase
 10705 09a8 00000000 		.word	DispPlot
 10706 09ac 00000000 		.word	DispMsg
 10707 09b0 00000000 		.word	multicmds
 10708 09b4 00000000 		.word	LastDisplayedNumber
 10709 09b8 98000000 		.word	.LC39
 10710 09bc 8C000000 		.word	.LC38
 10711 09c0 398EE338 		.word	954437177
 10712 09c4 00000000 		.word	ShowRegister
 10713 09c8 00000000 		.word	.LANCHOR22
 10714 09cc 00000000 		.word	.LANCHOR23
 10715              	.LVL1218:
 10716              	.L1130:
2691:src/display.c **** 	    skip = 1;
ARM GAS  /tmp/ccadPcKu.s 			page 308


 10717              		.loc 1 2691 8 view .LVU3473
 10718 09d0 059D     		ldr	r5, [sp, #20]
 10719              	.LVL1219:
2691:src/display.c **** 	    skip = 1;
 10720              		.loc 1 2691 8 view .LVU3474
 10721 09d2 DFF87083 		ldr	r8, .L1146+12
 10722              	.LVL1220:
 10723              	.L889:
2691:src/display.c **** 	    skip = 1;
 10724              		.loc 1 2691 8 view .LVU3475
 10725              	.LBE645:
 10726              	.LBB646:
 10727              	.LBB637:
2412:src/display.c **** 	pc = state_pc();
 10728              		.loc 1 2412 2 is_stmt 1 view .LVU3476
2413:src/display.c **** 	if (isXROM(pc))
 10729              		.loc 1 2413 2 view .LVU3477
2413:src/display.c **** 	if (isXROM(pc))
 10730              		.loc 1 2413 7 is_stmt 0 view .LVU3478
 10731 09d6 D8F80030 		ldr	r3, [r8]
2413:src/display.c **** 	if (isXROM(pc))
 10732              		.loc 1 2413 5 view .LVU3479
 10733 09da B3F8E087 		ldrh	r8, [r3, #2016]
 10734              	.LVL1221:
2414:src/display.c **** 	  pc = 1;
 10735              		.loc 1 2414 2 is_stmt 1 view .LVU3480
2414:src/display.c **** 	  pc = 1;
 10736              		.loc 1 2414 6 is_stmt 0 view .LVU3481
 10737 09de 4FEA9833 		lsr	r3, r8, #14
2415:src/display.c **** 	for (n=i=0; i<4; i++) {
 10738              		.loc 1 2415 7 view .LVU3482
 10739 09e2 032B     		cmp	r3, #3
 10740 09e4 08BF     		it	eq
 10741 09e6 4FF00108 		moveq	r8, #1
 10742              	.LVL1222:
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10743              		.loc 1 2416 2 is_stmt 1 view .LVU3483
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10744              		.loc 1 2416 14 view .LVU3484
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10745              		.loc 1 2416 8 is_stmt 0 view .LVU3485
 10746 09ea 4FF0000A 		mov	r10, #0
 10747 09ee 6427     		movs	r7, #100
2412:src/display.c **** 	pc = state_pc();
 10748              		.loc 1 2412 4 view .LVU3486
 10749 09f0 4FF06C09 		mov	r9, #108
 10750              	.LVL1223:
 10751              	.L902:
2417:src/display.c **** 	    if (++n == 4) {
 10752              		.loc 1 2417 4 is_stmt 1 view .LVU3487
2417:src/display.c **** 	    if (++n == 4) {
 10753              		.loc 1 2417 8 is_stmt 0 view .LVU3488
 10754 09f4 0222     		movs	r2, #2
 10755 09f6 3946     		mov	r1, r7
 10756 09f8 4046     		mov	r0, r8
 10757 09fa FFF7FEFF 		bl	find_label_from
 10758              	.LVL1224:
ARM GAS  /tmp/ccadPcKu.s 			page 309


2418:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10759              		.loc 1 2418 6 is_stmt 1 view .LVU3489
2417:src/display.c **** 	    if (++n == 4) {
 10760              		.loc 1 2417 7 is_stmt 0 view .LVU3490
 10761 09fe 58B1     		cbz	r0, .L900
2418:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10762              		.loc 1 2418 9 view .LVU3491
 10763 0a00 0AF1010A 		add	r10, r10, #1
 10764              	.LVL1225:
2422:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10765              		.loc 1 2422 8 is_stmt 1 view .LVU3492
2418:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10766              		.loc 1 2418 9 is_stmt 0 view .LVU3493
 10767 0a04 BAF1040F 		cmp	r10, #4
2422:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10768              		.loc 1 2422 8 view .LVU3494
 10769 0a08 A7F12301 		sub	r1, r7, #35
 10770 0a0c 4846     		mov	r0, r9
2418:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10771              		.loc 1 2418 9 view .LVU3495
 10772 0a0e 07D0     		beq	.L1132
2422:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10773              		.loc 1 2422 8 view .LVU3496
 10774 0a10 FFF7FEFF 		bl	set_dig
 10775              	.LVL1226:
2423:src/display.c **** 	    }
 10776              		.loc 1 2423 8 is_stmt 1 view .LVU3497
2423:src/display.c **** 	    }
 10777              		.loc 1 2423 10 is_stmt 0 view .LVU3498
 10778 0a14 09F10709 		add	r9, r9, #7
 10779              	.LVL1227:
 10780              	.L900:
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10781              		.loc 1 2416 19 is_stmt 1 view .LVU3499
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10782              		.loc 1 2416 14 view .LVU3500
 10783 0a18 0137     		adds	r7, r7, #1
 10784              	.LVL1228:
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10785              		.loc 1 2416 2 is_stmt 0 view .LVU3501
 10786 0a1a 682F     		cmp	r7, #104
 10787 0a1c EAD1     		bne	.L902
2416:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10788              		.loc 1 2416 2 view .LVU3502
 10789 0a1e 88E6     		b	.L1098
 10790              	.LVL1229:
 10791              	.L1132:
2419:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10792              		.loc 1 2419 8 is_stmt 1 view .LVU3503
 10793 0a20 4C21     		movs	r1, #76
 10794 0a22 7320     		movs	r0, #115
 10795              	.LVL1230:
2419:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10796              		.loc 1 2419 8 is_stmt 0 view .LVU3504
 10797 0a24 FFF7FEFF 		bl	set_dig
 10798              	.LVL1231:
2420:src/display.c **** 	    } else {
ARM GAS  /tmp/ccadPcKu.s 			page 310


 10799              		.loc 1 2420 8 is_stmt 1 view .LVU3505
 10800 0a28 4C21     		movs	r1, #76
 10801 0a2a 7A20     		movs	r0, #122
 10802 0a2c FFF7FEFF 		bl	set_dig
 10803              	.LVL1232:
 10804 0a30 F2E7     		b	.L900
 10805              	.LVL1233:
 10806              	.L1129:
 10807              	.LBB634:
 10808              	.LBB633:
2405:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10809              		.loc 1 2405 8 view .LVU3506
 10810 0a32 0821     		movs	r1, #8
 10811 0a34 4846     		mov	r0, r9
 10812 0a36 FFF7FEFF 		bl	set_dig
 10813              	.LVL1234:
2406:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10814              		.loc 1 2406 8 view .LVU3507
 10815              	.LBB624:
 10816              	.LBI624:
 346:src/display.c ****   if (res) {
 10817              		.loc 1 346 14 view .LVU3508
 10818              	.LBB625:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10819              		.loc 1 347 3 view .LVU3509
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10820              		.loc 1 350 5 view .LVU3510
 10821 0a3a 08F11000 		add	r0, r8, #16
 10822 0a3e FFF7FEFF 		bl	set_dot
 10823              	.LVL1235:
 351:src/display.c ****       set_dot(posn+8);
 10824              		.loc 1 351 5 view .LVU3511
 10825              	.LBB626:
 10826              	.LBI626:
 346:src/display.c ****   if (res) {
 10827              		.loc 1 346 14 view .LVU3512
 10828              	.LBB627:
 354:src/display.c **** #endif
 10829              		.loc 1 354 5 view .LVU3513
 354:src/display.c **** #endif
 10830              		.loc 1 354 30 is_stmt 0 view .LVU3514
 10831 0a42 BD4B     		ldr	r3, .L1146
 354:src/display.c **** #endif
 10832              		.loc 1 354 38 view .LVU3515
 10833 0a44 0199     		ldr	r1, [sp, #4]
 354:src/display.c **** #endif
 10834              		.loc 1 354 30 view .LVU3516
 10835 0a46 A3FB0923 		umull	r2, r3, r3, r9
 10836 0a4a 5B08     		lsrs	r3, r3, #1
 354:src/display.c **** #endif
 10837              		.loc 1 354 38 view .LVU3517
 10838 0a4c BB4A     		ldr	r2, .L1146+4
 354:src/display.c **** #endif
 10839              		.loc 1 354 35 view .LVU3518
 10840 0a4e 0133     		adds	r3, r3, #1
 10841              	.LBE627:
 10842              	.LBE626:
ARM GAS  /tmp/ccadPcKu.s 			page 311


 10843              	.LBE625:
 10844              	.LBE624:
2407:src/display.c **** 	    }
 10845              		.loc 1 2407 10 view .LVU3519
 10846 0a50 08F11208 		add	r8, r8, #18
 10847              	.LBB631:
 10848              	.LBB630:
 10849              	.LBB629:
 10850              	.LBB628:
 354:src/display.c **** #endif
 10851              		.loc 1 354 38 view .LVU3520
 10852 0a54 02F81310 		strb	r1, [r2, r3, lsl #1]
 357:src/display.c **** }
 10853              		.loc 1 357 3 is_stmt 1 view .LVU3521
 10854              	.LVL1236:
 357:src/display.c **** }
 10855              		.loc 1 357 3 is_stmt 0 view .LVU3522
 10856              	.LBE628:
 10857              	.LBE629:
 357:src/display.c **** }
 10858              		.loc 1 357 3 is_stmt 1 view .LVU3523
 357:src/display.c **** }
 10859              		.loc 1 357 3 is_stmt 0 view .LVU3524
 10860              	.LBE630:
 10861              	.LBE631:
2407:src/display.c **** 	    }
 10862              		.loc 1 2407 8 is_stmt 1 view .LVU3525
2407:src/display.c **** 	    }
 10863              		.loc 1 2407 8 is_stmt 0 view .LVU3526
 10864 0a58 45E7     		b	.L897
 10865              	.LVL1237:
 10866              	.L873:
2407:src/display.c **** 	    }
 10867              		.loc 1 2407 8 view .LVU3527
 10868              	.LBE633:
 10869              	.LBE634:
 10870              	.LBE637:
 10871              	.LBE646:
 10872              	.LBB647:
2689:src/display.c **** 	    else
 10873              		.loc 1 2689 8 is_stmt 1 view .LVU3528
 10874 0a5a B948     		ldr	r0, .L1146+8
 10875 0a5c 0021     		movs	r1, #0
 10876 0a5e FFF7FEFF 		bl	set_digits_string
 10877              	.LVL1238:
 10878 0a62 5BE6     		b	.L875
 10879              	.LVL1239:
 10880              	.L919:
2689:src/display.c **** 	    else
 10881              		.loc 1 2689 8 is_stmt 0 view .LVU3529
 10882              	.LBE647:
2793:src/display.c **** 	  if (i > 0)
 10883              		.loc 1 2793 4 is_stmt 1 view .LVU3530
2793:src/display.c **** 	  if (i > 0)
 10884              		.loc 1 2793 8 is_stmt 0 view .LVU3531
 10885 0a64 B74B     		ldr	r3, .L1146+12
 10886 0a66 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccadPcKu.s 			page 312


 10887 0a68 B3F8E007 		ldrh	r0, [r3, #2016]
 10888              	.LVL1240:
2794:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10889              		.loc 1 2794 4 is_stmt 1 view .LVU3532
2794:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10890              		.loc 1 2794 7 is_stmt 0 view .LVU3533
 10891 0a6c 0028     		cmp	r0, #0
 10892 0a6e 3BD0     		beq	.L931
2795:src/display.c **** 	  else
 10893              		.loc 1 2795 6 is_stmt 1 view .LVU3534
 10894 0a70 FFF7FEFF 		bl	getprog
 10895              	.LVL1241:
2795:src/display.c **** 	  else
 10896              		.loc 1 2795 6 is_stmt 0 view .LVU3535
 10897 0a74 1EA9     		add	r1, sp, #120
 10898              	.LVL1242:
2795:src/display.c **** 	  else
 10899              		.loc 1 2795 6 view .LVU3536
 10900 0a76 FFF7FEFF 		bl	prt
 10901              	.LVL1243:
2795:src/display.c **** 	  else
 10902              		.loc 1 2795 6 view .LVU3537
 10903 0a7a FFF7FEFF 		bl	set_status
 10904              	.LVL1244:
 10905              	.L932:
2798:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 10906              		.loc 1 2798 4 is_stmt 1 view .LVU3538
 10907 0a7e 8920     		movs	r0, #137
 10908 0a80 FFF7FEFF 		bl	set_dot
 10909              	.LVL1245:
2799:src/display.c **** 	      annuc = 1;
 10910              		.loc 1 2799 6 view .LVU3539
2799:src/display.c **** 	      annuc = 1;
 10911              		.loc 1 2799 10 is_stmt 0 view .LVU3540
 10912 0a84 FFF7FEFF 		bl	cur_shift
 10913              	.LVL1246:
2799:src/display.c **** 	      annuc = 1;
 10914              		.loc 1 2799 49 view .LVU3541
 10915 0a88 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10916 0a8a 03F00603 		and	r3, r3, #6
 10917 0a8e 1843     		orrs	r0, r0, r3
 10918 0a90 10F0FF0F 		tst	r0, #255
 10919 0a94 20D1     		bne	.L933
2805:src/display.c **** 	if (!skip) {
 10920              		.loc 1 2805 2 is_stmt 1 view .LVU3542
 10921 0a96 FFF7FEFF 		bl	show_flags
 10922              	.LVL1247:
2806:src/display.c **** 	  if (State2.runmode) {
 10923              		.loc 1 2806 2 view .LVU3543
 10924 0a9a AB4B     		ldr	r3, .L1146+16
 10925 0a9c AB4F     		ldr	r7, .L1146+20
 10926 0a9e 0093     		str	r3, [sp]
 10927 0aa0 FFF7E6BA 		b	.L851
 10928              	.LVL1248:
 10929              	.L1128:
 10930              	.LBB648:
 10931              	.LBB638:
ARM GAS  /tmp/ccadPcKu.s 			page 313


 10932              	.LBB635:
2377:src/display.c **** 	    end = regK_idx;
 10933              		.loc 1 2377 6 view .LVU3544
2378:src/display.c **** 	    start = 3;
 10934              		.loc 1 2378 6 view .LVU3545
2379:src/display.c **** 	    group = 4;
 10935              		.loc 1 2379 6 view .LVU3546
2380:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 10936              		.loc 1 2380 6 view .LVU3547
2381:src/display.c **** 	  }
 10937              		.loc 1 2381 6 view .LVU3548
 10938 0aa4 AA48     		ldr	r0, .L1146+24
 10939 0aa6 FFF7FEFF 		bl	set_status
 10940              	.LVL1249:
2379:src/display.c **** 	    group = 4;
 10941              		.loc 1 2379 12 is_stmt 0 view .LVU3549
 10942 0aaa 4FF0030B 		mov	fp, #3
 10943              	.LVL1250:
2380:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 10944              		.loc 1 2380 12 view .LVU3550
 10945 0aae 0427     		movs	r7, #4
2378:src/display.c **** 	    start = 3;
 10946              		.loc 1 2378 10 view .LVU3551
 10947 0ab0 4FF06F0A 		mov	r10, #111
2377:src/display.c **** 	    end = regK_idx;
 10948              		.loc 1 2377 11 view .LVU3552
 10949 0ab4 4FF06409 		mov	r9, #100
 10950              	.LVL1251:
2377:src/display.c **** 	    end = regK_idx;
 10951              		.loc 1 2377 11 view .LVU3553
 10952 0ab8 E0E6     		b	.L894
 10953              	.LVL1252:
 10954              	.L920:
2377:src/display.c **** 	    end = regK_idx;
 10955              		.loc 1 2377 11 view .LVU3554
 10956              	.LBE635:
 10957              	.LBE638:
 10958              	.LBE648:
2755:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10959              		.loc 1 2755 11 is_stmt 1 view .LVU3555
2755:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10960              		.loc 1 2755 15 is_stmt 0 view .LVU3556
 10961 0aba A34B     		ldr	r3, .L1146+16
 10962 0abc 0093     		str	r3, [sp]
 10963 0abe B3F90020 		ldrsh	r2, [r3]
2755:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10964              		.loc 1 2755 14 view .LVU3557
 10965 0ac2 002A     		cmp	r2, #0
 10966 0ac4 4BD1     		bne	.L1133
2757:src/display.c **** #if 0
 10967              		.loc 1 2757 11 is_stmt 1 view .LVU3558
2757:src/display.c **** #if 0
 10968              		.loc 1 2757 14 is_stmt 0 view .LVU3559
 10969 0ac6 0907     		lsls	r1, r1, #28
 10970 0ac8 12D4     		bmi	.L1134
 10971              	.LVL1253:
2803:src/display.c ****       nostk:
ARM GAS  /tmp/ccadPcKu.s 			page 314


 10972              		.loc 1 2803 2 is_stmt 1 view .LVU3560
 10973 0aca FFF7FEFF 		bl	show_stack
 10974              	.LVL1254:
2805:src/display.c **** 	if (!skip) {
 10975              		.loc 1 2805 2 view .LVU3561
2787:src/display.c **** 	  }
 10976              		.loc 1 2787 12 is_stmt 0 view .LVU3562
 10977 0ace 0125     		movs	r5, #1
2805:src/display.c **** 	if (!skip) {
 10978              		.loc 1 2805 2 view .LVU3563
 10979 0ad0 FFF7FEFF 		bl	show_flags
 10980              	.LVL1255:
2806:src/display.c **** 	  if (State2.runmode) {
 10981              		.loc 1 2806 2 is_stmt 1 view .LVU3564
 10982 0ad4 FFF7CCBA 		b	.L851
 10983              	.LVL1256:
 10984              	.L933:
2800:src/display.c **** 	  goto nostk;
 10985              		.loc 1 2800 8 view .LVU3565
2805:src/display.c **** 	if (!skip) {
 10986              		.loc 1 2805 2 view .LVU3566
 10987 0ad8 FFF7FEFF 		bl	show_flags
 10988              	.LVL1257:
2806:src/display.c **** 	  if (State2.runmode) {
 10989              		.loc 1 2806 2 view .LVU3567
 10990 0adc 9A4B     		ldr	r3, .L1146+16
 10991 0ade 9B4F     		ldr	r7, .L1146+20
 10992 0ae0 0093     		str	r3, [sp]
2800:src/display.c **** 	  goto nostk;
 10993              		.loc 1 2800 14 is_stmt 0 view .LVU3568
 10994 0ae2 0125     		movs	r5, #1
 10995 0ae4 FFF7C4BA 		b	.L851
 10996              	.LVL1258:
 10997              	.L931:
2797:src/display.c **** 	  set_dot(STO_annun);
 10998              		.loc 1 2797 6 is_stmt 1 view .LVU3569
 10999 0ae8 9A48     		ldr	r0, .L1146+28
 11000              	.LVL1259:
2797:src/display.c **** 	  set_dot(STO_annun);
 11001              		.loc 1 2797 6 is_stmt 0 view .LVU3570
 11002 0aea FFF7FEFF 		bl	set_status
 11003              	.LVL1260:
2797:src/display.c **** 	  set_dot(STO_annun);
 11004              		.loc 1 2797 6 view .LVU3571
 11005 0aee C6E7     		b	.L932
 11006              	.L1134:
2761:src/display.c **** 	    j = State2.alpha_pos;
 11007              		.loc 1 2761 6 is_stmt 1 view .LVU3572
2761:src/display.c **** 	    j = State2.alpha_pos;
 11008              		.loc 1 2761 22 is_stmt 0 view .LVU3573
 11009 0af0 944B     		ldr	r3, .L1146+12
 11010 0af2 0192     		str	r2, [sp, #4]
 11011 0af4 1968     		ldr	r1, [r3]
2761:src/display.c **** 	    j = State2.alpha_pos;
 11012              		.loc 1 2761 11 view .LVU3574
 11013 0af6 1EA8     		add	r0, sp, #120
 11014              	.LVL1261:
ARM GAS  /tmp/ccadPcKu.s 			page 315


2761:src/display.c **** 	    j = State2.alpha_pos;
 11015              		.loc 1 2761 11 view .LVU3575
 11016 0af8 01F5F661 		add	r1, r1, #1968
 11017 0afc FFF7FEFF 		bl	scopy
 11018              	.LVL1262:
2762:src/display.c **** 	    if (j != 0) {
 11019              		.loc 1 2762 16 view .LVU3576
 11020 0b00 94F80D80 		ldrb	r8, [r4, #13]	@ zero_extendqisi2
 11021              	.LVL1263:
2762:src/display.c **** 	    if (j != 0) {
 11022              		.loc 1 2762 6 is_stmt 1 view .LVU3577
2763:src/display.c **** 	      i = slen(buf);
 11023              		.loc 1 2763 6 view .LVU3578
2763:src/display.c **** 	      i = slen(buf);
 11024              		.loc 1 2763 9 is_stmt 0 view .LVU3579
 11025 0b04 B8F1000F 		cmp	r8, #0
 11026 0b08 12D1     		bne	.L1135
2780:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11027              		.loc 1 2780 8 is_stmt 1 view .LVU3580
2780:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11028              		.loc 1 2780 11 is_stmt 0 view .LVU3581
 11029 0b0a B9F1000F 		cmp	r9, #0
 11030 0b0e 05D0     		beq	.L930
2781:src/display.c **** 		*bp++ = '\0';
 11031              		.loc 1 2781 3 is_stmt 1 view .LVU3582
 11032              	.LVL1264:
2781:src/display.c **** 		*bp++ = '\0';
 11033              		.loc 1 2781 23 is_stmt 0 view .LVU3583
 11034 0b10 09F11009 		add	r9, r9, #16
2781:src/display.c **** 		*bp++ = '\0';
 11035              		.loc 1 2781 9 view .LVU3584
 11036 0b14 80F80090 		strb	r9, [r0]
2782:src/display.c **** 	      }
 11037              		.loc 1 2782 3 is_stmt 1 view .LVU3585
 11038              	.LVL1265:
2782:src/display.c **** 	      }
 11039              		.loc 1 2782 9 is_stmt 0 view .LVU3586
 11040 0b18 80F80180 		strb	r8, [r0, #1]
 11041              	.LVL1266:
 11042              	.L930:
2784:src/display.c **** 	    }
 11043              		.loc 1 2784 8 is_stmt 1 view .LVU3587
 11044 0b1c 1EA8     		add	r0, sp, #120
 11045 0b1e FFF7FEFF 		bl	set_status_right
 11046              	.LVL1267:
2803:src/display.c ****       nostk:
 11047              		.loc 1 2803 2 view .LVU3588
2560:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11048              		.loc 1 2560 6 is_stmt 0 view .LVU3589
 11049 0b22 0025     		movs	r5, #0
2803:src/display.c ****       nostk:
 11050              		.loc 1 2803 2 view .LVU3590
 11051 0b24 FFF7FEFF 		bl	show_stack
 11052              	.LVL1268:
2805:src/display.c **** 	if (!skip) {
 11053              		.loc 1 2805 2 is_stmt 1 view .LVU3591
 11054 0b28 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/ccadPcKu.s 			page 316


 11055              	.LVL1269:
2806:src/display.c **** 	  if (State2.runmode) {
 11056              		.loc 1 2806 2 view .LVU3592
 11057 0b2c FFF7A0BA 		b	.L851
 11058              	.LVL1270:
 11059              	.L1135:
2764:src/display.c **** 	      //				
 11060              		.loc 1 2764 8 view .LVU3593
2764:src/display.c **** 	      //				
 11061              		.loc 1 2764 12 is_stmt 0 view .LVU3594
 11062 0b30 1EA8     		add	r0, sp, #120
 11063              	.LVL1271:
2764:src/display.c **** 	      //				
 11064              		.loc 1 2764 12 view .LVU3595
 11065 0b32 FFF7FEFF 		bl	slen
 11066              	.LVL1272:
2766:src/display.c **** #ifdef BIGGER_DISPLAY
 11067              		.loc 1 2766 8 is_stmt 1 view .LVU3596
2768:src/display.c **** #else
 11068              		.loc 1 2768 8 view .LVU3597
2766:src/display.c **** #ifdef BIGGER_DISPLAY
 11069              		.loc 1 2766 10 is_stmt 0 view .LVU3598
 11070 0b36 08EB4803 		add	r3, r8, r8, lsl #1
2768:src/display.c **** #else
 11071              		.loc 1 2768 15 view .LVU3599
 11072 0b3a A0EB4300 		sub	r0, r0, r3, lsl #1
 11073              	.LVL1273:
2768:src/display.c **** #else
 11074              		.loc 1 2768 11 view .LVU3600
 11075 0b3e 1328     		cmp	r0, #19
 11076 0b40 38DD     		ble	.L929
2773:src/display.c **** 		set_status_right(buf);
 11077              		.loc 1 2773 3 is_stmt 1 view .LVU3601
2773:src/display.c **** 		set_status_right(buf);
 11078              		.loc 1 2773 18 is_stmt 0 view .LVU3602
 11079 0b42 28AB     		add	r3, sp, #160
 11080 0b44 0344     		add	r3, r3, r0
 11081 0b46 019A     		ldr	r2, [sp, #4]
 11082 0b48 03F8282C 		strb	r2, [r3, #-40]
2774:src/display.c **** 		}
 11083              		.loc 1 2774 3 is_stmt 1 view .LVU3603
 11084 0b4c 1EA8     		add	r0, sp, #120
 11085 0b4e FFF7FEFF 		bl	set_status_right
 11086              	.LVL1274:
2803:src/display.c ****       nostk:
 11087              		.loc 1 2803 2 view .LVU3604
 11088 0b52 FFF7FEFF 		bl	show_stack
 11089              	.LVL1275:
2805:src/display.c **** 	if (!skip) {
 11090              		.loc 1 2805 2 view .LVU3605
 11091 0b56 FFF7FEFF 		bl	show_flags
 11092              	.LVL1276:
2806:src/display.c **** 	  if (State2.runmode) {
 11093              		.loc 1 2806 2 view .LVU3606
 11094 0b5a FFF789BA 		b	.L851
 11095              	.LVL1277:
 11096              	.L1133:
ARM GAS  /tmp/ccadPcKu.s 			page 317


2756:src/display.c **** 	  } else if (State2.alphas) {
 11097              		.loc 1 2756 6 view .LVU3607
2756:src/display.c **** 	  } else if (State2.alphas) {
 11098              		.loc 1 2756 48 is_stmt 0 view .LVU3608
 11099 0b5e 501E     		subs	r0, r2, #1
 11100 0b60 FFF7FEFF 		bl	get_reg_n
 11101              	.LVL1278:
 11102              	.LBB649:
 11103              	.LBI649:
3229:src/display.c **** 	int glen = *graphic++;
 11104              		.loc 1 3229 19 is_stmt 1 view .LVU3609
 11105              	.LBB650:
3230:src/display.c **** 	int i, j;
 11106              		.loc 1 3230 2 view .LVU3610
3238:src/display.c **** #endif
 11107              		.loc 1 3238 15 is_stmt 0 view .LVU3611
 11108 0b64 7C4B     		ldr	r3, .L1146+32
3230:src/display.c **** 	int i, j;
 11109              		.loc 1 3230 6 view .LVU3612
 11110 0b66 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11111              	.LVL1279:
3231:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11112              		.loc 1 3231 2 is_stmt 1 view .LVU3613
3238:src/display.c **** #endif
 11113              		.loc 1 3238 2 view .LVU3614
3238:src/display.c **** #endif
 11114              		.loc 1 3238 15 is_stmt 0 view .LVU3615
 11115 0b68 0122     		movs	r2, #1
 11116 0b6a 1A70     		strb	r2, [r3]
3240:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11117              		.loc 1 3240 2 is_stmt 1 view .LVU3616
3240:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11118              		.loc 1 3240 5 is_stmt 0 view .LVU3617
 11119 0b6c 0029     		cmp	r1, #0
 11120 0b6e 3FF47BAA 		beq	.L1093
3241:src/display.c **** 
 11121              		.loc 1 3241 2 is_stmt 1 view .LVU3618
 11122              	.LVL1280:
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11123              		.loc 1 3243 2 view .LVU3619
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11124              		.loc 1 3243 12 view .LVU3620
 11125 0b72 8318     		adds	r3, r0, r2
 11126 0b74 0393     		str	r3, [sp, #12]
 11127 0b76 4A29     		cmp	r1, #74
 11128 0b78 D4BF     		ite	le
 11129 0b7a 5B18     		addle	r3, r3, r1
 11130 0b7c 4A33     		addgt	r3, r3, #74
 11131 0b7e CDE90132 		strd	r3, r2, [sp, #4]
 11132 0b82 CDE90457 		strd	r5, r7, [sp, #16]
 11133              	.LVL1281:
 11134              	.L923:
3244:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11135              		.loc 1 3244 14 view .LVU3621
 11136 0b86 029B     		ldr	r3, [sp, #8]
 11137 0b88 039F     		ldr	r7, [sp, #12]
 11138 0b8a 03FA08F9 		lsl	r9, r3, r8
ARM GAS  /tmp/ccadPcKu.s 			page 318


 11139 0b8e 08F19405 		add	r5, r8, #148
 11140 0b92 06E0     		b	.L926
 11141              	.LVL1282:
 11142              	.L1137:
 11143              	.LBB651:
 11144              	.LBB652:
 337:src/display.c ****   else	clr_dot(n);
 11145              		.loc 1 337 11 is_stmt 0 view .LVU3622
 11146 0b94 FFF7FEFF 		bl	set_dot
 11147              	.LVL1283:
 11148              	.L925:
 337:src/display.c ****   else	clr_dot(n);
 11149              		.loc 1 337 11 view .LVU3623
 11150              	.LBE652:
 11151              	.LBE651:
3244:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11152              		.loc 1 3244 23 is_stmt 1 view .LVU3624
3244:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11153              		.loc 1 3244 14 view .LVU3625
3244:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11154              		.loc 1 3244 4 is_stmt 0 view .LVU3626
 11155 0b98 019B     		ldr	r3, [sp, #4]
 11156 0b9a BB42     		cmp	r3, r7
 11157 0b9c 05F10605 		add	r5, r5, #6
 11158 0ba0 11D0     		beq	.L1136
 11159              	.LVL1284:
 11160              	.L926:
3249:src/display.c **** #endif
 11161              		.loc 1 3249 6 is_stmt 1 view .LVU3627
 11162              	.LBB655:
 11163              	.LBI651:
 336:src/display.c ****   if (on)	set_dot(n);
 11164              		.loc 1 336 6 view .LVU3628
 11165              	.LBB653:
 337:src/display.c ****   else	clr_dot(n);
 11166              		.loc 1 337 3 view .LVU3629
 337:src/display.c ****   else	clr_dot(n);
 11167              		.loc 1 337 11 view .LVU3630
 338:src/display.c **** }
 11168              		.loc 1 338 8 view .LVU3631
 11169              	.LBE653:
 11170              	.LBE655:
3249:src/display.c **** #endif
 11171              		.loc 1 3249 37 is_stmt 0 view .LVU3632
 11172 0ba2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11173              	.LVL1285:
 11174              	.LBB656:
 11175              	.LBB654:
 337:src/display.c ****   else	clr_dot(n);
 11176              		.loc 1 337 6 view .LVU3633
 11177 0ba6 13EA090F 		tst	r3, r9
 337:src/display.c ****   else	clr_dot(n);
 11178              		.loc 1 337 11 view .LVU3634
 11179 0baa 2846     		mov	r0, r5
 337:src/display.c ****   else	clr_dot(n);
 11180              		.loc 1 337 6 view .LVU3635
 11181 0bac F2D1     		bne	.L1137
ARM GAS  /tmp/ccadPcKu.s 			page 319


 338:src/display.c **** }
 11182              		.loc 1 338 8 view .LVU3636
 11183 0bae FFF7FEFF 		bl	clr_dot
 11184              	.LVL1286:
 11185 0bb2 F1E7     		b	.L925
 11186              	.LVL1287:
 11187              	.L929:
 338:src/display.c **** }
 11188              		.loc 1 338 8 view .LVU3637
 11189              	.LBE654:
 11190              	.LBE656:
 11191              	.LBE650:
 11192              	.LBE649:
2777:src/display.c **** 	      }
 11193              		.loc 1 2777 3 is_stmt 1 view .LVU3638
 11194 0bb4 1EA8     		add	r0, sp, #120
 11195 0bb6 FFF7FEFF 		bl	set_status
 11196              	.LVL1288:
2803:src/display.c ****       nostk:
 11197              		.loc 1 2803 2 view .LVU3639
 11198 0bba FFF7FEFF 		bl	show_stack
 11199              	.LVL1289:
2805:src/display.c **** 	if (!skip) {
 11200              		.loc 1 2805 2 view .LVU3640
 11201 0bbe FFF7FEFF 		bl	show_flags
 11202              	.LVL1290:
2806:src/display.c **** 	  if (State2.runmode) {
 11203              		.loc 1 2806 2 view .LVU3641
 11204 0bc2 FFF755BA 		b	.L851
 11205              	.LVL1291:
 11206              	.L1136:
 11207              	.LBB658:
 11208              	.LBB657:
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11209              		.loc 1 3243 17 view .LVU3642
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11210              		.loc 1 3243 18 is_stmt 0 view .LVU3643
 11211 0bc6 08F10108 		add	r8, r8, #1
 11212              	.LVL1292:
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11213              		.loc 1 3243 12 is_stmt 1 view .LVU3644
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11214              		.loc 1 3243 2 is_stmt 0 view .LVU3645
 11215 0bca B8F1060F 		cmp	r8, #6
 11216 0bce DAD1     		bne	.L923
 11217 0bd0 DDE90457 		ldrd	r5, r7, [sp, #16]
 11218              	.LVL1293:
3243:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11219              		.loc 1 3243 2 view .LVU3646
 11220              	.LBE657:
 11221              	.LBE658:
2803:src/display.c ****       nostk:
 11222              		.loc 1 2803 2 is_stmt 1 view .LVU3647
 11223 0bd4 FFF748BA 		b	.L1093
 11224              	.LVL1294:
 11225              	.L1127:
 11226              	.LBB659:
ARM GAS  /tmp/ccadPcKu.s 			page 320


 11227              	.LBB639:
 11228              	.LBB636:
2367:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11229              		.loc 1 2367 6 view .LVU3648
2367:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11230              		.loc 1 2367 11 is_stmt 0 view .LVU3649
 11231 0bd8 0A27     		movs	r7, #10
 11232 0bda 07FB09F9 		mul	r9, r7, r9
 11233              	.LVL1295:
2368:src/display.c **** 	    p = scopy(buf, "FL ");
 11234              		.loc 1 2368 6 is_stmt 1 view .LVU3650
2368:src/display.c **** 	    p = scopy(buf, "FL ");
 11235              		.loc 1 2368 28 is_stmt 0 view .LVU3651
 11236 0bde B9F1460F 		cmp	r9, #70
2369:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11237              		.loc 1 2369 10 view .LVU3652
 11238 0be2 5E49     		ldr	r1, .L1146+36
 11239 0be4 15A8     		add	r0, sp, #84
 11240              	.LVL1296:
2368:src/display.c **** 	    p = scopy(buf, "FL ");
 11241              		.loc 1 2368 28 view .LVU3653
 11242 0be6 CA46     		mov	r10, r9
 11243 0be8 A8BF     		it	ge
 11244 0bea 4FF0460A 		movge	r10, #70
2369:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11245              		.loc 1 2369 10 view .LVU3654
 11246 0bee FFF7FEFF 		bl	scopy
 11247              	.LVL1297:
2370:src/display.c **** 	    *p++ = '-';
 11248              		.loc 1 2370 10 view .LVU3655
 11249 0bf2 4946     		mov	r1, r9
 11250 0bf4 0222     		movs	r2, #2
 11251 0bf6 FFF7FEFF 		bl	num_arg_0
 11252              	.LVL1298:
2368:src/display.c **** 	    p = scopy(buf, "FL ");
 11253              		.loc 1 2368 10 view .LVU3656
 11254 0bfa 0AF11D0A 		add	r10, r10, #29
 11255              	.LVL1299:
2369:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11256              		.loc 1 2369 6 is_stmt 1 view .LVU3657
2370:src/display.c **** 	    *p++ = '-';
 11257              		.loc 1 2370 6 view .LVU3658
2371:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11258              		.loc 1 2371 6 view .LVU3659
2371:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11259              		.loc 1 2371 11 is_stmt 0 view .LVU3660
 11260 0bfe 2D23     		movs	r3, #45
 11261 0c00 00F8013B 		strb	r3, [r0], #1
 11262              	.LVL1300:
2372:src/display.c **** 	    *p = '\0';
 11263              		.loc 1 2372 6 is_stmt 1 view .LVU3661
2372:src/display.c **** 	    *p = '\0';
 11264              		.loc 1 2372 10 is_stmt 0 view .LVU3662
 11265 0c04 5146     		mov	r1, r10
 11266 0c06 0222     		movs	r2, #2
 11267 0c08 FFF7FEFF 		bl	num_arg_0
 11268              	.LVL1301:
ARM GAS  /tmp/ccadPcKu.s 			page 321


2372:src/display.c **** 	    *p = '\0';
 11269              		.loc 1 2372 10 view .LVU3663
 11270 0c0c 0246     		mov	r2, r0
 11271              	.LVL1302:
2373:src/display.c **** 	    set_status(buf);
 11272              		.loc 1 2373 6 is_stmt 1 view .LVU3664
2373:src/display.c **** 	    set_status(buf);
 11273              		.loc 1 2373 9 is_stmt 0 view .LVU3665
 11274 0c0e 4FF0000B 		mov	fp, #0
 11275              	.LVL1303:
2374:src/display.c **** 	  }
 11276              		.loc 1 2374 6 view .LVU3666
 11277 0c12 15A8     		add	r0, sp, #84
 11278              	.LVL1304:
2373:src/display.c **** 	    set_status(buf);
 11279              		.loc 1 2373 9 view .LVU3667
 11280 0c14 82F800B0 		strb	fp, [r2]
2374:src/display.c **** 	  }
 11281              		.loc 1 2374 6 is_stmt 1 view .LVU3668
 11282 0c18 FFF7FEFF 		bl	set_status
 11283              	.LVL1305:
2374:src/display.c **** 	  }
 11284              		.loc 1 2374 6 is_stmt 0 view .LVU3669
 11285 0c1c 2EE6     		b	.L894
 11286              	.LVL1306:
 11287              	.L1126:
2374:src/display.c **** 	  }
 11288              		.loc 1 2374 6 view .LVU3670
 11289              	.LBE636:
2346:src/display.c **** 	  if (SizeStatRegs)
 11290              		.loc 1 2346 4 is_stmt 1 view .LVU3671
2346:src/display.c **** 	  if (SizeStatRegs)
 11291              		.loc 1 2346 8 is_stmt 0 view .LVU3672
 11292 0c1e 15AF     		add	r7, sp, #84
 11293              	.LVL1307:
2346:src/display.c **** 	  if (SizeStatRegs)
 11294              		.loc 1 2346 8 view .LVU3673
 11295 0c20 4F49     		ldr	r1, .L1146+40
 11296 0c22 3846     		mov	r0, r7
 11297 0c24 FFF7FEFF 		bl	scopy
 11298              	.LVL1308:
2347:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11299              		.loc 1 2347 8 view .LVU3674
 11300 0c28 4E4A     		ldr	r2, .L1146+44
2347:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11301              		.loc 1 2347 7 view .LVU3675
 11302 0c2a 1268     		ldr	r2, [r2]
2346:src/display.c **** 	  if (SizeStatRegs)
 11303              		.loc 1 2346 8 view .LVU3676
 11304 0c2c 0346     		mov	r3, r0
 11305              	.LVL1309:
2347:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11306              		.loc 1 2347 4 is_stmt 1 view .LVU3677
2347:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11307              		.loc 1 2347 7 is_stmt 0 view .LVU3678
 11308 0c2e 002A     		cmp	r2, #0
 11309 0c30 4ED1     		bne	.L1138
ARM GAS  /tmp/ccadPcKu.s 			page 322


 11310              	.L891:
2349:src/display.c **** 	  set_status(buf);
 11311              		.loc 1 2349 4 is_stmt 1 view .LVU3679
2349:src/display.c **** 	  set_status(buf);
 11312              		.loc 1 2349 7 is_stmt 0 view .LVU3680
 11313 0c32 0022     		movs	r2, #0
 11314 0c34 1A70     		strb	r2, [r3]
2350:src/display.c **** 
 11315              		.loc 1 2350 4 is_stmt 1 view .LVU3681
 11316 0c36 3846     		mov	r0, r7
 11317              	.LVL1310:
2350:src/display.c **** 
 11318              		.loc 1 2350 4 is_stmt 0 view .LVU3682
 11319 0c38 FFF7FEFF 		bl	set_status
 11320              	.LVL1311:
2353:src/display.c **** 	  if (LocalRegs < 0) {
 11321              		.loc 1 2353 4 is_stmt 1 view .LVU3683
2353:src/display.c **** 	  if (LocalRegs < 0) {
 11322              		.loc 1 2353 8 is_stmt 0 view .LVU3684
 11323 0c3c FFF7FEFF 		bl	global_regs
 11324              	.LVL1312:
2354:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11325              		.loc 1 2354 8 view .LVU3685
 11326 0c40 DFF80081 		ldr	r8, .L1146+12
2353:src/display.c **** 	  if (LocalRegs < 0) {
 11327              		.loc 1 2353 8 view .LVU3686
 11328 0c44 0146     		mov	r1, r0
 11329 0c46 3846     		mov	r0, r7
 11330 0c48 FFF7FEFF 		bl	num_arg
 11331              	.LVL1313:
2354:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11332              		.loc 1 2354 8 view .LVU3687
 11333 0c4c D8F80020 		ldr	r2, [r8]
2354:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11334              		.loc 1 2354 7 view .LVU3688
 11335 0c50 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11336 0c54 002A     		cmp	r2, #0
2353:src/display.c **** 	  if (LocalRegs < 0) {
 11337              		.loc 1 2353 8 view .LVU3689
 11338 0c56 0346     		mov	r3, r0
 11339              	.LVL1314:
2354:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11340              		.loc 1 2354 4 is_stmt 1 view .LVU3690
2354:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11341              		.loc 1 2354 7 is_stmt 0 view .LVU3691
 11342 0c58 2EDB     		blt	.L1139
 11343              	.LVL1315:
 11344              	.L892:
2358:src/display.c **** 	  set_digits_string(buf, 0);
 11345              		.loc 1 2358 4 is_stmt 1 view .LVU3692
2358:src/display.c **** 	  set_digits_string(buf, 0);
 11346              		.loc 1 2358 7 is_stmt 0 view .LVU3693
 11347 0c5a 0021     		movs	r1, #0
2359:src/display.c **** 	} else {
 11348              		.loc 1 2359 4 view .LVU3694
 11349 0c5c 3846     		mov	r0, r7
 11350              	.LVL1316:
ARM GAS  /tmp/ccadPcKu.s 			page 323


2358:src/display.c **** 	  set_digits_string(buf, 0);
 11351              		.loc 1 2358 7 view .LVU3695
 11352 0c5e 1970     		strb	r1, [r3]
2359:src/display.c **** 	} else {
 11353              		.loc 1 2359 4 is_stmt 1 view .LVU3696
 11354 0c60 FFF7FEFF 		bl	set_digits_string
 11355              	.LVL1317:
2359:src/display.c **** 	} else {
 11356              		.loc 1 2359 4 is_stmt 0 view .LVU3697
 11357 0c64 B7E6     		b	.L889
 11358              	.LVL1318:
 11359              	.L1125:
2337:src/display.c **** 	  p = num_arg(buf, free_mem());
 11360              		.loc 1 2337 4 is_stmt 1 view .LVU3698
 11361 0c66 4048     		ldr	r0, .L1146+48
 11362 0c68 DFF8D880 		ldr	r8, .L1146+12
 11363 0c6c FFF7FEFF 		bl	set_status
 11364              	.LVL1319:
2338:src/display.c **** 	  p = scopy(p, " , FL. ");
 11365              		.loc 1 2338 4 view .LVU3699
2338:src/display.c **** 	  p = scopy(p, " , FL. ");
 11366              		.loc 1 2338 21 is_stmt 0 view .LVU3700
 11367 0c70 FFF7FEFF 		bl	free_mem
 11368              	.LVL1320:
 11369 0c74 0146     		mov	r1, r0
2338:src/display.c **** 	  p = scopy(p, " , FL. ");
 11370              		.loc 1 2338 8 view .LVU3701
 11371 0c76 15A8     		add	r0, sp, #84
 11372              	.LVL1321:
2338:src/display.c **** 	  p = scopy(p, " , FL. ");
 11373              		.loc 1 2338 8 view .LVU3702
 11374 0c78 FFF7FEFF 		bl	num_arg
 11375              	.LVL1322:
2339:src/display.c **** 	  p = num_arg(p, free_flash());
 11376              		.loc 1 2339 4 is_stmt 1 view .LVU3703
2339:src/display.c **** 	  p = num_arg(p, free_flash());
 11377              		.loc 1 2339 8 is_stmt 0 view .LVU3704
 11378 0c7c 3B49     		ldr	r1, .L1146+52
 11379 0c7e FFF7FEFF 		bl	scopy
 11380              	.LVL1323:
2339:src/display.c **** 	  p = num_arg(p, free_flash());
 11381              		.loc 1 2339 8 view .LVU3705
 11382 0c82 0746     		mov	r7, r0
 11383              	.LVL1324:
2340:src/display.c **** 	  *p = '\0';
 11384              		.loc 1 2340 4 is_stmt 1 view .LVU3706
2340:src/display.c **** 	  *p = '\0';
 11385              		.loc 1 2340 19 is_stmt 0 view .LVU3707
 11386 0c84 FFF7FEFF 		bl	free_flash
 11387              	.LVL1325:
2340:src/display.c **** 	  *p = '\0';
 11388              		.loc 1 2340 19 view .LVU3708
 11389 0c88 0146     		mov	r1, r0
2340:src/display.c **** 	  *p = '\0';
 11390              		.loc 1 2340 8 view .LVU3709
 11391 0c8a 3846     		mov	r0, r7
 11392 0c8c FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/ccadPcKu.s 			page 324


 11393              	.LVL1326:
 11394 0c90 0346     		mov	r3, r0
 11395              	.LVL1327:
2341:src/display.c **** 	  set_digits_string(buf, 0);
 11396              		.loc 1 2341 4 is_stmt 1 view .LVU3710
2341:src/display.c **** 	  set_digits_string(buf, 0);
 11397              		.loc 1 2341 7 is_stmt 0 view .LVU3711
 11398 0c92 0021     		movs	r1, #0
2342:src/display.c **** 	}
 11399              		.loc 1 2342 4 view .LVU3712
 11400 0c94 15A8     		add	r0, sp, #84
 11401              	.LVL1328:
2341:src/display.c **** 	  set_digits_string(buf, 0);
 11402              		.loc 1 2341 7 view .LVU3713
 11403 0c96 1970     		strb	r1, [r3]
2342:src/display.c **** 	}
 11404              		.loc 1 2342 4 is_stmt 1 view .LVU3714
 11405 0c98 FFF7FEFF 		bl	set_digits_string
 11406              	.LVL1329:
2342:src/display.c **** 	}
 11407              		.loc 1 2342 4 is_stmt 0 view .LVU3715
 11408 0c9c 9BE6     		b	.L889
 11409              	.LVL1330:
 11410              	.L907:
2342:src/display.c **** 	}
 11411              		.loc 1 2342 4 view .LVU3716
 11412              	.LBE639:
 11413              	.LBE659:
 11414              	.LBB660:
 11415              	.LBB599:
2452:src/display.c **** #ifndef REALBUILD
 11416              		.loc 1 2452 8 is_stmt 1 view .LVU3717
2452:src/display.c **** #ifndef REALBUILD
 11417              		.loc 1 2452 37 is_stmt 0 view .LVU3718
 11418 0c9e 07EB8700 		add	r0, r7, r7, lsl #2
2452:src/display.c **** #ifndef REALBUILD
 11419              		.loc 1 2452 8 view .LVU3719
 11420 0ca2 4146     		mov	r1, r8
 11421 0ca4 5844     		add	r0, r0, fp
 11422 0ca6 FFF7FEFF 		bl	set_exp_digits_string
 11423              	.LVL1331:
2454:src/display.c **** #endif
 11424              		.loc 1 2454 8 is_stmt 1 view .LVU3720
2454:src/display.c **** #endif
 11425              		.loc 1 2454 47 is_stmt 0 view .LVU3721
 11426 0caa 0A21     		movs	r1, #10
2454:src/display.c **** #endif
 11427              		.loc 1 2454 8 view .LVU3722
 11428 0cac 01FB07A1 		mla	r1, r1, r7, r10
 11429 0cb0 2248     		ldr	r0, .L1146+4
 11430 0cb2 FFF7FEFF 		bl	scopy
 11431              	.LVL1332:
2454:src/display.c **** #endif
 11432              		.loc 1 2454 8 view .LVU3723
 11433              	.LBE599:
 11434              	.LBE660:
2803:src/display.c ****       nostk:
ARM GAS  /tmp/ccadPcKu.s 			page 325


 11435              		.loc 1 2803 2 is_stmt 1 view .LVU3724
 11436 0cb6 3CE5     		b	.L1098
 11437              	.LVL1333:
 11438              	.L1139:
 11439              	.LBB661:
 11440              	.LBB640:
2355:src/display.c **** 	    p = num_arg(p, local_regs());
 11441              		.loc 1 2355 6 view .LVU3725
2355:src/display.c **** 	    p = num_arg(p, local_regs());
 11442              		.loc 1 2355 10 is_stmt 0 view .LVU3726
 11443 0cb8 2D49     		ldr	r1, .L1146+56
 11444 0cba FFF7FEFF 		bl	scopy
 11445              	.LVL1334:
2355:src/display.c **** 	    p = num_arg(p, local_regs());
 11446              		.loc 1 2355 10 view .LVU3727
 11447 0cbe 8146     		mov	r9, r0
 11448              	.LVL1335:
2356:src/display.c **** 	  }
 11449              		.loc 1 2356 6 is_stmt 1 view .LVU3728
2356:src/display.c **** 	  }
 11450              		.loc 1 2356 21 is_stmt 0 view .LVU3729
 11451 0cc0 FFF7FEFF 		bl	local_regs
 11452              	.LVL1336:
2356:src/display.c **** 	  }
 11453              		.loc 1 2356 21 view .LVU3730
 11454 0cc4 0146     		mov	r1, r0
2356:src/display.c **** 	  }
 11455              		.loc 1 2356 10 view .LVU3731
 11456 0cc6 4846     		mov	r0, r9
 11457 0cc8 FFF7FEFF 		bl	num_arg
 11458              	.LVL1337:
 11459 0ccc 0346     		mov	r3, r0
 11460              	.LVL1338:
2356:src/display.c **** 	  }
 11461              		.loc 1 2356 10 view .LVU3732
 11462 0cce C4E7     		b	.L892
 11463              	.LVL1339:
 11464              	.L1138:
2348:src/display.c **** 	  *p = '\0';
 11465              		.loc 1 2348 6 is_stmt 1 view .LVU3733
2348:src/display.c **** 	  *p = '\0';
 11466              		.loc 1 2348 10 is_stmt 0 view .LVU3734
 11467 0cd0 2849     		ldr	r1, .L1146+60
 11468 0cd2 FFF7FEFF 		bl	scopy
 11469              	.LVL1340:
2348:src/display.c **** 	  *p = '\0';
 11470              		.loc 1 2348 10 view .LVU3735
 11471 0cd6 0346     		mov	r3, r0
 11472              	.LVL1341:
2348:src/display.c **** 	  *p = '\0';
 11473              		.loc 1 2348 10 view .LVU3736
 11474 0cd8 ABE7     		b	.L891
 11475              	.LVL1342:
 11476              	.L1124:
2348:src/display.c **** 	  *p = '\0';
 11477              		.loc 1 2348 10 view .LVU3737
 11478              	.LBE640:
ARM GAS  /tmp/ccadPcKu.s 			page 326


 11479              	.LBE661:
 11480              	.LBB662:
 11481              	.LBB542:
2695:src/display.c **** 	      decimal64 z;
 11482              		.loc 1 2695 8 is_stmt 1 view .LVU3738
2696:src/display.c **** 
 11483              		.loc 1 2696 8 view .LVU3739
2698:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11484              		.loc 1 2698 8 view .LVU3740
 11485 0cda 0CA8     		add	r0, sp, #48
 11486 0cdc FFF7FEFF 		bl	getX
 11487              	.LVL1343:
2699:src/display.c **** 		const unsigned int f = argKIND(op);
 11488              		.loc 1 2699 8 view .LVU3741
2699:src/display.c **** 		const unsigned int f = argKIND(op);
 11489              		.loc 1 2699 11 is_stmt 0 view .LVU3742
 11490 0ce0 C5F30723 		ubfx	r3, r5, #8, #8
 11491 0ce4 022B     		cmp	r3, #2
 11492 0ce6 69D1     		bne	.L878
 11493              	.LBB543:
2700:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11494              		.loc 1 2700 3 is_stmt 1 view .LVU3743
2700:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11495              		.loc 1 2700 22 is_stmt 0 view .LVU3744
 11496 0ce8 EDB2     		uxtb	r5, r5
 11497              	.LVL1344:
2701:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11498              		.loc 1 2701 3 is_stmt 1 view .LVU3745
2701:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11499              		.loc 1 2701 6 is_stmt 0 view .LVU3746
 11500 0cea 982D     		cmp	r5, #152
 11501              	.LBB544:
2704:src/display.c **** 		}
 11502              		.loc 1 2704 5 view .LVU3747
 11503 0cec 15AF     		add	r7, sp, #84
 11504              	.LBE544:
2701:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11505              		.loc 1 2701 6 view .LVU3748
 11506 0cee 61D8     		bhi	.L879
2701:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11507              		.loc 1 2701 28 discriminator 1 view .LVU3749
 11508 0cf0 1823     		movs	r3, #24
 11509 0cf2 214A     		ldr	r2, .L1146+64
 11510 0cf4 03FB05F3 		mul	r3, r3, r5
 11511 0cf8 D358     		ldr	r3, [r2, r3]
2701:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11512              		.loc 1 2701 23 discriminator 1 view .LVU3750
 11513 0cfa 002B     		cmp	r3, #0
 11514 0cfc 5AD0     		beq	.L879
 11515              	.LBB545:
2702:src/display.c **** 		  update_speed(0);
 11516              		.loc 1 2702 5 is_stmt 1 view .LVU3751
 11517              	.LVL1345:
2703:src/display.c **** 		  fp(&r, &x);
 11518              		.loc 1 2703 20 view .LVU3752
2704:src/display.c **** 		}
 11519              		.loc 1 2704 5 view .LVU3753
ARM GAS  /tmp/ccadPcKu.s 			page 327


 11520 0cfe 0CA9     		add	r1, sp, #48
 11521 0d00 3846     		mov	r0, r7
 11522 0d02 9847     		blx	r3
 11523              	.LVL1346:
 11524              	.L880:
2704:src/display.c **** 		}
 11525              		.loc 1 2704 5 is_stmt 0 view .LVU3754
 11526              	.LBE545:
 11527              	.LBE543:
2710:src/display.c **** 	      packed_from_number(&z, &r);
 11528              		.loc 1 2710 8 is_stmt 1 discriminator 1 view .LVU3755
 11529 0d04 1D4A     		ldr	r2, .L1146+68
 11530 0d06 3946     		mov	r1, r7
 11531 0d08 3846     		mov	r0, r7
 11532 0d0a FFF7FEFF 		bl	decNumberNormalize
 11533              	.LVL1347:
2711:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11534              		.loc 1 2711 8 discriminator 1 view .LVU3756
 11535 0d0e 3946     		mov	r1, r7
 11536 0d10 06A8     		add	r0, sp, #24
 11537 0d12 FFF7FEFF 		bl	packed_from_number
 11538              	.LVL1348:
2712:src/display.c **** 	      skip = 1;
 11539              		.loc 1 2712 8 discriminator 1 view .LVU3757
 11540 0d16 0022     		movs	r2, #0
 11541 0d18 06A8     		add	r0, sp, #24
 11542 0d1a 1146     		mov	r1, r2
 11543 0d1c FFF7FEFF 		bl	set_x
 11544              	.LVL1349:
2713:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11545              		.loc 1 2713 8 discriminator 1 view .LVU3758
2713:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11546              		.loc 1 2713 8 is_stmt 0 discriminator 1 view .LVU3759
 11547              	.LBE542:
 11548 0d20 FCE4     		b	.L875
 11549              	.LVL1350:
 11550              	.L1131:
2713:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11551              		.loc 1 2713 8 discriminator 1 view .LVU3760
 11552              	.LBE662:
2745:src/display.c **** 	    annunciators();
 11553              		.loc 1 2745 56 discriminator 2 view .LVU3761
 11554 0d22 084B     		ldr	r3, .L1146+12
 11555 0d24 1B68     		ldr	r3, [r3]
 11556 0d26 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11557 0d2a DF07     		lsls	r7, r3, #31
 11558 0d2c 7FF51FAE 		bpl	.L918
 11559              	.L917:
2746:src/display.c **** 	  }
 11560              		.loc 1 2746 6 is_stmt 1 view .LVU3762
 11561 0d30 FFF7FEFF 		bl	annunciators
 11562              	.LVL1351:
2803:src/display.c ****       nostk:
 11563              		.loc 1 2803 2 view .LVU3763
 11564 0d34 FDE4     		b	.L1098
 11565              	.L1147:
 11566 0d36 00BF     		.align	2
ARM GAS  /tmp/ccadPcKu.s 			page 328


 11567              	.L1146:
 11568 0d38 398EE338 		.word	954437177
 11569 0d3c 00000000 		.word	LastDisplayedNumber
 11570 0d40 40000000 		.word	.LC30
 11571 0d44 00000000 		.word	main_ram
 11572 0d48 00000000 		.word	DispPlot
 11573 0d4c 00000000 		.word	DispMsg
 11574 0d50 7C000000 		.word	.LC37
 11575 0d54 A8000000 		.word	.LC41
 11576 0d58 00000000 		.word	forceDispPlot
 11577 0d5c 78000000 		.word	.LC36
 11578 0d60 5C000000 		.word	.LC33
 11579 0d64 00000000 		.word	SizeStatRegs
 11580 0d68 4C000000 		.word	.LC31
 11581 0d6c 54000000 		.word	.LC32
 11582 0d70 6C000000 		.word	.LC35
 11583 0d74 64000000 		.word	.LC34
 11584 0d78 00000000 		.word	monfuncs
 11585 0d7c 00000000 		.word	Ctx
 11586              	.LVL1352:
 11587              	.L910:
 11588              	.LBB663:
 11589              	.LBB643:
2479:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11590              		.loc 1 2479 4 view .LVU3764
 11591 0d80 15AF     		add	r7, sp, #84
 11592 0d82 1022     		movs	r2, #16
 11593 0d84 3846     		mov	r0, r7
 11594 0d86 FFF7FEFF 		bl	xset
 11595              	.LVL1353:
2483:src/display.c **** #endif
 11596              		.loc 1 2483 4 view .LVU3765
2483:src/display.c **** #endif
 11597              		.loc 1 2483 9 is_stmt 0 view .LVU3766
 11598 0d8a 1749     		ldr	r1, .L1148
 11599 0d8c 3846     		mov	r0, r7
 11600 0d8e FFF7FEFF 		bl	scopy_spc
 11601              	.LVL1354:
2485:src/display.c **** 	    *bp++ = '.';
 11602              		.loc 1 2485 8 view .LVU3767
 11603 0d92 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11604              	.LVL1355:
2485:src/display.c **** 	    *bp++ = '.';
 11605              		.loc 1 2485 4 is_stmt 1 view .LVU3768
2485:src/display.c **** 	    *bp++ = '.';
 11606              		.loc 1 2485 7 is_stmt 0 view .LVU3769
 11607 0d94 DB07     		lsls	r3, r3, #31
 11608 0d96 1ED5     		bpl	.L912
2486:src/display.c **** 	    if (n >= 100) {
 11609              		.loc 1 2486 6 is_stmt 1 view .LVU3770
 11610              	.LVL1356:
2486:src/display.c **** 	    if (n >= 100) {
 11611              		.loc 1 2486 12 is_stmt 0 view .LVU3771
 11612 0d98 2E23     		movs	r3, #46
2487:src/display.c **** 	      *bp++ = '1';
 11613              		.loc 1 2487 9 view .LVU3772
 11614 0d9a BAF1630F 		cmp	r10, #99
ARM GAS  /tmp/ccadPcKu.s 			page 329


2486:src/display.c **** 	    if (n >= 100) {
 11615              		.loc 1 2486 12 view .LVU3773
 11616 0d9e 0370     		strb	r3, [r0]
2487:src/display.c **** 	      *bp++ = '1';
 11617              		.loc 1 2487 6 is_stmt 1 view .LVU3774
2487:src/display.c **** 	      *bp++ = '1';
 11618              		.loc 1 2487 9 is_stmt 0 view .LVU3775
 11619 0da0 14DC     		bgt	.L913
2486:src/display.c **** 	    if (n >= 100) {
 11620              		.loc 1 2486 9 view .LVU3776
 11621 0da2 0130     		adds	r0, r0, #1
 11622              	.LVL1357:
 11623              	.L914:
2493:src/display.c **** 	  else
 11624              		.loc 1 2493 6 is_stmt 1 view .LVU3777
2493:src/display.c **** 	  else
 11625              		.loc 1 2493 11 is_stmt 0 view .LVU3778
 11626 0da4 5146     		mov	r1, r10
 11627 0da6 0222     		movs	r2, #2
 11628 0da8 FFF7FEFF 		bl	num_arg_0
 11629              	.LVL1358:
 11630              	.L916:
2496:src/display.c **** 	}
 11631              		.loc 1 2496 4 is_stmt 1 view .LVU3779
 11632 0dac 3846     		mov	r0, r7
 11633 0dae FFF7FEFF 		bl	set_status
 11634              	.LVL1359:
 11635 0db2 D0E5     		b	.L911
 11636              	.LVL1360:
 11637              	.L879:
2496:src/display.c **** 	}
 11638              		.loc 1 2496 4 is_stmt 0 view .LVU3780
 11639              	.LBE643:
 11640              	.LBE663:
 11641              	.LBB664:
 11642              	.LBB547:
 11643              	.LBB546:
2707:src/display.c **** 	      } else
 11644              		.loc 1 2707 5 is_stmt 1 view .LVU3781
 11645 0db4 3846     		mov	r0, r7
 11646 0db6 FFF7FEFF 		bl	set_NaN
 11647              	.LVL1361:
 11648 0dba A3E7     		b	.L880
 11649              	.LVL1362:
 11650              	.L878:
2707:src/display.c **** 	      } else
 11651              		.loc 1 2707 5 is_stmt 0 view .LVU3782
 11652              	.LBE546:
2709:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11653              		.loc 1 2709 3 is_stmt 1 view .LVU3783
 11654 0dbc 15AF     		add	r7, sp, #84
 11655 0dbe 0CAA     		add	r2, sp, #48
 11656 0dc0 05F07F01 		and	r1, r5, #127
 11657 0dc4 3846     		mov	r0, r7
 11658 0dc6 FFF7FEFF 		bl	do_conv
 11659              	.LVL1363:
 11660 0dca 9BE7     		b	.L880
ARM GAS  /tmp/ccadPcKu.s 			page 330


 11661              	.LVL1364:
 11662              	.L913:
2709:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11663              		.loc 1 2709 3 is_stmt 0 view .LVU3784
 11664              	.LBE547:
 11665              	.LBE664:
 11666              	.LBB665:
 11667              	.LBB644:
2488:src/display.c **** 	      n -= 100;
 11668              		.loc 1 2488 8 is_stmt 1 view .LVU3785
2488:src/display.c **** 	      n -= 100;
 11669              		.loc 1 2488 14 is_stmt 0 view .LVU3786
 11670 0dcc 3123     		movs	r3, #49
 11671 0dce 4370     		strb	r3, [r0, #1]
2489:src/display.c **** 	    }
 11672              		.loc 1 2489 8 is_stmt 1 view .LVU3787
2489:src/display.c **** 	    }
 11673              		.loc 1 2489 10 is_stmt 0 view .LVU3788
 11674 0dd0 AAF1640A 		sub	r10, r10, #100
 11675              	.LVL1365:
2488:src/display.c **** 	      n -= 100;
 11676              		.loc 1 2488 11 view .LVU3789
 11677 0dd4 0230     		adds	r0, r0, #2
 11678              	.LVL1366:
 11679              	.L912:
2492:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11680              		.loc 1 2492 4 is_stmt 1 view .LVU3790
2492:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11681              		.loc 1 2492 7 is_stmt 0 view .LVU3791
 11682 0dd6 BAF1630F 		cmp	r10, #99
 11683 0dda E3DD     		ble	.L914
2495:src/display.c **** 	  set_status(buf);
 11684              		.loc 1 2495 6 is_stmt 1 view .LVU3792
 11685              	.LVL1367:
2495:src/display.c **** 	  set_status(buf);
 11686              		.loc 1 2495 22 is_stmt 0 view .LVU3793
 11687 0ddc 034B     		ldr	r3, .L1148+4
 11688 0dde 5344     		add	r3, r3, r10
2495:src/display.c **** 	  set_status(buf);
 11689              		.loc 1 2495 12 view .LVU3794
 11690 0de0 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 11691 0de4 0370     		strb	r3, [r0]
 11692 0de6 E1E7     		b	.L916
 11693              	.L1149:
 11694              		.align	2
 11695              	.L1148:
 11696 0de8 A0000000 		.word	.LC40
 11697 0dec BC000000 		.word	.LC27
 11698              	.LBE644:
 11699              	.LBE665:
 11700              		.cfi_endproc
 11701              	.LFE34:
 11703              		.section	.text.frozen_display,"ax",%progbits
 11704              		.align	1
 11705              		.p2align 2,,3
 11706              		.global	frozen_display
 11707              		.syntax unified
ARM GAS  /tmp/ccadPcKu.s 			page 331


 11708              		.thumb
 11709              		.thumb_func
 11710              		.fpu fpv4-sp-d16
 11712              	frozen_display:
 11713              	.LFB35:
3223:src/display.c **** 	State2.disp_freeze = 0;
 11714              		.loc 1 3223 7 is_stmt 1 view -0
 11715              		.cfi_startproc
 11716              		@ args = 0, pretend = 0, frame = 0
 11717              		@ frame_needed = 0, uses_anonymous_args = 0
3224:src/display.c **** 	display();
 11718              		.loc 1 3224 2 view .LVU3796
3223:src/display.c **** 	State2.disp_freeze = 0;
 11719              		.loc 1 3223 7 is_stmt 0 view .LVU3797
 11720 0000 10B5     		push	{r4, lr}
 11721              		.cfi_def_cfa_offset 8
 11722              		.cfi_offset 4, -8
 11723              		.cfi_offset 14, -4
3224:src/display.c **** 	display();
 11724              		.loc 1 3224 21 view .LVU3798
 11725 0002 064C     		ldr	r4, .L1152
 11726 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11727 0006 6FF30413 		bfc	r3, #4, #1
 11728 000a E375     		strb	r3, [r4, #23]
3225:src/display.c **** 	State2.disp_freeze = 1;
 11729              		.loc 1 3225 2 is_stmt 1 view .LVU3799
 11730 000c FFF7FEFF 		bl	display
 11731              	.LVL1368:
3226:src/display.c ****       }
 11732              		.loc 1 3226 2 view .LVU3800
3226:src/display.c ****       }
 11733              		.loc 1 3226 21 is_stmt 0 view .LVU3801
 11734 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11735 0012 43F01003 		orr	r3, r3, #16
 11736 0016 E375     		strb	r3, [r4, #23]
3227:src/display.c **** 
 11737              		.loc 1 3227 7 view .LVU3802
 11738 0018 10BD     		pop	{r4, pc}
 11739              	.L1153:
 11740 001a 00BF     		.align	2
 11741              	.L1152:
 11742 001c 00000000 		.word	StateWhileOn
 11743              		.cfi_endproc
 11744              	.LFE35:
 11746              		.section	.text.message,"ax",%progbits
 11747              		.align	1
 11748              		.p2align 2,,3
 11749              		.global	message
 11750              		.syntax unified
 11751              		.thumb
 11752              		.thumb_func
 11753              		.fpu fpv4-sp-d16
 11755              	message:
 11756              	.LVL1369:
 11757              	.LFB45:
3439:src/display.c **** 	State2.disp_freeze = 0;
 11758              		.loc 1 3439 7 is_stmt 1 view -0
ARM GAS  /tmp/ccadPcKu.s 			page 332


 11759              		.cfi_startproc
 11760              		@ args = 0, pretend = 0, frame = 0
 11761              		@ frame_needed = 0, uses_anonymous_args = 0
3440:src/display.c **** 	State2.disp_small = 0;
 11762              		.loc 1 3440 2 view .LVU3804
3441:src/display.c **** 	WasDataEntry = 0;
 11763              		.loc 1 3441 2 view .LVU3805
3441:src/display.c **** 	WasDataEntry = 0;
 11764              		.loc 1 3441 20 is_stmt 0 view .LVU3806
 11765 0000 174A     		ldr	r2, .L1164
3439:src/display.c **** 	State2.disp_freeze = 0;
 11766              		.loc 1 3439 7 view .LVU3807
 11767 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11768              		.cfi_def_cfa_offset 24
 11769              		.cfi_offset 3, -24
 11770              		.cfi_offset 4, -20
 11771              		.cfi_offset 5, -16
 11772              		.cfi_offset 6, -12
 11773              		.cfi_offset 7, -8
 11774              		.cfi_offset 14, -4
3441:src/display.c **** 	WasDataEntry = 0;
 11775              		.loc 1 3441 20 view .LVU3808
 11776 0004 D38A     		ldrh	r3, [r2, #22]
3442:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11777              		.loc 1 3442 15 view .LVU3809
 11778 0006 174E     		ldr	r6, .L1164+4
3441:src/display.c **** 	WasDataEntry = 0;
 11779              		.loc 1 3441 20 view .LVU3810
 11780 0008 23F48453 		bic	r3, r3, #4224
3442:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11781              		.loc 1 3442 15 view .LVU3811
 11782 000c 0027     		movs	r7, #0
3441:src/display.c **** 	WasDataEntry = 0;
 11783              		.loc 1 3441 20 view .LVU3812
 11784 000e D382     		strh	r3, [r2, #22]	@ movhi
3442:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11785              		.loc 1 3442 2 is_stmt 1 view .LVU3813
3443:src/display.c **** 	  // Complete redraw necessary
 11786              		.loc 1 3443 5 is_stmt 0 view .LVU3814
 11787 0010 9B05     		lsls	r3, r3, #22
3439:src/display.c **** 	State2.disp_freeze = 0;
 11788              		.loc 1 3439 7 view .LVU3815
 11789 0012 0546     		mov	r5, r0
 11790 0014 0C46     		mov	r4, r1
3442:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11791              		.loc 1 3442 15 view .LVU3816
 11792 0016 3760     		str	r7, [r6]
3443:src/display.c **** 	  // Complete redraw necessary
 11793              		.loc 1 3443 2 is_stmt 1 view .LVU3817
3443:src/display.c **** 	  // Complete redraw necessary
 11794              		.loc 1 3443 5 is_stmt 0 view .LVU3818
 11795 0018 12D5     		bpl	.L1155
3443:src/display.c **** 	  // Complete redraw necessary
 11796              		.loc 1 3443 27 discriminator 1 view .LVU3819
 11797 001a D1B1     		cbz	r1, .L1163
 11798              	.L1156:
3450:src/display.c **** 	    ShowRPN = 0;
ARM GAS  /tmp/ccadPcKu.s 			page 333


 11799              		.loc 1 3450 6 is_stmt 1 view .LVU3820
 11800 001c FFF7FEFF 		bl	reset_disp
 11801              	.LVL1370:
3451:src/display.c **** 	    set_annunciators();
 11802              		.loc 1 3451 6 view .LVU3821
3451:src/display.c **** 	    set_annunciators();
 11803              		.loc 1 3451 14 is_stmt 0 view .LVU3822
 11804 0020 114B     		ldr	r3, .L1164+8
 11805 0022 0026     		movs	r6, #0
 11806 0024 1E60     		str	r6, [r3]
3452:src/display.c **** 	    set_digits_string( str2, 0 );
 11807              		.loc 1 3452 6 is_stmt 1 view .LVU3823
 11808 0026 FFF7FEFF 		bl	set_annunciators
 11809              	.LVL1371:
3453:src/display.c **** 	  }
 11810              		.loc 1 3453 6 view .LVU3824
 11811 002a 3146     		mov	r1, r6
 11812 002c 2046     		mov	r0, r4
 11813 002e FFF7FEFF 		bl	set_digits_string
 11814              	.LVL1372:
3455:src/display.c **** 	  finish_display();// message
 11815              		.loc 1 3455 4 view .LVU3825
 11816 0032 2846     		mov	r0, r5
 11817 0034 FFF7FEFF 		bl	set_status
 11818              	.LVL1373:
3456:src/display.c **** 	}
 11819              		.loc 1 3456 4 view .LVU3826
3458:src/display.c **** 
 11820              		.loc 1 3458 7 is_stmt 0 view .LVU3827
 11821 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11822              		.cfi_remember_state
 11823              		.cfi_restore 14
 11824              		.cfi_restore 7
 11825              		.cfi_restore 6
 11826              		.cfi_restore 5
 11827              		.cfi_restore 4
 11828              		.cfi_restore 3
 11829              		.cfi_def_cfa_offset 0
 11830              	.LVL1374:
3456:src/display.c **** 	}
 11831              		.loc 1 3456 4 view .LVU3828
 11832 003c FFF7FEBF 		b	finish_display
 11833              	.LVL1375:
 11834              	.L1155:
 11835              		.cfi_restore_state
3449:src/display.c **** 	    reset_disp();
 11836              		.loc 1 3449 4 is_stmt 1 view .LVU3829
3449:src/display.c **** 	    reset_disp();
 11837              		.loc 1 3449 7 is_stmt 0 view .LVU3830
 11838 0040 0029     		cmp	r1, #0
 11839 0042 EBD1     		bne	.L1156
3455:src/display.c **** 	  finish_display();// message
 11840              		.loc 1 3455 4 is_stmt 1 view .LVU3831
 11841 0044 2846     		mov	r0, r5
 11842              	.LVL1376:
3455:src/display.c **** 	  finish_display();// message
 11843              		.loc 1 3455 4 is_stmt 0 view .LVU3832
ARM GAS  /tmp/ccadPcKu.s 			page 334


 11844 0046 FFF7FEFF 		bl	set_status
 11845              	.LVL1377:
3456:src/display.c **** 	}
 11846              		.loc 1 3456 4 is_stmt 1 view .LVU3833
3458:src/display.c **** 
 11847              		.loc 1 3458 7 is_stmt 0 view .LVU3834
 11848 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11849              		.cfi_remember_state
 11850              		.cfi_restore 14
 11851              		.cfi_restore 7
 11852              		.cfi_restore 6
 11853              		.cfi_restore 5
 11854              		.cfi_restore 4
 11855              		.cfi_restore 3
 11856              		.cfi_def_cfa_offset 0
 11857              	.LVL1378:
3456:src/display.c **** 	}
 11858              		.loc 1 3456 4 view .LVU3835
 11859 004e FFF7FEBF 		b	finish_display
 11860              	.LVL1379:
 11861              	.L1163:
 11862              		.cfi_restore_state
3445:src/display.c **** 	  display();
 11863              		.loc 1 3445 4 is_stmt 1 view .LVU3836
3445:src/display.c **** 	  display();
 11864              		.loc 1 3445 12 is_stmt 0 view .LVU3837
 11865 0052 064B     		ldr	r3, .L1164+12
 11866 0054 1860     		str	r0, [r3]
3446:src/display.c **** 	}
 11867              		.loc 1 3446 4 is_stmt 1 view .LVU3838
3458:src/display.c **** 
 11868              		.loc 1 3458 7 is_stmt 0 view .LVU3839
 11869 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11870              		.cfi_restore 14
 11871              		.cfi_restore 7
 11872              		.cfi_restore 6
 11873              		.cfi_restore 5
 11874              		.cfi_restore 4
 11875              		.cfi_restore 3
 11876              		.cfi_def_cfa_offset 0
3446:src/display.c **** 	}
 11877              		.loc 1 3446 4 view .LVU3840
 11878 005a FFF7FEBF 		b	display
 11879              	.LVL1380:
 11880              	.L1165:
3446:src/display.c **** 	}
 11881              		.loc 1 3446 4 view .LVU3841
 11882 005e 00BF     		.align	2
 11883              	.L1164:
 11884 0060 00000000 		.word	StateWhileOn
 11885 0064 00000000 		.word	WasDataEntry
 11886 0068 00000000 		.word	ShowRPN
 11887 006c 00000000 		.word	DispMsg
 11888              		.cfi_endproc
 11889              	.LFE45:
 11891              		.section	.text.error_message,"ax",%progbits
 11892              		.align	1
ARM GAS  /tmp/ccadPcKu.s 			page 335


 11893              		.p2align 2,,3
 11894              		.global	error_message
 11895              		.syntax unified
 11896              		.thumb
 11897              		.thumb_func
 11898              		.fpu fpv4-sp-d16
 11900              	error_message:
 11901              	.LVL1381:
 11902              	.LFB1:
 131:src/display.c **** #define MSG1(top) top "\0"
 11903              		.loc 1 131 1 is_stmt 1 view -0
 11904              		.cfi_startproc
 11905              		@ args = 0, pretend = 0, frame = 0
 11906              		@ frame_needed = 0, uses_anonymous_args = 0
 136:src/display.c ****     {
 11907              		.loc 1 136 3 view .LVU3843
 194:src/display.c ****     {
 11908              		.loc 1 194 3 view .LVU3844
 229:src/display.c ****     const char *p = error_table[e];
 11909              		.loc 1 229 3 view .LVU3845
 131:src/display.c **** #define MSG1(top) top "\0"
 11910              		.loc 1 131 1 is_stmt 0 view .LVU3846
 11911 0000 38B5     		push	{r3, r4, r5, lr}
 11912              		.cfi_def_cfa_offset 16
 11913              		.cfi_offset 3, -16
 11914              		.cfi_offset 4, -12
 11915              		.cfi_offset 5, -8
 11916              		.cfi_offset 14, -4
 229:src/display.c ****     const char *p = error_table[e];
 11917              		.loc 1 229 21 view .LVU3847
 11918 0002 1A4B     		ldr	r3, .L1177
 11919 0004 1B68     		ldr	r3, [r3]
 11920 0006 0343     		orrs	r3, r0, r3
 11921 0008 2CD0     		beq	.L1166
 11922              	.LBB666:
 230:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11923              		.loc 1 230 5 is_stmt 1 view .LVU3848
 230:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11924              		.loc 1 230 17 is_stmt 0 view .LVU3849
 11925 000a 194B     		ldr	r3, .L1177+4
 11926 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11927              	.LVL1382:
 231:src/display.c ****     if (*q == '\0')
 11928              		.loc 1 231 5 is_stmt 1 view .LVU3850
 11929 0010 0446     		mov	r4, r0
 231:src/display.c ****     if (*q == '\0')
 11930              		.loc 1 231 21 is_stmt 0 view .LVU3851
 11931 0012 0021     		movs	r1, #0
 11932 0014 2846     		mov	r0, r5
 11933              	.LVL1383:
 231:src/display.c ****     if (*q == '\0')
 11934              		.loc 1 231 21 view .LVU3852
 11935 0016 FFF7FEFF 		bl	find_char
 11936              	.LVL1384:
 232:src/display.c ****       q = S7_ERROR;
 11937              		.loc 1 232 5 is_stmt 1 view .LVU3853
 232:src/display.c ****       q = S7_ERROR;
ARM GAS  /tmp/ccadPcKu.s 			page 336


 11938              		.loc 1 232 9 is_stmt 0 view .LVU3854
 11939 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 232:src/display.c ****       q = S7_ERROR;
 11940              		.loc 1 232 8 view .LVU3855
 11941 001c 9BB9     		cbnz	r3, .L1175
 233:src/display.c ****     if (*q == 'X') {
 11942              		.loc 1 233 9 view .LVU3856
 11943 001e 1549     		ldr	r1, .L1177+8
 11944              	.L1168:
 11945              	.LVL1385:
 243:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 11946              		.loc 1 243 7 is_stmt 1 view .LVU3857
 11947 0020 2846     		mov	r0, r5
 11948 0022 FFF7FEFF 		bl	message
 11949              	.LVL1386:
 244:src/display.c **** #ifndef REALBUILD
 11950              		.loc 1 244 7 view .LVU3858
 244:src/display.c **** #ifndef REALBUILD
 11951              		.loc 1 244 26 is_stmt 0 view .LVU3859
 11952 0026 144B     		ldr	r3, .L1177+12
 246:src/display.c **** #endif
 11953              		.loc 1 246 7 view .LVU3860
 11954 0028 1449     		ldr	r1, .L1177+16
 244:src/display.c **** #ifndef REALBUILD
 11955              		.loc 1 244 26 view .LVU3861
 11956 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 246:src/display.c **** #endif
 11957              		.loc 1 246 7 view .LVU3862
 11958 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11959 0030 1348     		ldr	r0, .L1177+20
 244:src/display.c **** #ifndef REALBUILD
 11960              		.loc 1 244 31 view .LVU3863
 11961 0032 003C     		subs	r4, r4, #0
 244:src/display.c **** #ifndef REALBUILD
 11962              		.loc 1 244 31 view .LVU3864
 11963 0034 18BF     		it	ne
 11964 0036 0124     		movne	r4, #1
 11965              	.LVL1387:
 244:src/display.c **** #ifndef REALBUILD
 11966              		.loc 1 244 26 view .LVU3865
 11967 0038 64F30412 		bfi	r2, r4, #4, #1
 11968 003c DA75     		strb	r2, [r3, #23]
 246:src/display.c **** #endif
 11969              		.loc 1 246 7 is_stmt 1 view .LVU3866
 11970              	.LBE666:
 271:src/display.c **** 
 11971              		.loc 1 271 1 is_stmt 0 view .LVU3867
 11972 003e BDE83840 		pop	{r3, r4, r5, lr}
 11973              		.cfi_remember_state
 11974              		.cfi_restore 14
 11975              		.cfi_restore 5
 11976              		.cfi_restore 4
 11977              		.cfi_restore 3
 11978              		.cfi_def_cfa_offset 0
 11979              	.LVL1388:
 11980              	.LBB673:
 246:src/display.c **** #endif
ARM GAS  /tmp/ccadPcKu.s 			page 337


 11981              		.loc 1 246 7 view .LVU3868
 11982 0042 FFF7FEBF 		b	scopy
 11983              	.LVL1389:
 11984              	.L1175:
 11985              		.cfi_restore_state
 234:src/display.c ****       DispMsg = p;
 11986              		.loc 1 234 5 is_stmt 1 view .LVU3869
 234:src/display.c ****       DispMsg = p;
 11987              		.loc 1 234 8 is_stmt 0 view .LVU3870
 11988 0046 582B     		cmp	r3, #88
 11989 0048 0DD1     		bne	.L1176
 235:src/display.c ****       frozen_display();
 11990              		.loc 1 235 7 is_stmt 1 view .LVU3871
 11991              	.LBB667:
 11992              	.LBB668:
3224:src/display.c **** 	display();
 11993              		.loc 1 3224 21 is_stmt 0 view .LVU3872
 11994 004a 0B4C     		ldr	r4, .L1177+12
 11995              	.LVL1390:
3224:src/display.c **** 	display();
 11996              		.loc 1 3224 21 view .LVU3873
 11997              	.LBE668:
 11998              	.LBE667:
 235:src/display.c ****       frozen_display();
 11999              		.loc 1 235 15 view .LVU3874
 12000 004c 0D4A     		ldr	r2, .L1177+24
 12001              	.LBB671:
 12002              	.LBB669:
3224:src/display.c **** 	display();
 12003              		.loc 1 3224 21 view .LVU3875
 12004 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12005              	.LBE669:
 12006              	.LBE671:
 235:src/display.c ****       frozen_display();
 12007              		.loc 1 235 15 view .LVU3876
 12008 0050 1560     		str	r5, [r2]
 236:src/display.c ****     }
 12009              		.loc 1 236 7 is_stmt 1 view .LVU3877
 12010              	.LBB672:
 12011              	.LBI667:
3222:src/display.c ****       {
 12012              		.loc 1 3222 12 view .LVU3878
 12013              	.LBB670:
3224:src/display.c **** 	display();
 12014              		.loc 1 3224 2 view .LVU3879
3224:src/display.c **** 	display();
 12015              		.loc 1 3224 21 is_stmt 0 view .LVU3880
 12016 0052 6FF30413 		bfc	r3, #4, #1
 12017 0056 E375     		strb	r3, [r4, #23]
3225:src/display.c **** 	State2.disp_freeze = 1;
 12018              		.loc 1 3225 2 is_stmt 1 view .LVU3881
 12019 0058 FFF7FEFF 		bl	display
 12020              	.LVL1391:
3226:src/display.c ****       }
 12021              		.loc 1 3226 2 view .LVU3882
3226:src/display.c ****       }
 12022              		.loc 1 3226 21 is_stmt 0 view .LVU3883
ARM GAS  /tmp/ccadPcKu.s 			page 338


 12023 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12024 005e 43F01003 		orr	r3, r3, #16
 12025 0062 E375     		strb	r3, [r4, #23]
 12026              	.LVL1392:
 12027              	.L1166:
3226:src/display.c ****       }
 12028              		.loc 1 3226 21 view .LVU3884
 12029              	.LBE670:
 12030              	.LBE672:
 12031              	.LBE673:
 271:src/display.c **** 
 12032              		.loc 1 271 1 view .LVU3885
 12033 0064 38BD     		pop	{r3, r4, r5, pc}
 12034              	.LVL1393:
 12035              	.L1176:
 12036              	.LBB674:
 231:src/display.c ****     if (*q == '\0')
 12037              		.loc 1 231 17 view .LVU3886
 12038 0066 411C     		adds	r1, r0, #1
 12039 0068 DAE7     		b	.L1168
 12040              	.L1178:
 12041 006a 00BF     		.align	2
 12042              	.L1177:
 12043 006c 00000000 		.word	Running
 12044 0070 00000000 		.word	.LANCHOR27
 12045 0074 00000000 		.word	.LANCHOR26
 12046 0078 00000000 		.word	StateWhileOn
 12047 007c 00000000 		.word	.LANCHOR28
 12048 0080 00000000 		.word	LastDisplayedNumber
 12049 0084 00000000 		.word	DispMsg
 12050              	.LBE674:
 12051              		.cfi_endproc
 12052              	.LFE1:
 12054              		.section	.rodata.str1.4,"aMS",%progbits,1
 12055              		.align	2
 12056              	.LC43:
 12057 0000 06316306 		.ascii	"\0061c\006\006\000"
 12057      0600
 12058 0006 0000     		.align	2
 12059              	.LC44:
 12060 0008 756E0600 		.ascii	"un\006\000"
 12061              		.align	2
 12062              	.LC45:
 12063 000c 736D00   		.ascii	"sm\000"
 12064              		.set	CSWTCH.315,CSWTCH.313
 12065 000f 00       		.align	2
 12066              	.LC46:
 12067 0010 20502072 		.ascii	" P r o g r a m \000"
 12067      206F2067 
 12067      20722061 
 12067      206D2000 
 12068              		.align	2
 12069              	.LC47:
 12070 0020 206F2072 		.ascii	" o r   d a t e \000"
 12070      20202064 
 12070      20612074 
 12070      20652000 
ARM GAS  /tmp/ccadPcKu.s 			page 339


 12071              		.align	2
 12072              	.LC48:
 12073 0030 204F2070 		.ascii	" O p - c o d e \000"
 12073      202D2063 
 12073      206F2064 
 12073      20652000 
 12074              		.align	2
 12075              	.LC49:
 12076 0040 204C2061 		.ascii	" L a b e l \000"
 12076      20622065 
 12076      206C2000 
 12077              		.align	2
 12078              	.LC50:
 12079 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12079      20652072 
 12079      20612074 
 12079      2069206F 
 12079      206E2000 
 12080              		.align	2
 12081              	.LC51:
 12082 0060 20462075 		.ascii	" F u l l \000"
 12082      206C206C 
 12082      2000
 12083 006a 0000     		.align	2
 12084              	.LC52:
 12085 006c 2043206C 		.ascii	" C l a s h \000"
 12085      20612073 
 12085      20682000 
 12086              		.align	2
 12087              	.LC53:
 12088 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12088      206F2020 
 12088      2073206D 
 12088      2061206C 
 12088      206C2000 
 12089              		.align	2
 12090              	.LC54:
 12091 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12091      20742061 
 12091      20202070 
 12091      206F2069 
 12091      206E2074 
 12092              		.align	2
 12093              	.LC55:
 12094 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12094      20722061 
 12094      206D2065 
 12094      20742065 
 12094      20722000 
 12095              		.align	2
 12096              	.LC56:
 12097 00b8 20442061 		.ascii	" D a t a \000"
 12097      20742061 
 12097      2000
 12098 00c2 0000     		.align	2
 12099              	.LC57:
 12100 00c4 20502072 		.ascii	" P r o t e c t e d \000"
ARM GAS  /tmp/ccadPcKu.s 			page 340


 12100      206F2074 
 12100      20652063 
 12100      20742065 
 12100      20642000 
 12101              		.align	2
 12102              	.LC58:
 12103 00d8 2046206F 		.ascii	" F o u n d \000"
 12103      2075206E 
 12103      20642000 
 12104              		.align	2
 12105              	.LC59:
 12106 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12106      2073206D 
 12106      20612074 
 12106      20632068 
 12106      2000
 12107 00f6 0000     		.align	2
 12108              	.LC60:
 12109 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12109      20732074 
 12109      2061206C 
 12109      206C2065 
 12109      20642000 
 12110              		.global	DIGITS
 12111              		.comm	IoAnnunciator,4,4
 12112              		.comm	IntMaxWindow,4,4
 12113              		.comm	JustDisplayed,4,4
 12114              		.comm	ShowRPN,4,4
 12115              		.comm	forceDispPlot,1,1
 12116              		.comm	LastDisplayedExponent,5,4
 12117              		.comm	LastDisplayedNumber,26,4
 12118              		.comm	LastDisplayedText,31,4
 12119              		.global	no_status_top
 12120              		.comm	DispPlot,2,2
 12121              		.comm	DispMsg,4,4
 12122              		.global	SvnRevision
 12123              		.section	.rodata
 12124              		.align	2
 12125              		.set	.LANCHOR17,. + 0
 12126              	.LC18:
 12127 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12127      22002E00 
 12127      00
 12128 0009 000000   		.space	3
 12129              	.LC22:
 12130 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12130      332E3306 
 12130      0600
 12131 0016 00000000 		.space	4
 12132 001a 0000     		.space	2
 12133              	.LC61:
 12134 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12134      696E6700 
 12134      50726F47 
 12134      72614D6D 
 12134      00
 12135 002d 000000   		.space	3
ARM GAS  /tmp/ccadPcKu.s 			page 341


 12136              	.LC62:
 12137 0030 446F6D61 		.ascii	"Domain\000\000"
 12137      696E0000 
 12138              	.LC63:
 12139 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12139      74696D65 
 12139      006F7220 
 12139      64417445 
 12139      00
 12140 0049 000000   		.space	3
 12141              	.LC64:
 12142 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12142      66696E65 
 12142      64004F70 
 12142      2D434F64 
 12142      4500
 12143 005e 0000     		.space	2
 12144              	.LC65:
 12145 0060 2B9F0000 		.ascii	"+\237\000\000"
 12146              	.LC66:
 12147 0064 2D9F0000 		.ascii	"-\237\000\000"
 12148              	.LC67:
 12149 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12149      75636800 
 12149      4C416245 
 12149      4C00
 12150 0076 0000     		.space	2
 12151              	.LC68:
 12152 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12152      67616C00 
 12152      4F504572 
 12152      4174696F 
 12152      6E00
 12153 008a 0000     		.space	2
 12154              	.LC69:
 12155 008c 4F757420 		.ascii	"Out of range\000\000"
 12155      6F662072 
 12155      616E6765 
 12155      0000
 12156 009a 0000     		.space	2
 12157              	.LC70:
 12158 009c 42616420 		.ascii	"Bad digit\000\000"
 12158      64696769 
 12158      740000
 12159 00a7 00       		.space	1
 12160              	.LC71:
 12161 00a8 546F6F20 		.ascii	"Too long\000\000"
 12161      6C6F6E67 
 12161      0000
 12162 00b2 0000     		.space	2
 12163              	.LC72:
 12164 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12164      69730046 
 12164      754C4C00 
 12165              	.LC73:
 12166 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12166      6B00434C 
ARM GAS  /tmp/ccadPcKu.s 			page 342


 12166      41534800 
 12167              	.LC74:
 12168 00cc 42616420 		.ascii	"Bad mode\000\000"
 12168      6D6F6465 
 12168      0000
 12169 00d6 0000     		.space	2
 12170              	.LC75:
 12171 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12171      06060673 
 12171      697A6500 
 12171      746F6F20 
 12171      534D6D41 
 12172 00ef 00       		.space	1
 12173              	.LC76:
 12174 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12174      66657700 
 12174      64417441 
 12174      20506F69 
 12174      6E745300 
 12175              	.LC77:
 12176 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12176      6C696400 
 12176      50617261 
 12176      4D6D4574 
 12176      457200
 12177 0117 00       		.space	1
 12178              	.LC78:
 12179 0118 492F4F00 		.ascii	"I/O\000\000"
 12179      00
 12180 011d 000000   		.space	3
 12181              	.LC79:
 12182 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12182      6C696400 
 12182      64417441 
 12182      00
 12183 012d 000000   		.space	3
 12184              	.LC80:
 12185 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12185      65005072 
 12185      6F744563 
 12185      74456400 
 12186              	.LC81:
 12187 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12187      6F6F7400 
 12187      466F756E 
 12187      6400
 12188 014e 0000     		.space	2
 12189              	.LC82:
 12190 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12190      6978004D 
 12190      6D49534D 
 12190      6D417443 
 12190      4800
 12191 0162 0000     		.space	2
 12192              	.LC83:
 12193 0164 53696E67 		.ascii	"Singular\000\000"
 12193      756C6172 
ARM GAS  /tmp/ccadPcKu.s 			page 343


 12193      0000
 12194 016e 0000     		.space	2
 12195              	.LC84:
 12196 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12196      68206973 
 12196      0046754C 
 12196      4C00
 12197 017e 0000     		.space	2
 12198              	.LC85:
 12199 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12199      72797374 
 12199      616C0049 
 12199      6E537461 
 12199      4C4C4564 
 12200 0195 000000   		.space	3
 12201              	.LC86:
 12202 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12202      5800
 12203              		.section	.bss.DecimalMode,"aw",%nobits
 12204              		.set	.LANCHOR1,. + 0
 12207              	DecimalMode:
 12208 0000 00       		.space	1
 12209              		.section	.bss.SeparatorMode,"aw",%nobits
 12210              		.set	.LANCHOR0,. + 0
 12213              	SeparatorMode:
 12214 0000 00       		.space	1
 12215              		.section	.bss.no_status_top,"aw",%nobits
 12216              		.align	1
 12217              		.set	.LANCHOR18,. + 0
 12220              	no_status_top:
 12221 0000 0000     		.space	2
 12222              		.section	.rodata.CSWTCH.313,"a"
 12223              		.align	2
 12224              		.set	.LANCHOR11,. + 0
 12227              	CSWTCH.313:
 12228 0000 02000000 		.word	2
 12229 0004 08000000 		.word	8
 12230 0008 0A000000 		.word	10
 12231 000c 10000000 		.word	16
 12232              		.section	.rodata.CSWTCH.339,"a"
 12233              		.align	2
 12234              		.set	.LANCHOR16,. + 0
 12237              	CSWTCH.339:
 12238 0000 00000000 		.word	.LC43
 12239 0004 08000000 		.word	.LC44
 12240 0008 0C000000 		.word	.LC45
 12241              		.section	.rodata.DIGITS,"a"
 12242              		.align	2
 12243              		.set	.LANCHOR12,. + 0
 12246              	DIGITS:
 12247 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12247      34353637 
 12247      38394142 
 12247      43444546 
 12247      00
 12248              		.section	.rodata.S7_ERROR,"a"
 12249              		.align	2
ARM GAS  /tmp/ccadPcKu.s 			page 344


 12250              		.set	.LANCHOR26,. + 0
 12253              	S7_ERROR:
 12254 0000 4572726F 		.ascii	"Error\000"
 12254      7200
 12255              		.section	.rodata.S7_INF,"a"
 12256              		.align	2
 12257              		.set	.LANCHOR5,. + 0
 12260              	S7_INF:
 12261 0000 496E6669 		.ascii	"Infinity\000"
 12261      6E697479 
 12261      00
 12262              		.section	.rodata.S7_INF_Text,"a"
 12263              		.align	2
 12264              		.set	.LANCHOR7,. + 0
 12267              	S7_INF_Text:
 12268 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12268      20662069 
 12268      206E2069 
 12268      20742079 
 12268      2000
 12269              		.section	.rodata.S7_NEG_INF_Text,"a"
 12270              		.align	2
 12271              		.set	.LANCHOR6,. + 0
 12274              	S7_NEG_INF_Text:
 12275 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12275      20662069 
 12275      206E2069 
 12275      20742079 
 12275      2000
 12276              		.section	.rodata.S7_NaN,"a"
 12277              		.align	2
 12278              		.set	.LANCHOR3,. + 0
 12281              	S7_NaN:
 12282 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12282      6E754D6D 
 12282      45726963 
 12282      00
 12283              		.section	.rodata.S7_NaN_Text,"a"
 12284              		.align	2
 12285              		.set	.LANCHOR4,. + 0
 12288              	S7_NaN_Text:
 12289 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12289      20742020 
 12289      206E2075 
 12289      206D2065 
 12289      20722069 
 12290              		.section	.rodata.S7_STEP,"a"
 12291              		.align	2
 12292              		.set	.LANCHOR25,. + 0
 12295              	S7_STEP:
 12296 0000 53744550 		.ascii	"StEP \000"
 12296      2000
 12297              		.section	.rodata.S7_STEP_ShortText,"a"
 12298              		.align	2
 12299              		.set	.LANCHOR19,. + 0
 12302              	S7_STEP_ShortText:
 12303 0000 53544550 		.ascii	"STEP\000"
ARM GAS  /tmp/ccadPcKu.s 			page 345


 12303      00
 12304              		.section	.rodata.S7_fract_EQ,"a"
 12305              		.align	2
 12306              		.set	.LANCHOR9,. + 0
 12309              	S7_fract_EQ:
 12310 0000 203D2000 		.ascii	" = \000"
 12311              		.section	.rodata.S7_fract_GT,"a"
 12312              		.align	2
 12313              		.set	.LANCHOR10,. + 0
 12316              	S7_fract_GT:
 12317 0000 20477400 		.ascii	" Gt\000"
 12318              		.section	.rodata.S7_fract_LT,"a"
 12319              		.align	2
 12320              		.set	.LANCHOR8,. + 0
 12323              	S7_fract_LT:
 12324 0000 204C7400 		.ascii	" Lt\000"
 12325              		.section	.rodata.S_SURE,"a"
 12326              		.align	2
 12327              		.set	.LANCHOR21,. + 0
 12330              	S_SURE:
 12331 0000 53757265 		.ascii	"Sure?\000"
 12331      3F00
 12332              		.section	.rodata.SvnRevision,"a"
 12333              		.align	2
 12334              		.set	.LANCHOR20,. + 0
 12337              	SvnRevision:
 12338 0000 30202020 		.ascii	"0   "
 12339              		.section	.rodata.digtbl,"a"
 12340              		.align	2
 12341              		.set	.LANCHOR2,. + 0
 12344              	digtbl:
 12345 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12345      02421252 
 12345      2D000000 
 12345      00000000 
 12345      00
 12346 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12346      00000017 
 12346      01000000 
 12346      00
 12347 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12347      28000000 
 12347      0020664B 
 12347      00000010 
 12348 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12348      5E5B3973 
 12348      77497F7B 
 12348      00000612 
 12348      0300787D 
 12349 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12349      673D240F 
 12349      75266C6D 
 12349      6F7C7914 
 12349      73362F00 
 12350 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12350      161F7674 
 12350      6735040F 
ARM GAS  /tmp/ccadPcKu.s 			page 346


 12350      75266915 
 12350      177C7914 
 12351 0076 000F003B 		.ascii	"\000\017\000;"
 12352              		.section	.rodata.error_table.8493,"a"
 12353              		.align	2
 12354              		.set	.LANCHOR27,. + 0
 12357              	error_table.8493:
 12358 0000 1C000000 		.word	.LC61
 12359 0004 30000000 		.word	.LC62
 12360 0008 38000000 		.word	.LC63
 12361 000c 4C000000 		.word	.LC64
 12362 0010 60000000 		.word	.LC65
 12363 0014 64000000 		.word	.LC66
 12364 0018 68000000 		.word	.LC67
 12365 001c 78000000 		.word	.LC68
 12366 0020 8C000000 		.word	.LC69
 12367 0024 9C000000 		.word	.LC70
 12368 0028 A8000000 		.word	.LC71
 12369 002c B4000000 		.word	.LC72
 12370 0030 C0000000 		.word	.LC73
 12371 0034 CC000000 		.word	.LC74
 12372 0038 D8000000 		.word	.LC75
 12373 003c F0000000 		.word	.LC76
 12374 0040 04010000 		.word	.LC77
 12375 0044 18010000 		.word	.LC78
 12376 0048 20010000 		.word	.LC79
 12377 004c 30010000 		.word	.LC80
 12378 0050 40010000 		.word	.LC81
 12379 0054 50010000 		.word	.LC82
 12380 0058 64010000 		.word	.LC83
 12381 005c 70010000 		.word	.LC84
 12382 0060 80010000 		.word	.LC85
 12383 0064 98010000 		.word	.LC86
 12384              		.section	.rodata.error_table_text.8494,"a"
 12385              		.align	2
 12386              		.set	.LANCHOR28,. + 0
 12389              	error_table_text.8494:
 12390 0000 10000000 		.word	.LC46
 12391 0004 A8000000 		.word	.LC41
 12392 0008 20000000 		.word	.LC47
 12393 000c 30000000 		.word	.LC48
 12394 0010 A8000000 		.word	.LC41
 12395 0014 A8000000 		.word	.LC41
 12396 0018 40000000 		.word	.LC49
 12397 001c 4C000000 		.word	.LC50
 12398 0020 A8000000 		.word	.LC41
 12399 0024 A8000000 		.word	.LC41
 12400 0028 A8000000 		.word	.LC41
 12401 002c 60000000 		.word	.LC51
 12402 0030 6C000000 		.word	.LC52
 12403 0034 A8000000 		.word	.LC41
 12404 0038 78000000 		.word	.LC53
 12405 003c 8C000000 		.word	.LC54
 12406 0040 A4000000 		.word	.LC55
 12407 0044 A8000000 		.word	.LC41
 12408 0048 B8000000 		.word	.LC56
 12409 004c C4000000 		.word	.LC57
ARM GAS  /tmp/ccadPcKu.s 			page 347


 12410 0050 D8000000 		.word	.LC58
 12411 0054 E4000000 		.word	.LC59
 12412 0058 A8000000 		.word	.LC41
 12413 005c 60000000 		.word	.LC51
 12414 0060 F8000000 		.word	.LC60
 12415 0064 A8000000 		.word	.LC41
 12416              		.section	.rodata.libname,"a"
 12417              		.align	2
 12418              		.set	.LANCHOR22,. + 0
 12421              	libname:
 12422 0000 72414D6D 		.ascii	"rAMm\000"
 12422      00
 12423 0005 4C696220 		.ascii	"Lib \000"
 12423      00
 12424 000a 42757020 		.ascii	"Bup \000"
 12424      00
 12425 000f 726F4D6D 		.ascii	"roMm\000"
 12425      00
 12426              		.section	.rodata.libname_shorttext,"a"
 12427              		.align	2
 12428              		.set	.LANCHOR24,. + 0
 12431              	libname_shorttext:
 12432 0000 52616D00 		.ascii	"Ram\000"
 12433 0004 00       		.space	1
 12434 0005 4C696200 		.ascii	"Lib\000"
 12435 0009 00       		.space	1
 12436 000a 42757000 		.ascii	"Bup\000"
 12437 000e 00       		.space	1
 12438 000f 526F6D00 		.ascii	"Rom\000"
 12439 0013 00       		.space	1
 12440              		.section	.rodata.libname_text,"a"
 12441              		.align	2
 12442              		.set	.LANCHOR23,. + 0
 12445              	libname_text:
 12446 0000 20522061 		.ascii	" R a m \000"
 12446      206D2000 
 12447 0008 0000     		.space	2
 12448 000a 204C2069 		.ascii	" L i b \000"
 12448      20622000 
 12449 0012 0000     		.space	2
 12450 0014 20422075 		.ascii	" B u p \000"
 12450      20702000 
 12451 001c 0000     		.space	2
 12452 001e 2052206F 		.ascii	" R o m \000"
 12452      206D2000 
 12453 0026 0000     		.space	2
 12454              		.section	.rodata.shift_chars.8592,"a"
 12455              		.align	2
 12456              		.set	.LANCHOR15,. + 0
 12459              	shift_chars.8592:
 12460 0000 20111213 		.ascii	" \021\022\023"
 12461              		.section	.rodata.small_dots.8783,"a"
 12462              		.align	2
 12463              		.set	.LANCHOR14,. + 0
 12466              	small_dots.8783:
 12467 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12467      07E12C06 
ARM GAS  /tmp/ccadPcKu.s 			page 348


 12467      07E12C06 
 12467      06
 12468              		.section	.rodata.small_minus.8782,"a"
 12469              		.align	2
 12470              		.set	.LANCHOR13,. + 0
 12473              	small_minus.8782:
 12474 0000 07C22D06 		.ascii	"\007\302-\006"
 12475              		.text
 12476              	.Letext0:
 12477              		.file 2 "src/decNumber/decContext.h"
 12478              		.file 3 "src/decNumber/decNumber.h"
 12479              		.file 4 "src/decNumber/decimal64.h"
 12480              		.file 5 "src/decNumber/decimal128.h"
 12481              		.file 6 "src/xeq.h"
 12482              		.file 7 "src/data.h"
 12483              		.file 8 "src/storage.h"
 12484              		.file 9 "src/display.h"
 12485              		.file 10 "src/consts.h"
 12486              		.file 11 "src/stats.h"
 12487              		.file 12 "src/revision.h"
 12488              		.file 13 "src/charset7.h"
 12489              		.file 14 "src/lcd.h"
 12490              		.file 15 "src/decn.h"
 12491              		.file 16 "src/alpha.h"
 12492              		.file 17 "src/int.h"
ARM GAS  /tmp/ccadPcKu.s 			page 349


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccadPcKu.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccadPcKu.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccadPcKu.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccadPcKu.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccadPcKu.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccadPcKu.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccadPcKu.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccadPcKu.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccadPcKu.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccadPcKu.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccadPcKu.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccadPcKu.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccadPcKu.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccadPcKu.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccadPcKu.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccadPcKu.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccadPcKu.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccadPcKu.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/ccadPcKu.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/ccadPcKu.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/ccadPcKu.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccadPcKu.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccadPcKu.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccadPcKu.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/ccadPcKu.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccadPcKu.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/ccadPcKu.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/ccadPcKu.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccadPcKu.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccadPcKu.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccadPcKu.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccadPcKu.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/ccadPcKu.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccadPcKu.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccadPcKu.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/ccadPcKu.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccadPcKu.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/ccadPcKu.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccadPcKu.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/ccadPcKu.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccadPcKu.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/ccadPcKu.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/ccadPcKu.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccadPcKu.s:3755   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.313:0000000000000000 CSWTCH.315
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccadPcKu.s:3767   .text.set_int_x:0000000000000360 $t
     /tmp/ccadPcKu.s:3874   .text.set_int_x:00000000000003c0 $d
ARM GAS  /tmp/ccadPcKu.s 			page 350


     /tmp/ccadPcKu.s:3881   .text.set_annunciators:0000000000000000 $t
     /tmp/ccadPcKu.s:3888   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccadPcKu.s:4261   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccadPcKu.s:4273   .text.getdig:0000000000000000 $t
     /tmp/ccadPcKu.s:4281   .text.getdig:0000000000000000 getdig
     /tmp/ccadPcKu.s:4301   .text.getdig:0000000000000008 $d
     /tmp/ccadPcKu.s:4306   .text.dot:0000000000000000 $t
     /tmp/ccadPcKu.s:4314   .text.dot:0000000000000000 dot
     /tmp/ccadPcKu.s:4337   .text.std_round_fix:0000000000000000 $t
     /tmp/ccadPcKu.s:4345   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccadPcKu.s:4427   .text.std_round_fix:000000000000004c $d
     /tmp/ccadPcKu.s:4433   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccadPcKu.s:4441   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccadPcKu.s:4501   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccadPcKu.s:4508   .text.pixel_length:0000000000000000 $t
     /tmp/ccadPcKu.s:4516   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccadPcKu.s:4607   .text.set_status:0000000000000000 $t
     /tmp/ccadPcKu.s:4614   .text.set_status:0000000000000000 set_status
     /tmp/ccadPcKu.s:4687   .text.set_status:0000000000000038 $d
     /tmp/ccadPcKu.s:4692   .text.set_x_dn:0000000000000000 $t
     /tmp/ccadPcKu.s:4700   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccadPcKu.s:5468   .text.set_x_dn:0000000000000328 $d
     /tmp/ccadPcKu.s:5477   .text.set_x_dn:000000000000033c $t
     /tmp/ccadPcKu.s:5596   .text.set_x_dn:00000000000003dc $d
     /tmp/ccadPcKu.s:5602   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccadPcKu.s:5629   .text.set_x_dn:000000000000041c $d
     /tmp/ccadPcKu.s:5635   .text.set_x_dn:0000000000000426 $t
     /tmp/ccadPcKu.s:6140   .text.set_x_dn:0000000000000644 $d
     /tmp/ccadPcKu.s:6156   .text.set_x_dn:0000000000000660 $t
     /tmp/ccadPcKu.s:6870   .text.set_x_dn:0000000000000950 $d
     /tmp/ccadPcKu.s:6879   .text.set_x:0000000000000000 $t
     /tmp/ccadPcKu.s:6886   .text.set_x:0000000000000000 set_x
     /tmp/ccadPcKu.s:6954   .text.format_reg:0000000000000000 $t
     /tmp/ccadPcKu.s:6962   .text.format_reg:0000000000000000 format_reg
     /tmp/ccadPcKu.s:7081   .text.format_reg:0000000000000064 $d
     /tmp/ccadPcKu.s:7087   .text.set_status_right:0000000000000000 $t
     /tmp/ccadPcKu.s:7094   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccadPcKu.s:7238   .text.set_status_right:000000000000006c $d
     /tmp/ccadPcKu.s:7243   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccadPcKu.s:7250   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccadPcKu.s:7375   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccadPcKu.s:7380   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:7429   .text.annunciators:0000000000000000 $t
     /tmp/ccadPcKu.s:7436   .text.annunciators:0000000000000000 annunciators
     /tmp/ccadPcKu.s:8123   .text.annunciators:0000000000000300 $d
     /tmp/ccadPcKu.s:8144   .text.annunciators:0000000000000344 $t
     /tmp/ccadPcKu.s:8399   .text.annunciators:000000000000044c $d
     /tmp/ccadPcKu.s:8415   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:8482   .text.display:0000000000000000 $t
     /tmp/ccadPcKu.s:8490   .text.display:0000000000000000 display
     /tmp/ccadPcKu.s:9143   .text.display:00000000000002ec $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccadPcKu.s:9162   .text.display:0000000000000324 $t
     /tmp/ccadPcKu.s:9881   .text.display:000000000000062c $d
ARM GAS  /tmp/ccadPcKu.s 			page 351


     /tmp/ccadPcKu.s:9908   .text.display:0000000000000680 $t
     /tmp/ccadPcKu.s:10702  .text.display:000000000000099c $d
     /tmp/ccadPcKu.s:10718  .text.display:00000000000009d0 $t
     /tmp/ccadPcKu.s:11568  .text.display:0000000000000d38 $d
     /tmp/ccadPcKu.s:11591  .text.display:0000000000000d80 $t
     /tmp/ccadPcKu.s:11696  .text.display:0000000000000de8 $d
     /tmp/ccadPcKu.s:11704  .text.frozen_display:0000000000000000 $t
     /tmp/ccadPcKu.s:11712  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccadPcKu.s:11742  .text.frozen_display:000000000000001c $d
     /tmp/ccadPcKu.s:11747  .text.message:0000000000000000 $t
     /tmp/ccadPcKu.s:11755  .text.message:0000000000000000 message
     /tmp/ccadPcKu.s:11884  .text.message:0000000000000060 $d
     /tmp/ccadPcKu.s:11892  .text.error_message:0000000000000000 $t
     /tmp/ccadPcKu.s:11900  .text.error_message:0000000000000000 error_message
     /tmp/ccadPcKu.s:12043  .text.error_message:000000000000006c $d
     /tmp/ccadPcKu.s:12055  .rodata.str1.4:0000000000000000 $d
     /tmp/ccadPcKu.s:12227  .rodata.CSWTCH.313:0000000000000000 CSWTCH.313
     /tmp/ccadPcKu.s:12246  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccadPcKu.s:12220  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccadPcKu.s:12337  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccadPcKu.s:12124  .rodata:0000000000000000 $d
     /tmp/ccadPcKu.s:12207  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccadPcKu.s:12208  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccadPcKu.s:12213  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccadPcKu.s:12214  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccadPcKu.s:12216  .bss.no_status_top:0000000000000000 $d
     /tmp/ccadPcKu.s:12223  .rodata.CSWTCH.313:0000000000000000 $d
     /tmp/ccadPcKu.s:12233  .rodata.CSWTCH.339:0000000000000000 $d
     /tmp/ccadPcKu.s:12237  .rodata.CSWTCH.339:0000000000000000 CSWTCH.339
     /tmp/ccadPcKu.s:12242  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccadPcKu.s:12249  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccadPcKu.s:12253  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccadPcKu.s:12256  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccadPcKu.s:12260  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccadPcKu.s:12263  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccadPcKu.s:12267  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccadPcKu.s:12270  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccadPcKu.s:12274  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccadPcKu.s:12277  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccadPcKu.s:12281  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccadPcKu.s:12284  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccadPcKu.s:12288  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccadPcKu.s:12291  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccadPcKu.s:12295  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccadPcKu.s:12298  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccadPcKu.s:12302  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccadPcKu.s:12305  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccadPcKu.s:12309  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccadPcKu.s:12312  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccadPcKu.s:12316  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccadPcKu.s:12319  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccadPcKu.s:12323  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccadPcKu.s:12326  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccadPcKu.s:12330  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccadPcKu.s:12333  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccadPcKu.s:12340  .rodata.digtbl:0000000000000000 $d
ARM GAS  /tmp/ccadPcKu.s 			page 352


     /tmp/ccadPcKu.s:12344  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccadPcKu.s:12353  .rodata.error_table.8493:0000000000000000 $d
     /tmp/ccadPcKu.s:12357  .rodata.error_table.8493:0000000000000000 error_table.8493
     /tmp/ccadPcKu.s:12385  .rodata.error_table_text.8494:0000000000000000 $d
     /tmp/ccadPcKu.s:12389  .rodata.error_table_text.8494:0000000000000000 error_table_text.8494
     /tmp/ccadPcKu.s:12417  .rodata.libname:0000000000000000 $d
     /tmp/ccadPcKu.s:12421  .rodata.libname:0000000000000000 libname
     /tmp/ccadPcKu.s:12427  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccadPcKu.s:12431  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccadPcKu.s:12441  .rodata.libname_text:0000000000000000 $d
     /tmp/ccadPcKu.s:12445  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccadPcKu.s:12455  .rodata.shift_chars.8592:0000000000000000 $d
     /tmp/ccadPcKu.s:12459  .rodata.shift_chars.8592:0000000000000000 shift_chars.8592
     /tmp/ccadPcKu.s:12462  .rodata.small_dots.8783:0000000000000000 $d
     /tmp/ccadPcKu.s:12466  .rodata.small_dots.8783:0000000000000000 small_dots.8783
     /tmp/ccadPcKu.s:12469  .rodata.small_minus.8782:0000000000000000 $d
     /tmp/ccadPcKu.s:12473  .rodata.small_minus.8782:0000000000000000 small_minus.8782

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
ARM GAS  /tmp/ccadPcKu.s 			page 353


__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
getprog
prt
findmultilbl
alpha_rcl_s
get_const
StackBase
multicmds
find_label_from
slen
global_regs
free_mem
free_flash
local_regs
ARM GAS  /tmp/ccadPcKu.s 			page 354


getX
packed_from_number
SizeStatRegs
monfuncs
set_NaN
do_conv
